
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00029100  00012000  00012000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000300  20000000  0003b100  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000059e4  20000300  0003b400  00030300  2**4
                  ALLOC
  3 .stack        00002004  20005ce4  00040de4  00030300  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00030300  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00030328  2**0
                  CONTENTS, READONLY
  6 .debug_info   0013a46d  00000000  00000000  00030381  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00011741  00000000  00000000  0016a7ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00017221  00000000  00000000  0017bf2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00003e38  00000000  00000000  00193150  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00003a68  00000000  00000000  00196f88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00042743  00000000  00000000  0019a9f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0005fa68  00000000  00000000  001dd133  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000c4057  00000000  00000000  0023cb9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000ea28  00000000  00000000  00300bf4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00012000 <exception_table>:
   12000:	e8 7c 00 20 11 bb 02 00 09 bc 02 00 09 bc 02 00     .|. ............
	...
   1202c:	7d ad 01 00 00 00 00 00 00 00 00 00 a1 ae 01 00     }...............
   1203c:	e9 ae 01 00 09 bc 02 00 09 bc 02 00 09 bc 02 00     ................
   1204c:	61 7c 02 00 8d 71 02 00 09 bc 02 00 61 35 01 00     a|...q......a5..
   1205c:	09 bc 02 00 a5 36 01 00 05 83 02 00 1d 83 02 00     .....6..........
   1206c:	35 83 02 00 4d 83 02 00 65 83 02 00 7d 83 02 00     5...M...e...}...
   1207c:	59 ba 02 00 6d ba 02 00 81 ba 02 00 69 8a 01 00     Y...m.......i...
   1208c:	7d 8a 01 00 91 8a 01 00 00 00 00 00 00 00 00 00     }...............
   1209c:	e9 33 01 00 09 bc 02 00 25 35 01 00 09 bc 02 00     .3......%5......
   120ac:	09 bc 02 00 00 00 00 00                             ........

000120b4 <__do_global_dtors_aux>:
   120b4:	b510      	push	{r4, lr}
   120b6:	4c06      	ldr	r4, [pc, #24]	; (120d0 <__do_global_dtors_aux+0x1c>)
   120b8:	7823      	ldrb	r3, [r4, #0]
   120ba:	2b00      	cmp	r3, #0
   120bc:	d107      	bne.n	120ce <__do_global_dtors_aux+0x1a>
   120be:	4b05      	ldr	r3, [pc, #20]	; (120d4 <__do_global_dtors_aux+0x20>)
   120c0:	2b00      	cmp	r3, #0
   120c2:	d002      	beq.n	120ca <__do_global_dtors_aux+0x16>
   120c4:	4804      	ldr	r0, [pc, #16]	; (120d8 <__do_global_dtors_aux+0x24>)
   120c6:	e000      	b.n	120ca <__do_global_dtors_aux+0x16>
   120c8:	bf00      	nop
   120ca:	2301      	movs	r3, #1
   120cc:	7023      	strb	r3, [r4, #0]
   120ce:	bd10      	pop	{r4, pc}
   120d0:	20000300 	.word	0x20000300
   120d4:	00000000 	.word	0x00000000
   120d8:	0003b100 	.word	0x0003b100

000120dc <frame_dummy>:
   120dc:	4b08      	ldr	r3, [pc, #32]	; (12100 <frame_dummy+0x24>)
   120de:	b510      	push	{r4, lr}
   120e0:	2b00      	cmp	r3, #0
   120e2:	d003      	beq.n	120ec <frame_dummy+0x10>
   120e4:	4907      	ldr	r1, [pc, #28]	; (12104 <frame_dummy+0x28>)
   120e6:	4808      	ldr	r0, [pc, #32]	; (12108 <frame_dummy+0x2c>)
   120e8:	e000      	b.n	120ec <frame_dummy+0x10>
   120ea:	bf00      	nop
   120ec:	4807      	ldr	r0, [pc, #28]	; (1210c <frame_dummy+0x30>)
   120ee:	6803      	ldr	r3, [r0, #0]
   120f0:	2b00      	cmp	r3, #0
   120f2:	d100      	bne.n	120f6 <frame_dummy+0x1a>
   120f4:	bd10      	pop	{r4, pc}
   120f6:	4b06      	ldr	r3, [pc, #24]	; (12110 <frame_dummy+0x34>)
   120f8:	2b00      	cmp	r3, #0
   120fa:	d0fb      	beq.n	120f4 <frame_dummy+0x18>
   120fc:	4798      	blx	r3
   120fe:	e7f9      	b.n	120f4 <frame_dummy+0x18>
   12100:	00000000 	.word	0x00000000
   12104:	20000304 	.word	0x20000304
   12108:	0003b100 	.word	0x0003b100
   1210c:	0003b100 	.word	0x0003b100
   12110:	00000000 	.word	0x00000000

00012114 <ssd1306_hard_reset>:
 * \brief Perform a hard reset of the OLED controller
 *
 * This functions will reset the OLED controller by setting the reset pin low.
 */
static inline void ssd1306_hard_reset(void)
{
   12114:	b580      	push	{r7, lr}
   12116:	af00      	add	r7, sp, #0
	/*uint32_t delay_10us = 10 * (system_gclk_gen_get_hz(0)/1000000);
	port_pin_set_output_level(SSD1306_RES_PIN, false);
	delay_cycles(delay_10us); // At lest 10us
	port_pin_set_output_level(SSD1306_RES_PIN, true);
	delay_cycles(delay_10us); // At lest 10us*/
}
   12118:	46c0      	nop			; (mov r8, r8)
   1211a:	46bd      	mov	sp, r7
   1211c:	bd80      	pop	{r7, pc}

0001211e <ssd1306_interface_init>:
 *
 * Depending on what interface used for interfacing the OLED controller this
 * function will initialize the necessary hardware.
 */
static void ssd1306_interface_init(void)
{
   1211e:	b580      	push	{r7, lr}
   12120:	af00      	add	r7, sp, #0

}
   12122:	46c0      	nop			; (mov r8, r8)
   12124:	46bd      	mov	sp, r7
   12126:	bd80      	pop	{r7, pc}

00012128 <ssd1306_init>:
 * Call this function to initialize the hardware interface and the OLED
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void ssd1306_init(void)
{
   12128:	b580      	push	{r7, lr}
   1212a:	af00      	add	r7, sp, #0


	// Initialize the interface
	ssd1306_interface_init();
   1212c:	4b25      	ldr	r3, [pc, #148]	; (121c4 <ssd1306_init+0x9c>)
   1212e:	4798      	blx	r3

	// Do a hard reset of the OLED display controller
	ssd1306_hard_reset();
   12130:	4b25      	ldr	r3, [pc, #148]	; (121c8 <ssd1306_init+0xa0>)
   12132:	4798      	blx	r3

	// Set the reset pin to the default state
	//port_pin_set_output_level(SSD1306_RES_PIN, true);
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFF); //0xAE
   12134:	20ae      	movs	r0, #174	; 0xae
   12136:	4b25      	ldr	r3, [pc, #148]	; (121cc <ssd1306_init+0xa4>)
   12138:	4798      	blx	r3
	
	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO); //0XD5
   1213a:	20d5      	movs	r0, #213	; 0xd5
   1213c:	4b23      	ldr	r3, [pc, #140]	; (121cc <ssd1306_init+0xa4>)
   1213e:	4798      	blx	r3
	ssd1306_write_command(0x80);
   12140:	2080      	movs	r0, #128	; 0x80
   12142:	4b22      	ldr	r3, [pc, #136]	; (121cc <ssd1306_init+0xa4>)
   12144:	4798      	blx	r3
	
	
	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO); //0XA8
   12146:	20a8      	movs	r0, #168	; 0xa8
   12148:	4b20      	ldr	r3, [pc, #128]	; (121cc <ssd1306_init+0xa4>)
   1214a:	4798      	blx	r3
	ssd1306_write_command(0x2F); //2F
   1214c:	202f      	movs	r0, #47	; 0x2f
   1214e:	4b1f      	ldr	r3, [pc, #124]	; (121cc <ssd1306_init+0xa4>)
   12150:	4798      	blx	r3
	
	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET); //D3
   12152:	20d3      	movs	r0, #211	; 0xd3
   12154:	4b1d      	ldr	r3, [pc, #116]	; (121cc <ssd1306_init+0xa4>)
   12156:	4798      	blx	r3
	ssd1306_write_command(0x00);
   12158:	2000      	movs	r0, #0
   1215a:	4b1c      	ldr	r3, [pc, #112]	; (121cc <ssd1306_init+0xa4>)
   1215c:	4798      	blx	r3
	
	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));	
   1215e:	2040      	movs	r0, #64	; 0x40
   12160:	4b1a      	ldr	r3, [pc, #104]	; (121cc <ssd1306_init+0xa4>)
   12162:	4798      	blx	r3
	
	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING); //8D
   12164:	208d      	movs	r0, #141	; 0x8d
   12166:	4b19      	ldr	r3, [pc, #100]	; (121cc <ssd1306_init+0xa4>)
   12168:	4798      	blx	r3
	ssd1306_write_command(0x14);
   1216a:	2014      	movs	r0, #20
   1216c:	4b17      	ldr	r3, [pc, #92]	; (121cc <ssd1306_init+0xa4>)
   1216e:	4798      	blx	r3

	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY); //A6
   12170:	20a6      	movs	r0, #166	; 0xa6
   12172:	4b16      	ldr	r3, [pc, #88]	; (121cc <ssd1306_init+0xa4>)
   12174:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON); //0xA4
   12176:	20a4      	movs	r0, #164	; 0xa4
   12178:	4b14      	ldr	r3, [pc, #80]	; (121cc <ssd1306_init+0xa4>)
   1217a:	4798      	blx	r3
		
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL0_SEG0| 0x1); //0xA0
   1217c:	20a1      	movs	r0, #161	; 0xa1
   1217e:	4b13      	ldr	r3, [pc, #76]	; (121cc <ssd1306_init+0xa4>)
   12180:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN); //0xC8
   12182:	20c8      	movs	r0, #200	; 0xc8
   12184:	4b11      	ldr	r3, [pc, #68]	; (121cc <ssd1306_init+0xa4>)
   12186:	4798      	blx	r3
	
	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS); //0xDA
   12188:	20da      	movs	r0, #218	; 0xda
   1218a:	4b10      	ldr	r3, [pc, #64]	; (121cc <ssd1306_init+0xa4>)
   1218c:	4798      	blx	r3
	ssd1306_write_command(0x12);
   1218e:	2012      	movs	r0, #18
   12190:	4b0e      	ldr	r3, [pc, #56]	; (121cc <ssd1306_init+0xa4>)
   12192:	4798      	blx	r3
		
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0); //0x81
   12194:	2081      	movs	r0, #129	; 0x81
   12196:	4b0d      	ldr	r3, [pc, #52]	; (121cc <ssd1306_init+0xa4>)
   12198:	4798      	blx	r3
	ssd1306_write_command(0x8F);
   1219a:	208f      	movs	r0, #143	; 0x8f
   1219c:	4b0b      	ldr	r3, [pc, #44]	; (121cc <ssd1306_init+0xa4>)
   1219e:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD); //0xD9
   121a0:	20d9      	movs	r0, #217	; 0xd9
   121a2:	4b0a      	ldr	r3, [pc, #40]	; (121cc <ssd1306_init+0xa4>)
   121a4:	4798      	blx	r3
	ssd1306_write_command(0xF1);	
   121a6:	20f1      	movs	r0, #241	; 0xf1
   121a8:	4b08      	ldr	r3, [pc, #32]	; (121cc <ssd1306_init+0xa4>)
   121aa:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL); //DB
   121ac:	20db      	movs	r0, #219	; 0xdb
   121ae:	4b07      	ldr	r3, [pc, #28]	; (121cc <ssd1306_init+0xa4>)
   121b0:	4798      	blx	r3
	ssd1306_write_command(0x40);
   121b2:	2040      	movs	r0, #64	; 0x40
   121b4:	4b05      	ldr	r3, [pc, #20]	; (121cc <ssd1306_init+0xa4>)
   121b6:	4798      	blx	r3

	
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
   121b8:	20af      	movs	r0, #175	; 0xaf
   121ba:	4b04      	ldr	r3, [pc, #16]	; (121cc <ssd1306_init+0xa4>)
   121bc:	4798      	blx	r3

}
   121be:	46c0      	nop			; (mov r8, r8)
   121c0:	46bd      	mov	sp, r7
   121c2:	bd80      	pop	{r7, pc}
   121c4:	0001211f 	.word	0x0001211f
   121c8:	00012115 	.word	0x00012115
   121cc:	000121d1 	.word	0x000121d1

000121d0 <ssd1306_write_command>:
 * \param command the command to write
 */


void ssd1306_write_command(uint8_t command)
{
   121d0:	b580      	push	{r7, lr}
   121d2:	b084      	sub	sp, #16
   121d4:	af00      	add	r7, sp, #0
   121d6:	0002      	movs	r2, r0
   121d8:	1dfb      	adds	r3, r7, #7
   121da:	701a      	strb	r2, [r3, #0]
	//Send 0 command byte
	uint8_t data[2];
	data[0] = I2C_COMMAND_SSD1306;
   121dc:	230c      	movs	r3, #12
   121de:	18fb      	adds	r3, r7, r3
   121e0:	2200      	movs	r2, #0
   121e2:	701a      	strb	r2, [r3, #0]
	data[1] = command;
   121e4:	230c      	movs	r3, #12
   121e6:	18fb      	adds	r3, r7, r3
   121e8:	1dfa      	adds	r2, r7, #7
   121ea:	7812      	ldrb	r2, [r2, #0]
   121ec:	705a      	strb	r2, [r3, #1]
	i2cOled.address = SSD1306_I2C_ADDRESS;
   121ee:	4b0c      	ldr	r3, [pc, #48]	; (12220 <ssd1306_write_command+0x50>)
   121f0:	223d      	movs	r2, #61	; 0x3d
   121f2:	701a      	strb	r2, [r3, #0]
	i2cOled.msgOut = (const uint8_t*) &data[0];
   121f4:	4b0a      	ldr	r3, [pc, #40]	; (12220 <ssd1306_write_command+0x50>)
   121f6:	220c      	movs	r2, #12
   121f8:	18ba      	adds	r2, r7, r2
   121fa:	605a      	str	r2, [r3, #4]
	i2cOled.lenOut = sizeof(data);
   121fc:	4b08      	ldr	r3, [pc, #32]	; (12220 <ssd1306_write_command+0x50>)
   121fe:	2202      	movs	r2, #2
   12200:	81da      	strh	r2, [r3, #14]
	i2cOled.msgIn = 0;
   12202:	4b07      	ldr	r3, [pc, #28]	; (12220 <ssd1306_write_command+0x50>)
   12204:	2200      	movs	r2, #0
   12206:	609a      	str	r2, [r3, #8]
	i2cOled.lenIn = 0;
   12208:	4b05      	ldr	r3, [pc, #20]	; (12220 <ssd1306_write_command+0x50>)
   1220a:	2200      	movs	r2, #0
   1220c:	819a      	strh	r2, [r3, #12]
	
	I2cWriteDataWait(&i2cOled, 100);
   1220e:	4b04      	ldr	r3, [pc, #16]	; (12220 <ssd1306_write_command+0x50>)
   12210:	2164      	movs	r1, #100	; 0x64
   12212:	0018      	movs	r0, r3
   12214:	4b03      	ldr	r3, [pc, #12]	; (12224 <ssd1306_write_command+0x54>)
   12216:	4798      	blx	r3
}
   12218:	46c0      	nop			; (mov r8, r8)
   1221a:	46bd      	mov	sp, r7
   1221c:	b004      	add	sp, #16
   1221e:	bd80      	pop	{r7, pc}
   12220:	2000476c 	.word	0x2000476c
   12224:	000152c1 	.word	0x000152c1

00012228 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
   12228:	b580      	push	{r7, lr}
   1222a:	b084      	sub	sp, #16
   1222c:	af00      	add	r7, sp, #0
   1222e:	0002      	movs	r2, r0
   12230:	1dfb      	adds	r3, r7, #7
   12232:	701a      	strb	r2, [r3, #0]
	uint8_t msg[2];
	msg[0] = I2C_DATA_SSD1306;
   12234:	230c      	movs	r3, #12
   12236:	18fb      	adds	r3, r7, r3
   12238:	2240      	movs	r2, #64	; 0x40
   1223a:	701a      	strb	r2, [r3, #0]
	msg[1] = data;
   1223c:	230c      	movs	r3, #12
   1223e:	18fb      	adds	r3, r7, r3
   12240:	1dfa      	adds	r2, r7, #7
   12242:	7812      	ldrb	r2, [r2, #0]
   12244:	705a      	strb	r2, [r3, #1]
	i2cOled.address = SSD1306_I2C_ADDRESS;
   12246:	4b0c      	ldr	r3, [pc, #48]	; (12278 <ssd1306_write_data+0x50>)
   12248:	223d      	movs	r2, #61	; 0x3d
   1224a:	701a      	strb	r2, [r3, #0]
	i2cOled.msgOut = (const uint8_t*) &msg[0];
   1224c:	4b0a      	ldr	r3, [pc, #40]	; (12278 <ssd1306_write_data+0x50>)
   1224e:	220c      	movs	r2, #12
   12250:	18ba      	adds	r2, r7, r2
   12252:	605a      	str	r2, [r3, #4]
	i2cOled.lenOut = sizeof(msg);
   12254:	4b08      	ldr	r3, [pc, #32]	; (12278 <ssd1306_write_data+0x50>)
   12256:	2202      	movs	r2, #2
   12258:	81da      	strh	r2, [r3, #14]
	i2cOled.msgIn = 0;
   1225a:	4b07      	ldr	r3, [pc, #28]	; (12278 <ssd1306_write_data+0x50>)
   1225c:	2200      	movs	r2, #0
   1225e:	609a      	str	r2, [r3, #8]
	i2cOled.lenIn = 0;
   12260:	4b05      	ldr	r3, [pc, #20]	; (12278 <ssd1306_write_data+0x50>)
   12262:	2200      	movs	r2, #0
   12264:	819a      	strh	r2, [r3, #12]
	
	I2cWriteDataWait(&i2cOled, 100);
   12266:	4b04      	ldr	r3, [pc, #16]	; (12278 <ssd1306_write_data+0x50>)
   12268:	2164      	movs	r1, #100	; 0x64
   1226a:	0018      	movs	r0, r3
   1226c:	4b03      	ldr	r3, [pc, #12]	; (1227c <ssd1306_write_data+0x54>)
   1226e:	4798      	blx	r3
}
   12270:	46c0      	nop			; (mov r8, r8)
   12272:	46bd      	mov	sp, r7
   12274:	b004      	add	sp, #16
   12276:	bd80      	pop	{r7, pc}
   12278:	2000476c 	.word	0x2000476c
   1227c:	000152c1 	.word	0x000152c1

00012280 <gfx_mono_set_framebuffer>:
	uint8_t framebuffer[FRAMEBUFFER_SIZE];
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
   12280:	b580      	push	{r7, lr}
   12282:	b082      	sub	sp, #8
   12284:	af00      	add	r7, sp, #0
   12286:	6078      	str	r0, [r7, #4]
	fbpointer = framebuffer;
   12288:	4b03      	ldr	r3, [pc, #12]	; (12298 <gfx_mono_set_framebuffer+0x18>)
   1228a:	687a      	ldr	r2, [r7, #4]
   1228c:	601a      	str	r2, [r3, #0]
}
   1228e:	46c0      	nop			; (mov r8, r8)
   12290:	46bd      	mov	sp, r7
   12292:	b002      	add	sp, #8
   12294:	bd80      	pop	{r7, pc}
   12296:	46c0      	nop			; (mov r8, r8)
   12298:	2000031c 	.word	0x2000031c

0001229c <gfx_mono_framebuffer_put_byte>:
	gfx_mono_framebuffer_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
   1229c:	b590      	push	{r4, r7, lr}
   1229e:	b083      	sub	sp, #12
   122a0:	af00      	add	r7, sp, #0
   122a2:	0004      	movs	r4, r0
   122a4:	0008      	movs	r0, r1
   122a6:	0011      	movs	r1, r2
   122a8:	1dfb      	adds	r3, r7, #7
   122aa:	1c22      	adds	r2, r4, #0
   122ac:	701a      	strb	r2, [r3, #0]
   122ae:	1dbb      	adds	r3, r7, #6
   122b0:	1c02      	adds	r2, r0, #0
   122b2:	701a      	strb	r2, [r3, #0]
   122b4:	1d7b      	adds	r3, r7, #5
   122b6:	1c0a      	adds	r2, r1, #0
   122b8:	701a      	strb	r2, [r3, #0]
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
   122ba:	4b08      	ldr	r3, [pc, #32]	; (122dc <gfx_mono_framebuffer_put_byte+0x40>)
   122bc:	681a      	ldr	r2, [r3, #0]
   122be:	1dfb      	adds	r3, r7, #7
   122c0:	781b      	ldrb	r3, [r3, #0]
   122c2:	019b      	lsls	r3, r3, #6
   122c4:	0019      	movs	r1, r3
   122c6:	1dbb      	adds	r3, r7, #6
   122c8:	781b      	ldrb	r3, [r3, #0]
   122ca:	18cb      	adds	r3, r1, r3
   122cc:	18d3      	adds	r3, r2, r3
   122ce:	1d7a      	adds	r2, r7, #5
   122d0:	7812      	ldrb	r2, [r2, #0]
   122d2:	701a      	strb	r2, [r3, #0]
}
   122d4:	46c0      	nop			; (mov r8, r8)
   122d6:	46bd      	mov	sp, r7
   122d8:	b003      	add	sp, #12
   122da:	bd90      	pop	{r4, r7, pc}
   122dc:	2000031c 	.word	0x2000031c

000122e0 <gfx_mono_framebuffer_get_byte>:
 * \code
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
   122e0:	b580      	push	{r7, lr}
   122e2:	b082      	sub	sp, #8
   122e4:	af00      	add	r7, sp, #0
   122e6:	0002      	movs	r2, r0
   122e8:	1dfb      	adds	r3, r7, #7
   122ea:	701a      	strb	r2, [r3, #0]
   122ec:	1dbb      	adds	r3, r7, #6
   122ee:	1c0a      	adds	r2, r1, #0
   122f0:	701a      	strb	r2, [r3, #0]
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
   122f2:	4b07      	ldr	r3, [pc, #28]	; (12310 <gfx_mono_framebuffer_get_byte+0x30>)
   122f4:	681a      	ldr	r2, [r3, #0]
   122f6:	1dfb      	adds	r3, r7, #7
   122f8:	781b      	ldrb	r3, [r3, #0]
   122fa:	019b      	lsls	r3, r3, #6
   122fc:	0019      	movs	r1, r3
   122fe:	1dbb      	adds	r3, r7, #6
   12300:	781b      	ldrb	r3, [r3, #0]
   12302:	18cb      	adds	r3, r1, r3
   12304:	18d3      	adds	r3, r2, r3
   12306:	781b      	ldrb	r3, [r3, #0]
}
   12308:	0018      	movs	r0, r3
   1230a:	46bd      	mov	sp, r7
   1230c:	b002      	add	sp, #8
   1230e:	bd80      	pop	{r7, pc}
   12310:	2000031c 	.word	0x2000031c

00012314 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
   12314:	b5b0      	push	{r4, r5, r7, lr}
   12316:	b084      	sub	sp, #16
   12318:	af00      	add	r7, sp, #0
   1231a:	0005      	movs	r5, r0
   1231c:	000c      	movs	r4, r1
   1231e:	0010      	movs	r0, r2
   12320:	0019      	movs	r1, r3
   12322:	1dfb      	adds	r3, r7, #7
   12324:	1c2a      	adds	r2, r5, #0
   12326:	701a      	strb	r2, [r3, #0]
   12328:	1dbb      	adds	r3, r7, #6
   1232a:	1c22      	adds	r2, r4, #0
   1232c:	701a      	strb	r2, [r3, #0]
   1232e:	1d7b      	adds	r3, r7, #5
   12330:	1c02      	adds	r2, r0, #0
   12332:	701a      	strb	r2, [r3, #0]
   12334:	1d3b      	adds	r3, r7, #4
   12336:	1c0a      	adds	r2, r1, #0
   12338:	701a      	strb	r2, [r3, #0]
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
   1233a:	1dfb      	adds	r3, r7, #7
   1233c:	781a      	ldrb	r2, [r3, #0]
   1233e:	1d7b      	adds	r3, r7, #5
   12340:	781b      	ldrb	r3, [r3, #0]
   12342:	18d3      	adds	r3, r2, r3
   12344:	2b40      	cmp	r3, #64	; 0x40
   12346:	dd05      	ble.n	12354 <gfx_mono_generic_draw_horizontal_line+0x40>
		length = GFX_MONO_LCD_WIDTH - x;
   12348:	1d7b      	adds	r3, r7, #5
   1234a:	1dfa      	adds	r2, r7, #7
   1234c:	7812      	ldrb	r2, [r2, #0]
   1234e:	2140      	movs	r1, #64	; 0x40
   12350:	1a8a      	subs	r2, r1, r2
   12352:	701a      	strb	r2, [r3, #0]
	}

	page = y / 8;
   12354:	230f      	movs	r3, #15
   12356:	18fb      	adds	r3, r7, r3
   12358:	1dba      	adds	r2, r7, #6
   1235a:	7812      	ldrb	r2, [r2, #0]
   1235c:	08d2      	lsrs	r2, r2, #3
   1235e:	701a      	strb	r2, [r3, #0]
	pixelmask = (1 << (y - (page * 8)));
   12360:	1dbb      	adds	r3, r7, #6
   12362:	781a      	ldrb	r2, [r3, #0]
   12364:	230f      	movs	r3, #15
   12366:	18fb      	adds	r3, r7, r3
   12368:	781b      	ldrb	r3, [r3, #0]
   1236a:	00db      	lsls	r3, r3, #3
   1236c:	1ad3      	subs	r3, r2, r3
   1236e:	2201      	movs	r2, #1
   12370:	409a      	lsls	r2, r3
   12372:	230e      	movs	r3, #14
   12374:	18fb      	adds	r3, r7, r3
   12376:	701a      	strb	r2, [r3, #0]

	if (length == 0) {
   12378:	1d7b      	adds	r3, r7, #5
   1237a:	781b      	ldrb	r3, [r3, #0]
   1237c:	2b00      	cmp	r3, #0
   1237e:	d100      	bne.n	12382 <gfx_mono_generic_draw_horizontal_line+0x6e>
   12380:	e0a4      	b.n	124cc <gfx_mono_generic_draw_horizontal_line+0x1b8>
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
   12382:	1d3b      	adds	r3, r7, #4
   12384:	781b      	ldrb	r3, [r3, #0]
   12386:	2b01      	cmp	r3, #1
   12388:	d02f      	beq.n	123ea <gfx_mono_generic_draw_horizontal_line+0xd6>
   1238a:	2b02      	cmp	r3, #2
   1238c:	d100      	bne.n	12390 <gfx_mono_generic_draw_horizontal_line+0x7c>
   1238e:	e095      	b.n	124bc <gfx_mono_generic_draw_horizontal_line+0x1a8>
   12390:	2b00      	cmp	r3, #0
   12392:	d061      	beq.n	12458 <gfx_mono_generic_draw_horizontal_line+0x144>
			gfx_mono_put_byte(page, x + length, temp);
		}
		break;

	default:
		break;
   12394:	e09b      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
			temp = gfx_mono_get_byte(page, x + length);
   12396:	1dfa      	adds	r2, r7, #7
   12398:	1d7b      	adds	r3, r7, #5
   1239a:	7812      	ldrb	r2, [r2, #0]
   1239c:	781b      	ldrb	r3, [r3, #0]
   1239e:	18d3      	adds	r3, r2, r3
   123a0:	b2da      	uxtb	r2, r3
   123a2:	230d      	movs	r3, #13
   123a4:	18fc      	adds	r4, r7, r3
   123a6:	230f      	movs	r3, #15
   123a8:	18fb      	adds	r3, r7, r3
   123aa:	781b      	ldrb	r3, [r3, #0]
   123ac:	0011      	movs	r1, r2
   123ae:	0018      	movs	r0, r3
   123b0:	4b48      	ldr	r3, [pc, #288]	; (124d4 <gfx_mono_generic_draw_horizontal_line+0x1c0>)
   123b2:	4798      	blx	r3
   123b4:	0003      	movs	r3, r0
   123b6:	7023      	strb	r3, [r4, #0]
			temp |= pixelmask;
   123b8:	230d      	movs	r3, #13
   123ba:	18fb      	adds	r3, r7, r3
   123bc:	220d      	movs	r2, #13
   123be:	18b9      	adds	r1, r7, r2
   123c0:	220e      	movs	r2, #14
   123c2:	18ba      	adds	r2, r7, r2
   123c4:	7809      	ldrb	r1, [r1, #0]
   123c6:	7812      	ldrb	r2, [r2, #0]
   123c8:	430a      	orrs	r2, r1
   123ca:	701a      	strb	r2, [r3, #0]
			gfx_mono_put_byte(page, x + length, temp);
   123cc:	1dfa      	adds	r2, r7, #7
   123ce:	1d7b      	adds	r3, r7, #5
   123d0:	7812      	ldrb	r2, [r2, #0]
   123d2:	781b      	ldrb	r3, [r3, #0]
   123d4:	18d3      	adds	r3, r2, r3
   123d6:	b2d9      	uxtb	r1, r3
   123d8:	230d      	movs	r3, #13
   123da:	18fb      	adds	r3, r7, r3
   123dc:	781a      	ldrb	r2, [r3, #0]
   123de:	230f      	movs	r3, #15
   123e0:	18fb      	adds	r3, r7, r3
   123e2:	7818      	ldrb	r0, [r3, #0]
   123e4:	2300      	movs	r3, #0
   123e6:	4c3c      	ldr	r4, [pc, #240]	; (124d8 <gfx_mono_generic_draw_horizontal_line+0x1c4>)
   123e8:	47a0      	blx	r4
		while (length-- > 0) {
   123ea:	1d7b      	adds	r3, r7, #5
   123ec:	781b      	ldrb	r3, [r3, #0]
   123ee:	1d7a      	adds	r2, r7, #5
   123f0:	1e59      	subs	r1, r3, #1
   123f2:	7011      	strb	r1, [r2, #0]
   123f4:	2b00      	cmp	r3, #0
   123f6:	d1ce      	bne.n	12396 <gfx_mono_generic_draw_horizontal_line+0x82>
		break;
   123f8:	e069      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
			temp = gfx_mono_get_byte(page, x + length);
   123fa:	1dfa      	adds	r2, r7, #7
   123fc:	1d7b      	adds	r3, r7, #5
   123fe:	7812      	ldrb	r2, [r2, #0]
   12400:	781b      	ldrb	r3, [r3, #0]
   12402:	18d3      	adds	r3, r2, r3
   12404:	b2da      	uxtb	r2, r3
   12406:	230d      	movs	r3, #13
   12408:	18fc      	adds	r4, r7, r3
   1240a:	230f      	movs	r3, #15
   1240c:	18fb      	adds	r3, r7, r3
   1240e:	781b      	ldrb	r3, [r3, #0]
   12410:	0011      	movs	r1, r2
   12412:	0018      	movs	r0, r3
   12414:	4b2f      	ldr	r3, [pc, #188]	; (124d4 <gfx_mono_generic_draw_horizontal_line+0x1c0>)
   12416:	4798      	blx	r3
   12418:	0003      	movs	r3, r0
   1241a:	7023      	strb	r3, [r4, #0]
			temp &= ~pixelmask;
   1241c:	230e      	movs	r3, #14
   1241e:	18fb      	adds	r3, r7, r3
   12420:	781b      	ldrb	r3, [r3, #0]
   12422:	b25b      	sxtb	r3, r3
   12424:	43db      	mvns	r3, r3
   12426:	b25b      	sxtb	r3, r3
   12428:	220d      	movs	r2, #13
   1242a:	18ba      	adds	r2, r7, r2
   1242c:	7812      	ldrb	r2, [r2, #0]
   1242e:	b252      	sxtb	r2, r2
   12430:	4013      	ands	r3, r2
   12432:	b25a      	sxtb	r2, r3
   12434:	230d      	movs	r3, #13
   12436:	18fb      	adds	r3, r7, r3
   12438:	701a      	strb	r2, [r3, #0]
			gfx_mono_put_byte(page, x + length, temp);
   1243a:	1dfa      	adds	r2, r7, #7
   1243c:	1d7b      	adds	r3, r7, #5
   1243e:	7812      	ldrb	r2, [r2, #0]
   12440:	781b      	ldrb	r3, [r3, #0]
   12442:	18d3      	adds	r3, r2, r3
   12444:	b2d9      	uxtb	r1, r3
   12446:	230d      	movs	r3, #13
   12448:	18fb      	adds	r3, r7, r3
   1244a:	781a      	ldrb	r2, [r3, #0]
   1244c:	230f      	movs	r3, #15
   1244e:	18fb      	adds	r3, r7, r3
   12450:	7818      	ldrb	r0, [r3, #0]
   12452:	2300      	movs	r3, #0
   12454:	4c20      	ldr	r4, [pc, #128]	; (124d8 <gfx_mono_generic_draw_horizontal_line+0x1c4>)
   12456:	47a0      	blx	r4
		while (length-- > 0) {
   12458:	1d7b      	adds	r3, r7, #5
   1245a:	781b      	ldrb	r3, [r3, #0]
   1245c:	1d7a      	adds	r2, r7, #5
   1245e:	1e59      	subs	r1, r3, #1
   12460:	7011      	strb	r1, [r2, #0]
   12462:	2b00      	cmp	r3, #0
   12464:	d1c9      	bne.n	123fa <gfx_mono_generic_draw_horizontal_line+0xe6>
		break;
   12466:	e032      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
			temp = gfx_mono_get_byte(page, x + length);
   12468:	1dfa      	adds	r2, r7, #7
   1246a:	1d7b      	adds	r3, r7, #5
   1246c:	7812      	ldrb	r2, [r2, #0]
   1246e:	781b      	ldrb	r3, [r3, #0]
   12470:	18d3      	adds	r3, r2, r3
   12472:	b2da      	uxtb	r2, r3
   12474:	230d      	movs	r3, #13
   12476:	18fc      	adds	r4, r7, r3
   12478:	230f      	movs	r3, #15
   1247a:	18fb      	adds	r3, r7, r3
   1247c:	781b      	ldrb	r3, [r3, #0]
   1247e:	0011      	movs	r1, r2
   12480:	0018      	movs	r0, r3
   12482:	4b14      	ldr	r3, [pc, #80]	; (124d4 <gfx_mono_generic_draw_horizontal_line+0x1c0>)
   12484:	4798      	blx	r3
   12486:	0003      	movs	r3, r0
   12488:	7023      	strb	r3, [r4, #0]
			temp ^= pixelmask;
   1248a:	230d      	movs	r3, #13
   1248c:	18fb      	adds	r3, r7, r3
   1248e:	220d      	movs	r2, #13
   12490:	18b9      	adds	r1, r7, r2
   12492:	220e      	movs	r2, #14
   12494:	18ba      	adds	r2, r7, r2
   12496:	7809      	ldrb	r1, [r1, #0]
   12498:	7812      	ldrb	r2, [r2, #0]
   1249a:	404a      	eors	r2, r1
   1249c:	701a      	strb	r2, [r3, #0]
			gfx_mono_put_byte(page, x + length, temp);
   1249e:	1dfa      	adds	r2, r7, #7
   124a0:	1d7b      	adds	r3, r7, #5
   124a2:	7812      	ldrb	r2, [r2, #0]
   124a4:	781b      	ldrb	r3, [r3, #0]
   124a6:	18d3      	adds	r3, r2, r3
   124a8:	b2d9      	uxtb	r1, r3
   124aa:	230d      	movs	r3, #13
   124ac:	18fb      	adds	r3, r7, r3
   124ae:	781a      	ldrb	r2, [r3, #0]
   124b0:	230f      	movs	r3, #15
   124b2:	18fb      	adds	r3, r7, r3
   124b4:	7818      	ldrb	r0, [r3, #0]
   124b6:	2300      	movs	r3, #0
   124b8:	4c07      	ldr	r4, [pc, #28]	; (124d8 <gfx_mono_generic_draw_horizontal_line+0x1c4>)
   124ba:	47a0      	blx	r4
		while (length-- > 0) {
   124bc:	1d7b      	adds	r3, r7, #5
   124be:	781b      	ldrb	r3, [r3, #0]
   124c0:	1d7a      	adds	r2, r7, #5
   124c2:	1e59      	subs	r1, r3, #1
   124c4:	7011      	strb	r1, [r2, #0]
   124c6:	2b00      	cmp	r3, #0
   124c8:	d1ce      	bne.n	12468 <gfx_mono_generic_draw_horizontal_line+0x154>
		break;
   124ca:	e000      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
		return;
   124cc:	46c0      	nop			; (mov r8, r8)
	}
}
   124ce:	46bd      	mov	sp, r7
   124d0:	b004      	add	sp, #16
   124d2:	bdb0      	pop	{r4, r5, r7, pc}
   124d4:	00013129 	.word	0x00013129
   124d8:	00013089 	.word	0x00013089

000124dc <gfx_mono_generic_draw_vertical_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_vertical_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
   124dc:	b5b0      	push	{r4, r5, r7, lr}
   124de:	b084      	sub	sp, #16
   124e0:	af00      	add	r7, sp, #0
   124e2:	0005      	movs	r5, r0
   124e4:	000c      	movs	r4, r1
   124e6:	0010      	movs	r0, r2
   124e8:	0019      	movs	r1, r3
   124ea:	1dfb      	adds	r3, r7, #7
   124ec:	1c2a      	adds	r2, r5, #0
   124ee:	701a      	strb	r2, [r3, #0]
   124f0:	1dbb      	adds	r3, r7, #6
   124f2:	1c22      	adds	r2, r4, #0
   124f4:	701a      	strb	r2, [r3, #0]
   124f6:	1d7b      	adds	r3, r7, #5
   124f8:	1c02      	adds	r2, r0, #0
   124fa:	701a      	strb	r2, [r3, #0]
   124fc:	1d3b      	adds	r3, r7, #4
   124fe:	1c0a      	adds	r2, r1, #0
   12500:	701a      	strb	r2, [r3, #0]
	if (length == 0) {
   12502:	1d7b      	adds	r3, r7, #5
   12504:	781b      	ldrb	r3, [r3, #0]
   12506:	2b00      	cmp	r3, #0
   12508:	d100      	bne.n	1250c <gfx_mono_generic_draw_vertical_line+0x30>
   1250a:	e0a7      	b.n	1265c <gfx_mono_generic_draw_vertical_line+0x180>
		return;
	}

	gfx_coord_t y2 = y + length - 1;
   1250c:	1dba      	adds	r2, r7, #6
   1250e:	1d7b      	adds	r3, r7, #5
   12510:	7812      	ldrb	r2, [r2, #0]
   12512:	781b      	ldrb	r3, [r3, #0]
   12514:	18d3      	adds	r3, r2, r3
   12516:	b2da      	uxtb	r2, r3
   12518:	230f      	movs	r3, #15
   1251a:	18fb      	adds	r3, r7, r3
   1251c:	3a01      	subs	r2, #1
   1251e:	701a      	strb	r2, [r3, #0]

	if (y == y2) {
   12520:	1dba      	adds	r2, r7, #6
   12522:	230f      	movs	r3, #15
   12524:	18fb      	adds	r3, r7, r3
   12526:	7812      	ldrb	r2, [r2, #0]
   12528:	781b      	ldrb	r3, [r3, #0]
   1252a:	429a      	cmp	r2, r3
   1252c:	d109      	bne.n	12542 <gfx_mono_generic_draw_vertical_line+0x66>
		gfx_mono_draw_pixel(x, y, color);
   1252e:	1d3b      	adds	r3, r7, #4
   12530:	781a      	ldrb	r2, [r3, #0]
   12532:	1dbb      	adds	r3, r7, #6
   12534:	7819      	ldrb	r1, [r3, #0]
   12536:	1dfb      	adds	r3, r7, #7
   12538:	781b      	ldrb	r3, [r3, #0]
   1253a:	0018      	movs	r0, r3
   1253c:	4b49      	ldr	r3, [pc, #292]	; (12664 <gfx_mono_generic_draw_vertical_line+0x188>)
   1253e:	4798      	blx	r3
		return;
   12540:	e08d      	b.n	1265e <gfx_mono_generic_draw_vertical_line+0x182>
	}

	if (y2 >= GFX_MONO_LCD_HEIGHT - 1) {
   12542:	230f      	movs	r3, #15
   12544:	18fb      	adds	r3, r7, r3
   12546:	781b      	ldrb	r3, [r3, #0]
   12548:	2b2e      	cmp	r3, #46	; 0x2e
   1254a:	d903      	bls.n	12554 <gfx_mono_generic_draw_vertical_line+0x78>
		y2 = GFX_MONO_LCD_HEIGHT - 1;
   1254c:	230f      	movs	r3, #15
   1254e:	18fb      	adds	r3, r7, r3
   12550:	222f      	movs	r2, #47	; 0x2f
   12552:	701a      	strb	r2, [r3, #0]
	}

	gfx_coord_t y1page = y / 8;
   12554:	230e      	movs	r3, #14
   12556:	18fb      	adds	r3, r7, r3
   12558:	1dba      	adds	r2, r7, #6
   1255a:	7812      	ldrb	r2, [r2, #0]
   1255c:	08d2      	lsrs	r2, r2, #3
   1255e:	701a      	strb	r2, [r3, #0]
	gfx_coord_t y2page = y2 / 8;
   12560:	230d      	movs	r3, #13
   12562:	18fb      	adds	r3, r7, r3
   12564:	220f      	movs	r2, #15
   12566:	18ba      	adds	r2, r7, r2
   12568:	7812      	ldrb	r2, [r2, #0]
   1256a:	08d2      	lsrs	r2, r2, #3
   1256c:	701a      	strb	r2, [r3, #0]

	uint8_t y1bitpos = y & 0x07;
   1256e:	230c      	movs	r3, #12
   12570:	18fb      	adds	r3, r7, r3
   12572:	1dba      	adds	r2, r7, #6
   12574:	7812      	ldrb	r2, [r2, #0]
   12576:	2107      	movs	r1, #7
   12578:	400a      	ands	r2, r1
   1257a:	701a      	strb	r2, [r3, #0]
	uint8_t y2bitpos = y2 & 0x07;
   1257c:	230b      	movs	r3, #11
   1257e:	18fb      	adds	r3, r7, r3
   12580:	220f      	movs	r2, #15
   12582:	18ba      	adds	r2, r7, r2
   12584:	7812      	ldrb	r2, [r2, #0]
   12586:	2107      	movs	r1, #7
   12588:	400a      	ands	r2, r1
   1258a:	701a      	strb	r2, [r3, #0]

	uint8_t y1pixelmask = 0xFF << y1bitpos;
   1258c:	230c      	movs	r3, #12
   1258e:	18fb      	adds	r3, r7, r3
   12590:	781b      	ldrb	r3, [r3, #0]
   12592:	22ff      	movs	r2, #255	; 0xff
   12594:	409a      	lsls	r2, r3
   12596:	230a      	movs	r3, #10
   12598:	18fb      	adds	r3, r7, r3
   1259a:	701a      	strb	r2, [r3, #0]
	uint8_t y2pixelmask = 0xFF >> (7 - y2bitpos);
   1259c:	230b      	movs	r3, #11
   1259e:	18fb      	adds	r3, r7, r3
   125a0:	781b      	ldrb	r3, [r3, #0]
   125a2:	2207      	movs	r2, #7
   125a4:	1ad3      	subs	r3, r2, r3
   125a6:	22ff      	movs	r2, #255	; 0xff
   125a8:	411a      	asrs	r2, r3
   125aa:	2309      	movs	r3, #9
   125ac:	18fb      	adds	r3, r7, r3
   125ae:	701a      	strb	r2, [r3, #0]

	/* The pixels are on the same page; combine masks */
	if (y1page == y2page) {
   125b0:	230e      	movs	r3, #14
   125b2:	18fa      	adds	r2, r7, r3
   125b4:	230d      	movs	r3, #13
   125b6:	18fb      	adds	r3, r7, r3
   125b8:	7812      	ldrb	r2, [r2, #0]
   125ba:	781b      	ldrb	r3, [r3, #0]
   125bc:	429a      	cmp	r2, r3
   125be:	d117      	bne.n	125f0 <gfx_mono_generic_draw_vertical_line+0x114>
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
   125c0:	2308      	movs	r3, #8
   125c2:	18fb      	adds	r3, r7, r3
   125c4:	220a      	movs	r2, #10
   125c6:	18ba      	adds	r2, r7, r2
   125c8:	2109      	movs	r1, #9
   125ca:	1879      	adds	r1, r7, r1
   125cc:	7812      	ldrb	r2, [r2, #0]
   125ce:	7809      	ldrb	r1, [r1, #0]
   125d0:	400a      	ands	r2, r1
   125d2:	701a      	strb	r2, [r3, #0]
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
   125d4:	1d3b      	adds	r3, r7, #4
   125d6:	781c      	ldrb	r4, [r3, #0]
   125d8:	2308      	movs	r3, #8
   125da:	18fb      	adds	r3, r7, r3
   125dc:	781a      	ldrb	r2, [r3, #0]
   125de:	1dfb      	adds	r3, r7, #7
   125e0:	7819      	ldrb	r1, [r3, #0]
   125e2:	230e      	movs	r3, #14
   125e4:	18fb      	adds	r3, r7, r3
   125e6:	7818      	ldrb	r0, [r3, #0]
   125e8:	0023      	movs	r3, r4
   125ea:	4c1f      	ldr	r4, [pc, #124]	; (12668 <gfx_mono_generic_draw_vertical_line+0x18c>)
   125ec:	47a0      	blx	r4
   125ee:	e036      	b.n	1265e <gfx_mono_generic_draw_vertical_line+0x182>
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);
   125f0:	1d3b      	adds	r3, r7, #4
   125f2:	781c      	ldrb	r4, [r3, #0]
   125f4:	230a      	movs	r3, #10
   125f6:	18fb      	adds	r3, r7, r3
   125f8:	781a      	ldrb	r2, [r3, #0]
   125fa:	1dfb      	adds	r3, r7, #7
   125fc:	7819      	ldrb	r1, [r3, #0]
   125fe:	230e      	movs	r3, #14
   12600:	18fb      	adds	r3, r7, r3
   12602:	7818      	ldrb	r0, [r3, #0]
   12604:	0023      	movs	r3, r4
   12606:	4c18      	ldr	r4, [pc, #96]	; (12668 <gfx_mono_generic_draw_vertical_line+0x18c>)
   12608:	47a0      	blx	r4

		while (++y1page < y2page) {
   1260a:	e00a      	b.n	12622 <gfx_mono_generic_draw_vertical_line+0x146>
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
   1260c:	1d3b      	adds	r3, r7, #4
   1260e:	781a      	ldrb	r2, [r3, #0]
   12610:	1dfb      	adds	r3, r7, #7
   12612:	7819      	ldrb	r1, [r3, #0]
   12614:	230e      	movs	r3, #14
   12616:	18fb      	adds	r3, r7, r3
   12618:	7818      	ldrb	r0, [r3, #0]
   1261a:	0013      	movs	r3, r2
   1261c:	22ff      	movs	r2, #255	; 0xff
   1261e:	4c12      	ldr	r4, [pc, #72]	; (12668 <gfx_mono_generic_draw_vertical_line+0x18c>)
   12620:	47a0      	blx	r4
		while (++y1page < y2page) {
   12622:	230e      	movs	r3, #14
   12624:	18fb      	adds	r3, r7, r3
   12626:	220e      	movs	r2, #14
   12628:	18ba      	adds	r2, r7, r2
   1262a:	7812      	ldrb	r2, [r2, #0]
   1262c:	3201      	adds	r2, #1
   1262e:	701a      	strb	r2, [r3, #0]
   12630:	230e      	movs	r3, #14
   12632:	18fa      	adds	r2, r7, r3
   12634:	230d      	movs	r3, #13
   12636:	18fb      	adds	r3, r7, r3
   12638:	7812      	ldrb	r2, [r2, #0]
   1263a:	781b      	ldrb	r3, [r3, #0]
   1263c:	429a      	cmp	r2, r3
   1263e:	d3e5      	bcc.n	1260c <gfx_mono_generic_draw_vertical_line+0x130>
		}

		gfx_mono_mask_byte(y2page, x, y2pixelmask, color);
   12640:	1d3b      	adds	r3, r7, #4
   12642:	781c      	ldrb	r4, [r3, #0]
   12644:	2309      	movs	r3, #9
   12646:	18fb      	adds	r3, r7, r3
   12648:	781a      	ldrb	r2, [r3, #0]
   1264a:	1dfb      	adds	r3, r7, #7
   1264c:	7819      	ldrb	r1, [r3, #0]
   1264e:	230d      	movs	r3, #13
   12650:	18fb      	adds	r3, r7, r3
   12652:	7818      	ldrb	r0, [r3, #0]
   12654:	0023      	movs	r3, r4
   12656:	4c04      	ldr	r4, [pc, #16]	; (12668 <gfx_mono_generic_draw_vertical_line+0x18c>)
   12658:	47a0      	blx	r4
   1265a:	e000      	b.n	1265e <gfx_mono_generic_draw_vertical_line+0x182>
		return;
   1265c:	46c0      	nop			; (mov r8, r8)
	}
}
   1265e:	46bd      	mov	sp, r7
   12660:	b004      	add	sp, #16
   12662:	bdb0      	pop	{r4, r5, r7, pc}
   12664:	00012f95 	.word	0x00012f95
   12668:	00013159 	.word	0x00013159

0001266c <gfx_mono_generic_draw_line>:
 * \param[in]  color       Pixel operation of the line.
 */
void gfx_mono_generic_draw_line(gfx_coord_t x1, gfx_coord_t y1,
		gfx_coord_t x2, gfx_coord_t y2,
		enum gfx_mono_color color)
{
   1266c:	b5b0      	push	{r4, r5, r7, lr}
   1266e:	b084      	sub	sp, #16
   12670:	af00      	add	r7, sp, #0
   12672:	0005      	movs	r5, r0
   12674:	000c      	movs	r4, r1
   12676:	0010      	movs	r0, r2
   12678:	0019      	movs	r1, r3
   1267a:	1dfb      	adds	r3, r7, #7
   1267c:	1c2a      	adds	r2, r5, #0
   1267e:	701a      	strb	r2, [r3, #0]
   12680:	1dbb      	adds	r3, r7, #6
   12682:	1c22      	adds	r2, r4, #0
   12684:	701a      	strb	r2, [r3, #0]
   12686:	1d7b      	adds	r3, r7, #5
   12688:	1c02      	adds	r2, r0, #0
   1268a:	701a      	strb	r2, [r3, #0]
   1268c:	1d3b      	adds	r3, r7, #4
   1268e:	1c0a      	adds	r2, r1, #0
   12690:	701a      	strb	r2, [r3, #0]
	int8_t dx;
	int8_t dy;
	int8_t e;

	/* swap x1,y1  with x2,y2 */
	if (x1 > x2) {
   12692:	1dfa      	adds	r2, r7, #7
   12694:	1d7b      	adds	r3, r7, #5
   12696:	7812      	ldrb	r2, [r2, #0]
   12698:	781b      	ldrb	r3, [r3, #0]
   1269a:	429a      	cmp	r2, r3
   1269c:	d91b      	bls.n	126d6 <gfx_mono_generic_draw_line+0x6a>
		dx = x1;
   1269e:	230a      	movs	r3, #10
   126a0:	18fb      	adds	r3, r7, r3
   126a2:	1dfa      	adds	r2, r7, #7
   126a4:	7812      	ldrb	r2, [r2, #0]
   126a6:	701a      	strb	r2, [r3, #0]
		x1 = x2;
   126a8:	1dfb      	adds	r3, r7, #7
   126aa:	1d7a      	adds	r2, r7, #5
   126ac:	7812      	ldrb	r2, [r2, #0]
   126ae:	701a      	strb	r2, [r3, #0]
		x2 = dx;
   126b0:	1d7b      	adds	r3, r7, #5
   126b2:	220a      	movs	r2, #10
   126b4:	18ba      	adds	r2, r7, r2
   126b6:	7812      	ldrb	r2, [r2, #0]
   126b8:	701a      	strb	r2, [r3, #0]
		dy = y1;
   126ba:	2309      	movs	r3, #9
   126bc:	18fb      	adds	r3, r7, r3
   126be:	1dba      	adds	r2, r7, #6
   126c0:	7812      	ldrb	r2, [r2, #0]
   126c2:	701a      	strb	r2, [r3, #0]
		y1 = y2;
   126c4:	1dbb      	adds	r3, r7, #6
   126c6:	1d3a      	adds	r2, r7, #4
   126c8:	7812      	ldrb	r2, [r2, #0]
   126ca:	701a      	strb	r2, [r3, #0]
		y2 = dy;
   126cc:	1d3b      	adds	r3, r7, #4
   126ce:	2209      	movs	r2, #9
   126d0:	18ba      	adds	r2, r7, r2
   126d2:	7812      	ldrb	r2, [r2, #0]
   126d4:	701a      	strb	r2, [r3, #0]
	}

	dx = x2 - x1;
   126d6:	1d7a      	adds	r2, r7, #5
   126d8:	1dfb      	adds	r3, r7, #7
   126da:	7812      	ldrb	r2, [r2, #0]
   126dc:	781b      	ldrb	r3, [r3, #0]
   126de:	1ad3      	subs	r3, r2, r3
   126e0:	b2da      	uxtb	r2, r3
   126e2:	230a      	movs	r3, #10
   126e4:	18fb      	adds	r3, r7, r3
   126e6:	701a      	strb	r2, [r3, #0]
	dy = y2 - y1;
   126e8:	1d3a      	adds	r2, r7, #4
   126ea:	1dbb      	adds	r3, r7, #6
   126ec:	7812      	ldrb	r2, [r2, #0]
   126ee:	781b      	ldrb	r3, [r3, #0]
   126f0:	1ad3      	subs	r3, r2, r3
   126f2:	b2da      	uxtb	r2, r3
   126f4:	2309      	movs	r3, #9
   126f6:	18fb      	adds	r3, r7, r3
   126f8:	701a      	strb	r2, [r3, #0]

	x = x1;
   126fa:	230e      	movs	r3, #14
   126fc:	18fb      	adds	r3, r7, r3
   126fe:	1dfa      	adds	r2, r7, #7
   12700:	7812      	ldrb	r2, [r2, #0]
   12702:	701a      	strb	r2, [r3, #0]
	y = y1;
   12704:	230d      	movs	r3, #13
   12706:	18fb      	adds	r3, r7, r3
   12708:	1dba      	adds	r2, r7, #6
   1270a:	7812      	ldrb	r2, [r2, #0]
   1270c:	701a      	strb	r2, [r3, #0]

	if (dx < 0) {
   1270e:	230a      	movs	r3, #10
   12710:	18fb      	adds	r3, r7, r3
   12712:	781b      	ldrb	r3, [r3, #0]
   12714:	2b7f      	cmp	r3, #127	; 0x7f
   12716:	d90c      	bls.n	12732 <gfx_mono_generic_draw_line+0xc6>
		xinc = -1;
   12718:	230c      	movs	r3, #12
   1271a:	18fb      	adds	r3, r7, r3
   1271c:	22ff      	movs	r2, #255	; 0xff
   1271e:	701a      	strb	r2, [r3, #0]
		dx = -dx;
   12720:	230a      	movs	r3, #10
   12722:	18fb      	adds	r3, r7, r3
   12724:	781b      	ldrb	r3, [r3, #0]
   12726:	425b      	negs	r3, r3
   12728:	b2da      	uxtb	r2, r3
   1272a:	230a      	movs	r3, #10
   1272c:	18fb      	adds	r3, r7, r3
   1272e:	701a      	strb	r2, [r3, #0]
   12730:	e003      	b.n	1273a <gfx_mono_generic_draw_line+0xce>
	} else {
		xinc = 1;
   12732:	230c      	movs	r3, #12
   12734:	18fb      	adds	r3, r7, r3
   12736:	2201      	movs	r2, #1
   12738:	701a      	strb	r2, [r3, #0]
	}

	if (dy < 0) {
   1273a:	2309      	movs	r3, #9
   1273c:	18fb      	adds	r3, r7, r3
   1273e:	781b      	ldrb	r3, [r3, #0]
   12740:	2b7f      	cmp	r3, #127	; 0x7f
   12742:	d90c      	bls.n	1275e <gfx_mono_generic_draw_line+0xf2>
		yinc = -1;
   12744:	230b      	movs	r3, #11
   12746:	18fb      	adds	r3, r7, r3
   12748:	22ff      	movs	r2, #255	; 0xff
   1274a:	701a      	strb	r2, [r3, #0]
		dy = -dy;
   1274c:	2309      	movs	r3, #9
   1274e:	18fb      	adds	r3, r7, r3
   12750:	781b      	ldrb	r3, [r3, #0]
   12752:	425b      	negs	r3, r3
   12754:	b2da      	uxtb	r2, r3
   12756:	2309      	movs	r3, #9
   12758:	18fb      	adds	r3, r7, r3
   1275a:	701a      	strb	r2, [r3, #0]
   1275c:	e003      	b.n	12766 <gfx_mono_generic_draw_line+0xfa>
	} else {
		yinc = 1;
   1275e:	230b      	movs	r3, #11
   12760:	18fb      	adds	r3, r7, r3
   12762:	2201      	movs	r2, #1
   12764:	701a      	strb	r2, [r3, #0]
	}

	if (dx > dy) {
   12766:	230a      	movs	r3, #10
   12768:	18fa      	adds	r2, r7, r3
   1276a:	2309      	movs	r3, #9
   1276c:	18fb      	adds	r3, r7, r3
   1276e:	7812      	ldrb	r2, [r2, #0]
   12770:	b252      	sxtb	r2, r2
   12772:	781b      	ldrb	r3, [r3, #0]
   12774:	b25b      	sxtb	r3, r3
   12776:	429a      	cmp	r2, r3
   12778:	dd5b      	ble.n	12832 <gfx_mono_generic_draw_line+0x1c6>
		e = dy - dx;
   1277a:	2309      	movs	r3, #9
   1277c:	18fb      	adds	r3, r7, r3
   1277e:	781a      	ldrb	r2, [r3, #0]
   12780:	230a      	movs	r3, #10
   12782:	18fb      	adds	r3, r7, r3
   12784:	781b      	ldrb	r3, [r3, #0]
   12786:	1ad3      	subs	r3, r2, r3
   12788:	b2da      	uxtb	r2, r3
   1278a:	2308      	movs	r3, #8
   1278c:	18fb      	adds	r3, r7, r3
   1278e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i <= dx; i++) {
   12790:	230f      	movs	r3, #15
   12792:	18fb      	adds	r3, r7, r3
   12794:	2200      	movs	r2, #0
   12796:	701a      	strb	r2, [r3, #0]
   12798:	e041      	b.n	1281e <gfx_mono_generic_draw_line+0x1b2>
			gfx_mono_draw_pixel(x, y, color);
   1279a:	2320      	movs	r3, #32
   1279c:	18fb      	adds	r3, r7, r3
   1279e:	781a      	ldrb	r2, [r3, #0]
   127a0:	230d      	movs	r3, #13
   127a2:	18fb      	adds	r3, r7, r3
   127a4:	7819      	ldrb	r1, [r3, #0]
   127a6:	230e      	movs	r3, #14
   127a8:	18fb      	adds	r3, r7, r3
   127aa:	781b      	ldrb	r3, [r3, #0]
   127ac:	0018      	movs	r0, r3
   127ae:	4b50      	ldr	r3, [pc, #320]	; (128f0 <gfx_mono_generic_draw_line+0x284>)
   127b0:	4798      	blx	r3
			if (e >= 0) {
   127b2:	2308      	movs	r3, #8
   127b4:	18fb      	adds	r3, r7, r3
   127b6:	781b      	ldrb	r3, [r3, #0]
   127b8:	2b7f      	cmp	r3, #127	; 0x7f
   127ba:	d814      	bhi.n	127e6 <gfx_mono_generic_draw_line+0x17a>
				e -= dx;
   127bc:	2308      	movs	r3, #8
   127be:	18fb      	adds	r3, r7, r3
   127c0:	781a      	ldrb	r2, [r3, #0]
   127c2:	230a      	movs	r3, #10
   127c4:	18fb      	adds	r3, r7, r3
   127c6:	781b      	ldrb	r3, [r3, #0]
   127c8:	1ad3      	subs	r3, r2, r3
   127ca:	b2da      	uxtb	r2, r3
   127cc:	2308      	movs	r3, #8
   127ce:	18fb      	adds	r3, r7, r3
   127d0:	701a      	strb	r2, [r3, #0]
				y += yinc;
   127d2:	230b      	movs	r3, #11
   127d4:	18fb      	adds	r3, r7, r3
   127d6:	7819      	ldrb	r1, [r3, #0]
   127d8:	230d      	movs	r3, #13
   127da:	18fb      	adds	r3, r7, r3
   127dc:	220d      	movs	r2, #13
   127de:	18ba      	adds	r2, r7, r2
   127e0:	7812      	ldrb	r2, [r2, #0]
   127e2:	188a      	adds	r2, r1, r2
   127e4:	701a      	strb	r2, [r3, #0]
			}

			e += dy;
   127e6:	2308      	movs	r3, #8
   127e8:	18fb      	adds	r3, r7, r3
   127ea:	781a      	ldrb	r2, [r3, #0]
   127ec:	2309      	movs	r3, #9
   127ee:	18fb      	adds	r3, r7, r3
   127f0:	781b      	ldrb	r3, [r3, #0]
   127f2:	18d3      	adds	r3, r2, r3
   127f4:	b2da      	uxtb	r2, r3
   127f6:	2308      	movs	r3, #8
   127f8:	18fb      	adds	r3, r7, r3
   127fa:	701a      	strb	r2, [r3, #0]
			x += xinc;
   127fc:	230c      	movs	r3, #12
   127fe:	18fb      	adds	r3, r7, r3
   12800:	7819      	ldrb	r1, [r3, #0]
   12802:	230e      	movs	r3, #14
   12804:	18fb      	adds	r3, r7, r3
   12806:	220e      	movs	r2, #14
   12808:	18ba      	adds	r2, r7, r2
   1280a:	7812      	ldrb	r2, [r2, #0]
   1280c:	188a      	adds	r2, r1, r2
   1280e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i <= dx; i++) {
   12810:	230f      	movs	r3, #15
   12812:	18fb      	adds	r3, r7, r3
   12814:	781a      	ldrb	r2, [r3, #0]
   12816:	230f      	movs	r3, #15
   12818:	18fb      	adds	r3, r7, r3
   1281a:	3201      	adds	r2, #1
   1281c:	701a      	strb	r2, [r3, #0]
   1281e:	230f      	movs	r3, #15
   12820:	18fb      	adds	r3, r7, r3
   12822:	781a      	ldrb	r2, [r3, #0]
   12824:	230a      	movs	r3, #10
   12826:	18fb      	adds	r3, r7, r3
   12828:	781b      	ldrb	r3, [r3, #0]
   1282a:	b25b      	sxtb	r3, r3
   1282c:	429a      	cmp	r2, r3
   1282e:	ddb4      	ble.n	1279a <gfx_mono_generic_draw_line+0x12e>

			e += dx;
			y += yinc;
		}
	}
}
   12830:	e05a      	b.n	128e8 <gfx_mono_generic_draw_line+0x27c>
		e = dx - dy;
   12832:	230a      	movs	r3, #10
   12834:	18fb      	adds	r3, r7, r3
   12836:	781a      	ldrb	r2, [r3, #0]
   12838:	2309      	movs	r3, #9
   1283a:	18fb      	adds	r3, r7, r3
   1283c:	781b      	ldrb	r3, [r3, #0]
   1283e:	1ad3      	subs	r3, r2, r3
   12840:	b2da      	uxtb	r2, r3
   12842:	2308      	movs	r3, #8
   12844:	18fb      	adds	r3, r7, r3
   12846:	701a      	strb	r2, [r3, #0]
		for (i = 0; i <= dy; i++) {
   12848:	230f      	movs	r3, #15
   1284a:	18fb      	adds	r3, r7, r3
   1284c:	2200      	movs	r2, #0
   1284e:	701a      	strb	r2, [r3, #0]
   12850:	e041      	b.n	128d6 <gfx_mono_generic_draw_line+0x26a>
			gfx_mono_draw_pixel(x, y, color);
   12852:	2320      	movs	r3, #32
   12854:	18fb      	adds	r3, r7, r3
   12856:	781a      	ldrb	r2, [r3, #0]
   12858:	230d      	movs	r3, #13
   1285a:	18fb      	adds	r3, r7, r3
   1285c:	7819      	ldrb	r1, [r3, #0]
   1285e:	230e      	movs	r3, #14
   12860:	18fb      	adds	r3, r7, r3
   12862:	781b      	ldrb	r3, [r3, #0]
   12864:	0018      	movs	r0, r3
   12866:	4b22      	ldr	r3, [pc, #136]	; (128f0 <gfx_mono_generic_draw_line+0x284>)
   12868:	4798      	blx	r3
			if (e >= 0) {
   1286a:	2308      	movs	r3, #8
   1286c:	18fb      	adds	r3, r7, r3
   1286e:	781b      	ldrb	r3, [r3, #0]
   12870:	2b7f      	cmp	r3, #127	; 0x7f
   12872:	d814      	bhi.n	1289e <gfx_mono_generic_draw_line+0x232>
				e -= dy;
   12874:	2308      	movs	r3, #8
   12876:	18fb      	adds	r3, r7, r3
   12878:	781a      	ldrb	r2, [r3, #0]
   1287a:	2309      	movs	r3, #9
   1287c:	18fb      	adds	r3, r7, r3
   1287e:	781b      	ldrb	r3, [r3, #0]
   12880:	1ad3      	subs	r3, r2, r3
   12882:	b2da      	uxtb	r2, r3
   12884:	2308      	movs	r3, #8
   12886:	18fb      	adds	r3, r7, r3
   12888:	701a      	strb	r2, [r3, #0]
				x += xinc;
   1288a:	230c      	movs	r3, #12
   1288c:	18fb      	adds	r3, r7, r3
   1288e:	7819      	ldrb	r1, [r3, #0]
   12890:	230e      	movs	r3, #14
   12892:	18fb      	adds	r3, r7, r3
   12894:	220e      	movs	r2, #14
   12896:	18ba      	adds	r2, r7, r2
   12898:	7812      	ldrb	r2, [r2, #0]
   1289a:	188a      	adds	r2, r1, r2
   1289c:	701a      	strb	r2, [r3, #0]
			e += dx;
   1289e:	2308      	movs	r3, #8
   128a0:	18fb      	adds	r3, r7, r3
   128a2:	781a      	ldrb	r2, [r3, #0]
   128a4:	230a      	movs	r3, #10
   128a6:	18fb      	adds	r3, r7, r3
   128a8:	781b      	ldrb	r3, [r3, #0]
   128aa:	18d3      	adds	r3, r2, r3
   128ac:	b2da      	uxtb	r2, r3
   128ae:	2308      	movs	r3, #8
   128b0:	18fb      	adds	r3, r7, r3
   128b2:	701a      	strb	r2, [r3, #0]
			y += yinc;
   128b4:	230b      	movs	r3, #11
   128b6:	18fb      	adds	r3, r7, r3
   128b8:	7819      	ldrb	r1, [r3, #0]
   128ba:	230d      	movs	r3, #13
   128bc:	18fb      	adds	r3, r7, r3
   128be:	220d      	movs	r2, #13
   128c0:	18ba      	adds	r2, r7, r2
   128c2:	7812      	ldrb	r2, [r2, #0]
   128c4:	188a      	adds	r2, r1, r2
   128c6:	701a      	strb	r2, [r3, #0]
		for (i = 0; i <= dy; i++) {
   128c8:	230f      	movs	r3, #15
   128ca:	18fb      	adds	r3, r7, r3
   128cc:	781a      	ldrb	r2, [r3, #0]
   128ce:	230f      	movs	r3, #15
   128d0:	18fb      	adds	r3, r7, r3
   128d2:	3201      	adds	r2, #1
   128d4:	701a      	strb	r2, [r3, #0]
   128d6:	230f      	movs	r3, #15
   128d8:	18fb      	adds	r3, r7, r3
   128da:	781a      	ldrb	r2, [r3, #0]
   128dc:	2309      	movs	r3, #9
   128de:	18fb      	adds	r3, r7, r3
   128e0:	781b      	ldrb	r3, [r3, #0]
   128e2:	b25b      	sxtb	r3, r3
   128e4:	429a      	cmp	r2, r3
   128e6:	ddb4      	ble.n	12852 <gfx_mono_generic_draw_line+0x1e6>
}
   128e8:	46c0      	nop			; (mov r8, r8)
   128ea:	46bd      	mov	sp, r7
   128ec:	b004      	add	sp, #16
   128ee:	bdb0      	pop	{r4, r5, r7, pc}
   128f0:	00012f95 	.word	0x00012f95

000128f4 <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
   128f4:	b5b0      	push	{r4, r5, r7, lr}
   128f6:	b082      	sub	sp, #8
   128f8:	af00      	add	r7, sp, #0
   128fa:	0005      	movs	r5, r0
   128fc:	000c      	movs	r4, r1
   128fe:	0010      	movs	r0, r2
   12900:	0019      	movs	r1, r3
   12902:	1dfb      	adds	r3, r7, #7
   12904:	1c2a      	adds	r2, r5, #0
   12906:	701a      	strb	r2, [r3, #0]
   12908:	1dbb      	adds	r3, r7, #6
   1290a:	1c22      	adds	r2, r4, #0
   1290c:	701a      	strb	r2, [r3, #0]
   1290e:	1d7b      	adds	r3, r7, #5
   12910:	1c02      	adds	r2, r0, #0
   12912:	701a      	strb	r2, [r3, #0]
   12914:	1d3b      	adds	r3, r7, #4
   12916:	1c0a      	adds	r2, r1, #0
   12918:	701a      	strb	r2, [r3, #0]
	if (height == 0) {
   1291a:	1d3b      	adds	r3, r7, #4
   1291c:	781b      	ldrb	r3, [r3, #0]
   1291e:	2b00      	cmp	r3, #0
   12920:	d018      	beq.n	12954 <gfx_mono_generic_draw_filled_rect+0x60>
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
   12922:	e00f      	b.n	12944 <gfx_mono_generic_draw_filled_rect+0x50>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
   12924:	1dba      	adds	r2, r7, #6
   12926:	1d3b      	adds	r3, r7, #4
   12928:	7812      	ldrb	r2, [r2, #0]
   1292a:	781b      	ldrb	r3, [r3, #0]
   1292c:	18d3      	adds	r3, r2, r3
   1292e:	b2d9      	uxtb	r1, r3
   12930:	2318      	movs	r3, #24
   12932:	18fb      	adds	r3, r7, r3
   12934:	781c      	ldrb	r4, [r3, #0]
   12936:	1d7b      	adds	r3, r7, #5
   12938:	781a      	ldrb	r2, [r3, #0]
   1293a:	1dfb      	adds	r3, r7, #7
   1293c:	7818      	ldrb	r0, [r3, #0]
   1293e:	0023      	movs	r3, r4
   12940:	4c06      	ldr	r4, [pc, #24]	; (1295c <gfx_mono_generic_draw_filled_rect+0x68>)
   12942:	47a0      	blx	r4
	while (height-- > 0) {
   12944:	1d3b      	adds	r3, r7, #4
   12946:	781b      	ldrb	r3, [r3, #0]
   12948:	1d3a      	adds	r2, r7, #4
   1294a:	1e59      	subs	r1, r3, #1
   1294c:	7011      	strb	r1, [r2, #0]
   1294e:	2b00      	cmp	r3, #0
   12950:	d1e8      	bne.n	12924 <gfx_mono_generic_draw_filled_rect+0x30>
   12952:	e000      	b.n	12956 <gfx_mono_generic_draw_filled_rect+0x62>
		return;
   12954:	46c0      	nop			; (mov r8, r8)
	}
}
   12956:	46bd      	mov	sp, r7
   12958:	b002      	add	sp, #8
   1295a:	bdb0      	pop	{r4, r5, r7, pc}
   1295c:	00012315 	.word	0x00012315

00012960 <gfx_mono_generic_draw_filled_circle>:
 * \param[in]  quadrant_mask Bitmask indicating which quadrants to draw.
 */
void gfx_mono_generic_draw_filled_circle(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t radius, enum gfx_mono_color color,
		uint8_t quadrant_mask)
{
   12960:	b5b0      	push	{r4, r5, r7, lr}
   12962:	b084      	sub	sp, #16
   12964:	af00      	add	r7, sp, #0
   12966:	0005      	movs	r5, r0
   12968:	000c      	movs	r4, r1
   1296a:	0010      	movs	r0, r2
   1296c:	0019      	movs	r1, r3
   1296e:	1dfb      	adds	r3, r7, #7
   12970:	1c2a      	adds	r2, r5, #0
   12972:	701a      	strb	r2, [r3, #0]
   12974:	1dbb      	adds	r3, r7, #6
   12976:	1c22      	adds	r2, r4, #0
   12978:	701a      	strb	r2, [r3, #0]
   1297a:	1d7b      	adds	r3, r7, #5
   1297c:	1c02      	adds	r2, r0, #0
   1297e:	701a      	strb	r2, [r3, #0]
   12980:	1d3b      	adds	r3, r7, #4
   12982:	1c0a      	adds	r2, r1, #0
   12984:	701a      	strb	r2, [r3, #0]
	gfx_coord_t offset_x;
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
   12986:	1d7b      	adds	r3, r7, #5
   12988:	781b      	ldrb	r3, [r3, #0]
   1298a:	2b00      	cmp	r3, #0
   1298c:	d109      	bne.n	129a2 <gfx_mono_generic_draw_filled_circle+0x42>
		gfx_mono_draw_pixel(x, y, color);
   1298e:	1d3b      	adds	r3, r7, #4
   12990:	781a      	ldrb	r2, [r3, #0]
   12992:	1dbb      	adds	r3, r7, #6
   12994:	7819      	ldrb	r1, [r3, #0]
   12996:	1dfb      	adds	r3, r7, #7
   12998:	781b      	ldrb	r3, [r3, #0]
   1299a:	0018      	movs	r0, r3
   1299c:	4b8f      	ldr	r3, [pc, #572]	; (12bdc <gfx_mono_generic_draw_filled_circle+0x27c>)
   1299e:	4798      	blx	r3
		return;
   129a0:	e118      	b.n	12bd4 <gfx_mono_generic_draw_filled_circle+0x274>
	}

	/* Set up start iterators. */
	offset_x = 0;
   129a2:	230f      	movs	r3, #15
   129a4:	18fb      	adds	r3, r7, r3
   129a6:	2200      	movs	r2, #0
   129a8:	701a      	strb	r2, [r3, #0]
	offset_y = radius;
   129aa:	230e      	movs	r3, #14
   129ac:	18fb      	adds	r3, r7, r3
   129ae:	1d7a      	adds	r2, r7, #5
   129b0:	7812      	ldrb	r2, [r2, #0]
   129b2:	701a      	strb	r2, [r3, #0]
	error = 3 - 2 * radius;
   129b4:	1d7b      	adds	r3, r7, #5
   129b6:	781b      	ldrb	r3, [r3, #0]
   129b8:	b29b      	uxth	r3, r3
   129ba:	18db      	adds	r3, r3, r3
   129bc:	b29b      	uxth	r3, r3
   129be:	2203      	movs	r2, #3
   129c0:	1ad3      	subs	r3, r2, r3
   129c2:	b29a      	uxth	r2, r3
   129c4:	230c      	movs	r3, #12
   129c6:	18fb      	adds	r3, r7, r3
   129c8:	801a      	strh	r2, [r3, #0]

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
   129ca:	e0fa      	b.n	12bc2 <gfx_mono_generic_draw_filled_circle+0x262>
		/* Draw vertical lines tracking each quadrant. */
		if (quadrant_mask & GFX_QUADRANT0) {
   129cc:	2320      	movs	r3, #32
   129ce:	18fb      	adds	r3, r7, r3
   129d0:	781b      	ldrb	r3, [r3, #0]
   129d2:	2203      	movs	r2, #3
   129d4:	4013      	ands	r3, r2
   129d6:	d02d      	beq.n	12a34 <gfx_mono_generic_draw_filled_circle+0xd4>
			gfx_mono_draw_vertical_line(x + offset_y,
   129d8:	1dfa      	adds	r2, r7, #7
   129da:	230e      	movs	r3, #14
   129dc:	18fb      	adds	r3, r7, r3
   129de:	7812      	ldrb	r2, [r2, #0]
   129e0:	781b      	ldrb	r3, [r3, #0]
   129e2:	18d3      	adds	r3, r2, r3
   129e4:	b2d8      	uxtb	r0, r3
   129e6:	1dba      	adds	r2, r7, #6
   129e8:	230f      	movs	r3, #15
   129ea:	18fb      	adds	r3, r7, r3
   129ec:	7812      	ldrb	r2, [r2, #0]
   129ee:	781b      	ldrb	r3, [r3, #0]
   129f0:	1ad3      	subs	r3, r2, r3
   129f2:	b2d9      	uxtb	r1, r3
   129f4:	230f      	movs	r3, #15
   129f6:	18fb      	adds	r3, r7, r3
   129f8:	781b      	ldrb	r3, [r3, #0]
   129fa:	3301      	adds	r3, #1
   129fc:	b2da      	uxtb	r2, r3
   129fe:	1d3b      	adds	r3, r7, #4
   12a00:	781b      	ldrb	r3, [r3, #0]
   12a02:	4c77      	ldr	r4, [pc, #476]	; (12be0 <gfx_mono_generic_draw_filled_circle+0x280>)
   12a04:	47a0      	blx	r4
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
   12a06:	1dfa      	adds	r2, r7, #7
   12a08:	230f      	movs	r3, #15
   12a0a:	18fb      	adds	r3, r7, r3
   12a0c:	7812      	ldrb	r2, [r2, #0]
   12a0e:	781b      	ldrb	r3, [r3, #0]
   12a10:	18d3      	adds	r3, r2, r3
   12a12:	b2d8      	uxtb	r0, r3
   12a14:	1dba      	adds	r2, r7, #6
   12a16:	230e      	movs	r3, #14
   12a18:	18fb      	adds	r3, r7, r3
   12a1a:	7812      	ldrb	r2, [r2, #0]
   12a1c:	781b      	ldrb	r3, [r3, #0]
   12a1e:	1ad3      	subs	r3, r2, r3
   12a20:	b2d9      	uxtb	r1, r3
   12a22:	230e      	movs	r3, #14
   12a24:	18fb      	adds	r3, r7, r3
   12a26:	781b      	ldrb	r3, [r3, #0]
   12a28:	3301      	adds	r3, #1
   12a2a:	b2da      	uxtb	r2, r3
   12a2c:	1d3b      	adds	r3, r7, #4
   12a2e:	781b      	ldrb	r3, [r3, #0]
   12a30:	4c6b      	ldr	r4, [pc, #428]	; (12be0 <gfx_mono_generic_draw_filled_circle+0x280>)
   12a32:	47a0      	blx	r4
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT1) {
   12a34:	2320      	movs	r3, #32
   12a36:	18fb      	adds	r3, r7, r3
   12a38:	781b      	ldrb	r3, [r3, #0]
   12a3a:	220c      	movs	r2, #12
   12a3c:	4013      	ands	r3, r2
   12a3e:	d02d      	beq.n	12a9c <gfx_mono_generic_draw_filled_circle+0x13c>
			gfx_mono_draw_vertical_line(x - offset_y,
   12a40:	1dfa      	adds	r2, r7, #7
   12a42:	230e      	movs	r3, #14
   12a44:	18fb      	adds	r3, r7, r3
   12a46:	7812      	ldrb	r2, [r2, #0]
   12a48:	781b      	ldrb	r3, [r3, #0]
   12a4a:	1ad3      	subs	r3, r2, r3
   12a4c:	b2d8      	uxtb	r0, r3
   12a4e:	1dba      	adds	r2, r7, #6
   12a50:	230f      	movs	r3, #15
   12a52:	18fb      	adds	r3, r7, r3
   12a54:	7812      	ldrb	r2, [r2, #0]
   12a56:	781b      	ldrb	r3, [r3, #0]
   12a58:	1ad3      	subs	r3, r2, r3
   12a5a:	b2d9      	uxtb	r1, r3
   12a5c:	230f      	movs	r3, #15
   12a5e:	18fb      	adds	r3, r7, r3
   12a60:	781b      	ldrb	r3, [r3, #0]
   12a62:	3301      	adds	r3, #1
   12a64:	b2da      	uxtb	r2, r3
   12a66:	1d3b      	adds	r3, r7, #4
   12a68:	781b      	ldrb	r3, [r3, #0]
   12a6a:	4c5d      	ldr	r4, [pc, #372]	; (12be0 <gfx_mono_generic_draw_filled_circle+0x280>)
   12a6c:	47a0      	blx	r4
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
   12a6e:	1dfa      	adds	r2, r7, #7
   12a70:	230f      	movs	r3, #15
   12a72:	18fb      	adds	r3, r7, r3
   12a74:	7812      	ldrb	r2, [r2, #0]
   12a76:	781b      	ldrb	r3, [r3, #0]
   12a78:	1ad3      	subs	r3, r2, r3
   12a7a:	b2d8      	uxtb	r0, r3
   12a7c:	1dba      	adds	r2, r7, #6
   12a7e:	230e      	movs	r3, #14
   12a80:	18fb      	adds	r3, r7, r3
   12a82:	7812      	ldrb	r2, [r2, #0]
   12a84:	781b      	ldrb	r3, [r3, #0]
   12a86:	1ad3      	subs	r3, r2, r3
   12a88:	b2d9      	uxtb	r1, r3
   12a8a:	230e      	movs	r3, #14
   12a8c:	18fb      	adds	r3, r7, r3
   12a8e:	781b      	ldrb	r3, [r3, #0]
   12a90:	3301      	adds	r3, #1
   12a92:	b2da      	uxtb	r2, r3
   12a94:	1d3b      	adds	r3, r7, #4
   12a96:	781b      	ldrb	r3, [r3, #0]
   12a98:	4c51      	ldr	r4, [pc, #324]	; (12be0 <gfx_mono_generic_draw_filled_circle+0x280>)
   12a9a:	47a0      	blx	r4
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT2) {
   12a9c:	2320      	movs	r3, #32
   12a9e:	18fb      	adds	r3, r7, r3
   12aa0:	781b      	ldrb	r3, [r3, #0]
   12aa2:	2230      	movs	r2, #48	; 0x30
   12aa4:	4013      	ands	r3, r2
   12aa6:	d025      	beq.n	12af4 <gfx_mono_generic_draw_filled_circle+0x194>
			gfx_mono_draw_vertical_line(x - offset_y,
   12aa8:	1dfa      	adds	r2, r7, #7
   12aaa:	230e      	movs	r3, #14
   12aac:	18fb      	adds	r3, r7, r3
   12aae:	7812      	ldrb	r2, [r2, #0]
   12ab0:	781b      	ldrb	r3, [r3, #0]
   12ab2:	1ad3      	subs	r3, r2, r3
   12ab4:	b2d8      	uxtb	r0, r3
   12ab6:	230f      	movs	r3, #15
   12ab8:	18fb      	adds	r3, r7, r3
   12aba:	781b      	ldrb	r3, [r3, #0]
   12abc:	3301      	adds	r3, #1
   12abe:	b2da      	uxtb	r2, r3
   12ac0:	1d3b      	adds	r3, r7, #4
   12ac2:	781c      	ldrb	r4, [r3, #0]
   12ac4:	1dbb      	adds	r3, r7, #6
   12ac6:	7819      	ldrb	r1, [r3, #0]
   12ac8:	0023      	movs	r3, r4
   12aca:	4c45      	ldr	r4, [pc, #276]	; (12be0 <gfx_mono_generic_draw_filled_circle+0x280>)
   12acc:	47a0      	blx	r4
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
   12ace:	1dfa      	adds	r2, r7, #7
   12ad0:	230f      	movs	r3, #15
   12ad2:	18fb      	adds	r3, r7, r3
   12ad4:	7812      	ldrb	r2, [r2, #0]
   12ad6:	781b      	ldrb	r3, [r3, #0]
   12ad8:	1ad3      	subs	r3, r2, r3
   12ada:	b2d8      	uxtb	r0, r3
   12adc:	230e      	movs	r3, #14
   12ade:	18fb      	adds	r3, r7, r3
   12ae0:	781b      	ldrb	r3, [r3, #0]
   12ae2:	3301      	adds	r3, #1
   12ae4:	b2da      	uxtb	r2, r3
   12ae6:	1d3b      	adds	r3, r7, #4
   12ae8:	781c      	ldrb	r4, [r3, #0]
   12aea:	1dbb      	adds	r3, r7, #6
   12aec:	7819      	ldrb	r1, [r3, #0]
   12aee:	0023      	movs	r3, r4
   12af0:	4c3b      	ldr	r4, [pc, #236]	; (12be0 <gfx_mono_generic_draw_filled_circle+0x280>)
   12af2:	47a0      	blx	r4
					y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT3) {
   12af4:	2320      	movs	r3, #32
   12af6:	18fb      	adds	r3, r7, r3
   12af8:	781b      	ldrb	r3, [r3, #0]
   12afa:	22c0      	movs	r2, #192	; 0xc0
   12afc:	4013      	ands	r3, r2
   12afe:	d025      	beq.n	12b4c <gfx_mono_generic_draw_filled_circle+0x1ec>
			gfx_mono_draw_vertical_line(x + offset_y,
   12b00:	1dfa      	adds	r2, r7, #7
   12b02:	230e      	movs	r3, #14
   12b04:	18fb      	adds	r3, r7, r3
   12b06:	7812      	ldrb	r2, [r2, #0]
   12b08:	781b      	ldrb	r3, [r3, #0]
   12b0a:	18d3      	adds	r3, r2, r3
   12b0c:	b2d8      	uxtb	r0, r3
   12b0e:	230f      	movs	r3, #15
   12b10:	18fb      	adds	r3, r7, r3
   12b12:	781b      	ldrb	r3, [r3, #0]
   12b14:	3301      	adds	r3, #1
   12b16:	b2da      	uxtb	r2, r3
   12b18:	1d3b      	adds	r3, r7, #4
   12b1a:	781c      	ldrb	r4, [r3, #0]
   12b1c:	1dbb      	adds	r3, r7, #6
   12b1e:	7819      	ldrb	r1, [r3, #0]
   12b20:	0023      	movs	r3, r4
   12b22:	4c2f      	ldr	r4, [pc, #188]	; (12be0 <gfx_mono_generic_draw_filled_circle+0x280>)
   12b24:	47a0      	blx	r4
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
   12b26:	1dfa      	adds	r2, r7, #7
   12b28:	230f      	movs	r3, #15
   12b2a:	18fb      	adds	r3, r7, r3
   12b2c:	7812      	ldrb	r2, [r2, #0]
   12b2e:	781b      	ldrb	r3, [r3, #0]
   12b30:	18d3      	adds	r3, r2, r3
   12b32:	b2d8      	uxtb	r0, r3
   12b34:	230e      	movs	r3, #14
   12b36:	18fb      	adds	r3, r7, r3
   12b38:	781b      	ldrb	r3, [r3, #0]
   12b3a:	3301      	adds	r3, #1
   12b3c:	b2da      	uxtb	r2, r3
   12b3e:	1d3b      	adds	r3, r7, #4
   12b40:	781c      	ldrb	r4, [r3, #0]
   12b42:	1dbb      	adds	r3, r7, #6
   12b44:	7819      	ldrb	r1, [r3, #0]
   12b46:	0023      	movs	r3, r4
   12b48:	4c25      	ldr	r4, [pc, #148]	; (12be0 <gfx_mono_generic_draw_filled_circle+0x280>)
   12b4a:	47a0      	blx	r4
					y, offset_y + 1, color);
		}

		/* Update error value and step offset_y when required. */
		if (error < 0) {
   12b4c:	230c      	movs	r3, #12
   12b4e:	18fb      	adds	r3, r7, r3
   12b50:	2200      	movs	r2, #0
   12b52:	5e9b      	ldrsh	r3, [r3, r2]
   12b54:	2b00      	cmp	r3, #0
   12b56:	da10      	bge.n	12b7a <gfx_mono_generic_draw_filled_circle+0x21a>
			error += ((offset_x << 2) + 6);
   12b58:	230f      	movs	r3, #15
   12b5a:	18fb      	adds	r3, r7, r3
   12b5c:	781b      	ldrb	r3, [r3, #0]
   12b5e:	b29b      	uxth	r3, r3
   12b60:	009b      	lsls	r3, r3, #2
   12b62:	b29a      	uxth	r2, r3
   12b64:	230c      	movs	r3, #12
   12b66:	18fb      	adds	r3, r7, r3
   12b68:	881b      	ldrh	r3, [r3, #0]
   12b6a:	18d3      	adds	r3, r2, r3
   12b6c:	b29b      	uxth	r3, r3
   12b6e:	3306      	adds	r3, #6
   12b70:	b29a      	uxth	r2, r3
   12b72:	230c      	movs	r3, #12
   12b74:	18fb      	adds	r3, r7, r3
   12b76:	801a      	strh	r2, [r3, #0]
   12b78:	e01c      	b.n	12bb4 <gfx_mono_generic_draw_filled_circle+0x254>
		} else {
			error += (((offset_x - offset_y) << 2) + 10);
   12b7a:	230f      	movs	r3, #15
   12b7c:	18fb      	adds	r3, r7, r3
   12b7e:	781b      	ldrb	r3, [r3, #0]
   12b80:	b29a      	uxth	r2, r3
   12b82:	230e      	movs	r3, #14
   12b84:	18fb      	adds	r3, r7, r3
   12b86:	781b      	ldrb	r3, [r3, #0]
   12b88:	b29b      	uxth	r3, r3
   12b8a:	1ad3      	subs	r3, r2, r3
   12b8c:	b29b      	uxth	r3, r3
   12b8e:	009b      	lsls	r3, r3, #2
   12b90:	b29a      	uxth	r2, r3
   12b92:	230c      	movs	r3, #12
   12b94:	18fb      	adds	r3, r7, r3
   12b96:	881b      	ldrh	r3, [r3, #0]
   12b98:	18d3      	adds	r3, r2, r3
   12b9a:	b29b      	uxth	r3, r3
   12b9c:	330a      	adds	r3, #10
   12b9e:	b29a      	uxth	r2, r3
   12ba0:	230c      	movs	r3, #12
   12ba2:	18fb      	adds	r3, r7, r3
   12ba4:	801a      	strh	r2, [r3, #0]
			--offset_y;
   12ba6:	230e      	movs	r3, #14
   12ba8:	18fb      	adds	r3, r7, r3
   12baa:	220e      	movs	r2, #14
   12bac:	18ba      	adds	r2, r7, r2
   12bae:	7812      	ldrb	r2, [r2, #0]
   12bb0:	3a01      	subs	r2, #1
   12bb2:	701a      	strb	r2, [r3, #0]
		}

		/* Next X. */
		++offset_x;
   12bb4:	230f      	movs	r3, #15
   12bb6:	18fb      	adds	r3, r7, r3
   12bb8:	220f      	movs	r2, #15
   12bba:	18ba      	adds	r2, r7, r2
   12bbc:	7812      	ldrb	r2, [r2, #0]
   12bbe:	3201      	adds	r2, #1
   12bc0:	701a      	strb	r2, [r3, #0]
	while (offset_x <= offset_y) {
   12bc2:	230f      	movs	r3, #15
   12bc4:	18fa      	adds	r2, r7, r3
   12bc6:	230e      	movs	r3, #14
   12bc8:	18fb      	adds	r3, r7, r3
   12bca:	7812      	ldrb	r2, [r2, #0]
   12bcc:	781b      	ldrb	r3, [r3, #0]
   12bce:	429a      	cmp	r2, r3
   12bd0:	d800      	bhi.n	12bd4 <gfx_mono_generic_draw_filled_circle+0x274>
   12bd2:	e6fb      	b.n	129cc <gfx_mono_generic_draw_filled_circle+0x6c>
	}
}
   12bd4:	46bd      	mov	sp, r7
   12bd6:	b004      	add	sp, #16
   12bd8:	bdb0      	pop	{r4, r5, r7, pc}
   12bda:	46c0      	nop			; (mov r8, r8)
   12bdc:	00012f95 	.word	0x00012f95
   12be0:	000124dd 	.word	0x000124dd

00012be4 <gfx_mono_draw_char_progmem>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
static void gfx_mono_draw_char_progmem(const char ch, const gfx_coord_t x,
		const gfx_coord_t y, const struct font *font)
{
   12be4:	b590      	push	{r4, r7, lr}
   12be6:	b087      	sub	sp, #28
   12be8:	af00      	add	r7, sp, #0
   12bea:	0004      	movs	r4, r0
   12bec:	0008      	movs	r0, r1
   12bee:	0011      	movs	r1, r2
   12bf0:	603b      	str	r3, [r7, #0]
   12bf2:	1dfb      	adds	r3, r7, #7
   12bf4:	1c22      	adds	r2, r4, #0
   12bf6:	701a      	strb	r2, [r3, #0]
   12bf8:	1dbb      	adds	r3, r7, #6
   12bfa:	1c02      	adds	r2, r0, #0
   12bfc:	701a      	strb	r2, [r3, #0]
   12bfe:	1d7b      	adds	r3, r7, #5
   12c00:	1c0a      	adds	r2, r1, #0
   12c02:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	/* Sanity check on parameters, assert if font is NULL. */
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
   12c04:	2310      	movs	r3, #16
   12c06:	18fb      	adds	r3, r7, r3
   12c08:	1dba      	adds	r2, r7, #6
   12c0a:	7812      	ldrb	r2, [r2, #0]
   12c0c:	701a      	strb	r2, [r3, #0]
	gfx_coord_t inc_y = y;
   12c0e:	230f      	movs	r3, #15
   12c10:	18fb      	adds	r3, r7, r3
   12c12:	1d7a      	adds	r2, r7, #5
   12c14:	7812      	ldrb	r2, [r2, #0]
   12c16:	701a      	strb	r2, [r3, #0]

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
   12c18:	683b      	ldr	r3, [r7, #0]
   12c1a:	7a1a      	ldrb	r2, [r3, #8]
   12c1c:	2313      	movs	r3, #19
   12c1e:	18fb      	adds	r3, r7, r3
   12c20:	08d2      	lsrs	r2, r2, #3
   12c22:	701a      	strb	r2, [r3, #0]
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
   12c24:	683b      	ldr	r3, [r7, #0]
   12c26:	7a1b      	ldrb	r3, [r3, #8]
   12c28:	2207      	movs	r2, #7
   12c2a:	4013      	ands	r3, r2
   12c2c:	b2db      	uxtb	r3, r3
   12c2e:	2b00      	cmp	r3, #0
   12c30:	d006      	beq.n	12c40 <gfx_mono_draw_char_progmem+0x5c>
		char_row_size++;
   12c32:	2313      	movs	r3, #19
   12c34:	18fb      	adds	r3, r7, r3
   12c36:	781a      	ldrb	r2, [r3, #0]
   12c38:	2313      	movs	r3, #19
   12c3a:	18fb      	adds	r3, r7, r3
   12c3c:	3201      	adds	r2, #1
   12c3e:	701a      	strb	r2, [r3, #0]
	}

	glyph_data_offset = char_row_size * font->height *
   12c40:	2313      	movs	r3, #19
   12c42:	18fb      	adds	r3, r7, r3
   12c44:	781b      	ldrb	r3, [r3, #0]
   12c46:	b29b      	uxth	r3, r3
   12c48:	683a      	ldr	r2, [r7, #0]
   12c4a:	7a52      	ldrb	r2, [r2, #9]
   12c4c:	b292      	uxth	r2, r2
   12c4e:	4353      	muls	r3, r2
   12c50:	b29a      	uxth	r2, r3
			((uint8_t)ch - font->first_char);
   12c52:	1dfb      	adds	r3, r7, #7
   12c54:	781b      	ldrb	r3, [r3, #0]
   12c56:	6839      	ldr	r1, [r7, #0]
   12c58:	7a89      	ldrb	r1, [r1, #10]
   12c5a:	1a5b      	subs	r3, r3, r1
	glyph_data_offset = char_row_size * font->height *
   12c5c:	b299      	uxth	r1, r3
   12c5e:	230c      	movs	r3, #12
   12c60:	18fb      	adds	r3, r7, r3
   12c62:	434a      	muls	r2, r1
   12c64:	801a      	strh	r2, [r3, #0]
	glyph_data = font->data.progmem + glyph_data_offset;
   12c66:	683b      	ldr	r3, [r7, #0]
   12c68:	685a      	ldr	r2, [r3, #4]
   12c6a:	230c      	movs	r3, #12
   12c6c:	18fb      	adds	r3, r7, r3
   12c6e:	881b      	ldrh	r3, [r3, #0]
   12c70:	18d3      	adds	r3, r2, r3
   12c72:	617b      	str	r3, [r7, #20]
	rows_left = font->height;
   12c74:	2312      	movs	r3, #18
   12c76:	18fb      	adds	r3, r7, r3
   12c78:	683a      	ldr	r2, [r7, #0]
   12c7a:	7a52      	ldrb	r2, [r2, #9]
   12c7c:	701a      	strb	r2, [r3, #0]

	do {
		uint8_t glyph_byte = 0;
   12c7e:	230e      	movs	r3, #14
   12c80:	18fb      	adds	r3, r7, r3
   12c82:	2200      	movs	r2, #0
   12c84:	701a      	strb	r2, [r3, #0]
		uint8_t pixelsToDraw = font->width;
   12c86:	230b      	movs	r3, #11
   12c88:	18fb      	adds	r3, r7, r3
   12c8a:	683a      	ldr	r2, [r7, #0]
   12c8c:	7a12      	ldrb	r2, [r2, #8]
   12c8e:	701a      	strb	r2, [r3, #0]

		for (i = 0; i < pixelsToDraw; i++) {
   12c90:	2311      	movs	r3, #17
   12c92:	18fb      	adds	r3, r7, r3
   12c94:	2200      	movs	r2, #0
   12c96:	701a      	strb	r2, [r3, #0]
   12c98:	e034      	b.n	12d04 <gfx_mono_draw_char_progmem+0x120>
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
   12c9a:	2311      	movs	r3, #17
   12c9c:	18fb      	adds	r3, r7, r3
   12c9e:	781b      	ldrb	r3, [r3, #0]
   12ca0:	2207      	movs	r2, #7
   12ca2:	4013      	ands	r3, r2
   12ca4:	b2db      	uxtb	r3, r3
   12ca6:	2b00      	cmp	r3, #0
   12ca8:	d107      	bne.n	12cba <gfx_mono_draw_char_progmem+0xd6>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
   12caa:	230e      	movs	r3, #14
   12cac:	18fb      	adds	r3, r7, r3
   12cae:	697a      	ldr	r2, [r7, #20]
   12cb0:	7812      	ldrb	r2, [r2, #0]
   12cb2:	701a      	strb	r2, [r3, #0]
				glyph_data++;
   12cb4:	697b      	ldr	r3, [r7, #20]
   12cb6:	3301      	adds	r3, #1
   12cb8:	617b      	str	r3, [r7, #20]
			}

			if ((glyph_byte & 0x80)) {
   12cba:	230e      	movs	r3, #14
   12cbc:	18fb      	adds	r3, r7, r3
   12cbe:	781b      	ldrb	r3, [r3, #0]
   12cc0:	b25b      	sxtb	r3, r3
   12cc2:	2b00      	cmp	r3, #0
   12cc4:	da09      	bge.n	12cda <gfx_mono_draw_char_progmem+0xf6>
				gfx_mono_draw_pixel(inc_x, inc_y,
   12cc6:	230f      	movs	r3, #15
   12cc8:	18fb      	adds	r3, r7, r3
   12cca:	7819      	ldrb	r1, [r3, #0]
   12ccc:	2310      	movs	r3, #16
   12cce:	18fb      	adds	r3, r7, r3
   12cd0:	781b      	ldrb	r3, [r3, #0]
   12cd2:	2201      	movs	r2, #1
   12cd4:	0018      	movs	r0, r3
   12cd6:	4b1d      	ldr	r3, [pc, #116]	; (12d4c <gfx_mono_draw_char_progmem+0x168>)
   12cd8:	4798      	blx	r3
						GFX_PIXEL_SET);
			}

			inc_x += 1;
   12cda:	2310      	movs	r3, #16
   12cdc:	18fb      	adds	r3, r7, r3
   12cde:	2210      	movs	r2, #16
   12ce0:	18ba      	adds	r2, r7, r2
   12ce2:	7812      	ldrb	r2, [r2, #0]
   12ce4:	3201      	adds	r2, #1
   12ce6:	701a      	strb	r2, [r3, #0]
			glyph_byte <<= 1;
   12ce8:	230e      	movs	r3, #14
   12cea:	18fa      	adds	r2, r7, r3
   12cec:	230e      	movs	r3, #14
   12cee:	18fb      	adds	r3, r7, r3
   12cf0:	781b      	ldrb	r3, [r3, #0]
   12cf2:	18db      	adds	r3, r3, r3
   12cf4:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < pixelsToDraw; i++) {
   12cf6:	2311      	movs	r3, #17
   12cf8:	18fb      	adds	r3, r7, r3
   12cfa:	781a      	ldrb	r2, [r3, #0]
   12cfc:	2311      	movs	r3, #17
   12cfe:	18fb      	adds	r3, r7, r3
   12d00:	3201      	adds	r2, #1
   12d02:	701a      	strb	r2, [r3, #0]
   12d04:	2311      	movs	r3, #17
   12d06:	18fa      	adds	r2, r7, r3
   12d08:	230b      	movs	r3, #11
   12d0a:	18fb      	adds	r3, r7, r3
   12d0c:	7812      	ldrb	r2, [r2, #0]
   12d0e:	781b      	ldrb	r3, [r3, #0]
   12d10:	429a      	cmp	r2, r3
   12d12:	d3c2      	bcc.n	12c9a <gfx_mono_draw_char_progmem+0xb6>
		}

		inc_y += 1;
   12d14:	230f      	movs	r3, #15
   12d16:	18fb      	adds	r3, r7, r3
   12d18:	220f      	movs	r2, #15
   12d1a:	18ba      	adds	r2, r7, r2
   12d1c:	7812      	ldrb	r2, [r2, #0]
   12d1e:	3201      	adds	r2, #1
   12d20:	701a      	strb	r2, [r3, #0]
		inc_x = x;
   12d22:	2310      	movs	r3, #16
   12d24:	18fb      	adds	r3, r7, r3
   12d26:	1dba      	adds	r2, r7, #6
   12d28:	7812      	ldrb	r2, [r2, #0]
   12d2a:	701a      	strb	r2, [r3, #0]
		rows_left--;
   12d2c:	2312      	movs	r3, #18
   12d2e:	18fb      	adds	r3, r7, r3
   12d30:	781a      	ldrb	r2, [r3, #0]
   12d32:	2312      	movs	r3, #18
   12d34:	18fb      	adds	r3, r7, r3
   12d36:	3a01      	subs	r2, #1
   12d38:	701a      	strb	r2, [r3, #0]
	} while (rows_left > 0);
   12d3a:	2312      	movs	r3, #18
   12d3c:	18fb      	adds	r3, r7, r3
   12d3e:	781b      	ldrb	r3, [r3, #0]
   12d40:	2b00      	cmp	r3, #0
   12d42:	d19c      	bne.n	12c7e <gfx_mono_draw_char_progmem+0x9a>
}
   12d44:	46c0      	nop			; (mov r8, r8)
   12d46:	46bd      	mov	sp, r7
   12d48:	b007      	add	sp, #28
   12d4a:	bd90      	pop	{r4, r7, pc}
   12d4c:	00012f95 	.word	0x00012f95

00012d50 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
   12d50:	b590      	push	{r4, r7, lr}
   12d52:	b085      	sub	sp, #20
   12d54:	af02      	add	r7, sp, #8
   12d56:	0004      	movs	r4, r0
   12d58:	0008      	movs	r0, r1
   12d5a:	0011      	movs	r1, r2
   12d5c:	603b      	str	r3, [r7, #0]
   12d5e:	1dfb      	adds	r3, r7, #7
   12d60:	1c22      	adds	r2, r4, #0
   12d62:	701a      	strb	r2, [r3, #0]
   12d64:	1dbb      	adds	r3, r7, #6
   12d66:	1c02      	adds	r2, r0, #0
   12d68:	701a      	strb	r2, [r3, #0]
   12d6a:	1d7b      	adds	r3, r7, #5
   12d6c:	1c0a      	adds	r2, r1, #0
   12d6e:	701a      	strb	r2, [r3, #0]
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
   12d70:	683b      	ldr	r3, [r7, #0]
   12d72:	7a1a      	ldrb	r2, [r3, #8]
   12d74:	683b      	ldr	r3, [r7, #0]
   12d76:	7a5c      	ldrb	r4, [r3, #9]
   12d78:	1d7b      	adds	r3, r7, #5
   12d7a:	7819      	ldrb	r1, [r3, #0]
   12d7c:	1dbb      	adds	r3, r7, #6
   12d7e:	7818      	ldrb	r0, [r3, #0]
   12d80:	2300      	movs	r3, #0
   12d82:	9300      	str	r3, [sp, #0]
   12d84:	0023      	movs	r3, r4
   12d86:	4c0b      	ldr	r4, [pc, #44]	; (12db4 <gfx_mono_draw_char+0x64>)
   12d88:	47a0      	blx	r4
			GFX_PIXEL_CLR);

	switch (font->type) {
   12d8a:	683b      	ldr	r3, [r7, #0]
   12d8c:	781b      	ldrb	r3, [r3, #0]
   12d8e:	2b00      	cmp	r3, #0
   12d90:	d000      	beq.n	12d94 <gfx_mono_draw_char+0x44>

#endif
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
   12d92:	e00a      	b.n	12daa <gfx_mono_draw_char+0x5a>
		gfx_mono_draw_char_progmem(c, x, y, font);
   12d94:	683c      	ldr	r4, [r7, #0]
   12d96:	1d7b      	adds	r3, r7, #5
   12d98:	781a      	ldrb	r2, [r3, #0]
   12d9a:	1dbb      	adds	r3, r7, #6
   12d9c:	7819      	ldrb	r1, [r3, #0]
   12d9e:	1dfb      	adds	r3, r7, #7
   12da0:	7818      	ldrb	r0, [r3, #0]
   12da2:	0023      	movs	r3, r4
   12da4:	4c04      	ldr	r4, [pc, #16]	; (12db8 <gfx_mono_draw_char+0x68>)
   12da6:	47a0      	blx	r4
		break;
   12da8:	46c0      	nop			; (mov r8, r8)
	}
}
   12daa:	46c0      	nop			; (mov r8, r8)
   12dac:	46bd      	mov	sp, r7
   12dae:	b003      	add	sp, #12
   12db0:	bd90      	pop	{r4, r7, pc}
   12db2:	46c0      	nop			; (mov r8, r8)
   12db4:	000128f5 	.word	0x000128f5
   12db8:	00012be5 	.word	0x00012be5

00012dbc <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
   12dbc:	b590      	push	{r4, r7, lr}
   12dbe:	b087      	sub	sp, #28
   12dc0:	af00      	add	r7, sp, #0
   12dc2:	60f8      	str	r0, [r7, #12]
   12dc4:	0008      	movs	r0, r1
   12dc6:	0011      	movs	r1, r2
   12dc8:	607b      	str	r3, [r7, #4]
   12dca:	230b      	movs	r3, #11
   12dcc:	18fb      	adds	r3, r7, r3
   12dce:	1c02      	adds	r2, r0, #0
   12dd0:	701a      	strb	r2, [r3, #0]
   12dd2:	230a      	movs	r3, #10
   12dd4:	18fb      	adds	r3, r7, r3
   12dd6:	1c0a      	adds	r2, r1, #0
   12dd8:	701a      	strb	r2, [r3, #0]
	/* Save X in order to know where to return to on CR. */
	const gfx_coord_t start_of_string_position_x = x;
   12dda:	2317      	movs	r3, #23
   12ddc:	18fb      	adds	r3, r7, r3
   12dde:	220b      	movs	r2, #11
   12de0:	18ba      	adds	r2, r7, r2
   12de2:	7812      	ldrb	r2, [r2, #0]
   12de4:	701a      	strb	r2, [r3, #0]
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
   12de6:	68fb      	ldr	r3, [r7, #12]
   12de8:	781b      	ldrb	r3, [r3, #0]
   12dea:	2b0a      	cmp	r3, #10
   12dec:	d111      	bne.n	12e12 <gfx_mono_draw_string+0x56>
			x = start_of_string_position_x;
   12dee:	230b      	movs	r3, #11
   12df0:	18fb      	adds	r3, r7, r3
   12df2:	2217      	movs	r2, #23
   12df4:	18ba      	adds	r2, r7, r2
   12df6:	7812      	ldrb	r2, [r2, #0]
   12df8:	701a      	strb	r2, [r3, #0]
			y += font->height + 1;
   12dfa:	687b      	ldr	r3, [r7, #4]
   12dfc:	7a5a      	ldrb	r2, [r3, #9]
   12dfe:	230a      	movs	r3, #10
   12e00:	18fb      	adds	r3, r7, r3
   12e02:	781b      	ldrb	r3, [r3, #0]
   12e04:	18d3      	adds	r3, r2, r3
   12e06:	b2da      	uxtb	r2, r3
   12e08:	230a      	movs	r3, #10
   12e0a:	18fb      	adds	r3, r7, r3
   12e0c:	3201      	adds	r2, #1
   12e0e:	701a      	strb	r2, [r3, #0]
   12e10:	e018      	b.n	12e44 <gfx_mono_draw_string+0x88>
		} else if (*str == '\r') {
   12e12:	68fb      	ldr	r3, [r7, #12]
   12e14:	781b      	ldrb	r3, [r3, #0]
   12e16:	2b0d      	cmp	r3, #13
   12e18:	d014      	beq.n	12e44 <gfx_mono_draw_string+0x88>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
   12e1a:	68fb      	ldr	r3, [r7, #12]
   12e1c:	7818      	ldrb	r0, [r3, #0]
   12e1e:	687c      	ldr	r4, [r7, #4]
   12e20:	230a      	movs	r3, #10
   12e22:	18fb      	adds	r3, r7, r3
   12e24:	781a      	ldrb	r2, [r3, #0]
   12e26:	230b      	movs	r3, #11
   12e28:	18fb      	adds	r3, r7, r3
   12e2a:	7819      	ldrb	r1, [r3, #0]
   12e2c:	0023      	movs	r3, r4
   12e2e:	4c0b      	ldr	r4, [pc, #44]	; (12e5c <gfx_mono_draw_string+0xa0>)
   12e30:	47a0      	blx	r4
			x += font->width;
   12e32:	687b      	ldr	r3, [r7, #4]
   12e34:	7a19      	ldrb	r1, [r3, #8]
   12e36:	230b      	movs	r3, #11
   12e38:	18fb      	adds	r3, r7, r3
   12e3a:	220b      	movs	r2, #11
   12e3c:	18ba      	adds	r2, r7, r2
   12e3e:	7812      	ldrb	r2, [r2, #0]
   12e40:	188a      	adds	r2, r1, r2
   12e42:	701a      	strb	r2, [r3, #0]
		}
	} while (*(++str));
   12e44:	68fb      	ldr	r3, [r7, #12]
   12e46:	3301      	adds	r3, #1
   12e48:	60fb      	str	r3, [r7, #12]
   12e4a:	68fb      	ldr	r3, [r7, #12]
   12e4c:	781b      	ldrb	r3, [r3, #0]
   12e4e:	2b00      	cmp	r3, #0
   12e50:	d1c9      	bne.n	12de6 <gfx_mono_draw_string+0x2a>
}
   12e52:	46c0      	nop			; (mov r8, r8)
   12e54:	46bd      	mov	sp, r7
   12e56:	b007      	add	sp, #28
   12e58:	bd90      	pop	{r4, r7, pc}
   12e5a:	46c0      	nop			; (mov r8, r8)
   12e5c:	00012d51 	.word	0x00012d51

00012e60 <ssd1306_set_page_address>:
 * RAM.
 *
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
   12e60:	b580      	push	{r7, lr}
   12e62:	b082      	sub	sp, #8
   12e64:	af00      	add	r7, sp, #0
   12e66:	0002      	movs	r2, r0
   12e68:	1dfb      	adds	r3, r7, #7
   12e6a:	701a      	strb	r2, [r3, #0]
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
   12e6c:	1dfb      	adds	r3, r7, #7
   12e6e:	1dfa      	adds	r2, r7, #7
   12e70:	7812      	ldrb	r2, [r2, #0]
   12e72:	210f      	movs	r1, #15
   12e74:	400a      	ands	r2, r1
   12e76:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
   12e78:	1dfb      	adds	r3, r7, #7
   12e7a:	781b      	ldrb	r3, [r3, #0]
   12e7c:	2250      	movs	r2, #80	; 0x50
   12e7e:	4252      	negs	r2, r2
   12e80:	4313      	orrs	r3, r2
   12e82:	b2db      	uxtb	r3, r3
   12e84:	0018      	movs	r0, r3
   12e86:	4b03      	ldr	r3, [pc, #12]	; (12e94 <ssd1306_set_page_address+0x34>)
   12e88:	4798      	blx	r3
}
   12e8a:	46c0      	nop			; (mov r8, r8)
   12e8c:	46bd      	mov	sp, r7
   12e8e:	b002      	add	sp, #8
   12e90:	bd80      	pop	{r7, pc}
   12e92:	46c0      	nop			; (mov r8, r8)
   12e94:	000121d1 	.word	0x000121d1

00012e98 <ssd1306_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
   12e98:	b580      	push	{r7, lr}
   12e9a:	b082      	sub	sp, #8
   12e9c:	af00      	add	r7, sp, #0
   12e9e:	0002      	movs	r2, r0
   12ea0:	1dfb      	adds	r3, r7, #7
   12ea2:	701a      	strb	r2, [r3, #0]
	// Make sure the address is 7 bits
	address &= 0x7F;
   12ea4:	1dfb      	adds	r3, r7, #7
   12ea6:	1dfa      	adds	r2, r7, #7
   12ea8:	7812      	ldrb	r2, [r2, #0]
   12eaa:	217f      	movs	r1, #127	; 0x7f
   12eac:	400a      	ands	r2, r1
   12eae:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4)+ 0x02); //ESE516 change
   12eb0:	1dfb      	adds	r3, r7, #7
   12eb2:	781b      	ldrb	r3, [r3, #0]
   12eb4:	091b      	lsrs	r3, r3, #4
   12eb6:	b2db      	uxtb	r3, r3
   12eb8:	2210      	movs	r2, #16
   12eba:	4313      	orrs	r3, r2
   12ebc:	b2db      	uxtb	r3, r3
   12ebe:	3302      	adds	r3, #2
   12ec0:	b2db      	uxtb	r3, r3
   12ec2:	0018      	movs	r0, r3
   12ec4:	4b06      	ldr	r3, [pc, #24]	; (12ee0 <ssd1306_set_column_address+0x48>)
   12ec6:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
   12ec8:	1dfb      	adds	r3, r7, #7
   12eca:	781b      	ldrb	r3, [r3, #0]
   12ecc:	220f      	movs	r2, #15
   12ece:	4013      	ands	r3, r2
   12ed0:	b2db      	uxtb	r3, r3
   12ed2:	0018      	movs	r0, r3
   12ed4:	4b02      	ldr	r3, [pc, #8]	; (12ee0 <ssd1306_set_column_address+0x48>)
   12ed6:	4798      	blx	r3
}
   12ed8:	46c0      	nop			; (mov r8, r8)
   12eda:	46bd      	mov	sp, r7
   12edc:	b002      	add	sp, #8
   12ede:	bd80      	pop	{r7, pc}
   12ee0:	000121d1 	.word	0x000121d1

00012ee4 <ssd1306_set_display_start_line_address>:
 * \brief Set the display start draw line address
 *
 * This function will set which line should be the start draw line for the OLED.
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
   12ee4:	b580      	push	{r7, lr}
   12ee6:	b082      	sub	sp, #8
   12ee8:	af00      	add	r7, sp, #0
   12eea:	0002      	movs	r2, r0
   12eec:	1dfb      	adds	r3, r7, #7
   12eee:	701a      	strb	r2, [r3, #0]
	// Make sure address is 6 bits
	address &= 0x3F;
   12ef0:	1dfb      	adds	r3, r7, #7
   12ef2:	1dfa      	adds	r2, r7, #7
   12ef4:	7812      	ldrb	r2, [r2, #0]
   12ef6:	213f      	movs	r1, #63	; 0x3f
   12ef8:	400a      	ands	r2, r1
   12efa:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
   12efc:	1dfb      	adds	r3, r7, #7
   12efe:	781b      	ldrb	r3, [r3, #0]
   12f00:	2240      	movs	r2, #64	; 0x40
   12f02:	4313      	orrs	r3, r2
   12f04:	b2db      	uxtb	r3, r3
   12f06:	0018      	movs	r0, r3
   12f08:	4b02      	ldr	r3, [pc, #8]	; (12f14 <ssd1306_set_display_start_line_address+0x30>)
   12f0a:	4798      	blx	r3
}
   12f0c:	46c0      	nop			; (mov r8, r8)
   12f0e:	46bd      	mov	sp, r7
   12f10:	b002      	add	sp, #8
   12f12:	bd80      	pop	{r7, pc}
   12f14:	000121d1 	.word	0x000121d1

00012f18 <gfx_mono_ssd1306_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_ssd1306_init(void)
{
   12f18:	b590      	push	{r4, r7, lr}
   12f1a:	b083      	sub	sp, #12
   12f1c:	af00      	add	r7, sp, #0
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_SSD1306_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
   12f1e:	4b18      	ldr	r3, [pc, #96]	; (12f80 <gfx_mono_ssd1306_init+0x68>)
   12f20:	0018      	movs	r0, r3
   12f22:	4b18      	ldr	r3, [pc, #96]	; (12f84 <gfx_mono_ssd1306_init+0x6c>)
   12f24:	4798      	blx	r3
#endif

	/* Initialize the low-level display controller. */
	ssd1306_init();
   12f26:	4b18      	ldr	r3, [pc, #96]	; (12f88 <gfx_mono_ssd1306_init+0x70>)
   12f28:	4798      	blx	r3

	/* Set display to output data from line 0 */
	ssd1306_set_display_start_line_address(0);
   12f2a:	2000      	movs	r0, #0
   12f2c:	4b17      	ldr	r3, [pc, #92]	; (12f8c <gfx_mono_ssd1306_init+0x74>)
   12f2e:	4798      	blx	r3

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
   12f30:	1dfb      	adds	r3, r7, #7
   12f32:	2200      	movs	r2, #0
   12f34:	701a      	strb	r2, [r3, #0]
   12f36:	e01a      	b.n	12f6e <gfx_mono_ssd1306_init+0x56>
		for (column = 0; column < 128; column++) {
   12f38:	1dbb      	adds	r3, r7, #6
   12f3a:	2200      	movs	r2, #0
   12f3c:	701a      	strb	r2, [r3, #0]
   12f3e:	e00c      	b.n	12f5a <gfx_mono_ssd1306_init+0x42>
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
   12f40:	1dbb      	adds	r3, r7, #6
   12f42:	7819      	ldrb	r1, [r3, #0]
   12f44:	1dfb      	adds	r3, r7, #7
   12f46:	7818      	ldrb	r0, [r3, #0]
   12f48:	2301      	movs	r3, #1
   12f4a:	2200      	movs	r2, #0
   12f4c:	4c10      	ldr	r4, [pc, #64]	; (12f90 <gfx_mono_ssd1306_init+0x78>)
   12f4e:	47a0      	blx	r4
		for (column = 0; column < 128; column++) {
   12f50:	1dbb      	adds	r3, r7, #6
   12f52:	781a      	ldrb	r2, [r3, #0]
   12f54:	1dbb      	adds	r3, r7, #6
   12f56:	3201      	adds	r2, #1
   12f58:	701a      	strb	r2, [r3, #0]
   12f5a:	1dbb      	adds	r3, r7, #6
   12f5c:	781b      	ldrb	r3, [r3, #0]
   12f5e:	b25b      	sxtb	r3, r3
   12f60:	2b00      	cmp	r3, #0
   12f62:	daed      	bge.n	12f40 <gfx_mono_ssd1306_init+0x28>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
   12f64:	1dfb      	adds	r3, r7, #7
   12f66:	781a      	ldrb	r2, [r3, #0]
   12f68:	1dfb      	adds	r3, r7, #7
   12f6a:	3201      	adds	r2, #1
   12f6c:	701a      	strb	r2, [r3, #0]
   12f6e:	1dfb      	adds	r3, r7, #7
   12f70:	781b      	ldrb	r3, [r3, #0]
   12f72:	2b05      	cmp	r3, #5
   12f74:	d9e0      	bls.n	12f38 <gfx_mono_ssd1306_init+0x20>
		}
	}
}
   12f76:	46c0      	nop			; (mov r8, r8)
   12f78:	46bd      	mov	sp, r7
   12f7a:	b003      	add	sp, #12
   12f7c:	bd90      	pop	{r4, r7, pc}
   12f7e:	46c0      	nop			; (mov r8, r8)
   12f80:	20000320 	.word	0x20000320
   12f84:	00012281 	.word	0x00012281
   12f88:	00012129 	.word	0x00012129
   12f8c:	00012ee5 	.word	0x00012ee5
   12f90:	00013089 	.word	0x00013089

00012f94 <gfx_mono_ssd1306_draw_pixel>:
	gfx_mono_ssd1306_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
   12f94:	b590      	push	{r4, r7, lr}
   12f96:	b085      	sub	sp, #20
   12f98:	af00      	add	r7, sp, #0
   12f9a:	0004      	movs	r4, r0
   12f9c:	0008      	movs	r0, r1
   12f9e:	0011      	movs	r1, r2
   12fa0:	1dfb      	adds	r3, r7, #7
   12fa2:	1c22      	adds	r2, r4, #0
   12fa4:	701a      	strb	r2, [r3, #0]
   12fa6:	1dbb      	adds	r3, r7, #6
   12fa8:	1c02      	adds	r2, r0, #0
   12faa:	701a      	strb	r2, [r3, #0]
   12fac:	1d7b      	adds	r3, r7, #5
   12fae:	1c0a      	adds	r2, r1, #0
   12fb0:	701a      	strb	r2, [r3, #0]
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
   12fb2:	1dfb      	adds	r3, r7, #7
   12fb4:	781b      	ldrb	r3, [r3, #0]
   12fb6:	2b3f      	cmp	r3, #63	; 0x3f
   12fb8:	d85d      	bhi.n	13076 <gfx_mono_ssd1306_draw_pixel+0xe2>
   12fba:	1dbb      	adds	r3, r7, #6
   12fbc:	781b      	ldrb	r3, [r3, #0]
   12fbe:	2b2f      	cmp	r3, #47	; 0x2f
   12fc0:	d859      	bhi.n	13076 <gfx_mono_ssd1306_draw_pixel+0xe2>
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
   12fc2:	230e      	movs	r3, #14
   12fc4:	18fb      	adds	r3, r7, r3
   12fc6:	1dba      	adds	r2, r7, #6
   12fc8:	7812      	ldrb	r2, [r2, #0]
   12fca:	08d2      	lsrs	r2, r2, #3
   12fcc:	701a      	strb	r2, [r3, #0]
	pixel_mask = (1 << (y - (page * 8)));
   12fce:	1dbb      	adds	r3, r7, #6
   12fd0:	781a      	ldrb	r2, [r3, #0]
   12fd2:	230e      	movs	r3, #14
   12fd4:	18fb      	adds	r3, r7, r3
   12fd6:	781b      	ldrb	r3, [r3, #0]
   12fd8:	00db      	lsls	r3, r3, #3
   12fda:	1ad3      	subs	r3, r2, r3
   12fdc:	2201      	movs	r2, #1
   12fde:	409a      	lsls	r2, r3
   12fe0:	230d      	movs	r3, #13
   12fe2:	18fb      	adds	r3, r7, r3
   12fe4:	701a      	strb	r2, [r3, #0]
	/*
	 * Read the page containing the pixel in interest, then perform the
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);
   12fe6:	230f      	movs	r3, #15
   12fe8:	18fc      	adds	r4, r7, r3
   12fea:	1dfb      	adds	r3, r7, #7
   12fec:	781a      	ldrb	r2, [r3, #0]
   12fee:	230e      	movs	r3, #14
   12ff0:	18fb      	adds	r3, r7, r3
   12ff2:	781b      	ldrb	r3, [r3, #0]
   12ff4:	0011      	movs	r1, r2
   12ff6:	0018      	movs	r0, r3
   12ff8:	4b21      	ldr	r3, [pc, #132]	; (13080 <gfx_mono_ssd1306_draw_pixel+0xec>)
   12ffa:	4798      	blx	r3
   12ffc:	0003      	movs	r3, r0
   12ffe:	7023      	strb	r3, [r4, #0]

	switch (color) {
   13000:	1d7b      	adds	r3, r7, #5
   13002:	781b      	ldrb	r3, [r3, #0]
   13004:	2b01      	cmp	r3, #1
   13006:	d004      	beq.n	13012 <gfx_mono_ssd1306_draw_pixel+0x7e>
   13008:	2b02      	cmp	r3, #2
   1300a:	d01d      	beq.n	13048 <gfx_mono_ssd1306_draw_pixel+0xb4>
   1300c:	2b00      	cmp	r3, #0
   1300e:	d00b      	beq.n	13028 <gfx_mono_ssd1306_draw_pixel+0x94>
	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
		break;

	default:
		break;
   13010:	e025      	b.n	1305e <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value |= pixel_mask;
   13012:	230f      	movs	r3, #15
   13014:	18fb      	adds	r3, r7, r3
   13016:	220f      	movs	r2, #15
   13018:	18b9      	adds	r1, r7, r2
   1301a:	220d      	movs	r2, #13
   1301c:	18ba      	adds	r2, r7, r2
   1301e:	7809      	ldrb	r1, [r1, #0]
   13020:	7812      	ldrb	r2, [r2, #0]
   13022:	430a      	orrs	r2, r1
   13024:	701a      	strb	r2, [r3, #0]
		break;
   13026:	e01a      	b.n	1305e <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value &= ~pixel_mask;
   13028:	230d      	movs	r3, #13
   1302a:	18fb      	adds	r3, r7, r3
   1302c:	781b      	ldrb	r3, [r3, #0]
   1302e:	b25b      	sxtb	r3, r3
   13030:	43db      	mvns	r3, r3
   13032:	b25b      	sxtb	r3, r3
   13034:	220f      	movs	r2, #15
   13036:	18ba      	adds	r2, r7, r2
   13038:	7812      	ldrb	r2, [r2, #0]
   1303a:	b252      	sxtb	r2, r2
   1303c:	4013      	ands	r3, r2
   1303e:	b25a      	sxtb	r2, r3
   13040:	230f      	movs	r3, #15
   13042:	18fb      	adds	r3, r7, r3
   13044:	701a      	strb	r2, [r3, #0]
		break;
   13046:	e00a      	b.n	1305e <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value ^= pixel_mask;
   13048:	230f      	movs	r3, #15
   1304a:	18fb      	adds	r3, r7, r3
   1304c:	220f      	movs	r2, #15
   1304e:	18b9      	adds	r1, r7, r2
   13050:	220d      	movs	r2, #13
   13052:	18ba      	adds	r2, r7, r2
   13054:	7809      	ldrb	r1, [r1, #0]
   13056:	7812      	ldrb	r2, [r2, #0]
   13058:	404a      	eors	r2, r1
   1305a:	701a      	strb	r2, [r3, #0]
		break;
   1305c:	46c0      	nop			; (mov r8, r8)
	}

	gfx_mono_put_byte(page, x, pixel_value);
   1305e:	230f      	movs	r3, #15
   13060:	18fb      	adds	r3, r7, r3
   13062:	781a      	ldrb	r2, [r3, #0]
   13064:	1dfb      	adds	r3, r7, #7
   13066:	7819      	ldrb	r1, [r3, #0]
   13068:	230e      	movs	r3, #14
   1306a:	18fb      	adds	r3, r7, r3
   1306c:	7818      	ldrb	r0, [r3, #0]
   1306e:	2300      	movs	r3, #0
   13070:	4c04      	ldr	r4, [pc, #16]	; (13084 <gfx_mono_ssd1306_draw_pixel+0xf0>)
   13072:	47a0      	blx	r4
   13074:	e000      	b.n	13078 <gfx_mono_ssd1306_draw_pixel+0xe4>
		return;
   13076:	46c0      	nop			; (mov r8, r8)
}
   13078:	46bd      	mov	sp, r7
   1307a:	b005      	add	sp, #20
   1307c:	bd90      	pop	{r4, r7, pc}
   1307e:	46c0      	nop			; (mov r8, r8)
   13080:	00013129 	.word	0x00013129
   13084:	00013089 	.word	0x00013089

00013088 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
   13088:	b5b0      	push	{r4, r5, r7, lr}
   1308a:	b082      	sub	sp, #8
   1308c:	af00      	add	r7, sp, #0
   1308e:	0005      	movs	r5, r0
   13090:	000c      	movs	r4, r1
   13092:	0010      	movs	r0, r2
   13094:	0019      	movs	r1, r3
   13096:	1dfb      	adds	r3, r7, #7
   13098:	1c2a      	adds	r2, r5, #0
   1309a:	701a      	strb	r2, [r3, #0]
   1309c:	1dbb      	adds	r3, r7, #6
   1309e:	1c22      	adds	r2, r4, #0
   130a0:	701a      	strb	r2, [r3, #0]
   130a2:	1d7b      	adds	r3, r7, #5
   130a4:	1c02      	adds	r2, r0, #0
   130a6:	701a      	strb	r2, [r3, #0]
   130a8:	1d3b      	adds	r3, r7, #4
   130aa:	1c0a      	adds	r2, r1, #0
   130ac:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
   130ae:	1d3b      	adds	r3, r7, #4
   130b0:	781b      	ldrb	r3, [r3, #0]
   130b2:	2201      	movs	r2, #1
   130b4:	4053      	eors	r3, r2
   130b6:	b2db      	uxtb	r3, r3
   130b8:	2b00      	cmp	r3, #0
   130ba:	d00d      	beq.n	130d8 <gfx_mono_ssd1306_put_byte+0x50>
   130bc:	1dbb      	adds	r3, r7, #6
   130be:	781a      	ldrb	r2, [r3, #0]
   130c0:	1dfb      	adds	r3, r7, #7
   130c2:	781b      	ldrb	r3, [r3, #0]
   130c4:	0011      	movs	r1, r2
   130c6:	0018      	movs	r0, r3
   130c8:	4b12      	ldr	r3, [pc, #72]	; (13114 <gfx_mono_ssd1306_put_byte+0x8c>)
   130ca:	4798      	blx	r3
   130cc:	0003      	movs	r3, r0
   130ce:	001a      	movs	r2, r3
   130d0:	1d7b      	adds	r3, r7, #5
   130d2:	781b      	ldrb	r3, [r3, #0]
   130d4:	4293      	cmp	r3, r2
   130d6:	d018      	beq.n	1310a <gfx_mono_ssd1306_put_byte+0x82>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
   130d8:	1d7b      	adds	r3, r7, #5
   130da:	781a      	ldrb	r2, [r3, #0]
   130dc:	1dbb      	adds	r3, r7, #6
   130de:	7819      	ldrb	r1, [r3, #0]
   130e0:	1dfb      	adds	r3, r7, #7
   130e2:	781b      	ldrb	r3, [r3, #0]
   130e4:	0018      	movs	r0, r3
   130e6:	4b0c      	ldr	r3, [pc, #48]	; (13118 <gfx_mono_ssd1306_put_byte+0x90>)
   130e8:	4798      	blx	r3
#endif

	ssd1306_set_page_address(page);
   130ea:	1dfb      	adds	r3, r7, #7
   130ec:	781b      	ldrb	r3, [r3, #0]
   130ee:	0018      	movs	r0, r3
   130f0:	4b0a      	ldr	r3, [pc, #40]	; (1311c <gfx_mono_ssd1306_put_byte+0x94>)
   130f2:	4798      	blx	r3
	ssd1306_set_column_address(column);
   130f4:	1dbb      	adds	r3, r7, #6
   130f6:	781b      	ldrb	r3, [r3, #0]
   130f8:	0018      	movs	r0, r3
   130fa:	4b09      	ldr	r3, [pc, #36]	; (13120 <gfx_mono_ssd1306_put_byte+0x98>)
   130fc:	4798      	blx	r3

	ssd1306_write_data(data);
   130fe:	1d7b      	adds	r3, r7, #5
   13100:	781b      	ldrb	r3, [r3, #0]
   13102:	0018      	movs	r0, r3
   13104:	4b07      	ldr	r3, [pc, #28]	; (13124 <gfx_mono_ssd1306_put_byte+0x9c>)
   13106:	4798      	blx	r3
   13108:	e000      	b.n	1310c <gfx_mono_ssd1306_put_byte+0x84>
		return;
   1310a:	46c0      	nop			; (mov r8, r8)
}
   1310c:	46bd      	mov	sp, r7
   1310e:	b002      	add	sp, #8
   13110:	bdb0      	pop	{r4, r5, r7, pc}
   13112:	46c0      	nop			; (mov r8, r8)
   13114:	000122e1 	.word	0x000122e1
   13118:	0001229d 	.word	0x0001229d
   1311c:	00012e61 	.word	0x00012e61
   13120:	00012e99 	.word	0x00012e99
   13124:	00012229 	.word	0x00012229

00013128 <gfx_mono_ssd1306_get_byte>:
 * \code
	data = gfx_mono_ssd1306_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
   13128:	b580      	push	{r7, lr}
   1312a:	b082      	sub	sp, #8
   1312c:	af00      	add	r7, sp, #0
   1312e:	0002      	movs	r2, r0
   13130:	1dfb      	adds	r3, r7, #7
   13132:	701a      	strb	r2, [r3, #0]
   13134:	1dbb      	adds	r3, r7, #6
   13136:	1c0a      	adds	r2, r1, #0
   13138:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
   1313a:	1dbb      	adds	r3, r7, #6
   1313c:	781a      	ldrb	r2, [r3, #0]
   1313e:	1dfb      	adds	r3, r7, #7
   13140:	781b      	ldrb	r3, [r3, #0]
   13142:	0011      	movs	r1, r2
   13144:	0018      	movs	r0, r3
   13146:	4b03      	ldr	r3, [pc, #12]	; (13154 <gfx_mono_ssd1306_get_byte+0x2c>)
   13148:	4798      	blx	r3
   1314a:	0003      	movs	r3, r0
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
   1314c:	0018      	movs	r0, r3
   1314e:	46bd      	mov	sp, r7
   13150:	b002      	add	sp, #8
   13152:	bd80      	pop	{r7, pc}
   13154:	000122e1 	.word	0x000122e1

00013158 <gfx_mono_ssd1306_mask_byte>:
	gfx_mono_ssd1306_mask_byte(0,0,0xAA,GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_mask_byte(gfx_coord_t page, gfx_coord_t column,
		gfx_mono_color_t pixel_mask, gfx_mono_color_t color)
{
   13158:	b5b0      	push	{r4, r5, r7, lr}
   1315a:	b084      	sub	sp, #16
   1315c:	af00      	add	r7, sp, #0
   1315e:	0005      	movs	r5, r0
   13160:	000c      	movs	r4, r1
   13162:	0010      	movs	r0, r2
   13164:	0019      	movs	r1, r3
   13166:	1dfb      	adds	r3, r7, #7
   13168:	1c2a      	adds	r2, r5, #0
   1316a:	701a      	strb	r2, [r3, #0]
   1316c:	1dbb      	adds	r3, r7, #6
   1316e:	1c22      	adds	r2, r4, #0
   13170:	701a      	strb	r2, [r3, #0]
   13172:	1d7b      	adds	r3, r7, #5
   13174:	1c02      	adds	r2, r0, #0
   13176:	701a      	strb	r2, [r3, #0]
   13178:	1d3b      	adds	r3, r7, #4
   1317a:	1c0a      	adds	r2, r1, #0
   1317c:	701a      	strb	r2, [r3, #0]
	gfx_mono_color_t temp = gfx_mono_get_byte(page, column);
   1317e:	230f      	movs	r3, #15
   13180:	18fc      	adds	r4, r7, r3
   13182:	1dbb      	adds	r3, r7, #6
   13184:	781a      	ldrb	r2, [r3, #0]
   13186:	1dfb      	adds	r3, r7, #7
   13188:	781b      	ldrb	r3, [r3, #0]
   1318a:	0011      	movs	r1, r2
   1318c:	0018      	movs	r0, r3
   1318e:	4b1f      	ldr	r3, [pc, #124]	; (1320c <gfx_mono_ssd1306_mask_byte+0xb4>)
   13190:	4798      	blx	r3
   13192:	0003      	movs	r3, r0
   13194:	7023      	strb	r3, [r4, #0]

	switch (color) {
   13196:	1d3b      	adds	r3, r7, #4
   13198:	781b      	ldrb	r3, [r3, #0]
   1319a:	2b01      	cmp	r3, #1
   1319c:	d004      	beq.n	131a8 <gfx_mono_ssd1306_mask_byte+0x50>
   1319e:	2b02      	cmp	r3, #2
   131a0:	d01b      	beq.n	131da <gfx_mono_ssd1306_mask_byte+0x82>
   131a2:	2b00      	cmp	r3, #0
   131a4:	d00a      	beq.n	131bc <gfx_mono_ssd1306_mask_byte+0x64>
	case GFX_PIXEL_XOR:
		temp ^= pixel_mask;
		break;

	default:
		break;
   131a6:	e022      	b.n	131ee <gfx_mono_ssd1306_mask_byte+0x96>
		temp |= pixel_mask;
   131a8:	230f      	movs	r3, #15
   131aa:	18fb      	adds	r3, r7, r3
   131ac:	220f      	movs	r2, #15
   131ae:	18b9      	adds	r1, r7, r2
   131b0:	1d7a      	adds	r2, r7, #5
   131b2:	7809      	ldrb	r1, [r1, #0]
   131b4:	7812      	ldrb	r2, [r2, #0]
   131b6:	430a      	orrs	r2, r1
   131b8:	701a      	strb	r2, [r3, #0]
		break;
   131ba:	e018      	b.n	131ee <gfx_mono_ssd1306_mask_byte+0x96>
		temp &= ~pixel_mask;
   131bc:	1d7b      	adds	r3, r7, #5
   131be:	781b      	ldrb	r3, [r3, #0]
   131c0:	b25b      	sxtb	r3, r3
   131c2:	43db      	mvns	r3, r3
   131c4:	b25b      	sxtb	r3, r3
   131c6:	220f      	movs	r2, #15
   131c8:	18ba      	adds	r2, r7, r2
   131ca:	7812      	ldrb	r2, [r2, #0]
   131cc:	b252      	sxtb	r2, r2
   131ce:	4013      	ands	r3, r2
   131d0:	b25a      	sxtb	r2, r3
   131d2:	230f      	movs	r3, #15
   131d4:	18fb      	adds	r3, r7, r3
   131d6:	701a      	strb	r2, [r3, #0]
		break;
   131d8:	e009      	b.n	131ee <gfx_mono_ssd1306_mask_byte+0x96>
		temp ^= pixel_mask;
   131da:	230f      	movs	r3, #15
   131dc:	18fb      	adds	r3, r7, r3
   131de:	220f      	movs	r2, #15
   131e0:	18b9      	adds	r1, r7, r2
   131e2:	1d7a      	adds	r2, r7, #5
   131e4:	7809      	ldrb	r1, [r1, #0]
   131e6:	7812      	ldrb	r2, [r2, #0]
   131e8:	404a      	eors	r2, r1
   131ea:	701a      	strb	r2, [r3, #0]
		break;
   131ec:	46c0      	nop			; (mov r8, r8)
	}

	gfx_mono_put_byte(page, column, temp);
   131ee:	230f      	movs	r3, #15
   131f0:	18fb      	adds	r3, r7, r3
   131f2:	781a      	ldrb	r2, [r3, #0]
   131f4:	1dbb      	adds	r3, r7, #6
   131f6:	7819      	ldrb	r1, [r3, #0]
   131f8:	1dfb      	adds	r3, r7, #7
   131fa:	7818      	ldrb	r0, [r3, #0]
   131fc:	2300      	movs	r3, #0
   131fe:	4c04      	ldr	r4, [pc, #16]	; (13210 <gfx_mono_ssd1306_mask_byte+0xb8>)
   13200:	47a0      	blx	r4
}
   13202:	46c0      	nop			; (mov r8, r8)
   13204:	46bd      	mov	sp, r7
   13206:	b004      	add	sp, #16
   13208:	bdb0      	pop	{r4, r5, r7, pc}
   1320a:	46c0      	nop			; (mov r8, r8)
   1320c:	00013129 	.word	0x00013129
   13210:	00013089 	.word	0x00013089

00013214 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
   13214:	b580      	push	{r7, lr}
   13216:	b084      	sub	sp, #16
   13218:	af00      	add	r7, sp, #0
   1321a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
   1321c:	687b      	ldr	r3, [r7, #4]
   1321e:	681b      	ldr	r3, [r3, #0]
   13220:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   13222:	68fb      	ldr	r3, [r7, #12]
   13224:	7e5b      	ldrb	r3, [r3, #25]
   13226:	b2db      	uxtb	r3, r3
   13228:	b25b      	sxtb	r3, r3
   1322a:	2b00      	cmp	r3, #0
   1322c:	da01      	bge.n	13232 <adc_is_syncing+0x1e>
		return true;
   1322e:	2301      	movs	r3, #1
   13230:	e000      	b.n	13234 <adc_is_syncing+0x20>
	}

	return false;
   13232:	2300      	movs	r3, #0
}
   13234:	0018      	movs	r0, r3
   13236:	46bd      	mov	sp, r7
   13238:	b004      	add	sp, #16
   1323a:	bd80      	pop	{r7, pc}

0001323c <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
   1323c:	b580      	push	{r7, lr}
   1323e:	b084      	sub	sp, #16
   13240:	af00      	add	r7, sp, #0
   13242:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   13244:	687b      	ldr	r3, [r7, #4]
   13246:	681b      	ldr	r3, [r3, #0]
   13248:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   1324a:	46c0      	nop			; (mov r8, r8)
   1324c:	687b      	ldr	r3, [r7, #4]
   1324e:	0018      	movs	r0, r3
   13250:	4b0b      	ldr	r3, [pc, #44]	; (13280 <adc_start_conversion+0x44>)
   13252:	4798      	blx	r3
   13254:	1e03      	subs	r3, r0, #0
   13256:	d1f9      	bne.n	1324c <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   13258:	68fb      	ldr	r3, [r7, #12]
   1325a:	7b1b      	ldrb	r3, [r3, #12]
   1325c:	b2db      	uxtb	r3, r3
   1325e:	2202      	movs	r2, #2
   13260:	4313      	orrs	r3, r2
   13262:	b2da      	uxtb	r2, r3
   13264:	68fb      	ldr	r3, [r7, #12]
   13266:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
   13268:	46c0      	nop			; (mov r8, r8)
   1326a:	687b      	ldr	r3, [r7, #4]
   1326c:	0018      	movs	r0, r3
   1326e:	4b04      	ldr	r3, [pc, #16]	; (13280 <adc_start_conversion+0x44>)
   13270:	4798      	blx	r3
   13272:	1e03      	subs	r3, r0, #0
   13274:	d1f9      	bne.n	1326a <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
   13276:	46c0      	nop			; (mov r8, r8)
   13278:	46bd      	mov	sp, r7
   1327a:	b004      	add	sp, #16
   1327c:	bd80      	pop	{r7, pc}
   1327e:	46c0      	nop			; (mov r8, r8)
   13280:	00013215 	.word	0x00013215

00013284 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   13284:	b580      	push	{r7, lr}
   13286:	b084      	sub	sp, #16
   13288:	af00      	add	r7, sp, #0
   1328a:	6078      	str	r0, [r7, #4]
   1328c:	000a      	movs	r2, r1
   1328e:	1cfb      	adds	r3, r7, #3
   13290:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   13292:	687b      	ldr	r3, [r7, #4]
   13294:	681b      	ldr	r3, [r3, #0]
   13296:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
   13298:	68fb      	ldr	r3, [r7, #12]
   1329a:	1cfa      	adds	r2, r7, #3
   1329c:	7812      	ldrb	r2, [r2, #0]
   1329e:	759a      	strb	r2, [r3, #22]
}
   132a0:	46c0      	nop			; (mov r8, r8)
   132a2:	46bd      	mov	sp, r7
   132a4:	b004      	add	sp, #16
   132a6:	bd80      	pop	{r7, pc}

000132a8 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
   132a8:	b580      	push	{r7, lr}
   132aa:	b084      	sub	sp, #16
   132ac:	af00      	add	r7, sp, #0
   132ae:	0002      	movs	r2, r0
   132b0:	1dfb      	adds	r3, r7, #7
   132b2:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
   132b4:	1dfb      	adds	r3, r7, #7
   132b6:	781a      	ldrb	r2, [r3, #0]
   132b8:	4b47      	ldr	r3, [pc, #284]	; (133d8 <_adc_interrupt_handler+0x130>)
   132ba:	0092      	lsls	r2, r2, #2
   132bc:	58d3      	ldr	r3, [r2, r3]
   132be:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
   132c0:	68fb      	ldr	r3, [r7, #12]
   132c2:	681b      	ldr	r3, [r3, #0]
   132c4:	7e1b      	ldrb	r3, [r3, #24]
   132c6:	b2da      	uxtb	r2, r3
   132c8:	68fb      	ldr	r3, [r7, #12]
   132ca:	681b      	ldr	r3, [r3, #0]
   132cc:	7ddb      	ldrb	r3, [r3, #23]
   132ce:	b2db      	uxtb	r3, r3
   132d0:	4013      	ands	r3, r2
   132d2:	b2db      	uxtb	r3, r3
   132d4:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
   132d6:	68bb      	ldr	r3, [r7, #8]
   132d8:	2201      	movs	r2, #1
   132da:	4013      	ands	r3, r2
   132dc:	d045      	beq.n	1336a <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   132de:	68fb      	ldr	r3, [r7, #12]
   132e0:	681b      	ldr	r3, [r3, #0]
   132e2:	2201      	movs	r2, #1
   132e4:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
   132e6:	46c0      	nop			; (mov r8, r8)
   132e8:	68fb      	ldr	r3, [r7, #12]
   132ea:	0018      	movs	r0, r3
   132ec:	4b3b      	ldr	r3, [pc, #236]	; (133dc <_adc_interrupt_handler+0x134>)
   132ee:	4798      	blx	r3
   132f0:	1e03      	subs	r3, r0, #0
   132f2:	d1f9      	bne.n	132e8 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
   132f4:	68fb      	ldr	r3, [r7, #12]
   132f6:	695b      	ldr	r3, [r3, #20]
   132f8:	1c99      	adds	r1, r3, #2
   132fa:	68fa      	ldr	r2, [r7, #12]
   132fc:	6151      	str	r1, [r2, #20]
   132fe:	68fa      	ldr	r2, [r7, #12]
   13300:	6812      	ldr	r2, [r2, #0]
   13302:	8b52      	ldrh	r2, [r2, #26]
   13304:	b292      	uxth	r2, r2
   13306:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
   13308:	68fb      	ldr	r3, [r7, #12]
   1330a:	8b1b      	ldrh	r3, [r3, #24]
   1330c:	b29b      	uxth	r3, r3
   1330e:	3b01      	subs	r3, #1
   13310:	b29b      	uxth	r3, r3
   13312:	68fa      	ldr	r2, [r7, #12]
   13314:	1c19      	adds	r1, r3, #0
   13316:	8311      	strh	r1, [r2, #24]
   13318:	2b00      	cmp	r3, #0
   1331a:	d008      	beq.n	1332e <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
   1331c:	68fb      	ldr	r3, [r7, #12]
   1331e:	7f5b      	ldrb	r3, [r3, #29]
   13320:	2b00      	cmp	r3, #0
   13322:	d022      	beq.n	1336a <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
   13324:	68fb      	ldr	r3, [r7, #12]
   13326:	0018      	movs	r0, r3
   13328:	4b2d      	ldr	r3, [pc, #180]	; (133e0 <_adc_interrupt_handler+0x138>)
   1332a:	4798      	blx	r3
   1332c:	e01d      	b.n	1336a <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
   1332e:	68fb      	ldr	r3, [r7, #12]
   13330:	2101      	movs	r1, #1
   13332:	0018      	movs	r0, r3
   13334:	4b2b      	ldr	r3, [pc, #172]	; (133e4 <_adc_interrupt_handler+0x13c>)
   13336:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
   13338:	68fb      	ldr	r3, [r7, #12]
   1333a:	7f1b      	ldrb	r3, [r3, #28]
   1333c:	b2db      	uxtb	r3, r3
   1333e:	2b05      	cmp	r3, #5
   13340:	d113      	bne.n	1336a <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
   13342:	68fb      	ldr	r3, [r7, #12]
   13344:	2200      	movs	r2, #0
   13346:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
   13348:	68fb      	ldr	r3, [r7, #12]
   1334a:	7edb      	ldrb	r3, [r3, #27]
   1334c:	001a      	movs	r2, r3
   1334e:	2301      	movs	r3, #1
   13350:	4013      	ands	r3, r2
   13352:	d00a      	beq.n	1336a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
   13354:	68fb      	ldr	r3, [r7, #12]
   13356:	7e9b      	ldrb	r3, [r3, #26]
   13358:	001a      	movs	r2, r3
   1335a:	2301      	movs	r3, #1
   1335c:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
   1335e:	d004      	beq.n	1336a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
   13360:	68fb      	ldr	r3, [r7, #12]
   13362:	689b      	ldr	r3, [r3, #8]
   13364:	68fa      	ldr	r2, [r7, #12]
   13366:	0010      	movs	r0, r2
   13368:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
   1336a:	68bb      	ldr	r3, [r7, #8]
   1336c:	2204      	movs	r2, #4
   1336e:	4013      	ands	r3, r2
   13370:	d014      	beq.n	1339c <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
   13372:	68fb      	ldr	r3, [r7, #12]
   13374:	681b      	ldr	r3, [r3, #0]
   13376:	2204      	movs	r2, #4
   13378:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   1337a:	68fb      	ldr	r3, [r7, #12]
   1337c:	7edb      	ldrb	r3, [r3, #27]
   1337e:	001a      	movs	r2, r3
   13380:	2302      	movs	r3, #2
   13382:	4013      	ands	r3, r2
   13384:	d00a      	beq.n	1339c <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
   13386:	68fb      	ldr	r3, [r7, #12]
   13388:	7e9b      	ldrb	r3, [r3, #26]
   1338a:	001a      	movs	r2, r3
   1338c:	2302      	movs	r3, #2
   1338e:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   13390:	d004      	beq.n	1339c <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
   13392:	68fb      	ldr	r3, [r7, #12]
   13394:	68db      	ldr	r3, [r3, #12]
   13396:	68fa      	ldr	r2, [r7, #12]
   13398:	0010      	movs	r0, r2
   1339a:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
   1339c:	68bb      	ldr	r3, [r7, #8]
   1339e:	2202      	movs	r2, #2
   133a0:	4013      	ands	r3, r2
   133a2:	d014      	beq.n	133ce <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   133a4:	68fb      	ldr	r3, [r7, #12]
   133a6:	681b      	ldr	r3, [r3, #0]
   133a8:	2202      	movs	r2, #2
   133aa:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   133ac:	68fb      	ldr	r3, [r7, #12]
   133ae:	7edb      	ldrb	r3, [r3, #27]
   133b0:	001a      	movs	r2, r3
   133b2:	2304      	movs	r3, #4
   133b4:	4013      	ands	r3, r2
   133b6:	d00a      	beq.n	133ce <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
   133b8:	68fb      	ldr	r3, [r7, #12]
   133ba:	7e9b      	ldrb	r3, [r3, #26]
   133bc:	001a      	movs	r2, r3
   133be:	2304      	movs	r3, #4
   133c0:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   133c2:	d004      	beq.n	133ce <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
   133c4:	68fb      	ldr	r3, [r7, #12]
   133c6:	691b      	ldr	r3, [r3, #16]
   133c8:	68fa      	ldr	r2, [r7, #12]
   133ca:	0010      	movs	r0, r2
   133cc:	4798      	blx	r3
		}
	}
}
   133ce:	46c0      	nop			; (mov r8, r8)
   133d0:	46bd      	mov	sp, r7
   133d2:	b004      	add	sp, #16
   133d4:	bd80      	pop	{r7, pc}
   133d6:	46c0      	nop			; (mov r8, r8)
   133d8:	20004780 	.word	0x20004780
   133dc:	00013215 	.word	0x00013215
   133e0:	0001323d 	.word	0x0001323d
   133e4:	00013285 	.word	0x00013285

000133e8 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
   133e8:	b580      	push	{r7, lr}
   133ea:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
   133ec:	2000      	movs	r0, #0
   133ee:	4b02      	ldr	r3, [pc, #8]	; (133f8 <ADC_Handler+0x10>)
   133f0:	4798      	blx	r3
}
   133f2:	46c0      	nop			; (mov r8, r8)
   133f4:	46bd      	mov	sp, r7
   133f6:	bd80      	pop	{r7, pc}
   133f8:	000132a9 	.word	0x000132a9

000133fc <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   133fc:	b580      	push	{r7, lr}
   133fe:	b082      	sub	sp, #8
   13400:	af00      	add	r7, sp, #0
   13402:	0002      	movs	r2, r0
   13404:	1dfb      	adds	r3, r7, #7
   13406:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   13408:	4a07      	ldr	r2, [pc, #28]	; (13428 <system_interrupt_disable+0x2c>)
   1340a:	1dfb      	adds	r3, r7, #7
   1340c:	781b      	ldrb	r3, [r3, #0]
   1340e:	0019      	movs	r1, r3
   13410:	231f      	movs	r3, #31
   13412:	400b      	ands	r3, r1
   13414:	2101      	movs	r1, #1
   13416:	4099      	lsls	r1, r3
   13418:	000b      	movs	r3, r1
   1341a:	0019      	movs	r1, r3
   1341c:	2380      	movs	r3, #128	; 0x80
   1341e:	50d1      	str	r1, [r2, r3]
}
   13420:	46c0      	nop			; (mov r8, r8)
   13422:	46bd      	mov	sp, r7
   13424:	b002      	add	sp, #8
   13426:	bd80      	pop	{r7, pc}
   13428:	e000e100 	.word	0xe000e100

0001342c <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
   1342c:	b580      	push	{r7, lr}
   1342e:	b084      	sub	sp, #16
   13430:	af00      	add	r7, sp, #0
   13432:	0002      	movs	r2, r0
   13434:	1dfb      	adds	r3, r7, #7
   13436:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
   13438:	1dfb      	adds	r3, r7, #7
   1343a:	781a      	ldrb	r2, [r3, #0]
   1343c:	4b37      	ldr	r3, [pc, #220]	; (1351c <_dac_interrupt_handler+0xf0>)
   1343e:	0092      	lsls	r2, r2, #2
   13440:	58d3      	ldr	r3, [r2, r3]
   13442:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
   13444:	68fb      	ldr	r3, [r7, #12]
   13446:	681b      	ldr	r3, [r3, #0]
   13448:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   1344a:	68bb      	ldr	r3, [r7, #8]
   1344c:	799b      	ldrb	r3, [r3, #6]
   1344e:	b2db      	uxtb	r3, r3
   13450:	001a      	movs	r2, r3
   13452:	2301      	movs	r3, #1
   13454:	4013      	ands	r3, r2
   13456:	d00e      	beq.n	13476 <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
   13458:	68bb      	ldr	r3, [r7, #8]
   1345a:	2201      	movs	r2, #1
   1345c:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
   1345e:	68fb      	ldr	r3, [r7, #12]
   13460:	3314      	adds	r3, #20
   13462:	2b00      	cmp	r3, #0
   13464:	d007      	beq.n	13476 <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
   13466:	68fb      	ldr	r3, [r7, #12]
   13468:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
   1346a:	2b00      	cmp	r3, #0
   1346c:	d003      	beq.n	13476 <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
   1346e:	68fb      	ldr	r3, [r7, #12]
   13470:	699b      	ldr	r3, [r3, #24]
   13472:	2000      	movs	r0, #0
   13474:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
   13476:	68bb      	ldr	r3, [r7, #8]
   13478:	799b      	ldrb	r3, [r3, #6]
   1347a:	b2db      	uxtb	r3, r3
   1347c:	001a      	movs	r2, r3
   1347e:	2302      	movs	r3, #2
   13480:	4013      	ands	r3, r2
   13482:	d047      	beq.n	13514 <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   13484:	68bb      	ldr	r3, [r7, #8]
   13486:	2202      	movs	r2, #2
   13488:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
   1348a:	68fb      	ldr	r3, [r7, #12]
   1348c:	899b      	ldrh	r3, [r3, #12]
   1348e:	b29b      	uxth	r3, r3
   13490:	2b00      	cmp	r3, #0
   13492:	d033      	beq.n	134fc <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
   13494:	68fb      	ldr	r3, [r7, #12]
   13496:	689a      	ldr	r2, [r3, #8]
   13498:	68fb      	ldr	r3, [r7, #12]
   1349a:	89db      	ldrh	r3, [r3, #14]
   1349c:	b29b      	uxth	r3, r3
   1349e:	1c59      	adds	r1, r3, #1
   134a0:	b288      	uxth	r0, r1
   134a2:	68f9      	ldr	r1, [r7, #12]
   134a4:	81c8      	strh	r0, [r1, #14]
   134a6:	005b      	lsls	r3, r3, #1
   134a8:	18d3      	adds	r3, r2, r3
   134aa:	881b      	ldrh	r3, [r3, #0]
   134ac:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
   134ae:	68bb      	ldr	r3, [r7, #8]
   134b0:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
   134b2:	68fb      	ldr	r3, [r7, #12]
   134b4:	899b      	ldrh	r3, [r3, #12]
   134b6:	b29b      	uxth	r3, r3
   134b8:	3b01      	subs	r3, #1
   134ba:	b29a      	uxth	r2, r3
   134bc:	68fb      	ldr	r3, [r7, #12]
   134be:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
   134c0:	68fb      	ldr	r3, [r7, #12]
   134c2:	899b      	ldrh	r3, [r3, #12]
   134c4:	b29b      	uxth	r3, r3
   134c6:	2b00      	cmp	r3, #0
   134c8:	d118      	bne.n	134fc <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
   134ca:	68fb      	ldr	r3, [r7, #12]
   134cc:	2220      	movs	r2, #32
   134ce:	2100      	movs	r1, #0
   134d0:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
   134d2:	68bb      	ldr	r3, [r7, #8]
   134d4:	2202      	movs	r2, #2
   134d6:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   134d8:	68bb      	ldr	r3, [r7, #8]
   134da:	2202      	movs	r2, #2
   134dc:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
   134de:	2019      	movs	r0, #25
   134e0:	4b0f      	ldr	r3, [pc, #60]	; (13520 <_dac_interrupt_handler+0xf4>)
   134e2:	4798      	blx	r3

				if ((module->callback) &&
   134e4:	68fb      	ldr	r3, [r7, #12]
   134e6:	3314      	adds	r3, #20
   134e8:	2b00      	cmp	r3, #0
   134ea:	d007      	beq.n	134fc <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
   134ec:	68fb      	ldr	r3, [r7, #12]
   134ee:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
   134f0:	2b00      	cmp	r3, #0
   134f2:	d003      	beq.n	134fc <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
   134f4:	68fb      	ldr	r3, [r7, #12]
   134f6:	69db      	ldr	r3, [r3, #28]
   134f8:	2000      	movs	r0, #0
   134fa:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
   134fc:	68fb      	ldr	r3, [r7, #12]
   134fe:	3314      	adds	r3, #20
   13500:	2b00      	cmp	r3, #0
   13502:	d007      	beq.n	13514 <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
   13504:	68fb      	ldr	r3, [r7, #12]
   13506:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
   13508:	2b00      	cmp	r3, #0
   1350a:	d003      	beq.n	13514 <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
   1350c:	68fb      	ldr	r3, [r7, #12]
   1350e:	695b      	ldr	r3, [r3, #20]
   13510:	2000      	movs	r0, #0
   13512:	4798      	blx	r3
		}
	}
}
   13514:	46c0      	nop			; (mov r8, r8)
   13516:	46bd      	mov	sp, r7
   13518:	b004      	add	sp, #16
   1351a:	bd80      	pop	{r7, pc}
   1351c:	20004784 	.word	0x20004784
   13520:	000133fd 	.word	0x000133fd

00013524 <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
   13524:	b580      	push	{r7, lr}
   13526:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
   13528:	2000      	movs	r0, #0
   1352a:	4b02      	ldr	r3, [pc, #8]	; (13534 <DAC_Handler+0x10>)
   1352c:	4798      	blx	r3
}
   1352e:	46c0      	nop			; (mov r8, r8)
   13530:	46bd      	mov	sp, r7
   13532:	bd80      	pop	{r7, pc}
   13534:	0001342d 	.word	0x0001342d

00013538 <system_interrupt_enter_critical_section>:
{
   13538:	b580      	push	{r7, lr}
   1353a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   1353c:	4b02      	ldr	r3, [pc, #8]	; (13548 <system_interrupt_enter_critical_section+0x10>)
   1353e:	4798      	blx	r3
}
   13540:	46c0      	nop			; (mov r8, r8)
   13542:	46bd      	mov	sp, r7
   13544:	bd80      	pop	{r7, pc}
   13546:	46c0      	nop			; (mov r8, r8)
   13548:	00026ded 	.word	0x00026ded

0001354c <system_interrupt_leave_critical_section>:
{
   1354c:	b580      	push	{r7, lr}
   1354e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   13550:	4b02      	ldr	r3, [pc, #8]	; (1355c <system_interrupt_leave_critical_section+0x10>)
   13552:	4798      	blx	r3
}
   13554:	46c0      	nop			; (mov r8, r8)
   13556:	46bd      	mov	sp, r7
   13558:	bd80      	pop	{r7, pc}
   1355a:	46c0      	nop			; (mov r8, r8)
   1355c:	00026e41 	.word	0x00026e41

00013560 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
   13560:	b580      	push	{r7, lr}
   13562:	b086      	sub	sp, #24
   13564:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
   13566:	4b49      	ldr	r3, [pc, #292]	; (1368c <DMAC_Handler+0x12c>)
   13568:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   1356a:	4b49      	ldr	r3, [pc, #292]	; (13690 <DMAC_Handler+0x130>)
   1356c:	8c1b      	ldrh	r3, [r3, #32]
   1356e:	b29b      	uxth	r3, r3
   13570:	b2da      	uxtb	r2, r3
   13572:	2317      	movs	r3, #23
   13574:	18fb      	adds	r3, r7, r3
   13576:	210f      	movs	r1, #15
   13578:	400a      	ands	r2, r1
   1357a:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
   1357c:	2317      	movs	r3, #23
   1357e:	18fb      	adds	r3, r7, r3
   13580:	781a      	ldrb	r2, [r3, #0]
   13582:	4b44      	ldr	r3, [pc, #272]	; (13694 <DMAC_Handler+0x134>)
   13584:	0092      	lsls	r2, r2, #2
   13586:	58d3      	ldr	r3, [r2, r3]
   13588:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
   1358a:	4a41      	ldr	r2, [pc, #260]	; (13690 <DMAC_Handler+0x130>)
   1358c:	693b      	ldr	r3, [r7, #16]
   1358e:	781b      	ldrb	r3, [r3, #0]
   13590:	210f      	movs	r1, #15
   13592:	400b      	ands	r3, r1
   13594:	b2d9      	uxtb	r1, r3
   13596:	233f      	movs	r3, #63	; 0x3f
   13598:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
   1359a:	493d      	ldr	r1, [pc, #244]	; (13690 <DMAC_Handler+0x130>)
   1359c:	230f      	movs	r3, #15
   1359e:	18fb      	adds	r3, r7, r3
   135a0:	224e      	movs	r2, #78	; 0x4e
   135a2:	5c8a      	ldrb	r2, [r1, r2]
   135a4:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   135a6:	693b      	ldr	r3, [r7, #16]
   135a8:	781b      	ldrb	r3, [r3, #0]
   135aa:	4a3b      	ldr	r2, [pc, #236]	; (13698 <DMAC_Handler+0x138>)
   135ac:	011b      	lsls	r3, r3, #4
   135ae:	18d3      	adds	r3, r2, r3
   135b0:	3302      	adds	r3, #2
   135b2:	881b      	ldrh	r3, [r3, #0]
   135b4:	b29b      	uxth	r3, r3
   135b6:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   135b8:	693b      	ldr	r3, [r7, #16]
   135ba:	781b      	ldrb	r3, [r3, #0]
   135bc:	4a37      	ldr	r2, [pc, #220]	; (1369c <DMAC_Handler+0x13c>)
   135be:	011b      	lsls	r3, r3, #4
   135c0:	18d3      	adds	r3, r2, r3
   135c2:	3302      	adds	r3, #2
   135c4:	881b      	ldrh	r3, [r3, #0]
   135c6:	b29b      	uxth	r3, r3
   135c8:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
   135ca:	68ba      	ldr	r2, [r7, #8]
   135cc:	687b      	ldr	r3, [r7, #4]
   135ce:	1ad2      	subs	r2, r2, r3
   135d0:	693b      	ldr	r3, [r7, #16]
   135d2:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
   135d4:	230f      	movs	r3, #15
   135d6:	18fb      	adds	r3, r7, r3
   135d8:	781b      	ldrb	r3, [r3, #0]
   135da:	2201      	movs	r2, #1
   135dc:	4013      	ands	r3, r2
   135de:	d016      	beq.n	1360e <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
   135e0:	4a2b      	ldr	r2, [pc, #172]	; (13690 <DMAC_Handler+0x130>)
   135e2:	234e      	movs	r3, #78	; 0x4e
   135e4:	2101      	movs	r1, #1
   135e6:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
   135e8:	693b      	ldr	r3, [r7, #16]
   135ea:	2210      	movs	r2, #16
   135ec:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   135ee:	693b      	ldr	r3, [r7, #16]
   135f0:	7c1b      	ldrb	r3, [r3, #16]
   135f2:	001a      	movs	r2, r3
   135f4:	2301      	movs	r3, #1
   135f6:	4013      	ands	r3, r2
   135f8:	d042      	beq.n	13680 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
   135fa:	693b      	ldr	r3, [r7, #16]
   135fc:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   135fe:	2b00      	cmp	r3, #0
   13600:	d03e      	beq.n	13680 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
   13602:	693b      	ldr	r3, [r7, #16]
   13604:	685b      	ldr	r3, [r3, #4]
   13606:	693a      	ldr	r2, [r7, #16]
   13608:	0010      	movs	r0, r2
   1360a:	4798      	blx	r3
   1360c:	e038      	b.n	13680 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
   1360e:	230f      	movs	r3, #15
   13610:	18fb      	adds	r3, r7, r3
   13612:	781b      	ldrb	r3, [r3, #0]
   13614:	2202      	movs	r2, #2
   13616:	4013      	ands	r3, r2
   13618:	d016      	beq.n	13648 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
   1361a:	4a1d      	ldr	r2, [pc, #116]	; (13690 <DMAC_Handler+0x130>)
   1361c:	234e      	movs	r3, #78	; 0x4e
   1361e:	2102      	movs	r1, #2
   13620:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
   13622:	693b      	ldr	r3, [r7, #16]
   13624:	2200      	movs	r2, #0
   13626:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   13628:	693b      	ldr	r3, [r7, #16]
   1362a:	7c1b      	ldrb	r3, [r3, #16]
   1362c:	001a      	movs	r2, r3
   1362e:	2302      	movs	r3, #2
   13630:	4013      	ands	r3, r2
   13632:	d025      	beq.n	13680 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
   13634:	693b      	ldr	r3, [r7, #16]
   13636:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   13638:	2b00      	cmp	r3, #0
   1363a:	d021      	beq.n	13680 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
   1363c:	693b      	ldr	r3, [r7, #16]
   1363e:	689b      	ldr	r3, [r3, #8]
   13640:	693a      	ldr	r2, [r7, #16]
   13642:	0010      	movs	r0, r2
   13644:	4798      	blx	r3
   13646:	e01b      	b.n	13680 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
   13648:	230f      	movs	r3, #15
   1364a:	18fb      	adds	r3, r7, r3
   1364c:	781b      	ldrb	r3, [r3, #0]
   1364e:	2204      	movs	r2, #4
   13650:	4013      	ands	r3, r2
   13652:	d015      	beq.n	13680 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
   13654:	4a0e      	ldr	r2, [pc, #56]	; (13690 <DMAC_Handler+0x130>)
   13656:	234e      	movs	r3, #78	; 0x4e
   13658:	2104      	movs	r1, #4
   1365a:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
   1365c:	693b      	ldr	r3, [r7, #16]
   1365e:	2206      	movs	r2, #6
   13660:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   13662:	693b      	ldr	r3, [r7, #16]
   13664:	7c1b      	ldrb	r3, [r3, #16]
   13666:	001a      	movs	r2, r3
   13668:	2304      	movs	r3, #4
   1366a:	4013      	ands	r3, r2
   1366c:	d008      	beq.n	13680 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
   1366e:	693b      	ldr	r3, [r7, #16]
   13670:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   13672:	2b00      	cmp	r3, #0
   13674:	d004      	beq.n	13680 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
   13676:	693b      	ldr	r3, [r7, #16]
   13678:	68db      	ldr	r3, [r3, #12]
   1367a:	693a      	ldr	r2, [r7, #16]
   1367c:	0010      	movs	r0, r2
   1367e:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
   13680:	4b07      	ldr	r3, [pc, #28]	; (136a0 <DMAC_Handler+0x140>)
   13682:	4798      	blx	r3
}
   13684:	46c0      	nop			; (mov r8, r8)
   13686:	46bd      	mov	sp, r7
   13688:	b006      	add	sp, #24
   1368a:	bd80      	pop	{r7, pc}
   1368c:	00013539 	.word	0x00013539
   13690:	41004800 	.word	0x41004800
   13694:	200004f0 	.word	0x200004f0
   13698:	20004790 	.word	0x20004790
   1369c:	200004a0 	.word	0x200004a0
   136a0:	0001354d 	.word	0x0001354d

000136a4 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   136a4:	b580      	push	{r7, lr}
   136a6:	b082      	sub	sp, #8
   136a8:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
   136aa:	4b15      	ldr	r3, [pc, #84]	; (13700 <EVSYS_Handler+0x5c>)
   136ac:	691b      	ldr	r3, [r3, #16]
   136ae:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   136b0:	4b14      	ldr	r3, [pc, #80]	; (13704 <EVSYS_Handler+0x60>)
   136b2:	699b      	ldr	r3, [r3, #24]
   136b4:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
   136b6:	4b12      	ldr	r3, [pc, #72]	; (13700 <EVSYS_Handler+0x5c>)
   136b8:	689a      	ldr	r2, [r3, #8]
   136ba:	683b      	ldr	r3, [r7, #0]
   136bc:	431a      	orrs	r2, r3
   136be:	4b10      	ldr	r3, [pc, #64]	; (13700 <EVSYS_Handler+0x5c>)
   136c0:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   136c2:	4b10      	ldr	r3, [pc, #64]	; (13704 <EVSYS_Handler+0x60>)
   136c4:	4a10      	ldr	r2, [pc, #64]	; (13708 <EVSYS_Handler+0x64>)
   136c6:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   136c8:	e008      	b.n	136dc <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
   136ca:	687b      	ldr	r3, [r7, #4]
   136cc:	685a      	ldr	r2, [r3, #4]
   136ce:	687b      	ldr	r3, [r7, #4]
   136d0:	681b      	ldr	r3, [r3, #0]
   136d2:	0018      	movs	r0, r3
   136d4:	4790      	blx	r2
		current_hook = current_hook->next;
   136d6:	687b      	ldr	r3, [r7, #4]
   136d8:	689b      	ldr	r3, [r3, #8]
   136da:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
   136dc:	687b      	ldr	r3, [r7, #4]
   136de:	2b00      	cmp	r3, #0
   136e0:	d1f3      	bne.n	136ca <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   136e2:	4b07      	ldr	r3, [pc, #28]	; (13700 <EVSYS_Handler+0x5c>)
   136e4:	68db      	ldr	r3, [r3, #12]
   136e6:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
   136e8:	4b05      	ldr	r3, [pc, #20]	; (13700 <EVSYS_Handler+0x5c>)
   136ea:	689b      	ldr	r3, [r3, #8]
   136ec:	683a      	ldr	r2, [r7, #0]
   136ee:	43d2      	mvns	r2, r2
   136f0:	401a      	ands	r2, r3
   136f2:	4b03      	ldr	r3, [pc, #12]	; (13700 <EVSYS_Handler+0x5c>)
   136f4:	609a      	str	r2, [r3, #8]
}
   136f6:	46c0      	nop			; (mov r8, r8)
   136f8:	46bd      	mov	sp, r7
   136fa:	b002      	add	sp, #8
   136fc:	bd80      	pop	{r7, pc}
   136fe:	46c0      	nop			; (mov r8, r8)
   13700:	2000000c 	.word	0x2000000c
   13704:	42000400 	.word	0x42000400
   13708:	0f0fffff 	.word	0x0f0fffff

0001370c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   1370c:	b580      	push	{r7, lr}
   1370e:	b082      	sub	sp, #8
   13710:	af00      	add	r7, sp, #0
   13712:	0002      	movs	r2, r0
   13714:	6039      	str	r1, [r7, #0]
   13716:	1dfb      	adds	r3, r7, #7
   13718:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1371a:	1dfb      	adds	r3, r7, #7
   1371c:	781b      	ldrb	r3, [r3, #0]
   1371e:	2b01      	cmp	r3, #1
   13720:	d00a      	beq.n	13738 <system_apb_clock_set_mask+0x2c>
   13722:	2b02      	cmp	r3, #2
   13724:	d00f      	beq.n	13746 <system_apb_clock_set_mask+0x3a>
   13726:	2b00      	cmp	r3, #0
   13728:	d114      	bne.n	13754 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   1372a:	4b0e      	ldr	r3, [pc, #56]	; (13764 <system_apb_clock_set_mask+0x58>)
   1372c:	4a0d      	ldr	r2, [pc, #52]	; (13764 <system_apb_clock_set_mask+0x58>)
   1372e:	6991      	ldr	r1, [r2, #24]
   13730:	683a      	ldr	r2, [r7, #0]
   13732:	430a      	orrs	r2, r1
   13734:	619a      	str	r2, [r3, #24]
			break;
   13736:	e00f      	b.n	13758 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   13738:	4b0a      	ldr	r3, [pc, #40]	; (13764 <system_apb_clock_set_mask+0x58>)
   1373a:	4a0a      	ldr	r2, [pc, #40]	; (13764 <system_apb_clock_set_mask+0x58>)
   1373c:	69d1      	ldr	r1, [r2, #28]
   1373e:	683a      	ldr	r2, [r7, #0]
   13740:	430a      	orrs	r2, r1
   13742:	61da      	str	r2, [r3, #28]
			break;
   13744:	e008      	b.n	13758 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   13746:	4b07      	ldr	r3, [pc, #28]	; (13764 <system_apb_clock_set_mask+0x58>)
   13748:	4a06      	ldr	r2, [pc, #24]	; (13764 <system_apb_clock_set_mask+0x58>)
   1374a:	6a11      	ldr	r1, [r2, #32]
   1374c:	683a      	ldr	r2, [r7, #0]
   1374e:	430a      	orrs	r2, r1
   13750:	621a      	str	r2, [r3, #32]
			break;
   13752:	e001      	b.n	13758 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   13754:	2317      	movs	r3, #23
   13756:	e000      	b.n	1375a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   13758:	2300      	movs	r3, #0
}
   1375a:	0018      	movs	r0, r3
   1375c:	46bd      	mov	sp, r7
   1375e:	b002      	add	sp, #8
   13760:	bd80      	pop	{r7, pc}
   13762:	46c0      	nop			; (mov r8, r8)
   13764:	40000400 	.word	0x40000400

00013768 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
   13768:	b580      	push	{r7, lr}
   1376a:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
   1376c:	2102      	movs	r1, #2
   1376e:	2002      	movs	r0, #2
   13770:	4b07      	ldr	r3, [pc, #28]	; (13790 <_system_events_init+0x28>)
   13772:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   13774:	4b07      	ldr	r3, [pc, #28]	; (13794 <_system_events_init+0x2c>)
   13776:	2201      	movs	r2, #1
   13778:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   1377a:	46c0      	nop			; (mov r8, r8)
   1377c:	4b05      	ldr	r3, [pc, #20]	; (13794 <_system_events_init+0x2c>)
   1377e:	781b      	ldrb	r3, [r3, #0]
   13780:	b2db      	uxtb	r3, r3
   13782:	001a      	movs	r2, r3
   13784:	2301      	movs	r3, #1
   13786:	4013      	ands	r3, r2
   13788:	d1f8      	bne.n	1377c <_system_events_init+0x14>
	}
}
   1378a:	46c0      	nop			; (mov r8, r8)
   1378c:	46bd      	mov	sp, r7
   1378e:	bd80      	pop	{r7, pc}
   13790:	0001370d 	.word	0x0001370d
   13794:	42000400 	.word	0x42000400

00013798 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
   13798:	b580      	push	{r7, lr}
   1379a:	b084      	sub	sp, #16
   1379c:	af00      	add	r7, sp, #0
   1379e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   137a0:	687b      	ldr	r3, [r7, #4]
   137a2:	681b      	ldr	r3, [r3, #0]
   137a4:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   137a6:	68fb      	ldr	r3, [r7, #12]
   137a8:	69db      	ldr	r3, [r3, #28]
   137aa:	2207      	movs	r2, #7
   137ac:	4013      	ands	r3, r2
   137ae:	1e5a      	subs	r2, r3, #1
   137b0:	4193      	sbcs	r3, r2
   137b2:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
   137b4:	0018      	movs	r0, r3
   137b6:	46bd      	mov	sp, r7
   137b8:	b004      	add	sp, #16
   137ba:	bd80      	pop	{r7, pc}

000137bc <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
   137bc:	b580      	push	{r7, lr}
   137be:	b082      	sub	sp, #8
   137c0:	af00      	add	r7, sp, #0
   137c2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   137c4:	46c0      	nop			; (mov r8, r8)
   137c6:	687b      	ldr	r3, [r7, #4]
   137c8:	0018      	movs	r0, r3
   137ca:	4b04      	ldr	r3, [pc, #16]	; (137dc <_i2c_master_wait_for_sync+0x20>)
   137cc:	4798      	blx	r3
   137ce:	1e03      	subs	r3, r0, #0
   137d0:	d1f9      	bne.n	137c6 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
   137d2:	46c0      	nop			; (mov r8, r8)
   137d4:	46bd      	mov	sp, r7
   137d6:	b002      	add	sp, #8
   137d8:	bd80      	pop	{r7, pc}
   137da:	46c0      	nop			; (mov r8, r8)
   137dc:	00013799 	.word	0x00013799

000137e0 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
   137e0:	b580      	push	{r7, lr}
   137e2:	b084      	sub	sp, #16
   137e4:	af00      	add	r7, sp, #0
   137e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   137e8:	687b      	ldr	r3, [r7, #4]
   137ea:	681b      	ldr	r3, [r3, #0]
   137ec:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   137ee:	68fb      	ldr	r3, [r7, #12]
   137f0:	681b      	ldr	r3, [r3, #0]
   137f2:	011b      	lsls	r3, r3, #4
   137f4:	0fdb      	lsrs	r3, r3, #31
   137f6:	b2db      	uxtb	r3, r3
   137f8:	001a      	movs	r2, r3
   137fa:	230b      	movs	r3, #11
   137fc:	18fb      	adds	r3, r7, r3
   137fe:	1e51      	subs	r1, r2, #1
   13800:	418a      	sbcs	r2, r1
   13802:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
   13804:	2308      	movs	r3, #8
   13806:	18fb      	adds	r3, r7, r3
   13808:	687a      	ldr	r2, [r7, #4]
   1380a:	8b52      	ldrh	r2, [r2, #26]
   1380c:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   1380e:	687b      	ldr	r3, [r7, #4]
   13810:	8b9b      	ldrh	r3, [r3, #28]
   13812:	b29a      	uxth	r2, r3
   13814:	2308      	movs	r3, #8
   13816:	18fb      	adds	r3, r7, r3
   13818:	2108      	movs	r1, #8
   1381a:	1879      	adds	r1, r7, r1
   1381c:	8809      	ldrh	r1, [r1, #0]
   1381e:	1a8a      	subs	r2, r1, r2
   13820:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   13822:	687b      	ldr	r3, [r7, #4]
   13824:	8b9b      	ldrh	r3, [r3, #28]
   13826:	b29b      	uxth	r3, r3
   13828:	3b01      	subs	r3, #1
   1382a:	b29a      	uxth	r2, r3
   1382c:	687b      	ldr	r3, [r7, #4]
   1382e:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
   13830:	230b      	movs	r3, #11
   13832:	18fb      	adds	r3, r7, r3
   13834:	781b      	ldrb	r3, [r3, #0]
   13836:	2b00      	cmp	r3, #0
   13838:	d010      	beq.n	1385c <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
   1383a:	687b      	ldr	r3, [r7, #4]
   1383c:	7adb      	ldrb	r3, [r3, #11]
   1383e:	2b00      	cmp	r3, #0
   13840:	d01c      	beq.n	1387c <_i2c_master_read+0x9c>
   13842:	687b      	ldr	r3, [r7, #4]
   13844:	8b9b      	ldrh	r3, [r3, #28]
   13846:	b29b      	uxth	r3, r3
   13848:	2b01      	cmp	r3, #1
   1384a:	d117      	bne.n	1387c <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1384c:	68fb      	ldr	r3, [r7, #12]
   1384e:	685b      	ldr	r3, [r3, #4]
   13850:	2280      	movs	r2, #128	; 0x80
   13852:	02d2      	lsls	r2, r2, #11
   13854:	431a      	orrs	r2, r3
   13856:	68fb      	ldr	r3, [r7, #12]
   13858:	605a      	str	r2, [r3, #4]
   1385a:	e00f      	b.n	1387c <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
   1385c:	687b      	ldr	r3, [r7, #4]
   1385e:	7adb      	ldrb	r3, [r3, #11]
   13860:	2b00      	cmp	r3, #0
   13862:	d00b      	beq.n	1387c <_i2c_master_read+0x9c>
   13864:	687b      	ldr	r3, [r7, #4]
   13866:	8b9b      	ldrh	r3, [r3, #28]
   13868:	b29b      	uxth	r3, r3
   1386a:	2b00      	cmp	r3, #0
   1386c:	d106      	bne.n	1387c <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1386e:	68fb      	ldr	r3, [r7, #12]
   13870:	685b      	ldr	r3, [r3, #4]
   13872:	2280      	movs	r2, #128	; 0x80
   13874:	02d2      	lsls	r2, r2, #11
   13876:	431a      	orrs	r2, r3
   13878:	68fb      	ldr	r3, [r7, #12]
   1387a:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
   1387c:	687b      	ldr	r3, [r7, #4]
   1387e:	8b9b      	ldrh	r3, [r3, #28]
   13880:	b29b      	uxth	r3, r3
   13882:	2b00      	cmp	r3, #0
   13884:	d10e      	bne.n	138a4 <_i2c_master_read+0xc4>
		if (module->send_stop) {
   13886:	687b      	ldr	r3, [r7, #4]
   13888:	7a9b      	ldrb	r3, [r3, #10]
   1388a:	2b00      	cmp	r3, #0
   1388c:	d00a      	beq.n	138a4 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   1388e:	687b      	ldr	r3, [r7, #4]
   13890:	0018      	movs	r0, r3
   13892:	4b0e      	ldr	r3, [pc, #56]	; (138cc <_i2c_master_read+0xec>)
   13894:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   13896:	68fb      	ldr	r3, [r7, #12]
   13898:	685b      	ldr	r3, [r3, #4]
   1389a:	22c0      	movs	r2, #192	; 0xc0
   1389c:	0292      	lsls	r2, r2, #10
   1389e:	431a      	orrs	r2, r3
   138a0:	68fb      	ldr	r3, [r7, #12]
   138a2:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
   138a4:	687b      	ldr	r3, [r7, #4]
   138a6:	0018      	movs	r0, r3
   138a8:	4b08      	ldr	r3, [pc, #32]	; (138cc <_i2c_master_read+0xec>)
   138aa:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
   138ac:	687b      	ldr	r3, [r7, #4]
   138ae:	6a1a      	ldr	r2, [r3, #32]
   138b0:	2308      	movs	r3, #8
   138b2:	18fb      	adds	r3, r7, r3
   138b4:	881b      	ldrh	r3, [r3, #0]
   138b6:	18d3      	adds	r3, r2, r3
   138b8:	68fa      	ldr	r2, [r7, #12]
   138ba:	2128      	movs	r1, #40	; 0x28
   138bc:	5c52      	ldrb	r2, [r2, r1]
   138be:	b2d2      	uxtb	r2, r2
   138c0:	701a      	strb	r2, [r3, #0]
}
   138c2:	46c0      	nop			; (mov r8, r8)
   138c4:	46bd      	mov	sp, r7
   138c6:	b004      	add	sp, #16
   138c8:	bd80      	pop	{r7, pc}
   138ca:	46c0      	nop			; (mov r8, r8)
   138cc:	000137bd 	.word	0x000137bd

000138d0 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
   138d0:	b580      	push	{r7, lr}
   138d2:	b084      	sub	sp, #16
   138d4:	af00      	add	r7, sp, #0
   138d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   138d8:	687b      	ldr	r3, [r7, #4]
   138da:	681b      	ldr	r3, [r3, #0]
   138dc:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
   138de:	68fb      	ldr	r3, [r7, #12]
   138e0:	8b5b      	ldrh	r3, [r3, #26]
   138e2:	b29b      	uxth	r3, r3
   138e4:	001a      	movs	r2, r3
   138e6:	2304      	movs	r3, #4
   138e8:	4013      	ands	r3, r2
   138ea:	d004      	beq.n	138f6 <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
   138ec:	687b      	ldr	r3, [r7, #4]
   138ee:	2225      	movs	r2, #37	; 0x25
   138f0:	211e      	movs	r1, #30
   138f2:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
   138f4:	e024      	b.n	13940 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
   138f6:	230a      	movs	r3, #10
   138f8:	18fb      	adds	r3, r7, r3
   138fa:	687a      	ldr	r2, [r7, #4]
   138fc:	8b52      	ldrh	r2, [r2, #26]
   138fe:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   13900:	687b      	ldr	r3, [r7, #4]
   13902:	8b9b      	ldrh	r3, [r3, #28]
   13904:	b29a      	uxth	r2, r3
   13906:	230a      	movs	r3, #10
   13908:	18fb      	adds	r3, r7, r3
   1390a:	210a      	movs	r1, #10
   1390c:	1879      	adds	r1, r7, r1
   1390e:	8809      	ldrh	r1, [r1, #0]
   13910:	1a8a      	subs	r2, r1, r2
   13912:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   13914:	687b      	ldr	r3, [r7, #4]
   13916:	8b9b      	ldrh	r3, [r3, #28]
   13918:	b29b      	uxth	r3, r3
   1391a:	3b01      	subs	r3, #1
   1391c:	b29a      	uxth	r2, r3
   1391e:	687b      	ldr	r3, [r7, #4]
   13920:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
   13922:	687b      	ldr	r3, [r7, #4]
   13924:	0018      	movs	r0, r3
   13926:	4b08      	ldr	r3, [pc, #32]	; (13948 <_i2c_master_write+0x78>)
   13928:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
   1392a:	687b      	ldr	r3, [r7, #4]
   1392c:	6a1a      	ldr	r2, [r3, #32]
   1392e:	230a      	movs	r3, #10
   13930:	18fb      	adds	r3, r7, r3
   13932:	881b      	ldrh	r3, [r3, #0]
   13934:	18d3      	adds	r3, r2, r3
   13936:	781b      	ldrb	r3, [r3, #0]
   13938:	b2d9      	uxtb	r1, r3
   1393a:	68fb      	ldr	r3, [r7, #12]
   1393c:	2228      	movs	r2, #40	; 0x28
   1393e:	5499      	strb	r1, [r3, r2]
}
   13940:	46bd      	mov	sp, r7
   13942:	b004      	add	sp, #16
   13944:	bd80      	pop	{r7, pc}
   13946:	46c0      	nop			; (mov r8, r8)
   13948:	000137bd 	.word	0x000137bd

0001394c <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
   1394c:	b580      	push	{r7, lr}
   1394e:	b084      	sub	sp, #16
   13950:	af00      	add	r7, sp, #0
   13952:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13954:	687b      	ldr	r3, [r7, #4]
   13956:	681b      	ldr	r3, [r3, #0]
   13958:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
   1395a:	68fb      	ldr	r3, [r7, #12]
   1395c:	7e1b      	ldrb	r3, [r3, #24]
   1395e:	b2db      	uxtb	r3, r3
   13960:	001a      	movs	r2, r3
   13962:	2301      	movs	r3, #1
   13964:	4013      	ands	r3, r2
   13966:	d02b      	beq.n	139c0 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   13968:	68fb      	ldr	r3, [r7, #12]
   1396a:	2201      	movs	r2, #1
   1396c:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   1396e:	68fb      	ldr	r3, [r7, #12]
   13970:	8b5b      	ldrh	r3, [r3, #26]
   13972:	b29b      	uxth	r3, r3
   13974:	001a      	movs	r2, r3
   13976:	2302      	movs	r3, #2
   13978:	4013      	ands	r3, r2
   1397a:	d004      	beq.n	13986 <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
   1397c:	687b      	ldr	r3, [r7, #4]
   1397e:	2225      	movs	r2, #37	; 0x25
   13980:	2141      	movs	r1, #65	; 0x41
   13982:	5499      	strb	r1, [r3, r2]
   13984:	e01c      	b.n	139c0 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   13986:	68fb      	ldr	r3, [r7, #12]
   13988:	8b5b      	ldrh	r3, [r3, #26]
   1398a:	b29b      	uxth	r3, r3
   1398c:	001a      	movs	r2, r3
   1398e:	2304      	movs	r3, #4
   13990:	4013      	ands	r3, r2
   13992:	d015      	beq.n	139c0 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
   13994:	687b      	ldr	r3, [r7, #4]
   13996:	2225      	movs	r2, #37	; 0x25
   13998:	2118      	movs	r1, #24
   1399a:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
   1399c:	687b      	ldr	r3, [r7, #4]
   1399e:	2200      	movs	r2, #0
   139a0:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
   139a2:	687b      	ldr	r3, [r7, #4]
   139a4:	7a9b      	ldrb	r3, [r3, #10]
   139a6:	2b00      	cmp	r3, #0
   139a8:	d00a      	beq.n	139c0 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
   139aa:	687b      	ldr	r3, [r7, #4]
   139ac:	0018      	movs	r0, r3
   139ae:	4b13      	ldr	r3, [pc, #76]	; (139fc <_i2c_master_async_address_response+0xb0>)
   139b0:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   139b2:	68fb      	ldr	r3, [r7, #12]
   139b4:	685b      	ldr	r3, [r3, #4]
   139b6:	22c0      	movs	r2, #192	; 0xc0
   139b8:	0292      	lsls	r2, r2, #10
   139ba:	431a      	orrs	r2, r3
   139bc:	68fb      	ldr	r3, [r7, #12]
   139be:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
   139c0:	687b      	ldr	r3, [r7, #4]
   139c2:	8b9b      	ldrh	r3, [r3, #28]
   139c4:	b29a      	uxth	r2, r3
   139c6:	687b      	ldr	r3, [r7, #4]
   139c8:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
   139ca:	687b      	ldr	r3, [r7, #4]
   139cc:	2225      	movs	r2, #37	; 0x25
   139ce:	5c9b      	ldrb	r3, [r3, r2]
   139d0:	b2db      	uxtb	r3, r3
   139d2:	2b05      	cmp	r3, #5
   139d4:	d10e      	bne.n	139f4 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   139d6:	687b      	ldr	r3, [r7, #4]
   139d8:	2224      	movs	r2, #36	; 0x24
   139da:	5c9b      	ldrb	r3, [r3, r2]
   139dc:	b2db      	uxtb	r3, r3
   139de:	2b00      	cmp	r3, #0
   139e0:	d104      	bne.n	139ec <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
   139e2:	687b      	ldr	r3, [r7, #4]
   139e4:	0018      	movs	r0, r3
   139e6:	4b06      	ldr	r3, [pc, #24]	; (13a00 <_i2c_master_async_address_response+0xb4>)
   139e8:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
   139ea:	e003      	b.n	139f4 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
   139ec:	687b      	ldr	r3, [r7, #4]
   139ee:	0018      	movs	r0, r3
   139f0:	4b04      	ldr	r3, [pc, #16]	; (13a04 <_i2c_master_async_address_response+0xb8>)
   139f2:	4798      	blx	r3
}
   139f4:	46c0      	nop			; (mov r8, r8)
   139f6:	46bd      	mov	sp, r7
   139f8:	b004      	add	sp, #16
   139fa:	bd80      	pop	{r7, pc}
   139fc:	000137bd 	.word	0x000137bd
   13a00:	000138d1 	.word	0x000138d1
   13a04:	000137e1 	.word	0x000137e1

00013a08 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
   13a08:	b580      	push	{r7, lr}
   13a0a:	b084      	sub	sp, #16
   13a0c:	af00      	add	r7, sp, #0
   13a0e:	60f8      	str	r0, [r7, #12]
   13a10:	60b9      	str	r1, [r7, #8]
   13a12:	1dfb      	adds	r3, r7, #7
   13a14:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
   13a16:	1dfb      	adds	r3, r7, #7
   13a18:	781b      	ldrb	r3, [r3, #0]
   13a1a:	68fa      	ldr	r2, [r7, #12]
   13a1c:	3302      	adds	r3, #2
   13a1e:	009b      	lsls	r3, r3, #2
   13a20:	18d3      	adds	r3, r2, r3
   13a22:	3304      	adds	r3, #4
   13a24:	68ba      	ldr	r2, [r7, #8]
   13a26:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
   13a28:	68fb      	ldr	r3, [r7, #12]
   13a2a:	7e1b      	ldrb	r3, [r3, #24]
   13a2c:	b2db      	uxtb	r3, r3
   13a2e:	b25a      	sxtb	r2, r3
   13a30:	1dfb      	adds	r3, r7, #7
   13a32:	781b      	ldrb	r3, [r3, #0]
   13a34:	2101      	movs	r1, #1
   13a36:	4099      	lsls	r1, r3
   13a38:	000b      	movs	r3, r1
   13a3a:	b25b      	sxtb	r3, r3
   13a3c:	4313      	orrs	r3, r2
   13a3e:	b25b      	sxtb	r3, r3
   13a40:	b2da      	uxtb	r2, r3
   13a42:	68fb      	ldr	r3, [r7, #12]
   13a44:	761a      	strb	r2, [r3, #24]
}
   13a46:	46c0      	nop			; (mov r8, r8)
   13a48:	46bd      	mov	sp, r7
   13a4a:	b004      	add	sp, #16
   13a4c:	bd80      	pop	{r7, pc}
	...

00013a50 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13a50:	b590      	push	{r4, r7, lr}
   13a52:	b087      	sub	sp, #28
   13a54:	af00      	add	r7, sp, #0
   13a56:	6078      	str	r0, [r7, #4]
   13a58:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13a5a:	687b      	ldr	r3, [r7, #4]
   13a5c:	681b      	ldr	r3, [r3, #0]
   13a5e:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
   13a60:	683b      	ldr	r3, [r7, #0]
   13a62:	685a      	ldr	r2, [r3, #4]
   13a64:	687b      	ldr	r3, [r7, #4]
   13a66:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   13a68:	683b      	ldr	r3, [r7, #0]
   13a6a:	885a      	ldrh	r2, [r3, #2]
   13a6c:	687b      	ldr	r3, [r7, #4]
   13a6e:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
   13a70:	687b      	ldr	r3, [r7, #4]
   13a72:	2224      	movs	r2, #36	; 0x24
   13a74:	2101      	movs	r1, #1
   13a76:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   13a78:	687b      	ldr	r3, [r7, #4]
   13a7a:	2225      	movs	r2, #37	; 0x25
   13a7c:	2105      	movs	r1, #5
   13a7e:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13a80:	693b      	ldr	r3, [r7, #16]
   13a82:	681b      	ldr	r3, [r3, #0]
   13a84:	011b      	lsls	r3, r3, #4
   13a86:	0fdb      	lsrs	r3, r3, #31
   13a88:	b2db      	uxtb	r3, r3
   13a8a:	001a      	movs	r2, r3
   13a8c:	230f      	movs	r3, #15
   13a8e:	18fb      	adds	r3, r7, r3
   13a90:	1e51      	subs	r1, r2, #1
   13a92:	418a      	sbcs	r2, r1
   13a94:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   13a96:	683b      	ldr	r3, [r7, #0]
   13a98:	7a5b      	ldrb	r3, [r3, #9]
   13a9a:	2b00      	cmp	r3, #0
   13a9c:	d006      	beq.n	13aac <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   13a9e:	683b      	ldr	r3, [r7, #0]
   13aa0:	7a9a      	ldrb	r2, [r3, #10]
   13aa2:	687b      	ldr	r3, [r7, #4]
   13aa4:	0011      	movs	r1, r2
   13aa6:	0018      	movs	r0, r3
   13aa8:	4b3b      	ldr	r3, [pc, #236]	; (13b98 <_i2c_master_read_packet+0x148>)
   13aaa:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
   13aac:	230f      	movs	r3, #15
   13aae:	18fb      	adds	r3, r7, r3
   13ab0:	781b      	ldrb	r3, [r3, #0]
   13ab2:	2b00      	cmp	r3, #0
   13ab4:	d00b      	beq.n	13ace <_i2c_master_read_packet+0x7e>
   13ab6:	683b      	ldr	r3, [r7, #0]
   13ab8:	885b      	ldrh	r3, [r3, #2]
   13aba:	2b01      	cmp	r3, #1
   13abc:	d107      	bne.n	13ace <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   13abe:	693b      	ldr	r3, [r7, #16]
   13ac0:	685b      	ldr	r3, [r3, #4]
   13ac2:	2280      	movs	r2, #128	; 0x80
   13ac4:	02d2      	lsls	r2, r2, #11
   13ac6:	431a      	orrs	r2, r3
   13ac8:	693b      	ldr	r3, [r7, #16]
   13aca:	605a      	str	r2, [r3, #4]
   13acc:	e005      	b.n	13ada <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   13ace:	693b      	ldr	r3, [r7, #16]
   13ad0:	685b      	ldr	r3, [r3, #4]
   13ad2:	4a32      	ldr	r2, [pc, #200]	; (13b9c <_i2c_master_read_packet+0x14c>)
   13ad4:	401a      	ands	r2, r3
   13ad6:	693b      	ldr	r3, [r7, #16]
   13ad8:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
   13ada:	683b      	ldr	r3, [r7, #0]
   13adc:	7a1b      	ldrb	r3, [r3, #8]
   13ade:	2b00      	cmp	r3, #0
   13ae0:	d045      	beq.n	13b6e <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
   13ae2:	683b      	ldr	r3, [r7, #0]
   13ae4:	881b      	ldrh	r3, [r3, #0]
   13ae6:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13ae8:	683b      	ldr	r3, [r7, #0]
   13aea:	7a5b      	ldrb	r3, [r3, #9]
   13aec:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
   13aee:	4313      	orrs	r3, r2
   13af0:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13af2:	2380      	movs	r3, #128	; 0x80
   13af4:	021b      	lsls	r3, r3, #8
   13af6:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
   13af8:	693b      	ldr	r3, [r7, #16]
   13afa:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
   13afc:	2317      	movs	r3, #23
   13afe:	18fc      	adds	r4, r7, r3
   13b00:	687b      	ldr	r3, [r7, #4]
   13b02:	0018      	movs	r0, r3
   13b04:	4b26      	ldr	r3, [pc, #152]	; (13ba0 <_i2c_master_read_packet+0x150>)
   13b06:	4798      	blx	r3
   13b08:	0003      	movs	r3, r0
   13b0a:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   13b0c:	693b      	ldr	r3, [r7, #16]
   13b0e:	685b      	ldr	r3, [r3, #4]
   13b10:	4a22      	ldr	r2, [pc, #136]	; (13b9c <_i2c_master_read_packet+0x14c>)
   13b12:	401a      	ands	r2, r3
   13b14:	693b      	ldr	r3, [r7, #16]
   13b16:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
   13b18:	2317      	movs	r3, #23
   13b1a:	18fb      	adds	r3, r7, r3
   13b1c:	781b      	ldrb	r3, [r3, #0]
   13b1e:	2b00      	cmp	r3, #0
   13b20:	d107      	bne.n	13b32 <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
   13b22:	2317      	movs	r3, #23
   13b24:	18fc      	adds	r4, r7, r3
   13b26:	687b      	ldr	r3, [r7, #4]
   13b28:	0018      	movs	r0, r3
   13b2a:	4b1e      	ldr	r3, [pc, #120]	; (13ba4 <_i2c_master_read_packet+0x154>)
   13b2c:	4798      	blx	r3
   13b2e:	0003      	movs	r3, r0
   13b30:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
   13b32:	2317      	movs	r3, #23
   13b34:	18fb      	adds	r3, r7, r3
   13b36:	781b      	ldrb	r3, [r3, #0]
   13b38:	2b00      	cmp	r3, #0
   13b3a:	d114      	bne.n	13b66 <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
   13b3c:	693b      	ldr	r3, [r7, #16]
   13b3e:	2203      	movs	r2, #3
   13b40:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   13b42:	683b      	ldr	r3, [r7, #0]
   13b44:	881b      	ldrh	r3, [r3, #0]
   13b46:	0a1b      	lsrs	r3, r3, #8
   13b48:	b29b      	uxth	r3, r3
   13b4a:	2278      	movs	r2, #120	; 0x78
   13b4c:	4313      	orrs	r3, r2
   13b4e:	b29b      	uxth	r3, r3
   13b50:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13b52:	683b      	ldr	r3, [r7, #0]
   13b54:	7a5b      	ldrb	r3, [r3, #9]
   13b56:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   13b58:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13b5a:	2201      	movs	r2, #1
   13b5c:	4313      	orrs	r3, r2
   13b5e:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   13b60:	693b      	ldr	r3, [r7, #16]
   13b62:	625a      	str	r2, [r3, #36]	; 0x24
   13b64:	e012      	b.n	13b8c <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
   13b66:	2317      	movs	r3, #23
   13b68:	18fb      	adds	r3, r7, r3
   13b6a:	781b      	ldrb	r3, [r3, #0]
   13b6c:	e00f      	b.n	13b8e <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
   13b6e:	693b      	ldr	r3, [r7, #16]
   13b70:	2203      	movs	r2, #3
   13b72:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   13b74:	683b      	ldr	r3, [r7, #0]
   13b76:	881b      	ldrh	r3, [r3, #0]
   13b78:	005b      	lsls	r3, r3, #1
   13b7a:	2201      	movs	r2, #1
   13b7c:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   13b7e:	683b      	ldr	r3, [r7, #0]
   13b80:	7a5b      	ldrb	r3, [r3, #9]
   13b82:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   13b84:	4313      	orrs	r3, r2
   13b86:	001a      	movs	r2, r3
   13b88:	693b      	ldr	r3, [r7, #16]
   13b8a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   13b8c:	2300      	movs	r3, #0
}
   13b8e:	0018      	movs	r0, r3
   13b90:	46bd      	mov	sp, r7
   13b92:	b007      	add	sp, #28
   13b94:	bd90      	pop	{r4, r7, pc}
   13b96:	46c0      	nop			; (mov r8, r8)
   13b98:	00018a15 	.word	0x00018a15
   13b9c:	fffbffff 	.word	0xfffbffff
   13ba0:	000189b7 	.word	0x000189b7
   13ba4:	00018959 	.word	0x00018959

00013ba8 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13ba8:	b580      	push	{r7, lr}
   13baa:	b082      	sub	sp, #8
   13bac:	af00      	add	r7, sp, #0
   13bae:	6078      	str	r0, [r7, #4]
   13bb0:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
   13bb2:	687b      	ldr	r3, [r7, #4]
   13bb4:	8b9b      	ldrh	r3, [r3, #28]
   13bb6:	b29b      	uxth	r3, r3
   13bb8:	2b00      	cmp	r3, #0
   13bba:	d001      	beq.n	13bc0 <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
   13bbc:	2305      	movs	r3, #5
   13bbe:	e00c      	b.n	13bda <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
   13bc0:	687b      	ldr	r3, [r7, #4]
   13bc2:	2201      	movs	r2, #1
   13bc4:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   13bc6:	687b      	ldr	r3, [r7, #4]
   13bc8:	2201      	movs	r2, #1
   13bca:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
   13bcc:	683a      	ldr	r2, [r7, #0]
   13bce:	687b      	ldr	r3, [r7, #4]
   13bd0:	0011      	movs	r1, r2
   13bd2:	0018      	movs	r0, r3
   13bd4:	4b03      	ldr	r3, [pc, #12]	; (13be4 <i2c_master_read_packet_job+0x3c>)
   13bd6:	4798      	blx	r3
   13bd8:	0003      	movs	r3, r0
}
   13bda:	0018      	movs	r0, r3
   13bdc:	46bd      	mov	sp, r7
   13bde:	b002      	add	sp, #8
   13be0:	bd80      	pop	{r7, pc}
   13be2:	46c0      	nop			; (mov r8, r8)
   13be4:	00013a51 	.word	0x00013a51

00013be8 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13be8:	b580      	push	{r7, lr}
   13bea:	b084      	sub	sp, #16
   13bec:	af00      	add	r7, sp, #0
   13bee:	6078      	str	r0, [r7, #4]
   13bf0:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13bf2:	687b      	ldr	r3, [r7, #4]
   13bf4:	681b      	ldr	r3, [r3, #0]
   13bf6:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   13bf8:	683b      	ldr	r3, [r7, #0]
   13bfa:	7a5b      	ldrb	r3, [r3, #9]
   13bfc:	2b00      	cmp	r3, #0
   13bfe:	d006      	beq.n	13c0e <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   13c00:	683b      	ldr	r3, [r7, #0]
   13c02:	7a9a      	ldrb	r2, [r3, #10]
   13c04:	687b      	ldr	r3, [r7, #4]
   13c06:	0011      	movs	r1, r2
   13c08:	0018      	movs	r0, r3
   13c0a:	4b1e      	ldr	r3, [pc, #120]	; (13c84 <_i2c_master_write_packet+0x9c>)
   13c0c:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   13c0e:	68fb      	ldr	r3, [r7, #12]
   13c10:	685b      	ldr	r3, [r3, #4]
   13c12:	4a1d      	ldr	r2, [pc, #116]	; (13c88 <_i2c_master_write_packet+0xa0>)
   13c14:	401a      	ands	r2, r3
   13c16:	68fb      	ldr	r3, [r7, #12]
   13c18:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
   13c1a:	683b      	ldr	r3, [r7, #0]
   13c1c:	685a      	ldr	r2, [r3, #4]
   13c1e:	687b      	ldr	r3, [r7, #4]
   13c20:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   13c22:	683b      	ldr	r3, [r7, #0]
   13c24:	885a      	ldrh	r2, [r3, #2]
   13c26:	687b      	ldr	r3, [r7, #4]
   13c28:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
   13c2a:	687b      	ldr	r3, [r7, #4]
   13c2c:	2224      	movs	r2, #36	; 0x24
   13c2e:	2100      	movs	r1, #0
   13c30:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   13c32:	687b      	ldr	r3, [r7, #4]
   13c34:	2225      	movs	r2, #37	; 0x25
   13c36:	2105      	movs	r1, #5
   13c38:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
   13c3a:	68fb      	ldr	r3, [r7, #12]
   13c3c:	2203      	movs	r2, #3
   13c3e:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
   13c40:	683b      	ldr	r3, [r7, #0]
   13c42:	7a1b      	ldrb	r3, [r3, #8]
   13c44:	2b00      	cmp	r3, #0
   13c46:	d00d      	beq.n	13c64 <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   13c48:	683b      	ldr	r3, [r7, #0]
   13c4a:	881b      	ldrh	r3, [r3, #0]
   13c4c:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13c4e:	683b      	ldr	r3, [r7, #0]
   13c50:	7a5b      	ldrb	r3, [r3, #9]
   13c52:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   13c54:	4313      	orrs	r3, r2
   13c56:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13c58:	2380      	movs	r3, #128	; 0x80
   13c5a:	021b      	lsls	r3, r3, #8
   13c5c:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   13c5e:	68fb      	ldr	r3, [r7, #12]
   13c60:	625a      	str	r2, [r3, #36]	; 0x24
   13c62:	e009      	b.n	13c78 <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   13c64:	683b      	ldr	r3, [r7, #0]
   13c66:	881b      	ldrh	r3, [r3, #0]
   13c68:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   13c6a:	683b      	ldr	r3, [r7, #0]
   13c6c:	7a5b      	ldrb	r3, [r3, #9]
   13c6e:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   13c70:	4313      	orrs	r3, r2
   13c72:	001a      	movs	r2, r3
   13c74:	68fb      	ldr	r3, [r7, #12]
   13c76:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   13c78:	2300      	movs	r3, #0
}
   13c7a:	0018      	movs	r0, r3
   13c7c:	46bd      	mov	sp, r7
   13c7e:	b004      	add	sp, #16
   13c80:	bd80      	pop	{r7, pc}
   13c82:	46c0      	nop			; (mov r8, r8)
   13c84:	00018a15 	.word	0x00018a15
   13c88:	fffbffff 	.word	0xfffbffff

00013c8c <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13c8c:	b580      	push	{r7, lr}
   13c8e:	b082      	sub	sp, #8
   13c90:	af00      	add	r7, sp, #0
   13c92:	6078      	str	r0, [r7, #4]
   13c94:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
   13c96:	687b      	ldr	r3, [r7, #4]
   13c98:	8b9b      	ldrh	r3, [r3, #28]
   13c9a:	b29b      	uxth	r3, r3
   13c9c:	2b00      	cmp	r3, #0
   13c9e:	d001      	beq.n	13ca4 <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
   13ca0:	2305      	movs	r3, #5
   13ca2:	e00c      	b.n	13cbe <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
   13ca4:	687b      	ldr	r3, [r7, #4]
   13ca6:	2201      	movs	r2, #1
   13ca8:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   13caa:	687b      	ldr	r3, [r7, #4]
   13cac:	2201      	movs	r2, #1
   13cae:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
   13cb0:	683a      	ldr	r2, [r7, #0]
   13cb2:	687b      	ldr	r3, [r7, #4]
   13cb4:	0011      	movs	r1, r2
   13cb6:	0018      	movs	r0, r3
   13cb8:	4b03      	ldr	r3, [pc, #12]	; (13cc8 <i2c_master_write_packet_job+0x3c>)
   13cba:	4798      	blx	r3
   13cbc:	0003      	movs	r3, r0
}
   13cbe:	0018      	movs	r0, r3
   13cc0:	46bd      	mov	sp, r7
   13cc2:	b002      	add	sp, #8
   13cc4:	bd80      	pop	{r7, pc}
   13cc6:	46c0      	nop			; (mov r8, r8)
   13cc8:	00013be9 	.word	0x00013be9

00013ccc <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
   13ccc:	b580      	push	{r7, lr}
   13cce:	b086      	sub	sp, #24
   13cd0:	af00      	add	r7, sp, #0
   13cd2:	0002      	movs	r2, r0
   13cd4:	1dfb      	adds	r3, r7, #7
   13cd6:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
   13cd8:	1dfb      	adds	r3, r7, #7
   13cda:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
   13cdc:	4b93      	ldr	r3, [pc, #588]	; (13f2c <_i2c_master_interrupt_handler+0x260>)
   13cde:	0092      	lsls	r2, r2, #2
   13ce0:	58d3      	ldr	r3, [r2, r3]
   13ce2:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13ce4:	697b      	ldr	r3, [r7, #20]
   13ce6:	681b      	ldr	r3, [r3, #0]
   13ce8:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13cea:	693b      	ldr	r3, [r7, #16]
   13cec:	681b      	ldr	r3, [r3, #0]
   13cee:	011b      	lsls	r3, r3, #4
   13cf0:	0fdb      	lsrs	r3, r3, #31
   13cf2:	b2db      	uxtb	r3, r3
   13cf4:	001a      	movs	r2, r3
   13cf6:	230f      	movs	r3, #15
   13cf8:	18fb      	adds	r3, r7, r3
   13cfa:	1e51      	subs	r1, r2, #1
   13cfc:	418a      	sbcs	r2, r1
   13cfe:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
   13d00:	230e      	movs	r3, #14
   13d02:	18fb      	adds	r3, r7, r3
   13d04:	697a      	ldr	r2, [r7, #20]
   13d06:	7e52      	ldrb	r2, [r2, #25]
   13d08:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   13d0a:	697b      	ldr	r3, [r7, #20]
   13d0c:	7e1b      	ldrb	r3, [r3, #24]
   13d0e:	b2da      	uxtb	r2, r3
   13d10:	230e      	movs	r3, #14
   13d12:	18fb      	adds	r3, r7, r3
   13d14:	210e      	movs	r1, #14
   13d16:	1879      	adds	r1, r7, r1
   13d18:	7809      	ldrb	r1, [r1, #0]
   13d1a:	400a      	ands	r2, r1
   13d1c:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
   13d1e:	697b      	ldr	r3, [r7, #20]
   13d20:	8b5b      	ldrh	r3, [r3, #26]
   13d22:	b29b      	uxth	r3, r3
   13d24:	2b00      	cmp	r3, #0
   13d26:	d109      	bne.n	13d3c <_i2c_master_interrupt_handler+0x70>
   13d28:	697b      	ldr	r3, [r7, #20]
   13d2a:	8b9b      	ldrh	r3, [r3, #28]
   13d2c:	b29b      	uxth	r3, r3
   13d2e:	2b00      	cmp	r3, #0
   13d30:	d004      	beq.n	13d3c <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
   13d32:	697b      	ldr	r3, [r7, #20]
   13d34:	0018      	movs	r0, r3
   13d36:	4b7e      	ldr	r3, [pc, #504]	; (13f30 <_i2c_master_interrupt_handler+0x264>)
   13d38:	4798      	blx	r3
   13d3a:	e070      	b.n	13e1e <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   13d3c:	697b      	ldr	r3, [r7, #20]
   13d3e:	8b5b      	ldrh	r3, [r3, #26]
   13d40:	b29b      	uxth	r3, r3
   13d42:	2b00      	cmp	r3, #0
   13d44:	d039      	beq.n	13dba <_i2c_master_interrupt_handler+0xee>
   13d46:	697b      	ldr	r3, [r7, #20]
   13d48:	8b9b      	ldrh	r3, [r3, #28]
   13d4a:	b29b      	uxth	r3, r3
   13d4c:	2b00      	cmp	r3, #0
   13d4e:	d134      	bne.n	13dba <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
   13d50:	697b      	ldr	r3, [r7, #20]
   13d52:	2225      	movs	r2, #37	; 0x25
   13d54:	5c9b      	ldrb	r3, [r3, r2]
   13d56:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   13d58:	2b05      	cmp	r3, #5
   13d5a:	d12e      	bne.n	13dba <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
   13d5c:	697b      	ldr	r3, [r7, #20]
   13d5e:	2224      	movs	r2, #36	; 0x24
   13d60:	5c9b      	ldrb	r3, [r3, r2]
   13d62:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   13d64:	2b00      	cmp	r3, #0
   13d66:	d128      	bne.n	13dba <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   13d68:	693b      	ldr	r3, [r7, #16]
   13d6a:	2203      	movs	r2, #3
   13d6c:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   13d6e:	697b      	ldr	r3, [r7, #20]
   13d70:	2200      	movs	r2, #0
   13d72:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   13d74:	697b      	ldr	r3, [r7, #20]
   13d76:	2225      	movs	r2, #37	; 0x25
   13d78:	2100      	movs	r1, #0
   13d7a:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
   13d7c:	697b      	ldr	r3, [r7, #20]
   13d7e:	7a9b      	ldrb	r3, [r3, #10]
   13d80:	2b00      	cmp	r3, #0
   13d82:	d00b      	beq.n	13d9c <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   13d84:	697b      	ldr	r3, [r7, #20]
   13d86:	0018      	movs	r0, r3
   13d88:	4b6a      	ldr	r3, [pc, #424]	; (13f34 <_i2c_master_interrupt_handler+0x268>)
   13d8a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   13d8c:	693b      	ldr	r3, [r7, #16]
   13d8e:	685b      	ldr	r3, [r3, #4]
   13d90:	22c0      	movs	r2, #192	; 0xc0
   13d92:	0292      	lsls	r2, r2, #10
   13d94:	431a      	orrs	r2, r3
   13d96:	693b      	ldr	r3, [r7, #16]
   13d98:	605a      	str	r2, [r3, #4]
   13d9a:	e002      	b.n	13da2 <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
   13d9c:	693b      	ldr	r3, [r7, #16]
   13d9e:	2201      	movs	r2, #1
   13da0:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   13da2:	230e      	movs	r3, #14
   13da4:	18fb      	adds	r3, r7, r3
   13da6:	781b      	ldrb	r3, [r3, #0]
   13da8:	2201      	movs	r2, #1
   13daa:	4013      	ands	r3, r2
   13dac:	d037      	beq.n	13e1e <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   13dae:	697b      	ldr	r3, [r7, #20]
   13db0:	68db      	ldr	r3, [r3, #12]
   13db2:	697a      	ldr	r2, [r7, #20]
   13db4:	0010      	movs	r0, r2
   13db6:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   13db8:	e031      	b.n	13e1e <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
   13dba:	697b      	ldr	r3, [r7, #20]
   13dbc:	8b5b      	ldrh	r3, [r3, #26]
   13dbe:	b29b      	uxth	r3, r3
   13dc0:	2b00      	cmp	r3, #0
   13dc2:	d02c      	beq.n	13e1e <_i2c_master_interrupt_handler+0x152>
   13dc4:	697b      	ldr	r3, [r7, #20]
   13dc6:	8b9b      	ldrh	r3, [r3, #28]
   13dc8:	b29b      	uxth	r3, r3
   13dca:	2b00      	cmp	r3, #0
   13dcc:	d027      	beq.n	13e1e <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   13dce:	693b      	ldr	r3, [r7, #16]
   13dd0:	8b5b      	ldrh	r3, [r3, #26]
   13dd2:	b29b      	uxth	r3, r3
   13dd4:	001a      	movs	r2, r3
   13dd6:	2320      	movs	r3, #32
   13dd8:	4013      	ands	r3, r2
   13dda:	d111      	bne.n	13e00 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   13ddc:	230f      	movs	r3, #15
   13dde:	18fb      	adds	r3, r7, r3
   13de0:	781b      	ldrb	r3, [r3, #0]
   13de2:	2201      	movs	r2, #1
   13de4:	4053      	eors	r3, r2
   13de6:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   13de8:	2b00      	cmp	r3, #0
   13dea:	d104      	bne.n	13df6 <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   13dec:	697b      	ldr	r3, [r7, #20]
   13dee:	8b9b      	ldrh	r3, [r3, #28]
   13df0:	b29b      	uxth	r3, r3
   13df2:	2b01      	cmp	r3, #1
   13df4:	d004      	beq.n	13e00 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
   13df6:	697b      	ldr	r3, [r7, #20]
   13df8:	2225      	movs	r2, #37	; 0x25
   13dfa:	2141      	movs	r1, #65	; 0x41
   13dfc:	5499      	strb	r1, [r3, r2]
   13dfe:	e00e      	b.n	13e1e <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   13e00:	697b      	ldr	r3, [r7, #20]
   13e02:	2224      	movs	r2, #36	; 0x24
   13e04:	5c9b      	ldrb	r3, [r3, r2]
   13e06:	b2db      	uxtb	r3, r3
   13e08:	2b00      	cmp	r3, #0
   13e0a:	d104      	bne.n	13e16 <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
   13e0c:	697b      	ldr	r3, [r7, #20]
   13e0e:	0018      	movs	r0, r3
   13e10:	4b49      	ldr	r3, [pc, #292]	; (13f38 <_i2c_master_interrupt_handler+0x26c>)
   13e12:	4798      	blx	r3
   13e14:	e003      	b.n	13e1e <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
   13e16:	697b      	ldr	r3, [r7, #20]
   13e18:	0018      	movs	r0, r3
   13e1a:	4b48      	ldr	r3, [pc, #288]	; (13f3c <_i2c_master_interrupt_handler+0x270>)
   13e1c:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   13e1e:	697b      	ldr	r3, [r7, #20]
   13e20:	8b5b      	ldrh	r3, [r3, #26]
   13e22:	b29b      	uxth	r3, r3
   13e24:	2b00      	cmp	r3, #0
   13e26:	d047      	beq.n	13eb8 <_i2c_master_interrupt_handler+0x1ec>
   13e28:	697b      	ldr	r3, [r7, #20]
   13e2a:	8b9b      	ldrh	r3, [r3, #28]
   13e2c:	b29b      	uxth	r3, r3
   13e2e:	2b00      	cmp	r3, #0
   13e30:	d142      	bne.n	13eb8 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
   13e32:	697b      	ldr	r3, [r7, #20]
   13e34:	2225      	movs	r2, #37	; 0x25
   13e36:	5c9b      	ldrb	r3, [r3, r2]
   13e38:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   13e3a:	2b05      	cmp	r3, #5
   13e3c:	d13c      	bne.n	13eb8 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
   13e3e:	697b      	ldr	r3, [r7, #20]
   13e40:	2224      	movs	r2, #36	; 0x24
   13e42:	5c9b      	ldrb	r3, [r3, r2]
   13e44:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   13e46:	2b01      	cmp	r3, #1
   13e48:	d136      	bne.n	13eb8 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   13e4a:	693b      	ldr	r3, [r7, #16]
   13e4c:	7e1b      	ldrb	r3, [r3, #24]
   13e4e:	b2db      	uxtb	r3, r3
   13e50:	001a      	movs	r2, r3
   13e52:	2302      	movs	r3, #2
   13e54:	4013      	ands	r3, r2
   13e56:	d002      	beq.n	13e5e <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   13e58:	693b      	ldr	r3, [r7, #16]
   13e5a:	2202      	movs	r2, #2
   13e5c:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   13e5e:	693b      	ldr	r3, [r7, #16]
   13e60:	2203      	movs	r2, #3
   13e62:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
   13e64:	697b      	ldr	r3, [r7, #20]
   13e66:	2200      	movs	r2, #0
   13e68:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   13e6a:	697b      	ldr	r3, [r7, #20]
   13e6c:	2225      	movs	r2, #37	; 0x25
   13e6e:	2100      	movs	r1, #0
   13e70:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
   13e72:	230e      	movs	r3, #14
   13e74:	18fb      	adds	r3, r7, r3
   13e76:	781b      	ldrb	r3, [r3, #0]
   13e78:	2202      	movs	r2, #2
   13e7a:	4013      	ands	r3, r2
   13e7c:	d00b      	beq.n	13e96 <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
   13e7e:	697b      	ldr	r3, [r7, #20]
   13e80:	2224      	movs	r2, #36	; 0x24
   13e82:	5c9b      	ldrb	r3, [r3, r2]
   13e84:	b2db      	uxtb	r3, r3
   13e86:	2b01      	cmp	r3, #1
   13e88:	d105      	bne.n	13e96 <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
   13e8a:	697b      	ldr	r3, [r7, #20]
   13e8c:	691b      	ldr	r3, [r3, #16]
   13e8e:	697a      	ldr	r2, [r7, #20]
   13e90:	0010      	movs	r0, r2
   13e92:	4798      	blx	r3
   13e94:	e010      	b.n	13eb8 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
   13e96:	230e      	movs	r3, #14
   13e98:	18fb      	adds	r3, r7, r3
   13e9a:	781b      	ldrb	r3, [r3, #0]
   13e9c:	2201      	movs	r2, #1
   13e9e:	4013      	ands	r3, r2
   13ea0:	d00a      	beq.n	13eb8 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
   13ea2:	697b      	ldr	r3, [r7, #20]
   13ea4:	2224      	movs	r2, #36	; 0x24
   13ea6:	5c9b      	ldrb	r3, [r3, r2]
   13ea8:	b2db      	uxtb	r3, r3
   13eaa:	2b00      	cmp	r3, #0
   13eac:	d104      	bne.n	13eb8 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   13eae:	697b      	ldr	r3, [r7, #20]
   13eb0:	68db      	ldr	r3, [r3, #12]
   13eb2:	697a      	ldr	r2, [r7, #20]
   13eb4:	0010      	movs	r0, r2
   13eb6:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
   13eb8:	697b      	ldr	r3, [r7, #20]
   13eba:	2225      	movs	r2, #37	; 0x25
   13ebc:	5c9b      	ldrb	r3, [r3, r2]
   13ebe:	b2db      	uxtb	r3, r3
   13ec0:	2b05      	cmp	r3, #5
   13ec2:	d02e      	beq.n	13f22 <_i2c_master_interrupt_handler+0x256>
   13ec4:	697b      	ldr	r3, [r7, #20]
   13ec6:	2225      	movs	r2, #37	; 0x25
   13ec8:	5c9b      	ldrb	r3, [r3, r2]
   13eca:	b2db      	uxtb	r3, r3
   13ecc:	2b00      	cmp	r3, #0
   13ece:	d028      	beq.n	13f22 <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
   13ed0:	693b      	ldr	r3, [r7, #16]
   13ed2:	2203      	movs	r2, #3
   13ed4:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   13ed6:	697b      	ldr	r3, [r7, #20]
   13ed8:	2200      	movs	r2, #0
   13eda:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
   13edc:	697b      	ldr	r3, [r7, #20]
   13ede:	2200      	movs	r2, #0
   13ee0:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   13ee2:	697b      	ldr	r3, [r7, #20]
   13ee4:	2225      	movs	r2, #37	; 0x25
   13ee6:	5c9b      	ldrb	r3, [r3, r2]
   13ee8:	b2db      	uxtb	r3, r3
   13eea:	2b41      	cmp	r3, #65	; 0x41
   13eec:	d00e      	beq.n	13f0c <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
   13eee:	697b      	ldr	r3, [r7, #20]
   13ef0:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   13ef2:	2b00      	cmp	r3, #0
   13ef4:	d00a      	beq.n	13f0c <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
   13ef6:	697b      	ldr	r3, [r7, #20]
   13ef8:	0018      	movs	r0, r3
   13efa:	4b0e      	ldr	r3, [pc, #56]	; (13f34 <_i2c_master_interrupt_handler+0x268>)
   13efc:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
   13efe:	693b      	ldr	r3, [r7, #16]
   13f00:	685b      	ldr	r3, [r3, #4]
   13f02:	22e0      	movs	r2, #224	; 0xe0
   13f04:	02d2      	lsls	r2, r2, #11
   13f06:	431a      	orrs	r2, r3
   13f08:	693b      	ldr	r3, [r7, #16]
   13f0a:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
   13f0c:	230e      	movs	r3, #14
   13f0e:	18fb      	adds	r3, r7, r3
   13f10:	781b      	ldrb	r3, [r3, #0]
   13f12:	2204      	movs	r2, #4
   13f14:	4013      	ands	r3, r2
   13f16:	d004      	beq.n	13f22 <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
   13f18:	697b      	ldr	r3, [r7, #20]
   13f1a:	695b      	ldr	r3, [r3, #20]
   13f1c:	697a      	ldr	r2, [r7, #20]
   13f1e:	0010      	movs	r0, r2
   13f20:	4798      	blx	r3
		}
	}
}
   13f22:	46c0      	nop			; (mov r8, r8)
   13f24:	46bd      	mov	sp, r7
   13f26:	b006      	add	sp, #24
   13f28:	bd80      	pop	{r7, pc}
   13f2a:	46c0      	nop			; (mov r8, r8)
   13f2c:	20005c58 	.word	0x20005c58
   13f30:	0001394d 	.word	0x0001394d
   13f34:	000137bd 	.word	0x000137bd
   13f38:	000138d1 	.word	0x000138d1
   13f3c:	000137e1 	.word	0x000137e1

00013f40 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   13f40:	b580      	push	{r7, lr}
   13f42:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   13f44:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   13f48:	4b02      	ldr	r3, [pc, #8]	; (13f54 <NVIC_SystemReset+0x14>)
   13f4a:	4a03      	ldr	r2, [pc, #12]	; (13f58 <NVIC_SystemReset+0x18>)
   13f4c:	60da      	str	r2, [r3, #12]
   13f4e:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   13f52:	e7fe      	b.n	13f52 <NVIC_SystemReset+0x12>
   13f54:	e000ed00 	.word	0xe000ed00
   13f58:	05fa0004 	.word	0x05fa0004

00013f5c <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   13f5c:	b580      	push	{r7, lr}
   13f5e:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   13f60:	4b02      	ldr	r3, [pc, #8]	; (13f6c <system_reset+0x10>)
   13f62:	4798      	blx	r3
}
   13f64:	46c0      	nop			; (mov r8, r8)
   13f66:	46bd      	mov	sp, r7
   13f68:	bd80      	pop	{r7, pc}
   13f6a:	46c0      	nop			; (mov r8, r8)
   13f6c:	00013f41 	.word	0x00013f41

00013f70 <vCommandConsoleTask>:
/******************************************************************************
 * CLI Thread
 ******************************************************************************/

void vCommandConsoleTask(void *pvParameters)
{
   13f70:	b580      	push	{r7, lr}
   13f72:	b086      	sub	sp, #24
   13f74:	af00      	add	r7, sp, #0
   13f76:	6078      	str	r0, [r7, #4]
    // REGISTER COMMANDS HERE
    FreeRTOS_CLIRegisterCommand(&xOTAUCommand);
   13f78:	4b9a      	ldr	r3, [pc, #616]	; (141e4 <vCommandConsoleTask+0x274>)
   13f7a:	0018      	movs	r0, r3
   13f7c:	4b9a      	ldr	r3, [pc, #616]	; (141e8 <vCommandConsoleTask+0x278>)
   13f7e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xImuGetCommand);
   13f80:	4b9a      	ldr	r3, [pc, #616]	; (141ec <vCommandConsoleTask+0x27c>)
   13f82:	0018      	movs	r0, r3
   13f84:	4b98      	ldr	r3, [pc, #608]	; (141e8 <vCommandConsoleTask+0x278>)
   13f86:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xClearScreen);
   13f88:	4b99      	ldr	r3, [pc, #612]	; (141f0 <vCommandConsoleTask+0x280>)
   13f8a:	0018      	movs	r0, r3
   13f8c:	4b96      	ldr	r3, [pc, #600]	; (141e8 <vCommandConsoleTask+0x278>)
   13f8e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xResetCommand);
   13f90:	4b98      	ldr	r3, [pc, #608]	; (141f4 <vCommandConsoleTask+0x284>)
   13f92:	0018      	movs	r0, r3
   13f94:	4b94      	ldr	r3, [pc, #592]	; (141e8 <vCommandConsoleTask+0x278>)
   13f96:	4798      	blx	r3
    //FreeRTOS_CLIRegisterCommand(&xNeotrellisTurnLEDCommand);
    //FreeRTOS_CLIRegisterCommand(&xNeotrellisProcessButtonCommand);
    FreeRTOS_CLIRegisterCommand(&xDistanceSensorGetDistance);
   13f98:	4b97      	ldr	r3, [pc, #604]	; (141f8 <vCommandConsoleTask+0x288>)
   13f9a:	0018      	movs	r0, r3
   13f9c:	4b92      	ldr	r3, [pc, #584]	; (141e8 <vCommandConsoleTask+0x278>)
   13f9e:	4798      	blx	r3
    //FreeRTOS_CLIRegisterCommand(&xSendDummyGameData);
	FreeRTOS_CLIRegisterCommand(&xI2cScan);
   13fa0:	4b96      	ldr	r3, [pc, #600]	; (141fc <vCommandConsoleTask+0x28c>)
   13fa2:	0018      	movs	r0, r3
   13fa4:	4b90      	ldr	r3, [pc, #576]	; (141e8 <vCommandConsoleTask+0x278>)
   13fa6:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xGpsGetCommand); //added by Derek
   13fa8:	4b95      	ldr	r3, [pc, #596]	; (14200 <vCommandConsoleTask+0x290>)
   13faa:	0018      	movs	r0, r3
   13fac:	4b8e      	ldr	r3, [pc, #568]	; (141e8 <vCommandConsoleTask+0x278>)
   13fae:	4798      	blx	r3
	
    char cRxedChar[2];
    unsigned char cInputIndex = 0;
   13fb0:	2317      	movs	r3, #23
   13fb2:	18fb      	adds	r3, r7, r3
   13fb4:	2200      	movs	r2, #0
   13fb6:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString((char *)pcWelcomeMessage);
   13fb8:	4b92      	ldr	r3, [pc, #584]	; (14204 <vCommandConsoleTask+0x294>)
   13fba:	0018      	movs	r0, r3
   13fbc:	4b92      	ldr	r3, [pc, #584]	; (14208 <vCommandConsoleTask+0x298>)
   13fbe:	4798      	blx	r3

    // Any semaphores/mutexes/etc you needed to be initialized, you can do them here
    cliCharReadySemaphore = xSemaphoreCreateBinary();
   13fc0:	2203      	movs	r2, #3
   13fc2:	2100      	movs	r1, #0
   13fc4:	2001      	movs	r0, #1
   13fc6:	4b91      	ldr	r3, [pc, #580]	; (1420c <vCommandConsoleTask+0x29c>)
   13fc8:	4798      	blx	r3
   13fca:	0002      	movs	r2, r0
   13fcc:	4b90      	ldr	r3, [pc, #576]	; (14210 <vCommandConsoleTask+0x2a0>)
   13fce:	601a      	str	r2, [r3, #0]
    if (cliCharReadySemaphore == NULL) {
   13fd0:	4b8f      	ldr	r3, [pc, #572]	; (14210 <vCommandConsoleTask+0x2a0>)
   13fd2:	681b      	ldr	r3, [r3, #0]
   13fd4:	2b00      	cmp	r3, #0
   13fd6:	d107      	bne.n	13fe8 <vCommandConsoleTask+0x78>
        LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
   13fd8:	4b8e      	ldr	r3, [pc, #568]	; (14214 <vCommandConsoleTask+0x2a4>)
   13fda:	0019      	movs	r1, r3
   13fdc:	2003      	movs	r0, #3
   13fde:	4b8e      	ldr	r3, [pc, #568]	; (14218 <vCommandConsoleTask+0x2a8>)
   13fe0:	4798      	blx	r3
        vTaskSuspend(NULL);
   13fe2:	2000      	movs	r0, #0
   13fe4:	4b8d      	ldr	r3, [pc, #564]	; (1421c <vCommandConsoleTask+0x2ac>)
   13fe6:	4798      	blx	r3
    }

    for (;;) {
        FreeRTOS_read(&cRxedChar[0]);
   13fe8:	230c      	movs	r3, #12
   13fea:	18fb      	adds	r3, r7, r3
   13fec:	0018      	movs	r0, r3
   13fee:	4b8c      	ldr	r3, [pc, #560]	; (14220 <vCommandConsoleTask+0x2b0>)
   13ff0:	4798      	blx	r3

        if (cRxedChar[0] == '\n' || cRxedChar[0] == '\r') {
   13ff2:	230c      	movs	r3, #12
   13ff4:	18fb      	adds	r3, r7, r3
   13ff6:	781b      	ldrb	r3, [r3, #0]
   13ff8:	2b0a      	cmp	r3, #10
   13ffa:	d004      	beq.n	14006 <vCommandConsoleTask+0x96>
   13ffc:	230c      	movs	r3, #12
   13ffe:	18fb      	adds	r3, r7, r3
   14000:	781b      	ldrb	r3, [r3, #0]
   14002:	2b0d      	cmp	r3, #13
   14004:	d137      	bne.n	14076 <vCommandConsoleTask+0x106>
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString((char *)"\r\n");
   14006:	4b87      	ldr	r3, [pc, #540]	; (14224 <vCommandConsoleTask+0x2b4>)
   14008:	0018      	movs	r0, r3
   1400a:	4b7f      	ldr	r3, [pc, #508]	; (14208 <vCommandConsoleTask+0x298>)
   1400c:	4798      	blx	r3
            // Copy for last command
            isEscapeCode = false;
   1400e:	4b86      	ldr	r3, [pc, #536]	; (14228 <vCommandConsoleTask+0x2b8>)
   14010:	2200      	movs	r2, #0
   14012:	701a      	strb	r2, [r3, #0]
            pcEscapeCodePos = 0;
   14014:	4b85      	ldr	r3, [pc, #532]	; (1422c <vCommandConsoleTask+0x2bc>)
   14016:	2200      	movs	r2, #0
   14018:	701a      	strb	r2, [r3, #0]
            strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI - 1);
   1401a:	4985      	ldr	r1, [pc, #532]	; (14230 <vCommandConsoleTask+0x2c0>)
   1401c:	4b85      	ldr	r3, [pc, #532]	; (14234 <vCommandConsoleTask+0x2c4>)
   1401e:	2231      	movs	r2, #49	; 0x31
   14020:	0018      	movs	r0, r3
   14022:	4b85      	ldr	r3, [pc, #532]	; (14238 <vCommandConsoleTask+0x2c8>)
   14024:	4798      	blx	r3
            pcLastCommand[MAX_INPUT_LENGTH_CLI - 1] = 0;  // Ensure null termination
   14026:	4b83      	ldr	r3, [pc, #524]	; (14234 <vCommandConsoleTask+0x2c4>)
   14028:	2231      	movs	r2, #49	; 0x31
   1402a:	2100      	movs	r1, #0
   1402c:	5499      	strb	r1, [r3, r2]
            explanation of why this is. */
            do {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString,        /* The command string.*/
   1402e:	4983      	ldr	r1, [pc, #524]	; (1423c <vCommandConsoleTask+0x2cc>)
   14030:	4b7f      	ldr	r3, [pc, #508]	; (14230 <vCommandConsoleTask+0x2c0>)
   14032:	2264      	movs	r2, #100	; 0x64
   14034:	0018      	movs	r0, r3
   14036:	4b82      	ldr	r3, [pc, #520]	; (14240 <vCommandConsoleTask+0x2d0>)
   14038:	4798      	blx	r3
   1403a:	0003      	movs	r3, r0
   1403c:	613b      	str	r3, [r7, #16]
                );

                /* Write the output generated by the command interpreter to the
                console. */
                // Ensure it is null terminated
                pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
   1403e:	4b7f      	ldr	r3, [pc, #508]	; (1423c <vCommandConsoleTask+0x2cc>)
   14040:	2263      	movs	r2, #99	; 0x63
   14042:	2100      	movs	r1, #0
   14044:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
   14046:	4b7d      	ldr	r3, [pc, #500]	; (1423c <vCommandConsoleTask+0x2cc>)
   14048:	0018      	movs	r0, r3
   1404a:	4b6f      	ldr	r3, [pc, #444]	; (14208 <vCommandConsoleTask+0x298>)
   1404c:	4798      	blx	r3

            } while (xMoreDataToFollow != pdFALSE);
   1404e:	693b      	ldr	r3, [r7, #16]
   14050:	2b00      	cmp	r3, #0
   14052:	d1ec      	bne.n	1402e <vCommandConsoleTask+0xbe>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
   14054:	2317      	movs	r3, #23
   14056:	18fb      	adds	r3, r7, r3
   14058:	2200      	movs	r2, #0
   1405a:	701a      	strb	r2, [r3, #0]
            memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   1405c:	4b74      	ldr	r3, [pc, #464]	; (14230 <vCommandConsoleTask+0x2c0>)
   1405e:	2232      	movs	r2, #50	; 0x32
   14060:	2100      	movs	r1, #0
   14062:	0018      	movs	r0, r3
   14064:	4b77      	ldr	r3, [pc, #476]	; (14244 <vCommandConsoleTask+0x2d4>)
   14066:	4798      	blx	r3
            memset(pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
   14068:	4b74      	ldr	r3, [pc, #464]	; (1423c <vCommandConsoleTask+0x2cc>)
   1406a:	2264      	movs	r2, #100	; 0x64
   1406c:	2100      	movs	r1, #0
   1406e:	0018      	movs	r0, r3
   14070:	4b74      	ldr	r3, [pc, #464]	; (14244 <vCommandConsoleTask+0x2d4>)
   14072:	4798      	blx	r3
   14074:	e0b5      	b.n	141e2 <vCommandConsoleTask+0x272>
        } else {
            /* The if() clause performs the processing after a newline character
is received.  This else clause performs the processing if any other
character is received. */

            if (true == isEscapeCode) {
   14076:	4b6c      	ldr	r3, [pc, #432]	; (14228 <vCommandConsoleTask+0x2b8>)
   14078:	781b      	ldrb	r3, [r3, #0]
   1407a:	2b00      	cmp	r3, #0
   1407c:	d059      	beq.n	14132 <vCommandConsoleTask+0x1c2>
                if (pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
   1407e:	4b6b      	ldr	r3, [pc, #428]	; (1422c <vCommandConsoleTask+0x2bc>)
   14080:	781b      	ldrb	r3, [r3, #0]
   14082:	2b03      	cmp	r3, #3
   14084:	d80c      	bhi.n	140a0 <vCommandConsoleTask+0x130>
                    pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
   14086:	4b69      	ldr	r3, [pc, #420]	; (1422c <vCommandConsoleTask+0x2bc>)
   14088:	781b      	ldrb	r3, [r3, #0]
   1408a:	1c5a      	adds	r2, r3, #1
   1408c:	b2d1      	uxtb	r1, r2
   1408e:	4a67      	ldr	r2, [pc, #412]	; (1422c <vCommandConsoleTask+0x2bc>)
   14090:	7011      	strb	r1, [r2, #0]
   14092:	001a      	movs	r2, r3
   14094:	230c      	movs	r3, #12
   14096:	18fb      	adds	r3, r7, r3
   14098:	7819      	ldrb	r1, [r3, #0]
   1409a:	4b6b      	ldr	r3, [pc, #428]	; (14248 <vCommandConsoleTask+0x2d8>)
   1409c:	5499      	strb	r1, [r3, r2]
   1409e:	e005      	b.n	140ac <vCommandConsoleTask+0x13c>
                } else {
                    isEscapeCode = false;
   140a0:	4b61      	ldr	r3, [pc, #388]	; (14228 <vCommandConsoleTask+0x2b8>)
   140a2:	2200      	movs	r2, #0
   140a4:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   140a6:	4b61      	ldr	r3, [pc, #388]	; (1422c <vCommandConsoleTask+0x2bc>)
   140a8:	2200      	movs	r2, #0
   140aa:	701a      	strb	r2, [r3, #0]
                }

                if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
   140ac:	4b5f      	ldr	r3, [pc, #380]	; (1422c <vCommandConsoleTask+0x2bc>)
   140ae:	781b      	ldrb	r3, [r3, #0]
   140b0:	2b01      	cmp	r3, #1
   140b2:	d999      	bls.n	13fe8 <vCommandConsoleTask+0x78>
                    // UP ARROW SHOW LAST COMMAND
                    if (strcasecmp(pcEscapeCodes, "oa")) {
   140b4:	4a65      	ldr	r2, [pc, #404]	; (1424c <vCommandConsoleTask+0x2dc>)
   140b6:	4b64      	ldr	r3, [pc, #400]	; (14248 <vCommandConsoleTask+0x2d8>)
   140b8:	0011      	movs	r1, r2
   140ba:	0018      	movs	r0, r3
   140bc:	4b64      	ldr	r3, [pc, #400]	; (14250 <vCommandConsoleTask+0x2e0>)
   140be:	4798      	blx	r3
   140c0:	1e03      	subs	r3, r0, #0
   140c2:	d02f      	beq.n	14124 <vCommandConsoleTask+0x1b4>
                        /// Delete current line and add prompt (">")
                        sprintf(pcInputString, "%c[2K\r>", 27);
   140c4:	4963      	ldr	r1, [pc, #396]	; (14254 <vCommandConsoleTask+0x2e4>)
   140c6:	4b5a      	ldr	r3, [pc, #360]	; (14230 <vCommandConsoleTask+0x2c0>)
   140c8:	221b      	movs	r2, #27
   140ca:	0018      	movs	r0, r3
   140cc:	4b62      	ldr	r3, [pc, #392]	; (14258 <vCommandConsoleTask+0x2e8>)
   140ce:	4798      	blx	r3
                        SerialConsoleWriteString((char *)pcInputString);
   140d0:	4b57      	ldr	r3, [pc, #348]	; (14230 <vCommandConsoleTask+0x2c0>)
   140d2:	0018      	movs	r0, r3
   140d4:	4b4c      	ldr	r3, [pc, #304]	; (14208 <vCommandConsoleTask+0x298>)
   140d6:	4798      	blx	r3
                        /// Clear input buffer
                        cInputIndex = 0;
   140d8:	2317      	movs	r3, #23
   140da:	18fb      	adds	r3, r7, r3
   140dc:	2200      	movs	r2, #0
   140de:	701a      	strb	r2, [r3, #0]
                        memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   140e0:	4b53      	ldr	r3, [pc, #332]	; (14230 <vCommandConsoleTask+0x2c0>)
   140e2:	2232      	movs	r2, #50	; 0x32
   140e4:	2100      	movs	r1, #0
   140e6:	0018      	movs	r0, r3
   140e8:	4b56      	ldr	r3, [pc, #344]	; (14244 <vCommandConsoleTask+0x2d4>)
   140ea:	4798      	blx	r3
                        /// Send last command
                        strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1);
   140ec:	4951      	ldr	r1, [pc, #324]	; (14234 <vCommandConsoleTask+0x2c4>)
   140ee:	4b50      	ldr	r3, [pc, #320]	; (14230 <vCommandConsoleTask+0x2c0>)
   140f0:	2231      	movs	r2, #49	; 0x31
   140f2:	0018      	movs	r0, r3
   140f4:	4b50      	ldr	r3, [pc, #320]	; (14238 <vCommandConsoleTask+0x2c8>)
   140f6:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
   140f8:	4b4d      	ldr	r3, [pc, #308]	; (14230 <vCommandConsoleTask+0x2c0>)
   140fa:	0018      	movs	r0, r3
   140fc:	4b57      	ldr	r3, [pc, #348]	; (1425c <vCommandConsoleTask+0x2ec>)
   140fe:	4798      	blx	r3
   14100:	0003      	movs	r3, r0
   14102:	2b30      	cmp	r3, #48	; 0x30
   14104:	d806      	bhi.n	14114 <vCommandConsoleTask+0x1a4>
   14106:	4b4b      	ldr	r3, [pc, #300]	; (14234 <vCommandConsoleTask+0x2c4>)
   14108:	0018      	movs	r0, r3
   1410a:	4b54      	ldr	r3, [pc, #336]	; (1425c <vCommandConsoleTask+0x2ec>)
   1410c:	4798      	blx	r3
   1410e:	0003      	movs	r3, r0
   14110:	b2da      	uxtb	r2, r3
   14112:	e000      	b.n	14116 <vCommandConsoleTask+0x1a6>
   14114:	2231      	movs	r2, #49	; 0x31
   14116:	2317      	movs	r3, #23
   14118:	18fb      	adds	r3, r7, r3
   1411a:	701a      	strb	r2, [r3, #0]
                        SerialConsoleWriteString(pcInputString);
   1411c:	4b44      	ldr	r3, [pc, #272]	; (14230 <vCommandConsoleTask+0x2c0>)
   1411e:	0018      	movs	r0, r3
   14120:	4b39      	ldr	r3, [pc, #228]	; (14208 <vCommandConsoleTask+0x298>)
   14122:	4798      	blx	r3
                    }

                    isEscapeCode = false;
   14124:	4b40      	ldr	r3, [pc, #256]	; (14228 <vCommandConsoleTask+0x2b8>)
   14126:	2200      	movs	r2, #0
   14128:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   1412a:	4b40      	ldr	r3, [pc, #256]	; (1422c <vCommandConsoleTask+0x2bc>)
   1412c:	2200      	movs	r2, #0
   1412e:	701a      	strb	r2, [r3, #0]
   14130:	e75a      	b.n	13fe8 <vCommandConsoleTask+0x78>
            }
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            else if (cRxedChar[0] == '\r') {
   14132:	230c      	movs	r3, #12
   14134:	18fb      	adds	r3, r7, r3
   14136:	781b      	ldrb	r3, [r3, #0]
   14138:	2b0d      	cmp	r3, #13
   1413a:	d100      	bne.n	1413e <vCommandConsoleTask+0x1ce>
   1413c:	e754      	b.n	13fe8 <vCommandConsoleTask+0x78>
                /* Ignore carriage returns. */
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   1413e:	230c      	movs	r3, #12
   14140:	18fb      	adds	r3, r7, r3
   14142:	781b      	ldrb	r3, [r3, #0]
   14144:	2b08      	cmp	r3, #8
   14146:	d004      	beq.n	14152 <vCommandConsoleTask+0x1e2>
   14148:	230c      	movs	r3, #12
   1414a:	18fb      	adds	r3, r7, r3
   1414c:	781b      	ldrb	r3, [r3, #0]
   1414e:	2b7f      	cmp	r3, #127	; 0x7f
   14150:	d11c      	bne.n	1418c <vCommandConsoleTask+0x21c>
                char erase[4] = {0x08, 0x20, 0x08, 0x00};
   14152:	2308      	movs	r3, #8
   14154:	18fb      	adds	r3, r7, r3
   14156:	4a42      	ldr	r2, [pc, #264]	; (14260 <vCommandConsoleTask+0x2f0>)
   14158:	6812      	ldr	r2, [r2, #0]
   1415a:	601a      	str	r2, [r3, #0]
                SerialConsoleWriteString(erase);
   1415c:	2308      	movs	r3, #8
   1415e:	18fb      	adds	r3, r7, r3
   14160:	0018      	movs	r0, r3
   14162:	4b29      	ldr	r3, [pc, #164]	; (14208 <vCommandConsoleTask+0x298>)
   14164:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if (cInputIndex > 0) {
   14166:	2317      	movs	r3, #23
   14168:	18fb      	adds	r3, r7, r3
   1416a:	781b      	ldrb	r3, [r3, #0]
   1416c:	2b00      	cmp	r3, #0
   1416e:	d037      	beq.n	141e0 <vCommandConsoleTask+0x270>
                    cInputIndex--;
   14170:	2317      	movs	r3, #23
   14172:	18fb      	adds	r3, r7, r3
   14174:	781a      	ldrb	r2, [r3, #0]
   14176:	2317      	movs	r3, #23
   14178:	18fb      	adds	r3, r7, r3
   1417a:	3a01      	subs	r2, #1
   1417c:	701a      	strb	r2, [r3, #0]
                    pcInputString[cInputIndex] = 0;
   1417e:	2317      	movs	r3, #23
   14180:	18fb      	adds	r3, r7, r3
   14182:	781b      	ldrb	r3, [r3, #0]
   14184:	4a2a      	ldr	r2, [pc, #168]	; (14230 <vCommandConsoleTask+0x2c0>)
   14186:	2100      	movs	r1, #0
   14188:	54d1      	strb	r1, [r2, r3]
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   1418a:	e029      	b.n	141e0 <vCommandConsoleTask+0x270>
                }
            }
            // ESC
            else if (cRxedChar[0] == ASCII_ESC) {
   1418c:	230c      	movs	r3, #12
   1418e:	18fb      	adds	r3, r7, r3
   14190:	781b      	ldrb	r3, [r3, #0]
   14192:	2b1b      	cmp	r3, #27
   14194:	d106      	bne.n	141a4 <vCommandConsoleTask+0x234>
                isEscapeCode = true;  // Next characters will be code arguments
   14196:	4b24      	ldr	r3, [pc, #144]	; (14228 <vCommandConsoleTask+0x2b8>)
   14198:	2201      	movs	r2, #1
   1419a:	701a      	strb	r2, [r3, #0]
                pcEscapeCodePos = 0;
   1419c:	4b23      	ldr	r3, [pc, #140]	; (1422c <vCommandConsoleTask+0x2bc>)
   1419e:	2200      	movs	r2, #0
   141a0:	701a      	strb	r2, [r3, #0]
   141a2:	e721      	b.n	13fe8 <vCommandConsoleTask+0x78>
            } else {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if (cInputIndex < MAX_INPUT_LENGTH_CLI) {
   141a4:	2317      	movs	r3, #23
   141a6:	18fb      	adds	r3, r7, r3
   141a8:	781b      	ldrb	r3, [r3, #0]
   141aa:	2b31      	cmp	r3, #49	; 0x31
   141ac:	d80e      	bhi.n	141cc <vCommandConsoleTask+0x25c>
                    pcInputString[cInputIndex] = cRxedChar[0];
   141ae:	2317      	movs	r3, #23
   141b0:	18fb      	adds	r3, r7, r3
   141b2:	781b      	ldrb	r3, [r3, #0]
   141b4:	220c      	movs	r2, #12
   141b6:	18ba      	adds	r2, r7, r2
   141b8:	7811      	ldrb	r1, [r2, #0]
   141ba:	4a1d      	ldr	r2, [pc, #116]	; (14230 <vCommandConsoleTask+0x2c0>)
   141bc:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
   141be:	2317      	movs	r3, #23
   141c0:	18fb      	adds	r3, r7, r3
   141c2:	781a      	ldrb	r2, [r3, #0]
   141c4:	2317      	movs	r3, #23
   141c6:	18fb      	adds	r3, r7, r3
   141c8:	3201      	adds	r2, #1
   141ca:	701a      	strb	r2, [r3, #0]
                }

                // Order Echo
                cRxedChar[1] = 0;
   141cc:	230c      	movs	r3, #12
   141ce:	18fb      	adds	r3, r7, r3
   141d0:	2200      	movs	r2, #0
   141d2:	705a      	strb	r2, [r3, #1]
                SerialConsoleWriteString(&cRxedChar[0]);
   141d4:	230c      	movs	r3, #12
   141d6:	18fb      	adds	r3, r7, r3
   141d8:	0018      	movs	r0, r3
   141da:	4b0b      	ldr	r3, [pc, #44]	; (14208 <vCommandConsoleTask+0x298>)
   141dc:	4798      	blx	r3
   141de:	e703      	b.n	13fe8 <vCommandConsoleTask+0x78>
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   141e0:	46c0      	nop			; (mov r8, r8)
        FreeRTOS_read(&cRxedChar[0]);
   141e2:	e701      	b.n	13fe8 <vCommandConsoleTask+0x78>
   141e4:	00036f7c 	.word	0x00036f7c
   141e8:	00018b5d 	.word	0x00018b5d
   141ec:	00036f6c 	.word	0x00036f6c
   141f0:	00036fcc 	.word	0x00036fcc
   141f4:	00036f8c 	.word	0x00036f8c
   141f8:	00036f9c 	.word	0x00036f9c
   141fc:	00036fac 	.word	0x00036fac
   14200:	00036fbc 	.word	0x00036fbc
   14204:	00036c60 	.word	0x00036c60
   14208:	0001ea85 	.word	0x0001ea85
   1420c:	0001b125 	.word	0x0001b125
   14210:	200047e0 	.word	0x200047e0
   14214:	00036dd8 	.word	0x00036dd8
   14218:	0001eb71 	.word	0x0001eb71
   1421c:	0001cf11 	.word	0x0001cf11
   14220:	00014265 	.word	0x00014265
   14224:	00036df8 	.word	0x00036df8
   14228:	20000514 	.word	0x20000514
   1422c:	20000515 	.word	0x20000515
   14230:	2000054c 	.word	0x2000054c
   14234:	20000518 	.word	0x20000518
   14238:	000359d7 	.word	0x000359d7
   1423c:	20000580 	.word	0x20000580
   14240:	00018bcd 	.word	0x00018bcd
   14244:	000355ef 	.word	0x000355ef
   14248:	200005e4 	.word	0x200005e4
   1424c:	00036dfc 	.word	0x00036dfc
   14250:	000358f1 	.word	0x000358f1
   14254:	00036e00 	.word	0x00036e00
   14258:	000358ad 	.word	0x000358ad
   1425c:	000359a7 	.word	0x000359a7
   14260:	00036e08 	.word	0x00036e08

00014264 <FreeRTOS_read>:
 * @brief		This function block the thread unless we received a character
 * @details		This function blocks until UartSemaphoreHandle is released to continue reading characters in CLI
 * @note
 */
static void FreeRTOS_read(char *character)
{
   14264:	b580      	push	{r7, lr}
   14266:	b084      	sub	sp, #16
   14268:	af00      	add	r7, sp, #0
   1426a:	6078      	str	r0, [r7, #4]
    // We check if there are more characters in the buffer that arrived since the last time
    // This function returns -1 if the buffer is empty, other value otherwise
    int ret = SerialConsoleReadCharacter((uint8_t *)character);
   1426c:	687b      	ldr	r3, [r7, #4]
   1426e:	0018      	movs	r0, r3
   14270:	4b0c      	ldr	r3, [pc, #48]	; (142a4 <FreeRTOS_read+0x40>)
   14272:	4798      	blx	r3
   14274:	0003      	movs	r3, r0
   14276:	60fb      	str	r3, [r7, #12]

    while (ret == -1) {
   14278:	e00d      	b.n	14296 <FreeRTOS_read+0x32>
        // there are no more characters - block the thread until we receive a semaphore indicating reception of at least 1 character
        xSemaphoreTake(cliCharReadySemaphore, portMAX_DELAY);
   1427a:	4b0b      	ldr	r3, [pc, #44]	; (142a8 <FreeRTOS_read+0x44>)
   1427c:	681a      	ldr	r2, [r3, #0]
   1427e:	2301      	movs	r3, #1
   14280:	425b      	negs	r3, r3
   14282:	0019      	movs	r1, r3
   14284:	0010      	movs	r0, r2
   14286:	4b09      	ldr	r3, [pc, #36]	; (142ac <FreeRTOS_read+0x48>)
   14288:	4798      	blx	r3

        // If we are here it means there are characters in the buffer - we re-read from the buffer to get the newly acquired character
        ret = SerialConsoleReadCharacter((uint8_t *)character);
   1428a:	687b      	ldr	r3, [r7, #4]
   1428c:	0018      	movs	r0, r3
   1428e:	4b05      	ldr	r3, [pc, #20]	; (142a4 <FreeRTOS_read+0x40>)
   14290:	4798      	blx	r3
   14292:	0003      	movs	r3, r0
   14294:	60fb      	str	r3, [r7, #12]
    while (ret == -1) {
   14296:	68fb      	ldr	r3, [r7, #12]
   14298:	3301      	adds	r3, #1
   1429a:	d0ee      	beq.n	1427a <FreeRTOS_read+0x16>
    }
}
   1429c:	46c0      	nop			; (mov r8, r8)
   1429e:	46bd      	mov	sp, r7
   142a0:	b004      	add	sp, #16
   142a2:	bd80      	pop	{r7, pc}
   142a4:	0001eb21 	.word	0x0001eb21
   142a8:	200047e0 	.word	0x200047e0
   142ac:	0001c0dd 	.word	0x0001c0dd

000142b0 <CliCharReadySemaphoreGiveFromISR>:
 * @brief		Give cliCharReadySemaphore binary semaphore from an ISR
 * @details
 * @note
 */
void CliCharReadySemaphoreGiveFromISR(void)
{
   142b0:	b580      	push	{r7, lr}
   142b2:	af00      	add	r7, sp, #0
    static BaseType_t xHigherPriorityTaskWoken;
    xHigherPriorityTaskWoken = pdFALSE;
   142b4:	4b0a      	ldr	r3, [pc, #40]	; (142e0 <CliCharReadySemaphoreGiveFromISR+0x30>)
   142b6:	2200      	movs	r2, #0
   142b8:	601a      	str	r2, [r3, #0]
    xSemaphoreGiveFromISR(cliCharReadySemaphore, &xHigherPriorityTaskWoken);
   142ba:	4b0a      	ldr	r3, [pc, #40]	; (142e4 <CliCharReadySemaphoreGiveFromISR+0x34>)
   142bc:	681b      	ldr	r3, [r3, #0]
   142be:	4a08      	ldr	r2, [pc, #32]	; (142e0 <CliCharReadySemaphoreGiveFromISR+0x30>)
   142c0:	0011      	movs	r1, r2
   142c2:	0018      	movs	r0, r3
   142c4:	4b08      	ldr	r3, [pc, #32]	; (142e8 <CliCharReadySemaphoreGiveFromISR+0x38>)
   142c6:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   142c8:	4b05      	ldr	r3, [pc, #20]	; (142e0 <CliCharReadySemaphoreGiveFromISR+0x30>)
   142ca:	681b      	ldr	r3, [r3, #0]
   142cc:	2b00      	cmp	r3, #0
   142ce:	d003      	beq.n	142d8 <CliCharReadySemaphoreGiveFromISR+0x28>
   142d0:	4b06      	ldr	r3, [pc, #24]	; (142ec <CliCharReadySemaphoreGiveFromISR+0x3c>)
   142d2:	2280      	movs	r2, #128	; 0x80
   142d4:	0552      	lsls	r2, r2, #21
   142d6:	601a      	str	r2, [r3, #0]
}
   142d8:	46c0      	nop			; (mov r8, r8)
   142da:	46bd      	mov	sp, r7
   142dc:	bd80      	pop	{r7, pc}
   142de:	46c0      	nop			; (mov r8, r8)
   142e0:	200005e8 	.word	0x200005e8
   142e4:	200047e0 	.word	0x200047e0
   142e8:	0001ba55 	.word	0x0001ba55
   142ec:	e000ed04 	.word	0xe000ed04

000142f0 <CLI_GetImuData>:
 * CLI Functions - Define here
 ******************************************************************************/

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_GetImuData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   142f0:	b5b0      	push	{r4, r5, r7, lr}
   142f2:	b08a      	sub	sp, #40	; 0x28
   142f4:	af02      	add	r7, sp, #8
   142f6:	60f8      	str	r0, [r7, #12]
   142f8:	60b9      	str	r1, [r7, #8]
   142fa:	607a      	str	r2, [r7, #4]
    static int16_t data_raw_acceleration[3];
    static float acceleration_mg[3];
    uint8_t reg;
    stmdev_ctx_t *dev_ctx = GetImuStruct();
   142fc:	4b49      	ldr	r3, [pc, #292]	; (14424 <CLI_GetImuData+0x134>)
   142fe:	4798      	blx	r3
   14300:	0003      	movs	r3, r0
   14302:	61fb      	str	r3, [r7, #28]
	struct ImuDataPacket imuPacket;

    /* Read output only if new xl value is available */
    lsm6dso_xl_flag_data_ready_get(dev_ctx, &reg);
   14304:	231b      	movs	r3, #27
   14306:	18fa      	adds	r2, r7, r3
   14308:	69fb      	ldr	r3, [r7, #28]
   1430a:	0011      	movs	r1, r2
   1430c:	0018      	movs	r0, r3
   1430e:	4b46      	ldr	r3, [pc, #280]	; (14428 <CLI_GetImuData+0x138>)
   14310:	4798      	blx	r3

    if (reg) {
   14312:	231b      	movs	r3, #27
   14314:	18fb      	adds	r3, r7, r3
   14316:	781b      	ldrb	r3, [r3, #0]
   14318:	2b00      	cmp	r3, #0
   1431a:	d064      	beq.n	143e6 <CLI_GetImuData+0xf6>
        memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
   1431c:	4b43      	ldr	r3, [pc, #268]	; (1442c <CLI_GetImuData+0x13c>)
   1431e:	2206      	movs	r2, #6
   14320:	2100      	movs	r1, #0
   14322:	0018      	movs	r0, r3
   14324:	4b42      	ldr	r3, [pc, #264]	; (14430 <CLI_GetImuData+0x140>)
   14326:	4798      	blx	r3
        lsm6dso_acceleration_raw_get(dev_ctx, data_raw_acceleration);
   14328:	4a40      	ldr	r2, [pc, #256]	; (1442c <CLI_GetImuData+0x13c>)
   1432a:	69fb      	ldr	r3, [r7, #28]
   1432c:	0011      	movs	r1, r2
   1432e:	0018      	movs	r0, r3
   14330:	4b40      	ldr	r3, [pc, #256]	; (14434 <CLI_GetImuData+0x144>)
   14332:	4798      	blx	r3
        acceleration_mg[0] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[0]);
   14334:	4b3d      	ldr	r3, [pc, #244]	; (1442c <CLI_GetImuData+0x13c>)
   14336:	2200      	movs	r2, #0
   14338:	5e9b      	ldrsh	r3, [r3, r2]
   1433a:	0018      	movs	r0, r3
   1433c:	4b3e      	ldr	r3, [pc, #248]	; (14438 <CLI_GetImuData+0x148>)
   1433e:	4798      	blx	r3
   14340:	1c02      	adds	r2, r0, #0
   14342:	4b3e      	ldr	r3, [pc, #248]	; (1443c <CLI_GetImuData+0x14c>)
   14344:	601a      	str	r2, [r3, #0]
        acceleration_mg[1] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[1]);
   14346:	4b39      	ldr	r3, [pc, #228]	; (1442c <CLI_GetImuData+0x13c>)
   14348:	2202      	movs	r2, #2
   1434a:	5e9b      	ldrsh	r3, [r3, r2]
   1434c:	0018      	movs	r0, r3
   1434e:	4b3a      	ldr	r3, [pc, #232]	; (14438 <CLI_GetImuData+0x148>)
   14350:	4798      	blx	r3
   14352:	1c02      	adds	r2, r0, #0
   14354:	4b39      	ldr	r3, [pc, #228]	; (1443c <CLI_GetImuData+0x14c>)
   14356:	605a      	str	r2, [r3, #4]
        acceleration_mg[2] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[2]);
   14358:	4b34      	ldr	r3, [pc, #208]	; (1442c <CLI_GetImuData+0x13c>)
   1435a:	2204      	movs	r2, #4
   1435c:	5e9b      	ldrsh	r3, [r3, r2]
   1435e:	0018      	movs	r0, r3
   14360:	4b35      	ldr	r3, [pc, #212]	; (14438 <CLI_GetImuData+0x148>)
   14362:	4798      	blx	r3
   14364:	1c02      	adds	r2, r0, #0
   14366:	4b35      	ldr	r3, [pc, #212]	; (1443c <CLI_GetImuData+0x14c>)
   14368:	609a      	str	r2, [r3, #8]

        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Acceleration [mg]:X %d\tY %d\tZ %d\r\n", (int)acceleration_mg[0], (int)acceleration_mg[1], (int)acceleration_mg[2]);
   1436a:	4b34      	ldr	r3, [pc, #208]	; (1443c <CLI_GetImuData+0x14c>)
   1436c:	681a      	ldr	r2, [r3, #0]
   1436e:	4b34      	ldr	r3, [pc, #208]	; (14440 <CLI_GetImuData+0x150>)
   14370:	1c10      	adds	r0, r2, #0
   14372:	4798      	blx	r3
   14374:	0005      	movs	r5, r0
   14376:	4b31      	ldr	r3, [pc, #196]	; (1443c <CLI_GetImuData+0x14c>)
   14378:	685a      	ldr	r2, [r3, #4]
   1437a:	4b31      	ldr	r3, [pc, #196]	; (14440 <CLI_GetImuData+0x150>)
   1437c:	1c10      	adds	r0, r2, #0
   1437e:	4798      	blx	r3
   14380:	0004      	movs	r4, r0
   14382:	4b2e      	ldr	r3, [pc, #184]	; (1443c <CLI_GetImuData+0x14c>)
   14384:	689a      	ldr	r2, [r3, #8]
   14386:	4b2e      	ldr	r3, [pc, #184]	; (14440 <CLI_GetImuData+0x150>)
   14388:	1c10      	adds	r0, r2, #0
   1438a:	4798      	blx	r3
   1438c:	0003      	movs	r3, r0
   1438e:	4a2d      	ldr	r2, [pc, #180]	; (14444 <CLI_GetImuData+0x154>)
   14390:	68b9      	ldr	r1, [r7, #8]
   14392:	68f8      	ldr	r0, [r7, #12]
   14394:	9301      	str	r3, [sp, #4]
   14396:	9400      	str	r4, [sp, #0]
   14398:	002b      	movs	r3, r5
   1439a:	4c2b      	ldr	r4, [pc, #172]	; (14448 <CLI_GetImuData+0x158>)
   1439c:	47a0      	blx	r4
		imuPacket.xmg = (int)acceleration_mg[0];
   1439e:	4b27      	ldr	r3, [pc, #156]	; (1443c <CLI_GetImuData+0x14c>)
   143a0:	681a      	ldr	r2, [r3, #0]
   143a2:	4b27      	ldr	r3, [pc, #156]	; (14440 <CLI_GetImuData+0x150>)
   143a4:	1c10      	adds	r0, r2, #0
   143a6:	4798      	blx	r3
   143a8:	0003      	movs	r3, r0
   143aa:	b21a      	sxth	r2, r3
   143ac:	2314      	movs	r3, #20
   143ae:	18fb      	adds	r3, r7, r3
   143b0:	801a      	strh	r2, [r3, #0]
		imuPacket.ymg = (int)acceleration_mg[1];
   143b2:	4b22      	ldr	r3, [pc, #136]	; (1443c <CLI_GetImuData+0x14c>)
   143b4:	685a      	ldr	r2, [r3, #4]
   143b6:	4b22      	ldr	r3, [pc, #136]	; (14440 <CLI_GetImuData+0x150>)
   143b8:	1c10      	adds	r0, r2, #0
   143ba:	4798      	blx	r3
   143bc:	0003      	movs	r3, r0
   143be:	b21a      	sxth	r2, r3
   143c0:	2314      	movs	r3, #20
   143c2:	18fb      	adds	r3, r7, r3
   143c4:	805a      	strh	r2, [r3, #2]
		imuPacket.zmg = (int)acceleration_mg[2];
   143c6:	4b1d      	ldr	r3, [pc, #116]	; (1443c <CLI_GetImuData+0x14c>)
   143c8:	689a      	ldr	r2, [r3, #8]
   143ca:	4b1d      	ldr	r3, [pc, #116]	; (14440 <CLI_GetImuData+0x150>)
   143cc:	1c10      	adds	r0, r2, #0
   143ce:	4798      	blx	r3
   143d0:	0003      	movs	r3, r0
   143d2:	b21a      	sxth	r2, r3
   143d4:	2314      	movs	r3, #20
   143d6:	18fb      	adds	r3, r7, r3
   143d8:	809a      	strh	r2, [r3, #4]
		WifiAddImuDataToQueue(&imuPacket);
   143da:	2314      	movs	r3, #20
   143dc:	18fb      	adds	r3, r7, r3
   143de:	0018      	movs	r0, r3
   143e0:	4b1a      	ldr	r3, [pc, #104]	; (1444c <CLI_GetImuData+0x15c>)
   143e2:	4798      	blx	r3
   143e4:	e019      	b.n	1441a <CLI_GetImuData+0x12a>
    } else {
        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "No data ready! Sending dummy data \r\n");
   143e6:	4a1a      	ldr	r2, [pc, #104]	; (14450 <CLI_GetImuData+0x160>)
   143e8:	68b9      	ldr	r1, [r7, #8]
   143ea:	68fb      	ldr	r3, [r7, #12]
   143ec:	0018      	movs	r0, r3
   143ee:	4b16      	ldr	r3, [pc, #88]	; (14448 <CLI_GetImuData+0x158>)
   143f0:	4798      	blx	r3
		imuPacket.xmg = -1;
   143f2:	2314      	movs	r3, #20
   143f4:	18fb      	adds	r3, r7, r3
   143f6:	2201      	movs	r2, #1
   143f8:	4252      	negs	r2, r2
   143fa:	801a      	strh	r2, [r3, #0]
		imuPacket.ymg = -2;
   143fc:	2314      	movs	r3, #20
   143fe:	18fb      	adds	r3, r7, r3
   14400:	2202      	movs	r2, #2
   14402:	4252      	negs	r2, r2
   14404:	805a      	strh	r2, [r3, #2]
		imuPacket.zmg = -3;
   14406:	2314      	movs	r3, #20
   14408:	18fb      	adds	r3, r7, r3
   1440a:	2203      	movs	r2, #3
   1440c:	4252      	negs	r2, r2
   1440e:	809a      	strh	r2, [r3, #4]
		WifiAddImuDataToQueue(&imuPacket);
   14410:	2314      	movs	r3, #20
   14412:	18fb      	adds	r3, r7, r3
   14414:	0018      	movs	r0, r3
   14416:	4b0d      	ldr	r3, [pc, #52]	; (1444c <CLI_GetImuData+0x15c>)
   14418:	4798      	blx	r3
    }
    return pdFALSE;
   1441a:	2300      	movs	r3, #0
}
   1441c:	0018      	movs	r0, r3
   1441e:	46bd      	mov	sp, r7
   14420:	b008      	add	sp, #32
   14422:	bdb0      	pop	{r4, r5, r7, pc}
   14424:	000162bd 	.word	0x000162bd
   14428:	00015ca9 	.word	0x00015ca9
   1442c:	200005ec 	.word	0x200005ec
   14430:	000355ef 	.word	0x000355ef
   14434:	00015ce5 	.word	0x00015ce5
   14438:	00015539 	.word	0x00015539
   1443c:	200005f4 	.word	0x200005f4
   14440:	00033b95 	.word	0x00033b95
   14444:	00036e0c 	.word	0x00036e0c
   14448:	00035849 	.word	0x00035849
   1444c:	00018175 	.word	0x00018175
   14450:	00036e30 	.word	0x00036e30

00014454 <xCliClearTerminalScreen>:
// THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
// SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
// CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen(char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   14454:	b590      	push	{r4, r7, lr}
   14456:	b087      	sub	sp, #28
   14458:	af00      	add	r7, sp, #0
   1445a:	60f8      	str	r0, [r7, #12]
   1445c:	60b9      	str	r1, [r7, #8]
   1445e:	607a      	str	r2, [r7, #4]
    char clearScreen = ASCII_ESC;
   14460:	2317      	movs	r3, #23
   14462:	18fb      	adds	r3, r7, r3
   14464:	221b      	movs	r2, #27
   14466:	701a      	strb	r2, [r3, #0]
    snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
   14468:	2317      	movs	r3, #23
   1446a:	18fb      	adds	r3, r7, r3
   1446c:	781b      	ldrb	r3, [r3, #0]
   1446e:	4a08      	ldr	r2, [pc, #32]	; (14490 <xCliClearTerminalScreen+0x3c>)
   14470:	4808      	ldr	r0, [pc, #32]	; (14494 <xCliClearTerminalScreen+0x40>)
   14472:	210f      	movs	r1, #15
   14474:	4c08      	ldr	r4, [pc, #32]	; (14498 <xCliClearTerminalScreen+0x44>)
   14476:	47a0      	blx	r4
    snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
   14478:	4a06      	ldr	r2, [pc, #24]	; (14494 <xCliClearTerminalScreen+0x40>)
   1447a:	68b9      	ldr	r1, [r7, #8]
   1447c:	68fb      	ldr	r3, [r7, #12]
   1447e:	0018      	movs	r0, r3
   14480:	4b05      	ldr	r3, [pc, #20]	; (14498 <xCliClearTerminalScreen+0x44>)
   14482:	4798      	blx	r3
    return pdFALSE;
   14484:	2300      	movs	r3, #0
}
   14486:	0018      	movs	r0, r3
   14488:	46bd      	mov	sp, r7
   1448a:	b007      	add	sp, #28
   1448c:	bd90      	pop	{r4, r7, pc}
   1448e:	46c0      	nop			; (mov r8, r8)
   14490:	00036e58 	.word	0x00036e58
   14494:	20000504 	.word	0x20000504
   14498:	00035849 	.word	0x00035849

0001449c <CLI_OTAU>:

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_OTAU(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   1449c:	b580      	push	{r7, lr}
   1449e:	b084      	sub	sp, #16
   144a0:	af00      	add	r7, sp, #0
   144a2:	60f8      	str	r0, [r7, #12]
   144a4:	60b9      	str	r1, [r7, #8]
   144a6:	607a      	str	r2, [r7, #4]
    WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
   144a8:	2002      	movs	r0, #2
   144aa:	4b03      	ldr	r3, [pc, #12]	; (144b8 <CLI_OTAU+0x1c>)
   144ac:	4798      	blx	r3

    return pdFALSE;
   144ae:	2300      	movs	r3, #0
}
   144b0:	0018      	movs	r0, r3
   144b2:	46bd      	mov	sp, r7
   144b4:	b004      	add	sp, #16
   144b6:	bd80      	pop	{r7, pc}
   144b8:	00018141 	.word	0x00018141

000144bc <CLI_ResetDevice>:

// Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   144bc:	b580      	push	{r7, lr}
   144be:	b084      	sub	sp, #16
   144c0:	af00      	add	r7, sp, #0
   144c2:	60f8      	str	r0, [r7, #12]
   144c4:	60b9      	str	r1, [r7, #8]
   144c6:	607a      	str	r2, [r7, #4]
    system_reset();
   144c8:	4b03      	ldr	r3, [pc, #12]	; (144d8 <CLI_ResetDevice+0x1c>)
   144ca:	4798      	blx	r3
    return pdFALSE;
   144cc:	2300      	movs	r3, #0
}
   144ce:	0018      	movs	r0, r3
   144d0:	46bd      	mov	sp, r7
   144d2:	b004      	add	sp, #16
   144d4:	bd80      	pop	{r7, pc}
   144d6:	46c0      	nop			; (mov r8, r8)
   144d8:	00013f5d 	.word	0x00013f5d

000144dc <CLI_DistanceSensorGetDistance>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_DistanceSensorGetDistance(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   144dc:	b590      	push	{r4, r7, lr}
   144de:	b087      	sub	sp, #28
   144e0:	af00      	add	r7, sp, #0
   144e2:	60f8      	str	r0, [r7, #12]
   144e4:	60b9      	str	r1, [r7, #8]
   144e6:	607a      	str	r2, [r7, #4]
    uint16_t distance = 0;
   144e8:	2312      	movs	r3, #18
   144ea:	18fb      	adds	r3, r7, r3
   144ec:	2200      	movs	r2, #0
   144ee:	801a      	strh	r2, [r3, #0]
    int error = DistanceSensorGetDistance(&distance, 100);
   144f0:	2312      	movs	r3, #18
   144f2:	18fb      	adds	r3, r7, r3
   144f4:	2164      	movs	r1, #100	; 0x64
   144f6:	0018      	movs	r0, r3
   144f8:	4b19      	ldr	r3, [pc, #100]	; (14560 <CLI_DistanceSensorGetDistance+0x84>)
   144fa:	4798      	blx	r3
   144fc:	0003      	movs	r3, r0
   144fe:	617b      	str	r3, [r7, #20]
    if (0 != error) {
   14500:	697b      	ldr	r3, [r7, #20]
   14502:	2b00      	cmp	r3, #0
   14504:	d006      	beq.n	14514 <CLI_DistanceSensorGetDistance+0x38>
        snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Sensor Error %d!\r\n", error);
   14506:	697b      	ldr	r3, [r7, #20]
   14508:	4a16      	ldr	r2, [pc, #88]	; (14564 <CLI_DistanceSensorGetDistance+0x88>)
   1450a:	68b9      	ldr	r1, [r7, #8]
   1450c:	68f8      	ldr	r0, [r7, #12]
   1450e:	4c16      	ldr	r4, [pc, #88]	; (14568 <CLI_DistanceSensorGetDistance+0x8c>)
   14510:	47a0      	blx	r4
   14512:	e007      	b.n	14524 <CLI_DistanceSensorGetDistance+0x48>
    } else {
        snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Distance: %d mm\r\n", distance);
   14514:	2312      	movs	r3, #18
   14516:	18fb      	adds	r3, r7, r3
   14518:	881b      	ldrh	r3, [r3, #0]
   1451a:	4a14      	ldr	r2, [pc, #80]	; (1456c <CLI_DistanceSensorGetDistance+0x90>)
   1451c:	68b9      	ldr	r1, [r7, #8]
   1451e:	68f8      	ldr	r0, [r7, #12]
   14520:	4c11      	ldr	r4, [pc, #68]	; (14568 <CLI_DistanceSensorGetDistance+0x8c>)
   14522:	47a0      	blx	r4
    }

    error = WifiAddDistanceDataToQueue(&distance);
   14524:	2312      	movs	r3, #18
   14526:	18fb      	adds	r3, r7, r3
   14528:	0018      	movs	r0, r3
   1452a:	4b11      	ldr	r3, [pc, #68]	; (14570 <CLI_DistanceSensorGetDistance+0x94>)
   1452c:	4798      	blx	r3
   1452e:	0003      	movs	r3, r0
   14530:	617b      	str	r3, [r7, #20]
    if (error == pdTRUE) {
   14532:	697b      	ldr	r3, [r7, #20]
   14534:	2b01      	cmp	r3, #1
   14536:	d10e      	bne.n	14556 <CLI_DistanceSensorGetDistance+0x7a>
        strcat((char *) pcWriteBuffer, "Distance Data MQTT Post\r\n");
   14538:	68fb      	ldr	r3, [r7, #12]
   1453a:	0018      	movs	r0, r3
   1453c:	4b0d      	ldr	r3, [pc, #52]	; (14574 <CLI_DistanceSensorGetDistance+0x98>)
   1453e:	4798      	blx	r3
   14540:	0003      	movs	r3, r0
   14542:	001a      	movs	r2, r3
   14544:	68fb      	ldr	r3, [r7, #12]
   14546:	189a      	adds	r2, r3, r2
   14548:	4b0b      	ldr	r3, [pc, #44]	; (14578 <CLI_DistanceSensorGetDistance+0x9c>)
   1454a:	0010      	movs	r0, r2
   1454c:	0019      	movs	r1, r3
   1454e:	231a      	movs	r3, #26
   14550:	001a      	movs	r2, r3
   14552:	4b0a      	ldr	r3, [pc, #40]	; (1457c <CLI_DistanceSensorGetDistance+0xa0>)
   14554:	4798      	blx	r3
    }
    return pdFALSE;
   14556:	2300      	movs	r3, #0
}
   14558:	0018      	movs	r0, r3
   1455a:	46bd      	mov	sp, r7
   1455c:	b007      	add	sp, #28
   1455e:	bd90      	pop	{r4, r7, pc}
   14560:	00014aad 	.word	0x00014aad
   14564:	00036eac 	.word	0x00036eac
   14568:	00035849 	.word	0x00035849
   1456c:	00036ec0 	.word	0x00036ec0
   14570:	000181a1 	.word	0x000181a1
   14574:	000359a7 	.word	0x000359a7
   14578:	00036ed4 	.word	0x00036ed4
   1457c:	000355b9 	.word	0x000355b9

00014580 <CLI_i2cScan>:
 * @param    p_cli 
 * @param    argc 
 * @param    argv 
 ******************************************************************************/
BaseType_t CLI_i2cScan(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   14580:	b590      	push	{r4, r7, lr}
   14582:	b08f      	sub	sp, #60	; 0x3c
   14584:	af00      	add	r7, sp, #0
   14586:	60f8      	str	r0, [r7, #12]
   14588:	60b9      	str	r1, [r7, #8]
   1458a:	607a      	str	r2, [r7, #4]

		I2C_Data i2cOled; 
        uint8_t address;
		//Send 0 command byte
		uint8_t dataOut[2] = {0,0};
   1458c:	2318      	movs	r3, #24
   1458e:	18fb      	adds	r3, r7, r3
   14590:	2200      	movs	r2, #0
   14592:	701a      	strb	r2, [r3, #0]
   14594:	2318      	movs	r3, #24
   14596:	18fb      	adds	r3, r7, r3
   14598:	2200      	movs	r2, #0
   1459a:	705a      	strb	r2, [r3, #1]
		uint8_t dataIn[2];
		dataOut[0] = 0;
   1459c:	2318      	movs	r3, #24
   1459e:	18fb      	adds	r3, r7, r3
   145a0:	2200      	movs	r2, #0
   145a2:	701a      	strb	r2, [r3, #0]
		dataOut[1] = 0;
   145a4:	2318      	movs	r3, #24
   145a6:	18fb      	adds	r3, r7, r3
   145a8:	2200      	movs	r2, #0
   145aa:	705a      	strb	r2, [r3, #1]
		i2cOled.address = 0;
   145ac:	231c      	movs	r3, #28
   145ae:	18fb      	adds	r3, r7, r3
   145b0:	2200      	movs	r2, #0
   145b2:	701a      	strb	r2, [r3, #0]
		i2cOled.msgIn = (uint8_t*) &dataIn[0];
   145b4:	231c      	movs	r3, #28
   145b6:	18fb      	adds	r3, r7, r3
   145b8:	2214      	movs	r2, #20
   145ba:	18ba      	adds	r2, r7, r2
   145bc:	609a      	str	r2, [r3, #8]
		i2cOled.lenOut = 1;
   145be:	231c      	movs	r3, #28
   145c0:	18fb      	adds	r3, r7, r3
   145c2:	2201      	movs	r2, #1
   145c4:	81da      	strh	r2, [r3, #14]
		i2cOled.msgOut = (const uint8_t*) &dataOut[0];
   145c6:	231c      	movs	r3, #28
   145c8:	18fb      	adds	r3, r7, r3
   145ca:	2218      	movs	r2, #24
   145cc:	18ba      	adds	r2, r7, r2
   145ce:	605a      	str	r2, [r3, #4]
		i2cOled.lenIn = 1;
   145d0:	231c      	movs	r3, #28
   145d2:	18fb      	adds	r3, r7, r3
   145d4:	2201      	movs	r2, #1
   145d6:	819a      	strh	r2, [r3, #12]

            SerialConsoleWriteString("0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\r\n");
   145d8:	4b2a      	ldr	r3, [pc, #168]	; (14684 <CLI_i2cScan+0x104>)
   145da:	0018      	movs	r0, r3
   145dc:	4b2a      	ldr	r3, [pc, #168]	; (14688 <CLI_i2cScan+0x108>)
   145de:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   145e0:	2300      	movs	r3, #0
   145e2:	637b      	str	r3, [r7, #52]	; 0x34
   145e4:	e042      	b.n	1466c <CLI_i2cScan+0xec>
            {
				snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i);
   145e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   145e8:	4a28      	ldr	r2, [pc, #160]	; (1468c <CLI_i2cScan+0x10c>)
   145ea:	4829      	ldr	r0, [pc, #164]	; (14690 <CLI_i2cScan+0x110>)
   145ec:	210f      	movs	r1, #15
   145ee:	4c29      	ldr	r4, [pc, #164]	; (14694 <CLI_i2cScan+0x114>)
   145f0:	47a0      	blx	r4
                SerialConsoleWriteString(bufCli);
   145f2:	4b27      	ldr	r3, [pc, #156]	; (14690 <CLI_i2cScan+0x110>)
   145f4:	0018      	movs	r0, r3
   145f6:	4b24      	ldr	r3, [pc, #144]	; (14688 <CLI_i2cScan+0x108>)
   145f8:	4798      	blx	r3

                for (int j = 0; j < 16; j++)
   145fa:	2300      	movs	r3, #0
   145fc:	633b      	str	r3, [r7, #48]	; 0x30
   145fe:	e02b      	b.n	14658 <CLI_i2cScan+0xd8>
                {

                    i2cOled.address = (i + j);
   14600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14602:	b2da      	uxtb	r2, r3
   14604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14606:	b2db      	uxtb	r3, r3
   14608:	18d3      	adds	r3, r2, r3
   1460a:	b2da      	uxtb	r2, r3
   1460c:	231c      	movs	r3, #28
   1460e:	18fb      	adds	r3, r7, r3
   14610:	701a      	strb	r2, [r3, #0]

                    	
                    int32_t ret = I2cReadDataWait(&i2cOled, 100, 100);
   14612:	231c      	movs	r3, #28
   14614:	18fb      	adds	r3, r7, r3
   14616:	2264      	movs	r2, #100	; 0x64
   14618:	2164      	movs	r1, #100	; 0x64
   1461a:	0018      	movs	r0, r3
   1461c:	4b1e      	ldr	r3, [pc, #120]	; (14698 <CLI_i2cScan+0x118>)
   1461e:	4798      	blx	r3
   14620:	0003      	movs	r3, r0
   14622:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if (ret == 0)
   14624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   14626:	2b00      	cmp	r3, #0
   14628:	d10c      	bne.n	14644 <CLI_i2cScan+0xc4>
                    {
						snprintf(bufCli, CLI_MSG_LEN - 1, "%02x ", i2cOled.address);
   1462a:	231c      	movs	r3, #28
   1462c:	18fb      	adds	r3, r7, r3
   1462e:	781b      	ldrb	r3, [r3, #0]
   14630:	4a1a      	ldr	r2, [pc, #104]	; (1469c <CLI_i2cScan+0x11c>)
   14632:	4817      	ldr	r0, [pc, #92]	; (14690 <CLI_i2cScan+0x110>)
   14634:	210f      	movs	r1, #15
   14636:	4c17      	ldr	r4, [pc, #92]	; (14694 <CLI_i2cScan+0x114>)
   14638:	47a0      	blx	r4
                        SerialConsoleWriteString(bufCli);
   1463a:	4b15      	ldr	r3, [pc, #84]	; (14690 <CLI_i2cScan+0x110>)
   1463c:	0018      	movs	r0, r3
   1463e:	4b12      	ldr	r3, [pc, #72]	; (14688 <CLI_i2cScan+0x108>)
   14640:	4798      	blx	r3
   14642:	e006      	b.n	14652 <CLI_i2cScan+0xd2>
                    }
                    else
                    {
                        snprintf(bufCli, CLI_MSG_LEN - 1, "X  ");
   14644:	4b12      	ldr	r3, [pc, #72]	; (14690 <CLI_i2cScan+0x110>)
   14646:	4a16      	ldr	r2, [pc, #88]	; (146a0 <CLI_i2cScan+0x120>)
   14648:	601a      	str	r2, [r3, #0]
						SerialConsoleWriteString(bufCli);
   1464a:	4b11      	ldr	r3, [pc, #68]	; (14690 <CLI_i2cScan+0x110>)
   1464c:	0018      	movs	r0, r3
   1464e:	4b0e      	ldr	r3, [pc, #56]	; (14688 <CLI_i2cScan+0x108>)
   14650:	4798      	blx	r3
                for (int j = 0; j < 16; j++)
   14652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14654:	3301      	adds	r3, #1
   14656:	633b      	str	r3, [r7, #48]	; 0x30
   14658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1465a:	2b0f      	cmp	r3, #15
   1465c:	ddd0      	ble.n	14600 <CLI_i2cScan+0x80>
                    }
                }
                SerialConsoleWriteString( "\r\n");
   1465e:	4b11      	ldr	r3, [pc, #68]	; (146a4 <CLI_i2cScan+0x124>)
   14660:	0018      	movs	r0, r3
   14662:	4b09      	ldr	r3, [pc, #36]	; (14688 <CLI_i2cScan+0x108>)
   14664:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   14666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14668:	3310      	adds	r3, #16
   1466a:	637b      	str	r3, [r7, #52]	; 0x34
   1466c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1466e:	2b7f      	cmp	r3, #127	; 0x7f
   14670:	ddb9      	ble.n	145e6 <CLI_i2cScan+0x66>
            }
            SerialConsoleWriteString( "\r\n");
   14672:	4b0c      	ldr	r3, [pc, #48]	; (146a4 <CLI_i2cScan+0x124>)
   14674:	0018      	movs	r0, r3
   14676:	4b04      	ldr	r3, [pc, #16]	; (14688 <CLI_i2cScan+0x108>)
   14678:	4798      	blx	r3
			return pdFALSE;
   1467a:	2300      	movs	r3, #0

}
   1467c:	0018      	movs	r0, r3
   1467e:	46bd      	mov	sp, r7
   14680:	b00f      	add	sp, #60	; 0x3c
   14682:	bd90      	pop	{r4, r7, pc}
   14684:	00036f0c 	.word	0x00036f0c
   14688:	0001ea85 	.word	0x0001ea85
   1468c:	00036f40 	.word	0x00036f40
   14690:	20000504 	.word	0x20000504
   14694:	00035849 	.word	0x00035849
   14698:	00015399 	.word	0x00015399
   1469c:	00036f48 	.word	0x00036f48
   146a0:	00202058 	.word	0x00202058
   146a4:	00036df8 	.word	0x00036df8

000146a8 <CLI_GetGpsData>:

// CLI Command added by Derek. Reads from the GPS and returns data.

BaseType_t CLI_GetGpsData( int8_t *pcWriteBuffer,size_t xWriteBufferLen,const int8_t *pcCommandString )
{
   146a8:	b580      	push	{r7, lr}
   146aa:	b084      	sub	sp, #16
   146ac:	af00      	add	r7, sp, #0
   146ae:	60f8      	str	r0, [r7, #12]
   146b0:	60b9      	str	r1, [r7, #8]
   146b2:	607a      	str	r2, [r7, #4]
	SerialConsoleWriteString("Testing running GPS call \r\n");
   146b4:	4b04      	ldr	r3, [pc, #16]	; (146c8 <CLI_GetGpsData+0x20>)
   146b6:	0018      	movs	r0, r3
   146b8:	4b04      	ldr	r3, [pc, #16]	; (146cc <CLI_GetGpsData+0x24>)
   146ba:	4798      	blx	r3
//
	//error = WifiAddDistanceDataToQueue(&gps);
	//if (error == pdTRUE) {
		//strcat((char *) pcWriteBuffer, "gps Data MQTT Post\r\n");
	//}
	return pdFALSE;
   146bc:	2300      	movs	r3, #0
	
	return pdFALSE;
}
   146be:	0018      	movs	r0, r3
   146c0:	46bd      	mov	sp, r7
   146c2:	b004      	add	sp, #16
   146c4:	bd80      	pop	{r7, pc}
   146c6:	46c0      	nop			; (mov r8, r8)
   146c8:	00036f50 	.word	0x00036f50
   146cc:	0001ea85 	.word	0x0001ea85

000146d0 <vControlHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vControlHandlerTask(void *pvParameters)
{
   146d0:	b580      	push	{r7, lr}
   146d2:	b088      	sub	sp, #32
   146d4:	af00      	add	r7, sp, #0
   146d6:	6078      	str	r0, [r7, #4]
    SerialConsoleWriteString((char *)"ESE516 - Control Init Code\r\n");
   146d8:	4b33      	ldr	r3, [pc, #204]	; (147a8 <vControlHandlerTask+0xd8>)
   146da:	0018      	movs	r0, r3
   146dc:	4b33      	ldr	r3, [pc, #204]	; (147ac <vControlHandlerTask+0xdc>)
   146de:	4798      	blx	r3

    // Initialize Queues
    xQueueGameBufferIn = xQueueCreate(2, sizeof(struct GameDataPacket));
   146e0:	2200      	movs	r2, #0
   146e2:	2114      	movs	r1, #20
   146e4:	2002      	movs	r0, #2
   146e6:	4b32      	ldr	r3, [pc, #200]	; (147b0 <vControlHandlerTask+0xe0>)
   146e8:	4798      	blx	r3
   146ea:	0002      	movs	r2, r0
   146ec:	4b31      	ldr	r3, [pc, #196]	; (147b4 <vControlHandlerTask+0xe4>)
   146ee:	601a      	str	r2, [r3, #0]
    xQueueRgbColorBuffer = xQueueCreate(2, sizeof(struct RgbColorPacket));
   146f0:	2200      	movs	r2, #0
   146f2:	2103      	movs	r1, #3
   146f4:	2002      	movs	r0, #2
   146f6:	4b2e      	ldr	r3, [pc, #184]	; (147b0 <vControlHandlerTask+0xe0>)
   146f8:	4798      	blx	r3
   146fa:	0002      	movs	r2, r0
   146fc:	4b2e      	ldr	r3, [pc, #184]	; (147b8 <vControlHandlerTask+0xe8>)
   146fe:	601a      	str	r2, [r3, #0]

    if (xQueueGameBufferIn == NULL || xQueueRgbColorBuffer == NULL) {
   14700:	4b2c      	ldr	r3, [pc, #176]	; (147b4 <vControlHandlerTask+0xe4>)
   14702:	681b      	ldr	r3, [r3, #0]
   14704:	2b00      	cmp	r3, #0
   14706:	d003      	beq.n	14710 <vControlHandlerTask+0x40>
   14708:	4b2b      	ldr	r3, [pc, #172]	; (147b8 <vControlHandlerTask+0xe8>)
   1470a:	681b      	ldr	r3, [r3, #0]
   1470c:	2b00      	cmp	r3, #0
   1470e:	d103      	bne.n	14718 <vControlHandlerTask+0x48>
        SerialConsoleWriteString((char *)"ERROR Initializing Control Data queues!\r\n");
   14710:	4b2a      	ldr	r3, [pc, #168]	; (147bc <vControlHandlerTask+0xec>)
   14712:	0018      	movs	r0, r3
   14714:	4b25      	ldr	r3, [pc, #148]	; (147ac <vControlHandlerTask+0xdc>)
   14716:	4798      	blx	r3
    }
    controlState = CONTROL_WAIT_FOR_GAME;  // Initial state
   14718:	4b29      	ldr	r3, [pc, #164]	; (147c0 <vControlHandlerTask+0xf0>)
   1471a:	2200      	movs	r2, #0
   1471c:	701a      	strb	r2, [r3, #0]

    while (1) {
        switch (controlState) {
   1471e:	4b28      	ldr	r3, [pc, #160]	; (147c0 <vControlHandlerTask+0xf0>)
   14720:	781b      	ldrb	r3, [r3, #0]
   14722:	2b01      	cmp	r3, #1
   14724:	d01d      	beq.n	14762 <vControlHandlerTask+0x92>
   14726:	2b02      	cmp	r3, #2
   14728:	d035      	beq.n	14796 <vControlHandlerTask+0xc6>
   1472a:	2b00      	cmp	r3, #0
   1472c:	d12f      	bne.n	1478e <vControlHandlerTask+0xbe>
            case (CONTROL_WAIT_FOR_GAME): {  // Should set the UI to ignore button presses and should wait until there is a message from the server with a new play.
                struct GameDataPacket gamePacketIn;
                if (pdPASS == xQueueReceive(xQueueGameBufferIn, &gamePacketIn, 0)) {
   1472e:	4b21      	ldr	r3, [pc, #132]	; (147b4 <vControlHandlerTask+0xe4>)
   14730:	681b      	ldr	r3, [r3, #0]
   14732:	220c      	movs	r2, #12
   14734:	18b9      	adds	r1, r7, r2
   14736:	2200      	movs	r2, #0
   14738:	0018      	movs	r0, r3
   1473a:	4b22      	ldr	r3, [pc, #136]	; (147c4 <vControlHandlerTask+0xf4>)
   1473c:	4798      	blx	r3
   1473e:	0003      	movs	r3, r0
   14740:	2b01      	cmp	r3, #1
   14742:	d12a      	bne.n	1479a <vControlHandlerTask+0xca>
                    LogMessage(LOG_DEBUG_LVL, "Control Thread: Consumed game packet!\r\n");
   14744:	4b20      	ldr	r3, [pc, #128]	; (147c8 <vControlHandlerTask+0xf8>)
   14746:	0019      	movs	r1, r3
   14748:	2001      	movs	r0, #1
   1474a:	4b20      	ldr	r3, [pc, #128]	; (147cc <vControlHandlerTask+0xfc>)
   1474c:	4798      	blx	r3
                    UiOrderShowMoves(&gamePacketIn);
   1474e:	230c      	movs	r3, #12
   14750:	18fb      	adds	r3, r7, r3
   14752:	0018      	movs	r0, r3
   14754:	4b1e      	ldr	r3, [pc, #120]	; (147d0 <vControlHandlerTask+0x100>)
   14756:	4798      	blx	r3
                    controlState = CONTROL_PLAYING_MOVE;
   14758:	4b19      	ldr	r3, [pc, #100]	; (147c0 <vControlHandlerTask+0xf0>)
   1475a:	2201      	movs	r2, #1
   1475c:	701a      	strb	r2, [r3, #0]
                }

                break;
   1475e:	46c0      	nop			; (mov r8, r8)
   14760:	e01b      	b.n	1479a <vControlHandlerTask+0xca>
            }

            case (CONTROL_PLAYING_MOVE): {  // Should wait until the UI thread has showed the move AND comes back with the play from the user. Should go back to CONTROL_WAIT_FOR_GAME
                // after posting the game to MQTT
                if (UiPlayIsDone() == true) {
   14762:	4b1c      	ldr	r3, [pc, #112]	; (147d4 <vControlHandlerTask+0x104>)
   14764:	4798      	blx	r3
   14766:	1e03      	subs	r3, r0, #0
   14768:	d019      	beq.n	1479e <vControlHandlerTask+0xce>
                    // Send back local game packet
                    if (pdTRUE != WifiAddGameDataToQueue(UiGetGamePacketOut())) {
   1476a:	4b1b      	ldr	r3, [pc, #108]	; (147d8 <vControlHandlerTask+0x108>)
   1476c:	4798      	blx	r3
   1476e:	0003      	movs	r3, r0
   14770:	0018      	movs	r0, r3
   14772:	4b1a      	ldr	r3, [pc, #104]	; (147dc <vControlHandlerTask+0x10c>)
   14774:	4798      	blx	r3
   14776:	0003      	movs	r3, r0
   14778:	2b01      	cmp	r3, #1
   1477a:	d004      	beq.n	14786 <vControlHandlerTask+0xb6>
                        LogMessage(LOG_DEBUG_LVL, "Control Thread: Could not send game packet!\r\n");
   1477c:	4b18      	ldr	r3, [pc, #96]	; (147e0 <vControlHandlerTask+0x110>)
   1477e:	0019      	movs	r1, r3
   14780:	2001      	movs	r0, #1
   14782:	4b12      	ldr	r3, [pc, #72]	; (147cc <vControlHandlerTask+0xfc>)
   14784:	4798      	blx	r3
                    }
                    controlState = CONTROL_WAIT_FOR_GAME;
   14786:	4b0e      	ldr	r3, [pc, #56]	; (147c0 <vControlHandlerTask+0xf0>)
   14788:	2200      	movs	r2, #0
   1478a:	701a      	strb	r2, [r3, #0]
                }

                break;
   1478c:	e007      	b.n	1479e <vControlHandlerTask+0xce>
            case (CONTROL_END_GAME): {
                break;
            }

            default:
                controlState = CONTROL_WAIT_FOR_GAME;
   1478e:	4b0c      	ldr	r3, [pc, #48]	; (147c0 <vControlHandlerTask+0xf0>)
   14790:	2200      	movs	r2, #0
   14792:	701a      	strb	r2, [r3, #0]
                break;
   14794:	e004      	b.n	147a0 <vControlHandlerTask+0xd0>
                break;
   14796:	46c0      	nop			; (mov r8, r8)
   14798:	e002      	b.n	147a0 <vControlHandlerTask+0xd0>
                break;
   1479a:	46c0      	nop			; (mov r8, r8)
   1479c:	e000      	b.n	147a0 <vControlHandlerTask+0xd0>
                break;
   1479e:	46c0      	nop			; (mov r8, r8)
        }
        vTaskDelay(40);
   147a0:	2028      	movs	r0, #40	; 0x28
   147a2:	4b10      	ldr	r3, [pc, #64]	; (147e4 <vControlHandlerTask+0x114>)
   147a4:	4798      	blx	r3
        switch (controlState) {
   147a6:	e7ba      	b.n	1471e <vControlHandlerTask+0x4e>
   147a8:	00036fdc 	.word	0x00036fdc
   147ac:	0001ea85 	.word	0x0001ea85
   147b0:	0001b125 	.word	0x0001b125
   147b4:	20000600 	.word	0x20000600
   147b8:	20000604 	.word	0x20000604
   147bc:	00036ffc 	.word	0x00036ffc
   147c0:	200047e4 	.word	0x200047e4
   147c4:	0001bc85 	.word	0x0001bc85
   147c8:	00037028 	.word	0x00037028
   147cc:	0001eb71 	.word	0x0001eb71
   147d0:	00016855 	.word	0x00016855
   147d4:	00016891 	.word	0x00016891
   147d8:	000168a5 	.word	0x000168a5
   147dc:	000181cd 	.word	0x000181cd
   147e0:	00037050 	.word	0x00037050
   147e4:	0001ce31 	.word	0x0001ce31

000147e8 <ControlAddGameData>:
 * @return		Returns pdTrue if data can be added to queue, 0 if queue is full
 * @note

 */
int ControlAddGameData(struct GameDataPacket *gameIn)
{
   147e8:	b590      	push	{r4, r7, lr}
   147ea:	b085      	sub	sp, #20
   147ec:	af00      	add	r7, sp, #0
   147ee:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueGameBufferIn, gameIn, (TickType_t)10);
   147f0:	4b06      	ldr	r3, [pc, #24]	; (1480c <ControlAddGameData+0x24>)
   147f2:	6818      	ldr	r0, [r3, #0]
   147f4:	6879      	ldr	r1, [r7, #4]
   147f6:	2300      	movs	r3, #0
   147f8:	220a      	movs	r2, #10
   147fa:	4c05      	ldr	r4, [pc, #20]	; (14810 <ControlAddGameData+0x28>)
   147fc:	47a0      	blx	r4
   147fe:	0003      	movs	r3, r0
   14800:	60fb      	str	r3, [r7, #12]
    return error;
   14802:	68fb      	ldr	r3, [r7, #12]
}
   14804:	0018      	movs	r0, r3
   14806:	46bd      	mov	sp, r7
   14808:	b005      	add	sp, #20
   1480a:	bd90      	pop	{r4, r7, pc}
   1480c:	20000600 	.word	0x20000600
   14810:	0001b3cd 	.word	0x0001b3cd

00014814 <system_interrupt_enable>:
{
   14814:	b580      	push	{r7, lr}
   14816:	b082      	sub	sp, #8
   14818:	af00      	add	r7, sp, #0
   1481a:	0002      	movs	r2, r0
   1481c:	1dfb      	adds	r3, r7, #7
   1481e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   14820:	4b06      	ldr	r3, [pc, #24]	; (1483c <system_interrupt_enable+0x28>)
   14822:	1dfa      	adds	r2, r7, #7
   14824:	7812      	ldrb	r2, [r2, #0]
   14826:	0011      	movs	r1, r2
   14828:	221f      	movs	r2, #31
   1482a:	400a      	ands	r2, r1
   1482c:	2101      	movs	r1, #1
   1482e:	4091      	lsls	r1, r2
   14830:	000a      	movs	r2, r1
   14832:	601a      	str	r2, [r3, #0]
}
   14834:	46c0      	nop			; (mov r8, r8)
   14836:	46bd      	mov	sp, r7
   14838:	b002      	add	sp, #8
   1483a:	bd80      	pop	{r7, pc}
   1483c:	e000e100 	.word	0xe000e100

00014840 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   14840:	b580      	push	{r7, lr}
   14842:	b084      	sub	sp, #16
   14844:	af00      	add	r7, sp, #0
   14846:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   14848:	687b      	ldr	r3, [r7, #4]
   1484a:	681b      	ldr	r3, [r3, #0]
   1484c:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   1484e:	68fb      	ldr	r3, [r7, #12]
   14850:	69db      	ldr	r3, [r3, #28]
   14852:	1e5a      	subs	r2, r3, #1
   14854:	4193      	sbcs	r3, r2
   14856:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   14858:	0018      	movs	r0, r3
   1485a:	46bd      	mov	sp, r7
   1485c:	b004      	add	sp, #16
   1485e:	bd80      	pop	{r7, pc}

00014860 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   14860:	b580      	push	{r7, lr}
   14862:	b082      	sub	sp, #8
   14864:	af00      	add	r7, sp, #0
   14866:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   14868:	46c0      	nop			; (mov r8, r8)
   1486a:	687b      	ldr	r3, [r7, #4]
   1486c:	0018      	movs	r0, r3
   1486e:	4b04      	ldr	r3, [pc, #16]	; (14880 <_usart_wait_for_sync+0x20>)
   14870:	4798      	blx	r3
   14872:	1e03      	subs	r3, r0, #0
   14874:	d1f9      	bne.n	1486a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   14876:	46c0      	nop			; (mov r8, r8)
   14878:	46bd      	mov	sp, r7
   1487a:	b002      	add	sp, #8
   1487c:	bd80      	pop	{r7, pc}
   1487e:	46c0      	nop			; (mov r8, r8)
   14880:	00014841 	.word	0x00014841

00014884 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   14884:	b580      	push	{r7, lr}
   14886:	b082      	sub	sp, #8
   14888:	af00      	add	r7, sp, #0
   1488a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   1488c:	687b      	ldr	r3, [r7, #4]
   1488e:	2280      	movs	r2, #128	; 0x80
   14890:	05d2      	lsls	r2, r2, #23
   14892:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   14894:	687b      	ldr	r3, [r7, #4]
   14896:	2200      	movs	r2, #0
   14898:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   1489a:	687b      	ldr	r3, [r7, #4]
   1489c:	22ff      	movs	r2, #255	; 0xff
   1489e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   148a0:	687b      	ldr	r3, [r7, #4]
   148a2:	2200      	movs	r2, #0
   148a4:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   148a6:	687b      	ldr	r3, [r7, #4]
   148a8:	2200      	movs	r2, #0
   148aa:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   148ac:	687b      	ldr	r3, [r7, #4]
   148ae:	2296      	movs	r2, #150	; 0x96
   148b0:	0192      	lsls	r2, r2, #6
   148b2:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   148b4:	687b      	ldr	r3, [r7, #4]
   148b6:	2224      	movs	r2, #36	; 0x24
   148b8:	2101      	movs	r1, #1
   148ba:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   148bc:	687b      	ldr	r3, [r7, #4]
   148be:	2225      	movs	r2, #37	; 0x25
   148c0:	2101      	movs	r1, #1
   148c2:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   148c4:	687b      	ldr	r3, [r7, #4]
   148c6:	2226      	movs	r2, #38	; 0x26
   148c8:	2100      	movs	r1, #0
   148ca:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   148cc:	687b      	ldr	r3, [r7, #4]
   148ce:	2227      	movs	r2, #39	; 0x27
   148d0:	2100      	movs	r1, #0
   148d2:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   148d4:	687b      	ldr	r3, [r7, #4]
   148d6:	2200      	movs	r2, #0
   148d8:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   148da:	687b      	ldr	r3, [r7, #4]
   148dc:	2288      	movs	r2, #136	; 0x88
   148de:	0352      	lsls	r2, r2, #13
   148e0:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   148e2:	687b      	ldr	r3, [r7, #4]
   148e4:	222c      	movs	r2, #44	; 0x2c
   148e6:	2100      	movs	r1, #0
   148e8:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   148ea:	687b      	ldr	r3, [r7, #4]
   148ec:	222d      	movs	r2, #45	; 0x2d
   148ee:	2100      	movs	r1, #0
   148f0:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   148f2:	687b      	ldr	r3, [r7, #4]
   148f4:	2200      	movs	r2, #0
   148f6:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   148f8:	687b      	ldr	r3, [r7, #4]
   148fa:	2200      	movs	r2, #0
   148fc:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   148fe:	687b      	ldr	r3, [r7, #4]
   14900:	2200      	movs	r2, #0
   14902:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   14904:	687b      	ldr	r3, [r7, #4]
   14906:	2200      	movs	r2, #0
   14908:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   1490a:	687b      	ldr	r3, [r7, #4]
   1490c:	2200      	movs	r2, #0
   1490e:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   14910:	687b      	ldr	r3, [r7, #4]
   14912:	2200      	movs	r2, #0
   14914:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   14916:	687b      	ldr	r3, [r7, #4]
   14918:	2200      	movs	r2, #0
   1491a:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   1491c:	687b      	ldr	r3, [r7, #4]
   1491e:	2200      	movs	r2, #0
   14920:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   14922:	687b      	ldr	r3, [r7, #4]
   14924:	2200      	movs	r2, #0
   14926:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   14928:	687b      	ldr	r3, [r7, #4]
   1492a:	2200      	movs	r2, #0
   1492c:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   1492e:	687b      	ldr	r3, [r7, #4]
   14930:	2213      	movs	r2, #19
   14932:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   14934:	687b      	ldr	r3, [r7, #4]
   14936:	2200      	movs	r2, #0
   14938:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   1493a:	46c0      	nop			; (mov r8, r8)
   1493c:	46bd      	mov	sp, r7
   1493e:	b002      	add	sp, #8
   14940:	bd80      	pop	{r7, pc}
	...

00014944 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   14944:	b580      	push	{r7, lr}
   14946:	b084      	sub	sp, #16
   14948:	af00      	add	r7, sp, #0
   1494a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1494c:	687b      	ldr	r3, [r7, #4]
   1494e:	681b      	ldr	r3, [r3, #0]
   14950:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   14952:	687b      	ldr	r3, [r7, #4]
   14954:	681b      	ldr	r3, [r3, #0]
   14956:	0018      	movs	r0, r3
   14958:	4b09      	ldr	r3, [pc, #36]	; (14980 <usart_enable+0x3c>)
   1495a:	4798      	blx	r3
   1495c:	0003      	movs	r3, r0
   1495e:	0018      	movs	r0, r3
   14960:	4b08      	ldr	r3, [pc, #32]	; (14984 <usart_enable+0x40>)
   14962:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   14964:	687b      	ldr	r3, [r7, #4]
   14966:	0018      	movs	r0, r3
   14968:	4b07      	ldr	r3, [pc, #28]	; (14988 <usart_enable+0x44>)
   1496a:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   1496c:	68fb      	ldr	r3, [r7, #12]
   1496e:	681b      	ldr	r3, [r3, #0]
   14970:	2202      	movs	r2, #2
   14972:	431a      	orrs	r2, r3
   14974:	68fb      	ldr	r3, [r7, #12]
   14976:	601a      	str	r2, [r3, #0]
}
   14978:	46c0      	nop			; (mov r8, r8)
   1497a:	46bd      	mov	sp, r7
   1497c:	b004      	add	sp, #16
   1497e:	bd80      	pop	{r7, pc}
   14980:	000282c1 	.word	0x000282c1
   14984:	00014815 	.word	0x00014815
   14988:	00014861 	.word	0x00014861

0001498c <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
   1498c:	b580      	push	{r7, lr}
   1498e:	b082      	sub	sp, #8
   14990:	af00      	add	r7, sp, #0
   14992:	6078      	str	r0, [r7, #4]
   14994:	000a      	movs	r2, r1
   14996:	1cfb      	adds	r3, r7, #3
   14998:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   1499a:	687b      	ldr	r3, [r7, #4]
   1499c:	2231      	movs	r2, #49	; 0x31
   1499e:	5c9b      	ldrb	r3, [r3, r2]
   149a0:	b25a      	sxtb	r2, r3
   149a2:	1cfb      	adds	r3, r7, #3
   149a4:	781b      	ldrb	r3, [r3, #0]
   149a6:	2101      	movs	r1, #1
   149a8:	4099      	lsls	r1, r3
   149aa:	000b      	movs	r3, r1
   149ac:	b25b      	sxtb	r3, r3
   149ae:	4313      	orrs	r3, r2
   149b0:	b25b      	sxtb	r3, r3
   149b2:	b2d9      	uxtb	r1, r3
   149b4:	687b      	ldr	r3, [r7, #4]
   149b6:	2231      	movs	r2, #49	; 0x31
   149b8:	5499      	strb	r1, [r3, r2]

}
   149ba:	46c0      	nop			; (mov r8, r8)
   149bc:	46bd      	mov	sp, r7
   149be:	b002      	add	sp, #8
   149c0:	bd80      	pop	{r7, pc}
	...

000149c4 <distUsartWritecallback>:
/******************************************************************************
 *  Callback Declaration
 ******************************************************************************/
// Callback for when we finish writing characters to UART
void distUsartWritecallback(struct usart_module *const usart_module)
{
   149c4:	b580      	push	{r7, lr}
   149c6:	b084      	sub	sp, #16
   149c8:	af00      	add	r7, sp, #0
   149ca:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   149cc:	2300      	movs	r3, #0
   149ce:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorDistanceSemaphoreHandle, &xHigherPriorityTaskWoken);
   149d0:	4b09      	ldr	r3, [pc, #36]	; (149f8 <distUsartWritecallback+0x34>)
   149d2:	681b      	ldr	r3, [r3, #0]
   149d4:	220c      	movs	r2, #12
   149d6:	18ba      	adds	r2, r7, r2
   149d8:	0011      	movs	r1, r2
   149da:	0018      	movs	r0, r3
   149dc:	4b07      	ldr	r3, [pc, #28]	; (149fc <distUsartWritecallback+0x38>)
   149de:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   149e0:	68fb      	ldr	r3, [r7, #12]
   149e2:	2b00      	cmp	r3, #0
   149e4:	d003      	beq.n	149ee <distUsartWritecallback+0x2a>
   149e6:	4b06      	ldr	r3, [pc, #24]	; (14a00 <distUsartWritecallback+0x3c>)
   149e8:	2280      	movs	r2, #128	; 0x80
   149ea:	0552      	lsls	r2, r2, #21
   149ec:	601a      	str	r2, [r3, #0]
}
   149ee:	46c0      	nop			; (mov r8, r8)
   149f0:	46bd      	mov	sp, r7
   149f2:	b004      	add	sp, #16
   149f4:	bd80      	pop	{r7, pc}
   149f6:	46c0      	nop			; (mov r8, r8)
   149f8:	200047ec 	.word	0x200047ec
   149fc:	0001ba55 	.word	0x0001ba55
   14a00:	e000ed04 	.word	0xe000ed04

00014a04 <distUsartReadcallback>:
// Callback for when we finish writing characters to UART

void distUsartReadcallback(struct usart_module *const usart_module)
{
   14a04:	b580      	push	{r7, lr}
   14a06:	b084      	sub	sp, #16
   14a08:	af00      	add	r7, sp, #0
   14a0a:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   14a0c:	2300      	movs	r3, #0
   14a0e:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorDistanceSemaphoreHandle, &xHigherPriorityTaskWoken);
   14a10:	4b09      	ldr	r3, [pc, #36]	; (14a38 <distUsartReadcallback+0x34>)
   14a12:	681b      	ldr	r3, [r3, #0]
   14a14:	220c      	movs	r2, #12
   14a16:	18ba      	adds	r2, r7, r2
   14a18:	0011      	movs	r1, r2
   14a1a:	0018      	movs	r0, r3
   14a1c:	4b07      	ldr	r3, [pc, #28]	; (14a3c <distUsartReadcallback+0x38>)
   14a1e:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   14a20:	68fb      	ldr	r3, [r7, #12]
   14a22:	2b00      	cmp	r3, #0
   14a24:	d003      	beq.n	14a2e <distUsartReadcallback+0x2a>
   14a26:	4b06      	ldr	r3, [pc, #24]	; (14a40 <distUsartReadcallback+0x3c>)
   14a28:	2280      	movs	r2, #128	; 0x80
   14a2a:	0552      	lsls	r2, r2, #21
   14a2c:	601a      	str	r2, [r3, #0]
}
   14a2e:	46c0      	nop			; (mov r8, r8)
   14a30:	46bd      	mov	sp, r7
   14a32:	b004      	add	sp, #16
   14a34:	bd80      	pop	{r7, pc}
   14a36:	46c0      	nop			; (mov r8, r8)
   14a38:	200047ec 	.word	0x200047ec
   14a3c:	0001ba55 	.word	0x0001ba55
   14a40:	e000ed04 	.word	0xe000ed04

00014a44 <InitializeDistanceSensor>:
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeDistanceSensor(void)
{	
   14a44:	b580      	push	{r7, lr}
   14a46:	af00      	add	r7, sp, #0
	// Configure USART and Callbacks
    configure_usart();
   14a48:	4b10      	ldr	r3, [pc, #64]	; (14a8c <InitializeDistanceSensor+0x48>)
   14a4a:	4798      	blx	r3
    configure_usart_callbacks();
   14a4c:	4b10      	ldr	r3, [pc, #64]	; (14a90 <InitializeDistanceSensor+0x4c>)
   14a4e:	4798      	blx	r3

    sensorDistanceMutexHandle = xSemaphoreCreateMutex();
   14a50:	2001      	movs	r0, #1
   14a52:	4b10      	ldr	r3, [pc, #64]	; (14a94 <InitializeDistanceSensor+0x50>)
   14a54:	4798      	blx	r3
   14a56:	0002      	movs	r2, r0
   14a58:	4b0f      	ldr	r3, [pc, #60]	; (14a98 <InitializeDistanceSensor+0x54>)
   14a5a:	601a      	str	r2, [r3, #0]
    sensorDistanceSemaphoreHandle = xSemaphoreCreateBinary();
   14a5c:	2203      	movs	r2, #3
   14a5e:	2100      	movs	r1, #0
   14a60:	2001      	movs	r0, #1
   14a62:	4b0e      	ldr	r3, [pc, #56]	; (14a9c <InitializeDistanceSensor+0x58>)
   14a64:	4798      	blx	r3
   14a66:	0002      	movs	r2, r0
   14a68:	4b0d      	ldr	r3, [pc, #52]	; (14aa0 <InitializeDistanceSensor+0x5c>)
   14a6a:	601a      	str	r2, [r3, #0]

    if (NULL == sensorDistanceMutexHandle || NULL == sensorDistanceSemaphoreHandle) {
   14a6c:	4b0a      	ldr	r3, [pc, #40]	; (14a98 <InitializeDistanceSensor+0x54>)
   14a6e:	681b      	ldr	r3, [r3, #0]
   14a70:	2b00      	cmp	r3, #0
   14a72:	d003      	beq.n	14a7c <InitializeDistanceSensor+0x38>
   14a74:	4b0a      	ldr	r3, [pc, #40]	; (14aa0 <InitializeDistanceSensor+0x5c>)
   14a76:	681b      	ldr	r3, [r3, #0]
   14a78:	2b00      	cmp	r3, #0
   14a7a:	d103      	bne.n	14a84 <InitializeDistanceSensor+0x40>
        SerialConsoleWriteString((char *)"Could not initialize Distance Sensor!");
   14a7c:	4b09      	ldr	r3, [pc, #36]	; (14aa4 <InitializeDistanceSensor+0x60>)
   14a7e:	0018      	movs	r0, r3
   14a80:	4b09      	ldr	r3, [pc, #36]	; (14aa8 <InitializeDistanceSensor+0x64>)
   14a82:	4798      	blx	r3
    }
}
   14a84:	46c0      	nop			; (mov r8, r8)
   14a86:	46bd      	mov	sp, r7
   14a88:	bd80      	pop	{r7, pc}
   14a8a:	46c0      	nop			; (mov r8, r8)
   14a8c:	00014b7d 	.word	0x00014b7d
   14a90:	00014c11 	.word	0x00014c11
   14a94:	0001b38d 	.word	0x0001b38d
   14a98:	200047f0 	.word	0x200047f0
   14a9c:	0001b125 	.word	0x0001b125
   14aa0:	200047ec 	.word	0x200047ec
   14aa4:	00037080 	.word	0x00037080
   14aa8:	0001ea85 	.word	0x0001ea85

00014aac <DistanceSensorGetDistance>:
 * @fn			int32_t DistanceSensorGetDistance (uint16_t *distance)
 * @brief		Gets the distance from the distance sensor.
 * @note			Returns 0 if successful. -1 if an error occurred
 */
int32_t DistanceSensorGetDistance(uint16_t *distance, const TickType_t xMaxBlockTime)
{
   14aac:	b580      	push	{r7, lr}
   14aae:	b084      	sub	sp, #16
   14ab0:	af00      	add	r7, sp, #0
   14ab2:	6078      	str	r0, [r7, #4]
   14ab4:	6039      	str	r1, [r7, #0]
    int error = ERROR_NONE;
   14ab6:	2300      	movs	r3, #0
   14ab8:	60fb      	str	r3, [r7, #12]

    // 1. Get MUTEX. DistanceSensorGetMutex. If we cant get it, goto
    error = DistanceSensorGetMutex(WAIT_I2C_LINE_MS);
   14aba:	2396      	movs	r3, #150	; 0x96
   14abc:	005b      	lsls	r3, r3, #1
   14abe:	0018      	movs	r0, r3
   14ac0:	4b25      	ldr	r3, [pc, #148]	; (14b58 <DistanceSensorGetDistance+0xac>)
   14ac2:	4798      	blx	r3
   14ac4:	0003      	movs	r3, r0
   14ac6:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exitf;
   14ac8:	68fb      	ldr	r3, [r7, #12]
   14aca:	2b00      	cmp	r3, #0
   14acc:	d139      	bne.n	14b42 <DistanceSensorGetDistance+0x96>

    //---2. Initiate sending data. First populate TX with the distance command. Use usart_write_buffer_job to transmit 1 character
    distTx = DISTANCE_US_100_CMD_READ_DISTANCE;
   14ace:	4b23      	ldr	r3, [pc, #140]	; (14b5c <DistanceSensorGetDistance+0xb0>)
   14ad0:	2255      	movs	r2, #85	; 0x55
   14ad2:	701a      	strb	r2, [r3, #0]
    if (STATUS_OK != usart_write_buffer_job(&usart_instance_dist, (uint8_t *)&distTx, 1)) {
   14ad4:	4921      	ldr	r1, [pc, #132]	; (14b5c <DistanceSensorGetDistance+0xb0>)
   14ad6:	4b22      	ldr	r3, [pc, #136]	; (14b60 <DistanceSensorGetDistance+0xb4>)
   14ad8:	2201      	movs	r2, #1
   14ada:	0018      	movs	r0, r3
   14adc:	4b21      	ldr	r3, [pc, #132]	; (14b64 <DistanceSensorGetDistance+0xb8>)
   14ade:	4798      	blx	r3
   14ae0:	1e03      	subs	r3, r0, #0
   14ae2:	d130      	bne.n	14b46 <DistanceSensorGetDistance+0x9a>
        goto exitf;
    }

    // 3. )Wait until the TX finished. TX should release the binary semaphore - so wait until semaphore
    if (xSemaphoreTake(sensorDistanceSemaphoreHandle, xMaxBlockTime) == pdTRUE) {
   14ae4:	4b20      	ldr	r3, [pc, #128]	; (14b68 <DistanceSensorGetDistance+0xbc>)
   14ae6:	681b      	ldr	r3, [r3, #0]
   14ae8:	683a      	ldr	r2, [r7, #0]
   14aea:	0011      	movs	r1, r2
   14aec:	0018      	movs	r0, r3
   14aee:	4b1f      	ldr	r3, [pc, #124]	; (14b6c <DistanceSensorGetDistance+0xc0>)
   14af0:	4798      	blx	r3
   14af2:	0003      	movs	r3, r0
   14af4:	2b01      	cmp	r3, #1
   14af6:	d003      	beq.n	14b00 <DistanceSensorGetDistance+0x54>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */

    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   14af8:	2303      	movs	r3, #3
   14afa:	425b      	negs	r3, r3
   14afc:	60fb      	str	r3, [r7, #12]
        goto exitf;
   14afe:	e023      	b.n	14b48 <DistanceSensorGetDistance+0x9c>
    }

    // 4. Initiate an rx job - usart_read_buffer_job - to read two characters. Read into variable latestRxDistance
    usart_read_buffer_job(&usart_instance_dist, (uint8_t *)&latestRxDistance, 2);  // Kicks off constant reading of characters
   14b00:	491b      	ldr	r1, [pc, #108]	; (14b70 <DistanceSensorGetDistance+0xc4>)
   14b02:	4b17      	ldr	r3, [pc, #92]	; (14b60 <DistanceSensorGetDistance+0xb4>)
   14b04:	2202      	movs	r2, #2
   14b06:	0018      	movs	r0, r3
   14b08:	4b1a      	ldr	r3, [pc, #104]	; (14b74 <DistanceSensorGetDistance+0xc8>)
   14b0a:	4798      	blx	r3

    //---7. Wait for notification
    if (xSemaphoreTake(sensorDistanceSemaphoreHandle, xMaxBlockTime) == pdTRUE) {
   14b0c:	4b16      	ldr	r3, [pc, #88]	; (14b68 <DistanceSensorGetDistance+0xbc>)
   14b0e:	681b      	ldr	r3, [r3, #0]
   14b10:	683a      	ldr	r2, [r7, #0]
   14b12:	0011      	movs	r1, r2
   14b14:	0018      	movs	r0, r3
   14b16:	4b15      	ldr	r3, [pc, #84]	; (14b6c <DistanceSensorGetDistance+0xc0>)
   14b18:	4798      	blx	r3
   14b1a:	0003      	movs	r3, r0
   14b1c:	2b01      	cmp	r3, #1
   14b1e:	d10c      	bne.n	14b3a <DistanceSensorGetDistance+0x8e>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        *distance = (latestRxDistance[0] << 8) + latestRxDistance[1];
   14b20:	4b13      	ldr	r3, [pc, #76]	; (14b70 <DistanceSensorGetDistance+0xc4>)
   14b22:	781b      	ldrb	r3, [r3, #0]
   14b24:	b29b      	uxth	r3, r3
   14b26:	021b      	lsls	r3, r3, #8
   14b28:	b29a      	uxth	r2, r3
   14b2a:	4b11      	ldr	r3, [pc, #68]	; (14b70 <DistanceSensorGetDistance+0xc4>)
   14b2c:	785b      	ldrb	r3, [r3, #1]
   14b2e:	b29b      	uxth	r3, r3
   14b30:	18d3      	adds	r3, r2, r3
   14b32:	b29a      	uxth	r2, r3
   14b34:	687b      	ldr	r3, [r7, #4]
   14b36:	801a      	strh	r2, [r3, #0]
   14b38:	e006      	b.n	14b48 <DistanceSensorGetDistance+0x9c>
		
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   14b3a:	2303      	movs	r3, #3
   14b3c:	425b      	negs	r3, r3
   14b3e:	60fb      	str	r3, [r7, #12]
        goto exitf;
   14b40:	e002      	b.n	14b48 <DistanceSensorGetDistance+0x9c>
    if (ERROR_NONE != error) goto exitf;
   14b42:	46c0      	nop			; (mov r8, r8)
   14b44:	e000      	b.n	14b48 <DistanceSensorGetDistance+0x9c>
        goto exitf;
   14b46:	46c0      	nop			; (mov r8, r8)
    }

exitf:
    // Release mutex and return error
    DistanceSensorFreeMutex();
   14b48:	4b0b      	ldr	r3, [pc, #44]	; (14b78 <DistanceSensorGetDistance+0xcc>)
   14b4a:	4798      	blx	r3

    return error;
   14b4c:	68fb      	ldr	r3, [r7, #12]
}
   14b4e:	0018      	movs	r0, r3
   14b50:	46bd      	mov	sp, r7
   14b52:	b004      	add	sp, #16
   14b54:	bd80      	pop	{r7, pc}
   14b56:	46c0      	nop			; (mov r8, r8)
   14b58:	00014c95 	.word	0x00014c95
   14b5c:	200047ea 	.word	0x200047ea
   14b60:	200047f4 	.word	0x200047f4
   14b64:	00029b21 	.word	0x00029b21
   14b68:	200047ec 	.word	0x200047ec
   14b6c:	0001c0dd 	.word	0x0001c0dd
   14b70:	200047e8 	.word	0x200047e8
   14b74:	00029b69 	.word	0x00029b69
   14b78:	00014c5d 	.word	0x00014c5d

00014b7c <configure_usart>:
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void)
{
   14b7c:	b580      	push	{r7, lr}
   14b7e:	b090      	sub	sp, #64	; 0x40
   14b80:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
   14b82:	003b      	movs	r3, r7
   14b84:	0018      	movs	r0, r3
   14b86:	4b18      	ldr	r3, [pc, #96]	; (14be8 <configure_usart+0x6c>)
   14b88:	4798      	blx	r3
	
	SerialConsoleWriteString("hihi\r\n");
   14b8a:	4b18      	ldr	r3, [pc, #96]	; (14bec <configure_usart+0x70>)
   14b8c:	0018      	movs	r0, r3
   14b8e:	4b18      	ldr	r3, [pc, #96]	; (14bf0 <configure_usart+0x74>)
   14b90:	4798      	blx	r3

    config_usart.baudrate = 9600;
   14b92:	003b      	movs	r3, r7
   14b94:	2296      	movs	r2, #150	; 0x96
   14b96:	0192      	lsls	r2, r2, #6
   14b98:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
   14b9a:	003b      	movs	r3, r7
   14b9c:	2280      	movs	r2, #128	; 0x80
   14b9e:	0352      	lsls	r2, r2, #13
   14ba0:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = PINMUX_PB02D_SERCOM5_PAD0; //TX
   14ba2:	003b      	movs	r3, r7
   14ba4:	4a13      	ldr	r2, [pc, #76]	; (14bf4 <configure_usart+0x78>)
   14ba6:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = PINMUX_PB03D_SERCOM5_PAD1; //RX
   14ba8:	003b      	movs	r3, r7
   14baa:	4a13      	ldr	r2, [pc, #76]	; (14bf8 <configure_usart+0x7c>)
   14bac:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = PINMUX_UNUSED;
   14bae:	003b      	movs	r3, r7
   14bb0:	2201      	movs	r2, #1
   14bb2:	4252      	negs	r2, r2
   14bb4:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = PINMUX_UNUSED;
   14bb6:	003b      	movs	r3, r7
   14bb8:	2201      	movs	r2, #1
   14bba:	4252      	negs	r2, r2
   14bbc:	63da      	str	r2, [r3, #60]	; 0x3c
	//config_usart.pinmux_pad0 = PINMUX_UNUSED;
	//config_usart.pinmux_pad1 = PINMUX_UNUSED;
	//config_usart.pinmux_pad2 = PINMUX_PA10D_SERCOM2_PAD2; //TX
	//config_usart.pinmux_pad3 = PINMUX_PA11D_SERCOM2_PAD3; //RX

	SerialConsoleWriteString("qqq\r\n");
   14bbe:	4b0f      	ldr	r3, [pc, #60]	; (14bfc <configure_usart+0x80>)
   14bc0:	0018      	movs	r0, r3
   14bc2:	4b0b      	ldr	r3, [pc, #44]	; (14bf0 <configure_usart+0x74>)
   14bc4:	4798      	blx	r3

    while (usart_init(&usart_instance_dist, SERCOM5, &config_usart) != STATUS_OK) {
   14bc6:	46c0      	nop			; (mov r8, r8)
   14bc8:	003a      	movs	r2, r7
   14bca:	490d      	ldr	r1, [pc, #52]	; (14c00 <configure_usart+0x84>)
   14bcc:	4b0d      	ldr	r3, [pc, #52]	; (14c04 <configure_usart+0x88>)
   14bce:	0018      	movs	r0, r3
   14bd0:	4b0d      	ldr	r3, [pc, #52]	; (14c08 <configure_usart+0x8c>)
   14bd2:	4798      	blx	r3
   14bd4:	1e03      	subs	r3, r0, #0
   14bd6:	d1f7      	bne.n	14bc8 <configure_usart+0x4c>
    }
	//while (usart_init(&usart_instance_dist, SERCOM2, &config_usart) != STATUS_OK) {
	//}

    usart_enable(&usart_instance_dist);
   14bd8:	4b0a      	ldr	r3, [pc, #40]	; (14c04 <configure_usart+0x88>)
   14bda:	0018      	movs	r0, r3
   14bdc:	4b0b      	ldr	r3, [pc, #44]	; (14c0c <configure_usart+0x90>)
   14bde:	4798      	blx	r3
}
   14be0:	46c0      	nop			; (mov r8, r8)
   14be2:	46bd      	mov	sp, r7
   14be4:	b010      	add	sp, #64	; 0x40
   14be6:	bd80      	pop	{r7, pc}
   14be8:	00014885 	.word	0x00014885
   14bec:	000370a8 	.word	0x000370a8
   14bf0:	0001ea85 	.word	0x0001ea85
   14bf4:	00220003 	.word	0x00220003
   14bf8:	00230003 	.word	0x00230003
   14bfc:	000370b0 	.word	0x000370b0
   14c00:	42001c00 	.word	0x42001c00
   14c04:	200047f4 	.word	0x200047f4
   14c08:	00029725 	.word	0x00029725
   14c0c:	00014945 	.word	0x00014945

00014c10 <configure_usart_callbacks>:
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void)
{
   14c10:	b580      	push	{r7, lr}
   14c12:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance_dist, distUsartWritecallback, USART_CALLBACK_BUFFER_TRANSMITTED);
   14c14:	490c      	ldr	r1, [pc, #48]	; (14c48 <configure_usart_callbacks+0x38>)
   14c16:	4b0d      	ldr	r3, [pc, #52]	; (14c4c <configure_usart_callbacks+0x3c>)
   14c18:	2200      	movs	r2, #0
   14c1a:	0018      	movs	r0, r3
   14c1c:	4b0c      	ldr	r3, [pc, #48]	; (14c50 <configure_usart_callbacks+0x40>)
   14c1e:	4798      	blx	r3
    usart_register_callback(&usart_instance_dist, distUsartReadcallback, USART_CALLBACK_BUFFER_RECEIVED);
   14c20:	490c      	ldr	r1, [pc, #48]	; (14c54 <configure_usart_callbacks+0x44>)
   14c22:	4b0a      	ldr	r3, [pc, #40]	; (14c4c <configure_usart_callbacks+0x3c>)
   14c24:	2201      	movs	r2, #1
   14c26:	0018      	movs	r0, r3
   14c28:	4b09      	ldr	r3, [pc, #36]	; (14c50 <configure_usart_callbacks+0x40>)
   14c2a:	4798      	blx	r3
    usart_enable_callback(&usart_instance_dist, USART_CALLBACK_BUFFER_TRANSMITTED);
   14c2c:	4b07      	ldr	r3, [pc, #28]	; (14c4c <configure_usart_callbacks+0x3c>)
   14c2e:	2100      	movs	r1, #0
   14c30:	0018      	movs	r0, r3
   14c32:	4b09      	ldr	r3, [pc, #36]	; (14c58 <configure_usart_callbacks+0x48>)
   14c34:	4798      	blx	r3
    usart_enable_callback(&usart_instance_dist, USART_CALLBACK_BUFFER_RECEIVED);
   14c36:	4b05      	ldr	r3, [pc, #20]	; (14c4c <configure_usart_callbacks+0x3c>)
   14c38:	2101      	movs	r1, #1
   14c3a:	0018      	movs	r0, r3
   14c3c:	4b06      	ldr	r3, [pc, #24]	; (14c58 <configure_usart_callbacks+0x48>)
   14c3e:	4798      	blx	r3
}
   14c40:	46c0      	nop			; (mov r8, r8)
   14c42:	46bd      	mov	sp, r7
   14c44:	bd80      	pop	{r7, pc}
   14c46:	46c0      	nop			; (mov r8, r8)
   14c48:	000149c5 	.word	0x000149c5
   14c4c:	200047f4 	.word	0x200047f4
   14c50:	00029ad9 	.word	0x00029ad9
   14c54:	00014a05 	.word	0x00014a05
   14c58:	0001498d 	.word	0x0001498d

00014c5c <DistanceSensorFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
static int32_t DistanceSensorFreeMutex(void)
{
   14c5c:	b590      	push	{r4, r7, lr}
   14c5e:	b083      	sub	sp, #12
   14c60:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   14c62:	2300      	movs	r3, #0
   14c64:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorDistanceMutexHandle) != pdTRUE) {
   14c66:	4b09      	ldr	r3, [pc, #36]	; (14c8c <DistanceSensorFreeMutex+0x30>)
   14c68:	6818      	ldr	r0, [r3, #0]
   14c6a:	2300      	movs	r3, #0
   14c6c:	2200      	movs	r2, #0
   14c6e:	2100      	movs	r1, #0
   14c70:	4c07      	ldr	r4, [pc, #28]	; (14c90 <DistanceSensorFreeMutex+0x34>)
   14c72:	47a0      	blx	r4
   14c74:	0003      	movs	r3, r0
   14c76:	2b01      	cmp	r3, #1
   14c78:	d002      	beq.n	14c80 <DistanceSensorFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   14c7a:	2314      	movs	r3, #20
   14c7c:	425b      	negs	r3, r3
   14c7e:	607b      	str	r3, [r7, #4]
    }
    return error;
   14c80:	687b      	ldr	r3, [r7, #4]
}
   14c82:	0018      	movs	r0, r3
   14c84:	46bd      	mov	sp, r7
   14c86:	b003      	add	sp, #12
   14c88:	bd90      	pop	{r4, r7, pc}
   14c8a:	46c0      	nop			; (mov r8, r8)
   14c8c:	200047f0 	.word	0x200047f0
   14c90:	0001b3cd 	.word	0x0001b3cd

00014c94 <DistanceSensorGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
static int32_t DistanceSensorGetMutex(TickType_t waitTime)
{
   14c94:	b580      	push	{r7, lr}
   14c96:	b084      	sub	sp, #16
   14c98:	af00      	add	r7, sp, #0
   14c9a:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14c9c:	2300      	movs	r3, #0
   14c9e:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorDistanceMutexHandle, waitTime) != pdTRUE) {
   14ca0:	4b08      	ldr	r3, [pc, #32]	; (14cc4 <DistanceSensorGetMutex+0x30>)
   14ca2:	681b      	ldr	r3, [r3, #0]
   14ca4:	687a      	ldr	r2, [r7, #4]
   14ca6:	0011      	movs	r1, r2
   14ca8:	0018      	movs	r0, r3
   14caa:	4b07      	ldr	r3, [pc, #28]	; (14cc8 <DistanceSensorGetMutex+0x34>)
   14cac:	4798      	blx	r3
   14cae:	0003      	movs	r3, r0
   14cb0:	2b01      	cmp	r3, #1
   14cb2:	d002      	beq.n	14cba <DistanceSensorGetMutex+0x26>
        error = ERROR_NOT_READY;
   14cb4:	231d      	movs	r3, #29
   14cb6:	425b      	negs	r3, r3
   14cb8:	60fb      	str	r3, [r7, #12]
    }
    return error;
   14cba:	68fb      	ldr	r3, [r7, #12]
   14cbc:	0018      	movs	r0, r3
   14cbe:	46bd      	mov	sp, r7
   14cc0:	b004      	add	sp, #16
   14cc2:	bd80      	pop	{r7, pc}
   14cc4:	200047f0 	.word	0x200047f0
   14cc8:	0001c0dd 	.word	0x0001c0dd

00014ccc <system_interrupt_enable>:
{
   14ccc:	b580      	push	{r7, lr}
   14cce:	b082      	sub	sp, #8
   14cd0:	af00      	add	r7, sp, #0
   14cd2:	0002      	movs	r2, r0
   14cd4:	1dfb      	adds	r3, r7, #7
   14cd6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   14cd8:	4b06      	ldr	r3, [pc, #24]	; (14cf4 <system_interrupt_enable+0x28>)
   14cda:	1dfa      	adds	r2, r7, #7
   14cdc:	7812      	ldrb	r2, [r2, #0]
   14cde:	0011      	movs	r1, r2
   14ce0:	221f      	movs	r2, #31
   14ce2:	400a      	ands	r2, r1
   14ce4:	2101      	movs	r1, #1
   14ce6:	4091      	lsls	r1, r2
   14ce8:	000a      	movs	r2, r1
   14cea:	601a      	str	r2, [r3, #0]
}
   14cec:	46c0      	nop			; (mov r8, r8)
   14cee:	46bd      	mov	sp, r7
   14cf0:	b002      	add	sp, #8
   14cf2:	bd80      	pop	{r7, pc}
   14cf4:	e000e100 	.word	0xe000e100

00014cf8 <i2c_master_is_syncing>:
{
   14cf8:	b580      	push	{r7, lr}
   14cfa:	b084      	sub	sp, #16
   14cfc:	af00      	add	r7, sp, #0
   14cfe:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   14d00:	687b      	ldr	r3, [r7, #4]
   14d02:	681b      	ldr	r3, [r3, #0]
   14d04:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   14d06:	68fb      	ldr	r3, [r7, #12]
   14d08:	69db      	ldr	r3, [r3, #28]
   14d0a:	2207      	movs	r2, #7
   14d0c:	4013      	ands	r3, r2
   14d0e:	1e5a      	subs	r2, r3, #1
   14d10:	4193      	sbcs	r3, r2
   14d12:	b2db      	uxtb	r3, r3
}
   14d14:	0018      	movs	r0, r3
   14d16:	46bd      	mov	sp, r7
   14d18:	b004      	add	sp, #16
   14d1a:	bd80      	pop	{r7, pc}

00014d1c <_i2c_master_wait_for_sync>:
{
   14d1c:	b580      	push	{r7, lr}
   14d1e:	b082      	sub	sp, #8
   14d20:	af00      	add	r7, sp, #0
   14d22:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   14d24:	46c0      	nop			; (mov r8, r8)
   14d26:	687b      	ldr	r3, [r7, #4]
   14d28:	0018      	movs	r0, r3
   14d2a:	4b04      	ldr	r3, [pc, #16]	; (14d3c <_i2c_master_wait_for_sync+0x20>)
   14d2c:	4798      	blx	r3
   14d2e:	1e03      	subs	r3, r0, #0
   14d30:	d1f9      	bne.n	14d26 <_i2c_master_wait_for_sync+0xa>
}
   14d32:	46c0      	nop			; (mov r8, r8)
   14d34:	46bd      	mov	sp, r7
   14d36:	b002      	add	sp, #8
   14d38:	bd80      	pop	{r7, pc}
   14d3a:	46c0      	nop			; (mov r8, r8)
   14d3c:	00014cf9 	.word	0x00014cf9

00014d40 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
   14d40:	b580      	push	{r7, lr}
   14d42:	b082      	sub	sp, #8
   14d44:	af00      	add	r7, sp, #0
   14d46:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   14d48:	687b      	ldr	r3, [r7, #4]
   14d4a:	2264      	movs	r2, #100	; 0x64
   14d4c:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   14d4e:	687b      	ldr	r3, [r7, #4]
   14d50:	4a1b      	ldr	r2, [pc, #108]	; (14dc0 <i2c_master_get_config_defaults+0x80>)
   14d52:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   14d54:	687b      	ldr	r3, [r7, #4]
   14d56:	2200      	movs	r2, #0
   14d58:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
   14d5a:	687b      	ldr	r3, [r7, #4]
   14d5c:	2200      	movs	r2, #0
   14d5e:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
   14d60:	687b      	ldr	r3, [r7, #4]
   14d62:	2200      	movs	r2, #0
   14d64:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   14d66:	687b      	ldr	r3, [r7, #4]
   14d68:	2280      	movs	r2, #128	; 0x80
   14d6a:	0392      	lsls	r2, r2, #14
   14d6c:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
   14d6e:	687b      	ldr	r3, [r7, #4]
   14d70:	2201      	movs	r2, #1
   14d72:	4252      	negs	r2, r2
   14d74:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
   14d76:	687b      	ldr	r3, [r7, #4]
   14d78:	2201      	movs	r2, #1
   14d7a:	4252      	negs	r2, r2
   14d7c:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   14d7e:	687b      	ldr	r3, [r7, #4]
   14d80:	2200      	movs	r2, #0
   14d82:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
   14d84:	687b      	ldr	r3, [r7, #4]
   14d86:	2200      	movs	r2, #0
   14d88:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
   14d8a:	687b      	ldr	r3, [r7, #4]
   14d8c:	2224      	movs	r2, #36	; 0x24
   14d8e:	2100      	movs	r1, #0
   14d90:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   14d92:	687b      	ldr	r3, [r7, #4]
   14d94:	2200      	movs	r2, #0
   14d96:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
   14d98:	687b      	ldr	r3, [r7, #4]
   14d9a:	222c      	movs	r2, #44	; 0x2c
   14d9c:	2100      	movs	r1, #0
   14d9e:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
   14da0:	687b      	ldr	r3, [r7, #4]
   14da2:	222d      	movs	r2, #45	; 0x2d
   14da4:	2100      	movs	r1, #0
   14da6:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
   14da8:	687b      	ldr	r3, [r7, #4]
   14daa:	222e      	movs	r2, #46	; 0x2e
   14dac:	2100      	movs	r1, #0
   14dae:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
   14db0:	687b      	ldr	r3, [r7, #4]
   14db2:	22d7      	movs	r2, #215	; 0xd7
   14db4:	861a      	strh	r2, [r3, #48]	; 0x30
}
   14db6:	46c0      	nop			; (mov r8, r8)
   14db8:	46bd      	mov	sp, r7
   14dba:	b002      	add	sp, #8
   14dbc:	bd80      	pop	{r7, pc}
   14dbe:	46c0      	nop			; (mov r8, r8)
   14dc0:	00000d48 	.word	0x00000d48

00014dc4 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
   14dc4:	b580      	push	{r7, lr}
   14dc6:	b084      	sub	sp, #16
   14dc8:	af00      	add	r7, sp, #0
   14dca:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   14dcc:	687b      	ldr	r3, [r7, #4]
   14dce:	681b      	ldr	r3, [r3, #0]
   14dd0:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
   14dd2:	2300      	movs	r3, #0
   14dd4:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   14dd6:	687b      	ldr	r3, [r7, #4]
   14dd8:	0018      	movs	r0, r3
   14dda:	4b14      	ldr	r3, [pc, #80]	; (14e2c <i2c_master_enable+0x68>)
   14ddc:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   14dde:	68bb      	ldr	r3, [r7, #8]
   14de0:	681b      	ldr	r3, [r3, #0]
   14de2:	2202      	movs	r2, #2
   14de4:	431a      	orrs	r2, r3
   14de6:	68bb      	ldr	r3, [r7, #8]
   14de8:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   14dea:	687b      	ldr	r3, [r7, #4]
   14dec:	681b      	ldr	r3, [r3, #0]
   14dee:	0018      	movs	r0, r3
   14df0:	4b0f      	ldr	r3, [pc, #60]	; (14e30 <i2c_master_enable+0x6c>)
   14df2:	4798      	blx	r3
   14df4:	0003      	movs	r3, r0
   14df6:	0018      	movs	r0, r3
   14df8:	4b0e      	ldr	r3, [pc, #56]	; (14e34 <i2c_master_enable+0x70>)
   14dfa:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   14dfc:	e00c      	b.n	14e18 <i2c_master_enable+0x54>
		timeout_counter++;
   14dfe:	68fb      	ldr	r3, [r7, #12]
   14e00:	3301      	adds	r3, #1
   14e02:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   14e04:	687b      	ldr	r3, [r7, #4]
   14e06:	88db      	ldrh	r3, [r3, #6]
   14e08:	001a      	movs	r2, r3
   14e0a:	68fb      	ldr	r3, [r7, #12]
   14e0c:	429a      	cmp	r2, r3
   14e0e:	d803      	bhi.n	14e18 <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   14e10:	68bb      	ldr	r3, [r7, #8]
   14e12:	2210      	movs	r2, #16
   14e14:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
   14e16:	e006      	b.n	14e26 <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   14e18:	68bb      	ldr	r3, [r7, #8]
   14e1a:	8b5b      	ldrh	r3, [r3, #26]
   14e1c:	b29b      	uxth	r3, r3
   14e1e:	001a      	movs	r2, r3
   14e20:	2310      	movs	r3, #16
   14e22:	4013      	ands	r3, r2
   14e24:	d0eb      	beq.n	14dfe <i2c_master_enable+0x3a>
		}
	}
}
   14e26:	46bd      	mov	sp, r7
   14e28:	b004      	add	sp, #16
   14e2a:	bd80      	pop	{r7, pc}
   14e2c:	00014d1d 	.word	0x00014d1d
   14e30:	000282c1 	.word	0x000282c1
   14e34:	00014ccd 	.word	0x00014ccd

00014e38 <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
   14e38:	b580      	push	{r7, lr}
   14e3a:	b082      	sub	sp, #8
   14e3c:	af00      	add	r7, sp, #0
   14e3e:	6078      	str	r0, [r7, #4]
   14e40:	000a      	movs	r2, r1
   14e42:	1cfb      	adds	r3, r7, #3
   14e44:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
   14e46:	687b      	ldr	r3, [r7, #4]
   14e48:	7e5b      	ldrb	r3, [r3, #25]
   14e4a:	b2db      	uxtb	r3, r3
   14e4c:	b25a      	sxtb	r2, r3
   14e4e:	1cfb      	adds	r3, r7, #3
   14e50:	781b      	ldrb	r3, [r3, #0]
   14e52:	2101      	movs	r1, #1
   14e54:	4099      	lsls	r1, r3
   14e56:	000b      	movs	r3, r1
   14e58:	b25b      	sxtb	r3, r3
   14e5a:	4313      	orrs	r3, r2
   14e5c:	b25b      	sxtb	r3, r3
   14e5e:	b2da      	uxtb	r2, r3
   14e60:	687b      	ldr	r3, [r7, #4]
   14e62:	765a      	strb	r2, [r3, #25]
}
   14e64:	46c0      	nop			; (mov r8, r8)
   14e66:	46bd      	mov	sp, r7
   14e68:	b002      	add	sp, #8
   14e6a:	bd80      	pop	{r7, pc}

00014e6c <I2cDriverConfigureSensorBus>:
struct i2c_master_packet sensorPacketWrite;
/******************************************************************************
 * Forward Declarations
 ******************************************************************************/
static int32_t I2cDriverConfigureSensorBus(void)
{
   14e6c:	b590      	push	{r4, r7, lr}
   14e6e:	b091      	sub	sp, #68	; 0x44
   14e70:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   14e72:	2300      	movs	r3, #0
   14e74:	63fb      	str	r3, [r7, #60]	; 0x3c
    status_code_genare_t errCodeAsf = STATUS_OK;
   14e76:	233a      	movs	r3, #58	; 0x3a
   14e78:	18fb      	adds	r3, r7, r3
   14e7a:	2200      	movs	r2, #0
   14e7c:	701a      	strb	r2, [r3, #0]
    /* Initialize config structure and software module */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
   14e7e:	1d3b      	adds	r3, r7, #4
   14e80:	0018      	movs	r0, r3
   14e82:	4b21      	ldr	r3, [pc, #132]	; (14f08 <I2cDriverConfigureSensorBus+0x9c>)
   14e84:	4798      	blx	r3

    config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
   14e86:	1d3b      	adds	r3, r7, #4
   14e88:	4a20      	ldr	r2, [pc, #128]	; (14f0c <I2cDriverConfigureSensorBus+0xa0>)
   14e8a:	61da      	str	r2, [r3, #28]
    config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
   14e8c:	1d3b      	adds	r3, r7, #4
   14e8e:	4a20      	ldr	r2, [pc, #128]	; (14f10 <I2cDriverConfigureSensorBus+0xa4>)
   14e90:	621a      	str	r2, [r3, #32]
    /* Change buffer timeout to something longer */
    config_i2c_master.buffer_timeout = 1000;
   14e92:	1d3b      	adds	r3, r7, #4
   14e94:	22fa      	movs	r2, #250	; 0xfa
   14e96:	0092      	lsls	r2, r2, #2
   14e98:	82da      	strh	r2, [r3, #22]
    /* Initialize and enable device with config. Try three times to initialize */

    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   14e9a:	233b      	movs	r3, #59	; 0x3b
   14e9c:	18fb      	adds	r3, r7, r3
   14e9e:	2203      	movs	r2, #3
   14ea0:	701a      	strb	r2, [r3, #0]
   14ea2:	e01e      	b.n	14ee2 <I2cDriverConfigureSensorBus+0x76>
        errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
   14ea4:	233a      	movs	r3, #58	; 0x3a
   14ea6:	18fc      	adds	r4, r7, r3
   14ea8:	1d3a      	adds	r2, r7, #4
   14eaa:	491a      	ldr	r1, [pc, #104]	; (14f14 <I2cDriverConfigureSensorBus+0xa8>)
   14eac:	4b1a      	ldr	r3, [pc, #104]	; (14f18 <I2cDriverConfigureSensorBus+0xac>)
   14eae:	0018      	movs	r0, r3
   14eb0:	4b1a      	ldr	r3, [pc, #104]	; (14f1c <I2cDriverConfigureSensorBus+0xb0>)
   14eb2:	4798      	blx	r3
   14eb4:	0003      	movs	r3, r0
   14eb6:	7023      	strb	r3, [r4, #0]
        if (STATUS_OK == errCodeAsf) {
   14eb8:	233a      	movs	r3, #58	; 0x3a
   14eba:	18fb      	adds	r3, r7, r3
   14ebc:	781b      	ldrb	r3, [r3, #0]
   14ebe:	2b00      	cmp	r3, #0
   14ec0:	d104      	bne.n	14ecc <I2cDriverConfigureSensorBus+0x60>
            error = errCodeAsf;
   14ec2:	233a      	movs	r3, #58	; 0x3a
   14ec4:	18fb      	adds	r3, r7, r3
   14ec6:	781b      	ldrb	r3, [r3, #0]
   14ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
   14eca:	e00f      	b.n	14eec <I2cDriverConfigureSensorBus+0x80>
        } else {
            i2c_master_reset(&i2cSensorBusInstance);
   14ecc:	4b12      	ldr	r3, [pc, #72]	; (14f18 <I2cDriverConfigureSensorBus+0xac>)
   14ece:	0018      	movs	r0, r3
   14ed0:	4b13      	ldr	r3, [pc, #76]	; (14f20 <I2cDriverConfigureSensorBus+0xb4>)
   14ed2:	4798      	blx	r3
    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   14ed4:	233b      	movs	r3, #59	; 0x3b
   14ed6:	18fb      	adds	r3, r7, r3
   14ed8:	781a      	ldrb	r2, [r3, #0]
   14eda:	233b      	movs	r3, #59	; 0x3b
   14edc:	18fb      	adds	r3, r7, r3
   14ede:	3a01      	subs	r2, #1
   14ee0:	701a      	strb	r2, [r3, #0]
   14ee2:	233b      	movs	r3, #59	; 0x3b
   14ee4:	18fb      	adds	r3, r7, r3
   14ee6:	781b      	ldrb	r3, [r3, #0]
   14ee8:	2b00      	cmp	r3, #0
   14eea:	d1db      	bne.n	14ea4 <I2cDriverConfigureSensorBus+0x38>
        }
    }

    if (STATUS_OK != error) goto exit;
   14eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14eee:	2b00      	cmp	r3, #0
   14ef0:	d104      	bne.n	14efc <I2cDriverConfigureSensorBus+0x90>

    i2c_master_enable(&i2cSensorBusInstance);
   14ef2:	4b09      	ldr	r3, [pc, #36]	; (14f18 <I2cDriverConfigureSensorBus+0xac>)
   14ef4:	0018      	movs	r0, r3
   14ef6:	4b0b      	ldr	r3, [pc, #44]	; (14f24 <I2cDriverConfigureSensorBus+0xb8>)
   14ef8:	4798      	blx	r3
   14efa:	e000      	b.n	14efe <I2cDriverConfigureSensorBus+0x92>
    if (STATUS_OK != error) goto exit;
   14efc:	46c0      	nop			; (mov r8, r8)

exit:
    return error;
   14efe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   14f00:	0018      	movs	r0, r3
   14f02:	46bd      	mov	sp, r7
   14f04:	b011      	add	sp, #68	; 0x44
   14f06:	bd90      	pop	{r4, r7, pc}
   14f08:	00014d41 	.word	0x00014d41
   14f0c:	00080002 	.word	0x00080002
   14f10:	00090002 	.word	0x00090002
   14f14:	42000800 	.word	0x42000800
   14f18:	2000482c 	.word	0x2000482c
   14f1c:	000187bd 	.word	0x000187bd
   14f20:	000188f1 	.word	0x000188f1
   14f24:	00014dc5 	.word	0x00014dc5

00014f28 <I2cSensorsTxComplete>:
  * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
  * @note
  */
void I2cSensorsTxComplete(struct i2c_master_module *const module)
{
   14f28:	b580      	push	{r7, lr}
   14f2a:	b084      	sub	sp, #16
   14f2c:	af00      	add	r7, sp, #0
   14f2e:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   14f30:	4b0e      	ldr	r3, [pc, #56]	; (14f6c <I2cSensorsTxComplete+0x44>)
   14f32:	2200      	movs	r2, #0
   14f34:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   14f36:	4b0d      	ldr	r3, [pc, #52]	; (14f6c <I2cSensorsTxComplete+0x44>)
   14f38:	2201      	movs	r2, #1
   14f3a:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   14f3c:	2300      	movs	r3, #0
   14f3e:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   14f40:	4b0b      	ldr	r3, [pc, #44]	; (14f70 <I2cSensorsTxComplete+0x48>)
   14f42:	681b      	ldr	r3, [r3, #0]
   14f44:	220c      	movs	r2, #12
   14f46:	18ba      	adds	r2, r7, r2
   14f48:	0011      	movs	r1, r2
   14f4a:	0018      	movs	r0, r3
   14f4c:	4b09      	ldr	r3, [pc, #36]	; (14f74 <I2cSensorsTxComplete+0x4c>)
   14f4e:	4798      	blx	r3
    sensorTransmitError = false;
   14f50:	4b09      	ldr	r3, [pc, #36]	; (14f78 <I2cSensorsTxComplete+0x50>)
   14f52:	2200      	movs	r2, #0
   14f54:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   14f56:	68fb      	ldr	r3, [r7, #12]
   14f58:	2b00      	cmp	r3, #0
   14f5a:	d003      	beq.n	14f64 <I2cSensorsTxComplete+0x3c>
   14f5c:	4b07      	ldr	r3, [pc, #28]	; (14f7c <I2cSensorsTxComplete+0x54>)
   14f5e:	2280      	movs	r2, #128	; 0x80
   14f60:	0552      	lsls	r2, r2, #21
   14f62:	601a      	str	r2, [r3, #0]
}
   14f64:	46c0      	nop			; (mov r8, r8)
   14f66:	46bd      	mov	sp, r7
   14f68:	b004      	add	sp, #16
   14f6a:	bd80      	pop	{r7, pc}
   14f6c:	2000060c 	.word	0x2000060c
   14f70:	20004854 	.word	0x20004854
   14f74:	0001ba55 	.word	0x0001ba55
   14f78:	20000608 	.word	0x20000608
   14f7c:	e000ed04 	.word	0xe000ed04

00014f80 <I2cSensorsRxComplete>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsRxComplete(struct i2c_master_module *const module)
{
   14f80:	b580      	push	{r7, lr}
   14f82:	b084      	sub	sp, #16
   14f84:	af00      	add	r7, sp, #0
   14f86:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   14f88:	4b0e      	ldr	r3, [pc, #56]	; (14fc4 <I2cSensorsRxComplete+0x44>)
   14f8a:	2200      	movs	r2, #0
   14f8c:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   14f8e:	4b0d      	ldr	r3, [pc, #52]	; (14fc4 <I2cSensorsRxComplete+0x44>)
   14f90:	2201      	movs	r2, #1
   14f92:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   14f94:	2300      	movs	r3, #0
   14f96:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   14f98:	4b0b      	ldr	r3, [pc, #44]	; (14fc8 <I2cSensorsRxComplete+0x48>)
   14f9a:	681b      	ldr	r3, [r3, #0]
   14f9c:	220c      	movs	r2, #12
   14f9e:	18ba      	adds	r2, r7, r2
   14fa0:	0011      	movs	r1, r2
   14fa2:	0018      	movs	r0, r3
   14fa4:	4b09      	ldr	r3, [pc, #36]	; (14fcc <I2cSensorsRxComplete+0x4c>)
   14fa6:	4798      	blx	r3
    sensorTransmitError = false;
   14fa8:	4b09      	ldr	r3, [pc, #36]	; (14fd0 <I2cSensorsRxComplete+0x50>)
   14faa:	2200      	movs	r2, #0
   14fac:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   14fae:	68fb      	ldr	r3, [r7, #12]
   14fb0:	2b00      	cmp	r3, #0
   14fb2:	d003      	beq.n	14fbc <I2cSensorsRxComplete+0x3c>
   14fb4:	4b07      	ldr	r3, [pc, #28]	; (14fd4 <I2cSensorsRxComplete+0x54>)
   14fb6:	2280      	movs	r2, #128	; 0x80
   14fb8:	0552      	lsls	r2, r2, #21
   14fba:	601a      	str	r2, [r3, #0]
}
   14fbc:	46c0      	nop			; (mov r8, r8)
   14fbe:	46bd      	mov	sp, r7
   14fc0:	b004      	add	sp, #16
   14fc2:	bd80      	pop	{r7, pc}
   14fc4:	2000060c 	.word	0x2000060c
   14fc8:	20004854 	.word	0x20004854
   14fcc:	0001ba55 	.word	0x0001ba55
   14fd0:	20000608 	.word	0x20000608
   14fd4:	e000ed04 	.word	0xe000ed04

00014fd8 <I2cSensorsError>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsError(struct i2c_master_module *const module)
{
   14fd8:	b580      	push	{r7, lr}
   14fda:	b084      	sub	sp, #16
   14fdc:	af00      	add	r7, sp, #0
   14fde:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   14fe0:	4b0e      	ldr	r3, [pc, #56]	; (1501c <I2cSensorsError+0x44>)
   14fe2:	2200      	movs	r2, #0
   14fe4:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.txDoneFlag = true;
   14fe6:	4b0d      	ldr	r3, [pc, #52]	; (1501c <I2cSensorsError+0x44>)
   14fe8:	2201      	movs	r2, #1
   14fea:	605a      	str	r2, [r3, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   14fec:	2300      	movs	r3, #0
   14fee:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   14ff0:	4b0b      	ldr	r3, [pc, #44]	; (15020 <I2cSensorsError+0x48>)
   14ff2:	681b      	ldr	r3, [r3, #0]
   14ff4:	220c      	movs	r2, #12
   14ff6:	18ba      	adds	r2, r7, r2
   14ff8:	0011      	movs	r1, r2
   14ffa:	0018      	movs	r0, r3
   14ffc:	4b09      	ldr	r3, [pc, #36]	; (15024 <I2cSensorsError+0x4c>)
   14ffe:	4798      	blx	r3
    sensorTransmitError = true;
   15000:	4b09      	ldr	r3, [pc, #36]	; (15028 <I2cSensorsError+0x50>)
   15002:	2201      	movs	r2, #1
   15004:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   15006:	68fb      	ldr	r3, [r7, #12]
   15008:	2b00      	cmp	r3, #0
   1500a:	d003      	beq.n	15014 <I2cSensorsError+0x3c>
   1500c:	4b07      	ldr	r3, [pc, #28]	; (1502c <I2cSensorsError+0x54>)
   1500e:	2280      	movs	r2, #128	; 0x80
   15010:	0552      	lsls	r2, r2, #21
   15012:	601a      	str	r2, [r3, #0]
}
   15014:	46c0      	nop			; (mov r8, r8)
   15016:	46bd      	mov	sp, r7
   15018:	b004      	add	sp, #16
   1501a:	bd80      	pop	{r7, pc}
   1501c:	2000060c 	.word	0x2000060c
   15020:	20004854 	.word	0x20004854
   15024:	0001ba55 	.word	0x0001ba55
   15028:	20000608 	.word	0x20000608
   1502c:	e000ed04 	.word	0xe000ed04

00015030 <I2cDriverRegisterSensorBusCallbacks>:

void I2cDriverRegisterSensorBusCallbacks(void)
{
   15030:	b580      	push	{r7, lr}
   15032:	af00      	add	r7, sp, #0
    /* Register callback function. */
    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   15034:	4911      	ldr	r1, [pc, #68]	; (1507c <I2cDriverRegisterSensorBusCallbacks+0x4c>)
   15036:	4b12      	ldr	r3, [pc, #72]	; (15080 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   15038:	2200      	movs	r2, #0
   1503a:	0018      	movs	r0, r3
   1503c:	4b11      	ldr	r3, [pc, #68]	; (15084 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   1503e:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   15040:	4b0f      	ldr	r3, [pc, #60]	; (15080 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   15042:	2100      	movs	r1, #0
   15044:	0018      	movs	r0, r3
   15046:	4b10      	ldr	r3, [pc, #64]	; (15088 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   15048:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
   1504a:	4910      	ldr	r1, [pc, #64]	; (1508c <I2cDriverRegisterSensorBusCallbacks+0x5c>)
   1504c:	4b0c      	ldr	r3, [pc, #48]	; (15080 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   1504e:	2201      	movs	r2, #1
   15050:	0018      	movs	r0, r3
   15052:	4b0c      	ldr	r3, [pc, #48]	; (15084 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   15054:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_READ_COMPLETE);
   15056:	4b0a      	ldr	r3, [pc, #40]	; (15080 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   15058:	2101      	movs	r1, #1
   1505a:	0018      	movs	r0, r3
   1505c:	4b0a      	ldr	r3, [pc, #40]	; (15088 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   1505e:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError, I2C_MASTER_CALLBACK_ERROR);
   15060:	490b      	ldr	r1, [pc, #44]	; (15090 <I2cDriverRegisterSensorBusCallbacks+0x60>)
   15062:	4b07      	ldr	r3, [pc, #28]	; (15080 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   15064:	2202      	movs	r2, #2
   15066:	0018      	movs	r0, r3
   15068:	4b06      	ldr	r3, [pc, #24]	; (15084 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   1506a:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_ERROR);
   1506c:	4b04      	ldr	r3, [pc, #16]	; (15080 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   1506e:	2102      	movs	r1, #2
   15070:	0018      	movs	r0, r3
   15072:	4b05      	ldr	r3, [pc, #20]	; (15088 <I2cDriverRegisterSensorBusCallbacks+0x58>)
   15074:	4798      	blx	r3
}
   15076:	46c0      	nop			; (mov r8, r8)
   15078:	46bd      	mov	sp, r7
   1507a:	bd80      	pop	{r7, pc}
   1507c:	00014f29 	.word	0x00014f29
   15080:	2000482c 	.word	0x2000482c
   15084:	00013a09 	.word	0x00013a09
   15088:	00014e39 	.word	0x00014e39
   1508c:	00014f81 	.word	0x00014f81
   15090:	00014fd9 	.word	0x00014fd9

00015094 <I2cInitializeDriver>:
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note
 */
int32_t I2cInitializeDriver(void)
{
   15094:	b580      	push	{r7, lr}
   15096:	b082      	sub	sp, #8
   15098:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   1509a:	2300      	movs	r3, #0
   1509c:	607b      	str	r3, [r7, #4]

    error = I2cDriverConfigureSensorBus();
   1509e:	4b14      	ldr	r3, [pc, #80]	; (150f0 <I2cInitializeDriver+0x5c>)
   150a0:	4798      	blx	r3
   150a2:	0003      	movs	r3, r0
   150a4:	607b      	str	r3, [r7, #4]
    if (STATUS_OK != error) goto exit;
   150a6:	687b      	ldr	r3, [r7, #4]
   150a8:	2b00      	cmp	r3, #0
   150aa:	d11a      	bne.n	150e2 <I2cInitializeDriver+0x4e>

    I2cDriverRegisterSensorBusCallbacks();
   150ac:	4b11      	ldr	r3, [pc, #68]	; (150f4 <I2cInitializeDriver+0x60>)
   150ae:	4798      	blx	r3

    sensorI2cMutexHandle = xSemaphoreCreateMutex();
   150b0:	2001      	movs	r0, #1
   150b2:	4b11      	ldr	r3, [pc, #68]	; (150f8 <I2cInitializeDriver+0x64>)
   150b4:	4798      	blx	r3
   150b6:	0002      	movs	r2, r0
   150b8:	4b10      	ldr	r3, [pc, #64]	; (150fc <I2cInitializeDriver+0x68>)
   150ba:	601a      	str	r2, [r3, #0]

    sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
   150bc:	2203      	movs	r2, #3
   150be:	2100      	movs	r1, #0
   150c0:	2001      	movs	r0, #1
   150c2:	4b0f      	ldr	r3, [pc, #60]	; (15100 <I2cInitializeDriver+0x6c>)
   150c4:	4798      	blx	r3
   150c6:	0002      	movs	r2, r0
   150c8:	4b0e      	ldr	r3, [pc, #56]	; (15104 <I2cInitializeDriver+0x70>)
   150ca:	601a      	str	r2, [r3, #0]
    // xSemaphoreGive(sensorI2cSemaphoreHandle);

    if (NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle) {
   150cc:	4b0b      	ldr	r3, [pc, #44]	; (150fc <I2cInitializeDriver+0x68>)
   150ce:	681b      	ldr	r3, [r3, #0]
   150d0:	2b00      	cmp	r3, #0
   150d2:	d003      	beq.n	150dc <I2cInitializeDriver+0x48>
   150d4:	4b0b      	ldr	r3, [pc, #44]	; (15104 <I2cInitializeDriver+0x70>)
   150d6:	681b      	ldr	r3, [r3, #0]
   150d8:	2b00      	cmp	r3, #0
   150da:	d103      	bne.n	150e4 <I2cInitializeDriver+0x50>
        error = STATUS_SUSPEND;  // Could not initialize mutex!
   150dc:	2306      	movs	r3, #6
   150de:	607b      	str	r3, [r7, #4]
        goto exit;
   150e0:	e000      	b.n	150e4 <I2cInitializeDriver+0x50>
    if (STATUS_OK != error) goto exit;
   150e2:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   150e4:	687b      	ldr	r3, [r7, #4]
}
   150e6:	0018      	movs	r0, r3
   150e8:	46bd      	mov	sp, r7
   150ea:	b002      	add	sp, #8
   150ec:	bd80      	pop	{r7, pc}
   150ee:	46c0      	nop			; (mov r8, r8)
   150f0:	00014e6d 	.word	0x00014e6d
   150f4:	00015031 	.word	0x00015031
   150f8:	0001b38d 	.word	0x0001b38d
   150fc:	20004828 	.word	0x20004828
   15100:	0001b125 	.word	0x0001b125
   15104:	20004854 	.word	0x20004854

00015108 <I2cWriteData>:
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */

int32_t I2cWriteData(I2C_Data *data)
{
   15108:	b590      	push	{r4, r7, lr}
   1510a:	b085      	sub	sp, #20
   1510c:	af00      	add	r7, sp, #0
   1510e:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   15110:	2300      	movs	r3, #0
   15112:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   15114:	687b      	ldr	r3, [r7, #4]
   15116:	2b00      	cmp	r3, #0
   15118:	d003      	beq.n	15122 <I2cWriteData+0x1a>
   1511a:	687b      	ldr	r3, [r7, #4]
   1511c:	685b      	ldr	r3, [r3, #4]
   1511e:	2b00      	cmp	r3, #0
   15120:	d103      	bne.n	1512a <I2cWriteData+0x22>
        error = ERR_INVALID_ARG;
   15122:	2308      	movs	r3, #8
   15124:	425b      	negs	r3, r3
   15126:	60fb      	str	r3, [r7, #12]
        goto exit;
   15128:	e01f      	b.n	1516a <I2cWriteData+0x62>
    }

    // Prepare to write
    sensorPacketWrite.address = data->address;
   1512a:	687b      	ldr	r3, [r7, #4]
   1512c:	781b      	ldrb	r3, [r3, #0]
   1512e:	b29a      	uxth	r2, r3
   15130:	4b10      	ldr	r3, [pc, #64]	; (15174 <I2cWriteData+0x6c>)
   15132:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = (uint8_t *)data->msgOut;
   15134:	687b      	ldr	r3, [r7, #4]
   15136:	685a      	ldr	r2, [r3, #4]
   15138:	4b0e      	ldr	r3, [pc, #56]	; (15174 <I2cWriteData+0x6c>)
   1513a:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenOut;
   1513c:	687b      	ldr	r3, [r7, #4]
   1513e:	89da      	ldrh	r2, [r3, #14]
   15140:	4b0c      	ldr	r3, [pc, #48]	; (15174 <I2cWriteData+0x6c>)
   15142:	805a      	strh	r2, [r3, #2]

    // Write

    hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   15144:	230b      	movs	r3, #11
   15146:	18fc      	adds	r4, r7, r3
   15148:	4a0a      	ldr	r2, [pc, #40]	; (15174 <I2cWriteData+0x6c>)
   1514a:	4b0b      	ldr	r3, [pc, #44]	; (15178 <I2cWriteData+0x70>)
   1514c:	0011      	movs	r1, r2
   1514e:	0018      	movs	r0, r3
   15150:	4b0a      	ldr	r3, [pc, #40]	; (1517c <I2cWriteData+0x74>)
   15152:	4798      	blx	r3
   15154:	0003      	movs	r3, r0
   15156:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   15158:	230b      	movs	r3, #11
   1515a:	18fb      	adds	r3, r7, r3
   1515c:	781b      	ldrb	r3, [r3, #0]
   1515e:	2b00      	cmp	r3, #0
   15160:	d003      	beq.n	1516a <I2cWriteData+0x62>
        error = ERROR_IO;
   15162:	2306      	movs	r3, #6
   15164:	425b      	negs	r3, r3
   15166:	60fb      	str	r3, [r7, #12]
        goto exit;
   15168:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   1516a:	68fb      	ldr	r3, [r7, #12]
}
   1516c:	0018      	movs	r0, r3
   1516e:	46bd      	mov	sp, r7
   15170:	b005      	add	sp, #20
   15172:	bd90      	pop	{r4, r7, pc}
   15174:	20004858 	.word	0x20004858
   15178:	2000482c 	.word	0x2000482c
   1517c:	00013c8d 	.word	0x00013c8d

00015180 <I2cReadData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
int32_t I2cReadData(I2C_Data *data)
{
   15180:	b590      	push	{r4, r7, lr}
   15182:	b085      	sub	sp, #20
   15184:	af00      	add	r7, sp, #0
   15186:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   15188:	2300      	movs	r3, #0
   1518a:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   1518c:	687b      	ldr	r3, [r7, #4]
   1518e:	2b00      	cmp	r3, #0
   15190:	d003      	beq.n	1519a <I2cReadData+0x1a>
   15192:	687b      	ldr	r3, [r7, #4]
   15194:	685b      	ldr	r3, [r3, #4]
   15196:	2b00      	cmp	r3, #0
   15198:	d103      	bne.n	151a2 <I2cReadData+0x22>
        error = ERR_INVALID_ARG;
   1519a:	2308      	movs	r3, #8
   1519c:	425b      	negs	r3, r3
   1519e:	60fb      	str	r3, [r7, #12]
        goto exit;
   151a0:	e01f      	b.n	151e2 <I2cReadData+0x62>
    }

    // Prepare to read
    sensorPacketWrite.address = data->address;
   151a2:	687b      	ldr	r3, [r7, #4]
   151a4:	781b      	ldrb	r3, [r3, #0]
   151a6:	b29a      	uxth	r2, r3
   151a8:	4b10      	ldr	r3, [pc, #64]	; (151ec <I2cReadData+0x6c>)
   151aa:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = data->msgIn;
   151ac:	687b      	ldr	r3, [r7, #4]
   151ae:	689a      	ldr	r2, [r3, #8]
   151b0:	4b0e      	ldr	r3, [pc, #56]	; (151ec <I2cReadData+0x6c>)
   151b2:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenIn;
   151b4:	687b      	ldr	r3, [r7, #4]
   151b6:	899a      	ldrh	r2, [r3, #12]
   151b8:	4b0c      	ldr	r3, [pc, #48]	; (151ec <I2cReadData+0x6c>)
   151ba:	805a      	strh	r2, [r3, #2]

    // Read

    hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   151bc:	230b      	movs	r3, #11
   151be:	18fc      	adds	r4, r7, r3
   151c0:	4a0a      	ldr	r2, [pc, #40]	; (151ec <I2cReadData+0x6c>)
   151c2:	4b0b      	ldr	r3, [pc, #44]	; (151f0 <I2cReadData+0x70>)
   151c4:	0011      	movs	r1, r2
   151c6:	0018      	movs	r0, r3
   151c8:	4b0a      	ldr	r3, [pc, #40]	; (151f4 <I2cReadData+0x74>)
   151ca:	4798      	blx	r3
   151cc:	0003      	movs	r3, r0
   151ce:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   151d0:	230b      	movs	r3, #11
   151d2:	18fb      	adds	r3, r7, r3
   151d4:	781b      	ldrb	r3, [r3, #0]
   151d6:	2b00      	cmp	r3, #0
   151d8:	d003      	beq.n	151e2 <I2cReadData+0x62>
        error = ERROR_IO;
   151da:	2306      	movs	r3, #6
   151dc:	425b      	negs	r3, r3
   151de:	60fb      	str	r3, [r7, #12]
        goto exit;
   151e0:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   151e2:	68fb      	ldr	r3, [r7, #12]
}
   151e4:	0018      	movs	r0, r3
   151e6:	46bd      	mov	sp, r7
   151e8:	b005      	add	sp, #20
   151ea:	bd90      	pop	{r4, r7, pc}
   151ec:	20004858 	.word	0x20004858
   151f0:	2000482c 	.word	0x2000482c
   151f4:	00013ba9 	.word	0x00013ba9

000151f8 <I2cFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cFreeMutex(void)
{
   151f8:	b590      	push	{r4, r7, lr}
   151fa:	b083      	sub	sp, #12
   151fc:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   151fe:	2300      	movs	r3, #0
   15200:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE) {
   15202:	4b09      	ldr	r3, [pc, #36]	; (15228 <I2cFreeMutex+0x30>)
   15204:	6818      	ldr	r0, [r3, #0]
   15206:	2300      	movs	r3, #0
   15208:	2200      	movs	r2, #0
   1520a:	2100      	movs	r1, #0
   1520c:	4c07      	ldr	r4, [pc, #28]	; (1522c <I2cFreeMutex+0x34>)
   1520e:	47a0      	blx	r4
   15210:	0003      	movs	r3, r0
   15212:	2b01      	cmp	r3, #1
   15214:	d002      	beq.n	1521c <I2cFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   15216:	2314      	movs	r3, #20
   15218:	425b      	negs	r3, r3
   1521a:	607b      	str	r3, [r7, #4]
    }
    return error;
   1521c:	687b      	ldr	r3, [r7, #4]
}
   1521e:	0018      	movs	r0, r3
   15220:	46bd      	mov	sp, r7
   15222:	b003      	add	sp, #12
   15224:	bd90      	pop	{r4, r7, pc}
   15226:	46c0      	nop			; (mov r8, r8)
   15228:	20004828 	.word	0x20004828
   1522c:	0001b3cd 	.word	0x0001b3cd

00015230 <I2cGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cGetMutex(TickType_t waitTime)
{
   15230:	b580      	push	{r7, lr}
   15232:	b084      	sub	sp, #16
   15234:	af00      	add	r7, sp, #0
   15236:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   15238:	2300      	movs	r3, #0
   1523a:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE) {
   1523c:	4b08      	ldr	r3, [pc, #32]	; (15260 <I2cGetMutex+0x30>)
   1523e:	681b      	ldr	r3, [r3, #0]
   15240:	687a      	ldr	r2, [r7, #4]
   15242:	0011      	movs	r1, r2
   15244:	0018      	movs	r0, r3
   15246:	4b07      	ldr	r3, [pc, #28]	; (15264 <I2cGetMutex+0x34>)
   15248:	4798      	blx	r3
   1524a:	0003      	movs	r3, r0
   1524c:	2b01      	cmp	r3, #1
   1524e:	d002      	beq.n	15256 <I2cGetMutex+0x26>
        error = ERROR_NOT_READY;
   15250:	231d      	movs	r3, #29
   15252:	425b      	negs	r3, r3
   15254:	60fb      	str	r3, [r7, #12]
    }
    return error;
   15256:	68fb      	ldr	r3, [r7, #12]
}
   15258:	0018      	movs	r0, r3
   1525a:	46bd      	mov	sp, r7
   1525c:	b004      	add	sp, #16
   1525e:	bd80      	pop	{r7, pc}
   15260:	20004828 	.word	0x20004828
   15264:	0001c0dd 	.word	0x0001c0dd

00015268 <I2cGetSemaphoreHandle>:

static int32_t I2cGetSemaphoreHandle(SemaphoreHandle_t *handle)
{
   15268:	b580      	push	{r7, lr}
   1526a:	b084      	sub	sp, #16
   1526c:	af00      	add	r7, sp, #0
   1526e:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   15270:	2300      	movs	r3, #0
   15272:	60fb      	str	r3, [r7, #12]
    *handle = sensorI2cSemaphoreHandle;
   15274:	4b04      	ldr	r3, [pc, #16]	; (15288 <I2cGetSemaphoreHandle+0x20>)
   15276:	681a      	ldr	r2, [r3, #0]
   15278:	687b      	ldr	r3, [r7, #4]
   1527a:	601a      	str	r2, [r3, #0]
    return error;
   1527c:	68fb      	ldr	r3, [r7, #12]
}
   1527e:	0018      	movs	r0, r3
   15280:	46bd      	mov	sp, r7
   15282:	b004      	add	sp, #16
   15284:	bd80      	pop	{r7, pc}
   15286:	46c0      	nop			; (mov r8, r8)
   15288:	20004854 	.word	0x20004854

0001528c <I2cGetTaskErrorStatus>:
 *the I2C data structure).
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static uint8_t I2cGetTaskErrorStatus(void)
{
   1528c:	b580      	push	{r7, lr}
   1528e:	af00      	add	r7, sp, #0
    return sensorTransmitError;
   15290:	4b02      	ldr	r3, [pc, #8]	; (1529c <I2cGetTaskErrorStatus+0x10>)
   15292:	781b      	ldrb	r3, [r3, #0]
}
   15294:	0018      	movs	r0, r3
   15296:	46bd      	mov	sp, r7
   15298:	bd80      	pop	{r7, pc}
   1529a:	46c0      	nop			; (mov r8, r8)
   1529c:	20000608 	.word	0x20000608

000152a0 <I2cSetTaskErrorStatus>:
 * @param[in]   value Value to which to set the error flag to.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static void I2cSetTaskErrorStatus(uint8_t value)
{
   152a0:	b580      	push	{r7, lr}
   152a2:	b082      	sub	sp, #8
   152a4:	af00      	add	r7, sp, #0
   152a6:	0002      	movs	r2, r0
   152a8:	1dfb      	adds	r3, r7, #7
   152aa:	701a      	strb	r2, [r3, #0]
    sensorTransmitError = value;
   152ac:	4b03      	ldr	r3, [pc, #12]	; (152bc <I2cSetTaskErrorStatus+0x1c>)
   152ae:	1dfa      	adds	r2, r7, #7
   152b0:	7812      	ldrb	r2, [r2, #0]
   152b2:	701a      	strb	r2, [r3, #0]
}
   152b4:	46c0      	nop			; (mov r8, r8)
   152b6:	46bd      	mov	sp, r7
   152b8:	b002      	add	sp, #8
   152ba:	bd80      	pop	{r7, pc}
   152bc:	20000608 	.word	0x20000608

000152c0 <I2cWriteDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error.
  * @note
  */
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime)
{
   152c0:	b580      	push	{r7, lr}
   152c2:	b084      	sub	sp, #16
   152c4:	af00      	add	r7, sp, #0
   152c6:	6078      	str	r0, [r7, #4]
   152c8:	6039      	str	r1, [r7, #0]
    int32_t error = ERROR_NONE;
   152ca:	2300      	movs	r3, #0
   152cc:	60fb      	str	r3, [r7, #12]
    SemaphoreHandle_t semHandle = NULL;
   152ce:	2300      	movs	r3, #0
   152d0:	60bb      	str	r3, [r7, #8]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   152d2:	2396      	movs	r3, #150	; 0x96
   152d4:	005b      	lsls	r3, r3, #1
   152d6:	0018      	movs	r0, r3
   152d8:	4b28      	ldr	r3, [pc, #160]	; (1537c <I2cWriteDataWait+0xbc>)
   152da:	4798      	blx	r3
   152dc:	0003      	movs	r3, r0
   152de:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   152e0:	68fb      	ldr	r3, [r7, #12]
   152e2:	2b00      	cmp	r3, #0
   152e4:	d138      	bne.n	15358 <I2cWriteDataWait+0x98>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   152e6:	2308      	movs	r3, #8
   152e8:	18fb      	adds	r3, r7, r3
   152ea:	0018      	movs	r0, r3
   152ec:	4b24      	ldr	r3, [pc, #144]	; (15380 <I2cWriteDataWait+0xc0>)
   152ee:	4798      	blx	r3
   152f0:	0003      	movs	r3, r0
   152f2:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   152f4:	68fb      	ldr	r3, [r7, #12]
   152f6:	2b00      	cmp	r3, #0
   152f8:	d130      	bne.n	1535c <I2cWriteDataWait+0x9c>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   152fa:	687b      	ldr	r3, [r7, #4]
   152fc:	0018      	movs	r0, r3
   152fe:	4b21      	ldr	r3, [pc, #132]	; (15384 <I2cWriteDataWait+0xc4>)
   15300:	4798      	blx	r3
   15302:	0003      	movs	r3, r0
   15304:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) {
   15306:	68fb      	ldr	r3, [r7, #12]
   15308:	2b00      	cmp	r3, #0
   1530a:	d12a      	bne.n	15362 <I2cWriteDataWait+0xa2>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   1530c:	68bb      	ldr	r3, [r7, #8]
   1530e:	683a      	ldr	r2, [r7, #0]
   15310:	0011      	movs	r1, r2
   15312:	0018      	movs	r0, r3
   15314:	4b1c      	ldr	r3, [pc, #112]	; (15388 <I2cWriteDataWait+0xc8>)
   15316:	4798      	blx	r3
   15318:	0003      	movs	r3, r0
   1531a:	2b01      	cmp	r3, #1
   1531c:	d111      	bne.n	15342 <I2cWriteDataWait+0x82>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   1531e:	4b1b      	ldr	r3, [pc, #108]	; (1538c <I2cWriteDataWait+0xcc>)
   15320:	4798      	blx	r3
   15322:	1e03      	subs	r3, r0, #0
   15324:	d011      	beq.n	1534a <I2cWriteDataWait+0x8a>
            I2cSetTaskErrorStatus(false);
   15326:	2000      	movs	r0, #0
   15328:	4b19      	ldr	r3, [pc, #100]	; (15390 <I2cWriteDataWait+0xd0>)
   1532a:	4798      	blx	r3
            if (error != ERROR_NONE) {
   1532c:	68fb      	ldr	r3, [r7, #12]
   1532e:	2b00      	cmp	r3, #0
   15330:	d003      	beq.n	1533a <I2cWriteDataWait+0x7a>
                error = ERROR_I2C_HANG_RESET;
   15332:	2321      	movs	r3, #33	; 0x21
   15334:	425b      	negs	r3, r3
   15336:	60fb      	str	r3, [r7, #12]
            } else {
                error = ERROR_ABORTED;
            }
            goto exitError0;
   15338:	e014      	b.n	15364 <I2cWriteDataWait+0xa4>
                error = ERROR_ABORTED;
   1533a:	2303      	movs	r3, #3
   1533c:	425b      	negs	r3, r3
   1533e:	60fb      	str	r3, [r7, #12]
            goto exitError0;
   15340:	e010      	b.n	15364 <I2cWriteDataWait+0xa4>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   15342:	2303      	movs	r3, #3
   15344:	425b      	negs	r3, r3
   15346:	60fb      	str	r3, [r7, #12]
        goto exitError0;
   15348:	e00c      	b.n	15364 <I2cWriteDataWait+0xa4>
    }

    //---8. Release Mutex
    error |= I2cFreeMutex();
   1534a:	4b12      	ldr	r3, [pc, #72]	; (15394 <I2cWriteDataWait+0xd4>)
   1534c:	4798      	blx	r3
   1534e:	0002      	movs	r2, r0
   15350:	68fb      	ldr	r3, [r7, #12]
   15352:	4313      	orrs	r3, r2
   15354:	60fb      	str	r3, [r7, #12]
   15356:	e002      	b.n	1535e <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   15358:	46c0      	nop			; (mov r8, r8)
   1535a:	e000      	b.n	1535e <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   1535c:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   1535e:	68fb      	ldr	r3, [r7, #12]
   15360:	e007      	b.n	15372 <I2cWriteDataWait+0xb2>
        goto exitError0;
   15362:	46c0      	nop			; (mov r8, r8)

exitError0:
    error |= I2cFreeMutex();
   15364:	4b0b      	ldr	r3, [pc, #44]	; (15394 <I2cWriteDataWait+0xd4>)
   15366:	4798      	blx	r3
   15368:	0002      	movs	r2, r0
   1536a:	68fb      	ldr	r3, [r7, #12]
   1536c:	4313      	orrs	r3, r2
   1536e:	60fb      	str	r3, [r7, #12]
    // xSemaphoreGive(semHandle);
    return error;
   15370:	68fb      	ldr	r3, [r7, #12]
}
   15372:	0018      	movs	r0, r3
   15374:	46bd      	mov	sp, r7
   15376:	b004      	add	sp, #16
   15378:	bd80      	pop	{r7, pc}
   1537a:	46c0      	nop			; (mov r8, r8)
   1537c:	00015231 	.word	0x00015231
   15380:	00015269 	.word	0x00015269
   15384:	00015109 	.word	0x00015109
   15388:	0001c0dd 	.word	0x0001c0dd
   1538c:	0001528d 	.word	0x0001528d
   15390:	000152a1 	.word	0x000152a1
   15394:	000151f9 	.word	0x000151f9

00015398 <I2cReadDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
   15398:	b580      	push	{r7, lr}
   1539a:	b086      	sub	sp, #24
   1539c:	af00      	add	r7, sp, #0
   1539e:	60f8      	str	r0, [r7, #12]
   153a0:	60b9      	str	r1, [r7, #8]
   153a2:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
   153a4:	2300      	movs	r3, #0
   153a6:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
   153a8:	2300      	movs	r3, #0
   153aa:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   153ac:	2396      	movs	r3, #150	; 0x96
   153ae:	005b      	lsls	r3, r3, #1
   153b0:	0018      	movs	r0, r3
   153b2:	4b35      	ldr	r3, [pc, #212]	; (15488 <I2cReadDataWait+0xf0>)
   153b4:	4798      	blx	r3
   153b6:	0003      	movs	r3, r0
   153b8:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   153ba:	697b      	ldr	r3, [r7, #20]
   153bc:	2b00      	cmp	r3, #0
   153be:	d155      	bne.n	1546c <I2cReadDataWait+0xd4>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   153c0:	2310      	movs	r3, #16
   153c2:	18fb      	adds	r3, r7, r3
   153c4:	0018      	movs	r0, r3
   153c6:	4b31      	ldr	r3, [pc, #196]	; (1548c <I2cReadDataWait+0xf4>)
   153c8:	4798      	blx	r3
   153ca:	0003      	movs	r3, r0
   153cc:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   153ce:	697b      	ldr	r3, [r7, #20]
   153d0:	2b00      	cmp	r3, #0
   153d2:	d14d      	bne.n	15470 <I2cReadDataWait+0xd8>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   153d4:	68fb      	ldr	r3, [r7, #12]
   153d6:	0018      	movs	r0, r3
   153d8:	4b2d      	ldr	r3, [pc, #180]	; (15490 <I2cReadDataWait+0xf8>)
   153da:	4798      	blx	r3
   153dc:	0003      	movs	r3, r0
   153de:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   153e0:	697b      	ldr	r3, [r7, #20]
   153e2:	2b00      	cmp	r3, #0
   153e4:	d147      	bne.n	15476 <I2cReadDataWait+0xde>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   153e6:	693b      	ldr	r3, [r7, #16]
   153e8:	687a      	ldr	r2, [r7, #4]
   153ea:	0011      	movs	r1, r2
   153ec:	0018      	movs	r0, r3
   153ee:	4b29      	ldr	r3, [pc, #164]	; (15494 <I2cReadDataWait+0xfc>)
   153f0:	4798      	blx	r3
   153f2:	0003      	movs	r3, r0
   153f4:	2b01      	cmp	r3, #1
   153f6:	d118      	bne.n	1542a <I2cReadDataWait+0x92>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   153f8:	4b27      	ldr	r3, [pc, #156]	; (15498 <I2cReadDataWait+0x100>)
   153fa:	4798      	blx	r3
   153fc:	1e03      	subs	r3, r0, #0
   153fe:	d006      	beq.n	1540e <I2cReadDataWait+0x76>
            I2cSetTaskErrorStatus(false);
   15400:	2000      	movs	r0, #0
   15402:	4b26      	ldr	r3, [pc, #152]	; (1549c <I2cReadDataWait+0x104>)
   15404:	4798      	blx	r3
            error = ERROR_ABORTED;
   15406:	2303      	movs	r3, #3
   15408:	425b      	negs	r3, r3
   1540a:	617b      	str	r3, [r7, #20]
            goto exitError0;
   1540c:	e034      	b.n	15478 <I2cReadDataWait+0xe0>
        }
        vTaskDelay(delay);
   1540e:	68bb      	ldr	r3, [r7, #8]
   15410:	0018      	movs	r0, r3
   15412:	4b23      	ldr	r3, [pc, #140]	; (154a0 <I2cReadDataWait+0x108>)
   15414:	4798      	blx	r3
        error = ERR_TIMEOUT;
        goto exitError0;
    }

    //---6. Initiate Read data
    error = I2cReadData(data);
   15416:	68fb      	ldr	r3, [r7, #12]
   15418:	0018      	movs	r0, r3
   1541a:	4b22      	ldr	r3, [pc, #136]	; (154a4 <I2cReadDataWait+0x10c>)
   1541c:	4798      	blx	r3
   1541e:	0003      	movs	r3, r0
   15420:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   15422:	697b      	ldr	r3, [r7, #20]
   15424:	2b00      	cmp	r3, #0
   15426:	d004      	beq.n	15432 <I2cReadDataWait+0x9a>
        goto exitError0;
   15428:	e026      	b.n	15478 <I2cReadDataWait+0xe0>
        error = ERR_TIMEOUT;
   1542a:	2303      	movs	r3, #3
   1542c:	425b      	negs	r3, r3
   1542e:	617b      	str	r3, [r7, #20]
        goto exitError0;
   15430:	e022      	b.n	15478 <I2cReadDataWait+0xe0>
    }
    //---7. Wait for notification
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   15432:	693b      	ldr	r3, [r7, #16]
   15434:	687a      	ldr	r2, [r7, #4]
   15436:	0011      	movs	r1, r2
   15438:	0018      	movs	r0, r3
   1543a:	4b16      	ldr	r3, [pc, #88]	; (15494 <I2cReadDataWait+0xfc>)
   1543c:	4798      	blx	r3
   1543e:	0003      	movs	r3, r0
   15440:	2b01      	cmp	r3, #1
   15442:	d10a      	bne.n	1545a <I2cReadDataWait+0xc2>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   15444:	4b14      	ldr	r3, [pc, #80]	; (15498 <I2cReadDataWait+0x100>)
   15446:	4798      	blx	r3
   15448:	1e03      	subs	r3, r0, #0
   1544a:	d00a      	beq.n	15462 <I2cReadDataWait+0xca>
            I2cSetTaskErrorStatus(false);
   1544c:	2000      	movs	r0, #0
   1544e:	4b13      	ldr	r3, [pc, #76]	; (1549c <I2cReadDataWait+0x104>)
   15450:	4798      	blx	r3
            error = ERROR_ABORTED;
   15452:	2303      	movs	r3, #3
   15454:	425b      	negs	r3, r3
   15456:	617b      	str	r3, [r7, #20]
            goto exitError0;
   15458:	e00e      	b.n	15478 <I2cReadDataWait+0xe0>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   1545a:	2303      	movs	r3, #3
   1545c:	425b      	negs	r3, r3
   1545e:	617b      	str	r3, [r7, #20]
        goto exitError0;
   15460:	e00a      	b.n	15478 <I2cReadDataWait+0xe0>
    }

    //---8. Release Mutex
    error = I2cFreeMutex();
   15462:	4b11      	ldr	r3, [pc, #68]	; (154a8 <I2cReadDataWait+0x110>)
   15464:	4798      	blx	r3
   15466:	0003      	movs	r3, r0
   15468:	617b      	str	r3, [r7, #20]
   1546a:	e002      	b.n	15472 <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   1546c:	46c0      	nop			; (mov r8, r8)
   1546e:	e000      	b.n	15472 <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   15470:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   15472:	697b      	ldr	r3, [r7, #20]
   15474:	e003      	b.n	1547e <I2cReadDataWait+0xe6>
        goto exitError0;
   15476:	46c0      	nop			; (mov r8, r8)

exitError0:
    I2cFreeMutex();
   15478:	4b0b      	ldr	r3, [pc, #44]	; (154a8 <I2cReadDataWait+0x110>)
   1547a:	4798      	blx	r3
    // xSemaphoreGive(semHandle);
    return error;
   1547c:	697b      	ldr	r3, [r7, #20]
}
   1547e:	0018      	movs	r0, r3
   15480:	46bd      	mov	sp, r7
   15482:	b006      	add	sp, #24
   15484:	bd80      	pop	{r7, pc}
   15486:	46c0      	nop			; (mov r8, r8)
   15488:	00015231 	.word	0x00015231
   1548c:	00015269 	.word	0x00015269
   15490:	00015109 	.word	0x00015109
   15494:	0001c0dd 	.word	0x0001c0dd
   15498:	0001528d 	.word	0x0001528d
   1549c:	000152a1 	.word	0x000152a1
   154a0:	0001ce31 	.word	0x0001ce31
   154a4:	00015181 	.word	0x00015181
   154a8:	000151f9 	.word	0x000151f9

000154ac <lsm6dso_read_reg>:
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
   154ac:	b5b0      	push	{r4, r5, r7, lr}
   154ae:	b086      	sub	sp, #24
   154b0:	af00      	add	r7, sp, #0
   154b2:	60f8      	str	r0, [r7, #12]
   154b4:	0008      	movs	r0, r1
   154b6:	607a      	str	r2, [r7, #4]
   154b8:	0019      	movs	r1, r3
   154ba:	230b      	movs	r3, #11
   154bc:	18fb      	adds	r3, r7, r3
   154be:	1c02      	adds	r2, r0, #0
   154c0:	701a      	strb	r2, [r3, #0]
   154c2:	2308      	movs	r3, #8
   154c4:	18fb      	adds	r3, r7, r3
   154c6:	1c0a      	adds	r2, r1, #0
   154c8:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
   154ca:	68fb      	ldr	r3, [r7, #12]
   154cc:	685c      	ldr	r4, [r3, #4]
   154ce:	68fb      	ldr	r3, [r7, #12]
   154d0:	6898      	ldr	r0, [r3, #8]
   154d2:	2308      	movs	r3, #8
   154d4:	18fb      	adds	r3, r7, r3
   154d6:	881d      	ldrh	r5, [r3, #0]
   154d8:	687a      	ldr	r2, [r7, #4]
   154da:	230b      	movs	r3, #11
   154dc:	18fb      	adds	r3, r7, r3
   154de:	7819      	ldrb	r1, [r3, #0]
   154e0:	002b      	movs	r3, r5
   154e2:	47a0      	blx	r4
   154e4:	0003      	movs	r3, r0
   154e6:	617b      	str	r3, [r7, #20]

  return ret;
   154e8:	697b      	ldr	r3, [r7, #20]
}
   154ea:	0018      	movs	r0, r3
   154ec:	46bd      	mov	sp, r7
   154ee:	b006      	add	sp, #24
   154f0:	bdb0      	pop	{r4, r5, r7, pc}

000154f2 <lsm6dso_write_reg>:
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
   154f2:	b5b0      	push	{r4, r5, r7, lr}
   154f4:	b086      	sub	sp, #24
   154f6:	af00      	add	r7, sp, #0
   154f8:	60f8      	str	r0, [r7, #12]
   154fa:	0008      	movs	r0, r1
   154fc:	607a      	str	r2, [r7, #4]
   154fe:	0019      	movs	r1, r3
   15500:	230b      	movs	r3, #11
   15502:	18fb      	adds	r3, r7, r3
   15504:	1c02      	adds	r2, r0, #0
   15506:	701a      	strb	r2, [r3, #0]
   15508:	2308      	movs	r3, #8
   1550a:	18fb      	adds	r3, r7, r3
   1550c:	1c0a      	adds	r2, r1, #0
   1550e:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
   15510:	68fb      	ldr	r3, [r7, #12]
   15512:	681c      	ldr	r4, [r3, #0]
   15514:	68fb      	ldr	r3, [r7, #12]
   15516:	6898      	ldr	r0, [r3, #8]
   15518:	2308      	movs	r3, #8
   1551a:	18fb      	adds	r3, r7, r3
   1551c:	881d      	ldrh	r5, [r3, #0]
   1551e:	687a      	ldr	r2, [r7, #4]
   15520:	230b      	movs	r3, #11
   15522:	18fb      	adds	r3, r7, r3
   15524:	7819      	ldrb	r1, [r3, #0]
   15526:	002b      	movs	r3, r5
   15528:	47a0      	blx	r4
   1552a:	0003      	movs	r3, r0
   1552c:	617b      	str	r3, [r7, #20]

  return ret;
   1552e:	697b      	ldr	r3, [r7, #20]
}
   15530:	0018      	movs	r0, r3
   15532:	46bd      	mov	sp, r7
   15534:	b006      	add	sp, #24
   15536:	bdb0      	pop	{r4, r5, r7, pc}

00015538 <lsm6dso_from_fs2_to_mg>:
  * @brief     These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lsm6dso_from_fs2_to_mg(int16_t lsb)
{
   15538:	b580      	push	{r7, lr}
   1553a:	b082      	sub	sp, #8
   1553c:	af00      	add	r7, sp, #0
   1553e:	0002      	movs	r2, r0
   15540:	1dbb      	adds	r3, r7, #6
   15542:	801a      	strh	r2, [r3, #0]
  return ((float_t)lsb) * 0.061f;
   15544:	1dbb      	adds	r3, r7, #6
   15546:	2200      	movs	r2, #0
   15548:	5e9a      	ldrsh	r2, [r3, r2]
   1554a:	4b06      	ldr	r3, [pc, #24]	; (15564 <lsm6dso_from_fs2_to_mg+0x2c>)
   1554c:	0010      	movs	r0, r2
   1554e:	4798      	blx	r3
   15550:	1c02      	adds	r2, r0, #0
   15552:	4b05      	ldr	r3, [pc, #20]	; (15568 <lsm6dso_from_fs2_to_mg+0x30>)
   15554:	4905      	ldr	r1, [pc, #20]	; (1556c <lsm6dso_from_fs2_to_mg+0x34>)
   15556:	1c10      	adds	r0, r2, #0
   15558:	4798      	blx	r3
   1555a:	1c03      	adds	r3, r0, #0
}
   1555c:	1c18      	adds	r0, r3, #0
   1555e:	46bd      	mov	sp, r7
   15560:	b002      	add	sp, #8
   15562:	bd80      	pop	{r7, pc}
   15564:	00033bd5 	.word	0x00033bd5
   15568:	00033955 	.word	0x00033955
   1556c:	3d79db23 	.word	0x3d79db23

00015570 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
   15570:	b590      	push	{r4, r7, lr}
   15572:	b085      	sub	sp, #20
   15574:	af00      	add	r7, sp, #0
   15576:	6078      	str	r0, [r7, #4]
   15578:	000a      	movs	r2, r1
   1557a:	1cfb      	adds	r3, r7, #3
   1557c:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   1557e:	2308      	movs	r3, #8
   15580:	18fa      	adds	r2, r7, r3
   15582:	6878      	ldr	r0, [r7, #4]
   15584:	2301      	movs	r3, #1
   15586:	2110      	movs	r1, #16
   15588:	4c12      	ldr	r4, [pc, #72]	; (155d4 <lsm6dso_xl_full_scale_set+0x64>)
   1558a:	47a0      	blx	r4
   1558c:	0003      	movs	r3, r0
   1558e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15590:	68fb      	ldr	r3, [r7, #12]
   15592:	2b00      	cmp	r3, #0
   15594:	d119      	bne.n	155ca <lsm6dso_xl_full_scale_set+0x5a>
  {
    reg.fs_xl = (uint8_t) val;
   15596:	1cfb      	adds	r3, r7, #3
   15598:	781b      	ldrb	r3, [r3, #0]
   1559a:	2203      	movs	r2, #3
   1559c:	4013      	ands	r3, r2
   1559e:	b2da      	uxtb	r2, r3
   155a0:	2308      	movs	r3, #8
   155a2:	18fb      	adds	r3, r7, r3
   155a4:	2103      	movs	r1, #3
   155a6:	400a      	ands	r2, r1
   155a8:	0090      	lsls	r0, r2, #2
   155aa:	781a      	ldrb	r2, [r3, #0]
   155ac:	210c      	movs	r1, #12
   155ae:	438a      	bics	r2, r1
   155b0:	1c11      	adds	r1, r2, #0
   155b2:	1c02      	adds	r2, r0, #0
   155b4:	430a      	orrs	r2, r1
   155b6:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   155b8:	2308      	movs	r3, #8
   155ba:	18fa      	adds	r2, r7, r3
   155bc:	6878      	ldr	r0, [r7, #4]
   155be:	2301      	movs	r3, #1
   155c0:	2110      	movs	r1, #16
   155c2:	4c05      	ldr	r4, [pc, #20]	; (155d8 <lsm6dso_xl_full_scale_set+0x68>)
   155c4:	47a0      	blx	r4
   155c6:	0003      	movs	r3, r0
   155c8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   155ca:	68fb      	ldr	r3, [r7, #12]
}
   155cc:	0018      	movs	r0, r3
   155ce:	46bd      	mov	sp, r7
   155d0:	b005      	add	sp, #20
   155d2:	bd90      	pop	{r4, r7, pc}
   155d4:	000154ad 	.word	0x000154ad
   155d8:	000154f3 	.word	0x000154f3

000155dc <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
   155dc:	b590      	push	{r4, r7, lr}
   155de:	b087      	sub	sp, #28
   155e0:	af00      	add	r7, sp, #0
   155e2:	6078      	str	r0, [r7, #4]
   155e4:	000a      	movs	r2, r1
   155e6:	1cfb      	adds	r3, r7, #3
   155e8:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_xl_t odr_xl =  val;
   155ea:	2317      	movs	r3, #23
   155ec:	18fb      	adds	r3, r7, r3
   155ee:	1cfa      	adds	r2, r7, #3
   155f0:	7812      	ldrb	r2, [r2, #0]
   155f2:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
   155f4:	230c      	movs	r3, #12
   155f6:	18fa      	adds	r2, r7, r3
   155f8:	687b      	ldr	r3, [r7, #4]
   155fa:	0011      	movs	r1, r2
   155fc:	0018      	movs	r0, r3
   155fe:	4ba4      	ldr	r3, [pc, #656]	; (15890 <lsm6dso_xl_data_rate_set+0x2b4>)
   15600:	4798      	blx	r3
   15602:	0003      	movs	r3, r0
   15604:	613b      	str	r3, [r7, #16]

  if (ret == 0)
   15606:	693b      	ldr	r3, [r7, #16]
   15608:	2b00      	cmp	r3, #0
   1560a:	d000      	beq.n	1560e <lsm6dso_xl_data_rate_set+0x32>
   1560c:	e113      	b.n	15836 <lsm6dso_xl_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   1560e:	230c      	movs	r3, #12
   15610:	18fb      	adds	r3, r7, r3
   15612:	781b      	ldrb	r3, [r3, #0]
   15614:	07db      	lsls	r3, r3, #31
   15616:	0fdb      	lsrs	r3, r3, #31
   15618:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   1561a:	230c      	movs	r3, #12
   1561c:	18fb      	adds	r3, r7, r3
   1561e:	781b      	ldrb	r3, [r3, #0]
   15620:	079b      	lsls	r3, r3, #30
   15622:	0fdb      	lsrs	r3, r3, #31
   15624:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   15626:	4313      	orrs	r3, r2
   15628:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   1562a:	230c      	movs	r3, #12
   1562c:	18fb      	adds	r3, r7, r3
   1562e:	781b      	ldrb	r3, [r3, #0]
   15630:	075b      	lsls	r3, r3, #29
   15632:	0fdb      	lsrs	r3, r3, #31
   15634:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   15636:	4313      	orrs	r3, r2
   15638:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   1563a:	230c      	movs	r3, #12
   1563c:	18fb      	adds	r3, r7, r3
   1563e:	781b      	ldrb	r3, [r3, #0]
   15640:	071b      	lsls	r3, r3, #28
   15642:	0fdb      	lsrs	r3, r3, #31
   15644:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   15646:	4313      	orrs	r3, r2
   15648:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   1564a:	230c      	movs	r3, #12
   1564c:	18fb      	adds	r3, r7, r3
   1564e:	781b      	ldrb	r3, [r3, #0]
   15650:	06db      	lsls	r3, r3, #27
   15652:	0fdb      	lsrs	r3, r3, #31
   15654:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   15656:	4313      	orrs	r3, r2
   15658:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   1565a:	230c      	movs	r3, #12
   1565c:	18fb      	adds	r3, r7, r3
   1565e:	781b      	ldrb	r3, [r3, #0]
   15660:	069b      	lsls	r3, r3, #26
   15662:	0fdb      	lsrs	r3, r3, #31
   15664:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   15666:	4313      	orrs	r3, r2
   15668:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   1566a:	230c      	movs	r3, #12
   1566c:	18fb      	adds	r3, r7, r3
   1566e:	781b      	ldrb	r3, [r3, #0]
   15670:	065b      	lsls	r3, r3, #25
   15672:	0fdb      	lsrs	r3, r3, #31
   15674:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   15676:	4313      	orrs	r3, r2
   15678:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   1567a:	230c      	movs	r3, #12
   1567c:	18fb      	adds	r3, r7, r3
   1567e:	781b      	ldrb	r3, [r3, #0]
   15680:	061b      	lsls	r3, r3, #24
   15682:	0fdb      	lsrs	r3, r3, #31
   15684:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   15686:	4313      	orrs	r3, r2
   15688:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   1568a:	230c      	movs	r3, #12
   1568c:	18fb      	adds	r3, r7, r3
   1568e:	785b      	ldrb	r3, [r3, #1]
   15690:	07db      	lsls	r3, r3, #31
   15692:	0fdb      	lsrs	r3, r3, #31
   15694:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   15696:	4313      	orrs	r3, r2
   15698:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   1569a:	230c      	movs	r3, #12
   1569c:	18fb      	adds	r3, r7, r3
   1569e:	785b      	ldrb	r3, [r3, #1]
   156a0:	079b      	lsls	r3, r3, #30
   156a2:	0fdb      	lsrs	r3, r3, #31
   156a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   156a6:	4313      	orrs	r3, r2
   156a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   156aa:	230c      	movs	r3, #12
   156ac:	18fb      	adds	r3, r7, r3
   156ae:	785b      	ldrb	r3, [r3, #1]
   156b0:	075b      	lsls	r3, r3, #29
   156b2:	0fdb      	lsrs	r3, r3, #31
   156b4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   156b6:	4313      	orrs	r3, r2
   156b8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   156ba:	230c      	movs	r3, #12
   156bc:	18fb      	adds	r3, r7, r3
   156be:	785b      	ldrb	r3, [r3, #1]
   156c0:	071b      	lsls	r3, r3, #28
   156c2:	0fdb      	lsrs	r3, r3, #31
   156c4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   156c6:	4313      	orrs	r3, r2
   156c8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   156ca:	230c      	movs	r3, #12
   156cc:	18fb      	adds	r3, r7, r3
   156ce:	785b      	ldrb	r3, [r3, #1]
   156d0:	06db      	lsls	r3, r3, #27
   156d2:	0fdb      	lsrs	r3, r3, #31
   156d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   156d6:	4313      	orrs	r3, r2
   156d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   156da:	230c      	movs	r3, #12
   156dc:	18fb      	adds	r3, r7, r3
   156de:	785b      	ldrb	r3, [r3, #1]
   156e0:	069b      	lsls	r3, r3, #26
   156e2:	0fdb      	lsrs	r3, r3, #31
   156e4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   156e6:	4313      	orrs	r3, r2
   156e8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   156ea:	230c      	movs	r3, #12
   156ec:	18fb      	adds	r3, r7, r3
   156ee:	785b      	ldrb	r3, [r3, #1]
   156f0:	065b      	lsls	r3, r3, #25
   156f2:	0fdb      	lsrs	r3, r3, #31
   156f4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   156f6:	4313      	orrs	r3, r2
   156f8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
   156fa:	230c      	movs	r3, #12
   156fc:	18fb      	adds	r3, r7, r3
   156fe:	785b      	ldrb	r3, [r3, #1]
   15700:	061b      	lsls	r3, r3, #24
   15702:	0fdb      	lsrs	r3, r3, #31
   15704:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   15706:	4313      	orrs	r3, r2
   15708:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   1570a:	2b01      	cmp	r3, #1
   1570c:	d000      	beq.n	15710 <lsm6dso_xl_data_rate_set+0x134>
   1570e:	e092      	b.n	15836 <lsm6dso_xl_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
   15710:	230b      	movs	r3, #11
   15712:	18fa      	adds	r2, r7, r3
   15714:	687b      	ldr	r3, [r7, #4]
   15716:	0011      	movs	r1, r2
   15718:	0018      	movs	r0, r3
   1571a:	4b5e      	ldr	r3, [pc, #376]	; (15894 <lsm6dso_xl_data_rate_set+0x2b8>)
   1571c:	4798      	blx	r3
   1571e:	0003      	movs	r3, r0
   15720:	613b      	str	r3, [r7, #16]

      if (ret == 0)
   15722:	693b      	ldr	r3, [r7, #16]
   15724:	2b00      	cmp	r3, #0
   15726:	d000      	beq.n	1572a <lsm6dso_xl_data_rate_set+0x14e>
   15728:	e085      	b.n	15836 <lsm6dso_xl_data_rate_set+0x25a>
      {
        switch (fsm_odr)
   1572a:	230b      	movs	r3, #11
   1572c:	18fb      	adds	r3, r7, r3
   1572e:	781b      	ldrb	r3, [r3, #0]
   15730:	2b01      	cmp	r3, #1
   15732:	d017      	beq.n	15764 <lsm6dso_xl_data_rate_set+0x188>
   15734:	dc02      	bgt.n	1573c <lsm6dso_xl_data_rate_set+0x160>
   15736:	2b00      	cmp	r3, #0
   15738:	d005      	beq.n	15746 <lsm6dso_xl_data_rate_set+0x16a>
   1573a:	e076      	b.n	1582a <lsm6dso_xl_data_rate_set+0x24e>
   1573c:	2b02      	cmp	r3, #2
   1573e:	d029      	beq.n	15794 <lsm6dso_xl_data_rate_set+0x1b8>
   15740:	2b03      	cmp	r3, #3
   15742:	d048      	beq.n	157d6 <lsm6dso_xl_data_rate_set+0x1fa>
   15744:	e071      	b.n	1582a <lsm6dso_xl_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
   15746:	1cfb      	adds	r3, r7, #3
   15748:	781b      	ldrb	r3, [r3, #0]
   1574a:	2b00      	cmp	r3, #0
   1574c:	d104      	bne.n	15758 <lsm6dso_xl_data_rate_set+0x17c>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
   1574e:	2317      	movs	r3, #23
   15750:	18fb      	adds	r3, r7, r3
   15752:	2201      	movs	r2, #1
   15754:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   15756:	e06e      	b.n	15836 <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   15758:	2317      	movs	r3, #23
   1575a:	18fb      	adds	r3, r7, r3
   1575c:	1cfa      	adds	r2, r7, #3
   1575e:	7812      	ldrb	r2, [r2, #0]
   15760:	701a      	strb	r2, [r3, #0]
            break;
   15762:	e068      	b.n	15836 <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   15764:	1cfb      	adds	r3, r7, #3
   15766:	781b      	ldrb	r3, [r3, #0]
   15768:	2b00      	cmp	r3, #0
   1576a:	d104      	bne.n	15776 <lsm6dso_xl_data_rate_set+0x19a>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
   1576c:	2317      	movs	r3, #23
   1576e:	18fb      	adds	r3, r7, r3
   15770:	2202      	movs	r2, #2
   15772:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   15774:	e05f      	b.n	15836 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   15776:	1cfb      	adds	r3, r7, #3
   15778:	781b      	ldrb	r3, [r3, #0]
   1577a:	2b01      	cmp	r3, #1
   1577c:	d104      	bne.n	15788 <lsm6dso_xl_data_rate_set+0x1ac>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
   1577e:	2317      	movs	r3, #23
   15780:	18fb      	adds	r3, r7, r3
   15782:	2202      	movs	r2, #2
   15784:	701a      	strb	r2, [r3, #0]
            break;
   15786:	e056      	b.n	15836 <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   15788:	2317      	movs	r3, #23
   1578a:	18fb      	adds	r3, r7, r3
   1578c:	1cfa      	adds	r2, r7, #3
   1578e:	7812      	ldrb	r2, [r2, #0]
   15790:	701a      	strb	r2, [r3, #0]
            break;
   15792:	e050      	b.n	15836 <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   15794:	1cfb      	adds	r3, r7, #3
   15796:	781b      	ldrb	r3, [r3, #0]
   15798:	2b00      	cmp	r3, #0
   1579a:	d104      	bne.n	157a6 <lsm6dso_xl_data_rate_set+0x1ca>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   1579c:	2317      	movs	r3, #23
   1579e:	18fb      	adds	r3, r7, r3
   157a0:	2203      	movs	r2, #3
   157a2:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   157a4:	e047      	b.n	15836 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   157a6:	1cfb      	adds	r3, r7, #3
   157a8:	781b      	ldrb	r3, [r3, #0]
   157aa:	2b01      	cmp	r3, #1
   157ac:	d104      	bne.n	157b8 <lsm6dso_xl_data_rate_set+0x1dc>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   157ae:	2317      	movs	r3, #23
   157b0:	18fb      	adds	r3, r7, r3
   157b2:	2203      	movs	r2, #3
   157b4:	701a      	strb	r2, [r3, #0]
            break;
   157b6:	e03e      	b.n	15836 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_26Hz)
   157b8:	1cfb      	adds	r3, r7, #3
   157ba:	781b      	ldrb	r3, [r3, #0]
   157bc:	2b02      	cmp	r3, #2
   157be:	d104      	bne.n	157ca <lsm6dso_xl_data_rate_set+0x1ee>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   157c0:	2317      	movs	r3, #23
   157c2:	18fb      	adds	r3, r7, r3
   157c4:	2203      	movs	r2, #3
   157c6:	701a      	strb	r2, [r3, #0]
            break;
   157c8:	e035      	b.n	15836 <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   157ca:	2317      	movs	r3, #23
   157cc:	18fb      	adds	r3, r7, r3
   157ce:	1cfa      	adds	r2, r7, #3
   157d0:	7812      	ldrb	r2, [r2, #0]
   157d2:	701a      	strb	r2, [r3, #0]
            break;
   157d4:	e02f      	b.n	15836 <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   157d6:	1cfb      	adds	r3, r7, #3
   157d8:	781b      	ldrb	r3, [r3, #0]
   157da:	2b00      	cmp	r3, #0
   157dc:	d104      	bne.n	157e8 <lsm6dso_xl_data_rate_set+0x20c>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   157de:	2317      	movs	r3, #23
   157e0:	18fb      	adds	r3, r7, r3
   157e2:	2204      	movs	r2, #4
   157e4:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   157e6:	e026      	b.n	15836 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   157e8:	1cfb      	adds	r3, r7, #3
   157ea:	781b      	ldrb	r3, [r3, #0]
   157ec:	2b01      	cmp	r3, #1
   157ee:	d104      	bne.n	157fa <lsm6dso_xl_data_rate_set+0x21e>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   157f0:	2317      	movs	r3, #23
   157f2:	18fb      	adds	r3, r7, r3
   157f4:	2204      	movs	r2, #4
   157f6:	701a      	strb	r2, [r3, #0]
            break;
   157f8:	e01d      	b.n	15836 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_26Hz)
   157fa:	1cfb      	adds	r3, r7, #3
   157fc:	781b      	ldrb	r3, [r3, #0]
   157fe:	2b02      	cmp	r3, #2
   15800:	d104      	bne.n	1580c <lsm6dso_xl_data_rate_set+0x230>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   15802:	2317      	movs	r3, #23
   15804:	18fb      	adds	r3, r7, r3
   15806:	2204      	movs	r2, #4
   15808:	701a      	strb	r2, [r3, #0]
            break;
   1580a:	e014      	b.n	15836 <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_52Hz)
   1580c:	1cfb      	adds	r3, r7, #3
   1580e:	781b      	ldrb	r3, [r3, #0]
   15810:	2b03      	cmp	r3, #3
   15812:	d104      	bne.n	1581e <lsm6dso_xl_data_rate_set+0x242>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   15814:	2317      	movs	r3, #23
   15816:	18fb      	adds	r3, r7, r3
   15818:	2204      	movs	r2, #4
   1581a:	701a      	strb	r2, [r3, #0]
            break;
   1581c:	e00b      	b.n	15836 <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   1581e:	2317      	movs	r3, #23
   15820:	18fb      	adds	r3, r7, r3
   15822:	1cfa      	adds	r2, r7, #3
   15824:	7812      	ldrb	r2, [r2, #0]
   15826:	701a      	strb	r2, [r3, #0]
            break;
   15828:	e005      	b.n	15836 <lsm6dso_xl_data_rate_set+0x25a>

          default:
            odr_xl = val;
   1582a:	2317      	movs	r3, #23
   1582c:	18fb      	adds	r3, r7, r3
   1582e:	1cfa      	adds	r2, r7, #3
   15830:	7812      	ldrb	r2, [r2, #0]
   15832:	701a      	strb	r2, [r3, #0]
            break;
   15834:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
   15836:	693b      	ldr	r3, [r7, #16]
   15838:	2b00      	cmp	r3, #0
   1583a:	d108      	bne.n	1584e <lsm6dso_xl_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   1583c:	2308      	movs	r3, #8
   1583e:	18fa      	adds	r2, r7, r3
   15840:	6878      	ldr	r0, [r7, #4]
   15842:	2301      	movs	r3, #1
   15844:	2110      	movs	r1, #16
   15846:	4c14      	ldr	r4, [pc, #80]	; (15898 <lsm6dso_xl_data_rate_set+0x2bc>)
   15848:	47a0      	blx	r4
   1584a:	0003      	movs	r3, r0
   1584c:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
   1584e:	693b      	ldr	r3, [r7, #16]
   15850:	2b00      	cmp	r3, #0
   15852:	d118      	bne.n	15886 <lsm6dso_xl_data_rate_set+0x2aa>
  {
    reg.odr_xl = (uint8_t) odr_xl;
   15854:	2317      	movs	r3, #23
   15856:	18fb      	adds	r3, r7, r3
   15858:	781b      	ldrb	r3, [r3, #0]
   1585a:	220f      	movs	r2, #15
   1585c:	4013      	ands	r3, r2
   1585e:	b2da      	uxtb	r2, r3
   15860:	2308      	movs	r3, #8
   15862:	18fb      	adds	r3, r7, r3
   15864:	0110      	lsls	r0, r2, #4
   15866:	781a      	ldrb	r2, [r3, #0]
   15868:	210f      	movs	r1, #15
   1586a:	400a      	ands	r2, r1
   1586c:	1c11      	adds	r1, r2, #0
   1586e:	1c02      	adds	r2, r0, #0
   15870:	430a      	orrs	r2, r1
   15872:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   15874:	2308      	movs	r3, #8
   15876:	18fa      	adds	r2, r7, r3
   15878:	6878      	ldr	r0, [r7, #4]
   1587a:	2301      	movs	r3, #1
   1587c:	2110      	movs	r1, #16
   1587e:	4c07      	ldr	r4, [pc, #28]	; (1589c <lsm6dso_xl_data_rate_set+0x2c0>)
   15880:	47a0      	blx	r4
   15882:	0003      	movs	r3, r0
   15884:	613b      	str	r3, [r7, #16]
  }

  return ret;
   15886:	693b      	ldr	r3, [r7, #16]
}
   15888:	0018      	movs	r0, r3
   1588a:	46bd      	mov	sp, r7
   1588c:	b007      	add	sp, #28
   1588e:	bd90      	pop	{r4, r7, pc}
   15890:	000160b9 	.word	0x000160b9
   15894:	0001610d 	.word	0x0001610d
   15898:	000154ad 	.word	0x000154ad
   1589c:	000154f3 	.word	0x000154f3

000158a0 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
   158a0:	b590      	push	{r4, r7, lr}
   158a2:	b085      	sub	sp, #20
   158a4:	af00      	add	r7, sp, #0
   158a6:	6078      	str	r0, [r7, #4]
   158a8:	000a      	movs	r2, r1
   158aa:	1cfb      	adds	r3, r7, #3
   158ac:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   158ae:	2308      	movs	r3, #8
   158b0:	18fa      	adds	r2, r7, r3
   158b2:	6878      	ldr	r0, [r7, #4]
   158b4:	2301      	movs	r3, #1
   158b6:	2111      	movs	r1, #17
   158b8:	4c12      	ldr	r4, [pc, #72]	; (15904 <lsm6dso_gy_full_scale_set+0x64>)
   158ba:	47a0      	blx	r4
   158bc:	0003      	movs	r3, r0
   158be:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   158c0:	68fb      	ldr	r3, [r7, #12]
   158c2:	2b00      	cmp	r3, #0
   158c4:	d119      	bne.n	158fa <lsm6dso_gy_full_scale_set+0x5a>
  {
    reg.fs_g = (uint8_t) val;
   158c6:	1cfb      	adds	r3, r7, #3
   158c8:	781b      	ldrb	r3, [r3, #0]
   158ca:	2207      	movs	r2, #7
   158cc:	4013      	ands	r3, r2
   158ce:	b2da      	uxtb	r2, r3
   158d0:	2308      	movs	r3, #8
   158d2:	18fb      	adds	r3, r7, r3
   158d4:	2107      	movs	r1, #7
   158d6:	400a      	ands	r2, r1
   158d8:	1890      	adds	r0, r2, r2
   158da:	781a      	ldrb	r2, [r3, #0]
   158dc:	210e      	movs	r1, #14
   158de:	438a      	bics	r2, r1
   158e0:	1c11      	adds	r1, r2, #0
   158e2:	1c02      	adds	r2, r0, #0
   158e4:	430a      	orrs	r2, r1
   158e6:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   158e8:	2308      	movs	r3, #8
   158ea:	18fa      	adds	r2, r7, r3
   158ec:	6878      	ldr	r0, [r7, #4]
   158ee:	2301      	movs	r3, #1
   158f0:	2111      	movs	r1, #17
   158f2:	4c05      	ldr	r4, [pc, #20]	; (15908 <lsm6dso_gy_full_scale_set+0x68>)
   158f4:	47a0      	blx	r4
   158f6:	0003      	movs	r3, r0
   158f8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   158fa:	68fb      	ldr	r3, [r7, #12]
}
   158fc:	0018      	movs	r0, r3
   158fe:	46bd      	mov	sp, r7
   15900:	b005      	add	sp, #20
   15902:	bd90      	pop	{r4, r7, pc}
   15904:	000154ad 	.word	0x000154ad
   15908:	000154f3 	.word	0x000154f3

0001590c <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
   1590c:	b590      	push	{r4, r7, lr}
   1590e:	b087      	sub	sp, #28
   15910:	af00      	add	r7, sp, #0
   15912:	6078      	str	r0, [r7, #4]
   15914:	000a      	movs	r2, r1
   15916:	1cfb      	adds	r3, r7, #3
   15918:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_g_t odr_gy =  val;
   1591a:	2317      	movs	r3, #23
   1591c:	18fb      	adds	r3, r7, r3
   1591e:	1cfa      	adds	r2, r7, #3
   15920:	7812      	ldrb	r2, [r2, #0]
   15922:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
   15924:	230c      	movs	r3, #12
   15926:	18fa      	adds	r2, r7, r3
   15928:	687b      	ldr	r3, [r7, #4]
   1592a:	0011      	movs	r1, r2
   1592c:	0018      	movs	r0, r3
   1592e:	4ba4      	ldr	r3, [pc, #656]	; (15bc0 <lsm6dso_gy_data_rate_set+0x2b4>)
   15930:	4798      	blx	r3
   15932:	0003      	movs	r3, r0
   15934:	613b      	str	r3, [r7, #16]

  if (ret == 0)
   15936:	693b      	ldr	r3, [r7, #16]
   15938:	2b00      	cmp	r3, #0
   1593a:	d000      	beq.n	1593e <lsm6dso_gy_data_rate_set+0x32>
   1593c:	e113      	b.n	15b66 <lsm6dso_gy_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   1593e:	230c      	movs	r3, #12
   15940:	18fb      	adds	r3, r7, r3
   15942:	781b      	ldrb	r3, [r3, #0]
   15944:	07db      	lsls	r3, r3, #31
   15946:	0fdb      	lsrs	r3, r3, #31
   15948:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   1594a:	230c      	movs	r3, #12
   1594c:	18fb      	adds	r3, r7, r3
   1594e:	781b      	ldrb	r3, [r3, #0]
   15950:	079b      	lsls	r3, r3, #30
   15952:	0fdb      	lsrs	r3, r3, #31
   15954:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   15956:	4313      	orrs	r3, r2
   15958:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   1595a:	230c      	movs	r3, #12
   1595c:	18fb      	adds	r3, r7, r3
   1595e:	781b      	ldrb	r3, [r3, #0]
   15960:	075b      	lsls	r3, r3, #29
   15962:	0fdb      	lsrs	r3, r3, #31
   15964:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   15966:	4313      	orrs	r3, r2
   15968:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   1596a:	230c      	movs	r3, #12
   1596c:	18fb      	adds	r3, r7, r3
   1596e:	781b      	ldrb	r3, [r3, #0]
   15970:	071b      	lsls	r3, r3, #28
   15972:	0fdb      	lsrs	r3, r3, #31
   15974:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   15976:	4313      	orrs	r3, r2
   15978:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   1597a:	230c      	movs	r3, #12
   1597c:	18fb      	adds	r3, r7, r3
   1597e:	781b      	ldrb	r3, [r3, #0]
   15980:	06db      	lsls	r3, r3, #27
   15982:	0fdb      	lsrs	r3, r3, #31
   15984:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   15986:	4313      	orrs	r3, r2
   15988:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   1598a:	230c      	movs	r3, #12
   1598c:	18fb      	adds	r3, r7, r3
   1598e:	781b      	ldrb	r3, [r3, #0]
   15990:	069b      	lsls	r3, r3, #26
   15992:	0fdb      	lsrs	r3, r3, #31
   15994:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   15996:	4313      	orrs	r3, r2
   15998:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   1599a:	230c      	movs	r3, #12
   1599c:	18fb      	adds	r3, r7, r3
   1599e:	781b      	ldrb	r3, [r3, #0]
   159a0:	065b      	lsls	r3, r3, #25
   159a2:	0fdb      	lsrs	r3, r3, #31
   159a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   159a6:	4313      	orrs	r3, r2
   159a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   159aa:	230c      	movs	r3, #12
   159ac:	18fb      	adds	r3, r7, r3
   159ae:	781b      	ldrb	r3, [r3, #0]
   159b0:	061b      	lsls	r3, r3, #24
   159b2:	0fdb      	lsrs	r3, r3, #31
   159b4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   159b6:	4313      	orrs	r3, r2
   159b8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   159ba:	230c      	movs	r3, #12
   159bc:	18fb      	adds	r3, r7, r3
   159be:	785b      	ldrb	r3, [r3, #1]
   159c0:	07db      	lsls	r3, r3, #31
   159c2:	0fdb      	lsrs	r3, r3, #31
   159c4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   159c6:	4313      	orrs	r3, r2
   159c8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   159ca:	230c      	movs	r3, #12
   159cc:	18fb      	adds	r3, r7, r3
   159ce:	785b      	ldrb	r3, [r3, #1]
   159d0:	079b      	lsls	r3, r3, #30
   159d2:	0fdb      	lsrs	r3, r3, #31
   159d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   159d6:	4313      	orrs	r3, r2
   159d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   159da:	230c      	movs	r3, #12
   159dc:	18fb      	adds	r3, r7, r3
   159de:	785b      	ldrb	r3, [r3, #1]
   159e0:	075b      	lsls	r3, r3, #29
   159e2:	0fdb      	lsrs	r3, r3, #31
   159e4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   159e6:	4313      	orrs	r3, r2
   159e8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   159ea:	230c      	movs	r3, #12
   159ec:	18fb      	adds	r3, r7, r3
   159ee:	785b      	ldrb	r3, [r3, #1]
   159f0:	071b      	lsls	r3, r3, #28
   159f2:	0fdb      	lsrs	r3, r3, #31
   159f4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   159f6:	4313      	orrs	r3, r2
   159f8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   159fa:	230c      	movs	r3, #12
   159fc:	18fb      	adds	r3, r7, r3
   159fe:	785b      	ldrb	r3, [r3, #1]
   15a00:	06db      	lsls	r3, r3, #27
   15a02:	0fdb      	lsrs	r3, r3, #31
   15a04:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   15a06:	4313      	orrs	r3, r2
   15a08:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   15a0a:	230c      	movs	r3, #12
   15a0c:	18fb      	adds	r3, r7, r3
   15a0e:	785b      	ldrb	r3, [r3, #1]
   15a10:	069b      	lsls	r3, r3, #26
   15a12:	0fdb      	lsrs	r3, r3, #31
   15a14:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   15a16:	4313      	orrs	r3, r2
   15a18:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   15a1a:	230c      	movs	r3, #12
   15a1c:	18fb      	adds	r3, r7, r3
   15a1e:	785b      	ldrb	r3, [r3, #1]
   15a20:	065b      	lsls	r3, r3, #25
   15a22:	0fdb      	lsrs	r3, r3, #31
   15a24:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   15a26:	4313      	orrs	r3, r2
   15a28:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
   15a2a:	230c      	movs	r3, #12
   15a2c:	18fb      	adds	r3, r7, r3
   15a2e:	785b      	ldrb	r3, [r3, #1]
   15a30:	061b      	lsls	r3, r3, #24
   15a32:	0fdb      	lsrs	r3, r3, #31
   15a34:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   15a36:	4313      	orrs	r3, r2
   15a38:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   15a3a:	2b01      	cmp	r3, #1
   15a3c:	d000      	beq.n	15a40 <lsm6dso_gy_data_rate_set+0x134>
   15a3e:	e092      	b.n	15b66 <lsm6dso_gy_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
   15a40:	230b      	movs	r3, #11
   15a42:	18fa      	adds	r2, r7, r3
   15a44:	687b      	ldr	r3, [r7, #4]
   15a46:	0011      	movs	r1, r2
   15a48:	0018      	movs	r0, r3
   15a4a:	4b5e      	ldr	r3, [pc, #376]	; (15bc4 <lsm6dso_gy_data_rate_set+0x2b8>)
   15a4c:	4798      	blx	r3
   15a4e:	0003      	movs	r3, r0
   15a50:	613b      	str	r3, [r7, #16]

      if (ret == 0)
   15a52:	693b      	ldr	r3, [r7, #16]
   15a54:	2b00      	cmp	r3, #0
   15a56:	d000      	beq.n	15a5a <lsm6dso_gy_data_rate_set+0x14e>
   15a58:	e085      	b.n	15b66 <lsm6dso_gy_data_rate_set+0x25a>
      {
        switch (fsm_odr)
   15a5a:	230b      	movs	r3, #11
   15a5c:	18fb      	adds	r3, r7, r3
   15a5e:	781b      	ldrb	r3, [r3, #0]
   15a60:	2b01      	cmp	r3, #1
   15a62:	d017      	beq.n	15a94 <lsm6dso_gy_data_rate_set+0x188>
   15a64:	dc02      	bgt.n	15a6c <lsm6dso_gy_data_rate_set+0x160>
   15a66:	2b00      	cmp	r3, #0
   15a68:	d005      	beq.n	15a76 <lsm6dso_gy_data_rate_set+0x16a>
   15a6a:	e076      	b.n	15b5a <lsm6dso_gy_data_rate_set+0x24e>
   15a6c:	2b02      	cmp	r3, #2
   15a6e:	d029      	beq.n	15ac4 <lsm6dso_gy_data_rate_set+0x1b8>
   15a70:	2b03      	cmp	r3, #3
   15a72:	d048      	beq.n	15b06 <lsm6dso_gy_data_rate_set+0x1fa>
   15a74:	e071      	b.n	15b5a <lsm6dso_gy_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
   15a76:	1cfb      	adds	r3, r7, #3
   15a78:	781b      	ldrb	r3, [r3, #0]
   15a7a:	2b00      	cmp	r3, #0
   15a7c:	d104      	bne.n	15a88 <lsm6dso_gy_data_rate_set+0x17c>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
   15a7e:	2317      	movs	r3, #23
   15a80:	18fb      	adds	r3, r7, r3
   15a82:	2201      	movs	r2, #1
   15a84:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   15a86:	e06e      	b.n	15b66 <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   15a88:	2317      	movs	r3, #23
   15a8a:	18fb      	adds	r3, r7, r3
   15a8c:	1cfa      	adds	r2, r7, #3
   15a8e:	7812      	ldrb	r2, [r2, #0]
   15a90:	701a      	strb	r2, [r3, #0]
            break;
   15a92:	e068      	b.n	15b66 <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   15a94:	1cfb      	adds	r3, r7, #3
   15a96:	781b      	ldrb	r3, [r3, #0]
   15a98:	2b00      	cmp	r3, #0
   15a9a:	d104      	bne.n	15aa6 <lsm6dso_gy_data_rate_set+0x19a>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
   15a9c:	2317      	movs	r3, #23
   15a9e:	18fb      	adds	r3, r7, r3
   15aa0:	2202      	movs	r2, #2
   15aa2:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   15aa4:	e05f      	b.n	15b66 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   15aa6:	1cfb      	adds	r3, r7, #3
   15aa8:	781b      	ldrb	r3, [r3, #0]
   15aaa:	2b01      	cmp	r3, #1
   15aac:	d104      	bne.n	15ab8 <lsm6dso_gy_data_rate_set+0x1ac>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
   15aae:	2317      	movs	r3, #23
   15ab0:	18fb      	adds	r3, r7, r3
   15ab2:	2202      	movs	r2, #2
   15ab4:	701a      	strb	r2, [r3, #0]
            break;
   15ab6:	e056      	b.n	15b66 <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   15ab8:	2317      	movs	r3, #23
   15aba:	18fb      	adds	r3, r7, r3
   15abc:	1cfa      	adds	r2, r7, #3
   15abe:	7812      	ldrb	r2, [r2, #0]
   15ac0:	701a      	strb	r2, [r3, #0]
            break;
   15ac2:	e050      	b.n	15b66 <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   15ac4:	1cfb      	adds	r3, r7, #3
   15ac6:	781b      	ldrb	r3, [r3, #0]
   15ac8:	2b00      	cmp	r3, #0
   15aca:	d104      	bne.n	15ad6 <lsm6dso_gy_data_rate_set+0x1ca>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   15acc:	2317      	movs	r3, #23
   15ace:	18fb      	adds	r3, r7, r3
   15ad0:	2203      	movs	r2, #3
   15ad2:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   15ad4:	e047      	b.n	15b66 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   15ad6:	1cfb      	adds	r3, r7, #3
   15ad8:	781b      	ldrb	r3, [r3, #0]
   15ada:	2b01      	cmp	r3, #1
   15adc:	d104      	bne.n	15ae8 <lsm6dso_gy_data_rate_set+0x1dc>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   15ade:	2317      	movs	r3, #23
   15ae0:	18fb      	adds	r3, r7, r3
   15ae2:	2203      	movs	r2, #3
   15ae4:	701a      	strb	r2, [r3, #0]
            break;
   15ae6:	e03e      	b.n	15b66 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
   15ae8:	1cfb      	adds	r3, r7, #3
   15aea:	781b      	ldrb	r3, [r3, #0]
   15aec:	2b02      	cmp	r3, #2
   15aee:	d104      	bne.n	15afa <lsm6dso_gy_data_rate_set+0x1ee>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   15af0:	2317      	movs	r3, #23
   15af2:	18fb      	adds	r3, r7, r3
   15af4:	2203      	movs	r2, #3
   15af6:	701a      	strb	r2, [r3, #0]
            break;
   15af8:	e035      	b.n	15b66 <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   15afa:	2317      	movs	r3, #23
   15afc:	18fb      	adds	r3, r7, r3
   15afe:	1cfa      	adds	r2, r7, #3
   15b00:	7812      	ldrb	r2, [r2, #0]
   15b02:	701a      	strb	r2, [r3, #0]
            break;
   15b04:	e02f      	b.n	15b66 <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   15b06:	1cfb      	adds	r3, r7, #3
   15b08:	781b      	ldrb	r3, [r3, #0]
   15b0a:	2b00      	cmp	r3, #0
   15b0c:	d104      	bne.n	15b18 <lsm6dso_gy_data_rate_set+0x20c>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   15b0e:	2317      	movs	r3, #23
   15b10:	18fb      	adds	r3, r7, r3
   15b12:	2204      	movs	r2, #4
   15b14:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   15b16:	e026      	b.n	15b66 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   15b18:	1cfb      	adds	r3, r7, #3
   15b1a:	781b      	ldrb	r3, [r3, #0]
   15b1c:	2b01      	cmp	r3, #1
   15b1e:	d104      	bne.n	15b2a <lsm6dso_gy_data_rate_set+0x21e>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   15b20:	2317      	movs	r3, #23
   15b22:	18fb      	adds	r3, r7, r3
   15b24:	2204      	movs	r2, #4
   15b26:	701a      	strb	r2, [r3, #0]
            break;
   15b28:	e01d      	b.n	15b66 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
   15b2a:	1cfb      	adds	r3, r7, #3
   15b2c:	781b      	ldrb	r3, [r3, #0]
   15b2e:	2b02      	cmp	r3, #2
   15b30:	d104      	bne.n	15b3c <lsm6dso_gy_data_rate_set+0x230>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   15b32:	2317      	movs	r3, #23
   15b34:	18fb      	adds	r3, r7, r3
   15b36:	2204      	movs	r2, #4
   15b38:	701a      	strb	r2, [r3, #0]
            break;
   15b3a:	e014      	b.n	15b66 <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_52Hz)
   15b3c:	1cfb      	adds	r3, r7, #3
   15b3e:	781b      	ldrb	r3, [r3, #0]
   15b40:	2b03      	cmp	r3, #3
   15b42:	d104      	bne.n	15b4e <lsm6dso_gy_data_rate_set+0x242>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   15b44:	2317      	movs	r3, #23
   15b46:	18fb      	adds	r3, r7, r3
   15b48:	2204      	movs	r2, #4
   15b4a:	701a      	strb	r2, [r3, #0]
            break;
   15b4c:	e00b      	b.n	15b66 <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   15b4e:	2317      	movs	r3, #23
   15b50:	18fb      	adds	r3, r7, r3
   15b52:	1cfa      	adds	r2, r7, #3
   15b54:	7812      	ldrb	r2, [r2, #0]
   15b56:	701a      	strb	r2, [r3, #0]
            break;
   15b58:	e005      	b.n	15b66 <lsm6dso_gy_data_rate_set+0x25a>

          default:
            odr_gy = val;
   15b5a:	2317      	movs	r3, #23
   15b5c:	18fb      	adds	r3, r7, r3
   15b5e:	1cfa      	adds	r2, r7, #3
   15b60:	7812      	ldrb	r2, [r2, #0]
   15b62:	701a      	strb	r2, [r3, #0]
            break;
   15b64:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
   15b66:	693b      	ldr	r3, [r7, #16]
   15b68:	2b00      	cmp	r3, #0
   15b6a:	d108      	bne.n	15b7e <lsm6dso_gy_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   15b6c:	2308      	movs	r3, #8
   15b6e:	18fa      	adds	r2, r7, r3
   15b70:	6878      	ldr	r0, [r7, #4]
   15b72:	2301      	movs	r3, #1
   15b74:	2111      	movs	r1, #17
   15b76:	4c14      	ldr	r4, [pc, #80]	; (15bc8 <lsm6dso_gy_data_rate_set+0x2bc>)
   15b78:	47a0      	blx	r4
   15b7a:	0003      	movs	r3, r0
   15b7c:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
   15b7e:	693b      	ldr	r3, [r7, #16]
   15b80:	2b00      	cmp	r3, #0
   15b82:	d118      	bne.n	15bb6 <lsm6dso_gy_data_rate_set+0x2aa>
  {
    reg.odr_g = (uint8_t) odr_gy;
   15b84:	2317      	movs	r3, #23
   15b86:	18fb      	adds	r3, r7, r3
   15b88:	781b      	ldrb	r3, [r3, #0]
   15b8a:	220f      	movs	r2, #15
   15b8c:	4013      	ands	r3, r2
   15b8e:	b2da      	uxtb	r2, r3
   15b90:	2308      	movs	r3, #8
   15b92:	18fb      	adds	r3, r7, r3
   15b94:	0110      	lsls	r0, r2, #4
   15b96:	781a      	ldrb	r2, [r3, #0]
   15b98:	210f      	movs	r1, #15
   15b9a:	400a      	ands	r2, r1
   15b9c:	1c11      	adds	r1, r2, #0
   15b9e:	1c02      	adds	r2, r0, #0
   15ba0:	430a      	orrs	r2, r1
   15ba2:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   15ba4:	2308      	movs	r3, #8
   15ba6:	18fa      	adds	r2, r7, r3
   15ba8:	6878      	ldr	r0, [r7, #4]
   15baa:	2301      	movs	r3, #1
   15bac:	2111      	movs	r1, #17
   15bae:	4c07      	ldr	r4, [pc, #28]	; (15bcc <lsm6dso_gy_data_rate_set+0x2c0>)
   15bb0:	47a0      	blx	r4
   15bb2:	0003      	movs	r3, r0
   15bb4:	613b      	str	r3, [r7, #16]
  }

  return ret;
   15bb6:	693b      	ldr	r3, [r7, #16]
}
   15bb8:	0018      	movs	r0, r3
   15bba:	46bd      	mov	sp, r7
   15bbc:	b007      	add	sp, #28
   15bbe:	bd90      	pop	{r4, r7, pc}
   15bc0:	000160b9 	.word	0x000160b9
   15bc4:	0001610d 	.word	0x0001610d
   15bc8:	000154ad 	.word	0x000154ad
   15bcc:	000154f3 	.word	0x000154f3

00015bd0 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
   15bd0:	b590      	push	{r4, r7, lr}
   15bd2:	b085      	sub	sp, #20
   15bd4:	af00      	add	r7, sp, #0
   15bd6:	6078      	str	r0, [r7, #4]
   15bd8:	000a      	movs	r2, r1
   15bda:	1cfb      	adds	r3, r7, #3
   15bdc:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   15bde:	2308      	movs	r3, #8
   15be0:	18fa      	adds	r2, r7, r3
   15be2:	6878      	ldr	r0, [r7, #4]
   15be4:	2301      	movs	r3, #1
   15be6:	2112      	movs	r1, #18
   15be8:	4c12      	ldr	r4, [pc, #72]	; (15c34 <lsm6dso_block_data_update_set+0x64>)
   15bea:	47a0      	blx	r4
   15bec:	0003      	movs	r3, r0
   15bee:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15bf0:	68fb      	ldr	r3, [r7, #12]
   15bf2:	2b00      	cmp	r3, #0
   15bf4:	d119      	bne.n	15c2a <lsm6dso_block_data_update_set+0x5a>
  {
    reg.bdu = val;
   15bf6:	1cfb      	adds	r3, r7, #3
   15bf8:	781b      	ldrb	r3, [r3, #0]
   15bfa:	2201      	movs	r2, #1
   15bfc:	4013      	ands	r3, r2
   15bfe:	b2da      	uxtb	r2, r3
   15c00:	2308      	movs	r3, #8
   15c02:	18fb      	adds	r3, r7, r3
   15c04:	2101      	movs	r1, #1
   15c06:	400a      	ands	r2, r1
   15c08:	0190      	lsls	r0, r2, #6
   15c0a:	781a      	ldrb	r2, [r3, #0]
   15c0c:	2140      	movs	r1, #64	; 0x40
   15c0e:	438a      	bics	r2, r1
   15c10:	1c11      	adds	r1, r2, #0
   15c12:	1c02      	adds	r2, r0, #0
   15c14:	430a      	orrs	r2, r1
   15c16:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   15c18:	2308      	movs	r3, #8
   15c1a:	18fa      	adds	r2, r7, r3
   15c1c:	6878      	ldr	r0, [r7, #4]
   15c1e:	2301      	movs	r3, #1
   15c20:	2112      	movs	r1, #18
   15c22:	4c05      	ldr	r4, [pc, #20]	; (15c38 <lsm6dso_block_data_update_set+0x68>)
   15c24:	47a0      	blx	r4
   15c26:	0003      	movs	r3, r0
   15c28:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15c2a:	68fb      	ldr	r3, [r7, #12]
}
   15c2c:	0018      	movs	r0, r3
   15c2e:	46bd      	mov	sp, r7
   15c30:	b005      	add	sp, #20
   15c32:	bd90      	pop	{r4, r7, pc}
   15c34:	000154ad 	.word	0x000154ad
   15c38:	000154f3 	.word	0x000154f3

00015c3c <lsm6dso_xl_offset_weight_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_offset_weight_set(stmdev_ctx_t *ctx,
                                     lsm6dso_usr_off_w_t val)
{
   15c3c:	b590      	push	{r4, r7, lr}
   15c3e:	b085      	sub	sp, #20
   15c40:	af00      	add	r7, sp, #0
   15c42:	6078      	str	r0, [r7, #4]
   15c44:	000a      	movs	r2, r1
   15c46:	1cfb      	adds	r3, r7, #3
   15c48:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl6_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
   15c4a:	2308      	movs	r3, #8
   15c4c:	18fa      	adds	r2, r7, r3
   15c4e:	6878      	ldr	r0, [r7, #4]
   15c50:	2301      	movs	r3, #1
   15c52:	2115      	movs	r1, #21
   15c54:	4c12      	ldr	r4, [pc, #72]	; (15ca0 <lsm6dso_xl_offset_weight_set+0x64>)
   15c56:	47a0      	blx	r4
   15c58:	0003      	movs	r3, r0
   15c5a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15c5c:	68fb      	ldr	r3, [r7, #12]
   15c5e:	2b00      	cmp	r3, #0
   15c60:	d119      	bne.n	15c96 <lsm6dso_xl_offset_weight_set+0x5a>
  {
    reg.usr_off_w = (uint8_t)val;
   15c62:	1cfb      	adds	r3, r7, #3
   15c64:	781b      	ldrb	r3, [r3, #0]
   15c66:	2201      	movs	r2, #1
   15c68:	4013      	ands	r3, r2
   15c6a:	b2da      	uxtb	r2, r3
   15c6c:	2308      	movs	r3, #8
   15c6e:	18fb      	adds	r3, r7, r3
   15c70:	2101      	movs	r1, #1
   15c72:	400a      	ands	r2, r1
   15c74:	00d0      	lsls	r0, r2, #3
   15c76:	781a      	ldrb	r2, [r3, #0]
   15c78:	2108      	movs	r1, #8
   15c7a:	438a      	bics	r2, r1
   15c7c:	1c11      	adds	r1, r2, #0
   15c7e:	1c02      	adds	r2, r0, #0
   15c80:	430a      	orrs	r2, r1
   15c82:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
   15c84:	2308      	movs	r3, #8
   15c86:	18fa      	adds	r2, r7, r3
   15c88:	6878      	ldr	r0, [r7, #4]
   15c8a:	2301      	movs	r3, #1
   15c8c:	2115      	movs	r1, #21
   15c8e:	4c05      	ldr	r4, [pc, #20]	; (15ca4 <lsm6dso_xl_offset_weight_set+0x68>)
   15c90:	47a0      	blx	r4
   15c92:	0003      	movs	r3, r0
   15c94:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15c96:	68fb      	ldr	r3, [r7, #12]
}
   15c98:	0018      	movs	r0, r3
   15c9a:	46bd      	mov	sp, r7
   15c9c:	b005      	add	sp, #20
   15c9e:	bd90      	pop	{r4, r7, pc}
   15ca0:	000154ad 	.word	0x000154ad
   15ca4:	000154f3 	.word	0x000154f3

00015ca8 <lsm6dso_xl_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
   15ca8:	b590      	push	{r4, r7, lr}
   15caa:	b085      	sub	sp, #20
   15cac:	af00      	add	r7, sp, #0
   15cae:	6078      	str	r0, [r7, #4]
   15cb0:	6039      	str	r1, [r7, #0]
  lsm6dso_status_reg_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *)&reg, 1);
   15cb2:	2308      	movs	r3, #8
   15cb4:	18fa      	adds	r2, r7, r3
   15cb6:	6878      	ldr	r0, [r7, #4]
   15cb8:	2301      	movs	r3, #1
   15cba:	211e      	movs	r1, #30
   15cbc:	4c08      	ldr	r4, [pc, #32]	; (15ce0 <lsm6dso_xl_flag_data_ready_get+0x38>)
   15cbe:	47a0      	blx	r4
   15cc0:	0003      	movs	r3, r0
   15cc2:	60fb      	str	r3, [r7, #12]
  *val = reg.xlda;
   15cc4:	2308      	movs	r3, #8
   15cc6:	18fb      	adds	r3, r7, r3
   15cc8:	781b      	ldrb	r3, [r3, #0]
   15cca:	07db      	lsls	r3, r3, #31
   15ccc:	0fdb      	lsrs	r3, r3, #31
   15cce:	b2db      	uxtb	r3, r3
   15cd0:	001a      	movs	r2, r3
   15cd2:	683b      	ldr	r3, [r7, #0]
   15cd4:	701a      	strb	r2, [r3, #0]

  return ret;
   15cd6:	68fb      	ldr	r3, [r7, #12]
}
   15cd8:	0018      	movs	r0, r3
   15cda:	46bd      	mov	sp, r7
   15cdc:	b005      	add	sp, #20
   15cde:	bd90      	pop	{r4, r7, pc}
   15ce0:	000154ad 	.word	0x000154ad

00015ce4 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
   15ce4:	b590      	push	{r4, r7, lr}
   15ce6:	b087      	sub	sp, #28
   15ce8:	af00      	add	r7, sp, #0
   15cea:	6078      	str	r0, [r7, #4]
   15cec:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
   15cee:	230c      	movs	r3, #12
   15cf0:	18fa      	adds	r2, r7, r3
   15cf2:	6878      	ldr	r0, [r7, #4]
   15cf4:	2306      	movs	r3, #6
   15cf6:	2128      	movs	r1, #40	; 0x28
   15cf8:	4c26      	ldr	r4, [pc, #152]	; (15d94 <lsm6dso_acceleration_raw_get+0xb0>)
   15cfa:	47a0      	blx	r4
   15cfc:	0003      	movs	r3, r0
   15cfe:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
   15d00:	230c      	movs	r3, #12
   15d02:	18fb      	adds	r3, r7, r3
   15d04:	785b      	ldrb	r3, [r3, #1]
   15d06:	b21a      	sxth	r2, r3
   15d08:	683b      	ldr	r3, [r7, #0]
   15d0a:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
   15d0c:	683b      	ldr	r3, [r7, #0]
   15d0e:	2200      	movs	r2, #0
   15d10:	5e9b      	ldrsh	r3, [r3, r2]
   15d12:	b29b      	uxth	r3, r3
   15d14:	021b      	lsls	r3, r3, #8
   15d16:	b29a      	uxth	r2, r3
   15d18:	230c      	movs	r3, #12
   15d1a:	18fb      	adds	r3, r7, r3
   15d1c:	781b      	ldrb	r3, [r3, #0]
   15d1e:	b29b      	uxth	r3, r3
   15d20:	18d3      	adds	r3, r2, r3
   15d22:	b29b      	uxth	r3, r3
   15d24:	b21a      	sxth	r2, r3
   15d26:	683b      	ldr	r3, [r7, #0]
   15d28:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
   15d2a:	683b      	ldr	r3, [r7, #0]
   15d2c:	3302      	adds	r3, #2
   15d2e:	220c      	movs	r2, #12
   15d30:	18ba      	adds	r2, r7, r2
   15d32:	78d2      	ldrb	r2, [r2, #3]
   15d34:	b212      	sxth	r2, r2
   15d36:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
   15d38:	683b      	ldr	r3, [r7, #0]
   15d3a:	3302      	adds	r3, #2
   15d3c:	683a      	ldr	r2, [r7, #0]
   15d3e:	3202      	adds	r2, #2
   15d40:	2100      	movs	r1, #0
   15d42:	5e52      	ldrsh	r2, [r2, r1]
   15d44:	b292      	uxth	r2, r2
   15d46:	0212      	lsls	r2, r2, #8
   15d48:	b291      	uxth	r1, r2
   15d4a:	220c      	movs	r2, #12
   15d4c:	18ba      	adds	r2, r7, r2
   15d4e:	7892      	ldrb	r2, [r2, #2]
   15d50:	b292      	uxth	r2, r2
   15d52:	188a      	adds	r2, r1, r2
   15d54:	b292      	uxth	r2, r2
   15d56:	b212      	sxth	r2, r2
   15d58:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
   15d5a:	683b      	ldr	r3, [r7, #0]
   15d5c:	3304      	adds	r3, #4
   15d5e:	220c      	movs	r2, #12
   15d60:	18ba      	adds	r2, r7, r2
   15d62:	7952      	ldrb	r2, [r2, #5]
   15d64:	b212      	sxth	r2, r2
   15d66:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
   15d68:	683b      	ldr	r3, [r7, #0]
   15d6a:	3304      	adds	r3, #4
   15d6c:	683a      	ldr	r2, [r7, #0]
   15d6e:	3204      	adds	r2, #4
   15d70:	2100      	movs	r1, #0
   15d72:	5e52      	ldrsh	r2, [r2, r1]
   15d74:	b292      	uxth	r2, r2
   15d76:	0212      	lsls	r2, r2, #8
   15d78:	b291      	uxth	r1, r2
   15d7a:	220c      	movs	r2, #12
   15d7c:	18ba      	adds	r2, r7, r2
   15d7e:	7912      	ldrb	r2, [r2, #4]
   15d80:	b292      	uxth	r2, r2
   15d82:	188a      	adds	r2, r1, r2
   15d84:	b292      	uxth	r2, r2
   15d86:	b212      	sxth	r2, r2
   15d88:	801a      	strh	r2, [r3, #0]

  return ret;
   15d8a:	697b      	ldr	r3, [r7, #20]
}
   15d8c:	0018      	movs	r0, r3
   15d8e:	46bd      	mov	sp, r7
   15d90:	b007      	add	sp, #28
   15d92:	bd90      	pop	{r4, r7, pc}
   15d94:	000154ad 	.word	0x000154ad

00015d98 <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
   15d98:	b590      	push	{r4, r7, lr}
   15d9a:	b085      	sub	sp, #20
   15d9c:	af00      	add	r7, sp, #0
   15d9e:	6078      	str	r0, [r7, #4]
   15da0:	000a      	movs	r2, r1
   15da2:	1cfb      	adds	r3, r7, #3
   15da4:	701a      	strb	r2, [r3, #0]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
   15da6:	2308      	movs	r3, #8
   15da8:	18fa      	adds	r2, r7, r3
   15daa:	6878      	ldr	r0, [r7, #4]
   15dac:	2301      	movs	r3, #1
   15dae:	2101      	movs	r1, #1
   15db0:	4c11      	ldr	r4, [pc, #68]	; (15df8 <lsm6dso_mem_bank_set+0x60>)
   15db2:	47a0      	blx	r4
   15db4:	0003      	movs	r3, r0
   15db6:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15db8:	68fb      	ldr	r3, [r7, #12]
   15dba:	2b00      	cmp	r3, #0
   15dbc:	d117      	bne.n	15dee <lsm6dso_mem_bank_set+0x56>
  {
    reg.reg_access = (uint8_t)val;
   15dbe:	1cfb      	adds	r3, r7, #3
   15dc0:	781b      	ldrb	r3, [r3, #0]
   15dc2:	2203      	movs	r2, #3
   15dc4:	4013      	ands	r3, r2
   15dc6:	b2da      	uxtb	r2, r3
   15dc8:	2308      	movs	r3, #8
   15dca:	18fb      	adds	r3, r7, r3
   15dcc:	0190      	lsls	r0, r2, #6
   15dce:	781a      	ldrb	r2, [r3, #0]
   15dd0:	213f      	movs	r1, #63	; 0x3f
   15dd2:	400a      	ands	r2, r1
   15dd4:	1c11      	adds	r1, r2, #0
   15dd6:	1c02      	adds	r2, r0, #0
   15dd8:	430a      	orrs	r2, r1
   15dda:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
   15ddc:	2308      	movs	r3, #8
   15dde:	18fa      	adds	r2, r7, r3
   15de0:	6878      	ldr	r0, [r7, #4]
   15de2:	2301      	movs	r3, #1
   15de4:	2101      	movs	r1, #1
   15de6:	4c05      	ldr	r4, [pc, #20]	; (15dfc <lsm6dso_mem_bank_set+0x64>)
   15de8:	47a0      	blx	r4
   15dea:	0003      	movs	r3, r0
   15dec:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15dee:	68fb      	ldr	r3, [r7, #12]
}
   15df0:	0018      	movs	r0, r3
   15df2:	46bd      	mov	sp, r7
   15df4:	b005      	add	sp, #20
   15df6:	bd90      	pop	{r4, r7, pc}
   15df8:	000154ad 	.word	0x000154ad
   15dfc:	000154f3 	.word	0x000154f3

00015e00 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
   15e00:	b590      	push	{r4, r7, lr}
   15e02:	b085      	sub	sp, #20
   15e04:	af00      	add	r7, sp, #0
   15e06:	6078      	str	r0, [r7, #4]
   15e08:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
   15e0a:	683a      	ldr	r2, [r7, #0]
   15e0c:	6878      	ldr	r0, [r7, #4]
   15e0e:	2301      	movs	r3, #1
   15e10:	210f      	movs	r1, #15
   15e12:	4c04      	ldr	r4, [pc, #16]	; (15e24 <lsm6dso_device_id_get+0x24>)
   15e14:	47a0      	blx	r4
   15e16:	0003      	movs	r3, r0
   15e18:	60fb      	str	r3, [r7, #12]

  return ret;
   15e1a:	68fb      	ldr	r3, [r7, #12]
}
   15e1c:	0018      	movs	r0, r3
   15e1e:	46bd      	mov	sp, r7
   15e20:	b005      	add	sp, #20
   15e22:	bd90      	pop	{r4, r7, pc}
   15e24:	000154ad 	.word	0x000154ad

00015e28 <lsm6dso_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
   15e28:	b590      	push	{r4, r7, lr}
   15e2a:	b085      	sub	sp, #20
   15e2c:	af00      	add	r7, sp, #0
   15e2e:	6078      	str	r0, [r7, #4]
   15e30:	000a      	movs	r2, r1
   15e32:	1cfb      	adds	r3, r7, #3
   15e34:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   15e36:	2308      	movs	r3, #8
   15e38:	18fa      	adds	r2, r7, r3
   15e3a:	6878      	ldr	r0, [r7, #4]
   15e3c:	2301      	movs	r3, #1
   15e3e:	2112      	movs	r1, #18
   15e40:	4c12      	ldr	r4, [pc, #72]	; (15e8c <lsm6dso_reset_set+0x64>)
   15e42:	47a0      	blx	r4
   15e44:	0003      	movs	r3, r0
   15e46:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15e48:	68fb      	ldr	r3, [r7, #12]
   15e4a:	2b00      	cmp	r3, #0
   15e4c:	d119      	bne.n	15e82 <lsm6dso_reset_set+0x5a>
  {
    reg.sw_reset = val;
   15e4e:	1cfb      	adds	r3, r7, #3
   15e50:	781b      	ldrb	r3, [r3, #0]
   15e52:	2201      	movs	r2, #1
   15e54:	4013      	ands	r3, r2
   15e56:	b2da      	uxtb	r2, r3
   15e58:	2308      	movs	r3, #8
   15e5a:	18fb      	adds	r3, r7, r3
   15e5c:	2101      	movs	r1, #1
   15e5e:	400a      	ands	r2, r1
   15e60:	0010      	movs	r0, r2
   15e62:	781a      	ldrb	r2, [r3, #0]
   15e64:	2101      	movs	r1, #1
   15e66:	438a      	bics	r2, r1
   15e68:	1c11      	adds	r1, r2, #0
   15e6a:	1c02      	adds	r2, r0, #0
   15e6c:	430a      	orrs	r2, r1
   15e6e:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   15e70:	2308      	movs	r3, #8
   15e72:	18fa      	adds	r2, r7, r3
   15e74:	6878      	ldr	r0, [r7, #4]
   15e76:	2301      	movs	r3, #1
   15e78:	2112      	movs	r1, #18
   15e7a:	4c05      	ldr	r4, [pc, #20]	; (15e90 <lsm6dso_reset_set+0x68>)
   15e7c:	47a0      	blx	r4
   15e7e:	0003      	movs	r3, r0
   15e80:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15e82:	68fb      	ldr	r3, [r7, #12]
}
   15e84:	0018      	movs	r0, r3
   15e86:	46bd      	mov	sp, r7
   15e88:	b005      	add	sp, #20
   15e8a:	bd90      	pop	{r4, r7, pc}
   15e8c:	000154ad 	.word	0x000154ad
   15e90:	000154f3 	.word	0x000154f3

00015e94 <lsm6dso_reset_get>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
   15e94:	b590      	push	{r4, r7, lr}
   15e96:	b085      	sub	sp, #20
   15e98:	af00      	add	r7, sp, #0
   15e9a:	6078      	str	r0, [r7, #4]
   15e9c:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   15e9e:	2308      	movs	r3, #8
   15ea0:	18fa      	adds	r2, r7, r3
   15ea2:	6878      	ldr	r0, [r7, #4]
   15ea4:	2301      	movs	r3, #1
   15ea6:	2112      	movs	r1, #18
   15ea8:	4c08      	ldr	r4, [pc, #32]	; (15ecc <lsm6dso_reset_get+0x38>)
   15eaa:	47a0      	blx	r4
   15eac:	0003      	movs	r3, r0
   15eae:	60fb      	str	r3, [r7, #12]
  *val = reg.sw_reset;
   15eb0:	2308      	movs	r3, #8
   15eb2:	18fb      	adds	r3, r7, r3
   15eb4:	781b      	ldrb	r3, [r3, #0]
   15eb6:	07db      	lsls	r3, r3, #31
   15eb8:	0fdb      	lsrs	r3, r3, #31
   15eba:	b2db      	uxtb	r3, r3
   15ebc:	001a      	movs	r2, r3
   15ebe:	683b      	ldr	r3, [r7, #0]
   15ec0:	701a      	strb	r2, [r3, #0]

  return ret;
   15ec2:	68fb      	ldr	r3, [r7, #12]
}
   15ec4:	0018      	movs	r0, r3
   15ec6:	46bd      	mov	sp, r7
   15ec8:	b005      	add	sp, #20
   15eca:	bd90      	pop	{r4, r7, pc}
   15ecc:	000154ad 	.word	0x000154ad

00015ed0 <lsm6dso_xl_filter_lp2_set>:
  * @param  val      change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
   15ed0:	b590      	push	{r4, r7, lr}
   15ed2:	b085      	sub	sp, #20
   15ed4:	af00      	add	r7, sp, #0
   15ed6:	6078      	str	r0, [r7, #4]
   15ed8:	000a      	movs	r2, r1
   15eda:	1cfb      	adds	r3, r7, #3
   15edc:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   15ede:	2308      	movs	r3, #8
   15ee0:	18fa      	adds	r2, r7, r3
   15ee2:	6878      	ldr	r0, [r7, #4]
   15ee4:	2301      	movs	r3, #1
   15ee6:	2110      	movs	r1, #16
   15ee8:	4c12      	ldr	r4, [pc, #72]	; (15f34 <lsm6dso_xl_filter_lp2_set+0x64>)
   15eea:	47a0      	blx	r4
   15eec:	0003      	movs	r3, r0
   15eee:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15ef0:	68fb      	ldr	r3, [r7, #12]
   15ef2:	2b00      	cmp	r3, #0
   15ef4:	d119      	bne.n	15f2a <lsm6dso_xl_filter_lp2_set+0x5a>
  {
    reg.lpf2_xl_en = val;
   15ef6:	1cfb      	adds	r3, r7, #3
   15ef8:	781b      	ldrb	r3, [r3, #0]
   15efa:	2201      	movs	r2, #1
   15efc:	4013      	ands	r3, r2
   15efe:	b2da      	uxtb	r2, r3
   15f00:	2308      	movs	r3, #8
   15f02:	18fb      	adds	r3, r7, r3
   15f04:	2101      	movs	r1, #1
   15f06:	400a      	ands	r2, r1
   15f08:	1890      	adds	r0, r2, r2
   15f0a:	781a      	ldrb	r2, [r3, #0]
   15f0c:	2102      	movs	r1, #2
   15f0e:	438a      	bics	r2, r1
   15f10:	1c11      	adds	r1, r2, #0
   15f12:	1c02      	adds	r2, r0, #0
   15f14:	430a      	orrs	r2, r1
   15f16:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   15f18:	2308      	movs	r3, #8
   15f1a:	18fa      	adds	r2, r7, r3
   15f1c:	6878      	ldr	r0, [r7, #4]
   15f1e:	2301      	movs	r3, #1
   15f20:	2110      	movs	r1, #16
   15f22:	4c05      	ldr	r4, [pc, #20]	; (15f38 <lsm6dso_xl_filter_lp2_set+0x68>)
   15f24:	47a0      	blx	r4
   15f26:	0003      	movs	r3, r0
   15f28:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15f2a:	68fb      	ldr	r3, [r7, #12]
}
   15f2c:	0018      	movs	r0, r3
   15f2e:	46bd      	mov	sp, r7
   15f30:	b005      	add	sp, #20
   15f32:	bd90      	pop	{r4, r7, pc}
   15f34:	000154ad 	.word	0x000154ad
   15f38:	000154f3 	.word	0x000154f3

00015f3c <lsm6dso_xl_hp_path_on_out_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dso_hp_slope_xl_en_t val)
{
   15f3c:	b590      	push	{r4, r7, lr}
   15f3e:	b085      	sub	sp, #20
   15f40:	af00      	add	r7, sp, #0
   15f42:	6078      	str	r0, [r7, #4]
   15f44:	000a      	movs	r2, r1
   15f46:	1cfb      	adds	r3, r7, #3
   15f48:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl8_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
   15f4a:	2308      	movs	r3, #8
   15f4c:	18fa      	adds	r2, r7, r3
   15f4e:	6878      	ldr	r0, [r7, #4]
   15f50:	2301      	movs	r3, #1
   15f52:	2117      	movs	r1, #23
   15f54:	4c25      	ldr	r4, [pc, #148]	; (15fec <lsm6dso_xl_hp_path_on_out_set+0xb0>)
   15f56:	47a0      	blx	r4
   15f58:	0003      	movs	r3, r0
   15f5a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15f5c:	68fb      	ldr	r3, [r7, #12]
   15f5e:	2b00      	cmp	r3, #0
   15f60:	d13f      	bne.n	15fe2 <lsm6dso_xl_hp_path_on_out_set+0xa6>
  {
    reg.hp_slope_xl_en = ((uint8_t)val & 0x10U) >> 4;
   15f62:	1cfb      	adds	r3, r7, #3
   15f64:	781b      	ldrb	r3, [r3, #0]
   15f66:	091b      	lsrs	r3, r3, #4
   15f68:	b2db      	uxtb	r3, r3
   15f6a:	1c1a      	adds	r2, r3, #0
   15f6c:	2301      	movs	r3, #1
   15f6e:	4013      	ands	r3, r2
   15f70:	b2da      	uxtb	r2, r3
   15f72:	2308      	movs	r3, #8
   15f74:	18fb      	adds	r3, r7, r3
   15f76:	2101      	movs	r1, #1
   15f78:	400a      	ands	r2, r1
   15f7a:	0090      	lsls	r0, r2, #2
   15f7c:	781a      	ldrb	r2, [r3, #0]
   15f7e:	2104      	movs	r1, #4
   15f80:	438a      	bics	r2, r1
   15f82:	1c11      	adds	r1, r2, #0
   15f84:	1c02      	adds	r2, r0, #0
   15f86:	430a      	orrs	r2, r1
   15f88:	701a      	strb	r2, [r3, #0]
    reg.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
   15f8a:	1cfb      	adds	r3, r7, #3
   15f8c:	781b      	ldrb	r3, [r3, #0]
   15f8e:	095b      	lsrs	r3, r3, #5
   15f90:	b2db      	uxtb	r3, r3
   15f92:	1c1a      	adds	r2, r3, #0
   15f94:	2301      	movs	r3, #1
   15f96:	4013      	ands	r3, r2
   15f98:	b2da      	uxtb	r2, r3
   15f9a:	2308      	movs	r3, #8
   15f9c:	18fb      	adds	r3, r7, r3
   15f9e:	2101      	movs	r1, #1
   15fa0:	400a      	ands	r2, r1
   15fa2:	0110      	lsls	r0, r2, #4
   15fa4:	781a      	ldrb	r2, [r3, #0]
   15fa6:	2110      	movs	r1, #16
   15fa8:	438a      	bics	r2, r1
   15faa:	1c11      	adds	r1, r2, #0
   15fac:	1c02      	adds	r2, r0, #0
   15fae:	430a      	orrs	r2, r1
   15fb0:	701a      	strb	r2, [r3, #0]
    reg.hpcf_xl = (uint8_t)val & 0x07U;
   15fb2:	1cfb      	adds	r3, r7, #3
   15fb4:	781b      	ldrb	r3, [r3, #0]
   15fb6:	2207      	movs	r2, #7
   15fb8:	4013      	ands	r3, r2
   15fba:	b2da      	uxtb	r2, r3
   15fbc:	2308      	movs	r3, #8
   15fbe:	18fb      	adds	r3, r7, r3
   15fc0:	0150      	lsls	r0, r2, #5
   15fc2:	781a      	ldrb	r2, [r3, #0]
   15fc4:	211f      	movs	r1, #31
   15fc6:	400a      	ands	r2, r1
   15fc8:	1c11      	adds	r1, r2, #0
   15fca:	1c02      	adds	r2, r0, #0
   15fcc:	430a      	orrs	r2, r1
   15fce:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
   15fd0:	2308      	movs	r3, #8
   15fd2:	18fa      	adds	r2, r7, r3
   15fd4:	6878      	ldr	r0, [r7, #4]
   15fd6:	2301      	movs	r3, #1
   15fd8:	2117      	movs	r1, #23
   15fda:	4c05      	ldr	r4, [pc, #20]	; (15ff0 <lsm6dso_xl_hp_path_on_out_set+0xb4>)
   15fdc:	47a0      	blx	r4
   15fde:	0003      	movs	r3, r0
   15fe0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15fe2:	68fb      	ldr	r3, [r7, #12]
}
   15fe4:	0018      	movs	r0, r3
   15fe6:	46bd      	mov	sp, r7
   15fe8:	b005      	add	sp, #20
   15fea:	bd90      	pop	{r4, r7, pc}
   15fec:	000154ad 	.word	0x000154ad
   15ff0:	000154f3 	.word	0x000154f3

00015ff4 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
   15ff4:	b590      	push	{r4, r7, lr}
   15ff6:	b087      	sub	sp, #28
   15ff8:	af00      	add	r7, sp, #0
   15ffa:	6078      	str	r0, [r7, #4]
   15ffc:	000a      	movs	r2, r1
   15ffe:	1cfb      	adds	r3, r7, #3
   16000:	701a      	strb	r2, [r3, #0]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
   16002:	230c      	movs	r3, #12
   16004:	18fa      	adds	r2, r7, r3
   16006:	6878      	ldr	r0, [r7, #4]
   16008:	2301      	movs	r3, #1
   1600a:	2118      	movs	r1, #24
   1600c:	4c28      	ldr	r4, [pc, #160]	; (160b0 <lsm6dso_i3c_disable_set+0xbc>)
   1600e:	47a0      	blx	r4
   16010:	0003      	movs	r3, r0
   16012:	617b      	str	r3, [r7, #20]

  if (ret == 0)
   16014:	697b      	ldr	r3, [r7, #20]
   16016:	2b00      	cmp	r3, #0
   16018:	d11c      	bne.n	16054 <lsm6dso_i3c_disable_set+0x60>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
   1601a:	1cfb      	adds	r3, r7, #3
   1601c:	781b      	ldrb	r3, [r3, #0]
   1601e:	09db      	lsrs	r3, r3, #7
   16020:	b2db      	uxtb	r3, r3
   16022:	1c1a      	adds	r2, r3, #0
   16024:	2301      	movs	r3, #1
   16026:	4013      	ands	r3, r2
   16028:	b2da      	uxtb	r2, r3
   1602a:	230c      	movs	r3, #12
   1602c:	18fb      	adds	r3, r7, r3
   1602e:	2101      	movs	r1, #1
   16030:	400a      	ands	r2, r1
   16032:	1890      	adds	r0, r2, r2
   16034:	781a      	ldrb	r2, [r3, #0]
   16036:	2102      	movs	r1, #2
   16038:	438a      	bics	r2, r1
   1603a:	1c11      	adds	r1, r2, #0
   1603c:	1c02      	adds	r2, r0, #0
   1603e:	430a      	orrs	r2, r1
   16040:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
   16042:	230c      	movs	r3, #12
   16044:	18fa      	adds	r2, r7, r3
   16046:	6878      	ldr	r0, [r7, #4]
   16048:	2301      	movs	r3, #1
   1604a:	2118      	movs	r1, #24
   1604c:	4c19      	ldr	r4, [pc, #100]	; (160b4 <lsm6dso_i3c_disable_set+0xc0>)
   1604e:	47a0      	blx	r4
   16050:	0003      	movs	r3, r0
   16052:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
   16054:	697b      	ldr	r3, [r7, #20]
   16056:	2b00      	cmp	r3, #0
   16058:	d108      	bne.n	1606c <lsm6dso_i3c_disable_set+0x78>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
   1605a:	2310      	movs	r3, #16
   1605c:	18fa      	adds	r2, r7, r3
   1605e:	6878      	ldr	r0, [r7, #4]
   16060:	2301      	movs	r3, #1
   16062:	2162      	movs	r1, #98	; 0x62
   16064:	4c12      	ldr	r4, [pc, #72]	; (160b0 <lsm6dso_i3c_disable_set+0xbc>)
   16066:	47a0      	blx	r4
   16068:	0003      	movs	r3, r0
   1606a:	617b      	str	r3, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
   1606c:	697b      	ldr	r3, [r7, #20]
   1606e:	2b00      	cmp	r3, #0
   16070:	d119      	bne.n	160a6 <lsm6dso_i3c_disable_set+0xb2>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
   16072:	1cfb      	adds	r3, r7, #3
   16074:	781b      	ldrb	r3, [r3, #0]
   16076:	2203      	movs	r2, #3
   16078:	4013      	ands	r3, r2
   1607a:	b2da      	uxtb	r2, r3
   1607c:	2310      	movs	r3, #16
   1607e:	18fb      	adds	r3, r7, r3
   16080:	2103      	movs	r1, #3
   16082:	400a      	ands	r2, r1
   16084:	00d0      	lsls	r0, r2, #3
   16086:	781a      	ldrb	r2, [r3, #0]
   16088:	2118      	movs	r1, #24
   1608a:	438a      	bics	r2, r1
   1608c:	1c11      	adds	r1, r2, #0
   1608e:	1c02      	adds	r2, r0, #0
   16090:	430a      	orrs	r2, r1
   16092:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
   16094:	2310      	movs	r3, #16
   16096:	18fa      	adds	r2, r7, r3
   16098:	6878      	ldr	r0, [r7, #4]
   1609a:	2301      	movs	r3, #1
   1609c:	2162      	movs	r1, #98	; 0x62
   1609e:	4c05      	ldr	r4, [pc, #20]	; (160b4 <lsm6dso_i3c_disable_set+0xc0>)
   160a0:	47a0      	blx	r4
   160a2:	0003      	movs	r3, r0
   160a4:	617b      	str	r3, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
   160a6:	697b      	ldr	r3, [r7, #20]
}
   160a8:	0018      	movs	r0, r3
   160aa:	46bd      	mov	sp, r7
   160ac:	b007      	add	sp, #28
   160ae:	bd90      	pop	{r4, r7, pc}
   160b0:	000154ad 	.word	0x000154ad
   160b4:	000154f3 	.word	0x000154f3

000160b8 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
   160b8:	b590      	push	{r4, r7, lr}
   160ba:	b085      	sub	sp, #20
   160bc:	af00      	add	r7, sp, #0
   160be:	6078      	str	r0, [r7, #4]
   160c0:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
   160c2:	687b      	ldr	r3, [r7, #4]
   160c4:	2102      	movs	r1, #2
   160c6:	0018      	movs	r0, r3
   160c8:	4b0e      	ldr	r3, [pc, #56]	; (16104 <lsm6dso_fsm_enable_get+0x4c>)
   160ca:	4798      	blx	r3
   160cc:	0003      	movs	r3, r0
   160ce:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   160d0:	68fb      	ldr	r3, [r7, #12]
   160d2:	2b00      	cmp	r3, #0
   160d4:	d107      	bne.n	160e6 <lsm6dso_fsm_enable_get+0x2e>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
   160d6:	683a      	ldr	r2, [r7, #0]
   160d8:	6878      	ldr	r0, [r7, #4]
   160da:	2302      	movs	r3, #2
   160dc:	2146      	movs	r1, #70	; 0x46
   160de:	4c0a      	ldr	r4, [pc, #40]	; (16108 <lsm6dso_fsm_enable_get+0x50>)
   160e0:	47a0      	blx	r4
   160e2:	0003      	movs	r3, r0
   160e4:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
   160e6:	68fb      	ldr	r3, [r7, #12]
   160e8:	2b00      	cmp	r3, #0
   160ea:	d106      	bne.n	160fa <lsm6dso_fsm_enable_get+0x42>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
   160ec:	687b      	ldr	r3, [r7, #4]
   160ee:	2100      	movs	r1, #0
   160f0:	0018      	movs	r0, r3
   160f2:	4b04      	ldr	r3, [pc, #16]	; (16104 <lsm6dso_fsm_enable_get+0x4c>)
   160f4:	4798      	blx	r3
   160f6:	0003      	movs	r3, r0
   160f8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   160fa:	68fb      	ldr	r3, [r7, #12]
}
   160fc:	0018      	movs	r0, r3
   160fe:	46bd      	mov	sp, r7
   16100:	b005      	add	sp, #20
   16102:	bd90      	pop	{r4, r7, pc}
   16104:	00015d99 	.word	0x00015d99
   16108:	000154ad 	.word	0x000154ad

0001610c <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
   1610c:	b590      	push	{r4, r7, lr}
   1610e:	b085      	sub	sp, #20
   16110:	af00      	add	r7, sp, #0
   16112:	6078      	str	r0, [r7, #4]
   16114:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
   16116:	687b      	ldr	r3, [r7, #4]
   16118:	2102      	movs	r1, #2
   1611a:	0018      	movs	r0, r3
   1611c:	4b21      	ldr	r3, [pc, #132]	; (161a4 <lsm6dso_fsm_data_rate_get+0x98>)
   1611e:	4798      	blx	r3
   16120:	0003      	movs	r3, r0
   16122:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   16124:	68fb      	ldr	r3, [r7, #12]
   16126:	2b00      	cmp	r3, #0
   16128:	d108      	bne.n	1613c <lsm6dso_fsm_data_rate_get+0x30>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
   1612a:	2308      	movs	r3, #8
   1612c:	18fa      	adds	r2, r7, r3
   1612e:	6878      	ldr	r0, [r7, #4]
   16130:	2301      	movs	r3, #1
   16132:	215f      	movs	r1, #95	; 0x5f
   16134:	4c1c      	ldr	r4, [pc, #112]	; (161a8 <lsm6dso_fsm_data_rate_get+0x9c>)
   16136:	47a0      	blx	r4
   16138:	0003      	movs	r3, r0
   1613a:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
   1613c:	68fb      	ldr	r3, [r7, #12]
   1613e:	2b00      	cmp	r3, #0
   16140:	d12b      	bne.n	1619a <lsm6dso_fsm_data_rate_get+0x8e>
  {
    switch (reg.fsm_odr)
   16142:	2308      	movs	r3, #8
   16144:	18fb      	adds	r3, r7, r3
   16146:	781b      	ldrb	r3, [r3, #0]
   16148:	06db      	lsls	r3, r3, #27
   1614a:	0f9b      	lsrs	r3, r3, #30
   1614c:	b2db      	uxtb	r3, r3
   1614e:	2b01      	cmp	r3, #1
   16150:	d00c      	beq.n	1616c <lsm6dso_fsm_data_rate_get+0x60>
   16152:	dc02      	bgt.n	1615a <lsm6dso_fsm_data_rate_get+0x4e>
   16154:	2b00      	cmp	r3, #0
   16156:	d005      	beq.n	16164 <lsm6dso_fsm_data_rate_get+0x58>
   16158:	e014      	b.n	16184 <lsm6dso_fsm_data_rate_get+0x78>
   1615a:	2b02      	cmp	r3, #2
   1615c:	d00a      	beq.n	16174 <lsm6dso_fsm_data_rate_get+0x68>
   1615e:	2b03      	cmp	r3, #3
   16160:	d00c      	beq.n	1617c <lsm6dso_fsm_data_rate_get+0x70>
   16162:	e00f      	b.n	16184 <lsm6dso_fsm_data_rate_get+0x78>
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
   16164:	683b      	ldr	r3, [r7, #0]
   16166:	2200      	movs	r2, #0
   16168:	701a      	strb	r2, [r3, #0]
        break;
   1616a:	e00f      	b.n	1618c <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
   1616c:	683b      	ldr	r3, [r7, #0]
   1616e:	2201      	movs	r2, #1
   16170:	701a      	strb	r2, [r3, #0]
        break;
   16172:	e00b      	b.n	1618c <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
   16174:	683b      	ldr	r3, [r7, #0]
   16176:	2202      	movs	r2, #2
   16178:	701a      	strb	r2, [r3, #0]
        break;
   1617a:	e007      	b.n	1618c <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
   1617c:	683b      	ldr	r3, [r7, #0]
   1617e:	2203      	movs	r2, #3
   16180:	701a      	strb	r2, [r3, #0]
        break;
   16182:	e003      	b.n	1618c <lsm6dso_fsm_data_rate_get+0x80>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
   16184:	683b      	ldr	r3, [r7, #0]
   16186:	2200      	movs	r2, #0
   16188:	701a      	strb	r2, [r3, #0]
        break;
   1618a:	46c0      	nop			; (mov r8, r8)
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
   1618c:	687b      	ldr	r3, [r7, #4]
   1618e:	2100      	movs	r1, #0
   16190:	0018      	movs	r0, r3
   16192:	4b04      	ldr	r3, [pc, #16]	; (161a4 <lsm6dso_fsm_data_rate_get+0x98>)
   16194:	4798      	blx	r3
   16196:	0003      	movs	r3, r0
   16198:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   1619a:	68fb      	ldr	r3, [r7, #12]
}
   1619c:	0018      	movs	r0, r3
   1619e:	46bd      	mov	sp, r7
   161a0:	b005      	add	sp, #20
   161a2:	bd90      	pop	{r4, r7, pc}
   161a4:	00015d99 	.word	0x00015d99
   161a8:	000154ad 	.word	0x000154ad

000161ac <platform_write>:
 * @param[in]   len Length of the data sent
 * @return      Returns what the function "I2cWriteDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp,uint16_t len)
{
   161ac:	b580      	push	{r7, lr}
   161ae:	b086      	sub	sp, #24
   161b0:	af00      	add	r7, sp, #0
   161b2:	60f8      	str	r0, [r7, #12]
   161b4:	0008      	movs	r0, r1
   161b6:	607a      	str	r2, [r7, #4]
   161b8:	0019      	movs	r1, r3
   161ba:	230b      	movs	r3, #11
   161bc:	18fb      	adds	r3, r7, r3
   161be:	1c02      	adds	r2, r0, #0
   161c0:	701a      	strb	r2, [r3, #0]
   161c2:	2308      	movs	r3, #8
   161c4:	18fb      	adds	r3, r7, r3
   161c6:	1c0a      	adds	r2, r1, #0
   161c8:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Use the array "msgOutImu" to copy the data to be sent. Remember that the position [0] of the array you send must be the register, and
	//starting from position [1] you can copy the data to be sent. Remember to adjust the length accordingly
	int32_t error = ERROR_NONE;
   161ca:	2300      	movs	r3, #0
   161cc:	613b      	str	r3, [r7, #16]
	
	msgOutImu[0] = reg;
   161ce:	4b19      	ldr	r3, [pc, #100]	; (16234 <platform_write+0x88>)
   161d0:	220b      	movs	r2, #11
   161d2:	18ba      	adds	r2, r7, r2
   161d4:	7812      	ldrb	r2, [r2, #0]
   161d6:	701a      	strb	r2, [r3, #0]
	//loop through bufp to get message
 	for(int i = 0; i < len; i++)
   161d8:	2300      	movs	r3, #0
   161da:	617b      	str	r3, [r7, #20]
   161dc:	e00a      	b.n	161f4 <platform_write+0x48>
 	{
 		msgOutImu[i+1] = bufp[i];
   161de:	697b      	ldr	r3, [r7, #20]
   161e0:	3301      	adds	r3, #1
   161e2:	697a      	ldr	r2, [r7, #20]
   161e4:	6879      	ldr	r1, [r7, #4]
   161e6:	188a      	adds	r2, r1, r2
   161e8:	7811      	ldrb	r1, [r2, #0]
   161ea:	4a12      	ldr	r2, [pc, #72]	; (16234 <platform_write+0x88>)
   161ec:	54d1      	strb	r1, [r2, r3]
 	for(int i = 0; i < len; i++)
   161ee:	697b      	ldr	r3, [r7, #20]
   161f0:	3301      	adds	r3, #1
   161f2:	617b      	str	r3, [r7, #20]
   161f4:	2308      	movs	r3, #8
   161f6:	18fb      	adds	r3, r7, r3
   161f8:	881a      	ldrh	r2, [r3, #0]
   161fa:	697b      	ldr	r3, [r7, #20]
   161fc:	429a      	cmp	r2, r3
   161fe:	dcee      	bgt.n	161de <platform_write+0x32>
 	}
	//save individual data as part of the IMU_DATA struct
	imuData.address = LSM6DSO_I2C_ADD_H;
   16200:	4b0d      	ldr	r3, [pc, #52]	; (16238 <platform_write+0x8c>)
   16202:	226b      	movs	r2, #107	; 0x6b
   16204:	701a      	strb	r2, [r3, #0]
	imuData.lenOut = 1+len;
   16206:	2308      	movs	r3, #8
   16208:	18fb      	adds	r3, r7, r3
   1620a:	881b      	ldrh	r3, [r3, #0]
   1620c:	3301      	adds	r3, #1
   1620e:	b29a      	uxth	r2, r3
   16210:	4b09      	ldr	r3, [pc, #36]	; (16238 <platform_write+0x8c>)
   16212:	81da      	strh	r2, [r3, #14]
	imuData.msgOut = &msgOutImu;
   16214:	4b08      	ldr	r3, [pc, #32]	; (16238 <platform_write+0x8c>)
   16216:	4a07      	ldr	r2, [pc, #28]	; (16234 <platform_write+0x88>)
   16218:	605a      	str	r2, [r3, #4]
	//write the imudata struct object
	error = I2cWriteDataWait(&imuData, 100);
   1621a:	4b07      	ldr	r3, [pc, #28]	; (16238 <platform_write+0x8c>)
   1621c:	2164      	movs	r1, #100	; 0x64
   1621e:	0018      	movs	r0, r3
   16220:	4b06      	ldr	r3, [pc, #24]	; (1623c <platform_write+0x90>)
   16222:	4798      	blx	r3
   16224:	0003      	movs	r3, r0
   16226:	613b      	str	r3, [r7, #16]
	return error;
   16228:	693b      	ldr	r3, [r7, #16]

}
   1622a:	0018      	movs	r0, r3
   1622c:	46bd      	mov	sp, r7
   1622e:	b006      	add	sp, #24
   16230:	bd80      	pop	{r7, pc}
   16232:	46c0      	nop			; (mov r8, r8)
   16234:	20004864 	.word	0x20004864
   16238:	200048a4 	.word	0x200048a4
   1623c:	000152c1 	.word	0x000152c1

00016240 <platform_read>:
 * @param[in]   len Length of the data to be read
 * @return      Returns what the function "I2cWriteDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static  int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
   16240:	b580      	push	{r7, lr}
   16242:	b086      	sub	sp, #24
   16244:	af00      	add	r7, sp, #0
   16246:	60f8      	str	r0, [r7, #12]
   16248:	0008      	movs	r0, r1
   1624a:	607a      	str	r2, [r7, #4]
   1624c:	0019      	movs	r1, r3
   1624e:	230b      	movs	r3, #11
   16250:	18fb      	adds	r3, r7, r3
   16252:	1c02      	adds	r2, r0, #0
   16254:	701a      	strb	r2, [r3, #0]
   16256:	2308      	movs	r3, #8
   16258:	18fb      	adds	r3, r7, r3
   1625a:	1c0a      	adds	r2, r1, #0
   1625c:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Check the structure "imuData" and notice that it has a msgOut and msgIn parameter. How do we fill this to our advantage?
	int32_t error = ERROR_NONE;
   1625e:	2300      	movs	r3, #0
   16260:	617b      	str	r3, [r7, #20]
	//asssemble the message being read
	imuData.address = LSM6DSO_I2C_ADD_H;
   16262:	4b13      	ldr	r3, [pc, #76]	; (162b0 <platform_read+0x70>)
   16264:	226b      	movs	r2, #107	; 0x6b
   16266:	701a      	strb	r2, [r3, #0]
	imuData.lenIn = len;
   16268:	4b11      	ldr	r3, [pc, #68]	; (162b0 <platform_read+0x70>)
   1626a:	2208      	movs	r2, #8
   1626c:	18ba      	adds	r2, r7, r2
   1626e:	8812      	ldrh	r2, [r2, #0]
   16270:	819a      	strh	r2, [r3, #12]
	imuData.msgIn = bufp;
   16272:	4b0f      	ldr	r3, [pc, #60]	; (162b0 <platform_read+0x70>)
   16274:	687a      	ldr	r2, [r7, #4]
   16276:	609a      	str	r2, [r3, #8]
	//clear our outwards message
	imuData.lenOut = 1;
   16278:	4b0d      	ldr	r3, [pc, #52]	; (162b0 <platform_read+0x70>)
   1627a:	2201      	movs	r2, #1
   1627c:	81da      	strh	r2, [r3, #14]
	msgOutImu[0] = reg;
   1627e:	4b0d      	ldr	r3, [pc, #52]	; (162b4 <platform_read+0x74>)
   16280:	220b      	movs	r2, #11
   16282:	18ba      	adds	r2, r7, r2
   16284:	7812      	ldrb	r2, [r2, #0]
   16286:	701a      	strb	r2, [r3, #0]
	msgOutImu[1] = 0;
   16288:	4b0a      	ldr	r3, [pc, #40]	; (162b4 <platform_read+0x74>)
   1628a:	2200      	movs	r2, #0
   1628c:	705a      	strb	r2, [r3, #1]
	imuData.msgOut = &msgOutImu;
   1628e:	4b08      	ldr	r3, [pc, #32]	; (162b0 <platform_read+0x70>)
   16290:	4a08      	ldr	r2, [pc, #32]	; (162b4 <platform_read+0x74>)
   16292:	605a      	str	r2, [r3, #4]
	//read the imudata struct
	error = I2cReadDataWait(&imuData, 5, 100);
   16294:	4b06      	ldr	r3, [pc, #24]	; (162b0 <platform_read+0x70>)
   16296:	2264      	movs	r2, #100	; 0x64
   16298:	2105      	movs	r1, #5
   1629a:	0018      	movs	r0, r3
   1629c:	4b06      	ldr	r3, [pc, #24]	; (162b8 <platform_read+0x78>)
   1629e:	4798      	blx	r3
   162a0:	0003      	movs	r3, r0
   162a2:	617b      	str	r3, [r7, #20]
	
	return error;
   162a4:	697b      	ldr	r3, [r7, #20]

}
   162a6:	0018      	movs	r0, r3
   162a8:	46bd      	mov	sp, r7
   162aa:	b006      	add	sp, #24
   162ac:	bd80      	pop	{r7, pc}
   162ae:	46c0      	nop			; (mov r8, r8)
   162b0:	200048a4 	.word	0x200048a4
   162b4:	20004864 	.word	0x20004864
   162b8:	00015399 	.word	0x00015399

000162bc <GetImuStruct>:


stmdev_ctx_t * GetImuStruct(void)
{
   162bc:	b580      	push	{r7, lr}
   162be:	af00      	add	r7, sp, #0
return &dev_ctx;
   162c0:	4b01      	ldr	r3, [pc, #4]	; (162c8 <GetImuStruct+0xc>)
}
   162c2:	0018      	movs	r0, r3
   162c4:	46bd      	mov	sp, r7
   162c6:	bd80      	pop	{r7, pc}
   162c8:	20000020 	.word	0x20000020

000162cc <InitImu>:



int32_t InitImu(void)
{
   162cc:	b580      	push	{r7, lr}
   162ce:	b082      	sub	sp, #8
   162d0:	af00      	add	r7, sp, #0
uint8_t rst;
int32_t error = 0;
   162d2:	2300      	movs	r3, #0
   162d4:	607b      	str	r3, [r7, #4]
/*
   * Restore default configuration
   */
  error = lsm6dso_reset_set(&dev_ctx, PROPERTY_ENABLE);
   162d6:	4b23      	ldr	r3, [pc, #140]	; (16364 <InitImu+0x98>)
   162d8:	2101      	movs	r1, #1
   162da:	0018      	movs	r0, r3
   162dc:	4b22      	ldr	r3, [pc, #136]	; (16368 <InitImu+0x9c>)
   162de:	4798      	blx	r3
   162e0:	0003      	movs	r3, r0
   162e2:	607b      	str	r3, [r7, #4]
  do {
    error |= lsm6dso_reset_get(&dev_ctx, &rst);
   162e4:	1cfa      	adds	r2, r7, #3
   162e6:	4b1f      	ldr	r3, [pc, #124]	; (16364 <InitImu+0x98>)
   162e8:	0011      	movs	r1, r2
   162ea:	0018      	movs	r0, r3
   162ec:	4b1f      	ldr	r3, [pc, #124]	; (1636c <InitImu+0xa0>)
   162ee:	4798      	blx	r3
   162f0:	0002      	movs	r2, r0
   162f2:	687b      	ldr	r3, [r7, #4]
   162f4:	4313      	orrs	r3, r2
   162f6:	607b      	str	r3, [r7, #4]
  } while (rst);
   162f8:	1cfb      	adds	r3, r7, #3
   162fa:	781b      	ldrb	r3, [r3, #0]
   162fc:	2b00      	cmp	r3, #0
   162fe:	d1f1      	bne.n	162e4 <InitImu+0x18>

  /* Disable I3C interface */
  lsm6dso_i3c_disable_set(&dev_ctx, LSM6DSO_I3C_DISABLE);
   16300:	4b18      	ldr	r3, [pc, #96]	; (16364 <InitImu+0x98>)
   16302:	2180      	movs	r1, #128	; 0x80
   16304:	0018      	movs	r0, r3
   16306:	4b1a      	ldr	r3, [pc, #104]	; (16370 <InitImu+0xa4>)
   16308:	4798      	blx	r3
  /* Enable Block Data Update */
  lsm6dso_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
   1630a:	4b16      	ldr	r3, [pc, #88]	; (16364 <InitImu+0x98>)
   1630c:	2101      	movs	r1, #1
   1630e:	0018      	movs	r0, r3
   16310:	4b18      	ldr	r3, [pc, #96]	; (16374 <InitImu+0xa8>)
   16312:	4798      	blx	r3
  /* Weight of XL user offset to 2^(-10) g/LSB */
  lsm6dso_xl_offset_weight_set(&dev_ctx, LSM6DSO_LSb_1mg);
   16314:	4b13      	ldr	r3, [pc, #76]	; (16364 <InitImu+0x98>)
   16316:	2100      	movs	r1, #0
   16318:	0018      	movs	r0, r3
   1631a:	4b17      	ldr	r3, [pc, #92]	; (16378 <InitImu+0xac>)
   1631c:	4798      	blx	r3
  /* Accelerometer X,Y,Z axis user offset correction expressed
   * in two’s complement. Set X to 48mg, Y tp 64 mg, Z to -127 mg
   */

  /* Set Output Data Rate */
  lsm6dso_xl_data_rate_set(&dev_ctx, LSM6DSO_XL_ODR_12Hz5);
   1631e:	4b11      	ldr	r3, [pc, #68]	; (16364 <InitImu+0x98>)
   16320:	2101      	movs	r1, #1
   16322:	0018      	movs	r0, r3
   16324:	4b15      	ldr	r3, [pc, #84]	; (1637c <InitImu+0xb0>)
   16326:	4798      	blx	r3
  lsm6dso_gy_data_rate_set(&dev_ctx, LSM6DSO_GY_ODR_12Hz5);
   16328:	4b0e      	ldr	r3, [pc, #56]	; (16364 <InitImu+0x98>)
   1632a:	2101      	movs	r1, #1
   1632c:	0018      	movs	r0, r3
   1632e:	4b14      	ldr	r3, [pc, #80]	; (16380 <InitImu+0xb4>)
   16330:	4798      	blx	r3
  /* Set full scale */
  lsm6dso_xl_full_scale_set(&dev_ctx, LSM6DSO_2g);
   16332:	4b0c      	ldr	r3, [pc, #48]	; (16364 <InitImu+0x98>)
   16334:	2100      	movs	r1, #0
   16336:	0018      	movs	r0, r3
   16338:	4b12      	ldr	r3, [pc, #72]	; (16384 <InitImu+0xb8>)
   1633a:	4798      	blx	r3
  lsm6dso_gy_full_scale_set(&dev_ctx, LSM6DSO_2000dps);
   1633c:	4b09      	ldr	r3, [pc, #36]	; (16364 <InitImu+0x98>)
   1633e:	2106      	movs	r1, #6
   16340:	0018      	movs	r0, r3
   16342:	4b11      	ldr	r3, [pc, #68]	; (16388 <InitImu+0xbc>)
   16344:	4798      	blx	r3
  /* Configure filtering chain(No aux interface). */
  /* Accelerometer - LPF1 + LPF2 path */
  lsm6dso_xl_hp_path_on_out_set(&dev_ctx, LSM6DSO_LP_ODR_DIV_100);
   16346:	4b07      	ldr	r3, [pc, #28]	; (16364 <InitImu+0x98>)
   16348:	2104      	movs	r1, #4
   1634a:	0018      	movs	r0, r3
   1634c:	4b0f      	ldr	r3, [pc, #60]	; (1638c <InitImu+0xc0>)
   1634e:	4798      	blx	r3
  lsm6dso_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);
   16350:	4b04      	ldr	r3, [pc, #16]	; (16364 <InitImu+0x98>)
   16352:	2101      	movs	r1, #1
   16354:	0018      	movs	r0, r3
   16356:	4b0e      	ldr	r3, [pc, #56]	; (16390 <InitImu+0xc4>)
   16358:	4798      	blx	r3

  return error;
   1635a:	687b      	ldr	r3, [r7, #4]
}
   1635c:	0018      	movs	r0, r3
   1635e:	46bd      	mov	sp, r7
   16360:	b002      	add	sp, #8
   16362:	bd80      	pop	{r7, pc}
   16364:	20000020 	.word	0x20000020
   16368:	00015e29 	.word	0x00015e29
   1636c:	00015e95 	.word	0x00015e95
   16370:	00015ff5 	.word	0x00015ff5
   16374:	00015bd1 	.word	0x00015bd1
   16378:	00015c3d 	.word	0x00015c3d
   1637c:	000155dd 	.word	0x000155dd
   16380:	0001590d 	.word	0x0001590d
   16384:	00015571 	.word	0x00015571
   16388:	000158a1 	.word	0x000158a1
   1638c:	00015f3d 	.word	0x00015f3d
   16390:	00015ed1 	.word	0x00015ed1

00016394 <SeesawGetKeypadCount>:

 * @return		Returns the number of events in the buffer. Use SeesawReadKeypad to read these events.
 * @note
*/
uint8_t SeesawGetKeypadCount(void)
{
   16394:	b580      	push	{r7, lr}
   16396:	b082      	sub	sp, #8
   16398:	af00      	add	r7, sp, #0
    uint8_t count = 0;
   1639a:	1cfb      	adds	r3, r7, #3
   1639c:	2200      	movs	r2, #0
   1639e:	701a      	strb	r2, [r3, #0]
    seesawData.address = NEO_TRELLIS_ADDR;
   163a0:	4b11      	ldr	r3, [pc, #68]	; (163e8 <SeesawGetKeypadCount+0x54>)
   163a2:	222e      	movs	r2, #46	; 0x2e
   163a4:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgKeypadGetCount[0];
   163a6:	4b10      	ldr	r3, [pc, #64]	; (163e8 <SeesawGetKeypadCount+0x54>)
   163a8:	4a10      	ldr	r2, [pc, #64]	; (163ec <SeesawGetKeypadCount+0x58>)
   163aa:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgKeypadGetCount);
   163ac:	4b0e      	ldr	r3, [pc, #56]	; (163e8 <SeesawGetKeypadCount+0x54>)
   163ae:	2202      	movs	r2, #2
   163b0:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = &count;
   163b2:	4b0d      	ldr	r3, [pc, #52]	; (163e8 <SeesawGetKeypadCount+0x54>)
   163b4:	1cfa      	adds	r2, r7, #3
   163b6:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = 1;
   163b8:	4b0b      	ldr	r3, [pc, #44]	; (163e8 <SeesawGetKeypadCount+0x54>)
   163ba:	2201      	movs	r2, #1
   163bc:	819a      	strh	r2, [r3, #12]

    int error = I2cReadDataWait(&seesawData, 0, 100);
   163be:	4b0a      	ldr	r3, [pc, #40]	; (163e8 <SeesawGetKeypadCount+0x54>)
   163c0:	2264      	movs	r2, #100	; 0x64
   163c2:	2100      	movs	r1, #0
   163c4:	0018      	movs	r0, r3
   163c6:	4b0a      	ldr	r3, [pc, #40]	; (163f0 <SeesawGetKeypadCount+0x5c>)
   163c8:	4798      	blx	r3
   163ca:	0003      	movs	r3, r0
   163cc:	607b      	str	r3, [r7, #4]

    if (ERROR_NONE != error) {
   163ce:	687b      	ldr	r3, [r7, #4]
   163d0:	2b00      	cmp	r3, #0
   163d2:	d003      	beq.n	163dc <SeesawGetKeypadCount+0x48>
        SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   163d4:	4b07      	ldr	r3, [pc, #28]	; (163f4 <SeesawGetKeypadCount+0x60>)
   163d6:	0018      	movs	r0, r3
   163d8:	4b07      	ldr	r3, [pc, #28]	; (163f8 <SeesawGetKeypadCount+0x64>)
   163da:	4798      	blx	r3
    }
    return count;
   163dc:	1cfb      	adds	r3, r7, #3
   163de:	781b      	ldrb	r3, [r3, #0]
}
   163e0:	0018      	movs	r0, r3
   163e2:	46bd      	mov	sp, r7
   163e4:	b002      	add	sp, #8
   163e6:	bd80      	pop	{r7, pc}
   163e8:	200048b4 	.word	0x200048b4
   163ec:	000370b8 	.word	0x000370b8
   163f0:	00015399 	.word	0x00015399
   163f4:	0003717c 	.word	0x0003717c
   163f8:	0001ea85 	.word	0x0001ea85

000163fc <SeesawReadKeypad>:

 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Use SeesawGetKeypadCount to know how many events are in buffer.
*/
int32_t SeesawReadKeypad(uint8_t *buffer, uint8_t count)
{
   163fc:	b580      	push	{r7, lr}
   163fe:	b084      	sub	sp, #16
   16400:	af00      	add	r7, sp, #0
   16402:	6078      	str	r0, [r7, #4]
   16404:	000a      	movs	r2, r1
   16406:	1cfb      	adds	r3, r7, #3
   16408:	701a      	strb	r2, [r3, #0]
    if (count == 0) return ERROR_NONE;
   1640a:	1cfb      	adds	r3, r7, #3
   1640c:	781b      	ldrb	r3, [r3, #0]
   1640e:	2b00      	cmp	r3, #0
   16410:	d101      	bne.n	16416 <SeesawReadKeypad+0x1a>
   16412:	2300      	movs	r3, #0
   16414:	e026      	b.n	16464 <SeesawReadKeypad+0x68>
    uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_FIFO};
   16416:	2308      	movs	r3, #8
   16418:	18fb      	adds	r3, r7, r3
   1641a:	4a14      	ldr	r2, [pc, #80]	; (1646c <SeesawReadKeypad+0x70>)
   1641c:	8812      	ldrh	r2, [r2, #0]
   1641e:	801a      	strh	r2, [r3, #0]
    seesawData.address = NEO_TRELLIS_ADDR;
   16420:	4b13      	ldr	r3, [pc, #76]	; (16470 <SeesawReadKeypad+0x74>)
   16422:	222e      	movs	r2, #46	; 0x2e
   16424:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = (const uint8_t*) &cmd[0];
   16426:	4b12      	ldr	r3, [pc, #72]	; (16470 <SeesawReadKeypad+0x74>)
   16428:	2208      	movs	r2, #8
   1642a:	18ba      	adds	r2, r7, r2
   1642c:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(cmd);
   1642e:	4b10      	ldr	r3, [pc, #64]	; (16470 <SeesawReadKeypad+0x74>)
   16430:	2202      	movs	r2, #2
   16432:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = buffer;
   16434:	4b0e      	ldr	r3, [pc, #56]	; (16470 <SeesawReadKeypad+0x74>)
   16436:	687a      	ldr	r2, [r7, #4]
   16438:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = count;
   1643a:	1cfb      	adds	r3, r7, #3
   1643c:	781b      	ldrb	r3, [r3, #0]
   1643e:	b29a      	uxth	r2, r3
   16440:	4b0b      	ldr	r3, [pc, #44]	; (16470 <SeesawReadKeypad+0x74>)
   16442:	819a      	strh	r2, [r3, #12]

    int error = I2cReadDataWait(&seesawData, 0, 100);
   16444:	4b0a      	ldr	r3, [pc, #40]	; (16470 <SeesawReadKeypad+0x74>)
   16446:	2264      	movs	r2, #100	; 0x64
   16448:	2100      	movs	r1, #0
   1644a:	0018      	movs	r0, r3
   1644c:	4b09      	ldr	r3, [pc, #36]	; (16474 <SeesawReadKeypad+0x78>)
   1644e:	4798      	blx	r3
   16450:	0003      	movs	r3, r0
   16452:	60fb      	str	r3, [r7, #12]

    if (ERROR_NONE != error) {
   16454:	68fb      	ldr	r3, [r7, #12]
   16456:	2b00      	cmp	r3, #0
   16458:	d003      	beq.n	16462 <SeesawReadKeypad+0x66>
        SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   1645a:	4b07      	ldr	r3, [pc, #28]	; (16478 <SeesawReadKeypad+0x7c>)
   1645c:	0018      	movs	r0, r3
   1645e:	4b07      	ldr	r3, [pc, #28]	; (1647c <SeesawReadKeypad+0x80>)
   16460:	4798      	blx	r3
    }
    return error;
   16462:	68fb      	ldr	r3, [r7, #12]
}
   16464:	0018      	movs	r0, r3
   16466:	46bd      	mov	sp, r7
   16468:	b004      	add	sp, #16
   1646a:	bd80      	pop	{r7, pc}
   1646c:	000371a0 	.word	0x000371a0
   16470:	200048b4 	.word	0x200048b4
   16474:	00015399 	.word	0x00015399
   16478:	0003717c 	.word	0x0003717c
   1647c:	0001ea85 	.word	0x0001ea85

00016480 <SeesawSetLed>:
 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Note that the LEDs wont turn on until you send a "SeesawOrderLedUpdate" command.
         FOR ESE516 Board, please do not turn ALL the LEDs to maximum brightness (255,255,255)!
*/
int32_t SeesawSetLed(uint8_t key, uint8_t red, uint8_t green, uint8_t blue)
{
   16480:	b5b0      	push	{r4, r5, r7, lr}
   16482:	b086      	sub	sp, #24
   16484:	af00      	add	r7, sp, #0
   16486:	0005      	movs	r5, r0
   16488:	000c      	movs	r4, r1
   1648a:	0010      	movs	r0, r2
   1648c:	0019      	movs	r1, r3
   1648e:	1dfb      	adds	r3, r7, #7
   16490:	1c2a      	adds	r2, r5, #0
   16492:	701a      	strb	r2, [r3, #0]
   16494:	1dbb      	adds	r3, r7, #6
   16496:	1c22      	adds	r2, r4, #0
   16498:	701a      	strb	r2, [r3, #0]
   1649a:	1d7b      	adds	r3, r7, #5
   1649c:	1c02      	adds	r2, r0, #0
   1649e:	701a      	strb	r2, [r3, #0]
   164a0:	1d3b      	adds	r3, r7, #4
   164a2:	1c0a      	adds	r2, r1, #0
   164a4:	701a      	strb	r2, [r3, #0]
    uint8_t write_buffer1[7] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_BUF, 0, 0, green, red, blue};
   164a6:	2308      	movs	r3, #8
   164a8:	18fb      	adds	r3, r7, r3
   164aa:	220e      	movs	r2, #14
   164ac:	701a      	strb	r2, [r3, #0]
   164ae:	2308      	movs	r3, #8
   164b0:	18fb      	adds	r3, r7, r3
   164b2:	2204      	movs	r2, #4
   164b4:	705a      	strb	r2, [r3, #1]
   164b6:	2308      	movs	r3, #8
   164b8:	18fb      	adds	r3, r7, r3
   164ba:	2200      	movs	r2, #0
   164bc:	709a      	strb	r2, [r3, #2]
   164be:	2308      	movs	r3, #8
   164c0:	18fb      	adds	r3, r7, r3
   164c2:	2200      	movs	r2, #0
   164c4:	70da      	strb	r2, [r3, #3]
   164c6:	2308      	movs	r3, #8
   164c8:	18fb      	adds	r3, r7, r3
   164ca:	1d7a      	adds	r2, r7, #5
   164cc:	7812      	ldrb	r2, [r2, #0]
   164ce:	711a      	strb	r2, [r3, #4]
   164d0:	2308      	movs	r3, #8
   164d2:	18fb      	adds	r3, r7, r3
   164d4:	1dba      	adds	r2, r7, #6
   164d6:	7812      	ldrb	r2, [r2, #0]
   164d8:	715a      	strb	r2, [r3, #5]
   164da:	2308      	movs	r3, #8
   164dc:	18fb      	adds	r3, r7, r3
   164de:	1d3a      	adds	r2, r7, #4
   164e0:	7812      	ldrb	r2, [r2, #0]
   164e2:	719a      	strb	r2, [r3, #6]

    uint16_t offset = 3 * key;  // RGB LED
   164e4:	1dfb      	adds	r3, r7, #7
   164e6:	781b      	ldrb	r3, [r3, #0]
   164e8:	b29b      	uxth	r3, r3
   164ea:	2216      	movs	r2, #22
   164ec:	18ba      	adds	r2, r7, r2
   164ee:	1c19      	adds	r1, r3, #0
   164f0:	1c0b      	adds	r3, r1, #0
   164f2:	18db      	adds	r3, r3, r3
   164f4:	185b      	adds	r3, r3, r1
   164f6:	8013      	strh	r3, [r2, #0]
    write_buffer1[2] = (offset >> 8);
   164f8:	2316      	movs	r3, #22
   164fa:	18fb      	adds	r3, r7, r3
   164fc:	881b      	ldrh	r3, [r3, #0]
   164fe:	0a1b      	lsrs	r3, r3, #8
   16500:	b29b      	uxth	r3, r3
   16502:	b2da      	uxtb	r2, r3
   16504:	2308      	movs	r3, #8
   16506:	18fb      	adds	r3, r7, r3
   16508:	709a      	strb	r2, [r3, #2]
    write_buffer1[3] = (offset);
   1650a:	2316      	movs	r3, #22
   1650c:	18fb      	adds	r3, r7, r3
   1650e:	881b      	ldrh	r3, [r3, #0]
   16510:	b2da      	uxtb	r2, r3
   16512:	2308      	movs	r3, #8
   16514:	18fb      	adds	r3, r7, r3
   16516:	70da      	strb	r2, [r3, #3]

    seesawData.msgOut = (const uint8_t *)&write_buffer1[0];
   16518:	4b09      	ldr	r3, [pc, #36]	; (16540 <SeesawSetLed+0xc0>)
   1651a:	2208      	movs	r2, #8
   1651c:	18ba      	adds	r2, r7, r2
   1651e:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(write_buffer1);
   16520:	4b07      	ldr	r3, [pc, #28]	; (16540 <SeesawSetLed+0xc0>)
   16522:	2207      	movs	r2, #7
   16524:	81da      	strh	r2, [r3, #14]
    int error = I2cWriteDataWait(&seesawData, 100);
   16526:	4b06      	ldr	r3, [pc, #24]	; (16540 <SeesawSetLed+0xc0>)
   16528:	2164      	movs	r1, #100	; 0x64
   1652a:	0018      	movs	r0, r3
   1652c:	4b05      	ldr	r3, [pc, #20]	; (16544 <SeesawSetLed+0xc4>)
   1652e:	4798      	blx	r3
   16530:	0003      	movs	r3, r0
   16532:	613b      	str	r3, [r7, #16]
    return error;
   16534:	693b      	ldr	r3, [r7, #16]
}
   16536:	0018      	movs	r0, r3
   16538:	46bd      	mov	sp, r7
   1653a:	b006      	add	sp, #24
   1653c:	bdb0      	pop	{r4, r5, r7, pc}
   1653e:	46c0      	nop			; (mov r8, r8)
   16540:	200048b4 	.word	0x200048b4
   16544:	000152c1 	.word	0x000152c1

00016548 <SeesawOrderLedUpdate>:
 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Use "SeesawSetLed" to send LED Data. The data will not be use to update the display until this function has been called!

*/
int32_t SeesawOrderLedUpdate(void)
{
   16548:	b580      	push	{r7, lr}
   1654a:	b082      	sub	sp, #8
   1654c:	af00      	add	r7, sp, #0
    uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};
   1654e:	003b      	movs	r3, r7
   16550:	4a0a      	ldr	r2, [pc, #40]	; (1657c <SeesawOrderLedUpdate+0x34>)
   16552:	8812      	ldrh	r2, [r2, #0]
   16554:	801a      	strh	r2, [r3, #0]

    seesawData.msgOut = (const uint8_t *) &orderBuffer[0];
   16556:	4b0a      	ldr	r3, [pc, #40]	; (16580 <SeesawOrderLedUpdate+0x38>)
   16558:	003a      	movs	r2, r7
   1655a:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(orderBuffer);
   1655c:	4b08      	ldr	r3, [pc, #32]	; (16580 <SeesawOrderLedUpdate+0x38>)
   1655e:	2202      	movs	r2, #2
   16560:	81da      	strh	r2, [r3, #14]
    int error = I2cWriteDataWait(&seesawData, 100);
   16562:	4b07      	ldr	r3, [pc, #28]	; (16580 <SeesawOrderLedUpdate+0x38>)
   16564:	2164      	movs	r1, #100	; 0x64
   16566:	0018      	movs	r0, r3
   16568:	4b06      	ldr	r3, [pc, #24]	; (16584 <SeesawOrderLedUpdate+0x3c>)
   1656a:	4798      	blx	r3
   1656c:	0003      	movs	r3, r0
   1656e:	607b      	str	r3, [r7, #4]
    return error;
   16570:	687b      	ldr	r3, [r7, #4]
}
   16572:	0018      	movs	r0, r3
   16574:	46bd      	mov	sp, r7
   16576:	b002      	add	sp, #8
   16578:	bd80      	pop	{r7, pc}
   1657a:	46c0      	nop			; (mov r8, r8)
   1657c:	000371a4 	.word	0x000371a4
   16580:	200048b4 	.word	0x200048b4
   16584:	000152c1 	.word	0x000152c1

00016588 <vUiHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vUiHandlerTask(void *pvParameters)
{
   16588:	b590      	push	{r4, r7, lr}
   1658a:	b089      	sub	sp, #36	; 0x24
   1658c:	af02      	add	r7, sp, #8
   1658e:	6078      	str	r0, [r7, #4]
    // Do initialization code here
    SerialConsoleWriteString("UI Task Started!\r\n");
   16590:	4b99      	ldr	r3, [pc, #612]	; (167f8 <vUiHandlerTask+0x270>)
   16592:	0018      	movs	r0, r3
   16594:	4b99      	ldr	r3, [pc, #612]	; (167fc <vUiHandlerTask+0x274>)
   16596:	4798      	blx	r3
    uiState = UI_STATE_IGNORE_PRESSES;  // Initial state
   16598:	4b99      	ldr	r3, [pc, #612]	; (16800 <vUiHandlerTask+0x278>)
   1659a:	2201      	movs	r2, #1
   1659c:	701a      	strb	r2, [r3, #0]

    // Graphics Test - Students to uncomment to test out the OLED driver if you are using it! 
	
    gfx_mono_init();
   1659e:	4b99      	ldr	r3, [pc, #612]	; (16804 <vUiHandlerTask+0x27c>)
   165a0:	4798      	blx	r3
    gfx_mono_draw_line(0, 0, 64, 48, GFX_PIXEL_SET);
   165a2:	2301      	movs	r3, #1
   165a4:	9300      	str	r3, [sp, #0]
   165a6:	2330      	movs	r3, #48	; 0x30
   165a8:	2240      	movs	r2, #64	; 0x40
   165aa:	2100      	movs	r1, #0
   165ac:	2000      	movs	r0, #0
   165ae:	4c96      	ldr	r4, [pc, #600]	; (16808 <vUiHandlerTask+0x280>)
   165b0:	47a0      	blx	r4
    gfx_mono_draw_filled_circle(54, 24, 10, GFX_PIXEL_SET, GFX_WHOLE);
   165b2:	23ff      	movs	r3, #255	; 0xff
   165b4:	9300      	str	r3, [sp, #0]
   165b6:	2301      	movs	r3, #1
   165b8:	220a      	movs	r2, #10
   165ba:	2118      	movs	r1, #24
   165bc:	2036      	movs	r0, #54	; 0x36
   165be:	4c93      	ldr	r4, [pc, #588]	; (1680c <vUiHandlerTask+0x284>)
   165c0:	47a0      	blx	r4
	gfx_mono_draw_string("ESE516",0,0, &sysfont);
   165c2:	4b93      	ldr	r3, [pc, #588]	; (16810 <vUiHandlerTask+0x288>)
   165c4:	4893      	ldr	r0, [pc, #588]	; (16814 <vUiHandlerTask+0x28c>)
   165c6:	2200      	movs	r2, #0
   165c8:	2100      	movs	r1, #0
   165ca:	4c93      	ldr	r4, [pc, #588]	; (16818 <vUiHandlerTask+0x290>)
   165cc:	47a0      	blx	r4
	

    // Here we start the loop for the UI State Machine
    while (1) {
        switch (uiState) {
   165ce:	4b8c      	ldr	r3, [pc, #560]	; (16800 <vUiHandlerTask+0x278>)
   165d0:	781b      	ldrb	r3, [r3, #0]
   165d2:	2b01      	cmp	r3, #1
   165d4:	d100      	bne.n	165d8 <vUiHandlerTask+0x50>
   165d6:	e107      	b.n	167e8 <vUiHandlerTask+0x260>
   165d8:	2b02      	cmp	r3, #2
   165da:	d002      	beq.n	165e2 <vUiHandlerTask+0x5a>
   165dc:	2b00      	cmp	r3, #0
   165de:	d06e      	beq.n	166be <vUiHandlerTask+0x136>
   165e0:	e0fe      	b.n	167e0 <vUiHandlerTask+0x258>
            }

            case (UI_STATE_SHOW_MOVES): {
                // Set initial state variable that will be used on the
                // UI_STATE_Handle_Buttons and need to be initialized once
                pressedKeys = 0;  // Set number of keys pressed by player to 0.
   165e2:	4b8e      	ldr	r3, [pc, #568]	; (1681c <vUiHandlerTask+0x294>)
   165e4:	2200      	movs	r2, #0
   165e6:	701a      	strb	r2, [r3, #0]
                keysToPress = 1;  // Set as an example to 1. STUDENTS should change this
   165e8:	4b8d      	ldr	r3, [pc, #564]	; (16820 <vUiHandlerTask+0x298>)
   165ea:	2201      	movs	r2, #1
   165ec:	701a      	strb	r2, [r3, #0]
                                  // to the number of key presses needed.
                memset(gamePacketOut.game, 0xff,
   165ee:	4b8d      	ldr	r3, [pc, #564]	; (16824 <vUiHandlerTask+0x29c>)
   165f0:	2214      	movs	r2, #20
   165f2:	21ff      	movs	r1, #255	; 0xff
   165f4:	0018      	movs	r0, r3
   165f6:	4b8c      	ldr	r3, [pc, #560]	; (16828 <vUiHandlerTask+0x2a0>)
   165f8:	4798      	blx	r3
                       sizeof(gamePacketOut.game));  // Erase gamePacketOut to an initial state
                playIsDone = false;                  // Set play to false
   165fa:	4b8c      	ldr	r3, [pc, #560]	; (1682c <vUiHandlerTask+0x2a4>)
   165fc:	2200      	movs	r2, #0
   165fe:	701a      	strb	r2, [r3, #0]
                uint8_t presses = SeesawGetKeypadCount();
   16600:	2317      	movs	r3, #23
   16602:	18fc      	adds	r4, r7, r3
   16604:	4b8a      	ldr	r3, [pc, #552]	; (16830 <vUiHandlerTask+0x2a8>)
   16606:	4798      	blx	r3
   16608:	0003      	movs	r3, r0
   1660a:	7023      	strb	r3, [r4, #0]
                if (presses >= BUTTON_PRESSES_MAX) presses = BUTTON_PRESSES_MAX;
   1660c:	2317      	movs	r3, #23
   1660e:	18fb      	adds	r3, r7, r3
   16610:	781b      	ldrb	r3, [r3, #0]
   16612:	2b0f      	cmp	r3, #15
   16614:	d903      	bls.n	1661e <vUiHandlerTask+0x96>
   16616:	2317      	movs	r3, #23
   16618:	18fb      	adds	r3, r7, r3
   1661a:	2210      	movs	r2, #16
   1661c:	701a      	strb	r2, [r3, #0]
                if (presses != 0)
   1661e:	2317      	movs	r3, #23
   16620:	18fb      	adds	r3, r7, r3
   16622:	781b      	ldrb	r3, [r3, #0]
   16624:	2b00      	cmp	r3, #0
   16626:	d007      	beq.n	16638 <vUiHandlerTask+0xb0>
                    SeesawReadKeypad(buttons,
   16628:	2317      	movs	r3, #23
   1662a:	18fb      	adds	r3, r7, r3
   1662c:	781a      	ldrb	r2, [r3, #0]
   1662e:	4b81      	ldr	r3, [pc, #516]	; (16834 <vUiHandlerTask+0x2ac>)
   16630:	0011      	movs	r1, r2
   16632:	0018      	movs	r0, r3
   16634:	4b80      	ldr	r3, [pc, #512]	; (16838 <vUiHandlerTask+0x2b0>)
   16636:	4798      	blx	r3
                                     presses);  // Empty Seesaw buffer just in case
                                                // it has latent presses on it!
                memset(buttons, 0, BUTTON_PRESSES_MAX);
   16638:	4b7e      	ldr	r3, [pc, #504]	; (16834 <vUiHandlerTask+0x2ac>)
   1663a:	2210      	movs	r2, #16
   1663c:	2100      	movs	r1, #0
   1663e:	0018      	movs	r0, r3
   16640:	4b79      	ldr	r3, [pc, #484]	; (16828 <vUiHandlerTask+0x2a0>)
   16642:	4798      	blx	r3
                // the message gets longer might be more fun! After you finish showing
                // the move should go to state UI_STATE_HANDLE_BUTTONS

                // In the beginner example we turn LED0 and LED15 will turn on for 500
                // ms then we go to UI_STATE_HANDLE_BUTTONS
                SeesawSetLed(0, red, green, blue);  // Turn button 1 on
   16644:	4b7d      	ldr	r3, [pc, #500]	; (1683c <vUiHandlerTask+0x2b4>)
   16646:	781b      	ldrb	r3, [r3, #0]
   16648:	b2d9      	uxtb	r1, r3
   1664a:	4b7d      	ldr	r3, [pc, #500]	; (16840 <vUiHandlerTask+0x2b8>)
   1664c:	781b      	ldrb	r3, [r3, #0]
   1664e:	b2da      	uxtb	r2, r3
   16650:	4b7c      	ldr	r3, [pc, #496]	; (16844 <vUiHandlerTask+0x2bc>)
   16652:	781b      	ldrb	r3, [r3, #0]
   16654:	b2db      	uxtb	r3, r3
   16656:	2000      	movs	r0, #0
   16658:	4c7b      	ldr	r4, [pc, #492]	; (16848 <vUiHandlerTask+0x2c0>)
   1665a:	47a0      	blx	r4
                SeesawOrderLedUpdate();
   1665c:	4b7b      	ldr	r3, [pc, #492]	; (1684c <vUiHandlerTask+0x2c4>)
   1665e:	4798      	blx	r3
                vTaskDelay(1000);
   16660:	23fa      	movs	r3, #250	; 0xfa
   16662:	009b      	lsls	r3, r3, #2
   16664:	0018      	movs	r0, r3
   16666:	4b7a      	ldr	r3, [pc, #488]	; (16850 <vUiHandlerTask+0x2c8>)
   16668:	4798      	blx	r3
                SeesawSetLed(0, 0, 0, 0);            // Turn button 0 off
   1666a:	2300      	movs	r3, #0
   1666c:	2200      	movs	r2, #0
   1666e:	2100      	movs	r1, #0
   16670:	2000      	movs	r0, #0
   16672:	4c75      	ldr	r4, [pc, #468]	; (16848 <vUiHandlerTask+0x2c0>)
   16674:	47a0      	blx	r4
                SeesawSetLed(15, red, green, blue);  // Turn button 15 on
   16676:	4b71      	ldr	r3, [pc, #452]	; (1683c <vUiHandlerTask+0x2b4>)
   16678:	781b      	ldrb	r3, [r3, #0]
   1667a:	b2d9      	uxtb	r1, r3
   1667c:	4b70      	ldr	r3, [pc, #448]	; (16840 <vUiHandlerTask+0x2b8>)
   1667e:	781b      	ldrb	r3, [r3, #0]
   16680:	b2da      	uxtb	r2, r3
   16682:	4b70      	ldr	r3, [pc, #448]	; (16844 <vUiHandlerTask+0x2bc>)
   16684:	781b      	ldrb	r3, [r3, #0]
   16686:	b2db      	uxtb	r3, r3
   16688:	200f      	movs	r0, #15
   1668a:	4c6f      	ldr	r4, [pc, #444]	; (16848 <vUiHandlerTask+0x2c0>)
   1668c:	47a0      	blx	r4
                SeesawOrderLedUpdate();
   1668e:	4b6f      	ldr	r3, [pc, #444]	; (1684c <vUiHandlerTask+0x2c4>)
   16690:	4798      	blx	r3
                vTaskDelay(1000);
   16692:	23fa      	movs	r3, #250	; 0xfa
   16694:	009b      	lsls	r3, r3, #2
   16696:	0018      	movs	r0, r3
   16698:	4b6d      	ldr	r3, [pc, #436]	; (16850 <vUiHandlerTask+0x2c8>)
   1669a:	4798      	blx	r3
                SeesawSetLed(15, 0, 0, 0);  // Turn button 15 off
   1669c:	2300      	movs	r3, #0
   1669e:	2200      	movs	r2, #0
   166a0:	2100      	movs	r1, #0
   166a2:	200f      	movs	r0, #15
   166a4:	4c68      	ldr	r4, [pc, #416]	; (16848 <vUiHandlerTask+0x2c0>)
   166a6:	47a0      	blx	r4
                SeesawOrderLedUpdate();
   166a8:	4b68      	ldr	r3, [pc, #416]	; (1684c <vUiHandlerTask+0x2c4>)
   166aa:	4798      	blx	r3
                vTaskDelay(1000);
   166ac:	23fa      	movs	r3, #250	; 0xfa
   166ae:	009b      	lsls	r3, r3, #2
   166b0:	0018      	movs	r0, r3
   166b2:	4b67      	ldr	r3, [pc, #412]	; (16850 <vUiHandlerTask+0x2c8>)
   166b4:	4798      	blx	r3
                uiState = UI_STATE_HANDLE_BUTTONS;
   166b6:	4b52      	ldr	r3, [pc, #328]	; (16800 <vUiHandlerTask+0x278>)
   166b8:	2200      	movs	r2, #0
   166ba:	701a      	strb	r2, [r3, #0]

                break;
   166bc:	e097      	b.n	167ee <vUiHandlerTask+0x266>
                // should be stored on "gamePacketOut". The keypresses that should count
                // are when the player RELEASES the button.

                // In this example, we return after only one button press!

                uint8_t numPresses = SeesawGetKeypadCount();
   166be:	2316      	movs	r3, #22
   166c0:	18fc      	adds	r4, r7, r3
   166c2:	4b5b      	ldr	r3, [pc, #364]	; (16830 <vUiHandlerTask+0x2a8>)
   166c4:	4798      	blx	r3
   166c6:	0003      	movs	r3, r0
   166c8:	7023      	strb	r3, [r4, #0]
                memset(buttons, 0, BUTTON_PRESSES_MAX);
   166ca:	4b5a      	ldr	r3, [pc, #360]	; (16834 <vUiHandlerTask+0x2ac>)
   166cc:	2210      	movs	r2, #16
   166ce:	2100      	movs	r1, #0
   166d0:	0018      	movs	r0, r3
   166d2:	4b55      	ldr	r3, [pc, #340]	; (16828 <vUiHandlerTask+0x2a0>)
   166d4:	4798      	blx	r3

                if (numPresses >= BUTTON_PRESSES_MAX) {
   166d6:	2316      	movs	r3, #22
   166d8:	18fb      	adds	r3, r7, r3
   166da:	781b      	ldrb	r3, [r3, #0]
   166dc:	2b0f      	cmp	r3, #15
   166de:	d903      	bls.n	166e8 <vUiHandlerTask+0x160>
                    numPresses = BUTTON_PRESSES_MAX;
   166e0:	2316      	movs	r3, #22
   166e2:	18fb      	adds	r3, r7, r3
   166e4:	2210      	movs	r2, #16
   166e6:	701a      	strb	r2, [r3, #0]
                }
                if (numPresses != 0 && ERROR_NONE == SeesawReadKeypad(buttons, numPresses)) {
   166e8:	2316      	movs	r3, #22
   166ea:	18fb      	adds	r3, r7, r3
   166ec:	781b      	ldrb	r3, [r3, #0]
   166ee:	2b00      	cmp	r3, #0
   166f0:	d065      	beq.n	167be <vUiHandlerTask+0x236>
   166f2:	2316      	movs	r3, #22
   166f4:	18fb      	adds	r3, r7, r3
   166f6:	781a      	ldrb	r2, [r3, #0]
   166f8:	4b4e      	ldr	r3, [pc, #312]	; (16834 <vUiHandlerTask+0x2ac>)
   166fa:	0011      	movs	r1, r2
   166fc:	0018      	movs	r0, r3
   166fe:	4b4e      	ldr	r3, [pc, #312]	; (16838 <vUiHandlerTask+0x2b0>)
   16700:	4798      	blx	r3
   16702:	1e03      	subs	r3, r0, #0
   16704:	d15b      	bne.n	167be <vUiHandlerTask+0x236>
                    // Process Buttons
                    for (int iter = 0; iter < numPresses; iter++) {
   16706:	2300      	movs	r3, #0
   16708:	613b      	str	r3, [r7, #16]
   1670a:	e050      	b.n	167ae <vUiHandlerTask+0x226>
                        uint8_t keynum = NEO_TRELLIS_SEESAW_KEY((buttons[iter] & 0xFD) >> 2);
   1670c:	4a49      	ldr	r2, [pc, #292]	; (16834 <vUiHandlerTask+0x2ac>)
   1670e:	693b      	ldr	r3, [r7, #16]
   16710:	18d3      	adds	r3, r2, r3
   16712:	781b      	ldrb	r3, [r3, #0]
   16714:	089b      	lsrs	r3, r3, #2
   16716:	b2db      	uxtb	r3, r3
   16718:	2b00      	cmp	r3, #0
   1671a:	da00      	bge.n	1671e <vUiHandlerTask+0x196>
   1671c:	3307      	adds	r3, #7
   1671e:	10db      	asrs	r3, r3, #3
   16720:	b2db      	uxtb	r3, r3
   16722:	009b      	lsls	r3, r3, #2
   16724:	b2d9      	uxtb	r1, r3
   16726:	4a43      	ldr	r2, [pc, #268]	; (16834 <vUiHandlerTask+0x2ac>)
   16728:	693b      	ldr	r3, [r7, #16]
   1672a:	18d3      	adds	r3, r2, r3
   1672c:	781b      	ldrb	r3, [r3, #0]
   1672e:	089b      	lsrs	r3, r3, #2
   16730:	b2db      	uxtb	r3, r3
   16732:	2207      	movs	r2, #7
   16734:	4013      	ands	r3, r2
   16736:	b2da      	uxtb	r2, r3
   16738:	230f      	movs	r3, #15
   1673a:	18fb      	adds	r3, r7, r3
   1673c:	188a      	adds	r2, r1, r2
   1673e:	701a      	strb	r2, [r3, #0]
                        uint8_t actionButton = buttons[iter] & 0x03;
   16740:	4a3c      	ldr	r2, [pc, #240]	; (16834 <vUiHandlerTask+0x2ac>)
   16742:	693b      	ldr	r3, [r7, #16]
   16744:	18d3      	adds	r3, r2, r3
   16746:	781a      	ldrb	r2, [r3, #0]
   16748:	230e      	movs	r3, #14
   1674a:	18fb      	adds	r3, r7, r3
   1674c:	2103      	movs	r1, #3
   1674e:	400a      	ands	r2, r1
   16750:	701a      	strb	r2, [r3, #0]
                        if (actionButton == 0x03) {
   16752:	230e      	movs	r3, #14
   16754:	18fb      	adds	r3, r7, r3
   16756:	781b      	ldrb	r3, [r3, #0]
   16758:	2b03      	cmp	r3, #3
   1675a:	d10f      	bne.n	1677c <vUiHandlerTask+0x1f4>
                            SeesawSetLed(keynum, red, green, blue);
   1675c:	4b37      	ldr	r3, [pc, #220]	; (1683c <vUiHandlerTask+0x2b4>)
   1675e:	781b      	ldrb	r3, [r3, #0]
   16760:	b2d9      	uxtb	r1, r3
   16762:	4b37      	ldr	r3, [pc, #220]	; (16840 <vUiHandlerTask+0x2b8>)
   16764:	781b      	ldrb	r3, [r3, #0]
   16766:	b2da      	uxtb	r2, r3
   16768:	4b36      	ldr	r3, [pc, #216]	; (16844 <vUiHandlerTask+0x2bc>)
   1676a:	781b      	ldrb	r3, [r3, #0]
   1676c:	b2dc      	uxtb	r4, r3
   1676e:	230f      	movs	r3, #15
   16770:	18fb      	adds	r3, r7, r3
   16772:	7818      	ldrb	r0, [r3, #0]
   16774:	0023      	movs	r3, r4
   16776:	4c34      	ldr	r4, [pc, #208]	; (16848 <vUiHandlerTask+0x2c0>)
   16778:	47a0      	blx	r4
   1677a:	e015      	b.n	167a8 <vUiHandlerTask+0x220>
                        } else {
                            SeesawSetLed(keynum, 0, 0, 0);
   1677c:	230f      	movs	r3, #15
   1677e:	18fb      	adds	r3, r7, r3
   16780:	7818      	ldrb	r0, [r3, #0]
   16782:	2300      	movs	r3, #0
   16784:	2200      	movs	r2, #0
   16786:	2100      	movs	r1, #0
   16788:	4c2f      	ldr	r4, [pc, #188]	; (16848 <vUiHandlerTask+0x2c0>)
   1678a:	47a0      	blx	r4
                            // Button released! Count this into the buttons pressed by user.
                            gamePacketOut.game[pressedKeys] = keynum;
   1678c:	4b23      	ldr	r3, [pc, #140]	; (1681c <vUiHandlerTask+0x294>)
   1678e:	781b      	ldrb	r3, [r3, #0]
   16790:	0019      	movs	r1, r3
   16792:	4b24      	ldr	r3, [pc, #144]	; (16824 <vUiHandlerTask+0x29c>)
   16794:	220f      	movs	r2, #15
   16796:	18ba      	adds	r2, r7, r2
   16798:	7812      	ldrb	r2, [r2, #0]
   1679a:	545a      	strb	r2, [r3, r1]
                            pressedKeys++;
   1679c:	4b1f      	ldr	r3, [pc, #124]	; (1681c <vUiHandlerTask+0x294>)
   1679e:	781b      	ldrb	r3, [r3, #0]
   167a0:	3301      	adds	r3, #1
   167a2:	b2da      	uxtb	r2, r3
   167a4:	4b1d      	ldr	r3, [pc, #116]	; (1681c <vUiHandlerTask+0x294>)
   167a6:	701a      	strb	r2, [r3, #0]
                    for (int iter = 0; iter < numPresses; iter++) {
   167a8:	693b      	ldr	r3, [r7, #16]
   167aa:	3301      	adds	r3, #1
   167ac:	613b      	str	r3, [r7, #16]
   167ae:	2316      	movs	r3, #22
   167b0:	18fb      	adds	r3, r7, r3
   167b2:	781a      	ldrb	r2, [r3, #0]
   167b4:	693b      	ldr	r3, [r7, #16]
   167b6:	429a      	cmp	r2, r3
   167b8:	dca8      	bgt.n	1670c <vUiHandlerTask+0x184>
                        }
                    }
                    SeesawOrderLedUpdate();
   167ba:	4b24      	ldr	r3, [pc, #144]	; (1684c <vUiHandlerTask+0x2c4>)
   167bc:	4798      	blx	r3
                }

                // Check if we are done!
                if (pressedKeys >= keysToPress || pressedKeys >= GAME_SIZE) {
   167be:	4b17      	ldr	r3, [pc, #92]	; (1681c <vUiHandlerTask+0x294>)
   167c0:	781a      	ldrb	r2, [r3, #0]
   167c2:	4b17      	ldr	r3, [pc, #92]	; (16820 <vUiHandlerTask+0x298>)
   167c4:	781b      	ldrb	r3, [r3, #0]
   167c6:	429a      	cmp	r2, r3
   167c8:	d203      	bcs.n	167d2 <vUiHandlerTask+0x24a>
   167ca:	4b14      	ldr	r3, [pc, #80]	; (1681c <vUiHandlerTask+0x294>)
   167cc:	781b      	ldrb	r3, [r3, #0]
   167ce:	2b13      	cmp	r3, #19
   167d0:	d90c      	bls.n	167ec <vUiHandlerTask+0x264>
                    // Tell control gamePacketOut is ready to be send out AND go back to
                    // UI_STATE_IGNORE_PRESSES
                    playIsDone = true;
   167d2:	4b16      	ldr	r3, [pc, #88]	; (1682c <vUiHandlerTask+0x2a4>)
   167d4:	2201      	movs	r2, #1
   167d6:	701a      	strb	r2, [r3, #0]
                    uiState = UI_STATE_IGNORE_PRESSES;
   167d8:	4b09      	ldr	r3, [pc, #36]	; (16800 <vUiHandlerTask+0x278>)
   167da:	2201      	movs	r2, #1
   167dc:	701a      	strb	r2, [r3, #0]
                }

                break;
   167de:	e005      	b.n	167ec <vUiHandlerTask+0x264>
            }

            default:  // In case of unforseen error, it is always good to sent state
                      // machine to an initial state.
                uiState = UI_STATE_HANDLE_BUTTONS;
   167e0:	4b07      	ldr	r3, [pc, #28]	; (16800 <vUiHandlerTask+0x278>)
   167e2:	2200      	movs	r2, #0
   167e4:	701a      	strb	r2, [r3, #0]
                break;
   167e6:	e002      	b.n	167ee <vUiHandlerTask+0x266>
                break;
   167e8:	46c0      	nop			; (mov r8, r8)
   167ea:	e000      	b.n	167ee <vUiHandlerTask+0x266>
                break;
   167ec:	46c0      	nop			; (mov r8, r8)
        }

        // After execution, you can put a thread to sleep for some time.
        vTaskDelay(50);
   167ee:	2032      	movs	r0, #50	; 0x32
   167f0:	4b17      	ldr	r3, [pc, #92]	; (16850 <vUiHandlerTask+0x2c8>)
   167f2:	4798      	blx	r3
        switch (uiState) {
   167f4:	e6eb      	b.n	165ce <vUiHandlerTask+0x46>
   167f6:	46c0      	nop			; (mov r8, r8)
   167f8:	000371cc 	.word	0x000371cc
   167fc:	0001ea85 	.word	0x0001ea85
   16800:	200048fc 	.word	0x200048fc
   16804:	00012f19 	.word	0x00012f19
   16808:	0001266d 	.word	0x0001266d
   1680c:	00012961 	.word	0x00012961
   16810:	20000000 	.word	0x20000000
   16814:	000371e0 	.word	0x000371e0
   16818:	00012dbd 	.word	0x00012dbd
   1681c:	20000621 	.word	0x20000621
   16820:	20000622 	.word	0x20000622
   16824:	200048c4 	.word	0x200048c4
   16828:	000355ef 	.word	0x000355ef
   1682c:	20000623 	.word	0x20000623
   16830:	00016395 	.word	0x00016395
   16834:	200048ec 	.word	0x200048ec
   16838:	000163fd 	.word	0x000163fd
   1683c:	20000620 	.word	0x20000620
   16840:	2000002c 	.word	0x2000002c
   16844:	2000002d 	.word	0x2000002d
   16848:	00016481 	.word	0x00016481
   1684c:	00016549 	.word	0x00016549
   16850:	0001ce31 	.word	0x0001ce31

00016854 <UiOrderShowMoves>:

/******************************************************************************
 * Functions
 ******************************************************************************/
void UiOrderShowMoves(struct GameDataPacket *packetIn)
{
   16854:	b580      	push	{r7, lr}
   16856:	b082      	sub	sp, #8
   16858:	af00      	add	r7, sp, #0
   1685a:	6078      	str	r0, [r7, #4]
    memcpy(&gamePacketIn, packetIn, sizeof(gamePacketIn));
   1685c:	4a08      	ldr	r2, [pc, #32]	; (16880 <UiOrderShowMoves+0x2c>)
   1685e:	687b      	ldr	r3, [r7, #4]
   16860:	0010      	movs	r0, r2
   16862:	0019      	movs	r1, r3
   16864:	2314      	movs	r3, #20
   16866:	001a      	movs	r2, r3
   16868:	4b06      	ldr	r3, [pc, #24]	; (16884 <UiOrderShowMoves+0x30>)
   1686a:	4798      	blx	r3
    uiState = UI_STATE_SHOW_MOVES;
   1686c:	4b06      	ldr	r3, [pc, #24]	; (16888 <UiOrderShowMoves+0x34>)
   1686e:	2202      	movs	r2, #2
   16870:	701a      	strb	r2, [r3, #0]
    playIsDone = false;  // Set play to false
   16872:	4b06      	ldr	r3, [pc, #24]	; (1688c <UiOrderShowMoves+0x38>)
   16874:	2200      	movs	r2, #0
   16876:	701a      	strb	r2, [r3, #0]
}
   16878:	46c0      	nop			; (mov r8, r8)
   1687a:	46bd      	mov	sp, r7
   1687c:	b002      	add	sp, #8
   1687e:	bd80      	pop	{r7, pc}
   16880:	200048d8 	.word	0x200048d8
   16884:	000355b9 	.word	0x000355b9
   16888:	200048fc 	.word	0x200048fc
   1688c:	20000623 	.word	0x20000623

00016890 <UiPlayIsDone>:

bool UiPlayIsDone(void)
{
   16890:	b580      	push	{r7, lr}
   16892:	af00      	add	r7, sp, #0
    return playIsDone;
   16894:	4b02      	ldr	r3, [pc, #8]	; (168a0 <UiPlayIsDone+0x10>)
   16896:	781b      	ldrb	r3, [r3, #0]
}
   16898:	0018      	movs	r0, r3
   1689a:	46bd      	mov	sp, r7
   1689c:	bd80      	pop	{r7, pc}
   1689e:	46c0      	nop			; (mov r8, r8)
   168a0:	20000623 	.word	0x20000623

000168a4 <UiGetGamePacketOut>:

struct GameDataPacket *UiGetGamePacketOut(void)
{
   168a4:	b580      	push	{r7, lr}
   168a6:	af00      	add	r7, sp, #0
    return &gamePacketOut;
   168a8:	4b01      	ldr	r3, [pc, #4]	; (168b0 <UiGetGamePacketOut+0xc>)
}
   168aa:	0018      	movs	r0, r3
   168ac:	46bd      	mov	sp, r7
   168ae:	bd80      	pop	{r7, pc}
   168b0:	200048c4 	.word	0x200048c4

000168b4 <UIChangeColors>:
 * @return
 * @note

*/
void UIChangeColors(uint8_t r, uint8_t g, uint8_t b)
{
   168b4:	b590      	push	{r4, r7, lr}
   168b6:	b083      	sub	sp, #12
   168b8:	af00      	add	r7, sp, #0
   168ba:	0004      	movs	r4, r0
   168bc:	0008      	movs	r0, r1
   168be:	0011      	movs	r1, r2
   168c0:	1dfb      	adds	r3, r7, #7
   168c2:	1c22      	adds	r2, r4, #0
   168c4:	701a      	strb	r2, [r3, #0]
   168c6:	1dbb      	adds	r3, r7, #6
   168c8:	1c02      	adds	r2, r0, #0
   168ca:	701a      	strb	r2, [r3, #0]
   168cc:	1d7b      	adds	r3, r7, #5
   168ce:	1c0a      	adds	r2, r1, #0
   168d0:	701a      	strb	r2, [r3, #0]
    red = r;
   168d2:	4b08      	ldr	r3, [pc, #32]	; (168f4 <UIChangeColors+0x40>)
   168d4:	1dfa      	adds	r2, r7, #7
   168d6:	7812      	ldrb	r2, [r2, #0]
   168d8:	701a      	strb	r2, [r3, #0]
    green = g;
   168da:	4b07      	ldr	r3, [pc, #28]	; (168f8 <UIChangeColors+0x44>)
   168dc:	1dba      	adds	r2, r7, #6
   168de:	7812      	ldrb	r2, [r2, #0]
   168e0:	701a      	strb	r2, [r3, #0]
    blue = b;
   168e2:	4b06      	ldr	r3, [pc, #24]	; (168fc <UIChangeColors+0x48>)
   168e4:	1d7a      	adds	r2, r7, #5
   168e6:	7812      	ldrb	r2, [r2, #0]
   168e8:	701a      	strb	r2, [r3, #0]
}
   168ea:	46c0      	nop			; (mov r8, r8)
   168ec:	46bd      	mov	sp, r7
   168ee:	b003      	add	sp, #12
   168f0:	bd90      	pop	{r4, r7, pc}
   168f2:	46c0      	nop			; (mov r8, r8)
   168f4:	20000620 	.word	0x20000620
   168f8:	2000002c 	.word	0x2000002c
   168fc:	2000002d 	.word	0x2000002d

00016900 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   16900:	b580      	push	{r7, lr}
   16902:	b084      	sub	sp, #16
   16904:	af00      	add	r7, sp, #0
   16906:	0002      	movs	r2, r0
   16908:	1dfb      	adds	r3, r7, #7
   1690a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   1690c:	230f      	movs	r3, #15
   1690e:	18fb      	adds	r3, r7, r3
   16910:	1dfa      	adds	r2, r7, #7
   16912:	7812      	ldrb	r2, [r2, #0]
   16914:	09d2      	lsrs	r2, r2, #7
   16916:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   16918:	230e      	movs	r3, #14
   1691a:	18fb      	adds	r3, r7, r3
   1691c:	1dfa      	adds	r2, r7, #7
   1691e:	7812      	ldrb	r2, [r2, #0]
   16920:	0952      	lsrs	r2, r2, #5
   16922:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   16924:	4b0d      	ldr	r3, [pc, #52]	; (1695c <system_pinmux_get_group_from_gpio_pin+0x5c>)
   16926:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   16928:	230f      	movs	r3, #15
   1692a:	18fb      	adds	r3, r7, r3
   1692c:	781b      	ldrb	r3, [r3, #0]
   1692e:	2b00      	cmp	r3, #0
   16930:	d10f      	bne.n	16952 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   16932:	230f      	movs	r3, #15
   16934:	18fb      	adds	r3, r7, r3
   16936:	781b      	ldrb	r3, [r3, #0]
   16938:	009b      	lsls	r3, r3, #2
   1693a:	2210      	movs	r2, #16
   1693c:	4694      	mov	ip, r2
   1693e:	44bc      	add	ip, r7
   16940:	4463      	add	r3, ip
   16942:	3b08      	subs	r3, #8
   16944:	681a      	ldr	r2, [r3, #0]
   16946:	230e      	movs	r3, #14
   16948:	18fb      	adds	r3, r7, r3
   1694a:	781b      	ldrb	r3, [r3, #0]
   1694c:	01db      	lsls	r3, r3, #7
   1694e:	18d3      	adds	r3, r2, r3
   16950:	e000      	b.n	16954 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   16952:	2300      	movs	r3, #0
	}
}
   16954:	0018      	movs	r0, r3
   16956:	46bd      	mov	sp, r7
   16958:	b004      	add	sp, #16
   1695a:	bd80      	pop	{r7, pc}
   1695c:	41004400 	.word	0x41004400

00016960 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   16960:	b580      	push	{r7, lr}
   16962:	b082      	sub	sp, #8
   16964:	af00      	add	r7, sp, #0
   16966:	0002      	movs	r2, r0
   16968:	1dfb      	adds	r3, r7, #7
   1696a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   1696c:	1dfb      	adds	r3, r7, #7
   1696e:	781b      	ldrb	r3, [r3, #0]
   16970:	0018      	movs	r0, r3
   16972:	4b03      	ldr	r3, [pc, #12]	; (16980 <port_get_group_from_gpio_pin+0x20>)
   16974:	4798      	blx	r3
   16976:	0003      	movs	r3, r0
}
   16978:	0018      	movs	r0, r3
   1697a:	46bd      	mov	sp, r7
   1697c:	b002      	add	sp, #8
   1697e:	bd80      	pop	{r7, pc}
   16980:	00016901 	.word	0x00016901

00016984 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   16984:	b580      	push	{r7, lr}
   16986:	b084      	sub	sp, #16
   16988:	af00      	add	r7, sp, #0
   1698a:	0002      	movs	r2, r0
   1698c:	1dfb      	adds	r3, r7, #7
   1698e:	701a      	strb	r2, [r3, #0]
   16990:	1dbb      	adds	r3, r7, #6
   16992:	1c0a      	adds	r2, r1, #0
   16994:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   16996:	1dfb      	adds	r3, r7, #7
   16998:	781b      	ldrb	r3, [r3, #0]
   1699a:	0018      	movs	r0, r3
   1699c:	4b0d      	ldr	r3, [pc, #52]	; (169d4 <port_pin_set_output_level+0x50>)
   1699e:	4798      	blx	r3
   169a0:	0003      	movs	r3, r0
   169a2:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   169a4:	1dfb      	adds	r3, r7, #7
   169a6:	781b      	ldrb	r3, [r3, #0]
   169a8:	221f      	movs	r2, #31
   169aa:	4013      	ands	r3, r2
   169ac:	2201      	movs	r2, #1
   169ae:	409a      	lsls	r2, r3
   169b0:	0013      	movs	r3, r2
   169b2:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   169b4:	1dbb      	adds	r3, r7, #6
   169b6:	781b      	ldrb	r3, [r3, #0]
   169b8:	2b00      	cmp	r3, #0
   169ba:	d003      	beq.n	169c4 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   169bc:	68fb      	ldr	r3, [r7, #12]
   169be:	68ba      	ldr	r2, [r7, #8]
   169c0:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   169c2:	e002      	b.n	169ca <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   169c4:	68fb      	ldr	r3, [r7, #12]
   169c6:	68ba      	ldr	r2, [r7, #8]
   169c8:	615a      	str	r2, [r3, #20]
}
   169ca:	46c0      	nop			; (mov r8, r8)
   169cc:	46bd      	mov	sp, r7
   169ce:	b004      	add	sp, #16
   169d0:	bd80      	pop	{r7, pc}
   169d2:	46c0      	nop			; (mov r8, r8)
   169d4:	00016961 	.word	0x00016961

000169d8 <init_state>:

/**
 * \brief Initialize download state to not ready.
 */
static void init_state(void)
{
   169d8:	b580      	push	{r7, lr}
   169da:	af00      	add	r7, sp, #0
    down_state = NOT_READY;
   169dc:	4b02      	ldr	r3, [pc, #8]	; (169e8 <init_state+0x10>)
   169de:	2200      	movs	r2, #0
   169e0:	701a      	strb	r2, [r3, #0]
}
   169e2:	46c0      	nop			; (mov r8, r8)
   169e4:	46bd      	mov	sp, r7
   169e6:	bd80      	pop	{r7, pc}
   169e8:	20000639 	.word	0x20000639

000169ec <clear_state>:
/**
 * \brief Clear state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void clear_state(download_state mask)
{
   169ec:	b580      	push	{r7, lr}
   169ee:	b082      	sub	sp, #8
   169f0:	af00      	add	r7, sp, #0
   169f2:	0002      	movs	r2, r0
   169f4:	1dfb      	adds	r3, r7, #7
   169f6:	701a      	strb	r2, [r3, #0]
    down_state &= ~mask;
   169f8:	1dfb      	adds	r3, r7, #7
   169fa:	781b      	ldrb	r3, [r3, #0]
   169fc:	b25b      	sxtb	r3, r3
   169fe:	43db      	mvns	r3, r3
   16a00:	b25b      	sxtb	r3, r3
   16a02:	4a06      	ldr	r2, [pc, #24]	; (16a1c <clear_state+0x30>)
   16a04:	7812      	ldrb	r2, [r2, #0]
   16a06:	b252      	sxtb	r2, r2
   16a08:	4013      	ands	r3, r2
   16a0a:	b25b      	sxtb	r3, r3
   16a0c:	b2da      	uxtb	r2, r3
   16a0e:	4b03      	ldr	r3, [pc, #12]	; (16a1c <clear_state+0x30>)
   16a10:	701a      	strb	r2, [r3, #0]
}
   16a12:	46c0      	nop			; (mov r8, r8)
   16a14:	46bd      	mov	sp, r7
   16a16:	b002      	add	sp, #8
   16a18:	bd80      	pop	{r7, pc}
   16a1a:	46c0      	nop			; (mov r8, r8)
   16a1c:	20000639 	.word	0x20000639

00016a20 <add_state>:
/**
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
   16a20:	b580      	push	{r7, lr}
   16a22:	b082      	sub	sp, #8
   16a24:	af00      	add	r7, sp, #0
   16a26:	0002      	movs	r2, r0
   16a28:	1dfb      	adds	r3, r7, #7
   16a2a:	701a      	strb	r2, [r3, #0]
    down_state |= mask;
   16a2c:	4b05      	ldr	r3, [pc, #20]	; (16a44 <add_state+0x24>)
   16a2e:	781a      	ldrb	r2, [r3, #0]
   16a30:	1dfb      	adds	r3, r7, #7
   16a32:	781b      	ldrb	r3, [r3, #0]
   16a34:	4313      	orrs	r3, r2
   16a36:	b2da      	uxtb	r2, r3
   16a38:	4b02      	ldr	r3, [pc, #8]	; (16a44 <add_state+0x24>)
   16a3a:	701a      	strb	r2, [r3, #0]
}
   16a3c:	46c0      	nop			; (mov r8, r8)
   16a3e:	46bd      	mov	sp, r7
   16a40:	b002      	add	sp, #8
   16a42:	bd80      	pop	{r7, pc}
   16a44:	20000639 	.word	0x20000639

00016a48 <is_state_set>:
 * \param[in] mask Check download_state.
 * \return true if this state is set, false otherwise.
 */

static inline bool is_state_set(download_state mask)
{
   16a48:	b580      	push	{r7, lr}
   16a4a:	b082      	sub	sp, #8
   16a4c:	af00      	add	r7, sp, #0
   16a4e:	0002      	movs	r2, r0
   16a50:	1dfb      	adds	r3, r7, #7
   16a52:	701a      	strb	r2, [r3, #0]
    return ((down_state & mask) != 0);
   16a54:	4b06      	ldr	r3, [pc, #24]	; (16a70 <is_state_set+0x28>)
   16a56:	781b      	ldrb	r3, [r3, #0]
   16a58:	1dfa      	adds	r2, r7, #7
   16a5a:	7812      	ldrb	r2, [r2, #0]
   16a5c:	4013      	ands	r3, r2
   16a5e:	b2db      	uxtb	r3, r3
   16a60:	1e5a      	subs	r2, r3, #1
   16a62:	4193      	sbcs	r3, r2
   16a64:	b2db      	uxtb	r3, r3
}
   16a66:	0018      	movs	r0, r3
   16a68:	46bd      	mov	sp, r7
   16a6a:	b002      	add	sp, #8
   16a6c:	bd80      	pop	{r7, pc}
   16a6e:	46c0      	nop			; (mov r8, r8)
   16a70:	20000639 	.word	0x20000639

00016a74 <is_exist_file>:
 * \param[in] fp The file pointer to check.
 * \param[in] file_path_name The file name to check.
 * \return true if this file name is exist, false otherwise.
 */
static bool is_exist_file(FIL *fp, const char *file_path_name)
{
   16a74:	b590      	push	{r4, r7, lr}
   16a76:	b085      	sub	sp, #20
   16a78:	af00      	add	r7, sp, #0
   16a7a:	6078      	str	r0, [r7, #4]
   16a7c:	6039      	str	r1, [r7, #0]
    if (fp == NULL || file_path_name == NULL) {
   16a7e:	687b      	ldr	r3, [r7, #4]
   16a80:	2b00      	cmp	r3, #0
   16a82:	d002      	beq.n	16a8a <is_exist_file+0x16>
   16a84:	683b      	ldr	r3, [r7, #0]
   16a86:	2b00      	cmp	r3, #0
   16a88:	d101      	bne.n	16a8e <is_exist_file+0x1a>
        return false;
   16a8a:	2300      	movs	r3, #0
   16a8c:	e013      	b.n	16ab6 <is_exist_file+0x42>
    }

    FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   16a8e:	230f      	movs	r3, #15
   16a90:	18fc      	adds	r4, r7, r3
   16a92:	6839      	ldr	r1, [r7, #0]
   16a94:	4b0a      	ldr	r3, [pc, #40]	; (16ac0 <is_exist_file+0x4c>)
   16a96:	2200      	movs	r2, #0
   16a98:	0018      	movs	r0, r3
   16a9a:	4b0a      	ldr	r3, [pc, #40]	; (16ac4 <is_exist_file+0x50>)
   16a9c:	4798      	blx	r3
   16a9e:	0003      	movs	r3, r0
   16aa0:	7023      	strb	r3, [r4, #0]
    f_close(&file_object);
   16aa2:	4b07      	ldr	r3, [pc, #28]	; (16ac0 <is_exist_file+0x4c>)
   16aa4:	0018      	movs	r0, r3
   16aa6:	4b08      	ldr	r3, [pc, #32]	; (16ac8 <is_exist_file+0x54>)
   16aa8:	4798      	blx	r3
    return (ret == FR_OK);
   16aaa:	230f      	movs	r3, #15
   16aac:	18fb      	adds	r3, r7, r3
   16aae:	781b      	ldrb	r3, [r3, #0]
   16ab0:	425a      	negs	r2, r3
   16ab2:	4153      	adcs	r3, r2
   16ab4:	b2db      	uxtb	r3, r3
}
   16ab6:	0018      	movs	r0, r3
   16ab8:	46bd      	mov	sp, r7
   16aba:	b005      	add	sp, #20
   16abc:	bd90      	pop	{r4, r7, pc}
   16abe:	46c0      	nop			; (mov r8, r8)
   16ac0:	2000086c 	.word	0x2000086c
   16ac4:	0002e545 	.word	0x0002e545
   16ac8:	0002ef45 	.word	0x0002ef45

00016acc <rename_to_unique>:
 * \param[out] file_path_name The file name change to uniquely and changed name is returned to this buffer.
 * \param[in] max_len Maximum file name length.
 * \return true if this file name is unique, false otherwise.
 */
static bool rename_to_unique(FIL *fp, char *file_path_name, uint8_t max_len)
{
   16acc:	b580      	push	{r7, lr}
   16ace:	b09e      	sub	sp, #120	; 0x78
   16ad0:	af00      	add	r7, sp, #0
   16ad2:	60f8      	str	r0, [r7, #12]
   16ad4:	60b9      	str	r1, [r7, #8]
   16ad6:	1dfb      	adds	r3, r7, #7
   16ad8:	701a      	strb	r2, [r3, #0]
#define NUMBRING_MAX (3)
#define ADDITION_SIZE (NUMBRING_MAX + 1) /* '-' character is added before the number. */
    uint16_t i = 1, name_len = 0, ext_len = 0, count = 0;
   16ada:	2376      	movs	r3, #118	; 0x76
   16adc:	18fb      	adds	r3, r7, r3
   16ade:	2201      	movs	r2, #1
   16ae0:	801a      	strh	r2, [r3, #0]
   16ae2:	2374      	movs	r3, #116	; 0x74
   16ae4:	18fb      	adds	r3, r7, r3
   16ae6:	2200      	movs	r2, #0
   16ae8:	801a      	strh	r2, [r3, #0]
   16aea:	236e      	movs	r3, #110	; 0x6e
   16aec:	18fb      	adds	r3, r7, r3
   16aee:	2200      	movs	r2, #0
   16af0:	801a      	strh	r2, [r3, #0]
   16af2:	2372      	movs	r3, #114	; 0x72
   16af4:	18fb      	adds	r3, r7, r3
   16af6:	2200      	movs	r2, #0
   16af8:	801a      	strh	r2, [r3, #0]
    char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
   16afa:	2324      	movs	r3, #36	; 0x24
   16afc:	18fb      	adds	r3, r7, r3
   16afe:	0018      	movs	r0, r3
   16b00:	2341      	movs	r3, #65	; 0x41
   16b02:	001a      	movs	r2, r3
   16b04:	2100      	movs	r1, #0
   16b06:	4b92      	ldr	r3, [pc, #584]	; (16d50 <rename_to_unique+0x284>)
   16b08:	4798      	blx	r3
    char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
   16b0a:	2318      	movs	r3, #24
   16b0c:	18fb      	adds	r3, r7, r3
   16b0e:	0018      	movs	r0, r3
   16b10:	2309      	movs	r3, #9
   16b12:	001a      	movs	r2, r3
   16b14:	2100      	movs	r1, #0
   16b16:	4b8e      	ldr	r3, [pc, #568]	; (16d50 <rename_to_unique+0x284>)
   16b18:	4798      	blx	r3
    char numbering[NUMBRING_MAX + 1] = {0};
   16b1a:	2314      	movs	r3, #20
   16b1c:	18fb      	adds	r3, r7, r3
   16b1e:	2200      	movs	r2, #0
   16b20:	601a      	str	r2, [r3, #0]
    char *p = NULL;
   16b22:	2300      	movs	r3, #0
   16b24:	66bb      	str	r3, [r7, #104]	; 0x68
    bool valid_ext = false;
   16b26:	2371      	movs	r3, #113	; 0x71
   16b28:	18fb      	adds	r3, r7, r3
   16b2a:	2200      	movs	r2, #0
   16b2c:	701a      	strb	r2, [r3, #0]

    if (file_path_name == NULL) {
   16b2e:	68bb      	ldr	r3, [r7, #8]
   16b30:	2b00      	cmp	r3, #0
   16b32:	d101      	bne.n	16b38 <rename_to_unique+0x6c>
        return false;
   16b34:	2300      	movs	r3, #0
   16b36:	e106      	b.n	16d46 <rename_to_unique+0x27a>
    }

    if (!is_exist_file(fp, file_path_name)) {
   16b38:	68ba      	ldr	r2, [r7, #8]
   16b3a:	68fb      	ldr	r3, [r7, #12]
   16b3c:	0011      	movs	r1, r2
   16b3e:	0018      	movs	r0, r3
   16b40:	4b84      	ldr	r3, [pc, #528]	; (16d54 <rename_to_unique+0x288>)
   16b42:	4798      	blx	r3
   16b44:	0003      	movs	r3, r0
   16b46:	001a      	movs	r2, r3
   16b48:	2301      	movs	r3, #1
   16b4a:	4053      	eors	r3, r2
   16b4c:	b2db      	uxtb	r3, r3
   16b4e:	2b00      	cmp	r3, #0
   16b50:	d001      	beq.n	16b56 <rename_to_unique+0x8a>
        return true;
   16b52:	2301      	movs	r3, #1
   16b54:	e0f7      	b.n	16d46 <rename_to_unique+0x27a>
    } else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   16b56:	68bb      	ldr	r3, [r7, #8]
   16b58:	0018      	movs	r0, r3
   16b5a:	4b7f      	ldr	r3, [pc, #508]	; (16d58 <rename_to_unique+0x28c>)
   16b5c:	4798      	blx	r3
   16b5e:	0003      	movs	r3, r0
   16b60:	2b40      	cmp	r3, #64	; 0x40
   16b62:	d901      	bls.n	16b68 <rename_to_unique+0x9c>
        return false;
   16b64:	2300      	movs	r3, #0
   16b66:	e0ee      	b.n	16d46 <rename_to_unique+0x27a>
    }

    p = strrchr(file_path_name, '.');
   16b68:	68bb      	ldr	r3, [r7, #8]
   16b6a:	212e      	movs	r1, #46	; 0x2e
   16b6c:	0018      	movs	r0, r3
   16b6e:	4b7b      	ldr	r3, [pc, #492]	; (16d5c <rename_to_unique+0x290>)
   16b70:	4798      	blx	r3
   16b72:	0003      	movs	r3, r0
   16b74:	66bb      	str	r3, [r7, #104]	; 0x68
    if (p != NULL) {
   16b76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   16b78:	2b00      	cmp	r3, #0
   16b7a:	d052      	beq.n	16c22 <rename_to_unique+0x156>
        ext_len = strlen(p);
   16b7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   16b7e:	0018      	movs	r0, r3
   16b80:	4b75      	ldr	r3, [pc, #468]	; (16d58 <rename_to_unique+0x28c>)
   16b82:	4798      	blx	r3
   16b84:	0002      	movs	r2, r0
   16b86:	236e      	movs	r3, #110	; 0x6e
   16b88:	18fb      	adds	r3, r7, r3
   16b8a:	801a      	strh	r2, [r3, #0]
        if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
   16b8c:	236e      	movs	r3, #110	; 0x6e
   16b8e:	18fb      	adds	r3, r7, r3
   16b90:	881b      	ldrh	r3, [r3, #0]
   16b92:	2b07      	cmp	r3, #7
   16b94:	d837      	bhi.n	16c06 <rename_to_unique+0x13a>
            valid_ext = true;
   16b96:	2371      	movs	r3, #113	; 0x71
   16b98:	18fb      	adds	r3, r7, r3
   16b9a:	2201      	movs	r2, #1
   16b9c:	701a      	strb	r2, [r3, #0]
            strcpy(ext, p);
   16b9e:	6eba      	ldr	r2, [r7, #104]	; 0x68
   16ba0:	2318      	movs	r3, #24
   16ba2:	18fb      	adds	r3, r7, r3
   16ba4:	0011      	movs	r1, r2
   16ba6:	0018      	movs	r0, r3
   16ba8:	4b6d      	ldr	r3, [pc, #436]	; (16d60 <rename_to_unique+0x294>)
   16baa:	4798      	blx	r3
            if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
   16bac:	68bb      	ldr	r3, [r7, #8]
   16bae:	0018      	movs	r0, r3
   16bb0:	4b69      	ldr	r3, [pc, #420]	; (16d58 <rename_to_unique+0x28c>)
   16bb2:	4798      	blx	r3
   16bb4:	0002      	movs	r2, r0
   16bb6:	236e      	movs	r3, #110	; 0x6e
   16bb8:	18fb      	adds	r3, r7, r3
   16bba:	881b      	ldrh	r3, [r3, #0]
   16bbc:	1ad3      	subs	r3, r2, r3
   16bbe:	2b3c      	cmp	r3, #60	; 0x3c
   16bc0:	d911      	bls.n	16be6 <rename_to_unique+0x11a>
                name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
   16bc2:	2374      	movs	r3, #116	; 0x74
   16bc4:	18fb      	adds	r3, r7, r3
   16bc6:	226e      	movs	r2, #110	; 0x6e
   16bc8:	18ba      	adds	r2, r7, r2
   16bca:	8812      	ldrh	r2, [r2, #0]
   16bcc:	213c      	movs	r1, #60	; 0x3c
   16bce:	1a8a      	subs	r2, r1, r2
   16bd0:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   16bd2:	2374      	movs	r3, #116	; 0x74
   16bd4:	18fb      	adds	r3, r7, r3
   16bd6:	881a      	ldrh	r2, [r3, #0]
   16bd8:	68b9      	ldr	r1, [r7, #8]
   16bda:	2324      	movs	r3, #36	; 0x24
   16bdc:	18fb      	adds	r3, r7, r3
   16bde:	0018      	movs	r0, r3
   16be0:	4b60      	ldr	r3, [pc, #384]	; (16d64 <rename_to_unique+0x298>)
   16be2:	4798      	blx	r3
   16be4:	e02a      	b.n	16c3c <rename_to_unique+0x170>
            } else {
                name_len = (p - file_path_name);
   16be6:	6eba      	ldr	r2, [r7, #104]	; 0x68
   16be8:	68bb      	ldr	r3, [r7, #8]
   16bea:	1ad2      	subs	r2, r2, r3
   16bec:	2374      	movs	r3, #116	; 0x74
   16bee:	18fb      	adds	r3, r7, r3
   16bf0:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   16bf2:	2374      	movs	r3, #116	; 0x74
   16bf4:	18fb      	adds	r3, r7, r3
   16bf6:	881a      	ldrh	r2, [r3, #0]
   16bf8:	68b9      	ldr	r1, [r7, #8]
   16bfa:	2324      	movs	r3, #36	; 0x24
   16bfc:	18fb      	adds	r3, r7, r3
   16bfe:	0018      	movs	r0, r3
   16c00:	4b58      	ldr	r3, [pc, #352]	; (16d64 <rename_to_unique+0x298>)
   16c02:	4798      	blx	r3
   16c04:	e01a      	b.n	16c3c <rename_to_unique+0x170>
            }
        } else {
            name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   16c06:	2374      	movs	r3, #116	; 0x74
   16c08:	18fb      	adds	r3, r7, r3
   16c0a:	223c      	movs	r2, #60	; 0x3c
   16c0c:	801a      	strh	r2, [r3, #0]
            strncpy(name, file_path_name, name_len);
   16c0e:	2374      	movs	r3, #116	; 0x74
   16c10:	18fb      	adds	r3, r7, r3
   16c12:	881a      	ldrh	r2, [r3, #0]
   16c14:	68b9      	ldr	r1, [r7, #8]
   16c16:	2324      	movs	r3, #36	; 0x24
   16c18:	18fb      	adds	r3, r7, r3
   16c1a:	0018      	movs	r0, r3
   16c1c:	4b51      	ldr	r3, [pc, #324]	; (16d64 <rename_to_unique+0x298>)
   16c1e:	4798      	blx	r3
   16c20:	e00c      	b.n	16c3c <rename_to_unique+0x170>
        }
    } else {
        name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   16c22:	2374      	movs	r3, #116	; 0x74
   16c24:	18fb      	adds	r3, r7, r3
   16c26:	223c      	movs	r2, #60	; 0x3c
   16c28:	801a      	strh	r2, [r3, #0]
        strncpy(name, file_path_name, name_len);
   16c2a:	2374      	movs	r3, #116	; 0x74
   16c2c:	18fb      	adds	r3, r7, r3
   16c2e:	881a      	ldrh	r2, [r3, #0]
   16c30:	68b9      	ldr	r1, [r7, #8]
   16c32:	2324      	movs	r3, #36	; 0x24
   16c34:	18fb      	adds	r3, r7, r3
   16c36:	0018      	movs	r0, r3
   16c38:	4b4a      	ldr	r3, [pc, #296]	; (16d64 <rename_to_unique+0x298>)
   16c3a:	4798      	blx	r3
    }

    name[name_len++] = '-';
   16c3c:	2374      	movs	r3, #116	; 0x74
   16c3e:	18fb      	adds	r3, r7, r3
   16c40:	881b      	ldrh	r3, [r3, #0]
   16c42:	2274      	movs	r2, #116	; 0x74
   16c44:	18ba      	adds	r2, r7, r2
   16c46:	1c59      	adds	r1, r3, #1
   16c48:	8011      	strh	r1, [r2, #0]
   16c4a:	001a      	movs	r2, r3
   16c4c:	2324      	movs	r3, #36	; 0x24
   16c4e:	18fb      	adds	r3, r7, r3
   16c50:	212d      	movs	r1, #45	; 0x2d
   16c52:	5499      	strb	r1, [r3, r2]

    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   16c54:	2376      	movs	r3, #118	; 0x76
   16c56:	18fb      	adds	r3, r7, r3
   16c58:	2200      	movs	r2, #0
   16c5a:	801a      	strh	r2, [r3, #0]
   16c5c:	2372      	movs	r3, #114	; 0x72
   16c5e:	18fb      	adds	r3, r7, r3
   16c60:	2201      	movs	r2, #1
   16c62:	801a      	strh	r2, [r3, #0]
   16c64:	e010      	b.n	16c88 <rename_to_unique+0x1bc>
        count *= 10;
   16c66:	2372      	movs	r3, #114	; 0x72
   16c68:	18fa      	adds	r2, r7, r3
   16c6a:	2372      	movs	r3, #114	; 0x72
   16c6c:	18fb      	adds	r3, r7, r3
   16c6e:	881b      	ldrh	r3, [r3, #0]
   16c70:	1c19      	adds	r1, r3, #0
   16c72:	0089      	lsls	r1, r1, #2
   16c74:	18cb      	adds	r3, r1, r3
   16c76:	18db      	adds	r3, r3, r3
   16c78:	8013      	strh	r3, [r2, #0]
    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   16c7a:	2376      	movs	r3, #118	; 0x76
   16c7c:	18fb      	adds	r3, r7, r3
   16c7e:	881a      	ldrh	r2, [r3, #0]
   16c80:	2376      	movs	r3, #118	; 0x76
   16c82:	18fb      	adds	r3, r7, r3
   16c84:	3201      	adds	r2, #1
   16c86:	801a      	strh	r2, [r3, #0]
   16c88:	2376      	movs	r3, #118	; 0x76
   16c8a:	18fb      	adds	r3, r7, r3
   16c8c:	881b      	ldrh	r3, [r3, #0]
   16c8e:	2b02      	cmp	r3, #2
   16c90:	d9e9      	bls.n	16c66 <rename_to_unique+0x19a>
    }
    for (i = 1; i < count; i++) {
   16c92:	2376      	movs	r3, #118	; 0x76
   16c94:	18fb      	adds	r3, r7, r3
   16c96:	2201      	movs	r2, #1
   16c98:	801a      	strh	r2, [r3, #0]
   16c9a:	e04b      	b.n	16d34 <rename_to_unique+0x268>
        sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
   16c9c:	2376      	movs	r3, #118	; 0x76
   16c9e:	18fb      	adds	r3, r7, r3
   16ca0:	881a      	ldrh	r2, [r3, #0]
   16ca2:	4931      	ldr	r1, [pc, #196]	; (16d68 <rename_to_unique+0x29c>)
   16ca4:	2314      	movs	r3, #20
   16ca6:	18fb      	adds	r3, r7, r3
   16ca8:	0018      	movs	r0, r3
   16caa:	4b30      	ldr	r3, [pc, #192]	; (16d6c <rename_to_unique+0x2a0>)
   16cac:	4798      	blx	r3
        strncpy(&name[name_len], numbering, NUMBRING_MAX);
   16cae:	2374      	movs	r3, #116	; 0x74
   16cb0:	18fb      	adds	r3, r7, r3
   16cb2:	881b      	ldrh	r3, [r3, #0]
   16cb4:	2224      	movs	r2, #36	; 0x24
   16cb6:	18ba      	adds	r2, r7, r2
   16cb8:	18d3      	adds	r3, r2, r3
   16cba:	2214      	movs	r2, #20
   16cbc:	18b9      	adds	r1, r7, r2
   16cbe:	2203      	movs	r2, #3
   16cc0:	0018      	movs	r0, r3
   16cc2:	4b28      	ldr	r3, [pc, #160]	; (16d64 <rename_to_unique+0x298>)
   16cc4:	4798      	blx	r3
        if (valid_ext) {
   16cc6:	2371      	movs	r3, #113	; 0x71
   16cc8:	18fb      	adds	r3, r7, r3
   16cca:	781b      	ldrb	r3, [r3, #0]
   16ccc:	2b00      	cmp	r3, #0
   16cce:	d00c      	beq.n	16cea <rename_to_unique+0x21e>
            strcpy(&name[name_len + NUMBRING_MAX], ext);
   16cd0:	2374      	movs	r3, #116	; 0x74
   16cd2:	18fb      	adds	r3, r7, r3
   16cd4:	881b      	ldrh	r3, [r3, #0]
   16cd6:	3303      	adds	r3, #3
   16cd8:	2224      	movs	r2, #36	; 0x24
   16cda:	18ba      	adds	r2, r7, r2
   16cdc:	18d3      	adds	r3, r2, r3
   16cde:	2218      	movs	r2, #24
   16ce0:	18ba      	adds	r2, r7, r2
   16ce2:	0011      	movs	r1, r2
   16ce4:	0018      	movs	r0, r3
   16ce6:	4b1e      	ldr	r3, [pc, #120]	; (16d60 <rename_to_unique+0x294>)
   16ce8:	4798      	blx	r3
        }

        if (!is_exist_file(fp, name)) {
   16cea:	2324      	movs	r3, #36	; 0x24
   16cec:	18fa      	adds	r2, r7, r3
   16cee:	68fb      	ldr	r3, [r7, #12]
   16cf0:	0011      	movs	r1, r2
   16cf2:	0018      	movs	r0, r3
   16cf4:	4b17      	ldr	r3, [pc, #92]	; (16d54 <rename_to_unique+0x288>)
   16cf6:	4798      	blx	r3
   16cf8:	0003      	movs	r3, r0
   16cfa:	001a      	movs	r2, r3
   16cfc:	2301      	movs	r3, #1
   16cfe:	4053      	eors	r3, r2
   16d00:	b2db      	uxtb	r3, r3
   16d02:	2b00      	cmp	r3, #0
   16d04:	d00f      	beq.n	16d26 <rename_to_unique+0x25a>
            memset(file_path_name, 0, max_len);
   16d06:	1dfb      	adds	r3, r7, #7
   16d08:	781a      	ldrb	r2, [r3, #0]
   16d0a:	68bb      	ldr	r3, [r7, #8]
   16d0c:	2100      	movs	r1, #0
   16d0e:	0018      	movs	r0, r3
   16d10:	4b0f      	ldr	r3, [pc, #60]	; (16d50 <rename_to_unique+0x284>)
   16d12:	4798      	blx	r3
            strcpy(file_path_name, name);
   16d14:	2324      	movs	r3, #36	; 0x24
   16d16:	18fa      	adds	r2, r7, r3
   16d18:	68bb      	ldr	r3, [r7, #8]
   16d1a:	0011      	movs	r1, r2
   16d1c:	0018      	movs	r0, r3
   16d1e:	4b10      	ldr	r3, [pc, #64]	; (16d60 <rename_to_unique+0x294>)
   16d20:	4798      	blx	r3
            return true;
   16d22:	2301      	movs	r3, #1
   16d24:	e00f      	b.n	16d46 <rename_to_unique+0x27a>
    for (i = 1; i < count; i++) {
   16d26:	2376      	movs	r3, #118	; 0x76
   16d28:	18fb      	adds	r3, r7, r3
   16d2a:	881a      	ldrh	r2, [r3, #0]
   16d2c:	2376      	movs	r3, #118	; 0x76
   16d2e:	18fb      	adds	r3, r7, r3
   16d30:	3201      	adds	r2, #1
   16d32:	801a      	strh	r2, [r3, #0]
   16d34:	2376      	movs	r3, #118	; 0x76
   16d36:	18fa      	adds	r2, r7, r3
   16d38:	2372      	movs	r3, #114	; 0x72
   16d3a:	18fb      	adds	r3, r7, r3
   16d3c:	8812      	ldrh	r2, [r2, #0]
   16d3e:	881b      	ldrh	r3, [r3, #0]
   16d40:	429a      	cmp	r2, r3
   16d42:	d3ab      	bcc.n	16c9c <rename_to_unique+0x1d0>
        }
    }
    return false;
   16d44:	2300      	movs	r3, #0
}
   16d46:	0018      	movs	r0, r3
   16d48:	46bd      	mov	sp, r7
   16d4a:	b01e      	add	sp, #120	; 0x78
   16d4c:	bd80      	pop	{r7, pc}
   16d4e:	46c0      	nop			; (mov r8, r8)
   16d50:	000355ef 	.word	0x000355ef
   16d54:	00016a75 	.word	0x00016a75
   16d58:	000359a7 	.word	0x000359a7
   16d5c:	00035a01 	.word	0x00035a01
   16d60:	0003595b 	.word	0x0003595b
   16d64:	000359d7 	.word	0x000359d7
   16d68:	000371fc 	.word	0x000371fc
   16d6c:	000358ad 	.word	0x000358ad

00016d70 <start_download>:

/**
 * \brief Start file download via HTTP connection.
 */
static void start_download(void)
{
   16d70:	b590      	push	{r4, r7, lr}
   16d72:	b083      	sub	sp, #12
   16d74:	af02      	add	r7, sp, #8
    if (!is_state_set(STORAGE_READY)) {
   16d76:	2001      	movs	r0, #1
   16d78:	4b22      	ldr	r3, [pc, #136]	; (16e04 <start_download+0x94>)
   16d7a:	4798      	blx	r3
   16d7c:	0003      	movs	r3, r0
   16d7e:	001a      	movs	r2, r3
   16d80:	2301      	movs	r3, #1
   16d82:	4053      	eors	r3, r2
   16d84:	b2db      	uxtb	r3, r3
   16d86:	2b00      	cmp	r3, #0
   16d88:	d005      	beq.n	16d96 <start_download+0x26>
        LogMessage(LOG_DEBUG_LVL, "start_download: MMC storage not ready.\r\n");
   16d8a:	4b1f      	ldr	r3, [pc, #124]	; (16e08 <start_download+0x98>)
   16d8c:	0019      	movs	r1, r3
   16d8e:	2001      	movs	r0, #1
   16d90:	4b1e      	ldr	r3, [pc, #120]	; (16e0c <start_download+0x9c>)
   16d92:	4798      	blx	r3
        return;
   16d94:	e032      	b.n	16dfc <start_download+0x8c>
    }

    if (!is_state_set(WIFI_CONNECTED)) {
   16d96:	2002      	movs	r0, #2
   16d98:	4b1a      	ldr	r3, [pc, #104]	; (16e04 <start_download+0x94>)
   16d9a:	4798      	blx	r3
   16d9c:	0003      	movs	r3, r0
   16d9e:	001a      	movs	r2, r3
   16da0:	2301      	movs	r3, #1
   16da2:	4053      	eors	r3, r2
   16da4:	b2db      	uxtb	r3, r3
   16da6:	2b00      	cmp	r3, #0
   16da8:	d005      	beq.n	16db6 <start_download+0x46>
        LogMessage(LOG_DEBUG_LVL, "start_download: Wi-Fi is not connected.\r\n");
   16daa:	4b19      	ldr	r3, [pc, #100]	; (16e10 <start_download+0xa0>)
   16dac:	0019      	movs	r1, r3
   16dae:	2001      	movs	r0, #1
   16db0:	4b16      	ldr	r3, [pc, #88]	; (16e0c <start_download+0x9c>)
   16db2:	4798      	blx	r3
        return;
   16db4:	e022      	b.n	16dfc <start_download+0x8c>
    }

    if (is_state_set(GET_REQUESTED)) {
   16db6:	2004      	movs	r0, #4
   16db8:	4b12      	ldr	r3, [pc, #72]	; (16e04 <start_download+0x94>)
   16dba:	4798      	blx	r3
   16dbc:	1e03      	subs	r3, r0, #0
   16dbe:	d005      	beq.n	16dcc <start_download+0x5c>
        LogMessage(LOG_DEBUG_LVL, "start_download: request is sent already.\r\n");
   16dc0:	4b14      	ldr	r3, [pc, #80]	; (16e14 <start_download+0xa4>)
   16dc2:	0019      	movs	r1, r3
   16dc4:	2001      	movs	r0, #1
   16dc6:	4b11      	ldr	r3, [pc, #68]	; (16e0c <start_download+0x9c>)
   16dc8:	4798      	blx	r3
        return;
   16dca:	e017      	b.n	16dfc <start_download+0x8c>
    }

    if (is_state_set(DOWNLOADING)) {
   16dcc:	2008      	movs	r0, #8
   16dce:	4b0d      	ldr	r3, [pc, #52]	; (16e04 <start_download+0x94>)
   16dd0:	4798      	blx	r3
   16dd2:	1e03      	subs	r3, r0, #0
   16dd4:	d005      	beq.n	16de2 <start_download+0x72>
        LogMessage(LOG_DEBUG_LVL, "start_download: running download already.\r\n");
   16dd6:	4b10      	ldr	r3, [pc, #64]	; (16e18 <start_download+0xa8>)
   16dd8:	0019      	movs	r1, r3
   16dda:	2001      	movs	r0, #1
   16ddc:	4b0b      	ldr	r3, [pc, #44]	; (16e0c <start_download+0x9c>)
   16dde:	4798      	blx	r3
        return;
   16de0:	e00c      	b.n	16dfc <start_download+0x8c>
    }

    /* Send the HTTP request. */
    LogMessage(LOG_DEBUG_LVL, "start_download: sending HTTP request...\r\n");
   16de2:	4b0e      	ldr	r3, [pc, #56]	; (16e1c <start_download+0xac>)
   16de4:	0019      	movs	r1, r3
   16de6:	2001      	movs	r0, #1
   16de8:	4b08      	ldr	r3, [pc, #32]	; (16e0c <start_download+0x9c>)
   16dea:	4798      	blx	r3
    http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   16dec:	490c      	ldr	r1, [pc, #48]	; (16e20 <start_download+0xb0>)
   16dee:	480d      	ldr	r0, [pc, #52]	; (16e24 <start_download+0xb4>)
   16df0:	2300      	movs	r3, #0
   16df2:	9300      	str	r3, [sp, #0]
   16df4:	2300      	movs	r3, #0
   16df6:	2201      	movs	r2, #1
   16df8:	4c0b      	ldr	r4, [pc, #44]	; (16e28 <start_download+0xb8>)
   16dfa:	47a0      	blx	r4
}
   16dfc:	46bd      	mov	sp, r7
   16dfe:	b001      	add	sp, #4
   16e00:	bd90      	pop	{r4, r7, pc}
   16e02:	46c0      	nop			; (mov r8, r8)
   16e04:	00016a49 	.word	0x00016a49
   16e08:	00037204 	.word	0x00037204
   16e0c:	0001eb71 	.word	0x0001eb71
   16e10:	00037230 	.word	0x00037230
   16e14:	0003725c 	.word	0x0003725c
   16e18:	00037288 	.word	0x00037288
   16e1c:	000372b4 	.word	0x000372b4
   16e20:	000372e0 	.word	0x000372e0
   16e24:	20004958 	.word	0x20004958
   16e28:	00031b99 	.word	0x00031b99

00016e2c <store_file_packet>:
 * \brief Store received packet to file.
 * \param[in] data Packet data.
 * \param[in] length Packet data length.
 */
static void store_file_packet(char *data, uint32_t length)
{
   16e2c:	b5b0      	push	{r4, r5, r7, lr}
   16e2e:	b086      	sub	sp, #24
   16e30:	af00      	add	r7, sp, #0
   16e32:	6078      	str	r0, [r7, #4]
   16e34:	6039      	str	r1, [r7, #0]
    FRESULT ret;
    if ((data == NULL) || (length < 1)) {
   16e36:	687b      	ldr	r3, [r7, #4]
   16e38:	2b00      	cmp	r3, #0
   16e3a:	d002      	beq.n	16e42 <store_file_packet+0x16>
   16e3c:	683b      	ldr	r3, [r7, #0]
   16e3e:	2b00      	cmp	r3, #0
   16e40:	d105      	bne.n	16e4e <store_file_packet+0x22>
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: empty data.\r\n");
   16e42:	4b58      	ldr	r3, [pc, #352]	; (16fa4 <store_file_packet+0x178>)
   16e44:	0019      	movs	r1, r3
   16e46:	2001      	movs	r0, #1
   16e48:	4b57      	ldr	r3, [pc, #348]	; (16fa8 <store_file_packet+0x17c>)
   16e4a:	4798      	blx	r3
        return;
   16e4c:	e0a6      	b.n	16f9c <store_file_packet+0x170>
    }

    if (!is_state_set(DOWNLOADING)) {
   16e4e:	2008      	movs	r0, #8
   16e50:	4b56      	ldr	r3, [pc, #344]	; (16fac <store_file_packet+0x180>)
   16e52:	4798      	blx	r3
   16e54:	0003      	movs	r3, r0
   16e56:	001a      	movs	r2, r3
   16e58:	2301      	movs	r3, #1
   16e5a:	4053      	eors	r3, r2
   16e5c:	b2db      	uxtb	r3, r3
   16e5e:	2b00      	cmp	r3, #0
   16e60:	d055      	beq.n	16f0e <store_file_packet+0xe2>
        char *cp = NULL;
   16e62:	2300      	movs	r3, #0
   16e64:	617b      	str	r3, [r7, #20]
        save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   16e66:	4b52      	ldr	r3, [pc, #328]	; (16fb0 <store_file_packet+0x184>)
   16e68:	2230      	movs	r2, #48	; 0x30
   16e6a:	701a      	strb	r2, [r3, #0]
        save_file_name[1] = ':';
   16e6c:	4b50      	ldr	r3, [pc, #320]	; (16fb0 <store_file_packet+0x184>)
   16e6e:	223a      	movs	r2, #58	; 0x3a
   16e70:	705a      	strb	r2, [r3, #1]
        cp = (char *)(MAIN_HTTP_FILE_URL + strlen(MAIN_HTTP_FILE_URL));
   16e72:	4b50      	ldr	r3, [pc, #320]	; (16fb4 <store_file_packet+0x188>)
   16e74:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   16e76:	e002      	b.n	16e7e <store_file_packet+0x52>
            cp--;
   16e78:	697b      	ldr	r3, [r7, #20]
   16e7a:	3b01      	subs	r3, #1
   16e7c:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   16e7e:	697b      	ldr	r3, [r7, #20]
   16e80:	781b      	ldrb	r3, [r3, #0]
   16e82:	2b2f      	cmp	r3, #47	; 0x2f
   16e84:	d1f8      	bne.n	16e78 <store_file_packet+0x4c>
        }
        if (strlen(cp) > 1) {
   16e86:	697b      	ldr	r3, [r7, #20]
   16e88:	0018      	movs	r0, r3
   16e8a:	4b4b      	ldr	r3, [pc, #300]	; (16fb8 <store_file_packet+0x18c>)
   16e8c:	4798      	blx	r3
   16e8e:	0003      	movs	r3, r0
   16e90:	2b01      	cmp	r3, #1
   16e92:	d924      	bls.n	16ede <store_file_packet+0xb2>
            cp++;
   16e94:	697b      	ldr	r3, [r7, #20]
   16e96:	3301      	adds	r3, #1
   16e98:	617b      	str	r3, [r7, #20]
            strcpy(&save_file_name[2], cp);
   16e9a:	697a      	ldr	r2, [r7, #20]
   16e9c:	4b47      	ldr	r3, [pc, #284]	; (16fbc <store_file_packet+0x190>)
   16e9e:	0011      	movs	r1, r2
   16ea0:	0018      	movs	r0, r3
   16ea2:	4b47      	ldr	r3, [pc, #284]	; (16fc0 <store_file_packet+0x194>)
   16ea4:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
            add_state(CANCELED);
            return;
        }

        rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
   16ea6:	4942      	ldr	r1, [pc, #264]	; (16fb0 <store_file_packet+0x184>)
   16ea8:	4b46      	ldr	r3, [pc, #280]	; (16fc4 <store_file_packet+0x198>)
   16eaa:	2240      	movs	r2, #64	; 0x40
   16eac:	0018      	movs	r0, r3
   16eae:	4b46      	ldr	r3, [pc, #280]	; (16fc8 <store_file_packet+0x19c>)
   16eb0:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: creating file [%s]\r\n", save_file_name);
   16eb2:	4a3f      	ldr	r2, [pc, #252]	; (16fb0 <store_file_packet+0x184>)
   16eb4:	4b45      	ldr	r3, [pc, #276]	; (16fcc <store_file_packet+0x1a0>)
   16eb6:	0019      	movs	r1, r3
   16eb8:	2001      	movs	r0, #1
   16eba:	4b3b      	ldr	r3, [pc, #236]	; (16fa8 <store_file_packet+0x17c>)
   16ebc:	4798      	blx	r3
        ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   16ebe:	2313      	movs	r3, #19
   16ec0:	18fc      	adds	r4, r7, r3
   16ec2:	493b      	ldr	r1, [pc, #236]	; (16fb0 <store_file_packet+0x184>)
   16ec4:	4b3f      	ldr	r3, [pc, #252]	; (16fc4 <store_file_packet+0x198>)
   16ec6:	220a      	movs	r2, #10
   16ec8:	0018      	movs	r0, r3
   16eca:	4b41      	ldr	r3, [pc, #260]	; (16fd0 <store_file_packet+0x1a4>)
   16ecc:	4798      	blx	r3
   16ece:	0003      	movs	r3, r0
   16ed0:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   16ed2:	2313      	movs	r3, #19
   16ed4:	18fb      	adds	r3, r7, r3
   16ed6:	781b      	ldrb	r3, [r3, #0]
   16ed8:	2b00      	cmp	r3, #0
   16eda:	d012      	beq.n	16f02 <store_file_packet+0xd6>
   16edc:	e008      	b.n	16ef0 <store_file_packet+0xc4>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
   16ede:	4b3d      	ldr	r3, [pc, #244]	; (16fd4 <store_file_packet+0x1a8>)
   16ee0:	0019      	movs	r1, r3
   16ee2:	2001      	movs	r0, #1
   16ee4:	4b30      	ldr	r3, [pc, #192]	; (16fa8 <store_file_packet+0x17c>)
   16ee6:	4798      	blx	r3
            add_state(CANCELED);
   16ee8:	2020      	movs	r0, #32
   16eea:	4b3b      	ldr	r3, [pc, #236]	; (16fd8 <store_file_packet+0x1ac>)
   16eec:	4798      	blx	r3
            return;
   16eee:	e055      	b.n	16f9c <store_file_packet+0x170>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file creation error! ret:%d\r\n", ret);
   16ef0:	2313      	movs	r3, #19
   16ef2:	18fb      	adds	r3, r7, r3
   16ef4:	781a      	ldrb	r2, [r3, #0]
   16ef6:	4b39      	ldr	r3, [pc, #228]	; (16fdc <store_file_packet+0x1b0>)
   16ef8:	0019      	movs	r1, r3
   16efa:	2001      	movs	r0, #1
   16efc:	4b2a      	ldr	r3, [pc, #168]	; (16fa8 <store_file_packet+0x17c>)
   16efe:	4798      	blx	r3
            return;
   16f00:	e04c      	b.n	16f9c <store_file_packet+0x170>
        }

        received_file_size = 0;
   16f02:	4b37      	ldr	r3, [pc, #220]	; (16fe0 <store_file_packet+0x1b4>)
   16f04:	2200      	movs	r2, #0
   16f06:	601a      	str	r2, [r3, #0]
        add_state(DOWNLOADING);
   16f08:	2008      	movs	r0, #8
   16f0a:	4b33      	ldr	r3, [pc, #204]	; (16fd8 <store_file_packet+0x1ac>)
   16f0c:	4798      	blx	r3
    }

    if (data != NULL) {
   16f0e:	687b      	ldr	r3, [r7, #4]
   16f10:	2b00      	cmp	r3, #0
   16f12:	d043      	beq.n	16f9c <store_file_packet+0x170>
        UINT wsize = 0;
   16f14:	2300      	movs	r3, #0
   16f16:	60fb      	str	r3, [r7, #12]
        ret = f_write(&file_object, (const void *)data, length, &wsize);
   16f18:	2313      	movs	r3, #19
   16f1a:	18fc      	adds	r4, r7, r3
   16f1c:	230c      	movs	r3, #12
   16f1e:	18fb      	adds	r3, r7, r3
   16f20:	683a      	ldr	r2, [r7, #0]
   16f22:	6879      	ldr	r1, [r7, #4]
   16f24:	4827      	ldr	r0, [pc, #156]	; (16fc4 <store_file_packet+0x198>)
   16f26:	4d2f      	ldr	r5, [pc, #188]	; (16fe4 <store_file_packet+0x1b8>)
   16f28:	47a8      	blx	r5
   16f2a:	0003      	movs	r3, r0
   16f2c:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   16f2e:	2313      	movs	r3, #19
   16f30:	18fb      	adds	r3, r7, r3
   16f32:	781b      	ldrb	r3, [r3, #0]
   16f34:	2b00      	cmp	r3, #0
   16f36:	d00c      	beq.n	16f52 <store_file_packet+0x126>
            f_close(&file_object);
   16f38:	4b22      	ldr	r3, [pc, #136]	; (16fc4 <store_file_packet+0x198>)
   16f3a:	0018      	movs	r0, r3
   16f3c:	4b2a      	ldr	r3, [pc, #168]	; (16fe8 <store_file_packet+0x1bc>)
   16f3e:	4798      	blx	r3
            add_state(CANCELED);
   16f40:	2020      	movs	r0, #32
   16f42:	4b25      	ldr	r3, [pc, #148]	; (16fd8 <store_file_packet+0x1ac>)
   16f44:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file write error, download canceled.\r\n");
   16f46:	4b29      	ldr	r3, [pc, #164]	; (16fec <store_file_packet+0x1c0>)
   16f48:	0019      	movs	r1, r3
   16f4a:	2001      	movs	r0, #1
   16f4c:	4b16      	ldr	r3, [pc, #88]	; (16fa8 <store_file_packet+0x17c>)
   16f4e:	4798      	blx	r3
            return;
   16f50:	e024      	b.n	16f9c <store_file_packet+0x170>
        }

        received_file_size += wsize;
   16f52:	4b23      	ldr	r3, [pc, #140]	; (16fe0 <store_file_packet+0x1b4>)
   16f54:	681a      	ldr	r2, [r3, #0]
   16f56:	68fb      	ldr	r3, [r7, #12]
   16f58:	18d2      	adds	r2, r2, r3
   16f5a:	4b21      	ldr	r3, [pc, #132]	; (16fe0 <store_file_packet+0x1b4>)
   16f5c:	601a      	str	r2, [r3, #0]
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   16f5e:	4b20      	ldr	r3, [pc, #128]	; (16fe0 <store_file_packet+0x1b4>)
   16f60:	681a      	ldr	r2, [r3, #0]
   16f62:	4b23      	ldr	r3, [pc, #140]	; (16ff0 <store_file_packet+0x1c4>)
   16f64:	681b      	ldr	r3, [r3, #0]
   16f66:	4923      	ldr	r1, [pc, #140]	; (16ff4 <store_file_packet+0x1c8>)
   16f68:	2001      	movs	r0, #1
   16f6a:	4c0f      	ldr	r4, [pc, #60]	; (16fa8 <store_file_packet+0x17c>)
   16f6c:	47a0      	blx	r4
        if (received_file_size >= http_file_size) {
   16f6e:	4b1c      	ldr	r3, [pc, #112]	; (16fe0 <store_file_packet+0x1b4>)
   16f70:	681a      	ldr	r2, [r3, #0]
   16f72:	4b1f      	ldr	r3, [pc, #124]	; (16ff0 <store_file_packet+0x1c4>)
   16f74:	681b      	ldr	r3, [r3, #0]
   16f76:	429a      	cmp	r2, r3
   16f78:	d310      	bcc.n	16f9c <store_file_packet+0x170>
            f_close(&file_object);
   16f7a:	4b12      	ldr	r3, [pc, #72]	; (16fc4 <store_file_packet+0x198>)
   16f7c:	0018      	movs	r0, r3
   16f7e:	4b1a      	ldr	r3, [pc, #104]	; (16fe8 <store_file_packet+0x1bc>)
   16f80:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file downloaded successfully.\r\n");
   16f82:	4b1d      	ldr	r3, [pc, #116]	; (16ff8 <store_file_packet+0x1cc>)
   16f84:	0019      	movs	r1, r3
   16f86:	2001      	movs	r0, #1
   16f88:	4b07      	ldr	r3, [pc, #28]	; (16fa8 <store_file_packet+0x17c>)
   16f8a:	4798      	blx	r3
            port_pin_set_output_level(LED_0_PIN, false);
   16f8c:	2100      	movs	r1, #0
   16f8e:	2017      	movs	r0, #23
   16f90:	4b1a      	ldr	r3, [pc, #104]	; (16ffc <store_file_packet+0x1d0>)
   16f92:	4798      	blx	r3
            add_state(COMPLETED);
   16f94:	2010      	movs	r0, #16
   16f96:	4b10      	ldr	r3, [pc, #64]	; (16fd8 <store_file_packet+0x1ac>)
   16f98:	4798      	blx	r3
            return;
   16f9a:	46c0      	nop			; (mov r8, r8)
        }
    }
}
   16f9c:	46bd      	mov	sp, r7
   16f9e:	b006      	add	sp, #24
   16fa0:	bdb0      	pop	{r4, r5, r7, pc}
   16fa2:	46c0      	nop			; (mov r8, r8)
   16fa4:	00037314 	.word	0x00037314
   16fa8:	0001eb71 	.word	0x0001eb71
   16fac:	00016a49 	.word	0x00016a49
   16fb0:	200000b4 	.word	0x200000b4
   16fb4:	00037310 	.word	0x00037310
   16fb8:	000359a7 	.word	0x000359a7
   16fbc:	200000b6 	.word	0x200000b6
   16fc0:	0003595b 	.word	0x0003595b
   16fc4:	2000086c 	.word	0x2000086c
   16fc8:	00016acd 	.word	0x00016acd
   16fcc:	00037378 	.word	0x00037378
   16fd0:	0002e545 	.word	0x0002e545
   16fd4:	00037338 	.word	0x00037338
   16fd8:	00016a21 	.word	0x00016a21
   16fdc:	000373a0 	.word	0x000373a0
   16fe0:	20000894 	.word	0x20000894
   16fe4:	0002ea75 	.word	0x0002ea75
   16fe8:	0002ef45 	.word	0x0002ef45
   16fec:	000373d4 	.word	0x000373d4
   16ff0:	20000890 	.word	0x20000890
   16ff4:	00037410 	.word	0x00037410
   16ff8:	00037444 	.word	0x00037444
   16ffc:	00016985 	.word	0x00016985

00017000 <http_client_callback>:
 * \param[in]  module_inst     Module instance of HTTP client module.
 * \param[in]  type            Type of event.
 * \param[in]  data            Data structure of the event. \refer http_client_data
 */
static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
   17000:	b590      	push	{r4, r7, lr}
   17002:	b085      	sub	sp, #20
   17004:	af00      	add	r7, sp, #0
   17006:	60f8      	str	r0, [r7, #12]
   17008:	60b9      	str	r1, [r7, #8]
   1700a:	607a      	str	r2, [r7, #4]
    switch (type) {
   1700c:	68bb      	ldr	r3, [r7, #8]
   1700e:	2b04      	cmp	r3, #4
   17010:	d900      	bls.n	17014 <http_client_callback+0x14>
   17012:	e077      	b.n	17104 <http_client_callback+0x104>
   17014:	68bb      	ldr	r3, [r7, #8]
   17016:	009a      	lsls	r2, r3, #2
   17018:	4b3c      	ldr	r3, [pc, #240]	; (1710c <http_client_callback+0x10c>)
   1701a:	18d3      	adds	r3, r2, r3
   1701c:	681b      	ldr	r3, [r3, #0]
   1701e:	469f      	mov	pc, r3
        case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: HTTP client socket connected.\r\n");
   17020:	4b3b      	ldr	r3, [pc, #236]	; (17110 <http_client_callback+0x110>)
   17022:	0019      	movs	r1, r3
   17024:	2001      	movs	r0, #1
   17026:	4b3b      	ldr	r3, [pc, #236]	; (17114 <http_client_callback+0x114>)
   17028:	4798      	blx	r3
            break;
   1702a:	e06b      	b.n	17104 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_REQUESTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: request completed.\r\n");
   1702c:	4b3a      	ldr	r3, [pc, #232]	; (17118 <http_client_callback+0x118>)
   1702e:	0019      	movs	r1, r3
   17030:	2001      	movs	r0, #1
   17032:	4b38      	ldr	r3, [pc, #224]	; (17114 <http_client_callback+0x114>)
   17034:	4798      	blx	r3
            add_state(GET_REQUESTED);
   17036:	2004      	movs	r0, #4
   17038:	4b38      	ldr	r3, [pc, #224]	; (1711c <http_client_callback+0x11c>)
   1703a:	4798      	blx	r3
            break;
   1703c:	e062      	b.n	17104 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: received response %u data size %u\r\n", (unsigned int)data->recv_response.response_code, (unsigned int)data->recv_response.content_length);
   1703e:	687b      	ldr	r3, [r7, #4]
   17040:	881b      	ldrh	r3, [r3, #0]
   17042:	001a      	movs	r2, r3
   17044:	687b      	ldr	r3, [r7, #4]
   17046:	685b      	ldr	r3, [r3, #4]
   17048:	4935      	ldr	r1, [pc, #212]	; (17120 <http_client_callback+0x120>)
   1704a:	2001      	movs	r0, #1
   1704c:	4c31      	ldr	r4, [pc, #196]	; (17114 <http_client_callback+0x114>)
   1704e:	47a0      	blx	r4
            if ((unsigned int)data->recv_response.response_code == 200) {
   17050:	687b      	ldr	r3, [r7, #4]
   17052:	881b      	ldrh	r3, [r3, #0]
   17054:	2bc8      	cmp	r3, #200	; 0xc8
   17056:	d10d      	bne.n	17074 <http_client_callback+0x74>
                http_file_size = data->recv_response.content_length;
   17058:	687b      	ldr	r3, [r7, #4]
   1705a:	685a      	ldr	r2, [r3, #4]
   1705c:	4b31      	ldr	r3, [pc, #196]	; (17124 <http_client_callback+0x124>)
   1705e:	601a      	str	r2, [r3, #0]
                received_file_size = 0;
   17060:	4b31      	ldr	r3, [pc, #196]	; (17128 <http_client_callback+0x128>)
   17062:	2200      	movs	r2, #0
   17064:	601a      	str	r2, [r3, #0]
            } else {
                add_state(CANCELED);
                return;
            }
            if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   17066:	687b      	ldr	r3, [r7, #4]
   17068:	685a      	ldr	r2, [r3, #4]
   1706a:	2380      	movs	r3, #128	; 0x80
   1706c:	009b      	lsls	r3, r3, #2
   1706e:	429a      	cmp	r2, r3
   17070:	d843      	bhi.n	170fa <http_client_callback+0xfa>
   17072:	e003      	b.n	1707c <http_client_callback+0x7c>
                add_state(CANCELED);
   17074:	2020      	movs	r0, #32
   17076:	4b29      	ldr	r3, [pc, #164]	; (1711c <http_client_callback+0x11c>)
   17078:	4798      	blx	r3
                return;
   1707a:	e043      	b.n	17104 <http_client_callback+0x104>
                store_file_packet(data->recv_response.content, data->recv_response.content_length);
   1707c:	687b      	ldr	r3, [r7, #4]
   1707e:	689a      	ldr	r2, [r3, #8]
   17080:	687b      	ldr	r3, [r7, #4]
   17082:	685b      	ldr	r3, [r3, #4]
   17084:	0019      	movs	r1, r3
   17086:	0010      	movs	r0, r2
   17088:	4b28      	ldr	r3, [pc, #160]	; (1712c <http_client_callback+0x12c>)
   1708a:	4798      	blx	r3
                add_state(COMPLETED);
   1708c:	2010      	movs	r0, #16
   1708e:	4b23      	ldr	r3, [pc, #140]	; (1711c <http_client_callback+0x11c>)
   17090:	4798      	blx	r3
            }
            break;
   17092:	e032      	b.n	170fa <http_client_callback+0xfa>

        case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
            store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   17094:	687b      	ldr	r3, [r7, #4]
   17096:	685a      	ldr	r2, [r3, #4]
   17098:	687b      	ldr	r3, [r7, #4]
   1709a:	681b      	ldr	r3, [r3, #0]
   1709c:	0019      	movs	r1, r3
   1709e:	0010      	movs	r0, r2
   170a0:	4b22      	ldr	r3, [pc, #136]	; (1712c <http_client_callback+0x12c>)
   170a2:	4798      	blx	r3
            if (data->recv_chunked_data.is_complete) {
   170a4:	687b      	ldr	r3, [r7, #4]
   170a6:	7a1b      	ldrb	r3, [r3, #8]
   170a8:	2b00      	cmp	r3, #0
   170aa:	d028      	beq.n	170fe <http_client_callback+0xfe>
                add_state(COMPLETED);
   170ac:	2010      	movs	r0, #16
   170ae:	4b1b      	ldr	r3, [pc, #108]	; (1711c <http_client_callback+0x11c>)
   170b0:	4798      	blx	r3
            }

            break;
   170b2:	e024      	b.n	170fe <http_client_callback+0xfe>

        case HTTP_CLIENT_CALLBACK_DISCONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   170b4:	687b      	ldr	r3, [r7, #4]
   170b6:	681a      	ldr	r2, [r3, #0]
   170b8:	4b1d      	ldr	r3, [pc, #116]	; (17130 <http_client_callback+0x130>)
   170ba:	0019      	movs	r1, r3
   170bc:	2001      	movs	r0, #1
   170be:	4b15      	ldr	r3, [pc, #84]	; (17114 <http_client_callback+0x114>)
   170c0:	4798      	blx	r3

            /* If disconnect reason is equal to -ECONNRESET(-104),
             * It means the server has closed the connection (timeout).
             * This is normal operation.
             */
            if (data->disconnected.reason == -EAGAIN) {
   170c2:	687b      	ldr	r3, [r7, #4]
   170c4:	681b      	ldr	r3, [r3, #0]
   170c6:	330b      	adds	r3, #11
   170c8:	d11b      	bne.n	17102 <http_client_callback+0x102>
                /* Server has not responded. Retry immediately. */
                if (is_state_set(DOWNLOADING)) {
   170ca:	2008      	movs	r0, #8
   170cc:	4b19      	ldr	r3, [pc, #100]	; (17134 <http_client_callback+0x134>)
   170ce:	4798      	blx	r3
   170d0:	1e03      	subs	r3, r0, #0
   170d2:	d006      	beq.n	170e2 <http_client_callback+0xe2>
                    f_close(&file_object);
   170d4:	4b18      	ldr	r3, [pc, #96]	; (17138 <http_client_callback+0x138>)
   170d6:	0018      	movs	r0, r3
   170d8:	4b18      	ldr	r3, [pc, #96]	; (1713c <http_client_callback+0x13c>)
   170da:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   170dc:	2008      	movs	r0, #8
   170de:	4b18      	ldr	r3, [pc, #96]	; (17140 <http_client_callback+0x140>)
   170e0:	4798      	blx	r3
                }

                if (is_state_set(GET_REQUESTED)) {
   170e2:	2004      	movs	r0, #4
   170e4:	4b13      	ldr	r3, [pc, #76]	; (17134 <http_client_callback+0x134>)
   170e6:	4798      	blx	r3
   170e8:	1e03      	subs	r3, r0, #0
   170ea:	d002      	beq.n	170f2 <http_client_callback+0xf2>
                    clear_state(GET_REQUESTED);
   170ec:	2004      	movs	r0, #4
   170ee:	4b14      	ldr	r3, [pc, #80]	; (17140 <http_client_callback+0x140>)
   170f0:	4798      	blx	r3
                }

                start_download();
   170f2:	4b14      	ldr	r3, [pc, #80]	; (17144 <http_client_callback+0x144>)
   170f4:	4798      	blx	r3
            }

            break;
   170f6:	46c0      	nop			; (mov r8, r8)
   170f8:	e003      	b.n	17102 <http_client_callback+0x102>
            break;
   170fa:	46c0      	nop			; (mov r8, r8)
   170fc:	e002      	b.n	17104 <http_client_callback+0x104>
            break;
   170fe:	46c0      	nop			; (mov r8, r8)
   17100:	e000      	b.n	17104 <http_client_callback+0x104>
            break;
   17102:	46c0      	nop			; (mov r8, r8)
    }
}
   17104:	46bd      	mov	sp, r7
   17106:	b005      	add	sp, #20
   17108:	bd90      	pop	{r4, r7, pc}
   1710a:	46c0      	nop			; (mov r8, r8)
   1710c:	00037ba0 	.word	0x00037ba0
   17110:	00037478 	.word	0x00037478
   17114:	0001eb71 	.word	0x0001eb71
   17118:	000374b0 	.word	0x000374b0
   1711c:	00016a21 	.word	0x00016a21
   17120:	000374dc 	.word	0x000374dc
   17124:	20000890 	.word	0x20000890
   17128:	20000894 	.word	0x20000894
   1712c:	00016e2d 	.word	0x00016e2d
   17130:	00037518 	.word	0x00037518
   17134:	00016a49 	.word	0x00016a49
   17138:	2000086c 	.word	0x2000086c
   1713c:	0002ef45 	.word	0x0002ef45
   17140:	000169ed 	.word	0x000169ed
   17144:	00016d71 	.word	0x00016d71

00017148 <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   17148:	b580      	push	{r7, lr}
   1714a:	b082      	sub	sp, #8
   1714c:	af00      	add	r7, sp, #0
   1714e:	603a      	str	r2, [r7, #0]
   17150:	1dfb      	adds	r3, r7, #7
   17152:	1c02      	adds	r2, r0, #0
   17154:	701a      	strb	r2, [r3, #0]
   17156:	1dbb      	adds	r3, r7, #6
   17158:	1c0a      	adds	r2, r1, #0
   1715a:	701a      	strb	r2, [r3, #0]
    http_client_socket_event_handler(sock, u8Msg, pvMsg);
   1715c:	683a      	ldr	r2, [r7, #0]
   1715e:	1dbb      	adds	r3, r7, #6
   17160:	7819      	ldrb	r1, [r3, #0]
   17162:	1dfb      	adds	r3, r7, #7
   17164:	781b      	ldrb	r3, [r3, #0]
   17166:	b25b      	sxtb	r3, r3
   17168:	0018      	movs	r0, r3
   1716a:	4b03      	ldr	r3, [pc, #12]	; (17178 <socket_cb+0x30>)
   1716c:	4798      	blx	r3
}
   1716e:	46c0      	nop			; (mov r8, r8)
   17170:	46bd      	mov	sp, r7
   17172:	b002      	add	sp, #8
   17174:	bd80      	pop	{r7, pc}
   17176:	46c0      	nop			; (mov r8, r8)
   17178:	000318a9 	.word	0x000318a9

0001717c <resolve_cb>:
 * \brief Callback for the gethostbyname function (DNS Resolution callback).
 * \param[in] pu8DomainName Domain name of the host.
 * \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
 */
static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
   1717c:	b5b0      	push	{r4, r5, r7, lr}
   1717e:	b086      	sub	sp, #24
   17180:	af04      	add	r7, sp, #16
   17182:	6078      	str	r0, [r7, #4]
   17184:	6039      	str	r1, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
               "resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n",
               pu8DomainName,
               (int)IPV4_BYTE(u32ServerIP, 0),
   17186:	683b      	ldr	r3, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
   17188:	22ff      	movs	r2, #255	; 0xff
   1718a:	4013      	ands	r3, r2
   1718c:	001c      	movs	r4, r3
               (int)IPV4_BYTE(u32ServerIP, 1),
   1718e:	683b      	ldr	r3, [r7, #0]
   17190:	0a1b      	lsrs	r3, r3, #8
   17192:	001a      	movs	r2, r3
    LogMessage(LOG_DEBUG_LVL,
   17194:	23ff      	movs	r3, #255	; 0xff
   17196:	4013      	ands	r3, r2
               (int)IPV4_BYTE(u32ServerIP, 2),
   17198:	683a      	ldr	r2, [r7, #0]
   1719a:	0c12      	lsrs	r2, r2, #16
   1719c:	0011      	movs	r1, r2
    LogMessage(LOG_DEBUG_LVL,
   1719e:	22ff      	movs	r2, #255	; 0xff
   171a0:	400a      	ands	r2, r1
               (int)IPV4_BYTE(u32ServerIP, 3));
   171a2:	6839      	ldr	r1, [r7, #0]
   171a4:	0e09      	lsrs	r1, r1, #24
    LogMessage(LOG_DEBUG_LVL,
   171a6:	000d      	movs	r5, r1
   171a8:	6878      	ldr	r0, [r7, #4]
   171aa:	4909      	ldr	r1, [pc, #36]	; (171d0 <resolve_cb+0x54>)
   171ac:	9502      	str	r5, [sp, #8]
   171ae:	9201      	str	r2, [sp, #4]
   171b0:	9300      	str	r3, [sp, #0]
   171b2:	0023      	movs	r3, r4
   171b4:	0002      	movs	r2, r0
   171b6:	2001      	movs	r0, #1
   171b8:	4c06      	ldr	r4, [pc, #24]	; (171d4 <resolve_cb+0x58>)
   171ba:	47a0      	blx	r4
    http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   171bc:	683a      	ldr	r2, [r7, #0]
   171be:	687b      	ldr	r3, [r7, #4]
   171c0:	0011      	movs	r1, r2
   171c2:	0018      	movs	r0, r3
   171c4:	4b04      	ldr	r3, [pc, #16]	; (171d8 <resolve_cb+0x5c>)
   171c6:	4798      	blx	r3
}
   171c8:	46c0      	nop			; (mov r8, r8)
   171ca:	46bd      	mov	sp, r7
   171cc:	b002      	add	sp, #8
   171ce:	bdb0      	pop	{r4, r5, r7, pc}
   171d0:	00037548 	.word	0x00037548
   171d4:	0001eb71 	.word	0x0001eb71
   171d8:	00031a0d 	.word	0x00031a0d

000171dc <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
   171dc:	b590      	push	{r4, r7, lr}
   171de:	b087      	sub	sp, #28
   171e0:	af02      	add	r7, sp, #8
   171e2:	0002      	movs	r2, r0
   171e4:	6039      	str	r1, [r7, #0]
   171e6:	1dfb      	adds	r3, r7, #7
   171e8:	701a      	strb	r2, [r3, #0]
    switch (u8MsgType) {
   171ea:	1dfb      	adds	r3, r7, #7
   171ec:	781b      	ldrb	r3, [r3, #0]
   171ee:	2b2c      	cmp	r3, #44	; 0x2c
   171f0:	d002      	beq.n	171f8 <wifi_cb+0x1c>
   171f2:	2b32      	cmp	r3, #50	; 0x32
   171f4:	d03d      	beq.n	17272 <wifi_cb+0x96>
                }
            }
        } break;

        default:
            break;
   171f6:	e06f      	b.n	172d8 <wifi_cb+0xfc>
            tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
   171f8:	683b      	ldr	r3, [r7, #0]
   171fa:	60fb      	str	r3, [r7, #12]
            if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   171fc:	68fb      	ldr	r3, [r7, #12]
   171fe:	781b      	ldrb	r3, [r3, #0]
   17200:	2b01      	cmp	r3, #1
   17202:	d107      	bne.n	17214 <wifi_cb+0x38>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_CONNECTED\r\n");
   17204:	4b36      	ldr	r3, [pc, #216]	; (172e0 <wifi_cb+0x104>)
   17206:	0019      	movs	r1, r3
   17208:	2001      	movs	r0, #1
   1720a:	4b36      	ldr	r3, [pc, #216]	; (172e4 <wifi_cb+0x108>)
   1720c:	4798      	blx	r3
                m2m_wifi_request_dhcp_client();
   1720e:	4b36      	ldr	r3, [pc, #216]	; (172e8 <wifi_cb+0x10c>)
   17210:	4798      	blx	r3
            break;
   17212:	e05e      	b.n	172d2 <wifi_cb+0xf6>
            } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   17214:	68fb      	ldr	r3, [r7, #12]
   17216:	781b      	ldrb	r3, [r3, #0]
   17218:	2b00      	cmp	r3, #0
   1721a:	d15a      	bne.n	172d2 <wifi_cb+0xf6>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   1721c:	4b33      	ldr	r3, [pc, #204]	; (172ec <wifi_cb+0x110>)
   1721e:	0019      	movs	r1, r3
   17220:	2001      	movs	r0, #1
   17222:	4b30      	ldr	r3, [pc, #192]	; (172e4 <wifi_cb+0x108>)
   17224:	4798      	blx	r3
                clear_state(WIFI_CONNECTED);
   17226:	2002      	movs	r0, #2
   17228:	4b31      	ldr	r3, [pc, #196]	; (172f0 <wifi_cb+0x114>)
   1722a:	4798      	blx	r3
                if (is_state_set(DOWNLOADING)) {
   1722c:	2008      	movs	r0, #8
   1722e:	4b31      	ldr	r3, [pc, #196]	; (172f4 <wifi_cb+0x118>)
   17230:	4798      	blx	r3
   17232:	1e03      	subs	r3, r0, #0
   17234:	d006      	beq.n	17244 <wifi_cb+0x68>
                    f_close(&file_object);
   17236:	4b30      	ldr	r3, [pc, #192]	; (172f8 <wifi_cb+0x11c>)
   17238:	0018      	movs	r0, r3
   1723a:	4b30      	ldr	r3, [pc, #192]	; (172fc <wifi_cb+0x120>)
   1723c:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   1723e:	2008      	movs	r0, #8
   17240:	4b2b      	ldr	r3, [pc, #172]	; (172f0 <wifi_cb+0x114>)
   17242:	4798      	blx	r3
                if (is_state_set(GET_REQUESTED)) {
   17244:	2004      	movs	r0, #4
   17246:	4b2b      	ldr	r3, [pc, #172]	; (172f4 <wifi_cb+0x118>)
   17248:	4798      	blx	r3
   1724a:	1e03      	subs	r3, r0, #0
   1724c:	d002      	beq.n	17254 <wifi_cb+0x78>
                    clear_state(GET_REQUESTED);
   1724e:	2004      	movs	r0, #4
   17250:	4b27      	ldr	r3, [pc, #156]	; (172f0 <wifi_cb+0x114>)
   17252:	4798      	blx	r3
                mqtt_disconnect(&mqtt_inst, 1);
   17254:	4b2a      	ldr	r3, [pc, #168]	; (17300 <wifi_cb+0x124>)
   17256:	2101      	movs	r1, #1
   17258:	0018      	movs	r0, r3
   1725a:	4b2a      	ldr	r3, [pc, #168]	; (17304 <wifi_cb+0x128>)
   1725c:	4798      	blx	r3
                m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   1725e:	4a2a      	ldr	r2, [pc, #168]	; (17308 <wifi_cb+0x12c>)
   17260:	482a      	ldr	r0, [pc, #168]	; (1730c <wifi_cb+0x130>)
   17262:	23ff      	movs	r3, #255	; 0xff
   17264:	9300      	str	r3, [sp, #0]
   17266:	0013      	movs	r3, r2
   17268:	2202      	movs	r2, #2
   1726a:	2106      	movs	r1, #6
   1726c:	4c28      	ldr	r4, [pc, #160]	; (17310 <wifi_cb+0x134>)
   1726e:	47a0      	blx	r4
            break;
   17270:	e02f      	b.n	172d2 <wifi_cb+0xf6>
            uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
   17272:	683b      	ldr	r3, [r7, #0]
   17274:	60bb      	str	r3, [r7, #8]
            LogMessage(LOG_DEBUG_LVL, "wifi_cb: IP address is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   17276:	68bb      	ldr	r3, [r7, #8]
   17278:	781b      	ldrb	r3, [r3, #0]
   1727a:	0018      	movs	r0, r3
   1727c:	68bb      	ldr	r3, [r7, #8]
   1727e:	3301      	adds	r3, #1
   17280:	781b      	ldrb	r3, [r3, #0]
   17282:	001c      	movs	r4, r3
   17284:	68bb      	ldr	r3, [r7, #8]
   17286:	3302      	adds	r3, #2
   17288:	781b      	ldrb	r3, [r3, #0]
   1728a:	001a      	movs	r2, r3
   1728c:	68bb      	ldr	r3, [r7, #8]
   1728e:	3303      	adds	r3, #3
   17290:	781b      	ldrb	r3, [r3, #0]
   17292:	4920      	ldr	r1, [pc, #128]	; (17314 <wifi_cb+0x138>)
   17294:	9301      	str	r3, [sp, #4]
   17296:	9200      	str	r2, [sp, #0]
   17298:	0023      	movs	r3, r4
   1729a:	0002      	movs	r2, r0
   1729c:	2001      	movs	r0, #1
   1729e:	4c11      	ldr	r4, [pc, #68]	; (172e4 <wifi_cb+0x108>)
   172a0:	47a0      	blx	r4
            add_state(WIFI_CONNECTED);
   172a2:	2002      	movs	r0, #2
   172a4:	4b1c      	ldr	r3, [pc, #112]	; (17318 <wifi_cb+0x13c>)
   172a6:	4798      	blx	r3
            if (do_download_flag == 1) {
   172a8:	4b1c      	ldr	r3, [pc, #112]	; (1731c <wifi_cb+0x140>)
   172aa:	781b      	ldrb	r3, [r3, #0]
   172ac:	2b01      	cmp	r3, #1
   172ae:	d102      	bne.n	172b6 <wifi_cb+0xda>
                start_download();
   172b0:	4b1b      	ldr	r3, [pc, #108]	; (17320 <wifi_cb+0x144>)
   172b2:	4798      	blx	r3
        } break;
   172b4:	e00f      	b.n	172d6 <wifi_cb+0xfa>
                if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   172b6:	4a1b      	ldr	r2, [pc, #108]	; (17324 <wifi_cb+0x148>)
   172b8:	4b11      	ldr	r3, [pc, #68]	; (17300 <wifi_cb+0x124>)
   172ba:	0011      	movs	r1, r2
   172bc:	0018      	movs	r0, r3
   172be:	4b1a      	ldr	r3, [pc, #104]	; (17328 <wifi_cb+0x14c>)
   172c0:	4798      	blx	r3
   172c2:	1e03      	subs	r3, r0, #0
   172c4:	d007      	beq.n	172d6 <wifi_cb+0xfa>
                    LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   172c6:	4b19      	ldr	r3, [pc, #100]	; (1732c <wifi_cb+0x150>)
   172c8:	0019      	movs	r1, r3
   172ca:	2001      	movs	r0, #1
   172cc:	4b05      	ldr	r3, [pc, #20]	; (172e4 <wifi_cb+0x108>)
   172ce:	4798      	blx	r3
        } break;
   172d0:	e001      	b.n	172d6 <wifi_cb+0xfa>
            break;
   172d2:	46c0      	nop			; (mov r8, r8)
   172d4:	e000      	b.n	172d8 <wifi_cb+0xfc>
        } break;
   172d6:	46c0      	nop			; (mov r8, r8)
    }
}
   172d8:	46c0      	nop			; (mov r8, r8)
   172da:	46bd      	mov	sp, r7
   172dc:	b005      	add	sp, #20
   172de:	bd90      	pop	{r4, r7, pc}
   172e0:	00037578 	.word	0x00037578
   172e4:	0001eb71 	.word	0x0001eb71
   172e8:	00023079 	.word	0x00023079
   172ec:	00037598 	.word	0x00037598
   172f0:	000169ed 	.word	0x000169ed
   172f4:	00016a49 	.word	0x00016a49
   172f8:	2000086c 	.word	0x2000086c
   172fc:	0002ef45 	.word	0x0002ef45
   17300:	20000898 	.word	0x20000898
   17304:	00030555 	.word	0x00030555
   17308:	000375bc 	.word	0x000375bc
   1730c:	000375c8 	.word	0x000375c8
   17310:	00022ba5 	.word	0x00022ba5
   17314:	000375d0 	.word	0x000375d0
   17318:	00016a21 	.word	0x00016a21
   1731c:	20000638 	.word	0x20000638
   17320:	00016d71 	.word	0x00016d71
   17324:	000371e8 	.word	0x000371e8
   17328:	00030421 	.word	0x00030421
   1732c:	000375f8 	.word	0x000375f8

00017330 <init_storage>:

/**
 * \brief Initialize SD/MMC storage.
 */
void init_storage(void)
{
   17330:	b590      	push	{r4, r7, lr}
   17332:	b083      	sub	sp, #12
   17334:	af00      	add	r7, sp, #0
    FRESULT res;
    Ctrl_status status;

    /* Initialize SD/MMC stack. */
    sd_mmc_init();
   17336:	4b29      	ldr	r3, [pc, #164]	; (173dc <init_storage+0xac>)
   17338:	4798      	blx	r3
    while (true) {
        LogMessage(LOG_DEBUG_LVL, "init_storage: please plug an SD/MMC card in slot...\r\n");
   1733a:	4b29      	ldr	r3, [pc, #164]	; (173e0 <init_storage+0xb0>)
   1733c:	0019      	movs	r1, r3
   1733e:	2001      	movs	r0, #1
   17340:	4b28      	ldr	r3, [pc, #160]	; (173e4 <init_storage+0xb4>)
   17342:	4798      	blx	r3

        /* Wait card present and ready. */
        do {
            status = sd_mmc_test_unit_ready(0);
   17344:	1dfc      	adds	r4, r7, #7
   17346:	2000      	movs	r0, #0
   17348:	4b27      	ldr	r3, [pc, #156]	; (173e8 <init_storage+0xb8>)
   1734a:	4798      	blx	r3
   1734c:	0003      	movs	r3, r0
   1734e:	7023      	strb	r3, [r4, #0]
            if (CTRL_FAIL == status) {
   17350:	1dfb      	adds	r3, r7, #7
   17352:	781b      	ldrb	r3, [r3, #0]
   17354:	2b01      	cmp	r3, #1
   17356:	d110      	bne.n	1737a <init_storage+0x4a>
                LogMessage(LOG_DEBUG_LVL, "init_storage: SD Card install failed.\r\n");
   17358:	4b24      	ldr	r3, [pc, #144]	; (173ec <init_storage+0xbc>)
   1735a:	0019      	movs	r1, r3
   1735c:	2001      	movs	r0, #1
   1735e:	4b21      	ldr	r3, [pc, #132]	; (173e4 <init_storage+0xb4>)
   17360:	4798      	blx	r3
                LogMessage(LOG_DEBUG_LVL, "init_storage: try unplug and re-plug the card.\r\n");
   17362:	4b23      	ldr	r3, [pc, #140]	; (173f0 <init_storage+0xc0>)
   17364:	0019      	movs	r1, r3
   17366:	2001      	movs	r0, #1
   17368:	4b1e      	ldr	r3, [pc, #120]	; (173e4 <init_storage+0xb4>)
   1736a:	4798      	blx	r3
                while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
   1736c:	46c0      	nop			; (mov r8, r8)
   1736e:	2000      	movs	r0, #0
   17370:	4b20      	ldr	r3, [pc, #128]	; (173f4 <init_storage+0xc4>)
   17372:	4798      	blx	r3
   17374:	0003      	movs	r3, r0
   17376:	2b02      	cmp	r3, #2
   17378:	d1f9      	bne.n	1736e <init_storage+0x3e>
                }
            }
        } while (CTRL_GOOD != status);
   1737a:	1dfb      	adds	r3, r7, #7
   1737c:	781b      	ldrb	r3, [r3, #0]
   1737e:	2b00      	cmp	r3, #0
   17380:	d1e0      	bne.n	17344 <init_storage+0x14>

        LogMessage(LOG_DEBUG_LVL, "init_storage: mounting SD card...\r\n");
   17382:	4b1d      	ldr	r3, [pc, #116]	; (173f8 <init_storage+0xc8>)
   17384:	0019      	movs	r1, r3
   17386:	2001      	movs	r0, #1
   17388:	4b16      	ldr	r3, [pc, #88]	; (173e4 <init_storage+0xb4>)
   1738a:	4798      	blx	r3
        memset(&fatfs, 0, sizeof(FATFS));
   1738c:	238c      	movs	r3, #140	; 0x8c
   1738e:	009a      	lsls	r2, r3, #2
   17390:	4b1a      	ldr	r3, [pc, #104]	; (173fc <init_storage+0xcc>)
   17392:	2100      	movs	r1, #0
   17394:	0018      	movs	r0, r3
   17396:	4b1a      	ldr	r3, [pc, #104]	; (17400 <init_storage+0xd0>)
   17398:	4798      	blx	r3
        res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
   1739a:	1dbc      	adds	r4, r7, #6
   1739c:	4b17      	ldr	r3, [pc, #92]	; (173fc <init_storage+0xcc>)
   1739e:	0019      	movs	r1, r3
   173a0:	2000      	movs	r0, #0
   173a2:	4b18      	ldr	r3, [pc, #96]	; (17404 <init_storage+0xd4>)
   173a4:	4798      	blx	r3
   173a6:	0003      	movs	r3, r0
   173a8:	7023      	strb	r3, [r4, #0]
        if (FR_INVALID_DRIVE == res) {
   173aa:	1dbb      	adds	r3, r7, #6
   173ac:	781b      	ldrb	r3, [r3, #0]
   173ae:	2b0b      	cmp	r3, #11
   173b0:	d107      	bne.n	173c2 <init_storage+0x92>
            LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount failed! (res %d)\r\n", res);
   173b2:	1dbb      	adds	r3, r7, #6
   173b4:	781a      	ldrb	r2, [r3, #0]
   173b6:	4b14      	ldr	r3, [pc, #80]	; (17408 <init_storage+0xd8>)
   173b8:	0019      	movs	r1, r3
   173ba:	2001      	movs	r0, #1
   173bc:	4b09      	ldr	r3, [pc, #36]	; (173e4 <init_storage+0xb4>)
   173be:	4798      	blx	r3
            return;
   173c0:	e008      	b.n	173d4 <init_storage+0xa4>
        }

        LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount OK.\r\n");
   173c2:	4b12      	ldr	r3, [pc, #72]	; (1740c <init_storage+0xdc>)
   173c4:	0019      	movs	r1, r3
   173c6:	2001      	movs	r0, #1
   173c8:	4b06      	ldr	r3, [pc, #24]	; (173e4 <init_storage+0xb4>)
   173ca:	4798      	blx	r3
        add_state(STORAGE_READY);
   173cc:	2001      	movs	r0, #1
   173ce:	4b10      	ldr	r3, [pc, #64]	; (17410 <init_storage+0xe0>)
   173d0:	4798      	blx	r3
        return;
   173d2:	46c0      	nop			; (mov r8, r8)
    }
}
   173d4:	46bd      	mov	sp, r7
   173d6:	b003      	add	sp, #12
   173d8:	bd90      	pop	{r4, r7, pc}
   173da:	46c0      	nop			; (mov r8, r8)
   173dc:	0001f989 	.word	0x0001f989
   173e0:	0003761c 	.word	0x0003761c
   173e4:	0001eb71 	.word	0x0001eb71
   173e8:	0001fe65 	.word	0x0001fe65
   173ec:	00037654 	.word	0x00037654
   173f0:	0003767c 	.word	0x0003767c
   173f4:	0001f9d9 	.word	0x0001f9d9
   173f8:	000376b0 	.word	0x000376b0
   173fc:	2000063c 	.word	0x2000063c
   17400:	000355ef 	.word	0x000355ef
   17404:	0002e4ed 	.word	0x0002e4ed
   17408:	000376d4 	.word	0x000376d4
   1740c:	00037704 	.word	0x00037704
   17410:	00016a21 	.word	0x00016a21

00017414 <configure_timer>:

/**
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
   17414:	b580      	push	{r7, lr}
   17416:	b082      	sub	sp, #8
   17418:	af00      	add	r7, sp, #0
    struct sw_timer_config swt_conf;
    sw_timer_get_config_defaults(&swt_conf);
   1741a:	1d3b      	adds	r3, r7, #4
   1741c:	0018      	movs	r0, r3
   1741e:	4b08      	ldr	r3, [pc, #32]	; (17440 <configure_timer+0x2c>)
   17420:	4798      	blx	r3

    sw_timer_init(&swt_module_inst, &swt_conf);
   17422:	1d3a      	adds	r2, r7, #4
   17424:	4b07      	ldr	r3, [pc, #28]	; (17444 <configure_timer+0x30>)
   17426:	0011      	movs	r1, r2
   17428:	0018      	movs	r0, r3
   1742a:	4b07      	ldr	r3, [pc, #28]	; (17448 <configure_timer+0x34>)
   1742c:	4798      	blx	r3
    sw_timer_enable(&swt_module_inst);
   1742e:	4b05      	ldr	r3, [pc, #20]	; (17444 <configure_timer+0x30>)
   17430:	0018      	movs	r0, r3
   17432:	4b06      	ldr	r3, [pc, #24]	; (1744c <configure_timer+0x38>)
   17434:	4798      	blx	r3
}
   17436:	46c0      	nop			; (mov r8, r8)
   17438:	46bd      	mov	sp, r7
   1743a:	b002      	add	sp, #8
   1743c:	bd80      	pop	{r7, pc}
   1743e:	46c0      	nop			; (mov r8, r8)
   17440:	0003303d 	.word	0x0003303d
   17444:	20004900 	.word	0x20004900
   17448:	00033061 	.word	0x00033061
   1744c:	0003314d 	.word	0x0003314d

00017450 <configure_http_client>:

/**
 * \brief Configure HTTP client module.
 */
static void configure_http_client(void)
{
   17450:	b580      	push	{r7, lr}
   17452:	b088      	sub	sp, #32
   17454:	af00      	add	r7, sp, #0
    struct http_client_config httpc_conf;
    int ret;

    http_client_get_config_defaults(&httpc_conf);
   17456:	003b      	movs	r3, r7
   17458:	0018      	movs	r0, r3
   1745a:	4b16      	ldr	r3, [pc, #88]	; (174b4 <configure_http_client+0x64>)
   1745c:	4798      	blx	r3

    httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   1745e:	003b      	movs	r3, r7
   17460:	2280      	movs	r2, #128	; 0x80
   17462:	0092      	lsls	r2, r2, #2
   17464:	611a      	str	r2, [r3, #16]
    httpc_conf.timer_inst = &swt_module_inst;
   17466:	003b      	movs	r3, r7
   17468:	4a13      	ldr	r2, [pc, #76]	; (174b8 <configure_http_client+0x68>)
   1746a:	605a      	str	r2, [r3, #4]
    httpc_conf.port = 443;
   1746c:	003b      	movs	r3, r7
   1746e:	22bc      	movs	r2, #188	; 0xbc
   17470:	32ff      	adds	r2, #255	; 0xff
   17472:	801a      	strh	r2, [r3, #0]
    httpc_conf.tls = 1;
   17474:	003b      	movs	r3, r7
   17476:	2201      	movs	r2, #1
   17478:	709a      	strb	r2, [r3, #2]

    ret = http_client_init(&http_client_module_inst, &httpc_conf);
   1747a:	003a      	movs	r2, r7
   1747c:	4b0f      	ldr	r3, [pc, #60]	; (174bc <configure_http_client+0x6c>)
   1747e:	0011      	movs	r1, r2
   17480:	0018      	movs	r0, r3
   17482:	4b0f      	ldr	r3, [pc, #60]	; (174c0 <configure_http_client+0x70>)
   17484:	4798      	blx	r3
   17486:	0003      	movs	r3, r0
   17488:	61fb      	str	r3, [r7, #28]
    if (ret < 0) {
   1748a:	69fb      	ldr	r3, [r7, #28]
   1748c:	2b00      	cmp	r3, #0
   1748e:	da06      	bge.n	1749e <configure_http_client+0x4e>
        LogMessage(LOG_DEBUG_LVL, "configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   17490:	69fa      	ldr	r2, [r7, #28]
   17492:	4b0c      	ldr	r3, [pc, #48]	; (174c4 <configure_http_client+0x74>)
   17494:	0019      	movs	r1, r3
   17496:	2001      	movs	r0, #1
   17498:	4b0b      	ldr	r3, [pc, #44]	; (174c8 <configure_http_client+0x78>)
   1749a:	4798      	blx	r3
        while (1) {
   1749c:	e7fe      	b.n	1749c <configure_http_client+0x4c>
        } /* Loop forever. */
    }

    http_client_register_callback(&http_client_module_inst, http_client_callback);
   1749e:	4a0b      	ldr	r2, [pc, #44]	; (174cc <configure_http_client+0x7c>)
   174a0:	4b06      	ldr	r3, [pc, #24]	; (174bc <configure_http_client+0x6c>)
   174a2:	0011      	movs	r1, r2
   174a4:	0018      	movs	r0, r3
   174a6:	4b0a      	ldr	r3, [pc, #40]	; (174d0 <configure_http_client+0x80>)
   174a8:	4798      	blx	r3
}
   174aa:	46c0      	nop			; (mov r8, r8)
   174ac:	46bd      	mov	sp, r7
   174ae:	b008      	add	sp, #32
   174b0:	bd80      	pop	{r7, pc}
   174b2:	46c0      	nop			; (mov r8, r8)
   174b4:	000316d1 	.word	0x000316d1
   174b8:	20004900 	.word	0x20004900
   174bc:	20004958 	.word	0x20004958
   174c0:	0003171d 	.word	0x0003171d
   174c4:	00037728 	.word	0x00037728
   174c8:	0001eb71 	.word	0x0001eb71
   174cc:	00017001 	.word	0x00017001
   174d0:	00031809 	.word	0x00031809

000174d4 <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   174d4:	b580      	push	{r7, lr}
   174d6:	b082      	sub	sp, #8
   174d8:	af00      	add	r7, sp, #0
   174da:	603a      	str	r2, [r7, #0]
   174dc:	1dfb      	adds	r3, r7, #7
   174de:	1c02      	adds	r2, r0, #0
   174e0:	701a      	strb	r2, [r3, #0]
   174e2:	1dbb      	adds	r3, r7, #6
   174e4:	1c0a      	adds	r2, r1, #0
   174e6:	701a      	strb	r2, [r3, #0]
    mqtt_socket_event_handler(sock, msg_type, msg_data);
   174e8:	683a      	ldr	r2, [r7, #0]
   174ea:	1dbb      	adds	r3, r7, #6
   174ec:	7819      	ldrb	r1, [r3, #0]
   174ee:	1dfb      	adds	r3, r7, #7
   174f0:	781b      	ldrb	r3, [r3, #0]
   174f2:	b25b      	sxtb	r3, r3
   174f4:	0018      	movs	r0, r3
   174f6:	4b03      	ldr	r3, [pc, #12]	; (17504 <socket_event_handler+0x30>)
   174f8:	4798      	blx	r3
}
   174fa:	46c0      	nop			; (mov r8, r8)
   174fc:	46bd      	mov	sp, r7
   174fe:	b002      	add	sp, #8
   17500:	bd80      	pop	{r7, pc}
   17502:	46c0      	nop			; (mov r8, r8)
   17504:	000303c9 	.word	0x000303c9

00017508 <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   17508:	b580      	push	{r7, lr}
   1750a:	b082      	sub	sp, #8
   1750c:	af00      	add	r7, sp, #0
   1750e:	6078      	str	r0, [r7, #4]
   17510:	6039      	str	r1, [r7, #0]
    mqtt_socket_resolve_handler(doamin_name, server_ip);
   17512:	683a      	ldr	r2, [r7, #0]
   17514:	687b      	ldr	r3, [r7, #4]
   17516:	0011      	movs	r1, r2
   17518:	0018      	movs	r0, r3
   1751a:	4b03      	ldr	r3, [pc, #12]	; (17528 <socket_resolve_handler+0x20>)
   1751c:	4798      	blx	r3
}
   1751e:	46c0      	nop			; (mov r8, r8)
   17520:	46bd      	mov	sp, r7
   17522:	b002      	add	sp, #8
   17524:	bd80      	pop	{r7, pc}
   17526:	46c0      	nop			; (mov r8, r8)
   17528:	000303fd 	.word	0x000303fd

0001752c <SubscribeHandlerLedTopic>:
 *
 * \param[in] msgData Data to be received.
 */

void SubscribeHandlerLedTopic(MessageData *msgData)
{
   1752c:	b590      	push	{r4, r7, lr}
   1752e:	b089      	sub	sp, #36	; 0x24
   17530:	af02      	add	r7, sp, #8
   17532:	6078      	str	r0, [r7, #4]
    uint8_t rgb[3] = {0, 0, 0};
   17534:	2310      	movs	r3, #16
   17536:	18fb      	adds	r3, r7, r3
   17538:	2200      	movs	r2, #0
   1753a:	701a      	strb	r2, [r3, #0]
   1753c:	2310      	movs	r3, #16
   1753e:	18fb      	adds	r3, r7, r3
   17540:	2200      	movs	r2, #0
   17542:	705a      	strb	r2, [r3, #1]
   17544:	2310      	movs	r3, #16
   17546:	18fb      	adds	r3, r7, r3
   17548:	2200      	movs	r2, #0
   1754a:	709a      	strb	r2, [r3, #2]
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   1754c:	687b      	ldr	r3, [r7, #4]
   1754e:	685b      	ldr	r3, [r3, #4]
   17550:	685a      	ldr	r2, [r3, #4]
   17552:	687b      	ldr	r3, [r7, #4]
   17554:	685b      	ldr	r3, [r3, #4]
   17556:	689b      	ldr	r3, [r3, #8]
   17558:	492a      	ldr	r1, [pc, #168]	; (17604 <SubscribeHandlerLedTopic+0xd8>)
   1755a:	2001      	movs	r0, #1
   1755c:	4c2a      	ldr	r4, [pc, #168]	; (17608 <SubscribeHandlerLedTopic+0xdc>)
   1755e:	47a0      	blx	r4
    // Will receive something of the style "rgb(222, 224, 189)"
    if (strncmp(msgData->message->payload, "rgb(", 4) == 0) {
   17560:	687b      	ldr	r3, [r7, #4]
   17562:	681b      	ldr	r3, [r3, #0]
   17564:	689b      	ldr	r3, [r3, #8]
   17566:	4929      	ldr	r1, [pc, #164]	; (1760c <SubscribeHandlerLedTopic+0xe0>)
   17568:	2204      	movs	r2, #4
   1756a:	0018      	movs	r0, r3
   1756c:	4b28      	ldr	r3, [pc, #160]	; (17610 <SubscribeHandlerLedTopic+0xe4>)
   1756e:	4798      	blx	r3
   17570:	1e03      	subs	r3, r0, #0
   17572:	d143      	bne.n	175fc <SubscribeHandlerLedTopic+0xd0>
        char *p = (char *)&msgData->message->payload[4];
   17574:	687b      	ldr	r3, [r7, #4]
   17576:	681b      	ldr	r3, [r3, #0]
   17578:	689b      	ldr	r3, [r3, #8]
   1757a:	3304      	adds	r3, #4
   1757c:	60fb      	str	r3, [r7, #12]
        int nb = 0;
   1757e:	2300      	movs	r3, #0
   17580:	617b      	str	r3, [r7, #20]
        while (nb <= 2 && *p) {
   17582:	e015      	b.n	175b0 <SubscribeHandlerLedTopic+0x84>
            rgb[nb++] = strtol(p, &p, 10);
   17584:	697c      	ldr	r4, [r7, #20]
   17586:	1c63      	adds	r3, r4, #1
   17588:	617b      	str	r3, [r7, #20]
   1758a:	68fb      	ldr	r3, [r7, #12]
   1758c:	220c      	movs	r2, #12
   1758e:	18b9      	adds	r1, r7, r2
   17590:	220a      	movs	r2, #10
   17592:	0018      	movs	r0, r3
   17594:	4b1f      	ldr	r3, [pc, #124]	; (17614 <SubscribeHandlerLedTopic+0xe8>)
   17596:	4798      	blx	r3
   17598:	0003      	movs	r3, r0
   1759a:	b2da      	uxtb	r2, r3
   1759c:	2310      	movs	r3, #16
   1759e:	18fb      	adds	r3, r7, r3
   175a0:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
   175a2:	68fb      	ldr	r3, [r7, #12]
   175a4:	781b      	ldrb	r3, [r3, #0]
   175a6:	2b2c      	cmp	r3, #44	; 0x2c
   175a8:	d10a      	bne.n	175c0 <SubscribeHandlerLedTopic+0x94>
            p++; /* skip, */
   175aa:	68fb      	ldr	r3, [r7, #12]
   175ac:	3301      	adds	r3, #1
   175ae:	60fb      	str	r3, [r7, #12]
        while (nb <= 2 && *p) {
   175b0:	697b      	ldr	r3, [r7, #20]
   175b2:	2b02      	cmp	r3, #2
   175b4:	dc05      	bgt.n	175c2 <SubscribeHandlerLedTopic+0x96>
   175b6:	68fb      	ldr	r3, [r7, #12]
   175b8:	781b      	ldrb	r3, [r3, #0]
   175ba:	2b00      	cmp	r3, #0
   175bc:	d1e2      	bne.n	17584 <SubscribeHandlerLedTopic+0x58>
   175be:	e000      	b.n	175c2 <SubscribeHandlerLedTopic+0x96>
            if (*p != ',') break;
   175c0:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nRGB %d %d %d\r\n", rgb[0], rgb[1], rgb[2]);
   175c2:	2310      	movs	r3, #16
   175c4:	18fb      	adds	r3, r7, r3
   175c6:	781b      	ldrb	r3, [r3, #0]
   175c8:	001a      	movs	r2, r3
   175ca:	2310      	movs	r3, #16
   175cc:	18fb      	adds	r3, r7, r3
   175ce:	785b      	ldrb	r3, [r3, #1]
   175d0:	0018      	movs	r0, r3
   175d2:	2310      	movs	r3, #16
   175d4:	18fb      	adds	r3, r7, r3
   175d6:	789b      	ldrb	r3, [r3, #2]
   175d8:	490f      	ldr	r1, [pc, #60]	; (17618 <SubscribeHandlerLedTopic+0xec>)
   175da:	9300      	str	r3, [sp, #0]
   175dc:	0003      	movs	r3, r0
   175de:	2001      	movs	r0, #1
   175e0:	4c09      	ldr	r4, [pc, #36]	; (17608 <SubscribeHandlerLedTopic+0xdc>)
   175e2:	47a0      	blx	r4
        UIChangeColors(rgb[0], rgb[1], rgb[2]);
   175e4:	2310      	movs	r3, #16
   175e6:	18fb      	adds	r3, r7, r3
   175e8:	7818      	ldrb	r0, [r3, #0]
   175ea:	2310      	movs	r3, #16
   175ec:	18fb      	adds	r3, r7, r3
   175ee:	7859      	ldrb	r1, [r3, #1]
   175f0:	2310      	movs	r3, #16
   175f2:	18fb      	adds	r3, r7, r3
   175f4:	789b      	ldrb	r3, [r3, #2]
   175f6:	001a      	movs	r2, r3
   175f8:	4b08      	ldr	r3, [pc, #32]	; (1761c <SubscribeHandlerLedTopic+0xf0>)
   175fa:	4798      	blx	r3
    }
}
   175fc:	46c0      	nop			; (mov r8, r8)
   175fe:	46bd      	mov	sp, r7
   17600:	b007      	add	sp, #28
   17602:	bd90      	pop	{r4, r7, pc}
   17604:	00037770 	.word	0x00037770
   17608:	0001eb71 	.word	0x0001eb71
   1760c:	00037778 	.word	0x00037778
   17610:	000359b5 	.word	0x000359b5
   17614:	00035b61 	.word	0x00035b61
   17618:	00037780 	.word	0x00037780
   1761c:	000168b5 	.word	0x000168b5

00017620 <SubscribeHandlerGameTopic>:

void SubscribeHandlerGameTopic(MessageData *msgData)
{
   17620:	b590      	push	{r4, r7, lr}
   17622:	b08b      	sub	sp, #44	; 0x2c
   17624:	af00      	add	r7, sp, #0
   17626:	6078      	str	r0, [r7, #4]
    struct GameDataPacket game;
    memset(game.game, 0xff, sizeof(game.game));
   17628:	230c      	movs	r3, #12
   1762a:	18fb      	adds	r3, r7, r3
   1762c:	2214      	movs	r2, #20
   1762e:	21ff      	movs	r1, #255	; 0xff
   17630:	0018      	movs	r0, r3
   17632:	4b48      	ldr	r3, [pc, #288]	; (17754 <SubscribeHandlerGameTopic+0x134>)
   17634:	4798      	blx	r3

    // Parse input. The start string must be '{"game":['
    if (strncmp(msgData->message->payload, "{\"game\":[", 9) == 0) {
   17636:	687b      	ldr	r3, [r7, #4]
   17638:	681b      	ldr	r3, [r3, #0]
   1763a:	689b      	ldr	r3, [r3, #8]
   1763c:	4946      	ldr	r1, [pc, #280]	; (17758 <SubscribeHandlerGameTopic+0x138>)
   1763e:	2209      	movs	r2, #9
   17640:	0018      	movs	r0, r3
   17642:	4b46      	ldr	r3, [pc, #280]	; (1775c <SubscribeHandlerGameTopic+0x13c>)
   17644:	4798      	blx	r3
   17646:	1e03      	subs	r3, r0, #0
   17648:	d166      	bne.n	17718 <SubscribeHandlerGameTopic+0xf8>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received!\r\n");
   1764a:	4b45      	ldr	r3, [pc, #276]	; (17760 <SubscribeHandlerGameTopic+0x140>)
   1764c:	0019      	movs	r1, r3
   1764e:	2001      	movs	r0, #1
   17650:	4b44      	ldr	r3, [pc, #272]	; (17764 <SubscribeHandlerGameTopic+0x144>)
   17652:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   17654:	687b      	ldr	r3, [r7, #4]
   17656:	685b      	ldr	r3, [r3, #4]
   17658:	685a      	ldr	r2, [r3, #4]
   1765a:	687b      	ldr	r3, [r7, #4]
   1765c:	685b      	ldr	r3, [r3, #4]
   1765e:	689b      	ldr	r3, [r3, #8]
   17660:	4941      	ldr	r1, [pc, #260]	; (17768 <SubscribeHandlerGameTopic+0x148>)
   17662:	2001      	movs	r0, #1
   17664:	4c3f      	ldr	r4, [pc, #252]	; (17764 <SubscribeHandlerGameTopic+0x144>)
   17666:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   17668:	687b      	ldr	r3, [r7, #4]
   1766a:	681b      	ldr	r3, [r3, #0]
   1766c:	68da      	ldr	r2, [r3, #12]
   1766e:	687b      	ldr	r3, [r7, #4]
   17670:	681b      	ldr	r3, [r3, #0]
   17672:	689b      	ldr	r3, [r3, #8]
   17674:	493d      	ldr	r1, [pc, #244]	; (1776c <SubscribeHandlerGameTopic+0x14c>)
   17676:	2001      	movs	r0, #1
   17678:	4c3a      	ldr	r4, [pc, #232]	; (17764 <SubscribeHandlerGameTopic+0x144>)
   1767a:	47a0      	blx	r4

        int nb = 0;
   1767c:	2300      	movs	r3, #0
   1767e:	627b      	str	r3, [r7, #36]	; 0x24
        char *p = &msgData->message->payload[9];
   17680:	687b      	ldr	r3, [r7, #4]
   17682:	681b      	ldr	r3, [r3, #0]
   17684:	689b      	ldr	r3, [r3, #8]
   17686:	3309      	adds	r3, #9
   17688:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
   1768a:	e015      	b.n	176b8 <SubscribeHandlerGameTopic+0x98>
            game.game[nb++] = strtol(p, &p, 10);
   1768c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   1768e:	1c63      	adds	r3, r4, #1
   17690:	627b      	str	r3, [r7, #36]	; 0x24
   17692:	68bb      	ldr	r3, [r7, #8]
   17694:	2208      	movs	r2, #8
   17696:	18b9      	adds	r1, r7, r2
   17698:	220a      	movs	r2, #10
   1769a:	0018      	movs	r0, r3
   1769c:	4b34      	ldr	r3, [pc, #208]	; (17770 <SubscribeHandlerGameTopic+0x150>)
   1769e:	4798      	blx	r3
   176a0:	0003      	movs	r3, r0
   176a2:	b2da      	uxtb	r2, r3
   176a4:	230c      	movs	r3, #12
   176a6:	18fb      	adds	r3, r7, r3
   176a8:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
   176aa:	68bb      	ldr	r3, [r7, #8]
   176ac:	781b      	ldrb	r3, [r3, #0]
   176ae:	2b2c      	cmp	r3, #44	; 0x2c
   176b0:	d10a      	bne.n	176c8 <SubscribeHandlerGameTopic+0xa8>
            p++; /* skip, */
   176b2:	68bb      	ldr	r3, [r7, #8]
   176b4:	3301      	adds	r3, #1
   176b6:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
   176b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   176ba:	2b13      	cmp	r3, #19
   176bc:	dc05      	bgt.n	176ca <SubscribeHandlerGameTopic+0xaa>
   176be:	68bb      	ldr	r3, [r7, #8]
   176c0:	781b      	ldrb	r3, [r3, #0]
   176c2:	2b00      	cmp	r3, #0
   176c4:	d1e2      	bne.n	1768c <SubscribeHandlerGameTopic+0x6c>
   176c6:	e000      	b.n	176ca <SubscribeHandlerGameTopic+0xaa>
            if (*p != ',') break;
   176c8:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nParsed Command: ");
   176ca:	4b2a      	ldr	r3, [pc, #168]	; (17774 <SubscribeHandlerGameTopic+0x154>)
   176cc:	0019      	movs	r1, r3
   176ce:	2001      	movs	r0, #1
   176d0:	4b24      	ldr	r3, [pc, #144]	; (17764 <SubscribeHandlerGameTopic+0x144>)
   176d2:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
   176d4:	2300      	movs	r3, #0
   176d6:	623b      	str	r3, [r7, #32]
   176d8:	e00d      	b.n	176f6 <SubscribeHandlerGameTopic+0xd6>
            LogMessage(LOG_DEBUG_LVL, "%d,", game.game[i]);
   176da:	230c      	movs	r3, #12
   176dc:	18fa      	adds	r2, r7, r3
   176de:	6a3b      	ldr	r3, [r7, #32]
   176e0:	18d3      	adds	r3, r2, r3
   176e2:	781b      	ldrb	r3, [r3, #0]
   176e4:	001a      	movs	r2, r3
   176e6:	4b24      	ldr	r3, [pc, #144]	; (17778 <SubscribeHandlerGameTopic+0x158>)
   176e8:	0019      	movs	r1, r3
   176ea:	2001      	movs	r0, #1
   176ec:	4b1d      	ldr	r3, [pc, #116]	; (17764 <SubscribeHandlerGameTopic+0x144>)
   176ee:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
   176f0:	6a3b      	ldr	r3, [r7, #32]
   176f2:	3301      	adds	r3, #1
   176f4:	623b      	str	r3, [r7, #32]
   176f6:	6a3b      	ldr	r3, [r7, #32]
   176f8:	2b13      	cmp	r3, #19
   176fa:	ddee      	ble.n	176da <SubscribeHandlerGameTopic+0xba>
        }

        if (pdTRUE == ControlAddGameData(&game)) {
   176fc:	230c      	movs	r3, #12
   176fe:	18fb      	adds	r3, r7, r3
   17700:	0018      	movs	r0, r3
   17702:	4b1e      	ldr	r3, [pc, #120]	; (1777c <SubscribeHandlerGameTopic+0x15c>)
   17704:	4798      	blx	r3
   17706:	0003      	movs	r3, r0
   17708:	2b01      	cmp	r3, #1
   1770a:	d11e      	bne.n	1774a <SubscribeHandlerGameTopic+0x12a>
            LogMessage(LOG_DEBUG_LVL, "\r\nSent play to control!\r\n");
   1770c:	4b1c      	ldr	r3, [pc, #112]	; (17780 <SubscribeHandlerGameTopic+0x160>)
   1770e:	0019      	movs	r1, r3
   17710:	2001      	movs	r0, #1
   17712:	4b14      	ldr	r3, [pc, #80]	; (17764 <SubscribeHandlerGameTopic+0x144>)
   17714:	4798      	blx	r3
    } else {
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
    }
}
   17716:	e018      	b.n	1774a <SubscribeHandlerGameTopic+0x12a>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
   17718:	4b1a      	ldr	r3, [pc, #104]	; (17784 <SubscribeHandlerGameTopic+0x164>)
   1771a:	0019      	movs	r1, r3
   1771c:	2001      	movs	r0, #1
   1771e:	4b11      	ldr	r3, [pc, #68]	; (17764 <SubscribeHandlerGameTopic+0x144>)
   17720:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   17722:	687b      	ldr	r3, [r7, #4]
   17724:	685b      	ldr	r3, [r3, #4]
   17726:	685a      	ldr	r2, [r3, #4]
   17728:	687b      	ldr	r3, [r7, #4]
   1772a:	685b      	ldr	r3, [r3, #4]
   1772c:	689b      	ldr	r3, [r3, #8]
   1772e:	490e      	ldr	r1, [pc, #56]	; (17768 <SubscribeHandlerGameTopic+0x148>)
   17730:	2001      	movs	r0, #1
   17732:	4c0c      	ldr	r4, [pc, #48]	; (17764 <SubscribeHandlerGameTopic+0x144>)
   17734:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   17736:	687b      	ldr	r3, [r7, #4]
   17738:	681b      	ldr	r3, [r3, #0]
   1773a:	68da      	ldr	r2, [r3, #12]
   1773c:	687b      	ldr	r3, [r7, #4]
   1773e:	681b      	ldr	r3, [r3, #0]
   17740:	689b      	ldr	r3, [r3, #8]
   17742:	490a      	ldr	r1, [pc, #40]	; (1776c <SubscribeHandlerGameTopic+0x14c>)
   17744:	2001      	movs	r0, #1
   17746:	4c07      	ldr	r4, [pc, #28]	; (17764 <SubscribeHandlerGameTopic+0x144>)
   17748:	47a0      	blx	r4
}
   1774a:	46c0      	nop			; (mov r8, r8)
   1774c:	46bd      	mov	sp, r7
   1774e:	b00b      	add	sp, #44	; 0x2c
   17750:	bd90      	pop	{r4, r7, pc}
   17752:	46c0      	nop			; (mov r8, r8)
   17754:	000355ef 	.word	0x000355ef
   17758:	00037794 	.word	0x00037794
   1775c:	000359b5 	.word	0x000359b5
   17760:	000377a0 	.word	0x000377a0
   17764:	0001eb71 	.word	0x0001eb71
   17768:	00037770 	.word	0x00037770
   1776c:	000377bc 	.word	0x000377bc
   17770:	00035b61 	.word	0x00035b61
   17774:	000377c4 	.word	0x000377c4
   17778:	000377d8 	.word	0x000377d8
   1777c:	000147e9 	.word	0x000147e9
   17780:	000377dc 	.word	0x000377dc
   17784:	000377f8 	.word	0x000377f8

00017788 <SubscribeHandlerImuTopic>:

void SubscribeHandlerImuTopic(MessageData *msgData)
{
   17788:	b590      	push	{r4, r7, lr}
   1778a:	b083      	sub	sp, #12
   1778c:	af00      	add	r7, sp, #0
   1778e:	6078      	str	r0, [r7, #4]
	LogMessage(LOG_DEBUG_LVL, "IMU topic received! -"); //changed by Derek
   17790:	4b09      	ldr	r3, [pc, #36]	; (177b8 <SubscribeHandlerImuTopic+0x30>)
   17792:	0019      	movs	r1, r3
   17794:	2001      	movs	r0, #1
   17796:	4b09      	ldr	r3, [pc, #36]	; (177bc <SubscribeHandlerImuTopic+0x34>)
   17798:	4798      	blx	r3
    LogMessage(LOG_DEBUG_LVL, "%.*s \r\n", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   1779a:	687b      	ldr	r3, [r7, #4]
   1779c:	685b      	ldr	r3, [r3, #4]
   1779e:	685a      	ldr	r2, [r3, #4]
   177a0:	687b      	ldr	r3, [r7, #4]
   177a2:	685b      	ldr	r3, [r3, #4]
   177a4:	689b      	ldr	r3, [r3, #8]
   177a6:	4906      	ldr	r1, [pc, #24]	; (177c0 <SubscribeHandlerImuTopic+0x38>)
   177a8:	2001      	movs	r0, #1
   177aa:	4c04      	ldr	r4, [pc, #16]	; (177bc <SubscribeHandlerImuTopic+0x34>)
   177ac:	47a0      	blx	r4
}
   177ae:	46c0      	nop			; (mov r8, r8)
   177b0:	46bd      	mov	sp, r7
   177b2:	b003      	add	sp, #12
   177b4:	bd90      	pop	{r4, r7, pc}
   177b6:	46c0      	nop			; (mov r8, r8)
   177b8:	00037828 	.word	0x00037828
   177bc:	0001eb71 	.word	0x0001eb71
   177c0:	00037840 	.word	0x00037840

000177c4 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
   177c4:	b590      	push	{r4, r7, lr}
   177c6:	b08b      	sub	sp, #44	; 0x2c
   177c8:	af06      	add	r7, sp, #24
   177ca:	60f8      	str	r0, [r7, #12]
   177cc:	60b9      	str	r1, [r7, #8]
   177ce:	607a      	str	r2, [r7, #4]
    switch (type) {
   177d0:	68bb      	ldr	r3, [r7, #8]
   177d2:	2b01      	cmp	r3, #1
   177d4:	d03b      	beq.n	1784e <mqtt_callback+0x8a>
   177d6:	2b05      	cmp	r3, #5
   177d8:	d05e      	beq.n	17898 <mqtt_callback+0xd4>
   177da:	2b00      	cmp	r3, #0
   177dc:	d000      	beq.n	177e0 <mqtt_callback+0x1c>
            /* Stop timer and USART callback. */
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
            // usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
            break;
    }
}
   177de:	e061      	b.n	178a4 <mqtt_callback+0xe0>
            if (data->sock_connected.result >= 0) {
   177e0:	687b      	ldr	r3, [r7, #4]
   177e2:	681b      	ldr	r3, [r3, #0]
   177e4:	2b00      	cmp	r3, #0
   177e6:	db25      	blt.n	17834 <mqtt_callback+0x70>
                LogMessage(LOG_DEBUG_LVL, "\r\nConnecting to Broker...");
   177e8:	4b30      	ldr	r3, [pc, #192]	; (178ac <mqtt_callback+0xe8>)
   177ea:	0019      	movs	r1, r3
   177ec:	2001      	movs	r0, #1
   177ee:	4b30      	ldr	r3, [pc, #192]	; (178b0 <mqtt_callback+0xec>)
   177f0:	4798      	blx	r3
                if (0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0)) {
   177f2:	4930      	ldr	r1, [pc, #192]	; (178b4 <mqtt_callback+0xf0>)
   177f4:	4a30      	ldr	r2, [pc, #192]	; (178b8 <mqtt_callback+0xf4>)
   177f6:	68f8      	ldr	r0, [r7, #12]
   177f8:	2300      	movs	r3, #0
   177fa:	9305      	str	r3, [sp, #20]
   177fc:	2300      	movs	r3, #0
   177fe:	9304      	str	r3, [sp, #16]
   17800:	2300      	movs	r3, #0
   17802:	9303      	str	r3, [sp, #12]
   17804:	2300      	movs	r3, #0
   17806:	9302      	str	r3, [sp, #8]
   17808:	2300      	movs	r3, #0
   1780a:	9301      	str	r3, [sp, #4]
   1780c:	4b2a      	ldr	r3, [pc, #168]	; (178b8 <mqtt_callback+0xf4>)
   1780e:	9300      	str	r3, [sp, #0]
   17810:	000b      	movs	r3, r1
   17812:	2101      	movs	r1, #1
   17814:	4c29      	ldr	r4, [pc, #164]	; (178bc <mqtt_callback+0xf8>)
   17816:	47a0      	blx	r4
   17818:	1e03      	subs	r3, r0, #0
   1781a:	d005      	beq.n	17828 <mqtt_callback+0x64>
                    LogMessage(LOG_DEBUG_LVL, "MQTT  Error - NOT Connected to broker\r\n");
   1781c:	4b28      	ldr	r3, [pc, #160]	; (178c0 <mqtt_callback+0xfc>)
   1781e:	0019      	movs	r1, r3
   17820:	2001      	movs	r0, #1
   17822:	4b23      	ldr	r3, [pc, #140]	; (178b0 <mqtt_callback+0xec>)
   17824:	4798      	blx	r3
        } break;
   17826:	e03d      	b.n	178a4 <mqtt_callback+0xe0>
                    LogMessage(LOG_DEBUG_LVL, "MQTT Connected to broker\r\n\r\n");
   17828:	4b26      	ldr	r3, [pc, #152]	; (178c4 <mqtt_callback+0x100>)
   1782a:	0019      	movs	r1, r3
   1782c:	2001      	movs	r0, #1
   1782e:	4b20      	ldr	r3, [pc, #128]	; (178b0 <mqtt_callback+0xec>)
   17830:	4798      	blx	r3
        } break;
   17832:	e037      	b.n	178a4 <mqtt_callback+0xe0>
                LogMessage(LOG_DEBUG_LVL, "Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   17834:	4a24      	ldr	r2, [pc, #144]	; (178c8 <mqtt_callback+0x104>)
   17836:	4b25      	ldr	r3, [pc, #148]	; (178cc <mqtt_callback+0x108>)
   17838:	0019      	movs	r1, r3
   1783a:	2001      	movs	r0, #1
   1783c:	4b1c      	ldr	r3, [pc, #112]	; (178b0 <mqtt_callback+0xec>)
   1783e:	4798      	blx	r3
                mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   17840:	4a21      	ldr	r2, [pc, #132]	; (178c8 <mqtt_callback+0x104>)
   17842:	68fb      	ldr	r3, [r7, #12]
   17844:	0011      	movs	r1, r2
   17846:	0018      	movs	r0, r3
   17848:	4b21      	ldr	r3, [pc, #132]	; (178d0 <mqtt_callback+0x10c>)
   1784a:	4798      	blx	r3
        } break;
   1784c:	e02a      	b.n	178a4 <mqtt_callback+0xe0>
            if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   1784e:	687b      	ldr	r3, [r7, #4]
   17850:	781b      	ldrb	r3, [r3, #0]
   17852:	2b00      	cmp	r3, #0
   17854:	d117      	bne.n	17886 <mqtt_callback+0xc2>
                mqtt_subscribe(module_inst, GAME_TOPIC_IN, 2, SubscribeHandlerGameTopic);
   17856:	4b1f      	ldr	r3, [pc, #124]	; (178d4 <mqtt_callback+0x110>)
   17858:	491f      	ldr	r1, [pc, #124]	; (178d8 <mqtt_callback+0x114>)
   1785a:	68f8      	ldr	r0, [r7, #12]
   1785c:	2202      	movs	r2, #2
   1785e:	4c1f      	ldr	r4, [pc, #124]	; (178dc <mqtt_callback+0x118>)
   17860:	47a0      	blx	r4
                mqtt_subscribe(module_inst, LED_TOPIC, 2, SubscribeHandlerLedTopic);
   17862:	4b1f      	ldr	r3, [pc, #124]	; (178e0 <mqtt_callback+0x11c>)
   17864:	491f      	ldr	r1, [pc, #124]	; (178e4 <mqtt_callback+0x120>)
   17866:	68f8      	ldr	r0, [r7, #12]
   17868:	2202      	movs	r2, #2
   1786a:	4c1c      	ldr	r4, [pc, #112]	; (178dc <mqtt_callback+0x118>)
   1786c:	47a0      	blx	r4
                mqtt_subscribe(module_inst, IMU_TOPIC, 2, SubscribeHandlerImuTopic);
   1786e:	4b1e      	ldr	r3, [pc, #120]	; (178e8 <mqtt_callback+0x124>)
   17870:	491e      	ldr	r1, [pc, #120]	; (178ec <mqtt_callback+0x128>)
   17872:	68f8      	ldr	r0, [r7, #12]
   17874:	2202      	movs	r2, #2
   17876:	4c19      	ldr	r4, [pc, #100]	; (178dc <mqtt_callback+0x118>)
   17878:	47a0      	blx	r4
                LogMessage(LOG_DEBUG_LVL, "MQTT Connected\r\n");
   1787a:	4b1d      	ldr	r3, [pc, #116]	; (178f0 <mqtt_callback+0x12c>)
   1787c:	0019      	movs	r1, r3
   1787e:	2001      	movs	r0, #1
   17880:	4b0b      	ldr	r3, [pc, #44]	; (178b0 <mqtt_callback+0xec>)
   17882:	4798      	blx	r3
            break;
   17884:	e00e      	b.n	178a4 <mqtt_callback+0xe0>
                LogMessage(LOG_DEBUG_LVL, "MQTT broker decline your access! error code %d\r\n", data->connected.result);
   17886:	687b      	ldr	r3, [r7, #4]
   17888:	781b      	ldrb	r3, [r3, #0]
   1788a:	001a      	movs	r2, r3
   1788c:	4b19      	ldr	r3, [pc, #100]	; (178f4 <mqtt_callback+0x130>)
   1788e:	0019      	movs	r1, r3
   17890:	2001      	movs	r0, #1
   17892:	4b07      	ldr	r3, [pc, #28]	; (178b0 <mqtt_callback+0xec>)
   17894:	4798      	blx	r3
            break;
   17896:	e005      	b.n	178a4 <mqtt_callback+0xe0>
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
   17898:	4b17      	ldr	r3, [pc, #92]	; (178f8 <mqtt_callback+0x134>)
   1789a:	0019      	movs	r1, r3
   1789c:	2001      	movs	r0, #1
   1789e:	4b04      	ldr	r3, [pc, #16]	; (178b0 <mqtt_callback+0xec>)
   178a0:	4798      	blx	r3
            break;
   178a2:	46c0      	nop			; (mov r8, r8)
}
   178a4:	46c0      	nop			; (mov r8, r8)
   178a6:	46bd      	mov	sp, r7
   178a8:	b005      	add	sp, #20
   178aa:	bd90      	pop	{r4, r7, pc}
   178ac:	00037894 	.word	0x00037894
   178b0:	0001eb71 	.word	0x0001eb71
   178b4:	000378b0 	.word	0x000378b0
   178b8:	000378c0 	.word	0x000378c0
   178bc:	00030469 	.word	0x00030469
   178c0:	000378cc 	.word	0x000378cc
   178c4:	000378f4 	.word	0x000378f4
   178c8:	000371e8 	.word	0x000371e8
   178cc:	00037914 	.word	0x00037914
   178d0:	00030421 	.word	0x00030421
   178d4:	00017621 	.word	0x00017621
   178d8:	0003794c 	.word	0x0003794c
   178dc:	00030609 	.word	0x00030609
   178e0:	0001752d 	.word	0x0001752d
   178e4:	00037870 	.word	0x00037870
   178e8:	00017789 	.word	0x00017789
   178ec:	00037960 	.word	0x00037960
   178f0:	00037974 	.word	0x00037974
   178f4:	00037988 	.word	0x00037988
   178f8:	000379bc 	.word	0x000379bc

000178fc <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
static void configure_mqtt(void)
{
   178fc:	b580      	push	{r7, lr}
   178fe:	b088      	sub	sp, #32
   17900:	af00      	add	r7, sp, #0
    struct mqtt_config mqtt_conf;
    int result;

    mqtt_get_config_defaults(&mqtt_conf);
   17902:	1d3b      	adds	r3, r7, #4
   17904:	0018      	movs	r0, r3
   17906:	4b1f      	ldr	r3, [pc, #124]	; (17984 <configure_mqtt+0x88>)
   17908:	4798      	blx	r3
    /* To use the MQTT service, it is necessary to always set the buffer and the timer. */
    mqtt_conf.read_buffer = mqtt_read_buffer;
   1790a:	1d3b      	adds	r3, r7, #4
   1790c:	4a1e      	ldr	r2, [pc, #120]	; (17988 <configure_mqtt+0x8c>)
   1790e:	609a      	str	r2, [r3, #8]
    mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   17910:	1d3b      	adds	r3, r7, #4
   17912:	2280      	movs	r2, #128	; 0x80
   17914:	0092      	lsls	r2, r2, #2
   17916:	60da      	str	r2, [r3, #12]
    mqtt_conf.send_buffer = mqtt_send_buffer;
   17918:	1d3b      	adds	r3, r7, #4
   1791a:	4a1c      	ldr	r2, [pc, #112]	; (1798c <configure_mqtt+0x90>)
   1791c:	611a      	str	r2, [r3, #16]
    mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   1791e:	1d3b      	adds	r3, r7, #4
   17920:	2280      	movs	r2, #128	; 0x80
   17922:	0092      	lsls	r2, r2, #2
   17924:	615a      	str	r2, [r3, #20]
    mqtt_conf.port = CLOUDMQTT_PORT;
   17926:	1d3b      	adds	r3, r7, #4
   17928:	4a19      	ldr	r2, [pc, #100]	; (17990 <configure_mqtt+0x94>)
   1792a:	801a      	strh	r2, [r3, #0]
    mqtt_conf.keep_alive = 6000;
   1792c:	1d3b      	adds	r3, r7, #4
   1792e:	4a19      	ldr	r2, [pc, #100]	; (17994 <configure_mqtt+0x98>)
   17930:	809a      	strh	r2, [r3, #4]

    result = mqtt_init(&mqtt_inst, &mqtt_conf);
   17932:	1d3a      	adds	r2, r7, #4
   17934:	4b18      	ldr	r3, [pc, #96]	; (17998 <configure_mqtt+0x9c>)
   17936:	0011      	movs	r1, r2
   17938:	0018      	movs	r0, r3
   1793a:	4b18      	ldr	r3, [pc, #96]	; (1799c <configure_mqtt+0xa0>)
   1793c:	4798      	blx	r3
   1793e:	0003      	movs	r3, r0
   17940:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   17942:	69fb      	ldr	r3, [r7, #28]
   17944:	2b00      	cmp	r3, #0
   17946:	da06      	bge.n	17956 <configure_mqtt+0x5a>
        LogMessage(LOG_DEBUG_LVL, "MQTT initialization failed. Error code is (%d)\r\n", result);
   17948:	69fa      	ldr	r2, [r7, #28]
   1794a:	4b15      	ldr	r3, [pc, #84]	; (179a0 <configure_mqtt+0xa4>)
   1794c:	0019      	movs	r1, r3
   1794e:	2001      	movs	r0, #1
   17950:	4b14      	ldr	r3, [pc, #80]	; (179a4 <configure_mqtt+0xa8>)
   17952:	4798      	blx	r3
        while (1) {
   17954:	e7fe      	b.n	17954 <configure_mqtt+0x58>
        }
    }

    result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   17956:	4a14      	ldr	r2, [pc, #80]	; (179a8 <configure_mqtt+0xac>)
   17958:	4b0f      	ldr	r3, [pc, #60]	; (17998 <configure_mqtt+0x9c>)
   1795a:	0011      	movs	r1, r2
   1795c:	0018      	movs	r0, r3
   1795e:	4b13      	ldr	r3, [pc, #76]	; (179ac <configure_mqtt+0xb0>)
   17960:	4798      	blx	r3
   17962:	0003      	movs	r3, r0
   17964:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   17966:	69fb      	ldr	r3, [r7, #28]
   17968:	2b00      	cmp	r3, #0
   1796a:	da06      	bge.n	1797a <configure_mqtt+0x7e>
        LogMessage(LOG_DEBUG_LVL, "MQTT register callback failed. Error code is (%d)\r\n", result);
   1796c:	69fa      	ldr	r2, [r7, #28]
   1796e:	4b10      	ldr	r3, [pc, #64]	; (179b0 <configure_mqtt+0xb4>)
   17970:	0019      	movs	r1, r3
   17972:	2001      	movs	r0, #1
   17974:	4b0b      	ldr	r3, [pc, #44]	; (179a4 <configure_mqtt+0xa8>)
   17976:	4798      	blx	r3
        while (1) {
   17978:	e7fe      	b.n	17978 <configure_mqtt+0x7c>
        }
    }
}
   1797a:	46c0      	nop			; (mov r8, r8)
   1797c:	46bd      	mov	sp, r7
   1797e:	b008      	add	sp, #32
   17980:	bd80      	pop	{r7, pc}
   17982:	46c0      	nop			; (mov r8, r8)
   17984:	00030361 	.word	0x00030361
   17988:	200008d0 	.word	0x200008d0
   1798c:	20000ad0 	.word	0x20000ad0
   17990:	0000075b 	.word	0x0000075b
   17994:	00001770 	.word	0x00001770
   17998:	20000898 	.word	0x20000898
   1799c:	000302b1 	.word	0x000302b1
   179a0:	000379d0 	.word	0x000379d0
   179a4:	0001eb71 	.word	0x0001eb71
   179a8:	000177c5 	.word	0x000177c5
   179ac:	000303a1 	.word	0x000303a1
   179b0:	00037a04 	.word	0x00037a04

000179b4 <configure_extint_channel>:

// SETUP FOR EXTERNAL BUTTON INTERRUPT -- Used to send an MQTT Message

void configure_extint_channel(void)
{
   179b4:	b580      	push	{r7, lr}
   179b6:	b084      	sub	sp, #16
   179b8:	af00      	add	r7, sp, #0
    struct extint_chan_conf config_extint_chan;
    extint_chan_get_config_defaults(&config_extint_chan);
   179ba:	1d3b      	adds	r3, r7, #4
   179bc:	0018      	movs	r0, r3
   179be:	4b0b      	ldr	r3, [pc, #44]	; (179ec <configure_extint_channel+0x38>)
   179c0:	4798      	blx	r3
    config_extint_chan.gpio_pin = BUTTON_0_EIC_PIN;
   179c2:	1d3b      	adds	r3, r7, #4
   179c4:	2237      	movs	r2, #55	; 0x37
   179c6:	601a      	str	r2, [r3, #0]
    config_extint_chan.gpio_pin_mux = BUTTON_0_EIC_MUX;
   179c8:	1d3b      	adds	r3, r7, #4
   179ca:	2200      	movs	r2, #0
   179cc:	605a      	str	r2, [r3, #4]
    config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   179ce:	1d3b      	adds	r3, r7, #4
   179d0:	2201      	movs	r2, #1
   179d2:	721a      	strb	r2, [r3, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   179d4:	1d3b      	adds	r3, r7, #4
   179d6:	2202      	movs	r2, #2
   179d8:	72da      	strb	r2, [r3, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
   179da:	1d3b      	adds	r3, r7, #4
   179dc:	0019      	movs	r1, r3
   179de:	2007      	movs	r0, #7
   179e0:	4b03      	ldr	r3, [pc, #12]	; (179f0 <configure_extint_channel+0x3c>)
   179e2:	4798      	blx	r3
}
   179e4:	46c0      	nop			; (mov r8, r8)
   179e6:	46bd      	mov	sp, r7
   179e8:	b004      	add	sp, #16
   179ea:	bd80      	pop	{r7, pc}
   179ec:	00027499 	.word	0x00027499
   179f0:	000274cd 	.word	0x000274cd

000179f4 <configure_extint_callbacks>:

void extint_detection_callback(void);
void configure_extint_callbacks(void)
{
   179f4:	b580      	push	{r7, lr}
   179f6:	af00      	add	r7, sp, #0
    extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   179f8:	4b06      	ldr	r3, [pc, #24]	; (17a14 <configure_extint_callbacks+0x20>)
   179fa:	2200      	movs	r2, #0
   179fc:	2107      	movs	r1, #7
   179fe:	0018      	movs	r0, r3
   17a00:	4b05      	ldr	r3, [pc, #20]	; (17a18 <configure_extint_callbacks+0x24>)
   17a02:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   17a04:	2100      	movs	r1, #0
   17a06:	2007      	movs	r0, #7
   17a08:	4b04      	ldr	r3, [pc, #16]	; (17a1c <configure_extint_callbacks+0x28>)
   17a0a:	4798      	blx	r3
}
   17a0c:	46c0      	nop			; (mov r8, r8)
   17a0e:	46bd      	mov	sp, r7
   17a10:	bd80      	pop	{r7, pc}
   17a12:	46c0      	nop			; (mov r8, r8)
   17a14:	00017a21 	.word	0x00017a21
   17a18:	00027099 	.word	0x00027099
   17a1c:	000270fd 	.word	0x000270fd

00017a20 <extint_detection_callback>:

volatile bool isPressed = false;
void extint_detection_callback(void)
{
   17a20:	b5b0      	push	{r4, r5, r7, lr}
   17a22:	af00      	add	r7, sp, #0
    // Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
    temperature++;
   17a24:	4b0c      	ldr	r3, [pc, #48]	; (17a58 <extint_detection_callback+0x38>)
   17a26:	681b      	ldr	r3, [r3, #0]
   17a28:	1c5a      	adds	r2, r3, #1
   17a2a:	4b0b      	ldr	r3, [pc, #44]	; (17a58 <extint_detection_callback+0x38>)
   17a2c:	601a      	str	r2, [r3, #0]
    if (temperature > 40) temperature = 1;
   17a2e:	4b0a      	ldr	r3, [pc, #40]	; (17a58 <extint_detection_callback+0x38>)
   17a30:	681b      	ldr	r3, [r3, #0]
   17a32:	2b28      	cmp	r3, #40	; 0x28
   17a34:	d902      	bls.n	17a3c <extint_detection_callback+0x1c>
   17a36:	4b08      	ldr	r3, [pc, #32]	; (17a58 <extint_detection_callback+0x38>)
   17a38:	2201      	movs	r2, #1
   17a3a:	601a      	str	r2, [r3, #0]
    snprintf(mqtt_msg_temp, 63, "{\"d\":{\"temp\":%d}}", temperature);
   17a3c:	4b06      	ldr	r3, [pc, #24]	; (17a58 <extint_detection_callback+0x38>)
   17a3e:	681b      	ldr	r3, [r3, #0]
   17a40:	4a06      	ldr	r2, [pc, #24]	; (17a5c <extint_detection_callback+0x3c>)
   17a42:	4807      	ldr	r0, [pc, #28]	; (17a60 <extint_detection_callback+0x40>)
   17a44:	213f      	movs	r1, #63	; 0x3f
   17a46:	4c07      	ldr	r4, [pc, #28]	; (17a64 <extint_detection_callback+0x44>)
   17a48:	47a0      	blx	r4
    isPressed = true;
   17a4a:	4b07      	ldr	r3, [pc, #28]	; (17a68 <extint_detection_callback+0x48>)
   17a4c:	2201      	movs	r2, #1
   17a4e:	701a      	strb	r2, [r3, #0]
    //Published in the Wifi thread main loop
}
   17a50:	46c0      	nop			; (mov r8, r8)
   17a52:	46bd      	mov	sp, r7
   17a54:	bdb0      	pop	{r4, r5, r7, pc}
   17a56:	46c0      	nop			; (mov r8, r8)
   17a58:	200000b0 	.word	0x200000b0
   17a5c:	00037a38 	.word	0x00037a38
   17a60:	20000070 	.word	0x20000070
   17a64:	00035849 	.word	0x00035849
   17a68:	20000cd0 	.word	0x20000cd0

00017a6c <HTTP_DownloadFileInit>:
 * @brief	Routine to initialize HTTP download of the OTAU file
 * @note

*/
static void HTTP_DownloadFileInit(void)
{
   17a6c:	b580      	push	{r7, lr}
   17a6e:	af00      	add	r7, sp, #0
    if (mqtt_disconnect(&mqtt_inst, main_mqtt_broker)) {
   17a70:	4a15      	ldr	r2, [pc, #84]	; (17ac8 <HTTP_DownloadFileInit+0x5c>)
   17a72:	4b16      	ldr	r3, [pc, #88]	; (17acc <HTTP_DownloadFileInit+0x60>)
   17a74:	0011      	movs	r1, r2
   17a76:	0018      	movs	r0, r3
   17a78:	4b15      	ldr	r3, [pc, #84]	; (17ad0 <HTTP_DownloadFileInit+0x64>)
   17a7a:	4798      	blx	r3
   17a7c:	1e03      	subs	r3, r0, #0
   17a7e:	d008      	beq.n	17a92 <HTTP_DownloadFileInit+0x26>
        LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   17a80:	4b14      	ldr	r3, [pc, #80]	; (17ad4 <HTTP_DownloadFileInit+0x68>)
   17a82:	0019      	movs	r1, r3
   17a84:	2001      	movs	r0, #1
   17a86:	4b14      	ldr	r3, [pc, #80]	; (17ad8 <HTTP_DownloadFileInit+0x6c>)
   17a88:	4798      	blx	r3
    }
    while ((mqtt_inst.isConnected)) {
   17a8a:	e002      	b.n	17a92 <HTTP_DownloadFileInit+0x26>
        m2m_wifi_handle_events(NULL);
   17a8c:	2000      	movs	r0, #0
   17a8e:	4b13      	ldr	r3, [pc, #76]	; (17adc <HTTP_DownloadFileInit+0x70>)
   17a90:	4798      	blx	r3
    while ((mqtt_inst.isConnected)) {
   17a92:	4b0e      	ldr	r3, [pc, #56]	; (17acc <HTTP_DownloadFileInit+0x60>)
   17a94:	2234      	movs	r2, #52	; 0x34
   17a96:	5c9b      	ldrb	r3, [r3, r2]
   17a98:	2b00      	cmp	r3, #0
   17a9a:	d1f7      	bne.n	17a8c <HTTP_DownloadFileInit+0x20>
    }
    socketDeinit();
   17a9c:	4b10      	ldr	r3, [pc, #64]	; (17ae0 <HTTP_DownloadFileInit+0x74>)
   17a9e:	4798      	blx	r3
    // DOWNLOAD A FILE
    do_download_flag = true;
   17aa0:	4b10      	ldr	r3, [pc, #64]	; (17ae4 <HTTP_DownloadFileInit+0x78>)
   17aa2:	2201      	movs	r2, #1
   17aa4:	701a      	strb	r2, [r3, #0]
    /* Register socket callback function. */
    registerSocketCallback(socket_cb, resolve_cb);
   17aa6:	4a10      	ldr	r2, [pc, #64]	; (17ae8 <HTTP_DownloadFileInit+0x7c>)
   17aa8:	4b10      	ldr	r3, [pc, #64]	; (17aec <HTTP_DownloadFileInit+0x80>)
   17aaa:	0011      	movs	r1, r2
   17aac:	0018      	movs	r0, r3
   17aae:	4b10      	ldr	r3, [pc, #64]	; (17af0 <HTTP_DownloadFileInit+0x84>)
   17ab0:	4798      	blx	r3
    /* Initialize socket module. */
    socketInit();
   17ab2:	4b10      	ldr	r3, [pc, #64]	; (17af4 <HTTP_DownloadFileInit+0x88>)
   17ab4:	4798      	blx	r3

    start_download();
   17ab6:	4b10      	ldr	r3, [pc, #64]	; (17af8 <HTTP_DownloadFileInit+0x8c>)
   17ab8:	4798      	blx	r3
    wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
   17aba:	4b10      	ldr	r3, [pc, #64]	; (17afc <HTTP_DownloadFileInit+0x90>)
   17abc:	2203      	movs	r2, #3
   17abe:	701a      	strb	r2, [r3, #0]
}
   17ac0:	46c0      	nop			; (mov r8, r8)
   17ac2:	46bd      	mov	sp, r7
   17ac4:	bd80      	pop	{r7, pc}
   17ac6:	46c0      	nop			; (mov r8, r8)
   17ac8:	000371e8 	.word	0x000371e8
   17acc:	20000898 	.word	0x20000898
   17ad0:	00030555 	.word	0x00030555
   17ad4:	000375f8 	.word	0x000375f8
   17ad8:	0001eb71 	.word	0x0001eb71
   17adc:	00022b89 	.word	0x00022b89
   17ae0:	00026145 	.word	0x00026145
   17ae4:	20000638 	.word	0x20000638
   17ae8:	0001717d 	.word	0x0001717d
   17aec:	00017149 	.word	0x00017149
   17af0:	0002618d 	.word	0x0002618d
   17af4:	000260f5 	.word	0x000260f5
   17af8:	00016d71 	.word	0x00016d71
   17afc:	20000624 	.word	0x20000624

00017b00 <HTTP_DownloadFileTransaction>:
 * @brief	Routine to handle the HTTP transaction of downloading a file
 * @note

*/
static void HTTP_DownloadFileTransaction(void)
{
   17b00:	b590      	push	{r4, r7, lr}
   17b02:	b085      	sub	sp, #20
   17b04:	af00      	add	r7, sp, #0
    /* Connect to router. */
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   17b06:	e009      	b.n	17b1c <HTTP_DownloadFileTransaction+0x1c>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   17b08:	2000      	movs	r0, #0
   17b0a:	4b2a      	ldr	r3, [pc, #168]	; (17bb4 <HTTP_DownloadFileTransaction+0xb4>)
   17b0c:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   17b0e:	4b2a      	ldr	r3, [pc, #168]	; (17bb8 <HTTP_DownloadFileTransaction+0xb8>)
   17b10:	0018      	movs	r0, r3
   17b12:	4b2a      	ldr	r3, [pc, #168]	; (17bbc <HTTP_DownloadFileTransaction+0xbc>)
   17b14:	4798      	blx	r3
        vTaskDelay(5);
   17b16:	2005      	movs	r0, #5
   17b18:	4b29      	ldr	r3, [pc, #164]	; (17bc0 <HTTP_DownloadFileTransaction+0xc0>)
   17b1a:	4798      	blx	r3
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   17b1c:	2010      	movs	r0, #16
   17b1e:	4b29      	ldr	r3, [pc, #164]	; (17bc4 <HTTP_DownloadFileTransaction+0xc4>)
   17b20:	4798      	blx	r3
   17b22:	0003      	movs	r3, r0
   17b24:	001a      	movs	r2, r3
   17b26:	2301      	movs	r3, #1
   17b28:	4053      	eors	r3, r2
   17b2a:	b2db      	uxtb	r3, r3
   17b2c:	2b00      	cmp	r3, #0
   17b2e:	d009      	beq.n	17b44 <HTTP_DownloadFileTransaction+0x44>
   17b30:	2020      	movs	r0, #32
   17b32:	4b24      	ldr	r3, [pc, #144]	; (17bc4 <HTTP_DownloadFileTransaction+0xc4>)
   17b34:	4798      	blx	r3
   17b36:	0003      	movs	r3, r0
   17b38:	001a      	movs	r2, r3
   17b3a:	2301      	movs	r3, #1
   17b3c:	4053      	eors	r3, r2
   17b3e:	b2db      	uxtb	r3, r3
   17b40:	2b00      	cmp	r3, #0
   17b42:	d1e1      	bne.n	17b08 <HTTP_DownloadFileTransaction+0x8>
    }

    // Disable socket for HTTP Transfer
    socketDeinit();
   17b44:	4b20      	ldr	r3, [pc, #128]	; (17bc8 <HTTP_DownloadFileTransaction+0xc8>)
   17b46:	4798      	blx	r3
    vTaskDelay(1000);
   17b48:	23fa      	movs	r3, #250	; 0xfa
   17b4a:	009b      	lsls	r3, r3, #2
   17b4c:	0018      	movs	r0, r3
   17b4e:	4b1c      	ldr	r3, [pc, #112]	; (17bc0 <HTTP_DownloadFileTransaction+0xc0>)
   17b50:	4798      	blx	r3
    // CONNECT TO MQTT BROKER
    do_download_flag = false;
   17b52:	4b1e      	ldr	r3, [pc, #120]	; (17bcc <HTTP_DownloadFileTransaction+0xcc>)
   17b54:	2200      	movs	r2, #0
   17b56:	701a      	strb	r2, [r3, #0]

    // Write Flag
    char test_file_name[] = "0:FlagA.txt";
   17b58:	003b      	movs	r3, r7
   17b5a:	4a1d      	ldr	r2, [pc, #116]	; (17bd0 <HTTP_DownloadFileTransaction+0xd0>)
   17b5c:	ca13      	ldmia	r2!, {r0, r1, r4}
   17b5e:	c313      	stmia	r3!, {r0, r1, r4}
    test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   17b60:	003b      	movs	r3, r7
   17b62:	2230      	movs	r2, #48	; 0x30
   17b64:	701a      	strb	r2, [r3, #0]
    FRESULT res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   17b66:	230f      	movs	r3, #15
   17b68:	18fc      	adds	r4, r7, r3
   17b6a:	0039      	movs	r1, r7
   17b6c:	4b19      	ldr	r3, [pc, #100]	; (17bd4 <HTTP_DownloadFileTransaction+0xd4>)
   17b6e:	220a      	movs	r2, #10
   17b70:	0018      	movs	r0, r3
   17b72:	4b19      	ldr	r3, [pc, #100]	; (17bd8 <HTTP_DownloadFileTransaction+0xd8>)
   17b74:	4798      	blx	r3
   17b76:	0003      	movs	r3, r0
   17b78:	7023      	strb	r3, [r4, #0]

    if (res != FR_OK) {
   17b7a:	230f      	movs	r3, #15
   17b7c:	18fb      	adds	r3, r7, r3
   17b7e:	781b      	ldrb	r3, [r3, #0]
   17b80:	2b00      	cmp	r3, #0
   17b82:	d008      	beq.n	17b96 <HTTP_DownloadFileTransaction+0x96>
        LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
   17b84:	230f      	movs	r3, #15
   17b86:	18fb      	adds	r3, r7, r3
   17b88:	781a      	ldrb	r2, [r3, #0]
   17b8a:	4b14      	ldr	r3, [pc, #80]	; (17bdc <HTTP_DownloadFileTransaction+0xdc>)
   17b8c:	0019      	movs	r1, r3
   17b8e:	2000      	movs	r0, #0
   17b90:	4b13      	ldr	r3, [pc, #76]	; (17be0 <HTTP_DownloadFileTransaction+0xe0>)
   17b92:	4798      	blx	r3
   17b94:	e003      	b.n	17b9e <HTTP_DownloadFileTransaction+0x9e>
    } else {
        SerialConsoleWriteString("FlagA.txt added!\r\n");
   17b96:	4b13      	ldr	r3, [pc, #76]	; (17be4 <HTTP_DownloadFileTransaction+0xe4>)
   17b98:	0018      	movs	r0, r3
   17b9a:	4b13      	ldr	r3, [pc, #76]	; (17be8 <HTTP_DownloadFileTransaction+0xe8>)
   17b9c:	4798      	blx	r3
    }
	
	f_close(&file_object);
   17b9e:	4b0d      	ldr	r3, [pc, #52]	; (17bd4 <HTTP_DownloadFileTransaction+0xd4>)
   17ba0:	0018      	movs	r0, r3
   17ba2:	4b12      	ldr	r3, [pc, #72]	; (17bec <HTTP_DownloadFileTransaction+0xec>)
   17ba4:	4798      	blx	r3
    wifiStateMachine = WIFI_MQTT_INIT;
   17ba6:	4b12      	ldr	r3, [pc, #72]	; (17bf0 <HTTP_DownloadFileTransaction+0xf0>)
   17ba8:	2200      	movs	r2, #0
   17baa:	701a      	strb	r2, [r3, #0]
}
   17bac:	46c0      	nop			; (mov r8, r8)
   17bae:	46bd      	mov	sp, r7
   17bb0:	b005      	add	sp, #20
   17bb2:	bd90      	pop	{r4, r7, pc}
   17bb4:	00022b89 	.word	0x00022b89
   17bb8:	20004900 	.word	0x20004900
   17bbc:	0003327d 	.word	0x0003327d
   17bc0:	0001ce31 	.word	0x0001ce31
   17bc4:	00016a49 	.word	0x00016a49
   17bc8:	00026145 	.word	0x00026145
   17bcc:	20000638 	.word	0x20000638
   17bd0:	00037a70 	.word	0x00037a70
   17bd4:	2000086c 	.word	0x2000086c
   17bd8:	0002e545 	.word	0x0002e545
   17bdc:	00037a4c 	.word	0x00037a4c
   17be0:	0001eb71 	.word	0x0001eb71
   17be4:	00037a5c 	.word	0x00037a5c
   17be8:	0001ea85 	.word	0x0001ea85
   17bec:	0002ef45 	.word	0x0002ef45
   17bf0:	20000624 	.word	0x20000624

00017bf4 <MQTT_InitRoutine>:
 * @brief	Routine to initialize the MQTT socket to prepare for MQTT transactions
 * @note

*/
static void MQTT_InitRoutine(void)
{
   17bf4:	b580      	push	{r7, lr}
   17bf6:	af00      	add	r7, sp, #0
    socketDeinit();
   17bf8:	4b18      	ldr	r3, [pc, #96]	; (17c5c <MQTT_InitRoutine+0x68>)
   17bfa:	4798      	blx	r3
    configure_mqtt();
   17bfc:	4b18      	ldr	r3, [pc, #96]	; (17c60 <MQTT_InitRoutine+0x6c>)
   17bfe:	4798      	blx	r3
    // Re-enable socket for MQTT Transfer
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   17c00:	4a18      	ldr	r2, [pc, #96]	; (17c64 <MQTT_InitRoutine+0x70>)
   17c02:	4b19      	ldr	r3, [pc, #100]	; (17c68 <MQTT_InitRoutine+0x74>)
   17c04:	0011      	movs	r1, r2
   17c06:	0018      	movs	r0, r3
   17c08:	4b18      	ldr	r3, [pc, #96]	; (17c6c <MQTT_InitRoutine+0x78>)
   17c0a:	4798      	blx	r3
    socketInit();
   17c0c:	4b18      	ldr	r3, [pc, #96]	; (17c70 <MQTT_InitRoutine+0x7c>)
   17c0e:	4798      	blx	r3
    /* Connect to router. */
    if (!(mqtt_inst.isConnected)) {
   17c10:	4b18      	ldr	r3, [pc, #96]	; (17c74 <MQTT_InitRoutine+0x80>)
   17c12:	2234      	movs	r2, #52	; 0x34
   17c14:	5c9b      	ldrb	r3, [r3, r2]
   17c16:	2201      	movs	r2, #1
   17c18:	4053      	eors	r3, r2
   17c1a:	b2db      	uxtb	r3, r3
   17c1c:	2b00      	cmp	r3, #0
   17c1e:	d00c      	beq.n	17c3a <MQTT_InitRoutine+0x46>
        if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   17c20:	4a15      	ldr	r2, [pc, #84]	; (17c78 <MQTT_InitRoutine+0x84>)
   17c22:	4b14      	ldr	r3, [pc, #80]	; (17c74 <MQTT_InitRoutine+0x80>)
   17c24:	0011      	movs	r1, r2
   17c26:	0018      	movs	r0, r3
   17c28:	4b14      	ldr	r3, [pc, #80]	; (17c7c <MQTT_InitRoutine+0x88>)
   17c2a:	4798      	blx	r3
   17c2c:	1e03      	subs	r3, r0, #0
   17c2e:	d004      	beq.n	17c3a <MQTT_InitRoutine+0x46>
            LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   17c30:	4b13      	ldr	r3, [pc, #76]	; (17c80 <MQTT_InitRoutine+0x8c>)
   17c32:	0019      	movs	r1, r3
   17c34:	2001      	movs	r0, #1
   17c36:	4b13      	ldr	r3, [pc, #76]	; (17c84 <MQTT_InitRoutine+0x90>)
   17c38:	4798      	blx	r3
        }
    }

    if (mqtt_inst.isConnected) {
   17c3a:	4b0e      	ldr	r3, [pc, #56]	; (17c74 <MQTT_InitRoutine+0x80>)
   17c3c:	2234      	movs	r2, #52	; 0x34
   17c3e:	5c9b      	ldrb	r3, [r3, r2]
   17c40:	2b00      	cmp	r3, #0
   17c42:	d004      	beq.n	17c4e <MQTT_InitRoutine+0x5a>
        LogMessage(LOG_DEBUG_LVL, "Connected to MQTT Broker!\r\n\r\n");
   17c44:	4b10      	ldr	r3, [pc, #64]	; (17c88 <MQTT_InitRoutine+0x94>)
   17c46:	0019      	movs	r1, r3
   17c48:	2001      	movs	r0, #1
   17c4a:	4b0e      	ldr	r3, [pc, #56]	; (17c84 <MQTT_InitRoutine+0x90>)
   17c4c:	4798      	blx	r3
    }
    wifiStateMachine = WIFI_MQTT_HANDLE;
   17c4e:	4b0f      	ldr	r3, [pc, #60]	; (17c8c <MQTT_InitRoutine+0x98>)
   17c50:	2201      	movs	r2, #1
   17c52:	701a      	strb	r2, [r3, #0]
}
   17c54:	46c0      	nop			; (mov r8, r8)
   17c56:	46bd      	mov	sp, r7
   17c58:	bd80      	pop	{r7, pc}
   17c5a:	46c0      	nop			; (mov r8, r8)
   17c5c:	00026145 	.word	0x00026145
   17c60:	000178fd 	.word	0x000178fd
   17c64:	00017509 	.word	0x00017509
   17c68:	000174d5 	.word	0x000174d5
   17c6c:	0002618d 	.word	0x0002618d
   17c70:	000260f5 	.word	0x000260f5
   17c74:	20000898 	.word	0x20000898
   17c78:	000371e8 	.word	0x000371e8
   17c7c:	00030421 	.word	0x00030421
   17c80:	000375f8 	.word	0x000375f8
   17c84:	0001eb71 	.word	0x0001eb71
   17c88:	00037a7c 	.word	0x00037a7c
   17c8c:	20000624 	.word	0x20000624

00017c90 <MQTT_HandleTransactions>:
 * @brief	Routine to handle MQTT transactions
 * @note

*/
static void MQTT_HandleTransactions(void)
{
   17c90:	b580      	push	{r7, lr}
   17c92:	af00      	add	r7, sp, #0
    /* Handle pending events from network controller. */
    m2m_wifi_handle_events(NULL);
   17c94:	2000      	movs	r0, #0
   17c96:	4b0b      	ldr	r3, [pc, #44]	; (17cc4 <MQTT_HandleTransactions+0x34>)
   17c98:	4798      	blx	r3
    sw_timer_task(&swt_module_inst);
   17c9a:	4b0b      	ldr	r3, [pc, #44]	; (17cc8 <MQTT_HandleTransactions+0x38>)
   17c9c:	0018      	movs	r0, r3
   17c9e:	4b0b      	ldr	r3, [pc, #44]	; (17ccc <MQTT_HandleTransactions+0x3c>)
   17ca0:	4798      	blx	r3

    // Check if data has to be sent!
    MQTT_HandleGameMessages();
   17ca2:	4b0b      	ldr	r3, [pc, #44]	; (17cd0 <MQTT_HandleTransactions+0x40>)
   17ca4:	4798      	blx	r3
    MQTT_HandleImuMessages();
   17ca6:	4b0b      	ldr	r3, [pc, #44]	; (17cd4 <MQTT_HandleTransactions+0x44>)
   17ca8:	4798      	blx	r3

    // Handle MQTT messages
    if (mqtt_inst.isConnected) mqtt_yield(&mqtt_inst, 100);
   17caa:	4b0b      	ldr	r3, [pc, #44]	; (17cd8 <MQTT_HandleTransactions+0x48>)
   17cac:	2234      	movs	r2, #52	; 0x34
   17cae:	5c9b      	ldrb	r3, [r3, r2]
   17cb0:	2b00      	cmp	r3, #0
   17cb2:	d004      	beq.n	17cbe <MQTT_HandleTransactions+0x2e>
   17cb4:	4b08      	ldr	r3, [pc, #32]	; (17cd8 <MQTT_HandleTransactions+0x48>)
   17cb6:	2164      	movs	r1, #100	; 0x64
   17cb8:	0018      	movs	r0, r3
   17cba:	4b08      	ldr	r3, [pc, #32]	; (17cdc <MQTT_HandleTransactions+0x4c>)
   17cbc:	4798      	blx	r3
}
   17cbe:	46c0      	nop			; (mov r8, r8)
   17cc0:	46bd      	mov	sp, r7
   17cc2:	bd80      	pop	{r7, pc}
   17cc4:	00022b89 	.word	0x00022b89
   17cc8:	20004900 	.word	0x20004900
   17ccc:	0003327d 	.word	0x0003327d
   17cd0:	00017d6d 	.word	0x00017d6d
   17cd4:	00017ce1 	.word	0x00017ce1
   17cd8:	20000898 	.word	0x20000898
   17cdc:	00030651 	.word	0x00030651

00017ce0 <MQTT_HandleImuMessages>:

static void MQTT_HandleImuMessages(void)
{
   17ce0:	b590      	push	{r4, r7, lr}
   17ce2:	b085      	sub	sp, #20
   17ce4:	af02      	add	r7, sp, #8
    struct ImuDataPacket imuDataVar;
    if (pdPASS == xQueueReceive(xQueueImuBuffer, &imuDataVar, 0)) {
   17ce6:	4b18      	ldr	r3, [pc, #96]	; (17d48 <MQTT_HandleImuMessages+0x68>)
   17ce8:	681b      	ldr	r3, [r3, #0]
   17cea:	0039      	movs	r1, r7
   17cec:	2200      	movs	r2, #0
   17cee:	0018      	movs	r0, r3
   17cf0:	4b16      	ldr	r3, [pc, #88]	; (17d4c <MQTT_HandleImuMessages+0x6c>)
   17cf2:	4798      	blx	r3
   17cf4:	0003      	movs	r3, r0
   17cf6:	2b01      	cmp	r3, #1
   17cf8:	d121      	bne.n	17d3e <MQTT_HandleImuMessages+0x5e>
        snprintf(mqtt_msg, 63, "{\"imux\":%d, \"imuy\": %d, \"imuz\": %d}", imuDataVar.xmg, imuDataVar.ymg, imuDataVar.zmg);
   17cfa:	003b      	movs	r3, r7
   17cfc:	2200      	movs	r2, #0
   17cfe:	5e9b      	ldrsh	r3, [r3, r2]
   17d00:	001c      	movs	r4, r3
   17d02:	003b      	movs	r3, r7
   17d04:	2202      	movs	r2, #2
   17d06:	5e9b      	ldrsh	r3, [r3, r2]
   17d08:	0019      	movs	r1, r3
   17d0a:	003b      	movs	r3, r7
   17d0c:	2204      	movs	r2, #4
   17d0e:	5e9b      	ldrsh	r3, [r3, r2]
   17d10:	4a0f      	ldr	r2, [pc, #60]	; (17d50 <MQTT_HandleImuMessages+0x70>)
   17d12:	4810      	ldr	r0, [pc, #64]	; (17d54 <MQTT_HandleImuMessages+0x74>)
   17d14:	9301      	str	r3, [sp, #4]
   17d16:	9100      	str	r1, [sp, #0]
   17d18:	0023      	movs	r3, r4
   17d1a:	213f      	movs	r1, #63	; 0x3f
   17d1c:	4c0e      	ldr	r4, [pc, #56]	; (17d58 <MQTT_HandleImuMessages+0x78>)
   17d1e:	47a0      	blx	r4
        mqtt_publish(&mqtt_inst, IMU_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   17d20:	4b0c      	ldr	r3, [pc, #48]	; (17d54 <MQTT_HandleImuMessages+0x74>)
   17d22:	0018      	movs	r0, r3
   17d24:	4b0d      	ldr	r3, [pc, #52]	; (17d5c <MQTT_HandleImuMessages+0x7c>)
   17d26:	4798      	blx	r3
   17d28:	0004      	movs	r4, r0
   17d2a:	4a0a      	ldr	r2, [pc, #40]	; (17d54 <MQTT_HandleImuMessages+0x74>)
   17d2c:	490c      	ldr	r1, [pc, #48]	; (17d60 <MQTT_HandleImuMessages+0x80>)
   17d2e:	480d      	ldr	r0, [pc, #52]	; (17d64 <MQTT_HandleImuMessages+0x84>)
   17d30:	2300      	movs	r3, #0
   17d32:	9301      	str	r3, [sp, #4]
   17d34:	2301      	movs	r3, #1
   17d36:	9300      	str	r3, [sp, #0]
   17d38:	0023      	movs	r3, r4
   17d3a:	4c0b      	ldr	r4, [pc, #44]	; (17d68 <MQTT_HandleImuMessages+0x88>)
   17d3c:	47a0      	blx	r4
    }
}
   17d3e:	46c0      	nop			; (mov r8, r8)
   17d40:	46bd      	mov	sp, r7
   17d42:	b003      	add	sp, #12
   17d44:	bd90      	pop	{r4, r7, pc}
   17d46:	46c0      	nop			; (mov r8, r8)
   17d48:	20000630 	.word	0x20000630
   17d4c:	0001bc85 	.word	0x0001bc85
   17d50:	00037a9c 	.word	0x00037a9c
   17d54:	20000030 	.word	0x20000030
   17d58:	00035849 	.word	0x00035849
   17d5c:	000359a7 	.word	0x000359a7
   17d60:	00037960 	.word	0x00037960
   17d64:	20000898 	.word	0x20000898
   17d68:	0003059d 	.word	0x0003059d

00017d6c <MQTT_HandleGameMessages>:

static void MQTT_HandleGameMessages(void)
{
   17d6c:	b590      	push	{r4, r7, lr}
   17d6e:	b08b      	sub	sp, #44	; 0x2c
   17d70:	af02      	add	r7, sp, #8
    struct GameDataPacket gamePacket;
    if (pdPASS == xQueueReceive(xQueueGameBuffer, &gamePacket, 0)) {
   17d72:	4b39      	ldr	r3, [pc, #228]	; (17e58 <MQTT_HandleGameMessages+0xec>)
   17d74:	681b      	ldr	r3, [r3, #0]
   17d76:	2208      	movs	r2, #8
   17d78:	18b9      	adds	r1, r7, r2
   17d7a:	2200      	movs	r2, #0
   17d7c:	0018      	movs	r0, r3
   17d7e:	4b37      	ldr	r3, [pc, #220]	; (17e5c <MQTT_HandleGameMessages+0xf0>)
   17d80:	4798      	blx	r3
   17d82:	0003      	movs	r3, r0
   17d84:	2b01      	cmp	r3, #1
   17d86:	d163      	bne.n	17e50 <MQTT_HandleGameMessages+0xe4>
        snprintf(mqtt_msg, 63, "{\"game\":[");
   17d88:	4b35      	ldr	r3, [pc, #212]	; (17e60 <MQTT_HandleGameMessages+0xf4>)
   17d8a:	4a36      	ldr	r2, [pc, #216]	; (17e64 <MQTT_HandleGameMessages+0xf8>)
   17d8c:	ca03      	ldmia	r2!, {r0, r1}
   17d8e:	c303      	stmia	r3!, {r0, r1}
   17d90:	8812      	ldrh	r2, [r2, #0]
   17d92:	801a      	strh	r2, [r3, #0]
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   17d94:	2300      	movs	r3, #0
   17d96:	61fb      	str	r3, [r7, #28]
   17d98:	e02d      	b.n	17df6 <MQTT_HandleGameMessages+0x8a>
            char numGame[5];
            if (gamePacket.game[iter] != 0xFF) {
   17d9a:	2308      	movs	r3, #8
   17d9c:	18fa      	adds	r2, r7, r3
   17d9e:	69fb      	ldr	r3, [r7, #28]
   17da0:	18d3      	adds	r3, r2, r3
   17da2:	781b      	ldrb	r3, [r3, #0]
   17da4:	2bff      	cmp	r3, #255	; 0xff
   17da6:	d02a      	beq.n	17dfe <MQTT_HandleGameMessages+0x92>
                snprintf(numGame, 3, "%d", gamePacket.game[iter]);
   17da8:	2308      	movs	r3, #8
   17daa:	18fa      	adds	r2, r7, r3
   17dac:	69fb      	ldr	r3, [r7, #28]
   17dae:	18d3      	adds	r3, r2, r3
   17db0:	781b      	ldrb	r3, [r3, #0]
   17db2:	4a2d      	ldr	r2, [pc, #180]	; (17e68 <MQTT_HandleGameMessages+0xfc>)
   17db4:	0038      	movs	r0, r7
   17db6:	2103      	movs	r1, #3
   17db8:	4c2c      	ldr	r4, [pc, #176]	; (17e6c <MQTT_HandleGameMessages+0x100>)
   17dba:	47a0      	blx	r4
                strcat(mqtt_msg, numGame);
   17dbc:	003a      	movs	r2, r7
   17dbe:	4b28      	ldr	r3, [pc, #160]	; (17e60 <MQTT_HandleGameMessages+0xf4>)
   17dc0:	0011      	movs	r1, r2
   17dc2:	0018      	movs	r0, r3
   17dc4:	4b2a      	ldr	r3, [pc, #168]	; (17e70 <MQTT_HandleGameMessages+0x104>)
   17dc6:	4798      	blx	r3
                if (gamePacket.game[iter + 1] != 0xFF && iter + 1 < GAME_SIZE) {
   17dc8:	69fb      	ldr	r3, [r7, #28]
   17dca:	3301      	adds	r3, #1
   17dcc:	2208      	movs	r2, #8
   17dce:	18ba      	adds	r2, r7, r2
   17dd0:	5cd3      	ldrb	r3, [r2, r3]
   17dd2:	2bff      	cmp	r3, #255	; 0xff
   17dd4:	d00c      	beq.n	17df0 <MQTT_HandleGameMessages+0x84>
   17dd6:	69fb      	ldr	r3, [r7, #28]
   17dd8:	3301      	adds	r3, #1
   17dda:	2b13      	cmp	r3, #19
   17ddc:	dc08      	bgt.n	17df0 <MQTT_HandleGameMessages+0x84>
                    snprintf(numGame, 5, ",");
   17dde:	003b      	movs	r3, r7
   17de0:	222c      	movs	r2, #44	; 0x2c
   17de2:	801a      	strh	r2, [r3, #0]
                    strcat(mqtt_msg, numGame);
   17de4:	003a      	movs	r2, r7
   17de6:	4b1e      	ldr	r3, [pc, #120]	; (17e60 <MQTT_HandleGameMessages+0xf4>)
   17de8:	0011      	movs	r1, r2
   17dea:	0018      	movs	r0, r3
   17dec:	4b20      	ldr	r3, [pc, #128]	; (17e70 <MQTT_HandleGameMessages+0x104>)
   17dee:	4798      	blx	r3
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   17df0:	69fb      	ldr	r3, [r7, #28]
   17df2:	3301      	adds	r3, #1
   17df4:	61fb      	str	r3, [r7, #28]
   17df6:	69fb      	ldr	r3, [r7, #28]
   17df8:	2b13      	cmp	r3, #19
   17dfa:	ddce      	ble.n	17d9a <MQTT_HandleGameMessages+0x2e>
   17dfc:	e000      	b.n	17e00 <MQTT_HandleGameMessages+0x94>
                }
            } else {
                break;
   17dfe:	46c0      	nop			; (mov r8, r8)
            }
        }
        strcat(mqtt_msg, "]}");
   17e00:	4b17      	ldr	r3, [pc, #92]	; (17e60 <MQTT_HandleGameMessages+0xf4>)
   17e02:	0018      	movs	r0, r3
   17e04:	4b1b      	ldr	r3, [pc, #108]	; (17e74 <MQTT_HandleGameMessages+0x108>)
   17e06:	4798      	blx	r3
   17e08:	0003      	movs	r3, r0
   17e0a:	001a      	movs	r2, r3
   17e0c:	4b14      	ldr	r3, [pc, #80]	; (17e60 <MQTT_HandleGameMessages+0xf4>)
   17e0e:	18d2      	adds	r2, r2, r3
   17e10:	4b19      	ldr	r3, [pc, #100]	; (17e78 <MQTT_HandleGameMessages+0x10c>)
   17e12:	0010      	movs	r0, r2
   17e14:	0019      	movs	r1, r3
   17e16:	2303      	movs	r3, #3
   17e18:	001a      	movs	r2, r3
   17e1a:	4b18      	ldr	r3, [pc, #96]	; (17e7c <MQTT_HandleGameMessages+0x110>)
   17e1c:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, mqtt_msg);
   17e1e:	4b10      	ldr	r3, [pc, #64]	; (17e60 <MQTT_HandleGameMessages+0xf4>)
   17e20:	0019      	movs	r1, r3
   17e22:	2001      	movs	r0, #1
   17e24:	4b16      	ldr	r3, [pc, #88]	; (17e80 <MQTT_HandleGameMessages+0x114>)
   17e26:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n");
   17e28:	4b16      	ldr	r3, [pc, #88]	; (17e84 <MQTT_HandleGameMessages+0x118>)
   17e2a:	0019      	movs	r1, r3
   17e2c:	2001      	movs	r0, #1
   17e2e:	4b14      	ldr	r3, [pc, #80]	; (17e80 <MQTT_HandleGameMessages+0x114>)
   17e30:	4798      	blx	r3
        mqtt_publish(&mqtt_inst, GAME_TOPIC_OUT, mqtt_msg, strlen(mqtt_msg), 1, 0);
   17e32:	4b0b      	ldr	r3, [pc, #44]	; (17e60 <MQTT_HandleGameMessages+0xf4>)
   17e34:	0018      	movs	r0, r3
   17e36:	4b0f      	ldr	r3, [pc, #60]	; (17e74 <MQTT_HandleGameMessages+0x108>)
   17e38:	4798      	blx	r3
   17e3a:	0004      	movs	r4, r0
   17e3c:	4a08      	ldr	r2, [pc, #32]	; (17e60 <MQTT_HandleGameMessages+0xf4>)
   17e3e:	4912      	ldr	r1, [pc, #72]	; (17e88 <MQTT_HandleGameMessages+0x11c>)
   17e40:	4812      	ldr	r0, [pc, #72]	; (17e8c <MQTT_HandleGameMessages+0x120>)
   17e42:	2300      	movs	r3, #0
   17e44:	9301      	str	r3, [sp, #4]
   17e46:	2301      	movs	r3, #1
   17e48:	9300      	str	r3, [sp, #0]
   17e4a:	0023      	movs	r3, r4
   17e4c:	4c10      	ldr	r4, [pc, #64]	; (17e90 <MQTT_HandleGameMessages+0x124>)
   17e4e:	47a0      	blx	r4
    }
}
   17e50:	46c0      	nop			; (mov r8, r8)
   17e52:	46bd      	mov	sp, r7
   17e54:	b009      	add	sp, #36	; 0x24
   17e56:	bd90      	pop	{r4, r7, pc}
   17e58:	2000062c 	.word	0x2000062c
   17e5c:	0001bc85 	.word	0x0001bc85
   17e60:	20000030 	.word	0x20000030
   17e64:	00037794 	.word	0x00037794
   17e68:	00037ac0 	.word	0x00037ac0
   17e6c:	00035849 	.word	0x00035849
   17e70:	0003592d 	.word	0x0003592d
   17e74:	000359a7 	.word	0x000359a7
   17e78:	00037ac4 	.word	0x00037ac4
   17e7c:	000355b9 	.word	0x000355b9
   17e80:	0001eb71 	.word	0x0001eb71
   17e84:	00037ac8 	.word	0x00037ac8
   17e88:	00037acc 	.word	0x00037acc
   17e8c:	20000898 	.word	0x20000898
   17e90:	0003059d 	.word	0x0003059d

00017e94 <vWifiTask>:
 * Application entry point.
 *
 * \return program return value.
 */
void vWifiTask(void *pvParameters)
{
   17e94:	b590      	push	{r4, r7, lr}
   17e96:	b08d      	sub	sp, #52	; 0x34
   17e98:	af02      	add	r7, sp, #8
   17e9a:	6078      	str	r0, [r7, #4]
    tstrWifiInitParam param;
    int8_t ret;
    vTaskDelay(100);
   17e9c:	2064      	movs	r0, #100	; 0x64
   17e9e:	4b79      	ldr	r3, [pc, #484]	; (18084 <vWifiTask+0x1f0>)
   17ea0:	4798      	blx	r3
    init_state();
   17ea2:	4b79      	ldr	r3, [pc, #484]	; (18088 <vWifiTask+0x1f4>)
   17ea4:	4798      	blx	r3
    // Create buffers to send data
    xQueueWifiState = xQueueCreate(5, sizeof(uint32_t));
   17ea6:	2200      	movs	r2, #0
   17ea8:	2104      	movs	r1, #4
   17eaa:	2005      	movs	r0, #5
   17eac:	4b77      	ldr	r3, [pc, #476]	; (1808c <vWifiTask+0x1f8>)
   17eae:	4798      	blx	r3
   17eb0:	0002      	movs	r2, r0
   17eb2:	4b77      	ldr	r3, [pc, #476]	; (18090 <vWifiTask+0x1fc>)
   17eb4:	601a      	str	r2, [r3, #0]
    xQueueImuBuffer = xQueueCreate(5, sizeof(struct ImuDataPacket));
   17eb6:	2200      	movs	r2, #0
   17eb8:	2106      	movs	r1, #6
   17eba:	2005      	movs	r0, #5
   17ebc:	4b73      	ldr	r3, [pc, #460]	; (1808c <vWifiTask+0x1f8>)
   17ebe:	4798      	blx	r3
   17ec0:	0002      	movs	r2, r0
   17ec2:	4b74      	ldr	r3, [pc, #464]	; (18094 <vWifiTask+0x200>)
   17ec4:	601a      	str	r2, [r3, #0]
    xQueueGameBuffer = xQueueCreate(2, sizeof(struct GameDataPacket));
   17ec6:	2200      	movs	r2, #0
   17ec8:	2114      	movs	r1, #20
   17eca:	2002      	movs	r0, #2
   17ecc:	4b6f      	ldr	r3, [pc, #444]	; (1808c <vWifiTask+0x1f8>)
   17ece:	4798      	blx	r3
   17ed0:	0002      	movs	r2, r0
   17ed2:	4b71      	ldr	r3, [pc, #452]	; (18098 <vWifiTask+0x204>)
   17ed4:	601a      	str	r2, [r3, #0]
    xQueueDistanceBuffer = xQueueCreate(5, sizeof(uint16_t));
   17ed6:	2200      	movs	r2, #0
   17ed8:	2102      	movs	r1, #2
   17eda:	2005      	movs	r0, #5
   17edc:	4b6b      	ldr	r3, [pc, #428]	; (1808c <vWifiTask+0x1f8>)
   17ede:	4798      	blx	r3
   17ee0:	0002      	movs	r2, r0
   17ee2:	4b6e      	ldr	r3, [pc, #440]	; (1809c <vWifiTask+0x208>)
   17ee4:	601a      	str	r2, [r3, #0]

    if (xQueueWifiState == NULL || xQueueImuBuffer == NULL || xQueueGameBuffer == NULL || xQueueDistanceBuffer == NULL) {
   17ee6:	4b6a      	ldr	r3, [pc, #424]	; (18090 <vWifiTask+0x1fc>)
   17ee8:	681b      	ldr	r3, [r3, #0]
   17eea:	2b00      	cmp	r3, #0
   17eec:	d00b      	beq.n	17f06 <vWifiTask+0x72>
   17eee:	4b69      	ldr	r3, [pc, #420]	; (18094 <vWifiTask+0x200>)
   17ef0:	681b      	ldr	r3, [r3, #0]
   17ef2:	2b00      	cmp	r3, #0
   17ef4:	d007      	beq.n	17f06 <vWifiTask+0x72>
   17ef6:	4b68      	ldr	r3, [pc, #416]	; (18098 <vWifiTask+0x204>)
   17ef8:	681b      	ldr	r3, [r3, #0]
   17efa:	2b00      	cmp	r3, #0
   17efc:	d003      	beq.n	17f06 <vWifiTask+0x72>
   17efe:	4b67      	ldr	r3, [pc, #412]	; (1809c <vWifiTask+0x208>)
   17f00:	681b      	ldr	r3, [r3, #0]
   17f02:	2b00      	cmp	r3, #0
   17f04:	d103      	bne.n	17f0e <vWifiTask+0x7a>
        SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
   17f06:	4b66      	ldr	r3, [pc, #408]	; (180a0 <vWifiTask+0x20c>)
   17f08:	0018      	movs	r0, r3
   17f0a:	4b66      	ldr	r3, [pc, #408]	; (180a4 <vWifiTask+0x210>)
   17f0c:	4798      	blx	r3
    }

    SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
   17f0e:	4b66      	ldr	r3, [pc, #408]	; (180a8 <vWifiTask+0x214>)
   17f10:	0018      	movs	r0, r3
   17f12:	4b64      	ldr	r3, [pc, #400]	; (180a4 <vWifiTask+0x210>)
   17f14:	4798      	blx	r3
    /* Initialize the Timer. */
    configure_timer();
   17f16:	4b65      	ldr	r3, [pc, #404]	; (180ac <vWifiTask+0x218>)
   17f18:	4798      	blx	r3

    /* Initialize the HTTP client service. */
    configure_http_client();
   17f1a:	4b65      	ldr	r3, [pc, #404]	; (180b0 <vWifiTask+0x21c>)
   17f1c:	4798      	blx	r3

    /* Initialize the MQTT service. */
    configure_mqtt();
   17f1e:	4b65      	ldr	r3, [pc, #404]	; (180b4 <vWifiTask+0x220>)
   17f20:	4798      	blx	r3

    /* Initialize SD/MMC storage. */
    init_storage();
   17f22:	4b65      	ldr	r3, [pc, #404]	; (180b8 <vWifiTask+0x224>)
   17f24:	4798      	blx	r3

    /*Initialize BUTTON 0 as an external interrupt*/
    configure_extint_channel();
   17f26:	4b65      	ldr	r3, [pc, #404]	; (180bc <vWifiTask+0x228>)
   17f28:	4798      	blx	r3
    configure_extint_callbacks();
   17f2a:	4b65      	ldr	r3, [pc, #404]	; (180c0 <vWifiTask+0x22c>)
   17f2c:	4798      	blx	r3

    /* Initialize Wi-Fi parameters structure. */
    memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   17f2e:	230c      	movs	r3, #12
   17f30:	18fb      	adds	r3, r7, r3
   17f32:	2218      	movs	r2, #24
   17f34:	2100      	movs	r1, #0
   17f36:	0018      	movs	r0, r3
   17f38:	4b62      	ldr	r3, [pc, #392]	; (180c4 <vWifiTask+0x230>)
   17f3a:	4798      	blx	r3

    nm_bsp_init();
   17f3c:	4b62      	ldr	r3, [pc, #392]	; (180c8 <vWifiTask+0x234>)
   17f3e:	4798      	blx	r3

    /* Initialize Wi-Fi driver with data and status callbacks. */
    param.pfAppWifiCb = wifi_cb;
   17f40:	230c      	movs	r3, #12
   17f42:	18fb      	adds	r3, r7, r3
   17f44:	4a61      	ldr	r2, [pc, #388]	; (180cc <vWifiTask+0x238>)
   17f46:	601a      	str	r2, [r3, #0]
    ret = m2m_wifi_init(&param);
   17f48:	2327      	movs	r3, #39	; 0x27
   17f4a:	18fc      	adds	r4, r7, r3
   17f4c:	230c      	movs	r3, #12
   17f4e:	18fb      	adds	r3, r7, r3
   17f50:	0018      	movs	r0, r3
   17f52:	4b5f      	ldr	r3, [pc, #380]	; (180d0 <vWifiTask+0x23c>)
   17f54:	4798      	blx	r3
   17f56:	0003      	movs	r3, r0
   17f58:	7023      	strb	r3, [r4, #0]
    if (M2M_SUCCESS != ret) {
   17f5a:	2327      	movs	r3, #39	; 0x27
   17f5c:	18fb      	adds	r3, r7, r3
   17f5e:	781b      	ldrb	r3, [r3, #0]
   17f60:	b25b      	sxtb	r3, r3
   17f62:	2b00      	cmp	r3, #0
   17f64:	d009      	beq.n	17f7a <vWifiTask+0xe6>
        LogMessage(LOG_DEBUG_LVL, "main: m2m_wifi_init call error! (res %d)\r\n", ret);
   17f66:	2327      	movs	r3, #39	; 0x27
   17f68:	18fb      	adds	r3, r7, r3
   17f6a:	2200      	movs	r2, #0
   17f6c:	569a      	ldrsb	r2, [r3, r2]
   17f6e:	4b59      	ldr	r3, [pc, #356]	; (180d4 <vWifiTask+0x240>)
   17f70:	0019      	movs	r1, r3
   17f72:	2001      	movs	r0, #1
   17f74:	4b58      	ldr	r3, [pc, #352]	; (180d8 <vWifiTask+0x244>)
   17f76:	4798      	blx	r3
        while (1) {
   17f78:	e7fe      	b.n	17f78 <vWifiTask+0xe4>
        }
    }

    LogMessage(LOG_DEBUG_LVL, "main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   17f7a:	4a58      	ldr	r2, [pc, #352]	; (180dc <vWifiTask+0x248>)
   17f7c:	4b58      	ldr	r3, [pc, #352]	; (180e0 <vWifiTask+0x24c>)
   17f7e:	0019      	movs	r1, r3
   17f80:	2001      	movs	r0, #1
   17f82:	4b55      	ldr	r3, [pc, #340]	; (180d8 <vWifiTask+0x244>)
   17f84:	4798      	blx	r3

    // Re-enable socket for MQTT Transfer
    socketInit();
   17f86:	4b57      	ldr	r3, [pc, #348]	; (180e4 <vWifiTask+0x250>)
   17f88:	4798      	blx	r3
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   17f8a:	4a57      	ldr	r2, [pc, #348]	; (180e8 <vWifiTask+0x254>)
   17f8c:	4b57      	ldr	r3, [pc, #348]	; (180ec <vWifiTask+0x258>)
   17f8e:	0011      	movs	r1, r2
   17f90:	0018      	movs	r0, r3
   17f92:	4b57      	ldr	r3, [pc, #348]	; (180f0 <vWifiTask+0x25c>)
   17f94:	4798      	blx	r3

    m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   17f96:	4a57      	ldr	r2, [pc, #348]	; (180f4 <vWifiTask+0x260>)
   17f98:	4850      	ldr	r0, [pc, #320]	; (180dc <vWifiTask+0x248>)
   17f9a:	23ff      	movs	r3, #255	; 0xff
   17f9c:	9300      	str	r3, [sp, #0]
   17f9e:	0013      	movs	r3, r2
   17fa0:	2202      	movs	r2, #2
   17fa2:	2106      	movs	r1, #6
   17fa4:	4c54      	ldr	r4, [pc, #336]	; (180f8 <vWifiTask+0x264>)
   17fa6:	47a0      	blx	r4

    while (!(is_state_set(WIFI_CONNECTED))) {
   17fa8:	e006      	b.n	17fb8 <vWifiTask+0x124>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   17faa:	2000      	movs	r0, #0
   17fac:	4b53      	ldr	r3, [pc, #332]	; (180fc <vWifiTask+0x268>)
   17fae:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   17fb0:	4b53      	ldr	r3, [pc, #332]	; (18100 <vWifiTask+0x26c>)
   17fb2:	0018      	movs	r0, r3
   17fb4:	4b53      	ldr	r3, [pc, #332]	; (18104 <vWifiTask+0x270>)
   17fb6:	4798      	blx	r3
    while (!(is_state_set(WIFI_CONNECTED))) {
   17fb8:	2002      	movs	r0, #2
   17fba:	4b53      	ldr	r3, [pc, #332]	; (18108 <vWifiTask+0x274>)
   17fbc:	4798      	blx	r3
   17fbe:	0003      	movs	r3, r0
   17fc0:	001a      	movs	r2, r3
   17fc2:	2301      	movs	r3, #1
   17fc4:	4053      	eors	r3, r2
   17fc6:	b2db      	uxtb	r3, r3
   17fc8:	2b00      	cmp	r3, #0
   17fca:	d1ee      	bne.n	17faa <vWifiTask+0x116>
    }

    vTaskDelay(1000);
   17fcc:	23fa      	movs	r3, #250	; 0xfa
   17fce:	009b      	lsls	r3, r3, #2
   17fd0:	0018      	movs	r0, r3
   17fd2:	4b2c      	ldr	r3, [pc, #176]	; (18084 <vWifiTask+0x1f0>)
   17fd4:	4798      	blx	r3

    wifiStateMachine = WIFI_MQTT_HANDLE;
   17fd6:	4b4d      	ldr	r3, [pc, #308]	; (1810c <vWifiTask+0x278>)
   17fd8:	2201      	movs	r2, #1
   17fda:	701a      	strb	r2, [r3, #0]
    while (1) {
        switch (wifiStateMachine) {
   17fdc:	4b4b      	ldr	r3, [pc, #300]	; (1810c <vWifiTask+0x278>)
   17fde:	781b      	ldrb	r3, [r3, #0]
   17fe0:	b25b      	sxtb	r3, r3
   17fe2:	2b01      	cmp	r3, #1
   17fe4:	d00b      	beq.n	17ffe <vWifiTask+0x16a>
   17fe6:	dc02      	bgt.n	17fee <vWifiTask+0x15a>
   17fe8:	2b00      	cmp	r3, #0
   17fea:	d005      	beq.n	17ff8 <vWifiTask+0x164>
   17fec:	e010      	b.n	18010 <vWifiTask+0x17c>
   17fee:	2b02      	cmp	r3, #2
   17ff0:	d008      	beq.n	18004 <vWifiTask+0x170>
   17ff2:	2b03      	cmp	r3, #3
   17ff4:	d009      	beq.n	1800a <vWifiTask+0x176>
   17ff6:	e00b      	b.n	18010 <vWifiTask+0x17c>
            case (WIFI_MQTT_INIT): {
                MQTT_InitRoutine();
   17ff8:	4b45      	ldr	r3, [pc, #276]	; (18110 <vWifiTask+0x27c>)
   17ffa:	4798      	blx	r3

                break;
   17ffc:	e00c      	b.n	18018 <vWifiTask+0x184>
            }

            case (WIFI_MQTT_HANDLE): {
                MQTT_HandleTransactions();
   17ffe:	4b45      	ldr	r3, [pc, #276]	; (18114 <vWifiTask+0x280>)
   18000:	4798      	blx	r3
                break;
   18002:	e009      	b.n	18018 <vWifiTask+0x184>
            }

            case (WIFI_DOWNLOAD_INIT): {
                HTTP_DownloadFileInit();
   18004:	4b44      	ldr	r3, [pc, #272]	; (18118 <vWifiTask+0x284>)
   18006:	4798      	blx	r3
                break;
   18008:	e006      	b.n	18018 <vWifiTask+0x184>
            }

            case (WIFI_DOWNLOAD_HANDLE): {
                HTTP_DownloadFileTransaction();
   1800a:	4b44      	ldr	r3, [pc, #272]	; (1811c <vWifiTask+0x288>)
   1800c:	4798      	blx	r3
                break;
   1800e:	e003      	b.n	18018 <vWifiTask+0x184>
            }

            default:
                wifiStateMachine = WIFI_MQTT_INIT;
   18010:	4b3e      	ldr	r3, [pc, #248]	; (1810c <vWifiTask+0x278>)
   18012:	2200      	movs	r2, #0
   18014:	701a      	strb	r2, [r3, #0]
                break;
   18016:	46c0      	nop			; (mov r8, r8)
        }
        // Check if a new state was called
        uint8_t DataToReceive = 0;
   18018:	230b      	movs	r3, #11
   1801a:	18fb      	adds	r3, r7, r3
   1801c:	2200      	movs	r2, #0
   1801e:	701a      	strb	r2, [r3, #0]
        if (pdPASS == xQueueReceive(xQueueWifiState, &DataToReceive, 0)) {
   18020:	4b1b      	ldr	r3, [pc, #108]	; (18090 <vWifiTask+0x1fc>)
   18022:	681b      	ldr	r3, [r3, #0]
   18024:	220b      	movs	r2, #11
   18026:	18b9      	adds	r1, r7, r2
   18028:	2200      	movs	r2, #0
   1802a:	0018      	movs	r0, r3
   1802c:	4b3c      	ldr	r3, [pc, #240]	; (18120 <vWifiTask+0x28c>)
   1802e:	4798      	blx	r3
   18030:	0003      	movs	r3, r0
   18032:	2b01      	cmp	r3, #1
   18034:	d105      	bne.n	18042 <vWifiTask+0x1ae>
            wifiStateMachine = DataToReceive;  // Update new state
   18036:	230b      	movs	r3, #11
   18038:	18fb      	adds	r3, r7, r3
   1803a:	781b      	ldrb	r3, [r3, #0]
   1803c:	b25a      	sxtb	r2, r3
   1803e:	4b33      	ldr	r3, [pc, #204]	; (1810c <vWifiTask+0x278>)
   18040:	701a      	strb	r2, [r3, #0]
        }

        //Check if we need to publish something. In this example, we publish the "temperature" when the button was pressed.
        if(isPressed)
   18042:	4b38      	ldr	r3, [pc, #224]	; (18124 <vWifiTask+0x290>)
   18044:	781b      	ldrb	r3, [r3, #0]
   18046:	b2db      	uxtb	r3, r3
   18048:	2b00      	cmp	r3, #0
   1804a:	d017      	beq.n	1807c <vWifiTask+0x1e8>
        {
            mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg_temp, strlen(mqtt_msg_temp), 1, 0);
   1804c:	4b36      	ldr	r3, [pc, #216]	; (18128 <vWifiTask+0x294>)
   1804e:	0018      	movs	r0, r3
   18050:	4b36      	ldr	r3, [pc, #216]	; (1812c <vWifiTask+0x298>)
   18052:	4798      	blx	r3
   18054:	0004      	movs	r4, r0
   18056:	4a34      	ldr	r2, [pc, #208]	; (18128 <vWifiTask+0x294>)
   18058:	4935      	ldr	r1, [pc, #212]	; (18130 <vWifiTask+0x29c>)
   1805a:	4836      	ldr	r0, [pc, #216]	; (18134 <vWifiTask+0x2a0>)
   1805c:	2300      	movs	r3, #0
   1805e:	9301      	str	r3, [sp, #4]
   18060:	2301      	movs	r3, #1
   18062:	9300      	str	r3, [sp, #0]
   18064:	0023      	movs	r3, r4
   18066:	4c34      	ldr	r4, [pc, #208]	; (18138 <vWifiTask+0x2a4>)
   18068:	47a0      	blx	r4
            LogMessage(LOG_DEBUG_LVL, "MQTT send %s\r\n", mqtt_msg_temp);
   1806a:	4a2f      	ldr	r2, [pc, #188]	; (18128 <vWifiTask+0x294>)
   1806c:	4b33      	ldr	r3, [pc, #204]	; (1813c <vWifiTask+0x2a8>)
   1806e:	0019      	movs	r1, r3
   18070:	2001      	movs	r0, #1
   18072:	4b19      	ldr	r3, [pc, #100]	; (180d8 <vWifiTask+0x244>)
   18074:	4798      	blx	r3
            isPressed = false;
   18076:	4b2b      	ldr	r3, [pc, #172]	; (18124 <vWifiTask+0x290>)
   18078:	2200      	movs	r2, #0
   1807a:	701a      	strb	r2, [r3, #0]

        }

        vTaskDelay(100);
   1807c:	2064      	movs	r0, #100	; 0x64
   1807e:	4b01      	ldr	r3, [pc, #4]	; (18084 <vWifiTask+0x1f0>)
   18080:	4798      	blx	r3
    while (1) {
   18082:	e7ab      	b.n	17fdc <vWifiTask+0x148>
   18084:	0001ce31 	.word	0x0001ce31
   18088:	000169d9 	.word	0x000169d9
   1808c:	0001b125 	.word	0x0001b125
   18090:	20000628 	.word	0x20000628
   18094:	20000630 	.word	0x20000630
   18098:	2000062c 	.word	0x2000062c
   1809c:	20000634 	.word	0x20000634
   180a0:	00037ae0 	.word	0x00037ae0
   180a4:	0001ea85 	.word	0x0001ea85
   180a8:	00037b08 	.word	0x00037b08
   180ac:	00017415 	.word	0x00017415
   180b0:	00017451 	.word	0x00017451
   180b4:	000178fd 	.word	0x000178fd
   180b8:	00017331 	.word	0x00017331
   180bc:	000179b5 	.word	0x000179b5
   180c0:	000179f5 	.word	0x000179f5
   180c4:	000355ef 	.word	0x000355ef
   180c8:	00020f95 	.word	0x00020f95
   180cc:	000171dd 	.word	0x000171dd
   180d0:	00022a6d 	.word	0x00022a6d
   180d4:	00037b24 	.word	0x00037b24
   180d8:	0001eb71 	.word	0x0001eb71
   180dc:	000375c8 	.word	0x000375c8
   180e0:	00037b50 	.word	0x00037b50
   180e4:	000260f5 	.word	0x000260f5
   180e8:	00017509 	.word	0x00017509
   180ec:	000174d5 	.word	0x000174d5
   180f0:	0002618d 	.word	0x0002618d
   180f4:	000375bc 	.word	0x000375bc
   180f8:	00022ba5 	.word	0x00022ba5
   180fc:	00022b89 	.word	0x00022b89
   18100:	20004900 	.word	0x20004900
   18104:	0003327d 	.word	0x0003327d
   18108:	00016a49 	.word	0x00016a49
   1810c:	20000624 	.word	0x20000624
   18110:	00017bf5 	.word	0x00017bf5
   18114:	00017c91 	.word	0x00017c91
   18118:	00017a6d 	.word	0x00017a6d
   1811c:	00017b01 	.word	0x00017b01
   18120:	0001bc85 	.word	0x0001bc85
   18124:	20000cd0 	.word	0x20000cd0
   18128:	20000070 	.word	0x20000070
   1812c:	000359a7 	.word	0x000359a7
   18130:	00037b74 	.word	0x00037b74
   18134:	20000898 	.word	0x20000898
   18138:	0003059d 	.word	0x0003059d
   1813c:	00037b90 	.word	0x00037b90

00018140 <WifiHandlerSetState>:
    }
    return;
}

void WifiHandlerSetState(uint8_t state)
{
   18140:	b590      	push	{r4, r7, lr}
   18142:	b083      	sub	sp, #12
   18144:	af00      	add	r7, sp, #0
   18146:	0002      	movs	r2, r0
   18148:	1dfb      	adds	r3, r7, #7
   1814a:	701a      	strb	r2, [r3, #0]
    if (state <= WIFI_DOWNLOAD_HANDLE) {
   1814c:	1dfb      	adds	r3, r7, #7
   1814e:	781b      	ldrb	r3, [r3, #0]
   18150:	2b03      	cmp	r3, #3
   18152:	d806      	bhi.n	18162 <WifiHandlerSetState+0x22>
        xQueueSend(xQueueWifiState, &state, (TickType_t)10);
   18154:	4b05      	ldr	r3, [pc, #20]	; (1816c <WifiHandlerSetState+0x2c>)
   18156:	6818      	ldr	r0, [r3, #0]
   18158:	1df9      	adds	r1, r7, #7
   1815a:	2300      	movs	r3, #0
   1815c:	220a      	movs	r2, #10
   1815e:	4c04      	ldr	r4, [pc, #16]	; (18170 <WifiHandlerSetState+0x30>)
   18160:	47a0      	blx	r4
    }
}
   18162:	46c0      	nop			; (mov r8, r8)
   18164:	46bd      	mov	sp, r7
   18166:	b003      	add	sp, #12
   18168:	bd90      	pop	{r4, r7, pc}
   1816a:	46c0      	nop			; (mov r8, r8)
   1816c:	20000628 	.word	0x20000628
   18170:	0001b3cd 	.word	0x0001b3cd

00018174 <WifiAddImuDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddImuDataToQueue(struct ImuDataPacket *imuPacket)
{
   18174:	b590      	push	{r4, r7, lr}
   18176:	b085      	sub	sp, #20
   18178:	af00      	add	r7, sp, #0
   1817a:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueImuBuffer, imuPacket, (TickType_t)10);
   1817c:	4b06      	ldr	r3, [pc, #24]	; (18198 <WifiAddImuDataToQueue+0x24>)
   1817e:	6818      	ldr	r0, [r3, #0]
   18180:	6879      	ldr	r1, [r7, #4]
   18182:	2300      	movs	r3, #0
   18184:	220a      	movs	r2, #10
   18186:	4c05      	ldr	r4, [pc, #20]	; (1819c <WifiAddImuDataToQueue+0x28>)
   18188:	47a0      	blx	r4
   1818a:	0003      	movs	r3, r0
   1818c:	60fb      	str	r3, [r7, #12]
    return error;
   1818e:	68fb      	ldr	r3, [r7, #12]
}
   18190:	0018      	movs	r0, r3
   18192:	46bd      	mov	sp, r7
   18194:	b005      	add	sp, #20
   18196:	bd90      	pop	{r4, r7, pc}
   18198:	20000630 	.word	0x20000630
   1819c:	0001b3cd 	.word	0x0001b3cd

000181a0 <WifiAddDistanceDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddDistanceDataToQueue(uint16_t *distance)
{
   181a0:	b590      	push	{r4, r7, lr}
   181a2:	b085      	sub	sp, #20
   181a4:	af00      	add	r7, sp, #0
   181a6:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueDistanceBuffer, distance, (TickType_t)10);
   181a8:	4b06      	ldr	r3, [pc, #24]	; (181c4 <WifiAddDistanceDataToQueue+0x24>)
   181aa:	6818      	ldr	r0, [r3, #0]
   181ac:	6879      	ldr	r1, [r7, #4]
   181ae:	2300      	movs	r3, #0
   181b0:	220a      	movs	r2, #10
   181b2:	4c05      	ldr	r4, [pc, #20]	; (181c8 <WifiAddDistanceDataToQueue+0x28>)
   181b4:	47a0      	blx	r4
   181b6:	0003      	movs	r3, r0
   181b8:	60fb      	str	r3, [r7, #12]
    return error;
   181ba:	68fb      	ldr	r3, [r7, #12]
}
   181bc:	0018      	movs	r0, r3
   181be:	46bd      	mov	sp, r7
   181c0:	b005      	add	sp, #20
   181c2:	bd90      	pop	{r4, r7, pc}
   181c4:	20000634 	.word	0x20000634
   181c8:	0001b3cd 	.word	0x0001b3cd

000181cc <WifiAddGameDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddGameDataToQueue(struct GameDataPacket *game)
{
   181cc:	b590      	push	{r4, r7, lr}
   181ce:	b085      	sub	sp, #20
   181d0:	af00      	add	r7, sp, #0
   181d2:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueGameBuffer, game, (TickType_t)10);
   181d4:	4b06      	ldr	r3, [pc, #24]	; (181f0 <WifiAddGameDataToQueue+0x24>)
   181d6:	6818      	ldr	r0, [r3, #0]
   181d8:	6879      	ldr	r1, [r7, #4]
   181da:	2300      	movs	r3, #0
   181dc:	220a      	movs	r2, #10
   181de:	4c05      	ldr	r4, [pc, #20]	; (181f4 <WifiAddGameDataToQueue+0x28>)
   181e0:	47a0      	blx	r4
   181e2:	0003      	movs	r3, r0
   181e4:	60fb      	str	r3, [r7, #12]
    return error;
   181e6:	68fb      	ldr	r3, [r7, #12]
}
   181e8:	0018      	movs	r0, r3
   181ea:	46bd      	mov	sp, r7
   181ec:	b005      	add	sp, #20
   181ee:	bd90      	pop	{r4, r7, pc}
   181f0:	2000062c 	.word	0x2000062c
   181f4:	0001b3cd 	.word	0x0001b3cd

000181f8 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   181f8:	b580      	push	{r7, lr}
   181fa:	b082      	sub	sp, #8
   181fc:	af00      	add	r7, sp, #0
   181fe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   18200:	687b      	ldr	r3, [r7, #4]
   18202:	2200      	movs	r2, #0
   18204:	701a      	strb	r2, [r3, #0]
}
   18206:	46c0      	nop			; (mov r8, r8)
   18208:	46bd      	mov	sp, r7
   1820a:	b002      	add	sp, #8
   1820c:	bd80      	pop	{r7, pc}
	...

00018210 <system_apb_clock_set_mask>:
{
   18210:	b580      	push	{r7, lr}
   18212:	b082      	sub	sp, #8
   18214:	af00      	add	r7, sp, #0
   18216:	0002      	movs	r2, r0
   18218:	6039      	str	r1, [r7, #0]
   1821a:	1dfb      	adds	r3, r7, #7
   1821c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1821e:	1dfb      	adds	r3, r7, #7
   18220:	781b      	ldrb	r3, [r3, #0]
   18222:	2b01      	cmp	r3, #1
   18224:	d00a      	beq.n	1823c <system_apb_clock_set_mask+0x2c>
   18226:	2b02      	cmp	r3, #2
   18228:	d00f      	beq.n	1824a <system_apb_clock_set_mask+0x3a>
   1822a:	2b00      	cmp	r3, #0
   1822c:	d114      	bne.n	18258 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   1822e:	4b0e      	ldr	r3, [pc, #56]	; (18268 <system_apb_clock_set_mask+0x58>)
   18230:	4a0d      	ldr	r2, [pc, #52]	; (18268 <system_apb_clock_set_mask+0x58>)
   18232:	6991      	ldr	r1, [r2, #24]
   18234:	683a      	ldr	r2, [r7, #0]
   18236:	430a      	orrs	r2, r1
   18238:	619a      	str	r2, [r3, #24]
			break;
   1823a:	e00f      	b.n	1825c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   1823c:	4b0a      	ldr	r3, [pc, #40]	; (18268 <system_apb_clock_set_mask+0x58>)
   1823e:	4a0a      	ldr	r2, [pc, #40]	; (18268 <system_apb_clock_set_mask+0x58>)
   18240:	69d1      	ldr	r1, [r2, #28]
   18242:	683a      	ldr	r2, [r7, #0]
   18244:	430a      	orrs	r2, r1
   18246:	61da      	str	r2, [r3, #28]
			break;
   18248:	e008      	b.n	1825c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   1824a:	4b07      	ldr	r3, [pc, #28]	; (18268 <system_apb_clock_set_mask+0x58>)
   1824c:	4a06      	ldr	r2, [pc, #24]	; (18268 <system_apb_clock_set_mask+0x58>)
   1824e:	6a11      	ldr	r1, [r2, #32]
   18250:	683a      	ldr	r2, [r7, #0]
   18252:	430a      	orrs	r2, r1
   18254:	621a      	str	r2, [r3, #32]
			break;
   18256:	e001      	b.n	1825c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   18258:	2317      	movs	r3, #23
   1825a:	e000      	b.n	1825e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   1825c:	2300      	movs	r3, #0
}
   1825e:	0018      	movs	r0, r3
   18260:	46bd      	mov	sp, r7
   18262:	b002      	add	sp, #8
   18264:	bd80      	pop	{r7, pc}
   18266:	46c0      	nop			; (mov r8, r8)
   18268:	40000400 	.word	0x40000400

0001826c <system_pinmux_get_config_defaults>:
{
   1826c:	b580      	push	{r7, lr}
   1826e:	b082      	sub	sp, #8
   18270:	af00      	add	r7, sp, #0
   18272:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   18274:	687b      	ldr	r3, [r7, #4]
   18276:	2280      	movs	r2, #128	; 0x80
   18278:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   1827a:	687b      	ldr	r3, [r7, #4]
   1827c:	2200      	movs	r2, #0
   1827e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   18280:	687b      	ldr	r3, [r7, #4]
   18282:	2201      	movs	r2, #1
   18284:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   18286:	687b      	ldr	r3, [r7, #4]
   18288:	2200      	movs	r2, #0
   1828a:	70da      	strb	r2, [r3, #3]
}
   1828c:	46c0      	nop			; (mov r8, r8)
   1828e:	46bd      	mov	sp, r7
   18290:	b002      	add	sp, #8
   18292:	bd80      	pop	{r7, pc}

00018294 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   18294:	b580      	push	{r7, lr}
   18296:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   18298:	4b05      	ldr	r3, [pc, #20]	; (182b0 <system_is_debugger_present+0x1c>)
   1829a:	789b      	ldrb	r3, [r3, #2]
   1829c:	b2db      	uxtb	r3, r3
   1829e:	001a      	movs	r2, r3
   182a0:	2302      	movs	r3, #2
   182a2:	4013      	ands	r3, r2
   182a4:	1e5a      	subs	r2, r3, #1
   182a6:	4193      	sbcs	r3, r2
   182a8:	b2db      	uxtb	r3, r3
}
   182aa:	0018      	movs	r0, r3
   182ac:	46bd      	mov	sp, r7
   182ae:	bd80      	pop	{r7, pc}
   182b0:	41002000 	.word	0x41002000

000182b4 <system_interrupt_enter_critical_section>:
{
   182b4:	b580      	push	{r7, lr}
   182b6:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   182b8:	4b02      	ldr	r3, [pc, #8]	; (182c4 <system_interrupt_enter_critical_section+0x10>)
   182ba:	4798      	blx	r3
}
   182bc:	46c0      	nop			; (mov r8, r8)
   182be:	46bd      	mov	sp, r7
   182c0:	bd80      	pop	{r7, pc}
   182c2:	46c0      	nop			; (mov r8, r8)
   182c4:	00026ded 	.word	0x00026ded

000182c8 <system_interrupt_leave_critical_section>:
{
   182c8:	b580      	push	{r7, lr}
   182ca:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   182cc:	4b02      	ldr	r3, [pc, #8]	; (182d8 <system_interrupt_leave_critical_section+0x10>)
   182ce:	4798      	blx	r3
}
   182d0:	46c0      	nop			; (mov r8, r8)
   182d2:	46bd      	mov	sp, r7
   182d4:	bd80      	pop	{r7, pc}
   182d6:	46c0      	nop			; (mov r8, r8)
   182d8:	00026e41 	.word	0x00026e41

000182dc <system_interrupt_disable>:
{
   182dc:	b580      	push	{r7, lr}
   182de:	b082      	sub	sp, #8
   182e0:	af00      	add	r7, sp, #0
   182e2:	0002      	movs	r2, r0
   182e4:	1dfb      	adds	r3, r7, #7
   182e6:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   182e8:	4a07      	ldr	r2, [pc, #28]	; (18308 <system_interrupt_disable+0x2c>)
   182ea:	1dfb      	adds	r3, r7, #7
   182ec:	781b      	ldrb	r3, [r3, #0]
   182ee:	0019      	movs	r1, r3
   182f0:	231f      	movs	r3, #31
   182f2:	400b      	ands	r3, r1
   182f4:	2101      	movs	r1, #1
   182f6:	4099      	lsls	r1, r3
   182f8:	000b      	movs	r3, r1
   182fa:	0019      	movs	r1, r3
   182fc:	2380      	movs	r3, #128	; 0x80
   182fe:	50d1      	str	r1, [r2, r3]
}
   18300:	46c0      	nop			; (mov r8, r8)
   18302:	46bd      	mov	sp, r7
   18304:	b002      	add	sp, #8
   18306:	bd80      	pop	{r7, pc}
   18308:	e000e100 	.word	0xe000e100

0001830c <i2c_master_is_syncing>:
{
   1830c:	b580      	push	{r7, lr}
   1830e:	b084      	sub	sp, #16
   18310:	af00      	add	r7, sp, #0
   18312:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   18314:	687b      	ldr	r3, [r7, #4]
   18316:	681b      	ldr	r3, [r3, #0]
   18318:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   1831a:	68fb      	ldr	r3, [r7, #12]
   1831c:	69db      	ldr	r3, [r3, #28]
   1831e:	2207      	movs	r2, #7
   18320:	4013      	ands	r3, r2
   18322:	1e5a      	subs	r2, r3, #1
   18324:	4193      	sbcs	r3, r2
   18326:	b2db      	uxtb	r3, r3
}
   18328:	0018      	movs	r0, r3
   1832a:	46bd      	mov	sp, r7
   1832c:	b004      	add	sp, #16
   1832e:	bd80      	pop	{r7, pc}

00018330 <_i2c_master_wait_for_sync>:
{
   18330:	b580      	push	{r7, lr}
   18332:	b082      	sub	sp, #8
   18334:	af00      	add	r7, sp, #0
   18336:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   18338:	46c0      	nop			; (mov r8, r8)
   1833a:	687b      	ldr	r3, [r7, #4]
   1833c:	0018      	movs	r0, r3
   1833e:	4b04      	ldr	r3, [pc, #16]	; (18350 <_i2c_master_wait_for_sync+0x20>)
   18340:	4798      	blx	r3
   18342:	1e03      	subs	r3, r0, #0
   18344:	d1f9      	bne.n	1833a <_i2c_master_wait_for_sync+0xa>
}
   18346:	46c0      	nop			; (mov r8, r8)
   18348:	46bd      	mov	sp, r7
   1834a:	b002      	add	sp, #8
   1834c:	bd80      	pop	{r7, pc}
   1834e:	46c0      	nop			; (mov r8, r8)
   18350:	0001830d 	.word	0x0001830d

00018354 <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
   18354:	b580      	push	{r7, lr}
   18356:	b084      	sub	sp, #16
   18358:	af00      	add	r7, sp, #0
   1835a:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   1835c:	687b      	ldr	r3, [r7, #4]
   1835e:	681b      	ldr	r3, [r3, #0]
   18360:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   18362:	687b      	ldr	r3, [r7, #4]
   18364:	681b      	ldr	r3, [r3, #0]
   18366:	0018      	movs	r0, r3
   18368:	4b0d      	ldr	r3, [pc, #52]	; (183a0 <i2c_master_disable+0x4c>)
   1836a:	4798      	blx	r3
   1836c:	0003      	movs	r3, r0
   1836e:	0018      	movs	r0, r3
   18370:	4b0c      	ldr	r3, [pc, #48]	; (183a4 <i2c_master_disable+0x50>)
   18372:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   18374:	687b      	ldr	r3, [r7, #4]
   18376:	0018      	movs	r0, r3
   18378:	4b0b      	ldr	r3, [pc, #44]	; (183a8 <i2c_master_disable+0x54>)
   1837a:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   1837c:	68fb      	ldr	r3, [r7, #12]
   1837e:	2283      	movs	r2, #131	; 0x83
   18380:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   18382:	68fb      	ldr	r3, [r7, #12]
   18384:	2283      	movs	r2, #131	; 0x83
   18386:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   18388:	68fb      	ldr	r3, [r7, #12]
   1838a:	681b      	ldr	r3, [r3, #0]
   1838c:	2202      	movs	r2, #2
   1838e:	4393      	bics	r3, r2
   18390:	001a      	movs	r2, r3
   18392:	68fb      	ldr	r3, [r7, #12]
   18394:	601a      	str	r2, [r3, #0]

}
   18396:	46c0      	nop			; (mov r8, r8)
   18398:	46bd      	mov	sp, r7
   1839a:	b004      	add	sp, #16
   1839c:	bd80      	pop	{r7, pc}
   1839e:	46c0      	nop			; (mov r8, r8)
   183a0:	000282c1 	.word	0x000282c1
   183a4:	000182dd 	.word	0x000182dd
   183a8:	00018331 	.word	0x00018331

000183ac <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
   183ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   183ae:	b097      	sub	sp, #92	; 0x5c
   183b0:	af00      	add	r7, sp, #0
   183b2:	6178      	str	r0, [r7, #20]
   183b4:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
   183b6:	2300      	movs	r3, #0
   183b8:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
   183ba:	2300      	movs	r3, #0
   183bc:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
   183be:	2300      	movs	r3, #0
   183c0:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
   183c2:	233b      	movs	r3, #59	; 0x3b
   183c4:	2210      	movs	r2, #16
   183c6:	4694      	mov	ip, r2
   183c8:	44bc      	add	ip, r7
   183ca:	4463      	add	r3, ip
   183cc:	2200      	movs	r2, #0
   183ce:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   183d0:	697b      	ldr	r3, [r7, #20]
   183d2:	681b      	ldr	r3, [r3, #0]
   183d4:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
   183d6:	697b      	ldr	r3, [r7, #20]
   183d8:	681b      	ldr	r3, [r3, #0]
   183da:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   183dc:	2323      	movs	r3, #35	; 0x23
   183de:	2210      	movs	r2, #16
   183e0:	18ba      	adds	r2, r7, r2
   183e2:	18d4      	adds	r4, r2, r3
   183e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   183e6:	0018      	movs	r0, r3
   183e8:	4bc0      	ldr	r3, [pc, #768]	; (186ec <_i2c_master_set_config+0x340>)
   183ea:	4798      	blx	r3
   183ec:	0003      	movs	r3, r0
   183ee:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   183f0:	230c      	movs	r3, #12
   183f2:	2210      	movs	r2, #16
   183f4:	4694      	mov	ip, r2
   183f6:	44bc      	add	ip, r7
   183f8:	4463      	add	r3, ip
   183fa:	0018      	movs	r0, r3
   183fc:	4bbc      	ldr	r3, [pc, #752]	; (186f0 <_i2c_master_set_config+0x344>)
   183fe:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
   18400:	693b      	ldr	r3, [r7, #16]
   18402:	69db      	ldr	r3, [r3, #28]
   18404:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
   18406:	693b      	ldr	r3, [r7, #16]
   18408:	6a1b      	ldr	r3, [r3, #32]
   1840a:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
   1840c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   1840e:	2b00      	cmp	r3, #0
   18410:	d106      	bne.n	18420 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   18412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18414:	2100      	movs	r1, #0
   18416:	0018      	movs	r0, r3
   18418:	4bb6      	ldr	r3, [pc, #728]	; (186f4 <_i2c_master_set_config+0x348>)
   1841a:	4798      	blx	r3
   1841c:	0003      	movs	r3, r0
   1841e:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
   18420:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   18422:	b2da      	uxtb	r2, r3
   18424:	230c      	movs	r3, #12
   18426:	2110      	movs	r1, #16
   18428:	468c      	mov	ip, r1
   1842a:	44bc      	add	ip, r7
   1842c:	4463      	add	r3, ip
   1842e:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   18430:	230c      	movs	r3, #12
   18432:	2210      	movs	r2, #16
   18434:	4694      	mov	ip, r2
   18436:	44bc      	add	ip, r7
   18438:	4463      	add	r3, ip
   1843a:	2202      	movs	r2, #2
   1843c:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   1843e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   18440:	0c1b      	lsrs	r3, r3, #16
   18442:	b2db      	uxtb	r3, r3
   18444:	220c      	movs	r2, #12
   18446:	2110      	movs	r1, #16
   18448:	468c      	mov	ip, r1
   1844a:	44bc      	add	ip, r7
   1844c:	4462      	add	r2, ip
   1844e:	0011      	movs	r1, r2
   18450:	0018      	movs	r0, r3
   18452:	4ba9      	ldr	r3, [pc, #676]	; (186f8 <_i2c_master_set_config+0x34c>)
   18454:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
   18456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   18458:	2b00      	cmp	r3, #0
   1845a:	d106      	bne.n	1846a <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   1845c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1845e:	2101      	movs	r1, #1
   18460:	0018      	movs	r0, r3
   18462:	4ba4      	ldr	r3, [pc, #656]	; (186f4 <_i2c_master_set_config+0x348>)
   18464:	4798      	blx	r3
   18466:	0003      	movs	r3, r0
   18468:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
   1846a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1846c:	b2da      	uxtb	r2, r3
   1846e:	230c      	movs	r3, #12
   18470:	2110      	movs	r1, #16
   18472:	468c      	mov	ip, r1
   18474:	44bc      	add	ip, r7
   18476:	4463      	add	r3, ip
   18478:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   1847a:	230c      	movs	r3, #12
   1847c:	2210      	movs	r2, #16
   1847e:	4694      	mov	ip, r2
   18480:	44bc      	add	ip, r7
   18482:	4463      	add	r3, ip
   18484:	2202      	movs	r2, #2
   18486:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   18488:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1848a:	0c1b      	lsrs	r3, r3, #16
   1848c:	b2db      	uxtb	r3, r3
   1848e:	220c      	movs	r2, #12
   18490:	2110      	movs	r1, #16
   18492:	468c      	mov	ip, r1
   18494:	44bc      	add	ip, r7
   18496:	4462      	add	r2, ip
   18498:	0011      	movs	r1, r2
   1849a:	0018      	movs	r0, r3
   1849c:	4b96      	ldr	r3, [pc, #600]	; (186f8 <_i2c_master_set_config+0x34c>)
   1849e:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   184a0:	693b      	ldr	r3, [r7, #16]
   184a2:	8a9a      	ldrh	r2, [r3, #20]
   184a4:	697b      	ldr	r3, [r7, #20]
   184a6:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
   184a8:	693b      	ldr	r3, [r7, #16]
   184aa:	8ada      	ldrh	r2, [r3, #22]
   184ac:	697b      	ldr	r3, [r7, #20]
   184ae:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   184b0:	693b      	ldr	r3, [r7, #16]
   184b2:	7e1b      	ldrb	r3, [r3, #24]
   184b4:	2b00      	cmp	r3, #0
   184b6:	d103      	bne.n	184c0 <_i2c_master_set_config+0x114>
   184b8:	4b90      	ldr	r3, [pc, #576]	; (186fc <_i2c_master_set_config+0x350>)
   184ba:	4798      	blx	r3
   184bc:	1e03      	subs	r3, r0, #0
   184be:	d002      	beq.n	184c6 <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   184c0:	2380      	movs	r3, #128	; 0x80
   184c2:	657b      	str	r3, [r7, #84]	; 0x54
   184c4:	e001      	b.n	184ca <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
   184c6:	2300      	movs	r3, #0
   184c8:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
   184ca:	693b      	ldr	r3, [r7, #16]
   184cc:	691b      	ldr	r3, [r3, #16]
   184ce:	2b00      	cmp	r3, #0
   184d0:	d004      	beq.n	184dc <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
   184d2:	693b      	ldr	r3, [r7, #16]
   184d4:	691b      	ldr	r3, [r3, #16]
   184d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   184d8:	4313      	orrs	r3, r2
   184da:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
   184dc:	693b      	ldr	r3, [r7, #16]
   184de:	689b      	ldr	r3, [r3, #8]
   184e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   184e2:	4313      	orrs	r3, r2
   184e4:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
   184e6:	693b      	ldr	r3, [r7, #16]
   184e8:	2224      	movs	r2, #36	; 0x24
   184ea:	5c9b      	ldrb	r3, [r3, r2]
   184ec:	2b00      	cmp	r3, #0
   184ee:	d004      	beq.n	184fa <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
   184f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   184f2:	2280      	movs	r2, #128	; 0x80
   184f4:	05d2      	lsls	r2, r2, #23
   184f6:	4313      	orrs	r3, r2
   184f8:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
   184fa:	693b      	ldr	r3, [r7, #16]
   184fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   184fe:	2b00      	cmp	r3, #0
   18500:	d004      	beq.n	1850c <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
   18502:	693b      	ldr	r3, [r7, #16]
   18504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18506:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   18508:	4313      	orrs	r3, r2
   1850a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
   1850c:	693b      	ldr	r3, [r7, #16]
   1850e:	222c      	movs	r2, #44	; 0x2c
   18510:	5c9b      	ldrb	r3, [r3, r2]
   18512:	2b00      	cmp	r3, #0
   18514:	d105      	bne.n	18522 <_i2c_master_set_config+0x176>
   18516:	693b      	ldr	r3, [r7, #16]
   18518:	689a      	ldr	r2, [r3, #8]
   1851a:	2380      	movs	r3, #128	; 0x80
   1851c:	049b      	lsls	r3, r3, #18
   1851e:	429a      	cmp	r2, r3
   18520:	d104      	bne.n	1852c <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
   18522:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   18524:	2280      	movs	r2, #128	; 0x80
   18526:	0512      	lsls	r2, r2, #20
   18528:	4313      	orrs	r3, r2
   1852a:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
   1852c:	693b      	ldr	r3, [r7, #16]
   1852e:	222d      	movs	r2, #45	; 0x2d
   18530:	5c9b      	ldrb	r3, [r3, r2]
   18532:	2b00      	cmp	r3, #0
   18534:	d004      	beq.n	18540 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
   18536:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   18538:	2280      	movs	r2, #128	; 0x80
   1853a:	0412      	lsls	r2, r2, #16
   1853c:	4313      	orrs	r3, r2
   1853e:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
   18540:	693b      	ldr	r3, [r7, #16]
   18542:	222e      	movs	r2, #46	; 0x2e
   18544:	5c9b      	ldrb	r3, [r3, r2]
   18546:	2b00      	cmp	r3, #0
   18548:	d004      	beq.n	18554 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
   1854a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1854c:	2280      	movs	r2, #128	; 0x80
   1854e:	03d2      	lsls	r2, r2, #15
   18550:	4313      	orrs	r3, r2
   18552:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
   18554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   18556:	681a      	ldr	r2, [r3, #0]
   18558:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1855a:	431a      	orrs	r2, r3
   1855c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   1855e:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   18560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   18562:	2280      	movs	r2, #128	; 0x80
   18564:	0052      	lsls	r2, r2, #1
   18566:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   18568:	2323      	movs	r3, #35	; 0x23
   1856a:	2210      	movs	r2, #16
   1856c:	4694      	mov	ip, r2
   1856e:	44bc      	add	ip, r7
   18570:	4463      	add	r3, ip
   18572:	781b      	ldrb	r3, [r3, #0]
   18574:	3314      	adds	r3, #20
   18576:	b2db      	uxtb	r3, r3
   18578:	0018      	movs	r0, r3
   1857a:	4b61      	ldr	r3, [pc, #388]	; (18700 <_i2c_master_set_config+0x354>)
   1857c:	4798      	blx	r3
   1857e:	0003      	movs	r3, r0
   18580:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
   18582:	693b      	ldr	r3, [r7, #16]
   18584:	681b      	ldr	r3, [r3, #0]
   18586:	22fa      	movs	r2, #250	; 0xfa
   18588:	0092      	lsls	r2, r2, #2
   1858a:	4353      	muls	r3, r2
   1858c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   1858e:	693b      	ldr	r3, [r7, #16]
   18590:	685b      	ldr	r3, [r3, #4]
   18592:	22fa      	movs	r2, #250	; 0xfa
   18594:	0092      	lsls	r2, r2, #2
   18596:	4353      	muls	r3, r2
   18598:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
   1859a:	693b      	ldr	r3, [r7, #16]
   1859c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   1859e:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
   185a0:	4b58      	ldr	r3, [pc, #352]	; (18704 <_i2c_master_set_config+0x358>)
   185a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   185a4:	4798      	blx	r3
   185a6:	0005      	movs	r5, r0
   185a8:	000e      	movs	r6, r1
   185aa:	4b56      	ldr	r3, [pc, #344]	; (18704 <_i2c_master_set_config+0x358>)
   185ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   185ae:	4798      	blx	r3
   185b0:	60b8      	str	r0, [r7, #8]
   185b2:	60f9      	str	r1, [r7, #12]
   185b4:	4b53      	ldr	r3, [pc, #332]	; (18704 <_i2c_master_set_config+0x358>)
   185b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   185b8:	4798      	blx	r3
   185ba:	4c53      	ldr	r4, [pc, #332]	; (18708 <_i2c_master_set_config+0x35c>)
   185bc:	4a53      	ldr	r2, [pc, #332]	; (1870c <_i2c_master_set_config+0x360>)
   185be:	4b54      	ldr	r3, [pc, #336]	; (18710 <_i2c_master_set_config+0x364>)
   185c0:	47a0      	blx	r4
   185c2:	0003      	movs	r3, r0
   185c4:	000c      	movs	r4, r1
   185c6:	603b      	str	r3, [r7, #0]
   185c8:	607c      	str	r4, [r7, #4]
   185ca:	4b4e      	ldr	r3, [pc, #312]	; (18704 <_i2c_master_set_config+0x358>)
   185cc:	6a38      	ldr	r0, [r7, #32]
   185ce:	4798      	blx	r3
   185d0:	0002      	movs	r2, r0
   185d2:	000b      	movs	r3, r1
   185d4:	4c4c      	ldr	r4, [pc, #304]	; (18708 <_i2c_master_set_config+0x35c>)
   185d6:	6838      	ldr	r0, [r7, #0]
   185d8:	6879      	ldr	r1, [r7, #4]
   185da:	47a0      	blx	r4
   185dc:	0003      	movs	r3, r0
   185de:	000c      	movs	r4, r1
   185e0:	0018      	movs	r0, r3
   185e2:	0021      	movs	r1, r4
   185e4:	4c4b      	ldr	r4, [pc, #300]	; (18714 <_i2c_master_set_config+0x368>)
   185e6:	2200      	movs	r2, #0
   185e8:	4b4b      	ldr	r3, [pc, #300]	; (18718 <_i2c_master_set_config+0x36c>)
   185ea:	47a0      	blx	r4
   185ec:	0003      	movs	r3, r0
   185ee:	000c      	movs	r4, r1
   185f0:	001a      	movs	r2, r3
   185f2:	0023      	movs	r3, r4
   185f4:	4c44      	ldr	r4, [pc, #272]	; (18708 <_i2c_master_set_config+0x35c>)
   185f6:	68b8      	ldr	r0, [r7, #8]
   185f8:	68f9      	ldr	r1, [r7, #12]
   185fa:	47a0      	blx	r4
   185fc:	0003      	movs	r3, r0
   185fe:	000c      	movs	r4, r1
   18600:	001a      	movs	r2, r3
   18602:	0023      	movs	r3, r4
   18604:	4c45      	ldr	r4, [pc, #276]	; (1871c <_i2c_master_set_config+0x370>)
   18606:	0028      	movs	r0, r5
   18608:	0031      	movs	r1, r6
   1860a:	47a0      	blx	r4
   1860c:	0003      	movs	r3, r0
   1860e:	000c      	movs	r4, r1
   18610:	001d      	movs	r5, r3
   18612:	0026      	movs	r6, r4
   18614:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18616:	005a      	lsls	r2, r3, #1
   18618:	4b3a      	ldr	r3, [pc, #232]	; (18704 <_i2c_master_set_config+0x358>)
   1861a:	0010      	movs	r0, r2
   1861c:	4798      	blx	r3
   1861e:	0002      	movs	r2, r0
   18620:	000b      	movs	r3, r1
   18622:	4c3c      	ldr	r4, [pc, #240]	; (18714 <_i2c_master_set_config+0x368>)
   18624:	0028      	movs	r0, r5
   18626:	0031      	movs	r1, r6
   18628:	47a0      	blx	r4
   1862a:	0003      	movs	r3, r0
   1862c:	000c      	movs	r4, r1
   1862e:	0018      	movs	r0, r3
   18630:	0021      	movs	r1, r4
   18632:	4c3a      	ldr	r4, [pc, #232]	; (1871c <_i2c_master_set_config+0x370>)
   18634:	2200      	movs	r2, #0
   18636:	4b3a      	ldr	r3, [pc, #232]	; (18720 <_i2c_master_set_config+0x374>)
   18638:	47a0      	blx	r4
   1863a:	0003      	movs	r3, r0
   1863c:	000c      	movs	r4, r1
   1863e:	001d      	movs	r5, r3
   18640:	0026      	movs	r6, r4
   18642:	6abb      	ldr	r3, [r7, #40]	; 0x28
   18644:	005a      	lsls	r2, r3, #1
   18646:	4b2f      	ldr	r3, [pc, #188]	; (18704 <_i2c_master_set_config+0x358>)
   18648:	0010      	movs	r0, r2
   1864a:	4798      	blx	r3
   1864c:	0002      	movs	r2, r0
   1864e:	000b      	movs	r3, r1
   18650:	4c34      	ldr	r4, [pc, #208]	; (18724 <_i2c_master_set_config+0x378>)
   18652:	0028      	movs	r0, r5
   18654:	0031      	movs	r1, r6
   18656:	47a0      	blx	r4
   18658:	0003      	movs	r3, r0
   1865a:	000c      	movs	r4, r1
   1865c:	0019      	movs	r1, r3
   1865e:	0022      	movs	r2, r4
   18660:	4b31      	ldr	r3, [pc, #196]	; (18728 <_i2c_master_set_config+0x37c>)
   18662:	0008      	movs	r0, r1
   18664:	0011      	movs	r1, r2
   18666:	4798      	blx	r3
   18668:	0003      	movs	r3, r0
   1866a:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
   1866c:	693b      	ldr	r3, [r7, #16]
   1866e:	689a      	ldr	r2, [r3, #8]
   18670:	2380      	movs	r3, #128	; 0x80
   18672:	049b      	lsls	r3, r3, #18
   18674:	429a      	cmp	r2, r3
   18676:	d16a      	bne.n	1874e <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
   18678:	4b22      	ldr	r3, [pc, #136]	; (18704 <_i2c_master_set_config+0x358>)
   1867a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1867c:	4798      	blx	r3
   1867e:	4c25      	ldr	r4, [pc, #148]	; (18714 <_i2c_master_set_config+0x368>)
   18680:	0002      	movs	r2, r0
   18682:	000b      	movs	r3, r1
   18684:	47a0      	blx	r4
   18686:	0003      	movs	r3, r0
   18688:	000c      	movs	r4, r1
   1868a:	001d      	movs	r5, r3
   1868c:	0026      	movs	r6, r4
   1868e:	4b1d      	ldr	r3, [pc, #116]	; (18704 <_i2c_master_set_config+0x358>)
   18690:	6a78      	ldr	r0, [r7, #36]	; 0x24
   18692:	4798      	blx	r3
   18694:	4c1c      	ldr	r4, [pc, #112]	; (18708 <_i2c_master_set_config+0x35c>)
   18696:	2200      	movs	r2, #0
   18698:	4b24      	ldr	r3, [pc, #144]	; (1872c <_i2c_master_set_config+0x380>)
   1869a:	47a0      	blx	r4
   1869c:	0003      	movs	r3, r0
   1869e:	000c      	movs	r4, r1
   186a0:	001a      	movs	r2, r3
   186a2:	0023      	movs	r3, r4
   186a4:	4c1f      	ldr	r4, [pc, #124]	; (18724 <_i2c_master_set_config+0x378>)
   186a6:	0028      	movs	r0, r5
   186a8:	0031      	movs	r1, r6
   186aa:	47a0      	blx	r4
   186ac:	0003      	movs	r3, r0
   186ae:	000c      	movs	r4, r1
   186b0:	0018      	movs	r0, r3
   186b2:	0021      	movs	r1, r4
   186b4:	4c19      	ldr	r4, [pc, #100]	; (1871c <_i2c_master_set_config+0x370>)
   186b6:	2200      	movs	r2, #0
   186b8:	4b19      	ldr	r3, [pc, #100]	; (18720 <_i2c_master_set_config+0x374>)
   186ba:	47a0      	blx	r4
   186bc:	0003      	movs	r3, r0
   186be:	000c      	movs	r4, r1
   186c0:	0019      	movs	r1, r3
   186c2:	0022      	movs	r2, r4
   186c4:	4b18      	ldr	r3, [pc, #96]	; (18728 <_i2c_master_set_config+0x37c>)
   186c6:	0008      	movs	r0, r1
   186c8:	0011      	movs	r1, r2
   186ca:	4798      	blx	r3
   186cc:	0003      	movs	r3, r0
   186ce:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
   186d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   186d2:	2b00      	cmp	r3, #0
   186d4:	d02e      	beq.n	18734 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
   186d6:	4b16      	ldr	r3, [pc, #88]	; (18730 <_i2c_master_set_config+0x384>)
   186d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
   186da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   186dc:	4798      	blx	r3
   186de:	0003      	movs	r3, r0
   186e0:	1e9a      	subs	r2, r3, #2
   186e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   186e4:	1ad3      	subs	r3, r2, r3
   186e6:	653b      	str	r3, [r7, #80]	; 0x50
   186e8:	e031      	b.n	1874e <_i2c_master_set_config+0x3a2>
   186ea:	46c0      	nop			; (mov r8, r8)
   186ec:	000281f1 	.word	0x000281f1
   186f0:	0001826d 	.word	0x0001826d
   186f4:	00028035 	.word	0x00028035
   186f8:	0002ade1 	.word	0x0002ade1
   186fc:	00018295 	.word	0x00018295
   18700:	0002aba5 	.word	0x0002aba5
   18704:	00035491 	.word	0x00035491
   18708:	000348fd 	.word	0x000348fd
   1870c:	e826d695 	.word	0xe826d695
   18710:	3e112e0b 	.word	0x3e112e0b
   18714:	00033c75 	.word	0x00033c75
   18718:	40240000 	.word	0x40240000
   1871c:	00034dfd 	.word	0x00034dfd
   18720:	3ff00000 	.word	0x3ff00000
   18724:	00034295 	.word	0x00034295
   18728:	00035429 	.word	0x00035429
   1872c:	40080000 	.word	0x40080000
   18730:	00033615 	.word	0x00033615
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
   18734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18736:	005a      	lsls	r2, r3, #1
   18738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1873a:	18d3      	adds	r3, r2, r3
   1873c:	1e5a      	subs	r2, r3, #1
   1873e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18740:	0059      	lsls	r1, r3, #1
   18742:	4b1d      	ldr	r3, [pc, #116]	; (187b8 <_i2c_master_set_config+0x40c>)
   18744:	0010      	movs	r0, r2
   18746:	4798      	blx	r3
   18748:	0003      	movs	r3, r0
   1874a:	3b01      	subs	r3, #1
   1874c:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   1874e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18750:	2bff      	cmp	r3, #255	; 0xff
   18752:	dc08      	bgt.n	18766 <_i2c_master_set_config+0x3ba>
   18754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18756:	2b00      	cmp	r3, #0
   18758:	db05      	blt.n	18766 <_i2c_master_set_config+0x3ba>
   1875a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1875c:	2bff      	cmp	r3, #255	; 0xff
   1875e:	dc02      	bgt.n	18766 <_i2c_master_set_config+0x3ba>
   18760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   18762:	2b00      	cmp	r3, #0
   18764:	da06      	bge.n	18774 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
   18766:	233b      	movs	r3, #59	; 0x3b
   18768:	2210      	movs	r2, #16
   1876a:	4694      	mov	ip, r2
   1876c:	44bc      	add	ip, r7
   1876e:	4463      	add	r3, ip
   18770:	2240      	movs	r2, #64	; 0x40
   18772:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
   18774:	233b      	movs	r3, #59	; 0x3b
   18776:	2210      	movs	r2, #16
   18778:	4694      	mov	ip, r2
   1877a:	44bc      	add	ip, r7
   1877c:	4463      	add	r3, ip
   1877e:	781b      	ldrb	r3, [r3, #0]
   18780:	2b40      	cmp	r3, #64	; 0x40
   18782:	d00e      	beq.n	187a2 <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   18784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   18786:	22ff      	movs	r2, #255	; 0xff
   18788:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   1878a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1878c:	041b      	lsls	r3, r3, #16
   1878e:	0019      	movs	r1, r3
   18790:	23ff      	movs	r3, #255	; 0xff
   18792:	041b      	lsls	r3, r3, #16
   18794:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   18796:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   18798:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   1879a:	0612      	lsls	r2, r2, #24
   1879c:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   1879e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   187a0:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
   187a2:	233b      	movs	r3, #59	; 0x3b
   187a4:	2210      	movs	r2, #16
   187a6:	4694      	mov	ip, r2
   187a8:	44bc      	add	ip, r7
   187aa:	4463      	add	r3, ip
   187ac:	781b      	ldrb	r3, [r3, #0]
}
   187ae:	0018      	movs	r0, r3
   187b0:	46bd      	mov	sp, r7
   187b2:	b017      	add	sp, #92	; 0x5c
   187b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   187b6:	46c0      	nop			; (mov r8, r8)
   187b8:	00033615 	.word	0x00033615

000187bc <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   187bc:	b590      	push	{r4, r7, lr}
   187be:	b08b      	sub	sp, #44	; 0x2c
   187c0:	af00      	add	r7, sp, #0
   187c2:	60f8      	str	r0, [r7, #12]
   187c4:	60b9      	str	r1, [r7, #8]
   187c6:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
   187c8:	68fb      	ldr	r3, [r7, #12]
   187ca:	68ba      	ldr	r2, [r7, #8]
   187cc:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   187ce:	68fb      	ldr	r3, [r7, #12]
   187d0:	681b      	ldr	r3, [r3, #0]
   187d2:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   187d4:	68fb      	ldr	r3, [r7, #12]
   187d6:	681b      	ldr	r3, [r3, #0]
   187d8:	0018      	movs	r0, r3
   187da:	4b3b      	ldr	r3, [pc, #236]	; (188c8 <i2c_master_init+0x10c>)
   187dc:	4798      	blx	r3
   187de:	0003      	movs	r3, r0
   187e0:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   187e2:	6a3b      	ldr	r3, [r7, #32]
   187e4:	3302      	adds	r3, #2
   187e6:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   187e8:	6a3b      	ldr	r3, [r7, #32]
   187ea:	3314      	adds	r3, #20
   187ec:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   187ee:	2201      	movs	r2, #1
   187f0:	69fb      	ldr	r3, [r7, #28]
   187f2:	409a      	lsls	r2, r3
   187f4:	0013      	movs	r3, r2
   187f6:	0019      	movs	r1, r3
   187f8:	2002      	movs	r0, #2
   187fa:	4b34      	ldr	r3, [pc, #208]	; (188cc <i2c_master_init+0x110>)
   187fc:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   187fe:	2314      	movs	r3, #20
   18800:	18fb      	adds	r3, r7, r3
   18802:	0018      	movs	r0, r3
   18804:	4b32      	ldr	r3, [pc, #200]	; (188d0 <i2c_master_init+0x114>)
   18806:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   18808:	687b      	ldr	r3, [r7, #4]
   1880a:	7b1a      	ldrb	r2, [r3, #12]
   1880c:	2314      	movs	r3, #20
   1880e:	18fb      	adds	r3, r7, r3
   18810:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   18812:	69bb      	ldr	r3, [r7, #24]
   18814:	b2db      	uxtb	r3, r3
   18816:	2214      	movs	r2, #20
   18818:	18ba      	adds	r2, r7, r2
   1881a:	0011      	movs	r1, r2
   1881c:	0018      	movs	r0, r3
   1881e:	4b2d      	ldr	r3, [pc, #180]	; (188d4 <i2c_master_init+0x118>)
   18820:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   18822:	69bb      	ldr	r3, [r7, #24]
   18824:	b2db      	uxtb	r3, r3
   18826:	0018      	movs	r0, r3
   18828:	4b2b      	ldr	r3, [pc, #172]	; (188d8 <i2c_master_init+0x11c>)
   1882a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   1882c:	687b      	ldr	r3, [r7, #4]
   1882e:	7b1b      	ldrb	r3, [r3, #12]
   18830:	2100      	movs	r1, #0
   18832:	0018      	movs	r0, r3
   18834:	4b29      	ldr	r3, [pc, #164]	; (188dc <i2c_master_init+0x120>)
   18836:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   18838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1883a:	681b      	ldr	r3, [r3, #0]
   1883c:	2202      	movs	r2, #2
   1883e:	4013      	ands	r3, r2
   18840:	d001      	beq.n	18846 <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
   18842:	231c      	movs	r3, #28
   18844:	e03b      	b.n	188be <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   18846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18848:	681b      	ldr	r3, [r3, #0]
   1884a:	2201      	movs	r2, #1
   1884c:	4013      	ands	r3, r2
   1884e:	d001      	beq.n	18854 <i2c_master_init+0x98>
		return STATUS_BUSY;
   18850:	2305      	movs	r3, #5
   18852:	e034      	b.n	188be <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   18854:	68fb      	ldr	r3, [r7, #12]
   18856:	681b      	ldr	r3, [r3, #0]
   18858:	2217      	movs	r2, #23
   1885a:	18bc      	adds	r4, r7, r2
   1885c:	0018      	movs	r0, r3
   1885e:	4b1a      	ldr	r3, [pc, #104]	; (188c8 <i2c_master_init+0x10c>)
   18860:	4798      	blx	r3
   18862:	0003      	movs	r3, r0
   18864:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
   18866:	4a1e      	ldr	r2, [pc, #120]	; (188e0 <i2c_master_init+0x124>)
   18868:	2317      	movs	r3, #23
   1886a:	18fb      	adds	r3, r7, r3
   1886c:	781b      	ldrb	r3, [r3, #0]
   1886e:	0011      	movs	r1, r2
   18870:	0018      	movs	r0, r3
   18872:	4b1c      	ldr	r3, [pc, #112]	; (188e4 <i2c_master_init+0x128>)
   18874:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   18876:	2317      	movs	r3, #23
   18878:	18fb      	adds	r3, r7, r3
   1887a:	781a      	ldrb	r2, [r3, #0]
   1887c:	4b1a      	ldr	r3, [pc, #104]	; (188e8 <i2c_master_init+0x12c>)
   1887e:	0092      	lsls	r2, r2, #2
   18880:	68f9      	ldr	r1, [r7, #12]
   18882:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
   18884:	68fb      	ldr	r3, [r7, #12]
   18886:	2200      	movs	r2, #0
   18888:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
   1888a:	68fb      	ldr	r3, [r7, #12]
   1888c:	2200      	movs	r2, #0
   1888e:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
   18890:	68fb      	ldr	r3, [r7, #12]
   18892:	2200      	movs	r2, #0
   18894:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
   18896:	68fb      	ldr	r3, [r7, #12]
   18898:	2200      	movs	r2, #0
   1889a:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
   1889c:	68fb      	ldr	r3, [r7, #12]
   1889e:	2225      	movs	r2, #37	; 0x25
   188a0:	2100      	movs	r1, #0
   188a2:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
   188a4:	68fb      	ldr	r3, [r7, #12]
   188a6:	2200      	movs	r2, #0
   188a8:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
   188aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   188ac:	2214      	movs	r2, #20
   188ae:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
   188b0:	687a      	ldr	r2, [r7, #4]
   188b2:	68fb      	ldr	r3, [r7, #12]
   188b4:	0011      	movs	r1, r2
   188b6:	0018      	movs	r0, r3
   188b8:	4b0c      	ldr	r3, [pc, #48]	; (188ec <i2c_master_init+0x130>)
   188ba:	4798      	blx	r3
   188bc:	0003      	movs	r3, r0
}
   188be:	0018      	movs	r0, r3
   188c0:	46bd      	mov	sp, r7
   188c2:	b00b      	add	sp, #44	; 0x2c
   188c4:	bd90      	pop	{r4, r7, pc}
   188c6:	46c0      	nop			; (mov r8, r8)
   188c8:	000281f1 	.word	0x000281f1
   188cc:	00018211 	.word	0x00018211
   188d0:	000181f9 	.word	0x000181f9
   188d4:	0002aa81 	.word	0x0002aa81
   188d8:	0002aac5 	.word	0x0002aac5
   188dc:	00027fa9 	.word	0x00027fa9
   188e0:	00013ccd 	.word	0x00013ccd
   188e4:	00028255 	.word	0x00028255
   188e8:	20005c58 	.word	0x20005c58
   188ec:	000183ad 	.word	0x000183ad

000188f0 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
   188f0:	b580      	push	{r7, lr}
   188f2:	b084      	sub	sp, #16
   188f4:	af00      	add	r7, sp, #0
   188f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   188f8:	687b      	ldr	r3, [r7, #4]
   188fa:	681b      	ldr	r3, [r3, #0]
   188fc:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   188fe:	687b      	ldr	r3, [r7, #4]
   18900:	0018      	movs	r0, r3
   18902:	4b0f      	ldr	r3, [pc, #60]	; (18940 <i2c_master_reset+0x50>)
   18904:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
   18906:	687b      	ldr	r3, [r7, #4]
   18908:	0018      	movs	r0, r3
   1890a:	4b0e      	ldr	r3, [pc, #56]	; (18944 <i2c_master_reset+0x54>)
   1890c:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
   1890e:	4b0e      	ldr	r3, [pc, #56]	; (18948 <i2c_master_reset+0x58>)
   18910:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
   18912:	687b      	ldr	r3, [r7, #4]
   18914:	681b      	ldr	r3, [r3, #0]
   18916:	0018      	movs	r0, r3
   18918:	4b0c      	ldr	r3, [pc, #48]	; (1894c <i2c_master_reset+0x5c>)
   1891a:	4798      	blx	r3
   1891c:	0003      	movs	r3, r0
   1891e:	0018      	movs	r0, r3
   18920:	4b0b      	ldr	r3, [pc, #44]	; (18950 <i2c_master_reset+0x60>)
   18922:	4798      	blx	r3
	system_interrupt_leave_critical_section();
   18924:	4b0b      	ldr	r3, [pc, #44]	; (18954 <i2c_master_reset+0x64>)
   18926:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   18928:	687b      	ldr	r3, [r7, #4]
   1892a:	0018      	movs	r0, r3
   1892c:	4b04      	ldr	r3, [pc, #16]	; (18940 <i2c_master_reset+0x50>)
   1892e:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
   18930:	68fb      	ldr	r3, [r7, #12]
   18932:	2201      	movs	r2, #1
   18934:	601a      	str	r2, [r3, #0]
}
   18936:	46c0      	nop			; (mov r8, r8)
   18938:	46bd      	mov	sp, r7
   1893a:	b004      	add	sp, #16
   1893c:	bd80      	pop	{r7, pc}
   1893e:	46c0      	nop			; (mov r8, r8)
   18940:	00018331 	.word	0x00018331
   18944:	00018355 	.word	0x00018355
   18948:	000182b5 	.word	0x000182b5
   1894c:	000282c1 	.word	0x000282c1
   18950:	0002abfd 	.word	0x0002abfd
   18954:	000182c9 	.word	0x000182c9

00018958 <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
   18958:	b580      	push	{r7, lr}
   1895a:	b084      	sub	sp, #16
   1895c:	af00      	add	r7, sp, #0
   1895e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   18960:	687b      	ldr	r3, [r7, #4]
   18962:	681b      	ldr	r3, [r3, #0]
   18964:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   18966:	68fb      	ldr	r3, [r7, #12]
   18968:	7e1b      	ldrb	r3, [r3, #24]
   1896a:	b2db      	uxtb	r3, r3
   1896c:	001a      	movs	r2, r3
   1896e:	2302      	movs	r3, #2
   18970:	4013      	ands	r3, r2
   18972:	d00b      	beq.n	1898c <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   18974:	68fb      	ldr	r3, [r7, #12]
   18976:	2202      	movs	r2, #2
   18978:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   1897a:	68fb      	ldr	r3, [r7, #12]
   1897c:	8b5b      	ldrh	r3, [r3, #26]
   1897e:	b29b      	uxth	r3, r3
   18980:	001a      	movs	r2, r3
   18982:	2302      	movs	r3, #2
   18984:	4013      	ands	r3, r2
   18986:	d011      	beq.n	189ac <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   18988:	2341      	movs	r3, #65	; 0x41
   1898a:	e010      	b.n	189ae <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   1898c:	68fb      	ldr	r3, [r7, #12]
   1898e:	8b5b      	ldrh	r3, [r3, #26]
   18990:	b29b      	uxth	r3, r3
   18992:	001a      	movs	r2, r3
   18994:	2304      	movs	r3, #4
   18996:	4013      	ands	r3, r2
   18998:	d008      	beq.n	189ac <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   1899a:	68fb      	ldr	r3, [r7, #12]
   1899c:	685b      	ldr	r3, [r3, #4]
   1899e:	22c0      	movs	r2, #192	; 0xc0
   189a0:	0292      	lsls	r2, r2, #10
   189a2:	431a      	orrs	r2, r3
   189a4:	68fb      	ldr	r3, [r7, #12]
   189a6:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
   189a8:	2318      	movs	r3, #24
   189aa:	e000      	b.n	189ae <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
   189ac:	2300      	movs	r3, #0
}
   189ae:	0018      	movs	r0, r3
   189b0:	46bd      	mov	sp, r7
   189b2:	b004      	add	sp, #16
   189b4:	bd80      	pop	{r7, pc}

000189b6 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   189b6:	b580      	push	{r7, lr}
   189b8:	b084      	sub	sp, #16
   189ba:	af00      	add	r7, sp, #0
   189bc:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   189be:	687b      	ldr	r3, [r7, #4]
   189c0:	681b      	ldr	r3, [r3, #0]
   189c2:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   189c4:	230e      	movs	r3, #14
   189c6:	18fb      	adds	r3, r7, r3
   189c8:	2200      	movs	r2, #0
   189ca:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   189cc:	e00f      	b.n	189ee <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
   189ce:	230e      	movs	r3, #14
   189d0:	18fb      	adds	r3, r7, r3
   189d2:	220e      	movs	r2, #14
   189d4:	18ba      	adds	r2, r7, r2
   189d6:	8812      	ldrh	r2, [r2, #0]
   189d8:	3201      	adds	r2, #1
   189da:	801a      	strh	r2, [r3, #0]
   189dc:	687b      	ldr	r3, [r7, #4]
   189de:	891b      	ldrh	r3, [r3, #8]
   189e0:	220e      	movs	r2, #14
   189e2:	18ba      	adds	r2, r7, r2
   189e4:	8812      	ldrh	r2, [r2, #0]
   189e6:	429a      	cmp	r2, r3
   189e8:	d301      	bcc.n	189ee <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
   189ea:	2312      	movs	r3, #18
   189ec:	e00e      	b.n	18a0c <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   189ee:	68bb      	ldr	r3, [r7, #8]
   189f0:	7e1b      	ldrb	r3, [r3, #24]
   189f2:	b2db      	uxtb	r3, r3
   189f4:	001a      	movs	r2, r3
   189f6:	2301      	movs	r3, #1
   189f8:	4013      	ands	r3, r2
   189fa:	d106      	bne.n	18a0a <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   189fc:	68bb      	ldr	r3, [r7, #8]
   189fe:	7e1b      	ldrb	r3, [r3, #24]
   18a00:	b2db      	uxtb	r3, r3
   18a02:	001a      	movs	r2, r3
   18a04:	2302      	movs	r3, #2
   18a06:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   18a08:	d0e1      	beq.n	189ce <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
   18a0a:	2300      	movs	r3, #0
}
   18a0c:	0018      	movs	r0, r3
   18a0e:	46bd      	mov	sp, r7
   18a10:	b004      	add	sp, #16
   18a12:	bd80      	pop	{r7, pc}

00018a14 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
   18a14:	b590      	push	{r4, r7, lr}
   18a16:	b085      	sub	sp, #20
   18a18:	af00      	add	r7, sp, #0
   18a1a:	6078      	str	r0, [r7, #4]
   18a1c:	000a      	movs	r2, r1
   18a1e:	1cfb      	adds	r3, r7, #3
   18a20:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   18a22:	687b      	ldr	r3, [r7, #4]
   18a24:	681b      	ldr	r3, [r3, #0]
   18a26:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   18a28:	68fb      	ldr	r3, [r7, #12]
   18a2a:	685b      	ldr	r3, [r3, #4]
   18a2c:	2280      	movs	r2, #128	; 0x80
   18a2e:	02d2      	lsls	r2, r2, #11
   18a30:	431a      	orrs	r2, r3
   18a32:	68fb      	ldr	r3, [r7, #12]
   18a34:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
   18a36:	1cfb      	adds	r3, r7, #3
   18a38:	781a      	ldrb	r2, [r3, #0]
   18a3a:	68fb      	ldr	r3, [r7, #12]
   18a3c:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   18a3e:	230b      	movs	r3, #11
   18a40:	18fc      	adds	r4, r7, r3
   18a42:	687b      	ldr	r3, [r7, #4]
   18a44:	0018      	movs	r0, r3
   18a46:	4b07      	ldr	r3, [pc, #28]	; (18a64 <_i2c_master_send_hs_master_code+0x50>)
   18a48:	4798      	blx	r3
   18a4a:	0003      	movs	r3, r0
   18a4c:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   18a4e:	68fb      	ldr	r3, [r7, #12]
   18a50:	2201      	movs	r2, #1
   18a52:	761a      	strb	r2, [r3, #24]

	return tmp_status;
   18a54:	230b      	movs	r3, #11
   18a56:	18fb      	adds	r3, r7, r3
   18a58:	781b      	ldrb	r3, [r3, #0]
}
   18a5a:	0018      	movs	r0, r3
   18a5c:	46bd      	mov	sp, r7
   18a5e:	b005      	add	sp, #20
   18a60:	bd90      	pop	{r4, r7, pc}
   18a62:	46c0      	nop			; (mov r8, r8)
   18a64:	000189b7 	.word	0x000189b7

00018a68 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   18a68:	b580      	push	{r7, lr}
   18a6a:	af00      	add	r7, sp, #0
   18a6c:	2000      	movs	r0, #0
   18a6e:	4b02      	ldr	r3, [pc, #8]	; (18a78 <TC3_Handler+0x10>)
   18a70:	4798      	blx	r3
   18a72:	46c0      	nop			; (mov r8, r8)
   18a74:	46bd      	mov	sp, r7
   18a76:	bd80      	pop	{r7, pc}
   18a78:	00018aa5 	.word	0x00018aa5

00018a7c <TC4_Handler>:
   18a7c:	b580      	push	{r7, lr}
   18a7e:	af00      	add	r7, sp, #0
   18a80:	2001      	movs	r0, #1
   18a82:	4b02      	ldr	r3, [pc, #8]	; (18a8c <TC4_Handler+0x10>)
   18a84:	4798      	blx	r3
   18a86:	46c0      	nop			; (mov r8, r8)
   18a88:	46bd      	mov	sp, r7
   18a8a:	bd80      	pop	{r7, pc}
   18a8c:	00018aa5 	.word	0x00018aa5

00018a90 <TC5_Handler>:
   18a90:	b580      	push	{r7, lr}
   18a92:	af00      	add	r7, sp, #0
   18a94:	2002      	movs	r0, #2
   18a96:	4b02      	ldr	r3, [pc, #8]	; (18aa0 <TC5_Handler+0x10>)
   18a98:	4798      	blx	r3
   18a9a:	46c0      	nop			; (mov r8, r8)
   18a9c:	46bd      	mov	sp, r7
   18a9e:	bd80      	pop	{r7, pc}
   18aa0:	00018aa5 	.word	0x00018aa5

00018aa4 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   18aa4:	b580      	push	{r7, lr}
   18aa6:	b084      	sub	sp, #16
   18aa8:	af00      	add	r7, sp, #0
   18aaa:	0002      	movs	r2, r0
   18aac:	1dfb      	adds	r3, r7, #7
   18aae:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   18ab0:	1dfb      	adds	r3, r7, #7
   18ab2:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   18ab4:	4b28      	ldr	r3, [pc, #160]	; (18b58 <_tc_interrupt_handler+0xb4>)
   18ab6:	0092      	lsls	r2, r2, #2
   18ab8:	58d3      	ldr	r3, [r2, r3]
   18aba:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   18abc:	68fb      	ldr	r3, [r7, #12]
   18abe:	681b      	ldr	r3, [r3, #0]
   18ac0:	7b9b      	ldrb	r3, [r3, #14]
   18ac2:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   18ac4:	68fa      	ldr	r2, [r7, #12]
   18ac6:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   18ac8:	4013      	ands	r3, r2
   18aca:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   18acc:	68fb      	ldr	r3, [r7, #12]
   18ace:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   18ad0:	230b      	movs	r3, #11
   18ad2:	18fb      	adds	r3, r7, r3
   18ad4:	400a      	ands	r2, r1
   18ad6:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   18ad8:	230b      	movs	r3, #11
   18ada:	18fb      	adds	r3, r7, r3
   18adc:	781b      	ldrb	r3, [r3, #0]
   18ade:	2201      	movs	r2, #1
   18ae0:	4013      	ands	r3, r2
   18ae2:	d008      	beq.n	18af6 <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   18ae4:	68fb      	ldr	r3, [r7, #12]
   18ae6:	689b      	ldr	r3, [r3, #8]
   18ae8:	68fa      	ldr	r2, [r7, #12]
   18aea:	0010      	movs	r0, r2
   18aec:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   18aee:	68fb      	ldr	r3, [r7, #12]
   18af0:	681b      	ldr	r3, [r3, #0]
   18af2:	2201      	movs	r2, #1
   18af4:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   18af6:	230b      	movs	r3, #11
   18af8:	18fb      	adds	r3, r7, r3
   18afa:	781b      	ldrb	r3, [r3, #0]
   18afc:	2202      	movs	r2, #2
   18afe:	4013      	ands	r3, r2
   18b00:	d008      	beq.n	18b14 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   18b02:	68fb      	ldr	r3, [r7, #12]
   18b04:	68db      	ldr	r3, [r3, #12]
   18b06:	68fa      	ldr	r2, [r7, #12]
   18b08:	0010      	movs	r0, r2
   18b0a:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   18b0c:	68fb      	ldr	r3, [r7, #12]
   18b0e:	681b      	ldr	r3, [r3, #0]
   18b10:	2202      	movs	r2, #2
   18b12:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   18b14:	230b      	movs	r3, #11
   18b16:	18fb      	adds	r3, r7, r3
   18b18:	781b      	ldrb	r3, [r3, #0]
   18b1a:	2210      	movs	r2, #16
   18b1c:	4013      	ands	r3, r2
   18b1e:	d008      	beq.n	18b32 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   18b20:	68fb      	ldr	r3, [r7, #12]
   18b22:	691b      	ldr	r3, [r3, #16]
   18b24:	68fa      	ldr	r2, [r7, #12]
   18b26:	0010      	movs	r0, r2
   18b28:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   18b2a:	68fb      	ldr	r3, [r7, #12]
   18b2c:	681b      	ldr	r3, [r3, #0]
   18b2e:	2210      	movs	r2, #16
   18b30:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   18b32:	230b      	movs	r3, #11
   18b34:	18fb      	adds	r3, r7, r3
   18b36:	781b      	ldrb	r3, [r3, #0]
   18b38:	2220      	movs	r2, #32
   18b3a:	4013      	ands	r3, r2
   18b3c:	d008      	beq.n	18b50 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   18b3e:	68fb      	ldr	r3, [r7, #12]
   18b40:	695b      	ldr	r3, [r3, #20]
   18b42:	68fa      	ldr	r2, [r7, #12]
   18b44:	0010      	movs	r0, r2
   18b46:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   18b48:	68fb      	ldr	r3, [r7, #12]
   18b4a:	681b      	ldr	r3, [r3, #0]
   18b4c:	2220      	movs	r2, #32
   18b4e:	739a      	strb	r2, [r3, #14]
	}
}
   18b50:	46c0      	nop			; (mov r8, r8)
   18b52:	46bd      	mov	sp, r7
   18b54:	b004      	add	sp, #16
   18b56:	bd80      	pop	{r7, pc}
   18b58:	20004a40 	.word	0x20004a40

00018b5c <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
   18b5c:	b580      	push	{r7, lr}
   18b5e:	b084      	sub	sp, #16
   18b60:	af00      	add	r7, sp, #0
   18b62:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
   18b64:	2300      	movs	r3, #0
   18b66:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
   18b68:	687b      	ldr	r3, [r7, #4]
   18b6a:	2b00      	cmp	r3, #0
   18b6c:	d101      	bne.n	18b72 <FreeRTOS_CLIRegisterCommand+0x16>
   18b6e:	b672      	cpsid	i
   18b70:	e7fe      	b.n	18b70 <FreeRTOS_CLIRegisterCommand+0x14>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
   18b72:	2008      	movs	r0, #8
   18b74:	4b11      	ldr	r3, [pc, #68]	; (18bbc <FreeRTOS_CLIRegisterCommand+0x60>)
   18b76:	4798      	blx	r3
   18b78:	0003      	movs	r3, r0
   18b7a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxNewListItem );
   18b7c:	68bb      	ldr	r3, [r7, #8]
   18b7e:	2b00      	cmp	r3, #0
   18b80:	d101      	bne.n	18b86 <FreeRTOS_CLIRegisterCommand+0x2a>
   18b82:	b672      	cpsid	i
   18b84:	e7fe      	b.n	18b84 <FreeRTOS_CLIRegisterCommand+0x28>

	if( pxNewListItem != NULL )
   18b86:	68bb      	ldr	r3, [r7, #8]
   18b88:	2b00      	cmp	r3, #0
   18b8a:	d012      	beq.n	18bb2 <FreeRTOS_CLIRegisterCommand+0x56>
	{
		taskENTER_CRITICAL();
   18b8c:	4b0c      	ldr	r3, [pc, #48]	; (18bc0 <FreeRTOS_CLIRegisterCommand+0x64>)
   18b8e:	4798      	blx	r3
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
   18b90:	68bb      	ldr	r3, [r7, #8]
   18b92:	687a      	ldr	r2, [r7, #4]
   18b94:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
   18b96:	68bb      	ldr	r3, [r7, #8]
   18b98:	2200      	movs	r2, #0
   18b9a:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
   18b9c:	4b09      	ldr	r3, [pc, #36]	; (18bc4 <FreeRTOS_CLIRegisterCommand+0x68>)
   18b9e:	681b      	ldr	r3, [r3, #0]
   18ba0:	68ba      	ldr	r2, [r7, #8]
   18ba2:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
   18ba4:	4b07      	ldr	r3, [pc, #28]	; (18bc4 <FreeRTOS_CLIRegisterCommand+0x68>)
   18ba6:	68ba      	ldr	r2, [r7, #8]
   18ba8:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
   18baa:	4b07      	ldr	r3, [pc, #28]	; (18bc8 <FreeRTOS_CLIRegisterCommand+0x6c>)
   18bac:	4798      	blx	r3

		xReturn = pdPASS;
   18bae:	2301      	movs	r3, #1
   18bb0:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   18bb2:	68fb      	ldr	r3, [r7, #12]
}
   18bb4:	0018      	movs	r0, r3
   18bb6:	46bd      	mov	sp, r7
   18bb8:	b004      	add	sp, #16
   18bba:	bd80      	pop	{r7, pc}
   18bbc:	0001af71 	.word	0x0001af71
   18bc0:	0001ae39 	.word	0x0001ae39
   18bc4:	20000100 	.word	0x20000100
   18bc8:	0001ae5d 	.word	0x0001ae5d

00018bcc <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
   18bcc:	b580      	push	{r7, lr}
   18bce:	b088      	sub	sp, #32
   18bd0:	af00      	add	r7, sp, #0
   18bd2:	60f8      	str	r0, [r7, #12]
   18bd4:	60b9      	str	r1, [r7, #8]
   18bd6:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
   18bd8:	2301      	movs	r3, #1
   18bda:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
   18bdc:	4b3d      	ldr	r3, [pc, #244]	; (18cd4 <FreeRTOS_CLIProcessCommand+0x108>)
   18bde:	681b      	ldr	r3, [r3, #0]
   18be0:	2b00      	cmp	r3, #0
   18be2:	d144      	bne.n	18c6e <FreeRTOS_CLIProcessCommand+0xa2>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   18be4:	4b3b      	ldr	r3, [pc, #236]	; (18cd4 <FreeRTOS_CLIProcessCommand+0x108>)
   18be6:	4a3c      	ldr	r2, [pc, #240]	; (18cd8 <FreeRTOS_CLIProcessCommand+0x10c>)
   18be8:	601a      	str	r2, [r3, #0]
   18bea:	e03a      	b.n	18c62 <FreeRTOS_CLIProcessCommand+0x96>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
   18bec:	4b39      	ldr	r3, [pc, #228]	; (18cd4 <FreeRTOS_CLIProcessCommand+0x108>)
   18bee:	681b      	ldr	r3, [r3, #0]
   18bf0:	681b      	ldr	r3, [r3, #0]
   18bf2:	681b      	ldr	r3, [r3, #0]
   18bf4:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   18bf6:	69bb      	ldr	r3, [r7, #24]
   18bf8:	0018      	movs	r0, r3
   18bfa:	4b38      	ldr	r3, [pc, #224]	; (18cdc <FreeRTOS_CLIProcessCommand+0x110>)
   18bfc:	4798      	blx	r3
   18bfe:	0003      	movs	r3, r0
   18c00:	617b      	str	r3, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   18c02:	68fa      	ldr	r2, [r7, #12]
   18c04:	697b      	ldr	r3, [r7, #20]
   18c06:	18d3      	adds	r3, r2, r3
   18c08:	781b      	ldrb	r3, [r3, #0]
   18c0a:	2b20      	cmp	r3, #32
   18c0c:	d005      	beq.n	18c1a <FreeRTOS_CLIProcessCommand+0x4e>
   18c0e:	68fa      	ldr	r2, [r7, #12]
   18c10:	697b      	ldr	r3, [r7, #20]
   18c12:	18d3      	adds	r3, r2, r3
   18c14:	781b      	ldrb	r3, [r3, #0]
   18c16:	2b00      	cmp	r3, #0
   18c18:	d11e      	bne.n	18c58 <FreeRTOS_CLIProcessCommand+0x8c>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   18c1a:	697a      	ldr	r2, [r7, #20]
   18c1c:	69b9      	ldr	r1, [r7, #24]
   18c1e:	68fb      	ldr	r3, [r7, #12]
   18c20:	0018      	movs	r0, r3
   18c22:	4b2f      	ldr	r3, [pc, #188]	; (18ce0 <FreeRTOS_CLIProcessCommand+0x114>)
   18c24:	4798      	blx	r3
   18c26:	1e03      	subs	r3, r0, #0
   18c28:	d116      	bne.n	18c58 <FreeRTOS_CLIProcessCommand+0x8c>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
   18c2a:	4b2a      	ldr	r3, [pc, #168]	; (18cd4 <FreeRTOS_CLIProcessCommand+0x108>)
   18c2c:	681b      	ldr	r3, [r3, #0]
   18c2e:	681b      	ldr	r3, [r3, #0]
   18c30:	7b1b      	ldrb	r3, [r3, #12]
   18c32:	b25b      	sxtb	r3, r3
   18c34:	2b00      	cmp	r3, #0
   18c36:	db19      	blt.n	18c6c <FreeRTOS_CLIProcessCommand+0xa0>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
   18c38:	68fb      	ldr	r3, [r7, #12]
   18c3a:	0018      	movs	r0, r3
   18c3c:	4b29      	ldr	r3, [pc, #164]	; (18ce4 <FreeRTOS_CLIProcessCommand+0x118>)
   18c3e:	4798      	blx	r3
   18c40:	0003      	movs	r3, r0
   18c42:	001a      	movs	r2, r3
   18c44:	4b23      	ldr	r3, [pc, #140]	; (18cd4 <FreeRTOS_CLIProcessCommand+0x108>)
   18c46:	681b      	ldr	r3, [r3, #0]
   18c48:	681b      	ldr	r3, [r3, #0]
   18c4a:	7b1b      	ldrb	r3, [r3, #12]
   18c4c:	b25b      	sxtb	r3, r3
   18c4e:	429a      	cmp	r2, r3
   18c50:	d00c      	beq.n	18c6c <FreeRTOS_CLIProcessCommand+0xa0>
						{
							xReturn = pdFALSE;
   18c52:	2300      	movs	r3, #0
   18c54:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
   18c56:	e009      	b.n	18c6c <FreeRTOS_CLIProcessCommand+0xa0>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   18c58:	4b1e      	ldr	r3, [pc, #120]	; (18cd4 <FreeRTOS_CLIProcessCommand+0x108>)
   18c5a:	681b      	ldr	r3, [r3, #0]
   18c5c:	685a      	ldr	r2, [r3, #4]
   18c5e:	4b1d      	ldr	r3, [pc, #116]	; (18cd4 <FreeRTOS_CLIProcessCommand+0x108>)
   18c60:	601a      	str	r2, [r3, #0]
   18c62:	4b1c      	ldr	r3, [pc, #112]	; (18cd4 <FreeRTOS_CLIProcessCommand+0x108>)
   18c64:	681b      	ldr	r3, [r3, #0]
   18c66:	2b00      	cmp	r3, #0
   18c68:	d1c0      	bne.n	18bec <FreeRTOS_CLIProcessCommand+0x20>
   18c6a:	e000      	b.n	18c6e <FreeRTOS_CLIProcessCommand+0xa2>
					break;
   18c6c:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   18c6e:	4b19      	ldr	r3, [pc, #100]	; (18cd4 <FreeRTOS_CLIProcessCommand+0x108>)
   18c70:	681b      	ldr	r3, [r3, #0]
   18c72:	2b00      	cmp	r3, #0
   18c74:	d00c      	beq.n	18c90 <FreeRTOS_CLIProcessCommand+0xc4>
   18c76:	69fb      	ldr	r3, [r7, #28]
   18c78:	2b00      	cmp	r3, #0
   18c7a:	d109      	bne.n	18c90 <FreeRTOS_CLIProcessCommand+0xc4>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   18c7c:	687a      	ldr	r2, [r7, #4]
   18c7e:	491a      	ldr	r1, [pc, #104]	; (18ce8 <FreeRTOS_CLIProcessCommand+0x11c>)
   18c80:	68bb      	ldr	r3, [r7, #8]
   18c82:	0018      	movs	r0, r3
   18c84:	4b19      	ldr	r3, [pc, #100]	; (18cec <FreeRTOS_CLIProcessCommand+0x120>)
   18c86:	4798      	blx	r3
		pxCommand = NULL;
   18c88:	4b12      	ldr	r3, [pc, #72]	; (18cd4 <FreeRTOS_CLIProcessCommand+0x108>)
   18c8a:	2200      	movs	r2, #0
   18c8c:	601a      	str	r2, [r3, #0]
   18c8e:	e01c      	b.n	18cca <FreeRTOS_CLIProcessCommand+0xfe>
	}
	else if( pxCommand != NULL )
   18c90:	4b10      	ldr	r3, [pc, #64]	; (18cd4 <FreeRTOS_CLIProcessCommand+0x108>)
   18c92:	681b      	ldr	r3, [r3, #0]
   18c94:	2b00      	cmp	r3, #0
   18c96:	d010      	beq.n	18cba <FreeRTOS_CLIProcessCommand+0xee>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
   18c98:	4b0e      	ldr	r3, [pc, #56]	; (18cd4 <FreeRTOS_CLIProcessCommand+0x108>)
   18c9a:	681b      	ldr	r3, [r3, #0]
   18c9c:	681b      	ldr	r3, [r3, #0]
   18c9e:	689b      	ldr	r3, [r3, #8]
   18ca0:	68fa      	ldr	r2, [r7, #12]
   18ca2:	6879      	ldr	r1, [r7, #4]
   18ca4:	68b8      	ldr	r0, [r7, #8]
   18ca6:	4798      	blx	r3
   18ca8:	0003      	movs	r3, r0
   18caa:	61fb      	str	r3, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
   18cac:	69fb      	ldr	r3, [r7, #28]
   18cae:	2b00      	cmp	r3, #0
   18cb0:	d10b      	bne.n	18cca <FreeRTOS_CLIProcessCommand+0xfe>
		{
			pxCommand = NULL;
   18cb2:	4b08      	ldr	r3, [pc, #32]	; (18cd4 <FreeRTOS_CLIProcessCommand+0x108>)
   18cb4:	2200      	movs	r2, #0
   18cb6:	601a      	str	r2, [r3, #0]
   18cb8:	e007      	b.n	18cca <FreeRTOS_CLIProcessCommand+0xfe>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   18cba:	687a      	ldr	r2, [r7, #4]
   18cbc:	490c      	ldr	r1, [pc, #48]	; (18cf0 <FreeRTOS_CLIProcessCommand+0x124>)
   18cbe:	68bb      	ldr	r3, [r7, #8]
   18cc0:	0018      	movs	r0, r3
   18cc2:	4b0a      	ldr	r3, [pc, #40]	; (18cec <FreeRTOS_CLIProcessCommand+0x120>)
   18cc4:	4798      	blx	r3
		xReturn = pdFALSE;
   18cc6:	2300      	movs	r3, #0
   18cc8:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
   18cca:	69fb      	ldr	r3, [r7, #28]
}
   18ccc:	0018      	movs	r0, r3
   18cce:	46bd      	mov	sp, r7
   18cd0:	b008      	add	sp, #32
   18cd2:	bd80      	pop	{r7, pc}
   18cd4:	20000cd4 	.word	0x20000cd4
   18cd8:	200000f8 	.word	0x200000f8
   18cdc:	000359a7 	.word	0x000359a7
   18ce0:	000359b5 	.word	0x000359b5
   18ce4:	00018d55 	.word	0x00018d55
   18ce8:	00037bec 	.word	0x00037bec
   18cec:	000359d7 	.word	0x000359d7
   18cf0:	00037c44 	.word	0x00037c44

00018cf4 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
   18cf4:	b580      	push	{r7, lr}
   18cf6:	b086      	sub	sp, #24
   18cf8:	af00      	add	r7, sp, #0
   18cfa:	60f8      	str	r0, [r7, #12]
   18cfc:	60b9      	str	r1, [r7, #8]
   18cfe:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
   18d00:	4b11      	ldr	r3, [pc, #68]	; (18d48 <prvHelpCommand+0x54>)
   18d02:	681b      	ldr	r3, [r3, #0]
   18d04:	2b00      	cmp	r3, #0
   18d06:	d102      	bne.n	18d0e <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
   18d08:	4b0f      	ldr	r3, [pc, #60]	; (18d48 <prvHelpCommand+0x54>)
   18d0a:	4a10      	ldr	r2, [pc, #64]	; (18d4c <prvHelpCommand+0x58>)
   18d0c:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
   18d0e:	4b0e      	ldr	r3, [pc, #56]	; (18d48 <prvHelpCommand+0x54>)
   18d10:	681b      	ldr	r3, [r3, #0]
   18d12:	681b      	ldr	r3, [r3, #0]
   18d14:	6859      	ldr	r1, [r3, #4]
   18d16:	68ba      	ldr	r2, [r7, #8]
   18d18:	68fb      	ldr	r3, [r7, #12]
   18d1a:	0018      	movs	r0, r3
   18d1c:	4b0c      	ldr	r3, [pc, #48]	; (18d50 <prvHelpCommand+0x5c>)
   18d1e:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
   18d20:	4b09      	ldr	r3, [pc, #36]	; (18d48 <prvHelpCommand+0x54>)
   18d22:	681b      	ldr	r3, [r3, #0]
   18d24:	685a      	ldr	r2, [r3, #4]
   18d26:	4b08      	ldr	r3, [pc, #32]	; (18d48 <prvHelpCommand+0x54>)
   18d28:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
   18d2a:	4b07      	ldr	r3, [pc, #28]	; (18d48 <prvHelpCommand+0x54>)
   18d2c:	681b      	ldr	r3, [r3, #0]
   18d2e:	2b00      	cmp	r3, #0
   18d30:	d102      	bne.n	18d38 <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
   18d32:	2300      	movs	r3, #0
   18d34:	617b      	str	r3, [r7, #20]
   18d36:	e001      	b.n	18d3c <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
   18d38:	2301      	movs	r3, #1
   18d3a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
   18d3c:	697b      	ldr	r3, [r7, #20]
}
   18d3e:	0018      	movs	r0, r3
   18d40:	46bd      	mov	sp, r7
   18d42:	b006      	add	sp, #24
   18d44:	bd80      	pop	{r7, pc}
   18d46:	46c0      	nop			; (mov r8, r8)
   18d48:	20000cd8 	.word	0x20000cd8
   18d4c:	200000f8 	.word	0x200000f8
   18d50:	000359d7 	.word	0x000359d7

00018d54 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
   18d54:	b580      	push	{r7, lr}
   18d56:	b084      	sub	sp, #16
   18d58:	af00      	add	r7, sp, #0
   18d5a:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
   18d5c:	230f      	movs	r3, #15
   18d5e:	18fb      	adds	r3, r7, r3
   18d60:	2200      	movs	r2, #0
   18d62:	701a      	strb	r2, [r3, #0]
BaseType_t xLastCharacterWasSpace = pdFALSE;
   18d64:	2300      	movs	r3, #0
   18d66:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
   18d68:	e018      	b.n	18d9c <prvGetNumberOfParameters+0x48>
	{
		if( ( *pcCommandString ) == ' ' )
   18d6a:	687b      	ldr	r3, [r7, #4]
   18d6c:	781b      	ldrb	r3, [r3, #0]
   18d6e:	2b20      	cmp	r3, #32
   18d70:	d10f      	bne.n	18d92 <prvGetNumberOfParameters+0x3e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
   18d72:	68bb      	ldr	r3, [r7, #8]
   18d74:	2b01      	cmp	r3, #1
   18d76:	d00e      	beq.n	18d96 <prvGetNumberOfParameters+0x42>
			{
				cParameters++;
   18d78:	230f      	movs	r3, #15
   18d7a:	18fb      	adds	r3, r7, r3
   18d7c:	781b      	ldrb	r3, [r3, #0]
   18d7e:	b25b      	sxtb	r3, r3
   18d80:	b2db      	uxtb	r3, r3
   18d82:	3301      	adds	r3, #1
   18d84:	b2da      	uxtb	r2, r3
   18d86:	230f      	movs	r3, #15
   18d88:	18fb      	adds	r3, r7, r3
   18d8a:	701a      	strb	r2, [r3, #0]
				xLastCharacterWasSpace = pdTRUE;
   18d8c:	2301      	movs	r3, #1
   18d8e:	60bb      	str	r3, [r7, #8]
   18d90:	e001      	b.n	18d96 <prvGetNumberOfParameters+0x42>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
   18d92:	2300      	movs	r3, #0
   18d94:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
   18d96:	687b      	ldr	r3, [r7, #4]
   18d98:	3301      	adds	r3, #1
   18d9a:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
   18d9c:	687b      	ldr	r3, [r7, #4]
   18d9e:	781b      	ldrb	r3, [r3, #0]
   18da0:	2b00      	cmp	r3, #0
   18da2:	d1e2      	bne.n	18d6a <prvGetNumberOfParameters+0x16>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
   18da4:	68bb      	ldr	r3, [r7, #8]
   18da6:	2b01      	cmp	r3, #1
   18da8:	d109      	bne.n	18dbe <prvGetNumberOfParameters+0x6a>
	{
		cParameters--;
   18daa:	230f      	movs	r3, #15
   18dac:	18fb      	adds	r3, r7, r3
   18dae:	781b      	ldrb	r3, [r3, #0]
   18db0:	b25b      	sxtb	r3, r3
   18db2:	b2db      	uxtb	r3, r3
   18db4:	3b01      	subs	r3, #1
   18db6:	b2da      	uxtb	r2, r3
   18db8:	230f      	movs	r3, #15
   18dba:	18fb      	adds	r3, r7, r3
   18dbc:	701a      	strb	r2, [r3, #0]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
   18dbe:	230f      	movs	r3, #15
   18dc0:	18fb      	adds	r3, r7, r3
   18dc2:	781b      	ldrb	r3, [r3, #0]
   18dc4:	b25b      	sxtb	r3, r3
}
   18dc6:	0018      	movs	r0, r3
   18dc8:	46bd      	mov	sp, r7
   18dca:	b004      	add	sp, #16
   18dcc:	bd80      	pop	{r7, pc}
	...

00018dd0 <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
   18dd0:	b580      	push	{r7, lr}
   18dd2:	b082      	sub	sp, #8
   18dd4:	af00      	add	r7, sp, #0
   18dd6:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
   18dd8:	687b      	ldr	r3, [r7, #4]
   18dda:	0018      	movs	r0, r3
   18ddc:	4b03      	ldr	r3, [pc, #12]	; (18dec <prvTraceGetQueueNumber+0x1c>)
   18dde:	4798      	blx	r3
   18de0:	0003      	movs	r3, r0
}
   18de2:	0018      	movs	r0, r3
   18de4:	46bd      	mov	sp, r7
   18de6:	b002      	add	sp, #8
   18de8:	bd80      	pop	{r7, pc}
   18dea:	46c0      	nop			; (mov r8, r8)
   18dec:	0001c595 	.word	0x0001c595

00018df0 <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
   18df0:	b580      	push	{r7, lr}
   18df2:	b082      	sub	sp, #8
   18df4:	af00      	add	r7, sp, #0
   18df6:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
   18df8:	687b      	ldr	r3, [r7, #4]
   18dfa:	0018      	movs	r0, r3
   18dfc:	4b03      	ldr	r3, [pc, #12]	; (18e0c <prvTraceGetQueueType+0x1c>)
   18dfe:	4798      	blx	r3
   18e00:	0003      	movs	r3, r0
}
   18e02:	0018      	movs	r0, r3
   18e04:	46bd      	mov	sp, r7
   18e06:	b002      	add	sp, #8
   18e08:	bd80      	pop	{r7, pc}
   18e0a:	46c0      	nop			; (mov r8, r8)
   18e0c:	0001c5c1 	.word	0x0001c5c1

00018e10 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
   18e10:	b580      	push	{r7, lr}
   18e12:	b082      	sub	sp, #8
   18e14:	af00      	add	r7, sp, #0
   18e16:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
   18e18:	687b      	ldr	r3, [r7, #4]
   18e1a:	0018      	movs	r0, r3
   18e1c:	4b03      	ldr	r3, [pc, #12]	; (18e2c <prvTraceGetTaskNumberLow16+0x1c>)
   18e1e:	4798      	blx	r3
   18e20:	0003      	movs	r3, r0
   18e22:	b29b      	uxth	r3, r3
}
   18e24:	0018      	movs	r0, r3
   18e26:	46bd      	mov	sp, r7
   18e28:	b002      	add	sp, #8
   18e2a:	bd80      	pop	{r7, pc}
   18e2c:	0001d8f1 	.word	0x0001d8f1

00018e30 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
   18e30:	b580      	push	{r7, lr}
   18e32:	b082      	sub	sp, #8
   18e34:	af00      	add	r7, sp, #0
   18e36:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
   18e38:	687b      	ldr	r3, [r7, #4]
   18e3a:	0018      	movs	r0, r3
   18e3c:	4b04      	ldr	r3, [pc, #16]	; (18e50 <prvTraceGetTaskNumberHigh16+0x20>)
   18e3e:	4798      	blx	r3
   18e40:	0003      	movs	r3, r0
   18e42:	0c1b      	lsrs	r3, r3, #16
   18e44:	b29b      	uxth	r3, r3
}
   18e46:	0018      	movs	r0, r3
   18e48:	46bd      	mov	sp, r7
   18e4a:	b002      	add	sp, #8
   18e4c:	bd80      	pop	{r7, pc}
   18e4e:	46c0      	nop			; (mov r8, r8)
   18e50:	0001d8f1 	.word	0x0001d8f1

00018e54 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
   18e54:	b580      	push	{r7, lr}
   18e56:	b082      	sub	sp, #8
   18e58:	af00      	add	r7, sp, #0
   18e5a:	6078      	str	r0, [r7, #4]
   18e5c:	000a      	movs	r2, r1
   18e5e:	1cbb      	adds	r3, r7, #2
   18e60:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
   18e62:	687b      	ldr	r3, [r7, #4]
   18e64:	0018      	movs	r0, r3
   18e66:	4b08      	ldr	r3, [pc, #32]	; (18e88 <prvTraceSetTaskNumberLow16+0x34>)
   18e68:	4798      	blx	r3
   18e6a:	0003      	movs	r3, r0
   18e6c:	0c1b      	lsrs	r3, r3, #16
   18e6e:	041a      	lsls	r2, r3, #16
   18e70:	1cbb      	adds	r3, r7, #2
   18e72:	881b      	ldrh	r3, [r3, #0]
   18e74:	431a      	orrs	r2, r3
   18e76:	687b      	ldr	r3, [r7, #4]
   18e78:	0011      	movs	r1, r2
   18e7a:	0018      	movs	r0, r3
   18e7c:	4b03      	ldr	r3, [pc, #12]	; (18e8c <prvTraceSetTaskNumberLow16+0x38>)
   18e7e:	4798      	blx	r3
}
   18e80:	46c0      	nop			; (mov r8, r8)
   18e82:	46bd      	mov	sp, r7
   18e84:	b002      	add	sp, #8
   18e86:	bd80      	pop	{r7, pc}
   18e88:	0001d8f1 	.word	0x0001d8f1
   18e8c:	0001d919 	.word	0x0001d919

00018e90 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
   18e90:	b580      	push	{r7, lr}
   18e92:	b082      	sub	sp, #8
   18e94:	af00      	add	r7, sp, #0
   18e96:	6078      	str	r0, [r7, #4]
   18e98:	000a      	movs	r2, r1
   18e9a:	1cbb      	adds	r3, r7, #2
   18e9c:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
   18e9e:	687b      	ldr	r3, [r7, #4]
   18ea0:	0018      	movs	r0, r3
   18ea2:	4b09      	ldr	r3, [pc, #36]	; (18ec8 <prvTraceSetTaskNumberHigh16+0x38>)
   18ea4:	4798      	blx	r3
   18ea6:	0003      	movs	r3, r0
   18ea8:	041b      	lsls	r3, r3, #16
   18eaa:	0c1a      	lsrs	r2, r3, #16
   18eac:	1cbb      	adds	r3, r7, #2
   18eae:	881b      	ldrh	r3, [r3, #0]
   18eb0:	041b      	lsls	r3, r3, #16
   18eb2:	431a      	orrs	r2, r3
   18eb4:	687b      	ldr	r3, [r7, #4]
   18eb6:	0011      	movs	r1, r2
   18eb8:	0018      	movs	r0, r3
   18eba:	4b04      	ldr	r3, [pc, #16]	; (18ecc <prvTraceSetTaskNumberHigh16+0x3c>)
   18ebc:	4798      	blx	r3
}
   18ebe:	46c0      	nop			; (mov r8, r8)
   18ec0:	46bd      	mov	sp, r7
   18ec2:	b002      	add	sp, #8
   18ec4:	bd80      	pop	{r7, pc}
   18ec6:	46c0      	nop			; (mov r8, r8)
   18ec8:	0001d8f1 	.word	0x0001d8f1
   18ecc:	0001d919 	.word	0x0001d919

00018ed0 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
   18ed0:	b580      	push	{r7, lr}
   18ed2:	b082      	sub	sp, #8
   18ed4:	af00      	add	r7, sp, #0
   18ed6:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
   18ed8:	687b      	ldr	r3, [r7, #4]
   18eda:	0018      	movs	r0, r3
   18edc:	4b03      	ldr	r3, [pc, #12]	; (18eec <prvTraceGetQueueNumberLow16+0x1c>)
   18ede:	4798      	blx	r3
   18ee0:	0003      	movs	r3, r0
   18ee2:	b29b      	uxth	r3, r3
}
   18ee4:	0018      	movs	r0, r3
   18ee6:	46bd      	mov	sp, r7
   18ee8:	b002      	add	sp, #8
   18eea:	bd80      	pop	{r7, pc}
   18eec:	00018dd1 	.word	0x00018dd1

00018ef0 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
   18ef0:	b580      	push	{r7, lr}
   18ef2:	b082      	sub	sp, #8
   18ef4:	af00      	add	r7, sp, #0
   18ef6:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
   18ef8:	687b      	ldr	r3, [r7, #4]
   18efa:	0018      	movs	r0, r3
   18efc:	4b04      	ldr	r3, [pc, #16]	; (18f10 <prvTraceGetQueueNumberHigh16+0x20>)
   18efe:	4798      	blx	r3
   18f00:	0003      	movs	r3, r0
   18f02:	0c1b      	lsrs	r3, r3, #16
   18f04:	b29b      	uxth	r3, r3
}
   18f06:	0018      	movs	r0, r3
   18f08:	46bd      	mov	sp, r7
   18f0a:	b002      	add	sp, #8
   18f0c:	bd80      	pop	{r7, pc}
   18f0e:	46c0      	nop			; (mov r8, r8)
   18f10:	00018dd1 	.word	0x00018dd1

00018f14 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
   18f14:	b580      	push	{r7, lr}
   18f16:	b082      	sub	sp, #8
   18f18:	af00      	add	r7, sp, #0
   18f1a:	6078      	str	r0, [r7, #4]
   18f1c:	000a      	movs	r2, r1
   18f1e:	1cbb      	adds	r3, r7, #2
   18f20:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
   18f22:	687b      	ldr	r3, [r7, #4]
   18f24:	0018      	movs	r0, r3
   18f26:	4b08      	ldr	r3, [pc, #32]	; (18f48 <prvTraceSetQueueNumberLow16+0x34>)
   18f28:	4798      	blx	r3
   18f2a:	0003      	movs	r3, r0
   18f2c:	0c1b      	lsrs	r3, r3, #16
   18f2e:	041a      	lsls	r2, r3, #16
   18f30:	1cbb      	adds	r3, r7, #2
   18f32:	881b      	ldrh	r3, [r3, #0]
   18f34:	431a      	orrs	r2, r3
   18f36:	687b      	ldr	r3, [r7, #4]
   18f38:	0011      	movs	r1, r2
   18f3a:	0018      	movs	r0, r3
   18f3c:	4b03      	ldr	r3, [pc, #12]	; (18f4c <prvTraceSetQueueNumberLow16+0x38>)
   18f3e:	4798      	blx	r3
}
   18f40:	46c0      	nop			; (mov r8, r8)
   18f42:	46bd      	mov	sp, r7
   18f44:	b002      	add	sp, #8
   18f46:	bd80      	pop	{r7, pc}
   18f48:	00018dd1 	.word	0x00018dd1
   18f4c:	0001c5a9 	.word	0x0001c5a9

00018f50 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
   18f50:	b580      	push	{r7, lr}
   18f52:	b082      	sub	sp, #8
   18f54:	af00      	add	r7, sp, #0
   18f56:	6078      	str	r0, [r7, #4]
   18f58:	000a      	movs	r2, r1
   18f5a:	1cbb      	adds	r3, r7, #2
   18f5c:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
   18f5e:	687b      	ldr	r3, [r7, #4]
   18f60:	0018      	movs	r0, r3
   18f62:	4b09      	ldr	r3, [pc, #36]	; (18f88 <prvTraceSetQueueNumberHigh16+0x38>)
   18f64:	4798      	blx	r3
   18f66:	0003      	movs	r3, r0
   18f68:	041b      	lsls	r3, r3, #16
   18f6a:	0c1a      	lsrs	r2, r3, #16
   18f6c:	1cbb      	adds	r3, r7, #2
   18f6e:	881b      	ldrh	r3, [r3, #0]
   18f70:	041b      	lsls	r3, r3, #16
   18f72:	431a      	orrs	r2, r3
   18f74:	687b      	ldr	r3, [r7, #4]
   18f76:	0011      	movs	r1, r2
   18f78:	0018      	movs	r0, r3
   18f7a:	4b04      	ldr	r3, [pc, #16]	; (18f8c <prvTraceSetQueueNumberHigh16+0x3c>)
   18f7c:	4798      	blx	r3
}
   18f7e:	46c0      	nop			; (mov r8, r8)
   18f80:	46bd      	mov	sp, r7
   18f82:	b002      	add	sp, #8
   18f84:	bd80      	pop	{r7, pc}
   18f86:	46c0      	nop			; (mov r8, r8)
   18f88:	00018dd1 	.word	0x00018dd1
   18f8c:	0001c5a9 	.word	0x0001c5a9

00018f90 <prvAddTaskToStackMonitor>:
TaskStackMonitorEntry_t tasksInStackMonitor[TRC_CFG_STACK_MONITOR_MAX_TASKS] = { NULL };

int tasksNotIncluded = 0;

void prvAddTaskToStackMonitor(void* task)
{
   18f90:	b580      	push	{r7, lr}
   18f92:	b084      	sub	sp, #16
   18f94:	af00      	add	r7, sp, #0
   18f96:	6078      	str	r0, [r7, #4]
	int foundEmptySlot = 0;
   18f98:	2300      	movs	r3, #0
   18f9a:	60fb      	str	r3, [r7, #12]

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   18f9c:	2300      	movs	r3, #0
   18f9e:	60bb      	str	r3, [r7, #8]
   18fa0:	e018      	b.n	18fd4 <prvAddTaskToStackMonitor+0x44>
	{
		if (tasksInStackMonitor[i].tcb == NULL)
   18fa2:	4b14      	ldr	r3, [pc, #80]	; (18ff4 <prvAddTaskToStackMonitor+0x64>)
   18fa4:	68ba      	ldr	r2, [r7, #8]
   18fa6:	00d2      	lsls	r2, r2, #3
   18fa8:	58d3      	ldr	r3, [r2, r3]
   18faa:	2b00      	cmp	r3, #0
   18fac:	d10f      	bne.n	18fce <prvAddTaskToStackMonitor+0x3e>
		{
			tasksInStackMonitor[i].tcb = task;
   18fae:	4b11      	ldr	r3, [pc, #68]	; (18ff4 <prvAddTaskToStackMonitor+0x64>)
   18fb0:	68ba      	ldr	r2, [r7, #8]
   18fb2:	00d2      	lsls	r2, r2, #3
   18fb4:	6879      	ldr	r1, [r7, #4]
   18fb6:	50d1      	str	r1, [r2, r3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
   18fb8:	4a0e      	ldr	r2, [pc, #56]	; (18ff4 <prvAddTaskToStackMonitor+0x64>)
   18fba:	68bb      	ldr	r3, [r7, #8]
   18fbc:	00db      	lsls	r3, r3, #3
   18fbe:	18d3      	adds	r3, r2, r3
   18fc0:	3304      	adds	r3, #4
   18fc2:	2201      	movs	r2, #1
   18fc4:	4252      	negs	r2, r2
   18fc6:	601a      	str	r2, [r3, #0]
			foundEmptySlot = 1;
   18fc8:	2301      	movs	r3, #1
   18fca:	60fb      	str	r3, [r7, #12]
			break;
   18fcc:	e005      	b.n	18fda <prvAddTaskToStackMonitor+0x4a>
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   18fce:	68bb      	ldr	r3, [r7, #8]
   18fd0:	3301      	adds	r3, #1
   18fd2:	60bb      	str	r3, [r7, #8]
   18fd4:	68bb      	ldr	r3, [r7, #8]
   18fd6:	2b09      	cmp	r3, #9
   18fd8:	dde3      	ble.n	18fa2 <prvAddTaskToStackMonitor+0x12>
		}
	}

	if (foundEmptySlot == 0)
   18fda:	68fb      	ldr	r3, [r7, #12]
   18fdc:	2b00      	cmp	r3, #0
   18fde:	d104      	bne.n	18fea <prvAddTaskToStackMonitor+0x5a>
	{
		tasksNotIncluded++;
   18fe0:	4b05      	ldr	r3, [pc, #20]	; (18ff8 <prvAddTaskToStackMonitor+0x68>)
   18fe2:	681b      	ldr	r3, [r3, #0]
   18fe4:	1c5a      	adds	r2, r3, #1
   18fe6:	4b04      	ldr	r3, [pc, #16]	; (18ff8 <prvAddTaskToStackMonitor+0x68>)
   18fe8:	601a      	str	r2, [r3, #0]
	}
}
   18fea:	46c0      	nop			; (mov r8, r8)
   18fec:	46bd      	mov	sp, r7
   18fee:	b004      	add	sp, #16
   18ff0:	bd80      	pop	{r7, pc}
   18ff2:	46c0      	nop			; (mov r8, r8)
   18ff4:	20000ce0 	.word	0x20000ce0
   18ff8:	20000d30 	.word	0x20000d30

00018ffc <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
   18ffc:	b590      	push	{r4, r7, lr}
   18ffe:	b085      	sub	sp, #20
   19000:	af00      	add	r7, sp, #0
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
   19002:	2300      	movs	r3, #0
   19004:	60fb      	str	r3, [r7, #12]
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
   19006:	4b2b      	ldr	r3, [pc, #172]	; (190b4 <prvReportStackUsage+0xb8>)
   19008:	681b      	ldr	r3, [r3, #0]
   1900a:	60bb      	str	r3, [r7, #8]
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
   1900c:	4b29      	ldr	r3, [pc, #164]	; (190b4 <prvReportStackUsage+0xb8>)
   1900e:	681a      	ldr	r2, [r3, #0]
   19010:	4b29      	ldr	r3, [pc, #164]	; (190b8 <prvReportStackUsage+0xbc>)
   19012:	00d2      	lsls	r2, r2, #3
   19014:	58d3      	ldr	r3, [r2, r3]
   19016:	2b00      	cmp	r3, #0
   19018:	d035      	beq.n	19086 <prvReportStackUsage+0x8a>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
   1901a:	4b26      	ldr	r3, [pc, #152]	; (190b4 <prvReportStackUsage+0xb8>)
   1901c:	681a      	ldr	r2, [r3, #0]
   1901e:	4b26      	ldr	r3, [pc, #152]	; (190b8 <prvReportStackUsage+0xbc>)
   19020:	00d2      	lsls	r2, r2, #3
   19022:	58d3      	ldr	r3, [r2, r3]
   19024:	0018      	movs	r0, r3
   19026:	4b25      	ldr	r3, [pc, #148]	; (190bc <prvReportStackUsage+0xc0>)
   19028:	4798      	blx	r3
   1902a:	0003      	movs	r3, r0
   1902c:	607b      	str	r3, [r7, #4]

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
   1902e:	4b21      	ldr	r3, [pc, #132]	; (190b4 <prvReportStackUsage+0xb8>)
   19030:	681b      	ldr	r3, [r3, #0]
   19032:	4a21      	ldr	r2, [pc, #132]	; (190b8 <prvReportStackUsage+0xbc>)
   19034:	00db      	lsls	r3, r3, #3
   19036:	18d3      	adds	r3, r2, r3
   19038:	3304      	adds	r3, #4
   1903a:	681a      	ldr	r2, [r3, #0]
   1903c:	687b      	ldr	r3, [r7, #4]
   1903e:	429a      	cmp	r2, r3
   19040:	d907      	bls.n	19052 <prvReportStackUsage+0x56>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
   19042:	4b1c      	ldr	r3, [pc, #112]	; (190b4 <prvReportStackUsage+0xb8>)
   19044:	681b      	ldr	r3, [r3, #0]
   19046:	4a1c      	ldr	r2, [pc, #112]	; (190b8 <prvReportStackUsage+0xbc>)
   19048:	00db      	lsls	r3, r3, #3
   1904a:	18d3      	adds	r3, r2, r3
   1904c:	3304      	adds	r3, #4
   1904e:	687a      	ldr	r2, [r7, #4]
   19050:	601a      	str	r2, [r3, #0]

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
   19052:	4b18      	ldr	r3, [pc, #96]	; (190b4 <prvReportStackUsage+0xb8>)
   19054:	681a      	ldr	r2, [r3, #0]
   19056:	4b18      	ldr	r3, [pc, #96]	; (190b8 <prvReportStackUsage+0xbc>)
   19058:	00d2      	lsls	r2, r2, #3
   1905a:	58d3      	ldr	r3, [r2, r3]
   1905c:	0018      	movs	r0, r3
   1905e:	4b18      	ldr	r3, [pc, #96]	; (190c0 <prvReportStackUsage+0xc4>)
   19060:	4798      	blx	r3
   19062:	0003      	movs	r3, r0
   19064:	b2db      	uxtb	r3, r3
   19066:	0019      	movs	r1, r3
   19068:	4b12      	ldr	r3, [pc, #72]	; (190b4 <prvReportStackUsage+0xb8>)
   1906a:	681b      	ldr	r3, [r3, #0]
   1906c:	4a12      	ldr	r2, [pc, #72]	; (190b8 <prvReportStackUsage+0xbc>)
   1906e:	00db      	lsls	r3, r3, #3
   19070:	18d3      	adds	r3, r2, r3
   19072:	3304      	adds	r3, #4
   19074:	681b      	ldr	r3, [r3, #0]
   19076:	000a      	movs	r2, r1
   19078:	2103      	movs	r1, #3
   1907a:	20ea      	movs	r0, #234	; 0xea
   1907c:	4c11      	ldr	r4, [pc, #68]	; (190c4 <prvReportStackUsage+0xc8>)
   1907e:	47a0      	blx	r4
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
   19080:	68fb      	ldr	r3, [r7, #12]
   19082:	3301      	adds	r3, #1
   19084:	60fb      	str	r3, [r7, #12]
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
   19086:	4b0b      	ldr	r3, [pc, #44]	; (190b4 <prvReportStackUsage+0xb8>)
   19088:	681b      	ldr	r3, [r3, #0]
   1908a:	1c5a      	adds	r2, r3, #1
   1908c:	4b0e      	ldr	r3, [pc, #56]	; (190c8 <prvReportStackUsage+0xcc>)
   1908e:	210a      	movs	r1, #10
   19090:	0010      	movs	r0, r2
   19092:	4798      	blx	r3
   19094:	000b      	movs	r3, r1
   19096:	001a      	movs	r2, r3
   19098:	4b06      	ldr	r3, [pc, #24]	; (190b4 <prvReportStackUsage+0xb8>)
   1909a:	601a      	str	r2, [r3, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
   1909c:	68fb      	ldr	r3, [r7, #12]
   1909e:	2b00      	cmp	r3, #0
   190a0:	dc04      	bgt.n	190ac <prvReportStackUsage+0xb0>
   190a2:	4b04      	ldr	r3, [pc, #16]	; (190b4 <prvReportStackUsage+0xb8>)
   190a4:	681a      	ldr	r2, [r3, #0]
   190a6:	68bb      	ldr	r3, [r7, #8]
   190a8:	429a      	cmp	r2, r3
   190aa:	d1af      	bne.n	1900c <prvReportStackUsage+0x10>
}
   190ac:	46c0      	nop			; (mov r8, r8)
   190ae:	46bd      	mov	sp, r7
   190b0:	b005      	add	sp, #20
   190b2:	bd90      	pop	{r4, r7, pc}
   190b4:	20000d34 	.word	0x20000d34
   190b8:	20000ce0 	.word	0x20000ce0
   190bc:	0001da91 	.word	0x0001da91
   190c0:	00018e11 	.word	0x00018e11
   190c4:	00019959 	.word	0x00019959
   190c8:	000338f5 	.word	0x000338f5

000190cc <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
   190cc:	b580      	push	{r7, lr}
   190ce:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
   190d0:	4b02      	ldr	r3, [pc, #8]	; (190dc <prvTraceGetCurrentTaskHandle+0x10>)
   190d2:	4798      	blx	r3
   190d4:	0003      	movs	r3, r0
}
   190d6:	0018      	movs	r0, r3
   190d8:	46bd      	mov	sp, r7
   190da:	bd80      	pop	{r7, pc}
   190dc:	0001db3d 	.word	0x0001db3d

000190e0 <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
   190e0:	b590      	push	{r4, r7, lr}
   190e2:	b085      	sub	sp, #20
   190e4:	af02      	add	r7, sp, #8
   190e6:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
   190e8:	4b14      	ldr	r3, [pc, #80]	; (1913c <vTraceEnable+0x5c>)
   190ea:	4798      	blx	r3

	if (startOption == TRC_START)
   190ec:	687b      	ldr	r3, [r7, #4]
   190ee:	2b01      	cmp	r3, #1
   190f0:	d102      	bne.n	190f8 <vTraceEnable+0x18>
	{
		vTraceStart();
   190f2:	4b13      	ldr	r3, [pc, #76]	; (19140 <vTraceEnable+0x60>)
   190f4:	4798      	blx	r3
   190f6:	e00e      	b.n	19116 <vTraceEnable+0x36>
	}
	else if (startOption == TRC_START_AWAIT_HOST)
   190f8:	687b      	ldr	r3, [r7, #4]
   190fa:	2b02      	cmp	r3, #2
   190fc:	d104      	bne.n	19108 <vTraceEnable+0x28>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
   190fe:	4b11      	ldr	r3, [pc, #68]	; (19144 <vTraceEnable+0x64>)
   19100:	0018      	movs	r0, r3
   19102:	4b11      	ldr	r3, [pc, #68]	; (19148 <vTraceEnable+0x68>)
   19104:	4798      	blx	r3
   19106:	e006      	b.n	19116 <vTraceEnable+0x36>
	}
	else if (startOption != TRC_INIT)
   19108:	687b      	ldr	r3, [r7, #4]
   1910a:	2b00      	cmp	r3, #0
   1910c:	d003      	beq.n	19116 <vTraceEnable+0x36>
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
   1910e:	4b0f      	ldr	r3, [pc, #60]	; (1914c <vTraceEnable+0x6c>)
   19110:	0018      	movs	r0, r3
   19112:	4b0d      	ldr	r3, [pc, #52]	; (19148 <vTraceEnable+0x68>)
   19114:	4798      	blx	r3
	}

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	/* Creates the TzCtrl task - reports unsed stack */
	if (HandleTzCtrl == NULL)
   19116:	4b0e      	ldr	r3, [pc, #56]	; (19150 <vTraceEnable+0x70>)
   19118:	681b      	ldr	r3, [r3, #0]
   1911a:	2b00      	cmp	r3, #0
   1911c:	d10a      	bne.n	19134 <vTraceEnable+0x54>
	{
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
#else /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
   1911e:	2396      	movs	r3, #150	; 0x96
   19120:	005a      	lsls	r2, r3, #1
   19122:	490c      	ldr	r1, [pc, #48]	; (19154 <vTraceEnable+0x74>)
   19124:	480c      	ldr	r0, [pc, #48]	; (19158 <vTraceEnable+0x78>)
   19126:	4b0a      	ldr	r3, [pc, #40]	; (19150 <vTraceEnable+0x70>)
   19128:	9301      	str	r3, [sp, #4]
   1912a:	2304      	movs	r3, #4
   1912c:	9300      	str	r3, [sp, #0]
   1912e:	2300      	movs	r3, #0
   19130:	4c0a      	ldr	r4, [pc, #40]	; (1915c <vTraceEnable+0x7c>)
   19132:	47a0      	blx	r4
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
   19134:	46c0      	nop			; (mov r8, r8)
   19136:	46bd      	mov	sp, r7
   19138:	b003      	add	sp, #12
   1913a:	bd90      	pop	{r4, r7, pc}
   1913c:	0001a025 	.word	0x0001a025
   19140:	0001957d 	.word	0x0001957d
   19144:	00037ca4 	.word	0x00037ca4
   19148:	0001a6cd 	.word	0x0001a6cd
   1914c:	00037ce4 	.word	0x00037ce4
   19150:	20000cdc 	.word	0x20000cdc
   19154:	00037d18 	.word	0x00037d18
   19158:	00019161 	.word	0x00019161
   1915c:	0001ca95 	.word	0x0001ca95

00019160 <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
   19160:	b580      	push	{r7, lr}
   19162:	b082      	sub	sp, #8
   19164:	af00      	add	r7, sp, #0
   19166:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
   19168:	4b04      	ldr	r3, [pc, #16]	; (1917c <TzCtrl+0x1c>)
   1916a:	4798      	blx	r3
   1916c:	1e03      	subs	r3, r0, #0
   1916e:	d001      	beq.n	19174 <TzCtrl+0x14>
		{
			prvReportStackUsage();
   19170:	4b03      	ldr	r3, [pc, #12]	; (19180 <TzCtrl+0x20>)
   19172:	4798      	blx	r3
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
   19174:	2004      	movs	r0, #4
   19176:	4b03      	ldr	r3, [pc, #12]	; (19184 <TzCtrl+0x24>)
   19178:	4798      	blx	r3
		if (xTraceIsRecordingEnabled())
   1917a:	e7f5      	b.n	19168 <TzCtrl+0x8>
   1917c:	000195c1 	.word	0x000195c1
   19180:	00018ffd 	.word	0x00018ffd
   19184:	0001ce31 	.word	0x0001ce31

00019188 <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
   19188:	b580      	push	{r7, lr}
   1918a:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
   1918c:	4b60      	ldr	r3, [pc, #384]	; (19310 <vTraceInitObjectPropertyTable+0x188>)
   1918e:	681b      	ldr	r3, [r3, #0]
   19190:	2209      	movs	r2, #9
   19192:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
   19194:	4b5e      	ldr	r3, [pc, #376]	; (19310 <vTraceInitObjectPropertyTable+0x188>)
   19196:	681b      	ldr	r3, [r3, #0]
   19198:	2264      	movs	r2, #100	; 0x64
   1919a:	210a      	movs	r1, #10
   1919c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
   1919e:	4b5c      	ldr	r3, [pc, #368]	; (19310 <vTraceInitObjectPropertyTable+0x188>)
   191a0:	681b      	ldr	r3, [r3, #0]
   191a2:	2265      	movs	r2, #101	; 0x65
   191a4:	210a      	movs	r1, #10
   191a6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
   191a8:	4b59      	ldr	r3, [pc, #356]	; (19310 <vTraceInitObjectPropertyTable+0x188>)
   191aa:	681b      	ldr	r3, [r3, #0]
   191ac:	2266      	movs	r2, #102	; 0x66
   191ae:	210a      	movs	r1, #10
   191b0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
   191b2:	4b57      	ldr	r3, [pc, #348]	; (19310 <vTraceInitObjectPropertyTable+0x188>)
   191b4:	681b      	ldr	r3, [r3, #0]
   191b6:	2267      	movs	r2, #103	; 0x67
   191b8:	210f      	movs	r1, #15
   191ba:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
   191bc:	4b54      	ldr	r3, [pc, #336]	; (19310 <vTraceInitObjectPropertyTable+0x188>)
   191be:	681b      	ldr	r3, [r3, #0]
   191c0:	2268      	movs	r2, #104	; 0x68
   191c2:	2105      	movs	r1, #5
   191c4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
   191c6:	4b52      	ldr	r3, [pc, #328]	; (19310 <vTraceInitObjectPropertyTable+0x188>)
   191c8:	681b      	ldr	r3, [r3, #0]
   191ca:	2269      	movs	r2, #105	; 0x69
   191cc:	2105      	movs	r1, #5
   191ce:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
   191d0:	4b4f      	ldr	r3, [pc, #316]	; (19310 <vTraceInitObjectPropertyTable+0x188>)
   191d2:	681b      	ldr	r3, [r3, #0]
   191d4:	226a      	movs	r2, #106	; 0x6a
   191d6:	2105      	movs	r1, #5
   191d8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
   191da:	4b4d      	ldr	r3, [pc, #308]	; (19310 <vTraceInitObjectPropertyTable+0x188>)
   191dc:	681b      	ldr	r3, [r3, #0]
   191de:	226b      	movs	r2, #107	; 0x6b
   191e0:	2105      	movs	r1, #5
   191e2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
   191e4:	4b4a      	ldr	r3, [pc, #296]	; (19310 <vTraceInitObjectPropertyTable+0x188>)
   191e6:	681b      	ldr	r3, [r3, #0]
   191e8:	226c      	movs	r2, #108	; 0x6c
   191ea:	2105      	movs	r1, #5
   191ec:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
   191ee:	4b48      	ldr	r3, [pc, #288]	; (19310 <vTraceInitObjectPropertyTable+0x188>)
   191f0:	681b      	ldr	r3, [r3, #0]
   191f2:	2270      	movs	r2, #112	; 0x70
   191f4:	210f      	movs	r1, #15
   191f6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
   191f8:	4b45      	ldr	r3, [pc, #276]	; (19310 <vTraceInitObjectPropertyTable+0x188>)
   191fa:	681b      	ldr	r3, [r3, #0]
   191fc:	2271      	movs	r2, #113	; 0x71
   191fe:	210f      	movs	r1, #15
   19200:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
   19202:	4b43      	ldr	r3, [pc, #268]	; (19310 <vTraceInitObjectPropertyTable+0x188>)
   19204:	681b      	ldr	r3, [r3, #0]
   19206:	2272      	movs	r2, #114	; 0x72
   19208:	210f      	movs	r1, #15
   1920a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
   1920c:	4b40      	ldr	r3, [pc, #256]	; (19310 <vTraceInitObjectPropertyTable+0x188>)
   1920e:	681b      	ldr	r3, [r3, #0]
   19210:	2273      	movs	r2, #115	; 0x73
   19212:	210f      	movs	r1, #15
   19214:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
   19216:	4b3e      	ldr	r3, [pc, #248]	; (19310 <vTraceInitObjectPropertyTable+0x188>)
   19218:	681b      	ldr	r3, [r3, #0]
   1921a:	2274      	movs	r2, #116	; 0x74
   1921c:	210f      	movs	r1, #15
   1921e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
   19220:	4b3b      	ldr	r3, [pc, #236]	; (19310 <vTraceInitObjectPropertyTable+0x188>)
   19222:	681b      	ldr	r3, [r3, #0]
   19224:	2275      	movs	r2, #117	; 0x75
   19226:	210f      	movs	r1, #15
   19228:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
   1922a:	4b39      	ldr	r3, [pc, #228]	; (19310 <vTraceInitObjectPropertyTable+0x188>)
   1922c:	681b      	ldr	r3, [r3, #0]
   1922e:	2276      	movs	r2, #118	; 0x76
   19230:	210f      	movs	r1, #15
   19232:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
   19234:	4b36      	ldr	r3, [pc, #216]	; (19310 <vTraceInitObjectPropertyTable+0x188>)
   19236:	681b      	ldr	r3, [r3, #0]
   19238:	2277      	movs	r2, #119	; 0x77
   1923a:	210f      	movs	r1, #15
   1923c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
   1923e:	4b34      	ldr	r3, [pc, #208]	; (19310 <vTraceInitObjectPropertyTable+0x188>)
   19240:	681b      	ldr	r3, [r3, #0]
   19242:	2278      	movs	r2, #120	; 0x78
   19244:	210f      	movs	r1, #15
   19246:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
   19248:	4b31      	ldr	r3, [pc, #196]	; (19310 <vTraceInitObjectPropertyTable+0x188>)
   1924a:	681b      	ldr	r3, [r3, #0]
   1924c:	227c      	movs	r2, #124	; 0x7c
   1924e:	2110      	movs	r1, #16
   19250:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
   19252:	4b2f      	ldr	r3, [pc, #188]	; (19310 <vTraceInitObjectPropertyTable+0x188>)
   19254:	681b      	ldr	r3, [r3, #0]
   19256:	227d      	movs	r2, #125	; 0x7d
   19258:	2110      	movs	r1, #16
   1925a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
   1925c:	4b2c      	ldr	r3, [pc, #176]	; (19310 <vTraceInitObjectPropertyTable+0x188>)
   1925e:	681b      	ldr	r3, [r3, #0]
   19260:	227e      	movs	r2, #126	; 0x7e
   19262:	2110      	movs	r1, #16
   19264:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
   19266:	4b2a      	ldr	r3, [pc, #168]	; (19310 <vTraceInitObjectPropertyTable+0x188>)
   19268:	681b      	ldr	r3, [r3, #0]
   1926a:	227f      	movs	r2, #127	; 0x7f
   1926c:	2113      	movs	r1, #19
   1926e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
   19270:	4b27      	ldr	r3, [pc, #156]	; (19310 <vTraceInitObjectPropertyTable+0x188>)
   19272:	681b      	ldr	r3, [r3, #0]
   19274:	2280      	movs	r2, #128	; 0x80
   19276:	2111      	movs	r1, #17
   19278:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
   1927a:	4b25      	ldr	r3, [pc, #148]	; (19310 <vTraceInitObjectPropertyTable+0x188>)
   1927c:	681b      	ldr	r3, [r3, #0]
   1927e:	2281      	movs	r2, #129	; 0x81
   19280:	2110      	movs	r1, #16
   19282:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
   19284:	4b22      	ldr	r3, [pc, #136]	; (19310 <vTraceInitObjectPropertyTable+0x188>)
   19286:	681b      	ldr	r3, [r3, #0]
   19288:	2282      	movs	r2, #130	; 0x82
   1928a:	2113      	movs	r1, #19
   1928c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
   1928e:	4b20      	ldr	r3, [pc, #128]	; (19310 <vTraceInitObjectPropertyTable+0x188>)
   19290:	681b      	ldr	r3, [r3, #0]
   19292:	2283      	movs	r2, #131	; 0x83
   19294:	2113      	movs	r1, #19
   19296:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
   19298:	4b1d      	ldr	r3, [pc, #116]	; (19310 <vTraceInitObjectPropertyTable+0x188>)
   1929a:	681b      	ldr	r3, [r3, #0]
   1929c:	2284      	movs	r2, #132	; 0x84
   1929e:	2113      	movs	r1, #19
   192a0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
   192a2:	4b1b      	ldr	r3, [pc, #108]	; (19310 <vTraceInitObjectPropertyTable+0x188>)
   192a4:	681b      	ldr	r3, [r3, #0]
   192a6:	2288      	movs	r2, #136	; 0x88
   192a8:	2100      	movs	r1, #0
   192aa:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
   192ac:	4b18      	ldr	r3, [pc, #96]	; (19310 <vTraceInitObjectPropertyTable+0x188>)
   192ae:	681b      	ldr	r3, [r3, #0]
   192b0:	228a      	movs	r2, #138	; 0x8a
   192b2:	21a0      	movs	r1, #160	; 0xa0
   192b4:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
   192b6:	4b16      	ldr	r3, [pc, #88]	; (19310 <vTraceInitObjectPropertyTable+0x188>)
   192b8:	681b      	ldr	r3, [r3, #0]
   192ba:	228c      	movs	r2, #140	; 0x8c
   192bc:	21a0      	movs	r1, #160	; 0xa0
   192be:	0049      	lsls	r1, r1, #1
   192c0:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
   192c2:	4b13      	ldr	r3, [pc, #76]	; (19310 <vTraceInitObjectPropertyTable+0x188>)
   192c4:	681b      	ldr	r3, [r3, #0]
   192c6:	228e      	movs	r2, #142	; 0x8e
   192c8:	21f0      	movs	r1, #240	; 0xf0
   192ca:	0049      	lsls	r1, r1, #1
   192cc:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
   192ce:	4b10      	ldr	r3, [pc, #64]	; (19310 <vTraceInitObjectPropertyTable+0x188>)
   192d0:	681b      	ldr	r3, [r3, #0]
   192d2:	2290      	movs	r2, #144	; 0x90
   192d4:	490f      	ldr	r1, [pc, #60]	; (19314 <vTraceInitObjectPropertyTable+0x18c>)
   192d6:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
   192d8:	4b0d      	ldr	r3, [pc, #52]	; (19310 <vTraceInitObjectPropertyTable+0x188>)
   192da:	681b      	ldr	r3, [r3, #0]
   192dc:	2292      	movs	r2, #146	; 0x92
   192de:	490e      	ldr	r1, [pc, #56]	; (19318 <vTraceInitObjectPropertyTable+0x190>)
   192e0:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
   192e2:	4b0b      	ldr	r3, [pc, #44]	; (19310 <vTraceInitObjectPropertyTable+0x188>)
   192e4:	681b      	ldr	r3, [r3, #0]
   192e6:	2294      	movs	r2, #148	; 0x94
   192e8:	490c      	ldr	r1, [pc, #48]	; (1931c <vTraceInitObjectPropertyTable+0x194>)
   192ea:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
   192ec:	4b08      	ldr	r3, [pc, #32]	; (19310 <vTraceInitObjectPropertyTable+0x188>)
   192ee:	681b      	ldr	r3, [r3, #0]
   192f0:	2296      	movs	r2, #150	; 0x96
   192f2:	490b      	ldr	r1, [pc, #44]	; (19320 <vTraceInitObjectPropertyTable+0x198>)
   192f4:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
   192f6:	4b06      	ldr	r3, [pc, #24]	; (19310 <vTraceInitObjectPropertyTable+0x188>)
   192f8:	681b      	ldr	r3, [r3, #0]
   192fa:	2298      	movs	r2, #152	; 0x98
   192fc:	218c      	movs	r1, #140	; 0x8c
   192fe:	00c9      	lsls	r1, r1, #3
   19300:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
   19302:	4b03      	ldr	r3, [pc, #12]	; (19310 <vTraceInitObjectPropertyTable+0x188>)
   19304:	681b      	ldr	r3, [r3, #0]
   19306:	4a07      	ldr	r2, [pc, #28]	; (19324 <vTraceInitObjectPropertyTable+0x19c>)
   19308:	661a      	str	r2, [r3, #96]	; 0x60
}
   1930a:	46c0      	nop			; (mov r8, r8)
   1930c:	46bd      	mov	sp, r7
   1930e:	bd80      	pop	{r7, pc}
   19310:	20000df4 	.word	0x20000df4
   19314:	000002fd 	.word	0x000002fd
   19318:	00000352 	.word	0x00000352
   1931c:	000003a2 	.word	0x000003a2
   19320:	00000401 	.word	0x00000401
   19324:	000004bf 	.word	0x000004bf

00019328 <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
   19328:	b580      	push	{r7, lr}
   1932a:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
   1932c:	4b2e      	ldr	r3, [pc, #184]	; (193e8 <vTraceInitObjectHandleStack+0xc0>)
   1932e:	2200      	movs	r2, #0
   19330:	825a      	strh	r2, [r3, #18]
   19332:	4b2d      	ldr	r3, [pc, #180]	; (193e8 <vTraceInitObjectHandleStack+0xc0>)
   19334:	8a5a      	ldrh	r2, [r3, #18]
   19336:	4b2c      	ldr	r3, [pc, #176]	; (193e8 <vTraceInitObjectHandleStack+0xc0>)
   19338:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
   1933a:	4b2b      	ldr	r3, [pc, #172]	; (193e8 <vTraceInitObjectHandleStack+0xc0>)
   1933c:	220a      	movs	r2, #10
   1933e:	829a      	strh	r2, [r3, #20]
   19340:	4b29      	ldr	r3, [pc, #164]	; (193e8 <vTraceInitObjectHandleStack+0xc0>)
   19342:	8a9a      	ldrh	r2, [r3, #20]
   19344:	4b28      	ldr	r3, [pc, #160]	; (193e8 <vTraceInitObjectHandleStack+0xc0>)
   19346:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
   19348:	4b27      	ldr	r3, [pc, #156]	; (193e8 <vTraceInitObjectHandleStack+0xc0>)
   1934a:	2214      	movs	r2, #20
   1934c:	82da      	strh	r2, [r3, #22]
   1934e:	4b26      	ldr	r3, [pc, #152]	; (193e8 <vTraceInitObjectHandleStack+0xc0>)
   19350:	8ada      	ldrh	r2, [r3, #22]
   19352:	4b25      	ldr	r3, [pc, #148]	; (193e8 <vTraceInitObjectHandleStack+0xc0>)
   19354:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
   19356:	4b24      	ldr	r3, [pc, #144]	; (193e8 <vTraceInitObjectHandleStack+0xc0>)
   19358:	221e      	movs	r2, #30
   1935a:	831a      	strh	r2, [r3, #24]
   1935c:	4b22      	ldr	r3, [pc, #136]	; (193e8 <vTraceInitObjectHandleStack+0xc0>)
   1935e:	8b1a      	ldrh	r2, [r3, #24]
   19360:	4b21      	ldr	r3, [pc, #132]	; (193e8 <vTraceInitObjectHandleStack+0xc0>)
   19362:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
   19364:	4b20      	ldr	r3, [pc, #128]	; (193e8 <vTraceInitObjectHandleStack+0xc0>)
   19366:	222d      	movs	r2, #45	; 0x2d
   19368:	835a      	strh	r2, [r3, #26]
   1936a:	4b1f      	ldr	r3, [pc, #124]	; (193e8 <vTraceInitObjectHandleStack+0xc0>)
   1936c:	8b5a      	ldrh	r2, [r3, #26]
   1936e:	4b1e      	ldr	r3, [pc, #120]	; (193e8 <vTraceInitObjectHandleStack+0xc0>)
   19370:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
   19372:	4b1d      	ldr	r3, [pc, #116]	; (193e8 <vTraceInitObjectHandleStack+0xc0>)
   19374:	2232      	movs	r2, #50	; 0x32
   19376:	839a      	strh	r2, [r3, #28]
   19378:	4b1b      	ldr	r3, [pc, #108]	; (193e8 <vTraceInitObjectHandleStack+0xc0>)
   1937a:	8b9a      	ldrh	r2, [r3, #28]
   1937c:	4b1a      	ldr	r3, [pc, #104]	; (193e8 <vTraceInitObjectHandleStack+0xc0>)
   1937e:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
   19380:	4b19      	ldr	r3, [pc, #100]	; (193e8 <vTraceInitObjectHandleStack+0xc0>)
   19382:	2237      	movs	r2, #55	; 0x37
   19384:	83da      	strh	r2, [r3, #30]
   19386:	4b18      	ldr	r3, [pc, #96]	; (193e8 <vTraceInitObjectHandleStack+0xc0>)
   19388:	8bda      	ldrh	r2, [r3, #30]
   1938a:	4b17      	ldr	r3, [pc, #92]	; (193e8 <vTraceInitObjectHandleStack+0xc0>)
   1938c:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
   1938e:	4b16      	ldr	r3, [pc, #88]	; (193e8 <vTraceInitObjectHandleStack+0xc0>)
   19390:	223c      	movs	r2, #60	; 0x3c
   19392:	841a      	strh	r2, [r3, #32]
   19394:	4b14      	ldr	r3, [pc, #80]	; (193e8 <vTraceInitObjectHandleStack+0xc0>)
   19396:	8c1a      	ldrh	r2, [r3, #32]
   19398:	4b13      	ldr	r3, [pc, #76]	; (193e8 <vTraceInitObjectHandleStack+0xc0>)
   1939a:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
   1939c:	4b12      	ldr	r3, [pc, #72]	; (193e8 <vTraceInitObjectHandleStack+0xc0>)
   1939e:	2241      	movs	r2, #65	; 0x41
   193a0:	845a      	strh	r2, [r3, #34]	; 0x22
   193a2:	4b11      	ldr	r3, [pc, #68]	; (193e8 <vTraceInitObjectHandleStack+0xc0>)
   193a4:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
   193a6:	4b10      	ldr	r3, [pc, #64]	; (193e8 <vTraceInitObjectHandleStack+0xc0>)
   193a8:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
   193aa:	4b0f      	ldr	r3, [pc, #60]	; (193e8 <vTraceInitObjectHandleStack+0xc0>)
   193ac:	2209      	movs	r2, #9
   193ae:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
   193b0:	4b0d      	ldr	r3, [pc, #52]	; (193e8 <vTraceInitObjectHandleStack+0xc0>)
   193b2:	2213      	movs	r2, #19
   193b4:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
   193b6:	4b0c      	ldr	r3, [pc, #48]	; (193e8 <vTraceInitObjectHandleStack+0xc0>)
   193b8:	221d      	movs	r2, #29
   193ba:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
   193bc:	4b0a      	ldr	r3, [pc, #40]	; (193e8 <vTraceInitObjectHandleStack+0xc0>)
   193be:	222c      	movs	r2, #44	; 0x2c
   193c0:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
   193c2:	4b09      	ldr	r3, [pc, #36]	; (193e8 <vTraceInitObjectHandleStack+0xc0>)
   193c4:	2231      	movs	r2, #49	; 0x31
   193c6:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
   193c8:	4b07      	ldr	r3, [pc, #28]	; (193e8 <vTraceInitObjectHandleStack+0xc0>)
   193ca:	2236      	movs	r2, #54	; 0x36
   193cc:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
   193ce:	4b06      	ldr	r3, [pc, #24]	; (193e8 <vTraceInitObjectHandleStack+0xc0>)
   193d0:	223b      	movs	r2, #59	; 0x3b
   193d2:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
   193d4:	4b04      	ldr	r3, [pc, #16]	; (193e8 <vTraceInitObjectHandleStack+0xc0>)
   193d6:	2240      	movs	r2, #64	; 0x40
   193d8:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
   193da:	4b03      	ldr	r3, [pc, #12]	; (193e8 <vTraceInitObjectHandleStack+0xc0>)
   193dc:	2245      	movs	r2, #69	; 0x45
   193de:	869a      	strh	r2, [r3, #52]	; 0x34
}
   193e0:	46c0      	nop			; (mov r8, r8)
   193e2:	46bd      	mov	sp, r7
   193e4:	bd80      	pop	{r7, pc}
   193e6:	46c0      	nop			; (mov r8, r8)
   193e8:	20000d64 	.word	0x20000d64

000193ec <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
   193ec:	b580      	push	{r7, lr}
   193ee:	b082      	sub	sp, #8
   193f0:	af00      	add	r7, sp, #0
   193f2:	0002      	movs	r2, r0
   193f4:	1dfb      	adds	r3, r7, #7
   193f6:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
   193f8:	1dfb      	adds	r3, r7, #7
   193fa:	781b      	ldrb	r3, [r3, #0]
   193fc:	2b08      	cmp	r3, #8
   193fe:	d816      	bhi.n	1942e <pszTraceGetErrorNotEnoughHandles+0x42>
   19400:	009a      	lsls	r2, r3, #2
   19402:	4b0d      	ldr	r3, [pc, #52]	; (19438 <pszTraceGetErrorNotEnoughHandles+0x4c>)
   19404:	18d3      	adds	r3, r2, r3
   19406:	681b      	ldr	r3, [r3, #0]
   19408:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
   1940a:	4b0c      	ldr	r3, [pc, #48]	; (1943c <pszTraceGetErrorNotEnoughHandles+0x50>)
   1940c:	e010      	b.n	19430 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
   1940e:	4b0c      	ldr	r3, [pc, #48]	; (19440 <pszTraceGetErrorNotEnoughHandles+0x54>)
   19410:	e00e      	b.n	19430 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
   19412:	4b0c      	ldr	r3, [pc, #48]	; (19444 <pszTraceGetErrorNotEnoughHandles+0x58>)
   19414:	e00c      	b.n	19430 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
   19416:	4b0c      	ldr	r3, [pc, #48]	; (19448 <pszTraceGetErrorNotEnoughHandles+0x5c>)
   19418:	e00a      	b.n	19430 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
   1941a:	4b0c      	ldr	r3, [pc, #48]	; (1944c <pszTraceGetErrorNotEnoughHandles+0x60>)
   1941c:	e008      	b.n	19430 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
   1941e:	4b0c      	ldr	r3, [pc, #48]	; (19450 <pszTraceGetErrorNotEnoughHandles+0x64>)
   19420:	e006      	b.n	19430 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
   19422:	4b0c      	ldr	r3, [pc, #48]	; (19454 <pszTraceGetErrorNotEnoughHandles+0x68>)
   19424:	e004      	b.n	19430 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
   19426:	4b0c      	ldr	r3, [pc, #48]	; (19458 <pszTraceGetErrorNotEnoughHandles+0x6c>)
   19428:	e002      	b.n	19430 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
   1942a:	4b0c      	ldr	r3, [pc, #48]	; (1945c <pszTraceGetErrorNotEnoughHandles+0x70>)
   1942c:	e000      	b.n	19430 <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
   1942e:	4b0c      	ldr	r3, [pc, #48]	; (19460 <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
   19430:	0018      	movs	r0, r3
   19432:	46bd      	mov	sp, r7
   19434:	b002      	add	sp, #8
   19436:	bd80      	pop	{r7, pc}
   19438:	00038020 	.word	0x00038020
   1943c:	00037d20 	.word	0x00037d20
   19440:	00037d68 	.word	0x00037d68
   19444:	00037db0 	.word	0x00037db0
   19448:	00037e04 	.word	0x00037e04
   1944c:	00037e50 	.word	0x00037e50
   19450:	00037e9c 	.word	0x00037e9c
   19454:	00037ee8 	.word	0x00037ee8
   19458:	00037f3c 	.word	0x00037f3c
   1945c:	00037f94 	.word	0x00037f94
   19460:	00037ff0 	.word	0x00037ff0

00019464 <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
   19464:	b590      	push	{r4, r7, lr}
   19466:	b087      	sub	sp, #28
   19468:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
   1946a:	2317      	movs	r3, #23
   1946c:	18fb      	adds	r3, r7, r3
   1946e:	2200      	movs	r2, #0
   19470:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == NULL)
   19472:	4b36      	ldr	r3, [pc, #216]	; (1954c <uiTraceStart+0xe8>)
   19474:	681b      	ldr	r3, [r3, #0]
   19476:	2b00      	cmp	r3, #0
   19478:	d10b      	bne.n	19492 <uiTraceStart+0x2e>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
   1947a:	4b34      	ldr	r3, [pc, #208]	; (1954c <uiTraceStart+0xe8>)
   1947c:	681b      	ldr	r3, [r3, #0]
   1947e:	2b00      	cmp	r3, #0
   19480:	d105      	bne.n	1948e <uiTraceStart+0x2a>
   19482:	4b33      	ldr	r3, [pc, #204]	; (19550 <uiTraceStart+0xec>)
   19484:	0018      	movs	r0, r3
   19486:	4b33      	ldr	r3, [pc, #204]	; (19554 <uiTraceStart+0xf0>)
   19488:	4798      	blx	r3
   1948a:	2300      	movs	r3, #0
   1948c:	e059      	b.n	19542 <uiTraceStart+0xde>
		return 0;
   1948e:	2300      	movs	r3, #0
   19490:	e057      	b.n	19542 <uiTraceStart+0xde>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
   19492:	4b2e      	ldr	r3, [pc, #184]	; (1954c <uiTraceStart+0xe8>)
   19494:	681b      	ldr	r3, [r3, #0]
   19496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19498:	2b01      	cmp	r3, #1
   1949a:	d101      	bne.n	194a0 <uiTraceStart+0x3c>
		return 1; /* Already running */
   1949c:	2301      	movs	r3, #1
   1949e:	e050      	b.n	19542 <uiTraceStart+0xde>

	if (traceErrorMessage == NULL)
   194a0:	4b2d      	ldr	r3, [pc, #180]	; (19558 <uiTraceStart+0xf4>)
   194a2:	681b      	ldr	r3, [r3, #0]
   194a4:	2b00      	cmp	r3, #0
   194a6:	d149      	bne.n	1953c <uiTraceStart+0xd8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   194a8:	f3ef 8310 	mrs	r3, PRIMASK
   194ac:	60bb      	str	r3, [r7, #8]
  return(result);
   194ae:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
   194b0:	613b      	str	r3, [r7, #16]
   194b2:	2301      	movs	r3, #1
   194b4:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   194b6:	68fb      	ldr	r3, [r7, #12]
   194b8:	f383 8810 	msr	PRIMASK, r3
   194bc:	4b27      	ldr	r3, [pc, #156]	; (1955c <uiTraceStart+0xf8>)
   194be:	681b      	ldr	r3, [r3, #0]
   194c0:	1c5a      	adds	r2, r3, #1
   194c2:	4b26      	ldr	r3, [pc, #152]	; (1955c <uiTraceStart+0xf8>)
   194c4:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
   194c6:	4b21      	ldr	r3, [pc, #132]	; (1954c <uiTraceStart+0xe8>)
   194c8:	681b      	ldr	r3, [r3, #0]
   194ca:	2201      	movs	r2, #1
   194cc:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
   194ce:	4b24      	ldr	r3, [pc, #144]	; (19560 <uiTraceStart+0xfc>)
   194d0:	4798      	blx	r3
   194d2:	0003      	movs	r3, r0
   194d4:	0018      	movs	r0, r3
   194d6:	4b23      	ldr	r3, [pc, #140]	; (19564 <uiTraceStart+0x100>)
   194d8:	4798      	blx	r3
   194da:	0003      	movs	r3, r0
   194dc:	001a      	movs	r2, r3
   194de:	2317      	movs	r3, #23
   194e0:	18fb      	adds	r3, r7, r3
   194e2:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
   194e4:	2317      	movs	r3, #23
   194e6:	18fb      	adds	r3, r7, r3
   194e8:	781b      	ldrb	r3, [r3, #0]
   194ea:	2b00      	cmp	r3, #0
   194ec:	d116      	bne.n	1951c <uiTraceStart+0xb8>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
   194ee:	2317      	movs	r3, #23
   194f0:	18fc      	adds	r4, r7, r3
   194f2:	2003      	movs	r0, #3
   194f4:	4b1c      	ldr	r3, [pc, #112]	; (19568 <uiTraceStart+0x104>)
   194f6:	4798      	blx	r3
   194f8:	0003      	movs	r3, r0
   194fa:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
   194fc:	4a1b      	ldr	r2, [pc, #108]	; (1956c <uiTraceStart+0x108>)
   194fe:	2317      	movs	r3, #23
   19500:	18fb      	adds	r3, r7, r3
   19502:	781b      	ldrb	r3, [r3, #0]
   19504:	0019      	movs	r1, r3
   19506:	2003      	movs	r0, #3
   19508:	4b19      	ldr	r3, [pc, #100]	; (19570 <uiTraceStart+0x10c>)
   1950a:	4798      	blx	r3

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
   1950c:	2317      	movs	r3, #23
   1950e:	18fb      	adds	r3, r7, r3
   19510:	781b      	ldrb	r3, [r3, #0]
   19512:	2200      	movs	r2, #0
   19514:	0019      	movs	r1, r3
   19516:	2003      	movs	r0, #3
   19518:	4b16      	ldr	r3, [pc, #88]	; (19574 <uiTraceStart+0x110>)
   1951a:	4798      	blx	r3
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
   1951c:	2317      	movs	r3, #23
   1951e:	18fb      	adds	r3, r7, r3
   19520:	781b      	ldrb	r3, [r3, #0]
   19522:	0018      	movs	r0, r3
   19524:	4b14      	ldr	r3, [pc, #80]	; (19578 <uiTraceStart+0x114>)
   19526:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
   19528:	4b0c      	ldr	r3, [pc, #48]	; (1955c <uiTraceStart+0xf8>)
   1952a:	681b      	ldr	r3, [r3, #0]
   1952c:	1e5a      	subs	r2, r3, #1
   1952e:	4b0b      	ldr	r3, [pc, #44]	; (1955c <uiTraceStart+0xf8>)
   19530:	601a      	str	r2, [r3, #0]
   19532:	693b      	ldr	r3, [r7, #16]
   19534:	607b      	str	r3, [r7, #4]
   19536:	687b      	ldr	r3, [r7, #4]
   19538:	f383 8810 	msr	PRIMASK, r3
	}

	return RecorderDataPtr->recorderActive;
   1953c:	4b03      	ldr	r3, [pc, #12]	; (1954c <uiTraceStart+0xe8>)
   1953e:	681b      	ldr	r3, [r3, #0]
   19540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   19542:	0018      	movs	r0, r3
   19544:	46bd      	mov	sp, r7
   19546:	b007      	add	sp, #28
   19548:	bd90      	pop	{r4, r7, pc}
   1954a:	46c0      	nop			; (mov r8, r8)
   1954c:	20000df4 	.word	0x20000df4
   19550:	00038044 	.word	0x00038044
   19554:	0001a6cd 	.word	0x0001a6cd
   19558:	20000d54 	.word	0x20000d54
   1955c:	20000d4c 	.word	0x20000d4c
   19560:	000190cd 	.word	0x000190cd
   19564:	00018e11 	.word	0x00018e11
   19568:	0001a3b1 	.word	0x0001a3b1
   1956c:	00038088 	.word	0x00038088
   19570:	0001a5e1 	.word	0x0001a5e1
   19574:	00019d45 	.word	0x00019d45
   19578:	00019c2d 	.word	0x00019c2d

0001957c <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
   1957c:	b580      	push	{r7, lr}
   1957e:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
   19580:	4b02      	ldr	r3, [pc, #8]	; (1958c <vTraceStart+0x10>)
   19582:	4798      	blx	r3
}
   19584:	46c0      	nop			; (mov r8, r8)
   19586:	46bd      	mov	sp, r7
   19588:	bd80      	pop	{r7, pc}
   1958a:	46c0      	nop			; (mov r8, r8)
   1958c:	00019465 	.word	0x00019465

00019590 <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
   19590:	b580      	push	{r7, lr}
   19592:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   19594:	4b08      	ldr	r3, [pc, #32]	; (195b8 <vTraceStop+0x28>)
   19596:	681b      	ldr	r3, [r3, #0]
   19598:	2b00      	cmp	r3, #0
   1959a:	d003      	beq.n	195a4 <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
   1959c:	4b06      	ldr	r3, [pc, #24]	; (195b8 <vTraceStop+0x28>)
   1959e:	681b      	ldr	r3, [r3, #0]
   195a0:	2200      	movs	r2, #0
   195a2:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
   195a4:	4b05      	ldr	r3, [pc, #20]	; (195bc <vTraceStop+0x2c>)
   195a6:	681b      	ldr	r3, [r3, #0]
   195a8:	2b00      	cmp	r3, #0
   195aa:	d002      	beq.n	195b2 <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
   195ac:	4b03      	ldr	r3, [pc, #12]	; (195bc <vTraceStop+0x2c>)
   195ae:	681b      	ldr	r3, [r3, #0]
   195b0:	4798      	blx	r3
	}
}
   195b2:	46c0      	nop			; (mov r8, r8)
   195b4:	46bd      	mov	sp, r7
   195b6:	bd80      	pop	{r7, pc}
   195b8:	20000df4 	.word	0x20000df4
   195bc:	20000d5c 	.word	0x20000d5c

000195c0 <xTraceIsRecordingEnabled>:
/*******************************************************************************
* xTraceIsRecordingEnabled
* Returns true (1) if the recorder is enabled (i.e. is recording), otherwise 0.
******************************************************************************/
int xTraceIsRecordingEnabled(void)
{
   195c0:	b580      	push	{r7, lr}
   195c2:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   195c4:	4b05      	ldr	r3, [pc, #20]	; (195dc <xTraceIsRecordingEnabled+0x1c>)
   195c6:	681b      	ldr	r3, [r3, #0]
   195c8:	2b00      	cmp	r3, #0
   195ca:	d003      	beq.n	195d4 <xTraceIsRecordingEnabled+0x14>
	{
		return (int)RecorderDataPtr->recorderActive;
   195cc:	4b03      	ldr	r3, [pc, #12]	; (195dc <xTraceIsRecordingEnabled+0x1c>)
   195ce:	681b      	ldr	r3, [r3, #0]
   195d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   195d2:	e000      	b.n	195d6 <xTraceIsRecordingEnabled+0x16>
	}
	else
	{
		return 0;
   195d4:	2300      	movs	r3, #0
	}
}
   195d6:	0018      	movs	r0, r3
   195d8:	46bd      	mov	sp, r7
   195da:	bd80      	pop	{r7, pc}
   195dc:	20000df4 	.word	0x20000df4

000195e0 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
   195e0:	b590      	push	{r4, r7, lr}
   195e2:	b089      	sub	sp, #36	; 0x24
   195e4:	af00      	add	r7, sp, #0
   195e6:	0002      	movs	r2, r0
   195e8:	1dfb      	adds	r3, r7, #7
   195ea:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
   195ec:	1dfb      	adds	r3, r7, #7
   195ee:	781b      	ldrb	r3, [r3, #0]
   195f0:	2b00      	cmp	r3, #0
   195f2:	d057      	beq.n	196a4 <prvTraceStoreTaskReady+0xc4>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
   195f4:	4b2e      	ldr	r3, [pc, #184]	; (196b0 <prvTraceStoreTaskReady+0xd0>)
   195f6:	681b      	ldr	r3, [r3, #0]
   195f8:	2b00      	cmp	r3, #0
   195fa:	d055      	beq.n	196a8 <prvTraceStoreTaskReady+0xc8>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
   195fc:	1dfb      	adds	r3, r7, #7
   195fe:	781b      	ldrb	r3, [r3, #0]
   19600:	2b0f      	cmp	r3, #15
   19602:	d904      	bls.n	1960e <prvTraceStoreTaskReady+0x2e>
   19604:	4b2b      	ldr	r3, [pc, #172]	; (196b4 <prvTraceStoreTaskReady+0xd4>)
   19606:	0018      	movs	r0, r3
   19608:	4b2b      	ldr	r3, [pc, #172]	; (196b8 <prvTraceStoreTaskReady+0xd8>)
   1960a:	4798      	blx	r3
   1960c:	e04d      	b.n	196aa <prvTraceStoreTaskReady+0xca>

	if (recorder_busy)
   1960e:	4b2b      	ldr	r3, [pc, #172]	; (196bc <prvTraceStoreTaskReady+0xdc>)
   19610:	681b      	ldr	r3, [r3, #0]
   19612:	2b00      	cmp	r3, #0
   19614:	d004      	beq.n	19620 <prvTraceStoreTaskReady+0x40>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
   19616:	4b2a      	ldr	r3, [pc, #168]	; (196c0 <prvTraceStoreTaskReady+0xe0>)
   19618:	0018      	movs	r0, r3
   1961a:	4b27      	ldr	r3, [pc, #156]	; (196b8 <prvTraceStoreTaskReady+0xd8>)
   1961c:	4798      	blx	r3
		return;
   1961e:	e044      	b.n	196aa <prvTraceStoreTaskReady+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19620:	f3ef 8310 	mrs	r3, PRIMASK
   19624:	60fb      	str	r3, [r7, #12]
  return(result);
   19626:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
   19628:	61fb      	str	r3, [r7, #28]
   1962a:	2301      	movs	r3, #1
   1962c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1962e:	693b      	ldr	r3, [r7, #16]
   19630:	f383 8810 	msr	PRIMASK, r3
   19634:	4b21      	ldr	r3, [pc, #132]	; (196bc <prvTraceStoreTaskReady+0xdc>)
   19636:	681b      	ldr	r3, [r3, #0]
   19638:	1c5a      	adds	r2, r3, #1
   1963a:	4b20      	ldr	r3, [pc, #128]	; (196bc <prvTraceStoreTaskReady+0xdc>)
   1963c:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
   1963e:	4b21      	ldr	r3, [pc, #132]	; (196c4 <prvTraceStoreTaskReady+0xe4>)
   19640:	681b      	ldr	r3, [r3, #0]
   19642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19644:	2b00      	cmp	r3, #0
   19646:	d022      	beq.n	1968e <prvTraceStoreTaskReady+0xae>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   19648:	231a      	movs	r3, #26
   1964a:	18fc      	adds	r4, r7, r3
   1964c:	4b1e      	ldr	r3, [pc, #120]	; (196c8 <prvTraceStoreTaskReady+0xe8>)
   1964e:	0018      	movs	r0, r3
   19650:	4b1e      	ldr	r3, [pc, #120]	; (196cc <prvTraceStoreTaskReady+0xec>)
   19652:	4798      	blx	r3
   19654:	0003      	movs	r3, r0
   19656:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
   19658:	2319      	movs	r3, #25
   1965a:	18fb      	adds	r3, r7, r3
   1965c:	1dfa      	adds	r2, r7, #7
   1965e:	7812      	ldrb	r2, [r2, #0]
   19660:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
   19662:	4b1b      	ldr	r3, [pc, #108]	; (196d0 <prvTraceStoreTaskReady+0xf0>)
   19664:	4798      	blx	r3
   19666:	0003      	movs	r3, r0
   19668:	617b      	str	r3, [r7, #20]
		if (tr != NULL)
   1966a:	697b      	ldr	r3, [r7, #20]
   1966c:	2b00      	cmp	r3, #0
   1966e:	d00e      	beq.n	1968e <prvTraceStoreTaskReady+0xae>
		{
			tr->type = DIV_TASK_READY;
   19670:	697b      	ldr	r3, [r7, #20]
   19672:	2202      	movs	r2, #2
   19674:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
   19676:	697b      	ldr	r3, [r7, #20]
   19678:	221a      	movs	r2, #26
   1967a:	18ba      	adds	r2, r7, r2
   1967c:	8812      	ldrh	r2, [r2, #0]
   1967e:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
   19680:	697b      	ldr	r3, [r7, #20]
   19682:	2219      	movs	r2, #25
   19684:	18ba      	adds	r2, r7, r2
   19686:	7812      	ldrb	r2, [r2, #0]
   19688:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   1968a:	4b12      	ldr	r3, [pc, #72]	; (196d4 <prvTraceStoreTaskReady+0xf4>)
   1968c:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   1968e:	4b0b      	ldr	r3, [pc, #44]	; (196bc <prvTraceStoreTaskReady+0xdc>)
   19690:	681b      	ldr	r3, [r3, #0]
   19692:	1e5a      	subs	r2, r3, #1
   19694:	4b09      	ldr	r3, [pc, #36]	; (196bc <prvTraceStoreTaskReady+0xdc>)
   19696:	601a      	str	r2, [r3, #0]
   19698:	69fb      	ldr	r3, [r7, #28]
   1969a:	60bb      	str	r3, [r7, #8]
   1969c:	68bb      	ldr	r3, [r7, #8]
   1969e:	f383 8810 	msr	PRIMASK, r3
   196a2:	e002      	b.n	196aa <prvTraceStoreTaskReady+0xca>
		return;
   196a4:	46c0      	nop			; (mov r8, r8)
   196a6:	e000      	b.n	196aa <prvTraceStoreTaskReady+0xca>
		return;
   196a8:	46c0      	nop			; (mov r8, r8)
}
   196aa:	46bd      	mov	sp, r7
   196ac:	b009      	add	sp, #36	; 0x24
   196ae:	bd90      	pop	{r4, r7, pc}
   196b0:	2000010c 	.word	0x2000010c
   196b4:	000383f0 	.word	0x000383f0
   196b8:	0001a6cd 	.word	0x0001a6cd
   196bc:	20000d4c 	.word	0x20000d4c
   196c0:	00038430 	.word	0x00038430
   196c4:	20000df4 	.word	0x20000df4
   196c8:	0000ffff 	.word	0x0000ffff
   196cc:	0001a8e1 	.word	0x0001a8e1
   196d0:	0001a285 	.word	0x0001a285
   196d4:	0001a889 	.word	0x0001a889

000196d8 <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
   196d8:	b580      	push	{r7, lr}
   196da:	b08e      	sub	sp, #56	; 0x38
   196dc:	af00      	add	r7, sp, #0
   196de:	60f8      	str	r0, [r7, #12]
   196e0:	60b9      	str	r1, [r7, #8]
   196e2:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
   196e4:	4b48      	ldr	r3, [pc, #288]	; (19808 <vTraceStoreMemMangEvent+0x130>)
   196e6:	681b      	ldr	r3, [r3, #0]
   196e8:	2b00      	cmp	r3, #0
   196ea:	d100      	bne.n	196ee <vTraceStoreMemMangEvent+0x16>
   196ec:	e088      	b.n	19800 <vTraceStoreMemMangEvent+0x128>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
   196ee:	687b      	ldr	r3, [r7, #4]
   196f0:	2b00      	cmp	r3, #0
   196f2:	da03      	bge.n	196fc <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
   196f4:	687b      	ldr	r3, [r7, #4]
   196f6:	425b      	negs	r3, r3
   196f8:	637b      	str	r3, [r7, #52]	; 0x34
   196fa:	e001      	b.n	19700 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
   196fc:	687b      	ldr	r3, [r7, #4]
   196fe:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19700:	f3ef 8310 	mrs	r3, PRIMASK
   19704:	61bb      	str	r3, [r7, #24]
  return(result);
   19706:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
   19708:	633b      	str	r3, [r7, #48]	; 0x30
   1970a:	2301      	movs	r3, #1
   1970c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1970e:	69fb      	ldr	r3, [r7, #28]
   19710:	f383 8810 	msr	PRIMASK, r3
   19714:	4b3d      	ldr	r3, [pc, #244]	; (1980c <vTraceStoreMemMangEvent+0x134>)
   19716:	681b      	ldr	r3, [r3, #0]
   19718:	1c5a      	adds	r2, r3, #1
   1971a:	4b3c      	ldr	r3, [pc, #240]	; (1980c <vTraceStoreMemMangEvent+0x134>)
   1971c:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
   1971e:	68bb      	ldr	r3, [r7, #8]
   19720:	2b00      	cmp	r3, #0
   19722:	d005      	beq.n	19730 <vTraceStoreMemMangEvent+0x58>
		heapMemUsage += (uint32_t)signed_size;
   19724:	4b3a      	ldr	r3, [pc, #232]	; (19810 <vTraceStoreMemMangEvent+0x138>)
   19726:	681a      	ldr	r2, [r3, #0]
   19728:	687b      	ldr	r3, [r7, #4]
   1972a:	18d2      	adds	r2, r2, r3
   1972c:	4b38      	ldr	r3, [pc, #224]	; (19810 <vTraceStoreMemMangEvent+0x138>)
   1972e:	601a      	str	r2, [r3, #0]
	
	if (RecorderDataPtr->recorderActive)
   19730:	4b35      	ldr	r3, [pc, #212]	; (19808 <vTraceStoreMemMangEvent+0x130>)
   19732:	681b      	ldr	r3, [r3, #0]
   19734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19736:	2b00      	cmp	r3, #0
   19738:	d057      	beq.n	197ea <vTraceStoreMemMangEvent+0x112>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
   1973a:	20ff      	movs	r0, #255	; 0xff
   1973c:	4b35      	ldr	r3, [pc, #212]	; (19814 <vTraceStoreMemMangEvent+0x13c>)
   1973e:	4798      	blx	r3
   19740:	0003      	movs	r3, r0
   19742:	001a      	movs	r2, r3
   19744:	232f      	movs	r3, #47	; 0x2f
   19746:	18fb      	adds	r3, r7, r3
   19748:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
   1974a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1974c:	4a32      	ldr	r2, [pc, #200]	; (19818 <vTraceStoreMemMangEvent+0x140>)
   1974e:	0019      	movs	r1, r3
   19750:	0010      	movs	r0, r2
   19752:	4b32      	ldr	r3, [pc, #200]	; (1981c <vTraceStoreMemMangEvent+0x144>)
   19754:	4798      	blx	r3
   19756:	0002      	movs	r2, r0
   19758:	232c      	movs	r3, #44	; 0x2c
   1975a:	18fb      	adds	r3, r7, r3
   1975c:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
   1975e:	4b30      	ldr	r3, [pc, #192]	; (19820 <vTraceStoreMemMangEvent+0x148>)
   19760:	4798      	blx	r3
   19762:	0003      	movs	r3, r0
   19764:	62bb      	str	r3, [r7, #40]	; 0x28

		if (ms != NULL)
   19766:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19768:	2b00      	cmp	r3, #0
   1976a:	d03e      	beq.n	197ea <vTraceStoreMemMangEvent+0x112>
		{
			ms->dts = dts1;
   1976c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1976e:	222f      	movs	r2, #47	; 0x2f
   19770:	18ba      	adds	r2, r7, r2
   19772:	7812      	ldrb	r2, [r2, #0]
   19774:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
   19776:	6abb      	ldr	r3, [r7, #40]	; 0x28
   19778:	2200      	movs	r2, #0
   1977a:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
   1977c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1977e:	222c      	movs	r2, #44	; 0x2c
   19780:	18ba      	adds	r2, r7, r2
   19782:	8812      	ldrh	r2, [r2, #0]
   19784:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   19786:	4b27      	ldr	r3, [pc, #156]	; (19824 <vTraceStoreMemMangEvent+0x14c>)
   19788:	4798      	blx	r3
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
   1978a:	68bb      	ldr	r3, [r7, #8]
   1978c:	4a22      	ldr	r2, [pc, #136]	; (19818 <vTraceStoreMemMangEvent+0x140>)
   1978e:	0019      	movs	r1, r3
   19790:	0010      	movs	r0, r2
   19792:	4b22      	ldr	r3, [pc, #136]	; (1981c <vTraceStoreMemMangEvent+0x144>)
   19794:	4798      	blx	r3
   19796:	0002      	movs	r2, r0
   19798:	2326      	movs	r3, #38	; 0x26
   1979a:	18fb      	adds	r3, r7, r3
   1979c:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
   1979e:	2325      	movs	r3, #37	; 0x25
   197a0:	18fb      	adds	r3, r7, r3
   197a2:	2200      	movs	r2, #0
   197a4:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
   197a6:	4b1e      	ldr	r3, [pc, #120]	; (19820 <vTraceStoreMemMangEvent+0x148>)
   197a8:	4798      	blx	r3
   197aa:	0003      	movs	r3, r0
   197ac:	623b      	str	r3, [r7, #32]
			if (ma != NULL)
   197ae:	6a3b      	ldr	r3, [r7, #32]
   197b0:	2b00      	cmp	r3, #0
   197b2:	d01a      	beq.n	197ea <vTraceStoreMemMangEvent+0x112>
			{
				ma->addr_low = addr_low;
   197b4:	6a3b      	ldr	r3, [r7, #32]
   197b6:	2226      	movs	r2, #38	; 0x26
   197b8:	18ba      	adds	r2, r7, r2
   197ba:	8812      	ldrh	r2, [r2, #0]
   197bc:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
   197be:	6a3b      	ldr	r3, [r7, #32]
   197c0:	2225      	movs	r2, #37	; 0x25
   197c2:	18ba      	adds	r2, r7, r2
   197c4:	7812      	ldrb	r2, [r2, #0]
   197c6:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
   197c8:	68fb      	ldr	r3, [r7, #12]
   197ca:	b2db      	uxtb	r3, r3
   197cc:	3301      	adds	r3, #1
   197ce:	b2da      	uxtb	r2, r3
   197d0:	6a3b      	ldr	r3, [r7, #32]
   197d2:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
   197d4:	68fb      	ldr	r3, [r7, #12]
   197d6:	b2da      	uxtb	r2, r3
   197d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   197da:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
   197dc:	4b11      	ldr	r3, [pc, #68]	; (19824 <vTraceStoreMemMangEvent+0x14c>)
   197de:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
   197e0:	4b09      	ldr	r3, [pc, #36]	; (19808 <vTraceStoreMemMangEvent+0x130>)
   197e2:	681b      	ldr	r3, [r3, #0]
   197e4:	4a0a      	ldr	r2, [pc, #40]	; (19810 <vTraceStoreMemMangEvent+0x138>)
   197e6:	6812      	ldr	r2, [r2, #0]
   197e8:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
   197ea:	4b08      	ldr	r3, [pc, #32]	; (1980c <vTraceStoreMemMangEvent+0x134>)
   197ec:	681b      	ldr	r3, [r3, #0]
   197ee:	1e5a      	subs	r2, r3, #1
   197f0:	4b06      	ldr	r3, [pc, #24]	; (1980c <vTraceStoreMemMangEvent+0x134>)
   197f2:	601a      	str	r2, [r3, #0]
   197f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   197f6:	617b      	str	r3, [r7, #20]
   197f8:	697b      	ldr	r3, [r7, #20]
   197fa:	f383 8810 	msr	PRIMASK, r3
   197fe:	e000      	b.n	19802 <vTraceStoreMemMangEvent+0x12a>
		return;
   19800:	46c0      	nop			; (mov r8, r8)
}
   19802:	46bd      	mov	sp, r7
   19804:	b00e      	add	sp, #56	; 0x38
   19806:	bd80      	pop	{r7, pc}
   19808:	20000df4 	.word	0x20000df4
   1980c:	20000d4c 	.word	0x20000d4c
   19810:	20000d60 	.word	0x20000d60
   19814:	0001a8e1 	.word	0x0001a8e1
   19818:	0000ffff 	.word	0x0000ffff
   1981c:	00019aa5 	.word	0x00019aa5
   19820:	0001a285 	.word	0x0001a285
   19824:	0001a889 	.word	0x0001a889

00019828 <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
   19828:	b590      	push	{r4, r7, lr}
   1982a:	b08b      	sub	sp, #44	; 0x2c
   1982c:	af00      	add	r7, sp, #0
   1982e:	60f8      	str	r0, [r7, #12]
   19830:	607a      	str	r2, [r7, #4]
   19832:	230b      	movs	r3, #11
   19834:	18fb      	adds	r3, r7, r3
   19836:	1c0a      	adds	r2, r1, #0
   19838:	701a      	strb	r2, [r3, #0]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
   1983a:	68fb      	ldr	r3, [r7, #12]
   1983c:	2bfe      	cmp	r3, #254	; 0xfe
   1983e:	d904      	bls.n	1984a <prvTraceStoreKernelCall+0x22>
   19840:	4b39      	ldr	r3, [pc, #228]	; (19928 <prvTraceStoreKernelCall+0x100>)
   19842:	0018      	movs	r0, r3
   19844:	4b39      	ldr	r3, [pc, #228]	; (1992c <prvTraceStoreKernelCall+0x104>)
   19846:	4798      	blx	r3
   19848:	e06b      	b.n	19922 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   1984a:	230b      	movs	r3, #11
   1984c:	18fb      	adds	r3, r7, r3
   1984e:	781b      	ldrb	r3, [r3, #0]
   19850:	2b08      	cmp	r3, #8
   19852:	d904      	bls.n	1985e <prvTraceStoreKernelCall+0x36>
   19854:	4b36      	ldr	r3, [pc, #216]	; (19930 <prvTraceStoreKernelCall+0x108>)
   19856:	0018      	movs	r0, r3
   19858:	4b34      	ldr	r3, [pc, #208]	; (1992c <prvTraceStoreKernelCall+0x104>)
   1985a:	4798      	blx	r3
   1985c:	e061      	b.n	19922 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
   1985e:	4b35      	ldr	r3, [pc, #212]	; (19934 <prvTraceStoreKernelCall+0x10c>)
   19860:	681a      	ldr	r2, [r3, #0]
   19862:	230b      	movs	r3, #11
   19864:	18fb      	adds	r3, r7, r3
   19866:	781b      	ldrb	r3, [r3, #0]
   19868:	2164      	movs	r1, #100	; 0x64
   1986a:	18d3      	adds	r3, r2, r3
   1986c:	185b      	adds	r3, r3, r1
   1986e:	781b      	ldrb	r3, [r3, #0]
   19870:	001a      	movs	r2, r3
   19872:	687b      	ldr	r3, [r7, #4]
   19874:	429a      	cmp	r2, r3
   19876:	d204      	bcs.n	19882 <prvTraceStoreKernelCall+0x5a>
   19878:	4b2f      	ldr	r3, [pc, #188]	; (19938 <prvTraceStoreKernelCall+0x110>)
   1987a:	0018      	movs	r0, r3
   1987c:	4b2b      	ldr	r3, [pc, #172]	; (1992c <prvTraceStoreKernelCall+0x104>)
   1987e:	4798      	blx	r3
   19880:	e04f      	b.n	19922 <prvTraceStoreKernelCall+0xfa>

	if (recorder_busy)
   19882:	4b2e      	ldr	r3, [pc, #184]	; (1993c <prvTraceStoreKernelCall+0x114>)
   19884:	681b      	ldr	r3, [r3, #0]
   19886:	2b00      	cmp	r3, #0
   19888:	d004      	beq.n	19894 <prvTraceStoreKernelCall+0x6c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
   1988a:	4b2d      	ldr	r3, [pc, #180]	; (19940 <prvTraceStoreKernelCall+0x118>)
   1988c:	0018      	movs	r0, r3
   1988e:	4b27      	ldr	r3, [pc, #156]	; (1992c <prvTraceStoreKernelCall+0x104>)
   19890:	4798      	blx	r3
		return;
   19892:	e046      	b.n	19922 <prvTraceStoreKernelCall+0xfa>
	}

	if (handle_of_last_logged_task == 0)
   19894:	4b2b      	ldr	r3, [pc, #172]	; (19944 <prvTraceStoreKernelCall+0x11c>)
   19896:	781b      	ldrb	r3, [r3, #0]
   19898:	2b00      	cmp	r3, #0
   1989a:	d041      	beq.n	19920 <prvTraceStoreKernelCall+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1989c:	f3ef 8310 	mrs	r3, PRIMASK
   198a0:	617b      	str	r3, [r7, #20]
  return(result);
   198a2:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
   198a4:	627b      	str	r3, [r7, #36]	; 0x24
   198a6:	2301      	movs	r3, #1
   198a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   198aa:	69bb      	ldr	r3, [r7, #24]
   198ac:	f383 8810 	msr	PRIMASK, r3
   198b0:	4b22      	ldr	r3, [pc, #136]	; (1993c <prvTraceStoreKernelCall+0x114>)
   198b2:	681b      	ldr	r3, [r3, #0]
   198b4:	1c5a      	adds	r2, r3, #1
   198b6:	4b21      	ldr	r3, [pc, #132]	; (1993c <prvTraceStoreKernelCall+0x114>)
   198b8:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
   198ba:	4b1e      	ldr	r3, [pc, #120]	; (19934 <prvTraceStoreKernelCall+0x10c>)
   198bc:	681b      	ldr	r3, [r3, #0]
   198be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   198c0:	2b00      	cmp	r3, #0
   198c2:	d022      	beq.n	1990a <prvTraceStoreKernelCall+0xe2>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
   198c4:	2322      	movs	r3, #34	; 0x22
   198c6:	18fc      	adds	r4, r7, r3
   198c8:	4b1f      	ldr	r3, [pc, #124]	; (19948 <prvTraceStoreKernelCall+0x120>)
   198ca:	0018      	movs	r0, r3
   198cc:	4b1f      	ldr	r3, [pc, #124]	; (1994c <prvTraceStoreKernelCall+0x124>)
   198ce:	4798      	blx	r3
   198d0:	0003      	movs	r3, r0
   198d2:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   198d4:	2321      	movs	r3, #33	; 0x21
   198d6:	18fb      	adds	r3, r7, r3
   198d8:	687a      	ldr	r2, [r7, #4]
   198da:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
   198dc:	4b1c      	ldr	r3, [pc, #112]	; (19950 <prvTraceStoreKernelCall+0x128>)
   198de:	4798      	blx	r3
   198e0:	0003      	movs	r3, r0
   198e2:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   198e4:	69fb      	ldr	r3, [r7, #28]
   198e6:	2b00      	cmp	r3, #0
   198e8:	d00f      	beq.n	1990a <prvTraceStoreKernelCall+0xe2>
		{
			kse->dts = dts1;
   198ea:	69fb      	ldr	r3, [r7, #28]
   198ec:	2222      	movs	r2, #34	; 0x22
   198ee:	18ba      	adds	r2, r7, r2
   198f0:	8812      	ldrh	r2, [r2, #0]
   198f2:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
   198f4:	68fb      	ldr	r3, [r7, #12]
   198f6:	b2da      	uxtb	r2, r3
   198f8:	69fb      	ldr	r3, [r7, #28]
   198fa:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   198fc:	69fb      	ldr	r3, [r7, #28]
   198fe:	2221      	movs	r2, #33	; 0x21
   19900:	18ba      	adds	r2, r7, r2
   19902:	7812      	ldrb	r2, [r2, #0]
   19904:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   19906:	4b13      	ldr	r3, [pc, #76]	; (19954 <prvTraceStoreKernelCall+0x12c>)
   19908:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   1990a:	4b0c      	ldr	r3, [pc, #48]	; (1993c <prvTraceStoreKernelCall+0x114>)
   1990c:	681b      	ldr	r3, [r3, #0]
   1990e:	1e5a      	subs	r2, r3, #1
   19910:	4b0a      	ldr	r3, [pc, #40]	; (1993c <prvTraceStoreKernelCall+0x114>)
   19912:	601a      	str	r2, [r3, #0]
   19914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19916:	613b      	str	r3, [r7, #16]
   19918:	693b      	ldr	r3, [r7, #16]
   1991a:	f383 8810 	msr	PRIMASK, r3
   1991e:	e000      	b.n	19922 <prvTraceStoreKernelCall+0xfa>
		return;
   19920:	46c0      	nop			; (mov r8, r8)
}
   19922:	46bd      	mov	sp, r7
   19924:	b00b      	add	sp, #44	; 0x2c
   19926:	bd90      	pop	{r4, r7, pc}
   19928:	000384a0 	.word	0x000384a0
   1992c:	0001a6cd 	.word	0x0001a6cd
   19930:	000384d8 	.word	0x000384d8
   19934:	20000df4 	.word	0x20000df4
   19938:	00038520 	.word	0x00038520
   1993c:	20000d4c 	.word	0x20000d4c
   19940:	00038568 	.word	0x00038568
   19944:	20000d58 	.word	0x20000d58
   19948:	0000ffff 	.word	0x0000ffff
   1994c:	0001a8e1 	.word	0x0001a8e1
   19950:	0001a285 	.word	0x0001a285
   19954:	0001a889 	.word	0x0001a889

00019958 <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
   19958:	b580      	push	{r7, lr}
   1995a:	b08a      	sub	sp, #40	; 0x28
   1995c:	af00      	add	r7, sp, #0
   1995e:	60f8      	str	r0, [r7, #12]
   19960:	607a      	str	r2, [r7, #4]
   19962:	603b      	str	r3, [r7, #0]
   19964:	230b      	movs	r3, #11
   19966:	18fb      	adds	r3, r7, r3
   19968:	1c0a      	adds	r2, r1, #0
   1996a:	701a      	strb	r2, [r3, #0]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
   1996c:	68fb      	ldr	r3, [r7, #12]
   1996e:	2bfe      	cmp	r3, #254	; 0xfe
   19970:	d904      	bls.n	1997c <prvTraceStoreKernelCallWithParam+0x24>
   19972:	4b40      	ldr	r3, [pc, #256]	; (19a74 <prvTraceStoreKernelCallWithParam+0x11c>)
   19974:	0018      	movs	r0, r3
   19976:	4b40      	ldr	r3, [pc, #256]	; (19a78 <prvTraceStoreKernelCallWithParam+0x120>)
   19978:	4798      	blx	r3
   1997a:	e077      	b.n	19a6c <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   1997c:	230b      	movs	r3, #11
   1997e:	18fb      	adds	r3, r7, r3
   19980:	781b      	ldrb	r3, [r3, #0]
   19982:	2b08      	cmp	r3, #8
   19984:	d904      	bls.n	19990 <prvTraceStoreKernelCallWithParam+0x38>
   19986:	4b3d      	ldr	r3, [pc, #244]	; (19a7c <prvTraceStoreKernelCallWithParam+0x124>)
   19988:	0018      	movs	r0, r3
   1998a:	4b3b      	ldr	r3, [pc, #236]	; (19a78 <prvTraceStoreKernelCallWithParam+0x120>)
   1998c:	4798      	blx	r3
   1998e:	e06d      	b.n	19a6c <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
   19990:	4b3b      	ldr	r3, [pc, #236]	; (19a80 <prvTraceStoreKernelCallWithParam+0x128>)
   19992:	681a      	ldr	r2, [r3, #0]
   19994:	230b      	movs	r3, #11
   19996:	18fb      	adds	r3, r7, r3
   19998:	781b      	ldrb	r3, [r3, #0]
   1999a:	2164      	movs	r1, #100	; 0x64
   1999c:	18d3      	adds	r3, r2, r3
   1999e:	185b      	adds	r3, r3, r1
   199a0:	781b      	ldrb	r3, [r3, #0]
   199a2:	001a      	movs	r2, r3
   199a4:	687b      	ldr	r3, [r7, #4]
   199a6:	429a      	cmp	r2, r3
   199a8:	d204      	bcs.n	199b4 <prvTraceStoreKernelCallWithParam+0x5c>
   199aa:	4b36      	ldr	r3, [pc, #216]	; (19a84 <prvTraceStoreKernelCallWithParam+0x12c>)
   199ac:	0018      	movs	r0, r3
   199ae:	4b32      	ldr	r3, [pc, #200]	; (19a78 <prvTraceStoreKernelCallWithParam+0x120>)
   199b0:	4798      	blx	r3
   199b2:	e05b      	b.n	19a6c <prvTraceStoreKernelCallWithParam+0x114>

	if (recorder_busy)
   199b4:	4b34      	ldr	r3, [pc, #208]	; (19a88 <prvTraceStoreKernelCallWithParam+0x130>)
   199b6:	681b      	ldr	r3, [r3, #0]
   199b8:	2b00      	cmp	r3, #0
   199ba:	d004      	beq.n	199c6 <prvTraceStoreKernelCallWithParam+0x6e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
   199bc:	4b33      	ldr	r3, [pc, #204]	; (19a8c <prvTraceStoreKernelCallWithParam+0x134>)
   199be:	0018      	movs	r0, r3
   199c0:	4b2d      	ldr	r3, [pc, #180]	; (19a78 <prvTraceStoreKernelCallWithParam+0x120>)
   199c2:	4798      	blx	r3
		return;
   199c4:	e052      	b.n	19a6c <prvTraceStoreKernelCallWithParam+0x114>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   199c6:	f3ef 8310 	mrs	r3, PRIMASK
   199ca:	617b      	str	r3, [r7, #20]
  return(result);
   199cc:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
   199ce:	627b      	str	r3, [r7, #36]	; 0x24
   199d0:	2301      	movs	r3, #1
   199d2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   199d4:	69bb      	ldr	r3, [r7, #24]
   199d6:	f383 8810 	msr	PRIMASK, r3
   199da:	4b2b      	ldr	r3, [pc, #172]	; (19a88 <prvTraceStoreKernelCallWithParam+0x130>)
   199dc:	681b      	ldr	r3, [r3, #0]
   199de:	1c5a      	adds	r2, r3, #1
   199e0:	4b29      	ldr	r3, [pc, #164]	; (19a88 <prvTraceStoreKernelCallWithParam+0x130>)
   199e2:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   199e4:	4b26      	ldr	r3, [pc, #152]	; (19a80 <prvTraceStoreKernelCallWithParam+0x128>)
   199e6:	681b      	ldr	r3, [r3, #0]
   199e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   199ea:	2b00      	cmp	r3, #0
   199ec:	d034      	beq.n	19a58 <prvTraceStoreKernelCallWithParam+0x100>
   199ee:	4b28      	ldr	r3, [pc, #160]	; (19a90 <prvTraceStoreKernelCallWithParam+0x138>)
   199f0:	781b      	ldrb	r3, [r3, #0]
   199f2:	2b00      	cmp	r3, #0
   199f4:	d030      	beq.n	19a58 <prvTraceStoreKernelCallWithParam+0x100>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
   199f6:	20ff      	movs	r0, #255	; 0xff
   199f8:	4b26      	ldr	r3, [pc, #152]	; (19a94 <prvTraceStoreKernelCallWithParam+0x13c>)
   199fa:	4798      	blx	r3
   199fc:	0003      	movs	r3, r0
   199fe:	001a      	movs	r2, r3
   19a00:	2323      	movs	r3, #35	; 0x23
   19a02:	18fb      	adds	r3, r7, r3
   19a04:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
   19a06:	683b      	ldr	r3, [r7, #0]
   19a08:	0019      	movs	r1, r3
   19a0a:	20ff      	movs	r0, #255	; 0xff
   19a0c:	4b22      	ldr	r3, [pc, #136]	; (19a98 <prvTraceStoreKernelCallWithParam+0x140>)
   19a0e:	4798      	blx	r3
   19a10:	0002      	movs	r2, r0
   19a12:	2322      	movs	r3, #34	; 0x22
   19a14:	18fb      	adds	r3, r7, r3
   19a16:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   19a18:	2321      	movs	r3, #33	; 0x21
   19a1a:	18fb      	adds	r3, r7, r3
   19a1c:	687a      	ldr	r2, [r7, #4]
   19a1e:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
   19a20:	4b1e      	ldr	r3, [pc, #120]	; (19a9c <prvTraceStoreKernelCallWithParam+0x144>)
   19a22:	4798      	blx	r3
   19a24:	0003      	movs	r3, r0
   19a26:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   19a28:	69fb      	ldr	r3, [r7, #28]
   19a2a:	2b00      	cmp	r3, #0
   19a2c:	d014      	beq.n	19a58 <prvTraceStoreKernelCallWithParam+0x100>
		{
			kse->dts = dts2;
   19a2e:	69fb      	ldr	r3, [r7, #28]
   19a30:	2223      	movs	r2, #35	; 0x23
   19a32:	18ba      	adds	r2, r7, r2
   19a34:	7812      	ldrb	r2, [r2, #0]
   19a36:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
   19a38:	68fb      	ldr	r3, [r7, #12]
   19a3a:	b2da      	uxtb	r2, r3
   19a3c:	69fb      	ldr	r3, [r7, #28]
   19a3e:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   19a40:	69fb      	ldr	r3, [r7, #28]
   19a42:	2221      	movs	r2, #33	; 0x21
   19a44:	18ba      	adds	r2, r7, r2
   19a46:	7812      	ldrb	r2, [r2, #0]
   19a48:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
   19a4a:	69fb      	ldr	r3, [r7, #28]
   19a4c:	2222      	movs	r2, #34	; 0x22
   19a4e:	18ba      	adds	r2, r7, r2
   19a50:	7812      	ldrb	r2, [r2, #0]
   19a52:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
   19a54:	4b12      	ldr	r3, [pc, #72]	; (19aa0 <prvTraceStoreKernelCallWithParam+0x148>)
   19a56:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   19a58:	4b0b      	ldr	r3, [pc, #44]	; (19a88 <prvTraceStoreKernelCallWithParam+0x130>)
   19a5a:	681b      	ldr	r3, [r3, #0]
   19a5c:	1e5a      	subs	r2, r3, #1
   19a5e:	4b0a      	ldr	r3, [pc, #40]	; (19a88 <prvTraceStoreKernelCallWithParam+0x130>)
   19a60:	601a      	str	r2, [r3, #0]
   19a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19a64:	613b      	str	r3, [r7, #16]
   19a66:	693b      	ldr	r3, [r7, #16]
   19a68:	f383 8810 	msr	PRIMASK, r3
}
   19a6c:	46bd      	mov	sp, r7
   19a6e:	b00a      	add	sp, #40	; 0x28
   19a70:	bd80      	pop	{r7, pc}
   19a72:	46c0      	nop			; (mov r8, r8)
   19a74:	000385a0 	.word	0x000385a0
   19a78:	0001a6cd 	.word	0x0001a6cd
   19a7c:	000385e0 	.word	0x000385e0
   19a80:	20000df4 	.word	0x20000df4
   19a84:	00038630 	.word	0x00038630
   19a88:	20000d4c 	.word	0x20000d4c
   19a8c:	00038680 	.word	0x00038680
   19a90:	20000d58 	.word	0x20000d58
   19a94:	0001a8e1 	.word	0x0001a8e1
   19a98:	00019aa5 	.word	0x00019aa5
   19a9c:	0001a285 	.word	0x0001a285
   19aa0:	0001a889 	.word	0x0001a889

00019aa4 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
   19aa4:	b580      	push	{r7, lr}
   19aa6:	b084      	sub	sp, #16
   19aa8:	af00      	add	r7, sp, #0
   19aaa:	6078      	str	r0, [r7, #4]
   19aac:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
   19aae:	687b      	ldr	r3, [r7, #4]
   19ab0:	2bff      	cmp	r3, #255	; 0xff
   19ab2:	d009      	beq.n	19ac8 <prvTraceGetParam+0x24>
   19ab4:	687b      	ldr	r3, [r7, #4]
   19ab6:	4a19      	ldr	r2, [pc, #100]	; (19b1c <prvTraceGetParam+0x78>)
   19ab8:	4293      	cmp	r3, r2
   19aba:	d005      	beq.n	19ac8 <prvTraceGetParam+0x24>
   19abc:	4b18      	ldr	r3, [pc, #96]	; (19b20 <prvTraceGetParam+0x7c>)
   19abe:	0018      	movs	r0, r3
   19ac0:	4b18      	ldr	r3, [pc, #96]	; (19b24 <prvTraceGetParam+0x80>)
   19ac2:	4798      	blx	r3
   19ac4:	683b      	ldr	r3, [r7, #0]
   19ac6:	e024      	b.n	19b12 <prvTraceGetParam+0x6e>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
   19ac8:	683a      	ldr	r2, [r7, #0]
   19aca:	687b      	ldr	r3, [r7, #4]
   19acc:	429a      	cmp	r2, r3
   19ace:	d801      	bhi.n	19ad4 <prvTraceGetParam+0x30>
	{
		return param;
   19ad0:	683b      	ldr	r3, [r7, #0]
   19ad2:	e01e      	b.n	19b12 <prvTraceGetParam+0x6e>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
   19ad4:	4b14      	ldr	r3, [pc, #80]	; (19b28 <prvTraceGetParam+0x84>)
   19ad6:	4798      	blx	r3
   19ad8:	0003      	movs	r3, r0
   19ada:	60fb      	str	r3, [r7, #12]
		if (xps != NULL)
   19adc:	68fb      	ldr	r3, [r7, #12]
   19ade:	2b00      	cmp	r3, #0
   19ae0:	d014      	beq.n	19b0c <prvTraceGetParam+0x68>
		{
			xps->type = DIV_XPS;
   19ae2:	68fb      	ldr	r3, [r7, #12]
   19ae4:	2201      	movs	r2, #1
   19ae6:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
   19ae8:	687b      	ldr	r3, [r7, #4]
   19aea:	43db      	mvns	r3, r3
   19aec:	683a      	ldr	r2, [r7, #0]
   19aee:	4013      	ands	r3, r2
   19af0:	0a1b      	lsrs	r3, r3, #8
   19af2:	b2da      	uxtb	r2, r3
   19af4:	68fb      	ldr	r3, [r7, #12]
   19af6:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
   19af8:	687b      	ldr	r3, [r7, #4]
   19afa:	43db      	mvns	r3, r3
   19afc:	683a      	ldr	r2, [r7, #0]
   19afe:	4013      	ands	r3, r2
   19b00:	0c1b      	lsrs	r3, r3, #16
   19b02:	b29a      	uxth	r2, r3
   19b04:	68fb      	ldr	r3, [r7, #12]
   19b06:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   19b08:	4b08      	ldr	r3, [pc, #32]	; (19b2c <prvTraceGetParam+0x88>)
   19b0a:	4798      	blx	r3
		}

		return param & param_max;
   19b0c:	683b      	ldr	r3, [r7, #0]
   19b0e:	687a      	ldr	r2, [r7, #4]
   19b10:	4013      	ands	r3, r2
	}
}
   19b12:	0018      	movs	r0, r3
   19b14:	46bd      	mov	sp, r7
   19b16:	b004      	add	sp, #16
   19b18:	bd80      	pop	{r7, pc}
   19b1a:	46c0      	nop			; (mov r8, r8)
   19b1c:	0000ffff 	.word	0x0000ffff
   19b20:	000386b8 	.word	0x000386b8
   19b24:	0001a6cd 	.word	0x0001a6cd
   19b28:	0001a285 	.word	0x0001a285
   19b2c:	0001a889 	.word	0x0001a889

00019b30 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
   19b30:	b580      	push	{r7, lr}
   19b32:	b08a      	sub	sp, #40	; 0x28
   19b34:	af00      	add	r7, sp, #0
   19b36:	6078      	str	r0, [r7, #4]
   19b38:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
   19b3a:	2326      	movs	r3, #38	; 0x26
   19b3c:	18fb      	adds	r3, r7, r3
   19b3e:	2200      	movs	r2, #0
   19b40:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
   19b42:	687b      	ldr	r3, [r7, #4]
   19b44:	2bfe      	cmp	r3, #254	; 0xfe
   19b46:	d904      	bls.n	19b52 <prvTraceStoreKernelCallWithNumericParamOnly+0x22>
   19b48:	4b2d      	ldr	r3, [pc, #180]	; (19c00 <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
   19b4a:	0018      	movs	r0, r3
   19b4c:	4b2d      	ldr	r3, [pc, #180]	; (19c04 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   19b4e:	4798      	blx	r3
   19b50:	e053      	b.n	19bfa <prvTraceStoreKernelCallWithNumericParamOnly+0xca>

	if (recorder_busy)
   19b52:	4b2d      	ldr	r3, [pc, #180]	; (19c08 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   19b54:	681b      	ldr	r3, [r3, #0]
   19b56:	2b00      	cmp	r3, #0
   19b58:	d004      	beq.n	19b64 <prvTraceStoreKernelCallWithNumericParamOnly+0x34>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
   19b5a:	4b2c      	ldr	r3, [pc, #176]	; (19c0c <prvTraceStoreKernelCallWithNumericParamOnly+0xdc>)
   19b5c:	0018      	movs	r0, r3
   19b5e:	4b29      	ldr	r3, [pc, #164]	; (19c04 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   19b60:	4798      	blx	r3
		return;
   19b62:	e04a      	b.n	19bfa <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19b64:	f3ef 8310 	mrs	r3, PRIMASK
   19b68:	613b      	str	r3, [r7, #16]
  return(result);
   19b6a:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
   19b6c:	623b      	str	r3, [r7, #32]
   19b6e:	2301      	movs	r3, #1
   19b70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   19b72:	697b      	ldr	r3, [r7, #20]
   19b74:	f383 8810 	msr	PRIMASK, r3
   19b78:	4b23      	ldr	r3, [pc, #140]	; (19c08 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   19b7a:	681b      	ldr	r3, [r3, #0]
   19b7c:	1c5a      	adds	r2, r3, #1
   19b7e:	4b22      	ldr	r3, [pc, #136]	; (19c08 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   19b80:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   19b82:	4b23      	ldr	r3, [pc, #140]	; (19c10 <prvTraceStoreKernelCallWithNumericParamOnly+0xe0>)
   19b84:	681b      	ldr	r3, [r3, #0]
   19b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19b88:	2b00      	cmp	r3, #0
   19b8a:	d02c      	beq.n	19be6 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
   19b8c:	4b21      	ldr	r3, [pc, #132]	; (19c14 <prvTraceStoreKernelCallWithNumericParamOnly+0xe4>)
   19b8e:	781b      	ldrb	r3, [r3, #0]
   19b90:	2b00      	cmp	r3, #0
   19b92:	d028      	beq.n	19be6 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
   19b94:	20ff      	movs	r0, #255	; 0xff
   19b96:	4b20      	ldr	r3, [pc, #128]	; (19c18 <prvTraceStoreKernelCallWithNumericParamOnly+0xe8>)
   19b98:	4798      	blx	r3
   19b9a:	0003      	movs	r3, r0
   19b9c:	001a      	movs	r2, r3
   19b9e:	231f      	movs	r3, #31
   19ba0:	18fb      	adds	r3, r7, r3
   19ba2:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
   19ba4:	683b      	ldr	r3, [r7, #0]
   19ba6:	4a1d      	ldr	r2, [pc, #116]	; (19c1c <prvTraceStoreKernelCallWithNumericParamOnly+0xec>)
   19ba8:	0019      	movs	r1, r3
   19baa:	0010      	movs	r0, r2
   19bac:	4b1c      	ldr	r3, [pc, #112]	; (19c20 <prvTraceStoreKernelCallWithNumericParamOnly+0xf0>)
   19bae:	4798      	blx	r3
   19bb0:	0002      	movs	r2, r0
   19bb2:	2326      	movs	r3, #38	; 0x26
   19bb4:	18fb      	adds	r3, r7, r3
   19bb6:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
   19bb8:	4b1a      	ldr	r3, [pc, #104]	; (19c24 <prvTraceStoreKernelCallWithNumericParamOnly+0xf4>)
   19bba:	4798      	blx	r3
   19bbc:	0003      	movs	r3, r0
   19bbe:	61bb      	str	r3, [r7, #24]
		if (kse != NULL)
   19bc0:	69bb      	ldr	r3, [r7, #24]
   19bc2:	2b00      	cmp	r3, #0
   19bc4:	d00f      	beq.n	19be6 <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
		{
			kse->dts = dts6;
   19bc6:	69bb      	ldr	r3, [r7, #24]
   19bc8:	221f      	movs	r2, #31
   19bca:	18ba      	adds	r2, r7, r2
   19bcc:	7812      	ldrb	r2, [r2, #0]
   19bce:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
   19bd0:	687b      	ldr	r3, [r7, #4]
   19bd2:	b2da      	uxtb	r2, r3
   19bd4:	69bb      	ldr	r3, [r7, #24]
   19bd6:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
   19bd8:	69bb      	ldr	r3, [r7, #24]
   19bda:	2226      	movs	r2, #38	; 0x26
   19bdc:	18ba      	adds	r2, r7, r2
   19bde:	8812      	ldrh	r2, [r2, #0]
   19be0:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   19be2:	4b11      	ldr	r3, [pc, #68]	; (19c28 <prvTraceStoreKernelCallWithNumericParamOnly+0xf8>)
   19be4:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   19be6:	4b08      	ldr	r3, [pc, #32]	; (19c08 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   19be8:	681b      	ldr	r3, [r3, #0]
   19bea:	1e5a      	subs	r2, r3, #1
   19bec:	4b06      	ldr	r3, [pc, #24]	; (19c08 <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   19bee:	601a      	str	r2, [r3, #0]
   19bf0:	6a3b      	ldr	r3, [r7, #32]
   19bf2:	60fb      	str	r3, [r7, #12]
   19bf4:	68fb      	ldr	r3, [r7, #12]
   19bf6:	f383 8810 	msr	PRIMASK, r3
}
   19bfa:	46bd      	mov	sp, r7
   19bfc:	b00a      	add	sp, #40	; 0x28
   19bfe:	bd80      	pop	{r7, pc}
   19c00:	000386f4 	.word	0x000386f4
   19c04:	0001a6cd 	.word	0x0001a6cd
   19c08:	20000d4c 	.word	0x20000d4c
   19c0c:	0003874c 	.word	0x0003874c
   19c10:	20000df4 	.word	0x20000df4
   19c14:	20000d58 	.word	0x20000d58
   19c18:	0001a8e1 	.word	0x0001a8e1
   19c1c:	0000ffff 	.word	0x0000ffff
   19c20:	00019aa5 	.word	0x00019aa5
   19c24:	0001a285 	.word	0x0001a285
   19c28:	0001a889 	.word	0x0001a889

00019c2c <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
   19c2c:	b590      	push	{r4, r7, lr}
   19c2e:	b089      	sub	sp, #36	; 0x24
   19c30:	af00      	add	r7, sp, #0
   19c32:	0002      	movs	r2, r0
   19c34:	1dfb      	adds	r3, r7, #7
   19c36:	701a      	strb	r2, [r3, #0]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
   19c38:	1dfb      	adds	r3, r7, #7
   19c3a:	781b      	ldrb	r3, [r3, #0]
   19c3c:	2b0f      	cmp	r3, #15
   19c3e:	d904      	bls.n	19c4a <prvTraceStoreTaskswitch+0x1e>
   19c40:	4b34      	ldr	r3, [pc, #208]	; (19d14 <prvTraceStoreTaskswitch+0xe8>)
   19c42:	0018      	movs	r0, r3
   19c44:	4b34      	ldr	r3, [pc, #208]	; (19d18 <prvTraceStoreTaskswitch+0xec>)
   19c46:	4798      	blx	r3
   19c48:	e061      	b.n	19d0e <prvTraceStoreTaskswitch+0xe2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19c4a:	f3ef 8310 	mrs	r3, PRIMASK
   19c4e:	60fb      	str	r3, [r7, #12]
  return(result);
   19c50:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
   19c52:	61fb      	str	r3, [r7, #28]
   19c54:	2301      	movs	r3, #1
   19c56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   19c58:	693b      	ldr	r3, [r7, #16]
   19c5a:	f383 8810 	msr	PRIMASK, r3
   19c5e:	4b2f      	ldr	r3, [pc, #188]	; (19d1c <prvTraceStoreTaskswitch+0xf0>)
   19c60:	681b      	ldr	r3, [r3, #0]
   19c62:	1c5a      	adds	r2, r3, #1
   19c64:	4b2d      	ldr	r3, [pc, #180]	; (19d1c <prvTraceStoreTaskswitch+0xf0>)
   19c66:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
   19c68:	4b2d      	ldr	r3, [pc, #180]	; (19d20 <prvTraceStoreTaskswitch+0xf4>)
   19c6a:	781b      	ldrb	r3, [r3, #0]
   19c6c:	1dfa      	adds	r2, r7, #7
   19c6e:	7812      	ldrb	r2, [r2, #0]
   19c70:	429a      	cmp	r2, r3
   19c72:	d042      	beq.n	19cfa <prvTraceStoreTaskswitch+0xce>
   19c74:	4b2b      	ldr	r3, [pc, #172]	; (19d24 <prvTraceStoreTaskswitch+0xf8>)
   19c76:	681b      	ldr	r3, [r3, #0]
   19c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19c7a:	2b00      	cmp	r3, #0
   19c7c:	d03d      	beq.n	19cfa <prvTraceStoreTaskswitch+0xce>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
   19c7e:	4b2a      	ldr	r3, [pc, #168]	; (19d28 <prvTraceStoreTaskswitch+0xfc>)
   19c80:	2200      	movs	r2, #0
   19c82:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   19c84:	231a      	movs	r3, #26
   19c86:	18fc      	adds	r4, r7, r3
   19c88:	4b28      	ldr	r3, [pc, #160]	; (19d2c <prvTraceStoreTaskswitch+0x100>)
   19c8a:	0018      	movs	r0, r3
   19c8c:	4b28      	ldr	r3, [pc, #160]	; (19d30 <prvTraceStoreTaskswitch+0x104>)
   19c8e:	4798      	blx	r3
   19c90:	0003      	movs	r3, r0
   19c92:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
   19c94:	4b22      	ldr	r3, [pc, #136]	; (19d20 <prvTraceStoreTaskswitch+0xf4>)
   19c96:	1dfa      	adds	r2, r7, #7
   19c98:	7812      	ldrb	r2, [r2, #0]
   19c9a:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
   19c9c:	2319      	movs	r3, #25
   19c9e:	18fb      	adds	r3, r7, r3
   19ca0:	4a1f      	ldr	r2, [pc, #124]	; (19d20 <prvTraceStoreTaskswitch+0xf4>)
   19ca2:	7812      	ldrb	r2, [r2, #0]
   19ca4:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
   19ca6:	4b23      	ldr	r3, [pc, #140]	; (19d34 <prvTraceStoreTaskswitch+0x108>)
   19ca8:	4798      	blx	r3
   19caa:	0003      	movs	r3, r0
   19cac:	617b      	str	r3, [r7, #20]

		if (ts != NULL)
   19cae:	697b      	ldr	r3, [r7, #20]
   19cb0:	2b00      	cmp	r3, #0
   19cb2:	d022      	beq.n	19cfa <prvTraceStoreTaskswitch+0xce>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
   19cb4:	4b1a      	ldr	r3, [pc, #104]	; (19d20 <prvTraceStoreTaskswitch+0xf4>)
   19cb6:	781b      	ldrb	r3, [r3, #0]
   19cb8:	0019      	movs	r1, r3
   19cba:	2003      	movs	r0, #3
   19cbc:	4b1e      	ldr	r3, [pc, #120]	; (19d38 <prvTraceStoreTaskswitch+0x10c>)
   19cbe:	4798      	blx	r3
   19cc0:	0003      	movs	r3, r0
   19cc2:	2b01      	cmp	r3, #1
   19cc4:	d103      	bne.n	19cce <prvTraceStoreTaskswitch+0xa2>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
   19cc6:	697b      	ldr	r3, [r7, #20]
   19cc8:	2207      	movs	r2, #7
   19cca:	701a      	strb	r2, [r3, #0]
   19ccc:	e002      	b.n	19cd4 <prvTraceStoreTaskswitch+0xa8>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
   19cce:	697b      	ldr	r3, [r7, #20]
   19cd0:	2206      	movs	r2, #6
   19cd2:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
   19cd4:	697b      	ldr	r3, [r7, #20]
   19cd6:	221a      	movs	r2, #26
   19cd8:	18ba      	adds	r2, r7, r2
   19cda:	8812      	ldrh	r2, [r2, #0]
   19cdc:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
   19cde:	697b      	ldr	r3, [r7, #20]
   19ce0:	2219      	movs	r2, #25
   19ce2:	18ba      	adds	r2, r7, r2
   19ce4:	7812      	ldrb	r2, [r2, #0]
   19ce6:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
   19ce8:	4b0d      	ldr	r3, [pc, #52]	; (19d20 <prvTraceStoreTaskswitch+0xf4>)
   19cea:	781b      	ldrb	r3, [r3, #0]
   19cec:	2201      	movs	r2, #1
   19cee:	0019      	movs	r1, r3
   19cf0:	2003      	movs	r0, #3
   19cf2:	4b12      	ldr	r3, [pc, #72]	; (19d3c <prvTraceStoreTaskswitch+0x110>)
   19cf4:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
   19cf6:	4b12      	ldr	r3, [pc, #72]	; (19d40 <prvTraceStoreTaskswitch+0x114>)
   19cf8:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
   19cfa:	4b08      	ldr	r3, [pc, #32]	; (19d1c <prvTraceStoreTaskswitch+0xf0>)
   19cfc:	681b      	ldr	r3, [r3, #0]
   19cfe:	1e5a      	subs	r2, r3, #1
   19d00:	4b06      	ldr	r3, [pc, #24]	; (19d1c <prvTraceStoreTaskswitch+0xf0>)
   19d02:	601a      	str	r2, [r3, #0]
   19d04:	69fb      	ldr	r3, [r7, #28]
   19d06:	60bb      	str	r3, [r7, #8]
   19d08:	68bb      	ldr	r3, [r7, #8]
   19d0a:	f383 8810 	msr	PRIMASK, r3
}
   19d0e:	46bd      	mov	sp, r7
   19d10:	b009      	add	sp, #36	; 0x24
   19d12:	bd90      	pop	{r4, r7, pc}
   19d14:	00038784 	.word	0x00038784
   19d18:	0001a6cd 	.word	0x0001a6cd
   19d1c:	20000d4c 	.word	0x20000d4c
   19d20:	20000d58 	.word	0x20000d58
   19d24:	20000df4 	.word	0x20000df4
   19d28:	20000d38 	.word	0x20000d38
   19d2c:	0000ffff 	.word	0x0000ffff
   19d30:	0001a8e1 	.word	0x0001a8e1
   19d34:	0001a285 	.word	0x0001a285
   19d38:	00019f29 	.word	0x00019f29
   19d3c:	00019e85 	.word	0x00019e85
   19d40:	0001a889 	.word	0x0001a889

00019d44 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
   19d44:	b590      	push	{r4, r7, lr}
   19d46:	b083      	sub	sp, #12
   19d48:	af00      	add	r7, sp, #0
   19d4a:	0004      	movs	r4, r0
   19d4c:	0008      	movs	r0, r1
   19d4e:	0011      	movs	r1, r2
   19d50:	1dfb      	adds	r3, r7, #7
   19d52:	1c22      	adds	r2, r4, #0
   19d54:	701a      	strb	r2, [r3, #0]
   19d56:	1dbb      	adds	r3, r7, #6
   19d58:	1c02      	adds	r2, r0, #0
   19d5a:	701a      	strb	r2, [r3, #0]
   19d5c:	1d7b      	adds	r3, r7, #5
   19d5e:	1c0a      	adds	r2, r1, #0
   19d60:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   19d62:	1dfb      	adds	r3, r7, #7
   19d64:	781b      	ldrb	r3, [r3, #0]
   19d66:	2b08      	cmp	r3, #8
   19d68:	d904      	bls.n	19d74 <prvTraceSetPriorityProperty+0x30>
   19d6a:	4b1a      	ldr	r3, [pc, #104]	; (19dd4 <prvTraceSetPriorityProperty+0x90>)
   19d6c:	0018      	movs	r0, r3
   19d6e:	4b1a      	ldr	r3, [pc, #104]	; (19dd8 <prvTraceSetPriorityProperty+0x94>)
   19d70:	4798      	blx	r3
   19d72:	e02c      	b.n	19dce <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   19d74:	4b19      	ldr	r3, [pc, #100]	; (19ddc <prvTraceSetPriorityProperty+0x98>)
   19d76:	681a      	ldr	r2, [r3, #0]
   19d78:	1dfb      	adds	r3, r7, #7
   19d7a:	781b      	ldrb	r3, [r3, #0]
   19d7c:	2164      	movs	r1, #100	; 0x64
   19d7e:	18d3      	adds	r3, r2, r3
   19d80:	185b      	adds	r3, r3, r1
   19d82:	781b      	ldrb	r3, [r3, #0]
   19d84:	1dba      	adds	r2, r7, #6
   19d86:	7812      	ldrb	r2, [r2, #0]
   19d88:	429a      	cmp	r2, r3
   19d8a:	d904      	bls.n	19d96 <prvTraceSetPriorityProperty+0x52>
   19d8c:	4b14      	ldr	r3, [pc, #80]	; (19de0 <prvTraceSetPriorityProperty+0x9c>)
   19d8e:	0018      	movs	r0, r3
   19d90:	4b11      	ldr	r3, [pc, #68]	; (19dd8 <prvTraceSetPriorityProperty+0x94>)
   19d92:	4798      	blx	r3
   19d94:	e01b      	b.n	19dce <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
   19d96:	4b11      	ldr	r3, [pc, #68]	; (19ddc <prvTraceSetPriorityProperty+0x98>)
   19d98:	681c      	ldr	r4, [r3, #0]
   19d9a:	1dfb      	adds	r3, r7, #7
   19d9c:	781a      	ldrb	r2, [r3, #0]
   19d9e:	1dbb      	adds	r3, r7, #6
   19da0:	781b      	ldrb	r3, [r3, #0]
   19da2:	0011      	movs	r1, r2
   19da4:	0018      	movs	r0, r3
   19da6:	4b0f      	ldr	r3, [pc, #60]	; (19de4 <prvTraceSetPriorityProperty+0xa0>)
   19da8:	4798      	blx	r3
   19daa:	0003      	movs	r3, r0
   19dac:	0018      	movs	r0, r3
   19dae:	4b0b      	ldr	r3, [pc, #44]	; (19ddc <prvTraceSetPriorityProperty+0x98>)
   19db0:	681a      	ldr	r2, [r3, #0]
   19db2:	1dfb      	adds	r3, r7, #7
   19db4:	781b      	ldrb	r3, [r3, #0]
   19db6:	2170      	movs	r1, #112	; 0x70
   19db8:	18d3      	adds	r3, r2, r3
   19dba:	185b      	adds	r3, r3, r1
   19dbc:	781b      	ldrb	r3, [r3, #0]
   19dbe:	18c3      	adds	r3, r0, r3
   19dc0:	3301      	adds	r3, #1
   19dc2:	229c      	movs	r2, #156	; 0x9c
   19dc4:	18e3      	adds	r3, r4, r3
   19dc6:	189b      	adds	r3, r3, r2
   19dc8:	1d7a      	adds	r2, r7, #5
   19dca:	7812      	ldrb	r2, [r2, #0]
   19dcc:	701a      	strb	r2, [r3, #0]
}
   19dce:	46bd      	mov	sp, r7
   19dd0:	b003      	add	sp, #12
   19dd2:	bd90      	pop	{r4, r7, pc}
   19dd4:	00038918 	.word	0x00038918
   19dd8:	0001a6cd 	.word	0x0001a6cd
   19ddc:	20000df4 	.word	0x20000df4
   19de0:	00038964 	.word	0x00038964
   19de4:	0001a2d9 	.word	0x0001a2d9

00019de8 <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
   19de8:	b590      	push	{r4, r7, lr}
   19dea:	b083      	sub	sp, #12
   19dec:	af00      	add	r7, sp, #0
   19dee:	0002      	movs	r2, r0
   19df0:	1dfb      	adds	r3, r7, #7
   19df2:	701a      	strb	r2, [r3, #0]
   19df4:	1dbb      	adds	r3, r7, #6
   19df6:	1c0a      	adds	r2, r1, #0
   19df8:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   19dfa:	1dfb      	adds	r3, r7, #7
   19dfc:	781b      	ldrb	r3, [r3, #0]
   19dfe:	2b08      	cmp	r3, #8
   19e00:	d905      	bls.n	19e0e <prvTraceGetPriorityProperty+0x26>
   19e02:	4b1b      	ldr	r3, [pc, #108]	; (19e70 <prvTraceGetPriorityProperty+0x88>)
   19e04:	0018      	movs	r0, r3
   19e06:	4b1b      	ldr	r3, [pc, #108]	; (19e74 <prvTraceGetPriorityProperty+0x8c>)
   19e08:	4798      	blx	r3
   19e0a:	2300      	movs	r3, #0
   19e0c:	e02b      	b.n	19e66 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   19e0e:	4b1a      	ldr	r3, [pc, #104]	; (19e78 <prvTraceGetPriorityProperty+0x90>)
   19e10:	681a      	ldr	r2, [r3, #0]
   19e12:	1dfb      	adds	r3, r7, #7
   19e14:	781b      	ldrb	r3, [r3, #0]
   19e16:	2164      	movs	r1, #100	; 0x64
   19e18:	18d3      	adds	r3, r2, r3
   19e1a:	185b      	adds	r3, r3, r1
   19e1c:	781b      	ldrb	r3, [r3, #0]
   19e1e:	1dba      	adds	r2, r7, #6
   19e20:	7812      	ldrb	r2, [r2, #0]
   19e22:	429a      	cmp	r2, r3
   19e24:	d905      	bls.n	19e32 <prvTraceGetPriorityProperty+0x4a>
   19e26:	4b15      	ldr	r3, [pc, #84]	; (19e7c <prvTraceGetPriorityProperty+0x94>)
   19e28:	0018      	movs	r0, r3
   19e2a:	4b12      	ldr	r3, [pc, #72]	; (19e74 <prvTraceGetPriorityProperty+0x8c>)
   19e2c:	4798      	blx	r3
   19e2e:	2300      	movs	r3, #0
   19e30:	e019      	b.n	19e66 <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
   19e32:	4b11      	ldr	r3, [pc, #68]	; (19e78 <prvTraceGetPriorityProperty+0x90>)
   19e34:	681c      	ldr	r4, [r3, #0]
   19e36:	1dfb      	adds	r3, r7, #7
   19e38:	781a      	ldrb	r2, [r3, #0]
   19e3a:	1dbb      	adds	r3, r7, #6
   19e3c:	781b      	ldrb	r3, [r3, #0]
   19e3e:	0011      	movs	r1, r2
   19e40:	0018      	movs	r0, r3
   19e42:	4b0f      	ldr	r3, [pc, #60]	; (19e80 <prvTraceGetPriorityProperty+0x98>)
   19e44:	4798      	blx	r3
   19e46:	0003      	movs	r3, r0
   19e48:	0018      	movs	r0, r3
   19e4a:	4b0b      	ldr	r3, [pc, #44]	; (19e78 <prvTraceGetPriorityProperty+0x90>)
   19e4c:	681a      	ldr	r2, [r3, #0]
   19e4e:	1dfb      	adds	r3, r7, #7
   19e50:	781b      	ldrb	r3, [r3, #0]
   19e52:	2170      	movs	r1, #112	; 0x70
   19e54:	18d3      	adds	r3, r2, r3
   19e56:	185b      	adds	r3, r3, r1
   19e58:	781b      	ldrb	r3, [r3, #0]
   19e5a:	18c3      	adds	r3, r0, r3
   19e5c:	3301      	adds	r3, #1
   19e5e:	229c      	movs	r2, #156	; 0x9c
   19e60:	18e3      	adds	r3, r4, r3
   19e62:	189b      	adds	r3, r3, r2
   19e64:	781b      	ldrb	r3, [r3, #0]
}
   19e66:	0018      	movs	r0, r3
   19e68:	46bd      	mov	sp, r7
   19e6a:	b003      	add	sp, #12
   19e6c:	bd90      	pop	{r4, r7, pc}
   19e6e:	46c0      	nop			; (mov r8, r8)
   19e70:	000389a4 	.word	0x000389a4
   19e74:	0001a6cd 	.word	0x0001a6cd
   19e78:	20000df4 	.word	0x20000df4
   19e7c:	000389f0 	.word	0x000389f0
   19e80:	0001a2d9 	.word	0x0001a2d9

00019e84 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
   19e84:	b590      	push	{r4, r7, lr}
   19e86:	b083      	sub	sp, #12
   19e88:	af00      	add	r7, sp, #0
   19e8a:	0004      	movs	r4, r0
   19e8c:	0008      	movs	r0, r1
   19e8e:	0011      	movs	r1, r2
   19e90:	1dfb      	adds	r3, r7, #7
   19e92:	1c22      	adds	r2, r4, #0
   19e94:	701a      	strb	r2, [r3, #0]
   19e96:	1dbb      	adds	r3, r7, #6
   19e98:	1c02      	adds	r2, r0, #0
   19e9a:	701a      	strb	r2, [r3, #0]
   19e9c:	1d7b      	adds	r3, r7, #5
   19e9e:	1c0a      	adds	r2, r1, #0
   19ea0:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   19ea2:	1dfb      	adds	r3, r7, #7
   19ea4:	781b      	ldrb	r3, [r3, #0]
   19ea6:	2b08      	cmp	r3, #8
   19ea8:	d904      	bls.n	19eb4 <prvTraceSetObjectState+0x30>
   19eaa:	4b1a      	ldr	r3, [pc, #104]	; (19f14 <prvTraceSetObjectState+0x90>)
   19eac:	0018      	movs	r0, r3
   19eae:	4b1a      	ldr	r3, [pc, #104]	; (19f18 <prvTraceSetObjectState+0x94>)
   19eb0:	4798      	blx	r3
   19eb2:	e02b      	b.n	19f0c <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   19eb4:	4b19      	ldr	r3, [pc, #100]	; (19f1c <prvTraceSetObjectState+0x98>)
   19eb6:	681a      	ldr	r2, [r3, #0]
   19eb8:	1dfb      	adds	r3, r7, #7
   19eba:	781b      	ldrb	r3, [r3, #0]
   19ebc:	2164      	movs	r1, #100	; 0x64
   19ebe:	18d3      	adds	r3, r2, r3
   19ec0:	185b      	adds	r3, r3, r1
   19ec2:	781b      	ldrb	r3, [r3, #0]
   19ec4:	1dba      	adds	r2, r7, #6
   19ec6:	7812      	ldrb	r2, [r2, #0]
   19ec8:	429a      	cmp	r2, r3
   19eca:	d904      	bls.n	19ed6 <prvTraceSetObjectState+0x52>
   19ecc:	4b14      	ldr	r3, [pc, #80]	; (19f20 <prvTraceSetObjectState+0x9c>)
   19ece:	0018      	movs	r0, r3
   19ed0:	4b11      	ldr	r3, [pc, #68]	; (19f18 <prvTraceSetObjectState+0x94>)
   19ed2:	4798      	blx	r3
   19ed4:	e01a      	b.n	19f0c <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
   19ed6:	4b11      	ldr	r3, [pc, #68]	; (19f1c <prvTraceSetObjectState+0x98>)
   19ed8:	681c      	ldr	r4, [r3, #0]
   19eda:	1dfb      	adds	r3, r7, #7
   19edc:	781a      	ldrb	r2, [r3, #0]
   19ede:	1dbb      	adds	r3, r7, #6
   19ee0:	781b      	ldrb	r3, [r3, #0]
   19ee2:	0011      	movs	r1, r2
   19ee4:	0018      	movs	r0, r3
   19ee6:	4b0f      	ldr	r3, [pc, #60]	; (19f24 <prvTraceSetObjectState+0xa0>)
   19ee8:	4798      	blx	r3
   19eea:	0003      	movs	r3, r0
   19eec:	0018      	movs	r0, r3
   19eee:	4b0b      	ldr	r3, [pc, #44]	; (19f1c <prvTraceSetObjectState+0x98>)
   19ef0:	681a      	ldr	r2, [r3, #0]
   19ef2:	1dfb      	adds	r3, r7, #7
   19ef4:	781b      	ldrb	r3, [r3, #0]
   19ef6:	2170      	movs	r1, #112	; 0x70
   19ef8:	18d3      	adds	r3, r2, r3
   19efa:	185b      	adds	r3, r3, r1
   19efc:	781b      	ldrb	r3, [r3, #0]
   19efe:	18c3      	adds	r3, r0, r3
   19f00:	229c      	movs	r2, #156	; 0x9c
   19f02:	18e3      	adds	r3, r4, r3
   19f04:	189b      	adds	r3, r3, r2
   19f06:	1d7a      	adds	r2, r7, #5
   19f08:	7812      	ldrb	r2, [r2, #0]
   19f0a:	701a      	strb	r2, [r3, #0]
}
   19f0c:	46bd      	mov	sp, r7
   19f0e:	b003      	add	sp, #12
   19f10:	bd90      	pop	{r4, r7, pc}
   19f12:	46c0      	nop			; (mov r8, r8)
   19f14:	00038a30 	.word	0x00038a30
   19f18:	0001a6cd 	.word	0x0001a6cd
   19f1c:	20000df4 	.word	0x20000df4
   19f20:	00038a74 	.word	0x00038a74
   19f24:	0001a2d9 	.word	0x0001a2d9

00019f28 <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
   19f28:	b590      	push	{r4, r7, lr}
   19f2a:	b083      	sub	sp, #12
   19f2c:	af00      	add	r7, sp, #0
   19f2e:	0002      	movs	r2, r0
   19f30:	1dfb      	adds	r3, r7, #7
   19f32:	701a      	strb	r2, [r3, #0]
   19f34:	1dbb      	adds	r3, r7, #6
   19f36:	1c0a      	adds	r2, r1, #0
   19f38:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   19f3a:	1dfb      	adds	r3, r7, #7
   19f3c:	781b      	ldrb	r3, [r3, #0]
   19f3e:	2b08      	cmp	r3, #8
   19f40:	d905      	bls.n	19f4e <prvTraceGetObjectState+0x26>
   19f42:	4b1a      	ldr	r3, [pc, #104]	; (19fac <prvTraceGetObjectState+0x84>)
   19f44:	0018      	movs	r0, r3
   19f46:	4b1a      	ldr	r3, [pc, #104]	; (19fb0 <prvTraceGetObjectState+0x88>)
   19f48:	4798      	blx	r3
   19f4a:	2300      	movs	r3, #0
   19f4c:	e02a      	b.n	19fa4 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   19f4e:	4b19      	ldr	r3, [pc, #100]	; (19fb4 <prvTraceGetObjectState+0x8c>)
   19f50:	681a      	ldr	r2, [r3, #0]
   19f52:	1dfb      	adds	r3, r7, #7
   19f54:	781b      	ldrb	r3, [r3, #0]
   19f56:	2164      	movs	r1, #100	; 0x64
   19f58:	18d3      	adds	r3, r2, r3
   19f5a:	185b      	adds	r3, r3, r1
   19f5c:	781b      	ldrb	r3, [r3, #0]
   19f5e:	1dba      	adds	r2, r7, #6
   19f60:	7812      	ldrb	r2, [r2, #0]
   19f62:	429a      	cmp	r2, r3
   19f64:	d905      	bls.n	19f72 <prvTraceGetObjectState+0x4a>
   19f66:	4b14      	ldr	r3, [pc, #80]	; (19fb8 <prvTraceGetObjectState+0x90>)
   19f68:	0018      	movs	r0, r3
   19f6a:	4b11      	ldr	r3, [pc, #68]	; (19fb0 <prvTraceGetObjectState+0x88>)
   19f6c:	4798      	blx	r3
   19f6e:	2300      	movs	r3, #0
   19f70:	e018      	b.n	19fa4 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
   19f72:	4b10      	ldr	r3, [pc, #64]	; (19fb4 <prvTraceGetObjectState+0x8c>)
   19f74:	681c      	ldr	r4, [r3, #0]
   19f76:	1dfb      	adds	r3, r7, #7
   19f78:	781a      	ldrb	r2, [r3, #0]
   19f7a:	1dbb      	adds	r3, r7, #6
   19f7c:	781b      	ldrb	r3, [r3, #0]
   19f7e:	0011      	movs	r1, r2
   19f80:	0018      	movs	r0, r3
   19f82:	4b0e      	ldr	r3, [pc, #56]	; (19fbc <prvTraceGetObjectState+0x94>)
   19f84:	4798      	blx	r3
   19f86:	0003      	movs	r3, r0
   19f88:	0018      	movs	r0, r3
   19f8a:	4b0a      	ldr	r3, [pc, #40]	; (19fb4 <prvTraceGetObjectState+0x8c>)
   19f8c:	681a      	ldr	r2, [r3, #0]
   19f8e:	1dfb      	adds	r3, r7, #7
   19f90:	781b      	ldrb	r3, [r3, #0]
   19f92:	2170      	movs	r1, #112	; 0x70
   19f94:	18d3      	adds	r3, r2, r3
   19f96:	185b      	adds	r3, r3, r1
   19f98:	781b      	ldrb	r3, [r3, #0]
   19f9a:	18c3      	adds	r3, r0, r3
   19f9c:	229c      	movs	r2, #156	; 0x9c
   19f9e:	18e3      	adds	r3, r4, r3
   19fa0:	189b      	adds	r3, r3, r2
   19fa2:	781b      	ldrb	r3, [r3, #0]
}
   19fa4:	0018      	movs	r0, r3
   19fa6:	46bd      	mov	sp, r7
   19fa8:	b003      	add	sp, #12
   19faa:	bd90      	pop	{r4, r7, pc}
   19fac:	00038ab0 	.word	0x00038ab0
   19fb0:	0001a6cd 	.word	0x0001a6cd
   19fb4:	20000df4 	.word	0x20000df4
   19fb8:	00038af4 	.word	0x00038af4
   19fbc:	0001a2d9 	.word	0x0001a2d9

00019fc0 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
   19fc0:	b590      	push	{r4, r7, lr}
   19fc2:	b083      	sub	sp, #12
   19fc4:	af00      	add	r7, sp, #0
   19fc6:	0002      	movs	r2, r0
   19fc8:	1dfb      	adds	r3, r7, #7
   19fca:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   19fcc:	4b11      	ldr	r3, [pc, #68]	; (1a014 <prvTraceSetTaskInstanceFinished+0x54>)
   19fce:	681b      	ldr	r3, [r3, #0]
   19fd0:	2267      	movs	r2, #103	; 0x67
   19fd2:	5c9b      	ldrb	r3, [r3, r2]
   19fd4:	1dfa      	adds	r2, r7, #7
   19fd6:	7812      	ldrb	r2, [r2, #0]
   19fd8:	429a      	cmp	r2, r3
   19fda:	d904      	bls.n	19fe6 <prvTraceSetTaskInstanceFinished+0x26>
   19fdc:	4b0e      	ldr	r3, [pc, #56]	; (1a018 <prvTraceSetTaskInstanceFinished+0x58>)
   19fde:	0018      	movs	r0, r3
   19fe0:	4b0e      	ldr	r3, [pc, #56]	; (1a01c <prvTraceSetTaskInstanceFinished+0x5c>)
   19fe2:	4798      	blx	r3
   19fe4:	e013      	b.n	1a00e <prvTraceSetTaskInstanceFinished+0x4e>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
   19fe6:	4b0b      	ldr	r3, [pc, #44]	; (1a014 <prvTraceSetTaskInstanceFinished+0x54>)
   19fe8:	681c      	ldr	r4, [r3, #0]
   19fea:	1dfb      	adds	r3, r7, #7
   19fec:	781b      	ldrb	r3, [r3, #0]
   19fee:	2103      	movs	r1, #3
   19ff0:	0018      	movs	r0, r3
   19ff2:	4b0b      	ldr	r3, [pc, #44]	; (1a020 <prvTraceSetTaskInstanceFinished+0x60>)
   19ff4:	4798      	blx	r3
   19ff6:	0003      	movs	r3, r0
   19ff8:	0019      	movs	r1, r3
   19ffa:	4b06      	ldr	r3, [pc, #24]	; (1a014 <prvTraceSetTaskInstanceFinished+0x54>)
   19ffc:	681b      	ldr	r3, [r3, #0]
   19ffe:	2273      	movs	r2, #115	; 0x73
   1a000:	5c9b      	ldrb	r3, [r3, r2]
   1a002:	18cb      	adds	r3, r1, r3
   1a004:	229c      	movs	r2, #156	; 0x9c
   1a006:	18e3      	adds	r3, r4, r3
   1a008:	189b      	adds	r3, r3, r2
   1a00a:	2200      	movs	r2, #0
   1a00c:	701a      	strb	r2, [r3, #0]
#endif
}
   1a00e:	46bd      	mov	sp, r7
   1a010:	b003      	add	sp, #12
   1a012:	bd90      	pop	{r4, r7, pc}
   1a014:	20000df4 	.word	0x20000df4
   1a018:	00038b30 	.word	0x00038b30
   1a01c:	0001a6cd 	.word	0x0001a6cd
   1a020:	0001a2d9 	.word	0x0001a2d9

0001a024 <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
   1a024:	b580      	push	{r7, lr}
   1a026:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
   1a028:	4b75      	ldr	r3, [pc, #468]	; (1a200 <prvTraceInitTraceData+0x1dc>)
   1a02a:	681b      	ldr	r3, [r3, #0]
   1a02c:	2b00      	cmp	r3, #0
   1a02e:	d103      	bne.n	1a038 <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
   1a030:	4b73      	ldr	r3, [pc, #460]	; (1a200 <prvTraceInitTraceData+0x1dc>)
   1a032:	4a74      	ldr	r2, [pc, #464]	; (1a204 <prvTraceInitTraceData+0x1e0>)
   1a034:	601a      	str	r2, [r3, #0]
   1a036:	e006      	b.n	1a046 <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
   1a038:	4b71      	ldr	r3, [pc, #452]	; (1a200 <prvTraceInitTraceData+0x1dc>)
   1a03a:	681b      	ldr	r3, [r3, #0]
   1a03c:	781b      	ldrb	r3, [r3, #0]
   1a03e:	b2db      	uxtb	r3, r3
   1a040:	2b01      	cmp	r3, #1
   1a042:	d100      	bne.n	1a046 <prvTraceInitTraceData+0x22>
   1a044:	e0d8      	b.n	1a1f8 <prvTraceInitTraceData+0x1d4>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
   1a046:	4b70      	ldr	r3, [pc, #448]	; (1a208 <prvTraceInitTraceData+0x1e4>)
   1a048:	681a      	ldr	r2, [r3, #0]
   1a04a:	4b70      	ldr	r3, [pc, #448]	; (1a20c <prvTraceInitTraceData+0x1e8>)
   1a04c:	601a      	str	r2, [r3, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
   1a04e:	4b6c      	ldr	r3, [pc, #432]	; (1a200 <prvTraceInitTraceData+0x1dc>)
   1a050:	6818      	ldr	r0, [r3, #0]
   1a052:	23bd      	movs	r3, #189	; 0xbd
   1a054:	011b      	lsls	r3, r3, #4
   1a056:	001a      	movs	r2, r3
   1a058:	2100      	movs	r1, #0
   1a05a:	4b6d      	ldr	r3, [pc, #436]	; (1a210 <prvTraceInitTraceData+0x1ec>)
   1a05c:	4798      	blx	r3
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
   1a05e:	4b68      	ldr	r3, [pc, #416]	; (1a200 <prvTraceInitTraceData+0x1dc>)
   1a060:	681b      	ldr	r3, [r3, #0]
   1a062:	4a6c      	ldr	r2, [pc, #432]	; (1a214 <prvTraceInitTraceData+0x1f0>)
   1a064:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
   1a066:	4b66      	ldr	r3, [pc, #408]	; (1a200 <prvTraceInitTraceData+0x1dc>)
   1a068:	681b      	ldr	r3, [r3, #0]
   1a06a:	2205      	movs	r2, #5
   1a06c:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
   1a06e:	4b64      	ldr	r3, [pc, #400]	; (1a200 <prvTraceInitTraceData+0x1dc>)
   1a070:	681b      	ldr	r3, [r3, #0]
   1a072:	2200      	movs	r2, #0
   1a074:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
   1a076:	4b62      	ldr	r3, [pc, #392]	; (1a200 <prvTraceInitTraceData+0x1dc>)
   1a078:	681b      	ldr	r3, [r3, #0]
   1a07a:	22bd      	movs	r2, #189	; 0xbd
   1a07c:	0112      	lsls	r2, r2, #4
   1a07e:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
   1a080:	4b5f      	ldr	r3, [pc, #380]	; (1a200 <prvTraceInitTraceData+0x1dc>)
   1a082:	681b      	ldr	r3, [r3, #0]
   1a084:	2296      	movs	r2, #150	; 0x96
   1a086:	0052      	lsls	r2, r2, #1
   1a088:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
   1a08a:	4b5d      	ldr	r3, [pc, #372]	; (1a200 <prvTraceInitTraceData+0x1dc>)
   1a08c:	681b      	ldr	r3, [r3, #0]
   1a08e:	4a62      	ldr	r2, [pc, #392]	; (1a218 <prvTraceInitTraceData+0x1f4>)
   1a090:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
   1a092:	4b5b      	ldr	r3, [pc, #364]	; (1a200 <prvTraceInitTraceData+0x1dc>)
   1a094:	681b      	ldr	r3, [r3, #0]
   1a096:	2200      	movs	r2, #0
   1a098:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
   1a09a:	4b59      	ldr	r3, [pc, #356]	; (1a200 <prvTraceInitTraceData+0x1dc>)
   1a09c:	681b      	ldr	r3, [r3, #0]
   1a09e:	2200      	movs	r2, #0
   1a0a0:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
   1a0a2:	4b5e      	ldr	r3, [pc, #376]	; (1a21c <prvTraceInitTraceData+0x1f8>)
   1a0a4:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
   1a0a6:	4b56      	ldr	r3, [pc, #344]	; (1a200 <prvTraceInitTraceData+0x1dc>)
   1a0a8:	681b      	ldr	r3, [r3, #0]
   1a0aa:	4a5d      	ldr	r2, [pc, #372]	; (1a220 <prvTraceInitTraceData+0x1fc>)
   1a0ac:	495d      	ldr	r1, [pc, #372]	; (1a224 <prvTraceInitTraceData+0x200>)
   1a0ae:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
   1a0b0:	4b53      	ldr	r3, [pc, #332]	; (1a200 <prvTraceInitTraceData+0x1dc>)
   1a0b2:	681a      	ldr	r2, [r3, #0]
   1a0b4:	23ac      	movs	r3, #172	; 0xac
   1a0b6:	00db      	lsls	r3, r3, #3
   1a0b8:	21c8      	movs	r1, #200	; 0xc8
   1a0ba:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
   1a0bc:	4b50      	ldr	r3, [pc, #320]	; (1a200 <prvTraceInitTraceData+0x1dc>)
   1a0be:	681b      	ldr	r3, [r3, #0]
   1a0c0:	4a59      	ldr	r2, [pc, #356]	; (1a228 <prvTraceInitTraceData+0x204>)
   1a0c2:	2101      	movs	r1, #1
   1a0c4:	5099      	str	r1, [r3, r2]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
   1a0c6:	4b4e      	ldr	r3, [pc, #312]	; (1a200 <prvTraceInitTraceData+0x1dc>)
   1a0c8:	681a      	ldr	r2, [r3, #0]
   1a0ca:	23d7      	movs	r3, #215	; 0xd7
   1a0cc:	00db      	lsls	r3, r3, #3
   1a0ce:	4957      	ldr	r1, [pc, #348]	; (1a22c <prvTraceInitTraceData+0x208>)
   1a0d0:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
   1a0d2:	4b4b      	ldr	r3, [pc, #300]	; (1a200 <prvTraceInitTraceData+0x1dc>)
   1a0d4:	681b      	ldr	r3, [r3, #0]
   1a0d6:	4a56      	ldr	r2, [pc, #344]	; (1a230 <prvTraceInitTraceData+0x20c>)
   1a0d8:	4694      	mov	ip, r2
   1a0da:	4463      	add	r3, ip
   1a0dc:	4955      	ldr	r1, [pc, #340]	; (1a234 <prvTraceInitTraceData+0x210>)
   1a0de:	2250      	movs	r2, #80	; 0x50
   1a0e0:	0018      	movs	r0, r3
   1a0e2:	4b55      	ldr	r3, [pc, #340]	; (1a238 <prvTraceInitTraceData+0x214>)
   1a0e4:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
   1a0e6:	4b46      	ldr	r3, [pc, #280]	; (1a200 <prvTraceInitTraceData+0x1dc>)
   1a0e8:	681b      	ldr	r3, [r3, #0]
   1a0ea:	4a54      	ldr	r2, [pc, #336]	; (1a23c <prvTraceInitTraceData+0x218>)
   1a0ec:	4954      	ldr	r1, [pc, #336]	; (1a240 <prvTraceInitTraceData+0x21c>)
   1a0ee:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
   1a0f0:	4b43      	ldr	r3, [pc, #268]	; (1a200 <prvTraceInitTraceData+0x1dc>)
   1a0f2:	681b      	ldr	r3, [r3, #0]
   1a0f4:	4a53      	ldr	r2, [pc, #332]	; (1a244 <prvTraceInitTraceData+0x220>)
   1a0f6:	210a      	movs	r1, #10
   1a0f8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
   1a0fa:	4b41      	ldr	r3, [pc, #260]	; (1a200 <prvTraceInitTraceData+0x1dc>)
   1a0fc:	681b      	ldr	r3, [r3, #0]
   1a0fe:	4a52      	ldr	r2, [pc, #328]	; (1a248 <prvTraceInitTraceData+0x224>)
   1a100:	210b      	movs	r1, #11
   1a102:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
   1a104:	4b3e      	ldr	r3, [pc, #248]	; (1a200 <prvTraceInitTraceData+0x1dc>)
   1a106:	681b      	ldr	r3, [r3, #0]
   1a108:	4a50      	ldr	r2, [pc, #320]	; (1a24c <prvTraceInitTraceData+0x228>)
   1a10a:	210c      	movs	r1, #12
   1a10c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
   1a10e:	4b3c      	ldr	r3, [pc, #240]	; (1a200 <prvTraceInitTraceData+0x1dc>)
   1a110:	681b      	ldr	r3, [r3, #0]
   1a112:	4a4f      	ldr	r2, [pc, #316]	; (1a250 <prvTraceInitTraceData+0x22c>)
   1a114:	210d      	movs	r1, #13
   1a116:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
   1a118:	4b39      	ldr	r3, [pc, #228]	; (1a200 <prvTraceInitTraceData+0x1dc>)
   1a11a:	681b      	ldr	r3, [r3, #0]
   1a11c:	4a4d      	ldr	r2, [pc, #308]	; (1a254 <prvTraceInitTraceData+0x230>)
   1a11e:	2171      	movs	r1, #113	; 0x71
   1a120:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
   1a122:	4b37      	ldr	r3, [pc, #220]	; (1a200 <prvTraceInitTraceData+0x1dc>)
   1a124:	681b      	ldr	r3, [r3, #0]
   1a126:	4a4c      	ldr	r2, [pc, #304]	; (1a258 <prvTraceInitTraceData+0x234>)
   1a128:	2172      	movs	r1, #114	; 0x72
   1a12a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
   1a12c:	4b34      	ldr	r3, [pc, #208]	; (1a200 <prvTraceInitTraceData+0x1dc>)
   1a12e:	681b      	ldr	r3, [r3, #0]
   1a130:	4a4a      	ldr	r2, [pc, #296]	; (1a25c <prvTraceInitTraceData+0x238>)
   1a132:	2173      	movs	r1, #115	; 0x73
   1a134:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
   1a136:	4b32      	ldr	r3, [pc, #200]	; (1a200 <prvTraceInitTraceData+0x1dc>)
   1a138:	681b      	ldr	r3, [r3, #0]
   1a13a:	4a49      	ldr	r2, [pc, #292]	; (1a260 <prvTraceInitTraceData+0x23c>)
   1a13c:	2174      	movs	r1, #116	; 0x74
   1a13e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
   1a140:	4b2f      	ldr	r3, [pc, #188]	; (1a200 <prvTraceInitTraceData+0x1dc>)
   1a142:	681b      	ldr	r3, [r3, #0]
   1a144:	4a47      	ldr	r2, [pc, #284]	; (1a264 <prvTraceInitTraceData+0x240>)
   1a146:	21f1      	movs	r1, #241	; 0xf1
   1a148:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
   1a14a:	4b2d      	ldr	r3, [pc, #180]	; (1a200 <prvTraceInitTraceData+0x1dc>)
   1a14c:	681b      	ldr	r3, [r3, #0]
   1a14e:	4a46      	ldr	r2, [pc, #280]	; (1a268 <prvTraceInitTraceData+0x244>)
   1a150:	21f2      	movs	r1, #242	; 0xf2
   1a152:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
   1a154:	4b2a      	ldr	r3, [pc, #168]	; (1a200 <prvTraceInitTraceData+0x1dc>)
   1a156:	681b      	ldr	r3, [r3, #0]
   1a158:	4a44      	ldr	r2, [pc, #272]	; (1a26c <prvTraceInitTraceData+0x248>)
   1a15a:	21f3      	movs	r1, #243	; 0xf3
   1a15c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
   1a15e:	4b28      	ldr	r3, [pc, #160]	; (1a200 <prvTraceInitTraceData+0x1dc>)
   1a160:	681b      	ldr	r3, [r3, #0]
   1a162:	4a43      	ldr	r2, [pc, #268]	; (1a270 <prvTraceInitTraceData+0x24c>)
   1a164:	21f4      	movs	r1, #244	; 0xf4
   1a166:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
   1a168:	4b42      	ldr	r3, [pc, #264]	; (1a274 <prvTraceInitTraceData+0x250>)
   1a16a:	4798      	blx	r3
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
   1a16c:	4b24      	ldr	r3, [pc, #144]	; (1a200 <prvTraceInitTraceData+0x1dc>)
   1a16e:	681b      	ldr	r3, [r3, #0]
   1a170:	22f4      	movs	r2, #244	; 0xf4
   1a172:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
   1a174:	4b22      	ldr	r3, [pc, #136]	; (1a200 <prvTraceInitTraceData+0x1dc>)
   1a176:	681b      	ldr	r3, [r3, #0]
   1a178:	22f3      	movs	r2, #243	; 0xf3
   1a17a:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
   1a17c:	4b20      	ldr	r3, [pc, #128]	; (1a200 <prvTraceInitTraceData+0x1dc>)
   1a17e:	681b      	ldr	r3, [r3, #0]
   1a180:	22f2      	movs	r2, #242	; 0xf2
   1a182:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
   1a184:	4b1e      	ldr	r3, [pc, #120]	; (1a200 <prvTraceInitTraceData+0x1dc>)
   1a186:	681b      	ldr	r3, [r3, #0]
   1a188:	22f1      	movs	r2, #241	; 0xf1
   1a18a:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
   1a18c:	4b1c      	ldr	r3, [pc, #112]	; (1a200 <prvTraceInitTraceData+0x1dc>)
   1a18e:	681b      	ldr	r3, [r3, #0]
   1a190:	2274      	movs	r2, #116	; 0x74
   1a192:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
   1a194:	4b1a      	ldr	r3, [pc, #104]	; (1a200 <prvTraceInitTraceData+0x1dc>)
   1a196:	681b      	ldr	r3, [r3, #0]
   1a198:	2273      	movs	r2, #115	; 0x73
   1a19a:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
   1a19c:	4b18      	ldr	r3, [pc, #96]	; (1a200 <prvTraceInitTraceData+0x1dc>)
   1a19e:	681b      	ldr	r3, [r3, #0]
   1a1a0:	2272      	movs	r2, #114	; 0x72
   1a1a2:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
   1a1a4:	4b16      	ldr	r3, [pc, #88]	; (1a200 <prvTraceInitTraceData+0x1dc>)
   1a1a6:	681b      	ldr	r3, [r3, #0]
   1a1a8:	2271      	movs	r2, #113	; 0x71
   1a1aa:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
   1a1ac:	4b14      	ldr	r3, [pc, #80]	; (1a200 <prvTraceInitTraceData+0x1dc>)
   1a1ae:	681b      	ldr	r3, [r3, #0]
   1a1b0:	2204      	movs	r2, #4
   1a1b2:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
   1a1b4:	4b12      	ldr	r3, [pc, #72]	; (1a200 <prvTraceInitTraceData+0x1dc>)
   1a1b6:	681b      	ldr	r3, [r3, #0]
   1a1b8:	2203      	movs	r2, #3
   1a1ba:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
   1a1bc:	4b10      	ldr	r3, [pc, #64]	; (1a200 <prvTraceInitTraceData+0x1dc>)
   1a1be:	681b      	ldr	r3, [r3, #0]
   1a1c0:	2202      	movs	r2, #2
   1a1c2:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
   1a1c4:	4b0e      	ldr	r3, [pc, #56]	; (1a200 <prvTraceInitTraceData+0x1dc>)
   1a1c6:	681b      	ldr	r3, [r3, #0]
   1a1c8:	2201      	movs	r2, #1
   1a1ca:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
   1a1cc:	4b2a      	ldr	r3, [pc, #168]	; (1a278 <prvTraceInitTraceData+0x254>)
   1a1ce:	681b      	ldr	r3, [r3, #0]
   1a1d0:	2b00      	cmp	r3, #0
   1a1d2:	d012      	beq.n	1a1fa <prvTraceInitTraceData+0x1d6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   1a1d4:	4b0a      	ldr	r3, [pc, #40]	; (1a200 <prvTraceInitTraceData+0x1dc>)
   1a1d6:	681b      	ldr	r3, [r3, #0]
   1a1d8:	4a15      	ldr	r2, [pc, #84]	; (1a230 <prvTraceInitTraceData+0x20c>)
   1a1da:	1898      	adds	r0, r3, r2
   1a1dc:	4b26      	ldr	r3, [pc, #152]	; (1a278 <prvTraceInitTraceData+0x254>)
   1a1de:	681b      	ldr	r3, [r3, #0]
   1a1e0:	2250      	movs	r2, #80	; 0x50
   1a1e2:	0019      	movs	r1, r3
   1a1e4:	4b14      	ldr	r3, [pc, #80]	; (1a238 <prvTraceInitTraceData+0x214>)
   1a1e6:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
   1a1e8:	4b05      	ldr	r3, [pc, #20]	; (1a200 <prvTraceInitTraceData+0x1dc>)
   1a1ea:	681b      	ldr	r3, [r3, #0]
   1a1ec:	4a23      	ldr	r2, [pc, #140]	; (1a27c <prvTraceInitTraceData+0x258>)
   1a1ee:	2101      	movs	r1, #1
   1a1f0:	5099      	str	r1, [r3, r2]
		vTraceStop();
   1a1f2:	4b23      	ldr	r3, [pc, #140]	; (1a280 <prvTraceInitTraceData+0x25c>)
   1a1f4:	4798      	blx	r3
   1a1f6:	e000      	b.n	1a1fa <prvTraceInitTraceData+0x1d6>
			return;
   1a1f8:	46c0      	nop			; (mov r8, r8)

	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif
}
   1a1fa:	46bd      	mov	sp, r7
   1a1fc:	bd80      	pop	{r7, pc}
   1a1fe:	46c0      	nop			; (mov r8, r8)
   1a200:	20000df4 	.word	0x20000df4
   1a204:	20004a4c 	.word	0x20004a4c
   1a208:	e000e018 	.word	0xe000e018
   1a20c:	2000561c 	.word	0x2000561c
   1a210:	000355ef 	.word	0x000355ef
   1a214:	00001aa1 	.word	0x00001aa1
   1a218:	f0f0f0f0 	.word	0xf0f0f0f0
   1a21c:	00019189 	.word	0x00019189
   1a220:	0000055c 	.word	0x0000055c
   1a224:	f1f1f1f1 	.word	0xf1f1f1f1
   1a228:	00000564 	.word	0x00000564
   1a22c:	f2f2f2f2 	.word	0xf2f2f2f2
   1a230:	000006bc 	.word	0x000006bc
   1a234:	00038b78 	.word	0x00038b78
   1a238:	0001a599 	.word	0x0001a599
   1a23c:	0000070c 	.word	0x0000070c
   1a240:	f3f3f3f3 	.word	0xf3f3f3f3
   1a244:	00000bc4 	.word	0x00000bc4
   1a248:	00000bc5 	.word	0x00000bc5
   1a24c:	00000bc6 	.word	0x00000bc6
   1a250:	00000bc7 	.word	0x00000bc7
   1a254:	00000bc8 	.word	0x00000bc8
   1a258:	00000bc9 	.word	0x00000bc9
   1a25c:	00000bca 	.word	0x00000bca
   1a260:	00000bcb 	.word	0x00000bcb
   1a264:	00000bcc 	.word	0x00000bcc
   1a268:	00000bcd 	.word	0x00000bcd
   1a26c:	00000bce 	.word	0x00000bce
   1a270:	00000bcf 	.word	0x00000bcf
   1a274:	00019329 	.word	0x00019329
   1a278:	20000d54 	.word	0x20000d54
   1a27c:	000006b4 	.word	0x000006b4
   1a280:	00019591 	.word	0x00019591

0001a284 <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
   1a284:	b580      	push	{r7, lr}
   1a286:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
   1a288:	4b10      	ldr	r3, [pc, #64]	; (1a2cc <prvTraceNextFreeEventBufferSlot+0x48>)
   1a28a:	681b      	ldr	r3, [r3, #0]
   1a28c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a28e:	2b00      	cmp	r3, #0
   1a290:	d101      	bne.n	1a296 <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
   1a292:	2300      	movs	r3, #0
   1a294:	e017      	b.n	1a2c6 <prvTraceNextFreeEventBufferSlot+0x42>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   1a296:	4b0d      	ldr	r3, [pc, #52]	; (1a2cc <prvTraceNextFreeEventBufferSlot+0x48>)
   1a298:	681b      	ldr	r3, [r3, #0]
   1a29a:	69da      	ldr	r2, [r3, #28]
   1a29c:	232c      	movs	r3, #44	; 0x2c
   1a29e:	33ff      	adds	r3, #255	; 0xff
   1a2a0:	429a      	cmp	r2, r3
   1a2a2:	d905      	bls.n	1a2b0 <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
   1a2a4:	4b0a      	ldr	r3, [pc, #40]	; (1a2d0 <prvTraceNextFreeEventBufferSlot+0x4c>)
   1a2a6:	0018      	movs	r0, r3
   1a2a8:	4b0a      	ldr	r3, [pc, #40]	; (1a2d4 <prvTraceNextFreeEventBufferSlot+0x50>)
   1a2aa:	4798      	blx	r3
		return NULL;
   1a2ac:	2300      	movs	r3, #0
   1a2ae:	e00a      	b.n	1a2c6 <prvTraceNextFreeEventBufferSlot+0x42>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
   1a2b0:	4b06      	ldr	r3, [pc, #24]	; (1a2cc <prvTraceNextFreeEventBufferSlot+0x48>)
   1a2b2:	681a      	ldr	r2, [r3, #0]
   1a2b4:	4b05      	ldr	r3, [pc, #20]	; (1a2cc <prvTraceNextFreeEventBufferSlot+0x48>)
   1a2b6:	681b      	ldr	r3, [r3, #0]
   1a2b8:	69db      	ldr	r3, [r3, #28]
   1a2ba:	009b      	lsls	r3, r3, #2
   1a2bc:	21e2      	movs	r1, #226	; 0xe2
   1a2be:	00c9      	lsls	r1, r1, #3
   1a2c0:	468c      	mov	ip, r1
   1a2c2:	4463      	add	r3, ip
   1a2c4:	18d3      	adds	r3, r2, r3
}
   1a2c6:	0018      	movs	r0, r3
   1a2c8:	46bd      	mov	sp, r7
   1a2ca:	bd80      	pop	{r7, pc}
   1a2cc:	20000df4 	.word	0x20000df4
   1a2d0:	00038b8c 	.word	0x00038b8c
   1a2d4:	0001a6cd 	.word	0x0001a6cd

0001a2d8 <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
   1a2d8:	b580      	push	{r7, lr}
   1a2da:	b082      	sub	sp, #8
   1a2dc:	af00      	add	r7, sp, #0
   1a2de:	0002      	movs	r2, r0
   1a2e0:	1dfb      	adds	r3, r7, #7
   1a2e2:	701a      	strb	r2, [r3, #0]
   1a2e4:	1dbb      	adds	r3, r7, #6
   1a2e6:	1c0a      	adds	r2, r1, #0
   1a2e8:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   1a2ea:	1dbb      	adds	r3, r7, #6
   1a2ec:	781b      	ldrb	r3, [r3, #0]
   1a2ee:	2b08      	cmp	r3, #8
   1a2f0:	d905      	bls.n	1a2fe <uiIndexOfObject+0x26>
   1a2f2:	4b2a      	ldr	r3, [pc, #168]	; (1a39c <uiIndexOfObject+0xc4>)
   1a2f4:	0018      	movs	r0, r3
   1a2f6:	4b2a      	ldr	r3, [pc, #168]	; (1a3a0 <uiIndexOfObject+0xc8>)
   1a2f8:	4798      	blx	r3
   1a2fa:	2300      	movs	r3, #0
   1a2fc:	e049      	b.n	1a392 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   1a2fe:	1dfb      	adds	r3, r7, #7
   1a300:	781b      	ldrb	r3, [r3, #0]
   1a302:	2b00      	cmp	r3, #0
   1a304:	d00b      	beq.n	1a31e <uiIndexOfObject+0x46>
   1a306:	4b27      	ldr	r3, [pc, #156]	; (1a3a4 <uiIndexOfObject+0xcc>)
   1a308:	681a      	ldr	r2, [r3, #0]
   1a30a:	1dbb      	adds	r3, r7, #6
   1a30c:	781b      	ldrb	r3, [r3, #0]
   1a30e:	2164      	movs	r1, #100	; 0x64
   1a310:	18d3      	adds	r3, r2, r3
   1a312:	185b      	adds	r3, r3, r1
   1a314:	781b      	ldrb	r3, [r3, #0]
   1a316:	1dfa      	adds	r2, r7, #7
   1a318:	7812      	ldrb	r2, [r2, #0]
   1a31a:	429a      	cmp	r2, r3
   1a31c:	d905      	bls.n	1a32a <uiIndexOfObject+0x52>
   1a31e:	4b22      	ldr	r3, [pc, #136]	; (1a3a8 <uiIndexOfObject+0xd0>)
   1a320:	0018      	movs	r0, r3
   1a322:	4b1f      	ldr	r3, [pc, #124]	; (1a3a0 <uiIndexOfObject+0xc8>)
   1a324:	4798      	blx	r3
   1a326:	2300      	movs	r3, #0
   1a328:	e033      	b.n	1a392 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   1a32a:	1dbb      	adds	r3, r7, #6
   1a32c:	781b      	ldrb	r3, [r3, #0]
   1a32e:	2b08      	cmp	r3, #8
   1a330:	d82a      	bhi.n	1a388 <uiIndexOfObject+0xb0>
   1a332:	1dfb      	adds	r3, r7, #7
   1a334:	781b      	ldrb	r3, [r3, #0]
   1a336:	2b00      	cmp	r3, #0
   1a338:	d026      	beq.n	1a388 <uiIndexOfObject+0xb0>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
   1a33a:	4b1a      	ldr	r3, [pc, #104]	; (1a3a4 <uiIndexOfObject+0xcc>)
   1a33c:	681a      	ldr	r2, [r3, #0]
   1a33e:	1dbb      	adds	r3, r7, #6
   1a340:	781b      	ldrb	r3, [r3, #0]
   1a342:	2164      	movs	r1, #100	; 0x64
   1a344:	18d3      	adds	r3, r2, r3
   1a346:	185b      	adds	r3, r3, r1
   1a348:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   1a34a:	1dfa      	adds	r2, r7, #7
   1a34c:	7812      	ldrb	r2, [r2, #0]
   1a34e:	429a      	cmp	r2, r3
   1a350:	d81a      	bhi.n	1a388 <uiIndexOfObject+0xb0>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1a352:	4b14      	ldr	r3, [pc, #80]	; (1a3a4 <uiIndexOfObject+0xcc>)
   1a354:	681a      	ldr	r2, [r3, #0]
   1a356:	1dbb      	adds	r3, r7, #6
   1a358:	781b      	ldrb	r3, [r3, #0]
   1a35a:	3340      	adds	r3, #64	; 0x40
   1a35c:	005b      	lsls	r3, r3, #1
   1a35e:	18d3      	adds	r3, r2, r3
   1a360:	3308      	adds	r3, #8
   1a362:	881a      	ldrh	r2, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   1a364:	4b0f      	ldr	r3, [pc, #60]	; (1a3a4 <uiIndexOfObject+0xcc>)
   1a366:	6819      	ldr	r1, [r3, #0]
   1a368:	1dbb      	adds	r3, r7, #6
   1a36a:	781b      	ldrb	r3, [r3, #0]
   1a36c:	207c      	movs	r0, #124	; 0x7c
   1a36e:	18cb      	adds	r3, r1, r3
   1a370:	181b      	adds	r3, r3, r0
   1a372:	781b      	ldrb	r3, [r3, #0]
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1a374:	b29b      	uxth	r3, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   1a376:	1df9      	adds	r1, r7, #7
   1a378:	7809      	ldrb	r1, [r1, #0]
   1a37a:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1a37c:	b289      	uxth	r1, r1
   1a37e:	434b      	muls	r3, r1
   1a380:	b29b      	uxth	r3, r3
   1a382:	18d3      	adds	r3, r2, r3
   1a384:	b29b      	uxth	r3, r3
   1a386:	e004      	b.n	1a392 <uiIndexOfObject+0xba>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
   1a388:	4b08      	ldr	r3, [pc, #32]	; (1a3ac <uiIndexOfObject+0xd4>)
   1a38a:	0018      	movs	r0, r3
   1a38c:	4b04      	ldr	r3, [pc, #16]	; (1a3a0 <uiIndexOfObject+0xc8>)
   1a38e:	4798      	blx	r3
	return 0;
   1a390:	2300      	movs	r3, #0
}
   1a392:	0018      	movs	r0, r3
   1a394:	46bd      	mov	sp, r7
   1a396:	b002      	add	sp, #8
   1a398:	bd80      	pop	{r7, pc}
   1a39a:	46c0      	nop			; (mov r8, r8)
   1a39c:	00038bb4 	.word	0x00038bb4
   1a3a0:	0001a6cd 	.word	0x0001a6cd
   1a3a4:	20000df4 	.word	0x20000df4
   1a3a8:	00038bf4 	.word	0x00038bf4
   1a3ac:	00038c34 	.word	0x00038c34

0001a3b0 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
   1a3b0:	b580      	push	{r7, lr}
   1a3b2:	b088      	sub	sp, #32
   1a3b4:	af00      	add	r7, sp, #0
   1a3b6:	0002      	movs	r2, r0
   1a3b8:	1dfb      	adds	r3, r7, #7
   1a3ba:	701a      	strb	r2, [r3, #0]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
   1a3bc:	4b5a      	ldr	r3, [pc, #360]	; (1a528 <prvTraceGetObjectHandle+0x178>)
   1a3be:	681b      	ldr	r3, [r3, #0]
   1a3c0:	2b00      	cmp	r3, #0
   1a3c2:	d105      	bne.n	1a3d0 <prvTraceGetObjectHandle+0x20>
   1a3c4:	4b59      	ldr	r3, [pc, #356]	; (1a52c <prvTraceGetObjectHandle+0x17c>)
   1a3c6:	0018      	movs	r0, r3
   1a3c8:	4b59      	ldr	r3, [pc, #356]	; (1a530 <prvTraceGetObjectHandle+0x180>)
   1a3ca:	4798      	blx	r3
   1a3cc:	2300      	movs	r3, #0
   1a3ce:	e0a7      	b.n	1a520 <prvTraceGetObjectHandle+0x170>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   1a3d0:	1dfb      	adds	r3, r7, #7
   1a3d2:	781b      	ldrb	r3, [r3, #0]
   1a3d4:	2b08      	cmp	r3, #8
   1a3d6:	d905      	bls.n	1a3e4 <prvTraceGetObjectHandle+0x34>
   1a3d8:	4b56      	ldr	r3, [pc, #344]	; (1a534 <prvTraceGetObjectHandle+0x184>)
   1a3da:	0018      	movs	r0, r3
   1a3dc:	4b54      	ldr	r3, [pc, #336]	; (1a530 <prvTraceGetObjectHandle+0x180>)
   1a3de:	4798      	blx	r3
   1a3e0:	2300      	movs	r3, #0
   1a3e2:	e09d      	b.n	1a520 <prvTraceGetObjectHandle+0x170>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1a3e4:	f3ef 8310 	mrs	r3, PRIMASK
   1a3e8:	60fb      	str	r3, [r7, #12]
  return(result);
   1a3ea:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
   1a3ec:	61bb      	str	r3, [r7, #24]
   1a3ee:	2301      	movs	r3, #1
   1a3f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1a3f2:	693b      	ldr	r3, [r7, #16]
   1a3f4:	f383 8810 	msr	PRIMASK, r3
   1a3f8:	4b4f      	ldr	r3, [pc, #316]	; (1a538 <prvTraceGetObjectHandle+0x188>)
   1a3fa:	681b      	ldr	r3, [r3, #0]
   1a3fc:	1c5a      	adds	r2, r3, #1
   1a3fe:	4b4e      	ldr	r3, [pc, #312]	; (1a538 <prvTraceGetObjectHandle+0x188>)
   1a400:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
   1a402:	1dfb      	adds	r3, r7, #7
   1a404:	781a      	ldrb	r2, [r3, #0]
   1a406:	4b4d      	ldr	r3, [pc, #308]	; (1a53c <prvTraceGetObjectHandle+0x18c>)
   1a408:	0052      	lsls	r2, r2, #1
   1a40a:	5ad3      	ldrh	r3, [r2, r3]
   1a40c:	001a      	movs	r2, r3
   1a40e:	4b4c      	ldr	r3, [pc, #304]	; (1a540 <prvTraceGetObjectHandle+0x190>)
   1a410:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
   1a412:	4b4b      	ldr	r3, [pc, #300]	; (1a540 <prvTraceGetObjectHandle+0x190>)
   1a414:	681b      	ldr	r3, [r3, #0]
   1a416:	4a49      	ldr	r2, [pc, #292]	; (1a53c <prvTraceGetObjectHandle+0x18c>)
   1a418:	2148      	movs	r1, #72	; 0x48
   1a41a:	18d3      	adds	r3, r2, r3
   1a41c:	185b      	adds	r3, r3, r1
   1a41e:	781b      	ldrb	r3, [r3, #0]
   1a420:	2b00      	cmp	r3, #0
   1a422:	d117      	bne.n	1a454 <prvTraceGetObjectHandle+0xa4>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
   1a424:	4b46      	ldr	r3, [pc, #280]	; (1a540 <prvTraceGetObjectHandle+0x190>)
   1a426:	681a      	ldr	r2, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   1a428:	4b45      	ldr	r3, [pc, #276]	; (1a540 <prvTraceGetObjectHandle+0x190>)
   1a42a:	681b      	ldr	r3, [r3, #0]
   1a42c:	b2d9      	uxtb	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
   1a42e:	1dfb      	adds	r3, r7, #7
   1a430:	781b      	ldrb	r3, [r3, #0]
   1a432:	4842      	ldr	r0, [pc, #264]	; (1a53c <prvTraceGetObjectHandle+0x18c>)
   1a434:	3308      	adds	r3, #8
   1a436:	005b      	lsls	r3, r3, #1
   1a438:	18c3      	adds	r3, r0, r3
   1a43a:	3302      	adds	r3, #2
   1a43c:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   1a43e:	b2db      	uxtb	r3, r3
   1a440:	1acb      	subs	r3, r1, r3
   1a442:	b2db      	uxtb	r3, r3
   1a444:	3301      	adds	r3, #1
   1a446:	b2d8      	uxtb	r0, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
   1a448:	4b3c      	ldr	r3, [pc, #240]	; (1a53c <prvTraceGetObjectHandle+0x18c>)
   1a44a:	2148      	movs	r1, #72	; 0x48
   1a44c:	189b      	adds	r3, r3, r2
   1a44e:	185b      	adds	r3, r3, r1
   1a450:	1c02      	adds	r2, r0, #0
   1a452:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   1a454:	4b3a      	ldr	r3, [pc, #232]	; (1a540 <prvTraceGetObjectHandle+0x190>)
   1a456:	681a      	ldr	r2, [r3, #0]
   1a458:	231f      	movs	r3, #31
   1a45a:	18fb      	adds	r3, r7, r3
   1a45c:	4937      	ldr	r1, [pc, #220]	; (1a53c <prvTraceGetObjectHandle+0x18c>)
   1a45e:	2048      	movs	r0, #72	; 0x48
   1a460:	188a      	adds	r2, r1, r2
   1a462:	1812      	adds	r2, r2, r0
   1a464:	7812      	ldrb	r2, [r2, #0]
   1a466:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   1a468:	1dfb      	adds	r3, r7, #7
   1a46a:	781a      	ldrb	r2, [r3, #0]
   1a46c:	4b33      	ldr	r3, [pc, #204]	; (1a53c <prvTraceGetObjectHandle+0x18c>)
   1a46e:	0052      	lsls	r2, r2, #1
   1a470:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
   1a472:	1dfb      	adds	r3, r7, #7
   1a474:	781b      	ldrb	r3, [r3, #0]
   1a476:	4931      	ldr	r1, [pc, #196]	; (1a53c <prvTraceGetObjectHandle+0x18c>)
   1a478:	3310      	adds	r3, #16
   1a47a:	005b      	lsls	r3, r3, #1
   1a47c:	18cb      	adds	r3, r1, r3
   1a47e:	3304      	adds	r3, #4
   1a480:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   1a482:	429a      	cmp	r2, r3
   1a484:	d90d      	bls.n	1a4a2 <prvTraceGetObjectHandle+0xf2>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   1a486:	1dfb      	adds	r3, r7, #7
   1a488:	781b      	ldrb	r3, [r3, #0]
   1a48a:	0018      	movs	r0, r3
   1a48c:	4b2d      	ldr	r3, [pc, #180]	; (1a544 <prvTraceGetObjectHandle+0x194>)
   1a48e:	4798      	blx	r3
   1a490:	0003      	movs	r3, r0
   1a492:	0018      	movs	r0, r3
   1a494:	4b26      	ldr	r3, [pc, #152]	; (1a530 <prvTraceGetObjectHandle+0x180>)
   1a496:	4798      	blx	r3
		handle = 0;
   1a498:	231f      	movs	r3, #31
   1a49a:	18fb      	adds	r3, r7, r3
   1a49c:	2200      	movs	r2, #0
   1a49e:	701a      	strb	r2, [r3, #0]
   1a4a0:	e031      	b.n	1a506 <prvTraceGetObjectHandle+0x156>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
   1a4a2:	1dfb      	adds	r3, r7, #7
   1a4a4:	781b      	ldrb	r3, [r3, #0]
   1a4a6:	4a25      	ldr	r2, [pc, #148]	; (1a53c <prvTraceGetObjectHandle+0x18c>)
   1a4a8:	0059      	lsls	r1, r3, #1
   1a4aa:	5a8a      	ldrh	r2, [r1, r2]
   1a4ac:	3201      	adds	r2, #1
   1a4ae:	b291      	uxth	r1, r2
   1a4b0:	4a22      	ldr	r2, [pc, #136]	; (1a53c <prvTraceGetObjectHandle+0x18c>)
   1a4b2:	005b      	lsls	r3, r3, #1
   1a4b4:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   1a4b6:	1dfb      	adds	r3, r7, #7
   1a4b8:	781a      	ldrb	r2, [r3, #0]
   1a4ba:	4b20      	ldr	r3, [pc, #128]	; (1a53c <prvTraceGetObjectHandle+0x18c>)
   1a4bc:	0052      	lsls	r2, r2, #1
   1a4be:	5ad3      	ldrh	r3, [r2, r3]
   1a4c0:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
   1a4c2:	1dfb      	adds	r3, r7, #7
   1a4c4:	781b      	ldrb	r3, [r3, #0]
   1a4c6:	4a1d      	ldr	r2, [pc, #116]	; (1a53c <prvTraceGetObjectHandle+0x18c>)
   1a4c8:	3308      	adds	r3, #8
   1a4ca:	005b      	lsls	r3, r3, #1
   1a4cc:	18d3      	adds	r3, r2, r3
   1a4ce:	3302      	adds	r3, #2
   1a4d0:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   1a4d2:	1acb      	subs	r3, r1, r3
   1a4d4:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
   1a4d6:	1dfb      	adds	r3, r7, #7
   1a4d8:	781b      	ldrb	r3, [r3, #0]
   1a4da:	4a18      	ldr	r2, [pc, #96]	; (1a53c <prvTraceGetObjectHandle+0x18c>)
   1a4dc:	3318      	adds	r3, #24
   1a4de:	005b      	lsls	r3, r3, #1
   1a4e0:	18d3      	adds	r3, r2, r3
   1a4e2:	3306      	adds	r3, #6
   1a4e4:	881b      	ldrh	r3, [r3, #0]
   1a4e6:	001a      	movs	r2, r3
		if (hndCount >
   1a4e8:	697b      	ldr	r3, [r7, #20]
   1a4ea:	429a      	cmp	r2, r3
   1a4ec:	da0b      	bge.n	1a506 <prvTraceGetObjectHandle+0x156>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   1a4ee:	1dfb      	adds	r3, r7, #7
   1a4f0:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
   1a4f2:	697a      	ldr	r2, [r7, #20]
   1a4f4:	b2d2      	uxtb	r2, r2
   1a4f6:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   1a4f8:	4a10      	ldr	r2, [pc, #64]	; (1a53c <prvTraceGetObjectHandle+0x18c>)
   1a4fa:	3318      	adds	r3, #24
   1a4fc:	005b      	lsls	r3, r3, #1
   1a4fe:	18d3      	adds	r3, r2, r3
   1a500:	3306      	adds	r3, #6
   1a502:	1c0a      	adds	r2, r1, #0
   1a504:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
   1a506:	4b0c      	ldr	r3, [pc, #48]	; (1a538 <prvTraceGetObjectHandle+0x188>)
   1a508:	681b      	ldr	r3, [r3, #0]
   1a50a:	1e5a      	subs	r2, r3, #1
   1a50c:	4b0a      	ldr	r3, [pc, #40]	; (1a538 <prvTraceGetObjectHandle+0x188>)
   1a50e:	601a      	str	r2, [r3, #0]
   1a510:	69bb      	ldr	r3, [r7, #24]
   1a512:	60bb      	str	r3, [r7, #8]
   1a514:	68bb      	ldr	r3, [r7, #8]
   1a516:	f383 8810 	msr	PRIMASK, r3

	return handle;
   1a51a:	231f      	movs	r3, #31
   1a51c:	18fb      	adds	r3, r7, r3
   1a51e:	781b      	ldrb	r3, [r3, #0]
}
   1a520:	0018      	movs	r0, r3
   1a522:	46bd      	mov	sp, r7
   1a524:	b008      	add	sp, #32
   1a526:	bd80      	pop	{r7, pc}
   1a528:	20000df4 	.word	0x20000df4
   1a52c:	00038094 	.word	0x00038094
   1a530:	0001a6cd 	.word	0x0001a6cd
   1a534:	00038c74 	.word	0x00038c74
   1a538:	20000d4c 	.word	0x20000d4c
   1a53c:	20000d64 	.word	0x20000d64
   1a540:	20000df8 	.word	0x20000df8
   1a544:	000193ed 	.word	0x000193ed

0001a548 <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
   1a548:	b590      	push	{r4, r7, lr}
   1a54a:	b085      	sub	sp, #20
   1a54c:	af00      	add	r7, sp, #0
   1a54e:	0002      	movs	r2, r0
   1a550:	1dfb      	adds	r3, r7, #7
   1a552:	701a      	strb	r2, [r3, #0]
   1a554:	1dbb      	adds	r3, r7, #6
   1a556:	1c0a      	adds	r2, r1, #0
   1a558:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
   1a55a:	230e      	movs	r3, #14
   1a55c:	18fc      	adds	r4, r7, r3
   1a55e:	1dfb      	adds	r3, r7, #7
   1a560:	781a      	ldrb	r2, [r3, #0]
   1a562:	1dbb      	adds	r3, r7, #6
   1a564:	781b      	ldrb	r3, [r3, #0]
   1a566:	0011      	movs	r1, r2
   1a568:	0018      	movs	r0, r3
   1a56a:	4b09      	ldr	r3, [pc, #36]	; (1a590 <prvMarkObjectAsUsed+0x48>)
   1a56c:	4798      	blx	r3
   1a56e:	0003      	movs	r3, r0
   1a570:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
   1a572:	4b08      	ldr	r3, [pc, #32]	; (1a594 <prvMarkObjectAsUsed+0x4c>)
   1a574:	681a      	ldr	r2, [r3, #0]
   1a576:	230e      	movs	r3, #14
   1a578:	18fb      	adds	r3, r7, r3
   1a57a:	881b      	ldrh	r3, [r3, #0]
   1a57c:	219c      	movs	r1, #156	; 0x9c
   1a57e:	18d3      	adds	r3, r2, r3
   1a580:	185b      	adds	r3, r3, r1
   1a582:	2201      	movs	r2, #1
   1a584:	701a      	strb	r2, [r3, #0]
}
   1a586:	46c0      	nop			; (mov r8, r8)
   1a588:	46bd      	mov	sp, r7
   1a58a:	b005      	add	sp, #20
   1a58c:	bd90      	pop	{r4, r7, pc}
   1a58e:	46c0      	nop			; (mov r8, r8)
   1a590:	0001a2d9 	.word	0x0001a2d9
   1a594:	20000df4 	.word	0x20000df4

0001a598 <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
   1a598:	b580      	push	{r7, lr}
   1a59a:	b086      	sub	sp, #24
   1a59c:	af00      	add	r7, sp, #0
   1a59e:	60f8      	str	r0, [r7, #12]
   1a5a0:	60b9      	str	r1, [r7, #8]
   1a5a2:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
   1a5a4:	2300      	movs	r3, #0
   1a5a6:	617b      	str	r3, [r7, #20]
   1a5a8:	e010      	b.n	1a5cc <prvStrncpy+0x34>
	{
		dst[i] = src[i];
   1a5aa:	68fa      	ldr	r2, [r7, #12]
   1a5ac:	697b      	ldr	r3, [r7, #20]
   1a5ae:	18d3      	adds	r3, r2, r3
   1a5b0:	68b9      	ldr	r1, [r7, #8]
   1a5b2:	697a      	ldr	r2, [r7, #20]
   1a5b4:	188a      	adds	r2, r1, r2
   1a5b6:	7812      	ldrb	r2, [r2, #0]
   1a5b8:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
   1a5ba:	68ba      	ldr	r2, [r7, #8]
   1a5bc:	697b      	ldr	r3, [r7, #20]
   1a5be:	18d3      	adds	r3, r2, r3
   1a5c0:	781b      	ldrb	r3, [r3, #0]
   1a5c2:	2b00      	cmp	r3, #0
   1a5c4:	d007      	beq.n	1a5d6 <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
   1a5c6:	697b      	ldr	r3, [r7, #20]
   1a5c8:	3301      	adds	r3, #1
   1a5ca:	617b      	str	r3, [r7, #20]
   1a5cc:	697a      	ldr	r2, [r7, #20]
   1a5ce:	687b      	ldr	r3, [r7, #4]
   1a5d0:	429a      	cmp	r2, r3
   1a5d2:	d3ea      	bcc.n	1a5aa <prvStrncpy+0x12>
			break;
	}
}
   1a5d4:	e000      	b.n	1a5d8 <prvStrncpy+0x40>
			break;
   1a5d6:	46c0      	nop			; (mov r8, r8)
}
   1a5d8:	46c0      	nop			; (mov r8, r8)
   1a5da:	46bd      	mov	sp, r7
   1a5dc:	b006      	add	sp, #24
   1a5de:	bd80      	pop	{r7, pc}

0001a5e0 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
   1a5e0:	b580      	push	{r7, lr}
   1a5e2:	b082      	sub	sp, #8
   1a5e4:	af00      	add	r7, sp, #0
   1a5e6:	603a      	str	r2, [r7, #0]
   1a5e8:	1dfb      	adds	r3, r7, #7
   1a5ea:	1c02      	adds	r2, r0, #0
   1a5ec:	701a      	strb	r2, [r3, #0]
   1a5ee:	1dbb      	adds	r3, r7, #6
   1a5f0:	1c0a      	adds	r2, r1, #0
   1a5f2:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
   1a5f4:	683b      	ldr	r3, [r7, #0]
   1a5f6:	2b00      	cmp	r3, #0
   1a5f8:	d104      	bne.n	1a604 <prvTraceSetObjectName+0x24>
   1a5fa:	4b2a      	ldr	r3, [pc, #168]	; (1a6a4 <prvTraceSetObjectName+0xc4>)
   1a5fc:	0018      	movs	r0, r3
   1a5fe:	4b2a      	ldr	r3, [pc, #168]	; (1a6a8 <prvTraceSetObjectName+0xc8>)
   1a600:	4798      	blx	r3
   1a602:	e04b      	b.n	1a69c <prvTraceSetObjectName+0xbc>

	if (objectclass >= TRACE_NCLASSES)
   1a604:	1dfb      	adds	r3, r7, #7
   1a606:	781b      	ldrb	r3, [r3, #0]
   1a608:	2b08      	cmp	r3, #8
   1a60a:	d904      	bls.n	1a616 <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
   1a60c:	4b27      	ldr	r3, [pc, #156]	; (1a6ac <prvTraceSetObjectName+0xcc>)
   1a60e:	0018      	movs	r0, r3
   1a610:	4b25      	ldr	r3, [pc, #148]	; (1a6a8 <prvTraceSetObjectName+0xc8>)
   1a612:	4798      	blx	r3
		return;
   1a614:	e042      	b.n	1a69c <prvTraceSetObjectName+0xbc>
	}

	if (handle == 0)
   1a616:	1dbb      	adds	r3, r7, #6
   1a618:	781b      	ldrb	r3, [r3, #0]
   1a61a:	2b00      	cmp	r3, #0
   1a61c:	d104      	bne.n	1a628 <prvTraceSetObjectName+0x48>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
   1a61e:	4b24      	ldr	r3, [pc, #144]	; (1a6b0 <prvTraceSetObjectName+0xd0>)
   1a620:	0018      	movs	r0, r3
   1a622:	4b21      	ldr	r3, [pc, #132]	; (1a6a8 <prvTraceSetObjectName+0xc8>)
   1a624:	4798      	blx	r3
		return;
   1a626:	e039      	b.n	1a69c <prvTraceSetObjectName+0xbc>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
   1a628:	4b22      	ldr	r3, [pc, #136]	; (1a6b4 <prvTraceSetObjectName+0xd4>)
   1a62a:	681a      	ldr	r2, [r3, #0]
   1a62c:	1dfb      	adds	r3, r7, #7
   1a62e:	781b      	ldrb	r3, [r3, #0]
   1a630:	2164      	movs	r1, #100	; 0x64
   1a632:	18d3      	adds	r3, r2, r3
   1a634:	185b      	adds	r3, r3, r1
   1a636:	781b      	ldrb	r3, [r3, #0]
   1a638:	1dba      	adds	r2, r7, #6
   1a63a:	7812      	ldrb	r2, [r2, #0]
   1a63c:	429a      	cmp	r2, r3
   1a63e:	d909      	bls.n	1a654 <prvTraceSetObjectName+0x74>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   1a640:	1dfb      	adds	r3, r7, #7
   1a642:	781b      	ldrb	r3, [r3, #0]
   1a644:	0018      	movs	r0, r3
   1a646:	4b1c      	ldr	r3, [pc, #112]	; (1a6b8 <prvTraceSetObjectName+0xd8>)
   1a648:	4798      	blx	r3
   1a64a:	0003      	movs	r3, r0
   1a64c:	0018      	movs	r0, r3
   1a64e:	4b16      	ldr	r3, [pc, #88]	; (1a6a8 <prvTraceSetObjectName+0xc8>)
   1a650:	4798      	blx	r3
   1a652:	e023      	b.n	1a69c <prvTraceSetObjectName+0xbc>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
   1a654:	1dfb      	adds	r3, r7, #7
   1a656:	781a      	ldrb	r2, [r3, #0]
   1a658:	1dbb      	adds	r3, r7, #6
   1a65a:	781b      	ldrb	r3, [r3, #0]
   1a65c:	0011      	movs	r1, r2
   1a65e:	0018      	movs	r0, r3
   1a660:	4b16      	ldr	r3, [pc, #88]	; (1a6bc <prvTraceSetObjectName+0xdc>)
   1a662:	4798      	blx	r3
   1a664:	0003      	movs	r3, r0
   1a666:	001a      	movs	r2, r3
   1a668:	4b15      	ldr	r3, [pc, #84]	; (1a6c0 <prvTraceSetObjectName+0xe0>)
   1a66a:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
   1a66c:	4b15      	ldr	r3, [pc, #84]	; (1a6c4 <prvTraceSetObjectName+0xe4>)
   1a66e:	681b      	ldr	r3, [r3, #0]
   1a670:	2b00      	cmp	r3, #0
   1a672:	d113      	bne.n	1a69c <prvTraceSetObjectName+0xbc>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   1a674:	4b0f      	ldr	r3, [pc, #60]	; (1a6b4 <prvTraceSetObjectName+0xd4>)
   1a676:	681a      	ldr	r2, [r3, #0]
   1a678:	4b11      	ldr	r3, [pc, #68]	; (1a6c0 <prvTraceSetObjectName+0xe0>)
   1a67a:	881b      	ldrh	r3, [r3, #0]
   1a67c:	3398      	adds	r3, #152	; 0x98
   1a67e:	18d3      	adds	r3, r2, r3
   1a680:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
   1a682:	4b0c      	ldr	r3, [pc, #48]	; (1a6b4 <prvTraceSetObjectName+0xd4>)
   1a684:	681a      	ldr	r2, [r3, #0]
   1a686:	1dfb      	adds	r3, r7, #7
   1a688:	781b      	ldrb	r3, [r3, #0]
   1a68a:	2170      	movs	r1, #112	; 0x70
   1a68c:	18d3      	adds	r3, r2, r3
   1a68e:	185b      	adds	r3, r3, r1
   1a690:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   1a692:	001a      	movs	r2, r3
   1a694:	683b      	ldr	r3, [r7, #0]
   1a696:	0019      	movs	r1, r3
   1a698:	4b0b      	ldr	r3, [pc, #44]	; (1a6c8 <prvTraceSetObjectName+0xe8>)
   1a69a:	4798      	blx	r3
		}
	}
}
   1a69c:	46bd      	mov	sp, r7
   1a69e:	b002      	add	sp, #8
   1a6a0:	bd80      	pop	{r7, pc}
   1a6a2:	46c0      	nop			; (mov r8, r8)
   1a6a4:	00038d78 	.word	0x00038d78
   1a6a8:	0001a6cd 	.word	0x0001a6cd
   1a6ac:	00038dac 	.word	0x00038dac
   1a6b0:	00038ddc 	.word	0x00038ddc
   1a6b4:	20000df4 	.word	0x20000df4
   1a6b8:	000193ed 	.word	0x000193ed
   1a6bc:	0001a2d9 	.word	0x0001a2d9
   1a6c0:	20000dfc 	.word	0x20000dfc
   1a6c4:	20000d54 	.word	0x20000d54
   1a6c8:	0001a599 	.word	0x0001a599

0001a6cc <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
   1a6cc:	b580      	push	{r7, lr}
   1a6ce:	b082      	sub	sp, #8
   1a6d0:	af00      	add	r7, sp, #0
   1a6d2:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
   1a6d4:	4b11      	ldr	r3, [pc, #68]	; (1a71c <prvTraceError+0x50>)
   1a6d6:	681b      	ldr	r3, [r3, #0]
   1a6d8:	2b00      	cmp	r3, #0
   1a6da:	d001      	beq.n	1a6e0 <prvTraceError+0x14>
	{
		vTraceStop();
   1a6dc:	4b10      	ldr	r3, [pc, #64]	; (1a720 <prvTraceError+0x54>)
   1a6de:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
   1a6e0:	4b10      	ldr	r3, [pc, #64]	; (1a724 <prvTraceError+0x58>)
   1a6e2:	681b      	ldr	r3, [r3, #0]
   1a6e4:	2b00      	cmp	r3, #0
   1a6e6:	d115      	bne.n	1a714 <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
   1a6e8:	4b0e      	ldr	r3, [pc, #56]	; (1a724 <prvTraceError+0x58>)
   1a6ea:	687a      	ldr	r2, [r7, #4]
   1a6ec:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != NULL)
   1a6ee:	4b0b      	ldr	r3, [pc, #44]	; (1a71c <prvTraceError+0x50>)
   1a6f0:	681b      	ldr	r3, [r3, #0]
   1a6f2:	2b00      	cmp	r3, #0
   1a6f4:	d00e      	beq.n	1a714 <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   1a6f6:	4b09      	ldr	r3, [pc, #36]	; (1a71c <prvTraceError+0x50>)
   1a6f8:	681b      	ldr	r3, [r3, #0]
   1a6fa:	4a0b      	ldr	r2, [pc, #44]	; (1a728 <prvTraceError+0x5c>)
   1a6fc:	1898      	adds	r0, r3, r2
   1a6fe:	4b09      	ldr	r3, [pc, #36]	; (1a724 <prvTraceError+0x58>)
   1a700:	681b      	ldr	r3, [r3, #0]
   1a702:	2250      	movs	r2, #80	; 0x50
   1a704:	0019      	movs	r1, r3
   1a706:	4b09      	ldr	r3, [pc, #36]	; (1a72c <prvTraceError+0x60>)
   1a708:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
   1a70a:	4b04      	ldr	r3, [pc, #16]	; (1a71c <prvTraceError+0x50>)
   1a70c:	681b      	ldr	r3, [r3, #0]
   1a70e:	4a08      	ldr	r2, [pc, #32]	; (1a730 <prvTraceError+0x64>)
   1a710:	2101      	movs	r1, #1
   1a712:	5099      	str	r1, [r3, r2]
		}
	}
}
   1a714:	46c0      	nop			; (mov r8, r8)
   1a716:	46bd      	mov	sp, r7
   1a718:	b002      	add	sp, #8
   1a71a:	bd80      	pop	{r7, pc}
   1a71c:	20000df4 	.word	0x20000df4
   1a720:	00019591 	.word	0x00019591
   1a724:	20000d54 	.word	0x20000d54
   1a728:	000006bc 	.word	0x000006bc
   1a72c:	0001a599 	.word	0x0001a599
   1a730:	000006b4 	.word	0x000006b4

0001a734 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
   1a734:	b580      	push	{r7, lr}
   1a736:	b086      	sub	sp, #24
   1a738:	af00      	add	r7, sp, #0
   1a73a:	0002      	movs	r2, r0
   1a73c:	1dfb      	adds	r3, r7, #7
   1a73e:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
   1a740:	2300      	movs	r3, #0
   1a742:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
   1a744:	2300      	movs	r3, #0
   1a746:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
   1a748:	1dfb      	adds	r3, r7, #7
   1a74a:	781b      	ldrb	r3, [r3, #0]
   1a74c:	2b00      	cmp	r3, #0
   1a74e:	d000      	beq.n	1a752 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
   1a750:	e089      	b.n	1a866 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x132>
   1a752:	4b49      	ldr	r3, [pc, #292]	; (1a878 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
   1a754:	0018      	movs	r0, r3
   1a756:	4b49      	ldr	r3, [pc, #292]	; (1a87c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x148>)
   1a758:	4798      	blx	r3
   1a75a:	e08a      	b.n	1a872 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
   1a75c:	4b48      	ldr	r3, [pc, #288]	; (1a880 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a75e:	681b      	ldr	r3, [r3, #0]
   1a760:	69da      	ldr	r2, [r3, #28]
   1a762:	697b      	ldr	r3, [r7, #20]
   1a764:	18d3      	adds	r3, r2, r3
   1a766:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   1a768:	4b45      	ldr	r3, [pc, #276]	; (1a880 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a76a:	6819      	ldr	r1, [r3, #0]
   1a76c:	693b      	ldr	r3, [r7, #16]
   1a76e:	009a      	lsls	r2, r3, #2
   1a770:	23e2      	movs	r3, #226	; 0xe2
   1a772:	00db      	lsls	r3, r3, #3
   1a774:	188a      	adds	r2, r1, r2
   1a776:	18d3      	adds	r3, r2, r3
   1a778:	781b      	ldrb	r3, [r3, #0]
   1a77a:	2b98      	cmp	r3, #152	; 0x98
   1a77c:	d934      	bls.n	1a7e8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
   1a77e:	4b40      	ldr	r3, [pc, #256]	; (1a880 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a780:	6819      	ldr	r1, [r3, #0]
   1a782:	693b      	ldr	r3, [r7, #16]
   1a784:	009a      	lsls	r2, r3, #2
   1a786:	23e2      	movs	r3, #226	; 0xe2
   1a788:	00db      	lsls	r3, r3, #3
   1a78a:	188a      	adds	r2, r1, r2
   1a78c:	18d3      	adds	r3, r2, r3
   1a78e:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   1a790:	2ba7      	cmp	r3, #167	; 0xa7
   1a792:	d829      	bhi.n	1a7e8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
   1a794:	4b3a      	ldr	r3, [pc, #232]	; (1a880 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a796:	6819      	ldr	r1, [r3, #0]
   1a798:	693b      	ldr	r3, [r7, #16]
   1a79a:	009a      	lsls	r2, r3, #2
   1a79c:	23e2      	movs	r3, #226	; 0xe2
   1a79e:	00db      	lsls	r3, r3, #3
   1a7a0:	188a      	adds	r2, r1, r2
   1a7a2:	18d3      	adds	r3, r2, r3
   1a7a4:	781a      	ldrb	r2, [r3, #0]
   1a7a6:	230f      	movs	r3, #15
   1a7a8:	18fb      	adds	r3, r7, r3
   1a7aa:	3268      	adds	r2, #104	; 0x68
   1a7ac:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
   1a7ae:	230f      	movs	r3, #15
   1a7b0:	18fb      	adds	r3, r7, r3
   1a7b2:	781a      	ldrb	r2, [r3, #0]
   1a7b4:	693b      	ldr	r3, [r7, #16]
   1a7b6:	18d2      	adds	r2, r2, r3
   1a7b8:	4b31      	ldr	r3, [pc, #196]	; (1a880 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a7ba:	681b      	ldr	r3, [r3, #0]
   1a7bc:	699b      	ldr	r3, [r3, #24]
   1a7be:	429a      	cmp	r2, r3
   1a7c0:	d24d      	bcs.n	1a85e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
   1a7c2:	4b2f      	ldr	r3, [pc, #188]	; (1a880 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a7c4:	681a      	ldr	r2, [r3, #0]
   1a7c6:	693b      	ldr	r3, [r7, #16]
   1a7c8:	009b      	lsls	r3, r3, #2
   1a7ca:	21e2      	movs	r1, #226	; 0xe2
   1a7cc:	00c9      	lsls	r1, r1, #3
   1a7ce:	468c      	mov	ip, r1
   1a7d0:	4463      	add	r3, ip
   1a7d2:	18d0      	adds	r0, r2, r3
   1a7d4:	230f      	movs	r3, #15
   1a7d6:	18fb      	adds	r3, r7, r3
   1a7d8:	781b      	ldrb	r3, [r3, #0]
   1a7da:	3301      	adds	r3, #1
   1a7dc:	009b      	lsls	r3, r3, #2
   1a7de:	001a      	movs	r2, r3
   1a7e0:	2100      	movs	r1, #0
   1a7e2:	4b28      	ldr	r3, [pc, #160]	; (1a884 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1a7e4:	4798      	blx	r3
		{
   1a7e6:	e03a      	b.n	1a85e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
   1a7e8:	4b25      	ldr	r3, [pc, #148]	; (1a880 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a7ea:	6819      	ldr	r1, [r3, #0]
   1a7ec:	693b      	ldr	r3, [r7, #16]
   1a7ee:	009a      	lsls	r2, r3, #2
   1a7f0:	23e2      	movs	r3, #226	; 0xe2
   1a7f2:	00db      	lsls	r3, r3, #3
   1a7f4:	188a      	adds	r2, r1, r2
   1a7f6:	18d3      	adds	r3, r2, r3
   1a7f8:	781b      	ldrb	r3, [r3, #0]
   1a7fa:	2b01      	cmp	r3, #1
   1a7fc:	d130      	bne.n	1a860 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
   1a7fe:	693b      	ldr	r3, [r7, #16]
   1a800:	1c5a      	adds	r2, r3, #1
   1a802:	4b1f      	ldr	r3, [pc, #124]	; (1a880 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a804:	681b      	ldr	r3, [r3, #0]
   1a806:	699b      	ldr	r3, [r3, #24]
   1a808:	429a      	cmp	r2, r3
   1a80a:	d20e      	bcs.n	1a82a <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
   1a80c:	4b1c      	ldr	r3, [pc, #112]	; (1a880 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a80e:	681a      	ldr	r2, [r3, #0]
   1a810:	693b      	ldr	r3, [r7, #16]
   1a812:	009b      	lsls	r3, r3, #2
   1a814:	21e2      	movs	r1, #226	; 0xe2
   1a816:	00c9      	lsls	r1, r1, #3
   1a818:	468c      	mov	ip, r1
   1a81a:	4463      	add	r3, ip
   1a81c:	18d3      	adds	r3, r2, r3
   1a81e:	2208      	movs	r2, #8
   1a820:	2100      	movs	r1, #0
   1a822:	0018      	movs	r0, r3
   1a824:	4b17      	ldr	r3, [pc, #92]	; (1a884 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1a826:	4798      	blx	r3
   1a828:	e01a      	b.n	1a860 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
   1a82a:	4b15      	ldr	r3, [pc, #84]	; (1a880 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a82c:	681b      	ldr	r3, [r3, #0]
   1a82e:	22e2      	movs	r2, #226	; 0xe2
   1a830:	00d2      	lsls	r2, r2, #3
   1a832:	4694      	mov	ip, r2
   1a834:	4463      	add	r3, ip
   1a836:	2204      	movs	r2, #4
   1a838:	2100      	movs	r1, #0
   1a83a:	0018      	movs	r0, r3
   1a83c:	4b11      	ldr	r3, [pc, #68]	; (1a884 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1a83e:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
   1a840:	4b0f      	ldr	r3, [pc, #60]	; (1a880 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a842:	681a      	ldr	r2, [r3, #0]
   1a844:	693b      	ldr	r3, [r7, #16]
   1a846:	009b      	lsls	r3, r3, #2
   1a848:	21e2      	movs	r1, #226	; 0xe2
   1a84a:	00c9      	lsls	r1, r1, #3
   1a84c:	468c      	mov	ip, r1
   1a84e:	4463      	add	r3, ip
   1a850:	18d3      	adds	r3, r2, r3
   1a852:	2204      	movs	r2, #4
   1a854:	2100      	movs	r1, #0
   1a856:	0018      	movs	r0, r3
   1a858:	4b0a      	ldr	r3, [pc, #40]	; (1a884 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1a85a:	4798      	blx	r3
   1a85c:	e000      	b.n	1a860 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
   1a85e:	46c0      	nop			; (mov r8, r8)
			}
		}
		i++;
   1a860:	697b      	ldr	r3, [r7, #20]
   1a862:	3301      	adds	r3, #1
   1a864:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
   1a866:	1dfb      	adds	r3, r7, #7
   1a868:	781a      	ldrb	r2, [r3, #0]
   1a86a:	697b      	ldr	r3, [r7, #20]
   1a86c:	429a      	cmp	r2, r3
   1a86e:	d900      	bls.n	1a872 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
   1a870:	e774      	b.n	1a75c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
	}
}
   1a872:	46bd      	mov	sp, r7
   1a874:	b006      	add	sp, #24
   1a876:	bd80      	pop	{r7, pc}
   1a878:	00038e3c 	.word	0x00038e3c
   1a87c:	0001a6cd 	.word	0x0001a6cd
   1a880:	20000df4 	.word	0x20000df4
   1a884:	000355ef 	.word	0x000355ef

0001a888 <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
   1a888:	b580      	push	{r7, lr}
   1a88a:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
   1a88c:	4b12      	ldr	r3, [pc, #72]	; (1a8d8 <prvTraceUpdateCounters+0x50>)
   1a88e:	681b      	ldr	r3, [r3, #0]
   1a890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a892:	2b00      	cmp	r3, #0
   1a894:	d01c      	beq.n	1a8d0 <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
   1a896:	4b10      	ldr	r3, [pc, #64]	; (1a8d8 <prvTraceUpdateCounters+0x50>)
   1a898:	681b      	ldr	r3, [r3, #0]
   1a89a:	695a      	ldr	r2, [r3, #20]
   1a89c:	3201      	adds	r2, #1
   1a89e:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
   1a8a0:	4b0d      	ldr	r3, [pc, #52]	; (1a8d8 <prvTraceUpdateCounters+0x50>)
   1a8a2:	681b      	ldr	r3, [r3, #0]
   1a8a4:	69da      	ldr	r2, [r3, #28]
   1a8a6:	3201      	adds	r2, #1
   1a8a8:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   1a8aa:	4b0b      	ldr	r3, [pc, #44]	; (1a8d8 <prvTraceUpdateCounters+0x50>)
   1a8ac:	681b      	ldr	r3, [r3, #0]
   1a8ae:	69da      	ldr	r2, [r3, #28]
   1a8b0:	232c      	movs	r3, #44	; 0x2c
   1a8b2:	33ff      	adds	r3, #255	; 0xff
   1a8b4:	429a      	cmp	r2, r3
   1a8b6:	d907      	bls.n	1a8c8 <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
   1a8b8:	4b07      	ldr	r3, [pc, #28]	; (1a8d8 <prvTraceUpdateCounters+0x50>)
   1a8ba:	681b      	ldr	r3, [r3, #0]
   1a8bc:	2201      	movs	r2, #1
   1a8be:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
   1a8c0:	4b05      	ldr	r3, [pc, #20]	; (1a8d8 <prvTraceUpdateCounters+0x50>)
   1a8c2:	681b      	ldr	r3, [r3, #0]
   1a8c4:	2200      	movs	r2, #0
   1a8c6:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
   1a8c8:	2001      	movs	r0, #1
   1a8ca:	4b04      	ldr	r3, [pc, #16]	; (1a8dc <prvTraceUpdateCounters+0x54>)
   1a8cc:	4798      	blx	r3
   1a8ce:	e000      	b.n	1a8d2 <prvTraceUpdateCounters+0x4a>
		return;
   1a8d0:	46c0      	nop			; (mov r8, r8)
#endif
}
   1a8d2:	46bd      	mov	sp, r7
   1a8d4:	bd80      	pop	{r7, pc}
   1a8d6:	46c0      	nop			; (mov r8, r8)
   1a8d8:	20000df4 	.word	0x20000df4
   1a8dc:	0001a735 	.word	0x0001a735

0001a8e0 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
   1a8e0:	b5b0      	push	{r4, r5, r7, lr}
   1a8e2:	b086      	sub	sp, #24
   1a8e4:	af00      	add	r7, sp, #0
   1a8e6:	0002      	movs	r2, r0
   1a8e8:	1dbb      	adds	r3, r7, #6
   1a8ea:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
   1a8ec:	2300      	movs	r3, #0
   1a8ee:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
   1a8f0:	2300      	movs	r3, #0
   1a8f2:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
   1a8f4:	2300      	movs	r3, #0
   1a8f6:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   1a8f8:	1dbb      	adds	r3, r7, #6
   1a8fa:	881b      	ldrh	r3, [r3, #0]
   1a8fc:	2bff      	cmp	r3, #255	; 0xff
   1a8fe:	d00a      	beq.n	1a916 <prvTraceGetDTS+0x36>
   1a900:	1dbb      	adds	r3, r7, #6
   1a902:	881b      	ldrh	r3, [r3, #0]
   1a904:	4a60      	ldr	r2, [pc, #384]	; (1aa88 <prvTraceGetDTS+0x1a8>)
   1a906:	4293      	cmp	r3, r2
   1a908:	d005      	beq.n	1a916 <prvTraceGetDTS+0x36>
   1a90a:	4b60      	ldr	r3, [pc, #384]	; (1aa8c <prvTraceGetDTS+0x1ac>)
   1a90c:	0018      	movs	r0, r3
   1a90e:	4b60      	ldr	r3, [pc, #384]	; (1aa90 <prvTraceGetDTS+0x1b0>)
   1a910:	4798      	blx	r3
   1a912:	2300      	movs	r3, #0
   1a914:	e0b3      	b.n	1aa7e <prvTraceGetDTS+0x19e>

	
	if (RecorderDataPtr->frequency == 0)
   1a916:	4b5f      	ldr	r3, [pc, #380]	; (1aa94 <prvTraceGetDTS+0x1b4>)
   1a918:	681b      	ldr	r3, [r3, #0]
   1a91a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a91c:	2b00      	cmp	r3, #0
   1a91e:	d118      	bne.n	1a952 <prvTraceGetDTS+0x72>
	{	
		if (timestampFrequency != 0)
   1a920:	4b5d      	ldr	r3, [pc, #372]	; (1aa98 <prvTraceGetDTS+0x1b8>)
   1a922:	681b      	ldr	r3, [r3, #0]
   1a924:	2b00      	cmp	r3, #0
   1a926:	d006      	beq.n	1a936 <prvTraceGetDTS+0x56>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
   1a928:	4b5a      	ldr	r3, [pc, #360]	; (1aa94 <prvTraceGetDTS+0x1b4>)
   1a92a:	681b      	ldr	r3, [r3, #0]
   1a92c:	4a5a      	ldr	r2, [pc, #360]	; (1aa98 <prvTraceGetDTS+0x1b8>)
   1a92e:	6812      	ldr	r2, [r2, #0]
   1a930:	0892      	lsrs	r2, r2, #2
   1a932:	625a      	str	r2, [r3, #36]	; 0x24
   1a934:	e00d      	b.n	1a952 <prvTraceGetDTS+0x72>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
   1a936:	4b59      	ldr	r3, [pc, #356]	; (1aa9c <prvTraceGetDTS+0x1bc>)
   1a938:	681a      	ldr	r2, [r3, #0]
   1a93a:	4b59      	ldr	r3, [pc, #356]	; (1aaa0 <prvTraceGetDTS+0x1c0>)
   1a93c:	681b      	ldr	r3, [r3, #0]
   1a93e:	429a      	cmp	r2, r3
   1a940:	d007      	beq.n	1a952 <prvTraceGetDTS+0x72>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
   1a942:	4b54      	ldr	r3, [pc, #336]	; (1aa94 <prvTraceGetDTS+0x1b4>)
   1a944:	681c      	ldr	r4, [r3, #0]
   1a946:	2000      	movs	r0, #0
   1a948:	4b56      	ldr	r3, [pc, #344]	; (1aaa4 <prvTraceGetDTS+0x1c4>)
   1a94a:	4798      	blx	r3
   1a94c:	0003      	movs	r3, r0
   1a94e:	089b      	lsrs	r3, r3, #2
   1a950:	6263      	str	r3, [r4, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
   1a952:	230c      	movs	r3, #12
   1a954:	18fb      	adds	r3, r7, r3
   1a956:	0018      	movs	r0, r3
   1a958:	4b53      	ldr	r3, [pc, #332]	; (1aaa8 <prvTraceGetDTS+0x1c8>)
   1a95a:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
   1a95c:	68fa      	ldr	r2, [r7, #12]
   1a95e:	4b53      	ldr	r3, [pc, #332]	; (1aaac <prvTraceGetDTS+0x1cc>)
   1a960:	681b      	ldr	r3, [r3, #0]
   1a962:	1ad3      	subs	r3, r2, r3
   1a964:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
   1a966:	68fa      	ldr	r2, [r7, #12]
   1a968:	4b50      	ldr	r3, [pc, #320]	; (1aaac <prvTraceGetDTS+0x1cc>)
   1a96a:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
   1a96c:	4b49      	ldr	r3, [pc, #292]	; (1aa94 <prvTraceGetDTS+0x1b4>)
   1a96e:	681b      	ldr	r3, [r3, #0]
   1a970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a972:	2b00      	cmp	r3, #0
   1a974:	d044      	beq.n	1aa00 <prvTraceGetDTS+0x120>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
   1a976:	4b47      	ldr	r3, [pc, #284]	; (1aa94 <prvTraceGetDTS+0x1b4>)
   1a978:	681b      	ldr	r3, [r3, #0]
   1a97a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1a97c:	693b      	ldr	r3, [r7, #16]
   1a97e:	429a      	cmp	r2, r3
   1a980:	d21e      	bcs.n	1a9c0 <prvTraceGetDTS+0xe0>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
   1a982:	4b44      	ldr	r3, [pc, #272]	; (1aa94 <prvTraceGetDTS+0x1b4>)
   1a984:	681c      	ldr	r4, [r3, #0]
   1a986:	4b43      	ldr	r3, [pc, #268]	; (1aa94 <prvTraceGetDTS+0x1b4>)
   1a988:	681b      	ldr	r3, [r3, #0]
   1a98a:	6add      	ldr	r5, [r3, #44]	; 0x2c
   1a98c:	4b41      	ldr	r3, [pc, #260]	; (1aa94 <prvTraceGetDTS+0x1b4>)
   1a98e:	681b      	ldr	r3, [r3, #0]
   1a990:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1a992:	4b47      	ldr	r3, [pc, #284]	; (1aab0 <prvTraceGetDTS+0x1d0>)
   1a994:	0011      	movs	r1, r2
   1a996:	6938      	ldr	r0, [r7, #16]
   1a998:	4798      	blx	r3
   1a99a:	0003      	movs	r3, r0
   1a99c:	18eb      	adds	r3, r5, r3
   1a99e:	62e3      	str	r3, [r4, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
   1a9a0:	4b3c      	ldr	r3, [pc, #240]	; (1aa94 <prvTraceGetDTS+0x1b4>)
   1a9a2:	681c      	ldr	r4, [r3, #0]
   1a9a4:	4b3b      	ldr	r3, [pc, #236]	; (1aa94 <prvTraceGetDTS+0x1b4>)
   1a9a6:	681b      	ldr	r3, [r3, #0]
   1a9a8:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   1a9aa:	4b3a      	ldr	r3, [pc, #232]	; (1aa94 <prvTraceGetDTS+0x1b4>)
   1a9ac:	681b      	ldr	r3, [r3, #0]
   1a9ae:	6a59      	ldr	r1, [r3, #36]	; 0x24
   1a9b0:	693a      	ldr	r2, [r7, #16]
   1a9b2:	4b40      	ldr	r3, [pc, #256]	; (1aab4 <prvTraceGetDTS+0x1d4>)
   1a9b4:	0010      	movs	r0, r2
   1a9b6:	4798      	blx	r3
   1a9b8:	000b      	movs	r3, r1
   1a9ba:	18eb      	adds	r3, r5, r3
   1a9bc:	62a3      	str	r3, [r4, #40]	; 0x28
   1a9be:	e007      	b.n	1a9d0 <prvTraceGetDTS+0xf0>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
   1a9c0:	4b34      	ldr	r3, [pc, #208]	; (1aa94 <prvTraceGetDTS+0x1b4>)
   1a9c2:	681b      	ldr	r3, [r3, #0]
   1a9c4:	4a33      	ldr	r2, [pc, #204]	; (1aa94 <prvTraceGetDTS+0x1b4>)
   1a9c6:	6812      	ldr	r2, [r2, #0]
   1a9c8:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1a9ca:	693a      	ldr	r2, [r7, #16]
   1a9cc:	188a      	adds	r2, r1, r2
   1a9ce:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
   1a9d0:	4b30      	ldr	r3, [pc, #192]	; (1aa94 <prvTraceGetDTS+0x1b4>)
   1a9d2:	681b      	ldr	r3, [r3, #0]
   1a9d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1a9d6:	4b2f      	ldr	r3, [pc, #188]	; (1aa94 <prvTraceGetDTS+0x1b4>)
   1a9d8:	681b      	ldr	r3, [r3, #0]
   1a9da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1a9dc:	429a      	cmp	r2, r3
   1a9de:	d313      	bcc.n	1aa08 <prvTraceGetDTS+0x128>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
   1a9e0:	4b2c      	ldr	r3, [pc, #176]	; (1aa94 <prvTraceGetDTS+0x1b4>)
   1a9e2:	681b      	ldr	r3, [r3, #0]
   1a9e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1a9e6:	3201      	adds	r2, #1
   1a9e8:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
   1a9ea:	4b2a      	ldr	r3, [pc, #168]	; (1aa94 <prvTraceGetDTS+0x1b4>)
   1a9ec:	681b      	ldr	r3, [r3, #0]
   1a9ee:	4a29      	ldr	r2, [pc, #164]	; (1aa94 <prvTraceGetDTS+0x1b4>)
   1a9f0:	6812      	ldr	r2, [r2, #0]
   1a9f2:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1a9f4:	4a27      	ldr	r2, [pc, #156]	; (1aa94 <prvTraceGetDTS+0x1b4>)
   1a9f6:	6812      	ldr	r2, [r2, #0]
   1a9f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
   1a9fa:	1a8a      	subs	r2, r1, r2
   1a9fc:	629a      	str	r2, [r3, #40]	; 0x28
   1a9fe:	e003      	b.n	1aa08 <prvTraceGetDTS+0x128>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
   1aa00:	4b24      	ldr	r3, [pc, #144]	; (1aa94 <prvTraceGetDTS+0x1b4>)
   1aa02:	681b      	ldr	r3, [r3, #0]
   1aa04:	68fa      	ldr	r2, [r7, #12]
   1aa06:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
   1aa08:	1dbb      	adds	r3, r7, #6
   1aa0a:	881a      	ldrh	r2, [r3, #0]
   1aa0c:	693b      	ldr	r3, [r7, #16]
   1aa0e:	429a      	cmp	r2, r3
   1aa10:	d22f      	bcs.n	1aa72 <prvTraceGetDTS+0x192>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
   1aa12:	4b29      	ldr	r3, [pc, #164]	; (1aab8 <prvTraceGetDTS+0x1d8>)
   1aa14:	4798      	blx	r3
   1aa16:	0003      	movs	r3, r0
   1aa18:	617b      	str	r3, [r7, #20]

		if (xts != NULL)
   1aa1a:	697b      	ldr	r3, [r7, #20]
   1aa1c:	2b00      	cmp	r3, #0
   1aa1e:	d028      	beq.n	1aa72 <prvTraceGetDTS+0x192>
		{
			if (param_maxDTS == 0xFFFF)
   1aa20:	1dbb      	adds	r3, r7, #6
   1aa22:	881b      	ldrh	r3, [r3, #0]
   1aa24:	4a18      	ldr	r2, [pc, #96]	; (1aa88 <prvTraceGetDTS+0x1a8>)
   1aa26:	4293      	cmp	r3, r2
   1aa28:	d10b      	bne.n	1aa42 <prvTraceGetDTS+0x162>
			{
				xts->type = XTS16;
   1aa2a:	697b      	ldr	r3, [r7, #20]
   1aa2c:	22a9      	movs	r2, #169	; 0xa9
   1aa2e:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
   1aa30:	693b      	ldr	r3, [r7, #16]
   1aa32:	0c1b      	lsrs	r3, r3, #16
   1aa34:	b29a      	uxth	r2, r3
   1aa36:	697b      	ldr	r3, [r7, #20]
   1aa38:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
   1aa3a:	697b      	ldr	r3, [r7, #20]
   1aa3c:	2200      	movs	r2, #0
   1aa3e:	705a      	strb	r2, [r3, #1]
   1aa40:	e015      	b.n	1aa6e <prvTraceGetDTS+0x18e>
			}
			else if (param_maxDTS == 0xFF)
   1aa42:	1dbb      	adds	r3, r7, #6
   1aa44:	881b      	ldrh	r3, [r3, #0]
   1aa46:	2bff      	cmp	r3, #255	; 0xff
   1aa48:	d10d      	bne.n	1aa66 <prvTraceGetDTS+0x186>
			{
				xts->type = XTS8;
   1aa4a:	697b      	ldr	r3, [r7, #20]
   1aa4c:	22a8      	movs	r2, #168	; 0xa8
   1aa4e:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
   1aa50:	693b      	ldr	r3, [r7, #16]
   1aa52:	0a1b      	lsrs	r3, r3, #8
   1aa54:	b29a      	uxth	r2, r3
   1aa56:	697b      	ldr	r3, [r7, #20]
   1aa58:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
   1aa5a:	693b      	ldr	r3, [r7, #16]
   1aa5c:	0e1b      	lsrs	r3, r3, #24
   1aa5e:	b2da      	uxtb	r2, r3
   1aa60:	697b      	ldr	r3, [r7, #20]
   1aa62:	705a      	strb	r2, [r3, #1]
   1aa64:	e003      	b.n	1aa6e <prvTraceGetDTS+0x18e>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
   1aa66:	4b15      	ldr	r3, [pc, #84]	; (1aabc <prvTraceGetDTS+0x1dc>)
   1aa68:	0018      	movs	r0, r3
   1aa6a:	4b09      	ldr	r3, [pc, #36]	; (1aa90 <prvTraceGetDTS+0x1b0>)
   1aa6c:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
   1aa6e:	4b14      	ldr	r3, [pc, #80]	; (1aac0 <prvTraceGetDTS+0x1e0>)
   1aa70:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
   1aa72:	693b      	ldr	r3, [r7, #16]
   1aa74:	b29b      	uxth	r3, r3
   1aa76:	1dba      	adds	r2, r7, #6
   1aa78:	8812      	ldrh	r2, [r2, #0]
   1aa7a:	4013      	ands	r3, r2
   1aa7c:	b29b      	uxth	r3, r3
}
   1aa7e:	0018      	movs	r0, r3
   1aa80:	46bd      	mov	sp, r7
   1aa82:	b006      	add	sp, #24
   1aa84:	bdb0      	pop	{r4, r5, r7, pc}
   1aa86:	46c0      	nop			; (mov r8, r8)
   1aa88:	0000ffff 	.word	0x0000ffff
   1aa8c:	00038e94 	.word	0x00038e94
   1aa90:	0001a6cd 	.word	0x0001a6cd
   1aa94:	20000df4 	.word	0x20000df4
   1aa98:	20000d50 	.word	0x20000d50
   1aa9c:	e000e018 	.word	0xe000e018
   1aaa0:	2000561c 	.word	0x2000561c
   1aaa4:	0002a9a9 	.word	0x0002a9a9
   1aaa8:	0001aac5 	.word	0x0001aac5
   1aaac:	20000e00 	.word	0x20000e00
   1aab0:	00033615 	.word	0x00033615
   1aab4:	00033721 	.word	0x00033721
   1aab8:	0001a285 	.word	0x0001a285
   1aabc:	00038ed4 	.word	0x00038ed4
   1aac0:	0001a889 	.word	0x0001a889

0001aac4 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
   1aac4:	b580      	push	{r7, lr}
   1aac6:	b084      	sub	sp, #16
   1aac8:	af00      	add	r7, sp, #0
   1aaca:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
   1aacc:	2300      	movs	r3, #0
   1aace:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
   1aad0:	2300      	movs	r3, #0
   1aad2:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
   1aad4:	4b2d      	ldr	r3, [pc, #180]	; (1ab8c <prvTracePortGetTimeStamp+0xc8>)
   1aad6:	681b      	ldr	r3, [r3, #0]
   1aad8:	2b01      	cmp	r3, #1
   1aada:	d107      	bne.n	1aaec <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
   1aadc:	687b      	ldr	r3, [r7, #4]
   1aade:	2b00      	cmp	r3, #0
   1aae0:	d04f      	beq.n	1ab82 <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
   1aae2:	4b2b      	ldr	r3, [pc, #172]	; (1ab90 <prvTracePortGetTimeStamp+0xcc>)
   1aae4:	681a      	ldr	r2, [r3, #0]
   1aae6:	687b      	ldr	r3, [r7, #4]
   1aae8:	601a      	str	r2, [r3, #0]
		return;
   1aaea:	e04a      	b.n	1ab82 <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
   1aaec:	4b29      	ldr	r3, [pc, #164]	; (1ab94 <prvTracePortGetTimeStamp+0xd0>)
   1aaee:	681a      	ldr	r2, [r3, #0]
   1aaf0:	4b29      	ldr	r3, [pc, #164]	; (1ab98 <prvTracePortGetTimeStamp+0xd4>)
   1aaf2:	681b      	ldr	r3, [r3, #0]
   1aaf4:	1ad3      	subs	r3, r2, r3
   1aaf6:	3301      	adds	r3, #1
   1aaf8:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
   1aafa:	4b28      	ldr	r3, [pc, #160]	; (1ab9c <prvTracePortGetTimeStamp+0xd8>)
   1aafc:	681a      	ldr	r2, [r3, #0]
   1aafe:	4b28      	ldr	r3, [pc, #160]	; (1aba0 <prvTracePortGetTimeStamp+0xdc>)
   1ab00:	681b      	ldr	r3, [r3, #0]
   1ab02:	1ad3      	subs	r3, r2, r3
   1ab04:	3b01      	subs	r3, #1
   1ab06:	2b00      	cmp	r3, #0
   1ab08:	db03      	blt.n	1ab12 <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
   1ab0a:	4b24      	ldr	r3, [pc, #144]	; (1ab9c <prvTracePortGetTimeStamp+0xd8>)
   1ab0c:	681b      	ldr	r3, [r3, #0]
   1ab0e:	60fb      	str	r3, [r7, #12]
   1ab10:	e002      	b.n	1ab18 <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
   1ab12:	4b23      	ldr	r3, [pc, #140]	; (1aba0 <prvTracePortGetTimeStamp+0xdc>)
   1ab14:	681b      	ldr	r3, [r3, #0]
   1ab16:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
   1ab18:	4b20      	ldr	r3, [pc, #128]	; (1ab9c <prvTracePortGetTimeStamp+0xd8>)
   1ab1a:	681b      	ldr	r3, [r3, #0]
   1ab1c:	68fa      	ldr	r2, [r7, #12]
   1ab1e:	429a      	cmp	r2, r3
   1ab20:	d107      	bne.n	1ab32 <prvTracePortGetTimeStamp+0x6e>
   1ab22:	4b20      	ldr	r3, [pc, #128]	; (1aba4 <prvTracePortGetTimeStamp+0xe0>)
   1ab24:	681b      	ldr	r3, [r3, #0]
   1ab26:	68ba      	ldr	r2, [r7, #8]
   1ab28:	429a      	cmp	r2, r3
   1ab2a:	d202      	bcs.n	1ab32 <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
   1ab2c:	68fb      	ldr	r3, [r7, #12]
   1ab2e:	3301      	adds	r3, #1
   1ab30:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
   1ab32:	687b      	ldr	r3, [r7, #4]
   1ab34:	2b00      	cmp	r3, #0
   1ab36:	d016      	beq.n	1ab66 <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
   1ab38:	4b16      	ldr	r3, [pc, #88]	; (1ab94 <prvTracePortGetTimeStamp+0xd0>)
   1ab3a:	681b      	ldr	r3, [r3, #0]
   1ab3c:	3301      	adds	r3, #1
   1ab3e:	089b      	lsrs	r3, r3, #2
   1ab40:	68fa      	ldr	r2, [r7, #12]
   1ab42:	435a      	muls	r2, r3
   1ab44:	4b12      	ldr	r3, [pc, #72]	; (1ab90 <prvTracePortGetTimeStamp+0xcc>)
   1ab46:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
   1ab48:	4b12      	ldr	r3, [pc, #72]	; (1ab94 <prvTracePortGetTimeStamp+0xd0>)
   1ab4a:	681b      	ldr	r3, [r3, #0]
   1ab4c:	3301      	adds	r3, #1
   1ab4e:	2203      	movs	r2, #3
   1ab50:	4013      	ands	r3, r2
   1ab52:	68fa      	ldr	r2, [r7, #12]
   1ab54:	435a      	muls	r2, r3
   1ab56:	68bb      	ldr	r3, [r7, #8]
   1ab58:	18d3      	adds	r3, r2, r3
   1ab5a:	089a      	lsrs	r2, r3, #2
   1ab5c:	4b0c      	ldr	r3, [pc, #48]	; (1ab90 <prvTracePortGetTimeStamp+0xcc>)
   1ab5e:	681b      	ldr	r3, [r3, #0]
   1ab60:	18d2      	adds	r2, r2, r3
   1ab62:	4b0b      	ldr	r3, [pc, #44]	; (1ab90 <prvTracePortGetTimeStamp+0xcc>)
   1ab64:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
   1ab66:	4b0d      	ldr	r3, [pc, #52]	; (1ab9c <prvTracePortGetTimeStamp+0xd8>)
   1ab68:	68fa      	ldr	r2, [r7, #12]
   1ab6a:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
   1ab6c:	687b      	ldr	r3, [r7, #4]
   1ab6e:	2b00      	cmp	r3, #0
   1ab70:	d003      	beq.n	1ab7a <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
   1ab72:	4b07      	ldr	r3, [pc, #28]	; (1ab90 <prvTracePortGetTimeStamp+0xcc>)
   1ab74:	681a      	ldr	r2, [r3, #0]
   1ab76:	687b      	ldr	r3, [r7, #4]
   1ab78:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
   1ab7a:	4b0a      	ldr	r3, [pc, #40]	; (1aba4 <prvTracePortGetTimeStamp+0xe0>)
   1ab7c:	68ba      	ldr	r2, [r7, #8]
   1ab7e:	601a      	str	r2, [r3, #0]
   1ab80:	e000      	b.n	1ab84 <prvTracePortGetTimeStamp+0xc0>
		return;
   1ab82:	46c0      	nop			; (mov r8, r8)
}
   1ab84:	46bd      	mov	sp, r7
   1ab86:	b004      	add	sp, #16
   1ab88:	bd80      	pop	{r7, pc}
   1ab8a:	46c0      	nop			; (mov r8, r8)
   1ab8c:	20000d40 	.word	0x20000d40
   1ab90:	20000d44 	.word	0x20000d44
   1ab94:	e000e014 	.word	0xe000e014
   1ab98:	e000e018 	.word	0xe000e018
   1ab9c:	20000e04 	.word	0x20000e04
   1aba0:	20000d3c 	.word	0x20000d3c
   1aba4:	20000e08 	.word	0x20000e08

0001aba8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   1aba8:	b580      	push	{r7, lr}
   1abaa:	b082      	sub	sp, #8
   1abac:	af00      	add	r7, sp, #0
   1abae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1abb0:	687b      	ldr	r3, [r7, #4]
   1abb2:	3308      	adds	r3, #8
   1abb4:	001a      	movs	r2, r3
   1abb6:	687b      	ldr	r3, [r7, #4]
   1abb8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   1abba:	687b      	ldr	r3, [r7, #4]
   1abbc:	2201      	movs	r2, #1
   1abbe:	4252      	negs	r2, r2
   1abc0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1abc2:	687b      	ldr	r3, [r7, #4]
   1abc4:	3308      	adds	r3, #8
   1abc6:	001a      	movs	r2, r3
   1abc8:	687b      	ldr	r3, [r7, #4]
   1abca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1abcc:	687b      	ldr	r3, [r7, #4]
   1abce:	3308      	adds	r3, #8
   1abd0:	001a      	movs	r2, r3
   1abd2:	687b      	ldr	r3, [r7, #4]
   1abd4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   1abd6:	687b      	ldr	r3, [r7, #4]
   1abd8:	2200      	movs	r2, #0
   1abda:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   1abdc:	46c0      	nop			; (mov r8, r8)
   1abde:	46bd      	mov	sp, r7
   1abe0:	b002      	add	sp, #8
   1abe2:	bd80      	pop	{r7, pc}

0001abe4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   1abe4:	b580      	push	{r7, lr}
   1abe6:	b082      	sub	sp, #8
   1abe8:	af00      	add	r7, sp, #0
   1abea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   1abec:	687b      	ldr	r3, [r7, #4]
   1abee:	2200      	movs	r2, #0
   1abf0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   1abf2:	46c0      	nop			; (mov r8, r8)
   1abf4:	46bd      	mov	sp, r7
   1abf6:	b002      	add	sp, #8
   1abf8:	bd80      	pop	{r7, pc}

0001abfa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1abfa:	b580      	push	{r7, lr}
   1abfc:	b084      	sub	sp, #16
   1abfe:	af00      	add	r7, sp, #0
   1ac00:	6078      	str	r0, [r7, #4]
   1ac02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   1ac04:	687b      	ldr	r3, [r7, #4]
   1ac06:	685b      	ldr	r3, [r3, #4]
   1ac08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   1ac0a:	683b      	ldr	r3, [r7, #0]
   1ac0c:	68fa      	ldr	r2, [r7, #12]
   1ac0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   1ac10:	68fb      	ldr	r3, [r7, #12]
   1ac12:	689a      	ldr	r2, [r3, #8]
   1ac14:	683b      	ldr	r3, [r7, #0]
   1ac16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   1ac18:	68fb      	ldr	r3, [r7, #12]
   1ac1a:	689b      	ldr	r3, [r3, #8]
   1ac1c:	683a      	ldr	r2, [r7, #0]
   1ac1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   1ac20:	68fb      	ldr	r3, [r7, #12]
   1ac22:	683a      	ldr	r2, [r7, #0]
   1ac24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1ac26:	683b      	ldr	r3, [r7, #0]
   1ac28:	687a      	ldr	r2, [r7, #4]
   1ac2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1ac2c:	687b      	ldr	r3, [r7, #4]
   1ac2e:	681b      	ldr	r3, [r3, #0]
   1ac30:	1c5a      	adds	r2, r3, #1
   1ac32:	687b      	ldr	r3, [r7, #4]
   1ac34:	601a      	str	r2, [r3, #0]
}
   1ac36:	46c0      	nop			; (mov r8, r8)
   1ac38:	46bd      	mov	sp, r7
   1ac3a:	b004      	add	sp, #16
   1ac3c:	bd80      	pop	{r7, pc}

0001ac3e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1ac3e:	b580      	push	{r7, lr}
   1ac40:	b084      	sub	sp, #16
   1ac42:	af00      	add	r7, sp, #0
   1ac44:	6078      	str	r0, [r7, #4]
   1ac46:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   1ac48:	683b      	ldr	r3, [r7, #0]
   1ac4a:	681b      	ldr	r3, [r3, #0]
   1ac4c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   1ac4e:	68bb      	ldr	r3, [r7, #8]
   1ac50:	3301      	adds	r3, #1
   1ac52:	d103      	bne.n	1ac5c <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   1ac54:	687b      	ldr	r3, [r7, #4]
   1ac56:	691b      	ldr	r3, [r3, #16]
   1ac58:	60fb      	str	r3, [r7, #12]
   1ac5a:	e00c      	b.n	1ac76 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1ac5c:	687b      	ldr	r3, [r7, #4]
   1ac5e:	3308      	adds	r3, #8
   1ac60:	60fb      	str	r3, [r7, #12]
   1ac62:	e002      	b.n	1ac6a <vListInsert+0x2c>
   1ac64:	68fb      	ldr	r3, [r7, #12]
   1ac66:	685b      	ldr	r3, [r3, #4]
   1ac68:	60fb      	str	r3, [r7, #12]
   1ac6a:	68fb      	ldr	r3, [r7, #12]
   1ac6c:	685b      	ldr	r3, [r3, #4]
   1ac6e:	681a      	ldr	r2, [r3, #0]
   1ac70:	68bb      	ldr	r3, [r7, #8]
   1ac72:	429a      	cmp	r2, r3
   1ac74:	d9f6      	bls.n	1ac64 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   1ac76:	68fb      	ldr	r3, [r7, #12]
   1ac78:	685a      	ldr	r2, [r3, #4]
   1ac7a:	683b      	ldr	r3, [r7, #0]
   1ac7c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   1ac7e:	683b      	ldr	r3, [r7, #0]
   1ac80:	685b      	ldr	r3, [r3, #4]
   1ac82:	683a      	ldr	r2, [r7, #0]
   1ac84:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   1ac86:	683b      	ldr	r3, [r7, #0]
   1ac88:	68fa      	ldr	r2, [r7, #12]
   1ac8a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   1ac8c:	68fb      	ldr	r3, [r7, #12]
   1ac8e:	683a      	ldr	r2, [r7, #0]
   1ac90:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1ac92:	683b      	ldr	r3, [r7, #0]
   1ac94:	687a      	ldr	r2, [r7, #4]
   1ac96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1ac98:	687b      	ldr	r3, [r7, #4]
   1ac9a:	681b      	ldr	r3, [r3, #0]
   1ac9c:	1c5a      	adds	r2, r3, #1
   1ac9e:	687b      	ldr	r3, [r7, #4]
   1aca0:	601a      	str	r2, [r3, #0]
}
   1aca2:	46c0      	nop			; (mov r8, r8)
   1aca4:	46bd      	mov	sp, r7
   1aca6:	b004      	add	sp, #16
   1aca8:	bd80      	pop	{r7, pc}

0001acaa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   1acaa:	b580      	push	{r7, lr}
   1acac:	b084      	sub	sp, #16
   1acae:	af00      	add	r7, sp, #0
   1acb0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   1acb2:	687b      	ldr	r3, [r7, #4]
   1acb4:	691b      	ldr	r3, [r3, #16]
   1acb6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   1acb8:	687b      	ldr	r3, [r7, #4]
   1acba:	685b      	ldr	r3, [r3, #4]
   1acbc:	687a      	ldr	r2, [r7, #4]
   1acbe:	6892      	ldr	r2, [r2, #8]
   1acc0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   1acc2:	687b      	ldr	r3, [r7, #4]
   1acc4:	689b      	ldr	r3, [r3, #8]
   1acc6:	687a      	ldr	r2, [r7, #4]
   1acc8:	6852      	ldr	r2, [r2, #4]
   1acca:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   1accc:	68fb      	ldr	r3, [r7, #12]
   1acce:	685a      	ldr	r2, [r3, #4]
   1acd0:	687b      	ldr	r3, [r7, #4]
   1acd2:	429a      	cmp	r2, r3
   1acd4:	d103      	bne.n	1acde <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   1acd6:	687b      	ldr	r3, [r7, #4]
   1acd8:	689a      	ldr	r2, [r3, #8]
   1acda:	68fb      	ldr	r3, [r7, #12]
   1acdc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   1acde:	687b      	ldr	r3, [r7, #4]
   1ace0:	2200      	movs	r2, #0
   1ace2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   1ace4:	68fb      	ldr	r3, [r7, #12]
   1ace6:	681b      	ldr	r3, [r3, #0]
   1ace8:	1e5a      	subs	r2, r3, #1
   1acea:	68fb      	ldr	r3, [r7, #12]
   1acec:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   1acee:	68fb      	ldr	r3, [r7, #12]
   1acf0:	681b      	ldr	r3, [r3, #0]
}
   1acf2:	0018      	movs	r0, r3
   1acf4:	46bd      	mov	sp, r7
   1acf6:	b004      	add	sp, #16
   1acf8:	bd80      	pop	{r7, pc}
	...

0001acfc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   1acfc:	b580      	push	{r7, lr}
   1acfe:	b084      	sub	sp, #16
   1ad00:	af00      	add	r7, sp, #0
   1ad02:	60f8      	str	r0, [r7, #12]
   1ad04:	60b9      	str	r1, [r7, #8]
   1ad06:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   1ad08:	68fb      	ldr	r3, [r7, #12]
   1ad0a:	3b04      	subs	r3, #4
   1ad0c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   1ad0e:	68fb      	ldr	r3, [r7, #12]
   1ad10:	2280      	movs	r2, #128	; 0x80
   1ad12:	0452      	lsls	r2, r2, #17
   1ad14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1ad16:	68fb      	ldr	r3, [r7, #12]
   1ad18:	3b04      	subs	r3, #4
   1ad1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   1ad1c:	68ba      	ldr	r2, [r7, #8]
   1ad1e:	68fb      	ldr	r3, [r7, #12]
   1ad20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1ad22:	68fb      	ldr	r3, [r7, #12]
   1ad24:	3b04      	subs	r3, #4
   1ad26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   1ad28:	4a08      	ldr	r2, [pc, #32]	; (1ad4c <pxPortInitialiseStack+0x50>)
   1ad2a:	68fb      	ldr	r3, [r7, #12]
   1ad2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   1ad2e:	68fb      	ldr	r3, [r7, #12]
   1ad30:	3b14      	subs	r3, #20
   1ad32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   1ad34:	687a      	ldr	r2, [r7, #4]
   1ad36:	68fb      	ldr	r3, [r7, #12]
   1ad38:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   1ad3a:	68fb      	ldr	r3, [r7, #12]
   1ad3c:	3b20      	subs	r3, #32
   1ad3e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   1ad40:	68fb      	ldr	r3, [r7, #12]
}
   1ad42:	0018      	movs	r0, r3
   1ad44:	46bd      	mov	sp, r7
   1ad46:	b004      	add	sp, #16
   1ad48:	bd80      	pop	{r7, pc}
   1ad4a:	46c0      	nop			; (mov r8, r8)
   1ad4c:	0001ad51 	.word	0x0001ad51

0001ad50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   1ad50:	b580      	push	{r7, lr}
   1ad52:	b082      	sub	sp, #8
   1ad54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
   1ad56:	2300      	movs	r3, #0
   1ad58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   1ad5a:	4b07      	ldr	r3, [pc, #28]	; (1ad78 <prvTaskExitError+0x28>)
   1ad5c:	681b      	ldr	r3, [r3, #0]
   1ad5e:	3301      	adds	r3, #1
   1ad60:	d001      	beq.n	1ad66 <prvTaskExitError+0x16>
   1ad62:	b672      	cpsid	i
   1ad64:	e7fe      	b.n	1ad64 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
   1ad66:	b672      	cpsid	i
	while( ulDummy == 0 )
   1ad68:	46c0      	nop			; (mov r8, r8)
   1ad6a:	687b      	ldr	r3, [r7, #4]
   1ad6c:	2b00      	cmp	r3, #0
   1ad6e:	d0fc      	beq.n	1ad6a <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   1ad70:	46c0      	nop			; (mov r8, r8)
   1ad72:	46bd      	mov	sp, r7
   1ad74:	b002      	add	sp, #8
   1ad76:	bd80      	pop	{r7, pc}
   1ad78:	20000114 	.word	0x20000114

0001ad7c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
   1ad7c:	b580      	push	{r7, lr}
   1ad7e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
   1ad80:	46c0      	nop			; (mov r8, r8)
   1ad82:	46bd      	mov	sp, r7
   1ad84:	bd80      	pop	{r7, pc}
	...

0001ad90 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   1ad90:	4a0b      	ldr	r2, [pc, #44]	; (1adc0 <pxCurrentTCBConst2>)
   1ad92:	6813      	ldr	r3, [r2, #0]
   1ad94:	6818      	ldr	r0, [r3, #0]
   1ad96:	3020      	adds	r0, #32
   1ad98:	f380 8809 	msr	PSP, r0
   1ad9c:	2002      	movs	r0, #2
   1ad9e:	f380 8814 	msr	CONTROL, r0
   1ada2:	f3bf 8f6f 	isb	sy
   1ada6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   1ada8:	46ae      	mov	lr, r5
   1adaa:	bc08      	pop	{r3}
   1adac:	bc04      	pop	{r2}
   1adae:	b662      	cpsie	i
   1adb0:	4718      	bx	r3
   1adb2:	46c0      	nop			; (mov r8, r8)
   1adb4:	46c0      	nop			; (mov r8, r8)
   1adb6:	46c0      	nop			; (mov r8, r8)
   1adb8:	46c0      	nop			; (mov r8, r8)
   1adba:	46c0      	nop			; (mov r8, r8)
   1adbc:	46c0      	nop			; (mov r8, r8)
   1adbe:	46c0      	nop			; (mov r8, r8)

0001adc0 <pxCurrentTCBConst2>:
   1adc0:	200040dc 	.word	0x200040dc
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
   1adc4:	46c0      	nop			; (mov r8, r8)
   1adc6:	46c0      	nop			; (mov r8, r8)

0001adc8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   1adc8:	b580      	push	{r7, lr}
   1adca:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   1adcc:	4b0e      	ldr	r3, [pc, #56]	; (1ae08 <xPortStartScheduler+0x40>)
   1adce:	4a0e      	ldr	r2, [pc, #56]	; (1ae08 <xPortStartScheduler+0x40>)
   1add0:	6812      	ldr	r2, [r2, #0]
   1add2:	21ff      	movs	r1, #255	; 0xff
   1add4:	0409      	lsls	r1, r1, #16
   1add6:	430a      	orrs	r2, r1
   1add8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   1adda:	4b0b      	ldr	r3, [pc, #44]	; (1ae08 <xPortStartScheduler+0x40>)
   1addc:	4a0a      	ldr	r2, [pc, #40]	; (1ae08 <xPortStartScheduler+0x40>)
   1adde:	6812      	ldr	r2, [r2, #0]
   1ade0:	21ff      	movs	r1, #255	; 0xff
   1ade2:	0609      	lsls	r1, r1, #24
   1ade4:	430a      	orrs	r2, r1
   1ade6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   1ade8:	4b08      	ldr	r3, [pc, #32]	; (1ae0c <xPortStartScheduler+0x44>)
   1adea:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   1adec:	4b08      	ldr	r3, [pc, #32]	; (1ae10 <xPortStartScheduler+0x48>)
   1adee:	2200      	movs	r2, #0
   1adf0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
   1adf2:	4b08      	ldr	r3, [pc, #32]	; (1ae14 <xPortStartScheduler+0x4c>)
   1adf4:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   1adf6:	4b08      	ldr	r3, [pc, #32]	; (1ae18 <xPortStartScheduler+0x50>)
   1adf8:	4798      	blx	r3
	prvTaskExitError();
   1adfa:	4b08      	ldr	r3, [pc, #32]	; (1ae1c <xPortStartScheduler+0x54>)
   1adfc:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   1adfe:	2300      	movs	r3, #0
}
   1ae00:	0018      	movs	r0, r3
   1ae02:	46bd      	mov	sp, r7
   1ae04:	bd80      	pop	{r7, pc}
   1ae06:	46c0      	nop			; (mov r8, r8)
   1ae08:	e000ed20 	.word	0xe000ed20
   1ae0c:	0001af29 	.word	0x0001af29
   1ae10:	20000114 	.word	0x20000114
   1ae14:	0001ad91 	.word	0x0001ad91
   1ae18:	0001d485 	.word	0x0001d485
   1ae1c:	0001ad51 	.word	0x0001ad51

0001ae20 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   1ae20:	b580      	push	{r7, lr}
   1ae22:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   1ae24:	4b03      	ldr	r3, [pc, #12]	; (1ae34 <vPortYield+0x14>)
   1ae26:	2280      	movs	r2, #128	; 0x80
   1ae28:	0552      	lsls	r2, r2, #21
   1ae2a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	//__asm volatile( "dsb" ::: "memory" );
	//__asm volatile( "isb" );
}
   1ae2c:	46c0      	nop			; (mov r8, r8)
   1ae2e:	46bd      	mov	sp, r7
   1ae30:	bd80      	pop	{r7, pc}
   1ae32:	46c0      	nop			; (mov r8, r8)
   1ae34:	e000ed04 	.word	0xe000ed04

0001ae38 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   1ae38:	b580      	push	{r7, lr}
   1ae3a:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
   1ae3c:	b672      	cpsid	i
    uxCriticalNesting++;
   1ae3e:	4b06      	ldr	r3, [pc, #24]	; (1ae58 <vPortEnterCritical+0x20>)
   1ae40:	681b      	ldr	r3, [r3, #0]
   1ae42:	1c5a      	adds	r2, r3, #1
   1ae44:	4b04      	ldr	r3, [pc, #16]	; (1ae58 <vPortEnterCritical+0x20>)
   1ae46:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
   1ae48:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1ae4c:	f3bf 8f6f 	isb	sy
}
   1ae50:	46c0      	nop			; (mov r8, r8)
   1ae52:	46bd      	mov	sp, r7
   1ae54:	bd80      	pop	{r7, pc}
   1ae56:	46c0      	nop			; (mov r8, r8)
   1ae58:	20000114 	.word	0x20000114

0001ae5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   1ae5c:	b580      	push	{r7, lr}
   1ae5e:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   1ae60:	4b09      	ldr	r3, [pc, #36]	; (1ae88 <vPortExitCritical+0x2c>)
   1ae62:	681b      	ldr	r3, [r3, #0]
   1ae64:	2b00      	cmp	r3, #0
   1ae66:	d101      	bne.n	1ae6c <vPortExitCritical+0x10>
   1ae68:	b672      	cpsid	i
   1ae6a:	e7fe      	b.n	1ae6a <vPortExitCritical+0xe>
    uxCriticalNesting--;
   1ae6c:	4b06      	ldr	r3, [pc, #24]	; (1ae88 <vPortExitCritical+0x2c>)
   1ae6e:	681b      	ldr	r3, [r3, #0]
   1ae70:	1e5a      	subs	r2, r3, #1
   1ae72:	4b05      	ldr	r3, [pc, #20]	; (1ae88 <vPortExitCritical+0x2c>)
   1ae74:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
   1ae76:	4b04      	ldr	r3, [pc, #16]	; (1ae88 <vPortExitCritical+0x2c>)
   1ae78:	681b      	ldr	r3, [r3, #0]
   1ae7a:	2b00      	cmp	r3, #0
   1ae7c:	d100      	bne.n	1ae80 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
   1ae7e:	b662      	cpsie	i
    }
}
   1ae80:	46c0      	nop			; (mov r8, r8)
   1ae82:	46bd      	mov	sp, r7
   1ae84:	bd80      	pop	{r7, pc}
   1ae86:	46c0      	nop			; (mov r8, r8)
   1ae88:	20000114 	.word	0x20000114

0001ae8c <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
   1ae8c:	f3ef 8010 	mrs	r0, PRIMASK
   1ae90:	b672      	cpsid	i
   1ae92:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
   1ae94:	46c0      	nop			; (mov r8, r8)
   1ae96:	0018      	movs	r0, r3

0001ae98 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
   1ae98:	f380 8810 	msr	PRIMASK, r0
   1ae9c:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
   1ae9e:	46c0      	nop			; (mov r8, r8)

0001aea0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   1aea0:	f3ef 8009 	mrs	r0, PSP
   1aea4:	4b0e      	ldr	r3, [pc, #56]	; (1aee0 <pxCurrentTCBConst>)
   1aea6:	681a      	ldr	r2, [r3, #0]
   1aea8:	3820      	subs	r0, #32
   1aeaa:	6010      	str	r0, [r2, #0]
   1aeac:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1aeae:	4644      	mov	r4, r8
   1aeb0:	464d      	mov	r5, r9
   1aeb2:	4656      	mov	r6, sl
   1aeb4:	465f      	mov	r7, fp
   1aeb6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1aeb8:	b508      	push	{r3, lr}
   1aeba:	b672      	cpsid	i
   1aebc:	f002 fae2 	bl	1d484 <vTaskSwitchContext>
   1aec0:	b662      	cpsie	i
   1aec2:	bc0c      	pop	{r2, r3}
   1aec4:	6811      	ldr	r1, [r2, #0]
   1aec6:	6808      	ldr	r0, [r1, #0]
   1aec8:	3010      	adds	r0, #16
   1aeca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1aecc:	46a0      	mov	r8, r4
   1aece:	46a9      	mov	r9, r5
   1aed0:	46b2      	mov	sl, r6
   1aed2:	46bb      	mov	fp, r7
   1aed4:	f380 8809 	msr	PSP, r0
   1aed8:	3820      	subs	r0, #32
   1aeda:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1aedc:	4718      	bx	r3
   1aede:	46c0      	nop			; (mov r8, r8)

0001aee0 <pxCurrentTCBConst>:
   1aee0:	200040dc 	.word	0x200040dc
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
   1aee4:	46c0      	nop			; (mov r8, r8)
   1aee6:	46c0      	nop			; (mov r8, r8)

0001aee8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   1aee8:	b580      	push	{r7, lr}
   1aeea:	b082      	sub	sp, #8
   1aeec:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   1aeee:	4b0a      	ldr	r3, [pc, #40]	; (1af18 <SysTick_Handler+0x30>)
   1aef0:	4798      	blx	r3
   1aef2:	0003      	movs	r3, r0
   1aef4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   1aef6:	4b09      	ldr	r3, [pc, #36]	; (1af1c <SysTick_Handler+0x34>)
   1aef8:	4798      	blx	r3
   1aefa:	1e03      	subs	r3, r0, #0
   1aefc:	d003      	beq.n	1af06 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   1aefe:	4b08      	ldr	r3, [pc, #32]	; (1af20 <SysTick_Handler+0x38>)
   1af00:	2280      	movs	r2, #128	; 0x80
   1af02:	0552      	lsls	r2, r2, #21
   1af04:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   1af06:	687b      	ldr	r3, [r7, #4]
   1af08:	0018      	movs	r0, r3
   1af0a:	4b06      	ldr	r3, [pc, #24]	; (1af24 <SysTick_Handler+0x3c>)
   1af0c:	4798      	blx	r3
}
   1af0e:	46c0      	nop			; (mov r8, r8)
   1af10:	46bd      	mov	sp, r7
   1af12:	b002      	add	sp, #8
   1af14:	bd80      	pop	{r7, pc}
   1af16:	46c0      	nop			; (mov r8, r8)
   1af18:	0001ae8d 	.word	0x0001ae8d
   1af1c:	0001d295 	.word	0x0001d295
   1af20:	e000ed04 	.word	0xe000ed04
   1af24:	0001ae99 	.word	0x0001ae99

0001af28 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
   1af28:	b5b0      	push	{r4, r5, r7, lr}
   1af2a:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   1af2c:	4b0b      	ldr	r3, [pc, #44]	; (1af5c <prvSetupTimerInterrupt+0x34>)
   1af2e:	2200      	movs	r2, #0
   1af30:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   1af32:	4b0b      	ldr	r3, [pc, #44]	; (1af60 <prvSetupTimerInterrupt+0x38>)
   1af34:	2200      	movs	r2, #0
   1af36:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   1af38:	4c0a      	ldr	r4, [pc, #40]	; (1af64 <prvSetupTimerInterrupt+0x3c>)
   1af3a:	2000      	movs	r0, #0
   1af3c:	4b0a      	ldr	r3, [pc, #40]	; (1af68 <prvSetupTimerInterrupt+0x40>)
   1af3e:	4798      	blx	r3
   1af40:	4b0a      	ldr	r3, [pc, #40]	; (1af6c <prvSetupTimerInterrupt+0x44>)
   1af42:	22fa      	movs	r2, #250	; 0xfa
   1af44:	0091      	lsls	r1, r2, #2
   1af46:	4798      	blx	r3
   1af48:	0003      	movs	r3, r0
   1af4a:	3b01      	subs	r3, #1
   1af4c:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   1af4e:	4b03      	ldr	r3, [pc, #12]	; (1af5c <prvSetupTimerInterrupt+0x34>)
   1af50:	2207      	movs	r2, #7
   1af52:	601a      	str	r2, [r3, #0]
}
   1af54:	46c0      	nop			; (mov r8, r8)
   1af56:	46bd      	mov	sp, r7
   1af58:	bdb0      	pop	{r4, r5, r7, pc}
   1af5a:	46c0      	nop			; (mov r8, r8)
   1af5c:	e000e010 	.word	0xe000e010
   1af60:	e000e018 	.word	0xe000e018
   1af64:	e000e014 	.word	0xe000e014
   1af68:	0002a9a9 	.word	0x0002a9a9
   1af6c:	00033615 	.word	0x00033615

0001af70 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   1af70:	b580      	push	{r7, lr}
   1af72:	b084      	sub	sp, #16
   1af74:	af00      	add	r7, sp, #0
   1af76:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
   1af78:	2300      	movs	r3, #0
   1af7a:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   1af7c:	687b      	ldr	r3, [r7, #4]
   1af7e:	2207      	movs	r2, #7
   1af80:	4013      	ands	r3, r2
   1af82:	d004      	beq.n	1af8e <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   1af84:	687b      	ldr	r3, [r7, #4]
   1af86:	2207      	movs	r2, #7
   1af88:	4393      	bics	r3, r2
   1af8a:	3308      	adds	r3, #8
   1af8c:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
   1af8e:	4b21      	ldr	r3, [pc, #132]	; (1b014 <pvPortMalloc+0xa4>)
   1af90:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   1af92:	4b21      	ldr	r3, [pc, #132]	; (1b018 <pvPortMalloc+0xa8>)
   1af94:	681b      	ldr	r3, [r3, #0]
   1af96:	2b00      	cmp	r3, #0
   1af98:	d105      	bne.n	1afa6 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   1af9a:	4b20      	ldr	r3, [pc, #128]	; (1b01c <pvPortMalloc+0xac>)
   1af9c:	2207      	movs	r2, #7
   1af9e:	4393      	bics	r3, r2
   1afa0:	001a      	movs	r2, r3
   1afa2:	4b1d      	ldr	r3, [pc, #116]	; (1b018 <pvPortMalloc+0xa8>)
   1afa4:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1afa6:	4b1e      	ldr	r3, [pc, #120]	; (1b020 <pvPortMalloc+0xb0>)
   1afa8:	681a      	ldr	r2, [r3, #0]
   1afaa:	687b      	ldr	r3, [r7, #4]
   1afac:	18d3      	adds	r3, r2, r3
   1afae:	4a1d      	ldr	r2, [pc, #116]	; (1b024 <pvPortMalloc+0xb4>)
   1afb0:	4293      	cmp	r3, r2
   1afb2:	d813      	bhi.n	1afdc <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
   1afb4:	4b1a      	ldr	r3, [pc, #104]	; (1b020 <pvPortMalloc+0xb0>)
   1afb6:	681a      	ldr	r2, [r3, #0]
   1afb8:	687b      	ldr	r3, [r7, #4]
   1afba:	18d2      	adds	r2, r2, r3
   1afbc:	4b18      	ldr	r3, [pc, #96]	; (1b020 <pvPortMalloc+0xb0>)
   1afbe:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1afc0:	429a      	cmp	r2, r3
   1afc2:	d90b      	bls.n	1afdc <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   1afc4:	4b14      	ldr	r3, [pc, #80]	; (1b018 <pvPortMalloc+0xa8>)
   1afc6:	681a      	ldr	r2, [r3, #0]
   1afc8:	4b15      	ldr	r3, [pc, #84]	; (1b020 <pvPortMalloc+0xb0>)
   1afca:	681b      	ldr	r3, [r3, #0]
   1afcc:	18d3      	adds	r3, r2, r3
   1afce:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
   1afd0:	4b13      	ldr	r3, [pc, #76]	; (1b020 <pvPortMalloc+0xb0>)
   1afd2:	681a      	ldr	r2, [r3, #0]
   1afd4:	687b      	ldr	r3, [r7, #4]
   1afd6:	18d2      	adds	r2, r2, r3
   1afd8:	4b11      	ldr	r3, [pc, #68]	; (1b020 <pvPortMalloc+0xb0>)
   1afda:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
   1afdc:	68fb      	ldr	r3, [r7, #12]
   1afde:	2b00      	cmp	r3, #0
   1afe0:	d006      	beq.n	1aff0 <pvPortMalloc+0x80>
   1afe2:	68fb      	ldr	r3, [r7, #12]
   1afe4:	687a      	ldr	r2, [r7, #4]
   1afe6:	0019      	movs	r1, r3
   1afe8:	2094      	movs	r0, #148	; 0x94
   1afea:	4b0f      	ldr	r3, [pc, #60]	; (1b028 <pvPortMalloc+0xb8>)
   1afec:	4798      	blx	r3
   1afee:	e005      	b.n	1affc <pvPortMalloc+0x8c>
   1aff0:	68fb      	ldr	r3, [r7, #12]
   1aff2:	687a      	ldr	r2, [r7, #4]
   1aff4:	0019      	movs	r1, r3
   1aff6:	20e8      	movs	r0, #232	; 0xe8
   1aff8:	4b0b      	ldr	r3, [pc, #44]	; (1b028 <pvPortMalloc+0xb8>)
   1affa:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
   1affc:	4b0b      	ldr	r3, [pc, #44]	; (1b02c <pvPortMalloc+0xbc>)
   1affe:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   1b000:	68fb      	ldr	r3, [r7, #12]
   1b002:	2b00      	cmp	r3, #0
   1b004:	d101      	bne.n	1b00a <pvPortMalloc+0x9a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   1b006:	4b0a      	ldr	r3, [pc, #40]	; (1b030 <pvPortMalloc+0xc0>)
   1b008:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
   1b00a:	68fb      	ldr	r3, [r7, #12]
}
   1b00c:	0018      	movs	r0, r3
   1b00e:	46bd      	mov	sp, r7
   1b010:	b004      	add	sp, #16
   1b012:	bd80      	pop	{r7, pc}
   1b014:	0001d0f1 	.word	0x0001d0f1
   1b018:	200040d8 	.word	0x200040d8
   1b01c:	20000e14 	.word	0x20000e14
   1b020:	200040d4 	.word	0x200040d4
   1b024:	000032bf 	.word	0x000032bf
   1b028:	000196d9 	.word	0x000196d9
   1b02c:	0001d109 	.word	0x0001d109
   1b030:	000335e5 	.word	0x000335e5

0001b034 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   1b034:	b580      	push	{r7, lr}
   1b036:	b082      	sub	sp, #8
   1b038:	af00      	add	r7, sp, #0
   1b03a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   1b03c:	687b      	ldr	r3, [r7, #4]
   1b03e:	2b00      	cmp	r3, #0
   1b040:	d001      	beq.n	1b046 <vPortFree+0x12>
   1b042:	b672      	cpsid	i
   1b044:	e7fe      	b.n	1b044 <vPortFree+0x10>
}
   1b046:	46c0      	nop			; (mov r8, r8)
   1b048:	46bd      	mov	sp, r7
   1b04a:	b002      	add	sp, #8
   1b04c:	bd80      	pop	{r7, pc}
	...

0001b050 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   1b050:	b580      	push	{r7, lr}
   1b052:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
   1b054:	4b03      	ldr	r3, [pc, #12]	; (1b064 <xPortGetFreeHeapSize+0x14>)
   1b056:	681b      	ldr	r3, [r3, #0]
   1b058:	22cb      	movs	r2, #203	; 0xcb
   1b05a:	0192      	lsls	r2, r2, #6
   1b05c:	1ad3      	subs	r3, r2, r3
}
   1b05e:	0018      	movs	r0, r3
   1b060:	46bd      	mov	sp, r7
   1b062:	bd80      	pop	{r7, pc}
   1b064:	200040d4 	.word	0x200040d4

0001b068 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   1b068:	b580      	push	{r7, lr}
   1b06a:	b084      	sub	sp, #16
   1b06c:	af00      	add	r7, sp, #0
   1b06e:	6078      	str	r0, [r7, #4]
   1b070:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b072:	687b      	ldr	r3, [r7, #4]
   1b074:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   1b076:	68fb      	ldr	r3, [r7, #12]
   1b078:	2b00      	cmp	r3, #0
   1b07a:	d101      	bne.n	1b080 <xQueueGenericReset+0x18>
   1b07c:	b672      	cpsid	i
   1b07e:	e7fe      	b.n	1b07e <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
   1b080:	4b23      	ldr	r3, [pc, #140]	; (1b110 <xQueueGenericReset+0xa8>)
   1b082:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   1b084:	68fb      	ldr	r3, [r7, #12]
   1b086:	681a      	ldr	r2, [r3, #0]
   1b088:	68fb      	ldr	r3, [r7, #12]
   1b08a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   1b08c:	68fb      	ldr	r3, [r7, #12]
   1b08e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b090:	434b      	muls	r3, r1
   1b092:	18d2      	adds	r2, r2, r3
   1b094:	68fb      	ldr	r3, [r7, #12]
   1b096:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   1b098:	68fb      	ldr	r3, [r7, #12]
   1b09a:	2200      	movs	r2, #0
   1b09c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1b09e:	68fb      	ldr	r3, [r7, #12]
   1b0a0:	681a      	ldr	r2, [r3, #0]
   1b0a2:	68fb      	ldr	r3, [r7, #12]
   1b0a4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   1b0a6:	68fb      	ldr	r3, [r7, #12]
   1b0a8:	681a      	ldr	r2, [r3, #0]
   1b0aa:	68fb      	ldr	r3, [r7, #12]
   1b0ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b0ae:	1e59      	subs	r1, r3, #1
   1b0b0:	68fb      	ldr	r3, [r7, #12]
   1b0b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b0b4:	434b      	muls	r3, r1
   1b0b6:	18d2      	adds	r2, r2, r3
   1b0b8:	68fb      	ldr	r3, [r7, #12]
   1b0ba:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   1b0bc:	68fb      	ldr	r3, [r7, #12]
   1b0be:	2244      	movs	r2, #68	; 0x44
   1b0c0:	21ff      	movs	r1, #255	; 0xff
   1b0c2:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   1b0c4:	68fb      	ldr	r3, [r7, #12]
   1b0c6:	2245      	movs	r2, #69	; 0x45
   1b0c8:	21ff      	movs	r1, #255	; 0xff
   1b0ca:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
   1b0cc:	683b      	ldr	r3, [r7, #0]
   1b0ce:	2b00      	cmp	r3, #0
   1b0d0:	d10d      	bne.n	1b0ee <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1b0d2:	68fb      	ldr	r3, [r7, #12]
   1b0d4:	691b      	ldr	r3, [r3, #16]
   1b0d6:	2b00      	cmp	r3, #0
   1b0d8:	d013      	beq.n	1b102 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1b0da:	68fb      	ldr	r3, [r7, #12]
   1b0dc:	3310      	adds	r3, #16
   1b0de:	0018      	movs	r0, r3
   1b0e0:	4b0c      	ldr	r3, [pc, #48]	; (1b114 <xQueueGenericReset+0xac>)
   1b0e2:	4798      	blx	r3
   1b0e4:	1e03      	subs	r3, r0, #0
   1b0e6:	d00c      	beq.n	1b102 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
   1b0e8:	4b0b      	ldr	r3, [pc, #44]	; (1b118 <xQueueGenericReset+0xb0>)
   1b0ea:	4798      	blx	r3
   1b0ec:	e009      	b.n	1b102 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1b0ee:	68fb      	ldr	r3, [r7, #12]
   1b0f0:	3310      	adds	r3, #16
   1b0f2:	0018      	movs	r0, r3
   1b0f4:	4b09      	ldr	r3, [pc, #36]	; (1b11c <xQueueGenericReset+0xb4>)
   1b0f6:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   1b0f8:	68fb      	ldr	r3, [r7, #12]
   1b0fa:	3324      	adds	r3, #36	; 0x24
   1b0fc:	0018      	movs	r0, r3
   1b0fe:	4b07      	ldr	r3, [pc, #28]	; (1b11c <xQueueGenericReset+0xb4>)
   1b100:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   1b102:	4b07      	ldr	r3, [pc, #28]	; (1b120 <xQueueGenericReset+0xb8>)
   1b104:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   1b106:	2301      	movs	r3, #1
}
   1b108:	0018      	movs	r0, r3
   1b10a:	46bd      	mov	sp, r7
   1b10c:	b004      	add	sp, #16
   1b10e:	bd80      	pop	{r7, pc}
   1b110:	0001ae39 	.word	0x0001ae39
   1b114:	0001d6c9 	.word	0x0001d6c9
   1b118:	0001ae21 	.word	0x0001ae21
   1b11c:	0001aba9 	.word	0x0001aba9
   1b120:	0001ae5d 	.word	0x0001ae5d

0001b124 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   1b124:	b590      	push	{r4, r7, lr}
   1b126:	b08b      	sub	sp, #44	; 0x2c
   1b128:	af02      	add	r7, sp, #8
   1b12a:	60f8      	str	r0, [r7, #12]
   1b12c:	60b9      	str	r1, [r7, #8]
   1b12e:	1dfb      	adds	r3, r7, #7
   1b130:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   1b132:	68fb      	ldr	r3, [r7, #12]
   1b134:	2b00      	cmp	r3, #0
   1b136:	d101      	bne.n	1b13c <xQueueGenericCreate+0x18>
   1b138:	b672      	cpsid	i
   1b13a:	e7fe      	b.n	1b13a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
   1b13c:	68bb      	ldr	r3, [r7, #8]
   1b13e:	2b00      	cmp	r3, #0
   1b140:	d102      	bne.n	1b148 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   1b142:	2300      	movs	r3, #0
   1b144:	61fb      	str	r3, [r7, #28]
   1b146:	e003      	b.n	1b150 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1b148:	68fb      	ldr	r3, [r7, #12]
   1b14a:	68ba      	ldr	r2, [r7, #8]
   1b14c:	4353      	muls	r3, r2
   1b14e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   1b150:	69fb      	ldr	r3, [r7, #28]
   1b152:	3354      	adds	r3, #84	; 0x54
   1b154:	0018      	movs	r0, r3
   1b156:	4b19      	ldr	r3, [pc, #100]	; (1b1bc <xQueueGenericCreate+0x98>)
   1b158:	4798      	blx	r3
   1b15a:	0003      	movs	r3, r0
   1b15c:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
   1b15e:	69bb      	ldr	r3, [r7, #24]
   1b160:	2b00      	cmp	r3, #0
   1b162:	d00d      	beq.n	1b180 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   1b164:	69bb      	ldr	r3, [r7, #24]
   1b166:	3354      	adds	r3, #84	; 0x54
   1b168:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   1b16a:	1dfb      	adds	r3, r7, #7
   1b16c:	781c      	ldrb	r4, [r3, #0]
   1b16e:	697a      	ldr	r2, [r7, #20]
   1b170:	68b9      	ldr	r1, [r7, #8]
   1b172:	68f8      	ldr	r0, [r7, #12]
   1b174:	69bb      	ldr	r3, [r7, #24]
   1b176:	9300      	str	r3, [sp, #0]
   1b178:	0023      	movs	r3, r4
   1b17a:	4c11      	ldr	r4, [pc, #68]	; (1b1c0 <xQueueGenericCreate+0x9c>)
   1b17c:	47a0      	blx	r4
   1b17e:	e017      	b.n	1b1b0 <xQueueGenericCreate+0x8c>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
   1b180:	4b10      	ldr	r3, [pc, #64]	; (1b1c4 <xQueueGenericCreate+0xa0>)
   1b182:	4798      	blx	r3
   1b184:	0003      	movs	r3, r0
   1b186:	0018      	movs	r0, r3
   1b188:	4b0f      	ldr	r3, [pc, #60]	; (1b1c8 <xQueueGenericCreate+0xa4>)
   1b18a:	4798      	blx	r3
   1b18c:	0003      	movs	r3, r0
   1b18e:	001a      	movs	r2, r3
   1b190:	4b0e      	ldr	r3, [pc, #56]	; (1b1cc <xQueueGenericCreate+0xa8>)
   1b192:	881b      	ldrh	r3, [r3, #0]
   1b194:	4013      	ands	r3, r2
   1b196:	b29b      	uxth	r3, r3
   1b198:	2b00      	cmp	r3, #0
   1b19a:	d009      	beq.n	1b1b0 <xQueueGenericCreate+0x8c>
   1b19c:	1dfb      	adds	r3, r7, #7
   1b19e:	781b      	ldrb	r3, [r3, #0]
   1b1a0:	4a0b      	ldr	r2, [pc, #44]	; (1b1d0 <xQueueGenericCreate+0xac>)
   1b1a2:	5cd3      	ldrb	r3, [r2, r3]
   1b1a4:	3340      	adds	r3, #64	; 0x40
   1b1a6:	b2db      	uxtb	r3, r3
   1b1a8:	2100      	movs	r1, #0
   1b1aa:	0018      	movs	r0, r3
   1b1ac:	4b09      	ldr	r3, [pc, #36]	; (1b1d4 <xQueueGenericCreate+0xb0>)
   1b1ae:	4798      	blx	r3
		}

		return pxNewQueue;
   1b1b0:	69bb      	ldr	r3, [r7, #24]
	}
   1b1b2:	0018      	movs	r0, r3
   1b1b4:	46bd      	mov	sp, r7
   1b1b6:	b009      	add	sp, #36	; 0x24
   1b1b8:	bd90      	pop	{r4, r7, pc}
   1b1ba:	46c0      	nop			; (mov r8, r8)
   1b1bc:	0001af71 	.word	0x0001af71
   1b1c0:	0001b1d9 	.word	0x0001b1d9
   1b1c4:	000190cd 	.word	0x000190cd
   1b1c8:	00018e31 	.word	0x00018e31
   1b1cc:	20000110 	.word	0x20000110
   1b1d0:	20000104 	.word	0x20000104
   1b1d4:	00019b31 	.word	0x00019b31

0001b1d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   1b1d8:	b5b0      	push	{r4, r5, r7, lr}
   1b1da:	b084      	sub	sp, #16
   1b1dc:	af00      	add	r7, sp, #0
   1b1de:	60f8      	str	r0, [r7, #12]
   1b1e0:	60b9      	str	r1, [r7, #8]
   1b1e2:	607a      	str	r2, [r7, #4]
   1b1e4:	001a      	movs	r2, r3
   1b1e6:	1cfb      	adds	r3, r7, #3
   1b1e8:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   1b1ea:	68bb      	ldr	r3, [r7, #8]
   1b1ec:	2b00      	cmp	r3, #0
   1b1ee:	d103      	bne.n	1b1f8 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   1b1f0:	6a3b      	ldr	r3, [r7, #32]
   1b1f2:	6a3a      	ldr	r2, [r7, #32]
   1b1f4:	601a      	str	r2, [r3, #0]
   1b1f6:	e002      	b.n	1b1fe <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   1b1f8:	6a3b      	ldr	r3, [r7, #32]
   1b1fa:	687a      	ldr	r2, [r7, #4]
   1b1fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   1b1fe:	6a3b      	ldr	r3, [r7, #32]
   1b200:	68fa      	ldr	r2, [r7, #12]
   1b202:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   1b204:	6a3b      	ldr	r3, [r7, #32]
   1b206:	68ba      	ldr	r2, [r7, #8]
   1b208:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   1b20a:	6a3b      	ldr	r3, [r7, #32]
   1b20c:	2101      	movs	r1, #1
   1b20e:	0018      	movs	r0, r3
   1b210:	4b41      	ldr	r3, [pc, #260]	; (1b318 <prvInitialiseNewQueue+0x140>)
   1b212:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
   1b214:	6a3b      	ldr	r3, [r7, #32]
   1b216:	1cfa      	adds	r2, r7, #3
   1b218:	2150      	movs	r1, #80	; 0x50
   1b21a:	7812      	ldrb	r2, [r2, #0]
   1b21c:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
   1b21e:	6a3b      	ldr	r3, [r7, #32]
   1b220:	2200      	movs	r2, #0
   1b222:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
   1b224:	6a3b      	ldr	r3, [r7, #32]
   1b226:	0018      	movs	r0, r3
   1b228:	4b3c      	ldr	r3, [pc, #240]	; (1b31c <prvInitialiseNewQueue+0x144>)
   1b22a:	4798      	blx	r3
   1b22c:	0003      	movs	r3, r0
   1b22e:	001a      	movs	r2, r3
   1b230:	4b3b      	ldr	r3, [pc, #236]	; (1b320 <prvInitialiseNewQueue+0x148>)
   1b232:	5c9b      	ldrb	r3, [r3, r2]
   1b234:	0018      	movs	r0, r3
   1b236:	4b3b      	ldr	r3, [pc, #236]	; (1b324 <prvInitialiseNewQueue+0x14c>)
   1b238:	4798      	blx	r3
   1b23a:	0003      	movs	r3, r0
   1b23c:	b29a      	uxth	r2, r3
   1b23e:	6a3b      	ldr	r3, [r7, #32]
   1b240:	0011      	movs	r1, r2
   1b242:	0018      	movs	r0, r3
   1b244:	4b38      	ldr	r3, [pc, #224]	; (1b328 <prvInitialiseNewQueue+0x150>)
   1b246:	4798      	blx	r3
   1b248:	4b38      	ldr	r3, [pc, #224]	; (1b32c <prvInitialiseNewQueue+0x154>)
   1b24a:	881a      	ldrh	r2, [r3, #0]
   1b24c:	6a3b      	ldr	r3, [r7, #32]
   1b24e:	0011      	movs	r1, r2
   1b250:	0018      	movs	r0, r3
   1b252:	4b37      	ldr	r3, [pc, #220]	; (1b330 <prvInitialiseNewQueue+0x158>)
   1b254:	4798      	blx	r3
   1b256:	6a3b      	ldr	r3, [r7, #32]
   1b258:	0018      	movs	r0, r3
   1b25a:	4b30      	ldr	r3, [pc, #192]	; (1b31c <prvInitialiseNewQueue+0x144>)
   1b25c:	4798      	blx	r3
   1b25e:	0003      	movs	r3, r0
   1b260:	001a      	movs	r2, r3
   1b262:	4b2f      	ldr	r3, [pc, #188]	; (1b320 <prvInitialiseNewQueue+0x148>)
   1b264:	5c9c      	ldrb	r4, [r3, r2]
   1b266:	6a3b      	ldr	r3, [r7, #32]
   1b268:	0018      	movs	r0, r3
   1b26a:	4b32      	ldr	r3, [pc, #200]	; (1b334 <prvInitialiseNewQueue+0x15c>)
   1b26c:	4798      	blx	r3
   1b26e:	0003      	movs	r3, r0
   1b270:	b2db      	uxtb	r3, r3
   1b272:	0019      	movs	r1, r3
   1b274:	0020      	movs	r0, r4
   1b276:	4b30      	ldr	r3, [pc, #192]	; (1b338 <prvInitialiseNewQueue+0x160>)
   1b278:	4798      	blx	r3
   1b27a:	4b30      	ldr	r3, [pc, #192]	; (1b33c <prvInitialiseNewQueue+0x164>)
   1b27c:	4798      	blx	r3
   1b27e:	0003      	movs	r3, r0
   1b280:	0018      	movs	r0, r3
   1b282:	4b2f      	ldr	r3, [pc, #188]	; (1b340 <prvInitialiseNewQueue+0x168>)
   1b284:	4798      	blx	r3
   1b286:	0003      	movs	r3, r0
   1b288:	001a      	movs	r2, r3
   1b28a:	4b2e      	ldr	r3, [pc, #184]	; (1b344 <prvInitialiseNewQueue+0x16c>)
   1b28c:	881b      	ldrh	r3, [r3, #0]
   1b28e:	4013      	ands	r3, r2
   1b290:	b29b      	uxth	r3, r3
   1b292:	2b00      	cmp	r3, #0
   1b294:	d029      	beq.n	1b2ea <prvInitialiseNewQueue+0x112>
   1b296:	6a3b      	ldr	r3, [r7, #32]
   1b298:	0018      	movs	r0, r3
   1b29a:	4b2b      	ldr	r3, [pc, #172]	; (1b348 <prvInitialiseNewQueue+0x170>)
   1b29c:	4798      	blx	r3
   1b29e:	0003      	movs	r3, r0
   1b2a0:	001a      	movs	r2, r3
   1b2a2:	4b28      	ldr	r3, [pc, #160]	; (1b344 <prvInitialiseNewQueue+0x16c>)
   1b2a4:	881b      	ldrh	r3, [r3, #0]
   1b2a6:	4013      	ands	r3, r2
   1b2a8:	b29b      	uxth	r3, r3
   1b2aa:	2b00      	cmp	r3, #0
   1b2ac:	d01d      	beq.n	1b2ea <prvInitialiseNewQueue+0x112>
   1b2ae:	6a3b      	ldr	r3, [r7, #32]
   1b2b0:	0018      	movs	r0, r3
   1b2b2:	4b1a      	ldr	r3, [pc, #104]	; (1b31c <prvInitialiseNewQueue+0x144>)
   1b2b4:	4798      	blx	r3
   1b2b6:	0003      	movs	r3, r0
   1b2b8:	001a      	movs	r2, r3
   1b2ba:	4b19      	ldr	r3, [pc, #100]	; (1b320 <prvInitialiseNewQueue+0x148>)
   1b2bc:	5c9b      	ldrb	r3, [r3, r2]
   1b2be:	3318      	adds	r3, #24
   1b2c0:	b2db      	uxtb	r3, r3
   1b2c2:	001d      	movs	r5, r3
   1b2c4:	6a3b      	ldr	r3, [r7, #32]
   1b2c6:	0018      	movs	r0, r3
   1b2c8:	4b14      	ldr	r3, [pc, #80]	; (1b31c <prvInitialiseNewQueue+0x144>)
   1b2ca:	4798      	blx	r3
   1b2cc:	0003      	movs	r3, r0
   1b2ce:	001a      	movs	r2, r3
   1b2d0:	4b13      	ldr	r3, [pc, #76]	; (1b320 <prvInitialiseNewQueue+0x148>)
   1b2d2:	5c9c      	ldrb	r4, [r3, r2]
   1b2d4:	6a3b      	ldr	r3, [r7, #32]
   1b2d6:	0018      	movs	r0, r3
   1b2d8:	4b16      	ldr	r3, [pc, #88]	; (1b334 <prvInitialiseNewQueue+0x15c>)
   1b2da:	4798      	blx	r3
   1b2dc:	0003      	movs	r3, r0
   1b2de:	b2db      	uxtb	r3, r3
   1b2e0:	001a      	movs	r2, r3
   1b2e2:	0021      	movs	r1, r4
   1b2e4:	0028      	movs	r0, r5
   1b2e6:	4b19      	ldr	r3, [pc, #100]	; (1b34c <prvInitialiseNewQueue+0x174>)
   1b2e8:	4798      	blx	r3
   1b2ea:	6a3b      	ldr	r3, [r7, #32]
   1b2ec:	0018      	movs	r0, r3
   1b2ee:	4b0b      	ldr	r3, [pc, #44]	; (1b31c <prvInitialiseNewQueue+0x144>)
   1b2f0:	4798      	blx	r3
   1b2f2:	0003      	movs	r3, r0
   1b2f4:	001a      	movs	r2, r3
   1b2f6:	4b0a      	ldr	r3, [pc, #40]	; (1b320 <prvInitialiseNewQueue+0x148>)
   1b2f8:	5c9c      	ldrb	r4, [r3, r2]
   1b2fa:	6a3b      	ldr	r3, [r7, #32]
   1b2fc:	0018      	movs	r0, r3
   1b2fe:	4b0d      	ldr	r3, [pc, #52]	; (1b334 <prvInitialiseNewQueue+0x15c>)
   1b300:	4798      	blx	r3
   1b302:	0003      	movs	r3, r0
   1b304:	b2db      	uxtb	r3, r3
   1b306:	2200      	movs	r2, #0
   1b308:	0019      	movs	r1, r3
   1b30a:	0020      	movs	r0, r4
   1b30c:	4b10      	ldr	r3, [pc, #64]	; (1b350 <prvInitialiseNewQueue+0x178>)
   1b30e:	4798      	blx	r3
}
   1b310:	46c0      	nop			; (mov r8, r8)
   1b312:	46bd      	mov	sp, r7
   1b314:	b004      	add	sp, #16
   1b316:	bdb0      	pop	{r4, r5, r7, pc}
   1b318:	0001b069 	.word	0x0001b069
   1b31c:	00018df1 	.word	0x00018df1
   1b320:	20000104 	.word	0x20000104
   1b324:	0001a3b1 	.word	0x0001a3b1
   1b328:	00018f15 	.word	0x00018f15
   1b32c:	20000112 	.word	0x20000112
   1b330:	00018f51 	.word	0x00018f51
   1b334:	00018ed1 	.word	0x00018ed1
   1b338:	0001a549 	.word	0x0001a549
   1b33c:	000190cd 	.word	0x000190cd
   1b340:	00018e31 	.word	0x00018e31
   1b344:	20000110 	.word	0x20000110
   1b348:	00018ef1 	.word	0x00018ef1
   1b34c:	00019829 	.word	0x00019829
   1b350:	00019e85 	.word	0x00019e85

0001b354 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
   1b354:	b590      	push	{r4, r7, lr}
   1b356:	b083      	sub	sp, #12
   1b358:	af00      	add	r7, sp, #0
   1b35a:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
   1b35c:	687b      	ldr	r3, [r7, #4]
   1b35e:	2b00      	cmp	r3, #0
   1b360:	d00e      	beq.n	1b380 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
   1b362:	687b      	ldr	r3, [r7, #4]
   1b364:	2200      	movs	r2, #0
   1b366:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   1b368:	687b      	ldr	r3, [r7, #4]
   1b36a:	2200      	movs	r2, #0
   1b36c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
   1b36e:	687b      	ldr	r3, [r7, #4]
   1b370:	2200      	movs	r2, #0
   1b372:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
   1b374:	6878      	ldr	r0, [r7, #4]
   1b376:	2300      	movs	r3, #0
   1b378:	2200      	movs	r2, #0
   1b37a:	2100      	movs	r1, #0
   1b37c:	4c02      	ldr	r4, [pc, #8]	; (1b388 <prvInitialiseMutex+0x34>)
   1b37e:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
   1b380:	46c0      	nop			; (mov r8, r8)
   1b382:	46bd      	mov	sp, r7
   1b384:	b003      	add	sp, #12
   1b386:	bd90      	pop	{r4, r7, pc}
   1b388:	0001b3cd 	.word	0x0001b3cd

0001b38c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
   1b38c:	b580      	push	{r7, lr}
   1b38e:	b086      	sub	sp, #24
   1b390:	af00      	add	r7, sp, #0
   1b392:	0002      	movs	r2, r0
   1b394:	1dfb      	adds	r3, r7, #7
   1b396:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
   1b398:	2301      	movs	r3, #1
   1b39a:	617b      	str	r3, [r7, #20]
   1b39c:	2300      	movs	r3, #0
   1b39e:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
   1b3a0:	1dfb      	adds	r3, r7, #7
   1b3a2:	781a      	ldrb	r2, [r3, #0]
   1b3a4:	6939      	ldr	r1, [r7, #16]
   1b3a6:	697b      	ldr	r3, [r7, #20]
   1b3a8:	0018      	movs	r0, r3
   1b3aa:	4b06      	ldr	r3, [pc, #24]	; (1b3c4 <xQueueCreateMutex+0x38>)
   1b3ac:	4798      	blx	r3
   1b3ae:	0003      	movs	r3, r0
   1b3b0:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
   1b3b2:	68fb      	ldr	r3, [r7, #12]
   1b3b4:	0018      	movs	r0, r3
   1b3b6:	4b04      	ldr	r3, [pc, #16]	; (1b3c8 <xQueueCreateMutex+0x3c>)
   1b3b8:	4798      	blx	r3

		return pxNewQueue;
   1b3ba:	68fb      	ldr	r3, [r7, #12]
	}
   1b3bc:	0018      	movs	r0, r3
   1b3be:	46bd      	mov	sp, r7
   1b3c0:	b006      	add	sp, #24
   1b3c2:	bd80      	pop	{r7, pc}
   1b3c4:	0001b125 	.word	0x0001b125
   1b3c8:	0001b355 	.word	0x0001b355

0001b3cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   1b3cc:	b5b0      	push	{r4, r5, r7, lr}
   1b3ce:	b08a      	sub	sp, #40	; 0x28
   1b3d0:	af00      	add	r7, sp, #0
   1b3d2:	60f8      	str	r0, [r7, #12]
   1b3d4:	60b9      	str	r1, [r7, #8]
   1b3d6:	607a      	str	r2, [r7, #4]
   1b3d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   1b3da:	2300      	movs	r3, #0
   1b3dc:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b3de:	68fb      	ldr	r3, [r7, #12]
   1b3e0:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   1b3e2:	6a3b      	ldr	r3, [r7, #32]
   1b3e4:	2b00      	cmp	r3, #0
   1b3e6:	d101      	bne.n	1b3ec <xQueueGenericSend+0x20>
   1b3e8:	b672      	cpsid	i
   1b3ea:	e7fe      	b.n	1b3ea <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1b3ec:	68bb      	ldr	r3, [r7, #8]
   1b3ee:	2b00      	cmp	r3, #0
   1b3f0:	d103      	bne.n	1b3fa <xQueueGenericSend+0x2e>
   1b3f2:	6a3b      	ldr	r3, [r7, #32]
   1b3f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b3f6:	2b00      	cmp	r3, #0
   1b3f8:	d101      	bne.n	1b3fe <xQueueGenericSend+0x32>
   1b3fa:	2301      	movs	r3, #1
   1b3fc:	e000      	b.n	1b400 <xQueueGenericSend+0x34>
   1b3fe:	2300      	movs	r3, #0
   1b400:	2b00      	cmp	r3, #0
   1b402:	d101      	bne.n	1b408 <xQueueGenericSend+0x3c>
   1b404:	b672      	cpsid	i
   1b406:	e7fe      	b.n	1b406 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1b408:	683b      	ldr	r3, [r7, #0]
   1b40a:	2b02      	cmp	r3, #2
   1b40c:	d103      	bne.n	1b416 <xQueueGenericSend+0x4a>
   1b40e:	6a3b      	ldr	r3, [r7, #32]
   1b410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b412:	2b01      	cmp	r3, #1
   1b414:	d101      	bne.n	1b41a <xQueueGenericSend+0x4e>
   1b416:	2301      	movs	r3, #1
   1b418:	e000      	b.n	1b41c <xQueueGenericSend+0x50>
   1b41a:	2300      	movs	r3, #0
   1b41c:	2b00      	cmp	r3, #0
   1b41e:	d101      	bne.n	1b424 <xQueueGenericSend+0x58>
   1b420:	b672      	cpsid	i
   1b422:	e7fe      	b.n	1b422 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1b424:	4bbc      	ldr	r3, [pc, #752]	; (1b718 <xQueueGenericSend+0x34c>)
   1b426:	4798      	blx	r3
   1b428:	1e03      	subs	r3, r0, #0
   1b42a:	d102      	bne.n	1b432 <xQueueGenericSend+0x66>
   1b42c:	687b      	ldr	r3, [r7, #4]
   1b42e:	2b00      	cmp	r3, #0
   1b430:	d101      	bne.n	1b436 <xQueueGenericSend+0x6a>
   1b432:	2301      	movs	r3, #1
   1b434:	e000      	b.n	1b438 <xQueueGenericSend+0x6c>
   1b436:	2300      	movs	r3, #0
   1b438:	2b00      	cmp	r3, #0
   1b43a:	d101      	bne.n	1b440 <xQueueGenericSend+0x74>
   1b43c:	b672      	cpsid	i
   1b43e:	e7fe      	b.n	1b43e <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   1b440:	4bb6      	ldr	r3, [pc, #728]	; (1b71c <xQueueGenericSend+0x350>)
   1b442:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1b444:	6a3b      	ldr	r3, [r7, #32]
   1b446:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1b448:	6a3b      	ldr	r3, [r7, #32]
   1b44a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b44c:	429a      	cmp	r2, r3
   1b44e:	d303      	bcc.n	1b458 <xQueueGenericSend+0x8c>
   1b450:	683b      	ldr	r3, [r7, #0]
   1b452:	2b02      	cmp	r3, #2
   1b454:	d000      	beq.n	1b458 <xQueueGenericSend+0x8c>
   1b456:	e08e      	b.n	1b576 <xQueueGenericSend+0x1aa>
			{
				traceQUEUE_SEND( pxQueue );
   1b458:	4bb1      	ldr	r3, [pc, #708]	; (1b720 <xQueueGenericSend+0x354>)
   1b45a:	4798      	blx	r3
   1b45c:	0003      	movs	r3, r0
   1b45e:	0018      	movs	r0, r3
   1b460:	4bb0      	ldr	r3, [pc, #704]	; (1b724 <xQueueGenericSend+0x358>)
   1b462:	4798      	blx	r3
   1b464:	0003      	movs	r3, r0
   1b466:	001a      	movs	r2, r3
   1b468:	4baf      	ldr	r3, [pc, #700]	; (1b728 <xQueueGenericSend+0x35c>)
   1b46a:	881b      	ldrh	r3, [r3, #0]
   1b46c:	4013      	ands	r3, r2
   1b46e:	b29b      	uxth	r3, r3
   1b470:	2b00      	cmp	r3, #0
   1b472:	d02e      	beq.n	1b4d2 <xQueueGenericSend+0x106>
   1b474:	6a3b      	ldr	r3, [r7, #32]
   1b476:	0018      	movs	r0, r3
   1b478:	4bac      	ldr	r3, [pc, #688]	; (1b72c <xQueueGenericSend+0x360>)
   1b47a:	4798      	blx	r3
   1b47c:	0003      	movs	r3, r0
   1b47e:	001a      	movs	r2, r3
   1b480:	4ba9      	ldr	r3, [pc, #676]	; (1b728 <xQueueGenericSend+0x35c>)
   1b482:	881b      	ldrh	r3, [r3, #0]
   1b484:	4013      	ands	r3, r2
   1b486:	b29b      	uxth	r3, r3
   1b488:	2b00      	cmp	r3, #0
   1b48a:	d022      	beq.n	1b4d2 <xQueueGenericSend+0x106>
   1b48c:	683b      	ldr	r3, [r7, #0]
   1b48e:	2b00      	cmp	r3, #0
   1b490:	d10b      	bne.n	1b4aa <xQueueGenericSend+0xde>
   1b492:	6a3b      	ldr	r3, [r7, #32]
   1b494:	0018      	movs	r0, r3
   1b496:	4ba6      	ldr	r3, [pc, #664]	; (1b730 <xQueueGenericSend+0x364>)
   1b498:	4798      	blx	r3
   1b49a:	0003      	movs	r3, r0
   1b49c:	001a      	movs	r2, r3
   1b49e:	4ba5      	ldr	r3, [pc, #660]	; (1b734 <xQueueGenericSend+0x368>)
   1b4a0:	5c9b      	ldrb	r3, [r3, r2]
   1b4a2:	3320      	adds	r3, #32
   1b4a4:	b2db      	uxtb	r3, r3
   1b4a6:	001d      	movs	r5, r3
   1b4a8:	e000      	b.n	1b4ac <xQueueGenericSend+0xe0>
   1b4aa:	2525      	movs	r5, #37	; 0x25
   1b4ac:	6a3b      	ldr	r3, [r7, #32]
   1b4ae:	0018      	movs	r0, r3
   1b4b0:	4b9f      	ldr	r3, [pc, #636]	; (1b730 <xQueueGenericSend+0x364>)
   1b4b2:	4798      	blx	r3
   1b4b4:	0003      	movs	r3, r0
   1b4b6:	001a      	movs	r2, r3
   1b4b8:	4b9e      	ldr	r3, [pc, #632]	; (1b734 <xQueueGenericSend+0x368>)
   1b4ba:	5c9c      	ldrb	r4, [r3, r2]
   1b4bc:	6a3b      	ldr	r3, [r7, #32]
   1b4be:	0018      	movs	r0, r3
   1b4c0:	4b9d      	ldr	r3, [pc, #628]	; (1b738 <xQueueGenericSend+0x36c>)
   1b4c2:	4798      	blx	r3
   1b4c4:	0003      	movs	r3, r0
   1b4c6:	b2db      	uxtb	r3, r3
   1b4c8:	001a      	movs	r2, r3
   1b4ca:	0021      	movs	r1, r4
   1b4cc:	0028      	movs	r0, r5
   1b4ce:	4b9b      	ldr	r3, [pc, #620]	; (1b73c <xQueueGenericSend+0x370>)
   1b4d0:	4798      	blx	r3
   1b4d2:	6a3b      	ldr	r3, [r7, #32]
   1b4d4:	0018      	movs	r0, r3
   1b4d6:	4b96      	ldr	r3, [pc, #600]	; (1b730 <xQueueGenericSend+0x364>)
   1b4d8:	4798      	blx	r3
   1b4da:	0003      	movs	r3, r0
   1b4dc:	001a      	movs	r2, r3
   1b4de:	4b95      	ldr	r3, [pc, #596]	; (1b734 <xQueueGenericSend+0x368>)
   1b4e0:	5c9c      	ldrb	r4, [r3, r2]
   1b4e2:	6a3b      	ldr	r3, [r7, #32]
   1b4e4:	0018      	movs	r0, r3
   1b4e6:	4b94      	ldr	r3, [pc, #592]	; (1b738 <xQueueGenericSend+0x36c>)
   1b4e8:	4798      	blx	r3
   1b4ea:	0003      	movs	r3, r0
   1b4ec:	b2dd      	uxtb	r5, r3
   1b4ee:	6a3b      	ldr	r3, [r7, #32]
   1b4f0:	0018      	movs	r0, r3
   1b4f2:	4b8f      	ldr	r3, [pc, #572]	; (1b730 <xQueueGenericSend+0x364>)
   1b4f4:	4798      	blx	r3
   1b4f6:	0003      	movs	r3, r0
   1b4f8:	001a      	movs	r2, r3
   1b4fa:	4b8e      	ldr	r3, [pc, #568]	; (1b734 <xQueueGenericSend+0x368>)
   1b4fc:	5c9b      	ldrb	r3, [r3, r2]
   1b4fe:	2b02      	cmp	r3, #2
   1b500:	d005      	beq.n	1b50e <xQueueGenericSend+0x142>
   1b502:	6a3b      	ldr	r3, [r7, #32]
   1b504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b506:	b2db      	uxtb	r3, r3
   1b508:	3301      	adds	r3, #1
   1b50a:	b2db      	uxtb	r3, r3
   1b50c:	e000      	b.n	1b510 <xQueueGenericSend+0x144>
   1b50e:	2300      	movs	r3, #0
   1b510:	001a      	movs	r2, r3
   1b512:	0029      	movs	r1, r5
   1b514:	0020      	movs	r0, r4
   1b516:	4b8a      	ldr	r3, [pc, #552]	; (1b740 <xQueueGenericSend+0x374>)
   1b518:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1b51a:	683a      	ldr	r2, [r7, #0]
   1b51c:	68b9      	ldr	r1, [r7, #8]
   1b51e:	6a3b      	ldr	r3, [r7, #32]
   1b520:	0018      	movs	r0, r3
   1b522:	4b88      	ldr	r3, [pc, #544]	; (1b744 <xQueueGenericSend+0x378>)
   1b524:	4798      	blx	r3
   1b526:	0003      	movs	r3, r0
   1b528:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1b52a:	6a3b      	ldr	r3, [r7, #32]
   1b52c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b52e:	2b00      	cmp	r3, #0
   1b530:	d00a      	beq.n	1b548 <xQueueGenericSend+0x17c>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1b532:	683a      	ldr	r2, [r7, #0]
   1b534:	6a3b      	ldr	r3, [r7, #32]
   1b536:	0011      	movs	r1, r2
   1b538:	0018      	movs	r0, r3
   1b53a:	4b83      	ldr	r3, [pc, #524]	; (1b748 <xQueueGenericSend+0x37c>)
   1b53c:	4798      	blx	r3
   1b53e:	1e03      	subs	r3, r0, #0
   1b540:	d015      	beq.n	1b56e <xQueueGenericSend+0x1a2>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
   1b542:	4b82      	ldr	r3, [pc, #520]	; (1b74c <xQueueGenericSend+0x380>)
   1b544:	4798      	blx	r3
   1b546:	e012      	b.n	1b56e <xQueueGenericSend+0x1a2>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1b548:	6a3b      	ldr	r3, [r7, #32]
   1b54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b54c:	2b00      	cmp	r3, #0
   1b54e:	d009      	beq.n	1b564 <xQueueGenericSend+0x198>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1b550:	6a3b      	ldr	r3, [r7, #32]
   1b552:	3324      	adds	r3, #36	; 0x24
   1b554:	0018      	movs	r0, r3
   1b556:	4b7e      	ldr	r3, [pc, #504]	; (1b750 <xQueueGenericSend+0x384>)
   1b558:	4798      	blx	r3
   1b55a:	1e03      	subs	r3, r0, #0
   1b55c:	d007      	beq.n	1b56e <xQueueGenericSend+0x1a2>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
   1b55e:	4b7b      	ldr	r3, [pc, #492]	; (1b74c <xQueueGenericSend+0x380>)
   1b560:	4798      	blx	r3
   1b562:	e004      	b.n	1b56e <xQueueGenericSend+0x1a2>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
   1b564:	69fb      	ldr	r3, [r7, #28]
   1b566:	2b00      	cmp	r3, #0
   1b568:	d001      	beq.n	1b56e <xQueueGenericSend+0x1a2>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
   1b56a:	4b78      	ldr	r3, [pc, #480]	; (1b74c <xQueueGenericSend+0x380>)
   1b56c:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   1b56e:	4b79      	ldr	r3, [pc, #484]	; (1b754 <xQueueGenericSend+0x388>)
   1b570:	4798      	blx	r3
				return pdPASS;
   1b572:	2301      	movs	r3, #1
   1b574:	e142      	b.n	1b7fc <xQueueGenericSend+0x430>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1b576:	687b      	ldr	r3, [r7, #4]
   1b578:	2b00      	cmp	r3, #0
   1b57a:	d140      	bne.n	1b5fe <xQueueGenericSend+0x232>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1b57c:	4b75      	ldr	r3, [pc, #468]	; (1b754 <xQueueGenericSend+0x388>)
   1b57e:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
   1b580:	4b67      	ldr	r3, [pc, #412]	; (1b720 <xQueueGenericSend+0x354>)
   1b582:	4798      	blx	r3
   1b584:	0003      	movs	r3, r0
   1b586:	0018      	movs	r0, r3
   1b588:	4b66      	ldr	r3, [pc, #408]	; (1b724 <xQueueGenericSend+0x358>)
   1b58a:	4798      	blx	r3
   1b58c:	0003      	movs	r3, r0
   1b58e:	001a      	movs	r2, r3
   1b590:	4b65      	ldr	r3, [pc, #404]	; (1b728 <xQueueGenericSend+0x35c>)
   1b592:	881b      	ldrh	r3, [r3, #0]
   1b594:	4013      	ands	r3, r2
   1b596:	b29b      	uxth	r3, r3
   1b598:	2b00      	cmp	r3, #0
   1b59a:	d02e      	beq.n	1b5fa <xQueueGenericSend+0x22e>
   1b59c:	6a3b      	ldr	r3, [r7, #32]
   1b59e:	0018      	movs	r0, r3
   1b5a0:	4b62      	ldr	r3, [pc, #392]	; (1b72c <xQueueGenericSend+0x360>)
   1b5a2:	4798      	blx	r3
   1b5a4:	0003      	movs	r3, r0
   1b5a6:	001a      	movs	r2, r3
   1b5a8:	4b5f      	ldr	r3, [pc, #380]	; (1b728 <xQueueGenericSend+0x35c>)
   1b5aa:	881b      	ldrh	r3, [r3, #0]
   1b5ac:	4013      	ands	r3, r2
   1b5ae:	b29b      	uxth	r3, r3
   1b5b0:	2b00      	cmp	r3, #0
   1b5b2:	d022      	beq.n	1b5fa <xQueueGenericSend+0x22e>
   1b5b4:	683b      	ldr	r3, [r7, #0]
   1b5b6:	2b00      	cmp	r3, #0
   1b5b8:	d10b      	bne.n	1b5d2 <xQueueGenericSend+0x206>
   1b5ba:	6a3b      	ldr	r3, [r7, #32]
   1b5bc:	0018      	movs	r0, r3
   1b5be:	4b5c      	ldr	r3, [pc, #368]	; (1b730 <xQueueGenericSend+0x364>)
   1b5c0:	4798      	blx	r3
   1b5c2:	0003      	movs	r3, r0
   1b5c4:	001a      	movs	r2, r3
   1b5c6:	4b5b      	ldr	r3, [pc, #364]	; (1b734 <xQueueGenericSend+0x368>)
   1b5c8:	5c9b      	ldrb	r3, [r3, r2]
   1b5ca:	3348      	adds	r3, #72	; 0x48
   1b5cc:	b2db      	uxtb	r3, r3
   1b5ce:	001d      	movs	r5, r3
   1b5d0:	e000      	b.n	1b5d4 <xQueueGenericSend+0x208>
   1b5d2:	254d      	movs	r5, #77	; 0x4d
   1b5d4:	6a3b      	ldr	r3, [r7, #32]
   1b5d6:	0018      	movs	r0, r3
   1b5d8:	4b55      	ldr	r3, [pc, #340]	; (1b730 <xQueueGenericSend+0x364>)
   1b5da:	4798      	blx	r3
   1b5dc:	0003      	movs	r3, r0
   1b5de:	001a      	movs	r2, r3
   1b5e0:	4b54      	ldr	r3, [pc, #336]	; (1b734 <xQueueGenericSend+0x368>)
   1b5e2:	5c9c      	ldrb	r4, [r3, r2]
   1b5e4:	6a3b      	ldr	r3, [r7, #32]
   1b5e6:	0018      	movs	r0, r3
   1b5e8:	4b53      	ldr	r3, [pc, #332]	; (1b738 <xQueueGenericSend+0x36c>)
   1b5ea:	4798      	blx	r3
   1b5ec:	0003      	movs	r3, r0
   1b5ee:	b2db      	uxtb	r3, r3
   1b5f0:	001a      	movs	r2, r3
   1b5f2:	0021      	movs	r1, r4
   1b5f4:	0028      	movs	r0, r5
   1b5f6:	4b51      	ldr	r3, [pc, #324]	; (1b73c <xQueueGenericSend+0x370>)
   1b5f8:	4798      	blx	r3
					return errQUEUE_FULL;
   1b5fa:	2300      	movs	r3, #0
   1b5fc:	e0fe      	b.n	1b7fc <xQueueGenericSend+0x430>
				}
				else if( xEntryTimeSet == pdFALSE )
   1b5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b600:	2b00      	cmp	r3, #0
   1b602:	d106      	bne.n	1b612 <xQueueGenericSend+0x246>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1b604:	2314      	movs	r3, #20
   1b606:	18fb      	adds	r3, r7, r3
   1b608:	0018      	movs	r0, r3
   1b60a:	4b53      	ldr	r3, [pc, #332]	; (1b758 <xQueueGenericSend+0x38c>)
   1b60c:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1b60e:	2301      	movs	r3, #1
   1b610:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1b612:	4b50      	ldr	r3, [pc, #320]	; (1b754 <xQueueGenericSend+0x388>)
   1b614:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1b616:	4b51      	ldr	r3, [pc, #324]	; (1b75c <xQueueGenericSend+0x390>)
   1b618:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1b61a:	4b40      	ldr	r3, [pc, #256]	; (1b71c <xQueueGenericSend+0x350>)
   1b61c:	4798      	blx	r3
   1b61e:	6a3b      	ldr	r3, [r7, #32]
   1b620:	2244      	movs	r2, #68	; 0x44
   1b622:	5c9b      	ldrb	r3, [r3, r2]
   1b624:	b25b      	sxtb	r3, r3
   1b626:	3301      	adds	r3, #1
   1b628:	d103      	bne.n	1b632 <xQueueGenericSend+0x266>
   1b62a:	6a3b      	ldr	r3, [r7, #32]
   1b62c:	2244      	movs	r2, #68	; 0x44
   1b62e:	2100      	movs	r1, #0
   1b630:	5499      	strb	r1, [r3, r2]
   1b632:	6a3b      	ldr	r3, [r7, #32]
   1b634:	2245      	movs	r2, #69	; 0x45
   1b636:	5c9b      	ldrb	r3, [r3, r2]
   1b638:	b25b      	sxtb	r3, r3
   1b63a:	3301      	adds	r3, #1
   1b63c:	d103      	bne.n	1b646 <xQueueGenericSend+0x27a>
   1b63e:	6a3b      	ldr	r3, [r7, #32]
   1b640:	2245      	movs	r2, #69	; 0x45
   1b642:	2100      	movs	r1, #0
   1b644:	5499      	strb	r1, [r3, r2]
   1b646:	4b43      	ldr	r3, [pc, #268]	; (1b754 <xQueueGenericSend+0x388>)
   1b648:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1b64a:	1d3a      	adds	r2, r7, #4
   1b64c:	2314      	movs	r3, #20
   1b64e:	18fb      	adds	r3, r7, r3
   1b650:	0011      	movs	r1, r2
   1b652:	0018      	movs	r0, r3
   1b654:	4b42      	ldr	r3, [pc, #264]	; (1b760 <xQueueGenericSend+0x394>)
   1b656:	4798      	blx	r3
   1b658:	1e03      	subs	r3, r0, #0
   1b65a:	d000      	beq.n	1b65e <xQueueGenericSend+0x292>
   1b65c:	e08a      	b.n	1b774 <xQueueGenericSend+0x3a8>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   1b65e:	6a3b      	ldr	r3, [r7, #32]
   1b660:	0018      	movs	r0, r3
   1b662:	4b40      	ldr	r3, [pc, #256]	; (1b764 <xQueueGenericSend+0x398>)
   1b664:	4798      	blx	r3
   1b666:	1e03      	subs	r3, r0, #0
   1b668:	d04f      	beq.n	1b70a <xQueueGenericSend+0x33e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
   1b66a:	4b2d      	ldr	r3, [pc, #180]	; (1b720 <xQueueGenericSend+0x354>)
   1b66c:	4798      	blx	r3
   1b66e:	0003      	movs	r3, r0
   1b670:	0018      	movs	r0, r3
   1b672:	4b2c      	ldr	r3, [pc, #176]	; (1b724 <xQueueGenericSend+0x358>)
   1b674:	4798      	blx	r3
   1b676:	0003      	movs	r3, r0
   1b678:	001a      	movs	r2, r3
   1b67a:	4b2b      	ldr	r3, [pc, #172]	; (1b728 <xQueueGenericSend+0x35c>)
   1b67c:	881b      	ldrh	r3, [r3, #0]
   1b67e:	4013      	ands	r3, r2
   1b680:	b29b      	uxth	r3, r3
   1b682:	2b00      	cmp	r3, #0
   1b684:	d02e      	beq.n	1b6e4 <xQueueGenericSend+0x318>
   1b686:	6a3b      	ldr	r3, [r7, #32]
   1b688:	0018      	movs	r0, r3
   1b68a:	4b28      	ldr	r3, [pc, #160]	; (1b72c <xQueueGenericSend+0x360>)
   1b68c:	4798      	blx	r3
   1b68e:	0003      	movs	r3, r0
   1b690:	001a      	movs	r2, r3
   1b692:	4b25      	ldr	r3, [pc, #148]	; (1b728 <xQueueGenericSend+0x35c>)
   1b694:	881b      	ldrh	r3, [r3, #0]
   1b696:	4013      	ands	r3, r2
   1b698:	b29b      	uxth	r3, r3
   1b69a:	2b00      	cmp	r3, #0
   1b69c:	d022      	beq.n	1b6e4 <xQueueGenericSend+0x318>
   1b69e:	683b      	ldr	r3, [r7, #0]
   1b6a0:	2b00      	cmp	r3, #0
   1b6a2:	d10b      	bne.n	1b6bc <xQueueGenericSend+0x2f0>
   1b6a4:	6a3b      	ldr	r3, [r7, #32]
   1b6a6:	0018      	movs	r0, r3
   1b6a8:	4b21      	ldr	r3, [pc, #132]	; (1b730 <xQueueGenericSend+0x364>)
   1b6aa:	4798      	blx	r3
   1b6ac:	0003      	movs	r3, r0
   1b6ae:	001a      	movs	r2, r3
   1b6b0:	4b20      	ldr	r3, [pc, #128]	; (1b734 <xQueueGenericSend+0x368>)
   1b6b2:	5c9b      	ldrb	r3, [r3, r2]
   1b6b4:	3370      	adds	r3, #112	; 0x70
   1b6b6:	b2db      	uxtb	r3, r3
   1b6b8:	001d      	movs	r5, r3
   1b6ba:	e000      	b.n	1b6be <xQueueGenericSend+0x2f2>
   1b6bc:	2575      	movs	r5, #117	; 0x75
   1b6be:	6a3b      	ldr	r3, [r7, #32]
   1b6c0:	0018      	movs	r0, r3
   1b6c2:	4b1b      	ldr	r3, [pc, #108]	; (1b730 <xQueueGenericSend+0x364>)
   1b6c4:	4798      	blx	r3
   1b6c6:	0003      	movs	r3, r0
   1b6c8:	001a      	movs	r2, r3
   1b6ca:	4b1a      	ldr	r3, [pc, #104]	; (1b734 <xQueueGenericSend+0x368>)
   1b6cc:	5c9c      	ldrb	r4, [r3, r2]
   1b6ce:	6a3b      	ldr	r3, [r7, #32]
   1b6d0:	0018      	movs	r0, r3
   1b6d2:	4b19      	ldr	r3, [pc, #100]	; (1b738 <xQueueGenericSend+0x36c>)
   1b6d4:	4798      	blx	r3
   1b6d6:	0003      	movs	r3, r0
   1b6d8:	b2db      	uxtb	r3, r3
   1b6da:	001a      	movs	r2, r3
   1b6dc:	0021      	movs	r1, r4
   1b6de:	0028      	movs	r0, r5
   1b6e0:	4b16      	ldr	r3, [pc, #88]	; (1b73c <xQueueGenericSend+0x370>)
   1b6e2:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1b6e4:	6a3b      	ldr	r3, [r7, #32]
   1b6e6:	3310      	adds	r3, #16
   1b6e8:	687a      	ldr	r2, [r7, #4]
   1b6ea:	0011      	movs	r1, r2
   1b6ec:	0018      	movs	r0, r3
   1b6ee:	4b1e      	ldr	r3, [pc, #120]	; (1b768 <xQueueGenericSend+0x39c>)
   1b6f0:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   1b6f2:	6a3b      	ldr	r3, [r7, #32]
   1b6f4:	0018      	movs	r0, r3
   1b6f6:	4b1d      	ldr	r3, [pc, #116]	; (1b76c <xQueueGenericSend+0x3a0>)
   1b6f8:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1b6fa:	4b1d      	ldr	r3, [pc, #116]	; (1b770 <xQueueGenericSend+0x3a4>)
   1b6fc:	4798      	blx	r3
   1b6fe:	1e03      	subs	r3, r0, #0
   1b700:	d000      	beq.n	1b704 <xQueueGenericSend+0x338>
   1b702:	e69d      	b.n	1b440 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
   1b704:	4b11      	ldr	r3, [pc, #68]	; (1b74c <xQueueGenericSend+0x380>)
   1b706:	4798      	blx	r3
   1b708:	e69a      	b.n	1b440 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   1b70a:	6a3b      	ldr	r3, [r7, #32]
   1b70c:	0018      	movs	r0, r3
   1b70e:	4b17      	ldr	r3, [pc, #92]	; (1b76c <xQueueGenericSend+0x3a0>)
   1b710:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1b712:	4b17      	ldr	r3, [pc, #92]	; (1b770 <xQueueGenericSend+0x3a4>)
   1b714:	4798      	blx	r3
   1b716:	e693      	b.n	1b440 <xQueueGenericSend+0x74>
   1b718:	0001db59 	.word	0x0001db59
   1b71c:	0001ae39 	.word	0x0001ae39
   1b720:	000190cd 	.word	0x000190cd
   1b724:	00018e31 	.word	0x00018e31
   1b728:	20000110 	.word	0x20000110
   1b72c:	00018ef1 	.word	0x00018ef1
   1b730:	00018df1 	.word	0x00018df1
   1b734:	20000104 	.word	0x20000104
   1b738:	00018ed1 	.word	0x00018ed1
   1b73c:	00019829 	.word	0x00019829
   1b740:	00019e85 	.word	0x00019e85
   1b744:	0001c605 	.word	0x0001c605
   1b748:	0001c909 	.word	0x0001c909
   1b74c:	0001ae21 	.word	0x0001ae21
   1b750:	0001d6c9 	.word	0x0001d6c9
   1b754:	0001ae5d 	.word	0x0001ae5d
   1b758:	0001d809 	.word	0x0001d809
   1b75c:	0001d0f1 	.word	0x0001d0f1
   1b760:	0001d831 	.word	0x0001d831
   1b764:	0001c859 	.word	0x0001c859
   1b768:	0001d5a5 	.word	0x0001d5a5
   1b76c:	0001c735 	.word	0x0001c735
   1b770:	0001d109 	.word	0x0001d109
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   1b774:	6a3b      	ldr	r3, [r7, #32]
   1b776:	0018      	movs	r0, r3
   1b778:	4b22      	ldr	r3, [pc, #136]	; (1b804 <xQueueGenericSend+0x438>)
   1b77a:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1b77c:	4b22      	ldr	r3, [pc, #136]	; (1b808 <xQueueGenericSend+0x43c>)
   1b77e:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
   1b780:	4b22      	ldr	r3, [pc, #136]	; (1b80c <xQueueGenericSend+0x440>)
   1b782:	4798      	blx	r3
   1b784:	0003      	movs	r3, r0
   1b786:	0018      	movs	r0, r3
   1b788:	4b21      	ldr	r3, [pc, #132]	; (1b810 <xQueueGenericSend+0x444>)
   1b78a:	4798      	blx	r3
   1b78c:	0003      	movs	r3, r0
   1b78e:	001a      	movs	r2, r3
   1b790:	4b20      	ldr	r3, [pc, #128]	; (1b814 <xQueueGenericSend+0x448>)
   1b792:	881b      	ldrh	r3, [r3, #0]
   1b794:	4013      	ands	r3, r2
   1b796:	b29b      	uxth	r3, r3
   1b798:	2b00      	cmp	r3, #0
   1b79a:	d02e      	beq.n	1b7fa <xQueueGenericSend+0x42e>
   1b79c:	6a3b      	ldr	r3, [r7, #32]
   1b79e:	0018      	movs	r0, r3
   1b7a0:	4b1d      	ldr	r3, [pc, #116]	; (1b818 <xQueueGenericSend+0x44c>)
   1b7a2:	4798      	blx	r3
   1b7a4:	0003      	movs	r3, r0
   1b7a6:	001a      	movs	r2, r3
   1b7a8:	4b1a      	ldr	r3, [pc, #104]	; (1b814 <xQueueGenericSend+0x448>)
   1b7aa:	881b      	ldrh	r3, [r3, #0]
   1b7ac:	4013      	ands	r3, r2
   1b7ae:	b29b      	uxth	r3, r3
   1b7b0:	2b00      	cmp	r3, #0
   1b7b2:	d022      	beq.n	1b7fa <xQueueGenericSend+0x42e>
   1b7b4:	683b      	ldr	r3, [r7, #0]
   1b7b6:	2b00      	cmp	r3, #0
   1b7b8:	d10b      	bne.n	1b7d2 <xQueueGenericSend+0x406>
   1b7ba:	6a3b      	ldr	r3, [r7, #32]
   1b7bc:	0018      	movs	r0, r3
   1b7be:	4b17      	ldr	r3, [pc, #92]	; (1b81c <xQueueGenericSend+0x450>)
   1b7c0:	4798      	blx	r3
   1b7c2:	0003      	movs	r3, r0
   1b7c4:	001a      	movs	r2, r3
   1b7c6:	4b16      	ldr	r3, [pc, #88]	; (1b820 <xQueueGenericSend+0x454>)
   1b7c8:	5c9b      	ldrb	r3, [r3, r2]
   1b7ca:	3348      	adds	r3, #72	; 0x48
   1b7cc:	b2db      	uxtb	r3, r3
   1b7ce:	001d      	movs	r5, r3
   1b7d0:	e000      	b.n	1b7d4 <xQueueGenericSend+0x408>
   1b7d2:	254d      	movs	r5, #77	; 0x4d
   1b7d4:	6a3b      	ldr	r3, [r7, #32]
   1b7d6:	0018      	movs	r0, r3
   1b7d8:	4b10      	ldr	r3, [pc, #64]	; (1b81c <xQueueGenericSend+0x450>)
   1b7da:	4798      	blx	r3
   1b7dc:	0003      	movs	r3, r0
   1b7de:	001a      	movs	r2, r3
   1b7e0:	4b0f      	ldr	r3, [pc, #60]	; (1b820 <xQueueGenericSend+0x454>)
   1b7e2:	5c9c      	ldrb	r4, [r3, r2]
   1b7e4:	6a3b      	ldr	r3, [r7, #32]
   1b7e6:	0018      	movs	r0, r3
   1b7e8:	4b0e      	ldr	r3, [pc, #56]	; (1b824 <xQueueGenericSend+0x458>)
   1b7ea:	4798      	blx	r3
   1b7ec:	0003      	movs	r3, r0
   1b7ee:	b2db      	uxtb	r3, r3
   1b7f0:	001a      	movs	r2, r3
   1b7f2:	0021      	movs	r1, r4
   1b7f4:	0028      	movs	r0, r5
   1b7f6:	4b0c      	ldr	r3, [pc, #48]	; (1b828 <xQueueGenericSend+0x45c>)
   1b7f8:	4798      	blx	r3
			return errQUEUE_FULL;
   1b7fa:	2300      	movs	r3, #0
		}
	}
}
   1b7fc:	0018      	movs	r0, r3
   1b7fe:	46bd      	mov	sp, r7
   1b800:	b00a      	add	sp, #40	; 0x28
   1b802:	bdb0      	pop	{r4, r5, r7, pc}
   1b804:	0001c735 	.word	0x0001c735
   1b808:	0001d109 	.word	0x0001d109
   1b80c:	000190cd 	.word	0x000190cd
   1b810:	00018e31 	.word	0x00018e31
   1b814:	20000110 	.word	0x20000110
   1b818:	00018ef1 	.word	0x00018ef1
   1b81c:	00018df1 	.word	0x00018df1
   1b820:	20000104 	.word	0x20000104
   1b824:	00018ed1 	.word	0x00018ed1
   1b828:	00019829 	.word	0x00019829

0001b82c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   1b82c:	b5b0      	push	{r4, r5, r7, lr}
   1b82e:	b088      	sub	sp, #32
   1b830:	af00      	add	r7, sp, #0
   1b832:	60f8      	str	r0, [r7, #12]
   1b834:	60b9      	str	r1, [r7, #8]
   1b836:	607a      	str	r2, [r7, #4]
   1b838:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b83a:	68fb      	ldr	r3, [r7, #12]
   1b83c:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   1b83e:	69bb      	ldr	r3, [r7, #24]
   1b840:	2b00      	cmp	r3, #0
   1b842:	d101      	bne.n	1b848 <xQueueGenericSendFromISR+0x1c>
   1b844:	b672      	cpsid	i
   1b846:	e7fe      	b.n	1b846 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1b848:	68bb      	ldr	r3, [r7, #8]
   1b84a:	2b00      	cmp	r3, #0
   1b84c:	d103      	bne.n	1b856 <xQueueGenericSendFromISR+0x2a>
   1b84e:	69bb      	ldr	r3, [r7, #24]
   1b850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b852:	2b00      	cmp	r3, #0
   1b854:	d101      	bne.n	1b85a <xQueueGenericSendFromISR+0x2e>
   1b856:	2301      	movs	r3, #1
   1b858:	e000      	b.n	1b85c <xQueueGenericSendFromISR+0x30>
   1b85a:	2300      	movs	r3, #0
   1b85c:	2b00      	cmp	r3, #0
   1b85e:	d101      	bne.n	1b864 <xQueueGenericSendFromISR+0x38>
   1b860:	b672      	cpsid	i
   1b862:	e7fe      	b.n	1b862 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1b864:	683b      	ldr	r3, [r7, #0]
   1b866:	2b02      	cmp	r3, #2
   1b868:	d103      	bne.n	1b872 <xQueueGenericSendFromISR+0x46>
   1b86a:	69bb      	ldr	r3, [r7, #24]
   1b86c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b86e:	2b01      	cmp	r3, #1
   1b870:	d101      	bne.n	1b876 <xQueueGenericSendFromISR+0x4a>
   1b872:	2301      	movs	r3, #1
   1b874:	e000      	b.n	1b878 <xQueueGenericSendFromISR+0x4c>
   1b876:	2300      	movs	r3, #0
   1b878:	2b00      	cmp	r3, #0
   1b87a:	d101      	bne.n	1b880 <xQueueGenericSendFromISR+0x54>
   1b87c:	b672      	cpsid	i
   1b87e:	e7fe      	b.n	1b87e <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1b880:	4b68      	ldr	r3, [pc, #416]	; (1ba24 <xQueueGenericSendFromISR+0x1f8>)
   1b882:	4798      	blx	r3
   1b884:	0003      	movs	r3, r0
   1b886:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1b888:	69bb      	ldr	r3, [r7, #24]
   1b88a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1b88c:	69bb      	ldr	r3, [r7, #24]
   1b88e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b890:	429a      	cmp	r2, r3
   1b892:	d303      	bcc.n	1b89c <xQueueGenericSendFromISR+0x70>
   1b894:	683b      	ldr	r3, [r7, #0]
   1b896:	2b02      	cmp	r3, #2
   1b898:	d000      	beq.n	1b89c <xQueueGenericSendFromISR+0x70>
   1b89a:	e088      	b.n	1b9ae <xQueueGenericSendFromISR+0x182>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1b89c:	2313      	movs	r3, #19
   1b89e:	18fb      	adds	r3, r7, r3
   1b8a0:	69ba      	ldr	r2, [r7, #24]
   1b8a2:	2145      	movs	r1, #69	; 0x45
   1b8a4:	5c52      	ldrb	r2, [r2, r1]
   1b8a6:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1b8a8:	69bb      	ldr	r3, [r7, #24]
   1b8aa:	0018      	movs	r0, r3
   1b8ac:	4b5e      	ldr	r3, [pc, #376]	; (1ba28 <xQueueGenericSendFromISR+0x1fc>)
   1b8ae:	4798      	blx	r3
   1b8b0:	0003      	movs	r3, r0
   1b8b2:	001a      	movs	r2, r3
   1b8b4:	4b5d      	ldr	r3, [pc, #372]	; (1ba2c <xQueueGenericSendFromISR+0x200>)
   1b8b6:	881b      	ldrh	r3, [r3, #0]
   1b8b8:	4013      	ands	r3, r2
   1b8ba:	b29b      	uxth	r3, r3
   1b8bc:	2b00      	cmp	r3, #0
   1b8be:	d022      	beq.n	1b906 <xQueueGenericSendFromISR+0xda>
   1b8c0:	683b      	ldr	r3, [r7, #0]
   1b8c2:	2b00      	cmp	r3, #0
   1b8c4:	d10b      	bne.n	1b8de <xQueueGenericSendFromISR+0xb2>
   1b8c6:	69bb      	ldr	r3, [r7, #24]
   1b8c8:	0018      	movs	r0, r3
   1b8ca:	4b59      	ldr	r3, [pc, #356]	; (1ba30 <xQueueGenericSendFromISR+0x204>)
   1b8cc:	4798      	blx	r3
   1b8ce:	0003      	movs	r3, r0
   1b8d0:	001a      	movs	r2, r3
   1b8d2:	4b58      	ldr	r3, [pc, #352]	; (1ba34 <xQueueGenericSendFromISR+0x208>)
   1b8d4:	5c9b      	ldrb	r3, [r3, r2]
   1b8d6:	3330      	adds	r3, #48	; 0x30
   1b8d8:	b2db      	uxtb	r3, r3
   1b8da:	001d      	movs	r5, r3
   1b8dc:	e000      	b.n	1b8e0 <xQueueGenericSendFromISR+0xb4>
   1b8de:	2535      	movs	r5, #53	; 0x35
   1b8e0:	69bb      	ldr	r3, [r7, #24]
   1b8e2:	0018      	movs	r0, r3
   1b8e4:	4b52      	ldr	r3, [pc, #328]	; (1ba30 <xQueueGenericSendFromISR+0x204>)
   1b8e6:	4798      	blx	r3
   1b8e8:	0003      	movs	r3, r0
   1b8ea:	001a      	movs	r2, r3
   1b8ec:	4b51      	ldr	r3, [pc, #324]	; (1ba34 <xQueueGenericSendFromISR+0x208>)
   1b8ee:	5c9c      	ldrb	r4, [r3, r2]
   1b8f0:	69bb      	ldr	r3, [r7, #24]
   1b8f2:	0018      	movs	r0, r3
   1b8f4:	4b50      	ldr	r3, [pc, #320]	; (1ba38 <xQueueGenericSendFromISR+0x20c>)
   1b8f6:	4798      	blx	r3
   1b8f8:	0003      	movs	r3, r0
   1b8fa:	b2db      	uxtb	r3, r3
   1b8fc:	001a      	movs	r2, r3
   1b8fe:	0021      	movs	r1, r4
   1b900:	0028      	movs	r0, r5
   1b902:	4b4e      	ldr	r3, [pc, #312]	; (1ba3c <xQueueGenericSendFromISR+0x210>)
   1b904:	4798      	blx	r3
   1b906:	69bb      	ldr	r3, [r7, #24]
   1b908:	0018      	movs	r0, r3
   1b90a:	4b49      	ldr	r3, [pc, #292]	; (1ba30 <xQueueGenericSendFromISR+0x204>)
   1b90c:	4798      	blx	r3
   1b90e:	0003      	movs	r3, r0
   1b910:	001a      	movs	r2, r3
   1b912:	4b48      	ldr	r3, [pc, #288]	; (1ba34 <xQueueGenericSendFromISR+0x208>)
   1b914:	5c9c      	ldrb	r4, [r3, r2]
   1b916:	69bb      	ldr	r3, [r7, #24]
   1b918:	0018      	movs	r0, r3
   1b91a:	4b47      	ldr	r3, [pc, #284]	; (1ba38 <xQueueGenericSendFromISR+0x20c>)
   1b91c:	4798      	blx	r3
   1b91e:	0003      	movs	r3, r0
   1b920:	b2d9      	uxtb	r1, r3
   1b922:	69bb      	ldr	r3, [r7, #24]
   1b924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b926:	b2db      	uxtb	r3, r3
   1b928:	3301      	adds	r3, #1
   1b92a:	b2db      	uxtb	r3, r3
   1b92c:	001a      	movs	r2, r3
   1b92e:	0020      	movs	r0, r4
   1b930:	4b43      	ldr	r3, [pc, #268]	; (1ba40 <xQueueGenericSendFromISR+0x214>)
   1b932:	4798      	blx	r3
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1b934:	683a      	ldr	r2, [r7, #0]
   1b936:	68b9      	ldr	r1, [r7, #8]
   1b938:	69bb      	ldr	r3, [r7, #24]
   1b93a:	0018      	movs	r0, r3
   1b93c:	4b41      	ldr	r3, [pc, #260]	; (1ba44 <xQueueGenericSendFromISR+0x218>)
   1b93e:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1b940:	2313      	movs	r3, #19
   1b942:	18fb      	adds	r3, r7, r3
   1b944:	781b      	ldrb	r3, [r3, #0]
   1b946:	b25b      	sxtb	r3, r3
   1b948:	3301      	adds	r3, #1
   1b94a:	d124      	bne.n	1b996 <xQueueGenericSendFromISR+0x16a>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1b94c:	69bb      	ldr	r3, [r7, #24]
   1b94e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b950:	2b00      	cmp	r3, #0
   1b952:	d00e      	beq.n	1b972 <xQueueGenericSendFromISR+0x146>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1b954:	683a      	ldr	r2, [r7, #0]
   1b956:	69bb      	ldr	r3, [r7, #24]
   1b958:	0011      	movs	r1, r2
   1b95a:	0018      	movs	r0, r3
   1b95c:	4b3a      	ldr	r3, [pc, #232]	; (1ba48 <xQueueGenericSendFromISR+0x21c>)
   1b95e:	4798      	blx	r3
   1b960:	1e03      	subs	r3, r0, #0
   1b962:	d021      	beq.n	1b9a8 <xQueueGenericSendFromISR+0x17c>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1b964:	687b      	ldr	r3, [r7, #4]
   1b966:	2b00      	cmp	r3, #0
   1b968:	d01e      	beq.n	1b9a8 <xQueueGenericSendFromISR+0x17c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1b96a:	687b      	ldr	r3, [r7, #4]
   1b96c:	2201      	movs	r2, #1
   1b96e:	601a      	str	r2, [r3, #0]
   1b970:	e01a      	b.n	1b9a8 <xQueueGenericSendFromISR+0x17c>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1b972:	69bb      	ldr	r3, [r7, #24]
   1b974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b976:	2b00      	cmp	r3, #0
   1b978:	d016      	beq.n	1b9a8 <xQueueGenericSendFromISR+0x17c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1b97a:	69bb      	ldr	r3, [r7, #24]
   1b97c:	3324      	adds	r3, #36	; 0x24
   1b97e:	0018      	movs	r0, r3
   1b980:	4b32      	ldr	r3, [pc, #200]	; (1ba4c <xQueueGenericSendFromISR+0x220>)
   1b982:	4798      	blx	r3
   1b984:	1e03      	subs	r3, r0, #0
   1b986:	d00f      	beq.n	1b9a8 <xQueueGenericSendFromISR+0x17c>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1b988:	687b      	ldr	r3, [r7, #4]
   1b98a:	2b00      	cmp	r3, #0
   1b98c:	d00c      	beq.n	1b9a8 <xQueueGenericSendFromISR+0x17c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1b98e:	687b      	ldr	r3, [r7, #4]
   1b990:	2201      	movs	r2, #1
   1b992:	601a      	str	r2, [r3, #0]
   1b994:	e008      	b.n	1b9a8 <xQueueGenericSendFromISR+0x17c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1b996:	2313      	movs	r3, #19
   1b998:	18fb      	adds	r3, r7, r3
   1b99a:	781b      	ldrb	r3, [r3, #0]
   1b99c:	3301      	adds	r3, #1
   1b99e:	b2db      	uxtb	r3, r3
   1b9a0:	b259      	sxtb	r1, r3
   1b9a2:	69bb      	ldr	r3, [r7, #24]
   1b9a4:	2245      	movs	r2, #69	; 0x45
   1b9a6:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1b9a8:	2301      	movs	r3, #1
   1b9aa:	61fb      	str	r3, [r7, #28]
		{
   1b9ac:	e030      	b.n	1ba10 <xQueueGenericSendFromISR+0x1e4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1b9ae:	69bb      	ldr	r3, [r7, #24]
   1b9b0:	0018      	movs	r0, r3
   1b9b2:	4b1d      	ldr	r3, [pc, #116]	; (1ba28 <xQueueGenericSendFromISR+0x1fc>)
   1b9b4:	4798      	blx	r3
   1b9b6:	0003      	movs	r3, r0
   1b9b8:	001a      	movs	r2, r3
   1b9ba:	4b1c      	ldr	r3, [pc, #112]	; (1ba2c <xQueueGenericSendFromISR+0x200>)
   1b9bc:	881b      	ldrh	r3, [r3, #0]
   1b9be:	4013      	ands	r3, r2
   1b9c0:	b29b      	uxth	r3, r3
   1b9c2:	2b00      	cmp	r3, #0
   1b9c4:	d022      	beq.n	1ba0c <xQueueGenericSendFromISR+0x1e0>
   1b9c6:	683b      	ldr	r3, [r7, #0]
   1b9c8:	2b00      	cmp	r3, #0
   1b9ca:	d10b      	bne.n	1b9e4 <xQueueGenericSendFromISR+0x1b8>
   1b9cc:	69bb      	ldr	r3, [r7, #24]
   1b9ce:	0018      	movs	r0, r3
   1b9d0:	4b17      	ldr	r3, [pc, #92]	; (1ba30 <xQueueGenericSendFromISR+0x204>)
   1b9d2:	4798      	blx	r3
   1b9d4:	0003      	movs	r3, r0
   1b9d6:	001a      	movs	r2, r3
   1b9d8:	4b16      	ldr	r3, [pc, #88]	; (1ba34 <xQueueGenericSendFromISR+0x208>)
   1b9da:	5c9b      	ldrb	r3, [r3, r2]
   1b9dc:	3358      	adds	r3, #88	; 0x58
   1b9de:	b2db      	uxtb	r3, r3
   1b9e0:	001d      	movs	r5, r3
   1b9e2:	e000      	b.n	1b9e6 <xQueueGenericSendFromISR+0x1ba>
   1b9e4:	255d      	movs	r5, #93	; 0x5d
   1b9e6:	69bb      	ldr	r3, [r7, #24]
   1b9e8:	0018      	movs	r0, r3
   1b9ea:	4b11      	ldr	r3, [pc, #68]	; (1ba30 <xQueueGenericSendFromISR+0x204>)
   1b9ec:	4798      	blx	r3
   1b9ee:	0003      	movs	r3, r0
   1b9f0:	001a      	movs	r2, r3
   1b9f2:	4b10      	ldr	r3, [pc, #64]	; (1ba34 <xQueueGenericSendFromISR+0x208>)
   1b9f4:	5c9c      	ldrb	r4, [r3, r2]
   1b9f6:	69bb      	ldr	r3, [r7, #24]
   1b9f8:	0018      	movs	r0, r3
   1b9fa:	4b0f      	ldr	r3, [pc, #60]	; (1ba38 <xQueueGenericSendFromISR+0x20c>)
   1b9fc:	4798      	blx	r3
   1b9fe:	0003      	movs	r3, r0
   1ba00:	b2db      	uxtb	r3, r3
   1ba02:	001a      	movs	r2, r3
   1ba04:	0021      	movs	r1, r4
   1ba06:	0028      	movs	r0, r5
   1ba08:	4b0c      	ldr	r3, [pc, #48]	; (1ba3c <xQueueGenericSendFromISR+0x210>)
   1ba0a:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1ba0c:	2300      	movs	r3, #0
   1ba0e:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1ba10:	697b      	ldr	r3, [r7, #20]
   1ba12:	0018      	movs	r0, r3
   1ba14:	4b0e      	ldr	r3, [pc, #56]	; (1ba50 <xQueueGenericSendFromISR+0x224>)
   1ba16:	4798      	blx	r3

	return xReturn;
   1ba18:	69fb      	ldr	r3, [r7, #28]
}
   1ba1a:	0018      	movs	r0, r3
   1ba1c:	46bd      	mov	sp, r7
   1ba1e:	b008      	add	sp, #32
   1ba20:	bdb0      	pop	{r4, r5, r7, pc}
   1ba22:	46c0      	nop			; (mov r8, r8)
   1ba24:	0001ae8d 	.word	0x0001ae8d
   1ba28:	00018ef1 	.word	0x00018ef1
   1ba2c:	20000110 	.word	0x20000110
   1ba30:	00018df1 	.word	0x00018df1
   1ba34:	20000104 	.word	0x20000104
   1ba38:	00018ed1 	.word	0x00018ed1
   1ba3c:	00019829 	.word	0x00019829
   1ba40:	00019e85 	.word	0x00019e85
   1ba44:	0001c605 	.word	0x0001c605
   1ba48:	0001c909 	.word	0x0001c909
   1ba4c:	0001d6c9 	.word	0x0001d6c9
   1ba50:	0001ae99 	.word	0x0001ae99

0001ba54 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
   1ba54:	b580      	push	{r7, lr}
   1ba56:	b082      	sub	sp, #8
   1ba58:	af00      	add	r7, sp, #0
   1ba5a:	6078      	str	r0, [r7, #4]
   1ba5c:	6039      	str	r1, [r7, #0]
   1ba5e:	6839      	ldr	r1, [r7, #0]
   1ba60:	687b      	ldr	r3, [r7, #4]
   1ba62:	2200      	movs	r2, #0
   1ba64:	0018      	movs	r0, r3
   1ba66:	4b03      	ldr	r3, [pc, #12]	; (1ba74 <xQueueGiveFromISR+0x20>)
   1ba68:	4798      	blx	r3
   1ba6a:	0003      	movs	r3, r0
   1ba6c:	0018      	movs	r0, r3
   1ba6e:	46bd      	mov	sp, r7
   1ba70:	b002      	add	sp, #8
   1ba72:	bd80      	pop	{r7, pc}
   1ba74:	0001ba79 	.word	0x0001ba79

0001ba78 <MyWrapper>:
{
   1ba78:	b5b0      	push	{r4, r5, r7, lr}
   1ba7a:	b08a      	sub	sp, #40	; 0x28
   1ba7c:	af00      	add	r7, sp, #0
   1ba7e:	60f8      	str	r0, [r7, #12]
   1ba80:	60b9      	str	r1, [r7, #8]
   1ba82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1ba84:	68fb      	ldr	r3, [r7, #12]
   1ba86:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
   1ba88:	6a3b      	ldr	r3, [r7, #32]
   1ba8a:	2b00      	cmp	r3, #0
   1ba8c:	d101      	bne.n	1ba92 <MyWrapper+0x1a>
   1ba8e:	b672      	cpsid	i
   1ba90:	e7fe      	b.n	1ba90 <MyWrapper+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1ba92:	6a3b      	ldr	r3, [r7, #32]
   1ba94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ba96:	2b00      	cmp	r3, #0
   1ba98:	d001      	beq.n	1ba9e <MyWrapper+0x26>
   1ba9a:	b672      	cpsid	i
   1ba9c:	e7fe      	b.n	1ba9c <MyWrapper+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   1ba9e:	6a3b      	ldr	r3, [r7, #32]
   1baa0:	681b      	ldr	r3, [r3, #0]
   1baa2:	2b00      	cmp	r3, #0
   1baa4:	d103      	bne.n	1baae <MyWrapper+0x36>
   1baa6:	6a3b      	ldr	r3, [r7, #32]
   1baa8:	685b      	ldr	r3, [r3, #4]
   1baaa:	2b00      	cmp	r3, #0
   1baac:	d101      	bne.n	1bab2 <MyWrapper+0x3a>
   1baae:	2301      	movs	r3, #1
   1bab0:	e000      	b.n	1bab4 <MyWrapper+0x3c>
   1bab2:	2300      	movs	r3, #0
   1bab4:	2b00      	cmp	r3, #0
   1bab6:	d101      	bne.n	1babc <MyWrapper+0x44>
   1bab8:	b672      	cpsid	i
   1baba:	e7fe      	b.n	1baba <MyWrapper+0x42>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1babc:	4b66      	ldr	r3, [pc, #408]	; (1bc58 <MyWrapper+0x1e0>)
   1babe:	4798      	blx	r3
   1bac0:	0003      	movs	r3, r0
   1bac2:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1bac4:	6a3b      	ldr	r3, [r7, #32]
   1bac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bac8:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
   1baca:	6a3b      	ldr	r3, [r7, #32]
   1bacc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1bace:	69bb      	ldr	r3, [r7, #24]
   1bad0:	429a      	cmp	r2, r3
   1bad2:	d800      	bhi.n	1bad6 <MyWrapper+0x5e>
   1bad4:	e085      	b.n	1bbe2 <MyWrapper+0x16a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1bad6:	2317      	movs	r3, #23
   1bad8:	18fb      	adds	r3, r7, r3
   1bada:	6a3a      	ldr	r2, [r7, #32]
   1badc:	2145      	movs	r1, #69	; 0x45
   1bade:	5c52      	ldrb	r2, [r2, r1]
   1bae0:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1bae2:	6a3b      	ldr	r3, [r7, #32]
   1bae4:	0018      	movs	r0, r3
   1bae6:	4b5d      	ldr	r3, [pc, #372]	; (1bc5c <MyWrapper+0x1e4>)
   1bae8:	4798      	blx	r3
   1baea:	0003      	movs	r3, r0
   1baec:	001a      	movs	r2, r3
   1baee:	4b5c      	ldr	r3, [pc, #368]	; (1bc60 <MyWrapper+0x1e8>)
   1baf0:	881b      	ldrh	r3, [r3, #0]
   1baf2:	4013      	ands	r3, r2
   1baf4:	b29b      	uxth	r3, r3
   1baf6:	2b00      	cmp	r3, #0
   1baf8:	d022      	beq.n	1bb40 <MyWrapper+0xc8>
   1bafa:	687b      	ldr	r3, [r7, #4]
   1bafc:	2b00      	cmp	r3, #0
   1bafe:	d10b      	bne.n	1bb18 <MyWrapper+0xa0>
   1bb00:	6a3b      	ldr	r3, [r7, #32]
   1bb02:	0018      	movs	r0, r3
   1bb04:	4b57      	ldr	r3, [pc, #348]	; (1bc64 <MyWrapper+0x1ec>)
   1bb06:	4798      	blx	r3
   1bb08:	0003      	movs	r3, r0
   1bb0a:	001a      	movs	r2, r3
   1bb0c:	4b56      	ldr	r3, [pc, #344]	; (1bc68 <MyWrapper+0x1f0>)
   1bb0e:	5c9b      	ldrb	r3, [r3, r2]
   1bb10:	3330      	adds	r3, #48	; 0x30
   1bb12:	b2db      	uxtb	r3, r3
   1bb14:	001d      	movs	r5, r3
   1bb16:	e000      	b.n	1bb1a <MyWrapper+0xa2>
   1bb18:	2535      	movs	r5, #53	; 0x35
   1bb1a:	6a3b      	ldr	r3, [r7, #32]
   1bb1c:	0018      	movs	r0, r3
   1bb1e:	4b51      	ldr	r3, [pc, #324]	; (1bc64 <MyWrapper+0x1ec>)
   1bb20:	4798      	blx	r3
   1bb22:	0003      	movs	r3, r0
   1bb24:	001a      	movs	r2, r3
   1bb26:	4b50      	ldr	r3, [pc, #320]	; (1bc68 <MyWrapper+0x1f0>)
   1bb28:	5c9c      	ldrb	r4, [r3, r2]
   1bb2a:	6a3b      	ldr	r3, [r7, #32]
   1bb2c:	0018      	movs	r0, r3
   1bb2e:	4b4f      	ldr	r3, [pc, #316]	; (1bc6c <MyWrapper+0x1f4>)
   1bb30:	4798      	blx	r3
   1bb32:	0003      	movs	r3, r0
   1bb34:	b2db      	uxtb	r3, r3
   1bb36:	001a      	movs	r2, r3
   1bb38:	0021      	movs	r1, r4
   1bb3a:	0028      	movs	r0, r5
   1bb3c:	4b4c      	ldr	r3, [pc, #304]	; (1bc70 <MyWrapper+0x1f8>)
   1bb3e:	4798      	blx	r3
   1bb40:	6a3b      	ldr	r3, [r7, #32]
   1bb42:	0018      	movs	r0, r3
   1bb44:	4b47      	ldr	r3, [pc, #284]	; (1bc64 <MyWrapper+0x1ec>)
   1bb46:	4798      	blx	r3
   1bb48:	0003      	movs	r3, r0
   1bb4a:	001a      	movs	r2, r3
   1bb4c:	4b46      	ldr	r3, [pc, #280]	; (1bc68 <MyWrapper+0x1f0>)
   1bb4e:	5c9c      	ldrb	r4, [r3, r2]
   1bb50:	6a3b      	ldr	r3, [r7, #32]
   1bb52:	0018      	movs	r0, r3
   1bb54:	4b45      	ldr	r3, [pc, #276]	; (1bc6c <MyWrapper+0x1f4>)
   1bb56:	4798      	blx	r3
   1bb58:	0003      	movs	r3, r0
   1bb5a:	b2d9      	uxtb	r1, r3
   1bb5c:	6a3b      	ldr	r3, [r7, #32]
   1bb5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bb60:	b2db      	uxtb	r3, r3
   1bb62:	3301      	adds	r3, #1
   1bb64:	b2db      	uxtb	r3, r3
   1bb66:	001a      	movs	r2, r3
   1bb68:	0020      	movs	r0, r4
   1bb6a:	4b42      	ldr	r3, [pc, #264]	; (1bc74 <MyWrapper+0x1fc>)
   1bb6c:	4798      	blx	r3
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1bb6e:	69bb      	ldr	r3, [r7, #24]
   1bb70:	1c5a      	adds	r2, r3, #1
   1bb72:	6a3b      	ldr	r3, [r7, #32]
   1bb74:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1bb76:	2317      	movs	r3, #23
   1bb78:	18fb      	adds	r3, r7, r3
   1bb7a:	781b      	ldrb	r3, [r3, #0]
   1bb7c:	b25b      	sxtb	r3, r3
   1bb7e:	3301      	adds	r3, #1
   1bb80:	d123      	bne.n	1bbca <MyWrapper+0x152>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1bb82:	6a3b      	ldr	r3, [r7, #32]
   1bb84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1bb86:	2b00      	cmp	r3, #0
   1bb88:	d00d      	beq.n	1bba6 <MyWrapper+0x12e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1bb8a:	6a3b      	ldr	r3, [r7, #32]
   1bb8c:	2100      	movs	r1, #0
   1bb8e:	0018      	movs	r0, r3
   1bb90:	4b39      	ldr	r3, [pc, #228]	; (1bc78 <MyWrapper+0x200>)
   1bb92:	4798      	blx	r3
   1bb94:	1e03      	subs	r3, r0, #0
   1bb96:	d021      	beq.n	1bbdc <MyWrapper+0x164>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1bb98:	68bb      	ldr	r3, [r7, #8]
   1bb9a:	2b00      	cmp	r3, #0
   1bb9c:	d01e      	beq.n	1bbdc <MyWrapper+0x164>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1bb9e:	68bb      	ldr	r3, [r7, #8]
   1bba0:	2201      	movs	r2, #1
   1bba2:	601a      	str	r2, [r3, #0]
   1bba4:	e01a      	b.n	1bbdc <MyWrapper+0x164>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1bba6:	6a3b      	ldr	r3, [r7, #32]
   1bba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1bbaa:	2b00      	cmp	r3, #0
   1bbac:	d016      	beq.n	1bbdc <MyWrapper+0x164>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1bbae:	6a3b      	ldr	r3, [r7, #32]
   1bbb0:	3324      	adds	r3, #36	; 0x24
   1bbb2:	0018      	movs	r0, r3
   1bbb4:	4b31      	ldr	r3, [pc, #196]	; (1bc7c <MyWrapper+0x204>)
   1bbb6:	4798      	blx	r3
   1bbb8:	1e03      	subs	r3, r0, #0
   1bbba:	d00f      	beq.n	1bbdc <MyWrapper+0x164>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1bbbc:	68bb      	ldr	r3, [r7, #8]
   1bbbe:	2b00      	cmp	r3, #0
   1bbc0:	d00c      	beq.n	1bbdc <MyWrapper+0x164>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1bbc2:	68bb      	ldr	r3, [r7, #8]
   1bbc4:	2201      	movs	r2, #1
   1bbc6:	601a      	str	r2, [r3, #0]
   1bbc8:	e008      	b.n	1bbdc <MyWrapper+0x164>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1bbca:	2317      	movs	r3, #23
   1bbcc:	18fb      	adds	r3, r7, r3
   1bbce:	781b      	ldrb	r3, [r3, #0]
   1bbd0:	3301      	adds	r3, #1
   1bbd2:	b2db      	uxtb	r3, r3
   1bbd4:	b259      	sxtb	r1, r3
   1bbd6:	6a3b      	ldr	r3, [r7, #32]
   1bbd8:	2245      	movs	r2, #69	; 0x45
   1bbda:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1bbdc:	2301      	movs	r3, #1
   1bbde:	627b      	str	r3, [r7, #36]	; 0x24
   1bbe0:	e030      	b.n	1bc44 <MyWrapper+0x1cc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1bbe2:	6a3b      	ldr	r3, [r7, #32]
   1bbe4:	0018      	movs	r0, r3
   1bbe6:	4b1d      	ldr	r3, [pc, #116]	; (1bc5c <MyWrapper+0x1e4>)
   1bbe8:	4798      	blx	r3
   1bbea:	0003      	movs	r3, r0
   1bbec:	001a      	movs	r2, r3
   1bbee:	4b1c      	ldr	r3, [pc, #112]	; (1bc60 <MyWrapper+0x1e8>)
   1bbf0:	881b      	ldrh	r3, [r3, #0]
   1bbf2:	4013      	ands	r3, r2
   1bbf4:	b29b      	uxth	r3, r3
   1bbf6:	2b00      	cmp	r3, #0
   1bbf8:	d022      	beq.n	1bc40 <MyWrapper+0x1c8>
   1bbfa:	687b      	ldr	r3, [r7, #4]
   1bbfc:	2b00      	cmp	r3, #0
   1bbfe:	d10b      	bne.n	1bc18 <MyWrapper+0x1a0>
   1bc00:	6a3b      	ldr	r3, [r7, #32]
   1bc02:	0018      	movs	r0, r3
   1bc04:	4b17      	ldr	r3, [pc, #92]	; (1bc64 <MyWrapper+0x1ec>)
   1bc06:	4798      	blx	r3
   1bc08:	0003      	movs	r3, r0
   1bc0a:	001a      	movs	r2, r3
   1bc0c:	4b16      	ldr	r3, [pc, #88]	; (1bc68 <MyWrapper+0x1f0>)
   1bc0e:	5c9b      	ldrb	r3, [r3, r2]
   1bc10:	3358      	adds	r3, #88	; 0x58
   1bc12:	b2db      	uxtb	r3, r3
   1bc14:	001d      	movs	r5, r3
   1bc16:	e000      	b.n	1bc1a <MyWrapper+0x1a2>
   1bc18:	255d      	movs	r5, #93	; 0x5d
   1bc1a:	6a3b      	ldr	r3, [r7, #32]
   1bc1c:	0018      	movs	r0, r3
   1bc1e:	4b11      	ldr	r3, [pc, #68]	; (1bc64 <MyWrapper+0x1ec>)
   1bc20:	4798      	blx	r3
   1bc22:	0003      	movs	r3, r0
   1bc24:	001a      	movs	r2, r3
   1bc26:	4b10      	ldr	r3, [pc, #64]	; (1bc68 <MyWrapper+0x1f0>)
   1bc28:	5c9c      	ldrb	r4, [r3, r2]
   1bc2a:	6a3b      	ldr	r3, [r7, #32]
   1bc2c:	0018      	movs	r0, r3
   1bc2e:	4b0f      	ldr	r3, [pc, #60]	; (1bc6c <MyWrapper+0x1f4>)
   1bc30:	4798      	blx	r3
   1bc32:	0003      	movs	r3, r0
   1bc34:	b2db      	uxtb	r3, r3
   1bc36:	001a      	movs	r2, r3
   1bc38:	0021      	movs	r1, r4
   1bc3a:	0028      	movs	r0, r5
   1bc3c:	4b0c      	ldr	r3, [pc, #48]	; (1bc70 <MyWrapper+0x1f8>)
   1bc3e:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1bc40:	2300      	movs	r3, #0
   1bc42:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1bc44:	69fb      	ldr	r3, [r7, #28]
   1bc46:	0018      	movs	r0, r3
   1bc48:	4b0d      	ldr	r3, [pc, #52]	; (1bc80 <MyWrapper+0x208>)
   1bc4a:	4798      	blx	r3

	return xReturn;
   1bc4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1bc4e:	0018      	movs	r0, r3
   1bc50:	46bd      	mov	sp, r7
   1bc52:	b00a      	add	sp, #40	; 0x28
   1bc54:	bdb0      	pop	{r4, r5, r7, pc}
   1bc56:	46c0      	nop			; (mov r8, r8)
   1bc58:	0001ae8d 	.word	0x0001ae8d
   1bc5c:	00018ef1 	.word	0x00018ef1
   1bc60:	20000110 	.word	0x20000110
   1bc64:	00018df1 	.word	0x00018df1
   1bc68:	20000104 	.word	0x20000104
   1bc6c:	00018ed1 	.word	0x00018ed1
   1bc70:	00019829 	.word	0x00019829
   1bc74:	00019e85 	.word	0x00019e85
   1bc78:	0001c909 	.word	0x0001c909
   1bc7c:	0001d6c9 	.word	0x0001d6c9
   1bc80:	0001ae99 	.word	0x0001ae99

0001bc84 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   1bc84:	b5b0      	push	{r4, r5, r7, lr}
   1bc86:	b08a      	sub	sp, #40	; 0x28
   1bc88:	af00      	add	r7, sp, #0
   1bc8a:	60f8      	str	r0, [r7, #12]
   1bc8c:	60b9      	str	r1, [r7, #8]
   1bc8e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   1bc90:	2300      	movs	r3, #0
   1bc92:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1bc94:	68fb      	ldr	r3, [r7, #12]
   1bc96:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1bc98:	6a3b      	ldr	r3, [r7, #32]
   1bc9a:	2b00      	cmp	r3, #0
   1bc9c:	d101      	bne.n	1bca2 <xQueueReceive+0x1e>
   1bc9e:	b672      	cpsid	i
   1bca0:	e7fe      	b.n	1bca0 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1bca2:	68bb      	ldr	r3, [r7, #8]
   1bca4:	2b00      	cmp	r3, #0
   1bca6:	d103      	bne.n	1bcb0 <xQueueReceive+0x2c>
   1bca8:	6a3b      	ldr	r3, [r7, #32]
   1bcaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1bcac:	2b00      	cmp	r3, #0
   1bcae:	d101      	bne.n	1bcb4 <xQueueReceive+0x30>
   1bcb0:	2301      	movs	r3, #1
   1bcb2:	e000      	b.n	1bcb6 <xQueueReceive+0x32>
   1bcb4:	2300      	movs	r3, #0
   1bcb6:	2b00      	cmp	r3, #0
   1bcb8:	d101      	bne.n	1bcbe <xQueueReceive+0x3a>
   1bcba:	b672      	cpsid	i
   1bcbc:	e7fe      	b.n	1bcbc <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1bcbe:	4bbf      	ldr	r3, [pc, #764]	; (1bfbc <xQueueReceive+0x338>)
   1bcc0:	4798      	blx	r3
   1bcc2:	1e03      	subs	r3, r0, #0
   1bcc4:	d102      	bne.n	1bccc <xQueueReceive+0x48>
   1bcc6:	687b      	ldr	r3, [r7, #4]
   1bcc8:	2b00      	cmp	r3, #0
   1bcca:	d101      	bne.n	1bcd0 <xQueueReceive+0x4c>
   1bccc:	2301      	movs	r3, #1
   1bcce:	e000      	b.n	1bcd2 <xQueueReceive+0x4e>
   1bcd0:	2300      	movs	r3, #0
   1bcd2:	2b00      	cmp	r3, #0
   1bcd4:	d101      	bne.n	1bcda <xQueueReceive+0x56>
   1bcd6:	b672      	cpsid	i
   1bcd8:	e7fe      	b.n	1bcd8 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1bcda:	4bb9      	ldr	r3, [pc, #740]	; (1bfc0 <xQueueReceive+0x33c>)
   1bcdc:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1bcde:	6a3b      	ldr	r3, [r7, #32]
   1bce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bce2:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1bce4:	69fb      	ldr	r3, [r7, #28]
   1bce6:	2b00      	cmp	r3, #0
   1bce8:	d100      	bne.n	1bcec <xQueueReceive+0x68>
   1bcea:	e07d      	b.n	1bde8 <xQueueReceive+0x164>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   1bcec:	68ba      	ldr	r2, [r7, #8]
   1bcee:	6a3b      	ldr	r3, [r7, #32]
   1bcf0:	0011      	movs	r1, r2
   1bcf2:	0018      	movs	r0, r3
   1bcf4:	4bb3      	ldr	r3, [pc, #716]	; (1bfc4 <xQueueReceive+0x340>)
   1bcf6:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
   1bcf8:	4bb3      	ldr	r3, [pc, #716]	; (1bfc8 <xQueueReceive+0x344>)
   1bcfa:	4798      	blx	r3
   1bcfc:	0003      	movs	r3, r0
   1bcfe:	0018      	movs	r0, r3
   1bd00:	4bb2      	ldr	r3, [pc, #712]	; (1bfcc <xQueueReceive+0x348>)
   1bd02:	4798      	blx	r3
   1bd04:	0003      	movs	r3, r0
   1bd06:	001a      	movs	r2, r3
   1bd08:	4bb1      	ldr	r3, [pc, #708]	; (1bfd0 <xQueueReceive+0x34c>)
   1bd0a:	881b      	ldrh	r3, [r3, #0]
   1bd0c:	4013      	ands	r3, r2
   1bd0e:	b29b      	uxth	r3, r3
   1bd10:	2b00      	cmp	r3, #0
   1bd12:	d029      	beq.n	1bd68 <xQueueReceive+0xe4>
   1bd14:	6a3b      	ldr	r3, [r7, #32]
   1bd16:	0018      	movs	r0, r3
   1bd18:	4bae      	ldr	r3, [pc, #696]	; (1bfd4 <xQueueReceive+0x350>)
   1bd1a:	4798      	blx	r3
   1bd1c:	0003      	movs	r3, r0
   1bd1e:	001a      	movs	r2, r3
   1bd20:	4bab      	ldr	r3, [pc, #684]	; (1bfd0 <xQueueReceive+0x34c>)
   1bd22:	881b      	ldrh	r3, [r3, #0]
   1bd24:	4013      	ands	r3, r2
   1bd26:	b29b      	uxth	r3, r3
   1bd28:	2b00      	cmp	r3, #0
   1bd2a:	d01d      	beq.n	1bd68 <xQueueReceive+0xe4>
   1bd2c:	6a3b      	ldr	r3, [r7, #32]
   1bd2e:	0018      	movs	r0, r3
   1bd30:	4ba9      	ldr	r3, [pc, #676]	; (1bfd8 <xQueueReceive+0x354>)
   1bd32:	4798      	blx	r3
   1bd34:	0003      	movs	r3, r0
   1bd36:	001a      	movs	r2, r3
   1bd38:	4ba8      	ldr	r3, [pc, #672]	; (1bfdc <xQueueReceive+0x358>)
   1bd3a:	5c9b      	ldrb	r3, [r3, r2]
   1bd3c:	3328      	adds	r3, #40	; 0x28
   1bd3e:	b2db      	uxtb	r3, r3
   1bd40:	001d      	movs	r5, r3
   1bd42:	6a3b      	ldr	r3, [r7, #32]
   1bd44:	0018      	movs	r0, r3
   1bd46:	4ba4      	ldr	r3, [pc, #656]	; (1bfd8 <xQueueReceive+0x354>)
   1bd48:	4798      	blx	r3
   1bd4a:	0003      	movs	r3, r0
   1bd4c:	001a      	movs	r2, r3
   1bd4e:	4ba3      	ldr	r3, [pc, #652]	; (1bfdc <xQueueReceive+0x358>)
   1bd50:	5c9c      	ldrb	r4, [r3, r2]
   1bd52:	6a3b      	ldr	r3, [r7, #32]
   1bd54:	0018      	movs	r0, r3
   1bd56:	4ba2      	ldr	r3, [pc, #648]	; (1bfe0 <xQueueReceive+0x35c>)
   1bd58:	4798      	blx	r3
   1bd5a:	0003      	movs	r3, r0
   1bd5c:	b2db      	uxtb	r3, r3
   1bd5e:	001a      	movs	r2, r3
   1bd60:	0021      	movs	r1, r4
   1bd62:	0028      	movs	r0, r5
   1bd64:	4b9f      	ldr	r3, [pc, #636]	; (1bfe4 <xQueueReceive+0x360>)
   1bd66:	4798      	blx	r3
   1bd68:	6a3b      	ldr	r3, [r7, #32]
   1bd6a:	0018      	movs	r0, r3
   1bd6c:	4b9a      	ldr	r3, [pc, #616]	; (1bfd8 <xQueueReceive+0x354>)
   1bd6e:	4798      	blx	r3
   1bd70:	0003      	movs	r3, r0
   1bd72:	001a      	movs	r2, r3
   1bd74:	4b99      	ldr	r3, [pc, #612]	; (1bfdc <xQueueReceive+0x358>)
   1bd76:	5c9c      	ldrb	r4, [r3, r2]
   1bd78:	6a3b      	ldr	r3, [r7, #32]
   1bd7a:	0018      	movs	r0, r3
   1bd7c:	4b98      	ldr	r3, [pc, #608]	; (1bfe0 <xQueueReceive+0x35c>)
   1bd7e:	4798      	blx	r3
   1bd80:	0003      	movs	r3, r0
   1bd82:	b2dd      	uxtb	r5, r3
   1bd84:	6a3b      	ldr	r3, [r7, #32]
   1bd86:	0018      	movs	r0, r3
   1bd88:	4b93      	ldr	r3, [pc, #588]	; (1bfd8 <xQueueReceive+0x354>)
   1bd8a:	4798      	blx	r3
   1bd8c:	0003      	movs	r3, r0
   1bd8e:	001a      	movs	r2, r3
   1bd90:	4b92      	ldr	r3, [pc, #584]	; (1bfdc <xQueueReceive+0x358>)
   1bd92:	5c9b      	ldrb	r3, [r3, r2]
   1bd94:	2b02      	cmp	r3, #2
   1bd96:	d108      	bne.n	1bdaa <xQueueReceive+0x126>
   1bd98:	4b8b      	ldr	r3, [pc, #556]	; (1bfc8 <xQueueReceive+0x344>)
   1bd9a:	4798      	blx	r3
   1bd9c:	0003      	movs	r3, r0
   1bd9e:	0018      	movs	r0, r3
   1bda0:	4b91      	ldr	r3, [pc, #580]	; (1bfe8 <xQueueReceive+0x364>)
   1bda2:	4798      	blx	r3
   1bda4:	0003      	movs	r3, r0
   1bda6:	b2db      	uxtb	r3, r3
   1bda8:	e004      	b.n	1bdb4 <xQueueReceive+0x130>
   1bdaa:	6a3b      	ldr	r3, [r7, #32]
   1bdac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bdae:	b2db      	uxtb	r3, r3
   1bdb0:	3b01      	subs	r3, #1
   1bdb2:	b2db      	uxtb	r3, r3
   1bdb4:	001a      	movs	r2, r3
   1bdb6:	0029      	movs	r1, r5
   1bdb8:	0020      	movs	r0, r4
   1bdba:	4b8c      	ldr	r3, [pc, #560]	; (1bfec <xQueueReceive+0x368>)
   1bdbc:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   1bdbe:	69fb      	ldr	r3, [r7, #28]
   1bdc0:	1e5a      	subs	r2, r3, #1
   1bdc2:	6a3b      	ldr	r3, [r7, #32]
   1bdc4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1bdc6:	6a3b      	ldr	r3, [r7, #32]
   1bdc8:	691b      	ldr	r3, [r3, #16]
   1bdca:	2b00      	cmp	r3, #0
   1bdcc:	d008      	beq.n	1bde0 <xQueueReceive+0x15c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1bdce:	6a3b      	ldr	r3, [r7, #32]
   1bdd0:	3310      	adds	r3, #16
   1bdd2:	0018      	movs	r0, r3
   1bdd4:	4b86      	ldr	r3, [pc, #536]	; (1bff0 <xQueueReceive+0x36c>)
   1bdd6:	4798      	blx	r3
   1bdd8:	1e03      	subs	r3, r0, #0
   1bdda:	d001      	beq.n	1bde0 <xQueueReceive+0x15c>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1bddc:	4b85      	ldr	r3, [pc, #532]	; (1bff4 <xQueueReceive+0x370>)
   1bdde:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1bde0:	4b85      	ldr	r3, [pc, #532]	; (1bff8 <xQueueReceive+0x374>)
   1bde2:	4798      	blx	r3
				return pdPASS;
   1bde4:	2301      	movs	r3, #1
   1bde6:	e15f      	b.n	1c0a8 <xQueueReceive+0x424>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1bde8:	687b      	ldr	r3, [r7, #4]
   1bdea:	2b00      	cmp	r3, #0
   1bdec:	d13b      	bne.n	1be66 <xQueueReceive+0x1e2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1bdee:	4b82      	ldr	r3, [pc, #520]	; (1bff8 <xQueueReceive+0x374>)
   1bdf0:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1bdf2:	4b75      	ldr	r3, [pc, #468]	; (1bfc8 <xQueueReceive+0x344>)
   1bdf4:	4798      	blx	r3
   1bdf6:	0003      	movs	r3, r0
   1bdf8:	0018      	movs	r0, r3
   1bdfa:	4b74      	ldr	r3, [pc, #464]	; (1bfcc <xQueueReceive+0x348>)
   1bdfc:	4798      	blx	r3
   1bdfe:	0003      	movs	r3, r0
   1be00:	001a      	movs	r2, r3
   1be02:	4b73      	ldr	r3, [pc, #460]	; (1bfd0 <xQueueReceive+0x34c>)
   1be04:	881b      	ldrh	r3, [r3, #0]
   1be06:	4013      	ands	r3, r2
   1be08:	b29b      	uxth	r3, r3
   1be0a:	2b00      	cmp	r3, #0
   1be0c:	d029      	beq.n	1be62 <xQueueReceive+0x1de>
   1be0e:	6a3b      	ldr	r3, [r7, #32]
   1be10:	0018      	movs	r0, r3
   1be12:	4b70      	ldr	r3, [pc, #448]	; (1bfd4 <xQueueReceive+0x350>)
   1be14:	4798      	blx	r3
   1be16:	0003      	movs	r3, r0
   1be18:	001a      	movs	r2, r3
   1be1a:	4b6d      	ldr	r3, [pc, #436]	; (1bfd0 <xQueueReceive+0x34c>)
   1be1c:	881b      	ldrh	r3, [r3, #0]
   1be1e:	4013      	ands	r3, r2
   1be20:	b29b      	uxth	r3, r3
   1be22:	2b00      	cmp	r3, #0
   1be24:	d01d      	beq.n	1be62 <xQueueReceive+0x1de>
   1be26:	6a3b      	ldr	r3, [r7, #32]
   1be28:	0018      	movs	r0, r3
   1be2a:	4b6b      	ldr	r3, [pc, #428]	; (1bfd8 <xQueueReceive+0x354>)
   1be2c:	4798      	blx	r3
   1be2e:	0003      	movs	r3, r0
   1be30:	001a      	movs	r2, r3
   1be32:	4b6a      	ldr	r3, [pc, #424]	; (1bfdc <xQueueReceive+0x358>)
   1be34:	5c9b      	ldrb	r3, [r3, r2]
   1be36:	3350      	adds	r3, #80	; 0x50
   1be38:	b2db      	uxtb	r3, r3
   1be3a:	001d      	movs	r5, r3
   1be3c:	6a3b      	ldr	r3, [r7, #32]
   1be3e:	0018      	movs	r0, r3
   1be40:	4b65      	ldr	r3, [pc, #404]	; (1bfd8 <xQueueReceive+0x354>)
   1be42:	4798      	blx	r3
   1be44:	0003      	movs	r3, r0
   1be46:	001a      	movs	r2, r3
   1be48:	4b64      	ldr	r3, [pc, #400]	; (1bfdc <xQueueReceive+0x358>)
   1be4a:	5c9c      	ldrb	r4, [r3, r2]
   1be4c:	6a3b      	ldr	r3, [r7, #32]
   1be4e:	0018      	movs	r0, r3
   1be50:	4b63      	ldr	r3, [pc, #396]	; (1bfe0 <xQueueReceive+0x35c>)
   1be52:	4798      	blx	r3
   1be54:	0003      	movs	r3, r0
   1be56:	b2db      	uxtb	r3, r3
   1be58:	001a      	movs	r2, r3
   1be5a:	0021      	movs	r1, r4
   1be5c:	0028      	movs	r0, r5
   1be5e:	4b61      	ldr	r3, [pc, #388]	; (1bfe4 <xQueueReceive+0x360>)
   1be60:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1be62:	2300      	movs	r3, #0
   1be64:	e120      	b.n	1c0a8 <xQueueReceive+0x424>
				}
				else if( xEntryTimeSet == pdFALSE )
   1be66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1be68:	2b00      	cmp	r3, #0
   1be6a:	d106      	bne.n	1be7a <xQueueReceive+0x1f6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1be6c:	2314      	movs	r3, #20
   1be6e:	18fb      	adds	r3, r7, r3
   1be70:	0018      	movs	r0, r3
   1be72:	4b62      	ldr	r3, [pc, #392]	; (1bffc <xQueueReceive+0x378>)
   1be74:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1be76:	2301      	movs	r3, #1
   1be78:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1be7a:	4b5f      	ldr	r3, [pc, #380]	; (1bff8 <xQueueReceive+0x374>)
   1be7c:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1be7e:	4b60      	ldr	r3, [pc, #384]	; (1c000 <xQueueReceive+0x37c>)
   1be80:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1be82:	4b4f      	ldr	r3, [pc, #316]	; (1bfc0 <xQueueReceive+0x33c>)
   1be84:	4798      	blx	r3
   1be86:	6a3b      	ldr	r3, [r7, #32]
   1be88:	2244      	movs	r2, #68	; 0x44
   1be8a:	5c9b      	ldrb	r3, [r3, r2]
   1be8c:	b25b      	sxtb	r3, r3
   1be8e:	3301      	adds	r3, #1
   1be90:	d103      	bne.n	1be9a <xQueueReceive+0x216>
   1be92:	6a3b      	ldr	r3, [r7, #32]
   1be94:	2244      	movs	r2, #68	; 0x44
   1be96:	2100      	movs	r1, #0
   1be98:	5499      	strb	r1, [r3, r2]
   1be9a:	6a3b      	ldr	r3, [r7, #32]
   1be9c:	2245      	movs	r2, #69	; 0x45
   1be9e:	5c9b      	ldrb	r3, [r3, r2]
   1bea0:	b25b      	sxtb	r3, r3
   1bea2:	3301      	adds	r3, #1
   1bea4:	d103      	bne.n	1beae <xQueueReceive+0x22a>
   1bea6:	6a3b      	ldr	r3, [r7, #32]
   1bea8:	2245      	movs	r2, #69	; 0x45
   1beaa:	2100      	movs	r1, #0
   1beac:	5499      	strb	r1, [r3, r2]
   1beae:	4b52      	ldr	r3, [pc, #328]	; (1bff8 <xQueueReceive+0x374>)
   1beb0:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1beb2:	1d3a      	adds	r2, r7, #4
   1beb4:	2314      	movs	r3, #20
   1beb6:	18fb      	adds	r3, r7, r3
   1beb8:	0011      	movs	r1, r2
   1beba:	0018      	movs	r0, r3
   1bebc:	4b51      	ldr	r3, [pc, #324]	; (1c004 <xQueueReceive+0x380>)
   1bebe:	4798      	blx	r3
   1bec0:	1e03      	subs	r3, r0, #0
   1bec2:	d000      	beq.n	1bec6 <xQueueReceive+0x242>
   1bec4:	e0aa      	b.n	1c01c <xQueueReceive+0x398>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1bec6:	6a3b      	ldr	r3, [r7, #32]
   1bec8:	0018      	movs	r0, r3
   1beca:	4b4f      	ldr	r3, [pc, #316]	; (1c008 <xQueueReceive+0x384>)
   1becc:	4798      	blx	r3
   1bece:	1e03      	subs	r3, r0, #0
   1bed0:	d06d      	beq.n	1bfae <xQueueReceive+0x32a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1bed2:	4b3d      	ldr	r3, [pc, #244]	; (1bfc8 <xQueueReceive+0x344>)
   1bed4:	4798      	blx	r3
   1bed6:	0003      	movs	r3, r0
   1bed8:	0018      	movs	r0, r3
   1beda:	4b3c      	ldr	r3, [pc, #240]	; (1bfcc <xQueueReceive+0x348>)
   1bedc:	4798      	blx	r3
   1bede:	0003      	movs	r3, r0
   1bee0:	001a      	movs	r2, r3
   1bee2:	4b3b      	ldr	r3, [pc, #236]	; (1bfd0 <xQueueReceive+0x34c>)
   1bee4:	881b      	ldrh	r3, [r3, #0]
   1bee6:	4013      	ands	r3, r2
   1bee8:	b29b      	uxth	r3, r3
   1beea:	2b00      	cmp	r3, #0
   1beec:	d029      	beq.n	1bf42 <xQueueReceive+0x2be>
   1beee:	6a3b      	ldr	r3, [r7, #32]
   1bef0:	0018      	movs	r0, r3
   1bef2:	4b38      	ldr	r3, [pc, #224]	; (1bfd4 <xQueueReceive+0x350>)
   1bef4:	4798      	blx	r3
   1bef6:	0003      	movs	r3, r0
   1bef8:	001a      	movs	r2, r3
   1befa:	4b35      	ldr	r3, [pc, #212]	; (1bfd0 <xQueueReceive+0x34c>)
   1befc:	881b      	ldrh	r3, [r3, #0]
   1befe:	4013      	ands	r3, r2
   1bf00:	b29b      	uxth	r3, r3
   1bf02:	2b00      	cmp	r3, #0
   1bf04:	d01d      	beq.n	1bf42 <xQueueReceive+0x2be>
   1bf06:	6a3b      	ldr	r3, [r7, #32]
   1bf08:	0018      	movs	r0, r3
   1bf0a:	4b33      	ldr	r3, [pc, #204]	; (1bfd8 <xQueueReceive+0x354>)
   1bf0c:	4798      	blx	r3
   1bf0e:	0003      	movs	r3, r0
   1bf10:	001a      	movs	r2, r3
   1bf12:	4b32      	ldr	r3, [pc, #200]	; (1bfdc <xQueueReceive+0x358>)
   1bf14:	5c9b      	ldrb	r3, [r3, r2]
   1bf16:	3368      	adds	r3, #104	; 0x68
   1bf18:	b2db      	uxtb	r3, r3
   1bf1a:	001d      	movs	r5, r3
   1bf1c:	6a3b      	ldr	r3, [r7, #32]
   1bf1e:	0018      	movs	r0, r3
   1bf20:	4b2d      	ldr	r3, [pc, #180]	; (1bfd8 <xQueueReceive+0x354>)
   1bf22:	4798      	blx	r3
   1bf24:	0003      	movs	r3, r0
   1bf26:	001a      	movs	r2, r3
   1bf28:	4b2c      	ldr	r3, [pc, #176]	; (1bfdc <xQueueReceive+0x358>)
   1bf2a:	5c9c      	ldrb	r4, [r3, r2]
   1bf2c:	6a3b      	ldr	r3, [r7, #32]
   1bf2e:	0018      	movs	r0, r3
   1bf30:	4b2b      	ldr	r3, [pc, #172]	; (1bfe0 <xQueueReceive+0x35c>)
   1bf32:	4798      	blx	r3
   1bf34:	0003      	movs	r3, r0
   1bf36:	b2db      	uxtb	r3, r3
   1bf38:	001a      	movs	r2, r3
   1bf3a:	0021      	movs	r1, r4
   1bf3c:	0028      	movs	r0, r5
   1bf3e:	4b29      	ldr	r3, [pc, #164]	; (1bfe4 <xQueueReceive+0x360>)
   1bf40:	4798      	blx	r3
   1bf42:	6a3b      	ldr	r3, [r7, #32]
   1bf44:	0018      	movs	r0, r3
   1bf46:	4b24      	ldr	r3, [pc, #144]	; (1bfd8 <xQueueReceive+0x354>)
   1bf48:	4798      	blx	r3
   1bf4a:	0003      	movs	r3, r0
   1bf4c:	001a      	movs	r2, r3
   1bf4e:	4b23      	ldr	r3, [pc, #140]	; (1bfdc <xQueueReceive+0x358>)
   1bf50:	5c9b      	ldrb	r3, [r3, r2]
   1bf52:	2b02      	cmp	r3, #2
   1bf54:	d018      	beq.n	1bf88 <xQueueReceive+0x304>
   1bf56:	4b1c      	ldr	r3, [pc, #112]	; (1bfc8 <xQueueReceive+0x344>)
   1bf58:	4798      	blx	r3
   1bf5a:	0003      	movs	r3, r0
   1bf5c:	0018      	movs	r0, r3
   1bf5e:	4b1b      	ldr	r3, [pc, #108]	; (1bfcc <xQueueReceive+0x348>)
   1bf60:	4798      	blx	r3
   1bf62:	0003      	movs	r3, r0
   1bf64:	001a      	movs	r2, r3
   1bf66:	4b1a      	ldr	r3, [pc, #104]	; (1bfd0 <xQueueReceive+0x34c>)
   1bf68:	881b      	ldrh	r3, [r3, #0]
   1bf6a:	4013      	ands	r3, r2
   1bf6c:	b29b      	uxth	r3, r3
   1bf6e:	2b00      	cmp	r3, #0
   1bf70:	d00a      	beq.n	1bf88 <xQueueReceive+0x304>
   1bf72:	4b15      	ldr	r3, [pc, #84]	; (1bfc8 <xQueueReceive+0x344>)
   1bf74:	4798      	blx	r3
   1bf76:	0003      	movs	r3, r0
   1bf78:	0018      	movs	r0, r3
   1bf7a:	4b1b      	ldr	r3, [pc, #108]	; (1bfe8 <xQueueReceive+0x364>)
   1bf7c:	4798      	blx	r3
   1bf7e:	0003      	movs	r3, r0
   1bf80:	b2db      	uxtb	r3, r3
   1bf82:	0018      	movs	r0, r3
   1bf84:	4b21      	ldr	r3, [pc, #132]	; (1c00c <xQueueReceive+0x388>)
   1bf86:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1bf88:	6a3b      	ldr	r3, [r7, #32]
   1bf8a:	3324      	adds	r3, #36	; 0x24
   1bf8c:	687a      	ldr	r2, [r7, #4]
   1bf8e:	0011      	movs	r1, r2
   1bf90:	0018      	movs	r0, r3
   1bf92:	4b1f      	ldr	r3, [pc, #124]	; (1c010 <xQueueReceive+0x38c>)
   1bf94:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1bf96:	6a3b      	ldr	r3, [r7, #32]
   1bf98:	0018      	movs	r0, r3
   1bf9a:	4b1e      	ldr	r3, [pc, #120]	; (1c014 <xQueueReceive+0x390>)
   1bf9c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1bf9e:	4b1e      	ldr	r3, [pc, #120]	; (1c018 <xQueueReceive+0x394>)
   1bfa0:	4798      	blx	r3
   1bfa2:	1e03      	subs	r3, r0, #0
   1bfa4:	d000      	beq.n	1bfa8 <xQueueReceive+0x324>
   1bfa6:	e698      	b.n	1bcda <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
   1bfa8:	4b12      	ldr	r3, [pc, #72]	; (1bff4 <xQueueReceive+0x370>)
   1bfaa:	4798      	blx	r3
   1bfac:	e695      	b.n	1bcda <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   1bfae:	6a3b      	ldr	r3, [r7, #32]
   1bfb0:	0018      	movs	r0, r3
   1bfb2:	4b18      	ldr	r3, [pc, #96]	; (1c014 <xQueueReceive+0x390>)
   1bfb4:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1bfb6:	4b18      	ldr	r3, [pc, #96]	; (1c018 <xQueueReceive+0x394>)
   1bfb8:	4798      	blx	r3
   1bfba:	e68e      	b.n	1bcda <xQueueReceive+0x56>
   1bfbc:	0001db59 	.word	0x0001db59
   1bfc0:	0001ae39 	.word	0x0001ae39
   1bfc4:	0001c6e5 	.word	0x0001c6e5
   1bfc8:	000190cd 	.word	0x000190cd
   1bfcc:	00018e31 	.word	0x00018e31
   1bfd0:	20000110 	.word	0x20000110
   1bfd4:	00018ef1 	.word	0x00018ef1
   1bfd8:	00018df1 	.word	0x00018df1
   1bfdc:	20000104 	.word	0x20000104
   1bfe0:	00018ed1 	.word	0x00018ed1
   1bfe4:	00019829 	.word	0x00019829
   1bfe8:	00018e11 	.word	0x00018e11
   1bfec:	00019e85 	.word	0x00019e85
   1bff0:	0001d6c9 	.word	0x0001d6c9
   1bff4:	0001ae21 	.word	0x0001ae21
   1bff8:	0001ae5d 	.word	0x0001ae5d
   1bffc:	0001d809 	.word	0x0001d809
   1c000:	0001d0f1 	.word	0x0001d0f1
   1c004:	0001d831 	.word	0x0001d831
   1c008:	0001c825 	.word	0x0001c825
   1c00c:	00019fc1 	.word	0x00019fc1
   1c010:	0001d5a5 	.word	0x0001d5a5
   1c014:	0001c735 	.word	0x0001c735
   1c018:	0001d109 	.word	0x0001d109
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   1c01c:	6a3b      	ldr	r3, [r7, #32]
   1c01e:	0018      	movs	r0, r3
   1c020:	4b23      	ldr	r3, [pc, #140]	; (1c0b0 <xQueueReceive+0x42c>)
   1c022:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1c024:	4b23      	ldr	r3, [pc, #140]	; (1c0b4 <xQueueReceive+0x430>)
   1c026:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1c028:	6a3b      	ldr	r3, [r7, #32]
   1c02a:	0018      	movs	r0, r3
   1c02c:	4b22      	ldr	r3, [pc, #136]	; (1c0b8 <xQueueReceive+0x434>)
   1c02e:	4798      	blx	r3
   1c030:	1e03      	subs	r3, r0, #0
   1c032:	d100      	bne.n	1c036 <xQueueReceive+0x3b2>
   1c034:	e651      	b.n	1bcda <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1c036:	4b21      	ldr	r3, [pc, #132]	; (1c0bc <xQueueReceive+0x438>)
   1c038:	4798      	blx	r3
   1c03a:	0003      	movs	r3, r0
   1c03c:	0018      	movs	r0, r3
   1c03e:	4b20      	ldr	r3, [pc, #128]	; (1c0c0 <xQueueReceive+0x43c>)
   1c040:	4798      	blx	r3
   1c042:	0003      	movs	r3, r0
   1c044:	001a      	movs	r2, r3
   1c046:	4b1f      	ldr	r3, [pc, #124]	; (1c0c4 <xQueueReceive+0x440>)
   1c048:	881b      	ldrh	r3, [r3, #0]
   1c04a:	4013      	ands	r3, r2
   1c04c:	b29b      	uxth	r3, r3
   1c04e:	2b00      	cmp	r3, #0
   1c050:	d029      	beq.n	1c0a6 <xQueueReceive+0x422>
   1c052:	6a3b      	ldr	r3, [r7, #32]
   1c054:	0018      	movs	r0, r3
   1c056:	4b1c      	ldr	r3, [pc, #112]	; (1c0c8 <xQueueReceive+0x444>)
   1c058:	4798      	blx	r3
   1c05a:	0003      	movs	r3, r0
   1c05c:	001a      	movs	r2, r3
   1c05e:	4b19      	ldr	r3, [pc, #100]	; (1c0c4 <xQueueReceive+0x440>)
   1c060:	881b      	ldrh	r3, [r3, #0]
   1c062:	4013      	ands	r3, r2
   1c064:	b29b      	uxth	r3, r3
   1c066:	2b00      	cmp	r3, #0
   1c068:	d01d      	beq.n	1c0a6 <xQueueReceive+0x422>
   1c06a:	6a3b      	ldr	r3, [r7, #32]
   1c06c:	0018      	movs	r0, r3
   1c06e:	4b17      	ldr	r3, [pc, #92]	; (1c0cc <xQueueReceive+0x448>)
   1c070:	4798      	blx	r3
   1c072:	0003      	movs	r3, r0
   1c074:	001a      	movs	r2, r3
   1c076:	4b16      	ldr	r3, [pc, #88]	; (1c0d0 <xQueueReceive+0x44c>)
   1c078:	5c9b      	ldrb	r3, [r3, r2]
   1c07a:	3350      	adds	r3, #80	; 0x50
   1c07c:	b2db      	uxtb	r3, r3
   1c07e:	001d      	movs	r5, r3
   1c080:	6a3b      	ldr	r3, [r7, #32]
   1c082:	0018      	movs	r0, r3
   1c084:	4b11      	ldr	r3, [pc, #68]	; (1c0cc <xQueueReceive+0x448>)
   1c086:	4798      	blx	r3
   1c088:	0003      	movs	r3, r0
   1c08a:	001a      	movs	r2, r3
   1c08c:	4b10      	ldr	r3, [pc, #64]	; (1c0d0 <xQueueReceive+0x44c>)
   1c08e:	5c9c      	ldrb	r4, [r3, r2]
   1c090:	6a3b      	ldr	r3, [r7, #32]
   1c092:	0018      	movs	r0, r3
   1c094:	4b0f      	ldr	r3, [pc, #60]	; (1c0d4 <xQueueReceive+0x450>)
   1c096:	4798      	blx	r3
   1c098:	0003      	movs	r3, r0
   1c09a:	b2db      	uxtb	r3, r3
   1c09c:	001a      	movs	r2, r3
   1c09e:	0021      	movs	r1, r4
   1c0a0:	0028      	movs	r0, r5
   1c0a2:	4b0d      	ldr	r3, [pc, #52]	; (1c0d8 <xQueueReceive+0x454>)
   1c0a4:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1c0a6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1c0a8:	0018      	movs	r0, r3
   1c0aa:	46bd      	mov	sp, r7
   1c0ac:	b00a      	add	sp, #40	; 0x28
   1c0ae:	bdb0      	pop	{r4, r5, r7, pc}
   1c0b0:	0001c735 	.word	0x0001c735
   1c0b4:	0001d109 	.word	0x0001d109
   1c0b8:	0001c825 	.word	0x0001c825
   1c0bc:	000190cd 	.word	0x000190cd
   1c0c0:	00018e31 	.word	0x00018e31
   1c0c4:	20000110 	.word	0x20000110
   1c0c8:	00018ef1 	.word	0x00018ef1
   1c0cc:	00018df1 	.word	0x00018df1
   1c0d0:	20000104 	.word	0x20000104
   1c0d4:	00018ed1 	.word	0x00018ed1
   1c0d8:	00019829 	.word	0x00019829

0001c0dc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
   1c0dc:	b5b0      	push	{r4, r5, r7, lr}
   1c0de:	b08a      	sub	sp, #40	; 0x28
   1c0e0:	af00      	add	r7, sp, #0
   1c0e2:	6078      	str	r0, [r7, #4]
   1c0e4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   1c0e6:	2300      	movs	r3, #0
   1c0e8:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1c0ea:	687b      	ldr	r3, [r7, #4]
   1c0ec:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
   1c0ee:	2300      	movs	r3, #0
   1c0f0:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1c0f2:	69fb      	ldr	r3, [r7, #28]
   1c0f4:	2b00      	cmp	r3, #0
   1c0f6:	d101      	bne.n	1c0fc <xQueueSemaphoreTake+0x20>
   1c0f8:	b672      	cpsid	i
   1c0fa:	e7fe      	b.n	1c0fa <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1c0fc:	69fb      	ldr	r3, [r7, #28]
   1c0fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c100:	2b00      	cmp	r3, #0
   1c102:	d001      	beq.n	1c108 <xQueueSemaphoreTake+0x2c>
   1c104:	b672      	cpsid	i
   1c106:	e7fe      	b.n	1c106 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1c108:	4bcb      	ldr	r3, [pc, #812]	; (1c438 <xQueueSemaphoreTake+0x35c>)
   1c10a:	4798      	blx	r3
   1c10c:	1e03      	subs	r3, r0, #0
   1c10e:	d102      	bne.n	1c116 <xQueueSemaphoreTake+0x3a>
   1c110:	683b      	ldr	r3, [r7, #0]
   1c112:	2b00      	cmp	r3, #0
   1c114:	d101      	bne.n	1c11a <xQueueSemaphoreTake+0x3e>
   1c116:	2301      	movs	r3, #1
   1c118:	e000      	b.n	1c11c <xQueueSemaphoreTake+0x40>
   1c11a:	2300      	movs	r3, #0
   1c11c:	2b00      	cmp	r3, #0
   1c11e:	d101      	bne.n	1c124 <xQueueSemaphoreTake+0x48>
   1c120:	b672      	cpsid	i
   1c122:	e7fe      	b.n	1c122 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1c124:	4bc5      	ldr	r3, [pc, #788]	; (1c43c <xQueueSemaphoreTake+0x360>)
   1c126:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   1c128:	69fb      	ldr	r3, [r7, #28]
   1c12a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c12c:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   1c12e:	69bb      	ldr	r3, [r7, #24]
   1c130:	2b00      	cmp	r3, #0
   1c132:	d100      	bne.n	1c136 <xQueueSemaphoreTake+0x5a>
   1c134:	e080      	b.n	1c238 <xQueueSemaphoreTake+0x15c>
			{
				traceQUEUE_RECEIVE( pxQueue );
   1c136:	4bc2      	ldr	r3, [pc, #776]	; (1c440 <xQueueSemaphoreTake+0x364>)
   1c138:	4798      	blx	r3
   1c13a:	0003      	movs	r3, r0
   1c13c:	0018      	movs	r0, r3
   1c13e:	4bc1      	ldr	r3, [pc, #772]	; (1c444 <xQueueSemaphoreTake+0x368>)
   1c140:	4798      	blx	r3
   1c142:	0003      	movs	r3, r0
   1c144:	001a      	movs	r2, r3
   1c146:	4bc0      	ldr	r3, [pc, #768]	; (1c448 <xQueueSemaphoreTake+0x36c>)
   1c148:	881b      	ldrh	r3, [r3, #0]
   1c14a:	4013      	ands	r3, r2
   1c14c:	b29b      	uxth	r3, r3
   1c14e:	2b00      	cmp	r3, #0
   1c150:	d029      	beq.n	1c1a6 <xQueueSemaphoreTake+0xca>
   1c152:	69fb      	ldr	r3, [r7, #28]
   1c154:	0018      	movs	r0, r3
   1c156:	4bbd      	ldr	r3, [pc, #756]	; (1c44c <xQueueSemaphoreTake+0x370>)
   1c158:	4798      	blx	r3
   1c15a:	0003      	movs	r3, r0
   1c15c:	001a      	movs	r2, r3
   1c15e:	4bba      	ldr	r3, [pc, #744]	; (1c448 <xQueueSemaphoreTake+0x36c>)
   1c160:	881b      	ldrh	r3, [r3, #0]
   1c162:	4013      	ands	r3, r2
   1c164:	b29b      	uxth	r3, r3
   1c166:	2b00      	cmp	r3, #0
   1c168:	d01d      	beq.n	1c1a6 <xQueueSemaphoreTake+0xca>
   1c16a:	69fb      	ldr	r3, [r7, #28]
   1c16c:	0018      	movs	r0, r3
   1c16e:	4bb8      	ldr	r3, [pc, #736]	; (1c450 <xQueueSemaphoreTake+0x374>)
   1c170:	4798      	blx	r3
   1c172:	0003      	movs	r3, r0
   1c174:	001a      	movs	r2, r3
   1c176:	4bb7      	ldr	r3, [pc, #732]	; (1c454 <xQueueSemaphoreTake+0x378>)
   1c178:	5c9b      	ldrb	r3, [r3, r2]
   1c17a:	3328      	adds	r3, #40	; 0x28
   1c17c:	b2db      	uxtb	r3, r3
   1c17e:	001d      	movs	r5, r3
   1c180:	69fb      	ldr	r3, [r7, #28]
   1c182:	0018      	movs	r0, r3
   1c184:	4bb2      	ldr	r3, [pc, #712]	; (1c450 <xQueueSemaphoreTake+0x374>)
   1c186:	4798      	blx	r3
   1c188:	0003      	movs	r3, r0
   1c18a:	001a      	movs	r2, r3
   1c18c:	4bb1      	ldr	r3, [pc, #708]	; (1c454 <xQueueSemaphoreTake+0x378>)
   1c18e:	5c9c      	ldrb	r4, [r3, r2]
   1c190:	69fb      	ldr	r3, [r7, #28]
   1c192:	0018      	movs	r0, r3
   1c194:	4bb0      	ldr	r3, [pc, #704]	; (1c458 <xQueueSemaphoreTake+0x37c>)
   1c196:	4798      	blx	r3
   1c198:	0003      	movs	r3, r0
   1c19a:	b2db      	uxtb	r3, r3
   1c19c:	001a      	movs	r2, r3
   1c19e:	0021      	movs	r1, r4
   1c1a0:	0028      	movs	r0, r5
   1c1a2:	4bae      	ldr	r3, [pc, #696]	; (1c45c <xQueueSemaphoreTake+0x380>)
   1c1a4:	4798      	blx	r3
   1c1a6:	69fb      	ldr	r3, [r7, #28]
   1c1a8:	0018      	movs	r0, r3
   1c1aa:	4ba9      	ldr	r3, [pc, #676]	; (1c450 <xQueueSemaphoreTake+0x374>)
   1c1ac:	4798      	blx	r3
   1c1ae:	0003      	movs	r3, r0
   1c1b0:	001a      	movs	r2, r3
   1c1b2:	4ba8      	ldr	r3, [pc, #672]	; (1c454 <xQueueSemaphoreTake+0x378>)
   1c1b4:	5c9c      	ldrb	r4, [r3, r2]
   1c1b6:	69fb      	ldr	r3, [r7, #28]
   1c1b8:	0018      	movs	r0, r3
   1c1ba:	4ba7      	ldr	r3, [pc, #668]	; (1c458 <xQueueSemaphoreTake+0x37c>)
   1c1bc:	4798      	blx	r3
   1c1be:	0003      	movs	r3, r0
   1c1c0:	b2dd      	uxtb	r5, r3
   1c1c2:	69fb      	ldr	r3, [r7, #28]
   1c1c4:	0018      	movs	r0, r3
   1c1c6:	4ba2      	ldr	r3, [pc, #648]	; (1c450 <xQueueSemaphoreTake+0x374>)
   1c1c8:	4798      	blx	r3
   1c1ca:	0003      	movs	r3, r0
   1c1cc:	001a      	movs	r2, r3
   1c1ce:	4ba1      	ldr	r3, [pc, #644]	; (1c454 <xQueueSemaphoreTake+0x378>)
   1c1d0:	5c9b      	ldrb	r3, [r3, r2]
   1c1d2:	2b02      	cmp	r3, #2
   1c1d4:	d108      	bne.n	1c1e8 <xQueueSemaphoreTake+0x10c>
   1c1d6:	4b9a      	ldr	r3, [pc, #616]	; (1c440 <xQueueSemaphoreTake+0x364>)
   1c1d8:	4798      	blx	r3
   1c1da:	0003      	movs	r3, r0
   1c1dc:	0018      	movs	r0, r3
   1c1de:	4ba0      	ldr	r3, [pc, #640]	; (1c460 <xQueueSemaphoreTake+0x384>)
   1c1e0:	4798      	blx	r3
   1c1e2:	0003      	movs	r3, r0
   1c1e4:	b2db      	uxtb	r3, r3
   1c1e6:	e004      	b.n	1c1f2 <xQueueSemaphoreTake+0x116>
   1c1e8:	69fb      	ldr	r3, [r7, #28]
   1c1ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c1ec:	b2db      	uxtb	r3, r3
   1c1ee:	3b01      	subs	r3, #1
   1c1f0:	b2db      	uxtb	r3, r3
   1c1f2:	001a      	movs	r2, r3
   1c1f4:	0029      	movs	r1, r5
   1c1f6:	0020      	movs	r0, r4
   1c1f8:	4b9a      	ldr	r3, [pc, #616]	; (1c464 <xQueueSemaphoreTake+0x388>)
   1c1fa:	4798      	blx	r3

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   1c1fc:	69bb      	ldr	r3, [r7, #24]
   1c1fe:	1e5a      	subs	r2, r3, #1
   1c200:	69fb      	ldr	r3, [r7, #28]
   1c202:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1c204:	69fb      	ldr	r3, [r7, #28]
   1c206:	681b      	ldr	r3, [r3, #0]
   1c208:	2b00      	cmp	r3, #0
   1c20a:	d104      	bne.n	1c216 <xQueueSemaphoreTake+0x13a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   1c20c:	4b96      	ldr	r3, [pc, #600]	; (1c468 <xQueueSemaphoreTake+0x38c>)
   1c20e:	4798      	blx	r3
   1c210:	0002      	movs	r2, r0
   1c212:	69fb      	ldr	r3, [r7, #28]
   1c214:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1c216:	69fb      	ldr	r3, [r7, #28]
   1c218:	691b      	ldr	r3, [r3, #16]
   1c21a:	2b00      	cmp	r3, #0
   1c21c:	d008      	beq.n	1c230 <xQueueSemaphoreTake+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1c21e:	69fb      	ldr	r3, [r7, #28]
   1c220:	3310      	adds	r3, #16
   1c222:	0018      	movs	r0, r3
   1c224:	4b91      	ldr	r3, [pc, #580]	; (1c46c <xQueueSemaphoreTake+0x390>)
   1c226:	4798      	blx	r3
   1c228:	1e03      	subs	r3, r0, #0
   1c22a:	d001      	beq.n	1c230 <xQueueSemaphoreTake+0x154>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1c22c:	4b90      	ldr	r3, [pc, #576]	; (1c470 <xQueueSemaphoreTake+0x394>)
   1c22e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1c230:	4b90      	ldr	r3, [pc, #576]	; (1c474 <xQueueSemaphoreTake+0x398>)
   1c232:	4798      	blx	r3
				return pdPASS;
   1c234:	2301      	movs	r3, #1
   1c236:	e18b      	b.n	1c550 <xQueueSemaphoreTake+0x474>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1c238:	683b      	ldr	r3, [r7, #0]
   1c23a:	2b00      	cmp	r3, #0
   1c23c:	d140      	bne.n	1c2c0 <xQueueSemaphoreTake+0x1e4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
   1c23e:	6a3b      	ldr	r3, [r7, #32]
   1c240:	2b00      	cmp	r3, #0
   1c242:	d001      	beq.n	1c248 <xQueueSemaphoreTake+0x16c>
   1c244:	b672      	cpsid	i
   1c246:	e7fe      	b.n	1c246 <xQueueSemaphoreTake+0x16a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
   1c248:	4b8a      	ldr	r3, [pc, #552]	; (1c474 <xQueueSemaphoreTake+0x398>)
   1c24a:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1c24c:	4b7c      	ldr	r3, [pc, #496]	; (1c440 <xQueueSemaphoreTake+0x364>)
   1c24e:	4798      	blx	r3
   1c250:	0003      	movs	r3, r0
   1c252:	0018      	movs	r0, r3
   1c254:	4b7b      	ldr	r3, [pc, #492]	; (1c444 <xQueueSemaphoreTake+0x368>)
   1c256:	4798      	blx	r3
   1c258:	0003      	movs	r3, r0
   1c25a:	001a      	movs	r2, r3
   1c25c:	4b7a      	ldr	r3, [pc, #488]	; (1c448 <xQueueSemaphoreTake+0x36c>)
   1c25e:	881b      	ldrh	r3, [r3, #0]
   1c260:	4013      	ands	r3, r2
   1c262:	b29b      	uxth	r3, r3
   1c264:	2b00      	cmp	r3, #0
   1c266:	d029      	beq.n	1c2bc <xQueueSemaphoreTake+0x1e0>
   1c268:	69fb      	ldr	r3, [r7, #28]
   1c26a:	0018      	movs	r0, r3
   1c26c:	4b77      	ldr	r3, [pc, #476]	; (1c44c <xQueueSemaphoreTake+0x370>)
   1c26e:	4798      	blx	r3
   1c270:	0003      	movs	r3, r0
   1c272:	001a      	movs	r2, r3
   1c274:	4b74      	ldr	r3, [pc, #464]	; (1c448 <xQueueSemaphoreTake+0x36c>)
   1c276:	881b      	ldrh	r3, [r3, #0]
   1c278:	4013      	ands	r3, r2
   1c27a:	b29b      	uxth	r3, r3
   1c27c:	2b00      	cmp	r3, #0
   1c27e:	d01d      	beq.n	1c2bc <xQueueSemaphoreTake+0x1e0>
   1c280:	69fb      	ldr	r3, [r7, #28]
   1c282:	0018      	movs	r0, r3
   1c284:	4b72      	ldr	r3, [pc, #456]	; (1c450 <xQueueSemaphoreTake+0x374>)
   1c286:	4798      	blx	r3
   1c288:	0003      	movs	r3, r0
   1c28a:	001a      	movs	r2, r3
   1c28c:	4b71      	ldr	r3, [pc, #452]	; (1c454 <xQueueSemaphoreTake+0x378>)
   1c28e:	5c9b      	ldrb	r3, [r3, r2]
   1c290:	3350      	adds	r3, #80	; 0x50
   1c292:	b2db      	uxtb	r3, r3
   1c294:	001d      	movs	r5, r3
   1c296:	69fb      	ldr	r3, [r7, #28]
   1c298:	0018      	movs	r0, r3
   1c29a:	4b6d      	ldr	r3, [pc, #436]	; (1c450 <xQueueSemaphoreTake+0x374>)
   1c29c:	4798      	blx	r3
   1c29e:	0003      	movs	r3, r0
   1c2a0:	001a      	movs	r2, r3
   1c2a2:	4b6c      	ldr	r3, [pc, #432]	; (1c454 <xQueueSemaphoreTake+0x378>)
   1c2a4:	5c9c      	ldrb	r4, [r3, r2]
   1c2a6:	69fb      	ldr	r3, [r7, #28]
   1c2a8:	0018      	movs	r0, r3
   1c2aa:	4b6b      	ldr	r3, [pc, #428]	; (1c458 <xQueueSemaphoreTake+0x37c>)
   1c2ac:	4798      	blx	r3
   1c2ae:	0003      	movs	r3, r0
   1c2b0:	b2db      	uxtb	r3, r3
   1c2b2:	001a      	movs	r2, r3
   1c2b4:	0021      	movs	r1, r4
   1c2b6:	0028      	movs	r0, r5
   1c2b8:	4b68      	ldr	r3, [pc, #416]	; (1c45c <xQueueSemaphoreTake+0x380>)
   1c2ba:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1c2bc:	2300      	movs	r3, #0
   1c2be:	e147      	b.n	1c550 <xQueueSemaphoreTake+0x474>
				}
				else if( xEntryTimeSet == pdFALSE )
   1c2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c2c2:	2b00      	cmp	r3, #0
   1c2c4:	d106      	bne.n	1c2d4 <xQueueSemaphoreTake+0x1f8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1c2c6:	230c      	movs	r3, #12
   1c2c8:	18fb      	adds	r3, r7, r3
   1c2ca:	0018      	movs	r0, r3
   1c2cc:	4b6a      	ldr	r3, [pc, #424]	; (1c478 <xQueueSemaphoreTake+0x39c>)
   1c2ce:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1c2d0:	2301      	movs	r3, #1
   1c2d2:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1c2d4:	4b67      	ldr	r3, [pc, #412]	; (1c474 <xQueueSemaphoreTake+0x398>)
   1c2d6:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
   1c2d8:	4b68      	ldr	r3, [pc, #416]	; (1c47c <xQueueSemaphoreTake+0x3a0>)
   1c2da:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1c2dc:	4b57      	ldr	r3, [pc, #348]	; (1c43c <xQueueSemaphoreTake+0x360>)
   1c2de:	4798      	blx	r3
   1c2e0:	69fb      	ldr	r3, [r7, #28]
   1c2e2:	2244      	movs	r2, #68	; 0x44
   1c2e4:	5c9b      	ldrb	r3, [r3, r2]
   1c2e6:	b25b      	sxtb	r3, r3
   1c2e8:	3301      	adds	r3, #1
   1c2ea:	d103      	bne.n	1c2f4 <xQueueSemaphoreTake+0x218>
   1c2ec:	69fb      	ldr	r3, [r7, #28]
   1c2ee:	2244      	movs	r2, #68	; 0x44
   1c2f0:	2100      	movs	r1, #0
   1c2f2:	5499      	strb	r1, [r3, r2]
   1c2f4:	69fb      	ldr	r3, [r7, #28]
   1c2f6:	2245      	movs	r2, #69	; 0x45
   1c2f8:	5c9b      	ldrb	r3, [r3, r2]
   1c2fa:	b25b      	sxtb	r3, r3
   1c2fc:	3301      	adds	r3, #1
   1c2fe:	d103      	bne.n	1c308 <xQueueSemaphoreTake+0x22c>
   1c300:	69fb      	ldr	r3, [r7, #28]
   1c302:	2245      	movs	r2, #69	; 0x45
   1c304:	2100      	movs	r1, #0
   1c306:	5499      	strb	r1, [r3, r2]
   1c308:	4b5a      	ldr	r3, [pc, #360]	; (1c474 <xQueueSemaphoreTake+0x398>)
   1c30a:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1c30c:	003a      	movs	r2, r7
   1c30e:	230c      	movs	r3, #12
   1c310:	18fb      	adds	r3, r7, r3
   1c312:	0011      	movs	r1, r2
   1c314:	0018      	movs	r0, r3
   1c316:	4b5a      	ldr	r3, [pc, #360]	; (1c480 <xQueueSemaphoreTake+0x3a4>)
   1c318:	4798      	blx	r3
   1c31a:	1e03      	subs	r3, r0, #0
   1c31c:	d000      	beq.n	1c320 <xQueueSemaphoreTake+0x244>
   1c31e:	e0bd      	b.n	1c49c <xQueueSemaphoreTake+0x3c0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1c320:	69fb      	ldr	r3, [r7, #28]
   1c322:	0018      	movs	r0, r3
   1c324:	4b57      	ldr	r3, [pc, #348]	; (1c484 <xQueueSemaphoreTake+0x3a8>)
   1c326:	4798      	blx	r3
   1c328:	1e03      	subs	r3, r0, #0
   1c32a:	d100      	bne.n	1c32e <xQueueSemaphoreTake+0x252>
   1c32c:	e07c      	b.n	1c428 <xQueueSemaphoreTake+0x34c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1c32e:	4b44      	ldr	r3, [pc, #272]	; (1c440 <xQueueSemaphoreTake+0x364>)
   1c330:	4798      	blx	r3
   1c332:	0003      	movs	r3, r0
   1c334:	0018      	movs	r0, r3
   1c336:	4b43      	ldr	r3, [pc, #268]	; (1c444 <xQueueSemaphoreTake+0x368>)
   1c338:	4798      	blx	r3
   1c33a:	0003      	movs	r3, r0
   1c33c:	001a      	movs	r2, r3
   1c33e:	4b42      	ldr	r3, [pc, #264]	; (1c448 <xQueueSemaphoreTake+0x36c>)
   1c340:	881b      	ldrh	r3, [r3, #0]
   1c342:	4013      	ands	r3, r2
   1c344:	b29b      	uxth	r3, r3
   1c346:	2b00      	cmp	r3, #0
   1c348:	d029      	beq.n	1c39e <xQueueSemaphoreTake+0x2c2>
   1c34a:	69fb      	ldr	r3, [r7, #28]
   1c34c:	0018      	movs	r0, r3
   1c34e:	4b3f      	ldr	r3, [pc, #252]	; (1c44c <xQueueSemaphoreTake+0x370>)
   1c350:	4798      	blx	r3
   1c352:	0003      	movs	r3, r0
   1c354:	001a      	movs	r2, r3
   1c356:	4b3c      	ldr	r3, [pc, #240]	; (1c448 <xQueueSemaphoreTake+0x36c>)
   1c358:	881b      	ldrh	r3, [r3, #0]
   1c35a:	4013      	ands	r3, r2
   1c35c:	b29b      	uxth	r3, r3
   1c35e:	2b00      	cmp	r3, #0
   1c360:	d01d      	beq.n	1c39e <xQueueSemaphoreTake+0x2c2>
   1c362:	69fb      	ldr	r3, [r7, #28]
   1c364:	0018      	movs	r0, r3
   1c366:	4b3a      	ldr	r3, [pc, #232]	; (1c450 <xQueueSemaphoreTake+0x374>)
   1c368:	4798      	blx	r3
   1c36a:	0003      	movs	r3, r0
   1c36c:	001a      	movs	r2, r3
   1c36e:	4b39      	ldr	r3, [pc, #228]	; (1c454 <xQueueSemaphoreTake+0x378>)
   1c370:	5c9b      	ldrb	r3, [r3, r2]
   1c372:	3368      	adds	r3, #104	; 0x68
   1c374:	b2db      	uxtb	r3, r3
   1c376:	001d      	movs	r5, r3
   1c378:	69fb      	ldr	r3, [r7, #28]
   1c37a:	0018      	movs	r0, r3
   1c37c:	4b34      	ldr	r3, [pc, #208]	; (1c450 <xQueueSemaphoreTake+0x374>)
   1c37e:	4798      	blx	r3
   1c380:	0003      	movs	r3, r0
   1c382:	001a      	movs	r2, r3
   1c384:	4b33      	ldr	r3, [pc, #204]	; (1c454 <xQueueSemaphoreTake+0x378>)
   1c386:	5c9c      	ldrb	r4, [r3, r2]
   1c388:	69fb      	ldr	r3, [r7, #28]
   1c38a:	0018      	movs	r0, r3
   1c38c:	4b32      	ldr	r3, [pc, #200]	; (1c458 <xQueueSemaphoreTake+0x37c>)
   1c38e:	4798      	blx	r3
   1c390:	0003      	movs	r3, r0
   1c392:	b2db      	uxtb	r3, r3
   1c394:	001a      	movs	r2, r3
   1c396:	0021      	movs	r1, r4
   1c398:	0028      	movs	r0, r5
   1c39a:	4b30      	ldr	r3, [pc, #192]	; (1c45c <xQueueSemaphoreTake+0x380>)
   1c39c:	4798      	blx	r3
   1c39e:	69fb      	ldr	r3, [r7, #28]
   1c3a0:	0018      	movs	r0, r3
   1c3a2:	4b2b      	ldr	r3, [pc, #172]	; (1c450 <xQueueSemaphoreTake+0x374>)
   1c3a4:	4798      	blx	r3
   1c3a6:	0003      	movs	r3, r0
   1c3a8:	001a      	movs	r2, r3
   1c3aa:	4b2a      	ldr	r3, [pc, #168]	; (1c454 <xQueueSemaphoreTake+0x378>)
   1c3ac:	5c9b      	ldrb	r3, [r3, r2]
   1c3ae:	2b02      	cmp	r3, #2
   1c3b0:	d018      	beq.n	1c3e4 <xQueueSemaphoreTake+0x308>
   1c3b2:	4b23      	ldr	r3, [pc, #140]	; (1c440 <xQueueSemaphoreTake+0x364>)
   1c3b4:	4798      	blx	r3
   1c3b6:	0003      	movs	r3, r0
   1c3b8:	0018      	movs	r0, r3
   1c3ba:	4b22      	ldr	r3, [pc, #136]	; (1c444 <xQueueSemaphoreTake+0x368>)
   1c3bc:	4798      	blx	r3
   1c3be:	0003      	movs	r3, r0
   1c3c0:	001a      	movs	r2, r3
   1c3c2:	4b21      	ldr	r3, [pc, #132]	; (1c448 <xQueueSemaphoreTake+0x36c>)
   1c3c4:	881b      	ldrh	r3, [r3, #0]
   1c3c6:	4013      	ands	r3, r2
   1c3c8:	b29b      	uxth	r3, r3
   1c3ca:	2b00      	cmp	r3, #0
   1c3cc:	d00a      	beq.n	1c3e4 <xQueueSemaphoreTake+0x308>
   1c3ce:	4b1c      	ldr	r3, [pc, #112]	; (1c440 <xQueueSemaphoreTake+0x364>)
   1c3d0:	4798      	blx	r3
   1c3d2:	0003      	movs	r3, r0
   1c3d4:	0018      	movs	r0, r3
   1c3d6:	4b22      	ldr	r3, [pc, #136]	; (1c460 <xQueueSemaphoreTake+0x384>)
   1c3d8:	4798      	blx	r3
   1c3da:	0003      	movs	r3, r0
   1c3dc:	b2db      	uxtb	r3, r3
   1c3de:	0018      	movs	r0, r3
   1c3e0:	4b29      	ldr	r3, [pc, #164]	; (1c488 <xQueueSemaphoreTake+0x3ac>)
   1c3e2:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1c3e4:	69fb      	ldr	r3, [r7, #28]
   1c3e6:	681b      	ldr	r3, [r3, #0]
   1c3e8:	2b00      	cmp	r3, #0
   1c3ea:	d10a      	bne.n	1c402 <xQueueSemaphoreTake+0x326>
					{
						taskENTER_CRITICAL();
   1c3ec:	4b13      	ldr	r3, [pc, #76]	; (1c43c <xQueueSemaphoreTake+0x360>)
   1c3ee:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   1c3f0:	69fb      	ldr	r3, [r7, #28]
   1c3f2:	685b      	ldr	r3, [r3, #4]
   1c3f4:	0018      	movs	r0, r3
   1c3f6:	4b25      	ldr	r3, [pc, #148]	; (1c48c <xQueueSemaphoreTake+0x3b0>)
   1c3f8:	4798      	blx	r3
   1c3fa:	0003      	movs	r3, r0
   1c3fc:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
   1c3fe:	4b1d      	ldr	r3, [pc, #116]	; (1c474 <xQueueSemaphoreTake+0x398>)
   1c400:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1c402:	69fb      	ldr	r3, [r7, #28]
   1c404:	3324      	adds	r3, #36	; 0x24
   1c406:	683a      	ldr	r2, [r7, #0]
   1c408:	0011      	movs	r1, r2
   1c40a:	0018      	movs	r0, r3
   1c40c:	4b20      	ldr	r3, [pc, #128]	; (1c490 <xQueueSemaphoreTake+0x3b4>)
   1c40e:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1c410:	69fb      	ldr	r3, [r7, #28]
   1c412:	0018      	movs	r0, r3
   1c414:	4b1f      	ldr	r3, [pc, #124]	; (1c494 <xQueueSemaphoreTake+0x3b8>)
   1c416:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1c418:	4b1f      	ldr	r3, [pc, #124]	; (1c498 <xQueueSemaphoreTake+0x3bc>)
   1c41a:	4798      	blx	r3
   1c41c:	1e03      	subs	r3, r0, #0
   1c41e:	d000      	beq.n	1c422 <xQueueSemaphoreTake+0x346>
   1c420:	e680      	b.n	1c124 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
   1c422:	4b13      	ldr	r3, [pc, #76]	; (1c470 <xQueueSemaphoreTake+0x394>)
   1c424:	4798      	blx	r3
   1c426:	e67d      	b.n	1c124 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
   1c428:	69fb      	ldr	r3, [r7, #28]
   1c42a:	0018      	movs	r0, r3
   1c42c:	4b19      	ldr	r3, [pc, #100]	; (1c494 <xQueueSemaphoreTake+0x3b8>)
   1c42e:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1c430:	4b19      	ldr	r3, [pc, #100]	; (1c498 <xQueueSemaphoreTake+0x3bc>)
   1c432:	4798      	blx	r3
   1c434:	e676      	b.n	1c124 <xQueueSemaphoreTake+0x48>
   1c436:	46c0      	nop			; (mov r8, r8)
   1c438:	0001db59 	.word	0x0001db59
   1c43c:	0001ae39 	.word	0x0001ae39
   1c440:	000190cd 	.word	0x000190cd
   1c444:	00018e31 	.word	0x00018e31
   1c448:	20000110 	.word	0x20000110
   1c44c:	00018ef1 	.word	0x00018ef1
   1c450:	00018df1 	.word	0x00018df1
   1c454:	20000104 	.word	0x20000104
   1c458:	00018ed1 	.word	0x00018ed1
   1c45c:	00019829 	.word	0x00019829
   1c460:	00018e11 	.word	0x00018e11
   1c464:	00019e85 	.word	0x00019e85
   1c468:	0001e025 	.word	0x0001e025
   1c46c:	0001d6c9 	.word	0x0001d6c9
   1c470:	0001ae21 	.word	0x0001ae21
   1c474:	0001ae5d 	.word	0x0001ae5d
   1c478:	0001d809 	.word	0x0001d809
   1c47c:	0001d0f1 	.word	0x0001d0f1
   1c480:	0001d831 	.word	0x0001d831
   1c484:	0001c825 	.word	0x0001c825
   1c488:	00019fc1 	.word	0x00019fc1
   1c48c:	0001db91 	.word	0x0001db91
   1c490:	0001d5a5 	.word	0x0001d5a5
   1c494:	0001c735 	.word	0x0001c735
   1c498:	0001d109 	.word	0x0001d109
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
   1c49c:	69fb      	ldr	r3, [r7, #28]
   1c49e:	0018      	movs	r0, r3
   1c4a0:	4b2d      	ldr	r3, [pc, #180]	; (1c558 <xQueueSemaphoreTake+0x47c>)
   1c4a2:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1c4a4:	4b2d      	ldr	r3, [pc, #180]	; (1c55c <xQueueSemaphoreTake+0x480>)
   1c4a6:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1c4a8:	69fb      	ldr	r3, [r7, #28]
   1c4aa:	0018      	movs	r0, r3
   1c4ac:	4b2c      	ldr	r3, [pc, #176]	; (1c560 <xQueueSemaphoreTake+0x484>)
   1c4ae:	4798      	blx	r3
   1c4b0:	1e03      	subs	r3, r0, #0
   1c4b2:	d100      	bne.n	1c4b6 <xQueueSemaphoreTake+0x3da>
   1c4b4:	e636      	b.n	1c124 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
   1c4b6:	6a3b      	ldr	r3, [r7, #32]
   1c4b8:	2b00      	cmp	r3, #0
   1c4ba:	d010      	beq.n	1c4de <xQueueSemaphoreTake+0x402>
					{
						taskENTER_CRITICAL();
   1c4bc:	4b29      	ldr	r3, [pc, #164]	; (1c564 <xQueueSemaphoreTake+0x488>)
   1c4be:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
   1c4c0:	69fb      	ldr	r3, [r7, #28]
   1c4c2:	0018      	movs	r0, r3
   1c4c4:	4b28      	ldr	r3, [pc, #160]	; (1c568 <xQueueSemaphoreTake+0x48c>)
   1c4c6:	4798      	blx	r3
   1c4c8:	0003      	movs	r3, r0
   1c4ca:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   1c4cc:	69fb      	ldr	r3, [r7, #28]
   1c4ce:	685b      	ldr	r3, [r3, #4]
   1c4d0:	697a      	ldr	r2, [r7, #20]
   1c4d2:	0011      	movs	r1, r2
   1c4d4:	0018      	movs	r0, r3
   1c4d6:	4b25      	ldr	r3, [pc, #148]	; (1c56c <xQueueSemaphoreTake+0x490>)
   1c4d8:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   1c4da:	4b25      	ldr	r3, [pc, #148]	; (1c570 <xQueueSemaphoreTake+0x494>)
   1c4dc:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1c4de:	4b25      	ldr	r3, [pc, #148]	; (1c574 <xQueueSemaphoreTake+0x498>)
   1c4e0:	4798      	blx	r3
   1c4e2:	0003      	movs	r3, r0
   1c4e4:	0018      	movs	r0, r3
   1c4e6:	4b24      	ldr	r3, [pc, #144]	; (1c578 <xQueueSemaphoreTake+0x49c>)
   1c4e8:	4798      	blx	r3
   1c4ea:	0003      	movs	r3, r0
   1c4ec:	001a      	movs	r2, r3
   1c4ee:	4b23      	ldr	r3, [pc, #140]	; (1c57c <xQueueSemaphoreTake+0x4a0>)
   1c4f0:	881b      	ldrh	r3, [r3, #0]
   1c4f2:	4013      	ands	r3, r2
   1c4f4:	b29b      	uxth	r3, r3
   1c4f6:	2b00      	cmp	r3, #0
   1c4f8:	d029      	beq.n	1c54e <xQueueSemaphoreTake+0x472>
   1c4fa:	69fb      	ldr	r3, [r7, #28]
   1c4fc:	0018      	movs	r0, r3
   1c4fe:	4b20      	ldr	r3, [pc, #128]	; (1c580 <xQueueSemaphoreTake+0x4a4>)
   1c500:	4798      	blx	r3
   1c502:	0003      	movs	r3, r0
   1c504:	001a      	movs	r2, r3
   1c506:	4b1d      	ldr	r3, [pc, #116]	; (1c57c <xQueueSemaphoreTake+0x4a0>)
   1c508:	881b      	ldrh	r3, [r3, #0]
   1c50a:	4013      	ands	r3, r2
   1c50c:	b29b      	uxth	r3, r3
   1c50e:	2b00      	cmp	r3, #0
   1c510:	d01d      	beq.n	1c54e <xQueueSemaphoreTake+0x472>
   1c512:	69fb      	ldr	r3, [r7, #28]
   1c514:	0018      	movs	r0, r3
   1c516:	4b1b      	ldr	r3, [pc, #108]	; (1c584 <xQueueSemaphoreTake+0x4a8>)
   1c518:	4798      	blx	r3
   1c51a:	0003      	movs	r3, r0
   1c51c:	001a      	movs	r2, r3
   1c51e:	4b1a      	ldr	r3, [pc, #104]	; (1c588 <xQueueSemaphoreTake+0x4ac>)
   1c520:	5c9b      	ldrb	r3, [r3, r2]
   1c522:	3350      	adds	r3, #80	; 0x50
   1c524:	b2db      	uxtb	r3, r3
   1c526:	001d      	movs	r5, r3
   1c528:	69fb      	ldr	r3, [r7, #28]
   1c52a:	0018      	movs	r0, r3
   1c52c:	4b15      	ldr	r3, [pc, #84]	; (1c584 <xQueueSemaphoreTake+0x4a8>)
   1c52e:	4798      	blx	r3
   1c530:	0003      	movs	r3, r0
   1c532:	001a      	movs	r2, r3
   1c534:	4b14      	ldr	r3, [pc, #80]	; (1c588 <xQueueSemaphoreTake+0x4ac>)
   1c536:	5c9c      	ldrb	r4, [r3, r2]
   1c538:	69fb      	ldr	r3, [r7, #28]
   1c53a:	0018      	movs	r0, r3
   1c53c:	4b13      	ldr	r3, [pc, #76]	; (1c58c <xQueueSemaphoreTake+0x4b0>)
   1c53e:	4798      	blx	r3
   1c540:	0003      	movs	r3, r0
   1c542:	b2db      	uxtb	r3, r3
   1c544:	001a      	movs	r2, r3
   1c546:	0021      	movs	r1, r4
   1c548:	0028      	movs	r0, r5
   1c54a:	4b11      	ldr	r3, [pc, #68]	; (1c590 <xQueueSemaphoreTake+0x4b4>)
   1c54c:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1c54e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1c550:	0018      	movs	r0, r3
   1c552:	46bd      	mov	sp, r7
   1c554:	b00a      	add	sp, #40	; 0x28
   1c556:	bdb0      	pop	{r4, r5, r7, pc}
   1c558:	0001c735 	.word	0x0001c735
   1c55c:	0001d109 	.word	0x0001d109
   1c560:	0001c825 	.word	0x0001c825
   1c564:	0001ae39 	.word	0x0001ae39
   1c568:	0001c5d7 	.word	0x0001c5d7
   1c56c:	0001de89 	.word	0x0001de89
   1c570:	0001ae5d 	.word	0x0001ae5d
   1c574:	000190cd 	.word	0x000190cd
   1c578:	00018e31 	.word	0x00018e31
   1c57c:	20000110 	.word	0x20000110
   1c580:	00018ef1 	.word	0x00018ef1
   1c584:	00018df1 	.word	0x00018df1
   1c588:	20000104 	.word	0x20000104
   1c58c:	00018ed1 	.word	0x00018ed1
   1c590:	00019829 	.word	0x00019829

0001c594 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
   1c594:	b580      	push	{r7, lr}
   1c596:	b082      	sub	sp, #8
   1c598:	af00      	add	r7, sp, #0
   1c59a:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
   1c59c:	687b      	ldr	r3, [r7, #4]
   1c59e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
   1c5a0:	0018      	movs	r0, r3
   1c5a2:	46bd      	mov	sp, r7
   1c5a4:	b002      	add	sp, #8
   1c5a6:	bd80      	pop	{r7, pc}

0001c5a8 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
   1c5a8:	b580      	push	{r7, lr}
   1c5aa:	b082      	sub	sp, #8
   1c5ac:	af00      	add	r7, sp, #0
   1c5ae:	6078      	str	r0, [r7, #4]
   1c5b0:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
   1c5b2:	687b      	ldr	r3, [r7, #4]
   1c5b4:	683a      	ldr	r2, [r7, #0]
   1c5b6:	64da      	str	r2, [r3, #76]	; 0x4c
	}
   1c5b8:	46c0      	nop			; (mov r8, r8)
   1c5ba:	46bd      	mov	sp, r7
   1c5bc:	b002      	add	sp, #8
   1c5be:	bd80      	pop	{r7, pc}

0001c5c0 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
   1c5c0:	b580      	push	{r7, lr}
   1c5c2:	b082      	sub	sp, #8
   1c5c4:	af00      	add	r7, sp, #0
   1c5c6:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
   1c5c8:	687b      	ldr	r3, [r7, #4]
   1c5ca:	2250      	movs	r2, #80	; 0x50
   1c5cc:	5c9b      	ldrb	r3, [r3, r2]
	}
   1c5ce:	0018      	movs	r0, r3
   1c5d0:	46bd      	mov	sp, r7
   1c5d2:	b002      	add	sp, #8
   1c5d4:	bd80      	pop	{r7, pc}

0001c5d6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
   1c5d6:	b580      	push	{r7, lr}
   1c5d8:	b084      	sub	sp, #16
   1c5da:	af00      	add	r7, sp, #0
   1c5dc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   1c5de:	687b      	ldr	r3, [r7, #4]
   1c5e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c5e2:	2b00      	cmp	r3, #0
   1c5e4:	d006      	beq.n	1c5f4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   1c5e6:	687b      	ldr	r3, [r7, #4]
   1c5e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1c5ea:	681b      	ldr	r3, [r3, #0]
   1c5ec:	2205      	movs	r2, #5
   1c5ee:	1ad3      	subs	r3, r2, r3
   1c5f0:	60fb      	str	r3, [r7, #12]
   1c5f2:	e001      	b.n	1c5f8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   1c5f4:	2300      	movs	r3, #0
   1c5f6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
   1c5f8:	68fb      	ldr	r3, [r7, #12]
	}
   1c5fa:	0018      	movs	r0, r3
   1c5fc:	46bd      	mov	sp, r7
   1c5fe:	b004      	add	sp, #16
   1c600:	bd80      	pop	{r7, pc}
	...

0001c604 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   1c604:	b580      	push	{r7, lr}
   1c606:	b086      	sub	sp, #24
   1c608:	af00      	add	r7, sp, #0
   1c60a:	60f8      	str	r0, [r7, #12]
   1c60c:	60b9      	str	r1, [r7, #8]
   1c60e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   1c610:	2300      	movs	r3, #0
   1c612:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1c614:	68fb      	ldr	r3, [r7, #12]
   1c616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c618:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1c61a:	68fb      	ldr	r3, [r7, #12]
   1c61c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c61e:	2b00      	cmp	r3, #0
   1c620:	d10e      	bne.n	1c640 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1c622:	68fb      	ldr	r3, [r7, #12]
   1c624:	681b      	ldr	r3, [r3, #0]
   1c626:	2b00      	cmp	r3, #0
   1c628:	d14e      	bne.n	1c6c8 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   1c62a:	68fb      	ldr	r3, [r7, #12]
   1c62c:	685b      	ldr	r3, [r3, #4]
   1c62e:	0018      	movs	r0, r3
   1c630:	4b2a      	ldr	r3, [pc, #168]	; (1c6dc <prvCopyDataToQueue+0xd8>)
   1c632:	4798      	blx	r3
   1c634:	0003      	movs	r3, r0
   1c636:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   1c638:	68fb      	ldr	r3, [r7, #12]
   1c63a:	2200      	movs	r2, #0
   1c63c:	605a      	str	r2, [r3, #4]
   1c63e:	e043      	b.n	1c6c8 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   1c640:	687b      	ldr	r3, [r7, #4]
   1c642:	2b00      	cmp	r3, #0
   1c644:	d119      	bne.n	1c67a <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   1c646:	68fb      	ldr	r3, [r7, #12]
   1c648:	6898      	ldr	r0, [r3, #8]
   1c64a:	68fb      	ldr	r3, [r7, #12]
   1c64c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1c64e:	68bb      	ldr	r3, [r7, #8]
   1c650:	0019      	movs	r1, r3
   1c652:	4b23      	ldr	r3, [pc, #140]	; (1c6e0 <prvCopyDataToQueue+0xdc>)
   1c654:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   1c656:	68fb      	ldr	r3, [r7, #12]
   1c658:	689a      	ldr	r2, [r3, #8]
   1c65a:	68fb      	ldr	r3, [r7, #12]
   1c65c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c65e:	18d2      	adds	r2, r2, r3
   1c660:	68fb      	ldr	r3, [r7, #12]
   1c662:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1c664:	68fb      	ldr	r3, [r7, #12]
   1c666:	689a      	ldr	r2, [r3, #8]
   1c668:	68fb      	ldr	r3, [r7, #12]
   1c66a:	685b      	ldr	r3, [r3, #4]
   1c66c:	429a      	cmp	r2, r3
   1c66e:	d32b      	bcc.n	1c6c8 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1c670:	68fb      	ldr	r3, [r7, #12]
   1c672:	681a      	ldr	r2, [r3, #0]
   1c674:	68fb      	ldr	r3, [r7, #12]
   1c676:	609a      	str	r2, [r3, #8]
   1c678:	e026      	b.n	1c6c8 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c67a:	68fb      	ldr	r3, [r7, #12]
   1c67c:	68d8      	ldr	r0, [r3, #12]
   1c67e:	68fb      	ldr	r3, [r7, #12]
   1c680:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1c682:	68bb      	ldr	r3, [r7, #8]
   1c684:	0019      	movs	r1, r3
   1c686:	4b16      	ldr	r3, [pc, #88]	; (1c6e0 <prvCopyDataToQueue+0xdc>)
   1c688:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   1c68a:	68fb      	ldr	r3, [r7, #12]
   1c68c:	68da      	ldr	r2, [r3, #12]
   1c68e:	68fb      	ldr	r3, [r7, #12]
   1c690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c692:	425b      	negs	r3, r3
   1c694:	18d2      	adds	r2, r2, r3
   1c696:	68fb      	ldr	r3, [r7, #12]
   1c698:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1c69a:	68fb      	ldr	r3, [r7, #12]
   1c69c:	68da      	ldr	r2, [r3, #12]
   1c69e:	68fb      	ldr	r3, [r7, #12]
   1c6a0:	681b      	ldr	r3, [r3, #0]
   1c6a2:	429a      	cmp	r2, r3
   1c6a4:	d207      	bcs.n	1c6b6 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   1c6a6:	68fb      	ldr	r3, [r7, #12]
   1c6a8:	685a      	ldr	r2, [r3, #4]
   1c6aa:	68fb      	ldr	r3, [r7, #12]
   1c6ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c6ae:	425b      	negs	r3, r3
   1c6b0:	18d2      	adds	r2, r2, r3
   1c6b2:	68fb      	ldr	r3, [r7, #12]
   1c6b4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   1c6b6:	687b      	ldr	r3, [r7, #4]
   1c6b8:	2b02      	cmp	r3, #2
   1c6ba:	d105      	bne.n	1c6c8 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1c6bc:	693b      	ldr	r3, [r7, #16]
   1c6be:	2b00      	cmp	r3, #0
   1c6c0:	d002      	beq.n	1c6c8 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   1c6c2:	693b      	ldr	r3, [r7, #16]
   1c6c4:	3b01      	subs	r3, #1
   1c6c6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1c6c8:	693b      	ldr	r3, [r7, #16]
   1c6ca:	1c5a      	adds	r2, r3, #1
   1c6cc:	68fb      	ldr	r3, [r7, #12]
   1c6ce:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   1c6d0:	697b      	ldr	r3, [r7, #20]
}
   1c6d2:	0018      	movs	r0, r3
   1c6d4:	46bd      	mov	sp, r7
   1c6d6:	b006      	add	sp, #24
   1c6d8:	bd80      	pop	{r7, pc}
   1c6da:	46c0      	nop			; (mov r8, r8)
   1c6dc:	0001dd21 	.word	0x0001dd21
   1c6e0:	000355b9 	.word	0x000355b9

0001c6e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   1c6e4:	b580      	push	{r7, lr}
   1c6e6:	b082      	sub	sp, #8
   1c6e8:	af00      	add	r7, sp, #0
   1c6ea:	6078      	str	r0, [r7, #4]
   1c6ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1c6ee:	687b      	ldr	r3, [r7, #4]
   1c6f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c6f2:	2b00      	cmp	r3, #0
   1c6f4:	d018      	beq.n	1c728 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   1c6f6:	687b      	ldr	r3, [r7, #4]
   1c6f8:	68da      	ldr	r2, [r3, #12]
   1c6fa:	687b      	ldr	r3, [r7, #4]
   1c6fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c6fe:	18d2      	adds	r2, r2, r3
   1c700:	687b      	ldr	r3, [r7, #4]
   1c702:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1c704:	687b      	ldr	r3, [r7, #4]
   1c706:	68da      	ldr	r2, [r3, #12]
   1c708:	687b      	ldr	r3, [r7, #4]
   1c70a:	685b      	ldr	r3, [r3, #4]
   1c70c:	429a      	cmp	r2, r3
   1c70e:	d303      	bcc.n	1c718 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   1c710:	687b      	ldr	r3, [r7, #4]
   1c712:	681a      	ldr	r2, [r3, #0]
   1c714:	687b      	ldr	r3, [r7, #4]
   1c716:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   1c718:	687b      	ldr	r3, [r7, #4]
   1c71a:	68d9      	ldr	r1, [r3, #12]
   1c71c:	687b      	ldr	r3, [r7, #4]
   1c71e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1c720:	683b      	ldr	r3, [r7, #0]
   1c722:	0018      	movs	r0, r3
   1c724:	4b02      	ldr	r3, [pc, #8]	; (1c730 <prvCopyDataFromQueue+0x4c>)
   1c726:	4798      	blx	r3
	}
}
   1c728:	46c0      	nop			; (mov r8, r8)
   1c72a:	46bd      	mov	sp, r7
   1c72c:	b002      	add	sp, #8
   1c72e:	bd80      	pop	{r7, pc}
   1c730:	000355b9 	.word	0x000355b9

0001c734 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   1c734:	b580      	push	{r7, lr}
   1c736:	b084      	sub	sp, #16
   1c738:	af00      	add	r7, sp, #0
   1c73a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   1c73c:	4b34      	ldr	r3, [pc, #208]	; (1c810 <prvUnlockQueue+0xdc>)
   1c73e:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
   1c740:	230f      	movs	r3, #15
   1c742:	18fb      	adds	r3, r7, r3
   1c744:	687a      	ldr	r2, [r7, #4]
   1c746:	2145      	movs	r1, #69	; 0x45
   1c748:	5c52      	ldrb	r2, [r2, r1]
   1c74a:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1c74c:	e022      	b.n	1c794 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
   1c74e:	687b      	ldr	r3, [r7, #4]
   1c750:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c752:	2b00      	cmp	r3, #0
   1c754:	d009      	beq.n	1c76a <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1c756:	687b      	ldr	r3, [r7, #4]
   1c758:	2100      	movs	r1, #0
   1c75a:	0018      	movs	r0, r3
   1c75c:	4b2d      	ldr	r3, [pc, #180]	; (1c814 <prvUnlockQueue+0xe0>)
   1c75e:	4798      	blx	r3
   1c760:	1e03      	subs	r3, r0, #0
   1c762:	d00f      	beq.n	1c784 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
   1c764:	4b2c      	ldr	r3, [pc, #176]	; (1c818 <prvUnlockQueue+0xe4>)
   1c766:	4798      	blx	r3
   1c768:	e00c      	b.n	1c784 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1c76a:	687b      	ldr	r3, [r7, #4]
   1c76c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c76e:	2b00      	cmp	r3, #0
   1c770:	d017      	beq.n	1c7a2 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1c772:	687b      	ldr	r3, [r7, #4]
   1c774:	3324      	adds	r3, #36	; 0x24
   1c776:	0018      	movs	r0, r3
   1c778:	4b28      	ldr	r3, [pc, #160]	; (1c81c <prvUnlockQueue+0xe8>)
   1c77a:	4798      	blx	r3
   1c77c:	1e03      	subs	r3, r0, #0
   1c77e:	d001      	beq.n	1c784 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
   1c780:	4b25      	ldr	r3, [pc, #148]	; (1c818 <prvUnlockQueue+0xe4>)
   1c782:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   1c784:	230f      	movs	r3, #15
   1c786:	18fb      	adds	r3, r7, r3
   1c788:	781b      	ldrb	r3, [r3, #0]
   1c78a:	3b01      	subs	r3, #1
   1c78c:	b2da      	uxtb	r2, r3
   1c78e:	230f      	movs	r3, #15
   1c790:	18fb      	adds	r3, r7, r3
   1c792:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1c794:	230f      	movs	r3, #15
   1c796:	18fb      	adds	r3, r7, r3
   1c798:	781b      	ldrb	r3, [r3, #0]
   1c79a:	b25b      	sxtb	r3, r3
   1c79c:	2b00      	cmp	r3, #0
   1c79e:	dcd6      	bgt.n	1c74e <prvUnlockQueue+0x1a>
   1c7a0:	e000      	b.n	1c7a4 <prvUnlockQueue+0x70>
						break;
   1c7a2:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
   1c7a4:	687b      	ldr	r3, [r7, #4]
   1c7a6:	2245      	movs	r2, #69	; 0x45
   1c7a8:	21ff      	movs	r1, #255	; 0xff
   1c7aa:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1c7ac:	4b1c      	ldr	r3, [pc, #112]	; (1c820 <prvUnlockQueue+0xec>)
   1c7ae:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   1c7b0:	4b17      	ldr	r3, [pc, #92]	; (1c810 <prvUnlockQueue+0xdc>)
   1c7b2:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
   1c7b4:	230e      	movs	r3, #14
   1c7b6:	18fb      	adds	r3, r7, r3
   1c7b8:	687a      	ldr	r2, [r7, #4]
   1c7ba:	2144      	movs	r1, #68	; 0x44
   1c7bc:	5c52      	ldrb	r2, [r2, r1]
   1c7be:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   1c7c0:	e014      	b.n	1c7ec <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1c7c2:	687b      	ldr	r3, [r7, #4]
   1c7c4:	691b      	ldr	r3, [r3, #16]
   1c7c6:	2b00      	cmp	r3, #0
   1c7c8:	d017      	beq.n	1c7fa <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1c7ca:	687b      	ldr	r3, [r7, #4]
   1c7cc:	3310      	adds	r3, #16
   1c7ce:	0018      	movs	r0, r3
   1c7d0:	4b12      	ldr	r3, [pc, #72]	; (1c81c <prvUnlockQueue+0xe8>)
   1c7d2:	4798      	blx	r3
   1c7d4:	1e03      	subs	r3, r0, #0
   1c7d6:	d001      	beq.n	1c7dc <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
   1c7d8:	4b0f      	ldr	r3, [pc, #60]	; (1c818 <prvUnlockQueue+0xe4>)
   1c7da:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   1c7dc:	230e      	movs	r3, #14
   1c7de:	18fb      	adds	r3, r7, r3
   1c7e0:	781b      	ldrb	r3, [r3, #0]
   1c7e2:	3b01      	subs	r3, #1
   1c7e4:	b2da      	uxtb	r2, r3
   1c7e6:	230e      	movs	r3, #14
   1c7e8:	18fb      	adds	r3, r7, r3
   1c7ea:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1c7ec:	230e      	movs	r3, #14
   1c7ee:	18fb      	adds	r3, r7, r3
   1c7f0:	781b      	ldrb	r3, [r3, #0]
   1c7f2:	b25b      	sxtb	r3, r3
   1c7f4:	2b00      	cmp	r3, #0
   1c7f6:	dce4      	bgt.n	1c7c2 <prvUnlockQueue+0x8e>
   1c7f8:	e000      	b.n	1c7fc <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
   1c7fa:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   1c7fc:	687b      	ldr	r3, [r7, #4]
   1c7fe:	2244      	movs	r2, #68	; 0x44
   1c800:	21ff      	movs	r1, #255	; 0xff
   1c802:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1c804:	4b06      	ldr	r3, [pc, #24]	; (1c820 <prvUnlockQueue+0xec>)
   1c806:	4798      	blx	r3
}
   1c808:	46c0      	nop			; (mov r8, r8)
   1c80a:	46bd      	mov	sp, r7
   1c80c:	b004      	add	sp, #16
   1c80e:	bd80      	pop	{r7, pc}
   1c810:	0001ae39 	.word	0x0001ae39
   1c814:	0001c909 	.word	0x0001c909
   1c818:	0001d8dd 	.word	0x0001d8dd
   1c81c:	0001d6c9 	.word	0x0001d6c9
   1c820:	0001ae5d 	.word	0x0001ae5d

0001c824 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   1c824:	b580      	push	{r7, lr}
   1c826:	b084      	sub	sp, #16
   1c828:	af00      	add	r7, sp, #0
   1c82a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1c82c:	4b08      	ldr	r3, [pc, #32]	; (1c850 <prvIsQueueEmpty+0x2c>)
   1c82e:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1c830:	687b      	ldr	r3, [r7, #4]
   1c832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c834:	2b00      	cmp	r3, #0
   1c836:	d102      	bne.n	1c83e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   1c838:	2301      	movs	r3, #1
   1c83a:	60fb      	str	r3, [r7, #12]
   1c83c:	e001      	b.n	1c842 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   1c83e:	2300      	movs	r3, #0
   1c840:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1c842:	4b04      	ldr	r3, [pc, #16]	; (1c854 <prvIsQueueEmpty+0x30>)
   1c844:	4798      	blx	r3

	return xReturn;
   1c846:	68fb      	ldr	r3, [r7, #12]
}
   1c848:	0018      	movs	r0, r3
   1c84a:	46bd      	mov	sp, r7
   1c84c:	b004      	add	sp, #16
   1c84e:	bd80      	pop	{r7, pc}
   1c850:	0001ae39 	.word	0x0001ae39
   1c854:	0001ae5d 	.word	0x0001ae5d

0001c858 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   1c858:	b580      	push	{r7, lr}
   1c85a:	b084      	sub	sp, #16
   1c85c:	af00      	add	r7, sp, #0
   1c85e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1c860:	4b09      	ldr	r3, [pc, #36]	; (1c888 <prvIsQueueFull+0x30>)
   1c862:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1c864:	687b      	ldr	r3, [r7, #4]
   1c866:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1c868:	687b      	ldr	r3, [r7, #4]
   1c86a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1c86c:	429a      	cmp	r2, r3
   1c86e:	d102      	bne.n	1c876 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   1c870:	2301      	movs	r3, #1
   1c872:	60fb      	str	r3, [r7, #12]
   1c874:	e001      	b.n	1c87a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   1c876:	2300      	movs	r3, #0
   1c878:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1c87a:	4b04      	ldr	r3, [pc, #16]	; (1c88c <prvIsQueueFull+0x34>)
   1c87c:	4798      	blx	r3

	return xReturn;
   1c87e:	68fb      	ldr	r3, [r7, #12]
}
   1c880:	0018      	movs	r0, r3
   1c882:	46bd      	mov	sp, r7
   1c884:	b004      	add	sp, #16
   1c886:	bd80      	pop	{r7, pc}
   1c888:	0001ae39 	.word	0x0001ae39
   1c88c:	0001ae5d 	.word	0x0001ae5d

0001c890 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1c890:	b580      	push	{r7, lr}
   1c892:	b086      	sub	sp, #24
   1c894:	af00      	add	r7, sp, #0
   1c896:	60f8      	str	r0, [r7, #12]
   1c898:	60b9      	str	r1, [r7, #8]
   1c89a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1c89c:	68fb      	ldr	r3, [r7, #12]
   1c89e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   1c8a0:	4b15      	ldr	r3, [pc, #84]	; (1c8f8 <vQueueWaitForMessageRestricted+0x68>)
   1c8a2:	4798      	blx	r3
   1c8a4:	697b      	ldr	r3, [r7, #20]
   1c8a6:	2244      	movs	r2, #68	; 0x44
   1c8a8:	5c9b      	ldrb	r3, [r3, r2]
   1c8aa:	b25b      	sxtb	r3, r3
   1c8ac:	3301      	adds	r3, #1
   1c8ae:	d103      	bne.n	1c8b8 <vQueueWaitForMessageRestricted+0x28>
   1c8b0:	697b      	ldr	r3, [r7, #20]
   1c8b2:	2244      	movs	r2, #68	; 0x44
   1c8b4:	2100      	movs	r1, #0
   1c8b6:	5499      	strb	r1, [r3, r2]
   1c8b8:	697b      	ldr	r3, [r7, #20]
   1c8ba:	2245      	movs	r2, #69	; 0x45
   1c8bc:	5c9b      	ldrb	r3, [r3, r2]
   1c8be:	b25b      	sxtb	r3, r3
   1c8c0:	3301      	adds	r3, #1
   1c8c2:	d103      	bne.n	1c8cc <vQueueWaitForMessageRestricted+0x3c>
   1c8c4:	697b      	ldr	r3, [r7, #20]
   1c8c6:	2245      	movs	r2, #69	; 0x45
   1c8c8:	2100      	movs	r1, #0
   1c8ca:	5499      	strb	r1, [r3, r2]
   1c8cc:	4b0b      	ldr	r3, [pc, #44]	; (1c8fc <vQueueWaitForMessageRestricted+0x6c>)
   1c8ce:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   1c8d0:	697b      	ldr	r3, [r7, #20]
   1c8d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c8d4:	2b00      	cmp	r3, #0
   1c8d6:	d106      	bne.n	1c8e6 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1c8d8:	697b      	ldr	r3, [r7, #20]
   1c8da:	3324      	adds	r3, #36	; 0x24
   1c8dc:	687a      	ldr	r2, [r7, #4]
   1c8de:	68b9      	ldr	r1, [r7, #8]
   1c8e0:	0018      	movs	r0, r3
   1c8e2:	4b07      	ldr	r3, [pc, #28]	; (1c900 <vQueueWaitForMessageRestricted+0x70>)
   1c8e4:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   1c8e6:	697b      	ldr	r3, [r7, #20]
   1c8e8:	0018      	movs	r0, r3
   1c8ea:	4b06      	ldr	r3, [pc, #24]	; (1c904 <vQueueWaitForMessageRestricted+0x74>)
   1c8ec:	4798      	blx	r3
	}
   1c8ee:	46c0      	nop			; (mov r8, r8)
   1c8f0:	46bd      	mov	sp, r7
   1c8f2:	b006      	add	sp, #24
   1c8f4:	bd80      	pop	{r7, pc}
   1c8f6:	46c0      	nop			; (mov r8, r8)
   1c8f8:	0001ae39 	.word	0x0001ae39
   1c8fc:	0001ae5d 	.word	0x0001ae5d
   1c900:	0001d5e9 	.word	0x0001d5e9
   1c904:	0001c735 	.word	0x0001c735

0001c908 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   1c908:	b5b0      	push	{r4, r5, r7, lr}
   1c90a:	b086      	sub	sp, #24
   1c90c:	af00      	add	r7, sp, #0
   1c90e:	6078      	str	r0, [r7, #4]
   1c910:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   1c912:	687b      	ldr	r3, [r7, #4]
   1c914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c916:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
   1c918:	2300      	movs	r3, #0
   1c91a:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   1c91c:	693b      	ldr	r3, [r7, #16]
   1c91e:	2b00      	cmp	r3, #0
   1c920:	d101      	bne.n	1c926 <prvNotifyQueueSetContainer+0x1e>
   1c922:	b672      	cpsid	i
   1c924:	e7fe      	b.n	1c924 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   1c926:	693b      	ldr	r3, [r7, #16]
   1c928:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1c92a:	693b      	ldr	r3, [r7, #16]
   1c92c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1c92e:	429a      	cmp	r2, r3
   1c930:	d301      	bcc.n	1c936 <prvNotifyQueueSetContainer+0x2e>
   1c932:	b672      	cpsid	i
   1c934:	e7fe      	b.n	1c934 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   1c936:	693b      	ldr	r3, [r7, #16]
   1c938:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1c93a:	693b      	ldr	r3, [r7, #16]
   1c93c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1c93e:	429a      	cmp	r2, r3
   1c940:	d300      	bcc.n	1c944 <prvNotifyQueueSetContainer+0x3c>
   1c942:	e08b      	b.n	1ca5c <prvNotifyQueueSetContainer+0x154>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   1c944:	230f      	movs	r3, #15
   1c946:	18fb      	adds	r3, r7, r3
   1c948:	693a      	ldr	r2, [r7, #16]
   1c94a:	2145      	movs	r1, #69	; 0x45
   1c94c:	5c52      	ldrb	r2, [r2, r1]
   1c94e:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );
   1c950:	4b45      	ldr	r3, [pc, #276]	; (1ca68 <prvNotifyQueueSetContainer+0x160>)
   1c952:	4798      	blx	r3
   1c954:	0003      	movs	r3, r0
   1c956:	0018      	movs	r0, r3
   1c958:	4b44      	ldr	r3, [pc, #272]	; (1ca6c <prvNotifyQueueSetContainer+0x164>)
   1c95a:	4798      	blx	r3
   1c95c:	0003      	movs	r3, r0
   1c95e:	001a      	movs	r2, r3
   1c960:	4b43      	ldr	r3, [pc, #268]	; (1ca70 <prvNotifyQueueSetContainer+0x168>)
   1c962:	881b      	ldrh	r3, [r3, #0]
   1c964:	4013      	ands	r3, r2
   1c966:	b29b      	uxth	r3, r3
   1c968:	2b00      	cmp	r3, #0
   1c96a:	d02e      	beq.n	1c9ca <prvNotifyQueueSetContainer+0xc2>
   1c96c:	693b      	ldr	r3, [r7, #16]
   1c96e:	0018      	movs	r0, r3
   1c970:	4b40      	ldr	r3, [pc, #256]	; (1ca74 <prvNotifyQueueSetContainer+0x16c>)
   1c972:	4798      	blx	r3
   1c974:	0003      	movs	r3, r0
   1c976:	001a      	movs	r2, r3
   1c978:	4b3d      	ldr	r3, [pc, #244]	; (1ca70 <prvNotifyQueueSetContainer+0x168>)
   1c97a:	881b      	ldrh	r3, [r3, #0]
   1c97c:	4013      	ands	r3, r2
   1c97e:	b29b      	uxth	r3, r3
   1c980:	2b00      	cmp	r3, #0
   1c982:	d022      	beq.n	1c9ca <prvNotifyQueueSetContainer+0xc2>
   1c984:	683b      	ldr	r3, [r7, #0]
   1c986:	2b00      	cmp	r3, #0
   1c988:	d10b      	bne.n	1c9a2 <prvNotifyQueueSetContainer+0x9a>
   1c98a:	693b      	ldr	r3, [r7, #16]
   1c98c:	0018      	movs	r0, r3
   1c98e:	4b3a      	ldr	r3, [pc, #232]	; (1ca78 <prvNotifyQueueSetContainer+0x170>)
   1c990:	4798      	blx	r3
   1c992:	0003      	movs	r3, r0
   1c994:	001a      	movs	r2, r3
   1c996:	4b39      	ldr	r3, [pc, #228]	; (1ca7c <prvNotifyQueueSetContainer+0x174>)
   1c998:	5c9b      	ldrb	r3, [r3, r2]
   1c99a:	3320      	adds	r3, #32
   1c99c:	b2db      	uxtb	r3, r3
   1c99e:	001d      	movs	r5, r3
   1c9a0:	e000      	b.n	1c9a4 <prvNotifyQueueSetContainer+0x9c>
   1c9a2:	2525      	movs	r5, #37	; 0x25
   1c9a4:	693b      	ldr	r3, [r7, #16]
   1c9a6:	0018      	movs	r0, r3
   1c9a8:	4b33      	ldr	r3, [pc, #204]	; (1ca78 <prvNotifyQueueSetContainer+0x170>)
   1c9aa:	4798      	blx	r3
   1c9ac:	0003      	movs	r3, r0
   1c9ae:	001a      	movs	r2, r3
   1c9b0:	4b32      	ldr	r3, [pc, #200]	; (1ca7c <prvNotifyQueueSetContainer+0x174>)
   1c9b2:	5c9c      	ldrb	r4, [r3, r2]
   1c9b4:	693b      	ldr	r3, [r7, #16]
   1c9b6:	0018      	movs	r0, r3
   1c9b8:	4b31      	ldr	r3, [pc, #196]	; (1ca80 <prvNotifyQueueSetContainer+0x178>)
   1c9ba:	4798      	blx	r3
   1c9bc:	0003      	movs	r3, r0
   1c9be:	b2db      	uxtb	r3, r3
   1c9c0:	001a      	movs	r2, r3
   1c9c2:	0021      	movs	r1, r4
   1c9c4:	0028      	movs	r0, r5
   1c9c6:	4b2f      	ldr	r3, [pc, #188]	; (1ca84 <prvNotifyQueueSetContainer+0x17c>)
   1c9c8:	4798      	blx	r3
   1c9ca:	693b      	ldr	r3, [r7, #16]
   1c9cc:	0018      	movs	r0, r3
   1c9ce:	4b2a      	ldr	r3, [pc, #168]	; (1ca78 <prvNotifyQueueSetContainer+0x170>)
   1c9d0:	4798      	blx	r3
   1c9d2:	0003      	movs	r3, r0
   1c9d4:	001a      	movs	r2, r3
   1c9d6:	4b29      	ldr	r3, [pc, #164]	; (1ca7c <prvNotifyQueueSetContainer+0x174>)
   1c9d8:	5c9c      	ldrb	r4, [r3, r2]
   1c9da:	693b      	ldr	r3, [r7, #16]
   1c9dc:	0018      	movs	r0, r3
   1c9de:	4b28      	ldr	r3, [pc, #160]	; (1ca80 <prvNotifyQueueSetContainer+0x178>)
   1c9e0:	4798      	blx	r3
   1c9e2:	0003      	movs	r3, r0
   1c9e4:	b2dd      	uxtb	r5, r3
   1c9e6:	693b      	ldr	r3, [r7, #16]
   1c9e8:	0018      	movs	r0, r3
   1c9ea:	4b23      	ldr	r3, [pc, #140]	; (1ca78 <prvNotifyQueueSetContainer+0x170>)
   1c9ec:	4798      	blx	r3
   1c9ee:	0003      	movs	r3, r0
   1c9f0:	001a      	movs	r2, r3
   1c9f2:	4b22      	ldr	r3, [pc, #136]	; (1ca7c <prvNotifyQueueSetContainer+0x174>)
   1c9f4:	5c9b      	ldrb	r3, [r3, r2]
   1c9f6:	2b02      	cmp	r3, #2
   1c9f8:	d005      	beq.n	1ca06 <prvNotifyQueueSetContainer+0xfe>
   1c9fa:	693b      	ldr	r3, [r7, #16]
   1c9fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c9fe:	b2db      	uxtb	r3, r3
   1ca00:	3301      	adds	r3, #1
   1ca02:	b2db      	uxtb	r3, r3
   1ca04:	e000      	b.n	1ca08 <prvNotifyQueueSetContainer+0x100>
   1ca06:	2300      	movs	r3, #0
   1ca08:	001a      	movs	r2, r3
   1ca0a:	0029      	movs	r1, r5
   1ca0c:	0020      	movs	r0, r4
   1ca0e:	4b1e      	ldr	r3, [pc, #120]	; (1ca88 <prvNotifyQueueSetContainer+0x180>)
   1ca10:	4798      	blx	r3

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   1ca12:	683a      	ldr	r2, [r7, #0]
   1ca14:	1d39      	adds	r1, r7, #4
   1ca16:	693b      	ldr	r3, [r7, #16]
   1ca18:	0018      	movs	r0, r3
   1ca1a:	4b1c      	ldr	r3, [pc, #112]	; (1ca8c <prvNotifyQueueSetContainer+0x184>)
   1ca1c:	4798      	blx	r3
   1ca1e:	0003      	movs	r3, r0
   1ca20:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
   1ca22:	230f      	movs	r3, #15
   1ca24:	18fb      	adds	r3, r7, r3
   1ca26:	781b      	ldrb	r3, [r3, #0]
   1ca28:	b25b      	sxtb	r3, r3
   1ca2a:	3301      	adds	r3, #1
   1ca2c:	d10d      	bne.n	1ca4a <prvNotifyQueueSetContainer+0x142>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   1ca2e:	693b      	ldr	r3, [r7, #16]
   1ca30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ca32:	2b00      	cmp	r3, #0
   1ca34:	d012      	beq.n	1ca5c <prvNotifyQueueSetContainer+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   1ca36:	693b      	ldr	r3, [r7, #16]
   1ca38:	3324      	adds	r3, #36	; 0x24
   1ca3a:	0018      	movs	r0, r3
   1ca3c:	4b14      	ldr	r3, [pc, #80]	; (1ca90 <prvNotifyQueueSetContainer+0x188>)
   1ca3e:	4798      	blx	r3
   1ca40:	1e03      	subs	r3, r0, #0
   1ca42:	d00b      	beq.n	1ca5c <prvNotifyQueueSetContainer+0x154>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
   1ca44:	2301      	movs	r3, #1
   1ca46:	617b      	str	r3, [r7, #20]
   1ca48:	e008      	b.n	1ca5c <prvNotifyQueueSetContainer+0x154>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1ca4a:	230f      	movs	r3, #15
   1ca4c:	18fb      	adds	r3, r7, r3
   1ca4e:	781b      	ldrb	r3, [r3, #0]
   1ca50:	3301      	adds	r3, #1
   1ca52:	b2db      	uxtb	r3, r3
   1ca54:	b259      	sxtb	r1, r3
   1ca56:	693b      	ldr	r3, [r7, #16]
   1ca58:	2245      	movs	r2, #69	; 0x45
   1ca5a:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1ca5c:	697b      	ldr	r3, [r7, #20]
	}
   1ca5e:	0018      	movs	r0, r3
   1ca60:	46bd      	mov	sp, r7
   1ca62:	b006      	add	sp, #24
   1ca64:	bdb0      	pop	{r4, r5, r7, pc}
   1ca66:	46c0      	nop			; (mov r8, r8)
   1ca68:	000190cd 	.word	0x000190cd
   1ca6c:	00018e31 	.word	0x00018e31
   1ca70:	20000110 	.word	0x20000110
   1ca74:	00018ef1 	.word	0x00018ef1
   1ca78:	00018df1 	.word	0x00018df1
   1ca7c:	20000104 	.word	0x20000104
   1ca80:	00018ed1 	.word	0x00018ed1
   1ca84:	00019829 	.word	0x00019829
   1ca88:	00019e85 	.word	0x00019e85
   1ca8c:	0001c605 	.word	0x0001c605
   1ca90:	0001d6c9 	.word	0x0001d6c9

0001ca94 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   1ca94:	b590      	push	{r4, r7, lr}
   1ca96:	b08d      	sub	sp, #52	; 0x34
   1ca98:	af04      	add	r7, sp, #16
   1ca9a:	60f8      	str	r0, [r7, #12]
   1ca9c:	60b9      	str	r1, [r7, #8]
   1ca9e:	603b      	str	r3, [r7, #0]
   1caa0:	1dbb      	adds	r3, r7, #6
   1caa2:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1caa4:	1dbb      	adds	r3, r7, #6
   1caa6:	881b      	ldrh	r3, [r3, #0]
   1caa8:	009b      	lsls	r3, r3, #2
   1caaa:	0018      	movs	r0, r3
   1caac:	4b1d      	ldr	r3, [pc, #116]	; (1cb24 <xTaskCreate+0x90>)
   1caae:	4798      	blx	r3
   1cab0:	0003      	movs	r3, r0
   1cab2:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
   1cab4:	697b      	ldr	r3, [r7, #20]
   1cab6:	2b00      	cmp	r3, #0
   1cab8:	d010      	beq.n	1cadc <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   1caba:	2054      	movs	r0, #84	; 0x54
   1cabc:	4b19      	ldr	r3, [pc, #100]	; (1cb24 <xTaskCreate+0x90>)
   1cabe:	4798      	blx	r3
   1cac0:	0003      	movs	r3, r0
   1cac2:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
   1cac4:	69fb      	ldr	r3, [r7, #28]
   1cac6:	2b00      	cmp	r3, #0
   1cac8:	d003      	beq.n	1cad2 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   1caca:	69fb      	ldr	r3, [r7, #28]
   1cacc:	697a      	ldr	r2, [r7, #20]
   1cace:	631a      	str	r2, [r3, #48]	; 0x30
   1cad0:	e006      	b.n	1cae0 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   1cad2:	697b      	ldr	r3, [r7, #20]
   1cad4:	0018      	movs	r0, r3
   1cad6:	4b14      	ldr	r3, [pc, #80]	; (1cb28 <xTaskCreate+0x94>)
   1cad8:	4798      	blx	r3
   1cada:	e001      	b.n	1cae0 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
   1cadc:	2300      	movs	r3, #0
   1cade:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   1cae0:	69fb      	ldr	r3, [r7, #28]
   1cae2:	2b00      	cmp	r3, #0
   1cae4:	d016      	beq.n	1cb14 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   1cae6:	1dbb      	adds	r3, r7, #6
   1cae8:	881a      	ldrh	r2, [r3, #0]
   1caea:	683c      	ldr	r4, [r7, #0]
   1caec:	68b9      	ldr	r1, [r7, #8]
   1caee:	68f8      	ldr	r0, [r7, #12]
   1caf0:	2300      	movs	r3, #0
   1caf2:	9303      	str	r3, [sp, #12]
   1caf4:	69fb      	ldr	r3, [r7, #28]
   1caf6:	9302      	str	r3, [sp, #8]
   1caf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1cafa:	9301      	str	r3, [sp, #4]
   1cafc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1cafe:	9300      	str	r3, [sp, #0]
   1cb00:	0023      	movs	r3, r4
   1cb02:	4c0a      	ldr	r4, [pc, #40]	; (1cb2c <xTaskCreate+0x98>)
   1cb04:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
   1cb06:	69fb      	ldr	r3, [r7, #28]
   1cb08:	0018      	movs	r0, r3
   1cb0a:	4b09      	ldr	r3, [pc, #36]	; (1cb30 <xTaskCreate+0x9c>)
   1cb0c:	4798      	blx	r3
			xReturn = pdPASS;
   1cb0e:	2301      	movs	r3, #1
   1cb10:	61bb      	str	r3, [r7, #24]
   1cb12:	e002      	b.n	1cb1a <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1cb14:	2301      	movs	r3, #1
   1cb16:	425b      	negs	r3, r3
   1cb18:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   1cb1a:	69bb      	ldr	r3, [r7, #24]
	}
   1cb1c:	0018      	movs	r0, r3
   1cb1e:	46bd      	mov	sp, r7
   1cb20:	b009      	add	sp, #36	; 0x24
   1cb22:	bd90      	pop	{r4, r7, pc}
   1cb24:	0001af71 	.word	0x0001af71
   1cb28:	0001b035 	.word	0x0001b035
   1cb2c:	0001cb35 	.word	0x0001cb35
   1cb30:	0001cc45 	.word	0x0001cc45

0001cb34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   1cb34:	b580      	push	{r7, lr}
   1cb36:	b086      	sub	sp, #24
   1cb38:	af00      	add	r7, sp, #0
   1cb3a:	60f8      	str	r0, [r7, #12]
   1cb3c:	60b9      	str	r1, [r7, #8]
   1cb3e:	607a      	str	r2, [r7, #4]
   1cb40:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   1cb42:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cb44:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1cb46:	687b      	ldr	r3, [r7, #4]
   1cb48:	009b      	lsls	r3, r3, #2
   1cb4a:	001a      	movs	r2, r3
   1cb4c:	21a5      	movs	r1, #165	; 0xa5
   1cb4e:	4b39      	ldr	r3, [pc, #228]	; (1cc34 <prvInitialiseNewTask+0x100>)
   1cb50:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   1cb52:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cb54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1cb56:	687b      	ldr	r3, [r7, #4]
   1cb58:	4937      	ldr	r1, [pc, #220]	; (1cc38 <prvInitialiseNewTask+0x104>)
   1cb5a:	468c      	mov	ip, r1
   1cb5c:	4463      	add	r3, ip
   1cb5e:	009b      	lsls	r3, r3, #2
   1cb60:	18d3      	adds	r3, r2, r3
   1cb62:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   1cb64:	693b      	ldr	r3, [r7, #16]
   1cb66:	2207      	movs	r2, #7
   1cb68:	4393      	bics	r3, r2
   1cb6a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   1cb6c:	693b      	ldr	r3, [r7, #16]
   1cb6e:	2207      	movs	r2, #7
   1cb70:	4013      	ands	r3, r2
   1cb72:	d001      	beq.n	1cb78 <prvInitialiseNewTask+0x44>
   1cb74:	b672      	cpsid	i
   1cb76:	e7fe      	b.n	1cb76 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1cb78:	2300      	movs	r3, #0
   1cb7a:	617b      	str	r3, [r7, #20]
   1cb7c:	e013      	b.n	1cba6 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1cb7e:	68ba      	ldr	r2, [r7, #8]
   1cb80:	697b      	ldr	r3, [r7, #20]
   1cb82:	18d3      	adds	r3, r2, r3
   1cb84:	7818      	ldrb	r0, [r3, #0]
   1cb86:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1cb88:	2134      	movs	r1, #52	; 0x34
   1cb8a:	697b      	ldr	r3, [r7, #20]
   1cb8c:	18d3      	adds	r3, r2, r3
   1cb8e:	185b      	adds	r3, r3, r1
   1cb90:	1c02      	adds	r2, r0, #0
   1cb92:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   1cb94:	68ba      	ldr	r2, [r7, #8]
   1cb96:	697b      	ldr	r3, [r7, #20]
   1cb98:	18d3      	adds	r3, r2, r3
   1cb9a:	781b      	ldrb	r3, [r3, #0]
   1cb9c:	2b00      	cmp	r3, #0
   1cb9e:	d006      	beq.n	1cbae <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1cba0:	697b      	ldr	r3, [r7, #20]
   1cba2:	3301      	adds	r3, #1
   1cba4:	617b      	str	r3, [r7, #20]
   1cba6:	697b      	ldr	r3, [r7, #20]
   1cba8:	2b07      	cmp	r3, #7
   1cbaa:	d9e8      	bls.n	1cb7e <prvInitialiseNewTask+0x4a>
   1cbac:	e000      	b.n	1cbb0 <prvInitialiseNewTask+0x7c>
		{
			break;
   1cbae:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1cbb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cbb2:	223b      	movs	r2, #59	; 0x3b
   1cbb4:	2100      	movs	r1, #0
   1cbb6:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1cbb8:	6a3b      	ldr	r3, [r7, #32]
   1cbba:	2b04      	cmp	r3, #4
   1cbbc:	d901      	bls.n	1cbc2 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1cbbe:	2304      	movs	r3, #4
   1cbc0:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   1cbc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cbc4:	6a3a      	ldr	r2, [r7, #32]
   1cbc6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
   1cbc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cbca:	6a3a      	ldr	r2, [r7, #32]
   1cbcc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
   1cbce:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cbd0:	2200      	movs	r2, #0
   1cbd2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1cbd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cbd6:	3304      	adds	r3, #4
   1cbd8:	0018      	movs	r0, r3
   1cbda:	4b18      	ldr	r3, [pc, #96]	; (1cc3c <prvInitialiseNewTask+0x108>)
   1cbdc:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1cbde:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cbe0:	3318      	adds	r3, #24
   1cbe2:	0018      	movs	r0, r3
   1cbe4:	4b15      	ldr	r3, [pc, #84]	; (1cc3c <prvInitialiseNewTask+0x108>)
   1cbe6:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1cbe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cbea:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1cbec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1cbee:	6a3b      	ldr	r3, [r7, #32]
   1cbf0:	2205      	movs	r2, #5
   1cbf2:	1ad2      	subs	r2, r2, r3
   1cbf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cbf6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1cbf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cbfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1cbfc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   1cbfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cc00:	2200      	movs	r2, #0
   1cc02:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1cc04:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cc06:	2250      	movs	r2, #80	; 0x50
   1cc08:	2100      	movs	r1, #0
   1cc0a:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1cc0c:	683a      	ldr	r2, [r7, #0]
   1cc0e:	68f9      	ldr	r1, [r7, #12]
   1cc10:	693b      	ldr	r3, [r7, #16]
   1cc12:	0018      	movs	r0, r3
   1cc14:	4b0a      	ldr	r3, [pc, #40]	; (1cc40 <prvInitialiseNewTask+0x10c>)
   1cc16:	4798      	blx	r3
   1cc18:	0002      	movs	r2, r0
   1cc1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cc1c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   1cc1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1cc20:	2b00      	cmp	r3, #0
   1cc22:	d002      	beq.n	1cc2a <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1cc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1cc26:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1cc28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1cc2a:	46c0      	nop			; (mov r8, r8)
   1cc2c:	46bd      	mov	sp, r7
   1cc2e:	b006      	add	sp, #24
   1cc30:	bd80      	pop	{r7, pc}
   1cc32:	46c0      	nop			; (mov r8, r8)
   1cc34:	000355ef 	.word	0x000355ef
   1cc38:	3fffffff 	.word	0x3fffffff
   1cc3c:	0001abe5 	.word	0x0001abe5
   1cc40:	0001acfd 	.word	0x0001acfd

0001cc44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   1cc44:	b580      	push	{r7, lr}
   1cc46:	b082      	sub	sp, #8
   1cc48:	af00      	add	r7, sp, #0
   1cc4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   1cc4c:	4b60      	ldr	r3, [pc, #384]	; (1cdd0 <prvAddNewTaskToReadyList+0x18c>)
   1cc4e:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
   1cc50:	4b60      	ldr	r3, [pc, #384]	; (1cdd4 <prvAddNewTaskToReadyList+0x190>)
   1cc52:	681b      	ldr	r3, [r3, #0]
   1cc54:	1c5a      	adds	r2, r3, #1
   1cc56:	4b5f      	ldr	r3, [pc, #380]	; (1cdd4 <prvAddNewTaskToReadyList+0x190>)
   1cc58:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
   1cc5a:	4b5f      	ldr	r3, [pc, #380]	; (1cdd8 <prvAddNewTaskToReadyList+0x194>)
   1cc5c:	681b      	ldr	r3, [r3, #0]
   1cc5e:	2b00      	cmp	r3, #0
   1cc60:	d109      	bne.n	1cc76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   1cc62:	4b5d      	ldr	r3, [pc, #372]	; (1cdd8 <prvAddNewTaskToReadyList+0x194>)
   1cc64:	687a      	ldr	r2, [r7, #4]
   1cc66:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1cc68:	4b5a      	ldr	r3, [pc, #360]	; (1cdd4 <prvAddNewTaskToReadyList+0x190>)
   1cc6a:	681b      	ldr	r3, [r3, #0]
   1cc6c:	2b01      	cmp	r3, #1
   1cc6e:	d110      	bne.n	1cc92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   1cc70:	4b5a      	ldr	r3, [pc, #360]	; (1cddc <prvAddNewTaskToReadyList+0x198>)
   1cc72:	4798      	blx	r3
   1cc74:	e00d      	b.n	1cc92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   1cc76:	4b5a      	ldr	r3, [pc, #360]	; (1cde0 <prvAddNewTaskToReadyList+0x19c>)
   1cc78:	681b      	ldr	r3, [r3, #0]
   1cc7a:	2b00      	cmp	r3, #0
   1cc7c:	d109      	bne.n	1cc92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1cc7e:	4b56      	ldr	r3, [pc, #344]	; (1cdd8 <prvAddNewTaskToReadyList+0x194>)
   1cc80:	681b      	ldr	r3, [r3, #0]
   1cc82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cc84:	687b      	ldr	r3, [r7, #4]
   1cc86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cc88:	429a      	cmp	r2, r3
   1cc8a:	d802      	bhi.n	1cc92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   1cc8c:	4b52      	ldr	r3, [pc, #328]	; (1cdd8 <prvAddNewTaskToReadyList+0x194>)
   1cc8e:	687a      	ldr	r2, [r7, #4]
   1cc90:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   1cc92:	4b54      	ldr	r3, [pc, #336]	; (1cde4 <prvAddNewTaskToReadyList+0x1a0>)
   1cc94:	681b      	ldr	r3, [r3, #0]
   1cc96:	1c5a      	adds	r2, r3, #1
   1cc98:	4b52      	ldr	r3, [pc, #328]	; (1cde4 <prvAddNewTaskToReadyList+0x1a0>)
   1cc9a:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
   1cc9c:	4b51      	ldr	r3, [pc, #324]	; (1cde4 <prvAddNewTaskToReadyList+0x1a0>)
   1cc9e:	681a      	ldr	r2, [r3, #0]
   1cca0:	687b      	ldr	r3, [r7, #4]
   1cca2:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
   1cca4:	687b      	ldr	r3, [r7, #4]
   1cca6:	2b00      	cmp	r3, #0
   1cca8:	d052      	beq.n	1cd50 <prvAddNewTaskToReadyList+0x10c>
   1ccaa:	2003      	movs	r0, #3
   1ccac:	4b4e      	ldr	r3, [pc, #312]	; (1cde8 <prvAddNewTaskToReadyList+0x1a4>)
   1ccae:	4798      	blx	r3
   1ccb0:	0003      	movs	r3, r0
   1ccb2:	b29a      	uxth	r2, r3
   1ccb4:	687b      	ldr	r3, [r7, #4]
   1ccb6:	0011      	movs	r1, r2
   1ccb8:	0018      	movs	r0, r3
   1ccba:	4b4c      	ldr	r3, [pc, #304]	; (1cdec <prvAddNewTaskToReadyList+0x1a8>)
   1ccbc:	4798      	blx	r3
   1ccbe:	4b4c      	ldr	r3, [pc, #304]	; (1cdf0 <prvAddNewTaskToReadyList+0x1ac>)
   1ccc0:	881a      	ldrh	r2, [r3, #0]
   1ccc2:	687b      	ldr	r3, [r7, #4]
   1ccc4:	0011      	movs	r1, r2
   1ccc6:	0018      	movs	r0, r3
   1ccc8:	4b4a      	ldr	r3, [pc, #296]	; (1cdf4 <prvAddNewTaskToReadyList+0x1b0>)
   1ccca:	4798      	blx	r3
   1cccc:	687b      	ldr	r3, [r7, #4]
   1ccce:	0018      	movs	r0, r3
   1ccd0:	4b49      	ldr	r3, [pc, #292]	; (1cdf8 <prvAddNewTaskToReadyList+0x1b4>)
   1ccd2:	4798      	blx	r3
   1ccd4:	0003      	movs	r3, r0
   1ccd6:	b2d9      	uxtb	r1, r3
   1ccd8:	687b      	ldr	r3, [r7, #4]
   1ccda:	3334      	adds	r3, #52	; 0x34
   1ccdc:	001a      	movs	r2, r3
   1ccde:	2003      	movs	r0, #3
   1cce0:	4b46      	ldr	r3, [pc, #280]	; (1cdfc <prvAddNewTaskToReadyList+0x1b8>)
   1cce2:	4798      	blx	r3
   1cce4:	687b      	ldr	r3, [r7, #4]
   1cce6:	0018      	movs	r0, r3
   1cce8:	4b43      	ldr	r3, [pc, #268]	; (1cdf8 <prvAddNewTaskToReadyList+0x1b4>)
   1ccea:	4798      	blx	r3
   1ccec:	0003      	movs	r3, r0
   1ccee:	b2d9      	uxtb	r1, r3
   1ccf0:	687b      	ldr	r3, [r7, #4]
   1ccf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ccf4:	b2db      	uxtb	r3, r3
   1ccf6:	001a      	movs	r2, r3
   1ccf8:	2003      	movs	r0, #3
   1ccfa:	4b41      	ldr	r3, [pc, #260]	; (1ce00 <prvAddNewTaskToReadyList+0x1bc>)
   1ccfc:	4798      	blx	r3
   1ccfe:	4b41      	ldr	r3, [pc, #260]	; (1ce04 <prvAddNewTaskToReadyList+0x1c0>)
   1cd00:	4798      	blx	r3
   1cd02:	0003      	movs	r3, r0
   1cd04:	0018      	movs	r0, r3
   1cd06:	4b40      	ldr	r3, [pc, #256]	; (1ce08 <prvAddNewTaskToReadyList+0x1c4>)
   1cd08:	4798      	blx	r3
   1cd0a:	0003      	movs	r3, r0
   1cd0c:	001a      	movs	r2, r3
   1cd0e:	4b3f      	ldr	r3, [pc, #252]	; (1ce0c <prvAddNewTaskToReadyList+0x1c8>)
   1cd10:	881b      	ldrh	r3, [r3, #0]
   1cd12:	4013      	ands	r3, r2
   1cd14:	b29b      	uxth	r3, r3
   1cd16:	2b00      	cmp	r3, #0
   1cd18:	d016      	beq.n	1cd48 <prvAddNewTaskToReadyList+0x104>
   1cd1a:	687b      	ldr	r3, [r7, #4]
   1cd1c:	0018      	movs	r0, r3
   1cd1e:	4b3a      	ldr	r3, [pc, #232]	; (1ce08 <prvAddNewTaskToReadyList+0x1c4>)
   1cd20:	4798      	blx	r3
   1cd22:	0003      	movs	r3, r0
   1cd24:	001a      	movs	r2, r3
   1cd26:	4b39      	ldr	r3, [pc, #228]	; (1ce0c <prvAddNewTaskToReadyList+0x1c8>)
   1cd28:	881b      	ldrh	r3, [r3, #0]
   1cd2a:	4013      	ands	r3, r2
   1cd2c:	b29b      	uxth	r3, r3
   1cd2e:	2b00      	cmp	r3, #0
   1cd30:	d00a      	beq.n	1cd48 <prvAddNewTaskToReadyList+0x104>
   1cd32:	687b      	ldr	r3, [r7, #4]
   1cd34:	0018      	movs	r0, r3
   1cd36:	4b30      	ldr	r3, [pc, #192]	; (1cdf8 <prvAddNewTaskToReadyList+0x1b4>)
   1cd38:	4798      	blx	r3
   1cd3a:	0003      	movs	r3, r0
   1cd3c:	b2db      	uxtb	r3, r3
   1cd3e:	001a      	movs	r2, r3
   1cd40:	2103      	movs	r1, #3
   1cd42:	201b      	movs	r0, #27
   1cd44:	4b32      	ldr	r3, [pc, #200]	; (1ce10 <prvAddNewTaskToReadyList+0x1cc>)
   1cd46:	4798      	blx	r3
   1cd48:	687b      	ldr	r3, [r7, #4]
   1cd4a:	0018      	movs	r0, r3
   1cd4c:	4b31      	ldr	r3, [pc, #196]	; (1ce14 <prvAddNewTaskToReadyList+0x1d0>)
   1cd4e:	4798      	blx	r3

		prvAddTaskToReadyList( pxNewTCB );
   1cd50:	687b      	ldr	r3, [r7, #4]
   1cd52:	0018      	movs	r0, r3
   1cd54:	4b2c      	ldr	r3, [pc, #176]	; (1ce08 <prvAddNewTaskToReadyList+0x1c4>)
   1cd56:	4798      	blx	r3
   1cd58:	0003      	movs	r3, r0
   1cd5a:	001a      	movs	r2, r3
   1cd5c:	4b2b      	ldr	r3, [pc, #172]	; (1ce0c <prvAddNewTaskToReadyList+0x1c8>)
   1cd5e:	881b      	ldrh	r3, [r3, #0]
   1cd60:	4013      	ands	r3, r2
   1cd62:	b29b      	uxth	r3, r3
   1cd64:	2b00      	cmp	r3, #0
   1cd66:	d008      	beq.n	1cd7a <prvAddNewTaskToReadyList+0x136>
   1cd68:	687b      	ldr	r3, [r7, #4]
   1cd6a:	0018      	movs	r0, r3
   1cd6c:	4b22      	ldr	r3, [pc, #136]	; (1cdf8 <prvAddNewTaskToReadyList+0x1b4>)
   1cd6e:	4798      	blx	r3
   1cd70:	0003      	movs	r3, r0
   1cd72:	b2db      	uxtb	r3, r3
   1cd74:	0018      	movs	r0, r3
   1cd76:	4b28      	ldr	r3, [pc, #160]	; (1ce18 <prvAddNewTaskToReadyList+0x1d4>)
   1cd78:	4798      	blx	r3
   1cd7a:	687b      	ldr	r3, [r7, #4]
   1cd7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cd7e:	4b27      	ldr	r3, [pc, #156]	; (1ce1c <prvAddNewTaskToReadyList+0x1d8>)
   1cd80:	681b      	ldr	r3, [r3, #0]
   1cd82:	429a      	cmp	r2, r3
   1cd84:	d903      	bls.n	1cd8e <prvAddNewTaskToReadyList+0x14a>
   1cd86:	687b      	ldr	r3, [r7, #4]
   1cd88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cd8a:	4b24      	ldr	r3, [pc, #144]	; (1ce1c <prvAddNewTaskToReadyList+0x1d8>)
   1cd8c:	601a      	str	r2, [r3, #0]
   1cd8e:	687b      	ldr	r3, [r7, #4]
   1cd90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cd92:	0013      	movs	r3, r2
   1cd94:	009b      	lsls	r3, r3, #2
   1cd96:	189b      	adds	r3, r3, r2
   1cd98:	009b      	lsls	r3, r3, #2
   1cd9a:	4a21      	ldr	r2, [pc, #132]	; (1ce20 <prvAddNewTaskToReadyList+0x1dc>)
   1cd9c:	189a      	adds	r2, r3, r2
   1cd9e:	687b      	ldr	r3, [r7, #4]
   1cda0:	3304      	adds	r3, #4
   1cda2:	0019      	movs	r1, r3
   1cda4:	0010      	movs	r0, r2
   1cda6:	4b1f      	ldr	r3, [pc, #124]	; (1ce24 <prvAddNewTaskToReadyList+0x1e0>)
   1cda8:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   1cdaa:	4b1f      	ldr	r3, [pc, #124]	; (1ce28 <prvAddNewTaskToReadyList+0x1e4>)
   1cdac:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
   1cdae:	4b0c      	ldr	r3, [pc, #48]	; (1cde0 <prvAddNewTaskToReadyList+0x19c>)
   1cdb0:	681b      	ldr	r3, [r3, #0]
   1cdb2:	2b00      	cmp	r3, #0
   1cdb4:	d008      	beq.n	1cdc8 <prvAddNewTaskToReadyList+0x184>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1cdb6:	4b08      	ldr	r3, [pc, #32]	; (1cdd8 <prvAddNewTaskToReadyList+0x194>)
   1cdb8:	681b      	ldr	r3, [r3, #0]
   1cdba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cdbc:	687b      	ldr	r3, [r7, #4]
   1cdbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cdc0:	429a      	cmp	r2, r3
   1cdc2:	d201      	bcs.n	1cdc8 <prvAddNewTaskToReadyList+0x184>
		{
			taskYIELD_IF_USING_PREEMPTION();
   1cdc4:	4b19      	ldr	r3, [pc, #100]	; (1ce2c <prvAddNewTaskToReadyList+0x1e8>)
   1cdc6:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1cdc8:	46c0      	nop			; (mov r8, r8)
   1cdca:	46bd      	mov	sp, r7
   1cdcc:	b002      	add	sp, #8
   1cdce:	bd80      	pop	{r7, pc}
   1cdd0:	0001ae39 	.word	0x0001ae39
   1cdd4:	200041b4 	.word	0x200041b4
   1cdd8:	200040dc 	.word	0x200040dc
   1cddc:	0001d965 	.word	0x0001d965
   1cde0:	200041c0 	.word	0x200041c0
   1cde4:	200041d0 	.word	0x200041d0
   1cde8:	0001a3b1 	.word	0x0001a3b1
   1cdec:	00018e55 	.word	0x00018e55
   1cdf0:	20000112 	.word	0x20000112
   1cdf4:	00018e91 	.word	0x00018e91
   1cdf8:	00018e11 	.word	0x00018e11
   1cdfc:	0001a5e1 	.word	0x0001a5e1
   1ce00:	00019d45 	.word	0x00019d45
   1ce04:	000190cd 	.word	0x000190cd
   1ce08:	00018e31 	.word	0x00018e31
   1ce0c:	20000110 	.word	0x20000110
   1ce10:	00019829 	.word	0x00019829
   1ce14:	00018f91 	.word	0x00018f91
   1ce18:	000195e1 	.word	0x000195e1
   1ce1c:	200041bc 	.word	0x200041bc
   1ce20:	200040e0 	.word	0x200040e0
   1ce24:	0001abfb 	.word	0x0001abfb
   1ce28:	0001ae5d 	.word	0x0001ae5d
   1ce2c:	0001ae21 	.word	0x0001ae21

0001ce30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   1ce30:	b580      	push	{r7, lr}
   1ce32:	b084      	sub	sp, #16
   1ce34:	af00      	add	r7, sp, #0
   1ce36:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
   1ce38:	2300      	movs	r3, #0
   1ce3a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   1ce3c:	687b      	ldr	r3, [r7, #4]
   1ce3e:	2b00      	cmp	r3, #0
   1ce40:	d045      	beq.n	1cece <vTaskDelay+0x9e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
   1ce42:	4b27      	ldr	r3, [pc, #156]	; (1cee0 <vTaskDelay+0xb0>)
   1ce44:	681b      	ldr	r3, [r3, #0]
   1ce46:	2b00      	cmp	r3, #0
   1ce48:	d001      	beq.n	1ce4e <vTaskDelay+0x1e>
   1ce4a:	b672      	cpsid	i
   1ce4c:	e7fe      	b.n	1ce4c <vTaskDelay+0x1c>
			vTaskSuspendAll();
   1ce4e:	4b25      	ldr	r3, [pc, #148]	; (1cee4 <vTaskDelay+0xb4>)
   1ce50:	4798      	blx	r3
			{
				traceTASK_DELAY();
   1ce52:	4b25      	ldr	r3, [pc, #148]	; (1cee8 <vTaskDelay+0xb8>)
   1ce54:	681b      	ldr	r3, [r3, #0]
   1ce56:	0018      	movs	r0, r3
   1ce58:	4b24      	ldr	r3, [pc, #144]	; (1ceec <vTaskDelay+0xbc>)
   1ce5a:	4798      	blx	r3
   1ce5c:	0003      	movs	r3, r0
   1ce5e:	001a      	movs	r2, r3
   1ce60:	4b23      	ldr	r3, [pc, #140]	; (1cef0 <vTaskDelay+0xc0>)
   1ce62:	881b      	ldrh	r3, [r3, #0]
   1ce64:	4013      	ands	r3, r2
   1ce66:	b29b      	uxth	r3, r3
   1ce68:	2b00      	cmp	r3, #0
   1ce6a:	d00e      	beq.n	1ce8a <vTaskDelay+0x5a>
   1ce6c:	687b      	ldr	r3, [r7, #4]
   1ce6e:	0019      	movs	r1, r3
   1ce70:	2089      	movs	r0, #137	; 0x89
   1ce72:	4b20      	ldr	r3, [pc, #128]	; (1cef4 <vTaskDelay+0xc4>)
   1ce74:	4798      	blx	r3
   1ce76:	4b1c      	ldr	r3, [pc, #112]	; (1cee8 <vTaskDelay+0xb8>)
   1ce78:	681b      	ldr	r3, [r3, #0]
   1ce7a:	0018      	movs	r0, r3
   1ce7c:	4b1e      	ldr	r3, [pc, #120]	; (1cef8 <vTaskDelay+0xc8>)
   1ce7e:	4798      	blx	r3
   1ce80:	0003      	movs	r3, r0
   1ce82:	b2db      	uxtb	r3, r3
   1ce84:	0018      	movs	r0, r3
   1ce86:	4b1d      	ldr	r3, [pc, #116]	; (1cefc <vTaskDelay+0xcc>)
   1ce88:	4798      	blx	r3
   1ce8a:	4b1d      	ldr	r3, [pc, #116]	; (1cf00 <vTaskDelay+0xd0>)
   1ce8c:	4798      	blx	r3
   1ce8e:	0003      	movs	r3, r0
   1ce90:	0018      	movs	r0, r3
   1ce92:	4b16      	ldr	r3, [pc, #88]	; (1ceec <vTaskDelay+0xbc>)
   1ce94:	4798      	blx	r3
   1ce96:	0003      	movs	r3, r0
   1ce98:	001a      	movs	r2, r3
   1ce9a:	4b15      	ldr	r3, [pc, #84]	; (1cef0 <vTaskDelay+0xc0>)
   1ce9c:	881b      	ldrh	r3, [r3, #0]
   1ce9e:	4013      	ands	r3, r2
   1cea0:	b29b      	uxth	r3, r3
   1cea2:	2b00      	cmp	r3, #0
   1cea4:	d00a      	beq.n	1cebc <vTaskDelay+0x8c>
   1cea6:	4b16      	ldr	r3, [pc, #88]	; (1cf00 <vTaskDelay+0xd0>)
   1cea8:	4798      	blx	r3
   1ceaa:	0003      	movs	r3, r0
   1ceac:	0018      	movs	r0, r3
   1ceae:	4b12      	ldr	r3, [pc, #72]	; (1cef8 <vTaskDelay+0xc8>)
   1ceb0:	4798      	blx	r3
   1ceb2:	0003      	movs	r3, r0
   1ceb4:	b2db      	uxtb	r3, r3
   1ceb6:	0018      	movs	r0, r3
   1ceb8:	4b10      	ldr	r3, [pc, #64]	; (1cefc <vTaskDelay+0xcc>)
   1ceba:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   1cebc:	687b      	ldr	r3, [r7, #4]
   1cebe:	2100      	movs	r1, #0
   1cec0:	0018      	movs	r0, r3
   1cec2:	4b10      	ldr	r3, [pc, #64]	; (1cf04 <vTaskDelay+0xd4>)
   1cec4:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   1cec6:	4b10      	ldr	r3, [pc, #64]	; (1cf08 <vTaskDelay+0xd8>)
   1cec8:	4798      	blx	r3
   1ceca:	0003      	movs	r3, r0
   1cecc:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1cece:	68fb      	ldr	r3, [r7, #12]
   1ced0:	2b00      	cmp	r3, #0
   1ced2:	d101      	bne.n	1ced8 <vTaskDelay+0xa8>
		{
			portYIELD_WITHIN_API();
   1ced4:	4b0d      	ldr	r3, [pc, #52]	; (1cf0c <vTaskDelay+0xdc>)
   1ced6:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1ced8:	46c0      	nop			; (mov r8, r8)
   1ceda:	46bd      	mov	sp, r7
   1cedc:	b004      	add	sp, #16
   1cede:	bd80      	pop	{r7, pc}
   1cee0:	200041dc 	.word	0x200041dc
   1cee4:	0001d0f1 	.word	0x0001d0f1
   1cee8:	200040dc 	.word	0x200040dc
   1ceec:	00018e31 	.word	0x00018e31
   1cef0:	20000110 	.word	0x20000110
   1cef4:	00019b31 	.word	0x00019b31
   1cef8:	00018e11 	.word	0x00018e11
   1cefc:	00019fc1 	.word	0x00019fc1
   1cf00:	000190cd 	.word	0x000190cd
   1cf04:	0001e049 	.word	0x0001e049
   1cf08:	0001d109 	.word	0x0001d109
   1cf0c:	0001ae21 	.word	0x0001ae21

0001cf10 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   1cf10:	b580      	push	{r7, lr}
   1cf12:	b084      	sub	sp, #16
   1cf14:	af00      	add	r7, sp, #0
   1cf16:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   1cf18:	4b42      	ldr	r3, [pc, #264]	; (1d024 <vTaskSuspend+0x114>)
   1cf1a:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   1cf1c:	687b      	ldr	r3, [r7, #4]
   1cf1e:	2b00      	cmp	r3, #0
   1cf20:	d102      	bne.n	1cf28 <vTaskSuspend+0x18>
   1cf22:	4b41      	ldr	r3, [pc, #260]	; (1d028 <vTaskSuspend+0x118>)
   1cf24:	681b      	ldr	r3, [r3, #0]
   1cf26:	e000      	b.n	1cf2a <vTaskSuspend+0x1a>
   1cf28:	687b      	ldr	r3, [r7, #4]
   1cf2a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
   1cf2c:	4b3f      	ldr	r3, [pc, #252]	; (1d02c <vTaskSuspend+0x11c>)
   1cf2e:	4798      	blx	r3
   1cf30:	0003      	movs	r3, r0
   1cf32:	0018      	movs	r0, r3
   1cf34:	4b3e      	ldr	r3, [pc, #248]	; (1d030 <vTaskSuspend+0x120>)
   1cf36:	4798      	blx	r3
   1cf38:	0003      	movs	r3, r0
   1cf3a:	001a      	movs	r2, r3
   1cf3c:	4b3d      	ldr	r3, [pc, #244]	; (1d034 <vTaskSuspend+0x124>)
   1cf3e:	881b      	ldrh	r3, [r3, #0]
   1cf40:	4013      	ands	r3, r2
   1cf42:	b29b      	uxth	r3, r3
   1cf44:	2b00      	cmp	r3, #0
   1cf46:	d016      	beq.n	1cf76 <vTaskSuspend+0x66>
   1cf48:	68fb      	ldr	r3, [r7, #12]
   1cf4a:	0018      	movs	r0, r3
   1cf4c:	4b38      	ldr	r3, [pc, #224]	; (1d030 <vTaskSuspend+0x120>)
   1cf4e:	4798      	blx	r3
   1cf50:	0003      	movs	r3, r0
   1cf52:	001a      	movs	r2, r3
   1cf54:	4b37      	ldr	r3, [pc, #220]	; (1d034 <vTaskSuspend+0x124>)
   1cf56:	881b      	ldrh	r3, [r3, #0]
   1cf58:	4013      	ands	r3, r2
   1cf5a:	b29b      	uxth	r3, r3
   1cf5c:	2b00      	cmp	r3, #0
   1cf5e:	d00a      	beq.n	1cf76 <vTaskSuspend+0x66>
   1cf60:	68fb      	ldr	r3, [r7, #12]
   1cf62:	0018      	movs	r0, r3
   1cf64:	4b34      	ldr	r3, [pc, #208]	; (1d038 <vTaskSuspend+0x128>)
   1cf66:	4798      	blx	r3
   1cf68:	0003      	movs	r3, r0
   1cf6a:	b2db      	uxtb	r3, r3
   1cf6c:	001a      	movs	r2, r3
   1cf6e:	2103      	movs	r1, #3
   1cf70:	208a      	movs	r0, #138	; 0x8a
   1cf72:	4b32      	ldr	r3, [pc, #200]	; (1d03c <vTaskSuspend+0x12c>)
   1cf74:	4798      	blx	r3
   1cf76:	68fb      	ldr	r3, [r7, #12]
   1cf78:	0018      	movs	r0, r3
   1cf7a:	4b2f      	ldr	r3, [pc, #188]	; (1d038 <vTaskSuspend+0x128>)
   1cf7c:	4798      	blx	r3
   1cf7e:	0003      	movs	r3, r0
   1cf80:	b2db      	uxtb	r3, r3
   1cf82:	0018      	movs	r0, r3
   1cf84:	4b2e      	ldr	r3, [pc, #184]	; (1d040 <vTaskSuspend+0x130>)
   1cf86:	4798      	blx	r3

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1cf88:	68fb      	ldr	r3, [r7, #12]
   1cf8a:	3304      	adds	r3, #4
   1cf8c:	0018      	movs	r0, r3
   1cf8e:	4b2d      	ldr	r3, [pc, #180]	; (1d044 <vTaskSuspend+0x134>)
   1cf90:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1cf92:	68fb      	ldr	r3, [r7, #12]
   1cf94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1cf96:	2b00      	cmp	r3, #0
   1cf98:	d004      	beq.n	1cfa4 <vTaskSuspend+0x94>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1cf9a:	68fb      	ldr	r3, [r7, #12]
   1cf9c:	3318      	adds	r3, #24
   1cf9e:	0018      	movs	r0, r3
   1cfa0:	4b28      	ldr	r3, [pc, #160]	; (1d044 <vTaskSuspend+0x134>)
   1cfa2:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   1cfa4:	68fb      	ldr	r3, [r7, #12]
   1cfa6:	1d1a      	adds	r2, r3, #4
   1cfa8:	4b27      	ldr	r3, [pc, #156]	; (1d048 <vTaskSuspend+0x138>)
   1cfaa:	0011      	movs	r1, r2
   1cfac:	0018      	movs	r0, r3
   1cfae:	4b27      	ldr	r3, [pc, #156]	; (1d04c <vTaskSuspend+0x13c>)
   1cfb0:	4798      	blx	r3

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   1cfb2:	68fb      	ldr	r3, [r7, #12]
   1cfb4:	2250      	movs	r2, #80	; 0x50
   1cfb6:	5c9b      	ldrb	r3, [r3, r2]
   1cfb8:	b2db      	uxtb	r3, r3
   1cfba:	2b01      	cmp	r3, #1
   1cfbc:	d103      	bne.n	1cfc6 <vTaskSuspend+0xb6>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1cfbe:	68fb      	ldr	r3, [r7, #12]
   1cfc0:	2250      	movs	r2, #80	; 0x50
   1cfc2:	2100      	movs	r1, #0
   1cfc4:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
   1cfc6:	4b22      	ldr	r3, [pc, #136]	; (1d050 <vTaskSuspend+0x140>)
   1cfc8:	4798      	blx	r3

		if( xSchedulerRunning != pdFALSE )
   1cfca:	4b22      	ldr	r3, [pc, #136]	; (1d054 <vTaskSuspend+0x144>)
   1cfcc:	681b      	ldr	r3, [r3, #0]
   1cfce:	2b00      	cmp	r3, #0
   1cfd0:	d005      	beq.n	1cfde <vTaskSuspend+0xce>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
   1cfd2:	4b14      	ldr	r3, [pc, #80]	; (1d024 <vTaskSuspend+0x114>)
   1cfd4:	4798      	blx	r3
			{
				prvResetNextTaskUnblockTime();
   1cfd6:	4b20      	ldr	r3, [pc, #128]	; (1d058 <vTaskSuspend+0x148>)
   1cfd8:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   1cfda:	4b1d      	ldr	r3, [pc, #116]	; (1d050 <vTaskSuspend+0x140>)
   1cfdc:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
   1cfde:	4b12      	ldr	r3, [pc, #72]	; (1d028 <vTaskSuspend+0x118>)
   1cfe0:	681b      	ldr	r3, [r3, #0]
   1cfe2:	68fa      	ldr	r2, [r7, #12]
   1cfe4:	429a      	cmp	r2, r3
   1cfe6:	d118      	bne.n	1d01a <vTaskSuspend+0x10a>
		{
			if( xSchedulerRunning != pdFALSE )
   1cfe8:	4b1a      	ldr	r3, [pc, #104]	; (1d054 <vTaskSuspend+0x144>)
   1cfea:	681b      	ldr	r3, [r3, #0]
   1cfec:	2b00      	cmp	r3, #0
   1cfee:	d008      	beq.n	1d002 <vTaskSuspend+0xf2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
   1cff0:	4b1a      	ldr	r3, [pc, #104]	; (1d05c <vTaskSuspend+0x14c>)
   1cff2:	681b      	ldr	r3, [r3, #0]
   1cff4:	2b00      	cmp	r3, #0
   1cff6:	d001      	beq.n	1cffc <vTaskSuspend+0xec>
   1cff8:	b672      	cpsid	i
   1cffa:	e7fe      	b.n	1cffa <vTaskSuspend+0xea>
				portYIELD_WITHIN_API();
   1cffc:	4b18      	ldr	r3, [pc, #96]	; (1d060 <vTaskSuspend+0x150>)
   1cffe:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1d000:	e00b      	b.n	1d01a <vTaskSuspend+0x10a>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   1d002:	4b11      	ldr	r3, [pc, #68]	; (1d048 <vTaskSuspend+0x138>)
   1d004:	681a      	ldr	r2, [r3, #0]
   1d006:	4b17      	ldr	r3, [pc, #92]	; (1d064 <vTaskSuspend+0x154>)
   1d008:	681b      	ldr	r3, [r3, #0]
   1d00a:	429a      	cmp	r2, r3
   1d00c:	d103      	bne.n	1d016 <vTaskSuspend+0x106>
					pxCurrentTCB = NULL;
   1d00e:	4b06      	ldr	r3, [pc, #24]	; (1d028 <vTaskSuspend+0x118>)
   1d010:	2200      	movs	r2, #0
   1d012:	601a      	str	r2, [r3, #0]
	}
   1d014:	e001      	b.n	1d01a <vTaskSuspend+0x10a>
					vTaskSwitchContext();
   1d016:	4b14      	ldr	r3, [pc, #80]	; (1d068 <vTaskSuspend+0x158>)
   1d018:	4798      	blx	r3
	}
   1d01a:	46c0      	nop			; (mov r8, r8)
   1d01c:	46bd      	mov	sp, r7
   1d01e:	b004      	add	sp, #16
   1d020:	bd80      	pop	{r7, pc}
   1d022:	46c0      	nop			; (mov r8, r8)
   1d024:	0001ae39 	.word	0x0001ae39
   1d028:	200040dc 	.word	0x200040dc
   1d02c:	000190cd 	.word	0x000190cd
   1d030:	00018e31 	.word	0x00018e31
   1d034:	20000110 	.word	0x20000110
   1d038:	00018e11 	.word	0x00018e11
   1d03c:	00019829 	.word	0x00019829
   1d040:	00019fc1 	.word	0x00019fc1
   1d044:	0001acab 	.word	0x0001acab
   1d048:	200041a0 	.word	0x200041a0
   1d04c:	0001abfb 	.word	0x0001abfb
   1d050:	0001ae5d 	.word	0x0001ae5d
   1d054:	200041c0 	.word	0x200041c0
   1d058:	0001daf5 	.word	0x0001daf5
   1d05c:	200041dc 	.word	0x200041dc
   1d060:	0001ae21 	.word	0x0001ae21
   1d064:	200041b4 	.word	0x200041b4
   1d068:	0001d485 	.word	0x0001d485

0001d06c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   1d06c:	b590      	push	{r4, r7, lr}
   1d06e:	b085      	sub	sp, #20
   1d070:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   1d072:	4916      	ldr	r1, [pc, #88]	; (1d0cc <vTaskStartScheduler+0x60>)
   1d074:	4816      	ldr	r0, [pc, #88]	; (1d0d0 <vTaskStartScheduler+0x64>)
   1d076:	4b17      	ldr	r3, [pc, #92]	; (1d0d4 <vTaskStartScheduler+0x68>)
   1d078:	9301      	str	r3, [sp, #4]
   1d07a:	2300      	movs	r3, #0
   1d07c:	9300      	str	r3, [sp, #0]
   1d07e:	2300      	movs	r3, #0
   1d080:	2296      	movs	r2, #150	; 0x96
   1d082:	4c15      	ldr	r4, [pc, #84]	; (1d0d8 <vTaskStartScheduler+0x6c>)
   1d084:	47a0      	blx	r4
   1d086:	0003      	movs	r3, r0
   1d088:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   1d08a:	687b      	ldr	r3, [r7, #4]
   1d08c:	2b01      	cmp	r3, #1
   1d08e:	d103      	bne.n	1d098 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
   1d090:	4b12      	ldr	r3, [pc, #72]	; (1d0dc <vTaskStartScheduler+0x70>)
   1d092:	4798      	blx	r3
   1d094:	0003      	movs	r3, r0
   1d096:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   1d098:	687b      	ldr	r3, [r7, #4]
   1d09a:	2b01      	cmp	r3, #1
   1d09c:	d10d      	bne.n	1d0ba <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   1d09e:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   1d0a0:	4b0f      	ldr	r3, [pc, #60]	; (1d0e0 <vTaskStartScheduler+0x74>)
   1d0a2:	2201      	movs	r2, #1
   1d0a4:	4252      	negs	r2, r2
   1d0a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   1d0a8:	4b0e      	ldr	r3, [pc, #56]	; (1d0e4 <vTaskStartScheduler+0x78>)
   1d0aa:	2201      	movs	r2, #1
   1d0ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   1d0ae:	4b0e      	ldr	r3, [pc, #56]	; (1d0e8 <vTaskStartScheduler+0x7c>)
   1d0b0:	2200      	movs	r2, #0
   1d0b2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   1d0b4:	4b0d      	ldr	r3, [pc, #52]	; (1d0ec <vTaskStartScheduler+0x80>)
   1d0b6:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   1d0b8:	e004      	b.n	1d0c4 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   1d0ba:	687b      	ldr	r3, [r7, #4]
   1d0bc:	3301      	adds	r3, #1
   1d0be:	d101      	bne.n	1d0c4 <vTaskStartScheduler+0x58>
   1d0c0:	b672      	cpsid	i
   1d0c2:	e7fe      	b.n	1d0c2 <vTaskStartScheduler+0x56>
}
   1d0c4:	46c0      	nop			; (mov r8, r8)
   1d0c6:	46bd      	mov	sp, r7
   1d0c8:	b003      	add	sp, #12
   1d0ca:	bd90      	pop	{r4, r7, pc}
   1d0cc:	000390c0 	.word	0x000390c0
   1d0d0:	0001d93d 	.word	0x0001d93d
   1d0d4:	200041d8 	.word	0x200041d8
   1d0d8:	0001ca95 	.word	0x0001ca95
   1d0dc:	0001e0fd 	.word	0x0001e0fd
   1d0e0:	200041d4 	.word	0x200041d4
   1d0e4:	200041c0 	.word	0x200041c0
   1d0e8:	200041b8 	.word	0x200041b8
   1d0ec:	0001adc9 	.word	0x0001adc9

0001d0f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   1d0f0:	b580      	push	{r7, lr}
   1d0f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   1d0f4:	4b03      	ldr	r3, [pc, #12]	; (1d104 <vTaskSuspendAll+0x14>)
   1d0f6:	681b      	ldr	r3, [r3, #0]
   1d0f8:	1c5a      	adds	r2, r3, #1
   1d0fa:	4b02      	ldr	r3, [pc, #8]	; (1d104 <vTaskSuspendAll+0x14>)
   1d0fc:	601a      	str	r2, [r3, #0]
}
   1d0fe:	46c0      	nop			; (mov r8, r8)
   1d100:	46bd      	mov	sp, r7
   1d102:	bd80      	pop	{r7, pc}
   1d104:	200041dc 	.word	0x200041dc

0001d108 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   1d108:	b580      	push	{r7, lr}
   1d10a:	b084      	sub	sp, #16
   1d10c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   1d10e:	2300      	movs	r3, #0
   1d110:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   1d112:	2300      	movs	r3, #0
   1d114:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   1d116:	4b45      	ldr	r3, [pc, #276]	; (1d22c <xTaskResumeAll+0x124>)
   1d118:	681b      	ldr	r3, [r3, #0]
   1d11a:	2b00      	cmp	r3, #0
   1d11c:	d101      	bne.n	1d122 <xTaskResumeAll+0x1a>
   1d11e:	b672      	cpsid	i
   1d120:	e7fe      	b.n	1d120 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   1d122:	4b43      	ldr	r3, [pc, #268]	; (1d230 <xTaskResumeAll+0x128>)
   1d124:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   1d126:	4b41      	ldr	r3, [pc, #260]	; (1d22c <xTaskResumeAll+0x124>)
   1d128:	681b      	ldr	r3, [r3, #0]
   1d12a:	1e5a      	subs	r2, r3, #1
   1d12c:	4b3f      	ldr	r3, [pc, #252]	; (1d22c <xTaskResumeAll+0x124>)
   1d12e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1d130:	4b3e      	ldr	r3, [pc, #248]	; (1d22c <xTaskResumeAll+0x124>)
   1d132:	681b      	ldr	r3, [r3, #0]
   1d134:	2b00      	cmp	r3, #0
   1d136:	d000      	beq.n	1d13a <xTaskResumeAll+0x32>
   1d138:	e071      	b.n	1d21e <xTaskResumeAll+0x116>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   1d13a:	4b3e      	ldr	r3, [pc, #248]	; (1d234 <xTaskResumeAll+0x12c>)
   1d13c:	681b      	ldr	r3, [r3, #0]
   1d13e:	2b00      	cmp	r3, #0
   1d140:	d100      	bne.n	1d144 <xTaskResumeAll+0x3c>
   1d142:	e06c      	b.n	1d21e <xTaskResumeAll+0x116>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1d144:	e044      	b.n	1d1d0 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   1d146:	4b3c      	ldr	r3, [pc, #240]	; (1d238 <xTaskResumeAll+0x130>)
   1d148:	68db      	ldr	r3, [r3, #12]
   1d14a:	68db      	ldr	r3, [r3, #12]
   1d14c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1d14e:	68fb      	ldr	r3, [r7, #12]
   1d150:	3318      	adds	r3, #24
   1d152:	0018      	movs	r0, r3
   1d154:	4b39      	ldr	r3, [pc, #228]	; (1d23c <xTaskResumeAll+0x134>)
   1d156:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1d158:	68fb      	ldr	r3, [r7, #12]
   1d15a:	3304      	adds	r3, #4
   1d15c:	0018      	movs	r0, r3
   1d15e:	4b37      	ldr	r3, [pc, #220]	; (1d23c <xTaskResumeAll+0x134>)
   1d160:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   1d162:	68fb      	ldr	r3, [r7, #12]
   1d164:	0018      	movs	r0, r3
   1d166:	4b36      	ldr	r3, [pc, #216]	; (1d240 <xTaskResumeAll+0x138>)
   1d168:	4798      	blx	r3
   1d16a:	0003      	movs	r3, r0
   1d16c:	001a      	movs	r2, r3
   1d16e:	4b35      	ldr	r3, [pc, #212]	; (1d244 <xTaskResumeAll+0x13c>)
   1d170:	881b      	ldrh	r3, [r3, #0]
   1d172:	4013      	ands	r3, r2
   1d174:	b29b      	uxth	r3, r3
   1d176:	2b00      	cmp	r3, #0
   1d178:	d008      	beq.n	1d18c <xTaskResumeAll+0x84>
   1d17a:	68fb      	ldr	r3, [r7, #12]
   1d17c:	0018      	movs	r0, r3
   1d17e:	4b32      	ldr	r3, [pc, #200]	; (1d248 <xTaskResumeAll+0x140>)
   1d180:	4798      	blx	r3
   1d182:	0003      	movs	r3, r0
   1d184:	b2db      	uxtb	r3, r3
   1d186:	0018      	movs	r0, r3
   1d188:	4b30      	ldr	r3, [pc, #192]	; (1d24c <xTaskResumeAll+0x144>)
   1d18a:	4798      	blx	r3
   1d18c:	68fb      	ldr	r3, [r7, #12]
   1d18e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d190:	4b2f      	ldr	r3, [pc, #188]	; (1d250 <xTaskResumeAll+0x148>)
   1d192:	681b      	ldr	r3, [r3, #0]
   1d194:	429a      	cmp	r2, r3
   1d196:	d903      	bls.n	1d1a0 <xTaskResumeAll+0x98>
   1d198:	68fb      	ldr	r3, [r7, #12]
   1d19a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d19c:	4b2c      	ldr	r3, [pc, #176]	; (1d250 <xTaskResumeAll+0x148>)
   1d19e:	601a      	str	r2, [r3, #0]
   1d1a0:	68fb      	ldr	r3, [r7, #12]
   1d1a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d1a4:	0013      	movs	r3, r2
   1d1a6:	009b      	lsls	r3, r3, #2
   1d1a8:	189b      	adds	r3, r3, r2
   1d1aa:	009b      	lsls	r3, r3, #2
   1d1ac:	4a29      	ldr	r2, [pc, #164]	; (1d254 <xTaskResumeAll+0x14c>)
   1d1ae:	189a      	adds	r2, r3, r2
   1d1b0:	68fb      	ldr	r3, [r7, #12]
   1d1b2:	3304      	adds	r3, #4
   1d1b4:	0019      	movs	r1, r3
   1d1b6:	0010      	movs	r0, r2
   1d1b8:	4b27      	ldr	r3, [pc, #156]	; (1d258 <xTaskResumeAll+0x150>)
   1d1ba:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1d1bc:	68fb      	ldr	r3, [r7, #12]
   1d1be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d1c0:	4b26      	ldr	r3, [pc, #152]	; (1d25c <xTaskResumeAll+0x154>)
   1d1c2:	681b      	ldr	r3, [r3, #0]
   1d1c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d1c6:	429a      	cmp	r2, r3
   1d1c8:	d302      	bcc.n	1d1d0 <xTaskResumeAll+0xc8>
					{
						xYieldPending = pdTRUE;
   1d1ca:	4b25      	ldr	r3, [pc, #148]	; (1d260 <xTaskResumeAll+0x158>)
   1d1cc:	2201      	movs	r2, #1
   1d1ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1d1d0:	4b19      	ldr	r3, [pc, #100]	; (1d238 <xTaskResumeAll+0x130>)
   1d1d2:	681b      	ldr	r3, [r3, #0]
   1d1d4:	2b00      	cmp	r3, #0
   1d1d6:	d1b6      	bne.n	1d146 <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   1d1d8:	68fb      	ldr	r3, [r7, #12]
   1d1da:	2b00      	cmp	r3, #0
   1d1dc:	d001      	beq.n	1d1e2 <xTaskResumeAll+0xda>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   1d1de:	4b21      	ldr	r3, [pc, #132]	; (1d264 <xTaskResumeAll+0x15c>)
   1d1e0:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   1d1e2:	4b21      	ldr	r3, [pc, #132]	; (1d268 <xTaskResumeAll+0x160>)
   1d1e4:	681b      	ldr	r3, [r3, #0]
   1d1e6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   1d1e8:	687b      	ldr	r3, [r7, #4]
   1d1ea:	2b00      	cmp	r3, #0
   1d1ec:	d00f      	beq.n	1d20e <xTaskResumeAll+0x106>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   1d1ee:	4b1f      	ldr	r3, [pc, #124]	; (1d26c <xTaskResumeAll+0x164>)
   1d1f0:	4798      	blx	r3
   1d1f2:	1e03      	subs	r3, r0, #0
   1d1f4:	d002      	beq.n	1d1fc <xTaskResumeAll+0xf4>
							{
								xYieldPending = pdTRUE;
   1d1f6:	4b1a      	ldr	r3, [pc, #104]	; (1d260 <xTaskResumeAll+0x158>)
   1d1f8:	2201      	movs	r2, #1
   1d1fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   1d1fc:	687b      	ldr	r3, [r7, #4]
   1d1fe:	3b01      	subs	r3, #1
   1d200:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   1d202:	687b      	ldr	r3, [r7, #4]
   1d204:	2b00      	cmp	r3, #0
   1d206:	d1f2      	bne.n	1d1ee <xTaskResumeAll+0xe6>

						uxPendedTicks = 0;
   1d208:	4b17      	ldr	r3, [pc, #92]	; (1d268 <xTaskResumeAll+0x160>)
   1d20a:	2200      	movs	r2, #0
   1d20c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   1d20e:	4b14      	ldr	r3, [pc, #80]	; (1d260 <xTaskResumeAll+0x158>)
   1d210:	681b      	ldr	r3, [r3, #0]
   1d212:	2b00      	cmp	r3, #0
   1d214:	d003      	beq.n	1d21e <xTaskResumeAll+0x116>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   1d216:	2301      	movs	r3, #1
   1d218:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   1d21a:	4b15      	ldr	r3, [pc, #84]	; (1d270 <xTaskResumeAll+0x168>)
   1d21c:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1d21e:	4b15      	ldr	r3, [pc, #84]	; (1d274 <xTaskResumeAll+0x16c>)
   1d220:	4798      	blx	r3

	return xAlreadyYielded;
   1d222:	68bb      	ldr	r3, [r7, #8]
}
   1d224:	0018      	movs	r0, r3
   1d226:	46bd      	mov	sp, r7
   1d228:	b004      	add	sp, #16
   1d22a:	bd80      	pop	{r7, pc}
   1d22c:	200041dc 	.word	0x200041dc
   1d230:	0001ae39 	.word	0x0001ae39
   1d234:	200041b4 	.word	0x200041b4
   1d238:	20004174 	.word	0x20004174
   1d23c:	0001acab 	.word	0x0001acab
   1d240:	00018e31 	.word	0x00018e31
   1d244:	20000110 	.word	0x20000110
   1d248:	00018e11 	.word	0x00018e11
   1d24c:	000195e1 	.word	0x000195e1
   1d250:	200041bc 	.word	0x200041bc
   1d254:	200040e0 	.word	0x200040e0
   1d258:	0001abfb 	.word	0x0001abfb
   1d25c:	200040dc 	.word	0x200040dc
   1d260:	200041c8 	.word	0x200041c8
   1d264:	0001daf5 	.word	0x0001daf5
   1d268:	200041c4 	.word	0x200041c4
   1d26c:	0001d295 	.word	0x0001d295
   1d270:	0001ae21 	.word	0x0001ae21
   1d274:	0001ae5d 	.word	0x0001ae5d

0001d278 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   1d278:	b580      	push	{r7, lr}
   1d27a:	b082      	sub	sp, #8
   1d27c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   1d27e:	4b04      	ldr	r3, [pc, #16]	; (1d290 <xTaskGetTickCount+0x18>)
   1d280:	681b      	ldr	r3, [r3, #0]
   1d282:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   1d284:	687b      	ldr	r3, [r7, #4]
}
   1d286:	0018      	movs	r0, r3
   1d288:	46bd      	mov	sp, r7
   1d28a:	b002      	add	sp, #8
   1d28c:	bd80      	pop	{r7, pc}
   1d28e:	46c0      	nop			; (mov r8, r8)
   1d290:	200041b8 	.word	0x200041b8

0001d294 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   1d294:	b580      	push	{r7, lr}
   1d296:	b086      	sub	sp, #24
   1d298:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   1d29a:	2300      	movs	r3, #0
   1d29c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
   1d29e:	4b64      	ldr	r3, [pc, #400]	; (1d430 <xTaskIncrementTick+0x19c>)
   1d2a0:	681b      	ldr	r3, [r3, #0]
   1d2a2:	2b01      	cmp	r3, #1
   1d2a4:	d003      	beq.n	1d2ae <xTaskIncrementTick+0x1a>
   1d2a6:	4b63      	ldr	r3, [pc, #396]	; (1d434 <xTaskIncrementTick+0x1a0>)
   1d2a8:	681b      	ldr	r3, [r3, #0]
   1d2aa:	2b00      	cmp	r3, #0
   1d2ac:	d107      	bne.n	1d2be <xTaskIncrementTick+0x2a>
   1d2ae:	4b62      	ldr	r3, [pc, #392]	; (1d438 <xTaskIncrementTick+0x1a4>)
   1d2b0:	681b      	ldr	r3, [r3, #0]
   1d2b2:	1c5a      	adds	r2, r3, #1
   1d2b4:	4b60      	ldr	r3, [pc, #384]	; (1d438 <xTaskIncrementTick+0x1a4>)
   1d2b6:	601a      	str	r2, [r3, #0]
   1d2b8:	2000      	movs	r0, #0
   1d2ba:	4b60      	ldr	r3, [pc, #384]	; (1d43c <xTaskIncrementTick+0x1a8>)
   1d2bc:	4798      	blx	r3
   1d2be:	4b5c      	ldr	r3, [pc, #368]	; (1d430 <xTaskIncrementTick+0x19c>)
   1d2c0:	681b      	ldr	r3, [r3, #0]
   1d2c2:	2b00      	cmp	r3, #0
   1d2c4:	d106      	bne.n	1d2d4 <xTaskIncrementTick+0x40>
   1d2c6:	4b5e      	ldr	r3, [pc, #376]	; (1d440 <xTaskIncrementTick+0x1ac>)
   1d2c8:	681b      	ldr	r3, [r3, #0]
   1d2ca:	3301      	adds	r3, #1
   1d2cc:	0019      	movs	r1, r3
   1d2ce:	2003      	movs	r0, #3
   1d2d0:	4b5c      	ldr	r3, [pc, #368]	; (1d444 <xTaskIncrementTick+0x1b0>)
   1d2d2:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1d2d4:	4b56      	ldr	r3, [pc, #344]	; (1d430 <xTaskIncrementTick+0x19c>)
   1d2d6:	681b      	ldr	r3, [r3, #0]
   1d2d8:	2b00      	cmp	r3, #0
   1d2da:	d000      	beq.n	1d2de <xTaskIncrementTick+0x4a>
   1d2dc:	e098      	b.n	1d410 <xTaskIncrementTick+0x17c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   1d2de:	4b58      	ldr	r3, [pc, #352]	; (1d440 <xTaskIncrementTick+0x1ac>)
   1d2e0:	681b      	ldr	r3, [r3, #0]
   1d2e2:	3301      	adds	r3, #1
   1d2e4:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   1d2e6:	4b56      	ldr	r3, [pc, #344]	; (1d440 <xTaskIncrementTick+0x1ac>)
   1d2e8:	693a      	ldr	r2, [r7, #16]
   1d2ea:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   1d2ec:	693b      	ldr	r3, [r7, #16]
   1d2ee:	2b00      	cmp	r3, #0
   1d2f0:	d117      	bne.n	1d322 <xTaskIncrementTick+0x8e>
		{
			taskSWITCH_DELAYED_LISTS();
   1d2f2:	4b55      	ldr	r3, [pc, #340]	; (1d448 <xTaskIncrementTick+0x1b4>)
   1d2f4:	681b      	ldr	r3, [r3, #0]
   1d2f6:	681b      	ldr	r3, [r3, #0]
   1d2f8:	2b00      	cmp	r3, #0
   1d2fa:	d001      	beq.n	1d300 <xTaskIncrementTick+0x6c>
   1d2fc:	b672      	cpsid	i
   1d2fe:	e7fe      	b.n	1d2fe <xTaskIncrementTick+0x6a>
   1d300:	4b51      	ldr	r3, [pc, #324]	; (1d448 <xTaskIncrementTick+0x1b4>)
   1d302:	681b      	ldr	r3, [r3, #0]
   1d304:	60fb      	str	r3, [r7, #12]
   1d306:	4b51      	ldr	r3, [pc, #324]	; (1d44c <xTaskIncrementTick+0x1b8>)
   1d308:	681a      	ldr	r2, [r3, #0]
   1d30a:	4b4f      	ldr	r3, [pc, #316]	; (1d448 <xTaskIncrementTick+0x1b4>)
   1d30c:	601a      	str	r2, [r3, #0]
   1d30e:	4b4f      	ldr	r3, [pc, #316]	; (1d44c <xTaskIncrementTick+0x1b8>)
   1d310:	68fa      	ldr	r2, [r7, #12]
   1d312:	601a      	str	r2, [r3, #0]
   1d314:	4b4e      	ldr	r3, [pc, #312]	; (1d450 <xTaskIncrementTick+0x1bc>)
   1d316:	681b      	ldr	r3, [r3, #0]
   1d318:	1c5a      	adds	r2, r3, #1
   1d31a:	4b4d      	ldr	r3, [pc, #308]	; (1d450 <xTaskIncrementTick+0x1bc>)
   1d31c:	601a      	str	r2, [r3, #0]
   1d31e:	4b4d      	ldr	r3, [pc, #308]	; (1d454 <xTaskIncrementTick+0x1c0>)
   1d320:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   1d322:	4b4d      	ldr	r3, [pc, #308]	; (1d458 <xTaskIncrementTick+0x1c4>)
   1d324:	681b      	ldr	r3, [r3, #0]
   1d326:	693a      	ldr	r2, [r7, #16]
   1d328:	429a      	cmp	r2, r3
   1d32a:	d363      	bcc.n	1d3f4 <xTaskIncrementTick+0x160>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1d32c:	4b46      	ldr	r3, [pc, #280]	; (1d448 <xTaskIncrementTick+0x1b4>)
   1d32e:	681b      	ldr	r3, [r3, #0]
   1d330:	681b      	ldr	r3, [r3, #0]
   1d332:	2b00      	cmp	r3, #0
   1d334:	d101      	bne.n	1d33a <xTaskIncrementTick+0xa6>
   1d336:	2301      	movs	r3, #1
   1d338:	e000      	b.n	1d33c <xTaskIncrementTick+0xa8>
   1d33a:	2300      	movs	r3, #0
   1d33c:	2b00      	cmp	r3, #0
   1d33e:	d004      	beq.n	1d34a <xTaskIncrementTick+0xb6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1d340:	4b45      	ldr	r3, [pc, #276]	; (1d458 <xTaskIncrementTick+0x1c4>)
   1d342:	2201      	movs	r2, #1
   1d344:	4252      	negs	r2, r2
   1d346:	601a      	str	r2, [r3, #0]
					break;
   1d348:	e054      	b.n	1d3f4 <xTaskIncrementTick+0x160>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1d34a:	4b3f      	ldr	r3, [pc, #252]	; (1d448 <xTaskIncrementTick+0x1b4>)
   1d34c:	681b      	ldr	r3, [r3, #0]
   1d34e:	68db      	ldr	r3, [r3, #12]
   1d350:	68db      	ldr	r3, [r3, #12]
   1d352:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   1d354:	68bb      	ldr	r3, [r7, #8]
   1d356:	685b      	ldr	r3, [r3, #4]
   1d358:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   1d35a:	693a      	ldr	r2, [r7, #16]
   1d35c:	687b      	ldr	r3, [r7, #4]
   1d35e:	429a      	cmp	r2, r3
   1d360:	d203      	bcs.n	1d36a <xTaskIncrementTick+0xd6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   1d362:	4b3d      	ldr	r3, [pc, #244]	; (1d458 <xTaskIncrementTick+0x1c4>)
   1d364:	687a      	ldr	r2, [r7, #4]
   1d366:	601a      	str	r2, [r3, #0]
						break;
   1d368:	e044      	b.n	1d3f4 <xTaskIncrementTick+0x160>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1d36a:	68bb      	ldr	r3, [r7, #8]
   1d36c:	3304      	adds	r3, #4
   1d36e:	0018      	movs	r0, r3
   1d370:	4b3a      	ldr	r3, [pc, #232]	; (1d45c <xTaskIncrementTick+0x1c8>)
   1d372:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1d374:	68bb      	ldr	r3, [r7, #8]
   1d376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1d378:	2b00      	cmp	r3, #0
   1d37a:	d004      	beq.n	1d386 <xTaskIncrementTick+0xf2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1d37c:	68bb      	ldr	r3, [r7, #8]
   1d37e:	3318      	adds	r3, #24
   1d380:	0018      	movs	r0, r3
   1d382:	4b36      	ldr	r3, [pc, #216]	; (1d45c <xTaskIncrementTick+0x1c8>)
   1d384:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   1d386:	68bb      	ldr	r3, [r7, #8]
   1d388:	0018      	movs	r0, r3
   1d38a:	4b35      	ldr	r3, [pc, #212]	; (1d460 <xTaskIncrementTick+0x1cc>)
   1d38c:	4798      	blx	r3
   1d38e:	0003      	movs	r3, r0
   1d390:	001a      	movs	r2, r3
   1d392:	4b34      	ldr	r3, [pc, #208]	; (1d464 <xTaskIncrementTick+0x1d0>)
   1d394:	881b      	ldrh	r3, [r3, #0]
   1d396:	4013      	ands	r3, r2
   1d398:	b29b      	uxth	r3, r3
   1d39a:	2b00      	cmp	r3, #0
   1d39c:	d008      	beq.n	1d3b0 <xTaskIncrementTick+0x11c>
   1d39e:	68bb      	ldr	r3, [r7, #8]
   1d3a0:	0018      	movs	r0, r3
   1d3a2:	4b31      	ldr	r3, [pc, #196]	; (1d468 <xTaskIncrementTick+0x1d4>)
   1d3a4:	4798      	blx	r3
   1d3a6:	0003      	movs	r3, r0
   1d3a8:	b2db      	uxtb	r3, r3
   1d3aa:	0018      	movs	r0, r3
   1d3ac:	4b2f      	ldr	r3, [pc, #188]	; (1d46c <xTaskIncrementTick+0x1d8>)
   1d3ae:	4798      	blx	r3
   1d3b0:	68bb      	ldr	r3, [r7, #8]
   1d3b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d3b4:	4b2e      	ldr	r3, [pc, #184]	; (1d470 <xTaskIncrementTick+0x1dc>)
   1d3b6:	681b      	ldr	r3, [r3, #0]
   1d3b8:	429a      	cmp	r2, r3
   1d3ba:	d903      	bls.n	1d3c4 <xTaskIncrementTick+0x130>
   1d3bc:	68bb      	ldr	r3, [r7, #8]
   1d3be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d3c0:	4b2b      	ldr	r3, [pc, #172]	; (1d470 <xTaskIncrementTick+0x1dc>)
   1d3c2:	601a      	str	r2, [r3, #0]
   1d3c4:	68bb      	ldr	r3, [r7, #8]
   1d3c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d3c8:	0013      	movs	r3, r2
   1d3ca:	009b      	lsls	r3, r3, #2
   1d3cc:	189b      	adds	r3, r3, r2
   1d3ce:	009b      	lsls	r3, r3, #2
   1d3d0:	4a28      	ldr	r2, [pc, #160]	; (1d474 <xTaskIncrementTick+0x1e0>)
   1d3d2:	189a      	adds	r2, r3, r2
   1d3d4:	68bb      	ldr	r3, [r7, #8]
   1d3d6:	3304      	adds	r3, #4
   1d3d8:	0019      	movs	r1, r3
   1d3da:	0010      	movs	r0, r2
   1d3dc:	4b26      	ldr	r3, [pc, #152]	; (1d478 <xTaskIncrementTick+0x1e4>)
   1d3de:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1d3e0:	68bb      	ldr	r3, [r7, #8]
   1d3e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d3e4:	4b25      	ldr	r3, [pc, #148]	; (1d47c <xTaskIncrementTick+0x1e8>)
   1d3e6:	681b      	ldr	r3, [r3, #0]
   1d3e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d3ea:	429a      	cmp	r2, r3
   1d3ec:	d39e      	bcc.n	1d32c <xTaskIncrementTick+0x98>
						{
							xSwitchRequired = pdTRUE;
   1d3ee:	2301      	movs	r3, #1
   1d3f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1d3f2:	e79b      	b.n	1d32c <xTaskIncrementTick+0x98>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   1d3f4:	4b21      	ldr	r3, [pc, #132]	; (1d47c <xTaskIncrementTick+0x1e8>)
   1d3f6:	681b      	ldr	r3, [r3, #0]
   1d3f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d3fa:	491e      	ldr	r1, [pc, #120]	; (1d474 <xTaskIncrementTick+0x1e0>)
   1d3fc:	0013      	movs	r3, r2
   1d3fe:	009b      	lsls	r3, r3, #2
   1d400:	189b      	adds	r3, r3, r2
   1d402:	009b      	lsls	r3, r3, #2
   1d404:	585b      	ldr	r3, [r3, r1]
   1d406:	2b01      	cmp	r3, #1
   1d408:	d907      	bls.n	1d41a <xTaskIncrementTick+0x186>
			{
				xSwitchRequired = pdTRUE;
   1d40a:	2301      	movs	r3, #1
   1d40c:	617b      	str	r3, [r7, #20]
   1d40e:	e004      	b.n	1d41a <xTaskIncrementTick+0x186>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   1d410:	4b08      	ldr	r3, [pc, #32]	; (1d434 <xTaskIncrementTick+0x1a0>)
   1d412:	681b      	ldr	r3, [r3, #0]
   1d414:	1c5a      	adds	r2, r3, #1
   1d416:	4b07      	ldr	r3, [pc, #28]	; (1d434 <xTaskIncrementTick+0x1a0>)
   1d418:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   1d41a:	4b19      	ldr	r3, [pc, #100]	; (1d480 <xTaskIncrementTick+0x1ec>)
   1d41c:	681b      	ldr	r3, [r3, #0]
   1d41e:	2b00      	cmp	r3, #0
   1d420:	d001      	beq.n	1d426 <xTaskIncrementTick+0x192>
		{
			xSwitchRequired = pdTRUE;
   1d422:	2301      	movs	r3, #1
   1d424:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   1d426:	697b      	ldr	r3, [r7, #20]
}
   1d428:	0018      	movs	r0, r3
   1d42a:	46bd      	mov	sp, r7
   1d42c:	b006      	add	sp, #24
   1d42e:	bd80      	pop	{r7, pc}
   1d430:	200041dc 	.word	0x200041dc
   1d434:	200041c4 	.word	0x200041c4
   1d438:	20000d3c 	.word	0x20000d3c
   1d43c:	0001aac5 	.word	0x0001aac5
   1d440:	200041b8 	.word	0x200041b8
   1d444:	00019b31 	.word	0x00019b31
   1d448:	2000416c 	.word	0x2000416c
   1d44c:	20004170 	.word	0x20004170
   1d450:	200041cc 	.word	0x200041cc
   1d454:	0001daf5 	.word	0x0001daf5
   1d458:	200041d4 	.word	0x200041d4
   1d45c:	0001acab 	.word	0x0001acab
   1d460:	00018e31 	.word	0x00018e31
   1d464:	20000110 	.word	0x20000110
   1d468:	00018e11 	.word	0x00018e11
   1d46c:	000195e1 	.word	0x000195e1
   1d470:	200041bc 	.word	0x200041bc
   1d474:	200040e0 	.word	0x200040e0
   1d478:	0001abfb 	.word	0x0001abfb
   1d47c:	200040dc 	.word	0x200040dc
   1d480:	200041c8 	.word	0x200041c8

0001d484 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   1d484:	b580      	push	{r7, lr}
   1d486:	b082      	sub	sp, #8
   1d488:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1d48a:	4b3a      	ldr	r3, [pc, #232]	; (1d574 <vTaskSwitchContext+0xf0>)
   1d48c:	681b      	ldr	r3, [r3, #0]
   1d48e:	2b00      	cmp	r3, #0
   1d490:	d003      	beq.n	1d49a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   1d492:	4b39      	ldr	r3, [pc, #228]	; (1d578 <vTaskSwitchContext+0xf4>)
   1d494:	2201      	movs	r2, #1
   1d496:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   1d498:	e067      	b.n	1d56a <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
   1d49a:	4b37      	ldr	r3, [pc, #220]	; (1d578 <vTaskSwitchContext+0xf4>)
   1d49c:	2200      	movs	r2, #0
   1d49e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   1d4a0:	4b36      	ldr	r3, [pc, #216]	; (1d57c <vTaskSwitchContext+0xf8>)
   1d4a2:	681b      	ldr	r3, [r3, #0]
   1d4a4:	681a      	ldr	r2, [r3, #0]
   1d4a6:	4b35      	ldr	r3, [pc, #212]	; (1d57c <vTaskSwitchContext+0xf8>)
   1d4a8:	681b      	ldr	r3, [r3, #0]
   1d4aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1d4ac:	429a      	cmp	r2, r3
   1d4ae:	d808      	bhi.n	1d4c2 <vTaskSwitchContext+0x3e>
   1d4b0:	4b32      	ldr	r3, [pc, #200]	; (1d57c <vTaskSwitchContext+0xf8>)
   1d4b2:	681a      	ldr	r2, [r3, #0]
   1d4b4:	4b31      	ldr	r3, [pc, #196]	; (1d57c <vTaskSwitchContext+0xf8>)
   1d4b6:	681b      	ldr	r3, [r3, #0]
   1d4b8:	3334      	adds	r3, #52	; 0x34
   1d4ba:	0019      	movs	r1, r3
   1d4bc:	0010      	movs	r0, r2
   1d4be:	4b30      	ldr	r3, [pc, #192]	; (1d580 <vTaskSwitchContext+0xfc>)
   1d4c0:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
   1d4c2:	4b30      	ldr	r3, [pc, #192]	; (1d584 <vTaskSwitchContext+0x100>)
   1d4c4:	681b      	ldr	r3, [r3, #0]
   1d4c6:	607b      	str	r3, [r7, #4]
   1d4c8:	e007      	b.n	1d4da <vTaskSwitchContext+0x56>
   1d4ca:	687b      	ldr	r3, [r7, #4]
   1d4cc:	2b00      	cmp	r3, #0
   1d4ce:	d101      	bne.n	1d4d4 <vTaskSwitchContext+0x50>
   1d4d0:	b672      	cpsid	i
   1d4d2:	e7fe      	b.n	1d4d2 <vTaskSwitchContext+0x4e>
   1d4d4:	687b      	ldr	r3, [r7, #4]
   1d4d6:	3b01      	subs	r3, #1
   1d4d8:	607b      	str	r3, [r7, #4]
   1d4da:	492b      	ldr	r1, [pc, #172]	; (1d588 <vTaskSwitchContext+0x104>)
   1d4dc:	687a      	ldr	r2, [r7, #4]
   1d4de:	0013      	movs	r3, r2
   1d4e0:	009b      	lsls	r3, r3, #2
   1d4e2:	189b      	adds	r3, r3, r2
   1d4e4:	009b      	lsls	r3, r3, #2
   1d4e6:	585b      	ldr	r3, [r3, r1]
   1d4e8:	2b00      	cmp	r3, #0
   1d4ea:	d0ee      	beq.n	1d4ca <vTaskSwitchContext+0x46>
   1d4ec:	687a      	ldr	r2, [r7, #4]
   1d4ee:	0013      	movs	r3, r2
   1d4f0:	009b      	lsls	r3, r3, #2
   1d4f2:	189b      	adds	r3, r3, r2
   1d4f4:	009b      	lsls	r3, r3, #2
   1d4f6:	4a24      	ldr	r2, [pc, #144]	; (1d588 <vTaskSwitchContext+0x104>)
   1d4f8:	189b      	adds	r3, r3, r2
   1d4fa:	603b      	str	r3, [r7, #0]
   1d4fc:	683b      	ldr	r3, [r7, #0]
   1d4fe:	685b      	ldr	r3, [r3, #4]
   1d500:	685a      	ldr	r2, [r3, #4]
   1d502:	683b      	ldr	r3, [r7, #0]
   1d504:	605a      	str	r2, [r3, #4]
   1d506:	683b      	ldr	r3, [r7, #0]
   1d508:	685a      	ldr	r2, [r3, #4]
   1d50a:	683b      	ldr	r3, [r7, #0]
   1d50c:	3308      	adds	r3, #8
   1d50e:	429a      	cmp	r2, r3
   1d510:	d104      	bne.n	1d51c <vTaskSwitchContext+0x98>
   1d512:	683b      	ldr	r3, [r7, #0]
   1d514:	685b      	ldr	r3, [r3, #4]
   1d516:	685a      	ldr	r2, [r3, #4]
   1d518:	683b      	ldr	r3, [r7, #0]
   1d51a:	605a      	str	r2, [r3, #4]
   1d51c:	683b      	ldr	r3, [r7, #0]
   1d51e:	685b      	ldr	r3, [r3, #4]
   1d520:	68da      	ldr	r2, [r3, #12]
   1d522:	4b16      	ldr	r3, [pc, #88]	; (1d57c <vTaskSwitchContext+0xf8>)
   1d524:	601a      	str	r2, [r3, #0]
   1d526:	4b17      	ldr	r3, [pc, #92]	; (1d584 <vTaskSwitchContext+0x100>)
   1d528:	687a      	ldr	r2, [r7, #4]
   1d52a:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
   1d52c:	4b17      	ldr	r3, [pc, #92]	; (1d58c <vTaskSwitchContext+0x108>)
   1d52e:	2201      	movs	r2, #1
   1d530:	601a      	str	r2, [r3, #0]
   1d532:	4b17      	ldr	r3, [pc, #92]	; (1d590 <vTaskSwitchContext+0x10c>)
   1d534:	4798      	blx	r3
   1d536:	0003      	movs	r3, r0
   1d538:	0018      	movs	r0, r3
   1d53a:	4b16      	ldr	r3, [pc, #88]	; (1d594 <vTaskSwitchContext+0x110>)
   1d53c:	4798      	blx	r3
   1d53e:	0003      	movs	r3, r0
   1d540:	001a      	movs	r2, r3
   1d542:	4b15      	ldr	r3, [pc, #84]	; (1d598 <vTaskSwitchContext+0x114>)
   1d544:	881b      	ldrh	r3, [r3, #0]
   1d546:	4013      	ands	r3, r2
   1d548:	b29b      	uxth	r3, r3
   1d54a:	2b00      	cmp	r3, #0
   1d54c:	d00a      	beq.n	1d564 <vTaskSwitchContext+0xe0>
   1d54e:	4b10      	ldr	r3, [pc, #64]	; (1d590 <vTaskSwitchContext+0x10c>)
   1d550:	4798      	blx	r3
   1d552:	0003      	movs	r3, r0
   1d554:	0018      	movs	r0, r3
   1d556:	4b11      	ldr	r3, [pc, #68]	; (1d59c <vTaskSwitchContext+0x118>)
   1d558:	4798      	blx	r3
   1d55a:	0003      	movs	r3, r0
   1d55c:	b2db      	uxtb	r3, r3
   1d55e:	0018      	movs	r0, r3
   1d560:	4b0f      	ldr	r3, [pc, #60]	; (1d5a0 <vTaskSwitchContext+0x11c>)
   1d562:	4798      	blx	r3
   1d564:	4b09      	ldr	r3, [pc, #36]	; (1d58c <vTaskSwitchContext+0x108>)
   1d566:	2202      	movs	r2, #2
   1d568:	601a      	str	r2, [r3, #0]
}
   1d56a:	46c0      	nop			; (mov r8, r8)
   1d56c:	46bd      	mov	sp, r7
   1d56e:	b002      	add	sp, #8
   1d570:	bd80      	pop	{r7, pc}
   1d572:	46c0      	nop			; (mov r8, r8)
   1d574:	200041dc 	.word	0x200041dc
   1d578:	200041c8 	.word	0x200041c8
   1d57c:	200040dc 	.word	0x200040dc
   1d580:	000335fd 	.word	0x000335fd
   1d584:	200041bc 	.word	0x200041bc
   1d588:	200040e0 	.word	0x200040e0
   1d58c:	20000d48 	.word	0x20000d48
   1d590:	000190cd 	.word	0x000190cd
   1d594:	00018e31 	.word	0x00018e31
   1d598:	20000110 	.word	0x20000110
   1d59c:	00018e11 	.word	0x00018e11
   1d5a0:	00019c2d 	.word	0x00019c2d

0001d5a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   1d5a4:	b580      	push	{r7, lr}
   1d5a6:	b082      	sub	sp, #8
   1d5a8:	af00      	add	r7, sp, #0
   1d5aa:	6078      	str	r0, [r7, #4]
   1d5ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   1d5ae:	687b      	ldr	r3, [r7, #4]
   1d5b0:	2b00      	cmp	r3, #0
   1d5b2:	d101      	bne.n	1d5b8 <vTaskPlaceOnEventList+0x14>
   1d5b4:	b672      	cpsid	i
   1d5b6:	e7fe      	b.n	1d5b6 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1d5b8:	4b08      	ldr	r3, [pc, #32]	; (1d5dc <vTaskPlaceOnEventList+0x38>)
   1d5ba:	681b      	ldr	r3, [r3, #0]
   1d5bc:	3318      	adds	r3, #24
   1d5be:	001a      	movs	r2, r3
   1d5c0:	687b      	ldr	r3, [r7, #4]
   1d5c2:	0011      	movs	r1, r2
   1d5c4:	0018      	movs	r0, r3
   1d5c6:	4b06      	ldr	r3, [pc, #24]	; (1d5e0 <vTaskPlaceOnEventList+0x3c>)
   1d5c8:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   1d5ca:	683b      	ldr	r3, [r7, #0]
   1d5cc:	2101      	movs	r1, #1
   1d5ce:	0018      	movs	r0, r3
   1d5d0:	4b04      	ldr	r3, [pc, #16]	; (1d5e4 <vTaskPlaceOnEventList+0x40>)
   1d5d2:	4798      	blx	r3
}
   1d5d4:	46c0      	nop			; (mov r8, r8)
   1d5d6:	46bd      	mov	sp, r7
   1d5d8:	b002      	add	sp, #8
   1d5da:	bd80      	pop	{r7, pc}
   1d5dc:	200040dc 	.word	0x200040dc
   1d5e0:	0001ac3f 	.word	0x0001ac3f
   1d5e4:	0001e049 	.word	0x0001e049

0001d5e8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1d5e8:	b580      	push	{r7, lr}
   1d5ea:	b084      	sub	sp, #16
   1d5ec:	af00      	add	r7, sp, #0
   1d5ee:	60f8      	str	r0, [r7, #12]
   1d5f0:	60b9      	str	r1, [r7, #8]
   1d5f2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   1d5f4:	68fb      	ldr	r3, [r7, #12]
   1d5f6:	2b00      	cmp	r3, #0
   1d5f8:	d101      	bne.n	1d5fe <vTaskPlaceOnEventListRestricted+0x16>
   1d5fa:	b672      	cpsid	i
   1d5fc:	e7fe      	b.n	1d5fc <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1d5fe:	4b28      	ldr	r3, [pc, #160]	; (1d6a0 <vTaskPlaceOnEventListRestricted+0xb8>)
   1d600:	681b      	ldr	r3, [r3, #0]
   1d602:	3318      	adds	r3, #24
   1d604:	001a      	movs	r2, r3
   1d606:	68fb      	ldr	r3, [r7, #12]
   1d608:	0011      	movs	r1, r2
   1d60a:	0018      	movs	r0, r3
   1d60c:	4b25      	ldr	r3, [pc, #148]	; (1d6a4 <vTaskPlaceOnEventListRestricted+0xbc>)
   1d60e:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   1d610:	687b      	ldr	r3, [r7, #4]
   1d612:	2b00      	cmp	r3, #0
   1d614:	d002      	beq.n	1d61c <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
   1d616:	2301      	movs	r3, #1
   1d618:	425b      	negs	r3, r3
   1d61a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
   1d61c:	4b20      	ldr	r3, [pc, #128]	; (1d6a0 <vTaskPlaceOnEventListRestricted+0xb8>)
   1d61e:	681b      	ldr	r3, [r3, #0]
   1d620:	0018      	movs	r0, r3
   1d622:	4b21      	ldr	r3, [pc, #132]	; (1d6a8 <vTaskPlaceOnEventListRestricted+0xc0>)
   1d624:	4798      	blx	r3
   1d626:	0003      	movs	r3, r0
   1d628:	001a      	movs	r2, r3
   1d62a:	4b20      	ldr	r3, [pc, #128]	; (1d6ac <vTaskPlaceOnEventListRestricted+0xc4>)
   1d62c:	881b      	ldrh	r3, [r3, #0]
   1d62e:	4013      	ands	r3, r2
   1d630:	b29b      	uxth	r3, r3
   1d632:	2b00      	cmp	r3, #0
   1d634:	d011      	beq.n	1d65a <vTaskPlaceOnEventListRestricted+0x72>
   1d636:	4b1e      	ldr	r3, [pc, #120]	; (1d6b0 <vTaskPlaceOnEventListRestricted+0xc8>)
   1d638:	681a      	ldr	r2, [r3, #0]
   1d63a:	68bb      	ldr	r3, [r7, #8]
   1d63c:	18d3      	adds	r3, r2, r3
   1d63e:	0019      	movs	r1, r3
   1d640:	2088      	movs	r0, #136	; 0x88
   1d642:	4b1c      	ldr	r3, [pc, #112]	; (1d6b4 <vTaskPlaceOnEventListRestricted+0xcc>)
   1d644:	4798      	blx	r3
   1d646:	4b16      	ldr	r3, [pc, #88]	; (1d6a0 <vTaskPlaceOnEventListRestricted+0xb8>)
   1d648:	681b      	ldr	r3, [r3, #0]
   1d64a:	0018      	movs	r0, r3
   1d64c:	4b1a      	ldr	r3, [pc, #104]	; (1d6b8 <vTaskPlaceOnEventListRestricted+0xd0>)
   1d64e:	4798      	blx	r3
   1d650:	0003      	movs	r3, r0
   1d652:	b2db      	uxtb	r3, r3
   1d654:	0018      	movs	r0, r3
   1d656:	4b19      	ldr	r3, [pc, #100]	; (1d6bc <vTaskPlaceOnEventListRestricted+0xd4>)
   1d658:	4798      	blx	r3
   1d65a:	4b19      	ldr	r3, [pc, #100]	; (1d6c0 <vTaskPlaceOnEventListRestricted+0xd8>)
   1d65c:	4798      	blx	r3
   1d65e:	0003      	movs	r3, r0
   1d660:	0018      	movs	r0, r3
   1d662:	4b11      	ldr	r3, [pc, #68]	; (1d6a8 <vTaskPlaceOnEventListRestricted+0xc0>)
   1d664:	4798      	blx	r3
   1d666:	0003      	movs	r3, r0
   1d668:	001a      	movs	r2, r3
   1d66a:	4b10      	ldr	r3, [pc, #64]	; (1d6ac <vTaskPlaceOnEventListRestricted+0xc4>)
   1d66c:	881b      	ldrh	r3, [r3, #0]
   1d66e:	4013      	ands	r3, r2
   1d670:	b29b      	uxth	r3, r3
   1d672:	2b00      	cmp	r3, #0
   1d674:	d00a      	beq.n	1d68c <vTaskPlaceOnEventListRestricted+0xa4>
   1d676:	4b12      	ldr	r3, [pc, #72]	; (1d6c0 <vTaskPlaceOnEventListRestricted+0xd8>)
   1d678:	4798      	blx	r3
   1d67a:	0003      	movs	r3, r0
   1d67c:	0018      	movs	r0, r3
   1d67e:	4b0e      	ldr	r3, [pc, #56]	; (1d6b8 <vTaskPlaceOnEventListRestricted+0xd0>)
   1d680:	4798      	blx	r3
   1d682:	0003      	movs	r3, r0
   1d684:	b2db      	uxtb	r3, r3
   1d686:	0018      	movs	r0, r3
   1d688:	4b0c      	ldr	r3, [pc, #48]	; (1d6bc <vTaskPlaceOnEventListRestricted+0xd4>)
   1d68a:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   1d68c:	687a      	ldr	r2, [r7, #4]
   1d68e:	68bb      	ldr	r3, [r7, #8]
   1d690:	0011      	movs	r1, r2
   1d692:	0018      	movs	r0, r3
   1d694:	4b0b      	ldr	r3, [pc, #44]	; (1d6c4 <vTaskPlaceOnEventListRestricted+0xdc>)
   1d696:	4798      	blx	r3
	}
   1d698:	46c0      	nop			; (mov r8, r8)
   1d69a:	46bd      	mov	sp, r7
   1d69c:	b004      	add	sp, #16
   1d69e:	bd80      	pop	{r7, pc}
   1d6a0:	200040dc 	.word	0x200040dc
   1d6a4:	0001abfb 	.word	0x0001abfb
   1d6a8:	00018e31 	.word	0x00018e31
   1d6ac:	20000110 	.word	0x20000110
   1d6b0:	200041b8 	.word	0x200041b8
   1d6b4:	00019b31 	.word	0x00019b31
   1d6b8:	00018e11 	.word	0x00018e11
   1d6bc:	00019fc1 	.word	0x00019fc1
   1d6c0:	000190cd 	.word	0x000190cd
   1d6c4:	0001e049 	.word	0x0001e049

0001d6c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   1d6c8:	b580      	push	{r7, lr}
   1d6ca:	b084      	sub	sp, #16
   1d6cc:	af00      	add	r7, sp, #0
   1d6ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   1d6d0:	687b      	ldr	r3, [r7, #4]
   1d6d2:	68db      	ldr	r3, [r3, #12]
   1d6d4:	68db      	ldr	r3, [r3, #12]
   1d6d6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   1d6d8:	68bb      	ldr	r3, [r7, #8]
   1d6da:	2b00      	cmp	r3, #0
   1d6dc:	d101      	bne.n	1d6e2 <xTaskRemoveFromEventList+0x1a>
   1d6de:	b672      	cpsid	i
   1d6e0:	e7fe      	b.n	1d6e0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   1d6e2:	68bb      	ldr	r3, [r7, #8]
   1d6e4:	3318      	adds	r3, #24
   1d6e6:	0018      	movs	r0, r3
   1d6e8:	4b2a      	ldr	r3, [pc, #168]	; (1d794 <xTaskRemoveFromEventList+0xcc>)
   1d6ea:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1d6ec:	4b2a      	ldr	r3, [pc, #168]	; (1d798 <xTaskRemoveFromEventList+0xd0>)
   1d6ee:	681b      	ldr	r3, [r3, #0]
   1d6f0:	2b00      	cmp	r3, #0
   1d6f2:	d132      	bne.n	1d75a <xTaskRemoveFromEventList+0x92>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1d6f4:	68bb      	ldr	r3, [r7, #8]
   1d6f6:	3304      	adds	r3, #4
   1d6f8:	0018      	movs	r0, r3
   1d6fa:	4b26      	ldr	r3, [pc, #152]	; (1d794 <xTaskRemoveFromEventList+0xcc>)
   1d6fc:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   1d6fe:	68bb      	ldr	r3, [r7, #8]
   1d700:	0018      	movs	r0, r3
   1d702:	4b26      	ldr	r3, [pc, #152]	; (1d79c <xTaskRemoveFromEventList+0xd4>)
   1d704:	4798      	blx	r3
   1d706:	0003      	movs	r3, r0
   1d708:	001a      	movs	r2, r3
   1d70a:	4b25      	ldr	r3, [pc, #148]	; (1d7a0 <xTaskRemoveFromEventList+0xd8>)
   1d70c:	881b      	ldrh	r3, [r3, #0]
   1d70e:	4013      	ands	r3, r2
   1d710:	b29b      	uxth	r3, r3
   1d712:	2b00      	cmp	r3, #0
   1d714:	d008      	beq.n	1d728 <xTaskRemoveFromEventList+0x60>
   1d716:	68bb      	ldr	r3, [r7, #8]
   1d718:	0018      	movs	r0, r3
   1d71a:	4b22      	ldr	r3, [pc, #136]	; (1d7a4 <xTaskRemoveFromEventList+0xdc>)
   1d71c:	4798      	blx	r3
   1d71e:	0003      	movs	r3, r0
   1d720:	b2db      	uxtb	r3, r3
   1d722:	0018      	movs	r0, r3
   1d724:	4b20      	ldr	r3, [pc, #128]	; (1d7a8 <xTaskRemoveFromEventList+0xe0>)
   1d726:	4798      	blx	r3
   1d728:	68bb      	ldr	r3, [r7, #8]
   1d72a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d72c:	4b1f      	ldr	r3, [pc, #124]	; (1d7ac <xTaskRemoveFromEventList+0xe4>)
   1d72e:	681b      	ldr	r3, [r3, #0]
   1d730:	429a      	cmp	r2, r3
   1d732:	d903      	bls.n	1d73c <xTaskRemoveFromEventList+0x74>
   1d734:	68bb      	ldr	r3, [r7, #8]
   1d736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d738:	4b1c      	ldr	r3, [pc, #112]	; (1d7ac <xTaskRemoveFromEventList+0xe4>)
   1d73a:	601a      	str	r2, [r3, #0]
   1d73c:	68bb      	ldr	r3, [r7, #8]
   1d73e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d740:	0013      	movs	r3, r2
   1d742:	009b      	lsls	r3, r3, #2
   1d744:	189b      	adds	r3, r3, r2
   1d746:	009b      	lsls	r3, r3, #2
   1d748:	4a19      	ldr	r2, [pc, #100]	; (1d7b0 <xTaskRemoveFromEventList+0xe8>)
   1d74a:	189a      	adds	r2, r3, r2
   1d74c:	68bb      	ldr	r3, [r7, #8]
   1d74e:	3304      	adds	r3, #4
   1d750:	0019      	movs	r1, r3
   1d752:	0010      	movs	r0, r2
   1d754:	4b17      	ldr	r3, [pc, #92]	; (1d7b4 <xTaskRemoveFromEventList+0xec>)
   1d756:	4798      	blx	r3
   1d758:	e007      	b.n	1d76a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   1d75a:	68bb      	ldr	r3, [r7, #8]
   1d75c:	3318      	adds	r3, #24
   1d75e:	001a      	movs	r2, r3
   1d760:	4b15      	ldr	r3, [pc, #84]	; (1d7b8 <xTaskRemoveFromEventList+0xf0>)
   1d762:	0011      	movs	r1, r2
   1d764:	0018      	movs	r0, r3
   1d766:	4b13      	ldr	r3, [pc, #76]	; (1d7b4 <xTaskRemoveFromEventList+0xec>)
   1d768:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1d76a:	68bb      	ldr	r3, [r7, #8]
   1d76c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d76e:	4b13      	ldr	r3, [pc, #76]	; (1d7bc <xTaskRemoveFromEventList+0xf4>)
   1d770:	681b      	ldr	r3, [r3, #0]
   1d772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d774:	429a      	cmp	r2, r3
   1d776:	d905      	bls.n	1d784 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   1d778:	2301      	movs	r3, #1
   1d77a:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   1d77c:	4b10      	ldr	r3, [pc, #64]	; (1d7c0 <xTaskRemoveFromEventList+0xf8>)
   1d77e:	2201      	movs	r2, #1
   1d780:	601a      	str	r2, [r3, #0]
   1d782:	e001      	b.n	1d788 <xTaskRemoveFromEventList+0xc0>
	}
	else
	{
		xReturn = pdFALSE;
   1d784:	2300      	movs	r3, #0
   1d786:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
   1d788:	68fb      	ldr	r3, [r7, #12]
}
   1d78a:	0018      	movs	r0, r3
   1d78c:	46bd      	mov	sp, r7
   1d78e:	b004      	add	sp, #16
   1d790:	bd80      	pop	{r7, pc}
   1d792:	46c0      	nop			; (mov r8, r8)
   1d794:	0001acab 	.word	0x0001acab
   1d798:	200041dc 	.word	0x200041dc
   1d79c:	00018e31 	.word	0x00018e31
   1d7a0:	20000110 	.word	0x20000110
   1d7a4:	00018e11 	.word	0x00018e11
   1d7a8:	000195e1 	.word	0x000195e1
   1d7ac:	200041bc 	.word	0x200041bc
   1d7b0:	200040e0 	.word	0x200040e0
   1d7b4:	0001abfb 	.word	0x0001abfb
   1d7b8:	20004174 	.word	0x20004174
   1d7bc:	200040dc 	.word	0x200040dc
   1d7c0:	200041c8 	.word	0x200041c8

0001d7c4 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1d7c4:	b580      	push	{r7, lr}
   1d7c6:	b082      	sub	sp, #8
   1d7c8:	af00      	add	r7, sp, #0
   1d7ca:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   1d7cc:	687b      	ldr	r3, [r7, #4]
   1d7ce:	2b00      	cmp	r3, #0
   1d7d0:	d101      	bne.n	1d7d6 <vTaskSetTimeOutState+0x12>
   1d7d2:	b672      	cpsid	i
   1d7d4:	e7fe      	b.n	1d7d4 <vTaskSetTimeOutState+0x10>
	taskENTER_CRITICAL();
   1d7d6:	4b08      	ldr	r3, [pc, #32]	; (1d7f8 <vTaskSetTimeOutState+0x34>)
   1d7d8:	4798      	blx	r3
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
   1d7da:	4b08      	ldr	r3, [pc, #32]	; (1d7fc <vTaskSetTimeOutState+0x38>)
   1d7dc:	681a      	ldr	r2, [r3, #0]
   1d7de:	687b      	ldr	r3, [r7, #4]
   1d7e0:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
   1d7e2:	4b07      	ldr	r3, [pc, #28]	; (1d800 <vTaskSetTimeOutState+0x3c>)
   1d7e4:	681a      	ldr	r2, [r3, #0]
   1d7e6:	687b      	ldr	r3, [r7, #4]
   1d7e8:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
   1d7ea:	4b06      	ldr	r3, [pc, #24]	; (1d804 <vTaskSetTimeOutState+0x40>)
   1d7ec:	4798      	blx	r3
}
   1d7ee:	46c0      	nop			; (mov r8, r8)
   1d7f0:	46bd      	mov	sp, r7
   1d7f2:	b002      	add	sp, #8
   1d7f4:	bd80      	pop	{r7, pc}
   1d7f6:	46c0      	nop			; (mov r8, r8)
   1d7f8:	0001ae39 	.word	0x0001ae39
   1d7fc:	200041cc 	.word	0x200041cc
   1d800:	200041b8 	.word	0x200041b8
   1d804:	0001ae5d 	.word	0x0001ae5d

0001d808 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1d808:	b580      	push	{r7, lr}
   1d80a:	b082      	sub	sp, #8
   1d80c:	af00      	add	r7, sp, #0
   1d80e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1d810:	4b05      	ldr	r3, [pc, #20]	; (1d828 <vTaskInternalSetTimeOutState+0x20>)
   1d812:	681a      	ldr	r2, [r3, #0]
   1d814:	687b      	ldr	r3, [r7, #4]
   1d816:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   1d818:	4b04      	ldr	r3, [pc, #16]	; (1d82c <vTaskInternalSetTimeOutState+0x24>)
   1d81a:	681a      	ldr	r2, [r3, #0]
   1d81c:	687b      	ldr	r3, [r7, #4]
   1d81e:	605a      	str	r2, [r3, #4]
}
   1d820:	46c0      	nop			; (mov r8, r8)
   1d822:	46bd      	mov	sp, r7
   1d824:	b002      	add	sp, #8
   1d826:	bd80      	pop	{r7, pc}
   1d828:	200041cc 	.word	0x200041cc
   1d82c:	200041b8 	.word	0x200041b8

0001d830 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   1d830:	b580      	push	{r7, lr}
   1d832:	b086      	sub	sp, #24
   1d834:	af00      	add	r7, sp, #0
   1d836:	6078      	str	r0, [r7, #4]
   1d838:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   1d83a:	687b      	ldr	r3, [r7, #4]
   1d83c:	2b00      	cmp	r3, #0
   1d83e:	d101      	bne.n	1d844 <xTaskCheckForTimeOut+0x14>
   1d840:	b672      	cpsid	i
   1d842:	e7fe      	b.n	1d842 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   1d844:	683b      	ldr	r3, [r7, #0]
   1d846:	2b00      	cmp	r3, #0
   1d848:	d101      	bne.n	1d84e <xTaskCheckForTimeOut+0x1e>
   1d84a:	b672      	cpsid	i
   1d84c:	e7fe      	b.n	1d84c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
   1d84e:	4b1e      	ldr	r3, [pc, #120]	; (1d8c8 <xTaskCheckForTimeOut+0x98>)
   1d850:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   1d852:	4b1e      	ldr	r3, [pc, #120]	; (1d8cc <xTaskCheckForTimeOut+0x9c>)
   1d854:	681b      	ldr	r3, [r3, #0]
   1d856:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   1d858:	687b      	ldr	r3, [r7, #4]
   1d85a:	685b      	ldr	r3, [r3, #4]
   1d85c:	693a      	ldr	r2, [r7, #16]
   1d85e:	1ad3      	subs	r3, r2, r3
   1d860:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   1d862:	683b      	ldr	r3, [r7, #0]
   1d864:	681b      	ldr	r3, [r3, #0]
   1d866:	3301      	adds	r3, #1
   1d868:	d102      	bne.n	1d870 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   1d86a:	2300      	movs	r3, #0
   1d86c:	617b      	str	r3, [r7, #20]
   1d86e:	e024      	b.n	1d8ba <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   1d870:	687b      	ldr	r3, [r7, #4]
   1d872:	681a      	ldr	r2, [r3, #0]
   1d874:	4b16      	ldr	r3, [pc, #88]	; (1d8d0 <xTaskCheckForTimeOut+0xa0>)
   1d876:	681b      	ldr	r3, [r3, #0]
   1d878:	429a      	cmp	r2, r3
   1d87a:	d007      	beq.n	1d88c <xTaskCheckForTimeOut+0x5c>
   1d87c:	687b      	ldr	r3, [r7, #4]
   1d87e:	685a      	ldr	r2, [r3, #4]
   1d880:	693b      	ldr	r3, [r7, #16]
   1d882:	429a      	cmp	r2, r3
   1d884:	d802      	bhi.n	1d88c <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   1d886:	2301      	movs	r3, #1
   1d888:	617b      	str	r3, [r7, #20]
   1d88a:	e016      	b.n	1d8ba <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   1d88c:	683b      	ldr	r3, [r7, #0]
   1d88e:	681a      	ldr	r2, [r3, #0]
   1d890:	68fb      	ldr	r3, [r7, #12]
   1d892:	429a      	cmp	r2, r3
   1d894:	d90c      	bls.n	1d8b0 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   1d896:	683b      	ldr	r3, [r7, #0]
   1d898:	681a      	ldr	r2, [r3, #0]
   1d89a:	68fb      	ldr	r3, [r7, #12]
   1d89c:	1ad2      	subs	r2, r2, r3
   1d89e:	683b      	ldr	r3, [r7, #0]
   1d8a0:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   1d8a2:	687b      	ldr	r3, [r7, #4]
   1d8a4:	0018      	movs	r0, r3
   1d8a6:	4b0b      	ldr	r3, [pc, #44]	; (1d8d4 <xTaskCheckForTimeOut+0xa4>)
   1d8a8:	4798      	blx	r3
			xReturn = pdFALSE;
   1d8aa:	2300      	movs	r3, #0
   1d8ac:	617b      	str	r3, [r7, #20]
   1d8ae:	e004      	b.n	1d8ba <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
   1d8b0:	683b      	ldr	r3, [r7, #0]
   1d8b2:	2200      	movs	r2, #0
   1d8b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   1d8b6:	2301      	movs	r3, #1
   1d8b8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   1d8ba:	4b07      	ldr	r3, [pc, #28]	; (1d8d8 <xTaskCheckForTimeOut+0xa8>)
   1d8bc:	4798      	blx	r3

	return xReturn;
   1d8be:	697b      	ldr	r3, [r7, #20]
}
   1d8c0:	0018      	movs	r0, r3
   1d8c2:	46bd      	mov	sp, r7
   1d8c4:	b006      	add	sp, #24
   1d8c6:	bd80      	pop	{r7, pc}
   1d8c8:	0001ae39 	.word	0x0001ae39
   1d8cc:	200041b8 	.word	0x200041b8
   1d8d0:	200041cc 	.word	0x200041cc
   1d8d4:	0001d809 	.word	0x0001d809
   1d8d8:	0001ae5d 	.word	0x0001ae5d

0001d8dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   1d8dc:	b580      	push	{r7, lr}
   1d8de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   1d8e0:	4b02      	ldr	r3, [pc, #8]	; (1d8ec <vTaskMissedYield+0x10>)
   1d8e2:	2201      	movs	r2, #1
   1d8e4:	601a      	str	r2, [r3, #0]
}
   1d8e6:	46c0      	nop			; (mov r8, r8)
   1d8e8:	46bd      	mov	sp, r7
   1d8ea:	bd80      	pop	{r7, pc}
   1d8ec:	200041c8 	.word	0x200041c8

0001d8f0 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
   1d8f0:	b580      	push	{r7, lr}
   1d8f2:	b084      	sub	sp, #16
   1d8f4:	af00      	add	r7, sp, #0
   1d8f6:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
   1d8f8:	687b      	ldr	r3, [r7, #4]
   1d8fa:	2b00      	cmp	r3, #0
   1d8fc:	d005      	beq.n	1d90a <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1d8fe:	687b      	ldr	r3, [r7, #4]
   1d900:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
   1d902:	68bb      	ldr	r3, [r7, #8]
   1d904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1d906:	60fb      	str	r3, [r7, #12]
   1d908:	e001      	b.n	1d90e <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
   1d90a:	2300      	movs	r3, #0
   1d90c:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
   1d90e:	68fb      	ldr	r3, [r7, #12]
	}
   1d910:	0018      	movs	r0, r3
   1d912:	46bd      	mov	sp, r7
   1d914:	b004      	add	sp, #16
   1d916:	bd80      	pop	{r7, pc}

0001d918 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
   1d918:	b580      	push	{r7, lr}
   1d91a:	b084      	sub	sp, #16
   1d91c:	af00      	add	r7, sp, #0
   1d91e:	6078      	str	r0, [r7, #4]
   1d920:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
   1d922:	687b      	ldr	r3, [r7, #4]
   1d924:	2b00      	cmp	r3, #0
   1d926:	d004      	beq.n	1d932 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1d928:	687b      	ldr	r3, [r7, #4]
   1d92a:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
   1d92c:	68fb      	ldr	r3, [r7, #12]
   1d92e:	683a      	ldr	r2, [r7, #0]
   1d930:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
   1d932:	46c0      	nop			; (mov r8, r8)
   1d934:	46bd      	mov	sp, r7
   1d936:	b004      	add	sp, #16
   1d938:	bd80      	pop	{r7, pc}
	...

0001d93c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   1d93c:	b580      	push	{r7, lr}
   1d93e:	b082      	sub	sp, #8
   1d940:	af00      	add	r7, sp, #0
   1d942:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   1d944:	4b04      	ldr	r3, [pc, #16]	; (1d958 <prvIdleTask+0x1c>)
   1d946:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   1d948:	4b04      	ldr	r3, [pc, #16]	; (1d95c <prvIdleTask+0x20>)
   1d94a:	681b      	ldr	r3, [r3, #0]
   1d94c:	2b01      	cmp	r3, #1
   1d94e:	d9f9      	bls.n	1d944 <prvIdleTask+0x8>
			{
				taskYIELD();
   1d950:	4b03      	ldr	r3, [pc, #12]	; (1d960 <prvIdleTask+0x24>)
   1d952:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
   1d954:	e7f6      	b.n	1d944 <prvIdleTask+0x8>
   1d956:	46c0      	nop			; (mov r8, r8)
   1d958:	0001d9f1 	.word	0x0001d9f1
   1d95c:	200040e0 	.word	0x200040e0
   1d960:	0001ae21 	.word	0x0001ae21

0001d964 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   1d964:	b580      	push	{r7, lr}
   1d966:	b082      	sub	sp, #8
   1d968:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1d96a:	2300      	movs	r3, #0
   1d96c:	607b      	str	r3, [r7, #4]
   1d96e:	e00c      	b.n	1d98a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1d970:	687a      	ldr	r2, [r7, #4]
   1d972:	0013      	movs	r3, r2
   1d974:	009b      	lsls	r3, r3, #2
   1d976:	189b      	adds	r3, r3, r2
   1d978:	009b      	lsls	r3, r3, #2
   1d97a:	4a14      	ldr	r2, [pc, #80]	; (1d9cc <prvInitialiseTaskLists+0x68>)
   1d97c:	189b      	adds	r3, r3, r2
   1d97e:	0018      	movs	r0, r3
   1d980:	4b13      	ldr	r3, [pc, #76]	; (1d9d0 <prvInitialiseTaskLists+0x6c>)
   1d982:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1d984:	687b      	ldr	r3, [r7, #4]
   1d986:	3301      	adds	r3, #1
   1d988:	607b      	str	r3, [r7, #4]
   1d98a:	687b      	ldr	r3, [r7, #4]
   1d98c:	2b04      	cmp	r3, #4
   1d98e:	d9ef      	bls.n	1d970 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   1d990:	4b10      	ldr	r3, [pc, #64]	; (1d9d4 <prvInitialiseTaskLists+0x70>)
   1d992:	0018      	movs	r0, r3
   1d994:	4b0e      	ldr	r3, [pc, #56]	; (1d9d0 <prvInitialiseTaskLists+0x6c>)
   1d996:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   1d998:	4b0f      	ldr	r3, [pc, #60]	; (1d9d8 <prvInitialiseTaskLists+0x74>)
   1d99a:	0018      	movs	r0, r3
   1d99c:	4b0c      	ldr	r3, [pc, #48]	; (1d9d0 <prvInitialiseTaskLists+0x6c>)
   1d99e:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   1d9a0:	4b0e      	ldr	r3, [pc, #56]	; (1d9dc <prvInitialiseTaskLists+0x78>)
   1d9a2:	0018      	movs	r0, r3
   1d9a4:	4b0a      	ldr	r3, [pc, #40]	; (1d9d0 <prvInitialiseTaskLists+0x6c>)
   1d9a6:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   1d9a8:	4b0d      	ldr	r3, [pc, #52]	; (1d9e0 <prvInitialiseTaskLists+0x7c>)
   1d9aa:	0018      	movs	r0, r3
   1d9ac:	4b08      	ldr	r3, [pc, #32]	; (1d9d0 <prvInitialiseTaskLists+0x6c>)
   1d9ae:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   1d9b0:	4b0c      	ldr	r3, [pc, #48]	; (1d9e4 <prvInitialiseTaskLists+0x80>)
   1d9b2:	0018      	movs	r0, r3
   1d9b4:	4b06      	ldr	r3, [pc, #24]	; (1d9d0 <prvInitialiseTaskLists+0x6c>)
   1d9b6:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   1d9b8:	4b0b      	ldr	r3, [pc, #44]	; (1d9e8 <prvInitialiseTaskLists+0x84>)
   1d9ba:	4a06      	ldr	r2, [pc, #24]	; (1d9d4 <prvInitialiseTaskLists+0x70>)
   1d9bc:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   1d9be:	4b0b      	ldr	r3, [pc, #44]	; (1d9ec <prvInitialiseTaskLists+0x88>)
   1d9c0:	4a05      	ldr	r2, [pc, #20]	; (1d9d8 <prvInitialiseTaskLists+0x74>)
   1d9c2:	601a      	str	r2, [r3, #0]
}
   1d9c4:	46c0      	nop			; (mov r8, r8)
   1d9c6:	46bd      	mov	sp, r7
   1d9c8:	b002      	add	sp, #8
   1d9ca:	bd80      	pop	{r7, pc}
   1d9cc:	200040e0 	.word	0x200040e0
   1d9d0:	0001aba9 	.word	0x0001aba9
   1d9d4:	20004144 	.word	0x20004144
   1d9d8:	20004158 	.word	0x20004158
   1d9dc:	20004174 	.word	0x20004174
   1d9e0:	20004188 	.word	0x20004188
   1d9e4:	200041a0 	.word	0x200041a0
   1d9e8:	2000416c 	.word	0x2000416c
   1d9ec:	20004170 	.word	0x20004170

0001d9f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   1d9f0:	b580      	push	{r7, lr}
   1d9f2:	b082      	sub	sp, #8
   1d9f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1d9f6:	e01a      	b.n	1da2e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
   1d9f8:	4b11      	ldr	r3, [pc, #68]	; (1da40 <prvCheckTasksWaitingTermination+0x50>)
   1d9fa:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   1d9fc:	4b11      	ldr	r3, [pc, #68]	; (1da44 <prvCheckTasksWaitingTermination+0x54>)
   1d9fe:	68db      	ldr	r3, [r3, #12]
   1da00:	68db      	ldr	r3, [r3, #12]
   1da02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1da04:	687b      	ldr	r3, [r7, #4]
   1da06:	3304      	adds	r3, #4
   1da08:	0018      	movs	r0, r3
   1da0a:	4b0f      	ldr	r3, [pc, #60]	; (1da48 <prvCheckTasksWaitingTermination+0x58>)
   1da0c:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
   1da0e:	4b0f      	ldr	r3, [pc, #60]	; (1da4c <prvCheckTasksWaitingTermination+0x5c>)
   1da10:	681b      	ldr	r3, [r3, #0]
   1da12:	1e5a      	subs	r2, r3, #1
   1da14:	4b0d      	ldr	r3, [pc, #52]	; (1da4c <prvCheckTasksWaitingTermination+0x5c>)
   1da16:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
   1da18:	4b0d      	ldr	r3, [pc, #52]	; (1da50 <prvCheckTasksWaitingTermination+0x60>)
   1da1a:	681b      	ldr	r3, [r3, #0]
   1da1c:	1e5a      	subs	r2, r3, #1
   1da1e:	4b0c      	ldr	r3, [pc, #48]	; (1da50 <prvCheckTasksWaitingTermination+0x60>)
   1da20:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
   1da22:	4b0c      	ldr	r3, [pc, #48]	; (1da54 <prvCheckTasksWaitingTermination+0x64>)
   1da24:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
   1da26:	687b      	ldr	r3, [r7, #4]
   1da28:	0018      	movs	r0, r3
   1da2a:	4b0b      	ldr	r3, [pc, #44]	; (1da58 <prvCheckTasksWaitingTermination+0x68>)
   1da2c:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1da2e:	4b08      	ldr	r3, [pc, #32]	; (1da50 <prvCheckTasksWaitingTermination+0x60>)
   1da30:	681b      	ldr	r3, [r3, #0]
   1da32:	2b00      	cmp	r3, #0
   1da34:	d1e0      	bne.n	1d9f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   1da36:	46c0      	nop			; (mov r8, r8)
   1da38:	46bd      	mov	sp, r7
   1da3a:	b002      	add	sp, #8
   1da3c:	bd80      	pop	{r7, pc}
   1da3e:	46c0      	nop			; (mov r8, r8)
   1da40:	0001ae39 	.word	0x0001ae39
   1da44:	20004188 	.word	0x20004188
   1da48:	0001acab 	.word	0x0001acab
   1da4c:	200041b4 	.word	0x200041b4
   1da50:	2000419c 	.word	0x2000419c
   1da54:	0001ae5d 	.word	0x0001ae5d
   1da58:	0001dacd 	.word	0x0001dacd

0001da5c <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
   1da5c:	b580      	push	{r7, lr}
   1da5e:	b084      	sub	sp, #16
   1da60:	af00      	add	r7, sp, #0
   1da62:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
   1da64:	2300      	movs	r3, #0
   1da66:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1da68:	e005      	b.n	1da76 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
   1da6a:	687b      	ldr	r3, [r7, #4]
   1da6c:	3301      	adds	r3, #1
   1da6e:	607b      	str	r3, [r7, #4]
			ulCount++;
   1da70:	68fb      	ldr	r3, [r7, #12]
   1da72:	3301      	adds	r3, #1
   1da74:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1da76:	687b      	ldr	r3, [r7, #4]
   1da78:	781b      	ldrb	r3, [r3, #0]
   1da7a:	2ba5      	cmp	r3, #165	; 0xa5
   1da7c:	d0f5      	beq.n	1da6a <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
   1da7e:	68fb      	ldr	r3, [r7, #12]
   1da80:	089b      	lsrs	r3, r3, #2
   1da82:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
   1da84:	68fb      	ldr	r3, [r7, #12]
   1da86:	b29b      	uxth	r3, r3
	}
   1da88:	0018      	movs	r0, r3
   1da8a:	46bd      	mov	sp, r7
   1da8c:	b004      	add	sp, #16
   1da8e:	bd80      	pop	{r7, pc}

0001da90 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
   1da90:	b580      	push	{r7, lr}
   1da92:	b086      	sub	sp, #24
   1da94:	af00      	add	r7, sp, #0
   1da96:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
   1da98:	687b      	ldr	r3, [r7, #4]
   1da9a:	2b00      	cmp	r3, #0
   1da9c:	d102      	bne.n	1daa4 <uxTaskGetStackHighWaterMark+0x14>
   1da9e:	4b09      	ldr	r3, [pc, #36]	; (1dac4 <uxTaskGetStackHighWaterMark+0x34>)
   1daa0:	681b      	ldr	r3, [r3, #0]
   1daa2:	e000      	b.n	1daa6 <uxTaskGetStackHighWaterMark+0x16>
   1daa4:	687b      	ldr	r3, [r7, #4]
   1daa6:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
   1daa8:	697b      	ldr	r3, [r7, #20]
   1daaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1daac:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
   1daae:	693b      	ldr	r3, [r7, #16]
   1dab0:	0018      	movs	r0, r3
   1dab2:	4b05      	ldr	r3, [pc, #20]	; (1dac8 <uxTaskGetStackHighWaterMark+0x38>)
   1dab4:	4798      	blx	r3
   1dab6:	0003      	movs	r3, r0
   1dab8:	60fb      	str	r3, [r7, #12]

		return uxReturn;
   1daba:	68fb      	ldr	r3, [r7, #12]
	}
   1dabc:	0018      	movs	r0, r3
   1dabe:	46bd      	mov	sp, r7
   1dac0:	b006      	add	sp, #24
   1dac2:	bd80      	pop	{r7, pc}
   1dac4:	200040dc 	.word	0x200040dc
   1dac8:	0001da5d 	.word	0x0001da5d

0001dacc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   1dacc:	b580      	push	{r7, lr}
   1dace:	b082      	sub	sp, #8
   1dad0:	af00      	add	r7, sp, #0
   1dad2:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
   1dad4:	687b      	ldr	r3, [r7, #4]
   1dad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1dad8:	0018      	movs	r0, r3
   1dada:	4b05      	ldr	r3, [pc, #20]	; (1daf0 <prvDeleteTCB+0x24>)
   1dadc:	4798      	blx	r3
			vPortFree( pxTCB );
   1dade:	687b      	ldr	r3, [r7, #4]
   1dae0:	0018      	movs	r0, r3
   1dae2:	4b03      	ldr	r3, [pc, #12]	; (1daf0 <prvDeleteTCB+0x24>)
   1dae4:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   1dae6:	46c0      	nop			; (mov r8, r8)
   1dae8:	46bd      	mov	sp, r7
   1daea:	b002      	add	sp, #8
   1daec:	bd80      	pop	{r7, pc}
   1daee:	46c0      	nop			; (mov r8, r8)
   1daf0:	0001b035 	.word	0x0001b035

0001daf4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   1daf4:	b580      	push	{r7, lr}
   1daf6:	b082      	sub	sp, #8
   1daf8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1dafa:	4b0e      	ldr	r3, [pc, #56]	; (1db34 <prvResetNextTaskUnblockTime+0x40>)
   1dafc:	681b      	ldr	r3, [r3, #0]
   1dafe:	681b      	ldr	r3, [r3, #0]
   1db00:	2b00      	cmp	r3, #0
   1db02:	d101      	bne.n	1db08 <prvResetNextTaskUnblockTime+0x14>
   1db04:	2301      	movs	r3, #1
   1db06:	e000      	b.n	1db0a <prvResetNextTaskUnblockTime+0x16>
   1db08:	2300      	movs	r3, #0
   1db0a:	2b00      	cmp	r3, #0
   1db0c:	d004      	beq.n	1db18 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   1db0e:	4b0a      	ldr	r3, [pc, #40]	; (1db38 <prvResetNextTaskUnblockTime+0x44>)
   1db10:	2201      	movs	r2, #1
   1db12:	4252      	negs	r2, r2
   1db14:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   1db16:	e008      	b.n	1db2a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1db18:	4b06      	ldr	r3, [pc, #24]	; (1db34 <prvResetNextTaskUnblockTime+0x40>)
   1db1a:	681b      	ldr	r3, [r3, #0]
   1db1c:	68db      	ldr	r3, [r3, #12]
   1db1e:	68db      	ldr	r3, [r3, #12]
   1db20:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1db22:	687b      	ldr	r3, [r7, #4]
   1db24:	685a      	ldr	r2, [r3, #4]
   1db26:	4b04      	ldr	r3, [pc, #16]	; (1db38 <prvResetNextTaskUnblockTime+0x44>)
   1db28:	601a      	str	r2, [r3, #0]
}
   1db2a:	46c0      	nop			; (mov r8, r8)
   1db2c:	46bd      	mov	sp, r7
   1db2e:	b002      	add	sp, #8
   1db30:	bd80      	pop	{r7, pc}
   1db32:	46c0      	nop			; (mov r8, r8)
   1db34:	2000416c 	.word	0x2000416c
   1db38:	200041d4 	.word	0x200041d4

0001db3c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
   1db3c:	b580      	push	{r7, lr}
   1db3e:	b082      	sub	sp, #8
   1db40:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   1db42:	4b04      	ldr	r3, [pc, #16]	; (1db54 <xTaskGetCurrentTaskHandle+0x18>)
   1db44:	681b      	ldr	r3, [r3, #0]
   1db46:	607b      	str	r3, [r7, #4]

		return xReturn;
   1db48:	687b      	ldr	r3, [r7, #4]
	}
   1db4a:	0018      	movs	r0, r3
   1db4c:	46bd      	mov	sp, r7
   1db4e:	b002      	add	sp, #8
   1db50:	bd80      	pop	{r7, pc}
   1db52:	46c0      	nop			; (mov r8, r8)
   1db54:	200040dc 	.word	0x200040dc

0001db58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   1db58:	b580      	push	{r7, lr}
   1db5a:	b082      	sub	sp, #8
   1db5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   1db5e:	4b0a      	ldr	r3, [pc, #40]	; (1db88 <xTaskGetSchedulerState+0x30>)
   1db60:	681b      	ldr	r3, [r3, #0]
   1db62:	2b00      	cmp	r3, #0
   1db64:	d102      	bne.n	1db6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   1db66:	2301      	movs	r3, #1
   1db68:	607b      	str	r3, [r7, #4]
   1db6a:	e008      	b.n	1db7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1db6c:	4b07      	ldr	r3, [pc, #28]	; (1db8c <xTaskGetSchedulerState+0x34>)
   1db6e:	681b      	ldr	r3, [r3, #0]
   1db70:	2b00      	cmp	r3, #0
   1db72:	d102      	bne.n	1db7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   1db74:	2302      	movs	r3, #2
   1db76:	607b      	str	r3, [r7, #4]
   1db78:	e001      	b.n	1db7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   1db7a:	2300      	movs	r3, #0
   1db7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   1db7e:	687b      	ldr	r3, [r7, #4]
	}
   1db80:	0018      	movs	r0, r3
   1db82:	46bd      	mov	sp, r7
   1db84:	b002      	add	sp, #8
   1db86:	bd80      	pop	{r7, pc}
   1db88:	200041c0 	.word	0x200041c0
   1db8c:	200041dc 	.word	0x200041dc

0001db90 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   1db90:	b590      	push	{r4, r7, lr}
   1db92:	b085      	sub	sp, #20
   1db94:	af00      	add	r7, sp, #0
   1db96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
   1db98:	687b      	ldr	r3, [r7, #4]
   1db9a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1db9c:	2300      	movs	r3, #0
   1db9e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
   1dba0:	687b      	ldr	r3, [r7, #4]
   1dba2:	2b00      	cmp	r3, #0
   1dba4:	d100      	bne.n	1dba8 <xTaskPriorityInherit+0x18>
   1dba6:	e09d      	b.n	1dce4 <xTaskPriorityInherit+0x154>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   1dba8:	68bb      	ldr	r3, [r7, #8]
   1dbaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dbac:	4b50      	ldr	r3, [pc, #320]	; (1dcf0 <xTaskPriorityInherit+0x160>)
   1dbae:	681b      	ldr	r3, [r3, #0]
   1dbb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1dbb2:	429a      	cmp	r2, r3
   1dbb4:	d300      	bcc.n	1dbb8 <xTaskPriorityInherit+0x28>
   1dbb6:	e08c      	b.n	1dcd2 <xTaskPriorityInherit+0x142>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1dbb8:	68bb      	ldr	r3, [r7, #8]
   1dbba:	699b      	ldr	r3, [r3, #24]
   1dbbc:	2b00      	cmp	r3, #0
   1dbbe:	db06      	blt.n	1dbce <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1dbc0:	4b4b      	ldr	r3, [pc, #300]	; (1dcf0 <xTaskPriorityInherit+0x160>)
   1dbc2:	681b      	ldr	r3, [r3, #0]
   1dbc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1dbc6:	2205      	movs	r2, #5
   1dbc8:	1ad2      	subs	r2, r2, r3
   1dbca:	68bb      	ldr	r3, [r7, #8]
   1dbcc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   1dbce:	68bb      	ldr	r3, [r7, #8]
   1dbd0:	6959      	ldr	r1, [r3, #20]
   1dbd2:	68bb      	ldr	r3, [r7, #8]
   1dbd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dbd6:	0013      	movs	r3, r2
   1dbd8:	009b      	lsls	r3, r3, #2
   1dbda:	189b      	adds	r3, r3, r2
   1dbdc:	009b      	lsls	r3, r3, #2
   1dbde:	4a45      	ldr	r2, [pc, #276]	; (1dcf4 <xTaskPriorityInherit+0x164>)
   1dbe0:	189b      	adds	r3, r3, r2
   1dbe2:	4299      	cmp	r1, r3
   1dbe4:	d101      	bne.n	1dbea <xTaskPriorityInherit+0x5a>
   1dbe6:	2301      	movs	r3, #1
   1dbe8:	e000      	b.n	1dbec <xTaskPriorityInherit+0x5c>
   1dbea:	2300      	movs	r3, #0
   1dbec:	2b00      	cmp	r3, #0
   1dbee:	d037      	beq.n	1dc60 <xTaskPriorityInherit+0xd0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1dbf0:	68bb      	ldr	r3, [r7, #8]
   1dbf2:	3304      	adds	r3, #4
   1dbf4:	0018      	movs	r0, r3
   1dbf6:	4b40      	ldr	r3, [pc, #256]	; (1dcf8 <xTaskPriorityInherit+0x168>)
   1dbf8:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1dbfa:	4b3d      	ldr	r3, [pc, #244]	; (1dcf0 <xTaskPriorityInherit+0x160>)
   1dbfc:	681b      	ldr	r3, [r3, #0]
   1dbfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dc00:	68bb      	ldr	r3, [r7, #8]
   1dc02:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   1dc04:	68bb      	ldr	r3, [r7, #8]
   1dc06:	0018      	movs	r0, r3
   1dc08:	4b3c      	ldr	r3, [pc, #240]	; (1dcfc <xTaskPriorityInherit+0x16c>)
   1dc0a:	4798      	blx	r3
   1dc0c:	0003      	movs	r3, r0
   1dc0e:	001a      	movs	r2, r3
   1dc10:	4b3b      	ldr	r3, [pc, #236]	; (1dd00 <xTaskPriorityInherit+0x170>)
   1dc12:	881b      	ldrh	r3, [r3, #0]
   1dc14:	4013      	ands	r3, r2
   1dc16:	b29b      	uxth	r3, r3
   1dc18:	2b00      	cmp	r3, #0
   1dc1a:	d008      	beq.n	1dc2e <xTaskPriorityInherit+0x9e>
   1dc1c:	68bb      	ldr	r3, [r7, #8]
   1dc1e:	0018      	movs	r0, r3
   1dc20:	4b38      	ldr	r3, [pc, #224]	; (1dd04 <xTaskPriorityInherit+0x174>)
   1dc22:	4798      	blx	r3
   1dc24:	0003      	movs	r3, r0
   1dc26:	b2db      	uxtb	r3, r3
   1dc28:	0018      	movs	r0, r3
   1dc2a:	4b37      	ldr	r3, [pc, #220]	; (1dd08 <xTaskPriorityInherit+0x178>)
   1dc2c:	4798      	blx	r3
   1dc2e:	68bb      	ldr	r3, [r7, #8]
   1dc30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dc32:	4b36      	ldr	r3, [pc, #216]	; (1dd0c <xTaskPriorityInherit+0x17c>)
   1dc34:	681b      	ldr	r3, [r3, #0]
   1dc36:	429a      	cmp	r2, r3
   1dc38:	d903      	bls.n	1dc42 <xTaskPriorityInherit+0xb2>
   1dc3a:	68bb      	ldr	r3, [r7, #8]
   1dc3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dc3e:	4b33      	ldr	r3, [pc, #204]	; (1dd0c <xTaskPriorityInherit+0x17c>)
   1dc40:	601a      	str	r2, [r3, #0]
   1dc42:	68bb      	ldr	r3, [r7, #8]
   1dc44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dc46:	0013      	movs	r3, r2
   1dc48:	009b      	lsls	r3, r3, #2
   1dc4a:	189b      	adds	r3, r3, r2
   1dc4c:	009b      	lsls	r3, r3, #2
   1dc4e:	4a29      	ldr	r2, [pc, #164]	; (1dcf4 <xTaskPriorityInherit+0x164>)
   1dc50:	189a      	adds	r2, r3, r2
   1dc52:	68bb      	ldr	r3, [r7, #8]
   1dc54:	3304      	adds	r3, #4
   1dc56:	0019      	movs	r1, r3
   1dc58:	0010      	movs	r0, r2
   1dc5a:	4b2d      	ldr	r3, [pc, #180]	; (1dd10 <xTaskPriorityInherit+0x180>)
   1dc5c:	4798      	blx	r3
   1dc5e:	e004      	b.n	1dc6a <xTaskPriorityInherit+0xda>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1dc60:	4b23      	ldr	r3, [pc, #140]	; (1dcf0 <xTaskPriorityInherit+0x160>)
   1dc62:	681b      	ldr	r3, [r3, #0]
   1dc64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dc66:	68bb      	ldr	r3, [r7, #8]
   1dc68:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
   1dc6a:	68bb      	ldr	r3, [r7, #8]
   1dc6c:	0018      	movs	r0, r3
   1dc6e:	4b23      	ldr	r3, [pc, #140]	; (1dcfc <xTaskPriorityInherit+0x16c>)
   1dc70:	4798      	blx	r3
   1dc72:	0003      	movs	r3, r0
   1dc74:	001a      	movs	r2, r3
   1dc76:	4b22      	ldr	r3, [pc, #136]	; (1dd00 <xTaskPriorityInherit+0x170>)
   1dc78:	881b      	ldrh	r3, [r3, #0]
   1dc7a:	4013      	ands	r3, r2
   1dc7c:	b29b      	uxth	r3, r3
   1dc7e:	2b00      	cmp	r3, #0
   1dc80:	d024      	beq.n	1dccc <xTaskPriorityInherit+0x13c>
   1dc82:	68bb      	ldr	r3, [r7, #8]
   1dc84:	0018      	movs	r0, r3
   1dc86:	4b1f      	ldr	r3, [pc, #124]	; (1dd04 <xTaskPriorityInherit+0x174>)
   1dc88:	4798      	blx	r3
   1dc8a:	0003      	movs	r3, r0
   1dc8c:	b2db      	uxtb	r3, r3
   1dc8e:	001c      	movs	r4, r3
   1dc90:	68bb      	ldr	r3, [r7, #8]
   1dc92:	0018      	movs	r0, r3
   1dc94:	4b1b      	ldr	r3, [pc, #108]	; (1dd04 <xTaskPriorityInherit+0x174>)
   1dc96:	4798      	blx	r3
   1dc98:	0003      	movs	r3, r0
   1dc9a:	b2db      	uxtb	r3, r3
   1dc9c:	0019      	movs	r1, r3
   1dc9e:	2003      	movs	r0, #3
   1dca0:	4b1c      	ldr	r3, [pc, #112]	; (1dd14 <xTaskPriorityInherit+0x184>)
   1dca2:	4798      	blx	r3
   1dca4:	0003      	movs	r3, r0
   1dca6:	0022      	movs	r2, r4
   1dca8:	2103      	movs	r1, #3
   1dcaa:	208e      	movs	r0, #142	; 0x8e
   1dcac:	4c1a      	ldr	r4, [pc, #104]	; (1dd18 <xTaskPriorityInherit+0x188>)
   1dcae:	47a0      	blx	r4
   1dcb0:	68bb      	ldr	r3, [r7, #8]
   1dcb2:	0018      	movs	r0, r3
   1dcb4:	4b13      	ldr	r3, [pc, #76]	; (1dd04 <xTaskPriorityInherit+0x174>)
   1dcb6:	4798      	blx	r3
   1dcb8:	0003      	movs	r3, r0
   1dcba:	b2d9      	uxtb	r1, r3
   1dcbc:	4b0c      	ldr	r3, [pc, #48]	; (1dcf0 <xTaskPriorityInherit+0x160>)
   1dcbe:	681b      	ldr	r3, [r3, #0]
   1dcc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1dcc2:	b2db      	uxtb	r3, r3
   1dcc4:	001a      	movs	r2, r3
   1dcc6:	2003      	movs	r0, #3
   1dcc8:	4b14      	ldr	r3, [pc, #80]	; (1dd1c <xTaskPriorityInherit+0x18c>)
   1dcca:	4798      	blx	r3

				/* Inheritance occurred. */
				xReturn = pdTRUE;
   1dccc:	2301      	movs	r3, #1
   1dcce:	60fb      	str	r3, [r7, #12]
   1dcd0:	e008      	b.n	1dce4 <xTaskPriorityInherit+0x154>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   1dcd2:	68bb      	ldr	r3, [r7, #8]
   1dcd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1dcd6:	4b06      	ldr	r3, [pc, #24]	; (1dcf0 <xTaskPriorityInherit+0x160>)
   1dcd8:	681b      	ldr	r3, [r3, #0]
   1dcda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1dcdc:	429a      	cmp	r2, r3
   1dcde:	d201      	bcs.n	1dce4 <xTaskPriorityInherit+0x154>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
   1dce0:	2301      	movs	r3, #1
   1dce2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1dce4:	68fb      	ldr	r3, [r7, #12]
	}
   1dce6:	0018      	movs	r0, r3
   1dce8:	46bd      	mov	sp, r7
   1dcea:	b005      	add	sp, #20
   1dcec:	bd90      	pop	{r4, r7, pc}
   1dcee:	46c0      	nop			; (mov r8, r8)
   1dcf0:	200040dc 	.word	0x200040dc
   1dcf4:	200040e0 	.word	0x200040e0
   1dcf8:	0001acab 	.word	0x0001acab
   1dcfc:	00018e31 	.word	0x00018e31
   1dd00:	20000110 	.word	0x20000110
   1dd04:	00018e11 	.word	0x00018e11
   1dd08:	000195e1 	.word	0x000195e1
   1dd0c:	200041bc 	.word	0x200041bc
   1dd10:	0001abfb 	.word	0x0001abfb
   1dd14:	00019de9 	.word	0x00019de9
   1dd18:	00019959 	.word	0x00019959
   1dd1c:	00019d45 	.word	0x00019d45

0001dd20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   1dd20:	b590      	push	{r4, r7, lr}
   1dd22:	b085      	sub	sp, #20
   1dd24:	af00      	add	r7, sp, #0
   1dd26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1dd28:	687b      	ldr	r3, [r7, #4]
   1dd2a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1dd2c:	2300      	movs	r3, #0
   1dd2e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1dd30:	687b      	ldr	r3, [r7, #4]
   1dd32:	2b00      	cmp	r3, #0
   1dd34:	d100      	bne.n	1dd38 <xTaskPriorityDisinherit+0x18>
   1dd36:	e089      	b.n	1de4c <xTaskPriorityDisinherit+0x12c>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
   1dd38:	4b47      	ldr	r3, [pc, #284]	; (1de58 <xTaskPriorityDisinherit+0x138>)
   1dd3a:	681b      	ldr	r3, [r3, #0]
   1dd3c:	68ba      	ldr	r2, [r7, #8]
   1dd3e:	429a      	cmp	r2, r3
   1dd40:	d001      	beq.n	1dd46 <xTaskPriorityDisinherit+0x26>
   1dd42:	b672      	cpsid	i
   1dd44:	e7fe      	b.n	1dd44 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
   1dd46:	68bb      	ldr	r3, [r7, #8]
   1dd48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1dd4a:	2b00      	cmp	r3, #0
   1dd4c:	d101      	bne.n	1dd52 <xTaskPriorityDisinherit+0x32>
   1dd4e:	b672      	cpsid	i
   1dd50:	e7fe      	b.n	1dd50 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
   1dd52:	68bb      	ldr	r3, [r7, #8]
   1dd54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1dd56:	1e5a      	subs	r2, r3, #1
   1dd58:	68bb      	ldr	r3, [r7, #8]
   1dd5a:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   1dd5c:	68bb      	ldr	r3, [r7, #8]
   1dd5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dd60:	68bb      	ldr	r3, [r7, #8]
   1dd62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1dd64:	429a      	cmp	r2, r3
   1dd66:	d071      	beq.n	1de4c <xTaskPriorityDisinherit+0x12c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   1dd68:	68bb      	ldr	r3, [r7, #8]
   1dd6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1dd6c:	2b00      	cmp	r3, #0
   1dd6e:	d16d      	bne.n	1de4c <xTaskPriorityDisinherit+0x12c>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1dd70:	68bb      	ldr	r3, [r7, #8]
   1dd72:	3304      	adds	r3, #4
   1dd74:	0018      	movs	r0, r3
   1dd76:	4b39      	ldr	r3, [pc, #228]	; (1de5c <xTaskPriorityDisinherit+0x13c>)
   1dd78:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1dd7a:	68bb      	ldr	r3, [r7, #8]
   1dd7c:	0018      	movs	r0, r3
   1dd7e:	4b38      	ldr	r3, [pc, #224]	; (1de60 <xTaskPriorityDisinherit+0x140>)
   1dd80:	4798      	blx	r3
   1dd82:	0003      	movs	r3, r0
   1dd84:	001a      	movs	r2, r3
   1dd86:	4b37      	ldr	r3, [pc, #220]	; (1de64 <xTaskPriorityDisinherit+0x144>)
   1dd88:	881b      	ldrh	r3, [r3, #0]
   1dd8a:	4013      	ands	r3, r2
   1dd8c:	b29b      	uxth	r3, r3
   1dd8e:	2b00      	cmp	r3, #0
   1dd90:	d023      	beq.n	1ddda <xTaskPriorityDisinherit+0xba>
   1dd92:	68bb      	ldr	r3, [r7, #8]
   1dd94:	0018      	movs	r0, r3
   1dd96:	4b34      	ldr	r3, [pc, #208]	; (1de68 <xTaskPriorityDisinherit+0x148>)
   1dd98:	4798      	blx	r3
   1dd9a:	0003      	movs	r3, r0
   1dd9c:	b2db      	uxtb	r3, r3
   1dd9e:	001c      	movs	r4, r3
   1dda0:	68bb      	ldr	r3, [r7, #8]
   1dda2:	0018      	movs	r0, r3
   1dda4:	4b30      	ldr	r3, [pc, #192]	; (1de68 <xTaskPriorityDisinherit+0x148>)
   1dda6:	4798      	blx	r3
   1dda8:	0003      	movs	r3, r0
   1ddaa:	b2db      	uxtb	r3, r3
   1ddac:	0019      	movs	r1, r3
   1ddae:	2003      	movs	r0, #3
   1ddb0:	4b2e      	ldr	r3, [pc, #184]	; (1de6c <xTaskPriorityDisinherit+0x14c>)
   1ddb2:	4798      	blx	r3
   1ddb4:	0003      	movs	r3, r0
   1ddb6:	0022      	movs	r2, r4
   1ddb8:	2103      	movs	r1, #3
   1ddba:	208f      	movs	r0, #143	; 0x8f
   1ddbc:	4c2c      	ldr	r4, [pc, #176]	; (1de70 <xTaskPriorityDisinherit+0x150>)
   1ddbe:	47a0      	blx	r4
   1ddc0:	68bb      	ldr	r3, [r7, #8]
   1ddc2:	0018      	movs	r0, r3
   1ddc4:	4b28      	ldr	r3, [pc, #160]	; (1de68 <xTaskPriorityDisinherit+0x148>)
   1ddc6:	4798      	blx	r3
   1ddc8:	0003      	movs	r3, r0
   1ddca:	b2d9      	uxtb	r1, r3
   1ddcc:	68bb      	ldr	r3, [r7, #8]
   1ddce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1ddd0:	b2db      	uxtb	r3, r3
   1ddd2:	001a      	movs	r2, r3
   1ddd4:	2003      	movs	r0, #3
   1ddd6:	4b27      	ldr	r3, [pc, #156]	; (1de74 <xTaskPriorityDisinherit+0x154>)
   1ddd8:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   1ddda:	68bb      	ldr	r3, [r7, #8]
   1dddc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1ddde:	68bb      	ldr	r3, [r7, #8]
   1dde0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1dde2:	68bb      	ldr	r3, [r7, #8]
   1dde4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1dde6:	2205      	movs	r2, #5
   1dde8:	1ad2      	subs	r2, r2, r3
   1ddea:	68bb      	ldr	r3, [r7, #8]
   1ddec:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   1ddee:	68bb      	ldr	r3, [r7, #8]
   1ddf0:	0018      	movs	r0, r3
   1ddf2:	4b1b      	ldr	r3, [pc, #108]	; (1de60 <xTaskPriorityDisinherit+0x140>)
   1ddf4:	4798      	blx	r3
   1ddf6:	0003      	movs	r3, r0
   1ddf8:	001a      	movs	r2, r3
   1ddfa:	4b1a      	ldr	r3, [pc, #104]	; (1de64 <xTaskPriorityDisinherit+0x144>)
   1ddfc:	881b      	ldrh	r3, [r3, #0]
   1ddfe:	4013      	ands	r3, r2
   1de00:	b29b      	uxth	r3, r3
   1de02:	2b00      	cmp	r3, #0
   1de04:	d008      	beq.n	1de18 <xTaskPriorityDisinherit+0xf8>
   1de06:	68bb      	ldr	r3, [r7, #8]
   1de08:	0018      	movs	r0, r3
   1de0a:	4b17      	ldr	r3, [pc, #92]	; (1de68 <xTaskPriorityDisinherit+0x148>)
   1de0c:	4798      	blx	r3
   1de0e:	0003      	movs	r3, r0
   1de10:	b2db      	uxtb	r3, r3
   1de12:	0018      	movs	r0, r3
   1de14:	4b18      	ldr	r3, [pc, #96]	; (1de78 <xTaskPriorityDisinherit+0x158>)
   1de16:	4798      	blx	r3
   1de18:	68bb      	ldr	r3, [r7, #8]
   1de1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1de1c:	4b17      	ldr	r3, [pc, #92]	; (1de7c <xTaskPriorityDisinherit+0x15c>)
   1de1e:	681b      	ldr	r3, [r3, #0]
   1de20:	429a      	cmp	r2, r3
   1de22:	d903      	bls.n	1de2c <xTaskPriorityDisinherit+0x10c>
   1de24:	68bb      	ldr	r3, [r7, #8]
   1de26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1de28:	4b14      	ldr	r3, [pc, #80]	; (1de7c <xTaskPriorityDisinherit+0x15c>)
   1de2a:	601a      	str	r2, [r3, #0]
   1de2c:	68bb      	ldr	r3, [r7, #8]
   1de2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1de30:	0013      	movs	r3, r2
   1de32:	009b      	lsls	r3, r3, #2
   1de34:	189b      	adds	r3, r3, r2
   1de36:	009b      	lsls	r3, r3, #2
   1de38:	4a11      	ldr	r2, [pc, #68]	; (1de80 <xTaskPriorityDisinherit+0x160>)
   1de3a:	189a      	adds	r2, r3, r2
   1de3c:	68bb      	ldr	r3, [r7, #8]
   1de3e:	3304      	adds	r3, #4
   1de40:	0019      	movs	r1, r3
   1de42:	0010      	movs	r0, r2
   1de44:	4b0f      	ldr	r3, [pc, #60]	; (1de84 <xTaskPriorityDisinherit+0x164>)
   1de46:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
   1de48:	2301      	movs	r3, #1
   1de4a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1de4c:	68fb      	ldr	r3, [r7, #12]
	}
   1de4e:	0018      	movs	r0, r3
   1de50:	46bd      	mov	sp, r7
   1de52:	b005      	add	sp, #20
   1de54:	bd90      	pop	{r4, r7, pc}
   1de56:	46c0      	nop			; (mov r8, r8)
   1de58:	200040dc 	.word	0x200040dc
   1de5c:	0001acab 	.word	0x0001acab
   1de60:	00018e31 	.word	0x00018e31
   1de64:	20000110 	.word	0x20000110
   1de68:	00018e11 	.word	0x00018e11
   1de6c:	00019de9 	.word	0x00019de9
   1de70:	00019959 	.word	0x00019959
   1de74:	00019d45 	.word	0x00019d45
   1de78:	000195e1 	.word	0x000195e1
   1de7c:	200041bc 	.word	0x200041bc
   1de80:	200040e0 	.word	0x200040e0
   1de84:	0001abfb 	.word	0x0001abfb

0001de88 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
   1de88:	b590      	push	{r4, r7, lr}
   1de8a:	b087      	sub	sp, #28
   1de8c:	af00      	add	r7, sp, #0
   1de8e:	6078      	str	r0, [r7, #4]
   1de90:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1de92:	687b      	ldr	r3, [r7, #4]
   1de94:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
   1de96:	2301      	movs	r3, #1
   1de98:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1de9a:	687b      	ldr	r3, [r7, #4]
   1de9c:	2b00      	cmp	r3, #0
   1de9e:	d100      	bne.n	1dea2 <vTaskPriorityDisinheritAfterTimeout+0x1a>
   1dea0:	e0a4      	b.n	1dfec <vTaskPriorityDisinheritAfterTimeout+0x164>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
   1dea2:	693b      	ldr	r3, [r7, #16]
   1dea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1dea6:	2b00      	cmp	r3, #0
   1dea8:	d101      	bne.n	1deae <vTaskPriorityDisinheritAfterTimeout+0x26>
   1deaa:	b672      	cpsid	i
   1deac:	e7fe      	b.n	1deac <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
   1deae:	693b      	ldr	r3, [r7, #16]
   1deb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1deb2:	683b      	ldr	r3, [r7, #0]
   1deb4:	429a      	cmp	r2, r3
   1deb6:	d202      	bcs.n	1debe <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
   1deb8:	683b      	ldr	r3, [r7, #0]
   1deba:	617b      	str	r3, [r7, #20]
   1debc:	e002      	b.n	1dec4 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
   1debe:	693b      	ldr	r3, [r7, #16]
   1dec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1dec2:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
   1dec4:	693b      	ldr	r3, [r7, #16]
   1dec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dec8:	697b      	ldr	r3, [r7, #20]
   1deca:	429a      	cmp	r2, r3
   1decc:	d100      	bne.n	1ded0 <vTaskPriorityDisinheritAfterTimeout+0x48>
   1dece:	e08d      	b.n	1dfec <vTaskPriorityDisinheritAfterTimeout+0x164>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   1ded0:	693b      	ldr	r3, [r7, #16]
   1ded2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1ded4:	68fb      	ldr	r3, [r7, #12]
   1ded6:	429a      	cmp	r2, r3
   1ded8:	d000      	beq.n	1dedc <vTaskPriorityDisinheritAfterTimeout+0x54>
   1deda:	e087      	b.n	1dfec <vTaskPriorityDisinheritAfterTimeout+0x164>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
   1dedc:	4b45      	ldr	r3, [pc, #276]	; (1dff4 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
   1dede:	681b      	ldr	r3, [r3, #0]
   1dee0:	693a      	ldr	r2, [r7, #16]
   1dee2:	429a      	cmp	r2, r3
   1dee4:	d101      	bne.n	1deea <vTaskPriorityDisinheritAfterTimeout+0x62>
   1dee6:	b672      	cpsid	i
   1dee8:	e7fe      	b.n	1dee8 <vTaskPriorityDisinheritAfterTimeout+0x60>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1deea:	693b      	ldr	r3, [r7, #16]
   1deec:	0018      	movs	r0, r3
   1deee:	4b42      	ldr	r3, [pc, #264]	; (1dff8 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1def0:	4798      	blx	r3
   1def2:	0003      	movs	r3, r0
   1def4:	001a      	movs	r2, r3
   1def6:	4b41      	ldr	r3, [pc, #260]	; (1dffc <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1def8:	881b      	ldrh	r3, [r3, #0]
   1defa:	4013      	ands	r3, r2
   1defc:	b29b      	uxth	r3, r3
   1defe:	2b00      	cmp	r3, #0
   1df00:	d023      	beq.n	1df4a <vTaskPriorityDisinheritAfterTimeout+0xc2>
   1df02:	693b      	ldr	r3, [r7, #16]
   1df04:	0018      	movs	r0, r3
   1df06:	4b3e      	ldr	r3, [pc, #248]	; (1e000 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1df08:	4798      	blx	r3
   1df0a:	0003      	movs	r3, r0
   1df0c:	b2db      	uxtb	r3, r3
   1df0e:	001c      	movs	r4, r3
   1df10:	693b      	ldr	r3, [r7, #16]
   1df12:	0018      	movs	r0, r3
   1df14:	4b3a      	ldr	r3, [pc, #232]	; (1e000 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1df16:	4798      	blx	r3
   1df18:	0003      	movs	r3, r0
   1df1a:	b2db      	uxtb	r3, r3
   1df1c:	0019      	movs	r1, r3
   1df1e:	2003      	movs	r0, #3
   1df20:	4b38      	ldr	r3, [pc, #224]	; (1e004 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
   1df22:	4798      	blx	r3
   1df24:	0003      	movs	r3, r0
   1df26:	0022      	movs	r2, r4
   1df28:	2103      	movs	r1, #3
   1df2a:	208f      	movs	r0, #143	; 0x8f
   1df2c:	4c36      	ldr	r4, [pc, #216]	; (1e008 <vTaskPriorityDisinheritAfterTimeout+0x180>)
   1df2e:	47a0      	blx	r4
   1df30:	693b      	ldr	r3, [r7, #16]
   1df32:	0018      	movs	r0, r3
   1df34:	4b32      	ldr	r3, [pc, #200]	; (1e000 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1df36:	4798      	blx	r3
   1df38:	0003      	movs	r3, r0
   1df3a:	b2d9      	uxtb	r1, r3
   1df3c:	693b      	ldr	r3, [r7, #16]
   1df3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1df40:	b2db      	uxtb	r3, r3
   1df42:	001a      	movs	r2, r3
   1df44:	2003      	movs	r0, #3
   1df46:	4b31      	ldr	r3, [pc, #196]	; (1e00c <vTaskPriorityDisinheritAfterTimeout+0x184>)
   1df48:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   1df4a:	693b      	ldr	r3, [r7, #16]
   1df4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1df4e:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
   1df50:	693b      	ldr	r3, [r7, #16]
   1df52:	697a      	ldr	r2, [r7, #20]
   1df54:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1df56:	693b      	ldr	r3, [r7, #16]
   1df58:	699b      	ldr	r3, [r3, #24]
   1df5a:	2b00      	cmp	r3, #0
   1df5c:	db04      	blt.n	1df68 <vTaskPriorityDisinheritAfterTimeout+0xe0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1df5e:	697b      	ldr	r3, [r7, #20]
   1df60:	2205      	movs	r2, #5
   1df62:	1ad2      	subs	r2, r2, r3
   1df64:	693b      	ldr	r3, [r7, #16]
   1df66:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   1df68:	693b      	ldr	r3, [r7, #16]
   1df6a:	6959      	ldr	r1, [r3, #20]
   1df6c:	68ba      	ldr	r2, [r7, #8]
   1df6e:	0013      	movs	r3, r2
   1df70:	009b      	lsls	r3, r3, #2
   1df72:	189b      	adds	r3, r3, r2
   1df74:	009b      	lsls	r3, r3, #2
   1df76:	4a26      	ldr	r2, [pc, #152]	; (1e010 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1df78:	189b      	adds	r3, r3, r2
   1df7a:	4299      	cmp	r1, r3
   1df7c:	d101      	bne.n	1df82 <vTaskPriorityDisinheritAfterTimeout+0xfa>
   1df7e:	2301      	movs	r3, #1
   1df80:	e000      	b.n	1df84 <vTaskPriorityDisinheritAfterTimeout+0xfc>
   1df82:	2300      	movs	r3, #0
   1df84:	2b00      	cmp	r3, #0
   1df86:	d031      	beq.n	1dfec <vTaskPriorityDisinheritAfterTimeout+0x164>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1df88:	693b      	ldr	r3, [r7, #16]
   1df8a:	3304      	adds	r3, #4
   1df8c:	0018      	movs	r0, r3
   1df8e:	4b21      	ldr	r3, [pc, #132]	; (1e014 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
   1df90:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
   1df92:	693b      	ldr	r3, [r7, #16]
   1df94:	0018      	movs	r0, r3
   1df96:	4b18      	ldr	r3, [pc, #96]	; (1dff8 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1df98:	4798      	blx	r3
   1df9a:	0003      	movs	r3, r0
   1df9c:	001a      	movs	r2, r3
   1df9e:	4b17      	ldr	r3, [pc, #92]	; (1dffc <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1dfa0:	881b      	ldrh	r3, [r3, #0]
   1dfa2:	4013      	ands	r3, r2
   1dfa4:	b29b      	uxth	r3, r3
   1dfa6:	2b00      	cmp	r3, #0
   1dfa8:	d008      	beq.n	1dfbc <vTaskPriorityDisinheritAfterTimeout+0x134>
   1dfaa:	693b      	ldr	r3, [r7, #16]
   1dfac:	0018      	movs	r0, r3
   1dfae:	4b14      	ldr	r3, [pc, #80]	; (1e000 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1dfb0:	4798      	blx	r3
   1dfb2:	0003      	movs	r3, r0
   1dfb4:	b2db      	uxtb	r3, r3
   1dfb6:	0018      	movs	r0, r3
   1dfb8:	4b17      	ldr	r3, [pc, #92]	; (1e018 <vTaskPriorityDisinheritAfterTimeout+0x190>)
   1dfba:	4798      	blx	r3
   1dfbc:	693b      	ldr	r3, [r7, #16]
   1dfbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dfc0:	4b16      	ldr	r3, [pc, #88]	; (1e01c <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1dfc2:	681b      	ldr	r3, [r3, #0]
   1dfc4:	429a      	cmp	r2, r3
   1dfc6:	d903      	bls.n	1dfd0 <vTaskPriorityDisinheritAfterTimeout+0x148>
   1dfc8:	693b      	ldr	r3, [r7, #16]
   1dfca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dfcc:	4b13      	ldr	r3, [pc, #76]	; (1e01c <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1dfce:	601a      	str	r2, [r3, #0]
   1dfd0:	693b      	ldr	r3, [r7, #16]
   1dfd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dfd4:	0013      	movs	r3, r2
   1dfd6:	009b      	lsls	r3, r3, #2
   1dfd8:	189b      	adds	r3, r3, r2
   1dfda:	009b      	lsls	r3, r3, #2
   1dfdc:	4a0c      	ldr	r2, [pc, #48]	; (1e010 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1dfde:	189a      	adds	r2, r3, r2
   1dfe0:	693b      	ldr	r3, [r7, #16]
   1dfe2:	3304      	adds	r3, #4
   1dfe4:	0019      	movs	r1, r3
   1dfe6:	0010      	movs	r0, r2
   1dfe8:	4b0d      	ldr	r3, [pc, #52]	; (1e020 <vTaskPriorityDisinheritAfterTimeout+0x198>)
   1dfea:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1dfec:	46c0      	nop			; (mov r8, r8)
   1dfee:	46bd      	mov	sp, r7
   1dff0:	b007      	add	sp, #28
   1dff2:	bd90      	pop	{r4, r7, pc}
   1dff4:	200040dc 	.word	0x200040dc
   1dff8:	00018e31 	.word	0x00018e31
   1dffc:	20000110 	.word	0x20000110
   1e000:	00018e11 	.word	0x00018e11
   1e004:	00019de9 	.word	0x00019de9
   1e008:	00019959 	.word	0x00019959
   1e00c:	00019d45 	.word	0x00019d45
   1e010:	200040e0 	.word	0x200040e0
   1e014:	0001acab 	.word	0x0001acab
   1e018:	000195e1 	.word	0x000195e1
   1e01c:	200041bc 	.word	0x200041bc
   1e020:	0001abfb 	.word	0x0001abfb

0001e024 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   1e024:	b580      	push	{r7, lr}
   1e026:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   1e028:	4b06      	ldr	r3, [pc, #24]	; (1e044 <pvTaskIncrementMutexHeldCount+0x20>)
   1e02a:	681b      	ldr	r3, [r3, #0]
   1e02c:	2b00      	cmp	r3, #0
   1e02e:	d004      	beq.n	1e03a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   1e030:	4b04      	ldr	r3, [pc, #16]	; (1e044 <pvTaskIncrementMutexHeldCount+0x20>)
   1e032:	681b      	ldr	r3, [r3, #0]
   1e034:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1e036:	3201      	adds	r2, #1
   1e038:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
   1e03a:	4b02      	ldr	r3, [pc, #8]	; (1e044 <pvTaskIncrementMutexHeldCount+0x20>)
   1e03c:	681b      	ldr	r3, [r3, #0]
	}
   1e03e:	0018      	movs	r0, r3
   1e040:	46bd      	mov	sp, r7
   1e042:	bd80      	pop	{r7, pc}
   1e044:	200040dc 	.word	0x200040dc

0001e048 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   1e048:	b580      	push	{r7, lr}
   1e04a:	b084      	sub	sp, #16
   1e04c:	af00      	add	r7, sp, #0
   1e04e:	6078      	str	r0, [r7, #4]
   1e050:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   1e052:	4b21      	ldr	r3, [pc, #132]	; (1e0d8 <prvAddCurrentTaskToDelayedList+0x90>)
   1e054:	681b      	ldr	r3, [r3, #0]
   1e056:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1e058:	4b20      	ldr	r3, [pc, #128]	; (1e0dc <prvAddCurrentTaskToDelayedList+0x94>)
   1e05a:	681b      	ldr	r3, [r3, #0]
   1e05c:	3304      	adds	r3, #4
   1e05e:	0018      	movs	r0, r3
   1e060:	4b1f      	ldr	r3, [pc, #124]	; (1e0e0 <prvAddCurrentTaskToDelayedList+0x98>)
   1e062:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   1e064:	687b      	ldr	r3, [r7, #4]
   1e066:	3301      	adds	r3, #1
   1e068:	d10b      	bne.n	1e082 <prvAddCurrentTaskToDelayedList+0x3a>
   1e06a:	683b      	ldr	r3, [r7, #0]
   1e06c:	2b00      	cmp	r3, #0
   1e06e:	d008      	beq.n	1e082 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1e070:	4b1a      	ldr	r3, [pc, #104]	; (1e0dc <prvAddCurrentTaskToDelayedList+0x94>)
   1e072:	681b      	ldr	r3, [r3, #0]
   1e074:	1d1a      	adds	r2, r3, #4
   1e076:	4b1b      	ldr	r3, [pc, #108]	; (1e0e4 <prvAddCurrentTaskToDelayedList+0x9c>)
   1e078:	0011      	movs	r1, r2
   1e07a:	0018      	movs	r0, r3
   1e07c:	4b1a      	ldr	r3, [pc, #104]	; (1e0e8 <prvAddCurrentTaskToDelayedList+0xa0>)
   1e07e:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   1e080:	e026      	b.n	1e0d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   1e082:	68fa      	ldr	r2, [r7, #12]
   1e084:	687b      	ldr	r3, [r7, #4]
   1e086:	18d3      	adds	r3, r2, r3
   1e088:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   1e08a:	4b14      	ldr	r3, [pc, #80]	; (1e0dc <prvAddCurrentTaskToDelayedList+0x94>)
   1e08c:	681b      	ldr	r3, [r3, #0]
   1e08e:	68ba      	ldr	r2, [r7, #8]
   1e090:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   1e092:	68ba      	ldr	r2, [r7, #8]
   1e094:	68fb      	ldr	r3, [r7, #12]
   1e096:	429a      	cmp	r2, r3
   1e098:	d209      	bcs.n	1e0ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1e09a:	4b14      	ldr	r3, [pc, #80]	; (1e0ec <prvAddCurrentTaskToDelayedList+0xa4>)
   1e09c:	681a      	ldr	r2, [r3, #0]
   1e09e:	4b0f      	ldr	r3, [pc, #60]	; (1e0dc <prvAddCurrentTaskToDelayedList+0x94>)
   1e0a0:	681b      	ldr	r3, [r3, #0]
   1e0a2:	3304      	adds	r3, #4
   1e0a4:	0019      	movs	r1, r3
   1e0a6:	0010      	movs	r0, r2
   1e0a8:	4b11      	ldr	r3, [pc, #68]	; (1e0f0 <prvAddCurrentTaskToDelayedList+0xa8>)
   1e0aa:	4798      	blx	r3
}
   1e0ac:	e010      	b.n	1e0d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1e0ae:	4b11      	ldr	r3, [pc, #68]	; (1e0f4 <prvAddCurrentTaskToDelayedList+0xac>)
   1e0b0:	681a      	ldr	r2, [r3, #0]
   1e0b2:	4b0a      	ldr	r3, [pc, #40]	; (1e0dc <prvAddCurrentTaskToDelayedList+0x94>)
   1e0b4:	681b      	ldr	r3, [r3, #0]
   1e0b6:	3304      	adds	r3, #4
   1e0b8:	0019      	movs	r1, r3
   1e0ba:	0010      	movs	r0, r2
   1e0bc:	4b0c      	ldr	r3, [pc, #48]	; (1e0f0 <prvAddCurrentTaskToDelayedList+0xa8>)
   1e0be:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
   1e0c0:	4b0d      	ldr	r3, [pc, #52]	; (1e0f8 <prvAddCurrentTaskToDelayedList+0xb0>)
   1e0c2:	681b      	ldr	r3, [r3, #0]
   1e0c4:	68ba      	ldr	r2, [r7, #8]
   1e0c6:	429a      	cmp	r2, r3
   1e0c8:	d202      	bcs.n	1e0d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   1e0ca:	4b0b      	ldr	r3, [pc, #44]	; (1e0f8 <prvAddCurrentTaskToDelayedList+0xb0>)
   1e0cc:	68ba      	ldr	r2, [r7, #8]
   1e0ce:	601a      	str	r2, [r3, #0]
}
   1e0d0:	46c0      	nop			; (mov r8, r8)
   1e0d2:	46bd      	mov	sp, r7
   1e0d4:	b004      	add	sp, #16
   1e0d6:	bd80      	pop	{r7, pc}
   1e0d8:	200041b8 	.word	0x200041b8
   1e0dc:	200040dc 	.word	0x200040dc
   1e0e0:	0001acab 	.word	0x0001acab
   1e0e4:	200041a0 	.word	0x200041a0
   1e0e8:	0001abfb 	.word	0x0001abfb
   1e0ec:	20004170 	.word	0x20004170
   1e0f0:	0001ac3f 	.word	0x0001ac3f
   1e0f4:	2000416c 	.word	0x2000416c
   1e0f8:	200041d4 	.word	0x200041d4

0001e0fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   1e0fc:	b590      	push	{r4, r7, lr}
   1e0fe:	b085      	sub	sp, #20
   1e100:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   1e102:	2300      	movs	r3, #0
   1e104:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   1e106:	4b0e      	ldr	r3, [pc, #56]	; (1e140 <xTimerCreateTimerTask+0x44>)
   1e108:	4798      	blx	r3

	if( xTimerQueue != NULL )
   1e10a:	4b0e      	ldr	r3, [pc, #56]	; (1e144 <xTimerCreateTimerTask+0x48>)
   1e10c:	681b      	ldr	r3, [r3, #0]
   1e10e:	2b00      	cmp	r3, #0
   1e110:	d00b      	beq.n	1e12a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   1e112:	490d      	ldr	r1, [pc, #52]	; (1e148 <xTimerCreateTimerTask+0x4c>)
   1e114:	480d      	ldr	r0, [pc, #52]	; (1e14c <xTimerCreateTimerTask+0x50>)
   1e116:	4b0e      	ldr	r3, [pc, #56]	; (1e150 <xTimerCreateTimerTask+0x54>)
   1e118:	9301      	str	r3, [sp, #4]
   1e11a:	2302      	movs	r3, #2
   1e11c:	9300      	str	r3, [sp, #0]
   1e11e:	2300      	movs	r3, #0
   1e120:	2280      	movs	r2, #128	; 0x80
   1e122:	4c0c      	ldr	r4, [pc, #48]	; (1e154 <xTimerCreateTimerTask+0x58>)
   1e124:	47a0      	blx	r4
   1e126:	0003      	movs	r3, r0
   1e128:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   1e12a:	687b      	ldr	r3, [r7, #4]
   1e12c:	2b00      	cmp	r3, #0
   1e12e:	d101      	bne.n	1e134 <xTimerCreateTimerTask+0x38>
   1e130:	b672      	cpsid	i
   1e132:	e7fe      	b.n	1e132 <xTimerCreateTimerTask+0x36>
	return xReturn;
   1e134:	687b      	ldr	r3, [r7, #4]
}
   1e136:	0018      	movs	r0, r3
   1e138:	46bd      	mov	sp, r7
   1e13a:	b003      	add	sp, #12
   1e13c:	bd90      	pop	{r4, r7, pc}
   1e13e:	46c0      	nop			; (mov r8, r8)
   1e140:	0001e645 	.word	0x0001e645
   1e144:	20004210 	.word	0x20004210
   1e148:	000390c8 	.word	0x000390c8
   1e14c:	0001e27d 	.word	0x0001e27d
   1e150:	20004214 	.word	0x20004214
   1e154:	0001ca95 	.word	0x0001ca95

0001e158 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   1e158:	b590      	push	{r4, r7, lr}
   1e15a:	b089      	sub	sp, #36	; 0x24
   1e15c:	af00      	add	r7, sp, #0
   1e15e:	60f8      	str	r0, [r7, #12]
   1e160:	60b9      	str	r1, [r7, #8]
   1e162:	607a      	str	r2, [r7, #4]
   1e164:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   1e166:	2300      	movs	r3, #0
   1e168:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   1e16a:	68fb      	ldr	r3, [r7, #12]
   1e16c:	2b00      	cmp	r3, #0
   1e16e:	d101      	bne.n	1e174 <xTimerGenericCommand+0x1c>
   1e170:	b672      	cpsid	i
   1e172:	e7fe      	b.n	1e172 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   1e174:	4b1e      	ldr	r3, [pc, #120]	; (1e1f0 <xTimerGenericCommand+0x98>)
   1e176:	681b      	ldr	r3, [r3, #0]
   1e178:	2b00      	cmp	r3, #0
   1e17a:	d033      	beq.n	1e1e4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   1e17c:	2310      	movs	r3, #16
   1e17e:	18fb      	adds	r3, r7, r3
   1e180:	68ba      	ldr	r2, [r7, #8]
   1e182:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   1e184:	2310      	movs	r3, #16
   1e186:	18fb      	adds	r3, r7, r3
   1e188:	687a      	ldr	r2, [r7, #4]
   1e18a:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   1e18c:	2310      	movs	r3, #16
   1e18e:	18fb      	adds	r3, r7, r3
   1e190:	68fa      	ldr	r2, [r7, #12]
   1e192:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   1e194:	68bb      	ldr	r3, [r7, #8]
   1e196:	2b05      	cmp	r3, #5
   1e198:	dc1a      	bgt.n	1e1d0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1e19a:	4b16      	ldr	r3, [pc, #88]	; (1e1f4 <xTimerGenericCommand+0x9c>)
   1e19c:	4798      	blx	r3
   1e19e:	0003      	movs	r3, r0
   1e1a0:	2b02      	cmp	r3, #2
   1e1a2:	d10a      	bne.n	1e1ba <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1e1a4:	4b12      	ldr	r3, [pc, #72]	; (1e1f0 <xTimerGenericCommand+0x98>)
   1e1a6:	6818      	ldr	r0, [r3, #0]
   1e1a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1e1aa:	2310      	movs	r3, #16
   1e1ac:	18f9      	adds	r1, r7, r3
   1e1ae:	2300      	movs	r3, #0
   1e1b0:	4c11      	ldr	r4, [pc, #68]	; (1e1f8 <xTimerGenericCommand+0xa0>)
   1e1b2:	47a0      	blx	r4
   1e1b4:	0003      	movs	r3, r0
   1e1b6:	61fb      	str	r3, [r7, #28]
   1e1b8:	e014      	b.n	1e1e4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   1e1ba:	4b0d      	ldr	r3, [pc, #52]	; (1e1f0 <xTimerGenericCommand+0x98>)
   1e1bc:	6818      	ldr	r0, [r3, #0]
   1e1be:	2310      	movs	r3, #16
   1e1c0:	18f9      	adds	r1, r7, r3
   1e1c2:	2300      	movs	r3, #0
   1e1c4:	2200      	movs	r2, #0
   1e1c6:	4c0c      	ldr	r4, [pc, #48]	; (1e1f8 <xTimerGenericCommand+0xa0>)
   1e1c8:	47a0      	blx	r4
   1e1ca:	0003      	movs	r3, r0
   1e1cc:	61fb      	str	r3, [r7, #28]
   1e1ce:	e009      	b.n	1e1e4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1e1d0:	4b07      	ldr	r3, [pc, #28]	; (1e1f0 <xTimerGenericCommand+0x98>)
   1e1d2:	6818      	ldr	r0, [r3, #0]
   1e1d4:	683a      	ldr	r2, [r7, #0]
   1e1d6:	2310      	movs	r3, #16
   1e1d8:	18f9      	adds	r1, r7, r3
   1e1da:	2300      	movs	r3, #0
   1e1dc:	4c07      	ldr	r4, [pc, #28]	; (1e1fc <xTimerGenericCommand+0xa4>)
   1e1de:	47a0      	blx	r4
   1e1e0:	0003      	movs	r3, r0
   1e1e2:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   1e1e4:	69fb      	ldr	r3, [r7, #28]
}
   1e1e6:	0018      	movs	r0, r3
   1e1e8:	46bd      	mov	sp, r7
   1e1ea:	b009      	add	sp, #36	; 0x24
   1e1ec:	bd90      	pop	{r4, r7, pc}
   1e1ee:	46c0      	nop			; (mov r8, r8)
   1e1f0:	20004210 	.word	0x20004210
   1e1f4:	0001db59 	.word	0x0001db59
   1e1f8:	0001b3cd 	.word	0x0001b3cd
   1e1fc:	0001b82d 	.word	0x0001b82d

0001e200 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   1e200:	b590      	push	{r4, r7, lr}
   1e202:	b087      	sub	sp, #28
   1e204:	af02      	add	r7, sp, #8
   1e206:	6078      	str	r0, [r7, #4]
   1e208:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1e20a:	4b18      	ldr	r3, [pc, #96]	; (1e26c <prvProcessExpiredTimer+0x6c>)
   1e20c:	681b      	ldr	r3, [r3, #0]
   1e20e:	68db      	ldr	r3, [r3, #12]
   1e210:	68db      	ldr	r3, [r3, #12]
   1e212:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1e214:	68fb      	ldr	r3, [r7, #12]
   1e216:	3304      	adds	r3, #4
   1e218:	0018      	movs	r0, r3
   1e21a:	4b15      	ldr	r3, [pc, #84]	; (1e270 <prvProcessExpiredTimer+0x70>)
   1e21c:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1e21e:	68fb      	ldr	r3, [r7, #12]
   1e220:	69db      	ldr	r3, [r3, #28]
   1e222:	2b01      	cmp	r3, #1
   1e224:	d119      	bne.n	1e25a <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   1e226:	68fb      	ldr	r3, [r7, #12]
   1e228:	699a      	ldr	r2, [r3, #24]
   1e22a:	687b      	ldr	r3, [r7, #4]
   1e22c:	18d1      	adds	r1, r2, r3
   1e22e:	687b      	ldr	r3, [r7, #4]
   1e230:	683a      	ldr	r2, [r7, #0]
   1e232:	68f8      	ldr	r0, [r7, #12]
   1e234:	4c0f      	ldr	r4, [pc, #60]	; (1e274 <prvProcessExpiredTimer+0x74>)
   1e236:	47a0      	blx	r4
   1e238:	1e03      	subs	r3, r0, #0
   1e23a:	d00e      	beq.n	1e25a <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1e23c:	687a      	ldr	r2, [r7, #4]
   1e23e:	68f8      	ldr	r0, [r7, #12]
   1e240:	2300      	movs	r3, #0
   1e242:	9300      	str	r3, [sp, #0]
   1e244:	2300      	movs	r3, #0
   1e246:	2100      	movs	r1, #0
   1e248:	4c0b      	ldr	r4, [pc, #44]	; (1e278 <prvProcessExpiredTimer+0x78>)
   1e24a:	47a0      	blx	r4
   1e24c:	0003      	movs	r3, r0
   1e24e:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
   1e250:	68bb      	ldr	r3, [r7, #8]
   1e252:	2b00      	cmp	r3, #0
   1e254:	d101      	bne.n	1e25a <prvProcessExpiredTimer+0x5a>
   1e256:	b672      	cpsid	i
   1e258:	e7fe      	b.n	1e258 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1e25a:	68fb      	ldr	r3, [r7, #12]
   1e25c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e25e:	68fa      	ldr	r2, [r7, #12]
   1e260:	0010      	movs	r0, r2
   1e262:	4798      	blx	r3
}
   1e264:	46c0      	nop			; (mov r8, r8)
   1e266:	46bd      	mov	sp, r7
   1e268:	b005      	add	sp, #20
   1e26a:	bd90      	pop	{r4, r7, pc}
   1e26c:	20004208 	.word	0x20004208
   1e270:	0001acab 	.word	0x0001acab
   1e274:	0001e3e5 	.word	0x0001e3e5
   1e278:	0001e159 	.word	0x0001e159

0001e27c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   1e27c:	b580      	push	{r7, lr}
   1e27e:	b084      	sub	sp, #16
   1e280:	af00      	add	r7, sp, #0
   1e282:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
   1e284:	4b08      	ldr	r3, [pc, #32]	; (1e2a8 <prvTimerTask+0x2c>)
   1e286:	4798      	blx	r3

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1e288:	2308      	movs	r3, #8
   1e28a:	18fb      	adds	r3, r7, r3
   1e28c:	0018      	movs	r0, r3
   1e28e:	4b07      	ldr	r3, [pc, #28]	; (1e2ac <prvTimerTask+0x30>)
   1e290:	4798      	blx	r3
   1e292:	0003      	movs	r3, r0
   1e294:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   1e296:	68ba      	ldr	r2, [r7, #8]
   1e298:	68fb      	ldr	r3, [r7, #12]
   1e29a:	0011      	movs	r1, r2
   1e29c:	0018      	movs	r0, r3
   1e29e:	4b04      	ldr	r3, [pc, #16]	; (1e2b0 <prvTimerTask+0x34>)
   1e2a0:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   1e2a2:	4b04      	ldr	r3, [pc, #16]	; (1e2b4 <prvTimerTask+0x38>)
   1e2a4:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1e2a6:	e7ef      	b.n	1e288 <prvTimerTask+0xc>
   1e2a8:	00033375 	.word	0x00033375
   1e2ac:	0001e35d 	.word	0x0001e35d
   1e2b0:	0001e2b9 	.word	0x0001e2b9
   1e2b4:	0001e46d 	.word	0x0001e46d

0001e2b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   1e2b8:	b580      	push	{r7, lr}
   1e2ba:	b084      	sub	sp, #16
   1e2bc:	af00      	add	r7, sp, #0
   1e2be:	6078      	str	r0, [r7, #4]
   1e2c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   1e2c2:	4b1e      	ldr	r3, [pc, #120]	; (1e33c <prvProcessTimerOrBlockTask+0x84>)
   1e2c4:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1e2c6:	2308      	movs	r3, #8
   1e2c8:	18fb      	adds	r3, r7, r3
   1e2ca:	0018      	movs	r0, r3
   1e2cc:	4b1c      	ldr	r3, [pc, #112]	; (1e340 <prvProcessTimerOrBlockTask+0x88>)
   1e2ce:	4798      	blx	r3
   1e2d0:	0003      	movs	r3, r0
   1e2d2:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   1e2d4:	68bb      	ldr	r3, [r7, #8]
   1e2d6:	2b00      	cmp	r3, #0
   1e2d8:	d129      	bne.n	1e32e <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   1e2da:	683b      	ldr	r3, [r7, #0]
   1e2dc:	2b00      	cmp	r3, #0
   1e2de:	d10c      	bne.n	1e2fa <prvProcessTimerOrBlockTask+0x42>
   1e2e0:	687a      	ldr	r2, [r7, #4]
   1e2e2:	68fb      	ldr	r3, [r7, #12]
   1e2e4:	429a      	cmp	r2, r3
   1e2e6:	d808      	bhi.n	1e2fa <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
   1e2e8:	4b16      	ldr	r3, [pc, #88]	; (1e344 <prvProcessTimerOrBlockTask+0x8c>)
   1e2ea:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   1e2ec:	68fa      	ldr	r2, [r7, #12]
   1e2ee:	687b      	ldr	r3, [r7, #4]
   1e2f0:	0011      	movs	r1, r2
   1e2f2:	0018      	movs	r0, r3
   1e2f4:	4b14      	ldr	r3, [pc, #80]	; (1e348 <prvProcessTimerOrBlockTask+0x90>)
   1e2f6:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   1e2f8:	e01b      	b.n	1e332 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
   1e2fa:	683b      	ldr	r3, [r7, #0]
   1e2fc:	2b00      	cmp	r3, #0
   1e2fe:	d006      	beq.n	1e30e <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   1e300:	4b12      	ldr	r3, [pc, #72]	; (1e34c <prvProcessTimerOrBlockTask+0x94>)
   1e302:	681b      	ldr	r3, [r3, #0]
   1e304:	681b      	ldr	r3, [r3, #0]
   1e306:	425a      	negs	r2, r3
   1e308:	4153      	adcs	r3, r2
   1e30a:	b2db      	uxtb	r3, r3
   1e30c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   1e30e:	4b10      	ldr	r3, [pc, #64]	; (1e350 <prvProcessTimerOrBlockTask+0x98>)
   1e310:	6818      	ldr	r0, [r3, #0]
   1e312:	687a      	ldr	r2, [r7, #4]
   1e314:	68fb      	ldr	r3, [r7, #12]
   1e316:	1ad3      	subs	r3, r2, r3
   1e318:	683a      	ldr	r2, [r7, #0]
   1e31a:	0019      	movs	r1, r3
   1e31c:	4b0d      	ldr	r3, [pc, #52]	; (1e354 <prvProcessTimerOrBlockTask+0x9c>)
   1e31e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1e320:	4b08      	ldr	r3, [pc, #32]	; (1e344 <prvProcessTimerOrBlockTask+0x8c>)
   1e322:	4798      	blx	r3
   1e324:	1e03      	subs	r3, r0, #0
   1e326:	d104      	bne.n	1e332 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
   1e328:	4b0b      	ldr	r3, [pc, #44]	; (1e358 <prvProcessTimerOrBlockTask+0xa0>)
   1e32a:	4798      	blx	r3
}
   1e32c:	e001      	b.n	1e332 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
   1e32e:	4b05      	ldr	r3, [pc, #20]	; (1e344 <prvProcessTimerOrBlockTask+0x8c>)
   1e330:	4798      	blx	r3
}
   1e332:	46c0      	nop			; (mov r8, r8)
   1e334:	46bd      	mov	sp, r7
   1e336:	b004      	add	sp, #16
   1e338:	bd80      	pop	{r7, pc}
   1e33a:	46c0      	nop			; (mov r8, r8)
   1e33c:	0001d0f1 	.word	0x0001d0f1
   1e340:	0001e39d 	.word	0x0001e39d
   1e344:	0001d109 	.word	0x0001d109
   1e348:	0001e201 	.word	0x0001e201
   1e34c:	2000420c 	.word	0x2000420c
   1e350:	20004210 	.word	0x20004210
   1e354:	0001c891 	.word	0x0001c891
   1e358:	0001ae21 	.word	0x0001ae21

0001e35c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   1e35c:	b580      	push	{r7, lr}
   1e35e:	b084      	sub	sp, #16
   1e360:	af00      	add	r7, sp, #0
   1e362:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   1e364:	4b0c      	ldr	r3, [pc, #48]	; (1e398 <prvGetNextExpireTime+0x3c>)
   1e366:	681b      	ldr	r3, [r3, #0]
   1e368:	681b      	ldr	r3, [r3, #0]
   1e36a:	425a      	negs	r2, r3
   1e36c:	4153      	adcs	r3, r2
   1e36e:	b2db      	uxtb	r3, r3
   1e370:	001a      	movs	r2, r3
   1e372:	687b      	ldr	r3, [r7, #4]
   1e374:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   1e376:	687b      	ldr	r3, [r7, #4]
   1e378:	681b      	ldr	r3, [r3, #0]
   1e37a:	2b00      	cmp	r3, #0
   1e37c:	d105      	bne.n	1e38a <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1e37e:	4b06      	ldr	r3, [pc, #24]	; (1e398 <prvGetNextExpireTime+0x3c>)
   1e380:	681b      	ldr	r3, [r3, #0]
   1e382:	68db      	ldr	r3, [r3, #12]
   1e384:	681b      	ldr	r3, [r3, #0]
   1e386:	60fb      	str	r3, [r7, #12]
   1e388:	e001      	b.n	1e38e <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   1e38a:	2300      	movs	r3, #0
   1e38c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   1e38e:	68fb      	ldr	r3, [r7, #12]
}
   1e390:	0018      	movs	r0, r3
   1e392:	46bd      	mov	sp, r7
   1e394:	b004      	add	sp, #16
   1e396:	bd80      	pop	{r7, pc}
   1e398:	20004208 	.word	0x20004208

0001e39c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   1e39c:	b580      	push	{r7, lr}
   1e39e:	b084      	sub	sp, #16
   1e3a0:	af00      	add	r7, sp, #0
   1e3a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   1e3a4:	4b0c      	ldr	r3, [pc, #48]	; (1e3d8 <prvSampleTimeNow+0x3c>)
   1e3a6:	4798      	blx	r3
   1e3a8:	0003      	movs	r3, r0
   1e3aa:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   1e3ac:	4b0b      	ldr	r3, [pc, #44]	; (1e3dc <prvSampleTimeNow+0x40>)
   1e3ae:	681b      	ldr	r3, [r3, #0]
   1e3b0:	68fa      	ldr	r2, [r7, #12]
   1e3b2:	429a      	cmp	r2, r3
   1e3b4:	d205      	bcs.n	1e3c2 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   1e3b6:	4b0a      	ldr	r3, [pc, #40]	; (1e3e0 <prvSampleTimeNow+0x44>)
   1e3b8:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   1e3ba:	687b      	ldr	r3, [r7, #4]
   1e3bc:	2201      	movs	r2, #1
   1e3be:	601a      	str	r2, [r3, #0]
   1e3c0:	e002      	b.n	1e3c8 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   1e3c2:	687b      	ldr	r3, [r7, #4]
   1e3c4:	2200      	movs	r2, #0
   1e3c6:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   1e3c8:	4b04      	ldr	r3, [pc, #16]	; (1e3dc <prvSampleTimeNow+0x40>)
   1e3ca:	68fa      	ldr	r2, [r7, #12]
   1e3cc:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   1e3ce:	68fb      	ldr	r3, [r7, #12]
}
   1e3d0:	0018      	movs	r0, r3
   1e3d2:	46bd      	mov	sp, r7
   1e3d4:	b004      	add	sp, #16
   1e3d6:	bd80      	pop	{r7, pc}
   1e3d8:	0001d279 	.word	0x0001d279
   1e3dc:	20004218 	.word	0x20004218
   1e3e0:	0001e585 	.word	0x0001e585

0001e3e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   1e3e4:	b580      	push	{r7, lr}
   1e3e6:	b086      	sub	sp, #24
   1e3e8:	af00      	add	r7, sp, #0
   1e3ea:	60f8      	str	r0, [r7, #12]
   1e3ec:	60b9      	str	r1, [r7, #8]
   1e3ee:	607a      	str	r2, [r7, #4]
   1e3f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   1e3f2:	2300      	movs	r3, #0
   1e3f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   1e3f6:	68fb      	ldr	r3, [r7, #12]
   1e3f8:	68ba      	ldr	r2, [r7, #8]
   1e3fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1e3fc:	68fb      	ldr	r3, [r7, #12]
   1e3fe:	68fa      	ldr	r2, [r7, #12]
   1e400:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   1e402:	68ba      	ldr	r2, [r7, #8]
   1e404:	687b      	ldr	r3, [r7, #4]
   1e406:	429a      	cmp	r2, r3
   1e408:	d812      	bhi.n	1e430 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1e40a:	687a      	ldr	r2, [r7, #4]
   1e40c:	683b      	ldr	r3, [r7, #0]
   1e40e:	1ad2      	subs	r2, r2, r3
   1e410:	68fb      	ldr	r3, [r7, #12]
   1e412:	699b      	ldr	r3, [r3, #24]
   1e414:	429a      	cmp	r2, r3
   1e416:	d302      	bcc.n	1e41e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   1e418:	2301      	movs	r3, #1
   1e41a:	617b      	str	r3, [r7, #20]
   1e41c:	e01b      	b.n	1e456 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   1e41e:	4b10      	ldr	r3, [pc, #64]	; (1e460 <prvInsertTimerInActiveList+0x7c>)
   1e420:	681a      	ldr	r2, [r3, #0]
   1e422:	68fb      	ldr	r3, [r7, #12]
   1e424:	3304      	adds	r3, #4
   1e426:	0019      	movs	r1, r3
   1e428:	0010      	movs	r0, r2
   1e42a:	4b0e      	ldr	r3, [pc, #56]	; (1e464 <prvInsertTimerInActiveList+0x80>)
   1e42c:	4798      	blx	r3
   1e42e:	e012      	b.n	1e456 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   1e430:	687a      	ldr	r2, [r7, #4]
   1e432:	683b      	ldr	r3, [r7, #0]
   1e434:	429a      	cmp	r2, r3
   1e436:	d206      	bcs.n	1e446 <prvInsertTimerInActiveList+0x62>
   1e438:	68ba      	ldr	r2, [r7, #8]
   1e43a:	683b      	ldr	r3, [r7, #0]
   1e43c:	429a      	cmp	r2, r3
   1e43e:	d302      	bcc.n	1e446 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   1e440:	2301      	movs	r3, #1
   1e442:	617b      	str	r3, [r7, #20]
   1e444:	e007      	b.n	1e456 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1e446:	4b08      	ldr	r3, [pc, #32]	; (1e468 <prvInsertTimerInActiveList+0x84>)
   1e448:	681a      	ldr	r2, [r3, #0]
   1e44a:	68fb      	ldr	r3, [r7, #12]
   1e44c:	3304      	adds	r3, #4
   1e44e:	0019      	movs	r1, r3
   1e450:	0010      	movs	r0, r2
   1e452:	4b04      	ldr	r3, [pc, #16]	; (1e464 <prvInsertTimerInActiveList+0x80>)
   1e454:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   1e456:	697b      	ldr	r3, [r7, #20]
}
   1e458:	0018      	movs	r0, r3
   1e45a:	46bd      	mov	sp, r7
   1e45c:	b006      	add	sp, #24
   1e45e:	bd80      	pop	{r7, pc}
   1e460:	2000420c 	.word	0x2000420c
   1e464:	0001ac3f 	.word	0x0001ac3f
   1e468:	20004208 	.word	0x20004208

0001e46c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   1e46c:	b590      	push	{r4, r7, lr}
   1e46e:	b08b      	sub	sp, #44	; 0x2c
   1e470:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1e472:	e068      	b.n	1e546 <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   1e474:	2308      	movs	r3, #8
   1e476:	18fb      	adds	r3, r7, r3
   1e478:	681b      	ldr	r3, [r3, #0]
   1e47a:	2b00      	cmp	r3, #0
   1e47c:	db63      	blt.n	1e546 <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   1e47e:	2308      	movs	r3, #8
   1e480:	18fb      	adds	r3, r7, r3
   1e482:	689b      	ldr	r3, [r3, #8]
   1e484:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   1e486:	69fb      	ldr	r3, [r7, #28]
   1e488:	695b      	ldr	r3, [r3, #20]
   1e48a:	2b00      	cmp	r3, #0
   1e48c:	d004      	beq.n	1e498 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1e48e:	69fb      	ldr	r3, [r7, #28]
   1e490:	3304      	adds	r3, #4
   1e492:	0018      	movs	r0, r3
   1e494:	4b33      	ldr	r3, [pc, #204]	; (1e564 <prvProcessReceivedCommands+0xf8>)
   1e496:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1e498:	1d3b      	adds	r3, r7, #4
   1e49a:	0018      	movs	r0, r3
   1e49c:	4b32      	ldr	r3, [pc, #200]	; (1e568 <prvProcessReceivedCommands+0xfc>)
   1e49e:	4798      	blx	r3
   1e4a0:	0003      	movs	r3, r0
   1e4a2:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
   1e4a4:	2308      	movs	r3, #8
   1e4a6:	18fb      	adds	r3, r7, r3
   1e4a8:	681b      	ldr	r3, [r3, #0]
   1e4aa:	2b09      	cmp	r3, #9
   1e4ac:	d84a      	bhi.n	1e544 <prvProcessReceivedCommands+0xd8>
   1e4ae:	009a      	lsls	r2, r3, #2
   1e4b0:	4b2e      	ldr	r3, [pc, #184]	; (1e56c <prvProcessReceivedCommands+0x100>)
   1e4b2:	18d3      	adds	r3, r2, r3
   1e4b4:	681b      	ldr	r3, [r3, #0]
   1e4b6:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   1e4b8:	2308      	movs	r3, #8
   1e4ba:	18fb      	adds	r3, r7, r3
   1e4bc:	685a      	ldr	r2, [r3, #4]
   1e4be:	69fb      	ldr	r3, [r7, #28]
   1e4c0:	699b      	ldr	r3, [r3, #24]
   1e4c2:	18d1      	adds	r1, r2, r3
   1e4c4:	2308      	movs	r3, #8
   1e4c6:	18fb      	adds	r3, r7, r3
   1e4c8:	685b      	ldr	r3, [r3, #4]
   1e4ca:	69ba      	ldr	r2, [r7, #24]
   1e4cc:	69f8      	ldr	r0, [r7, #28]
   1e4ce:	4c28      	ldr	r4, [pc, #160]	; (1e570 <prvProcessReceivedCommands+0x104>)
   1e4d0:	47a0      	blx	r4
   1e4d2:	1e03      	subs	r3, r0, #0
   1e4d4:	d037      	beq.n	1e546 <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1e4d6:	69fb      	ldr	r3, [r7, #28]
   1e4d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e4da:	69fa      	ldr	r2, [r7, #28]
   1e4dc:	0010      	movs	r0, r2
   1e4de:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1e4e0:	69fb      	ldr	r3, [r7, #28]
   1e4e2:	69db      	ldr	r3, [r3, #28]
   1e4e4:	2b01      	cmp	r3, #1
   1e4e6:	d12e      	bne.n	1e546 <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   1e4e8:	2308      	movs	r3, #8
   1e4ea:	18fb      	adds	r3, r7, r3
   1e4ec:	685a      	ldr	r2, [r3, #4]
   1e4ee:	69fb      	ldr	r3, [r7, #28]
   1e4f0:	699b      	ldr	r3, [r3, #24]
   1e4f2:	18d2      	adds	r2, r2, r3
   1e4f4:	69f8      	ldr	r0, [r7, #28]
   1e4f6:	2300      	movs	r3, #0
   1e4f8:	9300      	str	r3, [sp, #0]
   1e4fa:	2300      	movs	r3, #0
   1e4fc:	2100      	movs	r1, #0
   1e4fe:	4c1d      	ldr	r4, [pc, #116]	; (1e574 <prvProcessReceivedCommands+0x108>)
   1e500:	47a0      	blx	r4
   1e502:	0003      	movs	r3, r0
   1e504:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
   1e506:	697b      	ldr	r3, [r7, #20]
   1e508:	2b00      	cmp	r3, #0
   1e50a:	d11c      	bne.n	1e546 <prvProcessReceivedCommands+0xda>
   1e50c:	b672      	cpsid	i
   1e50e:	e7fe      	b.n	1e50e <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   1e510:	2308      	movs	r3, #8
   1e512:	18fb      	adds	r3, r7, r3
   1e514:	685a      	ldr	r2, [r3, #4]
   1e516:	69fb      	ldr	r3, [r7, #28]
   1e518:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1e51a:	69fb      	ldr	r3, [r7, #28]
   1e51c:	699b      	ldr	r3, [r3, #24]
   1e51e:	2b00      	cmp	r3, #0
   1e520:	d101      	bne.n	1e526 <prvProcessReceivedCommands+0xba>
   1e522:	b672      	cpsid	i
   1e524:	e7fe      	b.n	1e524 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   1e526:	69fb      	ldr	r3, [r7, #28]
   1e528:	699a      	ldr	r2, [r3, #24]
   1e52a:	69bb      	ldr	r3, [r7, #24]
   1e52c:	18d1      	adds	r1, r2, r3
   1e52e:	69bb      	ldr	r3, [r7, #24]
   1e530:	69ba      	ldr	r2, [r7, #24]
   1e532:	69f8      	ldr	r0, [r7, #28]
   1e534:	4c0e      	ldr	r4, [pc, #56]	; (1e570 <prvProcessReceivedCommands+0x104>)
   1e536:	47a0      	blx	r4
					break;
   1e538:	e005      	b.n	1e546 <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   1e53a:	69fb      	ldr	r3, [r7, #28]
   1e53c:	0018      	movs	r0, r3
   1e53e:	4b0e      	ldr	r3, [pc, #56]	; (1e578 <prvProcessReceivedCommands+0x10c>)
   1e540:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   1e542:	e000      	b.n	1e546 <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
   1e544:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1e546:	4b0d      	ldr	r3, [pc, #52]	; (1e57c <prvProcessReceivedCommands+0x110>)
   1e548:	681b      	ldr	r3, [r3, #0]
   1e54a:	2208      	movs	r2, #8
   1e54c:	18b9      	adds	r1, r7, r2
   1e54e:	2200      	movs	r2, #0
   1e550:	0018      	movs	r0, r3
   1e552:	4b0b      	ldr	r3, [pc, #44]	; (1e580 <prvProcessReceivedCommands+0x114>)
   1e554:	4798      	blx	r3
   1e556:	1e03      	subs	r3, r0, #0
   1e558:	d18c      	bne.n	1e474 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   1e55a:	46c0      	nop			; (mov r8, r8)
   1e55c:	46bd      	mov	sp, r7
   1e55e:	b009      	add	sp, #36	; 0x24
   1e560:	bd90      	pop	{r4, r7, pc}
   1e562:	46c0      	nop			; (mov r8, r8)
   1e564:	0001acab 	.word	0x0001acab
   1e568:	0001e39d 	.word	0x0001e39d
   1e56c:	000390d0 	.word	0x000390d0
   1e570:	0001e3e5 	.word	0x0001e3e5
   1e574:	0001e159 	.word	0x0001e159
   1e578:	0001b035 	.word	0x0001b035
   1e57c:	20004210 	.word	0x20004210
   1e580:	0001bc85 	.word	0x0001bc85

0001e584 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   1e584:	b590      	push	{r4, r7, lr}
   1e586:	b089      	sub	sp, #36	; 0x24
   1e588:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1e58a:	e03e      	b.n	1e60a <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1e58c:	4b28      	ldr	r3, [pc, #160]	; (1e630 <prvSwitchTimerLists+0xac>)
   1e58e:	681b      	ldr	r3, [r3, #0]
   1e590:	68db      	ldr	r3, [r3, #12]
   1e592:	681b      	ldr	r3, [r3, #0]
   1e594:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1e596:	4b26      	ldr	r3, [pc, #152]	; (1e630 <prvSwitchTimerLists+0xac>)
   1e598:	681b      	ldr	r3, [r3, #0]
   1e59a:	68db      	ldr	r3, [r3, #12]
   1e59c:	68db      	ldr	r3, [r3, #12]
   1e59e:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1e5a0:	693b      	ldr	r3, [r7, #16]
   1e5a2:	3304      	adds	r3, #4
   1e5a4:	0018      	movs	r0, r3
   1e5a6:	4b23      	ldr	r3, [pc, #140]	; (1e634 <prvSwitchTimerLists+0xb0>)
   1e5a8:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1e5aa:	693b      	ldr	r3, [r7, #16]
   1e5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e5ae:	693a      	ldr	r2, [r7, #16]
   1e5b0:	0010      	movs	r0, r2
   1e5b2:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1e5b4:	693b      	ldr	r3, [r7, #16]
   1e5b6:	69db      	ldr	r3, [r3, #28]
   1e5b8:	2b01      	cmp	r3, #1
   1e5ba:	d126      	bne.n	1e60a <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   1e5bc:	693b      	ldr	r3, [r7, #16]
   1e5be:	699a      	ldr	r2, [r3, #24]
   1e5c0:	697b      	ldr	r3, [r7, #20]
   1e5c2:	18d3      	adds	r3, r2, r3
   1e5c4:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   1e5c6:	68fa      	ldr	r2, [r7, #12]
   1e5c8:	697b      	ldr	r3, [r7, #20]
   1e5ca:	429a      	cmp	r2, r3
   1e5cc:	d90e      	bls.n	1e5ec <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   1e5ce:	693b      	ldr	r3, [r7, #16]
   1e5d0:	68fa      	ldr	r2, [r7, #12]
   1e5d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1e5d4:	693b      	ldr	r3, [r7, #16]
   1e5d6:	693a      	ldr	r2, [r7, #16]
   1e5d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1e5da:	4b15      	ldr	r3, [pc, #84]	; (1e630 <prvSwitchTimerLists+0xac>)
   1e5dc:	681a      	ldr	r2, [r3, #0]
   1e5de:	693b      	ldr	r3, [r7, #16]
   1e5e0:	3304      	adds	r3, #4
   1e5e2:	0019      	movs	r1, r3
   1e5e4:	0010      	movs	r0, r2
   1e5e6:	4b14      	ldr	r3, [pc, #80]	; (1e638 <prvSwitchTimerLists+0xb4>)
   1e5e8:	4798      	blx	r3
   1e5ea:	e00e      	b.n	1e60a <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1e5ec:	697a      	ldr	r2, [r7, #20]
   1e5ee:	6938      	ldr	r0, [r7, #16]
   1e5f0:	2300      	movs	r3, #0
   1e5f2:	9300      	str	r3, [sp, #0]
   1e5f4:	2300      	movs	r3, #0
   1e5f6:	2100      	movs	r1, #0
   1e5f8:	4c10      	ldr	r4, [pc, #64]	; (1e63c <prvSwitchTimerLists+0xb8>)
   1e5fa:	47a0      	blx	r4
   1e5fc:	0003      	movs	r3, r0
   1e5fe:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   1e600:	68bb      	ldr	r3, [r7, #8]
   1e602:	2b00      	cmp	r3, #0
   1e604:	d101      	bne.n	1e60a <prvSwitchTimerLists+0x86>
   1e606:	b672      	cpsid	i
   1e608:	e7fe      	b.n	1e608 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1e60a:	4b09      	ldr	r3, [pc, #36]	; (1e630 <prvSwitchTimerLists+0xac>)
   1e60c:	681b      	ldr	r3, [r3, #0]
   1e60e:	681b      	ldr	r3, [r3, #0]
   1e610:	2b00      	cmp	r3, #0
   1e612:	d1bb      	bne.n	1e58c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   1e614:	4b06      	ldr	r3, [pc, #24]	; (1e630 <prvSwitchTimerLists+0xac>)
   1e616:	681b      	ldr	r3, [r3, #0]
   1e618:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   1e61a:	4b09      	ldr	r3, [pc, #36]	; (1e640 <prvSwitchTimerLists+0xbc>)
   1e61c:	681a      	ldr	r2, [r3, #0]
   1e61e:	4b04      	ldr	r3, [pc, #16]	; (1e630 <prvSwitchTimerLists+0xac>)
   1e620:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   1e622:	4b07      	ldr	r3, [pc, #28]	; (1e640 <prvSwitchTimerLists+0xbc>)
   1e624:	687a      	ldr	r2, [r7, #4]
   1e626:	601a      	str	r2, [r3, #0]
}
   1e628:	46c0      	nop			; (mov r8, r8)
   1e62a:	46bd      	mov	sp, r7
   1e62c:	b007      	add	sp, #28
   1e62e:	bd90      	pop	{r4, r7, pc}
   1e630:	20004208 	.word	0x20004208
   1e634:	0001acab 	.word	0x0001acab
   1e638:	0001ac3f 	.word	0x0001ac3f
   1e63c:	0001e159 	.word	0x0001e159
   1e640:	2000420c 	.word	0x2000420c

0001e644 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   1e644:	b580      	push	{r7, lr}
   1e646:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   1e648:	4b10      	ldr	r3, [pc, #64]	; (1e68c <prvCheckForValidListAndQueue+0x48>)
   1e64a:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   1e64c:	4b10      	ldr	r3, [pc, #64]	; (1e690 <prvCheckForValidListAndQueue+0x4c>)
   1e64e:	681b      	ldr	r3, [r3, #0]
   1e650:	2b00      	cmp	r3, #0
   1e652:	d115      	bne.n	1e680 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   1e654:	4b0f      	ldr	r3, [pc, #60]	; (1e694 <prvCheckForValidListAndQueue+0x50>)
   1e656:	0018      	movs	r0, r3
   1e658:	4b0f      	ldr	r3, [pc, #60]	; (1e698 <prvCheckForValidListAndQueue+0x54>)
   1e65a:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   1e65c:	4b0f      	ldr	r3, [pc, #60]	; (1e69c <prvCheckForValidListAndQueue+0x58>)
   1e65e:	0018      	movs	r0, r3
   1e660:	4b0d      	ldr	r3, [pc, #52]	; (1e698 <prvCheckForValidListAndQueue+0x54>)
   1e662:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   1e664:	4b0e      	ldr	r3, [pc, #56]	; (1e6a0 <prvCheckForValidListAndQueue+0x5c>)
   1e666:	4a0b      	ldr	r2, [pc, #44]	; (1e694 <prvCheckForValidListAndQueue+0x50>)
   1e668:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   1e66a:	4b0e      	ldr	r3, [pc, #56]	; (1e6a4 <prvCheckForValidListAndQueue+0x60>)
   1e66c:	4a0b      	ldr	r2, [pc, #44]	; (1e69c <prvCheckForValidListAndQueue+0x58>)
   1e66e:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   1e670:	2200      	movs	r2, #0
   1e672:	210c      	movs	r1, #12
   1e674:	2005      	movs	r0, #5
   1e676:	4b0c      	ldr	r3, [pc, #48]	; (1e6a8 <prvCheckForValidListAndQueue+0x64>)
   1e678:	4798      	blx	r3
   1e67a:	0002      	movs	r2, r0
   1e67c:	4b04      	ldr	r3, [pc, #16]	; (1e690 <prvCheckForValidListAndQueue+0x4c>)
   1e67e:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1e680:	4b0a      	ldr	r3, [pc, #40]	; (1e6ac <prvCheckForValidListAndQueue+0x68>)
   1e682:	4798      	blx	r3
}
   1e684:	46c0      	nop			; (mov r8, r8)
   1e686:	46bd      	mov	sp, r7
   1e688:	bd80      	pop	{r7, pc}
   1e68a:	46c0      	nop			; (mov r8, r8)
   1e68c:	0001ae39 	.word	0x0001ae39
   1e690:	20004210 	.word	0x20004210
   1e694:	200041e0 	.word	0x200041e0
   1e698:	0001aba9 	.word	0x0001aba9
   1e69c:	200041f4 	.word	0x200041f4
   1e6a0:	20004208 	.word	0x20004208
   1e6a4:	2000420c 	.word	0x2000420c
   1e6a8:	0001b125 	.word	0x0001b125
   1e6ac:	0001ae5d 	.word	0x0001ae5d

0001e6b0 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
   1e6b0:	b580      	push	{r7, lr}
   1e6b2:	b082      	sub	sp, #8
   1e6b4:	af00      	add	r7, sp, #0
   1e6b6:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
   1e6b8:	687b      	ldr	r3, [r7, #4]
   1e6ba:	7c1b      	ldrb	r3, [r3, #16]
   1e6bc:	2b00      	cmp	r3, #0
   1e6be:	d00b      	beq.n	1e6d8 <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1e6c0:	687b      	ldr	r3, [r7, #4]
   1e6c2:	689b      	ldr	r3, [r3, #8]
   1e6c4:	1c5a      	adds	r2, r3, #1
   1e6c6:	687b      	ldr	r3, [r7, #4]
   1e6c8:	68d9      	ldr	r1, [r3, #12]
   1e6ca:	4b10      	ldr	r3, [pc, #64]	; (1e70c <advance_pointer+0x5c>)
   1e6cc:	0010      	movs	r0, r2
   1e6ce:	4798      	blx	r3
   1e6d0:	000b      	movs	r3, r1
   1e6d2:	001a      	movs	r2, r3
   1e6d4:	687b      	ldr	r3, [r7, #4]
   1e6d6:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
   1e6d8:	687b      	ldr	r3, [r7, #4]
   1e6da:	685b      	ldr	r3, [r3, #4]
   1e6dc:	1c5a      	adds	r2, r3, #1
   1e6de:	687b      	ldr	r3, [r7, #4]
   1e6e0:	68d9      	ldr	r1, [r3, #12]
   1e6e2:	4b0a      	ldr	r3, [pc, #40]	; (1e70c <advance_pointer+0x5c>)
   1e6e4:	0010      	movs	r0, r2
   1e6e6:	4798      	blx	r3
   1e6e8:	000b      	movs	r3, r1
   1e6ea:	001a      	movs	r2, r3
   1e6ec:	687b      	ldr	r3, [r7, #4]
   1e6ee:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
   1e6f0:	687b      	ldr	r3, [r7, #4]
   1e6f2:	685a      	ldr	r2, [r3, #4]
   1e6f4:	687b      	ldr	r3, [r7, #4]
   1e6f6:	689b      	ldr	r3, [r3, #8]
   1e6f8:	1ad3      	subs	r3, r2, r3
   1e6fa:	425a      	negs	r2, r3
   1e6fc:	4153      	adcs	r3, r2
   1e6fe:	b2da      	uxtb	r2, r3
   1e700:	687b      	ldr	r3, [r7, #4]
   1e702:	741a      	strb	r2, [r3, #16]
 }
   1e704:	46c0      	nop			; (mov r8, r8)
   1e706:	46bd      	mov	sp, r7
   1e708:	b002      	add	sp, #8
   1e70a:	bd80      	pop	{r7, pc}
   1e70c:	00033721 	.word	0x00033721

0001e710 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
   1e710:	b580      	push	{r7, lr}
   1e712:	b082      	sub	sp, #8
   1e714:	af00      	add	r7, sp, #0
   1e716:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
   1e718:	687b      	ldr	r3, [r7, #4]
   1e71a:	2200      	movs	r2, #0
   1e71c:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1e71e:	687b      	ldr	r3, [r7, #4]
   1e720:	689b      	ldr	r3, [r3, #8]
   1e722:	1c5a      	adds	r2, r3, #1
   1e724:	687b      	ldr	r3, [r7, #4]
   1e726:	68d9      	ldr	r1, [r3, #12]
   1e728:	4b05      	ldr	r3, [pc, #20]	; (1e740 <retreat_pointer+0x30>)
   1e72a:	0010      	movs	r0, r2
   1e72c:	4798      	blx	r3
   1e72e:	000b      	movs	r3, r1
   1e730:	001a      	movs	r2, r3
   1e732:	687b      	ldr	r3, [r7, #4]
   1e734:	609a      	str	r2, [r3, #8]
 }
   1e736:	46c0      	nop			; (mov r8, r8)
   1e738:	46bd      	mov	sp, r7
   1e73a:	b002      	add	sp, #8
   1e73c:	bd80      	pop	{r7, pc}
   1e73e:	46c0      	nop			; (mov r8, r8)
   1e740:	00033721 	.word	0x00033721

0001e744 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
   1e744:	b580      	push	{r7, lr}
   1e746:	b084      	sub	sp, #16
   1e748:	af00      	add	r7, sp, #0
   1e74a:	6078      	str	r0, [r7, #4]
   1e74c:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
   1e74e:	2014      	movs	r0, #20
   1e750:	4b09      	ldr	r3, [pc, #36]	; (1e778 <circular_buf_init+0x34>)
   1e752:	4798      	blx	r3
   1e754:	0003      	movs	r3, r0
   1e756:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
   1e758:	68fb      	ldr	r3, [r7, #12]
   1e75a:	687a      	ldr	r2, [r7, #4]
   1e75c:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
   1e75e:	68fb      	ldr	r3, [r7, #12]
   1e760:	683a      	ldr	r2, [r7, #0]
   1e762:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
   1e764:	68fb      	ldr	r3, [r7, #12]
   1e766:	0018      	movs	r0, r3
   1e768:	4b04      	ldr	r3, [pc, #16]	; (1e77c <circular_buf_init+0x38>)
   1e76a:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
   1e76c:	68fb      	ldr	r3, [r7, #12]
 }
   1e76e:	0018      	movs	r0, r3
   1e770:	46bd      	mov	sp, r7
   1e772:	b004      	add	sp, #16
   1e774:	bd80      	pop	{r7, pc}
   1e776:	46c0      	nop			; (mov r8, r8)
   1e778:	00035591 	.word	0x00035591
   1e77c:	0001e781 	.word	0x0001e781

0001e780 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
   1e780:	b580      	push	{r7, lr}
   1e782:	b082      	sub	sp, #8
   1e784:	af00      	add	r7, sp, #0
   1e786:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
   1e788:	687b      	ldr	r3, [r7, #4]
   1e78a:	2200      	movs	r2, #0
   1e78c:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
   1e78e:	687b      	ldr	r3, [r7, #4]
   1e790:	2200      	movs	r2, #0
   1e792:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
   1e794:	687b      	ldr	r3, [r7, #4]
   1e796:	2200      	movs	r2, #0
   1e798:	741a      	strb	r2, [r3, #16]
 }
   1e79a:	46c0      	nop			; (mov r8, r8)
   1e79c:	46bd      	mov	sp, r7
   1e79e:	b002      	add	sp, #8
   1e7a0:	bd80      	pop	{r7, pc}
	...

0001e7a4 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
   1e7a4:	b580      	push	{r7, lr}
   1e7a6:	b082      	sub	sp, #8
   1e7a8:	af00      	add	r7, sp, #0
   1e7aa:	6078      	str	r0, [r7, #4]
   1e7ac:	000a      	movs	r2, r1
   1e7ae:	1cfb      	adds	r3, r7, #3
   1e7b0:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
   1e7b2:	687b      	ldr	r3, [r7, #4]
   1e7b4:	681a      	ldr	r2, [r3, #0]
   1e7b6:	687b      	ldr	r3, [r7, #4]
   1e7b8:	685b      	ldr	r3, [r3, #4]
   1e7ba:	18d3      	adds	r3, r2, r3
   1e7bc:	1cfa      	adds	r2, r7, #3
   1e7be:	7812      	ldrb	r2, [r2, #0]
   1e7c0:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
   1e7c2:	687b      	ldr	r3, [r7, #4]
   1e7c4:	0018      	movs	r0, r3
   1e7c6:	4b03      	ldr	r3, [pc, #12]	; (1e7d4 <circular_buf_put+0x30>)
   1e7c8:	4798      	blx	r3
 }
   1e7ca:	46c0      	nop			; (mov r8, r8)
   1e7cc:	46bd      	mov	sp, r7
   1e7ce:	b002      	add	sp, #8
   1e7d0:	bd80      	pop	{r7, pc}
   1e7d2:	46c0      	nop			; (mov r8, r8)
   1e7d4:	0001e6b1 	.word	0x0001e6b1

0001e7d8 <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
   1e7d8:	b580      	push	{r7, lr}
   1e7da:	b084      	sub	sp, #16
   1e7dc:	af00      	add	r7, sp, #0
   1e7de:	6078      	str	r0, [r7, #4]
   1e7e0:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
   1e7e2:	2301      	movs	r3, #1
   1e7e4:	425b      	negs	r3, r3
   1e7e6:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
   1e7e8:	687b      	ldr	r3, [r7, #4]
   1e7ea:	0018      	movs	r0, r3
   1e7ec:	4b0d      	ldr	r3, [pc, #52]	; (1e824 <circular_buf_get+0x4c>)
   1e7ee:	4798      	blx	r3
   1e7f0:	0003      	movs	r3, r0
   1e7f2:	001a      	movs	r2, r3
   1e7f4:	2301      	movs	r3, #1
   1e7f6:	4053      	eors	r3, r2
   1e7f8:	b2db      	uxtb	r3, r3
   1e7fa:	2b00      	cmp	r3, #0
   1e7fc:	d00d      	beq.n	1e81a <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
   1e7fe:	687b      	ldr	r3, [r7, #4]
   1e800:	681a      	ldr	r2, [r3, #0]
   1e802:	687b      	ldr	r3, [r7, #4]
   1e804:	689b      	ldr	r3, [r3, #8]
   1e806:	18d3      	adds	r3, r2, r3
   1e808:	781a      	ldrb	r2, [r3, #0]
   1e80a:	683b      	ldr	r3, [r7, #0]
   1e80c:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
   1e80e:	687b      	ldr	r3, [r7, #4]
   1e810:	0018      	movs	r0, r3
   1e812:	4b05      	ldr	r3, [pc, #20]	; (1e828 <circular_buf_get+0x50>)
   1e814:	4798      	blx	r3

		 r = 0;
   1e816:	2300      	movs	r3, #0
   1e818:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
   1e81a:	68fb      	ldr	r3, [r7, #12]
 }
   1e81c:	0018      	movs	r0, r3
   1e81e:	46bd      	mov	sp, r7
   1e820:	b004      	add	sp, #16
   1e822:	bd80      	pop	{r7, pc}
   1e824:	0001e82d 	.word	0x0001e82d
   1e828:	0001e711 	.word	0x0001e711

0001e82c <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
   1e82c:	b580      	push	{r7, lr}
   1e82e:	b082      	sub	sp, #8
   1e830:	af00      	add	r7, sp, #0
   1e832:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
   1e834:	687b      	ldr	r3, [r7, #4]
   1e836:	7c1b      	ldrb	r3, [r3, #16]
   1e838:	2201      	movs	r2, #1
   1e83a:	4053      	eors	r3, r2
   1e83c:	b2db      	uxtb	r3, r3
   1e83e:	2b00      	cmp	r3, #0
   1e840:	d007      	beq.n	1e852 <circular_buf_empty+0x26>
   1e842:	687b      	ldr	r3, [r7, #4]
   1e844:	685a      	ldr	r2, [r3, #4]
   1e846:	687b      	ldr	r3, [r7, #4]
   1e848:	689b      	ldr	r3, [r3, #8]
   1e84a:	429a      	cmp	r2, r3
   1e84c:	d101      	bne.n	1e852 <circular_buf_empty+0x26>
   1e84e:	2301      	movs	r3, #1
   1e850:	e000      	b.n	1e854 <circular_buf_empty+0x28>
   1e852:	2300      	movs	r3, #0
   1e854:	1c1a      	adds	r2, r3, #0
   1e856:	2301      	movs	r3, #1
   1e858:	4013      	ands	r3, r2
   1e85a:	b2db      	uxtb	r3, r3
 }
   1e85c:	0018      	movs	r0, r3
   1e85e:	46bd      	mov	sp, r7
   1e860:	b002      	add	sp, #8
   1e862:	bd80      	pop	{r7, pc}

0001e864 <system_interrupt_enable>:
{
   1e864:	b580      	push	{r7, lr}
   1e866:	b082      	sub	sp, #8
   1e868:	af00      	add	r7, sp, #0
   1e86a:	0002      	movs	r2, r0
   1e86c:	1dfb      	adds	r3, r7, #7
   1e86e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1e870:	4b06      	ldr	r3, [pc, #24]	; (1e88c <system_interrupt_enable+0x28>)
   1e872:	1dfa      	adds	r2, r7, #7
   1e874:	7812      	ldrb	r2, [r2, #0]
   1e876:	0011      	movs	r1, r2
   1e878:	221f      	movs	r2, #31
   1e87a:	400a      	ands	r2, r1
   1e87c:	2101      	movs	r1, #1
   1e87e:	4091      	lsls	r1, r2
   1e880:	000a      	movs	r2, r1
   1e882:	601a      	str	r2, [r3, #0]
}
   1e884:	46c0      	nop			; (mov r8, r8)
   1e886:	46bd      	mov	sp, r7
   1e888:	b002      	add	sp, #8
   1e88a:	bd80      	pop	{r7, pc}
   1e88c:	e000e100 	.word	0xe000e100

0001e890 <usart_is_syncing>:
{
   1e890:	b580      	push	{r7, lr}
   1e892:	b084      	sub	sp, #16
   1e894:	af00      	add	r7, sp, #0
   1e896:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   1e898:	687b      	ldr	r3, [r7, #4]
   1e89a:	681b      	ldr	r3, [r3, #0]
   1e89c:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   1e89e:	68fb      	ldr	r3, [r7, #12]
   1e8a0:	69db      	ldr	r3, [r3, #28]
   1e8a2:	1e5a      	subs	r2, r3, #1
   1e8a4:	4193      	sbcs	r3, r2
   1e8a6:	b2db      	uxtb	r3, r3
}
   1e8a8:	0018      	movs	r0, r3
   1e8aa:	46bd      	mov	sp, r7
   1e8ac:	b004      	add	sp, #16
   1e8ae:	bd80      	pop	{r7, pc}

0001e8b0 <_usart_wait_for_sync>:
{
   1e8b0:	b580      	push	{r7, lr}
   1e8b2:	b082      	sub	sp, #8
   1e8b4:	af00      	add	r7, sp, #0
   1e8b6:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   1e8b8:	46c0      	nop			; (mov r8, r8)
   1e8ba:	687b      	ldr	r3, [r7, #4]
   1e8bc:	0018      	movs	r0, r3
   1e8be:	4b04      	ldr	r3, [pc, #16]	; (1e8d0 <_usart_wait_for_sync+0x20>)
   1e8c0:	4798      	blx	r3
   1e8c2:	1e03      	subs	r3, r0, #0
   1e8c4:	d1f9      	bne.n	1e8ba <_usart_wait_for_sync+0xa>
}
   1e8c6:	46c0      	nop			; (mov r8, r8)
   1e8c8:	46bd      	mov	sp, r7
   1e8ca:	b002      	add	sp, #8
   1e8cc:	bd80      	pop	{r7, pc}
   1e8ce:	46c0      	nop			; (mov r8, r8)
   1e8d0:	0001e891 	.word	0x0001e891

0001e8d4 <usart_get_config_defaults>:
{
   1e8d4:	b580      	push	{r7, lr}
   1e8d6:	b082      	sub	sp, #8
   1e8d8:	af00      	add	r7, sp, #0
   1e8da:	6078      	str	r0, [r7, #4]
	config->data_order       = USART_DATAORDER_LSB;
   1e8dc:	687b      	ldr	r3, [r7, #4]
   1e8de:	2280      	movs	r2, #128	; 0x80
   1e8e0:	05d2      	lsls	r2, r2, #23
   1e8e2:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   1e8e4:	687b      	ldr	r3, [r7, #4]
   1e8e6:	2200      	movs	r2, #0
   1e8e8:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   1e8ea:	687b      	ldr	r3, [r7, #4]
   1e8ec:	22ff      	movs	r2, #255	; 0xff
   1e8ee:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   1e8f0:	687b      	ldr	r3, [r7, #4]
   1e8f2:	2200      	movs	r2, #0
   1e8f4:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   1e8f6:	687b      	ldr	r3, [r7, #4]
   1e8f8:	2200      	movs	r2, #0
   1e8fa:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   1e8fc:	687b      	ldr	r3, [r7, #4]
   1e8fe:	2296      	movs	r2, #150	; 0x96
   1e900:	0192      	lsls	r2, r2, #6
   1e902:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   1e904:	687b      	ldr	r3, [r7, #4]
   1e906:	2224      	movs	r2, #36	; 0x24
   1e908:	2101      	movs	r1, #1
   1e90a:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   1e90c:	687b      	ldr	r3, [r7, #4]
   1e90e:	2225      	movs	r2, #37	; 0x25
   1e910:	2101      	movs	r1, #1
   1e912:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   1e914:	687b      	ldr	r3, [r7, #4]
   1e916:	2226      	movs	r2, #38	; 0x26
   1e918:	2100      	movs	r1, #0
   1e91a:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   1e91c:	687b      	ldr	r3, [r7, #4]
   1e91e:	2227      	movs	r2, #39	; 0x27
   1e920:	2100      	movs	r1, #0
   1e922:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   1e924:	687b      	ldr	r3, [r7, #4]
   1e926:	2200      	movs	r2, #0
   1e928:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   1e92a:	687b      	ldr	r3, [r7, #4]
   1e92c:	2288      	movs	r2, #136	; 0x88
   1e92e:	0352      	lsls	r2, r2, #13
   1e930:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   1e932:	687b      	ldr	r3, [r7, #4]
   1e934:	222c      	movs	r2, #44	; 0x2c
   1e936:	2100      	movs	r1, #0
   1e938:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   1e93a:	687b      	ldr	r3, [r7, #4]
   1e93c:	222d      	movs	r2, #45	; 0x2d
   1e93e:	2100      	movs	r1, #0
   1e940:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   1e942:	687b      	ldr	r3, [r7, #4]
   1e944:	2200      	movs	r2, #0
   1e946:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   1e948:	687b      	ldr	r3, [r7, #4]
   1e94a:	2200      	movs	r2, #0
   1e94c:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   1e94e:	687b      	ldr	r3, [r7, #4]
   1e950:	2200      	movs	r2, #0
   1e952:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   1e954:	687b      	ldr	r3, [r7, #4]
   1e956:	2200      	movs	r2, #0
   1e958:	63da      	str	r2, [r3, #60]	; 0x3c
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   1e95a:	687b      	ldr	r3, [r7, #4]
   1e95c:	2200      	movs	r2, #0
   1e95e:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   1e960:	687b      	ldr	r3, [r7, #4]
   1e962:	2200      	movs	r2, #0
   1e964:	821a      	strh	r2, [r3, #16]
	config->lin_slave_enable      = false;
   1e966:	687b      	ldr	r3, [r7, #4]
   1e968:	2200      	movs	r2, #0
   1e96a:	76da      	strb	r2, [r3, #27]
	config->immediate_buffer_overflow_notification  = false;
   1e96c:	687b      	ldr	r3, [r7, #4]
   1e96e:	2200      	movs	r2, #0
   1e970:	761a      	strb	r2, [r3, #24]
	config->start_frame_detection_enable            = false;
   1e972:	687b      	ldr	r3, [r7, #4]
   1e974:	2200      	movs	r2, #0
   1e976:	771a      	strb	r2, [r3, #28]
	config->encoding_format_enable                  = false;
   1e978:	687b      	ldr	r3, [r7, #4]
   1e97a:	2200      	movs	r2, #0
   1e97c:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   1e97e:	687b      	ldr	r3, [r7, #4]
   1e980:	2213      	movs	r2, #19
   1e982:	769a      	strb	r2, [r3, #26]
	config->collision_detection_enable              = false;
   1e984:	687b      	ldr	r3, [r7, #4]
   1e986:	2200      	movs	r2, #0
   1e988:	775a      	strb	r2, [r3, #29]
}
   1e98a:	46c0      	nop			; (mov r8, r8)
   1e98c:	46bd      	mov	sp, r7
   1e98e:	b002      	add	sp, #8
   1e990:	bd80      	pop	{r7, pc}
	...

0001e994 <usart_enable>:
{
   1e994:	b580      	push	{r7, lr}
   1e996:	b084      	sub	sp, #16
   1e998:	af00      	add	r7, sp, #0
   1e99a:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   1e99c:	687b      	ldr	r3, [r7, #4]
   1e99e:	681b      	ldr	r3, [r3, #0]
   1e9a0:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1e9a2:	687b      	ldr	r3, [r7, #4]
   1e9a4:	681b      	ldr	r3, [r3, #0]
   1e9a6:	0018      	movs	r0, r3
   1e9a8:	4b09      	ldr	r3, [pc, #36]	; (1e9d0 <usart_enable+0x3c>)
   1e9aa:	4798      	blx	r3
   1e9ac:	0003      	movs	r3, r0
   1e9ae:	0018      	movs	r0, r3
   1e9b0:	4b08      	ldr	r3, [pc, #32]	; (1e9d4 <usart_enable+0x40>)
   1e9b2:	4798      	blx	r3
	_usart_wait_for_sync(module);
   1e9b4:	687b      	ldr	r3, [r7, #4]
   1e9b6:	0018      	movs	r0, r3
   1e9b8:	4b07      	ldr	r3, [pc, #28]	; (1e9d8 <usart_enable+0x44>)
   1e9ba:	4798      	blx	r3
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   1e9bc:	68fb      	ldr	r3, [r7, #12]
   1e9be:	681b      	ldr	r3, [r3, #0]
   1e9c0:	2202      	movs	r2, #2
   1e9c2:	431a      	orrs	r2, r3
   1e9c4:	68fb      	ldr	r3, [r7, #12]
   1e9c6:	601a      	str	r2, [r3, #0]
}
   1e9c8:	46c0      	nop			; (mov r8, r8)
   1e9ca:	46bd      	mov	sp, r7
   1e9cc:	b004      	add	sp, #16
   1e9ce:	bd80      	pop	{r7, pc}
   1e9d0:	000282c1 	.word	0x000282c1
   1e9d4:	0001e865 	.word	0x0001e865
   1e9d8:	0001e8b1 	.word	0x0001e8b1

0001e9dc <usart_enable_callback>:
{
   1e9dc:	b580      	push	{r7, lr}
   1e9de:	b082      	sub	sp, #8
   1e9e0:	af00      	add	r7, sp, #0
   1e9e2:	6078      	str	r0, [r7, #4]
   1e9e4:	000a      	movs	r2, r1
   1e9e6:	1cfb      	adds	r3, r7, #3
   1e9e8:	701a      	strb	r2, [r3, #0]
	module->callback_enable_mask |= (1 << callback_type);
   1e9ea:	687b      	ldr	r3, [r7, #4]
   1e9ec:	2231      	movs	r2, #49	; 0x31
   1e9ee:	5c9b      	ldrb	r3, [r3, r2]
   1e9f0:	b25a      	sxtb	r2, r3
   1e9f2:	1cfb      	adds	r3, r7, #3
   1e9f4:	781b      	ldrb	r3, [r3, #0]
   1e9f6:	2101      	movs	r1, #1
   1e9f8:	4099      	lsls	r1, r3
   1e9fa:	000b      	movs	r3, r1
   1e9fc:	b25b      	sxtb	r3, r3
   1e9fe:	4313      	orrs	r3, r2
   1ea00:	b25b      	sxtb	r3, r3
   1ea02:	b2d9      	uxtb	r1, r3
   1ea04:	687b      	ldr	r3, [r7, #4]
   1ea06:	2231      	movs	r2, #49	; 0x31
   1ea08:	5499      	strb	r1, [r3, r2]
}
   1ea0a:	46c0      	nop			; (mov r8, r8)
   1ea0c:	46bd      	mov	sp, r7
   1ea0e:	b002      	add	sp, #8
   1ea10:	bd80      	pop	{r7, pc}
	...

0001ea14 <InitializeSerialConsole>:
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeSerialConsole(void)
{
   1ea14:	b580      	push	{r7, lr}
   1ea16:	af00      	add	r7, sp, #0
    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *)rxCharacterBuffer, RX_BUFFER_SIZE);
   1ea18:	2380      	movs	r3, #128	; 0x80
   1ea1a:	009a      	lsls	r2, r3, #2
   1ea1c:	4b0f      	ldr	r3, [pc, #60]	; (1ea5c <InitializeSerialConsole+0x48>)
   1ea1e:	0011      	movs	r1, r2
   1ea20:	0018      	movs	r0, r3
   1ea22:	4b0f      	ldr	r3, [pc, #60]	; (1ea60 <InitializeSerialConsole+0x4c>)
   1ea24:	4798      	blx	r3
   1ea26:	0002      	movs	r2, r0
   1ea28:	4b0e      	ldr	r3, [pc, #56]	; (1ea64 <InitializeSerialConsole+0x50>)
   1ea2a:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *)txCharacterBuffer, RX_BUFFER_SIZE);
   1ea2c:	2380      	movs	r3, #128	; 0x80
   1ea2e:	009a      	lsls	r2, r3, #2
   1ea30:	4b0d      	ldr	r3, [pc, #52]	; (1ea68 <InitializeSerialConsole+0x54>)
   1ea32:	0011      	movs	r1, r2
   1ea34:	0018      	movs	r0, r3
   1ea36:	4b0a      	ldr	r3, [pc, #40]	; (1ea60 <InitializeSerialConsole+0x4c>)
   1ea38:	4798      	blx	r3
   1ea3a:	0002      	movs	r2, r0
   1ea3c:	4b0b      	ldr	r3, [pc, #44]	; (1ea6c <InitializeSerialConsole+0x58>)
   1ea3e:	601a      	str	r2, [r3, #0]

    // Configure USART and Callbacks
    configure_usart();
   1ea40:	4b0b      	ldr	r3, [pc, #44]	; (1ea70 <InitializeSerialConsole+0x5c>)
   1ea42:	4798      	blx	r3
    configure_usart_callbacks();
   1ea44:	4b0b      	ldr	r3, [pc, #44]	; (1ea74 <InitializeSerialConsole+0x60>)
   1ea46:	4798      	blx	r3

    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Kicks off constant reading of characters
   1ea48:	490b      	ldr	r1, [pc, #44]	; (1ea78 <InitializeSerialConsole+0x64>)
   1ea4a:	4b0c      	ldr	r3, [pc, #48]	; (1ea7c <InitializeSerialConsole+0x68>)
   1ea4c:	2201      	movs	r2, #1
   1ea4e:	0018      	movs	r0, r3
   1ea50:	4b0b      	ldr	r3, [pc, #44]	; (1ea80 <InitializeSerialConsole+0x6c>)
   1ea52:	4798      	blx	r3

    // Add any other calls you need to do to initialize your Serial Console
}
   1ea54:	46c0      	nop			; (mov r8, r8)
   1ea56:	46bd      	mov	sp, r7
   1ea58:	bd80      	pop	{r7, pc}
   1ea5a:	46c0      	nop			; (mov r8, r8)
   1ea5c:	200058dc 	.word	0x200058dc
   1ea60:	0001e745 	.word	0x0001e745
   1ea64:	200056d4 	.word	0x200056d4
   1ea68:	200056dc 	.word	0x200056dc
   1ea6c:	20005ae0 	.word	0x20005ae0
   1ea70:	0001ebe9 	.word	0x0001ebe9
   1ea74:	0001ec61 	.word	0x0001ec61
   1ea78:	200056d8 	.word	0x200056d8
   1ea7c:	200056a0 	.word	0x200056a0
   1ea80:	00029b69 	.word	0x00029b69

0001ea84 <SerialConsoleWriteString>:
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'. Modified to be
 *thread safe.
 * @note			Use to send a string of characters to the user via UART
 */
void SerialConsoleWriteString(const char *string)
{
   1ea84:	b580      	push	{r7, lr}
   1ea86:	b084      	sub	sp, #16
   1ea88:	af00      	add	r7, sp, #0
   1ea8a:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1ea8c:	4b1a      	ldr	r3, [pc, #104]	; (1eaf8 <SerialConsoleWriteString+0x74>)
   1ea8e:	4798      	blx	r3
    if (string != NULL) {
   1ea90:	687b      	ldr	r3, [r7, #4]
   1ea92:	2b00      	cmp	r3, #0
   1ea94:	d02a      	beq.n	1eaec <SerialConsoleWriteString+0x68>
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1ea96:	2300      	movs	r3, #0
   1ea98:	60fb      	str	r3, [r7, #12]
   1ea9a:	e00b      	b.n	1eab4 <SerialConsoleWriteString+0x30>
            circular_buf_put(cbufTx, string[iter]);
   1ea9c:	4b17      	ldr	r3, [pc, #92]	; (1eafc <SerialConsoleWriteString+0x78>)
   1ea9e:	6818      	ldr	r0, [r3, #0]
   1eaa0:	687a      	ldr	r2, [r7, #4]
   1eaa2:	68fb      	ldr	r3, [r7, #12]
   1eaa4:	18d3      	adds	r3, r2, r3
   1eaa6:	781b      	ldrb	r3, [r3, #0]
   1eaa8:	0019      	movs	r1, r3
   1eaaa:	4b15      	ldr	r3, [pc, #84]	; (1eb00 <SerialConsoleWriteString+0x7c>)
   1eaac:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1eaae:	68fb      	ldr	r3, [r7, #12]
   1eab0:	3301      	adds	r3, #1
   1eab2:	60fb      	str	r3, [r7, #12]
   1eab4:	687b      	ldr	r3, [r7, #4]
   1eab6:	0018      	movs	r0, r3
   1eab8:	4b12      	ldr	r3, [pc, #72]	; (1eb04 <SerialConsoleWriteString+0x80>)
   1eaba:	4798      	blx	r3
   1eabc:	0002      	movs	r2, r0
   1eabe:	68fb      	ldr	r3, [r7, #12]
   1eac0:	429a      	cmp	r2, r3
   1eac2:	d8eb      	bhi.n	1ea9c <SerialConsoleWriteString+0x18>
        }

        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
   1eac4:	4b10      	ldr	r3, [pc, #64]	; (1eb08 <SerialConsoleWriteString+0x84>)
   1eac6:	2101      	movs	r1, #1
   1eac8:	0018      	movs	r0, r3
   1eaca:	4b10      	ldr	r3, [pc, #64]	; (1eb0c <SerialConsoleWriteString+0x88>)
   1eacc:	4798      	blx	r3
   1eace:	1e03      	subs	r3, r0, #0
   1ead0:	d10c      	bne.n	1eaec <SerialConsoleWriteString+0x68>
            circular_buf_get(cbufTx, (uint8_t *)&latestTx);  // Perform only if the SERCOM TX is free (not busy)
   1ead2:	4b0a      	ldr	r3, [pc, #40]	; (1eafc <SerialConsoleWriteString+0x78>)
   1ead4:	681b      	ldr	r3, [r3, #0]
   1ead6:	4a0e      	ldr	r2, [pc, #56]	; (1eb10 <SerialConsoleWriteString+0x8c>)
   1ead8:	0011      	movs	r1, r2
   1eada:	0018      	movs	r0, r3
   1eadc:	4b0d      	ldr	r3, [pc, #52]	; (1eb14 <SerialConsoleWriteString+0x90>)
   1eade:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1eae0:	490b      	ldr	r1, [pc, #44]	; (1eb10 <SerialConsoleWriteString+0x8c>)
   1eae2:	4b09      	ldr	r3, [pc, #36]	; (1eb08 <SerialConsoleWriteString+0x84>)
   1eae4:	2201      	movs	r2, #1
   1eae6:	0018      	movs	r0, r3
   1eae8:	4b0b      	ldr	r3, [pc, #44]	; (1eb18 <SerialConsoleWriteString+0x94>)
   1eaea:	4798      	blx	r3
        }
    }
    xTaskResumeAll();
   1eaec:	4b0b      	ldr	r3, [pc, #44]	; (1eb1c <SerialConsoleWriteString+0x98>)
   1eaee:	4798      	blx	r3
}
   1eaf0:	46c0      	nop			; (mov r8, r8)
   1eaf2:	46bd      	mov	sp, r7
   1eaf4:	b004      	add	sp, #16
   1eaf6:	bd80      	pop	{r7, pc}
   1eaf8:	0001d0f1 	.word	0x0001d0f1
   1eafc:	20005ae0 	.word	0x20005ae0
   1eb00:	0001e7a5 	.word	0x0001e7a5
   1eb04:	000359a7 	.word	0x000359a7
   1eb08:	200056a0 	.word	0x200056a0
   1eb0c:	00029bb1 	.word	0x00029bb1
   1eb10:	20005adc 	.word	0x20005adc
   1eb14:	0001e7d9 	.word	0x0001e7d9
   1eb18:	00029b21 	.word	0x00029b21
   1eb1c:	0001d109 	.word	0x0001d109

0001eb20 <SerialConsoleReadCharacter>:
 * @param[in]	Pointer to a character. This function will return the character from the RX buffer into this pointer
 * @return		Returns -1 if there are no characters in the buffer
 * @note			Use to receive characters from the RX buffer (FIFO)
 */
int SerialConsoleReadCharacter(uint8_t *rxChar)
{
   1eb20:	b580      	push	{r7, lr}
   1eb22:	b084      	sub	sp, #16
   1eb24:	af00      	add	r7, sp, #0
   1eb26:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1eb28:	4b08      	ldr	r3, [pc, #32]	; (1eb4c <SerialConsoleReadCharacter+0x2c>)
   1eb2a:	4798      	blx	r3
    int a = circular_buf_get(cbufRx, (uint8_t *)rxChar);
   1eb2c:	4b08      	ldr	r3, [pc, #32]	; (1eb50 <SerialConsoleReadCharacter+0x30>)
   1eb2e:	681b      	ldr	r3, [r3, #0]
   1eb30:	687a      	ldr	r2, [r7, #4]
   1eb32:	0011      	movs	r1, r2
   1eb34:	0018      	movs	r0, r3
   1eb36:	4b07      	ldr	r3, [pc, #28]	; (1eb54 <SerialConsoleReadCharacter+0x34>)
   1eb38:	4798      	blx	r3
   1eb3a:	0003      	movs	r3, r0
   1eb3c:	60fb      	str	r3, [r7, #12]
    xTaskResumeAll();
   1eb3e:	4b06      	ldr	r3, [pc, #24]	; (1eb58 <SerialConsoleReadCharacter+0x38>)
   1eb40:	4798      	blx	r3
    return a;
   1eb42:	68fb      	ldr	r3, [r7, #12]
}
   1eb44:	0018      	movs	r0, r3
   1eb46:	46bd      	mov	sp, r7
   1eb48:	b004      	add	sp, #16
   1eb4a:	bd80      	pop	{r7, pc}
   1eb4c:	0001d0f1 	.word	0x0001d0f1
   1eb50:	200056d4 	.word	0x200056d4
   1eb54:	0001e7d9 	.word	0x0001e7d9
   1eb58:	0001d109 	.word	0x0001d109

0001eb5c <getLogLevel>:
 * @return		Returns the current debug level of the system.
 * @note
 */

enum eDebugLogLevels getLogLevel(void)
{
   1eb5c:	b580      	push	{r7, lr}
   1eb5e:	af00      	add	r7, sp, #0
    return currentDebugLevel;
   1eb60:	4b02      	ldr	r3, [pc, #8]	; (1eb6c <getLogLevel+0x10>)
   1eb62:	781b      	ldrb	r3, [r3, #0]
}
   1eb64:	0018      	movs	r0, r3
   1eb66:	46bd      	mov	sp, r7
   1eb68:	bd80      	pop	{r7, pc}
   1eb6a:	46c0      	nop			; (mov r8, r8)
   1eb6c:	2000421c 	.word	0x2000421c

0001eb70 <LogMessage>:
 * @fn			LogMessage
 * @brief
 * @note
 */
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
   1eb70:	b40e      	push	{r1, r2, r3}
   1eb72:	b590      	push	{r4, r7, lr}
   1eb74:	b084      	sub	sp, #16
   1eb76:	af00      	add	r7, sp, #0
   1eb78:	0002      	movs	r2, r0
   1eb7a:	1dfb      	adds	r3, r7, #7
   1eb7c:	701a      	strb	r2, [r3, #0]
    if (getLogLevel() <= level) {
   1eb7e:	4b0e      	ldr	r3, [pc, #56]	; (1ebb8 <LogMessage+0x48>)
   1eb80:	4798      	blx	r3
   1eb82:	0003      	movs	r3, r0
   1eb84:	001a      	movs	r2, r3
   1eb86:	1dfb      	adds	r3, r7, #7
   1eb88:	781b      	ldrb	r3, [r3, #0]
   1eb8a:	4293      	cmp	r3, r2
   1eb8c:	d30c      	bcc.n	1eba8 <LogMessage+0x38>
        va_list ap;
        va_start(ap, format);
   1eb8e:	2320      	movs	r3, #32
   1eb90:	18fb      	adds	r3, r7, r3
   1eb92:	60fb      	str	r3, [r7, #12]
        vsnprintf(debugBuffer, 127, format, ap);
   1eb94:	68fb      	ldr	r3, [r7, #12]
   1eb96:	69fa      	ldr	r2, [r7, #28]
   1eb98:	4808      	ldr	r0, [pc, #32]	; (1ebbc <LogMessage+0x4c>)
   1eb9a:	217f      	movs	r1, #127	; 0x7f
   1eb9c:	4c08      	ldr	r4, [pc, #32]	; (1ebc0 <LogMessage+0x50>)
   1eb9e:	47a0      	blx	r4
        SerialConsoleWriteString(debugBuffer);
   1eba0:	4b06      	ldr	r3, [pc, #24]	; (1ebbc <LogMessage+0x4c>)
   1eba2:	0018      	movs	r0, r3
   1eba4:	4b07      	ldr	r3, [pc, #28]	; (1ebc4 <LogMessage+0x54>)
   1eba6:	4798      	blx	r3
        va_end(ap);
    }
};
   1eba8:	46c0      	nop			; (mov r8, r8)
   1ebaa:	46bd      	mov	sp, r7
   1ebac:	b004      	add	sp, #16
   1ebae:	bc90      	pop	{r4, r7}
   1ebb0:	bc08      	pop	{r3}
   1ebb2:	b003      	add	sp, #12
   1ebb4:	4718      	bx	r3
   1ebb6:	46c0      	nop			; (mov r8, r8)
   1ebb8:	0001eb5d 	.word	0x0001eb5d
   1ebbc:	20005620 	.word	0x20005620
   1ebc0:	00035be1 	.word	0x00035be1
   1ebc4:	0001ea85 	.word	0x0001ea85

0001ebc8 <LogMessageDebug>:
 * @fn			LogMessage Debug
 * @brief
 * @note
 */
void LogMessageDebug(const char *format, ...)
{
   1ebc8:	b40f      	push	{r0, r1, r2, r3}
   1ebca:	b580      	push	{r7, lr}
   1ebcc:	af00      	add	r7, sp, #0
    LogMessage(LOG_DEBUG_LVL, format);
   1ebce:	68bb      	ldr	r3, [r7, #8]
   1ebd0:	0019      	movs	r1, r3
   1ebd2:	2001      	movs	r0, #1
   1ebd4:	4b03      	ldr	r3, [pc, #12]	; (1ebe4 <LogMessageDebug+0x1c>)
   1ebd6:	4798      	blx	r3
};
   1ebd8:	46c0      	nop			; (mov r8, r8)
   1ebda:	46bd      	mov	sp, r7
   1ebdc:	bc80      	pop	{r7}
   1ebde:	bc08      	pop	{r3}
   1ebe0:	b004      	add	sp, #16
   1ebe2:	4718      	bx	r3
   1ebe4:	0001eb71 	.word	0x0001eb71

0001ebe8 <configure_usart>:
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void)
{
   1ebe8:	b580      	push	{r7, lr}
   1ebea:	b090      	sub	sp, #64	; 0x40
   1ebec:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
   1ebee:	003b      	movs	r3, r7
   1ebf0:	0018      	movs	r0, r3
   1ebf2:	4b14      	ldr	r3, [pc, #80]	; (1ec44 <configure_usart+0x5c>)
   1ebf4:	4798      	blx	r3

    config_usart.baudrate = 115200;
   1ebf6:	003b      	movs	r3, r7
   1ebf8:	22e1      	movs	r2, #225	; 0xe1
   1ebfa:	0252      	lsls	r2, r2, #9
   1ebfc:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   1ebfe:	003b      	movs	r3, r7
   1ec00:	22c4      	movs	r2, #196	; 0xc4
   1ec02:	0392      	lsls	r2, r2, #14
   1ec04:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   1ec06:	003b      	movs	r3, r7
   1ec08:	2201      	movs	r2, #1
   1ec0a:	4252      	negs	r2, r2
   1ec0c:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   1ec0e:	003b      	movs	r3, r7
   1ec10:	2201      	movs	r2, #1
   1ec12:	4252      	negs	r2, r2
   1ec14:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   1ec16:	003b      	movs	r3, r7
   1ec18:	4a0b      	ldr	r2, [pc, #44]	; (1ec48 <configure_usart+0x60>)
   1ec1a:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   1ec1c:	003b      	movs	r3, r7
   1ec1e:	4a0b      	ldr	r2, [pc, #44]	; (1ec4c <configure_usart+0x64>)
   1ec20:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
   1ec22:	46c0      	nop			; (mov r8, r8)
   1ec24:	003a      	movs	r2, r7
   1ec26:	490a      	ldr	r1, [pc, #40]	; (1ec50 <configure_usart+0x68>)
   1ec28:	4b0a      	ldr	r3, [pc, #40]	; (1ec54 <configure_usart+0x6c>)
   1ec2a:	0018      	movs	r0, r3
   1ec2c:	4b0a      	ldr	r3, [pc, #40]	; (1ec58 <configure_usart+0x70>)
   1ec2e:	4798      	blx	r3
   1ec30:	1e03      	subs	r3, r0, #0
   1ec32:	d1f7      	bne.n	1ec24 <configure_usart+0x3c>
    }

    usart_enable(&usart_instance);
   1ec34:	4b07      	ldr	r3, [pc, #28]	; (1ec54 <configure_usart+0x6c>)
   1ec36:	0018      	movs	r0, r3
   1ec38:	4b08      	ldr	r3, [pc, #32]	; (1ec5c <configure_usart+0x74>)
   1ec3a:	4798      	blx	r3
}
   1ec3c:	46c0      	nop			; (mov r8, r8)
   1ec3e:	46bd      	mov	sp, r7
   1ec40:	b010      	add	sp, #64	; 0x40
   1ec42:	bd80      	pop	{r7, pc}
   1ec44:	0001e8d5 	.word	0x0001e8d5
   1ec48:	002a0003 	.word	0x002a0003
   1ec4c:	002b0003 	.word	0x002b0003
   1ec50:	42001800 	.word	0x42001800
   1ec54:	200056a0 	.word	0x200056a0
   1ec58:	00029725 	.word	0x00029725
   1ec5c:	0001e995 	.word	0x0001e995

0001ec60 <configure_usart_callbacks>:
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void)
{
   1ec60:	b580      	push	{r7, lr}
   1ec62:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
   1ec64:	490c      	ldr	r1, [pc, #48]	; (1ec98 <configure_usart_callbacks+0x38>)
   1ec66:	4b0d      	ldr	r3, [pc, #52]	; (1ec9c <configure_usart_callbacks+0x3c>)
   1ec68:	2200      	movs	r2, #0
   1ec6a:	0018      	movs	r0, r3
   1ec6c:	4b0c      	ldr	r3, [pc, #48]	; (1eca0 <configure_usart_callbacks+0x40>)
   1ec6e:	4798      	blx	r3
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
   1ec70:	490c      	ldr	r1, [pc, #48]	; (1eca4 <configure_usart_callbacks+0x44>)
   1ec72:	4b0a      	ldr	r3, [pc, #40]	; (1ec9c <configure_usart_callbacks+0x3c>)
   1ec74:	2201      	movs	r2, #1
   1ec76:	0018      	movs	r0, r3
   1ec78:	4b09      	ldr	r3, [pc, #36]	; (1eca0 <configure_usart_callbacks+0x40>)
   1ec7a:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
   1ec7c:	4b07      	ldr	r3, [pc, #28]	; (1ec9c <configure_usart_callbacks+0x3c>)
   1ec7e:	2100      	movs	r1, #0
   1ec80:	0018      	movs	r0, r3
   1ec82:	4b09      	ldr	r3, [pc, #36]	; (1eca8 <configure_usart_callbacks+0x48>)
   1ec84:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
   1ec86:	4b05      	ldr	r3, [pc, #20]	; (1ec9c <configure_usart_callbacks+0x3c>)
   1ec88:	2101      	movs	r1, #1
   1ec8a:	0018      	movs	r0, r3
   1ec8c:	4b06      	ldr	r3, [pc, #24]	; (1eca8 <configure_usart_callbacks+0x48>)
   1ec8e:	4798      	blx	r3
}
   1ec90:	46c0      	nop			; (mov r8, r8)
   1ec92:	46bd      	mov	sp, r7
   1ec94:	bd80      	pop	{r7, pc}
   1ec96:	46c0      	nop			; (mov r8, r8)
   1ec98:	0001ecf5 	.word	0x0001ecf5
   1ec9c:	200056a0 	.word	0x200056a0
   1eca0:	00029ad9 	.word	0x00029ad9
   1eca4:	0001ecad 	.word	0x0001ecad
   1eca8:	0001e9dd 	.word	0x0001e9dd

0001ecac <usart_read_callback>:
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 */
void usart_read_callback(struct usart_module *const usart_module)
{
   1ecac:	b580      	push	{r7, lr}
   1ecae:	b082      	sub	sp, #8
   1ecb0:	af00      	add	r7, sp, #0
   1ecb2:	6078      	str	r0, [r7, #4]
    circular_buf_put(cbufRx, (uint8_t)latestRx);                      // Add the latest read character into the RX circular Buffer
   1ecb4:	4b09      	ldr	r3, [pc, #36]	; (1ecdc <usart_read_callback+0x30>)
   1ecb6:	681a      	ldr	r2, [r3, #0]
   1ecb8:	4b09      	ldr	r3, [pc, #36]	; (1ece0 <usart_read_callback+0x34>)
   1ecba:	781b      	ldrb	r3, [r3, #0]
   1ecbc:	0019      	movs	r1, r3
   1ecbe:	0010      	movs	r0, r2
   1ecc0:	4b08      	ldr	r3, [pc, #32]	; (1ece4 <usart_read_callback+0x38>)
   1ecc2:	4798      	blx	r3
    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Order the MCU to keep reading
   1ecc4:	4906      	ldr	r1, [pc, #24]	; (1ece0 <usart_read_callback+0x34>)
   1ecc6:	4b08      	ldr	r3, [pc, #32]	; (1ece8 <usart_read_callback+0x3c>)
   1ecc8:	2201      	movs	r2, #1
   1ecca:	0018      	movs	r0, r3
   1eccc:	4b07      	ldr	r3, [pc, #28]	; (1ecec <usart_read_callback+0x40>)
   1ecce:	4798      	blx	r3
    CliCharReadySemaphoreGiveFromISR();                               // Give binary semaphore
   1ecd0:	4b07      	ldr	r3, [pc, #28]	; (1ecf0 <usart_read_callback+0x44>)
   1ecd2:	4798      	blx	r3
}
   1ecd4:	46c0      	nop			; (mov r8, r8)
   1ecd6:	46bd      	mov	sp, r7
   1ecd8:	b002      	add	sp, #8
   1ecda:	bd80      	pop	{r7, pc}
   1ecdc:	200056d4 	.word	0x200056d4
   1ece0:	200056d8 	.word	0x200056d8
   1ece4:	0001e7a5 	.word	0x0001e7a5
   1ece8:	200056a0 	.word	0x200056a0
   1ecec:	00029b69 	.word	0x00029b69
   1ecf0:	000142b1 	.word	0x000142b1

0001ecf4 <usart_write_callback>:
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 */
void usart_write_callback(struct usart_module *const usart_module)
{
   1ecf4:	b580      	push	{r7, lr}
   1ecf6:	b082      	sub	sp, #8
   1ecf8:	af00      	add	r7, sp, #0
   1ecfa:	6078      	str	r0, [r7, #4]
    if (circular_buf_get(cbufTx, (uint8_t *)&latestTx) != -1)  // Only continue if there are more characters to send
   1ecfc:	4b09      	ldr	r3, [pc, #36]	; (1ed24 <usart_write_callback+0x30>)
   1ecfe:	681b      	ldr	r3, [r3, #0]
   1ed00:	4a09      	ldr	r2, [pc, #36]	; (1ed28 <usart_write_callback+0x34>)
   1ed02:	0011      	movs	r1, r2
   1ed04:	0018      	movs	r0, r3
   1ed06:	4b09      	ldr	r3, [pc, #36]	; (1ed2c <usart_write_callback+0x38>)
   1ed08:	4798      	blx	r3
   1ed0a:	0003      	movs	r3, r0
   1ed0c:	3301      	adds	r3, #1
   1ed0e:	d005      	beq.n	1ed1c <usart_write_callback+0x28>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1ed10:	4905      	ldr	r1, [pc, #20]	; (1ed28 <usart_write_callback+0x34>)
   1ed12:	4b07      	ldr	r3, [pc, #28]	; (1ed30 <usart_write_callback+0x3c>)
   1ed14:	2201      	movs	r2, #1
   1ed16:	0018      	movs	r0, r3
   1ed18:	4b06      	ldr	r3, [pc, #24]	; (1ed34 <usart_write_callback+0x40>)
   1ed1a:	4798      	blx	r3
    }
}
   1ed1c:	46c0      	nop			; (mov r8, r8)
   1ed1e:	46bd      	mov	sp, r7
   1ed20:	b002      	add	sp, #8
   1ed22:	bd80      	pop	{r7, pc}
   1ed24:	20005ae0 	.word	0x20005ae0
   1ed28:	20005adc 	.word	0x20005adc
   1ed2c:	0001e7d9 	.word	0x0001e7d9
   1ed30:	200056a0 	.word	0x200056a0
   1ed34:	00029b21 	.word	0x00029b21

0001ed38 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
   1ed38:	b590      	push	{r4, r7, lr}
   1ed3a:	b087      	sub	sp, #28
   1ed3c:	af00      	add	r7, sp, #0
   1ed3e:	60f8      	str	r0, [r7, #12]
   1ed40:	000c      	movs	r4, r1
   1ed42:	0010      	movs	r0, r2
   1ed44:	0019      	movs	r1, r3
   1ed46:	230a      	movs	r3, #10
   1ed48:	18fb      	adds	r3, r7, r3
   1ed4a:	1c22      	adds	r2, r4, #0
   1ed4c:	801a      	strh	r2, [r3, #0]
   1ed4e:	2308      	movs	r3, #8
   1ed50:	18fb      	adds	r3, r7, r3
   1ed52:	1c02      	adds	r2, r0, #0
   1ed54:	801a      	strh	r2, [r3, #0]
   1ed56:	1dfb      	adds	r3, r7, #7
   1ed58:	1c0a      	adds	r2, r1, #0
   1ed5a:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   1ed5c:	230a      	movs	r3, #10
   1ed5e:	18fb      	adds	r3, r7, r3
   1ed60:	881a      	ldrh	r2, [r3, #0]
   1ed62:	2308      	movs	r3, #8
   1ed64:	18fb      	adds	r3, r7, r3
   1ed66:	881b      	ldrh	r3, [r3, #0]
   1ed68:	1ad3      	subs	r3, r2, r3
   1ed6a:	3307      	adds	r3, #7
   1ed6c:	2b00      	cmp	r3, #0
   1ed6e:	da00      	bge.n	1ed72 <SDMMC_UNSTUFF_BITS+0x3a>
   1ed70:	3307      	adds	r3, #7
   1ed72:	10db      	asrs	r3, r3, #3
   1ed74:	3b01      	subs	r3, #1
   1ed76:	68fa      	ldr	r2, [r7, #12]
   1ed78:	18d3      	adds	r3, r2, r3
   1ed7a:	781b      	ldrb	r3, [r3, #0]
   1ed7c:	0019      	movs	r1, r3
   1ed7e:	2308      	movs	r3, #8
   1ed80:	18fb      	adds	r3, r7, r3
   1ed82:	881b      	ldrh	r3, [r3, #0]
   1ed84:	2207      	movs	r2, #7
   1ed86:	4013      	ands	r3, r2
   1ed88:	4119      	asrs	r1, r3
   1ed8a:	000b      	movs	r3, r1
   1ed8c:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
   1ed8e:	2308      	movs	r3, #8
   1ed90:	18fb      	adds	r3, r7, r3
   1ed92:	881b      	ldrh	r3, [r3, #0]
   1ed94:	2207      	movs	r2, #7
   1ed96:	401a      	ands	r2, r3
   1ed98:	1dfb      	adds	r3, r7, #7
   1ed9a:	781b      	ldrb	r3, [r3, #0]
   1ed9c:	18d3      	adds	r3, r2, r3
   1ed9e:	2b08      	cmp	r3, #8
   1eda0:	dd1c      	ble.n	1eddc <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   1eda2:	230a      	movs	r3, #10
   1eda4:	18fb      	adds	r3, r7, r3
   1eda6:	881a      	ldrh	r2, [r3, #0]
   1eda8:	2308      	movs	r3, #8
   1edaa:	18fb      	adds	r3, r7, r3
   1edac:	881b      	ldrh	r3, [r3, #0]
   1edae:	1ad3      	subs	r3, r2, r3
   1edb0:	3307      	adds	r3, #7
   1edb2:	2b00      	cmp	r3, #0
   1edb4:	da00      	bge.n	1edb8 <SDMMC_UNSTUFF_BITS+0x80>
   1edb6:	3307      	adds	r3, #7
   1edb8:	10db      	asrs	r3, r3, #3
   1edba:	3b02      	subs	r3, #2
   1edbc:	68fa      	ldr	r2, [r7, #12]
   1edbe:	18d3      	adds	r3, r2, r3
   1edc0:	781b      	ldrb	r3, [r3, #0]
   1edc2:	0019      	movs	r1, r3
   1edc4:	2308      	movs	r3, #8
   1edc6:	18fb      	adds	r3, r7, r3
   1edc8:	881b      	ldrh	r3, [r3, #0]
   1edca:	2207      	movs	r2, #7
   1edcc:	4013      	ands	r3, r2
   1edce:	2208      	movs	r2, #8
   1edd0:	1ad3      	subs	r3, r2, r3
   1edd2:	4099      	lsls	r1, r3
   1edd4:	000b      	movs	r3, r1
   1edd6:	697a      	ldr	r2, [r7, #20]
   1edd8:	4313      	orrs	r3, r2
   1edda:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1eddc:	2308      	movs	r3, #8
   1edde:	18fb      	adds	r3, r7, r3
   1ede0:	881b      	ldrh	r3, [r3, #0]
   1ede2:	2207      	movs	r2, #7
   1ede4:	401a      	ands	r2, r3
   1ede6:	1dfb      	adds	r3, r7, #7
   1ede8:	781b      	ldrb	r3, [r3, #0]
   1edea:	18d3      	adds	r3, r2, r3
   1edec:	2b10      	cmp	r3, #16
   1edee:	dd1c      	ble.n	1ee2a <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1edf0:	230a      	movs	r3, #10
   1edf2:	18fb      	adds	r3, r7, r3
   1edf4:	881a      	ldrh	r2, [r3, #0]
   1edf6:	2308      	movs	r3, #8
   1edf8:	18fb      	adds	r3, r7, r3
   1edfa:	881b      	ldrh	r3, [r3, #0]
   1edfc:	1ad3      	subs	r3, r2, r3
   1edfe:	3307      	adds	r3, #7
   1ee00:	2b00      	cmp	r3, #0
   1ee02:	da00      	bge.n	1ee06 <SDMMC_UNSTUFF_BITS+0xce>
   1ee04:	3307      	adds	r3, #7
   1ee06:	10db      	asrs	r3, r3, #3
   1ee08:	3b03      	subs	r3, #3
   1ee0a:	68fa      	ldr	r2, [r7, #12]
   1ee0c:	18d3      	adds	r3, r2, r3
   1ee0e:	781b      	ldrb	r3, [r3, #0]
   1ee10:	0019      	movs	r1, r3
   1ee12:	2308      	movs	r3, #8
   1ee14:	18fb      	adds	r3, r7, r3
   1ee16:	881b      	ldrh	r3, [r3, #0]
   1ee18:	2207      	movs	r2, #7
   1ee1a:	4013      	ands	r3, r2
   1ee1c:	2210      	movs	r2, #16
   1ee1e:	1ad3      	subs	r3, r2, r3
   1ee20:	4099      	lsls	r1, r3
   1ee22:	000b      	movs	r3, r1
   1ee24:	697a      	ldr	r2, [r7, #20]
   1ee26:	4313      	orrs	r3, r2
   1ee28:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1ee2a:	2308      	movs	r3, #8
   1ee2c:	18fb      	adds	r3, r7, r3
   1ee2e:	881b      	ldrh	r3, [r3, #0]
   1ee30:	2207      	movs	r2, #7
   1ee32:	401a      	ands	r2, r3
   1ee34:	1dfb      	adds	r3, r7, #7
   1ee36:	781b      	ldrb	r3, [r3, #0]
   1ee38:	18d3      	adds	r3, r2, r3
   1ee3a:	2b10      	cmp	r3, #16
   1ee3c:	dd1c      	ble.n	1ee78 <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1ee3e:	230a      	movs	r3, #10
   1ee40:	18fb      	adds	r3, r7, r3
   1ee42:	881a      	ldrh	r2, [r3, #0]
   1ee44:	2308      	movs	r3, #8
   1ee46:	18fb      	adds	r3, r7, r3
   1ee48:	881b      	ldrh	r3, [r3, #0]
   1ee4a:	1ad3      	subs	r3, r2, r3
   1ee4c:	3307      	adds	r3, #7
   1ee4e:	2b00      	cmp	r3, #0
   1ee50:	da00      	bge.n	1ee54 <SDMMC_UNSTUFF_BITS+0x11c>
   1ee52:	3307      	adds	r3, #7
   1ee54:	10db      	asrs	r3, r3, #3
   1ee56:	3b03      	subs	r3, #3
   1ee58:	68fa      	ldr	r2, [r7, #12]
   1ee5a:	18d3      	adds	r3, r2, r3
   1ee5c:	781b      	ldrb	r3, [r3, #0]
   1ee5e:	0019      	movs	r1, r3
   1ee60:	2308      	movs	r3, #8
   1ee62:	18fb      	adds	r3, r7, r3
   1ee64:	881b      	ldrh	r3, [r3, #0]
   1ee66:	2207      	movs	r2, #7
   1ee68:	4013      	ands	r3, r2
   1ee6a:	2210      	movs	r2, #16
   1ee6c:	1ad3      	subs	r3, r2, r3
   1ee6e:	4099      	lsls	r1, r3
   1ee70:	000b      	movs	r3, r1
   1ee72:	697a      	ldr	r2, [r7, #20]
   1ee74:	4313      	orrs	r3, r2
   1ee76:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
   1ee78:	1dfb      	adds	r3, r7, #7
   1ee7a:	781b      	ldrb	r3, [r3, #0]
   1ee7c:	2201      	movs	r2, #1
   1ee7e:	409a      	lsls	r2, r3
   1ee80:	0013      	movs	r3, r2
   1ee82:	1e5a      	subs	r2, r3, #1
   1ee84:	697b      	ldr	r3, [r7, #20]
   1ee86:	4013      	ands	r3, r2
   1ee88:	617b      	str	r3, [r7, #20]
	return value;
   1ee8a:	697b      	ldr	r3, [r7, #20]
}
   1ee8c:	0018      	movs	r0, r3
   1ee8e:	46bd      	mov	sp, r7
   1ee90:	b007      	add	sp, #28
   1ee92:	bd90      	pop	{r4, r7, pc}

0001ee94 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
   1ee94:	b580      	push	{r7, lr}
   1ee96:	b082      	sub	sp, #8
   1ee98:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1ee9a:	4b23      	ldr	r3, [pc, #140]	; (1ef28 <mmc_spi_op_cond+0x94>)
   1ee9c:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   1ee9e:	4b23      	ldr	r3, [pc, #140]	; (1ef2c <mmc_spi_op_cond+0x98>)
   1eea0:	2100      	movs	r1, #0
   1eea2:	0018      	movs	r0, r3
   1eea4:	4b22      	ldr	r3, [pc, #136]	; (1ef30 <mmc_spi_op_cond+0x9c>)
   1eea6:	4798      	blx	r3
   1eea8:	0003      	movs	r3, r0
   1eeaa:	001a      	movs	r2, r3
   1eeac:	2301      	movs	r3, #1
   1eeae:	4053      	eors	r3, r2
   1eeb0:	b2db      	uxtb	r3, r3
   1eeb2:	2b00      	cmp	r3, #0
   1eeb4:	d001      	beq.n	1eeba <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
   1eeb6:	2300      	movs	r3, #0
   1eeb8:	e031      	b.n	1ef1e <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
   1eeba:	4b1e      	ldr	r3, [pc, #120]	; (1ef34 <mmc_spi_op_cond+0xa0>)
   1eebc:	4798      	blx	r3
   1eebe:	0003      	movs	r3, r0
   1eec0:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
   1eec2:	683b      	ldr	r3, [r7, #0]
   1eec4:	2201      	movs	r2, #1
   1eec6:	4013      	ands	r3, r2
   1eec8:	d006      	beq.n	1eed8 <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
   1eeca:	687b      	ldr	r3, [r7, #4]
   1eecc:	1e5a      	subs	r2, r3, #1
   1eece:	607a      	str	r2, [r7, #4]
   1eed0:	2b00      	cmp	r3, #0
   1eed2:	d1e4      	bne.n	1ee9e <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
   1eed4:	2300      	movs	r3, #0
   1eed6:	e022      	b.n	1ef1e <mmc_spi_op_cond+0x8a>
			break;
   1eed8:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1eeda:	4b17      	ldr	r3, [pc, #92]	; (1ef38 <mmc_spi_op_cond+0xa4>)
   1eedc:	2100      	movs	r1, #0
   1eede:	0018      	movs	r0, r3
   1eee0:	4b13      	ldr	r3, [pc, #76]	; (1ef30 <mmc_spi_op_cond+0x9c>)
   1eee2:	4798      	blx	r3
   1eee4:	0003      	movs	r3, r0
   1eee6:	001a      	movs	r2, r3
   1eee8:	2301      	movs	r3, #1
   1eeea:	4053      	eors	r3, r2
   1eeec:	b2db      	uxtb	r3, r3
   1eeee:	2b00      	cmp	r3, #0
   1eef0:	d001      	beq.n	1eef6 <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1eef2:	2300      	movs	r3, #0
   1eef4:	e013      	b.n	1ef1e <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
   1eef6:	4b0f      	ldr	r3, [pc, #60]	; (1ef34 <mmc_spi_op_cond+0xa0>)
   1eef8:	4798      	blx	r3
   1eefa:	0002      	movs	r2, r0
   1eefc:	23c0      	movs	r3, #192	; 0xc0
   1eefe:	05db      	lsls	r3, r3, #23
   1ef00:	401a      	ands	r2, r3
   1ef02:	2380      	movs	r3, #128	; 0x80
   1ef04:	05db      	lsls	r3, r3, #23
   1ef06:	429a      	cmp	r2, r3
   1ef08:	d108      	bne.n	1ef1c <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
   1ef0a:	4b0c      	ldr	r3, [pc, #48]	; (1ef3c <mmc_spi_op_cond+0xa8>)
   1ef0c:	681a      	ldr	r2, [r3, #0]
   1ef0e:	4b0b      	ldr	r3, [pc, #44]	; (1ef3c <mmc_spi_op_cond+0xa8>)
   1ef10:	681b      	ldr	r3, [r3, #0]
   1ef12:	7adb      	ldrb	r3, [r3, #11]
   1ef14:	2108      	movs	r1, #8
   1ef16:	430b      	orrs	r3, r1
   1ef18:	b2db      	uxtb	r3, r3
   1ef1a:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1ef1c:	2301      	movs	r3, #1
}
   1ef1e:	0018      	movs	r0, r3
   1ef20:	46bd      	mov	sp, r7
   1ef22:	b002      	add	sp, #8
   1ef24:	bd80      	pop	{r7, pc}
   1ef26:	46c0      	nop			; (mov r8, r8)
   1ef28:	00001bee 	.word	0x00001bee
   1ef2c:	00001101 	.word	0x00001101
   1ef30:	00020911 	.word	0x00020911
   1ef34:	00020b51 	.word	0x00020b51
   1ef38:	0000053a 	.word	0x0000053a
   1ef3c:	20004244 	.word	0x20004244

0001ef40 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
   1ef40:	b580      	push	{r7, lr}
   1ef42:	b086      	sub	sp, #24
   1ef44:	af00      	add	r7, sp, #0
   1ef46:	0002      	movs	r2, r0
   1ef48:	1dfb      	adds	r3, r7, #7
   1ef4a:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1ef4c:	4b2e      	ldr	r3, [pc, #184]	; (1f008 <sd_spi_op_cond+0xc8>)
   1ef4e:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   1ef50:	4b2e      	ldr	r3, [pc, #184]	; (1f00c <sd_spi_op_cond+0xcc>)
   1ef52:	2100      	movs	r1, #0
   1ef54:	0018      	movs	r0, r3
   1ef56:	4b2e      	ldr	r3, [pc, #184]	; (1f010 <sd_spi_op_cond+0xd0>)
   1ef58:	4798      	blx	r3
   1ef5a:	0003      	movs	r3, r0
   1ef5c:	001a      	movs	r2, r3
   1ef5e:	2301      	movs	r3, #1
   1ef60:	4053      	eors	r3, r2
   1ef62:	b2db      	uxtb	r3, r3
   1ef64:	2b00      	cmp	r3, #0
   1ef66:	d001      	beq.n	1ef6c <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
   1ef68:	2300      	movs	r3, #0
   1ef6a:	e048      	b.n	1effe <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
   1ef6c:	2300      	movs	r3, #0
   1ef6e:	617b      	str	r3, [r7, #20]
		if (v2) {
   1ef70:	1dfb      	adds	r3, r7, #7
   1ef72:	781b      	ldrb	r3, [r3, #0]
   1ef74:	2b00      	cmp	r3, #0
   1ef76:	d004      	beq.n	1ef82 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
   1ef78:	697b      	ldr	r3, [r7, #20]
   1ef7a:	2280      	movs	r2, #128	; 0x80
   1ef7c:	05d2      	lsls	r2, r2, #23
   1ef7e:	4313      	orrs	r3, r2
   1ef80:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   1ef82:	697b      	ldr	r3, [r7, #20]
   1ef84:	4a23      	ldr	r2, [pc, #140]	; (1f014 <sd_spi_op_cond+0xd4>)
   1ef86:	0019      	movs	r1, r3
   1ef88:	0010      	movs	r0, r2
   1ef8a:	4b21      	ldr	r3, [pc, #132]	; (1f010 <sd_spi_op_cond+0xd0>)
   1ef8c:	4798      	blx	r3
   1ef8e:	0003      	movs	r3, r0
   1ef90:	001a      	movs	r2, r3
   1ef92:	2301      	movs	r3, #1
   1ef94:	4053      	eors	r3, r2
   1ef96:	b2db      	uxtb	r3, r3
   1ef98:	2b00      	cmp	r3, #0
   1ef9a:	d001      	beq.n	1efa0 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
   1ef9c:	2300      	movs	r3, #0
   1ef9e:	e02e      	b.n	1effe <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
   1efa0:	4b1d      	ldr	r3, [pc, #116]	; (1f018 <sd_spi_op_cond+0xd8>)
   1efa2:	4798      	blx	r3
   1efa4:	0003      	movs	r3, r0
   1efa6:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
   1efa8:	68fb      	ldr	r3, [r7, #12]
   1efaa:	2201      	movs	r2, #1
   1efac:	4013      	ands	r3, r2
   1efae:	d006      	beq.n	1efbe <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
   1efb0:	693b      	ldr	r3, [r7, #16]
   1efb2:	1e5a      	subs	r2, r3, #1
   1efb4:	613a      	str	r2, [r7, #16]
   1efb6:	2b00      	cmp	r3, #0
   1efb8:	d1ca      	bne.n	1ef50 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
   1efba:	2300      	movs	r3, #0
   1efbc:	e01f      	b.n	1effe <sd_spi_op_cond+0xbe>
			break;
   1efbe:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1efc0:	4b16      	ldr	r3, [pc, #88]	; (1f01c <sd_spi_op_cond+0xdc>)
   1efc2:	2100      	movs	r1, #0
   1efc4:	0018      	movs	r0, r3
   1efc6:	4b12      	ldr	r3, [pc, #72]	; (1f010 <sd_spi_op_cond+0xd0>)
   1efc8:	4798      	blx	r3
   1efca:	0003      	movs	r3, r0
   1efcc:	001a      	movs	r2, r3
   1efce:	2301      	movs	r3, #1
   1efd0:	4053      	eors	r3, r2
   1efd2:	b2db      	uxtb	r3, r3
   1efd4:	2b00      	cmp	r3, #0
   1efd6:	d001      	beq.n	1efdc <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1efd8:	2300      	movs	r3, #0
   1efda:	e010      	b.n	1effe <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
   1efdc:	4b0e      	ldr	r3, [pc, #56]	; (1f018 <sd_spi_op_cond+0xd8>)
   1efde:	4798      	blx	r3
   1efe0:	0002      	movs	r2, r0
   1efe2:	2380      	movs	r3, #128	; 0x80
   1efe4:	05db      	lsls	r3, r3, #23
   1efe6:	4013      	ands	r3, r2
   1efe8:	d008      	beq.n	1effc <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
   1efea:	4b0d      	ldr	r3, [pc, #52]	; (1f020 <sd_spi_op_cond+0xe0>)
   1efec:	681a      	ldr	r2, [r3, #0]
   1efee:	4b0c      	ldr	r3, [pc, #48]	; (1f020 <sd_spi_op_cond+0xe0>)
   1eff0:	681b      	ldr	r3, [r3, #0]
   1eff2:	7adb      	ldrb	r3, [r3, #11]
   1eff4:	2108      	movs	r1, #8
   1eff6:	430b      	orrs	r3, r1
   1eff8:	b2db      	uxtb	r3, r3
   1effa:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1effc:	2301      	movs	r3, #1
}
   1effe:	0018      	movs	r0, r3
   1f000:	46bd      	mov	sp, r7
   1f002:	b006      	add	sp, #24
   1f004:	bd80      	pop	{r7, pc}
   1f006:	46c0      	nop			; (mov r8, r8)
   1f008:	00001bee 	.word	0x00001bee
   1f00c:	00001137 	.word	0x00001137
   1f010:	00020911 	.word	0x00020911
   1f014:	00001129 	.word	0x00001129
   1f018:	00020b51 	.word	0x00020b51
   1f01c:	0000053a 	.word	0x0000053a
   1f020:	20004244 	.word	0x20004244

0001f024 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
   1f024:	b580      	push	{r7, lr}
   1f026:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
   1f028:	2301      	movs	r3, #1
}
   1f02a:	0018      	movs	r0, r3
   1f02c:	46bd      	mov	sp, r7
   1f02e:	bd80      	pop	{r7, pc}

0001f030 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
   1f030:	b580      	push	{r7, lr}
   1f032:	b084      	sub	sp, #16
   1f034:	af00      	add	r7, sp, #0
   1f036:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
   1f038:	687b      	ldr	r3, [r7, #4]
   1f03a:	2200      	movs	r2, #0
   1f03c:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   1f03e:	23d5      	movs	r3, #213	; 0xd5
   1f040:	005b      	lsls	r3, r3, #1
   1f042:	4a14      	ldr	r2, [pc, #80]	; (1f094 <sd_cmd8+0x64>)
   1f044:	0019      	movs	r1, r3
   1f046:	0010      	movs	r0, r2
   1f048:	4b13      	ldr	r3, [pc, #76]	; (1f098 <sd_cmd8+0x68>)
   1f04a:	4798      	blx	r3
   1f04c:	0003      	movs	r3, r0
   1f04e:	001a      	movs	r2, r3
   1f050:	2301      	movs	r3, #1
   1f052:	4053      	eors	r3, r2
   1f054:	b2db      	uxtb	r3, r3
   1f056:	2b00      	cmp	r3, #0
   1f058:	d001      	beq.n	1f05e <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
   1f05a:	2301      	movs	r3, #1
   1f05c:	e015      	b.n	1f08a <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
   1f05e:	4b0f      	ldr	r3, [pc, #60]	; (1f09c <sd_cmd8+0x6c>)
   1f060:	4798      	blx	r3
   1f062:	0003      	movs	r3, r0
   1f064:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
   1f066:	68fb      	ldr	r3, [r7, #12]
   1f068:	3301      	adds	r3, #1
   1f06a:	d101      	bne.n	1f070 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
   1f06c:	2301      	movs	r3, #1
   1f06e:	e00c      	b.n	1f08a <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   1f070:	68fb      	ldr	r3, [r7, #12]
   1f072:	051b      	lsls	r3, r3, #20
   1f074:	0d1a      	lsrs	r2, r3, #20
   1f076:	23d5      	movs	r3, #213	; 0xd5
   1f078:	005b      	lsls	r3, r3, #1
   1f07a:	429a      	cmp	r2, r3
   1f07c:	d001      	beq.n	1f082 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
   1f07e:	2300      	movs	r3, #0
   1f080:	e003      	b.n	1f08a <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
   1f082:	687b      	ldr	r3, [r7, #4]
   1f084:	2201      	movs	r2, #1
   1f086:	701a      	strb	r2, [r3, #0]
	return true;
   1f088:	2301      	movs	r3, #1
}
   1f08a:	0018      	movs	r0, r3
   1f08c:	46bd      	mov	sp, r7
   1f08e:	b004      	add	sp, #16
   1f090:	bd80      	pop	{r7, pc}
   1f092:	46c0      	nop			; (mov r8, r8)
   1f094:	00005508 	.word	0x00005508
   1f098:	00020911 	.word	0x00020911
   1f09c:	00020b51 	.word	0x00020b51

0001f0a0 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
   1f0a0:	b590      	push	{r4, r7, lr}
   1f0a2:	b089      	sub	sp, #36	; 0x24
   1f0a4:	af02      	add	r7, sp, #8
   1f0a6:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   1f0a8:	2380      	movs	r3, #128	; 0x80
   1f0aa:	009a      	lsls	r2, r3, #2
   1f0ac:	4841      	ldr	r0, [pc, #260]	; (1f1b4 <mmc_cmd8+0x114>)
   1f0ae:	2300      	movs	r3, #0
   1f0b0:	9300      	str	r3, [sp, #0]
   1f0b2:	2301      	movs	r3, #1
   1f0b4:	2100      	movs	r1, #0
   1f0b6:	4c40      	ldr	r4, [pc, #256]	; (1f1b8 <mmc_cmd8+0x118>)
   1f0b8:	47a0      	blx	r4
   1f0ba:	0003      	movs	r3, r0
   1f0bc:	001a      	movs	r2, r3
   1f0be:	2301      	movs	r3, #1
   1f0c0:	4053      	eors	r3, r2
   1f0c2:	b2db      	uxtb	r3, r3
   1f0c4:	2b00      	cmp	r3, #0
   1f0c6:	d001      	beq.n	1f0cc <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
   1f0c8:	2300      	movs	r3, #0
   1f0ca:	e06e      	b.n	1f1aa <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1f0cc:	2316      	movs	r3, #22
   1f0ce:	18fb      	adds	r3, r7, r3
   1f0d0:	2200      	movs	r2, #0
   1f0d2:	801a      	strh	r2, [r3, #0]
   1f0d4:	e014      	b.n	1f100 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
   1f0d6:	2310      	movs	r3, #16
   1f0d8:	18fb      	adds	r3, r7, r3
   1f0da:	0018      	movs	r0, r3
   1f0dc:	4b37      	ldr	r3, [pc, #220]	; (1f1bc <mmc_cmd8+0x11c>)
   1f0de:	4798      	blx	r3
   1f0e0:	0003      	movs	r3, r0
   1f0e2:	001a      	movs	r2, r3
   1f0e4:	2301      	movs	r3, #1
   1f0e6:	4053      	eors	r3, r2
   1f0e8:	b2db      	uxtb	r3, r3
   1f0ea:	2b00      	cmp	r3, #0
   1f0ec:	d001      	beq.n	1f0f2 <mmc_cmd8+0x52>
			return false;
   1f0ee:	2300      	movs	r3, #0
   1f0f0:	e05b      	b.n	1f1aa <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1f0f2:	2316      	movs	r3, #22
   1f0f4:	18fb      	adds	r3, r7, r3
   1f0f6:	881a      	ldrh	r2, [r3, #0]
   1f0f8:	2316      	movs	r3, #22
   1f0fa:	18fb      	adds	r3, r7, r3
   1f0fc:	3201      	adds	r2, #1
   1f0fe:	801a      	strh	r2, [r3, #0]
   1f100:	2316      	movs	r3, #22
   1f102:	18fb      	adds	r3, r7, r3
   1f104:	881b      	ldrh	r3, [r3, #0]
   1f106:	2b31      	cmp	r3, #49	; 0x31
   1f108:	d9e5      	bls.n	1f0d6 <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
   1f10a:	693b      	ldr	r3, [r7, #16]
   1f10c:	b2db      	uxtb	r3, r3
   1f10e:	2202      	movs	r2, #2
   1f110:	4013      	ands	r3, r2
   1f112:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
   1f114:	687b      	ldr	r3, [r7, #4]
   1f116:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   1f118:	4b29      	ldr	r3, [pc, #164]	; (1f1c0 <mmc_cmd8+0x120>)
   1f11a:	681b      	ldr	r3, [r3, #0]
   1f11c:	330e      	adds	r3, #14
   1f11e:	0018      	movs	r0, r3
   1f120:	230c      	movs	r3, #12
   1f122:	223e      	movs	r2, #62	; 0x3e
   1f124:	2180      	movs	r1, #128	; 0x80
   1f126:	4c27      	ldr	r4, [pc, #156]	; (1f1c4 <mmc_cmd8+0x124>)
   1f128:	47a0      	blx	r4
   1f12a:	0002      	movs	r2, r0
   1f12c:	4b26      	ldr	r3, [pc, #152]	; (1f1c8 <mmc_cmd8+0x128>)
   1f12e:	429a      	cmp	r2, r3
   1f130:	d135      	bne.n	1f19e <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1f132:	e014      	b.n	1f15e <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
   1f134:	230c      	movs	r3, #12
   1f136:	18fb      	adds	r3, r7, r3
   1f138:	0018      	movs	r0, r3
   1f13a:	4b20      	ldr	r3, [pc, #128]	; (1f1bc <mmc_cmd8+0x11c>)
   1f13c:	4798      	blx	r3
   1f13e:	0003      	movs	r3, r0
   1f140:	001a      	movs	r2, r3
   1f142:	2301      	movs	r3, #1
   1f144:	4053      	eors	r3, r2
   1f146:	b2db      	uxtb	r3, r3
   1f148:	2b00      	cmp	r3, #0
   1f14a:	d001      	beq.n	1f150 <mmc_cmd8+0xb0>
				return false;
   1f14c:	2300      	movs	r3, #0
   1f14e:	e02c      	b.n	1f1aa <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1f150:	2316      	movs	r3, #22
   1f152:	18fb      	adds	r3, r7, r3
   1f154:	881a      	ldrh	r2, [r3, #0]
   1f156:	2316      	movs	r3, #22
   1f158:	18fb      	adds	r3, r7, r3
   1f15a:	3201      	adds	r2, #1
   1f15c:	801a      	strh	r2, [r3, #0]
   1f15e:	2316      	movs	r3, #22
   1f160:	18fb      	adds	r3, r7, r3
   1f162:	881b      	ldrh	r3, [r3, #0]
   1f164:	2b35      	cmp	r3, #53	; 0x35
   1f166:	d9e5      	bls.n	1f134 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
   1f168:	4b15      	ldr	r3, [pc, #84]	; (1f1c0 <mmc_cmd8+0x120>)
   1f16a:	681b      	ldr	r3, [r3, #0]
   1f16c:	68fa      	ldr	r2, [r7, #12]
   1f16e:	0852      	lsrs	r2, r2, #1
   1f170:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1f172:	e014      	b.n	1f19e <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
   1f174:	230c      	movs	r3, #12
   1f176:	18fb      	adds	r3, r7, r3
   1f178:	0018      	movs	r0, r3
   1f17a:	4b10      	ldr	r3, [pc, #64]	; (1f1bc <mmc_cmd8+0x11c>)
   1f17c:	4798      	blx	r3
   1f17e:	0003      	movs	r3, r0
   1f180:	001a      	movs	r2, r3
   1f182:	2301      	movs	r3, #1
   1f184:	4053      	eors	r3, r2
   1f186:	b2db      	uxtb	r3, r3
   1f188:	2b00      	cmp	r3, #0
   1f18a:	d001      	beq.n	1f190 <mmc_cmd8+0xf0>
			return false;
   1f18c:	2300      	movs	r3, #0
   1f18e:	e00c      	b.n	1f1aa <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1f190:	2316      	movs	r3, #22
   1f192:	18fb      	adds	r3, r7, r3
   1f194:	881a      	ldrh	r2, [r3, #0]
   1f196:	2316      	movs	r3, #22
   1f198:	18fb      	adds	r3, r7, r3
   1f19a:	3201      	adds	r2, #1
   1f19c:	801a      	strh	r2, [r3, #0]
   1f19e:	2316      	movs	r3, #22
   1f1a0:	18fb      	adds	r3, r7, r3
   1f1a2:	881b      	ldrh	r3, [r3, #0]
   1f1a4:	2b7f      	cmp	r3, #127	; 0x7f
   1f1a6:	d9e5      	bls.n	1f174 <mmc_cmd8+0xd4>
		}
	}
	return true;
   1f1a8:	2301      	movs	r3, #1
}
   1f1aa:	0018      	movs	r0, r3
   1f1ac:	46bd      	mov	sp, r7
   1f1ae:	b007      	add	sp, #28
   1f1b0:	bd90      	pop	{r4, r7, pc}
   1f1b2:	46c0      	nop			; (mov r8, r8)
   1f1b4:	00081108 	.word	0x00081108
   1f1b8:	00020939 	.word	0x00020939
   1f1bc:	00020b65 	.word	0x00020b65
   1f1c0:	20004244 	.word	0x20004244
   1f1c4:	0001ed39 	.word	0x0001ed39
   1f1c8:	00000fff 	.word	0x00000fff

0001f1cc <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
   1f1cc:	b590      	push	{r4, r7, lr}
   1f1ce:	b083      	sub	sp, #12
   1f1d0:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
   1f1d2:	4b15      	ldr	r3, [pc, #84]	; (1f228 <sd_mmc_cmd9_spi+0x5c>)
   1f1d4:	681b      	ldr	r3, [r3, #0]
   1f1d6:	891b      	ldrh	r3, [r3, #8]
   1f1d8:	0419      	lsls	r1, r3, #16
   1f1da:	4814      	ldr	r0, [pc, #80]	; (1f22c <sd_mmc_cmd9_spi+0x60>)
   1f1dc:	2301      	movs	r3, #1
   1f1de:	9300      	str	r3, [sp, #0]
   1f1e0:	2301      	movs	r3, #1
   1f1e2:	2210      	movs	r2, #16
   1f1e4:	4c12      	ldr	r4, [pc, #72]	; (1f230 <sd_mmc_cmd9_spi+0x64>)
   1f1e6:	47a0      	blx	r4
   1f1e8:	0003      	movs	r3, r0
   1f1ea:	001a      	movs	r2, r3
   1f1ec:	2301      	movs	r3, #1
   1f1ee:	4053      	eors	r3, r2
   1f1f0:	b2db      	uxtb	r3, r3
   1f1f2:	2b00      	cmp	r3, #0
   1f1f4:	d001      	beq.n	1f1fa <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
   1f1f6:	2300      	movs	r3, #0
   1f1f8:	e012      	b.n	1f220 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
   1f1fa:	4b0b      	ldr	r3, [pc, #44]	; (1f228 <sd_mmc_cmd9_spi+0x5c>)
   1f1fc:	681b      	ldr	r3, [r3, #0]
   1f1fe:	330e      	adds	r3, #14
   1f200:	2101      	movs	r1, #1
   1f202:	0018      	movs	r0, r3
   1f204:	4b0b      	ldr	r3, [pc, #44]	; (1f234 <sd_mmc_cmd9_spi+0x68>)
   1f206:	4798      	blx	r3
   1f208:	0003      	movs	r3, r0
   1f20a:	001a      	movs	r2, r3
   1f20c:	2301      	movs	r3, #1
   1f20e:	4053      	eors	r3, r2
   1f210:	b2db      	uxtb	r3, r3
   1f212:	2b00      	cmp	r3, #0
   1f214:	d001      	beq.n	1f21a <sd_mmc_cmd9_spi+0x4e>
		return false;
   1f216:	2300      	movs	r3, #0
   1f218:	e002      	b.n	1f220 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
   1f21a:	4b07      	ldr	r3, [pc, #28]	; (1f238 <sd_mmc_cmd9_spi+0x6c>)
   1f21c:	4798      	blx	r3
   1f21e:	0003      	movs	r3, r0
}
   1f220:	0018      	movs	r0, r3
   1f222:	46bd      	mov	sp, r7
   1f224:	b001      	add	sp, #4
   1f226:	bd90      	pop	{r4, r7, pc}
   1f228:	20004244 	.word	0x20004244
   1f22c:	00081109 	.word	0x00081109
   1f230:	00020939 	.word	0x00020939
   1f234:	00020c09 	.word	0x00020c09
   1f238:	00020cad 	.word	0x00020cad

0001f23c <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
   1f23c:	b5b0      	push	{r4, r5, r7, lr}
   1f23e:	b084      	sub	sp, #16
   1f240:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   1f242:	4b45      	ldr	r3, [pc, #276]	; (1f358 <mmc_decode_csd+0x11c>)
   1f244:	681b      	ldr	r3, [r3, #0]
   1f246:	330e      	adds	r3, #14
   1f248:	0018      	movs	r0, r3
   1f24a:	2304      	movs	r3, #4
   1f24c:	227a      	movs	r2, #122	; 0x7a
   1f24e:	2180      	movs	r1, #128	; 0x80
   1f250:	4c42      	ldr	r4, [pc, #264]	; (1f35c <mmc_decode_csd+0x120>)
   1f252:	47a0      	blx	r4
   1f254:	0003      	movs	r3, r0
   1f256:	2b02      	cmp	r3, #2
   1f258:	d011      	beq.n	1f27e <mmc_decode_csd+0x42>
   1f25a:	d802      	bhi.n	1f262 <mmc_decode_csd+0x26>
   1f25c:	2b01      	cmp	r3, #1
   1f25e:	d009      	beq.n	1f274 <mmc_decode_csd+0x38>
   1f260:	e003      	b.n	1f26a <mmc_decode_csd+0x2e>
   1f262:	2b03      	cmp	r3, #3
   1f264:	d010      	beq.n	1f288 <mmc_decode_csd+0x4c>
   1f266:	2b04      	cmp	r3, #4
   1f268:	d013      	beq.n	1f292 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   1f26a:	4b3b      	ldr	r3, [pc, #236]	; (1f358 <mmc_decode_csd+0x11c>)
   1f26c:	681b      	ldr	r3, [r3, #0]
   1f26e:	2212      	movs	r2, #18
   1f270:	731a      	strb	r2, [r3, #12]
		break;
   1f272:	e013      	b.n	1f29c <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   1f274:	4b38      	ldr	r3, [pc, #224]	; (1f358 <mmc_decode_csd+0x11c>)
   1f276:	681b      	ldr	r3, [r3, #0]
   1f278:	2214      	movs	r2, #20
   1f27a:	731a      	strb	r2, [r3, #12]
		break;
   1f27c:	e00e      	b.n	1f29c <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   1f27e:	4b36      	ldr	r3, [pc, #216]	; (1f358 <mmc_decode_csd+0x11c>)
   1f280:	681b      	ldr	r3, [r3, #0]
   1f282:	2222      	movs	r2, #34	; 0x22
   1f284:	731a      	strb	r2, [r3, #12]
		break;
   1f286:	e009      	b.n	1f29c <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
   1f288:	4b33      	ldr	r3, [pc, #204]	; (1f358 <mmc_decode_csd+0x11c>)
   1f28a:	681b      	ldr	r3, [r3, #0]
   1f28c:	2230      	movs	r2, #48	; 0x30
   1f28e:	731a      	strb	r2, [r3, #12]
		break;
   1f290:	e004      	b.n	1f29c <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
   1f292:	4b31      	ldr	r3, [pc, #196]	; (1f358 <mmc_decode_csd+0x11c>)
   1f294:	681b      	ldr	r3, [r3, #0]
   1f296:	2240      	movs	r2, #64	; 0x40
   1f298:	731a      	strb	r2, [r3, #12]
		break;
   1f29a:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1f29c:	4b2e      	ldr	r3, [pc, #184]	; (1f358 <mmc_decode_csd+0x11c>)
   1f29e:	681b      	ldr	r3, [r3, #0]
   1f2a0:	330e      	adds	r3, #14
   1f2a2:	0018      	movs	r0, r3
   1f2a4:	2308      	movs	r3, #8
   1f2a6:	2260      	movs	r2, #96	; 0x60
   1f2a8:	2180      	movs	r1, #128	; 0x80
   1f2aa:	4c2c      	ldr	r4, [pc, #176]	; (1f35c <mmc_decode_csd+0x120>)
   1f2ac:	47a0      	blx	r4
   1f2ae:	0003      	movs	r3, r0
   1f2b0:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1f2b2:	68fb      	ldr	r3, [r7, #12]
   1f2b4:	2207      	movs	r2, #7
   1f2b6:	401a      	ands	r2, r3
   1f2b8:	4b29      	ldr	r3, [pc, #164]	; (1f360 <mmc_decode_csd+0x124>)
   1f2ba:	0092      	lsls	r2, r2, #2
   1f2bc:	58d3      	ldr	r3, [r2, r3]
   1f2be:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   1f2c0:	68fb      	ldr	r3, [r7, #12]
   1f2c2:	08db      	lsrs	r3, r3, #3
   1f2c4:	220f      	movs	r2, #15
   1f2c6:	401a      	ands	r2, r3
   1f2c8:	4b26      	ldr	r3, [pc, #152]	; (1f364 <mmc_decode_csd+0x128>)
   1f2ca:	0092      	lsls	r2, r2, #2
   1f2cc:	58d3      	ldr	r3, [r2, r3]
   1f2ce:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1f2d0:	4b21      	ldr	r3, [pc, #132]	; (1f358 <mmc_decode_csd+0x11c>)
   1f2d2:	681b      	ldr	r3, [r3, #0]
   1f2d4:	68ba      	ldr	r2, [r7, #8]
   1f2d6:	6879      	ldr	r1, [r7, #4]
   1f2d8:	434a      	muls	r2, r1
   1f2da:	21fa      	movs	r1, #250	; 0xfa
   1f2dc:	0089      	lsls	r1, r1, #2
   1f2de:	434a      	muls	r2, r1
   1f2e0:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   1f2e2:	4b1d      	ldr	r3, [pc, #116]	; (1f358 <mmc_decode_csd+0x11c>)
   1f2e4:	681b      	ldr	r3, [r3, #0]
   1f2e6:	330e      	adds	r3, #14
   1f2e8:	0018      	movs	r0, r3
   1f2ea:	230c      	movs	r3, #12
   1f2ec:	223e      	movs	r2, #62	; 0x3e
   1f2ee:	2180      	movs	r1, #128	; 0x80
   1f2f0:	4c1a      	ldr	r4, [pc, #104]	; (1f35c <mmc_decode_csd+0x120>)
   1f2f2:	47a0      	blx	r4
   1f2f4:	0002      	movs	r2, r0
   1f2f6:	4b1c      	ldr	r3, [pc, #112]	; (1f368 <mmc_decode_csd+0x12c>)
   1f2f8:	429a      	cmp	r2, r3
   1f2fa:	d028      	beq.n	1f34e <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1f2fc:	4b16      	ldr	r3, [pc, #88]	; (1f358 <mmc_decode_csd+0x11c>)
   1f2fe:	681b      	ldr	r3, [r3, #0]
   1f300:	330e      	adds	r3, #14
   1f302:	0018      	movs	r0, r3
   1f304:	230c      	movs	r3, #12
   1f306:	223e      	movs	r2, #62	; 0x3e
   1f308:	2180      	movs	r1, #128	; 0x80
   1f30a:	4c14      	ldr	r4, [pc, #80]	; (1f35c <mmc_decode_csd+0x120>)
   1f30c:	47a0      	blx	r4
   1f30e:	0003      	movs	r3, r0
   1f310:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1f312:	4b11      	ldr	r3, [pc, #68]	; (1f358 <mmc_decode_csd+0x11c>)
   1f314:	681b      	ldr	r3, [r3, #0]
   1f316:	330e      	adds	r3, #14
   1f318:	0018      	movs	r0, r3
   1f31a:	2303      	movs	r3, #3
   1f31c:	222f      	movs	r2, #47	; 0x2f
   1f31e:	2180      	movs	r1, #128	; 0x80
   1f320:	4d0e      	ldr	r5, [pc, #56]	; (1f35c <mmc_decode_csd+0x120>)
   1f322:	47a8      	blx	r5
   1f324:	0003      	movs	r3, r0
   1f326:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1f328:	409c      	lsls	r4, r3
   1f32a:	0023      	movs	r3, r4
   1f32c:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1f32e:	4b0a      	ldr	r3, [pc, #40]	; (1f358 <mmc_decode_csd+0x11c>)
   1f330:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1f332:	4b09      	ldr	r3, [pc, #36]	; (1f358 <mmc_decode_csd+0x11c>)
   1f334:	681b      	ldr	r3, [r3, #0]
   1f336:	330e      	adds	r3, #14
   1f338:	0018      	movs	r0, r3
   1f33a:	2304      	movs	r3, #4
   1f33c:	2250      	movs	r2, #80	; 0x50
   1f33e:	2180      	movs	r1, #128	; 0x80
   1f340:	4d06      	ldr	r5, [pc, #24]	; (1f35c <mmc_decode_csd+0x120>)
   1f342:	47a8      	blx	r5
   1f344:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1f346:	683b      	ldr	r3, [r7, #0]
   1f348:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1f34a:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1f34c:	6063      	str	r3, [r4, #4]
	}
}
   1f34e:	46c0      	nop			; (mov r8, r8)
   1f350:	46bd      	mov	sp, r7
   1f352:	b004      	add	sp, #16
   1f354:	bdb0      	pop	{r4, r5, r7, pc}
   1f356:	46c0      	nop			; (mov r8, r8)
   1f358:	20004244 	.word	0x20004244
   1f35c:	0001ed39 	.word	0x0001ed39
   1f360:	000390f8 	.word	0x000390f8
   1f364:	00039154 	.word	0x00039154
   1f368:	00000fff 	.word	0x00000fff

0001f36c <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
   1f36c:	b5b0      	push	{r4, r5, r7, lr}
   1f36e:	b084      	sub	sp, #16
   1f370:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1f372:	4b35      	ldr	r3, [pc, #212]	; (1f448 <sd_decode_csd+0xdc>)
   1f374:	681b      	ldr	r3, [r3, #0]
   1f376:	330e      	adds	r3, #14
   1f378:	0018      	movs	r0, r3
   1f37a:	2308      	movs	r3, #8
   1f37c:	2260      	movs	r2, #96	; 0x60
   1f37e:	2180      	movs	r1, #128	; 0x80
   1f380:	4c32      	ldr	r4, [pc, #200]	; (1f44c <sd_decode_csd+0xe0>)
   1f382:	47a0      	blx	r4
   1f384:	0003      	movs	r3, r0
   1f386:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1f388:	68fb      	ldr	r3, [r7, #12]
   1f38a:	2207      	movs	r2, #7
   1f38c:	401a      	ands	r2, r3
   1f38e:	4b30      	ldr	r3, [pc, #192]	; (1f450 <sd_decode_csd+0xe4>)
   1f390:	0092      	lsls	r2, r2, #2
   1f392:	58d3      	ldr	r3, [r2, r3]
   1f394:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   1f396:	68fb      	ldr	r3, [r7, #12]
   1f398:	08db      	lsrs	r3, r3, #3
   1f39a:	220f      	movs	r2, #15
   1f39c:	401a      	ands	r2, r3
   1f39e:	4b2d      	ldr	r3, [pc, #180]	; (1f454 <sd_decode_csd+0xe8>)
   1f3a0:	0092      	lsls	r2, r2, #2
   1f3a2:	58d3      	ldr	r3, [r2, r3]
   1f3a4:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1f3a6:	4b28      	ldr	r3, [pc, #160]	; (1f448 <sd_decode_csd+0xdc>)
   1f3a8:	681b      	ldr	r3, [r3, #0]
   1f3aa:	68ba      	ldr	r2, [r7, #8]
   1f3ac:	6879      	ldr	r1, [r7, #4]
   1f3ae:	434a      	muls	r2, r1
   1f3b0:	21fa      	movs	r1, #250	; 0xfa
   1f3b2:	0089      	lsls	r1, r1, #2
   1f3b4:	434a      	muls	r2, r1
   1f3b6:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   1f3b8:	4b23      	ldr	r3, [pc, #140]	; (1f448 <sd_decode_csd+0xdc>)
   1f3ba:	681b      	ldr	r3, [r3, #0]
   1f3bc:	330e      	adds	r3, #14
   1f3be:	0018      	movs	r0, r3
   1f3c0:	2302      	movs	r3, #2
   1f3c2:	227e      	movs	r2, #126	; 0x7e
   1f3c4:	2180      	movs	r1, #128	; 0x80
   1f3c6:	4c21      	ldr	r4, [pc, #132]	; (1f44c <sd_decode_csd+0xe0>)
   1f3c8:	47a0      	blx	r4
   1f3ca:	1e03      	subs	r3, r0, #0
   1f3cc:	d00f      	beq.n	1f3ee <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
   1f3ce:	4b1e      	ldr	r3, [pc, #120]	; (1f448 <sd_decode_csd+0xdc>)
   1f3d0:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
   1f3d2:	4b1d      	ldr	r3, [pc, #116]	; (1f448 <sd_decode_csd+0xdc>)
   1f3d4:	681b      	ldr	r3, [r3, #0]
   1f3d6:	330e      	adds	r3, #14
   1f3d8:	0018      	movs	r0, r3
   1f3da:	2316      	movs	r3, #22
   1f3dc:	2230      	movs	r2, #48	; 0x30
   1f3de:	2180      	movs	r1, #128	; 0x80
   1f3e0:	4d1a      	ldr	r5, [pc, #104]	; (1f44c <sd_decode_csd+0xe0>)
   1f3e2:	47a8      	blx	r5
   1f3e4:	0003      	movs	r3, r0
				* 512;
   1f3e6:	3301      	adds	r3, #1
   1f3e8:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
   1f3ea:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
   1f3ec:	e028      	b.n	1f440 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1f3ee:	4b16      	ldr	r3, [pc, #88]	; (1f448 <sd_decode_csd+0xdc>)
   1f3f0:	681b      	ldr	r3, [r3, #0]
   1f3f2:	330e      	adds	r3, #14
   1f3f4:	0018      	movs	r0, r3
   1f3f6:	230c      	movs	r3, #12
   1f3f8:	223e      	movs	r2, #62	; 0x3e
   1f3fa:	2180      	movs	r1, #128	; 0x80
   1f3fc:	4c13      	ldr	r4, [pc, #76]	; (1f44c <sd_decode_csd+0xe0>)
   1f3fe:	47a0      	blx	r4
   1f400:	0003      	movs	r3, r0
   1f402:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1f404:	4b10      	ldr	r3, [pc, #64]	; (1f448 <sd_decode_csd+0xdc>)
   1f406:	681b      	ldr	r3, [r3, #0]
   1f408:	330e      	adds	r3, #14
   1f40a:	0018      	movs	r0, r3
   1f40c:	2303      	movs	r3, #3
   1f40e:	222f      	movs	r2, #47	; 0x2f
   1f410:	2180      	movs	r1, #128	; 0x80
   1f412:	4d0e      	ldr	r5, [pc, #56]	; (1f44c <sd_decode_csd+0xe0>)
   1f414:	47a8      	blx	r5
   1f416:	0003      	movs	r3, r0
   1f418:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1f41a:	409c      	lsls	r4, r3
   1f41c:	0023      	movs	r3, r4
   1f41e:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1f420:	4b09      	ldr	r3, [pc, #36]	; (1f448 <sd_decode_csd+0xdc>)
   1f422:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
   1f424:	4b08      	ldr	r3, [pc, #32]	; (1f448 <sd_decode_csd+0xdc>)
   1f426:	681b      	ldr	r3, [r3, #0]
   1f428:	330e      	adds	r3, #14
   1f42a:	0018      	movs	r0, r3
   1f42c:	2304      	movs	r3, #4
   1f42e:	2250      	movs	r2, #80	; 0x50
   1f430:	2180      	movs	r1, #128	; 0x80
   1f432:	4d06      	ldr	r5, [pc, #24]	; (1f44c <sd_decode_csd+0xe0>)
   1f434:	47a8      	blx	r5
   1f436:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1f438:	683b      	ldr	r3, [r7, #0]
   1f43a:	4093      	lsls	r3, r2
				/ 1024;
   1f43c:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1f43e:	6063      	str	r3, [r4, #4]
}
   1f440:	46c0      	nop			; (mov r8, r8)
   1f442:	46bd      	mov	sp, r7
   1f444:	b004      	add	sp, #16
   1f446:	bdb0      	pop	{r4, r5, r7, pc}
   1f448:	20004244 	.word	0x20004244
   1f44c:	0001ed39 	.word	0x0001ed39
   1f450:	000390f8 	.word	0x000390f8
   1f454:	00039114 	.word	0x00039114

0001f458 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
   1f458:	b580      	push	{r7, lr}
   1f45a:	b082      	sub	sp, #8
   1f45c:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
   1f45e:	4b11      	ldr	r3, [pc, #68]	; (1f4a4 <sd_mmc_cmd13+0x4c>)
   1f460:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   1f462:	4b11      	ldr	r3, [pc, #68]	; (1f4a8 <sd_mmc_cmd13+0x50>)
   1f464:	2100      	movs	r1, #0
   1f466:	0018      	movs	r0, r3
   1f468:	4b10      	ldr	r3, [pc, #64]	; (1f4ac <sd_mmc_cmd13+0x54>)
   1f46a:	4798      	blx	r3
   1f46c:	0003      	movs	r3, r0
   1f46e:	001a      	movs	r2, r3
   1f470:	2301      	movs	r3, #1
   1f472:	4053      	eors	r3, r2
   1f474:	b2db      	uxtb	r3, r3
   1f476:	2b00      	cmp	r3, #0
   1f478:	d001      	beq.n	1f47e <sd_mmc_cmd13+0x26>
				return false;
   1f47a:	2300      	movs	r3, #0
   1f47c:	e00e      	b.n	1f49c <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
   1f47e:	4b0c      	ldr	r3, [pc, #48]	; (1f4b0 <sd_mmc_cmd13+0x58>)
   1f480:	4798      	blx	r3
   1f482:	0002      	movs	r2, r0
   1f484:	23ff      	movs	r3, #255	; 0xff
   1f486:	4013      	ands	r3, r2
   1f488:	d006      	beq.n	1f498 <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
   1f48a:	687b      	ldr	r3, [r7, #4]
   1f48c:	1e5a      	subs	r2, r3, #1
   1f48e:	607a      	str	r2, [r7, #4]
   1f490:	2b00      	cmp	r3, #0
   1f492:	d1e6      	bne.n	1f462 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
   1f494:	2300      	movs	r3, #0
   1f496:	e001      	b.n	1f49c <sd_mmc_cmd13+0x44>
				break;
   1f498:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
   1f49a:	2301      	movs	r3, #1
}
   1f49c:	0018      	movs	r0, r3
   1f49e:	46bd      	mov	sp, r7
   1f4a0:	b002      	add	sp, #8
   1f4a2:	bd80      	pop	{r7, pc}
   1f4a4:	00030d40 	.word	0x00030d40
   1f4a8:	00001b0d 	.word	0x00001b0d
   1f4ac:	00020911 	.word	0x00020911
   1f4b0:	00020b51 	.word	0x00020b51

0001f4b4 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
   1f4b4:	b590      	push	{r4, r7, lr}
   1f4b6:	b085      	sub	sp, #20
   1f4b8:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   1f4ba:	4b38      	ldr	r3, [pc, #224]	; (1f59c <sd_acmd51+0xe8>)
   1f4bc:	681b      	ldr	r3, [r3, #0]
   1f4be:	891b      	ldrh	r3, [r3, #8]
   1f4c0:	041b      	lsls	r3, r3, #16
   1f4c2:	4a37      	ldr	r2, [pc, #220]	; (1f5a0 <sd_acmd51+0xec>)
   1f4c4:	0019      	movs	r1, r3
   1f4c6:	0010      	movs	r0, r2
   1f4c8:	4b36      	ldr	r3, [pc, #216]	; (1f5a4 <sd_acmd51+0xf0>)
   1f4ca:	4798      	blx	r3
   1f4cc:	0003      	movs	r3, r0
   1f4ce:	001a      	movs	r2, r3
   1f4d0:	2301      	movs	r3, #1
   1f4d2:	4053      	eors	r3, r2
   1f4d4:	b2db      	uxtb	r3, r3
   1f4d6:	2b00      	cmp	r3, #0
   1f4d8:	d001      	beq.n	1f4de <sd_acmd51+0x2a>
		return false;
   1f4da:	2300      	movs	r3, #0
   1f4dc:	e059      	b.n	1f592 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   1f4de:	4832      	ldr	r0, [pc, #200]	; (1f5a8 <sd_acmd51+0xf4>)
   1f4e0:	2301      	movs	r3, #1
   1f4e2:	9300      	str	r3, [sp, #0]
   1f4e4:	2301      	movs	r3, #1
   1f4e6:	2208      	movs	r2, #8
   1f4e8:	2100      	movs	r1, #0
   1f4ea:	4c30      	ldr	r4, [pc, #192]	; (1f5ac <sd_acmd51+0xf8>)
   1f4ec:	47a0      	blx	r4
   1f4ee:	0003      	movs	r3, r0
   1f4f0:	001a      	movs	r2, r3
   1f4f2:	2301      	movs	r3, #1
   1f4f4:	4053      	eors	r3, r2
   1f4f6:	b2db      	uxtb	r3, r3
   1f4f8:	2b00      	cmp	r3, #0
   1f4fa:	d001      	beq.n	1f500 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
   1f4fc:	2300      	movs	r3, #0
   1f4fe:	e048      	b.n	1f592 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
   1f500:	003b      	movs	r3, r7
   1f502:	2101      	movs	r1, #1
   1f504:	0018      	movs	r0, r3
   1f506:	4b2a      	ldr	r3, [pc, #168]	; (1f5b0 <sd_acmd51+0xfc>)
   1f508:	4798      	blx	r3
   1f50a:	0003      	movs	r3, r0
   1f50c:	001a      	movs	r2, r3
   1f50e:	2301      	movs	r3, #1
   1f510:	4053      	eors	r3, r2
   1f512:	b2db      	uxtb	r3, r3
   1f514:	2b00      	cmp	r3, #0
   1f516:	d001      	beq.n	1f51c <sd_acmd51+0x68>
		return false;
   1f518:	2300      	movs	r3, #0
   1f51a:	e03a      	b.n	1f592 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
   1f51c:	4b25      	ldr	r3, [pc, #148]	; (1f5b4 <sd_acmd51+0x100>)
   1f51e:	4798      	blx	r3
   1f520:	0003      	movs	r3, r0
   1f522:	001a      	movs	r2, r3
   1f524:	2301      	movs	r3, #1
   1f526:	4053      	eors	r3, r2
   1f528:	b2db      	uxtb	r3, r3
   1f52a:	2b00      	cmp	r3, #0
   1f52c:	d001      	beq.n	1f532 <sd_acmd51+0x7e>
		return false;
   1f52e:	2300      	movs	r3, #0
   1f530:	e02f      	b.n	1f592 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
   1f532:	0038      	movs	r0, r7
   1f534:	2304      	movs	r3, #4
   1f536:	2238      	movs	r2, #56	; 0x38
   1f538:	2140      	movs	r1, #64	; 0x40
   1f53a:	4c1f      	ldr	r4, [pc, #124]	; (1f5b8 <sd_acmd51+0x104>)
   1f53c:	47a0      	blx	r4
   1f53e:	0003      	movs	r3, r0
   1f540:	2b01      	cmp	r3, #1
   1f542:	d008      	beq.n	1f556 <sd_acmd51+0xa2>
   1f544:	d302      	bcc.n	1f54c <sd_acmd51+0x98>
   1f546:	2b02      	cmp	r3, #2
   1f548:	d00a      	beq.n	1f560 <sd_acmd51+0xac>
   1f54a:	e01c      	b.n	1f586 <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1f54c:	4b13      	ldr	r3, [pc, #76]	; (1f59c <sd_acmd51+0xe8>)
   1f54e:	681b      	ldr	r3, [r3, #0]
   1f550:	2210      	movs	r2, #16
   1f552:	731a      	strb	r2, [r3, #12]
		break;
   1f554:	e01c      	b.n	1f590 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
   1f556:	4b11      	ldr	r3, [pc, #68]	; (1f59c <sd_acmd51+0xe8>)
   1f558:	681b      	ldr	r3, [r3, #0]
   1f55a:	221a      	movs	r2, #26
   1f55c:	731a      	strb	r2, [r3, #12]
		break;
   1f55e:	e017      	b.n	1f590 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   1f560:	0038      	movs	r0, r7
   1f562:	2301      	movs	r3, #1
   1f564:	222f      	movs	r2, #47	; 0x2f
   1f566:	2140      	movs	r1, #64	; 0x40
   1f568:	4c13      	ldr	r4, [pc, #76]	; (1f5b8 <sd_acmd51+0x104>)
   1f56a:	47a0      	blx	r4
   1f56c:	0003      	movs	r3, r0
   1f56e:	2b01      	cmp	r3, #1
   1f570:	d104      	bne.n	1f57c <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
   1f572:	4b0a      	ldr	r3, [pc, #40]	; (1f59c <sd_acmd51+0xe8>)
   1f574:	681b      	ldr	r3, [r3, #0]
   1f576:	2230      	movs	r2, #48	; 0x30
   1f578:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
   1f57a:	e009      	b.n	1f590 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
   1f57c:	4b07      	ldr	r3, [pc, #28]	; (1f59c <sd_acmd51+0xe8>)
   1f57e:	681b      	ldr	r3, [r3, #0]
   1f580:	2220      	movs	r2, #32
   1f582:	731a      	strb	r2, [r3, #12]
		break;
   1f584:	e004      	b.n	1f590 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1f586:	4b05      	ldr	r3, [pc, #20]	; (1f59c <sd_acmd51+0xe8>)
   1f588:	681b      	ldr	r3, [r3, #0]
   1f58a:	2210      	movs	r2, #16
   1f58c:	731a      	strb	r2, [r3, #12]
		break;
   1f58e:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1f590:	2301      	movs	r3, #1
}
   1f592:	0018      	movs	r0, r3
   1f594:	46bd      	mov	sp, r7
   1f596:	b003      	add	sp, #12
   1f598:	bd90      	pop	{r4, r7, pc}
   1f59a:	46c0      	nop			; (mov r8, r8)
   1f59c:	20004244 	.word	0x20004244
   1f5a0:	00001137 	.word	0x00001137
   1f5a4:	00020911 	.word	0x00020911
   1f5a8:	00081133 	.word	0x00081133
   1f5ac:	00020939 	.word	0x00020939
   1f5b0:	00020c09 	.word	0x00020c09
   1f5b4:	00020cad 	.word	0x00020cad
   1f5b8:	0001ed39 	.word	0x0001ed39

0001f5bc <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
   1f5bc:	b580      	push	{r7, lr}
   1f5be:	b082      	sub	sp, #8
   1f5c0:	af00      	add	r7, sp, #0
   1f5c2:	0002      	movs	r2, r0
   1f5c4:	1dfb      	adds	r3, r7, #7
   1f5c6:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
   1f5c8:	1dfb      	adds	r3, r7, #7
   1f5ca:	781b      	ldrb	r3, [r3, #0]
   1f5cc:	2b00      	cmp	r3, #0
   1f5ce:	d001      	beq.n	1f5d4 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
   1f5d0:	2304      	movs	r3, #4
   1f5d2:	e047      	b.n	1f664 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   1f5d4:	1dfb      	adds	r3, r7, #7
   1f5d6:	781b      	ldrb	r3, [r3, #0]
   1f5d8:	4a24      	ldr	r2, [pc, #144]	; (1f66c <sd_mmc_select_slot+0xb0>)
   1f5da:	015b      	lsls	r3, r3, #5
   1f5dc:	18d3      	adds	r3, r2, r3
   1f5de:	330a      	adds	r3, #10
   1f5e0:	781b      	ldrb	r3, [r3, #0]
   1f5e2:	2b04      	cmp	r3, #4
   1f5e4:	d008      	beq.n	1f5f8 <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   1f5e6:	1dfb      	adds	r3, r7, #7
   1f5e8:	781b      	ldrb	r3, [r3, #0]
   1f5ea:	4a20      	ldr	r2, [pc, #128]	; (1f66c <sd_mmc_select_slot+0xb0>)
   1f5ec:	015b      	lsls	r3, r3, #5
   1f5ee:	18d3      	adds	r3, r2, r3
   1f5f0:	330a      	adds	r3, #10
   1f5f2:	781b      	ldrb	r3, [r3, #0]
   1f5f4:	2b03      	cmp	r3, #3
   1f5f6:	d11d      	bne.n	1f634 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   1f5f8:	1dfb      	adds	r3, r7, #7
   1f5fa:	781b      	ldrb	r3, [r3, #0]
   1f5fc:	4a1b      	ldr	r2, [pc, #108]	; (1f66c <sd_mmc_select_slot+0xb0>)
   1f5fe:	015b      	lsls	r3, r3, #5
   1f600:	18d3      	adds	r3, r2, r3
   1f602:	330a      	adds	r3, #10
   1f604:	2202      	movs	r2, #2
   1f606:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   1f608:	1dfb      	adds	r3, r7, #7
   1f60a:	781a      	ldrb	r2, [r3, #0]
   1f60c:	4b17      	ldr	r3, [pc, #92]	; (1f66c <sd_mmc_select_slot+0xb0>)
   1f60e:	0152      	lsls	r2, r2, #5
   1f610:	4917      	ldr	r1, [pc, #92]	; (1f670 <sd_mmc_select_slot+0xb4>)
   1f612:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
   1f614:	1dfb      	adds	r3, r7, #7
   1f616:	781b      	ldrb	r3, [r3, #0]
   1f618:	4a14      	ldr	r2, [pc, #80]	; (1f66c <sd_mmc_select_slot+0xb0>)
   1f61a:	015b      	lsls	r3, r3, #5
   1f61c:	18d3      	adds	r3, r2, r3
   1f61e:	330d      	adds	r3, #13
   1f620:	2201      	movs	r2, #1
   1f622:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
   1f624:	1dfb      	adds	r3, r7, #7
   1f626:	781b      	ldrb	r3, [r3, #0]
   1f628:	4a10      	ldr	r2, [pc, #64]	; (1f66c <sd_mmc_select_slot+0xb0>)
   1f62a:	015b      	lsls	r3, r3, #5
   1f62c:	18d3      	adds	r3, r2, r3
   1f62e:	331e      	adds	r3, #30
   1f630:	2200      	movs	r2, #0
   1f632:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
   1f634:	4b0f      	ldr	r3, [pc, #60]	; (1f674 <sd_mmc_select_slot+0xb8>)
   1f636:	1dfa      	adds	r2, r7, #7
   1f638:	7812      	ldrb	r2, [r2, #0]
   1f63a:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   1f63c:	1dfb      	adds	r3, r7, #7
   1f63e:	781b      	ldrb	r3, [r3, #0]
   1f640:	015a      	lsls	r2, r3, #5
   1f642:	4b0a      	ldr	r3, [pc, #40]	; (1f66c <sd_mmc_select_slot+0xb0>)
   1f644:	18d2      	adds	r2, r2, r3
   1f646:	4b0c      	ldr	r3, [pc, #48]	; (1f678 <sd_mmc_select_slot+0xbc>)
   1f648:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
   1f64a:	4b0c      	ldr	r3, [pc, #48]	; (1f67c <sd_mmc_select_slot+0xc0>)
   1f64c:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
   1f64e:	1dfb      	adds	r3, r7, #7
   1f650:	781b      	ldrb	r3, [r3, #0]
   1f652:	4a06      	ldr	r2, [pc, #24]	; (1f66c <sd_mmc_select_slot+0xb0>)
   1f654:	015b      	lsls	r3, r3, #5
   1f656:	18d3      	adds	r3, r2, r3
   1f658:	330a      	adds	r3, #10
   1f65a:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   1f65c:	3b02      	subs	r3, #2
   1f65e:	425a      	negs	r2, r3
   1f660:	4153      	adcs	r3, r2
   1f662:	b2db      	uxtb	r3, r3
}
   1f664:	0018      	movs	r0, r3
   1f666:	46bd      	mov	sp, r7
   1f668:	b002      	add	sp, #8
   1f66a:	bd80      	pop	{r7, pc}
   1f66c:	20004220 	.word	0x20004220
   1f670:	00061a80 	.word	0x00061a80
   1f674:	20004240 	.word	0x20004240
   1f678:	20004244 	.word	0x20004244
   1f67c:	0001f681 	.word	0x0001f681

0001f680 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   1f680:	b5b0      	push	{r4, r5, r7, lr}
   1f682:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1f684:	4b09      	ldr	r3, [pc, #36]	; (1f6ac <sd_mmc_configure_slot+0x2c>)
   1f686:	7818      	ldrb	r0, [r3, #0]
   1f688:	4b09      	ldr	r3, [pc, #36]	; (1f6b0 <sd_mmc_configure_slot+0x30>)
   1f68a:	681b      	ldr	r3, [r3, #0]
   1f68c:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1f68e:	4b08      	ldr	r3, [pc, #32]	; (1f6b0 <sd_mmc_configure_slot+0x30>)
   1f690:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1f692:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1f694:	4b06      	ldr	r3, [pc, #24]	; (1f6b0 <sd_mmc_configure_slot+0x30>)
   1f696:	681b      	ldr	r3, [r3, #0]
   1f698:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1f69a:	1e5c      	subs	r4, r3, #1
   1f69c:	41a3      	sbcs	r3, r4
   1f69e:	b2db      	uxtb	r3, r3
   1f6a0:	4c04      	ldr	r4, [pc, #16]	; (1f6b4 <sd_mmc_configure_slot+0x34>)
   1f6a2:	47a0      	blx	r4
}
   1f6a4:	46c0      	nop			; (mov r8, r8)
   1f6a6:	46bd      	mov	sp, r7
   1f6a8:	bdb0      	pop	{r4, r5, r7, pc}
   1f6aa:	46c0      	nop			; (mov r8, r8)
   1f6ac:	20004240 	.word	0x20004240
   1f6b0:	20004244 	.word	0x20004244
   1f6b4:	000207f9 	.word	0x000207f9

0001f6b8 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   1f6b8:	b580      	push	{r7, lr}
   1f6ba:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   1f6bc:	4b05      	ldr	r3, [pc, #20]	; (1f6d4 <sd_mmc_deselect_slot+0x1c>)
   1f6be:	781b      	ldrb	r3, [r3, #0]
   1f6c0:	2b00      	cmp	r3, #0
   1f6c2:	d104      	bne.n	1f6ce <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
   1f6c4:	4b03      	ldr	r3, [pc, #12]	; (1f6d4 <sd_mmc_deselect_slot+0x1c>)
   1f6c6:	781b      	ldrb	r3, [r3, #0]
   1f6c8:	0018      	movs	r0, r3
   1f6ca:	4b03      	ldr	r3, [pc, #12]	; (1f6d8 <sd_mmc_deselect_slot+0x20>)
   1f6cc:	4798      	blx	r3
	}
}
   1f6ce:	46c0      	nop			; (mov r8, r8)
   1f6d0:	46bd      	mov	sp, r7
   1f6d2:	bd80      	pop	{r7, pc}
   1f6d4:	20004240 	.word	0x20004240
   1f6d8:	00020881 	.word	0x00020881

0001f6dc <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
   1f6dc:	b580      	push	{r7, lr}
   1f6de:	b082      	sub	sp, #8
   1f6e0:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
   1f6e2:	1dfb      	adds	r3, r7, #7
   1f6e4:	2200      	movs	r2, #0
   1f6e6:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
   1f6e8:	4b59      	ldr	r3, [pc, #356]	; (1f850 <sd_mmc_spi_card_init+0x174>)
   1f6ea:	681b      	ldr	r3, [r3, #0]
   1f6ec:	2201      	movs	r2, #1
   1f6ee:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   1f6f0:	4b57      	ldr	r3, [pc, #348]	; (1f850 <sd_mmc_spi_card_init+0x174>)
   1f6f2:	681b      	ldr	r3, [r3, #0]
   1f6f4:	2200      	movs	r2, #0
   1f6f6:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
   1f6f8:	4b55      	ldr	r3, [pc, #340]	; (1f850 <sd_mmc_spi_card_init+0x174>)
   1f6fa:	681b      	ldr	r3, [r3, #0]
   1f6fc:	2200      	movs	r2, #0
   1f6fe:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
   1f700:	4b54      	ldr	r3, [pc, #336]	; (1f854 <sd_mmc_spi_card_init+0x178>)
   1f702:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1f704:	2388      	movs	r3, #136	; 0x88
   1f706:	015b      	lsls	r3, r3, #5
   1f708:	2100      	movs	r1, #0
   1f70a:	0018      	movs	r0, r3
   1f70c:	4b52      	ldr	r3, [pc, #328]	; (1f858 <sd_mmc_spi_card_init+0x17c>)
   1f70e:	4798      	blx	r3
   1f710:	0003      	movs	r3, r0
   1f712:	001a      	movs	r2, r3
   1f714:	2301      	movs	r3, #1
   1f716:	4053      	eors	r3, r2
   1f718:	b2db      	uxtb	r3, r3
   1f71a:	2b00      	cmp	r3, #0
   1f71c:	d001      	beq.n	1f722 <sd_mmc_spi_card_init+0x46>
		return false;
   1f71e:	2300      	movs	r3, #0
   1f720:	e092      	b.n	1f848 <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
   1f722:	1dfb      	adds	r3, r7, #7
   1f724:	0018      	movs	r0, r3
   1f726:	4b4d      	ldr	r3, [pc, #308]	; (1f85c <sd_mmc_spi_card_init+0x180>)
   1f728:	4798      	blx	r3
   1f72a:	0003      	movs	r3, r0
   1f72c:	001a      	movs	r2, r3
   1f72e:	2301      	movs	r3, #1
   1f730:	4053      	eors	r3, r2
   1f732:	b2db      	uxtb	r3, r3
   1f734:	2b00      	cmp	r3, #0
   1f736:	d001      	beq.n	1f73c <sd_mmc_spi_card_init+0x60>
		return false;
   1f738:	2300      	movs	r3, #0
   1f73a:	e085      	b.n	1f848 <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
   1f73c:	4b48      	ldr	r3, [pc, #288]	; (1f860 <sd_mmc_spi_card_init+0x184>)
   1f73e:	4798      	blx	r3
   1f740:	0003      	movs	r3, r0
   1f742:	001a      	movs	r2, r3
   1f744:	2301      	movs	r3, #1
   1f746:	4053      	eors	r3, r2
   1f748:	b2db      	uxtb	r3, r3
   1f74a:	2b00      	cmp	r3, #0
   1f74c:	d001      	beq.n	1f752 <sd_mmc_spi_card_init+0x76>
		return false;
   1f74e:	2300      	movs	r3, #0
   1f750:	e07a      	b.n	1f848 <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1f752:	4b3f      	ldr	r3, [pc, #252]	; (1f850 <sd_mmc_spi_card_init+0x174>)
   1f754:	681b      	ldr	r3, [r3, #0]
   1f756:	7adb      	ldrb	r3, [r3, #11]
   1f758:	001a      	movs	r2, r3
   1f75a:	2301      	movs	r3, #1
   1f75c:	4013      	ands	r3, r2
   1f75e:	d021      	beq.n	1f7a4 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
   1f760:	1dfb      	adds	r3, r7, #7
   1f762:	781b      	ldrb	r3, [r3, #0]
   1f764:	0018      	movs	r0, r3
   1f766:	4b3f      	ldr	r3, [pc, #252]	; (1f864 <sd_mmc_spi_card_init+0x188>)
   1f768:	4798      	blx	r3
   1f76a:	0003      	movs	r3, r0
   1f76c:	001a      	movs	r2, r3
   1f76e:	2301      	movs	r3, #1
   1f770:	4053      	eors	r3, r2
   1f772:	b2db      	uxtb	r3, r3
   1f774:	2b00      	cmp	r3, #0
   1f776:	d007      	beq.n	1f788 <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
   1f778:	4b35      	ldr	r3, [pc, #212]	; (1f850 <sd_mmc_spi_card_init+0x174>)
   1f77a:	681b      	ldr	r3, [r3, #0]
   1f77c:	2202      	movs	r2, #2
   1f77e:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
   1f780:	4b39      	ldr	r3, [pc, #228]	; (1f868 <sd_mmc_spi_card_init+0x18c>)
   1f782:	4798      	blx	r3
   1f784:	0003      	movs	r3, r0
   1f786:	e05f      	b.n	1f848 <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1f788:	4b38      	ldr	r3, [pc, #224]	; (1f86c <sd_mmc_spi_card_init+0x190>)
   1f78a:	2100      	movs	r1, #0
   1f78c:	0018      	movs	r0, r3
   1f78e:	4b32      	ldr	r3, [pc, #200]	; (1f858 <sd_mmc_spi_card_init+0x17c>)
   1f790:	4798      	blx	r3
   1f792:	0003      	movs	r3, r0
   1f794:	001a      	movs	r2, r3
   1f796:	2301      	movs	r3, #1
   1f798:	4053      	eors	r3, r2
   1f79a:	b2db      	uxtb	r3, r3
   1f79c:	2b00      	cmp	r3, #0
   1f79e:	d001      	beq.n	1f7a4 <sd_mmc_spi_card_init+0xc8>
			return false;
   1f7a0:	2300      	movs	r3, #0
   1f7a2:	e051      	b.n	1f848 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1f7a4:	4b2a      	ldr	r3, [pc, #168]	; (1f850 <sd_mmc_spi_card_init+0x174>)
   1f7a6:	681b      	ldr	r3, [r3, #0]
   1f7a8:	7adb      	ldrb	r3, [r3, #11]
   1f7aa:	001a      	movs	r2, r3
   1f7ac:	2301      	movs	r3, #1
   1f7ae:	4013      	ands	r3, r2
   1f7b0:	d017      	beq.n	1f7e2 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
   1f7b2:	4b2f      	ldr	r3, [pc, #188]	; (1f870 <sd_mmc_spi_card_init+0x194>)
   1f7b4:	4798      	blx	r3
   1f7b6:	0003      	movs	r3, r0
   1f7b8:	001a      	movs	r2, r3
   1f7ba:	2301      	movs	r3, #1
   1f7bc:	4053      	eors	r3, r2
   1f7be:	b2db      	uxtb	r3, r3
   1f7c0:	2b00      	cmp	r3, #0
   1f7c2:	d001      	beq.n	1f7c8 <sd_mmc_spi_card_init+0xec>
			return false;
   1f7c4:	2300      	movs	r3, #0
   1f7c6:	e03f      	b.n	1f848 <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
   1f7c8:	4b2a      	ldr	r3, [pc, #168]	; (1f874 <sd_mmc_spi_card_init+0x198>)
   1f7ca:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
   1f7cc:	4b2a      	ldr	r3, [pc, #168]	; (1f878 <sd_mmc_spi_card_init+0x19c>)
   1f7ce:	4798      	blx	r3
   1f7d0:	0003      	movs	r3, r0
   1f7d2:	001a      	movs	r2, r3
   1f7d4:	2301      	movs	r3, #1
   1f7d6:	4053      	eors	r3, r2
   1f7d8:	b2db      	uxtb	r3, r3
   1f7da:	2b00      	cmp	r3, #0
   1f7dc:	d001      	beq.n	1f7e2 <sd_mmc_spi_card_init+0x106>
			return false;
   1f7de:	2300      	movs	r3, #0
   1f7e0:	e032      	b.n	1f848 <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1f7e2:	4b1b      	ldr	r3, [pc, #108]	; (1f850 <sd_mmc_spi_card_init+0x174>)
   1f7e4:	681b      	ldr	r3, [r3, #0]
   1f7e6:	7adb      	ldrb	r3, [r3, #11]
   1f7e8:	001a      	movs	r2, r3
   1f7ea:	2301      	movs	r3, #1
   1f7ec:	4013      	ands	r3, r2
   1f7ee:	d016      	beq.n	1f81e <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
   1f7f0:	4b17      	ldr	r3, [pc, #92]	; (1f850 <sd_mmc_spi_card_init+0x174>)
   1f7f2:	681b      	ldr	r3, [r3, #0]
   1f7f4:	7adb      	ldrb	r3, [r3, #11]
   1f7f6:	001a      	movs	r2, r3
   1f7f8:	2308      	movs	r3, #8
   1f7fa:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1f7fc:	d10f      	bne.n	1f81e <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1f7fe:	2380      	movs	r3, #128	; 0x80
   1f800:	009b      	lsls	r3, r3, #2
   1f802:	4a1e      	ldr	r2, [pc, #120]	; (1f87c <sd_mmc_spi_card_init+0x1a0>)
   1f804:	0019      	movs	r1, r3
   1f806:	0010      	movs	r0, r2
   1f808:	4b13      	ldr	r3, [pc, #76]	; (1f858 <sd_mmc_spi_card_init+0x17c>)
   1f80a:	4798      	blx	r3
   1f80c:	0003      	movs	r3, r0
   1f80e:	001a      	movs	r2, r3
   1f810:	2301      	movs	r3, #1
   1f812:	4053      	eors	r3, r2
   1f814:	b2db      	uxtb	r3, r3
   1f816:	2b00      	cmp	r3, #0
   1f818:	d001      	beq.n	1f81e <sd_mmc_spi_card_init+0x142>
			return false;
   1f81a:	2300      	movs	r3, #0
   1f81c:	e014      	b.n	1f848 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1f81e:	4b0c      	ldr	r3, [pc, #48]	; (1f850 <sd_mmc_spi_card_init+0x174>)
   1f820:	681b      	ldr	r3, [r3, #0]
   1f822:	7adb      	ldrb	r3, [r3, #11]
   1f824:	001a      	movs	r2, r3
   1f826:	2301      	movs	r3, #1
   1f828:	4013      	ands	r3, r2
   1f82a:	d00a      	beq.n	1f842 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
   1f82c:	4b14      	ldr	r3, [pc, #80]	; (1f880 <sd_mmc_spi_card_init+0x1a4>)
   1f82e:	4798      	blx	r3
   1f830:	0003      	movs	r3, r0
   1f832:	001a      	movs	r2, r3
   1f834:	2301      	movs	r3, #1
   1f836:	4053      	eors	r3, r2
   1f838:	b2db      	uxtb	r3, r3
   1f83a:	2b00      	cmp	r3, #0
   1f83c:	d001      	beq.n	1f842 <sd_mmc_spi_card_init+0x166>
			return false;
   1f83e:	2300      	movs	r3, #0
   1f840:	e002      	b.n	1f848 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1f842:	4b10      	ldr	r3, [pc, #64]	; (1f884 <sd_mmc_spi_card_init+0x1a8>)
   1f844:	4798      	blx	r3
	return true;
   1f846:	2301      	movs	r3, #1
}
   1f848:	0018      	movs	r0, r3
   1f84a:	46bd      	mov	sp, r7
   1f84c:	b002      	add	sp, #8
   1f84e:	bd80      	pop	{r7, pc}
   1f850:	20004244 	.word	0x20004244
   1f854:	000208c5 	.word	0x000208c5
   1f858:	00020911 	.word	0x00020911
   1f85c:	0001f031 	.word	0x0001f031
   1f860:	0001f025 	.word	0x0001f025
   1f864:	0001ef41 	.word	0x0001ef41
   1f868:	0001f889 	.word	0x0001f889
   1f86c:	0000113b 	.word	0x0000113b
   1f870:	0001f1cd 	.word	0x0001f1cd
   1f874:	0001f36d 	.word	0x0001f36d
   1f878:	0001f4b5 	.word	0x0001f4b5
   1f87c:	00001110 	.word	0x00001110
   1f880:	0001f459 	.word	0x0001f459
   1f884:	0001f681 	.word	0x0001f681

0001f888 <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
   1f888:	b580      	push	{r7, lr}
   1f88a:	b082      	sub	sp, #8
   1f88c:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1f88e:	2388      	movs	r3, #136	; 0x88
   1f890:	015b      	lsls	r3, r3, #5
   1f892:	2100      	movs	r1, #0
   1f894:	0018      	movs	r0, r3
   1f896:	4b32      	ldr	r3, [pc, #200]	; (1f960 <sd_mmc_spi_install_mmc+0xd8>)
   1f898:	4798      	blx	r3
   1f89a:	0003      	movs	r3, r0
   1f89c:	001a      	movs	r2, r3
   1f89e:	2301      	movs	r3, #1
   1f8a0:	4053      	eors	r3, r2
   1f8a2:	b2db      	uxtb	r3, r3
   1f8a4:	2b00      	cmp	r3, #0
   1f8a6:	d001      	beq.n	1f8ac <sd_mmc_spi_install_mmc+0x24>
		return false;
   1f8a8:	2300      	movs	r3, #0
   1f8aa:	e055      	b.n	1f958 <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
   1f8ac:	4b2d      	ldr	r3, [pc, #180]	; (1f964 <sd_mmc_spi_install_mmc+0xdc>)
   1f8ae:	4798      	blx	r3
   1f8b0:	0003      	movs	r3, r0
   1f8b2:	001a      	movs	r2, r3
   1f8b4:	2301      	movs	r3, #1
   1f8b6:	4053      	eors	r3, r2
   1f8b8:	b2db      	uxtb	r3, r3
   1f8ba:	2b00      	cmp	r3, #0
   1f8bc:	d001      	beq.n	1f8c2 <sd_mmc_spi_install_mmc+0x3a>
		return false;
   1f8be:	2300      	movs	r3, #0
   1f8c0:	e04a      	b.n	1f958 <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1f8c2:	4b29      	ldr	r3, [pc, #164]	; (1f968 <sd_mmc_spi_install_mmc+0xe0>)
   1f8c4:	2100      	movs	r1, #0
   1f8c6:	0018      	movs	r0, r3
   1f8c8:	4b25      	ldr	r3, [pc, #148]	; (1f960 <sd_mmc_spi_install_mmc+0xd8>)
   1f8ca:	4798      	blx	r3
   1f8cc:	0003      	movs	r3, r0
   1f8ce:	001a      	movs	r2, r3
   1f8d0:	2301      	movs	r3, #1
   1f8d2:	4053      	eors	r3, r2
   1f8d4:	b2db      	uxtb	r3, r3
   1f8d6:	2b00      	cmp	r3, #0
   1f8d8:	d001      	beq.n	1f8de <sd_mmc_spi_install_mmc+0x56>
		return false;
   1f8da:	2300      	movs	r3, #0
   1f8dc:	e03c      	b.n	1f958 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
   1f8de:	4b23      	ldr	r3, [pc, #140]	; (1f96c <sd_mmc_spi_install_mmc+0xe4>)
   1f8e0:	4798      	blx	r3
   1f8e2:	0003      	movs	r3, r0
   1f8e4:	001a      	movs	r2, r3
   1f8e6:	2301      	movs	r3, #1
   1f8e8:	4053      	eors	r3, r2
   1f8ea:	b2db      	uxtb	r3, r3
   1f8ec:	2b00      	cmp	r3, #0
   1f8ee:	d001      	beq.n	1f8f4 <sd_mmc_spi_install_mmc+0x6c>
		return false;
   1f8f0:	2300      	movs	r3, #0
   1f8f2:	e031      	b.n	1f958 <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
   1f8f4:	4b1e      	ldr	r3, [pc, #120]	; (1f970 <sd_mmc_spi_install_mmc+0xe8>)
   1f8f6:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   1f8f8:	4b1e      	ldr	r3, [pc, #120]	; (1f974 <sd_mmc_spi_install_mmc+0xec>)
   1f8fa:	681b      	ldr	r3, [r3, #0]
   1f8fc:	7b1b      	ldrb	r3, [r3, #12]
   1f8fe:	2b3f      	cmp	r3, #63	; 0x3f
   1f900:	d90c      	bls.n	1f91c <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
   1f902:	1dfb      	adds	r3, r7, #7
   1f904:	0018      	movs	r0, r3
   1f906:	4b1c      	ldr	r3, [pc, #112]	; (1f978 <sd_mmc_spi_install_mmc+0xf0>)
   1f908:	4798      	blx	r3
   1f90a:	0003      	movs	r3, r0
   1f90c:	001a      	movs	r2, r3
   1f90e:	2301      	movs	r3, #1
   1f910:	4053      	eors	r3, r2
   1f912:	b2db      	uxtb	r3, r3
   1f914:	2b00      	cmp	r3, #0
   1f916:	d001      	beq.n	1f91c <sd_mmc_spi_install_mmc+0x94>
			return false;
   1f918:	2300      	movs	r3, #0
   1f91a:	e01d      	b.n	1f958 <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1f91c:	2380      	movs	r3, #128	; 0x80
   1f91e:	009b      	lsls	r3, r3, #2
   1f920:	4a16      	ldr	r2, [pc, #88]	; (1f97c <sd_mmc_spi_install_mmc+0xf4>)
   1f922:	0019      	movs	r1, r3
   1f924:	0010      	movs	r0, r2
   1f926:	4b0e      	ldr	r3, [pc, #56]	; (1f960 <sd_mmc_spi_install_mmc+0xd8>)
   1f928:	4798      	blx	r3
   1f92a:	0003      	movs	r3, r0
   1f92c:	001a      	movs	r2, r3
   1f92e:	2301      	movs	r3, #1
   1f930:	4053      	eors	r3, r2
   1f932:	b2db      	uxtb	r3, r3
   1f934:	2b00      	cmp	r3, #0
   1f936:	d001      	beq.n	1f93c <sd_mmc_spi_install_mmc+0xb4>
		return false;
   1f938:	2300      	movs	r3, #0
   1f93a:	e00d      	b.n	1f958 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
   1f93c:	4b10      	ldr	r3, [pc, #64]	; (1f980 <sd_mmc_spi_install_mmc+0xf8>)
   1f93e:	4798      	blx	r3
   1f940:	0003      	movs	r3, r0
   1f942:	001a      	movs	r2, r3
   1f944:	2301      	movs	r3, #1
   1f946:	4053      	eors	r3, r2
   1f948:	b2db      	uxtb	r3, r3
   1f94a:	2b00      	cmp	r3, #0
   1f94c:	d001      	beq.n	1f952 <sd_mmc_spi_install_mmc+0xca>
		return false;
   1f94e:	2300      	movs	r3, #0
   1f950:	e002      	b.n	1f958 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1f952:	4b0c      	ldr	r3, [pc, #48]	; (1f984 <sd_mmc_spi_install_mmc+0xfc>)
   1f954:	4798      	blx	r3
	return true;
   1f956:	2301      	movs	r3, #1
}
   1f958:	0018      	movs	r0, r3
   1f95a:	46bd      	mov	sp, r7
   1f95c:	b002      	add	sp, #8
   1f95e:	bd80      	pop	{r7, pc}
   1f960:	00020911 	.word	0x00020911
   1f964:	0001ee95 	.word	0x0001ee95
   1f968:	0000113b 	.word	0x0000113b
   1f96c:	0001f1cd 	.word	0x0001f1cd
   1f970:	0001f23d 	.word	0x0001f23d
   1f974:	20004244 	.word	0x20004244
   1f978:	0001f0a1 	.word	0x0001f0a1
   1f97c:	00001110 	.word	0x00001110
   1f980:	0001f459 	.word	0x0001f459
   1f984:	0001f681 	.word	0x0001f681

0001f988 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
   1f988:	b580      	push	{r7, lr}
   1f98a:	b082      	sub	sp, #8
   1f98c:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1f98e:	1dfb      	adds	r3, r7, #7
   1f990:	2200      	movs	r2, #0
   1f992:	701a      	strb	r2, [r3, #0]
   1f994:	e00c      	b.n	1f9b0 <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   1f996:	1dfb      	adds	r3, r7, #7
   1f998:	781b      	ldrb	r3, [r3, #0]
   1f99a:	4a0c      	ldr	r2, [pc, #48]	; (1f9cc <sd_mmc_init+0x44>)
   1f99c:	015b      	lsls	r3, r3, #5
   1f99e:	18d3      	adds	r3, r2, r3
   1f9a0:	330a      	adds	r3, #10
   1f9a2:	2204      	movs	r2, #4
   1f9a4:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1f9a6:	1dfb      	adds	r3, r7, #7
   1f9a8:	781a      	ldrb	r2, [r3, #0]
   1f9aa:	1dfb      	adds	r3, r7, #7
   1f9ac:	3201      	adds	r2, #1
   1f9ae:	701a      	strb	r2, [r3, #0]
   1f9b0:	1dfb      	adds	r3, r7, #7
   1f9b2:	781b      	ldrb	r3, [r3, #0]
   1f9b4:	2b00      	cmp	r3, #0
   1f9b6:	d0ee      	beq.n	1f996 <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
   1f9b8:	4b05      	ldr	r3, [pc, #20]	; (1f9d0 <sd_mmc_init+0x48>)
   1f9ba:	22ff      	movs	r2, #255	; 0xff
   1f9bc:	701a      	strb	r2, [r3, #0]
	driver_init();
   1f9be:	4b05      	ldr	r3, [pc, #20]	; (1f9d4 <sd_mmc_init+0x4c>)
   1f9c0:	4798      	blx	r3
}
   1f9c2:	46c0      	nop			; (mov r8, r8)
   1f9c4:	46bd      	mov	sp, r7
   1f9c6:	b002      	add	sp, #8
   1f9c8:	bd80      	pop	{r7, pc}
   1f9ca:	46c0      	nop			; (mov r8, r8)
   1f9cc:	20004220 	.word	0x20004220
   1f9d0:	20004240 	.word	0x20004240
   1f9d4:	00020731 	.word	0x00020731

0001f9d8 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   1f9d8:	b590      	push	{r4, r7, lr}
   1f9da:	b085      	sub	sp, #20
   1f9dc:	af00      	add	r7, sp, #0
   1f9de:	0002      	movs	r2, r0
   1f9e0:	1dfb      	adds	r3, r7, #7
   1f9e2:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1f9e4:	230f      	movs	r3, #15
   1f9e6:	18fc      	adds	r4, r7, r3
   1f9e8:	1dfb      	adds	r3, r7, #7
   1f9ea:	781b      	ldrb	r3, [r3, #0]
   1f9ec:	0018      	movs	r0, r3
   1f9ee:	4b13      	ldr	r3, [pc, #76]	; (1fa3c <sd_mmc_check+0x64>)
   1f9f0:	4798      	blx	r3
   1f9f2:	0003      	movs	r3, r0
   1f9f4:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   1f9f6:	230f      	movs	r3, #15
   1f9f8:	18fb      	adds	r3, r7, r3
   1f9fa:	781b      	ldrb	r3, [r3, #0]
   1f9fc:	2b01      	cmp	r3, #1
   1f9fe:	d005      	beq.n	1fa0c <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
   1fa00:	4b0f      	ldr	r3, [pc, #60]	; (1fa40 <sd_mmc_check+0x68>)
   1fa02:	4798      	blx	r3
		return sd_mmc_err;
   1fa04:	230f      	movs	r3, #15
   1fa06:	18fb      	adds	r3, r7, r3
   1fa08:	781b      	ldrb	r3, [r3, #0]
   1fa0a:	e012      	b.n	1fa32 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
   1fa0c:	4b0d      	ldr	r3, [pc, #52]	; (1fa44 <sd_mmc_check+0x6c>)
   1fa0e:	4798      	blx	r3
   1fa10:	1e03      	subs	r3, r0, #0
   1fa12:	d007      	beq.n	1fa24 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   1fa14:	4b0c      	ldr	r3, [pc, #48]	; (1fa48 <sd_mmc_check+0x70>)
   1fa16:	681b      	ldr	r3, [r3, #0]
   1fa18:	2200      	movs	r2, #0
   1fa1a:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
   1fa1c:	4b08      	ldr	r3, [pc, #32]	; (1fa40 <sd_mmc_check+0x68>)
   1fa1e:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
   1fa20:	2301      	movs	r3, #1
   1fa22:	e006      	b.n	1fa32 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   1fa24:	4b08      	ldr	r3, [pc, #32]	; (1fa48 <sd_mmc_check+0x70>)
   1fa26:	681b      	ldr	r3, [r3, #0]
   1fa28:	2203      	movs	r2, #3
   1fa2a:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
   1fa2c:	4b04      	ldr	r3, [pc, #16]	; (1fa40 <sd_mmc_check+0x68>)
   1fa2e:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   1fa30:	2303      	movs	r3, #3
}
   1fa32:	0018      	movs	r0, r3
   1fa34:	46bd      	mov	sp, r7
   1fa36:	b005      	add	sp, #20
   1fa38:	bd90      	pop	{r4, r7, pc}
   1fa3a:	46c0      	nop			; (mov r8, r8)
   1fa3c:	0001f5bd 	.word	0x0001f5bd
   1fa40:	0001f6b9 	.word	0x0001f6b9
   1fa44:	0001f6dd 	.word	0x0001f6dd
   1fa48:	20004244 	.word	0x20004244

0001fa4c <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
   1fa4c:	b580      	push	{r7, lr}
   1fa4e:	b082      	sub	sp, #8
   1fa50:	af00      	add	r7, sp, #0
   1fa52:	0002      	movs	r2, r0
   1fa54:	1dfb      	adds	r3, r7, #7
   1fa56:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1fa58:	1dfb      	adds	r3, r7, #7
   1fa5a:	781b      	ldrb	r3, [r3, #0]
   1fa5c:	0018      	movs	r0, r3
   1fa5e:	4b07      	ldr	r3, [pc, #28]	; (1fa7c <sd_mmc_get_type+0x30>)
   1fa60:	4798      	blx	r3
   1fa62:	1e03      	subs	r3, r0, #0
   1fa64:	d001      	beq.n	1fa6a <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
   1fa66:	2300      	movs	r3, #0
   1fa68:	e004      	b.n	1fa74 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
   1fa6a:	4b05      	ldr	r3, [pc, #20]	; (1fa80 <sd_mmc_get_type+0x34>)
   1fa6c:	4798      	blx	r3
	return sd_mmc_card->type;
   1fa6e:	4b05      	ldr	r3, [pc, #20]	; (1fa84 <sd_mmc_get_type+0x38>)
   1fa70:	681b      	ldr	r3, [r3, #0]
   1fa72:	7adb      	ldrb	r3, [r3, #11]
}
   1fa74:	0018      	movs	r0, r3
   1fa76:	46bd      	mov	sp, r7
   1fa78:	b002      	add	sp, #8
   1fa7a:	bd80      	pop	{r7, pc}
   1fa7c:	0001f5bd 	.word	0x0001f5bd
   1fa80:	0001f6b9 	.word	0x0001f6b9
   1fa84:	20004244 	.word	0x20004244

0001fa88 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   1fa88:	b580      	push	{r7, lr}
   1fa8a:	b082      	sub	sp, #8
   1fa8c:	af00      	add	r7, sp, #0
   1fa8e:	0002      	movs	r2, r0
   1fa90:	1dfb      	adds	r3, r7, #7
   1fa92:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1fa94:	1dfb      	adds	r3, r7, #7
   1fa96:	781b      	ldrb	r3, [r3, #0]
   1fa98:	0018      	movs	r0, r3
   1fa9a:	4b07      	ldr	r3, [pc, #28]	; (1fab8 <sd_mmc_get_capacity+0x30>)
   1fa9c:	4798      	blx	r3
   1fa9e:	1e03      	subs	r3, r0, #0
   1faa0:	d001      	beq.n	1faa6 <sd_mmc_get_capacity+0x1e>
		return 0;
   1faa2:	2300      	movs	r3, #0
   1faa4:	e004      	b.n	1fab0 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
   1faa6:	4b05      	ldr	r3, [pc, #20]	; (1fabc <sd_mmc_get_capacity+0x34>)
   1faa8:	4798      	blx	r3
	return sd_mmc_card->capacity;
   1faaa:	4b05      	ldr	r3, [pc, #20]	; (1fac0 <sd_mmc_get_capacity+0x38>)
   1faac:	681b      	ldr	r3, [r3, #0]
   1faae:	685b      	ldr	r3, [r3, #4]
}
   1fab0:	0018      	movs	r0, r3
   1fab2:	46bd      	mov	sp, r7
   1fab4:	b002      	add	sp, #8
   1fab6:	bd80      	pop	{r7, pc}
   1fab8:	0001f5bd 	.word	0x0001f5bd
   1fabc:	0001f6b9 	.word	0x0001f6b9
   1fac0:	20004244 	.word	0x20004244

0001fac4 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
   1fac4:	b580      	push	{r7, lr}
   1fac6:	b082      	sub	sp, #8
   1fac8:	af00      	add	r7, sp, #0
   1faca:	0002      	movs	r2, r0
   1facc:	1dfb      	adds	r3, r7, #7
   1face:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
   1fad0:	2300      	movs	r3, #0
}
   1fad2:	0018      	movs	r0, r3
   1fad4:	46bd      	mov	sp, r7
   1fad6:	b002      	add	sp, #8
   1fad8:	bd80      	pop	{r7, pc}
	...

0001fadc <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1fadc:	b590      	push	{r4, r7, lr}
   1fade:	b089      	sub	sp, #36	; 0x24
   1fae0:	af02      	add	r7, sp, #8
   1fae2:	6039      	str	r1, [r7, #0]
   1fae4:	0011      	movs	r1, r2
   1fae6:	1dfb      	adds	r3, r7, #7
   1fae8:	1c02      	adds	r2, r0, #0
   1faea:	701a      	strb	r2, [r3, #0]
   1faec:	1d3b      	adds	r3, r7, #4
   1faee:	1c0a      	adds	r2, r1, #0
   1faf0:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1faf2:	230f      	movs	r3, #15
   1faf4:	18fc      	adds	r4, r7, r3
   1faf6:	1dfb      	adds	r3, r7, #7
   1faf8:	781b      	ldrb	r3, [r3, #0]
   1fafa:	0018      	movs	r0, r3
   1fafc:	4b29      	ldr	r3, [pc, #164]	; (1fba4 <sd_mmc_init_read_blocks+0xc8>)
   1fafe:	4798      	blx	r3
   1fb00:	0003      	movs	r3, r0
   1fb02:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1fb04:	230f      	movs	r3, #15
   1fb06:	18fb      	adds	r3, r7, r3
   1fb08:	781b      	ldrb	r3, [r3, #0]
   1fb0a:	2b00      	cmp	r3, #0
   1fb0c:	d003      	beq.n	1fb16 <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
   1fb0e:	230f      	movs	r3, #15
   1fb10:	18fb      	adds	r3, r7, r3
   1fb12:	781b      	ldrb	r3, [r3, #0]
   1fb14:	e041      	b.n	1fb9a <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
   1fb16:	4b24      	ldr	r3, [pc, #144]	; (1fba8 <sd_mmc_init_read_blocks+0xcc>)
   1fb18:	4798      	blx	r3
   1fb1a:	0003      	movs	r3, r0
   1fb1c:	001a      	movs	r2, r3
   1fb1e:	2301      	movs	r3, #1
   1fb20:	4053      	eors	r3, r2
   1fb22:	b2db      	uxtb	r3, r3
   1fb24:	2b00      	cmp	r3, #0
   1fb26:	d003      	beq.n	1fb30 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
   1fb28:	4b20      	ldr	r3, [pc, #128]	; (1fbac <sd_mmc_init_read_blocks+0xd0>)
   1fb2a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1fb2c:	2305      	movs	r3, #5
   1fb2e:	e034      	b.n	1fb9a <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
   1fb30:	1d3b      	adds	r3, r7, #4
   1fb32:	881b      	ldrh	r3, [r3, #0]
   1fb34:	2b01      	cmp	r3, #1
   1fb36:	d902      	bls.n	1fb3e <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   1fb38:	4b1d      	ldr	r3, [pc, #116]	; (1fbb0 <sd_mmc_init_read_blocks+0xd4>)
   1fb3a:	617b      	str	r3, [r7, #20]
   1fb3c:	e001      	b.n	1fb42 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
   1fb3e:	4b1d      	ldr	r3, [pc, #116]	; (1fbb4 <sd_mmc_init_read_blocks+0xd8>)
   1fb40:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1fb42:	4b1d      	ldr	r3, [pc, #116]	; (1fbb8 <sd_mmc_init_read_blocks+0xdc>)
   1fb44:	681b      	ldr	r3, [r3, #0]
   1fb46:	7adb      	ldrb	r3, [r3, #11]
   1fb48:	001a      	movs	r2, r3
   1fb4a:	2308      	movs	r3, #8
   1fb4c:	4013      	ands	r3, r2
   1fb4e:	d002      	beq.n	1fb56 <sd_mmc_init_read_blocks+0x7a>
		arg = start;
   1fb50:	683b      	ldr	r3, [r7, #0]
   1fb52:	613b      	str	r3, [r7, #16]
   1fb54:	e002      	b.n	1fb5c <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1fb56:	683b      	ldr	r3, [r7, #0]
   1fb58:	025b      	lsls	r3, r3, #9
   1fb5a:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1fb5c:	1d3b      	adds	r3, r7, #4
   1fb5e:	881c      	ldrh	r4, [r3, #0]
   1fb60:	2380      	movs	r3, #128	; 0x80
   1fb62:	009a      	lsls	r2, r3, #2
   1fb64:	6939      	ldr	r1, [r7, #16]
   1fb66:	6978      	ldr	r0, [r7, #20]
   1fb68:	2301      	movs	r3, #1
   1fb6a:	9300      	str	r3, [sp, #0]
   1fb6c:	0023      	movs	r3, r4
   1fb6e:	4c13      	ldr	r4, [pc, #76]	; (1fbbc <sd_mmc_init_read_blocks+0xe0>)
   1fb70:	47a0      	blx	r4
   1fb72:	0003      	movs	r3, r0
   1fb74:	001a      	movs	r2, r3
   1fb76:	2301      	movs	r3, #1
   1fb78:	4053      	eors	r3, r2
   1fb7a:	b2db      	uxtb	r3, r3
   1fb7c:	2b00      	cmp	r3, #0
   1fb7e:	d003      	beq.n	1fb88 <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
   1fb80:	4b0a      	ldr	r3, [pc, #40]	; (1fbac <sd_mmc_init_read_blocks+0xd0>)
   1fb82:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1fb84:	2305      	movs	r3, #5
   1fb86:	e008      	b.n	1fb9a <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1fb88:	4b0d      	ldr	r3, [pc, #52]	; (1fbc0 <sd_mmc_init_read_blocks+0xe4>)
   1fb8a:	1d3a      	adds	r2, r7, #4
   1fb8c:	8812      	ldrh	r2, [r2, #0]
   1fb8e:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1fb90:	4b0c      	ldr	r3, [pc, #48]	; (1fbc4 <sd_mmc_init_read_blocks+0xe8>)
   1fb92:	1d3a      	adds	r2, r7, #4
   1fb94:	8812      	ldrh	r2, [r2, #0]
   1fb96:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1fb98:	2300      	movs	r3, #0
}
   1fb9a:	0018      	movs	r0, r3
   1fb9c:	46bd      	mov	sp, r7
   1fb9e:	b007      	add	sp, #28
   1fba0:	bd90      	pop	{r4, r7, pc}
   1fba2:	46c0      	nop			; (mov r8, r8)
   1fba4:	0001f5bd 	.word	0x0001f5bd
   1fba8:	0001f459 	.word	0x0001f459
   1fbac:	0001f6b9 	.word	0x0001f6b9
   1fbb0:	00101112 	.word	0x00101112
   1fbb4:	00081111 	.word	0x00081111
   1fbb8:	20004244 	.word	0x20004244
   1fbbc:	00020939 	.word	0x00020939
   1fbc0:	2000424a 	.word	0x2000424a
   1fbc4:	20004248 	.word	0x20004248

0001fbc8 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   1fbc8:	b580      	push	{r7, lr}
   1fbca:	b082      	sub	sp, #8
   1fbcc:	af00      	add	r7, sp, #0
   1fbce:	6078      	str	r0, [r7, #4]
   1fbd0:	000a      	movs	r2, r1
   1fbd2:	1cbb      	adds	r3, r7, #2
   1fbd4:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   1fbd6:	1cbb      	adds	r3, r7, #2
   1fbd8:	881a      	ldrh	r2, [r3, #0]
   1fbda:	687b      	ldr	r3, [r7, #4]
   1fbdc:	0011      	movs	r1, r2
   1fbde:	0018      	movs	r0, r3
   1fbe0:	4b0d      	ldr	r3, [pc, #52]	; (1fc18 <sd_mmc_start_read_blocks+0x50>)
   1fbe2:	4798      	blx	r3
   1fbe4:	0003      	movs	r3, r0
   1fbe6:	001a      	movs	r2, r3
   1fbe8:	2301      	movs	r3, #1
   1fbea:	4053      	eors	r3, r2
   1fbec:	b2db      	uxtb	r3, r3
   1fbee:	2b00      	cmp	r3, #0
   1fbf0:	d004      	beq.n	1fbfc <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1fbf2:	4b0a      	ldr	r3, [pc, #40]	; (1fc1c <sd_mmc_start_read_blocks+0x54>)
   1fbf4:	2200      	movs	r2, #0
   1fbf6:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1fbf8:	2305      	movs	r3, #5
   1fbfa:	e008      	b.n	1fc0e <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1fbfc:	4b07      	ldr	r3, [pc, #28]	; (1fc1c <sd_mmc_start_read_blocks+0x54>)
   1fbfe:	881a      	ldrh	r2, [r3, #0]
   1fc00:	1cbb      	adds	r3, r7, #2
   1fc02:	881b      	ldrh	r3, [r3, #0]
   1fc04:	1ad3      	subs	r3, r2, r3
   1fc06:	b29a      	uxth	r2, r3
   1fc08:	4b04      	ldr	r3, [pc, #16]	; (1fc1c <sd_mmc_start_read_blocks+0x54>)
   1fc0a:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1fc0c:	2300      	movs	r3, #0
}
   1fc0e:	0018      	movs	r0, r3
   1fc10:	46bd      	mov	sp, r7
   1fc12:	b002      	add	sp, #8
   1fc14:	bd80      	pop	{r7, pc}
   1fc16:	46c0      	nop			; (mov r8, r8)
   1fc18:	00020c09 	.word	0x00020c09
   1fc1c:	2000424a 	.word	0x2000424a

0001fc20 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
   1fc20:	b580      	push	{r7, lr}
   1fc22:	b082      	sub	sp, #8
   1fc24:	af00      	add	r7, sp, #0
   1fc26:	0002      	movs	r2, r0
   1fc28:	1dfb      	adds	r3, r7, #7
   1fc2a:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
   1fc2c:	4b1c      	ldr	r3, [pc, #112]	; (1fca0 <sd_mmc_wait_end_of_read_blocks+0x80>)
   1fc2e:	4798      	blx	r3
   1fc30:	0003      	movs	r3, r0
   1fc32:	001a      	movs	r2, r3
   1fc34:	2301      	movs	r3, #1
   1fc36:	4053      	eors	r3, r2
   1fc38:	b2db      	uxtb	r3, r3
   1fc3a:	2b00      	cmp	r3, #0
   1fc3c:	d001      	beq.n	1fc42 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1fc3e:	2305      	movs	r3, #5
   1fc40:	e029      	b.n	1fc96 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
   1fc42:	1dfb      	adds	r3, r7, #7
   1fc44:	781b      	ldrb	r3, [r3, #0]
   1fc46:	2b00      	cmp	r3, #0
   1fc48:	d003      	beq.n	1fc52 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1fc4a:	4b16      	ldr	r3, [pc, #88]	; (1fca4 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1fc4c:	2200      	movs	r2, #0
   1fc4e:	801a      	strh	r2, [r3, #0]
   1fc50:	e005      	b.n	1fc5e <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1fc52:	4b14      	ldr	r3, [pc, #80]	; (1fca4 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1fc54:	881b      	ldrh	r3, [r3, #0]
   1fc56:	2b00      	cmp	r3, #0
   1fc58:	d001      	beq.n	1fc5e <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
   1fc5a:	2300      	movs	r3, #0
   1fc5c:	e01b      	b.n	1fc96 <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1fc5e:	4b12      	ldr	r3, [pc, #72]	; (1fca8 <sd_mmc_wait_end_of_read_blocks+0x88>)
   1fc60:	881b      	ldrh	r3, [r3, #0]
   1fc62:	2b01      	cmp	r3, #1
   1fc64:	d103      	bne.n	1fc6e <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1fc66:	4b11      	ldr	r3, [pc, #68]	; (1fcac <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1fc68:	4798      	blx	r3
		return SD_MMC_OK;
   1fc6a:	2300      	movs	r3, #0
   1fc6c:	e013      	b.n	1fc96 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   1fc6e:	4b10      	ldr	r3, [pc, #64]	; (1fcb0 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1fc70:	2100      	movs	r1, #0
   1fc72:	0018      	movs	r0, r3
   1fc74:	4b0f      	ldr	r3, [pc, #60]	; (1fcb4 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1fc76:	4798      	blx	r3
   1fc78:	0003      	movs	r3, r0
   1fc7a:	001a      	movs	r2, r3
   1fc7c:	2301      	movs	r3, #1
   1fc7e:	4053      	eors	r3, r2
   1fc80:	b2db      	uxtb	r3, r3
   1fc82:	2b00      	cmp	r3, #0
   1fc84:	d004      	beq.n	1fc90 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   1fc86:	4b0a      	ldr	r3, [pc, #40]	; (1fcb0 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1fc88:	2100      	movs	r1, #0
   1fc8a:	0018      	movs	r0, r3
   1fc8c:	4b09      	ldr	r3, [pc, #36]	; (1fcb4 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1fc8e:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
   1fc90:	4b06      	ldr	r3, [pc, #24]	; (1fcac <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1fc92:	4798      	blx	r3
	return SD_MMC_OK;
   1fc94:	2300      	movs	r3, #0
}
   1fc96:	0018      	movs	r0, r3
   1fc98:	46bd      	mov	sp, r7
   1fc9a:	b002      	add	sp, #8
   1fc9c:	bd80      	pop	{r7, pc}
   1fc9e:	46c0      	nop			; (mov r8, r8)
   1fca0:	00020cad 	.word	0x00020cad
   1fca4:	2000424a 	.word	0x2000424a
   1fca8:	20004248 	.word	0x20004248
   1fcac:	0001f6b9 	.word	0x0001f6b9
   1fcb0:	0000310c 	.word	0x0000310c
   1fcb4:	00020911 	.word	0x00020911

0001fcb8 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1fcb8:	b590      	push	{r4, r7, lr}
   1fcba:	b089      	sub	sp, #36	; 0x24
   1fcbc:	af02      	add	r7, sp, #8
   1fcbe:	6039      	str	r1, [r7, #0]
   1fcc0:	0011      	movs	r1, r2
   1fcc2:	1dfb      	adds	r3, r7, #7
   1fcc4:	1c02      	adds	r2, r0, #0
   1fcc6:	701a      	strb	r2, [r3, #0]
   1fcc8:	1d3b      	adds	r3, r7, #4
   1fcca:	1c0a      	adds	r2, r1, #0
   1fccc:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1fcce:	230f      	movs	r3, #15
   1fcd0:	18fc      	adds	r4, r7, r3
   1fcd2:	1dfb      	adds	r3, r7, #7
   1fcd4:	781b      	ldrb	r3, [r3, #0]
   1fcd6:	0018      	movs	r0, r3
   1fcd8:	4b28      	ldr	r3, [pc, #160]	; (1fd7c <sd_mmc_init_write_blocks+0xc4>)
   1fcda:	4798      	blx	r3
   1fcdc:	0003      	movs	r3, r0
   1fcde:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1fce0:	230f      	movs	r3, #15
   1fce2:	18fb      	adds	r3, r7, r3
   1fce4:	781b      	ldrb	r3, [r3, #0]
   1fce6:	2b00      	cmp	r3, #0
   1fce8:	d003      	beq.n	1fcf2 <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
   1fcea:	230f      	movs	r3, #15
   1fcec:	18fb      	adds	r3, r7, r3
   1fcee:	781b      	ldrb	r3, [r3, #0]
   1fcf0:	e03f      	b.n	1fd72 <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
   1fcf2:	1dfb      	adds	r3, r7, #7
   1fcf4:	781b      	ldrb	r3, [r3, #0]
   1fcf6:	0018      	movs	r0, r3
   1fcf8:	4b21      	ldr	r3, [pc, #132]	; (1fd80 <sd_mmc_init_write_blocks+0xc8>)
   1fcfa:	4798      	blx	r3
   1fcfc:	1e03      	subs	r3, r0, #0
   1fcfe:	d003      	beq.n	1fd08 <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
   1fd00:	4b20      	ldr	r3, [pc, #128]	; (1fd84 <sd_mmc_init_write_blocks+0xcc>)
   1fd02:	4798      	blx	r3
		return SD_MMC_ERR_WP;
   1fd04:	2307      	movs	r3, #7
   1fd06:	e034      	b.n	1fd72 <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
   1fd08:	1d3b      	adds	r3, r7, #4
   1fd0a:	881b      	ldrh	r3, [r3, #0]
   1fd0c:	2b01      	cmp	r3, #1
   1fd0e:	d902      	bls.n	1fd16 <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   1fd10:	4b1d      	ldr	r3, [pc, #116]	; (1fd88 <sd_mmc_init_write_blocks+0xd0>)
   1fd12:	617b      	str	r3, [r7, #20]
   1fd14:	e001      	b.n	1fd1a <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
   1fd16:	4b1d      	ldr	r3, [pc, #116]	; (1fd8c <sd_mmc_init_write_blocks+0xd4>)
   1fd18:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1fd1a:	4b1d      	ldr	r3, [pc, #116]	; (1fd90 <sd_mmc_init_write_blocks+0xd8>)
   1fd1c:	681b      	ldr	r3, [r3, #0]
   1fd1e:	7adb      	ldrb	r3, [r3, #11]
   1fd20:	001a      	movs	r2, r3
   1fd22:	2308      	movs	r3, #8
   1fd24:	4013      	ands	r3, r2
   1fd26:	d002      	beq.n	1fd2e <sd_mmc_init_write_blocks+0x76>
		arg = start;
   1fd28:	683b      	ldr	r3, [r7, #0]
   1fd2a:	613b      	str	r3, [r7, #16]
   1fd2c:	e002      	b.n	1fd34 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1fd2e:	683b      	ldr	r3, [r7, #0]
   1fd30:	025b      	lsls	r3, r3, #9
   1fd32:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1fd34:	1d3b      	adds	r3, r7, #4
   1fd36:	881c      	ldrh	r4, [r3, #0]
   1fd38:	2380      	movs	r3, #128	; 0x80
   1fd3a:	009a      	lsls	r2, r3, #2
   1fd3c:	6939      	ldr	r1, [r7, #16]
   1fd3e:	6978      	ldr	r0, [r7, #20]
   1fd40:	2301      	movs	r3, #1
   1fd42:	9300      	str	r3, [sp, #0]
   1fd44:	0023      	movs	r3, r4
   1fd46:	4c13      	ldr	r4, [pc, #76]	; (1fd94 <sd_mmc_init_write_blocks+0xdc>)
   1fd48:	47a0      	blx	r4
   1fd4a:	0003      	movs	r3, r0
   1fd4c:	001a      	movs	r2, r3
   1fd4e:	2301      	movs	r3, #1
   1fd50:	4053      	eors	r3, r2
   1fd52:	b2db      	uxtb	r3, r3
   1fd54:	2b00      	cmp	r3, #0
   1fd56:	d003      	beq.n	1fd60 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
   1fd58:	4b0a      	ldr	r3, [pc, #40]	; (1fd84 <sd_mmc_init_write_blocks+0xcc>)
   1fd5a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1fd5c:	2305      	movs	r3, #5
   1fd5e:	e008      	b.n	1fd72 <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1fd60:	4b0d      	ldr	r3, [pc, #52]	; (1fd98 <sd_mmc_init_write_blocks+0xe0>)
   1fd62:	1d3a      	adds	r2, r7, #4
   1fd64:	8812      	ldrh	r2, [r2, #0]
   1fd66:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1fd68:	4b0c      	ldr	r3, [pc, #48]	; (1fd9c <sd_mmc_init_write_blocks+0xe4>)
   1fd6a:	1d3a      	adds	r2, r7, #4
   1fd6c:	8812      	ldrh	r2, [r2, #0]
   1fd6e:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1fd70:	2300      	movs	r3, #0
}
   1fd72:	0018      	movs	r0, r3
   1fd74:	46bd      	mov	sp, r7
   1fd76:	b007      	add	sp, #28
   1fd78:	bd90      	pop	{r4, r7, pc}
   1fd7a:	46c0      	nop			; (mov r8, r8)
   1fd7c:	0001f5bd 	.word	0x0001f5bd
   1fd80:	0001fac5 	.word	0x0001fac5
   1fd84:	0001f6b9 	.word	0x0001f6b9
   1fd88:	00109119 	.word	0x00109119
   1fd8c:	00089118 	.word	0x00089118
   1fd90:	20004244 	.word	0x20004244
   1fd94:	00020939 	.word	0x00020939
   1fd98:	2000424a 	.word	0x2000424a
   1fd9c:	20004248 	.word	0x20004248

0001fda0 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   1fda0:	b580      	push	{r7, lr}
   1fda2:	b082      	sub	sp, #8
   1fda4:	af00      	add	r7, sp, #0
   1fda6:	6078      	str	r0, [r7, #4]
   1fda8:	000a      	movs	r2, r1
   1fdaa:	1cbb      	adds	r3, r7, #2
   1fdac:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   1fdae:	1cbb      	adds	r3, r7, #2
   1fdb0:	881a      	ldrh	r2, [r3, #0]
   1fdb2:	687b      	ldr	r3, [r7, #4]
   1fdb4:	0011      	movs	r1, r2
   1fdb6:	0018      	movs	r0, r3
   1fdb8:	4b0d      	ldr	r3, [pc, #52]	; (1fdf0 <sd_mmc_start_write_blocks+0x50>)
   1fdba:	4798      	blx	r3
   1fdbc:	0003      	movs	r3, r0
   1fdbe:	001a      	movs	r2, r3
   1fdc0:	2301      	movs	r3, #1
   1fdc2:	4053      	eors	r3, r2
   1fdc4:	b2db      	uxtb	r3, r3
   1fdc6:	2b00      	cmp	r3, #0
   1fdc8:	d004      	beq.n	1fdd4 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1fdca:	4b0a      	ldr	r3, [pc, #40]	; (1fdf4 <sd_mmc_start_write_blocks+0x54>)
   1fdcc:	2200      	movs	r2, #0
   1fdce:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1fdd0:	2305      	movs	r3, #5
   1fdd2:	e008      	b.n	1fde6 <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1fdd4:	4b07      	ldr	r3, [pc, #28]	; (1fdf4 <sd_mmc_start_write_blocks+0x54>)
   1fdd6:	881a      	ldrh	r2, [r3, #0]
   1fdd8:	1cbb      	adds	r3, r7, #2
   1fdda:	881b      	ldrh	r3, [r3, #0]
   1fddc:	1ad3      	subs	r3, r2, r3
   1fdde:	b29a      	uxth	r2, r3
   1fde0:	4b04      	ldr	r3, [pc, #16]	; (1fdf4 <sd_mmc_start_write_blocks+0x54>)
   1fde2:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1fde4:	2300      	movs	r3, #0
}
   1fde6:	0018      	movs	r0, r3
   1fde8:	46bd      	mov	sp, r7
   1fdea:	b002      	add	sp, #8
   1fdec:	bd80      	pop	{r7, pc}
   1fdee:	46c0      	nop			; (mov r8, r8)
   1fdf0:	00020cb9 	.word	0x00020cb9
   1fdf4:	2000424a 	.word	0x2000424a

0001fdf8 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
   1fdf8:	b580      	push	{r7, lr}
   1fdfa:	b082      	sub	sp, #8
   1fdfc:	af00      	add	r7, sp, #0
   1fdfe:	0002      	movs	r2, r0
   1fe00:	1dfb      	adds	r3, r7, #7
   1fe02:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
   1fe04:	4b13      	ldr	r3, [pc, #76]	; (1fe54 <sd_mmc_wait_end_of_write_blocks+0x5c>)
   1fe06:	4798      	blx	r3
   1fe08:	0003      	movs	r3, r0
   1fe0a:	001a      	movs	r2, r3
   1fe0c:	2301      	movs	r3, #1
   1fe0e:	4053      	eors	r3, r2
   1fe10:	b2db      	uxtb	r3, r3
   1fe12:	2b00      	cmp	r3, #0
   1fe14:	d001      	beq.n	1fe1a <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1fe16:	2305      	movs	r3, #5
   1fe18:	e018      	b.n	1fe4c <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
   1fe1a:	1dfb      	adds	r3, r7, #7
   1fe1c:	781b      	ldrb	r3, [r3, #0]
   1fe1e:	2b00      	cmp	r3, #0
   1fe20:	d003      	beq.n	1fe2a <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1fe22:	4b0d      	ldr	r3, [pc, #52]	; (1fe58 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1fe24:	2200      	movs	r2, #0
   1fe26:	801a      	strh	r2, [r3, #0]
   1fe28:	e005      	b.n	1fe36 <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1fe2a:	4b0b      	ldr	r3, [pc, #44]	; (1fe58 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1fe2c:	881b      	ldrh	r3, [r3, #0]
   1fe2e:	2b00      	cmp	r3, #0
   1fe30:	d001      	beq.n	1fe36 <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
   1fe32:	2300      	movs	r3, #0
   1fe34:	e00a      	b.n	1fe4c <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1fe36:	4b09      	ldr	r3, [pc, #36]	; (1fe5c <sd_mmc_wait_end_of_write_blocks+0x64>)
   1fe38:	881b      	ldrh	r3, [r3, #0]
   1fe3a:	2b01      	cmp	r3, #1
   1fe3c:	d103      	bne.n	1fe46 <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1fe3e:	4b08      	ldr	r3, [pc, #32]	; (1fe60 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1fe40:	4798      	blx	r3
		return SD_MMC_OK;
   1fe42:	2300      	movs	r3, #0
   1fe44:	e002      	b.n	1fe4c <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
   1fe46:	4b06      	ldr	r3, [pc, #24]	; (1fe60 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1fe48:	4798      	blx	r3
	return SD_MMC_OK;
   1fe4a:	2300      	movs	r3, #0
}
   1fe4c:	0018      	movs	r0, r3
   1fe4e:	46bd      	mov	sp, r7
   1fe50:	b002      	add	sp, #8
   1fe52:	bd80      	pop	{r7, pc}
   1fe54:	00020d79 	.word	0x00020d79
   1fe58:	2000424a 	.word	0x2000424a
   1fe5c:	20004248 	.word	0x20004248
   1fe60:	0001f6b9 	.word	0x0001f6b9

0001fe64 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   1fe64:	b580      	push	{r7, lr}
   1fe66:	b082      	sub	sp, #8
   1fe68:	af00      	add	r7, sp, #0
   1fe6a:	0002      	movs	r2, r0
   1fe6c:	1dfb      	adds	r3, r7, #7
   1fe6e:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
   1fe70:	1dfb      	adds	r3, r7, #7
   1fe72:	781b      	ldrb	r3, [r3, #0]
   1fe74:	0018      	movs	r0, r3
   1fe76:	4b16      	ldr	r3, [pc, #88]	; (1fed0 <sd_mmc_test_unit_ready+0x6c>)
   1fe78:	4798      	blx	r3
   1fe7a:	0003      	movs	r3, r0
   1fe7c:	2b01      	cmp	r3, #1
   1fe7e:	d019      	beq.n	1feb4 <sd_mmc_test_unit_ready+0x50>
   1fe80:	2b02      	cmp	r3, #2
   1fe82:	d019      	beq.n	1feb8 <sd_mmc_test_unit_ready+0x54>
   1fe84:	2b00      	cmp	r3, #0
   1fe86:	d11e      	bne.n	1fec6 <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
   1fe88:	1dfb      	adds	r3, r7, #7
   1fe8a:	781b      	ldrb	r3, [r3, #0]
   1fe8c:	4a11      	ldr	r2, [pc, #68]	; (1fed4 <sd_mmc_test_unit_ready+0x70>)
   1fe8e:	5cd3      	ldrb	r3, [r2, r3]
   1fe90:	2b00      	cmp	r3, #0
   1fe92:	d001      	beq.n	1fe98 <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
   1fe94:	2302      	movs	r3, #2
   1fe96:	e017      	b.n	1fec8 <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   1fe98:	1dfb      	adds	r3, r7, #7
   1fe9a:	781b      	ldrb	r3, [r3, #0]
   1fe9c:	0018      	movs	r0, r3
   1fe9e:	4b0e      	ldr	r3, [pc, #56]	; (1fed8 <sd_mmc_test_unit_ready+0x74>)
   1fea0:	4798      	blx	r3
   1fea2:	0003      	movs	r3, r0
   1fea4:	001a      	movs	r2, r3
   1fea6:	2303      	movs	r3, #3
   1fea8:	4013      	ands	r3, r2
   1feaa:	d001      	beq.n	1feb0 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
   1feac:	2300      	movs	r3, #0
   1feae:	e00b      	b.n	1fec8 <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
   1feb0:	2302      	movs	r3, #2
   1feb2:	e009      	b.n	1fec8 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
   1feb4:	2303      	movs	r3, #3
   1feb6:	e007      	b.n	1fec8 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
   1feb8:	1dfb      	adds	r3, r7, #7
   1feba:	781b      	ldrb	r3, [r3, #0]
   1febc:	4a05      	ldr	r2, [pc, #20]	; (1fed4 <sd_mmc_test_unit_ready+0x70>)
   1febe:	2100      	movs	r1, #0
   1fec0:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
   1fec2:	2302      	movs	r3, #2
   1fec4:	e000      	b.n	1fec8 <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
   1fec6:	2301      	movs	r3, #1
	}
}
   1fec8:	0018      	movs	r0, r3
   1feca:	46bd      	mov	sp, r7
   1fecc:	b002      	add	sp, #8
   1fece:	bd80      	pop	{r7, pc}
   1fed0:	0001f9d9 	.word	0x0001f9d9
   1fed4:	2000424c 	.word	0x2000424c
   1fed8:	0001fa4d 	.word	0x0001fa4d

0001fedc <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   1fedc:	b580      	push	{r7, lr}
   1fede:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
   1fee0:	2000      	movs	r0, #0
   1fee2:	4b03      	ldr	r3, [pc, #12]	; (1fef0 <sd_mmc_test_unit_ready_0+0x14>)
   1fee4:	4798      	blx	r3
   1fee6:	0003      	movs	r3, r0
}
   1fee8:	0018      	movs	r0, r3
   1feea:	46bd      	mov	sp, r7
   1feec:	bd80      	pop	{r7, pc}
   1feee:	46c0      	nop			; (mov r8, r8)
   1fef0:	0001fe65 	.word	0x0001fe65

0001fef4 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   1fef4:	b580      	push	{r7, lr}
   1fef6:	b082      	sub	sp, #8
   1fef8:	af00      	add	r7, sp, #0
   1fefa:	0002      	movs	r2, r0
   1fefc:	6039      	str	r1, [r7, #0]
   1fefe:	1dfb      	adds	r3, r7, #7
   1ff00:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   1ff02:	1dfb      	adds	r3, r7, #7
   1ff04:	781b      	ldrb	r3, [r3, #0]
   1ff06:	0018      	movs	r0, r3
   1ff08:	4b08      	ldr	r3, [pc, #32]	; (1ff2c <sd_mmc_read_capacity+0x38>)
   1ff0a:	4798      	blx	r3
   1ff0c:	0003      	movs	r3, r0
   1ff0e:	005b      	lsls	r3, r3, #1
   1ff10:	1e5a      	subs	r2, r3, #1
   1ff12:	683b      	ldr	r3, [r7, #0]
   1ff14:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
   1ff16:	1dfb      	adds	r3, r7, #7
   1ff18:	781b      	ldrb	r3, [r3, #0]
   1ff1a:	0018      	movs	r0, r3
   1ff1c:	4b04      	ldr	r3, [pc, #16]	; (1ff30 <sd_mmc_read_capacity+0x3c>)
   1ff1e:	4798      	blx	r3
   1ff20:	0003      	movs	r3, r0
}
   1ff22:	0018      	movs	r0, r3
   1ff24:	46bd      	mov	sp, r7
   1ff26:	b002      	add	sp, #8
   1ff28:	bd80      	pop	{r7, pc}
   1ff2a:	46c0      	nop			; (mov r8, r8)
   1ff2c:	0001fa89 	.word	0x0001fa89
   1ff30:	0001fe65 	.word	0x0001fe65

0001ff34 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   1ff34:	b580      	push	{r7, lr}
   1ff36:	b082      	sub	sp, #8
   1ff38:	af00      	add	r7, sp, #0
   1ff3a:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
   1ff3c:	687b      	ldr	r3, [r7, #4]
   1ff3e:	0019      	movs	r1, r3
   1ff40:	2000      	movs	r0, #0
   1ff42:	4b03      	ldr	r3, [pc, #12]	; (1ff50 <sd_mmc_read_capacity_0+0x1c>)
   1ff44:	4798      	blx	r3
   1ff46:	0003      	movs	r3, r0
}
   1ff48:	0018      	movs	r0, r3
   1ff4a:	46bd      	mov	sp, r7
   1ff4c:	b002      	add	sp, #8
   1ff4e:	bd80      	pop	{r7, pc}
   1ff50:	0001fef5 	.word	0x0001fef5

0001ff54 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
   1ff54:	b580      	push	{r7, lr}
   1ff56:	b082      	sub	sp, #8
   1ff58:	af00      	add	r7, sp, #0
   1ff5a:	0002      	movs	r2, r0
   1ff5c:	1dfb      	adds	r3, r7, #7
   1ff5e:	701a      	strb	r2, [r3, #0]
   1ff60:	1dbb      	adds	r3, r7, #6
   1ff62:	1c0a      	adds	r2, r1, #0
   1ff64:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
   1ff66:	1dfb      	adds	r3, r7, #7
   1ff68:	781b      	ldrb	r3, [r3, #0]
   1ff6a:	4a04      	ldr	r2, [pc, #16]	; (1ff7c <sd_mmc_unload+0x28>)
   1ff6c:	1db9      	adds	r1, r7, #6
   1ff6e:	7809      	ldrb	r1, [r1, #0]
   1ff70:	54d1      	strb	r1, [r2, r3]
	return true;
   1ff72:	2301      	movs	r3, #1
}
   1ff74:	0018      	movs	r0, r3
   1ff76:	46bd      	mov	sp, r7
   1ff78:	b002      	add	sp, #8
   1ff7a:	bd80      	pop	{r7, pc}
   1ff7c:	2000424c 	.word	0x2000424c

0001ff80 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
   1ff80:	b580      	push	{r7, lr}
   1ff82:	b082      	sub	sp, #8
   1ff84:	af00      	add	r7, sp, #0
   1ff86:	0002      	movs	r2, r0
   1ff88:	1dfb      	adds	r3, r7, #7
   1ff8a:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
   1ff8c:	1dfb      	adds	r3, r7, #7
   1ff8e:	781b      	ldrb	r3, [r3, #0]
   1ff90:	0019      	movs	r1, r3
   1ff92:	2000      	movs	r0, #0
   1ff94:	4b03      	ldr	r3, [pc, #12]	; (1ffa4 <sd_mmc_unload_0+0x24>)
   1ff96:	4798      	blx	r3
   1ff98:	0003      	movs	r3, r0
}
   1ff9a:	0018      	movs	r0, r3
   1ff9c:	46bd      	mov	sp, r7
   1ff9e:	b002      	add	sp, #8
   1ffa0:	bd80      	pop	{r7, pc}
   1ffa2:	46c0      	nop			; (mov r8, r8)
   1ffa4:	0001ff55 	.word	0x0001ff55

0001ffa8 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
   1ffa8:	b580      	push	{r7, lr}
   1ffaa:	b082      	sub	sp, #8
   1ffac:	af00      	add	r7, sp, #0
   1ffae:	0002      	movs	r2, r0
   1ffb0:	1dfb      	adds	r3, r7, #7
   1ffb2:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
   1ffb4:	1dfb      	adds	r3, r7, #7
   1ffb6:	781b      	ldrb	r3, [r3, #0]
   1ffb8:	0018      	movs	r0, r3
   1ffba:	4b03      	ldr	r3, [pc, #12]	; (1ffc8 <sd_mmc_wr_protect+0x20>)
   1ffbc:	4798      	blx	r3
   1ffbe:	0003      	movs	r3, r0
}
   1ffc0:	0018      	movs	r0, r3
   1ffc2:	46bd      	mov	sp, r7
   1ffc4:	b002      	add	sp, #8
   1ffc6:	bd80      	pop	{r7, pc}
   1ffc8:	0001fac5 	.word	0x0001fac5

0001ffcc <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
   1ffcc:	b580      	push	{r7, lr}
   1ffce:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
   1ffd0:	2000      	movs	r0, #0
   1ffd2:	4b03      	ldr	r3, [pc, #12]	; (1ffe0 <sd_mmc_wr_protect_0+0x14>)
   1ffd4:	4798      	blx	r3
   1ffd6:	0003      	movs	r3, r0
}
   1ffd8:	0018      	movs	r0, r3
   1ffda:	46bd      	mov	sp, r7
   1ffdc:	bd80      	pop	{r7, pc}
   1ffde:	46c0      	nop			; (mov r8, r8)
   1ffe0:	0001ffa9 	.word	0x0001ffa9

0001ffe4 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
   1ffe4:	b580      	push	{r7, lr}
   1ffe6:	b082      	sub	sp, #8
   1ffe8:	af00      	add	r7, sp, #0
   1ffea:	0002      	movs	r2, r0
   1ffec:	1dfb      	adds	r3, r7, #7
   1ffee:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
   1fff0:	2301      	movs	r3, #1
}
   1fff2:	0018      	movs	r0, r3
   1fff4:	46bd      	mov	sp, r7
   1fff6:	b002      	add	sp, #8
   1fff8:	bd80      	pop	{r7, pc}
	...

0001fffc <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
   1fffc:	b580      	push	{r7, lr}
   1fffe:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
   20000:	2000      	movs	r0, #0
   20002:	4b03      	ldr	r3, [pc, #12]	; (20010 <sd_mmc_removal_0+0x14>)
   20004:	4798      	blx	r3
   20006:	0003      	movs	r3, r0
}
   20008:	0018      	movs	r0, r3
   2000a:	46bd      	mov	sp, r7
   2000c:	bd80      	pop	{r7, pc}
   2000e:	46c0      	nop			; (mov r8, r8)
   20010:	0001ffe5 	.word	0x0001ffe5

00020014 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
   20014:	b580      	push	{r7, lr}
   20016:	b084      	sub	sp, #16
   20018:	af00      	add	r7, sp, #0
   2001a:	60b9      	str	r1, [r7, #8]
   2001c:	607a      	str	r2, [r7, #4]
   2001e:	230f      	movs	r3, #15
   20020:	18fb      	adds	r3, r7, r3
   20022:	1c02      	adds	r2, r0, #0
   20024:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   20026:	68b9      	ldr	r1, [r7, #8]
   20028:	230f      	movs	r3, #15
   2002a:	18fb      	adds	r3, r7, r3
   2002c:	781b      	ldrb	r3, [r3, #0]
   2002e:	2201      	movs	r2, #1
   20030:	0018      	movs	r0, r3
   20032:	4b10      	ldr	r3, [pc, #64]	; (20074 <sd_mmc_mem_2_ram+0x60>)
   20034:	4798      	blx	r3
   20036:	1e03      	subs	r3, r0, #0
   20038:	d005      	beq.n	20046 <sd_mmc_mem_2_ram+0x32>
   2003a:	2b02      	cmp	r3, #2
   2003c:	d101      	bne.n	20042 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   2003e:	2302      	movs	r3, #2
   20040:	e013      	b.n	2006a <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
   20042:	2301      	movs	r3, #1
   20044:	e011      	b.n	2006a <sd_mmc_mem_2_ram+0x56>
		break;
   20046:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   20048:	687b      	ldr	r3, [r7, #4]
   2004a:	2101      	movs	r1, #1
   2004c:	0018      	movs	r0, r3
   2004e:	4b0a      	ldr	r3, [pc, #40]	; (20078 <sd_mmc_mem_2_ram+0x64>)
   20050:	4798      	blx	r3
   20052:	1e03      	subs	r3, r0, #0
   20054:	d001      	beq.n	2005a <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
   20056:	2301      	movs	r3, #1
   20058:	e007      	b.n	2006a <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   2005a:	2000      	movs	r0, #0
   2005c:	4b07      	ldr	r3, [pc, #28]	; (2007c <sd_mmc_mem_2_ram+0x68>)
   2005e:	4798      	blx	r3
   20060:	1e03      	subs	r3, r0, #0
   20062:	d001      	beq.n	20068 <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
   20064:	2301      	movs	r3, #1
   20066:	e000      	b.n	2006a <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
   20068:	2300      	movs	r3, #0
}
   2006a:	0018      	movs	r0, r3
   2006c:	46bd      	mov	sp, r7
   2006e:	b004      	add	sp, #16
   20070:	bd80      	pop	{r7, pc}
   20072:	46c0      	nop			; (mov r8, r8)
   20074:	0001fadd 	.word	0x0001fadd
   20078:	0001fbc9 	.word	0x0001fbc9
   2007c:	0001fc21 	.word	0x0001fc21

00020080 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
   20080:	b580      	push	{r7, lr}
   20082:	b082      	sub	sp, #8
   20084:	af00      	add	r7, sp, #0
   20086:	6078      	str	r0, [r7, #4]
   20088:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
   2008a:	683a      	ldr	r2, [r7, #0]
   2008c:	687b      	ldr	r3, [r7, #4]
   2008e:	0019      	movs	r1, r3
   20090:	2000      	movs	r0, #0
   20092:	4b03      	ldr	r3, [pc, #12]	; (200a0 <sd_mmc_mem_2_ram_0+0x20>)
   20094:	4798      	blx	r3
   20096:	0003      	movs	r3, r0
}
   20098:	0018      	movs	r0, r3
   2009a:	46bd      	mov	sp, r7
   2009c:	b002      	add	sp, #8
   2009e:	bd80      	pop	{r7, pc}
   200a0:	00020015 	.word	0x00020015

000200a4 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
   200a4:	b580      	push	{r7, lr}
   200a6:	b084      	sub	sp, #16
   200a8:	af00      	add	r7, sp, #0
   200aa:	60b9      	str	r1, [r7, #8]
   200ac:	607a      	str	r2, [r7, #4]
   200ae:	230f      	movs	r3, #15
   200b0:	18fb      	adds	r3, r7, r3
   200b2:	1c02      	adds	r2, r0, #0
   200b4:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   200b6:	68b9      	ldr	r1, [r7, #8]
   200b8:	230f      	movs	r3, #15
   200ba:	18fb      	adds	r3, r7, r3
   200bc:	781b      	ldrb	r3, [r3, #0]
   200be:	2201      	movs	r2, #1
   200c0:	0018      	movs	r0, r3
   200c2:	4b10      	ldr	r3, [pc, #64]	; (20104 <sd_mmc_ram_2_mem+0x60>)
   200c4:	4798      	blx	r3
   200c6:	1e03      	subs	r3, r0, #0
   200c8:	d005      	beq.n	200d6 <sd_mmc_ram_2_mem+0x32>
   200ca:	2b02      	cmp	r3, #2
   200cc:	d101      	bne.n	200d2 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   200ce:	2302      	movs	r3, #2
   200d0:	e013      	b.n	200fa <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
   200d2:	2301      	movs	r3, #1
   200d4:	e011      	b.n	200fa <sd_mmc_ram_2_mem+0x56>
		break;
   200d6:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   200d8:	687b      	ldr	r3, [r7, #4]
   200da:	2101      	movs	r1, #1
   200dc:	0018      	movs	r0, r3
   200de:	4b0a      	ldr	r3, [pc, #40]	; (20108 <sd_mmc_ram_2_mem+0x64>)
   200e0:	4798      	blx	r3
   200e2:	1e03      	subs	r3, r0, #0
   200e4:	d001      	beq.n	200ea <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
   200e6:	2301      	movs	r3, #1
   200e8:	e007      	b.n	200fa <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   200ea:	2000      	movs	r0, #0
   200ec:	4b07      	ldr	r3, [pc, #28]	; (2010c <sd_mmc_ram_2_mem+0x68>)
   200ee:	4798      	blx	r3
   200f0:	1e03      	subs	r3, r0, #0
   200f2:	d001      	beq.n	200f8 <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
   200f4:	2301      	movs	r3, #1
   200f6:	e000      	b.n	200fa <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
   200f8:	2300      	movs	r3, #0
}
   200fa:	0018      	movs	r0, r3
   200fc:	46bd      	mov	sp, r7
   200fe:	b004      	add	sp, #16
   20100:	bd80      	pop	{r7, pc}
   20102:	46c0      	nop			; (mov r8, r8)
   20104:	0001fcb9 	.word	0x0001fcb9
   20108:	0001fda1 	.word	0x0001fda1
   2010c:	0001fdf9 	.word	0x0001fdf9

00020110 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
   20110:	b580      	push	{r7, lr}
   20112:	b082      	sub	sp, #8
   20114:	af00      	add	r7, sp, #0
   20116:	6078      	str	r0, [r7, #4]
   20118:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
   2011a:	683a      	ldr	r2, [r7, #0]
   2011c:	687b      	ldr	r3, [r7, #4]
   2011e:	0019      	movs	r1, r3
   20120:	2000      	movs	r0, #0
   20122:	4b03      	ldr	r3, [pc, #12]	; (20130 <sd_mmc_ram_2_mem_0+0x20>)
   20124:	4798      	blx	r3
   20126:	0003      	movs	r3, r0
}
   20128:	0018      	movs	r0, r3
   2012a:	46bd      	mov	sp, r7
   2012c:	b002      	add	sp, #8
   2012e:	bd80      	pop	{r7, pc}
   20130:	000200a5 	.word	0x000200a5

00020134 <system_pinmux_get_group_from_gpio_pin>:
{
   20134:	b580      	push	{r7, lr}
   20136:	b084      	sub	sp, #16
   20138:	af00      	add	r7, sp, #0
   2013a:	0002      	movs	r2, r0
   2013c:	1dfb      	adds	r3, r7, #7
   2013e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   20140:	230f      	movs	r3, #15
   20142:	18fb      	adds	r3, r7, r3
   20144:	1dfa      	adds	r2, r7, #7
   20146:	7812      	ldrb	r2, [r2, #0]
   20148:	09d2      	lsrs	r2, r2, #7
   2014a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   2014c:	230e      	movs	r3, #14
   2014e:	18fb      	adds	r3, r7, r3
   20150:	1dfa      	adds	r2, r7, #7
   20152:	7812      	ldrb	r2, [r2, #0]
   20154:	0952      	lsrs	r2, r2, #5
   20156:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   20158:	4b0d      	ldr	r3, [pc, #52]	; (20190 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2015a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   2015c:	230f      	movs	r3, #15
   2015e:	18fb      	adds	r3, r7, r3
   20160:	781b      	ldrb	r3, [r3, #0]
   20162:	2b00      	cmp	r3, #0
   20164:	d10f      	bne.n	20186 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   20166:	230f      	movs	r3, #15
   20168:	18fb      	adds	r3, r7, r3
   2016a:	781b      	ldrb	r3, [r3, #0]
   2016c:	009b      	lsls	r3, r3, #2
   2016e:	2210      	movs	r2, #16
   20170:	4694      	mov	ip, r2
   20172:	44bc      	add	ip, r7
   20174:	4463      	add	r3, ip
   20176:	3b08      	subs	r3, #8
   20178:	681a      	ldr	r2, [r3, #0]
   2017a:	230e      	movs	r3, #14
   2017c:	18fb      	adds	r3, r7, r3
   2017e:	781b      	ldrb	r3, [r3, #0]
   20180:	01db      	lsls	r3, r3, #7
   20182:	18d3      	adds	r3, r2, r3
   20184:	e000      	b.n	20188 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   20186:	2300      	movs	r3, #0
}
   20188:	0018      	movs	r0, r3
   2018a:	46bd      	mov	sp, r7
   2018c:	b004      	add	sp, #16
   2018e:	bd80      	pop	{r7, pc}
   20190:	41004400 	.word	0x41004400

00020194 <system_interrupt_enable>:
{
   20194:	b580      	push	{r7, lr}
   20196:	b082      	sub	sp, #8
   20198:	af00      	add	r7, sp, #0
   2019a:	0002      	movs	r2, r0
   2019c:	1dfb      	adds	r3, r7, #7
   2019e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   201a0:	4b06      	ldr	r3, [pc, #24]	; (201bc <system_interrupt_enable+0x28>)
   201a2:	1dfa      	adds	r2, r7, #7
   201a4:	7812      	ldrb	r2, [r2, #0]
   201a6:	0011      	movs	r1, r2
   201a8:	221f      	movs	r2, #31
   201aa:	400a      	ands	r2, r1
   201ac:	2101      	movs	r1, #1
   201ae:	4091      	lsls	r1, r2
   201b0:	000a      	movs	r2, r1
   201b2:	601a      	str	r2, [r3, #0]
}
   201b4:	46c0      	nop			; (mov r8, r8)
   201b6:	46bd      	mov	sp, r7
   201b8:	b002      	add	sp, #8
   201ba:	bd80      	pop	{r7, pc}
   201bc:	e000e100 	.word	0xe000e100

000201c0 <port_get_group_from_gpio_pin>:
{
   201c0:	b580      	push	{r7, lr}
   201c2:	b082      	sub	sp, #8
   201c4:	af00      	add	r7, sp, #0
   201c6:	0002      	movs	r2, r0
   201c8:	1dfb      	adds	r3, r7, #7
   201ca:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   201cc:	1dfb      	adds	r3, r7, #7
   201ce:	781b      	ldrb	r3, [r3, #0]
   201d0:	0018      	movs	r0, r3
   201d2:	4b03      	ldr	r3, [pc, #12]	; (201e0 <port_get_group_from_gpio_pin+0x20>)
   201d4:	4798      	blx	r3
   201d6:	0003      	movs	r3, r0
}
   201d8:	0018      	movs	r0, r3
   201da:	46bd      	mov	sp, r7
   201dc:	b002      	add	sp, #8
   201de:	bd80      	pop	{r7, pc}
   201e0:	00020135 	.word	0x00020135

000201e4 <port_get_config_defaults>:
{
   201e4:	b580      	push	{r7, lr}
   201e6:	b082      	sub	sp, #8
   201e8:	af00      	add	r7, sp, #0
   201ea:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   201ec:	687b      	ldr	r3, [r7, #4]
   201ee:	2200      	movs	r2, #0
   201f0:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   201f2:	687b      	ldr	r3, [r7, #4]
   201f4:	2201      	movs	r2, #1
   201f6:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   201f8:	687b      	ldr	r3, [r7, #4]
   201fa:	2200      	movs	r2, #0
   201fc:	709a      	strb	r2, [r3, #2]
}
   201fe:	46c0      	nop			; (mov r8, r8)
   20200:	46bd      	mov	sp, r7
   20202:	b002      	add	sp, #8
   20204:	bd80      	pop	{r7, pc}
	...

00020208 <port_pin_set_output_level>:
{
   20208:	b580      	push	{r7, lr}
   2020a:	b084      	sub	sp, #16
   2020c:	af00      	add	r7, sp, #0
   2020e:	0002      	movs	r2, r0
   20210:	1dfb      	adds	r3, r7, #7
   20212:	701a      	strb	r2, [r3, #0]
   20214:	1dbb      	adds	r3, r7, #6
   20216:	1c0a      	adds	r2, r1, #0
   20218:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2021a:	1dfb      	adds	r3, r7, #7
   2021c:	781b      	ldrb	r3, [r3, #0]
   2021e:	0018      	movs	r0, r3
   20220:	4b0d      	ldr	r3, [pc, #52]	; (20258 <port_pin_set_output_level+0x50>)
   20222:	4798      	blx	r3
   20224:	0003      	movs	r3, r0
   20226:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   20228:	1dfb      	adds	r3, r7, #7
   2022a:	781b      	ldrb	r3, [r3, #0]
   2022c:	221f      	movs	r2, #31
   2022e:	4013      	ands	r3, r2
   20230:	2201      	movs	r2, #1
   20232:	409a      	lsls	r2, r3
   20234:	0013      	movs	r3, r2
   20236:	60bb      	str	r3, [r7, #8]
	if (level) {
   20238:	1dbb      	adds	r3, r7, #6
   2023a:	781b      	ldrb	r3, [r3, #0]
   2023c:	2b00      	cmp	r3, #0
   2023e:	d003      	beq.n	20248 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   20240:	68fb      	ldr	r3, [r7, #12]
   20242:	68ba      	ldr	r2, [r7, #8]
   20244:	619a      	str	r2, [r3, #24]
}
   20246:	e002      	b.n	2024e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   20248:	68fb      	ldr	r3, [r7, #12]
   2024a:	68ba      	ldr	r2, [r7, #8]
   2024c:	615a      	str	r2, [r3, #20]
}
   2024e:	46c0      	nop			; (mov r8, r8)
   20250:	46bd      	mov	sp, r7
   20252:	b004      	add	sp, #16
   20254:	bd80      	pop	{r7, pc}
   20256:	46c0      	nop			; (mov r8, r8)
   20258:	000201c1 	.word	0x000201c1

0002025c <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
   2025c:	b580      	push	{r7, lr}
   2025e:	b084      	sub	sp, #16
   20260:	af00      	add	r7, sp, #0
   20262:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20264:	687b      	ldr	r3, [r7, #4]
   20266:	681b      	ldr	r3, [r3, #0]
   20268:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
   2026a:	68fb      	ldr	r3, [r7, #12]
   2026c:	69db      	ldr	r3, [r3, #28]
   2026e:	1e5a      	subs	r2, r3, #1
   20270:	4193      	sbcs	r3, r2
   20272:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
   20274:	0018      	movs	r0, r3
   20276:	46bd      	mov	sp, r7
   20278:	b004      	add	sp, #16
   2027a:	bd80      	pop	{r7, pc}

0002027c <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
   2027c:	b580      	push	{r7, lr}
   2027e:	b082      	sub	sp, #8
   20280:	af00      	add	r7, sp, #0
   20282:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
   20284:	687b      	ldr	r3, [r7, #4]
   20286:	2201      	movs	r2, #1
   20288:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   2028a:	687b      	ldr	r3, [r7, #4]
   2028c:	2200      	movs	r2, #0
   2028e:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   20290:	687b      	ldr	r3, [r7, #4]
   20292:	2200      	movs	r2, #0
   20294:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   20296:	687b      	ldr	r3, [r7, #4]
   20298:	22c0      	movs	r2, #192	; 0xc0
   2029a:	0392      	lsls	r2, r2, #14
   2029c:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   2029e:	687b      	ldr	r3, [r7, #4]
   202a0:	2200      	movs	r2, #0
   202a2:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   202a4:	687b      	ldr	r3, [r7, #4]
   202a6:	2200      	movs	r2, #0
   202a8:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   202aa:	687b      	ldr	r3, [r7, #4]
   202ac:	2201      	movs	r2, #1
   202ae:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
   202b0:	687b      	ldr	r3, [r7, #4]
   202b2:	2201      	movs	r2, #1
   202b4:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
   202b6:	687b      	ldr	r3, [r7, #4]
   202b8:	2200      	movs	r2, #0
   202ba:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
   202bc:	687b      	ldr	r3, [r7, #4]
   202be:	2224      	movs	r2, #36	; 0x24
   202c0:	2100      	movs	r1, #0
   202c2:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   202c4:	687b      	ldr	r3, [r7, #4]
   202c6:	3318      	adds	r3, #24
   202c8:	220c      	movs	r2, #12
   202ca:	2100      	movs	r1, #0
   202cc:	0018      	movs	r0, r3
   202ce:	4b0a      	ldr	r3, [pc, #40]	; (202f8 <spi_get_config_defaults+0x7c>)
   202d0:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
   202d2:	687b      	ldr	r3, [r7, #4]
   202d4:	4a09      	ldr	r2, [pc, #36]	; (202fc <spi_get_config_defaults+0x80>)
   202d6:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
   202d8:	687b      	ldr	r3, [r7, #4]
   202da:	2200      	movs	r2, #0
   202dc:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   202de:	687b      	ldr	r3, [r7, #4]
   202e0:	2200      	movs	r2, #0
   202e2:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   202e4:	687b      	ldr	r3, [r7, #4]
   202e6:	2200      	movs	r2, #0
   202e8:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   202ea:	687b      	ldr	r3, [r7, #4]
   202ec:	2200      	movs	r2, #0
   202ee:	635a      	str	r2, [r3, #52]	; 0x34

};
   202f0:	46c0      	nop			; (mov r8, r8)
   202f2:	46bd      	mov	sp, r7
   202f4:	b002      	add	sp, #8
   202f6:	bd80      	pop	{r7, pc}
   202f8:	000355ef 	.word	0x000355ef
   202fc:	000186a0 	.word	0x000186a0

00020300 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
   20300:	b580      	push	{r7, lr}
   20302:	b082      	sub	sp, #8
   20304:	af00      	add	r7, sp, #0
   20306:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
   20308:	687b      	ldr	r3, [r7, #4]
   2030a:	220a      	movs	r2, #10
   2030c:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   2030e:	687b      	ldr	r3, [r7, #4]
   20310:	2200      	movs	r2, #0
   20312:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   20314:	687b      	ldr	r3, [r7, #4]
   20316:	2200      	movs	r2, #0
   20318:	709a      	strb	r2, [r3, #2]
}
   2031a:	46c0      	nop			; (mov r8, r8)
   2031c:	46bd      	mov	sp, r7
   2031e:	b002      	add	sp, #8
   20320:	bd80      	pop	{r7, pc}
	...

00020324 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
   20324:	b580      	push	{r7, lr}
   20326:	b084      	sub	sp, #16
   20328:	af00      	add	r7, sp, #0
   2032a:	6078      	str	r0, [r7, #4]
   2032c:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
   2032e:	683b      	ldr	r3, [r7, #0]
   20330:	781a      	ldrb	r2, [r3, #0]
   20332:	687b      	ldr	r3, [r7, #4]
   20334:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   20336:	683b      	ldr	r3, [r7, #0]
   20338:	785a      	ldrb	r2, [r3, #1]
   2033a:	687b      	ldr	r3, [r7, #4]
   2033c:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   2033e:	683b      	ldr	r3, [r7, #0]
   20340:	789a      	ldrb	r2, [r3, #2]
   20342:	687b      	ldr	r3, [r7, #4]
   20344:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   20346:	230c      	movs	r3, #12
   20348:	18fb      	adds	r3, r7, r3
   2034a:	0018      	movs	r0, r3
   2034c:	4b0b      	ldr	r3, [pc, #44]	; (2037c <spi_attach_slave+0x58>)
   2034e:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   20350:	230c      	movs	r3, #12
   20352:	18fb      	adds	r3, r7, r3
   20354:	2201      	movs	r2, #1
   20356:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
   20358:	687b      	ldr	r3, [r7, #4]
   2035a:	781b      	ldrb	r3, [r3, #0]
   2035c:	220c      	movs	r2, #12
   2035e:	18ba      	adds	r2, r7, r2
   20360:	0011      	movs	r1, r2
   20362:	0018      	movs	r0, r3
   20364:	4b06      	ldr	r3, [pc, #24]	; (20380 <spi_attach_slave+0x5c>)
   20366:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   20368:	687b      	ldr	r3, [r7, #4]
   2036a:	781b      	ldrb	r3, [r3, #0]
   2036c:	2101      	movs	r1, #1
   2036e:	0018      	movs	r0, r3
   20370:	4b04      	ldr	r3, [pc, #16]	; (20384 <spi_attach_slave+0x60>)
   20372:	4798      	blx	r3
}
   20374:	46c0      	nop			; (mov r8, r8)
   20376:	46bd      	mov	sp, r7
   20378:	b004      	add	sp, #16
   2037a:	bd80      	pop	{r7, pc}
   2037c:	000201e5 	.word	0x000201e5
   20380:	000275f1 	.word	0x000275f1
   20384:	00020209 	.word	0x00020209

00020388 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
   20388:	b580      	push	{r7, lr}
   2038a:	b084      	sub	sp, #16
   2038c:	af00      	add	r7, sp, #0
   2038e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   20390:	687b      	ldr	r3, [r7, #4]
   20392:	681b      	ldr	r3, [r3, #0]
   20394:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   20396:	687b      	ldr	r3, [r7, #4]
   20398:	681b      	ldr	r3, [r3, #0]
   2039a:	0018      	movs	r0, r3
   2039c:	4b0b      	ldr	r3, [pc, #44]	; (203cc <spi_enable+0x44>)
   2039e:	4798      	blx	r3
   203a0:	0003      	movs	r3, r0
   203a2:	0018      	movs	r0, r3
   203a4:	4b0a      	ldr	r3, [pc, #40]	; (203d0 <spi_enable+0x48>)
   203a6:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   203a8:	46c0      	nop			; (mov r8, r8)
   203aa:	687b      	ldr	r3, [r7, #4]
   203ac:	0018      	movs	r0, r3
   203ae:	4b09      	ldr	r3, [pc, #36]	; (203d4 <spi_enable+0x4c>)
   203b0:	4798      	blx	r3
   203b2:	1e03      	subs	r3, r0, #0
   203b4:	d1f9      	bne.n	203aa <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   203b6:	68fb      	ldr	r3, [r7, #12]
   203b8:	681b      	ldr	r3, [r3, #0]
   203ba:	2202      	movs	r2, #2
   203bc:	431a      	orrs	r2, r3
   203be:	68fb      	ldr	r3, [r7, #12]
   203c0:	601a      	str	r2, [r3, #0]
}
   203c2:	46c0      	nop			; (mov r8, r8)
   203c4:	46bd      	mov	sp, r7
   203c6:	b004      	add	sp, #16
   203c8:	bd80      	pop	{r7, pc}
   203ca:	46c0      	nop			; (mov r8, r8)
   203cc:	000282c1 	.word	0x000282c1
   203d0:	00020195 	.word	0x00020195
   203d4:	0002025d 	.word	0x0002025d

000203d8 <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
   203d8:	b580      	push	{r7, lr}
   203da:	b084      	sub	sp, #16
   203dc:	af00      	add	r7, sp, #0
   203de:	6078      	str	r0, [r7, #4]
   203e0:	000a      	movs	r2, r1
   203e2:	1cfb      	adds	r3, r7, #3
   203e4:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
   203e6:	230f      	movs	r3, #15
   203e8:	18fb      	adds	r3, r7, r3
   203ea:	2200      	movs	r2, #0
   203ec:	701a      	strb	r2, [r3, #0]
	while (size--) {
   203ee:	e038      	b.n	20462 <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
   203f0:	687b      	ldr	r3, [r7, #4]
   203f2:	1c5a      	adds	r2, r3, #1
   203f4:	607a      	str	r2, [r7, #4]
   203f6:	220e      	movs	r2, #14
   203f8:	18ba      	adds	r2, r7, r2
   203fa:	781b      	ldrb	r3, [r3, #0]
   203fc:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   203fe:	230d      	movs	r3, #13
   20400:	18fb      	adds	r3, r7, r3
   20402:	2200      	movs	r2, #0
   20404:	701a      	strb	r2, [r3, #0]
   20406:	e027      	b.n	20458 <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
   20408:	230f      	movs	r3, #15
   2040a:	18fa      	adds	r2, r7, r3
   2040c:	230f      	movs	r3, #15
   2040e:	18fb      	adds	r3, r7, r3
   20410:	781b      	ldrb	r3, [r3, #0]
   20412:	18db      	adds	r3, r3, r3
   20414:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
   20416:	230e      	movs	r3, #14
   20418:	18fa      	adds	r2, r7, r3
   2041a:	230f      	movs	r3, #15
   2041c:	18fb      	adds	r3, r7, r3
   2041e:	7812      	ldrb	r2, [r2, #0]
   20420:	781b      	ldrb	r3, [r3, #0]
   20422:	4053      	eors	r3, r2
   20424:	b2db      	uxtb	r3, r3
   20426:	b25b      	sxtb	r3, r3
   20428:	2b00      	cmp	r3, #0
   2042a:	da07      	bge.n	2043c <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
   2042c:	230f      	movs	r3, #15
   2042e:	18fb      	adds	r3, r7, r3
   20430:	220f      	movs	r2, #15
   20432:	18ba      	adds	r2, r7, r2
   20434:	7812      	ldrb	r2, [r2, #0]
   20436:	2109      	movs	r1, #9
   20438:	404a      	eors	r2, r1
   2043a:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
   2043c:	230e      	movs	r3, #14
   2043e:	18fa      	adds	r2, r7, r3
   20440:	230e      	movs	r3, #14
   20442:	18fb      	adds	r3, r7, r3
   20444:	781b      	ldrb	r3, [r3, #0]
   20446:	18db      	adds	r3, r3, r3
   20448:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   2044a:	230d      	movs	r3, #13
   2044c:	18fb      	adds	r3, r7, r3
   2044e:	781a      	ldrb	r2, [r3, #0]
   20450:	230d      	movs	r3, #13
   20452:	18fb      	adds	r3, r7, r3
   20454:	3201      	adds	r2, #1
   20456:	701a      	strb	r2, [r3, #0]
   20458:	230d      	movs	r3, #13
   2045a:	18fb      	adds	r3, r7, r3
   2045c:	781b      	ldrb	r3, [r3, #0]
   2045e:	2b07      	cmp	r3, #7
   20460:	d9d2      	bls.n	20408 <sd_mmc_spi_crc7+0x30>
	while (size--) {
   20462:	1cfb      	adds	r3, r7, #3
   20464:	781b      	ldrb	r3, [r3, #0]
   20466:	1cfa      	adds	r2, r7, #3
   20468:	1e59      	subs	r1, r3, #1
   2046a:	7011      	strb	r1, [r2, #0]
   2046c:	2b00      	cmp	r3, #0
   2046e:	d1bf      	bne.n	203f0 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
   20470:	230f      	movs	r3, #15
   20472:	18fb      	adds	r3, r7, r3
   20474:	781b      	ldrb	r3, [r3, #0]
   20476:	005b      	lsls	r3, r3, #1
   20478:	b25b      	sxtb	r3, r3
   2047a:	2201      	movs	r2, #1
   2047c:	4313      	orrs	r3, r2
   2047e:	b25a      	sxtb	r2, r3
   20480:	230f      	movs	r3, #15
   20482:	18fb      	adds	r3, r7, r3
   20484:	701a      	strb	r2, [r3, #0]
	return crc;
   20486:	230f      	movs	r3, #15
   20488:	18fb      	adds	r3, r7, r3
   2048a:	781b      	ldrb	r3, [r3, #0]
}
   2048c:	0018      	movs	r0, r3
   2048e:	46bd      	mov	sp, r7
   20490:	b004      	add	sp, #16
   20492:	bd80      	pop	{r7, pc}

00020494 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
   20494:	b590      	push	{r4, r7, lr}
   20496:	b083      	sub	sp, #12
   20498:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
   2049a:	1c7b      	adds	r3, r7, #1
   2049c:	22ff      	movs	r2, #255	; 0xff
   2049e:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
   204a0:	1cbb      	adds	r3, r7, #2
   204a2:	22ff      	movs	r2, #255	; 0xff
   204a4:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   204a6:	1cbb      	adds	r3, r7, #2
   204a8:	881b      	ldrh	r3, [r3, #0]
   204aa:	1c79      	adds	r1, r7, #1
   204ac:	4811      	ldr	r0, [pc, #68]	; (204f4 <sd_mmc_spi_wait_busy+0x60>)
   204ae:	2201      	movs	r2, #1
   204b0:	4c11      	ldr	r4, [pc, #68]	; (204f8 <sd_mmc_spi_wait_busy+0x64>)
   204b2:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
   204b4:	4b11      	ldr	r3, [pc, #68]	; (204fc <sd_mmc_spi_wait_busy+0x68>)
   204b6:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   204b8:	1cbb      	adds	r3, r7, #2
   204ba:	881b      	ldrh	r3, [r3, #0]
   204bc:	1c79      	adds	r1, r7, #1
   204be:	480d      	ldr	r0, [pc, #52]	; (204f4 <sd_mmc_spi_wait_busy+0x60>)
   204c0:	2201      	movs	r2, #1
   204c2:	4c0d      	ldr	r4, [pc, #52]	; (204f8 <sd_mmc_spi_wait_busy+0x64>)
   204c4:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   204c6:	1cbb      	adds	r3, r7, #2
   204c8:	881b      	ldrh	r3, [r3, #0]
   204ca:	1c79      	adds	r1, r7, #1
   204cc:	4809      	ldr	r0, [pc, #36]	; (204f4 <sd_mmc_spi_wait_busy+0x60>)
   204ce:	2201      	movs	r2, #1
   204d0:	4c09      	ldr	r4, [pc, #36]	; (204f8 <sd_mmc_spi_wait_busy+0x64>)
   204d2:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
   204d4:	687b      	ldr	r3, [r7, #4]
   204d6:	1e5a      	subs	r2, r3, #1
   204d8:	607a      	str	r2, [r7, #4]
   204da:	2b00      	cmp	r3, #0
   204dc:	d101      	bne.n	204e2 <sd_mmc_spi_wait_busy+0x4e>
			return false;
   204de:	2300      	movs	r3, #0
   204e0:	e004      	b.n	204ec <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
   204e2:	1c7b      	adds	r3, r7, #1
   204e4:	781b      	ldrb	r3, [r3, #0]
   204e6:	2bff      	cmp	r3, #255	; 0xff
   204e8:	d1ed      	bne.n	204c6 <sd_mmc_spi_wait_busy+0x32>
	return true;
   204ea:	2301      	movs	r3, #1
}
   204ec:	0018      	movs	r0, r3
   204ee:	46bd      	mov	sp, r7
   204f0:	b003      	add	sp, #12
   204f2:	bd90      	pop	{r4, r7, pc}
   204f4:	20004250 	.word	0x20004250
   204f8:	00028c01 	.word	0x00028c01
   204fc:	00030d40 	.word	0x00030d40

00020500 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
   20500:	b590      	push	{r4, r7, lr}
   20502:	b083      	sub	sp, #12
   20504:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
   20506:	1cbb      	adds	r3, r7, #2
   20508:	22ff      	movs	r2, #255	; 0xff
   2050a:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
   2050c:	1c7b      	adds	r3, r7, #1
   2050e:	2200      	movs	r2, #0
   20510:	701a      	strb	r2, [r3, #0]
	i = 500000;
   20512:	4b18      	ldr	r3, [pc, #96]	; (20574 <sd_mmc_spi_start_read_block+0x74>)
   20514:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
   20516:	687b      	ldr	r3, [r7, #4]
   20518:	1e5a      	subs	r2, r3, #1
   2051a:	607a      	str	r2, [r7, #4]
   2051c:	2b00      	cmp	r3, #0
   2051e:	d104      	bne.n	2052a <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
   20520:	4b15      	ldr	r3, [pc, #84]	; (20578 <sd_mmc_spi_start_read_block+0x78>)
   20522:	2204      	movs	r2, #4
   20524:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
   20526:	2300      	movs	r3, #0
   20528:	e020      	b.n	2056c <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
   2052a:	1cbb      	adds	r3, r7, #2
   2052c:	881b      	ldrh	r3, [r3, #0]
   2052e:	1c79      	adds	r1, r7, #1
   20530:	4812      	ldr	r0, [pc, #72]	; (2057c <sd_mmc_spi_start_read_block+0x7c>)
   20532:	2201      	movs	r2, #1
   20534:	4c12      	ldr	r4, [pc, #72]	; (20580 <sd_mmc_spi_start_read_block+0x80>)
   20536:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   20538:	1c7b      	adds	r3, r7, #1
   2053a:	781b      	ldrb	r3, [r3, #0]
   2053c:	001a      	movs	r2, r3
   2053e:	23f0      	movs	r3, #240	; 0xf0
   20540:	4013      	ands	r3, r2
   20542:	d10e      	bne.n	20562 <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
   20544:	1c7b      	adds	r3, r7, #1
   20546:	781b      	ldrb	r3, [r3, #0]
   20548:	001a      	movs	r2, r3
   2054a:	2307      	movs	r3, #7
   2054c:	4013      	ands	r3, r2
   2054e:	d003      	beq.n	20558 <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
   20550:	4b09      	ldr	r3, [pc, #36]	; (20578 <sd_mmc_spi_start_read_block+0x78>)
   20552:	2207      	movs	r2, #7
   20554:	701a      	strb	r2, [r3, #0]
   20556:	e002      	b.n	2055e <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
   20558:	4b07      	ldr	r3, [pc, #28]	; (20578 <sd_mmc_spi_start_read_block+0x78>)
   2055a:	220b      	movs	r2, #11
   2055c:	701a      	strb	r2, [r3, #0]
			}
			return false;
   2055e:	2300      	movs	r3, #0
   20560:	e004      	b.n	2056c <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
   20562:	1c7b      	adds	r3, r7, #1
   20564:	781b      	ldrb	r3, [r3, #0]
   20566:	2bfe      	cmp	r3, #254	; 0xfe
   20568:	d1d5      	bne.n	20516 <sd_mmc_spi_start_read_block+0x16>

	return true;
   2056a:	2301      	movs	r3, #1
}
   2056c:	0018      	movs	r0, r3
   2056e:	46bd      	mov	sp, r7
   20570:	b003      	add	sp, #12
   20572:	bd90      	pop	{r4, r7, pc}
   20574:	0007a120 	.word	0x0007a120
   20578:	20004293 	.word	0x20004293
   2057c:	20004250 	.word	0x20004250
   20580:	00028c01 	.word	0x00028c01

00020584 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
   20584:	b590      	push	{r4, r7, lr}
   20586:	b083      	sub	sp, #12
   20588:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
   2058a:	1dbb      	adds	r3, r7, #6
   2058c:	22ff      	movs	r2, #255	; 0xff
   2058e:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
   20590:	1dbb      	adds	r3, r7, #6
   20592:	881b      	ldrh	r3, [r3, #0]
   20594:	1d39      	adds	r1, r7, #4
   20596:	4804      	ldr	r0, [pc, #16]	; (205a8 <sd_mmc_spi_stop_read_block+0x24>)
   20598:	2202      	movs	r2, #2
   2059a:	4c04      	ldr	r4, [pc, #16]	; (205ac <sd_mmc_spi_stop_read_block+0x28>)
   2059c:	47a0      	blx	r4
			dummy);
}
   2059e:	46c0      	nop			; (mov r8, r8)
   205a0:	46bd      	mov	sp, r7
   205a2:	b003      	add	sp, #12
   205a4:	bd90      	pop	{r4, r7, pc}
   205a6:	46c0      	nop			; (mov r8, r8)
   205a8:	20004250 	.word	0x20004250
   205ac:	00028c01 	.word	0x00028c01

000205b0 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
   205b0:	b580      	push	{r7, lr}
   205b2:	b082      	sub	sp, #8
   205b4:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
   205b6:	1dfb      	adds	r3, r7, #7
   205b8:	22ff      	movs	r2, #255	; 0xff
   205ba:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
   205bc:	1df9      	adds	r1, r7, #7
   205be:	4b0d      	ldr	r3, [pc, #52]	; (205f4 <sd_mmc_spi_start_write_block+0x44>)
   205c0:	2201      	movs	r2, #1
   205c2:	0018      	movs	r0, r3
   205c4:	4b0c      	ldr	r3, [pc, #48]	; (205f8 <sd_mmc_spi_start_write_block+0x48>)
   205c6:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
   205c8:	4b0c      	ldr	r3, [pc, #48]	; (205fc <sd_mmc_spi_start_write_block+0x4c>)
   205ca:	881b      	ldrh	r3, [r3, #0]
   205cc:	2b01      	cmp	r3, #1
   205ce:	d103      	bne.n	205d8 <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
   205d0:	1dbb      	adds	r3, r7, #6
   205d2:	22fe      	movs	r2, #254	; 0xfe
   205d4:	701a      	strb	r2, [r3, #0]
   205d6:	e002      	b.n	205de <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
   205d8:	1dbb      	adds	r3, r7, #6
   205da:	22fc      	movs	r2, #252	; 0xfc
   205dc:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
   205de:	1db9      	adds	r1, r7, #6
   205e0:	4b04      	ldr	r3, [pc, #16]	; (205f4 <sd_mmc_spi_start_write_block+0x44>)
   205e2:	2201      	movs	r2, #1
   205e4:	0018      	movs	r0, r3
   205e6:	4b04      	ldr	r3, [pc, #16]	; (205f8 <sd_mmc_spi_start_write_block+0x48>)
   205e8:	4798      	blx	r3
}
   205ea:	46c0      	nop			; (mov r8, r8)
   205ec:	46bd      	mov	sp, r7
   205ee:	b002      	add	sp, #8
   205f0:	bd80      	pop	{r7, pc}
   205f2:	46c0      	nop			; (mov r8, r8)
   205f4:	20004250 	.word	0x20004250
   205f8:	00028e25 	.word	0x00028e25
   205fc:	2000429e 	.word	0x2000429e

00020600 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
   20600:	b590      	push	{r4, r7, lr}
   20602:	b083      	sub	sp, #12
   20604:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
   20606:	1dbb      	adds	r3, r7, #6
   20608:	22ff      	movs	r2, #255	; 0xff
   2060a:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
   2060c:	1cbb      	adds	r3, r7, #2
   2060e:	2201      	movs	r2, #1
   20610:	4252      	negs	r2, r2
   20612:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
   20614:	1cb9      	adds	r1, r7, #2
   20616:	4b1b      	ldr	r3, [pc, #108]	; (20684 <sd_mmc_spi_stop_write_block+0x84>)
   20618:	2202      	movs	r2, #2
   2061a:	0018      	movs	r0, r3
   2061c:	4b1a      	ldr	r3, [pc, #104]	; (20688 <sd_mmc_spi_stop_write_block+0x88>)
   2061e:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
   20620:	1dbb      	adds	r3, r7, #6
   20622:	881b      	ldrh	r3, [r3, #0]
   20624:	1d79      	adds	r1, r7, #5
   20626:	4817      	ldr	r0, [pc, #92]	; (20684 <sd_mmc_spi_stop_write_block+0x84>)
   20628:	2201      	movs	r2, #1
   2062a:	4c18      	ldr	r4, [pc, #96]	; (2068c <sd_mmc_spi_stop_write_block+0x8c>)
   2062c:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
   2062e:	1d7b      	adds	r3, r7, #5
   20630:	781b      	ldrb	r3, [r3, #0]
   20632:	001a      	movs	r2, r3
   20634:	2310      	movs	r3, #16
   20636:	4013      	ands	r3, r2
   20638:	d105      	bne.n	20646 <sd_mmc_spi_stop_write_block+0x46>
   2063a:	1d7b      	adds	r3, r7, #5
   2063c:	781b      	ldrb	r3, [r3, #0]
   2063e:	001a      	movs	r2, r3
   20640:	2301      	movs	r3, #1
   20642:	4013      	ands	r3, r2
   20644:	d104      	bne.n	20650 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   20646:	4b12      	ldr	r3, [pc, #72]	; (20690 <sd_mmc_spi_stop_write_block+0x90>)
   20648:	2201      	movs	r2, #1
   2064a:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
   2064c:	2300      	movs	r3, #0
   2064e:	e014      	b.n	2067a <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
   20650:	1d7b      	adds	r3, r7, #5
   20652:	781b      	ldrb	r3, [r3, #0]
   20654:	001a      	movs	r2, r3
   20656:	231e      	movs	r3, #30
   20658:	4013      	ands	r3, r2
   2065a:	2b04      	cmp	r3, #4
   2065c:	d00b      	beq.n	20676 <sd_mmc_spi_stop_write_block+0x76>
   2065e:	2b0a      	cmp	r3, #10
   20660:	d104      	bne.n	2066c <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
   20662:	4b0b      	ldr	r3, [pc, #44]	; (20690 <sd_mmc_spi_stop_write_block+0x90>)
   20664:	2208      	movs	r2, #8
   20666:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
   20668:	2300      	movs	r3, #0
   2066a:	e006      	b.n	2067a <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
   2066c:	4b08      	ldr	r3, [pc, #32]	; (20690 <sd_mmc_spi_stop_write_block+0x90>)
   2066e:	220a      	movs	r2, #10
   20670:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
   20672:	2300      	movs	r3, #0
   20674:	e001      	b.n	2067a <sd_mmc_spi_stop_write_block+0x7a>
		break;
   20676:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   20678:	2301      	movs	r3, #1
}
   2067a:	0018      	movs	r0, r3
   2067c:	46bd      	mov	sp, r7
   2067e:	b003      	add	sp, #12
   20680:	bd90      	pop	{r4, r7, pc}
   20682:	46c0      	nop			; (mov r8, r8)
   20684:	20004250 	.word	0x20004250
   20688:	00028e25 	.word	0x00028e25
   2068c:	00028c01 	.word	0x00028c01
   20690:	20004293 	.word	0x20004293

00020694 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
   20694:	b590      	push	{r4, r7, lr}
   20696:	b083      	sub	sp, #12
   20698:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
   2069a:	4b1d      	ldr	r3, [pc, #116]	; (20710 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   2069c:	881b      	ldrh	r3, [r3, #0]
   2069e:	2b01      	cmp	r3, #1
   206a0:	d101      	bne.n	206a6 <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
   206a2:	2301      	movs	r3, #1
   206a4:	e030      	b.n	20708 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
   206a6:	4b1a      	ldr	r3, [pc, #104]	; (20710 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   206a8:	881b      	ldrh	r3, [r3, #0]
   206aa:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
   206ac:	4b19      	ldr	r3, [pc, #100]	; (20714 <sd_mmc_spi_stop_multiwrite_block+0x80>)
   206ae:	681a      	ldr	r2, [r3, #0]
   206b0:	4b19      	ldr	r3, [pc, #100]	; (20718 <sd_mmc_spi_stop_multiwrite_block+0x84>)
   206b2:	881b      	ldrh	r3, [r3, #0]
   206b4:	0019      	movs	r1, r3
   206b6:	4b19      	ldr	r3, [pc, #100]	; (2071c <sd_mmc_spi_stop_multiwrite_block+0x88>)
   206b8:	0010      	movs	r0, r2
   206ba:	4798      	blx	r3
   206bc:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
   206be:	429c      	cmp	r4, r3
   206c0:	d901      	bls.n	206c6 <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
   206c2:	2301      	movs	r3, #1
   206c4:	e020      	b.n	20708 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
   206c6:	1dfb      	adds	r3, r7, #7
   206c8:	22ff      	movs	r2, #255	; 0xff
   206ca:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   206cc:	1df9      	adds	r1, r7, #7
   206ce:	4b14      	ldr	r3, [pc, #80]	; (20720 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   206d0:	2201      	movs	r2, #1
   206d2:	0018      	movs	r0, r3
   206d4:	4b13      	ldr	r3, [pc, #76]	; (20724 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   206d6:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
   206d8:	1dfb      	adds	r3, r7, #7
   206da:	22fd      	movs	r2, #253	; 0xfd
   206dc:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   206de:	1df9      	adds	r1, r7, #7
   206e0:	4b0f      	ldr	r3, [pc, #60]	; (20720 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   206e2:	2201      	movs	r2, #1
   206e4:	0018      	movs	r0, r3
   206e6:	4b0f      	ldr	r3, [pc, #60]	; (20724 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   206e8:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
   206ea:	4b0f      	ldr	r3, [pc, #60]	; (20728 <sd_mmc_spi_stop_multiwrite_block+0x94>)
   206ec:	4798      	blx	r3
   206ee:	0003      	movs	r3, r0
   206f0:	001a      	movs	r2, r3
   206f2:	2301      	movs	r3, #1
   206f4:	4053      	eors	r3, r2
   206f6:	b2db      	uxtb	r3, r3
   206f8:	2b00      	cmp	r3, #0
   206fa:	d004      	beq.n	20706 <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   206fc:	4b0b      	ldr	r3, [pc, #44]	; (2072c <sd_mmc_spi_stop_multiwrite_block+0x98>)
   206fe:	2205      	movs	r2, #5
   20700:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
   20702:	2300      	movs	r3, #0
   20704:	e000      	b.n	20708 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
   20706:	2301      	movs	r3, #1
}
   20708:	0018      	movs	r0, r3
   2070a:	46bd      	mov	sp, r7
   2070c:	b003      	add	sp, #12
   2070e:	bd90      	pop	{r4, r7, pc}
   20710:	2000429e 	.word	0x2000429e
   20714:	20004298 	.word	0x20004298
   20718:	2000429c 	.word	0x2000429c
   2071c:	00033615 	.word	0x00033615
   20720:	20004250 	.word	0x20004250
   20724:	00028e25 	.word	0x00028e25
   20728:	00020495 	.word	0x00020495
   2072c:	20004293 	.word	0x20004293

00020730 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
   20730:	b580      	push	{r7, lr}
   20732:	b090      	sub	sp, #64	; 0x40
   20734:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20736:	4b1f      	ldr	r3, [pc, #124]	; (207b4 <sd_mmc_spi_init+0x84>)
   20738:	2200      	movs	r2, #0
   2073a:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   2073c:	233c      	movs	r3, #60	; 0x3c
   2073e:	18fb      	adds	r3, r7, r3
   20740:	0018      	movs	r0, r3
   20742:	4b1d      	ldr	r3, [pc, #116]	; (207b8 <sd_mmc_spi_init+0x88>)
   20744:	4798      	blx	r3
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
	#endif

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
   20746:	1d3b      	adds	r3, r7, #4
   20748:	0018      	movs	r0, r3
   2074a:	4b1c      	ldr	r3, [pc, #112]	; (207bc <sd_mmc_spi_init+0x8c>)
   2074c:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
   2074e:	1d3b      	adds	r3, r7, #4
   20750:	2280      	movs	r2, #128	; 0x80
   20752:	0252      	lsls	r2, r2, #9
   20754:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
   20756:	1d3b      	adds	r3, r7, #4
   20758:	4a19      	ldr	r2, [pc, #100]	; (207c0 <sd_mmc_spi_init+0x90>)
   2075a:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
   2075c:	1d3b      	adds	r3, r7, #4
   2075e:	4a19      	ldr	r2, [pc, #100]	; (207c4 <sd_mmc_spi_init+0x94>)
   20760:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
   20762:	1d3b      	adds	r3, r7, #4
   20764:	4a18      	ldr	r2, [pc, #96]	; (207c8 <sd_mmc_spi_init+0x98>)
   20766:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
   20768:	1d3b      	adds	r3, r7, #4
   2076a:	4a18      	ldr	r2, [pc, #96]	; (207cc <sd_mmc_spi_init+0x9c>)
   2076c:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
   2076e:	1d3b      	adds	r3, r7, #4
   20770:	2224      	movs	r2, #36	; 0x24
   20772:	2100      	movs	r1, #0
   20774:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
   20776:	1d3b      	adds	r3, r7, #4
   20778:	4a15      	ldr	r2, [pc, #84]	; (207d0 <sd_mmc_spi_init+0xa0>)
   2077a:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
   2077c:	1d3a      	adds	r2, r7, #4
   2077e:	4915      	ldr	r1, [pc, #84]	; (207d4 <sd_mmc_spi_init+0xa4>)
   20780:	4b15      	ldr	r3, [pc, #84]	; (207d8 <sd_mmc_spi_init+0xa8>)
   20782:	0018      	movs	r0, r3
   20784:	4b15      	ldr	r3, [pc, #84]	; (207dc <sd_mmc_spi_init+0xac>)
   20786:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
   20788:	4b13      	ldr	r3, [pc, #76]	; (207d8 <sd_mmc_spi_init+0xa8>)
   2078a:	0018      	movs	r0, r3
   2078c:	4b14      	ldr	r3, [pc, #80]	; (207e0 <sd_mmc_spi_init+0xb0>)
   2078e:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
   20790:	4b14      	ldr	r3, [pc, #80]	; (207e4 <sd_mmc_spi_init+0xb4>)
   20792:	0018      	movs	r0, r3
   20794:	4b14      	ldr	r3, [pc, #80]	; (207e8 <sd_mmc_spi_init+0xb8>)
   20796:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
   20798:	4b14      	ldr	r3, [pc, #80]	; (207ec <sd_mmc_spi_init+0xbc>)
   2079a:	781a      	ldrb	r2, [r3, #0]
   2079c:	4b11      	ldr	r3, [pc, #68]	; (207e4 <sd_mmc_spi_init+0xb4>)
   2079e:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
   207a0:	4a10      	ldr	r2, [pc, #64]	; (207e4 <sd_mmc_spi_init+0xb4>)
   207a2:	4b13      	ldr	r3, [pc, #76]	; (207f0 <sd_mmc_spi_init+0xc0>)
   207a4:	0011      	movs	r1, r2
   207a6:	0018      	movs	r0, r3
   207a8:	4b12      	ldr	r3, [pc, #72]	; (207f4 <sd_mmc_spi_init+0xc4>)
   207aa:	4798      	blx	r3
}
   207ac:	46c0      	nop			; (mov r8, r8)
   207ae:	46bd      	mov	sp, r7
   207b0:	b010      	add	sp, #64	; 0x40
   207b2:	bd80      	pop	{r7, pc}
   207b4:	20004293 	.word	0x20004293
   207b8:	000201e5 	.word	0x000201e5
   207bc:	0002027d 	.word	0x0002027d
   207c0:	00100002 	.word	0x00100002
   207c4:	00110002 	.word	0x00110002
   207c8:	00120002 	.word	0x00120002
   207cc:	00130002 	.word	0x00130002
   207d0:	00061a80 	.word	0x00061a80
   207d4:	42000c00 	.word	0x42000c00
   207d8:	20004250 	.word	0x20004250
   207dc:	00028a71 	.word	0x00028a71
   207e0:	00020389 	.word	0x00020389
   207e4:	20004290 	.word	0x20004290
   207e8:	00020301 	.word	0x00020301
   207ec:	20000118 	.word	0x20000118
   207f0:	2000428c 	.word	0x2000428c
   207f4:	00020325 	.word	0x00020325

000207f8 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
   207f8:	b590      	push	{r4, r7, lr}
   207fa:	b083      	sub	sp, #12
   207fc:	af00      	add	r7, sp, #0
   207fe:	0004      	movs	r4, r0
   20800:	6039      	str	r1, [r7, #0]
   20802:	0010      	movs	r0, r2
   20804:	0019      	movs	r1, r3
   20806:	1dfb      	adds	r3, r7, #7
   20808:	1c22      	adds	r2, r4, #0
   2080a:	701a      	strb	r2, [r3, #0]
   2080c:	1dbb      	adds	r3, r7, #6
   2080e:	1c02      	adds	r2, r0, #0
   20810:	701a      	strb	r2, [r3, #0]
   20812:	1d7b      	adds	r3, r7, #5
   20814:	1c0a      	adds	r2, r1, #0
   20816:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20818:	4b13      	ldr	r3, [pc, #76]	; (20868 <sd_mmc_spi_select_device+0x70>)
   2081a:	2200      	movs	r2, #0
   2081c:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
   2081e:	683b      	ldr	r3, [r7, #0]
   20820:	4a12      	ldr	r2, [pc, #72]	; (2086c <sd_mmc_spi_select_device+0x74>)
   20822:	4293      	cmp	r3, r2
   20824:	d907      	bls.n	20836 <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
   20826:	4b11      	ldr	r3, [pc, #68]	; (2086c <sd_mmc_spi_select_device+0x74>)
   20828:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   2082a:	e004      	b.n	20836 <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
   2082c:	683b      	ldr	r3, [r7, #0]
   2082e:	08db      	lsrs	r3, r3, #3
   20830:	683a      	ldr	r2, [r7, #0]
   20832:	1ad3      	subs	r3, r2, r3
   20834:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   20836:	683a      	ldr	r2, [r7, #0]
   20838:	4b0d      	ldr	r3, [pc, #52]	; (20870 <sd_mmc_spi_select_device+0x78>)
   2083a:	0011      	movs	r1, r2
   2083c:	0018      	movs	r0, r3
   2083e:	4b0d      	ldr	r3, [pc, #52]	; (20874 <sd_mmc_spi_select_device+0x7c>)
   20840:	4798      	blx	r3
   20842:	0003      	movs	r3, r0
   20844:	2b17      	cmp	r3, #23
   20846:	d0f1      	beq.n	2082c <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
   20848:	1dfb      	adds	r3, r7, #7
   2084a:	781a      	ldrb	r2, [r3, #0]
   2084c:	0013      	movs	r3, r2
   2084e:	005b      	lsls	r3, r3, #1
   20850:	189b      	adds	r3, r3, r2
   20852:	4a09      	ldr	r2, [pc, #36]	; (20878 <sd_mmc_spi_select_device+0x80>)
   20854:	1899      	adds	r1, r3, r2
   20856:	4b06      	ldr	r3, [pc, #24]	; (20870 <sd_mmc_spi_select_device+0x78>)
   20858:	2201      	movs	r2, #1
   2085a:	0018      	movs	r0, r3
   2085c:	4b07      	ldr	r3, [pc, #28]	; (2087c <sd_mmc_spi_select_device+0x84>)
   2085e:	4798      	blx	r3
}
   20860:	46c0      	nop			; (mov r8, r8)
   20862:	46bd      	mov	sp, r7
   20864:	b003      	add	sp, #12
   20866:	bd90      	pop	{r4, r7, pc}
   20868:	20004293 	.word	0x20004293
   2086c:	00989680 	.word	0x00989680
   20870:	20004250 	.word	0x20004250
   20874:	00028799 	.word	0x00028799
   20878:	2000428c 	.word	0x2000428c
   2087c:	00028d35 	.word	0x00028d35

00020880 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
   20880:	b580      	push	{r7, lr}
   20882:	b082      	sub	sp, #8
   20884:	af00      	add	r7, sp, #0
   20886:	0002      	movs	r2, r0
   20888:	1dfb      	adds	r3, r7, #7
   2088a:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   2088c:	4b09      	ldr	r3, [pc, #36]	; (208b4 <sd_mmc_spi_deselect_device+0x34>)
   2088e:	2200      	movs	r2, #0
   20890:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
   20892:	1dfb      	adds	r3, r7, #7
   20894:	781a      	ldrb	r2, [r3, #0]
   20896:	0013      	movs	r3, r2
   20898:	005b      	lsls	r3, r3, #1
   2089a:	189b      	adds	r3, r3, r2
   2089c:	4a06      	ldr	r2, [pc, #24]	; (208b8 <sd_mmc_spi_deselect_device+0x38>)
   2089e:	1899      	adds	r1, r3, r2
   208a0:	4b06      	ldr	r3, [pc, #24]	; (208bc <sd_mmc_spi_deselect_device+0x3c>)
   208a2:	2200      	movs	r2, #0
   208a4:	0018      	movs	r0, r3
   208a6:	4b06      	ldr	r3, [pc, #24]	; (208c0 <sd_mmc_spi_deselect_device+0x40>)
   208a8:	4798      	blx	r3
}
   208aa:	46c0      	nop			; (mov r8, r8)
   208ac:	46bd      	mov	sp, r7
   208ae:	b002      	add	sp, #8
   208b0:	bd80      	pop	{r7, pc}
   208b2:	46c0      	nop			; (mov r8, r8)
   208b4:	20004293 	.word	0x20004293
   208b8:	2000428c 	.word	0x2000428c
   208bc:	20004250 	.word	0x20004250
   208c0:	00028d35 	.word	0x00028d35

000208c4 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
   208c4:	b580      	push	{r7, lr}
   208c6:	b082      	sub	sp, #8
   208c8:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
   208ca:	1dbb      	adds	r3, r7, #6
   208cc:	22ff      	movs	r2, #255	; 0xff
   208ce:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   208d0:	4b0c      	ldr	r3, [pc, #48]	; (20904 <sd_mmc_spi_send_clock+0x40>)
   208d2:	2200      	movs	r2, #0
   208d4:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
   208d6:	1dfb      	adds	r3, r7, #7
   208d8:	2200      	movs	r2, #0
   208da:	701a      	strb	r2, [r3, #0]
   208dc:	e00a      	b.n	208f4 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
   208de:	1db9      	adds	r1, r7, #6
   208e0:	4b09      	ldr	r3, [pc, #36]	; (20908 <sd_mmc_spi_send_clock+0x44>)
   208e2:	2201      	movs	r2, #1
   208e4:	0018      	movs	r0, r3
   208e6:	4b09      	ldr	r3, [pc, #36]	; (2090c <sd_mmc_spi_send_clock+0x48>)
   208e8:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
   208ea:	1dfb      	adds	r3, r7, #7
   208ec:	781a      	ldrb	r2, [r3, #0]
   208ee:	1dfb      	adds	r3, r7, #7
   208f0:	3201      	adds	r2, #1
   208f2:	701a      	strb	r2, [r3, #0]
   208f4:	1dfb      	adds	r3, r7, #7
   208f6:	781b      	ldrb	r3, [r3, #0]
   208f8:	2b09      	cmp	r3, #9
   208fa:	d9f0      	bls.n	208de <sd_mmc_spi_send_clock+0x1a>
	}
}
   208fc:	46c0      	nop			; (mov r8, r8)
   208fe:	46bd      	mov	sp, r7
   20900:	b002      	add	sp, #8
   20902:	bd80      	pop	{r7, pc}
   20904:	20004293 	.word	0x20004293
   20908:	20004250 	.word	0x20004250
   2090c:	00028e25 	.word	0x00028e25

00020910 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
   20910:	b590      	push	{r4, r7, lr}
   20912:	b085      	sub	sp, #20
   20914:	af02      	add	r7, sp, #8
   20916:	6078      	str	r0, [r7, #4]
   20918:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
   2091a:	6839      	ldr	r1, [r7, #0]
   2091c:	6878      	ldr	r0, [r7, #4]
   2091e:	2300      	movs	r3, #0
   20920:	9300      	str	r3, [sp, #0]
   20922:	2300      	movs	r3, #0
   20924:	2200      	movs	r2, #0
   20926:	4c03      	ldr	r4, [pc, #12]	; (20934 <sd_mmc_spi_send_cmd+0x24>)
   20928:	47a0      	blx	r4
   2092a:	0003      	movs	r3, r0
}
   2092c:	0018      	movs	r0, r3
   2092e:	46bd      	mov	sp, r7
   20930:	b003      	add	sp, #12
   20932:	bd90      	pop	{r4, r7, pc}
   20934:	00020939 	.word	0x00020939

00020938 <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
   20938:	b590      	push	{r4, r7, lr}
   2093a:	b089      	sub	sp, #36	; 0x24
   2093c:	af00      	add	r7, sp, #0
   2093e:	60f8      	str	r0, [r7, #12]
   20940:	60b9      	str	r1, [r7, #8]
   20942:	0019      	movs	r1, r3
   20944:	1dbb      	adds	r3, r7, #6
   20946:	801a      	strh	r2, [r3, #0]
   20948:	1d3b      	adds	r3, r7, #4
   2094a:	1c0a      	adds	r2, r1, #0
   2094c:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
   2094e:	231b      	movs	r3, #27
   20950:	18fb      	adds	r3, r7, r3
   20952:	22ff      	movs	r2, #255	; 0xff
   20954:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
   20956:	231c      	movs	r3, #28
   20958:	18fb      	adds	r3, r7, r3
   2095a:	22ff      	movs	r2, #255	; 0xff
   2095c:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   2095e:	4b72      	ldr	r3, [pc, #456]	; (20b28 <sd_mmc_spi_adtc_start+0x1f0>)
   20960:	2200      	movs	r2, #0
   20962:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
   20964:	68fb      	ldr	r3, [r7, #12]
   20966:	b2db      	uxtb	r3, r3
   20968:	223f      	movs	r2, #63	; 0x3f
   2096a:	4013      	ands	r3, r2
   2096c:	b2db      	uxtb	r3, r3
   2096e:	2240      	movs	r2, #64	; 0x40
   20970:	4313      	orrs	r3, r2
   20972:	b2da      	uxtb	r2, r3
   20974:	2314      	movs	r3, #20
   20976:	18fb      	adds	r3, r7, r3
   20978:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
   2097a:	68bb      	ldr	r3, [r7, #8]
   2097c:	0e1b      	lsrs	r3, r3, #24
   2097e:	b2da      	uxtb	r2, r3
   20980:	2314      	movs	r3, #20
   20982:	18fb      	adds	r3, r7, r3
   20984:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
   20986:	68bb      	ldr	r3, [r7, #8]
   20988:	0c1b      	lsrs	r3, r3, #16
   2098a:	b2da      	uxtb	r2, r3
   2098c:	2314      	movs	r3, #20
   2098e:	18fb      	adds	r3, r7, r3
   20990:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
   20992:	68bb      	ldr	r3, [r7, #8]
   20994:	0a1b      	lsrs	r3, r3, #8
   20996:	b2da      	uxtb	r2, r3
   20998:	2314      	movs	r3, #20
   2099a:	18fb      	adds	r3, r7, r3
   2099c:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
   2099e:	68bb      	ldr	r3, [r7, #8]
   209a0:	b2da      	uxtb	r2, r3
   209a2:	2314      	movs	r3, #20
   209a4:	18fb      	adds	r3, r7, r3
   209a6:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
   209a8:	2314      	movs	r3, #20
   209aa:	18fb      	adds	r3, r7, r3
   209ac:	2105      	movs	r1, #5
   209ae:	0018      	movs	r0, r3
   209b0:	4b5e      	ldr	r3, [pc, #376]	; (20b2c <sd_mmc_spi_adtc_start+0x1f4>)
   209b2:	4798      	blx	r3
   209b4:	0003      	movs	r3, r0
   209b6:	001a      	movs	r2, r3
   209b8:	2314      	movs	r3, #20
   209ba:	18fb      	adds	r3, r7, r3
   209bc:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
   209be:	231b      	movs	r3, #27
   209c0:	18f9      	adds	r1, r7, r3
   209c2:	4b5b      	ldr	r3, [pc, #364]	; (20b30 <sd_mmc_spi_adtc_start+0x1f8>)
   209c4:	2201      	movs	r2, #1
   209c6:	0018      	movs	r0, r3
   209c8:	4b5a      	ldr	r3, [pc, #360]	; (20b34 <sd_mmc_spi_adtc_start+0x1fc>)
   209ca:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
   209cc:	2314      	movs	r3, #20
   209ce:	18f9      	adds	r1, r7, r3
   209d0:	4b57      	ldr	r3, [pc, #348]	; (20b30 <sd_mmc_spi_adtc_start+0x1f8>)
   209d2:	2206      	movs	r2, #6
   209d4:	0018      	movs	r0, r3
   209d6:	4b57      	ldr	r3, [pc, #348]	; (20b34 <sd_mmc_spi_adtc_start+0x1fc>)
   209d8:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
   209da:	2313      	movs	r3, #19
   209dc:	18fb      	adds	r3, r7, r3
   209de:	22ff      	movs	r2, #255	; 0xff
   209e0:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   209e2:	231c      	movs	r3, #28
   209e4:	18fb      	adds	r3, r7, r3
   209e6:	881b      	ldrh	r3, [r3, #0]
   209e8:	2213      	movs	r2, #19
   209ea:	18b9      	adds	r1, r7, r2
   209ec:	4850      	ldr	r0, [pc, #320]	; (20b30 <sd_mmc_spi_adtc_start+0x1f8>)
   209ee:	2201      	movs	r2, #1
   209f0:	4c51      	ldr	r4, [pc, #324]	; (20b38 <sd_mmc_spi_adtc_start+0x200>)
   209f2:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
   209f4:	231f      	movs	r3, #31
   209f6:	18fb      	adds	r3, r7, r3
   209f8:	2207      	movs	r2, #7
   209fa:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   209fc:	231c      	movs	r3, #28
   209fe:	18fb      	adds	r3, r7, r3
   20a00:	881b      	ldrh	r3, [r3, #0]
   20a02:	2213      	movs	r2, #19
   20a04:	18b9      	adds	r1, r7, r2
   20a06:	484a      	ldr	r0, [pc, #296]	; (20b30 <sd_mmc_spi_adtc_start+0x1f8>)
   20a08:	2201      	movs	r2, #1
   20a0a:	4c4b      	ldr	r4, [pc, #300]	; (20b38 <sd_mmc_spi_adtc_start+0x200>)
   20a0c:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
   20a0e:	2313      	movs	r3, #19
   20a10:	18fb      	adds	r3, r7, r3
   20a12:	781b      	ldrb	r3, [r3, #0]
   20a14:	b25b      	sxtb	r3, r3
   20a16:	2b00      	cmp	r3, #0
   20a18:	da10      	bge.n	20a3c <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
   20a1a:	231f      	movs	r3, #31
   20a1c:	18fb      	adds	r3, r7, r3
   20a1e:	221f      	movs	r2, #31
   20a20:	18ba      	adds	r2, r7, r2
   20a22:	7812      	ldrb	r2, [r2, #0]
   20a24:	3a01      	subs	r2, #1
   20a26:	701a      	strb	r2, [r3, #0]
   20a28:	231f      	movs	r3, #31
   20a2a:	18fb      	adds	r3, r7, r3
   20a2c:	781b      	ldrb	r3, [r3, #0]
   20a2e:	2b00      	cmp	r3, #0
   20a30:	d1e4      	bne.n	209fc <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
   20a32:	4b3d      	ldr	r3, [pc, #244]	; (20b28 <sd_mmc_spi_adtc_start+0x1f0>)
   20a34:	2202      	movs	r2, #2
   20a36:	701a      	strb	r2, [r3, #0]
			return false;
   20a38:	2300      	movs	r3, #0
   20a3a:	e070      	b.n	20b1e <sd_mmc_spi_adtc_start+0x1e6>
			break;
   20a3c:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
   20a3e:	2313      	movs	r3, #19
   20a40:	18fb      	adds	r3, r7, r3
   20a42:	781b      	ldrb	r3, [r3, #0]
   20a44:	001a      	movs	r2, r3
   20a46:	4b3d      	ldr	r3, [pc, #244]	; (20b3c <sd_mmc_spi_adtc_start+0x204>)
   20a48:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
   20a4a:	2313      	movs	r3, #19
   20a4c:	18fb      	adds	r3, r7, r3
   20a4e:	781b      	ldrb	r3, [r3, #0]
   20a50:	001a      	movs	r2, r3
   20a52:	2308      	movs	r3, #8
   20a54:	4013      	ands	r3, r2
   20a56:	d004      	beq.n	20a62 <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
   20a58:	4b33      	ldr	r3, [pc, #204]	; (20b28 <sd_mmc_spi_adtc_start+0x1f0>)
   20a5a:	2206      	movs	r2, #6
   20a5c:	701a      	strb	r2, [r3, #0]
		return false;
   20a5e:	2300      	movs	r3, #0
   20a60:	e05d      	b.n	20b1e <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
   20a62:	2313      	movs	r3, #19
   20a64:	18fb      	adds	r3, r7, r3
   20a66:	781b      	ldrb	r3, [r3, #0]
   20a68:	001a      	movs	r2, r3
   20a6a:	2304      	movs	r3, #4
   20a6c:	4013      	ands	r3, r2
   20a6e:	d004      	beq.n	20a7a <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
   20a70:	4b2d      	ldr	r3, [pc, #180]	; (20b28 <sd_mmc_spi_adtc_start+0x1f0>)
   20a72:	2209      	movs	r2, #9
   20a74:	701a      	strb	r2, [r3, #0]
		return false;
   20a76:	2300      	movs	r3, #0
   20a78:	e051      	b.n	20b1e <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
   20a7a:	2313      	movs	r3, #19
   20a7c:	18fb      	adds	r3, r7, r3
   20a7e:	781b      	ldrb	r3, [r3, #0]
   20a80:	001a      	movs	r2, r3
   20a82:	2301      	movs	r3, #1
   20a84:	439a      	bics	r2, r3
   20a86:	1e13      	subs	r3, r2, #0
   20a88:	d004      	beq.n	20a94 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   20a8a:	4b27      	ldr	r3, [pc, #156]	; (20b28 <sd_mmc_spi_adtc_start+0x1f0>)
   20a8c:	2201      	movs	r2, #1
   20a8e:	701a      	strb	r2, [r3, #0]
		return false;
   20a90:	2300      	movs	r3, #0
   20a92:	e044      	b.n	20b1e <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
   20a94:	68fa      	ldr	r2, [r7, #12]
   20a96:	2380      	movs	r3, #128	; 0x80
   20a98:	019b      	lsls	r3, r3, #6
   20a9a:	4013      	ands	r3, r2
   20a9c:	d00d      	beq.n	20aba <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
   20a9e:	4b28      	ldr	r3, [pc, #160]	; (20b40 <sd_mmc_spi_adtc_start+0x208>)
   20aa0:	4798      	blx	r3
   20aa2:	0003      	movs	r3, r0
   20aa4:	001a      	movs	r2, r3
   20aa6:	2301      	movs	r3, #1
   20aa8:	4053      	eors	r3, r2
   20aaa:	b2db      	uxtb	r3, r3
   20aac:	2b00      	cmp	r3, #0
   20aae:	d004      	beq.n	20aba <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
   20ab0:	4b1d      	ldr	r3, [pc, #116]	; (20b28 <sd_mmc_spi_adtc_start+0x1f0>)
   20ab2:	2203      	movs	r2, #3
   20ab4:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
   20ab6:	2300      	movs	r3, #0
   20ab8:	e031      	b.n	20b1e <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
   20aba:	68fa      	ldr	r2, [r7, #12]
   20abc:	2380      	movs	r3, #128	; 0x80
   20abe:	009b      	lsls	r3, r3, #2
   20ac0:	4013      	ands	r3, r2
   20ac2:	d00e      	beq.n	20ae2 <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
   20ac4:	4b1d      	ldr	r3, [pc, #116]	; (20b3c <sd_mmc_spi_adtc_start+0x204>)
   20ac6:	2200      	movs	r2, #0
   20ac8:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
   20aca:	231c      	movs	r3, #28
   20acc:	18fb      	adds	r3, r7, r3
   20ace:	881b      	ldrh	r3, [r3, #0]
   20ad0:	491a      	ldr	r1, [pc, #104]	; (20b3c <sd_mmc_spi_adtc_start+0x204>)
   20ad2:	4817      	ldr	r0, [pc, #92]	; (20b30 <sd_mmc_spi_adtc_start+0x1f8>)
   20ad4:	2201      	movs	r2, #1
   20ad6:	4c18      	ldr	r4, [pc, #96]	; (20b38 <sd_mmc_spi_adtc_start+0x200>)
   20ad8:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
   20ada:	4b18      	ldr	r3, [pc, #96]	; (20b3c <sd_mmc_spi_adtc_start+0x204>)
   20adc:	681a      	ldr	r2, [r3, #0]
   20ade:	4b17      	ldr	r3, [pc, #92]	; (20b3c <sd_mmc_spi_adtc_start+0x204>)
   20ae0:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
   20ae2:	68fa      	ldr	r2, [r7, #12]
   20ae4:	2380      	movs	r3, #128	; 0x80
   20ae6:	00db      	lsls	r3, r3, #3
   20ae8:	4013      	ands	r3, r2
   20aea:	d00c      	beq.n	20b06 <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
   20aec:	231c      	movs	r3, #28
   20aee:	18fb      	adds	r3, r7, r3
   20af0:	881b      	ldrh	r3, [r3, #0]
   20af2:	4912      	ldr	r1, [pc, #72]	; (20b3c <sd_mmc_spi_adtc_start+0x204>)
   20af4:	480e      	ldr	r0, [pc, #56]	; (20b30 <sd_mmc_spi_adtc_start+0x1f8>)
   20af6:	2204      	movs	r2, #4
   20af8:	4c0f      	ldr	r4, [pc, #60]	; (20b38 <sd_mmc_spi_adtc_start+0x200>)
   20afa:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
   20afc:	4b0f      	ldr	r3, [pc, #60]	; (20b3c <sd_mmc_spi_adtc_start+0x204>)
   20afe:	681b      	ldr	r3, [r3, #0]
   20b00:	ba1a      	rev	r2, r3
   20b02:	4b0e      	ldr	r3, [pc, #56]	; (20b3c <sd_mmc_spi_adtc_start+0x204>)
   20b04:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
   20b06:	4b0f      	ldr	r3, [pc, #60]	; (20b44 <sd_mmc_spi_adtc_start+0x20c>)
   20b08:	1dba      	adds	r2, r7, #6
   20b0a:	8812      	ldrh	r2, [r2, #0]
   20b0c:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
   20b0e:	4b0e      	ldr	r3, [pc, #56]	; (20b48 <sd_mmc_spi_adtc_start+0x210>)
   20b10:	1d3a      	adds	r2, r7, #4
   20b12:	8812      	ldrh	r2, [r2, #0]
   20b14:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
   20b16:	4b0d      	ldr	r3, [pc, #52]	; (20b4c <sd_mmc_spi_adtc_start+0x214>)
   20b18:	2200      	movs	r2, #0
   20b1a:	601a      	str	r2, [r3, #0]
	return true; // Command complete
   20b1c:	2301      	movs	r3, #1
}
   20b1e:	0018      	movs	r0, r3
   20b20:	46bd      	mov	sp, r7
   20b22:	b009      	add	sp, #36	; 0x24
   20b24:	bd90      	pop	{r4, r7, pc}
   20b26:	46c0      	nop			; (mov r8, r8)
   20b28:	20004293 	.word	0x20004293
   20b2c:	000203d9 	.word	0x000203d9
   20b30:	20004250 	.word	0x20004250
   20b34:	00028e25 	.word	0x00028e25
   20b38:	00028c01 	.word	0x00028c01
   20b3c:	20004294 	.word	0x20004294
   20b40:	00020495 	.word	0x00020495
   20b44:	2000429c 	.word	0x2000429c
   20b48:	2000429e 	.word	0x2000429e
   20b4c:	20004298 	.word	0x20004298

00020b50 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
   20b50:	b580      	push	{r7, lr}
   20b52:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
   20b54:	4b02      	ldr	r3, [pc, #8]	; (20b60 <sd_mmc_spi_get_response+0x10>)
   20b56:	681b      	ldr	r3, [r3, #0]
}
   20b58:	0018      	movs	r0, r3
   20b5a:	46bd      	mov	sp, r7
   20b5c:	bd80      	pop	{r7, pc}
   20b5e:	46c0      	nop			; (mov r8, r8)
   20b60:	20004294 	.word	0x20004294

00020b64 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
   20b64:	b590      	push	{r4, r7, lr}
   20b66:	b085      	sub	sp, #20
   20b68:	af00      	add	r7, sp, #0
   20b6a:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
   20b6c:	230e      	movs	r3, #14
   20b6e:	18fb      	adds	r3, r7, r3
   20b70:	22ff      	movs	r2, #255	; 0xff
   20b72:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20b74:	4b1c      	ldr	r3, [pc, #112]	; (20be8 <sd_mmc_spi_read_word+0x84>)
   20b76:	2200      	movs	r2, #0
   20b78:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   20b7a:	4b1c      	ldr	r3, [pc, #112]	; (20bec <sd_mmc_spi_read_word+0x88>)
   20b7c:	681a      	ldr	r2, [r3, #0]
   20b7e:	4b1c      	ldr	r3, [pc, #112]	; (20bf0 <sd_mmc_spi_read_word+0x8c>)
   20b80:	881b      	ldrh	r3, [r3, #0]
   20b82:	0019      	movs	r1, r3
   20b84:	4b1b      	ldr	r3, [pc, #108]	; (20bf4 <sd_mmc_spi_read_word+0x90>)
   20b86:	0010      	movs	r0, r2
   20b88:	4798      	blx	r3
   20b8a:	1e0b      	subs	r3, r1, #0
   20b8c:	d10a      	bne.n	20ba4 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
   20b8e:	4b1a      	ldr	r3, [pc, #104]	; (20bf8 <sd_mmc_spi_read_word+0x94>)
   20b90:	4798      	blx	r3
   20b92:	0003      	movs	r3, r0
   20b94:	001a      	movs	r2, r3
   20b96:	2301      	movs	r3, #1
   20b98:	4053      	eors	r3, r2
   20b9a:	b2db      	uxtb	r3, r3
   20b9c:	2b00      	cmp	r3, #0
   20b9e:	d001      	beq.n	20ba4 <sd_mmc_spi_read_word+0x40>
			return false;
   20ba0:	2300      	movs	r3, #0
   20ba2:	e01d      	b.n	20be0 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
   20ba4:	230e      	movs	r3, #14
   20ba6:	18fb      	adds	r3, r7, r3
   20ba8:	881b      	ldrh	r3, [r3, #0]
   20baa:	1d39      	adds	r1, r7, #4
   20bac:	4813      	ldr	r0, [pc, #76]	; (20bfc <sd_mmc_spi_read_word+0x98>)
   20bae:	2204      	movs	r2, #4
   20bb0:	4c13      	ldr	r4, [pc, #76]	; (20c00 <sd_mmc_spi_read_word+0x9c>)
   20bb2:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
   20bb4:	687b      	ldr	r3, [r7, #4]
   20bb6:	687a      	ldr	r2, [r7, #4]
   20bb8:	6812      	ldr	r2, [r2, #0]
   20bba:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
   20bbc:	4b0b      	ldr	r3, [pc, #44]	; (20bec <sd_mmc_spi_read_word+0x88>)
   20bbe:	681b      	ldr	r3, [r3, #0]
   20bc0:	1d1a      	adds	r2, r3, #4
   20bc2:	4b0a      	ldr	r3, [pc, #40]	; (20bec <sd_mmc_spi_read_word+0x88>)
   20bc4:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   20bc6:	4b09      	ldr	r3, [pc, #36]	; (20bec <sd_mmc_spi_read_word+0x88>)
   20bc8:	681a      	ldr	r2, [r3, #0]
   20bca:	4b09      	ldr	r3, [pc, #36]	; (20bf0 <sd_mmc_spi_read_word+0x8c>)
   20bcc:	881b      	ldrh	r3, [r3, #0]
   20bce:	0019      	movs	r1, r3
   20bd0:	4b08      	ldr	r3, [pc, #32]	; (20bf4 <sd_mmc_spi_read_word+0x90>)
   20bd2:	0010      	movs	r0, r2
   20bd4:	4798      	blx	r3
   20bd6:	1e0b      	subs	r3, r1, #0
   20bd8:	d101      	bne.n	20bde <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
   20bda:	4b0a      	ldr	r3, [pc, #40]	; (20c04 <sd_mmc_spi_read_word+0xa0>)
   20bdc:	4798      	blx	r3
	}
	return true;
   20bde:	2301      	movs	r3, #1
}
   20be0:	0018      	movs	r0, r3
   20be2:	46bd      	mov	sp, r7
   20be4:	b005      	add	sp, #20
   20be6:	bd90      	pop	{r4, r7, pc}
   20be8:	20004293 	.word	0x20004293
   20bec:	20004298 	.word	0x20004298
   20bf0:	2000429c 	.word	0x2000429c
   20bf4:	00033721 	.word	0x00033721
   20bf8:	00020501 	.word	0x00020501
   20bfc:	20004250 	.word	0x20004250
   20c00:	00028c01 	.word	0x00028c01
   20c04:	00020585 	.word	0x00020585

00020c08 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
   20c08:	b590      	push	{r4, r7, lr}
   20c0a:	b085      	sub	sp, #20
   20c0c:	af00      	add	r7, sp, #0
   20c0e:	6078      	str	r0, [r7, #4]
   20c10:	000a      	movs	r2, r1
   20c12:	1cbb      	adds	r3, r7, #2
   20c14:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
   20c16:	230a      	movs	r3, #10
   20c18:	18fb      	adds	r3, r7, r3
   20c1a:	22ff      	movs	r2, #255	; 0xff
   20c1c:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20c1e:	4b1c      	ldr	r3, [pc, #112]	; (20c90 <sd_mmc_spi_start_read_blocks+0x88>)
   20c20:	2200      	movs	r2, #0
   20c22:	701a      	strb	r2, [r3, #0]
	pos = 0;
   20c24:	2300      	movs	r3, #0
   20c26:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   20c28:	e025      	b.n	20c76 <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
   20c2a:	4b1a      	ldr	r3, [pc, #104]	; (20c94 <sd_mmc_spi_start_read_blocks+0x8c>)
   20c2c:	4798      	blx	r3
   20c2e:	0003      	movs	r3, r0
   20c30:	001a      	movs	r2, r3
   20c32:	2301      	movs	r3, #1
   20c34:	4053      	eors	r3, r2
   20c36:	b2db      	uxtb	r3, r3
   20c38:	2b00      	cmp	r3, #0
   20c3a:	d001      	beq.n	20c40 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
   20c3c:	2300      	movs	r3, #0
   20c3e:	e022      	b.n	20c86 <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
   20c40:	687a      	ldr	r2, [r7, #4]
   20c42:	68fb      	ldr	r3, [r7, #12]
   20c44:	18d1      	adds	r1, r2, r3
   20c46:	4b14      	ldr	r3, [pc, #80]	; (20c98 <sd_mmc_spi_start_read_blocks+0x90>)
   20c48:	881a      	ldrh	r2, [r3, #0]
   20c4a:	230a      	movs	r3, #10
   20c4c:	18fb      	adds	r3, r7, r3
   20c4e:	881b      	ldrh	r3, [r3, #0]
   20c50:	4812      	ldr	r0, [pc, #72]	; (20c9c <sd_mmc_spi_start_read_blocks+0x94>)
   20c52:	4c13      	ldr	r4, [pc, #76]	; (20ca0 <sd_mmc_spi_start_read_blocks+0x98>)
   20c54:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
   20c56:	4b10      	ldr	r3, [pc, #64]	; (20c98 <sd_mmc_spi_start_read_blocks+0x90>)
   20c58:	881b      	ldrh	r3, [r3, #0]
   20c5a:	001a      	movs	r2, r3
   20c5c:	68fb      	ldr	r3, [r7, #12]
   20c5e:	189b      	adds	r3, r3, r2
   20c60:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   20c62:	4b0d      	ldr	r3, [pc, #52]	; (20c98 <sd_mmc_spi_start_read_blocks+0x90>)
   20c64:	881b      	ldrh	r3, [r3, #0]
   20c66:	001a      	movs	r2, r3
   20c68:	4b0e      	ldr	r3, [pc, #56]	; (20ca4 <sd_mmc_spi_start_read_blocks+0x9c>)
   20c6a:	681b      	ldr	r3, [r3, #0]
   20c6c:	18d2      	adds	r2, r2, r3
   20c6e:	4b0d      	ldr	r3, [pc, #52]	; (20ca4 <sd_mmc_spi_start_read_blocks+0x9c>)
   20c70:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
   20c72:	4b0d      	ldr	r3, [pc, #52]	; (20ca8 <sd_mmc_spi_start_read_blocks+0xa0>)
   20c74:	4798      	blx	r3
	while (nb_block--) {
   20c76:	1cbb      	adds	r3, r7, #2
   20c78:	881b      	ldrh	r3, [r3, #0]
   20c7a:	1cba      	adds	r2, r7, #2
   20c7c:	1e59      	subs	r1, r3, #1
   20c7e:	8011      	strh	r1, [r2, #0]
   20c80:	2b00      	cmp	r3, #0
   20c82:	d1d2      	bne.n	20c2a <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
   20c84:	2301      	movs	r3, #1
}
   20c86:	0018      	movs	r0, r3
   20c88:	46bd      	mov	sp, r7
   20c8a:	b005      	add	sp, #20
   20c8c:	bd90      	pop	{r4, r7, pc}
   20c8e:	46c0      	nop			; (mov r8, r8)
   20c90:	20004293 	.word	0x20004293
   20c94:	00020501 	.word	0x00020501
   20c98:	2000429c 	.word	0x2000429c
   20c9c:	20004250 	.word	0x20004250
   20ca0:	00028c01 	.word	0x00028c01
   20ca4:	20004298 	.word	0x20004298
   20ca8:	00020585 	.word	0x00020585

00020cac <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
   20cac:	b580      	push	{r7, lr}
   20cae:	af00      	add	r7, sp, #0
	return true;
   20cb0:	2301      	movs	r3, #1
}
   20cb2:	0018      	movs	r0, r3
   20cb4:	46bd      	mov	sp, r7
   20cb6:	bd80      	pop	{r7, pc}

00020cb8 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
   20cb8:	b580      	push	{r7, lr}
   20cba:	b084      	sub	sp, #16
   20cbc:	af00      	add	r7, sp, #0
   20cbe:	6078      	str	r0, [r7, #4]
   20cc0:	000a      	movs	r2, r1
   20cc2:	1cbb      	adds	r3, r7, #2
   20cc4:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20cc6:	4b24      	ldr	r3, [pc, #144]	; (20d58 <sd_mmc_spi_start_write_blocks+0xa0>)
   20cc8:	2200      	movs	r2, #0
   20cca:	701a      	strb	r2, [r3, #0]
	pos = 0;
   20ccc:	2300      	movs	r3, #0
   20cce:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   20cd0:	e035      	b.n	20d3e <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
   20cd2:	4b22      	ldr	r3, [pc, #136]	; (20d5c <sd_mmc_spi_start_write_blocks+0xa4>)
   20cd4:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
   20cd6:	687a      	ldr	r2, [r7, #4]
   20cd8:	68fb      	ldr	r3, [r7, #12]
   20cda:	18d1      	adds	r1, r2, r3
   20cdc:	4b20      	ldr	r3, [pc, #128]	; (20d60 <sd_mmc_spi_start_write_blocks+0xa8>)
   20cde:	881a      	ldrh	r2, [r3, #0]
   20ce0:	4b20      	ldr	r3, [pc, #128]	; (20d64 <sd_mmc_spi_start_write_blocks+0xac>)
   20ce2:	0018      	movs	r0, r3
   20ce4:	4b20      	ldr	r3, [pc, #128]	; (20d68 <sd_mmc_spi_start_write_blocks+0xb0>)
   20ce6:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
   20ce8:	4b1d      	ldr	r3, [pc, #116]	; (20d60 <sd_mmc_spi_start_write_blocks+0xa8>)
   20cea:	881b      	ldrh	r3, [r3, #0]
   20cec:	001a      	movs	r2, r3
   20cee:	68fb      	ldr	r3, [r7, #12]
   20cf0:	189b      	adds	r3, r3, r2
   20cf2:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   20cf4:	4b1a      	ldr	r3, [pc, #104]	; (20d60 <sd_mmc_spi_start_write_blocks+0xa8>)
   20cf6:	881b      	ldrh	r3, [r3, #0]
   20cf8:	001a      	movs	r2, r3
   20cfa:	4b1c      	ldr	r3, [pc, #112]	; (20d6c <sd_mmc_spi_start_write_blocks+0xb4>)
   20cfc:	681b      	ldr	r3, [r3, #0]
   20cfe:	18d2      	adds	r2, r2, r3
   20d00:	4b1a      	ldr	r3, [pc, #104]	; (20d6c <sd_mmc_spi_start_write_blocks+0xb4>)
   20d02:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
   20d04:	4b1a      	ldr	r3, [pc, #104]	; (20d70 <sd_mmc_spi_start_write_blocks+0xb8>)
   20d06:	4798      	blx	r3
   20d08:	0003      	movs	r3, r0
   20d0a:	001a      	movs	r2, r3
   20d0c:	2301      	movs	r3, #1
   20d0e:	4053      	eors	r3, r2
   20d10:	b2db      	uxtb	r3, r3
   20d12:	2b00      	cmp	r3, #0
   20d14:	d001      	beq.n	20d1a <sd_mmc_spi_start_write_blocks+0x62>
			return false;
   20d16:	2300      	movs	r3, #0
   20d18:	e019      	b.n	20d4e <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
   20d1a:	1cbb      	adds	r3, r7, #2
   20d1c:	881b      	ldrh	r3, [r3, #0]
   20d1e:	2b00      	cmp	r3, #0
   20d20:	d00d      	beq.n	20d3e <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
   20d22:	4b14      	ldr	r3, [pc, #80]	; (20d74 <sd_mmc_spi_start_write_blocks+0xbc>)
   20d24:	4798      	blx	r3
   20d26:	0003      	movs	r3, r0
   20d28:	001a      	movs	r2, r3
   20d2a:	2301      	movs	r3, #1
   20d2c:	4053      	eors	r3, r2
   20d2e:	b2db      	uxtb	r3, r3
   20d30:	2b00      	cmp	r3, #0
   20d32:	d004      	beq.n	20d3e <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   20d34:	4b08      	ldr	r3, [pc, #32]	; (20d58 <sd_mmc_spi_start_write_blocks+0xa0>)
   20d36:	2205      	movs	r2, #5
   20d38:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
   20d3a:	2300      	movs	r3, #0
   20d3c:	e007      	b.n	20d4e <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
   20d3e:	1cbb      	adds	r3, r7, #2
   20d40:	881b      	ldrh	r3, [r3, #0]
   20d42:	1cba      	adds	r2, r7, #2
   20d44:	1e59      	subs	r1, r3, #1
   20d46:	8011      	strh	r1, [r2, #0]
   20d48:	2b00      	cmp	r3, #0
   20d4a:	d1c2      	bne.n	20cd2 <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
   20d4c:	2301      	movs	r3, #1
}
   20d4e:	0018      	movs	r0, r3
   20d50:	46bd      	mov	sp, r7
   20d52:	b004      	add	sp, #16
   20d54:	bd80      	pop	{r7, pc}
   20d56:	46c0      	nop			; (mov r8, r8)
   20d58:	20004293 	.word	0x20004293
   20d5c:	000205b1 	.word	0x000205b1
   20d60:	2000429c 	.word	0x2000429c
   20d64:	20004250 	.word	0x20004250
   20d68:	00028e25 	.word	0x00028e25
   20d6c:	20004298 	.word	0x20004298
   20d70:	00020601 	.word	0x00020601
   20d74:	00020495 	.word	0x00020495

00020d78 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
   20d78:	b580      	push	{r7, lr}
   20d7a:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
   20d7c:	4b09      	ldr	r3, [pc, #36]	; (20da4 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
   20d7e:	4798      	blx	r3
   20d80:	0003      	movs	r3, r0
   20d82:	001a      	movs	r2, r3
   20d84:	2301      	movs	r3, #1
   20d86:	4053      	eors	r3, r2
   20d88:	b2db      	uxtb	r3, r3
   20d8a:	2b00      	cmp	r3, #0
   20d8c:	d004      	beq.n	20d98 <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   20d8e:	4b06      	ldr	r3, [pc, #24]	; (20da8 <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
   20d90:	2205      	movs	r2, #5
   20d92:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
   20d94:	2300      	movs	r3, #0
   20d96:	e002      	b.n	20d9e <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
   20d98:	4b04      	ldr	r3, [pc, #16]	; (20dac <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
   20d9a:	4798      	blx	r3
   20d9c:	0003      	movs	r3, r0
}
   20d9e:	0018      	movs	r0, r3
   20da0:	46bd      	mov	sp, r7
   20da2:	bd80      	pop	{r7, pc}
   20da4:	00020495 	.word	0x00020495
   20da8:	20004293 	.word	0x20004293
   20dac:	00020695 	.word	0x00020695

00020db0 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   20db0:	b580      	push	{r7, lr}
   20db2:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
   20db4:	2000      	movs	r0, #0
   20db6:	4b0f      	ldr	r3, [pc, #60]	; (20df4 <delay_init+0x44>)
   20db8:	4798      	blx	r3
   20dba:	0002      	movs	r2, r0
   20dbc:	4b0e      	ldr	r3, [pc, #56]	; (20df8 <delay_init+0x48>)
   20dbe:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
   20dc0:	4b0d      	ldr	r3, [pc, #52]	; (20df8 <delay_init+0x48>)
   20dc2:	6818      	ldr	r0, [r3, #0]
   20dc4:	4b0d      	ldr	r3, [pc, #52]	; (20dfc <delay_init+0x4c>)
   20dc6:	22fa      	movs	r2, #250	; 0xfa
   20dc8:	0091      	lsls	r1, r2, #2
   20dca:	4798      	blx	r3
   20dcc:	0003      	movs	r3, r0
   20dce:	001a      	movs	r2, r3
   20dd0:	4b09      	ldr	r3, [pc, #36]	; (20df8 <delay_init+0x48>)
   20dd2:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   20dd4:	4b08      	ldr	r3, [pc, #32]	; (20df8 <delay_init+0x48>)
   20dd6:	6818      	ldr	r0, [r3, #0]
   20dd8:	4b08      	ldr	r3, [pc, #32]	; (20dfc <delay_init+0x4c>)
   20dda:	22fa      	movs	r2, #250	; 0xfa
   20ddc:	0091      	lsls	r1, r2, #2
   20dde:	4798      	blx	r3
   20de0:	0003      	movs	r3, r0
   20de2:	001a      	movs	r2, r3
   20de4:	4b06      	ldr	r3, [pc, #24]	; (20e00 <delay_init+0x50>)
   20de6:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   20de8:	4b06      	ldr	r3, [pc, #24]	; (20e04 <delay_init+0x54>)
   20dea:	2205      	movs	r2, #5
   20dec:	601a      	str	r2, [r3, #0]
}
   20dee:	46c0      	nop			; (mov r8, r8)
   20df0:	46bd      	mov	sp, r7
   20df2:	bd80      	pop	{r7, pc}
   20df4:	0002a9a9 	.word	0x0002a9a9
   20df8:	2000011c 	.word	0x2000011c
   20dfc:	00033615 	.word	0x00033615
   20e00:	20000120 	.word	0x20000120
   20e04:	e000e010 	.word	0xe000e010

00020e08 <system_pinmux_get_group_from_gpio_pin>:
{
   20e08:	b580      	push	{r7, lr}
   20e0a:	b084      	sub	sp, #16
   20e0c:	af00      	add	r7, sp, #0
   20e0e:	0002      	movs	r2, r0
   20e10:	1dfb      	adds	r3, r7, #7
   20e12:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   20e14:	230f      	movs	r3, #15
   20e16:	18fb      	adds	r3, r7, r3
   20e18:	1dfa      	adds	r2, r7, #7
   20e1a:	7812      	ldrb	r2, [r2, #0]
   20e1c:	09d2      	lsrs	r2, r2, #7
   20e1e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   20e20:	230e      	movs	r3, #14
   20e22:	18fb      	adds	r3, r7, r3
   20e24:	1dfa      	adds	r2, r7, #7
   20e26:	7812      	ldrb	r2, [r2, #0]
   20e28:	0952      	lsrs	r2, r2, #5
   20e2a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   20e2c:	4b0d      	ldr	r3, [pc, #52]	; (20e64 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   20e2e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   20e30:	230f      	movs	r3, #15
   20e32:	18fb      	adds	r3, r7, r3
   20e34:	781b      	ldrb	r3, [r3, #0]
   20e36:	2b00      	cmp	r3, #0
   20e38:	d10f      	bne.n	20e5a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   20e3a:	230f      	movs	r3, #15
   20e3c:	18fb      	adds	r3, r7, r3
   20e3e:	781b      	ldrb	r3, [r3, #0]
   20e40:	009b      	lsls	r3, r3, #2
   20e42:	2210      	movs	r2, #16
   20e44:	4694      	mov	ip, r2
   20e46:	44bc      	add	ip, r7
   20e48:	4463      	add	r3, ip
   20e4a:	3b08      	subs	r3, #8
   20e4c:	681a      	ldr	r2, [r3, #0]
   20e4e:	230e      	movs	r3, #14
   20e50:	18fb      	adds	r3, r7, r3
   20e52:	781b      	ldrb	r3, [r3, #0]
   20e54:	01db      	lsls	r3, r3, #7
   20e56:	18d3      	adds	r3, r2, r3
   20e58:	e000      	b.n	20e5c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   20e5a:	2300      	movs	r3, #0
}
   20e5c:	0018      	movs	r0, r3
   20e5e:	46bd      	mov	sp, r7
   20e60:	b004      	add	sp, #16
   20e62:	bd80      	pop	{r7, pc}
   20e64:	41004400 	.word	0x41004400

00020e68 <system_interrupt_enable_global>:
{
   20e68:	b580      	push	{r7, lr}
   20e6a:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   20e6c:	4b04      	ldr	r3, [pc, #16]	; (20e80 <system_interrupt_enable_global+0x18>)
   20e6e:	2201      	movs	r2, #1
   20e70:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   20e72:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   20e76:	b662      	cpsie	i
}
   20e78:	46c0      	nop			; (mov r8, r8)
   20e7a:	46bd      	mov	sp, r7
   20e7c:	bd80      	pop	{r7, pc}
   20e7e:	46c0      	nop			; (mov r8, r8)
   20e80:	20000126 	.word	0x20000126

00020e84 <port_get_group_from_gpio_pin>:
{
   20e84:	b580      	push	{r7, lr}
   20e86:	b082      	sub	sp, #8
   20e88:	af00      	add	r7, sp, #0
   20e8a:	0002      	movs	r2, r0
   20e8c:	1dfb      	adds	r3, r7, #7
   20e8e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   20e90:	1dfb      	adds	r3, r7, #7
   20e92:	781b      	ldrb	r3, [r3, #0]
   20e94:	0018      	movs	r0, r3
   20e96:	4b03      	ldr	r3, [pc, #12]	; (20ea4 <port_get_group_from_gpio_pin+0x20>)
   20e98:	4798      	blx	r3
   20e9a:	0003      	movs	r3, r0
}
   20e9c:	0018      	movs	r0, r3
   20e9e:	46bd      	mov	sp, r7
   20ea0:	b002      	add	sp, #8
   20ea2:	bd80      	pop	{r7, pc}
   20ea4:	00020e09 	.word	0x00020e09

00020ea8 <port_get_config_defaults>:
{
   20ea8:	b580      	push	{r7, lr}
   20eaa:	b082      	sub	sp, #8
   20eac:	af00      	add	r7, sp, #0
   20eae:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   20eb0:	687b      	ldr	r3, [r7, #4]
   20eb2:	2200      	movs	r2, #0
   20eb4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   20eb6:	687b      	ldr	r3, [r7, #4]
   20eb8:	2201      	movs	r2, #1
   20eba:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   20ebc:	687b      	ldr	r3, [r7, #4]
   20ebe:	2200      	movs	r2, #0
   20ec0:	709a      	strb	r2, [r3, #2]
}
   20ec2:	46c0      	nop			; (mov r8, r8)
   20ec4:	46bd      	mov	sp, r7
   20ec6:	b002      	add	sp, #8
   20ec8:	bd80      	pop	{r7, pc}
	...

00020ecc <port_pin_set_output_level>:
{
   20ecc:	b580      	push	{r7, lr}
   20ece:	b084      	sub	sp, #16
   20ed0:	af00      	add	r7, sp, #0
   20ed2:	0002      	movs	r2, r0
   20ed4:	1dfb      	adds	r3, r7, #7
   20ed6:	701a      	strb	r2, [r3, #0]
   20ed8:	1dbb      	adds	r3, r7, #6
   20eda:	1c0a      	adds	r2, r1, #0
   20edc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   20ede:	1dfb      	adds	r3, r7, #7
   20ee0:	781b      	ldrb	r3, [r3, #0]
   20ee2:	0018      	movs	r0, r3
   20ee4:	4b0d      	ldr	r3, [pc, #52]	; (20f1c <port_pin_set_output_level+0x50>)
   20ee6:	4798      	blx	r3
   20ee8:	0003      	movs	r3, r0
   20eea:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   20eec:	1dfb      	adds	r3, r7, #7
   20eee:	781b      	ldrb	r3, [r3, #0]
   20ef0:	221f      	movs	r2, #31
   20ef2:	4013      	ands	r3, r2
   20ef4:	2201      	movs	r2, #1
   20ef6:	409a      	lsls	r2, r3
   20ef8:	0013      	movs	r3, r2
   20efa:	60bb      	str	r3, [r7, #8]
	if (level) {
   20efc:	1dbb      	adds	r3, r7, #6
   20efe:	781b      	ldrb	r3, [r3, #0]
   20f00:	2b00      	cmp	r3, #0
   20f02:	d003      	beq.n	20f0c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   20f04:	68fb      	ldr	r3, [r7, #12]
   20f06:	68ba      	ldr	r2, [r7, #8]
   20f08:	619a      	str	r2, [r3, #24]
}
   20f0a:	e002      	b.n	20f12 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   20f0c:	68fb      	ldr	r3, [r7, #12]
   20f0e:	68ba      	ldr	r2, [r7, #8]
   20f10:	615a      	str	r2, [r3, #20]
}
   20f12:	46c0      	nop			; (mov r8, r8)
   20f14:	46bd      	mov	sp, r7
   20f16:	b004      	add	sp, #16
   20f18:	bd80      	pop	{r7, pc}
   20f1a:	46c0      	nop			; (mov r8, r8)
   20f1c:	00020e85 	.word	0x00020e85

00020f20 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
   20f20:	b580      	push	{r7, lr}
   20f22:	af00      	add	r7, sp, #0
	if (gpfIsr) {
   20f24:	4b04      	ldr	r3, [pc, #16]	; (20f38 <chip_isr+0x18>)
   20f26:	681b      	ldr	r3, [r3, #0]
   20f28:	2b00      	cmp	r3, #0
   20f2a:	d002      	beq.n	20f32 <chip_isr+0x12>
		gpfIsr();
   20f2c:	4b02      	ldr	r3, [pc, #8]	; (20f38 <chip_isr+0x18>)
   20f2e:	681b      	ldr	r3, [r3, #0]
   20f30:	4798      	blx	r3
	}
}
   20f32:	46c0      	nop			; (mov r8, r8)
   20f34:	46bd      	mov	sp, r7
   20f36:	bd80      	pop	{r7, pc}
   20f38:	200042a0 	.word	0x200042a0

00020f3c <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
   20f3c:	b580      	push	{r7, lr}
   20f3e:	b082      	sub	sp, #8
   20f40:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
   20f42:	1d3b      	adds	r3, r7, #4
   20f44:	0018      	movs	r0, r3
   20f46:	4b10      	ldr	r3, [pc, #64]	; (20f88 <init_chip_pins+0x4c>)
   20f48:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   20f4a:	1d3b      	adds	r3, r7, #4
   20f4c:	2201      	movs	r2, #1
   20f4e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
   20f50:	1d3b      	adds	r3, r7, #4
   20f52:	0019      	movs	r1, r3
   20f54:	201b      	movs	r0, #27
   20f56:	4b0d      	ldr	r3, [pc, #52]	; (20f8c <init_chip_pins+0x50>)
   20f58:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
   20f5a:	1d3b      	adds	r3, r7, #4
   20f5c:	0019      	movs	r1, r3
   20f5e:	201c      	movs	r0, #28
   20f60:	4b0a      	ldr	r3, [pc, #40]	; (20f8c <init_chip_pins+0x50>)
   20f62:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
   20f64:	1d3b      	adds	r3, r7, #4
   20f66:	0019      	movs	r1, r3
   20f68:	2028      	movs	r0, #40	; 0x28
   20f6a:	4b08      	ldr	r3, [pc, #32]	; (20f8c <init_chip_pins+0x50>)
   20f6c:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   20f6e:	2100      	movs	r1, #0
   20f70:	201c      	movs	r0, #28
   20f72:	4b07      	ldr	r3, [pc, #28]	; (20f90 <init_chip_pins+0x54>)
   20f74:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   20f76:	2100      	movs	r1, #0
   20f78:	201b      	movs	r0, #27
   20f7a:	4b05      	ldr	r3, [pc, #20]	; (20f90 <init_chip_pins+0x54>)
   20f7c:	4798      	blx	r3
}
   20f7e:	46c0      	nop			; (mov r8, r8)
   20f80:	46bd      	mov	sp, r7
   20f82:	b002      	add	sp, #8
   20f84:	bd80      	pop	{r7, pc}
   20f86:	46c0      	nop			; (mov r8, r8)
   20f88:	00020ea9 	.word	0x00020ea9
   20f8c:	000275f1 	.word	0x000275f1
   20f90:	00020ecd 	.word	0x00020ecd

00020f94 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
   20f94:	b580      	push	{r7, lr}
   20f96:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
   20f98:	4b0b      	ldr	r3, [pc, #44]	; (20fc8 <nm_bsp_init+0x34>)
   20f9a:	2200      	movs	r2, #0
   20f9c:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
   20f9e:	4b0b      	ldr	r3, [pc, #44]	; (20fcc <nm_bsp_init+0x38>)
   20fa0:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
   20fa2:	4b0b      	ldr	r3, [pc, #44]	; (20fd0 <nm_bsp_init+0x3c>)
   20fa4:	681b      	ldr	r3, [r3, #0]
   20fa6:	2201      	movs	r2, #1
   20fa8:	4013      	ands	r3, r2
   20faa:	d004      	beq.n	20fb6 <nm_bsp_init+0x22>
   20fac:	4b08      	ldr	r3, [pc, #32]	; (20fd0 <nm_bsp_init+0x3c>)
   20fae:	681b      	ldr	r3, [r3, #0]
   20fb0:	2202      	movs	r2, #2
   20fb2:	4013      	ands	r3, r2
   20fb4:	d101      	bne.n	20fba <nm_bsp_init+0x26>
	    delay_init();
   20fb6:	4b07      	ldr	r3, [pc, #28]	; (20fd4 <nm_bsp_init+0x40>)
   20fb8:	4798      	blx	r3
    }

	system_interrupt_enable_global();
   20fba:	4b07      	ldr	r3, [pc, #28]	; (20fd8 <nm_bsp_init+0x44>)
   20fbc:	4798      	blx	r3

	return M2M_SUCCESS;
   20fbe:	2300      	movs	r3, #0
}
   20fc0:	0018      	movs	r0, r3
   20fc2:	46bd      	mov	sp, r7
   20fc4:	bd80      	pop	{r7, pc}
   20fc6:	46c0      	nop			; (mov r8, r8)
   20fc8:	200042a0 	.word	0x200042a0
   20fcc:	00020f3d 	.word	0x00020f3d
   20fd0:	e000e010 	.word	0xe000e010
   20fd4:	00020db1 	.word	0x00020db1
   20fd8:	00020e69 	.word	0x00020e69

00020fdc <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
   20fdc:	b580      	push	{r7, lr}
   20fde:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   20fe0:	2100      	movs	r1, #0
   20fe2:	201c      	movs	r0, #28
   20fe4:	4b0b      	ldr	r3, [pc, #44]	; (21014 <nm_bsp_reset+0x38>)
   20fe6:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   20fe8:	2100      	movs	r1, #0
   20fea:	201b      	movs	r0, #27
   20fec:	4b09      	ldr	r3, [pc, #36]	; (21014 <nm_bsp_reset+0x38>)
   20fee:	4798      	blx	r3
	nm_bsp_sleep(1);
   20ff0:	2001      	movs	r0, #1
   20ff2:	4b09      	ldr	r3, [pc, #36]	; (21018 <nm_bsp_reset+0x3c>)
   20ff4:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
   20ff6:	2101      	movs	r1, #1
   20ff8:	201c      	movs	r0, #28
   20ffa:	4b06      	ldr	r3, [pc, #24]	; (21014 <nm_bsp_reset+0x38>)
   20ffc:	4798      	blx	r3
	nm_bsp_sleep(10);
   20ffe:	200a      	movs	r0, #10
   21000:	4b05      	ldr	r3, [pc, #20]	; (21018 <nm_bsp_reset+0x3c>)
   21002:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
   21004:	2101      	movs	r1, #1
   21006:	201b      	movs	r0, #27
   21008:	4b02      	ldr	r3, [pc, #8]	; (21014 <nm_bsp_reset+0x38>)
   2100a:	4798      	blx	r3
}
   2100c:	46c0      	nop			; (mov r8, r8)
   2100e:	46bd      	mov	sp, r7
   21010:	bd80      	pop	{r7, pc}
   21012:	46c0      	nop			; (mov r8, r8)
   21014:	00020ecd 	.word	0x00020ecd
   21018:	0002101d 	.word	0x0002101d

0002101c <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
   2101c:	b580      	push	{r7, lr}
   2101e:	b082      	sub	sp, #8
   21020:	af00      	add	r7, sp, #0
   21022:	6078      	str	r0, [r7, #4]
#ifdef __FREERTOS__
	vTaskDelay(u32TimeMsec);
   21024:	687b      	ldr	r3, [r7, #4]
   21026:	0018      	movs	r0, r3
   21028:	4b02      	ldr	r3, [pc, #8]	; (21034 <nm_bsp_sleep+0x18>)
   2102a:	4798      	blx	r3
	while (u32TimeMsec--) {
		delay_ms(1);
	}
	
#endif
}
   2102c:	46c0      	nop			; (mov r8, r8)
   2102e:	46bd      	mov	sp, r7
   21030:	b002      	add	sp, #8
   21032:	bd80      	pop	{r7, pc}
   21034:	0001ce31 	.word	0x0001ce31

00021038 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
   21038:	b580      	push	{r7, lr}
   2103a:	b086      	sub	sp, #24
   2103c:	af00      	add	r7, sp, #0
   2103e:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
   21040:	4b15      	ldr	r3, [pc, #84]	; (21098 <nm_bsp_register_isr+0x60>)
   21042:	687a      	ldr	r2, [r7, #4]
   21044:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
   21046:	230c      	movs	r3, #12
   21048:	18fb      	adds	r3, r7, r3
   2104a:	0018      	movs	r0, r3
   2104c:	4b13      	ldr	r3, [pc, #76]	; (2109c <nm_bsp_register_isr+0x64>)
   2104e:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
   21050:	230c      	movs	r3, #12
   21052:	18fb      	adds	r3, r7, r3
   21054:	2229      	movs	r2, #41	; 0x29
   21056:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
   21058:	230c      	movs	r3, #12
   2105a:	18fb      	adds	r3, r7, r3
   2105c:	2200      	movs	r2, #0
   2105e:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   21060:	230c      	movs	r3, #12
   21062:	18fb      	adds	r3, r7, r3
   21064:	2201      	movs	r2, #1
   21066:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   21068:	230c      	movs	r3, #12
   2106a:	18fb      	adds	r3, r7, r3
   2106c:	2202      	movs	r2, #2
   2106e:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
   21070:	230c      	movs	r3, #12
   21072:	18fb      	adds	r3, r7, r3
   21074:	0019      	movs	r1, r3
   21076:	2009      	movs	r0, #9
   21078:	4b09      	ldr	r3, [pc, #36]	; (210a0 <nm_bsp_register_isr+0x68>)
   2107a:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
   2107c:	4b09      	ldr	r3, [pc, #36]	; (210a4 <nm_bsp_register_isr+0x6c>)
   2107e:	2200      	movs	r2, #0
   21080:	2109      	movs	r1, #9
   21082:	0018      	movs	r0, r3
   21084:	4b08      	ldr	r3, [pc, #32]	; (210a8 <nm_bsp_register_isr+0x70>)
   21086:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   21088:	2100      	movs	r1, #0
   2108a:	2009      	movs	r0, #9
   2108c:	4b07      	ldr	r3, [pc, #28]	; (210ac <nm_bsp_register_isr+0x74>)
   2108e:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
   21090:	46c0      	nop			; (mov r8, r8)
   21092:	46bd      	mov	sp, r7
   21094:	b006      	add	sp, #24
   21096:	bd80      	pop	{r7, pc}
   21098:	200042a0 	.word	0x200042a0
   2109c:	00027499 	.word	0x00027499
   210a0:	000274cd 	.word	0x000274cd
   210a4:	00020f21 	.word	0x00020f21
   210a8:	00027099 	.word	0x00027099
   210ac:	000270fd 	.word	0x000270fd

000210b0 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
   210b0:	b580      	push	{r7, lr}
   210b2:	b082      	sub	sp, #8
   210b4:	af00      	add	r7, sp, #0
   210b6:	0002      	movs	r2, r0
   210b8:	1dfb      	adds	r3, r7, #7
   210ba:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
   210bc:	1dfb      	adds	r3, r7, #7
   210be:	781b      	ldrb	r3, [r3, #0]
   210c0:	2b00      	cmp	r3, #0
   210c2:	d004      	beq.n	210ce <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   210c4:	2100      	movs	r1, #0
   210c6:	2009      	movs	r0, #9
   210c8:	4b05      	ldr	r3, [pc, #20]	; (210e0 <nm_bsp_interrupt_ctrl+0x30>)
   210ca:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
   210cc:	e003      	b.n	210d6 <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
   210ce:	2100      	movs	r1, #0
   210d0:	2009      	movs	r0, #9
   210d2:	4b04      	ldr	r3, [pc, #16]	; (210e4 <nm_bsp_interrupt_ctrl+0x34>)
   210d4:	4798      	blx	r3
}
   210d6:	46c0      	nop			; (mov r8, r8)
   210d8:	46bd      	mov	sp, r7
   210da:	b002      	add	sp, #8
   210dc:	bd80      	pop	{r7, pc}
   210de:	46c0      	nop			; (mov r8, r8)
   210e0:	000270fd 	.word	0x000270fd
   210e4:	00027145 	.word	0x00027145

000210e8 <system_pinmux_get_group_from_gpio_pin>:
{
   210e8:	b580      	push	{r7, lr}
   210ea:	b084      	sub	sp, #16
   210ec:	af00      	add	r7, sp, #0
   210ee:	0002      	movs	r2, r0
   210f0:	1dfb      	adds	r3, r7, #7
   210f2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   210f4:	230f      	movs	r3, #15
   210f6:	18fb      	adds	r3, r7, r3
   210f8:	1dfa      	adds	r2, r7, #7
   210fa:	7812      	ldrb	r2, [r2, #0]
   210fc:	09d2      	lsrs	r2, r2, #7
   210fe:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   21100:	230e      	movs	r3, #14
   21102:	18fb      	adds	r3, r7, r3
   21104:	1dfa      	adds	r2, r7, #7
   21106:	7812      	ldrb	r2, [r2, #0]
   21108:	0952      	lsrs	r2, r2, #5
   2110a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   2110c:	4b0d      	ldr	r3, [pc, #52]	; (21144 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2110e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   21110:	230f      	movs	r3, #15
   21112:	18fb      	adds	r3, r7, r3
   21114:	781b      	ldrb	r3, [r3, #0]
   21116:	2b00      	cmp	r3, #0
   21118:	d10f      	bne.n	2113a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2111a:	230f      	movs	r3, #15
   2111c:	18fb      	adds	r3, r7, r3
   2111e:	781b      	ldrb	r3, [r3, #0]
   21120:	009b      	lsls	r3, r3, #2
   21122:	2210      	movs	r2, #16
   21124:	4694      	mov	ip, r2
   21126:	44bc      	add	ip, r7
   21128:	4463      	add	r3, ip
   2112a:	3b08      	subs	r3, #8
   2112c:	681a      	ldr	r2, [r3, #0]
   2112e:	230e      	movs	r3, #14
   21130:	18fb      	adds	r3, r7, r3
   21132:	781b      	ldrb	r3, [r3, #0]
   21134:	01db      	lsls	r3, r3, #7
   21136:	18d3      	adds	r3, r2, r3
   21138:	e000      	b.n	2113c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2113a:	2300      	movs	r3, #0
}
   2113c:	0018      	movs	r0, r3
   2113e:	46bd      	mov	sp, r7
   21140:	b004      	add	sp, #16
   21142:	bd80      	pop	{r7, pc}
   21144:	41004400 	.word	0x41004400

00021148 <system_interrupt_enable>:
{
   21148:	b580      	push	{r7, lr}
   2114a:	b082      	sub	sp, #8
   2114c:	af00      	add	r7, sp, #0
   2114e:	0002      	movs	r2, r0
   21150:	1dfb      	adds	r3, r7, #7
   21152:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   21154:	4b06      	ldr	r3, [pc, #24]	; (21170 <system_interrupt_enable+0x28>)
   21156:	1dfa      	adds	r2, r7, #7
   21158:	7812      	ldrb	r2, [r2, #0]
   2115a:	0011      	movs	r1, r2
   2115c:	221f      	movs	r2, #31
   2115e:	400a      	ands	r2, r1
   21160:	2101      	movs	r1, #1
   21162:	4091      	lsls	r1, r2
   21164:	000a      	movs	r2, r1
   21166:	601a      	str	r2, [r3, #0]
}
   21168:	46c0      	nop			; (mov r8, r8)
   2116a:	46bd      	mov	sp, r7
   2116c:	b002      	add	sp, #8
   2116e:	bd80      	pop	{r7, pc}
   21170:	e000e100 	.word	0xe000e100

00021174 <system_interrupt_disable>:
{
   21174:	b580      	push	{r7, lr}
   21176:	b082      	sub	sp, #8
   21178:	af00      	add	r7, sp, #0
   2117a:	0002      	movs	r2, r0
   2117c:	1dfb      	adds	r3, r7, #7
   2117e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   21180:	4a07      	ldr	r2, [pc, #28]	; (211a0 <system_interrupt_disable+0x2c>)
   21182:	1dfb      	adds	r3, r7, #7
   21184:	781b      	ldrb	r3, [r3, #0]
   21186:	0019      	movs	r1, r3
   21188:	231f      	movs	r3, #31
   2118a:	400b      	ands	r3, r1
   2118c:	2101      	movs	r1, #1
   2118e:	4099      	lsls	r1, r3
   21190:	000b      	movs	r3, r1
   21192:	0019      	movs	r1, r3
   21194:	2380      	movs	r3, #128	; 0x80
   21196:	50d1      	str	r1, [r2, r3]
}
   21198:	46c0      	nop			; (mov r8, r8)
   2119a:	46bd      	mov	sp, r7
   2119c:	b002      	add	sp, #8
   2119e:	bd80      	pop	{r7, pc}
   211a0:	e000e100 	.word	0xe000e100

000211a4 <port_get_group_from_gpio_pin>:
{
   211a4:	b580      	push	{r7, lr}
   211a6:	b082      	sub	sp, #8
   211a8:	af00      	add	r7, sp, #0
   211aa:	0002      	movs	r2, r0
   211ac:	1dfb      	adds	r3, r7, #7
   211ae:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   211b0:	1dfb      	adds	r3, r7, #7
   211b2:	781b      	ldrb	r3, [r3, #0]
   211b4:	0018      	movs	r0, r3
   211b6:	4b03      	ldr	r3, [pc, #12]	; (211c4 <port_get_group_from_gpio_pin+0x20>)
   211b8:	4798      	blx	r3
   211ba:	0003      	movs	r3, r0
}
   211bc:	0018      	movs	r0, r3
   211be:	46bd      	mov	sp, r7
   211c0:	b002      	add	sp, #8
   211c2:	bd80      	pop	{r7, pc}
   211c4:	000210e9 	.word	0x000210e9

000211c8 <port_get_config_defaults>:
{
   211c8:	b580      	push	{r7, lr}
   211ca:	b082      	sub	sp, #8
   211cc:	af00      	add	r7, sp, #0
   211ce:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   211d0:	687b      	ldr	r3, [r7, #4]
   211d2:	2200      	movs	r2, #0
   211d4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   211d6:	687b      	ldr	r3, [r7, #4]
   211d8:	2201      	movs	r2, #1
   211da:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   211dc:	687b      	ldr	r3, [r7, #4]
   211de:	2200      	movs	r2, #0
   211e0:	709a      	strb	r2, [r3, #2]
}
   211e2:	46c0      	nop			; (mov r8, r8)
   211e4:	46bd      	mov	sp, r7
   211e6:	b002      	add	sp, #8
   211e8:	bd80      	pop	{r7, pc}
	...

000211ec <port_pin_set_output_level>:
{
   211ec:	b580      	push	{r7, lr}
   211ee:	b084      	sub	sp, #16
   211f0:	af00      	add	r7, sp, #0
   211f2:	0002      	movs	r2, r0
   211f4:	1dfb      	adds	r3, r7, #7
   211f6:	701a      	strb	r2, [r3, #0]
   211f8:	1dbb      	adds	r3, r7, #6
   211fa:	1c0a      	adds	r2, r1, #0
   211fc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   211fe:	1dfb      	adds	r3, r7, #7
   21200:	781b      	ldrb	r3, [r3, #0]
   21202:	0018      	movs	r0, r3
   21204:	4b0d      	ldr	r3, [pc, #52]	; (2123c <port_pin_set_output_level+0x50>)
   21206:	4798      	blx	r3
   21208:	0003      	movs	r3, r0
   2120a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   2120c:	1dfb      	adds	r3, r7, #7
   2120e:	781b      	ldrb	r3, [r3, #0]
   21210:	221f      	movs	r2, #31
   21212:	4013      	ands	r3, r2
   21214:	2201      	movs	r2, #1
   21216:	409a      	lsls	r2, r3
   21218:	0013      	movs	r3, r2
   2121a:	60bb      	str	r3, [r7, #8]
	if (level) {
   2121c:	1dbb      	adds	r3, r7, #6
   2121e:	781b      	ldrb	r3, [r3, #0]
   21220:	2b00      	cmp	r3, #0
   21222:	d003      	beq.n	2122c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   21224:	68fb      	ldr	r3, [r7, #12]
   21226:	68ba      	ldr	r2, [r7, #8]
   21228:	619a      	str	r2, [r3, #24]
}
   2122a:	e002      	b.n	21232 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   2122c:	68fb      	ldr	r3, [r7, #12]
   2122e:	68ba      	ldr	r2, [r7, #8]
   21230:	615a      	str	r2, [r3, #20]
}
   21232:	46c0      	nop			; (mov r8, r8)
   21234:	46bd      	mov	sp, r7
   21236:	b004      	add	sp, #16
   21238:	bd80      	pop	{r7, pc}
   2123a:	46c0      	nop			; (mov r8, r8)
   2123c:	000211a5 	.word	0x000211a5

00021240 <spi_is_syncing>:
{
   21240:	b580      	push	{r7, lr}
   21242:	b084      	sub	sp, #16
   21244:	af00      	add	r7, sp, #0
   21246:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   21248:	687b      	ldr	r3, [r7, #4]
   2124a:	681b      	ldr	r3, [r3, #0]
   2124c:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   2124e:	68fb      	ldr	r3, [r7, #12]
   21250:	69db      	ldr	r3, [r3, #28]
   21252:	1e5a      	subs	r2, r3, #1
   21254:	4193      	sbcs	r3, r2
   21256:	b2db      	uxtb	r3, r3
}
   21258:	0018      	movs	r0, r3
   2125a:	46bd      	mov	sp, r7
   2125c:	b004      	add	sp, #16
   2125e:	bd80      	pop	{r7, pc}

00021260 <spi_get_config_defaults>:
{
   21260:	b580      	push	{r7, lr}
   21262:	b082      	sub	sp, #8
   21264:	af00      	add	r7, sp, #0
   21266:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
   21268:	687b      	ldr	r3, [r7, #4]
   2126a:	2201      	movs	r2, #1
   2126c:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   2126e:	687b      	ldr	r3, [r7, #4]
   21270:	2200      	movs	r2, #0
   21272:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   21274:	687b      	ldr	r3, [r7, #4]
   21276:	2200      	movs	r2, #0
   21278:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   2127a:	687b      	ldr	r3, [r7, #4]
   2127c:	22c0      	movs	r2, #192	; 0xc0
   2127e:	0392      	lsls	r2, r2, #14
   21280:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   21282:	687b      	ldr	r3, [r7, #4]
   21284:	2200      	movs	r2, #0
   21286:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   21288:	687b      	ldr	r3, [r7, #4]
   2128a:	2200      	movs	r2, #0
   2128c:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   2128e:	687b      	ldr	r3, [r7, #4]
   21290:	2201      	movs	r2, #1
   21292:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
   21294:	687b      	ldr	r3, [r7, #4]
   21296:	2201      	movs	r2, #1
   21298:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
   2129a:	687b      	ldr	r3, [r7, #4]
   2129c:	2200      	movs	r2, #0
   2129e:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
   212a0:	687b      	ldr	r3, [r7, #4]
   212a2:	2224      	movs	r2, #36	; 0x24
   212a4:	2100      	movs	r1, #0
   212a6:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   212a8:	687b      	ldr	r3, [r7, #4]
   212aa:	3318      	adds	r3, #24
   212ac:	220c      	movs	r2, #12
   212ae:	2100      	movs	r1, #0
   212b0:	0018      	movs	r0, r3
   212b2:	4b0a      	ldr	r3, [pc, #40]	; (212dc <spi_get_config_defaults+0x7c>)
   212b4:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
   212b6:	687b      	ldr	r3, [r7, #4]
   212b8:	4a09      	ldr	r2, [pc, #36]	; (212e0 <spi_get_config_defaults+0x80>)
   212ba:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
   212bc:	687b      	ldr	r3, [r7, #4]
   212be:	2200      	movs	r2, #0
   212c0:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   212c2:	687b      	ldr	r3, [r7, #4]
   212c4:	2200      	movs	r2, #0
   212c6:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   212c8:	687b      	ldr	r3, [r7, #4]
   212ca:	2200      	movs	r2, #0
   212cc:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   212ce:	687b      	ldr	r3, [r7, #4]
   212d0:	2200      	movs	r2, #0
   212d2:	635a      	str	r2, [r3, #52]	; 0x34
};
   212d4:	46c0      	nop			; (mov r8, r8)
   212d6:	46bd      	mov	sp, r7
   212d8:	b002      	add	sp, #8
   212da:	bd80      	pop	{r7, pc}
   212dc:	000355ef 	.word	0x000355ef
   212e0:	000186a0 	.word	0x000186a0

000212e4 <spi_slave_inst_get_config_defaults>:
{
   212e4:	b580      	push	{r7, lr}
   212e6:	b082      	sub	sp, #8
   212e8:	af00      	add	r7, sp, #0
   212ea:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
   212ec:	687b      	ldr	r3, [r7, #4]
   212ee:	220a      	movs	r2, #10
   212f0:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   212f2:	687b      	ldr	r3, [r7, #4]
   212f4:	2200      	movs	r2, #0
   212f6:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   212f8:	687b      	ldr	r3, [r7, #4]
   212fa:	2200      	movs	r2, #0
   212fc:	709a      	strb	r2, [r3, #2]
}
   212fe:	46c0      	nop			; (mov r8, r8)
   21300:	46bd      	mov	sp, r7
   21302:	b002      	add	sp, #8
   21304:	bd80      	pop	{r7, pc}
	...

00021308 <spi_attach_slave>:
{
   21308:	b580      	push	{r7, lr}
   2130a:	b084      	sub	sp, #16
   2130c:	af00      	add	r7, sp, #0
   2130e:	6078      	str	r0, [r7, #4]
   21310:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
   21312:	683b      	ldr	r3, [r7, #0]
   21314:	781a      	ldrb	r2, [r3, #0]
   21316:	687b      	ldr	r3, [r7, #4]
   21318:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   2131a:	683b      	ldr	r3, [r7, #0]
   2131c:	785a      	ldrb	r2, [r3, #1]
   2131e:	687b      	ldr	r3, [r7, #4]
   21320:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   21322:	683b      	ldr	r3, [r7, #0]
   21324:	789a      	ldrb	r2, [r3, #2]
   21326:	687b      	ldr	r3, [r7, #4]
   21328:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
   2132a:	230c      	movs	r3, #12
   2132c:	18fb      	adds	r3, r7, r3
   2132e:	0018      	movs	r0, r3
   21330:	4b0b      	ldr	r3, [pc, #44]	; (21360 <spi_attach_slave+0x58>)
   21332:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   21334:	230c      	movs	r3, #12
   21336:	18fb      	adds	r3, r7, r3
   21338:	2201      	movs	r2, #1
   2133a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   2133c:	687b      	ldr	r3, [r7, #4]
   2133e:	781b      	ldrb	r3, [r3, #0]
   21340:	220c      	movs	r2, #12
   21342:	18ba      	adds	r2, r7, r2
   21344:	0011      	movs	r1, r2
   21346:	0018      	movs	r0, r3
   21348:	4b06      	ldr	r3, [pc, #24]	; (21364 <spi_attach_slave+0x5c>)
   2134a:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   2134c:	687b      	ldr	r3, [r7, #4]
   2134e:	781b      	ldrb	r3, [r3, #0]
   21350:	2101      	movs	r1, #1
   21352:	0018      	movs	r0, r3
   21354:	4b04      	ldr	r3, [pc, #16]	; (21368 <spi_attach_slave+0x60>)
   21356:	4798      	blx	r3
}
   21358:	46c0      	nop			; (mov r8, r8)
   2135a:	46bd      	mov	sp, r7
   2135c:	b004      	add	sp, #16
   2135e:	bd80      	pop	{r7, pc}
   21360:	000211c9 	.word	0x000211c9
   21364:	000275f1 	.word	0x000275f1
   21368:	000211ed 	.word	0x000211ed

0002136c <spi_enable>:
{
   2136c:	b580      	push	{r7, lr}
   2136e:	b084      	sub	sp, #16
   21370:	af00      	add	r7, sp, #0
   21372:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   21374:	687b      	ldr	r3, [r7, #4]
   21376:	681b      	ldr	r3, [r3, #0]
   21378:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   2137a:	687b      	ldr	r3, [r7, #4]
   2137c:	681b      	ldr	r3, [r3, #0]
   2137e:	0018      	movs	r0, r3
   21380:	4b0b      	ldr	r3, [pc, #44]	; (213b0 <spi_enable+0x44>)
   21382:	4798      	blx	r3
   21384:	0003      	movs	r3, r0
   21386:	0018      	movs	r0, r3
   21388:	4b0a      	ldr	r3, [pc, #40]	; (213b4 <spi_enable+0x48>)
   2138a:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   2138c:	46c0      	nop			; (mov r8, r8)
   2138e:	687b      	ldr	r3, [r7, #4]
   21390:	0018      	movs	r0, r3
   21392:	4b09      	ldr	r3, [pc, #36]	; (213b8 <spi_enable+0x4c>)
   21394:	4798      	blx	r3
   21396:	1e03      	subs	r3, r0, #0
   21398:	d1f9      	bne.n	2138e <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   2139a:	68fb      	ldr	r3, [r7, #12]
   2139c:	681b      	ldr	r3, [r3, #0]
   2139e:	2202      	movs	r2, #2
   213a0:	431a      	orrs	r2, r3
   213a2:	68fb      	ldr	r3, [r7, #12]
   213a4:	601a      	str	r2, [r3, #0]
}
   213a6:	46c0      	nop			; (mov r8, r8)
   213a8:	46bd      	mov	sp, r7
   213aa:	b004      	add	sp, #16
   213ac:	bd80      	pop	{r7, pc}
   213ae:	46c0      	nop			; (mov r8, r8)
   213b0:	000282c1 	.word	0x000282c1
   213b4:	00021149 	.word	0x00021149
   213b8:	00021241 	.word	0x00021241

000213bc <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
   213bc:	b580      	push	{r7, lr}
   213be:	b084      	sub	sp, #16
   213c0:	af00      	add	r7, sp, #0
   213c2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   213c4:	687b      	ldr	r3, [r7, #4]
   213c6:	681b      	ldr	r3, [r3, #0]
   213c8:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   213ca:	687b      	ldr	r3, [r7, #4]
   213cc:	681b      	ldr	r3, [r3, #0]
   213ce:	0018      	movs	r0, r3
   213d0:	4b0e      	ldr	r3, [pc, #56]	; (2140c <spi_disable+0x50>)
   213d2:	4798      	blx	r3
   213d4:	0003      	movs	r3, r0
   213d6:	0018      	movs	r0, r3
   213d8:	4b0d      	ldr	r3, [pc, #52]	; (21410 <spi_disable+0x54>)
   213da:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   213dc:	46c0      	nop			; (mov r8, r8)
   213de:	687b      	ldr	r3, [r7, #4]
   213e0:	0018      	movs	r0, r3
   213e2:	4b0c      	ldr	r3, [pc, #48]	; (21414 <spi_disable+0x58>)
   213e4:	4798      	blx	r3
   213e6:	1e03      	subs	r3, r0, #0
   213e8:	d1f9      	bne.n	213de <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   213ea:	68fb      	ldr	r3, [r7, #12]
   213ec:	228f      	movs	r2, #143	; 0x8f
   213ee:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   213f0:	68fb      	ldr	r3, [r7, #12]
   213f2:	228f      	movs	r2, #143	; 0x8f
   213f4:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   213f6:	68fb      	ldr	r3, [r7, #12]
   213f8:	681b      	ldr	r3, [r3, #0]
   213fa:	2202      	movs	r2, #2
   213fc:	4393      	bics	r3, r2
   213fe:	001a      	movs	r2, r3
   21400:	68fb      	ldr	r3, [r7, #12]
   21402:	601a      	str	r2, [r3, #0]
}
   21404:	46c0      	nop			; (mov r8, r8)
   21406:	46bd      	mov	sp, r7
   21408:	b004      	add	sp, #16
   2140a:	bd80      	pop	{r7, pc}
   2140c:	000282c1 	.word	0x000282c1
   21410:	00021175 	.word	0x00021175
   21414:	00021241 	.word	0x00021241

00021418 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
   21418:	b580      	push	{r7, lr}
   2141a:	b084      	sub	sp, #16
   2141c:	af00      	add	r7, sp, #0
   2141e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   21420:	687b      	ldr	r3, [r7, #4]
   21422:	681b      	ldr	r3, [r3, #0]
   21424:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   21426:	68fb      	ldr	r3, [r7, #12]
   21428:	7e1b      	ldrb	r3, [r3, #24]
   2142a:	b2db      	uxtb	r3, r3
   2142c:	001a      	movs	r2, r3
   2142e:	2302      	movs	r3, #2
   21430:	4013      	ands	r3, r2
   21432:	1e5a      	subs	r2, r3, #1
   21434:	4193      	sbcs	r3, r2
   21436:	b2db      	uxtb	r3, r3
}
   21438:	0018      	movs	r0, r3
   2143a:	46bd      	mov	sp, r7
   2143c:	b004      	add	sp, #16
   2143e:	bd80      	pop	{r7, pc}

00021440 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   21440:	b580      	push	{r7, lr}
   21442:	b084      	sub	sp, #16
   21444:	af00      	add	r7, sp, #0
   21446:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   21448:	687b      	ldr	r3, [r7, #4]
   2144a:	681b      	ldr	r3, [r3, #0]
   2144c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   2144e:	68fb      	ldr	r3, [r7, #12]
   21450:	7e1b      	ldrb	r3, [r3, #24]
   21452:	b2db      	uxtb	r3, r3
   21454:	001a      	movs	r2, r3
   21456:	2301      	movs	r3, #1
   21458:	4013      	ands	r3, r2
   2145a:	1e5a      	subs	r2, r3, #1
   2145c:	4193      	sbcs	r3, r2
   2145e:	b2db      	uxtb	r3, r3
}
   21460:	0018      	movs	r0, r3
   21462:	46bd      	mov	sp, r7
   21464:	b004      	add	sp, #16
   21466:	bd80      	pop	{r7, pc}

00021468 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
   21468:	b580      	push	{r7, lr}
   2146a:	b084      	sub	sp, #16
   2146c:	af00      	add	r7, sp, #0
   2146e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   21470:	687b      	ldr	r3, [r7, #4]
   21472:	681b      	ldr	r3, [r3, #0]
   21474:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   21476:	68fb      	ldr	r3, [r7, #12]
   21478:	7e1b      	ldrb	r3, [r3, #24]
   2147a:	b2db      	uxtb	r3, r3
   2147c:	001a      	movs	r2, r3
   2147e:	2304      	movs	r3, #4
   21480:	4013      	ands	r3, r2
   21482:	1e5a      	subs	r2, r3, #1
   21484:	4193      	sbcs	r3, r2
   21486:	b2db      	uxtb	r3, r3
}
   21488:	0018      	movs	r0, r3
   2148a:	46bd      	mov	sp, r7
   2148c:	b004      	add	sp, #16
   2148e:	bd80      	pop	{r7, pc}

00021490 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   21490:	b580      	push	{r7, lr}
   21492:	b084      	sub	sp, #16
   21494:	af00      	add	r7, sp, #0
   21496:	6078      	str	r0, [r7, #4]
   21498:	000a      	movs	r2, r1
   2149a:	1cbb      	adds	r3, r7, #2
   2149c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   2149e:	687b      	ldr	r3, [r7, #4]
   214a0:	681b      	ldr	r3, [r3, #0]
   214a2:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   214a4:	687b      	ldr	r3, [r7, #4]
   214a6:	0018      	movs	r0, r3
   214a8:	4b0a      	ldr	r3, [pc, #40]	; (214d4 <spi_write+0x44>)
   214aa:	4798      	blx	r3
   214ac:	0003      	movs	r3, r0
   214ae:	001a      	movs	r2, r3
   214b0:	2301      	movs	r3, #1
   214b2:	4053      	eors	r3, r2
   214b4:	b2db      	uxtb	r3, r3
   214b6:	2b00      	cmp	r3, #0
   214b8:	d001      	beq.n	214be <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   214ba:	2305      	movs	r3, #5
   214bc:	e006      	b.n	214cc <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   214be:	1cbb      	adds	r3, r7, #2
   214c0:	881b      	ldrh	r3, [r3, #0]
   214c2:	05db      	lsls	r3, r3, #23
   214c4:	0dda      	lsrs	r2, r3, #23
   214c6:	68fb      	ldr	r3, [r7, #12]
   214c8:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   214ca:	2300      	movs	r3, #0
}
   214cc:	0018      	movs	r0, r3
   214ce:	46bd      	mov	sp, r7
   214d0:	b004      	add	sp, #16
   214d2:	bd80      	pop	{r7, pc}
   214d4:	00021441 	.word	0x00021441

000214d8 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   214d8:	b580      	push	{r7, lr}
   214da:	b084      	sub	sp, #16
   214dc:	af00      	add	r7, sp, #0
   214de:	6078      	str	r0, [r7, #4]
   214e0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   214e2:	687b      	ldr	r3, [r7, #4]
   214e4:	681b      	ldr	r3, [r3, #0]
   214e6:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   214e8:	687b      	ldr	r3, [r7, #4]
   214ea:	0018      	movs	r0, r3
   214ec:	4b1b      	ldr	r3, [pc, #108]	; (2155c <spi_read+0x84>)
   214ee:	4798      	blx	r3
   214f0:	0003      	movs	r3, r0
   214f2:	001a      	movs	r2, r3
   214f4:	2301      	movs	r3, #1
   214f6:	4053      	eors	r3, r2
   214f8:	b2db      	uxtb	r3, r3
   214fa:	2b00      	cmp	r3, #0
   214fc:	d001      	beq.n	21502 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   214fe:	2310      	movs	r3, #16
   21500:	e027      	b.n	21552 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   21502:	230f      	movs	r3, #15
   21504:	18fb      	adds	r3, r7, r3
   21506:	2200      	movs	r2, #0
   21508:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   2150a:	68bb      	ldr	r3, [r7, #8]
   2150c:	8b5b      	ldrh	r3, [r3, #26]
   2150e:	b29b      	uxth	r3, r3
   21510:	001a      	movs	r2, r3
   21512:	2304      	movs	r3, #4
   21514:	4013      	ands	r3, r2
   21516:	d006      	beq.n	21526 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   21518:	230f      	movs	r3, #15
   2151a:	18fb      	adds	r3, r7, r3
   2151c:	221e      	movs	r2, #30
   2151e:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   21520:	68bb      	ldr	r3, [r7, #8]
   21522:	2204      	movs	r2, #4
   21524:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   21526:	687b      	ldr	r3, [r7, #4]
   21528:	799b      	ldrb	r3, [r3, #6]
   2152a:	2b01      	cmp	r3, #1
   2152c:	d108      	bne.n	21540 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   2152e:	68bb      	ldr	r3, [r7, #8]
   21530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21532:	b29b      	uxth	r3, r3
   21534:	05db      	lsls	r3, r3, #23
   21536:	0ddb      	lsrs	r3, r3, #23
   21538:	b29a      	uxth	r2, r3
   2153a:	683b      	ldr	r3, [r7, #0]
   2153c:	801a      	strh	r2, [r3, #0]
   2153e:	e005      	b.n	2154c <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   21540:	68bb      	ldr	r3, [r7, #8]
   21542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21544:	b2db      	uxtb	r3, r3
   21546:	b29a      	uxth	r2, r3
   21548:	683b      	ldr	r3, [r7, #0]
   2154a:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   2154c:	230f      	movs	r3, #15
   2154e:	18fb      	adds	r3, r7, r3
   21550:	781b      	ldrb	r3, [r3, #0]
}
   21552:	0018      	movs	r0, r3
   21554:	46bd      	mov	sp, r7
   21556:	b004      	add	sp, #16
   21558:	bd80      	pop	{r7, pc}
   2155a:	46c0      	nop			; (mov r8, r8)
   2155c:	00021469 	.word	0x00021469

00021560 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
   21560:	b580      	push	{r7, lr}
   21562:	b086      	sub	sp, #24
   21564:	af00      	add	r7, sp, #0
   21566:	60f8      	str	r0, [r7, #12]
   21568:	60b9      	str	r1, [r7, #8]
   2156a:	1dbb      	adds	r3, r7, #6
   2156c:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0xFF;
   2156e:	2313      	movs	r3, #19
   21570:	18fb      	adds	r3, r7, r3
   21572:	22ff      	movs	r2, #255	; 0xff
   21574:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
   21576:	2317      	movs	r3, #23
   21578:	18fb      	adds	r3, r7, r3
   2157a:	2200      	movs	r2, #0
   2157c:	701a      	strb	r2, [r3, #0]
   2157e:	2316      	movs	r3, #22
   21580:	18fb      	adds	r3, r7, r3
   21582:	2200      	movs	r2, #0
   21584:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
   21586:	2314      	movs	r3, #20
   21588:	18fb      	adds	r3, r7, r3
   2158a:	2200      	movs	r2, #0
   2158c:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
   2158e:	2310      	movs	r3, #16
   21590:	18fb      	adds	r3, r7, r3
   21592:	2200      	movs	r2, #0
   21594:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
   21596:	68bb      	ldr	r3, [r7, #8]
   21598:	2b00      	cmp	r3, #0
   2159a:	d102      	bne.n	215a2 <spi_rw+0x42>
   2159c:	68fb      	ldr	r3, [r7, #12]
   2159e:	2b00      	cmp	r3, #0
   215a0:	d003      	beq.n	215aa <spi_rw+0x4a>
   215a2:	1dbb      	adds	r3, r7, #6
   215a4:	881b      	ldrh	r3, [r3, #0]
   215a6:	2b00      	cmp	r3, #0
   215a8:	d102      	bne.n	215b0 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
   215aa:	230f      	movs	r3, #15
   215ac:	425b      	negs	r3, r3
   215ae:	e07e      	b.n	216ae <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
   215b0:	68fb      	ldr	r3, [r7, #12]
   215b2:	2b00      	cmp	r3, #0
   215b4:	d106      	bne.n	215c4 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
   215b6:	2313      	movs	r3, #19
   215b8:	18fb      	adds	r3, r7, r3
   215ba:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
   215bc:	2317      	movs	r3, #23
   215be:	18fb      	adds	r3, r7, r3
   215c0:	2201      	movs	r2, #1
   215c2:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
   215c4:	68bb      	ldr	r3, [r7, #8]
   215c6:	2b00      	cmp	r3, #0
   215c8:	d106      	bne.n	215d8 <spi_rw+0x78>
		pu8Miso = &u8Dummy;
   215ca:	2313      	movs	r3, #19
   215cc:	18fb      	adds	r3, r7, r3
   215ce:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
   215d0:	2316      	movs	r3, #22
   215d2:	18fb      	adds	r3, r7, r3
   215d4:	2201      	movs	r2, #1
   215d6:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
   215d8:	4937      	ldr	r1, [pc, #220]	; (216b8 <spi_rw+0x158>)
   215da:	4b38      	ldr	r3, [pc, #224]	; (216bc <spi_rw+0x15c>)
   215dc:	2201      	movs	r2, #1
   215de:	0018      	movs	r0, r3
   215e0:	4b37      	ldr	r3, [pc, #220]	; (216c0 <spi_rw+0x160>)
   215e2:	4798      	blx	r3

	while (u16Sz) {
   215e4:	e04c      	b.n	21680 <spi_rw+0x120>
		txd_data = *pu8Mosi;
   215e6:	68fb      	ldr	r3, [r7, #12]
   215e8:	781a      	ldrb	r2, [r3, #0]
   215ea:	2314      	movs	r3, #20
   215ec:	18fb      	adds	r3, r7, r3
   215ee:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
   215f0:	46c0      	nop			; (mov r8, r8)
   215f2:	4b32      	ldr	r3, [pc, #200]	; (216bc <spi_rw+0x15c>)
   215f4:	0018      	movs	r0, r3
   215f6:	4b33      	ldr	r3, [pc, #204]	; (216c4 <spi_rw+0x164>)
   215f8:	4798      	blx	r3
   215fa:	0003      	movs	r3, r0
   215fc:	001a      	movs	r2, r3
   215fe:	2301      	movs	r3, #1
   21600:	4053      	eors	r3, r2
   21602:	b2db      	uxtb	r3, r3
   21604:	2b00      	cmp	r3, #0
   21606:	d1f4      	bne.n	215f2 <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
   21608:	46c0      	nop			; (mov r8, r8)
   2160a:	2314      	movs	r3, #20
   2160c:	18fb      	adds	r3, r7, r3
   2160e:	881a      	ldrh	r2, [r3, #0]
   21610:	4b2a      	ldr	r3, [pc, #168]	; (216bc <spi_rw+0x15c>)
   21612:	0011      	movs	r1, r2
   21614:	0018      	movs	r0, r3
   21616:	4b2c      	ldr	r3, [pc, #176]	; (216c8 <spi_rw+0x168>)
   21618:	4798      	blx	r3
   2161a:	1e03      	subs	r3, r0, #0
   2161c:	d1f5      	bne.n	2160a <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
   2161e:	46c0      	nop			; (mov r8, r8)
   21620:	4b26      	ldr	r3, [pc, #152]	; (216bc <spi_rw+0x15c>)
   21622:	0018      	movs	r0, r3
   21624:	4b29      	ldr	r3, [pc, #164]	; (216cc <spi_rw+0x16c>)
   21626:	4798      	blx	r3
   21628:	0003      	movs	r3, r0
   2162a:	001a      	movs	r2, r3
   2162c:	2301      	movs	r3, #1
   2162e:	4053      	eors	r3, r2
   21630:	b2db      	uxtb	r3, r3
   21632:	2b00      	cmp	r3, #0
   21634:	d1f4      	bne.n	21620 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
   21636:	46c0      	nop			; (mov r8, r8)
   21638:	2310      	movs	r3, #16
   2163a:	18fa      	adds	r2, r7, r3
   2163c:	4b1f      	ldr	r3, [pc, #124]	; (216bc <spi_rw+0x15c>)
   2163e:	0011      	movs	r1, r2
   21640:	0018      	movs	r0, r3
   21642:	4b23      	ldr	r3, [pc, #140]	; (216d0 <spi_rw+0x170>)
   21644:	4798      	blx	r3
   21646:	1e03      	subs	r3, r0, #0
   21648:	d1f6      	bne.n	21638 <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
   2164a:	2310      	movs	r3, #16
   2164c:	18fb      	adds	r3, r7, r3
   2164e:	881b      	ldrh	r3, [r3, #0]
   21650:	b2da      	uxtb	r2, r3
   21652:	68bb      	ldr	r3, [r7, #8]
   21654:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
   21656:	1dbb      	adds	r3, r7, #6
   21658:	881a      	ldrh	r2, [r3, #0]
   2165a:	1dbb      	adds	r3, r7, #6
   2165c:	3a01      	subs	r2, #1
   2165e:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
   21660:	2316      	movs	r3, #22
   21662:	18fb      	adds	r3, r7, r3
   21664:	781b      	ldrb	r3, [r3, #0]
   21666:	2b00      	cmp	r3, #0
   21668:	d102      	bne.n	21670 <spi_rw+0x110>
			pu8Miso++;
   2166a:	68bb      	ldr	r3, [r7, #8]
   2166c:	3301      	adds	r3, #1
   2166e:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
   21670:	2317      	movs	r3, #23
   21672:	18fb      	adds	r3, r7, r3
   21674:	781b      	ldrb	r3, [r3, #0]
   21676:	2b00      	cmp	r3, #0
   21678:	d102      	bne.n	21680 <spi_rw+0x120>
			pu8Mosi++;
   2167a:	68fb      	ldr	r3, [r7, #12]
   2167c:	3301      	adds	r3, #1
   2167e:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
   21680:	1dbb      	adds	r3, r7, #6
   21682:	881b      	ldrh	r3, [r3, #0]
   21684:	2b00      	cmp	r3, #0
   21686:	d1ae      	bne.n	215e6 <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
   21688:	46c0      	nop			; (mov r8, r8)
   2168a:	4b0c      	ldr	r3, [pc, #48]	; (216bc <spi_rw+0x15c>)
   2168c:	0018      	movs	r0, r3
   2168e:	4b11      	ldr	r3, [pc, #68]	; (216d4 <spi_rw+0x174>)
   21690:	4798      	blx	r3
   21692:	0003      	movs	r3, r0
   21694:	001a      	movs	r2, r3
   21696:	2301      	movs	r3, #1
   21698:	4053      	eors	r3, r2
   2169a:	b2db      	uxtb	r3, r3
   2169c:	2b00      	cmp	r3, #0
   2169e:	d1f4      	bne.n	2168a <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
   216a0:	4905      	ldr	r1, [pc, #20]	; (216b8 <spi_rw+0x158>)
   216a2:	4b06      	ldr	r3, [pc, #24]	; (216bc <spi_rw+0x15c>)
   216a4:	2200      	movs	r2, #0
   216a6:	0018      	movs	r0, r3
   216a8:	4b05      	ldr	r3, [pc, #20]	; (216c0 <spi_rw+0x160>)
   216aa:	4798      	blx	r3

	return M2M_SUCCESS;
   216ac:	2300      	movs	r3, #0
}
   216ae:	0018      	movs	r0, r3
   216b0:	46bd      	mov	sp, r7
   216b2:	b006      	add	sp, #24
   216b4:	bd80      	pop	{r7, pc}
   216b6:	46c0      	nop			; (mov r8, r8)
   216b8:	20005ae4 	.word	0x20005ae4
   216bc:	20005ae8 	.word	0x20005ae8
   216c0:	00028d35 	.word	0x00028d35
   216c4:	00021441 	.word	0x00021441
   216c8:	00021491 	.word	0x00021491
   216cc:	00021469 	.word	0x00021469
   216d0:	000214d9 	.word	0x000214d9
   216d4:	00021419 	.word	0x00021419

000216d8 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
   216d8:	b580      	push	{r7, lr}
   216da:	b092      	sub	sp, #72	; 0x48
   216dc:	af00      	add	r7, sp, #0
   216de:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
   216e0:	2347      	movs	r3, #71	; 0x47
   216e2:	18fb      	adds	r3, r7, r3
   216e4:	2200      	movs	r2, #0
   216e6:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
   216e8:	2308      	movs	r3, #8
   216ea:	18fb      	adds	r3, r7, r3
   216ec:	0018      	movs	r0, r3
   216ee:	4b26      	ldr	r3, [pc, #152]	; (21788 <nm_bus_init+0xb0>)
   216f0:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
   216f2:	2308      	movs	r3, #8
   216f4:	18fb      	adds	r3, r7, r3
   216f6:	220e      	movs	r2, #14
   216f8:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
   216fa:	2308      	movs	r3, #8
   216fc:	18fa      	adds	r2, r7, r3
   216fe:	4b23      	ldr	r3, [pc, #140]	; (2178c <nm_bus_init+0xb4>)
   21700:	0011      	movs	r1, r2
   21702:	0018      	movs	r0, r3
   21704:	4b22      	ldr	r3, [pc, #136]	; (21790 <nm_bus_init+0xb8>)
   21706:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
   21708:	230c      	movs	r3, #12
   2170a:	18fb      	adds	r3, r7, r3
   2170c:	0018      	movs	r0, r3
   2170e:	4b21      	ldr	r3, [pc, #132]	; (21794 <nm_bus_init+0xbc>)
   21710:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
   21712:	230c      	movs	r3, #12
   21714:	18fb      	adds	r3, r7, r3
   21716:	22c0      	movs	r2, #192	; 0xc0
   21718:	0392      	lsls	r2, r2, #14
   2171a:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
   2171c:	230c      	movs	r3, #12
   2171e:	18fb      	adds	r3, r7, r3
   21720:	4a1d      	ldr	r2, [pc, #116]	; (21798 <nm_bus_init+0xc0>)
   21722:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
   21724:	230c      	movs	r3, #12
   21726:	18fb      	adds	r3, r7, r3
   21728:	4a1c      	ldr	r2, [pc, #112]	; (2179c <nm_bus_init+0xc4>)
   2172a:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
   2172c:	230c      	movs	r3, #12
   2172e:	18fb      	adds	r3, r7, r3
   21730:	2201      	movs	r2, #1
   21732:	4252      	negs	r2, r2
   21734:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
   21736:	230c      	movs	r3, #12
   21738:	18fb      	adds	r3, r7, r3
   2173a:	4a19      	ldr	r2, [pc, #100]	; (217a0 <nm_bus_init+0xc8>)
   2173c:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
   2173e:	230c      	movs	r3, #12
   21740:	18fb      	adds	r3, r7, r3
   21742:	2200      	movs	r2, #0
   21744:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
   21746:	230c      	movs	r3, #12
   21748:	18fb      	adds	r3, r7, r3
   2174a:	4a16      	ldr	r2, [pc, #88]	; (217a4 <nm_bus_init+0xcc>)
   2174c:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
   2174e:	230c      	movs	r3, #12
   21750:	18fa      	adds	r2, r7, r3
   21752:	4915      	ldr	r1, [pc, #84]	; (217a8 <nm_bus_init+0xd0>)
   21754:	4b15      	ldr	r3, [pc, #84]	; (217ac <nm_bus_init+0xd4>)
   21756:	0018      	movs	r0, r3
   21758:	4b15      	ldr	r3, [pc, #84]	; (217b0 <nm_bus_init+0xd8>)
   2175a:	4798      	blx	r3
   2175c:	1e03      	subs	r3, r0, #0
   2175e:	d002      	beq.n	21766 <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
   21760:	2306      	movs	r3, #6
   21762:	425b      	negs	r3, r3
   21764:	e00c      	b.n	21780 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
   21766:	4b11      	ldr	r3, [pc, #68]	; (217ac <nm_bus_init+0xd4>)
   21768:	0018      	movs	r0, r3
   2176a:	4b12      	ldr	r3, [pc, #72]	; (217b4 <nm_bus_init+0xdc>)
   2176c:	4798      	blx	r3

	nm_bsp_reset();
   2176e:	4b12      	ldr	r3, [pc, #72]	; (217b8 <nm_bus_init+0xe0>)
   21770:	4798      	blx	r3
	nm_bsp_sleep(1);
   21772:	2001      	movs	r0, #1
   21774:	4b11      	ldr	r3, [pc, #68]	; (217bc <nm_bus_init+0xe4>)
   21776:	4798      	blx	r3
#endif
	return result;
   21778:	2347      	movs	r3, #71	; 0x47
   2177a:	18fb      	adds	r3, r7, r3
   2177c:	781b      	ldrb	r3, [r3, #0]
   2177e:	b25b      	sxtb	r3, r3
}
   21780:	0018      	movs	r0, r3
   21782:	46bd      	mov	sp, r7
   21784:	b012      	add	sp, #72	; 0x48
   21786:	bd80      	pop	{r7, pc}
   21788:	000212e5 	.word	0x000212e5
   2178c:	20005ae4 	.word	0x20005ae4
   21790:	00021309 	.word	0x00021309
   21794:	00021261 	.word	0x00021261
   21798:	000c0002 	.word	0x000c0002
   2179c:	000d0002 	.word	0x000d0002
   217a0:	000f0002 	.word	0x000f0002
   217a4:	00124f80 	.word	0x00124f80
   217a8:	42001000 	.word	0x42001000
   217ac:	20005ae8 	.word	0x20005ae8
   217b0:	00028a71 	.word	0x00028a71
   217b4:	0002136d 	.word	0x0002136d
   217b8:	00020fdd 	.word	0x00020fdd
   217bc:	0002101d 	.word	0x0002101d

000217c0 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
   217c0:	b590      	push	{r4, r7, lr}
   217c2:	b085      	sub	sp, #20
   217c4:	af00      	add	r7, sp, #0
   217c6:	0002      	movs	r2, r0
   217c8:	6039      	str	r1, [r7, #0]
   217ca:	1dfb      	adds	r3, r7, #7
   217cc:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
   217ce:	230f      	movs	r3, #15
   217d0:	18fb      	adds	r3, r7, r3
   217d2:	2200      	movs	r2, #0
   217d4:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
   217d6:	1dfb      	adds	r3, r7, #7
   217d8:	781b      	ldrb	r3, [r3, #0]
   217da:	2b03      	cmp	r3, #3
   217dc:	d10f      	bne.n	217fe <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
   217de:	683b      	ldr	r3, [r7, #0]
   217e0:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
   217e2:	68bb      	ldr	r3, [r7, #8]
   217e4:	6818      	ldr	r0, [r3, #0]
   217e6:	68bb      	ldr	r3, [r7, #8]
   217e8:	6859      	ldr	r1, [r3, #4]
   217ea:	68bb      	ldr	r3, [r7, #8]
   217ec:	891b      	ldrh	r3, [r3, #8]
   217ee:	220f      	movs	r2, #15
   217f0:	18bc      	adds	r4, r7, r2
   217f2:	001a      	movs	r2, r3
   217f4:	4b10      	ldr	r3, [pc, #64]	; (21838 <nm_bus_ioctl+0x78>)
   217f6:	4798      	blx	r3
   217f8:	0003      	movs	r3, r0
   217fa:	7023      	strb	r3, [r4, #0]
		}
		break;
   217fc:	e013      	b.n	21826 <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
   217fe:	230f      	movs	r3, #15
   21800:	18fb      	adds	r3, r7, r3
   21802:	22ff      	movs	r2, #255	; 0xff
   21804:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
   21806:	2383      	movs	r3, #131	; 0x83
   21808:	005a      	lsls	r2, r3, #1
   2180a:	490c      	ldr	r1, [pc, #48]	; (2183c <nm_bus_ioctl+0x7c>)
   2180c:	4b0c      	ldr	r3, [pc, #48]	; (21840 <nm_bus_ioctl+0x80>)
   2180e:	0018      	movs	r0, r3
   21810:	4b0c      	ldr	r3, [pc, #48]	; (21844 <nm_bus_ioctl+0x84>)
   21812:	4798      	blx	r3
   21814:	4b0c      	ldr	r3, [pc, #48]	; (21848 <nm_bus_ioctl+0x88>)
   21816:	0018      	movs	r0, r3
   21818:	4b0a      	ldr	r3, [pc, #40]	; (21844 <nm_bus_ioctl+0x84>)
   2181a:	4798      	blx	r3
   2181c:	4b0b      	ldr	r3, [pc, #44]	; (2184c <nm_bus_ioctl+0x8c>)
   2181e:	0018      	movs	r0, r3
   21820:	4b08      	ldr	r3, [pc, #32]	; (21844 <nm_bus_ioctl+0x84>)
   21822:	4798      	blx	r3
			break;
   21824:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
   21826:	230f      	movs	r3, #15
   21828:	18fb      	adds	r3, r7, r3
   2182a:	781b      	ldrb	r3, [r3, #0]
   2182c:	b25b      	sxtb	r3, r3
}
   2182e:	0018      	movs	r0, r3
   21830:	46bd      	mov	sp, r7
   21832:	b005      	add	sp, #20
   21834:	bd90      	pop	{r4, r7, pc}
   21836:	46c0      	nop			; (mov r8, r8)
   21838:	00021561 	.word	0x00021561
   2183c:	000391c0 	.word	0x000391c0
   21840:	00039194 	.word	0x00039194
   21844:	0001ebc9 	.word	0x0001ebc9
   21848:	000391a8 	.word	0x000391a8
   2184c:	000391bc 	.word	0x000391bc

00021850 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
   21850:	b580      	push	{r7, lr}
   21852:	b082      	sub	sp, #8
   21854:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
   21856:	1dfb      	adds	r3, r7, #7
   21858:	2200      	movs	r2, #0
   2185a:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
   2185c:	1d3b      	adds	r3, r7, #4
   2185e:	0018      	movs	r0, r3
   21860:	4b13      	ldr	r3, [pc, #76]	; (218b0 <nm_bus_deinit+0x60>)
   21862:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   21864:	1d3b      	adds	r3, r7, #4
   21866:	2200      	movs	r2, #0
   21868:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
   2186a:	1d3b      	adds	r3, r7, #4
   2186c:	2200      	movs	r2, #0
   2186e:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
   21870:	4b10      	ldr	r3, [pc, #64]	; (218b4 <nm_bus_deinit+0x64>)
   21872:	0018      	movs	r0, r3
   21874:	4b10      	ldr	r3, [pc, #64]	; (218b8 <nm_bus_deinit+0x68>)
   21876:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
   21878:	1d3b      	adds	r3, r7, #4
   2187a:	0019      	movs	r1, r3
   2187c:	200c      	movs	r0, #12
   2187e:	4b0f      	ldr	r3, [pc, #60]	; (218bc <nm_bus_deinit+0x6c>)
   21880:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
   21882:	1d3b      	adds	r3, r7, #4
   21884:	0019      	movs	r1, r3
   21886:	200f      	movs	r0, #15
   21888:	4b0c      	ldr	r3, [pc, #48]	; (218bc <nm_bus_deinit+0x6c>)
   2188a:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
   2188c:	1d3b      	adds	r3, r7, #4
   2188e:	0019      	movs	r1, r3
   21890:	200d      	movs	r0, #13
   21892:	4b0a      	ldr	r3, [pc, #40]	; (218bc <nm_bus_deinit+0x6c>)
   21894:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
   21896:	1d3b      	adds	r3, r7, #4
   21898:	0019      	movs	r1, r3
   2189a:	200e      	movs	r0, #14
   2189c:	4b07      	ldr	r3, [pc, #28]	; (218bc <nm_bus_deinit+0x6c>)
   2189e:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
   218a0:	1dfb      	adds	r3, r7, #7
   218a2:	781b      	ldrb	r3, [r3, #0]
   218a4:	b25b      	sxtb	r3, r3
}
   218a6:	0018      	movs	r0, r3
   218a8:	46bd      	mov	sp, r7
   218aa:	b002      	add	sp, #8
   218ac:	bd80      	pop	{r7, pc}
   218ae:	46c0      	nop			; (mov r8, r8)
   218b0:	000211c9 	.word	0x000211c9
   218b4:	20005ae8 	.word	0x20005ae8
   218b8:	000213bd 	.word	0x000213bd
   218bc:	000275f1 	.word	0x000275f1

000218c0 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
   218c0:	b580      	push	{r7, lr}
   218c2:	b084      	sub	sp, #16
   218c4:	af00      	add	r7, sp, #0
   218c6:	60f8      	str	r0, [r7, #12]
   218c8:	60b9      	str	r1, [r7, #8]
   218ca:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
   218cc:	687b      	ldr	r3, [r7, #4]
   218ce:	2b00      	cmp	r3, #0
   218d0:	d010      	beq.n	218f4 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
   218d2:	68bb      	ldr	r3, [r7, #8]
   218d4:	781a      	ldrb	r2, [r3, #0]
   218d6:	68fb      	ldr	r3, [r7, #12]
   218d8:	701a      	strb	r2, [r3, #0]
		pDst++;
   218da:	68fb      	ldr	r3, [r7, #12]
   218dc:	3301      	adds	r3, #1
   218de:	60fb      	str	r3, [r7, #12]
		pSrc++;
   218e0:	68bb      	ldr	r3, [r7, #8]
   218e2:	3301      	adds	r3, #1
   218e4:	60bb      	str	r3, [r7, #8]
	}while(--sz);
   218e6:	687b      	ldr	r3, [r7, #4]
   218e8:	3b01      	subs	r3, #1
   218ea:	607b      	str	r3, [r7, #4]
   218ec:	687b      	ldr	r3, [r7, #4]
   218ee:	2b00      	cmp	r3, #0
   218f0:	d1ef      	bne.n	218d2 <m2m_memcpy+0x12>
   218f2:	e000      	b.n	218f6 <m2m_memcpy+0x36>
	if(sz == 0) return;
   218f4:	46c0      	nop			; (mov r8, r8)
}
   218f6:	46bd      	mov	sp, r7
   218f8:	b004      	add	sp, #16
   218fa:	bd80      	pop	{r7, pc}

000218fc <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
   218fc:	b580      	push	{r7, lr}
   218fe:	b084      	sub	sp, #16
   21900:	af00      	add	r7, sp, #0
   21902:	60f8      	str	r0, [r7, #12]
   21904:	607a      	str	r2, [r7, #4]
   21906:	230b      	movs	r3, #11
   21908:	18fb      	adds	r3, r7, r3
   2190a:	1c0a      	adds	r2, r1, #0
   2190c:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
   2190e:	687b      	ldr	r3, [r7, #4]
   21910:	2b00      	cmp	r3, #0
   21912:	d00e      	beq.n	21932 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
   21914:	68fb      	ldr	r3, [r7, #12]
   21916:	220b      	movs	r2, #11
   21918:	18ba      	adds	r2, r7, r2
   2191a:	7812      	ldrb	r2, [r2, #0]
   2191c:	701a      	strb	r2, [r3, #0]
		pBuf++;
   2191e:	68fb      	ldr	r3, [r7, #12]
   21920:	3301      	adds	r3, #1
   21922:	60fb      	str	r3, [r7, #12]
	}while(--sz);
   21924:	687b      	ldr	r3, [r7, #4]
   21926:	3b01      	subs	r3, #1
   21928:	607b      	str	r3, [r7, #4]
   2192a:	687b      	ldr	r3, [r7, #4]
   2192c:	2b00      	cmp	r3, #0
   2192e:	d1f1      	bne.n	21914 <m2m_memset+0x18>
   21930:	e000      	b.n	21934 <m2m_memset+0x38>
	if(sz == 0) return;
   21932:	46c0      	nop			; (mov r8, r8)
}
   21934:	46bd      	mov	sp, r7
   21936:	b004      	add	sp, #16
   21938:	bd80      	pop	{r7, pc}

0002193a <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
   2193a:	b580      	push	{r7, lr}
   2193c:	b084      	sub	sp, #16
   2193e:	af00      	add	r7, sp, #0
   21940:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
   21942:	230e      	movs	r3, #14
   21944:	18fb      	adds	r3, r7, r3
   21946:	2200      	movs	r2, #0
   21948:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
   2194a:	e009      	b.n	21960 <m2m_strlen+0x26>
	{
		u16StrLen ++;
   2194c:	230e      	movs	r3, #14
   2194e:	18fb      	adds	r3, r7, r3
   21950:	881a      	ldrh	r2, [r3, #0]
   21952:	230e      	movs	r3, #14
   21954:	18fb      	adds	r3, r7, r3
   21956:	3201      	adds	r2, #1
   21958:	801a      	strh	r2, [r3, #0]
		pcStr++;
   2195a:	687b      	ldr	r3, [r7, #4]
   2195c:	3301      	adds	r3, #1
   2195e:	607b      	str	r3, [r7, #4]
	while(*pcStr)
   21960:	687b      	ldr	r3, [r7, #4]
   21962:	781b      	ldrb	r3, [r3, #0]
   21964:	2b00      	cmp	r3, #0
   21966:	d1f1      	bne.n	2194c <m2m_strlen+0x12>
	}
	return u16StrLen;
   21968:	230e      	movs	r3, #14
   2196a:	18fb      	adds	r3, r7, r3
   2196c:	881b      	ldrh	r3, [r3, #0]
}
   2196e:	0018      	movs	r0, r3
   21970:	46bd      	mov	sp, r7
   21972:	b004      	add	sp, #16
   21974:	bd80      	pop	{r7, pc}
	...

00021978 <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
   21978:	b580      	push	{r7, lr}
   2197a:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
   2197c:	4b04      	ldr	r3, [pc, #16]	; (21990 <isr+0x18>)
   2197e:	78db      	ldrb	r3, [r3, #3]
   21980:	b2db      	uxtb	r3, r3
   21982:	3301      	adds	r3, #1
   21984:	b2da      	uxtb	r2, r3
   21986:	4b02      	ldr	r3, [pc, #8]	; (21990 <isr+0x18>)
   21988:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
   2198a:	46c0      	nop			; (mov r8, r8)
   2198c:	46bd      	mov	sp, r7
   2198e:	bd80      	pop	{r7, pc}
   21990:	20005b24 	.word	0x20005b24

00021994 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
   21994:	b590      	push	{r4, r7, lr}
   21996:	b083      	sub	sp, #12
   21998:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   2199a:	1dfb      	adds	r3, r7, #7
   2199c:	2200      	movs	r2, #0
   2199e:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
   219a0:	4b14      	ldr	r3, [pc, #80]	; (219f4 <hif_set_rx_done+0x60>)
   219a2:	2200      	movs	r2, #0
   219a4:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
   219a6:	2001      	movs	r0, #1
   219a8:	4b13      	ldr	r3, [pc, #76]	; (219f8 <hif_set_rx_done+0x64>)
   219aa:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
   219ac:	1dfc      	adds	r4, r7, #7
   219ae:	003b      	movs	r3, r7
   219b0:	4a12      	ldr	r2, [pc, #72]	; (219fc <hif_set_rx_done+0x68>)
   219b2:	0019      	movs	r1, r3
   219b4:	0010      	movs	r0, r2
   219b6:	4b12      	ldr	r3, [pc, #72]	; (21a00 <hif_set_rx_done+0x6c>)
   219b8:	4798      	blx	r3
   219ba:	0003      	movs	r3, r0
   219bc:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   219be:	1dfb      	adds	r3, r7, #7
   219c0:	781b      	ldrb	r3, [r3, #0]
   219c2:	b25b      	sxtb	r3, r3
   219c4:	2b00      	cmp	r3, #0
   219c6:	d10d      	bne.n	219e4 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
   219c8:	683b      	ldr	r3, [r7, #0]
   219ca:	2202      	movs	r2, #2
   219cc:	4313      	orrs	r3, r2
   219ce:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   219d0:	683b      	ldr	r3, [r7, #0]
   219d2:	1dfc      	adds	r4, r7, #7
   219d4:	4a09      	ldr	r2, [pc, #36]	; (219fc <hif_set_rx_done+0x68>)
   219d6:	0019      	movs	r1, r3
   219d8:	0010      	movs	r0, r2
   219da:	4b0a      	ldr	r3, [pc, #40]	; (21a04 <hif_set_rx_done+0x70>)
   219dc:	4798      	blx	r3
   219de:	0003      	movs	r3, r0
   219e0:	7023      	strb	r3, [r4, #0]
   219e2:	e000      	b.n	219e6 <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
   219e4:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
   219e6:	1dfb      	adds	r3, r7, #7
   219e8:	781b      	ldrb	r3, [r3, #0]
   219ea:	b25b      	sxtb	r3, r3

}
   219ec:	0018      	movs	r0, r3
   219ee:	46bd      	mov	sp, r7
   219f0:	b003      	add	sp, #12
   219f2:	bd90      	pop	{r4, r7, pc}
   219f4:	20005b24 	.word	0x20005b24
   219f8:	000210b1 	.word	0x000210b1
   219fc:	00001070 	.word	0x00001070
   21a00:	000238b5 	.word	0x000238b5
   21a04:	000238d9 	.word	0x000238d9

00021a08 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   21a08:	b580      	push	{r7, lr}
   21a0a:	b082      	sub	sp, #8
   21a0c:	af00      	add	r7, sp, #0
   21a0e:	603a      	str	r2, [r7, #0]
   21a10:	1dfb      	adds	r3, r7, #7
   21a12:	1c02      	adds	r2, r0, #0
   21a14:	701a      	strb	r2, [r3, #0]
   21a16:	1d3b      	adds	r3, r7, #4
   21a18:	1c0a      	adds	r2, r1, #0
   21a1a:	801a      	strh	r2, [r3, #0]


}
   21a1c:	46c0      	nop			; (mov r8, r8)
   21a1e:	46bd      	mov	sp, r7
   21a20:	b002      	add	sp, #8
   21a22:	bd80      	pop	{r7, pc}

00021a24 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
   21a24:	b590      	push	{r4, r7, lr}
   21a26:	b083      	sub	sp, #12
   21a28:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   21a2a:	1dfb      	adds	r3, r7, #7
   21a2c:	2200      	movs	r2, #0
   21a2e:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
   21a30:	4b16      	ldr	r3, [pc, #88]	; (21a8c <hif_chip_wake+0x68>)
   21a32:	789b      	ldrb	r3, [r3, #2]
   21a34:	b2db      	uxtb	r3, r3
   21a36:	2b00      	cmp	r3, #0
   21a38:	d003      	beq.n	21a42 <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
   21a3a:	1dfb      	adds	r3, r7, #7
   21a3c:	781b      	ldrb	r3, [r3, #0]
   21a3e:	b25b      	sxtb	r3, r3
   21a40:	e01f      	b.n	21a82 <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
   21a42:	4b12      	ldr	r3, [pc, #72]	; (21a8c <hif_chip_wake+0x68>)
   21a44:	785b      	ldrb	r3, [r3, #1]
   21a46:	b2db      	uxtb	r3, r3
   21a48:	2b00      	cmp	r3, #0
   21a4a:	d10e      	bne.n	21a6a <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   21a4c:	4b0f      	ldr	r3, [pc, #60]	; (21a8c <hif_chip_wake+0x68>)
   21a4e:	781b      	ldrb	r3, [r3, #0]
   21a50:	b2db      	uxtb	r3, r3
   21a52:	2b00      	cmp	r3, #0
   21a54:	d009      	beq.n	21a6a <hif_chip_wake+0x46>
		{
			ret = chip_wake();
   21a56:	1dfc      	adds	r4, r7, #7
   21a58:	4b0d      	ldr	r3, [pc, #52]	; (21a90 <hif_chip_wake+0x6c>)
   21a5a:	4798      	blx	r3
   21a5c:	0003      	movs	r3, r0
   21a5e:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   21a60:	1dfb      	adds	r3, r7, #7
   21a62:	781b      	ldrb	r3, [r3, #0]
   21a64:	b25b      	sxtb	r3, r3
   21a66:	2b00      	cmp	r3, #0
   21a68:	d107      	bne.n	21a7a <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
   21a6a:	4b08      	ldr	r3, [pc, #32]	; (21a8c <hif_chip_wake+0x68>)
   21a6c:	785b      	ldrb	r3, [r3, #1]
   21a6e:	b2db      	uxtb	r3, r3
   21a70:	3301      	adds	r3, #1
   21a72:	b2da      	uxtb	r2, r3
   21a74:	4b05      	ldr	r3, [pc, #20]	; (21a8c <hif_chip_wake+0x68>)
   21a76:	705a      	strb	r2, [r3, #1]
   21a78:	e000      	b.n	21a7c <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
   21a7a:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
   21a7c:	1dfb      	adds	r3, r7, #7
   21a7e:	781b      	ldrb	r3, [r3, #0]
   21a80:	b25b      	sxtb	r3, r3
}
   21a82:	0018      	movs	r0, r3
   21a84:	46bd      	mov	sp, r7
   21a86:	b003      	add	sp, #12
   21a88:	bd90      	pop	{r4, r7, pc}
   21a8a:	46c0      	nop			; (mov r8, r8)
   21a8c:	20005b24 	.word	0x20005b24
   21a90:	00023385 	.word	0x00023385

00021a94 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
   21a94:	b580      	push	{r7, lr}
   21a96:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
   21a98:	4b07      	ldr	r3, [pc, #28]	; (21ab8 <hif_chip_sleep_sc+0x24>)
   21a9a:	785b      	ldrb	r3, [r3, #1]
   21a9c:	b2db      	uxtb	r3, r3
   21a9e:	2b00      	cmp	r3, #0
   21aa0:	d006      	beq.n	21ab0 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
   21aa2:	4b05      	ldr	r3, [pc, #20]	; (21ab8 <hif_chip_sleep_sc+0x24>)
   21aa4:	785b      	ldrb	r3, [r3, #1]
   21aa6:	b2db      	uxtb	r3, r3
   21aa8:	3b01      	subs	r3, #1
   21aaa:	b2da      	uxtb	r2, r3
   21aac:	4b02      	ldr	r3, [pc, #8]	; (21ab8 <hif_chip_sleep_sc+0x24>)
   21aae:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
   21ab0:	2300      	movs	r3, #0
}
   21ab2:	0018      	movs	r0, r3
   21ab4:	46bd      	mov	sp, r7
   21ab6:	bd80      	pop	{r7, pc}
   21ab8:	20005b24 	.word	0x20005b24

00021abc <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
   21abc:	b590      	push	{r4, r7, lr}
   21abe:	b083      	sub	sp, #12
   21ac0:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   21ac2:	1dfb      	adds	r3, r7, #7
   21ac4:	2200      	movs	r2, #0
   21ac6:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
   21ac8:	4b10      	ldr	r3, [pc, #64]	; (21b0c <hif_chip_sleep+0x50>)
   21aca:	785b      	ldrb	r3, [r3, #1]
   21acc:	b2db      	uxtb	r3, r3
   21ace:	2b00      	cmp	r3, #0
   21ad0:	d006      	beq.n	21ae0 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
   21ad2:	4b0e      	ldr	r3, [pc, #56]	; (21b0c <hif_chip_sleep+0x50>)
   21ad4:	785b      	ldrb	r3, [r3, #1]
   21ad6:	b2db      	uxtb	r3, r3
   21ad8:	3b01      	subs	r3, #1
   21ada:	b2da      	uxtb	r2, r3
   21adc:	4b0b      	ldr	r3, [pc, #44]	; (21b0c <hif_chip_sleep+0x50>)
   21ade:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
   21ae0:	4b0a      	ldr	r3, [pc, #40]	; (21b0c <hif_chip_sleep+0x50>)
   21ae2:	785b      	ldrb	r3, [r3, #1]
   21ae4:	b2db      	uxtb	r3, r3
   21ae6:	2b00      	cmp	r3, #0
   21ae8:	d109      	bne.n	21afe <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   21aea:	4b08      	ldr	r3, [pc, #32]	; (21b0c <hif_chip_sleep+0x50>)
   21aec:	781b      	ldrb	r3, [r3, #0]
   21aee:	b2db      	uxtb	r3, r3
   21af0:	2b00      	cmp	r3, #0
   21af2:	d004      	beq.n	21afe <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
   21af4:	1dfc      	adds	r4, r7, #7
   21af6:	4b06      	ldr	r3, [pc, #24]	; (21b10 <hif_chip_sleep+0x54>)
   21af8:	4798      	blx	r3
   21afa:	0003      	movs	r3, r0
   21afc:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
   21afe:	1dfb      	adds	r3, r7, #7
   21b00:	781b      	ldrb	r3, [r3, #0]
   21b02:	b25b      	sxtb	r3, r3
}
   21b04:	0018      	movs	r0, r3
   21b06:	46bd      	mov	sp, r7
   21b08:	b003      	add	sp, #12
   21b0a:	bd90      	pop	{r4, r7, pc}
   21b0c:	20005b24 	.word	0x20005b24
   21b10:	000232ad 	.word	0x000232ad

00021b14 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
   21b14:	b580      	push	{r7, lr}
   21b16:	b082      	sub	sp, #8
   21b18:	af00      	add	r7, sp, #0
   21b1a:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
   21b1c:	4b09      	ldr	r3, [pc, #36]	; (21b44 <hif_init+0x30>)
   21b1e:	222c      	movs	r2, #44	; 0x2c
   21b20:	2100      	movs	r1, #0
   21b22:	0018      	movs	r0, r3
   21b24:	4b08      	ldr	r3, [pc, #32]	; (21b48 <hif_init+0x34>)
   21b26:	4798      	blx	r3
	nm_bsp_register_isr(isr);
   21b28:	4b08      	ldr	r3, [pc, #32]	; (21b4c <hif_init+0x38>)
   21b2a:	0018      	movs	r0, r3
   21b2c:	4b08      	ldr	r3, [pc, #32]	; (21b50 <hif_init+0x3c>)
   21b2e:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
   21b30:	4b08      	ldr	r3, [pc, #32]	; (21b54 <hif_init+0x40>)
   21b32:	0019      	movs	r1, r3
   21b34:	2003      	movs	r0, #3
   21b36:	4b08      	ldr	r3, [pc, #32]	; (21b58 <hif_init+0x44>)
   21b38:	4798      	blx	r3
	return M2M_SUCCESS;
   21b3a:	2300      	movs	r3, #0
}
   21b3c:	0018      	movs	r0, r3
   21b3e:	46bd      	mov	sp, r7
   21b40:	b002      	add	sp, #8
   21b42:	bd80      	pop	{r7, pc}
   21b44:	20005b24 	.word	0x20005b24
   21b48:	000218fd 	.word	0x000218fd
   21b4c:	00021979 	.word	0x00021979
   21b50:	00021039 	.word	0x00021039
   21b54:	00021a09 	.word	0x00021a09
   21b58:	000225f9 	.word	0x000225f9

00021b5c <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
   21b5c:	b590      	push	{r4, r7, lr}
   21b5e:	b089      	sub	sp, #36	; 0x24
   21b60:	af00      	add	r7, sp, #0
   21b62:	0004      	movs	r4, r0
   21b64:	0008      	movs	r0, r1
   21b66:	603a      	str	r2, [r7, #0]
   21b68:	0019      	movs	r1, r3
   21b6a:	1dfb      	adds	r3, r7, #7
   21b6c:	1c22      	adds	r2, r4, #0
   21b6e:	701a      	strb	r2, [r3, #0]
   21b70:	1dbb      	adds	r3, r7, #6
   21b72:	1c02      	adds	r2, r0, #0
   21b74:	701a      	strb	r2, [r3, #0]
   21b76:	1d3b      	adds	r3, r7, #4
   21b78:	1c0a      	adds	r2, r1, #0
   21b7a:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
   21b7c:	231f      	movs	r3, #31
   21b7e:	18fb      	adds	r3, r7, r3
   21b80:	22ff      	movs	r2, #255	; 0xff
   21b82:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
   21b84:	1dbb      	adds	r3, r7, #6
   21b86:	781b      	ldrb	r3, [r3, #0]
   21b88:	227f      	movs	r2, #127	; 0x7f
   21b8a:	4013      	ands	r3, r2
   21b8c:	b2da      	uxtb	r2, r3
   21b8e:	2318      	movs	r3, #24
   21b90:	18fb      	adds	r3, r7, r3
   21b92:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
   21b94:	2318      	movs	r3, #24
   21b96:	18fb      	adds	r3, r7, r3
   21b98:	1dfa      	adds	r2, r7, #7
   21b9a:	7812      	ldrb	r2, [r2, #0]
   21b9c:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
   21b9e:	2318      	movs	r3, #24
   21ba0:	18fb      	adds	r3, r7, r3
   21ba2:	2208      	movs	r2, #8
   21ba4:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
   21ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   21ba8:	2b00      	cmp	r3, #0
   21baa:	d011      	beq.n	21bd0 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
   21bac:	2318      	movs	r3, #24
   21bae:	18fb      	adds	r3, r7, r3
   21bb0:	885b      	ldrh	r3, [r3, #2]
   21bb2:	b29a      	uxth	r2, r3
   21bb4:	2338      	movs	r3, #56	; 0x38
   21bb6:	18f9      	adds	r1, r7, r3
   21bb8:	2334      	movs	r3, #52	; 0x34
   21bba:	18fb      	adds	r3, r7, r3
   21bbc:	8809      	ldrh	r1, [r1, #0]
   21bbe:	881b      	ldrh	r3, [r3, #0]
   21bc0:	18cb      	adds	r3, r1, r3
   21bc2:	b29b      	uxth	r3, r3
   21bc4:	18d3      	adds	r3, r2, r3
   21bc6:	b29a      	uxth	r2, r3
   21bc8:	2318      	movs	r3, #24
   21bca:	18fb      	adds	r3, r7, r3
   21bcc:	805a      	strh	r2, [r3, #2]
   21bce:	e00a      	b.n	21be6 <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
   21bd0:	2318      	movs	r3, #24
   21bd2:	18fb      	adds	r3, r7, r3
   21bd4:	885b      	ldrh	r3, [r3, #2]
   21bd6:	b29a      	uxth	r2, r3
   21bd8:	1d3b      	adds	r3, r7, #4
   21bda:	881b      	ldrh	r3, [r3, #0]
   21bdc:	18d3      	adds	r3, r2, r3
   21bde:	b29a      	uxth	r2, r3
   21be0:	2318      	movs	r3, #24
   21be2:	18fb      	adds	r3, r7, r3
   21be4:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
   21be6:	231f      	movs	r3, #31
   21be8:	18fc      	adds	r4, r7, r3
   21bea:	4bb2      	ldr	r3, [pc, #712]	; (21eb4 <hif_send+0x358>)
   21bec:	4798      	blx	r3
   21bee:	0003      	movs	r3, r0
   21bf0:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
   21bf2:	231f      	movs	r3, #31
   21bf4:	18fb      	adds	r3, r7, r3
   21bf6:	781b      	ldrb	r3, [r3, #0]
   21bf8:	b25b      	sxtb	r3, r3
   21bfa:	2b00      	cmp	r3, #0
   21bfc:	d000      	beq.n	21c00 <hif_send+0xa4>
   21bfe:	e129      	b.n	21e54 <hif_send+0x2f8>
	{
		volatile uint32 reg, dma_addr = 0;
   21c00:	2300      	movs	r3, #0
   21c02:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
   21c04:	230e      	movs	r3, #14
   21c06:	18fb      	adds	r3, r7, r3
   21c08:	2200      	movs	r2, #0
   21c0a:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
   21c0c:	2300      	movs	r3, #0
   21c0e:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
   21c10:	1dfb      	adds	r3, r7, #7
   21c12:	781a      	ldrb	r2, [r3, #0]
   21c14:	697b      	ldr	r3, [r7, #20]
   21c16:	4313      	orrs	r3, r2
   21c18:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
   21c1a:	1dbb      	adds	r3, r7, #6
   21c1c:	781b      	ldrb	r3, [r3, #0]
   21c1e:	021a      	lsls	r2, r3, #8
   21c20:	697b      	ldr	r3, [r7, #20]
   21c22:	4313      	orrs	r3, r2
   21c24:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
   21c26:	2318      	movs	r3, #24
   21c28:	18fb      	adds	r3, r7, r3
   21c2a:	885b      	ldrh	r3, [r3, #2]
   21c2c:	b29b      	uxth	r3, r3
   21c2e:	041a      	lsls	r2, r3, #16
   21c30:	697b      	ldr	r3, [r7, #20]
   21c32:	4313      	orrs	r3, r2
   21c34:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
   21c36:	697b      	ldr	r3, [r7, #20]
   21c38:	221f      	movs	r2, #31
   21c3a:	18bc      	adds	r4, r7, r2
   21c3c:	4a9e      	ldr	r2, [pc, #632]	; (21eb8 <hif_send+0x35c>)
   21c3e:	0019      	movs	r1, r3
   21c40:	0010      	movs	r0, r2
   21c42:	4b9e      	ldr	r3, [pc, #632]	; (21ebc <hif_send+0x360>)
   21c44:	4798      	blx	r3
   21c46:	0003      	movs	r3, r0
   21c48:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   21c4a:	231f      	movs	r3, #31
   21c4c:	18fb      	adds	r3, r7, r3
   21c4e:	781b      	ldrb	r3, [r3, #0]
   21c50:	b25b      	sxtb	r3, r3
   21c52:	2b00      	cmp	r3, #0
   21c54:	d000      	beq.n	21c58 <hif_send+0xfc>
   21c56:	e119      	b.n	21e8c <hif_send+0x330>

		reg = 0UL;
   21c58:	2300      	movs	r3, #0
   21c5a:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
   21c5c:	697b      	ldr	r3, [r7, #20]
   21c5e:	2202      	movs	r2, #2
   21c60:	4313      	orrs	r3, r2
   21c62:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
   21c64:	697b      	ldr	r3, [r7, #20]
   21c66:	221f      	movs	r2, #31
   21c68:	18bc      	adds	r4, r7, r2
   21c6a:	4a95      	ldr	r2, [pc, #596]	; (21ec0 <hif_send+0x364>)
   21c6c:	0019      	movs	r1, r3
   21c6e:	0010      	movs	r0, r2
   21c70:	4b92      	ldr	r3, [pc, #584]	; (21ebc <hif_send+0x360>)
   21c72:	4798      	blx	r3
   21c74:	0003      	movs	r3, r0
   21c76:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   21c78:	231f      	movs	r3, #31
   21c7a:	18fb      	adds	r3, r7, r3
   21c7c:	781b      	ldrb	r3, [r3, #0]
   21c7e:	b25b      	sxtb	r3, r3
   21c80:	2b00      	cmp	r3, #0
   21c82:	d000      	beq.n	21c86 <hif_send+0x12a>
   21c84:	e104      	b.n	21e90 <hif_send+0x334>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
   21c86:	2300      	movs	r3, #0
   21c88:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
   21c8a:	230e      	movs	r3, #14
   21c8c:	18fb      	adds	r3, r7, r3
   21c8e:	2200      	movs	r2, #0
   21c90:	801a      	strh	r2, [r3, #0]
   21c92:	e050      	b.n	21d36 <hif_send+0x1da>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   21c94:	231f      	movs	r3, #31
   21c96:	18fc      	adds	r4, r7, r3
   21c98:	2314      	movs	r3, #20
   21c9a:	18fb      	adds	r3, r7, r3
   21c9c:	4a88      	ldr	r2, [pc, #544]	; (21ec0 <hif_send+0x364>)
   21c9e:	0019      	movs	r1, r3
   21ca0:	0010      	movs	r0, r2
   21ca2:	4b88      	ldr	r3, [pc, #544]	; (21ec4 <hif_send+0x368>)
   21ca4:	4798      	blx	r3
   21ca6:	0003      	movs	r3, r0
   21ca8:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
   21caa:	231f      	movs	r3, #31
   21cac:	18fb      	adds	r3, r7, r3
   21cae:	781b      	ldrb	r3, [r3, #0]
   21cb0:	b25b      	sxtb	r3, r3
   21cb2:	2b00      	cmp	r3, #0
   21cb4:	d147      	bne.n	21d46 <hif_send+0x1ea>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
   21cb6:	230e      	movs	r3, #14
   21cb8:	18fb      	adds	r3, r7, r3
   21cba:	881b      	ldrh	r3, [r3, #0]
   21cbc:	b29a      	uxth	r2, r3
   21cbe:	23f4      	movs	r3, #244	; 0xf4
   21cc0:	33ff      	adds	r3, #255	; 0xff
   21cc2:	429a      	cmp	r2, r3
   21cc4:	d916      	bls.n	21cf4 <hif_send+0x198>
				if(cnt < 501) {
   21cc6:	230e      	movs	r3, #14
   21cc8:	18fb      	adds	r3, r7, r3
   21cca:	881b      	ldrh	r3, [r3, #0]
   21ccc:	b29a      	uxth	r2, r3
   21cce:	23fa      	movs	r3, #250	; 0xfa
   21cd0:	005b      	lsls	r3, r3, #1
   21cd2:	429a      	cmp	r2, r3
   21cd4:	d80b      	bhi.n	21cee <hif_send+0x192>
					M2M_INFO("Slowing down...\n");
   21cd6:	4b7c      	ldr	r3, [pc, #496]	; (21ec8 <hif_send+0x36c>)
   21cd8:	0018      	movs	r0, r3
   21cda:	4b7c      	ldr	r3, [pc, #496]	; (21ecc <hif_send+0x370>)
   21cdc:	4798      	blx	r3
   21cde:	4b7c      	ldr	r3, [pc, #496]	; (21ed0 <hif_send+0x374>)
   21ce0:	0018      	movs	r0, r3
   21ce2:	4b7a      	ldr	r3, [pc, #488]	; (21ecc <hif_send+0x370>)
   21ce4:	4798      	blx	r3
   21ce6:	4b7b      	ldr	r3, [pc, #492]	; (21ed4 <hif_send+0x378>)
   21ce8:	0018      	movs	r0, r3
   21cea:	4b78      	ldr	r3, [pc, #480]	; (21ecc <hif_send+0x370>)
   21cec:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
   21cee:	2001      	movs	r0, #1
   21cf0:	4b79      	ldr	r3, [pc, #484]	; (21ed8 <hif_send+0x37c>)
   21cf2:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
   21cf4:	697b      	ldr	r3, [r7, #20]
   21cf6:	2202      	movs	r2, #2
   21cf8:	4013      	ands	r3, r2
   21cfa:	d113      	bne.n	21d24 <hif_send+0x1c8>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
   21cfc:	231f      	movs	r3, #31
   21cfe:	18fc      	adds	r4, r7, r3
   21d00:	2310      	movs	r3, #16
   21d02:	18fb      	adds	r3, r7, r3
   21d04:	4a75      	ldr	r2, [pc, #468]	; (21edc <hif_send+0x380>)
   21d06:	0019      	movs	r1, r3
   21d08:	0010      	movs	r0, r2
   21d0a:	4b6e      	ldr	r3, [pc, #440]	; (21ec4 <hif_send+0x368>)
   21d0c:	4798      	blx	r3
   21d0e:	0003      	movs	r3, r0
   21d10:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
   21d12:	231f      	movs	r3, #31
   21d14:	18fb      	adds	r3, r7, r3
   21d16:	781b      	ldrb	r3, [r3, #0]
   21d18:	b25b      	sxtb	r3, r3
   21d1a:	2b00      	cmp	r3, #0
   21d1c:	d015      	beq.n	21d4a <hif_send+0x1ee>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
   21d1e:	2300      	movs	r3, #0
   21d20:	613b      	str	r3, [r7, #16]
					goto ERR1;
   21d22:	e0bc      	b.n	21e9e <hif_send+0x342>
		for(cnt = 0; cnt < 1000; cnt ++)
   21d24:	230e      	movs	r3, #14
   21d26:	18fb      	adds	r3, r7, r3
   21d28:	881b      	ldrh	r3, [r3, #0]
   21d2a:	b29b      	uxth	r3, r3
   21d2c:	3301      	adds	r3, #1
   21d2e:	b29a      	uxth	r2, r3
   21d30:	230e      	movs	r3, #14
   21d32:	18fb      	adds	r3, r7, r3
   21d34:	801a      	strh	r2, [r3, #0]
   21d36:	230e      	movs	r3, #14
   21d38:	18fb      	adds	r3, r7, r3
   21d3a:	881b      	ldrh	r3, [r3, #0]
   21d3c:	b29b      	uxth	r3, r3
   21d3e:	4a68      	ldr	r2, [pc, #416]	; (21ee0 <hif_send+0x384>)
   21d40:	4293      	cmp	r3, r2
   21d42:	d9a7      	bls.n	21c94 <hif_send+0x138>
   21d44:	e002      	b.n	21d4c <hif_send+0x1f0>
			if(ret != M2M_SUCCESS) break;
   21d46:	46c0      	nop			; (mov r8, r8)
   21d48:	e000      	b.n	21d4c <hif_send+0x1f0>
				}
				/*in case of success break */
				break;
   21d4a:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
   21d4c:	693b      	ldr	r3, [r7, #16]
   21d4e:	2b00      	cmp	r3, #0
   21d50:	d100      	bne.n	21d54 <hif_send+0x1f8>
   21d52:	e074      	b.n	21e3e <hif_send+0x2e2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
   21d54:	693b      	ldr	r3, [r7, #16]
   21d56:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
   21d58:	2318      	movs	r3, #24
   21d5a:	18fb      	adds	r3, r7, r3
   21d5c:	885b      	ldrh	r3, [r3, #2]
   21d5e:	b29a      	uxth	r2, r3
   21d60:	2318      	movs	r3, #24
   21d62:	18fb      	adds	r3, r7, r3
   21d64:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
   21d66:	68bb      	ldr	r3, [r7, #8]
   21d68:	221f      	movs	r2, #31
   21d6a:	18bc      	adds	r4, r7, r2
   21d6c:	2218      	movs	r2, #24
   21d6e:	18b9      	adds	r1, r7, r2
   21d70:	2208      	movs	r2, #8
   21d72:	0018      	movs	r0, r3
   21d74:	4b5b      	ldr	r3, [pc, #364]	; (21ee4 <hif_send+0x388>)
   21d76:	4798      	blx	r3
   21d78:	0003      	movs	r3, r0
   21d7a:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   21d7c:	231f      	movs	r3, #31
   21d7e:	18fb      	adds	r3, r7, r3
   21d80:	781b      	ldrb	r3, [r3, #0]
   21d82:	b25b      	sxtb	r3, r3
   21d84:	2b00      	cmp	r3, #0
   21d86:	d000      	beq.n	21d8a <hif_send+0x22e>
   21d88:	e084      	b.n	21e94 <hif_send+0x338>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
   21d8a:	68bb      	ldr	r3, [r7, #8]
   21d8c:	3308      	adds	r3, #8
   21d8e:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
   21d90:	683b      	ldr	r3, [r7, #0]
   21d92:	2b00      	cmp	r3, #0
   21d94:	d016      	beq.n	21dc4 <hif_send+0x268>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
   21d96:	68b8      	ldr	r0, [r7, #8]
   21d98:	1d3b      	adds	r3, r7, #4
   21d9a:	881a      	ldrh	r2, [r3, #0]
   21d9c:	231f      	movs	r3, #31
   21d9e:	18fc      	adds	r4, r7, r3
   21da0:	683b      	ldr	r3, [r7, #0]
   21da2:	0019      	movs	r1, r3
   21da4:	4b4f      	ldr	r3, [pc, #316]	; (21ee4 <hif_send+0x388>)
   21da6:	4798      	blx	r3
   21da8:	0003      	movs	r3, r0
   21daa:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   21dac:	231f      	movs	r3, #31
   21dae:	18fb      	adds	r3, r7, r3
   21db0:	781b      	ldrb	r3, [r3, #0]
   21db2:	b25b      	sxtb	r3, r3
   21db4:	2b00      	cmp	r3, #0
   21db6:	d000      	beq.n	21dba <hif_send+0x25e>
   21db8:	e06e      	b.n	21e98 <hif_send+0x33c>
				u32CurrAddr += u16CtrlBufSize;
   21dba:	1d3b      	adds	r3, r7, #4
   21dbc:	881a      	ldrh	r2, [r3, #0]
   21dbe:	68bb      	ldr	r3, [r7, #8]
   21dc0:	18d3      	adds	r3, r2, r3
   21dc2:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
   21dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   21dc6:	2b00      	cmp	r3, #0
   21dc8:	d021      	beq.n	21e0e <hif_send+0x2b2>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
   21dca:	2338      	movs	r3, #56	; 0x38
   21dcc:	18fb      	adds	r3, r7, r3
   21dce:	881a      	ldrh	r2, [r3, #0]
   21dd0:	1d3b      	adds	r3, r7, #4
   21dd2:	881b      	ldrh	r3, [r3, #0]
   21dd4:	1ad3      	subs	r3, r2, r3
   21dd6:	001a      	movs	r2, r3
   21dd8:	68bb      	ldr	r3, [r7, #8]
   21dda:	18d3      	adds	r3, r2, r3
   21ddc:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
   21dde:	68b8      	ldr	r0, [r7, #8]
   21de0:	2334      	movs	r3, #52	; 0x34
   21de2:	18fb      	adds	r3, r7, r3
   21de4:	881a      	ldrh	r2, [r3, #0]
   21de6:	231f      	movs	r3, #31
   21de8:	18fc      	adds	r4, r7, r3
   21dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   21dec:	0019      	movs	r1, r3
   21dee:	4b3d      	ldr	r3, [pc, #244]	; (21ee4 <hif_send+0x388>)
   21df0:	4798      	blx	r3
   21df2:	0003      	movs	r3, r0
   21df4:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   21df6:	231f      	movs	r3, #31
   21df8:	18fb      	adds	r3, r7, r3
   21dfa:	781b      	ldrb	r3, [r3, #0]
   21dfc:	b25b      	sxtb	r3, r3
   21dfe:	2b00      	cmp	r3, #0
   21e00:	d14c      	bne.n	21e9c <hif_send+0x340>
				u32CurrAddr += u16DataSize;
   21e02:	2334      	movs	r3, #52	; 0x34
   21e04:	18fb      	adds	r3, r7, r3
   21e06:	881a      	ldrh	r2, [r3, #0]
   21e08:	68bb      	ldr	r3, [r7, #8]
   21e0a:	18d3      	adds	r3, r2, r3
   21e0c:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
   21e0e:	693b      	ldr	r3, [r7, #16]
   21e10:	009b      	lsls	r3, r3, #2
   21e12:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
   21e14:	697b      	ldr	r3, [r7, #20]
   21e16:	2202      	movs	r2, #2
   21e18:	4313      	orrs	r3, r2
   21e1a:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
   21e1c:	697b      	ldr	r3, [r7, #20]
   21e1e:	221f      	movs	r2, #31
   21e20:	18bc      	adds	r4, r7, r2
   21e22:	4a31      	ldr	r2, [pc, #196]	; (21ee8 <hif_send+0x38c>)
   21e24:	0019      	movs	r1, r3
   21e26:	0010      	movs	r0, r2
   21e28:	4b24      	ldr	r3, [pc, #144]	; (21ebc <hif_send+0x360>)
   21e2a:	4798      	blx	r3
   21e2c:	0003      	movs	r3, r0
   21e2e:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   21e30:	231f      	movs	r3, #31
   21e32:	18fb      	adds	r3, r7, r3
   21e34:	781b      	ldrb	r3, [r3, #0]
   21e36:	b25b      	sxtb	r3, r3
   21e38:	2b00      	cmp	r3, #0
   21e3a:	d01c      	beq.n	21e76 <hif_send+0x31a>
   21e3c:	e02f      	b.n	21e9e <hif_send+0x342>
		}
		else
		{
			ret = hif_chip_sleep();
   21e3e:	231f      	movs	r3, #31
   21e40:	18fc      	adds	r4, r7, r3
   21e42:	4b2a      	ldr	r3, [pc, #168]	; (21eec <hif_send+0x390>)
   21e44:	4798      	blx	r3
   21e46:	0003      	movs	r3, r0
   21e48:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
   21e4a:	231f      	movs	r3, #31
   21e4c:	18fb      	adds	r3, r7, r3
   21e4e:	22fd      	movs	r2, #253	; 0xfd
   21e50:	701a      	strb	r2, [r3, #0]
			goto ERR2;
   21e52:	e026      	b.n	21ea2 <hif_send+0x346>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
   21e54:	2398      	movs	r3, #152	; 0x98
   21e56:	33ff      	adds	r3, #255	; 0xff
   21e58:	001a      	movs	r2, r3
   21e5a:	4925      	ldr	r1, [pc, #148]	; (21ef0 <hif_send+0x394>)
   21e5c:	4b25      	ldr	r3, [pc, #148]	; (21ef4 <hif_send+0x398>)
   21e5e:	0018      	movs	r0, r3
   21e60:	4b1a      	ldr	r3, [pc, #104]	; (21ecc <hif_send+0x370>)
   21e62:	4798      	blx	r3
   21e64:	4b24      	ldr	r3, [pc, #144]	; (21ef8 <hif_send+0x39c>)
   21e66:	0018      	movs	r0, r3
   21e68:	4b18      	ldr	r3, [pc, #96]	; (21ecc <hif_send+0x370>)
   21e6a:	4798      	blx	r3
   21e6c:	4b19      	ldr	r3, [pc, #100]	; (21ed4 <hif_send+0x378>)
   21e6e:	0018      	movs	r0, r3
   21e70:	4b16      	ldr	r3, [pc, #88]	; (21ecc <hif_send+0x370>)
   21e72:	4798      	blx	r3
		goto ERR2;
   21e74:	e015      	b.n	21ea2 <hif_send+0x346>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
   21e76:	231f      	movs	r3, #31
   21e78:	18fc      	adds	r4, r7, r3
   21e7a:	4b1c      	ldr	r3, [pc, #112]	; (21eec <hif_send+0x390>)
   21e7c:	4798      	blx	r3
   21e7e:	0003      	movs	r3, r0
   21e80:	7023      	strb	r3, [r4, #0]
	return ret;
   21e82:	231f      	movs	r3, #31
   21e84:	18fb      	adds	r3, r7, r3
   21e86:	781b      	ldrb	r3, [r3, #0]
   21e88:	b25b      	sxtb	r3, r3
   21e8a:	e00e      	b.n	21eaa <hif_send+0x34e>
		if(M2M_SUCCESS != ret) goto ERR1;
   21e8c:	46c0      	nop			; (mov r8, r8)
   21e8e:	e006      	b.n	21e9e <hif_send+0x342>
		if(M2M_SUCCESS != ret) goto ERR1;
   21e90:	46c0      	nop			; (mov r8, r8)
   21e92:	e004      	b.n	21e9e <hif_send+0x342>
			if(M2M_SUCCESS != ret) goto ERR1;
   21e94:	46c0      	nop			; (mov r8, r8)
   21e96:	e002      	b.n	21e9e <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   21e98:	46c0      	nop			; (mov r8, r8)
   21e9a:	e000      	b.n	21e9e <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   21e9c:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
   21e9e:	4b17      	ldr	r3, [pc, #92]	; (21efc <hif_send+0x3a0>)
   21ea0:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
   21ea2:	231f      	movs	r3, #31
   21ea4:	18fb      	adds	r3, r7, r3
   21ea6:	781b      	ldrb	r3, [r3, #0]
   21ea8:	b25b      	sxtb	r3, r3
}
   21eaa:	0018      	movs	r0, r3
   21eac:	46bd      	mov	sp, r7
   21eae:	b009      	add	sp, #36	; 0x24
   21eb0:	bd90      	pop	{r4, r7, pc}
   21eb2:	46c0      	nop			; (mov r8, r8)
   21eb4:	00021a25 	.word	0x00021a25
   21eb8:	0000108c 	.word	0x0000108c
   21ebc:	000238d9 	.word	0x000238d9
   21ec0:	00001078 	.word	0x00001078
   21ec4:	000238b5 	.word	0x000238b5
   21ec8:	000391d0 	.word	0x000391d0
   21ecc:	0001ebc9 	.word	0x0001ebc9
   21ed0:	000391dc 	.word	0x000391dc
   21ed4:	000391f0 	.word	0x000391f0
   21ed8:	0002101d 	.word	0x0002101d
   21edc:	00150400 	.word	0x00150400
   21ee0:	000003e7 	.word	0x000003e7
   21ee4:	00023a21 	.word	0x00023a21
   21ee8:	0000106c 	.word	0x0000106c
   21eec:	00021abd 	.word	0x00021abd
   21ef0:	000394f8 	.word	0x000394f8
   21ef4:	000391f4 	.word	0x000391f4
   21ef8:	00039208 	.word	0x00039208
   21efc:	00021a95 	.word	0x00021a95

00021f00 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
   21f00:	b590      	push	{r4, r7, lr}
   21f02:	b087      	sub	sp, #28
   21f04:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
   21f06:	230f      	movs	r3, #15
   21f08:	18fb      	adds	r3, r7, r3
   21f0a:	2200      	movs	r2, #0
   21f0c:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   21f0e:	230f      	movs	r3, #15
   21f10:	18fc      	adds	r4, r7, r3
   21f12:	2308      	movs	r3, #8
   21f14:	18fb      	adds	r3, r7, r3
   21f16:	4adc      	ldr	r2, [pc, #880]	; (22288 <hif_isr+0x388>)
   21f18:	0019      	movs	r1, r3
   21f1a:	0010      	movs	r0, r2
   21f1c:	4bdb      	ldr	r3, [pc, #876]	; (2228c <hif_isr+0x38c>)
   21f1e:	4798      	blx	r3
   21f20:	0003      	movs	r3, r0
   21f22:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
   21f24:	230f      	movs	r3, #15
   21f26:	18fb      	adds	r3, r7, r3
   21f28:	781b      	ldrb	r3, [r3, #0]
   21f2a:	b25b      	sxtb	r3, r3
   21f2c:	2b00      	cmp	r3, #0
   21f2e:	d000      	beq.n	21f32 <hif_isr+0x32>
   21f30:	e21e      	b.n	22370 <hif_isr+0x470>
	{
		if(reg & 0x1)	/* New interrupt has been received */
   21f32:	68bb      	ldr	r3, [r7, #8]
   21f34:	2201      	movs	r2, #1
   21f36:	4013      	ands	r3, r2
   21f38:	d100      	bne.n	21f3c <hif_isr+0x3c>
   21f3a:	e204      	b.n	22346 <hif_isr+0x446>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
   21f3c:	2000      	movs	r0, #0
   21f3e:	4bd4      	ldr	r3, [pc, #848]	; (22290 <hif_isr+0x390>)
   21f40:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
   21f42:	68bb      	ldr	r3, [r7, #8]
   21f44:	2201      	movs	r2, #1
   21f46:	4393      	bics	r3, r2
   21f48:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   21f4a:	68bb      	ldr	r3, [r7, #8]
   21f4c:	220f      	movs	r2, #15
   21f4e:	18bc      	adds	r4, r7, r2
   21f50:	4acd      	ldr	r2, [pc, #820]	; (22288 <hif_isr+0x388>)
   21f52:	0019      	movs	r1, r3
   21f54:	0010      	movs	r0, r2
   21f56:	4bcf      	ldr	r3, [pc, #828]	; (22294 <hif_isr+0x394>)
   21f58:	4798      	blx	r3
   21f5a:	0003      	movs	r3, r0
   21f5c:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   21f5e:	230f      	movs	r3, #15
   21f60:	18fb      	adds	r3, r7, r3
   21f62:	781b      	ldrb	r3, [r3, #0]
   21f64:	b25b      	sxtb	r3, r3
   21f66:	2b00      	cmp	r3, #0
   21f68:	d000      	beq.n	21f6c <hif_isr+0x6c>
   21f6a:	e210      	b.n	2238e <hif_isr+0x48e>
			gstrHifCxt.u8HifRXDone = 1;
   21f6c:	4bca      	ldr	r3, [pc, #808]	; (22298 <hif_isr+0x398>)
   21f6e:	2201      	movs	r2, #1
   21f70:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
   21f72:	68bb      	ldr	r3, [r7, #8]
   21f74:	089b      	lsrs	r3, r3, #2
   21f76:	b29a      	uxth	r2, r3
   21f78:	230c      	movs	r3, #12
   21f7a:	18fb      	adds	r3, r7, r3
   21f7c:	0512      	lsls	r2, r2, #20
   21f7e:	0d12      	lsrs	r2, r2, #20
   21f80:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
   21f82:	230c      	movs	r3, #12
   21f84:	18fb      	adds	r3, r7, r3
   21f86:	881b      	ldrh	r3, [r3, #0]
   21f88:	2b00      	cmp	r3, #0
   21f8a:	d100      	bne.n	21f8e <hif_isr+0x8e>
   21f8c:	e1c8      	b.n	22320 <hif_isr+0x420>
				uint32 address = 0;
   21f8e:	2300      	movs	r3, #0
   21f90:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
   21f92:	230f      	movs	r3, #15
   21f94:	18fc      	adds	r4, r7, r3
   21f96:	003b      	movs	r3, r7
   21f98:	4ac0      	ldr	r2, [pc, #768]	; (2229c <hif_isr+0x39c>)
   21f9a:	0019      	movs	r1, r3
   21f9c:	0010      	movs	r0, r2
   21f9e:	4bbb      	ldr	r3, [pc, #748]	; (2228c <hif_isr+0x38c>)
   21fa0:	4798      	blx	r3
   21fa2:	0003      	movs	r3, r0
   21fa4:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
   21fa6:	230f      	movs	r3, #15
   21fa8:	18fb      	adds	r3, r7, r3
   21faa:	781b      	ldrb	r3, [r3, #0]
   21fac:	b25b      	sxtb	r3, r3
   21fae:	2b00      	cmp	r3, #0
   21fb0:	d012      	beq.n	21fd8 <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
   21fb2:	23e4      	movs	r3, #228	; 0xe4
   21fb4:	005a      	lsls	r2, r3, #1
   21fb6:	49ba      	ldr	r1, [pc, #744]	; (222a0 <hif_isr+0x3a0>)
   21fb8:	4bba      	ldr	r3, [pc, #744]	; (222a4 <hif_isr+0x3a4>)
   21fba:	0018      	movs	r0, r3
   21fbc:	4bba      	ldr	r3, [pc, #744]	; (222a8 <hif_isr+0x3a8>)
   21fbe:	4798      	blx	r3
   21fc0:	4bba      	ldr	r3, [pc, #744]	; (222ac <hif_isr+0x3ac>)
   21fc2:	0018      	movs	r0, r3
   21fc4:	4bb8      	ldr	r3, [pc, #736]	; (222a8 <hif_isr+0x3a8>)
   21fc6:	4798      	blx	r3
   21fc8:	4bb9      	ldr	r3, [pc, #740]	; (222b0 <hif_isr+0x3b0>)
   21fca:	0018      	movs	r0, r3
   21fcc:	4bb6      	ldr	r3, [pc, #728]	; (222a8 <hif_isr+0x3a8>)
   21fce:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   21fd0:	2001      	movs	r0, #1
   21fd2:	4baf      	ldr	r3, [pc, #700]	; (22290 <hif_isr+0x390>)
   21fd4:	4798      	blx	r3
					goto ERR1;
   21fd6:	e1db      	b.n	22390 <hif_isr+0x490>
				}
				gstrHifCxt.u32RxAddr = address;
   21fd8:	683a      	ldr	r2, [r7, #0]
   21fda:	4baf      	ldr	r3, [pc, #700]	; (22298 <hif_isr+0x398>)
   21fdc:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
   21fde:	230c      	movs	r3, #12
   21fe0:	18fb      	adds	r3, r7, r3
   21fe2:	881a      	ldrh	r2, [r3, #0]
   21fe4:	4bac      	ldr	r3, [pc, #688]	; (22298 <hif_isr+0x398>)
   21fe6:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
   21fe8:	683b      	ldr	r3, [r7, #0]
   21fea:	220f      	movs	r2, #15
   21fec:	18bc      	adds	r4, r7, r2
   21fee:	1d39      	adds	r1, r7, #4
   21ff0:	2204      	movs	r2, #4
   21ff2:	0018      	movs	r0, r3
   21ff4:	4baf      	ldr	r3, [pc, #700]	; (222b4 <hif_isr+0x3b4>)
   21ff6:	4798      	blx	r3
   21ff8:	0003      	movs	r3, r0
   21ffa:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
   21ffc:	1d3b      	adds	r3, r7, #4
   21ffe:	885b      	ldrh	r3, [r3, #2]
   22000:	b29a      	uxth	r2, r3
   22002:	1d3b      	adds	r3, r7, #4
   22004:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
   22006:	230f      	movs	r3, #15
   22008:	18fb      	adds	r3, r7, r3
   2200a:	781b      	ldrb	r3, [r3, #0]
   2200c:	b25b      	sxtb	r3, r3
   2200e:	2b00      	cmp	r3, #0
   22010:	d012      	beq.n	22038 <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
   22012:	23e9      	movs	r3, #233	; 0xe9
   22014:	005a      	lsls	r2, r3, #1
   22016:	49a2      	ldr	r1, [pc, #648]	; (222a0 <hif_isr+0x3a0>)
   22018:	4ba2      	ldr	r3, [pc, #648]	; (222a4 <hif_isr+0x3a4>)
   2201a:	0018      	movs	r0, r3
   2201c:	4ba2      	ldr	r3, [pc, #648]	; (222a8 <hif_isr+0x3a8>)
   2201e:	4798      	blx	r3
   22020:	4ba5      	ldr	r3, [pc, #660]	; (222b8 <hif_isr+0x3b8>)
   22022:	0018      	movs	r0, r3
   22024:	4ba0      	ldr	r3, [pc, #640]	; (222a8 <hif_isr+0x3a8>)
   22026:	4798      	blx	r3
   22028:	4ba1      	ldr	r3, [pc, #644]	; (222b0 <hif_isr+0x3b0>)
   2202a:	0018      	movs	r0, r3
   2202c:	4b9e      	ldr	r3, [pc, #632]	; (222a8 <hif_isr+0x3a8>)
   2202e:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   22030:	2001      	movs	r0, #1
   22032:	4b97      	ldr	r3, [pc, #604]	; (22290 <hif_isr+0x390>)
   22034:	4798      	blx	r3
					goto ERR1;
   22036:	e1ab      	b.n	22390 <hif_isr+0x490>
				}
				if(strHif.u16Length != size)
   22038:	1d3b      	adds	r3, r7, #4
   2203a:	885b      	ldrh	r3, [r3, #2]
   2203c:	b29b      	uxth	r3, r3
   2203e:	220c      	movs	r2, #12
   22040:	18ba      	adds	r2, r7, r2
   22042:	8812      	ldrh	r2, [r2, #0]
   22044:	429a      	cmp	r2, r3
   22046:	d02f      	beq.n	220a8 <hif_isr+0x1a8>
				{
					if((size - strHif.u16Length) > 4)
   22048:	230c      	movs	r3, #12
   2204a:	18fb      	adds	r3, r7, r3
   2204c:	881b      	ldrh	r3, [r3, #0]
   2204e:	1d3a      	adds	r2, r7, #4
   22050:	8852      	ldrh	r2, [r2, #2]
   22052:	b292      	uxth	r2, r2
   22054:	1a9b      	subs	r3, r3, r2
   22056:	2b04      	cmp	r3, #4
   22058:	dd26      	ble.n	220a8 <hif_isr+0x1a8>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
   2205a:	23dc      	movs	r3, #220	; 0xdc
   2205c:	33ff      	adds	r3, #255	; 0xff
   2205e:	001a      	movs	r2, r3
   22060:	498f      	ldr	r1, [pc, #572]	; (222a0 <hif_isr+0x3a0>)
   22062:	4b90      	ldr	r3, [pc, #576]	; (222a4 <hif_isr+0x3a4>)
   22064:	0018      	movs	r0, r3
   22066:	4b90      	ldr	r3, [pc, #576]	; (222a8 <hif_isr+0x3a8>)
   22068:	4798      	blx	r3
   2206a:	230c      	movs	r3, #12
   2206c:	18fb      	adds	r3, r7, r3
   2206e:	8819      	ldrh	r1, [r3, #0]
   22070:	1d3b      	adds	r3, r7, #4
   22072:	885b      	ldrh	r3, [r3, #2]
   22074:	b29b      	uxth	r3, r3
   22076:	001a      	movs	r2, r3
   22078:	1d3b      	adds	r3, r7, #4
   2207a:	781b      	ldrb	r3, [r3, #0]
   2207c:	b2db      	uxtb	r3, r3
   2207e:	001c      	movs	r4, r3
   22080:	1d3b      	adds	r3, r7, #4
   22082:	785b      	ldrb	r3, [r3, #1]
   22084:	b2db      	uxtb	r3, r3
   22086:	488d      	ldr	r0, [pc, #564]	; (222bc <hif_isr+0x3bc>)
   22088:	9300      	str	r3, [sp, #0]
   2208a:	0023      	movs	r3, r4
   2208c:	4c86      	ldr	r4, [pc, #536]	; (222a8 <hif_isr+0x3a8>)
   2208e:	47a0      	blx	r4
   22090:	4b87      	ldr	r3, [pc, #540]	; (222b0 <hif_isr+0x3b0>)
   22092:	0018      	movs	r0, r3
   22094:	4b84      	ldr	r3, [pc, #528]	; (222a8 <hif_isr+0x3a8>)
   22096:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
   22098:	2001      	movs	r0, #1
   2209a:	4b7d      	ldr	r3, [pc, #500]	; (22290 <hif_isr+0x390>)
   2209c:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
   2209e:	230f      	movs	r3, #15
   220a0:	18fb      	adds	r3, r7, r3
   220a2:	22fa      	movs	r2, #250	; 0xfa
   220a4:	701a      	strb	r2, [r3, #0]
						goto ERR1;
   220a6:	e173      	b.n	22390 <hif_isr+0x490>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
   220a8:	1d3b      	adds	r3, r7, #4
   220aa:	781b      	ldrb	r3, [r3, #0]
   220ac:	b2db      	uxtb	r3, r3
   220ae:	2b01      	cmp	r3, #1
   220b0:	d122      	bne.n	220f8 <hif_isr+0x1f8>
				{
					if(gstrHifCxt.pfWifiCb)
   220b2:	4b79      	ldr	r3, [pc, #484]	; (22298 <hif_isr+0x398>)
   220b4:	691b      	ldr	r3, [r3, #16]
   220b6:	2b00      	cmp	r3, #0
   220b8:	d00d      	beq.n	220d6 <hif_isr+0x1d6>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   220ba:	4b77      	ldr	r3, [pc, #476]	; (22298 <hif_isr+0x398>)
   220bc:	691b      	ldr	r3, [r3, #16]
   220be:	1d3a      	adds	r2, r7, #4
   220c0:	7852      	ldrb	r2, [r2, #1]
   220c2:	b2d0      	uxtb	r0, r2
   220c4:	1d3a      	adds	r2, r7, #4
   220c6:	8852      	ldrh	r2, [r2, #2]
   220c8:	b292      	uxth	r2, r2
   220ca:	3a08      	subs	r2, #8
   220cc:	b291      	uxth	r1, r2
   220ce:	683a      	ldr	r2, [r7, #0]
   220d0:	3208      	adds	r2, #8
   220d2:	4798      	blx	r3
   220d4:	e102      	b.n	222dc <hif_isr+0x3dc>
					else
						M2M_ERR("WIFI callback is not registered\n");
   220d6:	23e8      	movs	r3, #232	; 0xe8
   220d8:	33ff      	adds	r3, #255	; 0xff
   220da:	001a      	movs	r2, r3
   220dc:	4970      	ldr	r1, [pc, #448]	; (222a0 <hif_isr+0x3a0>)
   220de:	4b71      	ldr	r3, [pc, #452]	; (222a4 <hif_isr+0x3a4>)
   220e0:	0018      	movs	r0, r3
   220e2:	4b71      	ldr	r3, [pc, #452]	; (222a8 <hif_isr+0x3a8>)
   220e4:	4798      	blx	r3
   220e6:	4b76      	ldr	r3, [pc, #472]	; (222c0 <hif_isr+0x3c0>)
   220e8:	0018      	movs	r0, r3
   220ea:	4b6f      	ldr	r3, [pc, #444]	; (222a8 <hif_isr+0x3a8>)
   220ec:	4798      	blx	r3
   220ee:	4b70      	ldr	r3, [pc, #448]	; (222b0 <hif_isr+0x3b0>)
   220f0:	0018      	movs	r0, r3
   220f2:	4b6d      	ldr	r3, [pc, #436]	; (222a8 <hif_isr+0x3a8>)
   220f4:	4798      	blx	r3
   220f6:	e0f1      	b.n	222dc <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
   220f8:	1d3b      	adds	r3, r7, #4
   220fa:	781b      	ldrb	r3, [r3, #0]
   220fc:	b2db      	uxtb	r3, r3
   220fe:	2b02      	cmp	r3, #2
   22100:	d122      	bne.n	22148 <hif_isr+0x248>
				{
					if(gstrHifCxt.pfIpCb)
   22102:	4b65      	ldr	r3, [pc, #404]	; (22298 <hif_isr+0x398>)
   22104:	695b      	ldr	r3, [r3, #20]
   22106:	2b00      	cmp	r3, #0
   22108:	d00d      	beq.n	22126 <hif_isr+0x226>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2210a:	4b63      	ldr	r3, [pc, #396]	; (22298 <hif_isr+0x398>)
   2210c:	695b      	ldr	r3, [r3, #20]
   2210e:	1d3a      	adds	r2, r7, #4
   22110:	7852      	ldrb	r2, [r2, #1]
   22112:	b2d0      	uxtb	r0, r2
   22114:	1d3a      	adds	r2, r7, #4
   22116:	8852      	ldrh	r2, [r2, #2]
   22118:	b292      	uxth	r2, r2
   2211a:	3a08      	subs	r2, #8
   2211c:	b291      	uxth	r1, r2
   2211e:	683a      	ldr	r2, [r7, #0]
   22120:	3208      	adds	r2, #8
   22122:	4798      	blx	r3
   22124:	e0da      	b.n	222dc <hif_isr+0x3dc>
					else
						M2M_ERR("Scoket callback is not registered\n");
   22126:	23f0      	movs	r3, #240	; 0xf0
   22128:	33ff      	adds	r3, #255	; 0xff
   2212a:	001a      	movs	r2, r3
   2212c:	495c      	ldr	r1, [pc, #368]	; (222a0 <hif_isr+0x3a0>)
   2212e:	4b5d      	ldr	r3, [pc, #372]	; (222a4 <hif_isr+0x3a4>)
   22130:	0018      	movs	r0, r3
   22132:	4b5d      	ldr	r3, [pc, #372]	; (222a8 <hif_isr+0x3a8>)
   22134:	4798      	blx	r3
   22136:	4b63      	ldr	r3, [pc, #396]	; (222c4 <hif_isr+0x3c4>)
   22138:	0018      	movs	r0, r3
   2213a:	4b5b      	ldr	r3, [pc, #364]	; (222a8 <hif_isr+0x3a8>)
   2213c:	4798      	blx	r3
   2213e:	4b5c      	ldr	r3, [pc, #368]	; (222b0 <hif_isr+0x3b0>)
   22140:	0018      	movs	r0, r3
   22142:	4b59      	ldr	r3, [pc, #356]	; (222a8 <hif_isr+0x3a8>)
   22144:	4798      	blx	r3
   22146:	e0c9      	b.n	222dc <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
   22148:	1d3b      	adds	r3, r7, #4
   2214a:	781b      	ldrb	r3, [r3, #0]
   2214c:	b2db      	uxtb	r3, r3
   2214e:	2b04      	cmp	r3, #4
   22150:	d122      	bne.n	22198 <hif_isr+0x298>
				{
					if(gstrHifCxt.pfOtaCb)
   22152:	4b51      	ldr	r3, [pc, #324]	; (22298 <hif_isr+0x398>)
   22154:	699b      	ldr	r3, [r3, #24]
   22156:	2b00      	cmp	r3, #0
   22158:	d00d      	beq.n	22176 <hif_isr+0x276>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2215a:	4b4f      	ldr	r3, [pc, #316]	; (22298 <hif_isr+0x398>)
   2215c:	699b      	ldr	r3, [r3, #24]
   2215e:	1d3a      	adds	r2, r7, #4
   22160:	7852      	ldrb	r2, [r2, #1]
   22162:	b2d0      	uxtb	r0, r2
   22164:	1d3a      	adds	r2, r7, #4
   22166:	8852      	ldrh	r2, [r2, #2]
   22168:	b292      	uxth	r2, r2
   2216a:	3a08      	subs	r2, #8
   2216c:	b291      	uxth	r1, r2
   2216e:	683a      	ldr	r2, [r7, #0]
   22170:	3208      	adds	r2, #8
   22172:	4798      	blx	r3
   22174:	e0b2      	b.n	222dc <hif_isr+0x3dc>
					else
						M2M_ERR("Ota callback is not registered\n");
   22176:	23f8      	movs	r3, #248	; 0xf8
   22178:	33ff      	adds	r3, #255	; 0xff
   2217a:	001a      	movs	r2, r3
   2217c:	4948      	ldr	r1, [pc, #288]	; (222a0 <hif_isr+0x3a0>)
   2217e:	4b49      	ldr	r3, [pc, #292]	; (222a4 <hif_isr+0x3a4>)
   22180:	0018      	movs	r0, r3
   22182:	4b49      	ldr	r3, [pc, #292]	; (222a8 <hif_isr+0x3a8>)
   22184:	4798      	blx	r3
   22186:	4b50      	ldr	r3, [pc, #320]	; (222c8 <hif_isr+0x3c8>)
   22188:	0018      	movs	r0, r3
   2218a:	4b47      	ldr	r3, [pc, #284]	; (222a8 <hif_isr+0x3a8>)
   2218c:	4798      	blx	r3
   2218e:	4b48      	ldr	r3, [pc, #288]	; (222b0 <hif_isr+0x3b0>)
   22190:	0018      	movs	r0, r3
   22192:	4b45      	ldr	r3, [pc, #276]	; (222a8 <hif_isr+0x3a8>)
   22194:	4798      	blx	r3
   22196:	e0a1      	b.n	222dc <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
   22198:	1d3b      	adds	r3, r7, #4
   2219a:	781b      	ldrb	r3, [r3, #0]
   2219c:	b2db      	uxtb	r3, r3
   2219e:	2b06      	cmp	r3, #6
   221a0:	d121      	bne.n	221e6 <hif_isr+0x2e6>
				{
					if(gstrHifCxt.pfCryptoCb)
   221a2:	4b3d      	ldr	r3, [pc, #244]	; (22298 <hif_isr+0x398>)
   221a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   221a6:	2b00      	cmp	r3, #0
   221a8:	d00d      	beq.n	221c6 <hif_isr+0x2c6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   221aa:	4b3b      	ldr	r3, [pc, #236]	; (22298 <hif_isr+0x398>)
   221ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   221ae:	1d3a      	adds	r2, r7, #4
   221b0:	7852      	ldrb	r2, [r2, #1]
   221b2:	b2d0      	uxtb	r0, r2
   221b4:	1d3a      	adds	r2, r7, #4
   221b6:	8852      	ldrh	r2, [r2, #2]
   221b8:	b292      	uxth	r2, r2
   221ba:	3a08      	subs	r2, #8
   221bc:	b291      	uxth	r1, r2
   221be:	683a      	ldr	r2, [r7, #0]
   221c0:	3208      	adds	r2, #8
   221c2:	4798      	blx	r3
   221c4:	e08a      	b.n	222dc <hif_isr+0x3dc>

					else
						M2M_ERR("Crypto callback is not registered\n");
   221c6:	2380      	movs	r3, #128	; 0x80
   221c8:	009a      	lsls	r2, r3, #2
   221ca:	4935      	ldr	r1, [pc, #212]	; (222a0 <hif_isr+0x3a0>)
   221cc:	4b35      	ldr	r3, [pc, #212]	; (222a4 <hif_isr+0x3a4>)
   221ce:	0018      	movs	r0, r3
   221d0:	4b35      	ldr	r3, [pc, #212]	; (222a8 <hif_isr+0x3a8>)
   221d2:	4798      	blx	r3
   221d4:	4b3d      	ldr	r3, [pc, #244]	; (222cc <hif_isr+0x3cc>)
   221d6:	0018      	movs	r0, r3
   221d8:	4b33      	ldr	r3, [pc, #204]	; (222a8 <hif_isr+0x3a8>)
   221da:	4798      	blx	r3
   221dc:	4b34      	ldr	r3, [pc, #208]	; (222b0 <hif_isr+0x3b0>)
   221de:	0018      	movs	r0, r3
   221e0:	4b31      	ldr	r3, [pc, #196]	; (222a8 <hif_isr+0x3a8>)
   221e2:	4798      	blx	r3
   221e4:	e07a      	b.n	222dc <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
   221e6:	1d3b      	adds	r3, r7, #4
   221e8:	781b      	ldrb	r3, [r3, #0]
   221ea:	b2db      	uxtb	r3, r3
   221ec:	2b07      	cmp	r3, #7
   221ee:	d120      	bne.n	22232 <hif_isr+0x332>
				{
					if(gstrHifCxt.pfSigmaCb)
   221f0:	4b29      	ldr	r3, [pc, #164]	; (22298 <hif_isr+0x398>)
   221f2:	69db      	ldr	r3, [r3, #28]
   221f4:	2b00      	cmp	r3, #0
   221f6:	d00d      	beq.n	22214 <hif_isr+0x314>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   221f8:	4b27      	ldr	r3, [pc, #156]	; (22298 <hif_isr+0x398>)
   221fa:	69db      	ldr	r3, [r3, #28]
   221fc:	1d3a      	adds	r2, r7, #4
   221fe:	7852      	ldrb	r2, [r2, #1]
   22200:	b2d0      	uxtb	r0, r2
   22202:	1d3a      	adds	r2, r7, #4
   22204:	8852      	ldrh	r2, [r2, #2]
   22206:	b292      	uxth	r2, r2
   22208:	3a08      	subs	r2, #8
   2220a:	b291      	uxth	r1, r2
   2220c:	683a      	ldr	r2, [r7, #0]
   2220e:	3208      	adds	r2, #8
   22210:	4798      	blx	r3
   22212:	e063      	b.n	222dc <hif_isr+0x3dc>
					else
						M2M_ERR("Sigma callback is not registered\n");
   22214:	4a2e      	ldr	r2, [pc, #184]	; (222d0 <hif_isr+0x3d0>)
   22216:	4922      	ldr	r1, [pc, #136]	; (222a0 <hif_isr+0x3a0>)
   22218:	4b22      	ldr	r3, [pc, #136]	; (222a4 <hif_isr+0x3a4>)
   2221a:	0018      	movs	r0, r3
   2221c:	4b22      	ldr	r3, [pc, #136]	; (222a8 <hif_isr+0x3a8>)
   2221e:	4798      	blx	r3
   22220:	4b2c      	ldr	r3, [pc, #176]	; (222d4 <hif_isr+0x3d4>)
   22222:	0018      	movs	r0, r3
   22224:	4b20      	ldr	r3, [pc, #128]	; (222a8 <hif_isr+0x3a8>)
   22226:	4798      	blx	r3
   22228:	4b21      	ldr	r3, [pc, #132]	; (222b0 <hif_isr+0x3b0>)
   2222a:	0018      	movs	r0, r3
   2222c:	4b1e      	ldr	r3, [pc, #120]	; (222a8 <hif_isr+0x3a8>)
   2222e:	4798      	blx	r3
   22230:	e054      	b.n	222dc <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
   22232:	1d3b      	adds	r3, r7, #4
   22234:	781b      	ldrb	r3, [r3, #0]
   22236:	b2db      	uxtb	r3, r3
   22238:	2b05      	cmp	r3, #5
   2223a:	d111      	bne.n	22260 <hif_isr+0x360>
				{
				    if(gstrHifCxt.pfSslCb)
   2223c:	4b16      	ldr	r3, [pc, #88]	; (22298 <hif_isr+0x398>)
   2223e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   22240:	2b00      	cmp	r3, #0
   22242:	d04b      	beq.n	222dc <hif_isr+0x3dc>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   22244:	4b14      	ldr	r3, [pc, #80]	; (22298 <hif_isr+0x398>)
   22246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   22248:	1d3a      	adds	r2, r7, #4
   2224a:	7852      	ldrb	r2, [r2, #1]
   2224c:	b2d0      	uxtb	r0, r2
   2224e:	1d3a      	adds	r2, r7, #4
   22250:	8852      	ldrh	r2, [r2, #2]
   22252:	b292      	uxth	r2, r2
   22254:	3a08      	subs	r2, #8
   22256:	b291      	uxth	r1, r2
   22258:	683a      	ldr	r2, [r7, #0]
   2225a:	3208      	adds	r2, #8
   2225c:	4798      	blx	r3
   2225e:	e03d      	b.n	222dc <hif_isr+0x3dc>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
   22260:	2384      	movs	r3, #132	; 0x84
   22262:	009a      	lsls	r2, r3, #2
   22264:	490e      	ldr	r1, [pc, #56]	; (222a0 <hif_isr+0x3a0>)
   22266:	4b0f      	ldr	r3, [pc, #60]	; (222a4 <hif_isr+0x3a4>)
   22268:	0018      	movs	r0, r3
   2226a:	4b0f      	ldr	r3, [pc, #60]	; (222a8 <hif_isr+0x3a8>)
   2226c:	4798      	blx	r3
   2226e:	4b1a      	ldr	r3, [pc, #104]	; (222d8 <hif_isr+0x3d8>)
   22270:	0018      	movs	r0, r3
   22272:	4b0d      	ldr	r3, [pc, #52]	; (222a8 <hif_isr+0x3a8>)
   22274:	4798      	blx	r3
   22276:	4b0e      	ldr	r3, [pc, #56]	; (222b0 <hif_isr+0x3b0>)
   22278:	0018      	movs	r0, r3
   2227a:	4b0b      	ldr	r3, [pc, #44]	; (222a8 <hif_isr+0x3a8>)
   2227c:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
   2227e:	230f      	movs	r3, #15
   22280:	18fb      	adds	r3, r7, r3
   22282:	22fa      	movs	r2, #250	; 0xfa
   22284:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   22286:	e083      	b.n	22390 <hif_isr+0x490>
   22288:	00001070 	.word	0x00001070
   2228c:	000238b5 	.word	0x000238b5
   22290:	000210b1 	.word	0x000210b1
   22294:	000238d9 	.word	0x000238d9
   22298:	20005b24 	.word	0x20005b24
   2229c:	00001084 	.word	0x00001084
   222a0:	00039504 	.word	0x00039504
   222a4:	000391f4 	.word	0x000391f4
   222a8:	0001ebc9 	.word	0x0001ebc9
   222ac:	00039228 	.word	0x00039228
   222b0:	000391f0 	.word	0x000391f0
   222b4:	00023929 	.word	0x00023929
   222b8:	00039250 	.word	0x00039250
   222bc:	00039268 	.word	0x00039268
   222c0:	000392a8 	.word	0x000392a8
   222c4:	000392cc 	.word	0x000392cc
   222c8:	000392f0 	.word	0x000392f0
   222cc:	00039310 	.word	0x00039310
   222d0:	00000207 	.word	0x00000207
   222d4:	00039334 	.word	0x00039334
   222d8:	00039358 	.word	0x00039358
				}
				if(gstrHifCxt.u8HifRXDone)
   222dc:	4b30      	ldr	r3, [pc, #192]	; (223a0 <hif_isr+0x4a0>)
   222de:	789b      	ldrb	r3, [r3, #2]
   222e0:	b2db      	uxtb	r3, r3
   222e2:	2b00      	cmp	r3, #0
   222e4:	d054      	beq.n	22390 <hif_isr+0x490>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
   222e6:	4a2f      	ldr	r2, [pc, #188]	; (223a4 <hif_isr+0x4a4>)
   222e8:	492f      	ldr	r1, [pc, #188]	; (223a8 <hif_isr+0x4a8>)
   222ea:	4b30      	ldr	r3, [pc, #192]	; (223ac <hif_isr+0x4ac>)
   222ec:	0018      	movs	r0, r3
   222ee:	4b30      	ldr	r3, [pc, #192]	; (223b0 <hif_isr+0x4b0>)
   222f0:	4798      	blx	r3
   222f2:	1d3b      	adds	r3, r7, #4
   222f4:	781b      	ldrb	r3, [r3, #0]
   222f6:	b2db      	uxtb	r3, r3
   222f8:	0019      	movs	r1, r3
   222fa:	1d3b      	adds	r3, r7, #4
   222fc:	785b      	ldrb	r3, [r3, #1]
   222fe:	b2db      	uxtb	r3, r3
   22300:	001a      	movs	r2, r3
   22302:	4b2c      	ldr	r3, [pc, #176]	; (223b4 <hif_isr+0x4b4>)
   22304:	0018      	movs	r0, r3
   22306:	4b2a      	ldr	r3, [pc, #168]	; (223b0 <hif_isr+0x4b0>)
   22308:	4798      	blx	r3
   2230a:	4b2b      	ldr	r3, [pc, #172]	; (223b8 <hif_isr+0x4b8>)
   2230c:	0018      	movs	r0, r3
   2230e:	4b28      	ldr	r3, [pc, #160]	; (223b0 <hif_isr+0x4b0>)
   22310:	4798      	blx	r3
					ret = hif_set_rx_done();
   22312:	230f      	movs	r3, #15
   22314:	18fc      	adds	r4, r7, r3
   22316:	4b29      	ldr	r3, [pc, #164]	; (223bc <hif_isr+0x4bc>)
   22318:	4798      	blx	r3
   2231a:	0003      	movs	r3, r0
   2231c:	7023      	strb	r3, [r4, #0]
   2231e:	e037      	b.n	22390 <hif_isr+0x490>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
   22320:	4a27      	ldr	r2, [pc, #156]	; (223c0 <hif_isr+0x4c0>)
   22322:	4921      	ldr	r1, [pc, #132]	; (223a8 <hif_isr+0x4a8>)
   22324:	4b21      	ldr	r3, [pc, #132]	; (223ac <hif_isr+0x4ac>)
   22326:	0018      	movs	r0, r3
   22328:	4b21      	ldr	r3, [pc, #132]	; (223b0 <hif_isr+0x4b0>)
   2232a:	4798      	blx	r3
   2232c:	4b25      	ldr	r3, [pc, #148]	; (223c4 <hif_isr+0x4c4>)
   2232e:	0018      	movs	r0, r3
   22330:	4b1f      	ldr	r3, [pc, #124]	; (223b0 <hif_isr+0x4b0>)
   22332:	4798      	blx	r3
   22334:	4b20      	ldr	r3, [pc, #128]	; (223b8 <hif_isr+0x4b8>)
   22336:	0018      	movs	r0, r3
   22338:	4b1d      	ldr	r3, [pc, #116]	; (223b0 <hif_isr+0x4b0>)
   2233a:	4798      	blx	r3
				ret = M2M_ERR_RCV;
   2233c:	230f      	movs	r3, #15
   2233e:	18fb      	adds	r3, r7, r3
   22340:	22fe      	movs	r2, #254	; 0xfe
   22342:	701a      	strb	r2, [r3, #0]
				goto ERR1;
   22344:	e024      	b.n	22390 <hif_isr+0x490>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
   22346:	4a20      	ldr	r2, [pc, #128]	; (223c8 <hif_isr+0x4c8>)
   22348:	4917      	ldr	r1, [pc, #92]	; (223a8 <hif_isr+0x4a8>)
   2234a:	4b18      	ldr	r3, [pc, #96]	; (223ac <hif_isr+0x4ac>)
   2234c:	0018      	movs	r0, r3
   2234e:	4b18      	ldr	r3, [pc, #96]	; (223b0 <hif_isr+0x4b0>)
   22350:	4798      	blx	r3
   22352:	68ba      	ldr	r2, [r7, #8]
   22354:	4b1d      	ldr	r3, [pc, #116]	; (223cc <hif_isr+0x4cc>)
   22356:	0011      	movs	r1, r2
   22358:	0018      	movs	r0, r3
   2235a:	4b15      	ldr	r3, [pc, #84]	; (223b0 <hif_isr+0x4b0>)
   2235c:	4798      	blx	r3
   2235e:	4b16      	ldr	r3, [pc, #88]	; (223b8 <hif_isr+0x4b8>)
   22360:	0018      	movs	r0, r3
   22362:	4b13      	ldr	r3, [pc, #76]	; (223b0 <hif_isr+0x4b0>)
   22364:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22366:	230f      	movs	r3, #15
   22368:	18fb      	adds	r3, r7, r3
   2236a:	22f4      	movs	r2, #244	; 0xf4
   2236c:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   2236e:	e00f      	b.n	22390 <hif_isr+0x490>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
   22370:	4a17      	ldr	r2, [pc, #92]	; (223d0 <hif_isr+0x4d0>)
   22372:	490d      	ldr	r1, [pc, #52]	; (223a8 <hif_isr+0x4a8>)
   22374:	4b0d      	ldr	r3, [pc, #52]	; (223ac <hif_isr+0x4ac>)
   22376:	0018      	movs	r0, r3
   22378:	4b0d      	ldr	r3, [pc, #52]	; (223b0 <hif_isr+0x4b0>)
   2237a:	4798      	blx	r3
   2237c:	4b15      	ldr	r3, [pc, #84]	; (223d4 <hif_isr+0x4d4>)
   2237e:	0018      	movs	r0, r3
   22380:	4b0b      	ldr	r3, [pc, #44]	; (223b0 <hif_isr+0x4b0>)
   22382:	4798      	blx	r3
   22384:	4b0c      	ldr	r3, [pc, #48]	; (223b8 <hif_isr+0x4b8>)
   22386:	0018      	movs	r0, r3
   22388:	4b09      	ldr	r3, [pc, #36]	; (223b0 <hif_isr+0x4b0>)
   2238a:	4798      	blx	r3
		goto ERR1;
   2238c:	e000      	b.n	22390 <hif_isr+0x490>
			if(ret != M2M_SUCCESS)goto ERR1;
   2238e:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   22390:	230f      	movs	r3, #15
   22392:	18fb      	adds	r3, r7, r3
   22394:	781b      	ldrb	r3, [r3, #0]
   22396:	b25b      	sxtb	r3, r3
}
   22398:	0018      	movs	r0, r3
   2239a:	46bd      	mov	sp, r7
   2239c:	b005      	add	sp, #20
   2239e:	bd90      	pop	{r4, r7, pc}
   223a0:	20005b24 	.word	0x20005b24
   223a4:	00000216 	.word	0x00000216
   223a8:	00039504 	.word	0x00039504
   223ac:	000391f4 	.word	0x000391f4
   223b0:	0001ebc9 	.word	0x0001ebc9
   223b4:	00039370 	.word	0x00039370
   223b8:	000391f0 	.word	0x000391f0
   223bc:	00021995 	.word	0x00021995
   223c0:	0000021d 	.word	0x0000021d
   223c4:	0003939c 	.word	0x0003939c
   223c8:	00000225 	.word	0x00000225
   223cc:	000393b0 	.word	0x000393b0
   223d0:	0000022e 	.word	0x0000022e
   223d4:	000393cc 	.word	0x000393cc

000223d8 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
   223d8:	b590      	push	{r4, r7, lr}
   223da:	b083      	sub	sp, #12
   223dc:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
   223de:	1dfb      	adds	r3, r7, #7
   223e0:	2200      	movs	r2, #0
   223e2:	701a      	strb	r2, [r3, #0]
	
	gstrHifCxt.u8Yield = 0;
   223e4:	4b1c      	ldr	r3, [pc, #112]	; (22458 <hif_handle_isr+0x80>)
   223e6:	2200      	movs	r2, #0
   223e8:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   223ea:	e024      	b.n	22436 <hif_handle_isr+0x5e>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
   223ec:	4b1a      	ldr	r3, [pc, #104]	; (22458 <hif_handle_isr+0x80>)
   223ee:	78db      	ldrb	r3, [r3, #3]
   223f0:	b2db      	uxtb	r3, r3
   223f2:	3b01      	subs	r3, #1
   223f4:	b2da      	uxtb	r2, r3
   223f6:	4b18      	ldr	r3, [pc, #96]	; (22458 <hif_handle_isr+0x80>)
   223f8:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
   223fa:	1dfc      	adds	r4, r7, #7
   223fc:	4b17      	ldr	r3, [pc, #92]	; (2245c <hif_handle_isr+0x84>)
   223fe:	4798      	blx	r3
   22400:	0003      	movs	r3, r0
   22402:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   22404:	1dfb      	adds	r3, r7, #7
   22406:	781b      	ldrb	r3, [r3, #0]
   22408:	b25b      	sxtb	r3, r3
   2240a:	2b00      	cmp	r3, #0
   2240c:	d100      	bne.n	22410 <hif_handle_isr+0x38>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
   2240e:	e012      	b.n	22436 <hif_handle_isr+0x5e>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
   22410:	4a13      	ldr	r2, [pc, #76]	; (22460 <hif_handle_isr+0x88>)
   22412:	4914      	ldr	r1, [pc, #80]	; (22464 <hif_handle_isr+0x8c>)
   22414:	4b14      	ldr	r3, [pc, #80]	; (22468 <hif_handle_isr+0x90>)
   22416:	0018      	movs	r0, r3
   22418:	4b14      	ldr	r3, [pc, #80]	; (2246c <hif_handle_isr+0x94>)
   2241a:	4798      	blx	r3
   2241c:	1dfb      	adds	r3, r7, #7
   2241e:	2200      	movs	r2, #0
   22420:	569a      	ldrsb	r2, [r3, r2]
   22422:	4b13      	ldr	r3, [pc, #76]	; (22470 <hif_handle_isr+0x98>)
   22424:	0011      	movs	r1, r2
   22426:	0018      	movs	r0, r3
   22428:	4b10      	ldr	r3, [pc, #64]	; (2246c <hif_handle_isr+0x94>)
   2242a:	4798      	blx	r3
   2242c:	4b11      	ldr	r3, [pc, #68]	; (22474 <hif_handle_isr+0x9c>)
   2242e:	0018      	movs	r0, r3
   22430:	4b0e      	ldr	r3, [pc, #56]	; (2246c <hif_handle_isr+0x94>)
   22432:	4798      	blx	r3
			ret = hif_isr();
   22434:	e7e1      	b.n	223fa <hif_handle_isr+0x22>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   22436:	4b08      	ldr	r3, [pc, #32]	; (22458 <hif_handle_isr+0x80>)
   22438:	78db      	ldrb	r3, [r3, #3]
   2243a:	b2db      	uxtb	r3, r3
   2243c:	2b00      	cmp	r3, #0
   2243e:	d004      	beq.n	2244a <hif_handle_isr+0x72>
   22440:	4b05      	ldr	r3, [pc, #20]	; (22458 <hif_handle_isr+0x80>)
   22442:	791b      	ldrb	r3, [r3, #4]
   22444:	b2db      	uxtb	r3, r3
   22446:	2b00      	cmp	r3, #0
   22448:	d0d0      	beq.n	223ec <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
   2244a:	1dfb      	adds	r3, r7, #7
   2244c:	781b      	ldrb	r3, [r3, #0]
   2244e:	b25b      	sxtb	r3, r3
}
   22450:	0018      	movs	r0, r3
   22452:	46bd      	mov	sp, r7
   22454:	b003      	add	sp, #12
   22456:	bd90      	pop	{r4, r7, pc}
   22458:	20005b24 	.word	0x20005b24
   2245c:	00021f01 	.word	0x00021f01
   22460:	00000257 	.word	0x00000257
   22464:	0003950c 	.word	0x0003950c
   22468:	000391f4 	.word	0x000391f4
   2246c:	0001ebc9 	.word	0x0001ebc9
   22470:	000393f0 	.word	0x000393f0
   22474:	000391f0 	.word	0x000391f0

00022478 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
   22478:	b590      	push	{r4, r7, lr}
   2247a:	b087      	sub	sp, #28
   2247c:	af00      	add	r7, sp, #0
   2247e:	60f8      	str	r0, [r7, #12]
   22480:	60b9      	str	r1, [r7, #8]
   22482:	0019      	movs	r1, r3
   22484:	1dbb      	adds	r3, r7, #6
   22486:	801a      	strh	r2, [r3, #0]
   22488:	1d7b      	adds	r3, r7, #5
   2248a:	1c0a      	adds	r2, r1, #0
   2248c:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   2248e:	2317      	movs	r3, #23
   22490:	18fb      	adds	r3, r7, r3
   22492:	2200      	movs	r2, #0
   22494:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
   22496:	68fb      	ldr	r3, [r7, #12]
   22498:	2b00      	cmp	r3, #0
   2249a:	d006      	beq.n	224aa <hif_receive+0x32>
   2249c:	68bb      	ldr	r3, [r7, #8]
   2249e:	2b00      	cmp	r3, #0
   224a0:	d003      	beq.n	224aa <hif_receive+0x32>
   224a2:	1dbb      	adds	r3, r7, #6
   224a4:	881b      	ldrh	r3, [r3, #0]
   224a6:	2b00      	cmp	r3, #0
   224a8:	d11e      	bne.n	224e8 <hif_receive+0x70>
	{
		if(isDone)
   224aa:	1d7b      	adds	r3, r7, #5
   224ac:	781b      	ldrb	r3, [r3, #0]
   224ae:	2b00      	cmp	r3, #0
   224b0:	d006      	beq.n	224c0 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
   224b2:	2317      	movs	r3, #23
   224b4:	18fc      	adds	r4, r7, r3
   224b6:	4b45      	ldr	r3, [pc, #276]	; (225cc <hif_receive+0x154>)
   224b8:	4798      	blx	r3
   224ba:	0003      	movs	r3, r0
   224bc:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
   224be:	e07c      	b.n	225ba <hif_receive+0x142>
			ret = M2M_ERR_FAIL;
   224c0:	2317      	movs	r3, #23
   224c2:	18fb      	adds	r3, r7, r3
   224c4:	22f4      	movs	r2, #244	; 0xf4
   224c6:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
   224c8:	239e      	movs	r3, #158	; 0x9e
   224ca:	009a      	lsls	r2, r3, #2
   224cc:	4940      	ldr	r1, [pc, #256]	; (225d0 <hif_receive+0x158>)
   224ce:	4b41      	ldr	r3, [pc, #260]	; (225d4 <hif_receive+0x15c>)
   224d0:	0018      	movs	r0, r3
   224d2:	4b41      	ldr	r3, [pc, #260]	; (225d8 <hif_receive+0x160>)
   224d4:	4798      	blx	r3
   224d6:	4b41      	ldr	r3, [pc, #260]	; (225dc <hif_receive+0x164>)
   224d8:	0018      	movs	r0, r3
   224da:	4b3f      	ldr	r3, [pc, #252]	; (225d8 <hif_receive+0x160>)
   224dc:	4798      	blx	r3
   224de:	4b40      	ldr	r3, [pc, #256]	; (225e0 <hif_receive+0x168>)
   224e0:	0018      	movs	r0, r3
   224e2:	4b3d      	ldr	r3, [pc, #244]	; (225d8 <hif_receive+0x160>)
   224e4:	4798      	blx	r3
		goto ERR1;
   224e6:	e068      	b.n	225ba <hif_receive+0x142>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
   224e8:	1dbb      	adds	r3, r7, #6
   224ea:	881a      	ldrh	r2, [r3, #0]
   224ec:	4b3d      	ldr	r3, [pc, #244]	; (225e4 <hif_receive+0x16c>)
   224ee:	68db      	ldr	r3, [r3, #12]
   224f0:	429a      	cmp	r2, r3
   224f2:	d917      	bls.n	22524 <hif_receive+0xac>
	{
		ret = M2M_ERR_FAIL;
   224f4:	2317      	movs	r3, #23
   224f6:	18fb      	adds	r3, r7, r3
   224f8:	22f4      	movs	r2, #244	; 0xf4
   224fa:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
   224fc:	23a0      	movs	r3, #160	; 0xa0
   224fe:	009a      	lsls	r2, r3, #2
   22500:	4933      	ldr	r1, [pc, #204]	; (225d0 <hif_receive+0x158>)
   22502:	4b34      	ldr	r3, [pc, #208]	; (225d4 <hif_receive+0x15c>)
   22504:	0018      	movs	r0, r3
   22506:	4b34      	ldr	r3, [pc, #208]	; (225d8 <hif_receive+0x160>)
   22508:	4798      	blx	r3
   2250a:	1dbb      	adds	r3, r7, #6
   2250c:	8819      	ldrh	r1, [r3, #0]
   2250e:	4b35      	ldr	r3, [pc, #212]	; (225e4 <hif_receive+0x16c>)
   22510:	68da      	ldr	r2, [r3, #12]
   22512:	4b35      	ldr	r3, [pc, #212]	; (225e8 <hif_receive+0x170>)
   22514:	0018      	movs	r0, r3
   22516:	4b30      	ldr	r3, [pc, #192]	; (225d8 <hif_receive+0x160>)
   22518:	4798      	blx	r3
   2251a:	4b31      	ldr	r3, [pc, #196]	; (225e0 <hif_receive+0x168>)
   2251c:	0018      	movs	r0, r3
   2251e:	4b2e      	ldr	r3, [pc, #184]	; (225d8 <hif_receive+0x160>)
   22520:	4798      	blx	r3
		goto ERR1;
   22522:	e04a      	b.n	225ba <hif_receive+0x142>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
   22524:	4b2f      	ldr	r3, [pc, #188]	; (225e4 <hif_receive+0x16c>)
   22526:	689a      	ldr	r2, [r3, #8]
   22528:	68fb      	ldr	r3, [r7, #12]
   2252a:	429a      	cmp	r2, r3
   2252c:	d80a      	bhi.n	22544 <hif_receive+0xcc>
   2252e:	1dbb      	adds	r3, r7, #6
   22530:	881a      	ldrh	r2, [r3, #0]
   22532:	68fb      	ldr	r3, [r7, #12]
   22534:	18d2      	adds	r2, r2, r3
   22536:	4b2b      	ldr	r3, [pc, #172]	; (225e4 <hif_receive+0x16c>)
   22538:	6899      	ldr	r1, [r3, #8]
   2253a:	4b2a      	ldr	r3, [pc, #168]	; (225e4 <hif_receive+0x16c>)
   2253c:	68db      	ldr	r3, [r3, #12]
   2253e:	18cb      	adds	r3, r1, r3
   22540:	429a      	cmp	r2, r3
   22542:	d912      	bls.n	2256a <hif_receive+0xf2>
	{
		ret = M2M_ERR_FAIL;
   22544:	2317      	movs	r3, #23
   22546:	18fb      	adds	r3, r7, r3
   22548:	22f4      	movs	r2, #244	; 0xf4
   2254a:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
   2254c:	4a27      	ldr	r2, [pc, #156]	; (225ec <hif_receive+0x174>)
   2254e:	4920      	ldr	r1, [pc, #128]	; (225d0 <hif_receive+0x158>)
   22550:	4b20      	ldr	r3, [pc, #128]	; (225d4 <hif_receive+0x15c>)
   22552:	0018      	movs	r0, r3
   22554:	4b20      	ldr	r3, [pc, #128]	; (225d8 <hif_receive+0x160>)
   22556:	4798      	blx	r3
   22558:	4b25      	ldr	r3, [pc, #148]	; (225f0 <hif_receive+0x178>)
   2255a:	0018      	movs	r0, r3
   2255c:	4b1e      	ldr	r3, [pc, #120]	; (225d8 <hif_receive+0x160>)
   2255e:	4798      	blx	r3
   22560:	4b1f      	ldr	r3, [pc, #124]	; (225e0 <hif_receive+0x168>)
   22562:	0018      	movs	r0, r3
   22564:	4b1c      	ldr	r3, [pc, #112]	; (225d8 <hif_receive+0x160>)
   22566:	4798      	blx	r3
		goto ERR1;
   22568:	e027      	b.n	225ba <hif_receive+0x142>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
   2256a:	1dbb      	adds	r3, r7, #6
   2256c:	881a      	ldrh	r2, [r3, #0]
   2256e:	2317      	movs	r3, #23
   22570:	18fc      	adds	r4, r7, r3
   22572:	68b9      	ldr	r1, [r7, #8]
   22574:	68fb      	ldr	r3, [r7, #12]
   22576:	0018      	movs	r0, r3
   22578:	4b1e      	ldr	r3, [pc, #120]	; (225f4 <hif_receive+0x17c>)
   2257a:	4798      	blx	r3
   2257c:	0003      	movs	r3, r0
   2257e:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   22580:	2317      	movs	r3, #23
   22582:	18fb      	adds	r3, r7, r3
   22584:	781b      	ldrb	r3, [r3, #0]
   22586:	b25b      	sxtb	r3, r3
   22588:	2b00      	cmp	r3, #0
   2258a:	d115      	bne.n	225b8 <hif_receive+0x140>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
   2258c:	4b15      	ldr	r3, [pc, #84]	; (225e4 <hif_receive+0x16c>)
   2258e:	689a      	ldr	r2, [r3, #8]
   22590:	4b14      	ldr	r3, [pc, #80]	; (225e4 <hif_receive+0x16c>)
   22592:	68db      	ldr	r3, [r3, #12]
   22594:	18d2      	adds	r2, r2, r3
   22596:	1dbb      	adds	r3, r7, #6
   22598:	8819      	ldrh	r1, [r3, #0]
   2259a:	68fb      	ldr	r3, [r7, #12]
   2259c:	18cb      	adds	r3, r1, r3
   2259e:	429a      	cmp	r2, r3
   225a0:	d003      	beq.n	225aa <hif_receive+0x132>
   225a2:	1d7b      	adds	r3, r7, #5
   225a4:	781b      	ldrb	r3, [r3, #0]
   225a6:	2b00      	cmp	r3, #0
   225a8:	d007      	beq.n	225ba <hif_receive+0x142>
	{
		/* set RX done */
		ret = hif_set_rx_done();
   225aa:	2317      	movs	r3, #23
   225ac:	18fc      	adds	r4, r7, r3
   225ae:	4b07      	ldr	r3, [pc, #28]	; (225cc <hif_receive+0x154>)
   225b0:	4798      	blx	r3
   225b2:	0003      	movs	r3, r0
   225b4:	7023      	strb	r3, [r4, #0]
   225b6:	e000      	b.n	225ba <hif_receive+0x142>
	if(ret != M2M_SUCCESS)goto ERR1;
   225b8:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   225ba:	2317      	movs	r3, #23
   225bc:	18fb      	adds	r3, r7, r3
   225be:	781b      	ldrb	r3, [r3, #0]
   225c0:	b25b      	sxtb	r3, r3
}
   225c2:	0018      	movs	r0, r3
   225c4:	46bd      	mov	sp, r7
   225c6:	b007      	add	sp, #28
   225c8:	bd90      	pop	{r4, r7, pc}
   225ca:	46c0      	nop			; (mov r8, r8)
   225cc:	00021995 	.word	0x00021995
   225d0:	0003951c 	.word	0x0003951c
   225d4:	000391f4 	.word	0x000391f4
   225d8:	0001ebc9 	.word	0x0001ebc9
   225dc:	00039420 	.word	0x00039420
   225e0:	000391f0 	.word	0x000391f0
   225e4:	20005b24 	.word	0x20005b24
   225e8:	00039440 	.word	0x00039440
   225ec:	00000286 	.word	0x00000286
   225f0:	00039488 	.word	0x00039488
   225f4:	00023929 	.word	0x00023929

000225f8 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
   225f8:	b580      	push	{r7, lr}
   225fa:	b084      	sub	sp, #16
   225fc:	af00      	add	r7, sp, #0
   225fe:	0002      	movs	r2, r0
   22600:	6039      	str	r1, [r7, #0]
   22602:	1dfb      	adds	r3, r7, #7
   22604:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   22606:	230f      	movs	r3, #15
   22608:	18fb      	adds	r3, r7, r3
   2260a:	2200      	movs	r2, #0
   2260c:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
   2260e:	1dfb      	adds	r3, r7, #7
   22610:	781b      	ldrb	r3, [r3, #0]
   22612:	2b07      	cmp	r3, #7
   22614:	d820      	bhi.n	22658 <hif_register_cb+0x60>
   22616:	009a      	lsls	r2, r3, #2
   22618:	4b1e      	ldr	r3, [pc, #120]	; (22694 <hif_register_cb+0x9c>)
   2261a:	18d3      	adds	r3, r2, r3
   2261c:	681b      	ldr	r3, [r3, #0]
   2261e:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
   22620:	4b1d      	ldr	r3, [pc, #116]	; (22698 <hif_register_cb+0xa0>)
   22622:	683a      	ldr	r2, [r7, #0]
   22624:	615a      	str	r2, [r3, #20]
			break;
   22626:	e02d      	b.n	22684 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
   22628:	4b1b      	ldr	r3, [pc, #108]	; (22698 <hif_register_cb+0xa0>)
   2262a:	683a      	ldr	r2, [r7, #0]
   2262c:	611a      	str	r2, [r3, #16]
			break;
   2262e:	e029      	b.n	22684 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
   22630:	4b19      	ldr	r3, [pc, #100]	; (22698 <hif_register_cb+0xa0>)
   22632:	683a      	ldr	r2, [r7, #0]
   22634:	619a      	str	r2, [r3, #24]
			break;
   22636:	e025      	b.n	22684 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
   22638:	4b17      	ldr	r3, [pc, #92]	; (22698 <hif_register_cb+0xa0>)
   2263a:	683a      	ldr	r2, [r7, #0]
   2263c:	621a      	str	r2, [r3, #32]
			break;
   2263e:	e021      	b.n	22684 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
   22640:	4b15      	ldr	r3, [pc, #84]	; (22698 <hif_register_cb+0xa0>)
   22642:	683a      	ldr	r2, [r7, #0]
   22644:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   22646:	e01d      	b.n	22684 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
   22648:	4b13      	ldr	r3, [pc, #76]	; (22698 <hif_register_cb+0xa0>)
   2264a:	683a      	ldr	r2, [r7, #0]
   2264c:	61da      	str	r2, [r3, #28]
			break;
   2264e:	e019      	b.n	22684 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
   22650:	4b11      	ldr	r3, [pc, #68]	; (22698 <hif_register_cb+0xa0>)
   22652:	683a      	ldr	r2, [r7, #0]
   22654:	629a      	str	r2, [r3, #40]	; 0x28
			break;
   22656:	e015      	b.n	22684 <hif_register_cb+0x8c>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
   22658:	4a10      	ldr	r2, [pc, #64]	; (2269c <hif_register_cb+0xa4>)
   2265a:	4911      	ldr	r1, [pc, #68]	; (226a0 <hif_register_cb+0xa8>)
   2265c:	4b11      	ldr	r3, [pc, #68]	; (226a4 <hif_register_cb+0xac>)
   2265e:	0018      	movs	r0, r3
   22660:	4b11      	ldr	r3, [pc, #68]	; (226a8 <hif_register_cb+0xb0>)
   22662:	4798      	blx	r3
   22664:	1dfb      	adds	r3, r7, #7
   22666:	781a      	ldrb	r2, [r3, #0]
   22668:	4b10      	ldr	r3, [pc, #64]	; (226ac <hif_register_cb+0xb4>)
   2266a:	0011      	movs	r1, r2
   2266c:	0018      	movs	r0, r3
   2266e:	4b0e      	ldr	r3, [pc, #56]	; (226a8 <hif_register_cb+0xb0>)
   22670:	4798      	blx	r3
   22672:	4b0f      	ldr	r3, [pc, #60]	; (226b0 <hif_register_cb+0xb8>)
   22674:	0018      	movs	r0, r3
   22676:	4b0c      	ldr	r3, [pc, #48]	; (226a8 <hif_register_cb+0xb0>)
   22678:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   2267a:	230f      	movs	r3, #15
   2267c:	18fb      	adds	r3, r7, r3
   2267e:	22f4      	movs	r2, #244	; 0xf4
   22680:	701a      	strb	r2, [r3, #0]
			break;
   22682:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
   22684:	230f      	movs	r3, #15
   22686:	18fb      	adds	r3, r7, r3
   22688:	781b      	ldrb	r3, [r3, #0]
   2268a:	b25b      	sxtb	r3, r3
}
   2268c:	0018      	movs	r0, r3
   2268e:	46bd      	mov	sp, r7
   22690:	b004      	add	sp, #16
   22692:	bd80      	pop	{r7, pc}
   22694:	000394d8 	.word	0x000394d8
   22698:	20005b24 	.word	0x20005b24
   2269c:	000002be 	.word	0x000002be
   226a0:	00039528 	.word	0x00039528
   226a4:	000391f4 	.word	0x000391f4
   226a8:	0001ebc9 	.word	0x0001ebc9
   226ac:	000394cc 	.word	0x000394cc
   226b0:	000391f0 	.word	0x000391f0

000226b4 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   226b4:	b590      	push	{r4, r7, lr}
   226b6:	b0af      	sub	sp, #188	; 0xbc
   226b8:	af02      	add	r7, sp, #8
   226ba:	603a      	str	r2, [r7, #0]
   226bc:	1dfb      	adds	r3, r7, #7
   226be:	1c02      	adds	r2, r0, #0
   226c0:	701a      	strb	r2, [r3, #0]
   226c2:	1d3b      	adds	r3, r7, #4
   226c4:	1c0a      	adds	r2, r1, #0
   226c6:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
   226c8:	1dfb      	adds	r3, r7, #7
   226ca:	781b      	ldrb	r3, [r3, #0]
   226cc:	2b2c      	cmp	r3, #44	; 0x2c
   226ce:	d116      	bne.n	226fe <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
   226d0:	23a4      	movs	r3, #164	; 0xa4
   226d2:	18f9      	adds	r1, r7, r3
   226d4:	6838      	ldr	r0, [r7, #0]
   226d6:	2300      	movs	r3, #0
   226d8:	2204      	movs	r2, #4
   226da:	4cca      	ldr	r4, [pc, #808]	; (22a04 <m2m_wifi_cb+0x350>)
   226dc:	47a0      	blx	r4
   226de:	1e03      	subs	r3, r0, #0
   226e0:	d000      	beq.n	226e4 <m2m_wifi_cb+0x30>
   226e2:	e1b4      	b.n	22a4e <m2m_wifi_cb+0x39a>
		{
			if (gpfAppWifiCb)
   226e4:	4bc8      	ldr	r3, [pc, #800]	; (22a08 <m2m_wifi_cb+0x354>)
   226e6:	681b      	ldr	r3, [r3, #0]
   226e8:	2b00      	cmp	r3, #0
   226ea:	d100      	bne.n	226ee <m2m_wifi_cb+0x3a>
   226ec:	e1af      	b.n	22a4e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
   226ee:	4bc6      	ldr	r3, [pc, #792]	; (22a08 <m2m_wifi_cb+0x354>)
   226f0:	681b      	ldr	r3, [r3, #0]
   226f2:	22a4      	movs	r2, #164	; 0xa4
   226f4:	18ba      	adds	r2, r7, r2
   226f6:	0011      	movs	r1, r2
   226f8:	202c      	movs	r0, #44	; 0x2c
   226fa:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
   226fc:	e1a7      	b.n	22a4e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
   226fe:	1dfb      	adds	r3, r7, #7
   22700:	781b      	ldrb	r3, [r3, #0]
   22702:	2b1b      	cmp	r3, #27
   22704:	d116      	bne.n	22734 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
   22706:	239c      	movs	r3, #156	; 0x9c
   22708:	18f9      	adds	r1, r7, r3
   2270a:	6838      	ldr	r0, [r7, #0]
   2270c:	2300      	movs	r3, #0
   2270e:	2208      	movs	r2, #8
   22710:	4cbc      	ldr	r4, [pc, #752]	; (22a04 <m2m_wifi_cb+0x350>)
   22712:	47a0      	blx	r4
   22714:	1e03      	subs	r3, r0, #0
   22716:	d000      	beq.n	2271a <m2m_wifi_cb+0x66>
   22718:	e199      	b.n	22a4e <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   2271a:	4bbb      	ldr	r3, [pc, #748]	; (22a08 <m2m_wifi_cb+0x354>)
   2271c:	681b      	ldr	r3, [r3, #0]
   2271e:	2b00      	cmp	r3, #0
   22720:	d100      	bne.n	22724 <m2m_wifi_cb+0x70>
   22722:	e194      	b.n	22a4e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
   22724:	4bb8      	ldr	r3, [pc, #736]	; (22a08 <m2m_wifi_cb+0x354>)
   22726:	681b      	ldr	r3, [r3, #0]
   22728:	229c      	movs	r2, #156	; 0x9c
   2272a:	18ba      	adds	r2, r7, r2
   2272c:	0011      	movs	r1, r2
   2272e:	201b      	movs	r0, #27
   22730:	4798      	blx	r3
}
   22732:	e18c      	b.n	22a4e <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
   22734:	1dfb      	adds	r3, r7, #7
   22736:	781b      	ldrb	r3, [r3, #0]
   22738:	2b06      	cmp	r3, #6
   2273a:	d116      	bne.n	2276a <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
   2273c:	230c      	movs	r3, #12
   2273e:	18f9      	adds	r1, r7, r3
   22740:	6838      	ldr	r0, [r7, #0]
   22742:	2301      	movs	r3, #1
   22744:	2230      	movs	r2, #48	; 0x30
   22746:	4caf      	ldr	r4, [pc, #700]	; (22a04 <m2m_wifi_cb+0x350>)
   22748:	47a0      	blx	r4
   2274a:	1e03      	subs	r3, r0, #0
   2274c:	d000      	beq.n	22750 <m2m_wifi_cb+0x9c>
   2274e:	e17e      	b.n	22a4e <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   22750:	4bad      	ldr	r3, [pc, #692]	; (22a08 <m2m_wifi_cb+0x354>)
   22752:	681b      	ldr	r3, [r3, #0]
   22754:	2b00      	cmp	r3, #0
   22756:	d100      	bne.n	2275a <m2m_wifi_cb+0xa6>
   22758:	e179      	b.n	22a4e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
   2275a:	4bab      	ldr	r3, [pc, #684]	; (22a08 <m2m_wifi_cb+0x354>)
   2275c:	681b      	ldr	r3, [r3, #0]
   2275e:	220c      	movs	r2, #12
   22760:	18ba      	adds	r2, r7, r2
   22762:	0011      	movs	r1, r2
   22764:	2006      	movs	r0, #6
   22766:	4798      	blx	r3
}
   22768:	e171      	b.n	22a4e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
   2276a:	1dfb      	adds	r3, r7, #7
   2276c:	781b      	ldrb	r3, [r3, #0]
   2276e:	2b0e      	cmp	r3, #14
   22770:	d100      	bne.n	22774 <m2m_wifi_cb+0xc0>
   22772:	e16c      	b.n	22a4e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
   22774:	1dfb      	adds	r3, r7, #7
   22776:	781b      	ldrb	r3, [r3, #0]
   22778:	2b32      	cmp	r3, #50	; 0x32
   2277a:	d116      	bne.n	227aa <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
   2277c:	2384      	movs	r3, #132	; 0x84
   2277e:	18f9      	adds	r1, r7, r3
   22780:	6838      	ldr	r0, [r7, #0]
   22782:	2300      	movs	r3, #0
   22784:	2218      	movs	r2, #24
   22786:	4c9f      	ldr	r4, [pc, #636]	; (22a04 <m2m_wifi_cb+0x350>)
   22788:	47a0      	blx	r4
   2278a:	1e03      	subs	r3, r0, #0
   2278c:	d000      	beq.n	22790 <m2m_wifi_cb+0xdc>
   2278e:	e15e      	b.n	22a4e <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   22790:	4b9d      	ldr	r3, [pc, #628]	; (22a08 <m2m_wifi_cb+0x354>)
   22792:	681b      	ldr	r3, [r3, #0]
   22794:	2b00      	cmp	r3, #0
   22796:	d100      	bne.n	2279a <m2m_wifi_cb+0xe6>
   22798:	e159      	b.n	22a4e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
   2279a:	4b9b      	ldr	r3, [pc, #620]	; (22a08 <m2m_wifi_cb+0x354>)
   2279c:	681b      	ldr	r3, [r3, #0]
   2279e:	2284      	movs	r2, #132	; 0x84
   227a0:	18ba      	adds	r2, r7, r2
   227a2:	0011      	movs	r1, r2
   227a4:	2032      	movs	r0, #50	; 0x32
   227a6:	4798      	blx	r3
}
   227a8:	e151      	b.n	22a4e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
   227aa:	1dfb      	adds	r3, r7, #7
   227ac:	781b      	ldrb	r3, [r3, #0]
   227ae:	2b2f      	cmp	r3, #47	; 0x2f
   227b0:	d11d      	bne.n	227ee <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
   227b2:	230c      	movs	r3, #12
   227b4:	18fb      	adds	r3, r7, r3
   227b6:	2264      	movs	r2, #100	; 0x64
   227b8:	2100      	movs	r1, #0
   227ba:	0018      	movs	r0, r3
   227bc:	4b93      	ldr	r3, [pc, #588]	; (22a0c <m2m_wifi_cb+0x358>)
   227be:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
   227c0:	230c      	movs	r3, #12
   227c2:	18f9      	adds	r1, r7, r3
   227c4:	6838      	ldr	r0, [r7, #0]
   227c6:	2300      	movs	r3, #0
   227c8:	2264      	movs	r2, #100	; 0x64
   227ca:	4c8e      	ldr	r4, [pc, #568]	; (22a04 <m2m_wifi_cb+0x350>)
   227cc:	47a0      	blx	r4
   227ce:	1e03      	subs	r3, r0, #0
   227d0:	d000      	beq.n	227d4 <m2m_wifi_cb+0x120>
   227d2:	e13c      	b.n	22a4e <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   227d4:	4b8c      	ldr	r3, [pc, #560]	; (22a08 <m2m_wifi_cb+0x354>)
   227d6:	681b      	ldr	r3, [r3, #0]
   227d8:	2b00      	cmp	r3, #0
   227da:	d100      	bne.n	227de <m2m_wifi_cb+0x12a>
   227dc:	e137      	b.n	22a4e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
   227de:	4b8a      	ldr	r3, [pc, #552]	; (22a08 <m2m_wifi_cb+0x354>)
   227e0:	681b      	ldr	r3, [r3, #0]
   227e2:	220c      	movs	r2, #12
   227e4:	18ba      	adds	r2, r7, r2
   227e6:	0011      	movs	r1, r2
   227e8:	202f      	movs	r0, #47	; 0x2f
   227ea:	4798      	blx	r3
}
   227ec:	e12f      	b.n	22a4e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
   227ee:	1dfb      	adds	r3, r7, #7
   227f0:	781b      	ldrb	r3, [r3, #0]
   227f2:	2b34      	cmp	r3, #52	; 0x34
   227f4:	d137      	bne.n	22866 <m2m_wifi_cb+0x1b2>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
   227f6:	2380      	movs	r3, #128	; 0x80
   227f8:	18f9      	adds	r1, r7, r3
   227fa:	6838      	ldr	r0, [r7, #0]
   227fc:	2300      	movs	r3, #0
   227fe:	2204      	movs	r2, #4
   22800:	4c80      	ldr	r4, [pc, #512]	; (22a04 <m2m_wifi_cb+0x350>)
   22802:	47a0      	blx	r4
   22804:	1e03      	subs	r3, r0, #0
   22806:	d000      	beq.n	2280a <m2m_wifi_cb+0x156>
   22808:	e121      	b.n	22a4e <m2m_wifi_cb+0x39a>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
   2280a:	4b81      	ldr	r3, [pc, #516]	; (22a10 <m2m_wifi_cb+0x35c>)
   2280c:	0018      	movs	r0, r3
   2280e:	4b81      	ldr	r3, [pc, #516]	; (22a14 <m2m_wifi_cb+0x360>)
   22810:	4798      	blx	r3
   22812:	2380      	movs	r3, #128	; 0x80
   22814:	18fb      	adds	r3, r7, r3
   22816:	681b      	ldr	r3, [r3, #0]
   22818:	0e1b      	lsrs	r3, r3, #24
   2281a:	b2db      	uxtb	r3, r3
   2281c:	0019      	movs	r1, r3
   2281e:	2380      	movs	r3, #128	; 0x80
   22820:	18fb      	adds	r3, r7, r3
   22822:	681b      	ldr	r3, [r3, #0]
   22824:	0c1b      	lsrs	r3, r3, #16
   22826:	b2db      	uxtb	r3, r3
   22828:	001a      	movs	r2, r3
   2282a:	2380      	movs	r3, #128	; 0x80
   2282c:	18fb      	adds	r3, r7, r3
   2282e:	681b      	ldr	r3, [r3, #0]
   22830:	0a1b      	lsrs	r3, r3, #8
   22832:	b2db      	uxtb	r3, r3
   22834:	001c      	movs	r4, r3
   22836:	2380      	movs	r3, #128	; 0x80
   22838:	18fb      	adds	r3, r7, r3
   2283a:	681b      	ldr	r3, [r3, #0]
   2283c:	b2db      	uxtb	r3, r3
   2283e:	4876      	ldr	r0, [pc, #472]	; (22a18 <m2m_wifi_cb+0x364>)
   22840:	9300      	str	r3, [sp, #0]
   22842:	0023      	movs	r3, r4
   22844:	4c73      	ldr	r4, [pc, #460]	; (22a14 <m2m_wifi_cb+0x360>)
   22846:	47a0      	blx	r4
   22848:	4b74      	ldr	r3, [pc, #464]	; (22a1c <m2m_wifi_cb+0x368>)
   2284a:	0018      	movs	r0, r3
   2284c:	4b71      	ldr	r3, [pc, #452]	; (22a14 <m2m_wifi_cb+0x360>)
   2284e:	4798      	blx	r3
			if (gpfAppWifiCb)
   22850:	4b6d      	ldr	r3, [pc, #436]	; (22a08 <m2m_wifi_cb+0x354>)
   22852:	681b      	ldr	r3, [r3, #0]
   22854:	2b00      	cmp	r3, #0
   22856:	d100      	bne.n	2285a <m2m_wifi_cb+0x1a6>
   22858:	e0f9      	b.n	22a4e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
   2285a:	4b6b      	ldr	r3, [pc, #428]	; (22a08 <m2m_wifi_cb+0x354>)
   2285c:	681b      	ldr	r3, [r3, #0]
   2285e:	2100      	movs	r1, #0
   22860:	2034      	movs	r0, #52	; 0x34
   22862:	4798      	blx	r3
}
   22864:	e0f3      	b.n	22a4e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
   22866:	1dfb      	adds	r3, r7, #7
   22868:	781b      	ldrb	r3, [r3, #0]
   2286a:	2b11      	cmp	r3, #17
   2286c:	d11e      	bne.n	228ac <m2m_wifi_cb+0x1f8>
		gu8scanInProgress = 0;
   2286e:	4b6c      	ldr	r3, [pc, #432]	; (22a20 <m2m_wifi_cb+0x36c>)
   22870:	2200      	movs	r2, #0
   22872:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
   22874:	237c      	movs	r3, #124	; 0x7c
   22876:	18f9      	adds	r1, r7, r3
   22878:	6838      	ldr	r0, [r7, #0]
   2287a:	2300      	movs	r3, #0
   2287c:	2204      	movs	r2, #4
   2287e:	4c61      	ldr	r4, [pc, #388]	; (22a04 <m2m_wifi_cb+0x350>)
   22880:	47a0      	blx	r4
   22882:	1e03      	subs	r3, r0, #0
   22884:	d000      	beq.n	22888 <m2m_wifi_cb+0x1d4>
   22886:	e0e2      	b.n	22a4e <m2m_wifi_cb+0x39a>
			gu8ChNum = strState.u8NumofCh;
   22888:	237c      	movs	r3, #124	; 0x7c
   2288a:	18fb      	adds	r3, r7, r3
   2288c:	781a      	ldrb	r2, [r3, #0]
   2288e:	4b65      	ldr	r3, [pc, #404]	; (22a24 <m2m_wifi_cb+0x370>)
   22890:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
   22892:	4b5d      	ldr	r3, [pc, #372]	; (22a08 <m2m_wifi_cb+0x354>)
   22894:	681b      	ldr	r3, [r3, #0]
   22896:	2b00      	cmp	r3, #0
   22898:	d100      	bne.n	2289c <m2m_wifi_cb+0x1e8>
   2289a:	e0d8      	b.n	22a4e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
   2289c:	4b5a      	ldr	r3, [pc, #360]	; (22a08 <m2m_wifi_cb+0x354>)
   2289e:	681b      	ldr	r3, [r3, #0]
   228a0:	227c      	movs	r2, #124	; 0x7c
   228a2:	18ba      	adds	r2, r7, r2
   228a4:	0011      	movs	r1, r2
   228a6:	2011      	movs	r0, #17
   228a8:	4798      	blx	r3
}
   228aa:	e0d0      	b.n	22a4e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
   228ac:	1dfb      	adds	r3, r7, #7
   228ae:	781b      	ldrb	r3, [r3, #0]
   228b0:	2b13      	cmp	r3, #19
   228b2:	d116      	bne.n	228e2 <m2m_wifi_cb+0x22e>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
   228b4:	230c      	movs	r3, #12
   228b6:	18f9      	adds	r1, r7, r3
   228b8:	6838      	ldr	r0, [r7, #0]
   228ba:	2300      	movs	r3, #0
   228bc:	222c      	movs	r2, #44	; 0x2c
   228be:	4c51      	ldr	r4, [pc, #324]	; (22a04 <m2m_wifi_cb+0x350>)
   228c0:	47a0      	blx	r4
   228c2:	1e03      	subs	r3, r0, #0
   228c4:	d000      	beq.n	228c8 <m2m_wifi_cb+0x214>
   228c6:	e0c2      	b.n	22a4e <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   228c8:	4b4f      	ldr	r3, [pc, #316]	; (22a08 <m2m_wifi_cb+0x354>)
   228ca:	681b      	ldr	r3, [r3, #0]
   228cc:	2b00      	cmp	r3, #0
   228ce:	d100      	bne.n	228d2 <m2m_wifi_cb+0x21e>
   228d0:	e0bd      	b.n	22a4e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
   228d2:	4b4d      	ldr	r3, [pc, #308]	; (22a08 <m2m_wifi_cb+0x354>)
   228d4:	681b      	ldr	r3, [r3, #0]
   228d6:	220c      	movs	r2, #12
   228d8:	18ba      	adds	r2, r7, r2
   228da:	0011      	movs	r1, r2
   228dc:	2013      	movs	r0, #19
   228de:	4798      	blx	r3
}
   228e0:	e0b5      	b.n	22a4e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
   228e2:	1dfb      	adds	r3, r7, #7
   228e4:	781b      	ldrb	r3, [r3, #0]
   228e6:	2b04      	cmp	r3, #4
   228e8:	d116      	bne.n	22918 <m2m_wifi_cb+0x264>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   228ea:	23a8      	movs	r3, #168	; 0xa8
   228ec:	18f9      	adds	r1, r7, r3
   228ee:	6838      	ldr	r0, [r7, #0]
   228f0:	2300      	movs	r3, #0
   228f2:	2204      	movs	r2, #4
   228f4:	4c43      	ldr	r4, [pc, #268]	; (22a04 <m2m_wifi_cb+0x350>)
   228f6:	47a0      	blx	r4
   228f8:	1e03      	subs	r3, r0, #0
   228fa:	d000      	beq.n	228fe <m2m_wifi_cb+0x24a>
   228fc:	e0a7      	b.n	22a4e <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   228fe:	4b42      	ldr	r3, [pc, #264]	; (22a08 <m2m_wifi_cb+0x354>)
   22900:	681b      	ldr	r3, [r3, #0]
   22902:	2b00      	cmp	r3, #0
   22904:	d100      	bne.n	22908 <m2m_wifi_cb+0x254>
   22906:	e0a2      	b.n	22a4e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
   22908:	4b3f      	ldr	r3, [pc, #252]	; (22a08 <m2m_wifi_cb+0x354>)
   2290a:	681b      	ldr	r3, [r3, #0]
   2290c:	22a8      	movs	r2, #168	; 0xa8
   2290e:	18ba      	adds	r2, r7, r2
   22910:	0011      	movs	r1, r2
   22912:	2004      	movs	r0, #4
   22914:	4798      	blx	r3
}
   22916:	e09a      	b.n	22a4e <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
   22918:	1dfb      	adds	r3, r7, #7
   2291a:	781b      	ldrb	r3, [r3, #0]
   2291c:	2b65      	cmp	r3, #101	; 0x65
   2291e:	d116      	bne.n	2294e <m2m_wifi_cb+0x29a>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   22920:	23a8      	movs	r3, #168	; 0xa8
   22922:	18f9      	adds	r1, r7, r3
   22924:	6838      	ldr	r0, [r7, #0]
   22926:	2300      	movs	r3, #0
   22928:	2204      	movs	r2, #4
   2292a:	4c36      	ldr	r4, [pc, #216]	; (22a04 <m2m_wifi_cb+0x350>)
   2292c:	47a0      	blx	r4
   2292e:	1e03      	subs	r3, r0, #0
   22930:	d000      	beq.n	22934 <m2m_wifi_cb+0x280>
   22932:	e08c      	b.n	22a4e <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   22934:	4b34      	ldr	r3, [pc, #208]	; (22a08 <m2m_wifi_cb+0x354>)
   22936:	681b      	ldr	r3, [r3, #0]
   22938:	2b00      	cmp	r3, #0
   2293a:	d100      	bne.n	2293e <m2m_wifi_cb+0x28a>
   2293c:	e087      	b.n	22a4e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
   2293e:	4b32      	ldr	r3, [pc, #200]	; (22a08 <m2m_wifi_cb+0x354>)
   22940:	681b      	ldr	r3, [r3, #0]
   22942:	22a8      	movs	r2, #168	; 0xa8
   22944:	18ba      	adds	r2, r7, r2
   22946:	0011      	movs	r1, r2
   22948:	2065      	movs	r0, #101	; 0x65
   2294a:	4798      	blx	r3
}
   2294c:	e07f      	b.n	22a4e <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
   2294e:	1dfb      	adds	r3, r7, #7
   22950:	781b      	ldrb	r3, [r3, #0]
   22952:	2b09      	cmp	r3, #9
   22954:	d116      	bne.n	22984 <m2m_wifi_cb+0x2d0>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
   22956:	230c      	movs	r3, #12
   22958:	18f9      	adds	r1, r7, r3
   2295a:	6838      	ldr	r0, [r7, #0]
   2295c:	2301      	movs	r3, #1
   2295e:	2264      	movs	r2, #100	; 0x64
   22960:	4c28      	ldr	r4, [pc, #160]	; (22a04 <m2m_wifi_cb+0x350>)
   22962:	47a0      	blx	r4
   22964:	1e03      	subs	r3, r0, #0
   22966:	d000      	beq.n	2296a <m2m_wifi_cb+0x2b6>
   22968:	e071      	b.n	22a4e <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   2296a:	4b27      	ldr	r3, [pc, #156]	; (22a08 <m2m_wifi_cb+0x354>)
   2296c:	681b      	ldr	r3, [r3, #0]
   2296e:	2b00      	cmp	r3, #0
   22970:	d100      	bne.n	22974 <m2m_wifi_cb+0x2c0>
   22972:	e06c      	b.n	22a4e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
   22974:	4b24      	ldr	r3, [pc, #144]	; (22a08 <m2m_wifi_cb+0x354>)
   22976:	681b      	ldr	r3, [r3, #0]
   22978:	220c      	movs	r2, #12
   2297a:	18ba      	adds	r2, r7, r2
   2297c:	0011      	movs	r1, r2
   2297e:	2009      	movs	r0, #9
   22980:	4798      	blx	r3
}
   22982:	e064      	b.n	22a4e <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
   22984:	1dfb      	adds	r3, r7, #7
   22986:	781b      	ldrb	r3, [r3, #0]
   22988:	2b2a      	cmp	r3, #42	; 0x2a
   2298a:	d114      	bne.n	229b6 <m2m_wifi_cb+0x302>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
   2298c:	2378      	movs	r3, #120	; 0x78
   2298e:	18f9      	adds	r1, r7, r3
   22990:	6838      	ldr	r0, [r7, #0]
   22992:	2301      	movs	r3, #1
   22994:	2204      	movs	r2, #4
   22996:	4c1b      	ldr	r4, [pc, #108]	; (22a04 <m2m_wifi_cb+0x350>)
   22998:	47a0      	blx	r4
   2299a:	1e03      	subs	r3, r0, #0
   2299c:	d157      	bne.n	22a4e <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   2299e:	4b1a      	ldr	r3, [pc, #104]	; (22a08 <m2m_wifi_cb+0x354>)
   229a0:	681b      	ldr	r3, [r3, #0]
   229a2:	2b00      	cmp	r3, #0
   229a4:	d053      	beq.n	22a4e <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
   229a6:	4b18      	ldr	r3, [pc, #96]	; (22a08 <m2m_wifi_cb+0x354>)
   229a8:	681b      	ldr	r3, [r3, #0]
   229aa:	2278      	movs	r2, #120	; 0x78
   229ac:	18ba      	adds	r2, r7, r2
   229ae:	0011      	movs	r1, r2
   229b0:	202a      	movs	r0, #42	; 0x2a
   229b2:	4798      	blx	r3
}
   229b4:	e04b      	b.n	22a4e <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
   229b6:	1dfb      	adds	r3, r7, #7
   229b8:	781b      	ldrb	r3, [r3, #0]
   229ba:	2b20      	cmp	r3, #32
   229bc:	d134      	bne.n	22a28 <m2m_wifi_cb+0x374>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
   229be:	2370      	movs	r3, #112	; 0x70
   229c0:	18f9      	adds	r1, r7, r3
   229c2:	6838      	ldr	r0, [r7, #0]
   229c4:	2300      	movs	r3, #0
   229c6:	2208      	movs	r2, #8
   229c8:	4c0e      	ldr	r4, [pc, #56]	; (22a04 <m2m_wifi_cb+0x350>)
   229ca:	47a0      	blx	r4
   229cc:	1e03      	subs	r3, r0, #0
   229ce:	d13e      	bne.n	22a4e <m2m_wifi_cb+0x39a>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
   229d0:	683b      	ldr	r3, [r7, #0]
   229d2:	3308      	adds	r3, #8
   229d4:	0018      	movs	r0, r3
   229d6:	2370      	movs	r3, #112	; 0x70
   229d8:	18fb      	adds	r3, r7, r3
   229da:	6819      	ldr	r1, [r3, #0]
   229dc:	2370      	movs	r3, #112	; 0x70
   229de:	18fb      	adds	r3, r7, r3
   229e0:	889a      	ldrh	r2, [r3, #4]
   229e2:	2301      	movs	r3, #1
   229e4:	4c07      	ldr	r4, [pc, #28]	; (22a04 <m2m_wifi_cb+0x350>)
   229e6:	47a0      	blx	r4
   229e8:	1e03      	subs	r3, r0, #0
   229ea:	d130      	bne.n	22a4e <m2m_wifi_cb+0x39a>
				if(gpfAppWifiCb)
   229ec:	4b06      	ldr	r3, [pc, #24]	; (22a08 <m2m_wifi_cb+0x354>)
   229ee:	681b      	ldr	r3, [r3, #0]
   229f0:	2b00      	cmp	r3, #0
   229f2:	d02c      	beq.n	22a4e <m2m_wifi_cb+0x39a>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
   229f4:	4b04      	ldr	r3, [pc, #16]	; (22a08 <m2m_wifi_cb+0x354>)
   229f6:	681b      	ldr	r3, [r3, #0]
   229f8:	2270      	movs	r2, #112	; 0x70
   229fa:	18ba      	adds	r2, r7, r2
   229fc:	0011      	movs	r1, r2
   229fe:	2020      	movs	r0, #32
   22a00:	4798      	blx	r3
}
   22a02:	e024      	b.n	22a4e <m2m_wifi_cb+0x39a>
   22a04:	00022479 	.word	0x00022479
   22a08:	200042a8 	.word	0x200042a8
   22a0c:	000218fd 	.word	0x000218fd
   22a10:	00039538 	.word	0x00039538
   22a14:	0001ebc9 	.word	0x0001ebc9
   22a18:	00039544 	.word	0x00039544
   22a1c:	00039564 	.word	0x00039564
   22a20:	200042a5 	.word	0x200042a5
   22a24:	200042a4 	.word	0x200042a4
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
   22a28:	2324      	movs	r3, #36	; 0x24
   22a2a:	33ff      	adds	r3, #255	; 0xff
   22a2c:	001a      	movs	r2, r3
   22a2e:	490a      	ldr	r1, [pc, #40]	; (22a58 <m2m_wifi_cb+0x3a4>)
   22a30:	4b0a      	ldr	r3, [pc, #40]	; (22a5c <m2m_wifi_cb+0x3a8>)
   22a32:	0018      	movs	r0, r3
   22a34:	4b0a      	ldr	r3, [pc, #40]	; (22a60 <m2m_wifi_cb+0x3ac>)
   22a36:	4798      	blx	r3
   22a38:	1dfb      	adds	r3, r7, #7
   22a3a:	781a      	ldrb	r2, [r3, #0]
   22a3c:	4b09      	ldr	r3, [pc, #36]	; (22a64 <m2m_wifi_cb+0x3b0>)
   22a3e:	0011      	movs	r1, r2
   22a40:	0018      	movs	r0, r3
   22a42:	4b07      	ldr	r3, [pc, #28]	; (22a60 <m2m_wifi_cb+0x3ac>)
   22a44:	4798      	blx	r3
   22a46:	4b08      	ldr	r3, [pc, #32]	; (22a68 <m2m_wifi_cb+0x3b4>)
   22a48:	0018      	movs	r0, r3
   22a4a:	4b05      	ldr	r3, [pc, #20]	; (22a60 <m2m_wifi_cb+0x3ac>)
   22a4c:	4798      	blx	r3
}
   22a4e:	46c0      	nop			; (mov r8, r8)
   22a50:	46bd      	mov	sp, r7
   22a52:	b02d      	add	sp, #180	; 0xb4
   22a54:	bd90      	pop	{r4, r7, pc}
   22a56:	46c0      	nop			; (mov r8, r8)
   22a58:	00039858 	.word	0x00039858
   22a5c:	00039568 	.word	0x00039568
   22a60:	0001ebc9 	.word	0x0001ebc9
   22a64:	0003957c 	.word	0x0003957c
   22a68:	00039564 	.word	0x00039564

00022a6c <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
   22a6c:	b590      	push	{r4, r7, lr}
   22a6e:	b08f      	sub	sp, #60	; 0x3c
   22a70:	af00      	add	r7, sp, #0
   22a72:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
   22a74:	2337      	movs	r3, #55	; 0x37
   22a76:	18fb      	adds	r3, r7, r3
   22a78:	2200      	movs	r2, #0
   22a7a:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
   22a7c:	230b      	movs	r3, #11
   22a7e:	18fb      	adds	r3, r7, r3
   22a80:	2201      	movs	r2, #1
   22a82:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
   22a84:	687b      	ldr	r3, [r7, #4]
   22a86:	2b00      	cmp	r3, #0
   22a88:	d104      	bne.n	22a94 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
   22a8a:	2337      	movs	r3, #55	; 0x37
   22a8c:	18fb      	adds	r3, r7, r3
   22a8e:	22f4      	movs	r2, #244	; 0xf4
   22a90:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
   22a92:	e052      	b.n	22b3a <m2m_wifi_init+0xce>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
   22a94:	687b      	ldr	r3, [r7, #4]
   22a96:	681a      	ldr	r2, [r3, #0]
   22a98:	4b2c      	ldr	r3, [pc, #176]	; (22b4c <m2m_wifi_init+0xe0>)
   22a9a:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
   22a9c:	4b2c      	ldr	r3, [pc, #176]	; (22b50 <m2m_wifi_init+0xe4>)
   22a9e:	2200      	movs	r2, #0
   22aa0:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
   22aa2:	2337      	movs	r3, #55	; 0x37
   22aa4:	18fc      	adds	r4, r7, r3
   22aa6:	230b      	movs	r3, #11
   22aa8:	18fb      	adds	r3, r7, r3
   22aaa:	0018      	movs	r0, r3
   22aac:	4b29      	ldr	r3, [pc, #164]	; (22b54 <m2m_wifi_init+0xe8>)
   22aae:	4798      	blx	r3
   22ab0:	0003      	movs	r3, r0
   22ab2:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   22ab4:	2337      	movs	r3, #55	; 0x37
   22ab6:	18fb      	adds	r3, r7, r3
   22ab8:	781b      	ldrb	r3, [r3, #0]
   22aba:	b25b      	sxtb	r3, r3
   22abc:	2b00      	cmp	r3, #0
   22abe:	d139      	bne.n	22b34 <m2m_wifi_init+0xc8>
	/* Initialize host interface module */
	ret = hif_init(NULL);
   22ac0:	2337      	movs	r3, #55	; 0x37
   22ac2:	18fc      	adds	r4, r7, r3
   22ac4:	2000      	movs	r0, #0
   22ac6:	4b24      	ldr	r3, [pc, #144]	; (22b58 <m2m_wifi_init+0xec>)
   22ac8:	4798      	blx	r3
   22aca:	0003      	movs	r3, r0
   22acc:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   22ace:	2337      	movs	r3, #55	; 0x37
   22ad0:	18fb      	adds	r3, r7, r3
   22ad2:	781b      	ldrb	r3, [r3, #0]
   22ad4:	b25b      	sxtb	r3, r3
   22ad6:	2b00      	cmp	r3, #0
   22ad8:	d127      	bne.n	22b2a <m2m_wifi_init+0xbe>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
   22ada:	4b20      	ldr	r3, [pc, #128]	; (22b5c <m2m_wifi_init+0xf0>)
   22adc:	0019      	movs	r1, r3
   22ade:	2001      	movs	r0, #1
   22ae0:	4b1f      	ldr	r3, [pc, #124]	; (22b60 <m2m_wifi_init+0xf4>)
   22ae2:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
   22ae4:	2337      	movs	r3, #55	; 0x37
   22ae6:	18fc      	adds	r4, r7, r3
   22ae8:	230c      	movs	r3, #12
   22aea:	18fb      	adds	r3, r7, r3
   22aec:	0018      	movs	r0, r3
   22aee:	4b1d      	ldr	r3, [pc, #116]	; (22b64 <m2m_wifi_init+0xf8>)
   22af0:	4798      	blx	r3
   22af2:	0003      	movs	r3, r0
   22af4:	7023      	strb	r3, [r4, #0]
	//M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
	//M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
	//M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
	//M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
	//M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
	SerialConsoleWriteString("\r\n");
   22af6:	4b1c      	ldr	r3, [pc, #112]	; (22b68 <m2m_wifi_init+0xfc>)
   22af8:	0018      	movs	r0, r3
   22afa:	4b1c      	ldr	r3, [pc, #112]	; (22b6c <m2m_wifi_init+0x100>)
   22afc:	4798      	blx	r3
	
	if(M2M_ERR_FW_VER_MISMATCH == ret)
   22afe:	2337      	movs	r3, #55	; 0x37
   22b00:	18fb      	adds	r3, r7, r3
   22b02:	781b      	ldrb	r3, [r3, #0]
   22b04:	b25b      	sxtb	r3, r3
   22b06:	330d      	adds	r3, #13
   22b08:	d116      	bne.n	22b38 <m2m_wifi_init+0xcc>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
   22b0a:	23f5      	movs	r3, #245	; 0xf5
   22b0c:	005a      	lsls	r2, r3, #1
   22b0e:	4918      	ldr	r1, [pc, #96]	; (22b70 <m2m_wifi_init+0x104>)
   22b10:	4b18      	ldr	r3, [pc, #96]	; (22b74 <m2m_wifi_init+0x108>)
   22b12:	0018      	movs	r0, r3
   22b14:	4b18      	ldr	r3, [pc, #96]	; (22b78 <m2m_wifi_init+0x10c>)
   22b16:	4798      	blx	r3
   22b18:	4b18      	ldr	r3, [pc, #96]	; (22b7c <m2m_wifi_init+0x110>)
   22b1a:	0018      	movs	r0, r3
   22b1c:	4b16      	ldr	r3, [pc, #88]	; (22b78 <m2m_wifi_init+0x10c>)
   22b1e:	4798      	blx	r3
   22b20:	4b17      	ldr	r3, [pc, #92]	; (22b80 <m2m_wifi_init+0x114>)
   22b22:	0018      	movs	r0, r3
   22b24:	4b14      	ldr	r3, [pc, #80]	; (22b78 <m2m_wifi_init+0x10c>)
   22b26:	4798      	blx	r3
	}

	goto _EXIT0;
   22b28:	e006      	b.n	22b38 <m2m_wifi_init+0xcc>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   22b2a:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
   22b2c:	2000      	movs	r0, #0
   22b2e:	4b15      	ldr	r3, [pc, #84]	; (22b84 <m2m_wifi_init+0x118>)
   22b30:	4798      	blx	r3
   22b32:	e002      	b.n	22b3a <m2m_wifi_init+0xce>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   22b34:	46c0      	nop			; (mov r8, r8)
   22b36:	e000      	b.n	22b3a <m2m_wifi_init+0xce>
	goto _EXIT0;
   22b38:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
   22b3a:	2337      	movs	r3, #55	; 0x37
   22b3c:	18fb      	adds	r3, r7, r3
   22b3e:	781b      	ldrb	r3, [r3, #0]
   22b40:	b25b      	sxtb	r3, r3
}
   22b42:	0018      	movs	r0, r3
   22b44:	46bd      	mov	sp, r7
   22b46:	b00f      	add	sp, #60	; 0x3c
   22b48:	bd90      	pop	{r4, r7, pc}
   22b4a:	46c0      	nop			; (mov r8, r8)
   22b4c:	200042a8 	.word	0x200042a8
   22b50:	200042a5 	.word	0x200042a5
   22b54:	00023cb9 	.word	0x00023cb9
   22b58:	00021b15 	.word	0x00021b15
   22b5c:	000226b5 	.word	0x000226b5
   22b60:	000225f9 	.word	0x000225f9
   22b64:	00023aed 	.word	0x00023aed
   22b68:	000396dc 	.word	0x000396dc
   22b6c:	0001ea85 	.word	0x0001ea85
   22b70:	00039864 	.word	0x00039864
   22b74:	00039568 	.word	0x00039568
   22b78:	0001ebc9 	.word	0x0001ebc9
   22b7c:	000396e0 	.word	0x000396e0
   22b80:	00039564 	.word	0x00039564
   22b84:	00023e49 	.word	0x00023e49

00022b88 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
   22b88:	b580      	push	{r7, lr}
   22b8a:	b082      	sub	sp, #8
   22b8c:	af00      	add	r7, sp, #0
   22b8e:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
   22b90:	4b03      	ldr	r3, [pc, #12]	; (22ba0 <m2m_wifi_handle_events+0x18>)
   22b92:	4798      	blx	r3
   22b94:	0003      	movs	r3, r0
}
   22b96:	0018      	movs	r0, r3
   22b98:	46bd      	mov	sp, r7
   22b9a:	b002      	add	sp, #8
   22b9c:	bd80      	pop	{r7, pc}
   22b9e:	46c0      	nop			; (mov r8, r8)
   22ba0:	000223d9 	.word	0x000223d9

00022ba4 <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
   22ba4:	b590      	push	{r4, r7, lr}
   22ba6:	b087      	sub	sp, #28
   22ba8:	af02      	add	r7, sp, #8
   22baa:	60f8      	str	r0, [r7, #12]
   22bac:	0008      	movs	r0, r1
   22bae:	0011      	movs	r1, r2
   22bb0:	607b      	str	r3, [r7, #4]
   22bb2:	230b      	movs	r3, #11
   22bb4:	18fb      	adds	r3, r7, r3
   22bb6:	1c02      	adds	r2, r0, #0
   22bb8:	701a      	strb	r2, [r3, #0]
   22bba:	230a      	movs	r3, #10
   22bbc:	18fb      	adds	r3, r7, r3
   22bbe:	1c0a      	adds	r2, r1, #0
   22bc0:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
   22bc2:	687c      	ldr	r4, [r7, #4]
   22bc4:	230a      	movs	r3, #10
   22bc6:	18fb      	adds	r3, r7, r3
   22bc8:	781a      	ldrb	r2, [r3, #0]
   22bca:	230b      	movs	r3, #11
   22bcc:	18fb      	adds	r3, r7, r3
   22bce:	7819      	ldrb	r1, [r3, #0]
   22bd0:	68f8      	ldr	r0, [r7, #12]
   22bd2:	2300      	movs	r3, #0
   22bd4:	9301      	str	r3, [sp, #4]
   22bd6:	2320      	movs	r3, #32
   22bd8:	18fb      	adds	r3, r7, r3
   22bda:	881b      	ldrh	r3, [r3, #0]
   22bdc:	9300      	str	r3, [sp, #0]
   22bde:	0023      	movs	r3, r4
   22be0:	4c03      	ldr	r4, [pc, #12]	; (22bf0 <m2m_wifi_connect+0x4c>)
   22be2:	47a0      	blx	r4
   22be4:	0003      	movs	r3, r0
}
   22be6:	0018      	movs	r0, r3
   22be8:	46bd      	mov	sp, r7
   22bea:	b005      	add	sp, #20
   22bec:	bd90      	pop	{r4, r7, pc}
   22bee:	46c0      	nop			; (mov r8, r8)
   22bf0:	00022bf5 	.word	0x00022bf5

00022bf4 <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
   22bf4:	b5b0      	push	{r4, r5, r7, lr}
   22bf6:	b0aa      	sub	sp, #168	; 0xa8
   22bf8:	af04      	add	r7, sp, #16
   22bfa:	60f8      	str	r0, [r7, #12]
   22bfc:	0008      	movs	r0, r1
   22bfe:	0011      	movs	r1, r2
   22c00:	607b      	str	r3, [r7, #4]
   22c02:	230b      	movs	r3, #11
   22c04:	18fb      	adds	r3, r7, r3
   22c06:	1c02      	adds	r2, r0, #0
   22c08:	701a      	strb	r2, [r3, #0]
   22c0a:	230a      	movs	r3, #10
   22c0c:	18fb      	adds	r3, r7, r3
   22c0e:	1c0a      	adds	r2, r1, #0
   22c10:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
   22c12:	2397      	movs	r3, #151	; 0x97
   22c14:	18fb      	adds	r3, r7, r3
   22c16:	2200      	movs	r2, #0
   22c18:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
   22c1a:	230a      	movs	r3, #10
   22c1c:	18fb      	adds	r3, r7, r3
   22c1e:	781b      	ldrb	r3, [r3, #0]
   22c20:	2b01      	cmp	r3, #1
   22c22:	d100      	bne.n	22c26 <m2m_wifi_connect_sc+0x32>
   22c24:	e085      	b.n	22d32 <m2m_wifi_connect_sc+0x13e>
	{
		if(pvAuthInfo == NULL)
   22c26:	687b      	ldr	r3, [r7, #4]
   22c28:	2b00      	cmp	r3, #0
   22c2a:	d112      	bne.n	22c52 <m2m_wifi_connect_sc+0x5e>
		{
			M2M_ERR("Key is not valid\n");
   22c2c:	4ad7      	ldr	r2, [pc, #860]	; (22f8c <m2m_wifi_connect_sc+0x398>)
   22c2e:	49d8      	ldr	r1, [pc, #864]	; (22f90 <m2m_wifi_connect_sc+0x39c>)
   22c30:	4bd8      	ldr	r3, [pc, #864]	; (22f94 <m2m_wifi_connect_sc+0x3a0>)
   22c32:	0018      	movs	r0, r3
   22c34:	4bd8      	ldr	r3, [pc, #864]	; (22f98 <m2m_wifi_connect_sc+0x3a4>)
   22c36:	4798      	blx	r3
   22c38:	4bd8      	ldr	r3, [pc, #864]	; (22f9c <m2m_wifi_connect_sc+0x3a8>)
   22c3a:	0018      	movs	r0, r3
   22c3c:	4bd6      	ldr	r3, [pc, #856]	; (22f98 <m2m_wifi_connect_sc+0x3a4>)
   22c3e:	4798      	blx	r3
   22c40:	4bd7      	ldr	r3, [pc, #860]	; (22fa0 <m2m_wifi_connect_sc+0x3ac>)
   22c42:	0018      	movs	r0, r3
   22c44:	4bd4      	ldr	r3, [pc, #848]	; (22f98 <m2m_wifi_connect_sc+0x3a4>)
   22c46:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22c48:	2397      	movs	r3, #151	; 0x97
   22c4a:	18fb      	adds	r3, r7, r3
   22c4c:	22f4      	movs	r2, #244	; 0xf4
   22c4e:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22c50:	e1f9      	b.n	23046 <m2m_wifi_connect_sc+0x452>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   22c52:	230a      	movs	r3, #10
   22c54:	18fb      	adds	r3, r7, r3
   22c56:	781b      	ldrb	r3, [r3, #0]
   22c58:	2b02      	cmp	r3, #2
   22c5a:	d16a      	bne.n	22d32 <m2m_wifi_connect_sc+0x13e>
   22c5c:	687b      	ldr	r3, [r7, #4]
   22c5e:	0018      	movs	r0, r3
   22c60:	4bd0      	ldr	r3, [pc, #832]	; (22fa4 <m2m_wifi_connect_sc+0x3b0>)
   22c62:	4798      	blx	r3
   22c64:	0003      	movs	r3, r0
   22c66:	2b40      	cmp	r3, #64	; 0x40
   22c68:	d163      	bne.n	22d32 <m2m_wifi_connect_sc+0x13e>
		{
			uint8 i = 0;
   22c6a:	2396      	movs	r3, #150	; 0x96
   22c6c:	18fb      	adds	r3, r7, r3
   22c6e:	2200      	movs	r2, #0
   22c70:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
   22c72:	687b      	ldr	r3, [r7, #4]
   22c74:	2290      	movs	r2, #144	; 0x90
   22c76:	18ba      	adds	r2, r7, r2
   22c78:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   22c7a:	e055      	b.n	22d28 <m2m_wifi_connect_sc+0x134>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
   22c7c:	2396      	movs	r3, #150	; 0x96
   22c7e:	18fb      	adds	r3, r7, r3
   22c80:	781b      	ldrb	r3, [r3, #0]
   22c82:	2290      	movs	r2, #144	; 0x90
   22c84:	18ba      	adds	r2, r7, r2
   22c86:	6812      	ldr	r2, [r2, #0]
   22c88:	18d3      	adds	r3, r2, r3
   22c8a:	781b      	ldrb	r3, [r3, #0]
   22c8c:	2b2f      	cmp	r3, #47	; 0x2f
   22c8e:	d931      	bls.n	22cf4 <m2m_wifi_connect_sc+0x100>
   22c90:	2396      	movs	r3, #150	; 0x96
   22c92:	18fb      	adds	r3, r7, r3
   22c94:	781b      	ldrb	r3, [r3, #0]
   22c96:	2290      	movs	r2, #144	; 0x90
   22c98:	18ba      	adds	r2, r7, r2
   22c9a:	6812      	ldr	r2, [r2, #0]
   22c9c:	18d3      	adds	r3, r2, r3
   22c9e:	781b      	ldrb	r3, [r3, #0]
   22ca0:	2b39      	cmp	r3, #57	; 0x39
   22ca2:	d909      	bls.n	22cb8 <m2m_wifi_connect_sc+0xc4>
   22ca4:	2396      	movs	r3, #150	; 0x96
   22ca6:	18fb      	adds	r3, r7, r3
   22ca8:	781b      	ldrb	r3, [r3, #0]
   22caa:	2290      	movs	r2, #144	; 0x90
   22cac:	18ba      	adds	r2, r7, r2
   22cae:	6812      	ldr	r2, [r2, #0]
   22cb0:	18d3      	adds	r3, r2, r3
   22cb2:	781b      	ldrb	r3, [r3, #0]
   22cb4:	2b40      	cmp	r3, #64	; 0x40
   22cb6:	d91d      	bls.n	22cf4 <m2m_wifi_connect_sc+0x100>
   22cb8:	2396      	movs	r3, #150	; 0x96
   22cba:	18fb      	adds	r3, r7, r3
   22cbc:	781b      	ldrb	r3, [r3, #0]
   22cbe:	2290      	movs	r2, #144	; 0x90
   22cc0:	18ba      	adds	r2, r7, r2
   22cc2:	6812      	ldr	r2, [r2, #0]
   22cc4:	18d3      	adds	r3, r2, r3
   22cc6:	781b      	ldrb	r3, [r3, #0]
   22cc8:	2b46      	cmp	r3, #70	; 0x46
   22cca:	d909      	bls.n	22ce0 <m2m_wifi_connect_sc+0xec>
   22ccc:	2396      	movs	r3, #150	; 0x96
   22cce:	18fb      	adds	r3, r7, r3
   22cd0:	781b      	ldrb	r3, [r3, #0]
   22cd2:	2290      	movs	r2, #144	; 0x90
   22cd4:	18ba      	adds	r2, r7, r2
   22cd6:	6812      	ldr	r2, [r2, #0]
   22cd8:	18d3      	adds	r3, r2, r3
   22cda:	781b      	ldrb	r3, [r3, #0]
   22cdc:	2b60      	cmp	r3, #96	; 0x60
   22cde:	d909      	bls.n	22cf4 <m2m_wifi_connect_sc+0x100>
   22ce0:	2396      	movs	r3, #150	; 0x96
   22ce2:	18fb      	adds	r3, r7, r3
   22ce4:	781b      	ldrb	r3, [r3, #0]
   22ce6:	2290      	movs	r2, #144	; 0x90
   22ce8:	18ba      	adds	r2, r7, r2
   22cea:	6812      	ldr	r2, [r2, #0]
   22cec:	18d3      	adds	r3, r2, r3
   22cee:	781b      	ldrb	r3, [r3, #0]
   22cf0:	2b66      	cmp	r3, #102	; 0x66
   22cf2:	d912      	bls.n	22d1a <m2m_wifi_connect_sc+0x126>
				{
					M2M_ERR("Invalid Key\n");
   22cf4:	4aac      	ldr	r2, [pc, #688]	; (22fa8 <m2m_wifi_connect_sc+0x3b4>)
   22cf6:	49a6      	ldr	r1, [pc, #664]	; (22f90 <m2m_wifi_connect_sc+0x39c>)
   22cf8:	4ba6      	ldr	r3, [pc, #664]	; (22f94 <m2m_wifi_connect_sc+0x3a0>)
   22cfa:	0018      	movs	r0, r3
   22cfc:	4ba6      	ldr	r3, [pc, #664]	; (22f98 <m2m_wifi_connect_sc+0x3a4>)
   22cfe:	4798      	blx	r3
   22d00:	4baa      	ldr	r3, [pc, #680]	; (22fac <m2m_wifi_connect_sc+0x3b8>)
   22d02:	0018      	movs	r0, r3
   22d04:	4ba4      	ldr	r3, [pc, #656]	; (22f98 <m2m_wifi_connect_sc+0x3a4>)
   22d06:	4798      	blx	r3
   22d08:	4ba5      	ldr	r3, [pc, #660]	; (22fa0 <m2m_wifi_connect_sc+0x3ac>)
   22d0a:	0018      	movs	r0, r3
   22d0c:	4ba2      	ldr	r3, [pc, #648]	; (22f98 <m2m_wifi_connect_sc+0x3a4>)
   22d0e:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
   22d10:	2397      	movs	r3, #151	; 0x97
   22d12:	18fb      	adds	r3, r7, r3
   22d14:	22f4      	movs	r2, #244	; 0xf4
   22d16:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   22d18:	e195      	b.n	23046 <m2m_wifi_connect_sc+0x452>
				}
				i++;
   22d1a:	2396      	movs	r3, #150	; 0x96
   22d1c:	18fb      	adds	r3, r7, r3
   22d1e:	781a      	ldrb	r2, [r3, #0]
   22d20:	2396      	movs	r3, #150	; 0x96
   22d22:	18fb      	adds	r3, r7, r3
   22d24:	3201      	adds	r2, #1
   22d26:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   22d28:	2396      	movs	r3, #150	; 0x96
   22d2a:	18fb      	adds	r3, r7, r3
   22d2c:	781b      	ldrb	r3, [r3, #0]
   22d2e:	2b3f      	cmp	r3, #63	; 0x3f
   22d30:	d9a4      	bls.n	22c7c <m2m_wifi_connect_sc+0x88>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
   22d32:	230b      	movs	r3, #11
   22d34:	18fb      	adds	r3, r7, r3
   22d36:	781b      	ldrb	r3, [r3, #0]
   22d38:	2b00      	cmp	r3, #0
   22d3a:	d004      	beq.n	22d46 <m2m_wifi_connect_sc+0x152>
   22d3c:	230b      	movs	r3, #11
   22d3e:	18fb      	adds	r3, r7, r3
   22d40:	781b      	ldrb	r3, [r3, #0]
   22d42:	2b20      	cmp	r3, #32
   22d44:	d912      	bls.n	22d6c <m2m_wifi_connect_sc+0x178>
	{
		M2M_ERR("SSID LEN INVALID\n");
   22d46:	4a9a      	ldr	r2, [pc, #616]	; (22fb0 <m2m_wifi_connect_sc+0x3bc>)
   22d48:	4991      	ldr	r1, [pc, #580]	; (22f90 <m2m_wifi_connect_sc+0x39c>)
   22d4a:	4b92      	ldr	r3, [pc, #584]	; (22f94 <m2m_wifi_connect_sc+0x3a0>)
   22d4c:	0018      	movs	r0, r3
   22d4e:	4b92      	ldr	r3, [pc, #584]	; (22f98 <m2m_wifi_connect_sc+0x3a4>)
   22d50:	4798      	blx	r3
   22d52:	4b98      	ldr	r3, [pc, #608]	; (22fb4 <m2m_wifi_connect_sc+0x3c0>)
   22d54:	0018      	movs	r0, r3
   22d56:	4b90      	ldr	r3, [pc, #576]	; (22f98 <m2m_wifi_connect_sc+0x3a4>)
   22d58:	4798      	blx	r3
   22d5a:	4b91      	ldr	r3, [pc, #580]	; (22fa0 <m2m_wifi_connect_sc+0x3ac>)
   22d5c:	0018      	movs	r0, r3
   22d5e:	4b8e      	ldr	r3, [pc, #568]	; (22f98 <m2m_wifi_connect_sc+0x3a4>)
   22d60:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   22d62:	2397      	movs	r3, #151	; 0x97
   22d64:	18fb      	adds	r3, r7, r3
   22d66:	22f4      	movs	r2, #244	; 0xf4
   22d68:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   22d6a:	e16c      	b.n	23046 <m2m_wifi_connect_sc+0x452>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
   22d6c:	23a8      	movs	r3, #168	; 0xa8
   22d6e:	18fb      	adds	r3, r7, r3
   22d70:	881b      	ldrh	r3, [r3, #0]
   22d72:	2b00      	cmp	r3, #0
   22d74:	d004      	beq.n	22d80 <m2m_wifi_connect_sc+0x18c>
   22d76:	23a8      	movs	r3, #168	; 0xa8
   22d78:	18fb      	adds	r3, r7, r3
   22d7a:	881b      	ldrh	r3, [r3, #0]
   22d7c:	2b0e      	cmp	r3, #14
   22d7e:	d918      	bls.n	22db2 <m2m_wifi_connect_sc+0x1be>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
   22d80:	23a8      	movs	r3, #168	; 0xa8
   22d82:	18fb      	adds	r3, r7, r3
   22d84:	881b      	ldrh	r3, [r3, #0]
   22d86:	2bff      	cmp	r3, #255	; 0xff
   22d88:	d013      	beq.n	22db2 <m2m_wifi_connect_sc+0x1be>
		{
			M2M_ERR("CH INVALID\n");
   22d8a:	238f      	movs	r3, #143	; 0x8f
   22d8c:	009a      	lsls	r2, r3, #2
   22d8e:	4980      	ldr	r1, [pc, #512]	; (22f90 <m2m_wifi_connect_sc+0x39c>)
   22d90:	4b80      	ldr	r3, [pc, #512]	; (22f94 <m2m_wifi_connect_sc+0x3a0>)
   22d92:	0018      	movs	r0, r3
   22d94:	4b80      	ldr	r3, [pc, #512]	; (22f98 <m2m_wifi_connect_sc+0x3a4>)
   22d96:	4798      	blx	r3
   22d98:	4b87      	ldr	r3, [pc, #540]	; (22fb8 <m2m_wifi_connect_sc+0x3c4>)
   22d9a:	0018      	movs	r0, r3
   22d9c:	4b7e      	ldr	r3, [pc, #504]	; (22f98 <m2m_wifi_connect_sc+0x3a4>)
   22d9e:	4798      	blx	r3
   22da0:	4b7f      	ldr	r3, [pc, #508]	; (22fa0 <m2m_wifi_connect_sc+0x3ac>)
   22da2:	0018      	movs	r0, r3
   22da4:	4b7c      	ldr	r3, [pc, #496]	; (22f98 <m2m_wifi_connect_sc+0x3a4>)
   22da6:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22da8:	2397      	movs	r3, #151	; 0x97
   22daa:	18fb      	adds	r3, r7, r3
   22dac:	22f4      	movs	r2, #244	; 0xf4
   22dae:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22db0:	e149      	b.n	23046 <m2m_wifi_connect_sc+0x452>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
   22db2:	230b      	movs	r3, #11
   22db4:	18fb      	adds	r3, r7, r3
   22db6:	781a      	ldrb	r2, [r3, #0]
   22db8:	68f9      	ldr	r1, [r7, #12]
   22dba:	2314      	movs	r3, #20
   22dbc:	18fb      	adds	r3, r7, r3
   22dbe:	3346      	adds	r3, #70	; 0x46
   22dc0:	0018      	movs	r0, r3
   22dc2:	4b7e      	ldr	r3, [pc, #504]	; (22fbc <m2m_wifi_connect_sc+0x3c8>)
   22dc4:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
   22dc6:	230b      	movs	r3, #11
   22dc8:	18fb      	adds	r3, r7, r3
   22dca:	781b      	ldrb	r3, [r3, #0]
   22dcc:	2214      	movs	r2, #20
   22dce:	18ba      	adds	r2, r7, r2
   22dd0:	2146      	movs	r1, #70	; 0x46
   22dd2:	18d3      	adds	r3, r2, r3
   22dd4:	185b      	adds	r3, r3, r1
   22dd6:	2200      	movs	r2, #0
   22dd8:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
   22dda:	2314      	movs	r3, #20
   22ddc:	18fb      	adds	r3, r7, r3
   22dde:	22a8      	movs	r2, #168	; 0xa8
   22de0:	18ba      	adds	r2, r7, r2
   22de2:	2144      	movs	r1, #68	; 0x44
   22de4:	8812      	ldrh	r2, [r2, #0]
   22de6:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
   22de8:	23ac      	movs	r3, #172	; 0xac
   22dea:	18fb      	adds	r3, r7, r3
   22dec:	781b      	ldrb	r3, [r3, #0]
   22dee:	1e5a      	subs	r2, r3, #1
   22df0:	4193      	sbcs	r3, r2
   22df2:	b2db      	uxtb	r3, r3
   22df4:	0019      	movs	r1, r3
   22df6:	2314      	movs	r3, #20
   22df8:	18fb      	adds	r3, r7, r3
   22dfa:	2267      	movs	r2, #103	; 0x67
   22dfc:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
   22dfe:	2314      	movs	r3, #20
   22e00:	18fb      	adds	r3, r7, r3
   22e02:	228c      	movs	r2, #140	; 0x8c
   22e04:	18ba      	adds	r2, r7, r2
   22e06:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
   22e08:	238c      	movs	r3, #140	; 0x8c
   22e0a:	18fb      	adds	r3, r7, r3
   22e0c:	681b      	ldr	r3, [r3, #0]
   22e0e:	220a      	movs	r2, #10
   22e10:	18ba      	adds	r2, r7, r2
   22e12:	2141      	movs	r1, #65	; 0x41
   22e14:	7812      	ldrb	r2, [r2, #0]
   22e16:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
   22e18:	230a      	movs	r3, #10
   22e1a:	18fb      	adds	r3, r7, r3
   22e1c:	781b      	ldrb	r3, [r3, #0]
   22e1e:	2b03      	cmp	r3, #3
   22e20:	d000      	beq.n	22e24 <m2m_wifi_connect_sc+0x230>
   22e22:	e07c      	b.n	22f1e <m2m_wifi_connect_sc+0x32a>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
   22e24:	687b      	ldr	r3, [r7, #4]
   22e26:	2288      	movs	r2, #136	; 0x88
   22e28:	18ba      	adds	r2, r7, r2
   22e2a:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
   22e2c:	238c      	movs	r3, #140	; 0x8c
   22e2e:	18fb      	adds	r3, r7, r3
   22e30:	681b      	ldr	r3, [r3, #0]
   22e32:	2284      	movs	r2, #132	; 0x84
   22e34:	18ba      	adds	r2, r7, r2
   22e36:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
   22e38:	2388      	movs	r3, #136	; 0x88
   22e3a:	18fb      	adds	r3, r7, r3
   22e3c:	681b      	ldr	r3, [r3, #0]
   22e3e:	781b      	ldrb	r3, [r3, #0]
   22e40:	3b01      	subs	r3, #1
   22e42:	b2da      	uxtb	r2, r3
   22e44:	2384      	movs	r3, #132	; 0x84
   22e46:	18fb      	adds	r3, r7, r3
   22e48:	681b      	ldr	r3, [r3, #0]
   22e4a:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
   22e4c:	2384      	movs	r3, #132	; 0x84
   22e4e:	18fb      	adds	r3, r7, r3
   22e50:	681b      	ldr	r3, [r3, #0]
   22e52:	781b      	ldrb	r3, [r3, #0]
   22e54:	2b03      	cmp	r3, #3
   22e56:	d918      	bls.n	22e8a <m2m_wifi_connect_sc+0x296>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
   22e58:	4a59      	ldr	r2, [pc, #356]	; (22fc0 <m2m_wifi_connect_sc+0x3cc>)
   22e5a:	494d      	ldr	r1, [pc, #308]	; (22f90 <m2m_wifi_connect_sc+0x39c>)
   22e5c:	4b4d      	ldr	r3, [pc, #308]	; (22f94 <m2m_wifi_connect_sc+0x3a0>)
   22e5e:	0018      	movs	r0, r3
   22e60:	4b4d      	ldr	r3, [pc, #308]	; (22f98 <m2m_wifi_connect_sc+0x3a4>)
   22e62:	4798      	blx	r3
   22e64:	2384      	movs	r3, #132	; 0x84
   22e66:	18fb      	adds	r3, r7, r3
   22e68:	681b      	ldr	r3, [r3, #0]
   22e6a:	781b      	ldrb	r3, [r3, #0]
   22e6c:	001a      	movs	r2, r3
   22e6e:	4b55      	ldr	r3, [pc, #340]	; (22fc4 <m2m_wifi_connect_sc+0x3d0>)
   22e70:	0011      	movs	r1, r2
   22e72:	0018      	movs	r0, r3
   22e74:	4b48      	ldr	r3, [pc, #288]	; (22f98 <m2m_wifi_connect_sc+0x3a4>)
   22e76:	4798      	blx	r3
   22e78:	4b49      	ldr	r3, [pc, #292]	; (22fa0 <m2m_wifi_connect_sc+0x3ac>)
   22e7a:	0018      	movs	r0, r3
   22e7c:	4b46      	ldr	r3, [pc, #280]	; (22f98 <m2m_wifi_connect_sc+0x3a4>)
   22e7e:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22e80:	2397      	movs	r3, #151	; 0x97
   22e82:	18fb      	adds	r3, r7, r3
   22e84:	22f4      	movs	r2, #244	; 0xf4
   22e86:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22e88:	e0dd      	b.n	23046 <m2m_wifi_connect_sc+0x452>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
   22e8a:	2388      	movs	r3, #136	; 0x88
   22e8c:	18fb      	adds	r3, r7, r3
   22e8e:	681b      	ldr	r3, [r3, #0]
   22e90:	785b      	ldrb	r3, [r3, #1]
   22e92:	3b01      	subs	r3, #1
   22e94:	b2da      	uxtb	r2, r3
   22e96:	2384      	movs	r3, #132	; 0x84
   22e98:	18fb      	adds	r3, r7, r3
   22e9a:	681b      	ldr	r3, [r3, #0]
   22e9c:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
   22e9e:	2384      	movs	r3, #132	; 0x84
   22ea0:	18fb      	adds	r3, r7, r3
   22ea2:	681b      	ldr	r3, [r3, #0]
   22ea4:	785b      	ldrb	r3, [r3, #1]
   22ea6:	2b0a      	cmp	r3, #10
   22ea8:	d01e      	beq.n	22ee8 <m2m_wifi_connect_sc+0x2f4>
   22eaa:	2384      	movs	r3, #132	; 0x84
   22eac:	18fb      	adds	r3, r7, r3
   22eae:	681b      	ldr	r3, [r3, #0]
   22eb0:	785b      	ldrb	r3, [r3, #1]
   22eb2:	2b1a      	cmp	r3, #26
   22eb4:	d018      	beq.n	22ee8 <m2m_wifi_connect_sc+0x2f4>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
   22eb6:	4a44      	ldr	r2, [pc, #272]	; (22fc8 <m2m_wifi_connect_sc+0x3d4>)
   22eb8:	4935      	ldr	r1, [pc, #212]	; (22f90 <m2m_wifi_connect_sc+0x39c>)
   22eba:	4b36      	ldr	r3, [pc, #216]	; (22f94 <m2m_wifi_connect_sc+0x3a0>)
   22ebc:	0018      	movs	r0, r3
   22ebe:	4b36      	ldr	r3, [pc, #216]	; (22f98 <m2m_wifi_connect_sc+0x3a4>)
   22ec0:	4798      	blx	r3
   22ec2:	2384      	movs	r3, #132	; 0x84
   22ec4:	18fb      	adds	r3, r7, r3
   22ec6:	681b      	ldr	r3, [r3, #0]
   22ec8:	785b      	ldrb	r3, [r3, #1]
   22eca:	001a      	movs	r2, r3
   22ecc:	4b3f      	ldr	r3, [pc, #252]	; (22fcc <m2m_wifi_connect_sc+0x3d8>)
   22ece:	0011      	movs	r1, r2
   22ed0:	0018      	movs	r0, r3
   22ed2:	4b31      	ldr	r3, [pc, #196]	; (22f98 <m2m_wifi_connect_sc+0x3a4>)
   22ed4:	4798      	blx	r3
   22ed6:	4b32      	ldr	r3, [pc, #200]	; (22fa0 <m2m_wifi_connect_sc+0x3ac>)
   22ed8:	0018      	movs	r0, r3
   22eda:	4b2f      	ldr	r3, [pc, #188]	; (22f98 <m2m_wifi_connect_sc+0x3a4>)
   22edc:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22ede:	2397      	movs	r3, #151	; 0x97
   22ee0:	18fb      	adds	r3, r7, r3
   22ee2:	22f4      	movs	r2, #244	; 0xf4
   22ee4:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22ee6:	e0ae      	b.n	23046 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
   22ee8:	2384      	movs	r3, #132	; 0x84
   22eea:	18fb      	adds	r3, r7, r3
   22eec:	681b      	ldr	r3, [r3, #0]
   22eee:	1c98      	adds	r0, r3, #2
   22ef0:	2388      	movs	r3, #136	; 0x88
   22ef2:	18fb      	adds	r3, r7, r3
   22ef4:	681b      	ldr	r3, [r3, #0]
   22ef6:	1c99      	adds	r1, r3, #2
   22ef8:	2388      	movs	r3, #136	; 0x88
   22efa:	18fb      	adds	r3, r7, r3
   22efc:	681b      	ldr	r3, [r3, #0]
   22efe:	785b      	ldrb	r3, [r3, #1]
   22f00:	001a      	movs	r2, r3
   22f02:	4b2e      	ldr	r3, [pc, #184]	; (22fbc <m2m_wifi_connect_sc+0x3c8>)
   22f04:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
   22f06:	2388      	movs	r3, #136	; 0x88
   22f08:	18fb      	adds	r3, r7, r3
   22f0a:	681b      	ldr	r3, [r3, #0]
   22f0c:	785b      	ldrb	r3, [r3, #1]
   22f0e:	001a      	movs	r2, r3
   22f10:	2384      	movs	r3, #132	; 0x84
   22f12:	18fb      	adds	r3, r7, r3
   22f14:	681b      	ldr	r3, [r3, #0]
   22f16:	189b      	adds	r3, r3, r2
   22f18:	2200      	movs	r2, #0
   22f1a:	709a      	strb	r2, [r3, #2]
   22f1c:	e082      	b.n	23024 <m2m_wifi_connect_sc+0x430>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
   22f1e:	230a      	movs	r3, #10
   22f20:	18fb      	adds	r3, r7, r3
   22f22:	781b      	ldrb	r3, [r3, #0]
   22f24:	2b02      	cmp	r3, #2
   22f26:	d157      	bne.n	22fd8 <m2m_wifi_connect_sc+0x3e4>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
   22f28:	2382      	movs	r3, #130	; 0x82
   22f2a:	18fc      	adds	r4, r7, r3
   22f2c:	687b      	ldr	r3, [r7, #4]
   22f2e:	0018      	movs	r0, r3
   22f30:	4b1c      	ldr	r3, [pc, #112]	; (22fa4 <m2m_wifi_connect_sc+0x3b0>)
   22f32:	4798      	blx	r3
   22f34:	0003      	movs	r3, r0
   22f36:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
   22f38:	2382      	movs	r3, #130	; 0x82
   22f3a:	18fb      	adds	r3, r7, r3
   22f3c:	881b      	ldrh	r3, [r3, #0]
   22f3e:	2b00      	cmp	r3, #0
   22f40:	d004      	beq.n	22f4c <m2m_wifi_connect_sc+0x358>
   22f42:	2382      	movs	r3, #130	; 0x82
   22f44:	18fb      	adds	r3, r7, r3
   22f46:	881b      	ldrh	r3, [r3, #0]
   22f48:	2b40      	cmp	r3, #64	; 0x40
   22f4a:	d912      	bls.n	22f72 <m2m_wifi_connect_sc+0x37e>
		{
			M2M_ERR("Incorrect PSK key length\n");
   22f4c:	4a20      	ldr	r2, [pc, #128]	; (22fd0 <m2m_wifi_connect_sc+0x3dc>)
   22f4e:	4910      	ldr	r1, [pc, #64]	; (22f90 <m2m_wifi_connect_sc+0x39c>)
   22f50:	4b10      	ldr	r3, [pc, #64]	; (22f94 <m2m_wifi_connect_sc+0x3a0>)
   22f52:	0018      	movs	r0, r3
   22f54:	4b10      	ldr	r3, [pc, #64]	; (22f98 <m2m_wifi_connect_sc+0x3a4>)
   22f56:	4798      	blx	r3
   22f58:	4b1e      	ldr	r3, [pc, #120]	; (22fd4 <m2m_wifi_connect_sc+0x3e0>)
   22f5a:	0018      	movs	r0, r3
   22f5c:	4b0e      	ldr	r3, [pc, #56]	; (22f98 <m2m_wifi_connect_sc+0x3a4>)
   22f5e:	4798      	blx	r3
   22f60:	4b0f      	ldr	r3, [pc, #60]	; (22fa0 <m2m_wifi_connect_sc+0x3ac>)
   22f62:	0018      	movs	r0, r3
   22f64:	4b0c      	ldr	r3, [pc, #48]	; (22f98 <m2m_wifi_connect_sc+0x3a4>)
   22f66:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22f68:	2397      	movs	r3, #151	; 0x97
   22f6a:	18fb      	adds	r3, r7, r3
   22f6c:	22f4      	movs	r2, #244	; 0xf4
   22f6e:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22f70:	e069      	b.n	23046 <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
   22f72:	238c      	movs	r3, #140	; 0x8c
   22f74:	18fb      	adds	r3, r7, r3
   22f76:	6818      	ldr	r0, [r3, #0]
   22f78:	2382      	movs	r3, #130	; 0x82
   22f7a:	18fb      	adds	r3, r7, r3
   22f7c:	881b      	ldrh	r3, [r3, #0]
   22f7e:	3301      	adds	r3, #1
   22f80:	001a      	movs	r2, r3
   22f82:	687b      	ldr	r3, [r7, #4]
   22f84:	0019      	movs	r1, r3
   22f86:	4b0d      	ldr	r3, [pc, #52]	; (22fbc <m2m_wifi_connect_sc+0x3c8>)
   22f88:	4798      	blx	r3
   22f8a:	e04b      	b.n	23024 <m2m_wifi_connect_sc+0x430>
   22f8c:	0000021d 	.word	0x0000021d
   22f90:	00039874 	.word	0x00039874
   22f94:	00039568 	.word	0x00039568
   22f98:	0001ebc9 	.word	0x0001ebc9
   22f9c:	000396fc 	.word	0x000396fc
   22fa0:	00039564 	.word	0x00039564
   22fa4:	0002193b 	.word	0x0002193b
   22fa8:	00000229 	.word	0x00000229
   22fac:	00039710 	.word	0x00039710
   22fb0:	00000233 	.word	0x00000233
   22fb4:	00039720 	.word	0x00039720
   22fb8:	00039734 	.word	0x00039734
   22fbc:	000218c1 	.word	0x000218c1
   22fc0:	00000253 	.word	0x00000253
   22fc4:	00039740 	.word	0x00039740
   22fc8:	0000025a 	.word	0x0000025a
   22fcc:	0003975c 	.word	0x0003975c
   22fd0:	00000269 	.word	0x00000269
   22fd4:	00039778 	.word	0x00039778
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
   22fd8:	230a      	movs	r3, #10
   22fda:	18fb      	adds	r3, r7, r3
   22fdc:	781b      	ldrb	r3, [r3, #0]
   22fde:	2b04      	cmp	r3, #4
   22fe0:	d108      	bne.n	22ff4 <m2m_wifi_connect_sc+0x400>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
   22fe2:	238c      	movs	r3, #140	; 0x8c
   22fe4:	18fb      	adds	r3, r7, r3
   22fe6:	681b      	ldr	r3, [r3, #0]
   22fe8:	6879      	ldr	r1, [r7, #4]
   22fea:	223e      	movs	r2, #62	; 0x3e
   22fec:	0018      	movs	r0, r3
   22fee:	4b1a      	ldr	r3, [pc, #104]	; (23058 <m2m_wifi_connect_sc+0x464>)
   22ff0:	4798      	blx	r3
   22ff2:	e017      	b.n	23024 <m2m_wifi_connect_sc+0x430>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
   22ff4:	230a      	movs	r3, #10
   22ff6:	18fb      	adds	r3, r7, r3
   22ff8:	781b      	ldrb	r3, [r3, #0]
   22ffa:	2b01      	cmp	r3, #1
   22ffc:	d012      	beq.n	23024 <m2m_wifi_connect_sc+0x430>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
   22ffe:	4a17      	ldr	r2, [pc, #92]	; (2305c <m2m_wifi_connect_sc+0x468>)
   23000:	4917      	ldr	r1, [pc, #92]	; (23060 <m2m_wifi_connect_sc+0x46c>)
   23002:	4b18      	ldr	r3, [pc, #96]	; (23064 <m2m_wifi_connect_sc+0x470>)
   23004:	0018      	movs	r0, r3
   23006:	4b18      	ldr	r3, [pc, #96]	; (23068 <m2m_wifi_connect_sc+0x474>)
   23008:	4798      	blx	r3
   2300a:	4b18      	ldr	r3, [pc, #96]	; (2306c <m2m_wifi_connect_sc+0x478>)
   2300c:	0018      	movs	r0, r3
   2300e:	4b16      	ldr	r3, [pc, #88]	; (23068 <m2m_wifi_connect_sc+0x474>)
   23010:	4798      	blx	r3
   23012:	4b17      	ldr	r3, [pc, #92]	; (23070 <m2m_wifi_connect_sc+0x47c>)
   23014:	0018      	movs	r0, r3
   23016:	4b14      	ldr	r3, [pc, #80]	; (23068 <m2m_wifi_connect_sc+0x474>)
   23018:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   2301a:	2397      	movs	r3, #151	; 0x97
   2301c:	18fb      	adds	r3, r7, r3
   2301e:	22f4      	movs	r2, #244	; 0xf4
   23020:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   23022:	e010      	b.n	23046 <m2m_wifi_connect_sc+0x452>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
   23024:	2397      	movs	r3, #151	; 0x97
   23026:	18fc      	adds	r4, r7, r3
   23028:	2314      	movs	r3, #20
   2302a:	18fa      	adds	r2, r7, r3
   2302c:	2300      	movs	r3, #0
   2302e:	9302      	str	r3, [sp, #8]
   23030:	2300      	movs	r3, #0
   23032:	9301      	str	r3, [sp, #4]
   23034:	2300      	movs	r3, #0
   23036:	9300      	str	r3, [sp, #0]
   23038:	236c      	movs	r3, #108	; 0x6c
   2303a:	2128      	movs	r1, #40	; 0x28
   2303c:	2001      	movs	r0, #1
   2303e:	4d0d      	ldr	r5, [pc, #52]	; (23074 <m2m_wifi_connect_sc+0x480>)
   23040:	47a8      	blx	r5
   23042:	0003      	movs	r3, r0
   23044:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
   23046:	2397      	movs	r3, #151	; 0x97
   23048:	18fb      	adds	r3, r7, r3
   2304a:	781b      	ldrb	r3, [r3, #0]
   2304c:	b25b      	sxtb	r3, r3
}
   2304e:	0018      	movs	r0, r3
   23050:	46bd      	mov	sp, r7
   23052:	b026      	add	sp, #152	; 0x98
   23054:	bdb0      	pop	{r4, r5, r7, pc}
   23056:	46c0      	nop			; (mov r8, r8)
   23058:	000218c1 	.word	0x000218c1
   2305c:	00000279 	.word	0x00000279
   23060:	00039874 	.word	0x00039874
   23064:	00039568 	.word	0x00039568
   23068:	0001ebc9 	.word	0x0001ebc9
   2306c:	00039794 	.word	0x00039794
   23070:	00039564 	.word	0x00039564
   23074:	00021b5d 	.word	0x00021b5d

00023078 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
   23078:	b580      	push	{r7, lr}
   2307a:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
   2307c:	2300      	movs	r3, #0
}
   2307e:	0018      	movs	r0, r3
   23080:	46bd      	mov	sp, r7
   23082:	bd80      	pop	{r7, pc}

00023084 <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
   23084:	b590      	push	{r4, r7, lr}
   23086:	b087      	sub	sp, #28
   23088:	af00      	add	r7, sp, #0
   2308a:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   2308c:	2317      	movs	r3, #23
   2308e:	18fb      	adds	r3, r7, r3
   23090:	2200      	movs	r2, #0
   23092:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
   23094:	687b      	ldr	r3, [r7, #4]
   23096:	613b      	str	r3, [r7, #16]
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
   23098:	693b      	ldr	r3, [r7, #16]
   2309a:	2280      	movs	r2, #128	; 0x80
   2309c:	0052      	lsls	r2, r2, #1
   2309e:	4313      	orrs	r3, r2
   230a0:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
   230a2:	693a      	ldr	r2, [r7, #16]
   230a4:	23a5      	movs	r3, #165	; 0xa5
   230a6:	015b      	lsls	r3, r3, #5
   230a8:	0011      	movs	r1, r2
   230aa:	0018      	movs	r0, r3
   230ac:	4b12      	ldr	r3, [pc, #72]	; (230f8 <chip_apply_conf+0x74>)
   230ae:	4798      	blx	r3
		if(val32 != 0) {		
   230b0:	693b      	ldr	r3, [r7, #16]
   230b2:	2b00      	cmp	r3, #0
   230b4:	d018      	beq.n	230e8 <chip_apply_conf+0x64>
			uint32 reg = 0;
   230b6:	2300      	movs	r3, #0
   230b8:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   230ba:	2317      	movs	r3, #23
   230bc:	18fc      	adds	r4, r7, r3
   230be:	230c      	movs	r3, #12
   230c0:	18fa      	adds	r2, r7, r3
   230c2:	23a5      	movs	r3, #165	; 0xa5
   230c4:	015b      	lsls	r3, r3, #5
   230c6:	0011      	movs	r1, r2
   230c8:	0018      	movs	r0, r3
   230ca:	4b0c      	ldr	r3, [pc, #48]	; (230fc <chip_apply_conf+0x78>)
   230cc:	4798      	blx	r3
   230ce:	0003      	movs	r3, r0
   230d0:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   230d2:	2317      	movs	r3, #23
   230d4:	18fb      	adds	r3, r7, r3
   230d6:	781b      	ldrb	r3, [r3, #0]
   230d8:	b25b      	sxtb	r3, r3
   230da:	2b00      	cmp	r3, #0
   230dc:	d1e1      	bne.n	230a2 <chip_apply_conf+0x1e>
				if(reg == val32)
   230de:	68fa      	ldr	r2, [r7, #12]
   230e0:	693b      	ldr	r3, [r7, #16]
   230e2:	429a      	cmp	r2, r3
   230e4:	d002      	beq.n	230ec <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
   230e6:	e7dc      	b.n	230a2 <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
   230e8:	46c0      	nop			; (mov r8, r8)
   230ea:	e000      	b.n	230ee <chip_apply_conf+0x6a>
					break;
   230ec:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
   230ee:	2300      	movs	r3, #0
}
   230f0:	0018      	movs	r0, r3
   230f2:	46bd      	mov	sp, r7
   230f4:	b007      	add	sp, #28
   230f6:	bd90      	pop	{r4, r7, pc}
   230f8:	000238d9 	.word	0x000238d9
   230fc:	000238b5 	.word	0x000238b5

00023100 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
   23100:	b590      	push	{r4, r7, lr}
   23102:	b083      	sub	sp, #12
   23104:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   23106:	2300      	movs	r3, #0
   23108:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
   2310a:	1dfb      	adds	r3, r7, #7
   2310c:	2200      	movs	r2, #0
   2310e:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
   23110:	1dfc      	adds	r4, r7, #7
   23112:	003b      	movs	r3, r7
   23114:	4a24      	ldr	r2, [pc, #144]	; (231a8 <enable_interrupts+0xa8>)
   23116:	0019      	movs	r1, r3
   23118:	0010      	movs	r0, r2
   2311a:	4b24      	ldr	r3, [pc, #144]	; (231ac <enable_interrupts+0xac>)
   2311c:	4798      	blx	r3
   2311e:	0003      	movs	r3, r0
   23120:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   23122:	1dfb      	adds	r3, r7, #7
   23124:	781b      	ldrb	r3, [r3, #0]
   23126:	b25b      	sxtb	r3, r3
   23128:	2b00      	cmp	r3, #0
   2312a:	d131      	bne.n	23190 <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
   2312c:	683b      	ldr	r3, [r7, #0]
   2312e:	2280      	movs	r2, #128	; 0x80
   23130:	0052      	lsls	r2, r2, #1
   23132:	4313      	orrs	r3, r2
   23134:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
   23136:	683b      	ldr	r3, [r7, #0]
   23138:	1dfc      	adds	r4, r7, #7
   2313a:	4a1b      	ldr	r2, [pc, #108]	; (231a8 <enable_interrupts+0xa8>)
   2313c:	0019      	movs	r1, r3
   2313e:	0010      	movs	r0, r2
   23140:	4b1b      	ldr	r3, [pc, #108]	; (231b0 <enable_interrupts+0xb0>)
   23142:	4798      	blx	r3
   23144:	0003      	movs	r3, r0
   23146:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   23148:	1dfb      	adds	r3, r7, #7
   2314a:	781b      	ldrb	r3, [r3, #0]
   2314c:	b25b      	sxtb	r3, r3
   2314e:	2b00      	cmp	r3, #0
   23150:	d120      	bne.n	23194 <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
   23152:	1dfc      	adds	r4, r7, #7
   23154:	003a      	movs	r2, r7
   23156:	23d0      	movs	r3, #208	; 0xd0
   23158:	015b      	lsls	r3, r3, #5
   2315a:	0011      	movs	r1, r2
   2315c:	0018      	movs	r0, r3
   2315e:	4b13      	ldr	r3, [pc, #76]	; (231ac <enable_interrupts+0xac>)
   23160:	4798      	blx	r3
   23162:	0003      	movs	r3, r0
   23164:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   23166:	1dfb      	adds	r3, r7, #7
   23168:	781b      	ldrb	r3, [r3, #0]
   2316a:	b25b      	sxtb	r3, r3
   2316c:	2b00      	cmp	r3, #0
   2316e:	d113      	bne.n	23198 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
   23170:	683b      	ldr	r3, [r7, #0]
   23172:	2280      	movs	r2, #128	; 0x80
   23174:	0252      	lsls	r2, r2, #9
   23176:	4313      	orrs	r3, r2
   23178:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
   2317a:	683a      	ldr	r2, [r7, #0]
   2317c:	1dfc      	adds	r4, r7, #7
   2317e:	23d0      	movs	r3, #208	; 0xd0
   23180:	015b      	lsls	r3, r3, #5
   23182:	0011      	movs	r1, r2
   23184:	0018      	movs	r0, r3
   23186:	4b0a      	ldr	r3, [pc, #40]	; (231b0 <enable_interrupts+0xb0>)
   23188:	4798      	blx	r3
   2318a:	0003      	movs	r3, r0
   2318c:	7023      	strb	r3, [r4, #0]
   2318e:	e004      	b.n	2319a <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   23190:	46c0      	nop			; (mov r8, r8)
   23192:	e002      	b.n	2319a <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   23194:	46c0      	nop			; (mov r8, r8)
   23196:	e000      	b.n	2319a <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   23198:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
   2319a:	1dfb      	adds	r3, r7, #7
   2319c:	781b      	ldrb	r3, [r3, #0]
   2319e:	b25b      	sxtb	r3, r3
}
   231a0:	0018      	movs	r0, r3
   231a2:	46bd      	mov	sp, r7
   231a4:	b003      	add	sp, #12
   231a6:	bd90      	pop	{r4, r7, pc}
   231a8:	00001408 	.word	0x00001408
   231ac:	000238b5 	.word	0x000238b5
   231b0:	000238d9 	.word	0x000238d9

000231b4 <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
   231b4:	b580      	push	{r7, lr}
   231b6:	b082      	sub	sp, #8
   231b8:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
   231ba:	4b32      	ldr	r3, [pc, #200]	; (23284 <nmi_get_chipid+0xd0>)
   231bc:	681b      	ldr	r3, [r3, #0]
   231be:	2b00      	cmp	r3, #0
   231c0:	d159      	bne.n	23276 <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
   231c2:	4a30      	ldr	r2, [pc, #192]	; (23284 <nmi_get_chipid+0xd0>)
   231c4:	2380      	movs	r3, #128	; 0x80
   231c6:	015b      	lsls	r3, r3, #5
   231c8:	0011      	movs	r1, r2
   231ca:	0018      	movs	r0, r3
   231cc:	4b2e      	ldr	r3, [pc, #184]	; (23288 <nmi_get_chipid+0xd4>)
   231ce:	4798      	blx	r3
   231d0:	1e03      	subs	r3, r0, #0
   231d2:	d004      	beq.n	231de <nmi_get_chipid+0x2a>
			chipid = 0;
   231d4:	4b2b      	ldr	r3, [pc, #172]	; (23284 <nmi_get_chipid+0xd0>)
   231d6:	2200      	movs	r2, #0
   231d8:	601a      	str	r2, [r3, #0]
			return 0;
   231da:	2300      	movs	r3, #0
   231dc:	e04d      	b.n	2327a <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
   231de:	1d3b      	adds	r3, r7, #4
   231e0:	4a2a      	ldr	r2, [pc, #168]	; (2328c <nmi_get_chipid+0xd8>)
   231e2:	0019      	movs	r1, r3
   231e4:	0010      	movs	r0, r2
   231e6:	4b28      	ldr	r3, [pc, #160]	; (23288 <nmi_get_chipid+0xd4>)
   231e8:	4798      	blx	r3
   231ea:	1e03      	subs	r3, r0, #0
   231ec:	d004      	beq.n	231f8 <nmi_get_chipid+0x44>
			chipid = 0;
   231ee:	4b25      	ldr	r3, [pc, #148]	; (23284 <nmi_get_chipid+0xd0>)
   231f0:	2200      	movs	r2, #0
   231f2:	601a      	str	r2, [r3, #0]
			return 0;
   231f4:	2300      	movs	r3, #0
   231f6:	e040      	b.n	2327a <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
   231f8:	4b22      	ldr	r3, [pc, #136]	; (23284 <nmi_get_chipid+0xd0>)
   231fa:	681b      	ldr	r3, [r3, #0]
   231fc:	4a24      	ldr	r2, [pc, #144]	; (23290 <nmi_get_chipid+0xdc>)
   231fe:	4293      	cmp	r3, r2
   23200:	d106      	bne.n	23210 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
   23202:	687b      	ldr	r3, [r7, #4]
   23204:	2b01      	cmp	r3, #1
   23206:	d029      	beq.n	2325c <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
   23208:	4b1e      	ldr	r3, [pc, #120]	; (23284 <nmi_get_chipid+0xd0>)
   2320a:	4a22      	ldr	r2, [pc, #136]	; (23294 <nmi_get_chipid+0xe0>)
   2320c:	601a      	str	r2, [r3, #0]
   2320e:	e025      	b.n	2325c <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
   23210:	4b1c      	ldr	r3, [pc, #112]	; (23284 <nmi_get_chipid+0xd0>)
   23212:	681b      	ldr	r3, [r3, #0]
   23214:	4a20      	ldr	r2, [pc, #128]	; (23298 <nmi_get_chipid+0xe4>)
   23216:	4293      	cmp	r3, r2
   23218:	d10d      	bne.n	23236 <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
   2321a:	687b      	ldr	r3, [r7, #4]
   2321c:	2b03      	cmp	r3, #3
   2321e:	d01d      	beq.n	2325c <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
   23220:	687b      	ldr	r3, [r7, #4]
   23222:	2b04      	cmp	r3, #4
   23224:	d103      	bne.n	2322e <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
   23226:	4b17      	ldr	r3, [pc, #92]	; (23284 <nmi_get_chipid+0xd0>)
   23228:	4a1c      	ldr	r2, [pc, #112]	; (2329c <nmi_get_chipid+0xe8>)
   2322a:	601a      	str	r2, [r3, #0]
   2322c:	e016      	b.n	2325c <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
   2322e:	4b15      	ldr	r3, [pc, #84]	; (23284 <nmi_get_chipid+0xd0>)
   23230:	4a1b      	ldr	r2, [pc, #108]	; (232a0 <nmi_get_chipid+0xec>)
   23232:	601a      	str	r2, [r3, #0]
   23234:	e012      	b.n	2325c <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
   23236:	4b13      	ldr	r3, [pc, #76]	; (23284 <nmi_get_chipid+0xd0>)
   23238:	681b      	ldr	r3, [r3, #0]
   2323a:	4a1a      	ldr	r2, [pc, #104]	; (232a4 <nmi_get_chipid+0xf0>)
   2323c:	4293      	cmp	r3, r2
   2323e:	d10d      	bne.n	2325c <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
   23240:	4a10      	ldr	r2, [pc, #64]	; (23284 <nmi_get_chipid+0xd0>)
   23242:	23ec      	movs	r3, #236	; 0xec
   23244:	039b      	lsls	r3, r3, #14
   23246:	0011      	movs	r1, r2
   23248:	0018      	movs	r0, r3
   2324a:	4b0f      	ldr	r3, [pc, #60]	; (23288 <nmi_get_chipid+0xd4>)
   2324c:	4798      	blx	r3
   2324e:	1e03      	subs	r3, r0, #0
   23250:	d004      	beq.n	2325c <nmi_get_chipid+0xa8>
			chipid = 0;
   23252:	4b0c      	ldr	r3, [pc, #48]	; (23284 <nmi_get_chipid+0xd0>)
   23254:	2200      	movs	r2, #0
   23256:	601a      	str	r2, [r3, #0]
			return 0;
   23258:	2300      	movs	r3, #0
   2325a:	e00e      	b.n	2327a <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
   2325c:	4b09      	ldr	r3, [pc, #36]	; (23284 <nmi_get_chipid+0xd0>)
   2325e:	681b      	ldr	r3, [r3, #0]
   23260:	4a11      	ldr	r2, [pc, #68]	; (232a8 <nmi_get_chipid+0xf4>)
   23262:	401a      	ands	r2, r3
   23264:	4b07      	ldr	r3, [pc, #28]	; (23284 <nmi_get_chipid+0xd0>)
   23266:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
   23268:	4b06      	ldr	r3, [pc, #24]	; (23284 <nmi_get_chipid+0xd0>)
   2326a:	681b      	ldr	r3, [r3, #0]
   2326c:	22a0      	movs	r2, #160	; 0xa0
   2326e:	02d2      	lsls	r2, r2, #11
   23270:	431a      	orrs	r2, r3
   23272:	4b04      	ldr	r3, [pc, #16]	; (23284 <nmi_get_chipid+0xd0>)
   23274:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
   23276:	4b03      	ldr	r3, [pc, #12]	; (23284 <nmi_get_chipid+0xd0>)
   23278:	681b      	ldr	r3, [r3, #0]
}
   2327a:	0018      	movs	r0, r3
   2327c:	46bd      	mov	sp, r7
   2327e:	b002      	add	sp, #8
   23280:	bd80      	pop	{r7, pc}
   23282:	46c0      	nop			; (mov r8, r8)
   23284:	200042ac 	.word	0x200042ac
   23288:	000238b5 	.word	0x000238b5
   2328c:	000013f4 	.word	0x000013f4
   23290:	001002a0 	.word	0x001002a0
   23294:	001002a1 	.word	0x001002a1
   23298:	001002b0 	.word	0x001002b0
   2329c:	001002b1 	.word	0x001002b1
   232a0:	001002b2 	.word	0x001002b2
   232a4:	001000f0 	.word	0x001000f0
   232a8:	fff0ffff 	.word	0xfff0ffff

000232ac <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
   232ac:	b590      	push	{r4, r7, lr}
   232ae:	b083      	sub	sp, #12
   232b0:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   232b2:	1dfb      	adds	r3, r7, #7
   232b4:	2200      	movs	r2, #0
   232b6:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   232b8:	1dfc      	adds	r4, r7, #7
   232ba:	003b      	movs	r3, r7
   232bc:	0019      	movs	r1, r3
   232be:	2010      	movs	r0, #16
   232c0:	4b2e      	ldr	r3, [pc, #184]	; (2337c <chip_sleep+0xd0>)
   232c2:	4798      	blx	r3
   232c4:	0003      	movs	r3, r0
   232c6:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
   232c8:	1dfb      	adds	r3, r7, #7
   232ca:	781b      	ldrb	r3, [r3, #0]
   232cc:	b25b      	sxtb	r3, r3
   232ce:	2b00      	cmp	r3, #0
   232d0:	d145      	bne.n	2335e <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
   232d2:	683b      	ldr	r3, [r7, #0]
   232d4:	2201      	movs	r2, #1
   232d6:	4013      	ands	r3, r2
   232d8:	d000      	beq.n	232dc <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   232da:	e7ed      	b.n	232b8 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
   232dc:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   232de:	1dfc      	adds	r4, r7, #7
   232e0:	003b      	movs	r3, r7
   232e2:	0019      	movs	r1, r3
   232e4:	2001      	movs	r0, #1
   232e6:	4b25      	ldr	r3, [pc, #148]	; (2337c <chip_sleep+0xd0>)
   232e8:	4798      	blx	r3
   232ea:	0003      	movs	r3, r0
   232ec:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   232ee:	1dfb      	adds	r3, r7, #7
   232f0:	781b      	ldrb	r3, [r3, #0]
   232f2:	b25b      	sxtb	r3, r3
   232f4:	2b00      	cmp	r3, #0
   232f6:	d134      	bne.n	23362 <chip_sleep+0xb6>
	if(reg & NBIT1)
   232f8:	683b      	ldr	r3, [r7, #0]
   232fa:	2202      	movs	r2, #2
   232fc:	4013      	ands	r3, r2
   232fe:	d010      	beq.n	23322 <chip_sleep+0x76>
	{
		reg &=~NBIT1;
   23300:	683b      	ldr	r3, [r7, #0]
   23302:	2202      	movs	r2, #2
   23304:	4393      	bics	r3, r2
   23306:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
   23308:	683b      	ldr	r3, [r7, #0]
   2330a:	1dfc      	adds	r4, r7, #7
   2330c:	0019      	movs	r1, r3
   2330e:	2001      	movs	r0, #1
   23310:	4b1b      	ldr	r3, [pc, #108]	; (23380 <chip_sleep+0xd4>)
   23312:	4798      	blx	r3
   23314:	0003      	movs	r3, r0
   23316:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
   23318:	1dfb      	adds	r3, r7, #7
   2331a:	781b      	ldrb	r3, [r3, #0]
   2331c:	b25b      	sxtb	r3, r3
   2331e:	2b00      	cmp	r3, #0
   23320:	d121      	bne.n	23366 <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   23322:	1dfc      	adds	r4, r7, #7
   23324:	003b      	movs	r3, r7
   23326:	0019      	movs	r1, r3
   23328:	200b      	movs	r0, #11
   2332a:	4b14      	ldr	r3, [pc, #80]	; (2337c <chip_sleep+0xd0>)
   2332c:	4798      	blx	r3
   2332e:	0003      	movs	r3, r0
   23330:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   23332:	1dfb      	adds	r3, r7, #7
   23334:	781b      	ldrb	r3, [r3, #0]
   23336:	b25b      	sxtb	r3, r3
   23338:	2b00      	cmp	r3, #0
   2333a:	d116      	bne.n	2336a <chip_sleep+0xbe>
	if(reg & NBIT0)
   2333c:	683b      	ldr	r3, [r7, #0]
   2333e:	2201      	movs	r2, #1
   23340:	4013      	ands	r3, r2
   23342:	d013      	beq.n	2336c <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
   23344:	683b      	ldr	r3, [r7, #0]
   23346:	2201      	movs	r2, #1
   23348:	4393      	bics	r3, r2
   2334a:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
   2334c:	683b      	ldr	r3, [r7, #0]
   2334e:	1dfc      	adds	r4, r7, #7
   23350:	0019      	movs	r1, r3
   23352:	200b      	movs	r0, #11
   23354:	4b0a      	ldr	r3, [pc, #40]	; (23380 <chip_sleep+0xd4>)
   23356:	4798      	blx	r3
   23358:	0003      	movs	r3, r0
   2335a:	7023      	strb	r3, [r4, #0]
   2335c:	e006      	b.n	2336c <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
   2335e:	46c0      	nop			; (mov r8, r8)
   23360:	e004      	b.n	2336c <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   23362:	46c0      	nop			; (mov r8, r8)
   23364:	e002      	b.n	2336c <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
   23366:	46c0      	nop			; (mov r8, r8)
   23368:	e000      	b.n	2336c <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   2336a:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
   2336c:	1dfb      	adds	r3, r7, #7
   2336e:	781b      	ldrb	r3, [r3, #0]
   23370:	b25b      	sxtb	r3, r3
}
   23372:	0018      	movs	r0, r3
   23374:	46bd      	mov	sp, r7
   23376:	b003      	add	sp, #12
   23378:	bd90      	pop	{r4, r7, pc}
   2337a:	46c0      	nop			; (mov r8, r8)
   2337c:	000238b5 	.word	0x000238b5
   23380:	000238d9 	.word	0x000238d9

00023384 <chip_wake>:
sint8 chip_wake(void)
{
   23384:	b590      	push	{r4, r7, lr}
   23386:	b085      	sub	sp, #20
   23388:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   2338a:	230f      	movs	r3, #15
   2338c:	18fb      	adds	r3, r7, r3
   2338e:	2200      	movs	r2, #0
   23390:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
   23392:	2300      	movs	r3, #0
   23394:	607b      	str	r3, [r7, #4]
   23396:	2300      	movs	r3, #0
   23398:	603b      	str	r3, [r7, #0]
   2339a:	2300      	movs	r3, #0
   2339c:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   2339e:	230f      	movs	r3, #15
   233a0:	18fc      	adds	r4, r7, r3
   233a2:	1d3b      	adds	r3, r7, #4
   233a4:	0019      	movs	r1, r3
   233a6:	200b      	movs	r0, #11
   233a8:	4b4e      	ldr	r3, [pc, #312]	; (234e4 <chip_wake+0x160>)
   233aa:	4798      	blx	r3
   233ac:	0003      	movs	r3, r0
   233ae:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   233b0:	230f      	movs	r3, #15
   233b2:	18fb      	adds	r3, r7, r3
   233b4:	781b      	ldrb	r3, [r3, #0]
   233b6:	b25b      	sxtb	r3, r3
   233b8:	2b00      	cmp	r3, #0
   233ba:	d000      	beq.n	233be <chip_wake+0x3a>
   233bc:	e082      	b.n	234c4 <chip_wake+0x140>
	
	if(!(reg & NBIT0))
   233be:	687b      	ldr	r3, [r7, #4]
   233c0:	2201      	movs	r2, #1
   233c2:	4013      	ands	r3, r2
   233c4:	d111      	bne.n	233ea <chip_wake+0x66>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
   233c6:	687b      	ldr	r3, [r7, #4]
   233c8:	2201      	movs	r2, #1
   233ca:	4313      	orrs	r3, r2
   233cc:	220f      	movs	r2, #15
   233ce:	18bc      	adds	r4, r7, r2
   233d0:	0019      	movs	r1, r3
   233d2:	200b      	movs	r0, #11
   233d4:	4b44      	ldr	r3, [pc, #272]	; (234e8 <chip_wake+0x164>)
   233d6:	4798      	blx	r3
   233d8:	0003      	movs	r3, r0
   233da:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   233dc:	230f      	movs	r3, #15
   233de:	18fb      	adds	r3, r7, r3
   233e0:	781b      	ldrb	r3, [r3, #0]
   233e2:	b25b      	sxtb	r3, r3
   233e4:	2b00      	cmp	r3, #0
   233e6:	d000      	beq.n	233ea <chip_wake+0x66>
   233e8:	e06e      	b.n	234c8 <chip_wake+0x144>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   233ea:	230f      	movs	r3, #15
   233ec:	18fc      	adds	r4, r7, r3
   233ee:	1d3b      	adds	r3, r7, #4
   233f0:	0019      	movs	r1, r3
   233f2:	2001      	movs	r0, #1
   233f4:	4b3b      	ldr	r3, [pc, #236]	; (234e4 <chip_wake+0x160>)
   233f6:	4798      	blx	r3
   233f8:	0003      	movs	r3, r0
   233fa:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   233fc:	230f      	movs	r3, #15
   233fe:	18fb      	adds	r3, r7, r3
   23400:	781b      	ldrb	r3, [r3, #0]
   23402:	b25b      	sxtb	r3, r3
   23404:	2b00      	cmp	r3, #0
   23406:	d161      	bne.n	234cc <chip_wake+0x148>
	/* Set bit 1 */
	if(!(reg & NBIT1))
   23408:	687b      	ldr	r3, [r7, #4]
   2340a:	2202      	movs	r2, #2
   2340c:	4013      	ands	r3, r2
   2340e:	d110      	bne.n	23432 <chip_wake+0xae>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
   23410:	687b      	ldr	r3, [r7, #4]
   23412:	2202      	movs	r2, #2
   23414:	4313      	orrs	r3, r2
   23416:	220f      	movs	r2, #15
   23418:	18bc      	adds	r4, r7, r2
   2341a:	0019      	movs	r1, r3
   2341c:	2001      	movs	r0, #1
   2341e:	4b32      	ldr	r3, [pc, #200]	; (234e8 <chip_wake+0x164>)
   23420:	4798      	blx	r3
   23422:	0003      	movs	r3, r0
   23424:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   23426:	230f      	movs	r3, #15
   23428:	18fb      	adds	r3, r7, r3
   2342a:	781b      	ldrb	r3, [r3, #0]
   2342c:	b25b      	sxtb	r3, r3
   2342e:	2b00      	cmp	r3, #0
   23430:	d14e      	bne.n	234d0 <chip_wake+0x14c>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   23432:	230f      	movs	r3, #15
   23434:	18fc      	adds	r4, r7, r3
   23436:	003b      	movs	r3, r7
   23438:	0019      	movs	r1, r3
   2343a:	200f      	movs	r0, #15
   2343c:	4b29      	ldr	r3, [pc, #164]	; (234e4 <chip_wake+0x160>)
   2343e:	4798      	blx	r3
   23440:	0003      	movs	r3, r0
   23442:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
   23444:	230f      	movs	r3, #15
   23446:	18fb      	adds	r3, r7, r3
   23448:	781b      	ldrb	r3, [r3, #0]
   2344a:	b25b      	sxtb	r3, r3
   2344c:	2b00      	cmp	r3, #0
   2344e:	d014      	beq.n	2347a <chip_wake+0xf6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
   23450:	23a8      	movs	r3, #168	; 0xa8
   23452:	005a      	lsls	r2, r3, #1
   23454:	4925      	ldr	r1, [pc, #148]	; (234ec <chip_wake+0x168>)
   23456:	4b26      	ldr	r3, [pc, #152]	; (234f0 <chip_wake+0x16c>)
   23458:	0018      	movs	r0, r3
   2345a:	4b26      	ldr	r3, [pc, #152]	; (234f4 <chip_wake+0x170>)
   2345c:	4798      	blx	r3
   2345e:	230f      	movs	r3, #15
   23460:	18fb      	adds	r3, r7, r3
   23462:	2100      	movs	r1, #0
   23464:	5659      	ldrsb	r1, [r3, r1]
   23466:	683a      	ldr	r2, [r7, #0]
   23468:	4b23      	ldr	r3, [pc, #140]	; (234f8 <chip_wake+0x174>)
   2346a:	0018      	movs	r0, r3
   2346c:	4b21      	ldr	r3, [pc, #132]	; (234f4 <chip_wake+0x170>)
   2346e:	4798      	blx	r3
   23470:	4b22      	ldr	r3, [pc, #136]	; (234fc <chip_wake+0x178>)
   23472:	0018      	movs	r0, r3
   23474:	4b1f      	ldr	r3, [pc, #124]	; (234f4 <chip_wake+0x170>)
   23476:	4798      	blx	r3
			goto _WAKE_EXIT;
   23478:	e02b      	b.n	234d2 <chip_wake+0x14e>
		}
		if(clk_status_reg & NBIT2) {
   2347a:	683b      	ldr	r3, [r7, #0]
   2347c:	2204      	movs	r2, #4
   2347e:	4013      	ands	r3, r2
   23480:	d11c      	bne.n	234bc <chip_wake+0x138>
			break;
		}
		nm_bsp_sleep(2);
   23482:	2002      	movs	r0, #2
   23484:	4b1e      	ldr	r3, [pc, #120]	; (23500 <chip_wake+0x17c>)
   23486:	4798      	blx	r3
		trials++;
   23488:	68bb      	ldr	r3, [r7, #8]
   2348a:	3301      	adds	r3, #1
   2348c:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
   2348e:	68bb      	ldr	r3, [r7, #8]
   23490:	2b04      	cmp	r3, #4
   23492:	d9ce      	bls.n	23432 <chip_wake+0xae>
		{
			M2M_ERR("Failed to wakup the chip\n");
   23494:	23ad      	movs	r3, #173	; 0xad
   23496:	005a      	lsls	r2, r3, #1
   23498:	4914      	ldr	r1, [pc, #80]	; (234ec <chip_wake+0x168>)
   2349a:	4b15      	ldr	r3, [pc, #84]	; (234f0 <chip_wake+0x16c>)
   2349c:	0018      	movs	r0, r3
   2349e:	4b15      	ldr	r3, [pc, #84]	; (234f4 <chip_wake+0x170>)
   234a0:	4798      	blx	r3
   234a2:	4b18      	ldr	r3, [pc, #96]	; (23504 <chip_wake+0x180>)
   234a4:	0018      	movs	r0, r3
   234a6:	4b13      	ldr	r3, [pc, #76]	; (234f4 <chip_wake+0x170>)
   234a8:	4798      	blx	r3
   234aa:	4b14      	ldr	r3, [pc, #80]	; (234fc <chip_wake+0x178>)
   234ac:	0018      	movs	r0, r3
   234ae:	4b11      	ldr	r3, [pc, #68]	; (234f4 <chip_wake+0x170>)
   234b0:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
   234b2:	230f      	movs	r3, #15
   234b4:	18fb      	adds	r3, r7, r3
   234b6:	22fc      	movs	r2, #252	; 0xfc
   234b8:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
   234ba:	e00a      	b.n	234d2 <chip_wake+0x14e>
			break;
   234bc:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
   234be:	4b12      	ldr	r3, [pc, #72]	; (23508 <chip_wake+0x184>)
   234c0:	4798      	blx	r3
   234c2:	e006      	b.n	234d2 <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   234c4:	46c0      	nop			; (mov r8, r8)
   234c6:	e004      	b.n	234d2 <chip_wake+0x14e>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   234c8:	46c0      	nop			; (mov r8, r8)
   234ca:	e002      	b.n	234d2 <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   234cc:	46c0      	nop			; (mov r8, r8)
   234ce:	e000      	b.n	234d2 <chip_wake+0x14e>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   234d0:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
   234d2:	230f      	movs	r3, #15
   234d4:	18fb      	adds	r3, r7, r3
   234d6:	781b      	ldrb	r3, [r3, #0]
   234d8:	b25b      	sxtb	r3, r3
}
   234da:	0018      	movs	r0, r3
   234dc:	46bd      	mov	sp, r7
   234de:	b005      	add	sp, #20
   234e0:	bd90      	pop	{r4, r7, pc}
   234e2:	46c0      	nop			; (mov r8, r8)
   234e4:	000238b5 	.word	0x000238b5
   234e8:	000238d9 	.word	0x000238d9
   234ec:	00039914 	.word	0x00039914
   234f0:	00039888 	.word	0x00039888
   234f4:	0001ebc9 	.word	0x0001ebc9
   234f8:	0003989c 	.word	0x0003989c
   234fc:	000398b4 	.word	0x000398b4
   23500:	0002101d 	.word	0x0002101d
   23504:	000398b8 	.word	0x000398b8
   23508:	00023875 	.word	0x00023875

0002350c <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
   2350c:	b580      	push	{r7, lr}
   2350e:	b088      	sub	sp, #32
   23510:	af00      	add	r7, sp, #0
   23512:	0002      	movs	r2, r0
   23514:	1dfb      	adds	r3, r7, #7
   23516:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   23518:	2313      	movs	r3, #19
   2351a:	18fb      	adds	r3, r7, r3
   2351c:	2200      	movs	r2, #0
   2351e:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   23520:	2300      	movs	r3, #0
   23522:	61fb      	str	r3, [r7, #28]
   23524:	2300      	movs	r3, #0
   23526:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
   23528:	2300      	movs	r3, #0
   2352a:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
   2352c:	4b4a      	ldr	r3, [pc, #296]	; (23658 <wait_for_bootrom+0x14c>)
   2352e:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_MIN_REQ_DRV_VERSION_MAJOR_NO, M2M_MIN_REQ_DRV_VERSION_MINOR_NO,\
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
   23530:	2300      	movs	r3, #0
   23532:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   23534:	4b49      	ldr	r3, [pc, #292]	; (2365c <wait_for_bootrom+0x150>)
   23536:	0018      	movs	r0, r3
   23538:	4b49      	ldr	r3, [pc, #292]	; (23660 <wait_for_bootrom+0x154>)
   2353a:	4798      	blx	r3
   2353c:	0003      	movs	r3, r0
   2353e:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
   23540:	69fb      	ldr	r3, [r7, #28]
   23542:	2b00      	cmp	r3, #0
   23544:	db03      	blt.n	2354e <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   23546:	2001      	movs	r0, #1
   23548:	4b46      	ldr	r3, [pc, #280]	; (23664 <wait_for_bootrom+0x158>)
   2354a:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   2354c:	e7f2      	b.n	23534 <wait_for_bootrom+0x28>
			break;
   2354e:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
   23550:	4b45      	ldr	r3, [pc, #276]	; (23668 <wait_for_bootrom+0x15c>)
   23552:	0018      	movs	r0, r3
   23554:	4b42      	ldr	r3, [pc, #264]	; (23660 <wait_for_bootrom+0x154>)
   23556:	4798      	blx	r3
   23558:	0003      	movs	r3, r0
   2355a:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
   2355c:	69fb      	ldr	r3, [r7, #28]
   2355e:	2201      	movs	r2, #1
   23560:	4013      	ands	r3, r2
   23562:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
   23564:	69fb      	ldr	r3, [r7, #28]
   23566:	2b00      	cmp	r3, #0
   23568:	d112      	bne.n	23590 <wait_for_bootrom+0x84>
	{
		reg = 0;
   2356a:	2300      	movs	r3, #0
   2356c:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
   2356e:	e00b      	b.n	23588 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
   23570:	2001      	movs	r0, #1
   23572:	4b3c      	ldr	r3, [pc, #240]	; (23664 <wait_for_bootrom+0x158>)
   23574:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
   23576:	4b3d      	ldr	r3, [pc, #244]	; (2366c <wait_for_bootrom+0x160>)
   23578:	0018      	movs	r0, r3
   2357a:	4b39      	ldr	r3, [pc, #228]	; (23660 <wait_for_bootrom+0x154>)
   2357c:	4798      	blx	r3
   2357e:	0003      	movs	r3, r0
   23580:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
   23582:	69bb      	ldr	r3, [r7, #24]
   23584:	3301      	adds	r3, #1
   23586:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
   23588:	69fb      	ldr	r3, [r7, #28]
   2358a:	4a39      	ldr	r2, [pc, #228]	; (23670 <wait_for_bootrom+0x164>)
   2358c:	4293      	cmp	r3, r2
   2358e:	d1ef      	bne.n	23570 <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
   23590:	1dfb      	adds	r3, r7, #7
   23592:	781b      	ldrb	r3, [r3, #0]
   23594:	2b02      	cmp	r3, #2
   23596:	d10d      	bne.n	235b4 <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   23598:	4a36      	ldr	r2, [pc, #216]	; (23674 <wait_for_bootrom+0x168>)
   2359a:	4b37      	ldr	r3, [pc, #220]	; (23678 <wait_for_bootrom+0x16c>)
   2359c:	0011      	movs	r1, r2
   2359e:	0018      	movs	r0, r3
   235a0:	4b36      	ldr	r3, [pc, #216]	; (2367c <wait_for_bootrom+0x170>)
   235a2:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
   235a4:	2380      	movs	r3, #128	; 0x80
   235a6:	035b      	lsls	r3, r3, #13
   235a8:	4a35      	ldr	r2, [pc, #212]	; (23680 <wait_for_bootrom+0x174>)
   235aa:	0019      	movs	r1, r3
   235ac:	0010      	movs	r0, r2
   235ae:	4b33      	ldr	r3, [pc, #204]	; (2367c <wait_for_bootrom+0x170>)
   235b0:	4798      	blx	r3
   235b2:	e022      	b.n	235fa <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
   235b4:	1dfb      	adds	r3, r7, #7
   235b6:	781b      	ldrb	r3, [r3, #0]
   235b8:	2b03      	cmp	r3, #3
   235ba:	d10b      	bne.n	235d4 <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   235bc:	4a2d      	ldr	r2, [pc, #180]	; (23674 <wait_for_bootrom+0x168>)
   235be:	4b2e      	ldr	r3, [pc, #184]	; (23678 <wait_for_bootrom+0x16c>)
   235c0:	0011      	movs	r1, r2
   235c2:	0018      	movs	r0, r3
   235c4:	4b2d      	ldr	r3, [pc, #180]	; (2367c <wait_for_bootrom+0x170>)
   235c6:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
   235c8:	4b2d      	ldr	r3, [pc, #180]	; (23680 <wait_for_bootrom+0x174>)
   235ca:	2100      	movs	r1, #0
   235cc:	0018      	movs	r0, r3
   235ce:	4b2b      	ldr	r3, [pc, #172]	; (2367c <wait_for_bootrom+0x170>)
   235d0:	4798      	blx	r3
   235d2:	e012      	b.n	235fa <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
   235d4:	1dfb      	adds	r3, r7, #7
   235d6:	781b      	ldrb	r3, [r3, #0]
   235d8:	2b04      	cmp	r3, #4
   235da:	d108      	bne.n	235ee <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
   235dc:	2380      	movs	r3, #128	; 0x80
   235de:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   235e0:	68fb      	ldr	r3, [r7, #12]
   235e2:	4a27      	ldr	r2, [pc, #156]	; (23680 <wait_for_bootrom+0x174>)
   235e4:	0019      	movs	r1, r3
   235e6:	0010      	movs	r0, r2
   235e8:	4b24      	ldr	r3, [pc, #144]	; (2367c <wait_for_bootrom+0x170>)
   235ea:	4798      	blx	r3
   235ec:	e005      	b.n	235fa <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   235ee:	68fb      	ldr	r3, [r7, #12]
   235f0:	4a23      	ldr	r2, [pc, #140]	; (23680 <wait_for_bootrom+0x174>)
   235f2:	0019      	movs	r1, r3
   235f4:	0010      	movs	r0, r2
   235f6:	4b21      	ldr	r3, [pc, #132]	; (2367c <wait_for_bootrom+0x170>)
   235f8:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
   235fa:	4b22      	ldr	r3, [pc, #136]	; (23684 <wait_for_bootrom+0x178>)
   235fc:	4798      	blx	r3
   235fe:	0003      	movs	r3, r0
   23600:	051b      	lsls	r3, r3, #20
   23602:	0d1b      	lsrs	r3, r3, #20
   23604:	4a20      	ldr	r2, [pc, #128]	; (23688 <wait_for_bootrom+0x17c>)
   23606:	4293      	cmp	r3, r2
   23608:	d906      	bls.n	23618 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
   2360a:	697b      	ldr	r3, [r7, #20]
   2360c:	2202      	movs	r2, #2
   2360e:	4313      	orrs	r3, r2
   23610:	0018      	movs	r0, r3
   23612:	4b1e      	ldr	r3, [pc, #120]	; (2368c <wait_for_bootrom+0x180>)
   23614:	4798      	blx	r3
   23616:	e003      	b.n	23620 <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
   23618:	697b      	ldr	r3, [r7, #20]
   2361a:	0018      	movs	r0, r3
   2361c:	4b1b      	ldr	r3, [pc, #108]	; (2368c <wait_for_bootrom+0x180>)
   2361e:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
   23620:	4b1b      	ldr	r3, [pc, #108]	; (23690 <wait_for_bootrom+0x184>)
   23622:	0018      	movs	r0, r3
   23624:	4b1b      	ldr	r3, [pc, #108]	; (23694 <wait_for_bootrom+0x188>)
   23626:	4798      	blx	r3
   23628:	68fa      	ldr	r2, [r7, #12]
   2362a:	4b1b      	ldr	r3, [pc, #108]	; (23698 <wait_for_bootrom+0x18c>)
   2362c:	0011      	movs	r1, r2
   2362e:	0018      	movs	r0, r3
   23630:	4b18      	ldr	r3, [pc, #96]	; (23694 <wait_for_bootrom+0x188>)
   23632:	4798      	blx	r3
   23634:	4b19      	ldr	r3, [pc, #100]	; (2369c <wait_for_bootrom+0x190>)
   23636:	0018      	movs	r0, r3
   23638:	4b16      	ldr	r3, [pc, #88]	; (23694 <wait_for_bootrom+0x188>)
   2363a:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
   2363c:	4a18      	ldr	r2, [pc, #96]	; (236a0 <wait_for_bootrom+0x194>)
   2363e:	4b0b      	ldr	r3, [pc, #44]	; (2366c <wait_for_bootrom+0x160>)
   23640:	0011      	movs	r1, r2
   23642:	0018      	movs	r0, r3
   23644:	4b0d      	ldr	r3, [pc, #52]	; (2367c <wait_for_bootrom+0x170>)
   23646:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
   23648:	2313      	movs	r3, #19
   2364a:	18fb      	adds	r3, r7, r3
   2364c:	781b      	ldrb	r3, [r3, #0]
   2364e:	b25b      	sxtb	r3, r3
}
   23650:	0018      	movs	r0, r3
   23652:	46bd      	mov	sp, r7
   23654:	b008      	add	sp, #32
   23656:	bd80      	pop	{r7, pc}
   23658:	13301354 	.word	0x13301354
   2365c:	00001014 	.word	0x00001014
   23660:	00023895 	.word	0x00023895
   23664:	0002101d 	.word	0x0002101d
   23668:	000207bc 	.word	0x000207bc
   2366c:	000c000c 	.word	0x000c000c
   23670:	10add09e 	.word	0x10add09e
   23674:	3c1cd57d 	.word	0x3c1cd57d
   23678:	000207ac 	.word	0x000207ac
   2367c:	000238d9 	.word	0x000238d9
   23680:	0000108c 	.word	0x0000108c
   23684:	000231b5 	.word	0x000231b5
   23688:	0000039f 	.word	0x0000039f
   2368c:	00023085 	.word	0x00023085
   23690:	000398d4 	.word	0x000398d4
   23694:	0001ebc9 	.word	0x0001ebc9
   23698:	000398e0 	.word	0x000398e0
   2369c:	000398b4 	.word	0x000398b4
   236a0:	ef522f61 	.word	0xef522f61

000236a4 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
   236a4:	b580      	push	{r7, lr}
   236a6:	b088      	sub	sp, #32
   236a8:	af00      	add	r7, sp, #0
   236aa:	0002      	movs	r2, r0
   236ac:	1dfb      	adds	r3, r7, #7
   236ae:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   236b0:	231f      	movs	r3, #31
   236b2:	18fb      	adds	r3, r7, r3
   236b4:	2200      	movs	r2, #0
   236b6:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   236b8:	2300      	movs	r3, #0
   236ba:	61bb      	str	r3, [r7, #24]
   236bc:	2300      	movs	r3, #0
   236be:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
   236c0:	2301      	movs	r3, #1
   236c2:	425b      	negs	r3, r3
   236c4:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
   236c6:	4b1d      	ldr	r3, [pc, #116]	; (2373c <wait_for_firmware_start+0x98>)
   236c8:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
   236ca:	4b1d      	ldr	r3, [pc, #116]	; (23740 <wait_for_firmware_start+0x9c>)
   236cc:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
   236ce:	1dfb      	adds	r3, r7, #7
   236d0:	781b      	ldrb	r3, [r3, #0]
   236d2:	2b02      	cmp	r3, #2
   236d4:	d003      	beq.n	236de <wait_for_firmware_start+0x3a>
   236d6:	1dfb      	adds	r3, r7, #7
   236d8:	781b      	ldrb	r3, [r3, #0]
   236da:	2b03      	cmp	r3, #3
   236dc:	d119      	bne.n	23712 <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
   236de:	4b19      	ldr	r3, [pc, #100]	; (23744 <wait_for_firmware_start+0xa0>)
   236e0:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
   236e2:	4b19      	ldr	r3, [pc, #100]	; (23748 <wait_for_firmware_start+0xa4>)
   236e4:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
   236e6:	e014      	b.n	23712 <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   236e8:	2002      	movs	r0, #2
   236ea:	4b18      	ldr	r3, [pc, #96]	; (2374c <wait_for_firmware_start+0xa8>)
   236ec:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
   236ee:	68fb      	ldr	r3, [r7, #12]
   236f0:	0018      	movs	r0, r3
   236f2:	4b17      	ldr	r3, [pc, #92]	; (23750 <wait_for_firmware_start+0xac>)
   236f4:	4798      	blx	r3
   236f6:	0003      	movs	r3, r0
   236f8:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
   236fa:	697b      	ldr	r3, [r7, #20]
   236fc:	3301      	adds	r3, #1
   236fe:	617b      	str	r3, [r7, #20]
   23700:	697a      	ldr	r2, [r7, #20]
   23702:	693b      	ldr	r3, [r7, #16]
   23704:	429a      	cmp	r2, r3
   23706:	d304      	bcc.n	23712 <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
   23708:	231f      	movs	r3, #31
   2370a:	18fb      	adds	r3, r7, r3
   2370c:	22fb      	movs	r2, #251	; 0xfb
   2370e:	701a      	strb	r2, [r3, #0]
			goto ERR;
   23710:	e00c      	b.n	2372c <wait_for_firmware_start+0x88>
	while (checkValue != reg)
   23712:	68ba      	ldr	r2, [r7, #8]
   23714:	69bb      	ldr	r3, [r7, #24]
   23716:	429a      	cmp	r2, r3
   23718:	d1e6      	bne.n	236e8 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
   2371a:	68bb      	ldr	r3, [r7, #8]
   2371c:	4a08      	ldr	r2, [pc, #32]	; (23740 <wait_for_firmware_start+0x9c>)
   2371e:	4293      	cmp	r3, r2
   23720:	d104      	bne.n	2372c <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
   23722:	4b06      	ldr	r3, [pc, #24]	; (2373c <wait_for_firmware_start+0x98>)
   23724:	2100      	movs	r1, #0
   23726:	0018      	movs	r0, r3
   23728:	4b0a      	ldr	r3, [pc, #40]	; (23754 <wait_for_firmware_start+0xb0>)
   2372a:	4798      	blx	r3
	}
ERR:
	return ret;
   2372c:	231f      	movs	r3, #31
   2372e:	18fb      	adds	r3, r7, r3
   23730:	781b      	ldrb	r3, [r3, #0]
   23732:	b25b      	sxtb	r3, r3
}
   23734:	0018      	movs	r0, r3
   23736:	46bd      	mov	sp, r7
   23738:	b008      	add	sp, #32
   2373a:	bd80      	pop	{r7, pc}
   2373c:	0000108c 	.word	0x0000108c
   23740:	02532636 	.word	0x02532636
   23744:	000207ac 	.word	0x000207ac
   23748:	d75dc1c3 	.word	0xd75dc1c3
   2374c:	0002101d 	.word	0x0002101d
   23750:	00023895 	.word	0x00023895
   23754:	000238d9 	.word	0x000238d9

00023758 <chip_deinit>:

sint8 chip_deinit(void)
{
   23758:	b590      	push	{r4, r7, lr}
   2375a:	b083      	sub	sp, #12
   2375c:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   2375e:	2300      	movs	r3, #0
   23760:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
   23762:	1dfc      	adds	r4, r7, #7
   23764:	003a      	movs	r2, r7
   23766:	23a0      	movs	r3, #160	; 0xa0
   23768:	015b      	lsls	r3, r3, #5
   2376a:	0011      	movs	r1, r2
   2376c:	0018      	movs	r0, r3
   2376e:	4b20      	ldr	r3, [pc, #128]	; (237f0 <chip_deinit+0x98>)
   23770:	4798      	blx	r3
   23772:	0003      	movs	r3, r0
   23774:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   23776:	1dfb      	adds	r3, r7, #7
   23778:	781b      	ldrb	r3, [r3, #0]
   2377a:	b25b      	sxtb	r3, r3
   2377c:	2b00      	cmp	r3, #0
   2377e:	d00e      	beq.n	2379e <chip_deinit+0x46>
		M2M_ERR("failed to de-initialize\n");
   23780:	4a1c      	ldr	r2, [pc, #112]	; (237f4 <chip_deinit+0x9c>)
   23782:	491d      	ldr	r1, [pc, #116]	; (237f8 <chip_deinit+0xa0>)
   23784:	4b1d      	ldr	r3, [pc, #116]	; (237fc <chip_deinit+0xa4>)
   23786:	0018      	movs	r0, r3
   23788:	4b1d      	ldr	r3, [pc, #116]	; (23800 <chip_deinit+0xa8>)
   2378a:	4798      	blx	r3
   2378c:	4b1d      	ldr	r3, [pc, #116]	; (23804 <chip_deinit+0xac>)
   2378e:	0018      	movs	r0, r3
   23790:	4b1b      	ldr	r3, [pc, #108]	; (23800 <chip_deinit+0xa8>)
   23792:	4798      	blx	r3
   23794:	4b1c      	ldr	r3, [pc, #112]	; (23808 <chip_deinit+0xb0>)
   23796:	0018      	movs	r0, r3
   23798:	4b19      	ldr	r3, [pc, #100]	; (23800 <chip_deinit+0xa8>)
   2379a:	4798      	blx	r3
		goto ERR1;
   2379c:	e021      	b.n	237e2 <chip_deinit+0x8a>
	}
	reg &= ~(1 << 10);
   2379e:	683b      	ldr	r3, [r7, #0]
   237a0:	4a1a      	ldr	r2, [pc, #104]	; (2380c <chip_deinit+0xb4>)
   237a2:	4013      	ands	r3, r2
   237a4:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
   237a6:	683a      	ldr	r2, [r7, #0]
   237a8:	1dfc      	adds	r4, r7, #7
   237aa:	23a0      	movs	r3, #160	; 0xa0
   237ac:	015b      	lsls	r3, r3, #5
   237ae:	0011      	movs	r1, r2
   237b0:	0018      	movs	r0, r3
   237b2:	4b17      	ldr	r3, [pc, #92]	; (23810 <chip_deinit+0xb8>)
   237b4:	4798      	blx	r3
   237b6:	0003      	movs	r3, r0
   237b8:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   237ba:	1dfb      	adds	r3, r7, #7
   237bc:	781b      	ldrb	r3, [r3, #0]
   237be:	b25b      	sxtb	r3, r3
   237c0:	2b00      	cmp	r3, #0
   237c2:	d00e      	beq.n	237e2 <chip_deinit+0x8a>
		M2M_ERR("failed to de-initialize\n");
   237c4:	4a13      	ldr	r2, [pc, #76]	; (23814 <chip_deinit+0xbc>)
   237c6:	490c      	ldr	r1, [pc, #48]	; (237f8 <chip_deinit+0xa0>)
   237c8:	4b0c      	ldr	r3, [pc, #48]	; (237fc <chip_deinit+0xa4>)
   237ca:	0018      	movs	r0, r3
   237cc:	4b0c      	ldr	r3, [pc, #48]	; (23800 <chip_deinit+0xa8>)
   237ce:	4798      	blx	r3
   237d0:	4b0c      	ldr	r3, [pc, #48]	; (23804 <chip_deinit+0xac>)
   237d2:	0018      	movs	r0, r3
   237d4:	4b0a      	ldr	r3, [pc, #40]	; (23800 <chip_deinit+0xa8>)
   237d6:	4798      	blx	r3
   237d8:	4b0b      	ldr	r3, [pc, #44]	; (23808 <chip_deinit+0xb0>)
   237da:	0018      	movs	r0, r3
   237dc:	4b08      	ldr	r3, [pc, #32]	; (23800 <chip_deinit+0xa8>)
   237de:	4798      	blx	r3
		goto ERR1;
   237e0:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   237e2:	1dfb      	adds	r3, r7, #7
   237e4:	781b      	ldrb	r3, [r3, #0]
   237e6:	b25b      	sxtb	r3, r3
}
   237e8:	0018      	movs	r0, r3
   237ea:	46bd      	mov	sp, r7
   237ec:	b003      	add	sp, #12
   237ee:	bd90      	pop	{r4, r7, pc}
   237f0:	000238b5 	.word	0x000238b5
   237f4:	00000201 	.word	0x00000201
   237f8:	00039920 	.word	0x00039920
   237fc:	00039888 	.word	0x00039888
   23800:	0001ebc9 	.word	0x0001ebc9
   23804:	000398f8 	.word	0x000398f8
   23808:	000398b4 	.word	0x000398b4
   2380c:	fffffbff 	.word	0xfffffbff
   23810:	000238d9 	.word	0x000238d9
   23814:	00000207 	.word	0x00000207

00023818 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
   23818:	b590      	push	{r4, r7, lr}
   2381a:	b085      	sub	sp, #20
   2381c:	af00      	add	r7, sp, #0
   2381e:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   23820:	230f      	movs	r3, #15
   23822:	18fb      	adds	r3, r7, r3
   23824:	2200      	movs	r2, #0
   23826:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
   23828:	230f      	movs	r3, #15
   2382a:	18fc      	adds	r4, r7, r3
   2382c:	687b      	ldr	r3, [r7, #4]
   2382e:	0018      	movs	r0, r3
   23830:	4b05      	ldr	r3, [pc, #20]	; (23848 <nm_bus_iface_init+0x30>)
   23832:	4798      	blx	r3
   23834:	0003      	movs	r3, r0
   23836:	7023      	strb	r3, [r4, #0]
	return ret;
   23838:	230f      	movs	r3, #15
   2383a:	18fb      	adds	r3, r7, r3
   2383c:	781b      	ldrb	r3, [r3, #0]
   2383e:	b25b      	sxtb	r3, r3
}
   23840:	0018      	movs	r0, r3
   23842:	46bd      	mov	sp, r7
   23844:	b005      	add	sp, #20
   23846:	bd90      	pop	{r4, r7, pc}
   23848:	000216d9 	.word	0x000216d9

0002384c <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
   2384c:	b590      	push	{r4, r7, lr}
   2384e:	b083      	sub	sp, #12
   23850:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   23852:	1dfb      	adds	r3, r7, #7
   23854:	2200      	movs	r2, #0
   23856:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
   23858:	1dfc      	adds	r4, r7, #7
   2385a:	4b05      	ldr	r3, [pc, #20]	; (23870 <nm_bus_iface_deinit+0x24>)
   2385c:	4798      	blx	r3
   2385e:	0003      	movs	r3, r0
   23860:	7023      	strb	r3, [r4, #0]

	return ret;
   23862:	1dfb      	adds	r3, r7, #7
   23864:	781b      	ldrb	r3, [r3, #0]
   23866:	b25b      	sxtb	r3, r3
}
   23868:	0018      	movs	r0, r3
   2386a:	46bd      	mov	sp, r7
   2386c:	b003      	add	sp, #12
   2386e:	bd90      	pop	{r4, r7, pc}
   23870:	00021851 	.word	0x00021851

00023874 <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
   23874:	b580      	push	{r7, lr}
   23876:	b082      	sub	sp, #8
   23878:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   2387a:	1dfb      	adds	r3, r7, #7
   2387c:	2200      	movs	r2, #0
   2387e:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
   23880:	4b03      	ldr	r3, [pc, #12]	; (23890 <nm_bus_reset+0x1c>)
   23882:	4798      	blx	r3
   23884:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
   23886:	0018      	movs	r0, r3
   23888:	46bd      	mov	sp, r7
   2388a:	b002      	add	sp, #8
   2388c:	bd80      	pop	{r7, pc}
   2388e:	46c0      	nop			; (mov r8, r8)
   23890:	000256a1 	.word	0x000256a1

00023894 <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
   23894:	b580      	push	{r7, lr}
   23896:	b082      	sub	sp, #8
   23898:	af00      	add	r7, sp, #0
   2389a:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
   2389c:	687b      	ldr	r3, [r7, #4]
   2389e:	0018      	movs	r0, r3
   238a0:	4b03      	ldr	r3, [pc, #12]	; (238b0 <nm_read_reg+0x1c>)
   238a2:	4798      	blx	r3
   238a4:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
   238a6:	0018      	movs	r0, r3
   238a8:	46bd      	mov	sp, r7
   238aa:	b002      	add	sp, #8
   238ac:	bd80      	pop	{r7, pc}
   238ae:	46c0      	nop			; (mov r8, r8)
   238b0:	00025835 	.word	0x00025835

000238b4 <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   238b4:	b580      	push	{r7, lr}
   238b6:	b082      	sub	sp, #8
   238b8:	af00      	add	r7, sp, #0
   238ba:	6078      	str	r0, [r7, #4]
   238bc:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
   238be:	683a      	ldr	r2, [r7, #0]
   238c0:	687b      	ldr	r3, [r7, #4]
   238c2:	0011      	movs	r1, r2
   238c4:	0018      	movs	r0, r3
   238c6:	4b03      	ldr	r3, [pc, #12]	; (238d4 <nm_read_reg_with_ret+0x20>)
   238c8:	4798      	blx	r3
   238ca:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
   238cc:	0018      	movs	r0, r3
   238ce:	46bd      	mov	sp, r7
   238d0:	b002      	add	sp, #8
   238d2:	bd80      	pop	{r7, pc}
   238d4:	00025859 	.word	0x00025859

000238d8 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
   238d8:	b580      	push	{r7, lr}
   238da:	b082      	sub	sp, #8
   238dc:	af00      	add	r7, sp, #0
   238de:	6078      	str	r0, [r7, #4]
   238e0:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
   238e2:	683a      	ldr	r2, [r7, #0]
   238e4:	687b      	ldr	r3, [r7, #4]
   238e6:	0011      	movs	r1, r2
   238e8:	0018      	movs	r0, r3
   238ea:	4b03      	ldr	r3, [pc, #12]	; (238f8 <nm_write_reg+0x20>)
   238ec:	4798      	blx	r3
   238ee:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
   238f0:	0018      	movs	r0, r3
   238f2:	46bd      	mov	sp, r7
   238f4:	b002      	add	sp, #8
   238f6:	bd80      	pop	{r7, pc}
   238f8:	000258a9 	.word	0x000258a9

000238fc <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   238fc:	b580      	push	{r7, lr}
   238fe:	b084      	sub	sp, #16
   23900:	af00      	add	r7, sp, #0
   23902:	60f8      	str	r0, [r7, #12]
   23904:	60b9      	str	r1, [r7, #8]
   23906:	1dbb      	adds	r3, r7, #6
   23908:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   2390a:	1dbb      	adds	r3, r7, #6
   2390c:	881a      	ldrh	r2, [r3, #0]
   2390e:	68b9      	ldr	r1, [r7, #8]
   23910:	68fb      	ldr	r3, [r7, #12]
   23912:	0018      	movs	r0, r3
   23914:	4b03      	ldr	r3, [pc, #12]	; (23924 <p_nm_read_block+0x28>)
   23916:	4798      	blx	r3
   23918:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   2391a:	0018      	movs	r0, r3
   2391c:	46bd      	mov	sp, r7
   2391e:	b004      	add	sp, #16
   23920:	bd80      	pop	{r7, pc}
   23922:	46c0      	nop			; (mov r8, r8)
   23924:	000258f9 	.word	0x000258f9

00023928 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   23928:	b580      	push	{r7, lr}
   2392a:	b086      	sub	sp, #24
   2392c:	af00      	add	r7, sp, #0
   2392e:	60f8      	str	r0, [r7, #12]
   23930:	60b9      	str	r1, [r7, #8]
   23932:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   23934:	4b2d      	ldr	r3, [pc, #180]	; (239ec <nm_read_block+0xc4>)
   23936:	881a      	ldrh	r2, [r3, #0]
   23938:	2310      	movs	r3, #16
   2393a:	18fb      	adds	r3, r7, r3
   2393c:	3a08      	subs	r2, #8
   2393e:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   23940:	2300      	movs	r3, #0
   23942:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   23944:	2313      	movs	r3, #19
   23946:	18fb      	adds	r3, r7, r3
   23948:	2200      	movs	r2, #0
   2394a:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   2394c:	2310      	movs	r3, #16
   2394e:	18fb      	adds	r3, r7, r3
   23950:	881a      	ldrh	r2, [r3, #0]
   23952:	687b      	ldr	r3, [r7, #4]
   23954:	429a      	cmp	r2, r3
   23956:	d313      	bcc.n	23980 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   23958:	68ba      	ldr	r2, [r7, #8]
   2395a:	697b      	ldr	r3, [r7, #20]
   2395c:	18d1      	adds	r1, r2, r3
   2395e:	687b      	ldr	r3, [r7, #4]
   23960:	b29a      	uxth	r2, r3
   23962:	68fb      	ldr	r3, [r7, #12]
   23964:	0018      	movs	r0, r3
   23966:	4b22      	ldr	r3, [pc, #136]	; (239f0 <nm_read_block+0xc8>)
   23968:	4798      	blx	r3
   2396a:	0003      	movs	r3, r0
   2396c:	b2da      	uxtb	r2, r3
   2396e:	2313      	movs	r3, #19
   23970:	18fb      	adds	r3, r7, r3
   23972:	781b      	ldrb	r3, [r3, #0]
   23974:	18d3      	adds	r3, r2, r3
   23976:	b2da      	uxtb	r2, r3
   23978:	2313      	movs	r3, #19
   2397a:	18fb      	adds	r3, r7, r3
   2397c:	701a      	strb	r2, [r3, #0]
			break;
   2397e:	e02d      	b.n	239dc <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   23980:	68ba      	ldr	r2, [r7, #8]
   23982:	697b      	ldr	r3, [r7, #20]
   23984:	18d1      	adds	r1, r2, r3
   23986:	2310      	movs	r3, #16
   23988:	18fb      	adds	r3, r7, r3
   2398a:	881a      	ldrh	r2, [r3, #0]
   2398c:	68fb      	ldr	r3, [r7, #12]
   2398e:	0018      	movs	r0, r3
   23990:	4b17      	ldr	r3, [pc, #92]	; (239f0 <nm_read_block+0xc8>)
   23992:	4798      	blx	r3
   23994:	0003      	movs	r3, r0
   23996:	b2da      	uxtb	r2, r3
   23998:	2313      	movs	r3, #19
   2399a:	18fb      	adds	r3, r7, r3
   2399c:	781b      	ldrb	r3, [r3, #0]
   2399e:	18d3      	adds	r3, r2, r3
   239a0:	b2da      	uxtb	r2, r3
   239a2:	2313      	movs	r3, #19
   239a4:	18fb      	adds	r3, r7, r3
   239a6:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   239a8:	2313      	movs	r3, #19
   239aa:	18fb      	adds	r3, r7, r3
   239ac:	781b      	ldrb	r3, [r3, #0]
   239ae:	b25b      	sxtb	r3, r3
   239b0:	2b00      	cmp	r3, #0
   239b2:	d112      	bne.n	239da <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   239b4:	2310      	movs	r3, #16
   239b6:	18fb      	adds	r3, r7, r3
   239b8:	881b      	ldrh	r3, [r3, #0]
   239ba:	687a      	ldr	r2, [r7, #4]
   239bc:	1ad3      	subs	r3, r2, r3
   239be:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   239c0:	2310      	movs	r3, #16
   239c2:	18fb      	adds	r3, r7, r3
   239c4:	881b      	ldrh	r3, [r3, #0]
   239c6:	697a      	ldr	r2, [r7, #20]
   239c8:	18d3      	adds	r3, r2, r3
   239ca:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   239cc:	2310      	movs	r3, #16
   239ce:	18fb      	adds	r3, r7, r3
   239d0:	881b      	ldrh	r3, [r3, #0]
   239d2:	68fa      	ldr	r2, [r7, #12]
   239d4:	18d3      	adds	r3, r2, r3
   239d6:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   239d8:	e7b8      	b.n	2394c <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   239da:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   239dc:	2313      	movs	r3, #19
   239de:	18fb      	adds	r3, r7, r3
   239e0:	781b      	ldrb	r3, [r3, #0]
   239e2:	b25b      	sxtb	r3, r3
}
   239e4:	0018      	movs	r0, r3
   239e6:	46bd      	mov	sp, r7
   239e8:	b006      	add	sp, #24
   239ea:	bd80      	pop	{r7, pc}
   239ec:	20000124 	.word	0x20000124
   239f0:	000238fd 	.word	0x000238fd

000239f4 <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   239f4:	b580      	push	{r7, lr}
   239f6:	b084      	sub	sp, #16
   239f8:	af00      	add	r7, sp, #0
   239fa:	60f8      	str	r0, [r7, #12]
   239fc:	60b9      	str	r1, [r7, #8]
   239fe:	1dbb      	adds	r3, r7, #6
   23a00:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   23a02:	1dbb      	adds	r3, r7, #6
   23a04:	881a      	ldrh	r2, [r3, #0]
   23a06:	68b9      	ldr	r1, [r7, #8]
   23a08:	68fb      	ldr	r3, [r7, #12]
   23a0a:	0018      	movs	r0, r3
   23a0c:	4b03      	ldr	r3, [pc, #12]	; (23a1c <p_nm_write_block+0x28>)
   23a0e:	4798      	blx	r3
   23a10:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   23a12:	0018      	movs	r0, r3
   23a14:	46bd      	mov	sp, r7
   23a16:	b004      	add	sp, #16
   23a18:	bd80      	pop	{r7, pc}
   23a1a:	46c0      	nop			; (mov r8, r8)
   23a1c:	00025951 	.word	0x00025951

00023a20 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   23a20:	b580      	push	{r7, lr}
   23a22:	b086      	sub	sp, #24
   23a24:	af00      	add	r7, sp, #0
   23a26:	60f8      	str	r0, [r7, #12]
   23a28:	60b9      	str	r1, [r7, #8]
   23a2a:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   23a2c:	4b2d      	ldr	r3, [pc, #180]	; (23ae4 <nm_write_block+0xc4>)
   23a2e:	881a      	ldrh	r2, [r3, #0]
   23a30:	2310      	movs	r3, #16
   23a32:	18fb      	adds	r3, r7, r3
   23a34:	3a08      	subs	r2, #8
   23a36:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   23a38:	2300      	movs	r3, #0
   23a3a:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   23a3c:	2313      	movs	r3, #19
   23a3e:	18fb      	adds	r3, r7, r3
   23a40:	2200      	movs	r2, #0
   23a42:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   23a44:	2310      	movs	r3, #16
   23a46:	18fb      	adds	r3, r7, r3
   23a48:	881a      	ldrh	r2, [r3, #0]
   23a4a:	687b      	ldr	r3, [r7, #4]
   23a4c:	429a      	cmp	r2, r3
   23a4e:	d313      	bcc.n	23a78 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   23a50:	68ba      	ldr	r2, [r7, #8]
   23a52:	697b      	ldr	r3, [r7, #20]
   23a54:	18d1      	adds	r1, r2, r3
   23a56:	687b      	ldr	r3, [r7, #4]
   23a58:	b29a      	uxth	r2, r3
   23a5a:	68fb      	ldr	r3, [r7, #12]
   23a5c:	0018      	movs	r0, r3
   23a5e:	4b22      	ldr	r3, [pc, #136]	; (23ae8 <nm_write_block+0xc8>)
   23a60:	4798      	blx	r3
   23a62:	0003      	movs	r3, r0
   23a64:	b2da      	uxtb	r2, r3
   23a66:	2313      	movs	r3, #19
   23a68:	18fb      	adds	r3, r7, r3
   23a6a:	781b      	ldrb	r3, [r3, #0]
   23a6c:	18d3      	adds	r3, r2, r3
   23a6e:	b2da      	uxtb	r2, r3
   23a70:	2313      	movs	r3, #19
   23a72:	18fb      	adds	r3, r7, r3
   23a74:	701a      	strb	r2, [r3, #0]
			break;
   23a76:	e02d      	b.n	23ad4 <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   23a78:	68ba      	ldr	r2, [r7, #8]
   23a7a:	697b      	ldr	r3, [r7, #20]
   23a7c:	18d1      	adds	r1, r2, r3
   23a7e:	2310      	movs	r3, #16
   23a80:	18fb      	adds	r3, r7, r3
   23a82:	881a      	ldrh	r2, [r3, #0]
   23a84:	68fb      	ldr	r3, [r7, #12]
   23a86:	0018      	movs	r0, r3
   23a88:	4b17      	ldr	r3, [pc, #92]	; (23ae8 <nm_write_block+0xc8>)
   23a8a:	4798      	blx	r3
   23a8c:	0003      	movs	r3, r0
   23a8e:	b2da      	uxtb	r2, r3
   23a90:	2313      	movs	r3, #19
   23a92:	18fb      	adds	r3, r7, r3
   23a94:	781b      	ldrb	r3, [r3, #0]
   23a96:	18d3      	adds	r3, r2, r3
   23a98:	b2da      	uxtb	r2, r3
   23a9a:	2313      	movs	r3, #19
   23a9c:	18fb      	adds	r3, r7, r3
   23a9e:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   23aa0:	2313      	movs	r3, #19
   23aa2:	18fb      	adds	r3, r7, r3
   23aa4:	781b      	ldrb	r3, [r3, #0]
   23aa6:	b25b      	sxtb	r3, r3
   23aa8:	2b00      	cmp	r3, #0
   23aaa:	d112      	bne.n	23ad2 <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   23aac:	2310      	movs	r3, #16
   23aae:	18fb      	adds	r3, r7, r3
   23ab0:	881b      	ldrh	r3, [r3, #0]
   23ab2:	687a      	ldr	r2, [r7, #4]
   23ab4:	1ad3      	subs	r3, r2, r3
   23ab6:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   23ab8:	2310      	movs	r3, #16
   23aba:	18fb      	adds	r3, r7, r3
   23abc:	881b      	ldrh	r3, [r3, #0]
   23abe:	697a      	ldr	r2, [r7, #20]
   23ac0:	18d3      	adds	r3, r2, r3
   23ac2:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   23ac4:	2310      	movs	r3, #16
   23ac6:	18fb      	adds	r3, r7, r3
   23ac8:	881b      	ldrh	r3, [r3, #0]
   23aca:	68fa      	ldr	r2, [r7, #12]
   23acc:	18d3      	adds	r3, r2, r3
   23ace:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   23ad0:	e7b8      	b.n	23a44 <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   23ad2:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   23ad4:	2313      	movs	r3, #19
   23ad6:	18fb      	adds	r3, r7, r3
   23ad8:	781b      	ldrb	r3, [r3, #0]
   23ada:	b25b      	sxtb	r3, r3
}
   23adc:	0018      	movs	r0, r3
   23ade:	46bd      	mov	sp, r7
   23ae0:	b006      	add	sp, #24
   23ae2:	bd80      	pop	{r7, pc}
   23ae4:	20000124 	.word	0x20000124
   23ae8:	000239f5 	.word	0x000239f5

00023aec <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
   23aec:	b590      	push	{r4, r7, lr}
   23aee:	b089      	sub	sp, #36	; 0x24
   23af0:	af00      	add	r7, sp, #0
   23af2:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
   23af4:	2300      	movs	r3, #0
   23af6:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
   23af8:	231f      	movs	r3, #31
   23afa:	18fb      	adds	r3, r7, r3
   23afc:	2200      	movs	r2, #0
   23afe:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
   23b00:	230c      	movs	r3, #12
   23b02:	18fb      	adds	r3, r7, r3
   23b04:	0018      	movs	r0, r3
   23b06:	2308      	movs	r3, #8
   23b08:	001a      	movs	r2, r3
   23b0a:	2100      	movs	r1, #0
   23b0c:	4b64      	ldr	r3, [pc, #400]	; (23ca0 <nm_get_firmware_full_info+0x1b4>)
   23b0e:	4798      	blx	r3
	if (pstrRev != NULL)
   23b10:	687b      	ldr	r3, [r7, #4]
   23b12:	2b00      	cmp	r3, #0
   23b14:	d100      	bne.n	23b18 <nm_get_firmware_full_info+0x2c>
   23b16:	e0ba      	b.n	23c8e <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
   23b18:	687b      	ldr	r3, [r7, #4]
   23b1a:	2228      	movs	r2, #40	; 0x28
   23b1c:	2100      	movs	r1, #0
   23b1e:	0018      	movs	r0, r3
   23b20:	4b60      	ldr	r3, [pc, #384]	; (23ca4 <nm_get_firmware_full_info+0x1b8>)
   23b22:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
   23b24:	231f      	movs	r3, #31
   23b26:	18fc      	adds	r4, r7, r3
   23b28:	2314      	movs	r3, #20
   23b2a:	18fb      	adds	r3, r7, r3
   23b2c:	4a5e      	ldr	r2, [pc, #376]	; (23ca8 <nm_get_firmware_full_info+0x1bc>)
   23b2e:	0019      	movs	r1, r3
   23b30:	0010      	movs	r0, r2
   23b32:	4b5e      	ldr	r3, [pc, #376]	; (23cac <nm_get_firmware_full_info+0x1c0>)
   23b34:	4798      	blx	r3
   23b36:	0003      	movs	r3, r0
   23b38:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
   23b3a:	231f      	movs	r3, #31
   23b3c:	18fb      	adds	r3, r7, r3
   23b3e:	781b      	ldrb	r3, [r3, #0]
   23b40:	b25b      	sxtb	r3, r3
   23b42:	2b00      	cmp	r3, #0
   23b44:	d000      	beq.n	23b48 <nm_get_firmware_full_info+0x5c>
   23b46:	e0a2      	b.n	23c8e <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
   23b48:	697b      	ldr	r3, [r7, #20]
   23b4a:	2b00      	cmp	r3, #0
   23b4c:	d100      	bne.n	23b50 <nm_get_firmware_full_info+0x64>
   23b4e:	e09a      	b.n	23c86 <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
   23b50:	697b      	ldr	r3, [r7, #20]
   23b52:	22c0      	movs	r2, #192	; 0xc0
   23b54:	0292      	lsls	r2, r2, #10
   23b56:	4313      	orrs	r3, r2
   23b58:	221f      	movs	r2, #31
   23b5a:	18bc      	adds	r4, r7, r2
   23b5c:	220c      	movs	r2, #12
   23b5e:	18b9      	adds	r1, r7, r2
   23b60:	2208      	movs	r2, #8
   23b62:	0018      	movs	r0, r3
   23b64:	4b52      	ldr	r3, [pc, #328]	; (23cb0 <nm_get_firmware_full_info+0x1c4>)
   23b66:	4798      	blx	r3
   23b68:	0003      	movs	r3, r0
   23b6a:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
   23b6c:	231f      	movs	r3, #31
   23b6e:	18fb      	adds	r3, r7, r3
   23b70:	781b      	ldrb	r3, [r3, #0]
   23b72:	b25b      	sxtb	r3, r3
   23b74:	2b00      	cmp	r3, #0
   23b76:	d000      	beq.n	23b7a <nm_get_firmware_full_info+0x8e>
   23b78:	e089      	b.n	23c8e <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
   23b7a:	230c      	movs	r3, #12
   23b7c:	18fb      	adds	r3, r7, r3
   23b7e:	685b      	ldr	r3, [r3, #4]
   23b80:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
   23b82:	697b      	ldr	r3, [r7, #20]
   23b84:	041b      	lsls	r3, r3, #16
   23b86:	0c1b      	lsrs	r3, r3, #16
   23b88:	617b      	str	r3, [r7, #20]
					if(reg != 0)
   23b8a:	697b      	ldr	r3, [r7, #20]
   23b8c:	2b00      	cmp	r3, #0
   23b8e:	d100      	bne.n	23b92 <nm_get_firmware_full_info+0xa6>
   23b90:	e074      	b.n	23c7c <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
   23b92:	697b      	ldr	r3, [r7, #20]
   23b94:	22c0      	movs	r2, #192	; 0xc0
   23b96:	0292      	lsls	r2, r2, #10
   23b98:	4313      	orrs	r3, r2
   23b9a:	221f      	movs	r2, #31
   23b9c:	18bc      	adds	r4, r7, r2
   23b9e:	6879      	ldr	r1, [r7, #4]
   23ba0:	2228      	movs	r2, #40	; 0x28
   23ba2:	0018      	movs	r0, r3
   23ba4:	4b42      	ldr	r3, [pc, #264]	; (23cb0 <nm_get_firmware_full_info+0x1c4>)
   23ba6:	4798      	blx	r3
   23ba8:	0003      	movs	r3, r0
   23baa:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
   23bac:	231f      	movs	r3, #31
   23bae:	18fb      	adds	r3, r7, r3
   23bb0:	781b      	ldrb	r3, [r3, #0]
   23bb2:	b25b      	sxtb	r3, r3
   23bb4:	2b00      	cmp	r3, #0
   23bb6:	d16a      	bne.n	23c8e <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
   23bb8:	687b      	ldr	r3, [r7, #4]
   23bba:	791b      	ldrb	r3, [r3, #4]
   23bbc:	021b      	lsls	r3, r3, #8
   23bbe:	b21a      	sxth	r2, r3
   23bc0:	687b      	ldr	r3, [r7, #4]
   23bc2:	795b      	ldrb	r3, [r3, #5]
   23bc4:	011b      	lsls	r3, r3, #4
   23bc6:	b21b      	sxth	r3, r3
   23bc8:	21ff      	movs	r1, #255	; 0xff
   23bca:	400b      	ands	r3, r1
   23bcc:	b21b      	sxth	r3, r3
   23bce:	4313      	orrs	r3, r2
   23bd0:	b21a      	sxth	r2, r3
   23bd2:	687b      	ldr	r3, [r7, #4]
   23bd4:	799b      	ldrb	r3, [r3, #6]
   23bd6:	b21b      	sxth	r3, r3
   23bd8:	210f      	movs	r1, #15
   23bda:	400b      	ands	r3, r1
   23bdc:	b21b      	sxth	r3, r3
   23bde:	4313      	orrs	r3, r2
   23be0:	b21a      	sxth	r2, r3
   23be2:	231c      	movs	r3, #28
   23be4:	18fb      	adds	r3, r7, r3
   23be6:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   23be8:	231a      	movs	r3, #26
   23bea:	18fb      	adds	r3, r7, r3
   23bec:	4a31      	ldr	r2, [pc, #196]	; (23cb4 <nm_get_firmware_full_info+0x1c8>)
   23bee:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
   23bf0:	687b      	ldr	r3, [r7, #4]
   23bf2:	79db      	ldrb	r3, [r3, #7]
   23bf4:	021b      	lsls	r3, r3, #8
   23bf6:	b21a      	sxth	r2, r3
   23bf8:	687b      	ldr	r3, [r7, #4]
   23bfa:	7a1b      	ldrb	r3, [r3, #8]
   23bfc:	011b      	lsls	r3, r3, #4
   23bfe:	b21b      	sxth	r3, r3
   23c00:	21ff      	movs	r1, #255	; 0xff
   23c02:	400b      	ands	r3, r1
   23c04:	b21b      	sxth	r3, r3
   23c06:	4313      	orrs	r3, r2
   23c08:	b21a      	sxth	r2, r3
   23c0a:	687b      	ldr	r3, [r7, #4]
   23c0c:	7a5b      	ldrb	r3, [r3, #9]
   23c0e:	b21b      	sxth	r3, r3
   23c10:	210f      	movs	r1, #15
   23c12:	400b      	ands	r3, r1
   23c14:	b21b      	sxth	r3, r3
   23c16:	4313      	orrs	r3, r2
   23c18:	b21a      	sxth	r2, r3
   23c1a:	2318      	movs	r3, #24
   23c1c:	18fb      	adds	r3, r7, r3
   23c1e:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
   23c20:	231c      	movs	r3, #28
   23c22:	18fb      	adds	r3, r7, r3
   23c24:	881b      	ldrh	r3, [r3, #0]
   23c26:	2b00      	cmp	r3, #0
   23c28:	d009      	beq.n	23c3e <nm_get_firmware_full_info+0x152>
   23c2a:	2318      	movs	r3, #24
   23c2c:	18fb      	adds	r3, r7, r3
   23c2e:	881b      	ldrh	r3, [r3, #0]
   23c30:	2b00      	cmp	r3, #0
   23c32:	d004      	beq.n	23c3e <nm_get_firmware_full_info+0x152>
   23c34:	2318      	movs	r3, #24
   23c36:	18fb      	adds	r3, r7, r3
   23c38:	881b      	ldrh	r3, [r3, #0]
   23c3a:	2b00      	cmp	r3, #0
   23c3c:	d104      	bne.n	23c48 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
   23c3e:	231f      	movs	r3, #31
   23c40:	18fb      	adds	r3, r7, r3
   23c42:	22f4      	movs	r2, #244	; 0xf4
   23c44:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   23c46:	e022      	b.n	23c8e <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
   23c48:	231a      	movs	r3, #26
   23c4a:	18fa      	adds	r2, r7, r3
   23c4c:	2318      	movs	r3, #24
   23c4e:	18fb      	adds	r3, r7, r3
   23c50:	8812      	ldrh	r2, [r2, #0]
   23c52:	881b      	ldrh	r3, [r3, #0]
   23c54:	429a      	cmp	r2, r3
   23c56:	d204      	bcs.n	23c62 <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
   23c58:	231f      	movs	r3, #31
   23c5a:	18fb      	adds	r3, r7, r3
   23c5c:	22f3      	movs	r2, #243	; 0xf3
   23c5e:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   23c60:	e015      	b.n	23c8e <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
   23c62:	231a      	movs	r3, #26
   23c64:	18fa      	adds	r2, r7, r3
   23c66:	231c      	movs	r3, #28
   23c68:	18fb      	adds	r3, r7, r3
   23c6a:	8812      	ldrh	r2, [r2, #0]
   23c6c:	881b      	ldrh	r3, [r3, #0]
   23c6e:	429a      	cmp	r2, r3
   23c70:	d90d      	bls.n	23c8e <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
   23c72:	231f      	movs	r3, #31
   23c74:	18fb      	adds	r3, r7, r3
   23c76:	22f3      	movs	r2, #243	; 0xf3
   23c78:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   23c7a:	e008      	b.n	23c8e <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
   23c7c:	231f      	movs	r3, #31
   23c7e:	18fb      	adds	r3, r7, r3
   23c80:	22f4      	movs	r2, #244	; 0xf4
   23c82:	701a      	strb	r2, [r3, #0]
   23c84:	e003      	b.n	23c8e <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
   23c86:	231f      	movs	r3, #31
   23c88:	18fb      	adds	r3, r7, r3
   23c8a:	22f4      	movs	r2, #244	; 0xf4
   23c8c:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
   23c8e:	231f      	movs	r3, #31
   23c90:	18fb      	adds	r3, r7, r3
   23c92:	781b      	ldrb	r3, [r3, #0]
   23c94:	b25b      	sxtb	r3, r3
}
   23c96:	0018      	movs	r0, r3
   23c98:	46bd      	mov	sp, r7
   23c9a:	b009      	add	sp, #36	; 0x24
   23c9c:	bd90      	pop	{r4, r7, pc}
   23c9e:	46c0      	nop			; (mov r8, r8)
   23ca0:	000355ef 	.word	0x000355ef
   23ca4:	000218fd 	.word	0x000218fd
   23ca8:	000c0008 	.word	0x000c0008
   23cac:	000238b5 	.word	0x000238b5
   23cb0:	00023929 	.word	0x00023929
   23cb4:	00001354 	.word	0x00001354

00023cb8 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
   23cb8:	b590      	push	{r4, r7, lr}
   23cba:	b085      	sub	sp, #20
   23cbc:	af00      	add	r7, sp, #0
   23cbe:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   23cc0:	230f      	movs	r3, #15
   23cc2:	18fb      	adds	r3, r7, r3
   23cc4:	2200      	movs	r2, #0
   23cc6:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
   23cc8:	687b      	ldr	r3, [r7, #4]
   23cca:	2b00      	cmp	r3, #0
   23ccc:	d013      	beq.n	23cf6 <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
   23cce:	230e      	movs	r3, #14
   23cd0:	18fb      	adds	r3, r7, r3
   23cd2:	687a      	ldr	r2, [r7, #4]
   23cd4:	7812      	ldrb	r2, [r2, #0]
   23cd6:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
   23cd8:	230e      	movs	r3, #14
   23cda:	18fb      	adds	r3, r7, r3
   23cdc:	781b      	ldrb	r3, [r3, #0]
   23cde:	2b00      	cmp	r3, #0
   23ce0:	d004      	beq.n	23cec <nm_drv_init+0x34>
   23ce2:	230e      	movs	r3, #14
   23ce4:	18fb      	adds	r3, r7, r3
   23ce6:	781b      	ldrb	r3, [r3, #0]
   23ce8:	2b04      	cmp	r3, #4
   23cea:	d908      	bls.n	23cfe <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
   23cec:	230e      	movs	r3, #14
   23cee:	18fb      	adds	r3, r7, r3
   23cf0:	2201      	movs	r2, #1
   23cf2:	701a      	strb	r2, [r3, #0]
   23cf4:	e003      	b.n	23cfe <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
   23cf6:	230e      	movs	r3, #14
   23cf8:	18fb      	adds	r3, r7, r3
   23cfa:	2201      	movs	r2, #1
   23cfc:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
   23cfe:	230f      	movs	r3, #15
   23d00:	18fc      	adds	r4, r7, r3
   23d02:	2000      	movs	r0, #0
   23d04:	4b41      	ldr	r3, [pc, #260]	; (23e0c <nm_drv_init+0x154>)
   23d06:	4798      	blx	r3
   23d08:	0003      	movs	r3, r0
   23d0a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23d0c:	230f      	movs	r3, #15
   23d0e:	18fb      	adds	r3, r7, r3
   23d10:	781b      	ldrb	r3, [r3, #0]
   23d12:	b25b      	sxtb	r3, r3
   23d14:	2b00      	cmp	r3, #0
   23d16:	d00f      	beq.n	23d38 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
   23d18:	2390      	movs	r3, #144	; 0x90
   23d1a:	005a      	lsls	r2, r3, #1
   23d1c:	493c      	ldr	r1, [pc, #240]	; (23e10 <nm_drv_init+0x158>)
   23d1e:	4b3d      	ldr	r3, [pc, #244]	; (23e14 <nm_drv_init+0x15c>)
   23d20:	0018      	movs	r0, r3
   23d22:	4b3d      	ldr	r3, [pc, #244]	; (23e18 <nm_drv_init+0x160>)
   23d24:	4798      	blx	r3
   23d26:	4b3d      	ldr	r3, [pc, #244]	; (23e1c <nm_drv_init+0x164>)
   23d28:	0018      	movs	r0, r3
   23d2a:	4b3b      	ldr	r3, [pc, #236]	; (23e18 <nm_drv_init+0x160>)
   23d2c:	4798      	blx	r3
   23d2e:	4b3c      	ldr	r3, [pc, #240]	; (23e20 <nm_drv_init+0x168>)
   23d30:	0018      	movs	r0, r3
   23d32:	4b39      	ldr	r3, [pc, #228]	; (23e18 <nm_drv_init+0x160>)
   23d34:	4798      	blx	r3
		goto ERR1;
   23d36:	e061      	b.n	23dfc <nm_drv_init+0x144>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
   23d38:	4b3a      	ldr	r3, [pc, #232]	; (23e24 <nm_drv_init+0x16c>)
   23d3a:	0018      	movs	r0, r3
   23d3c:	4b36      	ldr	r3, [pc, #216]	; (23e18 <nm_drv_init+0x160>)
   23d3e:	4798      	blx	r3
   23d40:	4b39      	ldr	r3, [pc, #228]	; (23e28 <nm_drv_init+0x170>)
   23d42:	4798      	blx	r3
   23d44:	0002      	movs	r2, r0
   23d46:	4b39      	ldr	r3, [pc, #228]	; (23e2c <nm_drv_init+0x174>)
   23d48:	0011      	movs	r1, r2
   23d4a:	0018      	movs	r0, r3
   23d4c:	4b32      	ldr	r3, [pc, #200]	; (23e18 <nm_drv_init+0x160>)
   23d4e:	4798      	blx	r3
   23d50:	4b33      	ldr	r3, [pc, #204]	; (23e20 <nm_drv_init+0x168>)
   23d52:	0018      	movs	r0, r3
   23d54:	4b30      	ldr	r3, [pc, #192]	; (23e18 <nm_drv_init+0x160>)
   23d56:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
   23d58:	4b35      	ldr	r3, [pc, #212]	; (23e30 <nm_drv_init+0x178>)
   23d5a:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
   23d5c:	230f      	movs	r3, #15
   23d5e:	18fc      	adds	r4, r7, r3
   23d60:	230e      	movs	r3, #14
   23d62:	18fb      	adds	r3, r7, r3
   23d64:	781b      	ldrb	r3, [r3, #0]
   23d66:	0018      	movs	r0, r3
   23d68:	4b32      	ldr	r3, [pc, #200]	; (23e34 <nm_drv_init+0x17c>)
   23d6a:	4798      	blx	r3
   23d6c:	0003      	movs	r3, r0
   23d6e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23d70:	230f      	movs	r3, #15
   23d72:	18fb      	adds	r3, r7, r3
   23d74:	781b      	ldrb	r3, [r3, #0]
   23d76:	b25b      	sxtb	r3, r3
   23d78:	2b00      	cmp	r3, #0
   23d7a:	d13a      	bne.n	23df2 <nm_drv_init+0x13a>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
   23d7c:	230f      	movs	r3, #15
   23d7e:	18fc      	adds	r4, r7, r3
   23d80:	230e      	movs	r3, #14
   23d82:	18fb      	adds	r3, r7, r3
   23d84:	781b      	ldrb	r3, [r3, #0]
   23d86:	0018      	movs	r0, r3
   23d88:	4b2b      	ldr	r3, [pc, #172]	; (23e38 <nm_drv_init+0x180>)
   23d8a:	4798      	blx	r3
   23d8c:	0003      	movs	r3, r0
   23d8e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23d90:	230f      	movs	r3, #15
   23d92:	18fb      	adds	r3, r7, r3
   23d94:	781b      	ldrb	r3, [r3, #0]
   23d96:	b25b      	sxtb	r3, r3
   23d98:	2b00      	cmp	r3, #0
   23d9a:	d12c      	bne.n	23df6 <nm_drv_init+0x13e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
   23d9c:	230e      	movs	r3, #14
   23d9e:	18fb      	adds	r3, r7, r3
   23da0:	781b      	ldrb	r3, [r3, #0]
   23da2:	2b02      	cmp	r3, #2
   23da4:	d02a      	beq.n	23dfc <nm_drv_init+0x144>
   23da6:	230e      	movs	r3, #14
   23da8:	18fb      	adds	r3, r7, r3
   23daa:	781b      	ldrb	r3, [r3, #0]
   23dac:	2b03      	cmp	r3, #3
   23dae:	d025      	beq.n	23dfc <nm_drv_init+0x144>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
   23db0:	230f      	movs	r3, #15
   23db2:	18fc      	adds	r4, r7, r3
   23db4:	4b21      	ldr	r3, [pc, #132]	; (23e3c <nm_drv_init+0x184>)
   23db6:	4798      	blx	r3
   23db8:	0003      	movs	r3, r0
   23dba:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23dbc:	230f      	movs	r3, #15
   23dbe:	18fb      	adds	r3, r7, r3
   23dc0:	781b      	ldrb	r3, [r3, #0]
   23dc2:	b25b      	sxtb	r3, r3
   23dc4:	2b00      	cmp	r3, #0
   23dc6:	d00f      	beq.n	23de8 <nm_drv_init+0x130>
		M2M_ERR("failed to enable interrupts..\n");
   23dc8:	23a7      	movs	r3, #167	; 0xa7
   23dca:	005a      	lsls	r2, r3, #1
   23dcc:	4910      	ldr	r1, [pc, #64]	; (23e10 <nm_drv_init+0x158>)
   23dce:	4b11      	ldr	r3, [pc, #68]	; (23e14 <nm_drv_init+0x15c>)
   23dd0:	0018      	movs	r0, r3
   23dd2:	4b11      	ldr	r3, [pc, #68]	; (23e18 <nm_drv_init+0x160>)
   23dd4:	4798      	blx	r3
   23dd6:	4b1a      	ldr	r3, [pc, #104]	; (23e40 <nm_drv_init+0x188>)
   23dd8:	0018      	movs	r0, r3
   23dda:	4b0f      	ldr	r3, [pc, #60]	; (23e18 <nm_drv_init+0x160>)
   23ddc:	4798      	blx	r3
   23dde:	4b10      	ldr	r3, [pc, #64]	; (23e20 <nm_drv_init+0x168>)
   23de0:	0018      	movs	r0, r3
   23de2:	4b0d      	ldr	r3, [pc, #52]	; (23e18 <nm_drv_init+0x160>)
   23de4:	4798      	blx	r3
		goto ERR2;
   23de6:	e007      	b.n	23df8 <nm_drv_init+0x140>
	}
	return ret;
   23de8:	230f      	movs	r3, #15
   23dea:	18fb      	adds	r3, r7, r3
   23dec:	781b      	ldrb	r3, [r3, #0]
   23dee:	b25b      	sxtb	r3, r3
   23df0:	e008      	b.n	23e04 <nm_drv_init+0x14c>
		goto ERR2;
   23df2:	46c0      	nop			; (mov r8, r8)
   23df4:	e000      	b.n	23df8 <nm_drv_init+0x140>
		goto ERR2;
   23df6:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
   23df8:	4b12      	ldr	r3, [pc, #72]	; (23e44 <nm_drv_init+0x18c>)
   23dfa:	4798      	blx	r3
ERR1:
	return ret;
   23dfc:	230f      	movs	r3, #15
   23dfe:	18fb      	adds	r3, r7, r3
   23e00:	781b      	ldrb	r3, [r3, #0]
   23e02:	b25b      	sxtb	r3, r3
}
   23e04:	0018      	movs	r0, r3
   23e06:	46bd      	mov	sp, r7
   23e08:	b005      	add	sp, #20
   23e0a:	bd90      	pop	{r4, r7, pc}
   23e0c:	00023819 	.word	0x00023819
   23e10:	000399fc 	.word	0x000399fc
   23e14:	0003992c 	.word	0x0003992c
   23e18:	0001ebc9 	.word	0x0001ebc9
   23e1c:	00039940 	.word	0x00039940
   23e20:	0003995c 	.word	0x0003995c
   23e24:	00039960 	.word	0x00039960
   23e28:	000231b5 	.word	0x000231b5
   23e2c:	0003996c 	.word	0x0003996c
   23e30:	000256d1 	.word	0x000256d1
   23e34:	0002350d 	.word	0x0002350d
   23e38:	000236a5 	.word	0x000236a5
   23e3c:	00023101 	.word	0x00023101
   23e40:	0003997c 	.word	0x0003997c
   23e44:	0002384d 	.word	0x0002384d

00023e48 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
   23e48:	b590      	push	{r4, r7, lr}
   23e4a:	b085      	sub	sp, #20
   23e4c:	af00      	add	r7, sp, #0
   23e4e:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
   23e50:	230f      	movs	r3, #15
   23e52:	18fc      	adds	r4, r7, r3
   23e54:	4b2e      	ldr	r3, [pc, #184]	; (23f10 <nm_drv_deinit+0xc8>)
   23e56:	4798      	blx	r3
   23e58:	0003      	movs	r3, r0
   23e5a:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23e5c:	230f      	movs	r3, #15
   23e5e:	18fb      	adds	r3, r7, r3
   23e60:	781b      	ldrb	r3, [r3, #0]
   23e62:	b25b      	sxtb	r3, r3
   23e64:	2b00      	cmp	r3, #0
   23e66:	d010      	beq.n	23e8a <nm_drv_deinit+0x42>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
   23e68:	2366      	movs	r3, #102	; 0x66
   23e6a:	33ff      	adds	r3, #255	; 0xff
   23e6c:	001a      	movs	r2, r3
   23e6e:	4929      	ldr	r1, [pc, #164]	; (23f14 <nm_drv_deinit+0xcc>)
   23e70:	4b29      	ldr	r3, [pc, #164]	; (23f18 <nm_drv_deinit+0xd0>)
   23e72:	0018      	movs	r0, r3
   23e74:	4b29      	ldr	r3, [pc, #164]	; (23f1c <nm_drv_deinit+0xd4>)
   23e76:	4798      	blx	r3
   23e78:	4b29      	ldr	r3, [pc, #164]	; (23f20 <nm_drv_deinit+0xd8>)
   23e7a:	0018      	movs	r0, r3
   23e7c:	4b27      	ldr	r3, [pc, #156]	; (23f1c <nm_drv_deinit+0xd4>)
   23e7e:	4798      	blx	r3
   23e80:	4b28      	ldr	r3, [pc, #160]	; (23f24 <nm_drv_deinit+0xdc>)
   23e82:	0018      	movs	r0, r3
   23e84:	4b25      	ldr	r3, [pc, #148]	; (23f1c <nm_drv_deinit+0xd4>)
   23e86:	4798      	blx	r3
		goto ERR1;
   23e88:	e03a      	b.n	23f00 <nm_drv_deinit+0xb8>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
   23e8a:	230f      	movs	r3, #15
   23e8c:	18fc      	adds	r4, r7, r3
   23e8e:	2000      	movs	r0, #0
   23e90:	4b25      	ldr	r3, [pc, #148]	; (23f28 <nm_drv_deinit+0xe0>)
   23e92:	4798      	blx	r3
   23e94:	0003      	movs	r3, r0
   23e96:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23e98:	230f      	movs	r3, #15
   23e9a:	18fb      	adds	r3, r7, r3
   23e9c:	781b      	ldrb	r3, [r3, #0]
   23e9e:	b25b      	sxtb	r3, r3
   23ea0:	2b00      	cmp	r3, #0
   23ea2:	d00f      	beq.n	23ec4 <nm_drv_deinit+0x7c>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
   23ea4:	23b6      	movs	r3, #182	; 0xb6
   23ea6:	005a      	lsls	r2, r3, #1
   23ea8:	491a      	ldr	r1, [pc, #104]	; (23f14 <nm_drv_deinit+0xcc>)
   23eaa:	4b1b      	ldr	r3, [pc, #108]	; (23f18 <nm_drv_deinit+0xd0>)
   23eac:	0018      	movs	r0, r3
   23eae:	4b1b      	ldr	r3, [pc, #108]	; (23f1c <nm_drv_deinit+0xd4>)
   23eb0:	4798      	blx	r3
   23eb2:	4b1e      	ldr	r3, [pc, #120]	; (23f2c <nm_drv_deinit+0xe4>)
   23eb4:	0018      	movs	r0, r3
   23eb6:	4b19      	ldr	r3, [pc, #100]	; (23f1c <nm_drv_deinit+0xd4>)
   23eb8:	4798      	blx	r3
   23eba:	4b1a      	ldr	r3, [pc, #104]	; (23f24 <nm_drv_deinit+0xdc>)
   23ebc:	0018      	movs	r0, r3
   23ebe:	4b17      	ldr	r3, [pc, #92]	; (23f1c <nm_drv_deinit+0xd4>)
   23ec0:	4798      	blx	r3
		goto ERR1;
   23ec2:	e01d      	b.n	23f00 <nm_drv_deinit+0xb8>
	}

	ret = nm_bus_iface_deinit();
   23ec4:	230f      	movs	r3, #15
   23ec6:	18fc      	adds	r4, r7, r3
   23ec8:	4b19      	ldr	r3, [pc, #100]	; (23f30 <nm_drv_deinit+0xe8>)
   23eca:	4798      	blx	r3
   23ecc:	0003      	movs	r3, r0
   23ece:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23ed0:	230f      	movs	r3, #15
   23ed2:	18fb      	adds	r3, r7, r3
   23ed4:	781b      	ldrb	r3, [r3, #0]
   23ed6:	b25b      	sxtb	r3, r3
   23ed8:	2b00      	cmp	r3, #0
   23eda:	d00f      	beq.n	23efc <nm_drv_deinit+0xb4>
		M2M_ERR("[nmi stop]: fail init bus\n");
   23edc:	23b9      	movs	r3, #185	; 0xb9
   23ede:	005a      	lsls	r2, r3, #1
   23ee0:	490c      	ldr	r1, [pc, #48]	; (23f14 <nm_drv_deinit+0xcc>)
   23ee2:	4b0d      	ldr	r3, [pc, #52]	; (23f18 <nm_drv_deinit+0xd0>)
   23ee4:	0018      	movs	r0, r3
   23ee6:	4b0d      	ldr	r3, [pc, #52]	; (23f1c <nm_drv_deinit+0xd4>)
   23ee8:	4798      	blx	r3
   23eea:	4b12      	ldr	r3, [pc, #72]	; (23f34 <nm_drv_deinit+0xec>)
   23eec:	0018      	movs	r0, r3
   23eee:	4b0b      	ldr	r3, [pc, #44]	; (23f1c <nm_drv_deinit+0xd4>)
   23ef0:	4798      	blx	r3
   23ef2:	4b0c      	ldr	r3, [pc, #48]	; (23f24 <nm_drv_deinit+0xdc>)
   23ef4:	0018      	movs	r0, r3
   23ef6:	4b09      	ldr	r3, [pc, #36]	; (23f1c <nm_drv_deinit+0xd4>)
   23ef8:	4798      	blx	r3
		goto ERR1;
   23efa:	e001      	b.n	23f00 <nm_drv_deinit+0xb8>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
   23efc:	4b0e      	ldr	r3, [pc, #56]	; (23f38 <nm_drv_deinit+0xf0>)
   23efe:	4798      	blx	r3
#endif

ERR1:
	return ret;
   23f00:	230f      	movs	r3, #15
   23f02:	18fb      	adds	r3, r7, r3
   23f04:	781b      	ldrb	r3, [r3, #0]
   23f06:	b25b      	sxtb	r3, r3
}
   23f08:	0018      	movs	r0, r3
   23f0a:	46bd      	mov	sp, r7
   23f0c:	b005      	add	sp, #20
   23f0e:	bd90      	pop	{r4, r7, pc}
   23f10:	00023759 	.word	0x00023759
   23f14:	00039a08 	.word	0x00039a08
   23f18:	0003992c 	.word	0x0003992c
   23f1c:	0001ebc9 	.word	0x0001ebc9
   23f20:	0003999c 	.word	0x0003999c
   23f24:	0003995c 	.word	0x0003995c
   23f28:	00026b79 	.word	0x00026b79
   23f2c:	000399bc 	.word	0x000399bc
   23f30:	0002384d 	.word	0x0002384d
   23f34:	000399e0 	.word	0x000399e0
   23f38:	0002581d 	.word	0x0002581d

00023f3c <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
   23f3c:	b580      	push	{r7, lr}
   23f3e:	b086      	sub	sp, #24
   23f40:	af00      	add	r7, sp, #0
   23f42:	6078      	str	r0, [r7, #4]
   23f44:	000a      	movs	r2, r1
   23f46:	1cbb      	adds	r3, r7, #2
   23f48:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
   23f4a:	230c      	movs	r3, #12
   23f4c:	18fb      	adds	r3, r7, r3
   23f4e:	2200      	movs	r2, #0
   23f50:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
   23f52:	230c      	movs	r3, #12
   23f54:	18fb      	adds	r3, r7, r3
   23f56:	687a      	ldr	r2, [r7, #4]
   23f58:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   23f5a:	230c      	movs	r3, #12
   23f5c:	18fb      	adds	r3, r7, r3
   23f5e:	1cba      	adds	r2, r7, #2
   23f60:	8812      	ldrh	r2, [r2, #0]
   23f62:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   23f64:	230c      	movs	r3, #12
   23f66:	18fb      	adds	r3, r7, r3
   23f68:	0019      	movs	r1, r3
   23f6a:	2003      	movs	r0, #3
   23f6c:	4b03      	ldr	r3, [pc, #12]	; (23f7c <nmi_spi_read+0x40>)
   23f6e:	4798      	blx	r3
   23f70:	0003      	movs	r3, r0
}
   23f72:	0018      	movs	r0, r3
   23f74:	46bd      	mov	sp, r7
   23f76:	b006      	add	sp, #24
   23f78:	bd80      	pop	{r7, pc}
   23f7a:	46c0      	nop			; (mov r8, r8)
   23f7c:	000217c1 	.word	0x000217c1

00023f80 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
   23f80:	b580      	push	{r7, lr}
   23f82:	b086      	sub	sp, #24
   23f84:	af00      	add	r7, sp, #0
   23f86:	6078      	str	r0, [r7, #4]
   23f88:	000a      	movs	r2, r1
   23f8a:	1cbb      	adds	r3, r7, #2
   23f8c:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
   23f8e:	230c      	movs	r3, #12
   23f90:	18fb      	adds	r3, r7, r3
   23f92:	687a      	ldr	r2, [r7, #4]
   23f94:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
   23f96:	230c      	movs	r3, #12
   23f98:	18fb      	adds	r3, r7, r3
   23f9a:	2200      	movs	r2, #0
   23f9c:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   23f9e:	230c      	movs	r3, #12
   23fa0:	18fb      	adds	r3, r7, r3
   23fa2:	1cba      	adds	r2, r7, #2
   23fa4:	8812      	ldrh	r2, [r2, #0]
   23fa6:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   23fa8:	230c      	movs	r3, #12
   23faa:	18fb      	adds	r3, r7, r3
   23fac:	0019      	movs	r1, r3
   23fae:	2003      	movs	r0, #3
   23fb0:	4b03      	ldr	r3, [pc, #12]	; (23fc0 <nmi_spi_write+0x40>)
   23fb2:	4798      	blx	r3
   23fb4:	0003      	movs	r3, r0
}
   23fb6:	0018      	movs	r0, r3
   23fb8:	46bd      	mov	sp, r7
   23fba:	b006      	add	sp, #24
   23fbc:	bd80      	pop	{r7, pc}
   23fbe:	46c0      	nop			; (mov r8, r8)
   23fc0:	000217c1 	.word	0x000217c1

00023fc4 <nmi_spi_rw>:
#ifndef USE_OLD_SPI_SW
static sint8 nmi_spi_rw(uint8 *bin,uint8* bout,uint16 sz)
{
   23fc4:	b580      	push	{r7, lr}
   23fc6:	b088      	sub	sp, #32
   23fc8:	af00      	add	r7, sp, #0
   23fca:	60f8      	str	r0, [r7, #12]
   23fcc:	60b9      	str	r1, [r7, #8]
   23fce:	1dbb      	adds	r3, r7, #6
   23fd0:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = bin;
   23fd2:	2314      	movs	r3, #20
   23fd4:	18fb      	adds	r3, r7, r3
   23fd6:	68fa      	ldr	r2, [r7, #12]
   23fd8:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = bout;
   23fda:	2314      	movs	r3, #20
   23fdc:	18fb      	adds	r3, r7, r3
   23fde:	68ba      	ldr	r2, [r7, #8]
   23fe0:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   23fe2:	2314      	movs	r3, #20
   23fe4:	18fb      	adds	r3, r7, r3
   23fe6:	1dba      	adds	r2, r7, #6
   23fe8:	8812      	ldrh	r2, [r2, #0]
   23fea:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
   23fec:	2314      	movs	r3, #20
   23fee:	18fb      	adds	r3, r7, r3
   23ff0:	0019      	movs	r1, r3
   23ff2:	2003      	movs	r0, #3
   23ff4:	4b03      	ldr	r3, [pc, #12]	; (24004 <nmi_spi_rw+0x40>)
   23ff6:	4798      	blx	r3
   23ff8:	0003      	movs	r3, r0
}
   23ffa:	0018      	movs	r0, r3
   23ffc:	46bd      	mov	sp, r7
   23ffe:	b008      	add	sp, #32
   24000:	bd80      	pop	{r7, pc}
   24002:	46c0      	nop			; (mov r8, r8)
   24004:	000217c1 	.word	0x000217c1

00024008 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
   24008:	b580      	push	{r7, lr}
   2400a:	b082      	sub	sp, #8
   2400c:	af00      	add	r7, sp, #0
   2400e:	0002      	movs	r2, r0
   24010:	1dfb      	adds	r3, r7, #7
   24012:	701a      	strb	r2, [r3, #0]
   24014:	1dbb      	adds	r3, r7, #6
   24016:	1c0a      	adds	r2, r1, #0
   24018:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
   2401a:	1dfb      	adds	r3, r7, #7
   2401c:	781b      	ldrb	r3, [r3, #0]
   2401e:	005a      	lsls	r2, r3, #1
   24020:	1dbb      	adds	r3, r7, #6
   24022:	781b      	ldrb	r3, [r3, #0]
   24024:	4053      	eors	r3, r2
   24026:	4a03      	ldr	r2, [pc, #12]	; (24034 <crc7_byte+0x2c>)
   24028:	5cd3      	ldrb	r3, [r2, r3]
}
   2402a:	0018      	movs	r0, r3
   2402c:	46bd      	mov	sp, r7
   2402e:	b002      	add	sp, #8
   24030:	bd80      	pop	{r7, pc}
   24032:	46c0      	nop			; (mov r8, r8)
   24034:	00039a18 	.word	0x00039a18

00024038 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
   24038:	b590      	push	{r4, r7, lr}
   2403a:	b085      	sub	sp, #20
   2403c:	af00      	add	r7, sp, #0
   2403e:	60b9      	str	r1, [r7, #8]
   24040:	607a      	str	r2, [r7, #4]
   24042:	230f      	movs	r3, #15
   24044:	18fb      	adds	r3, r7, r3
   24046:	1c02      	adds	r2, r0, #0
   24048:	701a      	strb	r2, [r3, #0]
	while (len--)
   2404a:	e00e      	b.n	2406a <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
   2404c:	68bb      	ldr	r3, [r7, #8]
   2404e:	1c5a      	adds	r2, r3, #1
   24050:	60ba      	str	r2, [r7, #8]
   24052:	781a      	ldrb	r2, [r3, #0]
   24054:	230f      	movs	r3, #15
   24056:	18fc      	adds	r4, r7, r3
   24058:	230f      	movs	r3, #15
   2405a:	18fb      	adds	r3, r7, r3
   2405c:	781b      	ldrb	r3, [r3, #0]
   2405e:	0011      	movs	r1, r2
   24060:	0018      	movs	r0, r3
   24062:	4b08      	ldr	r3, [pc, #32]	; (24084 <crc7+0x4c>)
   24064:	4798      	blx	r3
   24066:	0003      	movs	r3, r0
   24068:	7023      	strb	r3, [r4, #0]
	while (len--)
   2406a:	687b      	ldr	r3, [r7, #4]
   2406c:	1e5a      	subs	r2, r3, #1
   2406e:	607a      	str	r2, [r7, #4]
   24070:	2b00      	cmp	r3, #0
   24072:	d1eb      	bne.n	2404c <crc7+0x14>
	return crc;
   24074:	230f      	movs	r3, #15
   24076:	18fb      	adds	r3, r7, r3
   24078:	781b      	ldrb	r3, [r3, #0]
}
   2407a:	0018      	movs	r0, r3
   2407c:	46bd      	mov	sp, r7
   2407e:	b005      	add	sp, #20
   24080:	bd90      	pop	{r4, r7, pc}
   24082:	46c0      	nop			; (mov r8, r8)
   24084:	00024009 	.word	0x00024009

00024088 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
   24088:	b590      	push	{r4, r7, lr}
   2408a:	b089      	sub	sp, #36	; 0x24
   2408c:	af00      	add	r7, sp, #0
   2408e:	60b9      	str	r1, [r7, #8]
   24090:	607a      	str	r2, [r7, #4]
   24092:	603b      	str	r3, [r7, #0]
   24094:	230f      	movs	r3, #15
   24096:	18fb      	adds	r3, r7, r3
   24098:	1c02      	adds	r2, r0, #0
   2409a:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
   2409c:	231f      	movs	r3, #31
   2409e:	18fb      	adds	r3, r7, r3
   240a0:	2205      	movs	r2, #5
   240a2:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   240a4:	231e      	movs	r3, #30
   240a6:	18fb      	adds	r3, r7, r3
   240a8:	2201      	movs	r2, #1
   240aa:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
   240ac:	2314      	movs	r3, #20
   240ae:	18fb      	adds	r3, r7, r3
   240b0:	220f      	movs	r2, #15
   240b2:	18ba      	adds	r2, r7, r2
   240b4:	7812      	ldrb	r2, [r2, #0]
   240b6:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   240b8:	230f      	movs	r3, #15
   240ba:	18fb      	adds	r3, r7, r3
   240bc:	781b      	ldrb	r3, [r3, #0]
   240be:	3bc1      	subs	r3, #193	; 0xc1
   240c0:	2b0e      	cmp	r3, #14
   240c2:	d900      	bls.n	240c6 <spi_cmd+0x3e>
   240c4:	e11b      	b.n	242fe <spi_cmd+0x276>
   240c6:	009a      	lsls	r2, r3, #2
   240c8:	4bb6      	ldr	r3, [pc, #728]	; (243a4 <spi_cmd+0x31c>)
   240ca:	18d3      	adds	r3, r2, r3
   240cc:	681b      	ldr	r3, [r3, #0]
   240ce:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
   240d0:	68bb      	ldr	r3, [r7, #8]
   240d2:	0c1b      	lsrs	r3, r3, #16
   240d4:	b2da      	uxtb	r2, r3
   240d6:	2314      	movs	r3, #20
   240d8:	18fb      	adds	r3, r7, r3
   240da:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   240dc:	68bb      	ldr	r3, [r7, #8]
   240de:	0a1b      	lsrs	r3, r3, #8
   240e0:	b2da      	uxtb	r2, r3
   240e2:	2314      	movs	r3, #20
   240e4:	18fb      	adds	r3, r7, r3
   240e6:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   240e8:	68bb      	ldr	r3, [r7, #8]
   240ea:	b2da      	uxtb	r2, r3
   240ec:	2314      	movs	r3, #20
   240ee:	18fb      	adds	r3, r7, r3
   240f0:	70da      	strb	r2, [r3, #3]
		len = 5;
   240f2:	231f      	movs	r3, #31
   240f4:	18fb      	adds	r3, r7, r3
   240f6:	2205      	movs	r2, #5
   240f8:	701a      	strb	r2, [r3, #0]
		break;
   240fa:	e105      	b.n	24308 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
   240fc:	68bb      	ldr	r3, [r7, #8]
   240fe:	0a1b      	lsrs	r3, r3, #8
   24100:	b2da      	uxtb	r2, r3
   24102:	2314      	movs	r3, #20
   24104:	18fb      	adds	r3, r7, r3
   24106:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   24108:	2330      	movs	r3, #48	; 0x30
   2410a:	18fb      	adds	r3, r7, r3
   2410c:	781b      	ldrb	r3, [r3, #0]
   2410e:	2b00      	cmp	r3, #0
   24110:	d009      	beq.n	24126 <spi_cmd+0x9e>
   24112:	2314      	movs	r3, #20
   24114:	18fb      	adds	r3, r7, r3
   24116:	785b      	ldrb	r3, [r3, #1]
   24118:	2280      	movs	r2, #128	; 0x80
   2411a:	4252      	negs	r2, r2
   2411c:	4313      	orrs	r3, r2
   2411e:	b2da      	uxtb	r2, r3
   24120:	2314      	movs	r3, #20
   24122:	18fb      	adds	r3, r7, r3
   24124:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
   24126:	68bb      	ldr	r3, [r7, #8]
   24128:	b2da      	uxtb	r2, r3
   2412a:	2314      	movs	r3, #20
   2412c:	18fb      	adds	r3, r7, r3
   2412e:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   24130:	2314      	movs	r3, #20
   24132:	18fb      	adds	r3, r7, r3
   24134:	2200      	movs	r2, #0
   24136:	70da      	strb	r2, [r3, #3]
		len = 5;
   24138:	231f      	movs	r3, #31
   2413a:	18fb      	adds	r3, r7, r3
   2413c:	2205      	movs	r2, #5
   2413e:	701a      	strb	r2, [r3, #0]
		break;
   24140:	e0e2      	b.n	24308 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
   24142:	2314      	movs	r3, #20
   24144:	18fb      	adds	r3, r7, r3
   24146:	2200      	movs	r2, #0
   24148:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   2414a:	2314      	movs	r3, #20
   2414c:	18fb      	adds	r3, r7, r3
   2414e:	2200      	movs	r2, #0
   24150:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   24152:	2314      	movs	r3, #20
   24154:	18fb      	adds	r3, r7, r3
   24156:	2200      	movs	r2, #0
   24158:	70da      	strb	r2, [r3, #3]
		len = 5;
   2415a:	231f      	movs	r3, #31
   2415c:	18fb      	adds	r3, r7, r3
   2415e:	2205      	movs	r2, #5
   24160:	701a      	strb	r2, [r3, #0]
		break;
   24162:	e0d1      	b.n	24308 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
   24164:	2314      	movs	r3, #20
   24166:	18fb      	adds	r3, r7, r3
   24168:	2200      	movs	r2, #0
   2416a:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   2416c:	2314      	movs	r3, #20
   2416e:	18fb      	adds	r3, r7, r3
   24170:	2200      	movs	r2, #0
   24172:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   24174:	2314      	movs	r3, #20
   24176:	18fb      	adds	r3, r7, r3
   24178:	2200      	movs	r2, #0
   2417a:	70da      	strb	r2, [r3, #3]
		len = 5;
   2417c:	231f      	movs	r3, #31
   2417e:	18fb      	adds	r3, r7, r3
   24180:	2205      	movs	r2, #5
   24182:	701a      	strb	r2, [r3, #0]
		break;
   24184:	e0c0      	b.n	24308 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
   24186:	2314      	movs	r3, #20
   24188:	18fb      	adds	r3, r7, r3
   2418a:	22ff      	movs	r2, #255	; 0xff
   2418c:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
   2418e:	2314      	movs	r3, #20
   24190:	18fb      	adds	r3, r7, r3
   24192:	22ff      	movs	r2, #255	; 0xff
   24194:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
   24196:	2314      	movs	r3, #20
   24198:	18fb      	adds	r3, r7, r3
   2419a:	22ff      	movs	r2, #255	; 0xff
   2419c:	70da      	strb	r2, [r3, #3]
		len = 5;
   2419e:	231f      	movs	r3, #31
   241a0:	18fb      	adds	r3, r7, r3
   241a2:	2205      	movs	r2, #5
   241a4:	701a      	strb	r2, [r3, #0]
		break;
   241a6:	e0af      	b.n	24308 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
   241a8:	68bb      	ldr	r3, [r7, #8]
   241aa:	0c1b      	lsrs	r3, r3, #16
   241ac:	b2da      	uxtb	r2, r3
   241ae:	2314      	movs	r3, #20
   241b0:	18fb      	adds	r3, r7, r3
   241b2:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   241b4:	68bb      	ldr	r3, [r7, #8]
   241b6:	0a1b      	lsrs	r3, r3, #8
   241b8:	b2da      	uxtb	r2, r3
   241ba:	2314      	movs	r3, #20
   241bc:	18fb      	adds	r3, r7, r3
   241be:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   241c0:	68bb      	ldr	r3, [r7, #8]
   241c2:	b2da      	uxtb	r2, r3
   241c4:	2314      	movs	r3, #20
   241c6:	18fb      	adds	r3, r7, r3
   241c8:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
   241ca:	683b      	ldr	r3, [r7, #0]
   241cc:	0a1b      	lsrs	r3, r3, #8
   241ce:	b2da      	uxtb	r2, r3
   241d0:	2314      	movs	r3, #20
   241d2:	18fb      	adds	r3, r7, r3
   241d4:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
   241d6:	683b      	ldr	r3, [r7, #0]
   241d8:	b2da      	uxtb	r2, r3
   241da:	2314      	movs	r3, #20
   241dc:	18fb      	adds	r3, r7, r3
   241de:	715a      	strb	r2, [r3, #5]
		len = 7;
   241e0:	231f      	movs	r3, #31
   241e2:	18fb      	adds	r3, r7, r3
   241e4:	2207      	movs	r2, #7
   241e6:	701a      	strb	r2, [r3, #0]
		break;
   241e8:	e08e      	b.n	24308 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
   241ea:	68bb      	ldr	r3, [r7, #8]
   241ec:	0c1b      	lsrs	r3, r3, #16
   241ee:	b2da      	uxtb	r2, r3
   241f0:	2314      	movs	r3, #20
   241f2:	18fb      	adds	r3, r7, r3
   241f4:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   241f6:	68bb      	ldr	r3, [r7, #8]
   241f8:	0a1b      	lsrs	r3, r3, #8
   241fa:	b2da      	uxtb	r2, r3
   241fc:	2314      	movs	r3, #20
   241fe:	18fb      	adds	r3, r7, r3
   24200:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   24202:	68bb      	ldr	r3, [r7, #8]
   24204:	b2da      	uxtb	r2, r3
   24206:	2314      	movs	r3, #20
   24208:	18fb      	adds	r3, r7, r3
   2420a:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
   2420c:	683b      	ldr	r3, [r7, #0]
   2420e:	0c1b      	lsrs	r3, r3, #16
   24210:	b2da      	uxtb	r2, r3
   24212:	2314      	movs	r3, #20
   24214:	18fb      	adds	r3, r7, r3
   24216:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
   24218:	683b      	ldr	r3, [r7, #0]
   2421a:	0a1b      	lsrs	r3, r3, #8
   2421c:	b2da      	uxtb	r2, r3
   2421e:	2314      	movs	r3, #20
   24220:	18fb      	adds	r3, r7, r3
   24222:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
   24224:	683b      	ldr	r3, [r7, #0]
   24226:	b2da      	uxtb	r2, r3
   24228:	2314      	movs	r3, #20
   2422a:	18fb      	adds	r3, r7, r3
   2422c:	719a      	strb	r2, [r3, #6]
		len = 8;
   2422e:	231f      	movs	r3, #31
   24230:	18fb      	adds	r3, r7, r3
   24232:	2208      	movs	r2, #8
   24234:	701a      	strb	r2, [r3, #0]
		break;
   24236:	e067      	b.n	24308 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
   24238:	68bb      	ldr	r3, [r7, #8]
   2423a:	0a1b      	lsrs	r3, r3, #8
   2423c:	b2da      	uxtb	r2, r3
   2423e:	2314      	movs	r3, #20
   24240:	18fb      	adds	r3, r7, r3
   24242:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   24244:	2330      	movs	r3, #48	; 0x30
   24246:	18fb      	adds	r3, r7, r3
   24248:	781b      	ldrb	r3, [r3, #0]
   2424a:	2b00      	cmp	r3, #0
   2424c:	d009      	beq.n	24262 <spi_cmd+0x1da>
   2424e:	2314      	movs	r3, #20
   24250:	18fb      	adds	r3, r7, r3
   24252:	785b      	ldrb	r3, [r3, #1]
   24254:	2280      	movs	r2, #128	; 0x80
   24256:	4252      	negs	r2, r2
   24258:	4313      	orrs	r3, r2
   2425a:	b2da      	uxtb	r2, r3
   2425c:	2314      	movs	r3, #20
   2425e:	18fb      	adds	r3, r7, r3
   24260:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
   24262:	68bb      	ldr	r3, [r7, #8]
   24264:	b2da      	uxtb	r2, r3
   24266:	2314      	movs	r3, #20
   24268:	18fb      	adds	r3, r7, r3
   2426a:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
   2426c:	687b      	ldr	r3, [r7, #4]
   2426e:	0e1b      	lsrs	r3, r3, #24
   24270:	b2da      	uxtb	r2, r3
   24272:	2314      	movs	r3, #20
   24274:	18fb      	adds	r3, r7, r3
   24276:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
   24278:	687b      	ldr	r3, [r7, #4]
   2427a:	0c1b      	lsrs	r3, r3, #16
   2427c:	b2da      	uxtb	r2, r3
   2427e:	2314      	movs	r3, #20
   24280:	18fb      	adds	r3, r7, r3
   24282:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
   24284:	687b      	ldr	r3, [r7, #4]
   24286:	0a1b      	lsrs	r3, r3, #8
   24288:	b2da      	uxtb	r2, r3
   2428a:	2314      	movs	r3, #20
   2428c:	18fb      	adds	r3, r7, r3
   2428e:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
   24290:	687b      	ldr	r3, [r7, #4]
   24292:	b2da      	uxtb	r2, r3
   24294:	2314      	movs	r3, #20
   24296:	18fb      	adds	r3, r7, r3
   24298:	719a      	strb	r2, [r3, #6]
		len = 8;
   2429a:	231f      	movs	r3, #31
   2429c:	18fb      	adds	r3, r7, r3
   2429e:	2208      	movs	r2, #8
   242a0:	701a      	strb	r2, [r3, #0]
		break;
   242a2:	e031      	b.n	24308 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
   242a4:	68bb      	ldr	r3, [r7, #8]
   242a6:	0c1b      	lsrs	r3, r3, #16
   242a8:	b2da      	uxtb	r2, r3
   242aa:	2314      	movs	r3, #20
   242ac:	18fb      	adds	r3, r7, r3
   242ae:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   242b0:	68bb      	ldr	r3, [r7, #8]
   242b2:	0a1b      	lsrs	r3, r3, #8
   242b4:	b2da      	uxtb	r2, r3
   242b6:	2314      	movs	r3, #20
   242b8:	18fb      	adds	r3, r7, r3
   242ba:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
   242bc:	68bb      	ldr	r3, [r7, #8]
   242be:	b2da      	uxtb	r2, r3
   242c0:	2314      	movs	r3, #20
   242c2:	18fb      	adds	r3, r7, r3
   242c4:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
   242c6:	687b      	ldr	r3, [r7, #4]
   242c8:	0e1b      	lsrs	r3, r3, #24
   242ca:	b2da      	uxtb	r2, r3
   242cc:	2314      	movs	r3, #20
   242ce:	18fb      	adds	r3, r7, r3
   242d0:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
   242d2:	687b      	ldr	r3, [r7, #4]
   242d4:	0c1b      	lsrs	r3, r3, #16
   242d6:	b2da      	uxtb	r2, r3
   242d8:	2314      	movs	r3, #20
   242da:	18fb      	adds	r3, r7, r3
   242dc:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
   242de:	687b      	ldr	r3, [r7, #4]
   242e0:	0a1b      	lsrs	r3, r3, #8
   242e2:	b2da      	uxtb	r2, r3
   242e4:	2314      	movs	r3, #20
   242e6:	18fb      	adds	r3, r7, r3
   242e8:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
   242ea:	687b      	ldr	r3, [r7, #4]
   242ec:	b2da      	uxtb	r2, r3
   242ee:	2314      	movs	r3, #20
   242f0:	18fb      	adds	r3, r7, r3
   242f2:	71da      	strb	r2, [r3, #7]
		len = 9;
   242f4:	231f      	movs	r3, #31
   242f6:	18fb      	adds	r3, r7, r3
   242f8:	2209      	movs	r2, #9
   242fa:	701a      	strb	r2, [r3, #0]
		break;
   242fc:	e004      	b.n	24308 <spi_cmd+0x280>
	default:
		result = N_FAIL;
   242fe:	231e      	movs	r3, #30
   24300:	18fb      	adds	r3, r7, r3
   24302:	2200      	movs	r2, #0
   24304:	701a      	strb	r2, [r3, #0]
		break;
   24306:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
   24308:	231e      	movs	r3, #30
   2430a:	18fb      	adds	r3, r7, r3
   2430c:	781b      	ldrb	r3, [r3, #0]
   2430e:	b25b      	sxtb	r3, r3
   24310:	2b00      	cmp	r3, #0
   24312:	d03f      	beq.n	24394 <spi_cmd+0x30c>
		if (!gu8Crc_off)
   24314:	4b24      	ldr	r3, [pc, #144]	; (243a8 <spi_cmd+0x320>)
   24316:	781b      	ldrb	r3, [r3, #0]
   24318:	2b00      	cmp	r3, #0
   2431a:	d115      	bne.n	24348 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   2431c:	231f      	movs	r3, #31
   2431e:	18fb      	adds	r3, r7, r3
   24320:	781b      	ldrb	r3, [r3, #0]
   24322:	1e5c      	subs	r4, r3, #1
   24324:	231f      	movs	r3, #31
   24326:	18fb      	adds	r3, r7, r3
   24328:	781b      	ldrb	r3, [r3, #0]
   2432a:	3b01      	subs	r3, #1
   2432c:	001a      	movs	r2, r3
   2432e:	2314      	movs	r3, #20
   24330:	18fb      	adds	r3, r7, r3
   24332:	0019      	movs	r1, r3
   24334:	207f      	movs	r0, #127	; 0x7f
   24336:	4b1d      	ldr	r3, [pc, #116]	; (243ac <spi_cmd+0x324>)
   24338:	4798      	blx	r3
   2433a:	0003      	movs	r3, r0
   2433c:	18db      	adds	r3, r3, r3
   2433e:	b2da      	uxtb	r2, r3
   24340:	2314      	movs	r3, #20
   24342:	18fb      	adds	r3, r7, r3
   24344:	551a      	strb	r2, [r3, r4]
   24346:	e006      	b.n	24356 <spi_cmd+0x2ce>
		else
			len-=1;
   24348:	231f      	movs	r3, #31
   2434a:	18fb      	adds	r3, r7, r3
   2434c:	221f      	movs	r2, #31
   2434e:	18ba      	adds	r2, r7, r2
   24350:	7812      	ldrb	r2, [r2, #0]
   24352:	3a01      	subs	r2, #1
   24354:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
   24356:	231f      	movs	r3, #31
   24358:	18fb      	adds	r3, r7, r3
   2435a:	781b      	ldrb	r3, [r3, #0]
   2435c:	b29a      	uxth	r2, r3
   2435e:	2314      	movs	r3, #20
   24360:	18fb      	adds	r3, r7, r3
   24362:	0011      	movs	r1, r2
   24364:	0018      	movs	r0, r3
   24366:	4b12      	ldr	r3, [pc, #72]	; (243b0 <spi_cmd+0x328>)
   24368:	4798      	blx	r3
   2436a:	1e03      	subs	r3, r0, #0
   2436c:	d012      	beq.n	24394 <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   2436e:	2390      	movs	r3, #144	; 0x90
   24370:	005a      	lsls	r2, r3, #1
   24372:	4910      	ldr	r1, [pc, #64]	; (243b4 <spi_cmd+0x32c>)
   24374:	4b10      	ldr	r3, [pc, #64]	; (243b8 <spi_cmd+0x330>)
   24376:	0018      	movs	r0, r3
   24378:	4b10      	ldr	r3, [pc, #64]	; (243bc <spi_cmd+0x334>)
   2437a:	4798      	blx	r3
   2437c:	4b10      	ldr	r3, [pc, #64]	; (243c0 <spi_cmd+0x338>)
   2437e:	0018      	movs	r0, r3
   24380:	4b0e      	ldr	r3, [pc, #56]	; (243bc <spi_cmd+0x334>)
   24382:	4798      	blx	r3
   24384:	4b0f      	ldr	r3, [pc, #60]	; (243c4 <spi_cmd+0x33c>)
   24386:	0018      	movs	r0, r3
   24388:	4b0c      	ldr	r3, [pc, #48]	; (243bc <spi_cmd+0x334>)
   2438a:	4798      	blx	r3
			result = N_FAIL;
   2438c:	231e      	movs	r3, #30
   2438e:	18fb      	adds	r3, r7, r3
   24390:	2200      	movs	r2, #0
   24392:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
   24394:	231e      	movs	r3, #30
   24396:	18fb      	adds	r3, r7, r3
   24398:	781b      	ldrb	r3, [r3, #0]
   2439a:	b25b      	sxtb	r3, r3
}
   2439c:	0018      	movs	r0, r3
   2439e:	46bd      	mov	sp, r7
   243a0:	b009      	add	sp, #36	; 0x24
   243a2:	bd90      	pop	{r4, r7, pc}
   243a4:	0003a090 	.word	0x0003a090
   243a8:	200042b0 	.word	0x200042b0
   243ac:	00024039 	.word	0x00024039
   243b0:	00023f81 	.word	0x00023f81
   243b4:	0003a108 	.word	0x0003a108
   243b8:	00039b18 	.word	0x00039b18
   243bc:	0001ebc9 	.word	0x0001ebc9
   243c0:	00039b2c 	.word	0x00039b2c
   243c4:	00039b58 	.word	0x00039b58

000243c8 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
   243c8:	b590      	push	{r4, r7, lr}
   243ca:	b085      	sub	sp, #20
   243cc:	af00      	add	r7, sp, #0
   243ce:	0002      	movs	r2, r0
   243d0:	1dfb      	adds	r3, r7, #7
   243d2:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
   243d4:	230e      	movs	r3, #14
   243d6:	18fb      	adds	r3, r7, r3
   243d8:	2201      	movs	r2, #1
   243da:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
   243dc:	4b32      	ldr	r3, [pc, #200]	; (244a8 <spi_data_rsp+0xe0>)
   243de:	781b      	ldrb	r3, [r3, #0]
   243e0:	2b00      	cmp	r3, #0
   243e2:	d104      	bne.n	243ee <spi_data_rsp+0x26>
		len = 2;
   243e4:	230f      	movs	r3, #15
   243e6:	18fb      	adds	r3, r7, r3
   243e8:	2202      	movs	r2, #2
   243ea:	701a      	strb	r2, [r3, #0]
   243ec:	e003      	b.n	243f6 <spi_data_rsp+0x2e>
	else
		len = 3;
   243ee:	230f      	movs	r3, #15
   243f0:	18fb      	adds	r3, r7, r3
   243f2:	2203      	movs	r2, #3
   243f4:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
   243f6:	230f      	movs	r3, #15
   243f8:	18fb      	adds	r3, r7, r3
   243fa:	781b      	ldrb	r3, [r3, #0]
   243fc:	b29a      	uxth	r2, r3
   243fe:	2308      	movs	r3, #8
   24400:	18fb      	adds	r3, r7, r3
   24402:	0011      	movs	r1, r2
   24404:	0018      	movs	r0, r3
   24406:	4b29      	ldr	r3, [pc, #164]	; (244ac <spi_data_rsp+0xe4>)
   24408:	4798      	blx	r3
   2440a:	1e03      	subs	r3, r0, #0
   2440c:	d013      	beq.n	24436 <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
   2440e:	239a      	movs	r3, #154	; 0x9a
   24410:	005a      	lsls	r2, r3, #1
   24412:	4927      	ldr	r1, [pc, #156]	; (244b0 <spi_data_rsp+0xe8>)
   24414:	4b27      	ldr	r3, [pc, #156]	; (244b4 <spi_data_rsp+0xec>)
   24416:	0018      	movs	r0, r3
   24418:	4b27      	ldr	r3, [pc, #156]	; (244b8 <spi_data_rsp+0xf0>)
   2441a:	4798      	blx	r3
   2441c:	4b27      	ldr	r3, [pc, #156]	; (244bc <spi_data_rsp+0xf4>)
   2441e:	0018      	movs	r0, r3
   24420:	4b25      	ldr	r3, [pc, #148]	; (244b8 <spi_data_rsp+0xf0>)
   24422:	4798      	blx	r3
   24424:	4b26      	ldr	r3, [pc, #152]	; (244c0 <spi_data_rsp+0xf8>)
   24426:	0018      	movs	r0, r3
   24428:	4b23      	ldr	r3, [pc, #140]	; (244b8 <spi_data_rsp+0xf0>)
   2442a:	4798      	blx	r3
		result = N_FAIL;
   2442c:	230e      	movs	r3, #14
   2442e:	18fb      	adds	r3, r7, r3
   24430:	2200      	movs	r2, #0
   24432:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   24434:	e030      	b.n	24498 <spi_data_rsp+0xd0>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
   24436:	230f      	movs	r3, #15
   24438:	18fb      	adds	r3, r7, r3
   2443a:	781b      	ldrb	r3, [r3, #0]
   2443c:	3b01      	subs	r3, #1
   2443e:	2208      	movs	r2, #8
   24440:	18ba      	adds	r2, r7, r2
   24442:	5cd3      	ldrb	r3, [r2, r3]
   24444:	2b00      	cmp	r3, #0
   24446:	d108      	bne.n	2445a <spi_data_rsp+0x92>
   24448:	230f      	movs	r3, #15
   2444a:	18fb      	adds	r3, r7, r3
   2444c:	781b      	ldrb	r3, [r3, #0]
   2444e:	3b02      	subs	r3, #2
   24450:	2208      	movs	r2, #8
   24452:	18ba      	adds	r2, r7, r2
   24454:	5cd3      	ldrb	r3, [r2, r3]
   24456:	2bc3      	cmp	r3, #195	; 0xc3
   24458:	d01e      	beq.n	24498 <spi_data_rsp+0xd0>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
   2445a:	233c      	movs	r3, #60	; 0x3c
   2445c:	33ff      	adds	r3, #255	; 0xff
   2445e:	001a      	movs	r2, r3
   24460:	4913      	ldr	r1, [pc, #76]	; (244b0 <spi_data_rsp+0xe8>)
   24462:	4b14      	ldr	r3, [pc, #80]	; (244b4 <spi_data_rsp+0xec>)
   24464:	0018      	movs	r0, r3
   24466:	4b14      	ldr	r3, [pc, #80]	; (244b8 <spi_data_rsp+0xf0>)
   24468:	4798      	blx	r3
   2446a:	2308      	movs	r3, #8
   2446c:	18fb      	adds	r3, r7, r3
   2446e:	781b      	ldrb	r3, [r3, #0]
   24470:	0019      	movs	r1, r3
   24472:	2308      	movs	r3, #8
   24474:	18fb      	adds	r3, r7, r3
   24476:	785b      	ldrb	r3, [r3, #1]
   24478:	001a      	movs	r2, r3
   2447a:	2308      	movs	r3, #8
   2447c:	18fb      	adds	r3, r7, r3
   2447e:	789b      	ldrb	r3, [r3, #2]
   24480:	4810      	ldr	r0, [pc, #64]	; (244c4 <spi_data_rsp+0xfc>)
   24482:	4c0d      	ldr	r4, [pc, #52]	; (244b8 <spi_data_rsp+0xf0>)
   24484:	47a0      	blx	r4
   24486:	4b0e      	ldr	r3, [pc, #56]	; (244c0 <spi_data_rsp+0xf8>)
   24488:	0018      	movs	r0, r3
   2448a:	4b0b      	ldr	r3, [pc, #44]	; (244b8 <spi_data_rsp+0xf0>)
   2448c:	4798      	blx	r3
		result = N_FAIL;
   2448e:	230e      	movs	r3, #14
   24490:	18fb      	adds	r3, r7, r3
   24492:	2200      	movs	r2, #0
   24494:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   24496:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
   24498:	230e      	movs	r3, #14
   2449a:	18fb      	adds	r3, r7, r3
   2449c:	781b      	ldrb	r3, [r3, #0]
   2449e:	b25b      	sxtb	r3, r3
}
   244a0:	0018      	movs	r0, r3
   244a2:	46bd      	mov	sp, r7
   244a4:	b005      	add	sp, #20
   244a6:	bd90      	pop	{r4, r7, pc}
   244a8:	200042b0 	.word	0x200042b0
   244ac:	00023f3d 	.word	0x00023f3d
   244b0:	0003a110 	.word	0x0003a110
   244b4:	00039b18 	.word	0x00039b18
   244b8:	0001ebc9 	.word	0x0001ebc9
   244bc:	00039b5c 	.word	0x00039b5c
   244c0:	00039b58 	.word	0x00039b58
   244c4:	00039b7c 	.word	0x00039b7c

000244c8 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
   244c8:	b580      	push	{r7, lr}
   244ca:	b084      	sub	sp, #16
   244cc:	af00      	add	r7, sp, #0
   244ce:	0002      	movs	r2, r0
   244d0:	1dfb      	adds	r3, r7, #7
   244d2:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
   244d4:	230f      	movs	r3, #15
   244d6:	18fb      	adds	r3, r7, r3
   244d8:	2201      	movs	r2, #1
   244da:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   244dc:	1dfb      	adds	r3, r7, #7
   244de:	781b      	ldrb	r3, [r3, #0]
   244e0:	2bcf      	cmp	r3, #207	; 0xcf
   244e2:	d007      	beq.n	244f4 <spi_cmd_rsp+0x2c>
   244e4:	1dfb      	adds	r3, r7, #7
   244e6:	781b      	ldrb	r3, [r3, #0]
   244e8:	2bc5      	cmp	r3, #197	; 0xc5
   244ea:	d003      	beq.n	244f4 <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
   244ec:	1dfb      	adds	r3, r7, #7
   244ee:	781b      	ldrb	r3, [r3, #0]
   244f0:	2bc6      	cmp	r3, #198	; 0xc6
   244f2:	d10c      	bne.n	2450e <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   244f4:	230d      	movs	r3, #13
   244f6:	18fb      	adds	r3, r7, r3
   244f8:	2101      	movs	r1, #1
   244fa:	0018      	movs	r0, r3
   244fc:	4b3b      	ldr	r3, [pc, #236]	; (245ec <spi_cmd_rsp+0x124>)
   244fe:	4798      	blx	r3
   24500:	1e03      	subs	r3, r0, #0
   24502:	d004      	beq.n	2450e <spi_cmd_rsp+0x46>
			result = N_FAIL;
   24504:	230f      	movs	r3, #15
   24506:	18fb      	adds	r3, r7, r3
   24508:	2200      	movs	r2, #0
   2450a:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   2450c:	e065      	b.n	245da <spi_cmd_rsp+0x112>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   2450e:	230e      	movs	r3, #14
   24510:	18fb      	adds	r3, r7, r3
   24512:	220a      	movs	r2, #10
   24514:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   24516:	230d      	movs	r3, #13
   24518:	18fb      	adds	r3, r7, r3
   2451a:	2101      	movs	r1, #1
   2451c:	0018      	movs	r0, r3
   2451e:	4b33      	ldr	r3, [pc, #204]	; (245ec <spi_cmd_rsp+0x124>)
   24520:	4798      	blx	r3
   24522:	1e03      	subs	r3, r0, #0
   24524:	d014      	beq.n	24550 <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   24526:	235c      	movs	r3, #92	; 0x5c
   24528:	33ff      	adds	r3, #255	; 0xff
   2452a:	001a      	movs	r2, r3
   2452c:	4930      	ldr	r1, [pc, #192]	; (245f0 <spi_cmd_rsp+0x128>)
   2452e:	4b31      	ldr	r3, [pc, #196]	; (245f4 <spi_cmd_rsp+0x12c>)
   24530:	0018      	movs	r0, r3
   24532:	4b31      	ldr	r3, [pc, #196]	; (245f8 <spi_cmd_rsp+0x130>)
   24534:	4798      	blx	r3
   24536:	4b31      	ldr	r3, [pc, #196]	; (245fc <spi_cmd_rsp+0x134>)
   24538:	0018      	movs	r0, r3
   2453a:	4b2f      	ldr	r3, [pc, #188]	; (245f8 <spi_cmd_rsp+0x130>)
   2453c:	4798      	blx	r3
   2453e:	4b30      	ldr	r3, [pc, #192]	; (24600 <spi_cmd_rsp+0x138>)
   24540:	0018      	movs	r0, r3
   24542:	4b2d      	ldr	r3, [pc, #180]	; (245f8 <spi_cmd_rsp+0x130>)
   24544:	4798      	blx	r3
			result = N_FAIL;
   24546:	230f      	movs	r3, #15
   24548:	18fb      	adds	r3, r7, r3
   2454a:	2200      	movs	r2, #0
   2454c:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   2454e:	e044      	b.n	245da <spi_cmd_rsp+0x112>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
   24550:	230d      	movs	r3, #13
   24552:	18fb      	adds	r3, r7, r3
   24554:	781b      	ldrb	r3, [r3, #0]
   24556:	1dfa      	adds	r2, r7, #7
   24558:	7812      	ldrb	r2, [r2, #0]
   2455a:	429a      	cmp	r2, r3
   2455c:	d00b      	beq.n	24576 <spi_cmd_rsp+0xae>
   2455e:	230e      	movs	r3, #14
   24560:	18fb      	adds	r3, r7, r3
   24562:	781b      	ldrb	r3, [r3, #0]
   24564:	b25b      	sxtb	r3, r3
   24566:	b2da      	uxtb	r2, r3
   24568:	3a01      	subs	r2, #1
   2456a:	b2d1      	uxtb	r1, r2
   2456c:	220e      	movs	r2, #14
   2456e:	18ba      	adds	r2, r7, r2
   24570:	7011      	strb	r1, [r2, #0]
   24572:	2b00      	cmp	r3, #0
   24574:	dccf      	bgt.n	24516 <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   24576:	230e      	movs	r3, #14
   24578:	18fb      	adds	r3, r7, r3
   2457a:	220a      	movs	r2, #10
   2457c:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   2457e:	230d      	movs	r3, #13
   24580:	18fb      	adds	r3, r7, r3
   24582:	2101      	movs	r1, #1
   24584:	0018      	movs	r0, r3
   24586:	4b19      	ldr	r3, [pc, #100]	; (245ec <spi_cmd_rsp+0x124>)
   24588:	4798      	blx	r3
   2458a:	1e03      	subs	r3, r0, #0
   2458c:	d014      	beq.n	245b8 <spi_cmd_rsp+0xf0>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   2458e:	236a      	movs	r3, #106	; 0x6a
   24590:	33ff      	adds	r3, #255	; 0xff
   24592:	001a      	movs	r2, r3
   24594:	4916      	ldr	r1, [pc, #88]	; (245f0 <spi_cmd_rsp+0x128>)
   24596:	4b17      	ldr	r3, [pc, #92]	; (245f4 <spi_cmd_rsp+0x12c>)
   24598:	0018      	movs	r0, r3
   2459a:	4b17      	ldr	r3, [pc, #92]	; (245f8 <spi_cmd_rsp+0x130>)
   2459c:	4798      	blx	r3
   2459e:	4b17      	ldr	r3, [pc, #92]	; (245fc <spi_cmd_rsp+0x134>)
   245a0:	0018      	movs	r0, r3
   245a2:	4b15      	ldr	r3, [pc, #84]	; (245f8 <spi_cmd_rsp+0x130>)
   245a4:	4798      	blx	r3
   245a6:	4b16      	ldr	r3, [pc, #88]	; (24600 <spi_cmd_rsp+0x138>)
   245a8:	0018      	movs	r0, r3
   245aa:	4b13      	ldr	r3, [pc, #76]	; (245f8 <spi_cmd_rsp+0x130>)
   245ac:	4798      	blx	r3
			result = N_FAIL;
   245ae:	230f      	movs	r3, #15
   245b0:	18fb      	adds	r3, r7, r3
   245b2:	2200      	movs	r2, #0
   245b4:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   245b6:	e010      	b.n	245da <spi_cmd_rsp+0x112>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
   245b8:	230d      	movs	r3, #13
   245ba:	18fb      	adds	r3, r7, r3
   245bc:	781b      	ldrb	r3, [r3, #0]
   245be:	2b00      	cmp	r3, #0
   245c0:	d00b      	beq.n	245da <spi_cmd_rsp+0x112>
   245c2:	230e      	movs	r3, #14
   245c4:	18fb      	adds	r3, r7, r3
   245c6:	781b      	ldrb	r3, [r3, #0]
   245c8:	b25b      	sxtb	r3, r3
   245ca:	b2da      	uxtb	r2, r3
   245cc:	3a01      	subs	r2, #1
   245ce:	b2d1      	uxtb	r1, r2
   245d0:	220e      	movs	r2, #14
   245d2:	18ba      	adds	r2, r7, r2
   245d4:	7011      	strb	r1, [r2, #0]
   245d6:	2b00      	cmp	r3, #0
   245d8:	dcd1      	bgt.n	2457e <spi_cmd_rsp+0xb6>

_fail_:

	return result;
   245da:	230f      	movs	r3, #15
   245dc:	18fb      	adds	r3, r7, r3
   245de:	781b      	ldrb	r3, [r3, #0]
   245e0:	b25b      	sxtb	r3, r3
}
   245e2:	0018      	movs	r0, r3
   245e4:	46bd      	mov	sp, r7
   245e6:	b004      	add	sp, #16
   245e8:	bd80      	pop	{r7, pc}
   245ea:	46c0      	nop			; (mov r8, r8)
   245ec:	00023f3d 	.word	0x00023f3d
   245f0:	0003a120 	.word	0x0003a120
   245f4:	00039b18 	.word	0x00039b18
   245f8:	0001ebc9 	.word	0x0001ebc9
   245fc:	00039bac 	.word	0x00039bac
   24600:	00039b58 	.word	0x00039b58

00024604 <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
   24604:	b590      	push	{r4, r7, lr}
   24606:	b09f      	sub	sp, #124	; 0x7c
   24608:	af00      	add	r7, sp, #0
   2460a:	60b9      	str	r1, [r7, #8]
   2460c:	607a      	str	r2, [r7, #4]
   2460e:	603b      	str	r3, [r7, #0]
   24610:	230f      	movs	r3, #15
   24612:	18fb      	adds	r3, r7, r3
   24614:	1c02      	adds	r2, r0, #0
   24616:	701a      	strb	r2, [r3, #0]
	uint8_t wb[32], rb[32];
	uint8_t wix, rix;
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
   24618:	2300      	movs	r3, #0
   2461a:	66fb      	str	r3, [r7, #108]	; 0x6c
	int result = N_OK;
   2461c:	2301      	movs	r3, #1
   2461e:	66bb      	str	r3, [r7, #104]	; 0x68

	wb[0] = cmd;
   24620:	2338      	movs	r3, #56	; 0x38
   24622:	18fb      	adds	r3, r7, r3
   24624:	220f      	movs	r2, #15
   24626:	18ba      	adds	r2, r7, r2
   24628:	7812      	ldrb	r2, [r2, #0]
   2462a:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   2462c:	230f      	movs	r3, #15
   2462e:	18fb      	adds	r3, r7, r3
   24630:	781b      	ldrb	r3, [r3, #0]
   24632:	3bc1      	subs	r3, #193	; 0xc1
   24634:	2b0e      	cmp	r3, #14
   24636:	d900      	bls.n	2463a <spi_cmd_complete+0x36>
   24638:	e103      	b.n	24842 <spi_cmd_complete+0x23e>
   2463a:	009a      	lsls	r2, r3, #2
   2463c:	4bd1      	ldr	r3, [pc, #836]	; (24984 <spi_cmd_complete+0x380>)
   2463e:	18d3      	adds	r3, r2, r3
   24640:	681b      	ldr	r3, [r3, #0]
   24642:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
   24644:	68bb      	ldr	r3, [r7, #8]
   24646:	0c1b      	lsrs	r3, r3, #16
   24648:	b2da      	uxtb	r2, r3
   2464a:	2338      	movs	r3, #56	; 0x38
   2464c:	18fb      	adds	r3, r7, r3
   2464e:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   24650:	68bb      	ldr	r3, [r7, #8]
   24652:	0a1b      	lsrs	r3, r3, #8
   24654:	b2da      	uxtb	r2, r3
   24656:	2338      	movs	r3, #56	; 0x38
   24658:	18fb      	adds	r3, r7, r3
   2465a:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   2465c:	68bb      	ldr	r3, [r7, #8]
   2465e:	b2da      	uxtb	r2, r3
   24660:	2338      	movs	r3, #56	; 0x38
   24662:	18fb      	adds	r3, r7, r3
   24664:	70da      	strb	r2, [r3, #3]
		len = 5;
   24666:	2305      	movs	r3, #5
   24668:	66fb      	str	r3, [r7, #108]	; 0x6c
		break; 
   2466a:	e0ed      	b.n	24848 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_READ:			/* internal register read */ 
		wb[1] = (uint8_t)(adr >> 8);
   2466c:	68bb      	ldr	r3, [r7, #8]
   2466e:	0a1b      	lsrs	r3, r3, #8
   24670:	b2da      	uxtb	r2, r3
   24672:	2338      	movs	r3, #56	; 0x38
   24674:	18fb      	adds	r3, r7, r3
   24676:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   24678:	2388      	movs	r3, #136	; 0x88
   2467a:	18fb      	adds	r3, r7, r3
   2467c:	781b      	ldrb	r3, [r3, #0]
   2467e:	2b01      	cmp	r3, #1
   24680:	d109      	bne.n	24696 <spi_cmd_complete+0x92>
   24682:	2338      	movs	r3, #56	; 0x38
   24684:	18fb      	adds	r3, r7, r3
   24686:	785b      	ldrb	r3, [r3, #1]
   24688:	2280      	movs	r2, #128	; 0x80
   2468a:	4252      	negs	r2, r2
   2468c:	4313      	orrs	r3, r2
   2468e:	b2da      	uxtb	r2, r3
   24690:	2338      	movs	r3, #56	; 0x38
   24692:	18fb      	adds	r3, r7, r3
   24694:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)adr;
   24696:	68bb      	ldr	r3, [r7, #8]
   24698:	b2da      	uxtb	r2, r3
   2469a:	2338      	movs	r3, #56	; 0x38
   2469c:	18fb      	adds	r3, r7, r3
   2469e:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   246a0:	2338      	movs	r3, #56	; 0x38
   246a2:	18fb      	adds	r3, r7, r3
   246a4:	2200      	movs	r2, #0
   246a6:	70da      	strb	r2, [r3, #3]
		len = 5;
   246a8:	2305      	movs	r3, #5
   246aa:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   246ac:	e0cc      	b.n	24848 <spi_cmd_complete+0x244>
	case CMD_TERMINATE:					/* termination */
		wb[1] = 0x00;
   246ae:	2338      	movs	r3, #56	; 0x38
   246b0:	18fb      	adds	r3, r7, r3
   246b2:	2200      	movs	r2, #0
   246b4:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   246b6:	2338      	movs	r3, #56	; 0x38
   246b8:	18fb      	adds	r3, r7, r3
   246ba:	2200      	movs	r2, #0
   246bc:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   246be:	2338      	movs	r3, #56	; 0x38
   246c0:	18fb      	adds	r3, r7, r3
   246c2:	2200      	movs	r2, #0
   246c4:	70da      	strb	r2, [r3, #3]
		len = 5;
   246c6:	2305      	movs	r3, #5
   246c8:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   246ca:	e0bd      	b.n	24848 <spi_cmd_complete+0x244>
	case CMD_REPEAT:						/* repeat */
		wb[1] = 0x00;
   246cc:	2338      	movs	r3, #56	; 0x38
   246ce:	18fb      	adds	r3, r7, r3
   246d0:	2200      	movs	r2, #0
   246d2:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   246d4:	2338      	movs	r3, #56	; 0x38
   246d6:	18fb      	adds	r3, r7, r3
   246d8:	2200      	movs	r2, #0
   246da:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   246dc:	2338      	movs	r3, #56	; 0x38
   246de:	18fb      	adds	r3, r7, r3
   246e0:	2200      	movs	r2, #0
   246e2:	70da      	strb	r2, [r3, #3]
		len = 5;
   246e4:	2305      	movs	r3, #5
   246e6:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   246e8:	e0ae      	b.n	24848 <spi_cmd_complete+0x244>
	case CMD_RESET:							/* reset */
		wb[1] = 0xff;
   246ea:	2338      	movs	r3, #56	; 0x38
   246ec:	18fb      	adds	r3, r7, r3
   246ee:	22ff      	movs	r2, #255	; 0xff
   246f0:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
   246f2:	2338      	movs	r3, #56	; 0x38
   246f4:	18fb      	adds	r3, r7, r3
   246f6:	22ff      	movs	r2, #255	; 0xff
   246f8:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
   246fa:	2338      	movs	r3, #56	; 0x38
   246fc:	18fb      	adds	r3, r7, r3
   246fe:	22ff      	movs	r2, #255	; 0xff
   24700:	70da      	strb	r2, [r3, #3]
		len = 5;
   24702:	2305      	movs	r3, #5
   24704:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   24706:	e09f      	b.n	24848 <spi_cmd_complete+0x244>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		wb[1] = (uint8_t)(adr >> 16);
   24708:	68bb      	ldr	r3, [r7, #8]
   2470a:	0c1b      	lsrs	r3, r3, #16
   2470c:	b2da      	uxtb	r2, r3
   2470e:	2338      	movs	r3, #56	; 0x38
   24710:	18fb      	adds	r3, r7, r3
   24712:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   24714:	68bb      	ldr	r3, [r7, #8]
   24716:	0a1b      	lsrs	r3, r3, #8
   24718:	b2da      	uxtb	r2, r3
   2471a:	2338      	movs	r3, #56	; 0x38
   2471c:	18fb      	adds	r3, r7, r3
   2471e:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   24720:	68bb      	ldr	r3, [r7, #8]
   24722:	b2da      	uxtb	r2, r3
   24724:	2338      	movs	r3, #56	; 0x38
   24726:	18fb      	adds	r3, r7, r3
   24728:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
   2472a:	683b      	ldr	r3, [r7, #0]
   2472c:	0a1b      	lsrs	r3, r3, #8
   2472e:	b2da      	uxtb	r2, r3
   24730:	2338      	movs	r3, #56	; 0x38
   24732:	18fb      	adds	r3, r7, r3
   24734:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
   24736:	683b      	ldr	r3, [r7, #0]
   24738:	b2da      	uxtb	r2, r3
   2473a:	2338      	movs	r3, #56	; 0x38
   2473c:	18fb      	adds	r3, r7, r3
   2473e:	715a      	strb	r2, [r3, #5]
		len = 7;
   24740:	2307      	movs	r3, #7
   24742:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   24744:	e080      	b.n	24848 <spi_cmd_complete+0x244>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		wb[1] = (uint8_t)(adr >> 16);
   24746:	68bb      	ldr	r3, [r7, #8]
   24748:	0c1b      	lsrs	r3, r3, #16
   2474a:	b2da      	uxtb	r2, r3
   2474c:	2338      	movs	r3, #56	; 0x38
   2474e:	18fb      	adds	r3, r7, r3
   24750:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   24752:	68bb      	ldr	r3, [r7, #8]
   24754:	0a1b      	lsrs	r3, r3, #8
   24756:	b2da      	uxtb	r2, r3
   24758:	2338      	movs	r3, #56	; 0x38
   2475a:	18fb      	adds	r3, r7, r3
   2475c:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   2475e:	68bb      	ldr	r3, [r7, #8]
   24760:	b2da      	uxtb	r2, r3
   24762:	2338      	movs	r3, #56	; 0x38
   24764:	18fb      	adds	r3, r7, r3
   24766:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
   24768:	683b      	ldr	r3, [r7, #0]
   2476a:	0c1b      	lsrs	r3, r3, #16
   2476c:	b2da      	uxtb	r2, r3
   2476e:	2338      	movs	r3, #56	; 0x38
   24770:	18fb      	adds	r3, r7, r3
   24772:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
   24774:	683b      	ldr	r3, [r7, #0]
   24776:	0a1b      	lsrs	r3, r3, #8
   24778:	b2da      	uxtb	r2, r3
   2477a:	2338      	movs	r3, #56	; 0x38
   2477c:	18fb      	adds	r3, r7, r3
   2477e:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
   24780:	683b      	ldr	r3, [r7, #0]
   24782:	b2da      	uxtb	r2, r3
   24784:	2338      	movs	r3, #56	; 0x38
   24786:	18fb      	adds	r3, r7, r3
   24788:	719a      	strb	r2, [r3, #6]
		len = 8;
   2478a:	2308      	movs	r3, #8
   2478c:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   2478e:	e05b      	b.n	24848 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		wb[1] = (uint8_t)(adr >> 8);
   24790:	68bb      	ldr	r3, [r7, #8]
   24792:	0a1b      	lsrs	r3, r3, #8
   24794:	b2da      	uxtb	r2, r3
   24796:	2338      	movs	r3, #56	; 0x38
   24798:	18fb      	adds	r3, r7, r3
   2479a:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   2479c:	2388      	movs	r3, #136	; 0x88
   2479e:	18fb      	adds	r3, r7, r3
   247a0:	781b      	ldrb	r3, [r3, #0]
   247a2:	2b01      	cmp	r3, #1
   247a4:	d109      	bne.n	247ba <spi_cmd_complete+0x1b6>
   247a6:	2338      	movs	r3, #56	; 0x38
   247a8:	18fb      	adds	r3, r7, r3
   247aa:	785b      	ldrb	r3, [r3, #1]
   247ac:	2280      	movs	r2, #128	; 0x80
   247ae:	4252      	negs	r2, r2
   247b0:	4313      	orrs	r3, r2
   247b2:	b2da      	uxtb	r2, r3
   247b4:	2338      	movs	r3, #56	; 0x38
   247b6:	18fb      	adds	r3, r7, r3
   247b8:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr);
   247ba:	68bb      	ldr	r3, [r7, #8]
   247bc:	b2da      	uxtb	r2, r3
   247be:	2338      	movs	r3, #56	; 0x38
   247c0:	18fb      	adds	r3, r7, r3
   247c2:	709a      	strb	r2, [r3, #2]
		wb[3] = b[3];
   247c4:	687b      	ldr	r3, [r7, #4]
   247c6:	78da      	ldrb	r2, [r3, #3]
   247c8:	2338      	movs	r3, #56	; 0x38
   247ca:	18fb      	adds	r3, r7, r3
   247cc:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
   247ce:	687b      	ldr	r3, [r7, #4]
   247d0:	789a      	ldrb	r2, [r3, #2]
   247d2:	2338      	movs	r3, #56	; 0x38
   247d4:	18fb      	adds	r3, r7, r3
   247d6:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
   247d8:	687b      	ldr	r3, [r7, #4]
   247da:	785a      	ldrb	r2, [r3, #1]
   247dc:	2338      	movs	r3, #56	; 0x38
   247de:	18fb      	adds	r3, r7, r3
   247e0:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
   247e2:	687b      	ldr	r3, [r7, #4]
   247e4:	781a      	ldrb	r2, [r3, #0]
   247e6:	2338      	movs	r3, #56	; 0x38
   247e8:	18fb      	adds	r3, r7, r3
   247ea:	719a      	strb	r2, [r3, #6]
		len = 8;
   247ec:	2308      	movs	r3, #8
   247ee:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   247f0:	e02a      	b.n	24848 <spi_cmd_complete+0x244>
	case CMD_SINGLE_WRITE:			/* single word write */
		wb[1] = (uint8_t)(adr >> 16);
   247f2:	68bb      	ldr	r3, [r7, #8]
   247f4:	0c1b      	lsrs	r3, r3, #16
   247f6:	b2da      	uxtb	r2, r3
   247f8:	2338      	movs	r3, #56	; 0x38
   247fa:	18fb      	adds	r3, r7, r3
   247fc:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   247fe:	68bb      	ldr	r3, [r7, #8]
   24800:	0a1b      	lsrs	r3, r3, #8
   24802:	b2da      	uxtb	r2, r3
   24804:	2338      	movs	r3, #56	; 0x38
   24806:	18fb      	adds	r3, r7, r3
   24808:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
   2480a:	68bb      	ldr	r3, [r7, #8]
   2480c:	b2da      	uxtb	r2, r3
   2480e:	2338      	movs	r3, #56	; 0x38
   24810:	18fb      	adds	r3, r7, r3
   24812:	70da      	strb	r2, [r3, #3]
		wb[4] = b[3];
   24814:	687b      	ldr	r3, [r7, #4]
   24816:	78da      	ldrb	r2, [r3, #3]
   24818:	2338      	movs	r3, #56	; 0x38
   2481a:	18fb      	adds	r3, r7, r3
   2481c:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
   2481e:	687b      	ldr	r3, [r7, #4]
   24820:	789a      	ldrb	r2, [r3, #2]
   24822:	2338      	movs	r3, #56	; 0x38
   24824:	18fb      	adds	r3, r7, r3
   24826:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
   24828:	687b      	ldr	r3, [r7, #4]
   2482a:	785a      	ldrb	r2, [r3, #1]
   2482c:	2338      	movs	r3, #56	; 0x38
   2482e:	18fb      	adds	r3, r7, r3
   24830:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
   24832:	687b      	ldr	r3, [r7, #4]
   24834:	781a      	ldrb	r2, [r3, #0]
   24836:	2338      	movs	r3, #56	; 0x38
   24838:	18fb      	adds	r3, r7, r3
   2483a:	71da      	strb	r2, [r3, #7]
		len = 9;
   2483c:	2309      	movs	r3, #9
   2483e:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   24840:	e002      	b.n	24848 <spi_cmd_complete+0x244>
	default:
		result = N_FAIL;
   24842:	2300      	movs	r3, #0
   24844:	66bb      	str	r3, [r7, #104]	; 0x68
		break;
   24846:	46c0      	nop			; (mov r8, r8)
	}

	if (result != N_OK) {
   24848:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2484a:	2b01      	cmp	r3, #1
   2484c:	d001      	beq.n	24852 <spi_cmd_complete+0x24e>
		return result;
   2484e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24850:	e33a      	b.n	24ec8 <spi_cmd_complete+0x8c4>
	}

	if (!gu8Crc_off) {
   24852:	4b4d      	ldr	r3, [pc, #308]	; (24988 <spi_cmd_complete+0x384>)
   24854:	781b      	ldrb	r3, [r3, #0]
   24856:	2b00      	cmp	r3, #0
   24858:	d111      	bne.n	2487e <spi_cmd_complete+0x27a>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   2485a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   2485c:	1e5c      	subs	r4, r3, #1
   2485e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   24860:	3b01      	subs	r3, #1
   24862:	001a      	movs	r2, r3
   24864:	2338      	movs	r3, #56	; 0x38
   24866:	18fb      	adds	r3, r7, r3
   24868:	0019      	movs	r1, r3
   2486a:	207f      	movs	r0, #127	; 0x7f
   2486c:	4b47      	ldr	r3, [pc, #284]	; (2498c <spi_cmd_complete+0x388>)
   2486e:	4798      	blx	r3
   24870:	0003      	movs	r3, r0
   24872:	18db      	adds	r3, r3, r3
   24874:	b2da      	uxtb	r2, r3
   24876:	2338      	movs	r3, #56	; 0x38
   24878:	18fb      	adds	r3, r7, r3
   2487a:	551a      	strb	r2, [r3, r4]
   2487c:	e002      	b.n	24884 <spi_cmd_complete+0x280>
	} else {
		len -=1;
   2487e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   24880:	3b01      	subs	r3, #1
   24882:	66fb      	str	r3, [r7, #108]	; 0x6c
#define NUM_DATA_HDR_BYTES (1)
#define NUM_DATA_BYTES (4)
#define NUM_CRC_BYTES (2)
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
   24884:	230f      	movs	r3, #15
   24886:	18fb      	adds	r3, r7, r3
   24888:	781b      	ldrb	r3, [r3, #0]
   2488a:	2bcf      	cmp	r3, #207	; 0xcf
   2488c:	d009      	beq.n	248a2 <spi_cmd_complete+0x29e>
   2488e:	230f      	movs	r3, #15
   24890:	18fb      	adds	r3, r7, r3
   24892:	781b      	ldrb	r3, [r3, #0]
   24894:	2bc5      	cmp	r3, #197	; 0xc5
   24896:	d004      	beq.n	248a2 <spi_cmd_complete+0x29e>
		(cmd == CMD_TERMINATE) ||
   24898:	230f      	movs	r3, #15
   2489a:	18fb      	adds	r3, r7, r3
   2489c:	781b      	ldrb	r3, [r3, #0]
   2489e:	2bc6      	cmp	r3, #198	; 0xc6
   248a0:	d103      	bne.n	248aa <spi_cmd_complete+0x2a6>
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   248a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   248a4:	3306      	adds	r3, #6
   248a6:	673b      	str	r3, [r7, #112]	; 0x70
   248a8:	e018      	b.n	248dc <spi_cmd_complete+0x2d8>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   248aa:	230f      	movs	r3, #15
   248ac:	18fb      	adds	r3, r7, r3
   248ae:	781b      	ldrb	r3, [r3, #0]
   248b0:	2bc4      	cmp	r3, #196	; 0xc4
   248b2:	d004      	beq.n	248be <spi_cmd_complete+0x2ba>
   248b4:	230f      	movs	r3, #15
   248b6:	18fb      	adds	r3, r7, r3
   248b8:	781b      	ldrb	r3, [r3, #0]
   248ba:	2bca      	cmp	r3, #202	; 0xca
   248bc:	d10b      	bne.n	248d6 <spi_cmd_complete+0x2d2>
		if (!gu8Crc_off) {
   248be:	4b32      	ldr	r3, [pc, #200]	; (24988 <spi_cmd_complete+0x384>)
   248c0:	781b      	ldrb	r3, [r3, #0]
   248c2:	2b00      	cmp	r3, #0
   248c4:	d103      	bne.n	248ce <spi_cmd_complete+0x2ca>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   248c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   248c8:	330c      	adds	r3, #12
   248ca:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   248cc:	e006      	b.n	248dc <spi_cmd_complete+0x2d8>
			+ NUM_CRC_BYTES + NUM_DUMMY_BYTES);	
		} else {
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   248ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   248d0:	330a      	adds	r3, #10
   248d2:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   248d4:	e002      	b.n	248dc <spi_cmd_complete+0x2d8>
			+ NUM_DUMMY_BYTES);
		}
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   248d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   248d8:	3305      	adds	r3, #5
   248da:	673b      	str	r3, [r7, #112]	; 0x70
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
   248dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   248de:	2b20      	cmp	r3, #32
   248e0:	d914      	bls.n	2490c <spi_cmd_complete+0x308>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
   248e2:	23f7      	movs	r3, #247	; 0xf7
   248e4:	005a      	lsls	r2, r3, #1
   248e6:	492a      	ldr	r1, [pc, #168]	; (24990 <spi_cmd_complete+0x38c>)
   248e8:	4b2a      	ldr	r3, [pc, #168]	; (24994 <spi_cmd_complete+0x390>)
   248ea:	0018      	movs	r0, r3
   248ec:	4b2a      	ldr	r3, [pc, #168]	; (24998 <spi_cmd_complete+0x394>)
   248ee:	4798      	blx	r3
   248f0:	6f39      	ldr	r1, [r7, #112]	; 0x70
   248f2:	4b2a      	ldr	r3, [pc, #168]	; (2499c <spi_cmd_complete+0x398>)
   248f4:	2220      	movs	r2, #32
   248f6:	0018      	movs	r0, r3
   248f8:	4b27      	ldr	r3, [pc, #156]	; (24998 <spi_cmd_complete+0x394>)
   248fa:	4798      	blx	r3
   248fc:	4b28      	ldr	r3, [pc, #160]	; (249a0 <spi_cmd_complete+0x39c>)
   248fe:	0018      	movs	r0, r3
   24900:	4b25      	ldr	r3, [pc, #148]	; (24998 <spi_cmd_complete+0x394>)
   24902:	4798      	blx	r3
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
   24904:	2300      	movs	r3, #0
   24906:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   24908:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2490a:	e2dd      	b.n	24ec8 <spi_cmd_complete+0x8c4>
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
   2490c:	2377      	movs	r3, #119	; 0x77
   2490e:	18fb      	adds	r3, r7, r3
   24910:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   24912:	701a      	strb	r2, [r3, #0]
   24914:	e00d      	b.n	24932 <spi_cmd_complete+0x32e>
		wb[wix] = 0;
   24916:	2377      	movs	r3, #119	; 0x77
   24918:	18fb      	adds	r3, r7, r3
   2491a:	781b      	ldrb	r3, [r3, #0]
   2491c:	2238      	movs	r2, #56	; 0x38
   2491e:	18ba      	adds	r2, r7, r2
   24920:	2100      	movs	r1, #0
   24922:	54d1      	strb	r1, [r2, r3]
	for(wix = len; wix< len2; wix++) {
   24924:	2377      	movs	r3, #119	; 0x77
   24926:	18fb      	adds	r3, r7, r3
   24928:	781a      	ldrb	r2, [r3, #0]
   2492a:	2377      	movs	r3, #119	; 0x77
   2492c:	18fb      	adds	r3, r7, r3
   2492e:	3201      	adds	r2, #1
   24930:	701a      	strb	r2, [r3, #0]
   24932:	2377      	movs	r3, #119	; 0x77
   24934:	18fb      	adds	r3, r7, r3
   24936:	781a      	ldrb	r2, [r3, #0]
   24938:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2493a:	429a      	cmp	r2, r3
   2493c:	d3eb      	bcc.n	24916 <spi_cmd_complete+0x312>
	}
	rix = len;
   2493e:	2376      	movs	r3, #118	; 0x76
   24940:	18fb      	adds	r3, r7, r3
   24942:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   24944:	701a      	strb	r2, [r3, #0]

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
   24946:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24948:	b29a      	uxth	r2, r3
   2494a:	2318      	movs	r3, #24
   2494c:	18f9      	adds	r1, r7, r3
   2494e:	2338      	movs	r3, #56	; 0x38
   24950:	18fb      	adds	r3, r7, r3
   24952:	0018      	movs	r0, r3
   24954:	4b13      	ldr	r3, [pc, #76]	; (249a4 <spi_cmd_complete+0x3a0>)
   24956:	4798      	blx	r3
   24958:	1e03      	subs	r3, r0, #0
   2495a:	d027      	beq.n	249ac <spi_cmd_complete+0x3a8>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   2495c:	23fa      	movs	r3, #250	; 0xfa
   2495e:	33ff      	adds	r3, #255	; 0xff
   24960:	001a      	movs	r2, r3
   24962:	490b      	ldr	r1, [pc, #44]	; (24990 <spi_cmd_complete+0x38c>)
   24964:	4b0b      	ldr	r3, [pc, #44]	; (24994 <spi_cmd_complete+0x390>)
   24966:	0018      	movs	r0, r3
   24968:	4b0b      	ldr	r3, [pc, #44]	; (24998 <spi_cmd_complete+0x394>)
   2496a:	4798      	blx	r3
   2496c:	4b0e      	ldr	r3, [pc, #56]	; (249a8 <spi_cmd_complete+0x3a4>)
   2496e:	0018      	movs	r0, r3
   24970:	4b09      	ldr	r3, [pc, #36]	; (24998 <spi_cmd_complete+0x394>)
   24972:	4798      	blx	r3
   24974:	4b0a      	ldr	r3, [pc, #40]	; (249a0 <spi_cmd_complete+0x39c>)
   24976:	0018      	movs	r0, r3
   24978:	4b07      	ldr	r3, [pc, #28]	; (24998 <spi_cmd_complete+0x394>)
   2497a:	4798      	blx	r3
		result = N_FAIL;
   2497c:	2300      	movs	r3, #0
   2497e:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   24980:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24982:	e2a1      	b.n	24ec8 <spi_cmd_complete+0x8c4>
   24984:	0003a0cc 	.word	0x0003a0cc
   24988:	200042b0 	.word	0x200042b0
   2498c:	00024039 	.word	0x00024039
   24990:	0003a12c 	.word	0x0003a12c
   24994:	00039b18 	.word	0x00039b18
   24998:	0001ebc9 	.word	0x0001ebc9
   2499c:	00039be0 	.word	0x00039be0
   249a0:	00039b58 	.word	0x00039b58
   249a4:	00023fc5 	.word	0x00023fc5
   249a8:	00039b2c 	.word	0x00039b2c
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   249ac:	230f      	movs	r3, #15
   249ae:	18fb      	adds	r3, r7, r3
   249b0:	781b      	ldrb	r3, [r3, #0]
   249b2:	2bcf      	cmp	r3, #207	; 0xcf
   249b4:	d009      	beq.n	249ca <spi_cmd_complete+0x3c6>
   249b6:	230f      	movs	r3, #15
   249b8:	18fb      	adds	r3, r7, r3
   249ba:	781b      	ldrb	r3, [r3, #0]
   249bc:	2bc5      	cmp	r3, #197	; 0xc5
   249be:	d004      	beq.n	249ca <spi_cmd_complete+0x3c6>
		(cmd == CMD_TERMINATE) ||
   249c0:	230f      	movs	r3, #15
   249c2:	18fb      	adds	r3, r7, r3
   249c4:	781b      	ldrb	r3, [r3, #0]
   249c6:	2bc6      	cmp	r3, #198	; 0xc6
   249c8:	d106      	bne.n	249d8 <spi_cmd_complete+0x3d4>
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
   249ca:	2376      	movs	r3, #118	; 0x76
   249cc:	18fb      	adds	r3, r7, r3
   249ce:	781a      	ldrb	r2, [r3, #0]
   249d0:	2376      	movs	r3, #118	; 0x76
   249d2:	18fb      	adds	r3, r7, r3
   249d4:	3201      	adds	r2, #1
   249d6:	701a      	strb	r2, [r3, #0]
	}

	rsp = rb[rix++];
   249d8:	2376      	movs	r3, #118	; 0x76
   249da:	18fb      	adds	r3, r7, r3
   249dc:	781b      	ldrb	r3, [r3, #0]
   249de:	2276      	movs	r2, #118	; 0x76
   249e0:	18ba      	adds	r2, r7, r2
   249e2:	1c59      	adds	r1, r3, #1
   249e4:	7011      	strb	r1, [r2, #0]
   249e6:	001a      	movs	r2, r3
   249e8:	2318      	movs	r3, #24
   249ea:	18fb      	adds	r3, r7, r3
   249ec:	5c9a      	ldrb	r2, [r3, r2]
   249ee:	2317      	movs	r3, #23
   249f0:	18fb      	adds	r3, r7, r3
   249f2:	701a      	strb	r2, [r3, #0]


	if (rsp != cmd) {
   249f4:	2317      	movs	r3, #23
   249f6:	18fb      	adds	r3, r7, r3
   249f8:	781b      	ldrb	r3, [r3, #0]
   249fa:	220f      	movs	r2, #15
   249fc:	18ba      	adds	r2, r7, r2
   249fe:	7812      	ldrb	r2, [r2, #0]
   24a00:	429a      	cmp	r2, r3
   24a02:	d018      	beq.n	24a36 <spi_cmd_complete+0x432>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
   24a04:	4add      	ldr	r2, [pc, #884]	; (24d7c <spi_cmd_complete+0x778>)
   24a06:	49de      	ldr	r1, [pc, #888]	; (24d80 <spi_cmd_complete+0x77c>)
   24a08:	4bde      	ldr	r3, [pc, #888]	; (24d84 <spi_cmd_complete+0x780>)
   24a0a:	0018      	movs	r0, r3
   24a0c:	4bde      	ldr	r3, [pc, #888]	; (24d88 <spi_cmd_complete+0x784>)
   24a0e:	4798      	blx	r3
   24a10:	230f      	movs	r3, #15
   24a12:	18fb      	adds	r3, r7, r3
   24a14:	7819      	ldrb	r1, [r3, #0]
   24a16:	2317      	movs	r3, #23
   24a18:	18fb      	adds	r3, r7, r3
   24a1a:	781b      	ldrb	r3, [r3, #0]
   24a1c:	001a      	movs	r2, r3
   24a1e:	4bdb      	ldr	r3, [pc, #876]	; (24d8c <spi_cmd_complete+0x788>)
   24a20:	0018      	movs	r0, r3
   24a22:	4bd9      	ldr	r3, [pc, #868]	; (24d88 <spi_cmd_complete+0x784>)
   24a24:	4798      	blx	r3
   24a26:	4bda      	ldr	r3, [pc, #872]	; (24d90 <spi_cmd_complete+0x78c>)
   24a28:	0018      	movs	r0, r3
   24a2a:	4bd7      	ldr	r3, [pc, #860]	; (24d88 <spi_cmd_complete+0x784>)
   24a2c:	4798      	blx	r3
		result = N_FAIL;
   24a2e:	2300      	movs	r3, #0
   24a30:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   24a32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24a34:	e248      	b.n	24ec8 <spi_cmd_complete+0x8c4>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
   24a36:	2376      	movs	r3, #118	; 0x76
   24a38:	18fb      	adds	r3, r7, r3
   24a3a:	781b      	ldrb	r3, [r3, #0]
   24a3c:	2276      	movs	r2, #118	; 0x76
   24a3e:	18ba      	adds	r2, r7, r2
   24a40:	1c59      	adds	r1, r3, #1
   24a42:	7011      	strb	r1, [r2, #0]
   24a44:	001a      	movs	r2, r3
   24a46:	2318      	movs	r3, #24
   24a48:	18fb      	adds	r3, r7, r3
   24a4a:	5c9a      	ldrb	r2, [r3, r2]
   24a4c:	2317      	movs	r3, #23
   24a4e:	18fb      	adds	r3, r7, r3
   24a50:	701a      	strb	r2, [r3, #0]
	if (rsp != 0x00) {
   24a52:	2317      	movs	r3, #23
   24a54:	18fb      	adds	r3, r7, r3
   24a56:	781b      	ldrb	r3, [r3, #0]
   24a58:	2b00      	cmp	r3, #0
   24a5a:	d016      	beq.n	24a8a <spi_cmd_complete+0x486>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
   24a5c:	4acd      	ldr	r2, [pc, #820]	; (24d94 <spi_cmd_complete+0x790>)
   24a5e:	49c8      	ldr	r1, [pc, #800]	; (24d80 <spi_cmd_complete+0x77c>)
   24a60:	4bc8      	ldr	r3, [pc, #800]	; (24d84 <spi_cmd_complete+0x780>)
   24a62:	0018      	movs	r0, r3
   24a64:	4bc8      	ldr	r3, [pc, #800]	; (24d88 <spi_cmd_complete+0x784>)
   24a66:	4798      	blx	r3
   24a68:	2317      	movs	r3, #23
   24a6a:	18fb      	adds	r3, r7, r3
   24a6c:	781b      	ldrb	r3, [r3, #0]
   24a6e:	001a      	movs	r2, r3
   24a70:	4bc9      	ldr	r3, [pc, #804]	; (24d98 <spi_cmd_complete+0x794>)
   24a72:	0011      	movs	r1, r2
   24a74:	0018      	movs	r0, r3
   24a76:	4bc4      	ldr	r3, [pc, #784]	; (24d88 <spi_cmd_complete+0x784>)
   24a78:	4798      	blx	r3
   24a7a:	4bc5      	ldr	r3, [pc, #788]	; (24d90 <spi_cmd_complete+0x78c>)
   24a7c:	0018      	movs	r0, r3
   24a7e:	4bc2      	ldr	r3, [pc, #776]	; (24d88 <spi_cmd_complete+0x784>)
   24a80:	4798      	blx	r3
		result = N_FAIL;
   24a82:	2300      	movs	r3, #0
   24a84:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   24a86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24a88:	e21e      	b.n	24ec8 <spi_cmd_complete+0x8c4>
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
   24a8a:	230f      	movs	r3, #15
   24a8c:	18fb      	adds	r3, r7, r3
   24a8e:	781b      	ldrb	r3, [r3, #0]
   24a90:	2bc4      	cmp	r3, #196	; 0xc4
   24a92:	d00f      	beq.n	24ab4 <spi_cmd_complete+0x4b0>
   24a94:	230f      	movs	r3, #15
   24a96:	18fb      	adds	r3, r7, r3
   24a98:	781b      	ldrb	r3, [r3, #0]
   24a9a:	2bca      	cmp	r3, #202	; 0xca
   24a9c:	d00a      	beq.n	24ab4 <spi_cmd_complete+0x4b0>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   24a9e:	230f      	movs	r3, #15
   24aa0:	18fb      	adds	r3, r7, r3
   24aa2:	781b      	ldrb	r3, [r3, #0]
   24aa4:	2bc2      	cmp	r3, #194	; 0xc2
   24aa6:	d005      	beq.n	24ab4 <spi_cmd_complete+0x4b0>
   24aa8:	230f      	movs	r3, #15
   24aaa:	18fb      	adds	r3, r7, r3
   24aac:	781b      	ldrb	r3, [r3, #0]
   24aae:	2bc8      	cmp	r3, #200	; 0xc8
   24ab0:	d000      	beq.n	24ab4 <spi_cmd_complete+0x4b0>
   24ab2:	e208      	b.n	24ec6 <spi_cmd_complete+0x8c2>
			//uint16_t crc1, crc2;
			uint8_t crc[2];
			/**
			Data Respnose header
			**/
			retry = SPI_RESP_RETRY_COUNT;
   24ab4:	230a      	movs	r3, #10
   24ab6:	667b      	str	r3, [r7, #100]	; 0x64
			do {
				/* ensure there is room in buffer later to read data and crc */
				if(rix < len2) { 
   24ab8:	2376      	movs	r3, #118	; 0x76
   24aba:	18fb      	adds	r3, r7, r3
   24abc:	781a      	ldrb	r2, [r3, #0]
   24abe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24ac0:	429a      	cmp	r2, r3
   24ac2:	d218      	bcs.n	24af6 <spi_cmd_complete+0x4f2>
					rsp = rb[rix++];
   24ac4:	2376      	movs	r3, #118	; 0x76
   24ac6:	18fb      	adds	r3, r7, r3
   24ac8:	781b      	ldrb	r3, [r3, #0]
   24aca:	2276      	movs	r2, #118	; 0x76
   24acc:	18ba      	adds	r2, r7, r2
   24ace:	1c59      	adds	r1, r3, #1
   24ad0:	7011      	strb	r1, [r2, #0]
   24ad2:	001a      	movs	r2, r3
   24ad4:	2318      	movs	r3, #24
   24ad6:	18fb      	adds	r3, r7, r3
   24ad8:	5c9a      	ldrb	r2, [r3, r2]
   24ada:	2317      	movs	r3, #23
   24adc:	18fb      	adds	r3, r7, r3
   24ade:	701a      	strb	r2, [r3, #0]
				} else {
					retry = 0;
					break;
				}
				if (((rsp >> 4) & 0xf) == 0xf)
   24ae0:	2317      	movs	r3, #23
   24ae2:	18fb      	adds	r3, r7, r3
   24ae4:	781b      	ldrb	r3, [r3, #0]
   24ae6:	091b      	lsrs	r3, r3, #4
   24ae8:	b2db      	uxtb	r3, r3
   24aea:	001a      	movs	r2, r3
   24aec:	230f      	movs	r3, #15
   24aee:	4013      	ands	r3, r2
   24af0:	2b0f      	cmp	r3, #15
   24af2:	d103      	bne.n	24afc <spi_cmd_complete+0x4f8>
					break;
   24af4:	e007      	b.n	24b06 <spi_cmd_complete+0x502>
					retry = 0;
   24af6:	2300      	movs	r3, #0
   24af8:	667b      	str	r3, [r7, #100]	; 0x64
					break;
   24afa:	e004      	b.n	24b06 <spi_cmd_complete+0x502>
			} while (retry--);
   24afc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   24afe:	1e5a      	subs	r2, r3, #1
   24b00:	667a      	str	r2, [r7, #100]	; 0x64
   24b02:	2b00      	cmp	r3, #0
   24b04:	d1d8      	bne.n	24ab8 <spi_cmd_complete+0x4b4>

			if (retry <= 0) {
   24b06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   24b08:	2b00      	cmp	r3, #0
   24b0a:	dc18      	bgt.n	24b3e <spi_cmd_complete+0x53a>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
   24b0c:	2395      	movs	r3, #149	; 0x95
   24b0e:	009a      	lsls	r2, r3, #2
   24b10:	499b      	ldr	r1, [pc, #620]	; (24d80 <spi_cmd_complete+0x77c>)
   24b12:	4b9c      	ldr	r3, [pc, #624]	; (24d84 <spi_cmd_complete+0x780>)
   24b14:	0018      	movs	r0, r3
   24b16:	4b9c      	ldr	r3, [pc, #624]	; (24d88 <spi_cmd_complete+0x784>)
   24b18:	4798      	blx	r3
   24b1a:	2317      	movs	r3, #23
   24b1c:	18fb      	adds	r3, r7, r3
   24b1e:	781b      	ldrb	r3, [r3, #0]
   24b20:	001a      	movs	r2, r3
   24b22:	4b9e      	ldr	r3, [pc, #632]	; (24d9c <spi_cmd_complete+0x798>)
   24b24:	0011      	movs	r1, r2
   24b26:	0018      	movs	r0, r3
   24b28:	4b97      	ldr	r3, [pc, #604]	; (24d88 <spi_cmd_complete+0x784>)
   24b2a:	4798      	blx	r3
   24b2c:	4b98      	ldr	r3, [pc, #608]	; (24d90 <spi_cmd_complete+0x78c>)
   24b2e:	0018      	movs	r0, r3
   24b30:	4b95      	ldr	r3, [pc, #596]	; (24d88 <spi_cmd_complete+0x784>)
   24b32:	4798      	blx	r3
				result = N_RESET;
   24b34:	2301      	movs	r3, #1
   24b36:	425b      	negs	r3, r3
   24b38:	66bb      	str	r3, [r7, #104]	; 0x68
				return result;
   24b3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24b3c:	e1c4      	b.n	24ec8 <spi_cmd_complete+0x8c4>
			}

			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   24b3e:	230f      	movs	r3, #15
   24b40:	18fb      	adds	r3, r7, r3
   24b42:	781b      	ldrb	r3, [r3, #0]
   24b44:	2bc4      	cmp	r3, #196	; 0xc4
   24b46:	d005      	beq.n	24b54 <spi_cmd_complete+0x550>
   24b48:	230f      	movs	r3, #15
   24b4a:	18fb      	adds	r3, r7, r3
   24b4c:	781b      	ldrb	r3, [r3, #0]
   24b4e:	2bca      	cmp	r3, #202	; 0xca
   24b50:	d000      	beq.n	24b54 <spi_cmd_complete+0x550>
   24b52:	e08e      	b.n	24c72 <spi_cmd_complete+0x66e>
				/**
				Read bytes
				**/
				if((rix+3) < len2) { 
   24b54:	2376      	movs	r3, #118	; 0x76
   24b56:	18fb      	adds	r3, r7, r3
   24b58:	781b      	ldrb	r3, [r3, #0]
   24b5a:	3303      	adds	r3, #3
   24b5c:	001a      	movs	r2, r3
   24b5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24b60:	429a      	cmp	r2, r3
   24b62:	d23c      	bcs.n	24bde <spi_cmd_complete+0x5da>
					b[0] = rb[rix++];
   24b64:	2376      	movs	r3, #118	; 0x76
   24b66:	18fb      	adds	r3, r7, r3
   24b68:	781b      	ldrb	r3, [r3, #0]
   24b6a:	2276      	movs	r2, #118	; 0x76
   24b6c:	18ba      	adds	r2, r7, r2
   24b6e:	1c59      	adds	r1, r3, #1
   24b70:	7011      	strb	r1, [r2, #0]
   24b72:	001a      	movs	r2, r3
   24b74:	2318      	movs	r3, #24
   24b76:	18fb      	adds	r3, r7, r3
   24b78:	5c9a      	ldrb	r2, [r3, r2]
   24b7a:	687b      	ldr	r3, [r7, #4]
   24b7c:	701a      	strb	r2, [r3, #0]
					b[1] = rb[rix++];
   24b7e:	687b      	ldr	r3, [r7, #4]
   24b80:	1c5a      	adds	r2, r3, #1
   24b82:	2376      	movs	r3, #118	; 0x76
   24b84:	18fb      	adds	r3, r7, r3
   24b86:	781b      	ldrb	r3, [r3, #0]
   24b88:	2176      	movs	r1, #118	; 0x76
   24b8a:	1879      	adds	r1, r7, r1
   24b8c:	1c58      	adds	r0, r3, #1
   24b8e:	7008      	strb	r0, [r1, #0]
   24b90:	0019      	movs	r1, r3
   24b92:	2318      	movs	r3, #24
   24b94:	18fb      	adds	r3, r7, r3
   24b96:	5c5b      	ldrb	r3, [r3, r1]
   24b98:	7013      	strb	r3, [r2, #0]
					b[2] = rb[rix++];
   24b9a:	687b      	ldr	r3, [r7, #4]
   24b9c:	1c9a      	adds	r2, r3, #2
   24b9e:	2376      	movs	r3, #118	; 0x76
   24ba0:	18fb      	adds	r3, r7, r3
   24ba2:	781b      	ldrb	r3, [r3, #0]
   24ba4:	2176      	movs	r1, #118	; 0x76
   24ba6:	1879      	adds	r1, r7, r1
   24ba8:	1c58      	adds	r0, r3, #1
   24baa:	7008      	strb	r0, [r1, #0]
   24bac:	0019      	movs	r1, r3
   24bae:	2318      	movs	r3, #24
   24bb0:	18fb      	adds	r3, r7, r3
   24bb2:	5c5b      	ldrb	r3, [r3, r1]
   24bb4:	7013      	strb	r3, [r2, #0]
					b[3] = rb[rix++];
   24bb6:	687b      	ldr	r3, [r7, #4]
   24bb8:	1cda      	adds	r2, r3, #3
   24bba:	2376      	movs	r3, #118	; 0x76
   24bbc:	18fb      	adds	r3, r7, r3
   24bbe:	781b      	ldrb	r3, [r3, #0]
   24bc0:	2176      	movs	r1, #118	; 0x76
   24bc2:	1879      	adds	r1, r7, r1
   24bc4:	1c58      	adds	r0, r3, #1
   24bc6:	7008      	strb	r0, [r1, #0]
   24bc8:	0019      	movs	r1, r3
   24bca:	2318      	movs	r3, #24
   24bcc:	18fb      	adds	r3, r7, r3
   24bce:	5c5b      	ldrb	r3, [r3, r1]
   24bd0:	7013      	strb	r3, [r2, #0]
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
					result = N_FAIL;
					return result;
				}

				if (!gu8Crc_off) {						
   24bd2:	4b73      	ldr	r3, [pc, #460]	; (24da0 <spi_cmd_complete+0x79c>)
   24bd4:	781b      	ldrb	r3, [r3, #0]
   24bd6:	2b00      	cmp	r3, #0
   24bd8:	d000      	beq.n	24bdc <spi_cmd_complete+0x5d8>
   24bda:	e174      	b.n	24ec6 <spi_cmd_complete+0x8c2>
   24bdc:	e011      	b.n	24c02 <spi_cmd_complete+0x5fe>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
   24bde:	4a71      	ldr	r2, [pc, #452]	; (24da4 <spi_cmd_complete+0x7a0>)
   24be0:	4967      	ldr	r1, [pc, #412]	; (24d80 <spi_cmd_complete+0x77c>)
   24be2:	4b68      	ldr	r3, [pc, #416]	; (24d84 <spi_cmd_complete+0x780>)
   24be4:	0018      	movs	r0, r3
   24be6:	4b68      	ldr	r3, [pc, #416]	; (24d88 <spi_cmd_complete+0x784>)
   24be8:	4798      	blx	r3
   24bea:	4b6f      	ldr	r3, [pc, #444]	; (24da8 <spi_cmd_complete+0x7a4>)
   24bec:	0018      	movs	r0, r3
   24bee:	4b66      	ldr	r3, [pc, #408]	; (24d88 <spi_cmd_complete+0x784>)
   24bf0:	4798      	blx	r3
   24bf2:	4b67      	ldr	r3, [pc, #412]	; (24d90 <spi_cmd_complete+0x78c>)
   24bf4:	0018      	movs	r0, r3
   24bf6:	4b64      	ldr	r3, [pc, #400]	; (24d88 <spi_cmd_complete+0x784>)
   24bf8:	4798      	blx	r3
					result = N_FAIL;
   24bfa:	2300      	movs	r3, #0
   24bfc:	66bb      	str	r3, [r7, #104]	; 0x68
					return result;
   24bfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24c00:	e162      	b.n	24ec8 <spi_cmd_complete+0x8c4>
					/**
					Read Crc
					**/
					if((rix+1) < len2) { 
   24c02:	2376      	movs	r3, #118	; 0x76
   24c04:	18fb      	adds	r3, r7, r3
   24c06:	781b      	ldrb	r3, [r3, #0]
   24c08:	3301      	adds	r3, #1
   24c0a:	001a      	movs	r2, r3
   24c0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24c0e:	429a      	cmp	r2, r3
   24c10:	d21c      	bcs.n	24c4c <spi_cmd_complete+0x648>
						crc[0] = rb[rix++];
   24c12:	2376      	movs	r3, #118	; 0x76
   24c14:	18fb      	adds	r3, r7, r3
   24c16:	781b      	ldrb	r3, [r3, #0]
   24c18:	2276      	movs	r2, #118	; 0x76
   24c1a:	18ba      	adds	r2, r7, r2
   24c1c:	1c59      	adds	r1, r3, #1
   24c1e:	7011      	strb	r1, [r2, #0]
   24c20:	001a      	movs	r2, r3
   24c22:	2318      	movs	r3, #24
   24c24:	18fb      	adds	r3, r7, r3
   24c26:	5c9a      	ldrb	r2, [r3, r2]
   24c28:	2314      	movs	r3, #20
   24c2a:	18fb      	adds	r3, r7, r3
   24c2c:	701a      	strb	r2, [r3, #0]
						crc[1] = rb[rix++];
   24c2e:	2376      	movs	r3, #118	; 0x76
   24c30:	18fb      	adds	r3, r7, r3
   24c32:	781b      	ldrb	r3, [r3, #0]
   24c34:	2276      	movs	r2, #118	; 0x76
   24c36:	18ba      	adds	r2, r7, r2
   24c38:	1c59      	adds	r1, r3, #1
   24c3a:	7011      	strb	r1, [r2, #0]
   24c3c:	001a      	movs	r2, r3
   24c3e:	2318      	movs	r3, #24
   24c40:	18fb      	adds	r3, r7, r3
   24c42:	5c9a      	ldrb	r2, [r3, r2]
   24c44:	2314      	movs	r3, #20
   24c46:	18fb      	adds	r3, r7, r3
   24c48:	705a      	strb	r2, [r3, #1]
				if (!gu8Crc_off) {						
   24c4a:	e13c      	b.n	24ec6 <spi_cmd_complete+0x8c2>
					} else {
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
   24c4c:	239c      	movs	r3, #156	; 0x9c
   24c4e:	009a      	lsls	r2, r3, #2
   24c50:	494b      	ldr	r1, [pc, #300]	; (24d80 <spi_cmd_complete+0x77c>)
   24c52:	4b4c      	ldr	r3, [pc, #304]	; (24d84 <spi_cmd_complete+0x780>)
   24c54:	0018      	movs	r0, r3
   24c56:	4b4c      	ldr	r3, [pc, #304]	; (24d88 <spi_cmd_complete+0x784>)
   24c58:	4798      	blx	r3
   24c5a:	4b54      	ldr	r3, [pc, #336]	; (24dac <spi_cmd_complete+0x7a8>)
   24c5c:	0018      	movs	r0, r3
   24c5e:	4b4a      	ldr	r3, [pc, #296]	; (24d88 <spi_cmd_complete+0x784>)
   24c60:	4798      	blx	r3
   24c62:	4b4b      	ldr	r3, [pc, #300]	; (24d90 <spi_cmd_complete+0x78c>)
   24c64:	0018      	movs	r0, r3
   24c66:	4b48      	ldr	r3, [pc, #288]	; (24d88 <spi_cmd_complete+0x784>)
   24c68:	4798      	blx	r3
						result = N_FAIL;
   24c6a:	2300      	movs	r3, #0
   24c6c:	66bb      	str	r3, [r7, #104]	; 0x68
						return result;
   24c6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24c70:	e12a      	b.n	24ec8 <spi_cmd_complete+0x8c4>
					}
				}
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   24c72:	230f      	movs	r3, #15
   24c74:	18fb      	adds	r3, r7, r3
   24c76:	781b      	ldrb	r3, [r3, #0]
   24c78:	2bc2      	cmp	r3, #194	; 0xc2
   24c7a:	d005      	beq.n	24c88 <spi_cmd_complete+0x684>
   24c7c:	230f      	movs	r3, #15
   24c7e:	18fb      	adds	r3, r7, r3
   24c80:	781b      	ldrb	r3, [r3, #0]
   24c82:	2bc8      	cmp	r3, #200	; 0xc8
   24c84:	d000      	beq.n	24c88 <spi_cmd_complete+0x684>
   24c86:	e11e      	b.n	24ec6 <spi_cmd_complete+0x8c2>
				int ix;

				/* some data may be read in response to dummy bytes. */
				for(ix=0; (rix < len2) && (ix < sz);) {
   24c88:	2300      	movs	r3, #0
   24c8a:	663b      	str	r3, [r7, #96]	; 0x60
   24c8c:	e011      	b.n	24cb2 <spi_cmd_complete+0x6ae>
					b[ix++] = rb[rix++];				
   24c8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24c90:	1c5a      	adds	r2, r3, #1
   24c92:	663a      	str	r2, [r7, #96]	; 0x60
   24c94:	001a      	movs	r2, r3
   24c96:	687b      	ldr	r3, [r7, #4]
   24c98:	189a      	adds	r2, r3, r2
   24c9a:	2376      	movs	r3, #118	; 0x76
   24c9c:	18fb      	adds	r3, r7, r3
   24c9e:	781b      	ldrb	r3, [r3, #0]
   24ca0:	2176      	movs	r1, #118	; 0x76
   24ca2:	1879      	adds	r1, r7, r1
   24ca4:	1c58      	adds	r0, r3, #1
   24ca6:	7008      	strb	r0, [r1, #0]
   24ca8:	0019      	movs	r1, r3
   24caa:	2318      	movs	r3, #24
   24cac:	18fb      	adds	r3, r7, r3
   24cae:	5c5b      	ldrb	r3, [r3, r1]
   24cb0:	7013      	strb	r3, [r2, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
   24cb2:	2376      	movs	r3, #118	; 0x76
   24cb4:	18fb      	adds	r3, r7, r3
   24cb6:	781a      	ldrb	r2, [r3, #0]
   24cb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24cba:	429a      	cmp	r2, r3
   24cbc:	d203      	bcs.n	24cc6 <spi_cmd_complete+0x6c2>
   24cbe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   24cc0:	683b      	ldr	r3, [r7, #0]
   24cc2:	429a      	cmp	r2, r3
   24cc4:	d3e3      	bcc.n	24c8e <spi_cmd_complete+0x68a>
				}
#if 0
				if(ix) M2M_INFO("ttt %d %d\n", sz, ix);
#endif
				sz -= ix;
   24cc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24cc8:	683a      	ldr	r2, [r7, #0]
   24cca:	1ad3      	subs	r3, r2, r3
   24ccc:	603b      	str	r3, [r7, #0]

				if(sz > 0) {
   24cce:	683b      	ldr	r3, [r7, #0]
   24cd0:	2b00      	cmp	r3, #0
   24cd2:	d100      	bne.n	24cd6 <spi_cmd_complete+0x6d2>
   24cd4:	e0f1      	b.n	24eba <spi_cmd_complete+0x8b6>
					int nbytes;
					
					if (sz <= (DATA_PKT_SZ-ix)) {
   24cd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24cd8:	2280      	movs	r2, #128	; 0x80
   24cda:	0192      	lsls	r2, r2, #6
   24cdc:	1ad3      	subs	r3, r2, r3
   24cde:	001a      	movs	r2, r3
   24ce0:	683b      	ldr	r3, [r7, #0]
   24ce2:	429a      	cmp	r2, r3
   24ce4:	d302      	bcc.n	24cec <spi_cmd_complete+0x6e8>
						nbytes = sz;
   24ce6:	683b      	ldr	r3, [r7, #0]
   24ce8:	65fb      	str	r3, [r7, #92]	; 0x5c
   24cea:	e004      	b.n	24cf6 <spi_cmd_complete+0x6f2>
					} else {
						nbytes = DATA_PKT_SZ-ix;
   24cec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24cee:	2280      	movs	r2, #128	; 0x80
   24cf0:	0192      	lsls	r2, r2, #6
   24cf2:	1ad3      	subs	r3, r2, r3
   24cf4:	65fb      	str	r3, [r7, #92]	; 0x5c
					}

					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   24cf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24cf8:	687a      	ldr	r2, [r7, #4]
   24cfa:	18d3      	adds	r3, r2, r3
   24cfc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   24cfe:	b292      	uxth	r2, r2
   24d00:	0011      	movs	r1, r2
   24d02:	0018      	movs	r0, r3
   24d04:	4b2a      	ldr	r3, [pc, #168]	; (24db0 <spi_cmd_complete+0x7ac>)
   24d06:	4798      	blx	r3
   24d08:	1e03      	subs	r3, r0, #0
   24d0a:	d010      	beq.n	24d2e <spi_cmd_complete+0x72a>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   24d0c:	4a29      	ldr	r2, [pc, #164]	; (24db4 <spi_cmd_complete+0x7b0>)
   24d0e:	491c      	ldr	r1, [pc, #112]	; (24d80 <spi_cmd_complete+0x77c>)
   24d10:	4b1c      	ldr	r3, [pc, #112]	; (24d84 <spi_cmd_complete+0x780>)
   24d12:	0018      	movs	r0, r3
   24d14:	4b1c      	ldr	r3, [pc, #112]	; (24d88 <spi_cmd_complete+0x784>)
   24d16:	4798      	blx	r3
   24d18:	4b27      	ldr	r3, [pc, #156]	; (24db8 <spi_cmd_complete+0x7b4>)
   24d1a:	0018      	movs	r0, r3
   24d1c:	4b1a      	ldr	r3, [pc, #104]	; (24d88 <spi_cmd_complete+0x784>)
   24d1e:	4798      	blx	r3
   24d20:	4b1b      	ldr	r3, [pc, #108]	; (24d90 <spi_cmd_complete+0x78c>)
   24d22:	0018      	movs	r0, r3
   24d24:	4b18      	ldr	r3, [pc, #96]	; (24d88 <spi_cmd_complete+0x784>)
   24d26:	4798      	blx	r3
						result = N_FAIL;
   24d28:	2300      	movs	r3, #0
   24d2a:	66bb      	str	r3, [r7, #104]	; 0x68
						goto _error_;
   24d2c:	e0cb      	b.n	24ec6 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   24d2e:	4b1c      	ldr	r3, [pc, #112]	; (24da0 <spi_cmd_complete+0x79c>)
   24d30:	781b      	ldrb	r3, [r3, #0]
   24d32:	2b00      	cmp	r3, #0
   24d34:	d119      	bne.n	24d6a <spi_cmd_complete+0x766>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   24d36:	2314      	movs	r3, #20
   24d38:	18fb      	adds	r3, r7, r3
   24d3a:	2102      	movs	r1, #2
   24d3c:	0018      	movs	r0, r3
   24d3e:	4b1c      	ldr	r3, [pc, #112]	; (24db0 <spi_cmd_complete+0x7ac>)
   24d40:	4798      	blx	r3
   24d42:	1e03      	subs	r3, r0, #0
   24d44:	d011      	beq.n	24d6a <spi_cmd_complete+0x766>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   24d46:	23a6      	movs	r3, #166	; 0xa6
   24d48:	009a      	lsls	r2, r3, #2
   24d4a:	490d      	ldr	r1, [pc, #52]	; (24d80 <spi_cmd_complete+0x77c>)
   24d4c:	4b0d      	ldr	r3, [pc, #52]	; (24d84 <spi_cmd_complete+0x780>)
   24d4e:	0018      	movs	r0, r3
   24d50:	4b0d      	ldr	r3, [pc, #52]	; (24d88 <spi_cmd_complete+0x784>)
   24d52:	4798      	blx	r3
   24d54:	4b19      	ldr	r3, [pc, #100]	; (24dbc <spi_cmd_complete+0x7b8>)
   24d56:	0018      	movs	r0, r3
   24d58:	4b0b      	ldr	r3, [pc, #44]	; (24d88 <spi_cmd_complete+0x784>)
   24d5a:	4798      	blx	r3
   24d5c:	4b0c      	ldr	r3, [pc, #48]	; (24d90 <spi_cmd_complete+0x78c>)
   24d5e:	0018      	movs	r0, r3
   24d60:	4b09      	ldr	r3, [pc, #36]	; (24d88 <spi_cmd_complete+0x784>)
   24d62:	4798      	blx	r3
							result = N_FAIL;
   24d64:	2300      	movs	r3, #0
   24d66:	66bb      	str	r3, [r7, #104]	; 0x68
							goto _error_;
   24d68:	e0ad      	b.n	24ec6 <spi_cmd_complete+0x8c2>
						}
					}

					
					ix += nbytes;
   24d6a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   24d6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   24d6e:	18d3      	adds	r3, r2, r3
   24d70:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   24d72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   24d74:	683a      	ldr	r2, [r7, #0]
   24d76:	1ad3      	subs	r3, r2, r3
   24d78:	603b      	str	r3, [r7, #0]
				}

				/*  if any data in left unread, then read the rest using normal DMA code.*/	
				while(sz > 0) {
   24d7a:	e09e      	b.n	24eba <spi_cmd_complete+0x8b6>
   24d7c:	0000022f 	.word	0x0000022f
   24d80:	0003a12c 	.word	0x0003a12c
   24d84:	00039b18 	.word	0x00039b18
   24d88:	0001ebc9 	.word	0x0001ebc9
   24d8c:	00039c10 	.word	0x00039c10
   24d90:	00039b58 	.word	0x00039b58
   24d94:	00000239 	.word	0x00000239
   24d98:	00039c4c 	.word	0x00039c4c
   24d9c:	00039c80 	.word	0x00039c80
   24da0:	200042b0 	.word	0x200042b0
   24da4:	00000263 	.word	0x00000263
   24da8:	00039cb0 	.word	0x00039cb0
   24dac:	00039ce0 	.word	0x00039ce0
   24db0:	00023f3d 	.word	0x00023f3d
   24db4:	0000028e 	.word	0x0000028e
   24db8:	00039d10 	.word	0x00039d10
   24dbc:	00039d44 	.word	0x00039d44
					int nbytes;
			
					if (sz <= DATA_PKT_SZ) {
   24dc0:	683a      	ldr	r2, [r7, #0]
   24dc2:	2380      	movs	r3, #128	; 0x80
   24dc4:	019b      	lsls	r3, r3, #6
   24dc6:	429a      	cmp	r2, r3
   24dc8:	d802      	bhi.n	24dd0 <spi_cmd_complete+0x7cc>
						nbytes = sz;
   24dca:	683b      	ldr	r3, [r7, #0]
   24dcc:	65bb      	str	r3, [r7, #88]	; 0x58
   24dce:	e002      	b.n	24dd6 <spi_cmd_complete+0x7d2>
					} else {
						nbytes = DATA_PKT_SZ;
   24dd0:	2380      	movs	r3, #128	; 0x80
   24dd2:	019b      	lsls	r3, r3, #6
   24dd4:	65bb      	str	r3, [r7, #88]	; 0x58
					handled above for the first DMA.
					**/
					/**
					Data Respnose header
					**/
					retry = SPI_RESP_RETRY_COUNT;
   24dd6:	230a      	movs	r3, #10
   24dd8:	667b      	str	r3, [r7, #100]	; 0x64
					do {
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   24dda:	2317      	movs	r3, #23
   24ddc:	18fb      	adds	r3, r7, r3
   24dde:	2101      	movs	r1, #1
   24de0:	0018      	movs	r0, r3
   24de2:	4b3b      	ldr	r3, [pc, #236]	; (24ed0 <spi_cmd_complete+0x8cc>)
   24de4:	4798      	blx	r3
   24de6:	1e03      	subs	r3, r0, #0
   24de8:	d011      	beq.n	24e0e <spi_cmd_complete+0x80a>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
   24dea:	23ae      	movs	r3, #174	; 0xae
   24dec:	009a      	lsls	r2, r3, #2
   24dee:	4939      	ldr	r1, [pc, #228]	; (24ed4 <spi_cmd_complete+0x8d0>)
   24df0:	4b39      	ldr	r3, [pc, #228]	; (24ed8 <spi_cmd_complete+0x8d4>)
   24df2:	0018      	movs	r0, r3
   24df4:	4b39      	ldr	r3, [pc, #228]	; (24edc <spi_cmd_complete+0x8d8>)
   24df6:	4798      	blx	r3
   24df8:	4b39      	ldr	r3, [pc, #228]	; (24ee0 <spi_cmd_complete+0x8dc>)
   24dfa:	0018      	movs	r0, r3
   24dfc:	4b37      	ldr	r3, [pc, #220]	; (24edc <spi_cmd_complete+0x8d8>)
   24dfe:	4798      	blx	r3
   24e00:	4b38      	ldr	r3, [pc, #224]	; (24ee4 <spi_cmd_complete+0x8e0>)
   24e02:	0018      	movs	r0, r3
   24e04:	4b35      	ldr	r3, [pc, #212]	; (24edc <spi_cmd_complete+0x8d8>)
   24e06:	4798      	blx	r3
							result = N_FAIL;
   24e08:	2300      	movs	r3, #0
   24e0a:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   24e0c:	e010      	b.n	24e30 <spi_cmd_complete+0x82c>
						}
						if (((rsp >> 4) & 0xf) == 0xf)
   24e0e:	2317      	movs	r3, #23
   24e10:	18fb      	adds	r3, r7, r3
   24e12:	781b      	ldrb	r3, [r3, #0]
   24e14:	091b      	lsrs	r3, r3, #4
   24e16:	b2db      	uxtb	r3, r3
   24e18:	001a      	movs	r2, r3
   24e1a:	230f      	movs	r3, #15
   24e1c:	4013      	ands	r3, r2
   24e1e:	2b0f      	cmp	r3, #15
   24e20:	d005      	beq.n	24e2e <spi_cmd_complete+0x82a>
							break;
					} while (retry--);
   24e22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   24e24:	1e5a      	subs	r2, r3, #1
   24e26:	667a      	str	r2, [r7, #100]	; 0x64
   24e28:	2b00      	cmp	r3, #0
   24e2a:	d1d6      	bne.n	24dda <spi_cmd_complete+0x7d6>
   24e2c:	e000      	b.n	24e30 <spi_cmd_complete+0x82c>
							break;
   24e2e:	46c0      	nop			; (mov r8, r8)

					if (result == N_FAIL)
   24e30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24e32:	2b00      	cmp	r3, #0
   24e34:	d046      	beq.n	24ec4 <spi_cmd_complete+0x8c0>


					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   24e36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24e38:	687a      	ldr	r2, [r7, #4]
   24e3a:	18d3      	adds	r3, r2, r3
   24e3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
   24e3e:	b292      	uxth	r2, r2
   24e40:	0011      	movs	r1, r2
   24e42:	0018      	movs	r0, r3
   24e44:	4b22      	ldr	r3, [pc, #136]	; (24ed0 <spi_cmd_complete+0x8cc>)
   24e46:	4798      	blx	r3
   24e48:	1e03      	subs	r3, r0, #0
   24e4a:	d011      	beq.n	24e70 <spi_cmd_complete+0x86c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   24e4c:	23b2      	movs	r3, #178	; 0xb2
   24e4e:	009a      	lsls	r2, r3, #2
   24e50:	4920      	ldr	r1, [pc, #128]	; (24ed4 <spi_cmd_complete+0x8d0>)
   24e52:	4b21      	ldr	r3, [pc, #132]	; (24ed8 <spi_cmd_complete+0x8d4>)
   24e54:	0018      	movs	r0, r3
   24e56:	4b21      	ldr	r3, [pc, #132]	; (24edc <spi_cmd_complete+0x8d8>)
   24e58:	4798      	blx	r3
   24e5a:	4b23      	ldr	r3, [pc, #140]	; (24ee8 <spi_cmd_complete+0x8e4>)
   24e5c:	0018      	movs	r0, r3
   24e5e:	4b1f      	ldr	r3, [pc, #124]	; (24edc <spi_cmd_complete+0x8d8>)
   24e60:	4798      	blx	r3
   24e62:	4b20      	ldr	r3, [pc, #128]	; (24ee4 <spi_cmd_complete+0x8e0>)
   24e64:	0018      	movs	r0, r3
   24e66:	4b1d      	ldr	r3, [pc, #116]	; (24edc <spi_cmd_complete+0x8d8>)
   24e68:	4798      	blx	r3
						result = N_FAIL;
   24e6a:	2300      	movs	r3, #0
   24e6c:	66bb      	str	r3, [r7, #104]	; 0x68
						break;
   24e6e:	e02a      	b.n	24ec6 <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   24e70:	4b1e      	ldr	r3, [pc, #120]	; (24eec <spi_cmd_complete+0x8e8>)
   24e72:	781b      	ldrb	r3, [r3, #0]
   24e74:	2b00      	cmp	r3, #0
   24e76:	d118      	bne.n	24eaa <spi_cmd_complete+0x8a6>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   24e78:	2314      	movs	r3, #20
   24e7a:	18fb      	adds	r3, r7, r3
   24e7c:	2102      	movs	r1, #2
   24e7e:	0018      	movs	r0, r3
   24e80:	4b13      	ldr	r3, [pc, #76]	; (24ed0 <spi_cmd_complete+0x8cc>)
   24e82:	4798      	blx	r3
   24e84:	1e03      	subs	r3, r0, #0
   24e86:	d010      	beq.n	24eaa <spi_cmd_complete+0x8a6>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   24e88:	4a19      	ldr	r2, [pc, #100]	; (24ef0 <spi_cmd_complete+0x8ec>)
   24e8a:	4912      	ldr	r1, [pc, #72]	; (24ed4 <spi_cmd_complete+0x8d0>)
   24e8c:	4b12      	ldr	r3, [pc, #72]	; (24ed8 <spi_cmd_complete+0x8d4>)
   24e8e:	0018      	movs	r0, r3
   24e90:	4b12      	ldr	r3, [pc, #72]	; (24edc <spi_cmd_complete+0x8d8>)
   24e92:	4798      	blx	r3
   24e94:	4b17      	ldr	r3, [pc, #92]	; (24ef4 <spi_cmd_complete+0x8f0>)
   24e96:	0018      	movs	r0, r3
   24e98:	4b10      	ldr	r3, [pc, #64]	; (24edc <spi_cmd_complete+0x8d8>)
   24e9a:	4798      	blx	r3
   24e9c:	4b11      	ldr	r3, [pc, #68]	; (24ee4 <spi_cmd_complete+0x8e0>)
   24e9e:	0018      	movs	r0, r3
   24ea0:	4b0e      	ldr	r3, [pc, #56]	; (24edc <spi_cmd_complete+0x8d8>)
   24ea2:	4798      	blx	r3
							result = N_FAIL;
   24ea4:	2300      	movs	r3, #0
   24ea6:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   24ea8:	e00d      	b.n	24ec6 <spi_cmd_complete+0x8c2>
						}
					}

					ix += nbytes;
   24eaa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   24eac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   24eae:	18d3      	adds	r3, r2, r3
   24eb0:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   24eb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   24eb4:	683a      	ldr	r2, [r7, #0]
   24eb6:	1ad3      	subs	r3, r2, r3
   24eb8:	603b      	str	r3, [r7, #0]
				while(sz > 0) {
   24eba:	683b      	ldr	r3, [r7, #0]
   24ebc:	2b00      	cmp	r3, #0
   24ebe:	d000      	beq.n	24ec2 <spi_cmd_complete+0x8be>
   24ec0:	e77e      	b.n	24dc0 <spi_cmd_complete+0x7bc>
   24ec2:	e000      	b.n	24ec6 <spi_cmd_complete+0x8c2>
						break;
   24ec4:	46c0      	nop			; (mov r8, r8)
				}
			}
	}
_error_:
	return result;
   24ec6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
   24ec8:	0018      	movs	r0, r3
   24eca:	46bd      	mov	sp, r7
   24ecc:	b01f      	add	sp, #124	; 0x7c
   24ece:	bd90      	pop	{r4, r7, pc}
   24ed0:	00023f3d 	.word	0x00023f3d
   24ed4:	0003a12c 	.word	0x0003a12c
   24ed8:	00039b18 	.word	0x00039b18
   24edc:	0001ebc9 	.word	0x0001ebc9
   24ee0:	00039d7c 	.word	0x00039d7c
   24ee4:	00039b58 	.word	0x00039b58
   24ee8:	00039d10 	.word	0x00039d10
   24eec:	200042b0 	.word	0x200042b0
   24ef0:	000002d2 	.word	0x000002d2
   24ef4:	00039d44 	.word	0x00039d44

00024ef8 <spi_data_write>:

	return result;
}

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
   24ef8:	b580      	push	{r7, lr}
   24efa:	b086      	sub	sp, #24
   24efc:	af00      	add	r7, sp, #0
   24efe:	6078      	str	r0, [r7, #4]
   24f00:	000a      	movs	r2, r1
   24f02:	1cbb      	adds	r3, r7, #2
   24f04:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
   24f06:	2313      	movs	r3, #19
   24f08:	18fb      	adds	r3, r7, r3
   24f0a:	2201      	movs	r2, #1
   24f0c:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
   24f0e:	230c      	movs	r3, #12
   24f10:	18fb      	adds	r3, r7, r3
   24f12:	2200      	movs	r2, #0
   24f14:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
   24f16:	2316      	movs	r3, #22
   24f18:	18fb      	adds	r3, r7, r3
   24f1a:	2200      	movs	r2, #0
   24f1c:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
   24f1e:	1cbb      	adds	r3, r7, #2
   24f20:	881a      	ldrh	r2, [r3, #0]
   24f22:	2380      	movs	r3, #128	; 0x80
   24f24:	019b      	lsls	r3, r3, #6
   24f26:	429a      	cmp	r2, r3
   24f28:	d805      	bhi.n	24f36 <spi_data_write+0x3e>
			nbytes = sz;
   24f2a:	2314      	movs	r3, #20
   24f2c:	18fb      	adds	r3, r7, r3
   24f2e:	1cba      	adds	r2, r7, #2
   24f30:	8812      	ldrh	r2, [r2, #0]
   24f32:	801a      	strh	r2, [r3, #0]
   24f34:	e004      	b.n	24f40 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
   24f36:	2314      	movs	r3, #20
   24f38:	18fb      	adds	r3, r7, r3
   24f3a:	2280      	movs	r2, #128	; 0x80
   24f3c:	0192      	lsls	r2, r2, #6
   24f3e:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
   24f40:	2311      	movs	r3, #17
   24f42:	18fb      	adds	r3, r7, r3
   24f44:	22f0      	movs	r2, #240	; 0xf0
   24f46:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
   24f48:	2316      	movs	r3, #22
   24f4a:	18fb      	adds	r3, r7, r3
   24f4c:	2200      	movs	r2, #0
   24f4e:	5e9b      	ldrsh	r3, [r3, r2]
   24f50:	2b00      	cmp	r3, #0
   24f52:	d10f      	bne.n	24f74 <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
   24f54:	1cbb      	adds	r3, r7, #2
   24f56:	881a      	ldrh	r2, [r3, #0]
   24f58:	2380      	movs	r3, #128	; 0x80
   24f5a:	019b      	lsls	r3, r3, #6
   24f5c:	429a      	cmp	r2, r3
   24f5e:	d804      	bhi.n	24f6a <spi_data_write+0x72>
				order = 0x3;
   24f60:	2312      	movs	r3, #18
   24f62:	18fb      	adds	r3, r7, r3
   24f64:	2203      	movs	r2, #3
   24f66:	701a      	strb	r2, [r3, #0]
   24f68:	e013      	b.n	24f92 <spi_data_write+0x9a>
			else
				order = 0x1;
   24f6a:	2312      	movs	r3, #18
   24f6c:	18fb      	adds	r3, r7, r3
   24f6e:	2201      	movs	r2, #1
   24f70:	701a      	strb	r2, [r3, #0]
   24f72:	e00e      	b.n	24f92 <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
   24f74:	1cbb      	adds	r3, r7, #2
   24f76:	881a      	ldrh	r2, [r3, #0]
   24f78:	2380      	movs	r3, #128	; 0x80
   24f7a:	019b      	lsls	r3, r3, #6
   24f7c:	429a      	cmp	r2, r3
   24f7e:	d804      	bhi.n	24f8a <spi_data_write+0x92>
				order = 0x3;
   24f80:	2312      	movs	r3, #18
   24f82:	18fb      	adds	r3, r7, r3
   24f84:	2203      	movs	r2, #3
   24f86:	701a      	strb	r2, [r3, #0]
   24f88:	e003      	b.n	24f92 <spi_data_write+0x9a>
			else
				order = 0x2;
   24f8a:	2312      	movs	r3, #18
   24f8c:	18fb      	adds	r3, r7, r3
   24f8e:	2202      	movs	r2, #2
   24f90:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
   24f92:	2311      	movs	r3, #17
   24f94:	18fb      	adds	r3, r7, r3
   24f96:	781a      	ldrb	r2, [r3, #0]
   24f98:	2312      	movs	r3, #18
   24f9a:	18fb      	adds	r3, r7, r3
   24f9c:	781b      	ldrb	r3, [r3, #0]
   24f9e:	4313      	orrs	r3, r2
   24fa0:	b2da      	uxtb	r2, r3
   24fa2:	2311      	movs	r3, #17
   24fa4:	18fb      	adds	r3, r7, r3
   24fa6:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
   24fa8:	2311      	movs	r3, #17
   24faa:	18fb      	adds	r3, r7, r3
   24fac:	2101      	movs	r1, #1
   24fae:	0018      	movs	r0, r3
   24fb0:	4b3c      	ldr	r3, [pc, #240]	; (250a4 <spi_data_write+0x1ac>)
   24fb2:	4798      	blx	r3
   24fb4:	1e03      	subs	r3, r0, #0
   24fb6:	d012      	beq.n	24fde <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
   24fb8:	4a3b      	ldr	r2, [pc, #236]	; (250a8 <spi_data_write+0x1b0>)
   24fba:	493c      	ldr	r1, [pc, #240]	; (250ac <spi_data_write+0x1b4>)
   24fbc:	4b3c      	ldr	r3, [pc, #240]	; (250b0 <spi_data_write+0x1b8>)
   24fbe:	0018      	movs	r0, r3
   24fc0:	4b3c      	ldr	r3, [pc, #240]	; (250b4 <spi_data_write+0x1bc>)
   24fc2:	4798      	blx	r3
   24fc4:	4b3c      	ldr	r3, [pc, #240]	; (250b8 <spi_data_write+0x1c0>)
   24fc6:	0018      	movs	r0, r3
   24fc8:	4b3a      	ldr	r3, [pc, #232]	; (250b4 <spi_data_write+0x1bc>)
   24fca:	4798      	blx	r3
   24fcc:	4b3b      	ldr	r3, [pc, #236]	; (250bc <spi_data_write+0x1c4>)
   24fce:	0018      	movs	r0, r3
   24fd0:	4b38      	ldr	r3, [pc, #224]	; (250b4 <spi_data_write+0x1bc>)
   24fd2:	4798      	blx	r3
			result = N_FAIL;
   24fd4:	2313      	movs	r3, #19
   24fd6:	18fb      	adds	r3, r7, r3
   24fd8:	2200      	movs	r2, #0
   24fda:	701a      	strb	r2, [r3, #0]
			break;
   24fdc:	e059      	b.n	25092 <spi_data_write+0x19a>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
   24fde:	2316      	movs	r3, #22
   24fe0:	18fb      	adds	r3, r7, r3
   24fe2:	2200      	movs	r2, #0
   24fe4:	5e9b      	ldrsh	r3, [r3, r2]
   24fe6:	687a      	ldr	r2, [r7, #4]
   24fe8:	18d2      	adds	r2, r2, r3
   24fea:	2314      	movs	r3, #20
   24fec:	18fb      	adds	r3, r7, r3
   24fee:	881b      	ldrh	r3, [r3, #0]
   24ff0:	0019      	movs	r1, r3
   24ff2:	0010      	movs	r0, r2
   24ff4:	4b2b      	ldr	r3, [pc, #172]	; (250a4 <spi_data_write+0x1ac>)
   24ff6:	4798      	blx	r3
   24ff8:	1e03      	subs	r3, r0, #0
   24ffa:	d012      	beq.n	25022 <spi_data_write+0x12a>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
   24ffc:	4a30      	ldr	r2, [pc, #192]	; (250c0 <spi_data_write+0x1c8>)
   24ffe:	492b      	ldr	r1, [pc, #172]	; (250ac <spi_data_write+0x1b4>)
   25000:	4b2b      	ldr	r3, [pc, #172]	; (250b0 <spi_data_write+0x1b8>)
   25002:	0018      	movs	r0, r3
   25004:	4b2b      	ldr	r3, [pc, #172]	; (250b4 <spi_data_write+0x1bc>)
   25006:	4798      	blx	r3
   25008:	4b2e      	ldr	r3, [pc, #184]	; (250c4 <spi_data_write+0x1cc>)
   2500a:	0018      	movs	r0, r3
   2500c:	4b29      	ldr	r3, [pc, #164]	; (250b4 <spi_data_write+0x1bc>)
   2500e:	4798      	blx	r3
   25010:	4b2a      	ldr	r3, [pc, #168]	; (250bc <spi_data_write+0x1c4>)
   25012:	0018      	movs	r0, r3
   25014:	4b27      	ldr	r3, [pc, #156]	; (250b4 <spi_data_write+0x1bc>)
   25016:	4798      	blx	r3
			result = N_FAIL;
   25018:	2313      	movs	r3, #19
   2501a:	18fb      	adds	r3, r7, r3
   2501c:	2200      	movs	r2, #0
   2501e:	701a      	strb	r2, [r3, #0]
			break;
   25020:	e037      	b.n	25092 <spi_data_write+0x19a>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
   25022:	4b29      	ldr	r3, [pc, #164]	; (250c8 <spi_data_write+0x1d0>)
   25024:	781b      	ldrb	r3, [r3, #0]
   25026:	2b00      	cmp	r3, #0
   25028:	d11b      	bne.n	25062 <spi_data_write+0x16a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
   2502a:	230c      	movs	r3, #12
   2502c:	18fb      	adds	r3, r7, r3
   2502e:	2102      	movs	r1, #2
   25030:	0018      	movs	r0, r3
   25032:	4b1c      	ldr	r3, [pc, #112]	; (250a4 <spi_data_write+0x1ac>)
   25034:	4798      	blx	r3
   25036:	1e03      	subs	r3, r0, #0
   25038:	d013      	beq.n	25062 <spi_data_write+0x16a>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
   2503a:	23d7      	movs	r3, #215	; 0xd7
   2503c:	009a      	lsls	r2, r3, #2
   2503e:	491b      	ldr	r1, [pc, #108]	; (250ac <spi_data_write+0x1b4>)
   25040:	4b1b      	ldr	r3, [pc, #108]	; (250b0 <spi_data_write+0x1b8>)
   25042:	0018      	movs	r0, r3
   25044:	4b1b      	ldr	r3, [pc, #108]	; (250b4 <spi_data_write+0x1bc>)
   25046:	4798      	blx	r3
   25048:	4b20      	ldr	r3, [pc, #128]	; (250cc <spi_data_write+0x1d4>)
   2504a:	0018      	movs	r0, r3
   2504c:	4b19      	ldr	r3, [pc, #100]	; (250b4 <spi_data_write+0x1bc>)
   2504e:	4798      	blx	r3
   25050:	4b1a      	ldr	r3, [pc, #104]	; (250bc <spi_data_write+0x1c4>)
   25052:	0018      	movs	r0, r3
   25054:	4b17      	ldr	r3, [pc, #92]	; (250b4 <spi_data_write+0x1bc>)
   25056:	4798      	blx	r3
				result = N_FAIL;
   25058:	2313      	movs	r3, #19
   2505a:	18fb      	adds	r3, r7, r3
   2505c:	2200      	movs	r2, #0
   2505e:	701a      	strb	r2, [r3, #0]
				break;
   25060:	e017      	b.n	25092 <spi_data_write+0x19a>
			}
		}

		ix += nbytes;
   25062:	2316      	movs	r3, #22
   25064:	18fb      	adds	r3, r7, r3
   25066:	881a      	ldrh	r2, [r3, #0]
   25068:	2314      	movs	r3, #20
   2506a:	18fb      	adds	r3, r7, r3
   2506c:	881b      	ldrh	r3, [r3, #0]
   2506e:	18d3      	adds	r3, r2, r3
   25070:	b29a      	uxth	r2, r3
   25072:	2316      	movs	r3, #22
   25074:	18fb      	adds	r3, r7, r3
   25076:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
   25078:	1cbb      	adds	r3, r7, #2
   2507a:	1cb9      	adds	r1, r7, #2
   2507c:	2214      	movs	r2, #20
   2507e:	18ba      	adds	r2, r7, r2
   25080:	8809      	ldrh	r1, [r1, #0]
   25082:	8812      	ldrh	r2, [r2, #0]
   25084:	1a8a      	subs	r2, r1, r2
   25086:	801a      	strh	r2, [r3, #0]
	} while (sz);
   25088:	1cbb      	adds	r3, r7, #2
   2508a:	881b      	ldrh	r3, [r3, #0]
   2508c:	2b00      	cmp	r3, #0
   2508e:	d000      	beq.n	25092 <spi_data_write+0x19a>
   25090:	e745      	b.n	24f1e <spi_data_write+0x26>


	return result;
   25092:	2313      	movs	r3, #19
   25094:	18fb      	adds	r3, r7, r3
   25096:	781b      	ldrb	r3, [r3, #0]
   25098:	b25b      	sxtb	r3, r3
}
   2509a:	0018      	movs	r0, r3
   2509c:	46bd      	mov	sp, r7
   2509e:	b006      	add	sp, #24
   250a0:	bd80      	pop	{r7, pc}
   250a2:	46c0      	nop			; (mov r8, r8)
   250a4:	00023f81 	.word	0x00023f81
   250a8:	00000349 	.word	0x00000349
   250ac:	0003a140 	.word	0x0003a140
   250b0:	00039b18 	.word	0x00039b18
   250b4:	0001ebc9 	.word	0x0001ebc9
   250b8:	00039de0 	.word	0x00039de0
   250bc:	00039b58 	.word	0x00039b58
   250c0:	00000352 	.word	0x00000352
   250c4:	00039e18 	.word	0x00039e18
   250c8:	200042b0 	.word	0x200042b0
   250cc:	00039e4c 	.word	0x00039e4c

000250d0 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   250d0:	b590      	push	{r4, r7, lr}
   250d2:	b087      	sub	sp, #28
   250d4:	af02      	add	r7, sp, #8
   250d6:	6078      	str	r0, [r7, #4]
   250d8:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   250da:	230f      	movs	r3, #15
   250dc:	18fb      	adds	r3, r7, r3
   250de:	220a      	movs	r2, #10
   250e0:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   250e2:	230c      	movs	r3, #12
   250e4:	18fb      	adds	r3, r7, r3
   250e6:	2201      	movs	r2, #1
   250e8:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
   250ea:	230e      	movs	r3, #14
   250ec:	18fb      	adds	r3, r7, r3
   250ee:	22c9      	movs	r2, #201	; 0xc9
   250f0:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
   250f2:	230d      	movs	r3, #13
   250f4:	18fb      	adds	r3, r7, r3
   250f6:	2200      	movs	r2, #0
   250f8:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
   250fa:	687b      	ldr	r3, [r7, #4]
   250fc:	2b30      	cmp	r3, #48	; 0x30
   250fe:	d808      	bhi.n	25112 <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
   25100:	230e      	movs	r3, #14
   25102:	18fb      	adds	r3, r7, r3
   25104:	22c3      	movs	r2, #195	; 0xc3
   25106:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   25108:	230d      	movs	r3, #13
   2510a:	18fb      	adds	r3, r7, r3
   2510c:	2201      	movs	r2, #1
   2510e:	701a      	strb	r2, [r3, #0]
   25110:	e007      	b.n	25122 <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
   25112:	230e      	movs	r3, #14
   25114:	18fb      	adds	r3, r7, r3
   25116:	22c9      	movs	r2, #201	; 0xc9
   25118:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   2511a:	230d      	movs	r3, #13
   2511c:	18fb      	adds	r3, r7, r3
   2511e:	2200      	movs	r2, #0
   25120:	701a      	strb	r2, [r3, #0]
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   25122:	003a      	movs	r2, r7
   25124:	6879      	ldr	r1, [r7, #4]
   25126:	230e      	movs	r3, #14
   25128:	18fb      	adds	r3, r7, r3
   2512a:	7818      	ldrb	r0, [r3, #0]
   2512c:	230d      	movs	r3, #13
   2512e:	18fb      	adds	r3, r7, r3
   25130:	781b      	ldrb	r3, [r3, #0]
   25132:	9300      	str	r3, [sp, #0]
   25134:	2304      	movs	r3, #4
   25136:	4c2e      	ldr	r4, [pc, #184]	; (251f0 <spi_write_reg+0x120>)
   25138:	47a0      	blx	r4
   2513a:	0002      	movs	r2, r0
   2513c:	230c      	movs	r3, #12
   2513e:	18fb      	adds	r3, r7, r3
   25140:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   25142:	230c      	movs	r3, #12
   25144:	18fb      	adds	r3, r7, r3
   25146:	781b      	ldrb	r3, [r3, #0]
   25148:	b25b      	sxtb	r3, r3
   2514a:	2b01      	cmp	r3, #1
   2514c:	d010      	beq.n	25170 <spi_write_reg+0xa0>
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   2514e:	4a29      	ldr	r2, [pc, #164]	; (251f4 <spi_write_reg+0x124>)
   25150:	4929      	ldr	r1, [pc, #164]	; (251f8 <spi_write_reg+0x128>)
   25152:	4b2a      	ldr	r3, [pc, #168]	; (251fc <spi_write_reg+0x12c>)
   25154:	0018      	movs	r0, r3
   25156:	4b2a      	ldr	r3, [pc, #168]	; (25200 <spi_write_reg+0x130>)
   25158:	4798      	blx	r3
   2515a:	687a      	ldr	r2, [r7, #4]
   2515c:	4b29      	ldr	r3, [pc, #164]	; (25204 <spi_write_reg+0x134>)
   2515e:	0011      	movs	r1, r2
   25160:	0018      	movs	r0, r3
   25162:	4b27      	ldr	r3, [pc, #156]	; (25200 <spi_write_reg+0x130>)
   25164:	4798      	blx	r3
   25166:	4b28      	ldr	r3, [pc, #160]	; (25208 <spi_write_reg+0x138>)
   25168:	0018      	movs	r0, r3
   2516a:	4b25      	ldr	r3, [pc, #148]	; (25200 <spi_write_reg+0x130>)
   2516c:	4798      	blx	r3
		goto _FAIL_;
   2516e:	46c0      	nop			; (mov r8, r8)
	}

#endif
_FAIL_:
	if(result != N_OK)
   25170:	230c      	movs	r3, #12
   25172:	18fb      	adds	r3, r7, r3
   25174:	781b      	ldrb	r3, [r3, #0]
   25176:	b25b      	sxtb	r3, r3
   25178:	2b01      	cmp	r3, #1
   2517a:	d030      	beq.n	251de <spi_write_reg+0x10e>
	{
		nm_bsp_sleep(1);
   2517c:	2001      	movs	r0, #1
   2517e:	4b23      	ldr	r3, [pc, #140]	; (2520c <spi_write_reg+0x13c>)
   25180:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   25182:	2300      	movs	r3, #0
   25184:	9300      	str	r3, [sp, #0]
   25186:	2300      	movs	r3, #0
   25188:	2200      	movs	r2, #0
   2518a:	2100      	movs	r1, #0
   2518c:	20cf      	movs	r0, #207	; 0xcf
   2518e:	4c20      	ldr	r4, [pc, #128]	; (25210 <spi_write_reg+0x140>)
   25190:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   25192:	20cf      	movs	r0, #207	; 0xcf
   25194:	4b1f      	ldr	r3, [pc, #124]	; (25214 <spi_write_reg+0x144>)
   25196:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   25198:	23ea      	movs	r3, #234	; 0xea
   2519a:	009a      	lsls	r2, r3, #2
   2519c:	4916      	ldr	r1, [pc, #88]	; (251f8 <spi_write_reg+0x128>)
   2519e:	4b17      	ldr	r3, [pc, #92]	; (251fc <spi_write_reg+0x12c>)
   251a0:	0018      	movs	r0, r3
   251a2:	4b17      	ldr	r3, [pc, #92]	; (25200 <spi_write_reg+0x130>)
   251a4:	4798      	blx	r3
   251a6:	230f      	movs	r3, #15
   251a8:	18fb      	adds	r3, r7, r3
   251aa:	7819      	ldrb	r1, [r3, #0]
   251ac:	683b      	ldr	r3, [r7, #0]
   251ae:	687a      	ldr	r2, [r7, #4]
   251b0:	4819      	ldr	r0, [pc, #100]	; (25218 <spi_write_reg+0x148>)
   251b2:	4c13      	ldr	r4, [pc, #76]	; (25200 <spi_write_reg+0x130>)
   251b4:	47a0      	blx	r4
   251b6:	4b14      	ldr	r3, [pc, #80]	; (25208 <spi_write_reg+0x138>)
   251b8:	0018      	movs	r0, r3
   251ba:	4b11      	ldr	r3, [pc, #68]	; (25200 <spi_write_reg+0x130>)
   251bc:	4798      	blx	r3
		nm_bsp_sleep(1);
   251be:	2001      	movs	r0, #1
   251c0:	4b12      	ldr	r3, [pc, #72]	; (2520c <spi_write_reg+0x13c>)
   251c2:	4798      	blx	r3
		retry--;
   251c4:	230f      	movs	r3, #15
   251c6:	18fb      	adds	r3, r7, r3
   251c8:	781a      	ldrb	r2, [r3, #0]
   251ca:	230f      	movs	r3, #15
   251cc:	18fb      	adds	r3, r7, r3
   251ce:	3a01      	subs	r2, #1
   251d0:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   251d2:	230f      	movs	r3, #15
   251d4:	18fb      	adds	r3, r7, r3
   251d6:	781b      	ldrb	r3, [r3, #0]
   251d8:	2b00      	cmp	r3, #0
   251da:	d000      	beq.n	251de <spi_write_reg+0x10e>
   251dc:	e78d      	b.n	250fa <spi_write_reg+0x2a>
	}

	return result;
   251de:	230c      	movs	r3, #12
   251e0:	18fb      	adds	r3, r7, r3
   251e2:	781b      	ldrb	r3, [r3, #0]
   251e4:	b25b      	sxtb	r3, r3
}
   251e6:	0018      	movs	r0, r3
   251e8:	46bd      	mov	sp, r7
   251ea:	b005      	add	sp, #20
   251ec:	bd90      	pop	{r4, r7, pc}
   251ee:	46c0      	nop			; (mov r8, r8)
   251f0:	00024605 	.word	0x00024605
   251f4:	0000039d 	.word	0x0000039d
   251f8:	0003a150 	.word	0x0003a150
   251fc:	00039b18 	.word	0x00039b18
   25200:	0001ebc9 	.word	0x0001ebc9
   25204:	00039e84 	.word	0x00039e84
   25208:	00039b58 	.word	0x00039b58
   2520c:	0002101d 	.word	0x0002101d
   25210:	00024089 	.word	0x00024089
   25214:	000244c9 	.word	0x000244c9
   25218:	00039eb0 	.word	0x00039eb0

0002521c <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
   2521c:	b590      	push	{r4, r7, lr}
   2521e:	b089      	sub	sp, #36	; 0x24
   25220:	af02      	add	r7, sp, #8
   25222:	60f8      	str	r0, [r7, #12]
   25224:	60b9      	str	r1, [r7, #8]
   25226:	1dbb      	adds	r3, r7, #6
   25228:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   2522a:	2316      	movs	r3, #22
   2522c:	18fb      	adds	r3, r7, r3
   2522e:	220a      	movs	r2, #10
   25230:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
   25232:	2315      	movs	r3, #21
   25234:	18fb      	adds	r3, r7, r3
   25236:	22c7      	movs	r2, #199	; 0xc7
   25238:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   2523a:	1dbb      	adds	r3, r7, #6
   2523c:	881a      	ldrh	r2, [r3, #0]
   2523e:	68f9      	ldr	r1, [r7, #12]
   25240:	2315      	movs	r3, #21
   25242:	18fb      	adds	r3, r7, r3
   25244:	7818      	ldrb	r0, [r3, #0]
   25246:	2300      	movs	r3, #0
   25248:	9300      	str	r3, [sp, #0]
   2524a:	0013      	movs	r3, r2
   2524c:	2200      	movs	r2, #0
   2524e:	4c4d      	ldr	r4, [pc, #308]	; (25384 <nm_spi_write+0x168>)
   25250:	47a0      	blx	r4
   25252:	0002      	movs	r2, r0
   25254:	2317      	movs	r3, #23
   25256:	18fb      	adds	r3, r7, r3
   25258:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   2525a:	2317      	movs	r3, #23
   2525c:	18fb      	adds	r3, r7, r3
   2525e:	781b      	ldrb	r3, [r3, #0]
   25260:	b25b      	sxtb	r3, r3
   25262:	2b01      	cmp	r3, #1
   25264:	d010      	beq.n	25288 <nm_spi_write+0x6c>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   25266:	4a48      	ldr	r2, [pc, #288]	; (25388 <nm_spi_write+0x16c>)
   25268:	4948      	ldr	r1, [pc, #288]	; (2538c <nm_spi_write+0x170>)
   2526a:	4b49      	ldr	r3, [pc, #292]	; (25390 <nm_spi_write+0x174>)
   2526c:	0018      	movs	r0, r3
   2526e:	4b49      	ldr	r3, [pc, #292]	; (25394 <nm_spi_write+0x178>)
   25270:	4798      	blx	r3
   25272:	68fa      	ldr	r2, [r7, #12]
   25274:	4b48      	ldr	r3, [pc, #288]	; (25398 <nm_spi_write+0x17c>)
   25276:	0011      	movs	r1, r2
   25278:	0018      	movs	r0, r3
   2527a:	4b46      	ldr	r3, [pc, #280]	; (25394 <nm_spi_write+0x178>)
   2527c:	4798      	blx	r3
   2527e:	4b47      	ldr	r3, [pc, #284]	; (2539c <nm_spi_write+0x180>)
   25280:	0018      	movs	r0, r3
   25282:	4b44      	ldr	r3, [pc, #272]	; (25394 <nm_spi_write+0x178>)
   25284:	4798      	blx	r3
		goto _FAIL_;
   25286:	e03e      	b.n	25306 <nm_spi_write+0xea>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
   25288:	2317      	movs	r3, #23
   2528a:	18fc      	adds	r4, r7, r3
   2528c:	1dbb      	adds	r3, r7, #6
   2528e:	881a      	ldrh	r2, [r3, #0]
   25290:	68bb      	ldr	r3, [r7, #8]
   25292:	0011      	movs	r1, r2
   25294:	0018      	movs	r0, r3
   25296:	4b42      	ldr	r3, [pc, #264]	; (253a0 <nm_spi_write+0x184>)
   25298:	4798      	blx	r3
   2529a:	0003      	movs	r3, r0
   2529c:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   2529e:	2317      	movs	r3, #23
   252a0:	18fb      	adds	r3, r7, r3
   252a2:	781b      	ldrb	r3, [r3, #0]
   252a4:	b25b      	sxtb	r3, r3
   252a6:	2b01      	cmp	r3, #1
   252a8:	d00e      	beq.n	252c8 <nm_spi_write+0xac>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   252aa:	4a3e      	ldr	r2, [pc, #248]	; (253a4 <nm_spi_write+0x188>)
   252ac:	4937      	ldr	r1, [pc, #220]	; (2538c <nm_spi_write+0x170>)
   252ae:	4b38      	ldr	r3, [pc, #224]	; (25390 <nm_spi_write+0x174>)
   252b0:	0018      	movs	r0, r3
   252b2:	4b38      	ldr	r3, [pc, #224]	; (25394 <nm_spi_write+0x178>)
   252b4:	4798      	blx	r3
   252b6:	4b3c      	ldr	r3, [pc, #240]	; (253a8 <nm_spi_write+0x18c>)
   252b8:	0018      	movs	r0, r3
   252ba:	4b36      	ldr	r3, [pc, #216]	; (25394 <nm_spi_write+0x178>)
   252bc:	4798      	blx	r3
   252be:	4b37      	ldr	r3, [pc, #220]	; (2539c <nm_spi_write+0x180>)
   252c0:	0018      	movs	r0, r3
   252c2:	4b34      	ldr	r3, [pc, #208]	; (25394 <nm_spi_write+0x178>)
   252c4:	4798      	blx	r3
		goto _FAIL_;
   252c6:	e01e      	b.n	25306 <nm_spi_write+0xea>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
   252c8:	2317      	movs	r3, #23
   252ca:	18fc      	adds	r4, r7, r3
   252cc:	2315      	movs	r3, #21
   252ce:	18fb      	adds	r3, r7, r3
   252d0:	781b      	ldrb	r3, [r3, #0]
   252d2:	0018      	movs	r0, r3
   252d4:	4b35      	ldr	r3, [pc, #212]	; (253ac <nm_spi_write+0x190>)
   252d6:	4798      	blx	r3
   252d8:	0003      	movs	r3, r0
   252da:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   252dc:	2317      	movs	r3, #23
   252de:	18fb      	adds	r3, r7, r3
   252e0:	781b      	ldrb	r3, [r3, #0]
   252e2:	b25b      	sxtb	r3, r3
   252e4:	2b01      	cmp	r3, #1
   252e6:	d00e      	beq.n	25306 <nm_spi_write+0xea>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   252e8:	4a31      	ldr	r2, [pc, #196]	; (253b0 <nm_spi_write+0x194>)
   252ea:	4928      	ldr	r1, [pc, #160]	; (2538c <nm_spi_write+0x170>)
   252ec:	4b28      	ldr	r3, [pc, #160]	; (25390 <nm_spi_write+0x174>)
   252ee:	0018      	movs	r0, r3
   252f0:	4b28      	ldr	r3, [pc, #160]	; (25394 <nm_spi_write+0x178>)
   252f2:	4798      	blx	r3
   252f4:	4b2c      	ldr	r3, [pc, #176]	; (253a8 <nm_spi_write+0x18c>)
   252f6:	0018      	movs	r0, r3
   252f8:	4b26      	ldr	r3, [pc, #152]	; (25394 <nm_spi_write+0x178>)
   252fa:	4798      	blx	r3
   252fc:	4b27      	ldr	r3, [pc, #156]	; (2539c <nm_spi_write+0x180>)
   252fe:	0018      	movs	r0, r3
   25300:	4b24      	ldr	r3, [pc, #144]	; (25394 <nm_spi_write+0x178>)
   25302:	4798      	blx	r3
		goto _FAIL_;
   25304:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
   25306:	2317      	movs	r3, #23
   25308:	18fb      	adds	r3, r7, r3
   2530a:	781b      	ldrb	r3, [r3, #0]
   2530c:	b25b      	sxtb	r3, r3
   2530e:	2b01      	cmp	r3, #1
   25310:	d030      	beq.n	25374 <nm_spi_write+0x158>
	{
		nm_bsp_sleep(1);
   25312:	2001      	movs	r0, #1
   25314:	4b27      	ldr	r3, [pc, #156]	; (253b4 <nm_spi_write+0x198>)
   25316:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   25318:	2300      	movs	r3, #0
   2531a:	9300      	str	r3, [sp, #0]
   2531c:	2300      	movs	r3, #0
   2531e:	2200      	movs	r2, #0
   25320:	2100      	movs	r1, #0
   25322:	20cf      	movs	r0, #207	; 0xcf
   25324:	4c24      	ldr	r4, [pc, #144]	; (253b8 <nm_spi_write+0x19c>)
   25326:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   25328:	20cf      	movs	r0, #207	; 0xcf
   2532a:	4b24      	ldr	r3, [pc, #144]	; (253bc <nm_spi_write+0x1a0>)
   2532c:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   2532e:	4a24      	ldr	r2, [pc, #144]	; (253c0 <nm_spi_write+0x1a4>)
   25330:	4916      	ldr	r1, [pc, #88]	; (2538c <nm_spi_write+0x170>)
   25332:	4b17      	ldr	r3, [pc, #92]	; (25390 <nm_spi_write+0x174>)
   25334:	0018      	movs	r0, r3
   25336:	4b17      	ldr	r3, [pc, #92]	; (25394 <nm_spi_write+0x178>)
   25338:	4798      	blx	r3
   2533a:	2316      	movs	r3, #22
   2533c:	18fb      	adds	r3, r7, r3
   2533e:	7819      	ldrb	r1, [r3, #0]
   25340:	1dbb      	adds	r3, r7, #6
   25342:	881b      	ldrh	r3, [r3, #0]
   25344:	68fa      	ldr	r2, [r7, #12]
   25346:	481f      	ldr	r0, [pc, #124]	; (253c4 <nm_spi_write+0x1a8>)
   25348:	4c12      	ldr	r4, [pc, #72]	; (25394 <nm_spi_write+0x178>)
   2534a:	47a0      	blx	r4
   2534c:	4b13      	ldr	r3, [pc, #76]	; (2539c <nm_spi_write+0x180>)
   2534e:	0018      	movs	r0, r3
   25350:	4b10      	ldr	r3, [pc, #64]	; (25394 <nm_spi_write+0x178>)
   25352:	4798      	blx	r3
		nm_bsp_sleep(1);
   25354:	2001      	movs	r0, #1
   25356:	4b17      	ldr	r3, [pc, #92]	; (253b4 <nm_spi_write+0x198>)
   25358:	4798      	blx	r3
		retry--;
   2535a:	2316      	movs	r3, #22
   2535c:	18fb      	adds	r3, r7, r3
   2535e:	781a      	ldrb	r2, [r3, #0]
   25360:	2316      	movs	r3, #22
   25362:	18fb      	adds	r3, r7, r3
   25364:	3a01      	subs	r2, #1
   25366:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   25368:	2316      	movs	r3, #22
   2536a:	18fb      	adds	r3, r7, r3
   2536c:	781b      	ldrb	r3, [r3, #0]
   2536e:	2b00      	cmp	r3, #0
   25370:	d000      	beq.n	25374 <nm_spi_write+0x158>
   25372:	e762      	b.n	2523a <nm_spi_write+0x1e>
	}


	return result;
   25374:	2317      	movs	r3, #23
   25376:	18fb      	adds	r3, r7, r3
   25378:	781b      	ldrb	r3, [r3, #0]
   2537a:	b25b      	sxtb	r3, r3
}
   2537c:	0018      	movs	r0, r3
   2537e:	46bd      	mov	sp, r7
   25380:	b007      	add	sp, #28
   25382:	bd90      	pop	{r4, r7, pc}
   25384:	00024605 	.word	0x00024605
   25388:	000003cf 	.word	0x000003cf
   2538c:	0003a160 	.word	0x0003a160
   25390:	00039b18 	.word	0x00039b18
   25394:	0001ebc9 	.word	0x0001ebc9
   25398:	00039ecc 	.word	0x00039ecc
   2539c:	00039b58 	.word	0x00039b58
   253a0:	00024ef9 	.word	0x00024ef9
   253a4:	000003d9 	.word	0x000003d9
   253a8:	00039efc 	.word	0x00039efc
   253ac:	000243c9 	.word	0x000243c9
   253b0:	000003e1 	.word	0x000003e1
   253b4:	0002101d 	.word	0x0002101d
   253b8:	00024089 	.word	0x00024089
   253bc:	000244c9 	.word	0x000244c9
   253c0:	000003eb 	.word	0x000003eb
   253c4:	00039f24 	.word	0x00039f24

000253c8 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   253c8:	b590      	push	{r4, r7, lr}
   253ca:	b087      	sub	sp, #28
   253cc:	af02      	add	r7, sp, #8
   253ce:	6078      	str	r0, [r7, #4]
   253d0:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   253d2:	230f      	movs	r3, #15
   253d4:	18fb      	adds	r3, r7, r3
   253d6:	220a      	movs	r2, #10
   253d8:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   253da:	230c      	movs	r3, #12
   253dc:	18fb      	adds	r3, r7, r3
   253de:	2201      	movs	r2, #1
   253e0:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
   253e2:	230e      	movs	r3, #14
   253e4:	18fb      	adds	r3, r7, r3
   253e6:	22ca      	movs	r2, #202	; 0xca
   253e8:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
   253ea:	230d      	movs	r3, #13
   253ec:	18fb      	adds	r3, r7, r3
   253ee:	2200      	movs	r2, #0
   253f0:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
   253f2:	687b      	ldr	r3, [r7, #4]
   253f4:	2bff      	cmp	r3, #255	; 0xff
   253f6:	d808      	bhi.n	2540a <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
   253f8:	230e      	movs	r3, #14
   253fa:	18fb      	adds	r3, r7, r3
   253fc:	22c4      	movs	r2, #196	; 0xc4
   253fe:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   25400:	230d      	movs	r3, #13
   25402:	18fb      	adds	r3, r7, r3
   25404:	2201      	movs	r2, #1
   25406:	701a      	strb	r2, [r3, #0]
   25408:	e007      	b.n	2541a <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
   2540a:	230e      	movs	r3, #14
   2540c:	18fb      	adds	r3, r7, r3
   2540e:	22ca      	movs	r2, #202	; 0xca
   25410:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   25412:	230d      	movs	r3, #13
   25414:	18fb      	adds	r3, r7, r3
   25416:	2200      	movs	r2, #0
   25418:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   2541a:	2308      	movs	r3, #8
   2541c:	18fa      	adds	r2, r7, r3
   2541e:	6879      	ldr	r1, [r7, #4]
   25420:	230e      	movs	r3, #14
   25422:	18fb      	adds	r3, r7, r3
   25424:	7818      	ldrb	r0, [r3, #0]
   25426:	230d      	movs	r3, #13
   25428:	18fb      	adds	r3, r7, r3
   2542a:	781b      	ldrb	r3, [r3, #0]
   2542c:	9300      	str	r3, [sp, #0]
   2542e:	2304      	movs	r3, #4
   25430:	4c37      	ldr	r4, [pc, #220]	; (25510 <spi_read_reg+0x148>)
   25432:	47a0      	blx	r4
   25434:	0002      	movs	r2, r0
   25436:	230c      	movs	r3, #12
   25438:	18fb      	adds	r3, r7, r3
   2543a:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   2543c:	230c      	movs	r3, #12
   2543e:	18fb      	adds	r3, r7, r3
   25440:	781b      	ldrb	r3, [r3, #0]
   25442:	b25b      	sxtb	r3, r3
   25444:	2b01      	cmp	r3, #1
   25446:	d010      	beq.n	2546a <spi_read_reg+0xa2>
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   25448:	4a32      	ldr	r2, [pc, #200]	; (25514 <spi_read_reg+0x14c>)
   2544a:	4933      	ldr	r1, [pc, #204]	; (25518 <spi_read_reg+0x150>)
   2544c:	4b33      	ldr	r3, [pc, #204]	; (2551c <spi_read_reg+0x154>)
   2544e:	0018      	movs	r0, r3
   25450:	4b33      	ldr	r3, [pc, #204]	; (25520 <spi_read_reg+0x158>)
   25452:	4798      	blx	r3
   25454:	687a      	ldr	r2, [r7, #4]
   25456:	4b33      	ldr	r3, [pc, #204]	; (25524 <spi_read_reg+0x15c>)
   25458:	0011      	movs	r1, r2
   2545a:	0018      	movs	r0, r3
   2545c:	4b30      	ldr	r3, [pc, #192]	; (25520 <spi_read_reg+0x158>)
   2545e:	4798      	blx	r3
   25460:	4b31      	ldr	r3, [pc, #196]	; (25528 <spi_read_reg+0x160>)
   25462:	0018      	movs	r0, r3
   25464:	4b2e      	ldr	r3, [pc, #184]	; (25520 <spi_read_reg+0x158>)
   25466:	4798      	blx	r3
		goto _FAIL_;
   25468:	e014      	b.n	25494 <spi_read_reg+0xcc>
	}

#endif

	*u32data = tmp[0] |
   2546a:	2308      	movs	r3, #8
   2546c:	18fb      	adds	r3, r7, r3
   2546e:	781b      	ldrb	r3, [r3, #0]
   25470:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
   25472:	2308      	movs	r3, #8
   25474:	18fb      	adds	r3, r7, r3
   25476:	785b      	ldrb	r3, [r3, #1]
   25478:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
   2547a:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
   2547c:	2308      	movs	r3, #8
   2547e:	18fb      	adds	r3, r7, r3
   25480:	789b      	ldrb	r3, [r3, #2]
   25482:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
   25484:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
   25486:	2308      	movs	r3, #8
   25488:	18fb      	adds	r3, r7, r3
   2548a:	78db      	ldrb	r3, [r3, #3]
   2548c:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
   2548e:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
   25490:	683b      	ldr	r3, [r7, #0]
   25492:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
   25494:	230c      	movs	r3, #12
   25496:	18fb      	adds	r3, r7, r3
   25498:	781b      	ldrb	r3, [r3, #0]
   2549a:	b25b      	sxtb	r3, r3
   2549c:	2b01      	cmp	r3, #1
   2549e:	d02f      	beq.n	25500 <spi_read_reg+0x138>
	{
		
		nm_bsp_sleep(1);
   254a0:	2001      	movs	r0, #1
   254a2:	4b22      	ldr	r3, [pc, #136]	; (2552c <spi_read_reg+0x164>)
   254a4:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   254a6:	2300      	movs	r3, #0
   254a8:	9300      	str	r3, [sp, #0]
   254aa:	2300      	movs	r3, #0
   254ac:	2200      	movs	r2, #0
   254ae:	2100      	movs	r1, #0
   254b0:	20cf      	movs	r0, #207	; 0xcf
   254b2:	4c1f      	ldr	r4, [pc, #124]	; (25530 <spi_read_reg+0x168>)
   254b4:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   254b6:	20cf      	movs	r0, #207	; 0xcf
   254b8:	4b1e      	ldr	r3, [pc, #120]	; (25534 <spi_read_reg+0x16c>)
   254ba:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   254bc:	4a1e      	ldr	r2, [pc, #120]	; (25538 <spi_read_reg+0x170>)
   254be:	4916      	ldr	r1, [pc, #88]	; (25518 <spi_read_reg+0x150>)
   254c0:	4b16      	ldr	r3, [pc, #88]	; (2551c <spi_read_reg+0x154>)
   254c2:	0018      	movs	r0, r3
   254c4:	4b16      	ldr	r3, [pc, #88]	; (25520 <spi_read_reg+0x158>)
   254c6:	4798      	blx	r3
   254c8:	230f      	movs	r3, #15
   254ca:	18fb      	adds	r3, r7, r3
   254cc:	7819      	ldrb	r1, [r3, #0]
   254ce:	687a      	ldr	r2, [r7, #4]
   254d0:	4b1a      	ldr	r3, [pc, #104]	; (2553c <spi_read_reg+0x174>)
   254d2:	0018      	movs	r0, r3
   254d4:	4b12      	ldr	r3, [pc, #72]	; (25520 <spi_read_reg+0x158>)
   254d6:	4798      	blx	r3
   254d8:	4b13      	ldr	r3, [pc, #76]	; (25528 <spi_read_reg+0x160>)
   254da:	0018      	movs	r0, r3
   254dc:	4b10      	ldr	r3, [pc, #64]	; (25520 <spi_read_reg+0x158>)
   254de:	4798      	blx	r3
		nm_bsp_sleep(1);
   254e0:	2001      	movs	r0, #1
   254e2:	4b12      	ldr	r3, [pc, #72]	; (2552c <spi_read_reg+0x164>)
   254e4:	4798      	blx	r3
		retry--;
   254e6:	230f      	movs	r3, #15
   254e8:	18fb      	adds	r3, r7, r3
   254ea:	781a      	ldrb	r2, [r3, #0]
   254ec:	230f      	movs	r3, #15
   254ee:	18fb      	adds	r3, r7, r3
   254f0:	3a01      	subs	r2, #1
   254f2:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   254f4:	230f      	movs	r3, #15
   254f6:	18fb      	adds	r3, r7, r3
   254f8:	781b      	ldrb	r3, [r3, #0]
   254fa:	2b00      	cmp	r3, #0
   254fc:	d000      	beq.n	25500 <spi_read_reg+0x138>
   254fe:	e778      	b.n	253f2 <spi_read_reg+0x2a>
	}
		
	return result;
   25500:	230c      	movs	r3, #12
   25502:	18fb      	adds	r3, r7, r3
   25504:	781b      	ldrb	r3, [r3, #0]
   25506:	b25b      	sxtb	r3, r3
}
   25508:	0018      	movs	r0, r3
   2550a:	46bd      	mov	sp, r7
   2550c:	b005      	add	sp, #20
   2550e:	bd90      	pop	{r4, r7, pc}
   25510:	00024605 	.word	0x00024605
   25514:	00000423 	.word	0x00000423
   25518:	0003a170 	.word	0x0003a170
   2551c:	00039b18 	.word	0x00039b18
   25520:	0001ebc9 	.word	0x0001ebc9
   25524:	00039f40 	.word	0x00039f40
   25528:	00039b58 	.word	0x00039b58
   2552c:	0002101d 	.word	0x0002101d
   25530:	00024089 	.word	0x00024089
   25534:	000244c9 	.word	0x000244c9
   25538:	00000435 	.word	0x00000435
   2553c:	00039f6c 	.word	0x00039f6c

00025540 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
   25540:	b590      	push	{r4, r7, lr}
   25542:	b089      	sub	sp, #36	; 0x24
   25544:	af02      	add	r7, sp, #8
   25546:	60f8      	str	r0, [r7, #12]
   25548:	60b9      	str	r1, [r7, #8]
   2554a:	1dbb      	adds	r3, r7, #6
   2554c:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
   2554e:	2316      	movs	r3, #22
   25550:	18fb      	adds	r3, r7, r3
   25552:	22c8      	movs	r2, #200	; 0xc8
   25554:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   25556:	2317      	movs	r3, #23
   25558:	18fb      	adds	r3, r7, r3
   2555a:	220a      	movs	r2, #10
   2555c:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   2555e:	1dbb      	adds	r3, r7, #6
   25560:	881c      	ldrh	r4, [r3, #0]
   25562:	68ba      	ldr	r2, [r7, #8]
   25564:	68f9      	ldr	r1, [r7, #12]
   25566:	2316      	movs	r3, #22
   25568:	18fb      	adds	r3, r7, r3
   2556a:	7818      	ldrb	r0, [r3, #0]
   2556c:	2300      	movs	r3, #0
   2556e:	9300      	str	r3, [sp, #0]
   25570:	0023      	movs	r3, r4
   25572:	4c2e      	ldr	r4, [pc, #184]	; (2562c <nm_spi_read+0xec>)
   25574:	47a0      	blx	r4
   25576:	0002      	movs	r2, r0
   25578:	2315      	movs	r3, #21
   2557a:	18fb      	adds	r3, r7, r3
   2557c:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   2557e:	2315      	movs	r3, #21
   25580:	18fb      	adds	r3, r7, r3
   25582:	781b      	ldrb	r3, [r3, #0]
   25584:	b25b      	sxtb	r3, r3
   25586:	2b01      	cmp	r3, #1
   25588:	d010      	beq.n	255ac <nm_spi_read+0x6c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   2558a:	4a29      	ldr	r2, [pc, #164]	; (25630 <nm_spi_read+0xf0>)
   2558c:	4929      	ldr	r1, [pc, #164]	; (25634 <nm_spi_read+0xf4>)
   2558e:	4b2a      	ldr	r3, [pc, #168]	; (25638 <nm_spi_read+0xf8>)
   25590:	0018      	movs	r0, r3
   25592:	4b2a      	ldr	r3, [pc, #168]	; (2563c <nm_spi_read+0xfc>)
   25594:	4798      	blx	r3
   25596:	68fa      	ldr	r2, [r7, #12]
   25598:	4b29      	ldr	r3, [pc, #164]	; (25640 <nm_spi_read+0x100>)
   2559a:	0011      	movs	r1, r2
   2559c:	0018      	movs	r0, r3
   2559e:	4b27      	ldr	r3, [pc, #156]	; (2563c <nm_spi_read+0xfc>)
   255a0:	4798      	blx	r3
   255a2:	4b28      	ldr	r3, [pc, #160]	; (25644 <nm_spi_read+0x104>)
   255a4:	0018      	movs	r0, r3
   255a6:	4b25      	ldr	r3, [pc, #148]	; (2563c <nm_spi_read+0xfc>)
   255a8:	4798      	blx	r3
		goto _FAIL_;
   255aa:	46c0      	nop			; (mov r8, r8)
	}
#endif

_FAIL_:
	if(result != N_OK)
   255ac:	2315      	movs	r3, #21
   255ae:	18fb      	adds	r3, r7, r3
   255b0:	781b      	ldrb	r3, [r3, #0]
   255b2:	b25b      	sxtb	r3, r3
   255b4:	2b01      	cmp	r3, #1
   255b6:	d030      	beq.n	2561a <nm_spi_read+0xda>
	{
		nm_bsp_sleep(1);
   255b8:	2001      	movs	r0, #1
   255ba:	4b23      	ldr	r3, [pc, #140]	; (25648 <nm_spi_read+0x108>)
   255bc:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   255be:	2300      	movs	r3, #0
   255c0:	9300      	str	r3, [sp, #0]
   255c2:	2300      	movs	r3, #0
   255c4:	2200      	movs	r2, #0
   255c6:	2100      	movs	r1, #0
   255c8:	20cf      	movs	r0, #207	; 0xcf
   255ca:	4c20      	ldr	r4, [pc, #128]	; (2564c <nm_spi_read+0x10c>)
   255cc:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   255ce:	20cf      	movs	r0, #207	; 0xcf
   255d0:	4b1f      	ldr	r3, [pc, #124]	; (25650 <nm_spi_read+0x110>)
   255d2:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   255d4:	4a1f      	ldr	r2, [pc, #124]	; (25654 <nm_spi_read+0x114>)
   255d6:	4917      	ldr	r1, [pc, #92]	; (25634 <nm_spi_read+0xf4>)
   255d8:	4b17      	ldr	r3, [pc, #92]	; (25638 <nm_spi_read+0xf8>)
   255da:	0018      	movs	r0, r3
   255dc:	4b17      	ldr	r3, [pc, #92]	; (2563c <nm_spi_read+0xfc>)
   255de:	4798      	blx	r3
   255e0:	2317      	movs	r3, #23
   255e2:	18fb      	adds	r3, r7, r3
   255e4:	7819      	ldrb	r1, [r3, #0]
   255e6:	1dbb      	adds	r3, r7, #6
   255e8:	881b      	ldrh	r3, [r3, #0]
   255ea:	68fa      	ldr	r2, [r7, #12]
   255ec:	481a      	ldr	r0, [pc, #104]	; (25658 <nm_spi_read+0x118>)
   255ee:	4c13      	ldr	r4, [pc, #76]	; (2563c <nm_spi_read+0xfc>)
   255f0:	47a0      	blx	r4
   255f2:	4b14      	ldr	r3, [pc, #80]	; (25644 <nm_spi_read+0x104>)
   255f4:	0018      	movs	r0, r3
   255f6:	4b11      	ldr	r3, [pc, #68]	; (2563c <nm_spi_read+0xfc>)
   255f8:	4798      	blx	r3
		nm_bsp_sleep(1);
   255fa:	2001      	movs	r0, #1
   255fc:	4b12      	ldr	r3, [pc, #72]	; (25648 <nm_spi_read+0x108>)
   255fe:	4798      	blx	r3
		retry--;
   25600:	2317      	movs	r3, #23
   25602:	18fb      	adds	r3, r7, r3
   25604:	781a      	ldrb	r2, [r3, #0]
   25606:	2317      	movs	r3, #23
   25608:	18fb      	adds	r3, r7, r3
   2560a:	3a01      	subs	r2, #1
   2560c:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   2560e:	2317      	movs	r3, #23
   25610:	18fb      	adds	r3, r7, r3
   25612:	781b      	ldrb	r3, [r3, #0]
   25614:	2b00      	cmp	r3, #0
   25616:	d000      	beq.n	2561a <nm_spi_read+0xda>
   25618:	e7a1      	b.n	2555e <nm_spi_read+0x1e>
	}

	return result;
   2561a:	2315      	movs	r3, #21
   2561c:	18fb      	adds	r3, r7, r3
   2561e:	781b      	ldrb	r3, [r3, #0]
   25620:	b25b      	sxtb	r3, r3
}
   25622:	0018      	movs	r0, r3
   25624:	46bd      	mov	sp, r7
   25626:	b007      	add	sp, #28
   25628:	bd90      	pop	{r4, r7, pc}
   2562a:	46c0      	nop			; (mov r8, r8)
   2562c:	00024605 	.word	0x00024605
   25630:	00000472 	.word	0x00000472
   25634:	0003a180 	.word	0x0003a180
   25638:	00039b18 	.word	0x00039b18
   2563c:	0001ebc9 	.word	0x0001ebc9
   25640:	00039f84 	.word	0x00039f84
   25644:	00039b58 	.word	0x00039b58
   25648:	0002101d 	.word	0x0002101d
   2564c:	00024089 	.word	0x00024089
   25650:	000244c9 	.word	0x000244c9
   25654:	0000047d 	.word	0x0000047d
   25658:	00039f24 	.word	0x00039f24

0002565c <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
   2565c:	b580      	push	{r7, lr}
   2565e:	b082      	sub	sp, #8
   25660:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   25662:	4b0c      	ldr	r3, [pc, #48]	; (25694 <spi_init_pkt_sz+0x38>)
   25664:	0018      	movs	r0, r3
   25666:	4b0c      	ldr	r3, [pc, #48]	; (25698 <spi_init_pkt_sz+0x3c>)
   25668:	4798      	blx	r3
   2566a:	0003      	movs	r3, r0
   2566c:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
   2566e:	687b      	ldr	r3, [r7, #4]
   25670:	2270      	movs	r2, #112	; 0x70
   25672:	4393      	bics	r3, r2
   25674:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
   25676:	687b      	ldr	r3, [r7, #4]
   25678:	2250      	movs	r2, #80	; 0x50
   2567a:	4313      	orrs	r3, r2
   2567c:	607b      	str	r3, [r7, #4]
   2567e:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   25680:	687b      	ldr	r3, [r7, #4]
   25682:	4a04      	ldr	r2, [pc, #16]	; (25694 <spi_init_pkt_sz+0x38>)
   25684:	0019      	movs	r1, r3
   25686:	0010      	movs	r0, r2
   25688:	4b04      	ldr	r3, [pc, #16]	; (2569c <spi_init_pkt_sz+0x40>)
   2568a:	4798      	blx	r3
}
   2568c:	46c0      	nop			; (mov r8, r8)
   2568e:	46bd      	mov	sp, r7
   25690:	b002      	add	sp, #8
   25692:	bd80      	pop	{r7, pc}
   25694:	0000e824 	.word	0x0000e824
   25698:	00025835 	.word	0x00025835
   2569c:	000258a9 	.word	0x000258a9

000256a0 <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
   256a0:	b590      	push	{r4, r7, lr}
   256a2:	b083      	sub	sp, #12
   256a4:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   256a6:	2300      	movs	r3, #0
   256a8:	9300      	str	r3, [sp, #0]
   256aa:	2300      	movs	r3, #0
   256ac:	2200      	movs	r2, #0
   256ae:	2100      	movs	r1, #0
   256b0:	20cf      	movs	r0, #207	; 0xcf
   256b2:	4c05      	ldr	r4, [pc, #20]	; (256c8 <nm_spi_reset+0x28>)
   256b4:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   256b6:	20cf      	movs	r0, #207	; 0xcf
   256b8:	4b04      	ldr	r3, [pc, #16]	; (256cc <nm_spi_reset+0x2c>)
   256ba:	4798      	blx	r3
	return M2M_SUCCESS;
   256bc:	2300      	movs	r3, #0
}
   256be:	0018      	movs	r0, r3
   256c0:	46bd      	mov	sp, r7
   256c2:	b001      	add	sp, #4
   256c4:	bd90      	pop	{r4, r7, pc}
   256c6:	46c0      	nop			; (mov r8, r8)
   256c8:	00024089 	.word	0x00024089
   256cc:	000244c9 	.word	0x000244c9

000256d0 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
   256d0:	b580      	push	{r7, lr}
   256d2:	b082      	sub	sp, #8
   256d4:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
   256d6:	2300      	movs	r3, #0
   256d8:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
   256da:	4b40      	ldr	r3, [pc, #256]	; (257dc <nm_spi_init+0x10c>)
   256dc:	2200      	movs	r2, #0
   256de:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   256e0:	003b      	movs	r3, r7
   256e2:	4a3f      	ldr	r2, [pc, #252]	; (257e0 <nm_spi_init+0x110>)
   256e4:	0019      	movs	r1, r3
   256e6:	0010      	movs	r0, r2
   256e8:	4b3e      	ldr	r3, [pc, #248]	; (257e4 <nm_spi_init+0x114>)
   256ea:	4798      	blx	r3
   256ec:	1e03      	subs	r3, r0, #0
   256ee:	d129      	bne.n	25744 <nm_spi_init+0x74>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
   256f0:	4b3a      	ldr	r3, [pc, #232]	; (257dc <nm_spi_init+0x10c>)
   256f2:	2201      	movs	r2, #1
   256f4:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   256f6:	2398      	movs	r3, #152	; 0x98
   256f8:	00da      	lsls	r2, r3, #3
   256fa:	493b      	ldr	r1, [pc, #236]	; (257e8 <nm_spi_init+0x118>)
   256fc:	4b3b      	ldr	r3, [pc, #236]	; (257ec <nm_spi_init+0x11c>)
   256fe:	0018      	movs	r0, r3
   25700:	4b3b      	ldr	r3, [pc, #236]	; (257f0 <nm_spi_init+0x120>)
   25702:	4798      	blx	r3
   25704:	4b3b      	ldr	r3, [pc, #236]	; (257f4 <nm_spi_init+0x124>)
   25706:	0018      	movs	r0, r3
   25708:	4b39      	ldr	r3, [pc, #228]	; (257f0 <nm_spi_init+0x120>)
   2570a:	4798      	blx	r3
   2570c:	4b3a      	ldr	r3, [pc, #232]	; (257f8 <nm_spi_init+0x128>)
   2570e:	0018      	movs	r0, r3
   25710:	4b37      	ldr	r3, [pc, #220]	; (257f0 <nm_spi_init+0x120>)
   25712:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   25714:	003b      	movs	r3, r7
   25716:	4a32      	ldr	r2, [pc, #200]	; (257e0 <nm_spi_init+0x110>)
   25718:	0019      	movs	r1, r3
   2571a:	0010      	movs	r0, r2
   2571c:	4b31      	ldr	r3, [pc, #196]	; (257e4 <nm_spi_init+0x114>)
   2571e:	4798      	blx	r3
   25720:	1e03      	subs	r3, r0, #0
   25722:	d10f      	bne.n	25744 <nm_spi_init+0x74>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   25724:	4a35      	ldr	r2, [pc, #212]	; (257fc <nm_spi_init+0x12c>)
   25726:	4930      	ldr	r1, [pc, #192]	; (257e8 <nm_spi_init+0x118>)
   25728:	4b30      	ldr	r3, [pc, #192]	; (257ec <nm_spi_init+0x11c>)
   2572a:	0018      	movs	r0, r3
   2572c:	4b30      	ldr	r3, [pc, #192]	; (257f0 <nm_spi_init+0x120>)
   2572e:	4798      	blx	r3
   25730:	4b33      	ldr	r3, [pc, #204]	; (25800 <nm_spi_init+0x130>)
   25732:	0018      	movs	r0, r3
   25734:	4b2e      	ldr	r3, [pc, #184]	; (257f0 <nm_spi_init+0x120>)
   25736:	4798      	blx	r3
   25738:	4b2f      	ldr	r3, [pc, #188]	; (257f8 <nm_spi_init+0x128>)
   2573a:	0018      	movs	r0, r3
   2573c:	4b2c      	ldr	r3, [pc, #176]	; (257f0 <nm_spi_init+0x120>)
   2573e:	4798      	blx	r3
			return 0;
   25740:	2300      	movs	r3, #0
   25742:	e047      	b.n	257d4 <nm_spi_init+0x104>
		}
	}
	if(gu8Crc_off == 0)
   25744:	4b25      	ldr	r3, [pc, #148]	; (257dc <nm_spi_init+0x10c>)
   25746:	781b      	ldrb	r3, [r3, #0]
   25748:	2b00      	cmp	r3, #0
   2574a:	d126      	bne.n	2579a <nm_spi_init+0xca>
	{
		reg &= ~0xc;	/* disable crc checking */
   2574c:	683b      	ldr	r3, [r7, #0]
   2574e:	220c      	movs	r2, #12
   25750:	4393      	bics	r3, r2
   25752:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
   25754:	683b      	ldr	r3, [r7, #0]
   25756:	2270      	movs	r2, #112	; 0x70
   25758:	4393      	bics	r3, r2
   2575a:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
   2575c:	683b      	ldr	r3, [r7, #0]
   2575e:	2250      	movs	r2, #80	; 0x50
   25760:	4313      	orrs	r3, r2
   25762:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   25764:	683b      	ldr	r3, [r7, #0]
   25766:	4a1e      	ldr	r2, [pc, #120]	; (257e0 <nm_spi_init+0x110>)
   25768:	0019      	movs	r1, r3
   2576a:	0010      	movs	r0, r2
   2576c:	4b25      	ldr	r3, [pc, #148]	; (25804 <nm_spi_init+0x134>)
   2576e:	4798      	blx	r3
   25770:	1e03      	subs	r3, r0, #0
   25772:	d10f      	bne.n	25794 <nm_spi_init+0xc4>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   25774:	4a24      	ldr	r2, [pc, #144]	; (25808 <nm_spi_init+0x138>)
   25776:	491c      	ldr	r1, [pc, #112]	; (257e8 <nm_spi_init+0x118>)
   25778:	4b1c      	ldr	r3, [pc, #112]	; (257ec <nm_spi_init+0x11c>)
   2577a:	0018      	movs	r0, r3
   2577c:	4b1c      	ldr	r3, [pc, #112]	; (257f0 <nm_spi_init+0x120>)
   2577e:	4798      	blx	r3
   25780:	4b22      	ldr	r3, [pc, #136]	; (2580c <nm_spi_init+0x13c>)
   25782:	0018      	movs	r0, r3
   25784:	4b1a      	ldr	r3, [pc, #104]	; (257f0 <nm_spi_init+0x120>)
   25786:	4798      	blx	r3
   25788:	4b1b      	ldr	r3, [pc, #108]	; (257f8 <nm_spi_init+0x128>)
   2578a:	0018      	movs	r0, r3
   2578c:	4b18      	ldr	r3, [pc, #96]	; (257f0 <nm_spi_init+0x120>)
   2578e:	4798      	blx	r3
			return 0;
   25790:	2300      	movs	r3, #0
   25792:	e01f      	b.n	257d4 <nm_spi_init+0x104>
		}
		gu8Crc_off = 1;
   25794:	4b11      	ldr	r3, [pc, #68]	; (257dc <nm_spi_init+0x10c>)
   25796:	2201      	movs	r2, #1
   25798:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
   2579a:	1d3a      	adds	r2, r7, #4
   2579c:	2380      	movs	r3, #128	; 0x80
   2579e:	015b      	lsls	r3, r3, #5
   257a0:	0011      	movs	r1, r2
   257a2:	0018      	movs	r0, r3
   257a4:	4b0f      	ldr	r3, [pc, #60]	; (257e4 <nm_spi_init+0x114>)
   257a6:	4798      	blx	r3
   257a8:	1e03      	subs	r3, r0, #0
   257aa:	d110      	bne.n	257ce <nm_spi_init+0xfe>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   257ac:	4a18      	ldr	r2, [pc, #96]	; (25810 <nm_spi_init+0x140>)
   257ae:	490e      	ldr	r1, [pc, #56]	; (257e8 <nm_spi_init+0x118>)
   257b0:	4b0e      	ldr	r3, [pc, #56]	; (257ec <nm_spi_init+0x11c>)
   257b2:	0018      	movs	r0, r3
   257b4:	4b0e      	ldr	r3, [pc, #56]	; (257f0 <nm_spi_init+0x120>)
   257b6:	4798      	blx	r3
   257b8:	4b16      	ldr	r3, [pc, #88]	; (25814 <nm_spi_init+0x144>)
   257ba:	0018      	movs	r0, r3
   257bc:	4b0c      	ldr	r3, [pc, #48]	; (257f0 <nm_spi_init+0x120>)
   257be:	4798      	blx	r3
   257c0:	4b0d      	ldr	r3, [pc, #52]	; (257f8 <nm_spi_init+0x128>)
   257c2:	0018      	movs	r0, r3
   257c4:	4b0a      	ldr	r3, [pc, #40]	; (257f0 <nm_spi_init+0x120>)
   257c6:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
   257c8:	2306      	movs	r3, #6
   257ca:	425b      	negs	r3, r3
   257cc:	e002      	b.n	257d4 <nm_spi_init+0x104>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
   257ce:	4b12      	ldr	r3, [pc, #72]	; (25818 <nm_spi_init+0x148>)
   257d0:	4798      	blx	r3


	return M2M_SUCCESS;
   257d2:	2300      	movs	r3, #0
}
   257d4:	0018      	movs	r0, r3
   257d6:	46bd      	mov	sp, r7
   257d8:	b002      	add	sp, #8
   257da:	bd80      	pop	{r7, pc}
   257dc:	200042b0 	.word	0x200042b0
   257e0:	0000e824 	.word	0x0000e824
   257e4:	000253c9 	.word	0x000253c9
   257e8:	0003a18c 	.word	0x0003a18c
   257ec:	00039b18 	.word	0x00039b18
   257f0:	0001ebc9 	.word	0x0001ebc9
   257f4:	00039fb4 	.word	0x00039fb4
   257f8:	00039b58 	.word	0x00039b58
   257fc:	000004c3 	.word	0x000004c3
   25800:	0003a004 	.word	0x0003a004
   25804:	000250d1 	.word	0x000250d1
   25808:	000004cd 	.word	0x000004cd
   2580c:	0003a034 	.word	0x0003a034
   25810:	000004d7 	.word	0x000004d7
   25814:	0003a068 	.word	0x0003a068
   25818:	0002565d 	.word	0x0002565d

0002581c <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
   2581c:	b580      	push	{r7, lr}
   2581e:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
   25820:	4b03      	ldr	r3, [pc, #12]	; (25830 <nm_spi_deinit+0x14>)
   25822:	2200      	movs	r2, #0
   25824:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
   25826:	2300      	movs	r3, #0
}
   25828:	0018      	movs	r0, r3
   2582a:	46bd      	mov	sp, r7
   2582c:	bd80      	pop	{r7, pc}
   2582e:	46c0      	nop			; (mov r8, r8)
   25830:	200042b0 	.word	0x200042b0

00025834 <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   25834:	b580      	push	{r7, lr}
   25836:	b084      	sub	sp, #16
   25838:	af00      	add	r7, sp, #0
   2583a:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   2583c:	230c      	movs	r3, #12
   2583e:	18fa      	adds	r2, r7, r3
   25840:	687b      	ldr	r3, [r7, #4]
   25842:	0011      	movs	r1, r2
   25844:	0018      	movs	r0, r3
   25846:	4b03      	ldr	r3, [pc, #12]	; (25854 <nm_spi_read_reg+0x20>)
   25848:	4798      	blx	r3

	return u32Val;
   2584a:	68fb      	ldr	r3, [r7, #12]
}
   2584c:	0018      	movs	r0, r3
   2584e:	46bd      	mov	sp, r7
   25850:	b004      	add	sp, #16
   25852:	bd80      	pop	{r7, pc}
   25854:	000253c9 	.word	0x000253c9

00025858 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   25858:	b590      	push	{r4, r7, lr}
   2585a:	b085      	sub	sp, #20
   2585c:	af00      	add	r7, sp, #0
   2585e:	6078      	str	r0, [r7, #4]
   25860:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   25862:	230f      	movs	r3, #15
   25864:	18fc      	adds	r4, r7, r3
   25866:	683a      	ldr	r2, [r7, #0]
   25868:	687b      	ldr	r3, [r7, #4]
   2586a:	0011      	movs	r1, r2
   2586c:	0018      	movs	r0, r3
   2586e:	4b0d      	ldr	r3, [pc, #52]	; (258a4 <nm_spi_read_reg_with_ret+0x4c>)
   25870:	4798      	blx	r3
   25872:	0003      	movs	r3, r0
   25874:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   25876:	230f      	movs	r3, #15
   25878:	18fb      	adds	r3, r7, r3
   2587a:	781b      	ldrb	r3, [r3, #0]
   2587c:	b25b      	sxtb	r3, r3
   2587e:	2b01      	cmp	r3, #1
   25880:	d104      	bne.n	2588c <nm_spi_read_reg_with_ret+0x34>
   25882:	230f      	movs	r3, #15
   25884:	18fb      	adds	r3, r7, r3
   25886:	2200      	movs	r2, #0
   25888:	701a      	strb	r2, [r3, #0]
   2588a:	e003      	b.n	25894 <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   2588c:	230f      	movs	r3, #15
   2588e:	18fb      	adds	r3, r7, r3
   25890:	22fa      	movs	r2, #250	; 0xfa
   25892:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   25894:	230f      	movs	r3, #15
   25896:	18fb      	adds	r3, r7, r3
   25898:	781b      	ldrb	r3, [r3, #0]
   2589a:	b25b      	sxtb	r3, r3
}
   2589c:	0018      	movs	r0, r3
   2589e:	46bd      	mov	sp, r7
   258a0:	b005      	add	sp, #20
   258a2:	bd90      	pop	{r4, r7, pc}
   258a4:	000253c9 	.word	0x000253c9

000258a8 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   258a8:	b590      	push	{r4, r7, lr}
   258aa:	b085      	sub	sp, #20
   258ac:	af00      	add	r7, sp, #0
   258ae:	6078      	str	r0, [r7, #4]
   258b0:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   258b2:	230f      	movs	r3, #15
   258b4:	18fc      	adds	r4, r7, r3
   258b6:	683a      	ldr	r2, [r7, #0]
   258b8:	687b      	ldr	r3, [r7, #4]
   258ba:	0011      	movs	r1, r2
   258bc:	0018      	movs	r0, r3
   258be:	4b0d      	ldr	r3, [pc, #52]	; (258f4 <nm_spi_write_reg+0x4c>)
   258c0:	4798      	blx	r3
   258c2:	0003      	movs	r3, r0
   258c4:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   258c6:	230f      	movs	r3, #15
   258c8:	18fb      	adds	r3, r7, r3
   258ca:	781b      	ldrb	r3, [r3, #0]
   258cc:	b25b      	sxtb	r3, r3
   258ce:	2b01      	cmp	r3, #1
   258d0:	d104      	bne.n	258dc <nm_spi_write_reg+0x34>
   258d2:	230f      	movs	r3, #15
   258d4:	18fb      	adds	r3, r7, r3
   258d6:	2200      	movs	r2, #0
   258d8:	701a      	strb	r2, [r3, #0]
   258da:	e003      	b.n	258e4 <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   258dc:	230f      	movs	r3, #15
   258de:	18fb      	adds	r3, r7, r3
   258e0:	22fa      	movs	r2, #250	; 0xfa
   258e2:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   258e4:	230f      	movs	r3, #15
   258e6:	18fb      	adds	r3, r7, r3
   258e8:	781b      	ldrb	r3, [r3, #0]
   258ea:	b25b      	sxtb	r3, r3
}
   258ec:	0018      	movs	r0, r3
   258ee:	46bd      	mov	sp, r7
   258f0:	b005      	add	sp, #20
   258f2:	bd90      	pop	{r4, r7, pc}
   258f4:	000250d1 	.word	0x000250d1

000258f8 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   258f8:	b590      	push	{r4, r7, lr}
   258fa:	b087      	sub	sp, #28
   258fc:	af00      	add	r7, sp, #0
   258fe:	60f8      	str	r0, [r7, #12]
   25900:	60b9      	str	r1, [r7, #8]
   25902:	1dbb      	adds	r3, r7, #6
   25904:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
   25906:	2317      	movs	r3, #23
   25908:	18fc      	adds	r4, r7, r3
   2590a:	1dbb      	adds	r3, r7, #6
   2590c:	881a      	ldrh	r2, [r3, #0]
   2590e:	68b9      	ldr	r1, [r7, #8]
   25910:	68fb      	ldr	r3, [r7, #12]
   25912:	0018      	movs	r0, r3
   25914:	4b0d      	ldr	r3, [pc, #52]	; (2594c <nm_spi_read_block+0x54>)
   25916:	4798      	blx	r3
   25918:	0003      	movs	r3, r0
   2591a:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   2591c:	2317      	movs	r3, #23
   2591e:	18fb      	adds	r3, r7, r3
   25920:	781b      	ldrb	r3, [r3, #0]
   25922:	b25b      	sxtb	r3, r3
   25924:	2b01      	cmp	r3, #1
   25926:	d104      	bne.n	25932 <nm_spi_read_block+0x3a>
   25928:	2317      	movs	r3, #23
   2592a:	18fb      	adds	r3, r7, r3
   2592c:	2200      	movs	r2, #0
   2592e:	701a      	strb	r2, [r3, #0]
   25930:	e003      	b.n	2593a <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   25932:	2317      	movs	r3, #23
   25934:	18fb      	adds	r3, r7, r3
   25936:	22fa      	movs	r2, #250	; 0xfa
   25938:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   2593a:	2317      	movs	r3, #23
   2593c:	18fb      	adds	r3, r7, r3
   2593e:	781b      	ldrb	r3, [r3, #0]
   25940:	b25b      	sxtb	r3, r3
}
   25942:	0018      	movs	r0, r3
   25944:	46bd      	mov	sp, r7
   25946:	b007      	add	sp, #28
   25948:	bd90      	pop	{r4, r7, pc}
   2594a:	46c0      	nop			; (mov r8, r8)
   2594c:	00025541 	.word	0x00025541

00025950 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   25950:	b590      	push	{r4, r7, lr}
   25952:	b087      	sub	sp, #28
   25954:	af00      	add	r7, sp, #0
   25956:	60f8      	str	r0, [r7, #12]
   25958:	60b9      	str	r1, [r7, #8]
   2595a:	1dbb      	adds	r3, r7, #6
   2595c:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
   2595e:	2317      	movs	r3, #23
   25960:	18fc      	adds	r4, r7, r3
   25962:	1dbb      	adds	r3, r7, #6
   25964:	881a      	ldrh	r2, [r3, #0]
   25966:	68b9      	ldr	r1, [r7, #8]
   25968:	68fb      	ldr	r3, [r7, #12]
   2596a:	0018      	movs	r0, r3
   2596c:	4b0d      	ldr	r3, [pc, #52]	; (259a4 <nm_spi_write_block+0x54>)
   2596e:	4798      	blx	r3
   25970:	0003      	movs	r3, r0
   25972:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   25974:	2317      	movs	r3, #23
   25976:	18fb      	adds	r3, r7, r3
   25978:	781b      	ldrb	r3, [r3, #0]
   2597a:	b25b      	sxtb	r3, r3
   2597c:	2b01      	cmp	r3, #1
   2597e:	d104      	bne.n	2598a <nm_spi_write_block+0x3a>
   25980:	2317      	movs	r3, #23
   25982:	18fb      	adds	r3, r7, r3
   25984:	2200      	movs	r2, #0
   25986:	701a      	strb	r2, [r3, #0]
   25988:	e003      	b.n	25992 <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   2598a:	2317      	movs	r3, #23
   2598c:	18fb      	adds	r3, r7, r3
   2598e:	22fa      	movs	r2, #250	; 0xfa
   25990:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   25992:	2317      	movs	r3, #23
   25994:	18fb      	adds	r3, r7, r3
   25996:	781b      	ldrb	r3, [r3, #0]
   25998:	b25b      	sxtb	r3, r3
}
   2599a:	0018      	movs	r0, r3
   2599c:	46bd      	mov	sp, r7
   2599e:	b007      	add	sp, #28
   259a0:	bd90      	pop	{r4, r7, pc}
   259a2:	46c0      	nop			; (mov r8, r8)
   259a4:	0002521d 	.word	0x0002521d

000259a8 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   259a8:	b590      	push	{r4, r7, lr}
   259aa:	b089      	sub	sp, #36	; 0x24
   259ac:	af00      	add	r7, sp, #0
   259ae:	60b9      	str	r1, [r7, #8]
   259b0:	0011      	movs	r1, r2
   259b2:	607b      	str	r3, [r7, #4]
   259b4:	230f      	movs	r3, #15
   259b6:	18fb      	adds	r3, r7, r3
   259b8:	1c02      	adds	r2, r0, #0
   259ba:	701a      	strb	r2, [r3, #0]
   259bc:	230e      	movs	r3, #14
   259be:	18fb      	adds	r3, r7, r3
   259c0:	1c0a      	adds	r2, r1, #0
   259c2:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   259c4:	2330      	movs	r3, #48	; 0x30
   259c6:	18fb      	adds	r3, r7, r3
   259c8:	881b      	ldrh	r3, [r3, #0]
   259ca:	2b00      	cmp	r3, #0
   259cc:	d100      	bne.n	259d0 <Socket_ReadSocketData+0x28>
   259ce:	e0d7      	b.n	25b80 <Socket_ReadSocketData+0x1d8>
   259d0:	230f      	movs	r3, #15
   259d2:	18fb      	adds	r3, r7, r3
   259d4:	2200      	movs	r2, #0
   259d6:	569a      	ldrsb	r2, [r3, r2]
   259d8:	4b6b      	ldr	r3, [pc, #428]	; (25b88 <Socket_ReadSocketData+0x1e0>)
   259da:	0112      	lsls	r2, r2, #4
   259dc:	58d3      	ldr	r3, [r2, r3]
   259de:	2b00      	cmp	r3, #0
   259e0:	d100      	bne.n	259e4 <Socket_ReadSocketData+0x3c>
   259e2:	e0cd      	b.n	25b80 <Socket_ReadSocketData+0x1d8>
   259e4:	230f      	movs	r3, #15
   259e6:	18fb      	adds	r3, r7, r3
   259e8:	781b      	ldrb	r3, [r3, #0]
   259ea:	b25b      	sxtb	r3, r3
   259ec:	4a66      	ldr	r2, [pc, #408]	; (25b88 <Socket_ReadSocketData+0x1e0>)
   259ee:	011b      	lsls	r3, r3, #4
   259f0:	18d3      	adds	r3, r2, r3
   259f2:	3304      	adds	r3, #4
   259f4:	881b      	ldrh	r3, [r3, #0]
   259f6:	b29b      	uxth	r3, r3
   259f8:	2b00      	cmp	r3, #0
   259fa:	d100      	bne.n	259fe <Socket_ReadSocketData+0x56>
   259fc:	e0c0      	b.n	25b80 <Socket_ReadSocketData+0x1d8>
   259fe:	230f      	movs	r3, #15
   25a00:	18fb      	adds	r3, r7, r3
   25a02:	781b      	ldrb	r3, [r3, #0]
   25a04:	b25b      	sxtb	r3, r3
   25a06:	4a60      	ldr	r2, [pc, #384]	; (25b88 <Socket_ReadSocketData+0x1e0>)
   25a08:	011b      	lsls	r3, r3, #4
   25a0a:	18d3      	adds	r3, r2, r3
   25a0c:	330a      	adds	r3, #10
   25a0e:	781b      	ldrb	r3, [r3, #0]
   25a10:	b2db      	uxtb	r3, r3
   25a12:	2b01      	cmp	r3, #1
   25a14:	d000      	beq.n	25a18 <Socket_ReadSocketData+0x70>
   25a16:	e0b3      	b.n	25b80 <Socket_ReadSocketData+0x1d8>
	{
		uint32	u32Address = u32StartAddress;
   25a18:	687b      	ldr	r3, [r7, #4]
   25a1a:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   25a1c:	68bb      	ldr	r3, [r7, #8]
   25a1e:	2230      	movs	r2, #48	; 0x30
   25a20:	18ba      	adds	r2, r7, r2
   25a22:	8812      	ldrh	r2, [r2, #0]
   25a24:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
   25a26:	2319      	movs	r3, #25
   25a28:	18fb      	adds	r3, r7, r3
   25a2a:	2201      	movs	r2, #1
   25a2c:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
   25a2e:	231a      	movs	r3, #26
   25a30:	18fb      	adds	r3, r7, r3
   25a32:	2230      	movs	r2, #48	; 0x30
   25a34:	18ba      	adds	r2, r7, r2
   25a36:	8812      	ldrh	r2, [r2, #0]
   25a38:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   25a3a:	230f      	movs	r3, #15
   25a3c:	18fb      	adds	r3, r7, r3
   25a3e:	781b      	ldrb	r3, [r3, #0]
   25a40:	b25b      	sxtb	r3, r3
   25a42:	4a51      	ldr	r2, [pc, #324]	; (25b88 <Socket_ReadSocketData+0x1e0>)
   25a44:	011b      	lsls	r3, r3, #4
   25a46:	18d3      	adds	r3, r2, r3
   25a48:	3304      	adds	r3, #4
   25a4a:	881b      	ldrh	r3, [r3, #0]
   25a4c:	b29b      	uxth	r3, r3
   25a4e:	221a      	movs	r2, #26
   25a50:	18ba      	adds	r2, r7, r2
   25a52:	8812      	ldrh	r2, [r2, #0]
   25a54:	1ad3      	subs	r3, r2, r3
   25a56:	b29a      	uxth	r2, r3
   25a58:	2316      	movs	r3, #22
   25a5a:	18fb      	adds	r3, r7, r3
   25a5c:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
   25a5e:	2316      	movs	r3, #22
   25a60:	18fb      	adds	r3, r7, r3
   25a62:	2200      	movs	r2, #0
   25a64:	5e9b      	ldrsh	r3, [r3, r2]
   25a66:	2b00      	cmp	r3, #0
   25a68:	dd0f      	ble.n	25a8a <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
   25a6a:	2319      	movs	r3, #25
   25a6c:	18fb      	adds	r3, r7, r3
   25a6e:	2200      	movs	r2, #0
   25a70:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   25a72:	230f      	movs	r3, #15
   25a74:	18fb      	adds	r3, r7, r3
   25a76:	2200      	movs	r2, #0
   25a78:	569a      	ldrsb	r2, [r3, r2]
   25a7a:	231a      	movs	r3, #26
   25a7c:	18fb      	adds	r3, r7, r3
   25a7e:	4942      	ldr	r1, [pc, #264]	; (25b88 <Socket_ReadSocketData+0x1e0>)
   25a80:	0112      	lsls	r2, r2, #4
   25a82:	188a      	adds	r2, r1, r2
   25a84:	3204      	adds	r2, #4
   25a86:	8812      	ldrh	r2, [r2, #0]
   25a88:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   25a8a:	230f      	movs	r3, #15
   25a8c:	18fb      	adds	r3, r7, r3
   25a8e:	2200      	movs	r2, #0
   25a90:	569a      	ldrsb	r2, [r3, r2]
   25a92:	4b3d      	ldr	r3, [pc, #244]	; (25b88 <Socket_ReadSocketData+0x1e0>)
   25a94:	0112      	lsls	r2, r2, #4
   25a96:	58d1      	ldr	r1, [r2, r3]
   25a98:	2319      	movs	r3, #25
   25a9a:	18fb      	adds	r3, r7, r3
   25a9c:	781c      	ldrb	r4, [r3, #0]
   25a9e:	231a      	movs	r3, #26
   25aa0:	18fb      	adds	r3, r7, r3
   25aa2:	881a      	ldrh	r2, [r3, #0]
   25aa4:	69f8      	ldr	r0, [r7, #28]
   25aa6:	0023      	movs	r3, r4
   25aa8:	4c38      	ldr	r4, [pc, #224]	; (25b8c <Socket_ReadSocketData+0x1e4>)
   25aaa:	47a0      	blx	r4
   25aac:	1e03      	subs	r3, r0, #0
   25aae:	d14f      	bne.n	25b50 <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   25ab0:	230f      	movs	r3, #15
   25ab2:	18fb      	adds	r3, r7, r3
   25ab4:	2200      	movs	r2, #0
   25ab6:	569a      	ldrsb	r2, [r3, r2]
   25ab8:	4b33      	ldr	r3, [pc, #204]	; (25b88 <Socket_ReadSocketData+0x1e0>)
   25aba:	0112      	lsls	r2, r2, #4
   25abc:	58d2      	ldr	r2, [r2, r3]
   25abe:	68bb      	ldr	r3, [r7, #8]
   25ac0:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
   25ac2:	231a      	movs	r3, #26
   25ac4:	18fb      	adds	r3, r7, r3
   25ac6:	2200      	movs	r2, #0
   25ac8:	5e9a      	ldrsh	r2, [r3, r2]
   25aca:	68bb      	ldr	r3, [r7, #8]
   25acc:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   25ace:	68bb      	ldr	r3, [r7, #8]
   25ad0:	88da      	ldrh	r2, [r3, #6]
   25ad2:	231a      	movs	r3, #26
   25ad4:	18fb      	adds	r3, r7, r3
   25ad6:	881b      	ldrh	r3, [r3, #0]
   25ad8:	1ad3      	subs	r3, r2, r3
   25ada:	b29a      	uxth	r2, r3
   25adc:	68bb      	ldr	r3, [r7, #8]
   25ade:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
   25ae0:	4b2b      	ldr	r3, [pc, #172]	; (25b90 <Socket_ReadSocketData+0x1e8>)
   25ae2:	681b      	ldr	r3, [r3, #0]
   25ae4:	2b00      	cmp	r3, #0
   25ae6:	d00b      	beq.n	25b00 <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   25ae8:	4b29      	ldr	r3, [pc, #164]	; (25b90 <Socket_ReadSocketData+0x1e8>)
   25aea:	681b      	ldr	r3, [r3, #0]
   25aec:	68bc      	ldr	r4, [r7, #8]
   25aee:	220e      	movs	r2, #14
   25af0:	18ba      	adds	r2, r7, r2
   25af2:	7811      	ldrb	r1, [r2, #0]
   25af4:	220f      	movs	r2, #15
   25af6:	18ba      	adds	r2, r7, r2
   25af8:	2000      	movs	r0, #0
   25afa:	5610      	ldrsb	r0, [r2, r0]
   25afc:	0022      	movs	r2, r4
   25afe:	4798      	blx	r3

				u16ReadCount -= u16Read;
   25b00:	2330      	movs	r3, #48	; 0x30
   25b02:	18f9      	adds	r1, r7, r3
   25b04:	2330      	movs	r3, #48	; 0x30
   25b06:	18fa      	adds	r2, r7, r3
   25b08:	231a      	movs	r3, #26
   25b0a:	18fb      	adds	r3, r7, r3
   25b0c:	8812      	ldrh	r2, [r2, #0]
   25b0e:	881b      	ldrh	r3, [r3, #0]
   25b10:	1ad3      	subs	r3, r2, r3
   25b12:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
   25b14:	231a      	movs	r3, #26
   25b16:	18fb      	adds	r3, r7, r3
   25b18:	881b      	ldrh	r3, [r3, #0]
   25b1a:	69fa      	ldr	r2, [r7, #28]
   25b1c:	18d3      	adds	r3, r2, r3
   25b1e:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   25b20:	230f      	movs	r3, #15
   25b22:	18fb      	adds	r3, r7, r3
   25b24:	781b      	ldrb	r3, [r3, #0]
   25b26:	b25b      	sxtb	r3, r3
   25b28:	4a17      	ldr	r2, [pc, #92]	; (25b88 <Socket_ReadSocketData+0x1e0>)
   25b2a:	011b      	lsls	r3, r3, #4
   25b2c:	18d3      	adds	r3, r2, r3
   25b2e:	330a      	adds	r3, #10
   25b30:	781b      	ldrb	r3, [r3, #0]
   25b32:	b2db      	uxtb	r3, r3
   25b34:	2b00      	cmp	r3, #0
   25b36:	d11c      	bne.n	25b72 <Socket_ReadSocketData+0x1ca>
   25b38:	2330      	movs	r3, #48	; 0x30
   25b3a:	18fb      	adds	r3, r7, r3
   25b3c:	881b      	ldrh	r3, [r3, #0]
   25b3e:	2b00      	cmp	r3, #0
   25b40:	d017      	beq.n	25b72 <Socket_ReadSocketData+0x1ca>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   25b42:	2301      	movs	r3, #1
   25b44:	2200      	movs	r2, #0
   25b46:	2100      	movs	r1, #0
   25b48:	2000      	movs	r0, #0
   25b4a:	4c10      	ldr	r4, [pc, #64]	; (25b8c <Socket_ReadSocketData+0x1e4>)
   25b4c:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
   25b4e:	e017      	b.n	25b80 <Socket_ReadSocketData+0x1d8>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   25b50:	4b10      	ldr	r3, [pc, #64]	; (25b94 <Socket_ReadSocketData+0x1ec>)
   25b52:	0018      	movs	r0, r3
   25b54:	4b10      	ldr	r3, [pc, #64]	; (25b98 <Socket_ReadSocketData+0x1f0>)
   25b56:	4798      	blx	r3
   25b58:	2330      	movs	r3, #48	; 0x30
   25b5a:	18fb      	adds	r3, r7, r3
   25b5c:	881a      	ldrh	r2, [r3, #0]
   25b5e:	4b0f      	ldr	r3, [pc, #60]	; (25b9c <Socket_ReadSocketData+0x1f4>)
   25b60:	0011      	movs	r1, r2
   25b62:	0018      	movs	r0, r3
   25b64:	4b0c      	ldr	r3, [pc, #48]	; (25b98 <Socket_ReadSocketData+0x1f0>)
   25b66:	4798      	blx	r3
   25b68:	4b0d      	ldr	r3, [pc, #52]	; (25ba0 <Socket_ReadSocketData+0x1f8>)
   25b6a:	0018      	movs	r0, r3
   25b6c:	4b0a      	ldr	r3, [pc, #40]	; (25b98 <Socket_ReadSocketData+0x1f0>)
   25b6e:	4798      	blx	r3
				break;
   25b70:	e006      	b.n	25b80 <Socket_ReadSocketData+0x1d8>
			}
		}while(u16ReadCount != 0);
   25b72:	2330      	movs	r3, #48	; 0x30
   25b74:	18fb      	adds	r3, r7, r3
   25b76:	881b      	ldrh	r3, [r3, #0]
   25b78:	2b00      	cmp	r3, #0
   25b7a:	d000      	beq.n	25b7e <Socket_ReadSocketData+0x1d6>
   25b7c:	e753      	b.n	25a26 <Socket_ReadSocketData+0x7e>
	}
}
   25b7e:	e7ff      	b.n	25b80 <Socket_ReadSocketData+0x1d8>
   25b80:	46c0      	nop			; (mov r8, r8)
   25b82:	46bd      	mov	sp, r7
   25b84:	b009      	add	sp, #36	; 0x24
   25b86:	bd90      	pop	{r4, r7, pc}
   25b88:	20005b54 	.word	0x20005b54
   25b8c:	00022479 	.word	0x00022479
   25b90:	20005c04 	.word	0x20005c04
   25b94:	0003a198 	.word	0x0003a198
   25b98:	0001ebc9 	.word	0x0001ebc9
   25b9c:	0003a1a4 	.word	0x0003a1a4
   25ba0:	0003a1b8 	.word	0x0003a1b8

00025ba4 <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   25ba4:	b590      	push	{r4, r7, lr}
   25ba6:	b0bb      	sub	sp, #236	; 0xec
   25ba8:	af02      	add	r7, sp, #8
   25baa:	603a      	str	r2, [r7, #0]
   25bac:	1dfb      	adds	r3, r7, #7
   25bae:	1c02      	adds	r2, r0, #0
   25bb0:	701a      	strb	r2, [r3, #0]
   25bb2:	1d3b      	adds	r3, r7, #4
   25bb4:	1c0a      	adds	r2, r1, #0
   25bb6:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   25bb8:	1dfb      	adds	r3, r7, #7
   25bba:	781b      	ldrb	r3, [r3, #0]
   25bbc:	2b41      	cmp	r3, #65	; 0x41
   25bbe:	d003      	beq.n	25bc8 <m2m_ip_cb+0x24>
   25bc0:	1dfb      	adds	r3, r7, #7
   25bc2:	781b      	ldrb	r3, [r3, #0]
   25bc4:	2b54      	cmp	r3, #84	; 0x54
   25bc6:	d120      	bne.n	25c0a <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   25bc8:	23cc      	movs	r3, #204	; 0xcc
   25bca:	18f9      	adds	r1, r7, r3
   25bcc:	6838      	ldr	r0, [r7, #0]
   25bce:	2300      	movs	r3, #0
   25bd0:	2204      	movs	r2, #4
   25bd2:	4c98      	ldr	r4, [pc, #608]	; (25e34 <m2m_ip_cb+0x290>)
   25bd4:	47a0      	blx	r4
   25bd6:	1e03      	subs	r3, r0, #0
   25bd8:	d000      	beq.n	25bdc <m2m_ip_cb+0x38>
   25bda:	e275      	b.n	260c8 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
   25bdc:	23cc      	movs	r3, #204	; 0xcc
   25bde:	18fb      	adds	r3, r7, r3
   25be0:	2201      	movs	r2, #1
   25be2:	569a      	ldrsb	r2, [r3, r2]
   25be4:	23c8      	movs	r3, #200	; 0xc8
   25be6:	18fb      	adds	r3, r7, r3
   25be8:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   25bea:	4b93      	ldr	r3, [pc, #588]	; (25e38 <m2m_ip_cb+0x294>)
   25bec:	681b      	ldr	r3, [r3, #0]
   25bee:	2b00      	cmp	r3, #0
   25bf0:	d100      	bne.n	25bf4 <m2m_ip_cb+0x50>
   25bf2:	e269      	b.n	260c8 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   25bf4:	4b90      	ldr	r3, [pc, #576]	; (25e38 <m2m_ip_cb+0x294>)
   25bf6:	681b      	ldr	r3, [r3, #0]
   25bf8:	22cc      	movs	r2, #204	; 0xcc
   25bfa:	18ba      	adds	r2, r7, r2
   25bfc:	2000      	movs	r0, #0
   25bfe:	5610      	ldrsb	r0, [r2, r0]
   25c00:	22c8      	movs	r2, #200	; 0xc8
   25c02:	18ba      	adds	r2, r7, r2
   25c04:	2101      	movs	r1, #1
   25c06:	4798      	blx	r3
	{
   25c08:	e25e      	b.n	260c8 <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   25c0a:	1dfb      	adds	r3, r7, #7
   25c0c:	781b      	ldrb	r3, [r3, #0]
   25c0e:	2b42      	cmp	r3, #66	; 0x42
   25c10:	d120      	bne.n	25c54 <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   25c12:	23c4      	movs	r3, #196	; 0xc4
   25c14:	18f9      	adds	r1, r7, r3
   25c16:	6838      	ldr	r0, [r7, #0]
   25c18:	2300      	movs	r3, #0
   25c1a:	2204      	movs	r2, #4
   25c1c:	4c85      	ldr	r4, [pc, #532]	; (25e34 <m2m_ip_cb+0x290>)
   25c1e:	47a0      	blx	r4
   25c20:	1e03      	subs	r3, r0, #0
   25c22:	d000      	beq.n	25c26 <m2m_ip_cb+0x82>
   25c24:	e257      	b.n	260d6 <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
   25c26:	23c4      	movs	r3, #196	; 0xc4
   25c28:	18fb      	adds	r3, r7, r3
   25c2a:	2201      	movs	r2, #1
   25c2c:	569a      	ldrsb	r2, [r3, r2]
   25c2e:	23c0      	movs	r3, #192	; 0xc0
   25c30:	18fb      	adds	r3, r7, r3
   25c32:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   25c34:	4b80      	ldr	r3, [pc, #512]	; (25e38 <m2m_ip_cb+0x294>)
   25c36:	681b      	ldr	r3, [r3, #0]
   25c38:	2b00      	cmp	r3, #0
   25c3a:	d100      	bne.n	25c3e <m2m_ip_cb+0x9a>
   25c3c:	e24b      	b.n	260d6 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   25c3e:	4b7e      	ldr	r3, [pc, #504]	; (25e38 <m2m_ip_cb+0x294>)
   25c40:	681b      	ldr	r3, [r3, #0]
   25c42:	22c4      	movs	r2, #196	; 0xc4
   25c44:	18ba      	adds	r2, r7, r2
   25c46:	2000      	movs	r0, #0
   25c48:	5610      	ldrsb	r0, [r2, r0]
   25c4a:	22c0      	movs	r2, #192	; 0xc0
   25c4c:	18ba      	adds	r2, r7, r2
   25c4e:	2102      	movs	r1, #2
   25c50:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
   25c52:	e240      	b.n	260d6 <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   25c54:	1dfb      	adds	r3, r7, #7
   25c56:	781b      	ldrb	r3, [r3, #0]
   25c58:	2b43      	cmp	r3, #67	; 0x43
   25c5a:	d000      	beq.n	25c5e <m2m_ip_cb+0xba>
   25c5c:	e086      	b.n	25d6c <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   25c5e:	23b4      	movs	r3, #180	; 0xb4
   25c60:	18f9      	adds	r1, r7, r3
   25c62:	6838      	ldr	r0, [r7, #0]
   25c64:	2300      	movs	r3, #0
   25c66:	220c      	movs	r2, #12
   25c68:	4c72      	ldr	r4, [pc, #456]	; (25e34 <m2m_ip_cb+0x290>)
   25c6a:	47a0      	blx	r4
   25c6c:	1e03      	subs	r3, r0, #0
   25c6e:	d000      	beq.n	25c72 <m2m_ip_cb+0xce>
   25c70:	e231      	b.n	260d6 <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
   25c72:	23b4      	movs	r3, #180	; 0xb4
   25c74:	18fb      	adds	r3, r7, r3
   25c76:	7a5b      	ldrb	r3, [r3, #9]
   25c78:	b25b      	sxtb	r3, r3
   25c7a:	2b00      	cmp	r3, #0
   25c7c:	db4f      	blt.n	25d1e <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   25c7e:	23b4      	movs	r3, #180	; 0xb4
   25c80:	18fb      	adds	r3, r7, r3
   25c82:	7a5b      	ldrb	r3, [r3, #9]
   25c84:	b25b      	sxtb	r3, r3
   25c86:	0018      	movs	r0, r3
   25c88:	23b4      	movs	r3, #180	; 0xb4
   25c8a:	18fb      	adds	r3, r7, r3
   25c8c:	7a1b      	ldrb	r3, [r3, #8]
   25c8e:	b25b      	sxtb	r3, r3
   25c90:	4a6a      	ldr	r2, [pc, #424]	; (25e3c <m2m_ip_cb+0x298>)
   25c92:	011b      	lsls	r3, r3, #4
   25c94:	18d3      	adds	r3, r2, r3
   25c96:	330b      	adds	r3, #11
   25c98:	781b      	ldrb	r3, [r3, #0]
   25c9a:	b2d9      	uxtb	r1, r3
   25c9c:	4a67      	ldr	r2, [pc, #412]	; (25e3c <m2m_ip_cb+0x298>)
   25c9e:	0103      	lsls	r3, r0, #4
   25ca0:	18d3      	adds	r3, r2, r3
   25ca2:	330b      	adds	r3, #11
   25ca4:	1c0a      	adds	r2, r1, #0
   25ca6:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   25ca8:	23b4      	movs	r3, #180	; 0xb4
   25caa:	18fb      	adds	r3, r7, r3
   25cac:	7a5b      	ldrb	r3, [r3, #9]
   25cae:	b25b      	sxtb	r3, r3
   25cb0:	4a62      	ldr	r2, [pc, #392]	; (25e3c <m2m_ip_cb+0x298>)
   25cb2:	011b      	lsls	r3, r3, #4
   25cb4:	18d3      	adds	r3, r2, r3
   25cb6:	330a      	adds	r3, #10
   25cb8:	2201      	movs	r2, #1
   25cba:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   25cbc:	23b4      	movs	r3, #180	; 0xb4
   25cbe:	18fb      	adds	r3, r7, r3
   25cc0:	7a5b      	ldrb	r3, [r3, #9]
   25cc2:	b25b      	sxtb	r3, r3
   25cc4:	0018      	movs	r0, r3
   25cc6:	23b4      	movs	r3, #180	; 0xb4
   25cc8:	18fb      	adds	r3, r7, r3
   25cca:	895b      	ldrh	r3, [r3, #10]
   25ccc:	3b08      	subs	r3, #8
   25cce:	b299      	uxth	r1, r3
   25cd0:	4a5a      	ldr	r2, [pc, #360]	; (25e3c <m2m_ip_cb+0x298>)
   25cd2:	0103      	lsls	r3, r0, #4
   25cd4:	18d3      	adds	r3, r2, r3
   25cd6:	3308      	adds	r3, #8
   25cd8:	1c0a      	adds	r2, r1, #0
   25cda:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
   25cdc:	4b58      	ldr	r3, [pc, #352]	; (25e40 <m2m_ip_cb+0x29c>)
   25cde:	881b      	ldrh	r3, [r3, #0]
   25ce0:	b29b      	uxth	r3, r3
   25ce2:	3301      	adds	r3, #1
   25ce4:	b29a      	uxth	r2, r3
   25ce6:	4b56      	ldr	r3, [pc, #344]	; (25e40 <m2m_ip_cb+0x29c>)
   25ce8:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
   25cea:	4b55      	ldr	r3, [pc, #340]	; (25e40 <m2m_ip_cb+0x29c>)
   25cec:	881b      	ldrh	r3, [r3, #0]
   25cee:	b29b      	uxth	r3, r3
   25cf0:	2b00      	cmp	r3, #0
   25cf2:	d106      	bne.n	25d02 <m2m_ip_cb+0x15e>
					++gu16SessionID;
   25cf4:	4b52      	ldr	r3, [pc, #328]	; (25e40 <m2m_ip_cb+0x29c>)
   25cf6:	881b      	ldrh	r3, [r3, #0]
   25cf8:	b29b      	uxth	r3, r3
   25cfa:	3301      	adds	r3, #1
   25cfc:	b29a      	uxth	r2, r3
   25cfe:	4b50      	ldr	r3, [pc, #320]	; (25e40 <m2m_ip_cb+0x29c>)
   25d00:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   25d02:	23b4      	movs	r3, #180	; 0xb4
   25d04:	18fb      	adds	r3, r7, r3
   25d06:	7a5b      	ldrb	r3, [r3, #9]
   25d08:	b25b      	sxtb	r3, r3
   25d0a:	0018      	movs	r0, r3
   25d0c:	4b4c      	ldr	r3, [pc, #304]	; (25e40 <m2m_ip_cb+0x29c>)
   25d0e:	881b      	ldrh	r3, [r3, #0]
   25d10:	b299      	uxth	r1, r3
   25d12:	4a4a      	ldr	r2, [pc, #296]	; (25e3c <m2m_ip_cb+0x298>)
   25d14:	0103      	lsls	r3, r0, #4
   25d16:	18d3      	adds	r3, r2, r3
   25d18:	3306      	adds	r3, #6
   25d1a:	1c0a      	adds	r2, r1, #0
   25d1c:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
   25d1e:	23b4      	movs	r3, #180	; 0xb4
   25d20:	18fb      	adds	r3, r7, r3
   25d22:	2209      	movs	r2, #9
   25d24:	569a      	ldrsb	r2, [r3, r2]
   25d26:	23a0      	movs	r3, #160	; 0xa0
   25d28:	18fb      	adds	r3, r7, r3
   25d2a:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   25d2c:	23a0      	movs	r3, #160	; 0xa0
   25d2e:	18fb      	adds	r3, r7, r3
   25d30:	2202      	movs	r2, #2
   25d32:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   25d34:	23b4      	movs	r3, #180	; 0xb4
   25d36:	18fb      	adds	r3, r7, r3
   25d38:	885a      	ldrh	r2, [r3, #2]
   25d3a:	23a0      	movs	r3, #160	; 0xa0
   25d3c:	18fb      	adds	r3, r7, r3
   25d3e:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   25d40:	23b4      	movs	r3, #180	; 0xb4
   25d42:	18fb      	adds	r3, r7, r3
   25d44:	685a      	ldr	r2, [r3, #4]
   25d46:	23a0      	movs	r3, #160	; 0xa0
   25d48:	18fb      	adds	r3, r7, r3
   25d4a:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
   25d4c:	4b3a      	ldr	r3, [pc, #232]	; (25e38 <m2m_ip_cb+0x294>)
   25d4e:	681b      	ldr	r3, [r3, #0]
   25d50:	2b00      	cmp	r3, #0
   25d52:	d100      	bne.n	25d56 <m2m_ip_cb+0x1b2>
   25d54:	e1bf      	b.n	260d6 <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   25d56:	4b38      	ldr	r3, [pc, #224]	; (25e38 <m2m_ip_cb+0x294>)
   25d58:	681b      	ldr	r3, [r3, #0]
   25d5a:	22b4      	movs	r2, #180	; 0xb4
   25d5c:	18ba      	adds	r2, r7, r2
   25d5e:	2008      	movs	r0, #8
   25d60:	5610      	ldrsb	r0, [r2, r0]
   25d62:	22a0      	movs	r2, #160	; 0xa0
   25d64:	18ba      	adds	r2, r7, r2
   25d66:	2104      	movs	r1, #4
   25d68:	4798      	blx	r3
}
   25d6a:	e1b4      	b.n	260d6 <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   25d6c:	1dfb      	adds	r3, r7, #7
   25d6e:	781b      	ldrb	r3, [r3, #0]
   25d70:	2b44      	cmp	r3, #68	; 0x44
   25d72:	d003      	beq.n	25d7c <m2m_ip_cb+0x1d8>
   25d74:	1dfb      	adds	r3, r7, #7
   25d76:	781b      	ldrb	r3, [r3, #0]
   25d78:	2b4b      	cmp	r3, #75	; 0x4b
   25d7a:	d13d      	bne.n	25df8 <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   25d7c:	239c      	movs	r3, #156	; 0x9c
   25d7e:	18f9      	adds	r1, r7, r3
   25d80:	6838      	ldr	r0, [r7, #0]
   25d82:	2300      	movs	r3, #0
   25d84:	2204      	movs	r2, #4
   25d86:	4c2b      	ldr	r4, [pc, #172]	; (25e34 <m2m_ip_cb+0x290>)
   25d88:	47a0      	blx	r4
   25d8a:	1e03      	subs	r3, r0, #0
   25d8c:	d000      	beq.n	25d90 <m2m_ip_cb+0x1ec>
   25d8e:	e19d      	b.n	260cc <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
   25d90:	239c      	movs	r3, #156	; 0x9c
   25d92:	18fb      	adds	r3, r7, r3
   25d94:	2200      	movs	r2, #0
   25d96:	569a      	ldrsb	r2, [r3, r2]
   25d98:	2398      	movs	r3, #152	; 0x98
   25d9a:	18fb      	adds	r3, r7, r3
   25d9c:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   25d9e:	239c      	movs	r3, #156	; 0x9c
   25da0:	18fb      	adds	r3, r7, r3
   25da2:	2201      	movs	r2, #1
   25da4:	569a      	ldrsb	r2, [r3, r2]
   25da6:	2398      	movs	r3, #152	; 0x98
   25da8:	18fb      	adds	r3, r7, r3
   25daa:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   25dac:	239c      	movs	r3, #156	; 0x9c
   25dae:	18fb      	adds	r3, r7, r3
   25db0:	785b      	ldrb	r3, [r3, #1]
   25db2:	b25b      	sxtb	r3, r3
   25db4:	2b00      	cmp	r3, #0
   25db6:	d10f      	bne.n	25dd8 <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   25db8:	239c      	movs	r3, #156	; 0x9c
   25dba:	18fb      	adds	r3, r7, r3
   25dbc:	781b      	ldrb	r3, [r3, #0]
   25dbe:	b25b      	sxtb	r3, r3
   25dc0:	0018      	movs	r0, r3
   25dc2:	239c      	movs	r3, #156	; 0x9c
   25dc4:	18fb      	adds	r3, r7, r3
   25dc6:	885b      	ldrh	r3, [r3, #2]
   25dc8:	3b08      	subs	r3, #8
   25dca:	b299      	uxth	r1, r3
   25dcc:	4a1b      	ldr	r2, [pc, #108]	; (25e3c <m2m_ip_cb+0x298>)
   25dce:	0103      	lsls	r3, r0, #4
   25dd0:	18d3      	adds	r3, r2, r3
   25dd2:	3308      	adds	r3, #8
   25dd4:	1c0a      	adds	r2, r1, #0
   25dd6:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
   25dd8:	4b17      	ldr	r3, [pc, #92]	; (25e38 <m2m_ip_cb+0x294>)
   25dda:	681b      	ldr	r3, [r3, #0]
   25ddc:	2b00      	cmp	r3, #0
   25dde:	d100      	bne.n	25de2 <m2m_ip_cb+0x23e>
   25de0:	e174      	b.n	260cc <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   25de2:	4b15      	ldr	r3, [pc, #84]	; (25e38 <m2m_ip_cb+0x294>)
   25de4:	681b      	ldr	r3, [r3, #0]
   25de6:	229c      	movs	r2, #156	; 0x9c
   25de8:	18ba      	adds	r2, r7, r2
   25dea:	2000      	movs	r0, #0
   25dec:	5610      	ldrsb	r0, [r2, r0]
   25dee:	2298      	movs	r2, #152	; 0x98
   25df0:	18ba      	adds	r2, r7, r2
   25df2:	2105      	movs	r1, #5
   25df4:	4798      	blx	r3
	{
   25df6:	e169      	b.n	260cc <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   25df8:	1dfb      	adds	r3, r7, #7
   25dfa:	781b      	ldrb	r3, [r3, #0]
   25dfc:	2b4a      	cmp	r3, #74	; 0x4a
   25dfe:	d123      	bne.n	25e48 <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   25e00:	230c      	movs	r3, #12
   25e02:	18f9      	adds	r1, r7, r3
   25e04:	6838      	ldr	r0, [r7, #0]
   25e06:	2300      	movs	r3, #0
   25e08:	2244      	movs	r2, #68	; 0x44
   25e0a:	4c0a      	ldr	r4, [pc, #40]	; (25e34 <m2m_ip_cb+0x290>)
   25e0c:	47a0      	blx	r4
   25e0e:	1e03      	subs	r3, r0, #0
   25e10:	d000      	beq.n	25e14 <m2m_ip_cb+0x270>
   25e12:	e160      	b.n	260d6 <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
   25e14:	4b0b      	ldr	r3, [pc, #44]	; (25e44 <m2m_ip_cb+0x2a0>)
   25e16:	681b      	ldr	r3, [r3, #0]
   25e18:	2b00      	cmp	r3, #0
   25e1a:	d100      	bne.n	25e1e <m2m_ip_cb+0x27a>
   25e1c:	e15b      	b.n	260d6 <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   25e1e:	4b09      	ldr	r3, [pc, #36]	; (25e44 <m2m_ip_cb+0x2a0>)
   25e20:	681a      	ldr	r2, [r3, #0]
   25e22:	230c      	movs	r3, #12
   25e24:	18fb      	adds	r3, r7, r3
   25e26:	6c19      	ldr	r1, [r3, #64]	; 0x40
   25e28:	230c      	movs	r3, #12
   25e2a:	18fb      	adds	r3, r7, r3
   25e2c:	0018      	movs	r0, r3
   25e2e:	4790      	blx	r2
}
   25e30:	e151      	b.n	260d6 <m2m_ip_cb+0x532>
   25e32:	46c0      	nop			; (mov r8, r8)
   25e34:	00022479 	.word	0x00022479
   25e38:	20005c04 	.word	0x20005c04
   25e3c:	20005b54 	.word	0x20005b54
   25e40:	200042b2 	.word	0x200042b2
   25e44:	20005c0c 	.word	0x20005c0c
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   25e48:	1dfb      	adds	r3, r7, #7
   25e4a:	781b      	ldrb	r3, [r3, #0]
   25e4c:	2b46      	cmp	r3, #70	; 0x46
   25e4e:	d008      	beq.n	25e62 <m2m_ip_cb+0x2be>
   25e50:	1dfb      	adds	r3, r7, #7
   25e52:	781b      	ldrb	r3, [r3, #0]
   25e54:	2b48      	cmp	r3, #72	; 0x48
   25e56:	d004      	beq.n	25e62 <m2m_ip_cb+0x2be>
   25e58:	1dfb      	adds	r3, r7, #7
   25e5a:	781b      	ldrb	r3, [r3, #0]
   25e5c:	2b4d      	cmp	r3, #77	; 0x4d
   25e5e:	d000      	beq.n	25e62 <m2m_ip_cb+0x2be>
   25e60:	e0b4      	b.n	25fcc <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   25e62:	23df      	movs	r3, #223	; 0xdf
   25e64:	18fb      	adds	r3, r7, r3
   25e66:	2206      	movs	r2, #6
   25e68:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
   25e6a:	1dfb      	adds	r3, r7, #7
   25e6c:	781b      	ldrb	r3, [r3, #0]
   25e6e:	2b48      	cmp	r3, #72	; 0x48
   25e70:	d103      	bne.n	25e7a <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   25e72:	23df      	movs	r3, #223	; 0xdf
   25e74:	18fb      	adds	r3, r7, r3
   25e76:	2209      	movs	r2, #9
   25e78:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
   25e7a:	23d8      	movs	r3, #216	; 0xd8
   25e7c:	18fb      	adds	r3, r7, r3
   25e7e:	2210      	movs	r2, #16
   25e80:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   25e82:	23d8      	movs	r3, #216	; 0xd8
   25e84:	18fb      	adds	r3, r7, r3
   25e86:	881a      	ldrh	r2, [r3, #0]
   25e88:	2388      	movs	r3, #136	; 0x88
   25e8a:	18f9      	adds	r1, r7, r3
   25e8c:	6838      	ldr	r0, [r7, #0]
   25e8e:	2300      	movs	r3, #0
   25e90:	4c93      	ldr	r4, [pc, #588]	; (260e0 <m2m_ip_cb+0x53c>)
   25e92:	47a0      	blx	r4
   25e94:	1e03      	subs	r3, r0, #0
   25e96:	d000      	beq.n	25e9a <m2m_ip_cb+0x2f6>
   25e98:	e11a      	b.n	260d0 <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
   25e9a:	23d6      	movs	r3, #214	; 0xd6
   25e9c:	18fb      	adds	r3, r7, r3
   25e9e:	2200      	movs	r2, #0
   25ea0:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
   25ea2:	23d5      	movs	r3, #213	; 0xd5
   25ea4:	18fb      	adds	r3, r7, r3
   25ea6:	2288      	movs	r2, #136	; 0x88
   25ea8:	18ba      	adds	r2, r7, r2
   25eaa:	7b12      	ldrb	r2, [r2, #12]
   25eac:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
   25eae:	23d6      	movs	r3, #214	; 0xd6
   25eb0:	18fb      	adds	r3, r7, r3
   25eb2:	2288      	movs	r2, #136	; 0x88
   25eb4:	18ba      	adds	r2, r7, r2
   25eb6:	89d2      	ldrh	r2, [r2, #14]
   25eb8:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
   25eba:	23d5      	movs	r3, #213	; 0xd5
   25ebc:	18fb      	adds	r3, r7, r3
   25ebe:	781b      	ldrb	r3, [r3, #0]
   25ec0:	b25b      	sxtb	r3, r3
   25ec2:	4a88      	ldr	r2, [pc, #544]	; (260e4 <m2m_ip_cb+0x540>)
   25ec4:	011b      	lsls	r3, r3, #4
   25ec6:	18d3      	adds	r3, r2, r3
   25ec8:	330c      	adds	r3, #12
   25eca:	2200      	movs	r2, #0
   25ecc:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   25ece:	23d2      	movs	r3, #210	; 0xd2
   25ed0:	18fb      	adds	r3, r7, r3
   25ed2:	2288      	movs	r2, #136	; 0x88
   25ed4:	18ba      	adds	r2, r7, r2
   25ed6:	8912      	ldrh	r2, [r2, #8]
   25ed8:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   25eda:	23d0      	movs	r3, #208	; 0xd0
   25edc:	18fb      	adds	r3, r7, r3
   25ede:	2288      	movs	r2, #136	; 0x88
   25ee0:	18ba      	adds	r2, r7, r2
   25ee2:	8952      	ldrh	r2, [r2, #10]
   25ee4:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   25ee6:	2388      	movs	r3, #136	; 0x88
   25ee8:	18fb      	adds	r3, r7, r3
   25eea:	885a      	ldrh	r2, [r3, #2]
   25eec:	2370      	movs	r3, #112	; 0x70
   25eee:	18fb      	adds	r3, r7, r3
   25ef0:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   25ef2:	2388      	movs	r3, #136	; 0x88
   25ef4:	18fb      	adds	r3, r7, r3
   25ef6:	685a      	ldr	r2, [r3, #4]
   25ef8:	2370      	movs	r3, #112	; 0x70
   25efa:	18fb      	adds	r3, r7, r3
   25efc:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   25efe:	23d5      	movs	r3, #213	; 0xd5
   25f00:	18fb      	adds	r3, r7, r3
   25f02:	781b      	ldrb	r3, [r3, #0]
   25f04:	b25b      	sxtb	r3, r3
   25f06:	4a77      	ldr	r2, [pc, #476]	; (260e4 <m2m_ip_cb+0x540>)
   25f08:	011b      	lsls	r3, r3, #4
   25f0a:	18d3      	adds	r3, r2, r3
   25f0c:	3306      	adds	r3, #6
   25f0e:	881b      	ldrh	r3, [r3, #0]
   25f10:	b29b      	uxth	r3, r3
   25f12:	22d6      	movs	r2, #214	; 0xd6
   25f14:	18ba      	adds	r2, r7, r2
   25f16:	8812      	ldrh	r2, [r2, #0]
   25f18:	429a      	cmp	r2, r3
   25f1a:	d148      	bne.n	25fae <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   25f1c:	23d2      	movs	r3, #210	; 0xd2
   25f1e:	18fb      	adds	r3, r7, r3
   25f20:	2200      	movs	r2, #0
   25f22:	5e9b      	ldrsh	r3, [r3, r2]
   25f24:	2b00      	cmp	r3, #0
   25f26:	dd25      	ble.n	25f74 <m2m_ip_cb+0x3d0>
   25f28:	23d2      	movs	r3, #210	; 0xd2
   25f2a:	18fb      	adds	r3, r7, r3
   25f2c:	2200      	movs	r2, #0
   25f2e:	5e9a      	ldrsh	r2, [r3, r2]
   25f30:	1d3b      	adds	r3, r7, #4
   25f32:	881b      	ldrh	r3, [r3, #0]
   25f34:	429a      	cmp	r2, r3
   25f36:	da1d      	bge.n	25f74 <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
   25f38:	23d0      	movs	r3, #208	; 0xd0
   25f3a:	18fb      	adds	r3, r7, r3
   25f3c:	881b      	ldrh	r3, [r3, #0]
   25f3e:	683a      	ldr	r2, [r7, #0]
   25f40:	18d3      	adds	r3, r2, r3
   25f42:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
   25f44:	23d8      	movs	r3, #216	; 0xd8
   25f46:	18fb      	adds	r3, r7, r3
   25f48:	22d2      	movs	r2, #210	; 0xd2
   25f4a:	18ba      	adds	r2, r7, r2
   25f4c:	8812      	ldrh	r2, [r2, #0]
   25f4e:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   25f50:	683c      	ldr	r4, [r7, #0]
   25f52:	23df      	movs	r3, #223	; 0xdf
   25f54:	18fb      	adds	r3, r7, r3
   25f56:	781a      	ldrb	r2, [r3, #0]
   25f58:	2370      	movs	r3, #112	; 0x70
   25f5a:	18f9      	adds	r1, r7, r3
   25f5c:	23d5      	movs	r3, #213	; 0xd5
   25f5e:	18fb      	adds	r3, r7, r3
   25f60:	2000      	movs	r0, #0
   25f62:	5618      	ldrsb	r0, [r3, r0]
   25f64:	23d8      	movs	r3, #216	; 0xd8
   25f66:	18fb      	adds	r3, r7, r3
   25f68:	881b      	ldrh	r3, [r3, #0]
   25f6a:	9300      	str	r3, [sp, #0]
   25f6c:	0023      	movs	r3, r4
   25f6e:	4c5e      	ldr	r4, [pc, #376]	; (260e8 <m2m_ip_cb+0x544>)
   25f70:	47a0      	blx	r4
	{
   25f72:	e0ad      	b.n	260d0 <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   25f74:	2370      	movs	r3, #112	; 0x70
   25f76:	18fb      	adds	r3, r7, r3
   25f78:	22d2      	movs	r2, #210	; 0xd2
   25f7a:	18ba      	adds	r2, r7, r2
   25f7c:	8812      	ldrh	r2, [r2, #0]
   25f7e:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   25f80:	2370      	movs	r3, #112	; 0x70
   25f82:	18fb      	adds	r3, r7, r3
   25f84:	2200      	movs	r2, #0
   25f86:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
   25f88:	4b58      	ldr	r3, [pc, #352]	; (260ec <m2m_ip_cb+0x548>)
   25f8a:	681b      	ldr	r3, [r3, #0]
   25f8c:	2b00      	cmp	r3, #0
   25f8e:	d100      	bne.n	25f92 <m2m_ip_cb+0x3ee>
   25f90:	e09e      	b.n	260d0 <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   25f92:	4b56      	ldr	r3, [pc, #344]	; (260ec <m2m_ip_cb+0x548>)
   25f94:	681b      	ldr	r3, [r3, #0]
   25f96:	2270      	movs	r2, #112	; 0x70
   25f98:	18bc      	adds	r4, r7, r2
   25f9a:	22df      	movs	r2, #223	; 0xdf
   25f9c:	18ba      	adds	r2, r7, r2
   25f9e:	7811      	ldrb	r1, [r2, #0]
   25fa0:	22d5      	movs	r2, #213	; 0xd5
   25fa2:	18ba      	adds	r2, r7, r2
   25fa4:	2000      	movs	r0, #0
   25fa6:	5610      	ldrsb	r0, [r2, r0]
   25fa8:	0022      	movs	r2, r4
   25faa:	4798      	blx	r3
	{
   25fac:	e090      	b.n	260d0 <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
   25fae:	23d8      	movs	r3, #216	; 0xd8
   25fb0:	18fa      	adds	r2, r7, r3
   25fb2:	1d3b      	adds	r3, r7, #4
   25fb4:	8812      	ldrh	r2, [r2, #0]
   25fb6:	881b      	ldrh	r3, [r3, #0]
   25fb8:	429a      	cmp	r2, r3
   25fba:	d300      	bcc.n	25fbe <m2m_ip_cb+0x41a>
   25fbc:	e088      	b.n	260d0 <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   25fbe:	2301      	movs	r3, #1
   25fc0:	2200      	movs	r2, #0
   25fc2:	2100      	movs	r1, #0
   25fc4:	2000      	movs	r0, #0
   25fc6:	4c46      	ldr	r4, [pc, #280]	; (260e0 <m2m_ip_cb+0x53c>)
   25fc8:	47a0      	blx	r4
	{
   25fca:	e081      	b.n	260d0 <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   25fcc:	1dfb      	adds	r3, r7, #7
   25fce:	781b      	ldrb	r3, [r3, #0]
   25fd0:	2b45      	cmp	r3, #69	; 0x45
   25fd2:	d007      	beq.n	25fe4 <m2m_ip_cb+0x440>
   25fd4:	1dfb      	adds	r3, r7, #7
   25fd6:	781b      	ldrb	r3, [r3, #0]
   25fd8:	2b47      	cmp	r3, #71	; 0x47
   25fda:	d003      	beq.n	25fe4 <m2m_ip_cb+0x440>
   25fdc:	1dfb      	adds	r3, r7, #7
   25fde:	781b      	ldrb	r3, [r3, #0]
   25fe0:	2b4c      	cmp	r3, #76	; 0x4c
   25fe2:	d14c      	bne.n	2607e <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   25fe4:	23de      	movs	r3, #222	; 0xde
   25fe6:	18fb      	adds	r3, r7, r3
   25fe8:	2207      	movs	r2, #7
   25fea:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
   25fec:	1dfb      	adds	r3, r7, #7
   25fee:	781b      	ldrb	r3, [r3, #0]
   25ff0:	2b47      	cmp	r3, #71	; 0x47
   25ff2:	d103      	bne.n	25ffc <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   25ff4:	23de      	movs	r3, #222	; 0xde
   25ff6:	18fb      	adds	r3, r7, r3
   25ff8:	2208      	movs	r2, #8
   25ffa:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   25ffc:	2364      	movs	r3, #100	; 0x64
   25ffe:	18f9      	adds	r1, r7, r3
   26000:	6838      	ldr	r0, [r7, #0]
   26002:	2300      	movs	r3, #0
   26004:	2208      	movs	r2, #8
   26006:	4c36      	ldr	r4, [pc, #216]	; (260e0 <m2m_ip_cb+0x53c>)
   26008:	47a0      	blx	r4
   2600a:	1e03      	subs	r3, r0, #0
   2600c:	d162      	bne.n	260d4 <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
   2600e:	23dc      	movs	r3, #220	; 0xdc
   26010:	18fb      	adds	r3, r7, r3
   26012:	2200      	movs	r2, #0
   26014:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
   26016:	23db      	movs	r3, #219	; 0xdb
   26018:	18fb      	adds	r3, r7, r3
   2601a:	2264      	movs	r2, #100	; 0x64
   2601c:	18ba      	adds	r2, r7, r2
   2601e:	7812      	ldrb	r2, [r2, #0]
   26020:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
   26022:	23dc      	movs	r3, #220	; 0xdc
   26024:	18fb      	adds	r3, r7, r3
   26026:	2264      	movs	r2, #100	; 0x64
   26028:	18ba      	adds	r2, r7, r2
   2602a:	8892      	ldrh	r2, [r2, #4]
   2602c:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   2602e:	2364      	movs	r3, #100	; 0x64
   26030:	18fb      	adds	r3, r7, r3
   26032:	2202      	movs	r2, #2
   26034:	5e9a      	ldrsh	r2, [r3, r2]
   26036:	236e      	movs	r3, #110	; 0x6e
   26038:	18fb      	adds	r3, r7, r3
   2603a:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   2603c:	23db      	movs	r3, #219	; 0xdb
   2603e:	18fb      	adds	r3, r7, r3
   26040:	781b      	ldrb	r3, [r3, #0]
   26042:	b25b      	sxtb	r3, r3
   26044:	4a27      	ldr	r2, [pc, #156]	; (260e4 <m2m_ip_cb+0x540>)
   26046:	011b      	lsls	r3, r3, #4
   26048:	18d3      	adds	r3, r2, r3
   2604a:	3306      	adds	r3, #6
   2604c:	881b      	ldrh	r3, [r3, #0]
   2604e:	b29b      	uxth	r3, r3
   26050:	22dc      	movs	r2, #220	; 0xdc
   26052:	18ba      	adds	r2, r7, r2
   26054:	8812      	ldrh	r2, [r2, #0]
   26056:	429a      	cmp	r2, r3
   26058:	d13c      	bne.n	260d4 <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
   2605a:	4b24      	ldr	r3, [pc, #144]	; (260ec <m2m_ip_cb+0x548>)
   2605c:	681b      	ldr	r3, [r3, #0]
   2605e:	2b00      	cmp	r3, #0
   26060:	d038      	beq.n	260d4 <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   26062:	4b22      	ldr	r3, [pc, #136]	; (260ec <m2m_ip_cb+0x548>)
   26064:	681b      	ldr	r3, [r3, #0]
   26066:	226e      	movs	r2, #110	; 0x6e
   26068:	18bc      	adds	r4, r7, r2
   2606a:	22de      	movs	r2, #222	; 0xde
   2606c:	18ba      	adds	r2, r7, r2
   2606e:	7811      	ldrb	r1, [r2, #0]
   26070:	22db      	movs	r2, #219	; 0xdb
   26072:	18ba      	adds	r2, r7, r2
   26074:	2000      	movs	r0, #0
   26076:	5610      	ldrsb	r0, [r2, r0]
   26078:	0022      	movs	r2, r4
   2607a:	4798      	blx	r3
	{
   2607c:	e02a      	b.n	260d4 <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
   2607e:	1dfb      	adds	r3, r7, #7
   26080:	781b      	ldrb	r3, [r3, #0]
   26082:	2b52      	cmp	r3, #82	; 0x52
   26084:	d127      	bne.n	260d6 <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   26086:	2350      	movs	r3, #80	; 0x50
   26088:	18f9      	adds	r1, r7, r3
   2608a:	6838      	ldr	r0, [r7, #0]
   2608c:	2301      	movs	r3, #1
   2608e:	2214      	movs	r2, #20
   26090:	4c13      	ldr	r4, [pc, #76]	; (260e0 <m2m_ip_cb+0x53c>)
   26092:	47a0      	blx	r4
   26094:	1e03      	subs	r3, r0, #0
   26096:	d11e      	bne.n	260d6 <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   26098:	2350      	movs	r3, #80	; 0x50
   2609a:	18fb      	adds	r3, r7, r3
   2609c:	685b      	ldr	r3, [r3, #4]
   2609e:	001a      	movs	r2, r3
   260a0:	4b13      	ldr	r3, [pc, #76]	; (260f0 <m2m_ip_cb+0x54c>)
   260a2:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   260a4:	4b12      	ldr	r3, [pc, #72]	; (260f0 <m2m_ip_cb+0x54c>)
   260a6:	681b      	ldr	r3, [r3, #0]
   260a8:	2b00      	cmp	r3, #0
   260aa:	d014      	beq.n	260d6 <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   260ac:	4b10      	ldr	r3, [pc, #64]	; (260f0 <m2m_ip_cb+0x54c>)
   260ae:	681c      	ldr	r4, [r3, #0]
   260b0:	2350      	movs	r3, #80	; 0x50
   260b2:	18fb      	adds	r3, r7, r3
   260b4:	6818      	ldr	r0, [r3, #0]
   260b6:	2350      	movs	r3, #80	; 0x50
   260b8:	18fb      	adds	r3, r7, r3
   260ba:	6899      	ldr	r1, [r3, #8]
   260bc:	2350      	movs	r3, #80	; 0x50
   260be:	18fb      	adds	r3, r7, r3
   260c0:	7c1b      	ldrb	r3, [r3, #16]
   260c2:	001a      	movs	r2, r3
   260c4:	47a0      	blx	r4
}
   260c6:	e006      	b.n	260d6 <m2m_ip_cb+0x532>
	{
   260c8:	46c0      	nop			; (mov r8, r8)
   260ca:	e004      	b.n	260d6 <m2m_ip_cb+0x532>
	{
   260cc:	46c0      	nop			; (mov r8, r8)
   260ce:	e002      	b.n	260d6 <m2m_ip_cb+0x532>
	{
   260d0:	46c0      	nop			; (mov r8, r8)
   260d2:	e000      	b.n	260d6 <m2m_ip_cb+0x532>
	{
   260d4:	46c0      	nop			; (mov r8, r8)
}
   260d6:	46c0      	nop			; (mov r8, r8)
   260d8:	46bd      	mov	sp, r7
   260da:	b039      	add	sp, #228	; 0xe4
   260dc:	bd90      	pop	{r4, r7, pc}
   260de:	46c0      	nop			; (mov r8, r8)
   260e0:	00022479 	.word	0x00022479
   260e4:	20005b54 	.word	0x20005b54
   260e8:	000259a9 	.word	0x000259a9
   260ec:	20005c04 	.word	0x20005c04
   260f0:	20005c08 	.word	0x20005c08

000260f4 <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   260f4:	b580      	push	{r7, lr}
   260f6:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
   260f8:	4b0c      	ldr	r3, [pc, #48]	; (2612c <socketInit+0x38>)
   260fa:	781b      	ldrb	r3, [r3, #0]
   260fc:	b2db      	uxtb	r3, r3
   260fe:	2b00      	cmp	r3, #0
   26100:	d110      	bne.n	26124 <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   26102:	4b0b      	ldr	r3, [pc, #44]	; (26130 <socketInit+0x3c>)
   26104:	22b0      	movs	r2, #176	; 0xb0
   26106:	2100      	movs	r1, #0
   26108:	0018      	movs	r0, r3
   2610a:	4b0a      	ldr	r3, [pc, #40]	; (26134 <socketInit+0x40>)
   2610c:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   2610e:	4b0a      	ldr	r3, [pc, #40]	; (26138 <socketInit+0x44>)
   26110:	0019      	movs	r1, r3
   26112:	2002      	movs	r0, #2
   26114:	4b09      	ldr	r3, [pc, #36]	; (2613c <socketInit+0x48>)
   26116:	4798      	blx	r3
		gbSocketInit	= 1;
   26118:	4b04      	ldr	r3, [pc, #16]	; (2612c <socketInit+0x38>)
   2611a:	2201      	movs	r2, #1
   2611c:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   2611e:	4b08      	ldr	r3, [pc, #32]	; (26140 <socketInit+0x4c>)
   26120:	2200      	movs	r2, #0
   26122:	801a      	strh	r2, [r3, #0]
	}
}
   26124:	46c0      	nop			; (mov r8, r8)
   26126:	46bd      	mov	sp, r7
   26128:	bd80      	pop	{r7, pc}
   2612a:	46c0      	nop			; (mov r8, r8)
   2612c:	200042b4 	.word	0x200042b4
   26130:	20005b54 	.word	0x20005b54
   26134:	000218fd 	.word	0x000218fd
   26138:	00025ba5 	.word	0x00025ba5
   2613c:	000225f9 	.word	0x000225f9
   26140:	200042b2 	.word	0x200042b2

00026144 <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   26144:	b580      	push	{r7, lr}
   26146:	af00      	add	r7, sp, #0
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   26148:	4b0a      	ldr	r3, [pc, #40]	; (26174 <socketDeinit+0x30>)
   2614a:	22b0      	movs	r2, #176	; 0xb0
   2614c:	2100      	movs	r1, #0
   2614e:	0018      	movs	r0, r3
   26150:	4b09      	ldr	r3, [pc, #36]	; (26178 <socketDeinit+0x34>)
   26152:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   26154:	2100      	movs	r1, #0
   26156:	2002      	movs	r0, #2
   26158:	4b08      	ldr	r3, [pc, #32]	; (2617c <socketDeinit+0x38>)
   2615a:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   2615c:	4b08      	ldr	r3, [pc, #32]	; (26180 <socketDeinit+0x3c>)
   2615e:	2200      	movs	r2, #0
   26160:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb	= NULL;
   26162:	4b08      	ldr	r3, [pc, #32]	; (26184 <socketDeinit+0x40>)
   26164:	2200      	movs	r2, #0
   26166:	601a      	str	r2, [r3, #0]
	gbSocketInit	= 0;
   26168:	4b07      	ldr	r3, [pc, #28]	; (26188 <socketDeinit+0x44>)
   2616a:	2200      	movs	r2, #0
   2616c:	701a      	strb	r2, [r3, #0]
}
   2616e:	46c0      	nop			; (mov r8, r8)
   26170:	46bd      	mov	sp, r7
   26172:	bd80      	pop	{r7, pc}
   26174:	20005b54 	.word	0x20005b54
   26178:	000218fd 	.word	0x000218fd
   2617c:	000225f9 	.word	0x000225f9
   26180:	20005c04 	.word	0x20005c04
   26184:	20005c0c 	.word	0x20005c0c
   26188:	200042b4 	.word	0x200042b4

0002618c <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
   2618c:	b580      	push	{r7, lr}
   2618e:	b082      	sub	sp, #8
   26190:	af00      	add	r7, sp, #0
   26192:	6078      	str	r0, [r7, #4]
   26194:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
   26196:	4b05      	ldr	r3, [pc, #20]	; (261ac <registerSocketCallback+0x20>)
   26198:	687a      	ldr	r2, [r7, #4]
   2619a:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   2619c:	4b04      	ldr	r3, [pc, #16]	; (261b0 <registerSocketCallback+0x24>)
   2619e:	683a      	ldr	r2, [r7, #0]
   261a0:	601a      	str	r2, [r3, #0]
}
   261a2:	46c0      	nop			; (mov r8, r8)
   261a4:	46bd      	mov	sp, r7
   261a6:	b002      	add	sp, #8
   261a8:	bd80      	pop	{r7, pc}
   261aa:	46c0      	nop			; (mov r8, r8)
   261ac:	20005c04 	.word	0x20005c04
   261b0:	20005c0c 	.word	0x20005c0c

000261b4 <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   261b4:	b590      	push	{r4, r7, lr}
   261b6:	b08d      	sub	sp, #52	; 0x34
   261b8:	af04      	add	r7, sp, #16
   261ba:	0004      	movs	r4, r0
   261bc:	0008      	movs	r0, r1
   261be:	0011      	movs	r1, r2
   261c0:	1dbb      	adds	r3, r7, #6
   261c2:	1c22      	adds	r2, r4, #0
   261c4:	801a      	strh	r2, [r3, #0]
   261c6:	1d7b      	adds	r3, r7, #5
   261c8:	1c02      	adds	r2, r0, #0
   261ca:	701a      	strb	r2, [r3, #0]
   261cc:	1d3b      	adds	r3, r7, #4
   261ce:	1c0a      	adds	r2, r1, #0
   261d0:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
   261d2:	231f      	movs	r3, #31
   261d4:	18fb      	adds	r3, r7, r3
   261d6:	22ff      	movs	r2, #255	; 0xff
   261d8:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   261da:	1dbb      	adds	r3, r7, #6
   261dc:	881b      	ldrh	r3, [r3, #0]
   261de:	2b02      	cmp	r3, #2
   261e0:	d000      	beq.n	261e4 <socket+0x30>
   261e2:	e0ce      	b.n	26382 <socket+0x1ce>
	{
		if(u8Type == SOCK_STREAM)
   261e4:	1d7b      	adds	r3, r7, #5
   261e6:	781b      	ldrb	r3, [r3, #0]
   261e8:	2b01      	cmp	r3, #1
   261ea:	d135      	bne.n	26258 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   261ec:	231e      	movs	r3, #30
   261ee:	18fb      	adds	r3, r7, r3
   261f0:	2200      	movs	r2, #0
   261f2:	701a      	strb	r2, [r3, #0]
   261f4:	e02a      	b.n	2624c <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
   261f6:	2317      	movs	r3, #23
   261f8:	18fb      	adds	r3, r7, r3
   261fa:	4a66      	ldr	r2, [pc, #408]	; (26394 <socket+0x1e0>)
   261fc:	7812      	ldrb	r2, [r2, #0]
   261fe:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
   26200:	4b64      	ldr	r3, [pc, #400]	; (26394 <socket+0x1e0>)
   26202:	781b      	ldrb	r3, [r3, #0]
   26204:	b2db      	uxtb	r3, r3
   26206:	011a      	lsls	r2, r3, #4
   26208:	4b63      	ldr	r3, [pc, #396]	; (26398 <socket+0x1e4>)
   2620a:	18d3      	adds	r3, r2, r3
   2620c:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   2620e:	4b61      	ldr	r3, [pc, #388]	; (26394 <socket+0x1e0>)
   26210:	781b      	ldrb	r3, [r3, #0]
   26212:	b2db      	uxtb	r3, r3
   26214:	1c5a      	adds	r2, r3, #1
   26216:	4b61      	ldr	r3, [pc, #388]	; (2639c <socket+0x1e8>)
   26218:	2107      	movs	r1, #7
   2621a:	0010      	movs	r0, r2
   2621c:	4798      	blx	r3
   2621e:	000b      	movs	r3, r1
   26220:	b2da      	uxtb	r2, r3
   26222:	4b5c      	ldr	r3, [pc, #368]	; (26394 <socket+0x1e0>)
   26224:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   26226:	69bb      	ldr	r3, [r7, #24]
   26228:	7a9b      	ldrb	r3, [r3, #10]
   2622a:	b2db      	uxtb	r3, r3
   2622c:	2b00      	cmp	r3, #0
   2622e:	d106      	bne.n	2623e <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
   26230:	231f      	movs	r3, #31
   26232:	18fb      	adds	r3, r7, r3
   26234:	2217      	movs	r2, #23
   26236:	18ba      	adds	r2, r7, r2
   26238:	7812      	ldrb	r2, [r2, #0]
   2623a:	701a      	strb	r2, [r3, #0]
					break;
   2623c:	e04c      	b.n	262d8 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   2623e:	231e      	movs	r3, #30
   26240:	18fb      	adds	r3, r7, r3
   26242:	781a      	ldrb	r2, [r3, #0]
   26244:	231e      	movs	r3, #30
   26246:	18fb      	adds	r3, r7, r3
   26248:	3201      	adds	r2, #1
   2624a:	701a      	strb	r2, [r3, #0]
   2624c:	231e      	movs	r3, #30
   2624e:	18fb      	adds	r3, r7, r3
   26250:	781b      	ldrb	r3, [r3, #0]
   26252:	2b06      	cmp	r3, #6
   26254:	d9cf      	bls.n	261f6 <socket+0x42>
   26256:	e03f      	b.n	262d8 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   26258:	1d7b      	adds	r3, r7, #5
   2625a:	781b      	ldrb	r3, [r3, #0]
   2625c:	2b02      	cmp	r3, #2
   2625e:	d13b      	bne.n	262d8 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
   26260:	4b4f      	ldr	r3, [pc, #316]	; (263a0 <socket+0x1ec>)
   26262:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   26264:	231e      	movs	r3, #30
   26266:	18fb      	adds	r3, r7, r3
   26268:	2200      	movs	r2, #0
   2626a:	701a      	strb	r2, [r3, #0]
   2626c:	e02f      	b.n	262ce <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
   2626e:	2317      	movs	r3, #23
   26270:	18fb      	adds	r3, r7, r3
   26272:	4a4c      	ldr	r2, [pc, #304]	; (263a4 <socket+0x1f0>)
   26274:	7812      	ldrb	r2, [r2, #0]
   26276:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   26278:	4b4a      	ldr	r3, [pc, #296]	; (263a4 <socket+0x1f0>)
   2627a:	781b      	ldrb	r3, [r3, #0]
   2627c:	b2db      	uxtb	r3, r3
   2627e:	011b      	lsls	r3, r3, #4
   26280:	693a      	ldr	r2, [r7, #16]
   26282:	18d3      	adds	r3, r2, r3
   26284:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   26286:	4b47      	ldr	r3, [pc, #284]	; (263a4 <socket+0x1f0>)
   26288:	781b      	ldrb	r3, [r3, #0]
   2628a:	b2db      	uxtb	r3, r3
   2628c:	3301      	adds	r3, #1
   2628e:	4a46      	ldr	r2, [pc, #280]	; (263a8 <socket+0x1f4>)
   26290:	4013      	ands	r3, r2
   26292:	d504      	bpl.n	2629e <socket+0xea>
   26294:	3b01      	subs	r3, #1
   26296:	2204      	movs	r2, #4
   26298:	4252      	negs	r2, r2
   2629a:	4313      	orrs	r3, r2
   2629c:	3301      	adds	r3, #1
   2629e:	b2da      	uxtb	r2, r3
   262a0:	4b40      	ldr	r3, [pc, #256]	; (263a4 <socket+0x1f0>)
   262a2:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   262a4:	69bb      	ldr	r3, [r7, #24]
   262a6:	7a9b      	ldrb	r3, [r3, #10]
   262a8:	b2db      	uxtb	r3, r3
   262aa:	2b00      	cmp	r3, #0
   262ac:	d108      	bne.n	262c0 <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   262ae:	2317      	movs	r3, #23
   262b0:	18fb      	adds	r3, r7, r3
   262b2:	781b      	ldrb	r3, [r3, #0]
   262b4:	3307      	adds	r3, #7
   262b6:	b2da      	uxtb	r2, r3
   262b8:	231f      	movs	r3, #31
   262ba:	18fb      	adds	r3, r7, r3
   262bc:	701a      	strb	r2, [r3, #0]
					break;
   262be:	e00b      	b.n	262d8 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   262c0:	231e      	movs	r3, #30
   262c2:	18fb      	adds	r3, r7, r3
   262c4:	781a      	ldrb	r2, [r3, #0]
   262c6:	231e      	movs	r3, #30
   262c8:	18fb      	adds	r3, r7, r3
   262ca:	3201      	adds	r2, #1
   262cc:	701a      	strb	r2, [r3, #0]
   262ce:	231e      	movs	r3, #30
   262d0:	18fb      	adds	r3, r7, r3
   262d2:	781b      	ldrb	r3, [r3, #0]
   262d4:	2b03      	cmp	r3, #3
   262d6:	d9ca      	bls.n	2626e <socket+0xba>
				}
			}
		}

		if(sock >= 0)
   262d8:	231f      	movs	r3, #31
   262da:	18fb      	adds	r3, r7, r3
   262dc:	781b      	ldrb	r3, [r3, #0]
   262de:	2b7f      	cmp	r3, #127	; 0x7f
   262e0:	d84f      	bhi.n	26382 <socket+0x1ce>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   262e2:	69bb      	ldr	r3, [r7, #24]
   262e4:	2210      	movs	r2, #16
   262e6:	2100      	movs	r1, #0
   262e8:	0018      	movs	r0, r3
   262ea:	4b30      	ldr	r3, [pc, #192]	; (263ac <socket+0x1f8>)
   262ec:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   262ee:	69bb      	ldr	r3, [r7, #24]
   262f0:	2201      	movs	r2, #1
   262f2:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
   262f4:	4b2e      	ldr	r3, [pc, #184]	; (263b0 <socket+0x1fc>)
   262f6:	881b      	ldrh	r3, [r3, #0]
   262f8:	b29b      	uxth	r3, r3
   262fa:	3301      	adds	r3, #1
   262fc:	b29a      	uxth	r2, r3
   262fe:	4b2c      	ldr	r3, [pc, #176]	; (263b0 <socket+0x1fc>)
   26300:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
   26302:	4b2b      	ldr	r3, [pc, #172]	; (263b0 <socket+0x1fc>)
   26304:	881b      	ldrh	r3, [r3, #0]
   26306:	b29b      	uxth	r3, r3
   26308:	2b00      	cmp	r3, #0
   2630a:	d106      	bne.n	2631a <socket+0x166>
				++gu16SessionID;
   2630c:	4b28      	ldr	r3, [pc, #160]	; (263b0 <socket+0x1fc>)
   2630e:	881b      	ldrh	r3, [r3, #0]
   26310:	b29b      	uxth	r3, r3
   26312:	3301      	adds	r3, #1
   26314:	b29a      	uxth	r2, r3
   26316:	4b26      	ldr	r3, [pc, #152]	; (263b0 <socket+0x1fc>)
   26318:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
   2631a:	4b25      	ldr	r3, [pc, #148]	; (263b0 <socket+0x1fc>)
   2631c:	881b      	ldrh	r3, [r3, #0]
   2631e:	b29a      	uxth	r2, r3
   26320:	69bb      	ldr	r3, [r7, #24]
   26322:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   26324:	4b23      	ldr	r3, [pc, #140]	; (263b4 <socket+0x200>)
   26326:	0018      	movs	r0, r3
   26328:	4b23      	ldr	r3, [pc, #140]	; (263b8 <socket+0x204>)
   2632a:	4798      	blx	r3
   2632c:	231f      	movs	r3, #31
   2632e:	18fb      	adds	r3, r7, r3
   26330:	2100      	movs	r1, #0
   26332:	5659      	ldrsb	r1, [r3, r1]
   26334:	4b1e      	ldr	r3, [pc, #120]	; (263b0 <socket+0x1fc>)
   26336:	881b      	ldrh	r3, [r3, #0]
   26338:	b29b      	uxth	r3, r3
   2633a:	001a      	movs	r2, r3
   2633c:	4b1f      	ldr	r3, [pc, #124]	; (263bc <socket+0x208>)
   2633e:	0018      	movs	r0, r3
   26340:	4b1d      	ldr	r3, [pc, #116]	; (263b8 <socket+0x204>)
   26342:	4798      	blx	r3
   26344:	4b1e      	ldr	r3, [pc, #120]	; (263c0 <socket+0x20c>)
   26346:	0018      	movs	r0, r3
   26348:	4b1b      	ldr	r3, [pc, #108]	; (263b8 <socket+0x204>)
   2634a:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
   2634c:	1d3b      	adds	r3, r7, #4
   2634e:	781b      	ldrb	r3, [r3, #0]
   26350:	2201      	movs	r2, #1
   26352:	4013      	ands	r3, r2
   26354:	d015      	beq.n	26382 <socket+0x1ce>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
   26356:	230c      	movs	r3, #12
   26358:	18fb      	adds	r3, r7, r3
   2635a:	221f      	movs	r2, #31
   2635c:	18ba      	adds	r2, r7, r2
   2635e:	7812      	ldrb	r2, [r2, #0]
   26360:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   26362:	69bb      	ldr	r3, [r7, #24]
   26364:	2221      	movs	r2, #33	; 0x21
   26366:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   26368:	230c      	movs	r3, #12
   2636a:	18fa      	adds	r2, r7, r3
   2636c:	2300      	movs	r3, #0
   2636e:	9302      	str	r3, [sp, #8]
   26370:	2300      	movs	r3, #0
   26372:	9301      	str	r3, [sp, #4]
   26374:	2300      	movs	r3, #0
   26376:	9300      	str	r3, [sp, #0]
   26378:	2304      	movs	r3, #4
   2637a:	2150      	movs	r1, #80	; 0x50
   2637c:	2002      	movs	r0, #2
   2637e:	4c11      	ldr	r4, [pc, #68]	; (263c4 <socket+0x210>)
   26380:	47a0      	blx	r4
			}
		}
	}
	return sock;
   26382:	231f      	movs	r3, #31
   26384:	18fb      	adds	r3, r7, r3
   26386:	781b      	ldrb	r3, [r3, #0]
   26388:	b25b      	sxtb	r3, r3
}
   2638a:	0018      	movs	r0, r3
   2638c:	46bd      	mov	sp, r7
   2638e:	b009      	add	sp, #36	; 0x24
   26390:	bd90      	pop	{r4, r7, pc}
   26392:	46c0      	nop			; (mov r8, r8)
   26394:	200042b5 	.word	0x200042b5
   26398:	20005b54 	.word	0x20005b54
   2639c:	000338f5 	.word	0x000338f5
   263a0:	20005bc4 	.word	0x20005bc4
   263a4:	200042b6 	.word	0x200042b6
   263a8:	80000003 	.word	0x80000003
   263ac:	000218fd 	.word	0x000218fd
   263b0:	200042b2 	.word	0x200042b2
   263b4:	0003a198 	.word	0x0003a198
   263b8:	0001ebc9 	.word	0x0001ebc9
   263bc:	0003a1bc 	.word	0x0003a1bc
   263c0:	0003a1b8 	.word	0x0003a1b8
   263c4:	00021b5d 	.word	0x00021b5d

000263c8 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   263c8:	b5b0      	push	{r4, r5, r7, lr}
   263ca:	b08a      	sub	sp, #40	; 0x28
   263cc:	af04      	add	r7, sp, #16
   263ce:	6039      	str	r1, [r7, #0]
   263d0:	0011      	movs	r1, r2
   263d2:	1dfb      	adds	r3, r7, #7
   263d4:	1c02      	adds	r2, r0, #0
   263d6:	701a      	strb	r2, [r3, #0]
   263d8:	1dbb      	adds	r3, r7, #6
   263da:	1c0a      	adds	r2, r1, #0
   263dc:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   263de:	2317      	movs	r3, #23
   263e0:	18fb      	adds	r3, r7, r3
   263e2:	22fa      	movs	r2, #250	; 0xfa
   263e4:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   263e6:	1dfb      	adds	r3, r7, #7
   263e8:	781b      	ldrb	r3, [r3, #0]
   263ea:	2b7f      	cmp	r3, #127	; 0x7f
   263ec:	d867      	bhi.n	264be <connect+0xf6>
   263ee:	683b      	ldr	r3, [r7, #0]
   263f0:	2b00      	cmp	r3, #0
   263f2:	d064      	beq.n	264be <connect+0xf6>
   263f4:	1dfb      	adds	r3, r7, #7
   263f6:	781b      	ldrb	r3, [r3, #0]
   263f8:	b25b      	sxtb	r3, r3
   263fa:	4a35      	ldr	r2, [pc, #212]	; (264d0 <connect+0x108>)
   263fc:	011b      	lsls	r3, r3, #4
   263fe:	18d3      	adds	r3, r2, r3
   26400:	330a      	adds	r3, #10
   26402:	781b      	ldrb	r3, [r3, #0]
   26404:	b2db      	uxtb	r3, r3
   26406:	2b01      	cmp	r3, #1
   26408:	d159      	bne.n	264be <connect+0xf6>
   2640a:	1dbb      	adds	r3, r7, #6
   2640c:	781b      	ldrb	r3, [r3, #0]
   2640e:	2b00      	cmp	r3, #0
   26410:	d055      	beq.n	264be <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   26412:	2316      	movs	r3, #22
   26414:	18fb      	adds	r3, r7, r3
   26416:	2244      	movs	r2, #68	; 0x44
   26418:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   2641a:	1dfb      	adds	r3, r7, #7
   2641c:	781b      	ldrb	r3, [r3, #0]
   2641e:	b25b      	sxtb	r3, r3
   26420:	4a2b      	ldr	r2, [pc, #172]	; (264d0 <connect+0x108>)
   26422:	011b      	lsls	r3, r3, #4
   26424:	18d3      	adds	r3, r2, r3
   26426:	330b      	adds	r3, #11
   26428:	781b      	ldrb	r3, [r3, #0]
   2642a:	b2db      	uxtb	r3, r3
   2642c:	001a      	movs	r2, r3
   2642e:	2301      	movs	r3, #1
   26430:	4013      	ands	r3, r2
   26432:	d00f      	beq.n	26454 <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   26434:	2316      	movs	r3, #22
   26436:	18fb      	adds	r3, r7, r3
   26438:	224b      	movs	r2, #75	; 0x4b
   2643a:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   2643c:	1dfb      	adds	r3, r7, #7
   2643e:	781b      	ldrb	r3, [r3, #0]
   26440:	b25b      	sxtb	r3, r3
   26442:	4a23      	ldr	r2, [pc, #140]	; (264d0 <connect+0x108>)
   26444:	011b      	lsls	r3, r3, #4
   26446:	18d3      	adds	r3, r2, r3
   26448:	330b      	adds	r3, #11
   2644a:	781b      	ldrb	r3, [r3, #0]
   2644c:	b2da      	uxtb	r2, r3
   2644e:	2308      	movs	r3, #8
   26450:	18fb      	adds	r3, r7, r3
   26452:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
   26454:	2308      	movs	r3, #8
   26456:	18fb      	adds	r3, r7, r3
   26458:	1dfa      	adds	r2, r7, #7
   2645a:	7812      	ldrb	r2, [r2, #0]
   2645c:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   2645e:	6839      	ldr	r1, [r7, #0]
   26460:	2308      	movs	r3, #8
   26462:	18fb      	adds	r3, r7, r3
   26464:	2208      	movs	r2, #8
   26466:	0018      	movs	r0, r3
   26468:	4b1a      	ldr	r3, [pc, #104]	; (264d4 <connect+0x10c>)
   2646a:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   2646c:	1dfb      	adds	r3, r7, #7
   2646e:	781b      	ldrb	r3, [r3, #0]
   26470:	b25b      	sxtb	r3, r3
   26472:	4a17      	ldr	r2, [pc, #92]	; (264d0 <connect+0x108>)
   26474:	011b      	lsls	r3, r3, #4
   26476:	18d3      	adds	r3, r2, r3
   26478:	3306      	adds	r3, #6
   2647a:	881b      	ldrh	r3, [r3, #0]
   2647c:	b29a      	uxth	r2, r3
   2647e:	2308      	movs	r3, #8
   26480:	18fb      	adds	r3, r7, r3
   26482:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   26484:	2317      	movs	r3, #23
   26486:	18fc      	adds	r4, r7, r3
   26488:	2308      	movs	r3, #8
   2648a:	18fa      	adds	r2, r7, r3
   2648c:	2316      	movs	r3, #22
   2648e:	18fb      	adds	r3, r7, r3
   26490:	7819      	ldrb	r1, [r3, #0]
   26492:	2300      	movs	r3, #0
   26494:	9302      	str	r3, [sp, #8]
   26496:	2300      	movs	r3, #0
   26498:	9301      	str	r3, [sp, #4]
   2649a:	2300      	movs	r3, #0
   2649c:	9300      	str	r3, [sp, #0]
   2649e:	230c      	movs	r3, #12
   264a0:	2002      	movs	r0, #2
   264a2:	4d0d      	ldr	r5, [pc, #52]	; (264d8 <connect+0x110>)
   264a4:	47a8      	blx	r5
   264a6:	0003      	movs	r3, r0
   264a8:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   264aa:	2317      	movs	r3, #23
   264ac:	18fb      	adds	r3, r7, r3
   264ae:	781b      	ldrb	r3, [r3, #0]
   264b0:	b25b      	sxtb	r3, r3
   264b2:	2b00      	cmp	r3, #0
   264b4:	d003      	beq.n	264be <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
   264b6:	2317      	movs	r3, #23
   264b8:	18fb      	adds	r3, r7, r3
   264ba:	22f7      	movs	r2, #247	; 0xf7
   264bc:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
   264be:	2317      	movs	r3, #23
   264c0:	18fb      	adds	r3, r7, r3
   264c2:	781b      	ldrb	r3, [r3, #0]
   264c4:	b25b      	sxtb	r3, r3
}
   264c6:	0018      	movs	r0, r3
   264c8:	46bd      	mov	sp, r7
   264ca:	b006      	add	sp, #24
   264cc:	bdb0      	pop	{r4, r5, r7, pc}
   264ce:	46c0      	nop			; (mov r8, r8)
   264d0:	20005b54 	.word	0x20005b54
   264d4:	000218c1 	.word	0x000218c1
   264d8:	00021b5d 	.word	0x00021b5d

000264dc <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   264dc:	b590      	push	{r4, r7, lr}
   264de:	b08f      	sub	sp, #60	; 0x3c
   264e0:	af04      	add	r7, sp, #16
   264e2:	0004      	movs	r4, r0
   264e4:	60b9      	str	r1, [r7, #8]
   264e6:	0010      	movs	r0, r2
   264e8:	0019      	movs	r1, r3
   264ea:	230f      	movs	r3, #15
   264ec:	18fb      	adds	r3, r7, r3
   264ee:	1c22      	adds	r2, r4, #0
   264f0:	701a      	strb	r2, [r3, #0]
   264f2:	230c      	movs	r3, #12
   264f4:	18fb      	adds	r3, r7, r3
   264f6:	1c02      	adds	r2, r0, #0
   264f8:	801a      	strh	r2, [r3, #0]
   264fa:	1dbb      	adds	r3, r7, #6
   264fc:	1c0a      	adds	r2, r1, #0
   264fe:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   26500:	2326      	movs	r3, #38	; 0x26
   26502:	18fb      	adds	r3, r7, r3
   26504:	2206      	movs	r2, #6
   26506:	4252      	negs	r2, r2
   26508:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   2650a:	230f      	movs	r3, #15
   2650c:	18fb      	adds	r3, r7, r3
   2650e:	781b      	ldrb	r3, [r3, #0]
   26510:	2b7f      	cmp	r3, #127	; 0x7f
   26512:	d900      	bls.n	26516 <send+0x3a>
   26514:	e087      	b.n	26626 <send+0x14a>
   26516:	68bb      	ldr	r3, [r7, #8]
   26518:	2b00      	cmp	r3, #0
   2651a:	d100      	bne.n	2651e <send+0x42>
   2651c:	e083      	b.n	26626 <send+0x14a>
   2651e:	230c      	movs	r3, #12
   26520:	18fb      	adds	r3, r7, r3
   26522:	881a      	ldrh	r2, [r3, #0]
   26524:	23af      	movs	r3, #175	; 0xaf
   26526:	00db      	lsls	r3, r3, #3
   26528:	429a      	cmp	r2, r3
   2652a:	d900      	bls.n	2652e <send+0x52>
   2652c:	e07b      	b.n	26626 <send+0x14a>
   2652e:	230f      	movs	r3, #15
   26530:	18fb      	adds	r3, r7, r3
   26532:	781b      	ldrb	r3, [r3, #0]
   26534:	b25b      	sxtb	r3, r3
   26536:	4a40      	ldr	r2, [pc, #256]	; (26638 <send+0x15c>)
   26538:	011b      	lsls	r3, r3, #4
   2653a:	18d3      	adds	r3, r2, r3
   2653c:	330a      	adds	r3, #10
   2653e:	781b      	ldrb	r3, [r3, #0]
   26540:	b2db      	uxtb	r3, r3
   26542:	2b01      	cmp	r3, #1
   26544:	d16f      	bne.n	26626 <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
   26546:	2323      	movs	r3, #35	; 0x23
   26548:	18fb      	adds	r3, r7, r3
   2654a:	2245      	movs	r2, #69	; 0x45
   2654c:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   2654e:	2324      	movs	r3, #36	; 0x24
   26550:	18fb      	adds	r3, r7, r3
   26552:	2250      	movs	r2, #80	; 0x50
   26554:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
   26556:	2310      	movs	r3, #16
   26558:	18fb      	adds	r3, r7, r3
   2655a:	220f      	movs	r2, #15
   2655c:	18ba      	adds	r2, r7, r2
   2655e:	7812      	ldrb	r2, [r2, #0]
   26560:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   26562:	2310      	movs	r3, #16
   26564:	18fb      	adds	r3, r7, r3
   26566:	220c      	movs	r2, #12
   26568:	18ba      	adds	r2, r7, r2
   2656a:	8812      	ldrh	r2, [r2, #0]
   2656c:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   2656e:	230f      	movs	r3, #15
   26570:	18fb      	adds	r3, r7, r3
   26572:	781b      	ldrb	r3, [r3, #0]
   26574:	b25b      	sxtb	r3, r3
   26576:	4a30      	ldr	r2, [pc, #192]	; (26638 <send+0x15c>)
   26578:	011b      	lsls	r3, r3, #4
   2657a:	18d3      	adds	r3, r2, r3
   2657c:	3306      	adds	r3, #6
   2657e:	881b      	ldrh	r3, [r3, #0]
   26580:	b29a      	uxth	r2, r3
   26582:	2310      	movs	r3, #16
   26584:	18fb      	adds	r3, r7, r3
   26586:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
   26588:	230f      	movs	r3, #15
   2658a:	18fb      	adds	r3, r7, r3
   2658c:	781b      	ldrb	r3, [r3, #0]
   2658e:	b25b      	sxtb	r3, r3
   26590:	2b06      	cmp	r3, #6
   26592:	dd03      	ble.n	2659c <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   26594:	2324      	movs	r3, #36	; 0x24
   26596:	18fb      	adds	r3, r7, r3
   26598:	2244      	movs	r2, #68	; 0x44
   2659a:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   2659c:	230f      	movs	r3, #15
   2659e:	18fb      	adds	r3, r7, r3
   265a0:	781b      	ldrb	r3, [r3, #0]
   265a2:	b25b      	sxtb	r3, r3
   265a4:	4a24      	ldr	r2, [pc, #144]	; (26638 <send+0x15c>)
   265a6:	011b      	lsls	r3, r3, #4
   265a8:	18d3      	adds	r3, r2, r3
   265aa:	330b      	adds	r3, #11
   265ac:	781b      	ldrb	r3, [r3, #0]
   265ae:	b2db      	uxtb	r3, r3
   265b0:	001a      	movs	r2, r3
   265b2:	2301      	movs	r3, #1
   265b4:	4013      	ands	r3, r2
   265b6:	d00f      	beq.n	265d8 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   265b8:	2323      	movs	r3, #35	; 0x23
   265ba:	18fb      	adds	r3, r7, r3
   265bc:	224c      	movs	r2, #76	; 0x4c
   265be:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   265c0:	230f      	movs	r3, #15
   265c2:	18fb      	adds	r3, r7, r3
   265c4:	2200      	movs	r2, #0
   265c6:	569a      	ldrsb	r2, [r3, r2]
   265c8:	2324      	movs	r3, #36	; 0x24
   265ca:	18fb      	adds	r3, r7, r3
   265cc:	491a      	ldr	r1, [pc, #104]	; (26638 <send+0x15c>)
   265ce:	0112      	lsls	r2, r2, #4
   265d0:	188a      	adds	r2, r1, r2
   265d2:	3208      	adds	r2, #8
   265d4:	8812      	ldrh	r2, [r2, #0]
   265d6:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   265d8:	2323      	movs	r3, #35	; 0x23
   265da:	18fb      	adds	r3, r7, r3
   265dc:	781b      	ldrb	r3, [r3, #0]
   265de:	2280      	movs	r2, #128	; 0x80
   265e0:	4252      	negs	r2, r2
   265e2:	4313      	orrs	r3, r2
   265e4:	b2d9      	uxtb	r1, r3
   265e6:	2310      	movs	r3, #16
   265e8:	18fa      	adds	r2, r7, r3
   265ea:	2324      	movs	r3, #36	; 0x24
   265ec:	18fb      	adds	r3, r7, r3
   265ee:	881b      	ldrh	r3, [r3, #0]
   265f0:	9302      	str	r3, [sp, #8]
   265f2:	230c      	movs	r3, #12
   265f4:	18fb      	adds	r3, r7, r3
   265f6:	881b      	ldrh	r3, [r3, #0]
   265f8:	9301      	str	r3, [sp, #4]
   265fa:	68bb      	ldr	r3, [r7, #8]
   265fc:	9300      	str	r3, [sp, #0]
   265fe:	2310      	movs	r3, #16
   26600:	2002      	movs	r0, #2
   26602:	4c0e      	ldr	r4, [pc, #56]	; (2663c <send+0x160>)
   26604:	47a0      	blx	r4
   26606:	0003      	movs	r3, r0
   26608:	001a      	movs	r2, r3
   2660a:	2326      	movs	r3, #38	; 0x26
   2660c:	18fb      	adds	r3, r7, r3
   2660e:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
   26610:	2326      	movs	r3, #38	; 0x26
   26612:	18fb      	adds	r3, r7, r3
   26614:	2200      	movs	r2, #0
   26616:	5e9b      	ldrsh	r3, [r3, r2]
   26618:	2b00      	cmp	r3, #0
   2661a:	d004      	beq.n	26626 <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   2661c:	2326      	movs	r3, #38	; 0x26
   2661e:	18fb      	adds	r3, r7, r3
   26620:	220e      	movs	r2, #14
   26622:	4252      	negs	r2, r2
   26624:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
   26626:	2326      	movs	r3, #38	; 0x26
   26628:	18fb      	adds	r3, r7, r3
   2662a:	2200      	movs	r2, #0
   2662c:	5e9b      	ldrsh	r3, [r3, r2]
}
   2662e:	0018      	movs	r0, r3
   26630:	46bd      	mov	sp, r7
   26632:	b00b      	add	sp, #44	; 0x2c
   26634:	bd90      	pop	{r4, r7, pc}
   26636:	46c0      	nop			; (mov r8, r8)
   26638:	20005b54 	.word	0x20005b54
   2663c:	00021b5d 	.word	0x00021b5d

00026640 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   26640:	b590      	push	{r4, r7, lr}
   26642:	b08d      	sub	sp, #52	; 0x34
   26644:	af04      	add	r7, sp, #16
   26646:	60b9      	str	r1, [r7, #8]
   26648:	0011      	movs	r1, r2
   2664a:	607b      	str	r3, [r7, #4]
   2664c:	230f      	movs	r3, #15
   2664e:	18fb      	adds	r3, r7, r3
   26650:	1c02      	adds	r2, r0, #0
   26652:	701a      	strb	r2, [r3, #0]
   26654:	230c      	movs	r3, #12
   26656:	18fb      	adds	r3, r7, r3
   26658:	1c0a      	adds	r2, r1, #0
   2665a:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   2665c:	231e      	movs	r3, #30
   2665e:	18fb      	adds	r3, r7, r3
   26660:	2206      	movs	r2, #6
   26662:	4252      	negs	r2, r2
   26664:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   26666:	230f      	movs	r3, #15
   26668:	18fb      	adds	r3, r7, r3
   2666a:	781b      	ldrb	r3, [r3, #0]
   2666c:	2b7f      	cmp	r3, #127	; 0x7f
   2666e:	d900      	bls.n	26672 <recv+0x32>
   26670:	e099      	b.n	267a6 <recv+0x166>
   26672:	68bb      	ldr	r3, [r7, #8]
   26674:	2b00      	cmp	r3, #0
   26676:	d100      	bne.n	2667a <recv+0x3a>
   26678:	e095      	b.n	267a6 <recv+0x166>
   2667a:	230c      	movs	r3, #12
   2667c:	18fb      	adds	r3, r7, r3
   2667e:	881b      	ldrh	r3, [r3, #0]
   26680:	2b00      	cmp	r3, #0
   26682:	d100      	bne.n	26686 <recv+0x46>
   26684:	e08f      	b.n	267a6 <recv+0x166>
   26686:	230f      	movs	r3, #15
   26688:	18fb      	adds	r3, r7, r3
   2668a:	781b      	ldrb	r3, [r3, #0]
   2668c:	b25b      	sxtb	r3, r3
   2668e:	4a4a      	ldr	r2, [pc, #296]	; (267b8 <recv+0x178>)
   26690:	011b      	lsls	r3, r3, #4
   26692:	18d3      	adds	r3, r2, r3
   26694:	330a      	adds	r3, #10
   26696:	781b      	ldrb	r3, [r3, #0]
   26698:	b2db      	uxtb	r3, r3
   2669a:	2b01      	cmp	r3, #1
   2669c:	d000      	beq.n	266a0 <recv+0x60>
   2669e:	e082      	b.n	267a6 <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
   266a0:	231e      	movs	r3, #30
   266a2:	18fb      	adds	r3, r7, r3
   266a4:	2200      	movs	r2, #0
   266a6:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   266a8:	230f      	movs	r3, #15
   266aa:	18fb      	adds	r3, r7, r3
   266ac:	2200      	movs	r2, #0
   266ae:	569a      	ldrsb	r2, [r3, r2]
   266b0:	4b41      	ldr	r3, [pc, #260]	; (267b8 <recv+0x178>)
   266b2:	0112      	lsls	r2, r2, #4
   266b4:	68b9      	ldr	r1, [r7, #8]
   266b6:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   266b8:	230f      	movs	r3, #15
   266ba:	18fb      	adds	r3, r7, r3
   266bc:	781b      	ldrb	r3, [r3, #0]
   266be:	b25b      	sxtb	r3, r3
   266c0:	4a3d      	ldr	r2, [pc, #244]	; (267b8 <recv+0x178>)
   266c2:	011b      	lsls	r3, r3, #4
   266c4:	18d3      	adds	r3, r2, r3
   266c6:	3304      	adds	r3, #4
   266c8:	220c      	movs	r2, #12
   266ca:	18ba      	adds	r2, r7, r2
   266cc:	8812      	ldrh	r2, [r2, #0]
   266ce:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
   266d0:	230f      	movs	r3, #15
   266d2:	18fb      	adds	r3, r7, r3
   266d4:	781b      	ldrb	r3, [r3, #0]
   266d6:	b25b      	sxtb	r3, r3
   266d8:	4a37      	ldr	r2, [pc, #220]	; (267b8 <recv+0x178>)
   266da:	011b      	lsls	r3, r3, #4
   266dc:	18d3      	adds	r3, r2, r3
   266de:	330c      	adds	r3, #12
   266e0:	781b      	ldrb	r3, [r3, #0]
   266e2:	b2db      	uxtb	r3, r3
   266e4:	2b00      	cmp	r3, #0
   266e6:	d15e      	bne.n	267a6 <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
   266e8:	231d      	movs	r3, #29
   266ea:	18fb      	adds	r3, r7, r3
   266ec:	2246      	movs	r2, #70	; 0x46
   266ee:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
   266f0:	230f      	movs	r3, #15
   266f2:	18fb      	adds	r3, r7, r3
   266f4:	781b      	ldrb	r3, [r3, #0]
   266f6:	b25b      	sxtb	r3, r3
   266f8:	4a2f      	ldr	r2, [pc, #188]	; (267b8 <recv+0x178>)
   266fa:	011b      	lsls	r3, r3, #4
   266fc:	18d3      	adds	r3, r2, r3
   266fe:	330c      	adds	r3, #12
   26700:	2201      	movs	r2, #1
   26702:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   26704:	230f      	movs	r3, #15
   26706:	18fb      	adds	r3, r7, r3
   26708:	781b      	ldrb	r3, [r3, #0]
   2670a:	b25b      	sxtb	r3, r3
   2670c:	4a2a      	ldr	r2, [pc, #168]	; (267b8 <recv+0x178>)
   2670e:	011b      	lsls	r3, r3, #4
   26710:	18d3      	adds	r3, r2, r3
   26712:	330b      	adds	r3, #11
   26714:	781b      	ldrb	r3, [r3, #0]
   26716:	b2db      	uxtb	r3, r3
   26718:	001a      	movs	r2, r3
   2671a:	2301      	movs	r3, #1
   2671c:	4013      	ands	r3, r2
   2671e:	d003      	beq.n	26728 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   26720:	231d      	movs	r3, #29
   26722:	18fb      	adds	r3, r7, r3
   26724:	224d      	movs	r2, #77	; 0x4d
   26726:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   26728:	687b      	ldr	r3, [r7, #4]
   2672a:	2b00      	cmp	r3, #0
   2672c:	d105      	bne.n	2673a <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   2672e:	2314      	movs	r3, #20
   26730:	18fb      	adds	r3, r7, r3
   26732:	2201      	movs	r2, #1
   26734:	4252      	negs	r2, r2
   26736:	601a      	str	r2, [r3, #0]
   26738:	e003      	b.n	26742 <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   2673a:	2314      	movs	r3, #20
   2673c:	18fb      	adds	r3, r7, r3
   2673e:	687a      	ldr	r2, [r7, #4]
   26740:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
   26742:	2314      	movs	r3, #20
   26744:	18fb      	adds	r3, r7, r3
   26746:	220f      	movs	r2, #15
   26748:	18ba      	adds	r2, r7, r2
   2674a:	7812      	ldrb	r2, [r2, #0]
   2674c:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   2674e:	230f      	movs	r3, #15
   26750:	18fb      	adds	r3, r7, r3
   26752:	781b      	ldrb	r3, [r3, #0]
   26754:	b25b      	sxtb	r3, r3
   26756:	4a18      	ldr	r2, [pc, #96]	; (267b8 <recv+0x178>)
   26758:	011b      	lsls	r3, r3, #4
   2675a:	18d3      	adds	r3, r2, r3
   2675c:	3306      	adds	r3, #6
   2675e:	881b      	ldrh	r3, [r3, #0]
   26760:	b29a      	uxth	r2, r3
   26762:	2314      	movs	r3, #20
   26764:	18fb      	adds	r3, r7, r3
   26766:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   26768:	2314      	movs	r3, #20
   2676a:	18fa      	adds	r2, r7, r3
   2676c:	231d      	movs	r3, #29
   2676e:	18fb      	adds	r3, r7, r3
   26770:	7819      	ldrb	r1, [r3, #0]
   26772:	2300      	movs	r3, #0
   26774:	9302      	str	r3, [sp, #8]
   26776:	2300      	movs	r3, #0
   26778:	9301      	str	r3, [sp, #4]
   2677a:	2300      	movs	r3, #0
   2677c:	9300      	str	r3, [sp, #0]
   2677e:	2308      	movs	r3, #8
   26780:	2002      	movs	r0, #2
   26782:	4c0e      	ldr	r4, [pc, #56]	; (267bc <recv+0x17c>)
   26784:	47a0      	blx	r4
   26786:	0003      	movs	r3, r0
   26788:	001a      	movs	r2, r3
   2678a:	231e      	movs	r3, #30
   2678c:	18fb      	adds	r3, r7, r3
   2678e:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
   26790:	231e      	movs	r3, #30
   26792:	18fb      	adds	r3, r7, r3
   26794:	2200      	movs	r2, #0
   26796:	5e9b      	ldrsh	r3, [r3, r2]
   26798:	2b00      	cmp	r3, #0
   2679a:	d004      	beq.n	267a6 <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   2679c:	231e      	movs	r3, #30
   2679e:	18fb      	adds	r3, r7, r3
   267a0:	220e      	movs	r2, #14
   267a2:	4252      	negs	r2, r2
   267a4:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
   267a6:	231e      	movs	r3, #30
   267a8:	18fb      	adds	r3, r7, r3
   267aa:	2200      	movs	r2, #0
   267ac:	5e9b      	ldrsh	r3, [r3, r2]
}
   267ae:	0018      	movs	r0, r3
   267b0:	46bd      	mov	sp, r7
   267b2:	b009      	add	sp, #36	; 0x24
   267b4:	bd90      	pop	{r4, r7, pc}
   267b6:	46c0      	nop			; (mov r8, r8)
   267b8:	20005b54 	.word	0x20005b54
   267bc:	00021b5d 	.word	0x00021b5d

000267c0 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   267c0:	b5b0      	push	{r4, r5, r7, lr}
   267c2:	b088      	sub	sp, #32
   267c4:	af04      	add	r7, sp, #16
   267c6:	0002      	movs	r2, r0
   267c8:	1dfb      	adds	r3, r7, #7
   267ca:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   267cc:	230f      	movs	r3, #15
   267ce:	18fb      	adds	r3, r7, r3
   267d0:	22fa      	movs	r2, #250	; 0xfa
   267d2:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
   267d4:	4b43      	ldr	r3, [pc, #268]	; (268e4 <close+0x124>)
   267d6:	0018      	movs	r0, r3
   267d8:	4b43      	ldr	r3, [pc, #268]	; (268e8 <close+0x128>)
   267da:	4798      	blx	r3
   267dc:	1dfb      	adds	r3, r7, #7
   267de:	2200      	movs	r2, #0
   267e0:	569a      	ldrsb	r2, [r3, r2]
   267e2:	4b42      	ldr	r3, [pc, #264]	; (268ec <close+0x12c>)
   267e4:	0011      	movs	r1, r2
   267e6:	0018      	movs	r0, r3
   267e8:	4b3f      	ldr	r3, [pc, #252]	; (268e8 <close+0x128>)
   267ea:	4798      	blx	r3
   267ec:	4b40      	ldr	r3, [pc, #256]	; (268f0 <close+0x130>)
   267ee:	0018      	movs	r0, r3
   267f0:	4b3d      	ldr	r3, [pc, #244]	; (268e8 <close+0x128>)
   267f2:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   267f4:	1dfb      	adds	r3, r7, #7
   267f6:	781b      	ldrb	r3, [r3, #0]
   267f8:	2b7f      	cmp	r3, #127	; 0x7f
   267fa:	d86a      	bhi.n	268d2 <close+0x112>
   267fc:	1dfb      	adds	r3, r7, #7
   267fe:	781b      	ldrb	r3, [r3, #0]
   26800:	b25b      	sxtb	r3, r3
   26802:	4a3c      	ldr	r2, [pc, #240]	; (268f4 <close+0x134>)
   26804:	011b      	lsls	r3, r3, #4
   26806:	18d3      	adds	r3, r2, r3
   26808:	330a      	adds	r3, #10
   2680a:	781b      	ldrb	r3, [r3, #0]
   2680c:	b2db      	uxtb	r3, r3
   2680e:	2b01      	cmp	r3, #1
   26810:	d15f      	bne.n	268d2 <close+0x112>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   26812:	230e      	movs	r3, #14
   26814:	18fb      	adds	r3, r7, r3
   26816:	2249      	movs	r2, #73	; 0x49
   26818:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   2681a:	2308      	movs	r3, #8
   2681c:	18fb      	adds	r3, r7, r3
   2681e:	1dfa      	adds	r2, r7, #7
   26820:	7812      	ldrb	r2, [r2, #0]
   26822:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   26824:	1dfb      	adds	r3, r7, #7
   26826:	781b      	ldrb	r3, [r3, #0]
   26828:	b25b      	sxtb	r3, r3
   2682a:	4a32      	ldr	r2, [pc, #200]	; (268f4 <close+0x134>)
   2682c:	011b      	lsls	r3, r3, #4
   2682e:	18d3      	adds	r3, r2, r3
   26830:	3306      	adds	r3, #6
   26832:	881b      	ldrh	r3, [r3, #0]
   26834:	b29a      	uxth	r2, r3
   26836:	2308      	movs	r3, #8
   26838:	18fb      	adds	r3, r7, r3
   2683a:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   2683c:	1dfb      	adds	r3, r7, #7
   2683e:	781b      	ldrb	r3, [r3, #0]
   26840:	b25b      	sxtb	r3, r3
   26842:	4a2c      	ldr	r2, [pc, #176]	; (268f4 <close+0x134>)
   26844:	011b      	lsls	r3, r3, #4
   26846:	18d3      	adds	r3, r2, r3
   26848:	330a      	adds	r3, #10
   2684a:	2200      	movs	r2, #0
   2684c:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
   2684e:	1dfb      	adds	r3, r7, #7
   26850:	781b      	ldrb	r3, [r3, #0]
   26852:	b25b      	sxtb	r3, r3
   26854:	4a27      	ldr	r2, [pc, #156]	; (268f4 <close+0x134>)
   26856:	011b      	lsls	r3, r3, #4
   26858:	18d3      	adds	r3, r2, r3
   2685a:	3306      	adds	r3, #6
   2685c:	2200      	movs	r2, #0
   2685e:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   26860:	1dfb      	adds	r3, r7, #7
   26862:	781b      	ldrb	r3, [r3, #0]
   26864:	b25b      	sxtb	r3, r3
   26866:	4a23      	ldr	r2, [pc, #140]	; (268f4 <close+0x134>)
   26868:	011b      	lsls	r3, r3, #4
   2686a:	18d3      	adds	r3, r2, r3
   2686c:	330b      	adds	r3, #11
   2686e:	781b      	ldrb	r3, [r3, #0]
   26870:	b2db      	uxtb	r3, r3
   26872:	001a      	movs	r2, r3
   26874:	2301      	movs	r3, #1
   26876:	4013      	ands	r3, r2
   26878:	d003      	beq.n	26882 <close+0xc2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   2687a:	230e      	movs	r3, #14
   2687c:	18fb      	adds	r3, r7, r3
   2687e:	224e      	movs	r2, #78	; 0x4e
   26880:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   26882:	230f      	movs	r3, #15
   26884:	18fc      	adds	r4, r7, r3
   26886:	2308      	movs	r3, #8
   26888:	18fa      	adds	r2, r7, r3
   2688a:	230e      	movs	r3, #14
   2688c:	18fb      	adds	r3, r7, r3
   2688e:	7819      	ldrb	r1, [r3, #0]
   26890:	2300      	movs	r3, #0
   26892:	9302      	str	r3, [sp, #8]
   26894:	2300      	movs	r3, #0
   26896:	9301      	str	r3, [sp, #4]
   26898:	2300      	movs	r3, #0
   2689a:	9300      	str	r3, [sp, #0]
   2689c:	2304      	movs	r3, #4
   2689e:	2002      	movs	r0, #2
   268a0:	4d15      	ldr	r5, [pc, #84]	; (268f8 <close+0x138>)
   268a2:	47a8      	blx	r5
   268a4:	0003      	movs	r3, r0
   268a6:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   268a8:	230f      	movs	r3, #15
   268aa:	18fb      	adds	r3, r7, r3
   268ac:	781b      	ldrb	r3, [r3, #0]
   268ae:	b25b      	sxtb	r3, r3
   268b0:	2b00      	cmp	r3, #0
   268b2:	d003      	beq.n	268bc <close+0xfc>
		{
			s8Ret = SOCK_ERR_INVALID;
   268b4:	230f      	movs	r3, #15
   268b6:	18fb      	adds	r3, r7, r3
   268b8:	22f7      	movs	r2, #247	; 0xf7
   268ba:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   268bc:	1dfb      	adds	r3, r7, #7
   268be:	781b      	ldrb	r3, [r3, #0]
   268c0:	b25b      	sxtb	r3, r3
   268c2:	011a      	lsls	r2, r3, #4
   268c4:	4b0b      	ldr	r3, [pc, #44]	; (268f4 <close+0x134>)
   268c6:	18d3      	adds	r3, r2, r3
   268c8:	2210      	movs	r2, #16
   268ca:	2100      	movs	r1, #0
   268cc:	0018      	movs	r0, r3
   268ce:	4b0b      	ldr	r3, [pc, #44]	; (268fc <close+0x13c>)
   268d0:	4798      	blx	r3
	}
	return s8Ret;
   268d2:	230f      	movs	r3, #15
   268d4:	18fb      	adds	r3, r7, r3
   268d6:	781b      	ldrb	r3, [r3, #0]
   268d8:	b25b      	sxtb	r3, r3
}
   268da:	0018      	movs	r0, r3
   268dc:	46bd      	mov	sp, r7
   268de:	b004      	add	sp, #16
   268e0:	bdb0      	pop	{r4, r5, r7, pc}
   268e2:	46c0      	nop			; (mov r8, r8)
   268e4:	0003a198 	.word	0x0003a198
   268e8:	0001ebc9 	.word	0x0001ebc9
   268ec:	0003a1d8 	.word	0x0003a1d8
   268f0:	0003a1b8 	.word	0x0003a1b8
   268f4:	20005b54 	.word	0x20005b54
   268f8:	00021b5d 	.word	0x00021b5d
   268fc:	000218fd 	.word	0x000218fd

00026900 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   26900:	b580      	push	{r7, lr}
   26902:	b086      	sub	sp, #24
   26904:	af00      	add	r7, sp, #0
   26906:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
   26908:	2300      	movs	r3, #0
   2690a:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
   2690c:	2317      	movs	r3, #23
   2690e:	18fb      	adds	r3, r7, r3
   26910:	2200      	movs	r2, #0
   26912:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
   26914:	2316      	movs	r3, #22
   26916:	18fb      	adds	r3, r7, r3
   26918:	2200      	movs	r2, #0
   2691a:	701a      	strb	r2, [r3, #0]
   2691c:	e060      	b.n	269e0 <nmi_inet_addr+0xe0>
	{
		j = 0;
   2691e:	2315      	movs	r3, #21
   26920:	18fb      	adds	r3, r7, r3
   26922:	2200      	movs	r2, #0
   26924:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
   26926:	2314      	movs	r3, #20
   26928:	18fb      	adds	r3, r7, r3
   2692a:	687a      	ldr	r2, [r7, #4]
   2692c:	7812      	ldrb	r2, [r2, #0]
   2692e:	701a      	strb	r2, [r3, #0]
			++j;
   26930:	2315      	movs	r3, #21
   26932:	18fb      	adds	r3, r7, r3
   26934:	2215      	movs	r2, #21
   26936:	18ba      	adds	r2, r7, r2
   26938:	7812      	ldrb	r2, [r2, #0]
   2693a:	3201      	adds	r2, #1
   2693c:	701a      	strb	r2, [r3, #0]
			if(j > 4)
   2693e:	2315      	movs	r3, #21
   26940:	18fb      	adds	r3, r7, r3
   26942:	781b      	ldrb	r3, [r3, #0]
   26944:	2b04      	cmp	r3, #4
   26946:	d901      	bls.n	2694c <nmi_inet_addr+0x4c>
			{
				return 0;
   26948:	2300      	movs	r3, #0
   2694a:	e057      	b.n	269fc <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
   2694c:	2314      	movs	r3, #20
   2694e:	18fb      	adds	r3, r7, r3
   26950:	781b      	ldrb	r3, [r3, #0]
   26952:	2b2e      	cmp	r3, #46	; 0x2e
   26954:	d004      	beq.n	26960 <nmi_inet_addr+0x60>
   26956:	2314      	movs	r3, #20
   26958:	18fb      	adds	r3, r7, r3
   2695a:	781b      	ldrb	r3, [r3, #0]
   2695c:	2b00      	cmp	r3, #0
   2695e:	d10d      	bne.n	2697c <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
   26960:	2316      	movs	r3, #22
   26962:	18fb      	adds	r3, r7, r3
   26964:	781b      	ldrb	r3, [r3, #0]
   26966:	220c      	movs	r2, #12
   26968:	18ba      	adds	r2, r7, r2
   2696a:	2117      	movs	r1, #23
   2696c:	1879      	adds	r1, r7, r1
   2696e:	7809      	ldrb	r1, [r1, #0]
   26970:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
   26972:	2317      	movs	r3, #23
   26974:	18fb      	adds	r3, r7, r3
   26976:	2200      	movs	r2, #0
   26978:	701a      	strb	r2, [r3, #0]
   2697a:	e01d      	b.n	269b8 <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
   2697c:	2314      	movs	r3, #20
   2697e:	18fb      	adds	r3, r7, r3
   26980:	781b      	ldrb	r3, [r3, #0]
   26982:	2b2f      	cmp	r3, #47	; 0x2f
   26984:	d916      	bls.n	269b4 <nmi_inet_addr+0xb4>
   26986:	2314      	movs	r3, #20
   26988:	18fb      	adds	r3, r7, r3
   2698a:	781b      	ldrb	r3, [r3, #0]
   2698c:	2b39      	cmp	r3, #57	; 0x39
   2698e:	d811      	bhi.n	269b4 <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
   26990:	2317      	movs	r3, #23
   26992:	18fb      	adds	r3, r7, r3
   26994:	781b      	ldrb	r3, [r3, #0]
   26996:	1c1a      	adds	r2, r3, #0
   26998:	0092      	lsls	r2, r2, #2
   2699a:	18d3      	adds	r3, r2, r3
   2699c:	18db      	adds	r3, r3, r3
   2699e:	b2da      	uxtb	r2, r3
   269a0:	2314      	movs	r3, #20
   269a2:	18fb      	adds	r3, r7, r3
   269a4:	781b      	ldrb	r3, [r3, #0]
   269a6:	18d3      	adds	r3, r2, r3
   269a8:	b2da      	uxtb	r2, r3
   269aa:	2317      	movs	r3, #23
   269ac:	18fb      	adds	r3, r7, r3
   269ae:	3a30      	subs	r2, #48	; 0x30
   269b0:	701a      	strb	r2, [r3, #0]
   269b2:	e001      	b.n	269b8 <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
   269b4:	2300      	movs	r3, #0
   269b6:	e021      	b.n	269fc <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
   269b8:	687b      	ldr	r3, [r7, #4]
   269ba:	3301      	adds	r3, #1
   269bc:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
   269be:	2314      	movs	r3, #20
   269c0:	18fb      	adds	r3, r7, r3
   269c2:	781b      	ldrb	r3, [r3, #0]
   269c4:	2b2e      	cmp	r3, #46	; 0x2e
   269c6:	d004      	beq.n	269d2 <nmi_inet_addr+0xd2>
   269c8:	2314      	movs	r3, #20
   269ca:	18fb      	adds	r3, r7, r3
   269cc:	781b      	ldrb	r3, [r3, #0]
   269ce:	2b00      	cmp	r3, #0
   269d0:	d1a9      	bne.n	26926 <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
   269d2:	2316      	movs	r3, #22
   269d4:	18fb      	adds	r3, r7, r3
   269d6:	2216      	movs	r2, #22
   269d8:	18ba      	adds	r2, r7, r2
   269da:	7812      	ldrb	r2, [r2, #0]
   269dc:	3201      	adds	r2, #1
   269de:	701a      	strb	r2, [r3, #0]
   269e0:	2316      	movs	r3, #22
   269e2:	18fb      	adds	r3, r7, r3
   269e4:	781b      	ldrb	r3, [r3, #0]
   269e6:	2b03      	cmp	r3, #3
   269e8:	d999      	bls.n	2691e <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   269ea:	230c      	movs	r3, #12
   269ec:	18f9      	adds	r1, r7, r3
   269ee:	2310      	movs	r3, #16
   269f0:	18fb      	adds	r3, r7, r3
   269f2:	2204      	movs	r2, #4
   269f4:	0018      	movs	r0, r3
   269f6:	4b03      	ldr	r3, [pc, #12]	; (26a04 <nmi_inet_addr+0x104>)
   269f8:	4798      	blx	r3
	return u32IP;
   269fa:	693b      	ldr	r3, [r7, #16]
}
   269fc:	0018      	movs	r0, r3
   269fe:	46bd      	mov	sp, r7
   26a00:	b006      	add	sp, #24
   26a02:	bd80      	pop	{r7, pc}
   26a04:	000218c1 	.word	0x000218c1

00026a08 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   26a08:	b5b0      	push	{r4, r5, r7, lr}
   26a0a:	b088      	sub	sp, #32
   26a0c:	af04      	add	r7, sp, #16
   26a0e:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   26a10:	230f      	movs	r3, #15
   26a12:	18fb      	adds	r3, r7, r3
   26a14:	22fa      	movs	r2, #250	; 0xfa
   26a16:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   26a18:	687b      	ldr	r3, [r7, #4]
   26a1a:	0018      	movs	r0, r3
   26a1c:	4b14      	ldr	r3, [pc, #80]	; (26a70 <gethostbyname+0x68>)
   26a1e:	4798      	blx	r3
   26a20:	0003      	movs	r3, r0
   26a22:	001a      	movs	r2, r3
   26a24:	230e      	movs	r3, #14
   26a26:	18fb      	adds	r3, r7, r3
   26a28:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   26a2a:	230e      	movs	r3, #14
   26a2c:	18fb      	adds	r3, r7, r3
   26a2e:	781b      	ldrb	r3, [r3, #0]
   26a30:	2b40      	cmp	r3, #64	; 0x40
   26a32:	d815      	bhi.n	26a60 <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   26a34:	230e      	movs	r3, #14
   26a36:	18fb      	adds	r3, r7, r3
   26a38:	781b      	ldrb	r3, [r3, #0]
   26a3a:	b29b      	uxth	r3, r3
   26a3c:	3301      	adds	r3, #1
   26a3e:	b299      	uxth	r1, r3
   26a40:	230f      	movs	r3, #15
   26a42:	18fc      	adds	r4, r7, r3
   26a44:	687a      	ldr	r2, [r7, #4]
   26a46:	2300      	movs	r3, #0
   26a48:	9302      	str	r3, [sp, #8]
   26a4a:	2300      	movs	r3, #0
   26a4c:	9301      	str	r3, [sp, #4]
   26a4e:	2300      	movs	r3, #0
   26a50:	9300      	str	r3, [sp, #0]
   26a52:	000b      	movs	r3, r1
   26a54:	214a      	movs	r1, #74	; 0x4a
   26a56:	2002      	movs	r0, #2
   26a58:	4d06      	ldr	r5, [pc, #24]	; (26a74 <gethostbyname+0x6c>)
   26a5a:	47a8      	blx	r5
   26a5c:	0003      	movs	r3, r0
   26a5e:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
   26a60:	230f      	movs	r3, #15
   26a62:	18fb      	adds	r3, r7, r3
   26a64:	781b      	ldrb	r3, [r3, #0]
   26a66:	b25b      	sxtb	r3, r3
}
   26a68:	0018      	movs	r0, r3
   26a6a:	46bd      	mov	sp, r7
   26a6c:	b004      	add	sp, #16
   26a6e:	bdb0      	pop	{r4, r5, r7, pc}
   26a70:	0002193b 	.word	0x0002193b
   26a74:	00021b5d 	.word	0x00021b5d

00026a78 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
   26a78:	b580      	push	{r7, lr}
   26a7a:	b082      	sub	sp, #8
   26a7c:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   26a7e:	003b      	movs	r3, r7
   26a80:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
   26a82:	687b      	ldr	r3, [r7, #4]
   26a84:	22b9      	movs	r2, #185	; 0xb9
   26a86:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   26a88:	4b13      	ldr	r3, [pc, #76]	; (26ad8 <spi_flash_enter_low_power_mode+0x60>)
   26a8a:	2100      	movs	r1, #0
   26a8c:	0018      	movs	r0, r3
   26a8e:	4b13      	ldr	r3, [pc, #76]	; (26adc <spi_flash_enter_low_power_mode+0x64>)
   26a90:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   26a92:	687b      	ldr	r3, [r7, #4]
   26a94:	781b      	ldrb	r3, [r3, #0]
   26a96:	001a      	movs	r2, r3
   26a98:	4b11      	ldr	r3, [pc, #68]	; (26ae0 <spi_flash_enter_low_power_mode+0x68>)
   26a9a:	0011      	movs	r1, r2
   26a9c:	0018      	movs	r0, r3
   26a9e:	4b0f      	ldr	r3, [pc, #60]	; (26adc <spi_flash_enter_low_power_mode+0x64>)
   26aa0:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   26aa2:	4b10      	ldr	r3, [pc, #64]	; (26ae4 <spi_flash_enter_low_power_mode+0x6c>)
   26aa4:	2101      	movs	r1, #1
   26aa6:	0018      	movs	r0, r3
   26aa8:	4b0c      	ldr	r3, [pc, #48]	; (26adc <spi_flash_enter_low_power_mode+0x64>)
   26aaa:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   26aac:	4b0e      	ldr	r3, [pc, #56]	; (26ae8 <spi_flash_enter_low_power_mode+0x70>)
   26aae:	2100      	movs	r1, #0
   26ab0:	0018      	movs	r0, r3
   26ab2:	4b0a      	ldr	r3, [pc, #40]	; (26adc <spi_flash_enter_low_power_mode+0x64>)
   26ab4:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   26ab6:	4b0d      	ldr	r3, [pc, #52]	; (26aec <spi_flash_enter_low_power_mode+0x74>)
   26ab8:	2181      	movs	r1, #129	; 0x81
   26aba:	0018      	movs	r0, r3
   26abc:	4b07      	ldr	r3, [pc, #28]	; (26adc <spi_flash_enter_low_power_mode+0x64>)
   26abe:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   26ac0:	46c0      	nop			; (mov r8, r8)
   26ac2:	4b0b      	ldr	r3, [pc, #44]	; (26af0 <spi_flash_enter_low_power_mode+0x78>)
   26ac4:	0018      	movs	r0, r3
   26ac6:	4b0b      	ldr	r3, [pc, #44]	; (26af4 <spi_flash_enter_low_power_mode+0x7c>)
   26ac8:	4798      	blx	r3
   26aca:	0003      	movs	r3, r0
   26acc:	2b01      	cmp	r3, #1
   26ace:	d1f8      	bne.n	26ac2 <spi_flash_enter_low_power_mode+0x4a>
}
   26ad0:	46c0      	nop			; (mov r8, r8)
   26ad2:	46bd      	mov	sp, r7
   26ad4:	b002      	add	sp, #8
   26ad6:	bd80      	pop	{r7, pc}
   26ad8:	00010208 	.word	0x00010208
   26adc:	000238d9 	.word	0x000238d9
   26ae0:	0001020c 	.word	0x0001020c
   26ae4:	00010214 	.word	0x00010214
   26ae8:	0001021c 	.word	0x0001021c
   26aec:	00010204 	.word	0x00010204
   26af0:	00010218 	.word	0x00010218
   26af4:	00023895 	.word	0x00023895

00026af8 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
   26af8:	b580      	push	{r7, lr}
   26afa:	b082      	sub	sp, #8
   26afc:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   26afe:	003b      	movs	r3, r7
   26b00:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
   26b02:	687b      	ldr	r3, [r7, #4]
   26b04:	22ab      	movs	r2, #171	; 0xab
   26b06:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   26b08:	4b13      	ldr	r3, [pc, #76]	; (26b58 <spi_flash_leave_low_power_mode+0x60>)
   26b0a:	2100      	movs	r1, #0
   26b0c:	0018      	movs	r0, r3
   26b0e:	4b13      	ldr	r3, [pc, #76]	; (26b5c <spi_flash_leave_low_power_mode+0x64>)
   26b10:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   26b12:	687b      	ldr	r3, [r7, #4]
   26b14:	781b      	ldrb	r3, [r3, #0]
   26b16:	001a      	movs	r2, r3
   26b18:	4b11      	ldr	r3, [pc, #68]	; (26b60 <spi_flash_leave_low_power_mode+0x68>)
   26b1a:	0011      	movs	r1, r2
   26b1c:	0018      	movs	r0, r3
   26b1e:	4b0f      	ldr	r3, [pc, #60]	; (26b5c <spi_flash_leave_low_power_mode+0x64>)
   26b20:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   26b22:	4b10      	ldr	r3, [pc, #64]	; (26b64 <spi_flash_leave_low_power_mode+0x6c>)
   26b24:	2101      	movs	r1, #1
   26b26:	0018      	movs	r0, r3
   26b28:	4b0c      	ldr	r3, [pc, #48]	; (26b5c <spi_flash_leave_low_power_mode+0x64>)
   26b2a:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   26b2c:	4b0e      	ldr	r3, [pc, #56]	; (26b68 <spi_flash_leave_low_power_mode+0x70>)
   26b2e:	2100      	movs	r1, #0
   26b30:	0018      	movs	r0, r3
   26b32:	4b0a      	ldr	r3, [pc, #40]	; (26b5c <spi_flash_leave_low_power_mode+0x64>)
   26b34:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   26b36:	4b0d      	ldr	r3, [pc, #52]	; (26b6c <spi_flash_leave_low_power_mode+0x74>)
   26b38:	2181      	movs	r1, #129	; 0x81
   26b3a:	0018      	movs	r0, r3
   26b3c:	4b07      	ldr	r3, [pc, #28]	; (26b5c <spi_flash_leave_low_power_mode+0x64>)
   26b3e:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   26b40:	46c0      	nop			; (mov r8, r8)
   26b42:	4b0b      	ldr	r3, [pc, #44]	; (26b70 <spi_flash_leave_low_power_mode+0x78>)
   26b44:	0018      	movs	r0, r3
   26b46:	4b0b      	ldr	r3, [pc, #44]	; (26b74 <spi_flash_leave_low_power_mode+0x7c>)
   26b48:	4798      	blx	r3
   26b4a:	0003      	movs	r3, r0
   26b4c:	2b01      	cmp	r3, #1
   26b4e:	d1f8      	bne.n	26b42 <spi_flash_leave_low_power_mode+0x4a>
}
   26b50:	46c0      	nop			; (mov r8, r8)
   26b52:	46bd      	mov	sp, r7
   26b54:	b002      	add	sp, #8
   26b56:	bd80      	pop	{r7, pc}
   26b58:	00010208 	.word	0x00010208
   26b5c:	000238d9 	.word	0x000238d9
   26b60:	0001020c 	.word	0x0001020c
   26b64:	00010214 	.word	0x00010214
   26b68:	0001021c 	.word	0x0001021c
   26b6c:	00010204 	.word	0x00010204
   26b70:	00010218 	.word	0x00010218
   26b74:	00023895 	.word	0x00023895

00026b78 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   26b78:	b590      	push	{r4, r7, lr}
   26b7a:	b085      	sub	sp, #20
   26b7c:	af00      	add	r7, sp, #0
   26b7e:	0002      	movs	r2, r0
   26b80:	1dfb      	adds	r3, r7, #7
   26b82:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
   26b84:	230f      	movs	r3, #15
   26b86:	18fb      	adds	r3, r7, r3
   26b88:	2200      	movs	r2, #0
   26b8a:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   26b8c:	4b24      	ldr	r3, [pc, #144]	; (26c20 <spi_flash_enable+0xa8>)
   26b8e:	4798      	blx	r3
   26b90:	0003      	movs	r3, r0
   26b92:	051b      	lsls	r3, r3, #20
   26b94:	0d1b      	lsrs	r3, r3, #20
   26b96:	4a23      	ldr	r2, [pc, #140]	; (26c24 <spi_flash_enable+0xac>)
   26b98:	4293      	cmp	r3, r2
   26b9a:	d938      	bls.n	26c0e <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   26b9c:	230f      	movs	r3, #15
   26b9e:	18fc      	adds	r4, r7, r3
   26ba0:	2308      	movs	r3, #8
   26ba2:	18fb      	adds	r3, r7, r3
   26ba4:	4a20      	ldr	r2, [pc, #128]	; (26c28 <spi_flash_enable+0xb0>)
   26ba6:	0019      	movs	r1, r3
   26ba8:	0010      	movs	r0, r2
   26baa:	4b20      	ldr	r3, [pc, #128]	; (26c2c <spi_flash_enable+0xb4>)
   26bac:	4798      	blx	r3
   26bae:	0003      	movs	r3, r0
   26bb0:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
   26bb2:	230f      	movs	r3, #15
   26bb4:	18fb      	adds	r3, r7, r3
   26bb6:	781b      	ldrb	r3, [r3, #0]
   26bb8:	b25b      	sxtb	r3, r3
   26bba:	2b00      	cmp	r3, #0
   26bbc:	d126      	bne.n	26c0c <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
   26bbe:	68bb      	ldr	r3, [r7, #8]
   26bc0:	4a1b      	ldr	r2, [pc, #108]	; (26c30 <spi_flash_enable+0xb8>)
   26bc2:	4013      	ands	r3, r2
   26bc4:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
   26bc6:	68bb      	ldr	r3, [r7, #8]
   26bc8:	4a1a      	ldr	r2, [pc, #104]	; (26c34 <spi_flash_enable+0xbc>)
   26bca:	4313      	orrs	r3, r2
   26bcc:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   26bce:	68bb      	ldr	r3, [r7, #8]
   26bd0:	4a15      	ldr	r2, [pc, #84]	; (26c28 <spi_flash_enable+0xb0>)
   26bd2:	0019      	movs	r1, r3
   26bd4:	0010      	movs	r0, r2
   26bd6:	4b18      	ldr	r3, [pc, #96]	; (26c38 <spi_flash_enable+0xc0>)
   26bd8:	4798      	blx	r3
		if(enable) {
   26bda:	1dfb      	adds	r3, r7, #7
   26bdc:	781b      	ldrb	r3, [r3, #0]
   26bde:	2b00      	cmp	r3, #0
   26be0:	d002      	beq.n	26be8 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
   26be2:	4b16      	ldr	r3, [pc, #88]	; (26c3c <spi_flash_enable+0xc4>)
   26be4:	4798      	blx	r3
   26be6:	e001      	b.n	26bec <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
   26be8:	4b15      	ldr	r3, [pc, #84]	; (26c40 <spi_flash_enable+0xc8>)
   26bea:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
   26bec:	68bb      	ldr	r3, [r7, #8]
   26bee:	4a10      	ldr	r2, [pc, #64]	; (26c30 <spi_flash_enable+0xb8>)
   26bf0:	4013      	ands	r3, r2
   26bf2:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
   26bf4:	68bb      	ldr	r3, [r7, #8]
   26bf6:	2280      	movs	r2, #128	; 0x80
   26bf8:	0252      	lsls	r2, r2, #9
   26bfa:	4313      	orrs	r3, r2
   26bfc:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   26bfe:	68bb      	ldr	r3, [r7, #8]
   26c00:	4a09      	ldr	r2, [pc, #36]	; (26c28 <spi_flash_enable+0xb0>)
   26c02:	0019      	movs	r1, r3
   26c04:	0010      	movs	r0, r2
   26c06:	4b0c      	ldr	r3, [pc, #48]	; (26c38 <spi_flash_enable+0xc0>)
   26c08:	4798      	blx	r3
   26c0a:	e000      	b.n	26c0e <spi_flash_enable+0x96>
			goto ERR1;
   26c0c:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
   26c0e:	230f      	movs	r3, #15
   26c10:	18fb      	adds	r3, r7, r3
   26c12:	781b      	ldrb	r3, [r3, #0]
   26c14:	b25b      	sxtb	r3, r3
}
   26c16:	0018      	movs	r0, r3
   26c18:	46bd      	mov	sp, r7
   26c1a:	b005      	add	sp, #20
   26c1c:	bd90      	pop	{r4, r7, pc}
   26c1e:	46c0      	nop			; (mov r8, r8)
   26c20:	000231b5 	.word	0x000231b5
   26c24:	0000039f 	.word	0x0000039f
   26c28:	00001410 	.word	0x00001410
   26c2c:	000238b5 	.word	0x000238b5
   26c30:	f8888fff 	.word	0xf8888fff
   26c34:	01111000 	.word	0x01111000
   26c38:	000238d9 	.word	0x000238d9
   26c3c:	00026af9 	.word	0x00026af9
   26c40:	00026a79 	.word	0x00026a79

00026c44 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   26c44:	b580      	push	{r7, lr}
   26c46:	b084      	sub	sp, #16
   26c48:	af00      	add	r7, sp, #0
   26c4a:	0002      	movs	r2, r0
   26c4c:	1dfb      	adds	r3, r7, #7
   26c4e:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   26c50:	1dfb      	adds	r3, r7, #7
   26c52:	781b      	ldrb	r3, [r3, #0]
   26c54:	2b00      	cmp	r3, #0
   26c56:	d108      	bne.n	26c6a <mem_test_unit_ready+0x26>
   26c58:	1dfb      	adds	r3, r7, #7
   26c5a:	781a      	ldrb	r2, [r3, #0]
   26c5c:	4b08      	ldr	r3, [pc, #32]	; (26c80 <mem_test_unit_ready+0x3c>)
   26c5e:	0152      	lsls	r2, r2, #5
   26c60:	58d3      	ldr	r3, [r2, r3]
   26c62:	4798      	blx	r3
   26c64:	0003      	movs	r3, r0
   26c66:	001a      	movs	r2, r3
   26c68:	e000      	b.n	26c6c <mem_test_unit_ready+0x28>
   26c6a:	2201      	movs	r2, #1
  status =
   26c6c:	230f      	movs	r3, #15
   26c6e:	18fb      	adds	r3, r7, r3
   26c70:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   26c72:	230f      	movs	r3, #15
   26c74:	18fb      	adds	r3, r7, r3
   26c76:	781b      	ldrb	r3, [r3, #0]
}
   26c78:	0018      	movs	r0, r3
   26c7a:	46bd      	mov	sp, r7
   26c7c:	b004      	add	sp, #16
   26c7e:	bd80      	pop	{r7, pc}
   26c80:	0003a264 	.word	0x0003a264

00026c84 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   26c84:	b580      	push	{r7, lr}
   26c86:	b084      	sub	sp, #16
   26c88:	af00      	add	r7, sp, #0
   26c8a:	0002      	movs	r2, r0
   26c8c:	6039      	str	r1, [r7, #0]
   26c8e:	1dfb      	adds	r3, r7, #7
   26c90:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   26c92:	1dfb      	adds	r3, r7, #7
   26c94:	781b      	ldrb	r3, [r3, #0]
   26c96:	2b00      	cmp	r3, #0
   26c98:	d10c      	bne.n	26cb4 <mem_read_capacity+0x30>
   26c9a:	1dfb      	adds	r3, r7, #7
   26c9c:	781b      	ldrb	r3, [r3, #0]
   26c9e:	4a0b      	ldr	r2, [pc, #44]	; (26ccc <mem_read_capacity+0x48>)
   26ca0:	015b      	lsls	r3, r3, #5
   26ca2:	18d3      	adds	r3, r2, r3
   26ca4:	3304      	adds	r3, #4
   26ca6:	681b      	ldr	r3, [r3, #0]
   26ca8:	683a      	ldr	r2, [r7, #0]
   26caa:	0010      	movs	r0, r2
   26cac:	4798      	blx	r3
   26cae:	0003      	movs	r3, r0
   26cb0:	001a      	movs	r2, r3
   26cb2:	e000      	b.n	26cb6 <mem_read_capacity+0x32>
   26cb4:	2201      	movs	r2, #1
  status =
   26cb6:	230f      	movs	r3, #15
   26cb8:	18fb      	adds	r3, r7, r3
   26cba:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   26cbc:	230f      	movs	r3, #15
   26cbe:	18fb      	adds	r3, r7, r3
   26cc0:	781b      	ldrb	r3, [r3, #0]
}
   26cc2:	0018      	movs	r0, r3
   26cc4:	46bd      	mov	sp, r7
   26cc6:	b004      	add	sp, #16
   26cc8:	bd80      	pop	{r7, pc}
   26cca:	46c0      	nop			; (mov r8, r8)
   26ccc:	0003a264 	.word	0x0003a264

00026cd0 <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
   26cd0:	b580      	push	{r7, lr}
   26cd2:	b084      	sub	sp, #16
   26cd4:	af00      	add	r7, sp, #0
   26cd6:	0002      	movs	r2, r0
   26cd8:	1dfb      	adds	r3, r7, #7
   26cda:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
   26cdc:	1dfb      	adds	r3, r7, #7
   26cde:	781b      	ldrb	r3, [r3, #0]
   26ce0:	425a      	negs	r2, r3
   26ce2:	4153      	adcs	r3, r2
   26ce4:	b2da      	uxtb	r2, r3
  sector_size =
   26ce6:	230f      	movs	r3, #15
   26ce8:	18fb      	adds	r3, r7, r3
   26cea:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
   26cec:	230f      	movs	r3, #15
   26cee:	18fb      	adds	r3, r7, r3
   26cf0:	781b      	ldrb	r3, [r3, #0]
}
   26cf2:	0018      	movs	r0, r3
   26cf4:	46bd      	mov	sp, r7
   26cf6:	b004      	add	sp, #16
   26cf8:	bd80      	pop	{r7, pc}
	...

00026cfc <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
   26cfc:	b580      	push	{r7, lr}
   26cfe:	b084      	sub	sp, #16
   26d00:	af00      	add	r7, sp, #0
   26d02:	0002      	movs	r2, r0
   26d04:	1dfb      	adds	r3, r7, #7
   26d06:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   26d08:	1dfb      	adds	r3, r7, #7
   26d0a:	781b      	ldrb	r3, [r3, #0]
   26d0c:	2b00      	cmp	r3, #0
   26d0e:	d109      	bne.n	26d24 <mem_wr_protect+0x28>
   26d10:	1dfb      	adds	r3, r7, #7
   26d12:	781b      	ldrb	r3, [r3, #0]
   26d14:	4a0a      	ldr	r2, [pc, #40]	; (26d40 <mem_wr_protect+0x44>)
   26d16:	015b      	lsls	r3, r3, #5
   26d18:	18d3      	adds	r3, r2, r3
   26d1a:	330c      	adds	r3, #12
   26d1c:	681b      	ldr	r3, [r3, #0]
   26d1e:	4798      	blx	r3
   26d20:	1e03      	subs	r3, r0, #0
   26d22:	d001      	beq.n	26d28 <mem_wr_protect+0x2c>
   26d24:	2201      	movs	r2, #1
   26d26:	e000      	b.n	26d2a <mem_wr_protect+0x2e>
   26d28:	2200      	movs	r2, #0
  wr_protect =
   26d2a:	230f      	movs	r3, #15
   26d2c:	18fb      	adds	r3, r7, r3
   26d2e:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
   26d30:	230f      	movs	r3, #15
   26d32:	18fb      	adds	r3, r7, r3
   26d34:	781b      	ldrb	r3, [r3, #0]
}
   26d36:	0018      	movs	r0, r3
   26d38:	46bd      	mov	sp, r7
   26d3a:	b004      	add	sp, #16
   26d3c:	bd80      	pop	{r7, pc}
   26d3e:	46c0      	nop			; (mov r8, r8)
   26d40:	0003a264 	.word	0x0003a264

00026d44 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   26d44:	b580      	push	{r7, lr}
   26d46:	b086      	sub	sp, #24
   26d48:	af00      	add	r7, sp, #0
   26d4a:	60b9      	str	r1, [r7, #8]
   26d4c:	607a      	str	r2, [r7, #4]
   26d4e:	230f      	movs	r3, #15
   26d50:	18fb      	adds	r3, r7, r3
   26d52:	1c02      	adds	r2, r0, #0
   26d54:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   26d56:	230f      	movs	r3, #15
   26d58:	18fb      	adds	r3, r7, r3
   26d5a:	781b      	ldrb	r3, [r3, #0]
   26d5c:	2b00      	cmp	r3, #0
   26d5e:	d10e      	bne.n	26d7e <memory_2_ram+0x3a>
   26d60:	230f      	movs	r3, #15
   26d62:	18fb      	adds	r3, r7, r3
   26d64:	781b      	ldrb	r3, [r3, #0]
   26d66:	4a0b      	ldr	r2, [pc, #44]	; (26d94 <memory_2_ram+0x50>)
   26d68:	015b      	lsls	r3, r3, #5
   26d6a:	18d3      	adds	r3, r2, r3
   26d6c:	3314      	adds	r3, #20
   26d6e:	681b      	ldr	r3, [r3, #0]
   26d70:	6879      	ldr	r1, [r7, #4]
   26d72:	68ba      	ldr	r2, [r7, #8]
   26d74:	0010      	movs	r0, r2
   26d76:	4798      	blx	r3
   26d78:	0003      	movs	r3, r0
   26d7a:	001a      	movs	r2, r3
   26d7c:	e000      	b.n	26d80 <memory_2_ram+0x3c>
   26d7e:	2201      	movs	r2, #1
  status =
   26d80:	2317      	movs	r3, #23
   26d82:	18fb      	adds	r3, r7, r3
   26d84:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
   26d86:	2317      	movs	r3, #23
   26d88:	18fb      	adds	r3, r7, r3
   26d8a:	781b      	ldrb	r3, [r3, #0]
}
   26d8c:	0018      	movs	r0, r3
   26d8e:	46bd      	mov	sp, r7
   26d90:	b006      	add	sp, #24
   26d92:	bd80      	pop	{r7, pc}
   26d94:	0003a264 	.word	0x0003a264

00026d98 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   26d98:	b580      	push	{r7, lr}
   26d9a:	b086      	sub	sp, #24
   26d9c:	af00      	add	r7, sp, #0
   26d9e:	60b9      	str	r1, [r7, #8]
   26da0:	607a      	str	r2, [r7, #4]
   26da2:	230f      	movs	r3, #15
   26da4:	18fb      	adds	r3, r7, r3
   26da6:	1c02      	adds	r2, r0, #0
   26da8:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   26daa:	230f      	movs	r3, #15
   26dac:	18fb      	adds	r3, r7, r3
   26dae:	781b      	ldrb	r3, [r3, #0]
   26db0:	2b00      	cmp	r3, #0
   26db2:	d10e      	bne.n	26dd2 <ram_2_memory+0x3a>
   26db4:	230f      	movs	r3, #15
   26db6:	18fb      	adds	r3, r7, r3
   26db8:	781b      	ldrb	r3, [r3, #0]
   26dba:	4a0b      	ldr	r2, [pc, #44]	; (26de8 <ram_2_memory+0x50>)
   26dbc:	015b      	lsls	r3, r3, #5
   26dbe:	18d3      	adds	r3, r2, r3
   26dc0:	3318      	adds	r3, #24
   26dc2:	681b      	ldr	r3, [r3, #0]
   26dc4:	6879      	ldr	r1, [r7, #4]
   26dc6:	68ba      	ldr	r2, [r7, #8]
   26dc8:	0010      	movs	r0, r2
   26dca:	4798      	blx	r3
   26dcc:	0003      	movs	r3, r0
   26dce:	001a      	movs	r2, r3
   26dd0:	e000      	b.n	26dd4 <ram_2_memory+0x3c>
   26dd2:	2201      	movs	r2, #1
  status =
   26dd4:	2317      	movs	r3, #23
   26dd6:	18fb      	adds	r3, r7, r3
   26dd8:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
   26dda:	2317      	movs	r3, #23
   26ddc:	18fb      	adds	r3, r7, r3
   26dde:	781b      	ldrb	r3, [r3, #0]
}
   26de0:	0018      	movs	r0, r3
   26de2:	46bd      	mov	sp, r7
   26de4:	b006      	add	sp, #24
   26de6:	bd80      	pop	{r7, pc}
   26de8:	0003a264 	.word	0x0003a264

00026dec <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   26dec:	b580      	push	{r7, lr}
   26dee:	b082      	sub	sp, #8
   26df0:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   26df2:	4b10      	ldr	r3, [pc, #64]	; (26e34 <cpu_irq_enter_critical+0x48>)
   26df4:	681b      	ldr	r3, [r3, #0]
   26df6:	2b00      	cmp	r3, #0
   26df8:	d112      	bne.n	26e20 <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   26dfa:	f3ef 8310 	mrs	r3, PRIMASK
   26dfe:	607b      	str	r3, [r7, #4]
  return(result);
   26e00:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   26e02:	2b00      	cmp	r3, #0
   26e04:	d109      	bne.n	26e1a <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   26e06:	b672      	cpsid	i
   26e08:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   26e0c:	4b0a      	ldr	r3, [pc, #40]	; (26e38 <cpu_irq_enter_critical+0x4c>)
   26e0e:	2200      	movs	r2, #0
   26e10:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   26e12:	4b0a      	ldr	r3, [pc, #40]	; (26e3c <cpu_irq_enter_critical+0x50>)
   26e14:	2201      	movs	r2, #1
   26e16:	701a      	strb	r2, [r3, #0]
   26e18:	e002      	b.n	26e20 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   26e1a:	4b08      	ldr	r3, [pc, #32]	; (26e3c <cpu_irq_enter_critical+0x50>)
   26e1c:	2200      	movs	r2, #0
   26e1e:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   26e20:	4b04      	ldr	r3, [pc, #16]	; (26e34 <cpu_irq_enter_critical+0x48>)
   26e22:	681b      	ldr	r3, [r3, #0]
   26e24:	1c5a      	adds	r2, r3, #1
   26e26:	4b03      	ldr	r3, [pc, #12]	; (26e34 <cpu_irq_enter_critical+0x48>)
   26e28:	601a      	str	r2, [r3, #0]
}
   26e2a:	46c0      	nop			; (mov r8, r8)
   26e2c:	46bd      	mov	sp, r7
   26e2e:	b002      	add	sp, #8
   26e30:	bd80      	pop	{r7, pc}
   26e32:	46c0      	nop			; (mov r8, r8)
   26e34:	200042b8 	.word	0x200042b8
   26e38:	20000126 	.word	0x20000126
   26e3c:	200042bc 	.word	0x200042bc

00026e40 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   26e40:	b580      	push	{r7, lr}
   26e42:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   26e44:	4b0b      	ldr	r3, [pc, #44]	; (26e74 <cpu_irq_leave_critical+0x34>)
   26e46:	681b      	ldr	r3, [r3, #0]
   26e48:	1e5a      	subs	r2, r3, #1
   26e4a:	4b0a      	ldr	r3, [pc, #40]	; (26e74 <cpu_irq_leave_critical+0x34>)
   26e4c:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   26e4e:	4b09      	ldr	r3, [pc, #36]	; (26e74 <cpu_irq_leave_critical+0x34>)
   26e50:	681b      	ldr	r3, [r3, #0]
   26e52:	2b00      	cmp	r3, #0
   26e54:	d10a      	bne.n	26e6c <cpu_irq_leave_critical+0x2c>
   26e56:	4b08      	ldr	r3, [pc, #32]	; (26e78 <cpu_irq_leave_critical+0x38>)
   26e58:	781b      	ldrb	r3, [r3, #0]
   26e5a:	b2db      	uxtb	r3, r3
   26e5c:	2b00      	cmp	r3, #0
   26e5e:	d005      	beq.n	26e6c <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   26e60:	4b06      	ldr	r3, [pc, #24]	; (26e7c <cpu_irq_leave_critical+0x3c>)
   26e62:	2201      	movs	r2, #1
   26e64:	701a      	strb	r2, [r3, #0]
   26e66:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   26e6a:	b662      	cpsie	i
	}
}
   26e6c:	46c0      	nop			; (mov r8, r8)
   26e6e:	46bd      	mov	sp, r7
   26e70:	bd80      	pop	{r7, pc}
   26e72:	46c0      	nop			; (mov r8, r8)
   26e74:	200042b8 	.word	0x200042b8
   26e78:	200042bc 	.word	0x200042bc
   26e7c:	20000126 	.word	0x20000126

00026e80 <system_pinmux_get_group_from_gpio_pin>:
{
   26e80:	b580      	push	{r7, lr}
   26e82:	b084      	sub	sp, #16
   26e84:	af00      	add	r7, sp, #0
   26e86:	0002      	movs	r2, r0
   26e88:	1dfb      	adds	r3, r7, #7
   26e8a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   26e8c:	230f      	movs	r3, #15
   26e8e:	18fb      	adds	r3, r7, r3
   26e90:	1dfa      	adds	r2, r7, #7
   26e92:	7812      	ldrb	r2, [r2, #0]
   26e94:	09d2      	lsrs	r2, r2, #7
   26e96:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   26e98:	230e      	movs	r3, #14
   26e9a:	18fb      	adds	r3, r7, r3
   26e9c:	1dfa      	adds	r2, r7, #7
   26e9e:	7812      	ldrb	r2, [r2, #0]
   26ea0:	0952      	lsrs	r2, r2, #5
   26ea2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   26ea4:	4b0d      	ldr	r3, [pc, #52]	; (26edc <system_pinmux_get_group_from_gpio_pin+0x5c>)
   26ea6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   26ea8:	230f      	movs	r3, #15
   26eaa:	18fb      	adds	r3, r7, r3
   26eac:	781b      	ldrb	r3, [r3, #0]
   26eae:	2b00      	cmp	r3, #0
   26eb0:	d10f      	bne.n	26ed2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   26eb2:	230f      	movs	r3, #15
   26eb4:	18fb      	adds	r3, r7, r3
   26eb6:	781b      	ldrb	r3, [r3, #0]
   26eb8:	009b      	lsls	r3, r3, #2
   26eba:	2210      	movs	r2, #16
   26ebc:	4694      	mov	ip, r2
   26ebe:	44bc      	add	ip, r7
   26ec0:	4463      	add	r3, ip
   26ec2:	3b08      	subs	r3, #8
   26ec4:	681a      	ldr	r2, [r3, #0]
   26ec6:	230e      	movs	r3, #14
   26ec8:	18fb      	adds	r3, r7, r3
   26eca:	781b      	ldrb	r3, [r3, #0]
   26ecc:	01db      	lsls	r3, r3, #7
   26ece:	18d3      	adds	r3, r2, r3
   26ed0:	e000      	b.n	26ed4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   26ed2:	2300      	movs	r3, #0
}
   26ed4:	0018      	movs	r0, r3
   26ed6:	46bd      	mov	sp, r7
   26ed8:	b004      	add	sp, #16
   26eda:	bd80      	pop	{r7, pc}
   26edc:	41004400 	.word	0x41004400

00026ee0 <port_get_group_from_gpio_pin>:
{
   26ee0:	b580      	push	{r7, lr}
   26ee2:	b082      	sub	sp, #8
   26ee4:	af00      	add	r7, sp, #0
   26ee6:	0002      	movs	r2, r0
   26ee8:	1dfb      	adds	r3, r7, #7
   26eea:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   26eec:	1dfb      	adds	r3, r7, #7
   26eee:	781b      	ldrb	r3, [r3, #0]
   26ef0:	0018      	movs	r0, r3
   26ef2:	4b03      	ldr	r3, [pc, #12]	; (26f00 <port_get_group_from_gpio_pin+0x20>)
   26ef4:	4798      	blx	r3
   26ef6:	0003      	movs	r3, r0
}
   26ef8:	0018      	movs	r0, r3
   26efa:	46bd      	mov	sp, r7
   26efc:	b002      	add	sp, #8
   26efe:	bd80      	pop	{r7, pc}
   26f00:	00026e81 	.word	0x00026e81

00026f04 <port_get_config_defaults>:
{
   26f04:	b580      	push	{r7, lr}
   26f06:	b082      	sub	sp, #8
   26f08:	af00      	add	r7, sp, #0
   26f0a:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   26f0c:	687b      	ldr	r3, [r7, #4]
   26f0e:	2200      	movs	r2, #0
   26f10:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   26f12:	687b      	ldr	r3, [r7, #4]
   26f14:	2201      	movs	r2, #1
   26f16:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   26f18:	687b      	ldr	r3, [r7, #4]
   26f1a:	2200      	movs	r2, #0
   26f1c:	709a      	strb	r2, [r3, #2]
}
   26f1e:	46c0      	nop			; (mov r8, r8)
   26f20:	46bd      	mov	sp, r7
   26f22:	b002      	add	sp, #8
   26f24:	bd80      	pop	{r7, pc}
	...

00026f28 <port_pin_set_output_level>:
{
   26f28:	b580      	push	{r7, lr}
   26f2a:	b084      	sub	sp, #16
   26f2c:	af00      	add	r7, sp, #0
   26f2e:	0002      	movs	r2, r0
   26f30:	1dfb      	adds	r3, r7, #7
   26f32:	701a      	strb	r2, [r3, #0]
   26f34:	1dbb      	adds	r3, r7, #6
   26f36:	1c0a      	adds	r2, r1, #0
   26f38:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   26f3a:	1dfb      	adds	r3, r7, #7
   26f3c:	781b      	ldrb	r3, [r3, #0]
   26f3e:	0018      	movs	r0, r3
   26f40:	4b0d      	ldr	r3, [pc, #52]	; (26f78 <port_pin_set_output_level+0x50>)
   26f42:	4798      	blx	r3
   26f44:	0003      	movs	r3, r0
   26f46:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   26f48:	1dfb      	adds	r3, r7, #7
   26f4a:	781b      	ldrb	r3, [r3, #0]
   26f4c:	221f      	movs	r2, #31
   26f4e:	4013      	ands	r3, r2
   26f50:	2201      	movs	r2, #1
   26f52:	409a      	lsls	r2, r3
   26f54:	0013      	movs	r3, r2
   26f56:	60bb      	str	r3, [r7, #8]
	if (level) {
   26f58:	1dbb      	adds	r3, r7, #6
   26f5a:	781b      	ldrb	r3, [r3, #0]
   26f5c:	2b00      	cmp	r3, #0
   26f5e:	d003      	beq.n	26f68 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   26f60:	68fb      	ldr	r3, [r7, #12]
   26f62:	68ba      	ldr	r2, [r7, #8]
   26f64:	619a      	str	r2, [r3, #24]
}
   26f66:	e002      	b.n	26f6e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   26f68:	68fb      	ldr	r3, [r7, #12]
   26f6a:	68ba      	ldr	r2, [r7, #8]
   26f6c:	615a      	str	r2, [r3, #20]
}
   26f6e:	46c0      	nop			; (mov r8, r8)
   26f70:	46bd      	mov	sp, r7
   26f72:	b004      	add	sp, #16
   26f74:	bd80      	pop	{r7, pc}
   26f76:	46c0      	nop			; (mov r8, r8)
   26f78:	00026ee1 	.word	0x00026ee1

00026f7c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   26f7c:	b580      	push	{r7, lr}
   26f7e:	b082      	sub	sp, #8
   26f80:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   26f82:	1d3b      	adds	r3, r7, #4
   26f84:	0018      	movs	r0, r3
   26f86:	4b0e      	ldr	r3, [pc, #56]	; (26fc0 <system_board_init+0x44>)
   26f88:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   26f8a:	1d3b      	adds	r3, r7, #4
   26f8c:	2201      	movs	r2, #1
   26f8e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   26f90:	1d3b      	adds	r3, r7, #4
   26f92:	0019      	movs	r1, r3
   26f94:	2017      	movs	r0, #23
   26f96:	4b0b      	ldr	r3, [pc, #44]	; (26fc4 <system_board_init+0x48>)
   26f98:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   26f9a:	2101      	movs	r1, #1
   26f9c:	2017      	movs	r0, #23
   26f9e:	4b0a      	ldr	r3, [pc, #40]	; (26fc8 <system_board_init+0x4c>)
   26fa0:	4798      	blx	r3
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   26fa2:	1d3b      	adds	r3, r7, #4
   26fa4:	2200      	movs	r2, #0
   26fa6:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   26fa8:	1d3b      	adds	r3, r7, #4
   26faa:	2201      	movs	r2, #1
   26fac:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   26fae:	1d3b      	adds	r3, r7, #4
   26fb0:	0019      	movs	r1, r3
   26fb2:	2037      	movs	r0, #55	; 0x37
   26fb4:	4b03      	ldr	r3, [pc, #12]	; (26fc4 <system_board_init+0x48>)
   26fb6:	4798      	blx	r3
}
   26fb8:	46c0      	nop			; (mov r8, r8)
   26fba:	46bd      	mov	sp, r7
   26fbc:	b002      	add	sp, #8
   26fbe:	bd80      	pop	{r7, pc}
   26fc0:	00026f05 	.word	0x00026f05
   26fc4:	000275f1 	.word	0x000275f1
   26fc8:	00026f29 	.word	0x00026f29

00026fcc <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   26fcc:	b580      	push	{r7, lr}
   26fce:	b084      	sub	sp, #16
   26fd0:	af00      	add	r7, sp, #0
   26fd2:	0002      	movs	r2, r0
   26fd4:	1dfb      	adds	r3, r7, #7
   26fd6:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   26fd8:	230f      	movs	r3, #15
   26fda:	18fb      	adds	r3, r7, r3
   26fdc:	1dfa      	adds	r2, r7, #7
   26fde:	7812      	ldrb	r2, [r2, #0]
   26fe0:	0952      	lsrs	r2, r2, #5
   26fe2:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   26fe4:	230f      	movs	r3, #15
   26fe6:	18fb      	adds	r3, r7, r3
   26fe8:	781b      	ldrb	r3, [r3, #0]
   26fea:	2b00      	cmp	r3, #0
   26fec:	d10c      	bne.n	27008 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   26fee:	4b09      	ldr	r3, [pc, #36]	; (27014 <_extint_get_eic_from_channel+0x48>)
   26ff0:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   26ff2:	230f      	movs	r3, #15
   26ff4:	18fb      	adds	r3, r7, r3
   26ff6:	781b      	ldrb	r3, [r3, #0]
   26ff8:	009b      	lsls	r3, r3, #2
   26ffa:	2210      	movs	r2, #16
   26ffc:	4694      	mov	ip, r2
   26ffe:	44bc      	add	ip, r7
   27000:	4463      	add	r3, ip
   27002:	3b08      	subs	r3, #8
   27004:	681b      	ldr	r3, [r3, #0]
   27006:	e000      	b.n	2700a <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   27008:	2300      	movs	r3, #0
	}
}
   2700a:	0018      	movs	r0, r3
   2700c:	46bd      	mov	sp, r7
   2700e:	b004      	add	sp, #16
   27010:	bd80      	pop	{r7, pc}
   27012:	46c0      	nop			; (mov r8, r8)
   27014:	40001800 	.word	0x40001800

00027018 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   27018:	b580      	push	{r7, lr}
   2701a:	b084      	sub	sp, #16
   2701c:	af00      	add	r7, sp, #0
   2701e:	0002      	movs	r2, r0
   27020:	1dfb      	adds	r3, r7, #7
   27022:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   27024:	1dfb      	adds	r3, r7, #7
   27026:	781b      	ldrb	r3, [r3, #0]
   27028:	0018      	movs	r0, r3
   2702a:	4b0b      	ldr	r3, [pc, #44]	; (27058 <extint_chan_is_detected+0x40>)
   2702c:	4798      	blx	r3
   2702e:	0003      	movs	r3, r0
   27030:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   27032:	1dfb      	adds	r3, r7, #7
   27034:	781b      	ldrb	r3, [r3, #0]
   27036:	221f      	movs	r2, #31
   27038:	4013      	ands	r3, r2
   2703a:	2201      	movs	r2, #1
   2703c:	409a      	lsls	r2, r3
   2703e:	0013      	movs	r3, r2
   27040:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   27042:	68fb      	ldr	r3, [r7, #12]
   27044:	691b      	ldr	r3, [r3, #16]
   27046:	68ba      	ldr	r2, [r7, #8]
   27048:	4013      	ands	r3, r2
   2704a:	1e5a      	subs	r2, r3, #1
   2704c:	4193      	sbcs	r3, r2
   2704e:	b2db      	uxtb	r3, r3
}
   27050:	0018      	movs	r0, r3
   27052:	46bd      	mov	sp, r7
   27054:	b004      	add	sp, #16
   27056:	bd80      	pop	{r7, pc}
   27058:	00026fcd 	.word	0x00026fcd

0002705c <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   2705c:	b580      	push	{r7, lr}
   2705e:	b084      	sub	sp, #16
   27060:	af00      	add	r7, sp, #0
   27062:	0002      	movs	r2, r0
   27064:	1dfb      	adds	r3, r7, #7
   27066:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   27068:	1dfb      	adds	r3, r7, #7
   2706a:	781b      	ldrb	r3, [r3, #0]
   2706c:	0018      	movs	r0, r3
   2706e:	4b09      	ldr	r3, [pc, #36]	; (27094 <extint_chan_clear_detected+0x38>)
   27070:	4798      	blx	r3
   27072:	0003      	movs	r3, r0
   27074:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   27076:	1dfb      	adds	r3, r7, #7
   27078:	781b      	ldrb	r3, [r3, #0]
   2707a:	221f      	movs	r2, #31
   2707c:	4013      	ands	r3, r2
   2707e:	2201      	movs	r2, #1
   27080:	409a      	lsls	r2, r3
   27082:	0013      	movs	r3, r2
   27084:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   27086:	68fb      	ldr	r3, [r7, #12]
   27088:	68ba      	ldr	r2, [r7, #8]
   2708a:	611a      	str	r2, [r3, #16]
}
   2708c:	46c0      	nop			; (mov r8, r8)
   2708e:	46bd      	mov	sp, r7
   27090:	b004      	add	sp, #16
   27092:	bd80      	pop	{r7, pc}
   27094:	00026fcd 	.word	0x00026fcd

00027098 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   27098:	b580      	push	{r7, lr}
   2709a:	b082      	sub	sp, #8
   2709c:	af00      	add	r7, sp, #0
   2709e:	6078      	str	r0, [r7, #4]
   270a0:	0008      	movs	r0, r1
   270a2:	0011      	movs	r1, r2
   270a4:	1cfb      	adds	r3, r7, #3
   270a6:	1c02      	adds	r2, r0, #0
   270a8:	701a      	strb	r2, [r3, #0]
   270aa:	1cbb      	adds	r3, r7, #2
   270ac:	1c0a      	adds	r2, r1, #0
   270ae:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   270b0:	1cbb      	adds	r3, r7, #2
   270b2:	781b      	ldrb	r3, [r3, #0]
   270b4:	2b00      	cmp	r3, #0
   270b6:	d001      	beq.n	270bc <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   270b8:	2317      	movs	r3, #23
   270ba:	e019      	b.n	270f0 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   270bc:	1cfb      	adds	r3, r7, #3
   270be:	781a      	ldrb	r2, [r3, #0]
   270c0:	4b0d      	ldr	r3, [pc, #52]	; (270f8 <extint_register_callback+0x60>)
   270c2:	0092      	lsls	r2, r2, #2
   270c4:	58d3      	ldr	r3, [r2, r3]
   270c6:	2b00      	cmp	r3, #0
   270c8:	d107      	bne.n	270da <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   270ca:	1cfb      	adds	r3, r7, #3
   270cc:	781a      	ldrb	r2, [r3, #0]
   270ce:	4b0a      	ldr	r3, [pc, #40]	; (270f8 <extint_register_callback+0x60>)
   270d0:	0092      	lsls	r2, r2, #2
   270d2:	6879      	ldr	r1, [r7, #4]
   270d4:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   270d6:	2300      	movs	r3, #0
   270d8:	e00a      	b.n	270f0 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   270da:	1cfb      	adds	r3, r7, #3
   270dc:	781a      	ldrb	r2, [r3, #0]
   270de:	4b06      	ldr	r3, [pc, #24]	; (270f8 <extint_register_callback+0x60>)
   270e0:	0092      	lsls	r2, r2, #2
   270e2:	58d2      	ldr	r2, [r2, r3]
   270e4:	687b      	ldr	r3, [r7, #4]
   270e6:	429a      	cmp	r2, r3
   270e8:	d101      	bne.n	270ee <extint_register_callback+0x56>
		return STATUS_OK;
   270ea:	2300      	movs	r3, #0
   270ec:	e000      	b.n	270f0 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   270ee:	231d      	movs	r3, #29
}
   270f0:	0018      	movs	r0, r3
   270f2:	46bd      	mov	sp, r7
   270f4:	b002      	add	sp, #8
   270f6:	bd80      	pop	{r7, pc}
   270f8:	20005c14 	.word	0x20005c14

000270fc <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   270fc:	b580      	push	{r7, lr}
   270fe:	b084      	sub	sp, #16
   27100:	af00      	add	r7, sp, #0
   27102:	0002      	movs	r2, r0
   27104:	1dfb      	adds	r3, r7, #7
   27106:	701a      	strb	r2, [r3, #0]
   27108:	1dbb      	adds	r3, r7, #6
   2710a:	1c0a      	adds	r2, r1, #0
   2710c:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   2710e:	1dbb      	adds	r3, r7, #6
   27110:	781b      	ldrb	r3, [r3, #0]
   27112:	2b00      	cmp	r3, #0
   27114:	d10e      	bne.n	27134 <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   27116:	1dfb      	adds	r3, r7, #7
   27118:	781b      	ldrb	r3, [r3, #0]
   2711a:	0018      	movs	r0, r3
   2711c:	4b08      	ldr	r3, [pc, #32]	; (27140 <extint_chan_enable_callback+0x44>)
   2711e:	4798      	blx	r3
   27120:	0003      	movs	r3, r0
   27122:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   27124:	1dfb      	adds	r3, r7, #7
   27126:	781b      	ldrb	r3, [r3, #0]
   27128:	2201      	movs	r2, #1
   2712a:	409a      	lsls	r2, r3
   2712c:	68fb      	ldr	r3, [r7, #12]
   2712e:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   27130:	2300      	movs	r3, #0
   27132:	e000      	b.n	27136 <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   27134:	2317      	movs	r3, #23
}
   27136:	0018      	movs	r0, r3
   27138:	46bd      	mov	sp, r7
   2713a:	b004      	add	sp, #16
   2713c:	bd80      	pop	{r7, pc}
   2713e:	46c0      	nop			; (mov r8, r8)
   27140:	00026fcd 	.word	0x00026fcd

00027144 <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   27144:	b580      	push	{r7, lr}
   27146:	b084      	sub	sp, #16
   27148:	af00      	add	r7, sp, #0
   2714a:	0002      	movs	r2, r0
   2714c:	1dfb      	adds	r3, r7, #7
   2714e:	701a      	strb	r2, [r3, #0]
   27150:	1dbb      	adds	r3, r7, #6
   27152:	1c0a      	adds	r2, r1, #0
   27154:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   27156:	1dbb      	adds	r3, r7, #6
   27158:	781b      	ldrb	r3, [r3, #0]
   2715a:	2b00      	cmp	r3, #0
   2715c:	d10e      	bne.n	2717c <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   2715e:	1dfb      	adds	r3, r7, #7
   27160:	781b      	ldrb	r3, [r3, #0]
   27162:	0018      	movs	r0, r3
   27164:	4b08      	ldr	r3, [pc, #32]	; (27188 <extint_chan_disable_callback+0x44>)
   27166:	4798      	blx	r3
   27168:	0003      	movs	r3, r0
   2716a:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
   2716c:	1dfb      	adds	r3, r7, #7
   2716e:	781b      	ldrb	r3, [r3, #0]
   27170:	2201      	movs	r2, #1
   27172:	409a      	lsls	r2, r3
   27174:	68fb      	ldr	r3, [r7, #12]
   27176:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   27178:	2300      	movs	r3, #0
   2717a:	e000      	b.n	2717e <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   2717c:	2317      	movs	r3, #23
}
   2717e:	0018      	movs	r0, r3
   27180:	46bd      	mov	sp, r7
   27182:	b004      	add	sp, #16
   27184:	bd80      	pop	{r7, pc}
   27186:	46c0      	nop			; (mov r8, r8)
   27188:	00026fcd 	.word	0x00026fcd

0002718c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   2718c:	b580      	push	{r7, lr}
   2718e:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   27190:	4b15      	ldr	r3, [pc, #84]	; (271e8 <EIC_Handler+0x5c>)
   27192:	2200      	movs	r2, #0
   27194:	701a      	strb	r2, [r3, #0]
   27196:	e020      	b.n	271da <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   27198:	4b13      	ldr	r3, [pc, #76]	; (271e8 <EIC_Handler+0x5c>)
   2719a:	781b      	ldrb	r3, [r3, #0]
   2719c:	0018      	movs	r0, r3
   2719e:	4b13      	ldr	r3, [pc, #76]	; (271ec <EIC_Handler+0x60>)
   271a0:	4798      	blx	r3
   271a2:	1e03      	subs	r3, r0, #0
   271a4:	d013      	beq.n	271ce <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   271a6:	4b10      	ldr	r3, [pc, #64]	; (271e8 <EIC_Handler+0x5c>)
   271a8:	781b      	ldrb	r3, [r3, #0]
   271aa:	0018      	movs	r0, r3
   271ac:	4b10      	ldr	r3, [pc, #64]	; (271f0 <EIC_Handler+0x64>)
   271ae:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   271b0:	4b0d      	ldr	r3, [pc, #52]	; (271e8 <EIC_Handler+0x5c>)
   271b2:	781b      	ldrb	r3, [r3, #0]
   271b4:	001a      	movs	r2, r3
   271b6:	4b0f      	ldr	r3, [pc, #60]	; (271f4 <EIC_Handler+0x68>)
   271b8:	0092      	lsls	r2, r2, #2
   271ba:	58d3      	ldr	r3, [r2, r3]
   271bc:	2b00      	cmp	r3, #0
   271be:	d006      	beq.n	271ce <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   271c0:	4b09      	ldr	r3, [pc, #36]	; (271e8 <EIC_Handler+0x5c>)
   271c2:	781b      	ldrb	r3, [r3, #0]
   271c4:	001a      	movs	r2, r3
   271c6:	4b0b      	ldr	r3, [pc, #44]	; (271f4 <EIC_Handler+0x68>)
   271c8:	0092      	lsls	r2, r2, #2
   271ca:	58d3      	ldr	r3, [r2, r3]
   271cc:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   271ce:	4b06      	ldr	r3, [pc, #24]	; (271e8 <EIC_Handler+0x5c>)
   271d0:	781b      	ldrb	r3, [r3, #0]
   271d2:	3301      	adds	r3, #1
   271d4:	b2da      	uxtb	r2, r3
   271d6:	4b04      	ldr	r3, [pc, #16]	; (271e8 <EIC_Handler+0x5c>)
   271d8:	701a      	strb	r2, [r3, #0]
   271da:	4b03      	ldr	r3, [pc, #12]	; (271e8 <EIC_Handler+0x5c>)
   271dc:	781b      	ldrb	r3, [r3, #0]
   271de:	2b0f      	cmp	r3, #15
   271e0:	d9da      	bls.n	27198 <EIC_Handler+0xc>
			}
		}
	}
}
   271e2:	46c0      	nop			; (mov r8, r8)
   271e4:	46bd      	mov	sp, r7
   271e6:	bd80      	pop	{r7, pc}
   271e8:	20005c10 	.word	0x20005c10
   271ec:	00027019 	.word	0x00027019
   271f0:	0002705d 	.word	0x0002705d
   271f4:	20005c14 	.word	0x20005c14

000271f8 <system_gclk_chan_get_config_defaults>:
{
   271f8:	b580      	push	{r7, lr}
   271fa:	b082      	sub	sp, #8
   271fc:	af00      	add	r7, sp, #0
   271fe:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   27200:	687b      	ldr	r3, [r7, #4]
   27202:	2200      	movs	r2, #0
   27204:	701a      	strb	r2, [r3, #0]
}
   27206:	46c0      	nop			; (mov r8, r8)
   27208:	46bd      	mov	sp, r7
   2720a:	b002      	add	sp, #8
   2720c:	bd80      	pop	{r7, pc}
	...

00027210 <system_apb_clock_set_mask>:
{
   27210:	b580      	push	{r7, lr}
   27212:	b082      	sub	sp, #8
   27214:	af00      	add	r7, sp, #0
   27216:	0002      	movs	r2, r0
   27218:	6039      	str	r1, [r7, #0]
   2721a:	1dfb      	adds	r3, r7, #7
   2721c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2721e:	1dfb      	adds	r3, r7, #7
   27220:	781b      	ldrb	r3, [r3, #0]
   27222:	2b01      	cmp	r3, #1
   27224:	d00a      	beq.n	2723c <system_apb_clock_set_mask+0x2c>
   27226:	2b02      	cmp	r3, #2
   27228:	d00f      	beq.n	2724a <system_apb_clock_set_mask+0x3a>
   2722a:	2b00      	cmp	r3, #0
   2722c:	d114      	bne.n	27258 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2722e:	4b0e      	ldr	r3, [pc, #56]	; (27268 <system_apb_clock_set_mask+0x58>)
   27230:	4a0d      	ldr	r2, [pc, #52]	; (27268 <system_apb_clock_set_mask+0x58>)
   27232:	6991      	ldr	r1, [r2, #24]
   27234:	683a      	ldr	r2, [r7, #0]
   27236:	430a      	orrs	r2, r1
   27238:	619a      	str	r2, [r3, #24]
			break;
   2723a:	e00f      	b.n	2725c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2723c:	4b0a      	ldr	r3, [pc, #40]	; (27268 <system_apb_clock_set_mask+0x58>)
   2723e:	4a0a      	ldr	r2, [pc, #40]	; (27268 <system_apb_clock_set_mask+0x58>)
   27240:	69d1      	ldr	r1, [r2, #28]
   27242:	683a      	ldr	r2, [r7, #0]
   27244:	430a      	orrs	r2, r1
   27246:	61da      	str	r2, [r3, #28]
			break;
   27248:	e008      	b.n	2725c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2724a:	4b07      	ldr	r3, [pc, #28]	; (27268 <system_apb_clock_set_mask+0x58>)
   2724c:	4a06      	ldr	r2, [pc, #24]	; (27268 <system_apb_clock_set_mask+0x58>)
   2724e:	6a11      	ldr	r1, [r2, #32]
   27250:	683a      	ldr	r2, [r7, #0]
   27252:	430a      	orrs	r2, r1
   27254:	621a      	str	r2, [r3, #32]
			break;
   27256:	e001      	b.n	2725c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   27258:	2317      	movs	r3, #23
   2725a:	e000      	b.n	2725e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2725c:	2300      	movs	r3, #0
}
   2725e:	0018      	movs	r0, r3
   27260:	46bd      	mov	sp, r7
   27262:	b002      	add	sp, #8
   27264:	bd80      	pop	{r7, pc}
   27266:	46c0      	nop			; (mov r8, r8)
   27268:	40000400 	.word	0x40000400

0002726c <system_pinmux_get_config_defaults>:
{
   2726c:	b580      	push	{r7, lr}
   2726e:	b082      	sub	sp, #8
   27270:	af00      	add	r7, sp, #0
   27272:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   27274:	687b      	ldr	r3, [r7, #4]
   27276:	2280      	movs	r2, #128	; 0x80
   27278:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2727a:	687b      	ldr	r3, [r7, #4]
   2727c:	2200      	movs	r2, #0
   2727e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   27280:	687b      	ldr	r3, [r7, #4]
   27282:	2201      	movs	r2, #1
   27284:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   27286:	687b      	ldr	r3, [r7, #4]
   27288:	2200      	movs	r2, #0
   2728a:	70da      	strb	r2, [r3, #3]
}
   2728c:	46c0      	nop			; (mov r8, r8)
   2728e:	46bd      	mov	sp, r7
   27290:	b002      	add	sp, #8
   27292:	bd80      	pop	{r7, pc}

00027294 <system_interrupt_enable>:
{
   27294:	b580      	push	{r7, lr}
   27296:	b082      	sub	sp, #8
   27298:	af00      	add	r7, sp, #0
   2729a:	0002      	movs	r2, r0
   2729c:	1dfb      	adds	r3, r7, #7
   2729e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   272a0:	4b06      	ldr	r3, [pc, #24]	; (272bc <system_interrupt_enable+0x28>)
   272a2:	1dfa      	adds	r2, r7, #7
   272a4:	7812      	ldrb	r2, [r2, #0]
   272a6:	0011      	movs	r1, r2
   272a8:	221f      	movs	r2, #31
   272aa:	400a      	ands	r2, r1
   272ac:	2101      	movs	r1, #1
   272ae:	4091      	lsls	r1, r2
   272b0:	000a      	movs	r2, r1
   272b2:	601a      	str	r2, [r3, #0]
}
   272b4:	46c0      	nop			; (mov r8, r8)
   272b6:	46bd      	mov	sp, r7
   272b8:	b002      	add	sp, #8
   272ba:	bd80      	pop	{r7, pc}
   272bc:	e000e100 	.word	0xe000e100

000272c0 <_extint_get_eic_from_channel>:
{
   272c0:	b580      	push	{r7, lr}
   272c2:	b084      	sub	sp, #16
   272c4:	af00      	add	r7, sp, #0
   272c6:	0002      	movs	r2, r0
   272c8:	1dfb      	adds	r3, r7, #7
   272ca:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   272cc:	230f      	movs	r3, #15
   272ce:	18fb      	adds	r3, r7, r3
   272d0:	1dfa      	adds	r2, r7, #7
   272d2:	7812      	ldrb	r2, [r2, #0]
   272d4:	0952      	lsrs	r2, r2, #5
   272d6:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   272d8:	230f      	movs	r3, #15
   272da:	18fb      	adds	r3, r7, r3
   272dc:	781b      	ldrb	r3, [r3, #0]
   272de:	2b00      	cmp	r3, #0
   272e0:	d10c      	bne.n	272fc <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   272e2:	4b09      	ldr	r3, [pc, #36]	; (27308 <_extint_get_eic_from_channel+0x48>)
   272e4:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   272e6:	230f      	movs	r3, #15
   272e8:	18fb      	adds	r3, r7, r3
   272ea:	781b      	ldrb	r3, [r3, #0]
   272ec:	009b      	lsls	r3, r3, #2
   272ee:	2210      	movs	r2, #16
   272f0:	4694      	mov	ip, r2
   272f2:	44bc      	add	ip, r7
   272f4:	4463      	add	r3, ip
   272f6:	3b08      	subs	r3, #8
   272f8:	681b      	ldr	r3, [r3, #0]
   272fa:	e000      	b.n	272fe <_extint_get_eic_from_channel+0x3e>
		return NULL;
   272fc:	2300      	movs	r3, #0
}
   272fe:	0018      	movs	r0, r3
   27300:	46bd      	mov	sp, r7
   27302:	b004      	add	sp, #16
   27304:	bd80      	pop	{r7, pc}
   27306:	46c0      	nop			; (mov r8, r8)
   27308:	40001800 	.word	0x40001800

0002730c <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   2730c:	b580      	push	{r7, lr}
   2730e:	b082      	sub	sp, #8
   27310:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   27312:	4b0f      	ldr	r3, [pc, #60]	; (27350 <extint_is_syncing+0x44>)
   27314:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   27316:	2300      	movs	r3, #0
   27318:	607b      	str	r3, [r7, #4]
   2731a:	e011      	b.n	27340 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   2731c:	687b      	ldr	r3, [r7, #4]
   2731e:	009b      	lsls	r3, r3, #2
   27320:	2208      	movs	r2, #8
   27322:	4694      	mov	ip, r2
   27324:	44bc      	add	ip, r7
   27326:	4463      	add	r3, ip
   27328:	3b08      	subs	r3, #8
   2732a:	681b      	ldr	r3, [r3, #0]
   2732c:	785b      	ldrb	r3, [r3, #1]
   2732e:	b2db      	uxtb	r3, r3
   27330:	b25b      	sxtb	r3, r3
   27332:	2b00      	cmp	r3, #0
   27334:	da01      	bge.n	2733a <extint_is_syncing+0x2e>
			return true;
   27336:	2301      	movs	r3, #1
   27338:	e006      	b.n	27348 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   2733a:	687b      	ldr	r3, [r7, #4]
   2733c:	3301      	adds	r3, #1
   2733e:	607b      	str	r3, [r7, #4]
   27340:	687b      	ldr	r3, [r7, #4]
   27342:	2b00      	cmp	r3, #0
   27344:	d0ea      	beq.n	2731c <extint_is_syncing+0x10>
		}
	}
	return false;
   27346:	2300      	movs	r3, #0
}
   27348:	0018      	movs	r0, r3
   2734a:	46bd      	mov	sp, r7
   2734c:	b002      	add	sp, #8
   2734e:	bd80      	pop	{r7, pc}
   27350:	40001800 	.word	0x40001800

00027354 <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   27354:	b580      	push	{r7, lr}
   27356:	b084      	sub	sp, #16
   27358:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   2735a:	4b2d      	ldr	r3, [pc, #180]	; (27410 <_system_extint_init+0xbc>)
   2735c:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   2735e:	2140      	movs	r1, #64	; 0x40
   27360:	2000      	movs	r0, #0
   27362:	4b2c      	ldr	r3, [pc, #176]	; (27414 <_system_extint_init+0xc0>)
   27364:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   27366:	003b      	movs	r3, r7
   27368:	0018      	movs	r0, r3
   2736a:	4b2b      	ldr	r3, [pc, #172]	; (27418 <_system_extint_init+0xc4>)
   2736c:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   2736e:	003b      	movs	r3, r7
   27370:	2200      	movs	r2, #0
   27372:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   27374:	003b      	movs	r3, r7
   27376:	0019      	movs	r1, r3
   27378:	2005      	movs	r0, #5
   2737a:	4b28      	ldr	r3, [pc, #160]	; (2741c <_system_extint_init+0xc8>)
   2737c:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   2737e:	2005      	movs	r0, #5
   27380:	4b27      	ldr	r3, [pc, #156]	; (27420 <_system_extint_init+0xcc>)
   27382:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   27384:	2300      	movs	r3, #0
   27386:	60fb      	str	r3, [r7, #12]
   27388:	e018      	b.n	273bc <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   2738a:	68fb      	ldr	r3, [r7, #12]
   2738c:	009b      	lsls	r3, r3, #2
   2738e:	2210      	movs	r2, #16
   27390:	4694      	mov	ip, r2
   27392:	44bc      	add	ip, r7
   27394:	4463      	add	r3, ip
   27396:	3b0c      	subs	r3, #12
   27398:	681a      	ldr	r2, [r3, #0]
   2739a:	68fb      	ldr	r3, [r7, #12]
   2739c:	009b      	lsls	r3, r3, #2
   2739e:	2110      	movs	r1, #16
   273a0:	468c      	mov	ip, r1
   273a2:	44bc      	add	ip, r7
   273a4:	4463      	add	r3, ip
   273a6:	3b0c      	subs	r3, #12
   273a8:	681b      	ldr	r3, [r3, #0]
   273aa:	781b      	ldrb	r3, [r3, #0]
   273ac:	b2db      	uxtb	r3, r3
   273ae:	2101      	movs	r1, #1
   273b0:	430b      	orrs	r3, r1
   273b2:	b2db      	uxtb	r3, r3
   273b4:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   273b6:	68fb      	ldr	r3, [r7, #12]
   273b8:	3301      	adds	r3, #1
   273ba:	60fb      	str	r3, [r7, #12]
   273bc:	68fb      	ldr	r3, [r7, #12]
   273be:	2b00      	cmp	r3, #0
   273c0:	d0e3      	beq.n	2738a <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   273c2:	46c0      	nop			; (mov r8, r8)
   273c4:	4b17      	ldr	r3, [pc, #92]	; (27424 <_system_extint_init+0xd0>)
   273c6:	4798      	blx	r3
   273c8:	1e03      	subs	r3, r0, #0
   273ca:	d1fb      	bne.n	273c4 <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   273cc:	230b      	movs	r3, #11
   273ce:	18fb      	adds	r3, r7, r3
   273d0:	2200      	movs	r2, #0
   273d2:	701a      	strb	r2, [r3, #0]
   273d4:	e00d      	b.n	273f2 <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   273d6:	230b      	movs	r3, #11
   273d8:	18fb      	adds	r3, r7, r3
   273da:	781a      	ldrb	r2, [r3, #0]
   273dc:	4b12      	ldr	r3, [pc, #72]	; (27428 <_system_extint_init+0xd4>)
   273de:	0092      	lsls	r2, r2, #2
   273e0:	2100      	movs	r1, #0
   273e2:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   273e4:	230b      	movs	r3, #11
   273e6:	18fb      	adds	r3, r7, r3
   273e8:	781a      	ldrb	r2, [r3, #0]
   273ea:	230b      	movs	r3, #11
   273ec:	18fb      	adds	r3, r7, r3
   273ee:	3201      	adds	r2, #1
   273f0:	701a      	strb	r2, [r3, #0]
   273f2:	230b      	movs	r3, #11
   273f4:	18fb      	adds	r3, r7, r3
   273f6:	781b      	ldrb	r3, [r3, #0]
   273f8:	2b0f      	cmp	r3, #15
   273fa:	d9ec      	bls.n	273d6 <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   273fc:	2004      	movs	r0, #4
   273fe:	4b0b      	ldr	r3, [pc, #44]	; (2742c <_system_extint_init+0xd8>)
   27400:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   27402:	4b0b      	ldr	r3, [pc, #44]	; (27430 <_system_extint_init+0xdc>)
   27404:	4798      	blx	r3
}
   27406:	46c0      	nop			; (mov r8, r8)
   27408:	46bd      	mov	sp, r7
   2740a:	b004      	add	sp, #16
   2740c:	bd80      	pop	{r7, pc}
   2740e:	46c0      	nop			; (mov r8, r8)
   27410:	40001800 	.word	0x40001800
   27414:	00027211 	.word	0x00027211
   27418:	000271f9 	.word	0x000271f9
   2741c:	0002aa81 	.word	0x0002aa81
   27420:	0002aac5 	.word	0x0002aac5
   27424:	0002730d 	.word	0x0002730d
   27428:	20005c14 	.word	0x20005c14
   2742c:	00027295 	.word	0x00027295
   27430:	00027435 	.word	0x00027435

00027434 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   27434:	b580      	push	{r7, lr}
   27436:	b082      	sub	sp, #8
   27438:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   2743a:	4b15      	ldr	r3, [pc, #84]	; (27490 <_extint_enable+0x5c>)
   2743c:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   2743e:	2300      	movs	r3, #0
   27440:	607b      	str	r3, [r7, #4]
   27442:	e018      	b.n	27476 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   27444:	687b      	ldr	r3, [r7, #4]
   27446:	009b      	lsls	r3, r3, #2
   27448:	2208      	movs	r2, #8
   2744a:	4694      	mov	ip, r2
   2744c:	44bc      	add	ip, r7
   2744e:	4463      	add	r3, ip
   27450:	3b08      	subs	r3, #8
   27452:	681a      	ldr	r2, [r3, #0]
   27454:	687b      	ldr	r3, [r7, #4]
   27456:	009b      	lsls	r3, r3, #2
   27458:	2108      	movs	r1, #8
   2745a:	468c      	mov	ip, r1
   2745c:	44bc      	add	ip, r7
   2745e:	4463      	add	r3, ip
   27460:	3b08      	subs	r3, #8
   27462:	681b      	ldr	r3, [r3, #0]
   27464:	781b      	ldrb	r3, [r3, #0]
   27466:	b2db      	uxtb	r3, r3
   27468:	2102      	movs	r1, #2
   2746a:	430b      	orrs	r3, r1
   2746c:	b2db      	uxtb	r3, r3
   2746e:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   27470:	687b      	ldr	r3, [r7, #4]
   27472:	3301      	adds	r3, #1
   27474:	607b      	str	r3, [r7, #4]
   27476:	687b      	ldr	r3, [r7, #4]
   27478:	2b00      	cmp	r3, #0
   2747a:	d0e3      	beq.n	27444 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   2747c:	46c0      	nop			; (mov r8, r8)
   2747e:	4b05      	ldr	r3, [pc, #20]	; (27494 <_extint_enable+0x60>)
   27480:	4798      	blx	r3
   27482:	1e03      	subs	r3, r0, #0
   27484:	d1fb      	bne.n	2747e <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   27486:	46c0      	nop			; (mov r8, r8)
   27488:	46bd      	mov	sp, r7
   2748a:	b002      	add	sp, #8
   2748c:	bd80      	pop	{r7, pc}
   2748e:	46c0      	nop			; (mov r8, r8)
   27490:	40001800 	.word	0x40001800
   27494:	0002730d 	.word	0x0002730d

00027498 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   27498:	b580      	push	{r7, lr}
   2749a:	b082      	sub	sp, #8
   2749c:	af00      	add	r7, sp, #0
   2749e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   274a0:	687b      	ldr	r3, [r7, #4]
   274a2:	2200      	movs	r2, #0
   274a4:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   274a6:	687b      	ldr	r3, [r7, #4]
   274a8:	2200      	movs	r2, #0
   274aa:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   274ac:	687b      	ldr	r3, [r7, #4]
   274ae:	2201      	movs	r2, #1
   274b0:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   274b2:	687b      	ldr	r3, [r7, #4]
   274b4:	2201      	movs	r2, #1
   274b6:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   274b8:	687b      	ldr	r3, [r7, #4]
   274ba:	2200      	movs	r2, #0
   274bc:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   274be:	687b      	ldr	r3, [r7, #4]
   274c0:	2202      	movs	r2, #2
   274c2:	72da      	strb	r2, [r3, #11]
}
   274c4:	46c0      	nop			; (mov r8, r8)
   274c6:	46bd      	mov	sp, r7
   274c8:	b002      	add	sp, #8
   274ca:	bd80      	pop	{r7, pc}

000274cc <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   274cc:	b580      	push	{r7, lr}
   274ce:	b086      	sub	sp, #24
   274d0:	af00      	add	r7, sp, #0
   274d2:	0002      	movs	r2, r0
   274d4:	6039      	str	r1, [r7, #0]
   274d6:	1dfb      	adds	r3, r7, #7
   274d8:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   274da:	2308      	movs	r3, #8
   274dc:	18fb      	adds	r3, r7, r3
   274de:	0018      	movs	r0, r3
   274e0:	4b36      	ldr	r3, [pc, #216]	; (275bc <extint_chan_set_config+0xf0>)
   274e2:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   274e4:	683b      	ldr	r3, [r7, #0]
   274e6:	685b      	ldr	r3, [r3, #4]
   274e8:	b2da      	uxtb	r2, r3
   274ea:	2308      	movs	r3, #8
   274ec:	18fb      	adds	r3, r7, r3
   274ee:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   274f0:	2308      	movs	r3, #8
   274f2:	18fb      	adds	r3, r7, r3
   274f4:	2200      	movs	r2, #0
   274f6:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   274f8:	683b      	ldr	r3, [r7, #0]
   274fa:	7a1a      	ldrb	r2, [r3, #8]
   274fc:	2308      	movs	r3, #8
   274fe:	18fb      	adds	r3, r7, r3
   27500:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   27502:	683b      	ldr	r3, [r7, #0]
   27504:	681b      	ldr	r3, [r3, #0]
   27506:	b2db      	uxtb	r3, r3
   27508:	2208      	movs	r2, #8
   2750a:	18ba      	adds	r2, r7, r2
   2750c:	0011      	movs	r1, r2
   2750e:	0018      	movs	r0, r3
   27510:	4b2b      	ldr	r3, [pc, #172]	; (275c0 <extint_chan_set_config+0xf4>)
   27512:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   27514:	1dfb      	adds	r3, r7, #7
   27516:	781b      	ldrb	r3, [r3, #0]
   27518:	0018      	movs	r0, r3
   2751a:	4b2a      	ldr	r3, [pc, #168]	; (275c4 <extint_chan_set_config+0xf8>)
   2751c:	4798      	blx	r3
   2751e:	0003      	movs	r3, r0
   27520:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   27522:	1dfb      	adds	r3, r7, #7
   27524:	781b      	ldrb	r3, [r3, #0]
   27526:	2207      	movs	r2, #7
   27528:	4013      	ands	r3, r2
   2752a:	009b      	lsls	r3, r3, #2
   2752c:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   2752e:	683b      	ldr	r3, [r7, #0]
   27530:	7adb      	ldrb	r3, [r3, #11]
   27532:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   27534:	683b      	ldr	r3, [r7, #0]
   27536:	7a9b      	ldrb	r3, [r3, #10]
   27538:	2b00      	cmp	r3, #0
   2753a:	d003      	beq.n	27544 <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   2753c:	697b      	ldr	r3, [r7, #20]
   2753e:	2208      	movs	r2, #8
   27540:	4313      	orrs	r3, r2
   27542:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   27544:	1dfb      	adds	r3, r7, #7
   27546:	781b      	ldrb	r3, [r3, #0]
   27548:	08db      	lsrs	r3, r3, #3
   2754a:	b2db      	uxtb	r3, r3
   2754c:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   2754e:	1dfb      	adds	r3, r7, #7
   27550:	781b      	ldrb	r3, [r3, #0]
   27552:	08db      	lsrs	r3, r3, #3
   27554:	b2db      	uxtb	r3, r3
   27556:	001a      	movs	r2, r3
   27558:	693b      	ldr	r3, [r7, #16]
   2755a:	3206      	adds	r2, #6
   2755c:	0092      	lsls	r2, r2, #2
   2755e:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   27560:	210f      	movs	r1, #15
   27562:	68fa      	ldr	r2, [r7, #12]
   27564:	4091      	lsls	r1, r2
   27566:	000a      	movs	r2, r1
   27568:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   2756a:	401a      	ands	r2, r3
			(new_config << config_pos);
   2756c:	6979      	ldr	r1, [r7, #20]
   2756e:	68fb      	ldr	r3, [r7, #12]
   27570:	4099      	lsls	r1, r3
   27572:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   27574:	431a      	orrs	r2, r3
   27576:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   27578:	693b      	ldr	r3, [r7, #16]
   2757a:	1d82      	adds	r2, r0, #6
   2757c:	0092      	lsls	r2, r2, #2
   2757e:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   27580:	683b      	ldr	r3, [r7, #0]
   27582:	7a5b      	ldrb	r3, [r3, #9]
   27584:	2b00      	cmp	r3, #0
   27586:	d00a      	beq.n	2759e <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   27588:	693b      	ldr	r3, [r7, #16]
   2758a:	695a      	ldr	r2, [r3, #20]
   2758c:	1dfb      	adds	r3, r7, #7
   2758e:	781b      	ldrb	r3, [r3, #0]
   27590:	2101      	movs	r1, #1
   27592:	4099      	lsls	r1, r3
   27594:	000b      	movs	r3, r1
   27596:	431a      	orrs	r2, r3
   27598:	693b      	ldr	r3, [r7, #16]
   2759a:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   2759c:	e00a      	b.n	275b4 <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   2759e:	693b      	ldr	r3, [r7, #16]
   275a0:	695b      	ldr	r3, [r3, #20]
   275a2:	1dfa      	adds	r2, r7, #7
   275a4:	7812      	ldrb	r2, [r2, #0]
   275a6:	2101      	movs	r1, #1
   275a8:	4091      	lsls	r1, r2
   275aa:	000a      	movs	r2, r1
   275ac:	43d2      	mvns	r2, r2
   275ae:	401a      	ands	r2, r3
   275b0:	693b      	ldr	r3, [r7, #16]
   275b2:	615a      	str	r2, [r3, #20]
}
   275b4:	46c0      	nop			; (mov r8, r8)
   275b6:	46bd      	mov	sp, r7
   275b8:	b006      	add	sp, #24
   275ba:	bd80      	pop	{r7, pc}
   275bc:	0002726d 	.word	0x0002726d
   275c0:	0002ade1 	.word	0x0002ade1
   275c4:	000272c1 	.word	0x000272c1

000275c8 <system_pinmux_get_config_defaults>:
{
   275c8:	b580      	push	{r7, lr}
   275ca:	b082      	sub	sp, #8
   275cc:	af00      	add	r7, sp, #0
   275ce:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   275d0:	687b      	ldr	r3, [r7, #4]
   275d2:	2280      	movs	r2, #128	; 0x80
   275d4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   275d6:	687b      	ldr	r3, [r7, #4]
   275d8:	2200      	movs	r2, #0
   275da:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   275dc:	687b      	ldr	r3, [r7, #4]
   275de:	2201      	movs	r2, #1
   275e0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   275e2:	687b      	ldr	r3, [r7, #4]
   275e4:	2200      	movs	r2, #0
   275e6:	70da      	strb	r2, [r3, #3]
}
   275e8:	46c0      	nop			; (mov r8, r8)
   275ea:	46bd      	mov	sp, r7
   275ec:	b002      	add	sp, #8
   275ee:	bd80      	pop	{r7, pc}

000275f0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   275f0:	b580      	push	{r7, lr}
   275f2:	b084      	sub	sp, #16
   275f4:	af00      	add	r7, sp, #0
   275f6:	0002      	movs	r2, r0
   275f8:	6039      	str	r1, [r7, #0]
   275fa:	1dfb      	adds	r3, r7, #7
   275fc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   275fe:	230c      	movs	r3, #12
   27600:	18fb      	adds	r3, r7, r3
   27602:	0018      	movs	r0, r3
   27604:	4b10      	ldr	r3, [pc, #64]	; (27648 <port_pin_set_config+0x58>)
   27606:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   27608:	230c      	movs	r3, #12
   2760a:	18fb      	adds	r3, r7, r3
   2760c:	2280      	movs	r2, #128	; 0x80
   2760e:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   27610:	683b      	ldr	r3, [r7, #0]
   27612:	781a      	ldrb	r2, [r3, #0]
   27614:	230c      	movs	r3, #12
   27616:	18fb      	adds	r3, r7, r3
   27618:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   2761a:	683b      	ldr	r3, [r7, #0]
   2761c:	785a      	ldrb	r2, [r3, #1]
   2761e:	230c      	movs	r3, #12
   27620:	18fb      	adds	r3, r7, r3
   27622:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   27624:	683b      	ldr	r3, [r7, #0]
   27626:	789a      	ldrb	r2, [r3, #2]
   27628:	230c      	movs	r3, #12
   2762a:	18fb      	adds	r3, r7, r3
   2762c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   2762e:	230c      	movs	r3, #12
   27630:	18fa      	adds	r2, r7, r3
   27632:	1dfb      	adds	r3, r7, #7
   27634:	781b      	ldrb	r3, [r3, #0]
   27636:	0011      	movs	r1, r2
   27638:	0018      	movs	r0, r3
   2763a:	4b04      	ldr	r3, [pc, #16]	; (2764c <port_pin_set_config+0x5c>)
   2763c:	4798      	blx	r3
}
   2763e:	46c0      	nop			; (mov r8, r8)
   27640:	46bd      	mov	sp, r7
   27642:	b004      	add	sp, #16
   27644:	bd80      	pop	{r7, pc}
   27646:	46c0      	nop			; (mov r8, r8)
   27648:	000275c9 	.word	0x000275c9
   2764c:	0002ade1 	.word	0x0002ade1

00027650 <system_gclk_chan_get_config_defaults>:
{
   27650:	b580      	push	{r7, lr}
   27652:	b082      	sub	sp, #8
   27654:	af00      	add	r7, sp, #0
   27656:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   27658:	687b      	ldr	r3, [r7, #4]
   2765a:	2200      	movs	r2, #0
   2765c:	701a      	strb	r2, [r3, #0]
}
   2765e:	46c0      	nop			; (mov r8, r8)
   27660:	46bd      	mov	sp, r7
   27662:	b002      	add	sp, #8
   27664:	bd80      	pop	{r7, pc}
	...

00027668 <system_apb_clock_set_mask>:
{
   27668:	b580      	push	{r7, lr}
   2766a:	b082      	sub	sp, #8
   2766c:	af00      	add	r7, sp, #0
   2766e:	0002      	movs	r2, r0
   27670:	6039      	str	r1, [r7, #0]
   27672:	1dfb      	adds	r3, r7, #7
   27674:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   27676:	1dfb      	adds	r3, r7, #7
   27678:	781b      	ldrb	r3, [r3, #0]
   2767a:	2b01      	cmp	r3, #1
   2767c:	d00a      	beq.n	27694 <system_apb_clock_set_mask+0x2c>
   2767e:	2b02      	cmp	r3, #2
   27680:	d00f      	beq.n	276a2 <system_apb_clock_set_mask+0x3a>
   27682:	2b00      	cmp	r3, #0
   27684:	d114      	bne.n	276b0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   27686:	4b0e      	ldr	r3, [pc, #56]	; (276c0 <system_apb_clock_set_mask+0x58>)
   27688:	4a0d      	ldr	r2, [pc, #52]	; (276c0 <system_apb_clock_set_mask+0x58>)
   2768a:	6991      	ldr	r1, [r2, #24]
   2768c:	683a      	ldr	r2, [r7, #0]
   2768e:	430a      	orrs	r2, r1
   27690:	619a      	str	r2, [r3, #24]
			break;
   27692:	e00f      	b.n	276b4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   27694:	4b0a      	ldr	r3, [pc, #40]	; (276c0 <system_apb_clock_set_mask+0x58>)
   27696:	4a0a      	ldr	r2, [pc, #40]	; (276c0 <system_apb_clock_set_mask+0x58>)
   27698:	69d1      	ldr	r1, [r2, #28]
   2769a:	683a      	ldr	r2, [r7, #0]
   2769c:	430a      	orrs	r2, r1
   2769e:	61da      	str	r2, [r3, #28]
			break;
   276a0:	e008      	b.n	276b4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   276a2:	4b07      	ldr	r3, [pc, #28]	; (276c0 <system_apb_clock_set_mask+0x58>)
   276a4:	4a06      	ldr	r2, [pc, #24]	; (276c0 <system_apb_clock_set_mask+0x58>)
   276a6:	6a11      	ldr	r1, [r2, #32]
   276a8:	683a      	ldr	r2, [r7, #0]
   276aa:	430a      	orrs	r2, r1
   276ac:	621a      	str	r2, [r3, #32]
			break;
   276ae:	e001      	b.n	276b4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   276b0:	2317      	movs	r3, #23
   276b2:	e000      	b.n	276b6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   276b4:	2300      	movs	r3, #0
}
   276b6:	0018      	movs	r0, r3
   276b8:	46bd      	mov	sp, r7
   276ba:	b002      	add	sp, #8
   276bc:	bd80      	pop	{r7, pc}
   276be:	46c0      	nop			; (mov r8, r8)
   276c0:	40000400 	.word	0x40000400

000276c4 <system_interrupt_enable>:
{
   276c4:	b580      	push	{r7, lr}
   276c6:	b082      	sub	sp, #8
   276c8:	af00      	add	r7, sp, #0
   276ca:	0002      	movs	r2, r0
   276cc:	1dfb      	adds	r3, r7, #7
   276ce:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   276d0:	4b06      	ldr	r3, [pc, #24]	; (276ec <system_interrupt_enable+0x28>)
   276d2:	1dfa      	adds	r2, r7, #7
   276d4:	7812      	ldrb	r2, [r2, #0]
   276d6:	0011      	movs	r1, r2
   276d8:	221f      	movs	r2, #31
   276da:	400a      	ands	r2, r1
   276dc:	2101      	movs	r1, #1
   276de:	4091      	lsls	r1, r2
   276e0:	000a      	movs	r2, r1
   276e2:	601a      	str	r2, [r3, #0]
}
   276e4:	46c0      	nop			; (mov r8, r8)
   276e6:	46bd      	mov	sp, r7
   276e8:	b002      	add	sp, #8
   276ea:	bd80      	pop	{r7, pc}
   276ec:	e000e100 	.word	0xe000e100

000276f0 <system_interrupt_disable>:
{
   276f0:	b580      	push	{r7, lr}
   276f2:	b082      	sub	sp, #8
   276f4:	af00      	add	r7, sp, #0
   276f6:	0002      	movs	r2, r0
   276f8:	1dfb      	adds	r3, r7, #7
   276fa:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   276fc:	4a07      	ldr	r2, [pc, #28]	; (2771c <system_interrupt_disable+0x2c>)
   276fe:	1dfb      	adds	r3, r7, #7
   27700:	781b      	ldrb	r3, [r3, #0]
   27702:	0019      	movs	r1, r3
   27704:	231f      	movs	r3, #31
   27706:	400b      	ands	r3, r1
   27708:	2101      	movs	r1, #1
   2770a:	4099      	lsls	r1, r3
   2770c:	000b      	movs	r3, r1
   2770e:	0019      	movs	r1, r3
   27710:	2380      	movs	r3, #128	; 0x80
   27712:	50d1      	str	r1, [r2, r3]
}
   27714:	46c0      	nop			; (mov r8, r8)
   27716:	46bd      	mov	sp, r7
   27718:	b002      	add	sp, #8
   2771a:	bd80      	pop	{r7, pc}
   2771c:	e000e100 	.word	0xe000e100

00027720 <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
   27720:	b580      	push	{r7, lr}
   27722:	b084      	sub	sp, #16
   27724:	af00      	add	r7, sp, #0
   27726:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   27728:	687b      	ldr	r3, [r7, #4]
   2772a:	681b      	ldr	r3, [r3, #0]
   2772c:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   2772e:	68fb      	ldr	r3, [r7, #12]
   27730:	7a9b      	ldrb	r3, [r3, #10]
   27732:	b2db      	uxtb	r3, r3
   27734:	b25b      	sxtb	r3, r3
   27736:	2b00      	cmp	r3, #0
   27738:	da01      	bge.n	2773e <rtc_calendar_is_syncing+0x1e>
                return true;
   2773a:	2301      	movs	r3, #1
   2773c:	e000      	b.n	27740 <rtc_calendar_is_syncing+0x20>
        }

        return false;
   2773e:	2300      	movs	r3, #0
}
   27740:	0018      	movs	r0, r3
   27742:	46bd      	mov	sp, r7
   27744:	b004      	add	sp, #16
   27746:	bd80      	pop	{r7, pc}

00027748 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
   27748:	b580      	push	{r7, lr}
   2774a:	b084      	sub	sp, #16
   2774c:	af00      	add	r7, sp, #0
   2774e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   27750:	687b      	ldr	r3, [r7, #4]
   27752:	681b      	ldr	r3, [r3, #0]
   27754:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
   27756:	2003      	movs	r0, #3
   27758:	4b0a      	ldr	r3, [pc, #40]	; (27784 <rtc_calendar_enable+0x3c>)
   2775a:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   2775c:	46c0      	nop			; (mov r8, r8)
   2775e:	687b      	ldr	r3, [r7, #4]
   27760:	0018      	movs	r0, r3
   27762:	4b09      	ldr	r3, [pc, #36]	; (27788 <rtc_calendar_enable+0x40>)
   27764:	4798      	blx	r3
   27766:	1e03      	subs	r3, r0, #0
   27768:	d1f9      	bne.n	2775e <rtc_calendar_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
   2776a:	68fb      	ldr	r3, [r7, #12]
   2776c:	881b      	ldrh	r3, [r3, #0]
   2776e:	b29b      	uxth	r3, r3
   27770:	2202      	movs	r2, #2
   27772:	4313      	orrs	r3, r2
   27774:	b29a      	uxth	r2, r3
   27776:	68fb      	ldr	r3, [r7, #12]
   27778:	801a      	strh	r2, [r3, #0]
}
   2777a:	46c0      	nop			; (mov r8, r8)
   2777c:	46bd      	mov	sp, r7
   2777e:	b004      	add	sp, #16
   27780:	bd80      	pop	{r7, pc}
   27782:	46c0      	nop			; (mov r8, r8)
   27784:	000276c5 	.word	0x000276c5
   27788:	00027721 	.word	0x00027721

0002778c <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
   2778c:	b580      	push	{r7, lr}
   2778e:	b084      	sub	sp, #16
   27790:	af00      	add	r7, sp, #0
   27792:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   27794:	687b      	ldr	r3, [r7, #4]
   27796:	681b      	ldr	r3, [r3, #0]
   27798:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
   2779a:	2003      	movs	r0, #3
   2779c:	4b0d      	ldr	r3, [pc, #52]	; (277d4 <rtc_calendar_disable+0x48>)
   2779e:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   277a0:	46c0      	nop			; (mov r8, r8)
   277a2:	687b      	ldr	r3, [r7, #4]
   277a4:	0018      	movs	r0, r3
   277a6:	4b0c      	ldr	r3, [pc, #48]	; (277d8 <rtc_calendar_disable+0x4c>)
   277a8:	4798      	blx	r3
   277aa:	1e03      	subs	r3, r0, #0
   277ac:	d1f9      	bne.n	277a2 <rtc_calendar_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
   277ae:	68fb      	ldr	r3, [r7, #12]
   277b0:	22c1      	movs	r2, #193	; 0xc1
   277b2:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
   277b4:	68fb      	ldr	r3, [r7, #12]
   277b6:	22c1      	movs	r2, #193	; 0xc1
   277b8:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
   277ba:	68fb      	ldr	r3, [r7, #12]
   277bc:	881b      	ldrh	r3, [r3, #0]
   277be:	b29b      	uxth	r3, r3
   277c0:	2202      	movs	r2, #2
   277c2:	4393      	bics	r3, r2
   277c4:	b29a      	uxth	r2, r3
   277c6:	68fb      	ldr	r3, [r7, #12]
   277c8:	801a      	strh	r2, [r3, #0]
}
   277ca:	46c0      	nop			; (mov r8, r8)
   277cc:	46bd      	mov	sp, r7
   277ce:	b004      	add	sp, #16
   277d0:	bd80      	pop	{r7, pc}
   277d2:	46c0      	nop			; (mov r8, r8)
   277d4:	000276f1 	.word	0x000276f1
   277d8:	00027721 	.word	0x00027721

000277dc <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
   277dc:	b580      	push	{r7, lr}
   277de:	b084      	sub	sp, #16
   277e0:	af00      	add	r7, sp, #0
   277e2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   277e4:	687b      	ldr	r3, [r7, #4]
   277e6:	681b      	ldr	r3, [r3, #0]
   277e8:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
   277ea:	687b      	ldr	r3, [r7, #4]
   277ec:	0018      	movs	r0, r3
   277ee:	4b0d      	ldr	r3, [pc, #52]	; (27824 <rtc_calendar_reset+0x48>)
   277f0:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
   277f2:	687b      	ldr	r3, [r7, #4]
   277f4:	2200      	movs	r2, #0
   277f6:	821a      	strh	r2, [r3, #16]
	module->enabled_callback    = 0;
   277f8:	687b      	ldr	r3, [r7, #4]
   277fa:	2200      	movs	r2, #0
   277fc:	825a      	strh	r2, [r3, #18]
#endif

	while (rtc_calendar_is_syncing(module)) {
   277fe:	46c0      	nop			; (mov r8, r8)
   27800:	687b      	ldr	r3, [r7, #4]
   27802:	0018      	movs	r0, r3
   27804:	4b08      	ldr	r3, [pc, #32]	; (27828 <rtc_calendar_reset+0x4c>)
   27806:	4798      	blx	r3
   27808:	1e03      	subs	r3, r0, #0
   2780a:	d1f9      	bne.n	27800 <rtc_calendar_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
   2780c:	68fb      	ldr	r3, [r7, #12]
   2780e:	881b      	ldrh	r3, [r3, #0]
   27810:	b29b      	uxth	r3, r3
   27812:	2201      	movs	r2, #1
   27814:	4313      	orrs	r3, r2
   27816:	b29a      	uxth	r2, r3
   27818:	68fb      	ldr	r3, [r7, #12]
   2781a:	801a      	strh	r2, [r3, #0]
}
   2781c:	46c0      	nop			; (mov r8, r8)
   2781e:	46bd      	mov	sp, r7
   27820:	b004      	add	sp, #16
   27822:	bd80      	pop	{r7, pc}
   27824:	0002778d 	.word	0x0002778d
   27828:	00027721 	.word	0x00027721

0002782c <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
   2782c:	b580      	push	{r7, lr}
   2782e:	b084      	sub	sp, #16
   27830:	af00      	add	r7, sp, #0
   27832:	6078      	str	r0, [r7, #4]
   27834:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
   27836:	683b      	ldr	r3, [r7, #0]
   27838:	88db      	ldrh	r3, [r3, #6]
   2783a:	001a      	movs	r2, r3
   2783c:	687b      	ldr	r3, [r7, #4]
   2783e:	88db      	ldrh	r3, [r3, #6]
   27840:	1ad3      	subs	r3, r2, r3
   27842:	069b      	lsls	r3, r3, #26
   27844:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
   27846:	683b      	ldr	r3, [r7, #0]
   27848:	795b      	ldrb	r3, [r3, #5]
   2784a:	059b      	lsls	r3, r3, #22
   2784c:	001a      	movs	r2, r3
   2784e:	68fb      	ldr	r3, [r7, #12]
   27850:	4313      	orrs	r3, r2
   27852:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
   27854:	683b      	ldr	r3, [r7, #0]
   27856:	791b      	ldrb	r3, [r3, #4]
   27858:	045b      	lsls	r3, r3, #17
   2785a:	001a      	movs	r2, r3
   2785c:	68fb      	ldr	r3, [r7, #12]
   2785e:	4313      	orrs	r3, r2
   27860:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
   27862:	683b      	ldr	r3, [r7, #0]
   27864:	789b      	ldrb	r3, [r3, #2]
   27866:	031b      	lsls	r3, r3, #12
   27868:	001a      	movs	r2, r3
   2786a:	68fb      	ldr	r3, [r7, #12]
   2786c:	4313      	orrs	r3, r2
   2786e:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
   27870:	687b      	ldr	r3, [r7, #4]
   27872:	791b      	ldrb	r3, [r3, #4]
   27874:	2201      	movs	r2, #1
   27876:	4053      	eors	r3, r2
   27878:	b2db      	uxtb	r3, r3
   2787a:	2b00      	cmp	r3, #0
   2787c:	d008      	beq.n	27890 <rtc_calendar_time_to_register_value+0x64>
   2787e:	683b      	ldr	r3, [r7, #0]
   27880:	78db      	ldrb	r3, [r3, #3]
   27882:	2b00      	cmp	r3, #0
   27884:	d004      	beq.n	27890 <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
   27886:	68fb      	ldr	r3, [r7, #12]
   27888:	2280      	movs	r2, #128	; 0x80
   2788a:	0252      	lsls	r2, r2, #9
   2788c:	4313      	orrs	r3, r2
   2788e:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
   27890:	683b      	ldr	r3, [r7, #0]
   27892:	785b      	ldrb	r3, [r3, #1]
   27894:	019b      	lsls	r3, r3, #6
   27896:	001a      	movs	r2, r3
   27898:	68fb      	ldr	r3, [r7, #12]
   2789a:	4313      	orrs	r3, r2
   2789c:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
   2789e:	683b      	ldr	r3, [r7, #0]
   278a0:	781b      	ldrb	r3, [r3, #0]
   278a2:	001a      	movs	r2, r3
   278a4:	68fb      	ldr	r3, [r7, #12]
   278a6:	4313      	orrs	r3, r2
   278a8:	60fb      	str	r3, [r7, #12]

	return register_value;
   278aa:	68fb      	ldr	r3, [r7, #12]
}
   278ac:	0018      	movs	r0, r3
   278ae:	46bd      	mov	sp, r7
   278b0:	b004      	add	sp, #16
   278b2:	bd80      	pop	{r7, pc}

000278b4 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
   278b4:	b580      	push	{r7, lr}
   278b6:	b084      	sub	sp, #16
   278b8:	af00      	add	r7, sp, #0
   278ba:	60f8      	str	r0, [r7, #12]
   278bc:	60b9      	str	r1, [r7, #8]
   278be:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   278c0:	68bb      	ldr	r3, [r7, #8]
   278c2:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
   278c4:	b29a      	uxth	r2, r3
   278c6:	68fb      	ldr	r3, [r7, #12]
   278c8:	88db      	ldrh	r3, [r3, #6]
   278ca:	18d3      	adds	r3, r2, r3
   278cc:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   278ce:	687b      	ldr	r3, [r7, #4]
   278d0:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
   278d2:	68bb      	ldr	r3, [r7, #8]
   278d4:	0d9b      	lsrs	r3, r3, #22
   278d6:	b2db      	uxtb	r3, r3
   278d8:	220f      	movs	r2, #15
   278da:	4013      	ands	r3, r2
   278dc:	b2da      	uxtb	r2, r3
   278de:	687b      	ldr	r3, [r7, #4]
   278e0:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
   278e2:	68bb      	ldr	r3, [r7, #8]
   278e4:	0c5b      	lsrs	r3, r3, #17
   278e6:	b2db      	uxtb	r3, r3
   278e8:	221f      	movs	r2, #31
   278ea:	4013      	ands	r3, r2
   278ec:	b2da      	uxtb	r2, r3
   278ee:	687b      	ldr	r3, [r7, #4]
   278f0:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
   278f2:	68fb      	ldr	r3, [r7, #12]
   278f4:	791b      	ldrb	r3, [r3, #4]
   278f6:	2b00      	cmp	r3, #0
   278f8:	d008      	beq.n	2790c <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
   278fa:	68bb      	ldr	r3, [r7, #8]
   278fc:	0b1b      	lsrs	r3, r3, #12
   278fe:	b2db      	uxtb	r3, r3
   27900:	221f      	movs	r2, #31
   27902:	4013      	ands	r3, r2
   27904:	b2da      	uxtb	r2, r3
   27906:	687b      	ldr	r3, [r7, #4]
   27908:	709a      	strb	r2, [r3, #2]
   2790a:	e010      	b.n	2792e <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
   2790c:	68bb      	ldr	r3, [r7, #8]
   2790e:	0b1b      	lsrs	r3, r3, #12
   27910:	b2db      	uxtb	r3, r3
   27912:	220f      	movs	r2, #15
   27914:	4013      	ands	r3, r2
   27916:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
   27918:	687b      	ldr	r3, [r7, #4]
   2791a:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
   2791c:	68ba      	ldr	r2, [r7, #8]
   2791e:	2380      	movs	r3, #128	; 0x80
   27920:	025b      	lsls	r3, r3, #9
   27922:	4013      	ands	r3, r2
   27924:	1e5a      	subs	r2, r3, #1
   27926:	4193      	sbcs	r3, r2
   27928:	b2da      	uxtb	r2, r3
   2792a:	687b      	ldr	r3, [r7, #4]
   2792c:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
   2792e:	68bb      	ldr	r3, [r7, #8]
   27930:	099b      	lsrs	r3, r3, #6
   27932:	b2db      	uxtb	r3, r3
   27934:	223f      	movs	r2, #63	; 0x3f
   27936:	4013      	ands	r3, r2
   27938:	b2da      	uxtb	r2, r3
   2793a:	687b      	ldr	r3, [r7, #4]
   2793c:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
   2793e:	68bb      	ldr	r3, [r7, #8]
   27940:	b2db      	uxtb	r3, r3
   27942:	223f      	movs	r2, #63	; 0x3f
   27944:	4013      	ands	r3, r2
   27946:	b2da      	uxtb	r2, r3
   27948:	687b      	ldr	r3, [r7, #4]
   2794a:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
   2794c:	46c0      	nop			; (mov r8, r8)
   2794e:	46bd      	mov	sp, r7
   27950:	b004      	add	sp, #16
   27952:	bd80      	pop	{r7, pc}

00027954 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
   27954:	b580      	push	{r7, lr}
   27956:	b084      	sub	sp, #16
   27958:	af00      	add	r7, sp, #0
   2795a:	6078      	str	r0, [r7, #4]
   2795c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   2795e:	687b      	ldr	r3, [r7, #4]
   27960:	681b      	ldr	r3, [r3, #0]
   27962:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   27964:	683b      	ldr	r3, [r7, #0]
   27966:	881a      	ldrh	r2, [r3, #0]
   27968:	230e      	movs	r3, #14
   2796a:	18fb      	adds	r3, r7, r3
   2796c:	2108      	movs	r1, #8
   2796e:	430a      	orrs	r2, r1
   27970:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
   27972:	683b      	ldr	r3, [r7, #0]
   27974:	791b      	ldrb	r3, [r3, #4]
   27976:	2201      	movs	r2, #1
   27978:	4053      	eors	r3, r2
   2797a:	b2db      	uxtb	r3, r3
   2797c:	2b00      	cmp	r3, #0
   2797e:	d007      	beq.n	27990 <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
   27980:	230e      	movs	r3, #14
   27982:	18fb      	adds	r3, r7, r3
   27984:	220e      	movs	r2, #14
   27986:	18ba      	adds	r2, r7, r2
   27988:	8812      	ldrh	r2, [r2, #0]
   2798a:	2140      	movs	r1, #64	; 0x40
   2798c:	430a      	orrs	r2, r1
   2798e:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
   27990:	683b      	ldr	r3, [r7, #0]
   27992:	789b      	ldrb	r3, [r3, #2]
   27994:	2b00      	cmp	r3, #0
   27996:	d007      	beq.n	279a8 <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
   27998:	230e      	movs	r3, #14
   2799a:	18fb      	adds	r3, r7, r3
   2799c:	220e      	movs	r2, #14
   2799e:	18ba      	adds	r2, r7, r2
   279a0:	8812      	ldrh	r2, [r2, #0]
   279a2:	2180      	movs	r1, #128	; 0x80
   279a4:	430a      	orrs	r2, r1
   279a6:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
   279a8:	68bb      	ldr	r3, [r7, #8]
   279aa:	220e      	movs	r2, #14
   279ac:	18ba      	adds	r2, r7, r2
   279ae:	8812      	ldrh	r2, [r2, #0]
   279b0:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
   279b2:	683b      	ldr	r3, [r7, #0]
   279b4:	78db      	ldrb	r3, [r3, #3]
   279b6:	2b00      	cmp	r3, #0
   279b8:	d008      	beq.n	279cc <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
   279ba:	68bb      	ldr	r3, [r7, #8]
   279bc:	885b      	ldrh	r3, [r3, #2]
   279be:	b29b      	uxth	r3, r3
   279c0:	2280      	movs	r2, #128	; 0x80
   279c2:	01d2      	lsls	r2, r2, #7
   279c4:	4313      	orrs	r3, r2
   279c6:	b29a      	uxth	r2, r3
   279c8:	68bb      	ldr	r3, [r7, #8]
   279ca:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   279cc:	230d      	movs	r3, #13
   279ce:	18fb      	adds	r3, r7, r3
   279d0:	2200      	movs	r2, #0
   279d2:	701a      	strb	r2, [r3, #0]
   279d4:	e017      	b.n	27a06 <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
   279d6:	230d      	movs	r3, #13
   279d8:	18fb      	adds	r3, r7, r3
   279da:	781a      	ldrb	r2, [r3, #0]
   279dc:	0013      	movs	r3, r2
   279de:	009b      	lsls	r3, r3, #2
   279e0:	189b      	adds	r3, r3, r2
   279e2:	005b      	lsls	r3, r3, #1
   279e4:	3308      	adds	r3, #8
   279e6:	683a      	ldr	r2, [r7, #0]
   279e8:	18d1      	adds	r1, r2, r3
   279ea:	230d      	movs	r3, #13
   279ec:	18fb      	adds	r3, r7, r3
   279ee:	781a      	ldrb	r2, [r3, #0]
   279f0:	687b      	ldr	r3, [r7, #4]
   279f2:	0018      	movs	r0, r3
   279f4:	4b08      	ldr	r3, [pc, #32]	; (27a18 <_rtc_calendar_set_config+0xc4>)
   279f6:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   279f8:	230d      	movs	r3, #13
   279fa:	18fb      	adds	r3, r7, r3
   279fc:	781a      	ldrb	r2, [r3, #0]
   279fe:	230d      	movs	r3, #13
   27a00:	18fb      	adds	r3, r7, r3
   27a02:	3201      	adds	r2, #1
   27a04:	701a      	strb	r2, [r3, #0]
   27a06:	230d      	movs	r3, #13
   27a08:	18fb      	adds	r3, r7, r3
   27a0a:	781b      	ldrb	r3, [r3, #0]
   27a0c:	2b00      	cmp	r3, #0
   27a0e:	d0e2      	beq.n	279d6 <_rtc_calendar_set_config+0x82>
	}
}
   27a10:	46c0      	nop			; (mov r8, r8)
   27a12:	46bd      	mov	sp, r7
   27a14:	b004      	add	sp, #16
   27a16:	bd80      	pop	{r7, pc}
   27a18:	00027b3d 	.word	0x00027b3d

00027a1c <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
   27a1c:	b580      	push	{r7, lr}
   27a1e:	b086      	sub	sp, #24
   27a20:	af00      	add	r7, sp, #0
   27a22:	60f8      	str	r0, [r7, #12]
   27a24:	60b9      	str	r1, [r7, #8]
   27a26:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   27a28:	68fb      	ldr	r3, [r7, #12]
   27a2a:	68ba      	ldr	r2, [r7, #8]
   27a2c:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
   27a2e:	2120      	movs	r1, #32
   27a30:	2000      	movs	r0, #0
   27a32:	4b18      	ldr	r3, [pc, #96]	; (27a94 <rtc_calendar_init+0x78>)
   27a34:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   27a36:	2314      	movs	r3, #20
   27a38:	18fb      	adds	r3, r7, r3
   27a3a:	0018      	movs	r0, r3
   27a3c:	4b16      	ldr	r3, [pc, #88]	; (27a98 <rtc_calendar_init+0x7c>)
   27a3e:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   27a40:	2314      	movs	r3, #20
   27a42:	18fb      	adds	r3, r7, r3
   27a44:	2202      	movs	r2, #2
   27a46:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   27a48:	2314      	movs	r3, #20
   27a4a:	18fb      	adds	r3, r7, r3
   27a4c:	0019      	movs	r1, r3
   27a4e:	2004      	movs	r0, #4
   27a50:	4b12      	ldr	r3, [pc, #72]	; (27a9c <rtc_calendar_init+0x80>)
   27a52:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   27a54:	2004      	movs	r0, #4
   27a56:	4b12      	ldr	r3, [pc, #72]	; (27aa0 <rtc_calendar_init+0x84>)
   27a58:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
   27a5a:	68fb      	ldr	r3, [r7, #12]
   27a5c:	0018      	movs	r0, r3
   27a5e:	4b11      	ldr	r3, [pc, #68]	; (27aa4 <rtc_calendar_init+0x88>)
   27a60:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
   27a62:	687b      	ldr	r3, [r7, #4]
   27a64:	791a      	ldrb	r2, [r3, #4]
   27a66:	68fb      	ldr	r3, [r7, #12]
   27a68:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
   27a6a:	687b      	ldr	r3, [r7, #4]
   27a6c:	78da      	ldrb	r2, [r3, #3]
   27a6e:	68fb      	ldr	r3, [r7, #12]
   27a70:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
   27a72:	687b      	ldr	r3, [r7, #4]
   27a74:	88da      	ldrh	r2, [r3, #6]
   27a76:	68fb      	ldr	r3, [r7, #12]
   27a78:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
   27a7a:	4b0b      	ldr	r3, [pc, #44]	; (27aa8 <rtc_calendar_init+0x8c>)
   27a7c:	68fa      	ldr	r2, [r7, #12]
   27a7e:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
   27a80:	687a      	ldr	r2, [r7, #4]
   27a82:	68fb      	ldr	r3, [r7, #12]
   27a84:	0011      	movs	r1, r2
   27a86:	0018      	movs	r0, r3
   27a88:	4b08      	ldr	r3, [pc, #32]	; (27aac <rtc_calendar_init+0x90>)
   27a8a:	4798      	blx	r3
}
   27a8c:	46c0      	nop			; (mov r8, r8)
   27a8e:	46bd      	mov	sp, r7
   27a90:	b006      	add	sp, #24
   27a92:	bd80      	pop	{r7, pc}
   27a94:	00027669 	.word	0x00027669
   27a98:	00027651 	.word	0x00027651
   27a9c:	0002aa81 	.word	0x0002aa81
   27aa0:	0002aac5 	.word	0x0002aac5
   27aa4:	000277dd 	.word	0x000277dd
   27aa8:	20005c54 	.word	0x20005c54
   27aac:	00027955 	.word	0x00027955

00027ab0 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
   27ab0:	b580      	push	{r7, lr}
   27ab2:	b084      	sub	sp, #16
   27ab4:	af00      	add	r7, sp, #0
   27ab6:	6078      	str	r0, [r7, #4]
   27ab8:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   27aba:	687b      	ldr	r3, [r7, #4]
   27abc:	681b      	ldr	r3, [r3, #0]
   27abe:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
   27ac0:	687b      	ldr	r3, [r7, #4]
   27ac2:	795b      	ldrb	r3, [r3, #5]
   27ac4:	2201      	movs	r2, #1
   27ac6:	4053      	eors	r3, r2
   27ac8:	b2db      	uxtb	r3, r3
   27aca:	2b00      	cmp	r3, #0
   27acc:	d00a      	beq.n	27ae4 <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
   27ace:	68fb      	ldr	r3, [r7, #12]
   27ad0:	4a16      	ldr	r2, [pc, #88]	; (27b2c <rtc_calendar_get_time+0x7c>)
   27ad2:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
   27ad4:	46c0      	nop			; (mov r8, r8)
   27ad6:	687b      	ldr	r3, [r7, #4]
   27ad8:	0018      	movs	r0, r3
   27ada:	4b15      	ldr	r3, [pc, #84]	; (27b30 <rtc_calendar_get_time+0x80>)
   27adc:	4798      	blx	r3
   27ade:	1e03      	subs	r3, r0, #0
   27ae0:	d1f9      	bne.n	27ad6 <rtc_calendar_get_time+0x26>
   27ae2:	e016      	b.n	27b12 <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
   27ae4:	68fb      	ldr	r3, [r7, #12]
   27ae6:	885b      	ldrh	r3, [r3, #2]
   27ae8:	b29b      	uxth	r3, r3
   27aea:	001a      	movs	r2, r3
   27aec:	2380      	movs	r3, #128	; 0x80
   27aee:	01db      	lsls	r3, r3, #7
   27af0:	4013      	ands	r3, r2
   27af2:	d10e      	bne.n	27b12 <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
   27af4:	68fb      	ldr	r3, [r7, #12]
   27af6:	885b      	ldrh	r3, [r3, #2]
   27af8:	b29b      	uxth	r3, r3
   27afa:	4a0e      	ldr	r2, [pc, #56]	; (27b34 <rtc_calendar_get_time+0x84>)
   27afc:	4313      	orrs	r3, r2
   27afe:	b29a      	uxth	r2, r3
   27b00:	68fb      	ldr	r3, [r7, #12]
   27b02:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
   27b04:	46c0      	nop			; (mov r8, r8)
   27b06:	687b      	ldr	r3, [r7, #4]
   27b08:	0018      	movs	r0, r3
   27b0a:	4b09      	ldr	r3, [pc, #36]	; (27b30 <rtc_calendar_get_time+0x80>)
   27b0c:	4798      	blx	r3
   27b0e:	1e03      	subs	r3, r0, #0
   27b10:	d1f9      	bne.n	27b06 <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
   27b12:	68fb      	ldr	r3, [r7, #12]
   27b14:	691b      	ldr	r3, [r3, #16]
   27b16:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
   27b18:	683a      	ldr	r2, [r7, #0]
   27b1a:	68b9      	ldr	r1, [r7, #8]
   27b1c:	687b      	ldr	r3, [r7, #4]
   27b1e:	0018      	movs	r0, r3
   27b20:	4b05      	ldr	r3, [pc, #20]	; (27b38 <rtc_calendar_get_time+0x88>)
   27b22:	4798      	blx	r3
}
   27b24:	46c0      	nop			; (mov r8, r8)
   27b26:	46bd      	mov	sp, r7
   27b28:	b004      	add	sp, #16
   27b2a:	bd80      	pop	{r7, pc}
   27b2c:	ffff8000 	.word	0xffff8000
   27b30:	00027721 	.word	0x00027721
   27b34:	ffffc000 	.word	0xffffc000
   27b38:	000278b5 	.word	0x000278b5

00027b3c <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
   27b3c:	b580      	push	{r7, lr}
   27b3e:	b086      	sub	sp, #24
   27b40:	af00      	add	r7, sp, #0
   27b42:	60f8      	str	r0, [r7, #12]
   27b44:	60b9      	str	r1, [r7, #8]
   27b46:	1dfb      	adds	r3, r7, #7
   27b48:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   27b4a:	68fb      	ldr	r3, [r7, #12]
   27b4c:	681b      	ldr	r3, [r3, #0]
   27b4e:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
   27b50:	1dfb      	adds	r3, r7, #7
   27b52:	781b      	ldrb	r3, [r3, #0]
   27b54:	2b01      	cmp	r3, #1
   27b56:	d901      	bls.n	27b5c <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
   27b58:	2317      	movs	r3, #23
   27b5a:	e021      	b.n	27ba0 <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
   27b5c:	68ba      	ldr	r2, [r7, #8]
   27b5e:	68fb      	ldr	r3, [r7, #12]
   27b60:	0011      	movs	r1, r2
   27b62:	0018      	movs	r0, r3
   27b64:	4b10      	ldr	r3, [pc, #64]	; (27ba8 <rtc_calendar_set_alarm+0x6c>)
   27b66:	4798      	blx	r3
   27b68:	0003      	movs	r3, r0
   27b6a:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
   27b6c:	46c0      	nop			; (mov r8, r8)
   27b6e:	68fb      	ldr	r3, [r7, #12]
   27b70:	0018      	movs	r0, r3
   27b72:	4b0e      	ldr	r3, [pc, #56]	; (27bac <rtc_calendar_set_alarm+0x70>)
   27b74:	4798      	blx	r3
   27b76:	1e03      	subs	r3, r0, #0
   27b78:	d1f9      	bne.n	27b6e <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
   27b7a:	1dfb      	adds	r3, r7, #7
   27b7c:	781a      	ldrb	r2, [r3, #0]
   27b7e:	697b      	ldr	r3, [r7, #20]
   27b80:	3203      	adds	r2, #3
   27b82:	00d2      	lsls	r2, r2, #3
   27b84:	6939      	ldr	r1, [r7, #16]
   27b86:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
   27b88:	1dfb      	adds	r3, r7, #7
   27b8a:	781b      	ldrb	r3, [r3, #0]
   27b8c:	68ba      	ldr	r2, [r7, #8]
   27b8e:	7a11      	ldrb	r1, [r2, #8]
   27b90:	697a      	ldr	r2, [r7, #20]
   27b92:	3303      	adds	r3, #3
   27b94:	00db      	lsls	r3, r3, #3
   27b96:	18d3      	adds	r3, r2, r3
   27b98:	3304      	adds	r3, #4
   27b9a:	1c0a      	adds	r2, r1, #0
   27b9c:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   27b9e:	2300      	movs	r3, #0
}
   27ba0:	0018      	movs	r0, r3
   27ba2:	46bd      	mov	sp, r7
   27ba4:	b006      	add	sp, #24
   27ba6:	bd80      	pop	{r7, pc}
   27ba8:	0002782d 	.word	0x0002782d
   27bac:	00027721 	.word	0x00027721

00027bb0 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   27bb0:	b580      	push	{r7, lr}
   27bb2:	b086      	sub	sp, #24
   27bb4:	af00      	add	r7, sp, #0
   27bb6:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   27bb8:	4b28      	ldr	r3, [pc, #160]	; (27c5c <_rtc_interrupt_handler+0xac>)
   27bba:	687a      	ldr	r2, [r7, #4]
   27bbc:	0092      	lsls	r2, r2, #2
   27bbe:	58d3      	ldr	r3, [r2, r3]
   27bc0:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   27bc2:	697b      	ldr	r3, [r7, #20]
   27bc4:	681b      	ldr	r3, [r3, #0]
   27bc6:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   27bc8:	230e      	movs	r3, #14
   27bca:	18fb      	adds	r3, r7, r3
   27bcc:	697a      	ldr	r2, [r7, #20]
   27bce:	8a52      	ldrh	r2, [r2, #18]
   27bd0:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   27bd2:	697b      	ldr	r3, [r7, #20]
   27bd4:	8a1b      	ldrh	r3, [r3, #16]
   27bd6:	b29a      	uxth	r2, r3
   27bd8:	230e      	movs	r3, #14
   27bda:	18fb      	adds	r3, r7, r3
   27bdc:	210e      	movs	r1, #14
   27bde:	1879      	adds	r1, r7, r1
   27be0:	8809      	ldrh	r1, [r1, #0]
   27be2:	400a      	ands	r2, r1
   27be4:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   27be6:	693b      	ldr	r3, [r7, #16]
   27be8:	7a1b      	ldrb	r3, [r3, #8]
   27bea:	b2da      	uxtb	r2, r3
   27bec:	230c      	movs	r3, #12
   27bee:	18fb      	adds	r3, r7, r3
   27bf0:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   27bf2:	693b      	ldr	r3, [r7, #16]
   27bf4:	79db      	ldrb	r3, [r3, #7]
   27bf6:	b2db      	uxtb	r3, r3
   27bf8:	b29a      	uxth	r2, r3
   27bfa:	230c      	movs	r3, #12
   27bfc:	18fb      	adds	r3, r7, r3
   27bfe:	210c      	movs	r1, #12
   27c00:	1879      	adds	r1, r7, r1
   27c02:	8809      	ldrh	r1, [r1, #0]
   27c04:	400a      	ands	r2, r1
   27c06:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   27c08:	230c      	movs	r3, #12
   27c0a:	18fb      	adds	r3, r7, r3
   27c0c:	881b      	ldrh	r3, [r3, #0]
   27c0e:	2280      	movs	r2, #128	; 0x80
   27c10:	4013      	ands	r3, r2
   27c12:	d00c      	beq.n	27c2e <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   27c14:	230e      	movs	r3, #14
   27c16:	18fb      	adds	r3, r7, r3
   27c18:	881b      	ldrh	r3, [r3, #0]
   27c1a:	2202      	movs	r2, #2
   27c1c:	4013      	ands	r3, r2
   27c1e:	d002      	beq.n	27c26 <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   27c20:	697b      	ldr	r3, [r7, #20]
   27c22:	68db      	ldr	r3, [r3, #12]
   27c24:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   27c26:	693b      	ldr	r3, [r7, #16]
   27c28:	2280      	movs	r2, #128	; 0x80
   27c2a:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
   27c2c:	e011      	b.n	27c52 <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   27c2e:	230c      	movs	r3, #12
   27c30:	18fb      	adds	r3, r7, r3
   27c32:	881b      	ldrh	r3, [r3, #0]
   27c34:	2201      	movs	r2, #1
   27c36:	4013      	ands	r3, r2
   27c38:	d00b      	beq.n	27c52 <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   27c3a:	230e      	movs	r3, #14
   27c3c:	18fb      	adds	r3, r7, r3
   27c3e:	881b      	ldrh	r3, [r3, #0]
   27c40:	2201      	movs	r2, #1
   27c42:	4013      	ands	r3, r2
   27c44:	d002      	beq.n	27c4c <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   27c46:	697b      	ldr	r3, [r7, #20]
   27c48:	689b      	ldr	r3, [r3, #8]
   27c4a:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   27c4c:	693b      	ldr	r3, [r7, #16]
   27c4e:	2201      	movs	r2, #1
   27c50:	721a      	strb	r2, [r3, #8]
}
   27c52:	46c0      	nop			; (mov r8, r8)
   27c54:	46bd      	mov	sp, r7
   27c56:	b006      	add	sp, #24
   27c58:	bd80      	pop	{r7, pc}
   27c5a:	46c0      	nop			; (mov r8, r8)
   27c5c:	20005c54 	.word	0x20005c54

00027c60 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   27c60:	b580      	push	{r7, lr}
   27c62:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   27c64:	2000      	movs	r0, #0
   27c66:	4b02      	ldr	r3, [pc, #8]	; (27c70 <RTC_Handler+0x10>)
   27c68:	4798      	blx	r3
}
   27c6a:	46c0      	nop			; (mov r8, r8)
   27c6c:	46bd      	mov	sp, r7
   27c6e:	bd80      	pop	{r7, pc}
   27c70:	00027bb1 	.word	0x00027bb1

00027c74 <system_gclk_chan_get_config_defaults>:
{
   27c74:	b580      	push	{r7, lr}
   27c76:	b082      	sub	sp, #8
   27c78:	af00      	add	r7, sp, #0
   27c7a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   27c7c:	687b      	ldr	r3, [r7, #4]
   27c7e:	2200      	movs	r2, #0
   27c80:	701a      	strb	r2, [r3, #0]
}
   27c82:	46c0      	nop			; (mov r8, r8)
   27c84:	46bd      	mov	sp, r7
   27c86:	b002      	add	sp, #8
   27c88:	bd80      	pop	{r7, pc}

00027c8a <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   27c8a:	b5f0      	push	{r4, r5, r6, r7, lr}
   27c8c:	b08d      	sub	sp, #52	; 0x34
   27c8e:	af00      	add	r7, sp, #0
   27c90:	60b8      	str	r0, [r7, #8]
   27c92:	60f9      	str	r1, [r7, #12]
   27c94:	603a      	str	r2, [r7, #0]
   27c96:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   27c98:	2300      	movs	r3, #0
   27c9a:	2400      	movs	r4, #0
   27c9c:	623b      	str	r3, [r7, #32]
   27c9e:	627c      	str	r4, [r7, #36]	; 0x24
   27ca0:	2300      	movs	r3, #0
   27ca2:	2400      	movs	r4, #0
   27ca4:	61bb      	str	r3, [r7, #24]
   27ca6:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   27ca8:	233f      	movs	r3, #63	; 0x3f
   27caa:	62fb      	str	r3, [r7, #44]	; 0x2c
   27cac:	e053      	b.n	27d56 <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   27cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27cb0:	3b20      	subs	r3, #32
   27cb2:	2b00      	cmp	r3, #0
   27cb4:	db04      	blt.n	27cc0 <long_division+0x36>
   27cb6:	2201      	movs	r2, #1
   27cb8:	409a      	lsls	r2, r3
   27cba:	0013      	movs	r3, r2
   27cbc:	617b      	str	r3, [r7, #20]
   27cbe:	e00b      	b.n	27cd8 <long_division+0x4e>
   27cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27cc2:	2220      	movs	r2, #32
   27cc4:	1ad3      	subs	r3, r2, r3
   27cc6:	2201      	movs	r2, #1
   27cc8:	40da      	lsrs	r2, r3
   27cca:	0013      	movs	r3, r2
   27ccc:	2100      	movs	r1, #0
   27cce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   27cd0:	4091      	lsls	r1, r2
   27cd2:	000a      	movs	r2, r1
   27cd4:	4313      	orrs	r3, r2
   27cd6:	617b      	str	r3, [r7, #20]
   27cd8:	2201      	movs	r2, #1
   27cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27cdc:	409a      	lsls	r2, r3
   27cde:	0013      	movs	r3, r2
   27ce0:	613b      	str	r3, [r7, #16]

		r = r << 1;
   27ce2:	69bb      	ldr	r3, [r7, #24]
   27ce4:	69fc      	ldr	r4, [r7, #28]
   27ce6:	18db      	adds	r3, r3, r3
   27ce8:	4164      	adcs	r4, r4
   27cea:	61bb      	str	r3, [r7, #24]
   27cec:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   27cee:	68bb      	ldr	r3, [r7, #8]
   27cf0:	693a      	ldr	r2, [r7, #16]
   27cf2:	401a      	ands	r2, r3
   27cf4:	0015      	movs	r5, r2
   27cf6:	68fb      	ldr	r3, [r7, #12]
   27cf8:	697a      	ldr	r2, [r7, #20]
   27cfa:	401a      	ands	r2, r3
   27cfc:	0016      	movs	r6, r2
   27cfe:	002b      	movs	r3, r5
   27d00:	4333      	orrs	r3, r6
   27d02:	d007      	beq.n	27d14 <long_division+0x8a>
			r |= 0x01;
   27d04:	69bb      	ldr	r3, [r7, #24]
   27d06:	2201      	movs	r2, #1
   27d08:	4313      	orrs	r3, r2
   27d0a:	61bb      	str	r3, [r7, #24]
   27d0c:	69fb      	ldr	r3, [r7, #28]
   27d0e:	2200      	movs	r2, #0
   27d10:	4313      	orrs	r3, r2
   27d12:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   27d14:	687a      	ldr	r2, [r7, #4]
   27d16:	69fb      	ldr	r3, [r7, #28]
   27d18:	429a      	cmp	r2, r3
   27d1a:	d819      	bhi.n	27d50 <long_division+0xc6>
   27d1c:	687a      	ldr	r2, [r7, #4]
   27d1e:	69fb      	ldr	r3, [r7, #28]
   27d20:	429a      	cmp	r2, r3
   27d22:	d103      	bne.n	27d2c <long_division+0xa2>
   27d24:	683a      	ldr	r2, [r7, #0]
   27d26:	69bb      	ldr	r3, [r7, #24]
   27d28:	429a      	cmp	r2, r3
   27d2a:	d811      	bhi.n	27d50 <long_division+0xc6>
			r = r - d;
   27d2c:	69b9      	ldr	r1, [r7, #24]
   27d2e:	69fa      	ldr	r2, [r7, #28]
   27d30:	683b      	ldr	r3, [r7, #0]
   27d32:	687c      	ldr	r4, [r7, #4]
   27d34:	1ac9      	subs	r1, r1, r3
   27d36:	41a2      	sbcs	r2, r4
   27d38:	000b      	movs	r3, r1
   27d3a:	0014      	movs	r4, r2
   27d3c:	61bb      	str	r3, [r7, #24]
   27d3e:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   27d40:	6a3a      	ldr	r2, [r7, #32]
   27d42:	693b      	ldr	r3, [r7, #16]
   27d44:	4313      	orrs	r3, r2
   27d46:	623b      	str	r3, [r7, #32]
   27d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   27d4a:	697b      	ldr	r3, [r7, #20]
   27d4c:	4313      	orrs	r3, r2
   27d4e:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   27d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27d52:	3b01      	subs	r3, #1
   27d54:	62fb      	str	r3, [r7, #44]	; 0x2c
   27d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27d58:	2b00      	cmp	r3, #0
   27d5a:	daa8      	bge.n	27cae <long_division+0x24>
		}
	}

	return q;
   27d5c:	6a3b      	ldr	r3, [r7, #32]
   27d5e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   27d60:	0018      	movs	r0, r3
   27d62:	0021      	movs	r1, r4
   27d64:	46bd      	mov	sp, r7
   27d66:	b00d      	add	sp, #52	; 0x34
   27d68:	bdf0      	pop	{r4, r5, r6, r7, pc}

00027d6a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   27d6a:	b580      	push	{r7, lr}
   27d6c:	b086      	sub	sp, #24
   27d6e:	af00      	add	r7, sp, #0
   27d70:	60f8      	str	r0, [r7, #12]
   27d72:	60b9      	str	r1, [r7, #8]
   27d74:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   27d76:	2316      	movs	r3, #22
   27d78:	18fb      	adds	r3, r7, r3
   27d7a:	2200      	movs	r2, #0
   27d7c:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   27d7e:	68bb      	ldr	r3, [r7, #8]
   27d80:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   27d82:	68bb      	ldr	r3, [r7, #8]
   27d84:	085a      	lsrs	r2, r3, #1
   27d86:	68fb      	ldr	r3, [r7, #12]
   27d88:	429a      	cmp	r2, r3
   27d8a:	d201      	bcs.n	27d90 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   27d8c:	2340      	movs	r3, #64	; 0x40
   27d8e:	e026      	b.n	27dde <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   27d90:	68bb      	ldr	r3, [r7, #8]
   27d92:	085b      	lsrs	r3, r3, #1
   27d94:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   27d96:	e00a      	b.n	27dae <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   27d98:	693a      	ldr	r2, [r7, #16]
   27d9a:	68fb      	ldr	r3, [r7, #12]
   27d9c:	1ad3      	subs	r3, r2, r3
   27d9e:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   27da0:	2316      	movs	r3, #22
   27da2:	18fb      	adds	r3, r7, r3
   27da4:	881a      	ldrh	r2, [r3, #0]
   27da6:	2316      	movs	r3, #22
   27da8:	18fb      	adds	r3, r7, r3
   27daa:	3201      	adds	r2, #1
   27dac:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   27dae:	693a      	ldr	r2, [r7, #16]
   27db0:	68fb      	ldr	r3, [r7, #12]
   27db2:	429a      	cmp	r2, r3
   27db4:	d2f0      	bcs.n	27d98 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   27db6:	2316      	movs	r3, #22
   27db8:	18fb      	adds	r3, r7, r3
   27dba:	2216      	movs	r2, #22
   27dbc:	18ba      	adds	r2, r7, r2
   27dbe:	8812      	ldrh	r2, [r2, #0]
   27dc0:	3a01      	subs	r2, #1
   27dc2:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   27dc4:	2316      	movs	r3, #22
   27dc6:	18fb      	adds	r3, r7, r3
   27dc8:	881b      	ldrh	r3, [r3, #0]
   27dca:	2bff      	cmp	r3, #255	; 0xff
   27dcc:	d901      	bls.n	27dd2 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   27dce:	2340      	movs	r3, #64	; 0x40
   27dd0:	e005      	b.n	27dde <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   27dd2:	687b      	ldr	r3, [r7, #4]
   27dd4:	2216      	movs	r2, #22
   27dd6:	18ba      	adds	r2, r7, r2
   27dd8:	8812      	ldrh	r2, [r2, #0]
   27dda:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   27ddc:	2300      	movs	r3, #0
	}
}
   27dde:	0018      	movs	r0, r3
   27de0:	46bd      	mov	sp, r7
   27de2:	b006      	add	sp, #24
   27de4:	bd80      	pop	{r7, pc}
	...

00027de8 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   27de8:	b5f0      	push	{r4, r5, r6, r7, lr}
   27dea:	b0a1      	sub	sp, #132	; 0x84
   27dec:	af00      	add	r7, sp, #0
   27dee:	64f8      	str	r0, [r7, #76]	; 0x4c
   27df0:	64b9      	str	r1, [r7, #72]	; 0x48
   27df2:	647a      	str	r2, [r7, #68]	; 0x44
   27df4:	2243      	movs	r2, #67	; 0x43
   27df6:	18ba      	adds	r2, r7, r2
   27df8:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   27dfa:	2300      	movs	r3, #0
   27dfc:	2400      	movs	r4, #0
   27dfe:	673b      	str	r3, [r7, #112]	; 0x70
   27e00:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   27e02:	2300      	movs	r3, #0
   27e04:	2400      	movs	r4, #0
   27e06:	66bb      	str	r3, [r7, #104]	; 0x68
   27e08:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   27e0a:	2300      	movs	r3, #0
   27e0c:	2400      	movs	r4, #0
   27e0e:	67bb      	str	r3, [r7, #120]	; 0x78
   27e10:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   27e12:	2300      	movs	r3, #0
   27e14:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   27e16:	2358      	movs	r3, #88	; 0x58
   27e18:	2240      	movs	r2, #64	; 0x40
   27e1a:	4694      	mov	ip, r2
   27e1c:	44bc      	add	ip, r7
   27e1e:	4463      	add	r3, ip
   27e20:	781a      	ldrb	r2, [r3, #0]
   27e22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   27e24:	435a      	muls	r2, r3
   27e26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   27e28:	429a      	cmp	r2, r3
   27e2a:	d901      	bls.n	27e30 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   27e2c:	2340      	movs	r3, #64	; 0x40
   27e2e:	e0b3      	b.n	27f98 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   27e30:	2343      	movs	r3, #67	; 0x43
   27e32:	18fb      	adds	r3, r7, r3
   27e34:	781b      	ldrb	r3, [r3, #0]
   27e36:	2b00      	cmp	r3, #0
   27e38:	d13d      	bne.n	27eb6 <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   27e3a:	2358      	movs	r3, #88	; 0x58
   27e3c:	2240      	movs	r2, #64	; 0x40
   27e3e:	4694      	mov	ip, r2
   27e40:	44bc      	add	ip, r7
   27e42:	4463      	add	r3, ip
   27e44:	781b      	ldrb	r3, [r3, #0]
   27e46:	b2db      	uxtb	r3, r3
   27e48:	613b      	str	r3, [r7, #16]
   27e4a:	2300      	movs	r3, #0
   27e4c:	617b      	str	r3, [r7, #20]
   27e4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   27e50:	60bb      	str	r3, [r7, #8]
   27e52:	2300      	movs	r3, #0
   27e54:	60fb      	str	r3, [r7, #12]
   27e56:	4c52      	ldr	r4, [pc, #328]	; (27fa0 <_sercom_get_async_baud_val+0x1b8>)
   27e58:	68ba      	ldr	r2, [r7, #8]
   27e5a:	68fb      	ldr	r3, [r7, #12]
   27e5c:	6938      	ldr	r0, [r7, #16]
   27e5e:	6979      	ldr	r1, [r7, #20]
   27e60:	47a0      	blx	r4
   27e62:	0003      	movs	r3, r0
   27e64:	000c      	movs	r4, r1
   27e66:	001b      	movs	r3, r3
   27e68:	65fb      	str	r3, [r7, #92]	; 0x5c
   27e6a:	2300      	movs	r3, #0
   27e6c:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   27e6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   27e70:	603b      	str	r3, [r7, #0]
   27e72:	2300      	movs	r3, #0
   27e74:	607b      	str	r3, [r7, #4]
   27e76:	6db8      	ldr	r0, [r7, #88]	; 0x58
   27e78:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   27e7a:	683a      	ldr	r2, [r7, #0]
   27e7c:	687b      	ldr	r3, [r7, #4]
   27e7e:	4c49      	ldr	r4, [pc, #292]	; (27fa4 <_sercom_get_async_baud_val+0x1bc>)
   27e80:	47a0      	blx	r4
   27e82:	0003      	movs	r3, r0
   27e84:	000c      	movs	r4, r1
   27e86:	673b      	str	r3, [r7, #112]	; 0x70
   27e88:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   27e8a:	2100      	movs	r1, #0
   27e8c:	2201      	movs	r2, #1
   27e8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   27e90:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   27e92:	1ac9      	subs	r1, r1, r3
   27e94:	41a2      	sbcs	r2, r4
   27e96:	000b      	movs	r3, r1
   27e98:	0014      	movs	r4, r2
   27e9a:	66bb      	str	r3, [r7, #104]	; 0x68
   27e9c:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   27e9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   27ea0:	0c1b      	lsrs	r3, r3, #16
   27ea2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   27ea4:	0416      	lsls	r6, r2, #16
   27ea6:	431e      	orrs	r6, r3
   27ea8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   27eaa:	041d      	lsls	r5, r3, #16
   27eac:	0033      	movs	r3, r6
   27eae:	67bb      	str	r3, [r7, #120]	; 0x78
   27eb0:	2300      	movs	r3, #0
   27eb2:	67fb      	str	r3, [r7, #124]	; 0x7c
   27eb4:	e06a      	b.n	27f8c <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   27eb6:	2343      	movs	r3, #67	; 0x43
   27eb8:	18fb      	adds	r3, r7, r3
   27eba:	781b      	ldrb	r3, [r3, #0]
   27ebc:	2b01      	cmp	r3, #1
   27ebe:	d165      	bne.n	27f8c <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   27ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   27ec2:	633b      	str	r3, [r7, #48]	; 0x30
   27ec4:	2300      	movs	r3, #0
   27ec6:	637b      	str	r3, [r7, #52]	; 0x34
   27ec8:	2358      	movs	r3, #88	; 0x58
   27eca:	2240      	movs	r2, #64	; 0x40
   27ecc:	4694      	mov	ip, r2
   27ece:	44bc      	add	ip, r7
   27ed0:	4463      	add	r3, ip
   27ed2:	781b      	ldrb	r3, [r3, #0]
   27ed4:	b2db      	uxtb	r3, r3
   27ed6:	62bb      	str	r3, [r7, #40]	; 0x28
   27ed8:	2300      	movs	r3, #0
   27eda:	62fb      	str	r3, [r7, #44]	; 0x2c
   27edc:	4c30      	ldr	r4, [pc, #192]	; (27fa0 <_sercom_get_async_baud_val+0x1b8>)
   27ede:	6aba      	ldr	r2, [r7, #40]	; 0x28
   27ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27ee2:	6b38      	ldr	r0, [r7, #48]	; 0x30
   27ee4:	6b79      	ldr	r1, [r7, #52]	; 0x34
   27ee6:	47a0      	blx	r4
   27ee8:	0003      	movs	r3, r0
   27eea:	000c      	movs	r4, r1
   27eec:	65bb      	str	r3, [r7, #88]	; 0x58
   27eee:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   27ef0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   27ef2:	623b      	str	r3, [r7, #32]
   27ef4:	2300      	movs	r3, #0
   27ef6:	627b      	str	r3, [r7, #36]	; 0x24
   27ef8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   27efa:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   27efc:	001a      	movs	r2, r3
   27efe:	0023      	movs	r3, r4
   27f00:	6a38      	ldr	r0, [r7, #32]
   27f02:	6a79      	ldr	r1, [r7, #36]	; 0x24
   27f04:	4c27      	ldr	r4, [pc, #156]	; (27fa4 <_sercom_get_async_baud_val+0x1bc>)
   27f06:	47a0      	blx	r4
   27f08:	0003      	movs	r3, r0
   27f0a:	000c      	movs	r4, r1
   27f0c:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   27f0e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   27f10:	2380      	movs	r3, #128	; 0x80
   27f12:	019b      	lsls	r3, r3, #6
   27f14:	429a      	cmp	r2, r3
   27f16:	d901      	bls.n	27f1c <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   27f18:	2340      	movs	r3, #64	; 0x40
   27f1a:	e03d      	b.n	27f98 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   27f1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   27f1e:	61bb      	str	r3, [r7, #24]
   27f20:	2300      	movs	r3, #0
   27f22:	61fb      	str	r3, [r7, #28]
   27f24:	69b9      	ldr	r1, [r7, #24]
   27f26:	69fa      	ldr	r2, [r7, #28]
   27f28:	000b      	movs	r3, r1
   27f2a:	0f5b      	lsrs	r3, r3, #29
   27f2c:	0010      	movs	r0, r2
   27f2e:	00c0      	lsls	r0, r0, #3
   27f30:	63f8      	str	r0, [r7, #60]	; 0x3c
   27f32:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   27f34:	4318      	orrs	r0, r3
   27f36:	63f8      	str	r0, [r7, #60]	; 0x3c
   27f38:	000b      	movs	r3, r1
   27f3a:	00db      	lsls	r3, r3, #3
   27f3c:	63bb      	str	r3, [r7, #56]	; 0x38
   27f3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   27f40:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   27f42:	001a      	movs	r2, r3
   27f44:	0023      	movs	r3, r4
   27f46:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   27f48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   27f4a:	4c16      	ldr	r4, [pc, #88]	; (27fa4 <_sercom_get_async_baud_val+0x1bc>)
   27f4c:	47a0      	blx	r4
   27f4e:	0003      	movs	r3, r0
   27f50:	000c      	movs	r4, r1
   27f52:	65bb      	str	r3, [r7, #88]	; 0x58
   27f54:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   27f56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   27f58:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   27f5a:	b2d9      	uxtb	r1, r3
   27f5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   27f5e:	b2db      	uxtb	r3, r3
   27f60:	00db      	lsls	r3, r3, #3
   27f62:	b2da      	uxtb	r2, r3
   27f64:	2317      	movs	r3, #23
   27f66:	2040      	movs	r0, #64	; 0x40
   27f68:	4684      	mov	ip, r0
   27f6a:	44bc      	add	ip, r7
   27f6c:	4463      	add	r3, ip
   27f6e:	1a8a      	subs	r2, r1, r2
   27f70:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   27f72:	2317      	movs	r3, #23
   27f74:	2240      	movs	r2, #64	; 0x40
   27f76:	4694      	mov	ip, r2
   27f78:	44bc      	add	ip, r7
   27f7a:	4463      	add	r3, ip
   27f7c:	781b      	ldrb	r3, [r3, #0]
   27f7e:	035b      	lsls	r3, r3, #13
   27f80:	001a      	movs	r2, r3
   27f82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   27f84:	4313      	orrs	r3, r2
   27f86:	67bb      	str	r3, [r7, #120]	; 0x78
   27f88:	2300      	movs	r3, #0
   27f8a:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   27f8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   27f8e:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   27f90:	b29a      	uxth	r2, r3
   27f92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   27f94:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   27f96:	2300      	movs	r3, #0
}
   27f98:	0018      	movs	r0, r3
   27f9a:	46bd      	mov	sp, r7
   27f9c:	b021      	add	sp, #132	; 0x84
   27f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27fa0:	00033901 	.word	0x00033901
   27fa4:	00027c8b 	.word	0x00027c8b

00027fa8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   27fa8:	b580      	push	{r7, lr}
   27faa:	b084      	sub	sp, #16
   27fac:	af00      	add	r7, sp, #0
   27fae:	0002      	movs	r2, r0
   27fb0:	1dfb      	adds	r3, r7, #7
   27fb2:	701a      	strb	r2, [r3, #0]
   27fb4:	1dbb      	adds	r3, r7, #6
   27fb6:	1c0a      	adds	r2, r1, #0
   27fb8:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   27fba:	4b1a      	ldr	r3, [pc, #104]	; (28024 <sercom_set_gclk_generator+0x7c>)
   27fbc:	781b      	ldrb	r3, [r3, #0]
   27fbe:	2201      	movs	r2, #1
   27fc0:	4053      	eors	r3, r2
   27fc2:	b2db      	uxtb	r3, r3
   27fc4:	2b00      	cmp	r3, #0
   27fc6:	d103      	bne.n	27fd0 <sercom_set_gclk_generator+0x28>
   27fc8:	1dbb      	adds	r3, r7, #6
   27fca:	781b      	ldrb	r3, [r3, #0]
   27fcc:	2b00      	cmp	r3, #0
   27fce:	d01b      	beq.n	28008 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   27fd0:	230c      	movs	r3, #12
   27fd2:	18fb      	adds	r3, r7, r3
   27fd4:	0018      	movs	r0, r3
   27fd6:	4b14      	ldr	r3, [pc, #80]	; (28028 <sercom_set_gclk_generator+0x80>)
   27fd8:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   27fda:	230c      	movs	r3, #12
   27fdc:	18fb      	adds	r3, r7, r3
   27fde:	1dfa      	adds	r2, r7, #7
   27fe0:	7812      	ldrb	r2, [r2, #0]
   27fe2:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   27fe4:	230c      	movs	r3, #12
   27fe6:	18fb      	adds	r3, r7, r3
   27fe8:	0019      	movs	r1, r3
   27fea:	2013      	movs	r0, #19
   27fec:	4b0f      	ldr	r3, [pc, #60]	; (2802c <sercom_set_gclk_generator+0x84>)
   27fee:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   27ff0:	2013      	movs	r0, #19
   27ff2:	4b0f      	ldr	r3, [pc, #60]	; (28030 <sercom_set_gclk_generator+0x88>)
   27ff4:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   27ff6:	4b0b      	ldr	r3, [pc, #44]	; (28024 <sercom_set_gclk_generator+0x7c>)
   27ff8:	1dfa      	adds	r2, r7, #7
   27ffa:	7812      	ldrb	r2, [r2, #0]
   27ffc:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   27ffe:	4b09      	ldr	r3, [pc, #36]	; (28024 <sercom_set_gclk_generator+0x7c>)
   28000:	2201      	movs	r2, #1
   28002:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   28004:	2300      	movs	r3, #0
   28006:	e008      	b.n	2801a <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   28008:	4b06      	ldr	r3, [pc, #24]	; (28024 <sercom_set_gclk_generator+0x7c>)
   2800a:	785b      	ldrb	r3, [r3, #1]
   2800c:	1dfa      	adds	r2, r7, #7
   2800e:	7812      	ldrb	r2, [r2, #0]
   28010:	429a      	cmp	r2, r3
   28012:	d101      	bne.n	28018 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   28014:	2300      	movs	r3, #0
   28016:	e000      	b.n	2801a <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   28018:	231d      	movs	r3, #29
}
   2801a:	0018      	movs	r0, r3
   2801c:	46bd      	mov	sp, r7
   2801e:	b004      	add	sp, #16
   28020:	bd80      	pop	{r7, pc}
   28022:	46c0      	nop			; (mov r8, r8)
   28024:	200042c0 	.word	0x200042c0
   28028:	00027c75 	.word	0x00027c75
   2802c:	0002aa81 	.word	0x0002aa81
   28030:	0002aac5 	.word	0x0002aac5

00028034 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   28034:	b580      	push	{r7, lr}
   28036:	b082      	sub	sp, #8
   28038:	af00      	add	r7, sp, #0
   2803a:	6078      	str	r0, [r7, #4]
   2803c:	000a      	movs	r2, r1
   2803e:	1cfb      	adds	r3, r7, #3
   28040:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   28042:	687b      	ldr	r3, [r7, #4]
   28044:	4a4d      	ldr	r2, [pc, #308]	; (2817c <_sercom_get_default_pad+0x148>)
   28046:	4293      	cmp	r3, r2
   28048:	d03f      	beq.n	280ca <_sercom_get_default_pad+0x96>
   2804a:	4a4c      	ldr	r2, [pc, #304]	; (2817c <_sercom_get_default_pad+0x148>)
   2804c:	4293      	cmp	r3, r2
   2804e:	d806      	bhi.n	2805e <_sercom_get_default_pad+0x2a>
   28050:	4a4b      	ldr	r2, [pc, #300]	; (28180 <_sercom_get_default_pad+0x14c>)
   28052:	4293      	cmp	r3, r2
   28054:	d00f      	beq.n	28076 <_sercom_get_default_pad+0x42>
   28056:	4a4b      	ldr	r2, [pc, #300]	; (28184 <_sercom_get_default_pad+0x150>)
   28058:	4293      	cmp	r3, r2
   2805a:	d021      	beq.n	280a0 <_sercom_get_default_pad+0x6c>
   2805c:	e089      	b.n	28172 <_sercom_get_default_pad+0x13e>
   2805e:	4a4a      	ldr	r2, [pc, #296]	; (28188 <_sercom_get_default_pad+0x154>)
   28060:	4293      	cmp	r3, r2
   28062:	d100      	bne.n	28066 <_sercom_get_default_pad+0x32>
   28064:	e05b      	b.n	2811e <_sercom_get_default_pad+0xea>
   28066:	4a49      	ldr	r2, [pc, #292]	; (2818c <_sercom_get_default_pad+0x158>)
   28068:	4293      	cmp	r3, r2
   2806a:	d100      	bne.n	2806e <_sercom_get_default_pad+0x3a>
   2806c:	e06c      	b.n	28148 <_sercom_get_default_pad+0x114>
   2806e:	4a48      	ldr	r2, [pc, #288]	; (28190 <_sercom_get_default_pad+0x15c>)
   28070:	4293      	cmp	r3, r2
   28072:	d03f      	beq.n	280f4 <_sercom_get_default_pad+0xc0>
   28074:	e07d      	b.n	28172 <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   28076:	1cfb      	adds	r3, r7, #3
   28078:	781b      	ldrb	r3, [r3, #0]
   2807a:	2b01      	cmp	r3, #1
   2807c:	d00a      	beq.n	28094 <_sercom_get_default_pad+0x60>
   2807e:	dc02      	bgt.n	28086 <_sercom_get_default_pad+0x52>
   28080:	2b00      	cmp	r3, #0
   28082:	d005      	beq.n	28090 <_sercom_get_default_pad+0x5c>
   28084:	e075      	b.n	28172 <_sercom_get_default_pad+0x13e>
   28086:	2b02      	cmp	r3, #2
   28088:	d006      	beq.n	28098 <_sercom_get_default_pad+0x64>
   2808a:	2b03      	cmp	r3, #3
   2808c:	d006      	beq.n	2809c <_sercom_get_default_pad+0x68>
   2808e:	e070      	b.n	28172 <_sercom_get_default_pad+0x13e>
   28090:	4b40      	ldr	r3, [pc, #256]	; (28194 <_sercom_get_default_pad+0x160>)
   28092:	e06f      	b.n	28174 <_sercom_get_default_pad+0x140>
   28094:	4b40      	ldr	r3, [pc, #256]	; (28198 <_sercom_get_default_pad+0x164>)
   28096:	e06d      	b.n	28174 <_sercom_get_default_pad+0x140>
   28098:	4b40      	ldr	r3, [pc, #256]	; (2819c <_sercom_get_default_pad+0x168>)
   2809a:	e06b      	b.n	28174 <_sercom_get_default_pad+0x140>
   2809c:	4b40      	ldr	r3, [pc, #256]	; (281a0 <_sercom_get_default_pad+0x16c>)
   2809e:	e069      	b.n	28174 <_sercom_get_default_pad+0x140>
   280a0:	1cfb      	adds	r3, r7, #3
   280a2:	781b      	ldrb	r3, [r3, #0]
   280a4:	2b01      	cmp	r3, #1
   280a6:	d00a      	beq.n	280be <_sercom_get_default_pad+0x8a>
   280a8:	dc02      	bgt.n	280b0 <_sercom_get_default_pad+0x7c>
   280aa:	2b00      	cmp	r3, #0
   280ac:	d005      	beq.n	280ba <_sercom_get_default_pad+0x86>
   280ae:	e060      	b.n	28172 <_sercom_get_default_pad+0x13e>
   280b0:	2b02      	cmp	r3, #2
   280b2:	d006      	beq.n	280c2 <_sercom_get_default_pad+0x8e>
   280b4:	2b03      	cmp	r3, #3
   280b6:	d006      	beq.n	280c6 <_sercom_get_default_pad+0x92>
   280b8:	e05b      	b.n	28172 <_sercom_get_default_pad+0x13e>
   280ba:	2303      	movs	r3, #3
   280bc:	e05a      	b.n	28174 <_sercom_get_default_pad+0x140>
   280be:	4b39      	ldr	r3, [pc, #228]	; (281a4 <_sercom_get_default_pad+0x170>)
   280c0:	e058      	b.n	28174 <_sercom_get_default_pad+0x140>
   280c2:	4b39      	ldr	r3, [pc, #228]	; (281a8 <_sercom_get_default_pad+0x174>)
   280c4:	e056      	b.n	28174 <_sercom_get_default_pad+0x140>
   280c6:	4b39      	ldr	r3, [pc, #228]	; (281ac <_sercom_get_default_pad+0x178>)
   280c8:	e054      	b.n	28174 <_sercom_get_default_pad+0x140>
   280ca:	1cfb      	adds	r3, r7, #3
   280cc:	781b      	ldrb	r3, [r3, #0]
   280ce:	2b01      	cmp	r3, #1
   280d0:	d00a      	beq.n	280e8 <_sercom_get_default_pad+0xb4>
   280d2:	dc02      	bgt.n	280da <_sercom_get_default_pad+0xa6>
   280d4:	2b00      	cmp	r3, #0
   280d6:	d005      	beq.n	280e4 <_sercom_get_default_pad+0xb0>
   280d8:	e04b      	b.n	28172 <_sercom_get_default_pad+0x13e>
   280da:	2b02      	cmp	r3, #2
   280dc:	d006      	beq.n	280ec <_sercom_get_default_pad+0xb8>
   280de:	2b03      	cmp	r3, #3
   280e0:	d006      	beq.n	280f0 <_sercom_get_default_pad+0xbc>
   280e2:	e046      	b.n	28172 <_sercom_get_default_pad+0x13e>
   280e4:	4b32      	ldr	r3, [pc, #200]	; (281b0 <_sercom_get_default_pad+0x17c>)
   280e6:	e045      	b.n	28174 <_sercom_get_default_pad+0x140>
   280e8:	4b32      	ldr	r3, [pc, #200]	; (281b4 <_sercom_get_default_pad+0x180>)
   280ea:	e043      	b.n	28174 <_sercom_get_default_pad+0x140>
   280ec:	4b32      	ldr	r3, [pc, #200]	; (281b8 <_sercom_get_default_pad+0x184>)
   280ee:	e041      	b.n	28174 <_sercom_get_default_pad+0x140>
   280f0:	4b32      	ldr	r3, [pc, #200]	; (281bc <_sercom_get_default_pad+0x188>)
   280f2:	e03f      	b.n	28174 <_sercom_get_default_pad+0x140>
   280f4:	1cfb      	adds	r3, r7, #3
   280f6:	781b      	ldrb	r3, [r3, #0]
   280f8:	2b01      	cmp	r3, #1
   280fa:	d00a      	beq.n	28112 <_sercom_get_default_pad+0xde>
   280fc:	dc02      	bgt.n	28104 <_sercom_get_default_pad+0xd0>
   280fe:	2b00      	cmp	r3, #0
   28100:	d005      	beq.n	2810e <_sercom_get_default_pad+0xda>
   28102:	e036      	b.n	28172 <_sercom_get_default_pad+0x13e>
   28104:	2b02      	cmp	r3, #2
   28106:	d006      	beq.n	28116 <_sercom_get_default_pad+0xe2>
   28108:	2b03      	cmp	r3, #3
   2810a:	d006      	beq.n	2811a <_sercom_get_default_pad+0xe6>
   2810c:	e031      	b.n	28172 <_sercom_get_default_pad+0x13e>
   2810e:	4b2c      	ldr	r3, [pc, #176]	; (281c0 <_sercom_get_default_pad+0x18c>)
   28110:	e030      	b.n	28174 <_sercom_get_default_pad+0x140>
   28112:	4b2c      	ldr	r3, [pc, #176]	; (281c4 <_sercom_get_default_pad+0x190>)
   28114:	e02e      	b.n	28174 <_sercom_get_default_pad+0x140>
   28116:	4b2c      	ldr	r3, [pc, #176]	; (281c8 <_sercom_get_default_pad+0x194>)
   28118:	e02c      	b.n	28174 <_sercom_get_default_pad+0x140>
   2811a:	4b2c      	ldr	r3, [pc, #176]	; (281cc <_sercom_get_default_pad+0x198>)
   2811c:	e02a      	b.n	28174 <_sercom_get_default_pad+0x140>
   2811e:	1cfb      	adds	r3, r7, #3
   28120:	781b      	ldrb	r3, [r3, #0]
   28122:	2b01      	cmp	r3, #1
   28124:	d00a      	beq.n	2813c <_sercom_get_default_pad+0x108>
   28126:	dc02      	bgt.n	2812e <_sercom_get_default_pad+0xfa>
   28128:	2b00      	cmp	r3, #0
   2812a:	d005      	beq.n	28138 <_sercom_get_default_pad+0x104>
   2812c:	e021      	b.n	28172 <_sercom_get_default_pad+0x13e>
   2812e:	2b02      	cmp	r3, #2
   28130:	d006      	beq.n	28140 <_sercom_get_default_pad+0x10c>
   28132:	2b03      	cmp	r3, #3
   28134:	d006      	beq.n	28144 <_sercom_get_default_pad+0x110>
   28136:	e01c      	b.n	28172 <_sercom_get_default_pad+0x13e>
   28138:	4b25      	ldr	r3, [pc, #148]	; (281d0 <_sercom_get_default_pad+0x19c>)
   2813a:	e01b      	b.n	28174 <_sercom_get_default_pad+0x140>
   2813c:	4b25      	ldr	r3, [pc, #148]	; (281d4 <_sercom_get_default_pad+0x1a0>)
   2813e:	e019      	b.n	28174 <_sercom_get_default_pad+0x140>
   28140:	4b25      	ldr	r3, [pc, #148]	; (281d8 <_sercom_get_default_pad+0x1a4>)
   28142:	e017      	b.n	28174 <_sercom_get_default_pad+0x140>
   28144:	4b25      	ldr	r3, [pc, #148]	; (281dc <_sercom_get_default_pad+0x1a8>)
   28146:	e015      	b.n	28174 <_sercom_get_default_pad+0x140>
   28148:	1cfb      	adds	r3, r7, #3
   2814a:	781b      	ldrb	r3, [r3, #0]
   2814c:	2b01      	cmp	r3, #1
   2814e:	d00a      	beq.n	28166 <_sercom_get_default_pad+0x132>
   28150:	dc02      	bgt.n	28158 <_sercom_get_default_pad+0x124>
   28152:	2b00      	cmp	r3, #0
   28154:	d005      	beq.n	28162 <_sercom_get_default_pad+0x12e>
   28156:	e00c      	b.n	28172 <_sercom_get_default_pad+0x13e>
   28158:	2b02      	cmp	r3, #2
   2815a:	d006      	beq.n	2816a <_sercom_get_default_pad+0x136>
   2815c:	2b03      	cmp	r3, #3
   2815e:	d006      	beq.n	2816e <_sercom_get_default_pad+0x13a>
   28160:	e007      	b.n	28172 <_sercom_get_default_pad+0x13e>
   28162:	4b1f      	ldr	r3, [pc, #124]	; (281e0 <_sercom_get_default_pad+0x1ac>)
   28164:	e006      	b.n	28174 <_sercom_get_default_pad+0x140>
   28166:	4b1f      	ldr	r3, [pc, #124]	; (281e4 <_sercom_get_default_pad+0x1b0>)
   28168:	e004      	b.n	28174 <_sercom_get_default_pad+0x140>
   2816a:	4b1f      	ldr	r3, [pc, #124]	; (281e8 <_sercom_get_default_pad+0x1b4>)
   2816c:	e002      	b.n	28174 <_sercom_get_default_pad+0x140>
   2816e:	4b1f      	ldr	r3, [pc, #124]	; (281ec <_sercom_get_default_pad+0x1b8>)
   28170:	e000      	b.n	28174 <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   28172:	2300      	movs	r3, #0
}
   28174:	0018      	movs	r0, r3
   28176:	46bd      	mov	sp, r7
   28178:	b002      	add	sp, #8
   2817a:	bd80      	pop	{r7, pc}
   2817c:	42001000 	.word	0x42001000
   28180:	42000800 	.word	0x42000800
   28184:	42000c00 	.word	0x42000c00
   28188:	42001800 	.word	0x42001800
   2818c:	42001c00 	.word	0x42001c00
   28190:	42001400 	.word	0x42001400
   28194:	00040003 	.word	0x00040003
   28198:	00050003 	.word	0x00050003
   2819c:	00060003 	.word	0x00060003
   281a0:	00070003 	.word	0x00070003
   281a4:	00010003 	.word	0x00010003
   281a8:	001e0003 	.word	0x001e0003
   281ac:	001f0003 	.word	0x001f0003
   281b0:	00080003 	.word	0x00080003
   281b4:	00090003 	.word	0x00090003
   281b8:	000a0003 	.word	0x000a0003
   281bc:	000b0003 	.word	0x000b0003
   281c0:	00100003 	.word	0x00100003
   281c4:	00110003 	.word	0x00110003
   281c8:	00120003 	.word	0x00120003
   281cc:	00130003 	.word	0x00130003
   281d0:	000c0003 	.word	0x000c0003
   281d4:	000d0003 	.word	0x000d0003
   281d8:	000e0003 	.word	0x000e0003
   281dc:	000f0003 	.word	0x000f0003
   281e0:	00160003 	.word	0x00160003
   281e4:	00170003 	.word	0x00170003
   281e8:	00180003 	.word	0x00180003
   281ec:	00190003 	.word	0x00190003

000281f0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   281f0:	b590      	push	{r4, r7, lr}
   281f2:	b08b      	sub	sp, #44	; 0x2c
   281f4:	af00      	add	r7, sp, #0
   281f6:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   281f8:	230c      	movs	r3, #12
   281fa:	18fb      	adds	r3, r7, r3
   281fc:	4a0f      	ldr	r2, [pc, #60]	; (2823c <_sercom_get_sercom_inst_index+0x4c>)
   281fe:	ca13      	ldmia	r2!, {r0, r1, r4}
   28200:	c313      	stmia	r3!, {r0, r1, r4}
   28202:	ca13      	ldmia	r2!, {r0, r1, r4}
   28204:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   28206:	2300      	movs	r3, #0
   28208:	627b      	str	r3, [r7, #36]	; 0x24
   2820a:	e00e      	b.n	2822a <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   2820c:	230c      	movs	r3, #12
   2820e:	18fb      	adds	r3, r7, r3
   28210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   28212:	0092      	lsls	r2, r2, #2
   28214:	58d3      	ldr	r3, [r2, r3]
   28216:	001a      	movs	r2, r3
   28218:	687b      	ldr	r3, [r7, #4]
   2821a:	429a      	cmp	r2, r3
   2821c:	d102      	bne.n	28224 <_sercom_get_sercom_inst_index+0x34>
			return i;
   2821e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   28220:	b2db      	uxtb	r3, r3
   28222:	e006      	b.n	28232 <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   28224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   28226:	3301      	adds	r3, #1
   28228:	627b      	str	r3, [r7, #36]	; 0x24
   2822a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2822c:	2b05      	cmp	r3, #5
   2822e:	d9ed      	bls.n	2820c <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   28230:	2300      	movs	r3, #0
}
   28232:	0018      	movs	r0, r3
   28234:	46bd      	mov	sp, r7
   28236:	b00b      	add	sp, #44	; 0x2c
   28238:	bd90      	pop	{r4, r7, pc}
   2823a:	46c0      	nop			; (mov r8, r8)
   2823c:	0003a284 	.word	0x0003a284

00028240 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   28240:	b580      	push	{r7, lr}
   28242:	b082      	sub	sp, #8
   28244:	af00      	add	r7, sp, #0
   28246:	0002      	movs	r2, r0
   28248:	1dfb      	adds	r3, r7, #7
   2824a:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   2824c:	46c0      	nop			; (mov r8, r8)
   2824e:	46bd      	mov	sp, r7
   28250:	b002      	add	sp, #8
   28252:	bd80      	pop	{r7, pc}

00028254 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   28254:	b580      	push	{r7, lr}
   28256:	b084      	sub	sp, #16
   28258:	af00      	add	r7, sp, #0
   2825a:	0002      	movs	r2, r0
   2825c:	6039      	str	r1, [r7, #0]
   2825e:	1dfb      	adds	r3, r7, #7
   28260:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   28262:	4b13      	ldr	r3, [pc, #76]	; (282b0 <_sercom_set_handler+0x5c>)
   28264:	781b      	ldrb	r3, [r3, #0]
   28266:	2201      	movs	r2, #1
   28268:	4053      	eors	r3, r2
   2826a:	b2db      	uxtb	r3, r3
   2826c:	2b00      	cmp	r3, #0
   2826e:	d015      	beq.n	2829c <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   28270:	2300      	movs	r3, #0
   28272:	60fb      	str	r3, [r7, #12]
   28274:	e00c      	b.n	28290 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   28276:	4b0f      	ldr	r3, [pc, #60]	; (282b4 <_sercom_set_handler+0x60>)
   28278:	68fa      	ldr	r2, [r7, #12]
   2827a:	0092      	lsls	r2, r2, #2
   2827c:	490e      	ldr	r1, [pc, #56]	; (282b8 <_sercom_set_handler+0x64>)
   2827e:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   28280:	4b0e      	ldr	r3, [pc, #56]	; (282bc <_sercom_set_handler+0x68>)
   28282:	68fa      	ldr	r2, [r7, #12]
   28284:	0092      	lsls	r2, r2, #2
   28286:	2100      	movs	r1, #0
   28288:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   2828a:	68fb      	ldr	r3, [r7, #12]
   2828c:	3301      	adds	r3, #1
   2828e:	60fb      	str	r3, [r7, #12]
   28290:	68fb      	ldr	r3, [r7, #12]
   28292:	2b05      	cmp	r3, #5
   28294:	d9ef      	bls.n	28276 <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   28296:	4b06      	ldr	r3, [pc, #24]	; (282b0 <_sercom_set_handler+0x5c>)
   28298:	2201      	movs	r2, #1
   2829a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   2829c:	1dfb      	adds	r3, r7, #7
   2829e:	781a      	ldrb	r2, [r3, #0]
   282a0:	4b04      	ldr	r3, [pc, #16]	; (282b4 <_sercom_set_handler+0x60>)
   282a2:	0092      	lsls	r2, r2, #2
   282a4:	6839      	ldr	r1, [r7, #0]
   282a6:	50d1      	str	r1, [r2, r3]
}
   282a8:	46c0      	nop			; (mov r8, r8)
   282aa:	46bd      	mov	sp, r7
   282ac:	b004      	add	sp, #16
   282ae:	bd80      	pop	{r7, pc}
   282b0:	200042c2 	.word	0x200042c2
   282b4:	200042c4 	.word	0x200042c4
   282b8:	00028241 	.word	0x00028241
   282bc:	20005c58 	.word	0x20005c58

000282c0 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   282c0:	b590      	push	{r4, r7, lr}
   282c2:	b085      	sub	sp, #20
   282c4:	af00      	add	r7, sp, #0
   282c6:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   282c8:	2308      	movs	r3, #8
   282ca:	18fb      	adds	r3, r7, r3
   282cc:	4a0b      	ldr	r2, [pc, #44]	; (282fc <_sercom_get_interrupt_vector+0x3c>)
   282ce:	6811      	ldr	r1, [r2, #0]
   282d0:	6019      	str	r1, [r3, #0]
   282d2:	8892      	ldrh	r2, [r2, #4]
   282d4:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   282d6:	230f      	movs	r3, #15
   282d8:	18fc      	adds	r4, r7, r3
   282da:	687b      	ldr	r3, [r7, #4]
   282dc:	0018      	movs	r0, r3
   282de:	4b08      	ldr	r3, [pc, #32]	; (28300 <_sercom_get_interrupt_vector+0x40>)
   282e0:	4798      	blx	r3
   282e2:	0003      	movs	r3, r0
   282e4:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   282e6:	230f      	movs	r3, #15
   282e8:	18fb      	adds	r3, r7, r3
   282ea:	781b      	ldrb	r3, [r3, #0]
   282ec:	2208      	movs	r2, #8
   282ee:	18ba      	adds	r2, r7, r2
   282f0:	5cd3      	ldrb	r3, [r2, r3]
   282f2:	b25b      	sxtb	r3, r3
}
   282f4:	0018      	movs	r0, r3
   282f6:	46bd      	mov	sp, r7
   282f8:	b005      	add	sp, #20
   282fa:	bd90      	pop	{r4, r7, pc}
   282fc:	0003a29c 	.word	0x0003a29c
   28300:	000281f1 	.word	0x000281f1

00028304 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   28304:	b580      	push	{r7, lr}
   28306:	af00      	add	r7, sp, #0
   28308:	4b03      	ldr	r3, [pc, #12]	; (28318 <SERCOM0_Handler+0x14>)
   2830a:	681b      	ldr	r3, [r3, #0]
   2830c:	2000      	movs	r0, #0
   2830e:	4798      	blx	r3
   28310:	46c0      	nop			; (mov r8, r8)
   28312:	46bd      	mov	sp, r7
   28314:	bd80      	pop	{r7, pc}
   28316:	46c0      	nop			; (mov r8, r8)
   28318:	200042c4 	.word	0x200042c4

0002831c <SERCOM1_Handler>:
   2831c:	b580      	push	{r7, lr}
   2831e:	af00      	add	r7, sp, #0
   28320:	4b03      	ldr	r3, [pc, #12]	; (28330 <SERCOM1_Handler+0x14>)
   28322:	685b      	ldr	r3, [r3, #4]
   28324:	2001      	movs	r0, #1
   28326:	4798      	blx	r3
   28328:	46c0      	nop			; (mov r8, r8)
   2832a:	46bd      	mov	sp, r7
   2832c:	bd80      	pop	{r7, pc}
   2832e:	46c0      	nop			; (mov r8, r8)
   28330:	200042c4 	.word	0x200042c4

00028334 <SERCOM2_Handler>:
   28334:	b580      	push	{r7, lr}
   28336:	af00      	add	r7, sp, #0
   28338:	4b03      	ldr	r3, [pc, #12]	; (28348 <SERCOM2_Handler+0x14>)
   2833a:	689b      	ldr	r3, [r3, #8]
   2833c:	2002      	movs	r0, #2
   2833e:	4798      	blx	r3
   28340:	46c0      	nop			; (mov r8, r8)
   28342:	46bd      	mov	sp, r7
   28344:	bd80      	pop	{r7, pc}
   28346:	46c0      	nop			; (mov r8, r8)
   28348:	200042c4 	.word	0x200042c4

0002834c <SERCOM3_Handler>:
   2834c:	b580      	push	{r7, lr}
   2834e:	af00      	add	r7, sp, #0
   28350:	4b03      	ldr	r3, [pc, #12]	; (28360 <SERCOM3_Handler+0x14>)
   28352:	68db      	ldr	r3, [r3, #12]
   28354:	2003      	movs	r0, #3
   28356:	4798      	blx	r3
   28358:	46c0      	nop			; (mov r8, r8)
   2835a:	46bd      	mov	sp, r7
   2835c:	bd80      	pop	{r7, pc}
   2835e:	46c0      	nop			; (mov r8, r8)
   28360:	200042c4 	.word	0x200042c4

00028364 <SERCOM4_Handler>:
   28364:	b580      	push	{r7, lr}
   28366:	af00      	add	r7, sp, #0
   28368:	4b03      	ldr	r3, [pc, #12]	; (28378 <SERCOM4_Handler+0x14>)
   2836a:	691b      	ldr	r3, [r3, #16]
   2836c:	2004      	movs	r0, #4
   2836e:	4798      	blx	r3
   28370:	46c0      	nop			; (mov r8, r8)
   28372:	46bd      	mov	sp, r7
   28374:	bd80      	pop	{r7, pc}
   28376:	46c0      	nop			; (mov r8, r8)
   28378:	200042c4 	.word	0x200042c4

0002837c <SERCOM5_Handler>:
   2837c:	b580      	push	{r7, lr}
   2837e:	af00      	add	r7, sp, #0
   28380:	4b03      	ldr	r3, [pc, #12]	; (28390 <SERCOM5_Handler+0x14>)
   28382:	695b      	ldr	r3, [r3, #20]
   28384:	2005      	movs	r0, #5
   28386:	4798      	blx	r3
   28388:	46c0      	nop			; (mov r8, r8)
   2838a:	46bd      	mov	sp, r7
   2838c:	bd80      	pop	{r7, pc}
   2838e:	46c0      	nop			; (mov r8, r8)
   28390:	200042c4 	.word	0x200042c4

00028394 <system_pinmux_get_config_defaults>:
{
   28394:	b580      	push	{r7, lr}
   28396:	b082      	sub	sp, #8
   28398:	af00      	add	r7, sp, #0
   2839a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   2839c:	687b      	ldr	r3, [r7, #4]
   2839e:	2280      	movs	r2, #128	; 0x80
   283a0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   283a2:	687b      	ldr	r3, [r7, #4]
   283a4:	2200      	movs	r2, #0
   283a6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   283a8:	687b      	ldr	r3, [r7, #4]
   283aa:	2201      	movs	r2, #1
   283ac:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   283ae:	687b      	ldr	r3, [r7, #4]
   283b0:	2200      	movs	r2, #0
   283b2:	70da      	strb	r2, [r3, #3]
}
   283b4:	46c0      	nop			; (mov r8, r8)
   283b6:	46bd      	mov	sp, r7
   283b8:	b002      	add	sp, #8
   283ba:	bd80      	pop	{r7, pc}

000283bc <system_pinmux_get_group_from_gpio_pin>:
{
   283bc:	b580      	push	{r7, lr}
   283be:	b084      	sub	sp, #16
   283c0:	af00      	add	r7, sp, #0
   283c2:	0002      	movs	r2, r0
   283c4:	1dfb      	adds	r3, r7, #7
   283c6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   283c8:	230f      	movs	r3, #15
   283ca:	18fb      	adds	r3, r7, r3
   283cc:	1dfa      	adds	r2, r7, #7
   283ce:	7812      	ldrb	r2, [r2, #0]
   283d0:	09d2      	lsrs	r2, r2, #7
   283d2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   283d4:	230e      	movs	r3, #14
   283d6:	18fb      	adds	r3, r7, r3
   283d8:	1dfa      	adds	r2, r7, #7
   283da:	7812      	ldrb	r2, [r2, #0]
   283dc:	0952      	lsrs	r2, r2, #5
   283de:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   283e0:	4b0d      	ldr	r3, [pc, #52]	; (28418 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   283e2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   283e4:	230f      	movs	r3, #15
   283e6:	18fb      	adds	r3, r7, r3
   283e8:	781b      	ldrb	r3, [r3, #0]
   283ea:	2b00      	cmp	r3, #0
   283ec:	d10f      	bne.n	2840e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   283ee:	230f      	movs	r3, #15
   283f0:	18fb      	adds	r3, r7, r3
   283f2:	781b      	ldrb	r3, [r3, #0]
   283f4:	009b      	lsls	r3, r3, #2
   283f6:	2210      	movs	r2, #16
   283f8:	4694      	mov	ip, r2
   283fa:	44bc      	add	ip, r7
   283fc:	4463      	add	r3, ip
   283fe:	3b08      	subs	r3, #8
   28400:	681a      	ldr	r2, [r3, #0]
   28402:	230e      	movs	r3, #14
   28404:	18fb      	adds	r3, r7, r3
   28406:	781b      	ldrb	r3, [r3, #0]
   28408:	01db      	lsls	r3, r3, #7
   2840a:	18d3      	adds	r3, r2, r3
   2840c:	e000      	b.n	28410 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2840e:	2300      	movs	r3, #0
}
   28410:	0018      	movs	r0, r3
   28412:	46bd      	mov	sp, r7
   28414:	b004      	add	sp, #16
   28416:	bd80      	pop	{r7, pc}
   28418:	41004400 	.word	0x41004400

0002841c <port_get_group_from_gpio_pin>:
{
   2841c:	b580      	push	{r7, lr}
   2841e:	b082      	sub	sp, #8
   28420:	af00      	add	r7, sp, #0
   28422:	0002      	movs	r2, r0
   28424:	1dfb      	adds	r3, r7, #7
   28426:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   28428:	1dfb      	adds	r3, r7, #7
   2842a:	781b      	ldrb	r3, [r3, #0]
   2842c:	0018      	movs	r0, r3
   2842e:	4b03      	ldr	r3, [pc, #12]	; (2843c <port_get_group_from_gpio_pin+0x20>)
   28430:	4798      	blx	r3
   28432:	0003      	movs	r3, r0
}
   28434:	0018      	movs	r0, r3
   28436:	46bd      	mov	sp, r7
   28438:	b002      	add	sp, #8
   2843a:	bd80      	pop	{r7, pc}
   2843c:	000283bd 	.word	0x000283bd

00028440 <port_pin_set_output_level>:
{
   28440:	b580      	push	{r7, lr}
   28442:	b084      	sub	sp, #16
   28444:	af00      	add	r7, sp, #0
   28446:	0002      	movs	r2, r0
   28448:	1dfb      	adds	r3, r7, #7
   2844a:	701a      	strb	r2, [r3, #0]
   2844c:	1dbb      	adds	r3, r7, #6
   2844e:	1c0a      	adds	r2, r1, #0
   28450:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   28452:	1dfb      	adds	r3, r7, #7
   28454:	781b      	ldrb	r3, [r3, #0]
   28456:	0018      	movs	r0, r3
   28458:	4b0d      	ldr	r3, [pc, #52]	; (28490 <port_pin_set_output_level+0x50>)
   2845a:	4798      	blx	r3
   2845c:	0003      	movs	r3, r0
   2845e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   28460:	1dfb      	adds	r3, r7, #7
   28462:	781b      	ldrb	r3, [r3, #0]
   28464:	221f      	movs	r2, #31
   28466:	4013      	ands	r3, r2
   28468:	2201      	movs	r2, #1
   2846a:	409a      	lsls	r2, r3
   2846c:	0013      	movs	r3, r2
   2846e:	60bb      	str	r3, [r7, #8]
	if (level) {
   28470:	1dbb      	adds	r3, r7, #6
   28472:	781b      	ldrb	r3, [r3, #0]
   28474:	2b00      	cmp	r3, #0
   28476:	d003      	beq.n	28480 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   28478:	68fb      	ldr	r3, [r7, #12]
   2847a:	68ba      	ldr	r2, [r7, #8]
   2847c:	619a      	str	r2, [r3, #24]
}
   2847e:	e002      	b.n	28486 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   28480:	68fb      	ldr	r3, [r7, #12]
   28482:	68ba      	ldr	r2, [r7, #8]
   28484:	615a      	str	r2, [r3, #20]
}
   28486:	46c0      	nop			; (mov r8, r8)
   28488:	46bd      	mov	sp, r7
   2848a:	b004      	add	sp, #16
   2848c:	bd80      	pop	{r7, pc}
   2848e:	46c0      	nop			; (mov r8, r8)
   28490:	0002841d 	.word	0x0002841d

00028494 <system_gclk_chan_get_config_defaults>:
{
   28494:	b580      	push	{r7, lr}
   28496:	b082      	sub	sp, #8
   28498:	af00      	add	r7, sp, #0
   2849a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2849c:	687b      	ldr	r3, [r7, #4]
   2849e:	2200      	movs	r2, #0
   284a0:	701a      	strb	r2, [r3, #0]
}
   284a2:	46c0      	nop			; (mov r8, r8)
   284a4:	46bd      	mov	sp, r7
   284a6:	b002      	add	sp, #8
   284a8:	bd80      	pop	{r7, pc}
	...

000284ac <system_apb_clock_set_mask>:
{
   284ac:	b580      	push	{r7, lr}
   284ae:	b082      	sub	sp, #8
   284b0:	af00      	add	r7, sp, #0
   284b2:	0002      	movs	r2, r0
   284b4:	6039      	str	r1, [r7, #0]
   284b6:	1dfb      	adds	r3, r7, #7
   284b8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   284ba:	1dfb      	adds	r3, r7, #7
   284bc:	781b      	ldrb	r3, [r3, #0]
   284be:	2b01      	cmp	r3, #1
   284c0:	d00a      	beq.n	284d8 <system_apb_clock_set_mask+0x2c>
   284c2:	2b02      	cmp	r3, #2
   284c4:	d00f      	beq.n	284e6 <system_apb_clock_set_mask+0x3a>
   284c6:	2b00      	cmp	r3, #0
   284c8:	d114      	bne.n	284f4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   284ca:	4b0e      	ldr	r3, [pc, #56]	; (28504 <system_apb_clock_set_mask+0x58>)
   284cc:	4a0d      	ldr	r2, [pc, #52]	; (28504 <system_apb_clock_set_mask+0x58>)
   284ce:	6991      	ldr	r1, [r2, #24]
   284d0:	683a      	ldr	r2, [r7, #0]
   284d2:	430a      	orrs	r2, r1
   284d4:	619a      	str	r2, [r3, #24]
			break;
   284d6:	e00f      	b.n	284f8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   284d8:	4b0a      	ldr	r3, [pc, #40]	; (28504 <system_apb_clock_set_mask+0x58>)
   284da:	4a0a      	ldr	r2, [pc, #40]	; (28504 <system_apb_clock_set_mask+0x58>)
   284dc:	69d1      	ldr	r1, [r2, #28]
   284de:	683a      	ldr	r2, [r7, #0]
   284e0:	430a      	orrs	r2, r1
   284e2:	61da      	str	r2, [r3, #28]
			break;
   284e4:	e008      	b.n	284f8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   284e6:	4b07      	ldr	r3, [pc, #28]	; (28504 <system_apb_clock_set_mask+0x58>)
   284e8:	4a06      	ldr	r2, [pc, #24]	; (28504 <system_apb_clock_set_mask+0x58>)
   284ea:	6a11      	ldr	r1, [r2, #32]
   284ec:	683a      	ldr	r2, [r7, #0]
   284ee:	430a      	orrs	r2, r1
   284f0:	621a      	str	r2, [r3, #32]
			break;
   284f2:	e001      	b.n	284f8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   284f4:	2317      	movs	r3, #23
   284f6:	e000      	b.n	284fa <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   284f8:	2300      	movs	r3, #0
}
   284fa:	0018      	movs	r0, r3
   284fc:	46bd      	mov	sp, r7
   284fe:	b002      	add	sp, #8
   28500:	bd80      	pop	{r7, pc}
   28502:	46c0      	nop			; (mov r8, r8)
   28504:	40000400 	.word	0x40000400

00028508 <system_is_debugger_present>:
{
   28508:	b580      	push	{r7, lr}
   2850a:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   2850c:	4b05      	ldr	r3, [pc, #20]	; (28524 <system_is_debugger_present+0x1c>)
   2850e:	789b      	ldrb	r3, [r3, #2]
   28510:	b2db      	uxtb	r3, r3
   28512:	001a      	movs	r2, r3
   28514:	2302      	movs	r3, #2
   28516:	4013      	ands	r3, r2
   28518:	1e5a      	subs	r2, r3, #1
   2851a:	4193      	sbcs	r3, r2
   2851c:	b2db      	uxtb	r3, r3
}
   2851e:	0018      	movs	r0, r3
   28520:	46bd      	mov	sp, r7
   28522:	bd80      	pop	{r7, pc}
   28524:	41002000 	.word	0x41002000

00028528 <system_interrupt_enable>:
{
   28528:	b580      	push	{r7, lr}
   2852a:	b082      	sub	sp, #8
   2852c:	af00      	add	r7, sp, #0
   2852e:	0002      	movs	r2, r0
   28530:	1dfb      	adds	r3, r7, #7
   28532:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   28534:	4b06      	ldr	r3, [pc, #24]	; (28550 <system_interrupt_enable+0x28>)
   28536:	1dfa      	adds	r2, r7, #7
   28538:	7812      	ldrb	r2, [r2, #0]
   2853a:	0011      	movs	r1, r2
   2853c:	221f      	movs	r2, #31
   2853e:	400a      	ands	r2, r1
   28540:	2101      	movs	r1, #1
   28542:	4091      	lsls	r1, r2
   28544:	000a      	movs	r2, r1
   28546:	601a      	str	r2, [r3, #0]
}
   28548:	46c0      	nop			; (mov r8, r8)
   2854a:	46bd      	mov	sp, r7
   2854c:	b002      	add	sp, #8
   2854e:	bd80      	pop	{r7, pc}
   28550:	e000e100 	.word	0xe000e100

00028554 <system_interrupt_disable>:
{
   28554:	b580      	push	{r7, lr}
   28556:	b082      	sub	sp, #8
   28558:	af00      	add	r7, sp, #0
   2855a:	0002      	movs	r2, r0
   2855c:	1dfb      	adds	r3, r7, #7
   2855e:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   28560:	4a07      	ldr	r2, [pc, #28]	; (28580 <system_interrupt_disable+0x2c>)
   28562:	1dfb      	adds	r3, r7, #7
   28564:	781b      	ldrb	r3, [r3, #0]
   28566:	0019      	movs	r1, r3
   28568:	231f      	movs	r3, #31
   2856a:	400b      	ands	r3, r1
   2856c:	2101      	movs	r1, #1
   2856e:	4099      	lsls	r1, r3
   28570:	000b      	movs	r3, r1
   28572:	0019      	movs	r1, r3
   28574:	2380      	movs	r3, #128	; 0x80
   28576:	50d1      	str	r1, [r2, r3]
}
   28578:	46c0      	nop			; (mov r8, r8)
   2857a:	46bd      	mov	sp, r7
   2857c:	b002      	add	sp, #8
   2857e:	bd80      	pop	{r7, pc}
   28580:	e000e100 	.word	0xe000e100

00028584 <spi_is_syncing>:
{
   28584:	b580      	push	{r7, lr}
   28586:	b084      	sub	sp, #16
   28588:	af00      	add	r7, sp, #0
   2858a:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   2858c:	687b      	ldr	r3, [r7, #4]
   2858e:	681b      	ldr	r3, [r3, #0]
   28590:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   28592:	68fb      	ldr	r3, [r7, #12]
   28594:	69db      	ldr	r3, [r3, #28]
   28596:	1e5a      	subs	r2, r3, #1
   28598:	4193      	sbcs	r3, r2
   2859a:	b2db      	uxtb	r3, r3
}
   2859c:	0018      	movs	r0, r3
   2859e:	46bd      	mov	sp, r7
   285a0:	b004      	add	sp, #16
   285a2:	bd80      	pop	{r7, pc}

000285a4 <spi_enable>:
{
   285a4:	b580      	push	{r7, lr}
   285a6:	b084      	sub	sp, #16
   285a8:	af00      	add	r7, sp, #0
   285aa:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   285ac:	687b      	ldr	r3, [r7, #4]
   285ae:	681b      	ldr	r3, [r3, #0]
   285b0:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   285b2:	687b      	ldr	r3, [r7, #4]
   285b4:	681b      	ldr	r3, [r3, #0]
   285b6:	0018      	movs	r0, r3
   285b8:	4b0b      	ldr	r3, [pc, #44]	; (285e8 <spi_enable+0x44>)
   285ba:	4798      	blx	r3
   285bc:	0003      	movs	r3, r0
   285be:	0018      	movs	r0, r3
   285c0:	4b0a      	ldr	r3, [pc, #40]	; (285ec <spi_enable+0x48>)
   285c2:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   285c4:	46c0      	nop			; (mov r8, r8)
   285c6:	687b      	ldr	r3, [r7, #4]
   285c8:	0018      	movs	r0, r3
   285ca:	4b09      	ldr	r3, [pc, #36]	; (285f0 <spi_enable+0x4c>)
   285cc:	4798      	blx	r3
   285ce:	1e03      	subs	r3, r0, #0
   285d0:	d1f9      	bne.n	285c6 <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   285d2:	68fb      	ldr	r3, [r7, #12]
   285d4:	681b      	ldr	r3, [r3, #0]
   285d6:	2202      	movs	r2, #2
   285d8:	431a      	orrs	r2, r3
   285da:	68fb      	ldr	r3, [r7, #12]
   285dc:	601a      	str	r2, [r3, #0]
}
   285de:	46c0      	nop			; (mov r8, r8)
   285e0:	46bd      	mov	sp, r7
   285e2:	b004      	add	sp, #16
   285e4:	bd80      	pop	{r7, pc}
   285e6:	46c0      	nop			; (mov r8, r8)
   285e8:	000282c1 	.word	0x000282c1
   285ec:	00028529 	.word	0x00028529
   285f0:	00028585 	.word	0x00028585

000285f4 <spi_disable>:
{
   285f4:	b580      	push	{r7, lr}
   285f6:	b084      	sub	sp, #16
   285f8:	af00      	add	r7, sp, #0
   285fa:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   285fc:	687b      	ldr	r3, [r7, #4]
   285fe:	681b      	ldr	r3, [r3, #0]
   28600:	60fb      	str	r3, [r7, #12]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   28602:	687b      	ldr	r3, [r7, #4]
   28604:	681b      	ldr	r3, [r3, #0]
   28606:	0018      	movs	r0, r3
   28608:	4b0e      	ldr	r3, [pc, #56]	; (28644 <spi_disable+0x50>)
   2860a:	4798      	blx	r3
   2860c:	0003      	movs	r3, r0
   2860e:	0018      	movs	r0, r3
   28610:	4b0d      	ldr	r3, [pc, #52]	; (28648 <spi_disable+0x54>)
   28612:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   28614:	46c0      	nop			; (mov r8, r8)
   28616:	687b      	ldr	r3, [r7, #4]
   28618:	0018      	movs	r0, r3
   2861a:	4b0c      	ldr	r3, [pc, #48]	; (2864c <spi_disable+0x58>)
   2861c:	4798      	blx	r3
   2861e:	1e03      	subs	r3, r0, #0
   28620:	d1f9      	bne.n	28616 <spi_disable+0x22>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   28622:	68fb      	ldr	r3, [r7, #12]
   28624:	228f      	movs	r2, #143	; 0x8f
   28626:	751a      	strb	r2, [r3, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   28628:	68fb      	ldr	r3, [r7, #12]
   2862a:	228f      	movs	r2, #143	; 0x8f
   2862c:	761a      	strb	r2, [r3, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   2862e:	68fb      	ldr	r3, [r7, #12]
   28630:	681b      	ldr	r3, [r3, #0]
   28632:	2202      	movs	r2, #2
   28634:	4393      	bics	r3, r2
   28636:	001a      	movs	r2, r3
   28638:	68fb      	ldr	r3, [r7, #12]
   2863a:	601a      	str	r2, [r3, #0]
}
   2863c:	46c0      	nop			; (mov r8, r8)
   2863e:	46bd      	mov	sp, r7
   28640:	b004      	add	sp, #16
   28642:	bd80      	pop	{r7, pc}
   28644:	000282c1 	.word	0x000282c1
   28648:	00028555 	.word	0x00028555
   2864c:	00028585 	.word	0x00028585

00028650 <spi_is_write_complete>:
{
   28650:	b580      	push	{r7, lr}
   28652:	b084      	sub	sp, #16
   28654:	af00      	add	r7, sp, #0
   28656:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   28658:	687b      	ldr	r3, [r7, #4]
   2865a:	681b      	ldr	r3, [r3, #0]
   2865c:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   2865e:	68fb      	ldr	r3, [r7, #12]
   28660:	7e1b      	ldrb	r3, [r3, #24]
   28662:	b2db      	uxtb	r3, r3
   28664:	001a      	movs	r2, r3
   28666:	2302      	movs	r3, #2
   28668:	4013      	ands	r3, r2
   2866a:	1e5a      	subs	r2, r3, #1
   2866c:	4193      	sbcs	r3, r2
   2866e:	b2db      	uxtb	r3, r3
}
   28670:	0018      	movs	r0, r3
   28672:	46bd      	mov	sp, r7
   28674:	b004      	add	sp, #16
   28676:	bd80      	pop	{r7, pc}

00028678 <spi_is_ready_to_write>:
{
   28678:	b580      	push	{r7, lr}
   2867a:	b084      	sub	sp, #16
   2867c:	af00      	add	r7, sp, #0
   2867e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   28680:	687b      	ldr	r3, [r7, #4]
   28682:	681b      	ldr	r3, [r3, #0]
   28684:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   28686:	68fb      	ldr	r3, [r7, #12]
   28688:	7e1b      	ldrb	r3, [r3, #24]
   2868a:	b2db      	uxtb	r3, r3
   2868c:	001a      	movs	r2, r3
   2868e:	2301      	movs	r3, #1
   28690:	4013      	ands	r3, r2
   28692:	1e5a      	subs	r2, r3, #1
   28694:	4193      	sbcs	r3, r2
   28696:	b2db      	uxtb	r3, r3
}
   28698:	0018      	movs	r0, r3
   2869a:	46bd      	mov	sp, r7
   2869c:	b004      	add	sp, #16
   2869e:	bd80      	pop	{r7, pc}

000286a0 <spi_is_ready_to_read>:
{
   286a0:	b580      	push	{r7, lr}
   286a2:	b084      	sub	sp, #16
   286a4:	af00      	add	r7, sp, #0
   286a6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   286a8:	687b      	ldr	r3, [r7, #4]
   286aa:	681b      	ldr	r3, [r3, #0]
   286ac:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   286ae:	68fb      	ldr	r3, [r7, #12]
   286b0:	7e1b      	ldrb	r3, [r3, #24]
   286b2:	b2db      	uxtb	r3, r3
   286b4:	001a      	movs	r2, r3
   286b6:	2304      	movs	r3, #4
   286b8:	4013      	ands	r3, r2
   286ba:	1e5a      	subs	r2, r3, #1
   286bc:	4193      	sbcs	r3, r2
   286be:	b2db      	uxtb	r3, r3
}
   286c0:	0018      	movs	r0, r3
   286c2:	46bd      	mov	sp, r7
   286c4:	b004      	add	sp, #16
   286c6:	bd80      	pop	{r7, pc}

000286c8 <spi_write>:
{
   286c8:	b580      	push	{r7, lr}
   286ca:	b084      	sub	sp, #16
   286cc:	af00      	add	r7, sp, #0
   286ce:	6078      	str	r0, [r7, #4]
   286d0:	000a      	movs	r2, r1
   286d2:	1cbb      	adds	r3, r7, #2
   286d4:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   286d6:	687b      	ldr	r3, [r7, #4]
   286d8:	681b      	ldr	r3, [r3, #0]
   286da:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
   286dc:	687b      	ldr	r3, [r7, #4]
   286de:	0018      	movs	r0, r3
   286e0:	4b0a      	ldr	r3, [pc, #40]	; (2870c <spi_write+0x44>)
   286e2:	4798      	blx	r3
   286e4:	0003      	movs	r3, r0
   286e6:	001a      	movs	r2, r3
   286e8:	2301      	movs	r3, #1
   286ea:	4053      	eors	r3, r2
   286ec:	b2db      	uxtb	r3, r3
   286ee:	2b00      	cmp	r3, #0
   286f0:	d001      	beq.n	286f6 <spi_write+0x2e>
		return STATUS_BUSY;
   286f2:	2305      	movs	r3, #5
   286f4:	e006      	b.n	28704 <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   286f6:	1cbb      	adds	r3, r7, #2
   286f8:	881b      	ldrh	r3, [r3, #0]
   286fa:	05db      	lsls	r3, r3, #23
   286fc:	0dda      	lsrs	r2, r3, #23
   286fe:	68fb      	ldr	r3, [r7, #12]
   28700:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
   28702:	2300      	movs	r3, #0
}
   28704:	0018      	movs	r0, r3
   28706:	46bd      	mov	sp, r7
   28708:	b004      	add	sp, #16
   2870a:	bd80      	pop	{r7, pc}
   2870c:	00028679 	.word	0x00028679

00028710 <spi_read>:
{
   28710:	b580      	push	{r7, lr}
   28712:	b084      	sub	sp, #16
   28714:	af00      	add	r7, sp, #0
   28716:	6078      	str	r0, [r7, #4]
   28718:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   2871a:	687b      	ldr	r3, [r7, #4]
   2871c:	681b      	ldr	r3, [r3, #0]
   2871e:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
   28720:	687b      	ldr	r3, [r7, #4]
   28722:	0018      	movs	r0, r3
   28724:	4b1b      	ldr	r3, [pc, #108]	; (28794 <spi_read+0x84>)
   28726:	4798      	blx	r3
   28728:	0003      	movs	r3, r0
   2872a:	001a      	movs	r2, r3
   2872c:	2301      	movs	r3, #1
   2872e:	4053      	eors	r3, r2
   28730:	b2db      	uxtb	r3, r3
   28732:	2b00      	cmp	r3, #0
   28734:	d001      	beq.n	2873a <spi_read+0x2a>
		return STATUS_ERR_IO;
   28736:	2310      	movs	r3, #16
   28738:	e027      	b.n	2878a <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
   2873a:	230f      	movs	r3, #15
   2873c:	18fb      	adds	r3, r7, r3
   2873e:	2200      	movs	r2, #0
   28740:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   28742:	68bb      	ldr	r3, [r7, #8]
   28744:	8b5b      	ldrh	r3, [r3, #26]
   28746:	b29b      	uxth	r3, r3
   28748:	001a      	movs	r2, r3
   2874a:	2304      	movs	r3, #4
   2874c:	4013      	ands	r3, r2
   2874e:	d006      	beq.n	2875e <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   28750:	230f      	movs	r3, #15
   28752:	18fb      	adds	r3, r7, r3
   28754:	221e      	movs	r2, #30
   28756:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   28758:	68bb      	ldr	r3, [r7, #8]
   2875a:	2204      	movs	r2, #4
   2875c:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2875e:	687b      	ldr	r3, [r7, #4]
   28760:	799b      	ldrb	r3, [r3, #6]
   28762:	2b01      	cmp	r3, #1
   28764:	d108      	bne.n	28778 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   28766:	68bb      	ldr	r3, [r7, #8]
   28768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2876a:	b29b      	uxth	r3, r3
   2876c:	05db      	lsls	r3, r3, #23
   2876e:	0ddb      	lsrs	r3, r3, #23
   28770:	b29a      	uxth	r2, r3
   28772:	683b      	ldr	r3, [r7, #0]
   28774:	801a      	strh	r2, [r3, #0]
   28776:	e005      	b.n	28784 <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   28778:	68bb      	ldr	r3, [r7, #8]
   2877a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2877c:	b2db      	uxtb	r3, r3
   2877e:	b29a      	uxth	r2, r3
   28780:	683b      	ldr	r3, [r7, #0]
   28782:	801a      	strh	r2, [r3, #0]
	return retval;
   28784:	230f      	movs	r3, #15
   28786:	18fb      	adds	r3, r7, r3
   28788:	781b      	ldrb	r3, [r3, #0]
}
   2878a:	0018      	movs	r0, r3
   2878c:	46bd      	mov	sp, r7
   2878e:	b004      	add	sp, #16
   28790:	bd80      	pop	{r7, pc}
   28792:	46c0      	nop			; (mov r8, r8)
   28794:	000286a1 	.word	0x000286a1

00028798 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   28798:	b590      	push	{r4, r7, lr}
   2879a:	b089      	sub	sp, #36	; 0x24
   2879c:	af00      	add	r7, sp, #0
   2879e:	6078      	str	r0, [r7, #4]
   287a0:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   287a2:	230c      	movs	r3, #12
   287a4:	18fb      	adds	r3, r7, r3
   287a6:	2200      	movs	r2, #0
   287a8:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   287aa:	687b      	ldr	r3, [r7, #4]
   287ac:	681b      	ldr	r3, [r3, #0]
   287ae:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
   287b0:	687b      	ldr	r3, [r7, #4]
   287b2:	0018      	movs	r0, r3
   287b4:	4b24      	ldr	r3, [pc, #144]	; (28848 <spi_set_baudrate+0xb0>)
   287b6:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   287b8:	46c0      	nop			; (mov r8, r8)
   287ba:	687b      	ldr	r3, [r7, #4]
   287bc:	0018      	movs	r0, r3
   287be:	4b23      	ldr	r3, [pc, #140]	; (2884c <spi_set_baudrate+0xb4>)
   287c0:	4798      	blx	r3
   287c2:	1e03      	subs	r3, r0, #0
   287c4:	d1f9      	bne.n	287ba <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   287c6:	687b      	ldr	r3, [r7, #4]
   287c8:	681b      	ldr	r3, [r3, #0]
   287ca:	0018      	movs	r0, r3
   287cc:	4b20      	ldr	r3, [pc, #128]	; (28850 <spi_set_baudrate+0xb8>)
   287ce:	4798      	blx	r3
   287d0:	0003      	movs	r3, r0
   287d2:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   287d4:	69bb      	ldr	r3, [r7, #24]
   287d6:	3314      	adds	r3, #20
   287d8:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   287da:	697b      	ldr	r3, [r7, #20]
   287dc:	b2db      	uxtb	r3, r3
   287de:	0018      	movs	r0, r3
   287e0:	4b1c      	ldr	r3, [pc, #112]	; (28854 <spi_set_baudrate+0xbc>)
   287e2:	4798      	blx	r3
   287e4:	0003      	movs	r3, r0
   287e6:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   287e8:	230f      	movs	r3, #15
   287ea:	18fc      	adds	r4, r7, r3
   287ec:	230c      	movs	r3, #12
   287ee:	18fa      	adds	r2, r7, r3
   287f0:	6939      	ldr	r1, [r7, #16]
   287f2:	683b      	ldr	r3, [r7, #0]
   287f4:	0018      	movs	r0, r3
   287f6:	4b18      	ldr	r3, [pc, #96]	; (28858 <spi_set_baudrate+0xc0>)
   287f8:	4798      	blx	r3
   287fa:	0003      	movs	r3, r0
   287fc:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   287fe:	230f      	movs	r3, #15
   28800:	18fb      	adds	r3, r7, r3
   28802:	781b      	ldrb	r3, [r3, #0]
   28804:	2b00      	cmp	r3, #0
   28806:	d001      	beq.n	2880c <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   28808:	2317      	movs	r3, #23
   2880a:	e018      	b.n	2883e <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
   2880c:	230c      	movs	r3, #12
   2880e:	18fb      	adds	r3, r7, r3
   28810:	881b      	ldrh	r3, [r3, #0]
   28812:	b2da      	uxtb	r2, r3
   28814:	69fb      	ldr	r3, [r7, #28]
   28816:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
   28818:	46c0      	nop			; (mov r8, r8)
   2881a:	687b      	ldr	r3, [r7, #4]
   2881c:	0018      	movs	r0, r3
   2881e:	4b0b      	ldr	r3, [pc, #44]	; (2884c <spi_set_baudrate+0xb4>)
   28820:	4798      	blx	r3
   28822:	1e03      	subs	r3, r0, #0
   28824:	d1f9      	bne.n	2881a <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
   28826:	687b      	ldr	r3, [r7, #4]
   28828:	0018      	movs	r0, r3
   2882a:	4b0c      	ldr	r3, [pc, #48]	; (2885c <spi_set_baudrate+0xc4>)
   2882c:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   2882e:	46c0      	nop			; (mov r8, r8)
   28830:	687b      	ldr	r3, [r7, #4]
   28832:	0018      	movs	r0, r3
   28834:	4b05      	ldr	r3, [pc, #20]	; (2884c <spi_set_baudrate+0xb4>)
   28836:	4798      	blx	r3
   28838:	1e03      	subs	r3, r0, #0
   2883a:	d1f9      	bne.n	28830 <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
   2883c:	2300      	movs	r3, #0
}
   2883e:	0018      	movs	r0, r3
   28840:	46bd      	mov	sp, r7
   28842:	b009      	add	sp, #36	; 0x24
   28844:	bd90      	pop	{r4, r7, pc}
   28846:	46c0      	nop			; (mov r8, r8)
   28848:	000285f5 	.word	0x000285f5
   2884c:	00028585 	.word	0x00028585
   28850:	000281f1 	.word	0x000281f1
   28854:	0002aba5 	.word	0x0002aba5
   28858:	00027d6b 	.word	0x00027d6b
   2885c:	000285a5 	.word	0x000285a5

00028860 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   28860:	b590      	push	{r4, r7, lr}
   28862:	b093      	sub	sp, #76	; 0x4c
   28864:	af00      	add	r7, sp, #0
   28866:	6078      	str	r0, [r7, #4]
   28868:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   2886a:	687b      	ldr	r3, [r7, #4]
   2886c:	681b      	ldr	r3, [r3, #0]
   2886e:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   28870:	687b      	ldr	r3, [r7, #4]
   28872:	681b      	ldr	r3, [r3, #0]
   28874:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   28876:	231c      	movs	r3, #28
   28878:	18fb      	adds	r3, r7, r3
   2887a:	0018      	movs	r0, r3
   2887c:	4b75      	ldr	r3, [pc, #468]	; (28a54 <_spi_set_config+0x1f4>)
   2887e:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   28880:	231c      	movs	r3, #28
   28882:	18fb      	adds	r3, r7, r3
   28884:	2200      	movs	r2, #0
   28886:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
   28888:	683b      	ldr	r3, [r7, #0]
   2888a:	781b      	ldrb	r3, [r3, #0]
   2888c:	2b00      	cmp	r3, #0
   2888e:	d103      	bne.n	28898 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   28890:	231c      	movs	r3, #28
   28892:	18fb      	adds	r3, r7, r3
   28894:	2200      	movs	r2, #0
   28896:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   28898:	683b      	ldr	r3, [r7, #0]
   2889a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   2889c:	230c      	movs	r3, #12
   2889e:	18fb      	adds	r3, r7, r3
   288a0:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   288a2:	683b      	ldr	r3, [r7, #0]
   288a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   288a6:	230c      	movs	r3, #12
   288a8:	18fb      	adds	r3, r7, r3
   288aa:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   288ac:	683b      	ldr	r3, [r7, #0]
   288ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   288b0:	230c      	movs	r3, #12
   288b2:	18fb      	adds	r3, r7, r3
   288b4:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   288b6:	683b      	ldr	r3, [r7, #0]
   288b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   288ba:	230c      	movs	r3, #12
   288bc:	18fb      	adds	r3, r7, r3
   288be:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   288c0:	2347      	movs	r3, #71	; 0x47
   288c2:	18fb      	adds	r3, r7, r3
   288c4:	2200      	movs	r2, #0
   288c6:	701a      	strb	r2, [r3, #0]
   288c8:	e02c      	b.n	28924 <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   288ca:	2347      	movs	r3, #71	; 0x47
   288cc:	18fb      	adds	r3, r7, r3
   288ce:	781a      	ldrb	r2, [r3, #0]
   288d0:	230c      	movs	r3, #12
   288d2:	18fb      	adds	r3, r7, r3
   288d4:	0092      	lsls	r2, r2, #2
   288d6:	58d3      	ldr	r3, [r2, r3]
   288d8:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   288da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   288dc:	2b00      	cmp	r3, #0
   288de:	d109      	bne.n	288f4 <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   288e0:	2347      	movs	r3, #71	; 0x47
   288e2:	18fb      	adds	r3, r7, r3
   288e4:	781a      	ldrb	r2, [r3, #0]
   288e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   288e8:	0011      	movs	r1, r2
   288ea:	0018      	movs	r0, r3
   288ec:	4b5a      	ldr	r3, [pc, #360]	; (28a58 <_spi_set_config+0x1f8>)
   288ee:	4798      	blx	r3
   288f0:	0003      	movs	r3, r0
   288f2:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   288f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   288f6:	3301      	adds	r3, #1
   288f8:	d00d      	beq.n	28916 <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   288fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   288fc:	b2da      	uxtb	r2, r3
   288fe:	231c      	movs	r3, #28
   28900:	18fb      	adds	r3, r7, r3
   28902:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   28904:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28906:	0c1b      	lsrs	r3, r3, #16
   28908:	b2db      	uxtb	r3, r3
   2890a:	221c      	movs	r2, #28
   2890c:	18ba      	adds	r2, r7, r2
   2890e:	0011      	movs	r1, r2
   28910:	0018      	movs	r0, r3
   28912:	4b52      	ldr	r3, [pc, #328]	; (28a5c <_spi_set_config+0x1fc>)
   28914:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   28916:	2347      	movs	r3, #71	; 0x47
   28918:	18fb      	adds	r3, r7, r3
   2891a:	781a      	ldrb	r2, [r3, #0]
   2891c:	2347      	movs	r3, #71	; 0x47
   2891e:	18fb      	adds	r3, r7, r3
   28920:	3201      	adds	r2, #1
   28922:	701a      	strb	r2, [r3, #0]
   28924:	2347      	movs	r3, #71	; 0x47
   28926:	18fb      	adds	r3, r7, r3
   28928:	781b      	ldrb	r3, [r3, #0]
   2892a:	2b03      	cmp	r3, #3
   2892c:	d9cd      	bls.n	288ca <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
   2892e:	683b      	ldr	r3, [r7, #0]
   28930:	781a      	ldrb	r2, [r3, #0]
   28932:	687b      	ldr	r3, [r7, #4]
   28934:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   28936:	683b      	ldr	r3, [r7, #0]
   28938:	7c1a      	ldrb	r2, [r3, #16]
   2893a:	687b      	ldr	r3, [r7, #4]
   2893c:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   2893e:	683b      	ldr	r3, [r7, #0]
   28940:	7c9a      	ldrb	r2, [r3, #18]
   28942:	687b      	ldr	r3, [r7, #4]
   28944:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
   28946:	683b      	ldr	r3, [r7, #0]
   28948:	7d1a      	ldrb	r2, [r3, #20]
   2894a:	687b      	ldr	r3, [r7, #4]
   2894c:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   2894e:	230a      	movs	r3, #10
   28950:	18fb      	adds	r3, r7, r3
   28952:	2200      	movs	r2, #0
   28954:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   28956:	2300      	movs	r3, #0
   28958:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   2895a:	2300      	movs	r3, #0
   2895c:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   2895e:	683b      	ldr	r3, [r7, #0]
   28960:	781b      	ldrb	r3, [r3, #0]
   28962:	2b01      	cmp	r3, #1
   28964:	d129      	bne.n	289ba <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   28966:	687b      	ldr	r3, [r7, #4]
   28968:	681b      	ldr	r3, [r3, #0]
   2896a:	0018      	movs	r0, r3
   2896c:	4b3c      	ldr	r3, [pc, #240]	; (28a60 <_spi_set_config+0x200>)
   2896e:	4798      	blx	r3
   28970:	0003      	movs	r3, r0
   28972:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   28974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   28976:	3314      	adds	r3, #20
   28978:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   2897a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2897c:	b2db      	uxtb	r3, r3
   2897e:	0018      	movs	r0, r3
   28980:	4b38      	ldr	r3, [pc, #224]	; (28a64 <_spi_set_config+0x204>)
   28982:	4798      	blx	r3
   28984:	0003      	movs	r3, r0
   28986:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   28988:	683b      	ldr	r3, [r7, #0]
   2898a:	699b      	ldr	r3, [r3, #24]
   2898c:	2223      	movs	r2, #35	; 0x23
   2898e:	18bc      	adds	r4, r7, r2
   28990:	220a      	movs	r2, #10
   28992:	18ba      	adds	r2, r7, r2
   28994:	6a79      	ldr	r1, [r7, #36]	; 0x24
   28996:	0018      	movs	r0, r3
   28998:	4b33      	ldr	r3, [pc, #204]	; (28a68 <_spi_set_config+0x208>)
   2899a:	4798      	blx	r3
   2899c:	0003      	movs	r3, r0
   2899e:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   289a0:	2323      	movs	r3, #35	; 0x23
   289a2:	18fb      	adds	r3, r7, r3
   289a4:	781b      	ldrb	r3, [r3, #0]
   289a6:	2b00      	cmp	r3, #0
   289a8:	d001      	beq.n	289ae <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   289aa:	2317      	movs	r3, #23
   289ac:	e04e      	b.n	28a4c <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   289ae:	230a      	movs	r3, #10
   289b0:	18fb      	adds	r3, r7, r3
   289b2:	881b      	ldrh	r3, [r3, #0]
   289b4:	b2da      	uxtb	r2, r3
   289b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   289b8:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   289ba:	683b      	ldr	r3, [r7, #0]
   289bc:	685b      	ldr	r3, [r3, #4]
   289be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   289c0:	4313      	orrs	r3, r2
   289c2:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   289c4:	683b      	ldr	r3, [r7, #0]
   289c6:	689b      	ldr	r3, [r3, #8]
   289c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   289ca:	4313      	orrs	r3, r2
   289cc:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   289ce:	683b      	ldr	r3, [r7, #0]
   289d0:	68db      	ldr	r3, [r3, #12]
   289d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   289d4:	4313      	orrs	r3, r2
   289d6:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
   289d8:	683b      	ldr	r3, [r7, #0]
   289da:	7c1b      	ldrb	r3, [r3, #16]
   289dc:	001a      	movs	r2, r3
   289de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   289e0:	4313      	orrs	r3, r2
   289e2:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   289e4:	683b      	ldr	r3, [r7, #0]
   289e6:	7c5b      	ldrb	r3, [r3, #17]
   289e8:	2b00      	cmp	r3, #0
   289ea:	d103      	bne.n	289f4 <_spi_set_config+0x194>
   289ec:	4b1f      	ldr	r3, [pc, #124]	; (28a6c <_spi_set_config+0x20c>)
   289ee:	4798      	blx	r3
   289f0:	1e03      	subs	r3, r0, #0
   289f2:	d003      	beq.n	289fc <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   289f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   289f6:	2280      	movs	r2, #128	; 0x80
   289f8:	4313      	orrs	r3, r2
   289fa:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   289fc:	683b      	ldr	r3, [r7, #0]
   289fe:	7c9b      	ldrb	r3, [r3, #18]
   28a00:	2b00      	cmp	r3, #0
   28a02:	d004      	beq.n	28a0e <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   28a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28a06:	2280      	movs	r2, #128	; 0x80
   28a08:	0292      	lsls	r2, r2, #10
   28a0a:	4313      	orrs	r3, r2
   28a0c:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   28a0e:	683b      	ldr	r3, [r7, #0]
   28a10:	7cdb      	ldrb	r3, [r3, #19]
   28a12:	2b00      	cmp	r3, #0
   28a14:	d004      	beq.n	28a20 <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   28a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28a18:	2280      	movs	r2, #128	; 0x80
   28a1a:	0092      	lsls	r2, r2, #2
   28a1c:	4313      	orrs	r3, r2
   28a1e:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   28a20:	683b      	ldr	r3, [r7, #0]
   28a22:	7d1b      	ldrb	r3, [r3, #20]
   28a24:	2b00      	cmp	r3, #0
   28a26:	d004      	beq.n	28a32 <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   28a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28a2a:	2280      	movs	r2, #128	; 0x80
   28a2c:	0192      	lsls	r2, r2, #6
   28a2e:	4313      	orrs	r3, r2
   28a30:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   28a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28a34:	681a      	ldr	r2, [r3, #0]
   28a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28a38:	431a      	orrs	r2, r3
   28a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28a3c:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   28a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28a40:	685a      	ldr	r2, [r3, #4]
   28a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28a44:	431a      	orrs	r2, r3
   28a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28a48:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   28a4a:	2300      	movs	r3, #0
}
   28a4c:	0018      	movs	r0, r3
   28a4e:	46bd      	mov	sp, r7
   28a50:	b013      	add	sp, #76	; 0x4c
   28a52:	bd90      	pop	{r4, r7, pc}
   28a54:	00028395 	.word	0x00028395
   28a58:	00028035 	.word	0x00028035
   28a5c:	0002ade1 	.word	0x0002ade1
   28a60:	000281f1 	.word	0x000281f1
   28a64:	0002aba5 	.word	0x0002aba5
   28a68:	00027d6b 	.word	0x00027d6b
   28a6c:	00028509 	.word	0x00028509

00028a70 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   28a70:	b590      	push	{r4, r7, lr}
   28a72:	b08b      	sub	sp, #44	; 0x2c
   28a74:	af00      	add	r7, sp, #0
   28a76:	60f8      	str	r0, [r7, #12]
   28a78:	60b9      	str	r1, [r7, #8]
   28a7a:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   28a7c:	68fb      	ldr	r3, [r7, #12]
   28a7e:	68ba      	ldr	r2, [r7, #8]
   28a80:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   28a82:	68fb      	ldr	r3, [r7, #12]
   28a84:	681b      	ldr	r3, [r3, #0]
   28a86:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   28a88:	6a3b      	ldr	r3, [r7, #32]
   28a8a:	681b      	ldr	r3, [r3, #0]
   28a8c:	2202      	movs	r2, #2
   28a8e:	4013      	ands	r3, r2
   28a90:	d001      	beq.n	28a96 <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   28a92:	231c      	movs	r3, #28
   28a94:	e09c      	b.n	28bd0 <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   28a96:	6a3b      	ldr	r3, [r7, #32]
   28a98:	681b      	ldr	r3, [r3, #0]
   28a9a:	2201      	movs	r2, #1
   28a9c:	4013      	ands	r3, r2
   28a9e:	d001      	beq.n	28aa4 <spi_init+0x34>
		return STATUS_BUSY;
   28aa0:	2305      	movs	r3, #5
   28aa2:	e095      	b.n	28bd0 <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   28aa4:	68fb      	ldr	r3, [r7, #12]
   28aa6:	681b      	ldr	r3, [r3, #0]
   28aa8:	0018      	movs	r0, r3
   28aaa:	4b4b      	ldr	r3, [pc, #300]	; (28bd8 <spi_init+0x168>)
   28aac:	4798      	blx	r3
   28aae:	0003      	movs	r3, r0
   28ab0:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   28ab2:	69fb      	ldr	r3, [r7, #28]
   28ab4:	3302      	adds	r3, #2
   28ab6:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   28ab8:	69fb      	ldr	r3, [r7, #28]
   28aba:	3314      	adds	r3, #20
   28abc:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   28abe:	2201      	movs	r2, #1
   28ac0:	69bb      	ldr	r3, [r7, #24]
   28ac2:	409a      	lsls	r2, r3
   28ac4:	0013      	movs	r3, r2
   28ac6:	0019      	movs	r1, r3
   28ac8:	2002      	movs	r0, #2
   28aca:	4b44      	ldr	r3, [pc, #272]	; (28bdc <spi_init+0x16c>)
   28acc:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   28ace:	2310      	movs	r3, #16
   28ad0:	18fb      	adds	r3, r7, r3
   28ad2:	0018      	movs	r0, r3
   28ad4:	4b42      	ldr	r3, [pc, #264]	; (28be0 <spi_init+0x170>)
   28ad6:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   28ad8:	687b      	ldr	r3, [r7, #4]
   28ada:	2224      	movs	r2, #36	; 0x24
   28adc:	5c9a      	ldrb	r2, [r3, r2]
   28ade:	2310      	movs	r3, #16
   28ae0:	18fb      	adds	r3, r7, r3
   28ae2:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   28ae4:	697b      	ldr	r3, [r7, #20]
   28ae6:	b2db      	uxtb	r3, r3
   28ae8:	2210      	movs	r2, #16
   28aea:	18ba      	adds	r2, r7, r2
   28aec:	0011      	movs	r1, r2
   28aee:	0018      	movs	r0, r3
   28af0:	4b3c      	ldr	r3, [pc, #240]	; (28be4 <spi_init+0x174>)
   28af2:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   28af4:	697b      	ldr	r3, [r7, #20]
   28af6:	b2db      	uxtb	r3, r3
   28af8:	0018      	movs	r0, r3
   28afa:	4b3b      	ldr	r3, [pc, #236]	; (28be8 <spi_init+0x178>)
   28afc:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   28afe:	687b      	ldr	r3, [r7, #4]
   28b00:	2224      	movs	r2, #36	; 0x24
   28b02:	5c9b      	ldrb	r3, [r3, r2]
   28b04:	2100      	movs	r1, #0
   28b06:	0018      	movs	r0, r3
   28b08:	4b38      	ldr	r3, [pc, #224]	; (28bec <spi_init+0x17c>)
   28b0a:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   28b0c:	687b      	ldr	r3, [r7, #4]
   28b0e:	781b      	ldrb	r3, [r3, #0]
   28b10:	2b01      	cmp	r3, #1
   28b12:	d105      	bne.n	28b20 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   28b14:	6a3b      	ldr	r3, [r7, #32]
   28b16:	681b      	ldr	r3, [r3, #0]
   28b18:	220c      	movs	r2, #12
   28b1a:	431a      	orrs	r2, r3
   28b1c:	6a3b      	ldr	r3, [r7, #32]
   28b1e:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   28b20:	2327      	movs	r3, #39	; 0x27
   28b22:	18fb      	adds	r3, r7, r3
   28b24:	2200      	movs	r2, #0
   28b26:	701a      	strb	r2, [r3, #0]
   28b28:	e010      	b.n	28b4c <spi_init+0xdc>
		module->callback[i]        = NULL;
   28b2a:	2327      	movs	r3, #39	; 0x27
   28b2c:	18fb      	adds	r3, r7, r3
   28b2e:	781b      	ldrb	r3, [r3, #0]
   28b30:	68fa      	ldr	r2, [r7, #12]
   28b32:	3302      	adds	r3, #2
   28b34:	009b      	lsls	r3, r3, #2
   28b36:	18d3      	adds	r3, r2, r3
   28b38:	3304      	adds	r3, #4
   28b3a:	2200      	movs	r2, #0
   28b3c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   28b3e:	2327      	movs	r3, #39	; 0x27
   28b40:	18fb      	adds	r3, r7, r3
   28b42:	781a      	ldrb	r2, [r3, #0]
   28b44:	2327      	movs	r3, #39	; 0x27
   28b46:	18fb      	adds	r3, r7, r3
   28b48:	3201      	adds	r2, #1
   28b4a:	701a      	strb	r2, [r3, #0]
   28b4c:	2327      	movs	r3, #39	; 0x27
   28b4e:	18fb      	adds	r3, r7, r3
   28b50:	781b      	ldrb	r3, [r3, #0]
   28b52:	2b06      	cmp	r3, #6
   28b54:	d9e9      	bls.n	28b2a <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
   28b56:	68fb      	ldr	r3, [r7, #12]
   28b58:	2200      	movs	r2, #0
   28b5a:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   28b5c:	68fb      	ldr	r3, [r7, #12]
   28b5e:	2200      	movs	r2, #0
   28b60:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   28b62:	68fb      	ldr	r3, [r7, #12]
   28b64:	2200      	movs	r2, #0
   28b66:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   28b68:	68fb      	ldr	r3, [r7, #12]
   28b6a:	2200      	movs	r2, #0
   28b6c:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
   28b6e:	68fb      	ldr	r3, [r7, #12]
   28b70:	2236      	movs	r2, #54	; 0x36
   28b72:	2100      	movs	r1, #0
   28b74:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
   28b76:	68fb      	ldr	r3, [r7, #12]
   28b78:	2237      	movs	r2, #55	; 0x37
   28b7a:	2100      	movs	r1, #0
   28b7c:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
   28b7e:	68fb      	ldr	r3, [r7, #12]
   28b80:	2238      	movs	r2, #56	; 0x38
   28b82:	2100      	movs	r1, #0
   28b84:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
   28b86:	68fb      	ldr	r3, [r7, #12]
   28b88:	2203      	movs	r2, #3
   28b8a:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
   28b8c:	68fb      	ldr	r3, [r7, #12]
   28b8e:	2200      	movs	r2, #0
   28b90:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   28b92:	68fb      	ldr	r3, [r7, #12]
   28b94:	681b      	ldr	r3, [r3, #0]
   28b96:	2213      	movs	r2, #19
   28b98:	18bc      	adds	r4, r7, r2
   28b9a:	0018      	movs	r0, r3
   28b9c:	4b0e      	ldr	r3, [pc, #56]	; (28bd8 <spi_init+0x168>)
   28b9e:	4798      	blx	r3
   28ba0:	0003      	movs	r3, r0
   28ba2:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   28ba4:	4a12      	ldr	r2, [pc, #72]	; (28bf0 <spi_init+0x180>)
   28ba6:	2313      	movs	r3, #19
   28ba8:	18fb      	adds	r3, r7, r3
   28baa:	781b      	ldrb	r3, [r3, #0]
   28bac:	0011      	movs	r1, r2
   28bae:	0018      	movs	r0, r3
   28bb0:	4b10      	ldr	r3, [pc, #64]	; (28bf4 <spi_init+0x184>)
   28bb2:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   28bb4:	2313      	movs	r3, #19
   28bb6:	18fb      	adds	r3, r7, r3
   28bb8:	781a      	ldrb	r2, [r3, #0]
   28bba:	4b0f      	ldr	r3, [pc, #60]	; (28bf8 <spi_init+0x188>)
   28bbc:	0092      	lsls	r2, r2, #2
   28bbe:	68f9      	ldr	r1, [r7, #12]
   28bc0:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   28bc2:	687a      	ldr	r2, [r7, #4]
   28bc4:	68fb      	ldr	r3, [r7, #12]
   28bc6:	0011      	movs	r1, r2
   28bc8:	0018      	movs	r0, r3
   28bca:	4b0c      	ldr	r3, [pc, #48]	; (28bfc <spi_init+0x18c>)
   28bcc:	4798      	blx	r3
   28bce:	0003      	movs	r3, r0
}
   28bd0:	0018      	movs	r0, r3
   28bd2:	46bd      	mov	sp, r7
   28bd4:	b00b      	add	sp, #44	; 0x2c
   28bd6:	bd90      	pop	{r4, r7, pc}
   28bd8:	000281f1 	.word	0x000281f1
   28bdc:	000284ad 	.word	0x000284ad
   28be0:	00028495 	.word	0x00028495
   28be4:	0002aa81 	.word	0x0002aa81
   28be8:	0002aac5 	.word	0x0002aac5
   28bec:	00027fa9 	.word	0x00027fa9
   28bf0:	000290c9 	.word	0x000290c9
   28bf4:	00028255 	.word	0x00028255
   28bf8:	20005c58 	.word	0x20005c58
   28bfc:	00028861 	.word	0x00028861

00028c00 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   28c00:	b590      	push	{r4, r7, lr}
   28c02:	b087      	sub	sp, #28
   28c04:	af00      	add	r7, sp, #0
   28c06:	60f8      	str	r0, [r7, #12]
   28c08:	60b9      	str	r1, [r7, #8]
   28c0a:	0019      	movs	r1, r3
   28c0c:	1dbb      	adds	r3, r7, #6
   28c0e:	801a      	strh	r2, [r3, #0]
   28c10:	1d3b      	adds	r3, r7, #4
   28c12:	1c0a      	adds	r2, r1, #0
   28c14:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   28c16:	68fb      	ldr	r3, [r7, #12]
   28c18:	2238      	movs	r2, #56	; 0x38
   28c1a:	5c9b      	ldrb	r3, [r3, r2]
   28c1c:	b2db      	uxtb	r3, r3
   28c1e:	2b05      	cmp	r3, #5
   28c20:	d101      	bne.n	28c26 <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   28c22:	2305      	movs	r3, #5
   28c24:	e07a      	b.n	28d1c <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   28c26:	1dbb      	adds	r3, r7, #6
   28c28:	881b      	ldrh	r3, [r3, #0]
   28c2a:	2b00      	cmp	r3, #0
   28c2c:	d101      	bne.n	28c32 <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
   28c2e:	2317      	movs	r3, #23
   28c30:	e074      	b.n	28d1c <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
   28c32:	68fb      	ldr	r3, [r7, #12]
   28c34:	79db      	ldrb	r3, [r3, #7]
   28c36:	2201      	movs	r2, #1
   28c38:	4053      	eors	r3, r2
   28c3a:	b2db      	uxtb	r3, r3
   28c3c:	2b00      	cmp	r3, #0
   28c3e:	d001      	beq.n	28c44 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
   28c40:	231c      	movs	r3, #28
   28c42:	e06b      	b.n	28d1c <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
   28c44:	2316      	movs	r3, #22
   28c46:	18fb      	adds	r3, r7, r3
   28c48:	2200      	movs	r2, #0
   28c4a:	801a      	strh	r2, [r3, #0]

	while (length--) {
   28c4c:	e05e      	b.n	28d0c <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
   28c4e:	68fb      	ldr	r3, [r7, #12]
   28c50:	795b      	ldrb	r3, [r3, #5]
   28c52:	2b01      	cmp	r3, #1
   28c54:	d112      	bne.n	28c7c <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
   28c56:	46c0      	nop			; (mov r8, r8)
   28c58:	68fb      	ldr	r3, [r7, #12]
   28c5a:	0018      	movs	r0, r3
   28c5c:	4b31      	ldr	r3, [pc, #196]	; (28d24 <spi_read_buffer_wait+0x124>)
   28c5e:	4798      	blx	r3
   28c60:	0003      	movs	r3, r0
   28c62:	001a      	movs	r2, r3
   28c64:	2301      	movs	r3, #1
   28c66:	4053      	eors	r3, r2
   28c68:	b2db      	uxtb	r3, r3
   28c6a:	2b00      	cmp	r3, #0
   28c6c:	d1f4      	bne.n	28c58 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
   28c6e:	1d3b      	adds	r3, r7, #4
   28c70:	881a      	ldrh	r2, [r3, #0]
   28c72:	68fb      	ldr	r3, [r7, #12]
   28c74:	0011      	movs	r1, r2
   28c76:	0018      	movs	r0, r3
   28c78:	4b2b      	ldr	r3, [pc, #172]	; (28d28 <spi_read_buffer_wait+0x128>)
   28c7a:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   28c7c:	46c0      	nop			; (mov r8, r8)
   28c7e:	68fb      	ldr	r3, [r7, #12]
   28c80:	0018      	movs	r0, r3
   28c82:	4b2a      	ldr	r3, [pc, #168]	; (28d2c <spi_read_buffer_wait+0x12c>)
   28c84:	4798      	blx	r3
   28c86:	0003      	movs	r3, r0
   28c88:	001a      	movs	r2, r3
   28c8a:	2301      	movs	r3, #1
   28c8c:	4053      	eors	r3, r2
   28c8e:	b2db      	uxtb	r3, r3
   28c90:	2b00      	cmp	r3, #0
   28c92:	d1f4      	bne.n	28c7e <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
   28c94:	2312      	movs	r3, #18
   28c96:	18fb      	adds	r3, r7, r3
   28c98:	2200      	movs	r2, #0
   28c9a:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
   28c9c:	2315      	movs	r3, #21
   28c9e:	18fc      	adds	r4, r7, r3
   28ca0:	2312      	movs	r3, #18
   28ca2:	18fa      	adds	r2, r7, r3
   28ca4:	68fb      	ldr	r3, [r7, #12]
   28ca6:	0011      	movs	r1, r2
   28ca8:	0018      	movs	r0, r3
   28caa:	4b21      	ldr	r3, [pc, #132]	; (28d30 <spi_read_buffer_wait+0x130>)
   28cac:	4798      	blx	r3
   28cae:	0003      	movs	r3, r0
   28cb0:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   28cb2:	2315      	movs	r3, #21
   28cb4:	18fb      	adds	r3, r7, r3
   28cb6:	781b      	ldrb	r3, [r3, #0]
   28cb8:	2b00      	cmp	r3, #0
   28cba:	d003      	beq.n	28cc4 <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
   28cbc:	2315      	movs	r3, #21
   28cbe:	18fb      	adds	r3, r7, r3
   28cc0:	781b      	ldrb	r3, [r3, #0]
   28cc2:	e02b      	b.n	28d1c <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   28cc4:	2316      	movs	r3, #22
   28cc6:	18fb      	adds	r3, r7, r3
   28cc8:	881b      	ldrh	r3, [r3, #0]
   28cca:	2216      	movs	r2, #22
   28ccc:	18ba      	adds	r2, r7, r2
   28cce:	1c59      	adds	r1, r3, #1
   28cd0:	8011      	strh	r1, [r2, #0]
   28cd2:	001a      	movs	r2, r3
   28cd4:	68bb      	ldr	r3, [r7, #8]
   28cd6:	189b      	adds	r3, r3, r2
   28cd8:	2212      	movs	r2, #18
   28cda:	18ba      	adds	r2, r7, r2
   28cdc:	8812      	ldrh	r2, [r2, #0]
   28cde:	b2d2      	uxtb	r2, r2
   28ce0:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   28ce2:	68fb      	ldr	r3, [r7, #12]
   28ce4:	799b      	ldrb	r3, [r3, #6]
   28ce6:	2b01      	cmp	r3, #1
   28ce8:	d110      	bne.n	28d0c <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
   28cea:	2316      	movs	r3, #22
   28cec:	18fb      	adds	r3, r7, r3
   28cee:	881b      	ldrh	r3, [r3, #0]
   28cf0:	2216      	movs	r2, #22
   28cf2:	18ba      	adds	r2, r7, r2
   28cf4:	1c59      	adds	r1, r3, #1
   28cf6:	8011      	strh	r1, [r2, #0]
   28cf8:	001a      	movs	r2, r3
   28cfa:	68bb      	ldr	r3, [r7, #8]
   28cfc:	189b      	adds	r3, r3, r2
   28cfe:	2212      	movs	r2, #18
   28d00:	18ba      	adds	r2, r7, r2
   28d02:	8812      	ldrh	r2, [r2, #0]
   28d04:	0a12      	lsrs	r2, r2, #8
   28d06:	b292      	uxth	r2, r2
   28d08:	b2d2      	uxtb	r2, r2
   28d0a:	701a      	strb	r2, [r3, #0]
	while (length--) {
   28d0c:	1dbb      	adds	r3, r7, #6
   28d0e:	881b      	ldrh	r3, [r3, #0]
   28d10:	1dba      	adds	r2, r7, #6
   28d12:	1e59      	subs	r1, r3, #1
   28d14:	8011      	strh	r1, [r2, #0]
   28d16:	2b00      	cmp	r3, #0
   28d18:	d199      	bne.n	28c4e <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
   28d1a:	2300      	movs	r3, #0
}
   28d1c:	0018      	movs	r0, r3
   28d1e:	46bd      	mov	sp, r7
   28d20:	b007      	add	sp, #28
   28d22:	bd90      	pop	{r4, r7, pc}
   28d24:	00028679 	.word	0x00028679
   28d28:	000286c9 	.word	0x000286c9
   28d2c:	000286a1 	.word	0x000286a1
   28d30:	00028711 	.word	0x00028711

00028d34 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   28d34:	b580      	push	{r7, lr}
   28d36:	b086      	sub	sp, #24
   28d38:	af00      	add	r7, sp, #0
   28d3a:	60f8      	str	r0, [r7, #12]
   28d3c:	60b9      	str	r1, [r7, #8]
   28d3e:	1dfb      	adds	r3, r7, #7
   28d40:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   28d42:	68fb      	ldr	r3, [r7, #12]
   28d44:	795b      	ldrb	r3, [r3, #5]
   28d46:	2b01      	cmp	r3, #1
   28d48:	d001      	beq.n	28d4e <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   28d4a:	2315      	movs	r3, #21
   28d4c:	e05c      	b.n	28e08 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
   28d4e:	68fb      	ldr	r3, [r7, #12]
   28d50:	7a1b      	ldrb	r3, [r3, #8]
   28d52:	2201      	movs	r2, #1
   28d54:	4053      	eors	r3, r2
   28d56:	b2db      	uxtb	r3, r3
   28d58:	2b00      	cmp	r3, #0
   28d5a:	d054      	beq.n	28e06 <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
   28d5c:	1dfb      	adds	r3, r7, #7
   28d5e:	781b      	ldrb	r3, [r3, #0]
   28d60:	2b00      	cmp	r3, #0
   28d62:	d04a      	beq.n	28dfa <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   28d64:	68bb      	ldr	r3, [r7, #8]
   28d66:	785b      	ldrb	r3, [r3, #1]
   28d68:	2b00      	cmp	r3, #0
   28d6a:	d03f      	beq.n	28dec <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   28d6c:	68fb      	ldr	r3, [r7, #12]
   28d6e:	0018      	movs	r0, r3
   28d70:	4b27      	ldr	r3, [pc, #156]	; (28e10 <spi_select_slave+0xdc>)
   28d72:	4798      	blx	r3
   28d74:	0003      	movs	r3, r0
   28d76:	001a      	movs	r2, r3
   28d78:	2301      	movs	r3, #1
   28d7a:	4053      	eors	r3, r2
   28d7c:	b2db      	uxtb	r3, r3
   28d7e:	2b00      	cmp	r3, #0
   28d80:	d007      	beq.n	28d92 <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   28d82:	68bb      	ldr	r3, [r7, #8]
   28d84:	781b      	ldrb	r3, [r3, #0]
   28d86:	2101      	movs	r1, #1
   28d88:	0018      	movs	r0, r3
   28d8a:	4b22      	ldr	r3, [pc, #136]	; (28e14 <spi_select_slave+0xe0>)
   28d8c:	4798      	blx	r3
					return STATUS_BUSY;
   28d8e:	2305      	movs	r3, #5
   28d90:	e03a      	b.n	28e08 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   28d92:	68bb      	ldr	r3, [r7, #8]
   28d94:	781b      	ldrb	r3, [r3, #0]
   28d96:	2100      	movs	r1, #0
   28d98:	0018      	movs	r0, r3
   28d9a:	4b1e      	ldr	r3, [pc, #120]	; (28e14 <spi_select_slave+0xe0>)
   28d9c:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   28d9e:	68bb      	ldr	r3, [r7, #8]
   28da0:	789b      	ldrb	r3, [r3, #2]
   28da2:	b29a      	uxth	r2, r3
   28da4:	68fb      	ldr	r3, [r7, #12]
   28da6:	0011      	movs	r1, r2
   28da8:	0018      	movs	r0, r3
   28daa:	4b1b      	ldr	r3, [pc, #108]	; (28e18 <spi_select_slave+0xe4>)
   28dac:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   28dae:	68fb      	ldr	r3, [r7, #12]
   28db0:	79db      	ldrb	r3, [r3, #7]
   28db2:	2201      	movs	r2, #1
   28db4:	4053      	eors	r3, r2
   28db6:	b2db      	uxtb	r3, r3
   28db8:	2b00      	cmp	r3, #0
   28dba:	d024      	beq.n	28e06 <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   28dbc:	46c0      	nop			; (mov r8, r8)
   28dbe:	68fb      	ldr	r3, [r7, #12]
   28dc0:	0018      	movs	r0, r3
   28dc2:	4b16      	ldr	r3, [pc, #88]	; (28e1c <spi_select_slave+0xe8>)
   28dc4:	4798      	blx	r3
   28dc6:	0003      	movs	r3, r0
   28dc8:	001a      	movs	r2, r3
   28dca:	2301      	movs	r3, #1
   28dcc:	4053      	eors	r3, r2
   28dce:	b2db      	uxtb	r3, r3
   28dd0:	2b00      	cmp	r3, #0
   28dd2:	d1f4      	bne.n	28dbe <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
   28dd4:	2316      	movs	r3, #22
   28dd6:	18fb      	adds	r3, r7, r3
   28dd8:	2200      	movs	r2, #0
   28dda:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   28ddc:	2316      	movs	r3, #22
   28dde:	18fa      	adds	r2, r7, r3
   28de0:	68fb      	ldr	r3, [r7, #12]
   28de2:	0011      	movs	r1, r2
   28de4:	0018      	movs	r0, r3
   28de6:	4b0e      	ldr	r3, [pc, #56]	; (28e20 <spi_select_slave+0xec>)
   28de8:	4798      	blx	r3
   28dea:	e00c      	b.n	28e06 <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   28dec:	68bb      	ldr	r3, [r7, #8]
   28dee:	781b      	ldrb	r3, [r3, #0]
   28df0:	2100      	movs	r1, #0
   28df2:	0018      	movs	r0, r3
   28df4:	4b07      	ldr	r3, [pc, #28]	; (28e14 <spi_select_slave+0xe0>)
   28df6:	4798      	blx	r3
   28df8:	e005      	b.n	28e06 <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   28dfa:	68bb      	ldr	r3, [r7, #8]
   28dfc:	781b      	ldrb	r3, [r3, #0]
   28dfe:	2101      	movs	r1, #1
   28e00:	0018      	movs	r0, r3
   28e02:	4b04      	ldr	r3, [pc, #16]	; (28e14 <spi_select_slave+0xe0>)
   28e04:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   28e06:	2300      	movs	r3, #0
}
   28e08:	0018      	movs	r0, r3
   28e0a:	46bd      	mov	sp, r7
   28e0c:	b006      	add	sp, #24
   28e0e:	bd80      	pop	{r7, pc}
   28e10:	00028679 	.word	0x00028679
   28e14:	00028441 	.word	0x00028441
   28e18:	000286c9 	.word	0x000286c9
   28e1c:	000286a1 	.word	0x000286a1
   28e20:	00028711 	.word	0x00028711

00028e24 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   28e24:	b580      	push	{r7, lr}
   28e26:	b086      	sub	sp, #24
   28e28:	af00      	add	r7, sp, #0
   28e2a:	60f8      	str	r0, [r7, #12]
   28e2c:	60b9      	str	r1, [r7, #8]
   28e2e:	1dbb      	adds	r3, r7, #6
   28e30:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   28e32:	68fb      	ldr	r3, [r7, #12]
   28e34:	2238      	movs	r2, #56	; 0x38
   28e36:	5c9b      	ldrb	r3, [r3, r2]
   28e38:	b2db      	uxtb	r3, r3
   28e3a:	2b05      	cmp	r3, #5
   28e3c:	d101      	bne.n	28e42 <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   28e3e:	2305      	movs	r3, #5
   28e40:	e087      	b.n	28f52 <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
   28e42:	1dbb      	adds	r3, r7, #6
   28e44:	881b      	ldrh	r3, [r3, #0]
   28e46:	2b00      	cmp	r3, #0
   28e48:	d101      	bne.n	28e4e <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
   28e4a:	2317      	movs	r3, #23
   28e4c:	e081      	b.n	28f52 <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
   28e4e:	2316      	movs	r3, #22
   28e50:	18fb      	adds	r3, r7, r3
   28e52:	2200      	movs	r2, #0
   28e54:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
   28e56:	2314      	movs	r3, #20
   28e58:	18fb      	adds	r3, r7, r3
   28e5a:	1dba      	adds	r2, r7, #6
   28e5c:	8812      	ldrh	r2, [r2, #0]
   28e5e:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
   28e60:	e05f      	b.n	28f22 <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   28e62:	46c0      	nop			; (mov r8, r8)
   28e64:	68fb      	ldr	r3, [r7, #12]
   28e66:	0018      	movs	r0, r3
   28e68:	4b3c      	ldr	r3, [pc, #240]	; (28f5c <spi_write_buffer_wait+0x138>)
   28e6a:	4798      	blx	r3
   28e6c:	0003      	movs	r3, r0
   28e6e:	001a      	movs	r2, r3
   28e70:	2301      	movs	r3, #1
   28e72:	4053      	eors	r3, r2
   28e74:	b2db      	uxtb	r3, r3
   28e76:	2b00      	cmp	r3, #0
   28e78:	d1f4      	bne.n	28e64 <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   28e7a:	2316      	movs	r3, #22
   28e7c:	18fb      	adds	r3, r7, r3
   28e7e:	881b      	ldrh	r3, [r3, #0]
   28e80:	2216      	movs	r2, #22
   28e82:	18ba      	adds	r2, r7, r2
   28e84:	1c59      	adds	r1, r3, #1
   28e86:	8011      	strh	r1, [r2, #0]
   28e88:	001a      	movs	r2, r3
   28e8a:	68bb      	ldr	r3, [r7, #8]
   28e8c:	189b      	adds	r3, r3, r2
   28e8e:	781a      	ldrb	r2, [r3, #0]
   28e90:	2312      	movs	r3, #18
   28e92:	18fb      	adds	r3, r7, r3
   28e94:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   28e96:	68fb      	ldr	r3, [r7, #12]
   28e98:	799b      	ldrb	r3, [r3, #6]
   28e9a:	2b01      	cmp	r3, #1
   28e9c:	d115      	bne.n	28eca <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   28e9e:	2316      	movs	r3, #22
   28ea0:	18fb      	adds	r3, r7, r3
   28ea2:	881b      	ldrh	r3, [r3, #0]
   28ea4:	2216      	movs	r2, #22
   28ea6:	18ba      	adds	r2, r7, r2
   28ea8:	1c59      	adds	r1, r3, #1
   28eaa:	8011      	strh	r1, [r2, #0]
   28eac:	001a      	movs	r2, r3
   28eae:	68bb      	ldr	r3, [r7, #8]
   28eb0:	189b      	adds	r3, r3, r2
   28eb2:	781b      	ldrb	r3, [r3, #0]
   28eb4:	021b      	lsls	r3, r3, #8
   28eb6:	b21a      	sxth	r2, r3
   28eb8:	2312      	movs	r3, #18
   28eba:	18fb      	adds	r3, r7, r3
   28ebc:	2100      	movs	r1, #0
   28ebe:	5e5b      	ldrsh	r3, [r3, r1]
   28ec0:	4313      	orrs	r3, r2
   28ec2:	b21a      	sxth	r2, r3
   28ec4:	2312      	movs	r3, #18
   28ec6:	18fb      	adds	r3, r7, r3
   28ec8:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   28eca:	2312      	movs	r3, #18
   28ecc:	18fb      	adds	r3, r7, r3
   28ece:	881a      	ldrh	r2, [r3, #0]
   28ed0:	68fb      	ldr	r3, [r7, #12]
   28ed2:	0011      	movs	r1, r2
   28ed4:	0018      	movs	r0, r3
   28ed6:	4b22      	ldr	r3, [pc, #136]	; (28f60 <spi_write_buffer_wait+0x13c>)
   28ed8:	4798      	blx	r3

		if (module->receiver_enabled) {
   28eda:	68fb      	ldr	r3, [r7, #12]
   28edc:	79db      	ldrb	r3, [r3, #7]
   28ede:	2214      	movs	r2, #20
   28ee0:	18ba      	adds	r2, r7, r2
   28ee2:	2114      	movs	r1, #20
   28ee4:	1879      	adds	r1, r7, r1
   28ee6:	8809      	ldrh	r1, [r1, #0]
   28ee8:	8011      	strh	r1, [r2, #0]
   28eea:	2b00      	cmp	r3, #0
   28eec:	d019      	beq.n	28f22 <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
   28eee:	46c0      	nop			; (mov r8, r8)
   28ef0:	68fb      	ldr	r3, [r7, #12]
   28ef2:	0018      	movs	r0, r3
   28ef4:	4b1b      	ldr	r3, [pc, #108]	; (28f64 <spi_write_buffer_wait+0x140>)
   28ef6:	4798      	blx	r3
   28ef8:	0003      	movs	r3, r0
   28efa:	001a      	movs	r2, r3
   28efc:	2301      	movs	r3, #1
   28efe:	4053      	eors	r3, r2
   28f00:	b2db      	uxtb	r3, r3
   28f02:	2b00      	cmp	r3, #0
   28f04:	d1f4      	bne.n	28ef0 <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
   28f06:	2310      	movs	r3, #16
   28f08:	18fa      	adds	r2, r7, r3
   28f0a:	68fb      	ldr	r3, [r7, #12]
   28f0c:	0011      	movs	r1, r2
   28f0e:	0018      	movs	r0, r3
   28f10:	4b15      	ldr	r3, [pc, #84]	; (28f68 <spi_write_buffer_wait+0x144>)
   28f12:	4798      	blx	r3
			flush_length--;
   28f14:	2314      	movs	r3, #20
   28f16:	18fb      	adds	r3, r7, r3
   28f18:	881a      	ldrh	r2, [r3, #0]
   28f1a:	2314      	movs	r3, #20
   28f1c:	18fb      	adds	r3, r7, r3
   28f1e:	3a01      	subs	r2, #1
   28f20:	801a      	strh	r2, [r3, #0]
	while (length--) {
   28f22:	1dbb      	adds	r3, r7, #6
   28f24:	881b      	ldrh	r3, [r3, #0]
   28f26:	1dba      	adds	r2, r7, #6
   28f28:	1e59      	subs	r1, r3, #1
   28f2a:	8011      	strh	r1, [r2, #0]
   28f2c:	2b00      	cmp	r3, #0
   28f2e:	d198      	bne.n	28e62 <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   28f30:	68fb      	ldr	r3, [r7, #12]
   28f32:	795b      	ldrb	r3, [r3, #5]
   28f34:	2b01      	cmp	r3, #1
   28f36:	d10b      	bne.n	28f50 <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   28f38:	46c0      	nop			; (mov r8, r8)
   28f3a:	68fb      	ldr	r3, [r7, #12]
   28f3c:	0018      	movs	r0, r3
   28f3e:	4b0b      	ldr	r3, [pc, #44]	; (28f6c <spi_write_buffer_wait+0x148>)
   28f40:	4798      	blx	r3
   28f42:	0003      	movs	r3, r0
   28f44:	001a      	movs	r2, r3
   28f46:	2301      	movs	r3, #1
   28f48:	4053      	eors	r3, r2
   28f4a:	b2db      	uxtb	r3, r3
   28f4c:	2b00      	cmp	r3, #0
   28f4e:	d1f4      	bne.n	28f3a <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
   28f50:	2300      	movs	r3, #0
}
   28f52:	0018      	movs	r0, r3
   28f54:	46bd      	mov	sp, r7
   28f56:	b006      	add	sp, #24
   28f58:	bd80      	pop	{r7, pc}
   28f5a:	46c0      	nop			; (mov r8, r8)
   28f5c:	00028679 	.word	0x00028679
   28f60:	000286c9 	.word	0x000286c9
   28f64:	000286a1 	.word	0x000286a1
   28f68:	00028711 	.word	0x00028711
   28f6c:	00028651 	.word	0x00028651

00028f70 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
   28f70:	b580      	push	{r7, lr}
   28f72:	b084      	sub	sp, #16
   28f74:	af00      	add	r7, sp, #0
   28f76:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   28f78:	687b      	ldr	r3, [r7, #4]
   28f7a:	681b      	ldr	r3, [r3, #0]
   28f7c:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   28f7e:	687b      	ldr	r3, [r7, #4]
   28f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   28f82:	781b      	ldrb	r3, [r3, #0]
   28f84:	b2da      	uxtb	r2, r3
   28f86:	230e      	movs	r3, #14
   28f88:	18fb      	adds	r3, r7, r3
   28f8a:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
   28f8c:	687b      	ldr	r3, [r7, #4]
   28f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   28f90:	1c5a      	adds	r2, r3, #1
   28f92:	687b      	ldr	r3, [r7, #4]
   28f94:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   28f96:	687b      	ldr	r3, [r7, #4]
   28f98:	799b      	ldrb	r3, [r3, #6]
   28f9a:	2b01      	cmp	r3, #1
   28f9c:	d113      	bne.n	28fc6 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   28f9e:	687b      	ldr	r3, [r7, #4]
   28fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   28fa2:	781b      	ldrb	r3, [r3, #0]
   28fa4:	b2db      	uxtb	r3, r3
   28fa6:	021b      	lsls	r3, r3, #8
   28fa8:	b21a      	sxth	r2, r3
   28faa:	230e      	movs	r3, #14
   28fac:	18fb      	adds	r3, r7, r3
   28fae:	2100      	movs	r1, #0
   28fb0:	5e5b      	ldrsh	r3, [r3, r1]
   28fb2:	4313      	orrs	r3, r2
   28fb4:	b21a      	sxth	r2, r3
   28fb6:	230e      	movs	r3, #14
   28fb8:	18fb      	adds	r3, r7, r3
   28fba:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
   28fbc:	687b      	ldr	r3, [r7, #4]
   28fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   28fc0:	1c5a      	adds	r2, r3, #1
   28fc2:	687b      	ldr	r3, [r7, #4]
   28fc4:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   28fc6:	230e      	movs	r3, #14
   28fc8:	18fb      	adds	r3, r7, r3
   28fca:	881b      	ldrh	r3, [r3, #0]
   28fcc:	05db      	lsls	r3, r3, #23
   28fce:	0dda      	lsrs	r2, r3, #23
   28fd0:	68bb      	ldr	r3, [r7, #8]
   28fd2:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
   28fd4:	687b      	ldr	r3, [r7, #4]
   28fd6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   28fd8:	b29b      	uxth	r3, r3
   28fda:	3b01      	subs	r3, #1
   28fdc:	b29a      	uxth	r2, r3
   28fde:	687b      	ldr	r3, [r7, #4]
   28fe0:	869a      	strh	r2, [r3, #52]	; 0x34
}
   28fe2:	46c0      	nop			; (mov r8, r8)
   28fe4:	46bd      	mov	sp, r7
   28fe6:	b004      	add	sp, #16
   28fe8:	bd80      	pop	{r7, pc}
	...

00028fec <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
   28fec:	b580      	push	{r7, lr}
   28fee:	b084      	sub	sp, #16
   28ff0:	af00      	add	r7, sp, #0
   28ff2:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   28ff4:	687b      	ldr	r3, [r7, #4]
   28ff6:	681b      	ldr	r3, [r3, #0]
   28ff8:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
   28ffa:	4b08      	ldr	r3, [pc, #32]	; (2901c <_spi_write_dummy+0x30>)
   28ffc:	881b      	ldrh	r3, [r3, #0]
   28ffe:	001a      	movs	r2, r3
   29000:	68fb      	ldr	r3, [r7, #12]
   29002:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   29004:	687b      	ldr	r3, [r7, #4]
   29006:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   29008:	b29b      	uxth	r3, r3
   2900a:	3b01      	subs	r3, #1
   2900c:	b29a      	uxth	r2, r3
   2900e:	687b      	ldr	r3, [r7, #4]
   29010:	865a      	strh	r2, [r3, #50]	; 0x32
}
   29012:	46c0      	nop			; (mov r8, r8)
   29014:	46bd      	mov	sp, r7
   29016:	b004      	add	sp, #16
   29018:	bd80      	pop	{r7, pc}
   2901a:	46c0      	nop			; (mov r8, r8)
   2901c:	20005c70 	.word	0x20005c70

00029020 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
   29020:	b580      	push	{r7, lr}
   29022:	b084      	sub	sp, #16
   29024:	af00      	add	r7, sp, #0
   29026:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   29028:	687b      	ldr	r3, [r7, #4]
   2902a:	681b      	ldr	r3, [r3, #0]
   2902c:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
   2902e:	230a      	movs	r3, #10
   29030:	18fb      	adds	r3, r7, r3
   29032:	2200      	movs	r2, #0
   29034:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
   29036:	68fb      	ldr	r3, [r7, #12]
   29038:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   2903a:	230a      	movs	r3, #10
   2903c:	18fb      	adds	r3, r7, r3
   2903e:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   29040:	687b      	ldr	r3, [r7, #4]
   29042:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   29044:	b29b      	uxth	r3, r3
   29046:	3b01      	subs	r3, #1
   29048:	b29a      	uxth	r2, r3
   2904a:	687b      	ldr	r3, [r7, #4]
   2904c:	865a      	strh	r2, [r3, #50]	; 0x32
}
   2904e:	46c0      	nop			; (mov r8, r8)
   29050:	46bd      	mov	sp, r7
   29052:	b004      	add	sp, #16
   29054:	bd80      	pop	{r7, pc}

00029056 <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
   29056:	b580      	push	{r7, lr}
   29058:	b084      	sub	sp, #16
   2905a:	af00      	add	r7, sp, #0
   2905c:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   2905e:	687b      	ldr	r3, [r7, #4]
   29060:	681b      	ldr	r3, [r3, #0]
   29062:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   29064:	68fb      	ldr	r3, [r7, #12]
   29066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29068:	b29a      	uxth	r2, r3
   2906a:	230a      	movs	r3, #10
   2906c:	18fb      	adds	r3, r7, r3
   2906e:	05d2      	lsls	r2, r2, #23
   29070:	0dd2      	lsrs	r2, r2, #23
   29072:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
   29074:	687b      	ldr	r3, [r7, #4]
   29076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29078:	220a      	movs	r2, #10
   2907a:	18ba      	adds	r2, r7, r2
   2907c:	8812      	ldrh	r2, [r2, #0]
   2907e:	b2d2      	uxtb	r2, r2
   29080:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
   29082:	687b      	ldr	r3, [r7, #4]
   29084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29086:	1c5a      	adds	r2, r3, #1
   29088:	687b      	ldr	r3, [r7, #4]
   2908a:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   2908c:	687b      	ldr	r3, [r7, #4]
   2908e:	799b      	ldrb	r3, [r3, #6]
   29090:	2b01      	cmp	r3, #1
   29092:	d10d      	bne.n	290b0 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
   29094:	687b      	ldr	r3, [r7, #4]
   29096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29098:	220a      	movs	r2, #10
   2909a:	18ba      	adds	r2, r7, r2
   2909c:	8812      	ldrh	r2, [r2, #0]
   2909e:	0a12      	lsrs	r2, r2, #8
   290a0:	b292      	uxth	r2, r2
   290a2:	b2d2      	uxtb	r2, r2
   290a4:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
   290a6:	687b      	ldr	r3, [r7, #4]
   290a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   290aa:	1c5a      	adds	r2, r3, #1
   290ac:	687b      	ldr	r3, [r7, #4]
   290ae:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
   290b0:	687b      	ldr	r3, [r7, #4]
   290b2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   290b4:	b29b      	uxth	r3, r3
   290b6:	3b01      	subs	r3, #1
   290b8:	b29a      	uxth	r2, r3
   290ba:	687b      	ldr	r3, [r7, #4]
   290bc:	861a      	strh	r2, [r3, #48]	; 0x30
}
   290be:	46c0      	nop			; (mov r8, r8)
   290c0:	46bd      	mov	sp, r7
   290c2:	b004      	add	sp, #16
   290c4:	bd80      	pop	{r7, pc}
	...

000290c8 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   290c8:	b580      	push	{r7, lr}
   290ca:	b086      	sub	sp, #24
   290cc:	af00      	add	r7, sp, #0
   290ce:	0002      	movs	r2, r0
   290d0:	1dfb      	adds	r3, r7, #7
   290d2:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
   290d4:	1dfb      	adds	r3, r7, #7
   290d6:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
   290d8:	4b96      	ldr	r3, [pc, #600]	; (29334 <_spi_interrupt_handler+0x26c>)
   290da:	0092      	lsls	r2, r2, #2
   290dc:	58d3      	ldr	r3, [r2, r3]
   290de:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   290e0:	697b      	ldr	r3, [r7, #20]
   290e2:	681b      	ldr	r3, [r3, #0]
   290e4:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   290e6:	697b      	ldr	r3, [r7, #20]
   290e8:	2237      	movs	r2, #55	; 0x37
   290ea:	5c9a      	ldrb	r2, [r3, r2]
   290ec:	697b      	ldr	r3, [r7, #20]
   290ee:	2136      	movs	r1, #54	; 0x36
   290f0:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
   290f2:	230f      	movs	r3, #15
   290f4:	18fb      	adds	r3, r7, r3
   290f6:	400a      	ands	r2, r1
   290f8:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   290fa:	693b      	ldr	r3, [r7, #16]
   290fc:	7e1b      	ldrb	r3, [r3, #24]
   290fe:	b2da      	uxtb	r2, r3
   29100:	230c      	movs	r3, #12
   29102:	18fb      	adds	r3, r7, r3
   29104:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
   29106:	693b      	ldr	r3, [r7, #16]
   29108:	7d9b      	ldrb	r3, [r3, #22]
   2910a:	b2db      	uxtb	r3, r3
   2910c:	b29a      	uxth	r2, r3
   2910e:	230c      	movs	r3, #12
   29110:	18fb      	adds	r3, r7, r3
   29112:	210c      	movs	r1, #12
   29114:	1879      	adds	r1, r7, r1
   29116:	8809      	ldrh	r1, [r1, #0]
   29118:	400a      	ands	r2, r1
   2911a:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   2911c:	230c      	movs	r3, #12
   2911e:	18fb      	adds	r3, r7, r3
   29120:	881b      	ldrh	r3, [r3, #0]
   29122:	2201      	movs	r2, #1
   29124:	4013      	ands	r3, r2
   29126:	d038      	beq.n	2919a <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   29128:	697b      	ldr	r3, [r7, #20]
   2912a:	795b      	ldrb	r3, [r3, #5]
   2912c:	2b01      	cmp	r3, #1
   2912e:	d110      	bne.n	29152 <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
   29130:	697b      	ldr	r3, [r7, #20]
   29132:	7a5b      	ldrb	r3, [r3, #9]
   29134:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   29136:	2b00      	cmp	r3, #0
   29138:	d10b      	bne.n	29152 <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
   2913a:	697b      	ldr	r3, [r7, #20]
   2913c:	0018      	movs	r0, r3
   2913e:	4b7e      	ldr	r3, [pc, #504]	; (29338 <_spi_interrupt_handler+0x270>)
   29140:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
   29142:	697b      	ldr	r3, [r7, #20]
   29144:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   29146:	b29b      	uxth	r3, r3
   29148:	2b00      	cmp	r3, #0
   2914a:	d102      	bne.n	29152 <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   2914c:	693b      	ldr	r3, [r7, #16]
   2914e:	2201      	movs	r2, #1
   29150:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
   29152:	697b      	ldr	r3, [r7, #20]
   29154:	795b      	ldrb	r3, [r3, #5]
		if (0
   29156:	2b01      	cmp	r3, #1
   29158:	d11f      	bne.n	2919a <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
   2915a:	697b      	ldr	r3, [r7, #20]
   2915c:	7a5b      	ldrb	r3, [r3, #9]
   2915e:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
   29160:	2b00      	cmp	r3, #0
   29162:	d01a      	beq.n	2919a <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
   29164:	697b      	ldr	r3, [r7, #20]
   29166:	0018      	movs	r0, r3
   29168:	4b74      	ldr	r3, [pc, #464]	; (2933c <_spi_interrupt_handler+0x274>)
   2916a:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
   2916c:	697b      	ldr	r3, [r7, #20]
   2916e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   29170:	b29b      	uxth	r3, r3
   29172:	2b00      	cmp	r3, #0
   29174:	d111      	bne.n	2919a <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   29176:	693b      	ldr	r3, [r7, #16]
   29178:	2201      	movs	r2, #1
   2917a:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
   2917c:	697b      	ldr	r3, [r7, #20]
   2917e:	7a5b      	ldrb	r3, [r3, #9]
   29180:	b2db      	uxtb	r3, r3
   29182:	2b01      	cmp	r3, #1
   29184:	d109      	bne.n	2919a <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
   29186:	697b      	ldr	r3, [r7, #20]
   29188:	79db      	ldrb	r3, [r3, #7]
   2918a:	2201      	movs	r2, #1
   2918c:	4053      	eors	r3, r2
   2918e:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
   29190:	2b00      	cmp	r3, #0
   29192:	d002      	beq.n	2919a <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   29194:	693b      	ldr	r3, [r7, #16]
   29196:	2202      	movs	r2, #2
   29198:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   2919a:	230c      	movs	r3, #12
   2919c:	18fb      	adds	r3, r7, r3
   2919e:	881b      	ldrh	r3, [r3, #0]
   291a0:	2204      	movs	r2, #4
   291a2:	4013      	ands	r3, r2
   291a4:	d100      	bne.n	291a8 <_spi_interrupt_handler+0xe0>
   291a6:	e07e      	b.n	292a6 <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   291a8:	693b      	ldr	r3, [r7, #16]
   291aa:	8b5b      	ldrh	r3, [r3, #26]
   291ac:	b29b      	uxth	r3, r3
   291ae:	001a      	movs	r2, r3
   291b0:	2304      	movs	r3, #4
   291b2:	4013      	ands	r3, r2
   291b4:	d022      	beq.n	291fc <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
   291b6:	697b      	ldr	r3, [r7, #20]
   291b8:	7a5b      	ldrb	r3, [r3, #9]
   291ba:	b2db      	uxtb	r3, r3
   291bc:	2b01      	cmp	r3, #1
   291be:	d014      	beq.n	291ea <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   291c0:	697b      	ldr	r3, [r7, #20]
   291c2:	2238      	movs	r2, #56	; 0x38
   291c4:	211e      	movs	r1, #30
   291c6:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   291c8:	697b      	ldr	r3, [r7, #20]
   291ca:	2203      	movs	r2, #3
   291cc:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   291ce:	693b      	ldr	r3, [r7, #16]
   291d0:	2205      	movs	r2, #5
   291d2:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   291d4:	230f      	movs	r3, #15
   291d6:	18fb      	adds	r3, r7, r3
   291d8:	781b      	ldrb	r3, [r3, #0]
   291da:	2208      	movs	r2, #8
   291dc:	4013      	ands	r3, r2
   291de:	d004      	beq.n	291ea <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   291e0:	697b      	ldr	r3, [r7, #20]
   291e2:	699b      	ldr	r3, [r3, #24]
   291e4:	697a      	ldr	r2, [r7, #20]
   291e6:	0010      	movs	r0, r2
   291e8:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   291ea:	693b      	ldr	r3, [r7, #16]
   291ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   291ee:	230a      	movs	r3, #10
   291f0:	18fb      	adds	r3, r7, r3
   291f2:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   291f4:	693b      	ldr	r3, [r7, #16]
   291f6:	2204      	movs	r2, #4
   291f8:	835a      	strh	r2, [r3, #26]
   291fa:	e054      	b.n	292a6 <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
   291fc:	697b      	ldr	r3, [r7, #20]
   291fe:	7a5b      	ldrb	r3, [r3, #9]
   29200:	b2db      	uxtb	r3, r3
   29202:	2b01      	cmp	r3, #1
   29204:	d11e      	bne.n	29244 <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
   29206:	697b      	ldr	r3, [r7, #20]
   29208:	0018      	movs	r0, r3
   2920a:	4b4d      	ldr	r3, [pc, #308]	; (29340 <_spi_interrupt_handler+0x278>)
   2920c:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
   2920e:	697b      	ldr	r3, [r7, #20]
   29210:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   29212:	b29b      	uxth	r3, r3
   29214:	2b00      	cmp	r3, #0
   29216:	d146      	bne.n	292a6 <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   29218:	693b      	ldr	r3, [r7, #16]
   2921a:	2204      	movs	r2, #4
   2921c:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
   2921e:	697b      	ldr	r3, [r7, #20]
   29220:	2238      	movs	r2, #56	; 0x38
   29222:	2100      	movs	r1, #0
   29224:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
   29226:	697b      	ldr	r3, [r7, #20]
   29228:	2203      	movs	r2, #3
   2922a:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
   2922c:	230f      	movs	r3, #15
   2922e:	18fb      	adds	r3, r7, r3
   29230:	781b      	ldrb	r3, [r3, #0]
   29232:	2201      	movs	r2, #1
   29234:	4013      	ands	r3, r2
   29236:	d036      	beq.n	292a6 <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   29238:	697b      	ldr	r3, [r7, #20]
   2923a:	68db      	ldr	r3, [r3, #12]
   2923c:	697a      	ldr	r2, [r7, #20]
   2923e:	0010      	movs	r0, r2
   29240:	4798      	blx	r3
   29242:	e030      	b.n	292a6 <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
   29244:	697b      	ldr	r3, [r7, #20]
   29246:	0018      	movs	r0, r3
   29248:	4b3e      	ldr	r3, [pc, #248]	; (29344 <_spi_interrupt_handler+0x27c>)
   2924a:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
   2924c:	697b      	ldr	r3, [r7, #20]
   2924e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   29250:	b29b      	uxth	r3, r3
   29252:	2b00      	cmp	r3, #0
   29254:	d127      	bne.n	292a6 <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
   29256:	697b      	ldr	r3, [r7, #20]
   29258:	2238      	movs	r2, #56	; 0x38
   2925a:	2100      	movs	r1, #0
   2925c:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   2925e:	693b      	ldr	r3, [r7, #16]
   29260:	2204      	movs	r2, #4
   29262:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   29264:	697b      	ldr	r3, [r7, #20]
   29266:	7a5b      	ldrb	r3, [r3, #9]
   29268:	b2db      	uxtb	r3, r3
   2926a:	2b02      	cmp	r3, #2
   2926c:	d10b      	bne.n	29286 <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   2926e:	230f      	movs	r3, #15
   29270:	18fb      	adds	r3, r7, r3
   29272:	781b      	ldrb	r3, [r3, #0]
   29274:	2204      	movs	r2, #4
   29276:	4013      	ands	r3, r2
   29278:	d015      	beq.n	292a6 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   2927a:	697b      	ldr	r3, [r7, #20]
   2927c:	695b      	ldr	r3, [r3, #20]
   2927e:	697a      	ldr	r2, [r7, #20]
   29280:	0010      	movs	r0, r2
   29282:	4798      	blx	r3
   29284:	e00f      	b.n	292a6 <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
   29286:	697b      	ldr	r3, [r7, #20]
   29288:	7a5b      	ldrb	r3, [r3, #9]
   2928a:	b2db      	uxtb	r3, r3
   2928c:	2b00      	cmp	r3, #0
   2928e:	d10a      	bne.n	292a6 <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   29290:	230f      	movs	r3, #15
   29292:	18fb      	adds	r3, r7, r3
   29294:	781b      	ldrb	r3, [r3, #0]
   29296:	2202      	movs	r2, #2
   29298:	4013      	ands	r3, r2
   2929a:	d004      	beq.n	292a6 <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   2929c:	697b      	ldr	r3, [r7, #20]
   2929e:	691b      	ldr	r3, [r3, #16]
   292a0:	697a      	ldr	r2, [r7, #20]
   292a2:	0010      	movs	r0, r2
   292a4:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   292a6:	230c      	movs	r3, #12
   292a8:	18fb      	adds	r3, r7, r3
   292aa:	881b      	ldrh	r3, [r3, #0]
   292ac:	2202      	movs	r2, #2
   292ae:	4013      	ands	r3, r2
   292b0:	d024      	beq.n	292fc <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   292b2:	697b      	ldr	r3, [r7, #20]
   292b4:	795b      	ldrb	r3, [r3, #5]
   292b6:	2b01      	cmp	r3, #1
   292b8:	d120      	bne.n	292fc <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   292ba:	697b      	ldr	r3, [r7, #20]
   292bc:	7a5b      	ldrb	r3, [r3, #9]
   292be:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   292c0:	2b01      	cmp	r3, #1
   292c2:	d11b      	bne.n	292fc <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   292c4:	697b      	ldr	r3, [r7, #20]
   292c6:	79db      	ldrb	r3, [r3, #7]
   292c8:	2201      	movs	r2, #1
   292ca:	4053      	eors	r3, r2
   292cc:	b2db      	uxtb	r3, r3
   292ce:	2b00      	cmp	r3, #0
   292d0:	d014      	beq.n	292fc <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   292d2:	693b      	ldr	r3, [r7, #16]
   292d4:	2202      	movs	r2, #2
   292d6:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
   292d8:	697b      	ldr	r3, [r7, #20]
   292da:	2203      	movs	r2, #3
   292dc:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
   292de:	697b      	ldr	r3, [r7, #20]
   292e0:	2238      	movs	r2, #56	; 0x38
   292e2:	2100      	movs	r1, #0
   292e4:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   292e6:	230f      	movs	r3, #15
   292e8:	18fb      	adds	r3, r7, r3
   292ea:	781b      	ldrb	r3, [r3, #0]
   292ec:	2201      	movs	r2, #1
   292ee:	4013      	ands	r3, r2
   292f0:	d004      	beq.n	292fc <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   292f2:	697b      	ldr	r3, [r7, #20]
   292f4:	68db      	ldr	r3, [r3, #12]
   292f6:	697a      	ldr	r2, [r7, #20]
   292f8:	0010      	movs	r0, r2
   292fa:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   292fc:	230c      	movs	r3, #12
   292fe:	18fb      	adds	r3, r7, r3
   29300:	881b      	ldrh	r3, [r3, #0]
   29302:	2280      	movs	r2, #128	; 0x80
   29304:	4013      	ands	r3, r2
   29306:	d010      	beq.n	2932a <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   29308:	693b      	ldr	r3, [r7, #16]
   2930a:	2280      	movs	r2, #128	; 0x80
   2930c:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   2930e:	693b      	ldr	r3, [r7, #16]
   29310:	2280      	movs	r2, #128	; 0x80
   29312:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   29314:	230f      	movs	r3, #15
   29316:	18fb      	adds	r3, r7, r3
   29318:	781b      	ldrb	r3, [r3, #0]
   2931a:	2240      	movs	r2, #64	; 0x40
   2931c:	4013      	ands	r3, r2
   2931e:	d004      	beq.n	2932a <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   29320:	697b      	ldr	r3, [r7, #20]
   29322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   29324:	697a      	ldr	r2, [r7, #20]
   29326:	0010      	movs	r0, r2
   29328:	4798      	blx	r3
		}
	}
#  endif
}
   2932a:	46c0      	nop			; (mov r8, r8)
   2932c:	46bd      	mov	sp, r7
   2932e:	b006      	add	sp, #24
   29330:	bd80      	pop	{r7, pc}
   29332:	46c0      	nop			; (mov r8, r8)
   29334:	20005c58 	.word	0x20005c58
   29338:	00028fed 	.word	0x00028fed
   2933c:	00028f71 	.word	0x00028f71
   29340:	00029021 	.word	0x00029021
   29344:	00029057 	.word	0x00029057

00029348 <system_gclk_chan_get_config_defaults>:
{
   29348:	b580      	push	{r7, lr}
   2934a:	b082      	sub	sp, #8
   2934c:	af00      	add	r7, sp, #0
   2934e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   29350:	687b      	ldr	r3, [r7, #4]
   29352:	2200      	movs	r2, #0
   29354:	701a      	strb	r2, [r3, #0]
}
   29356:	46c0      	nop			; (mov r8, r8)
   29358:	46bd      	mov	sp, r7
   2935a:	b002      	add	sp, #8
   2935c:	bd80      	pop	{r7, pc}
	...

00029360 <system_apb_clock_set_mask>:
{
   29360:	b580      	push	{r7, lr}
   29362:	b082      	sub	sp, #8
   29364:	af00      	add	r7, sp, #0
   29366:	0002      	movs	r2, r0
   29368:	6039      	str	r1, [r7, #0]
   2936a:	1dfb      	adds	r3, r7, #7
   2936c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2936e:	1dfb      	adds	r3, r7, #7
   29370:	781b      	ldrb	r3, [r3, #0]
   29372:	2b01      	cmp	r3, #1
   29374:	d00a      	beq.n	2938c <system_apb_clock_set_mask+0x2c>
   29376:	2b02      	cmp	r3, #2
   29378:	d00f      	beq.n	2939a <system_apb_clock_set_mask+0x3a>
   2937a:	2b00      	cmp	r3, #0
   2937c:	d114      	bne.n	293a8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2937e:	4b0e      	ldr	r3, [pc, #56]	; (293b8 <system_apb_clock_set_mask+0x58>)
   29380:	4a0d      	ldr	r2, [pc, #52]	; (293b8 <system_apb_clock_set_mask+0x58>)
   29382:	6991      	ldr	r1, [r2, #24]
   29384:	683a      	ldr	r2, [r7, #0]
   29386:	430a      	orrs	r2, r1
   29388:	619a      	str	r2, [r3, #24]
			break;
   2938a:	e00f      	b.n	293ac <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2938c:	4b0a      	ldr	r3, [pc, #40]	; (293b8 <system_apb_clock_set_mask+0x58>)
   2938e:	4a0a      	ldr	r2, [pc, #40]	; (293b8 <system_apb_clock_set_mask+0x58>)
   29390:	69d1      	ldr	r1, [r2, #28]
   29392:	683a      	ldr	r2, [r7, #0]
   29394:	430a      	orrs	r2, r1
   29396:	61da      	str	r2, [r3, #28]
			break;
   29398:	e008      	b.n	293ac <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2939a:	4b07      	ldr	r3, [pc, #28]	; (293b8 <system_apb_clock_set_mask+0x58>)
   2939c:	4a06      	ldr	r2, [pc, #24]	; (293b8 <system_apb_clock_set_mask+0x58>)
   2939e:	6a11      	ldr	r1, [r2, #32]
   293a0:	683a      	ldr	r2, [r7, #0]
   293a2:	430a      	orrs	r2, r1
   293a4:	621a      	str	r2, [r3, #32]
			break;
   293a6:	e001      	b.n	293ac <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   293a8:	2317      	movs	r3, #23
   293aa:	e000      	b.n	293ae <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   293ac:	2300      	movs	r3, #0
}
   293ae:	0018      	movs	r0, r3
   293b0:	46bd      	mov	sp, r7
   293b2:	b002      	add	sp, #8
   293b4:	bd80      	pop	{r7, pc}
   293b6:	46c0      	nop			; (mov r8, r8)
   293b8:	40000400 	.word	0x40000400

000293bc <system_pinmux_get_config_defaults>:
{
   293bc:	b580      	push	{r7, lr}
   293be:	b082      	sub	sp, #8
   293c0:	af00      	add	r7, sp, #0
   293c2:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   293c4:	687b      	ldr	r3, [r7, #4]
   293c6:	2280      	movs	r2, #128	; 0x80
   293c8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   293ca:	687b      	ldr	r3, [r7, #4]
   293cc:	2200      	movs	r2, #0
   293ce:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   293d0:	687b      	ldr	r3, [r7, #4]
   293d2:	2201      	movs	r2, #1
   293d4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   293d6:	687b      	ldr	r3, [r7, #4]
   293d8:	2200      	movs	r2, #0
   293da:	70da      	strb	r2, [r3, #3]
}
   293dc:	46c0      	nop			; (mov r8, r8)
   293de:	46bd      	mov	sp, r7
   293e0:	b002      	add	sp, #8
   293e2:	bd80      	pop	{r7, pc}

000293e4 <system_is_debugger_present>:
{
   293e4:	b580      	push	{r7, lr}
   293e6:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   293e8:	4b05      	ldr	r3, [pc, #20]	; (29400 <system_is_debugger_present+0x1c>)
   293ea:	789b      	ldrb	r3, [r3, #2]
   293ec:	b2db      	uxtb	r3, r3
   293ee:	001a      	movs	r2, r3
   293f0:	2302      	movs	r3, #2
   293f2:	4013      	ands	r3, r2
   293f4:	1e5a      	subs	r2, r3, #1
   293f6:	4193      	sbcs	r3, r2
   293f8:	b2db      	uxtb	r3, r3
}
   293fa:	0018      	movs	r0, r3
   293fc:	46bd      	mov	sp, r7
   293fe:	bd80      	pop	{r7, pc}
   29400:	41002000 	.word	0x41002000

00029404 <usart_is_syncing>:
{
   29404:	b580      	push	{r7, lr}
   29406:	b084      	sub	sp, #16
   29408:	af00      	add	r7, sp, #0
   2940a:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   2940c:	687b      	ldr	r3, [r7, #4]
   2940e:	681b      	ldr	r3, [r3, #0]
   29410:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   29412:	68fb      	ldr	r3, [r7, #12]
   29414:	69db      	ldr	r3, [r3, #28]
   29416:	1e5a      	subs	r2, r3, #1
   29418:	4193      	sbcs	r3, r2
   2941a:	b2db      	uxtb	r3, r3
}
   2941c:	0018      	movs	r0, r3
   2941e:	46bd      	mov	sp, r7
   29420:	b004      	add	sp, #16
   29422:	bd80      	pop	{r7, pc}

00029424 <_usart_wait_for_sync>:
{
   29424:	b580      	push	{r7, lr}
   29426:	b082      	sub	sp, #8
   29428:	af00      	add	r7, sp, #0
   2942a:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   2942c:	46c0      	nop			; (mov r8, r8)
   2942e:	687b      	ldr	r3, [r7, #4]
   29430:	0018      	movs	r0, r3
   29432:	4b04      	ldr	r3, [pc, #16]	; (29444 <_usart_wait_for_sync+0x20>)
   29434:	4798      	blx	r3
   29436:	1e03      	subs	r3, r0, #0
   29438:	d1f9      	bne.n	2942e <_usart_wait_for_sync+0xa>
}
   2943a:	46c0      	nop			; (mov r8, r8)
   2943c:	46bd      	mov	sp, r7
   2943e:	b002      	add	sp, #8
   29440:	bd80      	pop	{r7, pc}
   29442:	46c0      	nop			; (mov r8, r8)
   29444:	00029405 	.word	0x00029405

00029448 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   29448:	b5b0      	push	{r4, r5, r7, lr}
   2944a:	b08c      	sub	sp, #48	; 0x30
   2944c:	af02      	add	r7, sp, #8
   2944e:	6078      	str	r0, [r7, #4]
   29450:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   29452:	687b      	ldr	r3, [r7, #4]
   29454:	681b      	ldr	r3, [r3, #0]
   29456:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   29458:	687b      	ldr	r3, [r7, #4]
   2945a:	681b      	ldr	r3, [r3, #0]
   2945c:	0018      	movs	r0, r3
   2945e:	4bab      	ldr	r3, [pc, #684]	; (2970c <_usart_set_config+0x2c4>)
   29460:	4798      	blx	r3
   29462:	0003      	movs	r3, r0
   29464:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   29466:	697b      	ldr	r3, [r7, #20]
   29468:	3314      	adds	r3, #20
   2946a:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   2946c:	2300      	movs	r3, #0
   2946e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   29470:	2300      	movs	r3, #0
   29472:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   29474:	230a      	movs	r3, #10
   29476:	18fb      	adds	r3, r7, r3
   29478:	2200      	movs	r2, #0
   2947a:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2947c:	231f      	movs	r3, #31
   2947e:	18fb      	adds	r3, r7, r3
   29480:	2200      	movs	r2, #0
   29482:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   29484:	231e      	movs	r3, #30
   29486:	18fb      	adds	r3, r7, r3
   29488:	2210      	movs	r2, #16
   2948a:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   2948c:	683b      	ldr	r3, [r7, #0]
   2948e:	8a1b      	ldrh	r3, [r3, #16]
   29490:	2280      	movs	r2, #128	; 0x80
   29492:	01d2      	lsls	r2, r2, #7
   29494:	4293      	cmp	r3, r2
   29496:	d01c      	beq.n	294d2 <_usart_set_config+0x8a>
   29498:	2280      	movs	r2, #128	; 0x80
   2949a:	01d2      	lsls	r2, r2, #7
   2949c:	4293      	cmp	r3, r2
   2949e:	dc06      	bgt.n	294ae <_usart_set_config+0x66>
   294a0:	2b00      	cmp	r3, #0
   294a2:	d00d      	beq.n	294c0 <_usart_set_config+0x78>
   294a4:	2280      	movs	r2, #128	; 0x80
   294a6:	0192      	lsls	r2, r2, #6
   294a8:	4293      	cmp	r3, r2
   294aa:	d024      	beq.n	294f6 <_usart_set_config+0xae>
   294ac:	e035      	b.n	2951a <_usart_set_config+0xd2>
   294ae:	22c0      	movs	r2, #192	; 0xc0
   294b0:	01d2      	lsls	r2, r2, #7
   294b2:	4293      	cmp	r3, r2
   294b4:	d028      	beq.n	29508 <_usart_set_config+0xc0>
   294b6:	2280      	movs	r2, #128	; 0x80
   294b8:	0212      	lsls	r2, r2, #8
   294ba:	4293      	cmp	r3, r2
   294bc:	d012      	beq.n	294e4 <_usart_set_config+0x9c>
   294be:	e02c      	b.n	2951a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   294c0:	231f      	movs	r3, #31
   294c2:	18fb      	adds	r3, r7, r3
   294c4:	2200      	movs	r2, #0
   294c6:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   294c8:	231e      	movs	r3, #30
   294ca:	18fb      	adds	r3, r7, r3
   294cc:	2210      	movs	r2, #16
   294ce:	701a      	strb	r2, [r3, #0]
			break;
   294d0:	e023      	b.n	2951a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   294d2:	231f      	movs	r3, #31
   294d4:	18fb      	adds	r3, r7, r3
   294d6:	2200      	movs	r2, #0
   294d8:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   294da:	231e      	movs	r3, #30
   294dc:	18fb      	adds	r3, r7, r3
   294de:	2208      	movs	r2, #8
   294e0:	701a      	strb	r2, [r3, #0]
			break;
   294e2:	e01a      	b.n	2951a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   294e4:	231f      	movs	r3, #31
   294e6:	18fb      	adds	r3, r7, r3
   294e8:	2200      	movs	r2, #0
   294ea:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   294ec:	231e      	movs	r3, #30
   294ee:	18fb      	adds	r3, r7, r3
   294f0:	2203      	movs	r2, #3
   294f2:	701a      	strb	r2, [r3, #0]
			break;
   294f4:	e011      	b.n	2951a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   294f6:	231f      	movs	r3, #31
   294f8:	18fb      	adds	r3, r7, r3
   294fa:	2201      	movs	r2, #1
   294fc:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   294fe:	231e      	movs	r3, #30
   29500:	18fb      	adds	r3, r7, r3
   29502:	2210      	movs	r2, #16
   29504:	701a      	strb	r2, [r3, #0]
			break;
   29506:	e008      	b.n	2951a <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   29508:	231f      	movs	r3, #31
   2950a:	18fb      	adds	r3, r7, r3
   2950c:	2201      	movs	r2, #1
   2950e:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   29510:	231e      	movs	r3, #30
   29512:	18fb      	adds	r3, r7, r3
   29514:	2208      	movs	r2, #8
   29516:	701a      	strb	r2, [r3, #0]
			break;
   29518:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   2951a:	683b      	ldr	r3, [r7, #0]
   2951c:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   2951e:	683b      	ldr	r3, [r7, #0]
   29520:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   29522:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   29524:	683b      	ldr	r3, [r7, #0]
   29526:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   29528:	4313      	orrs	r3, r2
		config->sample_rate |
   2952a:	683a      	ldr	r2, [r7, #0]
   2952c:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   2952e:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   29530:	683a      	ldr	r2, [r7, #0]
   29532:	7e12      	ldrb	r2, [r2, #24]
   29534:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   29536:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   29538:	683a      	ldr	r2, [r7, #0]
   2953a:	2126      	movs	r1, #38	; 0x26
   2953c:	5c52      	ldrb	r2, [r2, r1]
   2953e:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   29540:	4313      	orrs	r3, r2
   29542:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   29544:	231d      	movs	r3, #29
   29546:	18fb      	adds	r3, r7, r3
   29548:	2200      	movs	r2, #0
   2954a:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   2954c:	683b      	ldr	r3, [r7, #0]
   2954e:	685b      	ldr	r3, [r3, #4]
   29550:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   29552:	68fb      	ldr	r3, [r7, #12]
   29554:	2b00      	cmp	r3, #0
   29556:	d01e      	beq.n	29596 <_usart_set_config+0x14e>
   29558:	2280      	movs	r2, #128	; 0x80
   2955a:	0552      	lsls	r2, r2, #21
   2955c:	4293      	cmp	r3, r2
   2955e:	d14f      	bne.n	29600 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   29560:	683b      	ldr	r3, [r7, #0]
   29562:	2227      	movs	r2, #39	; 0x27
   29564:	5c9b      	ldrb	r3, [r3, r2]
   29566:	2201      	movs	r2, #1
   29568:	4053      	eors	r3, r2
   2956a:	b2db      	uxtb	r3, r3
   2956c:	2b00      	cmp	r3, #0
   2956e:	d046      	beq.n	295fe <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   29570:	683b      	ldr	r3, [r7, #0]
   29572:	6a1d      	ldr	r5, [r3, #32]
   29574:	693b      	ldr	r3, [r7, #16]
   29576:	b2db      	uxtb	r3, r3
   29578:	0018      	movs	r0, r3
   2957a:	4b65      	ldr	r3, [pc, #404]	; (29710 <_usart_set_config+0x2c8>)
   2957c:	4798      	blx	r3
   2957e:	0001      	movs	r1, r0
   29580:	231d      	movs	r3, #29
   29582:	18fc      	adds	r4, r7, r3
   29584:	230a      	movs	r3, #10
   29586:	18fb      	adds	r3, r7, r3
   29588:	001a      	movs	r2, r3
   2958a:	0028      	movs	r0, r5
   2958c:	4b61      	ldr	r3, [pc, #388]	; (29714 <_usart_set_config+0x2cc>)
   2958e:	4798      	blx	r3
   29590:	0003      	movs	r3, r0
   29592:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   29594:	e033      	b.n	295fe <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   29596:	683b      	ldr	r3, [r7, #0]
   29598:	2227      	movs	r2, #39	; 0x27
   2959a:	5c9b      	ldrb	r3, [r3, r2]
   2959c:	2b00      	cmp	r3, #0
   2959e:	d014      	beq.n	295ca <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   295a0:	683b      	ldr	r3, [r7, #0]
   295a2:	6a18      	ldr	r0, [r3, #32]
   295a4:	683b      	ldr	r3, [r7, #0]
   295a6:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   295a8:	231d      	movs	r3, #29
   295aa:	18fc      	adds	r4, r7, r3
   295ac:	231f      	movs	r3, #31
   295ae:	18fb      	adds	r3, r7, r3
   295b0:	781d      	ldrb	r5, [r3, #0]
   295b2:	230a      	movs	r3, #10
   295b4:	18fa      	adds	r2, r7, r3
   295b6:	231e      	movs	r3, #30
   295b8:	18fb      	adds	r3, r7, r3
   295ba:	781b      	ldrb	r3, [r3, #0]
   295bc:	9300      	str	r3, [sp, #0]
   295be:	002b      	movs	r3, r5
   295c0:	4d55      	ldr	r5, [pc, #340]	; (29718 <_usart_set_config+0x2d0>)
   295c2:	47a8      	blx	r5
   295c4:	0003      	movs	r3, r0
   295c6:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   295c8:	e01a      	b.n	29600 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   295ca:	683b      	ldr	r3, [r7, #0]
   295cc:	6a1d      	ldr	r5, [r3, #32]
   295ce:	693b      	ldr	r3, [r7, #16]
   295d0:	b2db      	uxtb	r3, r3
   295d2:	0018      	movs	r0, r3
   295d4:	4b4e      	ldr	r3, [pc, #312]	; (29710 <_usart_set_config+0x2c8>)
   295d6:	4798      	blx	r3
				status_code =
   295d8:	231d      	movs	r3, #29
   295da:	18fc      	adds	r4, r7, r3
   295dc:	231f      	movs	r3, #31
   295de:	18fb      	adds	r3, r7, r3
   295e0:	7819      	ldrb	r1, [r3, #0]
   295e2:	230a      	movs	r3, #10
   295e4:	18fa      	adds	r2, r7, r3
   295e6:	231e      	movs	r3, #30
   295e8:	18fb      	adds	r3, r7, r3
   295ea:	781b      	ldrb	r3, [r3, #0]
   295ec:	9300      	str	r3, [sp, #0]
   295ee:	000b      	movs	r3, r1
   295f0:	0001      	movs	r1, r0
   295f2:	0028      	movs	r0, r5
   295f4:	4d48      	ldr	r5, [pc, #288]	; (29718 <_usart_set_config+0x2d0>)
   295f6:	47a8      	blx	r5
   295f8:	0003      	movs	r3, r0
   295fa:	7023      	strb	r3, [r4, #0]
			break;
   295fc:	e000      	b.n	29600 <_usart_set_config+0x1b8>
			break;
   295fe:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   29600:	231d      	movs	r3, #29
   29602:	18fb      	adds	r3, r7, r3
   29604:	781b      	ldrb	r3, [r3, #0]
   29606:	2b00      	cmp	r3, #0
   29608:	d003      	beq.n	29612 <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   2960a:	231d      	movs	r3, #29
   2960c:	18fb      	adds	r3, r7, r3
   2960e:	781b      	ldrb	r3, [r3, #0]
   29610:	e077      	b.n	29702 <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   29612:	683b      	ldr	r3, [r7, #0]
   29614:	7e5b      	ldrb	r3, [r3, #25]
   29616:	2b00      	cmp	r3, #0
   29618:	d003      	beq.n	29622 <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   2961a:	683b      	ldr	r3, [r7, #0]
   2961c:	7e9a      	ldrb	r2, [r3, #26]
   2961e:	69bb      	ldr	r3, [r7, #24]
   29620:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   29622:	687b      	ldr	r3, [r7, #4]
   29624:	0018      	movs	r0, r3
   29626:	4b3d      	ldr	r3, [pc, #244]	; (2971c <_usart_set_config+0x2d4>)
   29628:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   2962a:	230a      	movs	r3, #10
   2962c:	18fb      	adds	r3, r7, r3
   2962e:	881a      	ldrh	r2, [r3, #0]
   29630:	69bb      	ldr	r3, [r7, #24]
   29632:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   29634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   29636:	68fb      	ldr	r3, [r7, #12]
   29638:	4313      	orrs	r3, r2
   2963a:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   2963c:	683b      	ldr	r3, [r7, #0]
   2963e:	2227      	movs	r2, #39	; 0x27
   29640:	5c9b      	ldrb	r3, [r3, r2]
   29642:	2201      	movs	r2, #1
   29644:	4053      	eors	r3, r2
   29646:	b2db      	uxtb	r3, r3
   29648:	2b00      	cmp	r3, #0
   2964a:	d003      	beq.n	29654 <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   2964c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2964e:	2204      	movs	r2, #4
   29650:	4313      	orrs	r3, r2
   29652:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   29654:	683b      	ldr	r3, [r7, #0]
   29656:	7e5b      	ldrb	r3, [r3, #25]
   29658:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   2965a:	683b      	ldr	r3, [r7, #0]
   2965c:	7f1b      	ldrb	r3, [r3, #28]
   2965e:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   29660:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   29662:	683b      	ldr	r3, [r7, #0]
   29664:	7f5b      	ldrb	r3, [r3, #29]
   29666:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   29668:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   2966a:	683b      	ldr	r3, [r7, #0]
   2966c:	2124      	movs	r1, #36	; 0x24
   2966e:	5c5b      	ldrb	r3, [r3, r1]
   29670:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   29672:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   29674:	683b      	ldr	r3, [r7, #0]
   29676:	2125      	movs	r1, #37	; 0x25
   29678:	5c5b      	ldrb	r3, [r3, r1]
   2967a:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   2967c:	4313      	orrs	r3, r2
	ctrlb =  
   2967e:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   29680:	683b      	ldr	r3, [r7, #0]
   29682:	7a9b      	ldrb	r3, [r3, #10]
   29684:	001a      	movs	r2, r3
   29686:	6a3b      	ldr	r3, [r7, #32]
   29688:	4313      	orrs	r3, r2
   2968a:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   2968c:	683b      	ldr	r3, [r7, #0]
   2968e:	7adb      	ldrb	r3, [r3, #11]
   29690:	001a      	movs	r2, r3
   29692:	6a3b      	ldr	r3, [r7, #32]
   29694:	4313      	orrs	r3, r2
   29696:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   29698:	683b      	ldr	r3, [r7, #0]
   2969a:	891b      	ldrh	r3, [r3, #8]
   2969c:	2bff      	cmp	r3, #255	; 0xff
   2969e:	d00b      	beq.n	296b8 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   296a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   296a2:	2280      	movs	r2, #128	; 0x80
   296a4:	0452      	lsls	r2, r2, #17
   296a6:	4313      	orrs	r3, r2
   296a8:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   296aa:	683b      	ldr	r3, [r7, #0]
   296ac:	891b      	ldrh	r3, [r3, #8]
   296ae:	001a      	movs	r2, r3
   296b0:	6a3b      	ldr	r3, [r7, #32]
   296b2:	4313      	orrs	r3, r2
   296b4:	623b      	str	r3, [r7, #32]
   296b6:	e008      	b.n	296ca <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   296b8:	683b      	ldr	r3, [r7, #0]
   296ba:	7edb      	ldrb	r3, [r3, #27]
   296bc:	2b00      	cmp	r3, #0
   296be:	d004      	beq.n	296ca <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   296c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   296c2:	2280      	movs	r2, #128	; 0x80
   296c4:	04d2      	lsls	r2, r2, #19
   296c6:	4313      	orrs	r3, r2
   296c8:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   296ca:	683b      	ldr	r3, [r7, #0]
   296cc:	222c      	movs	r2, #44	; 0x2c
   296ce:	5c9b      	ldrb	r3, [r3, r2]
   296d0:	2b00      	cmp	r3, #0
   296d2:	d103      	bne.n	296dc <_usart_set_config+0x294>
   296d4:	4b12      	ldr	r3, [pc, #72]	; (29720 <_usart_set_config+0x2d8>)
   296d6:	4798      	blx	r3
   296d8:	1e03      	subs	r3, r0, #0
   296da:	d003      	beq.n	296e4 <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   296dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   296de:	2280      	movs	r2, #128	; 0x80
   296e0:	4313      	orrs	r3, r2
   296e2:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   296e4:	687b      	ldr	r3, [r7, #4]
   296e6:	0018      	movs	r0, r3
   296e8:	4b0c      	ldr	r3, [pc, #48]	; (2971c <_usart_set_config+0x2d4>)
   296ea:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   296ec:	69bb      	ldr	r3, [r7, #24]
   296ee:	6a3a      	ldr	r2, [r7, #32]
   296f0:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   296f2:	687b      	ldr	r3, [r7, #4]
   296f4:	0018      	movs	r0, r3
   296f6:	4b09      	ldr	r3, [pc, #36]	; (2971c <_usart_set_config+0x2d4>)
   296f8:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   296fa:	69bb      	ldr	r3, [r7, #24]
   296fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   296fe:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   29700:	2300      	movs	r3, #0
}
   29702:	0018      	movs	r0, r3
   29704:	46bd      	mov	sp, r7
   29706:	b00a      	add	sp, #40	; 0x28
   29708:	bdb0      	pop	{r4, r5, r7, pc}
   2970a:	46c0      	nop			; (mov r8, r8)
   2970c:	000281f1 	.word	0x000281f1
   29710:	0002aba5 	.word	0x0002aba5
   29714:	00027d6b 	.word	0x00027d6b
   29718:	00027de9 	.word	0x00027de9
   2971c:	00029425 	.word	0x00029425
   29720:	000293e5 	.word	0x000293e5

00029724 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   29724:	b590      	push	{r4, r7, lr}
   29726:	b093      	sub	sp, #76	; 0x4c
   29728:	af00      	add	r7, sp, #0
   2972a:	60f8      	str	r0, [r7, #12]
   2972c:	60b9      	str	r1, [r7, #8]
   2972e:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   29730:	233b      	movs	r3, #59	; 0x3b
   29732:	18fb      	adds	r3, r7, r3
   29734:	2200      	movs	r2, #0
   29736:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   29738:	68fb      	ldr	r3, [r7, #12]
   2973a:	68ba      	ldr	r2, [r7, #8]
   2973c:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2973e:	68fb      	ldr	r3, [r7, #12]
   29740:	681b      	ldr	r3, [r3, #0]
   29742:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   29744:	68fb      	ldr	r3, [r7, #12]
   29746:	681b      	ldr	r3, [r3, #0]
   29748:	0018      	movs	r0, r3
   2974a:	4b86      	ldr	r3, [pc, #536]	; (29964 <usart_init+0x240>)
   2974c:	4798      	blx	r3
   2974e:	0003      	movs	r3, r0
   29750:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   29752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   29754:	3302      	adds	r3, #2
   29756:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   29758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2975a:	3314      	adds	r3, #20
   2975c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   2975e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   29760:	681b      	ldr	r3, [r3, #0]
   29762:	2201      	movs	r2, #1
   29764:	4013      	ands	r3, r2
   29766:	d001      	beq.n	2976c <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   29768:	2305      	movs	r3, #5
   2976a:	e0f6      	b.n	2995a <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   2976c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2976e:	681b      	ldr	r3, [r3, #0]
   29770:	2202      	movs	r2, #2
   29772:	4013      	ands	r3, r2
   29774:	d001      	beq.n	2977a <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   29776:	231c      	movs	r3, #28
   29778:	e0ef      	b.n	2995a <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   2977a:	2201      	movs	r2, #1
   2977c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2977e:	409a      	lsls	r2, r3
   29780:	0013      	movs	r3, r2
   29782:	0019      	movs	r1, r3
   29784:	2002      	movs	r0, #2
   29786:	4b78      	ldr	r3, [pc, #480]	; (29968 <usart_init+0x244>)
   29788:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   2978a:	2324      	movs	r3, #36	; 0x24
   2978c:	18fb      	adds	r3, r7, r3
   2978e:	0018      	movs	r0, r3
   29790:	4b76      	ldr	r3, [pc, #472]	; (2996c <usart_init+0x248>)
   29792:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   29794:	687b      	ldr	r3, [r7, #4]
   29796:	222d      	movs	r2, #45	; 0x2d
   29798:	5c9a      	ldrb	r2, [r3, r2]
   2979a:	2324      	movs	r3, #36	; 0x24
   2979c:	18fb      	adds	r3, r7, r3
   2979e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   297a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   297a2:	b2db      	uxtb	r3, r3
   297a4:	2224      	movs	r2, #36	; 0x24
   297a6:	18ba      	adds	r2, r7, r2
   297a8:	0011      	movs	r1, r2
   297aa:	0018      	movs	r0, r3
   297ac:	4b70      	ldr	r3, [pc, #448]	; (29970 <usart_init+0x24c>)
   297ae:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   297b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   297b2:	b2db      	uxtb	r3, r3
   297b4:	0018      	movs	r0, r3
   297b6:	4b6f      	ldr	r3, [pc, #444]	; (29974 <usart_init+0x250>)
   297b8:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   297ba:	687b      	ldr	r3, [r7, #4]
   297bc:	222d      	movs	r2, #45	; 0x2d
   297be:	5c9b      	ldrb	r3, [r3, r2]
   297c0:	2100      	movs	r1, #0
   297c2:	0018      	movs	r0, r3
   297c4:	4b6c      	ldr	r3, [pc, #432]	; (29978 <usart_init+0x254>)
   297c6:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   297c8:	687b      	ldr	r3, [r7, #4]
   297ca:	7ada      	ldrb	r2, [r3, #11]
   297cc:	68fb      	ldr	r3, [r7, #12]
   297ce:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   297d0:	687b      	ldr	r3, [r7, #4]
   297d2:	2224      	movs	r2, #36	; 0x24
   297d4:	5c9a      	ldrb	r2, [r3, r2]
   297d6:	68fb      	ldr	r3, [r7, #12]
   297d8:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   297da:	687b      	ldr	r3, [r7, #4]
   297dc:	2225      	movs	r2, #37	; 0x25
   297de:	5c9a      	ldrb	r2, [r3, r2]
   297e0:	68fb      	ldr	r3, [r7, #12]
   297e2:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   297e4:	687b      	ldr	r3, [r7, #4]
   297e6:	7eda      	ldrb	r2, [r3, #27]
   297e8:	68fb      	ldr	r3, [r7, #12]
   297ea:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   297ec:	687b      	ldr	r3, [r7, #4]
   297ee:	7f1a      	ldrb	r2, [r3, #28]
   297f0:	68fb      	ldr	r3, [r7, #12]
   297f2:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   297f4:	233b      	movs	r3, #59	; 0x3b
   297f6:	18fc      	adds	r4, r7, r3
   297f8:	687a      	ldr	r2, [r7, #4]
   297fa:	68fb      	ldr	r3, [r7, #12]
   297fc:	0011      	movs	r1, r2
   297fe:	0018      	movs	r0, r3
   29800:	4b5e      	ldr	r3, [pc, #376]	; (2997c <usart_init+0x258>)
   29802:	4798      	blx	r3
   29804:	0003      	movs	r3, r0
   29806:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   29808:	233b      	movs	r3, #59	; 0x3b
   2980a:	18fb      	adds	r3, r7, r3
   2980c:	781b      	ldrb	r3, [r3, #0]
   2980e:	2b00      	cmp	r3, #0
   29810:	d003      	beq.n	2981a <usart_init+0xf6>
		return status_code;
   29812:	233b      	movs	r3, #59	; 0x3b
   29814:	18fb      	adds	r3, r7, r3
   29816:	781b      	ldrb	r3, [r3, #0]
   29818:	e09f      	b.n	2995a <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   2981a:	2320      	movs	r3, #32
   2981c:	18fb      	adds	r3, r7, r3
   2981e:	0018      	movs	r0, r3
   29820:	4b57      	ldr	r3, [pc, #348]	; (29980 <usart_init+0x25c>)
   29822:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   29824:	2320      	movs	r3, #32
   29826:	18fb      	adds	r3, r7, r3
   29828:	2200      	movs	r2, #0
   2982a:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   2982c:	2320      	movs	r3, #32
   2982e:	18fb      	adds	r3, r7, r3
   29830:	2200      	movs	r2, #0
   29832:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   29834:	687b      	ldr	r3, [r7, #4]
   29836:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   29838:	2310      	movs	r3, #16
   2983a:	18fb      	adds	r3, r7, r3
   2983c:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   2983e:	687b      	ldr	r3, [r7, #4]
   29840:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   29842:	2310      	movs	r3, #16
   29844:	18fb      	adds	r3, r7, r3
   29846:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   29848:	687b      	ldr	r3, [r7, #4]
   2984a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   2984c:	2310      	movs	r3, #16
   2984e:	18fb      	adds	r3, r7, r3
   29850:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   29852:	687b      	ldr	r3, [r7, #4]
   29854:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   29856:	2310      	movs	r3, #16
   29858:	18fb      	adds	r3, r7, r3
   2985a:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   2985c:	2347      	movs	r3, #71	; 0x47
   2985e:	18fb      	adds	r3, r7, r3
   29860:	2200      	movs	r2, #0
   29862:	701a      	strb	r2, [r3, #0]
   29864:	e02c      	b.n	298c0 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   29866:	2347      	movs	r3, #71	; 0x47
   29868:	18fb      	adds	r3, r7, r3
   2986a:	781a      	ldrb	r2, [r3, #0]
   2986c:	2310      	movs	r3, #16
   2986e:	18fb      	adds	r3, r7, r3
   29870:	0092      	lsls	r2, r2, #2
   29872:	58d3      	ldr	r3, [r2, r3]
   29874:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   29876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   29878:	2b00      	cmp	r3, #0
   2987a:	d109      	bne.n	29890 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   2987c:	2347      	movs	r3, #71	; 0x47
   2987e:	18fb      	adds	r3, r7, r3
   29880:	781a      	ldrb	r2, [r3, #0]
   29882:	68bb      	ldr	r3, [r7, #8]
   29884:	0011      	movs	r1, r2
   29886:	0018      	movs	r0, r3
   29888:	4b3e      	ldr	r3, [pc, #248]	; (29984 <usart_init+0x260>)
   2988a:	4798      	blx	r3
   2988c:	0003      	movs	r3, r0
   2988e:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   29890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   29892:	3301      	adds	r3, #1
   29894:	d00d      	beq.n	298b2 <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   29896:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   29898:	b2da      	uxtb	r2, r3
   2989a:	2320      	movs	r3, #32
   2989c:	18fb      	adds	r3, r7, r3
   2989e:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   298a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   298a2:	0c1b      	lsrs	r3, r3, #16
   298a4:	b2db      	uxtb	r3, r3
   298a6:	2220      	movs	r2, #32
   298a8:	18ba      	adds	r2, r7, r2
   298aa:	0011      	movs	r1, r2
   298ac:	0018      	movs	r0, r3
   298ae:	4b36      	ldr	r3, [pc, #216]	; (29988 <usart_init+0x264>)
   298b0:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   298b2:	2347      	movs	r3, #71	; 0x47
   298b4:	18fb      	adds	r3, r7, r3
   298b6:	781a      	ldrb	r2, [r3, #0]
   298b8:	2347      	movs	r3, #71	; 0x47
   298ba:	18fb      	adds	r3, r7, r3
   298bc:	3201      	adds	r2, #1
   298be:	701a      	strb	r2, [r3, #0]
   298c0:	2347      	movs	r3, #71	; 0x47
   298c2:	18fb      	adds	r3, r7, r3
   298c4:	781b      	ldrb	r3, [r3, #0]
   298c6:	2b03      	cmp	r3, #3
   298c8:	d9cd      	bls.n	29866 <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   298ca:	2300      	movs	r3, #0
   298cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   298ce:	e00a      	b.n	298e6 <usart_init+0x1c2>
		module->callback[i]            = NULL;
   298d0:	68fa      	ldr	r2, [r7, #12]
   298d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   298d4:	3302      	adds	r3, #2
   298d6:	009b      	lsls	r3, r3, #2
   298d8:	18d3      	adds	r3, r2, r3
   298da:	3304      	adds	r3, #4
   298dc:	2200      	movs	r2, #0
   298de:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   298e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   298e2:	3301      	adds	r3, #1
   298e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   298e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   298e8:	2b05      	cmp	r3, #5
   298ea:	d9f1      	bls.n	298d0 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   298ec:	68fb      	ldr	r3, [r7, #12]
   298ee:	2200      	movs	r2, #0
   298f0:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   298f2:	68fb      	ldr	r3, [r7, #12]
   298f4:	2200      	movs	r2, #0
   298f6:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   298f8:	68fb      	ldr	r3, [r7, #12]
   298fa:	2200      	movs	r2, #0
   298fc:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   298fe:	68fb      	ldr	r3, [r7, #12]
   29900:	2200      	movs	r2, #0
   29902:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   29904:	68fb      	ldr	r3, [r7, #12]
   29906:	2230      	movs	r2, #48	; 0x30
   29908:	2100      	movs	r1, #0
   2990a:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   2990c:	68fb      	ldr	r3, [r7, #12]
   2990e:	2231      	movs	r2, #49	; 0x31
   29910:	2100      	movs	r1, #0
   29912:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   29914:	68fb      	ldr	r3, [r7, #12]
   29916:	2232      	movs	r2, #50	; 0x32
   29918:	2100      	movs	r1, #0
   2991a:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   2991c:	68fb      	ldr	r3, [r7, #12]
   2991e:	2233      	movs	r2, #51	; 0x33
   29920:	2100      	movs	r1, #0
   29922:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   29924:	68fb      	ldr	r3, [r7, #12]
   29926:	681b      	ldr	r3, [r3, #0]
   29928:	2227      	movs	r2, #39	; 0x27
   2992a:	18bc      	adds	r4, r7, r2
   2992c:	0018      	movs	r0, r3
   2992e:	4b0d      	ldr	r3, [pc, #52]	; (29964 <usart_init+0x240>)
   29930:	4798      	blx	r3
   29932:	0003      	movs	r3, r0
   29934:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   29936:	4a15      	ldr	r2, [pc, #84]	; (2998c <usart_init+0x268>)
   29938:	2327      	movs	r3, #39	; 0x27
   2993a:	18fb      	adds	r3, r7, r3
   2993c:	781b      	ldrb	r3, [r3, #0]
   2993e:	0011      	movs	r1, r2
   29940:	0018      	movs	r0, r3
   29942:	4b13      	ldr	r3, [pc, #76]	; (29990 <usart_init+0x26c>)
   29944:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   29946:	2327      	movs	r3, #39	; 0x27
   29948:	18fb      	adds	r3, r7, r3
   2994a:	781a      	ldrb	r2, [r3, #0]
   2994c:	4b11      	ldr	r3, [pc, #68]	; (29994 <usart_init+0x270>)
   2994e:	0092      	lsls	r2, r2, #2
   29950:	68f9      	ldr	r1, [r7, #12]
   29952:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   29954:	233b      	movs	r3, #59	; 0x3b
   29956:	18fb      	adds	r3, r7, r3
   29958:	781b      	ldrb	r3, [r3, #0]
}
   2995a:	0018      	movs	r0, r3
   2995c:	46bd      	mov	sp, r7
   2995e:	b013      	add	sp, #76	; 0x4c
   29960:	bd90      	pop	{r4, r7, pc}
   29962:	46c0      	nop			; (mov r8, r8)
   29964:	000281f1 	.word	0x000281f1
   29968:	00029361 	.word	0x00029361
   2996c:	00029349 	.word	0x00029349
   29970:	0002aa81 	.word	0x0002aa81
   29974:	0002aac5 	.word	0x0002aac5
   29978:	00027fa9 	.word	0x00027fa9
   2997c:	00029449 	.word	0x00029449
   29980:	000293bd 	.word	0x000293bd
   29984:	00028035 	.word	0x00028035
   29988:	0002ade1 	.word	0x0002ade1
   2998c:	00029c01 	.word	0x00029c01
   29990:	00028255 	.word	0x00028255
   29994:	20005c58 	.word	0x20005c58

00029998 <system_interrupt_enter_critical_section>:
{
   29998:	b580      	push	{r7, lr}
   2999a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   2999c:	4b02      	ldr	r3, [pc, #8]	; (299a8 <system_interrupt_enter_critical_section+0x10>)
   2999e:	4798      	blx	r3
}
   299a0:	46c0      	nop			; (mov r8, r8)
   299a2:	46bd      	mov	sp, r7
   299a4:	bd80      	pop	{r7, pc}
   299a6:	46c0      	nop			; (mov r8, r8)
   299a8:	00026ded 	.word	0x00026ded

000299ac <system_interrupt_leave_critical_section>:
{
   299ac:	b580      	push	{r7, lr}
   299ae:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   299b0:	4b02      	ldr	r3, [pc, #8]	; (299bc <system_interrupt_leave_critical_section+0x10>)
   299b2:	4798      	blx	r3
}
   299b4:	46c0      	nop			; (mov r8, r8)
   299b6:	46bd      	mov	sp, r7
   299b8:	bd80      	pop	{r7, pc}
   299ba:	46c0      	nop			; (mov r8, r8)
   299bc:	00026e41 	.word	0x00026e41

000299c0 <usart_is_syncing>:
{
   299c0:	b580      	push	{r7, lr}
   299c2:	b084      	sub	sp, #16
   299c4:	af00      	add	r7, sp, #0
   299c6:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   299c8:	687b      	ldr	r3, [r7, #4]
   299ca:	681b      	ldr	r3, [r3, #0]
   299cc:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   299ce:	68fb      	ldr	r3, [r7, #12]
   299d0:	69db      	ldr	r3, [r3, #28]
   299d2:	1e5a      	subs	r2, r3, #1
   299d4:	4193      	sbcs	r3, r2
   299d6:	b2db      	uxtb	r3, r3
}
   299d8:	0018      	movs	r0, r3
   299da:	46bd      	mov	sp, r7
   299dc:	b004      	add	sp, #16
   299de:	bd80      	pop	{r7, pc}

000299e0 <_usart_wait_for_sync>:
{
   299e0:	b580      	push	{r7, lr}
   299e2:	b082      	sub	sp, #8
   299e4:	af00      	add	r7, sp, #0
   299e6:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   299e8:	46c0      	nop			; (mov r8, r8)
   299ea:	687b      	ldr	r3, [r7, #4]
   299ec:	0018      	movs	r0, r3
   299ee:	4b04      	ldr	r3, [pc, #16]	; (29a00 <_usart_wait_for_sync+0x20>)
   299f0:	4798      	blx	r3
   299f2:	1e03      	subs	r3, r0, #0
   299f4:	d1f9      	bne.n	299ea <_usart_wait_for_sync+0xa>
}
   299f6:	46c0      	nop			; (mov r8, r8)
   299f8:	46bd      	mov	sp, r7
   299fa:	b002      	add	sp, #8
   299fc:	bd80      	pop	{r7, pc}
   299fe:	46c0      	nop			; (mov r8, r8)
   29a00:	000299c1 	.word	0x000299c1

00029a04 <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   29a04:	b580      	push	{r7, lr}
   29a06:	b086      	sub	sp, #24
   29a08:	af00      	add	r7, sp, #0
   29a0a:	60f8      	str	r0, [r7, #12]
   29a0c:	60b9      	str	r1, [r7, #8]
   29a0e:	1dbb      	adds	r3, r7, #6
   29a10:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   29a12:	68fb      	ldr	r3, [r7, #12]
   29a14:	681b      	ldr	r3, [r3, #0]
   29a16:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   29a18:	4b0f      	ldr	r3, [pc, #60]	; (29a58 <_usart_write_buffer+0x54>)
   29a1a:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   29a1c:	68fb      	ldr	r3, [r7, #12]
   29a1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   29a20:	b29b      	uxth	r3, r3
   29a22:	2b00      	cmp	r3, #0
   29a24:	d003      	beq.n	29a2e <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
   29a26:	4b0d      	ldr	r3, [pc, #52]	; (29a5c <_usart_write_buffer+0x58>)
   29a28:	4798      	blx	r3
		return STATUS_BUSY;
   29a2a:	2305      	movs	r3, #5
   29a2c:	e010      	b.n	29a50 <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
   29a2e:	68fb      	ldr	r3, [r7, #12]
   29a30:	1dba      	adds	r2, r7, #6
   29a32:	8812      	ldrh	r2, [r2, #0]
   29a34:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
   29a36:	4b09      	ldr	r3, [pc, #36]	; (29a5c <_usart_write_buffer+0x58>)
   29a38:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
   29a3a:	68fb      	ldr	r3, [r7, #12]
   29a3c:	68ba      	ldr	r2, [r7, #8]
   29a3e:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   29a40:	68fb      	ldr	r3, [r7, #12]
   29a42:	2233      	movs	r2, #51	; 0x33
   29a44:	2105      	movs	r1, #5
   29a46:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   29a48:	697b      	ldr	r3, [r7, #20]
   29a4a:	2201      	movs	r2, #1
   29a4c:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
   29a4e:	2300      	movs	r3, #0
}
   29a50:	0018      	movs	r0, r3
   29a52:	46bd      	mov	sp, r7
   29a54:	b006      	add	sp, #24
   29a56:	bd80      	pop	{r7, pc}
   29a58:	00029999 	.word	0x00029999
   29a5c:	000299ad 	.word	0x000299ad

00029a60 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   29a60:	b580      	push	{r7, lr}
   29a62:	b086      	sub	sp, #24
   29a64:	af00      	add	r7, sp, #0
   29a66:	60f8      	str	r0, [r7, #12]
   29a68:	60b9      	str	r1, [r7, #8]
   29a6a:	1dbb      	adds	r3, r7, #6
   29a6c:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   29a6e:	68fb      	ldr	r3, [r7, #12]
   29a70:	681b      	ldr	r3, [r3, #0]
   29a72:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   29a74:	4b16      	ldr	r3, [pc, #88]	; (29ad0 <_usart_read_buffer+0x70>)
   29a76:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   29a78:	68fb      	ldr	r3, [r7, #12]
   29a7a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   29a7c:	b29b      	uxth	r3, r3
   29a7e:	2b00      	cmp	r3, #0
   29a80:	d003      	beq.n	29a8a <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
   29a82:	4b14      	ldr	r3, [pc, #80]	; (29ad4 <_usart_read_buffer+0x74>)
   29a84:	4798      	blx	r3
		return STATUS_BUSY;
   29a86:	2305      	movs	r3, #5
   29a88:	e01e      	b.n	29ac8 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
   29a8a:	68fb      	ldr	r3, [r7, #12]
   29a8c:	1dba      	adds	r2, r7, #6
   29a8e:	8812      	ldrh	r2, [r2, #0]
   29a90:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
   29a92:	4b10      	ldr	r3, [pc, #64]	; (29ad4 <_usart_read_buffer+0x74>)
   29a94:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
   29a96:	68fb      	ldr	r3, [r7, #12]
   29a98:	68ba      	ldr	r2, [r7, #8]
   29a9a:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   29a9c:	68fb      	ldr	r3, [r7, #12]
   29a9e:	2232      	movs	r2, #50	; 0x32
   29aa0:	2105      	movs	r1, #5
   29aa2:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   29aa4:	697b      	ldr	r3, [r7, #20]
   29aa6:	2204      	movs	r2, #4
   29aa8:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
   29aaa:	68fb      	ldr	r3, [r7, #12]
   29aac:	7a1b      	ldrb	r3, [r3, #8]
   29aae:	2b00      	cmp	r3, #0
   29ab0:	d002      	beq.n	29ab8 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   29ab2:	697b      	ldr	r3, [r7, #20]
   29ab4:	2220      	movs	r2, #32
   29ab6:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
   29ab8:	68fb      	ldr	r3, [r7, #12]
   29aba:	7a5b      	ldrb	r3, [r3, #9]
   29abc:	2b00      	cmp	r3, #0
   29abe:	d002      	beq.n	29ac6 <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   29ac0:	697b      	ldr	r3, [r7, #20]
   29ac2:	2208      	movs	r2, #8
   29ac4:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
   29ac6:	2300      	movs	r3, #0
}
   29ac8:	0018      	movs	r0, r3
   29aca:	46bd      	mov	sp, r7
   29acc:	b006      	add	sp, #24
   29ace:	bd80      	pop	{r7, pc}
   29ad0:	00029999 	.word	0x00029999
   29ad4:	000299ad 	.word	0x000299ad

00029ad8 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
   29ad8:	b580      	push	{r7, lr}
   29ada:	b084      	sub	sp, #16
   29adc:	af00      	add	r7, sp, #0
   29ade:	60f8      	str	r0, [r7, #12]
   29ae0:	60b9      	str	r1, [r7, #8]
   29ae2:	1dfb      	adds	r3, r7, #7
   29ae4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   29ae6:	1dfb      	adds	r3, r7, #7
   29ae8:	781b      	ldrb	r3, [r3, #0]
   29aea:	68fa      	ldr	r2, [r7, #12]
   29aec:	3302      	adds	r3, #2
   29aee:	009b      	lsls	r3, r3, #2
   29af0:	18d3      	adds	r3, r2, r3
   29af2:	3304      	adds	r3, #4
   29af4:	68ba      	ldr	r2, [r7, #8]
   29af6:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   29af8:	68fb      	ldr	r3, [r7, #12]
   29afa:	2230      	movs	r2, #48	; 0x30
   29afc:	5c9b      	ldrb	r3, [r3, r2]
   29afe:	b25a      	sxtb	r2, r3
   29b00:	1dfb      	adds	r3, r7, #7
   29b02:	781b      	ldrb	r3, [r3, #0]
   29b04:	2101      	movs	r1, #1
   29b06:	4099      	lsls	r1, r3
   29b08:	000b      	movs	r3, r1
   29b0a:	b25b      	sxtb	r3, r3
   29b0c:	4313      	orrs	r3, r2
   29b0e:	b25b      	sxtb	r3, r3
   29b10:	b2d9      	uxtb	r1, r3
   29b12:	68fb      	ldr	r3, [r7, #12]
   29b14:	2230      	movs	r2, #48	; 0x30
   29b16:	5499      	strb	r1, [r3, r2]
}
   29b18:	46c0      	nop			; (mov r8, r8)
   29b1a:	46bd      	mov	sp, r7
   29b1c:	b004      	add	sp, #16
   29b1e:	bd80      	pop	{r7, pc}

00029b20 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   29b20:	b580      	push	{r7, lr}
   29b22:	b084      	sub	sp, #16
   29b24:	af00      	add	r7, sp, #0
   29b26:	60f8      	str	r0, [r7, #12]
   29b28:	60b9      	str	r1, [r7, #8]
   29b2a:	1dbb      	adds	r3, r7, #6
   29b2c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
   29b2e:	1dbb      	adds	r3, r7, #6
   29b30:	881b      	ldrh	r3, [r3, #0]
   29b32:	2b00      	cmp	r3, #0
   29b34:	d101      	bne.n	29b3a <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   29b36:	2317      	movs	r3, #23
   29b38:	e010      	b.n	29b5c <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   29b3a:	68fb      	ldr	r3, [r7, #12]
   29b3c:	79db      	ldrb	r3, [r3, #7]
   29b3e:	2201      	movs	r2, #1
   29b40:	4053      	eors	r3, r2
   29b42:	b2db      	uxtb	r3, r3
   29b44:	2b00      	cmp	r3, #0
   29b46:	d001      	beq.n	29b4c <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   29b48:	231c      	movs	r3, #28
   29b4a:	e007      	b.n	29b5c <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
   29b4c:	1dbb      	adds	r3, r7, #6
   29b4e:	881a      	ldrh	r2, [r3, #0]
   29b50:	68b9      	ldr	r1, [r7, #8]
   29b52:	68fb      	ldr	r3, [r7, #12]
   29b54:	0018      	movs	r0, r3
   29b56:	4b03      	ldr	r3, [pc, #12]	; (29b64 <usart_write_buffer_job+0x44>)
   29b58:	4798      	blx	r3
   29b5a:	0003      	movs	r3, r0
}
   29b5c:	0018      	movs	r0, r3
   29b5e:	46bd      	mov	sp, r7
   29b60:	b004      	add	sp, #16
   29b62:	bd80      	pop	{r7, pc}
   29b64:	00029a05 	.word	0x00029a05

00029b68 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   29b68:	b580      	push	{r7, lr}
   29b6a:	b084      	sub	sp, #16
   29b6c:	af00      	add	r7, sp, #0
   29b6e:	60f8      	str	r0, [r7, #12]
   29b70:	60b9      	str	r1, [r7, #8]
   29b72:	1dbb      	adds	r3, r7, #6
   29b74:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
   29b76:	1dbb      	adds	r3, r7, #6
   29b78:	881b      	ldrh	r3, [r3, #0]
   29b7a:	2b00      	cmp	r3, #0
   29b7c:	d101      	bne.n	29b82 <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   29b7e:	2317      	movs	r3, #23
   29b80:	e010      	b.n	29ba4 <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   29b82:	68fb      	ldr	r3, [r7, #12]
   29b84:	799b      	ldrb	r3, [r3, #6]
   29b86:	2201      	movs	r2, #1
   29b88:	4053      	eors	r3, r2
   29b8a:	b2db      	uxtb	r3, r3
   29b8c:	2b00      	cmp	r3, #0
   29b8e:	d001      	beq.n	29b94 <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   29b90:	231c      	movs	r3, #28
   29b92:	e007      	b.n	29ba4 <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
   29b94:	1dbb      	adds	r3, r7, #6
   29b96:	881a      	ldrh	r2, [r3, #0]
   29b98:	68b9      	ldr	r1, [r7, #8]
   29b9a:	68fb      	ldr	r3, [r7, #12]
   29b9c:	0018      	movs	r0, r3
   29b9e:	4b03      	ldr	r3, [pc, #12]	; (29bac <usart_read_buffer_job+0x44>)
   29ba0:	4798      	blx	r3
   29ba2:	0003      	movs	r3, r0
}
   29ba4:	0018      	movs	r0, r3
   29ba6:	46bd      	mov	sp, r7
   29ba8:	b004      	add	sp, #16
   29baa:	bd80      	pop	{r7, pc}
   29bac:	00029a61 	.word	0x00029a61

00029bb0 <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
   29bb0:	b580      	push	{r7, lr}
   29bb2:	b084      	sub	sp, #16
   29bb4:	af00      	add	r7, sp, #0
   29bb6:	6078      	str	r0, [r7, #4]
   29bb8:	000a      	movs	r2, r1
   29bba:	1cfb      	adds	r3, r7, #3
   29bbc:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   29bbe:	1cfb      	adds	r3, r7, #3
   29bc0:	781b      	ldrb	r3, [r3, #0]
   29bc2:	2b00      	cmp	r3, #0
   29bc4:	d002      	beq.n	29bcc <usart_get_job_status+0x1c>
   29bc6:	2b01      	cmp	r3, #1
   29bc8:	d007      	beq.n	29bda <usart_get_job_status+0x2a>
   29bca:	e00d      	b.n	29be8 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
   29bcc:	230f      	movs	r3, #15
   29bce:	18fb      	adds	r3, r7, r3
   29bd0:	687a      	ldr	r2, [r7, #4]
   29bd2:	2132      	movs	r1, #50	; 0x32
   29bd4:	5c52      	ldrb	r2, [r2, r1]
   29bd6:	701a      	strb	r2, [r3, #0]
			break;
   29bd8:	e00b      	b.n	29bf2 <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
   29bda:	230f      	movs	r3, #15
   29bdc:	18fb      	adds	r3, r7, r3
   29bde:	687a      	ldr	r2, [r7, #4]
   29be0:	2133      	movs	r1, #51	; 0x33
   29be2:	5c52      	ldrb	r2, [r2, r1]
   29be4:	701a      	strb	r2, [r3, #0]
			break;
   29be6:	e004      	b.n	29bf2 <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   29be8:	230f      	movs	r3, #15
   29bea:	18fb      	adds	r3, r7, r3
   29bec:	2217      	movs	r2, #23
   29bee:	701a      	strb	r2, [r3, #0]
			break;
   29bf0:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
   29bf2:	230f      	movs	r3, #15
   29bf4:	18fb      	adds	r3, r7, r3
   29bf6:	781b      	ldrb	r3, [r3, #0]
}
   29bf8:	0018      	movs	r0, r3
   29bfa:	46bd      	mov	sp, r7
   29bfc:	b004      	add	sp, #16
   29bfe:	bd80      	pop	{r7, pc}

00029c00 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   29c00:	b580      	push	{r7, lr}
   29c02:	b088      	sub	sp, #32
   29c04:	af00      	add	r7, sp, #0
   29c06:	0002      	movs	r2, r0
   29c08:	1dfb      	adds	r3, r7, #7
   29c0a:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   29c0c:	1dfb      	adds	r3, r7, #7
   29c0e:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   29c10:	4ba3      	ldr	r3, [pc, #652]	; (29ea0 <_usart_interrupt_handler+0x2a0>)
   29c12:	0092      	lsls	r2, r2, #2
   29c14:	58d3      	ldr	r3, [r2, r3]
   29c16:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   29c18:	69bb      	ldr	r3, [r7, #24]
   29c1a:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   29c1c:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   29c1e:	69bb      	ldr	r3, [r7, #24]
   29c20:	0018      	movs	r0, r3
   29c22:	4ba0      	ldr	r3, [pc, #640]	; (29ea4 <_usart_interrupt_handler+0x2a4>)
   29c24:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   29c26:	697b      	ldr	r3, [r7, #20]
   29c28:	7e1b      	ldrb	r3, [r3, #24]
   29c2a:	b2da      	uxtb	r2, r3
   29c2c:	2312      	movs	r3, #18
   29c2e:	18fb      	adds	r3, r7, r3
   29c30:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   29c32:	697b      	ldr	r3, [r7, #20]
   29c34:	7d9b      	ldrb	r3, [r3, #22]
   29c36:	b2db      	uxtb	r3, r3
   29c38:	b29a      	uxth	r2, r3
   29c3a:	2312      	movs	r3, #18
   29c3c:	18fb      	adds	r3, r7, r3
   29c3e:	2112      	movs	r1, #18
   29c40:	1879      	adds	r1, r7, r1
   29c42:	8809      	ldrh	r1, [r1, #0]
   29c44:	400a      	ands	r2, r1
   29c46:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   29c48:	69bb      	ldr	r3, [r7, #24]
   29c4a:	2230      	movs	r2, #48	; 0x30
   29c4c:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   29c4e:	69ba      	ldr	r2, [r7, #24]
   29c50:	2131      	movs	r1, #49	; 0x31
   29c52:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   29c54:	4013      	ands	r3, r2
   29c56:	b2da      	uxtb	r2, r3
   29c58:	2310      	movs	r3, #16
   29c5a:	18fb      	adds	r3, r7, r3
   29c5c:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   29c5e:	2312      	movs	r3, #18
   29c60:	18fb      	adds	r3, r7, r3
   29c62:	881b      	ldrh	r3, [r3, #0]
   29c64:	2201      	movs	r2, #1
   29c66:	4013      	ands	r3, r2
   29c68:	d044      	beq.n	29cf4 <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   29c6a:	69bb      	ldr	r3, [r7, #24]
   29c6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   29c6e:	b29b      	uxth	r3, r3
   29c70:	2b00      	cmp	r3, #0
   29c72:	d03c      	beq.n	29cee <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   29c74:	69bb      	ldr	r3, [r7, #24]
   29c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29c78:	781b      	ldrb	r3, [r3, #0]
   29c7a:	b2da      	uxtb	r2, r3
   29c7c:	231c      	movs	r3, #28
   29c7e:	18fb      	adds	r3, r7, r3
   29c80:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   29c82:	69bb      	ldr	r3, [r7, #24]
   29c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29c86:	1c5a      	adds	r2, r3, #1
   29c88:	69bb      	ldr	r3, [r7, #24]
   29c8a:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   29c8c:	69bb      	ldr	r3, [r7, #24]
   29c8e:	795b      	ldrb	r3, [r3, #5]
   29c90:	2b01      	cmp	r3, #1
   29c92:	d113      	bne.n	29cbc <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   29c94:	69bb      	ldr	r3, [r7, #24]
   29c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29c98:	781b      	ldrb	r3, [r3, #0]
   29c9a:	b2db      	uxtb	r3, r3
   29c9c:	021b      	lsls	r3, r3, #8
   29c9e:	b21a      	sxth	r2, r3
   29ca0:	231c      	movs	r3, #28
   29ca2:	18fb      	adds	r3, r7, r3
   29ca4:	2100      	movs	r1, #0
   29ca6:	5e5b      	ldrsh	r3, [r3, r1]
   29ca8:	4313      	orrs	r3, r2
   29caa:	b21a      	sxth	r2, r3
   29cac:	231c      	movs	r3, #28
   29cae:	18fb      	adds	r3, r7, r3
   29cb0:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   29cb2:	69bb      	ldr	r3, [r7, #24]
   29cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29cb6:	1c5a      	adds	r2, r3, #1
   29cb8:	69bb      	ldr	r3, [r7, #24]
   29cba:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   29cbc:	231c      	movs	r3, #28
   29cbe:	18fb      	adds	r3, r7, r3
   29cc0:	881b      	ldrh	r3, [r3, #0]
   29cc2:	05db      	lsls	r3, r3, #23
   29cc4:	0ddb      	lsrs	r3, r3, #23
   29cc6:	b29a      	uxth	r2, r3
   29cc8:	697b      	ldr	r3, [r7, #20]
   29cca:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   29ccc:	69bb      	ldr	r3, [r7, #24]
   29cce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   29cd0:	b29b      	uxth	r3, r3
   29cd2:	3b01      	subs	r3, #1
   29cd4:	b29b      	uxth	r3, r3
   29cd6:	69ba      	ldr	r2, [r7, #24]
   29cd8:	1c19      	adds	r1, r3, #0
   29cda:	85d1      	strh	r1, [r2, #46]	; 0x2e
   29cdc:	2b00      	cmp	r3, #0
   29cde:	d109      	bne.n	29cf4 <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   29ce0:	697b      	ldr	r3, [r7, #20]
   29ce2:	2201      	movs	r2, #1
   29ce4:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   29ce6:	697b      	ldr	r3, [r7, #20]
   29ce8:	2202      	movs	r2, #2
   29cea:	759a      	strb	r2, [r3, #22]
   29cec:	e002      	b.n	29cf4 <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   29cee:	697b      	ldr	r3, [r7, #20]
   29cf0:	2201      	movs	r2, #1
   29cf2:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   29cf4:	2312      	movs	r3, #18
   29cf6:	18fb      	adds	r3, r7, r3
   29cf8:	881b      	ldrh	r3, [r3, #0]
   29cfa:	2202      	movs	r2, #2
   29cfc:	4013      	ands	r3, r2
   29cfe:	d011      	beq.n	29d24 <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   29d00:	697b      	ldr	r3, [r7, #20]
   29d02:	2202      	movs	r2, #2
   29d04:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   29d06:	69bb      	ldr	r3, [r7, #24]
   29d08:	2233      	movs	r2, #51	; 0x33
   29d0a:	2100      	movs	r1, #0
   29d0c:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   29d0e:	2310      	movs	r3, #16
   29d10:	18fb      	adds	r3, r7, r3
   29d12:	881b      	ldrh	r3, [r3, #0]
   29d14:	2201      	movs	r2, #1
   29d16:	4013      	ands	r3, r2
   29d18:	d004      	beq.n	29d24 <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   29d1a:	69bb      	ldr	r3, [r7, #24]
   29d1c:	68db      	ldr	r3, [r3, #12]
   29d1e:	69ba      	ldr	r2, [r7, #24]
   29d20:	0010      	movs	r0, r2
   29d22:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   29d24:	2312      	movs	r3, #18
   29d26:	18fb      	adds	r3, r7, r3
   29d28:	881b      	ldrh	r3, [r3, #0]
   29d2a:	2204      	movs	r2, #4
   29d2c:	4013      	ands	r3, r2
   29d2e:	d100      	bne.n	29d32 <_usart_interrupt_handler+0x132>
   29d30:	e0bd      	b.n	29eae <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   29d32:	69bb      	ldr	r3, [r7, #24]
   29d34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   29d36:	b29b      	uxth	r3, r3
   29d38:	2b00      	cmp	r3, #0
   29d3a:	d100      	bne.n	29d3e <_usart_interrupt_handler+0x13e>
   29d3c:	e0b4      	b.n	29ea8 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   29d3e:	697b      	ldr	r3, [r7, #20]
   29d40:	8b5b      	ldrh	r3, [r3, #26]
   29d42:	b29b      	uxth	r3, r3
   29d44:	b2da      	uxtb	r2, r3
   29d46:	231f      	movs	r3, #31
   29d48:	18fb      	adds	r3, r7, r3
   29d4a:	213f      	movs	r1, #63	; 0x3f
   29d4c:	400a      	ands	r2, r1
   29d4e:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   29d50:	231f      	movs	r3, #31
   29d52:	18fb      	adds	r3, r7, r3
   29d54:	781b      	ldrb	r3, [r3, #0]
   29d56:	2208      	movs	r2, #8
   29d58:	4013      	ands	r3, r2
   29d5a:	d007      	beq.n	29d6c <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   29d5c:	231f      	movs	r3, #31
   29d5e:	18fb      	adds	r3, r7, r3
   29d60:	221f      	movs	r2, #31
   29d62:	18ba      	adds	r2, r7, r2
   29d64:	7812      	ldrb	r2, [r2, #0]
   29d66:	2108      	movs	r1, #8
   29d68:	438a      	bics	r2, r1
   29d6a:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   29d6c:	231f      	movs	r3, #31
   29d6e:	18fb      	adds	r3, r7, r3
   29d70:	781b      	ldrb	r3, [r3, #0]
   29d72:	2b00      	cmp	r3, #0
   29d74:	d050      	beq.n	29e18 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   29d76:	231f      	movs	r3, #31
   29d78:	18fb      	adds	r3, r7, r3
   29d7a:	781b      	ldrb	r3, [r3, #0]
   29d7c:	2202      	movs	r2, #2
   29d7e:	4013      	ands	r3, r2
   29d80:	d007      	beq.n	29d92 <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   29d82:	69bb      	ldr	r3, [r7, #24]
   29d84:	2232      	movs	r2, #50	; 0x32
   29d86:	211a      	movs	r1, #26
   29d88:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   29d8a:	697b      	ldr	r3, [r7, #20]
   29d8c:	2202      	movs	r2, #2
   29d8e:	835a      	strh	r2, [r3, #26]
   29d90:	e036      	b.n	29e00 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   29d92:	231f      	movs	r3, #31
   29d94:	18fb      	adds	r3, r7, r3
   29d96:	781b      	ldrb	r3, [r3, #0]
   29d98:	2204      	movs	r2, #4
   29d9a:	4013      	ands	r3, r2
   29d9c:	d007      	beq.n	29dae <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   29d9e:	69bb      	ldr	r3, [r7, #24]
   29da0:	2232      	movs	r2, #50	; 0x32
   29da2:	211e      	movs	r1, #30
   29da4:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   29da6:	697b      	ldr	r3, [r7, #20]
   29da8:	2204      	movs	r2, #4
   29daa:	835a      	strh	r2, [r3, #26]
   29dac:	e028      	b.n	29e00 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   29dae:	231f      	movs	r3, #31
   29db0:	18fb      	adds	r3, r7, r3
   29db2:	781b      	ldrb	r3, [r3, #0]
   29db4:	2201      	movs	r2, #1
   29db6:	4013      	ands	r3, r2
   29db8:	d007      	beq.n	29dca <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   29dba:	69bb      	ldr	r3, [r7, #24]
   29dbc:	2232      	movs	r2, #50	; 0x32
   29dbe:	2113      	movs	r1, #19
   29dc0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   29dc2:	697b      	ldr	r3, [r7, #20]
   29dc4:	2201      	movs	r2, #1
   29dc6:	835a      	strh	r2, [r3, #26]
   29dc8:	e01a      	b.n	29e00 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   29dca:	231f      	movs	r3, #31
   29dcc:	18fb      	adds	r3, r7, r3
   29dce:	781b      	ldrb	r3, [r3, #0]
   29dd0:	2210      	movs	r2, #16
   29dd2:	4013      	ands	r3, r2
   29dd4:	d007      	beq.n	29de6 <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   29dd6:	69bb      	ldr	r3, [r7, #24]
   29dd8:	2232      	movs	r2, #50	; 0x32
   29dda:	2142      	movs	r1, #66	; 0x42
   29ddc:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   29dde:	697b      	ldr	r3, [r7, #20]
   29de0:	2210      	movs	r2, #16
   29de2:	835a      	strh	r2, [r3, #26]
   29de4:	e00c      	b.n	29e00 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   29de6:	231f      	movs	r3, #31
   29de8:	18fb      	adds	r3, r7, r3
   29dea:	781b      	ldrb	r3, [r3, #0]
   29dec:	2220      	movs	r2, #32
   29dee:	4013      	ands	r3, r2
   29df0:	d006      	beq.n	29e00 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   29df2:	69bb      	ldr	r3, [r7, #24]
   29df4:	2232      	movs	r2, #50	; 0x32
   29df6:	2141      	movs	r1, #65	; 0x41
   29df8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   29dfa:	697b      	ldr	r3, [r7, #20]
   29dfc:	2220      	movs	r2, #32
   29dfe:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   29e00:	2310      	movs	r3, #16
   29e02:	18fb      	adds	r3, r7, r3
   29e04:	881b      	ldrh	r3, [r3, #0]
   29e06:	2204      	movs	r2, #4
   29e08:	4013      	ands	r3, r2
				if (callback_status
   29e0a:	d050      	beq.n	29eae <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   29e0c:	69bb      	ldr	r3, [r7, #24]
   29e0e:	695b      	ldr	r3, [r3, #20]
   29e10:	69ba      	ldr	r2, [r7, #24]
   29e12:	0010      	movs	r0, r2
   29e14:	4798      	blx	r3
   29e16:	e04a      	b.n	29eae <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   29e18:	697b      	ldr	r3, [r7, #20]
   29e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   29e1c:	b29a      	uxth	r2, r3
   29e1e:	230e      	movs	r3, #14
   29e20:	18fb      	adds	r3, r7, r3
   29e22:	05d2      	lsls	r2, r2, #23
   29e24:	0dd2      	lsrs	r2, r2, #23
   29e26:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   29e28:	69bb      	ldr	r3, [r7, #24]
   29e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   29e2c:	220e      	movs	r2, #14
   29e2e:	18ba      	adds	r2, r7, r2
   29e30:	8812      	ldrh	r2, [r2, #0]
   29e32:	b2d2      	uxtb	r2, r2
   29e34:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   29e36:	69bb      	ldr	r3, [r7, #24]
   29e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   29e3a:	1c5a      	adds	r2, r3, #1
   29e3c:	69bb      	ldr	r3, [r7, #24]
   29e3e:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   29e40:	69bb      	ldr	r3, [r7, #24]
   29e42:	795b      	ldrb	r3, [r3, #5]
   29e44:	2b01      	cmp	r3, #1
   29e46:	d10d      	bne.n	29e64 <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   29e48:	69bb      	ldr	r3, [r7, #24]
   29e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   29e4c:	220e      	movs	r2, #14
   29e4e:	18ba      	adds	r2, r7, r2
   29e50:	8812      	ldrh	r2, [r2, #0]
   29e52:	0a12      	lsrs	r2, r2, #8
   29e54:	b292      	uxth	r2, r2
   29e56:	b2d2      	uxtb	r2, r2
   29e58:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   29e5a:	69bb      	ldr	r3, [r7, #24]
   29e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   29e5e:	1c5a      	adds	r2, r3, #1
   29e60:	69bb      	ldr	r3, [r7, #24]
   29e62:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   29e64:	69bb      	ldr	r3, [r7, #24]
   29e66:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   29e68:	b29b      	uxth	r3, r3
   29e6a:	3b01      	subs	r3, #1
   29e6c:	b29b      	uxth	r3, r3
   29e6e:	69ba      	ldr	r2, [r7, #24]
   29e70:	1c19      	adds	r1, r3, #0
   29e72:	8591      	strh	r1, [r2, #44]	; 0x2c
   29e74:	2b00      	cmp	r3, #0
   29e76:	d11a      	bne.n	29eae <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   29e78:	697b      	ldr	r3, [r7, #20]
   29e7a:	2204      	movs	r2, #4
   29e7c:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   29e7e:	69bb      	ldr	r3, [r7, #24]
   29e80:	2232      	movs	r2, #50	; 0x32
   29e82:	2100      	movs	r1, #0
   29e84:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   29e86:	2310      	movs	r3, #16
   29e88:	18fb      	adds	r3, r7, r3
   29e8a:	881b      	ldrh	r3, [r3, #0]
   29e8c:	2202      	movs	r2, #2
   29e8e:	4013      	ands	r3, r2
					if (callback_status
   29e90:	d00d      	beq.n	29eae <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   29e92:	69bb      	ldr	r3, [r7, #24]
   29e94:	691b      	ldr	r3, [r3, #16]
   29e96:	69ba      	ldr	r2, [r7, #24]
   29e98:	0010      	movs	r0, r2
   29e9a:	4798      	blx	r3
   29e9c:	e007      	b.n	29eae <_usart_interrupt_handler+0x2ae>
   29e9e:	46c0      	nop			; (mov r8, r8)
   29ea0:	20005c58 	.word	0x20005c58
   29ea4:	000299e1 	.word	0x000299e1
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   29ea8:	697b      	ldr	r3, [r7, #20]
   29eaa:	2204      	movs	r2, #4
   29eac:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   29eae:	2312      	movs	r3, #18
   29eb0:	18fb      	adds	r3, r7, r3
   29eb2:	881b      	ldrh	r3, [r3, #0]
   29eb4:	2210      	movs	r2, #16
   29eb6:	4013      	ands	r3, r2
   29eb8:	d010      	beq.n	29edc <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   29eba:	697b      	ldr	r3, [r7, #20]
   29ebc:	2210      	movs	r2, #16
   29ebe:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   29ec0:	697b      	ldr	r3, [r7, #20]
   29ec2:	2210      	movs	r2, #16
   29ec4:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   29ec6:	2310      	movs	r3, #16
   29ec8:	18fb      	adds	r3, r7, r3
   29eca:	881b      	ldrh	r3, [r3, #0]
   29ecc:	2210      	movs	r2, #16
   29ece:	4013      	ands	r3, r2
   29ed0:	d004      	beq.n	29edc <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   29ed2:	69bb      	ldr	r3, [r7, #24]
   29ed4:	69db      	ldr	r3, [r3, #28]
   29ed6:	69ba      	ldr	r2, [r7, #24]
   29ed8:	0010      	movs	r0, r2
   29eda:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   29edc:	2312      	movs	r3, #18
   29ede:	18fb      	adds	r3, r7, r3
   29ee0:	881b      	ldrh	r3, [r3, #0]
   29ee2:	2220      	movs	r2, #32
   29ee4:	4013      	ands	r3, r2
   29ee6:	d010      	beq.n	29f0a <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   29ee8:	697b      	ldr	r3, [r7, #20]
   29eea:	2220      	movs	r2, #32
   29eec:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   29eee:	697b      	ldr	r3, [r7, #20]
   29ef0:	2220      	movs	r2, #32
   29ef2:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   29ef4:	2310      	movs	r3, #16
   29ef6:	18fb      	adds	r3, r7, r3
   29ef8:	881b      	ldrh	r3, [r3, #0]
   29efa:	2208      	movs	r2, #8
   29efc:	4013      	ands	r3, r2
   29efe:	d004      	beq.n	29f0a <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   29f00:	69bb      	ldr	r3, [r7, #24]
   29f02:	699b      	ldr	r3, [r3, #24]
   29f04:	69ba      	ldr	r2, [r7, #24]
   29f06:	0010      	movs	r0, r2
   29f08:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   29f0a:	2312      	movs	r3, #18
   29f0c:	18fb      	adds	r3, r7, r3
   29f0e:	881b      	ldrh	r3, [r3, #0]
   29f10:	2208      	movs	r2, #8
   29f12:	4013      	ands	r3, r2
   29f14:	d010      	beq.n	29f38 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   29f16:	697b      	ldr	r3, [r7, #20]
   29f18:	2208      	movs	r2, #8
   29f1a:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   29f1c:	697b      	ldr	r3, [r7, #20]
   29f1e:	2208      	movs	r2, #8
   29f20:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   29f22:	2310      	movs	r3, #16
   29f24:	18fb      	adds	r3, r7, r3
   29f26:	881b      	ldrh	r3, [r3, #0]
   29f28:	2220      	movs	r2, #32
   29f2a:	4013      	ands	r3, r2
   29f2c:	d004      	beq.n	29f38 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   29f2e:	69bb      	ldr	r3, [r7, #24]
   29f30:	6a1b      	ldr	r3, [r3, #32]
   29f32:	69ba      	ldr	r2, [r7, #24]
   29f34:	0010      	movs	r0, r2
   29f36:	4798      	blx	r3
		}
	}
#endif
}
   29f38:	46c0      	nop			; (mov r8, r8)
   29f3a:	46bd      	mov	sp, r7
   29f3c:	b008      	add	sp, #32
   29f3e:	bd80      	pop	{r7, pc}

00029f40 <system_gclk_gen_get_config_defaults>:
{
   29f40:	b580      	push	{r7, lr}
   29f42:	b082      	sub	sp, #8
   29f44:	af00      	add	r7, sp, #0
   29f46:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   29f48:	687b      	ldr	r3, [r7, #4]
   29f4a:	2201      	movs	r2, #1
   29f4c:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   29f4e:	687b      	ldr	r3, [r7, #4]
   29f50:	2200      	movs	r2, #0
   29f52:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   29f54:	687b      	ldr	r3, [r7, #4]
   29f56:	2206      	movs	r2, #6
   29f58:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   29f5a:	687b      	ldr	r3, [r7, #4]
   29f5c:	2200      	movs	r2, #0
   29f5e:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   29f60:	687b      	ldr	r3, [r7, #4]
   29f62:	2200      	movs	r2, #0
   29f64:	725a      	strb	r2, [r3, #9]
}
   29f66:	46c0      	nop			; (mov r8, r8)
   29f68:	46bd      	mov	sp, r7
   29f6a:	b002      	add	sp, #8
   29f6c:	bd80      	pop	{r7, pc}

00029f6e <system_gclk_chan_get_config_defaults>:
{
   29f6e:	b580      	push	{r7, lr}
   29f70:	b082      	sub	sp, #8
   29f72:	af00      	add	r7, sp, #0
   29f74:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   29f76:	687b      	ldr	r3, [r7, #4]
   29f78:	2200      	movs	r2, #0
   29f7a:	701a      	strb	r2, [r3, #0]
}
   29f7c:	46c0      	nop			; (mov r8, r8)
   29f7e:	46bd      	mov	sp, r7
   29f80:	b002      	add	sp, #8
   29f82:	bd80      	pop	{r7, pc}

00029f84 <system_clock_source_osc8m_get_config_defaults>:
{
   29f84:	b580      	push	{r7, lr}
   29f86:	b082      	sub	sp, #8
   29f88:	af00      	add	r7, sp, #0
   29f8a:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   29f8c:	687b      	ldr	r3, [r7, #4]
   29f8e:	2203      	movs	r2, #3
   29f90:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   29f92:	687b      	ldr	r3, [r7, #4]
   29f94:	2200      	movs	r2, #0
   29f96:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   29f98:	687b      	ldr	r3, [r7, #4]
   29f9a:	2201      	movs	r2, #1
   29f9c:	709a      	strb	r2, [r3, #2]
}
   29f9e:	46c0      	nop			; (mov r8, r8)
   29fa0:	46bd      	mov	sp, r7
   29fa2:	b002      	add	sp, #8
   29fa4:	bd80      	pop	{r7, pc}
	...

00029fa8 <system_cpu_clock_set_divider>:
{
   29fa8:	b580      	push	{r7, lr}
   29faa:	b082      	sub	sp, #8
   29fac:	af00      	add	r7, sp, #0
   29fae:	0002      	movs	r2, r0
   29fb0:	1dfb      	adds	r3, r7, #7
   29fb2:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   29fb4:	4a03      	ldr	r2, [pc, #12]	; (29fc4 <system_cpu_clock_set_divider+0x1c>)
   29fb6:	1dfb      	adds	r3, r7, #7
   29fb8:	781b      	ldrb	r3, [r3, #0]
   29fba:	7213      	strb	r3, [r2, #8]
}
   29fbc:	46c0      	nop			; (mov r8, r8)
   29fbe:	46bd      	mov	sp, r7
   29fc0:	b002      	add	sp, #8
   29fc2:	bd80      	pop	{r7, pc}
   29fc4:	40000400 	.word	0x40000400

00029fc8 <system_apb_clock_set_divider>:
{
   29fc8:	b580      	push	{r7, lr}
   29fca:	b082      	sub	sp, #8
   29fcc:	af00      	add	r7, sp, #0
   29fce:	0002      	movs	r2, r0
   29fd0:	1dfb      	adds	r3, r7, #7
   29fd2:	701a      	strb	r2, [r3, #0]
   29fd4:	1dbb      	adds	r3, r7, #6
   29fd6:	1c0a      	adds	r2, r1, #0
   29fd8:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   29fda:	1dfb      	adds	r3, r7, #7
   29fdc:	781b      	ldrb	r3, [r3, #0]
   29fde:	2b01      	cmp	r3, #1
   29fe0:	d008      	beq.n	29ff4 <system_apb_clock_set_divider+0x2c>
   29fe2:	2b02      	cmp	r3, #2
   29fe4:	d00b      	beq.n	29ffe <system_apb_clock_set_divider+0x36>
   29fe6:	2b00      	cmp	r3, #0
   29fe8:	d10e      	bne.n	2a008 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   29fea:	4a0b      	ldr	r2, [pc, #44]	; (2a018 <system_apb_clock_set_divider+0x50>)
   29fec:	1dbb      	adds	r3, r7, #6
   29fee:	781b      	ldrb	r3, [r3, #0]
   29ff0:	7253      	strb	r3, [r2, #9]
			break;
   29ff2:	e00b      	b.n	2a00c <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   29ff4:	4a08      	ldr	r2, [pc, #32]	; (2a018 <system_apb_clock_set_divider+0x50>)
   29ff6:	1dbb      	adds	r3, r7, #6
   29ff8:	781b      	ldrb	r3, [r3, #0]
   29ffa:	7293      	strb	r3, [r2, #10]
			break;
   29ffc:	e006      	b.n	2a00c <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   29ffe:	4a06      	ldr	r2, [pc, #24]	; (2a018 <system_apb_clock_set_divider+0x50>)
   2a000:	1dbb      	adds	r3, r7, #6
   2a002:	781b      	ldrb	r3, [r3, #0]
   2a004:	72d3      	strb	r3, [r2, #11]
			break;
   2a006:	e001      	b.n	2a00c <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   2a008:	2317      	movs	r3, #23
   2a00a:	e000      	b.n	2a00e <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   2a00c:	2300      	movs	r3, #0
}
   2a00e:	0018      	movs	r0, r3
   2a010:	46bd      	mov	sp, r7
   2a012:	b002      	add	sp, #8
   2a014:	bd80      	pop	{r7, pc}
   2a016:	46c0      	nop			; (mov r8, r8)
   2a018:	40000400 	.word	0x40000400

0002a01c <system_clock_source_dpll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
   2a01c:	b580      	push	{r7, lr}
   2a01e:	b082      	sub	sp, #8
   2a020:	af00      	add	r7, sp, #0
   2a022:	6078      	str	r0, [r7, #4]
	config->on_demand           = true;
   2a024:	687b      	ldr	r3, [r7, #4]
   2a026:	2201      	movs	r2, #1
   2a028:	701a      	strb	r2, [r3, #0]
	config->run_in_standby      = false;
   2a02a:	687b      	ldr	r3, [r7, #4]
   2a02c:	2200      	movs	r2, #0
   2a02e:	705a      	strb	r2, [r3, #1]
	config->lock_bypass         = false;
   2a030:	687b      	ldr	r3, [r7, #4]
   2a032:	2200      	movs	r2, #0
   2a034:	709a      	strb	r2, [r3, #2]
	config->wake_up_fast        = false;
   2a036:	687b      	ldr	r3, [r7, #4]
   2a038:	2200      	movs	r2, #0
   2a03a:	70da      	strb	r2, [r3, #3]
	config->low_power_enable    = false;
   2a03c:	687b      	ldr	r3, [r7, #4]
   2a03e:	2200      	movs	r2, #0
   2a040:	711a      	strb	r2, [r3, #4]

	config->output_frequency    = 48000000;
   2a042:	687b      	ldr	r3, [r7, #4]
   2a044:	4a0a      	ldr	r2, [pc, #40]	; (2a070 <system_clock_source_dpll_get_config_defaults+0x54>)
   2a046:	609a      	str	r2, [r3, #8]
	config->reference_frequency = 32768;
   2a048:	687b      	ldr	r3, [r7, #4]
   2a04a:	2280      	movs	r2, #128	; 0x80
   2a04c:	0212      	lsls	r2, r2, #8
   2a04e:	60da      	str	r2, [r3, #12]
	config->reference_divider   = 1;
   2a050:	687b      	ldr	r3, [r7, #4]
   2a052:	2201      	movs	r2, #1
   2a054:	821a      	strh	r2, [r3, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
   2a056:	687b      	ldr	r3, [r7, #4]
   2a058:	2200      	movs	r2, #0
   2a05a:	751a      	strb	r2, [r3, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   2a05c:	687b      	ldr	r3, [r7, #4]
   2a05e:	2200      	movs	r2, #0
   2a060:	74da      	strb	r2, [r3, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   2a062:	687b      	ldr	r3, [r7, #4]
   2a064:	2200      	movs	r2, #0
   2a066:	749a      	strb	r2, [r3, #18]
};
   2a068:	46c0      	nop			; (mov r8, r8)
   2a06a:	46bd      	mov	sp, r7
   2a06c:	b002      	add	sp, #8
   2a06e:	bd80      	pop	{r7, pc}
   2a070:	02dc6c00 	.word	0x02dc6c00

0002a074 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   2a074:	b580      	push	{r7, lr}
   2a076:	b082      	sub	sp, #8
   2a078:	af00      	add	r7, sp, #0
   2a07a:	0002      	movs	r2, r0
   2a07c:	1dfb      	adds	r3, r7, #7
   2a07e:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   2a080:	4a08      	ldr	r2, [pc, #32]	; (2a0a4 <system_flash_set_waitstates+0x30>)
   2a082:	1dfb      	adds	r3, r7, #7
   2a084:	781b      	ldrb	r3, [r3, #0]
   2a086:	210f      	movs	r1, #15
   2a088:	400b      	ands	r3, r1
   2a08a:	b2d9      	uxtb	r1, r3
   2a08c:	6853      	ldr	r3, [r2, #4]
   2a08e:	200f      	movs	r0, #15
   2a090:	4001      	ands	r1, r0
   2a092:	0049      	lsls	r1, r1, #1
   2a094:	201e      	movs	r0, #30
   2a096:	4383      	bics	r3, r0
   2a098:	430b      	orrs	r3, r1
   2a09a:	6053      	str	r3, [r2, #4]
}
   2a09c:	46c0      	nop			; (mov r8, r8)
   2a09e:	46bd      	mov	sp, r7
   2a0a0:	b002      	add	sp, #8
   2a0a2:	bd80      	pop	{r7, pc}
   2a0a4:	41004000 	.word	0x41004000

0002a0a8 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   2a0a8:	b580      	push	{r7, lr}
   2a0aa:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   2a0ac:	46c0      	nop			; (mov r8, r8)
   2a0ae:	4b04      	ldr	r3, [pc, #16]	; (2a0c0 <_system_dfll_wait_for_sync+0x18>)
   2a0b0:	68db      	ldr	r3, [r3, #12]
   2a0b2:	2210      	movs	r2, #16
   2a0b4:	4013      	ands	r3, r2
   2a0b6:	d0fa      	beq.n	2a0ae <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   2a0b8:	46c0      	nop			; (mov r8, r8)
   2a0ba:	46bd      	mov	sp, r7
   2a0bc:	bd80      	pop	{r7, pc}
   2a0be:	46c0      	nop			; (mov r8, r8)
   2a0c0:	40000800 	.word	0x40000800

0002a0c4 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   2a0c4:	b580      	push	{r7, lr}
   2a0c6:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   2a0c8:	4b0c      	ldr	r3, [pc, #48]	; (2a0fc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2a0ca:	2202      	movs	r2, #2
   2a0cc:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   2a0ce:	4b0c      	ldr	r3, [pc, #48]	; (2a100 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   2a0d0:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   2a0d2:	4a0a      	ldr	r2, [pc, #40]	; (2a0fc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2a0d4:	4b0b      	ldr	r3, [pc, #44]	; (2a104 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2a0d6:	689b      	ldr	r3, [r3, #8]
   2a0d8:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   2a0da:	4a08      	ldr	r2, [pc, #32]	; (2a0fc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2a0dc:	4b09      	ldr	r3, [pc, #36]	; (2a104 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2a0de:	685b      	ldr	r3, [r3, #4]
   2a0e0:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   2a0e2:	4b06      	ldr	r3, [pc, #24]	; (2a0fc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2a0e4:	2200      	movs	r2, #0
   2a0e6:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   2a0e8:	4b05      	ldr	r3, [pc, #20]	; (2a100 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   2a0ea:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   2a0ec:	4a03      	ldr	r2, [pc, #12]	; (2a0fc <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2a0ee:	4b05      	ldr	r3, [pc, #20]	; (2a104 <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2a0f0:	681b      	ldr	r3, [r3, #0]
   2a0f2:	b29b      	uxth	r3, r3
   2a0f4:	8493      	strh	r3, [r2, #36]	; 0x24
}
   2a0f6:	46c0      	nop			; (mov r8, r8)
   2a0f8:	46bd      	mov	sp, r7
   2a0fa:	bd80      	pop	{r7, pc}
   2a0fc:	40000800 	.word	0x40000800
   2a100:	0002a0a9 	.word	0x0002a0a9
   2a104:	200042dc 	.word	0x200042dc

0002a108 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   2a108:	b580      	push	{r7, lr}
   2a10a:	b082      	sub	sp, #8
   2a10c:	af00      	add	r7, sp, #0
   2a10e:	0002      	movs	r2, r0
   2a110:	1dfb      	adds	r3, r7, #7
   2a112:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   2a114:	1dfb      	adds	r3, r7, #7
   2a116:	781b      	ldrb	r3, [r3, #0]
   2a118:	2b08      	cmp	r3, #8
   2a11a:	d841      	bhi.n	2a1a0 <system_clock_source_get_hz+0x98>
   2a11c:	009a      	lsls	r2, r3, #2
   2a11e:	4b23      	ldr	r3, [pc, #140]	; (2a1ac <system_clock_source_get_hz+0xa4>)
   2a120:	18d3      	adds	r3, r2, r3
   2a122:	681b      	ldr	r3, [r3, #0]
   2a124:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   2a126:	4b22      	ldr	r3, [pc, #136]	; (2a1b0 <system_clock_source_get_hz+0xa8>)
   2a128:	691b      	ldr	r3, [r3, #16]
   2a12a:	e03a      	b.n	2a1a2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   2a12c:	4b21      	ldr	r3, [pc, #132]	; (2a1b4 <system_clock_source_get_hz+0xac>)
   2a12e:	6a1b      	ldr	r3, [r3, #32]
   2a130:	059b      	lsls	r3, r3, #22
   2a132:	0f9b      	lsrs	r3, r3, #30
   2a134:	b2db      	uxtb	r3, r3
   2a136:	001a      	movs	r2, r3
   2a138:	4b1f      	ldr	r3, [pc, #124]	; (2a1b8 <system_clock_source_get_hz+0xb0>)
   2a13a:	40d3      	lsrs	r3, r2
   2a13c:	e031      	b.n	2a1a2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   2a13e:	2380      	movs	r3, #128	; 0x80
   2a140:	021b      	lsls	r3, r3, #8
   2a142:	e02e      	b.n	2a1a2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   2a144:	2380      	movs	r3, #128	; 0x80
   2a146:	021b      	lsls	r3, r3, #8
   2a148:	e02b      	b.n	2a1a2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   2a14a:	4b19      	ldr	r3, [pc, #100]	; (2a1b0 <system_clock_source_get_hz+0xa8>)
   2a14c:	695b      	ldr	r3, [r3, #20]
   2a14e:	e028      	b.n	2a1a2 <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   2a150:	4b17      	ldr	r3, [pc, #92]	; (2a1b0 <system_clock_source_get_hz+0xa8>)
   2a152:	681b      	ldr	r3, [r3, #0]
   2a154:	2202      	movs	r2, #2
   2a156:	4013      	ands	r3, r2
   2a158:	d101      	bne.n	2a15e <system_clock_source_get_hz+0x56>
			return 0;
   2a15a:	2300      	movs	r3, #0
   2a15c:	e021      	b.n	2a1a2 <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   2a15e:	4b17      	ldr	r3, [pc, #92]	; (2a1bc <system_clock_source_get_hz+0xb4>)
   2a160:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   2a162:	4b13      	ldr	r3, [pc, #76]	; (2a1b0 <system_clock_source_get_hz+0xa8>)
   2a164:	681b      	ldr	r3, [r3, #0]
   2a166:	2224      	movs	r2, #36	; 0x24
   2a168:	4013      	ands	r3, r2
   2a16a:	2b04      	cmp	r3, #4
   2a16c:	d109      	bne.n	2a182 <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   2a16e:	2000      	movs	r0, #0
   2a170:	4b13      	ldr	r3, [pc, #76]	; (2a1c0 <system_clock_source_get_hz+0xb8>)
   2a172:	4798      	blx	r3
   2a174:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   2a176:	4b0e      	ldr	r3, [pc, #56]	; (2a1b0 <system_clock_source_get_hz+0xa8>)
   2a178:	689b      	ldr	r3, [r3, #8]
   2a17a:	041b      	lsls	r3, r3, #16
   2a17c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   2a17e:	4353      	muls	r3, r2
   2a180:	e00f      	b.n	2a1a2 <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   2a182:	4b10      	ldr	r3, [pc, #64]	; (2a1c4 <system_clock_source_get_hz+0xbc>)
   2a184:	e00d      	b.n	2a1a2 <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   2a186:	4a0b      	ldr	r2, [pc, #44]	; (2a1b4 <system_clock_source_get_hz+0xac>)
   2a188:	2350      	movs	r3, #80	; 0x50
   2a18a:	5cd3      	ldrb	r3, [r2, r3]
   2a18c:	b2db      	uxtb	r3, r3
   2a18e:	001a      	movs	r2, r3
   2a190:	2304      	movs	r3, #4
   2a192:	4013      	ands	r3, r2
   2a194:	d101      	bne.n	2a19a <system_clock_source_get_hz+0x92>
			return 0;
   2a196:	2300      	movs	r3, #0
   2a198:	e003      	b.n	2a1a2 <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   2a19a:	4b05      	ldr	r3, [pc, #20]	; (2a1b0 <system_clock_source_get_hz+0xa8>)
   2a19c:	68db      	ldr	r3, [r3, #12]
   2a19e:	e000      	b.n	2a1a2 <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   2a1a0:	2300      	movs	r3, #0
	}
}
   2a1a2:	0018      	movs	r0, r3
   2a1a4:	46bd      	mov	sp, r7
   2a1a6:	b002      	add	sp, #8
   2a1a8:	bd80      	pop	{r7, pc}
   2a1aa:	46c0      	nop			; (mov r8, r8)
   2a1ac:	0003a2a4 	.word	0x0003a2a4
   2a1b0:	200042dc 	.word	0x200042dc
   2a1b4:	40000800 	.word	0x40000800
   2a1b8:	007a1200 	.word	0x007a1200
   2a1bc:	0002a0a9 	.word	0x0002a0a9
   2a1c0:	0002aba5 	.word	0x0002aba5
   2a1c4:	02dc6c00 	.word	0x02dc6c00

0002a1c8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   2a1c8:	b580      	push	{r7, lr}
   2a1ca:	b084      	sub	sp, #16
   2a1cc:	af00      	add	r7, sp, #0
   2a1ce:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   2a1d0:	4b1a      	ldr	r3, [pc, #104]	; (2a23c <system_clock_source_osc8m_set_config+0x74>)
   2a1d2:	6a1b      	ldr	r3, [r3, #32]
   2a1d4:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   2a1d6:	687b      	ldr	r3, [r7, #4]
   2a1d8:	781b      	ldrb	r3, [r3, #0]
   2a1da:	1c1a      	adds	r2, r3, #0
   2a1dc:	2303      	movs	r3, #3
   2a1de:	4013      	ands	r3, r2
   2a1e0:	b2da      	uxtb	r2, r3
   2a1e2:	230d      	movs	r3, #13
   2a1e4:	18fb      	adds	r3, r7, r3
   2a1e6:	2103      	movs	r1, #3
   2a1e8:	400a      	ands	r2, r1
   2a1ea:	0010      	movs	r0, r2
   2a1ec:	781a      	ldrb	r2, [r3, #0]
   2a1ee:	2103      	movs	r1, #3
   2a1f0:	438a      	bics	r2, r1
   2a1f2:	1c11      	adds	r1, r2, #0
   2a1f4:	1c02      	adds	r2, r0, #0
   2a1f6:	430a      	orrs	r2, r1
   2a1f8:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   2a1fa:	687b      	ldr	r3, [r7, #4]
   2a1fc:	789a      	ldrb	r2, [r3, #2]
   2a1fe:	230c      	movs	r3, #12
   2a200:	18fb      	adds	r3, r7, r3
   2a202:	01d0      	lsls	r0, r2, #7
   2a204:	781a      	ldrb	r2, [r3, #0]
   2a206:	217f      	movs	r1, #127	; 0x7f
   2a208:	400a      	ands	r2, r1
   2a20a:	1c11      	adds	r1, r2, #0
   2a20c:	1c02      	adds	r2, r0, #0
   2a20e:	430a      	orrs	r2, r1
   2a210:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   2a212:	687b      	ldr	r3, [r7, #4]
   2a214:	785a      	ldrb	r2, [r3, #1]
   2a216:	230c      	movs	r3, #12
   2a218:	18fb      	adds	r3, r7, r3
   2a21a:	2101      	movs	r1, #1
   2a21c:	400a      	ands	r2, r1
   2a21e:	0190      	lsls	r0, r2, #6
   2a220:	781a      	ldrb	r2, [r3, #0]
   2a222:	2140      	movs	r1, #64	; 0x40
   2a224:	438a      	bics	r2, r1
   2a226:	1c11      	adds	r1, r2, #0
   2a228:	1c02      	adds	r2, r0, #0
   2a22a:	430a      	orrs	r2, r1
   2a22c:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   2a22e:	4b03      	ldr	r3, [pc, #12]	; (2a23c <system_clock_source_osc8m_set_config+0x74>)
   2a230:	68fa      	ldr	r2, [r7, #12]
   2a232:	621a      	str	r2, [r3, #32]
}
   2a234:	46c0      	nop			; (mov r8, r8)
   2a236:	46bd      	mov	sp, r7
   2a238:	b004      	add	sp, #16
   2a23a:	bd80      	pop	{r7, pc}
   2a23c:	40000800 	.word	0x40000800

0002a240 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   2a240:	b580      	push	{r7, lr}
   2a242:	b086      	sub	sp, #24
   2a244:	af00      	add	r7, sp, #0
   2a246:	6078      	str	r0, [r7, #4]

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   2a248:	687b      	ldr	r3, [r7, #4]
   2a24a:	68db      	ldr	r3, [r3, #12]
   2a24c:	617b      	str	r3, [r7, #20]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   2a24e:	687b      	ldr	r3, [r7, #4]
   2a250:	7d1b      	ldrb	r3, [r3, #20]
   2a252:	2b01      	cmp	r3, #1
   2a254:	d10a      	bne.n	2a26c <system_clock_source_dpll_set_config+0x2c>
		refclk = refclk / (2 * (config->reference_divider + 1));
   2a256:	687b      	ldr	r3, [r7, #4]
   2a258:	8a1b      	ldrh	r3, [r3, #16]
   2a25a:	3301      	adds	r3, #1
   2a25c:	005b      	lsls	r3, r3, #1
   2a25e:	001a      	movs	r2, r3
   2a260:	4b36      	ldr	r3, [pc, #216]	; (2a33c <system_clock_source_dpll_set_config+0xfc>)
   2a262:	0011      	movs	r1, r2
   2a264:	6978      	ldr	r0, [r7, #20]
   2a266:	4798      	blx	r3
   2a268:	0003      	movs	r3, r0
   2a26a:	617b      	str	r3, [r7, #20]
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   2a26c:	687b      	ldr	r3, [r7, #4]
   2a26e:	689b      	ldr	r3, [r3, #8]
   2a270:	011a      	lsls	r2, r3, #4
   2a272:	4b32      	ldr	r3, [pc, #200]	; (2a33c <system_clock_source_dpll_set_config+0xfc>)
   2a274:	6979      	ldr	r1, [r7, #20]
   2a276:	0010      	movs	r0, r2
   2a278:	4798      	blx	r3
   2a27a:	0003      	movs	r3, r0
   2a27c:	613b      	str	r3, [r7, #16]
	tmpldrfrac = tmpldr & 0x0f;
   2a27e:	693b      	ldr	r3, [r7, #16]
   2a280:	b2da      	uxtb	r2, r3
   2a282:	230f      	movs	r3, #15
   2a284:	18fb      	adds	r3, r7, r3
   2a286:	210f      	movs	r1, #15
   2a288:	400a      	ands	r2, r1
   2a28a:	701a      	strb	r2, [r3, #0]
	tmpldr = (tmpldr >> 4) - 1;
   2a28c:	693b      	ldr	r3, [r7, #16]
   2a28e:	091b      	lsrs	r3, r3, #4
   2a290:	3b01      	subs	r3, #1
   2a292:	613b      	str	r3, [r7, #16]

	SYSCTRL->DPLLCTRLA.reg =
   2a294:	492a      	ldr	r1, [pc, #168]	; (2a340 <system_clock_source_dpll_set_config+0x100>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   2a296:	687b      	ldr	r3, [r7, #4]
   2a298:	781b      	ldrb	r3, [r3, #0]
   2a29a:	01db      	lsls	r3, r3, #7
   2a29c:	b2da      	uxtb	r2, r3
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   2a29e:	687b      	ldr	r3, [r7, #4]
   2a2a0:	785b      	ldrb	r3, [r3, #1]
   2a2a2:	019b      	lsls	r3, r3, #6
   2a2a4:	b2db      	uxtb	r3, r3
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   2a2a6:	4313      	orrs	r3, r2
   2a2a8:	b2da      	uxtb	r2, r3
	SYSCTRL->DPLLCTRLA.reg =
   2a2aa:	2344      	movs	r3, #68	; 0x44
   2a2ac:	54ca      	strb	r2, [r1, r3]

	SYSCTRL->DPLLRATIO.reg =
   2a2ae:	4b24      	ldr	r3, [pc, #144]	; (2a340 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   2a2b0:	220f      	movs	r2, #15
   2a2b2:	18ba      	adds	r2, r7, r2
   2a2b4:	7812      	ldrb	r2, [r2, #0]
   2a2b6:	0412      	lsls	r2, r2, #16
   2a2b8:	0011      	movs	r1, r2
   2a2ba:	22f0      	movs	r2, #240	; 0xf0
   2a2bc:	0312      	lsls	r2, r2, #12
   2a2be:	4011      	ands	r1, r2
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   2a2c0:	693a      	ldr	r2, [r7, #16]
   2a2c2:	0512      	lsls	r2, r2, #20
   2a2c4:	0d12      	lsrs	r2, r2, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   2a2c6:	430a      	orrs	r2, r1
	SYSCTRL->DPLLRATIO.reg =
   2a2c8:	649a      	str	r2, [r3, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
   2a2ca:	4b1d      	ldr	r3, [pc, #116]	; (2a340 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   2a2cc:	687a      	ldr	r2, [r7, #4]
   2a2ce:	8a12      	ldrh	r2, [r2, #16]
   2a2d0:	0412      	lsls	r2, r2, #16
   2a2d2:	0011      	movs	r1, r2
   2a2d4:	4a1b      	ldr	r2, [pc, #108]	; (2a344 <system_clock_source_dpll_set_config+0x104>)
   2a2d6:	4011      	ands	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   2a2d8:	687a      	ldr	r2, [r7, #4]
   2a2da:	7892      	ldrb	r2, [r2, #2]
   2a2dc:	0312      	lsls	r2, r2, #12
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   2a2de:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   2a2e0:	687a      	ldr	r2, [r7, #4]
   2a2e2:	7cd2      	ldrb	r2, [r2, #19]
   2a2e4:	0212      	lsls	r2, r2, #8
   2a2e6:	0010      	movs	r0, r2
   2a2e8:	22e0      	movs	r2, #224	; 0xe0
   2a2ea:	00d2      	lsls	r2, r2, #3
   2a2ec:	4002      	ands	r2, r0
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   2a2ee:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   2a2f0:	687a      	ldr	r2, [r7, #4]
   2a2f2:	7d12      	ldrb	r2, [r2, #20]
   2a2f4:	0112      	lsls	r2, r2, #4
   2a2f6:	0010      	movs	r0, r2
   2a2f8:	2230      	movs	r2, #48	; 0x30
   2a2fa:	4002      	ands	r2, r0
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   2a2fc:	4311      	orrs	r1, r2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   2a2fe:	687a      	ldr	r2, [r7, #4]
   2a300:	78d2      	ldrb	r2, [r2, #3]
   2a302:	00d2      	lsls	r2, r2, #3
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   2a304:	4311      	orrs	r1, r2
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   2a306:	687a      	ldr	r2, [r7, #4]
   2a308:	7912      	ldrb	r2, [r2, #4]
   2a30a:	0092      	lsls	r2, r2, #2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   2a30c:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   2a30e:	687a      	ldr	r2, [r7, #4]
   2a310:	7c92      	ldrb	r2, [r2, #18]
   2a312:	0010      	movs	r0, r2
   2a314:	2203      	movs	r2, #3
   2a316:	4002      	ands	r2, r0
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   2a318:	430a      	orrs	r2, r1
	SYSCTRL->DPLLCTRLB.reg =
   2a31a:	64da      	str	r2, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   2a31c:	693b      	ldr	r3, [r7, #16]
   2a31e:	3301      	adds	r3, #1
   2a320:	011a      	lsls	r2, r3, #4
   2a322:	230f      	movs	r3, #15
   2a324:	18fb      	adds	r3, r7, r3
   2a326:	781b      	ldrb	r3, [r3, #0]
   2a328:	18d3      	adds	r3, r2, r3
   2a32a:	697a      	ldr	r2, [r7, #20]
   2a32c:	4353      	muls	r3, r2
   2a32e:	091a      	lsrs	r2, r3, #4
	_system_clock_inst.dpll.frequency =
   2a330:	4b05      	ldr	r3, [pc, #20]	; (2a348 <system_clock_source_dpll_set_config+0x108>)
   2a332:	60da      	str	r2, [r3, #12]
}
   2a334:	46c0      	nop			; (mov r8, r8)
   2a336:	46bd      	mov	sp, r7
   2a338:	b006      	add	sp, #24
   2a33a:	bd80      	pop	{r7, pc}
   2a33c:	00033615 	.word	0x00033615
   2a340:	40000800 	.word	0x40000800
   2a344:	07ff0000 	.word	0x07ff0000
   2a348:	200042dc 	.word	0x200042dc

0002a34c <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   2a34c:	b580      	push	{r7, lr}
   2a34e:	b082      	sub	sp, #8
   2a350:	af00      	add	r7, sp, #0
   2a352:	0002      	movs	r2, r0
   2a354:	1dfb      	adds	r3, r7, #7
   2a356:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   2a358:	1dfb      	adds	r3, r7, #7
   2a35a:	781b      	ldrb	r3, [r3, #0]
   2a35c:	2b08      	cmp	r3, #8
   2a35e:	d83b      	bhi.n	2a3d8 <system_clock_source_enable+0x8c>
   2a360:	009a      	lsls	r2, r3, #2
   2a362:	4b21      	ldr	r3, [pc, #132]	; (2a3e8 <system_clock_source_enable+0x9c>)
   2a364:	18d3      	adds	r3, r2, r3
   2a366:	681b      	ldr	r3, [r3, #0]
   2a368:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   2a36a:	4b20      	ldr	r3, [pc, #128]	; (2a3ec <system_clock_source_enable+0xa0>)
   2a36c:	4a1f      	ldr	r2, [pc, #124]	; (2a3ec <system_clock_source_enable+0xa0>)
   2a36e:	6a12      	ldr	r2, [r2, #32]
   2a370:	2102      	movs	r1, #2
   2a372:	430a      	orrs	r2, r1
   2a374:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   2a376:	2300      	movs	r3, #0
   2a378:	e031      	b.n	2a3de <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   2a37a:	4b1c      	ldr	r3, [pc, #112]	; (2a3ec <system_clock_source_enable+0xa0>)
   2a37c:	4a1b      	ldr	r2, [pc, #108]	; (2a3ec <system_clock_source_enable+0xa0>)
   2a37e:	6992      	ldr	r2, [r2, #24]
   2a380:	2102      	movs	r1, #2
   2a382:	430a      	orrs	r2, r1
   2a384:	619a      	str	r2, [r3, #24]
		break;
   2a386:	e029      	b.n	2a3dc <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   2a388:	4a18      	ldr	r2, [pc, #96]	; (2a3ec <system_clock_source_enable+0xa0>)
   2a38a:	4b18      	ldr	r3, [pc, #96]	; (2a3ec <system_clock_source_enable+0xa0>)
   2a38c:	8a1b      	ldrh	r3, [r3, #16]
   2a38e:	b29b      	uxth	r3, r3
   2a390:	2102      	movs	r1, #2
   2a392:	430b      	orrs	r3, r1
   2a394:	b29b      	uxth	r3, r3
   2a396:	8213      	strh	r3, [r2, #16]
		break;
   2a398:	e020      	b.n	2a3dc <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   2a39a:	4a14      	ldr	r2, [pc, #80]	; (2a3ec <system_clock_source_enable+0xa0>)
   2a39c:	4b13      	ldr	r3, [pc, #76]	; (2a3ec <system_clock_source_enable+0xa0>)
   2a39e:	8a9b      	ldrh	r3, [r3, #20]
   2a3a0:	b29b      	uxth	r3, r3
   2a3a2:	2102      	movs	r1, #2
   2a3a4:	430b      	orrs	r3, r1
   2a3a6:	b29b      	uxth	r3, r3
   2a3a8:	8293      	strh	r3, [r2, #20]
		break;
   2a3aa:	e017      	b.n	2a3dc <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   2a3ac:	4b10      	ldr	r3, [pc, #64]	; (2a3f0 <system_clock_source_enable+0xa4>)
   2a3ae:	681b      	ldr	r3, [r3, #0]
   2a3b0:	2202      	movs	r2, #2
   2a3b2:	431a      	orrs	r2, r3
   2a3b4:	4b0e      	ldr	r3, [pc, #56]	; (2a3f0 <system_clock_source_enable+0xa4>)
   2a3b6:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   2a3b8:	4b0e      	ldr	r3, [pc, #56]	; (2a3f4 <system_clock_source_enable+0xa8>)
   2a3ba:	4798      	blx	r3
		break;
   2a3bc:	e00e      	b.n	2a3dc <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   2a3be:	4a0b      	ldr	r2, [pc, #44]	; (2a3ec <system_clock_source_enable+0xa0>)
   2a3c0:	490a      	ldr	r1, [pc, #40]	; (2a3ec <system_clock_source_enable+0xa0>)
   2a3c2:	2344      	movs	r3, #68	; 0x44
   2a3c4:	5ccb      	ldrb	r3, [r1, r3]
   2a3c6:	b2db      	uxtb	r3, r3
   2a3c8:	2102      	movs	r1, #2
   2a3ca:	430b      	orrs	r3, r1
   2a3cc:	b2d9      	uxtb	r1, r3
   2a3ce:	2344      	movs	r3, #68	; 0x44
   2a3d0:	54d1      	strb	r1, [r2, r3]
		break;
   2a3d2:	e003      	b.n	2a3dc <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   2a3d4:	2300      	movs	r3, #0
   2a3d6:	e002      	b.n	2a3de <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   2a3d8:	2317      	movs	r3, #23
   2a3da:	e000      	b.n	2a3de <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   2a3dc:	2300      	movs	r3, #0
}
   2a3de:	0018      	movs	r0, r3
   2a3e0:	46bd      	mov	sp, r7
   2a3e2:	b002      	add	sp, #8
   2a3e4:	bd80      	pop	{r7, pc}
   2a3e6:	46c0      	nop			; (mov r8, r8)
   2a3e8:	0003a2c8 	.word	0x0003a2c8
   2a3ec:	40000800 	.word	0x40000800
   2a3f0:	200042dc 	.word	0x200042dc
   2a3f4:	0002a0c5 	.word	0x0002a0c5

0002a3f8 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   2a3f8:	b580      	push	{r7, lr}
   2a3fa:	b084      	sub	sp, #16
   2a3fc:	af00      	add	r7, sp, #0
   2a3fe:	0002      	movs	r2, r0
   2a400:	1dfb      	adds	r3, r7, #7
   2a402:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   2a404:	2300      	movs	r3, #0
   2a406:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   2a408:	1dfb      	adds	r3, r7, #7
   2a40a:	781b      	ldrb	r3, [r3, #0]
   2a40c:	2b08      	cmp	r3, #8
   2a40e:	d821      	bhi.n	2a454 <system_clock_source_is_ready+0x5c>
   2a410:	009a      	lsls	r2, r3, #2
   2a412:	4b18      	ldr	r3, [pc, #96]	; (2a474 <system_clock_source_is_ready+0x7c>)
   2a414:	18d3      	adds	r3, r2, r3
   2a416:	681b      	ldr	r3, [r3, #0]
   2a418:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   2a41a:	2308      	movs	r3, #8
   2a41c:	60fb      	str	r3, [r7, #12]
		break;
   2a41e:	e01b      	b.n	2a458 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   2a420:	2304      	movs	r3, #4
   2a422:	60fb      	str	r3, [r7, #12]
		break;
   2a424:	e018      	b.n	2a458 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   2a426:	2301      	movs	r3, #1
   2a428:	60fb      	str	r3, [r7, #12]
		break;
   2a42a:	e015      	b.n	2a458 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   2a42c:	2302      	movs	r3, #2
   2a42e:	60fb      	str	r3, [r7, #12]
		break;
   2a430:	e012      	b.n	2a458 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
   2a432:	2310      	movs	r3, #16
   2a434:	60fb      	str	r3, [r7, #12]
		}
		break;
   2a436:	e00f      	b.n	2a458 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   2a438:	4a0f      	ldr	r2, [pc, #60]	; (2a478 <system_clock_source_is_ready+0x80>)
   2a43a:	2350      	movs	r3, #80	; 0x50
   2a43c:	5cd3      	ldrb	r3, [r2, r3]
   2a43e:	b2db      	uxtb	r3, r3
   2a440:	001a      	movs	r2, r3
   2a442:	2303      	movs	r3, #3
   2a444:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   2a446:	3b03      	subs	r3, #3
   2a448:	425a      	negs	r2, r3
   2a44a:	4153      	adcs	r3, r2
   2a44c:	b2db      	uxtb	r3, r3
   2a44e:	e00c      	b.n	2a46a <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   2a450:	2301      	movs	r3, #1
   2a452:	e00a      	b.n	2a46a <system_clock_source_is_ready+0x72>

	default:
		return false;
   2a454:	2300      	movs	r3, #0
   2a456:	e008      	b.n	2a46a <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   2a458:	4b07      	ldr	r3, [pc, #28]	; (2a478 <system_clock_source_is_ready+0x80>)
   2a45a:	68db      	ldr	r3, [r3, #12]
   2a45c:	68fa      	ldr	r2, [r7, #12]
   2a45e:	401a      	ands	r2, r3
   2a460:	68fb      	ldr	r3, [r7, #12]
   2a462:	1ad3      	subs	r3, r2, r3
   2a464:	425a      	negs	r2, r3
   2a466:	4153      	adcs	r3, r2
   2a468:	b2db      	uxtb	r3, r3
}
   2a46a:	0018      	movs	r0, r3
   2a46c:	46bd      	mov	sp, r7
   2a46e:	b004      	add	sp, #16
   2a470:	bd80      	pop	{r7, pc}
   2a472:	46c0      	nop			; (mov r8, r8)
   2a474:	0003a2ec 	.word	0x0003a2ec
   2a478:	40000800 	.word	0x40000800

0002a47c <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   2a47c:	b580      	push	{r7, lr}
   2a47e:	b082      	sub	sp, #8
   2a480:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   2a482:	003b      	movs	r3, r7
   2a484:	2203      	movs	r2, #3
   2a486:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   2a488:	2300      	movs	r3, #0
   2a48a:	607b      	str	r3, [r7, #4]
   2a48c:	e009      	b.n	2a4a2 <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   2a48e:	687b      	ldr	r3, [r7, #4]
   2a490:	b2db      	uxtb	r3, r3
   2a492:	003a      	movs	r2, r7
   2a494:	0011      	movs	r1, r2
   2a496:	0018      	movs	r0, r3
   2a498:	4b05      	ldr	r3, [pc, #20]	; (2a4b0 <_switch_peripheral_gclk+0x34>)
   2a49a:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   2a49c:	687b      	ldr	r3, [r7, #4]
   2a49e:	3301      	adds	r3, #1
   2a4a0:	607b      	str	r3, [r7, #4]
   2a4a2:	687b      	ldr	r3, [r7, #4]
   2a4a4:	2b24      	cmp	r3, #36	; 0x24
   2a4a6:	d9f2      	bls.n	2a48e <_switch_peripheral_gclk+0x12>
	}
}
   2a4a8:	46c0      	nop			; (mov r8, r8)
   2a4aa:	46bd      	mov	sp, r7
   2a4ac:	b002      	add	sp, #8
   2a4ae:	bd80      	pop	{r7, pc}
   2a4b0:	0002aa81 	.word	0x0002aa81

0002a4b4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   2a4b4:	b580      	push	{r7, lr}
   2a4b6:	b0a6      	sub	sp, #152	; 0x98
   2a4b8:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   2a4ba:	4b92      	ldr	r3, [pc, #584]	; (2a704 <system_clock_init+0x250>)
   2a4bc:	22c2      	movs	r2, #194	; 0xc2
   2a4be:	00d2      	lsls	r2, r2, #3
   2a4c0:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   2a4c2:	2003      	movs	r0, #3
   2a4c4:	4b90      	ldr	r3, [pc, #576]	; (2a708 <system_clock_init+0x254>)
   2a4c6:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   2a4c8:	4b90      	ldr	r3, [pc, #576]	; (2a70c <system_clock_init+0x258>)
   2a4ca:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   2a4cc:	2394      	movs	r3, #148	; 0x94
   2a4ce:	18fb      	adds	r3, r7, r3
   2a4d0:	0018      	movs	r0, r3
   2a4d2:	4b8f      	ldr	r3, [pc, #572]	; (2a710 <system_clock_init+0x25c>)
   2a4d4:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   2a4d6:	2394      	movs	r3, #148	; 0x94
   2a4d8:	18fb      	adds	r3, r7, r3
   2a4da:	2200      	movs	r2, #0
   2a4dc:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   2a4de:	2394      	movs	r3, #148	; 0x94
   2a4e0:	18fb      	adds	r3, r7, r3
   2a4e2:	2201      	movs	r2, #1
   2a4e4:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   2a4e6:	2394      	movs	r3, #148	; 0x94
   2a4e8:	18fb      	adds	r3, r7, r3
   2a4ea:	2200      	movs	r2, #0
   2a4ec:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   2a4ee:	2394      	movs	r3, #148	; 0x94
   2a4f0:	18fb      	adds	r3, r7, r3
   2a4f2:	0018      	movs	r0, r3
   2a4f4:	4b87      	ldr	r3, [pc, #540]	; (2a714 <system_clock_init+0x260>)
   2a4f6:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   2a4f8:	2006      	movs	r0, #6
   2a4fa:	4b87      	ldr	r3, [pc, #540]	; (2a718 <system_clock_init+0x264>)
   2a4fc:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   2a4fe:	4b87      	ldr	r3, [pc, #540]	; (2a71c <system_clock_init+0x268>)
   2a500:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   2a502:	2360      	movs	r3, #96	; 0x60
   2a504:	18fb      	adds	r3, r7, r3
   2a506:	0018      	movs	r0, r3
   2a508:	4b85      	ldr	r3, [pc, #532]	; (2a720 <system_clock_init+0x26c>)
   2a50a:	4798      	blx	r3
   2a50c:	2360      	movs	r3, #96	; 0x60
   2a50e:	18fb      	adds	r3, r7, r3
   2a510:	2206      	movs	r2, #6
   2a512:	701a      	strb	r2, [r3, #0]
   2a514:	2360      	movs	r3, #96	; 0x60
   2a516:	18fb      	adds	r3, r7, r3
   2a518:	2208      	movs	r2, #8
   2a51a:	605a      	str	r2, [r3, #4]
   2a51c:	2360      	movs	r3, #96	; 0x60
   2a51e:	18fb      	adds	r3, r7, r3
   2a520:	2200      	movs	r2, #0
   2a522:	721a      	strb	r2, [r3, #8]
   2a524:	2360      	movs	r3, #96	; 0x60
   2a526:	18fb      	adds	r3, r7, r3
   2a528:	2200      	movs	r2, #0
   2a52a:	725a      	strb	r2, [r3, #9]
   2a52c:	2360      	movs	r3, #96	; 0x60
   2a52e:	18fb      	adds	r3, r7, r3
   2a530:	0019      	movs	r1, r3
   2a532:	2001      	movs	r0, #1
   2a534:	4b7b      	ldr	r3, [pc, #492]	; (2a724 <system_clock_init+0x270>)
   2a536:	4798      	blx	r3
   2a538:	2001      	movs	r0, #1
   2a53a:	4b7b      	ldr	r3, [pc, #492]	; (2a728 <system_clock_init+0x274>)
   2a53c:	4798      	blx	r3
   2a53e:	2354      	movs	r3, #84	; 0x54
   2a540:	18fb      	adds	r3, r7, r3
   2a542:	0018      	movs	r0, r3
   2a544:	4b76      	ldr	r3, [pc, #472]	; (2a720 <system_clock_init+0x26c>)
   2a546:	4798      	blx	r3
   2a548:	2354      	movs	r3, #84	; 0x54
   2a54a:	18fb      	adds	r3, r7, r3
   2a54c:	2203      	movs	r2, #3
   2a54e:	701a      	strb	r2, [r3, #0]
   2a550:	2354      	movs	r3, #84	; 0x54
   2a552:	18fb      	adds	r3, r7, r3
   2a554:	2201      	movs	r2, #1
   2a556:	605a      	str	r2, [r3, #4]
   2a558:	2354      	movs	r3, #84	; 0x54
   2a55a:	18fb      	adds	r3, r7, r3
   2a55c:	2201      	movs	r2, #1
   2a55e:	721a      	strb	r2, [r3, #8]
   2a560:	2354      	movs	r3, #84	; 0x54
   2a562:	18fb      	adds	r3, r7, r3
   2a564:	2200      	movs	r2, #0
   2a566:	725a      	strb	r2, [r3, #9]
   2a568:	2354      	movs	r3, #84	; 0x54
   2a56a:	18fb      	adds	r3, r7, r3
   2a56c:	0019      	movs	r1, r3
   2a56e:	2002      	movs	r0, #2
   2a570:	4b6c      	ldr	r3, [pc, #432]	; (2a724 <system_clock_init+0x270>)
   2a572:	4798      	blx	r3
   2a574:	2002      	movs	r0, #2
   2a576:	4b6c      	ldr	r3, [pc, #432]	; (2a728 <system_clock_init+0x274>)
   2a578:	4798      	blx	r3
   2a57a:	233c      	movs	r3, #60	; 0x3c
   2a57c:	18fb      	adds	r3, r7, r3
   2a57e:	0018      	movs	r0, r3
   2a580:	4b67      	ldr	r3, [pc, #412]	; (2a720 <system_clock_init+0x26c>)
   2a582:	4798      	blx	r3
   2a584:	233c      	movs	r3, #60	; 0x3c
   2a586:	18fb      	adds	r3, r7, r3
   2a588:	2203      	movs	r2, #3
   2a58a:	701a      	strb	r2, [r3, #0]
   2a58c:	233c      	movs	r3, #60	; 0x3c
   2a58e:	18fb      	adds	r3, r7, r3
   2a590:	2220      	movs	r2, #32
   2a592:	605a      	str	r2, [r3, #4]
   2a594:	233c      	movs	r3, #60	; 0x3c
   2a596:	18fb      	adds	r3, r7, r3
   2a598:	2200      	movs	r2, #0
   2a59a:	721a      	strb	r2, [r3, #8]
   2a59c:	233c      	movs	r3, #60	; 0x3c
   2a59e:	18fb      	adds	r3, r7, r3
   2a5a0:	2200      	movs	r2, #0
   2a5a2:	725a      	strb	r2, [r3, #9]
   2a5a4:	233c      	movs	r3, #60	; 0x3c
   2a5a6:	18fb      	adds	r3, r7, r3
   2a5a8:	0019      	movs	r1, r3
   2a5aa:	2004      	movs	r0, #4
   2a5ac:	4b5d      	ldr	r3, [pc, #372]	; (2a724 <system_clock_init+0x270>)
   2a5ae:	4798      	blx	r3
   2a5b0:	2004      	movs	r0, #4
   2a5b2:	4b5d      	ldr	r3, [pc, #372]	; (2a728 <system_clock_init+0x274>)
   2a5b4:	4798      	blx	r3
   2a5b6:	2330      	movs	r3, #48	; 0x30
   2a5b8:	18fb      	adds	r3, r7, r3
   2a5ba:	0018      	movs	r0, r3
   2a5bc:	4b58      	ldr	r3, [pc, #352]	; (2a720 <system_clock_init+0x26c>)
   2a5be:	4798      	blx	r3
   2a5c0:	2330      	movs	r3, #48	; 0x30
   2a5c2:	18fb      	adds	r3, r7, r3
   2a5c4:	2206      	movs	r2, #6
   2a5c6:	701a      	strb	r2, [r3, #0]
   2a5c8:	2330      	movs	r3, #48	; 0x30
   2a5ca:	18fb      	adds	r3, r7, r3
   2a5cc:	2201      	movs	r2, #1
   2a5ce:	605a      	str	r2, [r3, #4]
   2a5d0:	2330      	movs	r3, #48	; 0x30
   2a5d2:	18fb      	adds	r3, r7, r3
   2a5d4:	2200      	movs	r2, #0
   2a5d6:	721a      	strb	r2, [r3, #8]
   2a5d8:	2330      	movs	r3, #48	; 0x30
   2a5da:	18fb      	adds	r3, r7, r3
   2a5dc:	2200      	movs	r2, #0
   2a5de:	725a      	strb	r2, [r3, #9]
   2a5e0:	2330      	movs	r3, #48	; 0x30
   2a5e2:	18fb      	adds	r3, r7, r3
   2a5e4:	0019      	movs	r1, r3
   2a5e6:	2005      	movs	r0, #5
   2a5e8:	4b4e      	ldr	r3, [pc, #312]	; (2a724 <system_clock_init+0x270>)
   2a5ea:	4798      	blx	r3
   2a5ec:	2005      	movs	r0, #5
   2a5ee:	4b4e      	ldr	r3, [pc, #312]	; (2a728 <system_clock_init+0x274>)
   2a5f0:	4798      	blx	r3
#  endif

#  if CONF_CLOCK_DPLL_ENABLE == true
	/* Enable DPLL internal lock timer and reference clock */
	struct system_gclk_chan_config dpll_gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&dpll_gclk_chan_conf);
   2a5f2:	2390      	movs	r3, #144	; 0x90
   2a5f4:	18fb      	adds	r3, r7, r3
   2a5f6:	0018      	movs	r0, r3
   2a5f8:	4b4c      	ldr	r3, [pc, #304]	; (2a72c <system_clock_init+0x278>)
   2a5fa:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   2a5fc:	2390      	movs	r3, #144	; 0x90
   2a5fe:	18fb      	adds	r3, r7, r3
   2a600:	2201      	movs	r2, #1
   2a602:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   2a604:	2390      	movs	r3, #144	; 0x90
   2a606:	18fb      	adds	r3, r7, r3
   2a608:	0019      	movs	r1, r3
   2a60a:	2001      	movs	r0, #1
   2a60c:	4b48      	ldr	r3, [pc, #288]	; (2a730 <system_clock_init+0x27c>)
   2a60e:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   2a610:	2001      	movs	r0, #1
   2a612:	4b48      	ldr	r3, [pc, #288]	; (2a734 <system_clock_init+0x280>)
   2a614:	4798      	blx	r3
	else {
		Assert(false);
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);
   2a616:	2378      	movs	r3, #120	; 0x78
   2a618:	18fb      	adds	r3, r7, r3
   2a61a:	0018      	movs	r0, r3
   2a61c:	4b46      	ldr	r3, [pc, #280]	; (2a738 <system_clock_init+0x284>)
   2a61e:	4798      	blx	r3

	dpll_config.on_demand        = false;
   2a620:	2378      	movs	r3, #120	; 0x78
   2a622:	18fb      	adds	r3, r7, r3
   2a624:	2200      	movs	r2, #0
   2a626:	701a      	strb	r2, [r3, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
   2a628:	2378      	movs	r3, #120	; 0x78
   2a62a:	18fb      	adds	r3, r7, r3
   2a62c:	2200      	movs	r2, #0
   2a62e:	705a      	strb	r2, [r3, #1]
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
   2a630:	2378      	movs	r3, #120	; 0x78
   2a632:	18fb      	adds	r3, r7, r3
   2a634:	2200      	movs	r2, #0
   2a636:	709a      	strb	r2, [r3, #2]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
   2a638:	2378      	movs	r3, #120	; 0x78
   2a63a:	18fb      	adds	r3, r7, r3
   2a63c:	2200      	movs	r2, #0
   2a63e:	70da      	strb	r2, [r3, #3]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
   2a640:	2378      	movs	r3, #120	; 0x78
   2a642:	18fb      	adds	r3, r7, r3
   2a644:	2200      	movs	r2, #0
   2a646:	711a      	strb	r2, [r3, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
   2a648:	2378      	movs	r3, #120	; 0x78
   2a64a:	18fb      	adds	r3, r7, r3
   2a64c:	2200      	movs	r2, #0
   2a64e:	749a      	strb	r2, [r3, #18]
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;
   2a650:	2378      	movs	r3, #120	; 0x78
   2a652:	18fb      	adds	r3, r7, r3
   2a654:	2200      	movs	r2, #0
   2a656:	74da      	strb	r2, [r3, #19]

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   2a658:	2378      	movs	r3, #120	; 0x78
   2a65a:	18fb      	adds	r3, r7, r3
   2a65c:	2202      	movs	r2, #2
   2a65e:	751a      	strb	r2, [r3, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   2a660:	2378      	movs	r3, #120	; 0x78
   2a662:	18fb      	adds	r3, r7, r3
   2a664:	4a35      	ldr	r2, [pc, #212]	; (2a73c <system_clock_init+0x288>)
   2a666:	60da      	str	r2, [r3, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
   2a668:	2378      	movs	r3, #120	; 0x78
   2a66a:	18fb      	adds	r3, r7, r3
   2a66c:	2201      	movs	r2, #1
   2a66e:	821a      	strh	r2, [r3, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
   2a670:	2378      	movs	r3, #120	; 0x78
   2a672:	18fb      	adds	r3, r7, r3
   2a674:	4a32      	ldr	r2, [pc, #200]	; (2a740 <system_clock_init+0x28c>)
   2a676:	609a      	str	r2, [r3, #8]

	system_clock_source_dpll_set_config(&dpll_config);
   2a678:	2378      	movs	r3, #120	; 0x78
   2a67a:	18fb      	adds	r3, r7, r3
   2a67c:	0018      	movs	r0, r3
   2a67e:	4b31      	ldr	r3, [pc, #196]	; (2a744 <system_clock_init+0x290>)
   2a680:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   2a682:	2008      	movs	r0, #8
   2a684:	4b24      	ldr	r3, [pc, #144]	; (2a718 <system_clock_init+0x264>)
   2a686:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   2a688:	46c0      	nop			; (mov r8, r8)
   2a68a:	2008      	movs	r0, #8
   2a68c:	4b2e      	ldr	r3, [pc, #184]	; (2a748 <system_clock_init+0x294>)
   2a68e:	4798      	blx	r3
   2a690:	0003      	movs	r3, r0
   2a692:	001a      	movs	r2, r3
   2a694:	2301      	movs	r3, #1
   2a696:	4053      	eors	r3, r2
   2a698:	b2db      	uxtb	r3, r3
   2a69a:	2b00      	cmp	r3, #0
   2a69c:	d1f5      	bne.n	2a68a <system_clock_init+0x1d6>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   2a69e:	4919      	ldr	r1, [pc, #100]	; (2a704 <system_clock_init+0x250>)
   2a6a0:	2244      	movs	r2, #68	; 0x44
   2a6a2:	5c8b      	ldrb	r3, [r1, r2]
   2a6a4:	2080      	movs	r0, #128	; 0x80
   2a6a6:	4240      	negs	r0, r0
   2a6a8:	4303      	orrs	r3, r0
   2a6aa:	548b      	strb	r3, [r1, r2]

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   2a6ac:	2000      	movs	r0, #0
   2a6ae:	4b27      	ldr	r3, [pc, #156]	; (2a74c <system_clock_init+0x298>)
   2a6b0:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   2a6b2:	2100      	movs	r1, #0
   2a6b4:	2000      	movs	r0, #0
   2a6b6:	4b26      	ldr	r3, [pc, #152]	; (2a750 <system_clock_init+0x29c>)
   2a6b8:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   2a6ba:	2100      	movs	r1, #0
   2a6bc:	2001      	movs	r0, #1
   2a6be:	4b24      	ldr	r3, [pc, #144]	; (2a750 <system_clock_init+0x29c>)
   2a6c0:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   2a6c2:	2100      	movs	r1, #0
   2a6c4:	2002      	movs	r0, #2
   2a6c6:	4b22      	ldr	r3, [pc, #136]	; (2a750 <system_clock_init+0x29c>)
   2a6c8:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   2a6ca:	003b      	movs	r3, r7
   2a6cc:	0018      	movs	r0, r3
   2a6ce:	4b14      	ldr	r3, [pc, #80]	; (2a720 <system_clock_init+0x26c>)
   2a6d0:	4798      	blx	r3
   2a6d2:	003b      	movs	r3, r7
   2a6d4:	2208      	movs	r2, #8
   2a6d6:	701a      	strb	r2, [r3, #0]
   2a6d8:	003b      	movs	r3, r7
   2a6da:	2201      	movs	r2, #1
   2a6dc:	605a      	str	r2, [r3, #4]
   2a6de:	003b      	movs	r3, r7
   2a6e0:	2200      	movs	r2, #0
   2a6e2:	721a      	strb	r2, [r3, #8]
   2a6e4:	003b      	movs	r3, r7
   2a6e6:	2201      	movs	r2, #1
   2a6e8:	725a      	strb	r2, [r3, #9]
   2a6ea:	003b      	movs	r3, r7
   2a6ec:	0019      	movs	r1, r3
   2a6ee:	2000      	movs	r0, #0
   2a6f0:	4b0c      	ldr	r3, [pc, #48]	; (2a724 <system_clock_init+0x270>)
   2a6f2:	4798      	blx	r3
   2a6f4:	2000      	movs	r0, #0
   2a6f6:	4b0c      	ldr	r3, [pc, #48]	; (2a728 <system_clock_init+0x274>)
   2a6f8:	4798      	blx	r3
#endif
}
   2a6fa:	46c0      	nop			; (mov r8, r8)
   2a6fc:	46bd      	mov	sp, r7
   2a6fe:	b026      	add	sp, #152	; 0x98
   2a700:	bd80      	pop	{r7, pc}
   2a702:	46c0      	nop			; (mov r8, r8)
   2a704:	40000800 	.word	0x40000800
   2a708:	0002a075 	.word	0x0002a075
   2a70c:	0002a47d 	.word	0x0002a47d
   2a710:	00029f85 	.word	0x00029f85
   2a714:	0002a1c9 	.word	0x0002a1c9
   2a718:	0002a34d 	.word	0x0002a34d
   2a71c:	0002a7f9 	.word	0x0002a7f9
   2a720:	00029f41 	.word	0x00029f41
   2a724:	0002a829 	.word	0x0002a829
   2a728:	0002a94d 	.word	0x0002a94d
   2a72c:	00029f6f 	.word	0x00029f6f
   2a730:	0002aa81 	.word	0x0002aa81
   2a734:	0002aac5 	.word	0x0002aac5
   2a738:	0002a01d 	.word	0x0002a01d
   2a73c:	000f4240 	.word	0x000f4240
   2a740:	02dc6c00 	.word	0x02dc6c00
   2a744:	0002a241 	.word	0x0002a241
   2a748:	0002a3f9 	.word	0x0002a3f9
   2a74c:	00029fa9 	.word	0x00029fa9
   2a750:	00029fc9 	.word	0x00029fc9

0002a754 <system_apb_clock_set_mask>:
{
   2a754:	b580      	push	{r7, lr}
   2a756:	b082      	sub	sp, #8
   2a758:	af00      	add	r7, sp, #0
   2a75a:	0002      	movs	r2, r0
   2a75c:	6039      	str	r1, [r7, #0]
   2a75e:	1dfb      	adds	r3, r7, #7
   2a760:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2a762:	1dfb      	adds	r3, r7, #7
   2a764:	781b      	ldrb	r3, [r3, #0]
   2a766:	2b01      	cmp	r3, #1
   2a768:	d00a      	beq.n	2a780 <system_apb_clock_set_mask+0x2c>
   2a76a:	2b02      	cmp	r3, #2
   2a76c:	d00f      	beq.n	2a78e <system_apb_clock_set_mask+0x3a>
   2a76e:	2b00      	cmp	r3, #0
   2a770:	d114      	bne.n	2a79c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2a772:	4b0e      	ldr	r3, [pc, #56]	; (2a7ac <system_apb_clock_set_mask+0x58>)
   2a774:	4a0d      	ldr	r2, [pc, #52]	; (2a7ac <system_apb_clock_set_mask+0x58>)
   2a776:	6991      	ldr	r1, [r2, #24]
   2a778:	683a      	ldr	r2, [r7, #0]
   2a77a:	430a      	orrs	r2, r1
   2a77c:	619a      	str	r2, [r3, #24]
			break;
   2a77e:	e00f      	b.n	2a7a0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2a780:	4b0a      	ldr	r3, [pc, #40]	; (2a7ac <system_apb_clock_set_mask+0x58>)
   2a782:	4a0a      	ldr	r2, [pc, #40]	; (2a7ac <system_apb_clock_set_mask+0x58>)
   2a784:	69d1      	ldr	r1, [r2, #28]
   2a786:	683a      	ldr	r2, [r7, #0]
   2a788:	430a      	orrs	r2, r1
   2a78a:	61da      	str	r2, [r3, #28]
			break;
   2a78c:	e008      	b.n	2a7a0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2a78e:	4b07      	ldr	r3, [pc, #28]	; (2a7ac <system_apb_clock_set_mask+0x58>)
   2a790:	4a06      	ldr	r2, [pc, #24]	; (2a7ac <system_apb_clock_set_mask+0x58>)
   2a792:	6a11      	ldr	r1, [r2, #32]
   2a794:	683a      	ldr	r2, [r7, #0]
   2a796:	430a      	orrs	r2, r1
   2a798:	621a      	str	r2, [r3, #32]
			break;
   2a79a:	e001      	b.n	2a7a0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2a79c:	2317      	movs	r3, #23
   2a79e:	e000      	b.n	2a7a2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2a7a0:	2300      	movs	r3, #0
}
   2a7a2:	0018      	movs	r0, r3
   2a7a4:	46bd      	mov	sp, r7
   2a7a6:	b002      	add	sp, #8
   2a7a8:	bd80      	pop	{r7, pc}
   2a7aa:	46c0      	nop			; (mov r8, r8)
   2a7ac:	40000400 	.word	0x40000400

0002a7b0 <system_interrupt_enter_critical_section>:
{
   2a7b0:	b580      	push	{r7, lr}
   2a7b2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   2a7b4:	4b02      	ldr	r3, [pc, #8]	; (2a7c0 <system_interrupt_enter_critical_section+0x10>)
   2a7b6:	4798      	blx	r3
}
   2a7b8:	46c0      	nop			; (mov r8, r8)
   2a7ba:	46bd      	mov	sp, r7
   2a7bc:	bd80      	pop	{r7, pc}
   2a7be:	46c0      	nop			; (mov r8, r8)
   2a7c0:	00026ded 	.word	0x00026ded

0002a7c4 <system_interrupt_leave_critical_section>:
{
   2a7c4:	b580      	push	{r7, lr}
   2a7c6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   2a7c8:	4b02      	ldr	r3, [pc, #8]	; (2a7d4 <system_interrupt_leave_critical_section+0x10>)
   2a7ca:	4798      	blx	r3
}
   2a7cc:	46c0      	nop			; (mov r8, r8)
   2a7ce:	46bd      	mov	sp, r7
   2a7d0:	bd80      	pop	{r7, pc}
   2a7d2:	46c0      	nop			; (mov r8, r8)
   2a7d4:	00026e41 	.word	0x00026e41

0002a7d8 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   2a7d8:	b580      	push	{r7, lr}
   2a7da:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   2a7dc:	4b05      	ldr	r3, [pc, #20]	; (2a7f4 <system_gclk_is_syncing+0x1c>)
   2a7de:	785b      	ldrb	r3, [r3, #1]
   2a7e0:	b2db      	uxtb	r3, r3
   2a7e2:	b25b      	sxtb	r3, r3
   2a7e4:	2b00      	cmp	r3, #0
   2a7e6:	da01      	bge.n	2a7ec <system_gclk_is_syncing+0x14>
		return true;
   2a7e8:	2301      	movs	r3, #1
   2a7ea:	e000      	b.n	2a7ee <system_gclk_is_syncing+0x16>
	}

	return false;
   2a7ec:	2300      	movs	r3, #0
}
   2a7ee:	0018      	movs	r0, r3
   2a7f0:	46bd      	mov	sp, r7
   2a7f2:	bd80      	pop	{r7, pc}
   2a7f4:	40000c00 	.word	0x40000c00

0002a7f8 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   2a7f8:	b580      	push	{r7, lr}
   2a7fa:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   2a7fc:	2108      	movs	r1, #8
   2a7fe:	2000      	movs	r0, #0
   2a800:	4b07      	ldr	r3, [pc, #28]	; (2a820 <system_gclk_init+0x28>)
   2a802:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   2a804:	4b07      	ldr	r3, [pc, #28]	; (2a824 <system_gclk_init+0x2c>)
   2a806:	2201      	movs	r2, #1
   2a808:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   2a80a:	46c0      	nop			; (mov r8, r8)
   2a80c:	4b05      	ldr	r3, [pc, #20]	; (2a824 <system_gclk_init+0x2c>)
   2a80e:	781b      	ldrb	r3, [r3, #0]
   2a810:	b2db      	uxtb	r3, r3
   2a812:	001a      	movs	r2, r3
   2a814:	2301      	movs	r3, #1
   2a816:	4013      	ands	r3, r2
   2a818:	d1f8      	bne.n	2a80c <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   2a81a:	46c0      	nop			; (mov r8, r8)
   2a81c:	46bd      	mov	sp, r7
   2a81e:	bd80      	pop	{r7, pc}
   2a820:	0002a755 	.word	0x0002a755
   2a824:	40000c00 	.word	0x40000c00

0002a828 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   2a828:	b580      	push	{r7, lr}
   2a82a:	b086      	sub	sp, #24
   2a82c:	af00      	add	r7, sp, #0
   2a82e:	0002      	movs	r2, r0
   2a830:	6039      	str	r1, [r7, #0]
   2a832:	1dfb      	adds	r3, r7, #7
   2a834:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   2a836:	1dfb      	adds	r3, r7, #7
   2a838:	781b      	ldrb	r3, [r3, #0]
   2a83a:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   2a83c:	1dfb      	adds	r3, r7, #7
   2a83e:	781b      	ldrb	r3, [r3, #0]
   2a840:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   2a842:	683b      	ldr	r3, [r7, #0]
   2a844:	781b      	ldrb	r3, [r3, #0]
   2a846:	021b      	lsls	r3, r3, #8
   2a848:	001a      	movs	r2, r3
   2a84a:	697b      	ldr	r3, [r7, #20]
   2a84c:	4313      	orrs	r3, r2
   2a84e:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   2a850:	683b      	ldr	r3, [r7, #0]
   2a852:	785b      	ldrb	r3, [r3, #1]
   2a854:	2b00      	cmp	r3, #0
   2a856:	d004      	beq.n	2a862 <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   2a858:	697b      	ldr	r3, [r7, #20]
   2a85a:	2280      	movs	r2, #128	; 0x80
   2a85c:	02d2      	lsls	r2, r2, #11
   2a85e:	4313      	orrs	r3, r2
   2a860:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   2a862:	683b      	ldr	r3, [r7, #0]
   2a864:	7a5b      	ldrb	r3, [r3, #9]
   2a866:	2b00      	cmp	r3, #0
   2a868:	d004      	beq.n	2a874 <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   2a86a:	697b      	ldr	r3, [r7, #20]
   2a86c:	2280      	movs	r2, #128	; 0x80
   2a86e:	0312      	lsls	r2, r2, #12
   2a870:	4313      	orrs	r3, r2
   2a872:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   2a874:	683b      	ldr	r3, [r7, #0]
   2a876:	685b      	ldr	r3, [r3, #4]
   2a878:	2b01      	cmp	r3, #1
   2a87a:	d92c      	bls.n	2a8d6 <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   2a87c:	683b      	ldr	r3, [r7, #0]
   2a87e:	685a      	ldr	r2, [r3, #4]
   2a880:	683b      	ldr	r3, [r7, #0]
   2a882:	685b      	ldr	r3, [r3, #4]
   2a884:	3b01      	subs	r3, #1
   2a886:	4013      	ands	r3, r2
   2a888:	d11a      	bne.n	2a8c0 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   2a88a:	2300      	movs	r3, #0
   2a88c:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   2a88e:	2302      	movs	r3, #2
   2a890:	60bb      	str	r3, [r7, #8]
   2a892:	e005      	b.n	2a8a0 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   2a894:	68fb      	ldr	r3, [r7, #12]
   2a896:	3301      	adds	r3, #1
   2a898:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   2a89a:	68bb      	ldr	r3, [r7, #8]
   2a89c:	005b      	lsls	r3, r3, #1
   2a89e:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   2a8a0:	683b      	ldr	r3, [r7, #0]
   2a8a2:	685a      	ldr	r2, [r3, #4]
   2a8a4:	68bb      	ldr	r3, [r7, #8]
   2a8a6:	429a      	cmp	r2, r3
   2a8a8:	d8f4      	bhi.n	2a894 <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   2a8aa:	68fb      	ldr	r3, [r7, #12]
   2a8ac:	021b      	lsls	r3, r3, #8
   2a8ae:	693a      	ldr	r2, [r7, #16]
   2a8b0:	4313      	orrs	r3, r2
   2a8b2:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   2a8b4:	697b      	ldr	r3, [r7, #20]
   2a8b6:	2280      	movs	r2, #128	; 0x80
   2a8b8:	0352      	lsls	r2, r2, #13
   2a8ba:	4313      	orrs	r3, r2
   2a8bc:	617b      	str	r3, [r7, #20]
   2a8be:	e00a      	b.n	2a8d6 <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   2a8c0:	683b      	ldr	r3, [r7, #0]
   2a8c2:	685b      	ldr	r3, [r3, #4]
   2a8c4:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   2a8c6:	693a      	ldr	r2, [r7, #16]
   2a8c8:	4313      	orrs	r3, r2
   2a8ca:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   2a8cc:	697b      	ldr	r3, [r7, #20]
   2a8ce:	2280      	movs	r2, #128	; 0x80
   2a8d0:	0292      	lsls	r2, r2, #10
   2a8d2:	4313      	orrs	r3, r2
   2a8d4:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   2a8d6:	683b      	ldr	r3, [r7, #0]
   2a8d8:	7a1b      	ldrb	r3, [r3, #8]
   2a8da:	2b00      	cmp	r3, #0
   2a8dc:	d004      	beq.n	2a8e8 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   2a8de:	697b      	ldr	r3, [r7, #20]
   2a8e0:	2280      	movs	r2, #128	; 0x80
   2a8e2:	0392      	lsls	r2, r2, #14
   2a8e4:	4313      	orrs	r3, r2
   2a8e6:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   2a8e8:	46c0      	nop			; (mov r8, r8)
   2a8ea:	4b13      	ldr	r3, [pc, #76]	; (2a938 <system_gclk_gen_set_config+0x110>)
   2a8ec:	4798      	blx	r3
   2a8ee:	1e03      	subs	r3, r0, #0
   2a8f0:	d1fb      	bne.n	2a8ea <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2a8f2:	4b12      	ldr	r3, [pc, #72]	; (2a93c <system_gclk_gen_set_config+0x114>)
   2a8f4:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   2a8f6:	4a12      	ldr	r2, [pc, #72]	; (2a940 <system_gclk_gen_set_config+0x118>)
   2a8f8:	1dfb      	adds	r3, r7, #7
   2a8fa:	781b      	ldrb	r3, [r3, #0]
   2a8fc:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   2a8fe:	46c0      	nop			; (mov r8, r8)
   2a900:	4b0d      	ldr	r3, [pc, #52]	; (2a938 <system_gclk_gen_set_config+0x110>)
   2a902:	4798      	blx	r3
   2a904:	1e03      	subs	r3, r0, #0
   2a906:	d1fb      	bne.n	2a900 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   2a908:	4b0e      	ldr	r3, [pc, #56]	; (2a944 <system_gclk_gen_set_config+0x11c>)
   2a90a:	693a      	ldr	r2, [r7, #16]
   2a90c:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   2a90e:	46c0      	nop			; (mov r8, r8)
   2a910:	4b09      	ldr	r3, [pc, #36]	; (2a938 <system_gclk_gen_set_config+0x110>)
   2a912:	4798      	blx	r3
   2a914:	1e03      	subs	r3, r0, #0
   2a916:	d1fb      	bne.n	2a910 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   2a918:	4b0a      	ldr	r3, [pc, #40]	; (2a944 <system_gclk_gen_set_config+0x11c>)
   2a91a:	4a0a      	ldr	r2, [pc, #40]	; (2a944 <system_gclk_gen_set_config+0x11c>)
   2a91c:	6851      	ldr	r1, [r2, #4]
   2a91e:	2280      	movs	r2, #128	; 0x80
   2a920:	0252      	lsls	r2, r2, #9
   2a922:	4011      	ands	r1, r2
   2a924:	697a      	ldr	r2, [r7, #20]
   2a926:	430a      	orrs	r2, r1
   2a928:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2a92a:	4b07      	ldr	r3, [pc, #28]	; (2a948 <system_gclk_gen_set_config+0x120>)
   2a92c:	4798      	blx	r3
}
   2a92e:	46c0      	nop			; (mov r8, r8)
   2a930:	46bd      	mov	sp, r7
   2a932:	b006      	add	sp, #24
   2a934:	bd80      	pop	{r7, pc}
   2a936:	46c0      	nop			; (mov r8, r8)
   2a938:	0002a7d9 	.word	0x0002a7d9
   2a93c:	0002a7b1 	.word	0x0002a7b1
   2a940:	40000c08 	.word	0x40000c08
   2a944:	40000c00 	.word	0x40000c00
   2a948:	0002a7c5 	.word	0x0002a7c5

0002a94c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   2a94c:	b580      	push	{r7, lr}
   2a94e:	b082      	sub	sp, #8
   2a950:	af00      	add	r7, sp, #0
   2a952:	0002      	movs	r2, r0
   2a954:	1dfb      	adds	r3, r7, #7
   2a956:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   2a958:	46c0      	nop			; (mov r8, r8)
   2a95a:	4b0e      	ldr	r3, [pc, #56]	; (2a994 <system_gclk_gen_enable+0x48>)
   2a95c:	4798      	blx	r3
   2a95e:	1e03      	subs	r3, r0, #0
   2a960:	d1fb      	bne.n	2a95a <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2a962:	4b0d      	ldr	r3, [pc, #52]	; (2a998 <system_gclk_gen_enable+0x4c>)
   2a964:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2a966:	4a0d      	ldr	r2, [pc, #52]	; (2a99c <system_gclk_gen_enable+0x50>)
   2a968:	1dfb      	adds	r3, r7, #7
   2a96a:	781b      	ldrb	r3, [r3, #0]
   2a96c:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2a96e:	46c0      	nop			; (mov r8, r8)
   2a970:	4b08      	ldr	r3, [pc, #32]	; (2a994 <system_gclk_gen_enable+0x48>)
   2a972:	4798      	blx	r3
   2a974:	1e03      	subs	r3, r0, #0
   2a976:	d1fb      	bne.n	2a970 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   2a978:	4b09      	ldr	r3, [pc, #36]	; (2a9a0 <system_gclk_gen_enable+0x54>)
   2a97a:	4a09      	ldr	r2, [pc, #36]	; (2a9a0 <system_gclk_gen_enable+0x54>)
   2a97c:	6852      	ldr	r2, [r2, #4]
   2a97e:	2180      	movs	r1, #128	; 0x80
   2a980:	0249      	lsls	r1, r1, #9
   2a982:	430a      	orrs	r2, r1
   2a984:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2a986:	4b07      	ldr	r3, [pc, #28]	; (2a9a4 <system_gclk_gen_enable+0x58>)
   2a988:	4798      	blx	r3
}
   2a98a:	46c0      	nop			; (mov r8, r8)
   2a98c:	46bd      	mov	sp, r7
   2a98e:	b002      	add	sp, #8
   2a990:	bd80      	pop	{r7, pc}
   2a992:	46c0      	nop			; (mov r8, r8)
   2a994:	0002a7d9 	.word	0x0002a7d9
   2a998:	0002a7b1 	.word	0x0002a7b1
   2a99c:	40000c04 	.word	0x40000c04
   2a9a0:	40000c00 	.word	0x40000c00
   2a9a4:	0002a7c5 	.word	0x0002a7c5

0002a9a8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   2a9a8:	b580      	push	{r7, lr}
   2a9aa:	b086      	sub	sp, #24
   2a9ac:	af00      	add	r7, sp, #0
   2a9ae:	0002      	movs	r2, r0
   2a9b0:	1dfb      	adds	r3, r7, #7
   2a9b2:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   2a9b4:	46c0      	nop			; (mov r8, r8)
   2a9b6:	4b2a      	ldr	r3, [pc, #168]	; (2aa60 <system_gclk_gen_get_hz+0xb8>)
   2a9b8:	4798      	blx	r3
   2a9ba:	1e03      	subs	r3, r0, #0
   2a9bc:	d1fb      	bne.n	2a9b6 <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2a9be:	4b29      	ldr	r3, [pc, #164]	; (2aa64 <system_gclk_gen_get_hz+0xbc>)
   2a9c0:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2a9c2:	4a29      	ldr	r2, [pc, #164]	; (2aa68 <system_gclk_gen_get_hz+0xc0>)
   2a9c4:	1dfb      	adds	r3, r7, #7
   2a9c6:	781b      	ldrb	r3, [r3, #0]
   2a9c8:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2a9ca:	46c0      	nop			; (mov r8, r8)
   2a9cc:	4b24      	ldr	r3, [pc, #144]	; (2aa60 <system_gclk_gen_get_hz+0xb8>)
   2a9ce:	4798      	blx	r3
   2a9d0:	1e03      	subs	r3, r0, #0
   2a9d2:	d1fb      	bne.n	2a9cc <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   2a9d4:	4b25      	ldr	r3, [pc, #148]	; (2aa6c <system_gclk_gen_get_hz+0xc4>)
   2a9d6:	685b      	ldr	r3, [r3, #4]
   2a9d8:	04db      	lsls	r3, r3, #19
   2a9da:	0edb      	lsrs	r3, r3, #27
   2a9dc:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   2a9de:	0018      	movs	r0, r3
   2a9e0:	4b23      	ldr	r3, [pc, #140]	; (2aa70 <system_gclk_gen_get_hz+0xc8>)
   2a9e2:	4798      	blx	r3
   2a9e4:	0003      	movs	r3, r0
   2a9e6:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2a9e8:	4a1f      	ldr	r2, [pc, #124]	; (2aa68 <system_gclk_gen_get_hz+0xc0>)
   2a9ea:	1dfb      	adds	r3, r7, #7
   2a9ec:	781b      	ldrb	r3, [r3, #0]
   2a9ee:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   2a9f0:	4b1e      	ldr	r3, [pc, #120]	; (2aa6c <system_gclk_gen_get_hz+0xc4>)
   2a9f2:	685b      	ldr	r3, [r3, #4]
   2a9f4:	02db      	lsls	r3, r3, #11
   2a9f6:	0fdb      	lsrs	r3, r3, #31
   2a9f8:	b2da      	uxtb	r2, r3
   2a9fa:	2313      	movs	r3, #19
   2a9fc:	18fb      	adds	r3, r7, r3
   2a9fe:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   2aa00:	4a1c      	ldr	r2, [pc, #112]	; (2aa74 <system_gclk_gen_get_hz+0xcc>)
   2aa02:	1dfb      	adds	r3, r7, #7
   2aa04:	781b      	ldrb	r3, [r3, #0]
   2aa06:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2aa08:	46c0      	nop			; (mov r8, r8)
   2aa0a:	4b15      	ldr	r3, [pc, #84]	; (2aa60 <system_gclk_gen_get_hz+0xb8>)
   2aa0c:	4798      	blx	r3
   2aa0e:	1e03      	subs	r3, r0, #0
   2aa10:	d1fb      	bne.n	2aa0a <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   2aa12:	4b16      	ldr	r3, [pc, #88]	; (2aa6c <system_gclk_gen_get_hz+0xc4>)
   2aa14:	689b      	ldr	r3, [r3, #8]
   2aa16:	021b      	lsls	r3, r3, #8
   2aa18:	0c1b      	lsrs	r3, r3, #16
   2aa1a:	b29b      	uxth	r3, r3
   2aa1c:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   2aa1e:	4b16      	ldr	r3, [pc, #88]	; (2aa78 <system_gclk_gen_get_hz+0xd0>)
   2aa20:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   2aa22:	2313      	movs	r3, #19
   2aa24:	18fb      	adds	r3, r7, r3
   2aa26:	781b      	ldrb	r3, [r3, #0]
   2aa28:	2b00      	cmp	r3, #0
   2aa2a:	d109      	bne.n	2aa40 <system_gclk_gen_get_hz+0x98>
   2aa2c:	68fb      	ldr	r3, [r7, #12]
   2aa2e:	2b01      	cmp	r3, #1
   2aa30:	d906      	bls.n	2aa40 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   2aa32:	4b12      	ldr	r3, [pc, #72]	; (2aa7c <system_gclk_gen_get_hz+0xd4>)
   2aa34:	68f9      	ldr	r1, [r7, #12]
   2aa36:	6978      	ldr	r0, [r7, #20]
   2aa38:	4798      	blx	r3
   2aa3a:	0003      	movs	r3, r0
   2aa3c:	617b      	str	r3, [r7, #20]
   2aa3e:	e00a      	b.n	2aa56 <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   2aa40:	2313      	movs	r3, #19
   2aa42:	18fb      	adds	r3, r7, r3
   2aa44:	781b      	ldrb	r3, [r3, #0]
   2aa46:	2b00      	cmp	r3, #0
   2aa48:	d005      	beq.n	2aa56 <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   2aa4a:	68fb      	ldr	r3, [r7, #12]
   2aa4c:	3301      	adds	r3, #1
   2aa4e:	697a      	ldr	r2, [r7, #20]
   2aa50:	40da      	lsrs	r2, r3
   2aa52:	0013      	movs	r3, r2
   2aa54:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   2aa56:	697b      	ldr	r3, [r7, #20]
}
   2aa58:	0018      	movs	r0, r3
   2aa5a:	46bd      	mov	sp, r7
   2aa5c:	b006      	add	sp, #24
   2aa5e:	bd80      	pop	{r7, pc}
   2aa60:	0002a7d9 	.word	0x0002a7d9
   2aa64:	0002a7b1 	.word	0x0002a7b1
   2aa68:	40000c04 	.word	0x40000c04
   2aa6c:	40000c00 	.word	0x40000c00
   2aa70:	0002a109 	.word	0x0002a109
   2aa74:	40000c08 	.word	0x40000c08
   2aa78:	0002a7c5 	.word	0x0002a7c5
   2aa7c:	00033615 	.word	0x00033615

0002aa80 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   2aa80:	b580      	push	{r7, lr}
   2aa82:	b084      	sub	sp, #16
   2aa84:	af00      	add	r7, sp, #0
   2aa86:	0002      	movs	r2, r0
   2aa88:	6039      	str	r1, [r7, #0]
   2aa8a:	1dfb      	adds	r3, r7, #7
   2aa8c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   2aa8e:	1dfb      	adds	r3, r7, #7
   2aa90:	781b      	ldrb	r3, [r3, #0]
   2aa92:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   2aa94:	683b      	ldr	r3, [r7, #0]
   2aa96:	781b      	ldrb	r3, [r3, #0]
   2aa98:	021b      	lsls	r3, r3, #8
   2aa9a:	001a      	movs	r2, r3
   2aa9c:	68fb      	ldr	r3, [r7, #12]
   2aa9e:	4313      	orrs	r3, r2
   2aaa0:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   2aaa2:	1dfb      	adds	r3, r7, #7
   2aaa4:	781b      	ldrb	r3, [r3, #0]
   2aaa6:	0018      	movs	r0, r3
   2aaa8:	4b04      	ldr	r3, [pc, #16]	; (2aabc <system_gclk_chan_set_config+0x3c>)
   2aaaa:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   2aaac:	4b04      	ldr	r3, [pc, #16]	; (2aac0 <system_gclk_chan_set_config+0x40>)
   2aaae:	68fa      	ldr	r2, [r7, #12]
   2aab0:	b292      	uxth	r2, r2
   2aab2:	805a      	strh	r2, [r3, #2]
}
   2aab4:	46c0      	nop			; (mov r8, r8)
   2aab6:	46bd      	mov	sp, r7
   2aab8:	b004      	add	sp, #16
   2aaba:	bd80      	pop	{r7, pc}
   2aabc:	0002ab0d 	.word	0x0002ab0d
   2aac0:	40000c00 	.word	0x40000c00

0002aac4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   2aac4:	b580      	push	{r7, lr}
   2aac6:	b082      	sub	sp, #8
   2aac8:	af00      	add	r7, sp, #0
   2aaca:	0002      	movs	r2, r0
   2aacc:	1dfb      	adds	r3, r7, #7
   2aace:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   2aad0:	4b0a      	ldr	r3, [pc, #40]	; (2aafc <system_gclk_chan_enable+0x38>)
   2aad2:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2aad4:	4a0a      	ldr	r2, [pc, #40]	; (2ab00 <system_gclk_chan_enable+0x3c>)
   2aad6:	1dfb      	adds	r3, r7, #7
   2aad8:	781b      	ldrb	r3, [r3, #0]
   2aada:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   2aadc:	4909      	ldr	r1, [pc, #36]	; (2ab04 <system_gclk_chan_enable+0x40>)
   2aade:	4b09      	ldr	r3, [pc, #36]	; (2ab04 <system_gclk_chan_enable+0x40>)
   2aae0:	885b      	ldrh	r3, [r3, #2]
   2aae2:	b29b      	uxth	r3, r3
   2aae4:	2280      	movs	r2, #128	; 0x80
   2aae6:	01d2      	lsls	r2, r2, #7
   2aae8:	4313      	orrs	r3, r2
   2aaea:	b29b      	uxth	r3, r3
   2aaec:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   2aaee:	4b06      	ldr	r3, [pc, #24]	; (2ab08 <system_gclk_chan_enable+0x44>)
   2aaf0:	4798      	blx	r3
}
   2aaf2:	46c0      	nop			; (mov r8, r8)
   2aaf4:	46bd      	mov	sp, r7
   2aaf6:	b002      	add	sp, #8
   2aaf8:	bd80      	pop	{r7, pc}
   2aafa:	46c0      	nop			; (mov r8, r8)
   2aafc:	0002a7b1 	.word	0x0002a7b1
   2ab00:	40000c02 	.word	0x40000c02
   2ab04:	40000c00 	.word	0x40000c00
   2ab08:	0002a7c5 	.word	0x0002a7c5

0002ab0c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   2ab0c:	b580      	push	{r7, lr}
   2ab0e:	b084      	sub	sp, #16
   2ab10:	af00      	add	r7, sp, #0
   2ab12:	0002      	movs	r2, r0
   2ab14:	1dfb      	adds	r3, r7, #7
   2ab16:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   2ab18:	4b1c      	ldr	r3, [pc, #112]	; (2ab8c <system_gclk_chan_disable+0x80>)
   2ab1a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2ab1c:	4a1c      	ldr	r2, [pc, #112]	; (2ab90 <system_gclk_chan_disable+0x84>)
   2ab1e:	1dfb      	adds	r3, r7, #7
   2ab20:	781b      	ldrb	r3, [r3, #0]
   2ab22:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   2ab24:	4b1b      	ldr	r3, [pc, #108]	; (2ab94 <system_gclk_chan_disable+0x88>)
   2ab26:	885b      	ldrh	r3, [r3, #2]
   2ab28:	051b      	lsls	r3, r3, #20
   2ab2a:	0f1b      	lsrs	r3, r3, #28
   2ab2c:	b2db      	uxtb	r3, r3
   2ab2e:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   2ab30:	4a18      	ldr	r2, [pc, #96]	; (2ab94 <system_gclk_chan_disable+0x88>)
   2ab32:	8853      	ldrh	r3, [r2, #2]
   2ab34:	4918      	ldr	r1, [pc, #96]	; (2ab98 <system_gclk_chan_disable+0x8c>)
   2ab36:	400b      	ands	r3, r1
   2ab38:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   2ab3a:	4a16      	ldr	r2, [pc, #88]	; (2ab94 <system_gclk_chan_disable+0x88>)
   2ab3c:	4b15      	ldr	r3, [pc, #84]	; (2ab94 <system_gclk_chan_disable+0x88>)
   2ab3e:	885b      	ldrh	r3, [r3, #2]
   2ab40:	b29b      	uxth	r3, r3
   2ab42:	4916      	ldr	r1, [pc, #88]	; (2ab9c <system_gclk_chan_disable+0x90>)
   2ab44:	400b      	ands	r3, r1
   2ab46:	b29b      	uxth	r3, r3
   2ab48:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   2ab4a:	46c0      	nop			; (mov r8, r8)
   2ab4c:	4b11      	ldr	r3, [pc, #68]	; (2ab94 <system_gclk_chan_disable+0x88>)
   2ab4e:	885b      	ldrh	r3, [r3, #2]
   2ab50:	b29b      	uxth	r3, r3
   2ab52:	001a      	movs	r2, r3
   2ab54:	2380      	movs	r3, #128	; 0x80
   2ab56:	01db      	lsls	r3, r3, #7
   2ab58:	4013      	ands	r3, r2
   2ab5a:	d1f7      	bne.n	2ab4c <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   2ab5c:	4a0d      	ldr	r2, [pc, #52]	; (2ab94 <system_gclk_chan_disable+0x88>)
   2ab5e:	68fb      	ldr	r3, [r7, #12]
   2ab60:	b2db      	uxtb	r3, r3
   2ab62:	1c19      	adds	r1, r3, #0
   2ab64:	230f      	movs	r3, #15
   2ab66:	400b      	ands	r3, r1
   2ab68:	b2d9      	uxtb	r1, r3
   2ab6a:	8853      	ldrh	r3, [r2, #2]
   2ab6c:	1c08      	adds	r0, r1, #0
   2ab6e:	210f      	movs	r1, #15
   2ab70:	4001      	ands	r1, r0
   2ab72:	0208      	lsls	r0, r1, #8
   2ab74:	4908      	ldr	r1, [pc, #32]	; (2ab98 <system_gclk_chan_disable+0x8c>)
   2ab76:	400b      	ands	r3, r1
   2ab78:	1c19      	adds	r1, r3, #0
   2ab7a:	1c03      	adds	r3, r0, #0
   2ab7c:	430b      	orrs	r3, r1
   2ab7e:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   2ab80:	4b07      	ldr	r3, [pc, #28]	; (2aba0 <system_gclk_chan_disable+0x94>)
   2ab82:	4798      	blx	r3
}
   2ab84:	46c0      	nop			; (mov r8, r8)
   2ab86:	46bd      	mov	sp, r7
   2ab88:	b004      	add	sp, #16
   2ab8a:	bd80      	pop	{r7, pc}
   2ab8c:	0002a7b1 	.word	0x0002a7b1
   2ab90:	40000c02 	.word	0x40000c02
   2ab94:	40000c00 	.word	0x40000c00
   2ab98:	fffff0ff 	.word	0xfffff0ff
   2ab9c:	ffffbfff 	.word	0xffffbfff
   2aba0:	0002a7c5 	.word	0x0002a7c5

0002aba4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   2aba4:	b580      	push	{r7, lr}
   2aba6:	b084      	sub	sp, #16
   2aba8:	af00      	add	r7, sp, #0
   2abaa:	0002      	movs	r2, r0
   2abac:	1dfb      	adds	r3, r7, #7
   2abae:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   2abb0:	4b0d      	ldr	r3, [pc, #52]	; (2abe8 <system_gclk_chan_get_hz+0x44>)
   2abb2:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2abb4:	4a0d      	ldr	r2, [pc, #52]	; (2abec <system_gclk_chan_get_hz+0x48>)
   2abb6:	1dfb      	adds	r3, r7, #7
   2abb8:	781b      	ldrb	r3, [r3, #0]
   2abba:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   2abbc:	4b0c      	ldr	r3, [pc, #48]	; (2abf0 <system_gclk_chan_get_hz+0x4c>)
   2abbe:	885b      	ldrh	r3, [r3, #2]
   2abc0:	051b      	lsls	r3, r3, #20
   2abc2:	0f1b      	lsrs	r3, r3, #28
   2abc4:	b2da      	uxtb	r2, r3
   2abc6:	230f      	movs	r3, #15
   2abc8:	18fb      	adds	r3, r7, r3
   2abca:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   2abcc:	4b09      	ldr	r3, [pc, #36]	; (2abf4 <system_gclk_chan_get_hz+0x50>)
   2abce:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   2abd0:	230f      	movs	r3, #15
   2abd2:	18fb      	adds	r3, r7, r3
   2abd4:	781b      	ldrb	r3, [r3, #0]
   2abd6:	0018      	movs	r0, r3
   2abd8:	4b07      	ldr	r3, [pc, #28]	; (2abf8 <system_gclk_chan_get_hz+0x54>)
   2abda:	4798      	blx	r3
   2abdc:	0003      	movs	r3, r0
}
   2abde:	0018      	movs	r0, r3
   2abe0:	46bd      	mov	sp, r7
   2abe2:	b004      	add	sp, #16
   2abe4:	bd80      	pop	{r7, pc}
   2abe6:	46c0      	nop			; (mov r8, r8)
   2abe8:	0002a7b1 	.word	0x0002a7b1
   2abec:	40000c02 	.word	0x40000c02
   2abf0:	40000c00 	.word	0x40000c00
   2abf4:	0002a7c5 	.word	0x0002a7c5
   2abf8:	0002a9a9 	.word	0x0002a9a9

0002abfc <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
   2abfc:	b580      	push	{r7, lr}
   2abfe:	b084      	sub	sp, #16
   2ac00:	af00      	add	r7, sp, #0
   2ac02:	0002      	movs	r2, r0
   2ac04:	1dfb      	adds	r3, r7, #7
   2ac06:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
   2ac08:	230f      	movs	r3, #15
   2ac0a:	18fb      	adds	r3, r7, r3
   2ac0c:	2200      	movs	r2, #0
   2ac0e:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   2ac10:	1dfb      	adds	r3, r7, #7
   2ac12:	781b      	ldrb	r3, [r3, #0]
   2ac14:	2b7f      	cmp	r3, #127	; 0x7f
   2ac16:	d80b      	bhi.n	2ac30 <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
   2ac18:	4a13      	ldr	r2, [pc, #76]	; (2ac68 <system_interrupt_clear_pending+0x6c>)
   2ac1a:	1dfb      	adds	r3, r7, #7
   2ac1c:	781b      	ldrb	r3, [r3, #0]
   2ac1e:	b25b      	sxtb	r3, r3
   2ac20:	2101      	movs	r1, #1
   2ac22:	4099      	lsls	r1, r3
   2ac24:	000b      	movs	r3, r1
   2ac26:	0019      	movs	r1, r3
   2ac28:	23c0      	movs	r3, #192	; 0xc0
   2ac2a:	005b      	lsls	r3, r3, #1
   2ac2c:	50d1      	str	r1, [r2, r3]
   2ac2e:	e014      	b.n	2ac5a <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
   2ac30:	1dfb      	adds	r3, r7, #7
   2ac32:	781b      	ldrb	r3, [r3, #0]
   2ac34:	b25b      	sxtb	r3, r3
   2ac36:	330e      	adds	r3, #14
   2ac38:	d101      	bne.n	2ac3e <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
   2ac3a:	2317      	movs	r3, #23
   2ac3c:	e010      	b.n	2ac60 <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   2ac3e:	1dfb      	adds	r3, r7, #7
   2ac40:	781b      	ldrb	r3, [r3, #0]
   2ac42:	b25b      	sxtb	r3, r3
   2ac44:	3301      	adds	r3, #1
   2ac46:	d104      	bne.n	2ac52 <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   2ac48:	4b08      	ldr	r3, [pc, #32]	; (2ac6c <system_interrupt_clear_pending+0x70>)
   2ac4a:	2280      	movs	r2, #128	; 0x80
   2ac4c:	0492      	lsls	r2, r2, #18
   2ac4e:	605a      	str	r2, [r3, #4]
   2ac50:	e003      	b.n	2ac5a <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
   2ac52:	230f      	movs	r3, #15
   2ac54:	18fb      	adds	r3, r7, r3
   2ac56:	2217      	movs	r2, #23
   2ac58:	701a      	strb	r2, [r3, #0]
	}

	return status;
   2ac5a:	230f      	movs	r3, #15
   2ac5c:	18fb      	adds	r3, r7, r3
   2ac5e:	781b      	ldrb	r3, [r3, #0]
}
   2ac60:	0018      	movs	r0, r3
   2ac62:	46bd      	mov	sp, r7
   2ac64:	b004      	add	sp, #16
   2ac66:	bd80      	pop	{r7, pc}
   2ac68:	e000e100 	.word	0xe000e100
   2ac6c:	e000ed00 	.word	0xe000ed00

0002ac70 <system_pinmux_get_group_from_gpio_pin>:
{
   2ac70:	b580      	push	{r7, lr}
   2ac72:	b084      	sub	sp, #16
   2ac74:	af00      	add	r7, sp, #0
   2ac76:	0002      	movs	r2, r0
   2ac78:	1dfb      	adds	r3, r7, #7
   2ac7a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   2ac7c:	230f      	movs	r3, #15
   2ac7e:	18fb      	adds	r3, r7, r3
   2ac80:	1dfa      	adds	r2, r7, #7
   2ac82:	7812      	ldrb	r2, [r2, #0]
   2ac84:	09d2      	lsrs	r2, r2, #7
   2ac86:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   2ac88:	230e      	movs	r3, #14
   2ac8a:	18fb      	adds	r3, r7, r3
   2ac8c:	1dfa      	adds	r2, r7, #7
   2ac8e:	7812      	ldrb	r2, [r2, #0]
   2ac90:	0952      	lsrs	r2, r2, #5
   2ac92:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   2ac94:	4b0d      	ldr	r3, [pc, #52]	; (2accc <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2ac96:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   2ac98:	230f      	movs	r3, #15
   2ac9a:	18fb      	adds	r3, r7, r3
   2ac9c:	781b      	ldrb	r3, [r3, #0]
   2ac9e:	2b00      	cmp	r3, #0
   2aca0:	d10f      	bne.n	2acc2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2aca2:	230f      	movs	r3, #15
   2aca4:	18fb      	adds	r3, r7, r3
   2aca6:	781b      	ldrb	r3, [r3, #0]
   2aca8:	009b      	lsls	r3, r3, #2
   2acaa:	2210      	movs	r2, #16
   2acac:	4694      	mov	ip, r2
   2acae:	44bc      	add	ip, r7
   2acb0:	4463      	add	r3, ip
   2acb2:	3b08      	subs	r3, #8
   2acb4:	681a      	ldr	r2, [r3, #0]
   2acb6:	230e      	movs	r3, #14
   2acb8:	18fb      	adds	r3, r7, r3
   2acba:	781b      	ldrb	r3, [r3, #0]
   2acbc:	01db      	lsls	r3, r3, #7
   2acbe:	18d3      	adds	r3, r2, r3
   2acc0:	e000      	b.n	2acc4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2acc2:	2300      	movs	r3, #0
}
   2acc4:	0018      	movs	r0, r3
   2acc6:	46bd      	mov	sp, r7
   2acc8:	b004      	add	sp, #16
   2acca:	bd80      	pop	{r7, pc}
   2accc:	41004400 	.word	0x41004400

0002acd0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   2acd0:	b580      	push	{r7, lr}
   2acd2:	b088      	sub	sp, #32
   2acd4:	af00      	add	r7, sp, #0
   2acd6:	60f8      	str	r0, [r7, #12]
   2acd8:	60b9      	str	r1, [r7, #8]
   2acda:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   2acdc:	2300      	movs	r3, #0
   2acde:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   2ace0:	687b      	ldr	r3, [r7, #4]
   2ace2:	78db      	ldrb	r3, [r3, #3]
   2ace4:	2201      	movs	r2, #1
   2ace6:	4053      	eors	r3, r2
   2ace8:	b2db      	uxtb	r3, r3
   2acea:	2b00      	cmp	r3, #0
   2acec:	d035      	beq.n	2ad5a <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   2acee:	687b      	ldr	r3, [r7, #4]
   2acf0:	781b      	ldrb	r3, [r3, #0]
   2acf2:	2b80      	cmp	r3, #128	; 0x80
   2acf4:	d00b      	beq.n	2ad0e <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   2acf6:	69fb      	ldr	r3, [r7, #28]
   2acf8:	2280      	movs	r2, #128	; 0x80
   2acfa:	0252      	lsls	r2, r2, #9
   2acfc:	4313      	orrs	r3, r2
   2acfe:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   2ad00:	687b      	ldr	r3, [r7, #4]
   2ad02:	781b      	ldrb	r3, [r3, #0]
   2ad04:	061b      	lsls	r3, r3, #24
   2ad06:	001a      	movs	r2, r3
   2ad08:	69fb      	ldr	r3, [r7, #28]
   2ad0a:	4313      	orrs	r3, r2
   2ad0c:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2ad0e:	687b      	ldr	r3, [r7, #4]
   2ad10:	785b      	ldrb	r3, [r3, #1]
   2ad12:	2b00      	cmp	r3, #0
   2ad14:	d003      	beq.n	2ad1e <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2ad16:	687b      	ldr	r3, [r7, #4]
   2ad18:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2ad1a:	2b02      	cmp	r3, #2
   2ad1c:	d110      	bne.n	2ad40 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   2ad1e:	69fb      	ldr	r3, [r7, #28]
   2ad20:	2280      	movs	r2, #128	; 0x80
   2ad22:	0292      	lsls	r2, r2, #10
   2ad24:	4313      	orrs	r3, r2
   2ad26:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   2ad28:	687b      	ldr	r3, [r7, #4]
   2ad2a:	789b      	ldrb	r3, [r3, #2]
   2ad2c:	2b00      	cmp	r3, #0
   2ad2e:	d004      	beq.n	2ad3a <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   2ad30:	69fb      	ldr	r3, [r7, #28]
   2ad32:	2280      	movs	r2, #128	; 0x80
   2ad34:	02d2      	lsls	r2, r2, #11
   2ad36:	4313      	orrs	r3, r2
   2ad38:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   2ad3a:	68fb      	ldr	r3, [r7, #12]
   2ad3c:	68ba      	ldr	r2, [r7, #8]
   2ad3e:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2ad40:	687b      	ldr	r3, [r7, #4]
   2ad42:	785b      	ldrb	r3, [r3, #1]
   2ad44:	2b01      	cmp	r3, #1
   2ad46:	d003      	beq.n	2ad50 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2ad48:	687b      	ldr	r3, [r7, #4]
   2ad4a:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2ad4c:	2b02      	cmp	r3, #2
   2ad4e:	d107      	bne.n	2ad60 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   2ad50:	69fb      	ldr	r3, [r7, #28]
   2ad52:	4a22      	ldr	r2, [pc, #136]	; (2addc <_system_pinmux_config+0x10c>)
   2ad54:	4013      	ands	r3, r2
   2ad56:	61fb      	str	r3, [r7, #28]
   2ad58:	e002      	b.n	2ad60 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   2ad5a:	68fb      	ldr	r3, [r7, #12]
   2ad5c:	68ba      	ldr	r2, [r7, #8]
   2ad5e:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   2ad60:	68bb      	ldr	r3, [r7, #8]
   2ad62:	041b      	lsls	r3, r3, #16
   2ad64:	0c1b      	lsrs	r3, r3, #16
   2ad66:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   2ad68:	68bb      	ldr	r3, [r7, #8]
   2ad6a:	0c1b      	lsrs	r3, r3, #16
   2ad6c:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2ad6e:	69ba      	ldr	r2, [r7, #24]
   2ad70:	69fb      	ldr	r3, [r7, #28]
   2ad72:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   2ad74:	22a0      	movs	r2, #160	; 0xa0
   2ad76:	05d2      	lsls	r2, r2, #23
   2ad78:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2ad7a:	68fb      	ldr	r3, [r7, #12]
   2ad7c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2ad7e:	697a      	ldr	r2, [r7, #20]
   2ad80:	69fb      	ldr	r3, [r7, #28]
   2ad82:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   2ad84:	22d0      	movs	r2, #208	; 0xd0
   2ad86:	0612      	lsls	r2, r2, #24
   2ad88:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2ad8a:	68fb      	ldr	r3, [r7, #12]
   2ad8c:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   2ad8e:	687b      	ldr	r3, [r7, #4]
   2ad90:	78db      	ldrb	r3, [r3, #3]
   2ad92:	2201      	movs	r2, #1
   2ad94:	4053      	eors	r3, r2
   2ad96:	b2db      	uxtb	r3, r3
   2ad98:	2b00      	cmp	r3, #0
   2ad9a:	d01a      	beq.n	2add2 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   2ad9c:	69fa      	ldr	r2, [r7, #28]
   2ad9e:	2380      	movs	r3, #128	; 0x80
   2ada0:	02db      	lsls	r3, r3, #11
   2ada2:	4013      	ands	r3, r2
   2ada4:	d00a      	beq.n	2adbc <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   2ada6:	687b      	ldr	r3, [r7, #4]
   2ada8:	789b      	ldrb	r3, [r3, #2]
   2adaa:	2b01      	cmp	r3, #1
   2adac:	d103      	bne.n	2adb6 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   2adae:	68fb      	ldr	r3, [r7, #12]
   2adb0:	68ba      	ldr	r2, [r7, #8]
   2adb2:	619a      	str	r2, [r3, #24]
   2adb4:	e002      	b.n	2adbc <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   2adb6:	68fb      	ldr	r3, [r7, #12]
   2adb8:	68ba      	ldr	r2, [r7, #8]
   2adba:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2adbc:	687b      	ldr	r3, [r7, #4]
   2adbe:	785b      	ldrb	r3, [r3, #1]
   2adc0:	2b01      	cmp	r3, #1
   2adc2:	d003      	beq.n	2adcc <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2adc4:	687b      	ldr	r3, [r7, #4]
   2adc6:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2adc8:	2b02      	cmp	r3, #2
   2adca:	d102      	bne.n	2add2 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   2adcc:	68fb      	ldr	r3, [r7, #12]
   2adce:	68ba      	ldr	r2, [r7, #8]
   2add0:	609a      	str	r2, [r3, #8]
		}
	}
}
   2add2:	46c0      	nop			; (mov r8, r8)
   2add4:	46bd      	mov	sp, r7
   2add6:	b008      	add	sp, #32
   2add8:	bd80      	pop	{r7, pc}
   2adda:	46c0      	nop			; (mov r8, r8)
   2addc:	fffbffff 	.word	0xfffbffff

0002ade0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   2ade0:	b580      	push	{r7, lr}
   2ade2:	b084      	sub	sp, #16
   2ade4:	af00      	add	r7, sp, #0
   2ade6:	0002      	movs	r2, r0
   2ade8:	6039      	str	r1, [r7, #0]
   2adea:	1dfb      	adds	r3, r7, #7
   2adec:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   2adee:	1dfb      	adds	r3, r7, #7
   2adf0:	781b      	ldrb	r3, [r3, #0]
   2adf2:	0018      	movs	r0, r3
   2adf4:	4b0a      	ldr	r3, [pc, #40]	; (2ae20 <system_pinmux_pin_set_config+0x40>)
   2adf6:	4798      	blx	r3
   2adf8:	0003      	movs	r3, r0
   2adfa:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   2adfc:	1dfb      	adds	r3, r7, #7
   2adfe:	781b      	ldrb	r3, [r3, #0]
   2ae00:	221f      	movs	r2, #31
   2ae02:	4013      	ands	r3, r2
   2ae04:	2201      	movs	r2, #1
   2ae06:	409a      	lsls	r2, r3
   2ae08:	0013      	movs	r3, r2
   2ae0a:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   2ae0c:	683a      	ldr	r2, [r7, #0]
   2ae0e:	68b9      	ldr	r1, [r7, #8]
   2ae10:	68fb      	ldr	r3, [r7, #12]
   2ae12:	0018      	movs	r0, r3
   2ae14:	4b03      	ldr	r3, [pc, #12]	; (2ae24 <system_pinmux_pin_set_config+0x44>)
   2ae16:	4798      	blx	r3
}
   2ae18:	46c0      	nop			; (mov r8, r8)
   2ae1a:	46bd      	mov	sp, r7
   2ae1c:	b004      	add	sp, #16
   2ae1e:	bd80      	pop	{r7, pc}
   2ae20:	0002ac71 	.word	0x0002ac71
   2ae24:	0002acd1 	.word	0x0002acd1

0002ae28 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   2ae28:	b580      	push	{r7, lr}
   2ae2a:	af00      	add	r7, sp, #0
	return;
   2ae2c:	46c0      	nop			; (mov r8, r8)
}
   2ae2e:	46bd      	mov	sp, r7
   2ae30:	bd80      	pop	{r7, pc}
	...

0002ae34 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   2ae34:	b580      	push	{r7, lr}
   2ae36:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   2ae38:	4b06      	ldr	r3, [pc, #24]	; (2ae54 <system_init+0x20>)
   2ae3a:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   2ae3c:	4b06      	ldr	r3, [pc, #24]	; (2ae58 <system_init+0x24>)
   2ae3e:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   2ae40:	4b06      	ldr	r3, [pc, #24]	; (2ae5c <system_init+0x28>)
   2ae42:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   2ae44:	4b06      	ldr	r3, [pc, #24]	; (2ae60 <system_init+0x2c>)
   2ae46:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   2ae48:	4b06      	ldr	r3, [pc, #24]	; (2ae64 <system_init+0x30>)
   2ae4a:	4798      	blx	r3
}
   2ae4c:	46c0      	nop			; (mov r8, r8)
   2ae4e:	46bd      	mov	sp, r7
   2ae50:	bd80      	pop	{r7, pc}
   2ae52:	46c0      	nop			; (mov r8, r8)
   2ae54:	0002a4b5 	.word	0x0002a4b5
   2ae58:	00026f7d 	.word	0x00026f7d
   2ae5c:	00013769 	.word	0x00013769
   2ae60:	00027355 	.word	0x00027355
   2ae64:	0002ae29 	.word	0x0002ae29

0002ae68 <system_gclk_chan_get_config_defaults>:
{
   2ae68:	b580      	push	{r7, lr}
   2ae6a:	b082      	sub	sp, #8
   2ae6c:	af00      	add	r7, sp, #0
   2ae6e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2ae70:	687b      	ldr	r3, [r7, #4]
   2ae72:	2200      	movs	r2, #0
   2ae74:	701a      	strb	r2, [r3, #0]
}
   2ae76:	46c0      	nop			; (mov r8, r8)
   2ae78:	46bd      	mov	sp, r7
   2ae7a:	b002      	add	sp, #8
   2ae7c:	bd80      	pop	{r7, pc}
	...

0002ae80 <system_apb_clock_set_mask>:
{
   2ae80:	b580      	push	{r7, lr}
   2ae82:	b082      	sub	sp, #8
   2ae84:	af00      	add	r7, sp, #0
   2ae86:	0002      	movs	r2, r0
   2ae88:	6039      	str	r1, [r7, #0]
   2ae8a:	1dfb      	adds	r3, r7, #7
   2ae8c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2ae8e:	1dfb      	adds	r3, r7, #7
   2ae90:	781b      	ldrb	r3, [r3, #0]
   2ae92:	2b01      	cmp	r3, #1
   2ae94:	d00a      	beq.n	2aeac <system_apb_clock_set_mask+0x2c>
   2ae96:	2b02      	cmp	r3, #2
   2ae98:	d00f      	beq.n	2aeba <system_apb_clock_set_mask+0x3a>
   2ae9a:	2b00      	cmp	r3, #0
   2ae9c:	d114      	bne.n	2aec8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2ae9e:	4b0e      	ldr	r3, [pc, #56]	; (2aed8 <system_apb_clock_set_mask+0x58>)
   2aea0:	4a0d      	ldr	r2, [pc, #52]	; (2aed8 <system_apb_clock_set_mask+0x58>)
   2aea2:	6991      	ldr	r1, [r2, #24]
   2aea4:	683a      	ldr	r2, [r7, #0]
   2aea6:	430a      	orrs	r2, r1
   2aea8:	619a      	str	r2, [r3, #24]
			break;
   2aeaa:	e00f      	b.n	2aecc <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2aeac:	4b0a      	ldr	r3, [pc, #40]	; (2aed8 <system_apb_clock_set_mask+0x58>)
   2aeae:	4a0a      	ldr	r2, [pc, #40]	; (2aed8 <system_apb_clock_set_mask+0x58>)
   2aeb0:	69d1      	ldr	r1, [r2, #28]
   2aeb2:	683a      	ldr	r2, [r7, #0]
   2aeb4:	430a      	orrs	r2, r1
   2aeb6:	61da      	str	r2, [r3, #28]
			break;
   2aeb8:	e008      	b.n	2aecc <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2aeba:	4b07      	ldr	r3, [pc, #28]	; (2aed8 <system_apb_clock_set_mask+0x58>)
   2aebc:	4a06      	ldr	r2, [pc, #24]	; (2aed8 <system_apb_clock_set_mask+0x58>)
   2aebe:	6a11      	ldr	r1, [r2, #32]
   2aec0:	683a      	ldr	r2, [r7, #0]
   2aec2:	430a      	orrs	r2, r1
   2aec4:	621a      	str	r2, [r3, #32]
			break;
   2aec6:	e001      	b.n	2aecc <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2aec8:	2317      	movs	r3, #23
   2aeca:	e000      	b.n	2aece <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2aecc:	2300      	movs	r3, #0
}
   2aece:	0018      	movs	r0, r3
   2aed0:	46bd      	mov	sp, r7
   2aed2:	b002      	add	sp, #8
   2aed4:	bd80      	pop	{r7, pc}
   2aed6:	46c0      	nop			; (mov r8, r8)
   2aed8:	40000400 	.word	0x40000400

0002aedc <system_pinmux_get_config_defaults>:
{
   2aedc:	b580      	push	{r7, lr}
   2aede:	b082      	sub	sp, #8
   2aee0:	af00      	add	r7, sp, #0
   2aee2:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   2aee4:	687b      	ldr	r3, [r7, #4]
   2aee6:	2280      	movs	r2, #128	; 0x80
   2aee8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2aeea:	687b      	ldr	r3, [r7, #4]
   2aeec:	2200      	movs	r2, #0
   2aeee:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2aef0:	687b      	ldr	r3, [r7, #4]
   2aef2:	2201      	movs	r2, #1
   2aef4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2aef6:	687b      	ldr	r3, [r7, #4]
   2aef8:	2200      	movs	r2, #0
   2aefa:	70da      	strb	r2, [r3, #3]
}
   2aefc:	46c0      	nop			; (mov r8, r8)
   2aefe:	46bd      	mov	sp, r7
   2af00:	b002      	add	sp, #8
   2af02:	bd80      	pop	{r7, pc}

0002af04 <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
   2af04:	b580      	push	{r7, lr}
   2af06:	b084      	sub	sp, #16
   2af08:	af00      	add	r7, sp, #0
   2af0a:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   2af0c:	2300      	movs	r3, #0
   2af0e:	60fb      	str	r3, [r7, #12]
   2af10:	e00c      	b.n	2af2c <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
   2af12:	4b0a      	ldr	r3, [pc, #40]	; (2af3c <_tcc_get_inst_index+0x38>)
   2af14:	68fa      	ldr	r2, [r7, #12]
   2af16:	0092      	lsls	r2, r2, #2
   2af18:	58d2      	ldr	r2, [r2, r3]
   2af1a:	687b      	ldr	r3, [r7, #4]
   2af1c:	429a      	cmp	r2, r3
   2af1e:	d102      	bne.n	2af26 <_tcc_get_inst_index+0x22>
			return i;
   2af20:	68fb      	ldr	r3, [r7, #12]
   2af22:	b2db      	uxtb	r3, r3
   2af24:	e006      	b.n	2af34 <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   2af26:	68fb      	ldr	r3, [r7, #12]
   2af28:	3301      	adds	r3, #1
   2af2a:	60fb      	str	r3, [r7, #12]
   2af2c:	68fb      	ldr	r3, [r7, #12]
   2af2e:	2b02      	cmp	r3, #2
   2af30:	d9ef      	bls.n	2af12 <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   2af32:	2300      	movs	r3, #0
}
   2af34:	0018      	movs	r0, r3
   2af36:	46bd      	mov	sp, r7
   2af38:	b004      	add	sp, #16
   2af3a:	bd80      	pop	{r7, pc}
   2af3c:	0003a310 	.word	0x0003a310

0002af40 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   2af40:	b590      	push	{r4, r7, lr}
   2af42:	b085      	sub	sp, #20
   2af44:	af00      	add	r7, sp, #0
   2af46:	6078      	str	r0, [r7, #4]
   2af48:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2af4a:	230f      	movs	r3, #15
   2af4c:	18fc      	adds	r4, r7, r3
   2af4e:	683b      	ldr	r3, [r7, #0]
   2af50:	0018      	movs	r0, r3
   2af52:	4bad      	ldr	r3, [pc, #692]	; (2b208 <tcc_get_config_defaults+0x2c8>)
   2af54:	4798      	blx	r3
   2af56:	0003      	movs	r3, r0
   2af58:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
   2af5a:	687b      	ldr	r3, [r7, #4]
   2af5c:	2200      	movs	r2, #0
   2af5e:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   2af60:	230f      	movs	r3, #15
   2af62:	18fb      	adds	r3, r7, r3
   2af64:	781a      	ldrb	r2, [r3, #0]
   2af66:	4ba9      	ldr	r3, [pc, #676]	; (2b20c <tcc_get_config_defaults+0x2cc>)
   2af68:	0092      	lsls	r2, r2, #2
   2af6a:	58d2      	ldr	r2, [r2, r3]
   2af6c:	687b      	ldr	r3, [r7, #4]
   2af6e:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   2af70:	687b      	ldr	r3, [r7, #4]
   2af72:	2200      	movs	r2, #0
   2af74:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   2af76:	687b      	ldr	r3, [r7, #4]
   2af78:	2200      	movs	r2, #0
   2af7a:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   2af7c:	687b      	ldr	r3, [r7, #4]
   2af7e:	2200      	movs	r2, #0
   2af80:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   2af82:	687b      	ldr	r3, [r7, #4]
   2af84:	2200      	movs	r2, #0
   2af86:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
   2af88:	687b      	ldr	r3, [r7, #4]
   2af8a:	2200      	movs	r2, #0
   2af8c:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2af8e:	687b      	ldr	r3, [r7, #4]
   2af90:	2200      	movs	r2, #0
   2af92:	61da      	str	r2, [r3, #28]
   2af94:	687b      	ldr	r3, [r7, #4]
   2af96:	2200      	movs	r2, #0
   2af98:	621a      	str	r2, [r3, #32]
   2af9a:	687b      	ldr	r3, [r7, #4]
   2af9c:	2200      	movs	r2, #0
   2af9e:	625a      	str	r2, [r3, #36]	; 0x24
   2afa0:	687b      	ldr	r3, [r7, #4]
   2afa2:	2200      	movs	r2, #0
   2afa4:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2afa6:	687b      	ldr	r3, [r7, #4]
   2afa8:	2200      	movs	r2, #0
   2afaa:	751a      	strb	r2, [r3, #20]
   2afac:	687b      	ldr	r3, [r7, #4]
   2afae:	2200      	movs	r2, #0
   2afb0:	755a      	strb	r2, [r3, #21]
   2afb2:	687b      	ldr	r3, [r7, #4]
   2afb4:	2200      	movs	r2, #0
   2afb6:	759a      	strb	r2, [r3, #22]
   2afb8:	687b      	ldr	r3, [r7, #4]
   2afba:	2200      	movs	r2, #0
   2afbc:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   2afbe:	687b      	ldr	r3, [r7, #4]
   2afc0:	2200      	movs	r2, #0
   2afc2:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   2afc4:	687b      	ldr	r3, [r7, #4]
   2afc6:	2200      	movs	r2, #0
   2afc8:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2afca:	687b      	ldr	r3, [r7, #4]
   2afcc:	2200      	movs	r2, #0
   2afce:	741a      	strb	r2, [r3, #16]
   2afd0:	687b      	ldr	r3, [r7, #4]
   2afd2:	2200      	movs	r2, #0
   2afd4:	745a      	strb	r2, [r3, #17]
   2afd6:	687b      	ldr	r3, [r7, #4]
   2afd8:	2200      	movs	r2, #0
   2afda:	749a      	strb	r2, [r3, #18]
   2afdc:	687b      	ldr	r3, [r7, #4]
   2afde:	2200      	movs	r2, #0
   2afe0:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   2afe2:	687b      	ldr	r3, [r7, #4]
   2afe4:	222c      	movs	r2, #44	; 0x2c
   2afe6:	2100      	movs	r1, #0
   2afe8:	5499      	strb	r1, [r3, r2]
   2afea:	687b      	ldr	r3, [r7, #4]
   2afec:	222d      	movs	r2, #45	; 0x2d
   2afee:	2100      	movs	r1, #0
   2aff0:	5499      	strb	r1, [r3, r2]
   2aff2:	687b      	ldr	r3, [r7, #4]
   2aff4:	222e      	movs	r2, #46	; 0x2e
   2aff6:	2100      	movs	r1, #0
   2aff8:	5499      	strb	r1, [r3, r2]
   2affa:	687b      	ldr	r3, [r7, #4]
   2affc:	222f      	movs	r2, #47	; 0x2f
   2affe:	2100      	movs	r1, #0
   2b000:	5499      	strb	r1, [r3, r2]
   2b002:	687b      	ldr	r3, [r7, #4]
   2b004:	2230      	movs	r2, #48	; 0x30
   2b006:	2100      	movs	r1, #0
   2b008:	5499      	strb	r1, [r3, r2]
   2b00a:	687b      	ldr	r3, [r7, #4]
   2b00c:	2231      	movs	r2, #49	; 0x31
   2b00e:	2100      	movs	r1, #0
   2b010:	5499      	strb	r1, [r3, r2]
   2b012:	687b      	ldr	r3, [r7, #4]
   2b014:	2232      	movs	r2, #50	; 0x32
   2b016:	2100      	movs	r1, #0
   2b018:	5499      	strb	r1, [r3, r2]
   2b01a:	687b      	ldr	r3, [r7, #4]
   2b01c:	2233      	movs	r2, #51	; 0x33
   2b01e:	2100      	movs	r1, #0
   2b020:	5499      	strb	r1, [r3, r2]
   2b022:	687b      	ldr	r3, [r7, #4]
   2b024:	2234      	movs	r2, #52	; 0x34
   2b026:	2100      	movs	r1, #0
   2b028:	5499      	strb	r1, [r3, r2]
   2b02a:	687b      	ldr	r3, [r7, #4]
   2b02c:	2235      	movs	r2, #53	; 0x35
   2b02e:	2100      	movs	r1, #0
   2b030:	5499      	strb	r1, [r3, r2]
   2b032:	687b      	ldr	r3, [r7, #4]
   2b034:	2236      	movs	r2, #54	; 0x36
   2b036:	2100      	movs	r1, #0
   2b038:	5499      	strb	r1, [r3, r2]
   2b03a:	687b      	ldr	r3, [r7, #4]
   2b03c:	2237      	movs	r2, #55	; 0x37
   2b03e:	2100      	movs	r1, #0
   2b040:	5499      	strb	r1, [r3, r2]
   2b042:	687b      	ldr	r3, [r7, #4]
   2b044:	2238      	movs	r2, #56	; 0x38
   2b046:	2100      	movs	r1, #0
   2b048:	5499      	strb	r1, [r3, r2]
   2b04a:	687b      	ldr	r3, [r7, #4]
   2b04c:	2239      	movs	r2, #57	; 0x39
   2b04e:	2100      	movs	r1, #0
   2b050:	5499      	strb	r1, [r3, r2]
   2b052:	687b      	ldr	r3, [r7, #4]
   2b054:	223a      	movs	r2, #58	; 0x3a
   2b056:	2100      	movs	r1, #0
   2b058:	5499      	strb	r1, [r3, r2]
   2b05a:	687b      	ldr	r3, [r7, #4]
   2b05c:	223b      	movs	r2, #59	; 0x3b
   2b05e:	2100      	movs	r1, #0
   2b060:	5499      	strb	r1, [r3, r2]
   2b062:	687b      	ldr	r3, [r7, #4]
   2b064:	223c      	movs	r2, #60	; 0x3c
   2b066:	2100      	movs	r1, #0
   2b068:	5499      	strb	r1, [r3, r2]
   2b06a:	687b      	ldr	r3, [r7, #4]
   2b06c:	223d      	movs	r2, #61	; 0x3d
   2b06e:	2100      	movs	r1, #0
   2b070:	5499      	strb	r1, [r3, r2]
   2b072:	687b      	ldr	r3, [r7, #4]
   2b074:	223e      	movs	r2, #62	; 0x3e
   2b076:	2100      	movs	r1, #0
   2b078:	5499      	strb	r1, [r3, r2]
   2b07a:	687b      	ldr	r3, [r7, #4]
   2b07c:	223f      	movs	r2, #63	; 0x3f
   2b07e:	2100      	movs	r1, #0
   2b080:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   2b082:	687b      	ldr	r3, [r7, #4]
   2b084:	2240      	movs	r2, #64	; 0x40
   2b086:	2100      	movs	r1, #0
   2b088:	5499      	strb	r1, [r3, r2]
   2b08a:	687b      	ldr	r3, [r7, #4]
   2b08c:	2241      	movs	r2, #65	; 0x41
   2b08e:	2100      	movs	r1, #0
   2b090:	5499      	strb	r1, [r3, r2]
   2b092:	687b      	ldr	r3, [r7, #4]
   2b094:	2242      	movs	r2, #66	; 0x42
   2b096:	2100      	movs	r1, #0
   2b098:	5499      	strb	r1, [r3, r2]
   2b09a:	687b      	ldr	r3, [r7, #4]
   2b09c:	2243      	movs	r2, #67	; 0x43
   2b09e:	2100      	movs	r1, #0
   2b0a0:	5499      	strb	r1, [r3, r2]
   2b0a2:	687b      	ldr	r3, [r7, #4]
   2b0a4:	2244      	movs	r2, #68	; 0x44
   2b0a6:	2100      	movs	r1, #0
   2b0a8:	5499      	strb	r1, [r3, r2]
   2b0aa:	687b      	ldr	r3, [r7, #4]
   2b0ac:	2245      	movs	r2, #69	; 0x45
   2b0ae:	2100      	movs	r1, #0
   2b0b0:	5499      	strb	r1, [r3, r2]
   2b0b2:	687b      	ldr	r3, [r7, #4]
   2b0b4:	2246      	movs	r2, #70	; 0x46
   2b0b6:	2100      	movs	r1, #0
   2b0b8:	5499      	strb	r1, [r3, r2]
   2b0ba:	687b      	ldr	r3, [r7, #4]
   2b0bc:	2247      	movs	r2, #71	; 0x47
   2b0be:	2100      	movs	r1, #0
   2b0c0:	5499      	strb	r1, [r3, r2]
   2b0c2:	687b      	ldr	r3, [r7, #4]
   2b0c4:	2248      	movs	r2, #72	; 0x48
   2b0c6:	2100      	movs	r1, #0
   2b0c8:	5499      	strb	r1, [r3, r2]
   2b0ca:	687b      	ldr	r3, [r7, #4]
   2b0cc:	2249      	movs	r2, #73	; 0x49
   2b0ce:	2100      	movs	r1, #0
   2b0d0:	5499      	strb	r1, [r3, r2]
   2b0d2:	687b      	ldr	r3, [r7, #4]
   2b0d4:	224a      	movs	r2, #74	; 0x4a
   2b0d6:	2100      	movs	r1, #0
   2b0d8:	5499      	strb	r1, [r3, r2]
   2b0da:	687b      	ldr	r3, [r7, #4]
   2b0dc:	224b      	movs	r2, #75	; 0x4b
   2b0de:	2100      	movs	r1, #0
   2b0e0:	5499      	strb	r1, [r3, r2]
   2b0e2:	687b      	ldr	r3, [r7, #4]
   2b0e4:	224c      	movs	r2, #76	; 0x4c
   2b0e6:	2100      	movs	r1, #0
   2b0e8:	5499      	strb	r1, [r3, r2]
   2b0ea:	687b      	ldr	r3, [r7, #4]
   2b0ec:	224d      	movs	r2, #77	; 0x4d
   2b0ee:	2100      	movs	r1, #0
   2b0f0:	5499      	strb	r1, [r3, r2]
   2b0f2:	687b      	ldr	r3, [r7, #4]
   2b0f4:	224e      	movs	r2, #78	; 0x4e
   2b0f6:	2100      	movs	r1, #0
   2b0f8:	5499      	strb	r1, [r3, r2]
   2b0fa:	687b      	ldr	r3, [r7, #4]
   2b0fc:	224f      	movs	r2, #79	; 0x4f
   2b0fe:	2100      	movs	r1, #0
   2b100:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   2b102:	687b      	ldr	r3, [r7, #4]
   2b104:	2250      	movs	r2, #80	; 0x50
   2b106:	2100      	movs	r1, #0
   2b108:	5499      	strb	r1, [r3, r2]
   2b10a:	687b      	ldr	r3, [r7, #4]
   2b10c:	2251      	movs	r2, #81	; 0x51
   2b10e:	2100      	movs	r1, #0
   2b110:	5499      	strb	r1, [r3, r2]
   2b112:	687b      	ldr	r3, [r7, #4]
   2b114:	2252      	movs	r2, #82	; 0x52
   2b116:	2100      	movs	r1, #0
   2b118:	5499      	strb	r1, [r3, r2]
   2b11a:	687b      	ldr	r3, [r7, #4]
   2b11c:	2253      	movs	r2, #83	; 0x53
   2b11e:	2100      	movs	r1, #0
   2b120:	5499      	strb	r1, [r3, r2]
   2b122:	687b      	ldr	r3, [r7, #4]
   2b124:	2254      	movs	r2, #84	; 0x54
   2b126:	2100      	movs	r1, #0
   2b128:	5499      	strb	r1, [r3, r2]
   2b12a:	687b      	ldr	r3, [r7, #4]
   2b12c:	2255      	movs	r2, #85	; 0x55
   2b12e:	2100      	movs	r1, #0
   2b130:	5499      	strb	r1, [r3, r2]
   2b132:	687b      	ldr	r3, [r7, #4]
   2b134:	2256      	movs	r2, #86	; 0x56
   2b136:	2100      	movs	r1, #0
   2b138:	5499      	strb	r1, [r3, r2]
   2b13a:	687b      	ldr	r3, [r7, #4]
   2b13c:	2257      	movs	r2, #87	; 0x57
   2b13e:	2100      	movs	r1, #0
   2b140:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   2b142:	687b      	ldr	r3, [r7, #4]
   2b144:	2298      	movs	r2, #152	; 0x98
   2b146:	2100      	movs	r1, #0
   2b148:	5499      	strb	r1, [r3, r2]
   2b14a:	687b      	ldr	r3, [r7, #4]
   2b14c:	2200      	movs	r2, #0
   2b14e:	659a      	str	r2, [r3, #88]	; 0x58
   2b150:	687b      	ldr	r3, [r7, #4]
   2b152:	2200      	movs	r2, #0
   2b154:	679a      	str	r2, [r3, #120]	; 0x78
   2b156:	687b      	ldr	r3, [r7, #4]
   2b158:	2299      	movs	r2, #153	; 0x99
   2b15a:	2100      	movs	r1, #0
   2b15c:	5499      	strb	r1, [r3, r2]
   2b15e:	687b      	ldr	r3, [r7, #4]
   2b160:	2200      	movs	r2, #0
   2b162:	65da      	str	r2, [r3, #92]	; 0x5c
   2b164:	687b      	ldr	r3, [r7, #4]
   2b166:	2200      	movs	r2, #0
   2b168:	67da      	str	r2, [r3, #124]	; 0x7c
   2b16a:	687b      	ldr	r3, [r7, #4]
   2b16c:	229a      	movs	r2, #154	; 0x9a
   2b16e:	2100      	movs	r1, #0
   2b170:	5499      	strb	r1, [r3, r2]
   2b172:	687b      	ldr	r3, [r7, #4]
   2b174:	2200      	movs	r2, #0
   2b176:	661a      	str	r2, [r3, #96]	; 0x60
   2b178:	687b      	ldr	r3, [r7, #4]
   2b17a:	2280      	movs	r2, #128	; 0x80
   2b17c:	2100      	movs	r1, #0
   2b17e:	5099      	str	r1, [r3, r2]
   2b180:	687b      	ldr	r3, [r7, #4]
   2b182:	229b      	movs	r2, #155	; 0x9b
   2b184:	2100      	movs	r1, #0
   2b186:	5499      	strb	r1, [r3, r2]
   2b188:	687b      	ldr	r3, [r7, #4]
   2b18a:	2200      	movs	r2, #0
   2b18c:	665a      	str	r2, [r3, #100]	; 0x64
   2b18e:	687b      	ldr	r3, [r7, #4]
   2b190:	2284      	movs	r2, #132	; 0x84
   2b192:	2100      	movs	r1, #0
   2b194:	5099      	str	r1, [r3, r2]
   2b196:	687b      	ldr	r3, [r7, #4]
   2b198:	229c      	movs	r2, #156	; 0x9c
   2b19a:	2100      	movs	r1, #0
   2b19c:	5499      	strb	r1, [r3, r2]
   2b19e:	687b      	ldr	r3, [r7, #4]
   2b1a0:	2200      	movs	r2, #0
   2b1a2:	669a      	str	r2, [r3, #104]	; 0x68
   2b1a4:	687b      	ldr	r3, [r7, #4]
   2b1a6:	2288      	movs	r2, #136	; 0x88
   2b1a8:	2100      	movs	r1, #0
   2b1aa:	5099      	str	r1, [r3, r2]
   2b1ac:	687b      	ldr	r3, [r7, #4]
   2b1ae:	229d      	movs	r2, #157	; 0x9d
   2b1b0:	2100      	movs	r1, #0
   2b1b2:	5499      	strb	r1, [r3, r2]
   2b1b4:	687b      	ldr	r3, [r7, #4]
   2b1b6:	2200      	movs	r2, #0
   2b1b8:	66da      	str	r2, [r3, #108]	; 0x6c
   2b1ba:	687b      	ldr	r3, [r7, #4]
   2b1bc:	228c      	movs	r2, #140	; 0x8c
   2b1be:	2100      	movs	r1, #0
   2b1c0:	5099      	str	r1, [r3, r2]
   2b1c2:	687b      	ldr	r3, [r7, #4]
   2b1c4:	229e      	movs	r2, #158	; 0x9e
   2b1c6:	2100      	movs	r1, #0
   2b1c8:	5499      	strb	r1, [r3, r2]
   2b1ca:	687b      	ldr	r3, [r7, #4]
   2b1cc:	2200      	movs	r2, #0
   2b1ce:	671a      	str	r2, [r3, #112]	; 0x70
   2b1d0:	687b      	ldr	r3, [r7, #4]
   2b1d2:	2290      	movs	r2, #144	; 0x90
   2b1d4:	2100      	movs	r1, #0
   2b1d6:	5099      	str	r1, [r3, r2]
   2b1d8:	687b      	ldr	r3, [r7, #4]
   2b1da:	229f      	movs	r2, #159	; 0x9f
   2b1dc:	2100      	movs	r1, #0
   2b1de:	5499      	strb	r1, [r3, r2]
   2b1e0:	687b      	ldr	r3, [r7, #4]
   2b1e2:	2200      	movs	r2, #0
   2b1e4:	675a      	str	r2, [r3, #116]	; 0x74
   2b1e6:	687b      	ldr	r3, [r7, #4]
   2b1e8:	2294      	movs	r2, #148	; 0x94
   2b1ea:	2100      	movs	r1, #0
   2b1ec:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   2b1ee:	687b      	ldr	r3, [r7, #4]
   2b1f0:	22a0      	movs	r2, #160	; 0xa0
   2b1f2:	2101      	movs	r1, #1
   2b1f4:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
   2b1f6:	687b      	ldr	r3, [r7, #4]
   2b1f8:	22a1      	movs	r2, #161	; 0xa1
   2b1fa:	2100      	movs	r1, #0
   2b1fc:	5499      	strb	r1, [r3, r2]
}
   2b1fe:	46c0      	nop			; (mov r8, r8)
   2b200:	46bd      	mov	sp, r7
   2b202:	b005      	add	sp, #20
   2b204:	bd90      	pop	{r4, r7, pc}
   2b206:	46c0      	nop			; (mov r8, r8)
   2b208:	0002af05 	.word	0x0002af05
   2b20c:	0003a32c 	.word	0x0003a32c

0002b210 <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2b210:	b580      	push	{r7, lr}
   2b212:	b086      	sub	sp, #24
   2b214:	af00      	add	r7, sp, #0
   2b216:	60b9      	str	r1, [r7, #8]
   2b218:	607a      	str	r2, [r7, #4]
   2b21a:	230f      	movs	r3, #15
   2b21c:	18fb      	adds	r3, r7, r3
   2b21e:	1c02      	adds	r2, r0, #0
   2b220:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
   2b222:	2300      	movs	r3, #0
   2b224:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2b226:	2300      	movs	r3, #0
   2b228:	613b      	str	r3, [r7, #16]
   2b22a:	e01d      	b.n	2b268 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
   2b22c:	68ba      	ldr	r2, [r7, #8]
   2b22e:	693b      	ldr	r3, [r7, #16]
   2b230:	18d3      	adds	r3, r2, r3
   2b232:	3310      	adds	r3, #16
   2b234:	781b      	ldrb	r3, [r3, #0]
   2b236:	2b01      	cmp	r3, #1
   2b238:	d113      	bne.n	2b262 <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
   2b23a:	230f      	movs	r3, #15
   2b23c:	18fb      	adds	r3, r7, r3
   2b23e:	781b      	ldrb	r3, [r3, #0]
   2b240:	4a1b      	ldr	r2, [pc, #108]	; (2b2b0 <_tcc_build_ctrla+0xa0>)
   2b242:	5cd3      	ldrb	r3, [r2, r3]
   2b244:	001a      	movs	r2, r3
   2b246:	693b      	ldr	r3, [r7, #16]
   2b248:	429a      	cmp	r2, r3
   2b24a:	da01      	bge.n	2b250 <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
   2b24c:	2317      	movs	r3, #23
   2b24e:	e02a      	b.n	2b2a6 <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   2b250:	2380      	movs	r3, #128	; 0x80
   2b252:	045a      	lsls	r2, r3, #17
   2b254:	693b      	ldr	r3, [r7, #16]
   2b256:	409a      	lsls	r2, r3
   2b258:	0013      	movs	r3, r2
   2b25a:	001a      	movs	r2, r3
   2b25c:	697b      	ldr	r3, [r7, #20]
   2b25e:	4313      	orrs	r3, r2
   2b260:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2b262:	693b      	ldr	r3, [r7, #16]
   2b264:	3301      	adds	r3, #1
   2b266:	613b      	str	r3, [r7, #16]
   2b268:	693b      	ldr	r3, [r7, #16]
   2b26a:	2b03      	cmp	r3, #3
   2b26c:	ddde      	ble.n	2b22c <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
   2b26e:	68bb      	ldr	r3, [r7, #8]
   2b270:	22a1      	movs	r2, #161	; 0xa1
   2b272:	5c9b      	ldrb	r3, [r3, r2]
   2b274:	2b00      	cmp	r3, #0
   2b276:	d004      	beq.n	2b282 <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   2b278:	697b      	ldr	r3, [r7, #20]
   2b27a:	2280      	movs	r2, #128	; 0x80
   2b27c:	0112      	lsls	r2, r2, #4
   2b27e:	4313      	orrs	r3, r2
   2b280:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   2b282:	68bb      	ldr	r3, [r7, #8]
   2b284:	7b1b      	ldrb	r3, [r3, #12]
   2b286:	031b      	lsls	r3, r3, #12
   2b288:	001a      	movs	r2, r3
   2b28a:	697b      	ldr	r3, [r7, #20]
   2b28c:	4313      	orrs	r3, r2
   2b28e:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   2b290:	68bb      	ldr	r3, [r7, #8]
   2b292:	7adb      	ldrb	r3, [r3, #11]
   2b294:	021b      	lsls	r3, r3, #8
   2b296:	001a      	movs	r2, r3
   2b298:	697b      	ldr	r3, [r7, #20]
   2b29a:	4313      	orrs	r3, r2
   2b29c:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
   2b29e:	687b      	ldr	r3, [r7, #4]
   2b2a0:	697a      	ldr	r2, [r7, #20]
   2b2a2:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2b2a4:	2300      	movs	r3, #0
}
   2b2a6:	0018      	movs	r0, r3
   2b2a8:	46bd      	mov	sp, r7
   2b2aa:	b006      	add	sp, #24
   2b2ac:	bd80      	pop	{r7, pc}
   2b2ae:	46c0      	nop			; (mov r8, r8)
   2b2b0:	0003a338 	.word	0x0003a338

0002b2b4 <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
   2b2b4:	b580      	push	{r7, lr}
   2b2b6:	b086      	sub	sp, #24
   2b2b8:	af00      	add	r7, sp, #0
   2b2ba:	60b9      	str	r1, [r7, #8]
   2b2bc:	607a      	str	r2, [r7, #4]
   2b2be:	230f      	movs	r3, #15
   2b2c0:	18fb      	adds	r3, r7, r3
   2b2c2:	1c02      	adds	r2, r0, #0
   2b2c4:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
   2b2c6:	2317      	movs	r3, #23
   2b2c8:	18fb      	adds	r3, r7, r3
   2b2ca:	2200      	movs	r2, #0
   2b2cc:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
   2b2ce:	68bb      	ldr	r3, [r7, #8]
   2b2d0:	7a1b      	ldrb	r3, [r3, #8]
   2b2d2:	2b00      	cmp	r3, #0
   2b2d4:	d007      	beq.n	2b2e6 <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   2b2d6:	2317      	movs	r3, #23
   2b2d8:	18fb      	adds	r3, r7, r3
   2b2da:	2217      	movs	r2, #23
   2b2dc:	18ba      	adds	r2, r7, r2
   2b2de:	7812      	ldrb	r2, [r2, #0]
   2b2e0:	2104      	movs	r1, #4
   2b2e2:	430a      	orrs	r2, r1
   2b2e4:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   2b2e6:	68bb      	ldr	r3, [r7, #8]
   2b2e8:	7a5b      	ldrb	r3, [r3, #9]
   2b2ea:	2b01      	cmp	r3, #1
   2b2ec:	d107      	bne.n	2b2fe <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
   2b2ee:	2317      	movs	r3, #23
   2b2f0:	18fb      	adds	r3, r7, r3
   2b2f2:	2217      	movs	r2, #23
   2b2f4:	18ba      	adds	r2, r7, r2
   2b2f6:	7812      	ldrb	r2, [r2, #0]
   2b2f8:	2101      	movs	r1, #1
   2b2fa:	430a      	orrs	r2, r1
   2b2fc:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
   2b2fe:	687b      	ldr	r3, [r7, #4]
   2b300:	2217      	movs	r2, #23
   2b302:	18ba      	adds	r2, r7, r2
   2b304:	7812      	ldrb	r2, [r2, #0]
   2b306:	701a      	strb	r2, [r3, #0]
}
   2b308:	46c0      	nop			; (mov r8, r8)
   2b30a:	46bd      	mov	sp, r7
   2b30c:	b006      	add	sp, #24
   2b30e:	bd80      	pop	{r7, pc}

0002b310 <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2b310:	b580      	push	{r7, lr}
   2b312:	b088      	sub	sp, #32
   2b314:	af00      	add	r7, sp, #0
   2b316:	60b9      	str	r1, [r7, #8]
   2b318:	607a      	str	r2, [r7, #4]
   2b31a:	230f      	movs	r3, #15
   2b31c:	18fb      	adds	r3, r7, r3
   2b31e:	1c02      	adds	r2, r0, #0
   2b320:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
   2b322:	230f      	movs	r3, #15
   2b324:	18fb      	adds	r3, r7, r3
   2b326:	781a      	ldrb	r2, [r3, #0]
   2b328:	231b      	movs	r3, #27
   2b32a:	18fb      	adds	r3, r7, r3
   2b32c:	493e      	ldr	r1, [pc, #248]	; (2b428 <_tcc_build_faults+0x118>)
   2b32e:	5c8a      	ldrb	r2, [r1, r2]
   2b330:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2b332:	2300      	movs	r3, #0
   2b334:	61fb      	str	r3, [r7, #28]
   2b336:	e06e      	b.n	2b416 <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
   2b338:	69fa      	ldr	r2, [r7, #28]
   2b33a:	0013      	movs	r3, r2
   2b33c:	009b      	lsls	r3, r3, #2
   2b33e:	189b      	adds	r3, r3, r2
   2b340:	005b      	lsls	r3, r3, #1
   2b342:	3328      	adds	r3, #40	; 0x28
   2b344:	68ba      	ldr	r2, [r7, #8]
   2b346:	18d3      	adds	r3, r2, r3
   2b348:	3304      	adds	r3, #4
   2b34a:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
   2b34c:	697b      	ldr	r3, [r7, #20]
   2b34e:	7a5b      	ldrb	r3, [r3, #9]
   2b350:	221b      	movs	r2, #27
   2b352:	18ba      	adds	r2, r7, r2
   2b354:	7812      	ldrb	r2, [r2, #0]
   2b356:	429a      	cmp	r2, r3
   2b358:	d801      	bhi.n	2b35e <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
   2b35a:	2317      	movs	r3, #23
   2b35c:	e05f      	b.n	2b41e <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
   2b35e:	697b      	ldr	r3, [r7, #20]
   2b360:	781b      	ldrb	r3, [r3, #0]
   2b362:	2b0f      	cmp	r3, #15
   2b364:	d901      	bls.n	2b36a <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
   2b366:	2317      	movs	r3, #23
   2b368:	e059      	b.n	2b41e <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2b36a:	697b      	ldr	r3, [r7, #20]
   2b36c:	781b      	ldrb	r3, [r3, #0]
   2b36e:	061b      	lsls	r3, r3, #24
   2b370:	001a      	movs	r2, r3
   2b372:	23f0      	movs	r3, #240	; 0xf0
   2b374:	051b      	lsls	r3, r3, #20
   2b376:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   2b378:	697b      	ldr	r3, [r7, #20]
   2b37a:	785b      	ldrb	r3, [r3, #1]
   2b37c:	041b      	lsls	r3, r3, #16
   2b37e:	0019      	movs	r1, r3
   2b380:	23ff      	movs	r3, #255	; 0xff
   2b382:	041b      	lsls	r3, r3, #16
   2b384:	400b      	ands	r3, r1
   2b386:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   2b388:	697b      	ldr	r3, [r7, #20]
   2b38a:	789b      	ldrb	r3, [r3, #2]
   2b38c:	2b00      	cmp	r3, #0
   2b38e:	d001      	beq.n	2b394 <_tcc_build_faults+0x84>
   2b390:	2380      	movs	r3, #128	; 0x80
   2b392:	e000      	b.n	2b396 <_tcc_build_faults+0x86>
   2b394:	2300      	movs	r3, #0
   2b396:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   2b398:	697b      	ldr	r3, [r7, #20]
   2b39a:	78db      	ldrb	r3, [r3, #3]
   2b39c:	2b00      	cmp	r3, #0
   2b39e:	d001      	beq.n	2b3a4 <_tcc_build_faults+0x94>
   2b3a0:	2308      	movs	r3, #8
   2b3a2:	e000      	b.n	2b3a6 <_tcc_build_faults+0x96>
   2b3a4:	2300      	movs	r3, #0
   2b3a6:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   2b3a8:	697b      	ldr	r3, [r7, #20]
   2b3aa:	791b      	ldrb	r3, [r3, #4]
   2b3ac:	2b00      	cmp	r3, #0
   2b3ae:	d001      	beq.n	2b3b4 <_tcc_build_faults+0xa4>
   2b3b0:	2310      	movs	r3, #16
   2b3b2:	e000      	b.n	2b3b6 <_tcc_build_faults+0xa6>
   2b3b4:	2300      	movs	r3, #0
   2b3b6:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
   2b3b8:	697b      	ldr	r3, [r7, #20]
   2b3ba:	795b      	ldrb	r3, [r3, #5]
   2b3bc:	0019      	movs	r1, r3
   2b3be:	2303      	movs	r3, #3
   2b3c0:	400b      	ands	r3, r1
   2b3c2:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
   2b3c4:	697b      	ldr	r3, [r7, #20]
   2b3c6:	799b      	ldrb	r3, [r3, #6]
   2b3c8:	015b      	lsls	r3, r3, #5
   2b3ca:	0019      	movs	r1, r3
   2b3cc:	2360      	movs	r3, #96	; 0x60
   2b3ce:	400b      	ands	r3, r1
   2b3d0:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
   2b3d2:	697b      	ldr	r3, [r7, #20]
   2b3d4:	79db      	ldrb	r3, [r3, #7]
   2b3d6:	021b      	lsls	r3, r3, #8
   2b3d8:	0019      	movs	r1, r3
   2b3da:	23c0      	movs	r3, #192	; 0xc0
   2b3dc:	009b      	lsls	r3, r3, #2
   2b3de:	400b      	ands	r3, r1
   2b3e0:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   2b3e2:	697b      	ldr	r3, [r7, #20]
   2b3e4:	7a1b      	ldrb	r3, [r3, #8]
   2b3e6:	031b      	lsls	r3, r3, #12
   2b3e8:	0019      	movs	r1, r3
   2b3ea:	23e0      	movs	r3, #224	; 0xe0
   2b3ec:	01db      	lsls	r3, r3, #7
   2b3ee:	400b      	ands	r3, r1
   2b3f0:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   2b3f2:	697b      	ldr	r3, [r7, #20]
   2b3f4:	7a5b      	ldrb	r3, [r3, #9]
   2b3f6:	029b      	lsls	r3, r3, #10
   2b3f8:	0019      	movs	r1, r3
   2b3fa:	23c0      	movs	r3, #192	; 0xc0
   2b3fc:	011b      	lsls	r3, r3, #4
   2b3fe:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2b400:	4313      	orrs	r3, r2
   2b402:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
   2b404:	69fb      	ldr	r3, [r7, #28]
   2b406:	009b      	lsls	r3, r3, #2
   2b408:	687a      	ldr	r2, [r7, #4]
   2b40a:	18d3      	adds	r3, r2, r3
   2b40c:	693a      	ldr	r2, [r7, #16]
   2b40e:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2b410:	69fb      	ldr	r3, [r7, #28]
   2b412:	3301      	adds	r3, #1
   2b414:	61fb      	str	r3, [r7, #28]
   2b416:	69fb      	ldr	r3, [r7, #28]
   2b418:	2b01      	cmp	r3, #1
   2b41a:	dd8d      	ble.n	2b338 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
   2b41c:	2300      	movs	r3, #0
}
   2b41e:	0018      	movs	r0, r3
   2b420:	46bd      	mov	sp, r7
   2b422:	b008      	add	sp, #32
   2b424:	bd80      	pop	{r7, pc}
   2b426:	46c0      	nop			; (mov r8, r8)
   2b428:	0003a338 	.word	0x0003a338

0002b42c <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2b42c:	b580      	push	{r7, lr}
   2b42e:	b088      	sub	sp, #32
   2b430:	af00      	add	r7, sp, #0
   2b432:	60b9      	str	r1, [r7, #8]
   2b434:	607a      	str	r2, [r7, #4]
   2b436:	230f      	movs	r3, #15
   2b438:	18fb      	adds	r3, r7, r3
   2b43a:	1c02      	adds	r2, r0, #0
   2b43c:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
   2b43e:	230f      	movs	r3, #15
   2b440:	18fb      	adds	r3, r7, r3
   2b442:	781a      	ldrb	r2, [r3, #0]
   2b444:	2317      	movs	r3, #23
   2b446:	18fb      	adds	r3, r7, r3
   2b448:	492d      	ldr	r1, [pc, #180]	; (2b500 <_tcc_build_drvctrl+0xd4>)
   2b44a:	5c8a      	ldrb	r2, [r1, r2]
   2b44c:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
   2b44e:	2300      	movs	r3, #0
   2b450:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2b452:	2300      	movs	r3, #0
   2b454:	61fb      	str	r3, [r7, #28]
   2b456:	e048      	b.n	2b4ea <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
   2b458:	68ba      	ldr	r2, [r7, #8]
   2b45a:	2150      	movs	r1, #80	; 0x50
   2b45c:	69fb      	ldr	r3, [r7, #28]
   2b45e:	18d3      	adds	r3, r2, r3
   2b460:	185b      	adds	r3, r3, r1
   2b462:	781b      	ldrb	r3, [r3, #0]
   2b464:	2b00      	cmp	r3, #0
   2b466:	d010      	beq.n	2b48a <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
   2b468:	2317      	movs	r3, #23
   2b46a:	18fb      	adds	r3, r7, r3
   2b46c:	781a      	ldrb	r2, [r3, #0]
   2b46e:	69fb      	ldr	r3, [r7, #28]
   2b470:	429a      	cmp	r2, r3
   2b472:	d801      	bhi.n	2b478 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
   2b474:	2317      	movs	r3, #23
   2b476:	e03f      	b.n	2b4f8 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   2b478:	2380      	movs	r3, #128	; 0x80
   2b47a:	025a      	lsls	r2, r3, #9
   2b47c:	69fb      	ldr	r3, [r7, #28]
   2b47e:	409a      	lsls	r2, r3
   2b480:	0013      	movs	r3, r2
   2b482:	001a      	movs	r2, r3
   2b484:	69bb      	ldr	r3, [r7, #24]
   2b486:	4313      	orrs	r3, r2
   2b488:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
   2b48a:	68ba      	ldr	r2, [r7, #8]
   2b48c:	69fb      	ldr	r3, [r7, #28]
   2b48e:	331c      	adds	r3, #28
   2b490:	005b      	lsls	r3, r3, #1
   2b492:	18d3      	adds	r3, r2, r3
   2b494:	3309      	adds	r3, #9
   2b496:	781b      	ldrb	r3, [r3, #0]
   2b498:	2b00      	cmp	r3, #0
   2b49a:	d023      	beq.n	2b4e4 <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
   2b49c:	2317      	movs	r3, #23
   2b49e:	18fb      	adds	r3, r7, r3
   2b4a0:	781a      	ldrb	r2, [r3, #0]
   2b4a2:	69fb      	ldr	r3, [r7, #28]
   2b4a4:	429a      	cmp	r2, r3
   2b4a6:	d801      	bhi.n	2b4ac <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
   2b4a8:	2317      	movs	r3, #23
   2b4aa:	e025      	b.n	2b4f8 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
   2b4ac:	68ba      	ldr	r2, [r7, #8]
   2b4ae:	69fb      	ldr	r3, [r7, #28]
   2b4b0:	331c      	adds	r3, #28
   2b4b2:	005b      	lsls	r3, r3, #1
   2b4b4:	18d3      	adds	r3, r2, r3
   2b4b6:	3309      	adds	r3, #9
   2b4b8:	781b      	ldrb	r3, [r3, #0]
   2b4ba:	2b02      	cmp	r3, #2
   2b4bc:	d10a      	bne.n	2b4d4 <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   2b4be:	2302      	movs	r3, #2
   2b4c0:	33ff      	adds	r3, #255	; 0xff
   2b4c2:	001a      	movs	r2, r3
   2b4c4:	69fb      	ldr	r3, [r7, #28]
   2b4c6:	409a      	lsls	r2, r3
   2b4c8:	0013      	movs	r3, r2
   2b4ca:	001a      	movs	r2, r3
   2b4cc:	69bb      	ldr	r3, [r7, #24]
   2b4ce:	4313      	orrs	r3, r2
   2b4d0:	61bb      	str	r3, [r7, #24]
   2b4d2:	e007      	b.n	2b4e4 <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   2b4d4:	2201      	movs	r2, #1
   2b4d6:	69fb      	ldr	r3, [r7, #28]
   2b4d8:	409a      	lsls	r2, r3
   2b4da:	0013      	movs	r3, r2
   2b4dc:	001a      	movs	r2, r3
   2b4de:	69bb      	ldr	r3, [r7, #24]
   2b4e0:	4313      	orrs	r3, r2
   2b4e2:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2b4e4:	69fb      	ldr	r3, [r7, #28]
   2b4e6:	3301      	adds	r3, #1
   2b4e8:	61fb      	str	r3, [r7, #28]
   2b4ea:	69fb      	ldr	r3, [r7, #28]
   2b4ec:	2b07      	cmp	r3, #7
   2b4ee:	d9b3      	bls.n	2b458 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
   2b4f0:	687b      	ldr	r3, [r7, #4]
   2b4f2:	69ba      	ldr	r2, [r7, #24]
   2b4f4:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2b4f6:	2300      	movs	r3, #0
}
   2b4f8:	0018      	movs	r0, r3
   2b4fa:	46bd      	mov	sp, r7
   2b4fc:	b008      	add	sp, #32
   2b4fe:	bd80      	pop	{r7, pc}
   2b500:	0003a33c 	.word	0x0003a33c

0002b504 <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2b504:	b580      	push	{r7, lr}
   2b506:	b088      	sub	sp, #32
   2b508:	af00      	add	r7, sp, #0
   2b50a:	60b9      	str	r1, [r7, #8]
   2b50c:	607a      	str	r2, [r7, #4]
   2b50e:	230f      	movs	r3, #15
   2b510:	18fb      	adds	r3, r7, r3
   2b512:	1c02      	adds	r2, r0, #0
   2b514:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
   2b516:	230f      	movs	r3, #15
   2b518:	18fb      	adds	r3, r7, r3
   2b51a:	781a      	ldrb	r2, [r3, #0]
   2b51c:	2317      	movs	r3, #23
   2b51e:	18fb      	adds	r3, r7, r3
   2b520:	491d      	ldr	r1, [pc, #116]	; (2b598 <_tcc_build_waves+0x94>)
   2b522:	5c8a      	ldrb	r2, [r1, r2]
   2b524:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
   2b526:	68bb      	ldr	r3, [r7, #8]
   2b528:	3310      	adds	r3, #16
   2b52a:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2b52c:	693b      	ldr	r3, [r7, #16]
   2b52e:	7a5b      	ldrb	r3, [r3, #9]
   2b530:	011b      	lsls	r3, r3, #4
   2b532:	001a      	movs	r2, r3
   2b534:	2330      	movs	r3, #48	; 0x30
   2b536:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   2b538:	693b      	ldr	r3, [r7, #16]
   2b53a:	7a1b      	ldrb	r3, [r3, #8]
   2b53c:	0019      	movs	r1, r3
   2b53e:	2307      	movs	r3, #7
   2b540:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2b542:	4313      	orrs	r3, r2
   2b544:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2b546:	2300      	movs	r3, #0
   2b548:	61fb      	str	r3, [r7, #28]
   2b54a:	e01a      	b.n	2b582 <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
   2b54c:	693a      	ldr	r2, [r7, #16]
   2b54e:	69fb      	ldr	r3, [r7, #28]
   2b550:	18d3      	adds	r3, r2, r3
   2b552:	3304      	adds	r3, #4
   2b554:	781b      	ldrb	r3, [r3, #0]
   2b556:	2b00      	cmp	r3, #0
   2b558:	d010      	beq.n	2b57c <_tcc_build_waves+0x78>
			if (n >= cc_num) {
   2b55a:	2317      	movs	r3, #23
   2b55c:	18fb      	adds	r3, r7, r3
   2b55e:	781a      	ldrb	r2, [r3, #0]
   2b560:	69fb      	ldr	r3, [r7, #28]
   2b562:	429a      	cmp	r2, r3
   2b564:	dc01      	bgt.n	2b56a <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
   2b566:	2317      	movs	r3, #23
   2b568:	e012      	b.n	2b590 <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
   2b56a:	2380      	movs	r3, #128	; 0x80
   2b56c:	025a      	lsls	r2, r3, #9
   2b56e:	69fb      	ldr	r3, [r7, #28]
   2b570:	409a      	lsls	r2, r3
   2b572:	0013      	movs	r3, r2
   2b574:	001a      	movs	r2, r3
   2b576:	69bb      	ldr	r3, [r7, #24]
   2b578:	4313      	orrs	r3, r2
   2b57a:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2b57c:	69fb      	ldr	r3, [r7, #28]
   2b57e:	3301      	adds	r3, #1
   2b580:	61fb      	str	r3, [r7, #28]
   2b582:	69fb      	ldr	r3, [r7, #28]
   2b584:	2b03      	cmp	r3, #3
   2b586:	dde1      	ble.n	2b54c <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
   2b588:	687b      	ldr	r3, [r7, #4]
   2b58a:	69ba      	ldr	r2, [r7, #24]
   2b58c:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
   2b58e:	2300      	movs	r3, #0
}
   2b590:	0018      	movs	r0, r3
   2b592:	46bd      	mov	sp, r7
   2b594:	b008      	add	sp, #32
   2b596:	bd80      	pop	{r7, pc}
   2b598:	0003a338 	.word	0x0003a338

0002b59c <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   2b59c:	b590      	push	{r4, r7, lr}
   2b59e:	b091      	sub	sp, #68	; 0x44
   2b5a0:	af00      	add	r7, sp, #0
   2b5a2:	60f8      	str	r0, [r7, #12]
   2b5a4:	60b9      	str	r1, [r7, #8]
   2b5a6:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2b5a8:	233b      	movs	r3, #59	; 0x3b
   2b5aa:	18fc      	adds	r4, r7, r3
   2b5ac:	68bb      	ldr	r3, [r7, #8]
   2b5ae:	0018      	movs	r0, r3
   2b5b0:	4bc4      	ldr	r3, [pc, #784]	; (2b8c4 <tcc_init+0x328>)
   2b5b2:	4798      	blx	r3
   2b5b4:	0003      	movs	r3, r0
   2b5b6:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   2b5b8:	233b      	movs	r3, #59	; 0x3b
   2b5ba:	18fb      	adds	r3, r7, r3
   2b5bc:	781a      	ldrb	r2, [r3, #0]
   2b5be:	4bc2      	ldr	r3, [pc, #776]	; (2b8c8 <tcc_init+0x32c>)
   2b5c0:	0092      	lsls	r2, r2, #2
   2b5c2:	58d3      	ldr	r3, [r2, r3]
   2b5c4:	0019      	movs	r1, r3
   2b5c6:	2002      	movs	r0, #2
   2b5c8:	4bc0      	ldr	r3, [pc, #768]	; (2b8cc <tcc_init+0x330>)
   2b5ca:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   2b5cc:	68bb      	ldr	r3, [r7, #8]
   2b5ce:	681b      	ldr	r3, [r3, #0]
   2b5d0:	2202      	movs	r2, #2
   2b5d2:	4013      	ands	r3, r2
   2b5d4:	d001      	beq.n	2b5da <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
   2b5d6:	231c      	movs	r3, #28
   2b5d8:	e1be      	b.n	2b958 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   2b5da:	68bb      	ldr	r3, [r7, #8]
   2b5dc:	681b      	ldr	r3, [r3, #0]
   2b5de:	2201      	movs	r2, #1
   2b5e0:	4013      	ands	r3, r2
   2b5e2:	d001      	beq.n	2b5e8 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
   2b5e4:	231c      	movs	r3, #28
   2b5e6:	e1b7      	b.n	2b958 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
   2b5e8:	233b      	movs	r3, #59	; 0x3b
   2b5ea:	18fb      	adds	r3, r7, r3
   2b5ec:	781a      	ldrb	r2, [r3, #0]
   2b5ee:	4bb8      	ldr	r3, [pc, #736]	; (2b8d0 <tcc_init+0x334>)
   2b5f0:	0092      	lsls	r2, r2, #2
   2b5f2:	58d3      	ldr	r3, [r2, r3]
   2b5f4:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
   2b5f6:	687b      	ldr	r3, [r7, #4]
   2b5f8:	681a      	ldr	r2, [r3, #0]
   2b5fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2b5fc:	429a      	cmp	r2, r3
   2b5fe:	d804      	bhi.n	2b60a <tcc_init+0x6e>
		|| (config->counter.period > count_max)
   2b600:	687b      	ldr	r3, [r7, #4]
   2b602:	685a      	ldr	r2, [r3, #4]
   2b604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2b606:	429a      	cmp	r2, r3
   2b608:	d901      	bls.n	2b60e <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
   2b60a:	2317      	movs	r3, #23
   2b60c:	e1a4      	b.n	2b958 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2b60e:	2300      	movs	r3, #0
   2b610:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b612:	e00e      	b.n	2b632 <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
   2b614:	687a      	ldr	r2, [r7, #4]
   2b616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b618:	3306      	adds	r3, #6
   2b61a:	009b      	lsls	r3, r3, #2
   2b61c:	18d3      	adds	r3, r2, r3
   2b61e:	3304      	adds	r3, #4
   2b620:	681a      	ldr	r2, [r3, #0]
   2b622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2b624:	429a      	cmp	r2, r3
   2b626:	d901      	bls.n	2b62c <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
   2b628:	2317      	movs	r3, #23
   2b62a:	e195      	b.n	2b958 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2b62c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b62e:	3301      	adds	r3, #1
   2b630:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b634:	2b03      	cmp	r3, #3
   2b636:	dded      	ble.n	2b614 <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2b638:	2300      	movs	r3, #0
   2b63a:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b63c:	e019      	b.n	2b672 <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
   2b63e:	687a      	ldr	r2, [r7, #4]
   2b640:	2198      	movs	r1, #152	; 0x98
   2b642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b644:	18d3      	adds	r3, r2, r3
   2b646:	185b      	adds	r3, r3, r1
   2b648:	781b      	ldrb	r3, [r3, #0]
   2b64a:	2201      	movs	r2, #1
   2b64c:	4053      	eors	r3, r2
   2b64e:	b2db      	uxtb	r3, r3
   2b650:	2b00      	cmp	r3, #0
   2b652:	d10a      	bne.n	2b66a <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
   2b654:	233b      	movs	r3, #59	; 0x3b
   2b656:	18fb      	adds	r3, r7, r3
   2b658:	781b      	ldrb	r3, [r3, #0]
   2b65a:	4a9e      	ldr	r2, [pc, #632]	; (2b8d4 <tcc_init+0x338>)
   2b65c:	5cd3      	ldrb	r3, [r2, r3]
   2b65e:	001a      	movs	r2, r3
   2b660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b662:	429a      	cmp	r2, r3
   2b664:	dc02      	bgt.n	2b66c <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
   2b666:	2317      	movs	r3, #23
   2b668:	e176      	b.n	2b958 <tcc_init+0x3bc>
			continue;
   2b66a:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2b66c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b66e:	3301      	adds	r3, #1
   2b670:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b674:	2b07      	cmp	r3, #7
   2b676:	dde2      	ble.n	2b63e <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
   2b678:	2300      	movs	r3, #0
   2b67a:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
   2b67c:	2333      	movs	r3, #51	; 0x33
   2b67e:	18fc      	adds	r4, r7, r3
   2b680:	232c      	movs	r3, #44	; 0x2c
   2b682:	18fa      	adds	r2, r7, r3
   2b684:	6879      	ldr	r1, [r7, #4]
   2b686:	233b      	movs	r3, #59	; 0x3b
   2b688:	18fb      	adds	r3, r7, r3
   2b68a:	781b      	ldrb	r3, [r3, #0]
   2b68c:	0018      	movs	r0, r3
   2b68e:	4b92      	ldr	r3, [pc, #584]	; (2b8d8 <tcc_init+0x33c>)
   2b690:	4798      	blx	r3
   2b692:	0003      	movs	r3, r0
   2b694:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2b696:	2333      	movs	r3, #51	; 0x33
   2b698:	18fb      	adds	r3, r7, r3
   2b69a:	781b      	ldrb	r3, [r3, #0]
   2b69c:	2b00      	cmp	r3, #0
   2b69e:	d003      	beq.n	2b6a8 <tcc_init+0x10c>
		return status;
   2b6a0:	2333      	movs	r3, #51	; 0x33
   2b6a2:	18fb      	adds	r3, r7, r3
   2b6a4:	781b      	ldrb	r3, [r3, #0]
   2b6a6:	e157      	b.n	2b958 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
   2b6a8:	232b      	movs	r3, #43	; 0x2b
   2b6aa:	18fa      	adds	r2, r7, r3
   2b6ac:	6879      	ldr	r1, [r7, #4]
   2b6ae:	233b      	movs	r3, #59	; 0x3b
   2b6b0:	18fb      	adds	r3, r7, r3
   2b6b2:	781b      	ldrb	r3, [r3, #0]
   2b6b4:	0018      	movs	r0, r3
   2b6b6:	4b89      	ldr	r3, [pc, #548]	; (2b8dc <tcc_init+0x340>)
   2b6b8:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
   2b6ba:	2333      	movs	r3, #51	; 0x33
   2b6bc:	18fc      	adds	r4, r7, r3
   2b6be:	2320      	movs	r3, #32
   2b6c0:	18fa      	adds	r2, r7, r3
   2b6c2:	6879      	ldr	r1, [r7, #4]
   2b6c4:	233b      	movs	r3, #59	; 0x3b
   2b6c6:	18fb      	adds	r3, r7, r3
   2b6c8:	781b      	ldrb	r3, [r3, #0]
   2b6ca:	0018      	movs	r0, r3
   2b6cc:	4b84      	ldr	r3, [pc, #528]	; (2b8e0 <tcc_init+0x344>)
   2b6ce:	4798      	blx	r3
   2b6d0:	0003      	movs	r3, r0
   2b6d2:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2b6d4:	2333      	movs	r3, #51	; 0x33
   2b6d6:	18fb      	adds	r3, r7, r3
   2b6d8:	781b      	ldrb	r3, [r3, #0]
   2b6da:	2b00      	cmp	r3, #0
   2b6dc:	d003      	beq.n	2b6e6 <tcc_init+0x14a>
		return status;
   2b6de:	2333      	movs	r3, #51	; 0x33
   2b6e0:	18fb      	adds	r3, r7, r3
   2b6e2:	781b      	ldrb	r3, [r3, #0]
   2b6e4:	e138      	b.n	2b958 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
   2b6e6:	2300      	movs	r3, #0
   2b6e8:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
   2b6ea:	2333      	movs	r3, #51	; 0x33
   2b6ec:	18fc      	adds	r4, r7, r3
   2b6ee:	231c      	movs	r3, #28
   2b6f0:	18fa      	adds	r2, r7, r3
   2b6f2:	6879      	ldr	r1, [r7, #4]
   2b6f4:	233b      	movs	r3, #59	; 0x3b
   2b6f6:	18fb      	adds	r3, r7, r3
   2b6f8:	781b      	ldrb	r3, [r3, #0]
   2b6fa:	0018      	movs	r0, r3
   2b6fc:	4b79      	ldr	r3, [pc, #484]	; (2b8e4 <tcc_init+0x348>)
   2b6fe:	4798      	blx	r3
   2b700:	0003      	movs	r3, r0
   2b702:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2b704:	2333      	movs	r3, #51	; 0x33
   2b706:	18fb      	adds	r3, r7, r3
   2b708:	781b      	ldrb	r3, [r3, #0]
   2b70a:	2b00      	cmp	r3, #0
   2b70c:	d003      	beq.n	2b716 <tcc_init+0x17a>
		return status;
   2b70e:	2333      	movs	r3, #51	; 0x33
   2b710:	18fb      	adds	r3, r7, r3
   2b712:	781b      	ldrb	r3, [r3, #0]
   2b714:	e120      	b.n	2b958 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
   2b716:	2333      	movs	r3, #51	; 0x33
   2b718:	18fc      	adds	r4, r7, r3
   2b71a:	2318      	movs	r3, #24
   2b71c:	18fa      	adds	r2, r7, r3
   2b71e:	6879      	ldr	r1, [r7, #4]
   2b720:	233b      	movs	r3, #59	; 0x3b
   2b722:	18fb      	adds	r3, r7, r3
   2b724:	781b      	ldrb	r3, [r3, #0]
   2b726:	0018      	movs	r0, r3
   2b728:	4b6f      	ldr	r3, [pc, #444]	; (2b8e8 <tcc_init+0x34c>)
   2b72a:	4798      	blx	r3
   2b72c:	0003      	movs	r3, r0
   2b72e:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2b730:	2333      	movs	r3, #51	; 0x33
   2b732:	18fb      	adds	r3, r7, r3
   2b734:	781b      	ldrb	r3, [r3, #0]
   2b736:	2b00      	cmp	r3, #0
   2b738:	d003      	beq.n	2b742 <tcc_init+0x1a6>
		return status;
   2b73a:	2333      	movs	r3, #51	; 0x33
   2b73c:	18fb      	adds	r3, r7, r3
   2b73e:	781b      	ldrb	r3, [r3, #0]
   2b740:	e10a      	b.n	2b958 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2b742:	2300      	movs	r3, #0
   2b744:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b746:	e009      	b.n	2b75c <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
   2b748:	68fa      	ldr	r2, [r7, #12]
   2b74a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b74c:	009b      	lsls	r3, r3, #2
   2b74e:	18d3      	adds	r3, r2, r3
   2b750:	3304      	adds	r3, #4
   2b752:	2200      	movs	r2, #0
   2b754:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2b756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b758:	3301      	adds	r3, #1
   2b75a:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b75c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b75e:	2b0b      	cmp	r3, #11
   2b760:	ddf2      	ble.n	2b748 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
   2b762:	68fb      	ldr	r3, [r7, #12]
   2b764:	2200      	movs	r2, #0
   2b766:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   2b768:	68fb      	ldr	r3, [r7, #12]
   2b76a:	2200      	movs	r2, #0
   2b76c:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   2b76e:	233b      	movs	r3, #59	; 0x3b
   2b770:	18fb      	adds	r3, r7, r3
   2b772:	781a      	ldrb	r2, [r3, #0]
   2b774:	4b5d      	ldr	r3, [pc, #372]	; (2b8ec <tcc_init+0x350>)
   2b776:	0092      	lsls	r2, r2, #2
   2b778:	68f9      	ldr	r1, [r7, #12]
   2b77a:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
   2b77c:	68fb      	ldr	r3, [r7, #12]
   2b77e:	68ba      	ldr	r2, [r7, #8]
   2b780:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   2b782:	687b      	ldr	r3, [r7, #4]
   2b784:	22a0      	movs	r2, #160	; 0xa0
   2b786:	5c99      	ldrb	r1, [r3, r2]
   2b788:	68fb      	ldr	r3, [r7, #12]
   2b78a:	223c      	movs	r2, #60	; 0x3c
   2b78c:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
   2b78e:	2314      	movs	r3, #20
   2b790:	18fb      	adds	r3, r7, r3
   2b792:	0018      	movs	r0, r3
   2b794:	4b56      	ldr	r3, [pc, #344]	; (2b8f0 <tcc_init+0x354>)
   2b796:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
   2b798:	687b      	ldr	r3, [r7, #4]
   2b79a:	7a9a      	ldrb	r2, [r3, #10]
   2b79c:	2314      	movs	r3, #20
   2b79e:	18fb      	adds	r3, r7, r3
   2b7a0:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   2b7a2:	233b      	movs	r3, #59	; 0x3b
   2b7a4:	18fb      	adds	r3, r7, r3
   2b7a6:	781b      	ldrb	r3, [r3, #0]
   2b7a8:	4a52      	ldr	r2, [pc, #328]	; (2b8f4 <tcc_init+0x358>)
   2b7aa:	5cd3      	ldrb	r3, [r2, r3]
   2b7ac:	2214      	movs	r2, #20
   2b7ae:	18ba      	adds	r2, r7, r2
   2b7b0:	0011      	movs	r1, r2
   2b7b2:	0018      	movs	r0, r3
   2b7b4:	4b50      	ldr	r3, [pc, #320]	; (2b8f8 <tcc_init+0x35c>)
   2b7b6:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   2b7b8:	233b      	movs	r3, #59	; 0x3b
   2b7ba:	18fb      	adds	r3, r7, r3
   2b7bc:	781b      	ldrb	r3, [r3, #0]
   2b7be:	4a4d      	ldr	r2, [pc, #308]	; (2b8f4 <tcc_init+0x358>)
   2b7c0:	5cd3      	ldrb	r3, [r2, r3]
   2b7c2:	0018      	movs	r0, r3
   2b7c4:	4b4d      	ldr	r3, [pc, #308]	; (2b8fc <tcc_init+0x360>)
   2b7c6:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2b7c8:	2300      	movs	r3, #0
   2b7ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b7cc:	e02d      	b.n	2b82a <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
   2b7ce:	687a      	ldr	r2, [r7, #4]
   2b7d0:	2198      	movs	r1, #152	; 0x98
   2b7d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b7d4:	18d3      	adds	r3, r2, r3
   2b7d6:	185b      	adds	r3, r3, r1
   2b7d8:	781b      	ldrb	r3, [r3, #0]
   2b7da:	2201      	movs	r2, #1
   2b7dc:	4053      	eors	r3, r2
   2b7de:	b2db      	uxtb	r3, r3
   2b7e0:	2b00      	cmp	r3, #0
   2b7e2:	d11e      	bne.n	2b822 <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
   2b7e4:	2310      	movs	r3, #16
   2b7e6:	18fb      	adds	r3, r7, r3
   2b7e8:	0018      	movs	r0, r3
   2b7ea:	4b45      	ldr	r3, [pc, #276]	; (2b900 <tcc_init+0x364>)
   2b7ec:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   2b7ee:	687b      	ldr	r3, [r7, #4]
   2b7f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2b7f2:	321e      	adds	r2, #30
   2b7f4:	0092      	lsls	r2, r2, #2
   2b7f6:	58d3      	ldr	r3, [r2, r3]
   2b7f8:	b2da      	uxtb	r2, r3
   2b7fa:	2310      	movs	r3, #16
   2b7fc:	18fb      	adds	r3, r7, r3
   2b7fe:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   2b800:	2310      	movs	r3, #16
   2b802:	18fb      	adds	r3, r7, r3
   2b804:	2201      	movs	r2, #1
   2b806:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
   2b808:	687b      	ldr	r3, [r7, #4]
   2b80a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2b80c:	3216      	adds	r2, #22
   2b80e:	0092      	lsls	r2, r2, #2
   2b810:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
   2b812:	b2db      	uxtb	r3, r3
   2b814:	2210      	movs	r2, #16
   2b816:	18ba      	adds	r2, r7, r2
   2b818:	0011      	movs	r1, r2
   2b81a:	0018      	movs	r0, r3
   2b81c:	4b39      	ldr	r3, [pc, #228]	; (2b904 <tcc_init+0x368>)
   2b81e:	4798      	blx	r3
   2b820:	e000      	b.n	2b824 <tcc_init+0x288>
			continue;
   2b822:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2b824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b826:	3301      	adds	r3, #1
   2b828:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b82a:	233b      	movs	r3, #59	; 0x3b
   2b82c:	18fb      	adds	r3, r7, r3
   2b82e:	781b      	ldrb	r3, [r3, #0]
   2b830:	4a28      	ldr	r2, [pc, #160]	; (2b8d4 <tcc_init+0x338>)
   2b832:	5cd3      	ldrb	r3, [r2, r3]
   2b834:	001a      	movs	r2, r3
   2b836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b838:	429a      	cmp	r2, r3
   2b83a:	dcc8      	bgt.n	2b7ce <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
   2b83c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2b83e:	68bb      	ldr	r3, [r7, #8]
   2b840:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2b842:	46c0      	nop			; (mov r8, r8)
   2b844:	68bb      	ldr	r3, [r7, #8]
   2b846:	689b      	ldr	r3, [r3, #8]
   2b848:	2204      	movs	r2, #4
   2b84a:	4013      	ands	r3, r2
   2b84c:	d1fa      	bne.n	2b844 <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
   2b84e:	68bb      	ldr	r3, [r7, #8]
   2b850:	22ff      	movs	r2, #255	; 0xff
   2b852:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2b854:	46c0      	nop			; (mov r8, r8)
   2b856:	68bb      	ldr	r3, [r7, #8]
   2b858:	689b      	ldr	r3, [r3, #8]
   2b85a:	2204      	movs	r2, #4
   2b85c:	4013      	ands	r3, r2
   2b85e:	d1fa      	bne.n	2b856 <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
   2b860:	232b      	movs	r3, #43	; 0x2b
   2b862:	18fb      	adds	r3, r7, r3
   2b864:	781a      	ldrb	r2, [r3, #0]
   2b866:	68bb      	ldr	r3, [r7, #8]
   2b868:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
   2b86a:	2320      	movs	r3, #32
   2b86c:	18fb      	adds	r3, r7, r3
   2b86e:	681a      	ldr	r2, [r3, #0]
   2b870:	68bb      	ldr	r3, [r7, #8]
   2b872:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
   2b874:	2320      	movs	r3, #32
   2b876:	18fb      	adds	r3, r7, r3
   2b878:	685a      	ldr	r2, [r3, #4]
   2b87a:	68bb      	ldr	r3, [r7, #8]
   2b87c:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
   2b87e:	69fa      	ldr	r2, [r7, #28]
   2b880:	68bb      	ldr	r3, [r7, #8]
   2b882:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   2b884:	46c0      	nop			; (mov r8, r8)
   2b886:	68bb      	ldr	r3, [r7, #8]
   2b888:	689b      	ldr	r3, [r3, #8]
   2b88a:	4a1f      	ldr	r2, [pc, #124]	; (2b908 <tcc_init+0x36c>)
   2b88c:	4013      	ands	r3, r2
   2b88e:	d1fa      	bne.n	2b886 <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
   2b890:	69ba      	ldr	r2, [r7, #24]
   2b892:	68bb      	ldr	r3, [r7, #8]
   2b894:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   2b896:	46c0      	nop			; (mov r8, r8)
   2b898:	68bb      	ldr	r3, [r7, #8]
   2b89a:	689b      	ldr	r3, [r3, #8]
   2b89c:	2210      	movs	r2, #16
   2b89e:	4013      	ands	r3, r2
   2b8a0:	d1fa      	bne.n	2b898 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
   2b8a2:	687b      	ldr	r3, [r7, #4]
   2b8a4:	681a      	ldr	r2, [r3, #0]
   2b8a6:	68bb      	ldr	r3, [r7, #8]
   2b8a8:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   2b8aa:	46c0      	nop			; (mov r8, r8)
   2b8ac:	68bb      	ldr	r3, [r7, #8]
   2b8ae:	689b      	ldr	r3, [r3, #8]
   2b8b0:	4a16      	ldr	r2, [pc, #88]	; (2b90c <tcc_init+0x370>)
   2b8b2:	4013      	ands	r3, r2
   2b8b4:	d1fa      	bne.n	2b8ac <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
   2b8b6:	687b      	ldr	r3, [r7, #4]
   2b8b8:	685a      	ldr	r2, [r3, #4]
   2b8ba:	68bb      	ldr	r3, [r7, #8]
   2b8bc:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2b8be:	2300      	movs	r3, #0
   2b8c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b8c2:	e03f      	b.n	2b944 <tcc_init+0x3a8>
   2b8c4:	0002af05 	.word	0x0002af05
   2b8c8:	0003a320 	.word	0x0003a320
   2b8cc:	0002ae81 	.word	0x0002ae81
   2b8d0:	0003a32c 	.word	0x0003a32c
   2b8d4:	0003a33c 	.word	0x0003a33c
   2b8d8:	0002b211 	.word	0x0002b211
   2b8dc:	0002b2b5 	.word	0x0002b2b5
   2b8e0:	0002b311 	.word	0x0002b311
   2b8e4:	0002b42d 	.word	0x0002b42d
   2b8e8:	0002b505 	.word	0x0002b505
   2b8ec:	20005c74 	.word	0x20005c74
   2b8f0:	0002ae69 	.word	0x0002ae69
   2b8f4:	0003a31c 	.word	0x0003a31c
   2b8f8:	0002aa81 	.word	0x0002aa81
   2b8fc:	0002aac5 	.word	0x0002aac5
   2b900:	0002aedd 	.word	0x0002aedd
   2b904:	0002ade1 	.word	0x0002ade1
   2b908:	00020040 	.word	0x00020040
   2b90c:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
   2b910:	46c0      	nop			; (mov r8, r8)
   2b912:	68bb      	ldr	r3, [r7, #8]
   2b914:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   2b916:	4912      	ldr	r1, [pc, #72]	; (2b960 <tcc_init+0x3c4>)
   2b918:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2b91a:	4091      	lsls	r1, r2
   2b91c:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
   2b91e:	4013      	ands	r3, r2
   2b920:	d1f7      	bne.n	2b912 <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
   2b922:	687a      	ldr	r2, [r7, #4]
   2b924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b926:	3306      	adds	r3, #6
   2b928:	009b      	lsls	r3, r3, #2
   2b92a:	18d3      	adds	r3, r2, r3
   2b92c:	3304      	adds	r3, #4
   2b92e:	681a      	ldr	r2, [r3, #0]
   2b930:	68b9      	ldr	r1, [r7, #8]
   2b932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b934:	3310      	adds	r3, #16
   2b936:	009b      	lsls	r3, r3, #2
   2b938:	18cb      	adds	r3, r1, r3
   2b93a:	3304      	adds	r3, #4
   2b93c:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2b93e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b940:	3301      	adds	r3, #1
   2b942:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b944:	233b      	movs	r3, #59	; 0x3b
   2b946:	18fb      	adds	r3, r7, r3
   2b948:	781b      	ldrb	r3, [r3, #0]
   2b94a:	4a06      	ldr	r2, [pc, #24]	; (2b964 <tcc_init+0x3c8>)
   2b94c:	5cd3      	ldrb	r3, [r2, r3]
   2b94e:	001a      	movs	r2, r3
   2b950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b952:	429a      	cmp	r2, r3
   2b954:	dcdc      	bgt.n	2b910 <tcc_init+0x374>
	}

	return STATUS_OK;
   2b956:	2300      	movs	r3, #0
}
   2b958:	0018      	movs	r0, r3
   2b95a:	46bd      	mov	sp, r7
   2b95c:	b011      	add	sp, #68	; 0x44
   2b95e:	bd90      	pop	{r4, r7, pc}
   2b960:	00080100 	.word	0x00080100
   2b964:	0003a338 	.word	0x0003a338

0002b968 <system_interrupt_enable>:
{
   2b968:	b580      	push	{r7, lr}
   2b96a:	b082      	sub	sp, #8
   2b96c:	af00      	add	r7, sp, #0
   2b96e:	0002      	movs	r2, r0
   2b970:	1dfb      	adds	r3, r7, #7
   2b972:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2b974:	4b06      	ldr	r3, [pc, #24]	; (2b990 <system_interrupt_enable+0x28>)
   2b976:	1dfa      	adds	r2, r7, #7
   2b978:	7812      	ldrb	r2, [r2, #0]
   2b97a:	0011      	movs	r1, r2
   2b97c:	221f      	movs	r2, #31
   2b97e:	400a      	ands	r2, r1
   2b980:	2101      	movs	r1, #1
   2b982:	4091      	lsls	r1, r2
   2b984:	000a      	movs	r2, r1
   2b986:	601a      	str	r2, [r3, #0]
}
   2b988:	46c0      	nop			; (mov r8, r8)
   2b98a:	46bd      	mov	sp, r7
   2b98c:	b002      	add	sp, #8
   2b98e:	bd80      	pop	{r7, pc}
   2b990:	e000e100 	.word	0xe000e100

0002b994 <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
   2b994:	b580      	push	{r7, lr}
   2b996:	b082      	sub	sp, #8
   2b998:	af00      	add	r7, sp, #0
   2b99a:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   2b99c:	4a04      	ldr	r2, [pc, #16]	; (2b9b0 <_tcc_interrupt_get_interrupt_vector+0x1c>)
   2b99e:	687b      	ldr	r3, [r7, #4]
   2b9a0:	18d3      	adds	r3, r2, r3
   2b9a2:	781b      	ldrb	r3, [r3, #0]
   2b9a4:	b25b      	sxtb	r3, r3
}
   2b9a6:	0018      	movs	r0, r3
   2b9a8:	46bd      	mov	sp, r7
   2b9aa:	b002      	add	sp, #8
   2b9ac:	bd80      	pop	{r7, pc}
   2b9ae:	46c0      	nop			; (mov r8, r8)
   2b9b0:	20000128 	.word	0x20000128

0002b9b4 <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
   2b9b4:	b580      	push	{r7, lr}
   2b9b6:	b084      	sub	sp, #16
   2b9b8:	af00      	add	r7, sp, #0
   2b9ba:	60f8      	str	r0, [r7, #12]
   2b9bc:	60b9      	str	r1, [r7, #8]
   2b9be:	1dfb      	adds	r3, r7, #7
   2b9c0:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   2b9c2:	1dfb      	adds	r3, r7, #7
   2b9c4:	781b      	ldrb	r3, [r3, #0]
   2b9c6:	68fa      	ldr	r2, [r7, #12]
   2b9c8:	009b      	lsls	r3, r3, #2
   2b9ca:	18d3      	adds	r3, r2, r3
   2b9cc:	3304      	adds	r3, #4
   2b9ce:	68ba      	ldr	r2, [r7, #8]
   2b9d0:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   2b9d2:	68fb      	ldr	r3, [r7, #12]
   2b9d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2b9d6:	1dfb      	adds	r3, r7, #7
   2b9d8:	7819      	ldrb	r1, [r3, #0]
   2b9da:	4b05      	ldr	r3, [pc, #20]	; (2b9f0 <tcc_register_callback+0x3c>)
   2b9dc:	0089      	lsls	r1, r1, #2
   2b9de:	58cb      	ldr	r3, [r1, r3]
   2b9e0:	431a      	orrs	r2, r3
   2b9e2:	68fb      	ldr	r3, [r7, #12]
   2b9e4:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
   2b9e6:	2300      	movs	r3, #0
}
   2b9e8:	0018      	movs	r0, r3
   2b9ea:	46bd      	mov	sp, r7
   2b9ec:	b004      	add	sp, #16
   2b9ee:	bd80      	pop	{r7, pc}
   2b9f0:	0003a340 	.word	0x0003a340

0002b9f4 <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   2b9f4:	b580      	push	{r7, lr}
   2b9f6:	b082      	sub	sp, #8
   2b9f8:	af00      	add	r7, sp, #0
   2b9fa:	6078      	str	r0, [r7, #4]
   2b9fc:	000a      	movs	r2, r1
   2b9fe:	1cfb      	adds	r3, r7, #3
   2ba00:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   2ba02:	687b      	ldr	r3, [r7, #4]
   2ba04:	681b      	ldr	r3, [r3, #0]
   2ba06:	0018      	movs	r0, r3
   2ba08:	4b0f      	ldr	r3, [pc, #60]	; (2ba48 <tcc_enable_callback+0x54>)
   2ba0a:	4798      	blx	r3
   2ba0c:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
   2ba0e:	0018      	movs	r0, r3
   2ba10:	4b0e      	ldr	r3, [pc, #56]	; (2ba4c <tcc_enable_callback+0x58>)
   2ba12:	4798      	blx	r3
   2ba14:	0003      	movs	r3, r0
   2ba16:	0018      	movs	r0, r3
   2ba18:	4b0d      	ldr	r3, [pc, #52]	; (2ba50 <tcc_enable_callback+0x5c>)
   2ba1a:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   2ba1c:	687b      	ldr	r3, [r7, #4]
   2ba1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2ba20:	1cfb      	adds	r3, r7, #3
   2ba22:	7819      	ldrb	r1, [r3, #0]
   2ba24:	4b0b      	ldr	r3, [pc, #44]	; (2ba54 <tcc_enable_callback+0x60>)
   2ba26:	0089      	lsls	r1, r1, #2
   2ba28:	58cb      	ldr	r3, [r1, r3]
   2ba2a:	431a      	orrs	r2, r3
   2ba2c:	687b      	ldr	r3, [r7, #4]
   2ba2e:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   2ba30:	687b      	ldr	r3, [r7, #4]
   2ba32:	681b      	ldr	r3, [r3, #0]
   2ba34:	1cfa      	adds	r2, r7, #3
   2ba36:	7811      	ldrb	r1, [r2, #0]
   2ba38:	4a06      	ldr	r2, [pc, #24]	; (2ba54 <tcc_enable_callback+0x60>)
   2ba3a:	0089      	lsls	r1, r1, #2
   2ba3c:	588a      	ldr	r2, [r1, r2]
   2ba3e:	629a      	str	r2, [r3, #40]	; 0x28
}
   2ba40:	46c0      	nop			; (mov r8, r8)
   2ba42:	46bd      	mov	sp, r7
   2ba44:	b002      	add	sp, #8
   2ba46:	bd80      	pop	{r7, pc}
   2ba48:	0002af05 	.word	0x0002af05
   2ba4c:	0002b995 	.word	0x0002b995
   2ba50:	0002b969 	.word	0x0002b969
   2ba54:	0003a340 	.word	0x0003a340

0002ba58 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   2ba58:	b580      	push	{r7, lr}
   2ba5a:	af00      	add	r7, sp, #0
   2ba5c:	2000      	movs	r0, #0
   2ba5e:	4b02      	ldr	r3, [pc, #8]	; (2ba68 <TCC0_Handler+0x10>)
   2ba60:	4798      	blx	r3
   2ba62:	46c0      	nop			; (mov r8, r8)
   2ba64:	46bd      	mov	sp, r7
   2ba66:	bd80      	pop	{r7, pc}
   2ba68:	0002ba95 	.word	0x0002ba95

0002ba6c <TCC1_Handler>:
   2ba6c:	b580      	push	{r7, lr}
   2ba6e:	af00      	add	r7, sp, #0
   2ba70:	2001      	movs	r0, #1
   2ba72:	4b02      	ldr	r3, [pc, #8]	; (2ba7c <TCC1_Handler+0x10>)
   2ba74:	4798      	blx	r3
   2ba76:	46c0      	nop			; (mov r8, r8)
   2ba78:	46bd      	mov	sp, r7
   2ba7a:	bd80      	pop	{r7, pc}
   2ba7c:	0002ba95 	.word	0x0002ba95

0002ba80 <TCC2_Handler>:
   2ba80:	b580      	push	{r7, lr}
   2ba82:	af00      	add	r7, sp, #0
   2ba84:	2002      	movs	r0, #2
   2ba86:	4b02      	ldr	r3, [pc, #8]	; (2ba90 <TCC2_Handler+0x10>)
   2ba88:	4798      	blx	r3
   2ba8a:	46c0      	nop			; (mov r8, r8)
   2ba8c:	46bd      	mov	sp, r7
   2ba8e:	bd80      	pop	{r7, pc}
   2ba90:	0002ba95 	.word	0x0002ba95

0002ba94 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   2ba94:	b580      	push	{r7, lr}
   2ba96:	b086      	sub	sp, #24
   2ba98:	af00      	add	r7, sp, #0
   2ba9a:	0002      	movs	r2, r0
   2ba9c:	1dfb      	adds	r3, r7, #7
   2ba9e:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   2baa0:	1dfb      	adds	r3, r7, #7
   2baa2:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   2baa4:	4b18      	ldr	r3, [pc, #96]	; (2bb08 <_tcc_interrupt_handler+0x74>)
   2baa6:	0092      	lsls	r2, r2, #2
   2baa8:	58d3      	ldr	r3, [r2, r3]
   2baaa:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2baac:	693b      	ldr	r3, [r7, #16]
   2baae:	681b      	ldr	r3, [r3, #0]
   2bab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   2bab2:	693b      	ldr	r3, [r7, #16]
   2bab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2bab6:	401a      	ands	r2, r3
			module->enable_callback_mask);
   2bab8:	693b      	ldr	r3, [r7, #16]
   2baba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2babc:	4013      	ands	r3, r2
   2babe:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2bac0:	2300      	movs	r3, #0
   2bac2:	617b      	str	r3, [r7, #20]
   2bac4:	e019      	b.n	2bafa <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   2bac6:	4b11      	ldr	r3, [pc, #68]	; (2bb0c <_tcc_interrupt_handler+0x78>)
   2bac8:	697a      	ldr	r2, [r7, #20]
   2baca:	0092      	lsls	r2, r2, #2
   2bacc:	58d3      	ldr	r3, [r2, r3]
   2bace:	68fa      	ldr	r2, [r7, #12]
   2bad0:	4013      	ands	r3, r2
   2bad2:	d00f      	beq.n	2baf4 <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   2bad4:	693a      	ldr	r2, [r7, #16]
   2bad6:	697b      	ldr	r3, [r7, #20]
   2bad8:	009b      	lsls	r3, r3, #2
   2bada:	18d3      	adds	r3, r2, r3
   2badc:	3304      	adds	r3, #4
   2bade:	681b      	ldr	r3, [r3, #0]
   2bae0:	693a      	ldr	r2, [r7, #16]
   2bae2:	0010      	movs	r0, r2
   2bae4:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   2bae6:	693b      	ldr	r3, [r7, #16]
   2bae8:	681b      	ldr	r3, [r3, #0]
   2baea:	4a08      	ldr	r2, [pc, #32]	; (2bb0c <_tcc_interrupt_handler+0x78>)
   2baec:	6979      	ldr	r1, [r7, #20]
   2baee:	0089      	lsls	r1, r1, #2
   2baf0:	588a      	ldr	r2, [r1, r2]
   2baf2:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2baf4:	697b      	ldr	r3, [r7, #20]
   2baf6:	3301      	adds	r3, #1
   2baf8:	617b      	str	r3, [r7, #20]
   2bafa:	697b      	ldr	r3, [r7, #20]
   2bafc:	2b0b      	cmp	r3, #11
   2bafe:	dde2      	ble.n	2bac6 <_tcc_interrupt_handler+0x32>
		}
	}
}
   2bb00:	46c0      	nop			; (mov r8, r8)
   2bb02:	46bd      	mov	sp, r7
   2bb04:	b006      	add	sp, #24
   2bb06:	bd80      	pop	{r7, pc}
   2bb08:	20005c74 	.word	0x20005c74
   2bb0c:	0003a340 	.word	0x0003a340

0002bb10 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   2bb10:	b580      	push	{r7, lr}
   2bb12:	b082      	sub	sp, #8
   2bb14:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   2bb16:	4b2f      	ldr	r3, [pc, #188]	; (2bbd4 <Reset_Handler+0xc4>)
   2bb18:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   2bb1a:	4b2f      	ldr	r3, [pc, #188]	; (2bbd8 <Reset_Handler+0xc8>)
   2bb1c:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   2bb1e:	687a      	ldr	r2, [r7, #4]
   2bb20:	683b      	ldr	r3, [r7, #0]
   2bb22:	429a      	cmp	r2, r3
   2bb24:	d00c      	beq.n	2bb40 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   2bb26:	e007      	b.n	2bb38 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   2bb28:	683b      	ldr	r3, [r7, #0]
   2bb2a:	1d1a      	adds	r2, r3, #4
   2bb2c:	603a      	str	r2, [r7, #0]
   2bb2e:	687a      	ldr	r2, [r7, #4]
   2bb30:	1d11      	adds	r1, r2, #4
   2bb32:	6079      	str	r1, [r7, #4]
   2bb34:	6812      	ldr	r2, [r2, #0]
   2bb36:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   2bb38:	683a      	ldr	r2, [r7, #0]
   2bb3a:	4b28      	ldr	r3, [pc, #160]	; (2bbdc <Reset_Handler+0xcc>)
   2bb3c:	429a      	cmp	r2, r3
   2bb3e:	d3f3      	bcc.n	2bb28 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   2bb40:	4b27      	ldr	r3, [pc, #156]	; (2bbe0 <Reset_Handler+0xd0>)
   2bb42:	603b      	str	r3, [r7, #0]
   2bb44:	e004      	b.n	2bb50 <Reset_Handler+0x40>
                *pDest++ = 0;
   2bb46:	683b      	ldr	r3, [r7, #0]
   2bb48:	1d1a      	adds	r2, r3, #4
   2bb4a:	603a      	str	r2, [r7, #0]
   2bb4c:	2200      	movs	r2, #0
   2bb4e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   2bb50:	683a      	ldr	r2, [r7, #0]
   2bb52:	4b24      	ldr	r3, [pc, #144]	; (2bbe4 <Reset_Handler+0xd4>)
   2bb54:	429a      	cmp	r2, r3
   2bb56:	d3f6      	bcc.n	2bb46 <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   2bb58:	4b23      	ldr	r3, [pc, #140]	; (2bbe8 <Reset_Handler+0xd8>)
   2bb5a:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   2bb5c:	4b23      	ldr	r3, [pc, #140]	; (2bbec <Reset_Handler+0xdc>)
   2bb5e:	687a      	ldr	r2, [r7, #4]
   2bb60:	21ff      	movs	r1, #255	; 0xff
   2bb62:	438a      	bics	r2, r1
   2bb64:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   2bb66:	4a22      	ldr	r2, [pc, #136]	; (2bbf0 <Reset_Handler+0xe0>)
   2bb68:	2390      	movs	r3, #144	; 0x90
   2bb6a:	005b      	lsls	r3, r3, #1
   2bb6c:	2102      	movs	r1, #2
   2bb6e:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   2bb70:	4a20      	ldr	r2, [pc, #128]	; (2bbf4 <Reset_Handler+0xe4>)
   2bb72:	78d3      	ldrb	r3, [r2, #3]
   2bb74:	2103      	movs	r1, #3
   2bb76:	438b      	bics	r3, r1
   2bb78:	1c19      	adds	r1, r3, #0
   2bb7a:	2302      	movs	r3, #2
   2bb7c:	430b      	orrs	r3, r1
   2bb7e:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   2bb80:	4a1c      	ldr	r2, [pc, #112]	; (2bbf4 <Reset_Handler+0xe4>)
   2bb82:	78d3      	ldrb	r3, [r2, #3]
   2bb84:	210c      	movs	r1, #12
   2bb86:	438b      	bics	r3, r1
   2bb88:	1c19      	adds	r1, r3, #0
   2bb8a:	2308      	movs	r3, #8
   2bb8c:	430b      	orrs	r3, r1
   2bb8e:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   2bb90:	4a19      	ldr	r2, [pc, #100]	; (2bbf8 <Reset_Handler+0xe8>)
   2bb92:	7b93      	ldrb	r3, [r2, #14]
   2bb94:	2130      	movs	r1, #48	; 0x30
   2bb96:	438b      	bics	r3, r1
   2bb98:	1c19      	adds	r1, r3, #0
   2bb9a:	2320      	movs	r3, #32
   2bb9c:	430b      	orrs	r3, r1
   2bb9e:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   2bba0:	4a15      	ldr	r2, [pc, #84]	; (2bbf8 <Reset_Handler+0xe8>)
   2bba2:	7b93      	ldrb	r3, [r2, #14]
   2bba4:	210c      	movs	r1, #12
   2bba6:	438b      	bics	r3, r1
   2bba8:	1c19      	adds	r1, r3, #0
   2bbaa:	2308      	movs	r3, #8
   2bbac:	430b      	orrs	r3, r1
   2bbae:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   2bbb0:	4a11      	ldr	r2, [pc, #68]	; (2bbf8 <Reset_Handler+0xe8>)
   2bbb2:	7b93      	ldrb	r3, [r2, #14]
   2bbb4:	2103      	movs	r1, #3
   2bbb6:	438b      	bics	r3, r1
   2bbb8:	1c19      	adds	r1, r3, #0
   2bbba:	2302      	movs	r3, #2
   2bbbc:	430b      	orrs	r3, r1
   2bbbe:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   2bbc0:	4a0e      	ldr	r2, [pc, #56]	; (2bbfc <Reset_Handler+0xec>)
   2bbc2:	6853      	ldr	r3, [r2, #4]
   2bbc4:	2180      	movs	r1, #128	; 0x80
   2bbc6:	430b      	orrs	r3, r1
   2bbc8:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   2bbca:	4b0d      	ldr	r3, [pc, #52]	; (2bc00 <Reset_Handler+0xf0>)
   2bbcc:	4798      	blx	r3

        /* Branch to main function */
        main();
   2bbce:	4b0d      	ldr	r3, [pc, #52]	; (2bc04 <Reset_Handler+0xf4>)
   2bbd0:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   2bbd2:	e7fe      	b.n	2bbd2 <Reset_Handler+0xc2>
   2bbd4:	0003b100 	.word	0x0003b100
   2bbd8:	20000000 	.word	0x20000000
   2bbdc:	20000300 	.word	0x20000300
   2bbe0:	20000300 	.word	0x20000300
   2bbe4:	20005ce4 	.word	0x20005ce4
   2bbe8:	00012000 	.word	0x00012000
   2bbec:	e000ed00 	.word	0xe000ed00
   2bbf0:	41007000 	.word	0x41007000
   2bbf4:	41005000 	.word	0x41005000
   2bbf8:	41004800 	.word	0x41004800
   2bbfc:	41004000 	.word	0x41004000
   2bc00:	00035549 	.word	0x00035549
   2bc04:	00033345 	.word	0x00033345

0002bc08 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
   2bc08:	b580      	push	{r7, lr}
   2bc0a:	af00      	add	r7, sp, #0
  __asm volatile (
   2bc0c:	2004      	movs	r0, #4
   2bc0e:	4671      	mov	r1, lr
   2bc10:	4208      	tst	r0, r1
   2bc12:	d002      	beq.n	2bc1a <_MSP>
   2bc14:	f3ef 8009 	mrs	r0, PSP
   2bc18:	e001      	b.n	2bc1e <_HALT>

0002bc1a <_MSP>:
   2bc1a:	f3ef 8008 	mrs	r0, MSP

0002bc1e <_HALT>:
   2bc1e:	6941      	ldr	r1, [r0, #20]
   2bc20:	e004      	b.n	2bc2c <HardFault_HandlerC>
   2bc22:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   2bc24:	46c0      	nop			; (mov r8, r8)
   2bc26:	46bd      	mov	sp, r7
   2bc28:	bd80      	pop	{r7, pc}
	...

0002bc2c <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   2bc2c:	b580      	push	{r7, lr}
   2bc2e:	b090      	sub	sp, #64	; 0x40
   2bc30:	af00      	add	r7, sp, #0
   2bc32:	6078      	str	r0, [r7, #4]
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   2bc34:	687b      	ldr	r3, [r7, #4]
   2bc36:	681b      	ldr	r3, [r3, #0]
   2bc38:	63fb      	str	r3, [r7, #60]	; 0x3c
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   2bc3a:	687b      	ldr	r3, [r7, #4]
   2bc3c:	685b      	ldr	r3, [r3, #4]
   2bc3e:	63bb      	str	r3, [r7, #56]	; 0x38
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   2bc40:	687b      	ldr	r3, [r7, #4]
   2bc42:	689b      	ldr	r3, [r3, #8]
   2bc44:	637b      	str	r3, [r7, #52]	; 0x34
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   2bc46:	687b      	ldr	r3, [r7, #4]
   2bc48:	68db      	ldr	r3, [r3, #12]
   2bc4a:	633b      	str	r3, [r7, #48]	; 0x30
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   2bc4c:	687b      	ldr	r3, [r7, #4]
   2bc4e:	691b      	ldr	r3, [r3, #16]
   2bc50:	62fb      	str	r3, [r7, #44]	; 0x2c
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   2bc52:	687b      	ldr	r3, [r7, #4]
   2bc54:	695b      	ldr	r3, [r3, #20]
   2bc56:	62bb      	str	r3, [r7, #40]	; 0x28
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   2bc58:	687b      	ldr	r3, [r7, #4]
   2bc5a:	699b      	ldr	r3, [r3, #24]
   2bc5c:	627b      	str	r3, [r7, #36]	; 0x24
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   2bc5e:	687b      	ldr	r3, [r7, #4]
   2bc60:	69db      	ldr	r3, [r3, #28]
   2bc62:	623b      	str	r3, [r7, #32]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   2bc64:	4b0b      	ldr	r3, [pc, #44]	; (2bc94 <HardFault_HandlerC+0x68>)
   2bc66:	681b      	ldr	r3, [r3, #0]
   2bc68:	61fb      	str	r3, [r7, #28]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   2bc6a:	4b0b      	ldr	r3, [pc, #44]	; (2bc98 <HardFault_HandlerC+0x6c>)
   2bc6c:	681b      	ldr	r3, [r3, #0]
   2bc6e:	61bb      	str	r3, [r7, #24]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   2bc70:	4b0a      	ldr	r3, [pc, #40]	; (2bc9c <HardFault_HandlerC+0x70>)
   2bc72:	681b      	ldr	r3, [r3, #0]
   2bc74:	617b      	str	r3, [r7, #20]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   2bc76:	4b0a      	ldr	r3, [pc, #40]	; (2bca0 <HardFault_HandlerC+0x74>)
   2bc78:	681b      	ldr	r3, [r3, #0]
   2bc7a:	613b      	str	r3, [r7, #16]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   2bc7c:	4b09      	ldr	r3, [pc, #36]	; (2bca4 <HardFault_HandlerC+0x78>)
   2bc7e:	681b      	ldr	r3, [r3, #0]
   2bc80:	60bb      	str	r3, [r7, #8]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   2bc82:	4b09      	ldr	r3, [pc, #36]	; (2bca8 <HardFault_HandlerC+0x7c>)
   2bc84:	681b      	ldr	r3, [r3, #0]
   2bc86:	60fb      	str	r3, [r7, #12]
	
	__asm("BKPT #0\n") ; // Break into the debugger
   2bc88:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   2bc8a:	46c0      	nop			; (mov r8, r8)
   2bc8c:	46bd      	mov	sp, r7
   2bc8e:	b010      	add	sp, #64	; 0x40
   2bc90:	bd80      	pop	{r7, pc}
   2bc92:	46c0      	nop			; (mov r8, r8)
   2bc94:	e000ed28 	.word	0xe000ed28
   2bc98:	e000ed2c 	.word	0xe000ed2c
   2bc9c:	e000ed30 	.word	0xe000ed30
   2bca0:	e000ed3c 	.word	0xe000ed3c
   2bca4:	e000ed34 	.word	0xe000ed34
   2bca8:	e000ed38 	.word	0xe000ed38

0002bcac <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   2bcac:	b580      	push	{r7, lr}
   2bcae:	b086      	sub	sp, #24
   2bcb0:	af00      	add	r7, sp, #0
   2bcb2:	60f8      	str	r0, [r7, #12]
   2bcb4:	60b9      	str	r1, [r7, #8]
   2bcb6:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2bcb8:	2300      	movs	r3, #0
   2bcba:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   2bcbc:	68fb      	ldr	r3, [r7, #12]
   2bcbe:	2b00      	cmp	r3, #0
   2bcc0:	d012      	beq.n	2bce8 <_read+0x3c>
		return -1;
   2bcc2:	2301      	movs	r3, #1
   2bcc4:	425b      	negs	r3, r3
   2bcc6:	e013      	b.n	2bcf0 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   2bcc8:	4b0b      	ldr	r3, [pc, #44]	; (2bcf8 <_read+0x4c>)
   2bcca:	681a      	ldr	r2, [r3, #0]
   2bccc:	4b0b      	ldr	r3, [pc, #44]	; (2bcfc <_read+0x50>)
   2bcce:	681b      	ldr	r3, [r3, #0]
   2bcd0:	68b9      	ldr	r1, [r7, #8]
   2bcd2:	0018      	movs	r0, r3
   2bcd4:	4790      	blx	r2
		ptr++;
   2bcd6:	68bb      	ldr	r3, [r7, #8]
   2bcd8:	3301      	adds	r3, #1
   2bcda:	60bb      	str	r3, [r7, #8]
		nChars++;
   2bcdc:	697b      	ldr	r3, [r7, #20]
   2bcde:	3301      	adds	r3, #1
   2bce0:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   2bce2:	687b      	ldr	r3, [r7, #4]
   2bce4:	3b01      	subs	r3, #1
   2bce6:	607b      	str	r3, [r7, #4]
   2bce8:	687b      	ldr	r3, [r7, #4]
   2bcea:	2b00      	cmp	r3, #0
   2bcec:	dcec      	bgt.n	2bcc8 <_read+0x1c>
	}
	return nChars;
   2bcee:	697b      	ldr	r3, [r7, #20]
}
   2bcf0:	0018      	movs	r0, r3
   2bcf2:	46bd      	mov	sp, r7
   2bcf4:	b006      	add	sp, #24
   2bcf6:	bd80      	pop	{r7, pc}
   2bcf8:	20005c80 	.word	0x20005c80
   2bcfc:	20005c88 	.word	0x20005c88

0002bd00 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   2bd00:	b580      	push	{r7, lr}
   2bd02:	b086      	sub	sp, #24
   2bd04:	af00      	add	r7, sp, #0
   2bd06:	60f8      	str	r0, [r7, #12]
   2bd08:	60b9      	str	r1, [r7, #8]
   2bd0a:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2bd0c:	2300      	movs	r3, #0
   2bd0e:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   2bd10:	68fb      	ldr	r3, [r7, #12]
   2bd12:	2b01      	cmp	r3, #1
   2bd14:	d01d      	beq.n	2bd52 <_write+0x52>
   2bd16:	68fb      	ldr	r3, [r7, #12]
   2bd18:	2b02      	cmp	r3, #2
   2bd1a:	d01a      	beq.n	2bd52 <_write+0x52>
   2bd1c:	68fb      	ldr	r3, [r7, #12]
   2bd1e:	2b03      	cmp	r3, #3
   2bd20:	d017      	beq.n	2bd52 <_write+0x52>
		return -1;
   2bd22:	2301      	movs	r3, #1
   2bd24:	425b      	negs	r3, r3
   2bd26:	e018      	b.n	2bd5a <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   2bd28:	4b0e      	ldr	r3, [pc, #56]	; (2bd64 <_write+0x64>)
   2bd2a:	681a      	ldr	r2, [r3, #0]
   2bd2c:	4b0e      	ldr	r3, [pc, #56]	; (2bd68 <_write+0x68>)
   2bd2e:	6818      	ldr	r0, [r3, #0]
   2bd30:	68bb      	ldr	r3, [r7, #8]
   2bd32:	1c59      	adds	r1, r3, #1
   2bd34:	60b9      	str	r1, [r7, #8]
   2bd36:	781b      	ldrb	r3, [r3, #0]
   2bd38:	0019      	movs	r1, r3
   2bd3a:	4790      	blx	r2
   2bd3c:	1e03      	subs	r3, r0, #0
   2bd3e:	da02      	bge.n	2bd46 <_write+0x46>
			return -1;
   2bd40:	2301      	movs	r3, #1
   2bd42:	425b      	negs	r3, r3
   2bd44:	e009      	b.n	2bd5a <_write+0x5a>
		}
		++nChars;
   2bd46:	697b      	ldr	r3, [r7, #20]
   2bd48:	3301      	adds	r3, #1
   2bd4a:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   2bd4c:	687b      	ldr	r3, [r7, #4]
   2bd4e:	3b01      	subs	r3, #1
   2bd50:	607b      	str	r3, [r7, #4]
   2bd52:	687b      	ldr	r3, [r7, #4]
   2bd54:	2b00      	cmp	r3, #0
   2bd56:	d1e7      	bne.n	2bd28 <_write+0x28>
	}
	return nChars;
   2bd58:	697b      	ldr	r3, [r7, #20]
}
   2bd5a:	0018      	movs	r0, r3
   2bd5c:	46bd      	mov	sp, r7
   2bd5e:	b006      	add	sp, #24
   2bd60:	bd80      	pop	{r7, pc}
   2bd62:	46c0      	nop			; (mov r8, r8)
   2bd64:	20005c84 	.word	0x20005c84
   2bd68:	20005c88 	.word	0x20005c88

0002bd6c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   2bd6c:	b580      	push	{r7, lr}
   2bd6e:	b084      	sub	sp, #16
   2bd70:	af00      	add	r7, sp, #0
   2bd72:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   2bd74:	4b0a      	ldr	r3, [pc, #40]	; (2bda0 <_sbrk+0x34>)
   2bd76:	681b      	ldr	r3, [r3, #0]
   2bd78:	2b00      	cmp	r3, #0
   2bd7a:	d102      	bne.n	2bd82 <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   2bd7c:	4b08      	ldr	r3, [pc, #32]	; (2bda0 <_sbrk+0x34>)
   2bd7e:	4a09      	ldr	r2, [pc, #36]	; (2bda4 <_sbrk+0x38>)
   2bd80:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   2bd82:	4b07      	ldr	r3, [pc, #28]	; (2bda0 <_sbrk+0x34>)
   2bd84:	681b      	ldr	r3, [r3, #0]
   2bd86:	60fb      	str	r3, [r7, #12]

	heap += incr;
   2bd88:	4b05      	ldr	r3, [pc, #20]	; (2bda0 <_sbrk+0x34>)
   2bd8a:	681a      	ldr	r2, [r3, #0]
   2bd8c:	687b      	ldr	r3, [r7, #4]
   2bd8e:	18d2      	adds	r2, r2, r3
   2bd90:	4b03      	ldr	r3, [pc, #12]	; (2bda0 <_sbrk+0x34>)
   2bd92:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   2bd94:	68fb      	ldr	r3, [r7, #12]
}
   2bd96:	0018      	movs	r0, r3
   2bd98:	46bd      	mov	sp, r7
   2bd9a:	b004      	add	sp, #16
   2bd9c:	bd80      	pop	{r7, pc}
   2bd9e:	46c0      	nop			; (mov r8, r8)
   2bda0:	200042f4 	.word	0x200042f4
   2bda4:	20007ce8 	.word	0x20007ce8

0002bda8 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   2bda8:	b580      	push	{r7, lr}
   2bdaa:	b082      	sub	sp, #8
   2bdac:	af00      	add	r7, sp, #0
   2bdae:	6078      	str	r0, [r7, #4]
	return -1;
   2bdb0:	2301      	movs	r3, #1
   2bdb2:	425b      	negs	r3, r3
}
   2bdb4:	0018      	movs	r0, r3
   2bdb6:	46bd      	mov	sp, r7
   2bdb8:	b002      	add	sp, #8
   2bdba:	bd80      	pop	{r7, pc}

0002bdbc <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   2bdbc:	b580      	push	{r7, lr}
   2bdbe:	b082      	sub	sp, #8
   2bdc0:	af00      	add	r7, sp, #0
   2bdc2:	6078      	str	r0, [r7, #4]
   2bdc4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   2bdc6:	683b      	ldr	r3, [r7, #0]
   2bdc8:	2280      	movs	r2, #128	; 0x80
   2bdca:	0192      	lsls	r2, r2, #6
   2bdcc:	605a      	str	r2, [r3, #4]

	return 0;
   2bdce:	2300      	movs	r3, #0
}
   2bdd0:	0018      	movs	r0, r3
   2bdd2:	46bd      	mov	sp, r7
   2bdd4:	b002      	add	sp, #8
   2bdd6:	bd80      	pop	{r7, pc}

0002bdd8 <_isatty>:

extern int _isatty(int file)
{
   2bdd8:	b580      	push	{r7, lr}
   2bdda:	b082      	sub	sp, #8
   2bddc:	af00      	add	r7, sp, #0
   2bdde:	6078      	str	r0, [r7, #4]
	return 1;
   2bde0:	2301      	movs	r3, #1
}
   2bde2:	0018      	movs	r0, r3
   2bde4:	46bd      	mov	sp, r7
   2bde6:	b002      	add	sp, #8
   2bde8:	bd80      	pop	{r7, pc}

0002bdea <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   2bdea:	b580      	push	{r7, lr}
   2bdec:	b084      	sub	sp, #16
   2bdee:	af00      	add	r7, sp, #0
   2bdf0:	60f8      	str	r0, [r7, #12]
   2bdf2:	60b9      	str	r1, [r7, #8]
   2bdf4:	607a      	str	r2, [r7, #4]
	return 0;
   2bdf6:	2300      	movs	r3, #0
}
   2bdf8:	0018      	movs	r0, r3
   2bdfa:	46bd      	mov	sp, r7
   2bdfc:	b004      	add	sp, #16
   2bdfe:	bd80      	pop	{r7, pc}

0002be00 <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
   2be00:	b580      	push	{r7, lr}
   2be02:	b082      	sub	sp, #8
   2be04:	af00      	add	r7, sp, #0
   2be06:	6078      	str	r0, [r7, #4]
	time->second = 0;
   2be08:	687b      	ldr	r3, [r7, #4]
   2be0a:	2200      	movs	r2, #0
   2be0c:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
   2be0e:	687b      	ldr	r3, [r7, #4]
   2be10:	2200      	movs	r2, #0
   2be12:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
   2be14:	687b      	ldr	r3, [r7, #4]
   2be16:	2200      	movs	r2, #0
   2be18:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
   2be1a:	687b      	ldr	r3, [r7, #4]
   2be1c:	2200      	movs	r2, #0
   2be1e:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
   2be20:	687b      	ldr	r3, [r7, #4]
   2be22:	2201      	movs	r2, #1
   2be24:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
   2be26:	687b      	ldr	r3, [r7, #4]
   2be28:	2201      	movs	r2, #1
   2be2a:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
   2be2c:	687b      	ldr	r3, [r7, #4]
   2be2e:	22fa      	movs	r2, #250	; 0xfa
   2be30:	00d2      	lsls	r2, r2, #3
   2be32:	80da      	strh	r2, [r3, #6]
}
   2be34:	46c0      	nop			; (mov r8, r8)
   2be36:	46bd      	mov	sp, r7
   2be38:	b002      	add	sp, #8
   2be3a:	bd80      	pop	{r7, pc}

0002be3c <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
   2be3c:	b580      	push	{r7, lr}
   2be3e:	b086      	sub	sp, #24
   2be40:	af00      	add	r7, sp, #0
   2be42:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
   2be44:	230c      	movs	r3, #12
   2be46:	18fb      	adds	r3, r7, r3
   2be48:	0018      	movs	r0, r3
   2be4a:	4b23      	ldr	r3, [pc, #140]	; (2bed8 <rtc_calendar_get_config_defaults+0x9c>)
   2be4c:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   2be4e:	687b      	ldr	r3, [r7, #4]
   2be50:	22a0      	movs	r2, #160	; 0xa0
   2be52:	0112      	lsls	r2, r2, #4
   2be54:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
   2be56:	687b      	ldr	r3, [r7, #4]
   2be58:	2200      	movs	r2, #0
   2be5a:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   2be5c:	687b      	ldr	r3, [r7, #4]
   2be5e:	2200      	movs	r2, #0
   2be60:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
   2be62:	687b      	ldr	r3, [r7, #4]
   2be64:	2200      	movs	r2, #0
   2be66:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
   2be68:	687b      	ldr	r3, [r7, #4]
   2be6a:	22fa      	movs	r2, #250	; 0xfa
   2be6c:	00d2      	lsls	r2, r2, #3
   2be6e:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2be70:	2317      	movs	r3, #23
   2be72:	18fb      	adds	r3, r7, r3
   2be74:	2200      	movs	r2, #0
   2be76:	701a      	strb	r2, [r3, #0]
   2be78:	e025      	b.n	2bec6 <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
   2be7a:	2317      	movs	r3, #23
   2be7c:	18fb      	adds	r3, r7, r3
   2be7e:	781a      	ldrb	r2, [r3, #0]
   2be80:	6879      	ldr	r1, [r7, #4]
   2be82:	2008      	movs	r0, #8
   2be84:	0013      	movs	r3, r2
   2be86:	009b      	lsls	r3, r3, #2
   2be88:	189b      	adds	r3, r3, r2
   2be8a:	005b      	lsls	r3, r3, #1
   2be8c:	18cb      	adds	r3, r1, r3
   2be8e:	181a      	adds	r2, r3, r0
   2be90:	230c      	movs	r3, #12
   2be92:	18fb      	adds	r3, r7, r3
   2be94:	0010      	movs	r0, r2
   2be96:	0019      	movs	r1, r3
   2be98:	2308      	movs	r3, #8
   2be9a:	001a      	movs	r2, r3
   2be9c:	4b0f      	ldr	r3, [pc, #60]	; (2bedc <rtc_calendar_get_config_defaults+0xa0>)
   2be9e:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2bea0:	2317      	movs	r3, #23
   2bea2:	18fb      	adds	r3, r7, r3
   2bea4:	781a      	ldrb	r2, [r3, #0]
   2bea6:	6879      	ldr	r1, [r7, #4]
   2bea8:	0013      	movs	r3, r2
   2beaa:	009b      	lsls	r3, r3, #2
   2beac:	189b      	adds	r3, r3, r2
   2beae:	005b      	lsls	r3, r3, #1
   2beb0:	18cb      	adds	r3, r1, r3
   2beb2:	3310      	adds	r3, #16
   2beb4:	2206      	movs	r2, #6
   2beb6:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2beb8:	2317      	movs	r3, #23
   2beba:	18fb      	adds	r3, r7, r3
   2bebc:	781a      	ldrb	r2, [r3, #0]
   2bebe:	2317      	movs	r3, #23
   2bec0:	18fb      	adds	r3, r7, r3
   2bec2:	3201      	adds	r2, #1
   2bec4:	701a      	strb	r2, [r3, #0]
   2bec6:	2317      	movs	r3, #23
   2bec8:	18fb      	adds	r3, r7, r3
   2beca:	781b      	ldrb	r3, [r3, #0]
   2becc:	2b00      	cmp	r3, #0
   2bece:	d0d4      	beq.n	2be7a <rtc_calendar_get_config_defaults+0x3e>
	}
}
   2bed0:	46c0      	nop			; (mov r8, r8)
   2bed2:	46bd      	mov	sp, r7
   2bed4:	b006      	add	sp, #24
   2bed6:	bd80      	pop	{r7, pc}
   2bed8:	0002be01 	.word	0x0002be01
   2bedc:	000355b9 	.word	0x000355b9

0002bee0 <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
   2bee0:	b580      	push	{r7, lr}
   2bee2:	b088      	sub	sp, #32
   2bee4:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
   2bee6:	230c      	movs	r3, #12
   2bee8:	18fb      	adds	r3, r7, r3
   2beea:	0018      	movs	r0, r3
   2beec:	4b1a      	ldr	r3, [pc, #104]	; (2bf58 <configure_rtc_calendar+0x78>)
   2beee:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
   2bef0:	1d3b      	adds	r3, r7, #4
   2bef2:	0018      	movs	r0, r3
   2bef4:	4b19      	ldr	r3, [pc, #100]	; (2bf5c <configure_rtc_calendar+0x7c>)
   2bef6:	4798      	blx	r3
	init_time.year   = 2014;
   2bef8:	1d3b      	adds	r3, r7, #4
   2befa:	4a19      	ldr	r2, [pc, #100]	; (2bf60 <configure_rtc_calendar+0x80>)
   2befc:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
   2befe:	1d3b      	adds	r3, r7, #4
   2bf00:	2201      	movs	r2, #1
   2bf02:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
   2bf04:	1d3b      	adds	r3, r7, #4
   2bf06:	2201      	movs	r2, #1
   2bf08:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
   2bf0a:	1d3b      	adds	r3, r7, #4
   2bf0c:	2200      	movs	r2, #0
   2bf0e:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
   2bf10:	1d3b      	adds	r3, r7, #4
   2bf12:	2200      	movs	r2, #0
   2bf14:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
   2bf16:	1d3b      	adds	r3, r7, #4
   2bf18:	2204      	movs	r2, #4
   2bf1a:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
   2bf1c:	230c      	movs	r3, #12
   2bf1e:	18fb      	adds	r3, r7, r3
   2bf20:	2201      	movs	r2, #1
   2bf22:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   2bf24:	230c      	movs	r3, #12
   2bf26:	18fb      	adds	r3, r7, r3
   2bf28:	1d3a      	adds	r2, r7, #4
   2bf2a:	3308      	adds	r3, #8
   2bf2c:	ca03      	ldmia	r2!, {r0, r1}
   2bf2e:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2bf30:	230c      	movs	r3, #12
   2bf32:	18fb      	adds	r3, r7, r3
   2bf34:	2206      	movs	r2, #6
   2bf36:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   2bf38:	230c      	movs	r3, #12
   2bf3a:	18fa      	adds	r2, r7, r3
   2bf3c:	4909      	ldr	r1, [pc, #36]	; (2bf64 <configure_rtc_calendar+0x84>)
   2bf3e:	4b0a      	ldr	r3, [pc, #40]	; (2bf68 <configure_rtc_calendar+0x88>)
   2bf40:	0018      	movs	r0, r3
   2bf42:	4b0a      	ldr	r3, [pc, #40]	; (2bf6c <configure_rtc_calendar+0x8c>)
   2bf44:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
   2bf46:	4b08      	ldr	r3, [pc, #32]	; (2bf68 <configure_rtc_calendar+0x88>)
   2bf48:	0018      	movs	r0, r3
   2bf4a:	4b09      	ldr	r3, [pc, #36]	; (2bf70 <configure_rtc_calendar+0x90>)
   2bf4c:	4798      	blx	r3
}
   2bf4e:	46c0      	nop			; (mov r8, r8)
   2bf50:	46bd      	mov	sp, r7
   2bf52:	b008      	add	sp, #32
   2bf54:	bd80      	pop	{r7, pc}
   2bf56:	46c0      	nop			; (mov r8, r8)
   2bf58:	0002be3d 	.word	0x0002be3d
   2bf5c:	0002be01 	.word	0x0002be01
   2bf60:	000007de 	.word	0x000007de
   2bf64:	40001400 	.word	0x40001400
   2bf68:	20005c8c 	.word	0x20005c8c
   2bf6c:	00027a1d 	.word	0x00027a1d
   2bf70:	00027749 	.word	0x00027749

0002bf74 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   2bf74:	b590      	push	{r4, r7, lr}
   2bf76:	b085      	sub	sp, #20
   2bf78:	af00      	add	r7, sp, #0
   2bf7a:	0002      	movs	r2, r0
   2bf7c:	1dfb      	adds	r3, r7, #7
   2bf7e:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
   2bf80:	4b1a      	ldr	r3, [pc, #104]	; (2bfec <disk_initialize+0x78>)
   2bf82:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
   2bf84:	1dfb      	adds	r3, r7, #7
   2bf86:	781b      	ldrb	r3, [r3, #0]
   2bf88:	2b01      	cmp	r3, #1
   2bf8a:	d901      	bls.n	2bf90 <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   2bf8c:	2301      	movs	r3, #1
   2bf8e:	e029      	b.n	2bfe4 <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
   2bf90:	2300      	movs	r3, #0
   2bf92:	60fb      	str	r3, [r7, #12]
   2bf94:	e010      	b.n	2bfb8 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
   2bf96:	230b      	movs	r3, #11
   2bf98:	18fc      	adds	r4, r7, r3
   2bf9a:	1dfb      	adds	r3, r7, #7
   2bf9c:	781b      	ldrb	r3, [r3, #0]
   2bf9e:	0018      	movs	r0, r3
   2bfa0:	4b13      	ldr	r3, [pc, #76]	; (2bff0 <disk_initialize+0x7c>)
   2bfa2:	4798      	blx	r3
   2bfa4:	0003      	movs	r3, r0
   2bfa6:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
   2bfa8:	230b      	movs	r3, #11
   2bfaa:	18fb      	adds	r3, r7, r3
   2bfac:	781b      	ldrb	r3, [r3, #0]
   2bfae:	2b03      	cmp	r3, #3
   2bfb0:	d106      	bne.n	2bfc0 <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
   2bfb2:	68fb      	ldr	r3, [r7, #12]
   2bfb4:	3301      	adds	r3, #1
   2bfb6:	60fb      	str	r3, [r7, #12]
   2bfb8:	68fb      	ldr	r3, [r7, #12]
   2bfba:	2b01      	cmp	r3, #1
   2bfbc:	ddeb      	ble.n	2bf96 <disk_initialize+0x22>
   2bfbe:	e000      	b.n	2bfc2 <disk_initialize+0x4e>
			break;
   2bfc0:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
   2bfc2:	230b      	movs	r3, #11
   2bfc4:	18fb      	adds	r3, r7, r3
   2bfc6:	781b      	ldrb	r3, [r3, #0]
   2bfc8:	2b00      	cmp	r3, #0
   2bfca:	d001      	beq.n	2bfd0 <disk_initialize+0x5c>
		return STA_NOINIT;
   2bfcc:	2301      	movs	r3, #1
   2bfce:	e009      	b.n	2bfe4 <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
   2bfd0:	1dfb      	adds	r3, r7, #7
   2bfd2:	781b      	ldrb	r3, [r3, #0]
   2bfd4:	0018      	movs	r0, r3
   2bfd6:	4b07      	ldr	r3, [pc, #28]	; (2bff4 <disk_initialize+0x80>)
   2bfd8:	4798      	blx	r3
   2bfda:	1e03      	subs	r3, r0, #0
   2bfdc:	d001      	beq.n	2bfe2 <disk_initialize+0x6e>
		return STA_PROTECT;
   2bfde:	2304      	movs	r3, #4
   2bfe0:	e000      	b.n	2bfe4 <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
   2bfe2:	2300      	movs	r3, #0
}
   2bfe4:	0018      	movs	r0, r3
   2bfe6:	46bd      	mov	sp, r7
   2bfe8:	b005      	add	sp, #20
   2bfea:	bd90      	pop	{r4, r7, pc}
   2bfec:	0002bee1 	.word	0x0002bee1
   2bff0:	00026c45 	.word	0x00026c45
   2bff4:	00026cfd 	.word	0x00026cfd

0002bff8 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   2bff8:	b580      	push	{r7, lr}
   2bffa:	b082      	sub	sp, #8
   2bffc:	af00      	add	r7, sp, #0
   2bffe:	0002      	movs	r2, r0
   2c000:	1dfb      	adds	r3, r7, #7
   2c002:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
   2c004:	1dfb      	adds	r3, r7, #7
   2c006:	781b      	ldrb	r3, [r3, #0]
   2c008:	0018      	movs	r0, r3
   2c00a:	4b08      	ldr	r3, [pc, #32]	; (2c02c <disk_status+0x34>)
   2c00c:	4798      	blx	r3
   2c00e:	1e03      	subs	r3, r0, #0
   2c010:	d002      	beq.n	2c018 <disk_status+0x20>
   2c012:	2b02      	cmp	r3, #2
   2c014:	d002      	beq.n	2c01c <disk_status+0x24>
   2c016:	e003      	b.n	2c020 <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
   2c018:	2300      	movs	r3, #0
   2c01a:	e002      	b.n	2c022 <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   2c01c:	2303      	movs	r3, #3
   2c01e:	e000      	b.n	2c022 <disk_status+0x2a>
	default:
		return STA_NOINIT;
   2c020:	2301      	movs	r3, #1
	}
}
   2c022:	0018      	movs	r0, r3
   2c024:	46bd      	mov	sp, r7
   2c026:	b002      	add	sp, #8
   2c028:	bd80      	pop	{r7, pc}
   2c02a:	46c0      	nop			; (mov r8, r8)
   2c02c:	00026c45 	.word	0x00026c45

0002c030 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   2c030:	b590      	push	{r4, r7, lr}
   2c032:	b089      	sub	sp, #36	; 0x24
   2c034:	af00      	add	r7, sp, #0
   2c036:	60b9      	str	r1, [r7, #8]
   2c038:	607a      	str	r2, [r7, #4]
   2c03a:	0019      	movs	r1, r3
   2c03c:	230f      	movs	r3, #15
   2c03e:	18fb      	adds	r3, r7, r3
   2c040:	1c02      	adds	r2, r0, #0
   2c042:	701a      	strb	r2, [r3, #0]
   2c044:	230e      	movs	r3, #14
   2c046:	18fb      	adds	r3, r7, r3
   2c048:	1c0a      	adds	r2, r1, #0
   2c04a:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2c04c:	231b      	movs	r3, #27
   2c04e:	18fc      	adds	r4, r7, r3
   2c050:	230f      	movs	r3, #15
   2c052:	18fb      	adds	r3, r7, r3
   2c054:	781b      	ldrb	r3, [r3, #0]
   2c056:	0018      	movs	r0, r3
   2c058:	4b28      	ldr	r3, [pc, #160]	; (2c0fc <disk_read+0xcc>)
   2c05a:	4798      	blx	r3
   2c05c:	0003      	movs	r3, r0
   2c05e:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2c060:	231b      	movs	r3, #27
   2c062:	18fb      	adds	r3, r7, r3
   2c064:	781b      	ldrb	r3, [r3, #0]
   2c066:	2b00      	cmp	r3, #0
   2c068:	d101      	bne.n	2c06e <disk_read+0x3e>
		return RES_ERROR;
   2c06a:	2301      	movs	r3, #1
   2c06c:	e042      	b.n	2c0f4 <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2c06e:	2314      	movs	r3, #20
   2c070:	18fa      	adds	r2, r7, r3
   2c072:	230f      	movs	r3, #15
   2c074:	18fb      	adds	r3, r7, r3
   2c076:	781b      	ldrb	r3, [r3, #0]
   2c078:	0011      	movs	r1, r2
   2c07a:	0018      	movs	r0, r3
   2c07c:	4b20      	ldr	r3, [pc, #128]	; (2c100 <disk_read+0xd0>)
   2c07e:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2c080:	230e      	movs	r3, #14
   2c082:	18fb      	adds	r3, r7, r3
   2c084:	781b      	ldrb	r3, [r3, #0]
   2c086:	221b      	movs	r2, #27
   2c088:	18ba      	adds	r2, r7, r2
   2c08a:	7812      	ldrb	r2, [r2, #0]
   2c08c:	4353      	muls	r3, r2
   2c08e:	001a      	movs	r2, r3
   2c090:	687b      	ldr	r3, [r7, #4]
   2c092:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2c094:	697b      	ldr	r3, [r7, #20]
   2c096:	3301      	adds	r3, #1
   2c098:	211b      	movs	r1, #27
   2c09a:	1879      	adds	r1, r7, r1
   2c09c:	7809      	ldrb	r1, [r1, #0]
   2c09e:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2c0a0:	429a      	cmp	r2, r3
   2c0a2:	d901      	bls.n	2c0a8 <disk_read+0x78>
		return RES_PARERR;
   2c0a4:	2304      	movs	r3, #4
   2c0a6:	e025      	b.n	2c0f4 <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
   2c0a8:	2300      	movs	r3, #0
   2c0aa:	61fb      	str	r3, [r7, #28]
   2c0ac:	e01b      	b.n	2c0e6 <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2c0ae:	231b      	movs	r3, #27
   2c0b0:	18fb      	adds	r3, r7, r3
   2c0b2:	781b      	ldrb	r3, [r3, #0]
   2c0b4:	69fa      	ldr	r2, [r7, #28]
   2c0b6:	435a      	muls	r2, r3
   2c0b8:	687b      	ldr	r3, [r7, #4]
   2c0ba:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2c0bc:	231b      	movs	r3, #27
   2c0be:	18fb      	adds	r3, r7, r3
   2c0c0:	781b      	ldrb	r3, [r3, #0]
   2c0c2:	69fa      	ldr	r2, [r7, #28]
   2c0c4:	4353      	muls	r3, r2
   2c0c6:	025b      	lsls	r3, r3, #9
   2c0c8:	68ba      	ldr	r2, [r7, #8]
   2c0ca:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2c0cc:	230f      	movs	r3, #15
   2c0ce:	18fb      	adds	r3, r7, r3
   2c0d0:	781b      	ldrb	r3, [r3, #0]
   2c0d2:	0018      	movs	r0, r3
   2c0d4:	4b0b      	ldr	r3, [pc, #44]	; (2c104 <disk_read+0xd4>)
   2c0d6:	4798      	blx	r3
   2c0d8:	1e03      	subs	r3, r0, #0
   2c0da:	d001      	beq.n	2c0e0 <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2c0dc:	2301      	movs	r3, #1
   2c0de:	e009      	b.n	2c0f4 <disk_read+0xc4>
	for (i = 0; i < count; i++) {
   2c0e0:	69fb      	ldr	r3, [r7, #28]
   2c0e2:	3301      	adds	r3, #1
   2c0e4:	61fb      	str	r3, [r7, #28]
   2c0e6:	230e      	movs	r3, #14
   2c0e8:	18fb      	adds	r3, r7, r3
   2c0ea:	781a      	ldrb	r2, [r3, #0]
   2c0ec:	69fb      	ldr	r3, [r7, #28]
   2c0ee:	429a      	cmp	r2, r3
   2c0f0:	d8dd      	bhi.n	2c0ae <disk_read+0x7e>
		}
	}

	return RES_OK;
   2c0f2:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2c0f4:	0018      	movs	r0, r3
   2c0f6:	46bd      	mov	sp, r7
   2c0f8:	b009      	add	sp, #36	; 0x24
   2c0fa:	bd90      	pop	{r4, r7, pc}
   2c0fc:	00026cd1 	.word	0x00026cd1
   2c100:	00026c85 	.word	0x00026c85
   2c104:	00026d45 	.word	0x00026d45

0002c108 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   2c108:	b590      	push	{r4, r7, lr}
   2c10a:	b089      	sub	sp, #36	; 0x24
   2c10c:	af00      	add	r7, sp, #0
   2c10e:	60b9      	str	r1, [r7, #8]
   2c110:	607a      	str	r2, [r7, #4]
   2c112:	0019      	movs	r1, r3
   2c114:	230f      	movs	r3, #15
   2c116:	18fb      	adds	r3, r7, r3
   2c118:	1c02      	adds	r2, r0, #0
   2c11a:	701a      	strb	r2, [r3, #0]
   2c11c:	230e      	movs	r3, #14
   2c11e:	18fb      	adds	r3, r7, r3
   2c120:	1c0a      	adds	r2, r1, #0
   2c122:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2c124:	231b      	movs	r3, #27
   2c126:	18fc      	adds	r4, r7, r3
   2c128:	230f      	movs	r3, #15
   2c12a:	18fb      	adds	r3, r7, r3
   2c12c:	781b      	ldrb	r3, [r3, #0]
   2c12e:	0018      	movs	r0, r3
   2c130:	4b28      	ldr	r3, [pc, #160]	; (2c1d4 <disk_write+0xcc>)
   2c132:	4798      	blx	r3
   2c134:	0003      	movs	r3, r0
   2c136:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2c138:	231b      	movs	r3, #27
   2c13a:	18fb      	adds	r3, r7, r3
   2c13c:	781b      	ldrb	r3, [r3, #0]
   2c13e:	2b00      	cmp	r3, #0
   2c140:	d101      	bne.n	2c146 <disk_write+0x3e>
		return RES_ERROR;
   2c142:	2301      	movs	r3, #1
   2c144:	e042      	b.n	2c1cc <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2c146:	2314      	movs	r3, #20
   2c148:	18fa      	adds	r2, r7, r3
   2c14a:	230f      	movs	r3, #15
   2c14c:	18fb      	adds	r3, r7, r3
   2c14e:	781b      	ldrb	r3, [r3, #0]
   2c150:	0011      	movs	r1, r2
   2c152:	0018      	movs	r0, r3
   2c154:	4b20      	ldr	r3, [pc, #128]	; (2c1d8 <disk_write+0xd0>)
   2c156:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2c158:	230e      	movs	r3, #14
   2c15a:	18fb      	adds	r3, r7, r3
   2c15c:	781b      	ldrb	r3, [r3, #0]
   2c15e:	221b      	movs	r2, #27
   2c160:	18ba      	adds	r2, r7, r2
   2c162:	7812      	ldrb	r2, [r2, #0]
   2c164:	4353      	muls	r3, r2
   2c166:	001a      	movs	r2, r3
   2c168:	687b      	ldr	r3, [r7, #4]
   2c16a:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2c16c:	697b      	ldr	r3, [r7, #20]
   2c16e:	3301      	adds	r3, #1
   2c170:	211b      	movs	r1, #27
   2c172:	1879      	adds	r1, r7, r1
   2c174:	7809      	ldrb	r1, [r1, #0]
   2c176:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2c178:	429a      	cmp	r2, r3
   2c17a:	d901      	bls.n	2c180 <disk_write+0x78>
		return RES_PARERR;
   2c17c:	2304      	movs	r3, #4
   2c17e:	e025      	b.n	2c1cc <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
   2c180:	2300      	movs	r3, #0
   2c182:	61fb      	str	r3, [r7, #28]
   2c184:	e01b      	b.n	2c1be <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2c186:	231b      	movs	r3, #27
   2c188:	18fb      	adds	r3, r7, r3
   2c18a:	781b      	ldrb	r3, [r3, #0]
   2c18c:	69fa      	ldr	r2, [r7, #28]
   2c18e:	435a      	muls	r2, r3
   2c190:	687b      	ldr	r3, [r7, #4]
   2c192:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2c194:	231b      	movs	r3, #27
   2c196:	18fb      	adds	r3, r7, r3
   2c198:	781b      	ldrb	r3, [r3, #0]
   2c19a:	69fa      	ldr	r2, [r7, #28]
   2c19c:	4353      	muls	r3, r2
   2c19e:	025b      	lsls	r3, r3, #9
   2c1a0:	68ba      	ldr	r2, [r7, #8]
   2c1a2:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2c1a4:	230f      	movs	r3, #15
   2c1a6:	18fb      	adds	r3, r7, r3
   2c1a8:	781b      	ldrb	r3, [r3, #0]
   2c1aa:	0018      	movs	r0, r3
   2c1ac:	4b0b      	ldr	r3, [pc, #44]	; (2c1dc <disk_write+0xd4>)
   2c1ae:	4798      	blx	r3
   2c1b0:	1e03      	subs	r3, r0, #0
   2c1b2:	d001      	beq.n	2c1b8 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2c1b4:	2301      	movs	r3, #1
   2c1b6:	e009      	b.n	2c1cc <disk_write+0xc4>
	for (i = 0; i < count; i++) {
   2c1b8:	69fb      	ldr	r3, [r7, #28]
   2c1ba:	3301      	adds	r3, #1
   2c1bc:	61fb      	str	r3, [r7, #28]
   2c1be:	230e      	movs	r3, #14
   2c1c0:	18fb      	adds	r3, r7, r3
   2c1c2:	781a      	ldrb	r2, [r3, #0]
   2c1c4:	69fb      	ldr	r3, [r7, #28]
   2c1c6:	429a      	cmp	r2, r3
   2c1c8:	d8dd      	bhi.n	2c186 <disk_write+0x7e>
		}
	}

	return RES_OK;
   2c1ca:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2c1cc:	0018      	movs	r0, r3
   2c1ce:	46bd      	mov	sp, r7
   2c1d0:	b009      	add	sp, #36	; 0x24
   2c1d2:	bd90      	pop	{r4, r7, pc}
   2c1d4:	00026cd1 	.word	0x00026cd1
   2c1d8:	00026c85 	.word	0x00026c85
   2c1dc:	00026d99 	.word	0x00026d99

0002c1e0 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   2c1e0:	b590      	push	{r4, r7, lr}
   2c1e2:	b085      	sub	sp, #20
   2c1e4:	af00      	add	r7, sp, #0
   2c1e6:	603a      	str	r2, [r7, #0]
   2c1e8:	1dfb      	adds	r3, r7, #7
   2c1ea:	1c02      	adds	r2, r0, #0
   2c1ec:	701a      	strb	r2, [r3, #0]
   2c1ee:	1dbb      	adds	r3, r7, #6
   2c1f0:	1c0a      	adds	r2, r1, #0
   2c1f2:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
   2c1f4:	230f      	movs	r3, #15
   2c1f6:	18fb      	adds	r3, r7, r3
   2c1f8:	2204      	movs	r2, #4
   2c1fa:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
   2c1fc:	1dbb      	adds	r3, r7, #6
   2c1fe:	781b      	ldrb	r3, [r3, #0]
   2c200:	2b01      	cmp	r3, #1
   2c202:	d00f      	beq.n	2c224 <disk_ioctl+0x44>
   2c204:	dc02      	bgt.n	2c20c <disk_ioctl+0x2c>
   2c206:	2b00      	cmp	r3, #0
   2c208:	d044      	beq.n	2c294 <disk_ioctl+0xb4>
   2c20a:	e054      	b.n	2c2b6 <disk_ioctl+0xd6>
   2c20c:	2b02      	cmp	r3, #2
   2c20e:	d01a      	beq.n	2c246 <disk_ioctl+0x66>
   2c210:	2b03      	cmp	r3, #3
   2c212:	d150      	bne.n	2c2b6 <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
   2c214:	683b      	ldr	r3, [r7, #0]
   2c216:	2201      	movs	r2, #1
   2c218:	601a      	str	r2, [r3, #0]
		res = RES_OK;
   2c21a:	230f      	movs	r3, #15
   2c21c:	18fb      	adds	r3, r7, r3
   2c21e:	2200      	movs	r2, #0
   2c220:	701a      	strb	r2, [r3, #0]
		break;
   2c222:	e04c      	b.n	2c2be <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
   2c224:	2308      	movs	r3, #8
   2c226:	18fa      	adds	r2, r7, r3
   2c228:	1dfb      	adds	r3, r7, #7
   2c22a:	781b      	ldrb	r3, [r3, #0]
   2c22c:	0011      	movs	r1, r2
   2c22e:	0018      	movs	r0, r3
   2c230:	4b26      	ldr	r3, [pc, #152]	; (2c2cc <disk_ioctl+0xec>)
   2c232:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
   2c234:	68bb      	ldr	r3, [r7, #8]
   2c236:	1c5a      	adds	r2, r3, #1
   2c238:	683b      	ldr	r3, [r7, #0]
   2c23a:	601a      	str	r2, [r3, #0]

		res = RES_OK;
   2c23c:	230f      	movs	r3, #15
   2c23e:	18fb      	adds	r3, r7, r3
   2c240:	2200      	movs	r2, #0
   2c242:	701a      	strb	r2, [r3, #0]
	}
	break;
   2c244:	e03b      	b.n	2c2be <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
   2c246:	230e      	movs	r3, #14
   2c248:	18fc      	adds	r4, r7, r3
   2c24a:	1dfb      	adds	r3, r7, #7
   2c24c:	781b      	ldrb	r3, [r3, #0]
   2c24e:	0018      	movs	r0, r3
   2c250:	4b1f      	ldr	r3, [pc, #124]	; (2c2d0 <disk_ioctl+0xf0>)
   2c252:	4798      	blx	r3
   2c254:	0003      	movs	r3, r0
   2c256:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
   2c258:	230e      	movs	r3, #14
   2c25a:	18fb      	adds	r3, r7, r3
   2c25c:	781b      	ldrb	r3, [r3, #0]
   2c25e:	2b01      	cmp	r3, #1
   2c260:	d010      	beq.n	2c284 <disk_ioctl+0xa4>
   2c262:	230e      	movs	r3, #14
   2c264:	18fb      	adds	r3, r7, r3
   2c266:	781b      	ldrb	r3, [r3, #0]
   2c268:	2b02      	cmp	r3, #2
   2c26a:	d00b      	beq.n	2c284 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   2c26c:	230e      	movs	r3, #14
   2c26e:	18fb      	adds	r3, r7, r3
   2c270:	781b      	ldrb	r3, [r3, #0]
   2c272:	2b04      	cmp	r3, #4
   2c274:	d006      	beq.n	2c284 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
   2c276:	230e      	movs	r3, #14
   2c278:	18fb      	adds	r3, r7, r3
   2c27a:	781b      	ldrb	r3, [r3, #0]
   2c27c:	2b08      	cmp	r3, #8
   2c27e:	d001      	beq.n	2c284 <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
   2c280:	2301      	movs	r3, #1
   2c282:	e01f      	b.n	2c2c4 <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   2c284:	683b      	ldr	r3, [r7, #0]
   2c286:	2200      	movs	r2, #0
   2c288:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
   2c28a:	230f      	movs	r3, #15
   2c28c:	18fb      	adds	r3, r7, r3
   2c28e:	2200      	movs	r2, #0
   2c290:	701a      	strb	r2, [r3, #0]
	}
	break;
   2c292:	e014      	b.n	2c2be <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   2c294:	1dfb      	adds	r3, r7, #7
   2c296:	781b      	ldrb	r3, [r3, #0]
   2c298:	0018      	movs	r0, r3
   2c29a:	4b0e      	ldr	r3, [pc, #56]	; (2c2d4 <disk_ioctl+0xf4>)
   2c29c:	4798      	blx	r3
   2c29e:	1e03      	subs	r3, r0, #0
   2c2a0:	d104      	bne.n	2c2ac <disk_ioctl+0xcc>
			res = RES_OK;
   2c2a2:	230f      	movs	r3, #15
   2c2a4:	18fb      	adds	r3, r7, r3
   2c2a6:	2200      	movs	r2, #0
   2c2a8:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
   2c2aa:	e008      	b.n	2c2be <disk_ioctl+0xde>
			res = RES_NOTRDY;
   2c2ac:	230f      	movs	r3, #15
   2c2ae:	18fb      	adds	r3, r7, r3
   2c2b0:	2203      	movs	r2, #3
   2c2b2:	701a      	strb	r2, [r3, #0]
		break;
   2c2b4:	e003      	b.n	2c2be <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
   2c2b6:	230f      	movs	r3, #15
   2c2b8:	18fb      	adds	r3, r7, r3
   2c2ba:	2204      	movs	r2, #4
   2c2bc:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2c2be:	230f      	movs	r3, #15
   2c2c0:	18fb      	adds	r3, r7, r3
   2c2c2:	781b      	ldrb	r3, [r3, #0]
}
   2c2c4:	0018      	movs	r0, r3
   2c2c6:	46bd      	mov	sp, r7
   2c2c8:	b005      	add	sp, #20
   2c2ca:	bd90      	pop	{r4, r7, pc}
   2c2cc:	00026c85 	.word	0x00026c85
   2c2d0:	00026cd1 	.word	0x00026cd1
   2c2d4:	00026c45 	.word	0x00026c45

0002c2d8 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   2c2d8:	b580      	push	{r7, lr}
   2c2da:	b084      	sub	sp, #16
   2c2dc:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   2c2de:	1d3a      	adds	r2, r7, #4
   2c2e0:	4b12      	ldr	r3, [pc, #72]	; (2c32c <get_fattime+0x54>)
   2c2e2:	0011      	movs	r1, r2
   2c2e4:	0018      	movs	r0, r3
   2c2e6:	4b12      	ldr	r3, [pc, #72]	; (2c330 <get_fattime+0x58>)
   2c2e8:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
   2c2ea:	1d3b      	adds	r3, r7, #4
   2c2ec:	88db      	ldrh	r3, [r3, #6]
   2c2ee:	4a11      	ldr	r2, [pc, #68]	; (2c334 <get_fattime+0x5c>)
   2c2f0:	4694      	mov	ip, r2
   2c2f2:	4463      	add	r3, ip
   2c2f4:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
   2c2f6:	1d3b      	adds	r3, r7, #4
   2c2f8:	795b      	ldrb	r3, [r3, #5]
   2c2fa:	055b      	lsls	r3, r3, #21
   2c2fc:	431a      	orrs	r2, r3
			| (current_time.day << 16)
   2c2fe:	1d3b      	adds	r3, r7, #4
   2c300:	791b      	ldrb	r3, [r3, #4]
   2c302:	041b      	lsls	r3, r3, #16
   2c304:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
   2c306:	1d3b      	adds	r3, r7, #4
   2c308:	789b      	ldrb	r3, [r3, #2]
   2c30a:	02db      	lsls	r3, r3, #11
   2c30c:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
   2c30e:	1d3b      	adds	r3, r7, #4
   2c310:	785b      	ldrb	r3, [r3, #1]
   2c312:	015b      	lsls	r3, r3, #5
   2c314:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
   2c316:	1d3a      	adds	r2, r7, #4
   2c318:	7812      	ldrb	r2, [r2, #0]
   2c31a:	0852      	lsrs	r2, r2, #1
   2c31c:	b2d2      	uxtb	r2, r2
   2c31e:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
   2c320:	60fb      	str	r3, [r7, #12]

	return ul_time;
   2c322:	68fb      	ldr	r3, [r7, #12]
}
   2c324:	0018      	movs	r0, r3
   2c326:	46bd      	mov	sp, r7
   2c328:	b004      	add	sp, #16
   2c32a:	bd80      	pop	{r7, pc}
   2c32c:	20005c8c 	.word	0x20005c8c
   2c330:	00027ab1 	.word	0x00027ab1
   2c334:	fffff844 	.word	0xfffff844

0002c338 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   2c338:	b580      	push	{r7, lr}
   2c33a:	b086      	sub	sp, #24
   2c33c:	af00      	add	r7, sp, #0
   2c33e:	60f8      	str	r0, [r7, #12]
   2c340:	60b9      	str	r1, [r7, #8]
   2c342:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2c344:	68fb      	ldr	r3, [r7, #12]
   2c346:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
   2c348:	68bb      	ldr	r3, [r7, #8]
   2c34a:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   2c34c:	e007      	b.n	2c35e <mem_cpy+0x26>
		*d++ = *s++;
   2c34e:	697b      	ldr	r3, [r7, #20]
   2c350:	1c5a      	adds	r2, r3, #1
   2c352:	617a      	str	r2, [r7, #20]
   2c354:	693a      	ldr	r2, [r7, #16]
   2c356:	1c51      	adds	r1, r2, #1
   2c358:	6139      	str	r1, [r7, #16]
   2c35a:	7812      	ldrb	r2, [r2, #0]
   2c35c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2c35e:	687b      	ldr	r3, [r7, #4]
   2c360:	1e5a      	subs	r2, r3, #1
   2c362:	607a      	str	r2, [r7, #4]
   2c364:	2b00      	cmp	r3, #0
   2c366:	d1f2      	bne.n	2c34e <mem_cpy+0x16>
}
   2c368:	46c0      	nop			; (mov r8, r8)
   2c36a:	46bd      	mov	sp, r7
   2c36c:	b006      	add	sp, #24
   2c36e:	bd80      	pop	{r7, pc}

0002c370 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
   2c370:	b580      	push	{r7, lr}
   2c372:	b086      	sub	sp, #24
   2c374:	af00      	add	r7, sp, #0
   2c376:	60f8      	str	r0, [r7, #12]
   2c378:	60b9      	str	r1, [r7, #8]
   2c37a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2c37c:	68fb      	ldr	r3, [r7, #12]
   2c37e:	617b      	str	r3, [r7, #20]

	while (cnt--)
   2c380:	e005      	b.n	2c38e <mem_set+0x1e>
		*d++ = (BYTE)val;
   2c382:	697b      	ldr	r3, [r7, #20]
   2c384:	1c5a      	adds	r2, r3, #1
   2c386:	617a      	str	r2, [r7, #20]
   2c388:	68ba      	ldr	r2, [r7, #8]
   2c38a:	b2d2      	uxtb	r2, r2
   2c38c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2c38e:	687b      	ldr	r3, [r7, #4]
   2c390:	1e5a      	subs	r2, r3, #1
   2c392:	607a      	str	r2, [r7, #4]
   2c394:	2b00      	cmp	r3, #0
   2c396:	d1f4      	bne.n	2c382 <mem_set+0x12>
}
   2c398:	46c0      	nop			; (mov r8, r8)
   2c39a:	46bd      	mov	sp, r7
   2c39c:	b006      	add	sp, #24
   2c39e:	bd80      	pop	{r7, pc}

0002c3a0 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
   2c3a0:	b580      	push	{r7, lr}
   2c3a2:	b088      	sub	sp, #32
   2c3a4:	af00      	add	r7, sp, #0
   2c3a6:	60f8      	str	r0, [r7, #12]
   2c3a8:	60b9      	str	r1, [r7, #8]
   2c3aa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
   2c3ac:	68fb      	ldr	r3, [r7, #12]
   2c3ae:	61fb      	str	r3, [r7, #28]
   2c3b0:	68bb      	ldr	r3, [r7, #8]
   2c3b2:	61bb      	str	r3, [r7, #24]
	int r = 0;
   2c3b4:	2300      	movs	r3, #0
   2c3b6:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
   2c3b8:	46c0      	nop			; (mov r8, r8)
   2c3ba:	687b      	ldr	r3, [r7, #4]
   2c3bc:	1e5a      	subs	r2, r3, #1
   2c3be:	607a      	str	r2, [r7, #4]
   2c3c0:	2b00      	cmp	r3, #0
   2c3c2:	d00d      	beq.n	2c3e0 <mem_cmp+0x40>
   2c3c4:	69fb      	ldr	r3, [r7, #28]
   2c3c6:	1c5a      	adds	r2, r3, #1
   2c3c8:	61fa      	str	r2, [r7, #28]
   2c3ca:	781b      	ldrb	r3, [r3, #0]
   2c3cc:	0019      	movs	r1, r3
   2c3ce:	69bb      	ldr	r3, [r7, #24]
   2c3d0:	1c5a      	adds	r2, r3, #1
   2c3d2:	61ba      	str	r2, [r7, #24]
   2c3d4:	781b      	ldrb	r3, [r3, #0]
   2c3d6:	1acb      	subs	r3, r1, r3
   2c3d8:	617b      	str	r3, [r7, #20]
   2c3da:	697b      	ldr	r3, [r7, #20]
   2c3dc:	2b00      	cmp	r3, #0
   2c3de:	d0ec      	beq.n	2c3ba <mem_cmp+0x1a>
	return r;
   2c3e0:	697b      	ldr	r3, [r7, #20]
}
   2c3e2:	0018      	movs	r0, r3
   2c3e4:	46bd      	mov	sp, r7
   2c3e6:	b008      	add	sp, #32
   2c3e8:	bd80      	pop	{r7, pc}

0002c3ea <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
   2c3ea:	b580      	push	{r7, lr}
   2c3ec:	b082      	sub	sp, #8
   2c3ee:	af00      	add	r7, sp, #0
   2c3f0:	6078      	str	r0, [r7, #4]
   2c3f2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
   2c3f4:	e002      	b.n	2c3fc <chk_chr+0x12>
   2c3f6:	687b      	ldr	r3, [r7, #4]
   2c3f8:	3301      	adds	r3, #1
   2c3fa:	607b      	str	r3, [r7, #4]
   2c3fc:	687b      	ldr	r3, [r7, #4]
   2c3fe:	781b      	ldrb	r3, [r3, #0]
   2c400:	2b00      	cmp	r3, #0
   2c402:	d005      	beq.n	2c410 <chk_chr+0x26>
   2c404:	687b      	ldr	r3, [r7, #4]
   2c406:	781b      	ldrb	r3, [r3, #0]
   2c408:	001a      	movs	r2, r3
   2c40a:	683b      	ldr	r3, [r7, #0]
   2c40c:	429a      	cmp	r2, r3
   2c40e:	d1f2      	bne.n	2c3f6 <chk_chr+0xc>
	return *str;
   2c410:	687b      	ldr	r3, [r7, #4]
   2c412:	781b      	ldrb	r3, [r3, #0]
}
   2c414:	0018      	movs	r0, r3
   2c416:	46bd      	mov	sp, r7
   2c418:	b002      	add	sp, #8
   2c41a:	bd80      	pop	{r7, pc}

0002c41c <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
   2c41c:	b590      	push	{r4, r7, lr}
   2c41e:	b085      	sub	sp, #20
   2c420:	af00      	add	r7, sp, #0
   2c422:	6078      	str	r0, [r7, #4]
   2c424:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
   2c426:	687b      	ldr	r3, [r7, #4]
   2c428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2c42a:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
   2c42c:	68fa      	ldr	r2, [r7, #12]
   2c42e:	683b      	ldr	r3, [r7, #0]
   2c430:	429a      	cmp	r2, r3
   2c432:	d04e      	beq.n	2c4d2 <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
   2c434:	687b      	ldr	r3, [r7, #4]
   2c436:	791b      	ldrb	r3, [r3, #4]
   2c438:	2b00      	cmp	r3, #0
   2c43a:	d037      	beq.n	2c4ac <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   2c43c:	687b      	ldr	r3, [r7, #4]
   2c43e:	7858      	ldrb	r0, [r3, #1]
   2c440:	687b      	ldr	r3, [r7, #4]
   2c442:	3330      	adds	r3, #48	; 0x30
   2c444:	0019      	movs	r1, r3
   2c446:	68fa      	ldr	r2, [r7, #12]
   2c448:	2301      	movs	r3, #1
   2c44a:	4c24      	ldr	r4, [pc, #144]	; (2c4dc <move_window+0xc0>)
   2c44c:	47a0      	blx	r4
   2c44e:	1e03      	subs	r3, r0, #0
   2c450:	d001      	beq.n	2c456 <move_window+0x3a>
				return FR_DISK_ERR;
   2c452:	2301      	movs	r3, #1
   2c454:	e03e      	b.n	2c4d4 <move_window+0xb8>
			fs->wflag = 0;
   2c456:	687b      	ldr	r3, [r7, #4]
   2c458:	2200      	movs	r2, #0
   2c45a:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   2c45c:	687b      	ldr	r3, [r7, #4]
   2c45e:	6a1a      	ldr	r2, [r3, #32]
   2c460:	687b      	ldr	r3, [r7, #4]
   2c462:	69db      	ldr	r3, [r3, #28]
   2c464:	18d2      	adds	r2, r2, r3
   2c466:	68fb      	ldr	r3, [r7, #12]
   2c468:	429a      	cmp	r2, r3
   2c46a:	d91f      	bls.n	2c4ac <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2c46c:	230b      	movs	r3, #11
   2c46e:	18fb      	adds	r3, r7, r3
   2c470:	687a      	ldr	r2, [r7, #4]
   2c472:	78d2      	ldrb	r2, [r2, #3]
   2c474:	701a      	strb	r2, [r3, #0]
   2c476:	e014      	b.n	2c4a2 <move_window+0x86>
					wsect += fs->fsize;
   2c478:	687b      	ldr	r3, [r7, #4]
   2c47a:	69db      	ldr	r3, [r3, #28]
   2c47c:	68fa      	ldr	r2, [r7, #12]
   2c47e:	18d3      	adds	r3, r2, r3
   2c480:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
   2c482:	687b      	ldr	r3, [r7, #4]
   2c484:	7858      	ldrb	r0, [r3, #1]
   2c486:	687b      	ldr	r3, [r7, #4]
   2c488:	3330      	adds	r3, #48	; 0x30
   2c48a:	0019      	movs	r1, r3
   2c48c:	68fa      	ldr	r2, [r7, #12]
   2c48e:	2301      	movs	r3, #1
   2c490:	4c12      	ldr	r4, [pc, #72]	; (2c4dc <move_window+0xc0>)
   2c492:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2c494:	230b      	movs	r3, #11
   2c496:	18fb      	adds	r3, r7, r3
   2c498:	781a      	ldrb	r2, [r3, #0]
   2c49a:	230b      	movs	r3, #11
   2c49c:	18fb      	adds	r3, r7, r3
   2c49e:	3a01      	subs	r2, #1
   2c4a0:	701a      	strb	r2, [r3, #0]
   2c4a2:	230b      	movs	r3, #11
   2c4a4:	18fb      	adds	r3, r7, r3
   2c4a6:	781b      	ldrb	r3, [r3, #0]
   2c4a8:	2b01      	cmp	r3, #1
   2c4aa:	d8e5      	bhi.n	2c478 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
   2c4ac:	683b      	ldr	r3, [r7, #0]
   2c4ae:	2b00      	cmp	r3, #0
   2c4b0:	d00f      	beq.n	2c4d2 <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   2c4b2:	687b      	ldr	r3, [r7, #4]
   2c4b4:	7858      	ldrb	r0, [r3, #1]
   2c4b6:	687b      	ldr	r3, [r7, #4]
   2c4b8:	3330      	adds	r3, #48	; 0x30
   2c4ba:	0019      	movs	r1, r3
   2c4bc:	683a      	ldr	r2, [r7, #0]
   2c4be:	2301      	movs	r3, #1
   2c4c0:	4c07      	ldr	r4, [pc, #28]	; (2c4e0 <move_window+0xc4>)
   2c4c2:	47a0      	blx	r4
   2c4c4:	1e03      	subs	r3, r0, #0
   2c4c6:	d001      	beq.n	2c4cc <move_window+0xb0>
				return FR_DISK_ERR;
   2c4c8:	2301      	movs	r3, #1
   2c4ca:	e003      	b.n	2c4d4 <move_window+0xb8>
			fs->winsect = sector;
   2c4cc:	687b      	ldr	r3, [r7, #4]
   2c4ce:	683a      	ldr	r2, [r7, #0]
   2c4d0:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
   2c4d2:	2300      	movs	r3, #0
}
   2c4d4:	0018      	movs	r0, r3
   2c4d6:	46bd      	mov	sp, r7
   2c4d8:	b005      	add	sp, #20
   2c4da:	bd90      	pop	{r4, r7, pc}
   2c4dc:	0002c109 	.word	0x0002c109
   2c4e0:	0002c031 	.word	0x0002c031

0002c4e4 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
   2c4e4:	b590      	push	{r4, r7, lr}
   2c4e6:	b085      	sub	sp, #20
   2c4e8:	af00      	add	r7, sp, #0
   2c4ea:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
   2c4ec:	230f      	movs	r3, #15
   2c4ee:	18fc      	adds	r4, r7, r3
   2c4f0:	687b      	ldr	r3, [r7, #4]
   2c4f2:	2100      	movs	r1, #0
   2c4f4:	0018      	movs	r0, r3
   2c4f6:	4b52      	ldr	r3, [pc, #328]	; (2c640 <sync+0x15c>)
   2c4f8:	4798      	blx	r3
   2c4fa:	0003      	movs	r3, r0
   2c4fc:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2c4fe:	230f      	movs	r3, #15
   2c500:	18fb      	adds	r3, r7, r3
   2c502:	781b      	ldrb	r3, [r3, #0]
   2c504:	2b00      	cmp	r3, #0
   2c506:	d000      	beq.n	2c50a <sync+0x26>
   2c508:	e093      	b.n	2c632 <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   2c50a:	687b      	ldr	r3, [r7, #4]
   2c50c:	781b      	ldrb	r3, [r3, #0]
   2c50e:	2b03      	cmp	r3, #3
   2c510:	d000      	beq.n	2c514 <sync+0x30>
   2c512:	e081      	b.n	2c618 <sync+0x134>
   2c514:	687b      	ldr	r3, [r7, #4]
   2c516:	795b      	ldrb	r3, [r3, #5]
   2c518:	2b00      	cmp	r3, #0
   2c51a:	d07d      	beq.n	2c618 <sync+0x134>
			fs->winsect = 0;
   2c51c:	687b      	ldr	r3, [r7, #4]
   2c51e:	2200      	movs	r2, #0
   2c520:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
   2c522:	687b      	ldr	r3, [r7, #4]
   2c524:	3330      	adds	r3, #48	; 0x30
   2c526:	0018      	movs	r0, r3
   2c528:	2380      	movs	r3, #128	; 0x80
   2c52a:	009b      	lsls	r3, r3, #2
   2c52c:	001a      	movs	r2, r3
   2c52e:	2100      	movs	r1, #0
   2c530:	4b44      	ldr	r3, [pc, #272]	; (2c644 <sync+0x160>)
   2c532:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   2c534:	687b      	ldr	r3, [r7, #4]
   2c536:	4a44      	ldr	r2, [pc, #272]	; (2c648 <sync+0x164>)
   2c538:	2155      	movs	r1, #85	; 0x55
   2c53a:	5499      	strb	r1, [r3, r2]
   2c53c:	687b      	ldr	r3, [r7, #4]
   2c53e:	4a43      	ldr	r2, [pc, #268]	; (2c64c <sync+0x168>)
   2c540:	21aa      	movs	r1, #170	; 0xaa
   2c542:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   2c544:	687b      	ldr	r3, [r7, #4]
   2c546:	2230      	movs	r2, #48	; 0x30
   2c548:	2152      	movs	r1, #82	; 0x52
   2c54a:	5499      	strb	r1, [r3, r2]
   2c54c:	687b      	ldr	r3, [r7, #4]
   2c54e:	2231      	movs	r2, #49	; 0x31
   2c550:	2152      	movs	r1, #82	; 0x52
   2c552:	5499      	strb	r1, [r3, r2]
   2c554:	687b      	ldr	r3, [r7, #4]
   2c556:	2232      	movs	r2, #50	; 0x32
   2c558:	2161      	movs	r1, #97	; 0x61
   2c55a:	5499      	strb	r1, [r3, r2]
   2c55c:	687b      	ldr	r3, [r7, #4]
   2c55e:	2233      	movs	r2, #51	; 0x33
   2c560:	2141      	movs	r1, #65	; 0x41
   2c562:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   2c564:	687a      	ldr	r2, [r7, #4]
   2c566:	2385      	movs	r3, #133	; 0x85
   2c568:	009b      	lsls	r3, r3, #2
   2c56a:	2172      	movs	r1, #114	; 0x72
   2c56c:	54d1      	strb	r1, [r2, r3]
   2c56e:	687b      	ldr	r3, [r7, #4]
   2c570:	4a37      	ldr	r2, [pc, #220]	; (2c650 <sync+0x16c>)
   2c572:	2172      	movs	r1, #114	; 0x72
   2c574:	5499      	strb	r1, [r3, r2]
   2c576:	687b      	ldr	r3, [r7, #4]
   2c578:	4a36      	ldr	r2, [pc, #216]	; (2c654 <sync+0x170>)
   2c57a:	2141      	movs	r1, #65	; 0x41
   2c57c:	5499      	strb	r1, [r3, r2]
   2c57e:	687b      	ldr	r3, [r7, #4]
   2c580:	4a35      	ldr	r2, [pc, #212]	; (2c658 <sync+0x174>)
   2c582:	2161      	movs	r1, #97	; 0x61
   2c584:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   2c586:	687b      	ldr	r3, [r7, #4]
   2c588:	691b      	ldr	r3, [r3, #16]
   2c58a:	b2d9      	uxtb	r1, r3
   2c58c:	687a      	ldr	r2, [r7, #4]
   2c58e:	2386      	movs	r3, #134	; 0x86
   2c590:	009b      	lsls	r3, r3, #2
   2c592:	54d1      	strb	r1, [r2, r3]
   2c594:	687b      	ldr	r3, [r7, #4]
   2c596:	691b      	ldr	r3, [r3, #16]
   2c598:	b29b      	uxth	r3, r3
   2c59a:	0a1b      	lsrs	r3, r3, #8
   2c59c:	b29b      	uxth	r3, r3
   2c59e:	b2d9      	uxtb	r1, r3
   2c5a0:	687b      	ldr	r3, [r7, #4]
   2c5a2:	4a2e      	ldr	r2, [pc, #184]	; (2c65c <sync+0x178>)
   2c5a4:	5499      	strb	r1, [r3, r2]
   2c5a6:	687b      	ldr	r3, [r7, #4]
   2c5a8:	691b      	ldr	r3, [r3, #16]
   2c5aa:	0c1b      	lsrs	r3, r3, #16
   2c5ac:	b2d9      	uxtb	r1, r3
   2c5ae:	687b      	ldr	r3, [r7, #4]
   2c5b0:	4a2b      	ldr	r2, [pc, #172]	; (2c660 <sync+0x17c>)
   2c5b2:	5499      	strb	r1, [r3, r2]
   2c5b4:	687b      	ldr	r3, [r7, #4]
   2c5b6:	691b      	ldr	r3, [r3, #16]
   2c5b8:	0e1b      	lsrs	r3, r3, #24
   2c5ba:	b2d9      	uxtb	r1, r3
   2c5bc:	687b      	ldr	r3, [r7, #4]
   2c5be:	4a29      	ldr	r2, [pc, #164]	; (2c664 <sync+0x180>)
   2c5c0:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   2c5c2:	687b      	ldr	r3, [r7, #4]
   2c5c4:	68db      	ldr	r3, [r3, #12]
   2c5c6:	b2d9      	uxtb	r1, r3
   2c5c8:	687a      	ldr	r2, [r7, #4]
   2c5ca:	2387      	movs	r3, #135	; 0x87
   2c5cc:	009b      	lsls	r3, r3, #2
   2c5ce:	54d1      	strb	r1, [r2, r3]
   2c5d0:	687b      	ldr	r3, [r7, #4]
   2c5d2:	68db      	ldr	r3, [r3, #12]
   2c5d4:	b29b      	uxth	r3, r3
   2c5d6:	0a1b      	lsrs	r3, r3, #8
   2c5d8:	b29b      	uxth	r3, r3
   2c5da:	b2d9      	uxtb	r1, r3
   2c5dc:	687b      	ldr	r3, [r7, #4]
   2c5de:	4a22      	ldr	r2, [pc, #136]	; (2c668 <sync+0x184>)
   2c5e0:	5499      	strb	r1, [r3, r2]
   2c5e2:	687b      	ldr	r3, [r7, #4]
   2c5e4:	68db      	ldr	r3, [r3, #12]
   2c5e6:	0c1b      	lsrs	r3, r3, #16
   2c5e8:	b2d9      	uxtb	r1, r3
   2c5ea:	687b      	ldr	r3, [r7, #4]
   2c5ec:	4a1f      	ldr	r2, [pc, #124]	; (2c66c <sync+0x188>)
   2c5ee:	5499      	strb	r1, [r3, r2]
   2c5f0:	687b      	ldr	r3, [r7, #4]
   2c5f2:	68db      	ldr	r3, [r3, #12]
   2c5f4:	0e1b      	lsrs	r3, r3, #24
   2c5f6:	b2d9      	uxtb	r1, r3
   2c5f8:	687b      	ldr	r3, [r7, #4]
   2c5fa:	4a1d      	ldr	r2, [pc, #116]	; (2c670 <sync+0x18c>)
   2c5fc:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   2c5fe:	687b      	ldr	r3, [r7, #4]
   2c600:	7858      	ldrb	r0, [r3, #1]
   2c602:	687b      	ldr	r3, [r7, #4]
   2c604:	3330      	adds	r3, #48	; 0x30
   2c606:	0019      	movs	r1, r3
   2c608:	687b      	ldr	r3, [r7, #4]
   2c60a:	695a      	ldr	r2, [r3, #20]
   2c60c:	2301      	movs	r3, #1
   2c60e:	4c19      	ldr	r4, [pc, #100]	; (2c674 <sync+0x190>)
   2c610:	47a0      	blx	r4
			fs->fsi_flag = 0;
   2c612:	687b      	ldr	r3, [r7, #4]
   2c614:	2200      	movs	r2, #0
   2c616:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   2c618:	687b      	ldr	r3, [r7, #4]
   2c61a:	785b      	ldrb	r3, [r3, #1]
   2c61c:	2200      	movs	r2, #0
   2c61e:	2100      	movs	r1, #0
   2c620:	0018      	movs	r0, r3
   2c622:	4b15      	ldr	r3, [pc, #84]	; (2c678 <sync+0x194>)
   2c624:	4798      	blx	r3
   2c626:	1e03      	subs	r3, r0, #0
   2c628:	d003      	beq.n	2c632 <sync+0x14e>
			res = FR_DISK_ERR;
   2c62a:	230f      	movs	r3, #15
   2c62c:	18fb      	adds	r3, r7, r3
   2c62e:	2201      	movs	r2, #1
   2c630:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2c632:	230f      	movs	r3, #15
   2c634:	18fb      	adds	r3, r7, r3
   2c636:	781b      	ldrb	r3, [r3, #0]
}
   2c638:	0018      	movs	r0, r3
   2c63a:	46bd      	mov	sp, r7
   2c63c:	b005      	add	sp, #20
   2c63e:	bd90      	pop	{r4, r7, pc}
   2c640:	0002c41d 	.word	0x0002c41d
   2c644:	0002c371 	.word	0x0002c371
   2c648:	0000022e 	.word	0x0000022e
   2c64c:	0000022f 	.word	0x0000022f
   2c650:	00000215 	.word	0x00000215
   2c654:	00000216 	.word	0x00000216
   2c658:	00000217 	.word	0x00000217
   2c65c:	00000219 	.word	0x00000219
   2c660:	0000021a 	.word	0x0000021a
   2c664:	0000021b 	.word	0x0000021b
   2c668:	0000021d 	.word	0x0000021d
   2c66c:	0000021e 	.word	0x0000021e
   2c670:	0000021f 	.word	0x0000021f
   2c674:	0002c109 	.word	0x0002c109
   2c678:	0002c1e1 	.word	0x0002c1e1

0002c67c <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   2c67c:	b580      	push	{r7, lr}
   2c67e:	b082      	sub	sp, #8
   2c680:	af00      	add	r7, sp, #0
   2c682:	6078      	str	r0, [r7, #4]
   2c684:	6039      	str	r1, [r7, #0]
	clst -= 2;
   2c686:	683b      	ldr	r3, [r7, #0]
   2c688:	3b02      	subs	r3, #2
   2c68a:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   2c68c:	687b      	ldr	r3, [r7, #4]
   2c68e:	699b      	ldr	r3, [r3, #24]
   2c690:	1e9a      	subs	r2, r3, #2
   2c692:	683b      	ldr	r3, [r7, #0]
   2c694:	429a      	cmp	r2, r3
   2c696:	d801      	bhi.n	2c69c <clust2sect+0x20>
   2c698:	2300      	movs	r3, #0
   2c69a:	e007      	b.n	2c6ac <clust2sect+0x30>
	return clst * fs->csize + fs->database;
   2c69c:	687b      	ldr	r3, [r7, #4]
   2c69e:	789b      	ldrb	r3, [r3, #2]
   2c6a0:	001a      	movs	r2, r3
   2c6a2:	683b      	ldr	r3, [r7, #0]
   2c6a4:	435a      	muls	r2, r3
   2c6a6:	687b      	ldr	r3, [r7, #4]
   2c6a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2c6aa:	18d3      	adds	r3, r2, r3
}
   2c6ac:	0018      	movs	r0, r3
   2c6ae:	46bd      	mov	sp, r7
   2c6b0:	b002      	add	sp, #8
   2c6b2:	bd80      	pop	{r7, pc}

0002c6b4 <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
   2c6b4:	b580      	push	{r7, lr}
   2c6b6:	b086      	sub	sp, #24
   2c6b8:	af00      	add	r7, sp, #0
   2c6ba:	6078      	str	r0, [r7, #4]
   2c6bc:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   2c6be:	683b      	ldr	r3, [r7, #0]
   2c6c0:	2b01      	cmp	r3, #1
   2c6c2:	d904      	bls.n	2c6ce <get_fat+0x1a>
   2c6c4:	687b      	ldr	r3, [r7, #4]
   2c6c6:	699a      	ldr	r2, [r3, #24]
   2c6c8:	683b      	ldr	r3, [r7, #0]
   2c6ca:	429a      	cmp	r2, r3
   2c6cc:	d801      	bhi.n	2c6d2 <get_fat+0x1e>
		return 1;
   2c6ce:	2301      	movs	r3, #1
   2c6d0:	e09f      	b.n	2c812 <get_fat+0x15e>

	switch (fs->fs_type) {
   2c6d2:	687b      	ldr	r3, [r7, #4]
   2c6d4:	781b      	ldrb	r3, [r3, #0]
   2c6d6:	2b02      	cmp	r3, #2
   2c6d8:	d048      	beq.n	2c76c <get_fat+0xb8>
   2c6da:	2b03      	cmp	r3, #3
   2c6dc:	d067      	beq.n	2c7ae <get_fat+0xfa>
   2c6de:	2b01      	cmp	r3, #1
   2c6e0:	d000      	beq.n	2c6e4 <get_fat+0x30>
   2c6e2:	e094      	b.n	2c80e <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
   2c6e4:	683b      	ldr	r3, [r7, #0]
   2c6e6:	617b      	str	r3, [r7, #20]
   2c6e8:	697b      	ldr	r3, [r7, #20]
   2c6ea:	085b      	lsrs	r3, r3, #1
   2c6ec:	697a      	ldr	r2, [r7, #20]
   2c6ee:	18d3      	adds	r3, r2, r3
   2c6f0:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2c6f2:	687b      	ldr	r3, [r7, #4]
   2c6f4:	6a1a      	ldr	r2, [r3, #32]
   2c6f6:	697b      	ldr	r3, [r7, #20]
   2c6f8:	0a5b      	lsrs	r3, r3, #9
   2c6fa:	18d2      	adds	r2, r2, r3
   2c6fc:	687b      	ldr	r3, [r7, #4]
   2c6fe:	0011      	movs	r1, r2
   2c700:	0018      	movs	r0, r3
   2c702:	4b46      	ldr	r3, [pc, #280]	; (2c81c <get_fat+0x168>)
   2c704:	4798      	blx	r3
   2c706:	1e03      	subs	r3, r0, #0
   2c708:	d000      	beq.n	2c70c <get_fat+0x58>
   2c70a:	e079      	b.n	2c800 <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
   2c70c:	697b      	ldr	r3, [r7, #20]
   2c70e:	05db      	lsls	r3, r3, #23
   2c710:	0ddb      	lsrs	r3, r3, #23
   2c712:	687a      	ldr	r2, [r7, #4]
   2c714:	2130      	movs	r1, #48	; 0x30
   2c716:	18d3      	adds	r3, r2, r3
   2c718:	185b      	adds	r3, r3, r1
   2c71a:	781b      	ldrb	r3, [r3, #0]
   2c71c:	613b      	str	r3, [r7, #16]
   2c71e:	697b      	ldr	r3, [r7, #20]
   2c720:	3301      	adds	r3, #1
   2c722:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2c724:	687b      	ldr	r3, [r7, #4]
   2c726:	6a1a      	ldr	r2, [r3, #32]
   2c728:	697b      	ldr	r3, [r7, #20]
   2c72a:	0a5b      	lsrs	r3, r3, #9
   2c72c:	18d2      	adds	r2, r2, r3
   2c72e:	687b      	ldr	r3, [r7, #4]
   2c730:	0011      	movs	r1, r2
   2c732:	0018      	movs	r0, r3
   2c734:	4b39      	ldr	r3, [pc, #228]	; (2c81c <get_fat+0x168>)
   2c736:	4798      	blx	r3
   2c738:	1e03      	subs	r3, r0, #0
   2c73a:	d163      	bne.n	2c804 <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
   2c73c:	697b      	ldr	r3, [r7, #20]
   2c73e:	05db      	lsls	r3, r3, #23
   2c740:	0ddb      	lsrs	r3, r3, #23
   2c742:	687a      	ldr	r2, [r7, #4]
   2c744:	2130      	movs	r1, #48	; 0x30
   2c746:	18d3      	adds	r3, r2, r3
   2c748:	185b      	adds	r3, r3, r1
   2c74a:	781b      	ldrb	r3, [r3, #0]
   2c74c:	021b      	lsls	r3, r3, #8
   2c74e:	001a      	movs	r2, r3
   2c750:	693b      	ldr	r3, [r7, #16]
   2c752:	4313      	orrs	r3, r2
   2c754:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   2c756:	683b      	ldr	r3, [r7, #0]
   2c758:	2201      	movs	r2, #1
   2c75a:	4013      	ands	r3, r2
   2c75c:	d002      	beq.n	2c764 <get_fat+0xb0>
   2c75e:	693b      	ldr	r3, [r7, #16]
   2c760:	091b      	lsrs	r3, r3, #4
   2c762:	e056      	b.n	2c812 <get_fat+0x15e>
   2c764:	693b      	ldr	r3, [r7, #16]
   2c766:	051b      	lsls	r3, r3, #20
   2c768:	0d1b      	lsrs	r3, r3, #20
   2c76a:	e052      	b.n	2c812 <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2c76c:	687b      	ldr	r3, [r7, #4]
   2c76e:	6a1a      	ldr	r2, [r3, #32]
   2c770:	683b      	ldr	r3, [r7, #0]
   2c772:	0a1b      	lsrs	r3, r3, #8
   2c774:	18d2      	adds	r2, r2, r3
   2c776:	687b      	ldr	r3, [r7, #4]
   2c778:	0011      	movs	r1, r2
   2c77a:	0018      	movs	r0, r3
   2c77c:	4b27      	ldr	r3, [pc, #156]	; (2c81c <get_fat+0x168>)
   2c77e:	4798      	blx	r3
   2c780:	1e03      	subs	r3, r0, #0
   2c782:	d141      	bne.n	2c808 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
   2c784:	683b      	ldr	r3, [r7, #0]
   2c786:	005a      	lsls	r2, r3, #1
   2c788:	23ff      	movs	r3, #255	; 0xff
   2c78a:	005b      	lsls	r3, r3, #1
   2c78c:	4013      	ands	r3, r2
   2c78e:	3330      	adds	r3, #48	; 0x30
   2c790:	687a      	ldr	r2, [r7, #4]
   2c792:	18d3      	adds	r3, r2, r3
   2c794:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
   2c796:	68fb      	ldr	r3, [r7, #12]
   2c798:	3301      	adds	r3, #1
   2c79a:	781b      	ldrb	r3, [r3, #0]
   2c79c:	021b      	lsls	r3, r3, #8
   2c79e:	b21a      	sxth	r2, r3
   2c7a0:	68fb      	ldr	r3, [r7, #12]
   2c7a2:	781b      	ldrb	r3, [r3, #0]
   2c7a4:	b21b      	sxth	r3, r3
   2c7a6:	4313      	orrs	r3, r2
   2c7a8:	b21b      	sxth	r3, r3
   2c7aa:	b29b      	uxth	r3, r3
   2c7ac:	e031      	b.n	2c812 <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2c7ae:	687b      	ldr	r3, [r7, #4]
   2c7b0:	6a1a      	ldr	r2, [r3, #32]
   2c7b2:	683b      	ldr	r3, [r7, #0]
   2c7b4:	09db      	lsrs	r3, r3, #7
   2c7b6:	18d2      	adds	r2, r2, r3
   2c7b8:	687b      	ldr	r3, [r7, #4]
   2c7ba:	0011      	movs	r1, r2
   2c7bc:	0018      	movs	r0, r3
   2c7be:	4b17      	ldr	r3, [pc, #92]	; (2c81c <get_fat+0x168>)
   2c7c0:	4798      	blx	r3
   2c7c2:	1e03      	subs	r3, r0, #0
   2c7c4:	d122      	bne.n	2c80c <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
   2c7c6:	683b      	ldr	r3, [r7, #0]
   2c7c8:	009a      	lsls	r2, r3, #2
   2c7ca:	23fe      	movs	r3, #254	; 0xfe
   2c7cc:	005b      	lsls	r3, r3, #1
   2c7ce:	4013      	ands	r3, r2
   2c7d0:	3330      	adds	r3, #48	; 0x30
   2c7d2:	687a      	ldr	r2, [r7, #4]
   2c7d4:	18d3      	adds	r3, r2, r3
   2c7d6:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
   2c7d8:	68fb      	ldr	r3, [r7, #12]
   2c7da:	3303      	adds	r3, #3
   2c7dc:	781b      	ldrb	r3, [r3, #0]
   2c7de:	061a      	lsls	r2, r3, #24
   2c7e0:	68fb      	ldr	r3, [r7, #12]
   2c7e2:	3302      	adds	r3, #2
   2c7e4:	781b      	ldrb	r3, [r3, #0]
   2c7e6:	041b      	lsls	r3, r3, #16
   2c7e8:	4313      	orrs	r3, r2
   2c7ea:	68fa      	ldr	r2, [r7, #12]
   2c7ec:	3201      	adds	r2, #1
   2c7ee:	7812      	ldrb	r2, [r2, #0]
   2c7f0:	0212      	lsls	r2, r2, #8
   2c7f2:	4313      	orrs	r3, r2
   2c7f4:	68fa      	ldr	r2, [r7, #12]
   2c7f6:	7812      	ldrb	r2, [r2, #0]
   2c7f8:	4313      	orrs	r3, r2
   2c7fa:	011b      	lsls	r3, r3, #4
   2c7fc:	091b      	lsrs	r3, r3, #4
   2c7fe:	e008      	b.n	2c812 <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2c800:	46c0      	nop			; (mov r8, r8)
   2c802:	e004      	b.n	2c80e <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2c804:	46c0      	nop			; (mov r8, r8)
   2c806:	e002      	b.n	2c80e <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2c808:	46c0      	nop			; (mov r8, r8)
   2c80a:	e000      	b.n	2c80e <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2c80c:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   2c80e:	2301      	movs	r3, #1
   2c810:	425b      	negs	r3, r3
}
   2c812:	0018      	movs	r0, r3
   2c814:	46bd      	mov	sp, r7
   2c816:	b006      	add	sp, #24
   2c818:	bd80      	pop	{r7, pc}
   2c81a:	46c0      	nop			; (mov r8, r8)
   2c81c:	0002c41d 	.word	0x0002c41d

0002c820 <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
   2c820:	b590      	push	{r4, r7, lr}
   2c822:	b089      	sub	sp, #36	; 0x24
   2c824:	af00      	add	r7, sp, #0
   2c826:	60f8      	str	r0, [r7, #12]
   2c828:	60b9      	str	r1, [r7, #8]
   2c82a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2c82c:	68bb      	ldr	r3, [r7, #8]
   2c82e:	2b01      	cmp	r3, #1
   2c830:	d904      	bls.n	2c83c <put_fat+0x1c>
   2c832:	68fb      	ldr	r3, [r7, #12]
   2c834:	699a      	ldr	r2, [r3, #24]
   2c836:	68bb      	ldr	r3, [r7, #8]
   2c838:	429a      	cmp	r2, r3
   2c83a:	d804      	bhi.n	2c846 <put_fat+0x26>
		res = FR_INT_ERR;
   2c83c:	231f      	movs	r3, #31
   2c83e:	18fb      	adds	r3, r7, r3
   2c840:	2202      	movs	r2, #2
   2c842:	701a      	strb	r2, [r3, #0]
   2c844:	e100      	b.n	2ca48 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
   2c846:	68fb      	ldr	r3, [r7, #12]
   2c848:	781b      	ldrb	r3, [r3, #0]
   2c84a:	2b02      	cmp	r3, #2
   2c84c:	d100      	bne.n	2c850 <put_fat+0x30>
   2c84e:	e078      	b.n	2c942 <put_fat+0x122>
   2c850:	2b03      	cmp	r3, #3
   2c852:	d100      	bne.n	2c856 <put_fat+0x36>
   2c854:	e09e      	b.n	2c994 <put_fat+0x174>
   2c856:	2b01      	cmp	r3, #1
   2c858:	d000      	beq.n	2c85c <put_fat+0x3c>
   2c85a:	e0e6      	b.n	2ca2a <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
   2c85c:	68bb      	ldr	r3, [r7, #8]
   2c85e:	61bb      	str	r3, [r7, #24]
   2c860:	69bb      	ldr	r3, [r7, #24]
   2c862:	085b      	lsrs	r3, r3, #1
   2c864:	69ba      	ldr	r2, [r7, #24]
   2c866:	18d3      	adds	r3, r2, r3
   2c868:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2c86a:	68fb      	ldr	r3, [r7, #12]
   2c86c:	6a1a      	ldr	r2, [r3, #32]
   2c86e:	69bb      	ldr	r3, [r7, #24]
   2c870:	0a5b      	lsrs	r3, r3, #9
   2c872:	18d2      	adds	r2, r2, r3
   2c874:	231f      	movs	r3, #31
   2c876:	18fc      	adds	r4, r7, r3
   2c878:	68fb      	ldr	r3, [r7, #12]
   2c87a:	0011      	movs	r1, r2
   2c87c:	0018      	movs	r0, r3
   2c87e:	4b76      	ldr	r3, [pc, #472]	; (2ca58 <put_fat+0x238>)
   2c880:	4798      	blx	r3
   2c882:	0003      	movs	r3, r0
   2c884:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c886:	231f      	movs	r3, #31
   2c888:	18fb      	adds	r3, r7, r3
   2c88a:	781b      	ldrb	r3, [r3, #0]
   2c88c:	2b00      	cmp	r3, #0
   2c88e:	d000      	beq.n	2c892 <put_fat+0x72>
   2c890:	e0d0      	b.n	2ca34 <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
   2c892:	69bb      	ldr	r3, [r7, #24]
   2c894:	05db      	lsls	r3, r3, #23
   2c896:	0ddb      	lsrs	r3, r3, #23
   2c898:	3330      	adds	r3, #48	; 0x30
   2c89a:	68fa      	ldr	r2, [r7, #12]
   2c89c:	18d3      	adds	r3, r2, r3
   2c89e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   2c8a0:	68bb      	ldr	r3, [r7, #8]
   2c8a2:	2201      	movs	r2, #1
   2c8a4:	4013      	ands	r3, r2
   2c8a6:	d00d      	beq.n	2c8c4 <put_fat+0xa4>
   2c8a8:	697b      	ldr	r3, [r7, #20]
   2c8aa:	781b      	ldrb	r3, [r3, #0]
   2c8ac:	b25b      	sxtb	r3, r3
   2c8ae:	220f      	movs	r2, #15
   2c8b0:	4013      	ands	r3, r2
   2c8b2:	b25a      	sxtb	r2, r3
   2c8b4:	687b      	ldr	r3, [r7, #4]
   2c8b6:	b2db      	uxtb	r3, r3
   2c8b8:	011b      	lsls	r3, r3, #4
   2c8ba:	b25b      	sxtb	r3, r3
   2c8bc:	4313      	orrs	r3, r2
   2c8be:	b25b      	sxtb	r3, r3
   2c8c0:	b2db      	uxtb	r3, r3
   2c8c2:	e001      	b.n	2c8c8 <put_fat+0xa8>
   2c8c4:	687b      	ldr	r3, [r7, #4]
   2c8c6:	b2db      	uxtb	r3, r3
   2c8c8:	697a      	ldr	r2, [r7, #20]
   2c8ca:	7013      	strb	r3, [r2, #0]
			bc++;
   2c8cc:	69bb      	ldr	r3, [r7, #24]
   2c8ce:	3301      	adds	r3, #1
   2c8d0:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
   2c8d2:	68fb      	ldr	r3, [r7, #12]
   2c8d4:	2201      	movs	r2, #1
   2c8d6:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2c8d8:	68fb      	ldr	r3, [r7, #12]
   2c8da:	6a1a      	ldr	r2, [r3, #32]
   2c8dc:	69bb      	ldr	r3, [r7, #24]
   2c8de:	0a5b      	lsrs	r3, r3, #9
   2c8e0:	18d2      	adds	r2, r2, r3
   2c8e2:	231f      	movs	r3, #31
   2c8e4:	18fc      	adds	r4, r7, r3
   2c8e6:	68fb      	ldr	r3, [r7, #12]
   2c8e8:	0011      	movs	r1, r2
   2c8ea:	0018      	movs	r0, r3
   2c8ec:	4b5a      	ldr	r3, [pc, #360]	; (2ca58 <put_fat+0x238>)
   2c8ee:	4798      	blx	r3
   2c8f0:	0003      	movs	r3, r0
   2c8f2:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c8f4:	231f      	movs	r3, #31
   2c8f6:	18fb      	adds	r3, r7, r3
   2c8f8:	781b      	ldrb	r3, [r3, #0]
   2c8fa:	2b00      	cmp	r3, #0
   2c8fc:	d000      	beq.n	2c900 <put_fat+0xe0>
   2c8fe:	e09b      	b.n	2ca38 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
   2c900:	69bb      	ldr	r3, [r7, #24]
   2c902:	05db      	lsls	r3, r3, #23
   2c904:	0ddb      	lsrs	r3, r3, #23
   2c906:	3330      	adds	r3, #48	; 0x30
   2c908:	68fa      	ldr	r2, [r7, #12]
   2c90a:	18d3      	adds	r3, r2, r3
   2c90c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   2c90e:	68bb      	ldr	r3, [r7, #8]
   2c910:	2201      	movs	r2, #1
   2c912:	4013      	ands	r3, r2
   2c914:	d003      	beq.n	2c91e <put_fat+0xfe>
   2c916:	687b      	ldr	r3, [r7, #4]
   2c918:	091b      	lsrs	r3, r3, #4
   2c91a:	b2db      	uxtb	r3, r3
   2c91c:	e00e      	b.n	2c93c <put_fat+0x11c>
   2c91e:	697b      	ldr	r3, [r7, #20]
   2c920:	781b      	ldrb	r3, [r3, #0]
   2c922:	b25b      	sxtb	r3, r3
   2c924:	220f      	movs	r2, #15
   2c926:	4393      	bics	r3, r2
   2c928:	b25a      	sxtb	r2, r3
   2c92a:	687b      	ldr	r3, [r7, #4]
   2c92c:	0a1b      	lsrs	r3, r3, #8
   2c92e:	b25b      	sxtb	r3, r3
   2c930:	210f      	movs	r1, #15
   2c932:	400b      	ands	r3, r1
   2c934:	b25b      	sxtb	r3, r3
   2c936:	4313      	orrs	r3, r2
   2c938:	b25b      	sxtb	r3, r3
   2c93a:	b2db      	uxtb	r3, r3
   2c93c:	697a      	ldr	r2, [r7, #20]
   2c93e:	7013      	strb	r3, [r2, #0]
			break;
   2c940:	e07f      	b.n	2ca42 <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   2c942:	68fb      	ldr	r3, [r7, #12]
   2c944:	6a1a      	ldr	r2, [r3, #32]
   2c946:	68bb      	ldr	r3, [r7, #8]
   2c948:	0a1b      	lsrs	r3, r3, #8
   2c94a:	18d2      	adds	r2, r2, r3
   2c94c:	231f      	movs	r3, #31
   2c94e:	18fc      	adds	r4, r7, r3
   2c950:	68fb      	ldr	r3, [r7, #12]
   2c952:	0011      	movs	r1, r2
   2c954:	0018      	movs	r0, r3
   2c956:	4b40      	ldr	r3, [pc, #256]	; (2ca58 <put_fat+0x238>)
   2c958:	4798      	blx	r3
   2c95a:	0003      	movs	r3, r0
   2c95c:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c95e:	231f      	movs	r3, #31
   2c960:	18fb      	adds	r3, r7, r3
   2c962:	781b      	ldrb	r3, [r3, #0]
   2c964:	2b00      	cmp	r3, #0
   2c966:	d169      	bne.n	2ca3c <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
   2c968:	68bb      	ldr	r3, [r7, #8]
   2c96a:	005a      	lsls	r2, r3, #1
   2c96c:	23ff      	movs	r3, #255	; 0xff
   2c96e:	005b      	lsls	r3, r3, #1
   2c970:	4013      	ands	r3, r2
   2c972:	3330      	adds	r3, #48	; 0x30
   2c974:	68fa      	ldr	r2, [r7, #12]
   2c976:	18d3      	adds	r3, r2, r3
   2c978:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
   2c97a:	687b      	ldr	r3, [r7, #4]
   2c97c:	b2da      	uxtb	r2, r3
   2c97e:	697b      	ldr	r3, [r7, #20]
   2c980:	701a      	strb	r2, [r3, #0]
   2c982:	697b      	ldr	r3, [r7, #20]
   2c984:	3301      	adds	r3, #1
   2c986:	687a      	ldr	r2, [r7, #4]
   2c988:	b292      	uxth	r2, r2
   2c98a:	0a12      	lsrs	r2, r2, #8
   2c98c:	b292      	uxth	r2, r2
   2c98e:	b2d2      	uxtb	r2, r2
   2c990:	701a      	strb	r2, [r3, #0]
			break;
   2c992:	e056      	b.n	2ca42 <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   2c994:	68fb      	ldr	r3, [r7, #12]
   2c996:	6a1a      	ldr	r2, [r3, #32]
   2c998:	68bb      	ldr	r3, [r7, #8]
   2c99a:	09db      	lsrs	r3, r3, #7
   2c99c:	18d2      	adds	r2, r2, r3
   2c99e:	231f      	movs	r3, #31
   2c9a0:	18fc      	adds	r4, r7, r3
   2c9a2:	68fb      	ldr	r3, [r7, #12]
   2c9a4:	0011      	movs	r1, r2
   2c9a6:	0018      	movs	r0, r3
   2c9a8:	4b2b      	ldr	r3, [pc, #172]	; (2ca58 <put_fat+0x238>)
   2c9aa:	4798      	blx	r3
   2c9ac:	0003      	movs	r3, r0
   2c9ae:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2c9b0:	231f      	movs	r3, #31
   2c9b2:	18fb      	adds	r3, r7, r3
   2c9b4:	781b      	ldrb	r3, [r3, #0]
   2c9b6:	2b00      	cmp	r3, #0
   2c9b8:	d142      	bne.n	2ca40 <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
   2c9ba:	68bb      	ldr	r3, [r7, #8]
   2c9bc:	009a      	lsls	r2, r3, #2
   2c9be:	23fe      	movs	r3, #254	; 0xfe
   2c9c0:	005b      	lsls	r3, r3, #1
   2c9c2:	4013      	ands	r3, r2
   2c9c4:	3330      	adds	r3, #48	; 0x30
   2c9c6:	68fa      	ldr	r2, [r7, #12]
   2c9c8:	18d3      	adds	r3, r2, r3
   2c9ca:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
   2c9cc:	697b      	ldr	r3, [r7, #20]
   2c9ce:	3303      	adds	r3, #3
   2c9d0:	781b      	ldrb	r3, [r3, #0]
   2c9d2:	061a      	lsls	r2, r3, #24
   2c9d4:	697b      	ldr	r3, [r7, #20]
   2c9d6:	3302      	adds	r3, #2
   2c9d8:	781b      	ldrb	r3, [r3, #0]
   2c9da:	041b      	lsls	r3, r3, #16
   2c9dc:	4313      	orrs	r3, r2
   2c9de:	697a      	ldr	r2, [r7, #20]
   2c9e0:	3201      	adds	r2, #1
   2c9e2:	7812      	ldrb	r2, [r2, #0]
   2c9e4:	0212      	lsls	r2, r2, #8
   2c9e6:	4313      	orrs	r3, r2
   2c9e8:	697a      	ldr	r2, [r7, #20]
   2c9ea:	7812      	ldrb	r2, [r2, #0]
   2c9ec:	4313      	orrs	r3, r2
   2c9ee:	0f1b      	lsrs	r3, r3, #28
   2c9f0:	071b      	lsls	r3, r3, #28
   2c9f2:	687a      	ldr	r2, [r7, #4]
   2c9f4:	4313      	orrs	r3, r2
   2c9f6:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
   2c9f8:	687b      	ldr	r3, [r7, #4]
   2c9fa:	b2da      	uxtb	r2, r3
   2c9fc:	697b      	ldr	r3, [r7, #20]
   2c9fe:	701a      	strb	r2, [r3, #0]
   2ca00:	697b      	ldr	r3, [r7, #20]
   2ca02:	3301      	adds	r3, #1
   2ca04:	687a      	ldr	r2, [r7, #4]
   2ca06:	b292      	uxth	r2, r2
   2ca08:	0a12      	lsrs	r2, r2, #8
   2ca0a:	b292      	uxth	r2, r2
   2ca0c:	b2d2      	uxtb	r2, r2
   2ca0e:	701a      	strb	r2, [r3, #0]
   2ca10:	697b      	ldr	r3, [r7, #20]
   2ca12:	3302      	adds	r3, #2
   2ca14:	687a      	ldr	r2, [r7, #4]
   2ca16:	0c12      	lsrs	r2, r2, #16
   2ca18:	b2d2      	uxtb	r2, r2
   2ca1a:	701a      	strb	r2, [r3, #0]
   2ca1c:	697b      	ldr	r3, [r7, #20]
   2ca1e:	3303      	adds	r3, #3
   2ca20:	687a      	ldr	r2, [r7, #4]
   2ca22:	0e12      	lsrs	r2, r2, #24
   2ca24:	b2d2      	uxtb	r2, r2
   2ca26:	701a      	strb	r2, [r3, #0]
			break;
   2ca28:	e00b      	b.n	2ca42 <put_fat+0x222>

		default :
			res = FR_INT_ERR;
   2ca2a:	231f      	movs	r3, #31
   2ca2c:	18fb      	adds	r3, r7, r3
   2ca2e:	2202      	movs	r2, #2
   2ca30:	701a      	strb	r2, [r3, #0]
   2ca32:	e006      	b.n	2ca42 <put_fat+0x222>
			if (res != FR_OK) break;
   2ca34:	46c0      	nop			; (mov r8, r8)
   2ca36:	e004      	b.n	2ca42 <put_fat+0x222>
			if (res != FR_OK) break;
   2ca38:	46c0      	nop			; (mov r8, r8)
   2ca3a:	e002      	b.n	2ca42 <put_fat+0x222>
			if (res != FR_OK) break;
   2ca3c:	46c0      	nop			; (mov r8, r8)
   2ca3e:	e000      	b.n	2ca42 <put_fat+0x222>
			if (res != FR_OK) break;
   2ca40:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
   2ca42:	68fb      	ldr	r3, [r7, #12]
   2ca44:	2201      	movs	r2, #1
   2ca46:	711a      	strb	r2, [r3, #4]
	}

	return res;
   2ca48:	231f      	movs	r3, #31
   2ca4a:	18fb      	adds	r3, r7, r3
   2ca4c:	781b      	ldrb	r3, [r3, #0]
}
   2ca4e:	0018      	movs	r0, r3
   2ca50:	46bd      	mov	sp, r7
   2ca52:	b009      	add	sp, #36	; 0x24
   2ca54:	bd90      	pop	{r4, r7, pc}
   2ca56:	46c0      	nop			; (mov r8, r8)
   2ca58:	0002c41d 	.word	0x0002c41d

0002ca5c <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
   2ca5c:	b590      	push	{r4, r7, lr}
   2ca5e:	b085      	sub	sp, #20
   2ca60:	af00      	add	r7, sp, #0
   2ca62:	6078      	str	r0, [r7, #4]
   2ca64:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2ca66:	683b      	ldr	r3, [r7, #0]
   2ca68:	2b01      	cmp	r3, #1
   2ca6a:	d904      	bls.n	2ca76 <remove_chain+0x1a>
   2ca6c:	687b      	ldr	r3, [r7, #4]
   2ca6e:	699a      	ldr	r2, [r3, #24]
   2ca70:	683b      	ldr	r3, [r7, #0]
   2ca72:	429a      	cmp	r2, r3
   2ca74:	d804      	bhi.n	2ca80 <remove_chain+0x24>
		res = FR_INT_ERR;
   2ca76:	230f      	movs	r3, #15
   2ca78:	18fb      	adds	r3, r7, r3
   2ca7a:	2202      	movs	r2, #2
   2ca7c:	701a      	strb	r2, [r3, #0]
   2ca7e:	e045      	b.n	2cb0c <remove_chain+0xb0>

	} else {
		res = FR_OK;
   2ca80:	230f      	movs	r3, #15
   2ca82:	18fb      	adds	r3, r7, r3
   2ca84:	2200      	movs	r2, #0
   2ca86:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2ca88:	e037      	b.n	2cafa <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   2ca8a:	683a      	ldr	r2, [r7, #0]
   2ca8c:	687b      	ldr	r3, [r7, #4]
   2ca8e:	0011      	movs	r1, r2
   2ca90:	0018      	movs	r0, r3
   2ca92:	4b22      	ldr	r3, [pc, #136]	; (2cb1c <remove_chain+0xc0>)
   2ca94:	4798      	blx	r3
   2ca96:	0003      	movs	r3, r0
   2ca98:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
   2ca9a:	68bb      	ldr	r3, [r7, #8]
   2ca9c:	2b00      	cmp	r3, #0
   2ca9e:	d032      	beq.n	2cb06 <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   2caa0:	68bb      	ldr	r3, [r7, #8]
   2caa2:	2b01      	cmp	r3, #1
   2caa4:	d104      	bne.n	2cab0 <remove_chain+0x54>
   2caa6:	230f      	movs	r3, #15
   2caa8:	18fb      	adds	r3, r7, r3
   2caaa:	2202      	movs	r2, #2
   2caac:	701a      	strb	r2, [r3, #0]
   2caae:	e02d      	b.n	2cb0c <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   2cab0:	68bb      	ldr	r3, [r7, #8]
   2cab2:	3301      	adds	r3, #1
   2cab4:	d104      	bne.n	2cac0 <remove_chain+0x64>
   2cab6:	230f      	movs	r3, #15
   2cab8:	18fb      	adds	r3, r7, r3
   2caba:	2201      	movs	r2, #1
   2cabc:	701a      	strb	r2, [r3, #0]
   2cabe:	e025      	b.n	2cb0c <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   2cac0:	230f      	movs	r3, #15
   2cac2:	18fc      	adds	r4, r7, r3
   2cac4:	6839      	ldr	r1, [r7, #0]
   2cac6:	687b      	ldr	r3, [r7, #4]
   2cac8:	2200      	movs	r2, #0
   2caca:	0018      	movs	r0, r3
   2cacc:	4b14      	ldr	r3, [pc, #80]	; (2cb20 <remove_chain+0xc4>)
   2cace:	4798      	blx	r3
   2cad0:	0003      	movs	r3, r0
   2cad2:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2cad4:	230f      	movs	r3, #15
   2cad6:	18fb      	adds	r3, r7, r3
   2cad8:	781b      	ldrb	r3, [r3, #0]
   2cada:	2b00      	cmp	r3, #0
   2cadc:	d115      	bne.n	2cb0a <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   2cade:	687b      	ldr	r3, [r7, #4]
   2cae0:	691b      	ldr	r3, [r3, #16]
   2cae2:	3301      	adds	r3, #1
   2cae4:	d007      	beq.n	2caf6 <remove_chain+0x9a>
				fs->free_clust++;
   2cae6:	687b      	ldr	r3, [r7, #4]
   2cae8:	691b      	ldr	r3, [r3, #16]
   2caea:	1c5a      	adds	r2, r3, #1
   2caec:	687b      	ldr	r3, [r7, #4]
   2caee:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
   2caf0:	687b      	ldr	r3, [r7, #4]
   2caf2:	2201      	movs	r2, #1
   2caf4:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
   2caf6:	68bb      	ldr	r3, [r7, #8]
   2caf8:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2cafa:	687b      	ldr	r3, [r7, #4]
   2cafc:	699a      	ldr	r2, [r3, #24]
   2cafe:	683b      	ldr	r3, [r7, #0]
   2cb00:	429a      	cmp	r2, r3
   2cb02:	d8c2      	bhi.n	2ca8a <remove_chain+0x2e>
   2cb04:	e002      	b.n	2cb0c <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
   2cb06:	46c0      	nop			; (mov r8, r8)
   2cb08:	e000      	b.n	2cb0c <remove_chain+0xb0>
			if (res != FR_OK) break;
   2cb0a:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2cb0c:	230f      	movs	r3, #15
   2cb0e:	18fb      	adds	r3, r7, r3
   2cb10:	781b      	ldrb	r3, [r3, #0]
}
   2cb12:	0018      	movs	r0, r3
   2cb14:	46bd      	mov	sp, r7
   2cb16:	b005      	add	sp, #20
   2cb18:	bd90      	pop	{r4, r7, pc}
   2cb1a:	46c0      	nop			; (mov r8, r8)
   2cb1c:	0002c6b5 	.word	0x0002c6b5
   2cb20:	0002c821 	.word	0x0002c821

0002cb24 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
   2cb24:	b590      	push	{r4, r7, lr}
   2cb26:	b087      	sub	sp, #28
   2cb28:	af00      	add	r7, sp, #0
   2cb2a:	6078      	str	r0, [r7, #4]
   2cb2c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
   2cb2e:	683b      	ldr	r3, [r7, #0]
   2cb30:	2b00      	cmp	r3, #0
   2cb32:	d10d      	bne.n	2cb50 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
   2cb34:	687b      	ldr	r3, [r7, #4]
   2cb36:	68db      	ldr	r3, [r3, #12]
   2cb38:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   2cb3a:	693b      	ldr	r3, [r7, #16]
   2cb3c:	2b00      	cmp	r3, #0
   2cb3e:	d004      	beq.n	2cb4a <create_chain+0x26>
   2cb40:	687b      	ldr	r3, [r7, #4]
   2cb42:	699a      	ldr	r2, [r3, #24]
   2cb44:	693b      	ldr	r3, [r7, #16]
   2cb46:	429a      	cmp	r2, r3
   2cb48:	d818      	bhi.n	2cb7c <create_chain+0x58>
   2cb4a:	2301      	movs	r3, #1
   2cb4c:	613b      	str	r3, [r7, #16]
   2cb4e:	e015      	b.n	2cb7c <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
   2cb50:	683a      	ldr	r2, [r7, #0]
   2cb52:	687b      	ldr	r3, [r7, #4]
   2cb54:	0011      	movs	r1, r2
   2cb56:	0018      	movs	r0, r3
   2cb58:	4b3e      	ldr	r3, [pc, #248]	; (2cc54 <create_chain+0x130>)
   2cb5a:	4798      	blx	r3
   2cb5c:	0003      	movs	r3, r0
   2cb5e:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
   2cb60:	68bb      	ldr	r3, [r7, #8]
   2cb62:	2b01      	cmp	r3, #1
   2cb64:	d801      	bhi.n	2cb6a <create_chain+0x46>
   2cb66:	2301      	movs	r3, #1
   2cb68:	e070      	b.n	2cc4c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   2cb6a:	687b      	ldr	r3, [r7, #4]
   2cb6c:	699a      	ldr	r2, [r3, #24]
   2cb6e:	68bb      	ldr	r3, [r7, #8]
   2cb70:	429a      	cmp	r2, r3
   2cb72:	d901      	bls.n	2cb78 <create_chain+0x54>
   2cb74:	68bb      	ldr	r3, [r7, #8]
   2cb76:	e069      	b.n	2cc4c <create_chain+0x128>
		scl = clst;
   2cb78:	683b      	ldr	r3, [r7, #0]
   2cb7a:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
   2cb7c:	693b      	ldr	r3, [r7, #16]
   2cb7e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
   2cb80:	697b      	ldr	r3, [r7, #20]
   2cb82:	3301      	adds	r3, #1
   2cb84:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   2cb86:	687b      	ldr	r3, [r7, #4]
   2cb88:	699a      	ldr	r2, [r3, #24]
   2cb8a:	697b      	ldr	r3, [r7, #20]
   2cb8c:	429a      	cmp	r2, r3
   2cb8e:	d807      	bhi.n	2cba0 <create_chain+0x7c>
			ncl = 2;
   2cb90:	2302      	movs	r3, #2
   2cb92:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
   2cb94:	697a      	ldr	r2, [r7, #20]
   2cb96:	693b      	ldr	r3, [r7, #16]
   2cb98:	429a      	cmp	r2, r3
   2cb9a:	d901      	bls.n	2cba0 <create_chain+0x7c>
   2cb9c:	2300      	movs	r3, #0
   2cb9e:	e055      	b.n	2cc4c <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   2cba0:	697a      	ldr	r2, [r7, #20]
   2cba2:	687b      	ldr	r3, [r7, #4]
   2cba4:	0011      	movs	r1, r2
   2cba6:	0018      	movs	r0, r3
   2cba8:	4b2a      	ldr	r3, [pc, #168]	; (2cc54 <create_chain+0x130>)
   2cbaa:	4798      	blx	r3
   2cbac:	0003      	movs	r3, r0
   2cbae:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
   2cbb0:	68bb      	ldr	r3, [r7, #8]
   2cbb2:	2b00      	cmp	r3, #0
   2cbb4:	d00d      	beq.n	2cbd2 <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   2cbb6:	68bb      	ldr	r3, [r7, #8]
   2cbb8:	3301      	adds	r3, #1
   2cbba:	d002      	beq.n	2cbc2 <create_chain+0x9e>
   2cbbc:	68bb      	ldr	r3, [r7, #8]
   2cbbe:	2b01      	cmp	r3, #1
   2cbc0:	d101      	bne.n	2cbc6 <create_chain+0xa2>
			return cs;
   2cbc2:	68bb      	ldr	r3, [r7, #8]
   2cbc4:	e042      	b.n	2cc4c <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
   2cbc6:	697a      	ldr	r2, [r7, #20]
   2cbc8:	693b      	ldr	r3, [r7, #16]
   2cbca:	429a      	cmp	r2, r3
   2cbcc:	d1d8      	bne.n	2cb80 <create_chain+0x5c>
   2cbce:	2300      	movs	r3, #0
   2cbd0:	e03c      	b.n	2cc4c <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
   2cbd2:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   2cbd4:	230f      	movs	r3, #15
   2cbd6:	18fc      	adds	r4, r7, r3
   2cbd8:	4a1f      	ldr	r2, [pc, #124]	; (2cc58 <create_chain+0x134>)
   2cbda:	6979      	ldr	r1, [r7, #20]
   2cbdc:	687b      	ldr	r3, [r7, #4]
   2cbde:	0018      	movs	r0, r3
   2cbe0:	4b1e      	ldr	r3, [pc, #120]	; (2cc5c <create_chain+0x138>)
   2cbe2:	4798      	blx	r3
   2cbe4:	0003      	movs	r3, r0
   2cbe6:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
   2cbe8:	230f      	movs	r3, #15
   2cbea:	18fb      	adds	r3, r7, r3
   2cbec:	781b      	ldrb	r3, [r3, #0]
   2cbee:	2b00      	cmp	r3, #0
   2cbf0:	d10c      	bne.n	2cc0c <create_chain+0xe8>
   2cbf2:	683b      	ldr	r3, [r7, #0]
   2cbf4:	2b00      	cmp	r3, #0
   2cbf6:	d009      	beq.n	2cc0c <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   2cbf8:	230f      	movs	r3, #15
   2cbfa:	18fc      	adds	r4, r7, r3
   2cbfc:	697a      	ldr	r2, [r7, #20]
   2cbfe:	6839      	ldr	r1, [r7, #0]
   2cc00:	687b      	ldr	r3, [r7, #4]
   2cc02:	0018      	movs	r0, r3
   2cc04:	4b15      	ldr	r3, [pc, #84]	; (2cc5c <create_chain+0x138>)
   2cc06:	4798      	blx	r3
   2cc08:	0003      	movs	r3, r0
   2cc0a:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
   2cc0c:	230f      	movs	r3, #15
   2cc0e:	18fb      	adds	r3, r7, r3
   2cc10:	781b      	ldrb	r3, [r3, #0]
   2cc12:	2b00      	cmp	r3, #0
   2cc14:	d10f      	bne.n	2cc36 <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
   2cc16:	687b      	ldr	r3, [r7, #4]
   2cc18:	697a      	ldr	r2, [r7, #20]
   2cc1a:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   2cc1c:	687b      	ldr	r3, [r7, #4]
   2cc1e:	691b      	ldr	r3, [r3, #16]
   2cc20:	3301      	adds	r3, #1
   2cc22:	d012      	beq.n	2cc4a <create_chain+0x126>
			fs->free_clust--;
   2cc24:	687b      	ldr	r3, [r7, #4]
   2cc26:	691b      	ldr	r3, [r3, #16]
   2cc28:	1e5a      	subs	r2, r3, #1
   2cc2a:	687b      	ldr	r3, [r7, #4]
   2cc2c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
   2cc2e:	687b      	ldr	r3, [r7, #4]
   2cc30:	2201      	movs	r2, #1
   2cc32:	715a      	strb	r2, [r3, #5]
   2cc34:	e009      	b.n	2cc4a <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   2cc36:	230f      	movs	r3, #15
   2cc38:	18fb      	adds	r3, r7, r3
   2cc3a:	781b      	ldrb	r3, [r3, #0]
   2cc3c:	2b01      	cmp	r3, #1
   2cc3e:	d102      	bne.n	2cc46 <create_chain+0x122>
   2cc40:	2301      	movs	r3, #1
   2cc42:	425b      	negs	r3, r3
   2cc44:	e000      	b.n	2cc48 <create_chain+0x124>
   2cc46:	2301      	movs	r3, #1
   2cc48:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
   2cc4a:	697b      	ldr	r3, [r7, #20]
}
   2cc4c:	0018      	movs	r0, r3
   2cc4e:	46bd      	mov	sp, r7
   2cc50:	b007      	add	sp, #28
   2cc52:	bd90      	pop	{r4, r7, pc}
   2cc54:	0002c6b5 	.word	0x0002c6b5
   2cc58:	0fffffff 	.word	0x0fffffff
   2cc5c:	0002c821 	.word	0x0002c821

0002cc60 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
   2cc60:	b580      	push	{r7, lr}
   2cc62:	b084      	sub	sp, #16
   2cc64:	af00      	add	r7, sp, #0
   2cc66:	6078      	str	r0, [r7, #4]
   2cc68:	000a      	movs	r2, r1
   2cc6a:	1cbb      	adds	r3, r7, #2
   2cc6c:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
   2cc6e:	687b      	ldr	r3, [r7, #4]
   2cc70:	1cba      	adds	r2, r7, #2
   2cc72:	8812      	ldrh	r2, [r2, #0]
   2cc74:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
   2cc76:	687b      	ldr	r3, [r7, #4]
   2cc78:	689b      	ldr	r3, [r3, #8]
   2cc7a:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   2cc7c:	68fb      	ldr	r3, [r7, #12]
   2cc7e:	2b01      	cmp	r3, #1
   2cc80:	d005      	beq.n	2cc8e <dir_sdi+0x2e>
   2cc82:	687b      	ldr	r3, [r7, #4]
   2cc84:	681b      	ldr	r3, [r3, #0]
   2cc86:	699a      	ldr	r2, [r3, #24]
   2cc88:	68fb      	ldr	r3, [r7, #12]
   2cc8a:	429a      	cmp	r2, r3
   2cc8c:	d801      	bhi.n	2cc92 <dir_sdi+0x32>
		return FR_INT_ERR;
   2cc8e:	2302      	movs	r3, #2
   2cc90:	e075      	b.n	2cd7e <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   2cc92:	68fb      	ldr	r3, [r7, #12]
   2cc94:	2b00      	cmp	r3, #0
   2cc96:	d108      	bne.n	2ccaa <dir_sdi+0x4a>
   2cc98:	687b      	ldr	r3, [r7, #4]
   2cc9a:	681b      	ldr	r3, [r3, #0]
   2cc9c:	781b      	ldrb	r3, [r3, #0]
   2cc9e:	2b03      	cmp	r3, #3
   2cca0:	d103      	bne.n	2ccaa <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
   2cca2:	687b      	ldr	r3, [r7, #4]
   2cca4:	681b      	ldr	r3, [r3, #0]
   2cca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2cca8:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   2ccaa:	68fb      	ldr	r3, [r7, #12]
   2ccac:	2b00      	cmp	r3, #0
   2ccae:	d116      	bne.n	2ccde <dir_sdi+0x7e>
		dj->clust = clst;
   2ccb0:	687b      	ldr	r3, [r7, #4]
   2ccb2:	68fa      	ldr	r2, [r7, #12]
   2ccb4:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   2ccb6:	687b      	ldr	r3, [r7, #4]
   2ccb8:	681b      	ldr	r3, [r3, #0]
   2ccba:	891b      	ldrh	r3, [r3, #8]
   2ccbc:	1cba      	adds	r2, r7, #2
   2ccbe:	8812      	ldrh	r2, [r2, #0]
   2ccc0:	429a      	cmp	r2, r3
   2ccc2:	d301      	bcc.n	2ccc8 <dir_sdi+0x68>
			return FR_INT_ERR;
   2ccc4:	2302      	movs	r3, #2
   2ccc6:	e05a      	b.n	2cd7e <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2ccc8:	687b      	ldr	r3, [r7, #4]
   2ccca:	681b      	ldr	r3, [r3, #0]
   2cccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2ccce:	1cba      	adds	r2, r7, #2
   2ccd0:	8812      	ldrh	r2, [r2, #0]
   2ccd2:	0912      	lsrs	r2, r2, #4
   2ccd4:	b292      	uxth	r2, r2
   2ccd6:	189a      	adds	r2, r3, r2
   2ccd8:	687b      	ldr	r3, [r7, #4]
   2ccda:	611a      	str	r2, [r3, #16]
   2ccdc:	e042      	b.n	2cd64 <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   2ccde:	687b      	ldr	r3, [r7, #4]
   2cce0:	681b      	ldr	r3, [r3, #0]
   2cce2:	789b      	ldrb	r3, [r3, #2]
   2cce4:	b29a      	uxth	r2, r3
   2cce6:	230a      	movs	r3, #10
   2cce8:	18fb      	adds	r3, r7, r3
   2ccea:	0112      	lsls	r2, r2, #4
   2ccec:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2ccee:	e020      	b.n	2cd32 <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   2ccf0:	687b      	ldr	r3, [r7, #4]
   2ccf2:	681b      	ldr	r3, [r3, #0]
   2ccf4:	68fa      	ldr	r2, [r7, #12]
   2ccf6:	0011      	movs	r1, r2
   2ccf8:	0018      	movs	r0, r3
   2ccfa:	4b23      	ldr	r3, [pc, #140]	; (2cd88 <dir_sdi+0x128>)
   2ccfc:	4798      	blx	r3
   2ccfe:	0003      	movs	r3, r0
   2cd00:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   2cd02:	68fb      	ldr	r3, [r7, #12]
   2cd04:	3301      	adds	r3, #1
   2cd06:	d101      	bne.n	2cd0c <dir_sdi+0xac>
   2cd08:	2301      	movs	r3, #1
   2cd0a:	e038      	b.n	2cd7e <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   2cd0c:	68fb      	ldr	r3, [r7, #12]
   2cd0e:	2b01      	cmp	r3, #1
   2cd10:	d905      	bls.n	2cd1e <dir_sdi+0xbe>
   2cd12:	687b      	ldr	r3, [r7, #4]
   2cd14:	681b      	ldr	r3, [r3, #0]
   2cd16:	699a      	ldr	r2, [r3, #24]
   2cd18:	68fb      	ldr	r3, [r7, #12]
   2cd1a:	429a      	cmp	r2, r3
   2cd1c:	d801      	bhi.n	2cd22 <dir_sdi+0xc2>
				return FR_INT_ERR;
   2cd1e:	2302      	movs	r3, #2
   2cd20:	e02d      	b.n	2cd7e <dir_sdi+0x11e>
			idx -= ic;
   2cd22:	1cbb      	adds	r3, r7, #2
   2cd24:	1cb9      	adds	r1, r7, #2
   2cd26:	220a      	movs	r2, #10
   2cd28:	18ba      	adds	r2, r7, r2
   2cd2a:	8809      	ldrh	r1, [r1, #0]
   2cd2c:	8812      	ldrh	r2, [r2, #0]
   2cd2e:	1a8a      	subs	r2, r1, r2
   2cd30:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2cd32:	1cba      	adds	r2, r7, #2
   2cd34:	230a      	movs	r3, #10
   2cd36:	18fb      	adds	r3, r7, r3
   2cd38:	8812      	ldrh	r2, [r2, #0]
   2cd3a:	881b      	ldrh	r3, [r3, #0]
   2cd3c:	429a      	cmp	r2, r3
   2cd3e:	d2d7      	bcs.n	2ccf0 <dir_sdi+0x90>
		}
		dj->clust = clst;
   2cd40:	687b      	ldr	r3, [r7, #4]
   2cd42:	68fa      	ldr	r2, [r7, #12]
   2cd44:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2cd46:	687b      	ldr	r3, [r7, #4]
   2cd48:	681b      	ldr	r3, [r3, #0]
   2cd4a:	68fa      	ldr	r2, [r7, #12]
   2cd4c:	0011      	movs	r1, r2
   2cd4e:	0018      	movs	r0, r3
   2cd50:	4b0e      	ldr	r3, [pc, #56]	; (2cd8c <dir_sdi+0x12c>)
   2cd52:	4798      	blx	r3
   2cd54:	0002      	movs	r2, r0
   2cd56:	1cbb      	adds	r3, r7, #2
   2cd58:	881b      	ldrh	r3, [r3, #0]
   2cd5a:	091b      	lsrs	r3, r3, #4
   2cd5c:	b29b      	uxth	r3, r3
   2cd5e:	18d2      	adds	r2, r2, r3
   2cd60:	687b      	ldr	r3, [r7, #4]
   2cd62:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   2cd64:	687b      	ldr	r3, [r7, #4]
   2cd66:	681b      	ldr	r3, [r3, #0]
   2cd68:	3330      	adds	r3, #48	; 0x30
   2cd6a:	001a      	movs	r2, r3
   2cd6c:	1cbb      	adds	r3, r7, #2
   2cd6e:	881b      	ldrh	r3, [r3, #0]
   2cd70:	210f      	movs	r1, #15
   2cd72:	400b      	ands	r3, r1
   2cd74:	015b      	lsls	r3, r3, #5
   2cd76:	18d2      	adds	r2, r2, r3
   2cd78:	687b      	ldr	r3, [r7, #4]
   2cd7a:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
   2cd7c:	2300      	movs	r3, #0
}
   2cd7e:	0018      	movs	r0, r3
   2cd80:	46bd      	mov	sp, r7
   2cd82:	b004      	add	sp, #16
   2cd84:	bd80      	pop	{r7, pc}
   2cd86:	46c0      	nop			; (mov r8, r8)
   2cd88:	0002c6b5 	.word	0x0002c6b5
   2cd8c:	0002c67d 	.word	0x0002c67d

0002cd90 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
   2cd90:	b590      	push	{r4, r7, lr}
   2cd92:	b085      	sub	sp, #20
   2cd94:	af00      	add	r7, sp, #0
   2cd96:	6078      	str	r0, [r7, #4]
   2cd98:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
   2cd9a:	687b      	ldr	r3, [r7, #4]
   2cd9c:	88da      	ldrh	r2, [r3, #6]
   2cd9e:	2308      	movs	r3, #8
   2cda0:	18fb      	adds	r3, r7, r3
   2cda2:	3201      	adds	r2, #1
   2cda4:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   2cda6:	2308      	movs	r3, #8
   2cda8:	18fb      	adds	r3, r7, r3
   2cdaa:	881b      	ldrh	r3, [r3, #0]
   2cdac:	2b00      	cmp	r3, #0
   2cdae:	d003      	beq.n	2cdb8 <dir_next+0x28>
   2cdb0:	687b      	ldr	r3, [r7, #4]
   2cdb2:	691b      	ldr	r3, [r3, #16]
   2cdb4:	2b00      	cmp	r3, #0
   2cdb6:	d101      	bne.n	2cdbc <dir_next+0x2c>
		return FR_NO_FILE;
   2cdb8:	2304      	movs	r3, #4
   2cdba:	e0d2      	b.n	2cf62 <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   2cdbc:	2308      	movs	r3, #8
   2cdbe:	18fb      	adds	r3, r7, r3
   2cdc0:	881b      	ldrh	r3, [r3, #0]
   2cdc2:	220f      	movs	r2, #15
   2cdc4:	4013      	ands	r3, r2
   2cdc6:	b29b      	uxth	r3, r3
   2cdc8:	2b00      	cmp	r3, #0
   2cdca:	d000      	beq.n	2cdce <dir_next+0x3e>
   2cdcc:	e0b6      	b.n	2cf3c <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
   2cdce:	687b      	ldr	r3, [r7, #4]
   2cdd0:	691b      	ldr	r3, [r3, #16]
   2cdd2:	1c5a      	adds	r2, r3, #1
   2cdd4:	687b      	ldr	r3, [r7, #4]
   2cdd6:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
   2cdd8:	687b      	ldr	r3, [r7, #4]
   2cdda:	68db      	ldr	r3, [r3, #12]
   2cddc:	2b00      	cmp	r3, #0
   2cdde:	d10a      	bne.n	2cdf6 <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   2cde0:	687b      	ldr	r3, [r7, #4]
   2cde2:	681b      	ldr	r3, [r3, #0]
   2cde4:	891b      	ldrh	r3, [r3, #8]
   2cde6:	2208      	movs	r2, #8
   2cde8:	18ba      	adds	r2, r7, r2
   2cdea:	8812      	ldrh	r2, [r2, #0]
   2cdec:	429a      	cmp	r2, r3
   2cdee:	d200      	bcs.n	2cdf2 <dir_next+0x62>
   2cdf0:	e0a4      	b.n	2cf3c <dir_next+0x1ac>
				return FR_NO_FILE;
   2cdf2:	2304      	movs	r3, #4
   2cdf4:	e0b5      	b.n	2cf62 <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   2cdf6:	2308      	movs	r3, #8
   2cdf8:	18fb      	adds	r3, r7, r3
   2cdfa:	881b      	ldrh	r3, [r3, #0]
   2cdfc:	091b      	lsrs	r3, r3, #4
   2cdfe:	b29b      	uxth	r3, r3
   2ce00:	001a      	movs	r2, r3
   2ce02:	687b      	ldr	r3, [r7, #4]
   2ce04:	681b      	ldr	r3, [r3, #0]
   2ce06:	789b      	ldrb	r3, [r3, #2]
   2ce08:	3b01      	subs	r3, #1
   2ce0a:	4013      	ands	r3, r2
   2ce0c:	d000      	beq.n	2ce10 <dir_next+0x80>
   2ce0e:	e095      	b.n	2cf3c <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   2ce10:	687b      	ldr	r3, [r7, #4]
   2ce12:	681a      	ldr	r2, [r3, #0]
   2ce14:	687b      	ldr	r3, [r7, #4]
   2ce16:	68db      	ldr	r3, [r3, #12]
   2ce18:	0019      	movs	r1, r3
   2ce1a:	0010      	movs	r0, r2
   2ce1c:	4b53      	ldr	r3, [pc, #332]	; (2cf6c <dir_next+0x1dc>)
   2ce1e:	4798      	blx	r3
   2ce20:	0003      	movs	r3, r0
   2ce22:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
   2ce24:	68fb      	ldr	r3, [r7, #12]
   2ce26:	2b01      	cmp	r3, #1
   2ce28:	d801      	bhi.n	2ce2e <dir_next+0x9e>
   2ce2a:	2302      	movs	r3, #2
   2ce2c:	e099      	b.n	2cf62 <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2ce2e:	68fb      	ldr	r3, [r7, #12]
   2ce30:	3301      	adds	r3, #1
   2ce32:	d101      	bne.n	2ce38 <dir_next+0xa8>
   2ce34:	2301      	movs	r3, #1
   2ce36:	e094      	b.n	2cf62 <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   2ce38:	687b      	ldr	r3, [r7, #4]
   2ce3a:	681b      	ldr	r3, [r3, #0]
   2ce3c:	699a      	ldr	r2, [r3, #24]
   2ce3e:	68fb      	ldr	r3, [r7, #12]
   2ce40:	429a      	cmp	r2, r3
   2ce42:	d900      	bls.n	2ce46 <dir_next+0xb6>
   2ce44:	e06d      	b.n	2cf22 <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   2ce46:	683b      	ldr	r3, [r7, #0]
   2ce48:	2b00      	cmp	r3, #0
   2ce4a:	d101      	bne.n	2ce50 <dir_next+0xc0>
   2ce4c:	2304      	movs	r3, #4
   2ce4e:	e088      	b.n	2cf62 <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   2ce50:	687b      	ldr	r3, [r7, #4]
   2ce52:	681a      	ldr	r2, [r3, #0]
   2ce54:	687b      	ldr	r3, [r7, #4]
   2ce56:	68db      	ldr	r3, [r3, #12]
   2ce58:	0019      	movs	r1, r3
   2ce5a:	0010      	movs	r0, r2
   2ce5c:	4b44      	ldr	r3, [pc, #272]	; (2cf70 <dir_next+0x1e0>)
   2ce5e:	4798      	blx	r3
   2ce60:	0003      	movs	r3, r0
   2ce62:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   2ce64:	68fb      	ldr	r3, [r7, #12]
   2ce66:	2b00      	cmp	r3, #0
   2ce68:	d101      	bne.n	2ce6e <dir_next+0xde>
   2ce6a:	2307      	movs	r3, #7
   2ce6c:	e079      	b.n	2cf62 <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
   2ce6e:	68fb      	ldr	r3, [r7, #12]
   2ce70:	2b01      	cmp	r3, #1
   2ce72:	d101      	bne.n	2ce78 <dir_next+0xe8>
   2ce74:	2302      	movs	r3, #2
   2ce76:	e074      	b.n	2cf62 <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2ce78:	68fb      	ldr	r3, [r7, #12]
   2ce7a:	3301      	adds	r3, #1
   2ce7c:	d101      	bne.n	2ce82 <dir_next+0xf2>
   2ce7e:	2301      	movs	r3, #1
   2ce80:	e06f      	b.n	2cf62 <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   2ce82:	687b      	ldr	r3, [r7, #4]
   2ce84:	681b      	ldr	r3, [r3, #0]
   2ce86:	2100      	movs	r1, #0
   2ce88:	0018      	movs	r0, r3
   2ce8a:	4b3a      	ldr	r3, [pc, #232]	; (2cf74 <dir_next+0x1e4>)
   2ce8c:	4798      	blx	r3
   2ce8e:	1e03      	subs	r3, r0, #0
   2ce90:	d001      	beq.n	2ce96 <dir_next+0x106>
   2ce92:	2301      	movs	r3, #1
   2ce94:	e065      	b.n	2cf62 <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   2ce96:	687b      	ldr	r3, [r7, #4]
   2ce98:	681b      	ldr	r3, [r3, #0]
   2ce9a:	3330      	adds	r3, #48	; 0x30
   2ce9c:	0018      	movs	r0, r3
   2ce9e:	2380      	movs	r3, #128	; 0x80
   2cea0:	009b      	lsls	r3, r3, #2
   2cea2:	001a      	movs	r2, r3
   2cea4:	2100      	movs	r1, #0
   2cea6:	4b34      	ldr	r3, [pc, #208]	; (2cf78 <dir_next+0x1e8>)
   2cea8:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   2ceaa:	687b      	ldr	r3, [r7, #4]
   2ceac:	681c      	ldr	r4, [r3, #0]
   2ceae:	687b      	ldr	r3, [r7, #4]
   2ceb0:	681b      	ldr	r3, [r3, #0]
   2ceb2:	68fa      	ldr	r2, [r7, #12]
   2ceb4:	0011      	movs	r1, r2
   2ceb6:	0018      	movs	r0, r3
   2ceb8:	4b30      	ldr	r3, [pc, #192]	; (2cf7c <dir_next+0x1ec>)
   2ceba:	4798      	blx	r3
   2cebc:	0003      	movs	r3, r0
   2cebe:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2cec0:	230b      	movs	r3, #11
   2cec2:	18fb      	adds	r3, r7, r3
   2cec4:	2200      	movs	r2, #0
   2cec6:	701a      	strb	r2, [r3, #0]
   2cec8:	e019      	b.n	2cefe <dir_next+0x16e>
						dj->fs->wflag = 1;
   2ceca:	687b      	ldr	r3, [r7, #4]
   2cecc:	681b      	ldr	r3, [r3, #0]
   2cece:	2201      	movs	r2, #1
   2ced0:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   2ced2:	687b      	ldr	r3, [r7, #4]
   2ced4:	681b      	ldr	r3, [r3, #0]
   2ced6:	2100      	movs	r1, #0
   2ced8:	0018      	movs	r0, r3
   2ceda:	4b26      	ldr	r3, [pc, #152]	; (2cf74 <dir_next+0x1e4>)
   2cedc:	4798      	blx	r3
   2cede:	1e03      	subs	r3, r0, #0
   2cee0:	d001      	beq.n	2cee6 <dir_next+0x156>
   2cee2:	2301      	movs	r3, #1
   2cee4:	e03d      	b.n	2cf62 <dir_next+0x1d2>
						dj->fs->winsect++;
   2cee6:	687b      	ldr	r3, [r7, #4]
   2cee8:	681b      	ldr	r3, [r3, #0]
   2ceea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2ceec:	3201      	adds	r2, #1
   2ceee:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2cef0:	230b      	movs	r3, #11
   2cef2:	18fb      	adds	r3, r7, r3
   2cef4:	781a      	ldrb	r2, [r3, #0]
   2cef6:	230b      	movs	r3, #11
   2cef8:	18fb      	adds	r3, r7, r3
   2cefa:	3201      	adds	r2, #1
   2cefc:	701a      	strb	r2, [r3, #0]
   2cefe:	687b      	ldr	r3, [r7, #4]
   2cf00:	681b      	ldr	r3, [r3, #0]
   2cf02:	789b      	ldrb	r3, [r3, #2]
   2cf04:	220b      	movs	r2, #11
   2cf06:	18ba      	adds	r2, r7, r2
   2cf08:	7812      	ldrb	r2, [r2, #0]
   2cf0a:	429a      	cmp	r2, r3
   2cf0c:	d3dd      	bcc.n	2ceca <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
   2cf0e:	687b      	ldr	r3, [r7, #4]
   2cf10:	681b      	ldr	r3, [r3, #0]
   2cf12:	687a      	ldr	r2, [r7, #4]
   2cf14:	6812      	ldr	r2, [r2, #0]
   2cf16:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   2cf18:	220b      	movs	r2, #11
   2cf1a:	18ba      	adds	r2, r7, r2
   2cf1c:	7812      	ldrb	r2, [r2, #0]
   2cf1e:	1a8a      	subs	r2, r1, r2
   2cf20:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
   2cf22:	687b      	ldr	r3, [r7, #4]
   2cf24:	68fa      	ldr	r2, [r7, #12]
   2cf26:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
   2cf28:	687b      	ldr	r3, [r7, #4]
   2cf2a:	681b      	ldr	r3, [r3, #0]
   2cf2c:	68fa      	ldr	r2, [r7, #12]
   2cf2e:	0011      	movs	r1, r2
   2cf30:	0018      	movs	r0, r3
   2cf32:	4b12      	ldr	r3, [pc, #72]	; (2cf7c <dir_next+0x1ec>)
   2cf34:	4798      	blx	r3
   2cf36:	0002      	movs	r2, r0
   2cf38:	687b      	ldr	r3, [r7, #4]
   2cf3a:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
   2cf3c:	687b      	ldr	r3, [r7, #4]
   2cf3e:	2208      	movs	r2, #8
   2cf40:	18ba      	adds	r2, r7, r2
   2cf42:	8812      	ldrh	r2, [r2, #0]
   2cf44:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   2cf46:	687b      	ldr	r3, [r7, #4]
   2cf48:	681b      	ldr	r3, [r3, #0]
   2cf4a:	3330      	adds	r3, #48	; 0x30
   2cf4c:	001a      	movs	r2, r3
   2cf4e:	2308      	movs	r3, #8
   2cf50:	18fb      	adds	r3, r7, r3
   2cf52:	881b      	ldrh	r3, [r3, #0]
   2cf54:	210f      	movs	r1, #15
   2cf56:	400b      	ands	r3, r1
   2cf58:	015b      	lsls	r3, r3, #5
   2cf5a:	18d2      	adds	r2, r2, r3
   2cf5c:	687b      	ldr	r3, [r7, #4]
   2cf5e:	615a      	str	r2, [r3, #20]

	return FR_OK;
   2cf60:	2300      	movs	r3, #0
}
   2cf62:	0018      	movs	r0, r3
   2cf64:	46bd      	mov	sp, r7
   2cf66:	b005      	add	sp, #20
   2cf68:	bd90      	pop	{r4, r7, pc}
   2cf6a:	46c0      	nop			; (mov r8, r8)
   2cf6c:	0002c6b5 	.word	0x0002c6b5
   2cf70:	0002cb25 	.word	0x0002cb25
   2cf74:	0002c41d 	.word	0x0002c41d
   2cf78:	0002c371 	.word	0x0002c371
   2cf7c:	0002c67d 	.word	0x0002c67d

0002cf80 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
   2cf80:	b590      	push	{r4, r7, lr}
   2cf82:	b087      	sub	sp, #28
   2cf84:	af00      	add	r7, sp, #0
   2cf86:	6078      	str	r0, [r7, #4]
   2cf88:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   2cf8a:	683b      	ldr	r3, [r7, #0]
   2cf8c:	781b      	ldrb	r3, [r3, #0]
   2cf8e:	001a      	movs	r2, r3
   2cf90:	2340      	movs	r3, #64	; 0x40
   2cf92:	439a      	bics	r2, r3
   2cf94:	0013      	movs	r3, r2
   2cf96:	1e5a      	subs	r2, r3, #1
   2cf98:	0013      	movs	r3, r2
   2cf9a:	005b      	lsls	r3, r3, #1
   2cf9c:	189b      	adds	r3, r3, r2
   2cf9e:	009b      	lsls	r3, r3, #2
   2cfa0:	189b      	adds	r3, r3, r2
   2cfa2:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
   2cfa4:	2300      	movs	r3, #0
   2cfa6:	613b      	str	r3, [r7, #16]
   2cfa8:	230e      	movs	r3, #14
   2cfaa:	18fb      	adds	r3, r7, r3
   2cfac:	2201      	movs	r2, #1
   2cfae:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   2cfb0:	4a31      	ldr	r2, [pc, #196]	; (2d078 <cmp_lfn+0xf8>)
   2cfb2:	693b      	ldr	r3, [r7, #16]
   2cfb4:	18d3      	adds	r3, r2, r3
   2cfb6:	781b      	ldrb	r3, [r3, #0]
   2cfb8:	3301      	adds	r3, #1
   2cfba:	683a      	ldr	r2, [r7, #0]
   2cfbc:	18d3      	adds	r3, r2, r3
   2cfbe:	781b      	ldrb	r3, [r3, #0]
   2cfc0:	021b      	lsls	r3, r3, #8
   2cfc2:	b21a      	sxth	r2, r3
   2cfc4:	492c      	ldr	r1, [pc, #176]	; (2d078 <cmp_lfn+0xf8>)
   2cfc6:	693b      	ldr	r3, [r7, #16]
   2cfc8:	18cb      	adds	r3, r1, r3
   2cfca:	781b      	ldrb	r3, [r3, #0]
   2cfcc:	0019      	movs	r1, r3
   2cfce:	683b      	ldr	r3, [r7, #0]
   2cfd0:	185b      	adds	r3, r3, r1
   2cfd2:	781b      	ldrb	r3, [r3, #0]
   2cfd4:	b21b      	sxth	r3, r3
   2cfd6:	4313      	orrs	r3, r2
   2cfd8:	b21a      	sxth	r2, r3
   2cfda:	230c      	movs	r3, #12
   2cfdc:	18fb      	adds	r3, r7, r3
   2cfde:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
   2cfe0:	230e      	movs	r3, #14
   2cfe2:	18fb      	adds	r3, r7, r3
   2cfe4:	881b      	ldrh	r3, [r3, #0]
   2cfe6:	2b00      	cmp	r3, #0
   2cfe8:	d01f      	beq.n	2d02a <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   2cfea:	230e      	movs	r3, #14
   2cfec:	18fc      	adds	r4, r7, r3
   2cfee:	230c      	movs	r3, #12
   2cff0:	18fb      	adds	r3, r7, r3
   2cff2:	881b      	ldrh	r3, [r3, #0]
   2cff4:	0018      	movs	r0, r3
   2cff6:	4b21      	ldr	r3, [pc, #132]	; (2d07c <cmp_lfn+0xfc>)
   2cff8:	4798      	blx	r3
   2cffa:	0003      	movs	r3, r0
   2cffc:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   2cffe:	697b      	ldr	r3, [r7, #20]
   2d000:	2bfe      	cmp	r3, #254	; 0xfe
   2d002:	d810      	bhi.n	2d026 <cmp_lfn+0xa6>
   2d004:	697b      	ldr	r3, [r7, #20]
   2d006:	1c5a      	adds	r2, r3, #1
   2d008:	617a      	str	r2, [r7, #20]
   2d00a:	005b      	lsls	r3, r3, #1
   2d00c:	687a      	ldr	r2, [r7, #4]
   2d00e:	18d3      	adds	r3, r2, r3
   2d010:	881b      	ldrh	r3, [r3, #0]
   2d012:	0018      	movs	r0, r3
   2d014:	4b19      	ldr	r3, [pc, #100]	; (2d07c <cmp_lfn+0xfc>)
   2d016:	4798      	blx	r3
   2d018:	0003      	movs	r3, r0
   2d01a:	001a      	movs	r2, r3
   2d01c:	230e      	movs	r3, #14
   2d01e:	18fb      	adds	r3, r7, r3
   2d020:	881b      	ldrh	r3, [r3, #0]
   2d022:	4293      	cmp	r3, r2
   2d024:	d009      	beq.n	2d03a <cmp_lfn+0xba>
				return 0;				/* Not matched */
   2d026:	2300      	movs	r3, #0
   2d028:	e022      	b.n	2d070 <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   2d02a:	230c      	movs	r3, #12
   2d02c:	18fb      	adds	r3, r7, r3
   2d02e:	881b      	ldrh	r3, [r3, #0]
   2d030:	4a13      	ldr	r2, [pc, #76]	; (2d080 <cmp_lfn+0x100>)
   2d032:	4293      	cmp	r3, r2
   2d034:	d001      	beq.n	2d03a <cmp_lfn+0xba>
   2d036:	2300      	movs	r3, #0
   2d038:	e01a      	b.n	2d070 <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   2d03a:	693b      	ldr	r3, [r7, #16]
   2d03c:	3301      	adds	r3, #1
   2d03e:	613b      	str	r3, [r7, #16]
   2d040:	693b      	ldr	r3, [r7, #16]
   2d042:	2b0c      	cmp	r3, #12
   2d044:	d9b4      	bls.n	2cfb0 <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   2d046:	683b      	ldr	r3, [r7, #0]
   2d048:	781b      	ldrb	r3, [r3, #0]
   2d04a:	001a      	movs	r2, r3
   2d04c:	2340      	movs	r3, #64	; 0x40
   2d04e:	4013      	ands	r3, r2
   2d050:	d00d      	beq.n	2d06e <cmp_lfn+0xee>
   2d052:	230e      	movs	r3, #14
   2d054:	18fb      	adds	r3, r7, r3
   2d056:	881b      	ldrh	r3, [r3, #0]
   2d058:	2b00      	cmp	r3, #0
   2d05a:	d008      	beq.n	2d06e <cmp_lfn+0xee>
   2d05c:	697b      	ldr	r3, [r7, #20]
   2d05e:	005b      	lsls	r3, r3, #1
   2d060:	687a      	ldr	r2, [r7, #4]
   2d062:	18d3      	adds	r3, r2, r3
   2d064:	881b      	ldrh	r3, [r3, #0]
   2d066:	2b00      	cmp	r3, #0
   2d068:	d001      	beq.n	2d06e <cmp_lfn+0xee>
		return 0;
   2d06a:	2300      	movs	r3, #0
   2d06c:	e000      	b.n	2d070 <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
   2d06e:	2301      	movs	r3, #1
}
   2d070:	0018      	movs	r0, r3
   2d072:	46bd      	mov	sp, r7
   2d074:	b007      	add	sp, #28
   2d076:	bd90      	pop	{r4, r7, pc}
   2d078:	0003a370 	.word	0x0003a370
   2d07c:	0002f02d 	.word	0x0002f02d
   2d080:	0000ffff 	.word	0x0000ffff

0002d084 <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
   2d084:	b580      	push	{r7, lr}
   2d086:	b088      	sub	sp, #32
   2d088:	af00      	add	r7, sp, #0
   2d08a:	60f8      	str	r0, [r7, #12]
   2d08c:	60b9      	str	r1, [r7, #8]
   2d08e:	0019      	movs	r1, r3
   2d090:	1dfb      	adds	r3, r7, #7
   2d092:	701a      	strb	r2, [r3, #0]
   2d094:	1dbb      	adds	r3, r7, #6
   2d096:	1c0a      	adds	r2, r1, #0
   2d098:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
   2d09a:	68bb      	ldr	r3, [r7, #8]
   2d09c:	330d      	adds	r3, #13
   2d09e:	1dba      	adds	r2, r7, #6
   2d0a0:	7812      	ldrb	r2, [r2, #0]
   2d0a2:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   2d0a4:	68bb      	ldr	r3, [r7, #8]
   2d0a6:	330b      	adds	r3, #11
   2d0a8:	220f      	movs	r2, #15
   2d0aa:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
   2d0ac:	68bb      	ldr	r3, [r7, #8]
   2d0ae:	330c      	adds	r3, #12
   2d0b0:	2200      	movs	r2, #0
   2d0b2:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   2d0b4:	68bb      	ldr	r3, [r7, #8]
   2d0b6:	331a      	adds	r3, #26
   2d0b8:	2200      	movs	r2, #0
   2d0ba:	701a      	strb	r2, [r3, #0]
   2d0bc:	68bb      	ldr	r3, [r7, #8]
   2d0be:	331b      	adds	r3, #27
   2d0c0:	2200      	movs	r2, #0
   2d0c2:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   2d0c4:	1dfb      	adds	r3, r7, #7
   2d0c6:	781b      	ldrb	r3, [r3, #0]
   2d0c8:	1e5a      	subs	r2, r3, #1
   2d0ca:	0013      	movs	r3, r2
   2d0cc:	005b      	lsls	r3, r3, #1
   2d0ce:	189b      	adds	r3, r3, r2
   2d0d0:	009b      	lsls	r3, r3, #2
   2d0d2:	189b      	adds	r3, r3, r2
   2d0d4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
   2d0d6:	2316      	movs	r3, #22
   2d0d8:	18fb      	adds	r3, r7, r3
   2d0da:	2200      	movs	r2, #0
   2d0dc:	801a      	strh	r2, [r3, #0]
   2d0de:	2300      	movs	r3, #0
   2d0e0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   2d0e2:	2316      	movs	r3, #22
   2d0e4:	18fb      	adds	r3, r7, r3
   2d0e6:	881b      	ldrh	r3, [r3, #0]
   2d0e8:	4a28      	ldr	r2, [pc, #160]	; (2d18c <fit_lfn+0x108>)
   2d0ea:	4293      	cmp	r3, r2
   2d0ec:	d009      	beq.n	2d102 <fit_lfn+0x7e>
   2d0ee:	69fb      	ldr	r3, [r7, #28]
   2d0f0:	1c5a      	adds	r2, r3, #1
   2d0f2:	61fa      	str	r2, [r7, #28]
   2d0f4:	005b      	lsls	r3, r3, #1
   2d0f6:	68fa      	ldr	r2, [r7, #12]
   2d0f8:	18d2      	adds	r2, r2, r3
   2d0fa:	2316      	movs	r3, #22
   2d0fc:	18fb      	adds	r3, r7, r3
   2d0fe:	8812      	ldrh	r2, [r2, #0]
   2d100:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   2d102:	4a23      	ldr	r2, [pc, #140]	; (2d190 <fit_lfn+0x10c>)
   2d104:	69bb      	ldr	r3, [r7, #24]
   2d106:	18d3      	adds	r3, r2, r3
   2d108:	781b      	ldrb	r3, [r3, #0]
   2d10a:	001a      	movs	r2, r3
   2d10c:	68bb      	ldr	r3, [r7, #8]
   2d10e:	189b      	adds	r3, r3, r2
   2d110:	2216      	movs	r2, #22
   2d112:	18ba      	adds	r2, r7, r2
   2d114:	8812      	ldrh	r2, [r2, #0]
   2d116:	b2d2      	uxtb	r2, r2
   2d118:	701a      	strb	r2, [r3, #0]
   2d11a:	4a1d      	ldr	r2, [pc, #116]	; (2d190 <fit_lfn+0x10c>)
   2d11c:	69bb      	ldr	r3, [r7, #24]
   2d11e:	18d3      	adds	r3, r2, r3
   2d120:	781b      	ldrb	r3, [r3, #0]
   2d122:	3301      	adds	r3, #1
   2d124:	68ba      	ldr	r2, [r7, #8]
   2d126:	18d3      	adds	r3, r2, r3
   2d128:	2216      	movs	r2, #22
   2d12a:	18ba      	adds	r2, r7, r2
   2d12c:	8812      	ldrh	r2, [r2, #0]
   2d12e:	0a12      	lsrs	r2, r2, #8
   2d130:	b292      	uxth	r2, r2
   2d132:	b2d2      	uxtb	r2, r2
   2d134:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   2d136:	2316      	movs	r3, #22
   2d138:	18fb      	adds	r3, r7, r3
   2d13a:	881b      	ldrh	r3, [r3, #0]
   2d13c:	2b00      	cmp	r3, #0
   2d13e:	d104      	bne.n	2d14a <fit_lfn+0xc6>
   2d140:	2316      	movs	r3, #22
   2d142:	18fb      	adds	r3, r7, r3
   2d144:	2201      	movs	r2, #1
   2d146:	4252      	negs	r2, r2
   2d148:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
   2d14a:	69bb      	ldr	r3, [r7, #24]
   2d14c:	3301      	adds	r3, #1
   2d14e:	61bb      	str	r3, [r7, #24]
   2d150:	69bb      	ldr	r3, [r7, #24]
   2d152:	2b0c      	cmp	r3, #12
   2d154:	d9c5      	bls.n	2d0e2 <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   2d156:	2316      	movs	r3, #22
   2d158:	18fb      	adds	r3, r7, r3
   2d15a:	881b      	ldrh	r3, [r3, #0]
   2d15c:	4a0b      	ldr	r2, [pc, #44]	; (2d18c <fit_lfn+0x108>)
   2d15e:	4293      	cmp	r3, r2
   2d160:	d006      	beq.n	2d170 <fit_lfn+0xec>
   2d162:	69fb      	ldr	r3, [r7, #28]
   2d164:	005b      	lsls	r3, r3, #1
   2d166:	68fa      	ldr	r2, [r7, #12]
   2d168:	18d3      	adds	r3, r2, r3
   2d16a:	881b      	ldrh	r3, [r3, #0]
   2d16c:	2b00      	cmp	r3, #0
   2d16e:	d105      	bne.n	2d17c <fit_lfn+0xf8>
   2d170:	1dfb      	adds	r3, r7, #7
   2d172:	1dfa      	adds	r2, r7, #7
   2d174:	7812      	ldrb	r2, [r2, #0]
   2d176:	2140      	movs	r1, #64	; 0x40
   2d178:	430a      	orrs	r2, r1
   2d17a:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   2d17c:	68bb      	ldr	r3, [r7, #8]
   2d17e:	1dfa      	adds	r2, r7, #7
   2d180:	7812      	ldrb	r2, [r2, #0]
   2d182:	701a      	strb	r2, [r3, #0]
}
   2d184:	46c0      	nop			; (mov r8, r8)
   2d186:	46bd      	mov	sp, r7
   2d188:	b008      	add	sp, #32
   2d18a:	bd80      	pop	{r7, pc}
   2d18c:	0000ffff 	.word	0x0000ffff
   2d190:	0003a370 	.word	0x0003a370

0002d194 <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
   2d194:	b580      	push	{r7, lr}
   2d196:	b08a      	sub	sp, #40	; 0x28
   2d198:	af00      	add	r7, sp, #0
   2d19a:	60f8      	str	r0, [r7, #12]
   2d19c:	60b9      	str	r1, [r7, #8]
   2d19e:	607a      	str	r2, [r7, #4]
   2d1a0:	001a      	movs	r2, r3
   2d1a2:	1cbb      	adds	r3, r7, #2
   2d1a4:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
   2d1a6:	68b9      	ldr	r1, [r7, #8]
   2d1a8:	68fb      	ldr	r3, [r7, #12]
   2d1aa:	220b      	movs	r2, #11
   2d1ac:	0018      	movs	r0, r3
   2d1ae:	4b38      	ldr	r3, [pc, #224]	; (2d290 <gen_numname+0xfc>)
   2d1b0:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   2d1b2:	1cbb      	adds	r3, r7, #2
   2d1b4:	881b      	ldrh	r3, [r3, #0]
   2d1b6:	2b05      	cmp	r3, #5
   2d1b8:	d911      	bls.n	2d1de <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   2d1ba:	1cbb      	adds	r3, r7, #2
   2d1bc:	881b      	ldrh	r3, [r3, #0]
   2d1be:	b29a      	uxth	r2, r3
   2d1c0:	0852      	lsrs	r2, r2, #1
   2d1c2:	03db      	lsls	r3, r3, #15
   2d1c4:	4313      	orrs	r3, r2
   2d1c6:	b299      	uxth	r1, r3
   2d1c8:	687b      	ldr	r3, [r7, #4]
   2d1ca:	1c9a      	adds	r2, r3, #2
   2d1cc:	607a      	str	r2, [r7, #4]
   2d1ce:	881a      	ldrh	r2, [r3, #0]
   2d1d0:	1cbb      	adds	r3, r7, #2
   2d1d2:	188a      	adds	r2, r1, r2
   2d1d4:	801a      	strh	r2, [r3, #0]
   2d1d6:	687b      	ldr	r3, [r7, #4]
   2d1d8:	881b      	ldrh	r3, [r3, #0]
   2d1da:	2b00      	cmp	r3, #0
   2d1dc:	d1ed      	bne.n	2d1ba <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
   2d1de:	2307      	movs	r3, #7
   2d1e0:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
   2d1e2:	1cbb      	adds	r3, r7, #2
   2d1e4:	881b      	ldrh	r3, [r3, #0]
   2d1e6:	b2db      	uxtb	r3, r3
   2d1e8:	220f      	movs	r2, #15
   2d1ea:	4013      	ands	r3, r2
   2d1ec:	b2da      	uxtb	r2, r3
   2d1ee:	2327      	movs	r3, #39	; 0x27
   2d1f0:	18fb      	adds	r3, r7, r3
   2d1f2:	3230      	adds	r2, #48	; 0x30
   2d1f4:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
   2d1f6:	2327      	movs	r3, #39	; 0x27
   2d1f8:	18fb      	adds	r3, r7, r3
   2d1fa:	781b      	ldrb	r3, [r3, #0]
   2d1fc:	2b39      	cmp	r3, #57	; 0x39
   2d1fe:	d906      	bls.n	2d20e <gen_numname+0x7a>
   2d200:	2327      	movs	r3, #39	; 0x27
   2d202:	18fb      	adds	r3, r7, r3
   2d204:	2227      	movs	r2, #39	; 0x27
   2d206:	18ba      	adds	r2, r7, r2
   2d208:	7812      	ldrb	r2, [r2, #0]
   2d20a:	3207      	adds	r2, #7
   2d20c:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
   2d20e:	6a3b      	ldr	r3, [r7, #32]
   2d210:	1e5a      	subs	r2, r3, #1
   2d212:	623a      	str	r2, [r7, #32]
   2d214:	2214      	movs	r2, #20
   2d216:	18ba      	adds	r2, r7, r2
   2d218:	2127      	movs	r1, #39	; 0x27
   2d21a:	1879      	adds	r1, r7, r1
   2d21c:	7809      	ldrb	r1, [r1, #0]
   2d21e:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
   2d220:	1cbb      	adds	r3, r7, #2
   2d222:	1cba      	adds	r2, r7, #2
   2d224:	8812      	ldrh	r2, [r2, #0]
   2d226:	0912      	lsrs	r2, r2, #4
   2d228:	801a      	strh	r2, [r3, #0]
	} while (seq);
   2d22a:	1cbb      	adds	r3, r7, #2
   2d22c:	881b      	ldrh	r3, [r3, #0]
   2d22e:	2b00      	cmp	r3, #0
   2d230:	d1d7      	bne.n	2d1e2 <gen_numname+0x4e>
	ns[i] = '~';
   2d232:	2314      	movs	r3, #20
   2d234:	18fa      	adds	r2, r7, r3
   2d236:	6a3b      	ldr	r3, [r7, #32]
   2d238:	18d3      	adds	r3, r2, r3
   2d23a:	227e      	movs	r2, #126	; 0x7e
   2d23c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
   2d23e:	2300      	movs	r3, #0
   2d240:	61fb      	str	r3, [r7, #28]
   2d242:	e002      	b.n	2d24a <gen_numname+0xb6>
   2d244:	69fb      	ldr	r3, [r7, #28]
   2d246:	3301      	adds	r3, #1
   2d248:	61fb      	str	r3, [r7, #28]
   2d24a:	69fa      	ldr	r2, [r7, #28]
   2d24c:	6a3b      	ldr	r3, [r7, #32]
   2d24e:	429a      	cmp	r2, r3
   2d250:	d205      	bcs.n	2d25e <gen_numname+0xca>
   2d252:	68fa      	ldr	r2, [r7, #12]
   2d254:	69fb      	ldr	r3, [r7, #28]
   2d256:	18d3      	adds	r3, r2, r3
   2d258:	781b      	ldrb	r3, [r3, #0]
   2d25a:	2b20      	cmp	r3, #32
   2d25c:	d1f2      	bne.n	2d244 <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   2d25e:	69fb      	ldr	r3, [r7, #28]
   2d260:	1c5a      	adds	r2, r3, #1
   2d262:	61fa      	str	r2, [r7, #28]
   2d264:	68fa      	ldr	r2, [r7, #12]
   2d266:	18d2      	adds	r2, r2, r3
   2d268:	6a3b      	ldr	r3, [r7, #32]
   2d26a:	2b07      	cmp	r3, #7
   2d26c:	d806      	bhi.n	2d27c <gen_numname+0xe8>
   2d26e:	6a3b      	ldr	r3, [r7, #32]
   2d270:	1c59      	adds	r1, r3, #1
   2d272:	6239      	str	r1, [r7, #32]
   2d274:	2114      	movs	r1, #20
   2d276:	1879      	adds	r1, r7, r1
   2d278:	5ccb      	ldrb	r3, [r1, r3]
   2d27a:	e000      	b.n	2d27e <gen_numname+0xea>
   2d27c:	2320      	movs	r3, #32
   2d27e:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
   2d280:	69fb      	ldr	r3, [r7, #28]
   2d282:	2b07      	cmp	r3, #7
   2d284:	d9eb      	bls.n	2d25e <gen_numname+0xca>
}
   2d286:	46c0      	nop			; (mov r8, r8)
   2d288:	46bd      	mov	sp, r7
   2d28a:	b00a      	add	sp, #40	; 0x28
   2d28c:	bd80      	pop	{r7, pc}
   2d28e:	46c0      	nop			; (mov r8, r8)
   2d290:	0002c339 	.word	0x0002c339

0002d294 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   2d294:	b580      	push	{r7, lr}
   2d296:	b084      	sub	sp, #16
   2d298:	af00      	add	r7, sp, #0
   2d29a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
   2d29c:	230f      	movs	r3, #15
   2d29e:	18fb      	adds	r3, r7, r3
   2d2a0:	2200      	movs	r2, #0
   2d2a2:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
   2d2a4:	230b      	movs	r3, #11
   2d2a6:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   2d2a8:	230f      	movs	r3, #15
   2d2aa:	18fb      	adds	r3, r7, r3
   2d2ac:	781b      	ldrb	r3, [r3, #0]
   2d2ae:	b2da      	uxtb	r2, r3
   2d2b0:	0852      	lsrs	r2, r2, #1
   2d2b2:	01db      	lsls	r3, r3, #7
   2d2b4:	4313      	orrs	r3, r2
   2d2b6:	b2d9      	uxtb	r1, r3
   2d2b8:	687b      	ldr	r3, [r7, #4]
   2d2ba:	1c5a      	adds	r2, r3, #1
   2d2bc:	607a      	str	r2, [r7, #4]
   2d2be:	781a      	ldrb	r2, [r3, #0]
   2d2c0:	230f      	movs	r3, #15
   2d2c2:	18fb      	adds	r3, r7, r3
   2d2c4:	188a      	adds	r2, r1, r2
   2d2c6:	701a      	strb	r2, [r3, #0]
   2d2c8:	68bb      	ldr	r3, [r7, #8]
   2d2ca:	3b01      	subs	r3, #1
   2d2cc:	60bb      	str	r3, [r7, #8]
   2d2ce:	68bb      	ldr	r3, [r7, #8]
   2d2d0:	2b00      	cmp	r3, #0
   2d2d2:	d1e9      	bne.n	2d2a8 <sum_sfn+0x14>
	return sum;
   2d2d4:	230f      	movs	r3, #15
   2d2d6:	18fb      	adds	r3, r7, r3
   2d2d8:	781b      	ldrb	r3, [r3, #0]
}
   2d2da:	0018      	movs	r0, r3
   2d2dc:	46bd      	mov	sp, r7
   2d2de:	b004      	add	sp, #16
   2d2e0:	bd80      	pop	{r7, pc}
	...

0002d2e4 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
   2d2e4:	b590      	push	{r4, r7, lr}
   2d2e6:	b087      	sub	sp, #28
   2d2e8:	af00      	add	r7, sp, #0
   2d2ea:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
   2d2ec:	2317      	movs	r3, #23
   2d2ee:	18fc      	adds	r4, r7, r3
   2d2f0:	687b      	ldr	r3, [r7, #4]
   2d2f2:	2100      	movs	r1, #0
   2d2f4:	0018      	movs	r0, r3
   2d2f6:	4b74      	ldr	r3, [pc, #464]	; (2d4c8 <dir_find+0x1e4>)
   2d2f8:	4798      	blx	r3
   2d2fa:	0003      	movs	r3, r0
   2d2fc:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2d2fe:	2317      	movs	r3, #23
   2d300:	18fb      	adds	r3, r7, r3
   2d302:	781b      	ldrb	r3, [r3, #0]
   2d304:	2b00      	cmp	r3, #0
   2d306:	d003      	beq.n	2d310 <dir_find+0x2c>
   2d308:	2317      	movs	r3, #23
   2d30a:	18fb      	adds	r3, r7, r3
   2d30c:	781b      	ldrb	r3, [r3, #0]
   2d30e:	e0d6      	b.n	2d4be <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
   2d310:	2314      	movs	r3, #20
   2d312:	18fb      	adds	r3, r7, r3
   2d314:	22ff      	movs	r2, #255	; 0xff
   2d316:	701a      	strb	r2, [r3, #0]
   2d318:	2315      	movs	r3, #21
   2d31a:	18fb      	adds	r3, r7, r3
   2d31c:	2214      	movs	r2, #20
   2d31e:	18ba      	adds	r2, r7, r2
   2d320:	7812      	ldrb	r2, [r2, #0]
   2d322:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
   2d324:	687b      	ldr	r3, [r7, #4]
   2d326:	681a      	ldr	r2, [r3, #0]
   2d328:	687b      	ldr	r3, [r7, #4]
   2d32a:	691b      	ldr	r3, [r3, #16]
   2d32c:	2117      	movs	r1, #23
   2d32e:	187c      	adds	r4, r7, r1
   2d330:	0019      	movs	r1, r3
   2d332:	0010      	movs	r0, r2
   2d334:	4b65      	ldr	r3, [pc, #404]	; (2d4cc <dir_find+0x1e8>)
   2d336:	4798      	blx	r3
   2d338:	0003      	movs	r3, r0
   2d33a:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2d33c:	2317      	movs	r3, #23
   2d33e:	18fb      	adds	r3, r7, r3
   2d340:	781b      	ldrb	r3, [r3, #0]
   2d342:	2b00      	cmp	r3, #0
   2d344:	d000      	beq.n	2d348 <dir_find+0x64>
   2d346:	e0b2      	b.n	2d4ae <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   2d348:	687b      	ldr	r3, [r7, #4]
   2d34a:	695b      	ldr	r3, [r3, #20]
   2d34c:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
   2d34e:	2316      	movs	r3, #22
   2d350:	18fb      	adds	r3, r7, r3
   2d352:	693a      	ldr	r2, [r7, #16]
   2d354:	7812      	ldrb	r2, [r2, #0]
   2d356:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   2d358:	2316      	movs	r3, #22
   2d35a:	18fb      	adds	r3, r7, r3
   2d35c:	781b      	ldrb	r3, [r3, #0]
   2d35e:	2b00      	cmp	r3, #0
   2d360:	d104      	bne.n	2d36c <dir_find+0x88>
   2d362:	2317      	movs	r3, #23
   2d364:	18fb      	adds	r3, r7, r3
   2d366:	2204      	movs	r2, #4
   2d368:	701a      	strb	r2, [r3, #0]
   2d36a:	e0a5      	b.n	2d4b8 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
   2d36c:	693b      	ldr	r3, [r7, #16]
   2d36e:	330b      	adds	r3, #11
   2d370:	781a      	ldrb	r2, [r3, #0]
   2d372:	230f      	movs	r3, #15
   2d374:	18fb      	adds	r3, r7, r3
   2d376:	213f      	movs	r1, #63	; 0x3f
   2d378:	400a      	ands	r2, r1
   2d37a:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   2d37c:	2316      	movs	r3, #22
   2d37e:	18fb      	adds	r3, r7, r3
   2d380:	781b      	ldrb	r3, [r3, #0]
   2d382:	2be5      	cmp	r3, #229	; 0xe5
   2d384:	d00a      	beq.n	2d39c <dir_find+0xb8>
   2d386:	230f      	movs	r3, #15
   2d388:	18fb      	adds	r3, r7, r3
   2d38a:	781b      	ldrb	r3, [r3, #0]
   2d38c:	2208      	movs	r2, #8
   2d38e:	4013      	ands	r3, r2
   2d390:	d009      	beq.n	2d3a6 <dir_find+0xc2>
   2d392:	230f      	movs	r3, #15
   2d394:	18fb      	adds	r3, r7, r3
   2d396:	781b      	ldrb	r3, [r3, #0]
   2d398:	2b0f      	cmp	r3, #15
   2d39a:	d004      	beq.n	2d3a6 <dir_find+0xc2>
			ord = 0xFF;
   2d39c:	2315      	movs	r3, #21
   2d39e:	18fb      	adds	r3, r7, r3
   2d3a0:	22ff      	movs	r2, #255	; 0xff
   2d3a2:	701a      	strb	r2, [r3, #0]
   2d3a4:	e073      	b.n	2d48e <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
   2d3a6:	230f      	movs	r3, #15
   2d3a8:	18fb      	adds	r3, r7, r3
   2d3aa:	781b      	ldrb	r3, [r3, #0]
   2d3ac:	2b0f      	cmp	r3, #15
   2d3ae:	d145      	bne.n	2d43c <dir_find+0x158>
				if (dj->lfn) {
   2d3b0:	687b      	ldr	r3, [r7, #4]
   2d3b2:	69db      	ldr	r3, [r3, #28]
   2d3b4:	2b00      	cmp	r3, #0
   2d3b6:	d100      	bne.n	2d3ba <dir_find+0xd6>
   2d3b8:	e069      	b.n	2d48e <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   2d3ba:	2316      	movs	r3, #22
   2d3bc:	18fb      	adds	r3, r7, r3
   2d3be:	781b      	ldrb	r3, [r3, #0]
   2d3c0:	2240      	movs	r2, #64	; 0x40
   2d3c2:	4013      	ands	r3, r2
   2d3c4:	d016      	beq.n	2d3f4 <dir_find+0x110>
						sum = dir[LDIR_Chksum];
   2d3c6:	2314      	movs	r3, #20
   2d3c8:	18fb      	adds	r3, r7, r3
   2d3ca:	693a      	ldr	r2, [r7, #16]
   2d3cc:	7b52      	ldrb	r2, [r2, #13]
   2d3ce:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
   2d3d0:	2316      	movs	r3, #22
   2d3d2:	18fb      	adds	r3, r7, r3
   2d3d4:	2216      	movs	r2, #22
   2d3d6:	18ba      	adds	r2, r7, r2
   2d3d8:	7812      	ldrb	r2, [r2, #0]
   2d3da:	2140      	movs	r1, #64	; 0x40
   2d3dc:	438a      	bics	r2, r1
   2d3de:	701a      	strb	r2, [r3, #0]
   2d3e0:	2315      	movs	r3, #21
   2d3e2:	18fb      	adds	r3, r7, r3
   2d3e4:	2216      	movs	r2, #22
   2d3e6:	18ba      	adds	r2, r7, r2
   2d3e8:	7812      	ldrb	r2, [r2, #0]
   2d3ea:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
   2d3ec:	687b      	ldr	r3, [r7, #4]
   2d3ee:	88da      	ldrh	r2, [r3, #6]
   2d3f0:	687b      	ldr	r3, [r7, #4]
   2d3f2:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   2d3f4:	2316      	movs	r3, #22
   2d3f6:	18fa      	adds	r2, r7, r3
   2d3f8:	2315      	movs	r3, #21
   2d3fa:	18fb      	adds	r3, r7, r3
   2d3fc:	7812      	ldrb	r2, [r2, #0]
   2d3fe:	781b      	ldrb	r3, [r3, #0]
   2d400:	429a      	cmp	r2, r3
   2d402:	d116      	bne.n	2d432 <dir_find+0x14e>
   2d404:	693b      	ldr	r3, [r7, #16]
   2d406:	330d      	adds	r3, #13
   2d408:	781b      	ldrb	r3, [r3, #0]
   2d40a:	2214      	movs	r2, #20
   2d40c:	18ba      	adds	r2, r7, r2
   2d40e:	7812      	ldrb	r2, [r2, #0]
   2d410:	429a      	cmp	r2, r3
   2d412:	d10e      	bne.n	2d432 <dir_find+0x14e>
   2d414:	687b      	ldr	r3, [r7, #4]
   2d416:	69db      	ldr	r3, [r3, #28]
   2d418:	693a      	ldr	r2, [r7, #16]
   2d41a:	0011      	movs	r1, r2
   2d41c:	0018      	movs	r0, r3
   2d41e:	4b2c      	ldr	r3, [pc, #176]	; (2d4d0 <dir_find+0x1ec>)
   2d420:	4798      	blx	r3
   2d422:	1e03      	subs	r3, r0, #0
   2d424:	d005      	beq.n	2d432 <dir_find+0x14e>
   2d426:	2315      	movs	r3, #21
   2d428:	18fb      	adds	r3, r7, r3
   2d42a:	781b      	ldrb	r3, [r3, #0]
   2d42c:	3b01      	subs	r3, #1
   2d42e:	b2da      	uxtb	r2, r3
   2d430:	e000      	b.n	2d434 <dir_find+0x150>
   2d432:	22ff      	movs	r2, #255	; 0xff
   2d434:	2315      	movs	r3, #21
   2d436:	18fb      	adds	r3, r7, r3
   2d438:	701a      	strb	r2, [r3, #0]
   2d43a:	e028      	b.n	2d48e <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2d43c:	2315      	movs	r3, #21
   2d43e:	18fb      	adds	r3, r7, r3
   2d440:	781b      	ldrb	r3, [r3, #0]
   2d442:	2b00      	cmp	r3, #0
   2d444:	d10a      	bne.n	2d45c <dir_find+0x178>
   2d446:	693b      	ldr	r3, [r7, #16]
   2d448:	0018      	movs	r0, r3
   2d44a:	4b22      	ldr	r3, [pc, #136]	; (2d4d4 <dir_find+0x1f0>)
   2d44c:	4798      	blx	r3
   2d44e:	0003      	movs	r3, r0
   2d450:	001a      	movs	r2, r3
   2d452:	2314      	movs	r3, #20
   2d454:	18fb      	adds	r3, r7, r3
   2d456:	781b      	ldrb	r3, [r3, #0]
   2d458:	4293      	cmp	r3, r2
   2d45a:	d02a      	beq.n	2d4b2 <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   2d45c:	2315      	movs	r3, #21
   2d45e:	18fb      	adds	r3, r7, r3
   2d460:	22ff      	movs	r2, #255	; 0xff
   2d462:	701a      	strb	r2, [r3, #0]
   2d464:	687b      	ldr	r3, [r7, #4]
   2d466:	2201      	movs	r2, #1
   2d468:	4252      	negs	r2, r2
   2d46a:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2d46c:	687b      	ldr	r3, [r7, #4]
   2d46e:	699b      	ldr	r3, [r3, #24]
   2d470:	330b      	adds	r3, #11
   2d472:	781b      	ldrb	r3, [r3, #0]
   2d474:	001a      	movs	r2, r3
   2d476:	2301      	movs	r3, #1
   2d478:	4013      	ands	r3, r2
   2d47a:	d108      	bne.n	2d48e <dir_find+0x1aa>
   2d47c:	687b      	ldr	r3, [r7, #4]
   2d47e:	6999      	ldr	r1, [r3, #24]
   2d480:	693b      	ldr	r3, [r7, #16]
   2d482:	220b      	movs	r2, #11
   2d484:	0018      	movs	r0, r3
   2d486:	4b14      	ldr	r3, [pc, #80]	; (2d4d8 <dir_find+0x1f4>)
   2d488:	4798      	blx	r3
   2d48a:	1e03      	subs	r3, r0, #0
   2d48c:	d013      	beq.n	2d4b6 <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
   2d48e:	2317      	movs	r3, #23
   2d490:	18fc      	adds	r4, r7, r3
   2d492:	687b      	ldr	r3, [r7, #4]
   2d494:	2100      	movs	r1, #0
   2d496:	0018      	movs	r0, r3
   2d498:	4b10      	ldr	r3, [pc, #64]	; (2d4dc <dir_find+0x1f8>)
   2d49a:	4798      	blx	r3
   2d49c:	0003      	movs	r3, r0
   2d49e:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2d4a0:	2317      	movs	r3, #23
   2d4a2:	18fb      	adds	r3, r7, r3
   2d4a4:	781b      	ldrb	r3, [r3, #0]
   2d4a6:	2b00      	cmp	r3, #0
   2d4a8:	d100      	bne.n	2d4ac <dir_find+0x1c8>
   2d4aa:	e73b      	b.n	2d324 <dir_find+0x40>
   2d4ac:	e004      	b.n	2d4b8 <dir_find+0x1d4>
		if (res != FR_OK) break;
   2d4ae:	46c0      	nop			; (mov r8, r8)
   2d4b0:	e002      	b.n	2d4b8 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2d4b2:	46c0      	nop			; (mov r8, r8)
   2d4b4:	e000      	b.n	2d4b8 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2d4b6:	46c0      	nop			; (mov r8, r8)

	return res;
   2d4b8:	2317      	movs	r3, #23
   2d4ba:	18fb      	adds	r3, r7, r3
   2d4bc:	781b      	ldrb	r3, [r3, #0]
}
   2d4be:	0018      	movs	r0, r3
   2d4c0:	46bd      	mov	sp, r7
   2d4c2:	b007      	add	sp, #28
   2d4c4:	bd90      	pop	{r4, r7, pc}
   2d4c6:	46c0      	nop			; (mov r8, r8)
   2d4c8:	0002cc61 	.word	0x0002cc61
   2d4cc:	0002c41d 	.word	0x0002c41d
   2d4d0:	0002cf81 	.word	0x0002cf81
   2d4d4:	0002d295 	.word	0x0002d295
   2d4d8:	0002c3a1 	.word	0x0002c3a1
   2d4dc:	0002cd91 	.word	0x0002cd91

0002d4e0 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
   2d4e0:	b590      	push	{r4, r7, lr}
   2d4e2:	b08d      	sub	sp, #52	; 0x34
   2d4e4:	af00      	add	r7, sp, #0
   2d4e6:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
   2d4e8:	687b      	ldr	r3, [r7, #4]
   2d4ea:	699b      	ldr	r3, [r3, #24]
   2d4ec:	627b      	str	r3, [r7, #36]	; 0x24
   2d4ee:	687b      	ldr	r3, [r7, #4]
   2d4f0:	69db      	ldr	r3, [r3, #28]
   2d4f2:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
   2d4f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2d4f6:	230c      	movs	r3, #12
   2d4f8:	18fb      	adds	r3, r7, r3
   2d4fa:	220c      	movs	r2, #12
   2d4fc:	0018      	movs	r0, r3
   2d4fe:	4bc8      	ldr	r3, [pc, #800]	; (2d820 <dir_register+0x340>)
   2d500:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   2d502:	230c      	movs	r3, #12
   2d504:	18fb      	adds	r3, r7, r3
   2d506:	7adb      	ldrb	r3, [r3, #11]
   2d508:	001a      	movs	r2, r3
   2d50a:	2301      	movs	r3, #1
   2d50c:	4013      	ands	r3, r2
   2d50e:	d048      	beq.n	2d5a2 <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   2d510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d512:	330b      	adds	r3, #11
   2d514:	2200      	movs	r2, #0
   2d516:	701a      	strb	r2, [r3, #0]
   2d518:	687b      	ldr	r3, [r7, #4]
   2d51a:	2200      	movs	r2, #0
   2d51c:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
   2d51e:	232c      	movs	r3, #44	; 0x2c
   2d520:	18fb      	adds	r3, r7, r3
   2d522:	2201      	movs	r2, #1
   2d524:	801a      	strh	r2, [r3, #0]
   2d526:	e01c      	b.n	2d562 <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
   2d528:	232c      	movs	r3, #44	; 0x2c
   2d52a:	18fb      	adds	r3, r7, r3
   2d52c:	881b      	ldrh	r3, [r3, #0]
   2d52e:	6a3a      	ldr	r2, [r7, #32]
   2d530:	210c      	movs	r1, #12
   2d532:	1879      	adds	r1, r7, r1
   2d534:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2d536:	4cbb      	ldr	r4, [pc, #748]	; (2d824 <dir_register+0x344>)
   2d538:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   2d53a:	232f      	movs	r3, #47	; 0x2f
   2d53c:	18fc      	adds	r4, r7, r3
   2d53e:	687b      	ldr	r3, [r7, #4]
   2d540:	0018      	movs	r0, r3
   2d542:	4bb9      	ldr	r3, [pc, #740]	; (2d828 <dir_register+0x348>)
   2d544:	4798      	blx	r3
   2d546:	0003      	movs	r3, r0
   2d548:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2d54a:	232f      	movs	r3, #47	; 0x2f
   2d54c:	18fb      	adds	r3, r7, r3
   2d54e:	781b      	ldrb	r3, [r3, #0]
   2d550:	2b00      	cmp	r3, #0
   2d552:	d10c      	bne.n	2d56e <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
   2d554:	232c      	movs	r3, #44	; 0x2c
   2d556:	18fb      	adds	r3, r7, r3
   2d558:	881a      	ldrh	r2, [r3, #0]
   2d55a:	232c      	movs	r3, #44	; 0x2c
   2d55c:	18fb      	adds	r3, r7, r3
   2d55e:	3201      	adds	r2, #1
   2d560:	801a      	strh	r2, [r3, #0]
   2d562:	232c      	movs	r3, #44	; 0x2c
   2d564:	18fb      	adds	r3, r7, r3
   2d566:	881b      	ldrh	r3, [r3, #0]
   2d568:	2b63      	cmp	r3, #99	; 0x63
   2d56a:	d9dd      	bls.n	2d528 <dir_register+0x48>
   2d56c:	e000      	b.n	2d570 <dir_register+0x90>
			if (res != FR_OK) break;
   2d56e:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   2d570:	232c      	movs	r3, #44	; 0x2c
   2d572:	18fb      	adds	r3, r7, r3
   2d574:	881b      	ldrh	r3, [r3, #0]
   2d576:	2b64      	cmp	r3, #100	; 0x64
   2d578:	d101      	bne.n	2d57e <dir_register+0x9e>
   2d57a:	2307      	movs	r3, #7
   2d57c:	e14c      	b.n	2d818 <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   2d57e:	232f      	movs	r3, #47	; 0x2f
   2d580:	18fb      	adds	r3, r7, r3
   2d582:	781b      	ldrb	r3, [r3, #0]
   2d584:	2b04      	cmp	r3, #4
   2d586:	d003      	beq.n	2d590 <dir_register+0xb0>
   2d588:	232f      	movs	r3, #47	; 0x2f
   2d58a:	18fb      	adds	r3, r7, r3
   2d58c:	781b      	ldrb	r3, [r3, #0]
   2d58e:	e143      	b.n	2d818 <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
   2d590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d592:	330b      	adds	r3, #11
   2d594:	220c      	movs	r2, #12
   2d596:	18ba      	adds	r2, r7, r2
   2d598:	7ad2      	ldrb	r2, [r2, #11]
   2d59a:	701a      	strb	r2, [r3, #0]
   2d59c:	687b      	ldr	r3, [r7, #4]
   2d59e:	6a3a      	ldr	r2, [r7, #32]
   2d5a0:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   2d5a2:	230c      	movs	r3, #12
   2d5a4:	18fb      	adds	r3, r7, r3
   2d5a6:	7adb      	ldrb	r3, [r3, #11]
   2d5a8:	001a      	movs	r2, r3
   2d5aa:	2302      	movs	r3, #2
   2d5ac:	4013      	ands	r3, r2
   2d5ae:	d023      	beq.n	2d5f8 <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
   2d5b0:	232a      	movs	r3, #42	; 0x2a
   2d5b2:	18fb      	adds	r3, r7, r3
   2d5b4:	2200      	movs	r2, #0
   2d5b6:	801a      	strh	r2, [r3, #0]
   2d5b8:	e006      	b.n	2d5c8 <dir_register+0xe8>
   2d5ba:	232a      	movs	r3, #42	; 0x2a
   2d5bc:	18fb      	adds	r3, r7, r3
   2d5be:	881a      	ldrh	r2, [r3, #0]
   2d5c0:	232a      	movs	r3, #42	; 0x2a
   2d5c2:	18fb      	adds	r3, r7, r3
   2d5c4:	3201      	adds	r2, #1
   2d5c6:	801a      	strh	r2, [r3, #0]
   2d5c8:	232a      	movs	r3, #42	; 0x2a
   2d5ca:	18fb      	adds	r3, r7, r3
   2d5cc:	881b      	ldrh	r3, [r3, #0]
   2d5ce:	005b      	lsls	r3, r3, #1
   2d5d0:	6a3a      	ldr	r2, [r7, #32]
   2d5d2:	18d3      	adds	r3, r2, r3
   2d5d4:	881b      	ldrh	r3, [r3, #0]
   2d5d6:	2b00      	cmp	r3, #0
   2d5d8:	d1ef      	bne.n	2d5ba <dir_register+0xda>
		ne = (ne + 25) / 13;
   2d5da:	232a      	movs	r3, #42	; 0x2a
   2d5dc:	18fb      	adds	r3, r7, r3
   2d5de:	881b      	ldrh	r3, [r3, #0]
   2d5e0:	3319      	adds	r3, #25
   2d5e2:	001a      	movs	r2, r3
   2d5e4:	4b91      	ldr	r3, [pc, #580]	; (2d82c <dir_register+0x34c>)
   2d5e6:	210d      	movs	r1, #13
   2d5e8:	0010      	movs	r0, r2
   2d5ea:	4798      	blx	r3
   2d5ec:	0003      	movs	r3, r0
   2d5ee:	001a      	movs	r2, r3
   2d5f0:	232a      	movs	r3, #42	; 0x2a
   2d5f2:	18fb      	adds	r3, r7, r3
   2d5f4:	801a      	strh	r2, [r3, #0]
   2d5f6:	e003      	b.n	2d600 <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
   2d5f8:	232a      	movs	r3, #42	; 0x2a
   2d5fa:	18fb      	adds	r3, r7, r3
   2d5fc:	2201      	movs	r2, #1
   2d5fe:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
   2d600:	232f      	movs	r3, #47	; 0x2f
   2d602:	18fc      	adds	r4, r7, r3
   2d604:	687b      	ldr	r3, [r7, #4]
   2d606:	2100      	movs	r1, #0
   2d608:	0018      	movs	r0, r3
   2d60a:	4b89      	ldr	r3, [pc, #548]	; (2d830 <dir_register+0x350>)
   2d60c:	4798      	blx	r3
   2d60e:	0003      	movs	r3, r0
   2d610:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2d612:	232f      	movs	r3, #47	; 0x2f
   2d614:	18fb      	adds	r3, r7, r3
   2d616:	781b      	ldrb	r3, [r3, #0]
   2d618:	2b00      	cmp	r3, #0
   2d61a:	d003      	beq.n	2d624 <dir_register+0x144>
   2d61c:	232f      	movs	r3, #47	; 0x2f
   2d61e:	18fb      	adds	r3, r7, r3
   2d620:	781b      	ldrb	r3, [r3, #0]
   2d622:	e0f9      	b.n	2d818 <dir_register+0x338>
	n = is = 0;
   2d624:	2328      	movs	r3, #40	; 0x28
   2d626:	18fb      	adds	r3, r7, r3
   2d628:	2200      	movs	r2, #0
   2d62a:	801a      	strh	r2, [r3, #0]
   2d62c:	232c      	movs	r3, #44	; 0x2c
   2d62e:	18fb      	adds	r3, r7, r3
   2d630:	2228      	movs	r2, #40	; 0x28
   2d632:	18ba      	adds	r2, r7, r2
   2d634:	8812      	ldrh	r2, [r2, #0]
   2d636:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
   2d638:	687b      	ldr	r3, [r7, #4]
   2d63a:	681a      	ldr	r2, [r3, #0]
   2d63c:	687b      	ldr	r3, [r7, #4]
   2d63e:	691b      	ldr	r3, [r3, #16]
   2d640:	212f      	movs	r1, #47	; 0x2f
   2d642:	187c      	adds	r4, r7, r1
   2d644:	0019      	movs	r1, r3
   2d646:	0010      	movs	r0, r2
   2d648:	4b7a      	ldr	r3, [pc, #488]	; (2d834 <dir_register+0x354>)
   2d64a:	4798      	blx	r3
   2d64c:	0003      	movs	r3, r0
   2d64e:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2d650:	232f      	movs	r3, #47	; 0x2f
   2d652:	18fb      	adds	r3, r7, r3
   2d654:	781b      	ldrb	r3, [r3, #0]
   2d656:	2b00      	cmp	r3, #0
   2d658:	d13c      	bne.n	2d6d4 <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
   2d65a:	687b      	ldr	r3, [r7, #4]
   2d65c:	695a      	ldr	r2, [r3, #20]
   2d65e:	231f      	movs	r3, #31
   2d660:	18fb      	adds	r3, r7, r3
   2d662:	7812      	ldrb	r2, [r2, #0]
   2d664:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   2d666:	231f      	movs	r3, #31
   2d668:	18fb      	adds	r3, r7, r3
   2d66a:	781b      	ldrb	r3, [r3, #0]
   2d66c:	2be5      	cmp	r3, #229	; 0xe5
   2d66e:	d004      	beq.n	2d67a <dir_register+0x19a>
   2d670:	231f      	movs	r3, #31
   2d672:	18fb      	adds	r3, r7, r3
   2d674:	781b      	ldrb	r3, [r3, #0]
   2d676:	2b00      	cmp	r3, #0
   2d678:	d119      	bne.n	2d6ae <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   2d67a:	232c      	movs	r3, #44	; 0x2c
   2d67c:	18fb      	adds	r3, r7, r3
   2d67e:	881b      	ldrh	r3, [r3, #0]
   2d680:	2b00      	cmp	r3, #0
   2d682:	d104      	bne.n	2d68e <dir_register+0x1ae>
   2d684:	2328      	movs	r3, #40	; 0x28
   2d686:	18fb      	adds	r3, r7, r3
   2d688:	687a      	ldr	r2, [r7, #4]
   2d68a:	88d2      	ldrh	r2, [r2, #6]
   2d68c:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   2d68e:	232c      	movs	r3, #44	; 0x2c
   2d690:	18fb      	adds	r3, r7, r3
   2d692:	222c      	movs	r2, #44	; 0x2c
   2d694:	18ba      	adds	r2, r7, r2
   2d696:	8812      	ldrh	r2, [r2, #0]
   2d698:	3201      	adds	r2, #1
   2d69a:	801a      	strh	r2, [r3, #0]
   2d69c:	232c      	movs	r3, #44	; 0x2c
   2d69e:	18fa      	adds	r2, r7, r3
   2d6a0:	232a      	movs	r3, #42	; 0x2a
   2d6a2:	18fb      	adds	r3, r7, r3
   2d6a4:	8812      	ldrh	r2, [r2, #0]
   2d6a6:	881b      	ldrh	r3, [r3, #0]
   2d6a8:	429a      	cmp	r2, r3
   2d6aa:	d104      	bne.n	2d6b6 <dir_register+0x1d6>
   2d6ac:	e013      	b.n	2d6d6 <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
   2d6ae:	232c      	movs	r3, #44	; 0x2c
   2d6b0:	18fb      	adds	r3, r7, r3
   2d6b2:	2200      	movs	r2, #0
   2d6b4:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   2d6b6:	232f      	movs	r3, #47	; 0x2f
   2d6b8:	18fc      	adds	r4, r7, r3
   2d6ba:	687b      	ldr	r3, [r7, #4]
   2d6bc:	2101      	movs	r1, #1
   2d6be:	0018      	movs	r0, r3
   2d6c0:	4b5d      	ldr	r3, [pc, #372]	; (2d838 <dir_register+0x358>)
   2d6c2:	4798      	blx	r3
   2d6c4:	0003      	movs	r3, r0
   2d6c6:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2d6c8:	232f      	movs	r3, #47	; 0x2f
   2d6ca:	18fb      	adds	r3, r7, r3
   2d6cc:	781b      	ldrb	r3, [r3, #0]
   2d6ce:	2b00      	cmp	r3, #0
   2d6d0:	d0b2      	beq.n	2d638 <dir_register+0x158>
   2d6d2:	e000      	b.n	2d6d6 <dir_register+0x1f6>
		if (res != FR_OK) break;
   2d6d4:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   2d6d6:	232f      	movs	r3, #47	; 0x2f
   2d6d8:	18fb      	adds	r3, r7, r3
   2d6da:	781b      	ldrb	r3, [r3, #0]
   2d6dc:	2b00      	cmp	r3, #0
   2d6de:	d163      	bne.n	2d7a8 <dir_register+0x2c8>
   2d6e0:	232a      	movs	r3, #42	; 0x2a
   2d6e2:	18fb      	adds	r3, r7, r3
   2d6e4:	881b      	ldrh	r3, [r3, #0]
   2d6e6:	2b01      	cmp	r3, #1
   2d6e8:	d95e      	bls.n	2d7a8 <dir_register+0x2c8>
		res = dir_sdi(dj, is);
   2d6ea:	232f      	movs	r3, #47	; 0x2f
   2d6ec:	18fc      	adds	r4, r7, r3
   2d6ee:	2328      	movs	r3, #40	; 0x28
   2d6f0:	18fb      	adds	r3, r7, r3
   2d6f2:	881a      	ldrh	r2, [r3, #0]
   2d6f4:	687b      	ldr	r3, [r7, #4]
   2d6f6:	0011      	movs	r1, r2
   2d6f8:	0018      	movs	r0, r3
   2d6fa:	4b4d      	ldr	r3, [pc, #308]	; (2d830 <dir_register+0x350>)
   2d6fc:	4798      	blx	r3
   2d6fe:	0003      	movs	r3, r0
   2d700:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2d702:	232f      	movs	r3, #47	; 0x2f
   2d704:	18fb      	adds	r3, r7, r3
   2d706:	781b      	ldrb	r3, [r3, #0]
   2d708:	2b00      	cmp	r3, #0
   2d70a:	d14d      	bne.n	2d7a8 <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   2d70c:	687b      	ldr	r3, [r7, #4]
   2d70e:	699b      	ldr	r3, [r3, #24]
   2d710:	221e      	movs	r2, #30
   2d712:	18bc      	adds	r4, r7, r2
   2d714:	0018      	movs	r0, r3
   2d716:	4b49      	ldr	r3, [pc, #292]	; (2d83c <dir_register+0x35c>)
   2d718:	4798      	blx	r3
   2d71a:	0003      	movs	r3, r0
   2d71c:	7023      	strb	r3, [r4, #0]
			ne--;
   2d71e:	232a      	movs	r3, #42	; 0x2a
   2d720:	18fb      	adds	r3, r7, r3
   2d722:	881a      	ldrh	r2, [r3, #0]
   2d724:	232a      	movs	r3, #42	; 0x2a
   2d726:	18fb      	adds	r3, r7, r3
   2d728:	3a01      	subs	r2, #1
   2d72a:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
   2d72c:	687b      	ldr	r3, [r7, #4]
   2d72e:	681a      	ldr	r2, [r3, #0]
   2d730:	687b      	ldr	r3, [r7, #4]
   2d732:	691b      	ldr	r3, [r3, #16]
   2d734:	212f      	movs	r1, #47	; 0x2f
   2d736:	187c      	adds	r4, r7, r1
   2d738:	0019      	movs	r1, r3
   2d73a:	0010      	movs	r0, r2
   2d73c:	4b3d      	ldr	r3, [pc, #244]	; (2d834 <dir_register+0x354>)
   2d73e:	4798      	blx	r3
   2d740:	0003      	movs	r3, r0
   2d742:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
   2d744:	232f      	movs	r3, #47	; 0x2f
   2d746:	18fb      	adds	r3, r7, r3
   2d748:	781b      	ldrb	r3, [r3, #0]
   2d74a:	2b00      	cmp	r3, #0
   2d74c:	d12b      	bne.n	2d7a6 <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   2d74e:	687b      	ldr	r3, [r7, #4]
   2d750:	69d8      	ldr	r0, [r3, #28]
   2d752:	687b      	ldr	r3, [r7, #4]
   2d754:	6959      	ldr	r1, [r3, #20]
   2d756:	232a      	movs	r3, #42	; 0x2a
   2d758:	18fb      	adds	r3, r7, r3
   2d75a:	881b      	ldrh	r3, [r3, #0]
   2d75c:	b2da      	uxtb	r2, r3
   2d75e:	231e      	movs	r3, #30
   2d760:	18fb      	adds	r3, r7, r3
   2d762:	781b      	ldrb	r3, [r3, #0]
   2d764:	4c36      	ldr	r4, [pc, #216]	; (2d840 <dir_register+0x360>)
   2d766:	47a0      	blx	r4
				dj->fs->wflag = 1;
   2d768:	687b      	ldr	r3, [r7, #4]
   2d76a:	681b      	ldr	r3, [r3, #0]
   2d76c:	2201      	movs	r2, #1
   2d76e:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
   2d770:	232f      	movs	r3, #47	; 0x2f
   2d772:	18fc      	adds	r4, r7, r3
   2d774:	687b      	ldr	r3, [r7, #4]
   2d776:	2100      	movs	r1, #0
   2d778:	0018      	movs	r0, r3
   2d77a:	4b2f      	ldr	r3, [pc, #188]	; (2d838 <dir_register+0x358>)
   2d77c:	4798      	blx	r3
   2d77e:	0003      	movs	r3, r0
   2d780:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
   2d782:	232f      	movs	r3, #47	; 0x2f
   2d784:	18fb      	adds	r3, r7, r3
   2d786:	781b      	ldrb	r3, [r3, #0]
   2d788:	2b00      	cmp	r3, #0
   2d78a:	d10d      	bne.n	2d7a8 <dir_register+0x2c8>
   2d78c:	232a      	movs	r3, #42	; 0x2a
   2d78e:	18fb      	adds	r3, r7, r3
   2d790:	222a      	movs	r2, #42	; 0x2a
   2d792:	18ba      	adds	r2, r7, r2
   2d794:	8812      	ldrh	r2, [r2, #0]
   2d796:	3a01      	subs	r2, #1
   2d798:	801a      	strh	r2, [r3, #0]
   2d79a:	232a      	movs	r3, #42	; 0x2a
   2d79c:	18fb      	adds	r3, r7, r3
   2d79e:	881b      	ldrh	r3, [r3, #0]
   2d7a0:	2b00      	cmp	r3, #0
   2d7a2:	d1c3      	bne.n	2d72c <dir_register+0x24c>
   2d7a4:	e000      	b.n	2d7a8 <dir_register+0x2c8>
				if (res != FR_OK) break;
   2d7a6:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
   2d7a8:	232f      	movs	r3, #47	; 0x2f
   2d7aa:	18fb      	adds	r3, r7, r3
   2d7ac:	781b      	ldrb	r3, [r3, #0]
   2d7ae:	2b00      	cmp	r3, #0
   2d7b0:	d12f      	bne.n	2d812 <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
   2d7b2:	687b      	ldr	r3, [r7, #4]
   2d7b4:	681a      	ldr	r2, [r3, #0]
   2d7b6:	687b      	ldr	r3, [r7, #4]
   2d7b8:	691b      	ldr	r3, [r3, #16]
   2d7ba:	212f      	movs	r1, #47	; 0x2f
   2d7bc:	187c      	adds	r4, r7, r1
   2d7be:	0019      	movs	r1, r3
   2d7c0:	0010      	movs	r0, r2
   2d7c2:	4b1c      	ldr	r3, [pc, #112]	; (2d834 <dir_register+0x354>)
   2d7c4:	4798      	blx	r3
   2d7c6:	0003      	movs	r3, r0
   2d7c8:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2d7ca:	232f      	movs	r3, #47	; 0x2f
   2d7cc:	18fb      	adds	r3, r7, r3
   2d7ce:	781b      	ldrb	r3, [r3, #0]
   2d7d0:	2b00      	cmp	r3, #0
   2d7d2:	d11e      	bne.n	2d812 <dir_register+0x332>
			dir = dj->dir;
   2d7d4:	687b      	ldr	r3, [r7, #4]
   2d7d6:	695b      	ldr	r3, [r3, #20]
   2d7d8:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   2d7da:	69bb      	ldr	r3, [r7, #24]
   2d7dc:	2220      	movs	r2, #32
   2d7de:	2100      	movs	r1, #0
   2d7e0:	0018      	movs	r0, r3
   2d7e2:	4b18      	ldr	r3, [pc, #96]	; (2d844 <dir_register+0x364>)
   2d7e4:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   2d7e6:	687b      	ldr	r3, [r7, #4]
   2d7e8:	6999      	ldr	r1, [r3, #24]
   2d7ea:	69bb      	ldr	r3, [r7, #24]
   2d7ec:	220b      	movs	r2, #11
   2d7ee:	0018      	movs	r0, r3
   2d7f0:	4b0b      	ldr	r3, [pc, #44]	; (2d820 <dir_register+0x340>)
   2d7f2:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   2d7f4:	69bb      	ldr	r3, [r7, #24]
   2d7f6:	330c      	adds	r3, #12
   2d7f8:	001a      	movs	r2, r3
   2d7fa:	687b      	ldr	r3, [r7, #4]
   2d7fc:	699b      	ldr	r3, [r3, #24]
   2d7fe:	330b      	adds	r3, #11
   2d800:	781b      	ldrb	r3, [r3, #0]
   2d802:	2118      	movs	r1, #24
   2d804:	400b      	ands	r3, r1
   2d806:	b2db      	uxtb	r3, r3
   2d808:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
   2d80a:	687b      	ldr	r3, [r7, #4]
   2d80c:	681b      	ldr	r3, [r3, #0]
   2d80e:	2201      	movs	r2, #1
   2d810:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
   2d812:	232f      	movs	r3, #47	; 0x2f
   2d814:	18fb      	adds	r3, r7, r3
   2d816:	781b      	ldrb	r3, [r3, #0]
}
   2d818:	0018      	movs	r0, r3
   2d81a:	46bd      	mov	sp, r7
   2d81c:	b00d      	add	sp, #52	; 0x34
   2d81e:	bd90      	pop	{r4, r7, pc}
   2d820:	0002c339 	.word	0x0002c339
   2d824:	0002d195 	.word	0x0002d195
   2d828:	0002d2e5 	.word	0x0002d2e5
   2d82c:	00033729 	.word	0x00033729
   2d830:	0002cc61 	.word	0x0002cc61
   2d834:	0002c41d 	.word	0x0002c41d
   2d838:	0002cd91 	.word	0x0002cd91
   2d83c:	0002d295 	.word	0x0002d295
   2d840:	0002d085 	.word	0x0002d085
   2d844:	0002c371 	.word	0x0002c371

0002d848 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
   2d848:	b590      	push	{r4, r7, lr}
   2d84a:	b08b      	sub	sp, #44	; 0x2c
   2d84c:	af00      	add	r7, sp, #0
   2d84e:	6078      	str	r0, [r7, #4]
   2d850:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   2d852:	683b      	ldr	r3, [r7, #0]
   2d854:	681b      	ldr	r3, [r3, #0]
   2d856:	613b      	str	r3, [r7, #16]
   2d858:	e002      	b.n	2d860 <create_name+0x18>
   2d85a:	693b      	ldr	r3, [r7, #16]
   2d85c:	3301      	adds	r3, #1
   2d85e:	613b      	str	r3, [r7, #16]
   2d860:	693b      	ldr	r3, [r7, #16]
   2d862:	781b      	ldrb	r3, [r3, #0]
   2d864:	2b2f      	cmp	r3, #47	; 0x2f
   2d866:	d0f8      	beq.n	2d85a <create_name+0x12>
   2d868:	693b      	ldr	r3, [r7, #16]
   2d86a:	781b      	ldrb	r3, [r3, #0]
   2d86c:	2b5c      	cmp	r3, #92	; 0x5c
   2d86e:	d0f4      	beq.n	2d85a <create_name+0x12>
	lfn = dj->lfn;
   2d870:	687b      	ldr	r3, [r7, #4]
   2d872:	69db      	ldr	r3, [r3, #28]
   2d874:	60fb      	str	r3, [r7, #12]
	si = di = 0;
   2d876:	2300      	movs	r3, #0
   2d878:	617b      	str	r3, [r7, #20]
   2d87a:	697b      	ldr	r3, [r7, #20]
   2d87c:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
   2d87e:	69bb      	ldr	r3, [r7, #24]
   2d880:	1c5a      	adds	r2, r3, #1
   2d882:	61ba      	str	r2, [r7, #24]
   2d884:	693a      	ldr	r2, [r7, #16]
   2d886:	18d3      	adds	r3, r2, r3
   2d888:	781a      	ldrb	r2, [r3, #0]
   2d88a:	2324      	movs	r3, #36	; 0x24
   2d88c:	18fb      	adds	r3, r7, r3
   2d88e:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   2d890:	2324      	movs	r3, #36	; 0x24
   2d892:	18fb      	adds	r3, r7, r3
   2d894:	881b      	ldrh	r3, [r3, #0]
   2d896:	2b1f      	cmp	r3, #31
   2d898:	d944      	bls.n	2d924 <create_name+0xdc>
   2d89a:	2324      	movs	r3, #36	; 0x24
   2d89c:	18fb      	adds	r3, r7, r3
   2d89e:	881b      	ldrh	r3, [r3, #0]
   2d8a0:	2b2f      	cmp	r3, #47	; 0x2f
   2d8a2:	d03f      	beq.n	2d924 <create_name+0xdc>
   2d8a4:	2324      	movs	r3, #36	; 0x24
   2d8a6:	18fb      	adds	r3, r7, r3
   2d8a8:	881b      	ldrh	r3, [r3, #0]
   2d8aa:	2b5c      	cmp	r3, #92	; 0x5c
   2d8ac:	d03a      	beq.n	2d924 <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
   2d8ae:	697b      	ldr	r3, [r7, #20]
   2d8b0:	2bfe      	cmp	r3, #254	; 0xfe
   2d8b2:	d901      	bls.n	2d8b8 <create_name+0x70>
			return FR_INVALID_NAME;
   2d8b4:	2306      	movs	r3, #6
   2d8b6:	e1e7      	b.n	2dc88 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
   2d8b8:	2324      	movs	r3, #36	; 0x24
   2d8ba:	18fb      	adds	r3, r7, r3
   2d8bc:	2224      	movs	r2, #36	; 0x24
   2d8be:	18ba      	adds	r2, r7, r2
   2d8c0:	8812      	ldrh	r2, [r2, #0]
   2d8c2:	21ff      	movs	r1, #255	; 0xff
   2d8c4:	400a      	ands	r2, r1
   2d8c6:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   2d8c8:	2324      	movs	r3, #36	; 0x24
   2d8ca:	18fc      	adds	r4, r7, r3
   2d8cc:	2324      	movs	r3, #36	; 0x24
   2d8ce:	18fb      	adds	r3, r7, r3
   2d8d0:	881b      	ldrh	r3, [r3, #0]
   2d8d2:	2101      	movs	r1, #1
   2d8d4:	0018      	movs	r0, r3
   2d8d6:	4bba      	ldr	r3, [pc, #744]	; (2dbc0 <create_name+0x378>)
   2d8d8:	4798      	blx	r3
   2d8da:	0003      	movs	r3, r0
   2d8dc:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   2d8de:	2324      	movs	r3, #36	; 0x24
   2d8e0:	18fb      	adds	r3, r7, r3
   2d8e2:	881b      	ldrh	r3, [r3, #0]
   2d8e4:	2b00      	cmp	r3, #0
   2d8e6:	d101      	bne.n	2d8ec <create_name+0xa4>
   2d8e8:	2306      	movs	r3, #6
   2d8ea:	e1cd      	b.n	2dc88 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   2d8ec:	2324      	movs	r3, #36	; 0x24
   2d8ee:	18fb      	adds	r3, r7, r3
   2d8f0:	881b      	ldrh	r3, [r3, #0]
   2d8f2:	2b7f      	cmp	r3, #127	; 0x7f
   2d8f4:	d80b      	bhi.n	2d90e <create_name+0xc6>
   2d8f6:	2324      	movs	r3, #36	; 0x24
   2d8f8:	18fb      	adds	r3, r7, r3
   2d8fa:	881a      	ldrh	r2, [r3, #0]
   2d8fc:	4bb1      	ldr	r3, [pc, #708]	; (2dbc4 <create_name+0x37c>)
   2d8fe:	0011      	movs	r1, r2
   2d900:	0018      	movs	r0, r3
   2d902:	4bb1      	ldr	r3, [pc, #708]	; (2dbc8 <create_name+0x380>)
   2d904:	4798      	blx	r3
   2d906:	1e03      	subs	r3, r0, #0
   2d908:	d001      	beq.n	2d90e <create_name+0xc6>
			return FR_INVALID_NAME;
   2d90a:	2306      	movs	r3, #6
   2d90c:	e1bc      	b.n	2dc88 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
   2d90e:	697b      	ldr	r3, [r7, #20]
   2d910:	1c5a      	adds	r2, r3, #1
   2d912:	617a      	str	r2, [r7, #20]
   2d914:	005b      	lsls	r3, r3, #1
   2d916:	68fa      	ldr	r2, [r7, #12]
   2d918:	18d3      	adds	r3, r2, r3
   2d91a:	2224      	movs	r2, #36	; 0x24
   2d91c:	18ba      	adds	r2, r7, r2
   2d91e:	8812      	ldrh	r2, [r2, #0]
   2d920:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
   2d922:	e7ac      	b.n	2d87e <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
   2d924:	693a      	ldr	r2, [r7, #16]
   2d926:	69bb      	ldr	r3, [r7, #24]
   2d928:	18d2      	adds	r2, r2, r3
   2d92a:	683b      	ldr	r3, [r7, #0]
   2d92c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   2d92e:	2324      	movs	r3, #36	; 0x24
   2d930:	18fb      	adds	r3, r7, r3
   2d932:	881b      	ldrh	r3, [r3, #0]
   2d934:	2b1f      	cmp	r3, #31
   2d936:	d801      	bhi.n	2d93c <create_name+0xf4>
   2d938:	2204      	movs	r2, #4
   2d93a:	e000      	b.n	2d93e <create_name+0xf6>
   2d93c:	2200      	movs	r2, #0
   2d93e:	2326      	movs	r3, #38	; 0x26
   2d940:	18fb      	adds	r3, r7, r3
   2d942:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
   2d944:	e017      	b.n	2d976 <create_name+0x12e>
		w = lfn[di-1];
   2d946:	697b      	ldr	r3, [r7, #20]
   2d948:	4aa0      	ldr	r2, [pc, #640]	; (2dbcc <create_name+0x384>)
   2d94a:	4694      	mov	ip, r2
   2d94c:	4463      	add	r3, ip
   2d94e:	005b      	lsls	r3, r3, #1
   2d950:	68fa      	ldr	r2, [r7, #12]
   2d952:	18d2      	adds	r2, r2, r3
   2d954:	2324      	movs	r3, #36	; 0x24
   2d956:	18fb      	adds	r3, r7, r3
   2d958:	8812      	ldrh	r2, [r2, #0]
   2d95a:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   2d95c:	2324      	movs	r3, #36	; 0x24
   2d95e:	18fb      	adds	r3, r7, r3
   2d960:	881b      	ldrh	r3, [r3, #0]
   2d962:	2b20      	cmp	r3, #32
   2d964:	d004      	beq.n	2d970 <create_name+0x128>
   2d966:	2324      	movs	r3, #36	; 0x24
   2d968:	18fb      	adds	r3, r7, r3
   2d96a:	881b      	ldrh	r3, [r3, #0]
   2d96c:	2b2e      	cmp	r3, #46	; 0x2e
   2d96e:	d106      	bne.n	2d97e <create_name+0x136>
		di--;
   2d970:	697b      	ldr	r3, [r7, #20]
   2d972:	3b01      	subs	r3, #1
   2d974:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
   2d976:	697b      	ldr	r3, [r7, #20]
   2d978:	2b00      	cmp	r3, #0
   2d97a:	d1e4      	bne.n	2d946 <create_name+0xfe>
   2d97c:	e000      	b.n	2d980 <create_name+0x138>
		if (w != ' ' && w != '.') break;
   2d97e:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   2d980:	697b      	ldr	r3, [r7, #20]
   2d982:	2b00      	cmp	r3, #0
   2d984:	d101      	bne.n	2d98a <create_name+0x142>
   2d986:	2306      	movs	r3, #6
   2d988:	e17e      	b.n	2dc88 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
   2d98a:	697b      	ldr	r3, [r7, #20]
   2d98c:	005b      	lsls	r3, r3, #1
   2d98e:	68fa      	ldr	r2, [r7, #12]
   2d990:	18d3      	adds	r3, r2, r3
   2d992:	2200      	movs	r2, #0
   2d994:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
   2d996:	687b      	ldr	r3, [r7, #4]
   2d998:	699b      	ldr	r3, [r3, #24]
   2d99a:	220b      	movs	r2, #11
   2d99c:	2120      	movs	r1, #32
   2d99e:	0018      	movs	r0, r3
   2d9a0:	4b8b      	ldr	r3, [pc, #556]	; (2dbd0 <create_name+0x388>)
   2d9a2:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   2d9a4:	2300      	movs	r3, #0
   2d9a6:	61bb      	str	r3, [r7, #24]
   2d9a8:	e002      	b.n	2d9b0 <create_name+0x168>
   2d9aa:	69bb      	ldr	r3, [r7, #24]
   2d9ac:	3301      	adds	r3, #1
   2d9ae:	61bb      	str	r3, [r7, #24]
   2d9b0:	69bb      	ldr	r3, [r7, #24]
   2d9b2:	005b      	lsls	r3, r3, #1
   2d9b4:	68fa      	ldr	r2, [r7, #12]
   2d9b6:	18d3      	adds	r3, r2, r3
   2d9b8:	881b      	ldrh	r3, [r3, #0]
   2d9ba:	2b20      	cmp	r3, #32
   2d9bc:	d0f5      	beq.n	2d9aa <create_name+0x162>
   2d9be:	69bb      	ldr	r3, [r7, #24]
   2d9c0:	005b      	lsls	r3, r3, #1
   2d9c2:	68fa      	ldr	r2, [r7, #12]
   2d9c4:	18d3      	adds	r3, r2, r3
   2d9c6:	881b      	ldrh	r3, [r3, #0]
   2d9c8:	2b2e      	cmp	r3, #46	; 0x2e
   2d9ca:	d0ee      	beq.n	2d9aa <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
   2d9cc:	69bb      	ldr	r3, [r7, #24]
   2d9ce:	2b00      	cmp	r3, #0
   2d9d0:	d00b      	beq.n	2d9ea <create_name+0x1a2>
   2d9d2:	2326      	movs	r3, #38	; 0x26
   2d9d4:	18fb      	adds	r3, r7, r3
   2d9d6:	2226      	movs	r2, #38	; 0x26
   2d9d8:	18ba      	adds	r2, r7, r2
   2d9da:	7812      	ldrb	r2, [r2, #0]
   2d9dc:	2103      	movs	r1, #3
   2d9de:	430a      	orrs	r2, r1
   2d9e0:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   2d9e2:	e002      	b.n	2d9ea <create_name+0x1a2>
   2d9e4:	697b      	ldr	r3, [r7, #20]
   2d9e6:	3b01      	subs	r3, #1
   2d9e8:	617b      	str	r3, [r7, #20]
   2d9ea:	697b      	ldr	r3, [r7, #20]
   2d9ec:	2b00      	cmp	r3, #0
   2d9ee:	d009      	beq.n	2da04 <create_name+0x1bc>
   2d9f0:	697b      	ldr	r3, [r7, #20]
   2d9f2:	4a76      	ldr	r2, [pc, #472]	; (2dbcc <create_name+0x384>)
   2d9f4:	4694      	mov	ip, r2
   2d9f6:	4463      	add	r3, ip
   2d9f8:	005b      	lsls	r3, r3, #1
   2d9fa:	68fa      	ldr	r2, [r7, #12]
   2d9fc:	18d3      	adds	r3, r2, r3
   2d9fe:	881b      	ldrh	r3, [r3, #0]
   2da00:	2b2e      	cmp	r3, #46	; 0x2e
   2da02:	d1ef      	bne.n	2d9e4 <create_name+0x19c>

	b = i = 0; ni = 8;
   2da04:	2300      	movs	r3, #0
   2da06:	623b      	str	r3, [r7, #32]
   2da08:	2327      	movs	r3, #39	; 0x27
   2da0a:	18fb      	adds	r3, r7, r3
   2da0c:	2200      	movs	r2, #0
   2da0e:	701a      	strb	r2, [r3, #0]
   2da10:	2308      	movs	r3, #8
   2da12:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
   2da14:	69bb      	ldr	r3, [r7, #24]
   2da16:	1c5a      	adds	r2, r3, #1
   2da18:	61ba      	str	r2, [r7, #24]
   2da1a:	005b      	lsls	r3, r3, #1
   2da1c:	68fa      	ldr	r2, [r7, #12]
   2da1e:	18d2      	adds	r2, r2, r3
   2da20:	2324      	movs	r3, #36	; 0x24
   2da22:	18fb      	adds	r3, r7, r3
   2da24:	8812      	ldrh	r2, [r2, #0]
   2da26:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
   2da28:	2324      	movs	r3, #36	; 0x24
   2da2a:	18fb      	adds	r3, r7, r3
   2da2c:	881b      	ldrh	r3, [r3, #0]
   2da2e:	2b00      	cmp	r3, #0
   2da30:	d100      	bne.n	2da34 <create_name+0x1ec>
   2da32:	e0c3      	b.n	2dbbc <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   2da34:	2324      	movs	r3, #36	; 0x24
   2da36:	18fb      	adds	r3, r7, r3
   2da38:	881b      	ldrh	r3, [r3, #0]
   2da3a:	2b20      	cmp	r3, #32
   2da3c:	d008      	beq.n	2da50 <create_name+0x208>
   2da3e:	2324      	movs	r3, #36	; 0x24
   2da40:	18fb      	adds	r3, r7, r3
   2da42:	881b      	ldrh	r3, [r3, #0]
   2da44:	2b2e      	cmp	r3, #46	; 0x2e
   2da46:	d10c      	bne.n	2da62 <create_name+0x21a>
   2da48:	69ba      	ldr	r2, [r7, #24]
   2da4a:	697b      	ldr	r3, [r7, #20]
   2da4c:	429a      	cmp	r2, r3
   2da4e:	d008      	beq.n	2da62 <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
   2da50:	2326      	movs	r3, #38	; 0x26
   2da52:	18fb      	adds	r3, r7, r3
   2da54:	2226      	movs	r2, #38	; 0x26
   2da56:	18ba      	adds	r2, r7, r2
   2da58:	7812      	ldrb	r2, [r2, #0]
   2da5a:	2103      	movs	r1, #3
   2da5c:	430a      	orrs	r2, r1
   2da5e:	701a      	strb	r2, [r3, #0]
   2da60:	e0ab      	b.n	2dbba <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
   2da62:	6a3a      	ldr	r2, [r7, #32]
   2da64:	69fb      	ldr	r3, [r7, #28]
   2da66:	429a      	cmp	r2, r3
   2da68:	d203      	bcs.n	2da72 <create_name+0x22a>
   2da6a:	69ba      	ldr	r2, [r7, #24]
   2da6c:	697b      	ldr	r3, [r7, #20]
   2da6e:	429a      	cmp	r2, r3
   2da70:	d12a      	bne.n	2dac8 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
   2da72:	69fb      	ldr	r3, [r7, #28]
   2da74:	2b0b      	cmp	r3, #11
   2da76:	d108      	bne.n	2da8a <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
   2da78:	2326      	movs	r3, #38	; 0x26
   2da7a:	18fb      	adds	r3, r7, r3
   2da7c:	2226      	movs	r2, #38	; 0x26
   2da7e:	18ba      	adds	r2, r7, r2
   2da80:	7812      	ldrb	r2, [r2, #0]
   2da82:	2103      	movs	r1, #3
   2da84:	430a      	orrs	r2, r1
   2da86:	701a      	strb	r2, [r3, #0]
   2da88:	e0a9      	b.n	2dbde <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   2da8a:	69ba      	ldr	r2, [r7, #24]
   2da8c:	697b      	ldr	r3, [r7, #20]
   2da8e:	429a      	cmp	r2, r3
   2da90:	d007      	beq.n	2daa2 <create_name+0x25a>
   2da92:	2326      	movs	r3, #38	; 0x26
   2da94:	18fb      	adds	r3, r7, r3
   2da96:	2226      	movs	r2, #38	; 0x26
   2da98:	18ba      	adds	r2, r7, r2
   2da9a:	7812      	ldrb	r2, [r2, #0]
   2da9c:	2103      	movs	r1, #3
   2da9e:	430a      	orrs	r2, r1
   2daa0:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
   2daa2:	69ba      	ldr	r2, [r7, #24]
   2daa4:	697b      	ldr	r3, [r7, #20]
   2daa6:	429a      	cmp	r2, r3
   2daa8:	d900      	bls.n	2daac <create_name+0x264>
   2daaa:	e097      	b.n	2dbdc <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
   2daac:	697b      	ldr	r3, [r7, #20]
   2daae:	61bb      	str	r3, [r7, #24]
   2dab0:	2308      	movs	r3, #8
   2dab2:	623b      	str	r3, [r7, #32]
   2dab4:	230b      	movs	r3, #11
   2dab6:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
   2dab8:	2327      	movs	r3, #39	; 0x27
   2daba:	18fb      	adds	r3, r7, r3
   2dabc:	2227      	movs	r2, #39	; 0x27
   2dabe:	18ba      	adds	r2, r7, r2
   2dac0:	7812      	ldrb	r2, [r2, #0]
   2dac2:	0092      	lsls	r2, r2, #2
   2dac4:	701a      	strb	r2, [r3, #0]
   2dac6:	e078      	b.n	2dbba <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
   2dac8:	2324      	movs	r3, #36	; 0x24
   2daca:	18fb      	adds	r3, r7, r3
   2dacc:	881b      	ldrh	r3, [r3, #0]
   2dace:	2b7f      	cmp	r3, #127	; 0x7f
   2dad0:	d920      	bls.n	2db14 <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   2dad2:	2324      	movs	r3, #36	; 0x24
   2dad4:	18fc      	adds	r4, r7, r3
   2dad6:	2324      	movs	r3, #36	; 0x24
   2dad8:	18fb      	adds	r3, r7, r3
   2dada:	881b      	ldrh	r3, [r3, #0]
   2dadc:	2100      	movs	r1, #0
   2dade:	0018      	movs	r0, r3
   2dae0:	4b37      	ldr	r3, [pc, #220]	; (2dbc0 <create_name+0x378>)
   2dae2:	4798      	blx	r3
   2dae4:	0003      	movs	r3, r0
   2dae6:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   2dae8:	2324      	movs	r3, #36	; 0x24
   2daea:	18fb      	adds	r3, r7, r3
   2daec:	881b      	ldrh	r3, [r3, #0]
   2daee:	2b00      	cmp	r3, #0
   2daf0:	d008      	beq.n	2db04 <create_name+0x2bc>
   2daf2:	2324      	movs	r3, #36	; 0x24
   2daf4:	18fb      	adds	r3, r7, r3
   2daf6:	881b      	ldrh	r3, [r3, #0]
   2daf8:	3b80      	subs	r3, #128	; 0x80
   2dafa:	4a36      	ldr	r2, [pc, #216]	; (2dbd4 <create_name+0x38c>)
   2dafc:	5cd2      	ldrb	r2, [r2, r3]
   2dafe:	2324      	movs	r3, #36	; 0x24
   2db00:	18fb      	adds	r3, r7, r3
   2db02:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
   2db04:	2326      	movs	r3, #38	; 0x26
   2db06:	18fb      	adds	r3, r7, r3
   2db08:	2226      	movs	r2, #38	; 0x26
   2db0a:	18ba      	adds	r2, r7, r2
   2db0c:	7812      	ldrb	r2, [r2, #0]
   2db0e:	2102      	movs	r1, #2
   2db10:	430a      	orrs	r2, r1
   2db12:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   2db14:	2324      	movs	r3, #36	; 0x24
   2db16:	18fb      	adds	r3, r7, r3
   2db18:	881b      	ldrh	r3, [r3, #0]
   2db1a:	2b00      	cmp	r3, #0
   2db1c:	d009      	beq.n	2db32 <create_name+0x2ea>
   2db1e:	2324      	movs	r3, #36	; 0x24
   2db20:	18fb      	adds	r3, r7, r3
   2db22:	881a      	ldrh	r2, [r3, #0]
   2db24:	4b2c      	ldr	r3, [pc, #176]	; (2dbd8 <create_name+0x390>)
   2db26:	0011      	movs	r1, r2
   2db28:	0018      	movs	r0, r3
   2db2a:	4b27      	ldr	r3, [pc, #156]	; (2dbc8 <create_name+0x380>)
   2db2c:	4798      	blx	r3
   2db2e:	1e03      	subs	r3, r0, #0
   2db30:	d00c      	beq.n	2db4c <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   2db32:	2324      	movs	r3, #36	; 0x24
   2db34:	18fb      	adds	r3, r7, r3
   2db36:	225f      	movs	r2, #95	; 0x5f
   2db38:	801a      	strh	r2, [r3, #0]
   2db3a:	2326      	movs	r3, #38	; 0x26
   2db3c:	18fb      	adds	r3, r7, r3
   2db3e:	2226      	movs	r2, #38	; 0x26
   2db40:	18ba      	adds	r2, r7, r2
   2db42:	7812      	ldrb	r2, [r2, #0]
   2db44:	2103      	movs	r1, #3
   2db46:	430a      	orrs	r2, r1
   2db48:	701a      	strb	r2, [r3, #0]
   2db4a:	e02b      	b.n	2dba4 <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
   2db4c:	2324      	movs	r3, #36	; 0x24
   2db4e:	18fb      	adds	r3, r7, r3
   2db50:	881b      	ldrh	r3, [r3, #0]
   2db52:	2b40      	cmp	r3, #64	; 0x40
   2db54:	d90d      	bls.n	2db72 <create_name+0x32a>
   2db56:	2324      	movs	r3, #36	; 0x24
   2db58:	18fb      	adds	r3, r7, r3
   2db5a:	881b      	ldrh	r3, [r3, #0]
   2db5c:	2b5a      	cmp	r3, #90	; 0x5a
   2db5e:	d808      	bhi.n	2db72 <create_name+0x32a>
					b |= 2;
   2db60:	2327      	movs	r3, #39	; 0x27
   2db62:	18fb      	adds	r3, r7, r3
   2db64:	2227      	movs	r2, #39	; 0x27
   2db66:	18ba      	adds	r2, r7, r2
   2db68:	7812      	ldrb	r2, [r2, #0]
   2db6a:	2102      	movs	r1, #2
   2db6c:	430a      	orrs	r2, r1
   2db6e:	701a      	strb	r2, [r3, #0]
   2db70:	e018      	b.n	2dba4 <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
   2db72:	2324      	movs	r3, #36	; 0x24
   2db74:	18fb      	adds	r3, r7, r3
   2db76:	881b      	ldrh	r3, [r3, #0]
   2db78:	2b60      	cmp	r3, #96	; 0x60
   2db7a:	d913      	bls.n	2dba4 <create_name+0x35c>
   2db7c:	2324      	movs	r3, #36	; 0x24
   2db7e:	18fb      	adds	r3, r7, r3
   2db80:	881b      	ldrh	r3, [r3, #0]
   2db82:	2b7a      	cmp	r3, #122	; 0x7a
   2db84:	d80e      	bhi.n	2dba4 <create_name+0x35c>
						b |= 1; w -= 0x20;
   2db86:	2327      	movs	r3, #39	; 0x27
   2db88:	18fb      	adds	r3, r7, r3
   2db8a:	2227      	movs	r2, #39	; 0x27
   2db8c:	18ba      	adds	r2, r7, r2
   2db8e:	7812      	ldrb	r2, [r2, #0]
   2db90:	2101      	movs	r1, #1
   2db92:	430a      	orrs	r2, r1
   2db94:	701a      	strb	r2, [r3, #0]
   2db96:	2324      	movs	r3, #36	; 0x24
   2db98:	18fb      	adds	r3, r7, r3
   2db9a:	2224      	movs	r2, #36	; 0x24
   2db9c:	18ba      	adds	r2, r7, r2
   2db9e:	8812      	ldrh	r2, [r2, #0]
   2dba0:	3a20      	subs	r2, #32
   2dba2:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
   2dba4:	687b      	ldr	r3, [r7, #4]
   2dba6:	699a      	ldr	r2, [r3, #24]
   2dba8:	6a3b      	ldr	r3, [r7, #32]
   2dbaa:	1c59      	adds	r1, r3, #1
   2dbac:	6239      	str	r1, [r7, #32]
   2dbae:	18d3      	adds	r3, r2, r3
   2dbb0:	2224      	movs	r2, #36	; 0x24
   2dbb2:	18ba      	adds	r2, r7, r2
   2dbb4:	8812      	ldrh	r2, [r2, #0]
   2dbb6:	b2d2      	uxtb	r2, r2
   2dbb8:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
   2dbba:	e72b      	b.n	2da14 <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
   2dbbc:	46c0      	nop			; (mov r8, r8)
   2dbbe:	e00e      	b.n	2dbde <create_name+0x396>
   2dbc0:	0002ef81 	.word	0x0002ef81
   2dbc4:	0003a380 	.word	0x0003a380
   2dbc8:	0002c3eb 	.word	0x0002c3eb
   2dbcc:	7fffffff 	.word	0x7fffffff
   2dbd0:	0002c371 	.word	0x0002c371
   2dbd4:	0003a3c8 	.word	0x0003a3c8
   2dbd8:	0003a38c 	.word	0x0003a38c
			if (si > di) break;			/* No extension */
   2dbdc:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   2dbde:	687b      	ldr	r3, [r7, #4]
   2dbe0:	699b      	ldr	r3, [r3, #24]
   2dbe2:	781b      	ldrb	r3, [r3, #0]
   2dbe4:	2be5      	cmp	r3, #229	; 0xe5
   2dbe6:	d103      	bne.n	2dbf0 <create_name+0x3a8>
   2dbe8:	687b      	ldr	r3, [r7, #4]
   2dbea:	699b      	ldr	r3, [r3, #24]
   2dbec:	2205      	movs	r2, #5
   2dbee:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
   2dbf0:	69fb      	ldr	r3, [r7, #28]
   2dbf2:	2b08      	cmp	r3, #8
   2dbf4:	d106      	bne.n	2dc04 <create_name+0x3bc>
   2dbf6:	2327      	movs	r3, #39	; 0x27
   2dbf8:	18fb      	adds	r3, r7, r3
   2dbfa:	2227      	movs	r2, #39	; 0x27
   2dbfc:	18ba      	adds	r2, r7, r2
   2dbfe:	7812      	ldrb	r2, [r2, #0]
   2dc00:	0092      	lsls	r2, r2, #2
   2dc02:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   2dc04:	2327      	movs	r3, #39	; 0x27
   2dc06:	18fb      	adds	r3, r7, r3
   2dc08:	781b      	ldrb	r3, [r3, #0]
   2dc0a:	220c      	movs	r2, #12
   2dc0c:	4013      	ands	r3, r2
   2dc0e:	2b0c      	cmp	r3, #12
   2dc10:	d006      	beq.n	2dc20 <create_name+0x3d8>
   2dc12:	2327      	movs	r3, #39	; 0x27
   2dc14:	18fb      	adds	r3, r7, r3
   2dc16:	781b      	ldrb	r3, [r3, #0]
   2dc18:	2203      	movs	r2, #3
   2dc1a:	4013      	ands	r3, r2
   2dc1c:	2b03      	cmp	r3, #3
   2dc1e:	d107      	bne.n	2dc30 <create_name+0x3e8>
		cf |= NS_LFN;
   2dc20:	2326      	movs	r3, #38	; 0x26
   2dc22:	18fb      	adds	r3, r7, r3
   2dc24:	2226      	movs	r2, #38	; 0x26
   2dc26:	18ba      	adds	r2, r7, r2
   2dc28:	7812      	ldrb	r2, [r2, #0]
   2dc2a:	2102      	movs	r1, #2
   2dc2c:	430a      	orrs	r2, r1
   2dc2e:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   2dc30:	2326      	movs	r3, #38	; 0x26
   2dc32:	18fb      	adds	r3, r7, r3
   2dc34:	781b      	ldrb	r3, [r3, #0]
   2dc36:	2202      	movs	r2, #2
   2dc38:	4013      	ands	r3, r2
   2dc3a:	d11d      	bne.n	2dc78 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   2dc3c:	2327      	movs	r3, #39	; 0x27
   2dc3e:	18fb      	adds	r3, r7, r3
   2dc40:	781b      	ldrb	r3, [r3, #0]
   2dc42:	2203      	movs	r2, #3
   2dc44:	4013      	ands	r3, r2
   2dc46:	2b01      	cmp	r3, #1
   2dc48:	d107      	bne.n	2dc5a <create_name+0x412>
   2dc4a:	2326      	movs	r3, #38	; 0x26
   2dc4c:	18fb      	adds	r3, r7, r3
   2dc4e:	2226      	movs	r2, #38	; 0x26
   2dc50:	18ba      	adds	r2, r7, r2
   2dc52:	7812      	ldrb	r2, [r2, #0]
   2dc54:	2110      	movs	r1, #16
   2dc56:	430a      	orrs	r2, r1
   2dc58:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   2dc5a:	2327      	movs	r3, #39	; 0x27
   2dc5c:	18fb      	adds	r3, r7, r3
   2dc5e:	781b      	ldrb	r3, [r3, #0]
   2dc60:	220c      	movs	r2, #12
   2dc62:	4013      	ands	r3, r2
   2dc64:	2b04      	cmp	r3, #4
   2dc66:	d107      	bne.n	2dc78 <create_name+0x430>
   2dc68:	2326      	movs	r3, #38	; 0x26
   2dc6a:	18fb      	adds	r3, r7, r3
   2dc6c:	2226      	movs	r2, #38	; 0x26
   2dc6e:	18ba      	adds	r2, r7, r2
   2dc70:	7812      	ldrb	r2, [r2, #0]
   2dc72:	2108      	movs	r1, #8
   2dc74:	430a      	orrs	r2, r1
   2dc76:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
   2dc78:	687b      	ldr	r3, [r7, #4]
   2dc7a:	699b      	ldr	r3, [r3, #24]
   2dc7c:	330b      	adds	r3, #11
   2dc7e:	2226      	movs	r2, #38	; 0x26
   2dc80:	18ba      	adds	r2, r7, r2
   2dc82:	7812      	ldrb	r2, [r2, #0]
   2dc84:	701a      	strb	r2, [r3, #0]

	return FR_OK;
   2dc86:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
   2dc88:	0018      	movs	r0, r3
   2dc8a:	46bd      	mov	sp, r7
   2dc8c:	b00b      	add	sp, #44	; 0x2c
   2dc8e:	bd90      	pop	{r4, r7, pc}

0002dc90 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
   2dc90:	b590      	push	{r4, r7, lr}
   2dc92:	b085      	sub	sp, #20
   2dc94:	af00      	add	r7, sp, #0
   2dc96:	6078      	str	r0, [r7, #4]
   2dc98:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   2dc9a:	683b      	ldr	r3, [r7, #0]
   2dc9c:	781b      	ldrb	r3, [r3, #0]
   2dc9e:	2b2f      	cmp	r3, #47	; 0x2f
   2dca0:	d003      	beq.n	2dcaa <follow_path+0x1a>
   2dca2:	683b      	ldr	r3, [r7, #0]
   2dca4:	781b      	ldrb	r3, [r3, #0]
   2dca6:	2b5c      	cmp	r3, #92	; 0x5c
   2dca8:	d102      	bne.n	2dcb0 <follow_path+0x20>
		path++;
   2dcaa:	683b      	ldr	r3, [r7, #0]
   2dcac:	3301      	adds	r3, #1
   2dcae:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
   2dcb0:	687b      	ldr	r3, [r7, #4]
   2dcb2:	2200      	movs	r2, #0
   2dcb4:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   2dcb6:	683b      	ldr	r3, [r7, #0]
   2dcb8:	781b      	ldrb	r3, [r3, #0]
   2dcba:	2b1f      	cmp	r3, #31
   2dcbc:	d80c      	bhi.n	2dcd8 <follow_path+0x48>
		res = dir_sdi(dj, 0);
   2dcbe:	230f      	movs	r3, #15
   2dcc0:	18fc      	adds	r4, r7, r3
   2dcc2:	687b      	ldr	r3, [r7, #4]
   2dcc4:	2100      	movs	r1, #0
   2dcc6:	0018      	movs	r0, r3
   2dcc8:	4b3c      	ldr	r3, [pc, #240]	; (2ddbc <follow_path+0x12c>)
   2dcca:	4798      	blx	r3
   2dccc:	0003      	movs	r3, r0
   2dcce:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
   2dcd0:	687b      	ldr	r3, [r7, #4]
   2dcd2:	2200      	movs	r2, #0
   2dcd4:	615a      	str	r2, [r3, #20]
   2dcd6:	e06a      	b.n	2ddae <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
   2dcd8:	230f      	movs	r3, #15
   2dcda:	18fc      	adds	r4, r7, r3
   2dcdc:	003a      	movs	r2, r7
   2dcde:	687b      	ldr	r3, [r7, #4]
   2dce0:	0011      	movs	r1, r2
   2dce2:	0018      	movs	r0, r3
   2dce4:	4b36      	ldr	r3, [pc, #216]	; (2ddc0 <follow_path+0x130>)
   2dce6:	4798      	blx	r3
   2dce8:	0003      	movs	r3, r0
   2dcea:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2dcec:	230f      	movs	r3, #15
   2dcee:	18fb      	adds	r3, r7, r3
   2dcf0:	781b      	ldrb	r3, [r3, #0]
   2dcf2:	2b00      	cmp	r3, #0
   2dcf4:	d154      	bne.n	2dda0 <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
   2dcf6:	230f      	movs	r3, #15
   2dcf8:	18fc      	adds	r4, r7, r3
   2dcfa:	687b      	ldr	r3, [r7, #4]
   2dcfc:	0018      	movs	r0, r3
   2dcfe:	4b31      	ldr	r3, [pc, #196]	; (2ddc4 <follow_path+0x134>)
   2dd00:	4798      	blx	r3
   2dd02:	0003      	movs	r3, r0
   2dd04:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
   2dd06:	687b      	ldr	r3, [r7, #4]
   2dd08:	699a      	ldr	r2, [r3, #24]
   2dd0a:	230e      	movs	r3, #14
   2dd0c:	18fb      	adds	r3, r7, r3
   2dd0e:	7ad2      	ldrb	r2, [r2, #11]
   2dd10:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
   2dd12:	230f      	movs	r3, #15
   2dd14:	18fb      	adds	r3, r7, r3
   2dd16:	781b      	ldrb	r3, [r3, #0]
   2dd18:	2b00      	cmp	r3, #0
   2dd1a:	d00f      	beq.n	2dd3c <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2dd1c:	230f      	movs	r3, #15
   2dd1e:	18fb      	adds	r3, r7, r3
   2dd20:	781b      	ldrb	r3, [r3, #0]
   2dd22:	2b04      	cmp	r3, #4
   2dd24:	d13e      	bne.n	2dda4 <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   2dd26:	230e      	movs	r3, #14
   2dd28:	18fb      	adds	r3, r7, r3
   2dd2a:	781b      	ldrb	r3, [r3, #0]
   2dd2c:	2204      	movs	r2, #4
   2dd2e:	4013      	ands	r3, r2
   2dd30:	d13a      	bne.n	2dda8 <follow_path+0x118>
   2dd32:	230f      	movs	r3, #15
   2dd34:	18fb      	adds	r3, r7, r3
   2dd36:	2205      	movs	r2, #5
   2dd38:	701a      	strb	r2, [r3, #0]
				}
				break;
   2dd3a:	e035      	b.n	2dda8 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2dd3c:	230e      	movs	r3, #14
   2dd3e:	18fb      	adds	r3, r7, r3
   2dd40:	781b      	ldrb	r3, [r3, #0]
   2dd42:	2204      	movs	r2, #4
   2dd44:	4013      	ands	r3, r2
   2dd46:	d131      	bne.n	2ddac <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   2dd48:	687b      	ldr	r3, [r7, #4]
   2dd4a:	695b      	ldr	r3, [r3, #20]
   2dd4c:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   2dd4e:	68bb      	ldr	r3, [r7, #8]
   2dd50:	330b      	adds	r3, #11
   2dd52:	781b      	ldrb	r3, [r3, #0]
   2dd54:	001a      	movs	r2, r3
   2dd56:	2310      	movs	r3, #16
   2dd58:	4013      	ands	r3, r2
   2dd5a:	d104      	bne.n	2dd66 <follow_path+0xd6>
				res = FR_NO_PATH; break;
   2dd5c:	230f      	movs	r3, #15
   2dd5e:	18fb      	adds	r3, r7, r3
   2dd60:	2205      	movs	r2, #5
   2dd62:	701a      	strb	r2, [r3, #0]
   2dd64:	e023      	b.n	2ddae <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
   2dd66:	68bb      	ldr	r3, [r7, #8]
   2dd68:	3315      	adds	r3, #21
   2dd6a:	781b      	ldrb	r3, [r3, #0]
   2dd6c:	021b      	lsls	r3, r3, #8
   2dd6e:	b21a      	sxth	r2, r3
   2dd70:	68bb      	ldr	r3, [r7, #8]
   2dd72:	3314      	adds	r3, #20
   2dd74:	781b      	ldrb	r3, [r3, #0]
   2dd76:	b21b      	sxth	r3, r3
   2dd78:	4313      	orrs	r3, r2
   2dd7a:	b21b      	sxth	r3, r3
   2dd7c:	b29b      	uxth	r3, r3
   2dd7e:	041b      	lsls	r3, r3, #16
   2dd80:	68ba      	ldr	r2, [r7, #8]
   2dd82:	321b      	adds	r2, #27
   2dd84:	7812      	ldrb	r2, [r2, #0]
   2dd86:	0212      	lsls	r2, r2, #8
   2dd88:	b211      	sxth	r1, r2
   2dd8a:	68ba      	ldr	r2, [r7, #8]
   2dd8c:	321a      	adds	r2, #26
   2dd8e:	7812      	ldrb	r2, [r2, #0]
   2dd90:	b212      	sxth	r2, r2
   2dd92:	430a      	orrs	r2, r1
   2dd94:	b212      	sxth	r2, r2
   2dd96:	b292      	uxth	r2, r2
   2dd98:	431a      	orrs	r2, r3
   2dd9a:	687b      	ldr	r3, [r7, #4]
   2dd9c:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
   2dd9e:	e79b      	b.n	2dcd8 <follow_path+0x48>
			if (res != FR_OK) break;
   2dda0:	46c0      	nop			; (mov r8, r8)
   2dda2:	e004      	b.n	2ddae <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2dda4:	46c0      	nop			; (mov r8, r8)
   2dda6:	e002      	b.n	2ddae <follow_path+0x11e>
				break;
   2dda8:	46c0      	nop			; (mov r8, r8)
   2ddaa:	e000      	b.n	2ddae <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2ddac:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2ddae:	230f      	movs	r3, #15
   2ddb0:	18fb      	adds	r3, r7, r3
   2ddb2:	781b      	ldrb	r3, [r3, #0]
}
   2ddb4:	0018      	movs	r0, r3
   2ddb6:	46bd      	mov	sp, r7
   2ddb8:	b005      	add	sp, #20
   2ddba:	bd90      	pop	{r4, r7, pc}
   2ddbc:	0002cc61 	.word	0x0002cc61
   2ddc0:	0002d849 	.word	0x0002d849
   2ddc4:	0002d2e5 	.word	0x0002d2e5

0002ddc8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
   2ddc8:	b590      	push	{r4, r7, lr}
   2ddca:	b083      	sub	sp, #12
   2ddcc:	af00      	add	r7, sp, #0
   2ddce:	6078      	str	r0, [r7, #4]
   2ddd0:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   2ddd2:	687b      	ldr	r3, [r7, #4]
   2ddd4:	7858      	ldrb	r0, [r3, #1]
   2ddd6:	687b      	ldr	r3, [r7, #4]
   2ddd8:	3330      	adds	r3, #48	; 0x30
   2ddda:	0019      	movs	r1, r3
   2dddc:	683a      	ldr	r2, [r7, #0]
   2ddde:	2301      	movs	r3, #1
   2dde0:	4c2a      	ldr	r4, [pc, #168]	; (2de8c <check_fs+0xc4>)
   2dde2:	47a0      	blx	r4
   2dde4:	1e03      	subs	r3, r0, #0
   2dde6:	d001      	beq.n	2ddec <check_fs+0x24>
		return 3;
   2dde8:	2303      	movs	r3, #3
   2ddea:	e04b      	b.n	2de84 <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   2ddec:	687b      	ldr	r3, [r7, #4]
   2ddee:	4a28      	ldr	r2, [pc, #160]	; (2de90 <check_fs+0xc8>)
   2ddf0:	4694      	mov	ip, r2
   2ddf2:	4463      	add	r3, ip
   2ddf4:	3301      	adds	r3, #1
   2ddf6:	781b      	ldrb	r3, [r3, #0]
   2ddf8:	021b      	lsls	r3, r3, #8
   2ddfa:	b21a      	sxth	r2, r3
   2ddfc:	687b      	ldr	r3, [r7, #4]
   2ddfe:	4924      	ldr	r1, [pc, #144]	; (2de90 <check_fs+0xc8>)
   2de00:	5c5b      	ldrb	r3, [r3, r1]
   2de02:	b21b      	sxth	r3, r3
   2de04:	4313      	orrs	r3, r2
   2de06:	b21b      	sxth	r3, r3
   2de08:	4a22      	ldr	r2, [pc, #136]	; (2de94 <check_fs+0xcc>)
   2de0a:	4293      	cmp	r3, r2
   2de0c:	d001      	beq.n	2de12 <check_fs+0x4a>
		return 2;
   2de0e:	2302      	movs	r3, #2
   2de10:	e038      	b.n	2de84 <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   2de12:	687b      	ldr	r3, [r7, #4]
   2de14:	3366      	adds	r3, #102	; 0x66
   2de16:	3303      	adds	r3, #3
   2de18:	781b      	ldrb	r3, [r3, #0]
   2de1a:	061a      	lsls	r2, r3, #24
   2de1c:	687b      	ldr	r3, [r7, #4]
   2de1e:	3366      	adds	r3, #102	; 0x66
   2de20:	3302      	adds	r3, #2
   2de22:	781b      	ldrb	r3, [r3, #0]
   2de24:	041b      	lsls	r3, r3, #16
   2de26:	4313      	orrs	r3, r2
   2de28:	687a      	ldr	r2, [r7, #4]
   2de2a:	3266      	adds	r2, #102	; 0x66
   2de2c:	3201      	adds	r2, #1
   2de2e:	7812      	ldrb	r2, [r2, #0]
   2de30:	0212      	lsls	r2, r2, #8
   2de32:	4313      	orrs	r3, r2
   2de34:	687a      	ldr	r2, [r7, #4]
   2de36:	2166      	movs	r1, #102	; 0x66
   2de38:	5c52      	ldrb	r2, [r2, r1]
   2de3a:	4313      	orrs	r3, r2
   2de3c:	021b      	lsls	r3, r3, #8
   2de3e:	0a1b      	lsrs	r3, r3, #8
   2de40:	4a15      	ldr	r2, [pc, #84]	; (2de98 <check_fs+0xd0>)
   2de42:	4293      	cmp	r3, r2
   2de44:	d101      	bne.n	2de4a <check_fs+0x82>
		return 0;
   2de46:	2300      	movs	r3, #0
   2de48:	e01c      	b.n	2de84 <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   2de4a:	687b      	ldr	r3, [r7, #4]
   2de4c:	3382      	adds	r3, #130	; 0x82
   2de4e:	3303      	adds	r3, #3
   2de50:	781b      	ldrb	r3, [r3, #0]
   2de52:	061a      	lsls	r2, r3, #24
   2de54:	687b      	ldr	r3, [r7, #4]
   2de56:	3382      	adds	r3, #130	; 0x82
   2de58:	3302      	adds	r3, #2
   2de5a:	781b      	ldrb	r3, [r3, #0]
   2de5c:	041b      	lsls	r3, r3, #16
   2de5e:	4313      	orrs	r3, r2
   2de60:	687a      	ldr	r2, [r7, #4]
   2de62:	3282      	adds	r2, #130	; 0x82
   2de64:	3201      	adds	r2, #1
   2de66:	7812      	ldrb	r2, [r2, #0]
   2de68:	0212      	lsls	r2, r2, #8
   2de6a:	4313      	orrs	r3, r2
   2de6c:	687a      	ldr	r2, [r7, #4]
   2de6e:	2182      	movs	r1, #130	; 0x82
   2de70:	5c52      	ldrb	r2, [r2, r1]
   2de72:	4313      	orrs	r3, r2
   2de74:	021b      	lsls	r3, r3, #8
   2de76:	0a1b      	lsrs	r3, r3, #8
   2de78:	4a07      	ldr	r2, [pc, #28]	; (2de98 <check_fs+0xd0>)
   2de7a:	4293      	cmp	r3, r2
   2de7c:	d101      	bne.n	2de82 <check_fs+0xba>
		return 0;
   2de7e:	2300      	movs	r3, #0
   2de80:	e000      	b.n	2de84 <check_fs+0xbc>

	return 1;
   2de82:	2301      	movs	r3, #1
}
   2de84:	0018      	movs	r0, r3
   2de86:	46bd      	mov	sp, r7
   2de88:	b003      	add	sp, #12
   2de8a:	bd90      	pop	{r4, r7, pc}
   2de8c:	0002c031 	.word	0x0002c031
   2de90:	0000022e 	.word	0x0000022e
   2de94:	ffffaa55 	.word	0xffffaa55
   2de98:	00544146 	.word	0x00544146

0002de9c <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
   2de9c:	b590      	push	{r4, r7, lr}
   2de9e:	b093      	sub	sp, #76	; 0x4c
   2dea0:	af00      	add	r7, sp, #0
   2dea2:	60f8      	str	r0, [r7, #12]
   2dea4:	60b9      	str	r1, [r7, #8]
   2dea6:	1dfb      	adds	r3, r7, #7
   2dea8:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
   2deaa:	68fb      	ldr	r3, [r7, #12]
   2deac:	681b      	ldr	r3, [r3, #0]
   2deae:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
   2deb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2deb2:	781b      	ldrb	r3, [r3, #0]
   2deb4:	3b30      	subs	r3, #48	; 0x30
   2deb6:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   2deb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2deba:	2b09      	cmp	r3, #9
   2debc:	d80b      	bhi.n	2ded6 <chk_mounted+0x3a>
   2debe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2dec0:	3301      	adds	r3, #1
   2dec2:	781b      	ldrb	r3, [r3, #0]
   2dec4:	2b3a      	cmp	r3, #58	; 0x3a
   2dec6:	d106      	bne.n	2ded6 <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
   2dec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2deca:	3302      	adds	r3, #2
   2decc:	62fb      	str	r3, [r7, #44]	; 0x2c
   2dece:	68fb      	ldr	r3, [r7, #12]
   2ded0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2ded2:	601a      	str	r2, [r3, #0]
   2ded4:	e001      	b.n	2deda <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
   2ded6:	2300      	movs	r3, #0
   2ded8:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   2deda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2dedc:	2b07      	cmp	r3, #7
   2dede:	d901      	bls.n	2dee4 <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
   2dee0:	230b      	movs	r3, #11
   2dee2:	e2af      	b.n	2e444 <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   2dee4:	4bc5      	ldr	r3, [pc, #788]	; (2e1fc <chk_mounted+0x360>)
   2dee6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2dee8:	0092      	lsls	r2, r2, #2
   2deea:	58d3      	ldr	r3, [r2, r3]
   2deec:	62bb      	str	r3, [r7, #40]	; 0x28
   2deee:	68bb      	ldr	r3, [r7, #8]
   2def0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2def2:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   2def4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2def6:	2b00      	cmp	r3, #0
   2def8:	d101      	bne.n	2defe <chk_mounted+0x62>
   2defa:	230c      	movs	r3, #12
   2defc:	e2a2      	b.n	2e444 <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
   2defe:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2df00:	781b      	ldrb	r3, [r3, #0]
   2df02:	2b00      	cmp	r3, #0
   2df04:	d01c      	beq.n	2df40 <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
   2df06:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2df08:	785b      	ldrb	r3, [r3, #1]
   2df0a:	2227      	movs	r2, #39	; 0x27
   2df0c:	18bc      	adds	r4, r7, r2
   2df0e:	0018      	movs	r0, r3
   2df10:	4bbb      	ldr	r3, [pc, #748]	; (2e200 <chk_mounted+0x364>)
   2df12:	4798      	blx	r3
   2df14:	0003      	movs	r3, r0
   2df16:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   2df18:	2327      	movs	r3, #39	; 0x27
   2df1a:	18fb      	adds	r3, r7, r3
   2df1c:	781b      	ldrb	r3, [r3, #0]
   2df1e:	2201      	movs	r2, #1
   2df20:	4013      	ands	r3, r2
   2df22:	d10d      	bne.n	2df40 <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   2df24:	1dfb      	adds	r3, r7, #7
   2df26:	781b      	ldrb	r3, [r3, #0]
   2df28:	2b00      	cmp	r3, #0
   2df2a:	d007      	beq.n	2df3c <chk_mounted+0xa0>
   2df2c:	2327      	movs	r3, #39	; 0x27
   2df2e:	18fb      	adds	r3, r7, r3
   2df30:	781b      	ldrb	r3, [r3, #0]
   2df32:	2204      	movs	r2, #4
   2df34:	4013      	ands	r3, r2
   2df36:	d001      	beq.n	2df3c <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
   2df38:	230a      	movs	r3, #10
   2df3a:	e283      	b.n	2e444 <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
   2df3c:	2300      	movs	r3, #0
   2df3e:	e281      	b.n	2e444 <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
   2df40:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2df42:	2200      	movs	r2, #0
   2df44:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   2df46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2df48:	b2da      	uxtb	r2, r3
   2df4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2df4c:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   2df4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2df50:	785b      	ldrb	r3, [r3, #1]
   2df52:	2227      	movs	r2, #39	; 0x27
   2df54:	18bc      	adds	r4, r7, r2
   2df56:	0018      	movs	r0, r3
   2df58:	4baa      	ldr	r3, [pc, #680]	; (2e204 <chk_mounted+0x368>)
   2df5a:	4798      	blx	r3
   2df5c:	0003      	movs	r3, r0
   2df5e:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   2df60:	2327      	movs	r3, #39	; 0x27
   2df62:	18fb      	adds	r3, r7, r3
   2df64:	781b      	ldrb	r3, [r3, #0]
   2df66:	2201      	movs	r2, #1
   2df68:	4013      	ands	r3, r2
   2df6a:	d001      	beq.n	2df70 <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   2df6c:	2303      	movs	r3, #3
   2df6e:	e269      	b.n	2e444 <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   2df70:	1dfb      	adds	r3, r7, #7
   2df72:	781b      	ldrb	r3, [r3, #0]
   2df74:	2b00      	cmp	r3, #0
   2df76:	d007      	beq.n	2df88 <chk_mounted+0xec>
   2df78:	2327      	movs	r3, #39	; 0x27
   2df7a:	18fb      	adds	r3, r7, r3
   2df7c:	781b      	ldrb	r3, [r3, #0]
   2df7e:	2204      	movs	r2, #4
   2df80:	4013      	ands	r3, r2
   2df82:	d001      	beq.n	2df88 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
   2df84:	230a      	movs	r3, #10
   2df86:	e25d      	b.n	2e444 <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   2df88:	2300      	movs	r3, #0
   2df8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   2df8c:	2347      	movs	r3, #71	; 0x47
   2df8e:	18fc      	adds	r4, r7, r3
   2df90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2df92:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2df94:	0011      	movs	r1, r2
   2df96:	0018      	movs	r0, r3
   2df98:	4b9b      	ldr	r3, [pc, #620]	; (2e208 <chk_mounted+0x36c>)
   2df9a:	4798      	blx	r3
   2df9c:	0003      	movs	r3, r0
   2df9e:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   2dfa0:	2347      	movs	r3, #71	; 0x47
   2dfa2:	18fb      	adds	r3, r7, r3
   2dfa4:	781b      	ldrb	r3, [r3, #0]
   2dfa6:	2b01      	cmp	r3, #1
   2dfa8:	d13b      	bne.n	2e022 <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
   2dfaa:	2346      	movs	r3, #70	; 0x46
   2dfac:	18fb      	adds	r3, r7, r3
   2dfae:	2200      	movs	r2, #0
   2dfb0:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
   2dfb2:	2346      	movs	r3, #70	; 0x46
   2dfb4:	18fb      	adds	r3, r7, r3
   2dfb6:	781b      	ldrb	r3, [r3, #0]
   2dfb8:	2b00      	cmp	r3, #0
   2dfba:	d006      	beq.n	2dfca <chk_mounted+0x12e>
   2dfbc:	2346      	movs	r3, #70	; 0x46
   2dfbe:	18fb      	adds	r3, r7, r3
   2dfc0:	781a      	ldrb	r2, [r3, #0]
   2dfc2:	2346      	movs	r3, #70	; 0x46
   2dfc4:	18fb      	adds	r3, r7, r3
   2dfc6:	3a01      	subs	r2, #1
   2dfc8:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
   2dfca:	2346      	movs	r3, #70	; 0x46
   2dfcc:	18fb      	adds	r3, r7, r3
   2dfce:	781b      	ldrb	r3, [r3, #0]
   2dfd0:	011b      	lsls	r3, r3, #4
   2dfd2:	33bf      	adds	r3, #191	; 0xbf
   2dfd4:	33ff      	adds	r3, #255	; 0xff
   2dfd6:	3330      	adds	r3, #48	; 0x30
   2dfd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2dfda:	18d3      	adds	r3, r2, r3
   2dfdc:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
   2dfde:	6a3b      	ldr	r3, [r7, #32]
   2dfe0:	3304      	adds	r3, #4
   2dfe2:	781b      	ldrb	r3, [r3, #0]
   2dfe4:	2b00      	cmp	r3, #0
   2dfe6:	d01c      	beq.n	2e022 <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   2dfe8:	6a3b      	ldr	r3, [r7, #32]
   2dfea:	330b      	adds	r3, #11
   2dfec:	781b      	ldrb	r3, [r3, #0]
   2dfee:	061a      	lsls	r2, r3, #24
   2dff0:	6a3b      	ldr	r3, [r7, #32]
   2dff2:	330a      	adds	r3, #10
   2dff4:	781b      	ldrb	r3, [r3, #0]
   2dff6:	041b      	lsls	r3, r3, #16
   2dff8:	4313      	orrs	r3, r2
   2dffa:	6a3a      	ldr	r2, [r7, #32]
   2dffc:	3209      	adds	r2, #9
   2dffe:	7812      	ldrb	r2, [r2, #0]
   2e000:	0212      	lsls	r2, r2, #8
   2e002:	4313      	orrs	r3, r2
   2e004:	6a3a      	ldr	r2, [r7, #32]
   2e006:	3208      	adds	r2, #8
   2e008:	7812      	ldrb	r2, [r2, #0]
   2e00a:	4313      	orrs	r3, r2
   2e00c:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
   2e00e:	2347      	movs	r3, #71	; 0x47
   2e010:	18fc      	adds	r4, r7, r3
   2e012:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2e014:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e016:	0011      	movs	r1, r2
   2e018:	0018      	movs	r0, r3
   2e01a:	4b7b      	ldr	r3, [pc, #492]	; (2e208 <chk_mounted+0x36c>)
   2e01c:	4798      	blx	r3
   2e01e:	0003      	movs	r3, r0
   2e020:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   2e022:	2347      	movs	r3, #71	; 0x47
   2e024:	18fb      	adds	r3, r7, r3
   2e026:	781b      	ldrb	r3, [r3, #0]
   2e028:	2b03      	cmp	r3, #3
   2e02a:	d101      	bne.n	2e030 <chk_mounted+0x194>
   2e02c:	2301      	movs	r3, #1
   2e02e:	e209      	b.n	2e444 <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   2e030:	2347      	movs	r3, #71	; 0x47
   2e032:	18fb      	adds	r3, r7, r3
   2e034:	781b      	ldrb	r3, [r3, #0]
   2e036:	2b00      	cmp	r3, #0
   2e038:	d001      	beq.n	2e03e <chk_mounted+0x1a2>
   2e03a:	230d      	movs	r3, #13
   2e03c:	e202      	b.n	2e444 <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   2e03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e040:	223c      	movs	r2, #60	; 0x3c
   2e042:	5c9b      	ldrb	r3, [r3, r2]
   2e044:	021b      	lsls	r3, r3, #8
   2e046:	b21a      	sxth	r2, r3
   2e048:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e04a:	213b      	movs	r1, #59	; 0x3b
   2e04c:	5c5b      	ldrb	r3, [r3, r1]
   2e04e:	b21b      	sxth	r3, r3
   2e050:	4313      	orrs	r3, r2
   2e052:	b21a      	sxth	r2, r3
   2e054:	2380      	movs	r3, #128	; 0x80
   2e056:	009b      	lsls	r3, r3, #2
   2e058:	429a      	cmp	r2, r3
   2e05a:	d001      	beq.n	2e060 <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
   2e05c:	230d      	movs	r3, #13
   2e05e:	e1f1      	b.n	2e444 <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   2e060:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e062:	2247      	movs	r2, #71	; 0x47
   2e064:	5c9b      	ldrb	r3, [r3, r2]
   2e066:	021b      	lsls	r3, r3, #8
   2e068:	b21a      	sxth	r2, r3
   2e06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e06c:	2146      	movs	r1, #70	; 0x46
   2e06e:	5c5b      	ldrb	r3, [r3, r1]
   2e070:	b21b      	sxth	r3, r3
   2e072:	4313      	orrs	r3, r2
   2e074:	b21b      	sxth	r3, r3
   2e076:	b29b      	uxth	r3, r3
   2e078:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   2e07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2e07c:	2b00      	cmp	r3, #0
   2e07e:	d112      	bne.n	2e0a6 <chk_mounted+0x20a>
   2e080:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e082:	2257      	movs	r2, #87	; 0x57
   2e084:	5c9b      	ldrb	r3, [r3, r2]
   2e086:	061a      	lsls	r2, r3, #24
   2e088:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e08a:	2156      	movs	r1, #86	; 0x56
   2e08c:	5c5b      	ldrb	r3, [r3, r1]
   2e08e:	041b      	lsls	r3, r3, #16
   2e090:	4313      	orrs	r3, r2
   2e092:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e094:	2155      	movs	r1, #85	; 0x55
   2e096:	5c52      	ldrb	r2, [r2, r1]
   2e098:	0212      	lsls	r2, r2, #8
   2e09a:	4313      	orrs	r3, r2
   2e09c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e09e:	2154      	movs	r1, #84	; 0x54
   2e0a0:	5c52      	ldrb	r2, [r2, r1]
   2e0a2:	4313      	orrs	r3, r2
   2e0a4:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
   2e0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e0a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2e0aa:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   2e0ac:	231f      	movs	r3, #31
   2e0ae:	18fb      	adds	r3, r7, r3
   2e0b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e0b2:	2140      	movs	r1, #64	; 0x40
   2e0b4:	5c52      	ldrb	r2, [r2, r1]
   2e0b6:	701a      	strb	r2, [r3, #0]
   2e0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e0ba:	221f      	movs	r2, #31
   2e0bc:	18ba      	adds	r2, r7, r2
   2e0be:	7812      	ldrb	r2, [r2, #0]
   2e0c0:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   2e0c2:	231f      	movs	r3, #31
   2e0c4:	18fb      	adds	r3, r7, r3
   2e0c6:	781b      	ldrb	r3, [r3, #0]
   2e0c8:	2b01      	cmp	r3, #1
   2e0ca:	d006      	beq.n	2e0da <chk_mounted+0x23e>
   2e0cc:	231f      	movs	r3, #31
   2e0ce:	18fb      	adds	r3, r7, r3
   2e0d0:	781b      	ldrb	r3, [r3, #0]
   2e0d2:	2b02      	cmp	r3, #2
   2e0d4:	d001      	beq.n	2e0da <chk_mounted+0x23e>
   2e0d6:	230d      	movs	r3, #13
   2e0d8:	e1b4      	b.n	2e444 <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
   2e0da:	231f      	movs	r3, #31
   2e0dc:	18fb      	adds	r3, r7, r3
   2e0de:	781a      	ldrb	r2, [r3, #0]
   2e0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2e0e2:	4353      	muls	r3, r2
   2e0e4:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   2e0e6:	231f      	movs	r3, #31
   2e0e8:	18fb      	adds	r3, r7, r3
   2e0ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e0ec:	213d      	movs	r1, #61	; 0x3d
   2e0ee:	5c52      	ldrb	r2, [r2, r1]
   2e0f0:	701a      	strb	r2, [r3, #0]
   2e0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e0f4:	221f      	movs	r2, #31
   2e0f6:	18ba      	adds	r2, r7, r2
   2e0f8:	7812      	ldrb	r2, [r2, #0]
   2e0fa:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   2e0fc:	231f      	movs	r3, #31
   2e0fe:	18fb      	adds	r3, r7, r3
   2e100:	781b      	ldrb	r3, [r3, #0]
   2e102:	2b00      	cmp	r3, #0
   2e104:	d008      	beq.n	2e118 <chk_mounted+0x27c>
   2e106:	231f      	movs	r3, #31
   2e108:	18fb      	adds	r3, r7, r3
   2e10a:	781b      	ldrb	r3, [r3, #0]
   2e10c:	221f      	movs	r2, #31
   2e10e:	18ba      	adds	r2, r7, r2
   2e110:	7812      	ldrb	r2, [r2, #0]
   2e112:	3a01      	subs	r2, #1
   2e114:	4013      	ands	r3, r2
   2e116:	d001      	beq.n	2e11c <chk_mounted+0x280>
   2e118:	230d      	movs	r3, #13
   2e11a:	e193      	b.n	2e444 <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   2e11c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e11e:	2242      	movs	r2, #66	; 0x42
   2e120:	5c9b      	ldrb	r3, [r3, r2]
   2e122:	021b      	lsls	r3, r3, #8
   2e124:	b21a      	sxth	r2, r3
   2e126:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e128:	2141      	movs	r1, #65	; 0x41
   2e12a:	5c5b      	ldrb	r3, [r3, r1]
   2e12c:	b21b      	sxth	r3, r3
   2e12e:	4313      	orrs	r3, r2
   2e130:	b21b      	sxth	r3, r3
   2e132:	b29a      	uxth	r2, r3
   2e134:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e136:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   2e138:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e13a:	891b      	ldrh	r3, [r3, #8]
   2e13c:	220f      	movs	r2, #15
   2e13e:	4013      	ands	r3, r2
   2e140:	b29b      	uxth	r3, r3
   2e142:	2b00      	cmp	r3, #0
   2e144:	d001      	beq.n	2e14a <chk_mounted+0x2ae>
   2e146:	230d      	movs	r3, #13
   2e148:	e17c      	b.n	2e444 <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   2e14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e14c:	2244      	movs	r2, #68	; 0x44
   2e14e:	5c9b      	ldrb	r3, [r3, r2]
   2e150:	021b      	lsls	r3, r3, #8
   2e152:	b21a      	sxth	r2, r3
   2e154:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e156:	2143      	movs	r1, #67	; 0x43
   2e158:	5c5b      	ldrb	r3, [r3, r1]
   2e15a:	b21b      	sxth	r3, r3
   2e15c:	4313      	orrs	r3, r2
   2e15e:	b21b      	sxth	r3, r3
   2e160:	b29b      	uxth	r3, r3
   2e162:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   2e164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2e166:	2b00      	cmp	r3, #0
   2e168:	d112      	bne.n	2e190 <chk_mounted+0x2f4>
   2e16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e16c:	2253      	movs	r2, #83	; 0x53
   2e16e:	5c9b      	ldrb	r3, [r3, r2]
   2e170:	061a      	lsls	r2, r3, #24
   2e172:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e174:	2152      	movs	r1, #82	; 0x52
   2e176:	5c5b      	ldrb	r3, [r3, r1]
   2e178:	041b      	lsls	r3, r3, #16
   2e17a:	4313      	orrs	r3, r2
   2e17c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e17e:	2151      	movs	r1, #81	; 0x51
   2e180:	5c52      	ldrb	r2, [r2, r1]
   2e182:	0212      	lsls	r2, r2, #8
   2e184:	4313      	orrs	r3, r2
   2e186:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e188:	2150      	movs	r1, #80	; 0x50
   2e18a:	5c52      	ldrb	r2, [r2, r1]
   2e18c:	4313      	orrs	r3, r2
   2e18e:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   2e190:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e192:	223f      	movs	r2, #63	; 0x3f
   2e194:	5c9b      	ldrb	r3, [r3, r2]
   2e196:	021b      	lsls	r3, r3, #8
   2e198:	b21a      	sxth	r2, r3
   2e19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e19c:	213e      	movs	r1, #62	; 0x3e
   2e19e:	5c5b      	ldrb	r3, [r3, r1]
   2e1a0:	b21b      	sxth	r3, r3
   2e1a2:	4313      	orrs	r3, r2
   2e1a4:	b21a      	sxth	r2, r3
   2e1a6:	231c      	movs	r3, #28
   2e1a8:	18fb      	adds	r3, r7, r3
   2e1aa:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   2e1ac:	231c      	movs	r3, #28
   2e1ae:	18fb      	adds	r3, r7, r3
   2e1b0:	881b      	ldrh	r3, [r3, #0]
   2e1b2:	2b00      	cmp	r3, #0
   2e1b4:	d101      	bne.n	2e1ba <chk_mounted+0x31e>
   2e1b6:	230d      	movs	r3, #13
   2e1b8:	e144      	b.n	2e444 <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   2e1ba:	231c      	movs	r3, #28
   2e1bc:	18fb      	adds	r3, r7, r3
   2e1be:	881a      	ldrh	r2, [r3, #0]
   2e1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2e1c2:	18d3      	adds	r3, r2, r3
   2e1c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e1c6:	8912      	ldrh	r2, [r2, #8]
   2e1c8:	0912      	lsrs	r2, r2, #4
   2e1ca:	b292      	uxth	r2, r2
   2e1cc:	189b      	adds	r3, r3, r2
   2e1ce:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   2e1d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2e1d2:	69bb      	ldr	r3, [r7, #24]
   2e1d4:	429a      	cmp	r2, r3
   2e1d6:	d201      	bcs.n	2e1dc <chk_mounted+0x340>
   2e1d8:	230d      	movs	r3, #13
   2e1da:	e133      	b.n	2e444 <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   2e1dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2e1de:	69bb      	ldr	r3, [r7, #24]
   2e1e0:	1ad2      	subs	r2, r2, r3
   2e1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e1e4:	789b      	ldrb	r3, [r3, #2]
   2e1e6:	0019      	movs	r1, r3
   2e1e8:	4b08      	ldr	r3, [pc, #32]	; (2e20c <chk_mounted+0x370>)
   2e1ea:	0010      	movs	r0, r2
   2e1ec:	4798      	blx	r3
   2e1ee:	0003      	movs	r3, r0
   2e1f0:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   2e1f2:	697b      	ldr	r3, [r7, #20]
   2e1f4:	2b00      	cmp	r3, #0
   2e1f6:	d10b      	bne.n	2e210 <chk_mounted+0x374>
   2e1f8:	230d      	movs	r3, #13
   2e1fa:	e123      	b.n	2e444 <chk_mounted+0x5a8>
   2e1fc:	200042f8 	.word	0x200042f8
   2e200:	0002bff9 	.word	0x0002bff9
   2e204:	0002bf75 	.word	0x0002bf75
   2e208:	0002ddc9 	.word	0x0002ddc9
   2e20c:	00033615 	.word	0x00033615
	fmt = FS_FAT12;
   2e210:	2347      	movs	r3, #71	; 0x47
   2e212:	18fb      	adds	r3, r7, r3
   2e214:	2201      	movs	r2, #1
   2e216:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   2e218:	697b      	ldr	r3, [r7, #20]
   2e21a:	4a8c      	ldr	r2, [pc, #560]	; (2e44c <chk_mounted+0x5b0>)
   2e21c:	4293      	cmp	r3, r2
   2e21e:	d903      	bls.n	2e228 <chk_mounted+0x38c>
   2e220:	2347      	movs	r3, #71	; 0x47
   2e222:	18fb      	adds	r3, r7, r3
   2e224:	2202      	movs	r2, #2
   2e226:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   2e228:	697b      	ldr	r3, [r7, #20]
   2e22a:	4a89      	ldr	r2, [pc, #548]	; (2e450 <chk_mounted+0x5b4>)
   2e22c:	4293      	cmp	r3, r2
   2e22e:	d903      	bls.n	2e238 <chk_mounted+0x39c>
   2e230:	2347      	movs	r3, #71	; 0x47
   2e232:	18fb      	adds	r3, r7, r3
   2e234:	2203      	movs	r2, #3
   2e236:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   2e238:	697b      	ldr	r3, [r7, #20]
   2e23a:	1c9a      	adds	r2, r3, #2
   2e23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e23e:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   2e240:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2e242:	69bb      	ldr	r3, [r7, #24]
   2e244:	18d2      	adds	r2, r2, r3
   2e246:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e248:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   2e24a:	231c      	movs	r3, #28
   2e24c:	18fb      	adds	r3, r7, r3
   2e24e:	881a      	ldrh	r2, [r3, #0]
   2e250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2e252:	18d2      	adds	r2, r2, r3
   2e254:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e256:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
   2e258:	2347      	movs	r3, #71	; 0x47
   2e25a:	18fb      	adds	r3, r7, r3
   2e25c:	781b      	ldrb	r3, [r3, #0]
   2e25e:	2b03      	cmp	r3, #3
   2e260:	d11e      	bne.n	2e2a0 <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   2e262:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e264:	891b      	ldrh	r3, [r3, #8]
   2e266:	2b00      	cmp	r3, #0
   2e268:	d001      	beq.n	2e26e <chk_mounted+0x3d2>
   2e26a:	230d      	movs	r3, #13
   2e26c:	e0ea      	b.n	2e444 <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   2e26e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e270:	225f      	movs	r2, #95	; 0x5f
   2e272:	5c9b      	ldrb	r3, [r3, r2]
   2e274:	061a      	lsls	r2, r3, #24
   2e276:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e278:	215e      	movs	r1, #94	; 0x5e
   2e27a:	5c5b      	ldrb	r3, [r3, r1]
   2e27c:	041b      	lsls	r3, r3, #16
   2e27e:	4313      	orrs	r3, r2
   2e280:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e282:	215d      	movs	r1, #93	; 0x5d
   2e284:	5c52      	ldrb	r2, [r2, r1]
   2e286:	0212      	lsls	r2, r2, #8
   2e288:	4313      	orrs	r3, r2
   2e28a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e28c:	215c      	movs	r1, #92	; 0x5c
   2e28e:	5c52      	ldrb	r2, [r2, r1]
   2e290:	431a      	orrs	r2, r3
   2e292:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e294:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   2e296:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e298:	699b      	ldr	r3, [r3, #24]
   2e29a:	009b      	lsls	r3, r3, #2
   2e29c:	633b      	str	r3, [r7, #48]	; 0x30
   2e29e:	e020      	b.n	2e2e2 <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   2e2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e2a2:	891b      	ldrh	r3, [r3, #8]
   2e2a4:	2b00      	cmp	r3, #0
   2e2a6:	d101      	bne.n	2e2ac <chk_mounted+0x410>
   2e2a8:	230d      	movs	r3, #13
   2e2aa:	e0cb      	b.n	2e444 <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   2e2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e2ae:	6a1a      	ldr	r2, [r3, #32]
   2e2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2e2b2:	18d2      	adds	r2, r2, r3
   2e2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e2b6:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   2e2b8:	2347      	movs	r3, #71	; 0x47
   2e2ba:	18fb      	adds	r3, r7, r3
   2e2bc:	781b      	ldrb	r3, [r3, #0]
   2e2be:	2b02      	cmp	r3, #2
   2e2c0:	d103      	bne.n	2e2ca <chk_mounted+0x42e>
   2e2c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e2c4:	699b      	ldr	r3, [r3, #24]
   2e2c6:	005b      	lsls	r3, r3, #1
   2e2c8:	e00a      	b.n	2e2e0 <chk_mounted+0x444>
   2e2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e2cc:	699a      	ldr	r2, [r3, #24]
   2e2ce:	0013      	movs	r3, r2
   2e2d0:	005b      	lsls	r3, r3, #1
   2e2d2:	189b      	adds	r3, r3, r2
   2e2d4:	085a      	lsrs	r2, r3, #1
   2e2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e2d8:	699b      	ldr	r3, [r3, #24]
   2e2da:	2101      	movs	r1, #1
   2e2dc:	400b      	ands	r3, r1
   2e2de:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
   2e2e0:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   2e2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e2e4:	69da      	ldr	r2, [r3, #28]
   2e2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e2e8:	495a      	ldr	r1, [pc, #360]	; (2e454 <chk_mounted+0x5b8>)
   2e2ea:	468c      	mov	ip, r1
   2e2ec:	4463      	add	r3, ip
   2e2ee:	0a5b      	lsrs	r3, r3, #9
   2e2f0:	429a      	cmp	r2, r3
   2e2f2:	d201      	bcs.n	2e2f8 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
   2e2f4:	230d      	movs	r3, #13
   2e2f6:	e0a5      	b.n	2e444 <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
   2e2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e2fa:	2201      	movs	r2, #1
   2e2fc:	4252      	negs	r2, r2
   2e2fe:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
   2e300:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e302:	2200      	movs	r2, #0
   2e304:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
   2e306:	2347      	movs	r3, #71	; 0x47
   2e308:	18fb      	adds	r3, r7, r3
   2e30a:	781b      	ldrb	r3, [r3, #0]
   2e30c:	2b03      	cmp	r3, #3
   2e30e:	d000      	beq.n	2e312 <chk_mounted+0x476>
   2e310:	e082      	b.n	2e418 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
   2e312:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e314:	2200      	movs	r2, #0
   2e316:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   2e318:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e31a:	2261      	movs	r2, #97	; 0x61
   2e31c:	5c9b      	ldrb	r3, [r3, r2]
   2e31e:	021b      	lsls	r3, r3, #8
   2e320:	b21a      	sxth	r2, r3
   2e322:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e324:	2160      	movs	r1, #96	; 0x60
   2e326:	5c5b      	ldrb	r3, [r3, r1]
   2e328:	b21b      	sxth	r3, r3
   2e32a:	4313      	orrs	r3, r2
   2e32c:	b21b      	sxth	r3, r3
   2e32e:	b29b      	uxth	r3, r3
   2e330:	001a      	movs	r2, r3
   2e332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2e334:	18d2      	adds	r2, r2, r3
   2e336:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e338:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2e33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e33c:	7858      	ldrb	r0, [r3, #1]
   2e33e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e340:	3330      	adds	r3, #48	; 0x30
   2e342:	0019      	movs	r1, r3
   2e344:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e346:	695a      	ldr	r2, [r3, #20]
   2e348:	2301      	movs	r3, #1
   2e34a:	4c43      	ldr	r4, [pc, #268]	; (2e458 <chk_mounted+0x5bc>)
   2e34c:	47a0      	blx	r4
   2e34e:	1e03      	subs	r3, r0, #0
   2e350:	d162      	bne.n	2e418 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2e352:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e354:	4a41      	ldr	r2, [pc, #260]	; (2e45c <chk_mounted+0x5c0>)
   2e356:	5c9b      	ldrb	r3, [r3, r2]
   2e358:	021b      	lsls	r3, r3, #8
   2e35a:	b21a      	sxth	r2, r3
   2e35c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e35e:	4940      	ldr	r1, [pc, #256]	; (2e460 <chk_mounted+0x5c4>)
   2e360:	5c5b      	ldrb	r3, [r3, r1]
   2e362:	b21b      	sxth	r3, r3
   2e364:	4313      	orrs	r3, r2
   2e366:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2e368:	4a3e      	ldr	r2, [pc, #248]	; (2e464 <chk_mounted+0x5c8>)
   2e36a:	4293      	cmp	r3, r2
   2e36c:	d154      	bne.n	2e418 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2e36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e370:	2233      	movs	r2, #51	; 0x33
   2e372:	5c9b      	ldrb	r3, [r3, r2]
   2e374:	061a      	lsls	r2, r3, #24
   2e376:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e378:	2132      	movs	r1, #50	; 0x32
   2e37a:	5c5b      	ldrb	r3, [r3, r1]
   2e37c:	041b      	lsls	r3, r3, #16
   2e37e:	4313      	orrs	r3, r2
   2e380:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e382:	2131      	movs	r1, #49	; 0x31
   2e384:	5c52      	ldrb	r2, [r2, r1]
   2e386:	0212      	lsls	r2, r2, #8
   2e388:	4313      	orrs	r3, r2
   2e38a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e38c:	2130      	movs	r1, #48	; 0x30
   2e38e:	5c52      	ldrb	r2, [r2, r1]
   2e390:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2e392:	4a35      	ldr	r2, [pc, #212]	; (2e468 <chk_mounted+0x5cc>)
   2e394:	4293      	cmp	r3, r2
   2e396:	d13f      	bne.n	2e418 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   2e398:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e39a:	4a34      	ldr	r2, [pc, #208]	; (2e46c <chk_mounted+0x5d0>)
   2e39c:	5c9b      	ldrb	r3, [r3, r2]
   2e39e:	061a      	lsls	r2, r3, #24
   2e3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e3a2:	4933      	ldr	r1, [pc, #204]	; (2e470 <chk_mounted+0x5d4>)
   2e3a4:	5c5b      	ldrb	r3, [r3, r1]
   2e3a6:	041b      	lsls	r3, r3, #16
   2e3a8:	4313      	orrs	r3, r2
   2e3aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e3ac:	4931      	ldr	r1, [pc, #196]	; (2e474 <chk_mounted+0x5d8>)
   2e3ae:	5c52      	ldrb	r2, [r2, r1]
   2e3b0:	0212      	lsls	r2, r2, #8
   2e3b2:	4313      	orrs	r3, r2
   2e3b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2e3b6:	2285      	movs	r2, #133	; 0x85
   2e3b8:	0092      	lsls	r2, r2, #2
   2e3ba:	5c8a      	ldrb	r2, [r1, r2]
   2e3bc:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2e3be:	4a2e      	ldr	r2, [pc, #184]	; (2e478 <chk_mounted+0x5dc>)
   2e3c0:	4293      	cmp	r3, r2
   2e3c2:	d129      	bne.n	2e418 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   2e3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e3c6:	4a2d      	ldr	r2, [pc, #180]	; (2e47c <chk_mounted+0x5e0>)
   2e3c8:	5c9b      	ldrb	r3, [r3, r2]
   2e3ca:	061a      	lsls	r2, r3, #24
   2e3cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e3ce:	492c      	ldr	r1, [pc, #176]	; (2e480 <chk_mounted+0x5e4>)
   2e3d0:	5c5b      	ldrb	r3, [r3, r1]
   2e3d2:	041b      	lsls	r3, r3, #16
   2e3d4:	4313      	orrs	r3, r2
   2e3d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e3d8:	492a      	ldr	r1, [pc, #168]	; (2e484 <chk_mounted+0x5e8>)
   2e3da:	5c52      	ldrb	r2, [r2, r1]
   2e3dc:	0212      	lsls	r2, r2, #8
   2e3de:	4313      	orrs	r3, r2
   2e3e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2e3e2:	2287      	movs	r2, #135	; 0x87
   2e3e4:	0092      	lsls	r2, r2, #2
   2e3e6:	5c8a      	ldrb	r2, [r1, r2]
   2e3e8:	431a      	orrs	r2, r3
   2e3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e3ec:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   2e3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e3f0:	4a25      	ldr	r2, [pc, #148]	; (2e488 <chk_mounted+0x5ec>)
   2e3f2:	5c9b      	ldrb	r3, [r3, r2]
   2e3f4:	061a      	lsls	r2, r3, #24
   2e3f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e3f8:	4924      	ldr	r1, [pc, #144]	; (2e48c <chk_mounted+0x5f0>)
   2e3fa:	5c5b      	ldrb	r3, [r3, r1]
   2e3fc:	041b      	lsls	r3, r3, #16
   2e3fe:	4313      	orrs	r3, r2
   2e400:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e402:	4923      	ldr	r1, [pc, #140]	; (2e490 <chk_mounted+0x5f4>)
   2e404:	5c52      	ldrb	r2, [r2, r1]
   2e406:	0212      	lsls	r2, r2, #8
   2e408:	4313      	orrs	r3, r2
   2e40a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2e40c:	2286      	movs	r2, #134	; 0x86
   2e40e:	0092      	lsls	r2, r2, #2
   2e410:	5c8a      	ldrb	r2, [r1, r2]
   2e412:	431a      	orrs	r2, r3
   2e414:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e416:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
   2e418:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e41a:	2247      	movs	r2, #71	; 0x47
   2e41c:	18ba      	adds	r2, r7, r2
   2e41e:	7812      	ldrb	r2, [r2, #0]
   2e420:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   2e422:	4b1c      	ldr	r3, [pc, #112]	; (2e494 <chk_mounted+0x5f8>)
   2e424:	881b      	ldrh	r3, [r3, #0]
   2e426:	3301      	adds	r3, #1
   2e428:	b29a      	uxth	r2, r3
   2e42a:	4b1a      	ldr	r3, [pc, #104]	; (2e494 <chk_mounted+0x5f8>)
   2e42c:	801a      	strh	r2, [r3, #0]
   2e42e:	4b19      	ldr	r3, [pc, #100]	; (2e494 <chk_mounted+0x5f8>)
   2e430:	881a      	ldrh	r2, [r3, #0]
   2e432:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e434:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   2e436:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e438:	2200      	movs	r2, #0
   2e43a:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
   2e43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e43e:	2200      	movs	r2, #0
   2e440:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
   2e442:	2300      	movs	r3, #0
}
   2e444:	0018      	movs	r0, r3
   2e446:	46bd      	mov	sp, r7
   2e448:	b013      	add	sp, #76	; 0x4c
   2e44a:	bd90      	pop	{r4, r7, pc}
   2e44c:	00000ff5 	.word	0x00000ff5
   2e450:	0000fff5 	.word	0x0000fff5
   2e454:	000001ff 	.word	0x000001ff
   2e458:	0002c031 	.word	0x0002c031
   2e45c:	0000022f 	.word	0x0000022f
   2e460:	0000022e 	.word	0x0000022e
   2e464:	ffffaa55 	.word	0xffffaa55
   2e468:	41615252 	.word	0x41615252
   2e46c:	00000217 	.word	0x00000217
   2e470:	00000216 	.word	0x00000216
   2e474:	00000215 	.word	0x00000215
   2e478:	61417272 	.word	0x61417272
   2e47c:	0000021f 	.word	0x0000021f
   2e480:	0000021e 	.word	0x0000021e
   2e484:	0000021d 	.word	0x0000021d
   2e488:	0000021b 	.word	0x0000021b
   2e48c:	0000021a 	.word	0x0000021a
   2e490:	00000219 	.word	0x00000219
   2e494:	20004318 	.word	0x20004318

0002e498 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   2e498:	b580      	push	{r7, lr}
   2e49a:	b082      	sub	sp, #8
   2e49c:	af00      	add	r7, sp, #0
   2e49e:	6078      	str	r0, [r7, #4]
   2e4a0:	000a      	movs	r2, r1
   2e4a2:	1cbb      	adds	r3, r7, #2
   2e4a4:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
   2e4a6:	687b      	ldr	r3, [r7, #4]
   2e4a8:	2b00      	cmp	r3, #0
   2e4aa:	d009      	beq.n	2e4c0 <validate+0x28>
   2e4ac:	687b      	ldr	r3, [r7, #4]
   2e4ae:	781b      	ldrb	r3, [r3, #0]
   2e4b0:	2b00      	cmp	r3, #0
   2e4b2:	d005      	beq.n	2e4c0 <validate+0x28>
   2e4b4:	687b      	ldr	r3, [r7, #4]
   2e4b6:	88db      	ldrh	r3, [r3, #6]
   2e4b8:	1cba      	adds	r2, r7, #2
   2e4ba:	8812      	ldrh	r2, [r2, #0]
   2e4bc:	429a      	cmp	r2, r3
   2e4be:	d001      	beq.n	2e4c4 <validate+0x2c>
		return FR_INVALID_OBJECT;
   2e4c0:	2309      	movs	r3, #9
   2e4c2:	e00c      	b.n	2e4de <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
   2e4c4:	687b      	ldr	r3, [r7, #4]
   2e4c6:	785b      	ldrb	r3, [r3, #1]
   2e4c8:	0018      	movs	r0, r3
   2e4ca:	4b07      	ldr	r3, [pc, #28]	; (2e4e8 <validate+0x50>)
   2e4cc:	4798      	blx	r3
   2e4ce:	0003      	movs	r3, r0
   2e4d0:	001a      	movs	r2, r3
   2e4d2:	2301      	movs	r3, #1
   2e4d4:	4013      	ands	r3, r2
   2e4d6:	d001      	beq.n	2e4dc <validate+0x44>
		return FR_NOT_READY;
   2e4d8:	2303      	movs	r3, #3
   2e4da:	e000      	b.n	2e4de <validate+0x46>

	return FR_OK;
   2e4dc:	2300      	movs	r3, #0
}
   2e4de:	0018      	movs	r0, r3
   2e4e0:	46bd      	mov	sp, r7
   2e4e2:	b002      	add	sp, #8
   2e4e4:	bd80      	pop	{r7, pc}
   2e4e6:	46c0      	nop			; (mov r8, r8)
   2e4e8:	0002bff9 	.word	0x0002bff9

0002e4ec <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
   2e4ec:	b580      	push	{r7, lr}
   2e4ee:	b084      	sub	sp, #16
   2e4f0:	af00      	add	r7, sp, #0
   2e4f2:	0002      	movs	r2, r0
   2e4f4:	6039      	str	r1, [r7, #0]
   2e4f6:	1dfb      	adds	r3, r7, #7
   2e4f8:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   2e4fa:	1dfb      	adds	r3, r7, #7
   2e4fc:	781b      	ldrb	r3, [r3, #0]
   2e4fe:	2b07      	cmp	r3, #7
   2e500:	d901      	bls.n	2e506 <f_mount+0x1a>
		return FR_INVALID_DRIVE;
   2e502:	230b      	movs	r3, #11
   2e504:	e018      	b.n	2e538 <f_mount+0x4c>
	rfs = FatFs[vol];			/* Get current fs object */
   2e506:	1dfb      	adds	r3, r7, #7
   2e508:	781a      	ldrb	r2, [r3, #0]
   2e50a:	4b0d      	ldr	r3, [pc, #52]	; (2e540 <f_mount+0x54>)
   2e50c:	0092      	lsls	r2, r2, #2
   2e50e:	58d3      	ldr	r3, [r2, r3]
   2e510:	60fb      	str	r3, [r7, #12]

	if (rfs) {
   2e512:	68fb      	ldr	r3, [r7, #12]
   2e514:	2b00      	cmp	r3, #0
   2e516:	d002      	beq.n	2e51e <f_mount+0x32>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
   2e518:	68fb      	ldr	r3, [r7, #12]
   2e51a:	2200      	movs	r2, #0
   2e51c:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
   2e51e:	683b      	ldr	r3, [r7, #0]
   2e520:	2b00      	cmp	r3, #0
   2e522:	d002      	beq.n	2e52a <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
   2e524:	683b      	ldr	r3, [r7, #0]
   2e526:	2200      	movs	r2, #0
   2e528:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
   2e52a:	1dfb      	adds	r3, r7, #7
   2e52c:	781a      	ldrb	r2, [r3, #0]
   2e52e:	4b04      	ldr	r3, [pc, #16]	; (2e540 <f_mount+0x54>)
   2e530:	0092      	lsls	r2, r2, #2
   2e532:	6839      	ldr	r1, [r7, #0]
   2e534:	50d1      	str	r1, [r2, r3]

	return FR_OK;
   2e536:	2300      	movs	r3, #0
}
   2e538:	0018      	movs	r0, r3
   2e53a:	46bd      	mov	sp, r7
   2e53c:	b004      	add	sp, #16
   2e53e:	bd80      	pop	{r7, pc}
   2e540:	200042f8 	.word	0x200042f8

0002e544 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   2e544:	b590      	push	{r4, r7, lr}
   2e546:	4ce5      	ldr	r4, [pc, #916]	; (2e8dc <f_open+0x398>)
   2e548:	44a5      	add	sp, r4
   2e54a:	af00      	add	r7, sp, #0
   2e54c:	60f8      	str	r0, [r7, #12]
   2e54e:	60b9      	str	r1, [r7, #8]
   2e550:	4be3      	ldr	r3, [pc, #908]	; (2e8e0 <f_open+0x39c>)
   2e552:	2194      	movs	r1, #148	; 0x94
   2e554:	0089      	lsls	r1, r1, #2
   2e556:	468c      	mov	ip, r1
   2e558:	44bc      	add	ip, r7
   2e55a:	4463      	add	r3, ip
   2e55c:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   2e55e:	68fb      	ldr	r3, [r7, #12]
   2e560:	2200      	movs	r2, #0
   2e562:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   2e564:	4bde      	ldr	r3, [pc, #888]	; (2e8e0 <f_open+0x39c>)
   2e566:	2294      	movs	r2, #148	; 0x94
   2e568:	0092      	lsls	r2, r2, #2
   2e56a:	4694      	mov	ip, r2
   2e56c:	44bc      	add	ip, r7
   2e56e:	4463      	add	r3, ip
   2e570:	4adb      	ldr	r2, [pc, #876]	; (2e8e0 <f_open+0x39c>)
   2e572:	2194      	movs	r1, #148	; 0x94
   2e574:	0089      	lsls	r1, r1, #2
   2e576:	468c      	mov	ip, r1
   2e578:	44bc      	add	ip, r7
   2e57a:	4462      	add	r2, ip
   2e57c:	7812      	ldrb	r2, [r2, #0]
   2e57e:	211f      	movs	r1, #31
   2e580:	400a      	ands	r2, r1
   2e582:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   2e584:	4bd6      	ldr	r3, [pc, #856]	; (2e8e0 <f_open+0x39c>)
   2e586:	2294      	movs	r2, #148	; 0x94
   2e588:	0092      	lsls	r2, r2, #2
   2e58a:	4694      	mov	ip, r2
   2e58c:	44bc      	add	ip, r7
   2e58e:	4463      	add	r3, ip
   2e590:	781b      	ldrb	r3, [r3, #0]
   2e592:	2201      	movs	r2, #1
   2e594:	4393      	bics	r3, r2
   2e596:	b2da      	uxtb	r2, r3
   2e598:	4bd2      	ldr	r3, [pc, #840]	; (2e8e4 <f_open+0x3a0>)
   2e59a:	18fc      	adds	r4, r7, r3
   2e59c:	2387      	movs	r3, #135	; 0x87
   2e59e:	009b      	lsls	r3, r3, #2
   2e5a0:	18f9      	adds	r1, r7, r3
   2e5a2:	2308      	movs	r3, #8
   2e5a4:	18fb      	adds	r3, r7, r3
   2e5a6:	0018      	movs	r0, r3
   2e5a8:	4bcf      	ldr	r3, [pc, #828]	; (2e8e8 <f_open+0x3a4>)
   2e5aa:	4798      	blx	r3
   2e5ac:	0003      	movs	r3, r0
   2e5ae:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   2e5b0:	2387      	movs	r3, #135	; 0x87
   2e5b2:	009b      	lsls	r3, r3, #2
   2e5b4:	18fb      	adds	r3, r7, r3
   2e5b6:	2284      	movs	r2, #132	; 0x84
   2e5b8:	0092      	lsls	r2, r2, #2
   2e5ba:	18ba      	adds	r2, r7, r2
   2e5bc:	619a      	str	r2, [r3, #24]
   2e5be:	2387      	movs	r3, #135	; 0x87
   2e5c0:	009b      	lsls	r3, r3, #2
   2e5c2:	18fb      	adds	r3, r7, r3
   2e5c4:	2210      	movs	r2, #16
   2e5c6:	18ba      	adds	r2, r7, r2
   2e5c8:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
   2e5ca:	4bc6      	ldr	r3, [pc, #792]	; (2e8e4 <f_open+0x3a0>)
   2e5cc:	18fb      	adds	r3, r7, r3
   2e5ce:	781b      	ldrb	r3, [r3, #0]
   2e5d0:	2b00      	cmp	r3, #0
   2e5d2:	d10b      	bne.n	2e5ec <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
   2e5d4:	68ba      	ldr	r2, [r7, #8]
   2e5d6:	4bc3      	ldr	r3, [pc, #780]	; (2e8e4 <f_open+0x3a0>)
   2e5d8:	18fc      	adds	r4, r7, r3
   2e5da:	2387      	movs	r3, #135	; 0x87
   2e5dc:	009b      	lsls	r3, r3, #2
   2e5de:	18fb      	adds	r3, r7, r3
   2e5e0:	0011      	movs	r1, r2
   2e5e2:	0018      	movs	r0, r3
   2e5e4:	4bc1      	ldr	r3, [pc, #772]	; (2e8ec <f_open+0x3a8>)
   2e5e6:	4798      	blx	r3
   2e5e8:	0003      	movs	r3, r0
   2e5ea:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
   2e5ec:	2387      	movs	r3, #135	; 0x87
   2e5ee:	009b      	lsls	r3, r3, #2
   2e5f0:	18fb      	adds	r3, r7, r3
   2e5f2:	695b      	ldr	r3, [r3, #20]
   2e5f4:	2292      	movs	r2, #146	; 0x92
   2e5f6:	0092      	lsls	r2, r2, #2
   2e5f8:	18ba      	adds	r2, r7, r2
   2e5fa:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
   2e5fc:	4bb9      	ldr	r3, [pc, #740]	; (2e8e4 <f_open+0x3a0>)
   2e5fe:	18fb      	adds	r3, r7, r3
   2e600:	781b      	ldrb	r3, [r3, #0]
   2e602:	2b00      	cmp	r3, #0
   2e604:	d109      	bne.n	2e61a <f_open+0xd6>
		if (!dir)	/* Current dir itself */
   2e606:	2392      	movs	r3, #146	; 0x92
   2e608:	009b      	lsls	r3, r3, #2
   2e60a:	18fb      	adds	r3, r7, r3
   2e60c:	681b      	ldr	r3, [r3, #0]
   2e60e:	2b00      	cmp	r3, #0
   2e610:	d103      	bne.n	2e61a <f_open+0xd6>
			res = FR_INVALID_NAME;
   2e612:	4bb4      	ldr	r3, [pc, #720]	; (2e8e4 <f_open+0x3a0>)
   2e614:	18fb      	adds	r3, r7, r3
   2e616:	2206      	movs	r2, #6
   2e618:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   2e61a:	4bb1      	ldr	r3, [pc, #708]	; (2e8e0 <f_open+0x39c>)
   2e61c:	2294      	movs	r2, #148	; 0x94
   2e61e:	0092      	lsls	r2, r2, #2
   2e620:	4694      	mov	ip, r2
   2e622:	44bc      	add	ip, r7
   2e624:	4463      	add	r3, ip
   2e626:	781b      	ldrb	r3, [r3, #0]
   2e628:	221c      	movs	r2, #28
   2e62a:	4013      	ands	r3, r2
   2e62c:	d100      	bne.n	2e630 <f_open+0xec>
   2e62e:	e141      	b.n	2e8b4 <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
   2e630:	4bac      	ldr	r3, [pc, #688]	; (2e8e4 <f_open+0x3a0>)
   2e632:	18fb      	adds	r3, r7, r3
   2e634:	781b      	ldrb	r3, [r3, #0]
   2e636:	2b00      	cmp	r3, #0
   2e638:	d027      	beq.n	2e68a <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   2e63a:	4baa      	ldr	r3, [pc, #680]	; (2e8e4 <f_open+0x3a0>)
   2e63c:	18fb      	adds	r3, r7, r3
   2e63e:	781b      	ldrb	r3, [r3, #0]
   2e640:	2b04      	cmp	r3, #4
   2e642:	d109      	bne.n	2e658 <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
   2e644:	4ba7      	ldr	r3, [pc, #668]	; (2e8e4 <f_open+0x3a0>)
   2e646:	18fc      	adds	r4, r7, r3
   2e648:	2387      	movs	r3, #135	; 0x87
   2e64a:	009b      	lsls	r3, r3, #2
   2e64c:	18fb      	adds	r3, r7, r3
   2e64e:	0018      	movs	r0, r3
   2e650:	4ba7      	ldr	r3, [pc, #668]	; (2e8f0 <f_open+0x3ac>)
   2e652:	4798      	blx	r3
   2e654:	0003      	movs	r3, r0
   2e656:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   2e658:	4ba1      	ldr	r3, [pc, #644]	; (2e8e0 <f_open+0x39c>)
   2e65a:	2294      	movs	r2, #148	; 0x94
   2e65c:	0092      	lsls	r2, r2, #2
   2e65e:	4694      	mov	ip, r2
   2e660:	44bc      	add	ip, r7
   2e662:	4463      	add	r3, ip
   2e664:	4a9e      	ldr	r2, [pc, #632]	; (2e8e0 <f_open+0x39c>)
   2e666:	2194      	movs	r1, #148	; 0x94
   2e668:	0089      	lsls	r1, r1, #2
   2e66a:	468c      	mov	ip, r1
   2e66c:	44bc      	add	ip, r7
   2e66e:	4462      	add	r2, ip
   2e670:	7812      	ldrb	r2, [r2, #0]
   2e672:	2108      	movs	r1, #8
   2e674:	430a      	orrs	r2, r1
   2e676:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
   2e678:	2387      	movs	r3, #135	; 0x87
   2e67a:	009b      	lsls	r3, r3, #2
   2e67c:	18fb      	adds	r3, r7, r3
   2e67e:	695b      	ldr	r3, [r3, #20]
   2e680:	2292      	movs	r2, #146	; 0x92
   2e682:	0092      	lsls	r2, r2, #2
   2e684:	18ba      	adds	r2, r7, r2
   2e686:	6013      	str	r3, [r2, #0]
   2e688:	e01c      	b.n	2e6c4 <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   2e68a:	2392      	movs	r3, #146	; 0x92
   2e68c:	009b      	lsls	r3, r3, #2
   2e68e:	18fb      	adds	r3, r7, r3
   2e690:	681b      	ldr	r3, [r3, #0]
   2e692:	330b      	adds	r3, #11
   2e694:	781b      	ldrb	r3, [r3, #0]
   2e696:	001a      	movs	r2, r3
   2e698:	2311      	movs	r3, #17
   2e69a:	4013      	ands	r3, r2
   2e69c:	d004      	beq.n	2e6a8 <f_open+0x164>
				res = FR_DENIED;
   2e69e:	4b91      	ldr	r3, [pc, #580]	; (2e8e4 <f_open+0x3a0>)
   2e6a0:	18fb      	adds	r3, r7, r3
   2e6a2:	2207      	movs	r2, #7
   2e6a4:	701a      	strb	r2, [r3, #0]
   2e6a6:	e00d      	b.n	2e6c4 <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   2e6a8:	4b8d      	ldr	r3, [pc, #564]	; (2e8e0 <f_open+0x39c>)
   2e6aa:	2294      	movs	r2, #148	; 0x94
   2e6ac:	0092      	lsls	r2, r2, #2
   2e6ae:	4694      	mov	ip, r2
   2e6b0:	44bc      	add	ip, r7
   2e6b2:	4463      	add	r3, ip
   2e6b4:	781b      	ldrb	r3, [r3, #0]
   2e6b6:	2204      	movs	r2, #4
   2e6b8:	4013      	ands	r3, r2
   2e6ba:	d003      	beq.n	2e6c4 <f_open+0x180>
					res = FR_EXIST;
   2e6bc:	4b89      	ldr	r3, [pc, #548]	; (2e8e4 <f_open+0x3a0>)
   2e6be:	18fb      	adds	r3, r7, r3
   2e6c0:	2208      	movs	r2, #8
   2e6c2:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   2e6c4:	4b87      	ldr	r3, [pc, #540]	; (2e8e4 <f_open+0x3a0>)
   2e6c6:	18fb      	adds	r3, r7, r3
   2e6c8:	781b      	ldrb	r3, [r3, #0]
   2e6ca:	2b00      	cmp	r3, #0
   2e6cc:	d000      	beq.n	2e6d0 <f_open+0x18c>
   2e6ce:	e12f      	b.n	2e930 <f_open+0x3ec>
   2e6d0:	4b83      	ldr	r3, [pc, #524]	; (2e8e0 <f_open+0x39c>)
   2e6d2:	2294      	movs	r2, #148	; 0x94
   2e6d4:	0092      	lsls	r2, r2, #2
   2e6d6:	4694      	mov	ip, r2
   2e6d8:	44bc      	add	ip, r7
   2e6da:	4463      	add	r3, ip
   2e6dc:	781b      	ldrb	r3, [r3, #0]
   2e6de:	2208      	movs	r2, #8
   2e6e0:	4013      	ands	r3, r2
   2e6e2:	d100      	bne.n	2e6e6 <f_open+0x1a2>
   2e6e4:	e124      	b.n	2e930 <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
   2e6e6:	4b83      	ldr	r3, [pc, #524]	; (2e8f4 <f_open+0x3b0>)
   2e6e8:	4798      	blx	r3
   2e6ea:	0003      	movs	r3, r0
   2e6ec:	2291      	movs	r2, #145	; 0x91
   2e6ee:	0092      	lsls	r2, r2, #2
   2e6f0:	18ba      	adds	r2, r7, r2
   2e6f2:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
   2e6f4:	2392      	movs	r3, #146	; 0x92
   2e6f6:	009b      	lsls	r3, r3, #2
   2e6f8:	18fb      	adds	r3, r7, r3
   2e6fa:	681b      	ldr	r3, [r3, #0]
   2e6fc:	330e      	adds	r3, #14
   2e6fe:	2291      	movs	r2, #145	; 0x91
   2e700:	0092      	lsls	r2, r2, #2
   2e702:	18ba      	adds	r2, r7, r2
   2e704:	6812      	ldr	r2, [r2, #0]
   2e706:	b2d2      	uxtb	r2, r2
   2e708:	701a      	strb	r2, [r3, #0]
   2e70a:	2392      	movs	r3, #146	; 0x92
   2e70c:	009b      	lsls	r3, r3, #2
   2e70e:	18fb      	adds	r3, r7, r3
   2e710:	681b      	ldr	r3, [r3, #0]
   2e712:	330f      	adds	r3, #15
   2e714:	2291      	movs	r2, #145	; 0x91
   2e716:	0092      	lsls	r2, r2, #2
   2e718:	18ba      	adds	r2, r7, r2
   2e71a:	6812      	ldr	r2, [r2, #0]
   2e71c:	b292      	uxth	r2, r2
   2e71e:	0a12      	lsrs	r2, r2, #8
   2e720:	b292      	uxth	r2, r2
   2e722:	b2d2      	uxtb	r2, r2
   2e724:	701a      	strb	r2, [r3, #0]
   2e726:	2392      	movs	r3, #146	; 0x92
   2e728:	009b      	lsls	r3, r3, #2
   2e72a:	18fb      	adds	r3, r7, r3
   2e72c:	681b      	ldr	r3, [r3, #0]
   2e72e:	3310      	adds	r3, #16
   2e730:	2291      	movs	r2, #145	; 0x91
   2e732:	0092      	lsls	r2, r2, #2
   2e734:	18ba      	adds	r2, r7, r2
   2e736:	6812      	ldr	r2, [r2, #0]
   2e738:	0c12      	lsrs	r2, r2, #16
   2e73a:	b2d2      	uxtb	r2, r2
   2e73c:	701a      	strb	r2, [r3, #0]
   2e73e:	2392      	movs	r3, #146	; 0x92
   2e740:	009b      	lsls	r3, r3, #2
   2e742:	18fb      	adds	r3, r7, r3
   2e744:	681b      	ldr	r3, [r3, #0]
   2e746:	3311      	adds	r3, #17
   2e748:	2291      	movs	r2, #145	; 0x91
   2e74a:	0092      	lsls	r2, r2, #2
   2e74c:	18ba      	adds	r2, r7, r2
   2e74e:	6812      	ldr	r2, [r2, #0]
   2e750:	0e12      	lsrs	r2, r2, #24
   2e752:	b2d2      	uxtb	r2, r2
   2e754:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   2e756:	2392      	movs	r3, #146	; 0x92
   2e758:	009b      	lsls	r3, r3, #2
   2e75a:	18fb      	adds	r3, r7, r3
   2e75c:	681b      	ldr	r3, [r3, #0]
   2e75e:	330b      	adds	r3, #11
   2e760:	2200      	movs	r2, #0
   2e762:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   2e764:	2392      	movs	r3, #146	; 0x92
   2e766:	009b      	lsls	r3, r3, #2
   2e768:	18fb      	adds	r3, r7, r3
   2e76a:	681b      	ldr	r3, [r3, #0]
   2e76c:	331c      	adds	r3, #28
   2e76e:	2200      	movs	r2, #0
   2e770:	701a      	strb	r2, [r3, #0]
   2e772:	2392      	movs	r3, #146	; 0x92
   2e774:	009b      	lsls	r3, r3, #2
   2e776:	18fb      	adds	r3, r7, r3
   2e778:	681b      	ldr	r3, [r3, #0]
   2e77a:	331d      	adds	r3, #29
   2e77c:	2200      	movs	r2, #0
   2e77e:	701a      	strb	r2, [r3, #0]
   2e780:	2392      	movs	r3, #146	; 0x92
   2e782:	009b      	lsls	r3, r3, #2
   2e784:	18fb      	adds	r3, r7, r3
   2e786:	681b      	ldr	r3, [r3, #0]
   2e788:	331e      	adds	r3, #30
   2e78a:	2200      	movs	r2, #0
   2e78c:	701a      	strb	r2, [r3, #0]
   2e78e:	2392      	movs	r3, #146	; 0x92
   2e790:	009b      	lsls	r3, r3, #2
   2e792:	18fb      	adds	r3, r7, r3
   2e794:	681b      	ldr	r3, [r3, #0]
   2e796:	331f      	adds	r3, #31
   2e798:	2200      	movs	r2, #0
   2e79a:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
   2e79c:	2392      	movs	r3, #146	; 0x92
   2e79e:	009b      	lsls	r3, r3, #2
   2e7a0:	18fb      	adds	r3, r7, r3
   2e7a2:	681b      	ldr	r3, [r3, #0]
   2e7a4:	3315      	adds	r3, #21
   2e7a6:	781b      	ldrb	r3, [r3, #0]
   2e7a8:	021b      	lsls	r3, r3, #8
   2e7aa:	b21a      	sxth	r2, r3
   2e7ac:	2392      	movs	r3, #146	; 0x92
   2e7ae:	009b      	lsls	r3, r3, #2
   2e7b0:	18fb      	adds	r3, r7, r3
   2e7b2:	681b      	ldr	r3, [r3, #0]
   2e7b4:	3314      	adds	r3, #20
   2e7b6:	781b      	ldrb	r3, [r3, #0]
   2e7b8:	b21b      	sxth	r3, r3
   2e7ba:	4313      	orrs	r3, r2
   2e7bc:	b21b      	sxth	r3, r3
   2e7be:	b29b      	uxth	r3, r3
   2e7c0:	041b      	lsls	r3, r3, #16
   2e7c2:	2292      	movs	r2, #146	; 0x92
   2e7c4:	0092      	lsls	r2, r2, #2
   2e7c6:	18ba      	adds	r2, r7, r2
   2e7c8:	6812      	ldr	r2, [r2, #0]
   2e7ca:	321b      	adds	r2, #27
   2e7cc:	7812      	ldrb	r2, [r2, #0]
   2e7ce:	0212      	lsls	r2, r2, #8
   2e7d0:	b211      	sxth	r1, r2
   2e7d2:	2292      	movs	r2, #146	; 0x92
   2e7d4:	0092      	lsls	r2, r2, #2
   2e7d6:	18ba      	adds	r2, r7, r2
   2e7d8:	6812      	ldr	r2, [r2, #0]
   2e7da:	321a      	adds	r2, #26
   2e7dc:	7812      	ldrb	r2, [r2, #0]
   2e7de:	b212      	sxth	r2, r2
   2e7e0:	430a      	orrs	r2, r1
   2e7e2:	b212      	sxth	r2, r2
   2e7e4:	b292      	uxth	r2, r2
   2e7e6:	4313      	orrs	r3, r2
   2e7e8:	2290      	movs	r2, #144	; 0x90
   2e7ea:	0092      	lsls	r2, r2, #2
   2e7ec:	18ba      	adds	r2, r7, r2
   2e7ee:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
   2e7f0:	2392      	movs	r3, #146	; 0x92
   2e7f2:	009b      	lsls	r3, r3, #2
   2e7f4:	18fb      	adds	r3, r7, r3
   2e7f6:	681b      	ldr	r3, [r3, #0]
   2e7f8:	331a      	adds	r3, #26
   2e7fa:	2200      	movs	r2, #0
   2e7fc:	701a      	strb	r2, [r3, #0]
   2e7fe:	2392      	movs	r3, #146	; 0x92
   2e800:	009b      	lsls	r3, r3, #2
   2e802:	18fb      	adds	r3, r7, r3
   2e804:	681b      	ldr	r3, [r3, #0]
   2e806:	331b      	adds	r3, #27
   2e808:	2200      	movs	r2, #0
   2e80a:	701a      	strb	r2, [r3, #0]
   2e80c:	2392      	movs	r3, #146	; 0x92
   2e80e:	009b      	lsls	r3, r3, #2
   2e810:	18fb      	adds	r3, r7, r3
   2e812:	681b      	ldr	r3, [r3, #0]
   2e814:	3314      	adds	r3, #20
   2e816:	2200      	movs	r2, #0
   2e818:	701a      	strb	r2, [r3, #0]
   2e81a:	2392      	movs	r3, #146	; 0x92
   2e81c:	009b      	lsls	r3, r3, #2
   2e81e:	18fb      	adds	r3, r7, r3
   2e820:	681b      	ldr	r3, [r3, #0]
   2e822:	3315      	adds	r3, #21
   2e824:	2200      	movs	r2, #0
   2e826:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
   2e828:	2387      	movs	r3, #135	; 0x87
   2e82a:	009b      	lsls	r3, r3, #2
   2e82c:	18fb      	adds	r3, r7, r3
   2e82e:	681b      	ldr	r3, [r3, #0]
   2e830:	2201      	movs	r2, #1
   2e832:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   2e834:	2390      	movs	r3, #144	; 0x90
   2e836:	009b      	lsls	r3, r3, #2
   2e838:	18fb      	adds	r3, r7, r3
   2e83a:	681b      	ldr	r3, [r3, #0]
   2e83c:	2b00      	cmp	r3, #0
   2e83e:	d100      	bne.n	2e842 <f_open+0x2fe>
   2e840:	e076      	b.n	2e930 <f_open+0x3ec>
				dw = dj.fs->winsect;
   2e842:	2387      	movs	r3, #135	; 0x87
   2e844:	009b      	lsls	r3, r3, #2
   2e846:	18fb      	adds	r3, r7, r3
   2e848:	681b      	ldr	r3, [r3, #0]
   2e84a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2e84c:	2291      	movs	r2, #145	; 0x91
   2e84e:	0092      	lsls	r2, r2, #2
   2e850:	18ba      	adds	r2, r7, r2
   2e852:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
   2e854:	2387      	movs	r3, #135	; 0x87
   2e856:	009b      	lsls	r3, r3, #2
   2e858:	18fb      	adds	r3, r7, r3
   2e85a:	681b      	ldr	r3, [r3, #0]
   2e85c:	4a21      	ldr	r2, [pc, #132]	; (2e8e4 <f_open+0x3a0>)
   2e85e:	18bc      	adds	r4, r7, r2
   2e860:	2290      	movs	r2, #144	; 0x90
   2e862:	0092      	lsls	r2, r2, #2
   2e864:	18ba      	adds	r2, r7, r2
   2e866:	6812      	ldr	r2, [r2, #0]
   2e868:	0011      	movs	r1, r2
   2e86a:	0018      	movs	r0, r3
   2e86c:	4b22      	ldr	r3, [pc, #136]	; (2e8f8 <f_open+0x3b4>)
   2e86e:	4798      	blx	r3
   2e870:	0003      	movs	r3, r0
   2e872:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
   2e874:	4b1b      	ldr	r3, [pc, #108]	; (2e8e4 <f_open+0x3a0>)
   2e876:	18fb      	adds	r3, r7, r3
   2e878:	781b      	ldrb	r3, [r3, #0]
   2e87a:	2b00      	cmp	r3, #0
   2e87c:	d158      	bne.n	2e930 <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   2e87e:	2387      	movs	r3, #135	; 0x87
   2e880:	009b      	lsls	r3, r3, #2
   2e882:	18fb      	adds	r3, r7, r3
   2e884:	681b      	ldr	r3, [r3, #0]
   2e886:	2290      	movs	r2, #144	; 0x90
   2e888:	0092      	lsls	r2, r2, #2
   2e88a:	18ba      	adds	r2, r7, r2
   2e88c:	6812      	ldr	r2, [r2, #0]
   2e88e:	3a01      	subs	r2, #1
   2e890:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
   2e892:	2387      	movs	r3, #135	; 0x87
   2e894:	009b      	lsls	r3, r3, #2
   2e896:	18fb      	adds	r3, r7, r3
   2e898:	681b      	ldr	r3, [r3, #0]
   2e89a:	4a12      	ldr	r2, [pc, #72]	; (2e8e4 <f_open+0x3a0>)
   2e89c:	18bc      	adds	r4, r7, r2
   2e89e:	2291      	movs	r2, #145	; 0x91
   2e8a0:	0092      	lsls	r2, r2, #2
   2e8a2:	18ba      	adds	r2, r7, r2
   2e8a4:	6812      	ldr	r2, [r2, #0]
   2e8a6:	0011      	movs	r1, r2
   2e8a8:	0018      	movs	r0, r3
   2e8aa:	4b14      	ldr	r3, [pc, #80]	; (2e8fc <f_open+0x3b8>)
   2e8ac:	4798      	blx	r3
   2e8ae:	0003      	movs	r3, r0
   2e8b0:	7023      	strb	r3, [r4, #0]
   2e8b2:	e03d      	b.n	2e930 <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   2e8b4:	4b0b      	ldr	r3, [pc, #44]	; (2e8e4 <f_open+0x3a0>)
   2e8b6:	18fb      	adds	r3, r7, r3
   2e8b8:	781b      	ldrb	r3, [r3, #0]
   2e8ba:	2b00      	cmp	r3, #0
   2e8bc:	d138      	bne.n	2e930 <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   2e8be:	2392      	movs	r3, #146	; 0x92
   2e8c0:	009b      	lsls	r3, r3, #2
   2e8c2:	18fb      	adds	r3, r7, r3
   2e8c4:	681b      	ldr	r3, [r3, #0]
   2e8c6:	330b      	adds	r3, #11
   2e8c8:	781b      	ldrb	r3, [r3, #0]
   2e8ca:	001a      	movs	r2, r3
   2e8cc:	2310      	movs	r3, #16
   2e8ce:	4013      	ands	r3, r2
   2e8d0:	d016      	beq.n	2e900 <f_open+0x3bc>
				res = FR_NO_FILE;
   2e8d2:	4b04      	ldr	r3, [pc, #16]	; (2e8e4 <f_open+0x3a0>)
   2e8d4:	18fb      	adds	r3, r7, r3
   2e8d6:	2204      	movs	r2, #4
   2e8d8:	701a      	strb	r2, [r3, #0]
   2e8da:	e029      	b.n	2e930 <f_open+0x3ec>
   2e8dc:	fffffdac 	.word	0xfffffdac
   2e8e0:	fffffdb7 	.word	0xfffffdb7
   2e8e4:	0000024f 	.word	0x0000024f
   2e8e8:	0002de9d 	.word	0x0002de9d
   2e8ec:	0002dc91 	.word	0x0002dc91
   2e8f0:	0002d4e1 	.word	0x0002d4e1
   2e8f4:	0002c2d9 	.word	0x0002c2d9
   2e8f8:	0002ca5d 	.word	0x0002ca5d
   2e8fc:	0002c41d 	.word	0x0002c41d
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   2e900:	4b5a      	ldr	r3, [pc, #360]	; (2ea6c <f_open+0x528>)
   2e902:	2294      	movs	r2, #148	; 0x94
   2e904:	0092      	lsls	r2, r2, #2
   2e906:	4694      	mov	ip, r2
   2e908:	44bc      	add	ip, r7
   2e90a:	4463      	add	r3, ip
   2e90c:	781b      	ldrb	r3, [r3, #0]
   2e90e:	2202      	movs	r2, #2
   2e910:	4013      	ands	r3, r2
   2e912:	d00d      	beq.n	2e930 <f_open+0x3ec>
   2e914:	2392      	movs	r3, #146	; 0x92
   2e916:	009b      	lsls	r3, r3, #2
   2e918:	18fb      	adds	r3, r7, r3
   2e91a:	681b      	ldr	r3, [r3, #0]
   2e91c:	330b      	adds	r3, #11
   2e91e:	781b      	ldrb	r3, [r3, #0]
   2e920:	001a      	movs	r2, r3
   2e922:	2301      	movs	r3, #1
   2e924:	4013      	ands	r3, r2
   2e926:	d003      	beq.n	2e930 <f_open+0x3ec>
					res = FR_DENIED;
   2e928:	4b51      	ldr	r3, [pc, #324]	; (2ea70 <f_open+0x52c>)
   2e92a:	18fb      	adds	r3, r7, r3
   2e92c:	2207      	movs	r2, #7
   2e92e:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
   2e930:	4b4f      	ldr	r3, [pc, #316]	; (2ea70 <f_open+0x52c>)
   2e932:	18fb      	adds	r3, r7, r3
   2e934:	781b      	ldrb	r3, [r3, #0]
   2e936:	2b00      	cmp	r3, #0
   2e938:	d126      	bne.n	2e988 <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   2e93a:	4b4c      	ldr	r3, [pc, #304]	; (2ea6c <f_open+0x528>)
   2e93c:	2294      	movs	r2, #148	; 0x94
   2e93e:	0092      	lsls	r2, r2, #2
   2e940:	4694      	mov	ip, r2
   2e942:	44bc      	add	ip, r7
   2e944:	4463      	add	r3, ip
   2e946:	781b      	ldrb	r3, [r3, #0]
   2e948:	2208      	movs	r2, #8
   2e94a:	4013      	ands	r3, r2
   2e94c:	d00f      	beq.n	2e96e <f_open+0x42a>
			mode |= FA__WRITTEN;
   2e94e:	4b47      	ldr	r3, [pc, #284]	; (2ea6c <f_open+0x528>)
   2e950:	2294      	movs	r2, #148	; 0x94
   2e952:	0092      	lsls	r2, r2, #2
   2e954:	4694      	mov	ip, r2
   2e956:	44bc      	add	ip, r7
   2e958:	4463      	add	r3, ip
   2e95a:	4a44      	ldr	r2, [pc, #272]	; (2ea6c <f_open+0x528>)
   2e95c:	2194      	movs	r1, #148	; 0x94
   2e95e:	0089      	lsls	r1, r1, #2
   2e960:	468c      	mov	ip, r1
   2e962:	44bc      	add	ip, r7
   2e964:	4462      	add	r2, ip
   2e966:	7812      	ldrb	r2, [r2, #0]
   2e968:	2120      	movs	r1, #32
   2e96a:	430a      	orrs	r2, r1
   2e96c:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   2e96e:	2387      	movs	r3, #135	; 0x87
   2e970:	009b      	lsls	r3, r3, #2
   2e972:	18fb      	adds	r3, r7, r3
   2e974:	681b      	ldr	r3, [r3, #0]
   2e976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2e978:	68fb      	ldr	r3, [r7, #12]
   2e97a:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
   2e97c:	68fb      	ldr	r3, [r7, #12]
   2e97e:	2292      	movs	r2, #146	; 0x92
   2e980:	0092      	lsls	r2, r2, #2
   2e982:	18ba      	adds	r2, r7, r2
   2e984:	6812      	ldr	r2, [r2, #0]
   2e986:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
   2e988:	4b39      	ldr	r3, [pc, #228]	; (2ea70 <f_open+0x52c>)
   2e98a:	18fb      	adds	r3, r7, r3
   2e98c:	781b      	ldrb	r3, [r3, #0]
   2e98e:	2b00      	cmp	r3, #0
   2e990:	d163      	bne.n	2ea5a <f_open+0x516>
		fp->flag = mode;					/* File access mode */
   2e992:	68fb      	ldr	r3, [r7, #12]
   2e994:	4a35      	ldr	r2, [pc, #212]	; (2ea6c <f_open+0x528>)
   2e996:	2194      	movs	r1, #148	; 0x94
   2e998:	0089      	lsls	r1, r1, #2
   2e99a:	468c      	mov	ip, r1
   2e99c:	44bc      	add	ip, r7
   2e99e:	4462      	add	r2, ip
   2e9a0:	7812      	ldrb	r2, [r2, #0]
   2e9a2:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   2e9a4:	2392      	movs	r3, #146	; 0x92
   2e9a6:	009b      	lsls	r3, r3, #2
   2e9a8:	18fb      	adds	r3, r7, r3
   2e9aa:	681b      	ldr	r3, [r3, #0]
   2e9ac:	3315      	adds	r3, #21
   2e9ae:	781b      	ldrb	r3, [r3, #0]
   2e9b0:	021b      	lsls	r3, r3, #8
   2e9b2:	b21a      	sxth	r2, r3
   2e9b4:	2392      	movs	r3, #146	; 0x92
   2e9b6:	009b      	lsls	r3, r3, #2
   2e9b8:	18fb      	adds	r3, r7, r3
   2e9ba:	681b      	ldr	r3, [r3, #0]
   2e9bc:	3314      	adds	r3, #20
   2e9be:	781b      	ldrb	r3, [r3, #0]
   2e9c0:	b21b      	sxth	r3, r3
   2e9c2:	4313      	orrs	r3, r2
   2e9c4:	b21b      	sxth	r3, r3
   2e9c6:	b29b      	uxth	r3, r3
   2e9c8:	041b      	lsls	r3, r3, #16
   2e9ca:	2292      	movs	r2, #146	; 0x92
   2e9cc:	0092      	lsls	r2, r2, #2
   2e9ce:	18ba      	adds	r2, r7, r2
   2e9d0:	6812      	ldr	r2, [r2, #0]
   2e9d2:	321b      	adds	r2, #27
   2e9d4:	7812      	ldrb	r2, [r2, #0]
   2e9d6:	0212      	lsls	r2, r2, #8
   2e9d8:	b211      	sxth	r1, r2
   2e9da:	2292      	movs	r2, #146	; 0x92
   2e9dc:	0092      	lsls	r2, r2, #2
   2e9de:	18ba      	adds	r2, r7, r2
   2e9e0:	6812      	ldr	r2, [r2, #0]
   2e9e2:	321a      	adds	r2, #26
   2e9e4:	7812      	ldrb	r2, [r2, #0]
   2e9e6:	b212      	sxth	r2, r2
   2e9e8:	430a      	orrs	r2, r1
   2e9ea:	b212      	sxth	r2, r2
   2e9ec:	b292      	uxth	r2, r2
   2e9ee:	431a      	orrs	r2, r3
   2e9f0:	68fb      	ldr	r3, [r7, #12]
   2e9f2:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   2e9f4:	2392      	movs	r3, #146	; 0x92
   2e9f6:	009b      	lsls	r3, r3, #2
   2e9f8:	18fb      	adds	r3, r7, r3
   2e9fa:	681b      	ldr	r3, [r3, #0]
   2e9fc:	331f      	adds	r3, #31
   2e9fe:	781b      	ldrb	r3, [r3, #0]
   2ea00:	061a      	lsls	r2, r3, #24
   2ea02:	2392      	movs	r3, #146	; 0x92
   2ea04:	009b      	lsls	r3, r3, #2
   2ea06:	18fb      	adds	r3, r7, r3
   2ea08:	681b      	ldr	r3, [r3, #0]
   2ea0a:	331e      	adds	r3, #30
   2ea0c:	781b      	ldrb	r3, [r3, #0]
   2ea0e:	041b      	lsls	r3, r3, #16
   2ea10:	4313      	orrs	r3, r2
   2ea12:	2292      	movs	r2, #146	; 0x92
   2ea14:	0092      	lsls	r2, r2, #2
   2ea16:	18ba      	adds	r2, r7, r2
   2ea18:	6812      	ldr	r2, [r2, #0]
   2ea1a:	321d      	adds	r2, #29
   2ea1c:	7812      	ldrb	r2, [r2, #0]
   2ea1e:	0212      	lsls	r2, r2, #8
   2ea20:	4313      	orrs	r3, r2
   2ea22:	2292      	movs	r2, #146	; 0x92
   2ea24:	0092      	lsls	r2, r2, #2
   2ea26:	18ba      	adds	r2, r7, r2
   2ea28:	6812      	ldr	r2, [r2, #0]
   2ea2a:	321c      	adds	r2, #28
   2ea2c:	7812      	ldrb	r2, [r2, #0]
   2ea2e:	431a      	orrs	r2, r3
   2ea30:	68fb      	ldr	r3, [r7, #12]
   2ea32:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
   2ea34:	68fb      	ldr	r3, [r7, #12]
   2ea36:	2200      	movs	r2, #0
   2ea38:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
   2ea3a:	68fb      	ldr	r3, [r7, #12]
   2ea3c:	2200      	movs	r2, #0
   2ea3e:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   2ea40:	2387      	movs	r3, #135	; 0x87
   2ea42:	009b      	lsls	r3, r3, #2
   2ea44:	18fb      	adds	r3, r7, r3
   2ea46:	681a      	ldr	r2, [r3, #0]
   2ea48:	68fb      	ldr	r3, [r7, #12]
   2ea4a:	601a      	str	r2, [r3, #0]
   2ea4c:	2387      	movs	r3, #135	; 0x87
   2ea4e:	009b      	lsls	r3, r3, #2
   2ea50:	18fb      	adds	r3, r7, r3
   2ea52:	681b      	ldr	r3, [r3, #0]
   2ea54:	88da      	ldrh	r2, [r3, #6]
   2ea56:	68fb      	ldr	r3, [r7, #12]
   2ea58:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
   2ea5a:	4b05      	ldr	r3, [pc, #20]	; (2ea70 <f_open+0x52c>)
   2ea5c:	18fb      	adds	r3, r7, r3
   2ea5e:	781b      	ldrb	r3, [r3, #0]
}
   2ea60:	0018      	movs	r0, r3
   2ea62:	46bd      	mov	sp, r7
   2ea64:	2395      	movs	r3, #149	; 0x95
   2ea66:	009b      	lsls	r3, r3, #2
   2ea68:	449d      	add	sp, r3
   2ea6a:	bd90      	pop	{r4, r7, pc}
   2ea6c:	fffffdb7 	.word	0xfffffdb7
   2ea70:	0000024f 	.word	0x0000024f

0002ea74 <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   2ea74:	b590      	push	{r4, r7, lr}
   2ea76:	b08b      	sub	sp, #44	; 0x2c
   2ea78:	af00      	add	r7, sp, #0
   2ea7a:	60f8      	str	r0, [r7, #12]
   2ea7c:	60b9      	str	r1, [r7, #8]
   2ea7e:	607a      	str	r2, [r7, #4]
   2ea80:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
   2ea82:	68bb      	ldr	r3, [r7, #8]
   2ea84:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   2ea86:	683b      	ldr	r3, [r7, #0]
   2ea88:	2200      	movs	r2, #0
   2ea8a:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   2ea8c:	68fb      	ldr	r3, [r7, #12]
   2ea8e:	681a      	ldr	r2, [r3, #0]
   2ea90:	68fb      	ldr	r3, [r7, #12]
   2ea92:	889b      	ldrh	r3, [r3, #4]
   2ea94:	2117      	movs	r1, #23
   2ea96:	187c      	adds	r4, r7, r1
   2ea98:	0019      	movs	r1, r3
   2ea9a:	0010      	movs	r0, r2
   2ea9c:	4bc3      	ldr	r3, [pc, #780]	; (2edac <f_write+0x338>)
   2ea9e:	4798      	blx	r3
   2eaa0:	0003      	movs	r3, r0
   2eaa2:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   2eaa4:	2317      	movs	r3, #23
   2eaa6:	18fb      	adds	r3, r7, r3
   2eaa8:	781b      	ldrb	r3, [r3, #0]
   2eaaa:	2b00      	cmp	r3, #0
   2eaac:	d003      	beq.n	2eab6 <f_write+0x42>
   2eaae:	2317      	movs	r3, #23
   2eab0:	18fb      	adds	r3, r7, r3
   2eab2:	781b      	ldrb	r3, [r3, #0]
   2eab4:	e176      	b.n	2eda4 <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   2eab6:	68fb      	ldr	r3, [r7, #12]
   2eab8:	799b      	ldrb	r3, [r3, #6]
   2eaba:	b25b      	sxtb	r3, r3
   2eabc:	2b00      	cmp	r3, #0
   2eabe:	da01      	bge.n	2eac4 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   2eac0:	2302      	movs	r3, #2
   2eac2:	e16f      	b.n	2eda4 <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   2eac4:	68fb      	ldr	r3, [r7, #12]
   2eac6:	799b      	ldrb	r3, [r3, #6]
   2eac8:	001a      	movs	r2, r3
   2eaca:	2302      	movs	r3, #2
   2eacc:	4013      	ands	r3, r2
   2eace:	d101      	bne.n	2ead4 <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
   2ead0:	2307      	movs	r3, #7
   2ead2:	e167      	b.n	2eda4 <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   2ead4:	68fb      	ldr	r3, [r7, #12]
   2ead6:	68da      	ldr	r2, [r3, #12]
   2ead8:	687b      	ldr	r3, [r7, #4]
   2eada:	18d2      	adds	r2, r2, r3
   2eadc:	68fb      	ldr	r3, [r7, #12]
   2eade:	68db      	ldr	r3, [r3, #12]
   2eae0:	429a      	cmp	r2, r3
   2eae2:	d300      	bcc.n	2eae6 <f_write+0x72>
   2eae4:	e146      	b.n	2ed74 <f_write+0x300>
   2eae6:	2300      	movs	r3, #0
   2eae8:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
   2eaea:	e143      	b.n	2ed74 <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   2eaec:	68fb      	ldr	r3, [r7, #12]
   2eaee:	689b      	ldr	r3, [r3, #8]
   2eaf0:	05db      	lsls	r3, r3, #23
   2eaf2:	0ddb      	lsrs	r3, r3, #23
   2eaf4:	d000      	beq.n	2eaf8 <f_write+0x84>
   2eaf6:	e0f6      	b.n	2ece6 <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   2eaf8:	68fb      	ldr	r3, [r7, #12]
   2eafa:	689b      	ldr	r3, [r3, #8]
   2eafc:	0a5b      	lsrs	r3, r3, #9
   2eafe:	b2da      	uxtb	r2, r3
   2eb00:	68fb      	ldr	r3, [r7, #12]
   2eb02:	681b      	ldr	r3, [r3, #0]
   2eb04:	789b      	ldrb	r3, [r3, #2]
   2eb06:	3b01      	subs	r3, #1
   2eb08:	b2d9      	uxtb	r1, r3
   2eb0a:	2316      	movs	r3, #22
   2eb0c:	18fb      	adds	r3, r7, r3
   2eb0e:	400a      	ands	r2, r1
   2eb10:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
   2eb12:	2316      	movs	r3, #22
   2eb14:	18fb      	adds	r3, r7, r3
   2eb16:	781b      	ldrb	r3, [r3, #0]
   2eb18:	2b00      	cmp	r3, #0
   2eb1a:	d140      	bne.n	2eb9e <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
   2eb1c:	68fb      	ldr	r3, [r7, #12]
   2eb1e:	689b      	ldr	r3, [r3, #8]
   2eb20:	2b00      	cmp	r3, #0
   2eb22:	d111      	bne.n	2eb48 <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
   2eb24:	68fb      	ldr	r3, [r7, #12]
   2eb26:	691b      	ldr	r3, [r3, #16]
   2eb28:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
   2eb2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2eb2c:	2b00      	cmp	r3, #0
   2eb2e:	d115      	bne.n	2eb5c <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   2eb30:	68fb      	ldr	r3, [r7, #12]
   2eb32:	681b      	ldr	r3, [r3, #0]
   2eb34:	2100      	movs	r1, #0
   2eb36:	0018      	movs	r0, r3
   2eb38:	4b9d      	ldr	r3, [pc, #628]	; (2edb0 <f_write+0x33c>)
   2eb3a:	4798      	blx	r3
   2eb3c:	0003      	movs	r3, r0
   2eb3e:	627b      	str	r3, [r7, #36]	; 0x24
   2eb40:	68fb      	ldr	r3, [r7, #12]
   2eb42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2eb44:	611a      	str	r2, [r3, #16]
   2eb46:	e009      	b.n	2eb5c <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   2eb48:	68fb      	ldr	r3, [r7, #12]
   2eb4a:	681a      	ldr	r2, [r3, #0]
   2eb4c:	68fb      	ldr	r3, [r7, #12]
   2eb4e:	695b      	ldr	r3, [r3, #20]
   2eb50:	0019      	movs	r1, r3
   2eb52:	0010      	movs	r0, r2
   2eb54:	4b96      	ldr	r3, [pc, #600]	; (2edb0 <f_write+0x33c>)
   2eb56:	4798      	blx	r3
   2eb58:	0003      	movs	r3, r0
   2eb5a:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2eb5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2eb5e:	2b00      	cmp	r3, #0
   2eb60:	d100      	bne.n	2eb64 <f_write+0xf0>
   2eb62:	e10c      	b.n	2ed7e <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   2eb64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2eb66:	2b01      	cmp	r3, #1
   2eb68:	d109      	bne.n	2eb7e <f_write+0x10a>
   2eb6a:	68fb      	ldr	r3, [r7, #12]
   2eb6c:	799b      	ldrb	r3, [r3, #6]
   2eb6e:	2280      	movs	r2, #128	; 0x80
   2eb70:	4252      	negs	r2, r2
   2eb72:	4313      	orrs	r3, r2
   2eb74:	b2da      	uxtb	r2, r3
   2eb76:	68fb      	ldr	r3, [r7, #12]
   2eb78:	719a      	strb	r2, [r3, #6]
   2eb7a:	2302      	movs	r3, #2
   2eb7c:	e112      	b.n	2eda4 <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   2eb7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2eb80:	3301      	adds	r3, #1
   2eb82:	d109      	bne.n	2eb98 <f_write+0x124>
   2eb84:	68fb      	ldr	r3, [r7, #12]
   2eb86:	799b      	ldrb	r3, [r3, #6]
   2eb88:	2280      	movs	r2, #128	; 0x80
   2eb8a:	4252      	negs	r2, r2
   2eb8c:	4313      	orrs	r3, r2
   2eb8e:	b2da      	uxtb	r2, r3
   2eb90:	68fb      	ldr	r3, [r7, #12]
   2eb92:	719a      	strb	r2, [r3, #6]
   2eb94:	2301      	movs	r3, #1
   2eb96:	e105      	b.n	2eda4 <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
   2eb98:	68fb      	ldr	r3, [r7, #12]
   2eb9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2eb9c:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   2eb9e:	68fb      	ldr	r3, [r7, #12]
   2eba0:	681b      	ldr	r3, [r3, #0]
   2eba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2eba4:	68fb      	ldr	r3, [r7, #12]
   2eba6:	699b      	ldr	r3, [r3, #24]
   2eba8:	429a      	cmp	r2, r3
   2ebaa:	d111      	bne.n	2ebd0 <f_write+0x15c>
   2ebac:	68fb      	ldr	r3, [r7, #12]
   2ebae:	681b      	ldr	r3, [r3, #0]
   2ebb0:	2100      	movs	r1, #0
   2ebb2:	0018      	movs	r0, r3
   2ebb4:	4b7f      	ldr	r3, [pc, #508]	; (2edb4 <f_write+0x340>)
   2ebb6:	4798      	blx	r3
   2ebb8:	1e03      	subs	r3, r0, #0
   2ebba:	d009      	beq.n	2ebd0 <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
   2ebbc:	68fb      	ldr	r3, [r7, #12]
   2ebbe:	799b      	ldrb	r3, [r3, #6]
   2ebc0:	2280      	movs	r2, #128	; 0x80
   2ebc2:	4252      	negs	r2, r2
   2ebc4:	4313      	orrs	r3, r2
   2ebc6:	b2da      	uxtb	r2, r3
   2ebc8:	68fb      	ldr	r3, [r7, #12]
   2ebca:	719a      	strb	r2, [r3, #6]
   2ebcc:	2301      	movs	r3, #1
   2ebce:	e0e9      	b.n	2eda4 <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   2ebd0:	68fb      	ldr	r3, [r7, #12]
   2ebd2:	681a      	ldr	r2, [r3, #0]
   2ebd4:	68fb      	ldr	r3, [r7, #12]
   2ebd6:	695b      	ldr	r3, [r3, #20]
   2ebd8:	0019      	movs	r1, r3
   2ebda:	0010      	movs	r0, r2
   2ebdc:	4b76      	ldr	r3, [pc, #472]	; (2edb8 <f_write+0x344>)
   2ebde:	4798      	blx	r3
   2ebe0:	0003      	movs	r3, r0
   2ebe2:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   2ebe4:	693b      	ldr	r3, [r7, #16]
   2ebe6:	2b00      	cmp	r3, #0
   2ebe8:	d109      	bne.n	2ebfe <f_write+0x18a>
   2ebea:	68fb      	ldr	r3, [r7, #12]
   2ebec:	799b      	ldrb	r3, [r3, #6]
   2ebee:	2280      	movs	r2, #128	; 0x80
   2ebf0:	4252      	negs	r2, r2
   2ebf2:	4313      	orrs	r3, r2
   2ebf4:	b2da      	uxtb	r2, r3
   2ebf6:	68fb      	ldr	r3, [r7, #12]
   2ebf8:	719a      	strb	r2, [r3, #6]
   2ebfa:	2302      	movs	r3, #2
   2ebfc:	e0d2      	b.n	2eda4 <f_write+0x330>
			sect += csect;
   2ebfe:	2316      	movs	r3, #22
   2ec00:	18fb      	adds	r3, r7, r3
   2ec02:	781b      	ldrb	r3, [r3, #0]
   2ec04:	693a      	ldr	r2, [r7, #16]
   2ec06:	18d3      	adds	r3, r2, r3
   2ec08:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   2ec0a:	687b      	ldr	r3, [r7, #4]
   2ec0c:	0a5b      	lsrs	r3, r3, #9
   2ec0e:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
   2ec10:	69fb      	ldr	r3, [r7, #28]
   2ec12:	2b00      	cmp	r3, #0
   2ec14:	d048      	beq.n	2eca8 <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   2ec16:	2316      	movs	r3, #22
   2ec18:	18fb      	adds	r3, r7, r3
   2ec1a:	781a      	ldrb	r2, [r3, #0]
   2ec1c:	69fb      	ldr	r3, [r7, #28]
   2ec1e:	18d2      	adds	r2, r2, r3
   2ec20:	68fb      	ldr	r3, [r7, #12]
   2ec22:	681b      	ldr	r3, [r3, #0]
   2ec24:	789b      	ldrb	r3, [r3, #2]
   2ec26:	429a      	cmp	r2, r3
   2ec28:	d908      	bls.n	2ec3c <f_write+0x1c8>
					cc = fp->fs->csize - csect;
   2ec2a:	68fb      	ldr	r3, [r7, #12]
   2ec2c:	681b      	ldr	r3, [r3, #0]
   2ec2e:	789b      	ldrb	r3, [r3, #2]
   2ec30:	001a      	movs	r2, r3
   2ec32:	2316      	movs	r3, #22
   2ec34:	18fb      	adds	r3, r7, r3
   2ec36:	781b      	ldrb	r3, [r3, #0]
   2ec38:	1ad3      	subs	r3, r2, r3
   2ec3a:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   2ec3c:	68fb      	ldr	r3, [r7, #12]
   2ec3e:	681b      	ldr	r3, [r3, #0]
   2ec40:	7858      	ldrb	r0, [r3, #1]
   2ec42:	69fb      	ldr	r3, [r7, #28]
   2ec44:	b2db      	uxtb	r3, r3
   2ec46:	693a      	ldr	r2, [r7, #16]
   2ec48:	69b9      	ldr	r1, [r7, #24]
   2ec4a:	4c5c      	ldr	r4, [pc, #368]	; (2edbc <f_write+0x348>)
   2ec4c:	47a0      	blx	r4
   2ec4e:	1e03      	subs	r3, r0, #0
   2ec50:	d009      	beq.n	2ec66 <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
   2ec52:	68fb      	ldr	r3, [r7, #12]
   2ec54:	799b      	ldrb	r3, [r3, #6]
   2ec56:	2280      	movs	r2, #128	; 0x80
   2ec58:	4252      	negs	r2, r2
   2ec5a:	4313      	orrs	r3, r2
   2ec5c:	b2da      	uxtb	r2, r3
   2ec5e:	68fb      	ldr	r3, [r7, #12]
   2ec60:	719a      	strb	r2, [r3, #6]
   2ec62:	2301      	movs	r3, #1
   2ec64:	e09e      	b.n	2eda4 <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   2ec66:	68fb      	ldr	r3, [r7, #12]
   2ec68:	681b      	ldr	r3, [r3, #0]
   2ec6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2ec6c:	693b      	ldr	r3, [r7, #16]
   2ec6e:	1ad2      	subs	r2, r2, r3
   2ec70:	69fb      	ldr	r3, [r7, #28]
   2ec72:	429a      	cmp	r2, r3
   2ec74:	d214      	bcs.n	2eca0 <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   2ec76:	68fb      	ldr	r3, [r7, #12]
   2ec78:	681b      	ldr	r3, [r3, #0]
   2ec7a:	3330      	adds	r3, #48	; 0x30
   2ec7c:	0018      	movs	r0, r3
   2ec7e:	68fb      	ldr	r3, [r7, #12]
   2ec80:	681b      	ldr	r3, [r3, #0]
   2ec82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2ec84:	693b      	ldr	r3, [r7, #16]
   2ec86:	1ad3      	subs	r3, r2, r3
   2ec88:	025b      	lsls	r3, r3, #9
   2ec8a:	69ba      	ldr	r2, [r7, #24]
   2ec8c:	18d1      	adds	r1, r2, r3
   2ec8e:	2380      	movs	r3, #128	; 0x80
   2ec90:	009b      	lsls	r3, r3, #2
   2ec92:	001a      	movs	r2, r3
   2ec94:	4b4a      	ldr	r3, [pc, #296]	; (2edc0 <f_write+0x34c>)
   2ec96:	4798      	blx	r3
					fp->fs->wflag = 0;
   2ec98:	68fb      	ldr	r3, [r7, #12]
   2ec9a:	681b      	ldr	r3, [r3, #0]
   2ec9c:	2200      	movs	r2, #0
   2ec9e:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   2eca0:	69fb      	ldr	r3, [r7, #28]
   2eca2:	025b      	lsls	r3, r3, #9
   2eca4:	623b      	str	r3, [r7, #32]
				continue;
   2eca6:	e051      	b.n	2ed4c <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   2eca8:	68fb      	ldr	r3, [r7, #12]
   2ecaa:	689a      	ldr	r2, [r3, #8]
   2ecac:	68fb      	ldr	r3, [r7, #12]
   2ecae:	68db      	ldr	r3, [r3, #12]
   2ecb0:	429a      	cmp	r2, r3
   2ecb2:	d315      	bcc.n	2ece0 <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   2ecb4:	68fb      	ldr	r3, [r7, #12]
   2ecb6:	681b      	ldr	r3, [r3, #0]
   2ecb8:	2100      	movs	r1, #0
   2ecba:	0018      	movs	r0, r3
   2ecbc:	4b3d      	ldr	r3, [pc, #244]	; (2edb4 <f_write+0x340>)
   2ecbe:	4798      	blx	r3
   2ecc0:	1e03      	subs	r3, r0, #0
   2ecc2:	d009      	beq.n	2ecd8 <f_write+0x264>
   2ecc4:	68fb      	ldr	r3, [r7, #12]
   2ecc6:	799b      	ldrb	r3, [r3, #6]
   2ecc8:	2280      	movs	r2, #128	; 0x80
   2ecca:	4252      	negs	r2, r2
   2eccc:	4313      	orrs	r3, r2
   2ecce:	b2da      	uxtb	r2, r3
   2ecd0:	68fb      	ldr	r3, [r7, #12]
   2ecd2:	719a      	strb	r2, [r3, #6]
   2ecd4:	2301      	movs	r3, #1
   2ecd6:	e065      	b.n	2eda4 <f_write+0x330>
				fp->fs->winsect = sect;
   2ecd8:	68fb      	ldr	r3, [r7, #12]
   2ecda:	681b      	ldr	r3, [r3, #0]
   2ecdc:	693a      	ldr	r2, [r7, #16]
   2ecde:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   2ece0:	68fb      	ldr	r3, [r7, #12]
   2ece2:	693a      	ldr	r2, [r7, #16]
   2ece4:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   2ece6:	68fb      	ldr	r3, [r7, #12]
   2ece8:	689b      	ldr	r3, [r3, #8]
   2ecea:	05db      	lsls	r3, r3, #23
   2ecec:	0ddb      	lsrs	r3, r3, #23
   2ecee:	2280      	movs	r2, #128	; 0x80
   2ecf0:	0092      	lsls	r2, r2, #2
   2ecf2:	1ad3      	subs	r3, r2, r3
   2ecf4:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
   2ecf6:	6a3a      	ldr	r2, [r7, #32]
   2ecf8:	687b      	ldr	r3, [r7, #4]
   2ecfa:	429a      	cmp	r2, r3
   2ecfc:	d901      	bls.n	2ed02 <f_write+0x28e>
   2ecfe:	687b      	ldr	r3, [r7, #4]
   2ed00:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   2ed02:	68fb      	ldr	r3, [r7, #12]
   2ed04:	681a      	ldr	r2, [r3, #0]
   2ed06:	68fb      	ldr	r3, [r7, #12]
   2ed08:	699b      	ldr	r3, [r3, #24]
   2ed0a:	0019      	movs	r1, r3
   2ed0c:	0010      	movs	r0, r2
   2ed0e:	4b29      	ldr	r3, [pc, #164]	; (2edb4 <f_write+0x340>)
   2ed10:	4798      	blx	r3
   2ed12:	1e03      	subs	r3, r0, #0
   2ed14:	d009      	beq.n	2ed2a <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
   2ed16:	68fb      	ldr	r3, [r7, #12]
   2ed18:	799b      	ldrb	r3, [r3, #6]
   2ed1a:	2280      	movs	r2, #128	; 0x80
   2ed1c:	4252      	negs	r2, r2
   2ed1e:	4313      	orrs	r3, r2
   2ed20:	b2da      	uxtb	r2, r3
   2ed22:	68fb      	ldr	r3, [r7, #12]
   2ed24:	719a      	strb	r2, [r3, #6]
   2ed26:	2301      	movs	r3, #1
   2ed28:	e03c      	b.n	2eda4 <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   2ed2a:	68fb      	ldr	r3, [r7, #12]
   2ed2c:	681a      	ldr	r2, [r3, #0]
   2ed2e:	68fb      	ldr	r3, [r7, #12]
   2ed30:	689b      	ldr	r3, [r3, #8]
   2ed32:	05db      	lsls	r3, r3, #23
   2ed34:	0ddb      	lsrs	r3, r3, #23
   2ed36:	3330      	adds	r3, #48	; 0x30
   2ed38:	18d3      	adds	r3, r2, r3
   2ed3a:	6a3a      	ldr	r2, [r7, #32]
   2ed3c:	69b9      	ldr	r1, [r7, #24]
   2ed3e:	0018      	movs	r0, r3
   2ed40:	4b1f      	ldr	r3, [pc, #124]	; (2edc0 <f_write+0x34c>)
   2ed42:	4798      	blx	r3
		fp->fs->wflag = 1;
   2ed44:	68fb      	ldr	r3, [r7, #12]
   2ed46:	681b      	ldr	r3, [r3, #0]
   2ed48:	2201      	movs	r2, #1
   2ed4a:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   2ed4c:	69ba      	ldr	r2, [r7, #24]
   2ed4e:	6a3b      	ldr	r3, [r7, #32]
   2ed50:	18d3      	adds	r3, r2, r3
   2ed52:	61bb      	str	r3, [r7, #24]
   2ed54:	68fb      	ldr	r3, [r7, #12]
   2ed56:	689a      	ldr	r2, [r3, #8]
   2ed58:	6a3b      	ldr	r3, [r7, #32]
   2ed5a:	18d2      	adds	r2, r2, r3
   2ed5c:	68fb      	ldr	r3, [r7, #12]
   2ed5e:	609a      	str	r2, [r3, #8]
   2ed60:	683b      	ldr	r3, [r7, #0]
   2ed62:	681a      	ldr	r2, [r3, #0]
   2ed64:	6a3b      	ldr	r3, [r7, #32]
   2ed66:	18d2      	adds	r2, r2, r3
   2ed68:	683b      	ldr	r3, [r7, #0]
   2ed6a:	601a      	str	r2, [r3, #0]
   2ed6c:	687a      	ldr	r2, [r7, #4]
   2ed6e:	6a3b      	ldr	r3, [r7, #32]
   2ed70:	1ad3      	subs	r3, r2, r3
   2ed72:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
   2ed74:	687b      	ldr	r3, [r7, #4]
   2ed76:	2b00      	cmp	r3, #0
   2ed78:	d000      	beq.n	2ed7c <f_write+0x308>
   2ed7a:	e6b7      	b.n	2eaec <f_write+0x78>
   2ed7c:	e000      	b.n	2ed80 <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2ed7e:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   2ed80:	68fb      	ldr	r3, [r7, #12]
   2ed82:	689a      	ldr	r2, [r3, #8]
   2ed84:	68fb      	ldr	r3, [r7, #12]
   2ed86:	68db      	ldr	r3, [r3, #12]
   2ed88:	429a      	cmp	r2, r3
   2ed8a:	d903      	bls.n	2ed94 <f_write+0x320>
   2ed8c:	68fb      	ldr	r3, [r7, #12]
   2ed8e:	689a      	ldr	r2, [r3, #8]
   2ed90:	68fb      	ldr	r3, [r7, #12]
   2ed92:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   2ed94:	68fb      	ldr	r3, [r7, #12]
   2ed96:	799b      	ldrb	r3, [r3, #6]
   2ed98:	2220      	movs	r2, #32
   2ed9a:	4313      	orrs	r3, r2
   2ed9c:	b2da      	uxtb	r2, r3
   2ed9e:	68fb      	ldr	r3, [r7, #12]
   2eda0:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
   2eda2:	2300      	movs	r3, #0
}
   2eda4:	0018      	movs	r0, r3
   2eda6:	46bd      	mov	sp, r7
   2eda8:	b00b      	add	sp, #44	; 0x2c
   2edaa:	bd90      	pop	{r4, r7, pc}
   2edac:	0002e499 	.word	0x0002e499
   2edb0:	0002cb25 	.word	0x0002cb25
   2edb4:	0002c41d 	.word	0x0002c41d
   2edb8:	0002c67d 	.word	0x0002c67d
   2edbc:	0002c109 	.word	0x0002c109
   2edc0:	0002c339 	.word	0x0002c339

0002edc4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   2edc4:	b590      	push	{r4, r7, lr}
   2edc6:	b087      	sub	sp, #28
   2edc8:	af00      	add	r7, sp, #0
   2edca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   2edcc:	687b      	ldr	r3, [r7, #4]
   2edce:	681a      	ldr	r2, [r3, #0]
   2edd0:	687b      	ldr	r3, [r7, #4]
   2edd2:	889b      	ldrh	r3, [r3, #4]
   2edd4:	2117      	movs	r1, #23
   2edd6:	187c      	adds	r4, r7, r1
   2edd8:	0019      	movs	r1, r3
   2edda:	0010      	movs	r0, r2
   2eddc:	4b55      	ldr	r3, [pc, #340]	; (2ef34 <f_sync+0x170>)
   2edde:	4798      	blx	r3
   2ede0:	0003      	movs	r3, r0
   2ede2:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2ede4:	2317      	movs	r3, #23
   2ede6:	18fb      	adds	r3, r7, r3
   2ede8:	781b      	ldrb	r3, [r3, #0]
   2edea:	2b00      	cmp	r3, #0
   2edec:	d000      	beq.n	2edf0 <f_sync+0x2c>
   2edee:	e09a      	b.n	2ef26 <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   2edf0:	687b      	ldr	r3, [r7, #4]
   2edf2:	799b      	ldrb	r3, [r3, #6]
   2edf4:	001a      	movs	r2, r3
   2edf6:	2320      	movs	r3, #32
   2edf8:	4013      	ands	r3, r2
   2edfa:	d100      	bne.n	2edfe <f_sync+0x3a>
   2edfc:	e093      	b.n	2ef26 <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
   2edfe:	687b      	ldr	r3, [r7, #4]
   2ee00:	681a      	ldr	r2, [r3, #0]
   2ee02:	687b      	ldr	r3, [r7, #4]
   2ee04:	69db      	ldr	r3, [r3, #28]
   2ee06:	2117      	movs	r1, #23
   2ee08:	187c      	adds	r4, r7, r1
   2ee0a:	0019      	movs	r1, r3
   2ee0c:	0010      	movs	r0, r2
   2ee0e:	4b4a      	ldr	r3, [pc, #296]	; (2ef38 <f_sync+0x174>)
   2ee10:	4798      	blx	r3
   2ee12:	0003      	movs	r3, r0
   2ee14:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
   2ee16:	2317      	movs	r3, #23
   2ee18:	18fb      	adds	r3, r7, r3
   2ee1a:	781b      	ldrb	r3, [r3, #0]
   2ee1c:	2b00      	cmp	r3, #0
   2ee1e:	d000      	beq.n	2ee22 <f_sync+0x5e>
   2ee20:	e081      	b.n	2ef26 <f_sync+0x162>
				dir = fp->dir_ptr;
   2ee22:	687b      	ldr	r3, [r7, #4]
   2ee24:	6a1b      	ldr	r3, [r3, #32]
   2ee26:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   2ee28:	693b      	ldr	r3, [r7, #16]
   2ee2a:	330b      	adds	r3, #11
   2ee2c:	693a      	ldr	r2, [r7, #16]
   2ee2e:	320b      	adds	r2, #11
   2ee30:	7812      	ldrb	r2, [r2, #0]
   2ee32:	2120      	movs	r1, #32
   2ee34:	430a      	orrs	r2, r1
   2ee36:	b2d2      	uxtb	r2, r2
   2ee38:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   2ee3a:	693b      	ldr	r3, [r7, #16]
   2ee3c:	331c      	adds	r3, #28
   2ee3e:	001a      	movs	r2, r3
   2ee40:	687b      	ldr	r3, [r7, #4]
   2ee42:	68db      	ldr	r3, [r3, #12]
   2ee44:	b2db      	uxtb	r3, r3
   2ee46:	7013      	strb	r3, [r2, #0]
   2ee48:	693b      	ldr	r3, [r7, #16]
   2ee4a:	331d      	adds	r3, #29
   2ee4c:	001a      	movs	r2, r3
   2ee4e:	687b      	ldr	r3, [r7, #4]
   2ee50:	68db      	ldr	r3, [r3, #12]
   2ee52:	b29b      	uxth	r3, r3
   2ee54:	0a1b      	lsrs	r3, r3, #8
   2ee56:	b29b      	uxth	r3, r3
   2ee58:	b2db      	uxtb	r3, r3
   2ee5a:	7013      	strb	r3, [r2, #0]
   2ee5c:	693b      	ldr	r3, [r7, #16]
   2ee5e:	331e      	adds	r3, #30
   2ee60:	001a      	movs	r2, r3
   2ee62:	687b      	ldr	r3, [r7, #4]
   2ee64:	68db      	ldr	r3, [r3, #12]
   2ee66:	0c1b      	lsrs	r3, r3, #16
   2ee68:	b2db      	uxtb	r3, r3
   2ee6a:	7013      	strb	r3, [r2, #0]
   2ee6c:	693b      	ldr	r3, [r7, #16]
   2ee6e:	331f      	adds	r3, #31
   2ee70:	001a      	movs	r2, r3
   2ee72:	687b      	ldr	r3, [r7, #4]
   2ee74:	68db      	ldr	r3, [r3, #12]
   2ee76:	0e1b      	lsrs	r3, r3, #24
   2ee78:	b2db      	uxtb	r3, r3
   2ee7a:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   2ee7c:	693b      	ldr	r3, [r7, #16]
   2ee7e:	331a      	adds	r3, #26
   2ee80:	001a      	movs	r2, r3
   2ee82:	687b      	ldr	r3, [r7, #4]
   2ee84:	691b      	ldr	r3, [r3, #16]
   2ee86:	b2db      	uxtb	r3, r3
   2ee88:	7013      	strb	r3, [r2, #0]
   2ee8a:	693b      	ldr	r3, [r7, #16]
   2ee8c:	331b      	adds	r3, #27
   2ee8e:	001a      	movs	r2, r3
   2ee90:	687b      	ldr	r3, [r7, #4]
   2ee92:	691b      	ldr	r3, [r3, #16]
   2ee94:	b29b      	uxth	r3, r3
   2ee96:	0a1b      	lsrs	r3, r3, #8
   2ee98:	b29b      	uxth	r3, r3
   2ee9a:	b2db      	uxtb	r3, r3
   2ee9c:	7013      	strb	r3, [r2, #0]
   2ee9e:	693b      	ldr	r3, [r7, #16]
   2eea0:	3314      	adds	r3, #20
   2eea2:	001a      	movs	r2, r3
   2eea4:	687b      	ldr	r3, [r7, #4]
   2eea6:	691b      	ldr	r3, [r3, #16]
   2eea8:	0c1b      	lsrs	r3, r3, #16
   2eeaa:	b2db      	uxtb	r3, r3
   2eeac:	7013      	strb	r3, [r2, #0]
   2eeae:	693b      	ldr	r3, [r7, #16]
   2eeb0:	3315      	adds	r3, #21
   2eeb2:	001a      	movs	r2, r3
   2eeb4:	687b      	ldr	r3, [r7, #4]
   2eeb6:	691b      	ldr	r3, [r3, #16]
   2eeb8:	0c1b      	lsrs	r3, r3, #16
   2eeba:	b29b      	uxth	r3, r3
   2eebc:	0a1b      	lsrs	r3, r3, #8
   2eebe:	b29b      	uxth	r3, r3
   2eec0:	b2db      	uxtb	r3, r3
   2eec2:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
   2eec4:	4b1d      	ldr	r3, [pc, #116]	; (2ef3c <f_sync+0x178>)
   2eec6:	4798      	blx	r3
   2eec8:	0003      	movs	r3, r0
   2eeca:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
   2eecc:	693b      	ldr	r3, [r7, #16]
   2eece:	3316      	adds	r3, #22
   2eed0:	68fa      	ldr	r2, [r7, #12]
   2eed2:	b2d2      	uxtb	r2, r2
   2eed4:	701a      	strb	r2, [r3, #0]
   2eed6:	693b      	ldr	r3, [r7, #16]
   2eed8:	3317      	adds	r3, #23
   2eeda:	68fa      	ldr	r2, [r7, #12]
   2eedc:	b292      	uxth	r2, r2
   2eede:	0a12      	lsrs	r2, r2, #8
   2eee0:	b292      	uxth	r2, r2
   2eee2:	b2d2      	uxtb	r2, r2
   2eee4:	701a      	strb	r2, [r3, #0]
   2eee6:	693b      	ldr	r3, [r7, #16]
   2eee8:	3318      	adds	r3, #24
   2eeea:	68fa      	ldr	r2, [r7, #12]
   2eeec:	0c12      	lsrs	r2, r2, #16
   2eeee:	b2d2      	uxtb	r2, r2
   2eef0:	701a      	strb	r2, [r3, #0]
   2eef2:	693b      	ldr	r3, [r7, #16]
   2eef4:	3319      	adds	r3, #25
   2eef6:	68fa      	ldr	r2, [r7, #12]
   2eef8:	0e12      	lsrs	r2, r2, #24
   2eefa:	b2d2      	uxtb	r2, r2
   2eefc:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
   2eefe:	687b      	ldr	r3, [r7, #4]
   2ef00:	799b      	ldrb	r3, [r3, #6]
   2ef02:	2220      	movs	r2, #32
   2ef04:	4393      	bics	r3, r2
   2ef06:	b2da      	uxtb	r2, r3
   2ef08:	687b      	ldr	r3, [r7, #4]
   2ef0a:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
   2ef0c:	687b      	ldr	r3, [r7, #4]
   2ef0e:	681b      	ldr	r3, [r3, #0]
   2ef10:	2201      	movs	r2, #1
   2ef12:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
   2ef14:	687b      	ldr	r3, [r7, #4]
   2ef16:	681b      	ldr	r3, [r3, #0]
   2ef18:	2217      	movs	r2, #23
   2ef1a:	18bc      	adds	r4, r7, r2
   2ef1c:	0018      	movs	r0, r3
   2ef1e:	4b08      	ldr	r3, [pc, #32]	; (2ef40 <f_sync+0x17c>)
   2ef20:	4798      	blx	r3
   2ef22:	0003      	movs	r3, r0
   2ef24:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
   2ef26:	2317      	movs	r3, #23
   2ef28:	18fb      	adds	r3, r7, r3
   2ef2a:	781b      	ldrb	r3, [r3, #0]
}
   2ef2c:	0018      	movs	r0, r3
   2ef2e:	46bd      	mov	sp, r7
   2ef30:	b007      	add	sp, #28
   2ef32:	bd90      	pop	{r4, r7, pc}
   2ef34:	0002e499 	.word	0x0002e499
   2ef38:	0002c41d 	.word	0x0002c41d
   2ef3c:	0002c2d9 	.word	0x0002c2d9
   2ef40:	0002c4e5 	.word	0x0002c4e5

0002ef44 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   2ef44:	b590      	push	{r4, r7, lr}
   2ef46:	b085      	sub	sp, #20
   2ef48:	af00      	add	r7, sp, #0
   2ef4a:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   2ef4c:	230f      	movs	r3, #15
   2ef4e:	18fc      	adds	r4, r7, r3
   2ef50:	687b      	ldr	r3, [r7, #4]
   2ef52:	0018      	movs	r0, r3
   2ef54:	4b09      	ldr	r3, [pc, #36]	; (2ef7c <f_close+0x38>)
   2ef56:	4798      	blx	r3
   2ef58:	0003      	movs	r3, r0
   2ef5a:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   2ef5c:	230f      	movs	r3, #15
   2ef5e:	18fb      	adds	r3, r7, r3
   2ef60:	781b      	ldrb	r3, [r3, #0]
   2ef62:	2b00      	cmp	r3, #0
   2ef64:	d102      	bne.n	2ef6c <f_close+0x28>
   2ef66:	687b      	ldr	r3, [r7, #4]
   2ef68:	2200      	movs	r2, #0
   2ef6a:	601a      	str	r2, [r3, #0]
	return res;
   2ef6c:	230f      	movs	r3, #15
   2ef6e:	18fb      	adds	r3, r7, r3
   2ef70:	781b      	ldrb	r3, [r3, #0]
#endif
}
   2ef72:	0018      	movs	r0, r3
   2ef74:	46bd      	mov	sp, r7
   2ef76:	b005      	add	sp, #20
   2ef78:	bd90      	pop	{r4, r7, pc}
   2ef7a:	46c0      	nop			; (mov r8, r8)
   2ef7c:	0002edc5 	.word	0x0002edc5

0002ef80 <ff_convert>:
   2ef80:	b580      	push	{r7, lr}
   2ef82:	b084      	sub	sp, #16
   2ef84:	af00      	add	r7, sp, #0
   2ef86:	0002      	movs	r2, r0
   2ef88:	6039      	str	r1, [r7, #0]
   2ef8a:	1dbb      	adds	r3, r7, #6
   2ef8c:	801a      	strh	r2, [r3, #0]
   2ef8e:	1dbb      	adds	r3, r7, #6
   2ef90:	881b      	ldrh	r3, [r3, #0]
   2ef92:	2b7f      	cmp	r3, #127	; 0x7f
   2ef94:	d805      	bhi.n	2efa2 <ff_convert+0x22>
   2ef96:	230e      	movs	r3, #14
   2ef98:	18fb      	adds	r3, r7, r3
   2ef9a:	1dba      	adds	r2, r7, #6
   2ef9c:	8812      	ldrh	r2, [r2, #0]
   2ef9e:	801a      	strh	r2, [r3, #0]
   2efa0:	e03a      	b.n	2f018 <ff_convert+0x98>
   2efa2:	683b      	ldr	r3, [r7, #0]
   2efa4:	2b00      	cmp	r3, #0
   2efa6:	d010      	beq.n	2efca <ff_convert+0x4a>
   2efa8:	1dbb      	adds	r3, r7, #6
   2efaa:	881b      	ldrh	r3, [r3, #0]
   2efac:	2bff      	cmp	r3, #255	; 0xff
   2efae:	d807      	bhi.n	2efc0 <ff_convert+0x40>
   2efb0:	1dbb      	adds	r3, r7, #6
   2efb2:	881b      	ldrh	r3, [r3, #0]
   2efb4:	3b80      	subs	r3, #128	; 0x80
   2efb6:	001a      	movs	r2, r3
   2efb8:	4b1b      	ldr	r3, [pc, #108]	; (2f028 <ff_convert+0xa8>)
   2efba:	0052      	lsls	r2, r2, #1
   2efbc:	5ad2      	ldrh	r2, [r2, r3]
   2efbe:	e000      	b.n	2efc2 <ff_convert+0x42>
   2efc0:	2200      	movs	r2, #0
   2efc2:	230e      	movs	r3, #14
   2efc4:	18fb      	adds	r3, r7, r3
   2efc6:	801a      	strh	r2, [r3, #0]
   2efc8:	e026      	b.n	2f018 <ff_convert+0x98>
   2efca:	230e      	movs	r3, #14
   2efcc:	18fb      	adds	r3, r7, r3
   2efce:	2200      	movs	r2, #0
   2efd0:	801a      	strh	r2, [r3, #0]
   2efd2:	e010      	b.n	2eff6 <ff_convert+0x76>
   2efd4:	230e      	movs	r3, #14
   2efd6:	18fb      	adds	r3, r7, r3
   2efd8:	881a      	ldrh	r2, [r3, #0]
   2efda:	4b13      	ldr	r3, [pc, #76]	; (2f028 <ff_convert+0xa8>)
   2efdc:	0052      	lsls	r2, r2, #1
   2efde:	5ad3      	ldrh	r3, [r2, r3]
   2efe0:	1dba      	adds	r2, r7, #6
   2efe2:	8812      	ldrh	r2, [r2, #0]
   2efe4:	429a      	cmp	r2, r3
   2efe6:	d00c      	beq.n	2f002 <ff_convert+0x82>
   2efe8:	230e      	movs	r3, #14
   2efea:	18fb      	adds	r3, r7, r3
   2efec:	881a      	ldrh	r2, [r3, #0]
   2efee:	230e      	movs	r3, #14
   2eff0:	18fb      	adds	r3, r7, r3
   2eff2:	3201      	adds	r2, #1
   2eff4:	801a      	strh	r2, [r3, #0]
   2eff6:	230e      	movs	r3, #14
   2eff8:	18fb      	adds	r3, r7, r3
   2effa:	881b      	ldrh	r3, [r3, #0]
   2effc:	2b7f      	cmp	r3, #127	; 0x7f
   2effe:	d9e9      	bls.n	2efd4 <ff_convert+0x54>
   2f000:	e000      	b.n	2f004 <ff_convert+0x84>
   2f002:	46c0      	nop			; (mov r8, r8)
   2f004:	230e      	movs	r3, #14
   2f006:	18fb      	adds	r3, r7, r3
   2f008:	881b      	ldrh	r3, [r3, #0]
   2f00a:	3380      	adds	r3, #128	; 0x80
   2f00c:	b29a      	uxth	r2, r3
   2f00e:	230e      	movs	r3, #14
   2f010:	18fb      	adds	r3, r7, r3
   2f012:	21ff      	movs	r1, #255	; 0xff
   2f014:	400a      	ands	r2, r1
   2f016:	801a      	strh	r2, [r3, #0]
   2f018:	230e      	movs	r3, #14
   2f01a:	18fb      	adds	r3, r7, r3
   2f01c:	881b      	ldrh	r3, [r3, #0]
   2f01e:	0018      	movs	r0, r3
   2f020:	46bd      	mov	sp, r7
   2f022:	b004      	add	sp, #16
   2f024:	bd80      	pop	{r7, pc}
   2f026:	46c0      	nop			; (mov r8, r8)
   2f028:	0003a448 	.word	0x0003a448

0002f02c <ff_wtoupper>:
   2f02c:	b580      	push	{r7, lr}
   2f02e:	b084      	sub	sp, #16
   2f030:	af00      	add	r7, sp, #0
   2f032:	0002      	movs	r2, r0
   2f034:	1dbb      	adds	r3, r7, #6
   2f036:	801a      	strh	r2, [r3, #0]
   2f038:	2300      	movs	r3, #0
   2f03a:	60fb      	str	r3, [r7, #12]
   2f03c:	e002      	b.n	2f044 <ff_wtoupper+0x18>
   2f03e:	68fb      	ldr	r3, [r7, #12]
   2f040:	3301      	adds	r3, #1
   2f042:	60fb      	str	r3, [r7, #12]
   2f044:	4b0f      	ldr	r3, [pc, #60]	; (2f084 <ff_wtoupper+0x58>)
   2f046:	68fa      	ldr	r2, [r7, #12]
   2f048:	0052      	lsls	r2, r2, #1
   2f04a:	5ad3      	ldrh	r3, [r2, r3]
   2f04c:	2b00      	cmp	r3, #0
   2f04e:	d007      	beq.n	2f060 <ff_wtoupper+0x34>
   2f050:	4b0c      	ldr	r3, [pc, #48]	; (2f084 <ff_wtoupper+0x58>)
   2f052:	68fa      	ldr	r2, [r7, #12]
   2f054:	0052      	lsls	r2, r2, #1
   2f056:	5ad3      	ldrh	r3, [r2, r3]
   2f058:	1dba      	adds	r2, r7, #6
   2f05a:	8812      	ldrh	r2, [r2, #0]
   2f05c:	429a      	cmp	r2, r3
   2f05e:	d1ee      	bne.n	2f03e <ff_wtoupper+0x12>
   2f060:	4b08      	ldr	r3, [pc, #32]	; (2f084 <ff_wtoupper+0x58>)
   2f062:	68fa      	ldr	r2, [r7, #12]
   2f064:	0052      	lsls	r2, r2, #1
   2f066:	5ad3      	ldrh	r3, [r2, r3]
   2f068:	2b00      	cmp	r3, #0
   2f06a:	d004      	beq.n	2f076 <ff_wtoupper+0x4a>
   2f06c:	4b06      	ldr	r3, [pc, #24]	; (2f088 <ff_wtoupper+0x5c>)
   2f06e:	68fa      	ldr	r2, [r7, #12]
   2f070:	0052      	lsls	r2, r2, #1
   2f072:	5ad3      	ldrh	r3, [r2, r3]
   2f074:	e001      	b.n	2f07a <ff_wtoupper+0x4e>
   2f076:	1dbb      	adds	r3, r7, #6
   2f078:	881b      	ldrh	r3, [r3, #0]
   2f07a:	0018      	movs	r0, r3
   2f07c:	46bd      	mov	sp, r7
   2f07e:	b004      	add	sp, #16
   2f080:	bd80      	pop	{r7, pc}
   2f082:	46c0      	nop			; (mov r8, r8)
   2f084:	0003a548 	.word	0x0003a548
   2f088:	0003a728 	.word	0x0003a728

0002f08c <NewMessageData>:
int cycle(MQTTClient* c, Timer* timer);
void MQTTRun(void* parm);
int waitfor(MQTTClient* c, int packet_type, Timer* timer);


static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
   2f08c:	b580      	push	{r7, lr}
   2f08e:	b084      	sub	sp, #16
   2f090:	af00      	add	r7, sp, #0
   2f092:	60f8      	str	r0, [r7, #12]
   2f094:	60b9      	str	r1, [r7, #8]
   2f096:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
   2f098:	68fb      	ldr	r3, [r7, #12]
   2f09a:	68ba      	ldr	r2, [r7, #8]
   2f09c:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
   2f09e:	68fb      	ldr	r3, [r7, #12]
   2f0a0:	687a      	ldr	r2, [r7, #4]
   2f0a2:	601a      	str	r2, [r3, #0]
}
   2f0a4:	46c0      	nop			; (mov r8, r8)
   2f0a6:	46bd      	mov	sp, r7
   2f0a8:	b004      	add	sp, #16
   2f0aa:	bd80      	pop	{r7, pc}

0002f0ac <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
   2f0ac:	b580      	push	{r7, lr}
   2f0ae:	b082      	sub	sp, #8
   2f0b0:	af00      	add	r7, sp, #0
   2f0b2:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   2f0b4:	687b      	ldr	r3, [r7, #4]
   2f0b6:	681b      	ldr	r3, [r3, #0]
   2f0b8:	4a07      	ldr	r2, [pc, #28]	; (2f0d8 <getNextPacketId+0x2c>)
   2f0ba:	4293      	cmp	r3, r2
   2f0bc:	d003      	beq.n	2f0c6 <getNextPacketId+0x1a>
   2f0be:	687b      	ldr	r3, [r7, #4]
   2f0c0:	681b      	ldr	r3, [r3, #0]
   2f0c2:	1c5a      	adds	r2, r3, #1
   2f0c4:	e000      	b.n	2f0c8 <getNextPacketId+0x1c>
   2f0c6:	2201      	movs	r2, #1
   2f0c8:	687b      	ldr	r3, [r7, #4]
   2f0ca:	601a      	str	r2, [r3, #0]
   2f0cc:	687b      	ldr	r3, [r7, #4]
   2f0ce:	681b      	ldr	r3, [r3, #0]
}
   2f0d0:	0018      	movs	r0, r3
   2f0d2:	46bd      	mov	sp, r7
   2f0d4:	b002      	add	sp, #8
   2f0d6:	bd80      	pop	{r7, pc}
   2f0d8:	0000ffff 	.word	0x0000ffff

0002f0dc <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   2f0dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f0de:	b087      	sub	sp, #28
   2f0e0:	af00      	add	r7, sp, #0
   2f0e2:	60f8      	str	r0, [r7, #12]
   2f0e4:	60b9      	str	r1, [r7, #8]
   2f0e6:	607a      	str	r2, [r7, #4]
    int rc = FAILURE, 
   2f0e8:	2301      	movs	r3, #1
   2f0ea:	425b      	negs	r3, r3
   2f0ec:	617b      	str	r3, [r7, #20]
        sent = 0;
   2f0ee:	2300      	movs	r3, #0
   2f0f0:	613b      	str	r3, [r7, #16]
    
    while (sent < length && !TimerIsExpired(timer))
   2f0f2:	e01a      	b.n	2f12a <sendPacket+0x4e>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   2f0f4:	68fb      	ldr	r3, [r7, #12]
   2f0f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2f0f8:	68dc      	ldr	r4, [r3, #12]
   2f0fa:	68fb      	ldr	r3, [r7, #12]
   2f0fc:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2f0fe:	68fb      	ldr	r3, [r7, #12]
   2f100:	691a      	ldr	r2, [r3, #16]
   2f102:	693b      	ldr	r3, [r7, #16]
   2f104:	18d6      	adds	r6, r2, r3
   2f106:	687b      	ldr	r3, [r7, #4]
   2f108:	0018      	movs	r0, r3
   2f10a:	4b1a      	ldr	r3, [pc, #104]	; (2f174 <sendPacket+0x98>)
   2f10c:	4798      	blx	r3
   2f10e:	0003      	movs	r3, r0
   2f110:	68ba      	ldr	r2, [r7, #8]
   2f112:	0031      	movs	r1, r6
   2f114:	0028      	movs	r0, r5
   2f116:	47a0      	blx	r4
   2f118:	0003      	movs	r3, r0
   2f11a:	617b      	str	r3, [r7, #20]
        if (rc < 0)  // there was an error writing the data
   2f11c:	697b      	ldr	r3, [r7, #20]
   2f11e:	2b00      	cmp	r3, #0
   2f120:	db0e      	blt.n	2f140 <sendPacket+0x64>
            break;
        sent += rc;
   2f122:	693a      	ldr	r2, [r7, #16]
   2f124:	697b      	ldr	r3, [r7, #20]
   2f126:	18d3      	adds	r3, r2, r3
   2f128:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
   2f12a:	693a      	ldr	r2, [r7, #16]
   2f12c:	68bb      	ldr	r3, [r7, #8]
   2f12e:	429a      	cmp	r2, r3
   2f130:	da07      	bge.n	2f142 <sendPacket+0x66>
   2f132:	687b      	ldr	r3, [r7, #4]
   2f134:	0018      	movs	r0, r3
   2f136:	4b10      	ldr	r3, [pc, #64]	; (2f178 <sendPacket+0x9c>)
   2f138:	4798      	blx	r3
   2f13a:	1e03      	subs	r3, r0, #0
   2f13c:	d0da      	beq.n	2f0f4 <sendPacket+0x18>
   2f13e:	e000      	b.n	2f142 <sendPacket+0x66>
            break;
   2f140:	46c0      	nop			; (mov r8, r8)
    }
    if (sent == length)
   2f142:	693a      	ldr	r2, [r7, #16]
   2f144:	68bb      	ldr	r3, [r7, #8]
   2f146:	429a      	cmp	r2, r3
   2f148:	d10b      	bne.n	2f162 <sendPacket+0x86>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   2f14a:	68fb      	ldr	r3, [r7, #12]
   2f14c:	3354      	adds	r3, #84	; 0x54
   2f14e:	001a      	movs	r2, r3
   2f150:	68fb      	ldr	r3, [r7, #12]
   2f152:	699b      	ldr	r3, [r3, #24]
   2f154:	0019      	movs	r1, r3
   2f156:	0010      	movs	r0, r2
   2f158:	4b08      	ldr	r3, [pc, #32]	; (2f17c <sendPacket+0xa0>)
   2f15a:	4798      	blx	r3
        rc = SUCCESS;
   2f15c:	2300      	movs	r3, #0
   2f15e:	617b      	str	r3, [r7, #20]
   2f160:	e002      	b.n	2f168 <sendPacket+0x8c>
    }
    else
        rc = FAILURE;
   2f162:	2301      	movs	r3, #1
   2f164:	425b      	negs	r3, r3
   2f166:	617b      	str	r3, [r7, #20]
    return rc;
   2f168:	697b      	ldr	r3, [r7, #20]
}
   2f16a:	0018      	movs	r0, r3
   2f16c:	46bd      	mov	sp, r7
   2f16e:	b007      	add	sp, #28
   2f170:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f172:	46c0      	nop			; (mov r8, r8)
   2f174:	0002ff3d 	.word	0x0002ff3d
   2f178:	0002fec1 	.word	0x0002fec1
   2f17c:	0002ff15 	.word	0x0002ff15

0002f180 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   2f180:	b580      	push	{r7, lr}
   2f182:	b086      	sub	sp, #24
   2f184:	af00      	add	r7, sp, #0
   2f186:	60f8      	str	r0, [r7, #12]
   2f188:	60b9      	str	r1, [r7, #8]
   2f18a:	607a      	str	r2, [r7, #4]
   2f18c:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
   2f18e:	68fb      	ldr	r3, [r7, #12]
   2f190:	68ba      	ldr	r2, [r7, #8]
   2f192:	651a      	str	r2, [r3, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2f194:	2300      	movs	r3, #0
   2f196:	617b      	str	r3, [r7, #20]
   2f198:	e00a      	b.n	2f1b0 <MQTTClientInit+0x30>
        c->messageHandlers[i].topicFilter = 0;
   2f19a:	68fa      	ldr	r2, [r7, #12]
   2f19c:	697b      	ldr	r3, [r7, #20]
   2f19e:	3304      	adds	r3, #4
   2f1a0:	00db      	lsls	r3, r3, #3
   2f1a2:	18d3      	adds	r3, r2, r3
   2f1a4:	3304      	adds	r3, #4
   2f1a6:	2200      	movs	r2, #0
   2f1a8:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2f1aa:	697b      	ldr	r3, [r7, #20]
   2f1ac:	3301      	adds	r3, #1
   2f1ae:	617b      	str	r3, [r7, #20]
   2f1b0:	697b      	ldr	r3, [r7, #20]
   2f1b2:	2b04      	cmp	r3, #4
   2f1b4:	ddf1      	ble.n	2f19a <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
   2f1b6:	68fb      	ldr	r3, [r7, #12]
   2f1b8:	687a      	ldr	r2, [r7, #4]
   2f1ba:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
   2f1bc:	68fb      	ldr	r3, [r7, #12]
   2f1be:	683a      	ldr	r2, [r7, #0]
   2f1c0:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
   2f1c2:	68fb      	ldr	r3, [r7, #12]
   2f1c4:	6a3a      	ldr	r2, [r7, #32]
   2f1c6:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
   2f1c8:	68fb      	ldr	r3, [r7, #12]
   2f1ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2f1cc:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
   2f1ce:	68fb      	ldr	r3, [r7, #12]
   2f1d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f1d2:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
   2f1d4:	68fb      	ldr	r3, [r7, #12]
   2f1d6:	2200      	movs	r2, #0
   2f1d8:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
   2f1da:	68fb      	ldr	r3, [r7, #12]
   2f1dc:	2200      	movs	r2, #0
   2f1de:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
   2f1e0:	68fb      	ldr	r3, [r7, #12]
   2f1e2:	2200      	movs	r2, #0
   2f1e4:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
   2f1e6:	68fb      	ldr	r3, [r7, #12]
   2f1e8:	2201      	movs	r2, #1
   2f1ea:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
   2f1ec:	68fb      	ldr	r3, [r7, #12]
   2f1ee:	3354      	adds	r3, #84	; 0x54
   2f1f0:	0018      	movs	r0, r3
   2f1f2:	4b03      	ldr	r3, [pc, #12]	; (2f200 <MQTTClientInit+0x80>)
   2f1f4:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   2f1f6:	46c0      	nop			; (mov r8, r8)
   2f1f8:	46bd      	mov	sp, r7
   2f1fa:	b006      	add	sp, #24
   2f1fc:	bd80      	pop	{r7, pc}
   2f1fe:	46c0      	nop			; (mov r8, r8)
   2f200:	0002ff65 	.word	0x0002ff65

0002f204 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
   2f204:	b590      	push	{r4, r7, lr}
   2f206:	b08b      	sub	sp, #44	; 0x2c
   2f208:	af00      	add	r7, sp, #0
   2f20a:	60f8      	str	r0, [r7, #12]
   2f20c:	60b9      	str	r1, [r7, #8]
   2f20e:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
   2f210:	2301      	movs	r3, #1
   2f212:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
   2f214:	2300      	movs	r3, #0
   2f216:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
   2f218:	2304      	movs	r3, #4
   2f21a:	61fb      	str	r3, [r7, #28]

    *value = 0;
   2f21c:	68bb      	ldr	r3, [r7, #8]
   2f21e:	2200      	movs	r2, #0
   2f220:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
   2f222:	2301      	movs	r3, #1
   2f224:	425b      	negs	r3, r3
   2f226:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2f228:	6a3b      	ldr	r3, [r7, #32]
   2f22a:	3301      	adds	r3, #1
   2f22c:	623b      	str	r3, [r7, #32]
   2f22e:	6a3a      	ldr	r2, [r7, #32]
   2f230:	69fb      	ldr	r3, [r7, #28]
   2f232:	429a      	cmp	r2, r3
   2f234:	dd03      	ble.n	2f23e <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
   2f236:	2301      	movs	r3, #1
   2f238:	425b      	negs	r3, r3
   2f23a:	61bb      	str	r3, [r7, #24]
            goto exit;
   2f23c:	e026      	b.n	2f28c <decodePacket+0x88>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   2f23e:	68fb      	ldr	r3, [r7, #12]
   2f240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2f242:	689c      	ldr	r4, [r3, #8]
   2f244:	68fb      	ldr	r3, [r7, #12]
   2f246:	6d18      	ldr	r0, [r3, #80]	; 0x50
   2f248:	687b      	ldr	r3, [r7, #4]
   2f24a:	2217      	movs	r2, #23
   2f24c:	18b9      	adds	r1, r7, r2
   2f24e:	2201      	movs	r2, #1
   2f250:	47a0      	blx	r4
   2f252:	0003      	movs	r3, r0
   2f254:	61bb      	str	r3, [r7, #24]
        if (rc != 1)
   2f256:	69bb      	ldr	r3, [r7, #24]
   2f258:	2b01      	cmp	r3, #1
   2f25a:	d116      	bne.n	2f28a <decodePacket+0x86>
            goto exit;
        *value += (i & 127) * multiplier;
   2f25c:	68bb      	ldr	r3, [r7, #8]
   2f25e:	681a      	ldr	r2, [r3, #0]
   2f260:	2317      	movs	r3, #23
   2f262:	18fb      	adds	r3, r7, r3
   2f264:	781b      	ldrb	r3, [r3, #0]
   2f266:	0019      	movs	r1, r3
   2f268:	237f      	movs	r3, #127	; 0x7f
   2f26a:	400b      	ands	r3, r1
   2f26c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2f26e:	434b      	muls	r3, r1
   2f270:	18d2      	adds	r2, r2, r3
   2f272:	68bb      	ldr	r3, [r7, #8]
   2f274:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
   2f276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f278:	01db      	lsls	r3, r3, #7
   2f27a:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
   2f27c:	2317      	movs	r3, #23
   2f27e:	18fb      	adds	r3, r7, r3
   2f280:	781b      	ldrb	r3, [r3, #0]
   2f282:	b25b      	sxtb	r3, r3
   2f284:	2b00      	cmp	r3, #0
   2f286:	dbcc      	blt.n	2f222 <decodePacket+0x1e>
   2f288:	e000      	b.n	2f28c <decodePacket+0x88>
            goto exit;
   2f28a:	46c0      	nop			; (mov r8, r8)
exit:
    return len;
   2f28c:	6a3b      	ldr	r3, [r7, #32]
}
   2f28e:	0018      	movs	r0, r3
   2f290:	46bd      	mov	sp, r7
   2f292:	b00b      	add	sp, #44	; 0x2c
   2f294:	bd90      	pop	{r4, r7, pc}
	...

0002f298 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
   2f298:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f29a:	46c6      	mov	lr, r8
   2f29c:	b500      	push	{lr}
   2f29e:	b086      	sub	sp, #24
   2f2a0:	af00      	add	r7, sp, #0
   2f2a2:	6078      	str	r0, [r7, #4]
   2f2a4:	6039      	str	r1, [r7, #0]
    int rc = FAILURE;
   2f2a6:	2301      	movs	r3, #1
   2f2a8:	425b      	negs	r3, r3
   2f2aa:	617b      	str	r3, [r7, #20]
    MQTTHeader header = {0};
   2f2ac:	2300      	movs	r3, #0
   2f2ae:	60fb      	str	r3, [r7, #12]
    int len = 0;
   2f2b0:	2300      	movs	r3, #0
   2f2b2:	613b      	str	r3, [r7, #16]
    int rem_len = 0;
   2f2b4:	2300      	movs	r3, #0
   2f2b6:	60bb      	str	r3, [r7, #8]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   2f2b8:	687b      	ldr	r3, [r7, #4]
   2f2ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2f2bc:	689c      	ldr	r4, [r3, #8]
   2f2be:	687b      	ldr	r3, [r7, #4]
   2f2c0:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2f2c2:	687b      	ldr	r3, [r7, #4]
   2f2c4:	695e      	ldr	r6, [r3, #20]
   2f2c6:	683b      	ldr	r3, [r7, #0]
   2f2c8:	0018      	movs	r0, r3
   2f2ca:	4b2b      	ldr	r3, [pc, #172]	; (2f378 <readPacket+0xe0>)
   2f2cc:	4798      	blx	r3
   2f2ce:	0003      	movs	r3, r0
   2f2d0:	2201      	movs	r2, #1
   2f2d2:	0031      	movs	r1, r6
   2f2d4:	0028      	movs	r0, r5
   2f2d6:	47a0      	blx	r4
   2f2d8:	0003      	movs	r3, r0
   2f2da:	2b01      	cmp	r3, #1
   2f2dc:	d141      	bne.n	2f362 <readPacket+0xca>
        goto exit;

    len = 1;
   2f2de:	2301      	movs	r3, #1
   2f2e0:	613b      	str	r3, [r7, #16]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   2f2e2:	683b      	ldr	r3, [r7, #0]
   2f2e4:	0018      	movs	r0, r3
   2f2e6:	4b24      	ldr	r3, [pc, #144]	; (2f378 <readPacket+0xe0>)
   2f2e8:	4798      	blx	r3
   2f2ea:	0002      	movs	r2, r0
   2f2ec:	2308      	movs	r3, #8
   2f2ee:	18f9      	adds	r1, r7, r3
   2f2f0:	687b      	ldr	r3, [r7, #4]
   2f2f2:	0018      	movs	r0, r3
   2f2f4:	4b21      	ldr	r3, [pc, #132]	; (2f37c <readPacket+0xe4>)
   2f2f6:	4798      	blx	r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   2f2f8:	687b      	ldr	r3, [r7, #4]
   2f2fa:	695b      	ldr	r3, [r3, #20]
   2f2fc:	3301      	adds	r3, #1
   2f2fe:	68ba      	ldr	r2, [r7, #8]
   2f300:	0011      	movs	r1, r2
   2f302:	0018      	movs	r0, r3
   2f304:	4b1e      	ldr	r3, [pc, #120]	; (2f380 <readPacket+0xe8>)
   2f306:	4798      	blx	r3
   2f308:	0002      	movs	r2, r0
   2f30a:	693b      	ldr	r3, [r7, #16]
   2f30c:	189b      	adds	r3, r3, r2
   2f30e:	613b      	str	r3, [r7, #16]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   2f310:	68bb      	ldr	r3, [r7, #8]
   2f312:	2b00      	cmp	r3, #0
   2f314:	dd17      	ble.n	2f346 <readPacket+0xae>
   2f316:	687b      	ldr	r3, [r7, #4]
   2f318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2f31a:	689c      	ldr	r4, [r3, #8]
   2f31c:	687b      	ldr	r3, [r7, #4]
   2f31e:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2f320:	687b      	ldr	r3, [r7, #4]
   2f322:	695a      	ldr	r2, [r3, #20]
   2f324:	693b      	ldr	r3, [r7, #16]
   2f326:	18d6      	adds	r6, r2, r3
   2f328:	68bb      	ldr	r3, [r7, #8]
   2f32a:	4698      	mov	r8, r3
   2f32c:	683b      	ldr	r3, [r7, #0]
   2f32e:	0018      	movs	r0, r3
   2f330:	4b11      	ldr	r3, [pc, #68]	; (2f378 <readPacket+0xe0>)
   2f332:	4798      	blx	r3
   2f334:	0003      	movs	r3, r0
   2f336:	4642      	mov	r2, r8
   2f338:	0031      	movs	r1, r6
   2f33a:	0028      	movs	r0, r5
   2f33c:	47a0      	blx	r4
   2f33e:	0002      	movs	r2, r0
   2f340:	68bb      	ldr	r3, [r7, #8]
   2f342:	429a      	cmp	r2, r3
   2f344:	d10f      	bne.n	2f366 <readPacket+0xce>
        goto exit;

    header.byte = c->readbuf[0];
   2f346:	687b      	ldr	r3, [r7, #4]
   2f348:	695b      	ldr	r3, [r3, #20]
   2f34a:	781a      	ldrb	r2, [r3, #0]
   2f34c:	230c      	movs	r3, #12
   2f34e:	18fb      	adds	r3, r7, r3
   2f350:	701a      	strb	r2, [r3, #0]
    rc = header.bits.type;
   2f352:	230c      	movs	r3, #12
   2f354:	18fb      	adds	r3, r7, r3
   2f356:	781b      	ldrb	r3, [r3, #0]
   2f358:	061b      	lsls	r3, r3, #24
   2f35a:	0f1b      	lsrs	r3, r3, #28
   2f35c:	b2db      	uxtb	r3, r3
   2f35e:	617b      	str	r3, [r7, #20]
   2f360:	e002      	b.n	2f368 <readPacket+0xd0>
        goto exit;
   2f362:	46c0      	nop			; (mov r8, r8)
   2f364:	e000      	b.n	2f368 <readPacket+0xd0>
        goto exit;
   2f366:	46c0      	nop			; (mov r8, r8)
exit:
    return rc;
   2f368:	697b      	ldr	r3, [r7, #20]
}
   2f36a:	0018      	movs	r0, r3
   2f36c:	46bd      	mov	sp, r7
   2f36e:	b006      	add	sp, #24
   2f370:	bc04      	pop	{r2}
   2f372:	4690      	mov	r8, r2
   2f374:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f376:	46c0      	nop			; (mov r8, r8)
   2f378:	0002ff3d 	.word	0x0002ff3d
   2f37c:	0002f205 	.word	0x0002f205
   2f380:	00030d15 	.word	0x00030d15

0002f384 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
   2f384:	b580      	push	{r7, lr}
   2f386:	b086      	sub	sp, #24
   2f388:	af00      	add	r7, sp, #0
   2f38a:	6078      	str	r0, [r7, #4]
   2f38c:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
   2f38e:	687b      	ldr	r3, [r7, #4]
   2f390:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
   2f392:	683b      	ldr	r3, [r7, #0]
   2f394:	689b      	ldr	r3, [r3, #8]
   2f396:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
   2f398:	683b      	ldr	r3, [r7, #0]
   2f39a:	685b      	ldr	r3, [r3, #4]
   2f39c:	001a      	movs	r2, r3
   2f39e:	693b      	ldr	r3, [r7, #16]
   2f3a0:	189b      	adds	r3, r3, r2
   2f3a2:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
   2f3a4:	e039      	b.n	2f41a <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
   2f3a6:	693b      	ldr	r3, [r7, #16]
   2f3a8:	781b      	ldrb	r3, [r3, #0]
   2f3aa:	2b2f      	cmp	r3, #47	; 0x2f
   2f3ac:	d103      	bne.n	2f3b6 <isTopicMatched+0x32>
   2f3ae:	697b      	ldr	r3, [r7, #20]
   2f3b0:	781b      	ldrb	r3, [r3, #0]
   2f3b2:	2b2f      	cmp	r3, #47	; 0x2f
   2f3b4:	d13a      	bne.n	2f42c <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   2f3b6:	697b      	ldr	r3, [r7, #20]
   2f3b8:	781b      	ldrb	r3, [r3, #0]
   2f3ba:	2b2b      	cmp	r3, #43	; 0x2b
   2f3bc:	d009      	beq.n	2f3d2 <isTopicMatched+0x4e>
   2f3be:	697b      	ldr	r3, [r7, #20]
   2f3c0:	781b      	ldrb	r3, [r3, #0]
   2f3c2:	2b23      	cmp	r3, #35	; 0x23
   2f3c4:	d005      	beq.n	2f3d2 <isTopicMatched+0x4e>
   2f3c6:	697b      	ldr	r3, [r7, #20]
   2f3c8:	781a      	ldrb	r2, [r3, #0]
   2f3ca:	693b      	ldr	r3, [r7, #16]
   2f3cc:	781b      	ldrb	r3, [r3, #0]
   2f3ce:	429a      	cmp	r2, r3
   2f3d0:	d12e      	bne.n	2f430 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
   2f3d2:	697b      	ldr	r3, [r7, #20]
   2f3d4:	781b      	ldrb	r3, [r3, #0]
   2f3d6:	2b2b      	cmp	r3, #43	; 0x2b
   2f3d8:	d112      	bne.n	2f400 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
   2f3da:	693b      	ldr	r3, [r7, #16]
   2f3dc:	3301      	adds	r3, #1
   2f3de:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2f3e0:	e005      	b.n	2f3ee <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
   2f3e2:	693b      	ldr	r3, [r7, #16]
   2f3e4:	3301      	adds	r3, #1
   2f3e6:	613b      	str	r3, [r7, #16]
   2f3e8:	693b      	ldr	r3, [r7, #16]
   2f3ea:	3301      	adds	r3, #1
   2f3ec:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2f3ee:	68fa      	ldr	r2, [r7, #12]
   2f3f0:	68bb      	ldr	r3, [r7, #8]
   2f3f2:	429a      	cmp	r2, r3
   2f3f4:	d20b      	bcs.n	2f40e <isTopicMatched+0x8a>
   2f3f6:	68fb      	ldr	r3, [r7, #12]
   2f3f8:	781b      	ldrb	r3, [r3, #0]
   2f3fa:	2b2f      	cmp	r3, #47	; 0x2f
   2f3fc:	d1f1      	bne.n	2f3e2 <isTopicMatched+0x5e>
   2f3fe:	e006      	b.n	2f40e <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
   2f400:	697b      	ldr	r3, [r7, #20]
   2f402:	781b      	ldrb	r3, [r3, #0]
   2f404:	2b23      	cmp	r3, #35	; 0x23
   2f406:	d102      	bne.n	2f40e <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
   2f408:	68bb      	ldr	r3, [r7, #8]
   2f40a:	3b01      	subs	r3, #1
   2f40c:	613b      	str	r3, [r7, #16]
        curf++;
   2f40e:	697b      	ldr	r3, [r7, #20]
   2f410:	3301      	adds	r3, #1
   2f412:	617b      	str	r3, [r7, #20]
        curn++;
   2f414:	693b      	ldr	r3, [r7, #16]
   2f416:	3301      	adds	r3, #1
   2f418:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
   2f41a:	697b      	ldr	r3, [r7, #20]
   2f41c:	781b      	ldrb	r3, [r3, #0]
   2f41e:	2b00      	cmp	r3, #0
   2f420:	d007      	beq.n	2f432 <isTopicMatched+0xae>
   2f422:	693a      	ldr	r2, [r7, #16]
   2f424:	68bb      	ldr	r3, [r7, #8]
   2f426:	429a      	cmp	r2, r3
   2f428:	d3bd      	bcc.n	2f3a6 <isTopicMatched+0x22>
   2f42a:	e002      	b.n	2f432 <isTopicMatched+0xae>
            break;
   2f42c:	46c0      	nop			; (mov r8, r8)
   2f42e:	e000      	b.n	2f432 <isTopicMatched+0xae>
            break;
   2f430:	46c0      	nop			; (mov r8, r8)
    };
    
    return (curn == curn_end) && (*curf == '\0');
   2f432:	693a      	ldr	r2, [r7, #16]
   2f434:	68bb      	ldr	r3, [r7, #8]
   2f436:	429a      	cmp	r2, r3
   2f438:	d105      	bne.n	2f446 <isTopicMatched+0xc2>
   2f43a:	697b      	ldr	r3, [r7, #20]
   2f43c:	781b      	ldrb	r3, [r3, #0]
   2f43e:	2b00      	cmp	r3, #0
   2f440:	d101      	bne.n	2f446 <isTopicMatched+0xc2>
   2f442:	2301      	movs	r3, #1
   2f444:	e000      	b.n	2f448 <isTopicMatched+0xc4>
   2f446:	2300      	movs	r3, #0
   2f448:	b2db      	uxtb	r3, r3
}
   2f44a:	0018      	movs	r0, r3
   2f44c:	46bd      	mov	sp, r7
   2f44e:	b006      	add	sp, #24
   2f450:	bd80      	pop	{r7, pc}
	...

0002f454 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   2f454:	b580      	push	{r7, lr}
   2f456:	b08a      	sub	sp, #40	; 0x28
   2f458:	af00      	add	r7, sp, #0
   2f45a:	60f8      	str	r0, [r7, #12]
   2f45c:	60b9      	str	r1, [r7, #8]
   2f45e:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
   2f460:	2301      	movs	r3, #1
   2f462:	425b      	negs	r3, r3
   2f464:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2f466:	2300      	movs	r3, #0
   2f468:	627b      	str	r3, [r7, #36]	; 0x24
   2f46a:	e044      	b.n	2f4f6 <deliverMessage+0xa2>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2f46c:	68fa      	ldr	r2, [r7, #12]
   2f46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f470:	3304      	adds	r3, #4
   2f472:	00db      	lsls	r3, r3, #3
   2f474:	18d3      	adds	r3, r2, r3
   2f476:	3304      	adds	r3, #4
   2f478:	681b      	ldr	r3, [r3, #0]
   2f47a:	2b00      	cmp	r3, #0
   2f47c:	d038      	beq.n	2f4f0 <deliverMessage+0x9c>
   2f47e:	68fa      	ldr	r2, [r7, #12]
   2f480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f482:	3304      	adds	r3, #4
   2f484:	00db      	lsls	r3, r3, #3
   2f486:	18d3      	adds	r3, r2, r3
   2f488:	3304      	adds	r3, #4
   2f48a:	681a      	ldr	r2, [r3, #0]
   2f48c:	68bb      	ldr	r3, [r7, #8]
   2f48e:	0011      	movs	r1, r2
   2f490:	0018      	movs	r0, r3
   2f492:	4b28      	ldr	r3, [pc, #160]	; (2f534 <deliverMessage+0xe0>)
   2f494:	4798      	blx	r3
   2f496:	1e03      	subs	r3, r0, #0
   2f498:	d10d      	bne.n	2f4b6 <deliverMessage+0x62>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   2f49a:	68fa      	ldr	r2, [r7, #12]
   2f49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f49e:	3304      	adds	r3, #4
   2f4a0:	00db      	lsls	r3, r3, #3
   2f4a2:	18d3      	adds	r3, r2, r3
   2f4a4:	3304      	adds	r3, #4
   2f4a6:	681b      	ldr	r3, [r3, #0]
   2f4a8:	68ba      	ldr	r2, [r7, #8]
   2f4aa:	0011      	movs	r1, r2
   2f4ac:	0018      	movs	r0, r3
   2f4ae:	4b22      	ldr	r3, [pc, #136]	; (2f538 <deliverMessage+0xe4>)
   2f4b0:	4798      	blx	r3
   2f4b2:	1e03      	subs	r3, r0, #0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2f4b4:	d01c      	beq.n	2f4f0 <deliverMessage+0x9c>
        {
            if (c->messageHandlers[i].fp != NULL)
   2f4b6:	68fa      	ldr	r2, [r7, #12]
   2f4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f4ba:	3304      	adds	r3, #4
   2f4bc:	00db      	lsls	r3, r3, #3
   2f4be:	18d3      	adds	r3, r2, r3
   2f4c0:	3308      	adds	r3, #8
   2f4c2:	681b      	ldr	r3, [r3, #0]
   2f4c4:	2b00      	cmp	r3, #0
   2f4c6:	d013      	beq.n	2f4f0 <deliverMessage+0x9c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
   2f4c8:	687a      	ldr	r2, [r7, #4]
   2f4ca:	68b9      	ldr	r1, [r7, #8]
   2f4cc:	2318      	movs	r3, #24
   2f4ce:	18fb      	adds	r3, r7, r3
   2f4d0:	0018      	movs	r0, r3
   2f4d2:	4b1a      	ldr	r3, [pc, #104]	; (2f53c <deliverMessage+0xe8>)
   2f4d4:	4798      	blx	r3
                c->messageHandlers[i].fp(&md);
   2f4d6:	68fa      	ldr	r2, [r7, #12]
   2f4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f4da:	3304      	adds	r3, #4
   2f4dc:	00db      	lsls	r3, r3, #3
   2f4de:	18d3      	adds	r3, r2, r3
   2f4e0:	3308      	adds	r3, #8
   2f4e2:	681b      	ldr	r3, [r3, #0]
   2f4e4:	2218      	movs	r2, #24
   2f4e6:	18ba      	adds	r2, r7, r2
   2f4e8:	0010      	movs	r0, r2
   2f4ea:	4798      	blx	r3
                rc = SUCCESS;
   2f4ec:	2300      	movs	r3, #0
   2f4ee:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2f4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f4f2:	3301      	adds	r3, #1
   2f4f4:	627b      	str	r3, [r7, #36]	; 0x24
   2f4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f4f8:	2b04      	cmp	r3, #4
   2f4fa:	ddb7      	ble.n	2f46c <deliverMessage+0x18>
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   2f4fc:	6a3b      	ldr	r3, [r7, #32]
   2f4fe:	3301      	adds	r3, #1
   2f500:	d112      	bne.n	2f528 <deliverMessage+0xd4>
   2f502:	68fb      	ldr	r3, [r7, #12]
   2f504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f506:	2b00      	cmp	r3, #0
   2f508:	d00e      	beq.n	2f528 <deliverMessage+0xd4>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
   2f50a:	687a      	ldr	r2, [r7, #4]
   2f50c:	68b9      	ldr	r1, [r7, #8]
   2f50e:	2310      	movs	r3, #16
   2f510:	18fb      	adds	r3, r7, r3
   2f512:	0018      	movs	r0, r3
   2f514:	4b09      	ldr	r3, [pc, #36]	; (2f53c <deliverMessage+0xe8>)
   2f516:	4798      	blx	r3
        c->defaultMessageHandler(&md);
   2f518:	68fb      	ldr	r3, [r7, #12]
   2f51a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f51c:	2210      	movs	r2, #16
   2f51e:	18ba      	adds	r2, r7, r2
   2f520:	0010      	movs	r0, r2
   2f522:	4798      	blx	r3
        rc = SUCCESS;
   2f524:	2300      	movs	r3, #0
   2f526:	623b      	str	r3, [r7, #32]
    }   
    
    return rc;
   2f528:	6a3b      	ldr	r3, [r7, #32]
}
   2f52a:	0018      	movs	r0, r3
   2f52c:	46bd      	mov	sp, r7
   2f52e:	b00a      	add	sp, #40	; 0x28
   2f530:	bd80      	pop	{r7, pc}
   2f532:	46c0      	nop			; (mov r8, r8)
   2f534:	00031129 	.word	0x00031129
   2f538:	0002f385 	.word	0x0002f385
   2f53c:	0002f08d 	.word	0x0002f08d

0002f540 <keepalive>:


int keepalive(MQTTClient* c)
{
   2f540:	b580      	push	{r7, lr}
   2f542:	b088      	sub	sp, #32
   2f544:	af00      	add	r7, sp, #0
   2f546:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2f548:	2301      	movs	r3, #1
   2f54a:	425b      	negs	r3, r3
   2f54c:	61fb      	str	r3, [r7, #28]

    if (c->keepAliveInterval == 0)
   2f54e:	687b      	ldr	r3, [r7, #4]
   2f550:	699b      	ldr	r3, [r3, #24]
   2f552:	2b00      	cmp	r3, #0
   2f554:	d102      	bne.n	2f55c <keepalive+0x1c>
    {
        rc = SUCCESS;
   2f556:	2300      	movs	r3, #0
   2f558:	61fb      	str	r3, [r7, #28]
        goto exit;
   2f55a:	e033      	b.n	2f5c4 <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
   2f55c:	687b      	ldr	r3, [r7, #4]
   2f55e:	3354      	adds	r3, #84	; 0x54
   2f560:	0018      	movs	r0, r3
   2f562:	4b1b      	ldr	r3, [pc, #108]	; (2f5d0 <keepalive+0x90>)
   2f564:	4798      	blx	r3
   2f566:	1e03      	subs	r3, r0, #0
   2f568:	d02c      	beq.n	2f5c4 <keepalive+0x84>
    {
        if (!c->ping_outstanding)
   2f56a:	687b      	ldr	r3, [r7, #4]
   2f56c:	7f1b      	ldrb	r3, [r3, #28]
   2f56e:	2b00      	cmp	r3, #0
   2f570:	d128      	bne.n	2f5c4 <keepalive+0x84>
        {
            Timer timer;
            TimerInit(&timer);
   2f572:	230c      	movs	r3, #12
   2f574:	18fb      	adds	r3, r7, r3
   2f576:	0018      	movs	r0, r3
   2f578:	4b16      	ldr	r3, [pc, #88]	; (2f5d4 <keepalive+0x94>)
   2f57a:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   2f57c:	23fa      	movs	r3, #250	; 0xfa
   2f57e:	009a      	lsls	r2, r3, #2
   2f580:	230c      	movs	r3, #12
   2f582:	18fb      	adds	r3, r7, r3
   2f584:	0011      	movs	r1, r2
   2f586:	0018      	movs	r0, r3
   2f588:	4b13      	ldr	r3, [pc, #76]	; (2f5d8 <keepalive+0x98>)
   2f58a:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   2f58c:	687b      	ldr	r3, [r7, #4]
   2f58e:	691a      	ldr	r2, [r3, #16]
   2f590:	687b      	ldr	r3, [r7, #4]
   2f592:	689b      	ldr	r3, [r3, #8]
   2f594:	0019      	movs	r1, r3
   2f596:	0010      	movs	r0, r2
   2f598:	4b10      	ldr	r3, [pc, #64]	; (2f5dc <keepalive+0x9c>)
   2f59a:	4798      	blx	r3
   2f59c:	0003      	movs	r3, r0
   2f59e:	61bb      	str	r3, [r7, #24]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   2f5a0:	69bb      	ldr	r3, [r7, #24]
   2f5a2:	2b00      	cmp	r3, #0
   2f5a4:	dd0e      	ble.n	2f5c4 <keepalive+0x84>
   2f5a6:	230c      	movs	r3, #12
   2f5a8:	18fa      	adds	r2, r7, r3
   2f5aa:	69b9      	ldr	r1, [r7, #24]
   2f5ac:	687b      	ldr	r3, [r7, #4]
   2f5ae:	0018      	movs	r0, r3
   2f5b0:	4b0b      	ldr	r3, [pc, #44]	; (2f5e0 <keepalive+0xa0>)
   2f5b2:	4798      	blx	r3
   2f5b4:	0003      	movs	r3, r0
   2f5b6:	61fb      	str	r3, [r7, #28]
   2f5b8:	69fb      	ldr	r3, [r7, #28]
   2f5ba:	2b00      	cmp	r3, #0
   2f5bc:	d102      	bne.n	2f5c4 <keepalive+0x84>
                c->ping_outstanding = 1;
   2f5be:	687b      	ldr	r3, [r7, #4]
   2f5c0:	2201      	movs	r2, #1
   2f5c2:	771a      	strb	r2, [r3, #28]
        }
    }

exit:
    return rc;
   2f5c4:	69fb      	ldr	r3, [r7, #28]
}
   2f5c6:	0018      	movs	r0, r3
   2f5c8:	46bd      	mov	sp, r7
   2f5ca:	b008      	add	sp, #32
   2f5cc:	bd80      	pop	{r7, pc}
   2f5ce:	46c0      	nop			; (mov r8, r8)
   2f5d0:	0002fec1 	.word	0x0002fec1
   2f5d4:	0002ff65 	.word	0x0002ff65
   2f5d8:	0002feed 	.word	0x0002feed
   2f5dc:	00030b39 	.word	0x00030b39
   2f5e0:	0002f0dd 	.word	0x0002f0dd

0002f5e4 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   2f5e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f5e6:	b095      	sub	sp, #84	; 0x54
   2f5e8:	af06      	add	r7, sp, #24
   2f5ea:	6078      	str	r0, [r7, #4]
   2f5ec:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
   2f5ee:	683a      	ldr	r2, [r7, #0]
   2f5f0:	687b      	ldr	r3, [r7, #4]
   2f5f2:	0011      	movs	r1, r2
   2f5f4:	0018      	movs	r0, r3
   2f5f6:	4b70      	ldr	r3, [pc, #448]	; (2f7b8 <cycle+0x1d4>)
   2f5f8:	4798      	blx	r3
   2f5fa:	0002      	movs	r2, r0
   2f5fc:	232e      	movs	r3, #46	; 0x2e
   2f5fe:	18fb      	adds	r3, r7, r3
   2f600:	801a      	strh	r2, [r3, #0]
    
    int len = 0,
   2f602:	2300      	movs	r3, #0
   2f604:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESS;
   2f606:	2300      	movs	r3, #0
   2f608:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
   2f60a:	232e      	movs	r3, #46	; 0x2e
   2f60c:	18fb      	adds	r3, r7, r3
   2f60e:	881b      	ldrh	r3, [r3, #0]
   2f610:	2b0d      	cmp	r3, #13
   2f612:	d900      	bls.n	2f616 <cycle+0x32>
   2f614:	e0bd      	b.n	2f792 <cycle+0x1ae>
   2f616:	009a      	lsls	r2, r3, #2
   2f618:	4b68      	ldr	r3, [pc, #416]	; (2f7bc <cycle+0x1d8>)
   2f61a:	18d3      	adds	r3, r2, r3
   2f61c:	681b      	ldr	r3, [r3, #0]
   2f61e:	469f      	mov	pc, r3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2f620:	687b      	ldr	r3, [r7, #4]
   2f622:	695a      	ldr	r2, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
   2f624:	687b      	ldr	r3, [r7, #4]
   2f626:	68db      	ldr	r3, [r3, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2f628:	001e      	movs	r6, r3
   2f62a:	2310      	movs	r3, #16
   2f62c:	18fb      	adds	r3, r7, r3
   2f62e:	1d1d      	adds	r5, r3, #4
   2f630:	2310      	movs	r3, #16
   2f632:	18fb      	adds	r3, r7, r3
   2f634:	1c5c      	adds	r4, r3, #1
   2f636:	230c      	movs	r3, #12
   2f638:	18f9      	adds	r1, r7, r3
   2f63a:	2310      	movs	r3, #16
   2f63c:	18fb      	adds	r3, r7, r3
   2f63e:	1c98      	adds	r0, r3, #2
   2f640:	9604      	str	r6, [sp, #16]
   2f642:	9203      	str	r2, [sp, #12]
   2f644:	2310      	movs	r3, #16
   2f646:	18fb      	adds	r3, r7, r3
   2f648:	330c      	adds	r3, #12
   2f64a:	9302      	str	r3, [sp, #8]
   2f64c:	2310      	movs	r3, #16
   2f64e:	18fb      	adds	r3, r7, r3
   2f650:	3308      	adds	r3, #8
   2f652:	9301      	str	r3, [sp, #4]
   2f654:	2320      	movs	r3, #32
   2f656:	18fb      	adds	r3, r7, r3
   2f658:	9300      	str	r3, [sp, #0]
   2f65a:	002b      	movs	r3, r5
   2f65c:	0022      	movs	r2, r4
   2f65e:	4c58      	ldr	r4, [pc, #352]	; (2f7c0 <cycle+0x1dc>)
   2f660:	47a0      	blx	r4
   2f662:	0003      	movs	r3, r0
   2f664:	2b01      	cmp	r3, #1
   2f666:	d000      	beq.n	2f66a <cycle+0x86>
   2f668:	e098      	b.n	2f79c <cycle+0x1b8>
                goto exit;
            msg.qos = (enum QoS)intQoS;
   2f66a:	68fb      	ldr	r3, [r7, #12]
   2f66c:	b2da      	uxtb	r2, r3
   2f66e:	2310      	movs	r3, #16
   2f670:	18fb      	adds	r3, r7, r3
   2f672:	701a      	strb	r2, [r3, #0]
            deliverMessage(c, &topicName, &msg);
   2f674:	2310      	movs	r3, #16
   2f676:	18fa      	adds	r2, r7, r3
   2f678:	2320      	movs	r3, #32
   2f67a:	18f9      	adds	r1, r7, r3
   2f67c:	687b      	ldr	r3, [r7, #4]
   2f67e:	0018      	movs	r0, r3
   2f680:	4b50      	ldr	r3, [pc, #320]	; (2f7c4 <cycle+0x1e0>)
   2f682:	4798      	blx	r3
            if (msg.qos != QOS0)
   2f684:	2310      	movs	r3, #16
   2f686:	18fb      	adds	r3, r7, r3
   2f688:	781b      	ldrb	r3, [r3, #0]
   2f68a:	2b00      	cmp	r3, #0
   2f68c:	d100      	bne.n	2f690 <cycle+0xac>
   2f68e:	e07d      	b.n	2f78c <cycle+0x1a8>
            {
                if (msg.qos == QOS1)
   2f690:	2310      	movs	r3, #16
   2f692:	18fb      	adds	r3, r7, r3
   2f694:	781b      	ldrb	r3, [r3, #0]
   2f696:	2b01      	cmp	r3, #1
   2f698:	d10f      	bne.n	2f6ba <cycle+0xd6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   2f69a:	687b      	ldr	r3, [r7, #4]
   2f69c:	6918      	ldr	r0, [r3, #16]
   2f69e:	687b      	ldr	r3, [r7, #4]
   2f6a0:	689b      	ldr	r3, [r3, #8]
   2f6a2:	0019      	movs	r1, r3
   2f6a4:	2310      	movs	r3, #16
   2f6a6:	18fb      	adds	r3, r7, r3
   2f6a8:	889b      	ldrh	r3, [r3, #4]
   2f6aa:	9300      	str	r3, [sp, #0]
   2f6ac:	2300      	movs	r3, #0
   2f6ae:	2204      	movs	r2, #4
   2f6b0:	4c45      	ldr	r4, [pc, #276]	; (2f7c8 <cycle+0x1e4>)
   2f6b2:	47a0      	blx	r4
   2f6b4:	0003      	movs	r3, r0
   2f6b6:	637b      	str	r3, [r7, #52]	; 0x34
   2f6b8:	e013      	b.n	2f6e2 <cycle+0xfe>
                else if (msg.qos == QOS2)
   2f6ba:	2310      	movs	r3, #16
   2f6bc:	18fb      	adds	r3, r7, r3
   2f6be:	781b      	ldrb	r3, [r3, #0]
   2f6c0:	2b02      	cmp	r3, #2
   2f6c2:	d10e      	bne.n	2f6e2 <cycle+0xfe>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   2f6c4:	687b      	ldr	r3, [r7, #4]
   2f6c6:	6918      	ldr	r0, [r3, #16]
   2f6c8:	687b      	ldr	r3, [r7, #4]
   2f6ca:	689b      	ldr	r3, [r3, #8]
   2f6cc:	0019      	movs	r1, r3
   2f6ce:	2310      	movs	r3, #16
   2f6d0:	18fb      	adds	r3, r7, r3
   2f6d2:	889b      	ldrh	r3, [r3, #4]
   2f6d4:	9300      	str	r3, [sp, #0]
   2f6d6:	2300      	movs	r3, #0
   2f6d8:	2205      	movs	r2, #5
   2f6da:	4c3b      	ldr	r4, [pc, #236]	; (2f7c8 <cycle+0x1e4>)
   2f6dc:	47a0      	blx	r4
   2f6de:	0003      	movs	r3, r0
   2f6e0:	637b      	str	r3, [r7, #52]	; 0x34
                if (len <= 0)
   2f6e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2f6e4:	2b00      	cmp	r3, #0
   2f6e6:	dc03      	bgt.n	2f6f0 <cycle+0x10c>
                    rc = FAILURE;
   2f6e8:	2301      	movs	r3, #1
   2f6ea:	425b      	negs	r3, r3
   2f6ec:	633b      	str	r3, [r7, #48]	; 0x30
   2f6ee:	e007      	b.n	2f700 <cycle+0x11c>
                else
                    rc = sendPacket(c, len, timer);
   2f6f0:	683a      	ldr	r2, [r7, #0]
   2f6f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2f6f4:	687b      	ldr	r3, [r7, #4]
   2f6f6:	0018      	movs	r0, r3
   2f6f8:	4b34      	ldr	r3, [pc, #208]	; (2f7cc <cycle+0x1e8>)
   2f6fa:	4798      	blx	r3
   2f6fc:	0003      	movs	r3, r0
   2f6fe:	633b      	str	r3, [r7, #48]	; 0x30
                if (rc == FAILURE)
   2f700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f702:	3301      	adds	r3, #1
   2f704:	d142      	bne.n	2f78c <cycle+0x1a8>
                    goto exit; // there was a problem
   2f706:	46c0      	nop			; (mov r8, r8)
   2f708:	e049      	b.n	2f79e <cycle+0x1ba>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2f70a:	687b      	ldr	r3, [r7, #4]
   2f70c:	695c      	ldr	r4, [r3, #20]
   2f70e:	687b      	ldr	r3, [r7, #4]
   2f710:	68db      	ldr	r3, [r3, #12]
   2f712:	220a      	movs	r2, #10
   2f714:	18ba      	adds	r2, r7, r2
   2f716:	2109      	movs	r1, #9
   2f718:	1879      	adds	r1, r7, r1
   2f71a:	2008      	movs	r0, #8
   2f71c:	1838      	adds	r0, r7, r0
   2f71e:	9300      	str	r3, [sp, #0]
   2f720:	0023      	movs	r3, r4
   2f722:	4c2b      	ldr	r4, [pc, #172]	; (2f7d0 <cycle+0x1ec>)
   2f724:	47a0      	blx	r4
   2f726:	0003      	movs	r3, r0
   2f728:	2b01      	cmp	r3, #1
   2f72a:	d003      	beq.n	2f734 <cycle+0x150>
                rc = FAILURE;
   2f72c:	2301      	movs	r3, #1
   2f72e:	425b      	negs	r3, r3
   2f730:	633b      	str	r3, [r7, #48]	; 0x30
   2f732:	e023      	b.n	2f77c <cycle+0x198>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   2f734:	687b      	ldr	r3, [r7, #4]
   2f736:	6918      	ldr	r0, [r3, #16]
   2f738:	687b      	ldr	r3, [r7, #4]
   2f73a:	689b      	ldr	r3, [r3, #8]
   2f73c:	0019      	movs	r1, r3
   2f73e:	230a      	movs	r3, #10
   2f740:	18fb      	adds	r3, r7, r3
   2f742:	881b      	ldrh	r3, [r3, #0]
   2f744:	9300      	str	r3, [sp, #0]
   2f746:	2300      	movs	r3, #0
   2f748:	2206      	movs	r2, #6
   2f74a:	4c1f      	ldr	r4, [pc, #124]	; (2f7c8 <cycle+0x1e4>)
   2f74c:	47a0      	blx	r4
   2f74e:	0003      	movs	r3, r0
   2f750:	637b      	str	r3, [r7, #52]	; 0x34
   2f752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2f754:	2b00      	cmp	r3, #0
   2f756:	dc03      	bgt.n	2f760 <cycle+0x17c>
                rc = FAILURE;
   2f758:	2301      	movs	r3, #1
   2f75a:	425b      	negs	r3, r3
   2f75c:	633b      	str	r3, [r7, #48]	; 0x30
   2f75e:	e00d      	b.n	2f77c <cycle+0x198>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   2f760:	683a      	ldr	r2, [r7, #0]
   2f762:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2f764:	687b      	ldr	r3, [r7, #4]
   2f766:	0018      	movs	r0, r3
   2f768:	4b18      	ldr	r3, [pc, #96]	; (2f7cc <cycle+0x1e8>)
   2f76a:	4798      	blx	r3
   2f76c:	0003      	movs	r3, r0
   2f76e:	633b      	str	r3, [r7, #48]	; 0x30
   2f770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f772:	2b00      	cmp	r3, #0
   2f774:	d002      	beq.n	2f77c <cycle+0x198>
                rc = FAILURE; // there was a problem
   2f776:	2301      	movs	r3, #1
   2f778:	425b      	negs	r3, r3
   2f77a:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
   2f77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f77e:	3301      	adds	r3, #1
   2f780:	d106      	bne.n	2f790 <cycle+0x1ac>
                goto exit; // there was a problem
   2f782:	e00c      	b.n	2f79e <cycle+0x1ba>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   2f784:	687b      	ldr	r3, [r7, #4]
   2f786:	2200      	movs	r2, #0
   2f788:	771a      	strb	r2, [r3, #28]
            break;
   2f78a:	e002      	b.n	2f792 <cycle+0x1ae>
            break;
   2f78c:	46c0      	nop			; (mov r8, r8)
   2f78e:	e000      	b.n	2f792 <cycle+0x1ae>
            break;
   2f790:	46c0      	nop			; (mov r8, r8)
    }
    keepalive(c);
   2f792:	687b      	ldr	r3, [r7, #4]
   2f794:	0018      	movs	r0, r3
   2f796:	4b0f      	ldr	r3, [pc, #60]	; (2f7d4 <cycle+0x1f0>)
   2f798:	4798      	blx	r3
   2f79a:	e000      	b.n	2f79e <cycle+0x1ba>
                goto exit;
   2f79c:	46c0      	nop			; (mov r8, r8)
exit:
    if (rc == SUCCESS)
   2f79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f7a0:	2b00      	cmp	r3, #0
   2f7a2:	d103      	bne.n	2f7ac <cycle+0x1c8>
        rc = packet_type;
   2f7a4:	232e      	movs	r3, #46	; 0x2e
   2f7a6:	18fb      	adds	r3, r7, r3
   2f7a8:	881b      	ldrh	r3, [r3, #0]
   2f7aa:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
   2f7ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   2f7ae:	0018      	movs	r0, r3
   2f7b0:	46bd      	mov	sp, r7
   2f7b2:	b00f      	add	sp, #60	; 0x3c
   2f7b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f7b6:	46c0      	nop			; (mov r8, r8)
   2f7b8:	0002f299 	.word	0x0002f299
   2f7bc:	0003a908 	.word	0x0003a908
   2f7c0:	00030b5d 	.word	0x00030b5d
   2f7c4:	0002f455 	.word	0x0002f455
   2f7c8:	00031355 	.word	0x00031355
   2f7cc:	0002f0dd 	.word	0x0002f0dd
   2f7d0:	00030c61 	.word	0x00030c61
   2f7d4:	0002f541 	.word	0x0002f541

0002f7d8 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   2f7d8:	b580      	push	{r7, lr}
   2f7da:	b086      	sub	sp, #24
   2f7dc:	af00      	add	r7, sp, #0
   2f7de:	6078      	str	r0, [r7, #4]
   2f7e0:	6039      	str	r1, [r7, #0]
    int rc = SUCCESS;
   2f7e2:	2300      	movs	r3, #0
   2f7e4:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
   2f7e6:	2308      	movs	r3, #8
   2f7e8:	18fb      	adds	r3, r7, r3
   2f7ea:	0018      	movs	r0, r3
   2f7ec:	4b11      	ldr	r3, [pc, #68]	; (2f834 <MQTTYield+0x5c>)
   2f7ee:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   2f7f0:	683a      	ldr	r2, [r7, #0]
   2f7f2:	2308      	movs	r3, #8
   2f7f4:	18fb      	adds	r3, r7, r3
   2f7f6:	0011      	movs	r1, r2
   2f7f8:	0018      	movs	r0, r3
   2f7fa:	4b0f      	ldr	r3, [pc, #60]	; (2f838 <MQTTYield+0x60>)
   2f7fc:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   2f7fe:	2308      	movs	r3, #8
   2f800:	18fa      	adds	r2, r7, r3
   2f802:	687b      	ldr	r3, [r7, #4]
   2f804:	0011      	movs	r1, r2
   2f806:	0018      	movs	r0, r3
   2f808:	4b0c      	ldr	r3, [pc, #48]	; (2f83c <MQTTYield+0x64>)
   2f80a:	4798      	blx	r3
   2f80c:	0003      	movs	r3, r0
   2f80e:	3301      	adds	r3, #1
   2f810:	d103      	bne.n	2f81a <MQTTYield+0x42>
        {
            rc = FAILURE;
   2f812:	2301      	movs	r3, #1
   2f814:	425b      	negs	r3, r3
   2f816:	617b      	str	r3, [r7, #20]
            break;
   2f818:	e006      	b.n	2f828 <MQTTYield+0x50>
        }
	} while (!TimerIsExpired(&timer));
   2f81a:	2308      	movs	r3, #8
   2f81c:	18fb      	adds	r3, r7, r3
   2f81e:	0018      	movs	r0, r3
   2f820:	4b07      	ldr	r3, [pc, #28]	; (2f840 <MQTTYield+0x68>)
   2f822:	4798      	blx	r3
   2f824:	1e03      	subs	r3, r0, #0
   2f826:	d0ea      	beq.n	2f7fe <MQTTYield+0x26>
        
    return rc;
   2f828:	697b      	ldr	r3, [r7, #20]
}
   2f82a:	0018      	movs	r0, r3
   2f82c:	46bd      	mov	sp, r7
   2f82e:	b006      	add	sp, #24
   2f830:	bd80      	pop	{r7, pc}
   2f832:	46c0      	nop			; (mov r8, r8)
   2f834:	0002ff65 	.word	0x0002ff65
   2f838:	0002feed 	.word	0x0002feed
   2f83c:	0002f5e5 	.word	0x0002f5e5
   2f840:	0002fec1 	.word	0x0002fec1

0002f844 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   2f844:	b580      	push	{r7, lr}
   2f846:	b086      	sub	sp, #24
   2f848:	af00      	add	r7, sp, #0
   2f84a:	60f8      	str	r0, [r7, #12]
   2f84c:	60b9      	str	r1, [r7, #8]
   2f84e:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2f850:	2301      	movs	r3, #1
   2f852:	425b      	negs	r3, r3
   2f854:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
   2f856:	687b      	ldr	r3, [r7, #4]
   2f858:	0018      	movs	r0, r3
   2f85a:	4b0b      	ldr	r3, [pc, #44]	; (2f888 <waitfor+0x44>)
   2f85c:	4798      	blx	r3
   2f85e:	1e03      	subs	r3, r0, #0
   2f860:	d10c      	bne.n	2f87c <waitfor+0x38>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   2f862:	687a      	ldr	r2, [r7, #4]
   2f864:	68fb      	ldr	r3, [r7, #12]
   2f866:	0011      	movs	r1, r2
   2f868:	0018      	movs	r0, r3
   2f86a:	4b08      	ldr	r3, [pc, #32]	; (2f88c <waitfor+0x48>)
   2f86c:	4798      	blx	r3
   2f86e:	0003      	movs	r3, r0
   2f870:	617b      	str	r3, [r7, #20]
   2f872:	697a      	ldr	r2, [r7, #20]
   2f874:	68bb      	ldr	r3, [r7, #8]
   2f876:	429a      	cmp	r2, r3
   2f878:	d1ed      	bne.n	2f856 <waitfor+0x12>
   2f87a:	e000      	b.n	2f87e <waitfor+0x3a>
            break; // we timed out
   2f87c:	46c0      	nop			; (mov r8, r8)
    
    return rc;
   2f87e:	697b      	ldr	r3, [r7, #20]
}
   2f880:	0018      	movs	r0, r3
   2f882:	46bd      	mov	sp, r7
   2f884:	b006      	add	sp, #24
   2f886:	bd80      	pop	{r7, pc}
   2f888:	0002fec1 	.word	0x0002fec1
   2f88c:	0002f5e5 	.word	0x0002f5e5

0002f890 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   2f890:	b590      	push	{r4, r7, lr}
   2f892:	b09f      	sub	sp, #124	; 0x7c
   2f894:	af00      	add	r7, sp, #0
   2f896:	6078      	str	r0, [r7, #4]
   2f898:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
   2f89a:	2301      	movs	r3, #1
   2f89c:	425b      	negs	r3, r3
   2f89e:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   2f8a0:	230c      	movs	r3, #12
   2f8a2:	18fa      	adds	r2, r7, r3
   2f8a4:	4b41      	ldr	r3, [pc, #260]	; (2f9ac <MQTTConnect+0x11c>)
   2f8a6:	0010      	movs	r0, r2
   2f8a8:	0019      	movs	r1, r3
   2f8aa:	2358      	movs	r3, #88	; 0x58
   2f8ac:	001a      	movs	r2, r3
   2f8ae:	4b40      	ldr	r3, [pc, #256]	; (2f9b0 <MQTTConnect+0x120>)
   2f8b0:	4798      	blx	r3
    int len = 0;
   2f8b2:	2300      	movs	r3, #0
   2f8b4:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   2f8b6:	687b      	ldr	r3, [r7, #4]
   2f8b8:	6a1b      	ldr	r3, [r3, #32]
   2f8ba:	2b00      	cmp	r3, #0
   2f8bc:	d166      	bne.n	2f98c <MQTTConnect+0xfc>
		goto exit;
    
    TimerInit(&connect_timer);
   2f8be:	2364      	movs	r3, #100	; 0x64
   2f8c0:	18fb      	adds	r3, r7, r3
   2f8c2:	0018      	movs	r0, r3
   2f8c4:	4b3b      	ldr	r3, [pc, #236]	; (2f9b4 <MQTTConnect+0x124>)
   2f8c6:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   2f8c8:	687b      	ldr	r3, [r7, #4]
   2f8ca:	685a      	ldr	r2, [r3, #4]
   2f8cc:	2364      	movs	r3, #100	; 0x64
   2f8ce:	18fb      	adds	r3, r7, r3
   2f8d0:	0011      	movs	r1, r2
   2f8d2:	0018      	movs	r0, r3
   2f8d4:	4b38      	ldr	r3, [pc, #224]	; (2f9b8 <MQTTConnect+0x128>)
   2f8d6:	4798      	blx	r3

    if (options == 0)
   2f8d8:	683b      	ldr	r3, [r7, #0]
   2f8da:	2b00      	cmp	r3, #0
   2f8dc:	d102      	bne.n	2f8e4 <MQTTConnect+0x54>
        options = &default_options; /* set default options if none were supplied */
   2f8de:	230c      	movs	r3, #12
   2f8e0:	18fb      	adds	r3, r7, r3
   2f8e2:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
   2f8e4:	683b      	ldr	r3, [r7, #0]
   2f8e6:	8b1b      	ldrh	r3, [r3, #24]
   2f8e8:	001a      	movs	r2, r3
   2f8ea:	687b      	ldr	r3, [r7, #4]
   2f8ec:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   2f8ee:	687b      	ldr	r3, [r7, #4]
   2f8f0:	3354      	adds	r3, #84	; 0x54
   2f8f2:	001a      	movs	r2, r3
   2f8f4:	687b      	ldr	r3, [r7, #4]
   2f8f6:	699b      	ldr	r3, [r3, #24]
   2f8f8:	0019      	movs	r1, r3
   2f8fa:	0010      	movs	r0, r2
   2f8fc:	4b2f      	ldr	r3, [pc, #188]	; (2f9bc <MQTTConnect+0x12c>)
   2f8fe:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   2f900:	687b      	ldr	r3, [r7, #4]
   2f902:	6918      	ldr	r0, [r3, #16]
   2f904:	687b      	ldr	r3, [r7, #4]
   2f906:	689b      	ldr	r3, [r3, #8]
   2f908:	0019      	movs	r1, r3
   2f90a:	683b      	ldr	r3, [r7, #0]
   2f90c:	001a      	movs	r2, r3
   2f90e:	4b2c      	ldr	r3, [pc, #176]	; (2f9c0 <MQTTConnect+0x130>)
   2f910:	4798      	blx	r3
   2f912:	0003      	movs	r3, r0
   2f914:	673b      	str	r3, [r7, #112]	; 0x70
   2f916:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2f918:	2b00      	cmp	r3, #0
   2f91a:	dd39      	ble.n	2f990 <MQTTConnect+0x100>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   2f91c:	2364      	movs	r3, #100	; 0x64
   2f91e:	18fa      	adds	r2, r7, r3
   2f920:	6f39      	ldr	r1, [r7, #112]	; 0x70
   2f922:	687b      	ldr	r3, [r7, #4]
   2f924:	0018      	movs	r0, r3
   2f926:	4b27      	ldr	r3, [pc, #156]	; (2f9c4 <MQTTConnect+0x134>)
   2f928:	4798      	blx	r3
   2f92a:	0003      	movs	r3, r0
   2f92c:	677b      	str	r3, [r7, #116]	; 0x74
   2f92e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2f930:	2b00      	cmp	r3, #0
   2f932:	d12f      	bne.n	2f994 <MQTTConnect+0x104>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   2f934:	2364      	movs	r3, #100	; 0x64
   2f936:	18fa      	adds	r2, r7, r3
   2f938:	687b      	ldr	r3, [r7, #4]
   2f93a:	2102      	movs	r1, #2
   2f93c:	0018      	movs	r0, r3
   2f93e:	4b22      	ldr	r3, [pc, #136]	; (2f9c8 <MQTTConnect+0x138>)
   2f940:	4798      	blx	r3
   2f942:	0003      	movs	r3, r0
   2f944:	2b02      	cmp	r3, #2
   2f946:	d11d      	bne.n	2f984 <MQTTConnect+0xf4>
    {
        unsigned char connack_rc = 255;
   2f948:	230b      	movs	r3, #11
   2f94a:	18fb      	adds	r3, r7, r3
   2f94c:	22ff      	movs	r2, #255	; 0xff
   2f94e:	701a      	strb	r2, [r3, #0]
        unsigned char sessionPresent = 0;
   2f950:	230a      	movs	r3, #10
   2f952:	18fb      	adds	r3, r7, r3
   2f954:	2200      	movs	r2, #0
   2f956:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   2f958:	687b      	ldr	r3, [r7, #4]
   2f95a:	695a      	ldr	r2, [r3, #20]
   2f95c:	687b      	ldr	r3, [r7, #4]
   2f95e:	68db      	ldr	r3, [r3, #12]
   2f960:	210b      	movs	r1, #11
   2f962:	1879      	adds	r1, r7, r1
   2f964:	200a      	movs	r0, #10
   2f966:	1838      	adds	r0, r7, r0
   2f968:	4c18      	ldr	r4, [pc, #96]	; (2f9cc <MQTTConnect+0x13c>)
   2f96a:	47a0      	blx	r4
   2f96c:	0003      	movs	r3, r0
   2f96e:	2b01      	cmp	r3, #1
   2f970:	d104      	bne.n	2f97c <MQTTConnect+0xec>
            rc = connack_rc;
   2f972:	230b      	movs	r3, #11
   2f974:	18fb      	adds	r3, r7, r3
   2f976:	781b      	ldrb	r3, [r3, #0]
   2f978:	677b      	str	r3, [r7, #116]	; 0x74
   2f97a:	e00c      	b.n	2f996 <MQTTConnect+0x106>
        else
            rc = FAILURE;
   2f97c:	2301      	movs	r3, #1
   2f97e:	425b      	negs	r3, r3
   2f980:	677b      	str	r3, [r7, #116]	; 0x74
   2f982:	e008      	b.n	2f996 <MQTTConnect+0x106>
    }
    else
        rc = FAILURE;
   2f984:	2301      	movs	r3, #1
   2f986:	425b      	negs	r3, r3
   2f988:	677b      	str	r3, [r7, #116]	; 0x74
   2f98a:	e004      	b.n	2f996 <MQTTConnect+0x106>
		goto exit;
   2f98c:	46c0      	nop			; (mov r8, r8)
   2f98e:	e002      	b.n	2f996 <MQTTConnect+0x106>
        goto exit;
   2f990:	46c0      	nop			; (mov r8, r8)
   2f992:	e000      	b.n	2f996 <MQTTConnect+0x106>
        goto exit; // there was a problem
   2f994:	46c0      	nop			; (mov r8, r8)
    
exit:
    if (rc == SUCCESS)
   2f996:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2f998:	2b00      	cmp	r3, #0
   2f99a:	d102      	bne.n	2f9a2 <MQTTConnect+0x112>
        c->isconnected = 1;
   2f99c:	687b      	ldr	r3, [r7, #4]
   2f99e:	2201      	movs	r2, #1
   2f9a0:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
   2f9a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   2f9a4:	0018      	movs	r0, r3
   2f9a6:	46bd      	mov	sp, r7
   2f9a8:	b01f      	add	sp, #124	; 0x7c
   2f9aa:	bd90      	pop	{r4, r7, pc}
   2f9ac:	0003a940 	.word	0x0003a940
   2f9b0:	000355b9 	.word	0x000355b9
   2f9b4:	0002ff65 	.word	0x0002ff65
   2f9b8:	0002feed 	.word	0x0002feed
   2f9bc:	0002ff15 	.word	0x0002ff15
   2f9c0:	00030741 	.word	0x00030741
   2f9c4:	0002f0dd 	.word	0x0002f0dd
   2f9c8:	0002f845 	.word	0x0002f845
   2f9cc:	000309bd 	.word	0x000309bd

0002f9d0 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   2f9d0:	b5b0      	push	{r4, r5, r7, lr}
   2f9d2:	b096      	sub	sp, #88	; 0x58
   2f9d4:	af04      	add	r7, sp, #16
   2f9d6:	60f8      	str	r0, [r7, #12]
   2f9d8:	60b9      	str	r1, [r7, #8]
   2f9da:	603b      	str	r3, [r7, #0]
   2f9dc:	1dfb      	adds	r3, r7, #7
   2f9de:	701a      	strb	r2, [r3, #0]
    int rc = FAILURE;  
   2f9e0:	2301      	movs	r3, #1
   2f9e2:	425b      	negs	r3, r3
   2f9e4:	647b      	str	r3, [r7, #68]	; 0x44
    Timer timer;
    int len = 0;
   2f9e6:	2300      	movs	r3, #0
   2f9e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    MQTTString topic = MQTTString_initializer;
   2f9ea:	2324      	movs	r3, #36	; 0x24
   2f9ec:	18fb      	adds	r3, r7, r3
   2f9ee:	2200      	movs	r2, #0
   2f9f0:	601a      	str	r2, [r3, #0]
   2f9f2:	2324      	movs	r3, #36	; 0x24
   2f9f4:	18fb      	adds	r3, r7, r3
   2f9f6:	2200      	movs	r2, #0
   2f9f8:	605a      	str	r2, [r3, #4]
   2f9fa:	2324      	movs	r3, #36	; 0x24
   2f9fc:	18fb      	adds	r3, r7, r3
   2f9fe:	2200      	movs	r2, #0
   2fa00:	609a      	str	r2, [r3, #8]
	int Qoss = (int) qos;
   2fa02:	1dfb      	adds	r3, r7, #7
   2fa04:	781b      	ldrb	r3, [r3, #0]
   2fa06:	623b      	str	r3, [r7, #32]
    topic.cstring = (char *)topicFilter;
   2fa08:	2324      	movs	r3, #36	; 0x24
   2fa0a:	18fb      	adds	r3, r7, r3
   2fa0c:	68ba      	ldr	r2, [r7, #8]
   2fa0e:	601a      	str	r2, [r3, #0]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2fa10:	68fb      	ldr	r3, [r7, #12]
   2fa12:	6a1b      	ldr	r3, [r3, #32]
   2fa14:	2b00      	cmp	r3, #0
   2fa16:	d100      	bne.n	2fa1a <MQTTSubscribe+0x4a>
   2fa18:	e088      	b.n	2fb2c <MQTTSubscribe+0x15c>
		goto exit;

    TimerInit(&timer);
   2fa1a:	2330      	movs	r3, #48	; 0x30
   2fa1c:	18fb      	adds	r3, r7, r3
   2fa1e:	0018      	movs	r0, r3
   2fa20:	4b47      	ldr	r3, [pc, #284]	; (2fb40 <MQTTSubscribe+0x170>)
   2fa22:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2fa24:	68fb      	ldr	r3, [r7, #12]
   2fa26:	685a      	ldr	r2, [r3, #4]
   2fa28:	2330      	movs	r3, #48	; 0x30
   2fa2a:	18fb      	adds	r3, r7, r3
   2fa2c:	0011      	movs	r1, r2
   2fa2e:	0018      	movs	r0, r3
   2fa30:	4b44      	ldr	r3, [pc, #272]	; (2fb44 <MQTTSubscribe+0x174>)
   2fa32:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   2fa34:	68fb      	ldr	r3, [r7, #12]
   2fa36:	691c      	ldr	r4, [r3, #16]
   2fa38:	68fb      	ldr	r3, [r7, #12]
   2fa3a:	689b      	ldr	r3, [r3, #8]
   2fa3c:	001d      	movs	r5, r3
   2fa3e:	68fb      	ldr	r3, [r7, #12]
   2fa40:	0018      	movs	r0, r3
   2fa42:	4b41      	ldr	r3, [pc, #260]	; (2fb48 <MQTTSubscribe+0x178>)
   2fa44:	4798      	blx	r3
   2fa46:	0003      	movs	r3, r0
   2fa48:	b29a      	uxth	r2, r3
   2fa4a:	2320      	movs	r3, #32
   2fa4c:	18fb      	adds	r3, r7, r3
   2fa4e:	9302      	str	r3, [sp, #8]
   2fa50:	2324      	movs	r3, #36	; 0x24
   2fa52:	18fb      	adds	r3, r7, r3
   2fa54:	9301      	str	r3, [sp, #4]
   2fa56:	2301      	movs	r3, #1
   2fa58:	9300      	str	r3, [sp, #0]
   2fa5a:	0013      	movs	r3, r2
   2fa5c:	2200      	movs	r2, #0
   2fa5e:	0029      	movs	r1, r5
   2fa60:	0020      	movs	r0, r4
   2fa62:	4c3a      	ldr	r4, [pc, #232]	; (2fb4c <MQTTSubscribe+0x17c>)
   2fa64:	47a0      	blx	r4
   2fa66:	0003      	movs	r3, r0
   2fa68:	63fb      	str	r3, [r7, #60]	; 0x3c
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   2fa6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2fa6c:	2b00      	cmp	r3, #0
   2fa6e:	dd5f      	ble.n	2fb30 <MQTTSubscribe+0x160>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2fa70:	2330      	movs	r3, #48	; 0x30
   2fa72:	18fa      	adds	r2, r7, r3
   2fa74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   2fa76:	68fb      	ldr	r3, [r7, #12]
   2fa78:	0018      	movs	r0, r3
   2fa7a:	4b35      	ldr	r3, [pc, #212]	; (2fb50 <MQTTSubscribe+0x180>)
   2fa7c:	4798      	blx	r3
   2fa7e:	0003      	movs	r3, r0
   2fa80:	647b      	str	r3, [r7, #68]	; 0x44
   2fa82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2fa84:	2b00      	cmp	r3, #0
   2fa86:	d155      	bne.n	2fb34 <MQTTSubscribe+0x164>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   2fa88:	2330      	movs	r3, #48	; 0x30
   2fa8a:	18fa      	adds	r2, r7, r3
   2fa8c:	68fb      	ldr	r3, [r7, #12]
   2fa8e:	2109      	movs	r1, #9
   2fa90:	0018      	movs	r0, r3
   2fa92:	4b30      	ldr	r3, [pc, #192]	; (2fb54 <MQTTSubscribe+0x184>)
   2fa94:	4798      	blx	r3
   2fa96:	0003      	movs	r3, r0
   2fa98:	2b09      	cmp	r3, #9
   2fa9a:	d143      	bne.n	2fb24 <MQTTSubscribe+0x154>
    {
        int count = 0, grantedQoS = -1;
   2fa9c:	2300      	movs	r3, #0
   2fa9e:	61fb      	str	r3, [r7, #28]
   2faa0:	2301      	movs	r3, #1
   2faa2:	425b      	negs	r3, r3
   2faa4:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   2faa6:	68fb      	ldr	r3, [r7, #12]
   2faa8:	695a      	ldr	r2, [r3, #20]
   2faaa:	68fb      	ldr	r3, [r7, #12]
   2faac:	68db      	ldr	r3, [r3, #12]
   2faae:	001c      	movs	r4, r3
   2fab0:	2318      	movs	r3, #24
   2fab2:	18fb      	adds	r3, r7, r3
   2fab4:	211c      	movs	r1, #28
   2fab6:	1879      	adds	r1, r7, r1
   2fab8:	2016      	movs	r0, #22
   2faba:	1838      	adds	r0, r7, r0
   2fabc:	9401      	str	r4, [sp, #4]
   2fabe:	9200      	str	r2, [sp, #0]
   2fac0:	000a      	movs	r2, r1
   2fac2:	2101      	movs	r1, #1
   2fac4:	4c24      	ldr	r4, [pc, #144]	; (2fb58 <MQTTSubscribe+0x188>)
   2fac6:	47a0      	blx	r4
   2fac8:	0003      	movs	r3, r0
   2faca:	2b01      	cmp	r3, #1
   2facc:	d101      	bne.n	2fad2 <MQTTSubscribe+0x102>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   2face:	69bb      	ldr	r3, [r7, #24]
   2fad0:	647b      	str	r3, [r7, #68]	; 0x44
        if (rc != 0x80)
   2fad2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2fad4:	2b80      	cmp	r3, #128	; 0x80
   2fad6:	d02e      	beq.n	2fb36 <MQTTSubscribe+0x166>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2fad8:	2300      	movs	r3, #0
   2fada:	643b      	str	r3, [r7, #64]	; 0x40
   2fadc:	e01e      	b.n	2fb1c <MQTTSubscribe+0x14c>
            {
                if (c->messageHandlers[i].topicFilter == 0)
   2fade:	68fa      	ldr	r2, [r7, #12]
   2fae0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2fae2:	3304      	adds	r3, #4
   2fae4:	00db      	lsls	r3, r3, #3
   2fae6:	18d3      	adds	r3, r2, r3
   2fae8:	3304      	adds	r3, #4
   2faea:	681b      	ldr	r3, [r3, #0]
   2faec:	2b00      	cmp	r3, #0
   2faee:	d112      	bne.n	2fb16 <MQTTSubscribe+0x146>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
   2faf0:	68fa      	ldr	r2, [r7, #12]
   2faf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2faf4:	3304      	adds	r3, #4
   2faf6:	00db      	lsls	r3, r3, #3
   2faf8:	18d3      	adds	r3, r2, r3
   2fafa:	3304      	adds	r3, #4
   2fafc:	68ba      	ldr	r2, [r7, #8]
   2fafe:	601a      	str	r2, [r3, #0]
                    c->messageHandlers[i].fp = msgHandler;
   2fb00:	68fa      	ldr	r2, [r7, #12]
   2fb02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2fb04:	3304      	adds	r3, #4
   2fb06:	00db      	lsls	r3, r3, #3
   2fb08:	18d3      	adds	r3, r2, r3
   2fb0a:	3308      	adds	r3, #8
   2fb0c:	683a      	ldr	r2, [r7, #0]
   2fb0e:	601a      	str	r2, [r3, #0]
                    rc = 0;
   2fb10:	2300      	movs	r3, #0
   2fb12:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
   2fb14:	e00f      	b.n	2fb36 <MQTTSubscribe+0x166>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2fb16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2fb18:	3301      	adds	r3, #1
   2fb1a:	643b      	str	r3, [r7, #64]	; 0x40
   2fb1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2fb1e:	2b04      	cmp	r3, #4
   2fb20:	dddd      	ble.n	2fade <MQTTSubscribe+0x10e>
   2fb22:	e008      	b.n	2fb36 <MQTTSubscribe+0x166>
                }
            }
        }
    }
    else 
        rc = FAILURE;
   2fb24:	2301      	movs	r3, #1
   2fb26:	425b      	negs	r3, r3
   2fb28:	647b      	str	r3, [r7, #68]	; 0x44
   2fb2a:	e004      	b.n	2fb36 <MQTTSubscribe+0x166>
		goto exit;
   2fb2c:	46c0      	nop			; (mov r8, r8)
   2fb2e:	e002      	b.n	2fb36 <MQTTSubscribe+0x166>
        goto exit;
   2fb30:	46c0      	nop			; (mov r8, r8)
   2fb32:	e000      	b.n	2fb36 <MQTTSubscribe+0x166>
        goto exit;             // there was a problem
   2fb34:	46c0      	nop			; (mov r8, r8)
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2fb36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   2fb38:	0018      	movs	r0, r3
   2fb3a:	46bd      	mov	sp, r7
   2fb3c:	b012      	add	sp, #72	; 0x48
   2fb3e:	bdb0      	pop	{r4, r5, r7, pc}
   2fb40:	0002ff65 	.word	0x0002ff65
   2fb44:	0002feed 	.word	0x0002feed
   2fb48:	0002f0ad 	.word	0x0002f0ad
   2fb4c:	0003149d 	.word	0x0003149d
   2fb50:	0002f0dd 	.word	0x0002f0dd
   2fb54:	0002f845 	.word	0x0002f845
   2fb58:	000315ed 	.word	0x000315ed

0002fb5c <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   2fb5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2fb5e:	46ce      	mov	lr, r9
   2fb60:	4647      	mov	r7, r8
   2fb62:	b580      	push	{r7, lr}
   2fb64:	b097      	sub	sp, #92	; 0x5c
   2fb66:	af08      	add	r7, sp, #32
   2fb68:	60f8      	str	r0, [r7, #12]
   2fb6a:	60b9      	str	r1, [r7, #8]
   2fb6c:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2fb6e:	2301      	movs	r3, #1
   2fb70:	425b      	negs	r3, r3
   2fb72:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   2fb74:	2318      	movs	r3, #24
   2fb76:	18fb      	adds	r3, r7, r3
   2fb78:	2200      	movs	r2, #0
   2fb7a:	601a      	str	r2, [r3, #0]
   2fb7c:	2318      	movs	r3, #24
   2fb7e:	18fb      	adds	r3, r7, r3
   2fb80:	2200      	movs	r2, #0
   2fb82:	605a      	str	r2, [r3, #4]
   2fb84:	2318      	movs	r3, #24
   2fb86:	18fb      	adds	r3, r7, r3
   2fb88:	2200      	movs	r2, #0
   2fb8a:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicName;
   2fb8c:	2318      	movs	r3, #24
   2fb8e:	18fb      	adds	r3, r7, r3
   2fb90:	68ba      	ldr	r2, [r7, #8]
   2fb92:	601a      	str	r2, [r3, #0]
    int len = 0;
   2fb94:	2300      	movs	r3, #0
   2fb96:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2fb98:	68fb      	ldr	r3, [r7, #12]
   2fb9a:	6a1b      	ldr	r3, [r3, #32]
   2fb9c:	2b00      	cmp	r3, #0
   2fb9e:	d100      	bne.n	2fba2 <MQTTPublish+0x46>
   2fba0:	e0a0      	b.n	2fce4 <MQTTPublish+0x188>
		goto exit;

    TimerInit(&timer);
   2fba2:	2324      	movs	r3, #36	; 0x24
   2fba4:	18fb      	adds	r3, r7, r3
   2fba6:	0018      	movs	r0, r3
   2fba8:	4b55      	ldr	r3, [pc, #340]	; (2fd00 <MQTTPublish+0x1a4>)
   2fbaa:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2fbac:	68fb      	ldr	r3, [r7, #12]
   2fbae:	685a      	ldr	r2, [r3, #4]
   2fbb0:	2324      	movs	r3, #36	; 0x24
   2fbb2:	18fb      	adds	r3, r7, r3
   2fbb4:	0011      	movs	r1, r2
   2fbb6:	0018      	movs	r0, r3
   2fbb8:	4b52      	ldr	r3, [pc, #328]	; (2fd04 <MQTTPublish+0x1a8>)
   2fbba:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   2fbbc:	687b      	ldr	r3, [r7, #4]
   2fbbe:	781b      	ldrb	r3, [r3, #0]
   2fbc0:	2b01      	cmp	r3, #1
   2fbc2:	d003      	beq.n	2fbcc <MQTTPublish+0x70>
   2fbc4:	687b      	ldr	r3, [r7, #4]
   2fbc6:	781b      	ldrb	r3, [r3, #0]
   2fbc8:	2b02      	cmp	r3, #2
   2fbca:	d107      	bne.n	2fbdc <MQTTPublish+0x80>
        message->id = getNextPacketId(c);
   2fbcc:	68fb      	ldr	r3, [r7, #12]
   2fbce:	0018      	movs	r0, r3
   2fbd0:	4b4d      	ldr	r3, [pc, #308]	; (2fd08 <MQTTPublish+0x1ac>)
   2fbd2:	4798      	blx	r3
   2fbd4:	0003      	movs	r3, r0
   2fbd6:	b29a      	uxth	r2, r3
   2fbd8:	687b      	ldr	r3, [r7, #4]
   2fbda:	809a      	strh	r2, [r3, #4]
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2fbdc:	68fb      	ldr	r3, [r7, #12]
   2fbde:	691b      	ldr	r3, [r3, #16]
   2fbe0:	469c      	mov	ip, r3
   2fbe2:	68fb      	ldr	r3, [r7, #12]
   2fbe4:	689b      	ldr	r3, [r3, #8]
   2fbe6:	001d      	movs	r5, r3
   2fbe8:	687b      	ldr	r3, [r7, #4]
   2fbea:	781b      	ldrb	r3, [r3, #0]
   2fbec:	001e      	movs	r6, r3
   2fbee:	687b      	ldr	r3, [r7, #4]
   2fbf0:	785b      	ldrb	r3, [r3, #1]
   2fbf2:	4698      	mov	r8, r3
   2fbf4:	687b      	ldr	r3, [r7, #4]
   2fbf6:	889b      	ldrh	r3, [r3, #4]
   2fbf8:	4699      	mov	r9, r3
              topic, (unsigned char*)message->payload, message->payloadlen);
   2fbfa:	687b      	ldr	r3, [r7, #4]
   2fbfc:	689a      	ldr	r2, [r3, #8]
   2fbfe:	687b      	ldr	r3, [r7, #4]
   2fc00:	68db      	ldr	r3, [r3, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2fc02:	9306      	str	r3, [sp, #24]
   2fc04:	9205      	str	r2, [sp, #20]
   2fc06:	2318      	movs	r3, #24
   2fc08:	18fa      	adds	r2, r7, r3
   2fc0a:	2308      	movs	r3, #8
   2fc0c:	446b      	add	r3, sp
   2fc0e:	ca13      	ldmia	r2!, {r0, r1, r4}
   2fc10:	c313      	stmia	r3!, {r0, r1, r4}
   2fc12:	464b      	mov	r3, r9
   2fc14:	9301      	str	r3, [sp, #4]
   2fc16:	4643      	mov	r3, r8
   2fc18:	9300      	str	r3, [sp, #0]
   2fc1a:	0033      	movs	r3, r6
   2fc1c:	2200      	movs	r2, #0
   2fc1e:	0029      	movs	r1, r5
   2fc20:	4660      	mov	r0, ip
   2fc22:	4c3a      	ldr	r4, [pc, #232]	; (2fd0c <MQTTPublish+0x1b0>)
   2fc24:	47a0      	blx	r4
   2fc26:	0003      	movs	r3, r0
   2fc28:	633b      	str	r3, [r7, #48]	; 0x30
    if (len <= 0)
   2fc2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2fc2c:	2b00      	cmp	r3, #0
   2fc2e:	dd5b      	ble.n	2fce8 <MQTTPublish+0x18c>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2fc30:	2324      	movs	r3, #36	; 0x24
   2fc32:	18fa      	adds	r2, r7, r3
   2fc34:	6b39      	ldr	r1, [r7, #48]	; 0x30
   2fc36:	68fb      	ldr	r3, [r7, #12]
   2fc38:	0018      	movs	r0, r3
   2fc3a:	4b35      	ldr	r3, [pc, #212]	; (2fd10 <MQTTPublish+0x1b4>)
   2fc3c:	4798      	blx	r3
   2fc3e:	0003      	movs	r3, r0
   2fc40:	637b      	str	r3, [r7, #52]	; 0x34
   2fc42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2fc44:	2b00      	cmp	r3, #0
   2fc46:	d151      	bne.n	2fcec <MQTTPublish+0x190>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   2fc48:	687b      	ldr	r3, [r7, #4]
   2fc4a:	781b      	ldrb	r3, [r3, #0]
   2fc4c:	2b01      	cmp	r3, #1
   2fc4e:	d122      	bne.n	2fc96 <MQTTPublish+0x13a>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   2fc50:	2324      	movs	r3, #36	; 0x24
   2fc52:	18fa      	adds	r2, r7, r3
   2fc54:	68fb      	ldr	r3, [r7, #12]
   2fc56:	2104      	movs	r1, #4
   2fc58:	0018      	movs	r0, r3
   2fc5a:	4b2e      	ldr	r3, [pc, #184]	; (2fd14 <MQTTPublish+0x1b8>)
   2fc5c:	4798      	blx	r3
   2fc5e:	0003      	movs	r3, r0
   2fc60:	2b04      	cmp	r3, #4
   2fc62:	d114      	bne.n	2fc8e <MQTTPublish+0x132>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2fc64:	68fb      	ldr	r3, [r7, #12]
   2fc66:	695c      	ldr	r4, [r3, #20]
   2fc68:	68fb      	ldr	r3, [r7, #12]
   2fc6a:	68db      	ldr	r3, [r3, #12]
   2fc6c:	2216      	movs	r2, #22
   2fc6e:	18ba      	adds	r2, r7, r2
   2fc70:	2115      	movs	r1, #21
   2fc72:	1879      	adds	r1, r7, r1
   2fc74:	2014      	movs	r0, #20
   2fc76:	1838      	adds	r0, r7, r0
   2fc78:	9300      	str	r3, [sp, #0]
   2fc7a:	0023      	movs	r3, r4
   2fc7c:	4c26      	ldr	r4, [pc, #152]	; (2fd18 <MQTTPublish+0x1bc>)
   2fc7e:	47a0      	blx	r4
   2fc80:	0003      	movs	r3, r0
   2fc82:	2b01      	cmp	r3, #1
   2fc84:	d033      	beq.n	2fcee <MQTTPublish+0x192>
                rc = FAILURE;
   2fc86:	2301      	movs	r3, #1
   2fc88:	425b      	negs	r3, r3
   2fc8a:	637b      	str	r3, [r7, #52]	; 0x34
   2fc8c:	e02f      	b.n	2fcee <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2fc8e:	2301      	movs	r3, #1
   2fc90:	425b      	negs	r3, r3
   2fc92:	637b      	str	r3, [r7, #52]	; 0x34
   2fc94:	e02b      	b.n	2fcee <MQTTPublish+0x192>
    }
    else if (message->qos == QOS2)
   2fc96:	687b      	ldr	r3, [r7, #4]
   2fc98:	781b      	ldrb	r3, [r3, #0]
   2fc9a:	2b02      	cmp	r3, #2
   2fc9c:	d127      	bne.n	2fcee <MQTTPublish+0x192>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   2fc9e:	2324      	movs	r3, #36	; 0x24
   2fca0:	18fa      	adds	r2, r7, r3
   2fca2:	68fb      	ldr	r3, [r7, #12]
   2fca4:	2107      	movs	r1, #7
   2fca6:	0018      	movs	r0, r3
   2fca8:	4b1a      	ldr	r3, [pc, #104]	; (2fd14 <MQTTPublish+0x1b8>)
   2fcaa:	4798      	blx	r3
   2fcac:	0003      	movs	r3, r0
   2fcae:	2b07      	cmp	r3, #7
   2fcb0:	d114      	bne.n	2fcdc <MQTTPublish+0x180>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2fcb2:	68fb      	ldr	r3, [r7, #12]
   2fcb4:	695c      	ldr	r4, [r3, #20]
   2fcb6:	68fb      	ldr	r3, [r7, #12]
   2fcb8:	68db      	ldr	r3, [r3, #12]
   2fcba:	2212      	movs	r2, #18
   2fcbc:	18ba      	adds	r2, r7, r2
   2fcbe:	2111      	movs	r1, #17
   2fcc0:	1879      	adds	r1, r7, r1
   2fcc2:	2010      	movs	r0, #16
   2fcc4:	1838      	adds	r0, r7, r0
   2fcc6:	9300      	str	r3, [sp, #0]
   2fcc8:	0023      	movs	r3, r4
   2fcca:	4c13      	ldr	r4, [pc, #76]	; (2fd18 <MQTTPublish+0x1bc>)
   2fccc:	47a0      	blx	r4
   2fcce:	0003      	movs	r3, r0
   2fcd0:	2b01      	cmp	r3, #1
   2fcd2:	d00c      	beq.n	2fcee <MQTTPublish+0x192>
                rc = FAILURE;
   2fcd4:	2301      	movs	r3, #1
   2fcd6:	425b      	negs	r3, r3
   2fcd8:	637b      	str	r3, [r7, #52]	; 0x34
   2fcda:	e008      	b.n	2fcee <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2fcdc:	2301      	movs	r3, #1
   2fcde:	425b      	negs	r3, r3
   2fce0:	637b      	str	r3, [r7, #52]	; 0x34
   2fce2:	e004      	b.n	2fcee <MQTTPublish+0x192>
		goto exit;
   2fce4:	46c0      	nop			; (mov r8, r8)
   2fce6:	e002      	b.n	2fcee <MQTTPublish+0x192>
        goto exit;
   2fce8:	46c0      	nop			; (mov r8, r8)
   2fcea:	e000      	b.n	2fcee <MQTTPublish+0x192>
        goto exit; // there was a problem
   2fcec:	46c0      	nop			; (mov r8, r8)
    
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2fcee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   2fcf0:	0018      	movs	r0, r3
   2fcf2:	46bd      	mov	sp, r7
   2fcf4:	b00f      	add	sp, #60	; 0x3c
   2fcf6:	bc0c      	pop	{r2, r3}
   2fcf8:	4690      	mov	r8, r2
   2fcfa:	4699      	mov	r9, r3
   2fcfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2fcfe:	46c0      	nop			; (mov r8, r8)
   2fd00:	0002ff65 	.word	0x0002ff65
   2fd04:	0002feed 	.word	0x0002feed
   2fd08:	0002f0ad 	.word	0x0002f0ad
   2fd0c:	000311e9 	.word	0x000311e9
   2fd10:	0002f0dd 	.word	0x0002f0dd
   2fd14:	0002f845 	.word	0x0002f845
   2fd18:	00030c61 	.word	0x00030c61

0002fd1c <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   2fd1c:	b580      	push	{r7, lr}
   2fd1e:	b088      	sub	sp, #32
   2fd20:	af00      	add	r7, sp, #0
   2fd22:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2fd24:	2301      	movs	r3, #1
   2fd26:	425b      	negs	r3, r3
   2fd28:	61fb      	str	r3, [r7, #28]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
   2fd2a:	2300      	movs	r3, #0
   2fd2c:	61bb      	str	r3, [r7, #24]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   2fd2e:	230c      	movs	r3, #12
   2fd30:	18fb      	adds	r3, r7, r3
   2fd32:	0018      	movs	r0, r3
   2fd34:	4b13      	ldr	r3, [pc, #76]	; (2fd84 <MQTTDisconnect+0x68>)
   2fd36:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2fd38:	687b      	ldr	r3, [r7, #4]
   2fd3a:	685a      	ldr	r2, [r3, #4]
   2fd3c:	230c      	movs	r3, #12
   2fd3e:	18fb      	adds	r3, r7, r3
   2fd40:	0011      	movs	r1, r2
   2fd42:	0018      	movs	r0, r3
   2fd44:	4b10      	ldr	r3, [pc, #64]	; (2fd88 <MQTTDisconnect+0x6c>)
   2fd46:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   2fd48:	687b      	ldr	r3, [r7, #4]
   2fd4a:	691a      	ldr	r2, [r3, #16]
   2fd4c:	687b      	ldr	r3, [r7, #4]
   2fd4e:	689b      	ldr	r3, [r3, #8]
   2fd50:	0019      	movs	r1, r3
   2fd52:	0010      	movs	r0, r2
   2fd54:	4b0d      	ldr	r3, [pc, #52]	; (2fd8c <MQTTDisconnect+0x70>)
   2fd56:	4798      	blx	r3
   2fd58:	0003      	movs	r3, r0
   2fd5a:	61bb      	str	r3, [r7, #24]
    if (len > 0)
   2fd5c:	69bb      	ldr	r3, [r7, #24]
   2fd5e:	2b00      	cmp	r3, #0
   2fd60:	dd08      	ble.n	2fd74 <MQTTDisconnect+0x58>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   2fd62:	230c      	movs	r3, #12
   2fd64:	18fa      	adds	r2, r7, r3
   2fd66:	69b9      	ldr	r1, [r7, #24]
   2fd68:	687b      	ldr	r3, [r7, #4]
   2fd6a:	0018      	movs	r0, r3
   2fd6c:	4b08      	ldr	r3, [pc, #32]	; (2fd90 <MQTTDisconnect+0x74>)
   2fd6e:	4798      	blx	r3
   2fd70:	0003      	movs	r3, r0
   2fd72:	61fb      	str	r3, [r7, #28]
        
    c->isconnected = 0;
   2fd74:	687b      	ldr	r3, [r7, #4]
   2fd76:	2200      	movs	r2, #0
   2fd78:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2fd7a:	69fb      	ldr	r3, [r7, #28]
}
   2fd7c:	0018      	movs	r0, r3
   2fd7e:	46bd      	mov	sp, r7
   2fd80:	b008      	add	sp, #32
   2fd82:	bd80      	pop	{r7, pc}
   2fd84:	0002ff65 	.word	0x0002ff65
   2fd88:	0002feed 	.word	0x0002feed
   2fd8c:	00030b15 	.word	0x00030b15
   2fd90:	0002f0dd 	.word	0x0002f0dd

0002fd94 <isMQTTSocket>:
static uint32_t gu32MQTTRxFIFOPtr=0;
static uint32_t gu32MQTTRxFIFOLen=0;
static char *gpcHostAddr;

static bool isMQTTSocket(SOCKET sock)
{
   2fd94:	b580      	push	{r7, lr}
   2fd96:	b084      	sub	sp, #16
   2fd98:	af00      	add	r7, sp, #0
   2fd9a:	0002      	movs	r2, r0
   2fd9c:	1dfb      	adds	r3, r7, #7
   2fd9e:	701a      	strb	r2, [r3, #0]
	unsigned int cIdx;
	struct mqtt_module *mqttInstance;
	
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2fda0:	2300      	movs	r3, #0
   2fda2:	60fb      	str	r3, [r7, #12]
   2fda4:	e01c      	b.n	2fde0 <isMQTTSocket+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   2fda6:	4a12      	ldr	r2, [pc, #72]	; (2fdf0 <isMQTTSocket+0x5c>)
   2fda8:	68fb      	ldr	r3, [r7, #12]
   2fdaa:	2164      	movs	r1, #100	; 0x64
   2fdac:	434b      	muls	r3, r1
   2fdae:	18d3      	adds	r3, r2, r3
   2fdb0:	3360      	adds	r3, #96	; 0x60
   2fdb2:	681b      	ldr	r3, [r3, #0]
   2fdb4:	2b00      	cmp	r3, #0
   2fdb6:	d010      	beq.n	2fdda <isMQTTSocket+0x46>
		{
			mqttInstance = mqttClientPool[cIdx].mqtt_instance;
   2fdb8:	4a0d      	ldr	r2, [pc, #52]	; (2fdf0 <isMQTTSocket+0x5c>)
   2fdba:	68fb      	ldr	r3, [r7, #12]
   2fdbc:	2164      	movs	r1, #100	; 0x64
   2fdbe:	434b      	muls	r3, r1
   2fdc0:	18d3      	adds	r3, r2, r3
   2fdc2:	3360      	adds	r3, #96	; 0x60
   2fdc4:	681b      	ldr	r3, [r3, #0]
   2fdc6:	60bb      	str	r3, [r7, #8]
			if(mqttInstance->network.socket == sock)
   2fdc8:	68bb      	ldr	r3, [r7, #8]
   2fdca:	6a1a      	ldr	r2, [r3, #32]
   2fdcc:	1dfb      	adds	r3, r7, #7
   2fdce:	781b      	ldrb	r3, [r3, #0]
   2fdd0:	b25b      	sxtb	r3, r3
   2fdd2:	429a      	cmp	r2, r3
   2fdd4:	d101      	bne.n	2fdda <isMQTTSocket+0x46>
				return true;
   2fdd6:	2301      	movs	r3, #1
   2fdd8:	e006      	b.n	2fde8 <isMQTTSocket+0x54>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2fdda:	68fb      	ldr	r3, [r7, #12]
   2fddc:	3301      	adds	r3, #1
   2fdde:	60fb      	str	r3, [r7, #12]
   2fde0:	68fb      	ldr	r3, [r7, #12]
   2fde2:	2b06      	cmp	r3, #6
   2fde4:	d9df      	bls.n	2fda6 <isMQTTSocket+0x12>
		}
	}
	return false;
   2fde6:	2300      	movs	r3, #0
}
   2fde8:	0018      	movs	r0, r3
   2fdea:	46bd      	mov	sp, r7
   2fdec:	b004      	add	sp, #16
   2fdee:	bd80      	pop	{r7, pc}
   2fdf0:	20004434 	.word	0x20004434

0002fdf4 <dnsResolveCallback>:

void dnsResolveCallback(uint8_t *hostName, uint32_t hostIp)
{
   2fdf4:	b580      	push	{r7, lr}
   2fdf6:	b082      	sub	sp, #8
   2fdf8:	af00      	add	r7, sp, #0
   2fdfa:	6078      	str	r0, [r7, #4]
   2fdfc:	6039      	str	r1, [r7, #0]
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   2fdfe:	4b0d      	ldr	r3, [pc, #52]	; (2fe34 <dnsResolveCallback+0x40>)
   2fe00:	781b      	ldrb	r3, [r3, #0]
   2fe02:	2201      	movs	r2, #1
   2fe04:	4053      	eors	r3, r2
   2fe06:	b2db      	uxtb	r3, r3
   2fe08:	2b00      	cmp	r3, #0
   2fe0a:	d00e      	beq.n	2fe2a <dnsResolveCallback+0x36>
   2fe0c:	4b0a      	ldr	r3, [pc, #40]	; (2fe38 <dnsResolveCallback+0x44>)
   2fe0e:	681b      	ldr	r3, [r3, #0]
   2fe10:	687a      	ldr	r2, [r7, #4]
   2fe12:	0011      	movs	r1, r2
   2fe14:	0018      	movs	r0, r3
   2fe16:	4b09      	ldr	r3, [pc, #36]	; (2fe3c <dnsResolveCallback+0x48>)
   2fe18:	4798      	blx	r3
   2fe1a:	1e03      	subs	r3, r0, #0
   2fe1c:	d105      	bne.n	2fe2a <dnsResolveCallback+0x36>
	{
		gi32MQTTBrokerIp = hostIp;
   2fe1e:	683a      	ldr	r2, [r7, #0]
   2fe20:	4b07      	ldr	r3, [pc, #28]	; (2fe40 <dnsResolveCallback+0x4c>)
   2fe22:	601a      	str	r2, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   2fe24:	4b03      	ldr	r3, [pc, #12]	; (2fe34 <dnsResolveCallback+0x40>)
   2fe26:	2201      	movs	r2, #1
   2fe28:	701a      	strb	r2, [r3, #0]
		#ifdef MQTT_PLATFORM_DBG
		printf("INFO >> Host IP of %s is %d.%d.%d.%d\r\n", hostName, (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
		(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
		#endif
	}
}
   2fe2a:	46c0      	nop			; (mov r8, r8)
   2fe2c:	46bd      	mov	sp, r7
   2fe2e:	b002      	add	sp, #8
   2fe30:	bd80      	pop	{r7, pc}
   2fe32:	46c0      	nop			; (mov r8, r8)
   2fe34:	20004324 	.word	0x20004324
   2fe38:	20004430 	.word	0x20004430
   2fe3c:	00035947 	.word	0x00035947
   2fe40:	2000431c 	.word	0x2000431c

0002fe44 <tcpClientSocketEventHandler>:

void tcpClientSocketEventHandler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   2fe44:	b580      	push	{r7, lr}
   2fe46:	b084      	sub	sp, #16
   2fe48:	af00      	add	r7, sp, #0
   2fe4a:	603a      	str	r2, [r7, #0]
   2fe4c:	1dfb      	adds	r3, r7, #7
   2fe4e:	1c02      	adds	r2, r0, #0
   2fe50:	701a      	strb	r2, [r3, #0]
   2fe52:	1dbb      	adds	r3, r7, #6
   2fe54:	1c0a      	adds	r2, r1, #0
   2fe56:	701a      	strb	r2, [r3, #0]
	if(isMQTTSocket(sock)) { 
   2fe58:	1dfb      	adds	r3, r7, #7
   2fe5a:	781b      	ldrb	r3, [r3, #0]
   2fe5c:	b25b      	sxtb	r3, r3
   2fe5e:	0018      	movs	r0, r3
   2fe60:	4b12      	ldr	r3, [pc, #72]	; (2feac <tcpClientSocketEventHandler+0x68>)
   2fe62:	4798      	blx	r3
   2fe64:	1e03      	subs	r3, r0, #0
   2fe66:	d01c      	beq.n	2fea2 <tcpClientSocketEventHandler+0x5e>
		switch (u8Msg) {
   2fe68:	1dbb      	adds	r3, r7, #6
   2fe6a:	781b      	ldrb	r3, [r3, #0]
   2fe6c:	2b06      	cmp	r3, #6
   2fe6e:	d00c      	beq.n	2fe8a <tcpClientSocketEventHandler+0x46>
   2fe70:	2b07      	cmp	r3, #7
   2fe72:	d006      	beq.n	2fe82 <tcpClientSocketEventHandler+0x3e>
   2fe74:	2b05      	cmp	r3, #5
   2fe76:	d000      	beq.n	2fe7a <tcpClientSocketEventHandler+0x36>
				printf("DEBUG >> Remaining data in Rx buffer of broker socket: %d\r\n",pstrRx->u16RemainingSize);
				#endif
				gbMQTTBrokerRecvDone=true;
			}
			break;
			default: break;
   2fe78:	e013      	b.n	2fea2 <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerConnected=true;
   2fe7a:	4b0d      	ldr	r3, [pc, #52]	; (2feb0 <tcpClientSocketEventHandler+0x6c>)
   2fe7c:	2201      	movs	r2, #1
   2fe7e:	701a      	strb	r2, [r3, #0]
			break;
   2fe80:	e00f      	b.n	2fea2 <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerSendDone=true;
   2fe82:	4b0c      	ldr	r3, [pc, #48]	; (2feb4 <tcpClientSocketEventHandler+0x70>)
   2fe84:	2201      	movs	r2, #1
   2fe86:	701a      	strb	r2, [r3, #0]
			break;
   2fe88:	e00b      	b.n	2fea2 <tcpClientSocketEventHandler+0x5e>
				tstrSocketRecvMsg* pstrRx = (tstrSocketRecvMsg*)pvMsg;
   2fe8a:	683b      	ldr	r3, [r7, #0]
   2fe8c:	60fb      	str	r3, [r7, #12]
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   2fe8e:	68fb      	ldr	r3, [r7, #12]
   2fe90:	2204      	movs	r2, #4
   2fe92:	5e9b      	ldrsh	r3, [r3, r2]
   2fe94:	001a      	movs	r2, r3
   2fe96:	4b08      	ldr	r3, [pc, #32]	; (2feb8 <tcpClientSocketEventHandler+0x74>)
   2fe98:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   2fe9a:	4b08      	ldr	r3, [pc, #32]	; (2febc <tcpClientSocketEventHandler+0x78>)
   2fe9c:	2201      	movs	r2, #1
   2fe9e:	701a      	strb	r2, [r3, #0]
			break;
   2fea0:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   2fea2:	46c0      	nop			; (mov r8, r8)
   2fea4:	46bd      	mov	sp, r7
   2fea6:	b004      	add	sp, #16
   2fea8:	bd80      	pop	{r7, pc}
   2feaa:	46c0      	nop			; (mov r8, r8)
   2feac:	0002fd95 	.word	0x0002fd95
   2feb0:	20004325 	.word	0x20004325
   2feb4:	20004326 	.word	0x20004326
   2feb8:	20004320 	.word	0x20004320
   2febc:	20004327 	.word	0x20004327

0002fec0 <TimerIsExpired>:

void SysTick_Handler_MQTT(void){
	MilliTimer++;
}

char TimerIsExpired(Timer* timer) {
   2fec0:	b580      	push	{r7, lr}
   2fec2:	b082      	sub	sp, #8
   2fec4:	af00      	add	r7, sp, #0
   2fec6:	6078      	str	r0, [r7, #4]
	return xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait) == pdTRUE;
   2fec8:	687b      	ldr	r3, [r7, #4]
   2feca:	3304      	adds	r3, #4
   2fecc:	687a      	ldr	r2, [r7, #4]
   2fece:	0011      	movs	r1, r2
   2fed0:	0018      	movs	r0, r3
   2fed2:	4b05      	ldr	r3, [pc, #20]	; (2fee8 <TimerIsExpired+0x28>)
   2fed4:	4798      	blx	r3
   2fed6:	0003      	movs	r3, r0
   2fed8:	3b01      	subs	r3, #1
   2feda:	425a      	negs	r2, r3
   2fedc:	4153      	adcs	r3, r2
   2fede:	b2db      	uxtb	r3, r3
}
   2fee0:	0018      	movs	r0, r3
   2fee2:	46bd      	mov	sp, r7
   2fee4:	b002      	add	sp, #8
   2fee6:	bd80      	pop	{r7, pc}
   2fee8:	0001d831 	.word	0x0001d831

0002feec <TimerCountdownMS>:


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms) {
   2feec:	b580      	push	{r7, lr}
   2feee:	b082      	sub	sp, #8
   2fef0:	af00      	add	r7, sp, #0
   2fef2:	6078      	str	r0, [r7, #4]
   2fef4:	6039      	str	r1, [r7, #0]
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   2fef6:	687b      	ldr	r3, [r7, #4]
   2fef8:	683a      	ldr	r2, [r7, #0]
   2fefa:	601a      	str	r2, [r3, #0]
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   2fefc:	687b      	ldr	r3, [r7, #4]
   2fefe:	3304      	adds	r3, #4
   2ff00:	0018      	movs	r0, r3
   2ff02:	4b03      	ldr	r3, [pc, #12]	; (2ff10 <TimerCountdownMS+0x24>)
   2ff04:	4798      	blx	r3
}
   2ff06:	46c0      	nop			; (mov r8, r8)
   2ff08:	46bd      	mov	sp, r7
   2ff0a:	b002      	add	sp, #8
   2ff0c:	bd80      	pop	{r7, pc}
   2ff0e:	46c0      	nop			; (mov r8, r8)
   2ff10:	0001d7c5 	.word	0x0001d7c5

0002ff14 <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout) {
   2ff14:	b580      	push	{r7, lr}
   2ff16:	b082      	sub	sp, #8
   2ff18:	af00      	add	r7, sp, #0
   2ff1a:	6078      	str	r0, [r7, #4]
   2ff1c:	6039      	str	r1, [r7, #0]
	TimerCountdownMS(timer, timeout * 1000);
   2ff1e:	683b      	ldr	r3, [r7, #0]
   2ff20:	22fa      	movs	r2, #250	; 0xfa
   2ff22:	0092      	lsls	r2, r2, #2
   2ff24:	435a      	muls	r2, r3
   2ff26:	687b      	ldr	r3, [r7, #4]
   2ff28:	0011      	movs	r1, r2
   2ff2a:	0018      	movs	r0, r3
   2ff2c:	4b02      	ldr	r3, [pc, #8]	; (2ff38 <TimerCountdown+0x24>)
   2ff2e:	4798      	blx	r3
}
   2ff30:	46c0      	nop			; (mov r8, r8)
   2ff32:	46bd      	mov	sp, r7
   2ff34:	b002      	add	sp, #8
   2ff36:	bd80      	pop	{r7, pc}
   2ff38:	0002feed 	.word	0x0002feed

0002ff3c <TimerLeftMS>:


int TimerLeftMS(Timer* timer) {
   2ff3c:	b580      	push	{r7, lr}
   2ff3e:	b082      	sub	sp, #8
   2ff40:	af00      	add	r7, sp, #0
   2ff42:	6078      	str	r0, [r7, #4]
	xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait); /* updates xTicksToWait to the number left */
   2ff44:	687b      	ldr	r3, [r7, #4]
   2ff46:	3304      	adds	r3, #4
   2ff48:	687a      	ldr	r2, [r7, #4]
   2ff4a:	0011      	movs	r1, r2
   2ff4c:	0018      	movs	r0, r3
   2ff4e:	4b04      	ldr	r3, [pc, #16]	; (2ff60 <TimerLeftMS+0x24>)
   2ff50:	4798      	blx	r3
	return (timer->xTicksToWait < 0) ? 0 : (timer->xTicksToWait * portTICK_PERIOD_MS);
   2ff52:	687b      	ldr	r3, [r7, #4]
   2ff54:	681b      	ldr	r3, [r3, #0]
}
   2ff56:	0018      	movs	r0, r3
   2ff58:	46bd      	mov	sp, r7
   2ff5a:	b002      	add	sp, #8
   2ff5c:	bd80      	pop	{r7, pc}
   2ff5e:	46c0      	nop			; (mov r8, r8)
   2ff60:	0001d831 	.word	0x0001d831

0002ff64 <TimerInit>:


void TimerInit(Timer* timer) {
   2ff64:	b580      	push	{r7, lr}
   2ff66:	b082      	sub	sp, #8
   2ff68:	af00      	add	r7, sp, #0
   2ff6a:	6078      	str	r0, [r7, #4]
	timer->xTicksToWait = 0;
   2ff6c:	687b      	ldr	r3, [r7, #4]
   2ff6e:	2200      	movs	r2, #0
   2ff70:	601a      	str	r2, [r3, #0]
	memset(&timer->xTimeOut, '\0', sizeof(timer->xTimeOut));
   2ff72:	687b      	ldr	r3, [r7, #4]
   2ff74:	3304      	adds	r3, #4
   2ff76:	2208      	movs	r2, #8
   2ff78:	2100      	movs	r1, #0
   2ff7a:	0018      	movs	r0, r3
   2ff7c:	4b02      	ldr	r3, [pc, #8]	; (2ff88 <TimerInit+0x24>)
   2ff7e:	4798      	blx	r3
}
   2ff80:	46c0      	nop			; (mov r8, r8)
   2ff82:	46bd      	mov	sp, r7
   2ff84:	b002      	add	sp, #8
   2ff86:	bd80      	pop	{r7, pc}
   2ff88:	000355ef 	.word	0x000355ef

0002ff8c <WINC1500_read>:

static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   2ff8c:	b590      	push	{r4, r7, lr}
   2ff8e:	b085      	sub	sp, #20
   2ff90:	af00      	add	r7, sp, #0
   2ff92:	60f8      	str	r0, [r7, #12]
   2ff94:	60b9      	str	r1, [r7, #8]
   2ff96:	607a      	str	r2, [r7, #4]
   2ff98:	603b      	str	r3, [r7, #0]
  //at times the upper layer requests for single byte of data, but network has more in rx buffer.
  //this results in callback being invoked multiple times with length 1 before returning. To prevent loss of
  //data in this process, pool data internally and give it to upper layer on request. 
  
  //temporary workaround for timer overrun 
  if(0==timeout_ms) timeout_ms=10;
   2ff9a:	683b      	ldr	r3, [r7, #0]
   2ff9c:	2b00      	cmp	r3, #0
   2ff9e:	d101      	bne.n	2ffa4 <WINC1500_read+0x18>
   2ffa0:	230a      	movs	r3, #10
   2ffa2:	603b      	str	r3, [r7, #0]
  
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   2ffa4:	4b2c      	ldr	r3, [pc, #176]	; (30058 <WINC1500_read+0xcc>)
   2ffa6:	681b      	ldr	r3, [r3, #0]
   2ffa8:	2b00      	cmp	r3, #0
   2ffaa:	d131      	bne.n	30010 <WINC1500_read+0x84>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("DEBUG >> Requesting data from network\r\n");
	  #endif
	  gbMQTTBrokerRecvDone=false;
   2ffac:	4b2b      	ldr	r3, [pc, #172]	; (3005c <WINC1500_read+0xd0>)
   2ffae:	2200      	movs	r2, #0
   2ffb0:	701a      	strb	r2, [r3, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   2ffb2:	68fb      	ldr	r3, [r7, #12]
   2ffb4:	681b      	ldr	r3, [r3, #0]
   2ffb6:	b258      	sxtb	r0, r3
   2ffb8:	683c      	ldr	r4, [r7, #0]
   2ffba:	2380      	movs	r3, #128	; 0x80
   2ffbc:	005a      	lsls	r2, r3, #1
   2ffbe:	4928      	ldr	r1, [pc, #160]	; (30060 <WINC1500_read+0xd4>)
   2ffc0:	0023      	movs	r3, r4
   2ffc2:	4c28      	ldr	r4, [pc, #160]	; (30064 <WINC1500_read+0xd8>)
   2ffc4:	47a0      	blx	r4
   2ffc6:	1e03      	subs	r3, r0, #0
   2ffc8:	d005      	beq.n	2ffd6 <WINC1500_read+0x4a>
		  #ifdef MQTT_PLATFORM_DBG
		  printf("ERROR >> recv failed\r\n");
		  #endif
		  return -1;
   2ffca:	2301      	movs	r3, #1
   2ffcc:	425b      	negs	r3, r3
   2ffce:	e03e      	b.n	3004e <WINC1500_read+0xc2>
	  }
	  //call handle_events until we get rx callback 
	  while (false==gbMQTTBrokerRecvDone){
		  m2m_wifi_handle_events(NULL);
   2ffd0:	2000      	movs	r0, #0
   2ffd2:	4b25      	ldr	r3, [pc, #148]	; (30068 <WINC1500_read+0xdc>)
   2ffd4:	4798      	blx	r3
	  while (false==gbMQTTBrokerRecvDone){
   2ffd6:	4b21      	ldr	r3, [pc, #132]	; (3005c <WINC1500_read+0xd0>)
   2ffd8:	781b      	ldrb	r3, [r3, #0]
   2ffda:	2201      	movs	r2, #1
   2ffdc:	4053      	eors	r3, r2
   2ffde:	b2db      	uxtb	r3, r3
   2ffe0:	2b00      	cmp	r3, #0
   2ffe2:	d1f5      	bne.n	2ffd0 <WINC1500_read+0x44>
	  }
	  
	  //update current FIFO length
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   2ffe4:	4b21      	ldr	r3, [pc, #132]	; (3006c <WINC1500_read+0xe0>)
   2ffe6:	681b      	ldr	r3, [r3, #0]
   2ffe8:	2b00      	cmp	r3, #0
   2ffea:	dd08      	ble.n	2fffe <WINC1500_read+0x72>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   2ffec:	4b1f      	ldr	r3, [pc, #124]	; (3006c <WINC1500_read+0xe0>)
   2ffee:	681b      	ldr	r3, [r3, #0]
   2fff0:	001a      	movs	r2, r3
   2fff2:	4b19      	ldr	r3, [pc, #100]	; (30058 <WINC1500_read+0xcc>)
   2fff4:	601a      	str	r2, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   2fff6:	4b1e      	ldr	r3, [pc, #120]	; (30070 <WINC1500_read+0xe4>)
   2fff8:	2200      	movs	r2, #0
   2fffa:	601a      	str	r2, [r3, #0]
   2fffc:	e008      	b.n	30010 <WINC1500_read+0x84>
    	printf("0x%x, ",gcMQTTRxFIFO[i]);
    	printf("\r\n");
	  #endif
	  }
	  else{//mostly in case of timeout
		  gu32MQTTRxFIFOLen=0;
   2fffe:	4b16      	ldr	r3, [pc, #88]	; (30058 <WINC1500_read+0xcc>)
   30000:	2200      	movs	r2, #0
   30002:	601a      	str	r2, [r3, #0]
		  gu32MQTTRxFIFOPtr=0;
   30004:	4b1a      	ldr	r3, [pc, #104]	; (30070 <WINC1500_read+0xe4>)
   30006:	2200      	movs	r2, #0
   30008:	601a      	str	r2, [r3, #0]
		  #ifdef MQTT_PLATFORM_DBG
		  printf("DEBUG >> no data to send. returning error code (%d)\r\n",gi32MQTTBrokerRxLen);
		  #endif
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   3000a:	4b18      	ldr	r3, [pc, #96]	; (3006c <WINC1500_read+0xe0>)
   3000c:	681b      	ldr	r3, [r3, #0]
   3000e:	e01e      	b.n	3004e <WINC1500_read+0xc2>
	  }
  }
  //return data to client from data present in the FIFO from previous recv()
  if(len>(int)gu32MQTTRxFIFOLen){
   30010:	4b11      	ldr	r3, [pc, #68]	; (30058 <WINC1500_read+0xcc>)
   30012:	681b      	ldr	r3, [r3, #0]
   30014:	001a      	movs	r2, r3
   30016:	687b      	ldr	r3, [r7, #4]
   30018:	4293      	cmp	r3, r2
   3001a:	dd02      	ble.n	30022 <WINC1500_read+0x96>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> unable to process read request since FIFO contains less data than requested\r\n");
	  #endif
	  return -1;
   3001c:	2301      	movs	r3, #1
   3001e:	425b      	negs	r3, r3
   30020:	e015      	b.n	3004e <WINC1500_read+0xc2>
  }
 
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   30022:	4b13      	ldr	r3, [pc, #76]	; (30070 <WINC1500_read+0xe4>)
   30024:	681a      	ldr	r2, [r3, #0]
   30026:	4b0e      	ldr	r3, [pc, #56]	; (30060 <WINC1500_read+0xd4>)
   30028:	18d1      	adds	r1, r2, r3
   3002a:	687a      	ldr	r2, [r7, #4]
   3002c:	68bb      	ldr	r3, [r7, #8]
   3002e:	0018      	movs	r0, r3
   30030:	4b10      	ldr	r3, [pc, #64]	; (30074 <WINC1500_read+0xe8>)
   30032:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   30034:	4b08      	ldr	r3, [pc, #32]	; (30058 <WINC1500_read+0xcc>)
   30036:	681a      	ldr	r2, [r3, #0]
   30038:	687b      	ldr	r3, [r7, #4]
   3003a:	1ad2      	subs	r2, r2, r3
   3003c:	4b06      	ldr	r3, [pc, #24]	; (30058 <WINC1500_read+0xcc>)
   3003e:	601a      	str	r2, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   30040:	4b0b      	ldr	r3, [pc, #44]	; (30070 <WINC1500_read+0xe4>)
   30042:	681a      	ldr	r2, [r3, #0]
   30044:	687b      	ldr	r3, [r7, #4]
   30046:	18d2      	adds	r2, r2, r3
   30048:	4b09      	ldr	r3, [pc, #36]	; (30070 <WINC1500_read+0xe4>)
   3004a:	601a      	str	r2, [r3, #0]
  
  return len;
   3004c:	687b      	ldr	r3, [r7, #4]
}
   3004e:	0018      	movs	r0, r3
   30050:	46bd      	mov	sp, r7
   30052:	b005      	add	sp, #20
   30054:	bd90      	pop	{r4, r7, pc}
   30056:	46c0      	nop			; (mov r8, r8)
   30058:	2000442c 	.word	0x2000442c
   3005c:	20004327 	.word	0x20004327
   30060:	20004328 	.word	0x20004328
   30064:	00026641 	.word	0x00026641
   30068:	00022b89 	.word	0x00022b89
   3006c:	20004320 	.word	0x20004320
   30070:	20004428 	.word	0x20004428
   30074:	000355b9 	.word	0x000355b9

00030078 <WINC1500_write>:


static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   30078:	b590      	push	{r4, r7, lr}
   3007a:	b085      	sub	sp, #20
   3007c:	af00      	add	r7, sp, #0
   3007e:	60f8      	str	r0, [r7, #12]
   30080:	60b9      	str	r1, [r7, #8]
   30082:	607a      	str	r2, [r7, #4]
   30084:	603b      	str	r3, [r7, #0]
  gbMQTTBrokerSendDone=false;
   30086:	4b10      	ldr	r3, [pc, #64]	; (300c8 <WINC1500_write+0x50>)
   30088:	2200      	movs	r2, #0
   3008a:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   3008c:	68fb      	ldr	r3, [r7, #12]
   3008e:	681b      	ldr	r3, [r3, #0]
   30090:	b258      	sxtb	r0, r3
   30092:	687b      	ldr	r3, [r7, #4]
   30094:	b29a      	uxth	r2, r3
   30096:	68b9      	ldr	r1, [r7, #8]
   30098:	2300      	movs	r3, #0
   3009a:	4c0c      	ldr	r4, [pc, #48]	; (300cc <WINC1500_write+0x54>)
   3009c:	47a0      	blx	r4
   3009e:	1e03      	subs	r3, r0, #0
   300a0:	d005      	beq.n	300ae <WINC1500_write+0x36>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> send error");
	  #endif
	  return -1;
   300a2:	2301      	movs	r3, #1
   300a4:	425b      	negs	r3, r3
   300a6:	e00a      	b.n	300be <WINC1500_write+0x46>
  }
  //wait for send callback
  while (false==gbMQTTBrokerSendDone){
	  m2m_wifi_handle_events(NULL);
   300a8:	2000      	movs	r0, #0
   300aa:	4b09      	ldr	r3, [pc, #36]	; (300d0 <WINC1500_write+0x58>)
   300ac:	4798      	blx	r3
  while (false==gbMQTTBrokerSendDone){
   300ae:	4b06      	ldr	r3, [pc, #24]	; (300c8 <WINC1500_write+0x50>)
   300b0:	781b      	ldrb	r3, [r3, #0]
   300b2:	2201      	movs	r2, #1
   300b4:	4053      	eors	r3, r2
   300b6:	b2db      	uxtb	r3, r3
   300b8:	2b00      	cmp	r3, #0
   300ba:	d1f5      	bne.n	300a8 <WINC1500_write+0x30>
  #endif

  //TODO: figure out how to get actual send length from callback
  //this length will be updated in the callback
  //return gu32MQTTBrokerSendLen;
  return len;
   300bc:	687b      	ldr	r3, [r7, #4]
}
   300be:	0018      	movs	r0, r3
   300c0:	46bd      	mov	sp, r7
   300c2:	b005      	add	sp, #20
   300c4:	bd90      	pop	{r4, r7, pc}
   300c6:	46c0      	nop			; (mov r8, r8)
   300c8:	20004326 	.word	0x20004326
   300cc:	000264dd 	.word	0x000264dd
   300d0:	00022b89 	.word	0x00022b89

000300d4 <WINC1500_disconnect>:


static void WINC1500_disconnect(Network* n) {
   300d4:	b580      	push	{r7, lr}
   300d6:	b082      	sub	sp, #8
   300d8:	af00      	add	r7, sp, #0
   300da:	6078      	str	r0, [r7, #4]
	close(n->socket);
   300dc:	687b      	ldr	r3, [r7, #4]
   300de:	681b      	ldr	r3, [r3, #0]
   300e0:	b25b      	sxtb	r3, r3
   300e2:	0018      	movs	r0, r3
   300e4:	4b06      	ldr	r3, [pc, #24]	; (30100 <WINC1500_disconnect+0x2c>)
   300e6:	4798      	blx	r3
	n->socket=-1;
   300e8:	687b      	ldr	r3, [r7, #4]
   300ea:	2201      	movs	r2, #1
   300ec:	4252      	negs	r2, r2
   300ee:	601a      	str	r2, [r3, #0]
	gbMQTTBrokerConnected=false;
   300f0:	4b04      	ldr	r3, [pc, #16]	; (30104 <WINC1500_disconnect+0x30>)
   300f2:	2200      	movs	r2, #0
   300f4:	701a      	strb	r2, [r3, #0]
}
   300f6:	46c0      	nop			; (mov r8, r8)
   300f8:	46bd      	mov	sp, r7
   300fa:	b002      	add	sp, #8
   300fc:	bd80      	pop	{r7, pc}
   300fe:	46c0      	nop			; (mov r8, r8)
   30100:	000267c1 	.word	0x000267c1
   30104:	20004325 	.word	0x20004325

00030108 <NetworkInit>:


void NetworkInit(Network* n) {
   30108:	b580      	push	{r7, lr}
   3010a:	b082      	sub	sp, #8
   3010c:	af00      	add	r7, sp, #0
   3010e:	6078      	str	r0, [r7, #4]
	n->socket = -1;
   30110:	687b      	ldr	r3, [r7, #4]
   30112:	2201      	movs	r2, #1
   30114:	4252      	negs	r2, r2
   30116:	601a      	str	r2, [r3, #0]
	n->mqttread = WINC1500_read;
   30118:	687b      	ldr	r3, [r7, #4]
   3011a:	4a06      	ldr	r2, [pc, #24]	; (30134 <NetworkInit+0x2c>)
   3011c:	609a      	str	r2, [r3, #8]
	n->mqttwrite = WINC1500_write;
   3011e:	687b      	ldr	r3, [r7, #4]
   30120:	4a05      	ldr	r2, [pc, #20]	; (30138 <NetworkInit+0x30>)
   30122:	60da      	str	r2, [r3, #12]
	n->disconnect = WINC1500_disconnect;
   30124:	687b      	ldr	r3, [r7, #4]
   30126:	4a05      	ldr	r2, [pc, #20]	; (3013c <NetworkInit+0x34>)
   30128:	611a      	str	r2, [r3, #16]
}
   3012a:	46c0      	nop			; (mov r8, r8)
   3012c:	46bd      	mov	sp, r7
   3012e:	b002      	add	sp, #8
   30130:	bd80      	pop	{r7, pc}
   30132:	46c0      	nop			; (mov r8, r8)
   30134:	0002ff8d 	.word	0x0002ff8d
   30138:	00030079 	.word	0x00030079
   3013c:	000300d5 	.word	0x000300d5

00030140 <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   30140:	b580      	push	{r7, lr}
   30142:	b088      	sub	sp, #32
   30144:	af00      	add	r7, sp, #0
   30146:	60f8      	str	r0, [r7, #12]
   30148:	60b9      	str	r1, [r7, #8]
   3014a:	607a      	str	r2, [r7, #4]
   3014c:	603b      	str	r3, [r7, #0]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   3014e:	4b37      	ldr	r3, [pc, #220]	; (3022c <ConnectNetwork+0xec>)
   30150:	2200      	movs	r2, #0
   30152:	701a      	strb	r2, [r3, #0]
  gpcHostAddr = addr;
   30154:	4b36      	ldr	r3, [pc, #216]	; (30230 <ConnectNetwork+0xf0>)
   30156:	68ba      	ldr	r2, [r7, #8]
   30158:	601a      	str	r2, [r3, #0]
  gethostbyname((uint8*)addr);
   3015a:	68bb      	ldr	r3, [r7, #8]
   3015c:	0018      	movs	r0, r3
   3015e:	4b35      	ldr	r3, [pc, #212]	; (30234 <ConnectNetwork+0xf4>)
   30160:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   30162:	e002      	b.n	3016a <ConnectNetwork+0x2a>
	  m2m_wifi_handle_events(NULL);
   30164:	2000      	movs	r0, #0
   30166:	4b34      	ldr	r3, [pc, #208]	; (30238 <ConnectNetwork+0xf8>)
   30168:	4798      	blx	r3
  while (false==gbMQTTBrokerIpresolved){
   3016a:	4b30      	ldr	r3, [pc, #192]	; (3022c <ConnectNetwork+0xec>)
   3016c:	781b      	ldrb	r3, [r3, #0]
   3016e:	2201      	movs	r2, #1
   30170:	4053      	eors	r3, r2
   30172:	b2db      	uxtb	r3, r3
   30174:	2b00      	cmp	r3, #0
   30176:	d1f5      	bne.n	30164 <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   30178:	4b30      	ldr	r3, [pc, #192]	; (3023c <ConnectNetwork+0xfc>)
   3017a:	681a      	ldr	r2, [r3, #0]
   3017c:	68fb      	ldr	r3, [r7, #12]
   3017e:	605a      	str	r2, [r3, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   30180:	2310      	movs	r3, #16
   30182:	18fb      	adds	r3, r7, r3
   30184:	2202      	movs	r2, #2
   30186:	801a      	strh	r2, [r3, #0]
  addr_in.sin_port = _htons(port);
   30188:	687b      	ldr	r3, [r7, #4]
   3018a:	b29b      	uxth	r3, r3
   3018c:	021b      	lsls	r3, r3, #8
   3018e:	b21a      	sxth	r2, r3
   30190:	687b      	ldr	r3, [r7, #4]
   30192:	b29b      	uxth	r3, r3
   30194:	0a1b      	lsrs	r3, r3, #8
   30196:	b29b      	uxth	r3, r3
   30198:	b21b      	sxth	r3, r3
   3019a:	4313      	orrs	r3, r2
   3019c:	b21b      	sxth	r3, r3
   3019e:	b29a      	uxth	r2, r3
   301a0:	2310      	movs	r3, #16
   301a2:	18fb      	adds	r3, r7, r3
   301a4:	805a      	strh	r2, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   301a6:	4b25      	ldr	r3, [pc, #148]	; (3023c <ConnectNetwork+0xfc>)
   301a8:	681b      	ldr	r3, [r3, #0]
   301aa:	001a      	movs	r2, r3
   301ac:	2310      	movs	r3, #16
   301ae:	18fb      	adds	r3, r7, r3
   301b0:	605a      	str	r2, [r3, #4]

  /* Create secure socket */ 
  if(n->socket < 0)
   301b2:	68fb      	ldr	r3, [r7, #12]
   301b4:	681b      	ldr	r3, [r3, #0]
   301b6:	2b00      	cmp	r3, #0
   301b8:	da0a      	bge.n	301d0 <ConnectNetwork+0x90>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   301ba:	683b      	ldr	r3, [r7, #0]
   301bc:	b2db      	uxtb	r3, r3
   301be:	001a      	movs	r2, r3
   301c0:	2101      	movs	r1, #1
   301c2:	2002      	movs	r0, #2
   301c4:	4b1e      	ldr	r3, [pc, #120]	; (30240 <ConnectNetwork+0x100>)
   301c6:	4798      	blx	r3
   301c8:	0003      	movs	r3, r0
   301ca:	001a      	movs	r2, r3
   301cc:	68fb      	ldr	r3, [r7, #12]
   301ce:	601a      	str	r2, [r3, #0]
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   301d0:	68fb      	ldr	r3, [r7, #12]
   301d2:	681b      	ldr	r3, [r3, #0]
   301d4:	3301      	adds	r3, #1
   301d6:	d108      	bne.n	301ea <ConnectNetwork+0xaa>
   #ifdef MQTT_PLATFORM_DBG
   printf("ERROR >> socket error.\r\n");
   #endif
   close(n->socket);
   301d8:	68fb      	ldr	r3, [r7, #12]
   301da:	681b      	ldr	r3, [r3, #0]
   301dc:	b25b      	sxtb	r3, r3
   301de:	0018      	movs	r0, r3
   301e0:	4b18      	ldr	r3, [pc, #96]	; (30244 <ConnectNetwork+0x104>)
   301e2:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   301e4:	2309      	movs	r3, #9
   301e6:	425b      	negs	r3, r3
   301e8:	e01c      	b.n	30224 <ConnectNetwork+0xe4>
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   301ea:	68fb      	ldr	r3, [r7, #12]
   301ec:	681b      	ldr	r3, [r3, #0]
   301ee:	b25b      	sxtb	r3, r3
   301f0:	2210      	movs	r2, #16
   301f2:	18b9      	adds	r1, r7, r2
   301f4:	2210      	movs	r2, #16
   301f6:	0018      	movs	r0, r3
   301f8:	4b13      	ldr	r3, [pc, #76]	; (30248 <ConnectNetwork+0x108>)
   301fa:	4798      	blx	r3
   301fc:	1e03      	subs	r3, r0, #0
   301fe:	d002      	beq.n	30206 <ConnectNetwork+0xc6>
   #ifdef MQTT_PLATFORM_DBG  
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
   30200:	2309      	movs	r3, #9
   30202:	425b      	negs	r3, r3
   30204:	e00e      	b.n	30224 <ConnectNetwork+0xe4>
  }
  
  gbMQTTBrokerConnected = false;
   30206:	4b11      	ldr	r3, [pc, #68]	; (3024c <ConnectNetwork+0x10c>)
   30208:	2200      	movs	r2, #0
   3020a:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
   3020c:	e002      	b.n	30214 <ConnectNetwork+0xd4>
    m2m_wifi_handle_events(NULL);
   3020e:	2000      	movs	r0, #0
   30210:	4b09      	ldr	r3, [pc, #36]	; (30238 <ConnectNetwork+0xf8>)
   30212:	4798      	blx	r3
  while(false==gbMQTTBrokerConnected){
   30214:	4b0d      	ldr	r3, [pc, #52]	; (3024c <ConnectNetwork+0x10c>)
   30216:	781b      	ldrb	r3, [r3, #0]
   30218:	2201      	movs	r2, #1
   3021a:	4053      	eors	r3, r2
   3021c:	b2db      	uxtb	r3, r3
   3021e:	2b00      	cmp	r3, #0
   30220:	d1f5      	bne.n	3020e <ConnectNetwork+0xce>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   30222:	2300      	movs	r3, #0
   30224:	0018      	movs	r0, r3
   30226:	46bd      	mov	sp, r7
   30228:	b008      	add	sp, #32
   3022a:	bd80      	pop	{r7, pc}
   3022c:	20004324 	.word	0x20004324
   30230:	20004430 	.word	0x20004430
   30234:	00026a09 	.word	0x00026a09
   30238:	00022b89 	.word	0x00022b89
   3023c:	2000431c 	.word	0x2000431c
   30240:	000261b5 	.word	0x000261b5
   30244:	000267c1 	.word	0x000267c1
   30248:	000263c9 	.word	0x000263c9
   3024c:	20004325 	.word	0x20004325

00030250 <allocateClient>:

static void allocateClient(struct mqtt_module *module);
static void deAllocateClient(struct mqtt_module *module);

static void allocateClient(struct mqtt_module *module)
{
   30250:	b580      	push	{r7, lr}
   30252:	b084      	sub	sp, #16
   30254:	af00      	add	r7, sp, #0
   30256:	6078      	str	r0, [r7, #4]
	unsigned int cIdx;
	
	if(!module)
   30258:	687b      	ldr	r3, [r7, #4]
   3025a:	2b00      	cmp	r3, #0
   3025c:	d022      	beq.n	302a4 <allocateClient+0x54>
		return;
		
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   3025e:	2300      	movs	r3, #0
   30260:	60fb      	str	r3, [r7, #12]
   30262:	e01b      	b.n	3029c <allocateClient+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   30264:	4a11      	ldr	r2, [pc, #68]	; (302ac <allocateClient+0x5c>)
   30266:	68fb      	ldr	r3, [r7, #12]
   30268:	2164      	movs	r1, #100	; 0x64
   3026a:	434b      	muls	r3, r1
   3026c:	18d3      	adds	r3, r2, r3
   3026e:	3360      	adds	r3, #96	; 0x60
   30270:	681b      	ldr	r3, [r3, #0]
   30272:	2b00      	cmp	r3, #0
   30274:	d10f      	bne.n	30296 <allocateClient+0x46>
		{
			mqttClientPool[cIdx].mqtt_instance = module;
   30276:	4a0d      	ldr	r2, [pc, #52]	; (302ac <allocateClient+0x5c>)
   30278:	68fb      	ldr	r3, [r7, #12]
   3027a:	2164      	movs	r1, #100	; 0x64
   3027c:	434b      	muls	r3, r1
   3027e:	18d3      	adds	r3, r2, r3
   30280:	3360      	adds	r3, #96	; 0x60
   30282:	687a      	ldr	r2, [r7, #4]
   30284:	601a      	str	r2, [r3, #0]
			module->client = &(mqttClientPool[cIdx].client);
   30286:	68fb      	ldr	r3, [r7, #12]
   30288:	2264      	movs	r2, #100	; 0x64
   3028a:	435a      	muls	r2, r3
   3028c:	4b07      	ldr	r3, [pc, #28]	; (302ac <allocateClient+0x5c>)
   3028e:	18d2      	adds	r2, r2, r3
   30290:	687b      	ldr	r3, [r7, #4]
   30292:	61da      	str	r2, [r3, #28]
			return;
   30294:	e007      	b.n	302a6 <allocateClient+0x56>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   30296:	68fb      	ldr	r3, [r7, #12]
   30298:	3301      	adds	r3, #1
   3029a:	60fb      	str	r3, [r7, #12]
   3029c:	68fb      	ldr	r3, [r7, #12]
   3029e:	2b06      	cmp	r3, #6
   302a0:	d9e0      	bls.n	30264 <allocateClient+0x14>
   302a2:	e000      	b.n	302a6 <allocateClient+0x56>
		return;
   302a4:	46c0      	nop			; (mov r8, r8)
		}
	}	
}
   302a6:	46bd      	mov	sp, r7
   302a8:	b004      	add	sp, #16
   302aa:	bd80      	pop	{r7, pc}
   302ac:	20004434 	.word	0x20004434

000302b0 <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   302b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   302b2:	b089      	sub	sp, #36	; 0x24
   302b4:	af04      	add	r7, sp, #16
   302b6:	6078      	str	r0, [r7, #4]
   302b8:	6039      	str	r1, [r7, #0]
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   302ba:	687b      	ldr	r3, [r7, #4]
   302bc:	2b00      	cmp	r3, #0
   302be:	d00a      	beq.n	302d6 <mqtt_init+0x26>
   302c0:	683b      	ldr	r3, [r7, #0]
   302c2:	2b00      	cmp	r3, #0
   302c4:	d007      	beq.n	302d6 <mqtt_init+0x26>
   302c6:	683b      	ldr	r3, [r7, #0]
   302c8:	691b      	ldr	r3, [r3, #16]
   302ca:	2b00      	cmp	r3, #0
   302cc:	d003      	beq.n	302d6 <mqtt_init+0x26>
   302ce:	683b      	ldr	r3, [r7, #0]
   302d0:	689b      	ldr	r3, [r3, #8]
   302d2:	2b00      	cmp	r3, #0
   302d4:	d102      	bne.n	302dc <mqtt_init+0x2c>
		return FAILURE;
   302d6:	2301      	movs	r3, #1
   302d8:	425b      	negs	r3, r3
   302da:	e034      	b.n	30346 <mqtt_init+0x96>
		
	timeout_ms = config->keep_alive * 1000;
   302dc:	683b      	ldr	r3, [r7, #0]
   302de:	889b      	ldrh	r3, [r3, #4]
   302e0:	001a      	movs	r2, r3
   302e2:	23fa      	movs	r3, #250	; 0xfa
   302e4:	009b      	lsls	r3, r3, #2
   302e6:	4353      	muls	r3, r2
   302e8:	60fb      	str	r3, [r7, #12]
	NetworkInit(&(module->network));
   302ea:	687b      	ldr	r3, [r7, #4]
   302ec:	3320      	adds	r3, #32
   302ee:	0018      	movs	r0, r3
   302f0:	4b17      	ldr	r3, [pc, #92]	; (30350 <mqtt_init+0xa0>)
   302f2:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   302f4:	687b      	ldr	r3, [r7, #4]
   302f6:	3304      	adds	r3, #4
   302f8:	6839      	ldr	r1, [r7, #0]
   302fa:	2218      	movs	r2, #24
   302fc:	0018      	movs	r0, r3
   302fe:	4b15      	ldr	r3, [pc, #84]	; (30354 <mqtt_init+0xa4>)
   30300:	4798      	blx	r3
	allocateClient(module);
   30302:	687b      	ldr	r3, [r7, #4]
   30304:	0018      	movs	r0, r3
   30306:	4b14      	ldr	r3, [pc, #80]	; (30358 <mqtt_init+0xa8>)
   30308:	4798      	blx	r3
	
	if(module->client)
   3030a:	687b      	ldr	r3, [r7, #4]
   3030c:	69db      	ldr	r3, [r3, #28]
   3030e:	2b00      	cmp	r3, #0
   30310:	d017      	beq.n	30342 <mqtt_init+0x92>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   30312:	687b      	ldr	r3, [r7, #4]
   30314:	69d8      	ldr	r0, [r3, #28]
   30316:	687b      	ldr	r3, [r7, #4]
   30318:	3320      	adds	r3, #32
   3031a:	001c      	movs	r4, r3
   3031c:	683b      	ldr	r3, [r7, #0]
   3031e:	691e      	ldr	r6, [r3, #16]
   30320:	683b      	ldr	r3, [r7, #0]
   30322:	695a      	ldr	r2, [r3, #20]
   30324:	683b      	ldr	r3, [r7, #0]
   30326:	6899      	ldr	r1, [r3, #8]
   30328:	683b      	ldr	r3, [r7, #0]
   3032a:	68db      	ldr	r3, [r3, #12]
   3032c:	68fd      	ldr	r5, [r7, #12]
   3032e:	9302      	str	r3, [sp, #8]
   30330:	9101      	str	r1, [sp, #4]
   30332:	9200      	str	r2, [sp, #0]
   30334:	0033      	movs	r3, r6
   30336:	002a      	movs	r2, r5
   30338:	0021      	movs	r1, r4
   3033a:	4c08      	ldr	r4, [pc, #32]	; (3035c <mqtt_init+0xac>)
   3033c:	47a0      	blx	r4
		return SUCCESS;
   3033e:	2300      	movs	r3, #0
   30340:	e001      	b.n	30346 <mqtt_init+0x96>
	}
	else
		return FAILURE;
   30342:	2301      	movs	r3, #1
   30344:	425b      	negs	r3, r3
}
   30346:	0018      	movs	r0, r3
   30348:	46bd      	mov	sp, r7
   3034a:	b005      	add	sp, #20
   3034c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3034e:	46c0      	nop			; (mov r8, r8)
   30350:	00030109 	.word	0x00030109
   30354:	000355b9 	.word	0x000355b9
   30358:	00030251 	.word	0x00030251
   3035c:	0002f181 	.word	0x0002f181

00030360 <mqtt_get_config_defaults>:
	else
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
   30360:	b580      	push	{r7, lr}
   30362:	b082      	sub	sp, #8
   30364:	af00      	add	r7, sp, #0
   30366:	6078      	str	r0, [r7, #4]
	config->port = 1883;
   30368:	687b      	ldr	r3, [r7, #4]
   3036a:	4a0c      	ldr	r2, [pc, #48]	; (3039c <mqtt_get_config_defaults+0x3c>)
   3036c:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   3036e:	687b      	ldr	r3, [r7, #4]
   30370:	2200      	movs	r2, #0
   30372:	709a      	strb	r2, [r3, #2]
	config->keep_alive = 60;
   30374:	687b      	ldr	r3, [r7, #4]
   30376:	223c      	movs	r2, #60	; 0x3c
   30378:	809a      	strh	r2, [r3, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   3037a:	687b      	ldr	r3, [r7, #4]
   3037c:	2200      	movs	r2, #0
   3037e:	609a      	str	r2, [r3, #8]
	config->send_buffer = NULL;
   30380:	687b      	ldr	r3, [r7, #4]
   30382:	2200      	movs	r2, #0
   30384:	611a      	str	r2, [r3, #16]
	config->read_buffer_size = 0;
   30386:	687b      	ldr	r3, [r7, #4]
   30388:	2200      	movs	r2, #0
   3038a:	60da      	str	r2, [r3, #12]
	config->send_buffer_size = 0;
   3038c:	687b      	ldr	r3, [r7, #4]
   3038e:	2200      	movs	r2, #0
   30390:	615a      	str	r2, [r3, #20]
}
   30392:	46c0      	nop			; (mov r8, r8)
   30394:	46bd      	mov	sp, r7
   30396:	b002      	add	sp, #8
   30398:	bd80      	pop	{r7, pc}
   3039a:	46c0      	nop			; (mov r8, r8)
   3039c:	0000075b 	.word	0x0000075b

000303a0 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
   303a0:	b580      	push	{r7, lr}
   303a2:	b082      	sub	sp, #8
   303a4:	af00      	add	r7, sp, #0
   303a6:	6078      	str	r0, [r7, #4]
   303a8:	6039      	str	r1, [r7, #0]
	if(module)
   303aa:	687b      	ldr	r3, [r7, #4]
   303ac:	2b00      	cmp	r3, #0
   303ae:	d004      	beq.n	303ba <mqtt_register_callback+0x1a>
	{
		module->callback = callback;
   303b0:	687b      	ldr	r3, [r7, #4]
   303b2:	683a      	ldr	r2, [r7, #0]
   303b4:	601a      	str	r2, [r3, #0]
		return SUCCESS;
   303b6:	2300      	movs	r3, #0
   303b8:	e001      	b.n	303be <mqtt_register_callback+0x1e>
	}
	else
		return FAILURE;
   303ba:	2301      	movs	r3, #1
   303bc:	425b      	negs	r3, r3
}
   303be:	0018      	movs	r0, r3
   303c0:	46bd      	mov	sp, r7
   303c2:	b002      	add	sp, #8
   303c4:	bd80      	pop	{r7, pc}
	...

000303c8 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   303c8:	b580      	push	{r7, lr}
   303ca:	b082      	sub	sp, #8
   303cc:	af00      	add	r7, sp, #0
   303ce:	603a      	str	r2, [r7, #0]
   303d0:	1dfb      	adds	r3, r7, #7
   303d2:	1c02      	adds	r2, r0, #0
   303d4:	701a      	strb	r2, [r3, #0]
   303d6:	1dbb      	adds	r3, r7, #6
   303d8:	1c0a      	adds	r2, r1, #0
   303da:	701a      	strb	r2, [r3, #0]
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   303dc:	683a      	ldr	r2, [r7, #0]
   303de:	1dbb      	adds	r3, r7, #6
   303e0:	7819      	ldrb	r1, [r3, #0]
   303e2:	1dfb      	adds	r3, r7, #7
   303e4:	781b      	ldrb	r3, [r3, #0]
   303e6:	b25b      	sxtb	r3, r3
   303e8:	0018      	movs	r0, r3
   303ea:	4b03      	ldr	r3, [pc, #12]	; (303f8 <mqtt_socket_event_handler+0x30>)
   303ec:	4798      	blx	r3
}
   303ee:	46c0      	nop			; (mov r8, r8)
   303f0:	46bd      	mov	sp, r7
   303f2:	b002      	add	sp, #8
   303f4:	bd80      	pop	{r7, pc}
   303f6:	46c0      	nop			; (mov r8, r8)
   303f8:	0002fe45 	.word	0x0002fe45

000303fc <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   303fc:	b580      	push	{r7, lr}
   303fe:	b082      	sub	sp, #8
   30400:	af00      	add	r7, sp, #0
   30402:	6078      	str	r0, [r7, #4]
   30404:	6039      	str	r1, [r7, #0]
	dnsResolveCallback(domain_name, server_ip);
   30406:	683a      	ldr	r2, [r7, #0]
   30408:	687b      	ldr	r3, [r7, #4]
   3040a:	0011      	movs	r1, r2
   3040c:	0018      	movs	r0, r3
   3040e:	4b03      	ldr	r3, [pc, #12]	; (3041c <mqtt_socket_resolve_handler+0x20>)
   30410:	4798      	blx	r3
}
   30412:	46c0      	nop			; (mov r8, r8)
   30414:	46bd      	mov	sp, r7
   30416:	b002      	add	sp, #8
   30418:	bd80      	pop	{r7, pc}
   3041a:	46c0      	nop			; (mov r8, r8)
   3041c:	0002fdf5 	.word	0x0002fdf5

00030420 <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   30420:	b590      	push	{r4, r7, lr}
   30422:	b085      	sub	sp, #20
   30424:	af00      	add	r7, sp, #0
   30426:	6078      	str	r0, [r7, #4]
   30428:	6039      	str	r1, [r7, #0]
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   3042a:	687b      	ldr	r3, [r7, #4]
   3042c:	3320      	adds	r3, #32
   3042e:	0018      	movs	r0, r3
   30430:	687b      	ldr	r3, [r7, #4]
   30432:	889b      	ldrh	r3, [r3, #4]
   30434:	001a      	movs	r2, r3
   30436:	687b      	ldr	r3, [r7, #4]
   30438:	799b      	ldrb	r3, [r3, #6]
   3043a:	6839      	ldr	r1, [r7, #0]
   3043c:	4c09      	ldr	r4, [pc, #36]	; (30464 <mqtt_connect+0x44>)
   3043e:	47a0      	blx	r4
   30440:	0003      	movs	r3, r0
   30442:	60fb      	str	r3, [r7, #12]
	if(module->callback)
   30444:	687b      	ldr	r3, [r7, #4]
   30446:	681b      	ldr	r3, [r3, #0]
   30448:	2b00      	cmp	r3, #0
   3044a:	d006      	beq.n	3045a <mqtt_connect+0x3a>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   3044c:	687b      	ldr	r3, [r7, #4]
   3044e:	681b      	ldr	r3, [r3, #0]
   30450:	220c      	movs	r2, #12
   30452:	18ba      	adds	r2, r7, r2
   30454:	6878      	ldr	r0, [r7, #4]
   30456:	2100      	movs	r1, #0
   30458:	4798      	blx	r3
	return connResult.sock_connected.result;
   3045a:	68fb      	ldr	r3, [r7, #12]
}
   3045c:	0018      	movs	r0, r3
   3045e:	46bd      	mov	sp, r7
   30460:	b005      	add	sp, #20
   30462:	bd90      	pop	{r4, r7, pc}
   30464:	00030141 	.word	0x00030141

00030468 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   30468:	b580      	push	{r7, lr}
   3046a:	b09c      	sub	sp, #112	; 0x70
   3046c:	af00      	add	r7, sp, #0
   3046e:	60f8      	str	r0, [r7, #12]
   30470:	607a      	str	r2, [r7, #4]
   30472:	603b      	str	r3, [r7, #0]
   30474:	230b      	movs	r3, #11
   30476:	18fb      	adds	r3, r7, r3
   30478:	1c0a      	adds	r2, r1, #0
   3047a:	701a      	strb	r2, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   3047c:	2310      	movs	r3, #16
   3047e:	18fa      	adds	r2, r7, r3
   30480:	4b31      	ldr	r3, [pc, #196]	; (30548 <mqtt_connect_broker+0xe0>)
   30482:	0010      	movs	r0, r2
   30484:	0019      	movs	r1, r3
   30486:	2358      	movs	r3, #88	; 0x58
   30488:	001a      	movs	r2, r3
   3048a:	4b30      	ldr	r3, [pc, #192]	; (3054c <mqtt_connect_broker+0xe4>)
   3048c:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
   3048e:	2310      	movs	r3, #16
   30490:	18fb      	adds	r3, r7, r3
   30492:	2204      	movs	r2, #4
   30494:	721a      	strb	r2, [r3, #8]
	connectData.clientID.cstring = (char *)client_id;
   30496:	2310      	movs	r3, #16
   30498:	18fb      	adds	r3, r7, r3
   3049a:	6fba      	ldr	r2, [r7, #120]	; 0x78
   3049c:	60da      	str	r2, [r3, #12]
	connectData.username.cstring = (char *)id;
   3049e:	2310      	movs	r3, #16
   304a0:	18fb      	adds	r3, r7, r3
   304a2:	687a      	ldr	r2, [r7, #4]
   304a4:	641a      	str	r2, [r3, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   304a6:	2310      	movs	r3, #16
   304a8:	18fb      	adds	r3, r7, r3
   304aa:	683a      	ldr	r2, [r7, #0]
   304ac:	64da      	str	r2, [r3, #76]	; 0x4c
	connectData.cleansession = clean_session;
   304ae:	2310      	movs	r3, #16
   304b0:	18fb      	adds	r3, r7, r3
   304b2:	220b      	movs	r2, #11
   304b4:	18ba      	adds	r2, r7, r2
   304b6:	7812      	ldrb	r2, [r2, #0]
   304b8:	769a      	strb	r2, [r3, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   304ba:	2310      	movs	r3, #16
   304bc:	18fb      	adds	r3, r7, r3
   304be:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   304c0:	625a      	str	r2, [r3, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   304c2:	2310      	movs	r3, #16
   304c4:	18fb      	adds	r3, r7, r3
   304c6:	2280      	movs	r2, #128	; 0x80
   304c8:	18ba      	adds	r2, r7, r2
   304ca:	6812      	ldr	r2, [r2, #0]
   304cc:	631a      	str	r2, [r3, #48]	; 0x30
	connectData.will.retained = will_retain;
   304ce:	2310      	movs	r3, #16
   304d0:	18fb      	adds	r3, r7, r3
   304d2:	228c      	movs	r2, #140	; 0x8c
   304d4:	18ba      	adds	r2, r7, r2
   304d6:	213c      	movs	r1, #60	; 0x3c
   304d8:	7812      	ldrb	r2, [r2, #0]
   304da:	545a      	strb	r2, [r3, r1]
	connectData.will.qos = will_qos;
   304dc:	2310      	movs	r3, #16
   304de:	18fb      	adds	r3, r7, r3
   304e0:	2288      	movs	r2, #136	; 0x88
   304e2:	18ba      	adds	r2, r7, r2
   304e4:	213d      	movs	r1, #61	; 0x3d
   304e6:	7812      	ldrb	r2, [r2, #0]
   304e8:	545a      	strb	r2, [r3, r1]
	
	if(will_topic && will_msg)
   304ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   304ec:	2b00      	cmp	r3, #0
   304ee:	d008      	beq.n	30502 <mqtt_connect_broker+0x9a>
   304f0:	2380      	movs	r3, #128	; 0x80
   304f2:	18fb      	adds	r3, r7, r3
   304f4:	681b      	ldr	r3, [r3, #0]
   304f6:	2b00      	cmp	r3, #0
   304f8:	d003      	beq.n	30502 <mqtt_connect_broker+0x9a>
		connectData.willFlag = 1;
   304fa:	2310      	movs	r3, #16
   304fc:	18fb      	adds	r3, r7, r3
   304fe:	2201      	movs	r2, #1
   30500:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   30502:	68fb      	ldr	r3, [r7, #12]
   30504:	69db      	ldr	r3, [r3, #28]
   30506:	2210      	movs	r2, #16
   30508:	18ba      	adds	r2, r7, r2
   3050a:	0011      	movs	r1, r2
   3050c:	0018      	movs	r0, r3
   3050e:	4b10      	ldr	r3, [pc, #64]	; (30550 <mqtt_connect_broker+0xe8>)
   30510:	4798      	blx	r3
   30512:	0003      	movs	r3, r0
   30514:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	connBrokerResult.connected.result = rc;
   30516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   30518:	b2da      	uxtb	r2, r3
   3051a:	2368      	movs	r3, #104	; 0x68
   3051c:	18fb      	adds	r3, r7, r3
   3051e:	701a      	strb	r2, [r3, #0]
	if(module->callback)
   30520:	68fb      	ldr	r3, [r7, #12]
   30522:	681b      	ldr	r3, [r3, #0]
   30524:	2b00      	cmp	r3, #0
   30526:	d006      	beq.n	30536 <mqtt_connect_broker+0xce>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   30528:	68fb      	ldr	r3, [r7, #12]
   3052a:	681b      	ldr	r3, [r3, #0]
   3052c:	2268      	movs	r2, #104	; 0x68
   3052e:	18ba      	adds	r2, r7, r2
   30530:	68f8      	ldr	r0, [r7, #12]
   30532:	2101      	movs	r1, #1
   30534:	4798      	blx	r3
	
	module->isConnected = true;
   30536:	68fb      	ldr	r3, [r7, #12]
   30538:	2234      	movs	r2, #52	; 0x34
   3053a:	2101      	movs	r1, #1
   3053c:	5499      	strb	r1, [r3, r2]
	return rc;
   3053e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
   30540:	0018      	movs	r0, r3
   30542:	46bd      	mov	sp, r7
   30544:	b01c      	add	sp, #112	; 0x70
   30546:	bd80      	pop	{r7, pc}
   30548:	0003a998 	.word	0x0003a998
   3054c:	000355b9 	.word	0x000355b9
   30550:	0002f891 	.word	0x0002f891

00030554 <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   30554:	b580      	push	{r7, lr}
   30556:	b084      	sub	sp, #16
   30558:	af00      	add	r7, sp, #0
   3055a:	6078      	str	r0, [r7, #4]
   3055c:	6039      	str	r1, [r7, #0]
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   3055e:	687b      	ldr	r3, [r7, #4]
   30560:	69db      	ldr	r3, [r3, #28]
   30562:	0018      	movs	r0, r3
   30564:	4b0c      	ldr	r3, [pc, #48]	; (30598 <mqtt_disconnect+0x44>)
   30566:	4798      	blx	r3
   30568:	0003      	movs	r3, r0
   3056a:	60fb      	str	r3, [r7, #12]
	
	disconnectResult.disconnected.reason = rc;
   3056c:	68fb      	ldr	r3, [r7, #12]
   3056e:	60bb      	str	r3, [r7, #8]
	
	if(module->callback)
   30570:	687b      	ldr	r3, [r7, #4]
   30572:	681b      	ldr	r3, [r3, #0]
   30574:	2b00      	cmp	r3, #0
   30576:	d006      	beq.n	30586 <mqtt_disconnect+0x32>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   30578:	687b      	ldr	r3, [r7, #4]
   3057a:	681b      	ldr	r3, [r3, #0]
   3057c:	2208      	movs	r2, #8
   3057e:	18ba      	adds	r2, r7, r2
   30580:	6878      	ldr	r0, [r7, #4]
   30582:	2105      	movs	r1, #5
   30584:	4798      	blx	r3
	
	module->isConnected = false;
   30586:	687b      	ldr	r3, [r7, #4]
   30588:	2234      	movs	r2, #52	; 0x34
   3058a:	2100      	movs	r1, #0
   3058c:	5499      	strb	r1, [r3, r2]
	return rc;
   3058e:	68fb      	ldr	r3, [r7, #12]
}
   30590:	0018      	movs	r0, r3
   30592:	46bd      	mov	sp, r7
   30594:	b004      	add	sp, #16
   30596:	bd80      	pop	{r7, pc}
   30598:	0002fd1d 	.word	0x0002fd1d

0003059c <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   3059c:	b580      	push	{r7, lr}
   3059e:	b08a      	sub	sp, #40	; 0x28
   305a0:	af00      	add	r7, sp, #0
   305a2:	60f8      	str	r0, [r7, #12]
   305a4:	60b9      	str	r1, [r7, #8]
   305a6:	607a      	str	r2, [r7, #4]
   305a8:	603b      	str	r3, [r7, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   305aa:	2314      	movs	r3, #20
   305ac:	18fb      	adds	r3, r7, r3
   305ae:	2230      	movs	r2, #48	; 0x30
   305b0:	18ba      	adds	r2, r7, r2
   305b2:	7812      	ldrb	r2, [r2, #0]
   305b4:	701a      	strb	r2, [r3, #0]
	mqttMsg.payload = (char *)msg;
   305b6:	2314      	movs	r3, #20
   305b8:	18fb      	adds	r3, r7, r3
   305ba:	687a      	ldr	r2, [r7, #4]
   305bc:	609a      	str	r2, [r3, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   305be:	2314      	movs	r3, #20
   305c0:	18fb      	adds	r3, r7, r3
   305c2:	683a      	ldr	r2, [r7, #0]
   305c4:	60da      	str	r2, [r3, #12]
	mqttMsg.retained = retain;
   305c6:	2314      	movs	r3, #20
   305c8:	18fb      	adds	r3, r7, r3
   305ca:	2234      	movs	r2, #52	; 0x34
   305cc:	18ba      	adds	r2, r7, r2
   305ce:	7812      	ldrb	r2, [r2, #0]
   305d0:	705a      	strb	r2, [r3, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   305d2:	68fb      	ldr	r3, [r7, #12]
   305d4:	69db      	ldr	r3, [r3, #28]
   305d6:	2214      	movs	r2, #20
   305d8:	18ba      	adds	r2, r7, r2
   305da:	68b9      	ldr	r1, [r7, #8]
   305dc:	0018      	movs	r0, r3
   305de:	4b09      	ldr	r3, [pc, #36]	; (30604 <mqtt_publish+0x68>)
   305e0:	4798      	blx	r3
   305e2:	0003      	movs	r3, r0
   305e4:	627b      	str	r3, [r7, #36]	; 0x24
	
	if(module->callback)
   305e6:	68fb      	ldr	r3, [r7, #12]
   305e8:	681b      	ldr	r3, [r3, #0]
   305ea:	2b00      	cmp	r3, #0
   305ec:	d005      	beq.n	305fa <mqtt_publish+0x5e>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   305ee:	68fb      	ldr	r3, [r7, #12]
   305f0:	681b      	ldr	r3, [r3, #0]
   305f2:	68f8      	ldr	r0, [r7, #12]
   305f4:	2200      	movs	r2, #0
   305f6:	2102      	movs	r1, #2
   305f8:	4798      	blx	r3
	
	return rc;
   305fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   305fc:	0018      	movs	r0, r3
   305fe:	46bd      	mov	sp, r7
   30600:	b00a      	add	sp, #40	; 0x28
   30602:	bd80      	pop	{r7, pc}
   30604:	0002fb5d 	.word	0x0002fb5d

00030608 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   30608:	b590      	push	{r4, r7, lr}
   3060a:	b087      	sub	sp, #28
   3060c:	af00      	add	r7, sp, #0
   3060e:	60f8      	str	r0, [r7, #12]
   30610:	60b9      	str	r1, [r7, #8]
   30612:	603b      	str	r3, [r7, #0]
   30614:	1dfb      	adds	r3, r7, #7
   30616:	701a      	strb	r2, [r3, #0]
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   30618:	68fb      	ldr	r3, [r7, #12]
   3061a:	69d8      	ldr	r0, [r3, #28]
   3061c:	683c      	ldr	r4, [r7, #0]
   3061e:	1dfb      	adds	r3, r7, #7
   30620:	781a      	ldrb	r2, [r3, #0]
   30622:	68b9      	ldr	r1, [r7, #8]
   30624:	0023      	movs	r3, r4
   30626:	4c09      	ldr	r4, [pc, #36]	; (3064c <mqtt_subscribe+0x44>)
   30628:	47a0      	blx	r4
   3062a:	0003      	movs	r3, r0
   3062c:	617b      	str	r3, [r7, #20]
	
	if(module->callback)
   3062e:	68fb      	ldr	r3, [r7, #12]
   30630:	681b      	ldr	r3, [r3, #0]
   30632:	2b00      	cmp	r3, #0
   30634:	d005      	beq.n	30642 <mqtt_subscribe+0x3a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   30636:	68fb      	ldr	r3, [r7, #12]
   30638:	681b      	ldr	r3, [r3, #0]
   3063a:	68f8      	ldr	r0, [r7, #12]
   3063c:	2200      	movs	r2, #0
   3063e:	2103      	movs	r1, #3
   30640:	4798      	blx	r3
	
	return rc;
   30642:	697b      	ldr	r3, [r7, #20]
}
   30644:	0018      	movs	r0, r3
   30646:	46bd      	mov	sp, r7
   30648:	b007      	add	sp, #28
   3064a:	bd90      	pop	{r4, r7, pc}
   3064c:	0002f9d1 	.word	0x0002f9d1

00030650 <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   30650:	b580      	push	{r7, lr}
   30652:	b082      	sub	sp, #8
   30654:	af00      	add	r7, sp, #0
   30656:	6078      	str	r0, [r7, #4]
   30658:	6039      	str	r1, [r7, #0]
	return MQTTYield(module->client, timeout_ms);
   3065a:	687b      	ldr	r3, [r7, #4]
   3065c:	69db      	ldr	r3, [r3, #28]
   3065e:	683a      	ldr	r2, [r7, #0]
   30660:	0011      	movs	r1, r2
   30662:	0018      	movs	r0, r3
   30664:	4b03      	ldr	r3, [pc, #12]	; (30674 <mqtt_yield+0x24>)
   30666:	4798      	blx	r3
   30668:	0003      	movs	r3, r0
   3066a:	0018      	movs	r0, r3
   3066c:	46bd      	mov	sp, r7
   3066e:	b002      	add	sp, #8
   30670:	bd80      	pop	{r7, pc}
   30672:	46c0      	nop			; (mov r8, r8)
   30674:	0002f7d9 	.word	0x0002f7d9

00030678 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   30678:	b590      	push	{r4, r7, lr}
   3067a:	b085      	sub	sp, #20
   3067c:	af00      	add	r7, sp, #0
   3067e:	6078      	str	r0, [r7, #4]
	int len = 0;
   30680:	2300      	movs	r3, #0
   30682:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   30684:	687b      	ldr	r3, [r7, #4]
   30686:	7a1b      	ldrb	r3, [r3, #8]
   30688:	2b03      	cmp	r3, #3
   3068a:	d102      	bne.n	30692 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
   3068c:	230c      	movs	r3, #12
   3068e:	60fb      	str	r3, [r7, #12]
   30690:	e005      	b.n	3069e <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
   30692:	687b      	ldr	r3, [r7, #4]
   30694:	7a1b      	ldrb	r3, [r3, #8]
   30696:	2b04      	cmp	r3, #4
   30698:	d101      	bne.n	3069e <MQTTSerialize_connectLength+0x26>
		len = 10;
   3069a:	230a      	movs	r3, #10
   3069c:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
   3069e:	687b      	ldr	r3, [r7, #4]
   306a0:	68d8      	ldr	r0, [r3, #12]
   306a2:	6919      	ldr	r1, [r3, #16]
   306a4:	695a      	ldr	r2, [r3, #20]
   306a6:	4b25      	ldr	r3, [pc, #148]	; (3073c <MQTTSerialize_connectLength+0xc4>)
   306a8:	4798      	blx	r3
   306aa:	0003      	movs	r3, r0
   306ac:	3302      	adds	r3, #2
   306ae:	68fa      	ldr	r2, [r7, #12]
   306b0:	18d3      	adds	r3, r2, r3
   306b2:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
   306b4:	687b      	ldr	r3, [r7, #4]
   306b6:	7edb      	ldrb	r3, [r3, #27]
   306b8:	2b00      	cmp	r3, #0
   306ba:	d013      	beq.n	306e4 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   306bc:	687b      	ldr	r3, [r7, #4]
   306be:	6a58      	ldr	r0, [r3, #36]	; 0x24
   306c0:	6a99      	ldr	r1, [r3, #40]	; 0x28
   306c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   306c4:	4b1d      	ldr	r3, [pc, #116]	; (3073c <MQTTSerialize_connectLength+0xc4>)
   306c6:	4798      	blx	r3
   306c8:	0003      	movs	r3, r0
   306ca:	1c9c      	adds	r4, r3, #2
   306cc:	687b      	ldr	r3, [r7, #4]
   306ce:	6b18      	ldr	r0, [r3, #48]	; 0x30
   306d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
   306d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   306d4:	4b19      	ldr	r3, [pc, #100]	; (3073c <MQTTSerialize_connectLength+0xc4>)
   306d6:	4798      	blx	r3
   306d8:	0003      	movs	r3, r0
   306da:	18e3      	adds	r3, r4, r3
   306dc:	3302      	adds	r3, #2
   306de:	68fa      	ldr	r2, [r7, #12]
   306e0:	18d3      	adds	r3, r2, r3
   306e2:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
   306e4:	687b      	ldr	r3, [r7, #4]
   306e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   306e8:	2b00      	cmp	r3, #0
   306ea:	d103      	bne.n	306f4 <MQTTSerialize_connectLength+0x7c>
   306ec:	687b      	ldr	r3, [r7, #4]
   306ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   306f0:	2b00      	cmp	r3, #0
   306f2:	d00a      	beq.n	3070a <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
   306f4:	687b      	ldr	r3, [r7, #4]
   306f6:	6c18      	ldr	r0, [r3, #64]	; 0x40
   306f8:	6c59      	ldr	r1, [r3, #68]	; 0x44
   306fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   306fc:	4b0f      	ldr	r3, [pc, #60]	; (3073c <MQTTSerialize_connectLength+0xc4>)
   306fe:	4798      	blx	r3
   30700:	0003      	movs	r3, r0
   30702:	3302      	adds	r3, #2
   30704:	68fa      	ldr	r2, [r7, #12]
   30706:	18d3      	adds	r3, r2, r3
   30708:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
   3070a:	687b      	ldr	r3, [r7, #4]
   3070c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3070e:	2b00      	cmp	r3, #0
   30710:	d103      	bne.n	3071a <MQTTSerialize_connectLength+0xa2>
   30712:	687b      	ldr	r3, [r7, #4]
   30714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   30716:	2b00      	cmp	r3, #0
   30718:	d00a      	beq.n	30730 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
   3071a:	687b      	ldr	r3, [r7, #4]
   3071c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   3071e:	6d19      	ldr	r1, [r3, #80]	; 0x50
   30720:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   30722:	4b06      	ldr	r3, [pc, #24]	; (3073c <MQTTSerialize_connectLength+0xc4>)
   30724:	4798      	blx	r3
   30726:	0003      	movs	r3, r0
   30728:	3302      	adds	r3, #2
   3072a:	68fa      	ldr	r2, [r7, #12]
   3072c:	18d3      	adds	r3, r2, r3
   3072e:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
   30730:	68fb      	ldr	r3, [r7, #12]
}
   30732:	0018      	movs	r0, r3
   30734:	46bd      	mov	sp, r7
   30736:	b005      	add	sp, #20
   30738:	bd90      	pop	{r4, r7, pc}
   3073a:	46c0      	nop			; (mov r8, r8)
   3073c:	000310e9 	.word	0x000310e9

00030740 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   30740:	b590      	push	{r4, r7, lr}
   30742:	b08b      	sub	sp, #44	; 0x2c
   30744:	af00      	add	r7, sp, #0
   30746:	60f8      	str	r0, [r7, #12]
   30748:	60b9      	str	r1, [r7, #8]
   3074a:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
   3074c:	68fb      	ldr	r3, [r7, #12]
   3074e:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
   30750:	2300      	movs	r3, #0
   30752:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
   30754:	2300      	movs	r3, #0
   30756:	617b      	str	r3, [r7, #20]
	int len = 0;
   30758:	2300      	movs	r3, #0
   3075a:	623b      	str	r3, [r7, #32]
	int rc = -1;
   3075c:	2301      	movs	r3, #1
   3075e:	425b      	negs	r3, r3
   30760:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   30762:	687b      	ldr	r3, [r7, #4]
   30764:	0018      	movs	r0, r3
   30766:	4b8c      	ldr	r3, [pc, #560]	; (30998 <MQTTSerialize_connect+0x258>)
   30768:	4798      	blx	r3
   3076a:	0003      	movs	r3, r0
   3076c:	623b      	str	r3, [r7, #32]
   3076e:	6a3b      	ldr	r3, [r7, #32]
   30770:	0018      	movs	r0, r3
   30772:	4b8a      	ldr	r3, [pc, #552]	; (3099c <MQTTSerialize_connect+0x25c>)
   30774:	4798      	blx	r3
   30776:	0002      	movs	r2, r0
   30778:	68bb      	ldr	r3, [r7, #8]
   3077a:	429a      	cmp	r2, r3
   3077c:	dd03      	ble.n	30786 <MQTTSerialize_connect+0x46>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   3077e:	2302      	movs	r3, #2
   30780:	425b      	negs	r3, r3
   30782:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   30784:	e103      	b.n	3098e <MQTTSerialize_connect+0x24e>
	}

	header.byte = 0;
   30786:	2318      	movs	r3, #24
   30788:	18fb      	adds	r3, r7, r3
   3078a:	2200      	movs	r2, #0
   3078c:	701a      	strb	r2, [r3, #0]
	header.bits.type = CONNECT;
   3078e:	2318      	movs	r3, #24
   30790:	18fb      	adds	r3, r7, r3
   30792:	781a      	ldrb	r2, [r3, #0]
   30794:	210f      	movs	r1, #15
   30796:	400a      	ands	r2, r1
   30798:	1c11      	adds	r1, r2, #0
   3079a:	2210      	movs	r2, #16
   3079c:	430a      	orrs	r2, r1
   3079e:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   307a0:	2318      	movs	r3, #24
   307a2:	18fb      	adds	r3, r7, r3
   307a4:	781a      	ldrb	r2, [r3, #0]
   307a6:	231c      	movs	r3, #28
   307a8:	18fb      	adds	r3, r7, r3
   307aa:	0011      	movs	r1, r2
   307ac:	0018      	movs	r0, r3
   307ae:	4b7c      	ldr	r3, [pc, #496]	; (309a0 <MQTTSerialize_connect+0x260>)
   307b0:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   307b2:	69fb      	ldr	r3, [r7, #28]
   307b4:	6a3a      	ldr	r2, [r7, #32]
   307b6:	0011      	movs	r1, r2
   307b8:	0018      	movs	r0, r3
   307ba:	4b7a      	ldr	r3, [pc, #488]	; (309a4 <MQTTSerialize_connect+0x264>)
   307bc:	4798      	blx	r3
   307be:	0002      	movs	r2, r0
   307c0:	69fb      	ldr	r3, [r7, #28]
   307c2:	189b      	adds	r3, r3, r2
   307c4:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
   307c6:	687b      	ldr	r3, [r7, #4]
   307c8:	7a1b      	ldrb	r3, [r3, #8]
   307ca:	2b04      	cmp	r3, #4
   307cc:	d10d      	bne.n	307ea <MQTTSerialize_connect+0xaa>
	{
		writeCString(&ptr, "MQTT");
   307ce:	4a76      	ldr	r2, [pc, #472]	; (309a8 <MQTTSerialize_connect+0x268>)
   307d0:	231c      	movs	r3, #28
   307d2:	18fb      	adds	r3, r7, r3
   307d4:	0011      	movs	r1, r2
   307d6:	0018      	movs	r0, r3
   307d8:	4b74      	ldr	r3, [pc, #464]	; (309ac <MQTTSerialize_connect+0x26c>)
   307da:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   307dc:	231c      	movs	r3, #28
   307de:	18fb      	adds	r3, r7, r3
   307e0:	2104      	movs	r1, #4
   307e2:	0018      	movs	r0, r3
   307e4:	4b6e      	ldr	r3, [pc, #440]	; (309a0 <MQTTSerialize_connect+0x260>)
   307e6:	4798      	blx	r3
   307e8:	e00c      	b.n	30804 <MQTTSerialize_connect+0xc4>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   307ea:	4a71      	ldr	r2, [pc, #452]	; (309b0 <MQTTSerialize_connect+0x270>)
   307ec:	231c      	movs	r3, #28
   307ee:	18fb      	adds	r3, r7, r3
   307f0:	0011      	movs	r1, r2
   307f2:	0018      	movs	r0, r3
   307f4:	4b6d      	ldr	r3, [pc, #436]	; (309ac <MQTTSerialize_connect+0x26c>)
   307f6:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   307f8:	231c      	movs	r3, #28
   307fa:	18fb      	adds	r3, r7, r3
   307fc:	2103      	movs	r1, #3
   307fe:	0018      	movs	r0, r3
   30800:	4b67      	ldr	r3, [pc, #412]	; (309a0 <MQTTSerialize_connect+0x260>)
   30802:	4798      	blx	r3
	}

	flags.all = 0;
   30804:	2314      	movs	r3, #20
   30806:	18fb      	adds	r3, r7, r3
   30808:	2200      	movs	r2, #0
   3080a:	701a      	strb	r2, [r3, #0]
	flags.bits.cleansession = options->cleansession;
   3080c:	687b      	ldr	r3, [r7, #4]
   3080e:	7e9b      	ldrb	r3, [r3, #26]
   30810:	1c1a      	adds	r2, r3, #0
   30812:	2301      	movs	r3, #1
   30814:	4013      	ands	r3, r2
   30816:	b2da      	uxtb	r2, r3
   30818:	2314      	movs	r3, #20
   3081a:	18fb      	adds	r3, r7, r3
   3081c:	2101      	movs	r1, #1
   3081e:	400a      	ands	r2, r1
   30820:	1890      	adds	r0, r2, r2
   30822:	781a      	ldrb	r2, [r3, #0]
   30824:	2102      	movs	r1, #2
   30826:	438a      	bics	r2, r1
   30828:	1c11      	adds	r1, r2, #0
   3082a:	1c02      	adds	r2, r0, #0
   3082c:	430a      	orrs	r2, r1
   3082e:	701a      	strb	r2, [r3, #0]
	flags.bits.will = (options->willFlag) ? 1 : 0;
   30830:	687b      	ldr	r3, [r7, #4]
   30832:	7edb      	ldrb	r3, [r3, #27]
   30834:	1e5a      	subs	r2, r3, #1
   30836:	4193      	sbcs	r3, r2
   30838:	b2da      	uxtb	r2, r3
   3083a:	2314      	movs	r3, #20
   3083c:	18fb      	adds	r3, r7, r3
   3083e:	2101      	movs	r1, #1
   30840:	400a      	ands	r2, r1
   30842:	0090      	lsls	r0, r2, #2
   30844:	781a      	ldrb	r2, [r3, #0]
   30846:	2104      	movs	r1, #4
   30848:	438a      	bics	r2, r1
   3084a:	1c11      	adds	r1, r2, #0
   3084c:	1c02      	adds	r2, r0, #0
   3084e:	430a      	orrs	r2, r1
   30850:	701a      	strb	r2, [r3, #0]
	if (flags.bits.will)
   30852:	2314      	movs	r3, #20
   30854:	18fb      	adds	r3, r7, r3
   30856:	781b      	ldrb	r3, [r3, #0]
   30858:	2204      	movs	r2, #4
   3085a:	4013      	ands	r3, r2
   3085c:	b2db      	uxtb	r3, r3
   3085e:	2b00      	cmp	r3, #0
   30860:	d025      	beq.n	308ae <MQTTSerialize_connect+0x16e>
	{
		flags.bits.willQoS = options->will.qos;
   30862:	687b      	ldr	r3, [r7, #4]
   30864:	223d      	movs	r2, #61	; 0x3d
   30866:	5c9b      	ldrb	r3, [r3, r2]
   30868:	1c1a      	adds	r2, r3, #0
   3086a:	2303      	movs	r3, #3
   3086c:	4013      	ands	r3, r2
   3086e:	b2da      	uxtb	r2, r3
   30870:	2314      	movs	r3, #20
   30872:	18fb      	adds	r3, r7, r3
   30874:	2103      	movs	r1, #3
   30876:	400a      	ands	r2, r1
   30878:	00d0      	lsls	r0, r2, #3
   3087a:	781a      	ldrb	r2, [r3, #0]
   3087c:	2118      	movs	r1, #24
   3087e:	438a      	bics	r2, r1
   30880:	1c11      	adds	r1, r2, #0
   30882:	1c02      	adds	r2, r0, #0
   30884:	430a      	orrs	r2, r1
   30886:	701a      	strb	r2, [r3, #0]
		flags.bits.willRetain = options->will.retained;
   30888:	687b      	ldr	r3, [r7, #4]
   3088a:	223c      	movs	r2, #60	; 0x3c
   3088c:	5c9b      	ldrb	r3, [r3, r2]
   3088e:	1c1a      	adds	r2, r3, #0
   30890:	2301      	movs	r3, #1
   30892:	4013      	ands	r3, r2
   30894:	b2da      	uxtb	r2, r3
   30896:	2314      	movs	r3, #20
   30898:	18fb      	adds	r3, r7, r3
   3089a:	2101      	movs	r1, #1
   3089c:	400a      	ands	r2, r1
   3089e:	0150      	lsls	r0, r2, #5
   308a0:	781a      	ldrb	r2, [r3, #0]
   308a2:	2120      	movs	r1, #32
   308a4:	438a      	bics	r2, r1
   308a6:	1c11      	adds	r1, r2, #0
   308a8:	1c02      	adds	r2, r0, #0
   308aa:	430a      	orrs	r2, r1
   308ac:	701a      	strb	r2, [r3, #0]
	}

	if (options->username.cstring || options->username.lenstring.data)
   308ae:	687b      	ldr	r3, [r7, #4]
   308b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   308b2:	2b00      	cmp	r3, #0
   308b4:	d103      	bne.n	308be <MQTTSerialize_connect+0x17e>
   308b6:	687b      	ldr	r3, [r7, #4]
   308b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   308ba:	2b00      	cmp	r3, #0
   308bc:	d006      	beq.n	308cc <MQTTSerialize_connect+0x18c>
		flags.bits.username = 1;
   308be:	2314      	movs	r3, #20
   308c0:	18fb      	adds	r3, r7, r3
   308c2:	781a      	ldrb	r2, [r3, #0]
   308c4:	2180      	movs	r1, #128	; 0x80
   308c6:	4249      	negs	r1, r1
   308c8:	430a      	orrs	r2, r1
   308ca:	701a      	strb	r2, [r3, #0]
	if (options->password.cstring || options->password.lenstring.data)
   308cc:	687b      	ldr	r3, [r7, #4]
   308ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   308d0:	2b00      	cmp	r3, #0
   308d2:	d103      	bne.n	308dc <MQTTSerialize_connect+0x19c>
   308d4:	687b      	ldr	r3, [r7, #4]
   308d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   308d8:	2b00      	cmp	r3, #0
   308da:	d005      	beq.n	308e8 <MQTTSerialize_connect+0x1a8>
		flags.bits.password = 1;
   308dc:	2314      	movs	r3, #20
   308de:	18fb      	adds	r3, r7, r3
   308e0:	781a      	ldrb	r2, [r3, #0]
   308e2:	2140      	movs	r1, #64	; 0x40
   308e4:	430a      	orrs	r2, r1
   308e6:	701a      	strb	r2, [r3, #0]

	writeChar(&ptr, flags.all);
   308e8:	2314      	movs	r3, #20
   308ea:	18fb      	adds	r3, r7, r3
   308ec:	781a      	ldrb	r2, [r3, #0]
   308ee:	231c      	movs	r3, #28
   308f0:	18fb      	adds	r3, r7, r3
   308f2:	0011      	movs	r1, r2
   308f4:	0018      	movs	r0, r3
   308f6:	4b2a      	ldr	r3, [pc, #168]	; (309a0 <MQTTSerialize_connect+0x260>)
   308f8:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   308fa:	687b      	ldr	r3, [r7, #4]
   308fc:	8b1b      	ldrh	r3, [r3, #24]
   308fe:	001a      	movs	r2, r3
   30900:	231c      	movs	r3, #28
   30902:	18fb      	adds	r3, r7, r3
   30904:	0011      	movs	r1, r2
   30906:	0018      	movs	r0, r3
   30908:	4b2a      	ldr	r3, [pc, #168]	; (309b4 <MQTTSerialize_connect+0x274>)
   3090a:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   3090c:	687b      	ldr	r3, [r7, #4]
   3090e:	221c      	movs	r2, #28
   30910:	18b8      	adds	r0, r7, r2
   30912:	68d9      	ldr	r1, [r3, #12]
   30914:	691a      	ldr	r2, [r3, #16]
   30916:	695b      	ldr	r3, [r3, #20]
   30918:	4c27      	ldr	r4, [pc, #156]	; (309b8 <MQTTSerialize_connect+0x278>)
   3091a:	47a0      	blx	r4
	if (options->willFlag)
   3091c:	687b      	ldr	r3, [r7, #4]
   3091e:	7edb      	ldrb	r3, [r3, #27]
   30920:	2b00      	cmp	r3, #0
   30922:	d00f      	beq.n	30944 <MQTTSerialize_connect+0x204>
	{
		writeMQTTString(&ptr, options->will.topicName);
   30924:	687b      	ldr	r3, [r7, #4]
   30926:	221c      	movs	r2, #28
   30928:	18b8      	adds	r0, r7, r2
   3092a:	6a59      	ldr	r1, [r3, #36]	; 0x24
   3092c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   3092e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   30930:	4c21      	ldr	r4, [pc, #132]	; (309b8 <MQTTSerialize_connect+0x278>)
   30932:	47a0      	blx	r4
		writeMQTTString(&ptr, options->will.message);
   30934:	687b      	ldr	r3, [r7, #4]
   30936:	221c      	movs	r2, #28
   30938:	18b8      	adds	r0, r7, r2
   3093a:	6b19      	ldr	r1, [r3, #48]	; 0x30
   3093c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   3093e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   30940:	4c1d      	ldr	r4, [pc, #116]	; (309b8 <MQTTSerialize_connect+0x278>)
   30942:	47a0      	blx	r4
	}
	if (flags.bits.username)
   30944:	2314      	movs	r3, #20
   30946:	18fb      	adds	r3, r7, r3
   30948:	781b      	ldrb	r3, [r3, #0]
   3094a:	227f      	movs	r2, #127	; 0x7f
   3094c:	4393      	bics	r3, r2
   3094e:	b2db      	uxtb	r3, r3
   30950:	2b00      	cmp	r3, #0
   30952:	d007      	beq.n	30964 <MQTTSerialize_connect+0x224>
		writeMQTTString(&ptr, options->username);
   30954:	687b      	ldr	r3, [r7, #4]
   30956:	221c      	movs	r2, #28
   30958:	18b8      	adds	r0, r7, r2
   3095a:	6c19      	ldr	r1, [r3, #64]	; 0x40
   3095c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   3095e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   30960:	4c15      	ldr	r4, [pc, #84]	; (309b8 <MQTTSerialize_connect+0x278>)
   30962:	47a0      	blx	r4
	if (flags.bits.password)
   30964:	2314      	movs	r3, #20
   30966:	18fb      	adds	r3, r7, r3
   30968:	781b      	ldrb	r3, [r3, #0]
   3096a:	2240      	movs	r2, #64	; 0x40
   3096c:	4013      	ands	r3, r2
   3096e:	b2db      	uxtb	r3, r3
   30970:	2b00      	cmp	r3, #0
   30972:	d007      	beq.n	30984 <MQTTSerialize_connect+0x244>
		writeMQTTString(&ptr, options->password);
   30974:	687b      	ldr	r3, [r7, #4]
   30976:	221c      	movs	r2, #28
   30978:	18b8      	adds	r0, r7, r2
   3097a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   3097c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   3097e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   30980:	4c0d      	ldr	r4, [pc, #52]	; (309b8 <MQTTSerialize_connect+0x278>)
   30982:	47a0      	blx	r4

	rc = ptr - buf;
   30984:	69fb      	ldr	r3, [r7, #28]
   30986:	001a      	movs	r2, r3
   30988:	68fb      	ldr	r3, [r7, #12]
   3098a:	1ad3      	subs	r3, r2, r3
   3098c:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
   3098e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30990:	0018      	movs	r0, r3
   30992:	46bd      	mov	sp, r7
   30994:	b00b      	add	sp, #44	; 0x2c
   30996:	bd90      	pop	{r4, r7, pc}
   30998:	00030679 	.word	0x00030679
   3099c:	00030e0d 	.word	0x00030e0d
   309a0:	00030f2f 	.word	0x00030f2f
   309a4:	00030d15 	.word	0x00030d15
   309a8:	0003a9f0 	.word	0x0003a9f0
   309ac:	00030fb1 	.word	0x00030fb1
   309b0:	0003a9f8 	.word	0x0003a9f8
   309b4:	00030f59 	.word	0x00030f59
   309b8:	00031001 	.word	0x00031001

000309bc <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   309bc:	b580      	push	{r7, lr}
   309be:	b08a      	sub	sp, #40	; 0x28
   309c0:	af00      	add	r7, sp, #0
   309c2:	60f8      	str	r0, [r7, #12]
   309c4:	60b9      	str	r1, [r7, #8]
   309c6:	607a      	str	r2, [r7, #4]
   309c8:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   309ca:	2300      	movs	r3, #0
   309cc:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   309ce:	687b      	ldr	r3, [r7, #4]
   309d0:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   309d2:	2300      	movs	r3, #0
   309d4:	623b      	str	r3, [r7, #32]
	int rc = 0;
   309d6:	2300      	movs	r3, #0
   309d8:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
   309da:	2300      	movs	r3, #0
   309dc:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   309de:	2318      	movs	r3, #24
   309e0:	18fb      	adds	r3, r7, r3
   309e2:	0018      	movs	r0, r3
   309e4:	4b25      	ldr	r3, [pc, #148]	; (30a7c <MQTTDeserialize_connack+0xc0>)
   309e6:	4798      	blx	r3
   309e8:	0003      	movs	r3, r0
   309ea:	001a      	movs	r2, r3
   309ec:	231c      	movs	r3, #28
   309ee:	18fb      	adds	r3, r7, r3
   309f0:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != CONNACK)
   309f2:	231c      	movs	r3, #28
   309f4:	18fb      	adds	r3, r7, r3
   309f6:	781b      	ldrb	r3, [r3, #0]
   309f8:	220f      	movs	r2, #15
   309fa:	4393      	bics	r3, r2
   309fc:	b2db      	uxtb	r3, r3
   309fe:	2b20      	cmp	r3, #32
   30a00:	d134      	bne.n	30a6c <MQTTDeserialize_connack+0xb0>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   30a02:	69bb      	ldr	r3, [r7, #24]
   30a04:	2214      	movs	r2, #20
   30a06:	18ba      	adds	r2, r7, r2
   30a08:	0011      	movs	r1, r2
   30a0a:	0018      	movs	r0, r3
   30a0c:	4b1c      	ldr	r3, [pc, #112]	; (30a80 <MQTTDeserialize_connack+0xc4>)
   30a0e:	4798      	blx	r3
   30a10:	0003      	movs	r3, r0
   30a12:	627b      	str	r3, [r7, #36]	; 0x24
   30a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30a16:	69bb      	ldr	r3, [r7, #24]
   30a18:	189b      	adds	r3, r3, r2
   30a1a:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   30a1c:	69bb      	ldr	r3, [r7, #24]
   30a1e:	697a      	ldr	r2, [r7, #20]
   30a20:	189b      	adds	r3, r3, r2
   30a22:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   30a24:	6a3b      	ldr	r3, [r7, #32]
   30a26:	69ba      	ldr	r2, [r7, #24]
   30a28:	1a9b      	subs	r3, r3, r2
   30a2a:	2b01      	cmp	r3, #1
   30a2c:	dd20      	ble.n	30a70 <MQTTDeserialize_connack+0xb4>
		goto exit;

	flags.all = readChar(&curdata);
   30a2e:	2318      	movs	r3, #24
   30a30:	18fb      	adds	r3, r7, r3
   30a32:	0018      	movs	r0, r3
   30a34:	4b11      	ldr	r3, [pc, #68]	; (30a7c <MQTTDeserialize_connack+0xc0>)
   30a36:	4798      	blx	r3
   30a38:	0003      	movs	r3, r0
   30a3a:	001a      	movs	r2, r3
   30a3c:	2310      	movs	r3, #16
   30a3e:	18fb      	adds	r3, r7, r3
   30a40:	701a      	strb	r2, [r3, #0]
	*sessionPresent = flags.bits.sessionpresent;
   30a42:	2310      	movs	r3, #16
   30a44:	18fb      	adds	r3, r7, r3
   30a46:	781b      	ldrb	r3, [r3, #0]
   30a48:	061b      	lsls	r3, r3, #24
   30a4a:	0fdb      	lsrs	r3, r3, #31
   30a4c:	b2db      	uxtb	r3, r3
   30a4e:	001a      	movs	r2, r3
   30a50:	68fb      	ldr	r3, [r7, #12]
   30a52:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
   30a54:	2318      	movs	r3, #24
   30a56:	18fb      	adds	r3, r7, r3
   30a58:	0018      	movs	r0, r3
   30a5a:	4b08      	ldr	r3, [pc, #32]	; (30a7c <MQTTDeserialize_connack+0xc0>)
   30a5c:	4798      	blx	r3
   30a5e:	0003      	movs	r3, r0
   30a60:	001a      	movs	r2, r3
   30a62:	68bb      	ldr	r3, [r7, #8]
   30a64:	701a      	strb	r2, [r3, #0]

	rc = 1;
   30a66:	2301      	movs	r3, #1
   30a68:	627b      	str	r3, [r7, #36]	; 0x24
   30a6a:	e002      	b.n	30a72 <MQTTDeserialize_connack+0xb6>
		goto exit;
   30a6c:	46c0      	nop			; (mov r8, r8)
   30a6e:	e000      	b.n	30a72 <MQTTDeserialize_connack+0xb6>
		goto exit;
   30a70:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30a74:	0018      	movs	r0, r3
   30a76:	46bd      	mov	sp, r7
   30a78:	b00a      	add	sp, #40	; 0x28
   30a7a:	bd80      	pop	{r7, pc}
   30a7c:	00030f03 	.word	0x00030f03
   30a80:	00030e9d 	.word	0x00030e9d

00030a84 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   30a84:	b580      	push	{r7, lr}
   30a86:	b088      	sub	sp, #32
   30a88:	af00      	add	r7, sp, #0
   30a8a:	60f8      	str	r0, [r7, #12]
   30a8c:	60b9      	str	r1, [r7, #8]
   30a8e:	1dfb      	adds	r3, r7, #7
   30a90:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   30a92:	2300      	movs	r3, #0
   30a94:	61bb      	str	r3, [r7, #24]
	int rc = -1;
   30a96:	2301      	movs	r3, #1
   30a98:	425b      	negs	r3, r3
   30a9a:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   30a9c:	68fb      	ldr	r3, [r7, #12]
   30a9e:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
   30aa0:	68bb      	ldr	r3, [r7, #8]
   30aa2:	2b01      	cmp	r3, #1
   30aa4:	dc03      	bgt.n	30aae <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   30aa6:	2302      	movs	r3, #2
   30aa8:	425b      	negs	r3, r3
   30aaa:	61fb      	str	r3, [r7, #28]
		goto exit;
   30aac:	e029      	b.n	30b02 <MQTTSerialize_zero+0x7e>
	}
	header.byte = 0;
   30aae:	2318      	movs	r3, #24
   30ab0:	18fb      	adds	r3, r7, r3
   30ab2:	2200      	movs	r2, #0
   30ab4:	701a      	strb	r2, [r3, #0]
	header.bits.type = packettype;
   30ab6:	1dfb      	adds	r3, r7, #7
   30ab8:	781b      	ldrb	r3, [r3, #0]
   30aba:	220f      	movs	r2, #15
   30abc:	4013      	ands	r3, r2
   30abe:	b2da      	uxtb	r2, r3
   30ac0:	2318      	movs	r3, #24
   30ac2:	18fb      	adds	r3, r7, r3
   30ac4:	0110      	lsls	r0, r2, #4
   30ac6:	781a      	ldrb	r2, [r3, #0]
   30ac8:	210f      	movs	r1, #15
   30aca:	400a      	ands	r2, r1
   30acc:	1c11      	adds	r1, r2, #0
   30ace:	1c02      	adds	r2, r0, #0
   30ad0:	430a      	orrs	r2, r1
   30ad2:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   30ad4:	2318      	movs	r3, #24
   30ad6:	18fb      	adds	r3, r7, r3
   30ad8:	781a      	ldrb	r2, [r3, #0]
   30ada:	2314      	movs	r3, #20
   30adc:	18fb      	adds	r3, r7, r3
   30ade:	0011      	movs	r1, r2
   30ae0:	0018      	movs	r0, r3
   30ae2:	4b0a      	ldr	r3, [pc, #40]	; (30b0c <MQTTSerialize_zero+0x88>)
   30ae4:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   30ae6:	697b      	ldr	r3, [r7, #20]
   30ae8:	2100      	movs	r1, #0
   30aea:	0018      	movs	r0, r3
   30aec:	4b08      	ldr	r3, [pc, #32]	; (30b10 <MQTTSerialize_zero+0x8c>)
   30aee:	4798      	blx	r3
   30af0:	0002      	movs	r2, r0
   30af2:	697b      	ldr	r3, [r7, #20]
   30af4:	189b      	adds	r3, r3, r2
   30af6:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
   30af8:	697b      	ldr	r3, [r7, #20]
   30afa:	001a      	movs	r2, r3
   30afc:	68fb      	ldr	r3, [r7, #12]
   30afe:	1ad3      	subs	r3, r2, r3
   30b00:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30b02:	69fb      	ldr	r3, [r7, #28]
}
   30b04:	0018      	movs	r0, r3
   30b06:	46bd      	mov	sp, r7
   30b08:	b008      	add	sp, #32
   30b0a:	bd80      	pop	{r7, pc}
   30b0c:	00030f2f 	.word	0x00030f2f
   30b10:	00030d15 	.word	0x00030d15

00030b14 <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   30b14:	b580      	push	{r7, lr}
   30b16:	b082      	sub	sp, #8
   30b18:	af00      	add	r7, sp, #0
   30b1a:	6078      	str	r0, [r7, #4]
   30b1c:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   30b1e:	6839      	ldr	r1, [r7, #0]
   30b20:	687b      	ldr	r3, [r7, #4]
   30b22:	220e      	movs	r2, #14
   30b24:	0018      	movs	r0, r3
   30b26:	4b03      	ldr	r3, [pc, #12]	; (30b34 <MQTTSerialize_disconnect+0x20>)
   30b28:	4798      	blx	r3
   30b2a:	0003      	movs	r3, r0
}
   30b2c:	0018      	movs	r0, r3
   30b2e:	46bd      	mov	sp, r7
   30b30:	b002      	add	sp, #8
   30b32:	bd80      	pop	{r7, pc}
   30b34:	00030a85 	.word	0x00030a85

00030b38 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   30b38:	b580      	push	{r7, lr}
   30b3a:	b082      	sub	sp, #8
   30b3c:	af00      	add	r7, sp, #0
   30b3e:	6078      	str	r0, [r7, #4]
   30b40:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   30b42:	6839      	ldr	r1, [r7, #0]
   30b44:	687b      	ldr	r3, [r7, #4]
   30b46:	220c      	movs	r2, #12
   30b48:	0018      	movs	r0, r3
   30b4a:	4b03      	ldr	r3, [pc, #12]	; (30b58 <MQTTSerialize_pingreq+0x20>)
   30b4c:	4798      	blx	r3
   30b4e:	0003      	movs	r3, r0
}
   30b50:	0018      	movs	r0, r3
   30b52:	46bd      	mov	sp, r7
   30b54:	b002      	add	sp, #8
   30b56:	bd80      	pop	{r7, pc}
   30b58:	00030a85 	.word	0x00030a85

00030b5c <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   30b5c:	b580      	push	{r7, lr}
   30b5e:	b08a      	sub	sp, #40	; 0x28
   30b60:	af00      	add	r7, sp, #0
   30b62:	60f8      	str	r0, [r7, #12]
   30b64:	60b9      	str	r1, [r7, #8]
   30b66:	607a      	str	r2, [r7, #4]
   30b68:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   30b6a:	2300      	movs	r3, #0
   30b6c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   30b6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   30b70:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   30b72:	2300      	movs	r3, #0
   30b74:	623b      	str	r3, [r7, #32]
	int rc = 0;
   30b76:	2300      	movs	r3, #0
   30b78:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
   30b7a:	2300      	movs	r3, #0
   30b7c:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   30b7e:	2318      	movs	r3, #24
   30b80:	18fb      	adds	r3, r7, r3
   30b82:	0018      	movs	r0, r3
   30b84:	4b32      	ldr	r3, [pc, #200]	; (30c50 <MQTTDeserialize_publish+0xf4>)
   30b86:	4798      	blx	r3
   30b88:	0003      	movs	r3, r0
   30b8a:	001a      	movs	r2, r3
   30b8c:	231c      	movs	r3, #28
   30b8e:	18fb      	adds	r3, r7, r3
   30b90:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != PUBLISH)
   30b92:	231c      	movs	r3, #28
   30b94:	18fb      	adds	r3, r7, r3
   30b96:	781b      	ldrb	r3, [r3, #0]
   30b98:	220f      	movs	r2, #15
   30b9a:	4393      	bics	r3, r2
   30b9c:	b2db      	uxtb	r3, r3
   30b9e:	2b30      	cmp	r3, #48	; 0x30
   30ba0:	d150      	bne.n	30c44 <MQTTDeserialize_publish+0xe8>
		goto exit;
	*dup = header.bits.dup;
   30ba2:	231c      	movs	r3, #28
   30ba4:	18fb      	adds	r3, r7, r3
   30ba6:	781b      	ldrb	r3, [r3, #0]
   30ba8:	071b      	lsls	r3, r3, #28
   30baa:	0fdb      	lsrs	r3, r3, #31
   30bac:	b2db      	uxtb	r3, r3
   30bae:	001a      	movs	r2, r3
   30bb0:	68fb      	ldr	r3, [r7, #12]
   30bb2:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
   30bb4:	231c      	movs	r3, #28
   30bb6:	18fb      	adds	r3, r7, r3
   30bb8:	781b      	ldrb	r3, [r3, #0]
   30bba:	075b      	lsls	r3, r3, #29
   30bbc:	0f9b      	lsrs	r3, r3, #30
   30bbe:	b2db      	uxtb	r3, r3
   30bc0:	001a      	movs	r2, r3
   30bc2:	68bb      	ldr	r3, [r7, #8]
   30bc4:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
   30bc6:	231c      	movs	r3, #28
   30bc8:	18fb      	adds	r3, r7, r3
   30bca:	781b      	ldrb	r3, [r3, #0]
   30bcc:	07db      	lsls	r3, r3, #31
   30bce:	0fdb      	lsrs	r3, r3, #31
   30bd0:	b2db      	uxtb	r3, r3
   30bd2:	001a      	movs	r2, r3
   30bd4:	687b      	ldr	r3, [r7, #4]
   30bd6:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   30bd8:	69bb      	ldr	r3, [r7, #24]
   30bda:	2214      	movs	r2, #20
   30bdc:	18ba      	adds	r2, r7, r2
   30bde:	0011      	movs	r1, r2
   30be0:	0018      	movs	r0, r3
   30be2:	4b1c      	ldr	r3, [pc, #112]	; (30c54 <MQTTDeserialize_publish+0xf8>)
   30be4:	4798      	blx	r3
   30be6:	0003      	movs	r3, r0
   30be8:	627b      	str	r3, [r7, #36]	; 0x24
   30bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30bec:	69bb      	ldr	r3, [r7, #24]
   30bee:	189b      	adds	r3, r3, r2
   30bf0:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   30bf2:	69bb      	ldr	r3, [r7, #24]
   30bf4:	697a      	ldr	r2, [r7, #20]
   30bf6:	189b      	adds	r3, r3, r2
   30bf8:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   30bfa:	6a3a      	ldr	r2, [r7, #32]
   30bfc:	2318      	movs	r3, #24
   30bfe:	18f9      	adds	r1, r7, r3
   30c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30c02:	0018      	movs	r0, r3
   30c04:	4b14      	ldr	r3, [pc, #80]	; (30c58 <MQTTDeserialize_publish+0xfc>)
   30c06:	4798      	blx	r3
   30c08:	1e03      	subs	r3, r0, #0
   30c0a:	d01c      	beq.n	30c46 <MQTTDeserialize_publish+0xea>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   30c0c:	6a3b      	ldr	r3, [r7, #32]
   30c0e:	69ba      	ldr	r2, [r7, #24]
   30c10:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   30c12:	d418      	bmi.n	30c46 <MQTTDeserialize_publish+0xea>
		goto exit;

	if (*qos > 0)
   30c14:	68bb      	ldr	r3, [r7, #8]
   30c16:	681b      	ldr	r3, [r3, #0]
   30c18:	2b00      	cmp	r3, #0
   30c1a:	dd08      	ble.n	30c2e <MQTTDeserialize_publish+0xd2>
		*packetid = readInt(&curdata);
   30c1c:	2318      	movs	r3, #24
   30c1e:	18fb      	adds	r3, r7, r3
   30c20:	0018      	movs	r0, r3
   30c22:	4b0e      	ldr	r3, [pc, #56]	; (30c5c <MQTTDeserialize_publish+0x100>)
   30c24:	4798      	blx	r3
   30c26:	0003      	movs	r3, r0
   30c28:	b29a      	uxth	r2, r3
   30c2a:	683b      	ldr	r3, [r7, #0]
   30c2c:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
   30c2e:	6a3b      	ldr	r3, [r7, #32]
   30c30:	69ba      	ldr	r2, [r7, #24]
   30c32:	1a9a      	subs	r2, r3, r2
   30c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   30c36:	601a      	str	r2, [r3, #0]
	*payload = curdata;
   30c38:	69ba      	ldr	r2, [r7, #24]
   30c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   30c3c:	601a      	str	r2, [r3, #0]
	rc = 1;
   30c3e:	2301      	movs	r3, #1
   30c40:	627b      	str	r3, [r7, #36]	; 0x24
   30c42:	e000      	b.n	30c46 <MQTTDeserialize_publish+0xea>
		goto exit;
   30c44:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30c48:	0018      	movs	r0, r3
   30c4a:	46bd      	mov	sp, r7
   30c4c:	b00a      	add	sp, #40	; 0x28
   30c4e:	bd80      	pop	{r7, pc}
   30c50:	00030f03 	.word	0x00030f03
   30c54:	00030e9d 	.word	0x00030e9d
   30c58:	00031081 	.word	0x00031081
   30c5c:	00030ed1 	.word	0x00030ed1

00030c60 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   30c60:	b580      	push	{r7, lr}
   30c62:	b08a      	sub	sp, #40	; 0x28
   30c64:	af00      	add	r7, sp, #0
   30c66:	60f8      	str	r0, [r7, #12]
   30c68:	60b9      	str	r1, [r7, #8]
   30c6a:	607a      	str	r2, [r7, #4]
   30c6c:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   30c6e:	2300      	movs	r3, #0
   30c70:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   30c72:	683b      	ldr	r3, [r7, #0]
   30c74:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   30c76:	2300      	movs	r3, #0
   30c78:	623b      	str	r3, [r7, #32]
	int rc = 0;
   30c7a:	2300      	movs	r3, #0
   30c7c:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   30c7e:	2318      	movs	r3, #24
   30c80:	18fb      	adds	r3, r7, r3
   30c82:	0018      	movs	r0, r3
   30c84:	4b20      	ldr	r3, [pc, #128]	; (30d08 <MQTTDeserialize_ack+0xa8>)
   30c86:	4798      	blx	r3
   30c88:	0003      	movs	r3, r0
   30c8a:	001a      	movs	r2, r3
   30c8c:	231c      	movs	r3, #28
   30c8e:	18fb      	adds	r3, r7, r3
   30c90:	701a      	strb	r2, [r3, #0]
	*dup = header.bits.dup;
   30c92:	231c      	movs	r3, #28
   30c94:	18fb      	adds	r3, r7, r3
   30c96:	781b      	ldrb	r3, [r3, #0]
   30c98:	071b      	lsls	r3, r3, #28
   30c9a:	0fdb      	lsrs	r3, r3, #31
   30c9c:	b2db      	uxtb	r3, r3
   30c9e:	001a      	movs	r2, r3
   30ca0:	68bb      	ldr	r3, [r7, #8]
   30ca2:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
   30ca4:	231c      	movs	r3, #28
   30ca6:	18fb      	adds	r3, r7, r3
   30ca8:	781b      	ldrb	r3, [r3, #0]
   30caa:	061b      	lsls	r3, r3, #24
   30cac:	0f1b      	lsrs	r3, r3, #28
   30cae:	b2db      	uxtb	r3, r3
   30cb0:	001a      	movs	r2, r3
   30cb2:	68fb      	ldr	r3, [r7, #12]
   30cb4:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   30cb6:	69bb      	ldr	r3, [r7, #24]
   30cb8:	2214      	movs	r2, #20
   30cba:	18ba      	adds	r2, r7, r2
   30cbc:	0011      	movs	r1, r2
   30cbe:	0018      	movs	r0, r3
   30cc0:	4b12      	ldr	r3, [pc, #72]	; (30d0c <MQTTDeserialize_ack+0xac>)
   30cc2:	4798      	blx	r3
   30cc4:	0003      	movs	r3, r0
   30cc6:	627b      	str	r3, [r7, #36]	; 0x24
   30cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30cca:	69bb      	ldr	r3, [r7, #24]
   30ccc:	189b      	adds	r3, r3, r2
   30cce:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   30cd0:	69bb      	ldr	r3, [r7, #24]
   30cd2:	697a      	ldr	r2, [r7, #20]
   30cd4:	189b      	adds	r3, r3, r2
   30cd6:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
   30cd8:	6a3b      	ldr	r3, [r7, #32]
   30cda:	69ba      	ldr	r2, [r7, #24]
   30cdc:	1a9b      	subs	r3, r3, r2
   30cde:	2b01      	cmp	r3, #1
   30ce0:	dd0b      	ble.n	30cfa <MQTTDeserialize_ack+0x9a>
		goto exit;
	*packetid = readInt(&curdata);
   30ce2:	2318      	movs	r3, #24
   30ce4:	18fb      	adds	r3, r7, r3
   30ce6:	0018      	movs	r0, r3
   30ce8:	4b09      	ldr	r3, [pc, #36]	; (30d10 <MQTTDeserialize_ack+0xb0>)
   30cea:	4798      	blx	r3
   30cec:	0003      	movs	r3, r0
   30cee:	b29a      	uxth	r2, r3
   30cf0:	687b      	ldr	r3, [r7, #4]
   30cf2:	801a      	strh	r2, [r3, #0]

	rc = 1;
   30cf4:	2301      	movs	r3, #1
   30cf6:	627b      	str	r3, [r7, #36]	; 0x24
   30cf8:	e000      	b.n	30cfc <MQTTDeserialize_ack+0x9c>
		goto exit;
   30cfa:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30cfe:	0018      	movs	r0, r3
   30d00:	46bd      	mov	sp, r7
   30d02:	b00a      	add	sp, #40	; 0x28
   30d04:	bd80      	pop	{r7, pc}
   30d06:	46c0      	nop			; (mov r8, r8)
   30d08:	00030f03 	.word	0x00030f03
   30d0c:	00030e9d 	.word	0x00030e9d
   30d10:	00030ed1 	.word	0x00030ed1

00030d14 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
   30d14:	b580      	push	{r7, lr}
   30d16:	b084      	sub	sp, #16
   30d18:	af00      	add	r7, sp, #0
   30d1a:	6078      	str	r0, [r7, #4]
   30d1c:	6039      	str	r1, [r7, #0]
	int rc = 0;
   30d1e:	2300      	movs	r3, #0
   30d20:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
   30d22:	683b      	ldr	r3, [r7, #0]
   30d24:	4a17      	ldr	r2, [pc, #92]	; (30d84 <MQTTPacket_encode+0x70>)
   30d26:	4013      	ands	r3, r2
   30d28:	d504      	bpl.n	30d34 <MQTTPacket_encode+0x20>
   30d2a:	3b01      	subs	r3, #1
   30d2c:	2280      	movs	r2, #128	; 0x80
   30d2e:	4252      	negs	r2, r2
   30d30:	4313      	orrs	r3, r2
   30d32:	3301      	adds	r3, #1
   30d34:	001a      	movs	r2, r3
   30d36:	230b      	movs	r3, #11
   30d38:	18fb      	adds	r3, r7, r3
   30d3a:	701a      	strb	r2, [r3, #0]
		length /= 128;
   30d3c:	683b      	ldr	r3, [r7, #0]
   30d3e:	2b00      	cmp	r3, #0
   30d40:	da00      	bge.n	30d44 <MQTTPacket_encode+0x30>
   30d42:	337f      	adds	r3, #127	; 0x7f
   30d44:	11db      	asrs	r3, r3, #7
   30d46:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
   30d48:	683b      	ldr	r3, [r7, #0]
   30d4a:	2b00      	cmp	r3, #0
   30d4c:	dd08      	ble.n	30d60 <MQTTPacket_encode+0x4c>
			d |= 0x80;
   30d4e:	230b      	movs	r3, #11
   30d50:	18fb      	adds	r3, r7, r3
   30d52:	220b      	movs	r2, #11
   30d54:	18ba      	adds	r2, r7, r2
   30d56:	7812      	ldrb	r2, [r2, #0]
   30d58:	2180      	movs	r1, #128	; 0x80
   30d5a:	4249      	negs	r1, r1
   30d5c:	430a      	orrs	r2, r1
   30d5e:	701a      	strb	r2, [r3, #0]
		buf[rc++] = d;
   30d60:	68fb      	ldr	r3, [r7, #12]
   30d62:	1c5a      	adds	r2, r3, #1
   30d64:	60fa      	str	r2, [r7, #12]
   30d66:	001a      	movs	r2, r3
   30d68:	687b      	ldr	r3, [r7, #4]
   30d6a:	189b      	adds	r3, r3, r2
   30d6c:	220b      	movs	r2, #11
   30d6e:	18ba      	adds	r2, r7, r2
   30d70:	7812      	ldrb	r2, [r2, #0]
   30d72:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
   30d74:	683b      	ldr	r3, [r7, #0]
   30d76:	2b00      	cmp	r3, #0
   30d78:	dcd3      	bgt.n	30d22 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
   30d7a:	68fb      	ldr	r3, [r7, #12]
}
   30d7c:	0018      	movs	r0, r3
   30d7e:	46bd      	mov	sp, r7
   30d80:	b004      	add	sp, #16
   30d82:	bd80      	pop	{r7, pc}
   30d84:	8000007f 	.word	0x8000007f

00030d88 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
   30d88:	b580      	push	{r7, lr}
   30d8a:	b086      	sub	sp, #24
   30d8c:	af00      	add	r7, sp, #0
   30d8e:	6078      	str	r0, [r7, #4]
   30d90:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
   30d92:	2301      	movs	r3, #1
   30d94:	617b      	str	r3, [r7, #20]
	int len = 0;
   30d96:	2300      	movs	r3, #0
   30d98:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
   30d9a:	683b      	ldr	r3, [r7, #0]
   30d9c:	2200      	movs	r2, #0
   30d9e:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
   30da0:	2301      	movs	r3, #1
   30da2:	425b      	negs	r3, r3
   30da4:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   30da6:	693b      	ldr	r3, [r7, #16]
   30da8:	3301      	adds	r3, #1
   30daa:	613b      	str	r3, [r7, #16]
   30dac:	693b      	ldr	r3, [r7, #16]
   30dae:	2b04      	cmp	r3, #4
   30db0:	dd03      	ble.n	30dba <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
   30db2:	2301      	movs	r3, #1
   30db4:	425b      	negs	r3, r3
   30db6:	60fb      	str	r3, [r7, #12]
			goto exit;
   30db8:	e022      	b.n	30e00 <MQTTPacket_decode+0x78>
		}
		rc = (*getcharfn)(&c, 1);
   30dba:	230b      	movs	r3, #11
   30dbc:	18fa      	adds	r2, r7, r3
   30dbe:	687b      	ldr	r3, [r7, #4]
   30dc0:	2101      	movs	r1, #1
   30dc2:	0010      	movs	r0, r2
   30dc4:	4798      	blx	r3
   30dc6:	0003      	movs	r3, r0
   30dc8:	60fb      	str	r3, [r7, #12]
		if (rc != 1)
   30dca:	68fb      	ldr	r3, [r7, #12]
   30dcc:	2b01      	cmp	r3, #1
   30dce:	d116      	bne.n	30dfe <MQTTPacket_decode+0x76>
			goto exit;
		*value += (c & 127) * multiplier;
   30dd0:	683b      	ldr	r3, [r7, #0]
   30dd2:	681a      	ldr	r2, [r3, #0]
   30dd4:	230b      	movs	r3, #11
   30dd6:	18fb      	adds	r3, r7, r3
   30dd8:	781b      	ldrb	r3, [r3, #0]
   30dda:	0019      	movs	r1, r3
   30ddc:	237f      	movs	r3, #127	; 0x7f
   30dde:	400b      	ands	r3, r1
   30de0:	6979      	ldr	r1, [r7, #20]
   30de2:	434b      	muls	r3, r1
   30de4:	18d2      	adds	r2, r2, r3
   30de6:	683b      	ldr	r3, [r7, #0]
   30de8:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
   30dea:	697b      	ldr	r3, [r7, #20]
   30dec:	01db      	lsls	r3, r3, #7
   30dee:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
   30df0:	230b      	movs	r3, #11
   30df2:	18fb      	adds	r3, r7, r3
   30df4:	781b      	ldrb	r3, [r3, #0]
   30df6:	b25b      	sxtb	r3, r3
   30df8:	2b00      	cmp	r3, #0
   30dfa:	dbd1      	blt.n	30da0 <MQTTPacket_decode+0x18>
   30dfc:	e000      	b.n	30e00 <MQTTPacket_decode+0x78>
			goto exit;
   30dfe:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(len);
	return len;
   30e00:	693b      	ldr	r3, [r7, #16]
}
   30e02:	0018      	movs	r0, r3
   30e04:	46bd      	mov	sp, r7
   30e06:	b006      	add	sp, #24
   30e08:	bd80      	pop	{r7, pc}
	...

00030e0c <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
   30e0c:	b580      	push	{r7, lr}
   30e0e:	b082      	sub	sp, #8
   30e10:	af00      	add	r7, sp, #0
   30e12:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
   30e14:	687b      	ldr	r3, [r7, #4]
   30e16:	3301      	adds	r3, #1
   30e18:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
   30e1a:	687b      	ldr	r3, [r7, #4]
   30e1c:	2b7f      	cmp	r3, #127	; 0x7f
   30e1e:	dc03      	bgt.n	30e28 <MQTTPacket_len+0x1c>
		rem_len += 1;
   30e20:	687b      	ldr	r3, [r7, #4]
   30e22:	3301      	adds	r3, #1
   30e24:	607b      	str	r3, [r7, #4]
   30e26:	e012      	b.n	30e4e <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
   30e28:	687b      	ldr	r3, [r7, #4]
   30e2a:	4a0b      	ldr	r2, [pc, #44]	; (30e58 <MQTTPacket_len+0x4c>)
   30e2c:	4293      	cmp	r3, r2
   30e2e:	dc03      	bgt.n	30e38 <MQTTPacket_len+0x2c>
		rem_len += 2;
   30e30:	687b      	ldr	r3, [r7, #4]
   30e32:	3302      	adds	r3, #2
   30e34:	607b      	str	r3, [r7, #4]
   30e36:	e00a      	b.n	30e4e <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
   30e38:	687b      	ldr	r3, [r7, #4]
   30e3a:	4a08      	ldr	r2, [pc, #32]	; (30e5c <MQTTPacket_len+0x50>)
   30e3c:	4293      	cmp	r3, r2
   30e3e:	dc03      	bgt.n	30e48 <MQTTPacket_len+0x3c>
		rem_len += 3;
   30e40:	687b      	ldr	r3, [r7, #4]
   30e42:	3303      	adds	r3, #3
   30e44:	607b      	str	r3, [r7, #4]
   30e46:	e002      	b.n	30e4e <MQTTPacket_len+0x42>
	else
		rem_len += 4;
   30e48:	687b      	ldr	r3, [r7, #4]
   30e4a:	3304      	adds	r3, #4
   30e4c:	607b      	str	r3, [r7, #4]
	return rem_len;
   30e4e:	687b      	ldr	r3, [r7, #4]
}
   30e50:	0018      	movs	r0, r3
   30e52:	46bd      	mov	sp, r7
   30e54:	b002      	add	sp, #8
   30e56:	bd80      	pop	{r7, pc}
   30e58:	00003fff 	.word	0x00003fff
   30e5c:	001ffffe 	.word	0x001ffffe

00030e60 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   30e60:	b580      	push	{r7, lr}
   30e62:	b084      	sub	sp, #16
   30e64:	af00      	add	r7, sp, #0
   30e66:	6078      	str	r0, [r7, #4]
   30e68:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
   30e6a:	2300      	movs	r3, #0
   30e6c:	60fb      	str	r3, [r7, #12]
   30e6e:	e00a      	b.n	30e86 <bufchar+0x26>
		*c = *bufptr++;
   30e70:	4b09      	ldr	r3, [pc, #36]	; (30e98 <bufchar+0x38>)
   30e72:	681b      	ldr	r3, [r3, #0]
   30e74:	1c59      	adds	r1, r3, #1
   30e76:	4a08      	ldr	r2, [pc, #32]	; (30e98 <bufchar+0x38>)
   30e78:	6011      	str	r1, [r2, #0]
   30e7a:	781a      	ldrb	r2, [r3, #0]
   30e7c:	687b      	ldr	r3, [r7, #4]
   30e7e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
   30e80:	68fb      	ldr	r3, [r7, #12]
   30e82:	3301      	adds	r3, #1
   30e84:	60fb      	str	r3, [r7, #12]
   30e86:	68fa      	ldr	r2, [r7, #12]
   30e88:	683b      	ldr	r3, [r7, #0]
   30e8a:	429a      	cmp	r2, r3
   30e8c:	dbf0      	blt.n	30e70 <bufchar+0x10>
	return count;
   30e8e:	683b      	ldr	r3, [r7, #0]
}
   30e90:	0018      	movs	r0, r3
   30e92:	46bd      	mov	sp, r7
   30e94:	b004      	add	sp, #16
   30e96:	bd80      	pop	{r7, pc}
   30e98:	200046f0 	.word	0x200046f0

00030e9c <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   30e9c:	b580      	push	{r7, lr}
   30e9e:	b082      	sub	sp, #8
   30ea0:	af00      	add	r7, sp, #0
   30ea2:	6078      	str	r0, [r7, #4]
   30ea4:	6039      	str	r1, [r7, #0]
	bufptr = buf;
   30ea6:	4b07      	ldr	r3, [pc, #28]	; (30ec4 <MQTTPacket_decodeBuf+0x28>)
   30ea8:	687a      	ldr	r2, [r7, #4]
   30eaa:	601a      	str	r2, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   30eac:	683a      	ldr	r2, [r7, #0]
   30eae:	4b06      	ldr	r3, [pc, #24]	; (30ec8 <MQTTPacket_decodeBuf+0x2c>)
   30eb0:	0011      	movs	r1, r2
   30eb2:	0018      	movs	r0, r3
   30eb4:	4b05      	ldr	r3, [pc, #20]	; (30ecc <MQTTPacket_decodeBuf+0x30>)
   30eb6:	4798      	blx	r3
   30eb8:	0003      	movs	r3, r0
}
   30eba:	0018      	movs	r0, r3
   30ebc:	46bd      	mov	sp, r7
   30ebe:	b002      	add	sp, #8
   30ec0:	bd80      	pop	{r7, pc}
   30ec2:	46c0      	nop			; (mov r8, r8)
   30ec4:	200046f0 	.word	0x200046f0
   30ec8:	00030e61 	.word	0x00030e61
   30ecc:	00030d89 	.word	0x00030d89

00030ed0 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   30ed0:	b580      	push	{r7, lr}
   30ed2:	b084      	sub	sp, #16
   30ed4:	af00      	add	r7, sp, #0
   30ed6:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
   30ed8:	687b      	ldr	r3, [r7, #4]
   30eda:	681b      	ldr	r3, [r3, #0]
   30edc:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
   30ede:	68fb      	ldr	r3, [r7, #12]
   30ee0:	781b      	ldrb	r3, [r3, #0]
   30ee2:	021b      	lsls	r3, r3, #8
   30ee4:	68fa      	ldr	r2, [r7, #12]
   30ee6:	3201      	adds	r2, #1
   30ee8:	7812      	ldrb	r2, [r2, #0]
   30eea:	189b      	adds	r3, r3, r2
   30eec:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
   30eee:	687b      	ldr	r3, [r7, #4]
   30ef0:	681b      	ldr	r3, [r3, #0]
   30ef2:	1c9a      	adds	r2, r3, #2
   30ef4:	687b      	ldr	r3, [r7, #4]
   30ef6:	601a      	str	r2, [r3, #0]
	return len;
   30ef8:	68bb      	ldr	r3, [r7, #8]
}
   30efa:	0018      	movs	r0, r3
   30efc:	46bd      	mov	sp, r7
   30efe:	b004      	add	sp, #16
   30f00:	bd80      	pop	{r7, pc}

00030f02 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   30f02:	b580      	push	{r7, lr}
   30f04:	b084      	sub	sp, #16
   30f06:	af00      	add	r7, sp, #0
   30f08:	6078      	str	r0, [r7, #4]
	char c = **pptr;
   30f0a:	687b      	ldr	r3, [r7, #4]
   30f0c:	681a      	ldr	r2, [r3, #0]
   30f0e:	230f      	movs	r3, #15
   30f10:	18fb      	adds	r3, r7, r3
   30f12:	7812      	ldrb	r2, [r2, #0]
   30f14:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   30f16:	687b      	ldr	r3, [r7, #4]
   30f18:	681b      	ldr	r3, [r3, #0]
   30f1a:	1c5a      	adds	r2, r3, #1
   30f1c:	687b      	ldr	r3, [r7, #4]
   30f1e:	601a      	str	r2, [r3, #0]
	return c;
   30f20:	230f      	movs	r3, #15
   30f22:	18fb      	adds	r3, r7, r3
   30f24:	781b      	ldrb	r3, [r3, #0]
}
   30f26:	0018      	movs	r0, r3
   30f28:	46bd      	mov	sp, r7
   30f2a:	b004      	add	sp, #16
   30f2c:	bd80      	pop	{r7, pc}

00030f2e <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
   30f2e:	b580      	push	{r7, lr}
   30f30:	b082      	sub	sp, #8
   30f32:	af00      	add	r7, sp, #0
   30f34:	6078      	str	r0, [r7, #4]
   30f36:	000a      	movs	r2, r1
   30f38:	1cfb      	adds	r3, r7, #3
   30f3a:	701a      	strb	r2, [r3, #0]
	**pptr = c;
   30f3c:	687b      	ldr	r3, [r7, #4]
   30f3e:	681b      	ldr	r3, [r3, #0]
   30f40:	1cfa      	adds	r2, r7, #3
   30f42:	7812      	ldrb	r2, [r2, #0]
   30f44:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   30f46:	687b      	ldr	r3, [r7, #4]
   30f48:	681b      	ldr	r3, [r3, #0]
   30f4a:	1c5a      	adds	r2, r3, #1
   30f4c:	687b      	ldr	r3, [r7, #4]
   30f4e:	601a      	str	r2, [r3, #0]
}
   30f50:	46c0      	nop			; (mov r8, r8)
   30f52:	46bd      	mov	sp, r7
   30f54:	b002      	add	sp, #8
   30f56:	bd80      	pop	{r7, pc}

00030f58 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   30f58:	b580      	push	{r7, lr}
   30f5a:	b082      	sub	sp, #8
   30f5c:	af00      	add	r7, sp, #0
   30f5e:	6078      	str	r0, [r7, #4]
   30f60:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
   30f62:	687b      	ldr	r3, [r7, #4]
   30f64:	681a      	ldr	r2, [r3, #0]
   30f66:	683b      	ldr	r3, [r7, #0]
   30f68:	2b00      	cmp	r3, #0
   30f6a:	da00      	bge.n	30f6e <writeInt+0x16>
   30f6c:	33ff      	adds	r3, #255	; 0xff
   30f6e:	121b      	asrs	r3, r3, #8
   30f70:	b2db      	uxtb	r3, r3
   30f72:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   30f74:	687b      	ldr	r3, [r7, #4]
   30f76:	681b      	ldr	r3, [r3, #0]
   30f78:	1c5a      	adds	r2, r3, #1
   30f7a:	687b      	ldr	r3, [r7, #4]
   30f7c:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
   30f7e:	687b      	ldr	r3, [r7, #4]
   30f80:	681a      	ldr	r2, [r3, #0]
   30f82:	683b      	ldr	r3, [r7, #0]
   30f84:	4908      	ldr	r1, [pc, #32]	; (30fa8 <writeInt+0x50>)
   30f86:	400b      	ands	r3, r1
   30f88:	d503      	bpl.n	30f92 <writeInt+0x3a>
   30f8a:	3b01      	subs	r3, #1
   30f8c:	4907      	ldr	r1, [pc, #28]	; (30fac <writeInt+0x54>)
   30f8e:	430b      	orrs	r3, r1
   30f90:	3301      	adds	r3, #1
   30f92:	b2db      	uxtb	r3, r3
   30f94:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   30f96:	687b      	ldr	r3, [r7, #4]
   30f98:	681b      	ldr	r3, [r3, #0]
   30f9a:	1c5a      	adds	r2, r3, #1
   30f9c:	687b      	ldr	r3, [r7, #4]
   30f9e:	601a      	str	r2, [r3, #0]
}
   30fa0:	46c0      	nop			; (mov r8, r8)
   30fa2:	46bd      	mov	sp, r7
   30fa4:	b002      	add	sp, #8
   30fa6:	bd80      	pop	{r7, pc}
   30fa8:	800000ff 	.word	0x800000ff
   30fac:	ffffff00 	.word	0xffffff00

00030fb0 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   30fb0:	b580      	push	{r7, lr}
   30fb2:	b084      	sub	sp, #16
   30fb4:	af00      	add	r7, sp, #0
   30fb6:	6078      	str	r0, [r7, #4]
   30fb8:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
   30fba:	683b      	ldr	r3, [r7, #0]
   30fbc:	0018      	movs	r0, r3
   30fbe:	4b0d      	ldr	r3, [pc, #52]	; (30ff4 <writeCString+0x44>)
   30fc0:	4798      	blx	r3
   30fc2:	0003      	movs	r3, r0
   30fc4:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
   30fc6:	68fa      	ldr	r2, [r7, #12]
   30fc8:	687b      	ldr	r3, [r7, #4]
   30fca:	0011      	movs	r1, r2
   30fcc:	0018      	movs	r0, r3
   30fce:	4b0a      	ldr	r3, [pc, #40]	; (30ff8 <writeCString+0x48>)
   30fd0:	4798      	blx	r3
	memcpy(*pptr, string, len);
   30fd2:	687b      	ldr	r3, [r7, #4]
   30fd4:	681b      	ldr	r3, [r3, #0]
   30fd6:	68fa      	ldr	r2, [r7, #12]
   30fd8:	6839      	ldr	r1, [r7, #0]
   30fda:	0018      	movs	r0, r3
   30fdc:	4b07      	ldr	r3, [pc, #28]	; (30ffc <writeCString+0x4c>)
   30fde:	4798      	blx	r3
	*pptr += len;
   30fe0:	687b      	ldr	r3, [r7, #4]
   30fe2:	681a      	ldr	r2, [r3, #0]
   30fe4:	68fb      	ldr	r3, [r7, #12]
   30fe6:	18d2      	adds	r2, r2, r3
   30fe8:	687b      	ldr	r3, [r7, #4]
   30fea:	601a      	str	r2, [r3, #0]
}
   30fec:	46c0      	nop			; (mov r8, r8)
   30fee:	46bd      	mov	sp, r7
   30ff0:	b004      	add	sp, #16
   30ff2:	bd80      	pop	{r7, pc}
   30ff4:	000359a7 	.word	0x000359a7
   30ff8:	00030f59 	.word	0x00030f59
   30ffc:	000355b9 	.word	0x000355b9

00031000 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   31000:	b580      	push	{r7, lr}
   31002:	b084      	sub	sp, #16
   31004:	af00      	add	r7, sp, #0
   31006:	60f8      	str	r0, [r7, #12]
   31008:	0038      	movs	r0, r7
   3100a:	6001      	str	r1, [r0, #0]
   3100c:	6042      	str	r2, [r0, #4]
   3100e:	6083      	str	r3, [r0, #8]
	if (mqttstring.lenstring.len > 0)
   31010:	003b      	movs	r3, r7
   31012:	685b      	ldr	r3, [r3, #4]
   31014:	2b00      	cmp	r3, #0
   31016:	dd17      	ble.n	31048 <writeMQTTString+0x48>
	{
		writeInt(pptr, mqttstring.lenstring.len);
   31018:	003b      	movs	r3, r7
   3101a:	685a      	ldr	r2, [r3, #4]
   3101c:	68fb      	ldr	r3, [r7, #12]
   3101e:	0011      	movs	r1, r2
   31020:	0018      	movs	r0, r3
   31022:	4b14      	ldr	r3, [pc, #80]	; (31074 <writeMQTTString+0x74>)
   31024:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   31026:	68fb      	ldr	r3, [r7, #12]
   31028:	6818      	ldr	r0, [r3, #0]
   3102a:	003b      	movs	r3, r7
   3102c:	6899      	ldr	r1, [r3, #8]
   3102e:	003b      	movs	r3, r7
   31030:	685b      	ldr	r3, [r3, #4]
   31032:	001a      	movs	r2, r3
   31034:	4b10      	ldr	r3, [pc, #64]	; (31078 <writeMQTTString+0x78>)
   31036:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   31038:	68fb      	ldr	r3, [r7, #12]
   3103a:	681a      	ldr	r2, [r3, #0]
   3103c:	003b      	movs	r3, r7
   3103e:	685b      	ldr	r3, [r3, #4]
   31040:	18d2      	adds	r2, r2, r3
   31042:	68fb      	ldr	r3, [r7, #12]
   31044:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
   31046:	e010      	b.n	3106a <writeMQTTString+0x6a>
	else if (mqttstring.cstring)
   31048:	003b      	movs	r3, r7
   3104a:	681b      	ldr	r3, [r3, #0]
   3104c:	2b00      	cmp	r3, #0
   3104e:	d007      	beq.n	31060 <writeMQTTString+0x60>
		writeCString(pptr, mqttstring.cstring);
   31050:	003b      	movs	r3, r7
   31052:	681a      	ldr	r2, [r3, #0]
   31054:	68fb      	ldr	r3, [r7, #12]
   31056:	0011      	movs	r1, r2
   31058:	0018      	movs	r0, r3
   3105a:	4b08      	ldr	r3, [pc, #32]	; (3107c <writeMQTTString+0x7c>)
   3105c:	4798      	blx	r3
}
   3105e:	e004      	b.n	3106a <writeMQTTString+0x6a>
		writeInt(pptr, 0);
   31060:	68fb      	ldr	r3, [r7, #12]
   31062:	2100      	movs	r1, #0
   31064:	0018      	movs	r0, r3
   31066:	4b03      	ldr	r3, [pc, #12]	; (31074 <writeMQTTString+0x74>)
   31068:	4798      	blx	r3
}
   3106a:	46c0      	nop			; (mov r8, r8)
   3106c:	46bd      	mov	sp, r7
   3106e:	b004      	add	sp, #16
   31070:	bd80      	pop	{r7, pc}
   31072:	46c0      	nop			; (mov r8, r8)
   31074:	00030f59 	.word	0x00030f59
   31078:	000355b9 	.word	0x000355b9
   3107c:	00030fb1 	.word	0x00030fb1

00031080 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   31080:	b580      	push	{r7, lr}
   31082:	b086      	sub	sp, #24
   31084:	af00      	add	r7, sp, #0
   31086:	60f8      	str	r0, [r7, #12]
   31088:	60b9      	str	r1, [r7, #8]
   3108a:	607a      	str	r2, [r7, #4]
	int rc = 0;
   3108c:	2300      	movs	r3, #0
   3108e:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   31090:	687a      	ldr	r2, [r7, #4]
   31092:	68bb      	ldr	r3, [r7, #8]
   31094:	681b      	ldr	r3, [r3, #0]
   31096:	1ad3      	subs	r3, r2, r3
   31098:	2b01      	cmp	r3, #1
   3109a:	dd1b      	ble.n	310d4 <readMQTTLenString+0x54>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   3109c:	68bb      	ldr	r3, [r7, #8]
   3109e:	0018      	movs	r0, r3
   310a0:	4b10      	ldr	r3, [pc, #64]	; (310e4 <readMQTTLenString+0x64>)
   310a2:	4798      	blx	r3
   310a4:	0002      	movs	r2, r0
   310a6:	68fb      	ldr	r3, [r7, #12]
   310a8:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   310aa:	68bb      	ldr	r3, [r7, #8]
   310ac:	681a      	ldr	r2, [r3, #0]
   310ae:	68fb      	ldr	r3, [r7, #12]
   310b0:	685b      	ldr	r3, [r3, #4]
   310b2:	18d2      	adds	r2, r2, r3
   310b4:	687b      	ldr	r3, [r7, #4]
   310b6:	429a      	cmp	r2, r3
   310b8:	d80c      	bhi.n	310d4 <readMQTTLenString+0x54>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   310ba:	68bb      	ldr	r3, [r7, #8]
   310bc:	681a      	ldr	r2, [r3, #0]
   310be:	68fb      	ldr	r3, [r7, #12]
   310c0:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
   310c2:	68bb      	ldr	r3, [r7, #8]
   310c4:	681a      	ldr	r2, [r3, #0]
   310c6:	68fb      	ldr	r3, [r7, #12]
   310c8:	685b      	ldr	r3, [r3, #4]
   310ca:	18d2      	adds	r2, r2, r3
   310cc:	68bb      	ldr	r3, [r7, #8]
   310ce:	601a      	str	r2, [r3, #0]
			rc = 1;
   310d0:	2301      	movs	r3, #1
   310d2:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
   310d4:	68fb      	ldr	r3, [r7, #12]
   310d6:	2200      	movs	r2, #0
   310d8:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
   310da:	697b      	ldr	r3, [r7, #20]
}
   310dc:	0018      	movs	r0, r3
   310de:	46bd      	mov	sp, r7
   310e0:	b006      	add	sp, #24
   310e2:	bd80      	pop	{r7, pc}
   310e4:	00030ed1 	.word	0x00030ed1

000310e8 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   310e8:	b580      	push	{r7, lr}
   310ea:	b086      	sub	sp, #24
   310ec:	af00      	add	r7, sp, #0
   310ee:	1d3b      	adds	r3, r7, #4
   310f0:	6018      	str	r0, [r3, #0]
   310f2:	6059      	str	r1, [r3, #4]
   310f4:	609a      	str	r2, [r3, #8]
	int rc = 0;
   310f6:	2300      	movs	r3, #0
   310f8:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
   310fa:	1d3b      	adds	r3, r7, #4
   310fc:	681b      	ldr	r3, [r3, #0]
   310fe:	2b00      	cmp	r3, #0
   31100:	d007      	beq.n	31112 <MQTTstrlen+0x2a>
		rc = strlen(mqttstring.cstring);
   31102:	1d3b      	adds	r3, r7, #4
   31104:	681b      	ldr	r3, [r3, #0]
   31106:	0018      	movs	r0, r3
   31108:	4b06      	ldr	r3, [pc, #24]	; (31124 <MQTTstrlen+0x3c>)
   3110a:	4798      	blx	r3
   3110c:	0003      	movs	r3, r0
   3110e:	617b      	str	r3, [r7, #20]
   31110:	e002      	b.n	31118 <MQTTstrlen+0x30>
	else
		rc = mqttstring.lenstring.len;
   31112:	1d3b      	adds	r3, r7, #4
   31114:	685b      	ldr	r3, [r3, #4]
   31116:	617b      	str	r3, [r7, #20]
	return rc;
   31118:	697b      	ldr	r3, [r7, #20]
}
   3111a:	0018      	movs	r0, r3
   3111c:	46bd      	mov	sp, r7
   3111e:	b006      	add	sp, #24
   31120:	bd80      	pop	{r7, pc}
   31122:	46c0      	nop			; (mov r8, r8)
   31124:	000359a7 	.word	0x000359a7

00031128 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   31128:	b580      	push	{r7, lr}
   3112a:	b086      	sub	sp, #24
   3112c:	af00      	add	r7, sp, #0
   3112e:	6078      	str	r0, [r7, #4]
   31130:	6039      	str	r1, [r7, #0]
	int alen = 0,
   31132:	2300      	movs	r3, #0
   31134:	617b      	str	r3, [r7, #20]
		blen = 0;
   31136:	2300      	movs	r3, #0
   31138:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
   3113a:	687b      	ldr	r3, [r7, #4]
   3113c:	681b      	ldr	r3, [r3, #0]
   3113e:	2b00      	cmp	r3, #0
   31140:	d00a      	beq.n	31158 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
   31142:	687b      	ldr	r3, [r7, #4]
   31144:	681b      	ldr	r3, [r3, #0]
   31146:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
   31148:	687b      	ldr	r3, [r7, #4]
   3114a:	681b      	ldr	r3, [r3, #0]
   3114c:	0018      	movs	r0, r3
   3114e:	4b12      	ldr	r3, [pc, #72]	; (31198 <MQTTPacket_equals+0x70>)
   31150:	4798      	blx	r3
   31152:	0003      	movs	r3, r0
   31154:	617b      	str	r3, [r7, #20]
   31156:	e005      	b.n	31164 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
   31158:	687b      	ldr	r3, [r7, #4]
   3115a:	689b      	ldr	r3, [r3, #8]
   3115c:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
   3115e:	687b      	ldr	r3, [r7, #4]
   31160:	685b      	ldr	r3, [r3, #4]
   31162:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
   31164:	683b      	ldr	r3, [r7, #0]
   31166:	0018      	movs	r0, r3
   31168:	4b0b      	ldr	r3, [pc, #44]	; (31198 <MQTTPacket_equals+0x70>)
   3116a:	4798      	blx	r3
   3116c:	0003      	movs	r3, r0
   3116e:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   31170:	697a      	ldr	r2, [r7, #20]
   31172:	68fb      	ldr	r3, [r7, #12]
   31174:	429a      	cmp	r2, r3
   31176:	d109      	bne.n	3118c <MQTTPacket_equals+0x64>
   31178:	697a      	ldr	r2, [r7, #20]
   3117a:	6839      	ldr	r1, [r7, #0]
   3117c:	693b      	ldr	r3, [r7, #16]
   3117e:	0018      	movs	r0, r3
   31180:	4b06      	ldr	r3, [pc, #24]	; (3119c <MQTTPacket_equals+0x74>)
   31182:	4798      	blx	r3
   31184:	1e03      	subs	r3, r0, #0
   31186:	d101      	bne.n	3118c <MQTTPacket_equals+0x64>
   31188:	2301      	movs	r3, #1
   3118a:	e000      	b.n	3118e <MQTTPacket_equals+0x66>
   3118c:	2300      	movs	r3, #0
}
   3118e:	0018      	movs	r0, r3
   31190:	46bd      	mov	sp, r7
   31192:	b006      	add	sp, #24
   31194:	bd80      	pop	{r7, pc}
   31196:	46c0      	nop			; (mov r8, r8)
   31198:	000359a7 	.word	0x000359a7
   3119c:	000359b5 	.word	0x000359b5

000311a0 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   311a0:	b580      	push	{r7, lr}
   311a2:	b086      	sub	sp, #24
   311a4:	af00      	add	r7, sp, #0
   311a6:	60f8      	str	r0, [r7, #12]
   311a8:	0038      	movs	r0, r7
   311aa:	6001      	str	r1, [r0, #0]
   311ac:	6042      	str	r2, [r0, #4]
   311ae:	6083      	str	r3, [r0, #8]
	int len = 0;
   311b0:	2300      	movs	r3, #0
   311b2:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   311b4:	003b      	movs	r3, r7
   311b6:	6818      	ldr	r0, [r3, #0]
   311b8:	6859      	ldr	r1, [r3, #4]
   311ba:	689a      	ldr	r2, [r3, #8]
   311bc:	4b09      	ldr	r3, [pc, #36]	; (311e4 <MQTTSerialize_publishLength+0x44>)
   311be:	4798      	blx	r3
   311c0:	0003      	movs	r3, r0
   311c2:	1c9a      	adds	r2, r3, #2
   311c4:	6a3b      	ldr	r3, [r7, #32]
   311c6:	18d3      	adds	r3, r2, r3
   311c8:	697a      	ldr	r2, [r7, #20]
   311ca:	18d3      	adds	r3, r2, r3
   311cc:	617b      	str	r3, [r7, #20]
	if (qos > 0)
   311ce:	68fb      	ldr	r3, [r7, #12]
   311d0:	2b00      	cmp	r3, #0
   311d2:	dd02      	ble.n	311da <MQTTSerialize_publishLength+0x3a>
		len += 2; /* packetid */
   311d4:	697b      	ldr	r3, [r7, #20]
   311d6:	3302      	adds	r3, #2
   311d8:	617b      	str	r3, [r7, #20]
	return len;
   311da:	697b      	ldr	r3, [r7, #20]
}
   311dc:	0018      	movs	r0, r3
   311de:	46bd      	mov	sp, r7
   311e0:	b006      	add	sp, #24
   311e2:	bd80      	pop	{r7, pc}
   311e4:	000310e9 	.word	0x000310e9

000311e8 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   311e8:	b590      	push	{r4, r7, lr}
   311ea:	b08b      	sub	sp, #44	; 0x2c
   311ec:	af02      	add	r7, sp, #8
   311ee:	60f8      	str	r0, [r7, #12]
   311f0:	60b9      	str	r1, [r7, #8]
   311f2:	603b      	str	r3, [r7, #0]
   311f4:	1dfb      	adds	r3, r7, #7
   311f6:	701a      	strb	r2, [r3, #0]
	unsigned char *ptr = buf;
   311f8:	68fb      	ldr	r3, [r7, #12]
   311fa:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
   311fc:	2300      	movs	r3, #0
   311fe:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
   31200:	2300      	movs	r3, #0
   31202:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   31204:	2300      	movs	r3, #0
   31206:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   31208:	2308      	movs	r3, #8
   3120a:	2230      	movs	r2, #48	; 0x30
   3120c:	4694      	mov	ip, r2
   3120e:	44bc      	add	ip, r7
   31210:	4463      	add	r3, ip
   31212:	6838      	ldr	r0, [r7, #0]
   31214:	6cba      	ldr	r2, [r7, #72]	; 0x48
   31216:	9200      	str	r2, [sp, #0]
   31218:	6819      	ldr	r1, [r3, #0]
   3121a:	685a      	ldr	r2, [r3, #4]
   3121c:	689b      	ldr	r3, [r3, #8]
   3121e:	4c46      	ldr	r4, [pc, #280]	; (31338 <MQTTSerialize_publish+0x150>)
   31220:	47a0      	blx	r4
   31222:	0003      	movs	r3, r0
   31224:	61bb      	str	r3, [r7, #24]
   31226:	69bb      	ldr	r3, [r7, #24]
   31228:	0018      	movs	r0, r3
   3122a:	4b44      	ldr	r3, [pc, #272]	; (3133c <MQTTSerialize_publish+0x154>)
   3122c:	4798      	blx	r3
   3122e:	0002      	movs	r2, r0
   31230:	68bb      	ldr	r3, [r7, #8]
   31232:	429a      	cmp	r2, r3
   31234:	dd03      	ble.n	3123e <MQTTSerialize_publish+0x56>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   31236:	2302      	movs	r3, #2
   31238:	425b      	negs	r3, r3
   3123a:	61fb      	str	r3, [r7, #28]
		goto exit;
   3123c:	e077      	b.n	3132e <MQTTSerialize_publish+0x146>
	}

	header.bits.type = PUBLISH;
   3123e:	2310      	movs	r3, #16
   31240:	18fb      	adds	r3, r7, r3
   31242:	781a      	ldrb	r2, [r3, #0]
   31244:	210f      	movs	r1, #15
   31246:	400a      	ands	r2, r1
   31248:	1c11      	adds	r1, r2, #0
   3124a:	2230      	movs	r2, #48	; 0x30
   3124c:	430a      	orrs	r2, r1
   3124e:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   31250:	1dfb      	adds	r3, r7, #7
   31252:	781b      	ldrb	r3, [r3, #0]
   31254:	2201      	movs	r2, #1
   31256:	4013      	ands	r3, r2
   31258:	b2da      	uxtb	r2, r3
   3125a:	2310      	movs	r3, #16
   3125c:	18fb      	adds	r3, r7, r3
   3125e:	2101      	movs	r1, #1
   31260:	400a      	ands	r2, r1
   31262:	00d0      	lsls	r0, r2, #3
   31264:	781a      	ldrb	r2, [r3, #0]
   31266:	2108      	movs	r1, #8
   31268:	438a      	bics	r2, r1
   3126a:	1c11      	adds	r1, r2, #0
   3126c:	1c02      	adds	r2, r0, #0
   3126e:	430a      	orrs	r2, r1
   31270:	701a      	strb	r2, [r3, #0]
	header.bits.qos = qos;
   31272:	683b      	ldr	r3, [r7, #0]
   31274:	b2db      	uxtb	r3, r3
   31276:	1c1a      	adds	r2, r3, #0
   31278:	2303      	movs	r3, #3
   3127a:	4013      	ands	r3, r2
   3127c:	b2da      	uxtb	r2, r3
   3127e:	2310      	movs	r3, #16
   31280:	18fb      	adds	r3, r7, r3
   31282:	2103      	movs	r1, #3
   31284:	400a      	ands	r2, r1
   31286:	1890      	adds	r0, r2, r2
   31288:	781a      	ldrb	r2, [r3, #0]
   3128a:	2106      	movs	r1, #6
   3128c:	438a      	bics	r2, r1
   3128e:	1c11      	adds	r1, r2, #0
   31290:	1c02      	adds	r2, r0, #0
   31292:	430a      	orrs	r2, r1
   31294:	701a      	strb	r2, [r3, #0]
	header.bits.retain = retained;
   31296:	2330      	movs	r3, #48	; 0x30
   31298:	18fb      	adds	r3, r7, r3
   3129a:	781b      	ldrb	r3, [r3, #0]
   3129c:	2201      	movs	r2, #1
   3129e:	4013      	ands	r3, r2
   312a0:	b2da      	uxtb	r2, r3
   312a2:	2310      	movs	r3, #16
   312a4:	18fb      	adds	r3, r7, r3
   312a6:	2101      	movs	r1, #1
   312a8:	400a      	ands	r2, r1
   312aa:	0010      	movs	r0, r2
   312ac:	781a      	ldrb	r2, [r3, #0]
   312ae:	2101      	movs	r1, #1
   312b0:	438a      	bics	r2, r1
   312b2:	1c11      	adds	r1, r2, #0
   312b4:	1c02      	adds	r2, r0, #0
   312b6:	430a      	orrs	r2, r1
   312b8:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   312ba:	2310      	movs	r3, #16
   312bc:	18fb      	adds	r3, r7, r3
   312be:	781a      	ldrb	r2, [r3, #0]
   312c0:	2314      	movs	r3, #20
   312c2:	18fb      	adds	r3, r7, r3
   312c4:	0011      	movs	r1, r2
   312c6:	0018      	movs	r0, r3
   312c8:	4b1d      	ldr	r3, [pc, #116]	; (31340 <MQTTSerialize_publish+0x158>)
   312ca:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   312cc:	697b      	ldr	r3, [r7, #20]
   312ce:	69ba      	ldr	r2, [r7, #24]
   312d0:	0011      	movs	r1, r2
   312d2:	0018      	movs	r0, r3
   312d4:	4b1b      	ldr	r3, [pc, #108]	; (31344 <MQTTSerialize_publish+0x15c>)
   312d6:	4798      	blx	r3
   312d8:	0002      	movs	r2, r0
   312da:	697b      	ldr	r3, [r7, #20]
   312dc:	189b      	adds	r3, r3, r2
   312de:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
   312e0:	2308      	movs	r3, #8
   312e2:	2230      	movs	r2, #48	; 0x30
   312e4:	4694      	mov	ip, r2
   312e6:	44bc      	add	ip, r7
   312e8:	4463      	add	r3, ip
   312ea:	2214      	movs	r2, #20
   312ec:	18b8      	adds	r0, r7, r2
   312ee:	6819      	ldr	r1, [r3, #0]
   312f0:	685a      	ldr	r2, [r3, #4]
   312f2:	689b      	ldr	r3, [r3, #8]
   312f4:	4c14      	ldr	r4, [pc, #80]	; (31348 <MQTTSerialize_publish+0x160>)
   312f6:	47a0      	blx	r4

	if (qos > 0)
   312f8:	683b      	ldr	r3, [r7, #0]
   312fa:	2b00      	cmp	r3, #0
   312fc:	dd08      	ble.n	31310 <MQTTSerialize_publish+0x128>
		writeInt(&ptr, packetid);
   312fe:	2334      	movs	r3, #52	; 0x34
   31300:	18fb      	adds	r3, r7, r3
   31302:	881a      	ldrh	r2, [r3, #0]
   31304:	2314      	movs	r3, #20
   31306:	18fb      	adds	r3, r7, r3
   31308:	0011      	movs	r1, r2
   3130a:	0018      	movs	r0, r3
   3130c:	4b0f      	ldr	r3, [pc, #60]	; (3134c <MQTTSerialize_publish+0x164>)
   3130e:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   31310:	697b      	ldr	r3, [r7, #20]
   31312:	6cba      	ldr	r2, [r7, #72]	; 0x48
   31314:	6c79      	ldr	r1, [r7, #68]	; 0x44
   31316:	0018      	movs	r0, r3
   31318:	4b0d      	ldr	r3, [pc, #52]	; (31350 <MQTTSerialize_publish+0x168>)
   3131a:	4798      	blx	r3
	ptr += payloadlen;
   3131c:	697a      	ldr	r2, [r7, #20]
   3131e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   31320:	18d3      	adds	r3, r2, r3
   31322:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
   31324:	697b      	ldr	r3, [r7, #20]
   31326:	001a      	movs	r2, r3
   31328:	68fb      	ldr	r3, [r7, #12]
   3132a:	1ad3      	subs	r3, r2, r3
   3132c:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
   3132e:	69fb      	ldr	r3, [r7, #28]
}
   31330:	0018      	movs	r0, r3
   31332:	46bd      	mov	sp, r7
   31334:	b009      	add	sp, #36	; 0x24
   31336:	bd90      	pop	{r4, r7, pc}
   31338:	000311a1 	.word	0x000311a1
   3133c:	00030e0d 	.word	0x00030e0d
   31340:	00030f2f 	.word	0x00030f2f
   31344:	00030d15 	.word	0x00030d15
   31348:	00031001 	.word	0x00031001
   3134c:	00030f59 	.word	0x00030f59
   31350:	000355b9 	.word	0x000355b9

00031354 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   31354:	b580      	push	{r7, lr}
   31356:	b088      	sub	sp, #32
   31358:	af00      	add	r7, sp, #0
   3135a:	60f8      	str	r0, [r7, #12]
   3135c:	60b9      	str	r1, [r7, #8]
   3135e:	0019      	movs	r1, r3
   31360:	1dfb      	adds	r3, r7, #7
   31362:	701a      	strb	r2, [r3, #0]
   31364:	1dbb      	adds	r3, r7, #6
   31366:	1c0a      	adds	r2, r1, #0
   31368:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   3136a:	2300      	movs	r3, #0
   3136c:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   3136e:	2300      	movs	r3, #0
   31370:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   31372:	68fb      	ldr	r3, [r7, #12]
   31374:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
   31376:	68bb      	ldr	r3, [r7, #8]
   31378:	2b03      	cmp	r3, #3
   3137a:	dc03      	bgt.n	31384 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   3137c:	2302      	movs	r3, #2
   3137e:	425b      	negs	r3, r3
   31380:	61fb      	str	r3, [r7, #28]
		goto exit;
   31382:	e055      	b.n	31430 <MQTTSerialize_ack+0xdc>
	}
	header.bits.type = packettype;
   31384:	1dfb      	adds	r3, r7, #7
   31386:	781b      	ldrb	r3, [r3, #0]
   31388:	220f      	movs	r2, #15
   3138a:	4013      	ands	r3, r2
   3138c:	b2da      	uxtb	r2, r3
   3138e:	2318      	movs	r3, #24
   31390:	18fb      	adds	r3, r7, r3
   31392:	0110      	lsls	r0, r2, #4
   31394:	781a      	ldrb	r2, [r3, #0]
   31396:	210f      	movs	r1, #15
   31398:	400a      	ands	r2, r1
   3139a:	1c11      	adds	r1, r2, #0
   3139c:	1c02      	adds	r2, r0, #0
   3139e:	430a      	orrs	r2, r1
   313a0:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   313a2:	1dbb      	adds	r3, r7, #6
   313a4:	781b      	ldrb	r3, [r3, #0]
   313a6:	2201      	movs	r2, #1
   313a8:	4013      	ands	r3, r2
   313aa:	b2da      	uxtb	r2, r3
   313ac:	2318      	movs	r3, #24
   313ae:	18fb      	adds	r3, r7, r3
   313b0:	2101      	movs	r1, #1
   313b2:	400a      	ands	r2, r1
   313b4:	00d0      	lsls	r0, r2, #3
   313b6:	781a      	ldrb	r2, [r3, #0]
   313b8:	2108      	movs	r1, #8
   313ba:	438a      	bics	r2, r1
   313bc:	1c11      	adds	r1, r2, #0
   313be:	1c02      	adds	r2, r0, #0
   313c0:	430a      	orrs	r2, r1
   313c2:	701a      	strb	r2, [r3, #0]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   313c4:	1dfb      	adds	r3, r7, #7
   313c6:	781b      	ldrb	r3, [r3, #0]
   313c8:	3b06      	subs	r3, #6
   313ca:	425a      	negs	r2, r3
   313cc:	4153      	adcs	r3, r2
   313ce:	b2db      	uxtb	r3, r3
   313d0:	1c1a      	adds	r2, r3, #0
   313d2:	2303      	movs	r3, #3
   313d4:	4013      	ands	r3, r2
   313d6:	b2da      	uxtb	r2, r3
   313d8:	2318      	movs	r3, #24
   313da:	18fb      	adds	r3, r7, r3
   313dc:	2103      	movs	r1, #3
   313de:	400a      	ands	r2, r1
   313e0:	1890      	adds	r0, r2, r2
   313e2:	781a      	ldrb	r2, [r3, #0]
   313e4:	2106      	movs	r1, #6
   313e6:	438a      	bics	r2, r1
   313e8:	1c11      	adds	r1, r2, #0
   313ea:	1c02      	adds	r2, r0, #0
   313ec:	430a      	orrs	r2, r1
   313ee:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   313f0:	2318      	movs	r3, #24
   313f2:	18fb      	adds	r3, r7, r3
   313f4:	781a      	ldrb	r2, [r3, #0]
   313f6:	2314      	movs	r3, #20
   313f8:	18fb      	adds	r3, r7, r3
   313fa:	0011      	movs	r1, r2
   313fc:	0018      	movs	r0, r3
   313fe:	4b0f      	ldr	r3, [pc, #60]	; (3143c <MQTTSerialize_ack+0xe8>)
   31400:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   31402:	697b      	ldr	r3, [r7, #20]
   31404:	2102      	movs	r1, #2
   31406:	0018      	movs	r0, r3
   31408:	4b0d      	ldr	r3, [pc, #52]	; (31440 <MQTTSerialize_ack+0xec>)
   3140a:	4798      	blx	r3
   3140c:	0002      	movs	r2, r0
   3140e:	697b      	ldr	r3, [r7, #20]
   31410:	189b      	adds	r3, r3, r2
   31412:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
   31414:	2328      	movs	r3, #40	; 0x28
   31416:	18fb      	adds	r3, r7, r3
   31418:	881a      	ldrh	r2, [r3, #0]
   3141a:	2314      	movs	r3, #20
   3141c:	18fb      	adds	r3, r7, r3
   3141e:	0011      	movs	r1, r2
   31420:	0018      	movs	r0, r3
   31422:	4b08      	ldr	r3, [pc, #32]	; (31444 <MQTTSerialize_ack+0xf0>)
   31424:	4798      	blx	r3
	rc = ptr - buf;
   31426:	697b      	ldr	r3, [r7, #20]
   31428:	001a      	movs	r2, r3
   3142a:	68fb      	ldr	r3, [r7, #12]
   3142c:	1ad3      	subs	r3, r2, r3
   3142e:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   31430:	69fb      	ldr	r3, [r7, #28]
}
   31432:	0018      	movs	r0, r3
   31434:	46bd      	mov	sp, r7
   31436:	b008      	add	sp, #32
   31438:	bd80      	pop	{r7, pc}
   3143a:	46c0      	nop			; (mov r8, r8)
   3143c:	00030f2f 	.word	0x00030f2f
   31440:	00030d15 	.word	0x00030d15
   31444:	00030f59 	.word	0x00030f59

00031448 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   31448:	b580      	push	{r7, lr}
   3144a:	b084      	sub	sp, #16
   3144c:	af00      	add	r7, sp, #0
   3144e:	6078      	str	r0, [r7, #4]
   31450:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
   31452:	2302      	movs	r3, #2
   31454:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
   31456:	2300      	movs	r3, #0
   31458:	60fb      	str	r3, [r7, #12]
   3145a:	e014      	b.n	31486 <MQTTSerialize_subscribeLength+0x3e>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   3145c:	68fa      	ldr	r2, [r7, #12]
   3145e:	0013      	movs	r3, r2
   31460:	005b      	lsls	r3, r3, #1
   31462:	189b      	adds	r3, r3, r2
   31464:	009b      	lsls	r3, r3, #2
   31466:	001a      	movs	r2, r3
   31468:	683b      	ldr	r3, [r7, #0]
   3146a:	189b      	adds	r3, r3, r2
   3146c:	6818      	ldr	r0, [r3, #0]
   3146e:	6859      	ldr	r1, [r3, #4]
   31470:	689a      	ldr	r2, [r3, #8]
   31472:	4b09      	ldr	r3, [pc, #36]	; (31498 <MQTTSerialize_subscribeLength+0x50>)
   31474:	4798      	blx	r3
   31476:	0003      	movs	r3, r0
   31478:	3303      	adds	r3, #3
   3147a:	68ba      	ldr	r2, [r7, #8]
   3147c:	18d3      	adds	r3, r2, r3
   3147e:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
   31480:	68fb      	ldr	r3, [r7, #12]
   31482:	3301      	adds	r3, #1
   31484:	60fb      	str	r3, [r7, #12]
   31486:	68fa      	ldr	r2, [r7, #12]
   31488:	687b      	ldr	r3, [r7, #4]
   3148a:	429a      	cmp	r2, r3
   3148c:	dbe6      	blt.n	3145c <MQTTSerialize_subscribeLength+0x14>
	return len;
   3148e:	68bb      	ldr	r3, [r7, #8]
}
   31490:	0018      	movs	r0, r3
   31492:	46bd      	mov	sp, r7
   31494:	b004      	add	sp, #16
   31496:	bd80      	pop	{r7, pc}
   31498:	000310e9 	.word	0x000310e9

0003149c <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   3149c:	b590      	push	{r4, r7, lr}
   3149e:	b08b      	sub	sp, #44	; 0x2c
   314a0:	af00      	add	r7, sp, #0
   314a2:	60f8      	str	r0, [r7, #12]
   314a4:	60b9      	str	r1, [r7, #8]
   314a6:	0019      	movs	r1, r3
   314a8:	1dfb      	adds	r3, r7, #7
   314aa:	701a      	strb	r2, [r3, #0]
   314ac:	1d3b      	adds	r3, r7, #4
   314ae:	1c0a      	adds	r2, r1, #0
   314b0:	801a      	strh	r2, [r3, #0]
	unsigned char *ptr = buf;
   314b2:	68fb      	ldr	r3, [r7, #12]
   314b4:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
   314b6:	2300      	movs	r3, #0
   314b8:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
   314ba:	2300      	movs	r3, #0
   314bc:	61fb      	str	r3, [r7, #28]
	int rc = 0;
   314be:	2300      	movs	r3, #0
   314c0:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
   314c2:	2300      	movs	r3, #0
   314c4:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   314c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   314c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   314ca:	0011      	movs	r1, r2
   314cc:	0018      	movs	r0, r3
   314ce:	4b41      	ldr	r3, [pc, #260]	; (315d4 <MQTTSerialize_subscribe+0x138>)
   314d0:	4798      	blx	r3
   314d2:	0003      	movs	r3, r0
   314d4:	61fb      	str	r3, [r7, #28]
   314d6:	69fb      	ldr	r3, [r7, #28]
   314d8:	0018      	movs	r0, r3
   314da:	4b3f      	ldr	r3, [pc, #252]	; (315d8 <MQTTSerialize_subscribe+0x13c>)
   314dc:	4798      	blx	r3
   314de:	0002      	movs	r2, r0
   314e0:	68bb      	ldr	r3, [r7, #8]
   314e2:	429a      	cmp	r2, r3
   314e4:	dd03      	ble.n	314ee <MQTTSerialize_subscribe+0x52>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   314e6:	2302      	movs	r3, #2
   314e8:	425b      	negs	r3, r3
   314ea:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   314ec:	e06c      	b.n	315c8 <MQTTSerialize_subscribe+0x12c>
	}

	header.byte = 0;
   314ee:	2314      	movs	r3, #20
   314f0:	18fb      	adds	r3, r7, r3
   314f2:	2200      	movs	r2, #0
   314f4:	701a      	strb	r2, [r3, #0]
	header.bits.type = SUBSCRIBE;
   314f6:	2314      	movs	r3, #20
   314f8:	18fb      	adds	r3, r7, r3
   314fa:	781a      	ldrb	r2, [r3, #0]
   314fc:	210f      	movs	r1, #15
   314fe:	400a      	ands	r2, r1
   31500:	1c11      	adds	r1, r2, #0
   31502:	2280      	movs	r2, #128	; 0x80
   31504:	4252      	negs	r2, r2
   31506:	430a      	orrs	r2, r1
   31508:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   3150a:	1dfb      	adds	r3, r7, #7
   3150c:	781b      	ldrb	r3, [r3, #0]
   3150e:	2201      	movs	r2, #1
   31510:	4013      	ands	r3, r2
   31512:	b2da      	uxtb	r2, r3
   31514:	2314      	movs	r3, #20
   31516:	18fb      	adds	r3, r7, r3
   31518:	2101      	movs	r1, #1
   3151a:	400a      	ands	r2, r1
   3151c:	00d0      	lsls	r0, r2, #3
   3151e:	781a      	ldrb	r2, [r3, #0]
   31520:	2108      	movs	r1, #8
   31522:	438a      	bics	r2, r1
   31524:	1c11      	adds	r1, r2, #0
   31526:	1c02      	adds	r2, r0, #0
   31528:	430a      	orrs	r2, r1
   3152a:	701a      	strb	r2, [r3, #0]
	header.bits.qos = 1;
   3152c:	2314      	movs	r3, #20
   3152e:	18fb      	adds	r3, r7, r3
   31530:	781a      	ldrb	r2, [r3, #0]
   31532:	2106      	movs	r1, #6
   31534:	438a      	bics	r2, r1
   31536:	1c11      	adds	r1, r2, #0
   31538:	2202      	movs	r2, #2
   3153a:	430a      	orrs	r2, r1
   3153c:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   3153e:	2314      	movs	r3, #20
   31540:	18fb      	adds	r3, r7, r3
   31542:	781a      	ldrb	r2, [r3, #0]
   31544:	2318      	movs	r3, #24
   31546:	18fb      	adds	r3, r7, r3
   31548:	0011      	movs	r1, r2
   3154a:	0018      	movs	r0, r3
   3154c:	4b23      	ldr	r3, [pc, #140]	; (315dc <MQTTSerialize_subscribe+0x140>)
   3154e:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   31550:	69bb      	ldr	r3, [r7, #24]
   31552:	69fa      	ldr	r2, [r7, #28]
   31554:	0011      	movs	r1, r2
   31556:	0018      	movs	r0, r3
   31558:	4b21      	ldr	r3, [pc, #132]	; (315e0 <MQTTSerialize_subscribe+0x144>)
   3155a:	4798      	blx	r3
   3155c:	0002      	movs	r2, r0
   3155e:	69bb      	ldr	r3, [r7, #24]
   31560:	189b      	adds	r3, r3, r2
   31562:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
   31564:	1d3b      	adds	r3, r7, #4
   31566:	881a      	ldrh	r2, [r3, #0]
   31568:	2318      	movs	r3, #24
   3156a:	18fb      	adds	r3, r7, r3
   3156c:	0011      	movs	r1, r2
   3156e:	0018      	movs	r0, r3
   31570:	4b1c      	ldr	r3, [pc, #112]	; (315e4 <MQTTSerialize_subscribe+0x148>)
   31572:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   31574:	2300      	movs	r3, #0
   31576:	623b      	str	r3, [r7, #32]
   31578:	e01d      	b.n	315b6 <MQTTSerialize_subscribe+0x11a>
	{
		writeMQTTString(&ptr, topicFilters[i]);
   3157a:	6a3a      	ldr	r2, [r7, #32]
   3157c:	0013      	movs	r3, r2
   3157e:	005b      	lsls	r3, r3, #1
   31580:	189b      	adds	r3, r3, r2
   31582:	009b      	lsls	r3, r3, #2
   31584:	001a      	movs	r2, r3
   31586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   31588:	189b      	adds	r3, r3, r2
   3158a:	2218      	movs	r2, #24
   3158c:	18b8      	adds	r0, r7, r2
   3158e:	6819      	ldr	r1, [r3, #0]
   31590:	685a      	ldr	r2, [r3, #4]
   31592:	689b      	ldr	r3, [r3, #8]
   31594:	4c14      	ldr	r4, [pc, #80]	; (315e8 <MQTTSerialize_subscribe+0x14c>)
   31596:	47a0      	blx	r4
		writeChar(&ptr, requestedQoSs[i]);
   31598:	6a3b      	ldr	r3, [r7, #32]
   3159a:	009b      	lsls	r3, r3, #2
   3159c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   3159e:	18d3      	adds	r3, r2, r3
   315a0:	681b      	ldr	r3, [r3, #0]
   315a2:	b2da      	uxtb	r2, r3
   315a4:	2318      	movs	r3, #24
   315a6:	18fb      	adds	r3, r7, r3
   315a8:	0011      	movs	r1, r2
   315aa:	0018      	movs	r0, r3
   315ac:	4b0b      	ldr	r3, [pc, #44]	; (315dc <MQTTSerialize_subscribe+0x140>)
   315ae:	4798      	blx	r3
	for (i = 0; i < count; ++i)
   315b0:	6a3b      	ldr	r3, [r7, #32]
   315b2:	3301      	adds	r3, #1
   315b4:	623b      	str	r3, [r7, #32]
   315b6:	6a3a      	ldr	r2, [r7, #32]
   315b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   315ba:	429a      	cmp	r2, r3
   315bc:	dbdd      	blt.n	3157a <MQTTSerialize_subscribe+0xde>
	}

	rc = ptr - buf;
   315be:	69bb      	ldr	r3, [r7, #24]
   315c0:	001a      	movs	r2, r3
   315c2:	68fb      	ldr	r3, [r7, #12]
   315c4:	1ad3      	subs	r3, r2, r3
   315c6:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   315c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   315ca:	0018      	movs	r0, r3
   315cc:	46bd      	mov	sp, r7
   315ce:	b00b      	add	sp, #44	; 0x2c
   315d0:	bd90      	pop	{r4, r7, pc}
   315d2:	46c0      	nop			; (mov r8, r8)
   315d4:	00031449 	.word	0x00031449
   315d8:	00030e0d 	.word	0x00030e0d
   315dc:	00030f2f 	.word	0x00030f2f
   315e0:	00030d15 	.word	0x00030d15
   315e4:	00030f59 	.word	0x00030f59
   315e8:	00031001 	.word	0x00031001

000315ec <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   315ec:	b590      	push	{r4, r7, lr}
   315ee:	b08b      	sub	sp, #44	; 0x2c
   315f0:	af00      	add	r7, sp, #0
   315f2:	60f8      	str	r0, [r7, #12]
   315f4:	60b9      	str	r1, [r7, #8]
   315f6:	607a      	str	r2, [r7, #4]
   315f8:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   315fa:	2300      	movs	r3, #0
   315fc:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   315fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   31600:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   31602:	2300      	movs	r3, #0
   31604:	623b      	str	r3, [r7, #32]
	int rc = 0;
   31606:	2300      	movs	r3, #0
   31608:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   3160a:	2318      	movs	r3, #24
   3160c:	18fb      	adds	r3, r7, r3
   3160e:	0018      	movs	r0, r3
   31610:	4b2c      	ldr	r3, [pc, #176]	; (316c4 <MQTTDeserialize_suback+0xd8>)
   31612:	4798      	blx	r3
   31614:	0003      	movs	r3, r0
   31616:	001a      	movs	r2, r3
   31618:	231c      	movs	r3, #28
   3161a:	18fb      	adds	r3, r7, r3
   3161c:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != SUBACK)
   3161e:	231c      	movs	r3, #28
   31620:	18fb      	adds	r3, r7, r3
   31622:	781b      	ldrb	r3, [r3, #0]
   31624:	220f      	movs	r2, #15
   31626:	4393      	bics	r3, r2
   31628:	b2db      	uxtb	r3, r3
   3162a:	2b90      	cmp	r3, #144	; 0x90
   3162c:	d142      	bne.n	316b4 <MQTTDeserialize_suback+0xc8>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   3162e:	69bb      	ldr	r3, [r7, #24]
   31630:	2214      	movs	r2, #20
   31632:	18ba      	adds	r2, r7, r2
   31634:	0011      	movs	r1, r2
   31636:	0018      	movs	r0, r3
   31638:	4b23      	ldr	r3, [pc, #140]	; (316c8 <MQTTDeserialize_suback+0xdc>)
   3163a:	4798      	blx	r3
   3163c:	0003      	movs	r3, r0
   3163e:	627b      	str	r3, [r7, #36]	; 0x24
   31640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   31642:	69bb      	ldr	r3, [r7, #24]
   31644:	189b      	adds	r3, r3, r2
   31646:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   31648:	69bb      	ldr	r3, [r7, #24]
   3164a:	697a      	ldr	r2, [r7, #20]
   3164c:	189b      	adds	r3, r3, r2
   3164e:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   31650:	6a3b      	ldr	r3, [r7, #32]
   31652:	69ba      	ldr	r2, [r7, #24]
   31654:	1a9b      	subs	r3, r3, r2
   31656:	2b01      	cmp	r3, #1
   31658:	dd2e      	ble.n	316b8 <MQTTDeserialize_suback+0xcc>
		goto exit;

	*packetid = readInt(&curdata);
   3165a:	2318      	movs	r3, #24
   3165c:	18fb      	adds	r3, r7, r3
   3165e:	0018      	movs	r0, r3
   31660:	4b1a      	ldr	r3, [pc, #104]	; (316cc <MQTTDeserialize_suback+0xe0>)
   31662:	4798      	blx	r3
   31664:	0003      	movs	r3, r0
   31666:	b29a      	uxth	r2, r3
   31668:	68fb      	ldr	r3, [r7, #12]
   3166a:	801a      	strh	r2, [r3, #0]

	*count = 0;
   3166c:	687b      	ldr	r3, [r7, #4]
   3166e:	2200      	movs	r2, #0
   31670:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
   31672:	e018      	b.n	316a6 <MQTTDeserialize_suback+0xba>
	{
		if (*count > maxcount)
   31674:	687b      	ldr	r3, [r7, #4]
   31676:	681a      	ldr	r2, [r3, #0]
   31678:	68bb      	ldr	r3, [r7, #8]
   3167a:	429a      	cmp	r2, r3
   3167c:	dd03      	ble.n	31686 <MQTTDeserialize_suback+0x9a>
		{
			rc = -1;
   3167e:	2301      	movs	r3, #1
   31680:	425b      	negs	r3, r3
   31682:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
   31684:	e019      	b.n	316ba <MQTTDeserialize_suback+0xce>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
   31686:	687b      	ldr	r3, [r7, #4]
   31688:	681a      	ldr	r2, [r3, #0]
   3168a:	1c51      	adds	r1, r2, #1
   3168c:	687b      	ldr	r3, [r7, #4]
   3168e:	6019      	str	r1, [r3, #0]
   31690:	0013      	movs	r3, r2
   31692:	009b      	lsls	r3, r3, #2
   31694:	683a      	ldr	r2, [r7, #0]
   31696:	18d4      	adds	r4, r2, r3
   31698:	2318      	movs	r3, #24
   3169a:	18fb      	adds	r3, r7, r3
   3169c:	0018      	movs	r0, r3
   3169e:	4b09      	ldr	r3, [pc, #36]	; (316c4 <MQTTDeserialize_suback+0xd8>)
   316a0:	4798      	blx	r3
   316a2:	0003      	movs	r3, r0
   316a4:	6023      	str	r3, [r4, #0]
	while (curdata < enddata)
   316a6:	69ba      	ldr	r2, [r7, #24]
   316a8:	6a3b      	ldr	r3, [r7, #32]
   316aa:	429a      	cmp	r2, r3
   316ac:	d3e2      	bcc.n	31674 <MQTTDeserialize_suback+0x88>
	}

	rc = 1;
   316ae:	2301      	movs	r3, #1
   316b0:	627b      	str	r3, [r7, #36]	; 0x24
   316b2:	e002      	b.n	316ba <MQTTDeserialize_suback+0xce>
		goto exit;
   316b4:	46c0      	nop			; (mov r8, r8)
   316b6:	e000      	b.n	316ba <MQTTDeserialize_suback+0xce>
		goto exit;
   316b8:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   316ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   316bc:	0018      	movs	r0, r3
   316be:	46bd      	mov	sp, r7
   316c0:	b00b      	add	sp, #44	; 0x2c
   316c2:	bd90      	pop	{r4, r7, pc}
   316c4:	00030f03 	.word	0x00030f03
   316c8:	00030e9d 	.word	0x00030e9d
   316cc:	00030ed1 	.word	0x00030ed1

000316d0 <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
   316d0:	b580      	push	{r7, lr}
   316d2:	b082      	sub	sp, #8
   316d4:	af00      	add	r7, sp, #0
   316d6:	6078      	str	r0, [r7, #4]
	config->port = 80;
   316d8:	687b      	ldr	r3, [r7, #4]
   316da:	2250      	movs	r2, #80	; 0x50
   316dc:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   316de:	687b      	ldr	r3, [r7, #4]
   316e0:	2200      	movs	r2, #0
   316e2:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
   316e4:	687b      	ldr	r3, [r7, #4]
   316e6:	4a0b      	ldr	r2, [pc, #44]	; (31714 <http_client_get_config_defaults+0x44>)
   316e8:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
   316ea:	687b      	ldr	r3, [r7, #4]
   316ec:	2200      	movs	r2, #0
   316ee:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
   316f0:	687b      	ldr	r3, [r7, #4]
   316f2:	2200      	movs	r2, #0
   316f4:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
   316f6:	687b      	ldr	r3, [r7, #4]
   316f8:	2280      	movs	r2, #128	; 0x80
   316fa:	0052      	lsls	r2, r2, #1
   316fc:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   316fe:	687b      	ldr	r3, [r7, #4]
   31700:	2252      	movs	r2, #82	; 0x52
   31702:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   31704:	687b      	ldr	r3, [r7, #4]
   31706:	4a04      	ldr	r2, [pc, #16]	; (31718 <http_client_get_config_defaults+0x48>)
   31708:	619a      	str	r2, [r3, #24]
}
   3170a:	46c0      	nop			; (mov r8, r8)
   3170c:	46bd      	mov	sp, r7
   3170e:	b002      	add	sp, #8
   31710:	bd80      	pop	{r7, pc}
   31712:	46c0      	nop			; (mov r8, r8)
   31714:	00004e20 	.word	0x00004e20
   31718:	0003aa00 	.word	0x0003aa00

0003171c <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
   3171c:	b590      	push	{r4, r7, lr}
   3171e:	b083      	sub	sp, #12
   31720:	af00      	add	r7, sp, #0
   31722:	6078      	str	r0, [r7, #4]
   31724:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
   31726:	687b      	ldr	r3, [r7, #4]
   31728:	2b00      	cmp	r3, #0
   3172a:	d002      	beq.n	31732 <http_client_init+0x16>
   3172c:	683b      	ldr	r3, [r7, #0]
   3172e:	2b00      	cmp	r3, #0
   31730:	d102      	bne.n	31738 <http_client_init+0x1c>
		return -EINVAL;
   31732:	2316      	movs	r3, #22
   31734:	425b      	negs	r3, r3
   31736:	e058      	b.n	317ea <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
   31738:	683b      	ldr	r3, [r7, #0]
   3173a:	691b      	ldr	r3, [r3, #16]
   3173c:	2b00      	cmp	r3, #0
   3173e:	d102      	bne.n	31746 <http_client_init+0x2a>
		return -EINVAL;
   31740:	2316      	movs	r3, #22
   31742:	425b      	negs	r3, r3
   31744:	e051      	b.n	317ea <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
   31746:	683b      	ldr	r3, [r7, #0]
   31748:	685b      	ldr	r3, [r3, #4]
   3174a:	2b00      	cmp	r3, #0
   3174c:	d102      	bne.n	31754 <http_client_init+0x38>
		return -EINVAL;
   3174e:	2316      	movs	r3, #22
   31750:	425b      	negs	r3, r3
   31752:	e04a      	b.n	317ea <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   31754:	683b      	ldr	r3, [r7, #0]
   31756:	695b      	ldr	r3, [r3, #20]
   31758:	2b51      	cmp	r3, #81	; 0x51
   3175a:	d802      	bhi.n	31762 <http_client_init+0x46>
		return -EINVAL;
   3175c:	2316      	movs	r3, #22
   3175e:	425b      	negs	r3, r3
   31760:	e043      	b.n	317ea <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
   31762:	687b      	ldr	r3, [r7, #4]
   31764:	22e8      	movs	r2, #232	; 0xe8
   31766:	2100      	movs	r1, #0
   31768:	0018      	movs	r0, r3
   3176a:	4b22      	ldr	r3, [pc, #136]	; (317f4 <http_client_init+0xd8>)
   3176c:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   3176e:	687b      	ldr	r3, [r7, #4]
   31770:	3350      	adds	r3, #80	; 0x50
   31772:	6839      	ldr	r1, [r7, #0]
   31774:	221c      	movs	r2, #28
   31776:	0018      	movs	r0, r3
   31778:	4b1f      	ldr	r3, [pc, #124]	; (317f8 <http_client_init+0xdc>)
   3177a:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
   3177c:	687b      	ldr	r3, [r7, #4]
   3177e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   31780:	2b00      	cmp	r3, #0
   31782:	d115      	bne.n	317b0 <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   31784:	683b      	ldr	r3, [r7, #0]
   31786:	691b      	ldr	r3, [r3, #16]
   31788:	0018      	movs	r0, r3
   3178a:	4b1c      	ldr	r3, [pc, #112]	; (317fc <http_client_init+0xe0>)
   3178c:	4798      	blx	r3
   3178e:	0003      	movs	r3, r0
   31790:	001a      	movs	r2, r3
   31792:	687b      	ldr	r3, [r7, #4]
   31794:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   31796:	687b      	ldr	r3, [r7, #4]
   31798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   3179a:	2b00      	cmp	r3, #0
   3179c:	d102      	bne.n	317a4 <http_client_init+0x88>
			return -ENOMEM;
   3179e:	230c      	movs	r3, #12
   317a0:	425b      	negs	r3, r3
   317a2:	e022      	b.n	317ea <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
   317a4:	687b      	ldr	r3, [r7, #4]
   317a6:	2241      	movs	r2, #65	; 0x41
   317a8:	5c99      	ldrb	r1, [r3, r2]
   317aa:	2004      	movs	r0, #4
   317ac:	4301      	orrs	r1, r0
   317ae:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
   317b0:	683b      	ldr	r3, [r7, #0]
   317b2:	891b      	ldrh	r3, [r3, #8]
   317b4:	2b00      	cmp	r3, #0
   317b6:	d010      	beq.n	317da <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   317b8:	683b      	ldr	r3, [r7, #0]
   317ba:	6858      	ldr	r0, [r3, #4]
   317bc:	687a      	ldr	r2, [r7, #4]
   317be:	4910      	ldr	r1, [pc, #64]	; (31800 <http_client_init+0xe4>)
   317c0:	2300      	movs	r3, #0
   317c2:	4c10      	ldr	r4, [pc, #64]	; (31804 <http_client_init+0xe8>)
   317c4:	47a0      	blx	r4
   317c6:	0002      	movs	r2, r0
   317c8:	687b      	ldr	r3, [r7, #4]
   317ca:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
   317cc:	687b      	ldr	r3, [r7, #4]
   317ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   317d0:	2b00      	cmp	r3, #0
   317d2:	da02      	bge.n	317da <http_client_init+0xbe>
			return -ENOSPC;
   317d4:	231c      	movs	r3, #28
   317d6:	425b      	negs	r3, r3
   317d8:	e007      	b.n	317ea <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
   317da:	687b      	ldr	r3, [r7, #4]
   317dc:	2200      	movs	r2, #0
   317de:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   317e0:	687b      	ldr	r3, [r7, #4]
   317e2:	22d8      	movs	r2, #216	; 0xd8
   317e4:	2100      	movs	r1, #0
   317e6:	5099      	str	r1, [r3, r2]

	return 0;
   317e8:	2300      	movs	r3, #0
}
   317ea:	0018      	movs	r0, r3
   317ec:	46bd      	mov	sp, r7
   317ee:	b003      	add	sp, #12
   317f0:	bd90      	pop	{r4, r7, pc}
   317f2:	46c0      	nop			; (mov r8, r8)
   317f4:	000355ef 	.word	0x000355ef
   317f8:	000355b9 	.word	0x000355b9
   317fc:	00035591 	.word	0x00035591
   31800:	00031acd 	.word	0x00031acd
   31804:	00033171 	.word	0x00033171

00031808 <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
   31808:	b580      	push	{r7, lr}
   3180a:	b082      	sub	sp, #8
   3180c:	af00      	add	r7, sp, #0
   3180e:	6078      	str	r0, [r7, #4]
   31810:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
   31812:	687b      	ldr	r3, [r7, #4]
   31814:	2b00      	cmp	r3, #0
   31816:	d102      	bne.n	3181e <http_client_register_callback+0x16>
		return -EINVAL;
   31818:	2316      	movs	r3, #22
   3181a:	425b      	negs	r3, r3
   3181c:	e003      	b.n	31826 <http_client_register_callback+0x1e>
	}

	module->cb = callback;
   3181e:	687b      	ldr	r3, [r7, #4]
   31820:	683a      	ldr	r2, [r7, #0]
   31822:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
   31824:	2300      	movs	r3, #0
}
   31826:	0018      	movs	r0, r3
   31828:	46bd      	mov	sp, r7
   3182a:	b002      	add	sp, #8
   3182c:	bd80      	pop	{r7, pc}
	...

00031830 <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
   31830:	b580      	push	{r7, lr}
   31832:	b082      	sub	sp, #8
   31834:	af00      	add	r7, sp, #0
   31836:	6078      	str	r0, [r7, #4]
	switch (err) {
   31838:	687b      	ldr	r3, [r7, #4]
   3183a:	330e      	adds	r3, #14
   3183c:	2b0e      	cmp	r3, #14
   3183e:	d825      	bhi.n	3188c <_hwerr_to_stderr+0x5c>
   31840:	009a      	lsls	r2, r3, #2
   31842:	4b18      	ldr	r3, [pc, #96]	; (318a4 <_hwerr_to_stderr+0x74>)
   31844:	18d3      	adds	r3, r2, r3
   31846:	681b      	ldr	r3, [r3, #0]
   31848:	469f      	mov	pc, r3
		case 0:
			return -EIO;
   3184a:	2305      	movs	r3, #5
   3184c:	425b      	negs	r3, r3
   3184e:	e024      	b.n	3189a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
   31850:	2302      	movs	r3, #2
   31852:	425b      	negs	r3, r3
   31854:	e021      	b.n	3189a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
   31856:	2370      	movs	r3, #112	; 0x70
   31858:	425b      	negs	r3, r3
   3185a:	e01e      	b.n	3189a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
   3185c:	230c      	movs	r3, #12
   3185e:	425b      	negs	r3, r3
   31860:	e01b      	b.n	3189a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
   31862:	2316      	movs	r3, #22
   31864:	425b      	negs	r3, r3
   31866:	e018      	b.n	3189a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
   31868:	230c      	movs	r3, #12
   3186a:	425b      	negs	r3, r3
   3186c:	e015      	b.n	3189a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
   3186e:	2305      	movs	r3, #5
   31870:	425b      	negs	r3, r3
   31872:	e012      	b.n	3189a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
   31874:	2379      	movs	r3, #121	; 0x79
   31876:	425b      	negs	r3, r3
   31878:	e00f      	b.n	3189a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
   3187a:	2368      	movs	r3, #104	; 0x68
   3187c:	425b      	negs	r3, r3
   3187e:	e00c      	b.n	3189a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
   31880:	230b      	movs	r3, #11
   31882:	425b      	negs	r3, r3
   31884:	e009      	b.n	3189a <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
   31886:	2310      	movs	r3, #16
   31888:	425b      	negs	r3, r3
   3188a:	e006      	b.n	3189a <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
   3188c:	687b      	ldr	r3, [r7, #4]
   3188e:	2b00      	cmp	r3, #0
   31890:	da02      	bge.n	31898 <_hwerr_to_stderr+0x68>
				return -EIO;
   31892:	2305      	movs	r3, #5
   31894:	425b      	negs	r3, r3
   31896:	e000      	b.n	3189a <_hwerr_to_stderr+0x6a>
			}
			return 0;
   31898:	2300      	movs	r3, #0
	}
}
   3189a:	0018      	movs	r0, r3
   3189c:	46bd      	mov	sp, r7
   3189e:	b002      	add	sp, #8
   318a0:	bd80      	pop	{r7, pc}
   318a2:	46c0      	nop			; (mov r8, r8)
   318a4:	0003ab3c 	.word	0x0003ab3c

000318a8 <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   318a8:	b580      	push	{r7, lr}
   318aa:	b08a      	sub	sp, #40	; 0x28
   318ac:	af00      	add	r7, sp, #0
   318ae:	603a      	str	r2, [r7, #0]
   318b0:	1dfb      	adds	r3, r7, #7
   318b2:	1c02      	adds	r2, r0, #0
   318b4:	701a      	strb	r2, [r3, #0]
   318b6:	1dbb      	adds	r3, r7, #6
   318b8:	1c0a      	adds	r2, r1, #0
   318ba:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
   318bc:	1dfb      	adds	r3, r7, #7
   318be:	2200      	movs	r2, #0
   318c0:	569a      	ldrsb	r2, [r3, r2]
   318c2:	4b4b      	ldr	r3, [pc, #300]	; (319f0 <http_client_socket_event_handler+0x148>)
   318c4:	0092      	lsls	r2, r2, #2
   318c6:	58d3      	ldr	r3, [r2, r3]
   318c8:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
   318ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   318cc:	2b00      	cmp	r3, #0
   318ce:	d100      	bne.n	318d2 <http_client_socket_event_handler+0x2a>
   318d0:	e08a      	b.n	319e8 <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
   318d2:	1dbb      	adds	r3, r7, #6
   318d4:	781b      	ldrb	r3, [r3, #0]
   318d6:	2b06      	cmp	r3, #6
   318d8:	d040      	beq.n	3195c <http_client_socket_event_handler+0xb4>
   318da:	2b07      	cmp	r3, #7
   318dc:	d060      	beq.n	319a0 <http_client_socket_event_handler+0xf8>
   318de:	2b05      	cmp	r3, #5
   318e0:	d000      	beq.n	318e4 <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
   318e2:	e082      	b.n	319ea <http_client_socket_event_handler+0x142>
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
   318e4:	683b      	ldr	r3, [r7, #0]
   318e6:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
   318e8:	6a3b      	ldr	r3, [r7, #32]
   318ea:	785b      	ldrb	r3, [r3, #1]
   318ec:	b25b      	sxtb	r3, r3
   318ee:	001a      	movs	r2, r3
   318f0:	230c      	movs	r3, #12
   318f2:	18fb      	adds	r3, r7, r3
   318f4:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
   318f6:	6a3b      	ldr	r3, [r7, #32]
   318f8:	785b      	ldrb	r3, [r3, #1]
   318fa:	b25b      	sxtb	r3, r3
   318fc:	2b00      	cmp	r3, #0
   318fe:	da0c      	bge.n	3191a <http_client_socket_event_handler+0x72>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   31900:	6a3b      	ldr	r3, [r7, #32]
   31902:	785b      	ldrb	r3, [r3, #1]
   31904:	b25b      	sxtb	r3, r3
   31906:	0018      	movs	r0, r3
   31908:	4b3a      	ldr	r3, [pc, #232]	; (319f4 <http_client_socket_event_handler+0x14c>)
   3190a:	4798      	blx	r3
   3190c:	0002      	movs	r2, r0
   3190e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31910:	0011      	movs	r1, r2
   31912:	0018      	movs	r0, r3
   31914:	4b38      	ldr	r3, [pc, #224]	; (319f8 <http_client_socket_event_handler+0x150>)
   31916:	4798      	blx	r3
    	break;
   31918:	e067      	b.n	319ea <http_client_socket_event_handler+0x142>
			if (module->cb != NULL) {
   3191a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3191c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3191e:	2b00      	cmp	r3, #0
   31920:	d006      	beq.n	31930 <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   31922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31926:	220c      	movs	r2, #12
   31928:	18ba      	adds	r2, r7, r2
   3192a:	6a78      	ldr	r0, [r7, #36]	; 0x24
   3192c:	2100      	movs	r1, #0
   3192e:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   31930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31932:	2203      	movs	r2, #3
   31934:	66da      	str	r2, [r3, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   31936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31938:	6d58      	ldr	r0, [r3, #84]	; 0x54
   3193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3193c:	6c99      	ldr	r1, [r3, #72]	; 0x48
   3193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31940:	2258      	movs	r2, #88	; 0x58
   31942:	5a9b      	ldrh	r3, [r3, r2]
   31944:	001a      	movs	r2, r3
   31946:	4b2d      	ldr	r3, [pc, #180]	; (319fc <http_client_socket_event_handler+0x154>)
   31948:	4798      	blx	r3
    		_http_client_recv_packet(module);
   3194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3194c:	0018      	movs	r0, r3
   3194e:	4b2c      	ldr	r3, [pc, #176]	; (31a00 <http_client_socket_event_handler+0x158>)
   31950:	4798      	blx	r3
			_http_client_request(module);
   31952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31954:	0018      	movs	r0, r3
   31956:	4b2b      	ldr	r3, [pc, #172]	; (31a04 <http_client_socket_event_handler+0x15c>)
   31958:	4798      	blx	r3
    	break;
   3195a:	e046      	b.n	319ea <http_client_socket_event_handler+0x142>
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
   3195c:	683b      	ldr	r3, [r7, #0]
   3195e:	61fb      	str	r3, [r7, #28]
    	if (msg_recv->s16BufferSize > 0) {
   31960:	69fb      	ldr	r3, [r7, #28]
   31962:	2204      	movs	r2, #4
   31964:	5e9b      	ldrsh	r3, [r3, r2]
   31966:	2b00      	cmp	r3, #0
   31968:	dd09      	ble.n	3197e <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   3196a:	69fb      	ldr	r3, [r7, #28]
   3196c:	2204      	movs	r2, #4
   3196e:	5e9b      	ldrsh	r3, [r3, r2]
   31970:	001a      	movs	r2, r3
   31972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31974:	0011      	movs	r1, r2
   31976:	0018      	movs	r0, r3
   31978:	4b23      	ldr	r3, [pc, #140]	; (31a08 <http_client_socket_event_handler+0x160>)
   3197a:	4798      	blx	r3
   3197c:	e00b      	b.n	31996 <http_client_socket_event_handler+0xee>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   3197e:	69fb      	ldr	r3, [r7, #28]
   31980:	2204      	movs	r2, #4
   31982:	5e9b      	ldrsh	r3, [r3, r2]
   31984:	0018      	movs	r0, r3
   31986:	4b1b      	ldr	r3, [pc, #108]	; (319f4 <http_client_socket_event_handler+0x14c>)
   31988:	4798      	blx	r3
   3198a:	0002      	movs	r2, r0
   3198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3198e:	0011      	movs	r1, r2
   31990:	0018      	movs	r0, r3
   31992:	4b19      	ldr	r3, [pc, #100]	; (319f8 <http_client_socket_event_handler+0x150>)
   31994:	4798      	blx	r3
		_http_client_recv_packet(module);
   31996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31998:	0018      	movs	r0, r3
   3199a:	4b19      	ldr	r3, [pc, #100]	; (31a00 <http_client_socket_event_handler+0x158>)
   3199c:	4798      	blx	r3
		break;
   3199e:	e024      	b.n	319ea <http_client_socket_event_handler+0x142>
		send_ret = *(int16_t*)msg_data;
   319a0:	231a      	movs	r3, #26
   319a2:	18fb      	adds	r3, r7, r3
   319a4:	683a      	ldr	r2, [r7, #0]
   319a6:	8812      	ldrh	r2, [r2, #0]
   319a8:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
   319aa:	231a      	movs	r3, #26
   319ac:	18fb      	adds	r3, r7, r3
   319ae:	2200      	movs	r2, #0
   319b0:	5e9b      	ldrsh	r3, [r3, r2]
   319b2:	2b00      	cmp	r3, #0
   319b4:	da0d      	bge.n	319d2 <http_client_socket_event_handler+0x12a>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   319b6:	231a      	movs	r3, #26
   319b8:	18fb      	adds	r3, r7, r3
   319ba:	2200      	movs	r2, #0
   319bc:	5e9b      	ldrsh	r3, [r3, r2]
   319be:	0018      	movs	r0, r3
   319c0:	4b0c      	ldr	r3, [pc, #48]	; (319f4 <http_client_socket_event_handler+0x14c>)
   319c2:	4798      	blx	r3
   319c4:	0002      	movs	r2, r0
   319c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   319c8:	0011      	movs	r1, r2
   319ca:	0018      	movs	r0, r3
   319cc:	4b0a      	ldr	r3, [pc, #40]	; (319f8 <http_client_socket_event_handler+0x150>)
   319ce:	4798      	blx	r3
   319d0:	e003      	b.n	319da <http_client_socket_event_handler+0x132>
    		_http_client_request(module);
   319d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   319d4:	0018      	movs	r0, r3
   319d6:	4b0b      	ldr	r3, [pc, #44]	; (31a04 <http_client_socket_event_handler+0x15c>)
   319d8:	4798      	blx	r3
		module->sending = 0;
   319da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   319dc:	2241      	movs	r2, #65	; 0x41
   319de:	5c99      	ldrb	r1, [r3, r2]
   319e0:	2001      	movs	r0, #1
   319e2:	4381      	bics	r1, r0
   319e4:	5499      	strb	r1, [r3, r2]
    	break;
   319e6:	e000      	b.n	319ea <http_client_socket_event_handler+0x142>
		return;
   319e8:	46c0      	nop			; (mov r8, r8)
	}

}
   319ea:	46bd      	mov	sp, r7
   319ec:	b00a      	add	sp, #40	; 0x28
   319ee:	bd80      	pop	{r7, pc}
   319f0:	200046f4 	.word	0x200046f4
   319f4:	00031831 	.word	0x00031831
   319f8:	00031ea5 	.word	0x00031ea5
   319fc:	00033201 	.word	0x00033201
   31a00:	00032731 	.word	0x00032731
   31a04:	00031ff9 	.word	0x00031ff9
   31a08:	00032795 	.word	0x00032795

00031a0c <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   31a0c:	b580      	push	{r7, lr}
   31a0e:	b088      	sub	sp, #32
   31a10:	af00      	add	r7, sp, #0
   31a12:	6078      	str	r0, [r7, #4]
   31a14:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
   31a16:	2300      	movs	r3, #0
   31a18:	61fb      	str	r3, [r7, #28]
   31a1a:	e048      	b.n	31aae <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
   31a1c:	4b27      	ldr	r3, [pc, #156]	; (31abc <http_client_socket_resolve_handler+0xb0>)
   31a1e:	69fa      	ldr	r2, [r7, #28]
   31a20:	0092      	lsls	r2, r2, #2
   31a22:	58d3      	ldr	r3, [r2, r3]
   31a24:	2b00      	cmp	r3, #0
   31a26:	d03f      	beq.n	31aa8 <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
   31a28:	4b24      	ldr	r3, [pc, #144]	; (31abc <http_client_socket_resolve_handler+0xb0>)
   31a2a:	69fa      	ldr	r2, [r7, #28]
   31a2c:	0092      	lsls	r2, r2, #2
   31a2e:	58d3      	ldr	r3, [r2, r3]
   31a30:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   31a32:	69bb      	ldr	r3, [r7, #24]
   31a34:	1c5a      	adds	r2, r3, #1
   31a36:	687b      	ldr	r3, [r7, #4]
   31a38:	0011      	movs	r1, r2
   31a3a:	0018      	movs	r0, r3
   31a3c:	4b20      	ldr	r3, [pc, #128]	; (31ac0 <http_client_socket_resolve_handler+0xb4>)
   31a3e:	4798      	blx	r3
   31a40:	1e03      	subs	r3, r0, #0
   31a42:	d131      	bne.n	31aa8 <http_client_socket_resolve_handler+0x9c>
   31a44:	69bb      	ldr	r3, [r7, #24]
   31a46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31a48:	2b01      	cmp	r3, #1
   31a4a:	d12d      	bne.n	31aa8 <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   31a4c:	683b      	ldr	r3, [r7, #0]
   31a4e:	2b00      	cmp	r3, #0
   31a50:	d107      	bne.n	31a62 <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   31a52:	2376      	movs	r3, #118	; 0x76
   31a54:	425a      	negs	r2, r3
   31a56:	69bb      	ldr	r3, [r7, #24]
   31a58:	0011      	movs	r1, r2
   31a5a:	0018      	movs	r0, r3
   31a5c:	4b19      	ldr	r3, [pc, #100]	; (31ac4 <http_client_socket_resolve_handler+0xb8>)
   31a5e:	4798      	blx	r3
					return;
   31a60:	e028      	b.n	31ab4 <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
   31a62:	2308      	movs	r3, #8
   31a64:	18fb      	adds	r3, r7, r3
   31a66:	2202      	movs	r2, #2
   31a68:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   31a6a:	69bb      	ldr	r3, [r7, #24]
   31a6c:	2250      	movs	r2, #80	; 0x50
   31a6e:	5a9b      	ldrh	r3, [r3, r2]
   31a70:	021b      	lsls	r3, r3, #8
   31a72:	b21a      	sxth	r2, r3
   31a74:	69bb      	ldr	r3, [r7, #24]
   31a76:	2150      	movs	r1, #80	; 0x50
   31a78:	5a5b      	ldrh	r3, [r3, r1]
   31a7a:	0a1b      	lsrs	r3, r3, #8
   31a7c:	b29b      	uxth	r3, r3
   31a7e:	b21b      	sxth	r3, r3
   31a80:	4313      	orrs	r3, r2
   31a82:	b21b      	sxth	r3, r3
   31a84:	b29a      	uxth	r2, r3
   31a86:	2308      	movs	r3, #8
   31a88:	18fb      	adds	r3, r7, r3
   31a8a:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
   31a8c:	2308      	movs	r3, #8
   31a8e:	18fb      	adds	r3, r7, r3
   31a90:	683a      	ldr	r2, [r7, #0]
   31a92:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   31a94:	69bb      	ldr	r3, [r7, #24]
   31a96:	781b      	ldrb	r3, [r3, #0]
   31a98:	b25b      	sxtb	r3, r3
   31a9a:	2208      	movs	r2, #8
   31a9c:	18b9      	adds	r1, r7, r2
   31a9e:	2210      	movs	r2, #16
   31aa0:	0018      	movs	r0, r3
   31aa2:	4b09      	ldr	r3, [pc, #36]	; (31ac8 <http_client_socket_resolve_handler+0xbc>)
   31aa4:	4798      	blx	r3
				return;
   31aa6:	e005      	b.n	31ab4 <http_client_socket_resolve_handler+0xa8>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   31aa8:	69fb      	ldr	r3, [r7, #28]
   31aaa:	3301      	adds	r3, #1
   31aac:	61fb      	str	r3, [r7, #28]
   31aae:	69fb      	ldr	r3, [r7, #28]
   31ab0:	2b06      	cmp	r3, #6
   31ab2:	ddb3      	ble.n	31a1c <http_client_socket_resolve_handler+0x10>
			}
		}
	}
}
   31ab4:	46bd      	mov	sp, r7
   31ab6:	b008      	add	sp, #32
   31ab8:	bd80      	pop	{r7, pc}
   31aba:	46c0      	nop			; (mov r8, r8)
   31abc:	200046f4 	.word	0x200046f4
   31ac0:	00035947 	.word	0x00035947
   31ac4:	00031ea5 	.word	0x00031ea5
   31ac8:	000263c9 	.word	0x000263c9

00031acc <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
   31acc:	b580      	push	{r7, lr}
   31ace:	b086      	sub	sp, #24
   31ad0:	af00      	add	r7, sp, #0
   31ad2:	60f8      	str	r0, [r7, #12]
   31ad4:	60b9      	str	r1, [r7, #8]
   31ad6:	607a      	str	r2, [r7, #4]
   31ad8:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
   31ada:	687b      	ldr	r3, [r7, #4]
   31adc:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
   31ade:	697b      	ldr	r3, [r7, #20]
   31ae0:	2b00      	cmp	r3, #0
   31ae2:	d007      	beq.n	31af4 <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
   31ae4:	233e      	movs	r3, #62	; 0x3e
   31ae6:	425a      	negs	r2, r3
   31ae8:	697b      	ldr	r3, [r7, #20]
   31aea:	0011      	movs	r1, r2
   31aec:	0018      	movs	r0, r3
   31aee:	4b03      	ldr	r3, [pc, #12]	; (31afc <http_client_timer_callback+0x30>)
   31af0:	4798      	blx	r3
   31af2:	e000      	b.n	31af6 <http_client_timer_callback+0x2a>
		return;
   31af4:	46c0      	nop			; (mov r8, r8)
}
   31af6:	46bd      	mov	sp, r7
   31af8:	b006      	add	sp, #24
   31afa:	bd80      	pop	{r7, pc}
   31afc:	00031ea5 	.word	0x00031ea5

00031b00 <_is_ip>:

static int _is_ip(const char *host)
{
   31b00:	b580      	push	{r7, lr}
   31b02:	b084      	sub	sp, #16
   31b04:	af00      	add	r7, sp, #0
   31b06:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
   31b08:	2300      	movs	r3, #0
   31b0a:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
   31b0c:	e03a      	b.n	31b84 <_is_ip+0x84>
		ch = *host++;
   31b0e:	687b      	ldr	r3, [r7, #4]
   31b10:	1c5a      	adds	r2, r3, #1
   31b12:	607a      	str	r2, [r7, #4]
   31b14:	220b      	movs	r2, #11
   31b16:	18ba      	adds	r2, r7, r2
   31b18:	781b      	ldrb	r3, [r3, #0]
   31b1a:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   31b1c:	230b      	movs	r3, #11
   31b1e:	18fb      	adds	r3, r7, r3
   31b20:	781b      	ldrb	r3, [r3, #0]
   31b22:	2b60      	cmp	r3, #96	; 0x60
   31b24:	d904      	bls.n	31b30 <_is_ip+0x30>
   31b26:	230b      	movs	r3, #11
   31b28:	18fb      	adds	r3, r7, r3
   31b2a:	781b      	ldrb	r3, [r3, #0]
   31b2c:	2b66      	cmp	r3, #102	; 0x66
   31b2e:	d913      	bls.n	31b58 <_is_ip+0x58>
   31b30:	230b      	movs	r3, #11
   31b32:	18fb      	adds	r3, r7, r3
   31b34:	781b      	ldrb	r3, [r3, #0]
   31b36:	2b40      	cmp	r3, #64	; 0x40
   31b38:	d904      	bls.n	31b44 <_is_ip+0x44>
   31b3a:	230b      	movs	r3, #11
   31b3c:	18fb      	adds	r3, r7, r3
   31b3e:	781b      	ldrb	r3, [r3, #0]
   31b40:	2b46      	cmp	r3, #70	; 0x46
   31b42:	d909      	bls.n	31b58 <_is_ip+0x58>
   31b44:	230b      	movs	r3, #11
   31b46:	18fb      	adds	r3, r7, r3
   31b48:	781b      	ldrb	r3, [r3, #0]
   31b4a:	2b3a      	cmp	r3, #58	; 0x3a
   31b4c:	d004      	beq.n	31b58 <_is_ip+0x58>
   31b4e:	230b      	movs	r3, #11
   31b50:	18fb      	adds	r3, r7, r3
   31b52:	781b      	ldrb	r3, [r3, #0]
   31b54:	2b2f      	cmp	r3, #47	; 0x2f
   31b56:	d102      	bne.n	31b5e <_is_ip+0x5e>
			isv6 = 1;
   31b58:	2301      	movs	r3, #1
   31b5a:	60fb      	str	r3, [r7, #12]
   31b5c:	e012      	b.n	31b84 <_is_ip+0x84>
		} else if (ch == '.') {
   31b5e:	230b      	movs	r3, #11
   31b60:	18fb      	adds	r3, r7, r3
   31b62:	781b      	ldrb	r3, [r3, #0]
   31b64:	2b2e      	cmp	r3, #46	; 0x2e
   31b66:	d104      	bne.n	31b72 <_is_ip+0x72>
			if (isv6) {
   31b68:	68fb      	ldr	r3, [r7, #12]
   31b6a:	2b00      	cmp	r3, #0
   31b6c:	d00a      	beq.n	31b84 <_is_ip+0x84>
				return 0;
   31b6e:	2300      	movs	r3, #0
   31b70:	e00d      	b.n	31b8e <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
   31b72:	230b      	movs	r3, #11
   31b74:	18fb      	adds	r3, r7, r3
   31b76:	781b      	ldrb	r3, [r3, #0]
   31b78:	2230      	movs	r2, #48	; 0x30
   31b7a:	4013      	ands	r3, r2
   31b7c:	2b30      	cmp	r3, #48	; 0x30
   31b7e:	d001      	beq.n	31b84 <_is_ip+0x84>
			return 0;
   31b80:	2300      	movs	r3, #0
   31b82:	e004      	b.n	31b8e <_is_ip+0x8e>
	while (*host != '\0') {
   31b84:	687b      	ldr	r3, [r7, #4]
   31b86:	781b      	ldrb	r3, [r3, #0]
   31b88:	2b00      	cmp	r3, #0
   31b8a:	d1c0      	bne.n	31b0e <_is_ip+0xe>
		}
	}
	return 1;
   31b8c:	2301      	movs	r3, #1
}
   31b8e:	0018      	movs	r0, r3
   31b90:	46bd      	mov	sp, r7
   31b92:	b004      	add	sp, #16
   31b94:	bd80      	pop	{r7, pc}
	...

00031b98 <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
   31b98:	b5b0      	push	{r4, r5, r7, lr}
   31b9a:	b08e      	sub	sp, #56	; 0x38
   31b9c:	af00      	add	r7, sp, #0
   31b9e:	60f8      	str	r0, [r7, #12]
   31ba0:	60b9      	str	r1, [r7, #8]
   31ba2:	603b      	str	r3, [r7, #0]
   31ba4:	1dfb      	adds	r3, r7, #7
   31ba6:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
   31ba8:	2337      	movs	r3, #55	; 0x37
   31baa:	18fb      	adds	r3, r7, r3
   31bac:	2200      	movs	r2, #0
   31bae:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
   31bb0:	2300      	movs	r3, #0
   31bb2:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
   31bb4:	2300      	movs	r3, #0
   31bb6:	633b      	str	r3, [r7, #48]	; 0x30
   31bb8:	2300      	movs	r3, #0
   31bba:	62fb      	str	r3, [r7, #44]	; 0x2c
   31bbc:	2300      	movs	r3, #0
   31bbe:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
   31bc0:	68fb      	ldr	r3, [r7, #12]
   31bc2:	2b00      	cmp	r3, #0
   31bc4:	d102      	bne.n	31bcc <http_client_send_request+0x34>
		return -EINVAL;
   31bc6:	2316      	movs	r3, #22
   31bc8:	425b      	negs	r3, r3
   31bca:	e145      	b.n	31e58 <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
   31bcc:	68fb      	ldr	r3, [r7, #12]
   31bce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31bd0:	2b02      	cmp	r3, #2
   31bd2:	d902      	bls.n	31bda <http_client_send_request+0x42>
		return -EBUSY;
   31bd4:	2310      	movs	r3, #16
   31bd6:	425b      	negs	r3, r3
   31bd8:	e13e      	b.n	31e58 <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
   31bda:	49a1      	ldr	r1, [pc, #644]	; (31e60 <http_client_send_request+0x2c8>)
   31bdc:	68bb      	ldr	r3, [r7, #8]
   31bde:	2207      	movs	r2, #7
   31be0:	0018      	movs	r0, r3
   31be2:	4ba0      	ldr	r3, [pc, #640]	; (31e64 <http_client_send_request+0x2cc>)
   31be4:	4798      	blx	r3
   31be6:	1e03      	subs	r3, r0, #0
   31be8:	d102      	bne.n	31bf0 <http_client_send_request+0x58>
		i = 7;
   31bea:	2307      	movs	r3, #7
   31bec:	633b      	str	r3, [r7, #48]	; 0x30
   31bee:	e009      	b.n	31c04 <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
   31bf0:	499d      	ldr	r1, [pc, #628]	; (31e68 <http_client_send_request+0x2d0>)
   31bf2:	68bb      	ldr	r3, [r7, #8]
   31bf4:	2208      	movs	r2, #8
   31bf6:	0018      	movs	r0, r3
   31bf8:	4b9a      	ldr	r3, [pc, #616]	; (31e64 <http_client_send_request+0x2cc>)
   31bfa:	4798      	blx	r3
   31bfc:	1e03      	subs	r3, r0, #0
   31bfe:	d101      	bne.n	31c04 <http_client_send_request+0x6c>
		i = 8;
   31c00:	2308      	movs	r3, #8
   31c02:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   31c04:	68fb      	ldr	r3, [r7, #12]
   31c06:	1c5c      	adds	r4, r3, #1
   31c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31c0a:	68ba      	ldr	r2, [r7, #8]
   31c0c:	18d5      	adds	r5, r2, r3
   31c0e:	68fb      	ldr	r3, [r7, #12]
   31c10:	3301      	adds	r3, #1
   31c12:	0018      	movs	r0, r3
   31c14:	4b95      	ldr	r3, [pc, #596]	; (31e6c <http_client_send_request+0x2d4>)
   31c16:	4798      	blx	r3
   31c18:	0003      	movs	r3, r0
   31c1a:	001a      	movs	r2, r3
   31c1c:	0029      	movs	r1, r5
   31c1e:	0020      	movs	r0, r4
   31c20:	4b90      	ldr	r3, [pc, #576]	; (31e64 <http_client_send_request+0x2cc>)
   31c22:	4798      	blx	r3
   31c24:	0003      	movs	r3, r0
   31c26:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
   31c28:	e00d      	b.n	31c46 <http_client_send_request+0xae>
		module->host[j++] = url[i];
   31c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   31c2c:	1c5a      	adds	r2, r3, #1
   31c2e:	62fa      	str	r2, [r7, #44]	; 0x2c
   31c30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   31c32:	68b9      	ldr	r1, [r7, #8]
   31c34:	188a      	adds	r2, r1, r2
   31c36:	7811      	ldrb	r1, [r2, #0]
   31c38:	68fa      	ldr	r2, [r7, #12]
   31c3a:	18d3      	adds	r3, r2, r3
   31c3c:	1c0a      	adds	r2, r1, #0
   31c3e:	705a      	strb	r2, [r3, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   31c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31c42:	3301      	adds	r3, #1
   31c44:	633b      	str	r3, [r7, #48]	; 0x30
   31c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31c48:	68ba      	ldr	r2, [r7, #8]
   31c4a:	18d3      	adds	r3, r2, r3
   31c4c:	781b      	ldrb	r3, [r3, #0]
   31c4e:	2b00      	cmp	r3, #0
   31c50:	d005      	beq.n	31c5e <http_client_send_request+0xc6>
   31c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31c54:	68ba      	ldr	r2, [r7, #8]
   31c56:	18d3      	adds	r3, r2, r3
   31c58:	781b      	ldrb	r3, [r3, #0]
   31c5a:	2b2f      	cmp	r3, #47	; 0x2f
   31c5c:	d1e5      	bne.n	31c2a <http_client_send_request+0x92>
	}
	module->host[j] = '\0';
   31c5e:	68fa      	ldr	r2, [r7, #12]
   31c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   31c62:	18d3      	adds	r3, r2, r3
   31c64:	3301      	adds	r3, #1
   31c66:	2200      	movs	r2, #0
   31c68:	701a      	strb	r2, [r3, #0]
	uri = url + i;
   31c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31c6c:	68ba      	ldr	r2, [r7, #8]
   31c6e:	18d3      	adds	r3, r2, r3
   31c70:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
   31c72:	68fb      	ldr	r3, [r7, #12]
   31c74:	3301      	adds	r3, #1
   31c76:	781b      	ldrb	r3, [r3, #0]
   31c78:	2b00      	cmp	r3, #0
   31c7a:	d102      	bne.n	31c82 <http_client_send_request+0xea>
		return -EINVAL;
   31c7c:	2316      	movs	r3, #22
   31c7e:	425b      	negs	r3, r3
   31c80:	e0ea      	b.n	31e58 <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   31c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
   31c84:	0018      	movs	r0, r3
   31c86:	4b79      	ldr	r3, [pc, #484]	; (31e6c <http_client_send_request+0x2d4>)
   31c88:	4798      	blx	r3
   31c8a:	0003      	movs	r3, r0
   31c8c:	2b3f      	cmp	r3, #63	; 0x3f
   31c8e:	d902      	bls.n	31c96 <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
   31c90:	235b      	movs	r3, #91	; 0x5b
   31c92:	425b      	negs	r3, r3
   31c94:	e0e0      	b.n	31e58 <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
   31c96:	68fb      	ldr	r3, [r7, #12]
   31c98:	22d4      	movs	r2, #212	; 0xd4
   31c9a:	589b      	ldr	r3, [r3, r2]
   31c9c:	2b00      	cmp	r3, #0
   31c9e:	d005      	beq.n	31cac <http_client_send_request+0x114>
		free(module->req.ext_header);
   31ca0:	68fb      	ldr	r3, [r7, #12]
   31ca2:	22d4      	movs	r2, #212	; 0xd4
   31ca4:	589b      	ldr	r3, [r3, r2]
   31ca6:	0018      	movs	r0, r3
   31ca8:	4b71      	ldr	r3, [pc, #452]	; (31e70 <http_client_send_request+0x2d8>)
   31caa:	4798      	blx	r3
	}
	if (ext_header != NULL) {
   31cac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   31cae:	2b00      	cmp	r3, #0
   31cb0:	d010      	beq.n	31cd4 <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
   31cb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   31cb4:	0018      	movs	r0, r3
   31cb6:	4b6f      	ldr	r3, [pc, #444]	; (31e74 <http_client_send_request+0x2dc>)
   31cb8:	4798      	blx	r3
   31cba:	0003      	movs	r3, r0
   31cbc:	0019      	movs	r1, r3
   31cbe:	68fb      	ldr	r3, [r7, #12]
   31cc0:	22d4      	movs	r2, #212	; 0xd4
   31cc2:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
   31cc4:	68fb      	ldr	r3, [r7, #12]
   31cc6:	22d4      	movs	r2, #212	; 0xd4
   31cc8:	589b      	ldr	r3, [r3, r2]
   31cca:	2b00      	cmp	r3, #0
   31ccc:	d106      	bne.n	31cdc <http_client_send_request+0x144>
			return -ENOMEM;
   31cce:	230c      	movs	r3, #12
   31cd0:	425b      	negs	r3, r3
   31cd2:	e0c1      	b.n	31e58 <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
   31cd4:	68fb      	ldr	r3, [r7, #12]
   31cd6:	22d4      	movs	r2, #212	; 0xd4
   31cd8:	2100      	movs	r1, #0
   31cda:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
   31cdc:	68fb      	ldr	r3, [r7, #12]
   31cde:	2241      	movs	r2, #65	; 0x41
   31ce0:	5c99      	ldrb	r1, [r3, r2]
   31ce2:	2001      	movs	r0, #1
   31ce4:	4381      	bics	r1, r0
   31ce6:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
   31ce8:	68fb      	ldr	r3, [r7, #12]
   31cea:	2200      	movs	r2, #0
   31cec:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
   31cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
   31cf0:	781b      	ldrb	r3, [r3, #0]
   31cf2:	2b2f      	cmp	r3, #47	; 0x2f
   31cf4:	d107      	bne.n	31d06 <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
   31cf6:	68fb      	ldr	r3, [r7, #12]
   31cf8:	3370      	adds	r3, #112	; 0x70
   31cfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
   31cfc:	0011      	movs	r1, r2
   31cfe:	0018      	movs	r0, r3
   31d00:	4b5d      	ldr	r3, [pc, #372]	; (31e78 <http_client_send_request+0x2e0>)
   31d02:	4798      	blx	r3
   31d04:	e00f      	b.n	31d26 <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
   31d06:	68fb      	ldr	r3, [r7, #12]
   31d08:	2270      	movs	r2, #112	; 0x70
   31d0a:	212f      	movs	r1, #47	; 0x2f
   31d0c:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
   31d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   31d10:	781b      	ldrb	r3, [r3, #0]
   31d12:	2b00      	cmp	r3, #0
   31d14:	d007      	beq.n	31d26 <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
   31d16:	68fb      	ldr	r3, [r7, #12]
   31d18:	3370      	adds	r3, #112	; 0x70
   31d1a:	3301      	adds	r3, #1
   31d1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   31d1e:	0011      	movs	r1, r2
   31d20:	0018      	movs	r0, r3
   31d22:	4b55      	ldr	r3, [pc, #340]	; (31e78 <http_client_send_request+0x2e0>)
   31d24:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
   31d26:	683b      	ldr	r3, [r7, #0]
   31d28:	2b00      	cmp	r3, #0
   31d2a:	d007      	beq.n	31d3c <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   31d2c:	68fb      	ldr	r3, [r7, #12]
   31d2e:	33b0      	adds	r3, #176	; 0xb0
   31d30:	6839      	ldr	r1, [r7, #0]
   31d32:	2218      	movs	r2, #24
   31d34:	0018      	movs	r0, r3
   31d36:	4b51      	ldr	r3, [pc, #324]	; (31e7c <http_client_send_request+0x2e4>)
   31d38:	4798      	blx	r3
   31d3a:	e006      	b.n	31d4a <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   31d3c:	68fb      	ldr	r3, [r7, #12]
   31d3e:	33b0      	adds	r3, #176	; 0xb0
   31d40:	2218      	movs	r2, #24
   31d42:	2100      	movs	r1, #0
   31d44:	0018      	movs	r0, r3
   31d46:	4b4e      	ldr	r3, [pc, #312]	; (31e80 <http_client_send_request+0x2e8>)
   31d48:	4798      	blx	r3
	}

	module->req.method = method;
   31d4a:	68fb      	ldr	r3, [r7, #12]
   31d4c:	1dfa      	adds	r2, r7, #7
   31d4e:	21c8      	movs	r1, #200	; 0xc8
   31d50:	7812      	ldrb	r2, [r2, #0]
   31d52:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
   31d54:	68fb      	ldr	r3, [r7, #12]
   31d56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31d58:	2b01      	cmp	r3, #1
   31d5a:	d003      	beq.n	31d64 <http_client_send_request+0x1cc>
   31d5c:	d316      	bcc.n	31d8c <http_client_send_request+0x1f4>
   31d5e:	2b02      	cmp	r3, #2
   31d60:	d004      	beq.n	31d6c <http_client_send_request+0x1d4>
   31d62:	e074      	b.n	31e4e <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
   31d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31d66:	2b00      	cmp	r3, #0
   31d68:	d100      	bne.n	31d6c <http_client_send_request+0x1d4>
   31d6a:	e073      	b.n	31e54 <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
   31d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31d6e:	2b00      	cmp	r3, #0
   31d70:	d107      	bne.n	31d82 <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
   31d72:	68fb      	ldr	r3, [r7, #12]
   31d74:	2203      	movs	r2, #3
   31d76:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
   31d78:	68fb      	ldr	r3, [r7, #12]
   31d7a:	0018      	movs	r0, r3
   31d7c:	4b41      	ldr	r3, [pc, #260]	; (31e84 <http_client_send_request+0x2ec>)
   31d7e:	4798      	blx	r3
			break;
   31d80:	e069      	b.n	31e56 <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
   31d82:	68fb      	ldr	r3, [r7, #12]
   31d84:	2100      	movs	r1, #0
   31d86:	0018      	movs	r0, r3
   31d88:	4b3f      	ldr	r3, [pc, #252]	; (31e88 <http_client_send_request+0x2f0>)
   31d8a:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
   31d8c:	68fb      	ldr	r3, [r7, #12]
   31d8e:	2252      	movs	r2, #82	; 0x52
   31d90:	5c9b      	ldrb	r3, [r3, r2]
   31d92:	2b00      	cmp	r3, #0
   31d94:	d007      	beq.n	31da6 <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
   31d96:	2337      	movs	r3, #55	; 0x37
   31d98:	18fb      	adds	r3, r7, r3
   31d9a:	2237      	movs	r2, #55	; 0x37
   31d9c:	18ba      	adds	r2, r7, r2
   31d9e:	7812      	ldrb	r2, [r2, #0]
   31da0:	2101      	movs	r1, #1
   31da2:	430a      	orrs	r2, r1
   31da4:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   31da6:	2337      	movs	r3, #55	; 0x37
   31da8:	18fb      	adds	r3, r7, r3
   31daa:	781b      	ldrb	r3, [r3, #0]
   31dac:	001a      	movs	r2, r3
   31dae:	2101      	movs	r1, #1
   31db0:	2002      	movs	r0, #2
   31db2:	4b36      	ldr	r3, [pc, #216]	; (31e8c <http_client_send_request+0x2f4>)
   31db4:	4798      	blx	r3
   31db6:	0003      	movs	r3, r0
   31db8:	001a      	movs	r2, r3
   31dba:	68fb      	ldr	r3, [r7, #12]
   31dbc:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
   31dbe:	68fb      	ldr	r3, [r7, #12]
   31dc0:	781b      	ldrb	r3, [r3, #0]
   31dc2:	b25b      	sxtb	r3, r3
   31dc4:	2b00      	cmp	r3, #0
   31dc6:	db3f      	blt.n	31e48 <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
   31dc8:	68fb      	ldr	r3, [r7, #12]
   31dca:	781b      	ldrb	r3, [r3, #0]
   31dcc:	b25b      	sxtb	r3, r3
   31dce:	001a      	movs	r2, r3
   31dd0:	4b2f      	ldr	r3, [pc, #188]	; (31e90 <http_client_send_request+0x2f8>)
   31dd2:	0092      	lsls	r2, r2, #2
   31dd4:	68f9      	ldr	r1, [r7, #12]
   31dd6:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
   31dd8:	68fb      	ldr	r3, [r7, #12]
   31dda:	3301      	adds	r3, #1
   31ddc:	0018      	movs	r0, r3
   31dde:	4b2d      	ldr	r3, [pc, #180]	; (31e94 <http_client_send_request+0x2fc>)
   31de0:	4798      	blx	r3
   31de2:	1e03      	subs	r3, r0, #0
   31de4:	d027      	beq.n	31e36 <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
   31de6:	2314      	movs	r3, #20
   31de8:	18fb      	adds	r3, r7, r3
   31dea:	2202      	movs	r2, #2
   31dec:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   31dee:	68fb      	ldr	r3, [r7, #12]
   31df0:	2250      	movs	r2, #80	; 0x50
   31df2:	5a9b      	ldrh	r3, [r3, r2]
   31df4:	021b      	lsls	r3, r3, #8
   31df6:	b21a      	sxth	r2, r3
   31df8:	68fb      	ldr	r3, [r7, #12]
   31dfa:	2150      	movs	r1, #80	; 0x50
   31dfc:	5a5b      	ldrh	r3, [r3, r1]
   31dfe:	0a1b      	lsrs	r3, r3, #8
   31e00:	b29b      	uxth	r3, r3
   31e02:	b21b      	sxth	r3, r3
   31e04:	4313      	orrs	r3, r2
   31e06:	b21b      	sxth	r3, r3
   31e08:	b29a      	uxth	r2, r3
   31e0a:	2314      	movs	r3, #20
   31e0c:	18fb      	adds	r3, r7, r3
   31e0e:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   31e10:	68fb      	ldr	r3, [r7, #12]
   31e12:	3301      	adds	r3, #1
   31e14:	0018      	movs	r0, r3
   31e16:	4b20      	ldr	r3, [pc, #128]	; (31e98 <http_client_send_request+0x300>)
   31e18:	4798      	blx	r3
   31e1a:	0002      	movs	r2, r0
   31e1c:	2314      	movs	r3, #20
   31e1e:	18fb      	adds	r3, r7, r3
   31e20:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   31e22:	68fb      	ldr	r3, [r7, #12]
   31e24:	781b      	ldrb	r3, [r3, #0]
   31e26:	b25b      	sxtb	r3, r3
   31e28:	2214      	movs	r2, #20
   31e2a:	18b9      	adds	r1, r7, r2
   31e2c:	2210      	movs	r2, #16
   31e2e:	0018      	movs	r0, r3
   31e30:	4b1a      	ldr	r3, [pc, #104]	; (31e9c <http_client_send_request+0x304>)
   31e32:	4798      	blx	r3
   31e34:	e004      	b.n	31e40 <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
   31e36:	68fb      	ldr	r3, [r7, #12]
   31e38:	3301      	adds	r3, #1
   31e3a:	0018      	movs	r0, r3
   31e3c:	4b18      	ldr	r3, [pc, #96]	; (31ea0 <http_client_send_request+0x308>)
   31e3e:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
   31e40:	68fb      	ldr	r3, [r7, #12]
   31e42:	2201      	movs	r2, #1
   31e44:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
   31e46:	e006      	b.n	31e56 <http_client_send_request+0x2be>
			return -ENOSPC;
   31e48:	231c      	movs	r3, #28
   31e4a:	425b      	negs	r3, r3
   31e4c:	e004      	b.n	31e58 <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
   31e4e:	230b      	movs	r3, #11
   31e50:	425b      	negs	r3, r3
   31e52:	e001      	b.n	31e58 <http_client_send_request+0x2c0>
			break; /* Currently try to connect to the same server. */
   31e54:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
   31e56:	2300      	movs	r3, #0
}
   31e58:	0018      	movs	r0, r3
   31e5a:	46bd      	mov	sp, r7
   31e5c:	b00e      	add	sp, #56	; 0x38
   31e5e:	bdb0      	pop	{r4, r5, r7, pc}
   31e60:	0003aa0c 	.word	0x0003aa0c
   31e64:	000359b5 	.word	0x000359b5
   31e68:	0003aa14 	.word	0x0003aa14
   31e6c:	000359a7 	.word	0x000359a7
   31e70:	000355a5 	.word	0x000355a5
   31e74:	0003596d 	.word	0x0003596d
   31e78:	0003595b 	.word	0x0003595b
   31e7c:	000355b9 	.word	0x000355b9
   31e80:	000355ef 	.word	0x000355ef
   31e84:	00031ff9 	.word	0x00031ff9
   31e88:	00031ea5 	.word	0x00031ea5
   31e8c:	000261b5 	.word	0x000261b5
   31e90:	200046f4 	.word	0x200046f4
   31e94:	00031b01 	.word	0x00031b01
   31e98:	00026901 	.word	0x00026901
   31e9c:	000263c9 	.word	0x000263c9
   31ea0:	00026a09 	.word	0x00026a09

00031ea4 <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
   31ea4:	b580      	push	{r7, lr}
   31ea6:	b086      	sub	sp, #24
   31ea8:	af00      	add	r7, sp, #0
   31eaa:	6078      	str	r0, [r7, #4]
   31eac:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
   31eae:	687b      	ldr	r3, [r7, #4]
   31eb0:	22c0      	movs	r2, #192	; 0xc0
   31eb2:	589b      	ldr	r3, [r3, r2]
   31eb4:	2b00      	cmp	r3, #0
   31eb6:	d007      	beq.n	31ec8 <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
   31eb8:	687b      	ldr	r3, [r7, #4]
   31eba:	22c0      	movs	r2, #192	; 0xc0
   31ebc:	589b      	ldr	r3, [r3, r2]
   31ebe:	687a      	ldr	r2, [r7, #4]
   31ec0:	21c4      	movs	r1, #196	; 0xc4
   31ec2:	5852      	ldr	r2, [r2, r1]
   31ec4:	0010      	movs	r0, r2
   31ec6:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
   31ec8:	687b      	ldr	r3, [r7, #4]
   31eca:	33b0      	adds	r3, #176	; 0xb0
   31ecc:	2218      	movs	r2, #24
   31ece:	2100      	movs	r1, #0
   31ed0:	0018      	movs	r0, r3
   31ed2:	4b24      	ldr	r3, [pc, #144]	; (31f64 <_http_client_clear_conn+0xc0>)
   31ed4:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   31ed6:	687b      	ldr	r3, [r7, #4]
   31ed8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31eda:	2b00      	cmp	r3, #0
   31edc:	d005      	beq.n	31eea <_http_client_clear_conn+0x46>
		close(module->sock);
   31ede:	687b      	ldr	r3, [r7, #4]
   31ee0:	781b      	ldrb	r3, [r3, #0]
   31ee2:	b25b      	sxtb	r3, r3
   31ee4:	0018      	movs	r0, r3
   31ee6:	4b20      	ldr	r3, [pc, #128]	; (31f68 <_http_client_clear_conn+0xc4>)
   31ee8:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
   31eea:	687b      	ldr	r3, [r7, #4]
   31eec:	781b      	ldrb	r3, [r3, #0]
   31eee:	b25b      	sxtb	r3, r3
   31ef0:	001a      	movs	r2, r3
   31ef2:	4b1e      	ldr	r3, [pc, #120]	; (31f6c <_http_client_clear_conn+0xc8>)
   31ef4:	0092      	lsls	r2, r2, #2
   31ef6:	2100      	movs	r1, #0
   31ef8:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
   31efa:	687b      	ldr	r3, [r7, #4]
   31efc:	336c      	adds	r3, #108	; 0x6c
   31efe:	226c      	movs	r2, #108	; 0x6c
   31f00:	2100      	movs	r1, #0
   31f02:	0018      	movs	r0, r3
   31f04:	4b17      	ldr	r3, [pc, #92]	; (31f64 <_http_client_clear_conn+0xc0>)
   31f06:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   31f08:	687b      	ldr	r3, [r7, #4]
   31f0a:	33d8      	adds	r3, #216	; 0xd8
   31f0c:	2210      	movs	r2, #16
   31f0e:	2100      	movs	r1, #0
   31f10:	0018      	movs	r0, r3
   31f12:	4b14      	ldr	r3, [pc, #80]	; (31f64 <_http_client_clear_conn+0xc0>)
   31f14:	4798      	blx	r3
	module->req.state = STATE_INIT;
   31f16:	687b      	ldr	r3, [r7, #4]
   31f18:	2200      	movs	r2, #0
   31f1a:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   31f1c:	687b      	ldr	r3, [r7, #4]
   31f1e:	22d8      	movs	r2, #216	; 0xd8
   31f20:	2100      	movs	r1, #0
   31f22:	5099      	str	r1, [r3, r2]

	module->sending = 0;
   31f24:	687b      	ldr	r3, [r7, #4]
   31f26:	2241      	movs	r2, #65	; 0x41
   31f28:	5c99      	ldrb	r1, [r3, r2]
   31f2a:	2001      	movs	r0, #1
   31f2c:	4381      	bics	r1, r0
   31f2e:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
   31f30:	687b      	ldr	r3, [r7, #4]
   31f32:	2241      	movs	r2, #65	; 0x41
   31f34:	5c99      	ldrb	r1, [r3, r2]
   31f36:	2002      	movs	r0, #2
   31f38:	4381      	bics	r1, r0
   31f3a:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
   31f3c:	230c      	movs	r3, #12
   31f3e:	18fb      	adds	r3, r7, r3
   31f40:	683a      	ldr	r2, [r7, #0]
   31f42:	601a      	str	r2, [r3, #0]
	if (module->cb) {
   31f44:	687b      	ldr	r3, [r7, #4]
   31f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31f48:	2b00      	cmp	r3, #0
   31f4a:	d006      	beq.n	31f5a <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   31f4c:	687b      	ldr	r3, [r7, #4]
   31f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31f50:	220c      	movs	r2, #12
   31f52:	18ba      	adds	r2, r7, r2
   31f54:	6878      	ldr	r0, [r7, #4]
   31f56:	2104      	movs	r1, #4
   31f58:	4798      	blx	r3
	}
}
   31f5a:	46c0      	nop			; (mov r8, r8)
   31f5c:	46bd      	mov	sp, r7
   31f5e:	b006      	add	sp, #24
   31f60:	bd80      	pop	{r7, pc}
   31f62:	46c0      	nop			; (mov r8, r8)
   31f64:	000355ef 	.word	0x000355ef
   31f68:	000267c1 	.word	0x000267c1
   31f6c:	200046f4 	.word	0x200046f4

00031f70 <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   31f70:	b590      	push	{r4, r7, lr}
   31f72:	b087      	sub	sp, #28
   31f74:	af00      	add	r7, sp, #0
   31f76:	60f8      	str	r0, [r7, #12]
   31f78:	60b9      	str	r1, [r7, #8]
   31f7a:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
   31f7c:	68fb      	ldr	r3, [r7, #12]
   31f7e:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
   31f80:	697b      	ldr	r3, [r7, #20]
   31f82:	2241      	movs	r2, #65	; 0x41
   31f84:	5c99      	ldrb	r1, [r3, r2]
   31f86:	2001      	movs	r0, #1
   31f88:	4301      	orrs	r1, r0
   31f8a:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   31f8c:	697b      	ldr	r3, [r7, #20]
   31f8e:	2000      	movs	r0, #0
   31f90:	5618      	ldrsb	r0, [r3, r0]
   31f92:	687b      	ldr	r3, [r7, #4]
   31f94:	b29a      	uxth	r2, r3
   31f96:	68b9      	ldr	r1, [r7, #8]
   31f98:	2300      	movs	r3, #0
   31f9a:	4c14      	ldr	r4, [pc, #80]	; (31fec <_http_client_send_wait+0x7c>)
   31f9c:	47a0      	blx	r4
   31f9e:	0003      	movs	r3, r0
   31fa0:	613b      	str	r3, [r7, #16]
   31fa2:	693b      	ldr	r3, [r7, #16]
   31fa4:	2b00      	cmp	r3, #0
   31fa6:	da0f      	bge.n	31fc8 <_http_client_send_wait+0x58>
		module->sending = 0;
   31fa8:	697b      	ldr	r3, [r7, #20]
   31faa:	2241      	movs	r2, #65	; 0x41
   31fac:	5c99      	ldrb	r1, [r3, r2]
   31fae:	2001      	movs	r0, #1
   31fb0:	4381      	bics	r1, r0
   31fb2:	5499      	strb	r1, [r3, r2]
		return result;
   31fb4:	693b      	ldr	r3, [r7, #16]
   31fb6:	e014      	b.n	31fe2 <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
   31fb8:	2000      	movs	r0, #0
   31fba:	4b0d      	ldr	r3, [pc, #52]	; (31ff0 <_http_client_send_wait+0x80>)
   31fbc:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
   31fbe:	697b      	ldr	r3, [r7, #20]
   31fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   31fc2:	0018      	movs	r0, r3
   31fc4:	4b0b      	ldr	r3, [pc, #44]	; (31ff4 <_http_client_send_wait+0x84>)
   31fc6:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   31fc8:	697b      	ldr	r3, [r7, #20]
   31fca:	2241      	movs	r2, #65	; 0x41
   31fcc:	5c9b      	ldrb	r3, [r3, r2]
   31fce:	2201      	movs	r2, #1
   31fd0:	4013      	ands	r3, r2
   31fd2:	b2db      	uxtb	r3, r3
   31fd4:	2b00      	cmp	r3, #0
   31fd6:	d003      	beq.n	31fe0 <_http_client_send_wait+0x70>
   31fd8:	697b      	ldr	r3, [r7, #20]
   31fda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31fdc:	2b02      	cmp	r3, #2
   31fde:	d8eb      	bhi.n	31fb8 <_http_client_send_wait+0x48>
	}

	return 0;
   31fe0:	2300      	movs	r3, #0
}
   31fe2:	0018      	movs	r0, r3
   31fe4:	46bd      	mov	sp, r7
   31fe6:	b007      	add	sp, #28
   31fe8:	bd90      	pop	{r4, r7, pc}
   31fea:	46c0      	nop			; (mov r8, r8)
   31fec:	000264dd 	.word	0x000264dd
   31ff0:	00022b89 	.word	0x00022b89
   31ff4:	0003327d 	.word	0x0003327d

00031ff8 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   31ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
   31ffa:	46c6      	mov	lr, r8
   31ffc:	b500      	push	{lr}
   31ffe:	b0a0      	sub	sp, #128	; 0x80
   32000:	af02      	add	r7, sp, #8
   32002:	61f8      	str	r0, [r7, #28]
   32004:	4668      	mov	r0, sp
   32006:	61b8      	str	r0, [r7, #24]
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   32008:	2318      	movs	r3, #24
   3200a:	2218      	movs	r2, #24
   3200c:	18ba      	adds	r2, r7, r2
   3200e:	18d0      	adds	r0, r2, r3
   32010:	4bbd      	ldr	r3, [pc, #756]	; (32308 <_http_client_request+0x310>)
   32012:	469c      	mov	ip, r3
   32014:	4663      	mov	r3, ip
   32016:	cb16      	ldmia	r3!, {r1, r2, r4}
   32018:	c016      	stmia	r0!, {r1, r2, r4}
   3201a:	469c      	mov	ip, r3
   3201c:	4663      	mov	r3, ip
   3201e:	681b      	ldr	r3, [r3, #0]
   32020:	469c      	mov	ip, r3
   32022:	4663      	mov	r3, ip
   32024:	6003      	str	r3, [r0, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   32026:	69f8      	ldr	r0, [r7, #28]
   32028:	6e40      	ldr	r0, [r0, #100]	; 0x64
   3202a:	4684      	mov	ip, r0
   3202c:	2301      	movs	r3, #1
   3202e:	425b      	negs	r3, r3
   32030:	4698      	mov	r8, r3
   32032:	44c4      	add	ip, r8
   32034:	4663      	mov	r3, ip
   32036:	66fb      	str	r3, [r7, #108]	; 0x6c
   32038:	6038      	str	r0, [r7, #0]
   3203a:	2300      	movs	r3, #0
   3203c:	607b      	str	r3, [r7, #4]
   3203e:	6839      	ldr	r1, [r7, #0]
   32040:	687a      	ldr	r2, [r7, #4]
   32042:	000b      	movs	r3, r1
   32044:	0f5b      	lsrs	r3, r3, #29
   32046:	469c      	mov	ip, r3
   32048:	0013      	movs	r3, r2
   3204a:	00db      	lsls	r3, r3, #3
   3204c:	617b      	str	r3, [r7, #20]
   3204e:	4663      	mov	r3, ip
   32050:	697c      	ldr	r4, [r7, #20]
   32052:	431c      	orrs	r4, r3
   32054:	617c      	str	r4, [r7, #20]
   32056:	000b      	movs	r3, r1
   32058:	00db      	lsls	r3, r3, #3
   3205a:	613b      	str	r3, [r7, #16]
   3205c:	0005      	movs	r5, r0
   3205e:	2200      	movs	r2, #0
   32060:	0016      	movs	r6, r2
   32062:	0f6a      	lsrs	r2, r5, #29
   32064:	00f3      	lsls	r3, r6, #3
   32066:	60fb      	str	r3, [r7, #12]
   32068:	68fb      	ldr	r3, [r7, #12]
   3206a:	4313      	orrs	r3, r2
   3206c:	60fb      	str	r3, [r7, #12]
   3206e:	00eb      	lsls	r3, r5, #3
   32070:	60bb      	str	r3, [r7, #8]
   32072:	1dc3      	adds	r3, r0, #7
   32074:	08db      	lsrs	r3, r3, #3
   32076:	00db      	lsls	r3, r3, #3
   32078:	466a      	mov	r2, sp
   3207a:	1ad3      	subs	r3, r2, r3
   3207c:	469d      	mov	sp, r3
   3207e:	ab02      	add	r3, sp, #8
   32080:	3300      	adds	r3, #0
   32082:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
   32084:	69fb      	ldr	r3, [r7, #28]
   32086:	2b00      	cmp	r3, #0
   32088:	d100      	bne.n	3208c <_http_client_request+0x94>
   3208a:	e346      	b.n	3271a <_http_client_request+0x722>
		return;
	}

	if (module->sending != 0) {
   3208c:	69fb      	ldr	r3, [r7, #28]
   3208e:	2241      	movs	r2, #65	; 0x41
   32090:	5c9b      	ldrb	r3, [r3, r2]
   32092:	2201      	movs	r2, #1
   32094:	4013      	ands	r3, r2
   32096:	b2db      	uxtb	r3, r3
   32098:	2b00      	cmp	r3, #0
   3209a:	d000      	beq.n	3209e <_http_client_request+0xa6>
   3209c:	e33f      	b.n	3271e <_http_client_request+0x726>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
   3209e:	69fb      	ldr	r3, [r7, #28]
   320a0:	33b0      	adds	r3, #176	; 0xb0
   320a2:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
   320a4:	69fb      	ldr	r3, [r7, #28]
   320a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   320a8:	2b03      	cmp	r3, #3
   320aa:	d003      	beq.n	320b4 <_http_client_request+0xbc>
   320ac:	2b04      	cmp	r3, #4
   320ae:	d100      	bne.n	320b2 <_http_client_request+0xba>
   320b0:	e1b3      	b.n	3241a <_http_client_request+0x422>
		}

		break;
	default:
		/* Invalid status. */
		break;
   320b2:	e32f      	b.n	32714 <_http_client_request+0x71c>
		module->req.content_length = 0;
   320b4:	69fb      	ldr	r3, [r7, #28]
   320b6:	22cc      	movs	r2, #204	; 0xcc
   320b8:	2100      	movs	r1, #0
   320ba:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
   320bc:	69fb      	ldr	r3, [r7, #28]
   320be:	22d0      	movs	r2, #208	; 0xd0
   320c0:	2100      	movs	r1, #0
   320c2:	5099      	str	r1, [r3, r2]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   320c4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   320c6:	69fb      	ldr	r3, [r7, #28]
   320c8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   320ca:	4c90      	ldr	r4, [pc, #576]	; (3230c <_http_client_request+0x314>)
   320cc:	2334      	movs	r3, #52	; 0x34
   320ce:	2018      	movs	r0, #24
   320d0:	1838      	adds	r0, r7, r0
   320d2:	18c0      	adds	r0, r0, r3
   320d4:	69fb      	ldr	r3, [r7, #28]
   320d6:	9300      	str	r3, [sp, #0]
   320d8:	0023      	movs	r3, r4
   320da:	4c8d      	ldr	r4, [pc, #564]	; (32310 <_http_client_request+0x318>)
   320dc:	47a0      	blx	r4
		if (module->req.method == HTTP_METHOD_GET) {
   320de:	69fb      	ldr	r3, [r7, #28]
   320e0:	22c8      	movs	r2, #200	; 0xc8
   320e2:	5c9b      	ldrb	r3, [r3, r2]
   320e4:	2b01      	cmp	r3, #1
   320e6:	d10a      	bne.n	320fe <_http_client_request+0x106>
			stream_writer_send_buffer(&writer, "GET ", 4);
   320e8:	498a      	ldr	r1, [pc, #552]	; (32314 <_http_client_request+0x31c>)
   320ea:	2334      	movs	r3, #52	; 0x34
   320ec:	2218      	movs	r2, #24
   320ee:	4694      	mov	ip, r2
   320f0:	44bc      	add	ip, r7
   320f2:	4463      	add	r3, ip
   320f4:	2204      	movs	r2, #4
   320f6:	0018      	movs	r0, r3
   320f8:	4b87      	ldr	r3, [pc, #540]	; (32318 <_http_client_request+0x320>)
   320fa:	4798      	blx	r3
   320fc:	e04e      	b.n	3219c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_POST) {
   320fe:	69fb      	ldr	r3, [r7, #28]
   32100:	22c8      	movs	r2, #200	; 0xc8
   32102:	5c9b      	ldrb	r3, [r3, r2]
   32104:	2b02      	cmp	r3, #2
   32106:	d10a      	bne.n	3211e <_http_client_request+0x126>
			stream_writer_send_buffer(&writer, "POST ", 5);
   32108:	4984      	ldr	r1, [pc, #528]	; (3231c <_http_client_request+0x324>)
   3210a:	2334      	movs	r3, #52	; 0x34
   3210c:	2218      	movs	r2, #24
   3210e:	4694      	mov	ip, r2
   32110:	44bc      	add	ip, r7
   32112:	4463      	add	r3, ip
   32114:	2205      	movs	r2, #5
   32116:	0018      	movs	r0, r3
   32118:	4b7f      	ldr	r3, [pc, #508]	; (32318 <_http_client_request+0x320>)
   3211a:	4798      	blx	r3
   3211c:	e03e      	b.n	3219c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   3211e:	69fb      	ldr	r3, [r7, #28]
   32120:	22c8      	movs	r2, #200	; 0xc8
   32122:	5c9b      	ldrb	r3, [r3, r2]
   32124:	2b03      	cmp	r3, #3
   32126:	d10a      	bne.n	3213e <_http_client_request+0x146>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   32128:	497d      	ldr	r1, [pc, #500]	; (32320 <_http_client_request+0x328>)
   3212a:	2334      	movs	r3, #52	; 0x34
   3212c:	2218      	movs	r2, #24
   3212e:	4694      	mov	ip, r2
   32130:	44bc      	add	ip, r7
   32132:	4463      	add	r3, ip
   32134:	2207      	movs	r2, #7
   32136:	0018      	movs	r0, r3
   32138:	4b77      	ldr	r3, [pc, #476]	; (32318 <_http_client_request+0x320>)
   3213a:	4798      	blx	r3
   3213c:	e02e      	b.n	3219c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_PUT) {
   3213e:	69fb      	ldr	r3, [r7, #28]
   32140:	22c8      	movs	r2, #200	; 0xc8
   32142:	5c9b      	ldrb	r3, [r3, r2]
   32144:	2b04      	cmp	r3, #4
   32146:	d10a      	bne.n	3215e <_http_client_request+0x166>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   32148:	4976      	ldr	r1, [pc, #472]	; (32324 <_http_client_request+0x32c>)
   3214a:	2334      	movs	r3, #52	; 0x34
   3214c:	2218      	movs	r2, #24
   3214e:	4694      	mov	ip, r2
   32150:	44bc      	add	ip, r7
   32152:	4463      	add	r3, ip
   32154:	2204      	movs	r2, #4
   32156:	0018      	movs	r0, r3
   32158:	4b6f      	ldr	r3, [pc, #444]	; (32318 <_http_client_request+0x320>)
   3215a:	4798      	blx	r3
   3215c:	e01e      	b.n	3219c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   3215e:	69fb      	ldr	r3, [r7, #28]
   32160:	22c8      	movs	r2, #200	; 0xc8
   32162:	5c9b      	ldrb	r3, [r3, r2]
   32164:	2b05      	cmp	r3, #5
   32166:	d10a      	bne.n	3217e <_http_client_request+0x186>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   32168:	496f      	ldr	r1, [pc, #444]	; (32328 <_http_client_request+0x330>)
   3216a:	2334      	movs	r3, #52	; 0x34
   3216c:	2218      	movs	r2, #24
   3216e:	4694      	mov	ip, r2
   32170:	44bc      	add	ip, r7
   32172:	4463      	add	r3, ip
   32174:	2208      	movs	r2, #8
   32176:	0018      	movs	r0, r3
   32178:	4b67      	ldr	r3, [pc, #412]	; (32318 <_http_client_request+0x320>)
   3217a:	4798      	blx	r3
   3217c:	e00e      	b.n	3219c <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   3217e:	69fb      	ldr	r3, [r7, #28]
   32180:	22c8      	movs	r2, #200	; 0xc8
   32182:	5c9b      	ldrb	r3, [r3, r2]
   32184:	2b06      	cmp	r3, #6
   32186:	d109      	bne.n	3219c <_http_client_request+0x1a4>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   32188:	4968      	ldr	r1, [pc, #416]	; (3232c <_http_client_request+0x334>)
   3218a:	2334      	movs	r3, #52	; 0x34
   3218c:	2218      	movs	r2, #24
   3218e:	4694      	mov	ip, r2
   32190:	44bc      	add	ip, r7
   32192:	4463      	add	r3, ip
   32194:	2205      	movs	r2, #5
   32196:	0018      	movs	r0, r3
   32198:	4b5f      	ldr	r3, [pc, #380]	; (32318 <_http_client_request+0x320>)
   3219a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   3219c:	69fb      	ldr	r3, [r7, #28]
   3219e:	3370      	adds	r3, #112	; 0x70
   321a0:	001c      	movs	r4, r3
   321a2:	69fb      	ldr	r3, [r7, #28]
   321a4:	3370      	adds	r3, #112	; 0x70
   321a6:	0018      	movs	r0, r3
   321a8:	4b61      	ldr	r3, [pc, #388]	; (32330 <_http_client_request+0x338>)
   321aa:	4798      	blx	r3
   321ac:	0002      	movs	r2, r0
   321ae:	2334      	movs	r3, #52	; 0x34
   321b0:	2118      	movs	r1, #24
   321b2:	468c      	mov	ip, r1
   321b4:	44bc      	add	ip, r7
   321b6:	4463      	add	r3, ip
   321b8:	0021      	movs	r1, r4
   321ba:	0018      	movs	r0, r3
   321bc:	4b56      	ldr	r3, [pc, #344]	; (32318 <_http_client_request+0x320>)
   321be:	4798      	blx	r3
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   321c0:	495c      	ldr	r1, [pc, #368]	; (32334 <_http_client_request+0x33c>)
   321c2:	2334      	movs	r3, #52	; 0x34
   321c4:	2218      	movs	r2, #24
   321c6:	4694      	mov	ip, r2
   321c8:	44bc      	add	ip, r7
   321ca:	4463      	add	r3, ip
   321cc:	220b      	movs	r2, #11
   321ce:	0018      	movs	r0, r3
   321d0:	4b51      	ldr	r3, [pc, #324]	; (32318 <_http_client_request+0x320>)
   321d2:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   321d4:	4958      	ldr	r1, [pc, #352]	; (32338 <_http_client_request+0x340>)
   321d6:	2334      	movs	r3, #52	; 0x34
   321d8:	2218      	movs	r2, #24
   321da:	4694      	mov	ip, r2
   321dc:	44bc      	add	ip, r7
   321de:	4463      	add	r3, ip
   321e0:	220c      	movs	r2, #12
   321e2:	0018      	movs	r0, r3
   321e4:	4b4c      	ldr	r3, [pc, #304]	; (32318 <_http_client_request+0x320>)
   321e6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   321e8:	69fb      	ldr	r3, [r7, #28]
   321ea:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   321ec:	69fb      	ldr	r3, [r7, #28]
   321ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   321f0:	0018      	movs	r0, r3
   321f2:	4b4f      	ldr	r3, [pc, #316]	; (32330 <_http_client_request+0x338>)
   321f4:	4798      	blx	r3
   321f6:	0002      	movs	r2, r0
   321f8:	2334      	movs	r3, #52	; 0x34
   321fa:	2118      	movs	r1, #24
   321fc:	468c      	mov	ip, r1
   321fe:	44bc      	add	ip, r7
   32200:	4463      	add	r3, ip
   32202:	0021      	movs	r1, r4
   32204:	0018      	movs	r0, r3
   32206:	4b44      	ldr	r3, [pc, #272]	; (32318 <_http_client_request+0x320>)
   32208:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   3220a:	494c      	ldr	r1, [pc, #304]	; (3233c <_http_client_request+0x344>)
   3220c:	2334      	movs	r3, #52	; 0x34
   3220e:	2218      	movs	r2, #24
   32210:	4694      	mov	ip, r2
   32212:	44bc      	add	ip, r7
   32214:	4463      	add	r3, ip
   32216:	2202      	movs	r2, #2
   32218:	0018      	movs	r0, r3
   3221a:	4b3f      	ldr	r3, [pc, #252]	; (32318 <_http_client_request+0x320>)
   3221c:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   3221e:	4948      	ldr	r1, [pc, #288]	; (32340 <_http_client_request+0x348>)
   32220:	2334      	movs	r3, #52	; 0x34
   32222:	2218      	movs	r2, #24
   32224:	4694      	mov	ip, r2
   32226:	44bc      	add	ip, r7
   32228:	4463      	add	r3, ip
   3222a:	2206      	movs	r2, #6
   3222c:	0018      	movs	r0, r3
   3222e:	4b3a      	ldr	r3, [pc, #232]	; (32318 <_http_client_request+0x320>)
   32230:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   32232:	69fb      	ldr	r3, [r7, #28]
   32234:	1c5c      	adds	r4, r3, #1
   32236:	69fb      	ldr	r3, [r7, #28]
   32238:	3301      	adds	r3, #1
   3223a:	0018      	movs	r0, r3
   3223c:	4b3c      	ldr	r3, [pc, #240]	; (32330 <_http_client_request+0x338>)
   3223e:	4798      	blx	r3
   32240:	0002      	movs	r2, r0
   32242:	2334      	movs	r3, #52	; 0x34
   32244:	2118      	movs	r1, #24
   32246:	468c      	mov	ip, r1
   32248:	44bc      	add	ip, r7
   3224a:	4463      	add	r3, ip
   3224c:	0021      	movs	r1, r4
   3224e:	0018      	movs	r0, r3
   32250:	4b31      	ldr	r3, [pc, #196]	; (32318 <_http_client_request+0x320>)
   32252:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   32254:	4939      	ldr	r1, [pc, #228]	; (3233c <_http_client_request+0x344>)
   32256:	2334      	movs	r3, #52	; 0x34
   32258:	2218      	movs	r2, #24
   3225a:	4694      	mov	ip, r2
   3225c:	44bc      	add	ip, r7
   3225e:	4463      	add	r3, ip
   32260:	2202      	movs	r2, #2
   32262:	0018      	movs	r0, r3
   32264:	4b2c      	ldr	r3, [pc, #176]	; (32318 <_http_client_request+0x320>)
   32266:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   32268:	4936      	ldr	r1, [pc, #216]	; (32344 <_http_client_request+0x34c>)
   3226a:	2334      	movs	r3, #52	; 0x34
   3226c:	2218      	movs	r2, #24
   3226e:	4694      	mov	ip, r2
   32270:	44bc      	add	ip, r7
   32272:	4463      	add	r3, ip
   32274:	2218      	movs	r2, #24
   32276:	0018      	movs	r0, r3
   32278:	4b27      	ldr	r3, [pc, #156]	; (32318 <_http_client_request+0x320>)
   3227a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   3227c:	4932      	ldr	r1, [pc, #200]	; (32348 <_http_client_request+0x350>)
   3227e:	2334      	movs	r3, #52	; 0x34
   32280:	2218      	movs	r2, #24
   32282:	4694      	mov	ip, r2
   32284:	44bc      	add	ip, r7
   32286:	4463      	add	r3, ip
   32288:	2213      	movs	r2, #19
   3228a:	0018      	movs	r0, r3
   3228c:	4b22      	ldr	r3, [pc, #136]	; (32318 <_http_client_request+0x320>)
   3228e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   32290:	492e      	ldr	r1, [pc, #184]	; (3234c <_http_client_request+0x354>)
   32292:	2334      	movs	r3, #52	; 0x34
   32294:	2218      	movs	r2, #24
   32296:	4694      	mov	ip, r2
   32298:	44bc      	add	ip, r7
   3229a:	4463      	add	r3, ip
   3229c:	2217      	movs	r2, #23
   3229e:	0018      	movs	r0, r3
   322a0:	4b1d      	ldr	r3, [pc, #116]	; (32318 <_http_client_request+0x320>)
   322a2:	4798      	blx	r3
		if (entity->read != NULL) {
   322a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   322a6:	68db      	ldr	r3, [r3, #12]
   322a8:	2b00      	cmp	r3, #0
   322aa:	d100      	bne.n	322ae <_http_client_request+0x2b6>
   322ac:	e088      	b.n	323c0 <_http_client_request+0x3c8>
			if (entity->is_chunked) {
   322ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   322b0:	781b      	ldrb	r3, [r3, #0]
   322b2:	2b00      	cmp	r3, #0
   322b4:	d00f      	beq.n	322d6 <_http_client_request+0x2de>
				module->req.content_length = -1;
   322b6:	69fb      	ldr	r3, [r7, #28]
   322b8:	21cc      	movs	r1, #204	; 0xcc
   322ba:	2201      	movs	r2, #1
   322bc:	4252      	negs	r2, r2
   322be:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   322c0:	4923      	ldr	r1, [pc, #140]	; (32350 <_http_client_request+0x358>)
   322c2:	2334      	movs	r3, #52	; 0x34
   322c4:	2218      	movs	r2, #24
   322c6:	4694      	mov	ip, r2
   322c8:	44bc      	add	ip, r7
   322ca:	4463      	add	r3, ip
   322cc:	221c      	movs	r2, #28
   322ce:	0018      	movs	r0, r3
   322d0:	4b11      	ldr	r3, [pc, #68]	; (32318 <_http_client_request+0x320>)
   322d2:	4798      	blx	r3
   322d4:	e074      	b.n	323c0 <_http_client_request+0x3c8>
			} else if(entity->get_contents_length) {
   322d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   322d8:	689b      	ldr	r3, [r3, #8]
   322da:	2b00      	cmp	r3, #0
   322dc:	d070      	beq.n	323c0 <_http_client_request+0x3c8>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   322de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   322e0:	689a      	ldr	r2, [r3, #8]
   322e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   322e4:	695b      	ldr	r3, [r3, #20]
   322e6:	0018      	movs	r0, r3
   322e8:	4790      	blx	r2
   322ea:	0001      	movs	r1, r0
   322ec:	69fb      	ldr	r3, [r7, #28]
   322ee:	22cc      	movs	r2, #204	; 0xcc
   322f0:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
   322f2:	69fb      	ldr	r3, [r7, #28]
   322f4:	22cc      	movs	r2, #204	; 0xcc
   322f6:	589b      	ldr	r3, [r3, r2]
   322f8:	2b00      	cmp	r3, #0
   322fa:	da2b      	bge.n	32354 <_http_client_request+0x35c>
					module->req.content_length = 0;
   322fc:	69fb      	ldr	r3, [r7, #28]
   322fe:	22cc      	movs	r2, #204	; 0xcc
   32300:	2100      	movs	r1, #0
   32302:	5099      	str	r1, [r3, r2]
   32304:	e05c      	b.n	323c0 <_http_client_request+0x3c8>
   32306:	46c0      	nop			; (mov r8, r8)
   32308:	0003aafc 	.word	0x0003aafc
   3230c:	00031f71 	.word	0x00031f71
   32310:	00032ed9 	.word	0x00032ed9
   32314:	0003aa20 	.word	0x0003aa20
   32318:	00032f59 	.word	0x00032f59
   3231c:	0003aa28 	.word	0x0003aa28
   32320:	0003aa30 	.word	0x0003aa30
   32324:	0003aa38 	.word	0x0003aa38
   32328:	0003aa40 	.word	0x0003aa40
   3232c:	0003aa4c 	.word	0x0003aa4c
   32330:	000359a7 	.word	0x000359a7
   32334:	0003aa54 	.word	0x0003aa54
   32338:	0003aa60 	.word	0x0003aa60
   3233c:	0003aa70 	.word	0x0003aa70
   32340:	0003aa74 	.word	0x0003aa74
   32344:	0003aa7c 	.word	0x0003aa7c
   32348:	0003aa98 	.word	0x0003aa98
   3234c:	0003aaac 	.word	0x0003aaac
   32350:	0003aac4 	.word	0x0003aac4
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   32354:	69fb      	ldr	r3, [r7, #28]
   32356:	22cc      	movs	r2, #204	; 0xcc
   32358:	589b      	ldr	r3, [r3, r2]
   3235a:	001a      	movs	r2, r3
   3235c:	49e0      	ldr	r1, [pc, #896]	; (326e0 <_http_client_request+0x6e8>)
   3235e:	2328      	movs	r3, #40	; 0x28
   32360:	2018      	movs	r0, #24
   32362:	4684      	mov	ip, r0
   32364:	44bc      	add	ip, r7
   32366:	4463      	add	r3, ip
   32368:	0018      	movs	r0, r3
   3236a:	4bde      	ldr	r3, [pc, #888]	; (326e4 <_http_client_request+0x6ec>)
   3236c:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   3236e:	49de      	ldr	r1, [pc, #888]	; (326e8 <_http_client_request+0x6f0>)
   32370:	2334      	movs	r3, #52	; 0x34
   32372:	2218      	movs	r2, #24
   32374:	4694      	mov	ip, r2
   32376:	44bc      	add	ip, r7
   32378:	4463      	add	r3, ip
   3237a:	2210      	movs	r2, #16
   3237c:	0018      	movs	r0, r3
   3237e:	4bdb      	ldr	r3, [pc, #876]	; (326ec <_http_client_request+0x6f4>)
   32380:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
   32382:	2328      	movs	r3, #40	; 0x28
   32384:	2218      	movs	r2, #24
   32386:	4694      	mov	ip, r2
   32388:	44bc      	add	ip, r7
   3238a:	4463      	add	r3, ip
   3238c:	0018      	movs	r0, r3
   3238e:	4bd8      	ldr	r3, [pc, #864]	; (326f0 <_http_client_request+0x6f8>)
   32390:	4798      	blx	r3
   32392:	0002      	movs	r2, r0
   32394:	2328      	movs	r3, #40	; 0x28
   32396:	2118      	movs	r1, #24
   32398:	1879      	adds	r1, r7, r1
   3239a:	18c9      	adds	r1, r1, r3
   3239c:	2334      	movs	r3, #52	; 0x34
   3239e:	2018      	movs	r0, #24
   323a0:	4684      	mov	ip, r0
   323a2:	44bc      	add	ip, r7
   323a4:	4463      	add	r3, ip
   323a6:	0018      	movs	r0, r3
   323a8:	4bd0      	ldr	r3, [pc, #832]	; (326ec <_http_client_request+0x6f4>)
   323aa:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   323ac:	49d1      	ldr	r1, [pc, #836]	; (326f4 <_http_client_request+0x6fc>)
   323ae:	2334      	movs	r3, #52	; 0x34
   323b0:	2218      	movs	r2, #24
   323b2:	4694      	mov	ip, r2
   323b4:	44bc      	add	ip, r7
   323b6:	4463      	add	r3, ip
   323b8:	2202      	movs	r2, #2
   323ba:	0018      	movs	r0, r3
   323bc:	4bcb      	ldr	r3, [pc, #812]	; (326ec <_http_client_request+0x6f4>)
   323be:	4798      	blx	r3
		if (module->req.ext_header != NULL ) {
   323c0:	69fb      	ldr	r3, [r7, #28]
   323c2:	22d4      	movs	r2, #212	; 0xd4
   323c4:	589b      	ldr	r3, [r3, r2]
   323c6:	2b00      	cmp	r3, #0
   323c8:	d012      	beq.n	323f0 <_http_client_request+0x3f8>
				module->req.ext_header,
   323ca:	69fb      	ldr	r3, [r7, #28]
   323cc:	22d4      	movs	r2, #212	; 0xd4
   323ce:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
   323d0:	69fb      	ldr	r3, [r7, #28]
   323d2:	22d4      	movs	r2, #212	; 0xd4
   323d4:	589b      	ldr	r3, [r3, r2]
			stream_writer_send_buffer(&writer,
   323d6:	0018      	movs	r0, r3
   323d8:	4bc5      	ldr	r3, [pc, #788]	; (326f0 <_http_client_request+0x6f8>)
   323da:	4798      	blx	r3
   323dc:	0002      	movs	r2, r0
   323de:	2334      	movs	r3, #52	; 0x34
   323e0:	2118      	movs	r1, #24
   323e2:	468c      	mov	ip, r1
   323e4:	44bc      	add	ip, r7
   323e6:	4463      	add	r3, ip
   323e8:	0021      	movs	r1, r4
   323ea:	0018      	movs	r0, r3
   323ec:	4bbf      	ldr	r3, [pc, #764]	; (326ec <_http_client_request+0x6f4>)
   323ee:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   323f0:	49c0      	ldr	r1, [pc, #768]	; (326f4 <_http_client_request+0x6fc>)
   323f2:	2334      	movs	r3, #52	; 0x34
   323f4:	2218      	movs	r2, #24
   323f6:	4694      	mov	ip, r2
   323f8:	44bc      	add	ip, r7
   323fa:	4463      	add	r3, ip
   323fc:	2202      	movs	r2, #2
   323fe:	0018      	movs	r0, r3
   32400:	4bba      	ldr	r3, [pc, #744]	; (326ec <_http_client_request+0x6f4>)
   32402:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   32404:	2334      	movs	r3, #52	; 0x34
   32406:	2218      	movs	r2, #24
   32408:	4694      	mov	ip, r2
   3240a:	44bc      	add	ip, r7
   3240c:	4463      	add	r3, ip
   3240e:	0018      	movs	r0, r3
   32410:	4bb9      	ldr	r3, [pc, #740]	; (326f8 <_http_client_request+0x700>)
   32412:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
   32414:	69fb      	ldr	r3, [r7, #28]
   32416:	2204      	movs	r2, #4
   32418:	66da      	str	r2, [r3, #108]	; 0x6c
		if (module->req.content_length < 0 && entity->read) {
   3241a:	69fb      	ldr	r3, [r7, #28]
   3241c:	22cc      	movs	r2, #204	; 0xcc
   3241e:	589b      	ldr	r3, [r3, r2]
   32420:	2b00      	cmp	r3, #0
   32422:	db00      	blt.n	32426 <_http_client_request+0x42e>
   32424:	e0c6      	b.n	325b4 <_http_client_request+0x5bc>
   32426:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   32428:	68db      	ldr	r3, [r3, #12]
   3242a:	2b00      	cmp	r3, #0
   3242c:	d100      	bne.n	32430 <_http_client_request+0x438>
   3242e:	e0c1      	b.n	325b4 <_http_client_request+0x5bc>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   32430:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   32432:	68dc      	ldr	r4, [r3, #12]
   32434:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   32436:	6958      	ldr	r0, [r3, #20]
   32438:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   3243a:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   3243c:	69fb      	ldr	r3, [r7, #28]
   3243e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   32440:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   32442:	69fb      	ldr	r3, [r7, #28]
   32444:	22d0      	movs	r2, #208	; 0xd0
   32446:	589b      	ldr	r3, [r3, r2]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   32448:	002a      	movs	r2, r5
   3244a:	47a0      	blx	r4
   3244c:	0003      	movs	r3, r0
   3244e:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   32450:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32452:	2b00      	cmp	r3, #0
   32454:	da01      	bge.n	3245a <_http_client_request+0x462>
				size = 0;
   32456:	2300      	movs	r3, #0
   32458:	677b      	str	r3, [r7, #116]	; 0x74
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   3245a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   3245c:	220a      	movs	r2, #10
   3245e:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   32460:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   32462:	220d      	movs	r2, #13
   32464:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   32466:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32468:	3305      	adds	r3, #5
   3246a:	6eba      	ldr	r2, [r7, #104]	; 0x68
   3246c:	210d      	movs	r1, #13
   3246e:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   32470:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32472:	3306      	adds	r3, #6
   32474:	6eba      	ldr	r2, [r7, #104]	; 0x68
   32476:	210a      	movs	r1, #10
   32478:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
   3247a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3247c:	2b00      	cmp	r3, #0
   3247e:	db14      	blt.n	324aa <_http_client_request+0x4b2>
				ptr = buffer + 2;
   32480:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   32482:	3302      	adds	r3, #2
   32484:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
   32486:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32488:	4a9c      	ldr	r2, [pc, #624]	; (326fc <_http_client_request+0x704>)
   3248a:	4013      	ands	r3, r2
   3248c:	d504      	bpl.n	32498 <_http_client_request+0x4a0>
   3248e:	3b01      	subs	r3, #1
   32490:	2210      	movs	r2, #16
   32492:	4252      	negs	r2, r2
   32494:	4313      	orrs	r3, r2
   32496:	3301      	adds	r3, #1
   32498:	001a      	movs	r2, r3
   3249a:	2318      	movs	r3, #24
   3249c:	2118      	movs	r1, #24
   3249e:	468c      	mov	ip, r1
   324a0:	44bc      	add	ip, r7
   324a2:	4463      	add	r3, ip
   324a4:	5c9a      	ldrb	r2, [r3, r2]
   324a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   324a8:	701a      	strb	r2, [r3, #0]
			if (size >= 0x10) {
   324aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   324ac:	2b0f      	cmp	r3, #15
   324ae:	dd19      	ble.n	324e4 <_http_client_request+0x4ec>
				ptr = buffer + 1;
   324b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   324b2:	3301      	adds	r3, #1
   324b4:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
   324b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   324b8:	2b00      	cmp	r3, #0
   324ba:	da00      	bge.n	324be <_http_client_request+0x4c6>
   324bc:	330f      	adds	r3, #15
   324be:	111b      	asrs	r3, r3, #4
   324c0:	001a      	movs	r2, r3
   324c2:	4b8e      	ldr	r3, [pc, #568]	; (326fc <_http_client_request+0x704>)
   324c4:	4013      	ands	r3, r2
   324c6:	d504      	bpl.n	324d2 <_http_client_request+0x4da>
   324c8:	3b01      	subs	r3, #1
   324ca:	2210      	movs	r2, #16
   324cc:	4252      	negs	r2, r2
   324ce:	4313      	orrs	r3, r2
   324d0:	3301      	adds	r3, #1
   324d2:	001a      	movs	r2, r3
   324d4:	2318      	movs	r3, #24
   324d6:	2118      	movs	r1, #24
   324d8:	468c      	mov	ip, r1
   324da:	44bc      	add	ip, r7
   324dc:	4463      	add	r3, ip
   324de:	5c9a      	ldrb	r2, [r3, r2]
   324e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   324e2:	701a      	strb	r2, [r3, #0]
			if (size >= 0x100) {
   324e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   324e6:	2bff      	cmp	r3, #255	; 0xff
   324e8:	dd18      	ble.n	3251c <_http_client_request+0x524>
				ptr = buffer;
   324ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   324ec:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
   324ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   324f0:	2b00      	cmp	r3, #0
   324f2:	da00      	bge.n	324f6 <_http_client_request+0x4fe>
   324f4:	33ff      	adds	r3, #255	; 0xff
   324f6:	121b      	asrs	r3, r3, #8
   324f8:	001a      	movs	r2, r3
   324fa:	4b80      	ldr	r3, [pc, #512]	; (326fc <_http_client_request+0x704>)
   324fc:	4013      	ands	r3, r2
   324fe:	d504      	bpl.n	3250a <_http_client_request+0x512>
   32500:	3b01      	subs	r3, #1
   32502:	2210      	movs	r2, #16
   32504:	4252      	negs	r2, r2
   32506:	4313      	orrs	r3, r2
   32508:	3301      	adds	r3, #1
   3250a:	001a      	movs	r2, r3
   3250c:	2318      	movs	r3, #24
   3250e:	2118      	movs	r1, #24
   32510:	468c      	mov	ip, r1
   32512:	44bc      	add	ip, r7
   32514:	4463      	add	r3, ip
   32516:	5c9a      	ldrb	r2, [r3, r2]
   32518:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   3251a:	701a      	strb	r2, [r3, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   3251c:	69fb      	ldr	r3, [r7, #28]
   3251e:	2000      	movs	r0, #0
   32520:	5618      	ldrsb	r0, [r3, r0]
   32522:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   32524:	3303      	adds	r3, #3
   32526:	001a      	movs	r2, r3
   32528:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   3252a:	1ad3      	subs	r3, r2, r3
   3252c:	b29a      	uxth	r2, r3
   3252e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32530:	b29b      	uxth	r3, r3
   32532:	18d3      	adds	r3, r2, r3
   32534:	b29b      	uxth	r3, r3
   32536:	3304      	adds	r3, #4
   32538:	b29a      	uxth	r2, r3
   3253a:	6f39      	ldr	r1, [r7, #112]	; 0x70
   3253c:	2300      	movs	r3, #0
   3253e:	4c70      	ldr	r4, [pc, #448]	; (32700 <_http_client_request+0x708>)
   32540:	47a0      	blx	r4
   32542:	0003      	movs	r3, r0
   32544:	663b      	str	r3, [r7, #96]	; 0x60
   32546:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   32548:	2b00      	cmp	r3, #0
   3254a:	da07      	bge.n	3255c <_http_client_request+0x564>
				_http_client_clear_conn(module, -EIO);
   3254c:	2305      	movs	r3, #5
   3254e:	425a      	negs	r2, r3
   32550:	69fb      	ldr	r3, [r7, #28]
   32552:	0011      	movs	r1, r2
   32554:	0018      	movs	r0, r3
   32556:	4b6b      	ldr	r3, [pc, #428]	; (32704 <_http_client_request+0x70c>)
   32558:	4798      	blx	r3
				return;
   3255a:	e0e1      	b.n	32720 <_http_client_request+0x728>
			module->req.sent_length += size;
   3255c:	69fb      	ldr	r3, [r7, #28]
   3255e:	22d0      	movs	r2, #208	; 0xd0
   32560:	589a      	ldr	r2, [r3, r2]
   32562:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32564:	18d2      	adds	r2, r2, r3
   32566:	69fb      	ldr	r3, [r7, #28]
   32568:	21d0      	movs	r1, #208	; 0xd0
   3256a:	505a      	str	r2, [r3, r1]
			if(size == 0) {
   3256c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3256e:	2b00      	cmp	r3, #0
   32570:	d000      	beq.n	32574 <_http_client_request+0x57c>
   32572:	e0c9      	b.n	32708 <_http_client_request+0x710>
				if (module->req.entity.close) {
   32574:	69fb      	ldr	r3, [r7, #28]
   32576:	22c0      	movs	r2, #192	; 0xc0
   32578:	589b      	ldr	r3, [r3, r2]
   3257a:	2b00      	cmp	r3, #0
   3257c:	d007      	beq.n	3258e <_http_client_request+0x596>
					module->req.entity.close(module->req.entity.priv_data);
   3257e:	69fb      	ldr	r3, [r7, #28]
   32580:	22c0      	movs	r2, #192	; 0xc0
   32582:	589b      	ldr	r3, [r3, r2]
   32584:	69fa      	ldr	r2, [r7, #28]
   32586:	21c4      	movs	r1, #196	; 0xc4
   32588:	5852      	ldr	r2, [r2, r1]
   3258a:	0010      	movs	r0, r2
   3258c:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   3258e:	69fb      	ldr	r3, [r7, #28]
   32590:	2202      	movs	r2, #2
   32592:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   32594:	69fb      	ldr	r3, [r7, #28]
   32596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32598:	2b00      	cmp	r3, #0
   3259a:	d100      	bne.n	3259e <_http_client_request+0x5a6>
   3259c:	e0b5      	b.n	3270a <_http_client_request+0x712>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   3259e:	69fb      	ldr	r3, [r7, #28]
   325a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   325a2:	220c      	movs	r2, #12
   325a4:	2118      	movs	r1, #24
   325a6:	468c      	mov	ip, r1
   325a8:	44bc      	add	ip, r7
   325aa:	4462      	add	r2, ip
   325ac:	69f8      	ldr	r0, [r7, #28]
   325ae:	2101      	movs	r1, #1
   325b0:	4798      	blx	r3
				break;
   325b2:	e0aa      	b.n	3270a <_http_client_request+0x712>
		} else if (module->req.content_length > 0 && entity->read) {
   325b4:	69fb      	ldr	r3, [r7, #28]
   325b6:	22cc      	movs	r2, #204	; 0xcc
   325b8:	589b      	ldr	r3, [r3, r2]
   325ba:	2b00      	cmp	r3, #0
   325bc:	dc00      	bgt.n	325c0 <_http_client_request+0x5c8>
   325be:	e07c      	b.n	326ba <_http_client_request+0x6c2>
   325c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   325c2:	68db      	ldr	r3, [r3, #12]
   325c4:	2b00      	cmp	r3, #0
   325c6:	d100      	bne.n	325ca <_http_client_request+0x5d2>
   325c8:	e077      	b.n	326ba <_http_client_request+0x6c2>
			if (module->req.sent_length >= module->req.content_length) {
   325ca:	69fb      	ldr	r3, [r7, #28]
   325cc:	22d0      	movs	r2, #208	; 0xd0
   325ce:	589a      	ldr	r2, [r3, r2]
   325d0:	69fb      	ldr	r3, [r7, #28]
   325d2:	21cc      	movs	r1, #204	; 0xcc
   325d4:	585b      	ldr	r3, [r3, r1]
   325d6:	429a      	cmp	r2, r3
   325d8:	db1f      	blt.n	3261a <_http_client_request+0x622>
				if (module->req.entity.close) {
   325da:	69fb      	ldr	r3, [r7, #28]
   325dc:	22c0      	movs	r2, #192	; 0xc0
   325de:	589b      	ldr	r3, [r3, r2]
   325e0:	2b00      	cmp	r3, #0
   325e2:	d007      	beq.n	325f4 <_http_client_request+0x5fc>
					module->req.entity.close(module->req.entity.priv_data);
   325e4:	69fb      	ldr	r3, [r7, #28]
   325e6:	22c0      	movs	r2, #192	; 0xc0
   325e8:	589b      	ldr	r3, [r3, r2]
   325ea:	69fa      	ldr	r2, [r7, #28]
   325ec:	21c4      	movs	r1, #196	; 0xc4
   325ee:	5852      	ldr	r2, [r2, r1]
   325f0:	0010      	movs	r0, r2
   325f2:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   325f4:	69fb      	ldr	r3, [r7, #28]
   325f6:	2202      	movs	r2, #2
   325f8:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   325fa:	69fb      	ldr	r3, [r7, #28]
   325fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   325fe:	2b00      	cmp	r3, #0
   32600:	d100      	bne.n	32604 <_http_client_request+0x60c>
   32602:	e084      	b.n	3270e <_http_client_request+0x716>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   32604:	69fb      	ldr	r3, [r7, #28]
   32606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32608:	220c      	movs	r2, #12
   3260a:	2118      	movs	r1, #24
   3260c:	468c      	mov	ip, r1
   3260e:	44bc      	add	ip, r7
   32610:	4462      	add	r2, ip
   32612:	69f8      	ldr	r0, [r7, #28]
   32614:	2101      	movs	r1, #1
   32616:	4798      	blx	r3
				break;
   32618:	e079      	b.n	3270e <_http_client_request+0x716>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   3261a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3261c:	68dc      	ldr	r4, [r3, #12]
   3261e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   32620:	6958      	ldr	r0, [r3, #20]
   32622:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   32624:	69fb      	ldr	r3, [r7, #28]
   32626:	6e5d      	ldr	r5, [r3, #100]	; 0x64
   32628:	69fb      	ldr	r3, [r7, #28]
   3262a:	22d0      	movs	r2, #208	; 0xd0
   3262c:	589b      	ldr	r3, [r3, r2]
   3262e:	002a      	movs	r2, r5
   32630:	47a0      	blx	r4
   32632:	0003      	movs	r3, r0
   32634:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   32636:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32638:	2b00      	cmp	r3, #0
   3263a:	da0d      	bge.n	32658 <_http_client_request+0x660>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   3263c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3263e:	2b00      	cmp	r3, #0
   32640:	d102      	bne.n	32648 <_http_client_request+0x650>
   32642:	234d      	movs	r3, #77	; 0x4d
   32644:	425b      	negs	r3, r3
   32646:	e001      	b.n	3264c <_http_client_request+0x654>
   32648:	2305      	movs	r3, #5
   3264a:	425b      	negs	r3, r3
   3264c:	69fa      	ldr	r2, [r7, #28]
   3264e:	0019      	movs	r1, r3
   32650:	0010      	movs	r0, r2
   32652:	4b2c      	ldr	r3, [pc, #176]	; (32704 <_http_client_request+0x70c>)
   32654:	4798      	blx	r3
			if (size < 0) {
   32656:	e057      	b.n	32708 <_http_client_request+0x710>
				if (size > module->req.content_length - module->req.sent_length) {
   32658:	69fb      	ldr	r3, [r7, #28]
   3265a:	22cc      	movs	r2, #204	; 0xcc
   3265c:	589a      	ldr	r2, [r3, r2]
   3265e:	69fb      	ldr	r3, [r7, #28]
   32660:	21d0      	movs	r1, #208	; 0xd0
   32662:	585b      	ldr	r3, [r3, r1]
   32664:	1ad2      	subs	r2, r2, r3
   32666:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32668:	429a      	cmp	r2, r3
   3266a:	da07      	bge.n	3267c <_http_client_request+0x684>
					size = module->req.content_length - module->req.sent_length;
   3266c:	69fb      	ldr	r3, [r7, #28]
   3266e:	22cc      	movs	r2, #204	; 0xcc
   32670:	589a      	ldr	r2, [r3, r2]
   32672:	69fb      	ldr	r3, [r7, #28]
   32674:	21d0      	movs	r1, #208	; 0xd0
   32676:	585b      	ldr	r3, [r3, r1]
   32678:	1ad3      	subs	r3, r2, r3
   3267a:	677b      	str	r3, [r7, #116]	; 0x74
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   3267c:	69fb      	ldr	r3, [r7, #28]
   3267e:	2000      	movs	r0, #0
   32680:	5618      	ldrsb	r0, [r3, r0]
   32682:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   32684:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32686:	b29a      	uxth	r2, r3
   32688:	2300      	movs	r3, #0
   3268a:	4c1d      	ldr	r4, [pc, #116]	; (32700 <_http_client_request+0x708>)
   3268c:	47a0      	blx	r4
   3268e:	0003      	movs	r3, r0
   32690:	663b      	str	r3, [r7, #96]	; 0x60
   32692:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   32694:	2b00      	cmp	r3, #0
   32696:	da07      	bge.n	326a8 <_http_client_request+0x6b0>
					_http_client_clear_conn(module, -EIO);
   32698:	2305      	movs	r3, #5
   3269a:	425a      	negs	r2, r3
   3269c:	69fb      	ldr	r3, [r7, #28]
   3269e:	0011      	movs	r1, r2
   326a0:	0018      	movs	r0, r3
   326a2:	4b18      	ldr	r3, [pc, #96]	; (32704 <_http_client_request+0x70c>)
   326a4:	4798      	blx	r3
					return;
   326a6:	e03b      	b.n	32720 <_http_client_request+0x728>
				module->req.sent_length += size;
   326a8:	69fb      	ldr	r3, [r7, #28]
   326aa:	22d0      	movs	r2, #208	; 0xd0
   326ac:	589a      	ldr	r2, [r3, r2]
   326ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   326b0:	18d2      	adds	r2, r2, r3
   326b2:	69fb      	ldr	r3, [r7, #28]
   326b4:	21d0      	movs	r1, #208	; 0xd0
   326b6:	505a      	str	r2, [r3, r1]
			if (size < 0) {
   326b8:	e026      	b.n	32708 <_http_client_request+0x710>
			module->req.state = STATE_SOCK_CONNECTED;
   326ba:	69fb      	ldr	r3, [r7, #28]
   326bc:	2202      	movs	r2, #2
   326be:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
   326c0:	69fb      	ldr	r3, [r7, #28]
   326c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   326c4:	2b00      	cmp	r3, #0
   326c6:	d024      	beq.n	32712 <_http_client_request+0x71a>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   326c8:	69fb      	ldr	r3, [r7, #28]
   326ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   326cc:	220c      	movs	r2, #12
   326ce:	2118      	movs	r1, #24
   326d0:	468c      	mov	ip, r1
   326d2:	44bc      	add	ip, r7
   326d4:	4462      	add	r2, ip
   326d6:	69f8      	ldr	r0, [r7, #28]
   326d8:	2101      	movs	r1, #1
   326da:	4798      	blx	r3
			break;
   326dc:	e019      	b.n	32712 <_http_client_request+0x71a>
   326de:	46c0      	nop			; (mov r8, r8)
   326e0:	0003aae4 	.word	0x0003aae4
   326e4:	000358ad 	.word	0x000358ad
   326e8:	0003aae8 	.word	0x0003aae8
   326ec:	00032f59 	.word	0x00032f59
   326f0:	000359a7 	.word	0x000359a7
   326f4:	0003aa70 	.word	0x0003aa70
   326f8:	00032f95 	.word	0x00032f95
   326fc:	8000000f 	.word	0x8000000f
   32700:	000264dd 	.word	0x000264dd
   32704:	00031ea5 	.word	0x00031ea5
		break;
   32708:	e004      	b.n	32714 <_http_client_request+0x71c>
				break;
   3270a:	46c0      	nop			; (mov r8, r8)
   3270c:	e002      	b.n	32714 <_http_client_request+0x71c>
				break;
   3270e:	46c0      	nop			; (mov r8, r8)
   32710:	e000      	b.n	32714 <_http_client_request+0x71c>
			break;
   32712:	46c0      	nop			; (mov r8, r8)
   32714:	69bb      	ldr	r3, [r7, #24]
   32716:	469d      	mov	sp, r3
   32718:	e004      	b.n	32724 <_http_client_request+0x72c>
		return;
   3271a:	46c0      	nop			; (mov r8, r8)
   3271c:	e000      	b.n	32720 <_http_client_request+0x728>
		return;
   3271e:	46c0      	nop			; (mov r8, r8)
   32720:	69bb      	ldr	r3, [r7, #24]
   32722:	469d      	mov	sp, r3
	}
}
   32724:	46bd      	mov	sp, r7
   32726:	b01e      	add	sp, #120	; 0x78
   32728:	bc04      	pop	{r2}
   3272a:	4690      	mov	r8, r2
   3272c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3272e:	46c0      	nop			; (mov r8, r8)

00032730 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   32730:	b590      	push	{r4, r7, lr}
   32732:	b083      	sub	sp, #12
   32734:	af00      	add	r7, sp, #0
   32736:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
   32738:	687b      	ldr	r3, [r7, #4]
   3273a:	2b00      	cmp	r3, #0
   3273c:	d021      	beq.n	32782 <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   3273e:	687b      	ldr	r3, [r7, #4]
   32740:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   32742:	687b      	ldr	r3, [r7, #4]
   32744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   32746:	429a      	cmp	r2, r3
   32748:	d307      	bcc.n	3275a <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
   3274a:	238b      	movs	r3, #139	; 0x8b
   3274c:	425a      	negs	r2, r3
   3274e:	687b      	ldr	r3, [r7, #4]
   32750:	0011      	movs	r1, r2
   32752:	0018      	movs	r0, r3
   32754:	4b0d      	ldr	r3, [pc, #52]	; (3278c <_http_client_recv_packet+0x5c>)
   32756:	4798      	blx	r3
		return;
   32758:	e014      	b.n	32784 <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   3275a:	687b      	ldr	r3, [r7, #4]
   3275c:	2000      	movs	r0, #0
   3275e:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
   32760:	687b      	ldr	r3, [r7, #4]
   32762:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   32764:	687b      	ldr	r3, [r7, #4]
   32766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32768:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   3276a:	687b      	ldr	r3, [r7, #4]
   3276c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	recv(module->sock,
   3276e:	b29a      	uxth	r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   32770:	687b      	ldr	r3, [r7, #4]
   32772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	recv(module->sock,
   32774:	b29b      	uxth	r3, r3
   32776:	1ad3      	subs	r3, r2, r3
   32778:	b29a      	uxth	r2, r3
   3277a:	2300      	movs	r3, #0
   3277c:	4c04      	ldr	r4, [pc, #16]	; (32790 <_http_client_recv_packet+0x60>)
   3277e:	47a0      	blx	r4
   32780:	e000      	b.n	32784 <_http_client_recv_packet+0x54>
		return;
   32782:	46c0      	nop			; (mov r8, r8)
}
   32784:	46bd      	mov	sp, r7
   32786:	b003      	add	sp, #12
   32788:	bd90      	pop	{r4, r7, pc}
   3278a:	46c0      	nop			; (mov r8, r8)
   3278c:	00031ea5 	.word	0x00031ea5
   32790:	00026641 	.word	0x00026641

00032794 <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
   32794:	b580      	push	{r7, lr}
   32796:	b082      	sub	sp, #8
   32798:	af00      	add	r7, sp, #0
   3279a:	6078      	str	r0, [r7, #4]
   3279c:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
   3279e:	687b      	ldr	r3, [r7, #4]
   327a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   327a2:	683b      	ldr	r3, [r7, #0]
   327a4:	18d2      	adds	r2, r2, r3
   327a6:	687b      	ldr	r3, [r7, #4]
   327a8:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
   327aa:	687b      	ldr	r3, [r7, #4]
   327ac:	2258      	movs	r2, #88	; 0x58
   327ae:	5a9b      	ldrh	r3, [r3, r2]
   327b0:	2b00      	cmp	r3, #0
   327b2:	d007      	beq.n	327c4 <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   327b4:	687b      	ldr	r3, [r7, #4]
   327b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   327b8:	687b      	ldr	r3, [r7, #4]
   327ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   327bc:	0019      	movs	r1, r3
   327be:	0010      	movs	r0, r2
   327c0:	4b06      	ldr	r3, [pc, #24]	; (327dc <_http_client_recved_packet+0x48>)
   327c2:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
   327c4:	46c0      	nop			; (mov r8, r8)
   327c6:	687b      	ldr	r3, [r7, #4]
   327c8:	0018      	movs	r0, r3
   327ca:	4b05      	ldr	r3, [pc, #20]	; (327e0 <_http_client_recved_packet+0x4c>)
   327cc:	4798      	blx	r3
   327ce:	1e03      	subs	r3, r0, #0
   327d0:	d1f9      	bne.n	327c6 <_http_client_recved_packet+0x32>
}
   327d2:	46c0      	nop			; (mov r8, r8)
   327d4:	46bd      	mov	sp, r7
   327d6:	b002      	add	sp, #8
   327d8:	bd80      	pop	{r7, pc}
   327da:	46c0      	nop			; (mov r8, r8)
   327dc:	00033251 	.word	0x00033251
   327e0:	000327e5 	.word	0x000327e5

000327e4 <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
   327e4:	b580      	push	{r7, lr}
   327e6:	b082      	sub	sp, #8
   327e8:	af00      	add	r7, sp, #0
   327ea:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
   327ec:	687b      	ldr	r3, [r7, #4]
   327ee:	22d8      	movs	r2, #216	; 0xd8
   327f0:	589b      	ldr	r3, [r3, r2]
   327f2:	2b00      	cmp	r3, #0
   327f4:	d002      	beq.n	327fc <_http_client_handle_response+0x18>
   327f6:	2b01      	cmp	r3, #1
   327f8:	d006      	beq.n	32808 <_http_client_handle_response+0x24>
   327fa:	e00b      	b.n	32814 <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
   327fc:	687b      	ldr	r3, [r7, #4]
   327fe:	0018      	movs	r0, r3
   32800:	4b07      	ldr	r3, [pc, #28]	; (32820 <_http_client_handle_response+0x3c>)
   32802:	4798      	blx	r3
   32804:	0003      	movs	r3, r0
   32806:	e006      	b.n	32816 <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
   32808:	687b      	ldr	r3, [r7, #4]
   3280a:	0018      	movs	r0, r3
   3280c:	4b05      	ldr	r3, [pc, #20]	; (32824 <_http_client_handle_response+0x40>)
   3280e:	4798      	blx	r3
   32810:	0003      	movs	r3, r0
   32812:	e000      	b.n	32816 <_http_client_handle_response+0x32>
	}
	return 0;
   32814:	2300      	movs	r3, #0
}
   32816:	0018      	movs	r0, r3
   32818:	46bd      	mov	sp, r7
   3281a:	b002      	add	sp, #8
   3281c:	bd80      	pop	{r7, pc}
   3281e:	46c0      	nop			; (mov r8, r8)
   32820:	00032829 	.word	0x00032829
   32824:	00032ce1 	.word	0x00032ce1

00032828 <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
   32828:	b590      	push	{r4, r7, lr}
   3282a:	b08b      	sub	sp, #44	; 0x2c
   3282c:	af00      	add	r7, sp, #0
   3282e:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
   32830:	687b      	ldr	r3, [r7, #4]
   32832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32834:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   32836:	4b9a      	ldr	r3, [pc, #616]	; (32aa0 <_http_client_handle_header+0x278>)
   32838:	681a      	ldr	r2, [r3, #0]
   3283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3283c:	0011      	movs	r1, r2
   3283e:	0018      	movs	r0, r3
   32840:	4b98      	ldr	r3, [pc, #608]	; (32aa4 <_http_client_handle_header+0x27c>)
   32842:	4798      	blx	r3
   32844:	0003      	movs	r3, r0
   32846:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   32848:	69bb      	ldr	r3, [r7, #24]
   3284a:	2b00      	cmp	r3, #0
   3284c:	d007      	beq.n	3285e <_http_client_handle_header+0x36>
   3284e:	687b      	ldr	r3, [r7, #4]
   32850:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   32852:	687b      	ldr	r3, [r7, #4]
   32854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32856:	18d2      	adds	r2, r2, r3
   32858:	69bb      	ldr	r3, [r7, #24]
   3285a:	429a      	cmp	r2, r3
   3285c:	d807      	bhi.n	3286e <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
   3285e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   32860:	687b      	ldr	r3, [r7, #4]
   32862:	0011      	movs	r1, r2
   32864:	0018      	movs	r0, r3
   32866:	4b90      	ldr	r3, [pc, #576]	; (32aa8 <_http_client_handle_header+0x280>)
   32868:	4798      	blx	r3
			return 0;
   3286a:	2300      	movs	r3, #0
   3286c:	e114      	b.n	32a98 <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
   3286e:	4b8c      	ldr	r3, [pc, #560]	; (32aa0 <_http_client_handle_header+0x278>)
   32870:	681c      	ldr	r4, [r3, #0]
   32872:	4b8b      	ldr	r3, [pc, #556]	; (32aa0 <_http_client_handle_header+0x278>)
   32874:	681b      	ldr	r3, [r3, #0]
   32876:	0018      	movs	r0, r3
   32878:	4b8c      	ldr	r3, [pc, #560]	; (32aac <_http_client_handle_header+0x284>)
   3287a:	4798      	blx	r3
   3287c:	0002      	movs	r2, r0
   3287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32880:	0021      	movs	r1, r4
   32882:	0018      	movs	r0, r3
   32884:	4b8a      	ldr	r3, [pc, #552]	; (32ab0 <_http_client_handle_header+0x288>)
   32886:	4798      	blx	r3
   32888:	1e03      	subs	r3, r0, #0
   3288a:	d15d      	bne.n	32948 <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
   3288c:	4b84      	ldr	r3, [pc, #528]	; (32aa0 <_http_client_handle_header+0x278>)
   3288e:	681b      	ldr	r3, [r3, #0]
   32890:	0018      	movs	r0, r3
   32892:	4b86      	ldr	r3, [pc, #536]	; (32aac <_http_client_handle_header+0x284>)
   32894:	4798      	blx	r3
   32896:	0002      	movs	r2, r0
   32898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3289a:	189a      	adds	r2, r3, r2
   3289c:	687b      	ldr	r3, [r7, #4]
   3289e:	0011      	movs	r1, r2
   328a0:	0018      	movs	r0, r3
   328a2:	4b81      	ldr	r3, [pc, #516]	; (32aa8 <_http_client_handle_header+0x280>)
   328a4:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
   328a6:	687b      	ldr	r3, [r7, #4]
   328a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   328aa:	2b00      	cmp	r3, #0
   328ac:	d046      	beq.n	3293c <_http_client_handle_header+0x114>
   328ae:	687b      	ldr	r3, [r7, #4]
   328b0:	22e4      	movs	r2, #228	; 0xe4
   328b2:	5a9b      	ldrh	r3, [r3, r2]
   328b4:	2b00      	cmp	r3, #0
   328b6:	d041      	beq.n	3293c <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
   328b8:	687b      	ldr	r3, [r7, #4]
   328ba:	22dc      	movs	r2, #220	; 0xdc
   328bc:	589b      	ldr	r3, [r3, r2]
   328be:	2b00      	cmp	r3, #0
   328c0:	da19      	bge.n	328f6 <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
   328c2:	687b      	ldr	r3, [r7, #4]
   328c4:	22e4      	movs	r2, #228	; 0xe4
   328c6:	5a9a      	ldrh	r2, [r3, r2]
   328c8:	230c      	movs	r3, #12
   328ca:	18fb      	adds	r3, r7, r3
   328cc:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
   328ce:	230c      	movs	r3, #12
   328d0:	18fb      	adds	r3, r7, r3
   328d2:	2201      	movs	r2, #1
   328d4:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
   328d6:	687b      	ldr	r3, [r7, #4]
   328d8:	22e0      	movs	r2, #224	; 0xe0
   328da:	2100      	movs	r1, #0
   328dc:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
   328de:	230c      	movs	r3, #12
   328e0:	18fb      	adds	r3, r7, r3
   328e2:	2200      	movs	r2, #0
   328e4:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   328e6:	687b      	ldr	r3, [r7, #4]
   328e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   328ea:	220c      	movs	r2, #12
   328ec:	18ba      	adds	r2, r7, r2
   328ee:	6878      	ldr	r0, [r7, #4]
   328f0:	2102      	movs	r1, #2
   328f2:	4798      	blx	r3
   328f4:	e022      	b.n	3293c <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   328f6:	687b      	ldr	r3, [r7, #4]
   328f8:	22dc      	movs	r2, #220	; 0xdc
   328fa:	589a      	ldr	r2, [r3, r2]
   328fc:	687b      	ldr	r3, [r7, #4]
   328fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   32900:	429a      	cmp	r2, r3
   32902:	dd1b      	ble.n	3293c <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
   32904:	687b      	ldr	r3, [r7, #4]
   32906:	22e4      	movs	r2, #228	; 0xe4
   32908:	5a9a      	ldrh	r2, [r3, r2]
   3290a:	230c      	movs	r3, #12
   3290c:	18fb      	adds	r3, r7, r3
   3290e:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
   32910:	687b      	ldr	r3, [r7, #4]
   32912:	22dc      	movs	r2, #220	; 0xdc
   32914:	589b      	ldr	r3, [r3, r2]
   32916:	001a      	movs	r2, r3
   32918:	230c      	movs	r3, #12
   3291a:	18fb      	adds	r3, r7, r3
   3291c:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
   3291e:	230c      	movs	r3, #12
   32920:	18fb      	adds	r3, r7, r3
   32922:	2200      	movs	r2, #0
   32924:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
   32926:	687b      	ldr	r3, [r7, #4]
   32928:	22e0      	movs	r2, #224	; 0xe0
   3292a:	2100      	movs	r1, #0
   3292c:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   3292e:	687b      	ldr	r3, [r7, #4]
   32930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32932:	220c      	movs	r2, #12
   32934:	18ba      	adds	r2, r7, r2
   32936:	6878      	ldr	r0, [r7, #4]
   32938:	2102      	movs	r1, #2
   3293a:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
   3293c:	687b      	ldr	r3, [r7, #4]
   3293e:	22d8      	movs	r2, #216	; 0xd8
   32940:	2101      	movs	r1, #1
   32942:	5099      	str	r1, [r3, r2]
			return 1;
   32944:	2301      	movs	r3, #1
   32946:	e0a7      	b.n	32a98 <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   32948:	495a      	ldr	r1, [pc, #360]	; (32ab4 <_http_client_handle_header+0x28c>)
   3294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3294c:	2210      	movs	r2, #16
   3294e:	0018      	movs	r0, r3
   32950:	4b57      	ldr	r3, [pc, #348]	; (32ab0 <_http_client_handle_header+0x288>)
   32952:	4798      	blx	r3
   32954:	1e03      	subs	r3, r0, #0
   32956:	d109      	bne.n	3296c <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   32958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3295a:	3310      	adds	r3, #16
   3295c:	0018      	movs	r0, r3
   3295e:	4b56      	ldr	r3, [pc, #344]	; (32ab8 <_http_client_handle_header+0x290>)
   32960:	4798      	blx	r3
   32962:	0001      	movs	r1, r0
   32964:	687b      	ldr	r3, [r7, #4]
   32966:	22dc      	movs	r2, #220	; 0xdc
   32968:	5099      	str	r1, [r3, r2]
   3296a:	e08b      	b.n	32a84 <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   3296c:	4953      	ldr	r1, [pc, #332]	; (32abc <_http_client_handle_header+0x294>)
   3296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32970:	2213      	movs	r2, #19
   32972:	0018      	movs	r0, r3
   32974:	4b4e      	ldr	r3, [pc, #312]	; (32ab0 <_http_client_handle_header+0x288>)
   32976:	4798      	blx	r3
   32978:	1e03      	subs	r3, r0, #0
   3297a:	d127      	bne.n	329cc <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   3297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   3297e:	3313      	adds	r3, #19
   32980:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   32982:	e01e      	b.n	329c2 <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
   32984:	6a3b      	ldr	r3, [r7, #32]
   32986:	781b      	ldrb	r3, [r3, #0]
   32988:	2b20      	cmp	r3, #32
   3298a:	d103      	bne.n	32994 <_http_client_handle_header+0x16c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   3298c:	6a3b      	ldr	r3, [r7, #32]
   3298e:	3301      	adds	r3, #1
   32990:	623b      	str	r3, [r7, #32]
   32992:	e016      	b.n	329c2 <_http_client_handle_header+0x19a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   32994:	6a3b      	ldr	r3, [r7, #32]
   32996:	781b      	ldrb	r3, [r3, #0]
   32998:	2b43      	cmp	r3, #67	; 0x43
   3299a:	d003      	beq.n	329a4 <_http_client_handle_header+0x17c>
   3299c:	6a3b      	ldr	r3, [r7, #32]
   3299e:	781b      	ldrb	r3, [r3, #0]
   329a0:	2b63      	cmp	r3, #99	; 0x63
   329a2:	d105      	bne.n	329b0 <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
   329a4:	687b      	ldr	r3, [r7, #4]
   329a6:	21cc      	movs	r1, #204	; 0xcc
   329a8:	2201      	movs	r2, #1
   329aa:	4252      	negs	r2, r2
   329ac:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
   329ae:	e069      	b.n	32a84 <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
   329b0:	2386      	movs	r3, #134	; 0x86
   329b2:	425a      	negs	r2, r3
   329b4:	687b      	ldr	r3, [r7, #4]
   329b6:	0011      	movs	r1, r2
   329b8:	0018      	movs	r0, r3
   329ba:	4b41      	ldr	r3, [pc, #260]	; (32ac0 <_http_client_handle_header+0x298>)
   329bc:	4798      	blx	r3
					return 0;
   329be:	2300      	movs	r3, #0
   329c0:	e06a      	b.n	32a98 <_http_client_handle_header+0x270>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   329c2:	69ba      	ldr	r2, [r7, #24]
   329c4:	6a3b      	ldr	r3, [r7, #32]
   329c6:	429a      	cmp	r2, r3
   329c8:	d8dc      	bhi.n	32984 <_http_client_handle_header+0x15c>
   329ca:	e05b      	b.n	32a84 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   329cc:	493d      	ldr	r1, [pc, #244]	; (32ac4 <_http_client_handle_header+0x29c>)
   329ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   329d0:	220c      	movs	r2, #12
   329d2:	0018      	movs	r0, r3
   329d4:	4b36      	ldr	r3, [pc, #216]	; (32ab0 <_http_client_handle_header+0x288>)
   329d6:	4798      	blx	r3
   329d8:	1e03      	subs	r3, r0, #0
   329da:	d126      	bne.n	32a2a <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
   329dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   329de:	330c      	adds	r3, #12
   329e0:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   329e2:	e01d      	b.n	32a20 <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
   329e4:	69fb      	ldr	r3, [r7, #28]
   329e6:	781b      	ldrb	r3, [r3, #0]
   329e8:	2b20      	cmp	r3, #32
   329ea:	d103      	bne.n	329f4 <_http_client_handle_header+0x1cc>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   329ec:	69fb      	ldr	r3, [r7, #28]
   329ee:	3301      	adds	r3, #1
   329f0:	61fb      	str	r3, [r7, #28]
   329f2:	e015      	b.n	32a20 <_http_client_handle_header+0x1f8>
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   329f4:	69fb      	ldr	r3, [r7, #28]
   329f6:	781b      	ldrb	r3, [r3, #0]
   329f8:	2b4b      	cmp	r3, #75	; 0x4b
   329fa:	d003      	beq.n	32a04 <_http_client_handle_header+0x1dc>
   329fc:	69fb      	ldr	r3, [r7, #28]
   329fe:	781b      	ldrb	r3, [r3, #0]
   32a00:	2b6b      	cmp	r3, #107	; 0x6b
   32a02:	d106      	bne.n	32a12 <_http_client_handle_header+0x1ea>
					module->permanent = 1;
   32a04:	687b      	ldr	r3, [r7, #4]
   32a06:	2241      	movs	r2, #65	; 0x41
   32a08:	5c99      	ldrb	r1, [r3, r2]
   32a0a:	2002      	movs	r0, #2
   32a0c:	4301      	orrs	r1, r0
   32a0e:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
   32a10:	e038      	b.n	32a84 <_http_client_handle_header+0x25c>
					module->permanent = 0;
   32a12:	687b      	ldr	r3, [r7, #4]
   32a14:	2241      	movs	r2, #65	; 0x41
   32a16:	5c99      	ldrb	r1, [r3, r2]
   32a18:	2002      	movs	r0, #2
   32a1a:	4381      	bics	r1, r0
   32a1c:	5499      	strb	r1, [r3, r2]
				break;
   32a1e:	e031      	b.n	32a84 <_http_client_handle_header+0x25c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   32a20:	69ba      	ldr	r2, [r7, #24]
   32a22:	69fb      	ldr	r3, [r7, #28]
   32a24:	429a      	cmp	r2, r3
   32a26:	d8dd      	bhi.n	329e4 <_http_client_handle_header+0x1bc>
   32a28:	e02c      	b.n	32a84 <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   32a2a:	4927      	ldr	r1, [pc, #156]	; (32ac8 <_http_client_handle_header+0x2a0>)
   32a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32a2e:	2205      	movs	r2, #5
   32a30:	0018      	movs	r0, r3
   32a32:	4b1f      	ldr	r3, [pc, #124]	; (32ab0 <_http_client_handle_header+0x288>)
   32a34:	4798      	blx	r3
   32a36:	1e03      	subs	r3, r0, #0
   32a38:	d124      	bne.n	32a84 <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   32a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32a3c:	3309      	adds	r3, #9
   32a3e:	0018      	movs	r0, r3
   32a40:	4b1d      	ldr	r3, [pc, #116]	; (32ab8 <_http_client_handle_header+0x290>)
   32a42:	4798      	blx	r3
   32a44:	0003      	movs	r3, r0
   32a46:	b299      	uxth	r1, r3
   32a48:	687b      	ldr	r3, [r7, #4]
   32a4a:	22e4      	movs	r2, #228	; 0xe4
   32a4c:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
   32a4e:	687b      	ldr	r3, [r7, #4]
   32a50:	22dc      	movs	r2, #220	; 0xdc
   32a52:	2100      	movs	r1, #0
   32a54:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
   32a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32a58:	3305      	adds	r3, #5
   32a5a:	781b      	ldrb	r3, [r3, #0]
   32a5c:	2b31      	cmp	r3, #49	; 0x31
   32a5e:	d804      	bhi.n	32a6a <_http_client_handle_header+0x242>
   32a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32a62:	3307      	adds	r3, #7
   32a64:	781b      	ldrb	r3, [r3, #0]
   32a66:	2b30      	cmp	r3, #48	; 0x30
   32a68:	d906      	bls.n	32a78 <_http_client_handle_header+0x250>
				module->permanent = 1;
   32a6a:	687b      	ldr	r3, [r7, #4]
   32a6c:	2241      	movs	r2, #65	; 0x41
   32a6e:	5c99      	ldrb	r1, [r3, r2]
   32a70:	2002      	movs	r0, #2
   32a72:	4301      	orrs	r1, r0
   32a74:	5499      	strb	r1, [r3, r2]
   32a76:	e005      	b.n	32a84 <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
   32a78:	687b      	ldr	r3, [r7, #4]
   32a7a:	2241      	movs	r2, #65	; 0x41
   32a7c:	5c99      	ldrb	r1, [r3, r2]
   32a7e:	2002      	movs	r0, #2
   32a80:	4381      	bics	r1, r0
   32a82:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
   32a84:	4b06      	ldr	r3, [pc, #24]	; (32aa0 <_http_client_handle_header+0x278>)
   32a86:	681b      	ldr	r3, [r3, #0]
   32a88:	0018      	movs	r0, r3
   32a8a:	4b08      	ldr	r3, [pc, #32]	; (32aac <_http_client_handle_header+0x284>)
   32a8c:	4798      	blx	r3
   32a8e:	0002      	movs	r2, r0
   32a90:	69bb      	ldr	r3, [r7, #24]
   32a92:	189b      	adds	r3, r3, r2
   32a94:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   32a96:	e6ce      	b.n	32836 <_http_client_handle_header+0xe>
	}
}
   32a98:	0018      	movs	r0, r3
   32a9a:	46bd      	mov	sp, r7
   32a9c:	b00b      	add	sp, #44	; 0x2c
   32a9e:	bd90      	pop	{r4, r7, pc}
   32aa0:	2000012c 	.word	0x2000012c
   32aa4:	00035a25 	.word	0x00035a25
   32aa8:	00032e8d 	.word	0x00032e8d
   32aac:	000359a7 	.word	0x000359a7
   32ab0:	000359b5 	.word	0x000359b5
   32ab4:	0003aae8 	.word	0x0003aae8
   32ab8:	0003553d 	.word	0x0003553d
   32abc:	0003ab0c 	.word	0x0003ab0c
   32ac0:	00031ea5 	.word	0x00031ea5
   32ac4:	0003ab20 	.word	0x0003ab20
   32ac8:	0003ab30 	.word	0x0003ab30

00032acc <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
   32acc:	b580      	push	{r7, lr}
   32ace:	b088      	sub	sp, #32
   32ad0:	af00      	add	r7, sp, #0
   32ad2:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
   32ad4:	687b      	ldr	r3, [r7, #4]
   32ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32ad8:	61fb      	str	r3, [r7, #28]
	int extension = 0;
   32ada:	2300      	movs	r3, #0
   32adc:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
   32ade:	687b      	ldr	r3, [r7, #4]
   32ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32ae2:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
   32ae4:	687b      	ldr	r3, [r7, #4]
   32ae6:	22e0      	movs	r2, #224	; 0xe0
   32ae8:	589b      	ldr	r3, [r3, r2]
   32aea:	2b00      	cmp	r3, #0
   32aec:	db71      	blt.n	32bd2 <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
   32aee:	687b      	ldr	r3, [r7, #4]
   32af0:	22e0      	movs	r2, #224	; 0xe0
   32af2:	589b      	ldr	r3, [r3, r2]
   32af4:	2b00      	cmp	r3, #0
   32af6:	d134      	bne.n	32b62 <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   32af8:	687b      	ldr	r3, [r7, #4]
   32afa:	22d8      	movs	r2, #216	; 0xd8
   32afc:	2100      	movs	r1, #0
   32afe:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   32b00:	687b      	ldr	r3, [r7, #4]
   32b02:	22e4      	movs	r2, #228	; 0xe4
   32b04:	2100      	movs	r1, #0
   32b06:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   32b08:	2308      	movs	r3, #8
   32b0a:	18fb      	adds	r3, r7, r3
   32b0c:	2201      	movs	r2, #1
   32b0e:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
   32b10:	2308      	movs	r3, #8
   32b12:	18fb      	adds	r3, r7, r3
   32b14:	2200      	movs	r2, #0
   32b16:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
   32b18:	2308      	movs	r3, #8
   32b1a:	18fb      	adds	r3, r7, r3
   32b1c:	2200      	movs	r2, #0
   32b1e:	605a      	str	r2, [r3, #4]
				if (module->cb) {
   32b20:	687b      	ldr	r3, [r7, #4]
   32b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32b24:	2b00      	cmp	r3, #0
   32b26:	d006      	beq.n	32b36 <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   32b28:	687b      	ldr	r3, [r7, #4]
   32b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32b2c:	2208      	movs	r2, #8
   32b2e:	18ba      	adds	r2, r7, r2
   32b30:	6878      	ldr	r0, [r7, #4]
   32b32:	2103      	movs	r1, #3
   32b34:	4798      	blx	r3
				}
				if (module->permanent == 0) {
   32b36:	687b      	ldr	r3, [r7, #4]
   32b38:	2241      	movs	r2, #65	; 0x41
   32b3a:	5c9b      	ldrb	r3, [r3, r2]
   32b3c:	2202      	movs	r2, #2
   32b3e:	4013      	ands	r3, r2
   32b40:	b2db      	uxtb	r3, r3
   32b42:	2b00      	cmp	r3, #0
   32b44:	d105      	bne.n	32b52 <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
   32b46:	687b      	ldr	r3, [r7, #4]
   32b48:	2100      	movs	r1, #0
   32b4a:	0018      	movs	r0, r3
   32b4c:	4b62      	ldr	r3, [pc, #392]	; (32cd8 <_http_client_read_chuked_entity+0x20c>)
   32b4e:	4798      	blx	r3
					return;
   32b50:	e0bf      	b.n	32cd2 <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
   32b52:	697b      	ldr	r3, [r7, #20]
   32b54:	1c9a      	adds	r2, r3, #2
   32b56:	687b      	ldr	r3, [r7, #4]
   32b58:	0011      	movs	r1, r2
   32b5a:	0018      	movs	r0, r3
   32b5c:	4b5f      	ldr	r3, [pc, #380]	; (32cdc <_http_client_read_chuked_entity+0x210>)
   32b5e:	4798      	blx	r3
   32b60:	e0b2      	b.n	32cc8 <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
   32b62:	687b      	ldr	r3, [r7, #4]
   32b64:	22e0      	movs	r2, #224	; 0xe0
   32b66:	589a      	ldr	r2, [r3, r2]
   32b68:	69fb      	ldr	r3, [r7, #28]
   32b6a:	429a      	cmp	r2, r3
   32b6c:	dd00      	ble.n	32b70 <_http_client_read_chuked_entity+0xa4>
   32b6e:	e0ab      	b.n	32cc8 <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
   32b70:	687b      	ldr	r3, [r7, #4]
   32b72:	22e0      	movs	r2, #224	; 0xe0
   32b74:	589b      	ldr	r3, [r3, r2]
   32b76:	001a      	movs	r2, r3
   32b78:	2308      	movs	r3, #8
   32b7a:	18fb      	adds	r3, r7, r3
   32b7c:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
   32b7e:	2308      	movs	r3, #8
   32b80:	18fb      	adds	r3, r7, r3
   32b82:	697a      	ldr	r2, [r7, #20]
   32b84:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
   32b86:	2308      	movs	r3, #8
   32b88:	18fb      	adds	r3, r7, r3
   32b8a:	2200      	movs	r2, #0
   32b8c:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
   32b8e:	687b      	ldr	r3, [r7, #4]
   32b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32b92:	2b00      	cmp	r3, #0
   32b94:	d006      	beq.n	32ba4 <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   32b96:	687b      	ldr	r3, [r7, #4]
   32b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32b9a:	2208      	movs	r2, #8
   32b9c:	18ba      	adds	r2, r7, r2
   32b9e:	6878      	ldr	r0, [r7, #4]
   32ba0:	2103      	movs	r1, #3
   32ba2:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   32ba4:	687b      	ldr	r3, [r7, #4]
   32ba6:	22e0      	movs	r2, #224	; 0xe0
   32ba8:	589b      	ldr	r3, [r3, r2]
   32baa:	3302      	adds	r3, #2
   32bac:	697a      	ldr	r2, [r7, #20]
   32bae:	18d2      	adds	r2, r2, r3
   32bb0:	687b      	ldr	r3, [r7, #4]
   32bb2:	0011      	movs	r1, r2
   32bb4:	0018      	movs	r0, r3
   32bb6:	4b49      	ldr	r3, [pc, #292]	; (32cdc <_http_client_read_chuked_entity+0x210>)
   32bb8:	4798      	blx	r3
				length = (int)module->recved_size;
   32bba:	687b      	ldr	r3, [r7, #4]
   32bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32bbe:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
   32bc0:	687b      	ldr	r3, [r7, #4]
   32bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32bc4:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
   32bc6:	687b      	ldr	r3, [r7, #4]
   32bc8:	21e0      	movs	r1, #224	; 0xe0
   32bca:	2201      	movs	r2, #1
   32bcc:	4252      	negs	r2, r2
   32bce:	505a      	str	r2, [r3, r1]
   32bd0:	e07a      	b.n	32cc8 <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
   32bd2:	687b      	ldr	r3, [r7, #4]
   32bd4:	22e0      	movs	r2, #224	; 0xe0
   32bd6:	2100      	movs	r1, #0
   32bd8:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
   32bda:	e05a      	b.n	32c92 <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
   32bdc:	697b      	ldr	r3, [r7, #20]
   32bde:	781b      	ldrb	r3, [r3, #0]
   32be0:	2b0a      	cmp	r3, #10
   32be2:	d106      	bne.n	32bf2 <_http_client_read_chuked_entity+0x126>
					buffer++;
   32be4:	697b      	ldr	r3, [r7, #20]
   32be6:	3301      	adds	r3, #1
   32be8:	617b      	str	r3, [r7, #20]
					length--;
   32bea:	69fb      	ldr	r3, [r7, #28]
   32bec:	3b01      	subs	r3, #1
   32bee:	61fb      	str	r3, [r7, #28]
					break;
   32bf0:	e052      	b.n	32c98 <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
   32bf2:	69bb      	ldr	r3, [r7, #24]
   32bf4:	2b00      	cmp	r3, #0
   32bf6:	d145      	bne.n	32c84 <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
   32bf8:	697b      	ldr	r3, [r7, #20]
   32bfa:	781b      	ldrb	r3, [r3, #0]
   32bfc:	2b2f      	cmp	r3, #47	; 0x2f
   32bfe:	d910      	bls.n	32c22 <_http_client_read_chuked_entity+0x156>
   32c00:	697b      	ldr	r3, [r7, #20]
   32c02:	781b      	ldrb	r3, [r3, #0]
   32c04:	2b39      	cmp	r3, #57	; 0x39
   32c06:	d80c      	bhi.n	32c22 <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   32c08:	687b      	ldr	r3, [r7, #4]
   32c0a:	22e0      	movs	r2, #224	; 0xe0
   32c0c:	589b      	ldr	r3, [r3, r2]
   32c0e:	011b      	lsls	r3, r3, #4
   32c10:	697a      	ldr	r2, [r7, #20]
   32c12:	7812      	ldrb	r2, [r2, #0]
   32c14:	189b      	adds	r3, r3, r2
   32c16:	3b30      	subs	r3, #48	; 0x30
   32c18:	001a      	movs	r2, r3
   32c1a:	687b      	ldr	r3, [r7, #4]
   32c1c:	21e0      	movs	r1, #224	; 0xe0
   32c1e:	505a      	str	r2, [r3, r1]
   32c20:	e031      	b.n	32c86 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   32c22:	697b      	ldr	r3, [r7, #20]
   32c24:	781b      	ldrb	r3, [r3, #0]
   32c26:	2b60      	cmp	r3, #96	; 0x60
   32c28:	d910      	bls.n	32c4c <_http_client_read_chuked_entity+0x180>
   32c2a:	697b      	ldr	r3, [r7, #20]
   32c2c:	781b      	ldrb	r3, [r3, #0]
   32c2e:	2b66      	cmp	r3, #102	; 0x66
   32c30:	d80c      	bhi.n	32c4c <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   32c32:	687b      	ldr	r3, [r7, #4]
   32c34:	22e0      	movs	r2, #224	; 0xe0
   32c36:	589b      	ldr	r3, [r3, r2]
   32c38:	011b      	lsls	r3, r3, #4
   32c3a:	697a      	ldr	r2, [r7, #20]
   32c3c:	7812      	ldrb	r2, [r2, #0]
   32c3e:	189b      	adds	r3, r3, r2
   32c40:	3b61      	subs	r3, #97	; 0x61
   32c42:	001a      	movs	r2, r3
   32c44:	687b      	ldr	r3, [r7, #4]
   32c46:	21e0      	movs	r1, #224	; 0xe0
   32c48:	505a      	str	r2, [r3, r1]
   32c4a:	e01c      	b.n	32c86 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   32c4c:	697b      	ldr	r3, [r7, #20]
   32c4e:	781b      	ldrb	r3, [r3, #0]
   32c50:	2b40      	cmp	r3, #64	; 0x40
   32c52:	d910      	bls.n	32c76 <_http_client_read_chuked_entity+0x1aa>
   32c54:	697b      	ldr	r3, [r7, #20]
   32c56:	781b      	ldrb	r3, [r3, #0]
   32c58:	2b46      	cmp	r3, #70	; 0x46
   32c5a:	d80c      	bhi.n	32c76 <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   32c5c:	687b      	ldr	r3, [r7, #4]
   32c5e:	22e0      	movs	r2, #224	; 0xe0
   32c60:	589b      	ldr	r3, [r3, r2]
   32c62:	011b      	lsls	r3, r3, #4
   32c64:	697a      	ldr	r2, [r7, #20]
   32c66:	7812      	ldrb	r2, [r2, #0]
   32c68:	189b      	adds	r3, r3, r2
   32c6a:	3b41      	subs	r3, #65	; 0x41
   32c6c:	001a      	movs	r2, r3
   32c6e:	687b      	ldr	r3, [r7, #4]
   32c70:	21e0      	movs	r1, #224	; 0xe0
   32c72:	505a      	str	r2, [r3, r1]
   32c74:	e007      	b.n	32c86 <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
   32c76:	697b      	ldr	r3, [r7, #20]
   32c78:	781b      	ldrb	r3, [r3, #0]
   32c7a:	2b3b      	cmp	r3, #59	; 0x3b
   32c7c:	d103      	bne.n	32c86 <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
   32c7e:	2301      	movs	r3, #1
   32c80:	61bb      	str	r3, [r7, #24]
   32c82:	e000      	b.n	32c86 <_http_client_read_chuked_entity+0x1ba>
					continue;
   32c84:	46c0      	nop			; (mov r8, r8)
			for (; length > 0; buffer++, length--) {
   32c86:	697b      	ldr	r3, [r7, #20]
   32c88:	3301      	adds	r3, #1
   32c8a:	617b      	str	r3, [r7, #20]
   32c8c:	69fb      	ldr	r3, [r7, #28]
   32c8e:	3b01      	subs	r3, #1
   32c90:	61fb      	str	r3, [r7, #28]
   32c92:	69fb      	ldr	r3, [r7, #28]
   32c94:	2b00      	cmp	r3, #0
   32c96:	dca1      	bgt.n	32bdc <_http_client_read_chuked_entity+0x110>
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   32c98:	687b      	ldr	r3, [r7, #4]
   32c9a:	22e0      	movs	r2, #224	; 0xe0
   32c9c:	589a      	ldr	r2, [r3, r2]
   32c9e:	687b      	ldr	r3, [r7, #4]
   32ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   32ca2:	429a      	cmp	r2, r3
   32ca4:	dd07      	ble.n	32cb6 <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
   32ca6:	238b      	movs	r3, #139	; 0x8b
   32ca8:	425a      	negs	r2, r3
   32caa:	687b      	ldr	r3, [r7, #4]
   32cac:	0011      	movs	r1, r2
   32cae:	0018      	movs	r0, r3
   32cb0:	4b09      	ldr	r3, [pc, #36]	; (32cd8 <_http_client_read_chuked_entity+0x20c>)
   32cb2:	4798      	blx	r3
				return;
   32cb4:	e00d      	b.n	32cd2 <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
   32cb6:	69fb      	ldr	r3, [r7, #28]
   32cb8:	2b00      	cmp	r3, #0
   32cba:	d105      	bne.n	32cc8 <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
   32cbc:	687b      	ldr	r3, [r7, #4]
   32cbe:	21e0      	movs	r1, #224	; 0xe0
   32cc0:	2201      	movs	r2, #1
   32cc2:	4252      	negs	r2, r2
   32cc4:	505a      	str	r2, [r3, r1]
				return;
   32cc6:	e004      	b.n	32cd2 <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
   32cc8:	687b      	ldr	r3, [r7, #4]
   32cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32ccc:	2b00      	cmp	r3, #0
   32cce:	d000      	beq.n	32cd2 <_http_client_read_chuked_entity+0x206>
   32cd0:	e708      	b.n	32ae4 <_http_client_read_chuked_entity+0x18>
}
   32cd2:	46bd      	mov	sp, r7
   32cd4:	b008      	add	sp, #32
   32cd6:	bd80      	pop	{r7, pc}
   32cd8:	00031ea5 	.word	0x00031ea5
   32cdc:	00032e8d 	.word	0x00032e8d

00032ce0 <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
   32ce0:	b580      	push	{r7, lr}
   32ce2:	b086      	sub	sp, #24
   32ce4:	af00      	add	r7, sp, #0
   32ce6:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
   32ce8:	687b      	ldr	r3, [r7, #4]
   32cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32cec:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   32cee:	687b      	ldr	r3, [r7, #4]
   32cf0:	22dc      	movs	r2, #220	; 0xdc
   32cf2:	589b      	ldr	r3, [r3, r2]
   32cf4:	2b00      	cmp	r3, #0
   32cf6:	db58      	blt.n	32daa <_http_client_handle_entity+0xca>
   32cf8:	687b      	ldr	r3, [r7, #4]
   32cfa:	22dc      	movs	r2, #220	; 0xdc
   32cfc:	589a      	ldr	r2, [r3, r2]
   32cfe:	687b      	ldr	r3, [r7, #4]
   32d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   32d02:	429a      	cmp	r2, r3
   32d04:	dc51      	bgt.n	32daa <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
   32d06:	687b      	ldr	r3, [r7, #4]
   32d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32d0a:	0019      	movs	r1, r3
   32d0c:	687b      	ldr	r3, [r7, #4]
   32d0e:	22dc      	movs	r2, #220	; 0xdc
   32d10:	589b      	ldr	r3, [r3, r2]
   32d12:	4299      	cmp	r1, r3
   32d14:	da00      	bge.n	32d18 <_http_client_handle_entity+0x38>
   32d16:	e0a9      	b.n	32e6c <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
   32d18:	687b      	ldr	r3, [r7, #4]
   32d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32d1c:	2b00      	cmp	r3, #0
   32d1e:	d020      	beq.n	32d62 <_http_client_handle_entity+0x82>
   32d20:	687b      	ldr	r3, [r7, #4]
   32d22:	22e4      	movs	r2, #228	; 0xe4
   32d24:	5a9b      	ldrh	r3, [r3, r2]
   32d26:	2b00      	cmp	r3, #0
   32d28:	d01b      	beq.n	32d62 <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
   32d2a:	687b      	ldr	r3, [r7, #4]
   32d2c:	22e4      	movs	r2, #228	; 0xe4
   32d2e:	5a9a      	ldrh	r2, [r3, r2]
   32d30:	2308      	movs	r3, #8
   32d32:	18fb      	adds	r3, r7, r3
   32d34:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
   32d36:	2308      	movs	r3, #8
   32d38:	18fb      	adds	r3, r7, r3
   32d3a:	2200      	movs	r2, #0
   32d3c:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
   32d3e:	687b      	ldr	r3, [r7, #4]
   32d40:	22dc      	movs	r2, #220	; 0xdc
   32d42:	589b      	ldr	r3, [r3, r2]
   32d44:	001a      	movs	r2, r3
   32d46:	2308      	movs	r3, #8
   32d48:	18fb      	adds	r3, r7, r3
   32d4a:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
   32d4c:	2308      	movs	r3, #8
   32d4e:	18fb      	adds	r3, r7, r3
   32d50:	697a      	ldr	r2, [r7, #20]
   32d52:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   32d54:	687b      	ldr	r3, [r7, #4]
   32d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32d58:	2208      	movs	r2, #8
   32d5a:	18ba      	adds	r2, r7, r2
   32d5c:	6878      	ldr	r0, [r7, #4]
   32d5e:	2102      	movs	r1, #2
   32d60:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
   32d62:	687b      	ldr	r3, [r7, #4]
   32d64:	22d8      	movs	r2, #216	; 0xd8
   32d66:	2100      	movs	r1, #0
   32d68:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
   32d6a:	687b      	ldr	r3, [r7, #4]
   32d6c:	22e4      	movs	r2, #228	; 0xe4
   32d6e:	2100      	movs	r1, #0
   32d70:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
   32d72:	687b      	ldr	r3, [r7, #4]
   32d74:	2241      	movs	r2, #65	; 0x41
   32d76:	5c9b      	ldrb	r3, [r3, r2]
   32d78:	2202      	movs	r2, #2
   32d7a:	4013      	ands	r3, r2
   32d7c:	b2db      	uxtb	r3, r3
   32d7e:	2b00      	cmp	r3, #0
   32d80:	d105      	bne.n	32d8e <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
   32d82:	687b      	ldr	r3, [r7, #4]
   32d84:	2100      	movs	r1, #0
   32d86:	0018      	movs	r0, r3
   32d88:	4b3b      	ldr	r3, [pc, #236]	; (32e78 <_http_client_handle_entity+0x198>)
   32d8a:	4798      	blx	r3
		if ((int)module->recved_size >= module->resp.content_length) {
   32d8c:	e06e      	b.n	32e6c <_http_client_handle_entity+0x18c>
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   32d8e:	687b      	ldr	r3, [r7, #4]
   32d90:	22dc      	movs	r2, #220	; 0xdc
   32d92:	589b      	ldr	r3, [r3, r2]
   32d94:	001a      	movs	r2, r3
   32d96:	697b      	ldr	r3, [r7, #20]
   32d98:	189a      	adds	r2, r3, r2
   32d9a:	687b      	ldr	r3, [r7, #4]
   32d9c:	0011      	movs	r1, r2
   32d9e:	0018      	movs	r0, r3
   32da0:	4b36      	ldr	r3, [pc, #216]	; (32e7c <_http_client_handle_entity+0x19c>)
   32da2:	4798      	blx	r3
				return module->recved_size;
   32da4:	687b      	ldr	r3, [r7, #4]
   32da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32da8:	e061      	b.n	32e6e <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
   32daa:	687b      	ldr	r3, [r7, #4]
   32dac:	22dc      	movs	r2, #220	; 0xdc
   32dae:	589b      	ldr	r3, [r3, r2]
   32db0:	2b00      	cmp	r3, #0
   32db2:	db57      	blt.n	32e64 <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
   32db4:	687b      	ldr	r3, [r7, #4]
   32db6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   32db8:	2308      	movs	r3, #8
   32dba:	18fb      	adds	r3, r7, r3
   32dbc:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
   32dbe:	2308      	movs	r3, #8
   32dc0:	18fb      	adds	r3, r7, r3
   32dc2:	697a      	ldr	r2, [r7, #20]
   32dc4:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
   32dc6:	687b      	ldr	r3, [r7, #4]
   32dc8:	22e0      	movs	r2, #224	; 0xe0
   32dca:	589a      	ldr	r2, [r3, r2]
   32dcc:	687b      	ldr	r3, [r7, #4]
   32dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32dd0:	18d2      	adds	r2, r2, r3
   32dd2:	687b      	ldr	r3, [r7, #4]
   32dd4:	21e0      	movs	r1, #224	; 0xe0
   32dd6:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   32dd8:	687b      	ldr	r3, [r7, #4]
   32dda:	22dc      	movs	r2, #220	; 0xdc
   32ddc:	589a      	ldr	r2, [r3, r2]
   32dde:	687b      	ldr	r3, [r7, #4]
   32de0:	21e0      	movs	r1, #224	; 0xe0
   32de2:	585b      	ldr	r3, [r3, r1]
   32de4:	429a      	cmp	r2, r3
   32de6:	dc0c      	bgt.n	32e02 <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   32de8:	687b      	ldr	r3, [r7, #4]
   32dea:	22d8      	movs	r2, #216	; 0xd8
   32dec:	2100      	movs	r1, #0
   32dee:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   32df0:	687b      	ldr	r3, [r7, #4]
   32df2:	22e4      	movs	r2, #228	; 0xe4
   32df4:	2100      	movs	r1, #0
   32df6:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   32df8:	2308      	movs	r3, #8
   32dfa:	18fb      	adds	r3, r7, r3
   32dfc:	2201      	movs	r2, #1
   32dfe:	721a      	strb	r2, [r3, #8]
   32e00:	e003      	b.n	32e0a <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
   32e02:	2308      	movs	r3, #8
   32e04:	18fb      	adds	r3, r7, r3
   32e06:	2200      	movs	r2, #0
   32e08:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
   32e0a:	687b      	ldr	r3, [r7, #4]
   32e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32e0e:	2b00      	cmp	r3, #0
   32e10:	d006      	beq.n	32e20 <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   32e12:	687b      	ldr	r3, [r7, #4]
   32e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32e16:	2208      	movs	r2, #8
   32e18:	18ba      	adds	r2, r7, r2
   32e1a:	6878      	ldr	r0, [r7, #4]
   32e1c:	2103      	movs	r1, #3
   32e1e:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
   32e20:	2308      	movs	r3, #8
   32e22:	18fb      	adds	r3, r7, r3
   32e24:	7a1b      	ldrb	r3, [r3, #8]
   32e26:	2b01      	cmp	r3, #1
   32e28:	d112      	bne.n	32e50 <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
   32e2a:	687b      	ldr	r3, [r7, #4]
   32e2c:	2241      	movs	r2, #65	; 0x41
   32e2e:	5c9b      	ldrb	r3, [r3, r2]
   32e30:	2202      	movs	r2, #2
   32e32:	4013      	ands	r3, r2
   32e34:	b2db      	uxtb	r3, r3
   32e36:	2b00      	cmp	r3, #0
   32e38:	d10a      	bne.n	32e50 <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
   32e3a:	4b11      	ldr	r3, [pc, #68]	; (32e80 <_http_client_handle_entity+0x1a0>)
   32e3c:	0018      	movs	r0, r3
   32e3e:	4b11      	ldr	r3, [pc, #68]	; (32e84 <_http_client_handle_entity+0x1a4>)
   32e40:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   32e42:	687b      	ldr	r3, [r7, #4]
   32e44:	2100      	movs	r1, #0
   32e46:	0018      	movs	r0, r3
   32e48:	4b0b      	ldr	r3, [pc, #44]	; (32e78 <_http_client_handle_entity+0x198>)
   32e4a:	4798      	blx	r3
					return 0;
   32e4c:	2300      	movs	r3, #0
   32e4e:	e00e      	b.n	32e6e <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
   32e50:	687b      	ldr	r3, [r7, #4]
   32e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32e54:	697a      	ldr	r2, [r7, #20]
   32e56:	18d2      	adds	r2, r2, r3
   32e58:	687b      	ldr	r3, [r7, #4]
   32e5a:	0011      	movs	r1, r2
   32e5c:	0018      	movs	r0, r3
   32e5e:	4b07      	ldr	r3, [pc, #28]	; (32e7c <_http_client_handle_entity+0x19c>)
   32e60:	4798      	blx	r3
   32e62:	e003      	b.n	32e6c <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
   32e64:	687b      	ldr	r3, [r7, #4]
   32e66:	0018      	movs	r0, r3
   32e68:	4b07      	ldr	r3, [pc, #28]	; (32e88 <_http_client_handle_entity+0x1a8>)
   32e6a:	4798      	blx	r3
		}
	}

	return 0;
   32e6c:	2300      	movs	r3, #0
}
   32e6e:	0018      	movs	r0, r3
   32e70:	46bd      	mov	sp, r7
   32e72:	b006      	add	sp, #24
   32e74:	bd80      	pop	{r7, pc}
   32e76:	46c0      	nop			; (mov r8, r8)
   32e78:	00031ea5 	.word	0x00031ea5
   32e7c:	00032e8d 	.word	0x00032e8d
   32e80:	0003ab38 	.word	0x0003ab38
   32e84:	00035811 	.word	0x00035811
   32e88:	00032acd 	.word	0x00032acd

00032e8c <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   32e8c:	b580      	push	{r7, lr}
   32e8e:	b084      	sub	sp, #16
   32e90:	af00      	add	r7, sp, #0
   32e92:	6078      	str	r0, [r7, #4]
   32e94:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
   32e96:	687b      	ldr	r3, [r7, #4]
   32e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32e9a:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   32e9c:	687b      	ldr	r3, [r7, #4]
   32e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32ea0:	001a      	movs	r2, r3
   32ea2:	683b      	ldr	r3, [r7, #0]
   32ea4:	1ad2      	subs	r2, r2, r3
   32ea6:	68fb      	ldr	r3, [r7, #12]
   32ea8:	18d3      	adds	r3, r2, r3
   32eaa:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
   32eac:	68bb      	ldr	r3, [r7, #8]
   32eae:	2b00      	cmp	r3, #0
   32eb0:	dd09      	ble.n	32ec6 <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
   32eb2:	68ba      	ldr	r2, [r7, #8]
   32eb4:	6839      	ldr	r1, [r7, #0]
   32eb6:	68fb      	ldr	r3, [r7, #12]
   32eb8:	0018      	movs	r0, r3
   32eba:	4b06      	ldr	r3, [pc, #24]	; (32ed4 <_http_client_move_buffer+0x48>)
   32ebc:	4798      	blx	r3
		module->recved_size = remain;
   32ebe:	68ba      	ldr	r2, [r7, #8]
   32ec0:	687b      	ldr	r3, [r7, #4]
   32ec2:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
   32ec4:	e002      	b.n	32ecc <_http_client_move_buffer+0x40>
		module->recved_size = 0;
   32ec6:	687b      	ldr	r3, [r7, #4]
   32ec8:	2200      	movs	r2, #0
   32eca:	645a      	str	r2, [r3, #68]	; 0x44
}
   32ecc:	46c0      	nop			; (mov r8, r8)
   32ece:	46bd      	mov	sp, r7
   32ed0:	b004      	add	sp, #16
   32ed2:	bd80      	pop	{r7, pc}
   32ed4:	000355cb 	.word	0x000355cb

00032ed8 <stream_writer_init>:
#include <asf.h>
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
   32ed8:	b580      	push	{r7, lr}
   32eda:	b084      	sub	sp, #16
   32edc:	af00      	add	r7, sp, #0
   32ede:	60f8      	str	r0, [r7, #12]
   32ee0:	60b9      	str	r1, [r7, #8]
   32ee2:	607a      	str	r2, [r7, #4]
   32ee4:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
   32ee6:	68fb      	ldr	r3, [r7, #12]
   32ee8:	687a      	ldr	r2, [r7, #4]
   32eea:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
   32eec:	68fb      	ldr	r3, [r7, #12]
   32eee:	68ba      	ldr	r2, [r7, #8]
   32ef0:	611a      	str	r2, [r3, #16]
	writer->written = 0;
   32ef2:	68fb      	ldr	r3, [r7, #12]
   32ef4:	2200      	movs	r2, #0
   32ef6:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
   32ef8:	68fb      	ldr	r3, [r7, #12]
   32efa:	683a      	ldr	r2, [r7, #0]
   32efc:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
   32efe:	68fb      	ldr	r3, [r7, #12]
   32f00:	69ba      	ldr	r2, [r7, #24]
   32f02:	60da      	str	r2, [r3, #12]
}
   32f04:	46c0      	nop			; (mov r8, r8)
   32f06:	46bd      	mov	sp, r7
   32f08:	b004      	add	sp, #16
   32f0a:	bd80      	pop	{r7, pc}

00032f0c <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
   32f0c:	b580      	push	{r7, lr}
   32f0e:	b084      	sub	sp, #16
   32f10:	af00      	add	r7, sp, #0
   32f12:	6078      	str	r0, [r7, #4]
   32f14:	000a      	movs	r2, r1
   32f16:	1cfb      	adds	r3, r7, #3
   32f18:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
   32f1a:	687b      	ldr	r3, [r7, #4]
   32f1c:	681a      	ldr	r2, [r3, #0]
   32f1e:	687b      	ldr	r3, [r7, #4]
   32f20:	685b      	ldr	r3, [r3, #4]
   32f22:	1ad3      	subs	r3, r2, r3
   32f24:	60fb      	str	r3, [r7, #12]
	
	if (remain < 1) {
   32f26:	68fb      	ldr	r3, [r7, #12]
   32f28:	2b00      	cmp	r3, #0
   32f2a:	dc03      	bgt.n	32f34 <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
   32f2c:	687b      	ldr	r3, [r7, #4]
   32f2e:	0018      	movs	r0, r3
   32f30:	4b08      	ldr	r3, [pc, #32]	; (32f54 <stream_writer_send_8+0x48>)
   32f32:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
   32f34:	687b      	ldr	r3, [r7, #4]
   32f36:	6919      	ldr	r1, [r3, #16]
   32f38:	687b      	ldr	r3, [r7, #4]
   32f3a:	685b      	ldr	r3, [r3, #4]
   32f3c:	1c58      	adds	r0, r3, #1
   32f3e:	687a      	ldr	r2, [r7, #4]
   32f40:	6050      	str	r0, [r2, #4]
   32f42:	18cb      	adds	r3, r1, r3
   32f44:	1cfa      	adds	r2, r7, #3
   32f46:	7812      	ldrb	r2, [r2, #0]
   32f48:	701a      	strb	r2, [r3, #0]
}
   32f4a:	46c0      	nop			; (mov r8, r8)
   32f4c:	46bd      	mov	sp, r7
   32f4e:	b004      	add	sp, #16
   32f50:	bd80      	pop	{r7, pc}
   32f52:	46c0      	nop			; (mov r8, r8)
   32f54:	00032f95 	.word	0x00032f95

00032f58 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
   32f58:	b580      	push	{r7, lr}
   32f5a:	b084      	sub	sp, #16
   32f5c:	af00      	add	r7, sp, #0
   32f5e:	60f8      	str	r0, [r7, #12]
   32f60:	60b9      	str	r1, [r7, #8]
   32f62:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
   32f64:	e00d      	b.n	32f82 <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
   32f66:	68bb      	ldr	r3, [r7, #8]
   32f68:	781b      	ldrb	r3, [r3, #0]
   32f6a:	b25a      	sxtb	r2, r3
   32f6c:	68fb      	ldr	r3, [r7, #12]
   32f6e:	0011      	movs	r1, r2
   32f70:	0018      	movs	r0, r3
   32f72:	4b07      	ldr	r3, [pc, #28]	; (32f90 <stream_writer_send_buffer+0x38>)
   32f74:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
   32f76:	687b      	ldr	r3, [r7, #4]
   32f78:	3b01      	subs	r3, #1
   32f7a:	607b      	str	r3, [r7, #4]
   32f7c:	68bb      	ldr	r3, [r7, #8]
   32f7e:	3301      	adds	r3, #1
   32f80:	60bb      	str	r3, [r7, #8]
   32f82:	687b      	ldr	r3, [r7, #4]
   32f84:	2b00      	cmp	r3, #0
   32f86:	d1ee      	bne.n	32f66 <stream_writer_send_buffer+0xe>
	}
}
   32f88:	46c0      	nop			; (mov r8, r8)
   32f8a:	46bd      	mov	sp, r7
   32f8c:	b004      	add	sp, #16
   32f8e:	bd80      	pop	{r7, pc}
   32f90:	00032f0d 	.word	0x00032f0d

00032f94 <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
   32f94:	b590      	push	{r4, r7, lr}
   32f96:	b083      	sub	sp, #12
   32f98:	af00      	add	r7, sp, #0
   32f9a:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
   32f9c:	687b      	ldr	r3, [r7, #4]
   32f9e:	685b      	ldr	r3, [r3, #4]
   32fa0:	2b00      	cmp	r3, #0
   32fa2:	d00c      	beq.n	32fbe <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   32fa4:	687b      	ldr	r3, [r7, #4]
   32fa6:	689c      	ldr	r4, [r3, #8]
   32fa8:	687b      	ldr	r3, [r7, #4]
   32faa:	68d8      	ldr	r0, [r3, #12]
   32fac:	687b      	ldr	r3, [r7, #4]
   32fae:	6919      	ldr	r1, [r3, #16]
   32fb0:	687b      	ldr	r3, [r7, #4]
   32fb2:	685b      	ldr	r3, [r3, #4]
   32fb4:	001a      	movs	r2, r3
   32fb6:	47a0      	blx	r4
		writer->written = 0;
   32fb8:	687b      	ldr	r3, [r7, #4]
   32fba:	2200      	movs	r2, #0
   32fbc:	605a      	str	r2, [r3, #4]
	}
}
   32fbe:	46c0      	nop			; (mov r8, r8)
   32fc0:	46bd      	mov	sp, r7
   32fc2:	b003      	add	sp, #12
   32fc4:	bd90      	pop	{r4, r7, pc}
	...

00032fc8 <system_cpu_clock_get_hz>:
{
   32fc8:	b580      	push	{r7, lr}
   32fca:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   32fcc:	2000      	movs	r0, #0
   32fce:	4b05      	ldr	r3, [pc, #20]	; (32fe4 <system_cpu_clock_get_hz+0x1c>)
   32fd0:	4798      	blx	r3
   32fd2:	0002      	movs	r2, r0
   32fd4:	4b04      	ldr	r3, [pc, #16]	; (32fe8 <system_cpu_clock_get_hz+0x20>)
   32fd6:	7a1b      	ldrb	r3, [r3, #8]
   32fd8:	b2db      	uxtb	r3, r3
   32fda:	40da      	lsrs	r2, r3
   32fdc:	0013      	movs	r3, r2
}
   32fde:	0018      	movs	r0, r3
   32fe0:	46bd      	mov	sp, r7
   32fe2:	bd80      	pop	{r7, pc}
   32fe4:	0002a9a9 	.word	0x0002a9a9
   32fe8:	40000400 	.word	0x40000400

00032fec <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   32fec:	b580      	push	{r7, lr}
   32fee:	b084      	sub	sp, #16
   32ff0:	af00      	add	r7, sp, #0
   32ff2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   32ff4:	687b      	ldr	r3, [r7, #4]
   32ff6:	681b      	ldr	r3, [r3, #0]
   32ff8:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   32ffa:	46c0      	nop			; (mov r8, r8)
   32ffc:	68fb      	ldr	r3, [r7, #12]
   32ffe:	689b      	ldr	r3, [r3, #8]
   33000:	2202      	movs	r2, #2
   33002:	4013      	ands	r3, r2
   33004:	d1fa      	bne.n	32ffc <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   33006:	68fb      	ldr	r3, [r7, #12]
   33008:	681b      	ldr	r3, [r3, #0]
   3300a:	2202      	movs	r2, #2
   3300c:	431a      	orrs	r2, r3
   3300e:	68fb      	ldr	r3, [r7, #12]
   33010:	601a      	str	r2, [r3, #0]
}
   33012:	46c0      	nop			; (mov r8, r8)
   33014:	46bd      	mov	sp, r7
   33016:	b004      	add	sp, #16
   33018:	bd80      	pop	{r7, pc}
	...

0003301c <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
   3301c:	b580      	push	{r7, lr}
   3301e:	b082      	sub	sp, #8
   33020:	af00      	add	r7, sp, #0
   33022:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
   33024:	4b04      	ldr	r3, [pc, #16]	; (33038 <sw_timer_tcc_callback+0x1c>)
   33026:	681b      	ldr	r3, [r3, #0]
   33028:	1c5a      	adds	r2, r3, #1
   3302a:	4b03      	ldr	r3, [pc, #12]	; (33038 <sw_timer_tcc_callback+0x1c>)
   3302c:	601a      	str	r2, [r3, #0]
}
   3302e:	46c0      	nop			; (mov r8, r8)
   33030:	46bd      	mov	sp, r7
   33032:	b002      	add	sp, #8
   33034:	bd80      	pop	{r7, pc}
   33036:	46c0      	nop			; (mov r8, r8)
   33038:	20004710 	.word	0x20004710

0003303c <sw_timer_get_config_defaults>:
}

#endif

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
   3303c:	b580      	push	{r7, lr}
   3303e:	b082      	sub	sp, #8
   33040:	af00      	add	r7, sp, #0
   33042:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
   33044:	687b      	ldr	r3, [r7, #4]
   33046:	2264      	movs	r2, #100	; 0x64
   33048:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
   3304a:	687b      	ldr	r3, [r7, #4]
   3304c:	2200      	movs	r2, #0
   3304e:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
   33050:	687b      	ldr	r3, [r7, #4]
   33052:	2200      	movs	r2, #0
   33054:	705a      	strb	r2, [r3, #1]
}
   33056:	46c0      	nop			; (mov r8, r8)
   33058:	46bd      	mov	sp, r7
   3305a:	b002      	add	sp, #8
   3305c:	bd80      	pop	{r7, pc}
	...

00033060 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   33060:	b590      	push	{r4, r7, lr}
   33062:	b0b1      	sub	sp, #196	; 0xc4
   33064:	af00      	add	r7, sp, #0
   33066:	6078      	str	r0, [r7, #4]
   33068:	6039      	str	r1, [r7, #0]
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   3306a:	230c      	movs	r3, #12
   3306c:	18fb      	adds	r3, r7, r3
   3306e:	4a2e      	ldr	r2, [pc, #184]	; (33128 <sw_timer_init+0xc8>)
   33070:	ca13      	ldmia	r2!, {r0, r1, r4}
   33072:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   33074:	683b      	ldr	r3, [r7, #0]
   33076:	885b      	ldrh	r3, [r3, #2]
   33078:	001a      	movs	r2, r3
   3307a:	687b      	ldr	r3, [r7, #4]
   3307c:	655a      	str	r2, [r3, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   3307e:	687b      	ldr	r3, [r7, #4]
   33080:	3314      	adds	r3, #20
   33082:	22bc      	movs	r2, #188	; 0xbc
   33084:	18ba      	adds	r2, r7, r2
   33086:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   33088:	683b      	ldr	r3, [r7, #0]
   3308a:	781b      	ldrb	r3, [r3, #0]
   3308c:	001a      	movs	r2, r3
   3308e:	230c      	movs	r3, #12
   33090:	18fb      	adds	r3, r7, r3
   33092:	0092      	lsls	r2, r2, #2
   33094:	58d2      	ldr	r2, [r2, r3]
   33096:	2318      	movs	r3, #24
   33098:	18fb      	adds	r3, r7, r3
   3309a:	0011      	movs	r1, r2
   3309c:	0018      	movs	r0, r3
   3309e:	4b23      	ldr	r3, [pc, #140]	; (3312c <sw_timer_init+0xcc>)
   330a0:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   330a2:	4b23      	ldr	r3, [pc, #140]	; (33130 <sw_timer_init+0xd0>)
   330a4:	4798      	blx	r3
   330a6:	0004      	movs	r4, r0
   330a8:	683b      	ldr	r3, [r7, #0]
   330aa:	885b      	ldrh	r3, [r3, #2]
   330ac:	001a      	movs	r2, r3
   330ae:	4b21      	ldr	r3, [pc, #132]	; (33134 <sw_timer_init+0xd4>)
   330b0:	0011      	movs	r1, r2
   330b2:	22fa      	movs	r2, #250	; 0xfa
   330b4:	0210      	lsls	r0, r2, #8
   330b6:	4798      	blx	r3
   330b8:	0003      	movs	r3, r0
   330ba:	001a      	movs	r2, r3
   330bc:	4b1e      	ldr	r3, [pc, #120]	; (33138 <sw_timer_init+0xd8>)
   330be:	0011      	movs	r1, r2
   330c0:	0020      	movs	r0, r4
   330c2:	4798      	blx	r3
   330c4:	0003      	movs	r3, r0
   330c6:	001a      	movs	r2, r3
   330c8:	2318      	movs	r3, #24
   330ca:	18fb      	adds	r3, r7, r3
   330cc:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   330ce:	2318      	movs	r3, #24
   330d0:	18fb      	adds	r3, r7, r3
   330d2:	2205      	movs	r2, #5
   330d4:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   330d6:	683b      	ldr	r3, [r7, #0]
   330d8:	781b      	ldrb	r3, [r3, #0]
   330da:	001a      	movs	r2, r3
   330dc:	230c      	movs	r3, #12
   330de:	18fb      	adds	r3, r7, r3
   330e0:	0092      	lsls	r2, r2, #2
   330e2:	58d1      	ldr	r1, [r2, r3]
   330e4:	2318      	movs	r3, #24
   330e6:	18fa      	adds	r2, r7, r3
   330e8:	23bc      	movs	r3, #188	; 0xbc
   330ea:	18fb      	adds	r3, r7, r3
   330ec:	681b      	ldr	r3, [r3, #0]
   330ee:	0018      	movs	r0, r3
   330f0:	4b12      	ldr	r3, [pc, #72]	; (3313c <sw_timer_init+0xdc>)
   330f2:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   330f4:	683b      	ldr	r3, [r7, #0]
   330f6:	785b      	ldrb	r3, [r3, #1]
   330f8:	3308      	adds	r3, #8
   330fa:	b2da      	uxtb	r2, r3
   330fc:	4910      	ldr	r1, [pc, #64]	; (33140 <sw_timer_init+0xe0>)
   330fe:	23bc      	movs	r3, #188	; 0xbc
   33100:	18fb      	adds	r3, r7, r3
   33102:	681b      	ldr	r3, [r3, #0]
   33104:	0018      	movs	r0, r3
   33106:	4b0f      	ldr	r3, [pc, #60]	; (33144 <sw_timer_init+0xe4>)
   33108:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   3310a:	683b      	ldr	r3, [r7, #0]
   3310c:	785b      	ldrb	r3, [r3, #1]
   3310e:	3308      	adds	r3, #8
   33110:	b2da      	uxtb	r2, r3
   33112:	23bc      	movs	r3, #188	; 0xbc
   33114:	18fb      	adds	r3, r7, r3
   33116:	681b      	ldr	r3, [r3, #0]
   33118:	0011      	movs	r1, r2
   3311a:	0018      	movs	r0, r3
   3311c:	4b0a      	ldr	r3, [pc, #40]	; (33148 <sw_timer_init+0xe8>)
   3311e:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   33120:	46c0      	nop			; (mov r8, r8)
   33122:	46bd      	mov	sp, r7
   33124:	b031      	add	sp, #196	; 0xc4
   33126:	bd90      	pop	{r4, r7, pc}
   33128:	0003ab78 	.word	0x0003ab78
   3312c:	0002af41 	.word	0x0002af41
   33130:	00032fc9 	.word	0x00032fc9
   33134:	00033729 	.word	0x00033729
   33138:	00033615 	.word	0x00033615
   3313c:	0002b59d 	.word	0x0002b59d
   33140:	0003301d 	.word	0x0003301d
   33144:	0002b9b5 	.word	0x0002b9b5
   33148:	0002b9f5 	.word	0x0002b9f5

0003314c <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
   3314c:	b580      	push	{r7, lr}
   3314e:	b084      	sub	sp, #16
   33150:	af00      	add	r7, sp, #0
   33152:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;
#endif

	Assert(module_inst);
#if (SAMD21)
	tcc_module = &module_inst->tcc_inst;
   33154:	687b      	ldr	r3, [r7, #4]
   33156:	3314      	adds	r3, #20
   33158:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
   3315a:	68fb      	ldr	r3, [r7, #12]
   3315c:	0018      	movs	r0, r3
   3315e:	4b03      	ldr	r3, [pc, #12]	; (3316c <sw_timer_enable+0x20>)
   33160:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   33162:	46c0      	nop			; (mov r8, r8)
   33164:	46bd      	mov	sp, r7
   33166:	b004      	add	sp, #16
   33168:	bd80      	pop	{r7, pc}
   3316a:	46c0      	nop			; (mov r8, r8)
   3316c:	00032fed 	.word	0x00032fed

00033170 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   33170:	b580      	push	{r7, lr}
   33172:	b086      	sub	sp, #24
   33174:	af00      	add	r7, sp, #0
   33176:	60f8      	str	r0, [r7, #12]
   33178:	60b9      	str	r1, [r7, #8]
   3317a:	607a      	str	r2, [r7, #4]
   3317c:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   3317e:	2300      	movs	r3, #0
   33180:	617b      	str	r3, [r7, #20]
   33182:	e032      	b.n	331ea <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
   33184:	68f9      	ldr	r1, [r7, #12]
   33186:	697a      	ldr	r2, [r7, #20]
   33188:	0013      	movs	r3, r2
   3318a:	009b      	lsls	r3, r3, #2
   3318c:	189b      	adds	r3, r3, r2
   3318e:	009b      	lsls	r3, r3, #2
   33190:	5c5b      	ldrb	r3, [r3, r1]
   33192:	07db      	lsls	r3, r3, #31
   33194:	0fdb      	lsrs	r3, r3, #31
   33196:	b2db      	uxtb	r3, r3
   33198:	2b00      	cmp	r3, #0
   3319a:	d123      	bne.n	331e4 <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
   3319c:	697a      	ldr	r2, [r7, #20]
   3319e:	0013      	movs	r3, r2
   331a0:	009b      	lsls	r3, r3, #2
   331a2:	189b      	adds	r3, r3, r2
   331a4:	009b      	lsls	r3, r3, #2
   331a6:	68fa      	ldr	r2, [r7, #12]
   331a8:	18d3      	adds	r3, r2, r3
   331aa:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
   331ac:	693b      	ldr	r3, [r7, #16]
   331ae:	68ba      	ldr	r2, [r7, #8]
   331b0:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
   331b2:	693b      	ldr	r3, [r7, #16]
   331b4:	781a      	ldrb	r2, [r3, #0]
   331b6:	2102      	movs	r1, #2
   331b8:	438a      	bics	r2, r1
   331ba:	701a      	strb	r2, [r3, #0]
			handler->context = context;
   331bc:	693b      	ldr	r3, [r7, #16]
   331be:	687a      	ldr	r2, [r7, #4]
   331c0:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
   331c2:	68fb      	ldr	r3, [r7, #12]
   331c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   331c6:	4b0d      	ldr	r3, [pc, #52]	; (331fc <sw_timer_register_callback+0x8c>)
   331c8:	0011      	movs	r1, r2
   331ca:	6838      	ldr	r0, [r7, #0]
   331cc:	4798      	blx	r3
   331ce:	0003      	movs	r3, r0
   331d0:	001a      	movs	r2, r3
   331d2:	693b      	ldr	r3, [r7, #16]
   331d4:	60da      	str	r2, [r3, #12]
			handler->used = 1;
   331d6:	693b      	ldr	r3, [r7, #16]
   331d8:	781a      	ldrb	r2, [r3, #0]
   331da:	2101      	movs	r1, #1
   331dc:	430a      	orrs	r2, r1
   331de:	701a      	strb	r2, [r3, #0]
			return index;
   331e0:	697b      	ldr	r3, [r7, #20]
   331e2:	e007      	b.n	331f4 <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   331e4:	697b      	ldr	r3, [r7, #20]
   331e6:	3301      	adds	r3, #1
   331e8:	617b      	str	r3, [r7, #20]
   331ea:	697b      	ldr	r3, [r7, #20]
   331ec:	2b00      	cmp	r3, #0
   331ee:	ddc9      	ble.n	33184 <sw_timer_register_callback+0x14>
		}
	}
	return -1;
   331f0:	2301      	movs	r3, #1
   331f2:	425b      	negs	r3, r3
}
   331f4:	0018      	movs	r0, r3
   331f6:	46bd      	mov	sp, r7
   331f8:	b006      	add	sp, #24
   331fa:	bd80      	pop	{r7, pc}
   331fc:	00033615 	.word	0x00033615

00033200 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   33200:	b580      	push	{r7, lr}
   33202:	b086      	sub	sp, #24
   33204:	af00      	add	r7, sp, #0
   33206:	60f8      	str	r0, [r7, #12]
   33208:	60b9      	str	r1, [r7, #8]
   3320a:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   3320c:	68ba      	ldr	r2, [r7, #8]
   3320e:	0013      	movs	r3, r2
   33210:	009b      	lsls	r3, r3, #2
   33212:	189b      	adds	r3, r3, r2
   33214:	009b      	lsls	r3, r3, #2
   33216:	68fa      	ldr	r2, [r7, #12]
   33218:	18d3      	adds	r3, r2, r3
   3321a:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
   3321c:	697b      	ldr	r3, [r7, #20]
   3321e:	781a      	ldrb	r2, [r3, #0]
   33220:	2102      	movs	r1, #2
   33222:	430a      	orrs	r2, r1
   33224:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   33226:	68fb      	ldr	r3, [r7, #12]
   33228:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   3322a:	4b07      	ldr	r3, [pc, #28]	; (33248 <sw_timer_enable_callback+0x48>)
   3322c:	0011      	movs	r1, r2
   3322e:	6878      	ldr	r0, [r7, #4]
   33230:	4798      	blx	r3
   33232:	0003      	movs	r3, r0
   33234:	001a      	movs	r2, r3
   33236:	4b05      	ldr	r3, [pc, #20]	; (3324c <sw_timer_enable_callback+0x4c>)
   33238:	681b      	ldr	r3, [r3, #0]
   3323a:	18d2      	adds	r2, r2, r3
   3323c:	697b      	ldr	r3, [r7, #20]
   3323e:	611a      	str	r2, [r3, #16]
}
   33240:	46c0      	nop			; (mov r8, r8)
   33242:	46bd      	mov	sp, r7
   33244:	b006      	add	sp, #24
   33246:	bd80      	pop	{r7, pc}
   33248:	00033615 	.word	0x00033615
   3324c:	20004710 	.word	0x20004710

00033250 <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
   33250:	b580      	push	{r7, lr}
   33252:	b084      	sub	sp, #16
   33254:	af00      	add	r7, sp, #0
   33256:	6078      	str	r0, [r7, #4]
   33258:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   3325a:	683a      	ldr	r2, [r7, #0]
   3325c:	0013      	movs	r3, r2
   3325e:	009b      	lsls	r3, r3, #2
   33260:	189b      	adds	r3, r3, r2
   33262:	009b      	lsls	r3, r3, #2
   33264:	687a      	ldr	r2, [r7, #4]
   33266:	18d3      	adds	r3, r2, r3
   33268:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
   3326a:	68fb      	ldr	r3, [r7, #12]
   3326c:	781a      	ldrb	r2, [r3, #0]
   3326e:	2102      	movs	r1, #2
   33270:	438a      	bics	r2, r1
   33272:	701a      	strb	r2, [r3, #0]
}
   33274:	46c0      	nop			; (mov r8, r8)
   33276:	46bd      	mov	sp, r7
   33278:	b004      	add	sp, #16
   3327a:	bd80      	pop	{r7, pc}

0003327c <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   3327c:	b590      	push	{r4, r7, lr}
   3327e:	b085      	sub	sp, #20
   33280:	af00      	add	r7, sp, #0
   33282:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   33284:	2300      	movs	r3, #0
   33286:	60fb      	str	r3, [r7, #12]
   33288:	e053      	b.n	33332 <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   3328a:	6879      	ldr	r1, [r7, #4]
   3328c:	68fa      	ldr	r2, [r7, #12]
   3328e:	0013      	movs	r3, r2
   33290:	009b      	lsls	r3, r3, #2
   33292:	189b      	adds	r3, r3, r2
   33294:	009b      	lsls	r3, r3, #2
   33296:	5c5b      	ldrb	r3, [r3, r1]
   33298:	07db      	lsls	r3, r3, #31
   3329a:	0fdb      	lsrs	r3, r3, #31
   3329c:	b2db      	uxtb	r3, r3
   3329e:	2b00      	cmp	r3, #0
   332a0:	d044      	beq.n	3332c <sw_timer_task+0xb0>
   332a2:	6879      	ldr	r1, [r7, #4]
   332a4:	68fa      	ldr	r2, [r7, #12]
   332a6:	0013      	movs	r3, r2
   332a8:	009b      	lsls	r3, r3, #2
   332aa:	189b      	adds	r3, r3, r2
   332ac:	009b      	lsls	r3, r3, #2
   332ae:	5c5b      	ldrb	r3, [r3, r1]
   332b0:	079b      	lsls	r3, r3, #30
   332b2:	0fdb      	lsrs	r3, r3, #31
   332b4:	b2db      	uxtb	r3, r3
   332b6:	2b00      	cmp	r3, #0
   332b8:	d038      	beq.n	3332c <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
   332ba:	68fa      	ldr	r2, [r7, #12]
   332bc:	0013      	movs	r3, r2
   332be:	009b      	lsls	r3, r3, #2
   332c0:	189b      	adds	r3, r3, r2
   332c2:	009b      	lsls	r3, r3, #2
   332c4:	687a      	ldr	r2, [r7, #4]
   332c6:	18d3      	adds	r3, r2, r3
   332c8:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   332ca:	68bb      	ldr	r3, [r7, #8]
   332cc:	691a      	ldr	r2, [r3, #16]
   332ce:	4b1c      	ldr	r3, [pc, #112]	; (33340 <sw_timer_task+0xc4>)
   332d0:	681b      	ldr	r3, [r3, #0]
   332d2:	1ad3      	subs	r3, r2, r3
   332d4:	d52a      	bpl.n	3332c <sw_timer_task+0xb0>
   332d6:	68bb      	ldr	r3, [r7, #8]
   332d8:	781b      	ldrb	r3, [r3, #0]
   332da:	2204      	movs	r2, #4
   332dc:	4013      	ands	r3, r2
   332de:	b2db      	uxtb	r3, r3
   332e0:	2b00      	cmp	r3, #0
   332e2:	d123      	bne.n	3332c <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
   332e4:	68bb      	ldr	r3, [r7, #8]
   332e6:	781a      	ldrb	r2, [r3, #0]
   332e8:	2104      	movs	r1, #4
   332ea:	430a      	orrs	r2, r1
   332ec:	701a      	strb	r2, [r3, #0]
				/* Timer was expired. */
				if (handler->period > 0) {
   332ee:	68bb      	ldr	r3, [r7, #8]
   332f0:	68db      	ldr	r3, [r3, #12]
   332f2:	2b00      	cmp	r3, #0
   332f4:	d007      	beq.n	33306 <sw_timer_task+0x8a>
					handler->expire_time = sw_timer_tick + handler->period;
   332f6:	68bb      	ldr	r3, [r7, #8]
   332f8:	68da      	ldr	r2, [r3, #12]
   332fa:	4b11      	ldr	r3, [pc, #68]	; (33340 <sw_timer_task+0xc4>)
   332fc:	681b      	ldr	r3, [r3, #0]
   332fe:	18d2      	adds	r2, r2, r3
   33300:	68bb      	ldr	r3, [r7, #8]
   33302:	611a      	str	r2, [r3, #16]
   33304:	e004      	b.n	33310 <sw_timer_task+0x94>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
   33306:	68bb      	ldr	r3, [r7, #8]
   33308:	781a      	ldrb	r2, [r3, #0]
   3330a:	2102      	movs	r1, #2
   3330c:	438a      	bics	r2, r1
   3330e:	701a      	strb	r2, [r3, #0]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
   33310:	68bb      	ldr	r3, [r7, #8]
   33312:	685c      	ldr	r4, [r3, #4]
   33314:	68bb      	ldr	r3, [r7, #8]
   33316:	689a      	ldr	r2, [r3, #8]
   33318:	68bb      	ldr	r3, [r7, #8]
   3331a:	68db      	ldr	r3, [r3, #12]
   3331c:	68f9      	ldr	r1, [r7, #12]
   3331e:	6878      	ldr	r0, [r7, #4]
   33320:	47a0      	blx	r4
				/* Leave critical section. */
				handler->busy = 0;
   33322:	68bb      	ldr	r3, [r7, #8]
   33324:	781a      	ldrb	r2, [r3, #0]
   33326:	2104      	movs	r1, #4
   33328:	438a      	bics	r2, r1
   3332a:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   3332c:	68fb      	ldr	r3, [r7, #12]
   3332e:	3301      	adds	r3, #1
   33330:	60fb      	str	r3, [r7, #12]
   33332:	68fb      	ldr	r3, [r7, #12]
   33334:	2b00      	cmp	r3, #0
   33336:	dda8      	ble.n	3328a <sw_timer_task+0xe>
			}
		}
	}
}
   33338:	46c0      	nop			; (mov r8, r8)
   3333a:	46bd      	mov	sp, r7
   3333c:	b005      	add	sp, #20
   3333e:	bd90      	pop	{r4, r7, pc}
   33340:	20004710 	.word	0x20004710

00033344 <main>:
 * @brief Main application function.
 * Application entry point.
 * @return int
 */
int main(void)
{
   33344:	b580      	push	{r7, lr}
   33346:	af00      	add	r7, sp, #0
    /* Initialize the board. */
    system_init();
   33348:	4b06      	ldr	r3, [pc, #24]	; (33364 <main+0x20>)
   3334a:	4798      	blx	r3

    /* Initialize the UART console. */
    InitializeSerialConsole();
   3334c:	4b06      	ldr	r3, [pc, #24]	; (33368 <main+0x24>)
   3334e:	4798      	blx	r3

    // Initialize trace capabilities
    vTraceEnable(TRC_START);
   33350:	2001      	movs	r0, #1
   33352:	4b06      	ldr	r3, [pc, #24]	; (3336c <main+0x28>)
   33354:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   33356:	4b06      	ldr	r3, [pc, #24]	; (33370 <main+0x2c>)
   33358:	4798      	blx	r3

    return 0;  // Will not get here
   3335a:	2300      	movs	r3, #0
}
   3335c:	0018      	movs	r0, r3
   3335e:	46bd      	mov	sp, r7
   33360:	bd80      	pop	{r7, pc}
   33362:	46c0      	nop			; (mov r8, r8)
   33364:	0002ae35 	.word	0x0002ae35
   33368:	0001ea15 	.word	0x0001ea15
   3336c:	000190e1 	.word	0x000190e1
   33370:	0001d06d 	.word	0x0001d06d

00033374 <vApplicationDaemonTaskStartupHook>:
 *					here will be called before other tasks are initilized.
 * @param[in]        None
 * @return           None
 */
void vApplicationDaemonTaskStartupHook(void)
{
   33374:	b580      	push	{r7, lr}
   33376:	b082      	sub	sp, #8
   33378:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("\r\n-----ESE516 Main Program-----\r\n");
   3337a:	4b27      	ldr	r3, [pc, #156]	; (33418 <vApplicationDaemonTaskStartupHook+0xa4>)
   3337c:	0018      	movs	r0, r3
   3337e:	4b27      	ldr	r3, [pc, #156]	; (3341c <vApplicationDaemonTaskStartupHook+0xa8>)
   33380:	4798      	blx	r3

    // Initialize HW that needs FreeRTOS Initialization
    SerialConsoleWriteString("\r\nInitialize HW...\r\n");
   33382:	4b27      	ldr	r3, [pc, #156]	; (33420 <vApplicationDaemonTaskStartupHook+0xac>)
   33384:	0018      	movs	r0, r3
   33386:	4b25      	ldr	r3, [pc, #148]	; (3341c <vApplicationDaemonTaskStartupHook+0xa8>)
   33388:	4798      	blx	r3
    if (I2cInitializeDriver() != STATUS_OK) {
   3338a:	4b26      	ldr	r3, [pc, #152]	; (33424 <vApplicationDaemonTaskStartupHook+0xb0>)
   3338c:	4798      	blx	r3
   3338e:	1e03      	subs	r3, r0, #0
   33390:	d004      	beq.n	3339c <vApplicationDaemonTaskStartupHook+0x28>
        SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   33392:	4b25      	ldr	r3, [pc, #148]	; (33428 <vApplicationDaemonTaskStartupHook+0xb4>)
   33394:	0018      	movs	r0, r3
   33396:	4b21      	ldr	r3, [pc, #132]	; (3341c <vApplicationDaemonTaskStartupHook+0xa8>)
   33398:	4798      	blx	r3
   3339a:	e003      	b.n	333a4 <vApplicationDaemonTaskStartupHook+0x30>
    } else {
        SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   3339c:	4b23      	ldr	r3, [pc, #140]	; (3342c <vApplicationDaemonTaskStartupHook+0xb8>)
   3339e:	0018      	movs	r0, r3
   333a0:	4b1e      	ldr	r3, [pc, #120]	; (3341c <vApplicationDaemonTaskStartupHook+0xa8>)
   333a2:	4798      	blx	r3
        //SerialConsoleWriteString("Error initializing Seesaw!\r\n");
    //} else {
        //SerialConsoleWriteString("Initialized Seesaw!\r\n");
    //}

    uint8_t whoamI = 0;
   333a4:	1dfb      	adds	r3, r7, #7
   333a6:	2200      	movs	r2, #0
   333a8:	701a      	strb	r2, [r3, #0]
    (lsm6dso_device_id_get(GetImuStruct(), &whoamI));
   333aa:	4b21      	ldr	r3, [pc, #132]	; (33430 <vApplicationDaemonTaskStartupHook+0xbc>)
   333ac:	4798      	blx	r3
   333ae:	0002      	movs	r2, r0
   333b0:	1dfb      	adds	r3, r7, #7
   333b2:	0019      	movs	r1, r3
   333b4:	0010      	movs	r0, r2
   333b6:	4b1f      	ldr	r3, [pc, #124]	; (33434 <vApplicationDaemonTaskStartupHook+0xc0>)
   333b8:	4798      	blx	r3

    if (whoamI != LSM6DSO_ID) {
   333ba:	1dfb      	adds	r3, r7, #7
   333bc:	781b      	ldrb	r3, [r3, #0]
   333be:	2b6c      	cmp	r3, #108	; 0x6c
   333c0:	d004      	beq.n	333cc <vApplicationDaemonTaskStartupHook+0x58>
        SerialConsoleWriteString("Cannot find IMU!\r\n");
   333c2:	4b1d      	ldr	r3, [pc, #116]	; (33438 <vApplicationDaemonTaskStartupHook+0xc4>)
   333c4:	0018      	movs	r0, r3
   333c6:	4b15      	ldr	r3, [pc, #84]	; (3341c <vApplicationDaemonTaskStartupHook+0xa8>)
   333c8:	4798      	blx	r3
   333ca:	e010      	b.n	333ee <vApplicationDaemonTaskStartupHook+0x7a>
    } else {
        SerialConsoleWriteString("IMU found!\r\n");
   333cc:	4b1b      	ldr	r3, [pc, #108]	; (3343c <vApplicationDaemonTaskStartupHook+0xc8>)
   333ce:	0018      	movs	r0, r3
   333d0:	4b12      	ldr	r3, [pc, #72]	; (3341c <vApplicationDaemonTaskStartupHook+0xa8>)
   333d2:	4798      	blx	r3
        if (InitImu() == 0) {
   333d4:	4b1a      	ldr	r3, [pc, #104]	; (33440 <vApplicationDaemonTaskStartupHook+0xcc>)
   333d6:	4798      	blx	r3
   333d8:	1e03      	subs	r3, r0, #0
   333da:	d104      	bne.n	333e6 <vApplicationDaemonTaskStartupHook+0x72>
            SerialConsoleWriteString("IMU initialized!\r\n");
   333dc:	4b19      	ldr	r3, [pc, #100]	; (33444 <vApplicationDaemonTaskStartupHook+0xd0>)
   333de:	0018      	movs	r0, r3
   333e0:	4b0e      	ldr	r3, [pc, #56]	; (3341c <vApplicationDaemonTaskStartupHook+0xa8>)
   333e2:	4798      	blx	r3
   333e4:	e003      	b.n	333ee <vApplicationDaemonTaskStartupHook+0x7a>
        } else {
            SerialConsoleWriteString("Could not initialize IMU\r\n");
   333e6:	4b18      	ldr	r3, [pc, #96]	; (33448 <vApplicationDaemonTaskStartupHook+0xd4>)
   333e8:	0018      	movs	r0, r3
   333ea:	4b0c      	ldr	r3, [pc, #48]	; (3341c <vApplicationDaemonTaskStartupHook+0xa8>)
   333ec:	4798      	blx	r3
        }
    }

	//commented by Derek
    SerialConsoleWriteString("Initializing distance sensor\r\n");
   333ee:	4b17      	ldr	r3, [pc, #92]	; (3344c <vApplicationDaemonTaskStartupHook+0xd8>)
   333f0:	0018      	movs	r0, r3
   333f2:	4b0a      	ldr	r3, [pc, #40]	; (3341c <vApplicationDaemonTaskStartupHook+0xa8>)
   333f4:	4798      	blx	r3
    InitializeDistanceSensor();
   333f6:	4b16      	ldr	r3, [pc, #88]	; (33450 <vApplicationDaemonTaskStartupHook+0xdc>)
   333f8:	4798      	blx	r3
    SerialConsoleWriteString("Distance sensor initialized\r\n");
   333fa:	4b16      	ldr	r3, [pc, #88]	; (33454 <vApplicationDaemonTaskStartupHook+0xe0>)
   333fc:	0018      	movs	r0, r3
   333fe:	4b07      	ldr	r3, [pc, #28]	; (3341c <vApplicationDaemonTaskStartupHook+0xa8>)
   33400:	4798      	blx	r3
	//InitializeGPSSensor();

    StartTasks();
   33402:	4b15      	ldr	r3, [pc, #84]	; (33458 <vApplicationDaemonTaskStartupHook+0xe4>)
   33404:	4798      	blx	r3

    vTaskSuspend(daemonTaskHandle);
   33406:	4b15      	ldr	r3, [pc, #84]	; (3345c <vApplicationDaemonTaskStartupHook+0xe8>)
   33408:	681b      	ldr	r3, [r3, #0]
   3340a:	0018      	movs	r0, r3
   3340c:	4b14      	ldr	r3, [pc, #80]	; (33460 <vApplicationDaemonTaskStartupHook+0xec>)
   3340e:	4798      	blx	r3
}
   33410:	46c0      	nop			; (mov r8, r8)
   33412:	46bd      	mov	sp, r7
   33414:	b002      	add	sp, #8
   33416:	bd80      	pop	{r7, pc}
   33418:	0003ab84 	.word	0x0003ab84
   3341c:	0001ea85 	.word	0x0001ea85
   33420:	0003aba8 	.word	0x0003aba8
   33424:	00015095 	.word	0x00015095
   33428:	0003abc0 	.word	0x0003abc0
   3342c:	0003abe4 	.word	0x0003abe4
   33430:	000162bd 	.word	0x000162bd
   33434:	00015e01 	.word	0x00015e01
   33438:	0003ac00 	.word	0x0003ac00
   3343c:	0003ac14 	.word	0x0003ac14
   33440:	000162cd 	.word	0x000162cd
   33444:	0003ac24 	.word	0x0003ac24
   33448:	0003ac38 	.word	0x0003ac38
   3344c:	0003ac54 	.word	0x0003ac54
   33450:	00014a45 	.word	0x00014a45
   33454:	0003ac74 	.word	0x0003ac74
   33458:	00033465 	.word	0x00033465
   3345c:	20004718 	.word	0x20004718
   33460:	0001cf11 	.word	0x0001cf11

00033464 <StartTasks>:
 * @details
 * @param[in]        None
 * @return           None
 */
static void StartTasks(void)
{
   33464:	b590      	push	{r4, r7, lr}
   33466:	b083      	sub	sp, #12
   33468:	af02      	add	r7, sp, #8
    snprintf(bufferPrint, 64, "Heap before starting tasks: %d", xPortGetFreeHeapSize());
   3346a:	4b44      	ldr	r3, [pc, #272]	; (3357c <StartTasks+0x118>)
   3346c:	4798      	blx	r3
   3346e:	0003      	movs	r3, r0
   33470:	4a43      	ldr	r2, [pc, #268]	; (33580 <StartTasks+0x11c>)
   33472:	4844      	ldr	r0, [pc, #272]	; (33584 <StartTasks+0x120>)
   33474:	2140      	movs	r1, #64	; 0x40
   33476:	4c44      	ldr	r4, [pc, #272]	; (33588 <StartTasks+0x124>)
   33478:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   3347a:	4b42      	ldr	r3, [pc, #264]	; (33584 <StartTasks+0x120>)
   3347c:	0018      	movs	r0, r3
   3347e:	4b43      	ldr	r3, [pc, #268]	; (3358c <StartTasks+0x128>)
   33480:	4798      	blx	r3

    // Initialize Tasks here

    if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   33482:	23c8      	movs	r3, #200	; 0xc8
   33484:	005a      	lsls	r2, r3, #1
   33486:	4942      	ldr	r1, [pc, #264]	; (33590 <StartTasks+0x12c>)
   33488:	4842      	ldr	r0, [pc, #264]	; (33594 <StartTasks+0x130>)
   3348a:	4b43      	ldr	r3, [pc, #268]	; (33598 <StartTasks+0x134>)
   3348c:	9301      	str	r3, [sp, #4]
   3348e:	2304      	movs	r3, #4
   33490:	9300      	str	r3, [sp, #0]
   33492:	2300      	movs	r3, #0
   33494:	4c41      	ldr	r4, [pc, #260]	; (3359c <StartTasks+0x138>)
   33496:	47a0      	blx	r4
   33498:	0003      	movs	r3, r0
   3349a:	2b01      	cmp	r3, #1
   3349c:	d003      	beq.n	334a6 <StartTasks+0x42>
        SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   3349e:	4b40      	ldr	r3, [pc, #256]	; (335a0 <StartTasks+0x13c>)
   334a0:	0018      	movs	r0, r3
   334a2:	4b3a      	ldr	r3, [pc, #232]	; (3358c <StartTasks+0x128>)
   334a4:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n\r\n", xPortGetFreeHeapSize());
   334a6:	4b35      	ldr	r3, [pc, #212]	; (3357c <StartTasks+0x118>)
   334a8:	4798      	blx	r3
   334aa:	0003      	movs	r3, r0
   334ac:	4a3d      	ldr	r2, [pc, #244]	; (335a4 <StartTasks+0x140>)
   334ae:	4835      	ldr	r0, [pc, #212]	; (33584 <StartTasks+0x120>)
   334b0:	2140      	movs	r1, #64	; 0x40
   334b2:	4c35      	ldr	r4, [pc, #212]	; (33588 <StartTasks+0x124>)
   334b4:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   334b6:	4b33      	ldr	r3, [pc, #204]	; (33584 <StartTasks+0x120>)
   334b8:	0018      	movs	r0, r3
   334ba:	4b34      	ldr	r3, [pc, #208]	; (3358c <StartTasks+0x128>)
   334bc:	4798      	blx	r3

    if (xTaskCreate(vUiHandlerTask, "UI Task", UI_TASK_SIZE, NULL, UI_TASK_PRIORITY, &uiTaskHandle) != pdPASS) {
   334be:	23c8      	movs	r3, #200	; 0xc8
   334c0:	005a      	lsls	r2, r3, #1
   334c2:	4939      	ldr	r1, [pc, #228]	; (335a8 <StartTasks+0x144>)
   334c4:	4839      	ldr	r0, [pc, #228]	; (335ac <StartTasks+0x148>)
   334c6:	4b3a      	ldr	r3, [pc, #232]	; (335b0 <StartTasks+0x14c>)
   334c8:	9301      	str	r3, [sp, #4]
   334ca:	2304      	movs	r3, #4
   334cc:	9300      	str	r3, [sp, #0]
   334ce:	2300      	movs	r3, #0
   334d0:	4c32      	ldr	r4, [pc, #200]	; (3359c <StartTasks+0x138>)
   334d2:	47a0      	blx	r4
   334d4:	0003      	movs	r3, r0
   334d6:	2b01      	cmp	r3, #1
   334d8:	d003      	beq.n	334e2 <StartTasks+0x7e>
        SerialConsoleWriteString("ERR: UI task could not be initialized!\r\n");
   334da:	4b36      	ldr	r3, [pc, #216]	; (335b4 <StartTasks+0x150>)
   334dc:	0018      	movs	r0, r3
   334de:	4b2b      	ldr	r3, [pc, #172]	; (3358c <StartTasks+0x128>)
   334e0:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting UI Task: %d\r\n\r\n", xPortGetFreeHeapSize());
   334e2:	4b26      	ldr	r3, [pc, #152]	; (3357c <StartTasks+0x118>)
   334e4:	4798      	blx	r3
   334e6:	0003      	movs	r3, r0
   334e8:	4a33      	ldr	r2, [pc, #204]	; (335b8 <StartTasks+0x154>)
   334ea:	4826      	ldr	r0, [pc, #152]	; (33584 <StartTasks+0x120>)
   334ec:	2140      	movs	r1, #64	; 0x40
   334ee:	4c26      	ldr	r4, [pc, #152]	; (33588 <StartTasks+0x124>)
   334f0:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   334f2:	4b24      	ldr	r3, [pc, #144]	; (33584 <StartTasks+0x120>)
   334f4:	0018      	movs	r0, r3
   334f6:	4b25      	ldr	r3, [pc, #148]	; (3358c <StartTasks+0x128>)
   334f8:	4798      	blx	r3

    if (xTaskCreate(vControlHandlerTask, "Control Task", CONTROL_TASK_SIZE, NULL, CONTROL_TASK_PRIORITY, &controlTaskHandle) != pdPASS) {
   334fa:	2380      	movs	r3, #128	; 0x80
   334fc:	005a      	lsls	r2, r3, #1
   334fe:	492f      	ldr	r1, [pc, #188]	; (335bc <StartTasks+0x158>)
   33500:	482f      	ldr	r0, [pc, #188]	; (335c0 <StartTasks+0x15c>)
   33502:	4b30      	ldr	r3, [pc, #192]	; (335c4 <StartTasks+0x160>)
   33504:	9301      	str	r3, [sp, #4]
   33506:	2304      	movs	r3, #4
   33508:	9300      	str	r3, [sp, #0]
   3350a:	2300      	movs	r3, #0
   3350c:	4c23      	ldr	r4, [pc, #140]	; (3359c <StartTasks+0x138>)
   3350e:	47a0      	blx	r4
   33510:	0003      	movs	r3, r0
   33512:	2b01      	cmp	r3, #1
   33514:	d003      	beq.n	3351e <StartTasks+0xba>
        SerialConsoleWriteString("ERR: Control task could not be initialized!\r\n");
   33516:	4b2c      	ldr	r3, [pc, #176]	; (335c8 <StartTasks+0x164>)
   33518:	0018      	movs	r0, r3
   3351a:	4b1c      	ldr	r3, [pc, #112]	; (3358c <StartTasks+0x128>)
   3351c:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting Control Task: %d\r\n\r\n", xPortGetFreeHeapSize());
   3351e:	4b17      	ldr	r3, [pc, #92]	; (3357c <StartTasks+0x118>)
   33520:	4798      	blx	r3
   33522:	0003      	movs	r3, r0
   33524:	4a29      	ldr	r2, [pc, #164]	; (335cc <StartTasks+0x168>)
   33526:	4817      	ldr	r0, [pc, #92]	; (33584 <StartTasks+0x120>)
   33528:	2140      	movs	r1, #64	; 0x40
   3352a:	4c17      	ldr	r4, [pc, #92]	; (33588 <StartTasks+0x124>)
   3352c:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   3352e:	4b15      	ldr	r3, [pc, #84]	; (33584 <StartTasks+0x120>)
   33530:	0018      	movs	r0, r3
   33532:	4b16      	ldr	r3, [pc, #88]	; (3358c <StartTasks+0x128>)
   33534:	4798      	blx	r3
	
	if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   33536:	23fa      	movs	r3, #250	; 0xfa
   33538:	009a      	lsls	r2, r3, #2
   3353a:	4925      	ldr	r1, [pc, #148]	; (335d0 <StartTasks+0x16c>)
   3353c:	4825      	ldr	r0, [pc, #148]	; (335d4 <StartTasks+0x170>)
   3353e:	4b26      	ldr	r3, [pc, #152]	; (335d8 <StartTasks+0x174>)
   33540:	9301      	str	r3, [sp, #4]
   33542:	2303      	movs	r3, #3
   33544:	9300      	str	r3, [sp, #0]
   33546:	2300      	movs	r3, #0
   33548:	4c14      	ldr	r4, [pc, #80]	; (3359c <StartTasks+0x138>)
   3354a:	47a0      	blx	r4
   3354c:	0003      	movs	r3, r0
   3354e:	2b01      	cmp	r3, #1
   33550:	d003      	beq.n	3355a <StartTasks+0xf6>
		SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   33552:	4b22      	ldr	r3, [pc, #136]	; (335dc <StartTasks+0x178>)
   33554:	0018      	movs	r0, r3
   33556:	4b0d      	ldr	r3, [pc, #52]	; (3358c <StartTasks+0x128>)
   33558:	4798      	blx	r3
	}
	snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
   3355a:	4b08      	ldr	r3, [pc, #32]	; (3357c <StartTasks+0x118>)
   3355c:	4798      	blx	r3
   3355e:	0003      	movs	r3, r0
   33560:	4a1f      	ldr	r2, [pc, #124]	; (335e0 <StartTasks+0x17c>)
   33562:	4808      	ldr	r0, [pc, #32]	; (33584 <StartTasks+0x120>)
   33564:	2140      	movs	r1, #64	; 0x40
   33566:	4c08      	ldr	r4, [pc, #32]	; (33588 <StartTasks+0x124>)
   33568:	47a0      	blx	r4
	SerialConsoleWriteString(bufferPrint);
   3356a:	4b06      	ldr	r3, [pc, #24]	; (33584 <StartTasks+0x120>)
   3356c:	0018      	movs	r0, r3
   3356e:	4b07      	ldr	r3, [pc, #28]	; (3358c <StartTasks+0x128>)
   33570:	4798      	blx	r3
}
   33572:	46c0      	nop			; (mov r8, r8)
   33574:	46bd      	mov	sp, r7
   33576:	b001      	add	sp, #4
   33578:	bd90      	pop	{r4, r7, pc}
   3357a:	46c0      	nop			; (mov r8, r8)
   3357c:	0001b051 	.word	0x0001b051
   33580:	0003ac94 	.word	0x0003ac94
   33584:	20005ca0 	.word	0x20005ca0
   33588:	00035849 	.word	0x00035849
   3358c:	0001ea85 	.word	0x0001ea85
   33590:	0003acb4 	.word	0x0003acb4
   33594:	00013f71 	.word	0x00013f71
   33598:	20004714 	.word	0x20004714
   3359c:	0001ca95 	.word	0x0001ca95
   335a0:	0003acc0 	.word	0x0003acc0
   335a4:	0003acec 	.word	0x0003acec
   335a8:	0003ad0c 	.word	0x0003ad0c
   335ac:	00016589 	.word	0x00016589
   335b0:	20004720 	.word	0x20004720
   335b4:	0003ad14 	.word	0x0003ad14
   335b8:	0003ad40 	.word	0x0003ad40
   335bc:	0003ad64 	.word	0x0003ad64
   335c0:	000146d1 	.word	0x000146d1
   335c4:	20004724 	.word	0x20004724
   335c8:	0003ad74 	.word	0x0003ad74
   335cc:	0003ada4 	.word	0x0003ada4
   335d0:	0003add0 	.word	0x0003add0
   335d4:	00017e95 	.word	0x00017e95
   335d8:	2000471c 	.word	0x2000471c
   335dc:	0003addc 	.word	0x0003addc
   335e0:	0003ae08 	.word	0x0003ae08

000335e4 <vApplicationMallocFailedHook>:



void vApplicationMallocFailedHook(void)
{
   335e4:	b580      	push	{r7, lr}
   335e6:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   335e8:	4b02      	ldr	r3, [pc, #8]	; (335f4 <vApplicationMallocFailedHook+0x10>)
   335ea:	0018      	movs	r0, r3
   335ec:	4b02      	ldr	r3, [pc, #8]	; (335f8 <vApplicationMallocFailedHook+0x14>)
   335ee:	4798      	blx	r3
    while (1)
   335f0:	e7fe      	b.n	335f0 <vApplicationMallocFailedHook+0xc>
   335f2:	46c0      	nop			; (mov r8, r8)
   335f4:	0003ae28 	.word	0x0003ae28
   335f8:	0001ea85 	.word	0x0001ea85

000335fc <vApplicationStackOverflowHook>:
        ;
}

void vApplicationStackOverflowHook(void)
{
   335fc:	b580      	push	{r7, lr}
   335fe:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   33600:	4b02      	ldr	r3, [pc, #8]	; (3360c <vApplicationStackOverflowHook+0x10>)
   33602:	0018      	movs	r0, r3
   33604:	4b02      	ldr	r3, [pc, #8]	; (33610 <vApplicationStackOverflowHook+0x14>)
   33606:	4798      	blx	r3
    while (1)
   33608:	e7fe      	b.n	33608 <vApplicationStackOverflowHook+0xc>
   3360a:	46c0      	nop			; (mov r8, r8)
   3360c:	0003ae54 	.word	0x0003ae54
   33610:	0001ea85 	.word	0x0001ea85

00033614 <__udivsi3>:
   33614:	2200      	movs	r2, #0
   33616:	0843      	lsrs	r3, r0, #1
   33618:	428b      	cmp	r3, r1
   3361a:	d374      	bcc.n	33706 <__udivsi3+0xf2>
   3361c:	0903      	lsrs	r3, r0, #4
   3361e:	428b      	cmp	r3, r1
   33620:	d35f      	bcc.n	336e2 <__udivsi3+0xce>
   33622:	0a03      	lsrs	r3, r0, #8
   33624:	428b      	cmp	r3, r1
   33626:	d344      	bcc.n	336b2 <__udivsi3+0x9e>
   33628:	0b03      	lsrs	r3, r0, #12
   3362a:	428b      	cmp	r3, r1
   3362c:	d328      	bcc.n	33680 <__udivsi3+0x6c>
   3362e:	0c03      	lsrs	r3, r0, #16
   33630:	428b      	cmp	r3, r1
   33632:	d30d      	bcc.n	33650 <__udivsi3+0x3c>
   33634:	22ff      	movs	r2, #255	; 0xff
   33636:	0209      	lsls	r1, r1, #8
   33638:	ba12      	rev	r2, r2
   3363a:	0c03      	lsrs	r3, r0, #16
   3363c:	428b      	cmp	r3, r1
   3363e:	d302      	bcc.n	33646 <__udivsi3+0x32>
   33640:	1212      	asrs	r2, r2, #8
   33642:	0209      	lsls	r1, r1, #8
   33644:	d065      	beq.n	33712 <__udivsi3+0xfe>
   33646:	0b03      	lsrs	r3, r0, #12
   33648:	428b      	cmp	r3, r1
   3364a:	d319      	bcc.n	33680 <__udivsi3+0x6c>
   3364c:	e000      	b.n	33650 <__udivsi3+0x3c>
   3364e:	0a09      	lsrs	r1, r1, #8
   33650:	0bc3      	lsrs	r3, r0, #15
   33652:	428b      	cmp	r3, r1
   33654:	d301      	bcc.n	3365a <__udivsi3+0x46>
   33656:	03cb      	lsls	r3, r1, #15
   33658:	1ac0      	subs	r0, r0, r3
   3365a:	4152      	adcs	r2, r2
   3365c:	0b83      	lsrs	r3, r0, #14
   3365e:	428b      	cmp	r3, r1
   33660:	d301      	bcc.n	33666 <__udivsi3+0x52>
   33662:	038b      	lsls	r3, r1, #14
   33664:	1ac0      	subs	r0, r0, r3
   33666:	4152      	adcs	r2, r2
   33668:	0b43      	lsrs	r3, r0, #13
   3366a:	428b      	cmp	r3, r1
   3366c:	d301      	bcc.n	33672 <__udivsi3+0x5e>
   3366e:	034b      	lsls	r3, r1, #13
   33670:	1ac0      	subs	r0, r0, r3
   33672:	4152      	adcs	r2, r2
   33674:	0b03      	lsrs	r3, r0, #12
   33676:	428b      	cmp	r3, r1
   33678:	d301      	bcc.n	3367e <__udivsi3+0x6a>
   3367a:	030b      	lsls	r3, r1, #12
   3367c:	1ac0      	subs	r0, r0, r3
   3367e:	4152      	adcs	r2, r2
   33680:	0ac3      	lsrs	r3, r0, #11
   33682:	428b      	cmp	r3, r1
   33684:	d301      	bcc.n	3368a <__udivsi3+0x76>
   33686:	02cb      	lsls	r3, r1, #11
   33688:	1ac0      	subs	r0, r0, r3
   3368a:	4152      	adcs	r2, r2
   3368c:	0a83      	lsrs	r3, r0, #10
   3368e:	428b      	cmp	r3, r1
   33690:	d301      	bcc.n	33696 <__udivsi3+0x82>
   33692:	028b      	lsls	r3, r1, #10
   33694:	1ac0      	subs	r0, r0, r3
   33696:	4152      	adcs	r2, r2
   33698:	0a43      	lsrs	r3, r0, #9
   3369a:	428b      	cmp	r3, r1
   3369c:	d301      	bcc.n	336a2 <__udivsi3+0x8e>
   3369e:	024b      	lsls	r3, r1, #9
   336a0:	1ac0      	subs	r0, r0, r3
   336a2:	4152      	adcs	r2, r2
   336a4:	0a03      	lsrs	r3, r0, #8
   336a6:	428b      	cmp	r3, r1
   336a8:	d301      	bcc.n	336ae <__udivsi3+0x9a>
   336aa:	020b      	lsls	r3, r1, #8
   336ac:	1ac0      	subs	r0, r0, r3
   336ae:	4152      	adcs	r2, r2
   336b0:	d2cd      	bcs.n	3364e <__udivsi3+0x3a>
   336b2:	09c3      	lsrs	r3, r0, #7
   336b4:	428b      	cmp	r3, r1
   336b6:	d301      	bcc.n	336bc <__udivsi3+0xa8>
   336b8:	01cb      	lsls	r3, r1, #7
   336ba:	1ac0      	subs	r0, r0, r3
   336bc:	4152      	adcs	r2, r2
   336be:	0983      	lsrs	r3, r0, #6
   336c0:	428b      	cmp	r3, r1
   336c2:	d301      	bcc.n	336c8 <__udivsi3+0xb4>
   336c4:	018b      	lsls	r3, r1, #6
   336c6:	1ac0      	subs	r0, r0, r3
   336c8:	4152      	adcs	r2, r2
   336ca:	0943      	lsrs	r3, r0, #5
   336cc:	428b      	cmp	r3, r1
   336ce:	d301      	bcc.n	336d4 <__udivsi3+0xc0>
   336d0:	014b      	lsls	r3, r1, #5
   336d2:	1ac0      	subs	r0, r0, r3
   336d4:	4152      	adcs	r2, r2
   336d6:	0903      	lsrs	r3, r0, #4
   336d8:	428b      	cmp	r3, r1
   336da:	d301      	bcc.n	336e0 <__udivsi3+0xcc>
   336dc:	010b      	lsls	r3, r1, #4
   336de:	1ac0      	subs	r0, r0, r3
   336e0:	4152      	adcs	r2, r2
   336e2:	08c3      	lsrs	r3, r0, #3
   336e4:	428b      	cmp	r3, r1
   336e6:	d301      	bcc.n	336ec <__udivsi3+0xd8>
   336e8:	00cb      	lsls	r3, r1, #3
   336ea:	1ac0      	subs	r0, r0, r3
   336ec:	4152      	adcs	r2, r2
   336ee:	0883      	lsrs	r3, r0, #2
   336f0:	428b      	cmp	r3, r1
   336f2:	d301      	bcc.n	336f8 <__udivsi3+0xe4>
   336f4:	008b      	lsls	r3, r1, #2
   336f6:	1ac0      	subs	r0, r0, r3
   336f8:	4152      	adcs	r2, r2
   336fa:	0843      	lsrs	r3, r0, #1
   336fc:	428b      	cmp	r3, r1
   336fe:	d301      	bcc.n	33704 <__udivsi3+0xf0>
   33700:	004b      	lsls	r3, r1, #1
   33702:	1ac0      	subs	r0, r0, r3
   33704:	4152      	adcs	r2, r2
   33706:	1a41      	subs	r1, r0, r1
   33708:	d200      	bcs.n	3370c <__udivsi3+0xf8>
   3370a:	4601      	mov	r1, r0
   3370c:	4152      	adcs	r2, r2
   3370e:	4610      	mov	r0, r2
   33710:	4770      	bx	lr
   33712:	e7ff      	b.n	33714 <__udivsi3+0x100>
   33714:	b501      	push	{r0, lr}
   33716:	2000      	movs	r0, #0
   33718:	f000 f8f0 	bl	338fc <__aeabi_idiv0>
   3371c:	bd02      	pop	{r1, pc}
   3371e:	46c0      	nop			; (mov r8, r8)

00033720 <__aeabi_uidivmod>:
   33720:	2900      	cmp	r1, #0
   33722:	d0f7      	beq.n	33714 <__udivsi3+0x100>
   33724:	e776      	b.n	33614 <__udivsi3>
   33726:	4770      	bx	lr

00033728 <__divsi3>:
   33728:	4603      	mov	r3, r0
   3372a:	430b      	orrs	r3, r1
   3372c:	d47f      	bmi.n	3382e <__divsi3+0x106>
   3372e:	2200      	movs	r2, #0
   33730:	0843      	lsrs	r3, r0, #1
   33732:	428b      	cmp	r3, r1
   33734:	d374      	bcc.n	33820 <__divsi3+0xf8>
   33736:	0903      	lsrs	r3, r0, #4
   33738:	428b      	cmp	r3, r1
   3373a:	d35f      	bcc.n	337fc <__divsi3+0xd4>
   3373c:	0a03      	lsrs	r3, r0, #8
   3373e:	428b      	cmp	r3, r1
   33740:	d344      	bcc.n	337cc <__divsi3+0xa4>
   33742:	0b03      	lsrs	r3, r0, #12
   33744:	428b      	cmp	r3, r1
   33746:	d328      	bcc.n	3379a <__divsi3+0x72>
   33748:	0c03      	lsrs	r3, r0, #16
   3374a:	428b      	cmp	r3, r1
   3374c:	d30d      	bcc.n	3376a <__divsi3+0x42>
   3374e:	22ff      	movs	r2, #255	; 0xff
   33750:	0209      	lsls	r1, r1, #8
   33752:	ba12      	rev	r2, r2
   33754:	0c03      	lsrs	r3, r0, #16
   33756:	428b      	cmp	r3, r1
   33758:	d302      	bcc.n	33760 <__divsi3+0x38>
   3375a:	1212      	asrs	r2, r2, #8
   3375c:	0209      	lsls	r1, r1, #8
   3375e:	d065      	beq.n	3382c <__divsi3+0x104>
   33760:	0b03      	lsrs	r3, r0, #12
   33762:	428b      	cmp	r3, r1
   33764:	d319      	bcc.n	3379a <__divsi3+0x72>
   33766:	e000      	b.n	3376a <__divsi3+0x42>
   33768:	0a09      	lsrs	r1, r1, #8
   3376a:	0bc3      	lsrs	r3, r0, #15
   3376c:	428b      	cmp	r3, r1
   3376e:	d301      	bcc.n	33774 <__divsi3+0x4c>
   33770:	03cb      	lsls	r3, r1, #15
   33772:	1ac0      	subs	r0, r0, r3
   33774:	4152      	adcs	r2, r2
   33776:	0b83      	lsrs	r3, r0, #14
   33778:	428b      	cmp	r3, r1
   3377a:	d301      	bcc.n	33780 <__divsi3+0x58>
   3377c:	038b      	lsls	r3, r1, #14
   3377e:	1ac0      	subs	r0, r0, r3
   33780:	4152      	adcs	r2, r2
   33782:	0b43      	lsrs	r3, r0, #13
   33784:	428b      	cmp	r3, r1
   33786:	d301      	bcc.n	3378c <__divsi3+0x64>
   33788:	034b      	lsls	r3, r1, #13
   3378a:	1ac0      	subs	r0, r0, r3
   3378c:	4152      	adcs	r2, r2
   3378e:	0b03      	lsrs	r3, r0, #12
   33790:	428b      	cmp	r3, r1
   33792:	d301      	bcc.n	33798 <__divsi3+0x70>
   33794:	030b      	lsls	r3, r1, #12
   33796:	1ac0      	subs	r0, r0, r3
   33798:	4152      	adcs	r2, r2
   3379a:	0ac3      	lsrs	r3, r0, #11
   3379c:	428b      	cmp	r3, r1
   3379e:	d301      	bcc.n	337a4 <__divsi3+0x7c>
   337a0:	02cb      	lsls	r3, r1, #11
   337a2:	1ac0      	subs	r0, r0, r3
   337a4:	4152      	adcs	r2, r2
   337a6:	0a83      	lsrs	r3, r0, #10
   337a8:	428b      	cmp	r3, r1
   337aa:	d301      	bcc.n	337b0 <__divsi3+0x88>
   337ac:	028b      	lsls	r3, r1, #10
   337ae:	1ac0      	subs	r0, r0, r3
   337b0:	4152      	adcs	r2, r2
   337b2:	0a43      	lsrs	r3, r0, #9
   337b4:	428b      	cmp	r3, r1
   337b6:	d301      	bcc.n	337bc <__divsi3+0x94>
   337b8:	024b      	lsls	r3, r1, #9
   337ba:	1ac0      	subs	r0, r0, r3
   337bc:	4152      	adcs	r2, r2
   337be:	0a03      	lsrs	r3, r0, #8
   337c0:	428b      	cmp	r3, r1
   337c2:	d301      	bcc.n	337c8 <__divsi3+0xa0>
   337c4:	020b      	lsls	r3, r1, #8
   337c6:	1ac0      	subs	r0, r0, r3
   337c8:	4152      	adcs	r2, r2
   337ca:	d2cd      	bcs.n	33768 <__divsi3+0x40>
   337cc:	09c3      	lsrs	r3, r0, #7
   337ce:	428b      	cmp	r3, r1
   337d0:	d301      	bcc.n	337d6 <__divsi3+0xae>
   337d2:	01cb      	lsls	r3, r1, #7
   337d4:	1ac0      	subs	r0, r0, r3
   337d6:	4152      	adcs	r2, r2
   337d8:	0983      	lsrs	r3, r0, #6
   337da:	428b      	cmp	r3, r1
   337dc:	d301      	bcc.n	337e2 <__divsi3+0xba>
   337de:	018b      	lsls	r3, r1, #6
   337e0:	1ac0      	subs	r0, r0, r3
   337e2:	4152      	adcs	r2, r2
   337e4:	0943      	lsrs	r3, r0, #5
   337e6:	428b      	cmp	r3, r1
   337e8:	d301      	bcc.n	337ee <__divsi3+0xc6>
   337ea:	014b      	lsls	r3, r1, #5
   337ec:	1ac0      	subs	r0, r0, r3
   337ee:	4152      	adcs	r2, r2
   337f0:	0903      	lsrs	r3, r0, #4
   337f2:	428b      	cmp	r3, r1
   337f4:	d301      	bcc.n	337fa <__divsi3+0xd2>
   337f6:	010b      	lsls	r3, r1, #4
   337f8:	1ac0      	subs	r0, r0, r3
   337fa:	4152      	adcs	r2, r2
   337fc:	08c3      	lsrs	r3, r0, #3
   337fe:	428b      	cmp	r3, r1
   33800:	d301      	bcc.n	33806 <__divsi3+0xde>
   33802:	00cb      	lsls	r3, r1, #3
   33804:	1ac0      	subs	r0, r0, r3
   33806:	4152      	adcs	r2, r2
   33808:	0883      	lsrs	r3, r0, #2
   3380a:	428b      	cmp	r3, r1
   3380c:	d301      	bcc.n	33812 <__divsi3+0xea>
   3380e:	008b      	lsls	r3, r1, #2
   33810:	1ac0      	subs	r0, r0, r3
   33812:	4152      	adcs	r2, r2
   33814:	0843      	lsrs	r3, r0, #1
   33816:	428b      	cmp	r3, r1
   33818:	d301      	bcc.n	3381e <__divsi3+0xf6>
   3381a:	004b      	lsls	r3, r1, #1
   3381c:	1ac0      	subs	r0, r0, r3
   3381e:	4152      	adcs	r2, r2
   33820:	1a41      	subs	r1, r0, r1
   33822:	d200      	bcs.n	33826 <__divsi3+0xfe>
   33824:	4601      	mov	r1, r0
   33826:	4152      	adcs	r2, r2
   33828:	4610      	mov	r0, r2
   3382a:	4770      	bx	lr
   3382c:	e05d      	b.n	338ea <__divsi3+0x1c2>
   3382e:	0fca      	lsrs	r2, r1, #31
   33830:	d000      	beq.n	33834 <__divsi3+0x10c>
   33832:	4249      	negs	r1, r1
   33834:	1003      	asrs	r3, r0, #32
   33836:	d300      	bcc.n	3383a <__divsi3+0x112>
   33838:	4240      	negs	r0, r0
   3383a:	4053      	eors	r3, r2
   3383c:	2200      	movs	r2, #0
   3383e:	469c      	mov	ip, r3
   33840:	0903      	lsrs	r3, r0, #4
   33842:	428b      	cmp	r3, r1
   33844:	d32d      	bcc.n	338a2 <__divsi3+0x17a>
   33846:	0a03      	lsrs	r3, r0, #8
   33848:	428b      	cmp	r3, r1
   3384a:	d312      	bcc.n	33872 <__divsi3+0x14a>
   3384c:	22fc      	movs	r2, #252	; 0xfc
   3384e:	0189      	lsls	r1, r1, #6
   33850:	ba12      	rev	r2, r2
   33852:	0a03      	lsrs	r3, r0, #8
   33854:	428b      	cmp	r3, r1
   33856:	d30c      	bcc.n	33872 <__divsi3+0x14a>
   33858:	0189      	lsls	r1, r1, #6
   3385a:	1192      	asrs	r2, r2, #6
   3385c:	428b      	cmp	r3, r1
   3385e:	d308      	bcc.n	33872 <__divsi3+0x14a>
   33860:	0189      	lsls	r1, r1, #6
   33862:	1192      	asrs	r2, r2, #6
   33864:	428b      	cmp	r3, r1
   33866:	d304      	bcc.n	33872 <__divsi3+0x14a>
   33868:	0189      	lsls	r1, r1, #6
   3386a:	d03a      	beq.n	338e2 <__divsi3+0x1ba>
   3386c:	1192      	asrs	r2, r2, #6
   3386e:	e000      	b.n	33872 <__divsi3+0x14a>
   33870:	0989      	lsrs	r1, r1, #6
   33872:	09c3      	lsrs	r3, r0, #7
   33874:	428b      	cmp	r3, r1
   33876:	d301      	bcc.n	3387c <__divsi3+0x154>
   33878:	01cb      	lsls	r3, r1, #7
   3387a:	1ac0      	subs	r0, r0, r3
   3387c:	4152      	adcs	r2, r2
   3387e:	0983      	lsrs	r3, r0, #6
   33880:	428b      	cmp	r3, r1
   33882:	d301      	bcc.n	33888 <__divsi3+0x160>
   33884:	018b      	lsls	r3, r1, #6
   33886:	1ac0      	subs	r0, r0, r3
   33888:	4152      	adcs	r2, r2
   3388a:	0943      	lsrs	r3, r0, #5
   3388c:	428b      	cmp	r3, r1
   3388e:	d301      	bcc.n	33894 <__divsi3+0x16c>
   33890:	014b      	lsls	r3, r1, #5
   33892:	1ac0      	subs	r0, r0, r3
   33894:	4152      	adcs	r2, r2
   33896:	0903      	lsrs	r3, r0, #4
   33898:	428b      	cmp	r3, r1
   3389a:	d301      	bcc.n	338a0 <__divsi3+0x178>
   3389c:	010b      	lsls	r3, r1, #4
   3389e:	1ac0      	subs	r0, r0, r3
   338a0:	4152      	adcs	r2, r2
   338a2:	08c3      	lsrs	r3, r0, #3
   338a4:	428b      	cmp	r3, r1
   338a6:	d301      	bcc.n	338ac <__divsi3+0x184>
   338a8:	00cb      	lsls	r3, r1, #3
   338aa:	1ac0      	subs	r0, r0, r3
   338ac:	4152      	adcs	r2, r2
   338ae:	0883      	lsrs	r3, r0, #2
   338b0:	428b      	cmp	r3, r1
   338b2:	d301      	bcc.n	338b8 <__divsi3+0x190>
   338b4:	008b      	lsls	r3, r1, #2
   338b6:	1ac0      	subs	r0, r0, r3
   338b8:	4152      	adcs	r2, r2
   338ba:	d2d9      	bcs.n	33870 <__divsi3+0x148>
   338bc:	0843      	lsrs	r3, r0, #1
   338be:	428b      	cmp	r3, r1
   338c0:	d301      	bcc.n	338c6 <__divsi3+0x19e>
   338c2:	004b      	lsls	r3, r1, #1
   338c4:	1ac0      	subs	r0, r0, r3
   338c6:	4152      	adcs	r2, r2
   338c8:	1a41      	subs	r1, r0, r1
   338ca:	d200      	bcs.n	338ce <__divsi3+0x1a6>
   338cc:	4601      	mov	r1, r0
   338ce:	4663      	mov	r3, ip
   338d0:	4152      	adcs	r2, r2
   338d2:	105b      	asrs	r3, r3, #1
   338d4:	4610      	mov	r0, r2
   338d6:	d301      	bcc.n	338dc <__divsi3+0x1b4>
   338d8:	4240      	negs	r0, r0
   338da:	2b00      	cmp	r3, #0
   338dc:	d500      	bpl.n	338e0 <__divsi3+0x1b8>
   338de:	4249      	negs	r1, r1
   338e0:	4770      	bx	lr
   338e2:	4663      	mov	r3, ip
   338e4:	105b      	asrs	r3, r3, #1
   338e6:	d300      	bcc.n	338ea <__divsi3+0x1c2>
   338e8:	4240      	negs	r0, r0
   338ea:	b501      	push	{r0, lr}
   338ec:	2000      	movs	r0, #0
   338ee:	f000 f805 	bl	338fc <__aeabi_idiv0>
   338f2:	bd02      	pop	{r1, pc}

000338f4 <__aeabi_idivmod>:
   338f4:	2900      	cmp	r1, #0
   338f6:	d0f8      	beq.n	338ea <__divsi3+0x1c2>
   338f8:	e716      	b.n	33728 <__divsi3>
   338fa:	4770      	bx	lr

000338fc <__aeabi_idiv0>:
   338fc:	4770      	bx	lr
   338fe:	46c0      	nop			; (mov r8, r8)

00033900 <__aeabi_lmul>:
   33900:	b5f0      	push	{r4, r5, r6, r7, lr}
   33902:	46ce      	mov	lr, r9
   33904:	4647      	mov	r7, r8
   33906:	0415      	lsls	r5, r2, #16
   33908:	0c2d      	lsrs	r5, r5, #16
   3390a:	002e      	movs	r6, r5
   3390c:	b580      	push	{r7, lr}
   3390e:	0407      	lsls	r7, r0, #16
   33910:	0c14      	lsrs	r4, r2, #16
   33912:	0c3f      	lsrs	r7, r7, #16
   33914:	4699      	mov	r9, r3
   33916:	0c03      	lsrs	r3, r0, #16
   33918:	437e      	muls	r6, r7
   3391a:	435d      	muls	r5, r3
   3391c:	4367      	muls	r7, r4
   3391e:	4363      	muls	r3, r4
   33920:	197f      	adds	r7, r7, r5
   33922:	0c34      	lsrs	r4, r6, #16
   33924:	19e4      	adds	r4, r4, r7
   33926:	469c      	mov	ip, r3
   33928:	42a5      	cmp	r5, r4
   3392a:	d903      	bls.n	33934 <__aeabi_lmul+0x34>
   3392c:	2380      	movs	r3, #128	; 0x80
   3392e:	025b      	lsls	r3, r3, #9
   33930:	4698      	mov	r8, r3
   33932:	44c4      	add	ip, r8
   33934:	464b      	mov	r3, r9
   33936:	4351      	muls	r1, r2
   33938:	4343      	muls	r3, r0
   3393a:	0436      	lsls	r6, r6, #16
   3393c:	0c36      	lsrs	r6, r6, #16
   3393e:	0c25      	lsrs	r5, r4, #16
   33940:	0424      	lsls	r4, r4, #16
   33942:	4465      	add	r5, ip
   33944:	19a4      	adds	r4, r4, r6
   33946:	1859      	adds	r1, r3, r1
   33948:	1949      	adds	r1, r1, r5
   3394a:	0020      	movs	r0, r4
   3394c:	bc0c      	pop	{r2, r3}
   3394e:	4690      	mov	r8, r2
   33950:	4699      	mov	r9, r3
   33952:	bdf0      	pop	{r4, r5, r6, r7, pc}

00033954 <__aeabi_fmul>:
   33954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33956:	4657      	mov	r7, sl
   33958:	464e      	mov	r6, r9
   3395a:	4645      	mov	r5, r8
   3395c:	46de      	mov	lr, fp
   3395e:	b5e0      	push	{r5, r6, r7, lr}
   33960:	0247      	lsls	r7, r0, #9
   33962:	0046      	lsls	r6, r0, #1
   33964:	4688      	mov	r8, r1
   33966:	0a7f      	lsrs	r7, r7, #9
   33968:	0e36      	lsrs	r6, r6, #24
   3396a:	0fc4      	lsrs	r4, r0, #31
   3396c:	2e00      	cmp	r6, #0
   3396e:	d047      	beq.n	33a00 <__aeabi_fmul+0xac>
   33970:	2eff      	cmp	r6, #255	; 0xff
   33972:	d024      	beq.n	339be <__aeabi_fmul+0x6a>
   33974:	00fb      	lsls	r3, r7, #3
   33976:	2780      	movs	r7, #128	; 0x80
   33978:	04ff      	lsls	r7, r7, #19
   3397a:	431f      	orrs	r7, r3
   3397c:	2300      	movs	r3, #0
   3397e:	4699      	mov	r9, r3
   33980:	469a      	mov	sl, r3
   33982:	3e7f      	subs	r6, #127	; 0x7f
   33984:	4643      	mov	r3, r8
   33986:	025d      	lsls	r5, r3, #9
   33988:	0058      	lsls	r0, r3, #1
   3398a:	0fdb      	lsrs	r3, r3, #31
   3398c:	0a6d      	lsrs	r5, r5, #9
   3398e:	0e00      	lsrs	r0, r0, #24
   33990:	4698      	mov	r8, r3
   33992:	d043      	beq.n	33a1c <__aeabi_fmul+0xc8>
   33994:	28ff      	cmp	r0, #255	; 0xff
   33996:	d03b      	beq.n	33a10 <__aeabi_fmul+0xbc>
   33998:	00eb      	lsls	r3, r5, #3
   3399a:	2580      	movs	r5, #128	; 0x80
   3399c:	2200      	movs	r2, #0
   3399e:	04ed      	lsls	r5, r5, #19
   339a0:	431d      	orrs	r5, r3
   339a2:	387f      	subs	r0, #127	; 0x7f
   339a4:	1836      	adds	r6, r6, r0
   339a6:	1c73      	adds	r3, r6, #1
   339a8:	4641      	mov	r1, r8
   339aa:	469b      	mov	fp, r3
   339ac:	464b      	mov	r3, r9
   339ae:	4061      	eors	r1, r4
   339b0:	4313      	orrs	r3, r2
   339b2:	2b0f      	cmp	r3, #15
   339b4:	d864      	bhi.n	33a80 <__aeabi_fmul+0x12c>
   339b6:	4875      	ldr	r0, [pc, #468]	; (33b8c <__aeabi_fmul+0x238>)
   339b8:	009b      	lsls	r3, r3, #2
   339ba:	58c3      	ldr	r3, [r0, r3]
   339bc:	469f      	mov	pc, r3
   339be:	2f00      	cmp	r7, #0
   339c0:	d142      	bne.n	33a48 <__aeabi_fmul+0xf4>
   339c2:	2308      	movs	r3, #8
   339c4:	4699      	mov	r9, r3
   339c6:	3b06      	subs	r3, #6
   339c8:	26ff      	movs	r6, #255	; 0xff
   339ca:	469a      	mov	sl, r3
   339cc:	e7da      	b.n	33984 <__aeabi_fmul+0x30>
   339ce:	4641      	mov	r1, r8
   339d0:	2a02      	cmp	r2, #2
   339d2:	d028      	beq.n	33a26 <__aeabi_fmul+0xd2>
   339d4:	2a03      	cmp	r2, #3
   339d6:	d100      	bne.n	339da <__aeabi_fmul+0x86>
   339d8:	e0ce      	b.n	33b78 <__aeabi_fmul+0x224>
   339da:	2a01      	cmp	r2, #1
   339dc:	d000      	beq.n	339e0 <__aeabi_fmul+0x8c>
   339de:	e0ac      	b.n	33b3a <__aeabi_fmul+0x1e6>
   339e0:	4011      	ands	r1, r2
   339e2:	2000      	movs	r0, #0
   339e4:	2200      	movs	r2, #0
   339e6:	b2cc      	uxtb	r4, r1
   339e8:	0240      	lsls	r0, r0, #9
   339ea:	05d2      	lsls	r2, r2, #23
   339ec:	0a40      	lsrs	r0, r0, #9
   339ee:	07e4      	lsls	r4, r4, #31
   339f0:	4310      	orrs	r0, r2
   339f2:	4320      	orrs	r0, r4
   339f4:	bc3c      	pop	{r2, r3, r4, r5}
   339f6:	4690      	mov	r8, r2
   339f8:	4699      	mov	r9, r3
   339fa:	46a2      	mov	sl, r4
   339fc:	46ab      	mov	fp, r5
   339fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33a00:	2f00      	cmp	r7, #0
   33a02:	d115      	bne.n	33a30 <__aeabi_fmul+0xdc>
   33a04:	2304      	movs	r3, #4
   33a06:	4699      	mov	r9, r3
   33a08:	3b03      	subs	r3, #3
   33a0a:	2600      	movs	r6, #0
   33a0c:	469a      	mov	sl, r3
   33a0e:	e7b9      	b.n	33984 <__aeabi_fmul+0x30>
   33a10:	20ff      	movs	r0, #255	; 0xff
   33a12:	2202      	movs	r2, #2
   33a14:	2d00      	cmp	r5, #0
   33a16:	d0c5      	beq.n	339a4 <__aeabi_fmul+0x50>
   33a18:	2203      	movs	r2, #3
   33a1a:	e7c3      	b.n	339a4 <__aeabi_fmul+0x50>
   33a1c:	2d00      	cmp	r5, #0
   33a1e:	d119      	bne.n	33a54 <__aeabi_fmul+0x100>
   33a20:	2000      	movs	r0, #0
   33a22:	2201      	movs	r2, #1
   33a24:	e7be      	b.n	339a4 <__aeabi_fmul+0x50>
   33a26:	2401      	movs	r4, #1
   33a28:	22ff      	movs	r2, #255	; 0xff
   33a2a:	400c      	ands	r4, r1
   33a2c:	2000      	movs	r0, #0
   33a2e:	e7db      	b.n	339e8 <__aeabi_fmul+0x94>
   33a30:	0038      	movs	r0, r7
   33a32:	f001 fd65 	bl	35500 <__clzsi2>
   33a36:	2676      	movs	r6, #118	; 0x76
   33a38:	1f43      	subs	r3, r0, #5
   33a3a:	409f      	lsls	r7, r3
   33a3c:	2300      	movs	r3, #0
   33a3e:	4276      	negs	r6, r6
   33a40:	1a36      	subs	r6, r6, r0
   33a42:	4699      	mov	r9, r3
   33a44:	469a      	mov	sl, r3
   33a46:	e79d      	b.n	33984 <__aeabi_fmul+0x30>
   33a48:	230c      	movs	r3, #12
   33a4a:	4699      	mov	r9, r3
   33a4c:	3b09      	subs	r3, #9
   33a4e:	26ff      	movs	r6, #255	; 0xff
   33a50:	469a      	mov	sl, r3
   33a52:	e797      	b.n	33984 <__aeabi_fmul+0x30>
   33a54:	0028      	movs	r0, r5
   33a56:	f001 fd53 	bl	35500 <__clzsi2>
   33a5a:	1f43      	subs	r3, r0, #5
   33a5c:	409d      	lsls	r5, r3
   33a5e:	2376      	movs	r3, #118	; 0x76
   33a60:	425b      	negs	r3, r3
   33a62:	1a18      	subs	r0, r3, r0
   33a64:	2200      	movs	r2, #0
   33a66:	e79d      	b.n	339a4 <__aeabi_fmul+0x50>
   33a68:	2080      	movs	r0, #128	; 0x80
   33a6a:	2400      	movs	r4, #0
   33a6c:	03c0      	lsls	r0, r0, #15
   33a6e:	22ff      	movs	r2, #255	; 0xff
   33a70:	e7ba      	b.n	339e8 <__aeabi_fmul+0x94>
   33a72:	003d      	movs	r5, r7
   33a74:	4652      	mov	r2, sl
   33a76:	e7ab      	b.n	339d0 <__aeabi_fmul+0x7c>
   33a78:	003d      	movs	r5, r7
   33a7a:	0021      	movs	r1, r4
   33a7c:	4652      	mov	r2, sl
   33a7e:	e7a7      	b.n	339d0 <__aeabi_fmul+0x7c>
   33a80:	0c3b      	lsrs	r3, r7, #16
   33a82:	469c      	mov	ip, r3
   33a84:	042a      	lsls	r2, r5, #16
   33a86:	0c12      	lsrs	r2, r2, #16
   33a88:	0c2b      	lsrs	r3, r5, #16
   33a8a:	0014      	movs	r4, r2
   33a8c:	4660      	mov	r0, ip
   33a8e:	4665      	mov	r5, ip
   33a90:	043f      	lsls	r7, r7, #16
   33a92:	0c3f      	lsrs	r7, r7, #16
   33a94:	437c      	muls	r4, r7
   33a96:	4342      	muls	r2, r0
   33a98:	435d      	muls	r5, r3
   33a9a:	437b      	muls	r3, r7
   33a9c:	0c27      	lsrs	r7, r4, #16
   33a9e:	189b      	adds	r3, r3, r2
   33aa0:	18ff      	adds	r7, r7, r3
   33aa2:	42ba      	cmp	r2, r7
   33aa4:	d903      	bls.n	33aae <__aeabi_fmul+0x15a>
   33aa6:	2380      	movs	r3, #128	; 0x80
   33aa8:	025b      	lsls	r3, r3, #9
   33aaa:	469c      	mov	ip, r3
   33aac:	4465      	add	r5, ip
   33aae:	0424      	lsls	r4, r4, #16
   33ab0:	043a      	lsls	r2, r7, #16
   33ab2:	0c24      	lsrs	r4, r4, #16
   33ab4:	1912      	adds	r2, r2, r4
   33ab6:	0193      	lsls	r3, r2, #6
   33ab8:	1e5c      	subs	r4, r3, #1
   33aba:	41a3      	sbcs	r3, r4
   33abc:	0c3f      	lsrs	r7, r7, #16
   33abe:	0e92      	lsrs	r2, r2, #26
   33ac0:	197d      	adds	r5, r7, r5
   33ac2:	431a      	orrs	r2, r3
   33ac4:	01ad      	lsls	r5, r5, #6
   33ac6:	4315      	orrs	r5, r2
   33ac8:	012b      	lsls	r3, r5, #4
   33aca:	d504      	bpl.n	33ad6 <__aeabi_fmul+0x182>
   33acc:	2301      	movs	r3, #1
   33ace:	465e      	mov	r6, fp
   33ad0:	086a      	lsrs	r2, r5, #1
   33ad2:	401d      	ands	r5, r3
   33ad4:	4315      	orrs	r5, r2
   33ad6:	0032      	movs	r2, r6
   33ad8:	327f      	adds	r2, #127	; 0x7f
   33ada:	2a00      	cmp	r2, #0
   33adc:	dd25      	ble.n	33b2a <__aeabi_fmul+0x1d6>
   33ade:	076b      	lsls	r3, r5, #29
   33ae0:	d004      	beq.n	33aec <__aeabi_fmul+0x198>
   33ae2:	230f      	movs	r3, #15
   33ae4:	402b      	ands	r3, r5
   33ae6:	2b04      	cmp	r3, #4
   33ae8:	d000      	beq.n	33aec <__aeabi_fmul+0x198>
   33aea:	3504      	adds	r5, #4
   33aec:	012b      	lsls	r3, r5, #4
   33aee:	d503      	bpl.n	33af8 <__aeabi_fmul+0x1a4>
   33af0:	0032      	movs	r2, r6
   33af2:	4b27      	ldr	r3, [pc, #156]	; (33b90 <__aeabi_fmul+0x23c>)
   33af4:	3280      	adds	r2, #128	; 0x80
   33af6:	401d      	ands	r5, r3
   33af8:	2afe      	cmp	r2, #254	; 0xfe
   33afa:	dc94      	bgt.n	33a26 <__aeabi_fmul+0xd2>
   33afc:	2401      	movs	r4, #1
   33afe:	01a8      	lsls	r0, r5, #6
   33b00:	0a40      	lsrs	r0, r0, #9
   33b02:	b2d2      	uxtb	r2, r2
   33b04:	400c      	ands	r4, r1
   33b06:	e76f      	b.n	339e8 <__aeabi_fmul+0x94>
   33b08:	2080      	movs	r0, #128	; 0x80
   33b0a:	03c0      	lsls	r0, r0, #15
   33b0c:	4207      	tst	r7, r0
   33b0e:	d007      	beq.n	33b20 <__aeabi_fmul+0x1cc>
   33b10:	4205      	tst	r5, r0
   33b12:	d105      	bne.n	33b20 <__aeabi_fmul+0x1cc>
   33b14:	4328      	orrs	r0, r5
   33b16:	0240      	lsls	r0, r0, #9
   33b18:	0a40      	lsrs	r0, r0, #9
   33b1a:	4644      	mov	r4, r8
   33b1c:	22ff      	movs	r2, #255	; 0xff
   33b1e:	e763      	b.n	339e8 <__aeabi_fmul+0x94>
   33b20:	4338      	orrs	r0, r7
   33b22:	0240      	lsls	r0, r0, #9
   33b24:	0a40      	lsrs	r0, r0, #9
   33b26:	22ff      	movs	r2, #255	; 0xff
   33b28:	e75e      	b.n	339e8 <__aeabi_fmul+0x94>
   33b2a:	2401      	movs	r4, #1
   33b2c:	1aa3      	subs	r3, r4, r2
   33b2e:	2b1b      	cmp	r3, #27
   33b30:	dd05      	ble.n	33b3e <__aeabi_fmul+0x1ea>
   33b32:	400c      	ands	r4, r1
   33b34:	2200      	movs	r2, #0
   33b36:	2000      	movs	r0, #0
   33b38:	e756      	b.n	339e8 <__aeabi_fmul+0x94>
   33b3a:	465e      	mov	r6, fp
   33b3c:	e7cb      	b.n	33ad6 <__aeabi_fmul+0x182>
   33b3e:	002a      	movs	r2, r5
   33b40:	2020      	movs	r0, #32
   33b42:	40da      	lsrs	r2, r3
   33b44:	1ac3      	subs	r3, r0, r3
   33b46:	409d      	lsls	r5, r3
   33b48:	002b      	movs	r3, r5
   33b4a:	1e5d      	subs	r5, r3, #1
   33b4c:	41ab      	sbcs	r3, r5
   33b4e:	4313      	orrs	r3, r2
   33b50:	075a      	lsls	r2, r3, #29
   33b52:	d004      	beq.n	33b5e <__aeabi_fmul+0x20a>
   33b54:	220f      	movs	r2, #15
   33b56:	401a      	ands	r2, r3
   33b58:	2a04      	cmp	r2, #4
   33b5a:	d000      	beq.n	33b5e <__aeabi_fmul+0x20a>
   33b5c:	3304      	adds	r3, #4
   33b5e:	015a      	lsls	r2, r3, #5
   33b60:	d504      	bpl.n	33b6c <__aeabi_fmul+0x218>
   33b62:	2401      	movs	r4, #1
   33b64:	2201      	movs	r2, #1
   33b66:	400c      	ands	r4, r1
   33b68:	2000      	movs	r0, #0
   33b6a:	e73d      	b.n	339e8 <__aeabi_fmul+0x94>
   33b6c:	2401      	movs	r4, #1
   33b6e:	019b      	lsls	r3, r3, #6
   33b70:	0a58      	lsrs	r0, r3, #9
   33b72:	400c      	ands	r4, r1
   33b74:	2200      	movs	r2, #0
   33b76:	e737      	b.n	339e8 <__aeabi_fmul+0x94>
   33b78:	2080      	movs	r0, #128	; 0x80
   33b7a:	2401      	movs	r4, #1
   33b7c:	03c0      	lsls	r0, r0, #15
   33b7e:	4328      	orrs	r0, r5
   33b80:	0240      	lsls	r0, r0, #9
   33b82:	0a40      	lsrs	r0, r0, #9
   33b84:	400c      	ands	r4, r1
   33b86:	22ff      	movs	r2, #255	; 0xff
   33b88:	e72e      	b.n	339e8 <__aeabi_fmul+0x94>
   33b8a:	46c0      	nop			; (mov r8, r8)
   33b8c:	0003ae7c 	.word	0x0003ae7c
   33b90:	f7ffffff 	.word	0xf7ffffff

00033b94 <__aeabi_f2iz>:
   33b94:	0241      	lsls	r1, r0, #9
   33b96:	0043      	lsls	r3, r0, #1
   33b98:	0fc2      	lsrs	r2, r0, #31
   33b9a:	0a49      	lsrs	r1, r1, #9
   33b9c:	0e1b      	lsrs	r3, r3, #24
   33b9e:	2000      	movs	r0, #0
   33ba0:	2b7e      	cmp	r3, #126	; 0x7e
   33ba2:	dd0d      	ble.n	33bc0 <__aeabi_f2iz+0x2c>
   33ba4:	2b9d      	cmp	r3, #157	; 0x9d
   33ba6:	dc0c      	bgt.n	33bc2 <__aeabi_f2iz+0x2e>
   33ba8:	2080      	movs	r0, #128	; 0x80
   33baa:	0400      	lsls	r0, r0, #16
   33bac:	4301      	orrs	r1, r0
   33bae:	2b95      	cmp	r3, #149	; 0x95
   33bb0:	dc0a      	bgt.n	33bc8 <__aeabi_f2iz+0x34>
   33bb2:	2096      	movs	r0, #150	; 0x96
   33bb4:	1ac3      	subs	r3, r0, r3
   33bb6:	40d9      	lsrs	r1, r3
   33bb8:	4248      	negs	r0, r1
   33bba:	2a00      	cmp	r2, #0
   33bbc:	d100      	bne.n	33bc0 <__aeabi_f2iz+0x2c>
   33bbe:	0008      	movs	r0, r1
   33bc0:	4770      	bx	lr
   33bc2:	4b03      	ldr	r3, [pc, #12]	; (33bd0 <__aeabi_f2iz+0x3c>)
   33bc4:	18d0      	adds	r0, r2, r3
   33bc6:	e7fb      	b.n	33bc0 <__aeabi_f2iz+0x2c>
   33bc8:	3b96      	subs	r3, #150	; 0x96
   33bca:	4099      	lsls	r1, r3
   33bcc:	e7f4      	b.n	33bb8 <__aeabi_f2iz+0x24>
   33bce:	46c0      	nop			; (mov r8, r8)
   33bd0:	7fffffff 	.word	0x7fffffff

00033bd4 <__aeabi_i2f>:
   33bd4:	b570      	push	{r4, r5, r6, lr}
   33bd6:	2800      	cmp	r0, #0
   33bd8:	d030      	beq.n	33c3c <__aeabi_i2f+0x68>
   33bda:	17c3      	asrs	r3, r0, #31
   33bdc:	18c4      	adds	r4, r0, r3
   33bde:	405c      	eors	r4, r3
   33be0:	0fc5      	lsrs	r5, r0, #31
   33be2:	0020      	movs	r0, r4
   33be4:	f001 fc8c 	bl	35500 <__clzsi2>
   33be8:	239e      	movs	r3, #158	; 0x9e
   33bea:	1a1b      	subs	r3, r3, r0
   33bec:	2b96      	cmp	r3, #150	; 0x96
   33bee:	dc0d      	bgt.n	33c0c <__aeabi_i2f+0x38>
   33bf0:	2296      	movs	r2, #150	; 0x96
   33bf2:	1ad2      	subs	r2, r2, r3
   33bf4:	4094      	lsls	r4, r2
   33bf6:	002a      	movs	r2, r5
   33bf8:	0264      	lsls	r4, r4, #9
   33bfa:	0a64      	lsrs	r4, r4, #9
   33bfc:	b2db      	uxtb	r3, r3
   33bfe:	0264      	lsls	r4, r4, #9
   33c00:	05db      	lsls	r3, r3, #23
   33c02:	0a60      	lsrs	r0, r4, #9
   33c04:	07d2      	lsls	r2, r2, #31
   33c06:	4318      	orrs	r0, r3
   33c08:	4310      	orrs	r0, r2
   33c0a:	bd70      	pop	{r4, r5, r6, pc}
   33c0c:	2b99      	cmp	r3, #153	; 0x99
   33c0e:	dc19      	bgt.n	33c44 <__aeabi_i2f+0x70>
   33c10:	2299      	movs	r2, #153	; 0x99
   33c12:	1ad2      	subs	r2, r2, r3
   33c14:	2a00      	cmp	r2, #0
   33c16:	dd29      	ble.n	33c6c <__aeabi_i2f+0x98>
   33c18:	4094      	lsls	r4, r2
   33c1a:	0022      	movs	r2, r4
   33c1c:	4c14      	ldr	r4, [pc, #80]	; (33c70 <__aeabi_i2f+0x9c>)
   33c1e:	4014      	ands	r4, r2
   33c20:	0751      	lsls	r1, r2, #29
   33c22:	d004      	beq.n	33c2e <__aeabi_i2f+0x5a>
   33c24:	210f      	movs	r1, #15
   33c26:	400a      	ands	r2, r1
   33c28:	2a04      	cmp	r2, #4
   33c2a:	d000      	beq.n	33c2e <__aeabi_i2f+0x5a>
   33c2c:	3404      	adds	r4, #4
   33c2e:	0162      	lsls	r2, r4, #5
   33c30:	d413      	bmi.n	33c5a <__aeabi_i2f+0x86>
   33c32:	01a4      	lsls	r4, r4, #6
   33c34:	0a64      	lsrs	r4, r4, #9
   33c36:	b2db      	uxtb	r3, r3
   33c38:	002a      	movs	r2, r5
   33c3a:	e7e0      	b.n	33bfe <__aeabi_i2f+0x2a>
   33c3c:	2200      	movs	r2, #0
   33c3e:	2300      	movs	r3, #0
   33c40:	2400      	movs	r4, #0
   33c42:	e7dc      	b.n	33bfe <__aeabi_i2f+0x2a>
   33c44:	2205      	movs	r2, #5
   33c46:	0021      	movs	r1, r4
   33c48:	1a12      	subs	r2, r2, r0
   33c4a:	40d1      	lsrs	r1, r2
   33c4c:	22b9      	movs	r2, #185	; 0xb9
   33c4e:	1ad2      	subs	r2, r2, r3
   33c50:	4094      	lsls	r4, r2
   33c52:	1e62      	subs	r2, r4, #1
   33c54:	4194      	sbcs	r4, r2
   33c56:	430c      	orrs	r4, r1
   33c58:	e7da      	b.n	33c10 <__aeabi_i2f+0x3c>
   33c5a:	4b05      	ldr	r3, [pc, #20]	; (33c70 <__aeabi_i2f+0x9c>)
   33c5c:	002a      	movs	r2, r5
   33c5e:	401c      	ands	r4, r3
   33c60:	239f      	movs	r3, #159	; 0x9f
   33c62:	01a4      	lsls	r4, r4, #6
   33c64:	1a1b      	subs	r3, r3, r0
   33c66:	0a64      	lsrs	r4, r4, #9
   33c68:	b2db      	uxtb	r3, r3
   33c6a:	e7c8      	b.n	33bfe <__aeabi_i2f+0x2a>
   33c6c:	0022      	movs	r2, r4
   33c6e:	e7d5      	b.n	33c1c <__aeabi_i2f+0x48>
   33c70:	fbffffff 	.word	0xfbffffff

00033c74 <__aeabi_dadd>:
   33c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33c76:	4645      	mov	r5, r8
   33c78:	46de      	mov	lr, fp
   33c7a:	4657      	mov	r7, sl
   33c7c:	464e      	mov	r6, r9
   33c7e:	030c      	lsls	r4, r1, #12
   33c80:	b5e0      	push	{r5, r6, r7, lr}
   33c82:	004e      	lsls	r6, r1, #1
   33c84:	0fc9      	lsrs	r1, r1, #31
   33c86:	4688      	mov	r8, r1
   33c88:	000d      	movs	r5, r1
   33c8a:	0a61      	lsrs	r1, r4, #9
   33c8c:	0f44      	lsrs	r4, r0, #29
   33c8e:	430c      	orrs	r4, r1
   33c90:	00c7      	lsls	r7, r0, #3
   33c92:	0319      	lsls	r1, r3, #12
   33c94:	0058      	lsls	r0, r3, #1
   33c96:	0fdb      	lsrs	r3, r3, #31
   33c98:	469b      	mov	fp, r3
   33c9a:	0a4b      	lsrs	r3, r1, #9
   33c9c:	0f51      	lsrs	r1, r2, #29
   33c9e:	430b      	orrs	r3, r1
   33ca0:	0d76      	lsrs	r6, r6, #21
   33ca2:	0d40      	lsrs	r0, r0, #21
   33ca4:	0019      	movs	r1, r3
   33ca6:	00d2      	lsls	r2, r2, #3
   33ca8:	45d8      	cmp	r8, fp
   33caa:	d100      	bne.n	33cae <__aeabi_dadd+0x3a>
   33cac:	e0ae      	b.n	33e0c <__aeabi_dadd+0x198>
   33cae:	1a35      	subs	r5, r6, r0
   33cb0:	2d00      	cmp	r5, #0
   33cb2:	dc00      	bgt.n	33cb6 <__aeabi_dadd+0x42>
   33cb4:	e0f6      	b.n	33ea4 <__aeabi_dadd+0x230>
   33cb6:	2800      	cmp	r0, #0
   33cb8:	d10f      	bne.n	33cda <__aeabi_dadd+0x66>
   33cba:	4313      	orrs	r3, r2
   33cbc:	d100      	bne.n	33cc0 <__aeabi_dadd+0x4c>
   33cbe:	e0db      	b.n	33e78 <__aeabi_dadd+0x204>
   33cc0:	1e6b      	subs	r3, r5, #1
   33cc2:	2b00      	cmp	r3, #0
   33cc4:	d000      	beq.n	33cc8 <__aeabi_dadd+0x54>
   33cc6:	e137      	b.n	33f38 <__aeabi_dadd+0x2c4>
   33cc8:	1aba      	subs	r2, r7, r2
   33cca:	4297      	cmp	r7, r2
   33ccc:	41bf      	sbcs	r7, r7
   33cce:	1a64      	subs	r4, r4, r1
   33cd0:	427f      	negs	r7, r7
   33cd2:	1be4      	subs	r4, r4, r7
   33cd4:	2601      	movs	r6, #1
   33cd6:	0017      	movs	r7, r2
   33cd8:	e024      	b.n	33d24 <__aeabi_dadd+0xb0>
   33cda:	4bc6      	ldr	r3, [pc, #792]	; (33ff4 <__aeabi_dadd+0x380>)
   33cdc:	429e      	cmp	r6, r3
   33cde:	d04d      	beq.n	33d7c <__aeabi_dadd+0x108>
   33ce0:	2380      	movs	r3, #128	; 0x80
   33ce2:	041b      	lsls	r3, r3, #16
   33ce4:	4319      	orrs	r1, r3
   33ce6:	2d38      	cmp	r5, #56	; 0x38
   33ce8:	dd00      	ble.n	33cec <__aeabi_dadd+0x78>
   33cea:	e107      	b.n	33efc <__aeabi_dadd+0x288>
   33cec:	2d1f      	cmp	r5, #31
   33cee:	dd00      	ble.n	33cf2 <__aeabi_dadd+0x7e>
   33cf0:	e138      	b.n	33f64 <__aeabi_dadd+0x2f0>
   33cf2:	2020      	movs	r0, #32
   33cf4:	1b43      	subs	r3, r0, r5
   33cf6:	469a      	mov	sl, r3
   33cf8:	000b      	movs	r3, r1
   33cfa:	4650      	mov	r0, sl
   33cfc:	4083      	lsls	r3, r0
   33cfe:	4699      	mov	r9, r3
   33d00:	0013      	movs	r3, r2
   33d02:	4648      	mov	r0, r9
   33d04:	40eb      	lsrs	r3, r5
   33d06:	4318      	orrs	r0, r3
   33d08:	0003      	movs	r3, r0
   33d0a:	4650      	mov	r0, sl
   33d0c:	4082      	lsls	r2, r0
   33d0e:	1e50      	subs	r0, r2, #1
   33d10:	4182      	sbcs	r2, r0
   33d12:	40e9      	lsrs	r1, r5
   33d14:	431a      	orrs	r2, r3
   33d16:	1aba      	subs	r2, r7, r2
   33d18:	1a61      	subs	r1, r4, r1
   33d1a:	4297      	cmp	r7, r2
   33d1c:	41a4      	sbcs	r4, r4
   33d1e:	0017      	movs	r7, r2
   33d20:	4264      	negs	r4, r4
   33d22:	1b0c      	subs	r4, r1, r4
   33d24:	0223      	lsls	r3, r4, #8
   33d26:	d562      	bpl.n	33dee <__aeabi_dadd+0x17a>
   33d28:	0264      	lsls	r4, r4, #9
   33d2a:	0a65      	lsrs	r5, r4, #9
   33d2c:	2d00      	cmp	r5, #0
   33d2e:	d100      	bne.n	33d32 <__aeabi_dadd+0xbe>
   33d30:	e0df      	b.n	33ef2 <__aeabi_dadd+0x27e>
   33d32:	0028      	movs	r0, r5
   33d34:	f001 fbe4 	bl	35500 <__clzsi2>
   33d38:	0003      	movs	r3, r0
   33d3a:	3b08      	subs	r3, #8
   33d3c:	2b1f      	cmp	r3, #31
   33d3e:	dd00      	ble.n	33d42 <__aeabi_dadd+0xce>
   33d40:	e0d2      	b.n	33ee8 <__aeabi_dadd+0x274>
   33d42:	2220      	movs	r2, #32
   33d44:	003c      	movs	r4, r7
   33d46:	1ad2      	subs	r2, r2, r3
   33d48:	409d      	lsls	r5, r3
   33d4a:	40d4      	lsrs	r4, r2
   33d4c:	409f      	lsls	r7, r3
   33d4e:	4325      	orrs	r5, r4
   33d50:	429e      	cmp	r6, r3
   33d52:	dd00      	ble.n	33d56 <__aeabi_dadd+0xe2>
   33d54:	e0c4      	b.n	33ee0 <__aeabi_dadd+0x26c>
   33d56:	1b9e      	subs	r6, r3, r6
   33d58:	1c73      	adds	r3, r6, #1
   33d5a:	2b1f      	cmp	r3, #31
   33d5c:	dd00      	ble.n	33d60 <__aeabi_dadd+0xec>
   33d5e:	e0f1      	b.n	33f44 <__aeabi_dadd+0x2d0>
   33d60:	2220      	movs	r2, #32
   33d62:	0038      	movs	r0, r7
   33d64:	0029      	movs	r1, r5
   33d66:	1ad2      	subs	r2, r2, r3
   33d68:	40d8      	lsrs	r0, r3
   33d6a:	4091      	lsls	r1, r2
   33d6c:	4097      	lsls	r7, r2
   33d6e:	002c      	movs	r4, r5
   33d70:	4301      	orrs	r1, r0
   33d72:	1e78      	subs	r0, r7, #1
   33d74:	4187      	sbcs	r7, r0
   33d76:	40dc      	lsrs	r4, r3
   33d78:	2600      	movs	r6, #0
   33d7a:	430f      	orrs	r7, r1
   33d7c:	077b      	lsls	r3, r7, #29
   33d7e:	d009      	beq.n	33d94 <__aeabi_dadd+0x120>
   33d80:	230f      	movs	r3, #15
   33d82:	403b      	ands	r3, r7
   33d84:	2b04      	cmp	r3, #4
   33d86:	d005      	beq.n	33d94 <__aeabi_dadd+0x120>
   33d88:	1d3b      	adds	r3, r7, #4
   33d8a:	42bb      	cmp	r3, r7
   33d8c:	41bf      	sbcs	r7, r7
   33d8e:	427f      	negs	r7, r7
   33d90:	19e4      	adds	r4, r4, r7
   33d92:	001f      	movs	r7, r3
   33d94:	0223      	lsls	r3, r4, #8
   33d96:	d52c      	bpl.n	33df2 <__aeabi_dadd+0x17e>
   33d98:	4b96      	ldr	r3, [pc, #600]	; (33ff4 <__aeabi_dadd+0x380>)
   33d9a:	3601      	adds	r6, #1
   33d9c:	429e      	cmp	r6, r3
   33d9e:	d100      	bne.n	33da2 <__aeabi_dadd+0x12e>
   33da0:	e09a      	b.n	33ed8 <__aeabi_dadd+0x264>
   33da2:	4645      	mov	r5, r8
   33da4:	4b94      	ldr	r3, [pc, #592]	; (33ff8 <__aeabi_dadd+0x384>)
   33da6:	08ff      	lsrs	r7, r7, #3
   33da8:	401c      	ands	r4, r3
   33daa:	0760      	lsls	r0, r4, #29
   33dac:	0576      	lsls	r6, r6, #21
   33dae:	0264      	lsls	r4, r4, #9
   33db0:	4307      	orrs	r7, r0
   33db2:	0b24      	lsrs	r4, r4, #12
   33db4:	0d76      	lsrs	r6, r6, #21
   33db6:	2100      	movs	r1, #0
   33db8:	0324      	lsls	r4, r4, #12
   33dba:	0b23      	lsrs	r3, r4, #12
   33dbc:	0d0c      	lsrs	r4, r1, #20
   33dbe:	4a8f      	ldr	r2, [pc, #572]	; (33ffc <__aeabi_dadd+0x388>)
   33dc0:	0524      	lsls	r4, r4, #20
   33dc2:	431c      	orrs	r4, r3
   33dc4:	4014      	ands	r4, r2
   33dc6:	0533      	lsls	r3, r6, #20
   33dc8:	4323      	orrs	r3, r4
   33dca:	005b      	lsls	r3, r3, #1
   33dcc:	07ed      	lsls	r5, r5, #31
   33dce:	085b      	lsrs	r3, r3, #1
   33dd0:	432b      	orrs	r3, r5
   33dd2:	0038      	movs	r0, r7
   33dd4:	0019      	movs	r1, r3
   33dd6:	bc3c      	pop	{r2, r3, r4, r5}
   33dd8:	4690      	mov	r8, r2
   33dda:	4699      	mov	r9, r3
   33ddc:	46a2      	mov	sl, r4
   33dde:	46ab      	mov	fp, r5
   33de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33de2:	4664      	mov	r4, ip
   33de4:	4304      	orrs	r4, r0
   33de6:	d100      	bne.n	33dea <__aeabi_dadd+0x176>
   33de8:	e211      	b.n	3420e <__aeabi_dadd+0x59a>
   33dea:	0004      	movs	r4, r0
   33dec:	4667      	mov	r7, ip
   33dee:	077b      	lsls	r3, r7, #29
   33df0:	d1c6      	bne.n	33d80 <__aeabi_dadd+0x10c>
   33df2:	4645      	mov	r5, r8
   33df4:	0760      	lsls	r0, r4, #29
   33df6:	08ff      	lsrs	r7, r7, #3
   33df8:	4307      	orrs	r7, r0
   33dfa:	08e4      	lsrs	r4, r4, #3
   33dfc:	4b7d      	ldr	r3, [pc, #500]	; (33ff4 <__aeabi_dadd+0x380>)
   33dfe:	429e      	cmp	r6, r3
   33e00:	d030      	beq.n	33e64 <__aeabi_dadd+0x1f0>
   33e02:	0324      	lsls	r4, r4, #12
   33e04:	0576      	lsls	r6, r6, #21
   33e06:	0b24      	lsrs	r4, r4, #12
   33e08:	0d76      	lsrs	r6, r6, #21
   33e0a:	e7d4      	b.n	33db6 <__aeabi_dadd+0x142>
   33e0c:	1a33      	subs	r3, r6, r0
   33e0e:	469a      	mov	sl, r3
   33e10:	2b00      	cmp	r3, #0
   33e12:	dd78      	ble.n	33f06 <__aeabi_dadd+0x292>
   33e14:	2800      	cmp	r0, #0
   33e16:	d031      	beq.n	33e7c <__aeabi_dadd+0x208>
   33e18:	4876      	ldr	r0, [pc, #472]	; (33ff4 <__aeabi_dadd+0x380>)
   33e1a:	4286      	cmp	r6, r0
   33e1c:	d0ae      	beq.n	33d7c <__aeabi_dadd+0x108>
   33e1e:	2080      	movs	r0, #128	; 0x80
   33e20:	0400      	lsls	r0, r0, #16
   33e22:	4301      	orrs	r1, r0
   33e24:	4653      	mov	r3, sl
   33e26:	2b38      	cmp	r3, #56	; 0x38
   33e28:	dc00      	bgt.n	33e2c <__aeabi_dadd+0x1b8>
   33e2a:	e0e9      	b.n	34000 <__aeabi_dadd+0x38c>
   33e2c:	430a      	orrs	r2, r1
   33e2e:	1e51      	subs	r1, r2, #1
   33e30:	418a      	sbcs	r2, r1
   33e32:	2100      	movs	r1, #0
   33e34:	19d2      	adds	r2, r2, r7
   33e36:	42ba      	cmp	r2, r7
   33e38:	41bf      	sbcs	r7, r7
   33e3a:	1909      	adds	r1, r1, r4
   33e3c:	427c      	negs	r4, r7
   33e3e:	0017      	movs	r7, r2
   33e40:	190c      	adds	r4, r1, r4
   33e42:	0223      	lsls	r3, r4, #8
   33e44:	d5d3      	bpl.n	33dee <__aeabi_dadd+0x17a>
   33e46:	4b6b      	ldr	r3, [pc, #428]	; (33ff4 <__aeabi_dadd+0x380>)
   33e48:	3601      	adds	r6, #1
   33e4a:	429e      	cmp	r6, r3
   33e4c:	d100      	bne.n	33e50 <__aeabi_dadd+0x1dc>
   33e4e:	e13a      	b.n	340c6 <__aeabi_dadd+0x452>
   33e50:	2001      	movs	r0, #1
   33e52:	4b69      	ldr	r3, [pc, #420]	; (33ff8 <__aeabi_dadd+0x384>)
   33e54:	401c      	ands	r4, r3
   33e56:	087b      	lsrs	r3, r7, #1
   33e58:	4007      	ands	r7, r0
   33e5a:	431f      	orrs	r7, r3
   33e5c:	07e0      	lsls	r0, r4, #31
   33e5e:	4307      	orrs	r7, r0
   33e60:	0864      	lsrs	r4, r4, #1
   33e62:	e78b      	b.n	33d7c <__aeabi_dadd+0x108>
   33e64:	0023      	movs	r3, r4
   33e66:	433b      	orrs	r3, r7
   33e68:	d100      	bne.n	33e6c <__aeabi_dadd+0x1f8>
   33e6a:	e1cb      	b.n	34204 <__aeabi_dadd+0x590>
   33e6c:	2280      	movs	r2, #128	; 0x80
   33e6e:	0312      	lsls	r2, r2, #12
   33e70:	4314      	orrs	r4, r2
   33e72:	0324      	lsls	r4, r4, #12
   33e74:	0b24      	lsrs	r4, r4, #12
   33e76:	e79e      	b.n	33db6 <__aeabi_dadd+0x142>
   33e78:	002e      	movs	r6, r5
   33e7a:	e77f      	b.n	33d7c <__aeabi_dadd+0x108>
   33e7c:	0008      	movs	r0, r1
   33e7e:	4310      	orrs	r0, r2
   33e80:	d100      	bne.n	33e84 <__aeabi_dadd+0x210>
   33e82:	e0b4      	b.n	33fee <__aeabi_dadd+0x37a>
   33e84:	1e58      	subs	r0, r3, #1
   33e86:	2800      	cmp	r0, #0
   33e88:	d000      	beq.n	33e8c <__aeabi_dadd+0x218>
   33e8a:	e0de      	b.n	3404a <__aeabi_dadd+0x3d6>
   33e8c:	18ba      	adds	r2, r7, r2
   33e8e:	42ba      	cmp	r2, r7
   33e90:	419b      	sbcs	r3, r3
   33e92:	1864      	adds	r4, r4, r1
   33e94:	425b      	negs	r3, r3
   33e96:	18e4      	adds	r4, r4, r3
   33e98:	0017      	movs	r7, r2
   33e9a:	2601      	movs	r6, #1
   33e9c:	0223      	lsls	r3, r4, #8
   33e9e:	d5a6      	bpl.n	33dee <__aeabi_dadd+0x17a>
   33ea0:	2602      	movs	r6, #2
   33ea2:	e7d5      	b.n	33e50 <__aeabi_dadd+0x1dc>
   33ea4:	2d00      	cmp	r5, #0
   33ea6:	d16e      	bne.n	33f86 <__aeabi_dadd+0x312>
   33ea8:	1c70      	adds	r0, r6, #1
   33eaa:	0540      	lsls	r0, r0, #21
   33eac:	0d40      	lsrs	r0, r0, #21
   33eae:	2801      	cmp	r0, #1
   33eb0:	dc00      	bgt.n	33eb4 <__aeabi_dadd+0x240>
   33eb2:	e0f9      	b.n	340a8 <__aeabi_dadd+0x434>
   33eb4:	1ab8      	subs	r0, r7, r2
   33eb6:	4684      	mov	ip, r0
   33eb8:	4287      	cmp	r7, r0
   33eba:	4180      	sbcs	r0, r0
   33ebc:	1ae5      	subs	r5, r4, r3
   33ebe:	4240      	negs	r0, r0
   33ec0:	1a2d      	subs	r5, r5, r0
   33ec2:	0228      	lsls	r0, r5, #8
   33ec4:	d400      	bmi.n	33ec8 <__aeabi_dadd+0x254>
   33ec6:	e089      	b.n	33fdc <__aeabi_dadd+0x368>
   33ec8:	1bd7      	subs	r7, r2, r7
   33eca:	42ba      	cmp	r2, r7
   33ecc:	4192      	sbcs	r2, r2
   33ece:	1b1c      	subs	r4, r3, r4
   33ed0:	4252      	negs	r2, r2
   33ed2:	1aa5      	subs	r5, r4, r2
   33ed4:	46d8      	mov	r8, fp
   33ed6:	e729      	b.n	33d2c <__aeabi_dadd+0xb8>
   33ed8:	4645      	mov	r5, r8
   33eda:	2400      	movs	r4, #0
   33edc:	2700      	movs	r7, #0
   33ede:	e76a      	b.n	33db6 <__aeabi_dadd+0x142>
   33ee0:	4c45      	ldr	r4, [pc, #276]	; (33ff8 <__aeabi_dadd+0x384>)
   33ee2:	1af6      	subs	r6, r6, r3
   33ee4:	402c      	ands	r4, r5
   33ee6:	e749      	b.n	33d7c <__aeabi_dadd+0x108>
   33ee8:	003d      	movs	r5, r7
   33eea:	3828      	subs	r0, #40	; 0x28
   33eec:	4085      	lsls	r5, r0
   33eee:	2700      	movs	r7, #0
   33ef0:	e72e      	b.n	33d50 <__aeabi_dadd+0xdc>
   33ef2:	0038      	movs	r0, r7
   33ef4:	f001 fb04 	bl	35500 <__clzsi2>
   33ef8:	3020      	adds	r0, #32
   33efa:	e71d      	b.n	33d38 <__aeabi_dadd+0xc4>
   33efc:	430a      	orrs	r2, r1
   33efe:	1e51      	subs	r1, r2, #1
   33f00:	418a      	sbcs	r2, r1
   33f02:	2100      	movs	r1, #0
   33f04:	e707      	b.n	33d16 <__aeabi_dadd+0xa2>
   33f06:	2b00      	cmp	r3, #0
   33f08:	d000      	beq.n	33f0c <__aeabi_dadd+0x298>
   33f0a:	e0f3      	b.n	340f4 <__aeabi_dadd+0x480>
   33f0c:	1c70      	adds	r0, r6, #1
   33f0e:	0543      	lsls	r3, r0, #21
   33f10:	0d5b      	lsrs	r3, r3, #21
   33f12:	2b01      	cmp	r3, #1
   33f14:	dc00      	bgt.n	33f18 <__aeabi_dadd+0x2a4>
   33f16:	e0ad      	b.n	34074 <__aeabi_dadd+0x400>
   33f18:	4b36      	ldr	r3, [pc, #216]	; (33ff4 <__aeabi_dadd+0x380>)
   33f1a:	4298      	cmp	r0, r3
   33f1c:	d100      	bne.n	33f20 <__aeabi_dadd+0x2ac>
   33f1e:	e0d1      	b.n	340c4 <__aeabi_dadd+0x450>
   33f20:	18ba      	adds	r2, r7, r2
   33f22:	42ba      	cmp	r2, r7
   33f24:	41bf      	sbcs	r7, r7
   33f26:	1864      	adds	r4, r4, r1
   33f28:	427f      	negs	r7, r7
   33f2a:	19e4      	adds	r4, r4, r7
   33f2c:	07e7      	lsls	r7, r4, #31
   33f2e:	0852      	lsrs	r2, r2, #1
   33f30:	4317      	orrs	r7, r2
   33f32:	0864      	lsrs	r4, r4, #1
   33f34:	0006      	movs	r6, r0
   33f36:	e721      	b.n	33d7c <__aeabi_dadd+0x108>
   33f38:	482e      	ldr	r0, [pc, #184]	; (33ff4 <__aeabi_dadd+0x380>)
   33f3a:	4285      	cmp	r5, r0
   33f3c:	d100      	bne.n	33f40 <__aeabi_dadd+0x2cc>
   33f3e:	e093      	b.n	34068 <__aeabi_dadd+0x3f4>
   33f40:	001d      	movs	r5, r3
   33f42:	e6d0      	b.n	33ce6 <__aeabi_dadd+0x72>
   33f44:	0029      	movs	r1, r5
   33f46:	3e1f      	subs	r6, #31
   33f48:	40f1      	lsrs	r1, r6
   33f4a:	2b20      	cmp	r3, #32
   33f4c:	d100      	bne.n	33f50 <__aeabi_dadd+0x2dc>
   33f4e:	e08d      	b.n	3406c <__aeabi_dadd+0x3f8>
   33f50:	2240      	movs	r2, #64	; 0x40
   33f52:	1ad3      	subs	r3, r2, r3
   33f54:	409d      	lsls	r5, r3
   33f56:	432f      	orrs	r7, r5
   33f58:	1e7d      	subs	r5, r7, #1
   33f5a:	41af      	sbcs	r7, r5
   33f5c:	2400      	movs	r4, #0
   33f5e:	430f      	orrs	r7, r1
   33f60:	2600      	movs	r6, #0
   33f62:	e744      	b.n	33dee <__aeabi_dadd+0x17a>
   33f64:	002b      	movs	r3, r5
   33f66:	0008      	movs	r0, r1
   33f68:	3b20      	subs	r3, #32
   33f6a:	40d8      	lsrs	r0, r3
   33f6c:	0003      	movs	r3, r0
   33f6e:	2d20      	cmp	r5, #32
   33f70:	d100      	bne.n	33f74 <__aeabi_dadd+0x300>
   33f72:	e07d      	b.n	34070 <__aeabi_dadd+0x3fc>
   33f74:	2040      	movs	r0, #64	; 0x40
   33f76:	1b45      	subs	r5, r0, r5
   33f78:	40a9      	lsls	r1, r5
   33f7a:	430a      	orrs	r2, r1
   33f7c:	1e51      	subs	r1, r2, #1
   33f7e:	418a      	sbcs	r2, r1
   33f80:	2100      	movs	r1, #0
   33f82:	431a      	orrs	r2, r3
   33f84:	e6c7      	b.n	33d16 <__aeabi_dadd+0xa2>
   33f86:	2e00      	cmp	r6, #0
   33f88:	d050      	beq.n	3402c <__aeabi_dadd+0x3b8>
   33f8a:	4e1a      	ldr	r6, [pc, #104]	; (33ff4 <__aeabi_dadd+0x380>)
   33f8c:	42b0      	cmp	r0, r6
   33f8e:	d057      	beq.n	34040 <__aeabi_dadd+0x3cc>
   33f90:	2680      	movs	r6, #128	; 0x80
   33f92:	426b      	negs	r3, r5
   33f94:	4699      	mov	r9, r3
   33f96:	0436      	lsls	r6, r6, #16
   33f98:	4334      	orrs	r4, r6
   33f9a:	464b      	mov	r3, r9
   33f9c:	2b38      	cmp	r3, #56	; 0x38
   33f9e:	dd00      	ble.n	33fa2 <__aeabi_dadd+0x32e>
   33fa0:	e0d6      	b.n	34150 <__aeabi_dadd+0x4dc>
   33fa2:	2b1f      	cmp	r3, #31
   33fa4:	dd00      	ble.n	33fa8 <__aeabi_dadd+0x334>
   33fa6:	e135      	b.n	34214 <__aeabi_dadd+0x5a0>
   33fa8:	2620      	movs	r6, #32
   33faa:	1af5      	subs	r5, r6, r3
   33fac:	0026      	movs	r6, r4
   33fae:	40ae      	lsls	r6, r5
   33fb0:	46b2      	mov	sl, r6
   33fb2:	003e      	movs	r6, r7
   33fb4:	40de      	lsrs	r6, r3
   33fb6:	46ac      	mov	ip, r5
   33fb8:	0035      	movs	r5, r6
   33fba:	4656      	mov	r6, sl
   33fbc:	432e      	orrs	r6, r5
   33fbe:	4665      	mov	r5, ip
   33fc0:	40af      	lsls	r7, r5
   33fc2:	1e7d      	subs	r5, r7, #1
   33fc4:	41af      	sbcs	r7, r5
   33fc6:	40dc      	lsrs	r4, r3
   33fc8:	4337      	orrs	r7, r6
   33fca:	1bd7      	subs	r7, r2, r7
   33fcc:	42ba      	cmp	r2, r7
   33fce:	4192      	sbcs	r2, r2
   33fd0:	1b0c      	subs	r4, r1, r4
   33fd2:	4252      	negs	r2, r2
   33fd4:	1aa4      	subs	r4, r4, r2
   33fd6:	0006      	movs	r6, r0
   33fd8:	46d8      	mov	r8, fp
   33fda:	e6a3      	b.n	33d24 <__aeabi_dadd+0xb0>
   33fdc:	4664      	mov	r4, ip
   33fde:	4667      	mov	r7, ip
   33fe0:	432c      	orrs	r4, r5
   33fe2:	d000      	beq.n	33fe6 <__aeabi_dadd+0x372>
   33fe4:	e6a2      	b.n	33d2c <__aeabi_dadd+0xb8>
   33fe6:	2500      	movs	r5, #0
   33fe8:	2600      	movs	r6, #0
   33fea:	2700      	movs	r7, #0
   33fec:	e706      	b.n	33dfc <__aeabi_dadd+0x188>
   33fee:	001e      	movs	r6, r3
   33ff0:	e6c4      	b.n	33d7c <__aeabi_dadd+0x108>
   33ff2:	46c0      	nop			; (mov r8, r8)
   33ff4:	000007ff 	.word	0x000007ff
   33ff8:	ff7fffff 	.word	0xff7fffff
   33ffc:	800fffff 	.word	0x800fffff
   34000:	2b1f      	cmp	r3, #31
   34002:	dc63      	bgt.n	340cc <__aeabi_dadd+0x458>
   34004:	2020      	movs	r0, #32
   34006:	1ac3      	subs	r3, r0, r3
   34008:	0008      	movs	r0, r1
   3400a:	4098      	lsls	r0, r3
   3400c:	469c      	mov	ip, r3
   3400e:	4683      	mov	fp, r0
   34010:	4653      	mov	r3, sl
   34012:	0010      	movs	r0, r2
   34014:	40d8      	lsrs	r0, r3
   34016:	0003      	movs	r3, r0
   34018:	4658      	mov	r0, fp
   3401a:	4318      	orrs	r0, r3
   3401c:	4663      	mov	r3, ip
   3401e:	409a      	lsls	r2, r3
   34020:	1e53      	subs	r3, r2, #1
   34022:	419a      	sbcs	r2, r3
   34024:	4653      	mov	r3, sl
   34026:	4302      	orrs	r2, r0
   34028:	40d9      	lsrs	r1, r3
   3402a:	e703      	b.n	33e34 <__aeabi_dadd+0x1c0>
   3402c:	0026      	movs	r6, r4
   3402e:	433e      	orrs	r6, r7
   34030:	d006      	beq.n	34040 <__aeabi_dadd+0x3cc>
   34032:	43eb      	mvns	r3, r5
   34034:	4699      	mov	r9, r3
   34036:	2b00      	cmp	r3, #0
   34038:	d0c7      	beq.n	33fca <__aeabi_dadd+0x356>
   3403a:	4e94      	ldr	r6, [pc, #592]	; (3428c <__aeabi_dadd+0x618>)
   3403c:	42b0      	cmp	r0, r6
   3403e:	d1ac      	bne.n	33f9a <__aeabi_dadd+0x326>
   34040:	000c      	movs	r4, r1
   34042:	0017      	movs	r7, r2
   34044:	0006      	movs	r6, r0
   34046:	46d8      	mov	r8, fp
   34048:	e698      	b.n	33d7c <__aeabi_dadd+0x108>
   3404a:	4b90      	ldr	r3, [pc, #576]	; (3428c <__aeabi_dadd+0x618>)
   3404c:	459a      	cmp	sl, r3
   3404e:	d00b      	beq.n	34068 <__aeabi_dadd+0x3f4>
   34050:	4682      	mov	sl, r0
   34052:	e6e7      	b.n	33e24 <__aeabi_dadd+0x1b0>
   34054:	2800      	cmp	r0, #0
   34056:	d000      	beq.n	3405a <__aeabi_dadd+0x3e6>
   34058:	e09e      	b.n	34198 <__aeabi_dadd+0x524>
   3405a:	0018      	movs	r0, r3
   3405c:	4310      	orrs	r0, r2
   3405e:	d100      	bne.n	34062 <__aeabi_dadd+0x3ee>
   34060:	e0e9      	b.n	34236 <__aeabi_dadd+0x5c2>
   34062:	001c      	movs	r4, r3
   34064:	0017      	movs	r7, r2
   34066:	46d8      	mov	r8, fp
   34068:	4e88      	ldr	r6, [pc, #544]	; (3428c <__aeabi_dadd+0x618>)
   3406a:	e687      	b.n	33d7c <__aeabi_dadd+0x108>
   3406c:	2500      	movs	r5, #0
   3406e:	e772      	b.n	33f56 <__aeabi_dadd+0x2e2>
   34070:	2100      	movs	r1, #0
   34072:	e782      	b.n	33f7a <__aeabi_dadd+0x306>
   34074:	0023      	movs	r3, r4
   34076:	433b      	orrs	r3, r7
   34078:	2e00      	cmp	r6, #0
   3407a:	d000      	beq.n	3407e <__aeabi_dadd+0x40a>
   3407c:	e0ab      	b.n	341d6 <__aeabi_dadd+0x562>
   3407e:	2b00      	cmp	r3, #0
   34080:	d100      	bne.n	34084 <__aeabi_dadd+0x410>
   34082:	e0e7      	b.n	34254 <__aeabi_dadd+0x5e0>
   34084:	000b      	movs	r3, r1
   34086:	4313      	orrs	r3, r2
   34088:	d100      	bne.n	3408c <__aeabi_dadd+0x418>
   3408a:	e677      	b.n	33d7c <__aeabi_dadd+0x108>
   3408c:	18ba      	adds	r2, r7, r2
   3408e:	42ba      	cmp	r2, r7
   34090:	41bf      	sbcs	r7, r7
   34092:	1864      	adds	r4, r4, r1
   34094:	427f      	negs	r7, r7
   34096:	19e4      	adds	r4, r4, r7
   34098:	0223      	lsls	r3, r4, #8
   3409a:	d400      	bmi.n	3409e <__aeabi_dadd+0x42a>
   3409c:	e0f2      	b.n	34284 <__aeabi_dadd+0x610>
   3409e:	4b7c      	ldr	r3, [pc, #496]	; (34290 <__aeabi_dadd+0x61c>)
   340a0:	0017      	movs	r7, r2
   340a2:	401c      	ands	r4, r3
   340a4:	0006      	movs	r6, r0
   340a6:	e669      	b.n	33d7c <__aeabi_dadd+0x108>
   340a8:	0020      	movs	r0, r4
   340aa:	4338      	orrs	r0, r7
   340ac:	2e00      	cmp	r6, #0
   340ae:	d1d1      	bne.n	34054 <__aeabi_dadd+0x3e0>
   340b0:	2800      	cmp	r0, #0
   340b2:	d15b      	bne.n	3416c <__aeabi_dadd+0x4f8>
   340b4:	001c      	movs	r4, r3
   340b6:	4314      	orrs	r4, r2
   340b8:	d100      	bne.n	340bc <__aeabi_dadd+0x448>
   340ba:	e0a8      	b.n	3420e <__aeabi_dadd+0x59a>
   340bc:	001c      	movs	r4, r3
   340be:	0017      	movs	r7, r2
   340c0:	46d8      	mov	r8, fp
   340c2:	e65b      	b.n	33d7c <__aeabi_dadd+0x108>
   340c4:	0006      	movs	r6, r0
   340c6:	2400      	movs	r4, #0
   340c8:	2700      	movs	r7, #0
   340ca:	e697      	b.n	33dfc <__aeabi_dadd+0x188>
   340cc:	4650      	mov	r0, sl
   340ce:	000b      	movs	r3, r1
   340d0:	3820      	subs	r0, #32
   340d2:	40c3      	lsrs	r3, r0
   340d4:	4699      	mov	r9, r3
   340d6:	4653      	mov	r3, sl
   340d8:	2b20      	cmp	r3, #32
   340da:	d100      	bne.n	340de <__aeabi_dadd+0x46a>
   340dc:	e095      	b.n	3420a <__aeabi_dadd+0x596>
   340de:	2340      	movs	r3, #64	; 0x40
   340e0:	4650      	mov	r0, sl
   340e2:	1a1b      	subs	r3, r3, r0
   340e4:	4099      	lsls	r1, r3
   340e6:	430a      	orrs	r2, r1
   340e8:	1e51      	subs	r1, r2, #1
   340ea:	418a      	sbcs	r2, r1
   340ec:	464b      	mov	r3, r9
   340ee:	2100      	movs	r1, #0
   340f0:	431a      	orrs	r2, r3
   340f2:	e69f      	b.n	33e34 <__aeabi_dadd+0x1c0>
   340f4:	2e00      	cmp	r6, #0
   340f6:	d130      	bne.n	3415a <__aeabi_dadd+0x4e6>
   340f8:	0026      	movs	r6, r4
   340fa:	433e      	orrs	r6, r7
   340fc:	d067      	beq.n	341ce <__aeabi_dadd+0x55a>
   340fe:	43db      	mvns	r3, r3
   34100:	469a      	mov	sl, r3
   34102:	2b00      	cmp	r3, #0
   34104:	d01c      	beq.n	34140 <__aeabi_dadd+0x4cc>
   34106:	4e61      	ldr	r6, [pc, #388]	; (3428c <__aeabi_dadd+0x618>)
   34108:	42b0      	cmp	r0, r6
   3410a:	d060      	beq.n	341ce <__aeabi_dadd+0x55a>
   3410c:	4653      	mov	r3, sl
   3410e:	2b38      	cmp	r3, #56	; 0x38
   34110:	dd00      	ble.n	34114 <__aeabi_dadd+0x4a0>
   34112:	e096      	b.n	34242 <__aeabi_dadd+0x5ce>
   34114:	2b1f      	cmp	r3, #31
   34116:	dd00      	ble.n	3411a <__aeabi_dadd+0x4a6>
   34118:	e09f      	b.n	3425a <__aeabi_dadd+0x5e6>
   3411a:	2620      	movs	r6, #32
   3411c:	1af3      	subs	r3, r6, r3
   3411e:	0026      	movs	r6, r4
   34120:	409e      	lsls	r6, r3
   34122:	469c      	mov	ip, r3
   34124:	46b3      	mov	fp, r6
   34126:	4653      	mov	r3, sl
   34128:	003e      	movs	r6, r7
   3412a:	40de      	lsrs	r6, r3
   3412c:	0033      	movs	r3, r6
   3412e:	465e      	mov	r6, fp
   34130:	431e      	orrs	r6, r3
   34132:	4663      	mov	r3, ip
   34134:	409f      	lsls	r7, r3
   34136:	1e7b      	subs	r3, r7, #1
   34138:	419f      	sbcs	r7, r3
   3413a:	4653      	mov	r3, sl
   3413c:	40dc      	lsrs	r4, r3
   3413e:	4337      	orrs	r7, r6
   34140:	18bf      	adds	r7, r7, r2
   34142:	4297      	cmp	r7, r2
   34144:	4192      	sbcs	r2, r2
   34146:	1864      	adds	r4, r4, r1
   34148:	4252      	negs	r2, r2
   3414a:	18a4      	adds	r4, r4, r2
   3414c:	0006      	movs	r6, r0
   3414e:	e678      	b.n	33e42 <__aeabi_dadd+0x1ce>
   34150:	4327      	orrs	r7, r4
   34152:	1e7c      	subs	r4, r7, #1
   34154:	41a7      	sbcs	r7, r4
   34156:	2400      	movs	r4, #0
   34158:	e737      	b.n	33fca <__aeabi_dadd+0x356>
   3415a:	4e4c      	ldr	r6, [pc, #304]	; (3428c <__aeabi_dadd+0x618>)
   3415c:	42b0      	cmp	r0, r6
   3415e:	d036      	beq.n	341ce <__aeabi_dadd+0x55a>
   34160:	2680      	movs	r6, #128	; 0x80
   34162:	425b      	negs	r3, r3
   34164:	0436      	lsls	r6, r6, #16
   34166:	469a      	mov	sl, r3
   34168:	4334      	orrs	r4, r6
   3416a:	e7cf      	b.n	3410c <__aeabi_dadd+0x498>
   3416c:	0018      	movs	r0, r3
   3416e:	4310      	orrs	r0, r2
   34170:	d100      	bne.n	34174 <__aeabi_dadd+0x500>
   34172:	e603      	b.n	33d7c <__aeabi_dadd+0x108>
   34174:	1ab8      	subs	r0, r7, r2
   34176:	4684      	mov	ip, r0
   34178:	4567      	cmp	r7, ip
   3417a:	41ad      	sbcs	r5, r5
   3417c:	1ae0      	subs	r0, r4, r3
   3417e:	426d      	negs	r5, r5
   34180:	1b40      	subs	r0, r0, r5
   34182:	0205      	lsls	r5, r0, #8
   34184:	d400      	bmi.n	34188 <__aeabi_dadd+0x514>
   34186:	e62c      	b.n	33de2 <__aeabi_dadd+0x16e>
   34188:	1bd7      	subs	r7, r2, r7
   3418a:	42ba      	cmp	r2, r7
   3418c:	4192      	sbcs	r2, r2
   3418e:	1b1c      	subs	r4, r3, r4
   34190:	4252      	negs	r2, r2
   34192:	1aa4      	subs	r4, r4, r2
   34194:	46d8      	mov	r8, fp
   34196:	e5f1      	b.n	33d7c <__aeabi_dadd+0x108>
   34198:	0018      	movs	r0, r3
   3419a:	4310      	orrs	r0, r2
   3419c:	d100      	bne.n	341a0 <__aeabi_dadd+0x52c>
   3419e:	e763      	b.n	34068 <__aeabi_dadd+0x3f4>
   341a0:	08f8      	lsrs	r0, r7, #3
   341a2:	0767      	lsls	r7, r4, #29
   341a4:	4307      	orrs	r7, r0
   341a6:	2080      	movs	r0, #128	; 0x80
   341a8:	08e4      	lsrs	r4, r4, #3
   341aa:	0300      	lsls	r0, r0, #12
   341ac:	4204      	tst	r4, r0
   341ae:	d008      	beq.n	341c2 <__aeabi_dadd+0x54e>
   341b0:	08dd      	lsrs	r5, r3, #3
   341b2:	4205      	tst	r5, r0
   341b4:	d105      	bne.n	341c2 <__aeabi_dadd+0x54e>
   341b6:	08d2      	lsrs	r2, r2, #3
   341b8:	0759      	lsls	r1, r3, #29
   341ba:	4311      	orrs	r1, r2
   341bc:	000f      	movs	r7, r1
   341be:	002c      	movs	r4, r5
   341c0:	46d8      	mov	r8, fp
   341c2:	0f7b      	lsrs	r3, r7, #29
   341c4:	00e4      	lsls	r4, r4, #3
   341c6:	431c      	orrs	r4, r3
   341c8:	00ff      	lsls	r7, r7, #3
   341ca:	4e30      	ldr	r6, [pc, #192]	; (3428c <__aeabi_dadd+0x618>)
   341cc:	e5d6      	b.n	33d7c <__aeabi_dadd+0x108>
   341ce:	000c      	movs	r4, r1
   341d0:	0017      	movs	r7, r2
   341d2:	0006      	movs	r6, r0
   341d4:	e5d2      	b.n	33d7c <__aeabi_dadd+0x108>
   341d6:	2b00      	cmp	r3, #0
   341d8:	d038      	beq.n	3424c <__aeabi_dadd+0x5d8>
   341da:	000b      	movs	r3, r1
   341dc:	4313      	orrs	r3, r2
   341de:	d100      	bne.n	341e2 <__aeabi_dadd+0x56e>
   341e0:	e742      	b.n	34068 <__aeabi_dadd+0x3f4>
   341e2:	08f8      	lsrs	r0, r7, #3
   341e4:	0767      	lsls	r7, r4, #29
   341e6:	4307      	orrs	r7, r0
   341e8:	2080      	movs	r0, #128	; 0x80
   341ea:	08e4      	lsrs	r4, r4, #3
   341ec:	0300      	lsls	r0, r0, #12
   341ee:	4204      	tst	r4, r0
   341f0:	d0e7      	beq.n	341c2 <__aeabi_dadd+0x54e>
   341f2:	08cb      	lsrs	r3, r1, #3
   341f4:	4203      	tst	r3, r0
   341f6:	d1e4      	bne.n	341c2 <__aeabi_dadd+0x54e>
   341f8:	08d2      	lsrs	r2, r2, #3
   341fa:	0749      	lsls	r1, r1, #29
   341fc:	4311      	orrs	r1, r2
   341fe:	000f      	movs	r7, r1
   34200:	001c      	movs	r4, r3
   34202:	e7de      	b.n	341c2 <__aeabi_dadd+0x54e>
   34204:	2700      	movs	r7, #0
   34206:	2400      	movs	r4, #0
   34208:	e5d5      	b.n	33db6 <__aeabi_dadd+0x142>
   3420a:	2100      	movs	r1, #0
   3420c:	e76b      	b.n	340e6 <__aeabi_dadd+0x472>
   3420e:	2500      	movs	r5, #0
   34210:	2700      	movs	r7, #0
   34212:	e5f3      	b.n	33dfc <__aeabi_dadd+0x188>
   34214:	464e      	mov	r6, r9
   34216:	0025      	movs	r5, r4
   34218:	3e20      	subs	r6, #32
   3421a:	40f5      	lsrs	r5, r6
   3421c:	464b      	mov	r3, r9
   3421e:	002e      	movs	r6, r5
   34220:	2b20      	cmp	r3, #32
   34222:	d02d      	beq.n	34280 <__aeabi_dadd+0x60c>
   34224:	2540      	movs	r5, #64	; 0x40
   34226:	1aed      	subs	r5, r5, r3
   34228:	40ac      	lsls	r4, r5
   3422a:	4327      	orrs	r7, r4
   3422c:	1e7c      	subs	r4, r7, #1
   3422e:	41a7      	sbcs	r7, r4
   34230:	2400      	movs	r4, #0
   34232:	4337      	orrs	r7, r6
   34234:	e6c9      	b.n	33fca <__aeabi_dadd+0x356>
   34236:	2480      	movs	r4, #128	; 0x80
   34238:	2500      	movs	r5, #0
   3423a:	0324      	lsls	r4, r4, #12
   3423c:	4e13      	ldr	r6, [pc, #76]	; (3428c <__aeabi_dadd+0x618>)
   3423e:	2700      	movs	r7, #0
   34240:	e5dc      	b.n	33dfc <__aeabi_dadd+0x188>
   34242:	4327      	orrs	r7, r4
   34244:	1e7c      	subs	r4, r7, #1
   34246:	41a7      	sbcs	r7, r4
   34248:	2400      	movs	r4, #0
   3424a:	e779      	b.n	34140 <__aeabi_dadd+0x4cc>
   3424c:	000c      	movs	r4, r1
   3424e:	0017      	movs	r7, r2
   34250:	4e0e      	ldr	r6, [pc, #56]	; (3428c <__aeabi_dadd+0x618>)
   34252:	e593      	b.n	33d7c <__aeabi_dadd+0x108>
   34254:	000c      	movs	r4, r1
   34256:	0017      	movs	r7, r2
   34258:	e590      	b.n	33d7c <__aeabi_dadd+0x108>
   3425a:	4656      	mov	r6, sl
   3425c:	0023      	movs	r3, r4
   3425e:	3e20      	subs	r6, #32
   34260:	40f3      	lsrs	r3, r6
   34262:	4699      	mov	r9, r3
   34264:	4653      	mov	r3, sl
   34266:	2b20      	cmp	r3, #32
   34268:	d00e      	beq.n	34288 <__aeabi_dadd+0x614>
   3426a:	2340      	movs	r3, #64	; 0x40
   3426c:	4656      	mov	r6, sl
   3426e:	1b9b      	subs	r3, r3, r6
   34270:	409c      	lsls	r4, r3
   34272:	4327      	orrs	r7, r4
   34274:	1e7c      	subs	r4, r7, #1
   34276:	41a7      	sbcs	r7, r4
   34278:	464b      	mov	r3, r9
   3427a:	2400      	movs	r4, #0
   3427c:	431f      	orrs	r7, r3
   3427e:	e75f      	b.n	34140 <__aeabi_dadd+0x4cc>
   34280:	2400      	movs	r4, #0
   34282:	e7d2      	b.n	3422a <__aeabi_dadd+0x5b6>
   34284:	0017      	movs	r7, r2
   34286:	e5b2      	b.n	33dee <__aeabi_dadd+0x17a>
   34288:	2400      	movs	r4, #0
   3428a:	e7f2      	b.n	34272 <__aeabi_dadd+0x5fe>
   3428c:	000007ff 	.word	0x000007ff
   34290:	ff7fffff 	.word	0xff7fffff

00034294 <__aeabi_ddiv>:
   34294:	b5f0      	push	{r4, r5, r6, r7, lr}
   34296:	4657      	mov	r7, sl
   34298:	4645      	mov	r5, r8
   3429a:	46de      	mov	lr, fp
   3429c:	464e      	mov	r6, r9
   3429e:	b5e0      	push	{r5, r6, r7, lr}
   342a0:	004c      	lsls	r4, r1, #1
   342a2:	030e      	lsls	r6, r1, #12
   342a4:	b087      	sub	sp, #28
   342a6:	4683      	mov	fp, r0
   342a8:	4692      	mov	sl, r2
   342aa:	001d      	movs	r5, r3
   342ac:	4680      	mov	r8, r0
   342ae:	0b36      	lsrs	r6, r6, #12
   342b0:	0d64      	lsrs	r4, r4, #21
   342b2:	0fcf      	lsrs	r7, r1, #31
   342b4:	2c00      	cmp	r4, #0
   342b6:	d04f      	beq.n	34358 <__aeabi_ddiv+0xc4>
   342b8:	4b6f      	ldr	r3, [pc, #444]	; (34478 <__aeabi_ddiv+0x1e4>)
   342ba:	429c      	cmp	r4, r3
   342bc:	d035      	beq.n	3432a <__aeabi_ddiv+0x96>
   342be:	2380      	movs	r3, #128	; 0x80
   342c0:	0f42      	lsrs	r2, r0, #29
   342c2:	041b      	lsls	r3, r3, #16
   342c4:	00f6      	lsls	r6, r6, #3
   342c6:	4313      	orrs	r3, r2
   342c8:	4333      	orrs	r3, r6
   342ca:	4699      	mov	r9, r3
   342cc:	00c3      	lsls	r3, r0, #3
   342ce:	4698      	mov	r8, r3
   342d0:	4b6a      	ldr	r3, [pc, #424]	; (3447c <__aeabi_ddiv+0x1e8>)
   342d2:	2600      	movs	r6, #0
   342d4:	469c      	mov	ip, r3
   342d6:	2300      	movs	r3, #0
   342d8:	4464      	add	r4, ip
   342da:	9303      	str	r3, [sp, #12]
   342dc:	032b      	lsls	r3, r5, #12
   342de:	0b1b      	lsrs	r3, r3, #12
   342e0:	469b      	mov	fp, r3
   342e2:	006b      	lsls	r3, r5, #1
   342e4:	0fed      	lsrs	r5, r5, #31
   342e6:	4650      	mov	r0, sl
   342e8:	0d5b      	lsrs	r3, r3, #21
   342ea:	9501      	str	r5, [sp, #4]
   342ec:	d05e      	beq.n	343ac <__aeabi_ddiv+0x118>
   342ee:	4a62      	ldr	r2, [pc, #392]	; (34478 <__aeabi_ddiv+0x1e4>)
   342f0:	4293      	cmp	r3, r2
   342f2:	d053      	beq.n	3439c <__aeabi_ddiv+0x108>
   342f4:	465a      	mov	r2, fp
   342f6:	00d1      	lsls	r1, r2, #3
   342f8:	2280      	movs	r2, #128	; 0x80
   342fa:	0f40      	lsrs	r0, r0, #29
   342fc:	0412      	lsls	r2, r2, #16
   342fe:	4302      	orrs	r2, r0
   34300:	430a      	orrs	r2, r1
   34302:	4693      	mov	fp, r2
   34304:	4652      	mov	r2, sl
   34306:	00d1      	lsls	r1, r2, #3
   34308:	4a5c      	ldr	r2, [pc, #368]	; (3447c <__aeabi_ddiv+0x1e8>)
   3430a:	4694      	mov	ip, r2
   3430c:	2200      	movs	r2, #0
   3430e:	4463      	add	r3, ip
   34310:	0038      	movs	r0, r7
   34312:	4068      	eors	r0, r5
   34314:	4684      	mov	ip, r0
   34316:	9002      	str	r0, [sp, #8]
   34318:	1ae4      	subs	r4, r4, r3
   3431a:	4316      	orrs	r6, r2
   3431c:	2e0f      	cmp	r6, #15
   3431e:	d900      	bls.n	34322 <__aeabi_ddiv+0x8e>
   34320:	e0b4      	b.n	3448c <__aeabi_ddiv+0x1f8>
   34322:	4b57      	ldr	r3, [pc, #348]	; (34480 <__aeabi_ddiv+0x1ec>)
   34324:	00b6      	lsls	r6, r6, #2
   34326:	599b      	ldr	r3, [r3, r6]
   34328:	469f      	mov	pc, r3
   3432a:	0003      	movs	r3, r0
   3432c:	4333      	orrs	r3, r6
   3432e:	4699      	mov	r9, r3
   34330:	d16c      	bne.n	3440c <__aeabi_ddiv+0x178>
   34332:	2300      	movs	r3, #0
   34334:	4698      	mov	r8, r3
   34336:	3302      	adds	r3, #2
   34338:	2608      	movs	r6, #8
   3433a:	9303      	str	r3, [sp, #12]
   3433c:	e7ce      	b.n	342dc <__aeabi_ddiv+0x48>
   3433e:	46cb      	mov	fp, r9
   34340:	4641      	mov	r1, r8
   34342:	9a03      	ldr	r2, [sp, #12]
   34344:	9701      	str	r7, [sp, #4]
   34346:	2a02      	cmp	r2, #2
   34348:	d165      	bne.n	34416 <__aeabi_ddiv+0x182>
   3434a:	9b01      	ldr	r3, [sp, #4]
   3434c:	4c4a      	ldr	r4, [pc, #296]	; (34478 <__aeabi_ddiv+0x1e4>)
   3434e:	469c      	mov	ip, r3
   34350:	2300      	movs	r3, #0
   34352:	2200      	movs	r2, #0
   34354:	4698      	mov	r8, r3
   34356:	e06b      	b.n	34430 <__aeabi_ddiv+0x19c>
   34358:	0003      	movs	r3, r0
   3435a:	4333      	orrs	r3, r6
   3435c:	4699      	mov	r9, r3
   3435e:	d04e      	beq.n	343fe <__aeabi_ddiv+0x16a>
   34360:	2e00      	cmp	r6, #0
   34362:	d100      	bne.n	34366 <__aeabi_ddiv+0xd2>
   34364:	e1bc      	b.n	346e0 <__aeabi_ddiv+0x44c>
   34366:	0030      	movs	r0, r6
   34368:	f001 f8ca 	bl	35500 <__clzsi2>
   3436c:	0003      	movs	r3, r0
   3436e:	3b0b      	subs	r3, #11
   34370:	2b1c      	cmp	r3, #28
   34372:	dd00      	ble.n	34376 <__aeabi_ddiv+0xe2>
   34374:	e1ac      	b.n	346d0 <__aeabi_ddiv+0x43c>
   34376:	221d      	movs	r2, #29
   34378:	1ad3      	subs	r3, r2, r3
   3437a:	465a      	mov	r2, fp
   3437c:	0001      	movs	r1, r0
   3437e:	40da      	lsrs	r2, r3
   34380:	3908      	subs	r1, #8
   34382:	408e      	lsls	r6, r1
   34384:	0013      	movs	r3, r2
   34386:	4333      	orrs	r3, r6
   34388:	4699      	mov	r9, r3
   3438a:	465b      	mov	r3, fp
   3438c:	408b      	lsls	r3, r1
   3438e:	4698      	mov	r8, r3
   34390:	2300      	movs	r3, #0
   34392:	4c3c      	ldr	r4, [pc, #240]	; (34484 <__aeabi_ddiv+0x1f0>)
   34394:	2600      	movs	r6, #0
   34396:	1a24      	subs	r4, r4, r0
   34398:	9303      	str	r3, [sp, #12]
   3439a:	e79f      	b.n	342dc <__aeabi_ddiv+0x48>
   3439c:	4651      	mov	r1, sl
   3439e:	465a      	mov	r2, fp
   343a0:	4311      	orrs	r1, r2
   343a2:	d129      	bne.n	343f8 <__aeabi_ddiv+0x164>
   343a4:	2200      	movs	r2, #0
   343a6:	4693      	mov	fp, r2
   343a8:	3202      	adds	r2, #2
   343aa:	e7b1      	b.n	34310 <__aeabi_ddiv+0x7c>
   343ac:	4659      	mov	r1, fp
   343ae:	4301      	orrs	r1, r0
   343b0:	d01e      	beq.n	343f0 <__aeabi_ddiv+0x15c>
   343b2:	465b      	mov	r3, fp
   343b4:	2b00      	cmp	r3, #0
   343b6:	d100      	bne.n	343ba <__aeabi_ddiv+0x126>
   343b8:	e19e      	b.n	346f8 <__aeabi_ddiv+0x464>
   343ba:	4658      	mov	r0, fp
   343bc:	f001 f8a0 	bl	35500 <__clzsi2>
   343c0:	0003      	movs	r3, r0
   343c2:	3b0b      	subs	r3, #11
   343c4:	2b1c      	cmp	r3, #28
   343c6:	dd00      	ble.n	343ca <__aeabi_ddiv+0x136>
   343c8:	e18f      	b.n	346ea <__aeabi_ddiv+0x456>
   343ca:	0002      	movs	r2, r0
   343cc:	4659      	mov	r1, fp
   343ce:	3a08      	subs	r2, #8
   343d0:	4091      	lsls	r1, r2
   343d2:	468b      	mov	fp, r1
   343d4:	211d      	movs	r1, #29
   343d6:	1acb      	subs	r3, r1, r3
   343d8:	4651      	mov	r1, sl
   343da:	40d9      	lsrs	r1, r3
   343dc:	000b      	movs	r3, r1
   343de:	4659      	mov	r1, fp
   343e0:	430b      	orrs	r3, r1
   343e2:	4651      	mov	r1, sl
   343e4:	469b      	mov	fp, r3
   343e6:	4091      	lsls	r1, r2
   343e8:	4b26      	ldr	r3, [pc, #152]	; (34484 <__aeabi_ddiv+0x1f0>)
   343ea:	2200      	movs	r2, #0
   343ec:	1a1b      	subs	r3, r3, r0
   343ee:	e78f      	b.n	34310 <__aeabi_ddiv+0x7c>
   343f0:	2300      	movs	r3, #0
   343f2:	2201      	movs	r2, #1
   343f4:	469b      	mov	fp, r3
   343f6:	e78b      	b.n	34310 <__aeabi_ddiv+0x7c>
   343f8:	4651      	mov	r1, sl
   343fa:	2203      	movs	r2, #3
   343fc:	e788      	b.n	34310 <__aeabi_ddiv+0x7c>
   343fe:	2300      	movs	r3, #0
   34400:	4698      	mov	r8, r3
   34402:	3301      	adds	r3, #1
   34404:	2604      	movs	r6, #4
   34406:	2400      	movs	r4, #0
   34408:	9303      	str	r3, [sp, #12]
   3440a:	e767      	b.n	342dc <__aeabi_ddiv+0x48>
   3440c:	2303      	movs	r3, #3
   3440e:	46b1      	mov	r9, r6
   34410:	9303      	str	r3, [sp, #12]
   34412:	260c      	movs	r6, #12
   34414:	e762      	b.n	342dc <__aeabi_ddiv+0x48>
   34416:	2a03      	cmp	r2, #3
   34418:	d100      	bne.n	3441c <__aeabi_ddiv+0x188>
   3441a:	e25c      	b.n	348d6 <__aeabi_ddiv+0x642>
   3441c:	9b01      	ldr	r3, [sp, #4]
   3441e:	2a01      	cmp	r2, #1
   34420:	d000      	beq.n	34424 <__aeabi_ddiv+0x190>
   34422:	e1e4      	b.n	347ee <__aeabi_ddiv+0x55a>
   34424:	4013      	ands	r3, r2
   34426:	469c      	mov	ip, r3
   34428:	2300      	movs	r3, #0
   3442a:	2400      	movs	r4, #0
   3442c:	2200      	movs	r2, #0
   3442e:	4698      	mov	r8, r3
   34430:	2100      	movs	r1, #0
   34432:	0312      	lsls	r2, r2, #12
   34434:	0b13      	lsrs	r3, r2, #12
   34436:	0d0a      	lsrs	r2, r1, #20
   34438:	0512      	lsls	r2, r2, #20
   3443a:	431a      	orrs	r2, r3
   3443c:	0523      	lsls	r3, r4, #20
   3443e:	4c12      	ldr	r4, [pc, #72]	; (34488 <__aeabi_ddiv+0x1f4>)
   34440:	4640      	mov	r0, r8
   34442:	4022      	ands	r2, r4
   34444:	4313      	orrs	r3, r2
   34446:	4662      	mov	r2, ip
   34448:	005b      	lsls	r3, r3, #1
   3444a:	07d2      	lsls	r2, r2, #31
   3444c:	085b      	lsrs	r3, r3, #1
   3444e:	4313      	orrs	r3, r2
   34450:	0019      	movs	r1, r3
   34452:	b007      	add	sp, #28
   34454:	bc3c      	pop	{r2, r3, r4, r5}
   34456:	4690      	mov	r8, r2
   34458:	4699      	mov	r9, r3
   3445a:	46a2      	mov	sl, r4
   3445c:	46ab      	mov	fp, r5
   3445e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34460:	2300      	movs	r3, #0
   34462:	2280      	movs	r2, #128	; 0x80
   34464:	469c      	mov	ip, r3
   34466:	0312      	lsls	r2, r2, #12
   34468:	4698      	mov	r8, r3
   3446a:	4c03      	ldr	r4, [pc, #12]	; (34478 <__aeabi_ddiv+0x1e4>)
   3446c:	e7e0      	b.n	34430 <__aeabi_ddiv+0x19c>
   3446e:	2300      	movs	r3, #0
   34470:	4c01      	ldr	r4, [pc, #4]	; (34478 <__aeabi_ddiv+0x1e4>)
   34472:	2200      	movs	r2, #0
   34474:	4698      	mov	r8, r3
   34476:	e7db      	b.n	34430 <__aeabi_ddiv+0x19c>
   34478:	000007ff 	.word	0x000007ff
   3447c:	fffffc01 	.word	0xfffffc01
   34480:	0003aebc 	.word	0x0003aebc
   34484:	fffffc0d 	.word	0xfffffc0d
   34488:	800fffff 	.word	0x800fffff
   3448c:	45d9      	cmp	r9, fp
   3448e:	d900      	bls.n	34492 <__aeabi_ddiv+0x1fe>
   34490:	e139      	b.n	34706 <__aeabi_ddiv+0x472>
   34492:	d100      	bne.n	34496 <__aeabi_ddiv+0x202>
   34494:	e134      	b.n	34700 <__aeabi_ddiv+0x46c>
   34496:	2300      	movs	r3, #0
   34498:	4646      	mov	r6, r8
   3449a:	464d      	mov	r5, r9
   3449c:	469a      	mov	sl, r3
   3449e:	3c01      	subs	r4, #1
   344a0:	465b      	mov	r3, fp
   344a2:	0e0a      	lsrs	r2, r1, #24
   344a4:	021b      	lsls	r3, r3, #8
   344a6:	431a      	orrs	r2, r3
   344a8:	020b      	lsls	r3, r1, #8
   344aa:	0c17      	lsrs	r7, r2, #16
   344ac:	9303      	str	r3, [sp, #12]
   344ae:	0413      	lsls	r3, r2, #16
   344b0:	0c1b      	lsrs	r3, r3, #16
   344b2:	0039      	movs	r1, r7
   344b4:	0028      	movs	r0, r5
   344b6:	4690      	mov	r8, r2
   344b8:	9301      	str	r3, [sp, #4]
   344ba:	f7ff f8ab 	bl	33614 <__udivsi3>
   344be:	0002      	movs	r2, r0
   344c0:	9b01      	ldr	r3, [sp, #4]
   344c2:	4683      	mov	fp, r0
   344c4:	435a      	muls	r2, r3
   344c6:	0028      	movs	r0, r5
   344c8:	0039      	movs	r1, r7
   344ca:	4691      	mov	r9, r2
   344cc:	f7ff f928 	bl	33720 <__aeabi_uidivmod>
   344d0:	0c35      	lsrs	r5, r6, #16
   344d2:	0409      	lsls	r1, r1, #16
   344d4:	430d      	orrs	r5, r1
   344d6:	45a9      	cmp	r9, r5
   344d8:	d90d      	bls.n	344f6 <__aeabi_ddiv+0x262>
   344da:	465b      	mov	r3, fp
   344dc:	4445      	add	r5, r8
   344de:	3b01      	subs	r3, #1
   344e0:	45a8      	cmp	r8, r5
   344e2:	d900      	bls.n	344e6 <__aeabi_ddiv+0x252>
   344e4:	e13a      	b.n	3475c <__aeabi_ddiv+0x4c8>
   344e6:	45a9      	cmp	r9, r5
   344e8:	d800      	bhi.n	344ec <__aeabi_ddiv+0x258>
   344ea:	e137      	b.n	3475c <__aeabi_ddiv+0x4c8>
   344ec:	2302      	movs	r3, #2
   344ee:	425b      	negs	r3, r3
   344f0:	469c      	mov	ip, r3
   344f2:	4445      	add	r5, r8
   344f4:	44e3      	add	fp, ip
   344f6:	464b      	mov	r3, r9
   344f8:	1aeb      	subs	r3, r5, r3
   344fa:	0039      	movs	r1, r7
   344fc:	0018      	movs	r0, r3
   344fe:	9304      	str	r3, [sp, #16]
   34500:	f7ff f888 	bl	33614 <__udivsi3>
   34504:	9b01      	ldr	r3, [sp, #4]
   34506:	0005      	movs	r5, r0
   34508:	4343      	muls	r3, r0
   3450a:	0039      	movs	r1, r7
   3450c:	9804      	ldr	r0, [sp, #16]
   3450e:	4699      	mov	r9, r3
   34510:	f7ff f906 	bl	33720 <__aeabi_uidivmod>
   34514:	0433      	lsls	r3, r6, #16
   34516:	0409      	lsls	r1, r1, #16
   34518:	0c1b      	lsrs	r3, r3, #16
   3451a:	430b      	orrs	r3, r1
   3451c:	4599      	cmp	r9, r3
   3451e:	d909      	bls.n	34534 <__aeabi_ddiv+0x2a0>
   34520:	4443      	add	r3, r8
   34522:	1e6a      	subs	r2, r5, #1
   34524:	4598      	cmp	r8, r3
   34526:	d900      	bls.n	3452a <__aeabi_ddiv+0x296>
   34528:	e11a      	b.n	34760 <__aeabi_ddiv+0x4cc>
   3452a:	4599      	cmp	r9, r3
   3452c:	d800      	bhi.n	34530 <__aeabi_ddiv+0x29c>
   3452e:	e117      	b.n	34760 <__aeabi_ddiv+0x4cc>
   34530:	3d02      	subs	r5, #2
   34532:	4443      	add	r3, r8
   34534:	464a      	mov	r2, r9
   34536:	1a9b      	subs	r3, r3, r2
   34538:	465a      	mov	r2, fp
   3453a:	0412      	lsls	r2, r2, #16
   3453c:	432a      	orrs	r2, r5
   3453e:	9903      	ldr	r1, [sp, #12]
   34540:	4693      	mov	fp, r2
   34542:	0c10      	lsrs	r0, r2, #16
   34544:	0c0a      	lsrs	r2, r1, #16
   34546:	4691      	mov	r9, r2
   34548:	0409      	lsls	r1, r1, #16
   3454a:	465a      	mov	r2, fp
   3454c:	0c09      	lsrs	r1, r1, #16
   3454e:	464e      	mov	r6, r9
   34550:	000d      	movs	r5, r1
   34552:	0412      	lsls	r2, r2, #16
   34554:	0c12      	lsrs	r2, r2, #16
   34556:	4345      	muls	r5, r0
   34558:	9105      	str	r1, [sp, #20]
   3455a:	4351      	muls	r1, r2
   3455c:	4372      	muls	r2, r6
   3455e:	4370      	muls	r0, r6
   34560:	1952      	adds	r2, r2, r5
   34562:	0c0e      	lsrs	r6, r1, #16
   34564:	18b2      	adds	r2, r6, r2
   34566:	4295      	cmp	r5, r2
   34568:	d903      	bls.n	34572 <__aeabi_ddiv+0x2de>
   3456a:	2580      	movs	r5, #128	; 0x80
   3456c:	026d      	lsls	r5, r5, #9
   3456e:	46ac      	mov	ip, r5
   34570:	4460      	add	r0, ip
   34572:	0c15      	lsrs	r5, r2, #16
   34574:	0409      	lsls	r1, r1, #16
   34576:	0412      	lsls	r2, r2, #16
   34578:	0c09      	lsrs	r1, r1, #16
   3457a:	1828      	adds	r0, r5, r0
   3457c:	1852      	adds	r2, r2, r1
   3457e:	4283      	cmp	r3, r0
   34580:	d200      	bcs.n	34584 <__aeabi_ddiv+0x2f0>
   34582:	e0ce      	b.n	34722 <__aeabi_ddiv+0x48e>
   34584:	d100      	bne.n	34588 <__aeabi_ddiv+0x2f4>
   34586:	e0c8      	b.n	3471a <__aeabi_ddiv+0x486>
   34588:	1a1d      	subs	r5, r3, r0
   3458a:	4653      	mov	r3, sl
   3458c:	1a9e      	subs	r6, r3, r2
   3458e:	45b2      	cmp	sl, r6
   34590:	4192      	sbcs	r2, r2
   34592:	4252      	negs	r2, r2
   34594:	1aab      	subs	r3, r5, r2
   34596:	469a      	mov	sl, r3
   34598:	4598      	cmp	r8, r3
   3459a:	d100      	bne.n	3459e <__aeabi_ddiv+0x30a>
   3459c:	e117      	b.n	347ce <__aeabi_ddiv+0x53a>
   3459e:	0039      	movs	r1, r7
   345a0:	0018      	movs	r0, r3
   345a2:	f7ff f837 	bl	33614 <__udivsi3>
   345a6:	9b01      	ldr	r3, [sp, #4]
   345a8:	0005      	movs	r5, r0
   345aa:	4343      	muls	r3, r0
   345ac:	0039      	movs	r1, r7
   345ae:	4650      	mov	r0, sl
   345b0:	9304      	str	r3, [sp, #16]
   345b2:	f7ff f8b5 	bl	33720 <__aeabi_uidivmod>
   345b6:	9804      	ldr	r0, [sp, #16]
   345b8:	040b      	lsls	r3, r1, #16
   345ba:	0c31      	lsrs	r1, r6, #16
   345bc:	4319      	orrs	r1, r3
   345be:	4288      	cmp	r0, r1
   345c0:	d909      	bls.n	345d6 <__aeabi_ddiv+0x342>
   345c2:	4441      	add	r1, r8
   345c4:	1e6b      	subs	r3, r5, #1
   345c6:	4588      	cmp	r8, r1
   345c8:	d900      	bls.n	345cc <__aeabi_ddiv+0x338>
   345ca:	e107      	b.n	347dc <__aeabi_ddiv+0x548>
   345cc:	4288      	cmp	r0, r1
   345ce:	d800      	bhi.n	345d2 <__aeabi_ddiv+0x33e>
   345d0:	e104      	b.n	347dc <__aeabi_ddiv+0x548>
   345d2:	3d02      	subs	r5, #2
   345d4:	4441      	add	r1, r8
   345d6:	9b04      	ldr	r3, [sp, #16]
   345d8:	1acb      	subs	r3, r1, r3
   345da:	0018      	movs	r0, r3
   345dc:	0039      	movs	r1, r7
   345de:	9304      	str	r3, [sp, #16]
   345e0:	f7ff f818 	bl	33614 <__udivsi3>
   345e4:	9b01      	ldr	r3, [sp, #4]
   345e6:	4682      	mov	sl, r0
   345e8:	4343      	muls	r3, r0
   345ea:	0039      	movs	r1, r7
   345ec:	9804      	ldr	r0, [sp, #16]
   345ee:	9301      	str	r3, [sp, #4]
   345f0:	f7ff f896 	bl	33720 <__aeabi_uidivmod>
   345f4:	9801      	ldr	r0, [sp, #4]
   345f6:	040b      	lsls	r3, r1, #16
   345f8:	0431      	lsls	r1, r6, #16
   345fa:	0c09      	lsrs	r1, r1, #16
   345fc:	4319      	orrs	r1, r3
   345fe:	4288      	cmp	r0, r1
   34600:	d90d      	bls.n	3461e <__aeabi_ddiv+0x38a>
   34602:	4653      	mov	r3, sl
   34604:	4441      	add	r1, r8
   34606:	3b01      	subs	r3, #1
   34608:	4588      	cmp	r8, r1
   3460a:	d900      	bls.n	3460e <__aeabi_ddiv+0x37a>
   3460c:	e0e8      	b.n	347e0 <__aeabi_ddiv+0x54c>
   3460e:	4288      	cmp	r0, r1
   34610:	d800      	bhi.n	34614 <__aeabi_ddiv+0x380>
   34612:	e0e5      	b.n	347e0 <__aeabi_ddiv+0x54c>
   34614:	2302      	movs	r3, #2
   34616:	425b      	negs	r3, r3
   34618:	469c      	mov	ip, r3
   3461a:	4441      	add	r1, r8
   3461c:	44e2      	add	sl, ip
   3461e:	9b01      	ldr	r3, [sp, #4]
   34620:	042d      	lsls	r5, r5, #16
   34622:	1ace      	subs	r6, r1, r3
   34624:	4651      	mov	r1, sl
   34626:	4329      	orrs	r1, r5
   34628:	9d05      	ldr	r5, [sp, #20]
   3462a:	464f      	mov	r7, r9
   3462c:	002a      	movs	r2, r5
   3462e:	040b      	lsls	r3, r1, #16
   34630:	0c08      	lsrs	r0, r1, #16
   34632:	0c1b      	lsrs	r3, r3, #16
   34634:	435a      	muls	r2, r3
   34636:	4345      	muls	r5, r0
   34638:	437b      	muls	r3, r7
   3463a:	4378      	muls	r0, r7
   3463c:	195b      	adds	r3, r3, r5
   3463e:	0c17      	lsrs	r7, r2, #16
   34640:	18fb      	adds	r3, r7, r3
   34642:	429d      	cmp	r5, r3
   34644:	d903      	bls.n	3464e <__aeabi_ddiv+0x3ba>
   34646:	2580      	movs	r5, #128	; 0x80
   34648:	026d      	lsls	r5, r5, #9
   3464a:	46ac      	mov	ip, r5
   3464c:	4460      	add	r0, ip
   3464e:	0c1d      	lsrs	r5, r3, #16
   34650:	0412      	lsls	r2, r2, #16
   34652:	041b      	lsls	r3, r3, #16
   34654:	0c12      	lsrs	r2, r2, #16
   34656:	1828      	adds	r0, r5, r0
   34658:	189b      	adds	r3, r3, r2
   3465a:	4286      	cmp	r6, r0
   3465c:	d200      	bcs.n	34660 <__aeabi_ddiv+0x3cc>
   3465e:	e093      	b.n	34788 <__aeabi_ddiv+0x4f4>
   34660:	d100      	bne.n	34664 <__aeabi_ddiv+0x3d0>
   34662:	e08e      	b.n	34782 <__aeabi_ddiv+0x4ee>
   34664:	2301      	movs	r3, #1
   34666:	4319      	orrs	r1, r3
   34668:	4ba0      	ldr	r3, [pc, #640]	; (348ec <__aeabi_ddiv+0x658>)
   3466a:	18e3      	adds	r3, r4, r3
   3466c:	2b00      	cmp	r3, #0
   3466e:	dc00      	bgt.n	34672 <__aeabi_ddiv+0x3de>
   34670:	e099      	b.n	347a6 <__aeabi_ddiv+0x512>
   34672:	074a      	lsls	r2, r1, #29
   34674:	d000      	beq.n	34678 <__aeabi_ddiv+0x3e4>
   34676:	e09e      	b.n	347b6 <__aeabi_ddiv+0x522>
   34678:	465a      	mov	r2, fp
   3467a:	01d2      	lsls	r2, r2, #7
   3467c:	d506      	bpl.n	3468c <__aeabi_ddiv+0x3f8>
   3467e:	465a      	mov	r2, fp
   34680:	4b9b      	ldr	r3, [pc, #620]	; (348f0 <__aeabi_ddiv+0x65c>)
   34682:	401a      	ands	r2, r3
   34684:	2380      	movs	r3, #128	; 0x80
   34686:	4693      	mov	fp, r2
   34688:	00db      	lsls	r3, r3, #3
   3468a:	18e3      	adds	r3, r4, r3
   3468c:	4a99      	ldr	r2, [pc, #612]	; (348f4 <__aeabi_ddiv+0x660>)
   3468e:	4293      	cmp	r3, r2
   34690:	dd68      	ble.n	34764 <__aeabi_ddiv+0x4d0>
   34692:	2301      	movs	r3, #1
   34694:	9a02      	ldr	r2, [sp, #8]
   34696:	4c98      	ldr	r4, [pc, #608]	; (348f8 <__aeabi_ddiv+0x664>)
   34698:	401a      	ands	r2, r3
   3469a:	2300      	movs	r3, #0
   3469c:	4694      	mov	ip, r2
   3469e:	4698      	mov	r8, r3
   346a0:	2200      	movs	r2, #0
   346a2:	e6c5      	b.n	34430 <__aeabi_ddiv+0x19c>
   346a4:	2280      	movs	r2, #128	; 0x80
   346a6:	464b      	mov	r3, r9
   346a8:	0312      	lsls	r2, r2, #12
   346aa:	4213      	tst	r3, r2
   346ac:	d00a      	beq.n	346c4 <__aeabi_ddiv+0x430>
   346ae:	465b      	mov	r3, fp
   346b0:	4213      	tst	r3, r2
   346b2:	d106      	bne.n	346c2 <__aeabi_ddiv+0x42e>
   346b4:	431a      	orrs	r2, r3
   346b6:	0312      	lsls	r2, r2, #12
   346b8:	0b12      	lsrs	r2, r2, #12
   346ba:	46ac      	mov	ip, r5
   346bc:	4688      	mov	r8, r1
   346be:	4c8e      	ldr	r4, [pc, #568]	; (348f8 <__aeabi_ddiv+0x664>)
   346c0:	e6b6      	b.n	34430 <__aeabi_ddiv+0x19c>
   346c2:	464b      	mov	r3, r9
   346c4:	431a      	orrs	r2, r3
   346c6:	0312      	lsls	r2, r2, #12
   346c8:	0b12      	lsrs	r2, r2, #12
   346ca:	46bc      	mov	ip, r7
   346cc:	4c8a      	ldr	r4, [pc, #552]	; (348f8 <__aeabi_ddiv+0x664>)
   346ce:	e6af      	b.n	34430 <__aeabi_ddiv+0x19c>
   346d0:	0003      	movs	r3, r0
   346d2:	465a      	mov	r2, fp
   346d4:	3b28      	subs	r3, #40	; 0x28
   346d6:	409a      	lsls	r2, r3
   346d8:	2300      	movs	r3, #0
   346da:	4691      	mov	r9, r2
   346dc:	4698      	mov	r8, r3
   346de:	e657      	b.n	34390 <__aeabi_ddiv+0xfc>
   346e0:	4658      	mov	r0, fp
   346e2:	f000 ff0d 	bl	35500 <__clzsi2>
   346e6:	3020      	adds	r0, #32
   346e8:	e640      	b.n	3436c <__aeabi_ddiv+0xd8>
   346ea:	0003      	movs	r3, r0
   346ec:	4652      	mov	r2, sl
   346ee:	3b28      	subs	r3, #40	; 0x28
   346f0:	409a      	lsls	r2, r3
   346f2:	2100      	movs	r1, #0
   346f4:	4693      	mov	fp, r2
   346f6:	e677      	b.n	343e8 <__aeabi_ddiv+0x154>
   346f8:	f000 ff02 	bl	35500 <__clzsi2>
   346fc:	3020      	adds	r0, #32
   346fe:	e65f      	b.n	343c0 <__aeabi_ddiv+0x12c>
   34700:	4588      	cmp	r8, r1
   34702:	d200      	bcs.n	34706 <__aeabi_ddiv+0x472>
   34704:	e6c7      	b.n	34496 <__aeabi_ddiv+0x202>
   34706:	464b      	mov	r3, r9
   34708:	07de      	lsls	r6, r3, #31
   3470a:	085d      	lsrs	r5, r3, #1
   3470c:	4643      	mov	r3, r8
   3470e:	085b      	lsrs	r3, r3, #1
   34710:	431e      	orrs	r6, r3
   34712:	4643      	mov	r3, r8
   34714:	07db      	lsls	r3, r3, #31
   34716:	469a      	mov	sl, r3
   34718:	e6c2      	b.n	344a0 <__aeabi_ddiv+0x20c>
   3471a:	2500      	movs	r5, #0
   3471c:	4592      	cmp	sl, r2
   3471e:	d300      	bcc.n	34722 <__aeabi_ddiv+0x48e>
   34720:	e733      	b.n	3458a <__aeabi_ddiv+0x2f6>
   34722:	9e03      	ldr	r6, [sp, #12]
   34724:	4659      	mov	r1, fp
   34726:	46b4      	mov	ip, r6
   34728:	44e2      	add	sl, ip
   3472a:	45b2      	cmp	sl, r6
   3472c:	41ad      	sbcs	r5, r5
   3472e:	426d      	negs	r5, r5
   34730:	4445      	add	r5, r8
   34732:	18eb      	adds	r3, r5, r3
   34734:	3901      	subs	r1, #1
   34736:	4598      	cmp	r8, r3
   34738:	d207      	bcs.n	3474a <__aeabi_ddiv+0x4b6>
   3473a:	4298      	cmp	r0, r3
   3473c:	d900      	bls.n	34740 <__aeabi_ddiv+0x4ac>
   3473e:	e07f      	b.n	34840 <__aeabi_ddiv+0x5ac>
   34740:	d100      	bne.n	34744 <__aeabi_ddiv+0x4b0>
   34742:	e0bc      	b.n	348be <__aeabi_ddiv+0x62a>
   34744:	1a1d      	subs	r5, r3, r0
   34746:	468b      	mov	fp, r1
   34748:	e71f      	b.n	3458a <__aeabi_ddiv+0x2f6>
   3474a:	4598      	cmp	r8, r3
   3474c:	d1fa      	bne.n	34744 <__aeabi_ddiv+0x4b0>
   3474e:	9d03      	ldr	r5, [sp, #12]
   34750:	4555      	cmp	r5, sl
   34752:	d9f2      	bls.n	3473a <__aeabi_ddiv+0x4a6>
   34754:	4643      	mov	r3, r8
   34756:	468b      	mov	fp, r1
   34758:	1a1d      	subs	r5, r3, r0
   3475a:	e716      	b.n	3458a <__aeabi_ddiv+0x2f6>
   3475c:	469b      	mov	fp, r3
   3475e:	e6ca      	b.n	344f6 <__aeabi_ddiv+0x262>
   34760:	0015      	movs	r5, r2
   34762:	e6e7      	b.n	34534 <__aeabi_ddiv+0x2a0>
   34764:	465a      	mov	r2, fp
   34766:	08c9      	lsrs	r1, r1, #3
   34768:	0752      	lsls	r2, r2, #29
   3476a:	430a      	orrs	r2, r1
   3476c:	055b      	lsls	r3, r3, #21
   3476e:	4690      	mov	r8, r2
   34770:	0d5c      	lsrs	r4, r3, #21
   34772:	465a      	mov	r2, fp
   34774:	2301      	movs	r3, #1
   34776:	9902      	ldr	r1, [sp, #8]
   34778:	0252      	lsls	r2, r2, #9
   3477a:	4019      	ands	r1, r3
   3477c:	0b12      	lsrs	r2, r2, #12
   3477e:	468c      	mov	ip, r1
   34780:	e656      	b.n	34430 <__aeabi_ddiv+0x19c>
   34782:	2b00      	cmp	r3, #0
   34784:	d100      	bne.n	34788 <__aeabi_ddiv+0x4f4>
   34786:	e76f      	b.n	34668 <__aeabi_ddiv+0x3d4>
   34788:	4446      	add	r6, r8
   3478a:	1e4a      	subs	r2, r1, #1
   3478c:	45b0      	cmp	r8, r6
   3478e:	d929      	bls.n	347e4 <__aeabi_ddiv+0x550>
   34790:	0011      	movs	r1, r2
   34792:	4286      	cmp	r6, r0
   34794:	d000      	beq.n	34798 <__aeabi_ddiv+0x504>
   34796:	e765      	b.n	34664 <__aeabi_ddiv+0x3d0>
   34798:	9a03      	ldr	r2, [sp, #12]
   3479a:	4293      	cmp	r3, r2
   3479c:	d000      	beq.n	347a0 <__aeabi_ddiv+0x50c>
   3479e:	e761      	b.n	34664 <__aeabi_ddiv+0x3d0>
   347a0:	e762      	b.n	34668 <__aeabi_ddiv+0x3d4>
   347a2:	2101      	movs	r1, #1
   347a4:	4249      	negs	r1, r1
   347a6:	2001      	movs	r0, #1
   347a8:	1ac2      	subs	r2, r0, r3
   347aa:	2a38      	cmp	r2, #56	; 0x38
   347ac:	dd21      	ble.n	347f2 <__aeabi_ddiv+0x55e>
   347ae:	9b02      	ldr	r3, [sp, #8]
   347b0:	4003      	ands	r3, r0
   347b2:	469c      	mov	ip, r3
   347b4:	e638      	b.n	34428 <__aeabi_ddiv+0x194>
   347b6:	220f      	movs	r2, #15
   347b8:	400a      	ands	r2, r1
   347ba:	2a04      	cmp	r2, #4
   347bc:	d100      	bne.n	347c0 <__aeabi_ddiv+0x52c>
   347be:	e75b      	b.n	34678 <__aeabi_ddiv+0x3e4>
   347c0:	000a      	movs	r2, r1
   347c2:	1d11      	adds	r1, r2, #4
   347c4:	4291      	cmp	r1, r2
   347c6:	4192      	sbcs	r2, r2
   347c8:	4252      	negs	r2, r2
   347ca:	4493      	add	fp, r2
   347cc:	e754      	b.n	34678 <__aeabi_ddiv+0x3e4>
   347ce:	4b47      	ldr	r3, [pc, #284]	; (348ec <__aeabi_ddiv+0x658>)
   347d0:	18e3      	adds	r3, r4, r3
   347d2:	2b00      	cmp	r3, #0
   347d4:	dde5      	ble.n	347a2 <__aeabi_ddiv+0x50e>
   347d6:	2201      	movs	r2, #1
   347d8:	4252      	negs	r2, r2
   347da:	e7f2      	b.n	347c2 <__aeabi_ddiv+0x52e>
   347dc:	001d      	movs	r5, r3
   347de:	e6fa      	b.n	345d6 <__aeabi_ddiv+0x342>
   347e0:	469a      	mov	sl, r3
   347e2:	e71c      	b.n	3461e <__aeabi_ddiv+0x38a>
   347e4:	42b0      	cmp	r0, r6
   347e6:	d839      	bhi.n	3485c <__aeabi_ddiv+0x5c8>
   347e8:	d06e      	beq.n	348c8 <__aeabi_ddiv+0x634>
   347ea:	0011      	movs	r1, r2
   347ec:	e73a      	b.n	34664 <__aeabi_ddiv+0x3d0>
   347ee:	9302      	str	r3, [sp, #8]
   347f0:	e73a      	b.n	34668 <__aeabi_ddiv+0x3d4>
   347f2:	2a1f      	cmp	r2, #31
   347f4:	dc3c      	bgt.n	34870 <__aeabi_ddiv+0x5dc>
   347f6:	2320      	movs	r3, #32
   347f8:	1a9b      	subs	r3, r3, r2
   347fa:	000c      	movs	r4, r1
   347fc:	4658      	mov	r0, fp
   347fe:	4099      	lsls	r1, r3
   34800:	4098      	lsls	r0, r3
   34802:	1e4b      	subs	r3, r1, #1
   34804:	4199      	sbcs	r1, r3
   34806:	465b      	mov	r3, fp
   34808:	40d4      	lsrs	r4, r2
   3480a:	40d3      	lsrs	r3, r2
   3480c:	4320      	orrs	r0, r4
   3480e:	4308      	orrs	r0, r1
   34810:	001a      	movs	r2, r3
   34812:	0743      	lsls	r3, r0, #29
   34814:	d009      	beq.n	3482a <__aeabi_ddiv+0x596>
   34816:	230f      	movs	r3, #15
   34818:	4003      	ands	r3, r0
   3481a:	2b04      	cmp	r3, #4
   3481c:	d005      	beq.n	3482a <__aeabi_ddiv+0x596>
   3481e:	0001      	movs	r1, r0
   34820:	1d08      	adds	r0, r1, #4
   34822:	4288      	cmp	r0, r1
   34824:	419b      	sbcs	r3, r3
   34826:	425b      	negs	r3, r3
   34828:	18d2      	adds	r2, r2, r3
   3482a:	0213      	lsls	r3, r2, #8
   3482c:	d53a      	bpl.n	348a4 <__aeabi_ddiv+0x610>
   3482e:	2301      	movs	r3, #1
   34830:	9a02      	ldr	r2, [sp, #8]
   34832:	2401      	movs	r4, #1
   34834:	401a      	ands	r2, r3
   34836:	2300      	movs	r3, #0
   34838:	4694      	mov	ip, r2
   3483a:	4698      	mov	r8, r3
   3483c:	2200      	movs	r2, #0
   3483e:	e5f7      	b.n	34430 <__aeabi_ddiv+0x19c>
   34840:	2102      	movs	r1, #2
   34842:	4249      	negs	r1, r1
   34844:	468c      	mov	ip, r1
   34846:	9d03      	ldr	r5, [sp, #12]
   34848:	44e3      	add	fp, ip
   3484a:	46ac      	mov	ip, r5
   3484c:	44e2      	add	sl, ip
   3484e:	45aa      	cmp	sl, r5
   34850:	41ad      	sbcs	r5, r5
   34852:	426d      	negs	r5, r5
   34854:	4445      	add	r5, r8
   34856:	18ed      	adds	r5, r5, r3
   34858:	1a2d      	subs	r5, r5, r0
   3485a:	e696      	b.n	3458a <__aeabi_ddiv+0x2f6>
   3485c:	1e8a      	subs	r2, r1, #2
   3485e:	9903      	ldr	r1, [sp, #12]
   34860:	004d      	lsls	r5, r1, #1
   34862:	428d      	cmp	r5, r1
   34864:	4189      	sbcs	r1, r1
   34866:	4249      	negs	r1, r1
   34868:	4441      	add	r1, r8
   3486a:	1876      	adds	r6, r6, r1
   3486c:	9503      	str	r5, [sp, #12]
   3486e:	e78f      	b.n	34790 <__aeabi_ddiv+0x4fc>
   34870:	201f      	movs	r0, #31
   34872:	4240      	negs	r0, r0
   34874:	1ac3      	subs	r3, r0, r3
   34876:	4658      	mov	r0, fp
   34878:	40d8      	lsrs	r0, r3
   3487a:	0003      	movs	r3, r0
   3487c:	2a20      	cmp	r2, #32
   3487e:	d028      	beq.n	348d2 <__aeabi_ddiv+0x63e>
   34880:	2040      	movs	r0, #64	; 0x40
   34882:	465d      	mov	r5, fp
   34884:	1a82      	subs	r2, r0, r2
   34886:	4095      	lsls	r5, r2
   34888:	4329      	orrs	r1, r5
   3488a:	1e4a      	subs	r2, r1, #1
   3488c:	4191      	sbcs	r1, r2
   3488e:	4319      	orrs	r1, r3
   34890:	2307      	movs	r3, #7
   34892:	2200      	movs	r2, #0
   34894:	400b      	ands	r3, r1
   34896:	d009      	beq.n	348ac <__aeabi_ddiv+0x618>
   34898:	230f      	movs	r3, #15
   3489a:	2200      	movs	r2, #0
   3489c:	400b      	ands	r3, r1
   3489e:	0008      	movs	r0, r1
   348a0:	2b04      	cmp	r3, #4
   348a2:	d1bd      	bne.n	34820 <__aeabi_ddiv+0x58c>
   348a4:	0001      	movs	r1, r0
   348a6:	0753      	lsls	r3, r2, #29
   348a8:	0252      	lsls	r2, r2, #9
   348aa:	0b12      	lsrs	r2, r2, #12
   348ac:	08c9      	lsrs	r1, r1, #3
   348ae:	4319      	orrs	r1, r3
   348b0:	2301      	movs	r3, #1
   348b2:	4688      	mov	r8, r1
   348b4:	9902      	ldr	r1, [sp, #8]
   348b6:	2400      	movs	r4, #0
   348b8:	4019      	ands	r1, r3
   348ba:	468c      	mov	ip, r1
   348bc:	e5b8      	b.n	34430 <__aeabi_ddiv+0x19c>
   348be:	4552      	cmp	r2, sl
   348c0:	d8be      	bhi.n	34840 <__aeabi_ddiv+0x5ac>
   348c2:	468b      	mov	fp, r1
   348c4:	2500      	movs	r5, #0
   348c6:	e660      	b.n	3458a <__aeabi_ddiv+0x2f6>
   348c8:	9d03      	ldr	r5, [sp, #12]
   348ca:	429d      	cmp	r5, r3
   348cc:	d3c6      	bcc.n	3485c <__aeabi_ddiv+0x5c8>
   348ce:	0011      	movs	r1, r2
   348d0:	e762      	b.n	34798 <__aeabi_ddiv+0x504>
   348d2:	2500      	movs	r5, #0
   348d4:	e7d8      	b.n	34888 <__aeabi_ddiv+0x5f4>
   348d6:	2280      	movs	r2, #128	; 0x80
   348d8:	465b      	mov	r3, fp
   348da:	0312      	lsls	r2, r2, #12
   348dc:	431a      	orrs	r2, r3
   348de:	9b01      	ldr	r3, [sp, #4]
   348e0:	0312      	lsls	r2, r2, #12
   348e2:	0b12      	lsrs	r2, r2, #12
   348e4:	469c      	mov	ip, r3
   348e6:	4688      	mov	r8, r1
   348e8:	4c03      	ldr	r4, [pc, #12]	; (348f8 <__aeabi_ddiv+0x664>)
   348ea:	e5a1      	b.n	34430 <__aeabi_ddiv+0x19c>
   348ec:	000003ff 	.word	0x000003ff
   348f0:	feffffff 	.word	0xfeffffff
   348f4:	000007fe 	.word	0x000007fe
   348f8:	000007ff 	.word	0x000007ff

000348fc <__aeabi_dmul>:
   348fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   348fe:	4657      	mov	r7, sl
   34900:	4645      	mov	r5, r8
   34902:	46de      	mov	lr, fp
   34904:	464e      	mov	r6, r9
   34906:	b5e0      	push	{r5, r6, r7, lr}
   34908:	030c      	lsls	r4, r1, #12
   3490a:	4698      	mov	r8, r3
   3490c:	004e      	lsls	r6, r1, #1
   3490e:	0b23      	lsrs	r3, r4, #12
   34910:	b087      	sub	sp, #28
   34912:	0007      	movs	r7, r0
   34914:	4692      	mov	sl, r2
   34916:	469b      	mov	fp, r3
   34918:	0d76      	lsrs	r6, r6, #21
   3491a:	0fcd      	lsrs	r5, r1, #31
   3491c:	2e00      	cmp	r6, #0
   3491e:	d06b      	beq.n	349f8 <__aeabi_dmul+0xfc>
   34920:	4b6d      	ldr	r3, [pc, #436]	; (34ad8 <__aeabi_dmul+0x1dc>)
   34922:	429e      	cmp	r6, r3
   34924:	d035      	beq.n	34992 <__aeabi_dmul+0x96>
   34926:	2480      	movs	r4, #128	; 0x80
   34928:	465b      	mov	r3, fp
   3492a:	0f42      	lsrs	r2, r0, #29
   3492c:	0424      	lsls	r4, r4, #16
   3492e:	00db      	lsls	r3, r3, #3
   34930:	4314      	orrs	r4, r2
   34932:	431c      	orrs	r4, r3
   34934:	00c3      	lsls	r3, r0, #3
   34936:	4699      	mov	r9, r3
   34938:	4b68      	ldr	r3, [pc, #416]	; (34adc <__aeabi_dmul+0x1e0>)
   3493a:	46a3      	mov	fp, r4
   3493c:	469c      	mov	ip, r3
   3493e:	2300      	movs	r3, #0
   34940:	2700      	movs	r7, #0
   34942:	4466      	add	r6, ip
   34944:	9302      	str	r3, [sp, #8]
   34946:	4643      	mov	r3, r8
   34948:	031c      	lsls	r4, r3, #12
   3494a:	005a      	lsls	r2, r3, #1
   3494c:	0fdb      	lsrs	r3, r3, #31
   3494e:	4650      	mov	r0, sl
   34950:	0b24      	lsrs	r4, r4, #12
   34952:	0d52      	lsrs	r2, r2, #21
   34954:	4698      	mov	r8, r3
   34956:	d100      	bne.n	3495a <__aeabi_dmul+0x5e>
   34958:	e076      	b.n	34a48 <__aeabi_dmul+0x14c>
   3495a:	4b5f      	ldr	r3, [pc, #380]	; (34ad8 <__aeabi_dmul+0x1dc>)
   3495c:	429a      	cmp	r2, r3
   3495e:	d06d      	beq.n	34a3c <__aeabi_dmul+0x140>
   34960:	2380      	movs	r3, #128	; 0x80
   34962:	0f41      	lsrs	r1, r0, #29
   34964:	041b      	lsls	r3, r3, #16
   34966:	430b      	orrs	r3, r1
   34968:	495c      	ldr	r1, [pc, #368]	; (34adc <__aeabi_dmul+0x1e0>)
   3496a:	00e4      	lsls	r4, r4, #3
   3496c:	468c      	mov	ip, r1
   3496e:	431c      	orrs	r4, r3
   34970:	00c3      	lsls	r3, r0, #3
   34972:	2000      	movs	r0, #0
   34974:	4462      	add	r2, ip
   34976:	4641      	mov	r1, r8
   34978:	18b6      	adds	r6, r6, r2
   3497a:	4069      	eors	r1, r5
   3497c:	1c72      	adds	r2, r6, #1
   3497e:	9101      	str	r1, [sp, #4]
   34980:	4694      	mov	ip, r2
   34982:	4307      	orrs	r7, r0
   34984:	2f0f      	cmp	r7, #15
   34986:	d900      	bls.n	3498a <__aeabi_dmul+0x8e>
   34988:	e0b0      	b.n	34aec <__aeabi_dmul+0x1f0>
   3498a:	4a55      	ldr	r2, [pc, #340]	; (34ae0 <__aeabi_dmul+0x1e4>)
   3498c:	00bf      	lsls	r7, r7, #2
   3498e:	59d2      	ldr	r2, [r2, r7]
   34990:	4697      	mov	pc, r2
   34992:	465b      	mov	r3, fp
   34994:	4303      	orrs	r3, r0
   34996:	4699      	mov	r9, r3
   34998:	d000      	beq.n	3499c <__aeabi_dmul+0xa0>
   3499a:	e087      	b.n	34aac <__aeabi_dmul+0x1b0>
   3499c:	2300      	movs	r3, #0
   3499e:	469b      	mov	fp, r3
   349a0:	3302      	adds	r3, #2
   349a2:	2708      	movs	r7, #8
   349a4:	9302      	str	r3, [sp, #8]
   349a6:	e7ce      	b.n	34946 <__aeabi_dmul+0x4a>
   349a8:	4642      	mov	r2, r8
   349aa:	9201      	str	r2, [sp, #4]
   349ac:	2802      	cmp	r0, #2
   349ae:	d067      	beq.n	34a80 <__aeabi_dmul+0x184>
   349b0:	2803      	cmp	r0, #3
   349b2:	d100      	bne.n	349b6 <__aeabi_dmul+0xba>
   349b4:	e20e      	b.n	34dd4 <__aeabi_dmul+0x4d8>
   349b6:	2801      	cmp	r0, #1
   349b8:	d000      	beq.n	349bc <__aeabi_dmul+0xc0>
   349ba:	e162      	b.n	34c82 <__aeabi_dmul+0x386>
   349bc:	2300      	movs	r3, #0
   349be:	2400      	movs	r4, #0
   349c0:	2200      	movs	r2, #0
   349c2:	4699      	mov	r9, r3
   349c4:	9901      	ldr	r1, [sp, #4]
   349c6:	4001      	ands	r1, r0
   349c8:	b2cd      	uxtb	r5, r1
   349ca:	2100      	movs	r1, #0
   349cc:	0312      	lsls	r2, r2, #12
   349ce:	0d0b      	lsrs	r3, r1, #20
   349d0:	0b12      	lsrs	r2, r2, #12
   349d2:	051b      	lsls	r3, r3, #20
   349d4:	4313      	orrs	r3, r2
   349d6:	4a43      	ldr	r2, [pc, #268]	; (34ae4 <__aeabi_dmul+0x1e8>)
   349d8:	0524      	lsls	r4, r4, #20
   349da:	4013      	ands	r3, r2
   349dc:	431c      	orrs	r4, r3
   349de:	0064      	lsls	r4, r4, #1
   349e0:	07ed      	lsls	r5, r5, #31
   349e2:	0864      	lsrs	r4, r4, #1
   349e4:	432c      	orrs	r4, r5
   349e6:	4648      	mov	r0, r9
   349e8:	0021      	movs	r1, r4
   349ea:	b007      	add	sp, #28
   349ec:	bc3c      	pop	{r2, r3, r4, r5}
   349ee:	4690      	mov	r8, r2
   349f0:	4699      	mov	r9, r3
   349f2:	46a2      	mov	sl, r4
   349f4:	46ab      	mov	fp, r5
   349f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   349f8:	4303      	orrs	r3, r0
   349fa:	4699      	mov	r9, r3
   349fc:	d04f      	beq.n	34a9e <__aeabi_dmul+0x1a2>
   349fe:	465b      	mov	r3, fp
   34a00:	2b00      	cmp	r3, #0
   34a02:	d100      	bne.n	34a06 <__aeabi_dmul+0x10a>
   34a04:	e189      	b.n	34d1a <__aeabi_dmul+0x41e>
   34a06:	4658      	mov	r0, fp
   34a08:	f000 fd7a 	bl	35500 <__clzsi2>
   34a0c:	0003      	movs	r3, r0
   34a0e:	3b0b      	subs	r3, #11
   34a10:	2b1c      	cmp	r3, #28
   34a12:	dd00      	ble.n	34a16 <__aeabi_dmul+0x11a>
   34a14:	e17a      	b.n	34d0c <__aeabi_dmul+0x410>
   34a16:	221d      	movs	r2, #29
   34a18:	1ad3      	subs	r3, r2, r3
   34a1a:	003a      	movs	r2, r7
   34a1c:	0001      	movs	r1, r0
   34a1e:	465c      	mov	r4, fp
   34a20:	40da      	lsrs	r2, r3
   34a22:	3908      	subs	r1, #8
   34a24:	408c      	lsls	r4, r1
   34a26:	0013      	movs	r3, r2
   34a28:	408f      	lsls	r7, r1
   34a2a:	4323      	orrs	r3, r4
   34a2c:	469b      	mov	fp, r3
   34a2e:	46b9      	mov	r9, r7
   34a30:	2300      	movs	r3, #0
   34a32:	4e2d      	ldr	r6, [pc, #180]	; (34ae8 <__aeabi_dmul+0x1ec>)
   34a34:	2700      	movs	r7, #0
   34a36:	1a36      	subs	r6, r6, r0
   34a38:	9302      	str	r3, [sp, #8]
   34a3a:	e784      	b.n	34946 <__aeabi_dmul+0x4a>
   34a3c:	4653      	mov	r3, sl
   34a3e:	4323      	orrs	r3, r4
   34a40:	d12a      	bne.n	34a98 <__aeabi_dmul+0x19c>
   34a42:	2400      	movs	r4, #0
   34a44:	2002      	movs	r0, #2
   34a46:	e796      	b.n	34976 <__aeabi_dmul+0x7a>
   34a48:	4653      	mov	r3, sl
   34a4a:	4323      	orrs	r3, r4
   34a4c:	d020      	beq.n	34a90 <__aeabi_dmul+0x194>
   34a4e:	2c00      	cmp	r4, #0
   34a50:	d100      	bne.n	34a54 <__aeabi_dmul+0x158>
   34a52:	e157      	b.n	34d04 <__aeabi_dmul+0x408>
   34a54:	0020      	movs	r0, r4
   34a56:	f000 fd53 	bl	35500 <__clzsi2>
   34a5a:	0003      	movs	r3, r0
   34a5c:	3b0b      	subs	r3, #11
   34a5e:	2b1c      	cmp	r3, #28
   34a60:	dd00      	ble.n	34a64 <__aeabi_dmul+0x168>
   34a62:	e149      	b.n	34cf8 <__aeabi_dmul+0x3fc>
   34a64:	211d      	movs	r1, #29
   34a66:	1acb      	subs	r3, r1, r3
   34a68:	4651      	mov	r1, sl
   34a6a:	0002      	movs	r2, r0
   34a6c:	40d9      	lsrs	r1, r3
   34a6e:	4653      	mov	r3, sl
   34a70:	3a08      	subs	r2, #8
   34a72:	4094      	lsls	r4, r2
   34a74:	4093      	lsls	r3, r2
   34a76:	430c      	orrs	r4, r1
   34a78:	4a1b      	ldr	r2, [pc, #108]	; (34ae8 <__aeabi_dmul+0x1ec>)
   34a7a:	1a12      	subs	r2, r2, r0
   34a7c:	2000      	movs	r0, #0
   34a7e:	e77a      	b.n	34976 <__aeabi_dmul+0x7a>
   34a80:	2501      	movs	r5, #1
   34a82:	9b01      	ldr	r3, [sp, #4]
   34a84:	4c14      	ldr	r4, [pc, #80]	; (34ad8 <__aeabi_dmul+0x1dc>)
   34a86:	401d      	ands	r5, r3
   34a88:	2300      	movs	r3, #0
   34a8a:	2200      	movs	r2, #0
   34a8c:	4699      	mov	r9, r3
   34a8e:	e79c      	b.n	349ca <__aeabi_dmul+0xce>
   34a90:	2400      	movs	r4, #0
   34a92:	2200      	movs	r2, #0
   34a94:	2001      	movs	r0, #1
   34a96:	e76e      	b.n	34976 <__aeabi_dmul+0x7a>
   34a98:	4653      	mov	r3, sl
   34a9a:	2003      	movs	r0, #3
   34a9c:	e76b      	b.n	34976 <__aeabi_dmul+0x7a>
   34a9e:	2300      	movs	r3, #0
   34aa0:	469b      	mov	fp, r3
   34aa2:	3301      	adds	r3, #1
   34aa4:	2704      	movs	r7, #4
   34aa6:	2600      	movs	r6, #0
   34aa8:	9302      	str	r3, [sp, #8]
   34aaa:	e74c      	b.n	34946 <__aeabi_dmul+0x4a>
   34aac:	2303      	movs	r3, #3
   34aae:	4681      	mov	r9, r0
   34ab0:	270c      	movs	r7, #12
   34ab2:	9302      	str	r3, [sp, #8]
   34ab4:	e747      	b.n	34946 <__aeabi_dmul+0x4a>
   34ab6:	2280      	movs	r2, #128	; 0x80
   34ab8:	2300      	movs	r3, #0
   34aba:	2500      	movs	r5, #0
   34abc:	0312      	lsls	r2, r2, #12
   34abe:	4699      	mov	r9, r3
   34ac0:	4c05      	ldr	r4, [pc, #20]	; (34ad8 <__aeabi_dmul+0x1dc>)
   34ac2:	e782      	b.n	349ca <__aeabi_dmul+0xce>
   34ac4:	465c      	mov	r4, fp
   34ac6:	464b      	mov	r3, r9
   34ac8:	9802      	ldr	r0, [sp, #8]
   34aca:	e76f      	b.n	349ac <__aeabi_dmul+0xb0>
   34acc:	465c      	mov	r4, fp
   34ace:	464b      	mov	r3, r9
   34ad0:	9501      	str	r5, [sp, #4]
   34ad2:	9802      	ldr	r0, [sp, #8]
   34ad4:	e76a      	b.n	349ac <__aeabi_dmul+0xb0>
   34ad6:	46c0      	nop			; (mov r8, r8)
   34ad8:	000007ff 	.word	0x000007ff
   34adc:	fffffc01 	.word	0xfffffc01
   34ae0:	0003aefc 	.word	0x0003aefc
   34ae4:	800fffff 	.word	0x800fffff
   34ae8:	fffffc0d 	.word	0xfffffc0d
   34aec:	464a      	mov	r2, r9
   34aee:	4649      	mov	r1, r9
   34af0:	0c17      	lsrs	r7, r2, #16
   34af2:	0c1a      	lsrs	r2, r3, #16
   34af4:	041b      	lsls	r3, r3, #16
   34af6:	0c1b      	lsrs	r3, r3, #16
   34af8:	0408      	lsls	r0, r1, #16
   34afa:	0019      	movs	r1, r3
   34afc:	0c00      	lsrs	r0, r0, #16
   34afe:	4341      	muls	r1, r0
   34b00:	0015      	movs	r5, r2
   34b02:	4688      	mov	r8, r1
   34b04:	0019      	movs	r1, r3
   34b06:	437d      	muls	r5, r7
   34b08:	4379      	muls	r1, r7
   34b0a:	9503      	str	r5, [sp, #12]
   34b0c:	4689      	mov	r9, r1
   34b0e:	0029      	movs	r1, r5
   34b10:	0015      	movs	r5, r2
   34b12:	4345      	muls	r5, r0
   34b14:	444d      	add	r5, r9
   34b16:	9502      	str	r5, [sp, #8]
   34b18:	4645      	mov	r5, r8
   34b1a:	0c2d      	lsrs	r5, r5, #16
   34b1c:	46aa      	mov	sl, r5
   34b1e:	9d02      	ldr	r5, [sp, #8]
   34b20:	4455      	add	r5, sl
   34b22:	45a9      	cmp	r9, r5
   34b24:	d906      	bls.n	34b34 <__aeabi_dmul+0x238>
   34b26:	468a      	mov	sl, r1
   34b28:	2180      	movs	r1, #128	; 0x80
   34b2a:	0249      	lsls	r1, r1, #9
   34b2c:	4689      	mov	r9, r1
   34b2e:	44ca      	add	sl, r9
   34b30:	4651      	mov	r1, sl
   34b32:	9103      	str	r1, [sp, #12]
   34b34:	0c29      	lsrs	r1, r5, #16
   34b36:	9104      	str	r1, [sp, #16]
   34b38:	4641      	mov	r1, r8
   34b3a:	0409      	lsls	r1, r1, #16
   34b3c:	042d      	lsls	r5, r5, #16
   34b3e:	0c09      	lsrs	r1, r1, #16
   34b40:	4688      	mov	r8, r1
   34b42:	0029      	movs	r1, r5
   34b44:	0c25      	lsrs	r5, r4, #16
   34b46:	0424      	lsls	r4, r4, #16
   34b48:	4441      	add	r1, r8
   34b4a:	0c24      	lsrs	r4, r4, #16
   34b4c:	9105      	str	r1, [sp, #20]
   34b4e:	0021      	movs	r1, r4
   34b50:	4341      	muls	r1, r0
   34b52:	4688      	mov	r8, r1
   34b54:	0021      	movs	r1, r4
   34b56:	4379      	muls	r1, r7
   34b58:	468a      	mov	sl, r1
   34b5a:	4368      	muls	r0, r5
   34b5c:	4641      	mov	r1, r8
   34b5e:	4450      	add	r0, sl
   34b60:	4681      	mov	r9, r0
   34b62:	0c08      	lsrs	r0, r1, #16
   34b64:	4448      	add	r0, r9
   34b66:	436f      	muls	r7, r5
   34b68:	4582      	cmp	sl, r0
   34b6a:	d903      	bls.n	34b74 <__aeabi_dmul+0x278>
   34b6c:	2180      	movs	r1, #128	; 0x80
   34b6e:	0249      	lsls	r1, r1, #9
   34b70:	4689      	mov	r9, r1
   34b72:	444f      	add	r7, r9
   34b74:	0c01      	lsrs	r1, r0, #16
   34b76:	4689      	mov	r9, r1
   34b78:	0039      	movs	r1, r7
   34b7a:	4449      	add	r1, r9
   34b7c:	9102      	str	r1, [sp, #8]
   34b7e:	4641      	mov	r1, r8
   34b80:	040f      	lsls	r7, r1, #16
   34b82:	9904      	ldr	r1, [sp, #16]
   34b84:	0c3f      	lsrs	r7, r7, #16
   34b86:	4688      	mov	r8, r1
   34b88:	0400      	lsls	r0, r0, #16
   34b8a:	19c0      	adds	r0, r0, r7
   34b8c:	4480      	add	r8, r0
   34b8e:	4641      	mov	r1, r8
   34b90:	9104      	str	r1, [sp, #16]
   34b92:	4659      	mov	r1, fp
   34b94:	0c0f      	lsrs	r7, r1, #16
   34b96:	0409      	lsls	r1, r1, #16
   34b98:	0c09      	lsrs	r1, r1, #16
   34b9a:	4688      	mov	r8, r1
   34b9c:	4359      	muls	r1, r3
   34b9e:	468a      	mov	sl, r1
   34ba0:	0039      	movs	r1, r7
   34ba2:	4351      	muls	r1, r2
   34ba4:	4689      	mov	r9, r1
   34ba6:	4641      	mov	r1, r8
   34ba8:	434a      	muls	r2, r1
   34baa:	4651      	mov	r1, sl
   34bac:	0c09      	lsrs	r1, r1, #16
   34bae:	468b      	mov	fp, r1
   34bb0:	437b      	muls	r3, r7
   34bb2:	18d2      	adds	r2, r2, r3
   34bb4:	445a      	add	r2, fp
   34bb6:	4293      	cmp	r3, r2
   34bb8:	d903      	bls.n	34bc2 <__aeabi_dmul+0x2c6>
   34bba:	2380      	movs	r3, #128	; 0x80
   34bbc:	025b      	lsls	r3, r3, #9
   34bbe:	469b      	mov	fp, r3
   34bc0:	44d9      	add	r9, fp
   34bc2:	4651      	mov	r1, sl
   34bc4:	0409      	lsls	r1, r1, #16
   34bc6:	0c09      	lsrs	r1, r1, #16
   34bc8:	468a      	mov	sl, r1
   34bca:	4641      	mov	r1, r8
   34bcc:	4361      	muls	r1, r4
   34bce:	437c      	muls	r4, r7
   34bd0:	0c13      	lsrs	r3, r2, #16
   34bd2:	0412      	lsls	r2, r2, #16
   34bd4:	444b      	add	r3, r9
   34bd6:	4452      	add	r2, sl
   34bd8:	46a1      	mov	r9, r4
   34bda:	468a      	mov	sl, r1
   34bdc:	003c      	movs	r4, r7
   34bde:	4641      	mov	r1, r8
   34be0:	436c      	muls	r4, r5
   34be2:	434d      	muls	r5, r1
   34be4:	4651      	mov	r1, sl
   34be6:	444d      	add	r5, r9
   34be8:	0c0f      	lsrs	r7, r1, #16
   34bea:	197d      	adds	r5, r7, r5
   34bec:	45a9      	cmp	r9, r5
   34bee:	d903      	bls.n	34bf8 <__aeabi_dmul+0x2fc>
   34bf0:	2180      	movs	r1, #128	; 0x80
   34bf2:	0249      	lsls	r1, r1, #9
   34bf4:	4688      	mov	r8, r1
   34bf6:	4444      	add	r4, r8
   34bf8:	9f04      	ldr	r7, [sp, #16]
   34bfa:	9903      	ldr	r1, [sp, #12]
   34bfc:	46b8      	mov	r8, r7
   34bfe:	4441      	add	r1, r8
   34c00:	468b      	mov	fp, r1
   34c02:	4583      	cmp	fp, r0
   34c04:	4180      	sbcs	r0, r0
   34c06:	4241      	negs	r1, r0
   34c08:	4688      	mov	r8, r1
   34c0a:	4651      	mov	r1, sl
   34c0c:	0408      	lsls	r0, r1, #16
   34c0e:	042f      	lsls	r7, r5, #16
   34c10:	0c00      	lsrs	r0, r0, #16
   34c12:	183f      	adds	r7, r7, r0
   34c14:	4658      	mov	r0, fp
   34c16:	9902      	ldr	r1, [sp, #8]
   34c18:	1810      	adds	r0, r2, r0
   34c1a:	4689      	mov	r9, r1
   34c1c:	4290      	cmp	r0, r2
   34c1e:	4192      	sbcs	r2, r2
   34c20:	444f      	add	r7, r9
   34c22:	46ba      	mov	sl, r7
   34c24:	4252      	negs	r2, r2
   34c26:	4699      	mov	r9, r3
   34c28:	4693      	mov	fp, r2
   34c2a:	44c2      	add	sl, r8
   34c2c:	44d1      	add	r9, sl
   34c2e:	44cb      	add	fp, r9
   34c30:	428f      	cmp	r7, r1
   34c32:	41bf      	sbcs	r7, r7
   34c34:	45c2      	cmp	sl, r8
   34c36:	4189      	sbcs	r1, r1
   34c38:	4599      	cmp	r9, r3
   34c3a:	419b      	sbcs	r3, r3
   34c3c:	4593      	cmp	fp, r2
   34c3e:	4192      	sbcs	r2, r2
   34c40:	427f      	negs	r7, r7
   34c42:	4249      	negs	r1, r1
   34c44:	0c2d      	lsrs	r5, r5, #16
   34c46:	4252      	negs	r2, r2
   34c48:	430f      	orrs	r7, r1
   34c4a:	425b      	negs	r3, r3
   34c4c:	4313      	orrs	r3, r2
   34c4e:	197f      	adds	r7, r7, r5
   34c50:	18ff      	adds	r7, r7, r3
   34c52:	465b      	mov	r3, fp
   34c54:	193c      	adds	r4, r7, r4
   34c56:	0ddb      	lsrs	r3, r3, #23
   34c58:	9a05      	ldr	r2, [sp, #20]
   34c5a:	0264      	lsls	r4, r4, #9
   34c5c:	431c      	orrs	r4, r3
   34c5e:	0243      	lsls	r3, r0, #9
   34c60:	4313      	orrs	r3, r2
   34c62:	1e5d      	subs	r5, r3, #1
   34c64:	41ab      	sbcs	r3, r5
   34c66:	465a      	mov	r2, fp
   34c68:	0dc0      	lsrs	r0, r0, #23
   34c6a:	4303      	orrs	r3, r0
   34c6c:	0252      	lsls	r2, r2, #9
   34c6e:	4313      	orrs	r3, r2
   34c70:	01e2      	lsls	r2, r4, #7
   34c72:	d556      	bpl.n	34d22 <__aeabi_dmul+0x426>
   34c74:	2001      	movs	r0, #1
   34c76:	085a      	lsrs	r2, r3, #1
   34c78:	4003      	ands	r3, r0
   34c7a:	4313      	orrs	r3, r2
   34c7c:	07e2      	lsls	r2, r4, #31
   34c7e:	4313      	orrs	r3, r2
   34c80:	0864      	lsrs	r4, r4, #1
   34c82:	485a      	ldr	r0, [pc, #360]	; (34dec <__aeabi_dmul+0x4f0>)
   34c84:	4460      	add	r0, ip
   34c86:	2800      	cmp	r0, #0
   34c88:	dd4d      	ble.n	34d26 <__aeabi_dmul+0x42a>
   34c8a:	075a      	lsls	r2, r3, #29
   34c8c:	d009      	beq.n	34ca2 <__aeabi_dmul+0x3a6>
   34c8e:	220f      	movs	r2, #15
   34c90:	401a      	ands	r2, r3
   34c92:	2a04      	cmp	r2, #4
   34c94:	d005      	beq.n	34ca2 <__aeabi_dmul+0x3a6>
   34c96:	1d1a      	adds	r2, r3, #4
   34c98:	429a      	cmp	r2, r3
   34c9a:	419b      	sbcs	r3, r3
   34c9c:	425b      	negs	r3, r3
   34c9e:	18e4      	adds	r4, r4, r3
   34ca0:	0013      	movs	r3, r2
   34ca2:	01e2      	lsls	r2, r4, #7
   34ca4:	d504      	bpl.n	34cb0 <__aeabi_dmul+0x3b4>
   34ca6:	2080      	movs	r0, #128	; 0x80
   34ca8:	4a51      	ldr	r2, [pc, #324]	; (34df0 <__aeabi_dmul+0x4f4>)
   34caa:	00c0      	lsls	r0, r0, #3
   34cac:	4014      	ands	r4, r2
   34cae:	4460      	add	r0, ip
   34cb0:	4a50      	ldr	r2, [pc, #320]	; (34df4 <__aeabi_dmul+0x4f8>)
   34cb2:	4290      	cmp	r0, r2
   34cb4:	dd00      	ble.n	34cb8 <__aeabi_dmul+0x3bc>
   34cb6:	e6e3      	b.n	34a80 <__aeabi_dmul+0x184>
   34cb8:	2501      	movs	r5, #1
   34cba:	08db      	lsrs	r3, r3, #3
   34cbc:	0762      	lsls	r2, r4, #29
   34cbe:	431a      	orrs	r2, r3
   34cc0:	0264      	lsls	r4, r4, #9
   34cc2:	9b01      	ldr	r3, [sp, #4]
   34cc4:	4691      	mov	r9, r2
   34cc6:	0b22      	lsrs	r2, r4, #12
   34cc8:	0544      	lsls	r4, r0, #21
   34cca:	0d64      	lsrs	r4, r4, #21
   34ccc:	401d      	ands	r5, r3
   34cce:	e67c      	b.n	349ca <__aeabi_dmul+0xce>
   34cd0:	2280      	movs	r2, #128	; 0x80
   34cd2:	4659      	mov	r1, fp
   34cd4:	0312      	lsls	r2, r2, #12
   34cd6:	4211      	tst	r1, r2
   34cd8:	d008      	beq.n	34cec <__aeabi_dmul+0x3f0>
   34cda:	4214      	tst	r4, r2
   34cdc:	d106      	bne.n	34cec <__aeabi_dmul+0x3f0>
   34cde:	4322      	orrs	r2, r4
   34ce0:	0312      	lsls	r2, r2, #12
   34ce2:	0b12      	lsrs	r2, r2, #12
   34ce4:	4645      	mov	r5, r8
   34ce6:	4699      	mov	r9, r3
   34ce8:	4c43      	ldr	r4, [pc, #268]	; (34df8 <__aeabi_dmul+0x4fc>)
   34cea:	e66e      	b.n	349ca <__aeabi_dmul+0xce>
   34cec:	465b      	mov	r3, fp
   34cee:	431a      	orrs	r2, r3
   34cf0:	0312      	lsls	r2, r2, #12
   34cf2:	0b12      	lsrs	r2, r2, #12
   34cf4:	4c40      	ldr	r4, [pc, #256]	; (34df8 <__aeabi_dmul+0x4fc>)
   34cf6:	e668      	b.n	349ca <__aeabi_dmul+0xce>
   34cf8:	0003      	movs	r3, r0
   34cfa:	4654      	mov	r4, sl
   34cfc:	3b28      	subs	r3, #40	; 0x28
   34cfe:	409c      	lsls	r4, r3
   34d00:	2300      	movs	r3, #0
   34d02:	e6b9      	b.n	34a78 <__aeabi_dmul+0x17c>
   34d04:	f000 fbfc 	bl	35500 <__clzsi2>
   34d08:	3020      	adds	r0, #32
   34d0a:	e6a6      	b.n	34a5a <__aeabi_dmul+0x15e>
   34d0c:	0003      	movs	r3, r0
   34d0e:	3b28      	subs	r3, #40	; 0x28
   34d10:	409f      	lsls	r7, r3
   34d12:	2300      	movs	r3, #0
   34d14:	46bb      	mov	fp, r7
   34d16:	4699      	mov	r9, r3
   34d18:	e68a      	b.n	34a30 <__aeabi_dmul+0x134>
   34d1a:	f000 fbf1 	bl	35500 <__clzsi2>
   34d1e:	3020      	adds	r0, #32
   34d20:	e674      	b.n	34a0c <__aeabi_dmul+0x110>
   34d22:	46b4      	mov	ip, r6
   34d24:	e7ad      	b.n	34c82 <__aeabi_dmul+0x386>
   34d26:	2501      	movs	r5, #1
   34d28:	1a2a      	subs	r2, r5, r0
   34d2a:	2a38      	cmp	r2, #56	; 0x38
   34d2c:	dd06      	ble.n	34d3c <__aeabi_dmul+0x440>
   34d2e:	9b01      	ldr	r3, [sp, #4]
   34d30:	2400      	movs	r4, #0
   34d32:	401d      	ands	r5, r3
   34d34:	2300      	movs	r3, #0
   34d36:	2200      	movs	r2, #0
   34d38:	4699      	mov	r9, r3
   34d3a:	e646      	b.n	349ca <__aeabi_dmul+0xce>
   34d3c:	2a1f      	cmp	r2, #31
   34d3e:	dc21      	bgt.n	34d84 <__aeabi_dmul+0x488>
   34d40:	2520      	movs	r5, #32
   34d42:	0020      	movs	r0, r4
   34d44:	1aad      	subs	r5, r5, r2
   34d46:	001e      	movs	r6, r3
   34d48:	40ab      	lsls	r3, r5
   34d4a:	40a8      	lsls	r0, r5
   34d4c:	40d6      	lsrs	r6, r2
   34d4e:	1e5d      	subs	r5, r3, #1
   34d50:	41ab      	sbcs	r3, r5
   34d52:	4330      	orrs	r0, r6
   34d54:	4318      	orrs	r0, r3
   34d56:	40d4      	lsrs	r4, r2
   34d58:	0743      	lsls	r3, r0, #29
   34d5a:	d009      	beq.n	34d70 <__aeabi_dmul+0x474>
   34d5c:	230f      	movs	r3, #15
   34d5e:	4003      	ands	r3, r0
   34d60:	2b04      	cmp	r3, #4
   34d62:	d005      	beq.n	34d70 <__aeabi_dmul+0x474>
   34d64:	0003      	movs	r3, r0
   34d66:	1d18      	adds	r0, r3, #4
   34d68:	4298      	cmp	r0, r3
   34d6a:	419b      	sbcs	r3, r3
   34d6c:	425b      	negs	r3, r3
   34d6e:	18e4      	adds	r4, r4, r3
   34d70:	0223      	lsls	r3, r4, #8
   34d72:	d521      	bpl.n	34db8 <__aeabi_dmul+0x4bc>
   34d74:	2501      	movs	r5, #1
   34d76:	9b01      	ldr	r3, [sp, #4]
   34d78:	2401      	movs	r4, #1
   34d7a:	401d      	ands	r5, r3
   34d7c:	2300      	movs	r3, #0
   34d7e:	2200      	movs	r2, #0
   34d80:	4699      	mov	r9, r3
   34d82:	e622      	b.n	349ca <__aeabi_dmul+0xce>
   34d84:	251f      	movs	r5, #31
   34d86:	0021      	movs	r1, r4
   34d88:	426d      	negs	r5, r5
   34d8a:	1a28      	subs	r0, r5, r0
   34d8c:	40c1      	lsrs	r1, r0
   34d8e:	0008      	movs	r0, r1
   34d90:	2a20      	cmp	r2, #32
   34d92:	d01d      	beq.n	34dd0 <__aeabi_dmul+0x4d4>
   34d94:	355f      	adds	r5, #95	; 0x5f
   34d96:	1aaa      	subs	r2, r5, r2
   34d98:	4094      	lsls	r4, r2
   34d9a:	4323      	orrs	r3, r4
   34d9c:	1e5c      	subs	r4, r3, #1
   34d9e:	41a3      	sbcs	r3, r4
   34da0:	2507      	movs	r5, #7
   34da2:	4303      	orrs	r3, r0
   34da4:	401d      	ands	r5, r3
   34da6:	2200      	movs	r2, #0
   34da8:	2d00      	cmp	r5, #0
   34daa:	d009      	beq.n	34dc0 <__aeabi_dmul+0x4c4>
   34dac:	220f      	movs	r2, #15
   34dae:	2400      	movs	r4, #0
   34db0:	401a      	ands	r2, r3
   34db2:	0018      	movs	r0, r3
   34db4:	2a04      	cmp	r2, #4
   34db6:	d1d6      	bne.n	34d66 <__aeabi_dmul+0x46a>
   34db8:	0003      	movs	r3, r0
   34dba:	0765      	lsls	r5, r4, #29
   34dbc:	0264      	lsls	r4, r4, #9
   34dbe:	0b22      	lsrs	r2, r4, #12
   34dc0:	08db      	lsrs	r3, r3, #3
   34dc2:	432b      	orrs	r3, r5
   34dc4:	2501      	movs	r5, #1
   34dc6:	4699      	mov	r9, r3
   34dc8:	9b01      	ldr	r3, [sp, #4]
   34dca:	2400      	movs	r4, #0
   34dcc:	401d      	ands	r5, r3
   34dce:	e5fc      	b.n	349ca <__aeabi_dmul+0xce>
   34dd0:	2400      	movs	r4, #0
   34dd2:	e7e2      	b.n	34d9a <__aeabi_dmul+0x49e>
   34dd4:	2280      	movs	r2, #128	; 0x80
   34dd6:	2501      	movs	r5, #1
   34dd8:	0312      	lsls	r2, r2, #12
   34dda:	4322      	orrs	r2, r4
   34ddc:	9901      	ldr	r1, [sp, #4]
   34dde:	0312      	lsls	r2, r2, #12
   34de0:	0b12      	lsrs	r2, r2, #12
   34de2:	400d      	ands	r5, r1
   34de4:	4699      	mov	r9, r3
   34de6:	4c04      	ldr	r4, [pc, #16]	; (34df8 <__aeabi_dmul+0x4fc>)
   34de8:	e5ef      	b.n	349ca <__aeabi_dmul+0xce>
   34dea:	46c0      	nop			; (mov r8, r8)
   34dec:	000003ff 	.word	0x000003ff
   34df0:	feffffff 	.word	0xfeffffff
   34df4:	000007fe 	.word	0x000007fe
   34df8:	000007ff 	.word	0x000007ff

00034dfc <__aeabi_dsub>:
   34dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
   34dfe:	4646      	mov	r6, r8
   34e00:	46d6      	mov	lr, sl
   34e02:	464f      	mov	r7, r9
   34e04:	030c      	lsls	r4, r1, #12
   34e06:	b5c0      	push	{r6, r7, lr}
   34e08:	0fcd      	lsrs	r5, r1, #31
   34e0a:	004e      	lsls	r6, r1, #1
   34e0c:	0a61      	lsrs	r1, r4, #9
   34e0e:	0f44      	lsrs	r4, r0, #29
   34e10:	430c      	orrs	r4, r1
   34e12:	00c1      	lsls	r1, r0, #3
   34e14:	0058      	lsls	r0, r3, #1
   34e16:	0d40      	lsrs	r0, r0, #21
   34e18:	4684      	mov	ip, r0
   34e1a:	468a      	mov	sl, r1
   34e1c:	000f      	movs	r7, r1
   34e1e:	0319      	lsls	r1, r3, #12
   34e20:	0f50      	lsrs	r0, r2, #29
   34e22:	0a49      	lsrs	r1, r1, #9
   34e24:	4301      	orrs	r1, r0
   34e26:	48c6      	ldr	r0, [pc, #792]	; (35140 <__aeabi_dsub+0x344>)
   34e28:	0d76      	lsrs	r6, r6, #21
   34e2a:	46a8      	mov	r8, r5
   34e2c:	0fdb      	lsrs	r3, r3, #31
   34e2e:	00d2      	lsls	r2, r2, #3
   34e30:	4584      	cmp	ip, r0
   34e32:	d100      	bne.n	34e36 <__aeabi_dsub+0x3a>
   34e34:	e0d8      	b.n	34fe8 <__aeabi_dsub+0x1ec>
   34e36:	2001      	movs	r0, #1
   34e38:	4043      	eors	r3, r0
   34e3a:	42ab      	cmp	r3, r5
   34e3c:	d100      	bne.n	34e40 <__aeabi_dsub+0x44>
   34e3e:	e0a6      	b.n	34f8e <__aeabi_dsub+0x192>
   34e40:	4660      	mov	r0, ip
   34e42:	1a35      	subs	r5, r6, r0
   34e44:	2d00      	cmp	r5, #0
   34e46:	dc00      	bgt.n	34e4a <__aeabi_dsub+0x4e>
   34e48:	e105      	b.n	35056 <__aeabi_dsub+0x25a>
   34e4a:	2800      	cmp	r0, #0
   34e4c:	d110      	bne.n	34e70 <__aeabi_dsub+0x74>
   34e4e:	000b      	movs	r3, r1
   34e50:	4313      	orrs	r3, r2
   34e52:	d100      	bne.n	34e56 <__aeabi_dsub+0x5a>
   34e54:	e0d7      	b.n	35006 <__aeabi_dsub+0x20a>
   34e56:	1e6b      	subs	r3, r5, #1
   34e58:	2b00      	cmp	r3, #0
   34e5a:	d000      	beq.n	34e5e <__aeabi_dsub+0x62>
   34e5c:	e14b      	b.n	350f6 <__aeabi_dsub+0x2fa>
   34e5e:	4653      	mov	r3, sl
   34e60:	1a9f      	subs	r7, r3, r2
   34e62:	45ba      	cmp	sl, r7
   34e64:	4180      	sbcs	r0, r0
   34e66:	1a64      	subs	r4, r4, r1
   34e68:	4240      	negs	r0, r0
   34e6a:	1a24      	subs	r4, r4, r0
   34e6c:	2601      	movs	r6, #1
   34e6e:	e01e      	b.n	34eae <__aeabi_dsub+0xb2>
   34e70:	4bb3      	ldr	r3, [pc, #716]	; (35140 <__aeabi_dsub+0x344>)
   34e72:	429e      	cmp	r6, r3
   34e74:	d048      	beq.n	34f08 <__aeabi_dsub+0x10c>
   34e76:	2380      	movs	r3, #128	; 0x80
   34e78:	041b      	lsls	r3, r3, #16
   34e7a:	4319      	orrs	r1, r3
   34e7c:	2d38      	cmp	r5, #56	; 0x38
   34e7e:	dd00      	ble.n	34e82 <__aeabi_dsub+0x86>
   34e80:	e119      	b.n	350b6 <__aeabi_dsub+0x2ba>
   34e82:	2d1f      	cmp	r5, #31
   34e84:	dd00      	ble.n	34e88 <__aeabi_dsub+0x8c>
   34e86:	e14c      	b.n	35122 <__aeabi_dsub+0x326>
   34e88:	2320      	movs	r3, #32
   34e8a:	000f      	movs	r7, r1
   34e8c:	1b5b      	subs	r3, r3, r5
   34e8e:	0010      	movs	r0, r2
   34e90:	409a      	lsls	r2, r3
   34e92:	409f      	lsls	r7, r3
   34e94:	40e8      	lsrs	r0, r5
   34e96:	1e53      	subs	r3, r2, #1
   34e98:	419a      	sbcs	r2, r3
   34e9a:	40e9      	lsrs	r1, r5
   34e9c:	4307      	orrs	r7, r0
   34e9e:	4317      	orrs	r7, r2
   34ea0:	4653      	mov	r3, sl
   34ea2:	1bdf      	subs	r7, r3, r7
   34ea4:	1a61      	subs	r1, r4, r1
   34ea6:	45ba      	cmp	sl, r7
   34ea8:	41a4      	sbcs	r4, r4
   34eaa:	4264      	negs	r4, r4
   34eac:	1b0c      	subs	r4, r1, r4
   34eae:	0223      	lsls	r3, r4, #8
   34eb0:	d400      	bmi.n	34eb4 <__aeabi_dsub+0xb8>
   34eb2:	e0c5      	b.n	35040 <__aeabi_dsub+0x244>
   34eb4:	0264      	lsls	r4, r4, #9
   34eb6:	0a65      	lsrs	r5, r4, #9
   34eb8:	2d00      	cmp	r5, #0
   34eba:	d100      	bne.n	34ebe <__aeabi_dsub+0xc2>
   34ebc:	e0f6      	b.n	350ac <__aeabi_dsub+0x2b0>
   34ebe:	0028      	movs	r0, r5
   34ec0:	f000 fb1e 	bl	35500 <__clzsi2>
   34ec4:	0003      	movs	r3, r0
   34ec6:	3b08      	subs	r3, #8
   34ec8:	2b1f      	cmp	r3, #31
   34eca:	dd00      	ble.n	34ece <__aeabi_dsub+0xd2>
   34ecc:	e0e9      	b.n	350a2 <__aeabi_dsub+0x2a6>
   34ece:	2220      	movs	r2, #32
   34ed0:	003c      	movs	r4, r7
   34ed2:	1ad2      	subs	r2, r2, r3
   34ed4:	409d      	lsls	r5, r3
   34ed6:	40d4      	lsrs	r4, r2
   34ed8:	409f      	lsls	r7, r3
   34eda:	4325      	orrs	r5, r4
   34edc:	429e      	cmp	r6, r3
   34ede:	dd00      	ble.n	34ee2 <__aeabi_dsub+0xe6>
   34ee0:	e0db      	b.n	3509a <__aeabi_dsub+0x29e>
   34ee2:	1b9e      	subs	r6, r3, r6
   34ee4:	1c73      	adds	r3, r6, #1
   34ee6:	2b1f      	cmp	r3, #31
   34ee8:	dd00      	ble.n	34eec <__aeabi_dsub+0xf0>
   34eea:	e10a      	b.n	35102 <__aeabi_dsub+0x306>
   34eec:	2220      	movs	r2, #32
   34eee:	0038      	movs	r0, r7
   34ef0:	1ad2      	subs	r2, r2, r3
   34ef2:	0029      	movs	r1, r5
   34ef4:	4097      	lsls	r7, r2
   34ef6:	002c      	movs	r4, r5
   34ef8:	4091      	lsls	r1, r2
   34efa:	40d8      	lsrs	r0, r3
   34efc:	1e7a      	subs	r2, r7, #1
   34efe:	4197      	sbcs	r7, r2
   34f00:	40dc      	lsrs	r4, r3
   34f02:	2600      	movs	r6, #0
   34f04:	4301      	orrs	r1, r0
   34f06:	430f      	orrs	r7, r1
   34f08:	077b      	lsls	r3, r7, #29
   34f0a:	d009      	beq.n	34f20 <__aeabi_dsub+0x124>
   34f0c:	230f      	movs	r3, #15
   34f0e:	403b      	ands	r3, r7
   34f10:	2b04      	cmp	r3, #4
   34f12:	d005      	beq.n	34f20 <__aeabi_dsub+0x124>
   34f14:	1d3b      	adds	r3, r7, #4
   34f16:	42bb      	cmp	r3, r7
   34f18:	41bf      	sbcs	r7, r7
   34f1a:	427f      	negs	r7, r7
   34f1c:	19e4      	adds	r4, r4, r7
   34f1e:	001f      	movs	r7, r3
   34f20:	0223      	lsls	r3, r4, #8
   34f22:	d525      	bpl.n	34f70 <__aeabi_dsub+0x174>
   34f24:	4b86      	ldr	r3, [pc, #536]	; (35140 <__aeabi_dsub+0x344>)
   34f26:	3601      	adds	r6, #1
   34f28:	429e      	cmp	r6, r3
   34f2a:	d100      	bne.n	34f2e <__aeabi_dsub+0x132>
   34f2c:	e0af      	b.n	3508e <__aeabi_dsub+0x292>
   34f2e:	4b85      	ldr	r3, [pc, #532]	; (35144 <__aeabi_dsub+0x348>)
   34f30:	2501      	movs	r5, #1
   34f32:	401c      	ands	r4, r3
   34f34:	4643      	mov	r3, r8
   34f36:	0762      	lsls	r2, r4, #29
   34f38:	08ff      	lsrs	r7, r7, #3
   34f3a:	0264      	lsls	r4, r4, #9
   34f3c:	0576      	lsls	r6, r6, #21
   34f3e:	4317      	orrs	r7, r2
   34f40:	0b24      	lsrs	r4, r4, #12
   34f42:	0d76      	lsrs	r6, r6, #21
   34f44:	401d      	ands	r5, r3
   34f46:	2100      	movs	r1, #0
   34f48:	0324      	lsls	r4, r4, #12
   34f4a:	0b23      	lsrs	r3, r4, #12
   34f4c:	0d0c      	lsrs	r4, r1, #20
   34f4e:	4a7e      	ldr	r2, [pc, #504]	; (35148 <__aeabi_dsub+0x34c>)
   34f50:	0524      	lsls	r4, r4, #20
   34f52:	431c      	orrs	r4, r3
   34f54:	4014      	ands	r4, r2
   34f56:	0533      	lsls	r3, r6, #20
   34f58:	4323      	orrs	r3, r4
   34f5a:	005b      	lsls	r3, r3, #1
   34f5c:	07ed      	lsls	r5, r5, #31
   34f5e:	085b      	lsrs	r3, r3, #1
   34f60:	432b      	orrs	r3, r5
   34f62:	0038      	movs	r0, r7
   34f64:	0019      	movs	r1, r3
   34f66:	bc1c      	pop	{r2, r3, r4}
   34f68:	4690      	mov	r8, r2
   34f6a:	4699      	mov	r9, r3
   34f6c:	46a2      	mov	sl, r4
   34f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34f70:	2501      	movs	r5, #1
   34f72:	4643      	mov	r3, r8
   34f74:	0762      	lsls	r2, r4, #29
   34f76:	08ff      	lsrs	r7, r7, #3
   34f78:	4317      	orrs	r7, r2
   34f7a:	08e4      	lsrs	r4, r4, #3
   34f7c:	401d      	ands	r5, r3
   34f7e:	4b70      	ldr	r3, [pc, #448]	; (35140 <__aeabi_dsub+0x344>)
   34f80:	429e      	cmp	r6, r3
   34f82:	d036      	beq.n	34ff2 <__aeabi_dsub+0x1f6>
   34f84:	0324      	lsls	r4, r4, #12
   34f86:	0576      	lsls	r6, r6, #21
   34f88:	0b24      	lsrs	r4, r4, #12
   34f8a:	0d76      	lsrs	r6, r6, #21
   34f8c:	e7db      	b.n	34f46 <__aeabi_dsub+0x14a>
   34f8e:	4663      	mov	r3, ip
   34f90:	1af3      	subs	r3, r6, r3
   34f92:	2b00      	cmp	r3, #0
   34f94:	dc00      	bgt.n	34f98 <__aeabi_dsub+0x19c>
   34f96:	e094      	b.n	350c2 <__aeabi_dsub+0x2c6>
   34f98:	4660      	mov	r0, ip
   34f9a:	2800      	cmp	r0, #0
   34f9c:	d035      	beq.n	3500a <__aeabi_dsub+0x20e>
   34f9e:	4868      	ldr	r0, [pc, #416]	; (35140 <__aeabi_dsub+0x344>)
   34fa0:	4286      	cmp	r6, r0
   34fa2:	d0b1      	beq.n	34f08 <__aeabi_dsub+0x10c>
   34fa4:	2780      	movs	r7, #128	; 0x80
   34fa6:	043f      	lsls	r7, r7, #16
   34fa8:	4339      	orrs	r1, r7
   34faa:	2b38      	cmp	r3, #56	; 0x38
   34fac:	dc00      	bgt.n	34fb0 <__aeabi_dsub+0x1b4>
   34fae:	e0fd      	b.n	351ac <__aeabi_dsub+0x3b0>
   34fb0:	430a      	orrs	r2, r1
   34fb2:	0017      	movs	r7, r2
   34fb4:	2100      	movs	r1, #0
   34fb6:	1e7a      	subs	r2, r7, #1
   34fb8:	4197      	sbcs	r7, r2
   34fba:	4457      	add	r7, sl
   34fbc:	4557      	cmp	r7, sl
   34fbe:	4180      	sbcs	r0, r0
   34fc0:	1909      	adds	r1, r1, r4
   34fc2:	4244      	negs	r4, r0
   34fc4:	190c      	adds	r4, r1, r4
   34fc6:	0223      	lsls	r3, r4, #8
   34fc8:	d53a      	bpl.n	35040 <__aeabi_dsub+0x244>
   34fca:	4b5d      	ldr	r3, [pc, #372]	; (35140 <__aeabi_dsub+0x344>)
   34fcc:	3601      	adds	r6, #1
   34fce:	429e      	cmp	r6, r3
   34fd0:	d100      	bne.n	34fd4 <__aeabi_dsub+0x1d8>
   34fd2:	e14b      	b.n	3526c <__aeabi_dsub+0x470>
   34fd4:	2201      	movs	r2, #1
   34fd6:	4b5b      	ldr	r3, [pc, #364]	; (35144 <__aeabi_dsub+0x348>)
   34fd8:	401c      	ands	r4, r3
   34fda:	087b      	lsrs	r3, r7, #1
   34fdc:	4017      	ands	r7, r2
   34fde:	431f      	orrs	r7, r3
   34fe0:	07e2      	lsls	r2, r4, #31
   34fe2:	4317      	orrs	r7, r2
   34fe4:	0864      	lsrs	r4, r4, #1
   34fe6:	e78f      	b.n	34f08 <__aeabi_dsub+0x10c>
   34fe8:	0008      	movs	r0, r1
   34fea:	4310      	orrs	r0, r2
   34fec:	d000      	beq.n	34ff0 <__aeabi_dsub+0x1f4>
   34fee:	e724      	b.n	34e3a <__aeabi_dsub+0x3e>
   34ff0:	e721      	b.n	34e36 <__aeabi_dsub+0x3a>
   34ff2:	0023      	movs	r3, r4
   34ff4:	433b      	orrs	r3, r7
   34ff6:	d100      	bne.n	34ffa <__aeabi_dsub+0x1fe>
   34ff8:	e1b9      	b.n	3536e <__aeabi_dsub+0x572>
   34ffa:	2280      	movs	r2, #128	; 0x80
   34ffc:	0312      	lsls	r2, r2, #12
   34ffe:	4314      	orrs	r4, r2
   35000:	0324      	lsls	r4, r4, #12
   35002:	0b24      	lsrs	r4, r4, #12
   35004:	e79f      	b.n	34f46 <__aeabi_dsub+0x14a>
   35006:	002e      	movs	r6, r5
   35008:	e77e      	b.n	34f08 <__aeabi_dsub+0x10c>
   3500a:	0008      	movs	r0, r1
   3500c:	4310      	orrs	r0, r2
   3500e:	d100      	bne.n	35012 <__aeabi_dsub+0x216>
   35010:	e0ca      	b.n	351a8 <__aeabi_dsub+0x3ac>
   35012:	1e58      	subs	r0, r3, #1
   35014:	4684      	mov	ip, r0
   35016:	2800      	cmp	r0, #0
   35018:	d000      	beq.n	3501c <__aeabi_dsub+0x220>
   3501a:	e0e7      	b.n	351ec <__aeabi_dsub+0x3f0>
   3501c:	4452      	add	r2, sl
   3501e:	4552      	cmp	r2, sl
   35020:	4180      	sbcs	r0, r0
   35022:	1864      	adds	r4, r4, r1
   35024:	4240      	negs	r0, r0
   35026:	1824      	adds	r4, r4, r0
   35028:	0017      	movs	r7, r2
   3502a:	2601      	movs	r6, #1
   3502c:	0223      	lsls	r3, r4, #8
   3502e:	d507      	bpl.n	35040 <__aeabi_dsub+0x244>
   35030:	2602      	movs	r6, #2
   35032:	e7cf      	b.n	34fd4 <__aeabi_dsub+0x1d8>
   35034:	4664      	mov	r4, ip
   35036:	432c      	orrs	r4, r5
   35038:	d100      	bne.n	3503c <__aeabi_dsub+0x240>
   3503a:	e1b3      	b.n	353a4 <__aeabi_dsub+0x5a8>
   3503c:	002c      	movs	r4, r5
   3503e:	4667      	mov	r7, ip
   35040:	077b      	lsls	r3, r7, #29
   35042:	d000      	beq.n	35046 <__aeabi_dsub+0x24a>
   35044:	e762      	b.n	34f0c <__aeabi_dsub+0x110>
   35046:	0763      	lsls	r3, r4, #29
   35048:	08ff      	lsrs	r7, r7, #3
   3504a:	431f      	orrs	r7, r3
   3504c:	2501      	movs	r5, #1
   3504e:	4643      	mov	r3, r8
   35050:	08e4      	lsrs	r4, r4, #3
   35052:	401d      	ands	r5, r3
   35054:	e793      	b.n	34f7e <__aeabi_dsub+0x182>
   35056:	2d00      	cmp	r5, #0
   35058:	d178      	bne.n	3514c <__aeabi_dsub+0x350>
   3505a:	1c75      	adds	r5, r6, #1
   3505c:	056d      	lsls	r5, r5, #21
   3505e:	0d6d      	lsrs	r5, r5, #21
   35060:	2d01      	cmp	r5, #1
   35062:	dc00      	bgt.n	35066 <__aeabi_dsub+0x26a>
   35064:	e0f2      	b.n	3524c <__aeabi_dsub+0x450>
   35066:	4650      	mov	r0, sl
   35068:	1a80      	subs	r0, r0, r2
   3506a:	4582      	cmp	sl, r0
   3506c:	41bf      	sbcs	r7, r7
   3506e:	1a65      	subs	r5, r4, r1
   35070:	427f      	negs	r7, r7
   35072:	1bed      	subs	r5, r5, r7
   35074:	4684      	mov	ip, r0
   35076:	0228      	lsls	r0, r5, #8
   35078:	d400      	bmi.n	3507c <__aeabi_dsub+0x280>
   3507a:	e08c      	b.n	35196 <__aeabi_dsub+0x39a>
   3507c:	4650      	mov	r0, sl
   3507e:	1a17      	subs	r7, r2, r0
   35080:	42ba      	cmp	r2, r7
   35082:	4192      	sbcs	r2, r2
   35084:	1b0c      	subs	r4, r1, r4
   35086:	4255      	negs	r5, r2
   35088:	1b65      	subs	r5, r4, r5
   3508a:	4698      	mov	r8, r3
   3508c:	e714      	b.n	34eb8 <__aeabi_dsub+0xbc>
   3508e:	2501      	movs	r5, #1
   35090:	4643      	mov	r3, r8
   35092:	2400      	movs	r4, #0
   35094:	401d      	ands	r5, r3
   35096:	2700      	movs	r7, #0
   35098:	e755      	b.n	34f46 <__aeabi_dsub+0x14a>
   3509a:	4c2a      	ldr	r4, [pc, #168]	; (35144 <__aeabi_dsub+0x348>)
   3509c:	1af6      	subs	r6, r6, r3
   3509e:	402c      	ands	r4, r5
   350a0:	e732      	b.n	34f08 <__aeabi_dsub+0x10c>
   350a2:	003d      	movs	r5, r7
   350a4:	3828      	subs	r0, #40	; 0x28
   350a6:	4085      	lsls	r5, r0
   350a8:	2700      	movs	r7, #0
   350aa:	e717      	b.n	34edc <__aeabi_dsub+0xe0>
   350ac:	0038      	movs	r0, r7
   350ae:	f000 fa27 	bl	35500 <__clzsi2>
   350b2:	3020      	adds	r0, #32
   350b4:	e706      	b.n	34ec4 <__aeabi_dsub+0xc8>
   350b6:	430a      	orrs	r2, r1
   350b8:	0017      	movs	r7, r2
   350ba:	2100      	movs	r1, #0
   350bc:	1e7a      	subs	r2, r7, #1
   350be:	4197      	sbcs	r7, r2
   350c0:	e6ee      	b.n	34ea0 <__aeabi_dsub+0xa4>
   350c2:	2b00      	cmp	r3, #0
   350c4:	d000      	beq.n	350c8 <__aeabi_dsub+0x2cc>
   350c6:	e0e5      	b.n	35294 <__aeabi_dsub+0x498>
   350c8:	1c73      	adds	r3, r6, #1
   350ca:	469c      	mov	ip, r3
   350cc:	055b      	lsls	r3, r3, #21
   350ce:	0d5b      	lsrs	r3, r3, #21
   350d0:	2b01      	cmp	r3, #1
   350d2:	dc00      	bgt.n	350d6 <__aeabi_dsub+0x2da>
   350d4:	e09f      	b.n	35216 <__aeabi_dsub+0x41a>
   350d6:	4b1a      	ldr	r3, [pc, #104]	; (35140 <__aeabi_dsub+0x344>)
   350d8:	459c      	cmp	ip, r3
   350da:	d100      	bne.n	350de <__aeabi_dsub+0x2e2>
   350dc:	e0c5      	b.n	3526a <__aeabi_dsub+0x46e>
   350de:	4452      	add	r2, sl
   350e0:	4552      	cmp	r2, sl
   350e2:	4180      	sbcs	r0, r0
   350e4:	1864      	adds	r4, r4, r1
   350e6:	4240      	negs	r0, r0
   350e8:	1824      	adds	r4, r4, r0
   350ea:	07e7      	lsls	r7, r4, #31
   350ec:	0852      	lsrs	r2, r2, #1
   350ee:	4317      	orrs	r7, r2
   350f0:	0864      	lsrs	r4, r4, #1
   350f2:	4666      	mov	r6, ip
   350f4:	e708      	b.n	34f08 <__aeabi_dsub+0x10c>
   350f6:	4812      	ldr	r0, [pc, #72]	; (35140 <__aeabi_dsub+0x344>)
   350f8:	4285      	cmp	r5, r0
   350fa:	d100      	bne.n	350fe <__aeabi_dsub+0x302>
   350fc:	e085      	b.n	3520a <__aeabi_dsub+0x40e>
   350fe:	001d      	movs	r5, r3
   35100:	e6bc      	b.n	34e7c <__aeabi_dsub+0x80>
   35102:	0029      	movs	r1, r5
   35104:	3e1f      	subs	r6, #31
   35106:	40f1      	lsrs	r1, r6
   35108:	2b20      	cmp	r3, #32
   3510a:	d100      	bne.n	3510e <__aeabi_dsub+0x312>
   3510c:	e07f      	b.n	3520e <__aeabi_dsub+0x412>
   3510e:	2240      	movs	r2, #64	; 0x40
   35110:	1ad3      	subs	r3, r2, r3
   35112:	409d      	lsls	r5, r3
   35114:	432f      	orrs	r7, r5
   35116:	1e7d      	subs	r5, r7, #1
   35118:	41af      	sbcs	r7, r5
   3511a:	2400      	movs	r4, #0
   3511c:	430f      	orrs	r7, r1
   3511e:	2600      	movs	r6, #0
   35120:	e78e      	b.n	35040 <__aeabi_dsub+0x244>
   35122:	002b      	movs	r3, r5
   35124:	000f      	movs	r7, r1
   35126:	3b20      	subs	r3, #32
   35128:	40df      	lsrs	r7, r3
   3512a:	2d20      	cmp	r5, #32
   3512c:	d071      	beq.n	35212 <__aeabi_dsub+0x416>
   3512e:	2340      	movs	r3, #64	; 0x40
   35130:	1b5d      	subs	r5, r3, r5
   35132:	40a9      	lsls	r1, r5
   35134:	430a      	orrs	r2, r1
   35136:	1e51      	subs	r1, r2, #1
   35138:	418a      	sbcs	r2, r1
   3513a:	2100      	movs	r1, #0
   3513c:	4317      	orrs	r7, r2
   3513e:	e6af      	b.n	34ea0 <__aeabi_dsub+0xa4>
   35140:	000007ff 	.word	0x000007ff
   35144:	ff7fffff 	.word	0xff7fffff
   35148:	800fffff 	.word	0x800fffff
   3514c:	2e00      	cmp	r6, #0
   3514e:	d03e      	beq.n	351ce <__aeabi_dsub+0x3d2>
   35150:	4eb3      	ldr	r6, [pc, #716]	; (35420 <__aeabi_dsub+0x624>)
   35152:	45b4      	cmp	ip, r6
   35154:	d045      	beq.n	351e2 <__aeabi_dsub+0x3e6>
   35156:	2680      	movs	r6, #128	; 0x80
   35158:	0436      	lsls	r6, r6, #16
   3515a:	426d      	negs	r5, r5
   3515c:	4334      	orrs	r4, r6
   3515e:	2d38      	cmp	r5, #56	; 0x38
   35160:	dd00      	ble.n	35164 <__aeabi_dsub+0x368>
   35162:	e0a8      	b.n	352b6 <__aeabi_dsub+0x4ba>
   35164:	2d1f      	cmp	r5, #31
   35166:	dd00      	ble.n	3516a <__aeabi_dsub+0x36e>
   35168:	e11f      	b.n	353aa <__aeabi_dsub+0x5ae>
   3516a:	2620      	movs	r6, #32
   3516c:	0027      	movs	r7, r4
   3516e:	4650      	mov	r0, sl
   35170:	1b76      	subs	r6, r6, r5
   35172:	40b7      	lsls	r7, r6
   35174:	40e8      	lsrs	r0, r5
   35176:	4307      	orrs	r7, r0
   35178:	4650      	mov	r0, sl
   3517a:	40b0      	lsls	r0, r6
   3517c:	1e46      	subs	r6, r0, #1
   3517e:	41b0      	sbcs	r0, r6
   35180:	40ec      	lsrs	r4, r5
   35182:	4338      	orrs	r0, r7
   35184:	1a17      	subs	r7, r2, r0
   35186:	42ba      	cmp	r2, r7
   35188:	4192      	sbcs	r2, r2
   3518a:	1b0c      	subs	r4, r1, r4
   3518c:	4252      	negs	r2, r2
   3518e:	1aa4      	subs	r4, r4, r2
   35190:	4666      	mov	r6, ip
   35192:	4698      	mov	r8, r3
   35194:	e68b      	b.n	34eae <__aeabi_dsub+0xb2>
   35196:	4664      	mov	r4, ip
   35198:	4667      	mov	r7, ip
   3519a:	432c      	orrs	r4, r5
   3519c:	d000      	beq.n	351a0 <__aeabi_dsub+0x3a4>
   3519e:	e68b      	b.n	34eb8 <__aeabi_dsub+0xbc>
   351a0:	2500      	movs	r5, #0
   351a2:	2600      	movs	r6, #0
   351a4:	2700      	movs	r7, #0
   351a6:	e6ea      	b.n	34f7e <__aeabi_dsub+0x182>
   351a8:	001e      	movs	r6, r3
   351aa:	e6ad      	b.n	34f08 <__aeabi_dsub+0x10c>
   351ac:	2b1f      	cmp	r3, #31
   351ae:	dc60      	bgt.n	35272 <__aeabi_dsub+0x476>
   351b0:	2720      	movs	r7, #32
   351b2:	1af8      	subs	r0, r7, r3
   351b4:	000f      	movs	r7, r1
   351b6:	4684      	mov	ip, r0
   351b8:	4087      	lsls	r7, r0
   351ba:	0010      	movs	r0, r2
   351bc:	40d8      	lsrs	r0, r3
   351be:	4307      	orrs	r7, r0
   351c0:	4660      	mov	r0, ip
   351c2:	4082      	lsls	r2, r0
   351c4:	1e50      	subs	r0, r2, #1
   351c6:	4182      	sbcs	r2, r0
   351c8:	40d9      	lsrs	r1, r3
   351ca:	4317      	orrs	r7, r2
   351cc:	e6f5      	b.n	34fba <__aeabi_dsub+0x1be>
   351ce:	0026      	movs	r6, r4
   351d0:	4650      	mov	r0, sl
   351d2:	4306      	orrs	r6, r0
   351d4:	d005      	beq.n	351e2 <__aeabi_dsub+0x3e6>
   351d6:	43ed      	mvns	r5, r5
   351d8:	2d00      	cmp	r5, #0
   351da:	d0d3      	beq.n	35184 <__aeabi_dsub+0x388>
   351dc:	4e90      	ldr	r6, [pc, #576]	; (35420 <__aeabi_dsub+0x624>)
   351de:	45b4      	cmp	ip, r6
   351e0:	d1bd      	bne.n	3515e <__aeabi_dsub+0x362>
   351e2:	000c      	movs	r4, r1
   351e4:	0017      	movs	r7, r2
   351e6:	4666      	mov	r6, ip
   351e8:	4698      	mov	r8, r3
   351ea:	e68d      	b.n	34f08 <__aeabi_dsub+0x10c>
   351ec:	488c      	ldr	r0, [pc, #560]	; (35420 <__aeabi_dsub+0x624>)
   351ee:	4283      	cmp	r3, r0
   351f0:	d00b      	beq.n	3520a <__aeabi_dsub+0x40e>
   351f2:	4663      	mov	r3, ip
   351f4:	e6d9      	b.n	34faa <__aeabi_dsub+0x1ae>
   351f6:	2d00      	cmp	r5, #0
   351f8:	d000      	beq.n	351fc <__aeabi_dsub+0x400>
   351fa:	e096      	b.n	3532a <__aeabi_dsub+0x52e>
   351fc:	0008      	movs	r0, r1
   351fe:	4310      	orrs	r0, r2
   35200:	d100      	bne.n	35204 <__aeabi_dsub+0x408>
   35202:	e0e2      	b.n	353ca <__aeabi_dsub+0x5ce>
   35204:	000c      	movs	r4, r1
   35206:	0017      	movs	r7, r2
   35208:	4698      	mov	r8, r3
   3520a:	4e85      	ldr	r6, [pc, #532]	; (35420 <__aeabi_dsub+0x624>)
   3520c:	e67c      	b.n	34f08 <__aeabi_dsub+0x10c>
   3520e:	2500      	movs	r5, #0
   35210:	e780      	b.n	35114 <__aeabi_dsub+0x318>
   35212:	2100      	movs	r1, #0
   35214:	e78e      	b.n	35134 <__aeabi_dsub+0x338>
   35216:	0023      	movs	r3, r4
   35218:	4650      	mov	r0, sl
   3521a:	4303      	orrs	r3, r0
   3521c:	2e00      	cmp	r6, #0
   3521e:	d000      	beq.n	35222 <__aeabi_dsub+0x426>
   35220:	e0a8      	b.n	35374 <__aeabi_dsub+0x578>
   35222:	2b00      	cmp	r3, #0
   35224:	d100      	bne.n	35228 <__aeabi_dsub+0x42c>
   35226:	e0de      	b.n	353e6 <__aeabi_dsub+0x5ea>
   35228:	000b      	movs	r3, r1
   3522a:	4313      	orrs	r3, r2
   3522c:	d100      	bne.n	35230 <__aeabi_dsub+0x434>
   3522e:	e66b      	b.n	34f08 <__aeabi_dsub+0x10c>
   35230:	4452      	add	r2, sl
   35232:	4552      	cmp	r2, sl
   35234:	4180      	sbcs	r0, r0
   35236:	1864      	adds	r4, r4, r1
   35238:	4240      	negs	r0, r0
   3523a:	1824      	adds	r4, r4, r0
   3523c:	0017      	movs	r7, r2
   3523e:	0223      	lsls	r3, r4, #8
   35240:	d400      	bmi.n	35244 <__aeabi_dsub+0x448>
   35242:	e6fd      	b.n	35040 <__aeabi_dsub+0x244>
   35244:	4b77      	ldr	r3, [pc, #476]	; (35424 <__aeabi_dsub+0x628>)
   35246:	4666      	mov	r6, ip
   35248:	401c      	ands	r4, r3
   3524a:	e65d      	b.n	34f08 <__aeabi_dsub+0x10c>
   3524c:	0025      	movs	r5, r4
   3524e:	4650      	mov	r0, sl
   35250:	4305      	orrs	r5, r0
   35252:	2e00      	cmp	r6, #0
   35254:	d1cf      	bne.n	351f6 <__aeabi_dsub+0x3fa>
   35256:	2d00      	cmp	r5, #0
   35258:	d14f      	bne.n	352fa <__aeabi_dsub+0x4fe>
   3525a:	000c      	movs	r4, r1
   3525c:	4314      	orrs	r4, r2
   3525e:	d100      	bne.n	35262 <__aeabi_dsub+0x466>
   35260:	e0a0      	b.n	353a4 <__aeabi_dsub+0x5a8>
   35262:	000c      	movs	r4, r1
   35264:	0017      	movs	r7, r2
   35266:	4698      	mov	r8, r3
   35268:	e64e      	b.n	34f08 <__aeabi_dsub+0x10c>
   3526a:	4666      	mov	r6, ip
   3526c:	2400      	movs	r4, #0
   3526e:	2700      	movs	r7, #0
   35270:	e685      	b.n	34f7e <__aeabi_dsub+0x182>
   35272:	001f      	movs	r7, r3
   35274:	0008      	movs	r0, r1
   35276:	3f20      	subs	r7, #32
   35278:	40f8      	lsrs	r0, r7
   3527a:	0007      	movs	r7, r0
   3527c:	2b20      	cmp	r3, #32
   3527e:	d100      	bne.n	35282 <__aeabi_dsub+0x486>
   35280:	e08e      	b.n	353a0 <__aeabi_dsub+0x5a4>
   35282:	2040      	movs	r0, #64	; 0x40
   35284:	1ac3      	subs	r3, r0, r3
   35286:	4099      	lsls	r1, r3
   35288:	430a      	orrs	r2, r1
   3528a:	1e51      	subs	r1, r2, #1
   3528c:	418a      	sbcs	r2, r1
   3528e:	2100      	movs	r1, #0
   35290:	4317      	orrs	r7, r2
   35292:	e692      	b.n	34fba <__aeabi_dsub+0x1be>
   35294:	2e00      	cmp	r6, #0
   35296:	d114      	bne.n	352c2 <__aeabi_dsub+0x4c6>
   35298:	0026      	movs	r6, r4
   3529a:	4650      	mov	r0, sl
   3529c:	4306      	orrs	r6, r0
   3529e:	d062      	beq.n	35366 <__aeabi_dsub+0x56a>
   352a0:	43db      	mvns	r3, r3
   352a2:	2b00      	cmp	r3, #0
   352a4:	d15c      	bne.n	35360 <__aeabi_dsub+0x564>
   352a6:	1887      	adds	r7, r0, r2
   352a8:	4297      	cmp	r7, r2
   352aa:	4192      	sbcs	r2, r2
   352ac:	1864      	adds	r4, r4, r1
   352ae:	4252      	negs	r2, r2
   352b0:	18a4      	adds	r4, r4, r2
   352b2:	4666      	mov	r6, ip
   352b4:	e687      	b.n	34fc6 <__aeabi_dsub+0x1ca>
   352b6:	4650      	mov	r0, sl
   352b8:	4320      	orrs	r0, r4
   352ba:	1e44      	subs	r4, r0, #1
   352bc:	41a0      	sbcs	r0, r4
   352be:	2400      	movs	r4, #0
   352c0:	e760      	b.n	35184 <__aeabi_dsub+0x388>
   352c2:	4e57      	ldr	r6, [pc, #348]	; (35420 <__aeabi_dsub+0x624>)
   352c4:	45b4      	cmp	ip, r6
   352c6:	d04e      	beq.n	35366 <__aeabi_dsub+0x56a>
   352c8:	2680      	movs	r6, #128	; 0x80
   352ca:	0436      	lsls	r6, r6, #16
   352cc:	425b      	negs	r3, r3
   352ce:	4334      	orrs	r4, r6
   352d0:	2b38      	cmp	r3, #56	; 0x38
   352d2:	dd00      	ble.n	352d6 <__aeabi_dsub+0x4da>
   352d4:	e07f      	b.n	353d6 <__aeabi_dsub+0x5da>
   352d6:	2b1f      	cmp	r3, #31
   352d8:	dd00      	ble.n	352dc <__aeabi_dsub+0x4e0>
   352da:	e08b      	b.n	353f4 <__aeabi_dsub+0x5f8>
   352dc:	2620      	movs	r6, #32
   352de:	0027      	movs	r7, r4
   352e0:	4650      	mov	r0, sl
   352e2:	1af6      	subs	r6, r6, r3
   352e4:	40b7      	lsls	r7, r6
   352e6:	40d8      	lsrs	r0, r3
   352e8:	4307      	orrs	r7, r0
   352ea:	4650      	mov	r0, sl
   352ec:	40b0      	lsls	r0, r6
   352ee:	1e46      	subs	r6, r0, #1
   352f0:	41b0      	sbcs	r0, r6
   352f2:	4307      	orrs	r7, r0
   352f4:	40dc      	lsrs	r4, r3
   352f6:	18bf      	adds	r7, r7, r2
   352f8:	e7d6      	b.n	352a8 <__aeabi_dsub+0x4ac>
   352fa:	000d      	movs	r5, r1
   352fc:	4315      	orrs	r5, r2
   352fe:	d100      	bne.n	35302 <__aeabi_dsub+0x506>
   35300:	e602      	b.n	34f08 <__aeabi_dsub+0x10c>
   35302:	4650      	mov	r0, sl
   35304:	1a80      	subs	r0, r0, r2
   35306:	4582      	cmp	sl, r0
   35308:	41bf      	sbcs	r7, r7
   3530a:	1a65      	subs	r5, r4, r1
   3530c:	427f      	negs	r7, r7
   3530e:	1bed      	subs	r5, r5, r7
   35310:	4684      	mov	ip, r0
   35312:	0228      	lsls	r0, r5, #8
   35314:	d400      	bmi.n	35318 <__aeabi_dsub+0x51c>
   35316:	e68d      	b.n	35034 <__aeabi_dsub+0x238>
   35318:	4650      	mov	r0, sl
   3531a:	1a17      	subs	r7, r2, r0
   3531c:	42ba      	cmp	r2, r7
   3531e:	4192      	sbcs	r2, r2
   35320:	1b0c      	subs	r4, r1, r4
   35322:	4252      	negs	r2, r2
   35324:	1aa4      	subs	r4, r4, r2
   35326:	4698      	mov	r8, r3
   35328:	e5ee      	b.n	34f08 <__aeabi_dsub+0x10c>
   3532a:	000d      	movs	r5, r1
   3532c:	4315      	orrs	r5, r2
   3532e:	d100      	bne.n	35332 <__aeabi_dsub+0x536>
   35330:	e76b      	b.n	3520a <__aeabi_dsub+0x40e>
   35332:	4650      	mov	r0, sl
   35334:	0767      	lsls	r7, r4, #29
   35336:	08c0      	lsrs	r0, r0, #3
   35338:	4307      	orrs	r7, r0
   3533a:	2080      	movs	r0, #128	; 0x80
   3533c:	08e4      	lsrs	r4, r4, #3
   3533e:	0300      	lsls	r0, r0, #12
   35340:	4204      	tst	r4, r0
   35342:	d007      	beq.n	35354 <__aeabi_dsub+0x558>
   35344:	08cd      	lsrs	r5, r1, #3
   35346:	4205      	tst	r5, r0
   35348:	d104      	bne.n	35354 <__aeabi_dsub+0x558>
   3534a:	002c      	movs	r4, r5
   3534c:	4698      	mov	r8, r3
   3534e:	08d7      	lsrs	r7, r2, #3
   35350:	0749      	lsls	r1, r1, #29
   35352:	430f      	orrs	r7, r1
   35354:	0f7b      	lsrs	r3, r7, #29
   35356:	00e4      	lsls	r4, r4, #3
   35358:	431c      	orrs	r4, r3
   3535a:	00ff      	lsls	r7, r7, #3
   3535c:	4e30      	ldr	r6, [pc, #192]	; (35420 <__aeabi_dsub+0x624>)
   3535e:	e5d3      	b.n	34f08 <__aeabi_dsub+0x10c>
   35360:	4e2f      	ldr	r6, [pc, #188]	; (35420 <__aeabi_dsub+0x624>)
   35362:	45b4      	cmp	ip, r6
   35364:	d1b4      	bne.n	352d0 <__aeabi_dsub+0x4d4>
   35366:	000c      	movs	r4, r1
   35368:	0017      	movs	r7, r2
   3536a:	4666      	mov	r6, ip
   3536c:	e5cc      	b.n	34f08 <__aeabi_dsub+0x10c>
   3536e:	2700      	movs	r7, #0
   35370:	2400      	movs	r4, #0
   35372:	e5e8      	b.n	34f46 <__aeabi_dsub+0x14a>
   35374:	2b00      	cmp	r3, #0
   35376:	d039      	beq.n	353ec <__aeabi_dsub+0x5f0>
   35378:	000b      	movs	r3, r1
   3537a:	4313      	orrs	r3, r2
   3537c:	d100      	bne.n	35380 <__aeabi_dsub+0x584>
   3537e:	e744      	b.n	3520a <__aeabi_dsub+0x40e>
   35380:	08c0      	lsrs	r0, r0, #3
   35382:	0767      	lsls	r7, r4, #29
   35384:	4307      	orrs	r7, r0
   35386:	2080      	movs	r0, #128	; 0x80
   35388:	08e4      	lsrs	r4, r4, #3
   3538a:	0300      	lsls	r0, r0, #12
   3538c:	4204      	tst	r4, r0
   3538e:	d0e1      	beq.n	35354 <__aeabi_dsub+0x558>
   35390:	08cb      	lsrs	r3, r1, #3
   35392:	4203      	tst	r3, r0
   35394:	d1de      	bne.n	35354 <__aeabi_dsub+0x558>
   35396:	08d7      	lsrs	r7, r2, #3
   35398:	0749      	lsls	r1, r1, #29
   3539a:	430f      	orrs	r7, r1
   3539c:	001c      	movs	r4, r3
   3539e:	e7d9      	b.n	35354 <__aeabi_dsub+0x558>
   353a0:	2100      	movs	r1, #0
   353a2:	e771      	b.n	35288 <__aeabi_dsub+0x48c>
   353a4:	2500      	movs	r5, #0
   353a6:	2700      	movs	r7, #0
   353a8:	e5e9      	b.n	34f7e <__aeabi_dsub+0x182>
   353aa:	002e      	movs	r6, r5
   353ac:	0027      	movs	r7, r4
   353ae:	3e20      	subs	r6, #32
   353b0:	40f7      	lsrs	r7, r6
   353b2:	2d20      	cmp	r5, #32
   353b4:	d02f      	beq.n	35416 <__aeabi_dsub+0x61a>
   353b6:	2640      	movs	r6, #64	; 0x40
   353b8:	1b75      	subs	r5, r6, r5
   353ba:	40ac      	lsls	r4, r5
   353bc:	4650      	mov	r0, sl
   353be:	4320      	orrs	r0, r4
   353c0:	1e44      	subs	r4, r0, #1
   353c2:	41a0      	sbcs	r0, r4
   353c4:	2400      	movs	r4, #0
   353c6:	4338      	orrs	r0, r7
   353c8:	e6dc      	b.n	35184 <__aeabi_dsub+0x388>
   353ca:	2480      	movs	r4, #128	; 0x80
   353cc:	2500      	movs	r5, #0
   353ce:	0324      	lsls	r4, r4, #12
   353d0:	4e13      	ldr	r6, [pc, #76]	; (35420 <__aeabi_dsub+0x624>)
   353d2:	2700      	movs	r7, #0
   353d4:	e5d3      	b.n	34f7e <__aeabi_dsub+0x182>
   353d6:	4650      	mov	r0, sl
   353d8:	4320      	orrs	r0, r4
   353da:	0007      	movs	r7, r0
   353dc:	1e78      	subs	r0, r7, #1
   353de:	4187      	sbcs	r7, r0
   353e0:	2400      	movs	r4, #0
   353e2:	18bf      	adds	r7, r7, r2
   353e4:	e760      	b.n	352a8 <__aeabi_dsub+0x4ac>
   353e6:	000c      	movs	r4, r1
   353e8:	0017      	movs	r7, r2
   353ea:	e58d      	b.n	34f08 <__aeabi_dsub+0x10c>
   353ec:	000c      	movs	r4, r1
   353ee:	0017      	movs	r7, r2
   353f0:	4e0b      	ldr	r6, [pc, #44]	; (35420 <__aeabi_dsub+0x624>)
   353f2:	e589      	b.n	34f08 <__aeabi_dsub+0x10c>
   353f4:	001e      	movs	r6, r3
   353f6:	0027      	movs	r7, r4
   353f8:	3e20      	subs	r6, #32
   353fa:	40f7      	lsrs	r7, r6
   353fc:	2b20      	cmp	r3, #32
   353fe:	d00c      	beq.n	3541a <__aeabi_dsub+0x61e>
   35400:	2640      	movs	r6, #64	; 0x40
   35402:	1af3      	subs	r3, r6, r3
   35404:	409c      	lsls	r4, r3
   35406:	4650      	mov	r0, sl
   35408:	4320      	orrs	r0, r4
   3540a:	1e44      	subs	r4, r0, #1
   3540c:	41a0      	sbcs	r0, r4
   3540e:	4307      	orrs	r7, r0
   35410:	2400      	movs	r4, #0
   35412:	18bf      	adds	r7, r7, r2
   35414:	e748      	b.n	352a8 <__aeabi_dsub+0x4ac>
   35416:	2400      	movs	r4, #0
   35418:	e7d0      	b.n	353bc <__aeabi_dsub+0x5c0>
   3541a:	2400      	movs	r4, #0
   3541c:	e7f3      	b.n	35406 <__aeabi_dsub+0x60a>
   3541e:	46c0      	nop			; (mov r8, r8)
   35420:	000007ff 	.word	0x000007ff
   35424:	ff7fffff 	.word	0xff7fffff

00035428 <__aeabi_d2iz>:
   35428:	b530      	push	{r4, r5, lr}
   3542a:	4d13      	ldr	r5, [pc, #76]	; (35478 <__aeabi_d2iz+0x50>)
   3542c:	030a      	lsls	r2, r1, #12
   3542e:	004b      	lsls	r3, r1, #1
   35430:	0b12      	lsrs	r2, r2, #12
   35432:	0d5b      	lsrs	r3, r3, #21
   35434:	0fc9      	lsrs	r1, r1, #31
   35436:	2400      	movs	r4, #0
   35438:	42ab      	cmp	r3, r5
   3543a:	dd10      	ble.n	3545e <__aeabi_d2iz+0x36>
   3543c:	4c0f      	ldr	r4, [pc, #60]	; (3547c <__aeabi_d2iz+0x54>)
   3543e:	42a3      	cmp	r3, r4
   35440:	dc0f      	bgt.n	35462 <__aeabi_d2iz+0x3a>
   35442:	2480      	movs	r4, #128	; 0x80
   35444:	4d0e      	ldr	r5, [pc, #56]	; (35480 <__aeabi_d2iz+0x58>)
   35446:	0364      	lsls	r4, r4, #13
   35448:	4322      	orrs	r2, r4
   3544a:	1aed      	subs	r5, r5, r3
   3544c:	2d1f      	cmp	r5, #31
   3544e:	dd0b      	ble.n	35468 <__aeabi_d2iz+0x40>
   35450:	480c      	ldr	r0, [pc, #48]	; (35484 <__aeabi_d2iz+0x5c>)
   35452:	1ac3      	subs	r3, r0, r3
   35454:	40da      	lsrs	r2, r3
   35456:	4254      	negs	r4, r2
   35458:	2900      	cmp	r1, #0
   3545a:	d100      	bne.n	3545e <__aeabi_d2iz+0x36>
   3545c:	0014      	movs	r4, r2
   3545e:	0020      	movs	r0, r4
   35460:	bd30      	pop	{r4, r5, pc}
   35462:	4b09      	ldr	r3, [pc, #36]	; (35488 <__aeabi_d2iz+0x60>)
   35464:	18cc      	adds	r4, r1, r3
   35466:	e7fa      	b.n	3545e <__aeabi_d2iz+0x36>
   35468:	4c08      	ldr	r4, [pc, #32]	; (3548c <__aeabi_d2iz+0x64>)
   3546a:	40e8      	lsrs	r0, r5
   3546c:	46a4      	mov	ip, r4
   3546e:	4463      	add	r3, ip
   35470:	409a      	lsls	r2, r3
   35472:	4302      	orrs	r2, r0
   35474:	e7ef      	b.n	35456 <__aeabi_d2iz+0x2e>
   35476:	46c0      	nop			; (mov r8, r8)
   35478:	000003fe 	.word	0x000003fe
   3547c:	0000041d 	.word	0x0000041d
   35480:	00000433 	.word	0x00000433
   35484:	00000413 	.word	0x00000413
   35488:	7fffffff 	.word	0x7fffffff
   3548c:	fffffbed 	.word	0xfffffbed

00035490 <__aeabi_ui2d>:
   35490:	b510      	push	{r4, lr}
   35492:	1e04      	subs	r4, r0, #0
   35494:	d028      	beq.n	354e8 <__aeabi_ui2d+0x58>
   35496:	f000 f833 	bl	35500 <__clzsi2>
   3549a:	4b15      	ldr	r3, [pc, #84]	; (354f0 <__aeabi_ui2d+0x60>)
   3549c:	4a15      	ldr	r2, [pc, #84]	; (354f4 <__aeabi_ui2d+0x64>)
   3549e:	1a1b      	subs	r3, r3, r0
   354a0:	1ad2      	subs	r2, r2, r3
   354a2:	2a1f      	cmp	r2, #31
   354a4:	dd15      	ble.n	354d2 <__aeabi_ui2d+0x42>
   354a6:	4a14      	ldr	r2, [pc, #80]	; (354f8 <__aeabi_ui2d+0x68>)
   354a8:	1ad2      	subs	r2, r2, r3
   354aa:	4094      	lsls	r4, r2
   354ac:	2200      	movs	r2, #0
   354ae:	0324      	lsls	r4, r4, #12
   354b0:	055b      	lsls	r3, r3, #21
   354b2:	0b24      	lsrs	r4, r4, #12
   354b4:	0d5b      	lsrs	r3, r3, #21
   354b6:	2100      	movs	r1, #0
   354b8:	0010      	movs	r0, r2
   354ba:	0324      	lsls	r4, r4, #12
   354bc:	0d0a      	lsrs	r2, r1, #20
   354be:	0b24      	lsrs	r4, r4, #12
   354c0:	0512      	lsls	r2, r2, #20
   354c2:	4322      	orrs	r2, r4
   354c4:	4c0d      	ldr	r4, [pc, #52]	; (354fc <__aeabi_ui2d+0x6c>)
   354c6:	051b      	lsls	r3, r3, #20
   354c8:	4022      	ands	r2, r4
   354ca:	4313      	orrs	r3, r2
   354cc:	005b      	lsls	r3, r3, #1
   354ce:	0859      	lsrs	r1, r3, #1
   354d0:	bd10      	pop	{r4, pc}
   354d2:	0021      	movs	r1, r4
   354d4:	4091      	lsls	r1, r2
   354d6:	000a      	movs	r2, r1
   354d8:	210b      	movs	r1, #11
   354da:	1a08      	subs	r0, r1, r0
   354dc:	40c4      	lsrs	r4, r0
   354de:	055b      	lsls	r3, r3, #21
   354e0:	0324      	lsls	r4, r4, #12
   354e2:	0b24      	lsrs	r4, r4, #12
   354e4:	0d5b      	lsrs	r3, r3, #21
   354e6:	e7e6      	b.n	354b6 <__aeabi_ui2d+0x26>
   354e8:	2300      	movs	r3, #0
   354ea:	2400      	movs	r4, #0
   354ec:	2200      	movs	r2, #0
   354ee:	e7e2      	b.n	354b6 <__aeabi_ui2d+0x26>
   354f0:	0000041e 	.word	0x0000041e
   354f4:	00000433 	.word	0x00000433
   354f8:	00000413 	.word	0x00000413
   354fc:	800fffff 	.word	0x800fffff

00035500 <__clzsi2>:
   35500:	211c      	movs	r1, #28
   35502:	2301      	movs	r3, #1
   35504:	041b      	lsls	r3, r3, #16
   35506:	4298      	cmp	r0, r3
   35508:	d301      	bcc.n	3550e <__clzsi2+0xe>
   3550a:	0c00      	lsrs	r0, r0, #16
   3550c:	3910      	subs	r1, #16
   3550e:	0a1b      	lsrs	r3, r3, #8
   35510:	4298      	cmp	r0, r3
   35512:	d301      	bcc.n	35518 <__clzsi2+0x18>
   35514:	0a00      	lsrs	r0, r0, #8
   35516:	3908      	subs	r1, #8
   35518:	091b      	lsrs	r3, r3, #4
   3551a:	4298      	cmp	r0, r3
   3551c:	d301      	bcc.n	35522 <__clzsi2+0x22>
   3551e:	0900      	lsrs	r0, r0, #4
   35520:	3904      	subs	r1, #4
   35522:	a202      	add	r2, pc, #8	; (adr r2, 3552c <__clzsi2+0x2c>)
   35524:	5c10      	ldrb	r0, [r2, r0]
   35526:	1840      	adds	r0, r0, r1
   35528:	4770      	bx	lr
   3552a:	46c0      	nop			; (mov r8, r8)
   3552c:	02020304 	.word	0x02020304
   35530:	01010101 	.word	0x01010101
	...

0003553c <atoi>:
   3553c:	b510      	push	{r4, lr}
   3553e:	220a      	movs	r2, #10
   35540:	2100      	movs	r1, #0
   35542:	f000 fb0d 	bl	35b60 <strtol>
   35546:	bd10      	pop	{r4, pc}

00035548 <__libc_init_array>:
   35548:	b570      	push	{r4, r5, r6, lr}
   3554a:	2600      	movs	r6, #0
   3554c:	4d0c      	ldr	r5, [pc, #48]	; (35580 <__libc_init_array+0x38>)
   3554e:	4c0d      	ldr	r4, [pc, #52]	; (35584 <__libc_init_array+0x3c>)
   35550:	1b64      	subs	r4, r4, r5
   35552:	10a4      	asrs	r4, r4, #2
   35554:	42a6      	cmp	r6, r4
   35556:	d109      	bne.n	3556c <__libc_init_array+0x24>
   35558:	2600      	movs	r6, #0
   3555a:	f005 fdc1 	bl	3b0e0 <_init>
   3555e:	4d0a      	ldr	r5, [pc, #40]	; (35588 <__libc_init_array+0x40>)
   35560:	4c0a      	ldr	r4, [pc, #40]	; (3558c <__libc_init_array+0x44>)
   35562:	1b64      	subs	r4, r4, r5
   35564:	10a4      	asrs	r4, r4, #2
   35566:	42a6      	cmp	r6, r4
   35568:	d105      	bne.n	35576 <__libc_init_array+0x2e>
   3556a:	bd70      	pop	{r4, r5, r6, pc}
   3556c:	00b3      	lsls	r3, r6, #2
   3556e:	58eb      	ldr	r3, [r5, r3]
   35570:	4798      	blx	r3
   35572:	3601      	adds	r6, #1
   35574:	e7ee      	b.n	35554 <__libc_init_array+0xc>
   35576:	00b3      	lsls	r3, r6, #2
   35578:	58eb      	ldr	r3, [r5, r3]
   3557a:	4798      	blx	r3
   3557c:	3601      	adds	r6, #1
   3557e:	e7f2      	b.n	35566 <__libc_init_array+0x1e>
   35580:	0003b0ec 	.word	0x0003b0ec
   35584:	0003b0ec 	.word	0x0003b0ec
   35588:	0003b0ec 	.word	0x0003b0ec
   3558c:	0003b0f0 	.word	0x0003b0f0

00035590 <malloc>:
   35590:	b510      	push	{r4, lr}
   35592:	4b03      	ldr	r3, [pc, #12]	; (355a0 <malloc+0x10>)
   35594:	0001      	movs	r1, r0
   35596:	6818      	ldr	r0, [r3, #0]
   35598:	f000 f87c 	bl	35694 <_malloc_r>
   3559c:	bd10      	pop	{r4, pc}
   3559e:	46c0      	nop			; (mov r8, r8)
   355a0:	20000130 	.word	0x20000130

000355a4 <free>:
   355a4:	b510      	push	{r4, lr}
   355a6:	4b03      	ldr	r3, [pc, #12]	; (355b4 <free+0x10>)
   355a8:	0001      	movs	r1, r0
   355aa:	6818      	ldr	r0, [r3, #0]
   355ac:	f000 f828 	bl	35600 <_free_r>
   355b0:	bd10      	pop	{r4, pc}
   355b2:	46c0      	nop			; (mov r8, r8)
   355b4:	20000130 	.word	0x20000130

000355b8 <memcpy>:
   355b8:	2300      	movs	r3, #0
   355ba:	b510      	push	{r4, lr}
   355bc:	429a      	cmp	r2, r3
   355be:	d100      	bne.n	355c2 <memcpy+0xa>
   355c0:	bd10      	pop	{r4, pc}
   355c2:	5ccc      	ldrb	r4, [r1, r3]
   355c4:	54c4      	strb	r4, [r0, r3]
   355c6:	3301      	adds	r3, #1
   355c8:	e7f8      	b.n	355bc <memcpy+0x4>

000355ca <memmove>:
   355ca:	b510      	push	{r4, lr}
   355cc:	4288      	cmp	r0, r1
   355ce:	d902      	bls.n	355d6 <memmove+0xc>
   355d0:	188b      	adds	r3, r1, r2
   355d2:	4298      	cmp	r0, r3
   355d4:	d308      	bcc.n	355e8 <memmove+0x1e>
   355d6:	2300      	movs	r3, #0
   355d8:	429a      	cmp	r2, r3
   355da:	d007      	beq.n	355ec <memmove+0x22>
   355dc:	5ccc      	ldrb	r4, [r1, r3]
   355de:	54c4      	strb	r4, [r0, r3]
   355e0:	3301      	adds	r3, #1
   355e2:	e7f9      	b.n	355d8 <memmove+0xe>
   355e4:	5c8b      	ldrb	r3, [r1, r2]
   355e6:	5483      	strb	r3, [r0, r2]
   355e8:	3a01      	subs	r2, #1
   355ea:	d2fb      	bcs.n	355e4 <memmove+0x1a>
   355ec:	bd10      	pop	{r4, pc}

000355ee <memset>:
   355ee:	0003      	movs	r3, r0
   355f0:	1882      	adds	r2, r0, r2
   355f2:	4293      	cmp	r3, r2
   355f4:	d100      	bne.n	355f8 <memset+0xa>
   355f6:	4770      	bx	lr
   355f8:	7019      	strb	r1, [r3, #0]
   355fa:	3301      	adds	r3, #1
   355fc:	e7f9      	b.n	355f2 <memset+0x4>
	...

00035600 <_free_r>:
   35600:	b570      	push	{r4, r5, r6, lr}
   35602:	0005      	movs	r5, r0
   35604:	2900      	cmp	r1, #0
   35606:	d010      	beq.n	3562a <_free_r+0x2a>
   35608:	1f0c      	subs	r4, r1, #4
   3560a:	6823      	ldr	r3, [r4, #0]
   3560c:	2b00      	cmp	r3, #0
   3560e:	da00      	bge.n	35612 <_free_r+0x12>
   35610:	18e4      	adds	r4, r4, r3
   35612:	0028      	movs	r0, r5
   35614:	f000 fdd8 	bl	361c8 <__malloc_lock>
   35618:	4a1d      	ldr	r2, [pc, #116]	; (35690 <_free_r+0x90>)
   3561a:	6813      	ldr	r3, [r2, #0]
   3561c:	2b00      	cmp	r3, #0
   3561e:	d105      	bne.n	3562c <_free_r+0x2c>
   35620:	6063      	str	r3, [r4, #4]
   35622:	6014      	str	r4, [r2, #0]
   35624:	0028      	movs	r0, r5
   35626:	f000 fdd0 	bl	361ca <__malloc_unlock>
   3562a:	bd70      	pop	{r4, r5, r6, pc}
   3562c:	42a3      	cmp	r3, r4
   3562e:	d909      	bls.n	35644 <_free_r+0x44>
   35630:	6821      	ldr	r1, [r4, #0]
   35632:	1860      	adds	r0, r4, r1
   35634:	4283      	cmp	r3, r0
   35636:	d1f3      	bne.n	35620 <_free_r+0x20>
   35638:	6818      	ldr	r0, [r3, #0]
   3563a:	685b      	ldr	r3, [r3, #4]
   3563c:	1841      	adds	r1, r0, r1
   3563e:	6021      	str	r1, [r4, #0]
   35640:	e7ee      	b.n	35620 <_free_r+0x20>
   35642:	0013      	movs	r3, r2
   35644:	685a      	ldr	r2, [r3, #4]
   35646:	2a00      	cmp	r2, #0
   35648:	d001      	beq.n	3564e <_free_r+0x4e>
   3564a:	42a2      	cmp	r2, r4
   3564c:	d9f9      	bls.n	35642 <_free_r+0x42>
   3564e:	6819      	ldr	r1, [r3, #0]
   35650:	1858      	adds	r0, r3, r1
   35652:	42a0      	cmp	r0, r4
   35654:	d10b      	bne.n	3566e <_free_r+0x6e>
   35656:	6820      	ldr	r0, [r4, #0]
   35658:	1809      	adds	r1, r1, r0
   3565a:	1858      	adds	r0, r3, r1
   3565c:	6019      	str	r1, [r3, #0]
   3565e:	4282      	cmp	r2, r0
   35660:	d1e0      	bne.n	35624 <_free_r+0x24>
   35662:	6810      	ldr	r0, [r2, #0]
   35664:	6852      	ldr	r2, [r2, #4]
   35666:	1841      	adds	r1, r0, r1
   35668:	6019      	str	r1, [r3, #0]
   3566a:	605a      	str	r2, [r3, #4]
   3566c:	e7da      	b.n	35624 <_free_r+0x24>
   3566e:	42a0      	cmp	r0, r4
   35670:	d902      	bls.n	35678 <_free_r+0x78>
   35672:	230c      	movs	r3, #12
   35674:	602b      	str	r3, [r5, #0]
   35676:	e7d5      	b.n	35624 <_free_r+0x24>
   35678:	6821      	ldr	r1, [r4, #0]
   3567a:	1860      	adds	r0, r4, r1
   3567c:	4282      	cmp	r2, r0
   3567e:	d103      	bne.n	35688 <_free_r+0x88>
   35680:	6810      	ldr	r0, [r2, #0]
   35682:	6852      	ldr	r2, [r2, #4]
   35684:	1841      	adds	r1, r0, r1
   35686:	6021      	str	r1, [r4, #0]
   35688:	6062      	str	r2, [r4, #4]
   3568a:	605c      	str	r4, [r3, #4]
   3568c:	e7ca      	b.n	35624 <_free_r+0x24>
   3568e:	46c0      	nop			; (mov r8, r8)
   35690:	20004728 	.word	0x20004728

00035694 <_malloc_r>:
   35694:	2303      	movs	r3, #3
   35696:	b570      	push	{r4, r5, r6, lr}
   35698:	1ccd      	adds	r5, r1, #3
   3569a:	439d      	bics	r5, r3
   3569c:	3508      	adds	r5, #8
   3569e:	0006      	movs	r6, r0
   356a0:	2d0c      	cmp	r5, #12
   356a2:	d21e      	bcs.n	356e2 <_malloc_r+0x4e>
   356a4:	250c      	movs	r5, #12
   356a6:	42a9      	cmp	r1, r5
   356a8:	d81d      	bhi.n	356e6 <_malloc_r+0x52>
   356aa:	0030      	movs	r0, r6
   356ac:	f000 fd8c 	bl	361c8 <__malloc_lock>
   356b0:	4a25      	ldr	r2, [pc, #148]	; (35748 <_malloc_r+0xb4>)
   356b2:	6814      	ldr	r4, [r2, #0]
   356b4:	0021      	movs	r1, r4
   356b6:	2900      	cmp	r1, #0
   356b8:	d119      	bne.n	356ee <_malloc_r+0x5a>
   356ba:	4c24      	ldr	r4, [pc, #144]	; (3574c <_malloc_r+0xb8>)
   356bc:	6823      	ldr	r3, [r4, #0]
   356be:	2b00      	cmp	r3, #0
   356c0:	d103      	bne.n	356ca <_malloc_r+0x36>
   356c2:	0030      	movs	r0, r6
   356c4:	f000 f8ae 	bl	35824 <_sbrk_r>
   356c8:	6020      	str	r0, [r4, #0]
   356ca:	0029      	movs	r1, r5
   356cc:	0030      	movs	r0, r6
   356ce:	f000 f8a9 	bl	35824 <_sbrk_r>
   356d2:	1c43      	adds	r3, r0, #1
   356d4:	d12c      	bne.n	35730 <_malloc_r+0x9c>
   356d6:	230c      	movs	r3, #12
   356d8:	0030      	movs	r0, r6
   356da:	6033      	str	r3, [r6, #0]
   356dc:	f000 fd75 	bl	361ca <__malloc_unlock>
   356e0:	e003      	b.n	356ea <_malloc_r+0x56>
   356e2:	2d00      	cmp	r5, #0
   356e4:	dadf      	bge.n	356a6 <_malloc_r+0x12>
   356e6:	230c      	movs	r3, #12
   356e8:	6033      	str	r3, [r6, #0]
   356ea:	2000      	movs	r0, #0
   356ec:	bd70      	pop	{r4, r5, r6, pc}
   356ee:	680b      	ldr	r3, [r1, #0]
   356f0:	1b5b      	subs	r3, r3, r5
   356f2:	d41a      	bmi.n	3572a <_malloc_r+0x96>
   356f4:	2b0b      	cmp	r3, #11
   356f6:	d903      	bls.n	35700 <_malloc_r+0x6c>
   356f8:	600b      	str	r3, [r1, #0]
   356fa:	18cc      	adds	r4, r1, r3
   356fc:	6025      	str	r5, [r4, #0]
   356fe:	e003      	b.n	35708 <_malloc_r+0x74>
   35700:	428c      	cmp	r4, r1
   35702:	d10e      	bne.n	35722 <_malloc_r+0x8e>
   35704:	6863      	ldr	r3, [r4, #4]
   35706:	6013      	str	r3, [r2, #0]
   35708:	0030      	movs	r0, r6
   3570a:	f000 fd5e 	bl	361ca <__malloc_unlock>
   3570e:	0020      	movs	r0, r4
   35710:	2207      	movs	r2, #7
   35712:	300b      	adds	r0, #11
   35714:	1d23      	adds	r3, r4, #4
   35716:	4390      	bics	r0, r2
   35718:	1ac3      	subs	r3, r0, r3
   3571a:	d0e7      	beq.n	356ec <_malloc_r+0x58>
   3571c:	425a      	negs	r2, r3
   3571e:	50e2      	str	r2, [r4, r3]
   35720:	e7e4      	b.n	356ec <_malloc_r+0x58>
   35722:	684b      	ldr	r3, [r1, #4]
   35724:	6063      	str	r3, [r4, #4]
   35726:	000c      	movs	r4, r1
   35728:	e7ee      	b.n	35708 <_malloc_r+0x74>
   3572a:	000c      	movs	r4, r1
   3572c:	6849      	ldr	r1, [r1, #4]
   3572e:	e7c2      	b.n	356b6 <_malloc_r+0x22>
   35730:	2303      	movs	r3, #3
   35732:	1cc4      	adds	r4, r0, #3
   35734:	439c      	bics	r4, r3
   35736:	42a0      	cmp	r0, r4
   35738:	d0e0      	beq.n	356fc <_malloc_r+0x68>
   3573a:	1a21      	subs	r1, r4, r0
   3573c:	0030      	movs	r0, r6
   3573e:	f000 f871 	bl	35824 <_sbrk_r>
   35742:	1c43      	adds	r3, r0, #1
   35744:	d1da      	bne.n	356fc <_malloc_r+0x68>
   35746:	e7c6      	b.n	356d6 <_malloc_r+0x42>
   35748:	20004728 	.word	0x20004728
   3574c:	2000472c 	.word	0x2000472c

00035750 <_puts_r>:
   35750:	b570      	push	{r4, r5, r6, lr}
   35752:	0005      	movs	r5, r0
   35754:	000e      	movs	r6, r1
   35756:	2800      	cmp	r0, #0
   35758:	d004      	beq.n	35764 <_puts_r+0x14>
   3575a:	6983      	ldr	r3, [r0, #24]
   3575c:	2b00      	cmp	r3, #0
   3575e:	d101      	bne.n	35764 <_puts_r+0x14>
   35760:	f000 fc0e 	bl	35f80 <__sinit>
   35764:	69ab      	ldr	r3, [r5, #24]
   35766:	68ac      	ldr	r4, [r5, #8]
   35768:	2b00      	cmp	r3, #0
   3576a:	d102      	bne.n	35772 <_puts_r+0x22>
   3576c:	0028      	movs	r0, r5
   3576e:	f000 fc07 	bl	35f80 <__sinit>
   35772:	4b24      	ldr	r3, [pc, #144]	; (35804 <_puts_r+0xb4>)
   35774:	429c      	cmp	r4, r3
   35776:	d10f      	bne.n	35798 <_puts_r+0x48>
   35778:	686c      	ldr	r4, [r5, #4]
   3577a:	89a3      	ldrh	r3, [r4, #12]
   3577c:	071b      	lsls	r3, r3, #28
   3577e:	d502      	bpl.n	35786 <_puts_r+0x36>
   35780:	6923      	ldr	r3, [r4, #16]
   35782:	2b00      	cmp	r3, #0
   35784:	d120      	bne.n	357c8 <_puts_r+0x78>
   35786:	0021      	movs	r1, r4
   35788:	0028      	movs	r0, r5
   3578a:	f000 fa8b 	bl	35ca4 <__swsetup_r>
   3578e:	2800      	cmp	r0, #0
   35790:	d01a      	beq.n	357c8 <_puts_r+0x78>
   35792:	2001      	movs	r0, #1
   35794:	4240      	negs	r0, r0
   35796:	bd70      	pop	{r4, r5, r6, pc}
   35798:	4b1b      	ldr	r3, [pc, #108]	; (35808 <_puts_r+0xb8>)
   3579a:	429c      	cmp	r4, r3
   3579c:	d101      	bne.n	357a2 <_puts_r+0x52>
   3579e:	68ac      	ldr	r4, [r5, #8]
   357a0:	e7eb      	b.n	3577a <_puts_r+0x2a>
   357a2:	4b1a      	ldr	r3, [pc, #104]	; (3580c <_puts_r+0xbc>)
   357a4:	429c      	cmp	r4, r3
   357a6:	d1e8      	bne.n	3577a <_puts_r+0x2a>
   357a8:	68ec      	ldr	r4, [r5, #12]
   357aa:	e7e6      	b.n	3577a <_puts_r+0x2a>
   357ac:	3b01      	subs	r3, #1
   357ae:	3601      	adds	r6, #1
   357b0:	60a3      	str	r3, [r4, #8]
   357b2:	2b00      	cmp	r3, #0
   357b4:	da04      	bge.n	357c0 <_puts_r+0x70>
   357b6:	69a2      	ldr	r2, [r4, #24]
   357b8:	4293      	cmp	r3, r2
   357ba:	db16      	blt.n	357ea <_puts_r+0x9a>
   357bc:	290a      	cmp	r1, #10
   357be:	d014      	beq.n	357ea <_puts_r+0x9a>
   357c0:	6823      	ldr	r3, [r4, #0]
   357c2:	1c5a      	adds	r2, r3, #1
   357c4:	6022      	str	r2, [r4, #0]
   357c6:	7019      	strb	r1, [r3, #0]
   357c8:	7831      	ldrb	r1, [r6, #0]
   357ca:	68a3      	ldr	r3, [r4, #8]
   357cc:	2900      	cmp	r1, #0
   357ce:	d1ed      	bne.n	357ac <_puts_r+0x5c>
   357d0:	3b01      	subs	r3, #1
   357d2:	60a3      	str	r3, [r4, #8]
   357d4:	2b00      	cmp	r3, #0
   357d6:	da0f      	bge.n	357f8 <_puts_r+0xa8>
   357d8:	0022      	movs	r2, r4
   357da:	310a      	adds	r1, #10
   357dc:	0028      	movs	r0, r5
   357de:	f000 fa0b 	bl	35bf8 <__swbuf_r>
   357e2:	1c43      	adds	r3, r0, #1
   357e4:	d0d5      	beq.n	35792 <_puts_r+0x42>
   357e6:	200a      	movs	r0, #10
   357e8:	e7d5      	b.n	35796 <_puts_r+0x46>
   357ea:	0022      	movs	r2, r4
   357ec:	0028      	movs	r0, r5
   357ee:	f000 fa03 	bl	35bf8 <__swbuf_r>
   357f2:	1c43      	adds	r3, r0, #1
   357f4:	d1e8      	bne.n	357c8 <_puts_r+0x78>
   357f6:	e7cc      	b.n	35792 <_puts_r+0x42>
   357f8:	200a      	movs	r0, #10
   357fa:	6823      	ldr	r3, [r4, #0]
   357fc:	1c5a      	adds	r2, r3, #1
   357fe:	6022      	str	r2, [r4, #0]
   35800:	7018      	strb	r0, [r3, #0]
   35802:	e7c8      	b.n	35796 <_puts_r+0x46>
   35804:	0003af60 	.word	0x0003af60
   35808:	0003af80 	.word	0x0003af80
   3580c:	0003af40 	.word	0x0003af40

00035810 <puts>:
   35810:	b510      	push	{r4, lr}
   35812:	4b03      	ldr	r3, [pc, #12]	; (35820 <puts+0x10>)
   35814:	0001      	movs	r1, r0
   35816:	6818      	ldr	r0, [r3, #0]
   35818:	f7ff ff9a 	bl	35750 <_puts_r>
   3581c:	bd10      	pop	{r4, pc}
   3581e:	46c0      	nop			; (mov r8, r8)
   35820:	20000130 	.word	0x20000130

00035824 <_sbrk_r>:
   35824:	2300      	movs	r3, #0
   35826:	b570      	push	{r4, r5, r6, lr}
   35828:	4c06      	ldr	r4, [pc, #24]	; (35844 <_sbrk_r+0x20>)
   3582a:	0005      	movs	r5, r0
   3582c:	0008      	movs	r0, r1
   3582e:	6023      	str	r3, [r4, #0]
   35830:	f7f6 fa9c 	bl	2bd6c <_sbrk>
   35834:	1c43      	adds	r3, r0, #1
   35836:	d103      	bne.n	35840 <_sbrk_r+0x1c>
   35838:	6823      	ldr	r3, [r4, #0]
   3583a:	2b00      	cmp	r3, #0
   3583c:	d000      	beq.n	35840 <_sbrk_r+0x1c>
   3583e:	602b      	str	r3, [r5, #0]
   35840:	bd70      	pop	{r4, r5, r6, pc}
   35842:	46c0      	nop			; (mov r8, r8)
   35844:	20005ce0 	.word	0x20005ce0

00035848 <sniprintf>:
   35848:	b40c      	push	{r2, r3}
   3584a:	b530      	push	{r4, r5, lr}
   3584c:	4b16      	ldr	r3, [pc, #88]	; (358a8 <sniprintf+0x60>)
   3584e:	b09d      	sub	sp, #116	; 0x74
   35850:	1e0c      	subs	r4, r1, #0
   35852:	681d      	ldr	r5, [r3, #0]
   35854:	da08      	bge.n	35868 <sniprintf+0x20>
   35856:	238b      	movs	r3, #139	; 0x8b
   35858:	2001      	movs	r0, #1
   3585a:	602b      	str	r3, [r5, #0]
   3585c:	4240      	negs	r0, r0
   3585e:	b01d      	add	sp, #116	; 0x74
   35860:	bc30      	pop	{r4, r5}
   35862:	bc08      	pop	{r3}
   35864:	b002      	add	sp, #8
   35866:	4718      	bx	r3
   35868:	2382      	movs	r3, #130	; 0x82
   3586a:	a902      	add	r1, sp, #8
   3586c:	009b      	lsls	r3, r3, #2
   3586e:	818b      	strh	r3, [r1, #12]
   35870:	2300      	movs	r3, #0
   35872:	9002      	str	r0, [sp, #8]
   35874:	6108      	str	r0, [r1, #16]
   35876:	429c      	cmp	r4, r3
   35878:	d000      	beq.n	3587c <sniprintf+0x34>
   3587a:	1e63      	subs	r3, r4, #1
   3587c:	608b      	str	r3, [r1, #8]
   3587e:	614b      	str	r3, [r1, #20]
   35880:	2301      	movs	r3, #1
   35882:	425b      	negs	r3, r3
   35884:	81cb      	strh	r3, [r1, #14]
   35886:	9a20      	ldr	r2, [sp, #128]	; 0x80
   35888:	ab21      	add	r3, sp, #132	; 0x84
   3588a:	0028      	movs	r0, r5
   3588c:	9301      	str	r3, [sp, #4]
   3588e:	f000 fcff 	bl	36290 <_svfiprintf_r>
   35892:	1c43      	adds	r3, r0, #1
   35894:	da01      	bge.n	3589a <sniprintf+0x52>
   35896:	238b      	movs	r3, #139	; 0x8b
   35898:	602b      	str	r3, [r5, #0]
   3589a:	2c00      	cmp	r4, #0
   3589c:	d0df      	beq.n	3585e <sniprintf+0x16>
   3589e:	2300      	movs	r3, #0
   358a0:	9a02      	ldr	r2, [sp, #8]
   358a2:	7013      	strb	r3, [r2, #0]
   358a4:	e7db      	b.n	3585e <sniprintf+0x16>
   358a6:	46c0      	nop			; (mov r8, r8)
   358a8:	20000130 	.word	0x20000130

000358ac <siprintf>:
   358ac:	b40e      	push	{r1, r2, r3}
   358ae:	b510      	push	{r4, lr}
   358b0:	b09d      	sub	sp, #116	; 0x74
   358b2:	a902      	add	r1, sp, #8
   358b4:	9002      	str	r0, [sp, #8]
   358b6:	6108      	str	r0, [r1, #16]
   358b8:	480b      	ldr	r0, [pc, #44]	; (358e8 <siprintf+0x3c>)
   358ba:	2482      	movs	r4, #130	; 0x82
   358bc:	6088      	str	r0, [r1, #8]
   358be:	6148      	str	r0, [r1, #20]
   358c0:	2001      	movs	r0, #1
   358c2:	4240      	negs	r0, r0
   358c4:	ab1f      	add	r3, sp, #124	; 0x7c
   358c6:	81c8      	strh	r0, [r1, #14]
   358c8:	4808      	ldr	r0, [pc, #32]	; (358ec <siprintf+0x40>)
   358ca:	cb04      	ldmia	r3!, {r2}
   358cc:	00a4      	lsls	r4, r4, #2
   358ce:	6800      	ldr	r0, [r0, #0]
   358d0:	9301      	str	r3, [sp, #4]
   358d2:	818c      	strh	r4, [r1, #12]
   358d4:	f000 fcdc 	bl	36290 <_svfiprintf_r>
   358d8:	2300      	movs	r3, #0
   358da:	9a02      	ldr	r2, [sp, #8]
   358dc:	7013      	strb	r3, [r2, #0]
   358de:	b01d      	add	sp, #116	; 0x74
   358e0:	bc10      	pop	{r4}
   358e2:	bc08      	pop	{r3}
   358e4:	b003      	add	sp, #12
   358e6:	4718      	bx	r3
   358e8:	7fffffff 	.word	0x7fffffff
   358ec:	20000130 	.word	0x20000130

000358f0 <strcasecmp>:
   358f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   358f2:	0007      	movs	r7, r0
   358f4:	000e      	movs	r6, r1
   358f6:	783c      	ldrb	r4, [r7, #0]
   358f8:	f000 fbda 	bl	360b0 <__locale_ctype_ptr>
   358fc:	2203      	movs	r2, #3
   358fe:	1900      	adds	r0, r0, r4
   35900:	7843      	ldrb	r3, [r0, #1]
   35902:	4013      	ands	r3, r2
   35904:	2b01      	cmp	r3, #1
   35906:	d100      	bne.n	3590a <strcasecmp+0x1a>
   35908:	3420      	adds	r4, #32
   3590a:	7835      	ldrb	r5, [r6, #0]
   3590c:	f000 fbd0 	bl	360b0 <__locale_ctype_ptr>
   35910:	2203      	movs	r2, #3
   35912:	1940      	adds	r0, r0, r5
   35914:	7843      	ldrb	r3, [r0, #1]
   35916:	4013      	ands	r3, r2
   35918:	2b01      	cmp	r3, #1
   3591a:	d100      	bne.n	3591e <strcasecmp+0x2e>
   3591c:	3520      	adds	r5, #32
   3591e:	1b60      	subs	r0, r4, r5
   35920:	d103      	bne.n	3592a <strcasecmp+0x3a>
   35922:	3701      	adds	r7, #1
   35924:	3601      	adds	r6, #1
   35926:	2d00      	cmp	r5, #0
   35928:	d1e5      	bne.n	358f6 <strcasecmp+0x6>
   3592a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0003592c <strcat>:
   3592c:	0002      	movs	r2, r0
   3592e:	b510      	push	{r4, lr}
   35930:	7813      	ldrb	r3, [r2, #0]
   35932:	2b00      	cmp	r3, #0
   35934:	d105      	bne.n	35942 <strcat+0x16>
   35936:	5ccc      	ldrb	r4, [r1, r3]
   35938:	54d4      	strb	r4, [r2, r3]
   3593a:	3301      	adds	r3, #1
   3593c:	2c00      	cmp	r4, #0
   3593e:	d1fa      	bne.n	35936 <strcat+0xa>
   35940:	bd10      	pop	{r4, pc}
   35942:	3201      	adds	r2, #1
   35944:	e7f4      	b.n	35930 <strcat+0x4>

00035946 <strcmp>:
   35946:	7802      	ldrb	r2, [r0, #0]
   35948:	780b      	ldrb	r3, [r1, #0]
   3594a:	2a00      	cmp	r2, #0
   3594c:	d003      	beq.n	35956 <strcmp+0x10>
   3594e:	3001      	adds	r0, #1
   35950:	3101      	adds	r1, #1
   35952:	429a      	cmp	r2, r3
   35954:	d0f7      	beq.n	35946 <strcmp>
   35956:	1ad0      	subs	r0, r2, r3
   35958:	4770      	bx	lr

0003595a <strcpy>:
   3595a:	1c03      	adds	r3, r0, #0
   3595c:	780a      	ldrb	r2, [r1, #0]
   3595e:	3101      	adds	r1, #1
   35960:	701a      	strb	r2, [r3, #0]
   35962:	3301      	adds	r3, #1
   35964:	2a00      	cmp	r2, #0
   35966:	d1f9      	bne.n	3595c <strcpy+0x2>
   35968:	4770      	bx	lr
	...

0003596c <strdup>:
   3596c:	b510      	push	{r4, lr}
   3596e:	4b03      	ldr	r3, [pc, #12]	; (3597c <strdup+0x10>)
   35970:	0001      	movs	r1, r0
   35972:	6818      	ldr	r0, [r3, #0]
   35974:	f000 f804 	bl	35980 <_strdup_r>
   35978:	bd10      	pop	{r4, pc}
   3597a:	46c0      	nop			; (mov r8, r8)
   3597c:	20000130 	.word	0x20000130

00035980 <_strdup_r>:
   35980:	b570      	push	{r4, r5, r6, lr}
   35982:	0005      	movs	r5, r0
   35984:	0008      	movs	r0, r1
   35986:	000e      	movs	r6, r1
   35988:	f000 f80d 	bl	359a6 <strlen>
   3598c:	1c44      	adds	r4, r0, #1
   3598e:	0021      	movs	r1, r4
   35990:	0028      	movs	r0, r5
   35992:	f7ff fe7f 	bl	35694 <_malloc_r>
   35996:	1e05      	subs	r5, r0, #0
   35998:	d003      	beq.n	359a2 <_strdup_r+0x22>
   3599a:	0022      	movs	r2, r4
   3599c:	0031      	movs	r1, r6
   3599e:	f7ff fe0b 	bl	355b8 <memcpy>
   359a2:	0028      	movs	r0, r5
   359a4:	bd70      	pop	{r4, r5, r6, pc}

000359a6 <strlen>:
   359a6:	2300      	movs	r3, #0
   359a8:	5cc2      	ldrb	r2, [r0, r3]
   359aa:	3301      	adds	r3, #1
   359ac:	2a00      	cmp	r2, #0
   359ae:	d1fb      	bne.n	359a8 <strlen+0x2>
   359b0:	1e58      	subs	r0, r3, #1
   359b2:	4770      	bx	lr

000359b4 <strncmp>:
   359b4:	2300      	movs	r3, #0
   359b6:	b530      	push	{r4, r5, lr}
   359b8:	429a      	cmp	r2, r3
   359ba:	d00a      	beq.n	359d2 <strncmp+0x1e>
   359bc:	3a01      	subs	r2, #1
   359be:	5cc4      	ldrb	r4, [r0, r3]
   359c0:	5ccd      	ldrb	r5, [r1, r3]
   359c2:	42ac      	cmp	r4, r5
   359c4:	d104      	bne.n	359d0 <strncmp+0x1c>
   359c6:	429a      	cmp	r2, r3
   359c8:	d002      	beq.n	359d0 <strncmp+0x1c>
   359ca:	3301      	adds	r3, #1
   359cc:	2c00      	cmp	r4, #0
   359ce:	d1f6      	bne.n	359be <strncmp+0xa>
   359d0:	1b63      	subs	r3, r4, r5
   359d2:	0018      	movs	r0, r3
   359d4:	bd30      	pop	{r4, r5, pc}

000359d6 <strncpy>:
   359d6:	b570      	push	{r4, r5, r6, lr}
   359d8:	0004      	movs	r4, r0
   359da:	2a00      	cmp	r2, #0
   359dc:	d100      	bne.n	359e0 <strncpy+0xa>
   359de:	bd70      	pop	{r4, r5, r6, pc}
   359e0:	780d      	ldrb	r5, [r1, #0]
   359e2:	1e56      	subs	r6, r2, #1
   359e4:	1c63      	adds	r3, r4, #1
   359e6:	7025      	strb	r5, [r4, #0]
   359e8:	3101      	adds	r1, #1
   359ea:	2d00      	cmp	r5, #0
   359ec:	d105      	bne.n	359fa <strncpy+0x24>
   359ee:	18a4      	adds	r4, r4, r2
   359f0:	429c      	cmp	r4, r3
   359f2:	d0f4      	beq.n	359de <strncpy+0x8>
   359f4:	701d      	strb	r5, [r3, #0]
   359f6:	3301      	adds	r3, #1
   359f8:	e7fa      	b.n	359f0 <strncpy+0x1a>
   359fa:	001c      	movs	r4, r3
   359fc:	0032      	movs	r2, r6
   359fe:	e7ec      	b.n	359da <strncpy+0x4>

00035a00 <strrchr>:
   35a00:	b570      	push	{r4, r5, r6, lr}
   35a02:	000d      	movs	r5, r1
   35a04:	2400      	movs	r4, #0
   35a06:	2900      	cmp	r1, #0
   35a08:	d105      	bne.n	35a16 <strrchr+0x16>
   35a0a:	f000 ff19 	bl	36840 <strchr>
   35a0e:	0004      	movs	r4, r0
   35a10:	e006      	b.n	35a20 <strrchr+0x20>
   35a12:	001c      	movs	r4, r3
   35a14:	1c58      	adds	r0, r3, #1
   35a16:	0029      	movs	r1, r5
   35a18:	f000 ff12 	bl	36840 <strchr>
   35a1c:	1e03      	subs	r3, r0, #0
   35a1e:	d1f8      	bne.n	35a12 <strrchr+0x12>
   35a20:	0020      	movs	r0, r4
   35a22:	bd70      	pop	{r4, r5, r6, pc}

00035a24 <strstr>:
   35a24:	b510      	push	{r4, lr}
   35a26:	0002      	movs	r2, r0
   35a28:	7800      	ldrb	r0, [r0, #0]
   35a2a:	2800      	cmp	r0, #0
   35a2c:	d104      	bne.n	35a38 <strstr+0x14>
   35a2e:	7809      	ldrb	r1, [r1, #0]
   35a30:	2900      	cmp	r1, #0
   35a32:	d00d      	beq.n	35a50 <strstr+0x2c>
   35a34:	bd10      	pop	{r4, pc}
   35a36:	3201      	adds	r2, #1
   35a38:	7810      	ldrb	r0, [r2, #0]
   35a3a:	2800      	cmp	r0, #0
   35a3c:	d0fa      	beq.n	35a34 <strstr+0x10>
   35a3e:	2300      	movs	r3, #0
   35a40:	5cc8      	ldrb	r0, [r1, r3]
   35a42:	2800      	cmp	r0, #0
   35a44:	d004      	beq.n	35a50 <strstr+0x2c>
   35a46:	5cd4      	ldrb	r4, [r2, r3]
   35a48:	4284      	cmp	r4, r0
   35a4a:	d1f4      	bne.n	35a36 <strstr+0x12>
   35a4c:	3301      	adds	r3, #1
   35a4e:	e7f7      	b.n	35a40 <strstr+0x1c>
   35a50:	0010      	movs	r0, r2
   35a52:	e7ef      	b.n	35a34 <strstr+0x10>

00035a54 <_strtol_l.isra.0>:
   35a54:	b5f0      	push	{r4, r5, r6, r7, lr}
   35a56:	001f      	movs	r7, r3
   35a58:	000e      	movs	r6, r1
   35a5a:	b087      	sub	sp, #28
   35a5c:	9005      	str	r0, [sp, #20]
   35a5e:	9103      	str	r1, [sp, #12]
   35a60:	9202      	str	r2, [sp, #8]
   35a62:	980c      	ldr	r0, [sp, #48]	; 0x30
   35a64:	7834      	ldrb	r4, [r6, #0]
   35a66:	f000 fb20 	bl	360aa <__locale_ctype_ptr_l>
   35a6a:	2208      	movs	r2, #8
   35a6c:	1900      	adds	r0, r0, r4
   35a6e:	7843      	ldrb	r3, [r0, #1]
   35a70:	1c75      	adds	r5, r6, #1
   35a72:	4013      	ands	r3, r2
   35a74:	d10c      	bne.n	35a90 <_strtol_l.isra.0+0x3c>
   35a76:	2c2d      	cmp	r4, #45	; 0x2d
   35a78:	d10c      	bne.n	35a94 <_strtol_l.isra.0+0x40>
   35a7a:	3301      	adds	r3, #1
   35a7c:	782c      	ldrb	r4, [r5, #0]
   35a7e:	9301      	str	r3, [sp, #4]
   35a80:	1cb5      	adds	r5, r6, #2
   35a82:	2f00      	cmp	r7, #0
   35a84:	d00c      	beq.n	35aa0 <_strtol_l.isra.0+0x4c>
   35a86:	2f10      	cmp	r7, #16
   35a88:	d114      	bne.n	35ab4 <_strtol_l.isra.0+0x60>
   35a8a:	2c30      	cmp	r4, #48	; 0x30
   35a8c:	d00a      	beq.n	35aa4 <_strtol_l.isra.0+0x50>
   35a8e:	e011      	b.n	35ab4 <_strtol_l.isra.0+0x60>
   35a90:	002e      	movs	r6, r5
   35a92:	e7e6      	b.n	35a62 <_strtol_l.isra.0+0xe>
   35a94:	9301      	str	r3, [sp, #4]
   35a96:	2c2b      	cmp	r4, #43	; 0x2b
   35a98:	d1f3      	bne.n	35a82 <_strtol_l.isra.0+0x2e>
   35a9a:	782c      	ldrb	r4, [r5, #0]
   35a9c:	1cb5      	adds	r5, r6, #2
   35a9e:	e7f0      	b.n	35a82 <_strtol_l.isra.0+0x2e>
   35aa0:	2c30      	cmp	r4, #48	; 0x30
   35aa2:	d12f      	bne.n	35b04 <_strtol_l.isra.0+0xb0>
   35aa4:	2220      	movs	r2, #32
   35aa6:	782b      	ldrb	r3, [r5, #0]
   35aa8:	4393      	bics	r3, r2
   35aaa:	2b58      	cmp	r3, #88	; 0x58
   35aac:	d151      	bne.n	35b52 <_strtol_l.isra.0+0xfe>
   35aae:	2710      	movs	r7, #16
   35ab0:	786c      	ldrb	r4, [r5, #1]
   35ab2:	3502      	adds	r5, #2
   35ab4:	9b01      	ldr	r3, [sp, #4]
   35ab6:	4a29      	ldr	r2, [pc, #164]	; (35b5c <_strtol_l.isra.0+0x108>)
   35ab8:	0039      	movs	r1, r7
   35aba:	189e      	adds	r6, r3, r2
   35abc:	0030      	movs	r0, r6
   35abe:	f7fd fe2f 	bl	33720 <__aeabi_uidivmod>
   35ac2:	0030      	movs	r0, r6
   35ac4:	9104      	str	r1, [sp, #16]
   35ac6:	0039      	movs	r1, r7
   35ac8:	f7fd fda4 	bl	33614 <__udivsi3>
   35acc:	2101      	movs	r1, #1
   35ace:	2300      	movs	r3, #0
   35ad0:	4249      	negs	r1, r1
   35ad2:	0002      	movs	r2, r0
   35ad4:	468c      	mov	ip, r1
   35ad6:	0018      	movs	r0, r3
   35ad8:	0021      	movs	r1, r4
   35ada:	3930      	subs	r1, #48	; 0x30
   35adc:	2909      	cmp	r1, #9
   35ade:	d813      	bhi.n	35b08 <_strtol_l.isra.0+0xb4>
   35ae0:	000c      	movs	r4, r1
   35ae2:	42a7      	cmp	r7, r4
   35ae4:	dd1c      	ble.n	35b20 <_strtol_l.isra.0+0xcc>
   35ae6:	1c59      	adds	r1, r3, #1
   35ae8:	d009      	beq.n	35afe <_strtol_l.isra.0+0xaa>
   35aea:	4663      	mov	r3, ip
   35aec:	4282      	cmp	r2, r0
   35aee:	d306      	bcc.n	35afe <_strtol_l.isra.0+0xaa>
   35af0:	d102      	bne.n	35af8 <_strtol_l.isra.0+0xa4>
   35af2:	9904      	ldr	r1, [sp, #16]
   35af4:	42a1      	cmp	r1, r4
   35af6:	db02      	blt.n	35afe <_strtol_l.isra.0+0xaa>
   35af8:	2301      	movs	r3, #1
   35afa:	4378      	muls	r0, r7
   35afc:	1820      	adds	r0, r4, r0
   35afe:	782c      	ldrb	r4, [r5, #0]
   35b00:	3501      	adds	r5, #1
   35b02:	e7e9      	b.n	35ad8 <_strtol_l.isra.0+0x84>
   35b04:	270a      	movs	r7, #10
   35b06:	e7d5      	b.n	35ab4 <_strtol_l.isra.0+0x60>
   35b08:	0021      	movs	r1, r4
   35b0a:	3941      	subs	r1, #65	; 0x41
   35b0c:	2919      	cmp	r1, #25
   35b0e:	d801      	bhi.n	35b14 <_strtol_l.isra.0+0xc0>
   35b10:	3c37      	subs	r4, #55	; 0x37
   35b12:	e7e6      	b.n	35ae2 <_strtol_l.isra.0+0x8e>
   35b14:	0021      	movs	r1, r4
   35b16:	3961      	subs	r1, #97	; 0x61
   35b18:	2919      	cmp	r1, #25
   35b1a:	d801      	bhi.n	35b20 <_strtol_l.isra.0+0xcc>
   35b1c:	3c57      	subs	r4, #87	; 0x57
   35b1e:	e7e0      	b.n	35ae2 <_strtol_l.isra.0+0x8e>
   35b20:	1c5a      	adds	r2, r3, #1
   35b22:	d108      	bne.n	35b36 <_strtol_l.isra.0+0xe2>
   35b24:	9a05      	ldr	r2, [sp, #20]
   35b26:	3323      	adds	r3, #35	; 0x23
   35b28:	6013      	str	r3, [r2, #0]
   35b2a:	9b02      	ldr	r3, [sp, #8]
   35b2c:	0030      	movs	r0, r6
   35b2e:	2b00      	cmp	r3, #0
   35b30:	d10b      	bne.n	35b4a <_strtol_l.isra.0+0xf6>
   35b32:	b007      	add	sp, #28
   35b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35b36:	9a01      	ldr	r2, [sp, #4]
   35b38:	2a00      	cmp	r2, #0
   35b3a:	d000      	beq.n	35b3e <_strtol_l.isra.0+0xea>
   35b3c:	4240      	negs	r0, r0
   35b3e:	9a02      	ldr	r2, [sp, #8]
   35b40:	2a00      	cmp	r2, #0
   35b42:	d0f6      	beq.n	35b32 <_strtol_l.isra.0+0xde>
   35b44:	9a03      	ldr	r2, [sp, #12]
   35b46:	2b00      	cmp	r3, #0
   35b48:	d000      	beq.n	35b4c <_strtol_l.isra.0+0xf8>
   35b4a:	1e6a      	subs	r2, r5, #1
   35b4c:	9b02      	ldr	r3, [sp, #8]
   35b4e:	601a      	str	r2, [r3, #0]
   35b50:	e7ef      	b.n	35b32 <_strtol_l.isra.0+0xde>
   35b52:	2430      	movs	r4, #48	; 0x30
   35b54:	2f00      	cmp	r7, #0
   35b56:	d1ad      	bne.n	35ab4 <_strtol_l.isra.0+0x60>
   35b58:	3708      	adds	r7, #8
   35b5a:	e7ab      	b.n	35ab4 <_strtol_l.isra.0+0x60>
   35b5c:	7fffffff 	.word	0x7fffffff

00035b60 <strtol>:
   35b60:	b537      	push	{r0, r1, r2, r4, r5, lr}
   35b62:	0013      	movs	r3, r2
   35b64:	4a06      	ldr	r2, [pc, #24]	; (35b80 <strtol+0x20>)
   35b66:	0005      	movs	r5, r0
   35b68:	6810      	ldr	r0, [r2, #0]
   35b6a:	6a04      	ldr	r4, [r0, #32]
   35b6c:	2c00      	cmp	r4, #0
   35b6e:	d100      	bne.n	35b72 <strtol+0x12>
   35b70:	4c04      	ldr	r4, [pc, #16]	; (35b84 <strtol+0x24>)
   35b72:	000a      	movs	r2, r1
   35b74:	9400      	str	r4, [sp, #0]
   35b76:	0029      	movs	r1, r5
   35b78:	f7ff ff6c 	bl	35a54 <_strtol_l.isra.0>
   35b7c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   35b7e:	46c0      	nop			; (mov r8, r8)
   35b80:	20000130 	.word	0x20000130
   35b84:	20000194 	.word	0x20000194

00035b88 <_vsniprintf_r>:
   35b88:	b530      	push	{r4, r5, lr}
   35b8a:	0014      	movs	r4, r2
   35b8c:	b09b      	sub	sp, #108	; 0x6c
   35b8e:	0005      	movs	r5, r0
   35b90:	001a      	movs	r2, r3
   35b92:	2c00      	cmp	r4, #0
   35b94:	da05      	bge.n	35ba2 <_vsniprintf_r+0x1a>
   35b96:	238b      	movs	r3, #139	; 0x8b
   35b98:	6003      	str	r3, [r0, #0]
   35b9a:	2001      	movs	r0, #1
   35b9c:	4240      	negs	r0, r0
   35b9e:	b01b      	add	sp, #108	; 0x6c
   35ba0:	bd30      	pop	{r4, r5, pc}
   35ba2:	2382      	movs	r3, #130	; 0x82
   35ba4:	4668      	mov	r0, sp
   35ba6:	009b      	lsls	r3, r3, #2
   35ba8:	8183      	strh	r3, [r0, #12]
   35baa:	2300      	movs	r3, #0
   35bac:	9100      	str	r1, [sp, #0]
   35bae:	9104      	str	r1, [sp, #16]
   35bb0:	429c      	cmp	r4, r3
   35bb2:	d000      	beq.n	35bb6 <_vsniprintf_r+0x2e>
   35bb4:	1e63      	subs	r3, r4, #1
   35bb6:	9302      	str	r3, [sp, #8]
   35bb8:	9305      	str	r3, [sp, #20]
   35bba:	2301      	movs	r3, #1
   35bbc:	4669      	mov	r1, sp
   35bbe:	425b      	negs	r3, r3
   35bc0:	81cb      	strh	r3, [r1, #14]
   35bc2:	0028      	movs	r0, r5
   35bc4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   35bc6:	f000 fb63 	bl	36290 <_svfiprintf_r>
   35bca:	1c43      	adds	r3, r0, #1
   35bcc:	da01      	bge.n	35bd2 <_vsniprintf_r+0x4a>
   35bce:	238b      	movs	r3, #139	; 0x8b
   35bd0:	602b      	str	r3, [r5, #0]
   35bd2:	2c00      	cmp	r4, #0
   35bd4:	d0e3      	beq.n	35b9e <_vsniprintf_r+0x16>
   35bd6:	2300      	movs	r3, #0
   35bd8:	9a00      	ldr	r2, [sp, #0]
   35bda:	7013      	strb	r3, [r2, #0]
   35bdc:	e7df      	b.n	35b9e <_vsniprintf_r+0x16>
	...

00035be0 <vsniprintf>:
   35be0:	b507      	push	{r0, r1, r2, lr}
   35be2:	9300      	str	r3, [sp, #0]
   35be4:	0013      	movs	r3, r2
   35be6:	000a      	movs	r2, r1
   35be8:	0001      	movs	r1, r0
   35bea:	4802      	ldr	r0, [pc, #8]	; (35bf4 <vsniprintf+0x14>)
   35bec:	6800      	ldr	r0, [r0, #0]
   35bee:	f7ff ffcb 	bl	35b88 <_vsniprintf_r>
   35bf2:	bd0e      	pop	{r1, r2, r3, pc}
   35bf4:	20000130 	.word	0x20000130

00035bf8 <__swbuf_r>:
   35bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35bfa:	0005      	movs	r5, r0
   35bfc:	000e      	movs	r6, r1
   35bfe:	0014      	movs	r4, r2
   35c00:	2800      	cmp	r0, #0
   35c02:	d004      	beq.n	35c0e <__swbuf_r+0x16>
   35c04:	6983      	ldr	r3, [r0, #24]
   35c06:	2b00      	cmp	r3, #0
   35c08:	d101      	bne.n	35c0e <__swbuf_r+0x16>
   35c0a:	f000 f9b9 	bl	35f80 <__sinit>
   35c0e:	4b22      	ldr	r3, [pc, #136]	; (35c98 <__swbuf_r+0xa0>)
   35c10:	429c      	cmp	r4, r3
   35c12:	d12d      	bne.n	35c70 <__swbuf_r+0x78>
   35c14:	686c      	ldr	r4, [r5, #4]
   35c16:	69a3      	ldr	r3, [r4, #24]
   35c18:	60a3      	str	r3, [r4, #8]
   35c1a:	89a3      	ldrh	r3, [r4, #12]
   35c1c:	071b      	lsls	r3, r3, #28
   35c1e:	d531      	bpl.n	35c84 <__swbuf_r+0x8c>
   35c20:	6923      	ldr	r3, [r4, #16]
   35c22:	2b00      	cmp	r3, #0
   35c24:	d02e      	beq.n	35c84 <__swbuf_r+0x8c>
   35c26:	6823      	ldr	r3, [r4, #0]
   35c28:	6922      	ldr	r2, [r4, #16]
   35c2a:	b2f7      	uxtb	r7, r6
   35c2c:	1a98      	subs	r0, r3, r2
   35c2e:	6963      	ldr	r3, [r4, #20]
   35c30:	b2f6      	uxtb	r6, r6
   35c32:	4298      	cmp	r0, r3
   35c34:	db05      	blt.n	35c42 <__swbuf_r+0x4a>
   35c36:	0021      	movs	r1, r4
   35c38:	0028      	movs	r0, r5
   35c3a:	f000 f933 	bl	35ea4 <_fflush_r>
   35c3e:	2800      	cmp	r0, #0
   35c40:	d126      	bne.n	35c90 <__swbuf_r+0x98>
   35c42:	68a3      	ldr	r3, [r4, #8]
   35c44:	3001      	adds	r0, #1
   35c46:	3b01      	subs	r3, #1
   35c48:	60a3      	str	r3, [r4, #8]
   35c4a:	6823      	ldr	r3, [r4, #0]
   35c4c:	1c5a      	adds	r2, r3, #1
   35c4e:	6022      	str	r2, [r4, #0]
   35c50:	701f      	strb	r7, [r3, #0]
   35c52:	6963      	ldr	r3, [r4, #20]
   35c54:	4298      	cmp	r0, r3
   35c56:	d004      	beq.n	35c62 <__swbuf_r+0x6a>
   35c58:	89a3      	ldrh	r3, [r4, #12]
   35c5a:	07db      	lsls	r3, r3, #31
   35c5c:	d51a      	bpl.n	35c94 <__swbuf_r+0x9c>
   35c5e:	2e0a      	cmp	r6, #10
   35c60:	d118      	bne.n	35c94 <__swbuf_r+0x9c>
   35c62:	0021      	movs	r1, r4
   35c64:	0028      	movs	r0, r5
   35c66:	f000 f91d 	bl	35ea4 <_fflush_r>
   35c6a:	2800      	cmp	r0, #0
   35c6c:	d012      	beq.n	35c94 <__swbuf_r+0x9c>
   35c6e:	e00f      	b.n	35c90 <__swbuf_r+0x98>
   35c70:	4b0a      	ldr	r3, [pc, #40]	; (35c9c <__swbuf_r+0xa4>)
   35c72:	429c      	cmp	r4, r3
   35c74:	d101      	bne.n	35c7a <__swbuf_r+0x82>
   35c76:	68ac      	ldr	r4, [r5, #8]
   35c78:	e7cd      	b.n	35c16 <__swbuf_r+0x1e>
   35c7a:	4b09      	ldr	r3, [pc, #36]	; (35ca0 <__swbuf_r+0xa8>)
   35c7c:	429c      	cmp	r4, r3
   35c7e:	d1ca      	bne.n	35c16 <__swbuf_r+0x1e>
   35c80:	68ec      	ldr	r4, [r5, #12]
   35c82:	e7c8      	b.n	35c16 <__swbuf_r+0x1e>
   35c84:	0021      	movs	r1, r4
   35c86:	0028      	movs	r0, r5
   35c88:	f000 f80c 	bl	35ca4 <__swsetup_r>
   35c8c:	2800      	cmp	r0, #0
   35c8e:	d0ca      	beq.n	35c26 <__swbuf_r+0x2e>
   35c90:	2601      	movs	r6, #1
   35c92:	4276      	negs	r6, r6
   35c94:	0030      	movs	r0, r6
   35c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35c98:	0003af60 	.word	0x0003af60
   35c9c:	0003af80 	.word	0x0003af80
   35ca0:	0003af40 	.word	0x0003af40

00035ca4 <__swsetup_r>:
   35ca4:	4b36      	ldr	r3, [pc, #216]	; (35d80 <__swsetup_r+0xdc>)
   35ca6:	b570      	push	{r4, r5, r6, lr}
   35ca8:	681d      	ldr	r5, [r3, #0]
   35caa:	0006      	movs	r6, r0
   35cac:	000c      	movs	r4, r1
   35cae:	2d00      	cmp	r5, #0
   35cb0:	d005      	beq.n	35cbe <__swsetup_r+0x1a>
   35cb2:	69ab      	ldr	r3, [r5, #24]
   35cb4:	2b00      	cmp	r3, #0
   35cb6:	d102      	bne.n	35cbe <__swsetup_r+0x1a>
   35cb8:	0028      	movs	r0, r5
   35cba:	f000 f961 	bl	35f80 <__sinit>
   35cbe:	4b31      	ldr	r3, [pc, #196]	; (35d84 <__swsetup_r+0xe0>)
   35cc0:	429c      	cmp	r4, r3
   35cc2:	d10f      	bne.n	35ce4 <__swsetup_r+0x40>
   35cc4:	686c      	ldr	r4, [r5, #4]
   35cc6:	230c      	movs	r3, #12
   35cc8:	5ee2      	ldrsh	r2, [r4, r3]
   35cca:	b293      	uxth	r3, r2
   35ccc:	0719      	lsls	r1, r3, #28
   35cce:	d42d      	bmi.n	35d2c <__swsetup_r+0x88>
   35cd0:	06d9      	lsls	r1, r3, #27
   35cd2:	d411      	bmi.n	35cf8 <__swsetup_r+0x54>
   35cd4:	2309      	movs	r3, #9
   35cd6:	2001      	movs	r0, #1
   35cd8:	6033      	str	r3, [r6, #0]
   35cda:	3337      	adds	r3, #55	; 0x37
   35cdc:	4313      	orrs	r3, r2
   35cde:	81a3      	strh	r3, [r4, #12]
   35ce0:	4240      	negs	r0, r0
   35ce2:	bd70      	pop	{r4, r5, r6, pc}
   35ce4:	4b28      	ldr	r3, [pc, #160]	; (35d88 <__swsetup_r+0xe4>)
   35ce6:	429c      	cmp	r4, r3
   35ce8:	d101      	bne.n	35cee <__swsetup_r+0x4a>
   35cea:	68ac      	ldr	r4, [r5, #8]
   35cec:	e7eb      	b.n	35cc6 <__swsetup_r+0x22>
   35cee:	4b27      	ldr	r3, [pc, #156]	; (35d8c <__swsetup_r+0xe8>)
   35cf0:	429c      	cmp	r4, r3
   35cf2:	d1e8      	bne.n	35cc6 <__swsetup_r+0x22>
   35cf4:	68ec      	ldr	r4, [r5, #12]
   35cf6:	e7e6      	b.n	35cc6 <__swsetup_r+0x22>
   35cf8:	075b      	lsls	r3, r3, #29
   35cfa:	d513      	bpl.n	35d24 <__swsetup_r+0x80>
   35cfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
   35cfe:	2900      	cmp	r1, #0
   35d00:	d008      	beq.n	35d14 <__swsetup_r+0x70>
   35d02:	0023      	movs	r3, r4
   35d04:	3344      	adds	r3, #68	; 0x44
   35d06:	4299      	cmp	r1, r3
   35d08:	d002      	beq.n	35d10 <__swsetup_r+0x6c>
   35d0a:	0030      	movs	r0, r6
   35d0c:	f7ff fc78 	bl	35600 <_free_r>
   35d10:	2300      	movs	r3, #0
   35d12:	6363      	str	r3, [r4, #52]	; 0x34
   35d14:	2224      	movs	r2, #36	; 0x24
   35d16:	89a3      	ldrh	r3, [r4, #12]
   35d18:	4393      	bics	r3, r2
   35d1a:	81a3      	strh	r3, [r4, #12]
   35d1c:	2300      	movs	r3, #0
   35d1e:	6063      	str	r3, [r4, #4]
   35d20:	6923      	ldr	r3, [r4, #16]
   35d22:	6023      	str	r3, [r4, #0]
   35d24:	2308      	movs	r3, #8
   35d26:	89a2      	ldrh	r2, [r4, #12]
   35d28:	4313      	orrs	r3, r2
   35d2a:	81a3      	strh	r3, [r4, #12]
   35d2c:	6923      	ldr	r3, [r4, #16]
   35d2e:	2b00      	cmp	r3, #0
   35d30:	d10b      	bne.n	35d4a <__swsetup_r+0xa6>
   35d32:	21a0      	movs	r1, #160	; 0xa0
   35d34:	2280      	movs	r2, #128	; 0x80
   35d36:	89a3      	ldrh	r3, [r4, #12]
   35d38:	0089      	lsls	r1, r1, #2
   35d3a:	0092      	lsls	r2, r2, #2
   35d3c:	400b      	ands	r3, r1
   35d3e:	4293      	cmp	r3, r2
   35d40:	d003      	beq.n	35d4a <__swsetup_r+0xa6>
   35d42:	0021      	movs	r1, r4
   35d44:	0030      	movs	r0, r6
   35d46:	f000 f9e9 	bl	3611c <__smakebuf_r>
   35d4a:	2301      	movs	r3, #1
   35d4c:	89a2      	ldrh	r2, [r4, #12]
   35d4e:	4013      	ands	r3, r2
   35d50:	d011      	beq.n	35d76 <__swsetup_r+0xd2>
   35d52:	2300      	movs	r3, #0
   35d54:	60a3      	str	r3, [r4, #8]
   35d56:	6963      	ldr	r3, [r4, #20]
   35d58:	425b      	negs	r3, r3
   35d5a:	61a3      	str	r3, [r4, #24]
   35d5c:	2000      	movs	r0, #0
   35d5e:	6923      	ldr	r3, [r4, #16]
   35d60:	4283      	cmp	r3, r0
   35d62:	d1be      	bne.n	35ce2 <__swsetup_r+0x3e>
   35d64:	230c      	movs	r3, #12
   35d66:	5ee2      	ldrsh	r2, [r4, r3]
   35d68:	0613      	lsls	r3, r2, #24
   35d6a:	d5ba      	bpl.n	35ce2 <__swsetup_r+0x3e>
   35d6c:	2340      	movs	r3, #64	; 0x40
   35d6e:	4313      	orrs	r3, r2
   35d70:	81a3      	strh	r3, [r4, #12]
   35d72:	3801      	subs	r0, #1
   35d74:	e7b5      	b.n	35ce2 <__swsetup_r+0x3e>
   35d76:	0792      	lsls	r2, r2, #30
   35d78:	d400      	bmi.n	35d7c <__swsetup_r+0xd8>
   35d7a:	6963      	ldr	r3, [r4, #20]
   35d7c:	60a3      	str	r3, [r4, #8]
   35d7e:	e7ed      	b.n	35d5c <__swsetup_r+0xb8>
   35d80:	20000130 	.word	0x20000130
   35d84:	0003af60 	.word	0x0003af60
   35d88:	0003af80 	.word	0x0003af80
   35d8c:	0003af40 	.word	0x0003af40

00035d90 <__sflush_r>:
   35d90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   35d92:	898a      	ldrh	r2, [r1, #12]
   35d94:	0005      	movs	r5, r0
   35d96:	000c      	movs	r4, r1
   35d98:	0713      	lsls	r3, r2, #28
   35d9a:	d460      	bmi.n	35e5e <__sflush_r+0xce>
   35d9c:	684b      	ldr	r3, [r1, #4]
   35d9e:	2b00      	cmp	r3, #0
   35da0:	dc04      	bgt.n	35dac <__sflush_r+0x1c>
   35da2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   35da4:	2b00      	cmp	r3, #0
   35da6:	dc01      	bgt.n	35dac <__sflush_r+0x1c>
   35da8:	2000      	movs	r0, #0
   35daa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   35dac:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   35dae:	2f00      	cmp	r7, #0
   35db0:	d0fa      	beq.n	35da8 <__sflush_r+0x18>
   35db2:	2300      	movs	r3, #0
   35db4:	682e      	ldr	r6, [r5, #0]
   35db6:	602b      	str	r3, [r5, #0]
   35db8:	2380      	movs	r3, #128	; 0x80
   35dba:	015b      	lsls	r3, r3, #5
   35dbc:	401a      	ands	r2, r3
   35dbe:	d034      	beq.n	35e2a <__sflush_r+0x9a>
   35dc0:	6d60      	ldr	r0, [r4, #84]	; 0x54
   35dc2:	89a3      	ldrh	r3, [r4, #12]
   35dc4:	075b      	lsls	r3, r3, #29
   35dc6:	d506      	bpl.n	35dd6 <__sflush_r+0x46>
   35dc8:	6863      	ldr	r3, [r4, #4]
   35dca:	1ac0      	subs	r0, r0, r3
   35dcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   35dce:	2b00      	cmp	r3, #0
   35dd0:	d001      	beq.n	35dd6 <__sflush_r+0x46>
   35dd2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   35dd4:	1ac0      	subs	r0, r0, r3
   35dd6:	0002      	movs	r2, r0
   35dd8:	6a21      	ldr	r1, [r4, #32]
   35dda:	2300      	movs	r3, #0
   35ddc:	0028      	movs	r0, r5
   35dde:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   35de0:	47b8      	blx	r7
   35de2:	89a1      	ldrh	r1, [r4, #12]
   35de4:	1c43      	adds	r3, r0, #1
   35de6:	d106      	bne.n	35df6 <__sflush_r+0x66>
   35de8:	682b      	ldr	r3, [r5, #0]
   35dea:	2b1d      	cmp	r3, #29
   35dec:	d831      	bhi.n	35e52 <__sflush_r+0xc2>
   35dee:	4a2c      	ldr	r2, [pc, #176]	; (35ea0 <__sflush_r+0x110>)
   35df0:	40da      	lsrs	r2, r3
   35df2:	07d3      	lsls	r3, r2, #31
   35df4:	d52d      	bpl.n	35e52 <__sflush_r+0xc2>
   35df6:	2300      	movs	r3, #0
   35df8:	6063      	str	r3, [r4, #4]
   35dfa:	6923      	ldr	r3, [r4, #16]
   35dfc:	6023      	str	r3, [r4, #0]
   35dfe:	04cb      	lsls	r3, r1, #19
   35e00:	d505      	bpl.n	35e0e <__sflush_r+0x7e>
   35e02:	1c43      	adds	r3, r0, #1
   35e04:	d102      	bne.n	35e0c <__sflush_r+0x7c>
   35e06:	682b      	ldr	r3, [r5, #0]
   35e08:	2b00      	cmp	r3, #0
   35e0a:	d100      	bne.n	35e0e <__sflush_r+0x7e>
   35e0c:	6560      	str	r0, [r4, #84]	; 0x54
   35e0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   35e10:	602e      	str	r6, [r5, #0]
   35e12:	2900      	cmp	r1, #0
   35e14:	d0c8      	beq.n	35da8 <__sflush_r+0x18>
   35e16:	0023      	movs	r3, r4
   35e18:	3344      	adds	r3, #68	; 0x44
   35e1a:	4299      	cmp	r1, r3
   35e1c:	d002      	beq.n	35e24 <__sflush_r+0x94>
   35e1e:	0028      	movs	r0, r5
   35e20:	f7ff fbee 	bl	35600 <_free_r>
   35e24:	2000      	movs	r0, #0
   35e26:	6360      	str	r0, [r4, #52]	; 0x34
   35e28:	e7bf      	b.n	35daa <__sflush_r+0x1a>
   35e2a:	2301      	movs	r3, #1
   35e2c:	6a21      	ldr	r1, [r4, #32]
   35e2e:	0028      	movs	r0, r5
   35e30:	47b8      	blx	r7
   35e32:	1c43      	adds	r3, r0, #1
   35e34:	d1c5      	bne.n	35dc2 <__sflush_r+0x32>
   35e36:	682b      	ldr	r3, [r5, #0]
   35e38:	2b00      	cmp	r3, #0
   35e3a:	d0c2      	beq.n	35dc2 <__sflush_r+0x32>
   35e3c:	2b1d      	cmp	r3, #29
   35e3e:	d001      	beq.n	35e44 <__sflush_r+0xb4>
   35e40:	2b16      	cmp	r3, #22
   35e42:	d101      	bne.n	35e48 <__sflush_r+0xb8>
   35e44:	602e      	str	r6, [r5, #0]
   35e46:	e7af      	b.n	35da8 <__sflush_r+0x18>
   35e48:	2340      	movs	r3, #64	; 0x40
   35e4a:	89a2      	ldrh	r2, [r4, #12]
   35e4c:	4313      	orrs	r3, r2
   35e4e:	81a3      	strh	r3, [r4, #12]
   35e50:	e7ab      	b.n	35daa <__sflush_r+0x1a>
   35e52:	2340      	movs	r3, #64	; 0x40
   35e54:	430b      	orrs	r3, r1
   35e56:	2001      	movs	r0, #1
   35e58:	81a3      	strh	r3, [r4, #12]
   35e5a:	4240      	negs	r0, r0
   35e5c:	e7a5      	b.n	35daa <__sflush_r+0x1a>
   35e5e:	690f      	ldr	r7, [r1, #16]
   35e60:	2f00      	cmp	r7, #0
   35e62:	d0a1      	beq.n	35da8 <__sflush_r+0x18>
   35e64:	680b      	ldr	r3, [r1, #0]
   35e66:	600f      	str	r7, [r1, #0]
   35e68:	1bdb      	subs	r3, r3, r7
   35e6a:	9301      	str	r3, [sp, #4]
   35e6c:	2300      	movs	r3, #0
   35e6e:	0792      	lsls	r2, r2, #30
   35e70:	d100      	bne.n	35e74 <__sflush_r+0xe4>
   35e72:	694b      	ldr	r3, [r1, #20]
   35e74:	60a3      	str	r3, [r4, #8]
   35e76:	9b01      	ldr	r3, [sp, #4]
   35e78:	2b00      	cmp	r3, #0
   35e7a:	dc00      	bgt.n	35e7e <__sflush_r+0xee>
   35e7c:	e794      	b.n	35da8 <__sflush_r+0x18>
   35e7e:	9b01      	ldr	r3, [sp, #4]
   35e80:	003a      	movs	r2, r7
   35e82:	6a21      	ldr	r1, [r4, #32]
   35e84:	0028      	movs	r0, r5
   35e86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   35e88:	47b0      	blx	r6
   35e8a:	2800      	cmp	r0, #0
   35e8c:	dc03      	bgt.n	35e96 <__sflush_r+0x106>
   35e8e:	2340      	movs	r3, #64	; 0x40
   35e90:	89a2      	ldrh	r2, [r4, #12]
   35e92:	4313      	orrs	r3, r2
   35e94:	e7df      	b.n	35e56 <__sflush_r+0xc6>
   35e96:	9b01      	ldr	r3, [sp, #4]
   35e98:	183f      	adds	r7, r7, r0
   35e9a:	1a1b      	subs	r3, r3, r0
   35e9c:	9301      	str	r3, [sp, #4]
   35e9e:	e7ea      	b.n	35e76 <__sflush_r+0xe6>
   35ea0:	20400001 	.word	0x20400001

00035ea4 <_fflush_r>:
   35ea4:	690b      	ldr	r3, [r1, #16]
   35ea6:	b570      	push	{r4, r5, r6, lr}
   35ea8:	0005      	movs	r5, r0
   35eaa:	000c      	movs	r4, r1
   35eac:	2b00      	cmp	r3, #0
   35eae:	d101      	bne.n	35eb4 <_fflush_r+0x10>
   35eb0:	2000      	movs	r0, #0
   35eb2:	bd70      	pop	{r4, r5, r6, pc}
   35eb4:	2800      	cmp	r0, #0
   35eb6:	d004      	beq.n	35ec2 <_fflush_r+0x1e>
   35eb8:	6983      	ldr	r3, [r0, #24]
   35eba:	2b00      	cmp	r3, #0
   35ebc:	d101      	bne.n	35ec2 <_fflush_r+0x1e>
   35ebe:	f000 f85f 	bl	35f80 <__sinit>
   35ec2:	4b0b      	ldr	r3, [pc, #44]	; (35ef0 <_fflush_r+0x4c>)
   35ec4:	429c      	cmp	r4, r3
   35ec6:	d109      	bne.n	35edc <_fflush_r+0x38>
   35ec8:	686c      	ldr	r4, [r5, #4]
   35eca:	220c      	movs	r2, #12
   35ecc:	5ea3      	ldrsh	r3, [r4, r2]
   35ece:	2b00      	cmp	r3, #0
   35ed0:	d0ee      	beq.n	35eb0 <_fflush_r+0xc>
   35ed2:	0021      	movs	r1, r4
   35ed4:	0028      	movs	r0, r5
   35ed6:	f7ff ff5b 	bl	35d90 <__sflush_r>
   35eda:	e7ea      	b.n	35eb2 <_fflush_r+0xe>
   35edc:	4b05      	ldr	r3, [pc, #20]	; (35ef4 <_fflush_r+0x50>)
   35ede:	429c      	cmp	r4, r3
   35ee0:	d101      	bne.n	35ee6 <_fflush_r+0x42>
   35ee2:	68ac      	ldr	r4, [r5, #8]
   35ee4:	e7f1      	b.n	35eca <_fflush_r+0x26>
   35ee6:	4b04      	ldr	r3, [pc, #16]	; (35ef8 <_fflush_r+0x54>)
   35ee8:	429c      	cmp	r4, r3
   35eea:	d1ee      	bne.n	35eca <_fflush_r+0x26>
   35eec:	68ec      	ldr	r4, [r5, #12]
   35eee:	e7ec      	b.n	35eca <_fflush_r+0x26>
   35ef0:	0003af60 	.word	0x0003af60
   35ef4:	0003af80 	.word	0x0003af80
   35ef8:	0003af40 	.word	0x0003af40

00035efc <_cleanup_r>:
   35efc:	b510      	push	{r4, lr}
   35efe:	4902      	ldr	r1, [pc, #8]	; (35f08 <_cleanup_r+0xc>)
   35f00:	f000 f8b2 	bl	36068 <_fwalk_reent>
   35f04:	bd10      	pop	{r4, pc}
   35f06:	46c0      	nop			; (mov r8, r8)
   35f08:	00035ea5 	.word	0x00035ea5

00035f0c <std.isra.0>:
   35f0c:	2300      	movs	r3, #0
   35f0e:	b510      	push	{r4, lr}
   35f10:	0004      	movs	r4, r0
   35f12:	6003      	str	r3, [r0, #0]
   35f14:	6043      	str	r3, [r0, #4]
   35f16:	6083      	str	r3, [r0, #8]
   35f18:	8181      	strh	r1, [r0, #12]
   35f1a:	6643      	str	r3, [r0, #100]	; 0x64
   35f1c:	81c2      	strh	r2, [r0, #14]
   35f1e:	6103      	str	r3, [r0, #16]
   35f20:	6143      	str	r3, [r0, #20]
   35f22:	6183      	str	r3, [r0, #24]
   35f24:	0019      	movs	r1, r3
   35f26:	2208      	movs	r2, #8
   35f28:	305c      	adds	r0, #92	; 0x5c
   35f2a:	f7ff fb60 	bl	355ee <memset>
   35f2e:	4b05      	ldr	r3, [pc, #20]	; (35f44 <std.isra.0+0x38>)
   35f30:	6224      	str	r4, [r4, #32]
   35f32:	6263      	str	r3, [r4, #36]	; 0x24
   35f34:	4b04      	ldr	r3, [pc, #16]	; (35f48 <std.isra.0+0x3c>)
   35f36:	62a3      	str	r3, [r4, #40]	; 0x28
   35f38:	4b04      	ldr	r3, [pc, #16]	; (35f4c <std.isra.0+0x40>)
   35f3a:	62e3      	str	r3, [r4, #44]	; 0x2c
   35f3c:	4b04      	ldr	r3, [pc, #16]	; (35f50 <std.isra.0+0x44>)
   35f3e:	6323      	str	r3, [r4, #48]	; 0x30
   35f40:	bd10      	pop	{r4, pc}
   35f42:	46c0      	nop			; (mov r8, r8)
   35f44:	000367a9 	.word	0x000367a9
   35f48:	000367d1 	.word	0x000367d1
   35f4c:	00036809 	.word	0x00036809
   35f50:	00036835 	.word	0x00036835

00035f54 <__sfmoreglue>:
   35f54:	b570      	push	{r4, r5, r6, lr}
   35f56:	2568      	movs	r5, #104	; 0x68
   35f58:	1e4a      	subs	r2, r1, #1
   35f5a:	4355      	muls	r5, r2
   35f5c:	000e      	movs	r6, r1
   35f5e:	0029      	movs	r1, r5
   35f60:	3174      	adds	r1, #116	; 0x74
   35f62:	f7ff fb97 	bl	35694 <_malloc_r>
   35f66:	1e04      	subs	r4, r0, #0
   35f68:	d008      	beq.n	35f7c <__sfmoreglue+0x28>
   35f6a:	2100      	movs	r1, #0
   35f6c:	002a      	movs	r2, r5
   35f6e:	6001      	str	r1, [r0, #0]
   35f70:	6046      	str	r6, [r0, #4]
   35f72:	300c      	adds	r0, #12
   35f74:	60a0      	str	r0, [r4, #8]
   35f76:	3268      	adds	r2, #104	; 0x68
   35f78:	f7ff fb39 	bl	355ee <memset>
   35f7c:	0020      	movs	r0, r4
   35f7e:	bd70      	pop	{r4, r5, r6, pc}

00035f80 <__sinit>:
   35f80:	6983      	ldr	r3, [r0, #24]
   35f82:	b513      	push	{r0, r1, r4, lr}
   35f84:	0004      	movs	r4, r0
   35f86:	2b00      	cmp	r3, #0
   35f88:	d128      	bne.n	35fdc <__sinit+0x5c>
   35f8a:	6483      	str	r3, [r0, #72]	; 0x48
   35f8c:	64c3      	str	r3, [r0, #76]	; 0x4c
   35f8e:	6503      	str	r3, [r0, #80]	; 0x50
   35f90:	4b13      	ldr	r3, [pc, #76]	; (35fe0 <__sinit+0x60>)
   35f92:	4a14      	ldr	r2, [pc, #80]	; (35fe4 <__sinit+0x64>)
   35f94:	681b      	ldr	r3, [r3, #0]
   35f96:	6282      	str	r2, [r0, #40]	; 0x28
   35f98:	9301      	str	r3, [sp, #4]
   35f9a:	4298      	cmp	r0, r3
   35f9c:	d101      	bne.n	35fa2 <__sinit+0x22>
   35f9e:	2301      	movs	r3, #1
   35fa0:	6183      	str	r3, [r0, #24]
   35fa2:	0020      	movs	r0, r4
   35fa4:	f000 f820 	bl	35fe8 <__sfp>
   35fa8:	6060      	str	r0, [r4, #4]
   35faa:	0020      	movs	r0, r4
   35fac:	f000 f81c 	bl	35fe8 <__sfp>
   35fb0:	60a0      	str	r0, [r4, #8]
   35fb2:	0020      	movs	r0, r4
   35fb4:	f000 f818 	bl	35fe8 <__sfp>
   35fb8:	2200      	movs	r2, #0
   35fba:	60e0      	str	r0, [r4, #12]
   35fbc:	2104      	movs	r1, #4
   35fbe:	6860      	ldr	r0, [r4, #4]
   35fc0:	f7ff ffa4 	bl	35f0c <std.isra.0>
   35fc4:	2201      	movs	r2, #1
   35fc6:	2109      	movs	r1, #9
   35fc8:	68a0      	ldr	r0, [r4, #8]
   35fca:	f7ff ff9f 	bl	35f0c <std.isra.0>
   35fce:	2202      	movs	r2, #2
   35fd0:	2112      	movs	r1, #18
   35fd2:	68e0      	ldr	r0, [r4, #12]
   35fd4:	f7ff ff9a 	bl	35f0c <std.isra.0>
   35fd8:	2301      	movs	r3, #1
   35fda:	61a3      	str	r3, [r4, #24]
   35fdc:	bd13      	pop	{r0, r1, r4, pc}
   35fde:	46c0      	nop			; (mov r8, r8)
   35fe0:	0003af3c 	.word	0x0003af3c
   35fe4:	00035efd 	.word	0x00035efd

00035fe8 <__sfp>:
   35fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35fea:	4b1e      	ldr	r3, [pc, #120]	; (36064 <__sfp+0x7c>)
   35fec:	0007      	movs	r7, r0
   35fee:	681e      	ldr	r6, [r3, #0]
   35ff0:	69b3      	ldr	r3, [r6, #24]
   35ff2:	2b00      	cmp	r3, #0
   35ff4:	d102      	bne.n	35ffc <__sfp+0x14>
   35ff6:	0030      	movs	r0, r6
   35ff8:	f7ff ffc2 	bl	35f80 <__sinit>
   35ffc:	3648      	adds	r6, #72	; 0x48
   35ffe:	68b4      	ldr	r4, [r6, #8]
   36000:	6873      	ldr	r3, [r6, #4]
   36002:	3b01      	subs	r3, #1
   36004:	d504      	bpl.n	36010 <__sfp+0x28>
   36006:	6833      	ldr	r3, [r6, #0]
   36008:	2b00      	cmp	r3, #0
   3600a:	d007      	beq.n	3601c <__sfp+0x34>
   3600c:	6836      	ldr	r6, [r6, #0]
   3600e:	e7f6      	b.n	35ffe <__sfp+0x16>
   36010:	220c      	movs	r2, #12
   36012:	5ea5      	ldrsh	r5, [r4, r2]
   36014:	2d00      	cmp	r5, #0
   36016:	d00d      	beq.n	36034 <__sfp+0x4c>
   36018:	3468      	adds	r4, #104	; 0x68
   3601a:	e7f2      	b.n	36002 <__sfp+0x1a>
   3601c:	2104      	movs	r1, #4
   3601e:	0038      	movs	r0, r7
   36020:	f7ff ff98 	bl	35f54 <__sfmoreglue>
   36024:	6030      	str	r0, [r6, #0]
   36026:	2800      	cmp	r0, #0
   36028:	d1f0      	bne.n	3600c <__sfp+0x24>
   3602a:	230c      	movs	r3, #12
   3602c:	0004      	movs	r4, r0
   3602e:	603b      	str	r3, [r7, #0]
   36030:	0020      	movs	r0, r4
   36032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   36034:	2301      	movs	r3, #1
   36036:	0020      	movs	r0, r4
   36038:	425b      	negs	r3, r3
   3603a:	81e3      	strh	r3, [r4, #14]
   3603c:	3302      	adds	r3, #2
   3603e:	81a3      	strh	r3, [r4, #12]
   36040:	6665      	str	r5, [r4, #100]	; 0x64
   36042:	6025      	str	r5, [r4, #0]
   36044:	60a5      	str	r5, [r4, #8]
   36046:	6065      	str	r5, [r4, #4]
   36048:	6125      	str	r5, [r4, #16]
   3604a:	6165      	str	r5, [r4, #20]
   3604c:	61a5      	str	r5, [r4, #24]
   3604e:	2208      	movs	r2, #8
   36050:	0029      	movs	r1, r5
   36052:	305c      	adds	r0, #92	; 0x5c
   36054:	f7ff facb 	bl	355ee <memset>
   36058:	6365      	str	r5, [r4, #52]	; 0x34
   3605a:	63a5      	str	r5, [r4, #56]	; 0x38
   3605c:	64a5      	str	r5, [r4, #72]	; 0x48
   3605e:	64e5      	str	r5, [r4, #76]	; 0x4c
   36060:	e7e6      	b.n	36030 <__sfp+0x48>
   36062:	46c0      	nop			; (mov r8, r8)
   36064:	0003af3c 	.word	0x0003af3c

00036068 <_fwalk_reent>:
   36068:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3606a:	0004      	movs	r4, r0
   3606c:	0007      	movs	r7, r0
   3606e:	2600      	movs	r6, #0
   36070:	9101      	str	r1, [sp, #4]
   36072:	3448      	adds	r4, #72	; 0x48
   36074:	2c00      	cmp	r4, #0
   36076:	d101      	bne.n	3607c <_fwalk_reent+0x14>
   36078:	0030      	movs	r0, r6
   3607a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   3607c:	6863      	ldr	r3, [r4, #4]
   3607e:	68a5      	ldr	r5, [r4, #8]
   36080:	9300      	str	r3, [sp, #0]
   36082:	9b00      	ldr	r3, [sp, #0]
   36084:	3b01      	subs	r3, #1
   36086:	9300      	str	r3, [sp, #0]
   36088:	d501      	bpl.n	3608e <_fwalk_reent+0x26>
   3608a:	6824      	ldr	r4, [r4, #0]
   3608c:	e7f2      	b.n	36074 <_fwalk_reent+0xc>
   3608e:	89ab      	ldrh	r3, [r5, #12]
   36090:	2b01      	cmp	r3, #1
   36092:	d908      	bls.n	360a6 <_fwalk_reent+0x3e>
   36094:	220e      	movs	r2, #14
   36096:	5eab      	ldrsh	r3, [r5, r2]
   36098:	3301      	adds	r3, #1
   3609a:	d004      	beq.n	360a6 <_fwalk_reent+0x3e>
   3609c:	0029      	movs	r1, r5
   3609e:	0038      	movs	r0, r7
   360a0:	9b01      	ldr	r3, [sp, #4]
   360a2:	4798      	blx	r3
   360a4:	4306      	orrs	r6, r0
   360a6:	3568      	adds	r5, #104	; 0x68
   360a8:	e7eb      	b.n	36082 <_fwalk_reent+0x1a>

000360aa <__locale_ctype_ptr_l>:
   360aa:	30ec      	adds	r0, #236	; 0xec
   360ac:	6800      	ldr	r0, [r0, #0]
   360ae:	4770      	bx	lr

000360b0 <__locale_ctype_ptr>:
   360b0:	4b04      	ldr	r3, [pc, #16]	; (360c4 <__locale_ctype_ptr+0x14>)
   360b2:	681b      	ldr	r3, [r3, #0]
   360b4:	6a1b      	ldr	r3, [r3, #32]
   360b6:	2b00      	cmp	r3, #0
   360b8:	d100      	bne.n	360bc <__locale_ctype_ptr+0xc>
   360ba:	4b03      	ldr	r3, [pc, #12]	; (360c8 <__locale_ctype_ptr+0x18>)
   360bc:	33ec      	adds	r3, #236	; 0xec
   360be:	6818      	ldr	r0, [r3, #0]
   360c0:	4770      	bx	lr
   360c2:	46c0      	nop			; (mov r8, r8)
   360c4:	20000130 	.word	0x20000130
   360c8:	20000194 	.word	0x20000194

000360cc <__swhatbuf_r>:
   360cc:	b570      	push	{r4, r5, r6, lr}
   360ce:	000e      	movs	r6, r1
   360d0:	001d      	movs	r5, r3
   360d2:	230e      	movs	r3, #14
   360d4:	5ec9      	ldrsh	r1, [r1, r3]
   360d6:	b090      	sub	sp, #64	; 0x40
   360d8:	0014      	movs	r4, r2
   360da:	2900      	cmp	r1, #0
   360dc:	da07      	bge.n	360ee <__swhatbuf_r+0x22>
   360de:	2300      	movs	r3, #0
   360e0:	602b      	str	r3, [r5, #0]
   360e2:	89b3      	ldrh	r3, [r6, #12]
   360e4:	061b      	lsls	r3, r3, #24
   360e6:	d411      	bmi.n	3610c <__swhatbuf_r+0x40>
   360e8:	2380      	movs	r3, #128	; 0x80
   360ea:	00db      	lsls	r3, r3, #3
   360ec:	e00f      	b.n	3610e <__swhatbuf_r+0x42>
   360ee:	aa01      	add	r2, sp, #4
   360f0:	f000 fbe6 	bl	368c0 <_fstat_r>
   360f4:	2800      	cmp	r0, #0
   360f6:	dbf2      	blt.n	360de <__swhatbuf_r+0x12>
   360f8:	22f0      	movs	r2, #240	; 0xf0
   360fa:	9b02      	ldr	r3, [sp, #8]
   360fc:	0212      	lsls	r2, r2, #8
   360fe:	4013      	ands	r3, r2
   36100:	4a05      	ldr	r2, [pc, #20]	; (36118 <__swhatbuf_r+0x4c>)
   36102:	189b      	adds	r3, r3, r2
   36104:	425a      	negs	r2, r3
   36106:	4153      	adcs	r3, r2
   36108:	602b      	str	r3, [r5, #0]
   3610a:	e7ed      	b.n	360e8 <__swhatbuf_r+0x1c>
   3610c:	2340      	movs	r3, #64	; 0x40
   3610e:	2000      	movs	r0, #0
   36110:	6023      	str	r3, [r4, #0]
   36112:	b010      	add	sp, #64	; 0x40
   36114:	bd70      	pop	{r4, r5, r6, pc}
   36116:	46c0      	nop			; (mov r8, r8)
   36118:	ffffe000 	.word	0xffffe000

0003611c <__smakebuf_r>:
   3611c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3611e:	2602      	movs	r6, #2
   36120:	898b      	ldrh	r3, [r1, #12]
   36122:	0005      	movs	r5, r0
   36124:	000c      	movs	r4, r1
   36126:	4233      	tst	r3, r6
   36128:	d006      	beq.n	36138 <__smakebuf_r+0x1c>
   3612a:	0023      	movs	r3, r4
   3612c:	3347      	adds	r3, #71	; 0x47
   3612e:	6023      	str	r3, [r4, #0]
   36130:	6123      	str	r3, [r4, #16]
   36132:	2301      	movs	r3, #1
   36134:	6163      	str	r3, [r4, #20]
   36136:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   36138:	ab01      	add	r3, sp, #4
   3613a:	466a      	mov	r2, sp
   3613c:	f7ff ffc6 	bl	360cc <__swhatbuf_r>
   36140:	9900      	ldr	r1, [sp, #0]
   36142:	0007      	movs	r7, r0
   36144:	0028      	movs	r0, r5
   36146:	f7ff faa5 	bl	35694 <_malloc_r>
   3614a:	2800      	cmp	r0, #0
   3614c:	d108      	bne.n	36160 <__smakebuf_r+0x44>
   3614e:	220c      	movs	r2, #12
   36150:	5ea3      	ldrsh	r3, [r4, r2]
   36152:	059a      	lsls	r2, r3, #22
   36154:	d4ef      	bmi.n	36136 <__smakebuf_r+0x1a>
   36156:	2203      	movs	r2, #3
   36158:	4393      	bics	r3, r2
   3615a:	431e      	orrs	r6, r3
   3615c:	81a6      	strh	r6, [r4, #12]
   3615e:	e7e4      	b.n	3612a <__smakebuf_r+0xe>
   36160:	4b0f      	ldr	r3, [pc, #60]	; (361a0 <__smakebuf_r+0x84>)
   36162:	62ab      	str	r3, [r5, #40]	; 0x28
   36164:	2380      	movs	r3, #128	; 0x80
   36166:	89a2      	ldrh	r2, [r4, #12]
   36168:	6020      	str	r0, [r4, #0]
   3616a:	4313      	orrs	r3, r2
   3616c:	81a3      	strh	r3, [r4, #12]
   3616e:	9b00      	ldr	r3, [sp, #0]
   36170:	6120      	str	r0, [r4, #16]
   36172:	6163      	str	r3, [r4, #20]
   36174:	9b01      	ldr	r3, [sp, #4]
   36176:	2b00      	cmp	r3, #0
   36178:	d00d      	beq.n	36196 <__smakebuf_r+0x7a>
   3617a:	230e      	movs	r3, #14
   3617c:	5ee1      	ldrsh	r1, [r4, r3]
   3617e:	0028      	movs	r0, r5
   36180:	f000 fbb0 	bl	368e4 <_isatty_r>
   36184:	2800      	cmp	r0, #0
   36186:	d006      	beq.n	36196 <__smakebuf_r+0x7a>
   36188:	2203      	movs	r2, #3
   3618a:	89a3      	ldrh	r3, [r4, #12]
   3618c:	4393      	bics	r3, r2
   3618e:	001a      	movs	r2, r3
   36190:	2301      	movs	r3, #1
   36192:	4313      	orrs	r3, r2
   36194:	81a3      	strh	r3, [r4, #12]
   36196:	89a0      	ldrh	r0, [r4, #12]
   36198:	4338      	orrs	r0, r7
   3619a:	81a0      	strh	r0, [r4, #12]
   3619c:	e7cb      	b.n	36136 <__smakebuf_r+0x1a>
   3619e:	46c0      	nop			; (mov r8, r8)
   361a0:	00035efd 	.word	0x00035efd

000361a4 <__ascii_mbtowc>:
   361a4:	b082      	sub	sp, #8
   361a6:	2900      	cmp	r1, #0
   361a8:	d100      	bne.n	361ac <__ascii_mbtowc+0x8>
   361aa:	a901      	add	r1, sp, #4
   361ac:	1e10      	subs	r0, r2, #0
   361ae:	d006      	beq.n	361be <__ascii_mbtowc+0x1a>
   361b0:	2b00      	cmp	r3, #0
   361b2:	d006      	beq.n	361c2 <__ascii_mbtowc+0x1e>
   361b4:	7813      	ldrb	r3, [r2, #0]
   361b6:	600b      	str	r3, [r1, #0]
   361b8:	7810      	ldrb	r0, [r2, #0]
   361ba:	1e43      	subs	r3, r0, #1
   361bc:	4198      	sbcs	r0, r3
   361be:	b002      	add	sp, #8
   361c0:	4770      	bx	lr
   361c2:	2002      	movs	r0, #2
   361c4:	4240      	negs	r0, r0
   361c6:	e7fa      	b.n	361be <__ascii_mbtowc+0x1a>

000361c8 <__malloc_lock>:
   361c8:	4770      	bx	lr

000361ca <__malloc_unlock>:
   361ca:	4770      	bx	lr

000361cc <__ssputs_r>:
   361cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   361ce:	688e      	ldr	r6, [r1, #8]
   361d0:	b085      	sub	sp, #20
   361d2:	0007      	movs	r7, r0
   361d4:	000c      	movs	r4, r1
   361d6:	9203      	str	r2, [sp, #12]
   361d8:	9301      	str	r3, [sp, #4]
   361da:	429e      	cmp	r6, r3
   361dc:	d839      	bhi.n	36252 <__ssputs_r+0x86>
   361de:	2390      	movs	r3, #144	; 0x90
   361e0:	898a      	ldrh	r2, [r1, #12]
   361e2:	00db      	lsls	r3, r3, #3
   361e4:	421a      	tst	r2, r3
   361e6:	d034      	beq.n	36252 <__ssputs_r+0x86>
   361e8:	2503      	movs	r5, #3
   361ea:	6909      	ldr	r1, [r1, #16]
   361ec:	6823      	ldr	r3, [r4, #0]
   361ee:	1a5b      	subs	r3, r3, r1
   361f0:	9302      	str	r3, [sp, #8]
   361f2:	6963      	ldr	r3, [r4, #20]
   361f4:	9802      	ldr	r0, [sp, #8]
   361f6:	435d      	muls	r5, r3
   361f8:	0feb      	lsrs	r3, r5, #31
   361fa:	195d      	adds	r5, r3, r5
   361fc:	9b01      	ldr	r3, [sp, #4]
   361fe:	106d      	asrs	r5, r5, #1
   36200:	3301      	adds	r3, #1
   36202:	181b      	adds	r3, r3, r0
   36204:	42ab      	cmp	r3, r5
   36206:	d900      	bls.n	3620a <__ssputs_r+0x3e>
   36208:	001d      	movs	r5, r3
   3620a:	0553      	lsls	r3, r2, #21
   3620c:	d532      	bpl.n	36274 <__ssputs_r+0xa8>
   3620e:	0029      	movs	r1, r5
   36210:	0038      	movs	r0, r7
   36212:	f7ff fa3f 	bl	35694 <_malloc_r>
   36216:	1e06      	subs	r6, r0, #0
   36218:	d109      	bne.n	3622e <__ssputs_r+0x62>
   3621a:	230c      	movs	r3, #12
   3621c:	603b      	str	r3, [r7, #0]
   3621e:	2340      	movs	r3, #64	; 0x40
   36220:	2001      	movs	r0, #1
   36222:	89a2      	ldrh	r2, [r4, #12]
   36224:	4240      	negs	r0, r0
   36226:	4313      	orrs	r3, r2
   36228:	81a3      	strh	r3, [r4, #12]
   3622a:	b005      	add	sp, #20
   3622c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3622e:	9a02      	ldr	r2, [sp, #8]
   36230:	6921      	ldr	r1, [r4, #16]
   36232:	f7ff f9c1 	bl	355b8 <memcpy>
   36236:	89a3      	ldrh	r3, [r4, #12]
   36238:	4a14      	ldr	r2, [pc, #80]	; (3628c <__ssputs_r+0xc0>)
   3623a:	401a      	ands	r2, r3
   3623c:	2380      	movs	r3, #128	; 0x80
   3623e:	4313      	orrs	r3, r2
   36240:	81a3      	strh	r3, [r4, #12]
   36242:	9b02      	ldr	r3, [sp, #8]
   36244:	6126      	str	r6, [r4, #16]
   36246:	18f6      	adds	r6, r6, r3
   36248:	6026      	str	r6, [r4, #0]
   3624a:	6165      	str	r5, [r4, #20]
   3624c:	9e01      	ldr	r6, [sp, #4]
   3624e:	1aed      	subs	r5, r5, r3
   36250:	60a5      	str	r5, [r4, #8]
   36252:	9b01      	ldr	r3, [sp, #4]
   36254:	42b3      	cmp	r3, r6
   36256:	d200      	bcs.n	3625a <__ssputs_r+0x8e>
   36258:	001e      	movs	r6, r3
   3625a:	0032      	movs	r2, r6
   3625c:	9903      	ldr	r1, [sp, #12]
   3625e:	6820      	ldr	r0, [r4, #0]
   36260:	f7ff f9b3 	bl	355ca <memmove>
   36264:	68a3      	ldr	r3, [r4, #8]
   36266:	2000      	movs	r0, #0
   36268:	1b9b      	subs	r3, r3, r6
   3626a:	60a3      	str	r3, [r4, #8]
   3626c:	6823      	ldr	r3, [r4, #0]
   3626e:	199e      	adds	r6, r3, r6
   36270:	6026      	str	r6, [r4, #0]
   36272:	e7da      	b.n	3622a <__ssputs_r+0x5e>
   36274:	002a      	movs	r2, r5
   36276:	0038      	movs	r0, r7
   36278:	f000 fb65 	bl	36946 <_realloc_r>
   3627c:	1e06      	subs	r6, r0, #0
   3627e:	d1e0      	bne.n	36242 <__ssputs_r+0x76>
   36280:	6921      	ldr	r1, [r4, #16]
   36282:	0038      	movs	r0, r7
   36284:	f7ff f9bc 	bl	35600 <_free_r>
   36288:	e7c7      	b.n	3621a <__ssputs_r+0x4e>
   3628a:	46c0      	nop			; (mov r8, r8)
   3628c:	fffffb7f 	.word	0xfffffb7f

00036290 <_svfiprintf_r>:
   36290:	b5f0      	push	{r4, r5, r6, r7, lr}
   36292:	b09f      	sub	sp, #124	; 0x7c
   36294:	9002      	str	r0, [sp, #8]
   36296:	9305      	str	r3, [sp, #20]
   36298:	898b      	ldrh	r3, [r1, #12]
   3629a:	000f      	movs	r7, r1
   3629c:	0016      	movs	r6, r2
   3629e:	061b      	lsls	r3, r3, #24
   362a0:	d511      	bpl.n	362c6 <_svfiprintf_r+0x36>
   362a2:	690b      	ldr	r3, [r1, #16]
   362a4:	2b00      	cmp	r3, #0
   362a6:	d10e      	bne.n	362c6 <_svfiprintf_r+0x36>
   362a8:	2140      	movs	r1, #64	; 0x40
   362aa:	f7ff f9f3 	bl	35694 <_malloc_r>
   362ae:	6038      	str	r0, [r7, #0]
   362b0:	6138      	str	r0, [r7, #16]
   362b2:	2800      	cmp	r0, #0
   362b4:	d105      	bne.n	362c2 <_svfiprintf_r+0x32>
   362b6:	230c      	movs	r3, #12
   362b8:	9a02      	ldr	r2, [sp, #8]
   362ba:	3801      	subs	r0, #1
   362bc:	6013      	str	r3, [r2, #0]
   362be:	b01f      	add	sp, #124	; 0x7c
   362c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   362c2:	2340      	movs	r3, #64	; 0x40
   362c4:	617b      	str	r3, [r7, #20]
   362c6:	2300      	movs	r3, #0
   362c8:	ad06      	add	r5, sp, #24
   362ca:	616b      	str	r3, [r5, #20]
   362cc:	3320      	adds	r3, #32
   362ce:	766b      	strb	r3, [r5, #25]
   362d0:	3310      	adds	r3, #16
   362d2:	76ab      	strb	r3, [r5, #26]
   362d4:	0034      	movs	r4, r6
   362d6:	7823      	ldrb	r3, [r4, #0]
   362d8:	2b00      	cmp	r3, #0
   362da:	d147      	bne.n	3636c <_svfiprintf_r+0xdc>
   362dc:	1ba3      	subs	r3, r4, r6
   362de:	9304      	str	r3, [sp, #16]
   362e0:	d00d      	beq.n	362fe <_svfiprintf_r+0x6e>
   362e2:	1ba3      	subs	r3, r4, r6
   362e4:	0032      	movs	r2, r6
   362e6:	0039      	movs	r1, r7
   362e8:	9802      	ldr	r0, [sp, #8]
   362ea:	f7ff ff6f 	bl	361cc <__ssputs_r>
   362ee:	1c43      	adds	r3, r0, #1
   362f0:	d100      	bne.n	362f4 <_svfiprintf_r+0x64>
   362f2:	e0b5      	b.n	36460 <_svfiprintf_r+0x1d0>
   362f4:	696a      	ldr	r2, [r5, #20]
   362f6:	9b04      	ldr	r3, [sp, #16]
   362f8:	4694      	mov	ip, r2
   362fa:	4463      	add	r3, ip
   362fc:	616b      	str	r3, [r5, #20]
   362fe:	7823      	ldrb	r3, [r4, #0]
   36300:	2b00      	cmp	r3, #0
   36302:	d100      	bne.n	36306 <_svfiprintf_r+0x76>
   36304:	e0ac      	b.n	36460 <_svfiprintf_r+0x1d0>
   36306:	2201      	movs	r2, #1
   36308:	2300      	movs	r3, #0
   3630a:	4252      	negs	r2, r2
   3630c:	606a      	str	r2, [r5, #4]
   3630e:	a902      	add	r1, sp, #8
   36310:	3254      	adds	r2, #84	; 0x54
   36312:	1852      	adds	r2, r2, r1
   36314:	3401      	adds	r4, #1
   36316:	602b      	str	r3, [r5, #0]
   36318:	60eb      	str	r3, [r5, #12]
   3631a:	60ab      	str	r3, [r5, #8]
   3631c:	7013      	strb	r3, [r2, #0]
   3631e:	65ab      	str	r3, [r5, #88]	; 0x58
   36320:	4e58      	ldr	r6, [pc, #352]	; (36484 <_svfiprintf_r+0x1f4>)
   36322:	2205      	movs	r2, #5
   36324:	7821      	ldrb	r1, [r4, #0]
   36326:	0030      	movs	r0, r6
   36328:	f000 fb02 	bl	36930 <memchr>
   3632c:	1c62      	adds	r2, r4, #1
   3632e:	2800      	cmp	r0, #0
   36330:	d120      	bne.n	36374 <_svfiprintf_r+0xe4>
   36332:	6829      	ldr	r1, [r5, #0]
   36334:	06cb      	lsls	r3, r1, #27
   36336:	d504      	bpl.n	36342 <_svfiprintf_r+0xb2>
   36338:	2353      	movs	r3, #83	; 0x53
   3633a:	ae02      	add	r6, sp, #8
   3633c:	3020      	adds	r0, #32
   3633e:	199b      	adds	r3, r3, r6
   36340:	7018      	strb	r0, [r3, #0]
   36342:	070b      	lsls	r3, r1, #28
   36344:	d504      	bpl.n	36350 <_svfiprintf_r+0xc0>
   36346:	2353      	movs	r3, #83	; 0x53
   36348:	202b      	movs	r0, #43	; 0x2b
   3634a:	ae02      	add	r6, sp, #8
   3634c:	199b      	adds	r3, r3, r6
   3634e:	7018      	strb	r0, [r3, #0]
   36350:	7823      	ldrb	r3, [r4, #0]
   36352:	2b2a      	cmp	r3, #42	; 0x2a
   36354:	d016      	beq.n	36384 <_svfiprintf_r+0xf4>
   36356:	2000      	movs	r0, #0
   36358:	210a      	movs	r1, #10
   3635a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3635c:	7822      	ldrb	r2, [r4, #0]
   3635e:	3a30      	subs	r2, #48	; 0x30
   36360:	2a09      	cmp	r2, #9
   36362:	d955      	bls.n	36410 <_svfiprintf_r+0x180>
   36364:	2800      	cmp	r0, #0
   36366:	d015      	beq.n	36394 <_svfiprintf_r+0x104>
   36368:	9309      	str	r3, [sp, #36]	; 0x24
   3636a:	e013      	b.n	36394 <_svfiprintf_r+0x104>
   3636c:	2b25      	cmp	r3, #37	; 0x25
   3636e:	d0b5      	beq.n	362dc <_svfiprintf_r+0x4c>
   36370:	3401      	adds	r4, #1
   36372:	e7b0      	b.n	362d6 <_svfiprintf_r+0x46>
   36374:	2301      	movs	r3, #1
   36376:	1b80      	subs	r0, r0, r6
   36378:	4083      	lsls	r3, r0
   3637a:	6829      	ldr	r1, [r5, #0]
   3637c:	0014      	movs	r4, r2
   3637e:	430b      	orrs	r3, r1
   36380:	602b      	str	r3, [r5, #0]
   36382:	e7cd      	b.n	36320 <_svfiprintf_r+0x90>
   36384:	9b05      	ldr	r3, [sp, #20]
   36386:	1d18      	adds	r0, r3, #4
   36388:	681b      	ldr	r3, [r3, #0]
   3638a:	9005      	str	r0, [sp, #20]
   3638c:	2b00      	cmp	r3, #0
   3638e:	db39      	blt.n	36404 <_svfiprintf_r+0x174>
   36390:	9309      	str	r3, [sp, #36]	; 0x24
   36392:	0014      	movs	r4, r2
   36394:	7823      	ldrb	r3, [r4, #0]
   36396:	2b2e      	cmp	r3, #46	; 0x2e
   36398:	d10b      	bne.n	363b2 <_svfiprintf_r+0x122>
   3639a:	7863      	ldrb	r3, [r4, #1]
   3639c:	1c62      	adds	r2, r4, #1
   3639e:	2b2a      	cmp	r3, #42	; 0x2a
   363a0:	d13e      	bne.n	36420 <_svfiprintf_r+0x190>
   363a2:	9b05      	ldr	r3, [sp, #20]
   363a4:	3402      	adds	r4, #2
   363a6:	1d1a      	adds	r2, r3, #4
   363a8:	681b      	ldr	r3, [r3, #0]
   363aa:	9205      	str	r2, [sp, #20]
   363ac:	2b00      	cmp	r3, #0
   363ae:	db34      	blt.n	3641a <_svfiprintf_r+0x18a>
   363b0:	9307      	str	r3, [sp, #28]
   363b2:	4e35      	ldr	r6, [pc, #212]	; (36488 <_svfiprintf_r+0x1f8>)
   363b4:	7821      	ldrb	r1, [r4, #0]
   363b6:	2203      	movs	r2, #3
   363b8:	0030      	movs	r0, r6
   363ba:	f000 fab9 	bl	36930 <memchr>
   363be:	2800      	cmp	r0, #0
   363c0:	d006      	beq.n	363d0 <_svfiprintf_r+0x140>
   363c2:	2340      	movs	r3, #64	; 0x40
   363c4:	1b80      	subs	r0, r0, r6
   363c6:	4083      	lsls	r3, r0
   363c8:	682a      	ldr	r2, [r5, #0]
   363ca:	3401      	adds	r4, #1
   363cc:	4313      	orrs	r3, r2
   363ce:	602b      	str	r3, [r5, #0]
   363d0:	7821      	ldrb	r1, [r4, #0]
   363d2:	2206      	movs	r2, #6
   363d4:	482d      	ldr	r0, [pc, #180]	; (3648c <_svfiprintf_r+0x1fc>)
   363d6:	1c66      	adds	r6, r4, #1
   363d8:	7629      	strb	r1, [r5, #24]
   363da:	f000 faa9 	bl	36930 <memchr>
   363de:	2800      	cmp	r0, #0
   363e0:	d046      	beq.n	36470 <_svfiprintf_r+0x1e0>
   363e2:	4b2b      	ldr	r3, [pc, #172]	; (36490 <_svfiprintf_r+0x200>)
   363e4:	2b00      	cmp	r3, #0
   363e6:	d12f      	bne.n	36448 <_svfiprintf_r+0x1b8>
   363e8:	6829      	ldr	r1, [r5, #0]
   363ea:	9b05      	ldr	r3, [sp, #20]
   363ec:	2207      	movs	r2, #7
   363ee:	05c9      	lsls	r1, r1, #23
   363f0:	d528      	bpl.n	36444 <_svfiprintf_r+0x1b4>
   363f2:	189b      	adds	r3, r3, r2
   363f4:	4393      	bics	r3, r2
   363f6:	3308      	adds	r3, #8
   363f8:	9305      	str	r3, [sp, #20]
   363fa:	696b      	ldr	r3, [r5, #20]
   363fc:	9a03      	ldr	r2, [sp, #12]
   363fe:	189b      	adds	r3, r3, r2
   36400:	616b      	str	r3, [r5, #20]
   36402:	e767      	b.n	362d4 <_svfiprintf_r+0x44>
   36404:	425b      	negs	r3, r3
   36406:	60eb      	str	r3, [r5, #12]
   36408:	2302      	movs	r3, #2
   3640a:	430b      	orrs	r3, r1
   3640c:	602b      	str	r3, [r5, #0]
   3640e:	e7c0      	b.n	36392 <_svfiprintf_r+0x102>
   36410:	434b      	muls	r3, r1
   36412:	3401      	adds	r4, #1
   36414:	189b      	adds	r3, r3, r2
   36416:	2001      	movs	r0, #1
   36418:	e7a0      	b.n	3635c <_svfiprintf_r+0xcc>
   3641a:	2301      	movs	r3, #1
   3641c:	425b      	negs	r3, r3
   3641e:	e7c7      	b.n	363b0 <_svfiprintf_r+0x120>
   36420:	2300      	movs	r3, #0
   36422:	0014      	movs	r4, r2
   36424:	200a      	movs	r0, #10
   36426:	001a      	movs	r2, r3
   36428:	606b      	str	r3, [r5, #4]
   3642a:	7821      	ldrb	r1, [r4, #0]
   3642c:	3930      	subs	r1, #48	; 0x30
   3642e:	2909      	cmp	r1, #9
   36430:	d903      	bls.n	3643a <_svfiprintf_r+0x1aa>
   36432:	2b00      	cmp	r3, #0
   36434:	d0bd      	beq.n	363b2 <_svfiprintf_r+0x122>
   36436:	9207      	str	r2, [sp, #28]
   36438:	e7bb      	b.n	363b2 <_svfiprintf_r+0x122>
   3643a:	4342      	muls	r2, r0
   3643c:	3401      	adds	r4, #1
   3643e:	1852      	adds	r2, r2, r1
   36440:	2301      	movs	r3, #1
   36442:	e7f2      	b.n	3642a <_svfiprintf_r+0x19a>
   36444:	3307      	adds	r3, #7
   36446:	e7d5      	b.n	363f4 <_svfiprintf_r+0x164>
   36448:	ab05      	add	r3, sp, #20
   3644a:	9300      	str	r3, [sp, #0]
   3644c:	003a      	movs	r2, r7
   3644e:	4b11      	ldr	r3, [pc, #68]	; (36494 <_svfiprintf_r+0x204>)
   36450:	0029      	movs	r1, r5
   36452:	9802      	ldr	r0, [sp, #8]
   36454:	e000      	b.n	36458 <_svfiprintf_r+0x1c8>
   36456:	bf00      	nop
   36458:	9003      	str	r0, [sp, #12]
   3645a:	9b03      	ldr	r3, [sp, #12]
   3645c:	3301      	adds	r3, #1
   3645e:	d1cc      	bne.n	363fa <_svfiprintf_r+0x16a>
   36460:	89bb      	ldrh	r3, [r7, #12]
   36462:	980b      	ldr	r0, [sp, #44]	; 0x2c
   36464:	065b      	lsls	r3, r3, #25
   36466:	d400      	bmi.n	3646a <_svfiprintf_r+0x1da>
   36468:	e729      	b.n	362be <_svfiprintf_r+0x2e>
   3646a:	2001      	movs	r0, #1
   3646c:	4240      	negs	r0, r0
   3646e:	e726      	b.n	362be <_svfiprintf_r+0x2e>
   36470:	ab05      	add	r3, sp, #20
   36472:	9300      	str	r3, [sp, #0]
   36474:	003a      	movs	r2, r7
   36476:	4b07      	ldr	r3, [pc, #28]	; (36494 <_svfiprintf_r+0x204>)
   36478:	0029      	movs	r1, r5
   3647a:	9802      	ldr	r0, [sp, #8]
   3647c:	f000 f87a 	bl	36574 <_printf_i>
   36480:	e7ea      	b.n	36458 <_svfiprintf_r+0x1c8>
   36482:	46c0      	nop			; (mov r8, r8)
   36484:	0003afaa 	.word	0x0003afaa
   36488:	0003afb0 	.word	0x0003afb0
   3648c:	0003afb4 	.word	0x0003afb4
   36490:	00000000 	.word	0x00000000
   36494:	000361cd 	.word	0x000361cd

00036498 <_printf_common>:
   36498:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3649a:	0015      	movs	r5, r2
   3649c:	9301      	str	r3, [sp, #4]
   3649e:	688a      	ldr	r2, [r1, #8]
   364a0:	690b      	ldr	r3, [r1, #16]
   364a2:	9000      	str	r0, [sp, #0]
   364a4:	000c      	movs	r4, r1
   364a6:	4293      	cmp	r3, r2
   364a8:	da00      	bge.n	364ac <_printf_common+0x14>
   364aa:	0013      	movs	r3, r2
   364ac:	0022      	movs	r2, r4
   364ae:	602b      	str	r3, [r5, #0]
   364b0:	3243      	adds	r2, #67	; 0x43
   364b2:	7812      	ldrb	r2, [r2, #0]
   364b4:	2a00      	cmp	r2, #0
   364b6:	d001      	beq.n	364bc <_printf_common+0x24>
   364b8:	3301      	adds	r3, #1
   364ba:	602b      	str	r3, [r5, #0]
   364bc:	6823      	ldr	r3, [r4, #0]
   364be:	069b      	lsls	r3, r3, #26
   364c0:	d502      	bpl.n	364c8 <_printf_common+0x30>
   364c2:	682b      	ldr	r3, [r5, #0]
   364c4:	3302      	adds	r3, #2
   364c6:	602b      	str	r3, [r5, #0]
   364c8:	2706      	movs	r7, #6
   364ca:	6823      	ldr	r3, [r4, #0]
   364cc:	401f      	ands	r7, r3
   364ce:	d027      	beq.n	36520 <_printf_common+0x88>
   364d0:	0023      	movs	r3, r4
   364d2:	3343      	adds	r3, #67	; 0x43
   364d4:	781b      	ldrb	r3, [r3, #0]
   364d6:	1e5a      	subs	r2, r3, #1
   364d8:	4193      	sbcs	r3, r2
   364da:	6822      	ldr	r2, [r4, #0]
   364dc:	0692      	lsls	r2, r2, #26
   364de:	d430      	bmi.n	36542 <_printf_common+0xaa>
   364e0:	0022      	movs	r2, r4
   364e2:	9901      	ldr	r1, [sp, #4]
   364e4:	3243      	adds	r2, #67	; 0x43
   364e6:	9800      	ldr	r0, [sp, #0]
   364e8:	9e08      	ldr	r6, [sp, #32]
   364ea:	47b0      	blx	r6
   364ec:	1c43      	adds	r3, r0, #1
   364ee:	d025      	beq.n	3653c <_printf_common+0xa4>
   364f0:	2306      	movs	r3, #6
   364f2:	6820      	ldr	r0, [r4, #0]
   364f4:	682a      	ldr	r2, [r5, #0]
   364f6:	68e1      	ldr	r1, [r4, #12]
   364f8:	4003      	ands	r3, r0
   364fa:	2500      	movs	r5, #0
   364fc:	2b04      	cmp	r3, #4
   364fe:	d103      	bne.n	36508 <_printf_common+0x70>
   36500:	1a8d      	subs	r5, r1, r2
   36502:	43eb      	mvns	r3, r5
   36504:	17db      	asrs	r3, r3, #31
   36506:	401d      	ands	r5, r3
   36508:	68a3      	ldr	r3, [r4, #8]
   3650a:	6922      	ldr	r2, [r4, #16]
   3650c:	4293      	cmp	r3, r2
   3650e:	dd01      	ble.n	36514 <_printf_common+0x7c>
   36510:	1a9b      	subs	r3, r3, r2
   36512:	18ed      	adds	r5, r5, r3
   36514:	2700      	movs	r7, #0
   36516:	42bd      	cmp	r5, r7
   36518:	d120      	bne.n	3655c <_printf_common+0xc4>
   3651a:	2000      	movs	r0, #0
   3651c:	e010      	b.n	36540 <_printf_common+0xa8>
   3651e:	3701      	adds	r7, #1
   36520:	68e3      	ldr	r3, [r4, #12]
   36522:	682a      	ldr	r2, [r5, #0]
   36524:	1a9b      	subs	r3, r3, r2
   36526:	429f      	cmp	r7, r3
   36528:	dad2      	bge.n	364d0 <_printf_common+0x38>
   3652a:	0022      	movs	r2, r4
   3652c:	2301      	movs	r3, #1
   3652e:	3219      	adds	r2, #25
   36530:	9901      	ldr	r1, [sp, #4]
   36532:	9800      	ldr	r0, [sp, #0]
   36534:	9e08      	ldr	r6, [sp, #32]
   36536:	47b0      	blx	r6
   36538:	1c43      	adds	r3, r0, #1
   3653a:	d1f0      	bne.n	3651e <_printf_common+0x86>
   3653c:	2001      	movs	r0, #1
   3653e:	4240      	negs	r0, r0
   36540:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   36542:	2030      	movs	r0, #48	; 0x30
   36544:	18e1      	adds	r1, r4, r3
   36546:	3143      	adds	r1, #67	; 0x43
   36548:	7008      	strb	r0, [r1, #0]
   3654a:	0021      	movs	r1, r4
   3654c:	1c5a      	adds	r2, r3, #1
   3654e:	3145      	adds	r1, #69	; 0x45
   36550:	7809      	ldrb	r1, [r1, #0]
   36552:	18a2      	adds	r2, r4, r2
   36554:	3243      	adds	r2, #67	; 0x43
   36556:	3302      	adds	r3, #2
   36558:	7011      	strb	r1, [r2, #0]
   3655a:	e7c1      	b.n	364e0 <_printf_common+0x48>
   3655c:	0022      	movs	r2, r4
   3655e:	2301      	movs	r3, #1
   36560:	321a      	adds	r2, #26
   36562:	9901      	ldr	r1, [sp, #4]
   36564:	9800      	ldr	r0, [sp, #0]
   36566:	9e08      	ldr	r6, [sp, #32]
   36568:	47b0      	blx	r6
   3656a:	1c43      	adds	r3, r0, #1
   3656c:	d0e6      	beq.n	3653c <_printf_common+0xa4>
   3656e:	3701      	adds	r7, #1
   36570:	e7d1      	b.n	36516 <_printf_common+0x7e>
	...

00036574 <_printf_i>:
   36574:	b5f0      	push	{r4, r5, r6, r7, lr}
   36576:	b08b      	sub	sp, #44	; 0x2c
   36578:	9206      	str	r2, [sp, #24]
   3657a:	000a      	movs	r2, r1
   3657c:	3243      	adds	r2, #67	; 0x43
   3657e:	9307      	str	r3, [sp, #28]
   36580:	9005      	str	r0, [sp, #20]
   36582:	9204      	str	r2, [sp, #16]
   36584:	7e0a      	ldrb	r2, [r1, #24]
   36586:	000c      	movs	r4, r1
   36588:	9b10      	ldr	r3, [sp, #64]	; 0x40
   3658a:	2a6e      	cmp	r2, #110	; 0x6e
   3658c:	d100      	bne.n	36590 <_printf_i+0x1c>
   3658e:	e08f      	b.n	366b0 <_printf_i+0x13c>
   36590:	d817      	bhi.n	365c2 <_printf_i+0x4e>
   36592:	2a63      	cmp	r2, #99	; 0x63
   36594:	d02c      	beq.n	365f0 <_printf_i+0x7c>
   36596:	d808      	bhi.n	365aa <_printf_i+0x36>
   36598:	2a00      	cmp	r2, #0
   3659a:	d100      	bne.n	3659e <_printf_i+0x2a>
   3659c:	e099      	b.n	366d2 <_printf_i+0x15e>
   3659e:	2a58      	cmp	r2, #88	; 0x58
   365a0:	d054      	beq.n	3664c <_printf_i+0xd8>
   365a2:	0026      	movs	r6, r4
   365a4:	3642      	adds	r6, #66	; 0x42
   365a6:	7032      	strb	r2, [r6, #0]
   365a8:	e029      	b.n	365fe <_printf_i+0x8a>
   365aa:	2a64      	cmp	r2, #100	; 0x64
   365ac:	d001      	beq.n	365b2 <_printf_i+0x3e>
   365ae:	2a69      	cmp	r2, #105	; 0x69
   365b0:	d1f7      	bne.n	365a2 <_printf_i+0x2e>
   365b2:	6821      	ldr	r1, [r4, #0]
   365b4:	681a      	ldr	r2, [r3, #0]
   365b6:	0608      	lsls	r0, r1, #24
   365b8:	d523      	bpl.n	36602 <_printf_i+0x8e>
   365ba:	1d11      	adds	r1, r2, #4
   365bc:	6019      	str	r1, [r3, #0]
   365be:	6815      	ldr	r5, [r2, #0]
   365c0:	e025      	b.n	3660e <_printf_i+0x9a>
   365c2:	2a73      	cmp	r2, #115	; 0x73
   365c4:	d100      	bne.n	365c8 <_printf_i+0x54>
   365c6:	e088      	b.n	366da <_printf_i+0x166>
   365c8:	d808      	bhi.n	365dc <_printf_i+0x68>
   365ca:	2a6f      	cmp	r2, #111	; 0x6f
   365cc:	d029      	beq.n	36622 <_printf_i+0xae>
   365ce:	2a70      	cmp	r2, #112	; 0x70
   365d0:	d1e7      	bne.n	365a2 <_printf_i+0x2e>
   365d2:	2220      	movs	r2, #32
   365d4:	6809      	ldr	r1, [r1, #0]
   365d6:	430a      	orrs	r2, r1
   365d8:	6022      	str	r2, [r4, #0]
   365da:	e003      	b.n	365e4 <_printf_i+0x70>
   365dc:	2a75      	cmp	r2, #117	; 0x75
   365de:	d020      	beq.n	36622 <_printf_i+0xae>
   365e0:	2a78      	cmp	r2, #120	; 0x78
   365e2:	d1de      	bne.n	365a2 <_printf_i+0x2e>
   365e4:	0022      	movs	r2, r4
   365e6:	2178      	movs	r1, #120	; 0x78
   365e8:	3245      	adds	r2, #69	; 0x45
   365ea:	7011      	strb	r1, [r2, #0]
   365ec:	4a6c      	ldr	r2, [pc, #432]	; (367a0 <_printf_i+0x22c>)
   365ee:	e030      	b.n	36652 <_printf_i+0xde>
   365f0:	000e      	movs	r6, r1
   365f2:	681a      	ldr	r2, [r3, #0]
   365f4:	3642      	adds	r6, #66	; 0x42
   365f6:	1d11      	adds	r1, r2, #4
   365f8:	6019      	str	r1, [r3, #0]
   365fa:	6813      	ldr	r3, [r2, #0]
   365fc:	7033      	strb	r3, [r6, #0]
   365fe:	2301      	movs	r3, #1
   36600:	e079      	b.n	366f6 <_printf_i+0x182>
   36602:	0649      	lsls	r1, r1, #25
   36604:	d5d9      	bpl.n	365ba <_printf_i+0x46>
   36606:	1d11      	adds	r1, r2, #4
   36608:	6019      	str	r1, [r3, #0]
   3660a:	2300      	movs	r3, #0
   3660c:	5ed5      	ldrsh	r5, [r2, r3]
   3660e:	2d00      	cmp	r5, #0
   36610:	da03      	bge.n	3661a <_printf_i+0xa6>
   36612:	232d      	movs	r3, #45	; 0x2d
   36614:	9a04      	ldr	r2, [sp, #16]
   36616:	426d      	negs	r5, r5
   36618:	7013      	strb	r3, [r2, #0]
   3661a:	4b62      	ldr	r3, [pc, #392]	; (367a4 <_printf_i+0x230>)
   3661c:	270a      	movs	r7, #10
   3661e:	9303      	str	r3, [sp, #12]
   36620:	e02f      	b.n	36682 <_printf_i+0x10e>
   36622:	6820      	ldr	r0, [r4, #0]
   36624:	6819      	ldr	r1, [r3, #0]
   36626:	0605      	lsls	r5, r0, #24
   36628:	d503      	bpl.n	36632 <_printf_i+0xbe>
   3662a:	1d08      	adds	r0, r1, #4
   3662c:	6018      	str	r0, [r3, #0]
   3662e:	680d      	ldr	r5, [r1, #0]
   36630:	e005      	b.n	3663e <_printf_i+0xca>
   36632:	0640      	lsls	r0, r0, #25
   36634:	d5f9      	bpl.n	3662a <_printf_i+0xb6>
   36636:	680d      	ldr	r5, [r1, #0]
   36638:	1d08      	adds	r0, r1, #4
   3663a:	6018      	str	r0, [r3, #0]
   3663c:	b2ad      	uxth	r5, r5
   3663e:	4b59      	ldr	r3, [pc, #356]	; (367a4 <_printf_i+0x230>)
   36640:	2708      	movs	r7, #8
   36642:	9303      	str	r3, [sp, #12]
   36644:	2a6f      	cmp	r2, #111	; 0x6f
   36646:	d018      	beq.n	3667a <_printf_i+0x106>
   36648:	270a      	movs	r7, #10
   3664a:	e016      	b.n	3667a <_printf_i+0x106>
   3664c:	3145      	adds	r1, #69	; 0x45
   3664e:	700a      	strb	r2, [r1, #0]
   36650:	4a54      	ldr	r2, [pc, #336]	; (367a4 <_printf_i+0x230>)
   36652:	9203      	str	r2, [sp, #12]
   36654:	681a      	ldr	r2, [r3, #0]
   36656:	6821      	ldr	r1, [r4, #0]
   36658:	1d10      	adds	r0, r2, #4
   3665a:	6018      	str	r0, [r3, #0]
   3665c:	6815      	ldr	r5, [r2, #0]
   3665e:	0608      	lsls	r0, r1, #24
   36660:	d522      	bpl.n	366a8 <_printf_i+0x134>
   36662:	07cb      	lsls	r3, r1, #31
   36664:	d502      	bpl.n	3666c <_printf_i+0xf8>
   36666:	2320      	movs	r3, #32
   36668:	4319      	orrs	r1, r3
   3666a:	6021      	str	r1, [r4, #0]
   3666c:	2710      	movs	r7, #16
   3666e:	2d00      	cmp	r5, #0
   36670:	d103      	bne.n	3667a <_printf_i+0x106>
   36672:	2320      	movs	r3, #32
   36674:	6822      	ldr	r2, [r4, #0]
   36676:	439a      	bics	r2, r3
   36678:	6022      	str	r2, [r4, #0]
   3667a:	0023      	movs	r3, r4
   3667c:	2200      	movs	r2, #0
   3667e:	3343      	adds	r3, #67	; 0x43
   36680:	701a      	strb	r2, [r3, #0]
   36682:	6863      	ldr	r3, [r4, #4]
   36684:	60a3      	str	r3, [r4, #8]
   36686:	2b00      	cmp	r3, #0
   36688:	db5c      	blt.n	36744 <_printf_i+0x1d0>
   3668a:	2204      	movs	r2, #4
   3668c:	6821      	ldr	r1, [r4, #0]
   3668e:	4391      	bics	r1, r2
   36690:	6021      	str	r1, [r4, #0]
   36692:	2d00      	cmp	r5, #0
   36694:	d158      	bne.n	36748 <_printf_i+0x1d4>
   36696:	9e04      	ldr	r6, [sp, #16]
   36698:	2b00      	cmp	r3, #0
   3669a:	d064      	beq.n	36766 <_printf_i+0x1f2>
   3669c:	0026      	movs	r6, r4
   3669e:	9b03      	ldr	r3, [sp, #12]
   366a0:	3642      	adds	r6, #66	; 0x42
   366a2:	781b      	ldrb	r3, [r3, #0]
   366a4:	7033      	strb	r3, [r6, #0]
   366a6:	e05e      	b.n	36766 <_printf_i+0x1f2>
   366a8:	0648      	lsls	r0, r1, #25
   366aa:	d5da      	bpl.n	36662 <_printf_i+0xee>
   366ac:	b2ad      	uxth	r5, r5
   366ae:	e7d8      	b.n	36662 <_printf_i+0xee>
   366b0:	6809      	ldr	r1, [r1, #0]
   366b2:	681a      	ldr	r2, [r3, #0]
   366b4:	0608      	lsls	r0, r1, #24
   366b6:	d505      	bpl.n	366c4 <_printf_i+0x150>
   366b8:	1d11      	adds	r1, r2, #4
   366ba:	6019      	str	r1, [r3, #0]
   366bc:	6813      	ldr	r3, [r2, #0]
   366be:	6962      	ldr	r2, [r4, #20]
   366c0:	601a      	str	r2, [r3, #0]
   366c2:	e006      	b.n	366d2 <_printf_i+0x15e>
   366c4:	0649      	lsls	r1, r1, #25
   366c6:	d5f7      	bpl.n	366b8 <_printf_i+0x144>
   366c8:	1d11      	adds	r1, r2, #4
   366ca:	6019      	str	r1, [r3, #0]
   366cc:	6813      	ldr	r3, [r2, #0]
   366ce:	8aa2      	ldrh	r2, [r4, #20]
   366d0:	801a      	strh	r2, [r3, #0]
   366d2:	2300      	movs	r3, #0
   366d4:	9e04      	ldr	r6, [sp, #16]
   366d6:	6123      	str	r3, [r4, #16]
   366d8:	e054      	b.n	36784 <_printf_i+0x210>
   366da:	681a      	ldr	r2, [r3, #0]
   366dc:	1d11      	adds	r1, r2, #4
   366de:	6019      	str	r1, [r3, #0]
   366e0:	6816      	ldr	r6, [r2, #0]
   366e2:	2100      	movs	r1, #0
   366e4:	6862      	ldr	r2, [r4, #4]
   366e6:	0030      	movs	r0, r6
   366e8:	f000 f922 	bl	36930 <memchr>
   366ec:	2800      	cmp	r0, #0
   366ee:	d001      	beq.n	366f4 <_printf_i+0x180>
   366f0:	1b80      	subs	r0, r0, r6
   366f2:	6060      	str	r0, [r4, #4]
   366f4:	6863      	ldr	r3, [r4, #4]
   366f6:	6123      	str	r3, [r4, #16]
   366f8:	2300      	movs	r3, #0
   366fa:	9a04      	ldr	r2, [sp, #16]
   366fc:	7013      	strb	r3, [r2, #0]
   366fe:	e041      	b.n	36784 <_printf_i+0x210>
   36700:	6923      	ldr	r3, [r4, #16]
   36702:	0032      	movs	r2, r6
   36704:	9906      	ldr	r1, [sp, #24]
   36706:	9805      	ldr	r0, [sp, #20]
   36708:	9d07      	ldr	r5, [sp, #28]
   3670a:	47a8      	blx	r5
   3670c:	1c43      	adds	r3, r0, #1
   3670e:	d043      	beq.n	36798 <_printf_i+0x224>
   36710:	6823      	ldr	r3, [r4, #0]
   36712:	2500      	movs	r5, #0
   36714:	079b      	lsls	r3, r3, #30
   36716:	d40f      	bmi.n	36738 <_printf_i+0x1c4>
   36718:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3671a:	68e0      	ldr	r0, [r4, #12]
   3671c:	4298      	cmp	r0, r3
   3671e:	da3d      	bge.n	3679c <_printf_i+0x228>
   36720:	0018      	movs	r0, r3
   36722:	e03b      	b.n	3679c <_printf_i+0x228>
   36724:	0022      	movs	r2, r4
   36726:	2301      	movs	r3, #1
   36728:	3219      	adds	r2, #25
   3672a:	9906      	ldr	r1, [sp, #24]
   3672c:	9805      	ldr	r0, [sp, #20]
   3672e:	9e07      	ldr	r6, [sp, #28]
   36730:	47b0      	blx	r6
   36732:	1c43      	adds	r3, r0, #1
   36734:	d030      	beq.n	36798 <_printf_i+0x224>
   36736:	3501      	adds	r5, #1
   36738:	68e3      	ldr	r3, [r4, #12]
   3673a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   3673c:	1a9b      	subs	r3, r3, r2
   3673e:	429d      	cmp	r5, r3
   36740:	dbf0      	blt.n	36724 <_printf_i+0x1b0>
   36742:	e7e9      	b.n	36718 <_printf_i+0x1a4>
   36744:	2d00      	cmp	r5, #0
   36746:	d0a9      	beq.n	3669c <_printf_i+0x128>
   36748:	9e04      	ldr	r6, [sp, #16]
   3674a:	0028      	movs	r0, r5
   3674c:	0039      	movs	r1, r7
   3674e:	f7fc ffe7 	bl	33720 <__aeabi_uidivmod>
   36752:	9b03      	ldr	r3, [sp, #12]
   36754:	3e01      	subs	r6, #1
   36756:	5c5b      	ldrb	r3, [r3, r1]
   36758:	0028      	movs	r0, r5
   3675a:	7033      	strb	r3, [r6, #0]
   3675c:	0039      	movs	r1, r7
   3675e:	f7fc ff59 	bl	33614 <__udivsi3>
   36762:	1e05      	subs	r5, r0, #0
   36764:	d1f1      	bne.n	3674a <_printf_i+0x1d6>
   36766:	2f08      	cmp	r7, #8
   36768:	d109      	bne.n	3677e <_printf_i+0x20a>
   3676a:	6823      	ldr	r3, [r4, #0]
   3676c:	07db      	lsls	r3, r3, #31
   3676e:	d506      	bpl.n	3677e <_printf_i+0x20a>
   36770:	6863      	ldr	r3, [r4, #4]
   36772:	6922      	ldr	r2, [r4, #16]
   36774:	4293      	cmp	r3, r2
   36776:	dc02      	bgt.n	3677e <_printf_i+0x20a>
   36778:	2330      	movs	r3, #48	; 0x30
   3677a:	3e01      	subs	r6, #1
   3677c:	7033      	strb	r3, [r6, #0]
   3677e:	9b04      	ldr	r3, [sp, #16]
   36780:	1b9b      	subs	r3, r3, r6
   36782:	6123      	str	r3, [r4, #16]
   36784:	9b07      	ldr	r3, [sp, #28]
   36786:	aa09      	add	r2, sp, #36	; 0x24
   36788:	9300      	str	r3, [sp, #0]
   3678a:	0021      	movs	r1, r4
   3678c:	9b06      	ldr	r3, [sp, #24]
   3678e:	9805      	ldr	r0, [sp, #20]
   36790:	f7ff fe82 	bl	36498 <_printf_common>
   36794:	1c43      	adds	r3, r0, #1
   36796:	d1b3      	bne.n	36700 <_printf_i+0x18c>
   36798:	2001      	movs	r0, #1
   3679a:	4240      	negs	r0, r0
   3679c:	b00b      	add	sp, #44	; 0x2c
   3679e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   367a0:	0003afcc 	.word	0x0003afcc
   367a4:	0003afbb 	.word	0x0003afbb

000367a8 <__sread>:
   367a8:	b570      	push	{r4, r5, r6, lr}
   367aa:	000c      	movs	r4, r1
   367ac:	250e      	movs	r5, #14
   367ae:	5f49      	ldrsh	r1, [r1, r5]
   367b0:	f000 f8f0 	bl	36994 <_read_r>
   367b4:	2800      	cmp	r0, #0
   367b6:	db03      	blt.n	367c0 <__sread+0x18>
   367b8:	6d63      	ldr	r3, [r4, #84]	; 0x54
   367ba:	181b      	adds	r3, r3, r0
   367bc:	6563      	str	r3, [r4, #84]	; 0x54
   367be:	bd70      	pop	{r4, r5, r6, pc}
   367c0:	89a3      	ldrh	r3, [r4, #12]
   367c2:	4a02      	ldr	r2, [pc, #8]	; (367cc <__sread+0x24>)
   367c4:	4013      	ands	r3, r2
   367c6:	81a3      	strh	r3, [r4, #12]
   367c8:	e7f9      	b.n	367be <__sread+0x16>
   367ca:	46c0      	nop			; (mov r8, r8)
   367cc:	ffffefff 	.word	0xffffefff

000367d0 <__swrite>:
   367d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   367d2:	001f      	movs	r7, r3
   367d4:	898b      	ldrh	r3, [r1, #12]
   367d6:	0005      	movs	r5, r0
   367d8:	000c      	movs	r4, r1
   367da:	0016      	movs	r6, r2
   367dc:	05db      	lsls	r3, r3, #23
   367de:	d505      	bpl.n	367ec <__swrite+0x1c>
   367e0:	230e      	movs	r3, #14
   367e2:	5ec9      	ldrsh	r1, [r1, r3]
   367e4:	2200      	movs	r2, #0
   367e6:	2302      	movs	r3, #2
   367e8:	f000 f88e 	bl	36908 <_lseek_r>
   367ec:	89a3      	ldrh	r3, [r4, #12]
   367ee:	4a05      	ldr	r2, [pc, #20]	; (36804 <__swrite+0x34>)
   367f0:	0028      	movs	r0, r5
   367f2:	4013      	ands	r3, r2
   367f4:	81a3      	strh	r3, [r4, #12]
   367f6:	0032      	movs	r2, r6
   367f8:	230e      	movs	r3, #14
   367fa:	5ee1      	ldrsh	r1, [r4, r3]
   367fc:	003b      	movs	r3, r7
   367fe:	f000 f839 	bl	36874 <_write_r>
   36802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   36804:	ffffefff 	.word	0xffffefff

00036808 <__sseek>:
   36808:	b570      	push	{r4, r5, r6, lr}
   3680a:	000c      	movs	r4, r1
   3680c:	250e      	movs	r5, #14
   3680e:	5f49      	ldrsh	r1, [r1, r5]
   36810:	f000 f87a 	bl	36908 <_lseek_r>
   36814:	89a3      	ldrh	r3, [r4, #12]
   36816:	1c42      	adds	r2, r0, #1
   36818:	d103      	bne.n	36822 <__sseek+0x1a>
   3681a:	4a05      	ldr	r2, [pc, #20]	; (36830 <__sseek+0x28>)
   3681c:	4013      	ands	r3, r2
   3681e:	81a3      	strh	r3, [r4, #12]
   36820:	bd70      	pop	{r4, r5, r6, pc}
   36822:	2280      	movs	r2, #128	; 0x80
   36824:	0152      	lsls	r2, r2, #5
   36826:	4313      	orrs	r3, r2
   36828:	81a3      	strh	r3, [r4, #12]
   3682a:	6560      	str	r0, [r4, #84]	; 0x54
   3682c:	e7f8      	b.n	36820 <__sseek+0x18>
   3682e:	46c0      	nop			; (mov r8, r8)
   36830:	ffffefff 	.word	0xffffefff

00036834 <__sclose>:
   36834:	b510      	push	{r4, lr}
   36836:	230e      	movs	r3, #14
   36838:	5ec9      	ldrsh	r1, [r1, r3]
   3683a:	f000 f82f 	bl	3689c <_close_r>
   3683e:	bd10      	pop	{r4, pc}

00036840 <strchr>:
   36840:	b2c9      	uxtb	r1, r1
   36842:	7803      	ldrb	r3, [r0, #0]
   36844:	2b00      	cmp	r3, #0
   36846:	d004      	beq.n	36852 <strchr+0x12>
   36848:	4299      	cmp	r1, r3
   3684a:	d100      	bne.n	3684e <strchr+0xe>
   3684c:	4770      	bx	lr
   3684e:	3001      	adds	r0, #1
   36850:	e7f7      	b.n	36842 <strchr+0x2>
   36852:	424b      	negs	r3, r1
   36854:	4159      	adcs	r1, r3
   36856:	4249      	negs	r1, r1
   36858:	4008      	ands	r0, r1
   3685a:	e7f7      	b.n	3684c <strchr+0xc>

0003685c <__ascii_wctomb>:
   3685c:	1e0b      	subs	r3, r1, #0
   3685e:	d004      	beq.n	3686a <__ascii_wctomb+0xe>
   36860:	2aff      	cmp	r2, #255	; 0xff
   36862:	d904      	bls.n	3686e <__ascii_wctomb+0x12>
   36864:	238a      	movs	r3, #138	; 0x8a
   36866:	6003      	str	r3, [r0, #0]
   36868:	3b8b      	subs	r3, #139	; 0x8b
   3686a:	0018      	movs	r0, r3
   3686c:	4770      	bx	lr
   3686e:	700a      	strb	r2, [r1, #0]
   36870:	2301      	movs	r3, #1
   36872:	e7fa      	b.n	3686a <__ascii_wctomb+0xe>

00036874 <_write_r>:
   36874:	b570      	push	{r4, r5, r6, lr}
   36876:	0005      	movs	r5, r0
   36878:	0008      	movs	r0, r1
   3687a:	0011      	movs	r1, r2
   3687c:	2200      	movs	r2, #0
   3687e:	4c06      	ldr	r4, [pc, #24]	; (36898 <_write_r+0x24>)
   36880:	6022      	str	r2, [r4, #0]
   36882:	001a      	movs	r2, r3
   36884:	f7f5 fa3c 	bl	2bd00 <_write>
   36888:	1c43      	adds	r3, r0, #1
   3688a:	d103      	bne.n	36894 <_write_r+0x20>
   3688c:	6823      	ldr	r3, [r4, #0]
   3688e:	2b00      	cmp	r3, #0
   36890:	d000      	beq.n	36894 <_write_r+0x20>
   36892:	602b      	str	r3, [r5, #0]
   36894:	bd70      	pop	{r4, r5, r6, pc}
   36896:	46c0      	nop			; (mov r8, r8)
   36898:	20005ce0 	.word	0x20005ce0

0003689c <_close_r>:
   3689c:	2300      	movs	r3, #0
   3689e:	b570      	push	{r4, r5, r6, lr}
   368a0:	4c06      	ldr	r4, [pc, #24]	; (368bc <_close_r+0x20>)
   368a2:	0005      	movs	r5, r0
   368a4:	0008      	movs	r0, r1
   368a6:	6023      	str	r3, [r4, #0]
   368a8:	f7f5 fa7e 	bl	2bda8 <_close>
   368ac:	1c43      	adds	r3, r0, #1
   368ae:	d103      	bne.n	368b8 <_close_r+0x1c>
   368b0:	6823      	ldr	r3, [r4, #0]
   368b2:	2b00      	cmp	r3, #0
   368b4:	d000      	beq.n	368b8 <_close_r+0x1c>
   368b6:	602b      	str	r3, [r5, #0]
   368b8:	bd70      	pop	{r4, r5, r6, pc}
   368ba:	46c0      	nop			; (mov r8, r8)
   368bc:	20005ce0 	.word	0x20005ce0

000368c0 <_fstat_r>:
   368c0:	2300      	movs	r3, #0
   368c2:	b570      	push	{r4, r5, r6, lr}
   368c4:	4c06      	ldr	r4, [pc, #24]	; (368e0 <_fstat_r+0x20>)
   368c6:	0005      	movs	r5, r0
   368c8:	0008      	movs	r0, r1
   368ca:	0011      	movs	r1, r2
   368cc:	6023      	str	r3, [r4, #0]
   368ce:	f7f5 fa75 	bl	2bdbc <_fstat>
   368d2:	1c43      	adds	r3, r0, #1
   368d4:	d103      	bne.n	368de <_fstat_r+0x1e>
   368d6:	6823      	ldr	r3, [r4, #0]
   368d8:	2b00      	cmp	r3, #0
   368da:	d000      	beq.n	368de <_fstat_r+0x1e>
   368dc:	602b      	str	r3, [r5, #0]
   368de:	bd70      	pop	{r4, r5, r6, pc}
   368e0:	20005ce0 	.word	0x20005ce0

000368e4 <_isatty_r>:
   368e4:	2300      	movs	r3, #0
   368e6:	b570      	push	{r4, r5, r6, lr}
   368e8:	4c06      	ldr	r4, [pc, #24]	; (36904 <_isatty_r+0x20>)
   368ea:	0005      	movs	r5, r0
   368ec:	0008      	movs	r0, r1
   368ee:	6023      	str	r3, [r4, #0]
   368f0:	f7f5 fa72 	bl	2bdd8 <_isatty>
   368f4:	1c43      	adds	r3, r0, #1
   368f6:	d103      	bne.n	36900 <_isatty_r+0x1c>
   368f8:	6823      	ldr	r3, [r4, #0]
   368fa:	2b00      	cmp	r3, #0
   368fc:	d000      	beq.n	36900 <_isatty_r+0x1c>
   368fe:	602b      	str	r3, [r5, #0]
   36900:	bd70      	pop	{r4, r5, r6, pc}
   36902:	46c0      	nop			; (mov r8, r8)
   36904:	20005ce0 	.word	0x20005ce0

00036908 <_lseek_r>:
   36908:	b570      	push	{r4, r5, r6, lr}
   3690a:	0005      	movs	r5, r0
   3690c:	0008      	movs	r0, r1
   3690e:	0011      	movs	r1, r2
   36910:	2200      	movs	r2, #0
   36912:	4c06      	ldr	r4, [pc, #24]	; (3692c <_lseek_r+0x24>)
   36914:	6022      	str	r2, [r4, #0]
   36916:	001a      	movs	r2, r3
   36918:	f7f5 fa67 	bl	2bdea <_lseek>
   3691c:	1c43      	adds	r3, r0, #1
   3691e:	d103      	bne.n	36928 <_lseek_r+0x20>
   36920:	6823      	ldr	r3, [r4, #0]
   36922:	2b00      	cmp	r3, #0
   36924:	d000      	beq.n	36928 <_lseek_r+0x20>
   36926:	602b      	str	r3, [r5, #0]
   36928:	bd70      	pop	{r4, r5, r6, pc}
   3692a:	46c0      	nop			; (mov r8, r8)
   3692c:	20005ce0 	.word	0x20005ce0

00036930 <memchr>:
   36930:	b2c9      	uxtb	r1, r1
   36932:	1882      	adds	r2, r0, r2
   36934:	4290      	cmp	r0, r2
   36936:	d101      	bne.n	3693c <memchr+0xc>
   36938:	2000      	movs	r0, #0
   3693a:	4770      	bx	lr
   3693c:	7803      	ldrb	r3, [r0, #0]
   3693e:	428b      	cmp	r3, r1
   36940:	d0fb      	beq.n	3693a <memchr+0xa>
   36942:	3001      	adds	r0, #1
   36944:	e7f6      	b.n	36934 <memchr+0x4>

00036946 <_realloc_r>:
   36946:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   36948:	0007      	movs	r7, r0
   3694a:	000d      	movs	r5, r1
   3694c:	0016      	movs	r6, r2
   3694e:	2900      	cmp	r1, #0
   36950:	d105      	bne.n	3695e <_realloc_r+0x18>
   36952:	0011      	movs	r1, r2
   36954:	f7fe fe9e 	bl	35694 <_malloc_r>
   36958:	0004      	movs	r4, r0
   3695a:	0020      	movs	r0, r4
   3695c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   3695e:	2a00      	cmp	r2, #0
   36960:	d103      	bne.n	3696a <_realloc_r+0x24>
   36962:	f7fe fe4d 	bl	35600 <_free_r>
   36966:	0034      	movs	r4, r6
   36968:	e7f7      	b.n	3695a <_realloc_r+0x14>
   3696a:	f000 f827 	bl	369bc <_malloc_usable_size_r>
   3696e:	002c      	movs	r4, r5
   36970:	4286      	cmp	r6, r0
   36972:	d9f2      	bls.n	3695a <_realloc_r+0x14>
   36974:	0031      	movs	r1, r6
   36976:	0038      	movs	r0, r7
   36978:	f7fe fe8c 	bl	35694 <_malloc_r>
   3697c:	1e04      	subs	r4, r0, #0
   3697e:	d0ec      	beq.n	3695a <_realloc_r+0x14>
   36980:	0029      	movs	r1, r5
   36982:	0032      	movs	r2, r6
   36984:	f7fe fe18 	bl	355b8 <memcpy>
   36988:	0029      	movs	r1, r5
   3698a:	0038      	movs	r0, r7
   3698c:	f7fe fe38 	bl	35600 <_free_r>
   36990:	e7e3      	b.n	3695a <_realloc_r+0x14>
	...

00036994 <_read_r>:
   36994:	b570      	push	{r4, r5, r6, lr}
   36996:	0005      	movs	r5, r0
   36998:	0008      	movs	r0, r1
   3699a:	0011      	movs	r1, r2
   3699c:	2200      	movs	r2, #0
   3699e:	4c06      	ldr	r4, [pc, #24]	; (369b8 <_read_r+0x24>)
   369a0:	6022      	str	r2, [r4, #0]
   369a2:	001a      	movs	r2, r3
   369a4:	f7f5 f982 	bl	2bcac <_read>
   369a8:	1c43      	adds	r3, r0, #1
   369aa:	d103      	bne.n	369b4 <_read_r+0x20>
   369ac:	6823      	ldr	r3, [r4, #0]
   369ae:	2b00      	cmp	r3, #0
   369b0:	d000      	beq.n	369b4 <_read_r+0x20>
   369b2:	602b      	str	r3, [r5, #0]
   369b4:	bd70      	pop	{r4, r5, r6, pc}
   369b6:	46c0      	nop			; (mov r8, r8)
   369b8:	20005ce0 	.word	0x20005ce0

000369bc <_malloc_usable_size_r>:
   369bc:	1f0b      	subs	r3, r1, #4
   369be:	681b      	ldr	r3, [r3, #0]
   369c0:	1f18      	subs	r0, r3, #4
   369c2:	2b00      	cmp	r3, #0
   369c4:	da01      	bge.n	369ca <_malloc_usable_size_r+0xe>
   369c6:	580b      	ldr	r3, [r1, r0]
   369c8:	18c0      	adds	r0, r0, r3
   369ca:	4770      	bx	lr

000369cc <sysfont_glyphs>:
   369cc:	0000 0000 0000 2000 2020 2020 2000 5050     .......     . PP
   369dc:	0050 0000 5000 f850 f850 5050 7820 70a0     P....PP.P.PP x.p
   369ec:	f028 c020 10c8 4020 1898 9060 40a0 90a8     (. ... @..`..@..
   369fc:	6068 4020 0000 0000 2010 4040 2040 4010     h` @..... @@@ .@
   36a0c:	1020 1010 4020 5000 f820 5020 0000 2020      ... @.P . P..  
   36a1c:	20f8 0020 0000 0000 2060 0040 0000 00f8     .  .....` @.....
   36a2c:	0000 0000 0000 6000 0060 1008 4020 0080     .......``... @..
   36a3c:	8870 a898 88c8 2070 2060 2020 7020 8870     p.....p `    pp.
   36a4c:	1008 4020 f8f8 2010 0810 7088 3010 9050     .. @... ...p.0P.
   36a5c:	10f8 f810 f080 0808 7088 4030 f080 8888     .........p0@....
   36a6c:	f870 1008 4020 4040 8870 7088 8888 7070     p... @@@p..p..pp
   36a7c:	8888 0878 6010 6000 0060 6060 0000 6060     ..x..`.``.``..``
   36a8c:	6000 4020 1008 4020 1020 0008 f800 f800     .` @.. @ .......
   36a9c:	0000 4080 1020 4020 7080 0888 2010 2000     ...@ . @.p... . 
   36aac:	8870 6808 a8a8 7070 8888 f888 8888 88f0     p..h..pp........
   36abc:	f088 8888 70f0 8088 8080 7088 90e0 8888     .....p.....p....
   36acc:	9088 f8e0 8080 80f0 f880 80f8 e080 8080     ................
   36adc:	7080 8088 9880 7088 8888 f888 8888 7088     .p.....p.......p
   36aec:	2020 2020 7020 1038 1010 9010 8860 a090          p8.....`...
   36afc:	a0c0 8890 8080 8080 8080 88f8 a8d8 8888     ................
   36b0c:	8888 8888 a8c8 8898 7088 8888 8888 7088     .........p.....p
   36b1c:	88f0 f088 8080 7080 8888 a888 6890 88f0     .......p.....h..
   36b2c:	f088 90a0 7888 8080 0870 f008 20f8 2020     .....x..p....   
   36b3c:	2020 8820 8888 8888 7088 8888 8888 5088        ......p.....P
   36b4c:	8820 8888 a8a8 88d8 8888 2050 8850 8888      .........P P...
   36b5c:	5088 2020 2020 08f8 2010 8040 38f8 2020     .P    ... @..8  
   36b6c:	2020 3820 8000 2040 0810 e000 2020 2020        8..@ ....    
   36b7c:	e020 5020 0088 0000 0000 0000 0000 f800      . P............
   36b8c:	2040 0010 0000 0000 7000 7808 7888 8080     @ .......p.x.x..
   36b9c:	c8b0 8888 00f0 7000 8080 7088 0808 9868     .......p...p..h.
   36bac:	8888 0078 7000 f888 7080 4830 e040 4040     ..x..p...p0H@.@@
   36bbc:	0040 7800 7888 3008 8080 c8b0 8888 2088     @..x.x.0....... 
   36bcc:	6000 2020 7020 0010 1030 9010 4060 4840     .`   p..0...`@@H
   36bdc:	6050 4850 2060 2020 2020 0070 d000 a8a8     P`PH`     p.....
   36bec:	8888 0000 c8b0 8888 0088 7000 8888 7088     ...........p...p
   36bfc:	0000 88f0 80f0 0080 6800 7898 0808 0000     .........h.x....
   36c0c:	c8b0 8080 0080 7000 7080 f008 4040 40e0     .......p.p..@@.@
   36c1c:	4840 0030 8800 8888 6898 0000 8888 5088     @H0......h.....P
   36c2c:	0020 8800 a888 50a8 0000 5088 5020 0088      ......P...P P..
   36c3c:	8800 7888 7008 0000 10f8 4020 10f8 2020     ...x.p.... @..  
   36c4c:	2040 1020 2020 2020 2020 4020 2020 2010     @  .       @  . 
   36c5c:	4020 0000                                    @..

00036c60 <pcWelcomeMessage>:
   36c60:	7246 6565 5452 534f 4320 494c 0d2e 540a     FreeRTOS CLI...T
   36c70:	7079 2065 6548 706c 7420 206f 6976 7765     ype Help to view
   36c80:	6120 6c20 7369 2074 666f 7220 6765 7369      a list of regis
   36c90:	6574 6572 2064 6f63 6d6d 6e61 7364 0d2e     tered commands..
   36ca0:	000a 0000 6d69 0075 6d69 3a75 5220 7465     ....imu.imu: Ret
   36cb0:	7275 736e 6120 7620 6c61 6575 6620 6f72     urns a value fro
   36cc0:	206d 6874 2065 4d49 0d55 000a 7766 0000     m the IMU...fw..
   36cd0:	7766 203a 6f44 6e77 6f6c 6461 6120 6620     fw: Download a f
   36ce0:	6c69 2065 6e61 2064 6570 6672 726f 206d     ile and perform 
   36cf0:	6e61 4620 2057 7075 6164 6574 0a0d 0000     an FW update....
   36d00:	6572 6573 0074 0000 6572 6573 3a74 5220     reset...reset: R
   36d10:	7365 7465 2073 6874 2065 6564 6976 6563     esets the device
   36d20:	0a0d 0000 6567 6474 7369 6174 636e 0065     ....getdistance.
   36d30:	6567 6474 7369 6174 636e 3a65 5220 7465     getdistance: Ret
   36d40:	7275 736e 7420 6568 6420 7369 6174 636e     urns the distanc
   36d50:	2065 7266 6d6f 7420 6568 5520 2d53 3031     e from the US-10
   36d60:	2030 6553 736e 726f 0d2e 000a 3269 0063     0 Sensor....i2c.
   36d70:	3269 3a63 5320 6163 736e 4920 4332 6220     i2c: Scans I2C b
   36d80:	7375 0a0d 0000 0000 7067 0073 7067 3a73     us......gps.gps:
   36d90:	5220 7465 7275 736e 6120 7620 6c61 6575      Returns a value
   36da0:	6620 6f72 206d 6874 2065 5047 0d53 000a      from the GPS...
   36db0:	6c63 0073 6c63 3a73 4320 656c 7261 2073     cls.cls: Clears 
   36dc0:	6874 2065 6574 6d72 6e69 6c61 7320 7263     the terminal scr
   36dd0:	6565 0d6e 000a 0000 6f43 6c75 2064 6f6e     een.....Could no
   36de0:	2074 6c61 6f6c 6163 6574 7320 6d65 7061     t allocate semap
   36df0:	6f68 6572 0a0d 0000 0a0d 0000 616f 0000     hore........oa..
   36e00:	6325 325b 0d4b 003e 2008 0008 6341 6563     %c[2K.>.. ..Acce
   36e10:	656c 6172 6974 6e6f 5b20 676d 3a5d 2058     leration [mg]:X 
   36e20:	6425 5909 2520 0964 205a 6425 0a0d 0000     %d.Y %d.Z %d....
   36e30:	6f4e 6420 7461 2061 6572 6461 2179 5320     No data ready! S
   36e40:	6e65 6964 676e 6420 6d75 796d 6420 7461     ending dummy dat
   36e50:	2061 0a0d 0000 0000 6325 325b 004a 0000     a ......%c[2J...
   36e60:	7453 6475 6e65 7374 7420 206f 6966 6c6c     Students to fill
   36e70:	6f20 7475 0021 0000 7542 7474 6e6f 2320      out!...Button #
   36e80:	6425 6920 2073 6572 656c 7361 6465 0a0d     %d is released..
   36e90:	0000 0000 7542 7474 6e6f 2320 6425 6920     ....Button #%d i
   36ea0:	2073 7270 7365 6573 0d64 000a 6553 736e     s pressed...Sens
   36eb0:	726f 4520 7272 726f 2520 2164 0a0d 0000     or Error %d!....
   36ec0:	6944 7473 6e61 6563 203a 6425 6d20 0d6d     Distance: %d mm.
   36ed0:	000a 0000 6944 7473 6e61 6563 4420 7461     ....Distance Dat
   36ee0:	2061 514d 5454 5020 736f 0d74 000a 0000     a MQTT Post.....
   36ef0:	7544 6d6d 2079 6147 656d 4420 7461 2061     Dummy Game Data 
   36f00:	514d 5454 5020 736f 0d74 000a 2030 3120     MQTT Post...0  1
   36f10:	2020 2032 3320 2020 2034 3520 2020 2036       2  3  4  5  6 
   36f20:	3720 2020 2038 3920 2020 2061 6220 2020      7  8  9  a  b  
   36f30:	2063 6420 2020 2065 6620 0a0d 0000 0000     c  d  e  f......
   36f40:	3025 7832 203a 0000 3025 7832 0020 0000     %02x: ..%02x ...
   36f50:	6554 7473 6e69 2067 7572 6e6e 6e69 2067     Testing running 
   36f60:	5047 2053 6163 6c6c 0d20 000a               GPS call ...

00036f6c <xImuGetCommand>:
   36f6c:	6ca4 0003 6ca8 0003 42f1 0001 0000 0000     .l...l...B......

00036f7c <xOTAUCommand>:
   36f7c:	6ccc 0003 6cd0 0003 449d 0001 0000 0000     .l...l...D......

00036f8c <xResetCommand>:
   36f8c:	6d00 0003 6d08 0003 44bd 0001 0000 0000     .m...m...D......

00036f9c <xDistanceSensorGetDistance>:
   36f9c:	6d24 0003 6d30 0003 44dd 0001 0000 0000     $m..0m...D......

00036fac <xI2cScan>:
   36fac:	6d6c 0003 6d70 0003 4581 0001 0000 0000     lm..pm...E......

00036fbc <xGpsGetCommand>:
   36fbc:	6d88 0003 6d8c 0003 46a9 0001 0000 0000     .m...m...F......

00036fcc <xClearScreen>:
   36fcc:	6db0 0003 6db4 0003 4455 0001 0000 0000     .m...m..UD......
   36fdc:	5345 3545 3631 2d20 4320 6e6f 7274 6c6f     ESE516 - Control
   36fec:	4920 696e 2074 6f43 6564 0a0d 0000 0000      Init Code......
   36ffc:	5245 4f52 2052 6e49 7469 6169 696c 697a     ERROR Initializi
   3700c:	676e 4320 6e6f 7274 6c6f 4420 7461 2061     ng Control Data 
   3701c:	7571 7565 7365 0d21 000a 0000 6f43 746e     queues!.....Cont
   3702c:	6f72 206c 6854 6572 6461 203a 6f43 736e     rol Thread: Cons
   3703c:	6d75 6465 6720 6d61 2065 6170 6b63 7465     umed game packet
   3704c:	0d21 000a 6f43 746e 6f72 206c 6854 6572     !...Control Thre
   3705c:	6461 203a 6f43 6c75 2064 6f6e 2074 6573     ad: Could not se
   3706c:	646e 6720 6d61 2065 6170 6b63 7465 0d21     nd game packet!.
   3707c:	000a 0000 6f43 6c75 2064 6f6e 2074 6e69     ....Could not in
   3708c:	7469 6169 696c 657a 4420 7369 6174 636e     itialize Distanc
   3709c:	2065 6553 736e 726f 0021 0000 6968 6968     e Sensor!...hihi
   370ac:	0a0d 0000 7171 0d71 000a 0000               ....qqq.....

000370b8 <msgKeypadGetCount>:
   370b8:	0410 0000 7245 6f72 2072 6e69 7469 6169     ....Error initia
   370c8:	696c 697a 676e 5320 6565 6173 2177 722f     lizing Seesaw!/r
   370d8:	6e2f 0000 7245 6f72 2f72 2f72 006e 0000     /n..Error/r/n...
   370e8:	6f46 6e75 2064 6553 7365 7761 2f21 2f72     Found Seesaw!/r/
   370f8:	006e 0000 6f43 6c75 2064 6f6e 2074 7277     n...Could not wr
   37108:	7469 2065 6553 7365 7761 7020 6e69 2f21     ite Seesaw pin!/
   37118:	2f72 006e 6f43 6c75 2064 6f6e 2074 6573     r/n.Could not se
   37128:	2074 6573 7365 7761 4e20 6f65 6970 6578     t seesaw Neopixe
   37138:	206c 7073 6565 2164 722f 6e2f 0000 0000     l speed!/r/n....
   37148:	6f43 6c75 2064 6f6e 2074 6573 2074 6573     Could not set se
   37158:	7365 7761 4e20 6f65 6970 6578 206c 756e     esaw Neopixel nu
   37168:	626d 7265 6f20 2066 6564 6976 6563 2f73     mber of devices/
   37178:	2f72 006e 7245 6f72 2072 6572 6461 6e69     r/n.Error readin
   37188:	2067 6553 7365 7761 6320 756f 746e 2173     g Seesaw counts!
   37198:	722f 6e2f 0000 0000 1010 0000 050e 0000     /r/n............
   371a8:	6f43 6c75 2064 6f6e 2074 6e69 7469 6169     Could not initia
   371b8:	696c 657a 4b20 7965 6170 2164 722f 6e2f     lize Keypad!/r/n
   371c8:	0000 0000 4955 5420 7361 206b 7453 7261     ....UI Task Star
   371d8:	6574 2164 0a0d 0000 5345 3545 3631 0000     ted!....ESE516..

000371e8 <main_mqtt_broker>:
   371e8:	7262 6b6f 7265 682e 7669 6d65 2e71 6f63     broker.hivemq.co
   371f8:	006d 0000 3025 6433 0000 0000 7473 7261     m...%03d....star
   37208:	5f74 6f64 6e77 6f6c 6461 203a 4d4d 2043     t_download: MMC 
   37218:	7473 726f 6761 2065 6f6e 2074 6572 6461     storage not read
   37228:	2e79 0a0d 0000 0000 7473 7261 5f74 6f64     y.......start_do
   37238:	6e77 6f6c 6461 203a 6957 462d 2069 7369     wnload: Wi-Fi is
   37248:	6e20 746f 6320 6e6f 656e 7463 6465 0d2e      not connected..
   37258:	000a 0000 7473 7261 5f74 6f64 6e77 6f6c     ....start_downlo
   37268:	6461 203a 6572 7571 7365 2074 7369 7320     ad: request is s
   37278:	6e65 2074 6c61 6572 6461 2e79 0a0d 0000     ent already.....
   37288:	7473 7261 5f74 6f64 6e77 6f6c 6461 203a     start_download: 
   37298:	7572 6e6e 6e69 2067 6f64 6e77 6f6c 6461     running download
   372a8:	6120 726c 6165 7964 0d2e 000a 7473 7261      already....star
   372b8:	5f74 6f64 6e77 6f6c 6461 203a 6573 646e     t_download: send
   372c8:	6e69 2067 5448 5054 7220 7165 6575 7473     ing HTTP request
   372d8:	2e2e 0d2e 000a 0000 7468 7074 3a73 2f2f     ........https://
   372e8:	7777 2e77 6573 7361 752e 6570 6e6e 652e     www.seas.upenn.e
   372f8:	7564 7e2f 6564 6572 7a6b 796d 432f 7061     du/~derekzmy/Cap
   37308:	7574 6572 502e 474e 0000 0000 7473 726f     ture.PNG....stor
   37318:	5f65 6966 656c 705f 6361 656b 3a74 6520     e_file_packet: e
   37328:	706d 7974 6420 7461 2e61 0a0d 0000 0000     mpty data.......
   37338:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
   37348:	3a74 6620 6c69 2065 616e 656d 6920 2073     t: file name is 
   37358:	6e69 6176 696c 2e64 4420 776f 6c6e 616f     invalid. Downloa
   37368:	2064 6163 636e 6c65 6465 0d2e 000a 0000     d canceled......
   37378:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
   37388:	3a74 6320 6572 7461 6e69 2067 6966 656c     t: creating file
   37398:	5b20 7325 0d5d 000a 7473 726f 5f65 6966      [%s]...store_fi
   373a8:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   373b8:	7263 6165 6974 6e6f 6520 7272 726f 2021     creation error! 
   373c8:	6572 3a74 6425 0a0d 0000 0000 7473 726f     ret:%d......stor
   373d8:	5f65 6966 656c 705f 6361 656b 3a74 6620     e_file_packet: f
   373e8:	6c69 2065 7277 7469 2065 7265 6f72 2c72     ile write error,
   373f8:	6420 776f 6c6e 616f 2064 6163 636e 6c65      download cancel
   37408:	6465 0d2e 000a 0000 7473 726f 5f65 6966     ed......store_fi
   37418:	656c 705f 6361 656b 3a74 7220 6365 6965     le_packet: recei
   37428:	6576 5b64 6c25 5d75 202c 6966 656c 7320     ved[%lu], file s
   37438:	7a69 5b65 6c25 5d75 0a0d 0000 7473 726f     ize[%lu]....stor
   37448:	5f65 6966 656c 705f 6361 656b 3a74 6620     e_file_packet: f
   37458:	6c69 2065 6f64 6e77 6f6c 6461 6465 7320     ile downloaded s
   37468:	6375 6563 7373 7566 6c6c 2e79 0a0d 0000     uccessfully.....
   37478:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   37488:	6162 6b63 203a 5448 5054 6320 696c 6e65     back: HTTP clien
   37498:	2074 6f73 6b63 7465 6320 6e6f 656e 7463     t socket connect
   374a8:	6465 0d2e 000a 0000 7468 7074 635f 696c     ed......http_cli
   374b8:	6e65 5f74 6163 6c6c 6162 6b63 203a 6572     ent_callback: re
   374c8:	7571 7365 2074 6f63 706d 656c 6574 2e64     quest completed.
   374d8:	0a0d 0000 7468 7074 635f 696c 6e65 5f74     ....http_client_
   374e8:	6163 6c6c 6162 6b63 203a 6572 6563 7669     callback: receiv
   374f8:	6465 7220 7365 6f70 736e 2065 7525 6420     ed response %u d
   37508:	7461 2061 6973 657a 2520 0d75 000a 0000     ata size %u.....
   37518:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   37528:	6162 6b63 203a 6964 6373 6e6f 656e 7463     back: disconnect
   37538:	6f69 206e 6572 7361 6e6f 253a 0d64 000a     ion reason:%d...
   37548:	6572 6f73 766c 5f65 6263 203a 7325 4920     resolve_cb: %s I
   37558:	2050 6461 7264 7365 2073 7369 2520 2e64     P address is %d.
   37568:	6425 252e 2e64 6425 0a0d 0a0d 0000 0000     %d.%d.%d........
   37578:	6977 6966 635f 3a62 4d20 4d32 575f 4649     wifi_cb: M2M_WIF
   37588:	5f49 4f43 4e4e 4345 4554 0d44 000a 0000     I_CONNECTED.....
   37598:	6977 6966 635f 3a62 4d20 4d32 575f 4649     wifi_cb: M2M_WIF
   375a8:	5f49 4944 4353 4e4f 454e 5443 4445 0a0d     I_DISCONNECTED..
   375b8:	0000 0000 3931 3739 3131 3530 0000 0000     ....19971105....
   375c8:	6564 6572 006b 0000 6977 6966 635f 3a62     derek...wifi_cb:
   375d8:	4920 2050 6461 7264 7365 2073 7369 2520      IP address is %
   375e8:	2e75 7525 252e 2e75 7525 0a0d 0000 0000     u.%u.%u.%u......
   375f8:	7245 6f72 2072 6f63 6e6e 6365 6974 676e     Error connecting
   37608:	7420 206f 514d 5454 4220 6f72 656b 2172      to MQTT Broker!
   37618:	0a0d 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   37628:	203a 6c70 6165 6573 7020 756c 2067 6e61     : please plug an
   37638:	5320 2f44 4d4d 2043 6163 6472 6920 206e      SD/MMC card in 
   37648:	6c73 746f 2e2e 0d2e 000a 0000 6e69 7469     slot........init
   37658:	735f 6f74 6172 6567 203a 4453 4320 7261     _storage: SD Car
   37668:	2064 6e69 7473 6c61 206c 6166 6c69 6465     d install failed
   37678:	0d2e 000a 6e69 7469 735f 6f74 6172 6567     ....init_storage
   37688:	203a 7274 2079 6e75 6c70 6775 6120 646e     : try unplug and
   37698:	7220 2d65 6c70 6775 7420 6568 6320 7261      re-plug the car
   376a8:	2e64 0a0d 0000 0000 6e69 7469 735f 6f74     d.......init_sto
   376b8:	6172 6567 203a 6f6d 6e75 6974 676e 5320     rage: mounting S
   376c8:	2044 6163 6472 2e2e 0d2e 000a 6e69 7469     D card......init
   376d8:	735f 6f74 6172 6567 203a 4453 6320 7261     _storage: SD car
   376e8:	2064 6f6d 6e75 2074 6166 6c69 6465 2021     d mount failed! 
   376f8:	7228 7365 2520 2964 0a0d 0000 6e69 7469     (res %d)....init
   37708:	735f 6f74 6172 6567 203a 4453 6320 7261     _storage: SD car
   37718:	2064 6f6d 6e75 2074 4b4f 0d2e 000a 0000     d mount OK......
   37728:	6f63 666e 6769 7275 5f65 7468 7074 635f     configure_http_c
   37738:	696c 6e65 3a74 4820 5454 2050 6c63 6569     lient: HTTP clie
   37748:	746e 6920 696e 6974 6c61 7a69 7461 6f69     nt initializatio
   37758:	206e 6166 6c69 6465 2021 7228 7365 2520     n failed! (res %
   37768:	2964 0a0d 0000 0000 0a0d 2520 2a2e 0073     d)........ %.*s.
   37778:	6772 2862 0000 0000 0a0d 4752 2042 6425     rgb(......RGB %d
   37788:	2520 2064 6425 0a0d 0000 0000 227b 6167      %d %d......{"ga
   37798:	656d 3a22 005b 0000 0a0d 6147 656d 6d20     me":[.....Game m
   377a8:	7365 6173 6567 7220 6365 6965 6576 2164     essage received!
   377b8:	0a0d 0000 2e25 732a 0000 0000 0a0d 6150     ....%.*s......Pa
   377c8:	7372 6465 4320 6d6f 616d 646e 203a 0000     rsed Command: ..
   377d8:	6425 002c 0a0d 6553 746e 7020 616c 2079     %d,...Sent play 
   377e8:	6f74 6320 6e6f 7274 6c6f 0d21 000a 0000     to control!.....
   377f8:	0a0d 6147 656d 6d20 7365 6173 6567 7220     ..Game message r
   37808:	6365 6965 6576 2064 7562 2074 6f6e 2074     eceived but not 
   37818:	6e75 6564 7372 6f74 646f 0d21 000a 0000     understood!.....
   37828:	4d49 2055 6f74 6970 2063 6572 6563 7669     IMU topic receiv
   37838:	6465 2021 002d 0000 2e25 732a 0d20 000a     ed! -...%.*s ...
   37848:	0a0d 6944 7473 6e61 6563 7420 706f 6369     ..Distance topic
   37858:	7220 6365 6965 6576 2164 0a0d 0000 0000      received!......
   37868:	3e20 203e 0000 0000 3150 4c5f 4445 455f      >> ....P1_LED_E
   37878:	4553 3135 5f36 3654 0000 0000 6166 736c     SE516_T6....fals
   37888:	0065 0000 7274 6575 0000 0000 0a0d 6f43     e...true......Co
   37898:	6e6e 6365 6974 676e 7420 206f 7242 6b6f     nnecting to Brok
   378a8:	7265 2e2e 002e 0000 7242 4a73 4e42 6f56     er......BrsJBNVo
   378b8:	4251 376c 0000 0000 7472 7974 626f 6a65     QBl7....rttyobej
   378c8:	0000 0000 514d 5454 2020 7245 6f72 2072     ....MQTT  Error 
   378d8:	202d 4f4e 2054 6f43 6e6e 6365 6574 2064     - NOT Connected 
   378e8:	6f74 6220 6f72 656b 0d72 000a 514d 5454     to broker...MQTT
   378f8:	4320 6e6f 656e 7463 6465 7420 206f 7262      Connected to br
   37908:	6b6f 7265 0a0d 0a0d 0000 0000 6f43 6e6e     oker........Conn
   37918:	6365 2074 6166 6c69 7420 206f 6573 7672     ect fail to serv
   37928:	7265 2528 2973 2021 6572 7274 2079 7469     er(%s)! retry it
   37938:	6120 7475 6d6f 7461 6369 6c61 796c 0d2e      automatically..
   37948:	000a 0000 3150 475f 4d41 5f45 5345 3545     ....P1_GAME_ESE5
   37958:	3631 545f 0036 0000 6f49 7274 6361 696b     16_T6...Iotracki
   37968:	676e 495f 554d 545f 0036 0000 514d 5454     ng_IMU_T6...MQTT
   37978:	4320 6e6f 656e 7463 6465 0a0d 0000 0000      Connected......
   37988:	514d 5454 6220 6f72 656b 2072 6564 6c63     MQTT broker decl
   37998:	6e69 2065 6f79 7275 6120 6363 7365 2173     ine your access!
   379a8:	6520 7272 726f 6320 646f 2065 6425 0a0d      error code %d..
   379b8:	0000 0000 514d 5454 6420 7369 6f63 6e6e     ....MQTT disconn
   379c8:	6365 6574 0d64 000a 514d 5454 6920 696e     ected...MQTT ini
   379d8:	6974 6c61 7a69 7461 6f69 206e 6166 6c69     tialization fail
   379e8:	6465 202e 7245 6f72 2072 6f63 6564 6920     ed. Error code i
   379f8:	2073 2528 2964 0a0d 0000 0000 514d 5454     s (%d)......MQTT
   37a08:	7220 6765 7369 6574 2072 6163 6c6c 6162      register callba
   37a18:	6b63 6620 6961 656c 2e64 4520 7272 726f     ck failed. Error
   37a28:	6320 646f 2065 7369 2820 6425 0d29 000a      code is (%d)...
   37a38:	227b 2264 7b3a 7422 6d65 2270 253a 7d64     {"d":{"temp":%d}
   37a48:	007d 0000 465b 4941 5d4c 7220 7365 2520     }...[FAIL] res %
   37a58:	0d64 000a 6c46 6761 2e41 7874 2074 6461     d...FlagA.txt ad
   37a68:	6564 2164 0a0d 0000 3a30 6c46 6761 2e41     ded!....0:FlagA.
   37a78:	7874 0074 6f43 6e6e 6365 6574 2064 6f74     txt.Connected to
   37a88:	4d20 5451 2054 7242 6b6f 7265 0d21 0d0a      MQTT Broker!...
   37a98:	000a 0000 227b 6d69 7875 3a22 6425 202c     ....{"imux":%d, 
   37aa8:	6922 756d 2279 203a 6425 202c 6922 756d     "imuy": %d, "imu
   37ab8:	227a 203a 6425 007d 6425 0000 7d5d 0000     z": %d}.%d..]}..
   37ac8:	0a0d 0000 3250 475f 4d41 5f45 5345 3545     ....P2_GAME_ESE5
   37ad8:	3631 545f 0036 0000 5245 4f52 2052 6e49     16_T6...ERROR In
   37ae8:	7469 6169 696c 697a 676e 5720 6669 2069     itializing Wifi 
   37af8:	6144 6174 7120 6575 6575 2173 0a0d 0000     Data queues!....
   37b08:	5345 3545 3631 2d20 5720 6669 2069 6e49     ESE516 - Wifi In
   37b18:	7469 4320 646f 0d65 000a 0000 616d 6e69     it Code.....main
   37b28:	203a 326d 5f6d 6977 6966 695f 696e 2074     : m2m_wifi_init 
   37b38:	6163 6c6c 6520 7272 726f 2021 7228 7365     call error! (res
   37b48:	2520 2964 0a0d 0000 616d 6e69 203a 6f63      %d)....main: co
   37b58:	6e6e 6365 6974 676e 7420 206f 6957 6946     nnecting to WiFi
   37b68:	4120 2050 7325 2e2e 0d2e 000a 3150 545f      AP %s......P1_T
   37b78:	4d45 4550 4152 5554 4552 455f 4553 3135     EMPERATURE_ESE51
   37b88:	5f36 3654 0000 0000 514d 5454 7320 6e65     6_T6....MQTT sen
   37b98:	2064 7325 0a0d 0000 7020 0001 702c 0001     d %s.... p..,p..
   37ba8:	703e 0001 7094 0001 70b4 0001 6568 706c     >p...p...p..help
   37bb8:	0000 0000 0a0d 6568 706c 203a 694c 7473     ......help: List
   37bc8:	2073 6c61 206c 6874 2065 6572 6967 7473     s all the regist
   37bd8:	7265 6465 6320 6d6f 616d 646e 0d73 0d0a     ered commands...
   37be8:	000a 0000 6e49 6f63 7272 6365 2074 6f63     ....Incorrect co
   37bf8:	6d6d 6e61 2064 6170 6172 656d 6574 2872     mmand parameter(
   37c08:	2973 202e 4520 746e 7265 2220 6568 706c     s).  Enter "help
   37c18:	2022 6f74 7620 6569 2077 2061 696c 7473     " to view a list
   37c28:	6f20 2066 7661 6961 616c 6c62 2065 6f63      of available co
   37c38:	6d6d 6e61 7364 0d2e 0d0a 000a 6f43 6d6d     mmands......Comm
   37c48:	6e61 2064 6f6e 2074 6572 6f63 6e67 7369     and not recognis
   37c58:	6465 202e 4520 746e 7265 2720 6568 706c     ed.  Enter 'help
   37c68:	2027 6f74 7620 6569 2077 2061 696c 7473     ' to view a list
   37c78:	6f20 2066 7661 6961 616c 6c62 2065 6f63      of available co
   37c88:	6d6d 6e61 7364 0d2e 0d0a 000a               mmands......

00037c94 <xHelpCommand>:
   37c94:	7bb4 0003 7bbc 0003 8cf5 0001 0000 0000     .{...{..........
   37ca4:	5476 6172 6563 6e45 6261 656c 5428 4352     vTraceEnable(TRC
   37cb4:	535f 4154 5452 415f 4157 5449 485f 534f     _START_AWAIT_HOS
   37cc4:	2954 6e20 746f 6120 6c6c 776f 6465 6920     T) not allowed i
   37cd4:	206e 6e53 7061 6873 746f 6d20 646f 0065     n Snapshot mode.
   37ce4:	6e55 7865 6570 7463 6465 6120 6772 6d75     Unexpected argum
   37cf4:	6e65 2074 6f74 7620 7254 6361 4565 616e     ent to vTraceEna
   37d04:	6c62 2065 7328 616e 7370 6f68 2074 6f6d     ble (snapshot mo
   37d14:	6564 0029 7a54 7443 6c72 0000 6f4e 2074     de).TzCtrl..Not 
   37d24:	6e65 756f 6867 5420 5341 204b 6168 646e     enough TASK hand
   37d34:	656c 2073 202d 6e69 7263 6165 6573 5420     les - increase T
   37d44:	4352 435f 4746 4e5f 4154 4b53 6920 206e     RC_CFG_NTASK in 
   37d54:	7274 5363 616e 7370 6f68 4374 6e6f 6966     trcSnapshotConfi
   37d64:	2e67 0068 6f4e 2074 6e65 756f 6867 4920     g.h.Not enough I
   37d74:	5253 6820 6e61 6c64 7365 2d20 6920 636e     SR handles - inc
   37d84:	6572 7361 2065 5254 5f43 4643 5f47 494e     rease TRC_CFG_NI
   37d94:	5253 6920 206e 7274 5363 616e 7370 6f68     SR in trcSnapsho
   37da4:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   37db4:	6e65 756f 6867 5320 4d45 5041 4f48 4552     enough SEMAPHORE
   37dc4:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   37dd4:	7361 2065 5254 5f43 4643 5f47 534e 4d45     ase TRC_CFG_NSEM
   37de4:	5041 4f48 4552 6920 206e 7274 5363 616e     APHORE in trcSna
   37df4:	7370 6f68 4374 6e6f 6966 2e67 0068 0000     pshotConfig.h...
   37e04:	6f4e 2074 6e65 756f 6867 4d20 5455 5845     Not enough MUTEX
   37e14:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   37e24:	7361 2065 5254 5f43 4643 5f47 4d4e 5455     ase TRC_CFG_NMUT
   37e34:	5845 6920 206e 7274 5363 616e 7370 6f68     EX in trcSnapsho
   37e44:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   37e54:	6e65 756f 6867 5120 4555 4555 6820 6e61     enough QUEUE han
   37e64:	6c64 7365 2d20 6920 636e 6572 7361 2065     dles - increase 
   37e74:	5254 5f43 4643 5f47 514e 4555 4555 6920     TRC_CFG_NQUEUE i
   37e84:	206e 7274 5363 616e 7370 6f68 4374 6e6f     n trcSnapshotCon
   37e94:	6966 2e67 0068 0000 6f4e 2074 6e65 756f     fig.h...Not enou
   37ea4:	6867 5420 4d49 5245 6820 6e61 6c64 7365     gh TIMER handles
   37eb4:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   37ec4:	4643 5f47 544e 4d49 5245 6920 206e 7274     CFG_NTIMER in tr
   37ed4:	5363 616e 7370 6f68 4374 6e6f 6966 2e67     cSnapshotConfig.
   37ee4:	0068 0000 6f4e 2074 6e65 756f 6867 4520     h...Not enough E
   37ef4:	4556 544e 5247 554f 2050 6168 646e 656c     VENTGROUP handle
   37f04:	2073 202d 6e69 7263 6165 6573 5420 4352     s - increase TRC
   37f14:	435f 4746 4e5f 5645 4e45 4754 4f52 5055     _CFG_NEVENTGROUP
   37f24:	6920 206e 7274 5363 616e 7370 6f68 4374      in trcSnapshotC
   37f34:	6e6f 6966 2e67 0068 6f4e 2074 6e65 756f     onfig.h.Not enou
   37f44:	6867 5320 5254 4145 424d 4655 4546 2052     gh STREAMBUFFER 
   37f54:	6168 646e 656c 2073 202d 6e69 7263 6165     handles - increa
   37f64:	6573 5420 4352 435f 4746 4e5f 5453 4552     se TRC_CFG_NSTRE
   37f74:	4d41 5542 4646 5245 6920 206e 7274 5363     AMBUFFER in trcS
   37f84:	616e 7370 6f68 4374 6e6f 6966 2e67 0068     napshotConfig.h.
   37f94:	6f4e 2074 6e65 756f 6867 4d20 5345 4153     Not enough MESSA
   37fa4:	4547 5542 4646 5245 6820 6e61 6c64 7365     GEBUFFER handles
   37fb4:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   37fc4:	4643 5f47 4d4e 5345 4153 4547 5542 4646     CFG_NMESSAGEBUFF
   37fd4:	5245 6920 206e 7274 5363 616e 7370 6f68     ER in trcSnapsho
   37fe4:	4374 6e6f 6966 2e67 0068 0000 7370 547a     tConfig.h...pszT
   37ff4:	6172 6563 6547 4574 7272 726f 6148 646e     raceGetErrorHand
   38004:	656c 3a73 4920 766e 6c61 6469 6f20 6a62     les: Invalid obj
   38014:	6365 6374 616c 7373 0021 0000 941a 0001     ectclass!.......
   38024:	9412 0001 9416 0001 940a 0001 940e 0001     ................
   38034:	941e 0001 9422 0001 9426 0001 942a 0001     ...."...&...*...
   38044:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   38054:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   38064:	6c61 7a69 6465 202e 7355 2065 5476 6172     alized. Use vTra
   38074:	6563 6e45 6261 656c 2928 6920 736e 6574     ceEnable() inste
   38084:	6461 0021 7328 6174 7472 7075 0029 0000     ad!.(startup)...
   38094:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   380a4:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   380b4:	6c61 7a69 6465 202c 6163 6c6c 7620 7254     alized, call vTr
   380c4:	6361 4565 616e 6c62 2865 2029 6966 7372     aceEnable() firs
   380d4:	2174 0000 5254 4341 5f45 5341 4553 5452     t!..TRACE_ASSERT
   380e4:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   380f4:	706f 7265 6974 7365 203a 6e49 6176 696c     operties: Invali
   38104:	2064 6176 756c 2065 6f66 2072 6168 646e     d value for hand
   38114:	656c 0000 5254 4341 5f45 5341 4553 5452     le..TRACE_ASSERT
   38124:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   38134:	706f 7265 6974 7365 203a 616e 656d 3d20     operties: name =
   38144:	203d 554e 4c4c 0000 5476 6172 6563 7453     = NULL..vTraceSt
   38154:	726f 4965 5253 6542 6967 206e 202d 6572     oreISRBegin - re
   38164:	6f63 6472 7265 6220 7375 2179 5320 6565     corder busy! See
   38174:	6320 646f 2065 6f63 6d6d 6e65 2e74 0000      code comment...
   38184:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   38194:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   381a4:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   381b4:	6e61 6c64 2065 4e28 4c55 294c 0000 0000     andle (NULL)....
   381c4:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   381d4:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   381e4:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   381f4:	6e61 6c64 2065 3e28 4e20 5349 2952 0000     andle (> NISR)..
   38204:	6f54 206f 616d 796e 6e20 7365 6574 2064     Too many nested 
   38214:	6e69 6574 7272 7075 7374 0021 5476 6172     interrupts!.vTra
   38224:	6563 7453 726f 4965 5253 6e45 2064 202d     ceStoreISREnd - 
   38234:	6572 6f63 6472 7265 6220 7375 2179 5320     recorder busy! S
   38244:	6565 6320 646f 2065 6f63 6d6d 6e65 2e74     ee code comment.
   38254:	0000 0000 6e55 616d 6374 6568 2064 6163     ....Unmatched ca
   38264:	6c6c 7420 206f 5476 6172 6563 7453 726f     ll to vTraceStor
   38274:	4965 5253 6e45 2064 6e28 5349 6152 7463     eISREnd (nISRact
   38284:	7669 2065 3d3d 3020 202c 7865 6570 7463     ive == 0, expect
   38294:	6465 3e20 3020 0029 5254 4341 5f45 5341     ed > 0).TRACE_AS
   382a4:	4553 5452 203a 7277 7469 4965 746e 3a38     SERT: writeInt8:
   382b4:	6220 6675 6566 2072 3d3d 4e20 4c55 004c      buffer == NULL.
   382c4:	5254 4341 5f45 5341 4553 5452 203a 7277     TRACE_ASSERT: wr
   382d4:	7469 4965 746e 3631 203a 7562 6666 7265     iteInt16: buffer
   382e4:	3d20 203d 554e 4c4c 0000 0000 5254 4341      == NULL....TRAC
   382f4:	5f45 5341 4553 5452 203a 7277 7469 4965     E_ASSERT: writeI
   38304:	746e 3233 203a 7562 6666 7265 3d20 203d     nt32: buffer == 
   38314:	554e 4c4c 0000 0000 5476 6172 6563 7250     NULL....vTracePr
   38324:	6e69 4674 2d20 5420 6f6f 6d20 6e61 2079     intF - Too many 
   38334:	7261 7567 656d 746e 2c73 6d20 7861 3120     arguments, max 1
   38344:	2035 6c61 6f6c 6577 2164 0000 5476 6172     5 allowed!..vTra
   38354:	6563 7250 6e69 4674 2d20 5420 6f6f 6c20     cePrintF - Too l
   38364:	7261 6567 6120 6772 6d75 6e65 7374 202c     arge arguments, 
   38374:	616d 2078 3233 6220 7479 2065 6c61 6f6c     max 32 byte allo
   38384:	6577 2164 0000 0000 5254 4341 5f45 5341     wed!....TRACE_AS
   38394:	4553 5452 203a 5476 6172 6563 5056 6972     SERT: vTraceVPri
   383a4:	746e 3a46 6620 726f 616d 5374 7274 3d20     ntF: formatStr =
   383b4:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   383c4:	4553 5452 203a 5478 6172 6563 6552 6967     SERT: xTraceRegi
   383d4:	7473 7265 7453 6972 676e 203a 616c 6562     sterString: labe
   383e4:	206c 3d3d 4e20 4c55 004c 0000 5254 4341     l == NULL...TRAC
   383f4:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38404:	6563 7453 726f 5465 7361 526b 6165 7964     ceStoreTaskReady
   38414:	203a 6e49 6176 696c 2064 6176 756c 2065     : Invalid value 
   38424:	6f66 2072 6168 646e 656c 0000 6552 6f63     for handle..Reco
   38434:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   38444:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   38454:	6e69 2067 7973 6373 6c61 3f6c 2820 2931     ing syscall? (1)
   38464:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   38474:	203a 7270 5476 6172 6563 7453 726f 4c65     : prvTraceStoreL
   38484:	776f 6f50 6577 3a72 4920 766e 6c61 6469     owPower: Invalid
   38494:	6620 616c 2067 6176 756c 0065 5254 4341      flag value.TRAC
   384a4:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   384b4:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   384c4:	3a6c 6520 6f63 6564 3e20 203d 7830 4646     l: ecode >= 0xFF
   384d4:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   384e4:	203a 7270 5476 6172 6563 7453 726f 4b65     : prvTraceStoreK
   384f4:	7265 656e 436c 6c61 3a6c 6f20 6a62 6365     ernelCall: objec
   38504:	4374 616c 7373 3e20 203d 5254 4341 5f45     tClass >= TRACE_
   38514:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   38524:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38534:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   38544:	3a6c 4920 766e 6c61 6469 7620 6c61 6575     l: Invalid value
   38554:	6620 726f 6f20 6a62 6365 4e74 6d75 6562      for objectNumbe
   38564:	0072 0000 6552 6f63 6472 7265 6220 7375     r...Recorder bus
   38574:	2079 202d 6968 6867 7020 6972 726f 7469     y - high priorit
   38584:	2079 5349 2052 7375 6e69 2067 7973 6373     y ISR using sysc
   38594:	6c61 3f6c 2820 2932 0000 0000 5254 4341     all? (2)....TRAC
   385a4:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   385b4:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   385c4:	576c 7469 5068 7261 6d61 203a 7665 6374     lWithParam: evtc
   385d4:	646f 2065 3d3e 3020 4678 0046 5254 4341     ode >= 0xFF.TRAC
   385e4:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   385f4:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   38604:	576c 7469 5068 7261 6d61 203a 626f 656a     lWithParam: obje
   38614:	7463 6c43 7361 2073 3d3e 5420 4152 4543     ctClass >= TRACE
   38624:	4e5f 4c43 5341 4553 0053 0000 5254 4341     _NCLASSES...TRAC
   38634:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38644:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   38654:	576c 7469 5068 7261 6d61 203a 6e49 6176     lWithParam: Inva
   38664:	696c 2064 6176 756c 2065 6f66 2072 626f     lid value for ob
   38674:	656a 7463 754e 626d 7265 0000 6552 6f63     jectNumber..Reco
   38684:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   38694:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   386a4:	6e69 2067 7973 6373 6c61 3f6c 2820 2933     ing syscall? (3)
   386b4:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   386c4:	203a 7270 5476 6172 6563 6547 5074 7261     : prvTraceGetPar
   386d4:	6d61 203a 6e49 6176 696c 2064 6176 756c     am: Invalid valu
   386e4:	2065 6f66 2072 6170 6172 5f6d 616d 0078     e for param_max.
   386f4:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38704:	5476 6172 6563 7453 726f 4b65 7265 656e     vTraceStoreKerne
   38714:	436c 6c61 576c 7469 4e68 6d75 7265 6369     lCallWithNumeric
   38724:	6150 6172 4f6d 6c6e 3a79 4920 766e 6c61     ParamOnly: Inval
   38734:	6469 7620 6c61 6575 6620 726f 6520 7476     id value for evt
   38744:	6f63 6564 0000 0000 6552 6f63 6472 7265     code....Recorder
   38754:	6220 7375 2079 202d 6968 6867 7020 6972      busy - high pri
   38764:	726f 7469 2079 5349 2052 7375 6e69 2067     ority ISR using 
   38774:	7973 6373 6c61 3f6c 2820 2934 0000 0000     syscall? (4)....
   38784:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38794:	5476 6172 6563 7453 726f 5465 7361 736b     vTraceStoreTasks
   387a4:	6977 6374 3a68 4920 766e 6c61 6469 7620     witch: Invalid v
   387b4:	6c61 6575 6620 726f 7420 7361 5f6b 6168     alue for task_ha
   387c4:	646e 656c 0000 0000 5254 4341 5f45 5341     ndle....TRACE_AS
   387d4:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   387e4:	726f 4f65 6a62 6365 4e74 6d61 4f65 436e     oreObjectNameOnC
   387f4:	6f6c 6573 7645 6e65 3a74 6f20 6a62 6365     loseEvent: objec
   38804:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   38814:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   38824:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38834:	6563 7453 726f 4f65 6a62 6365 4e74 6d61     ceStoreObjectNam
   38844:	4f65 436e 6f6c 6573 7645 6e65 3a74 4920     eOnCloseEvent: I
   38854:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   38864:	6820 6e61 6c64 0065 5254 4341 5f45 5341      handle.TRACE_AS
   38874:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   38884:	726f 4f65 6a62 6365 5074 6f72 6570 7472     oreObjectPropert
   38894:	6569 4f73 436e 6f6c 6573 7645 6e65 3a74     iesOnCloseEvent:
   388a4:	6f20 6a62 6365 6374 616c 7373 3e20 203d      objectclass >= 
   388b4:	5254 4341 5f45 434e 414c 5353 5345 0000     TRACE_NCLASSES..
   388c4:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   388d4:	5476 6172 6563 7453 726f 4f65 6a62 6365     vTraceStoreObjec
   388e4:	5074 6f72 6570 7472 6569 4f73 436e 6f6c     tPropertiesOnClo
   388f4:	6573 7645 6e65 3a74 4920 766e 6c61 6469     seEvent: Invalid
   38904:	7620 6c61 6575 6620 726f 6820 6e61 6c64      value for handl
   38914:	0065 0000 5254 4341 5f45 5341 4553 5452     e...TRACE_ASSERT
   38924:	203a 7270 5476 6172 6563 6553 5074 6972     : prvTraceSetPri
   38934:	726f 7469 5079 6f72 6570 7472 3a79 6f20     orityProperty: o
   38944:	6a62 6365 6374 616c 7373 3e20 203d 5254     bjectclass >= TR
   38954:	4341 5f45 434e 414c 5353 5345 0000 0000     ACE_NCLASSES....
   38964:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38974:	5476 6172 6563 6553 5074 6972 726f 7469     vTraceSetPriorit
   38984:	5079 6f72 6570 7472 3a79 4920 766e 6c61     yProperty: Inval
   38994:	6469 7620 6c61 6575 6620 726f 6920 0064     id value for id.
   389a4:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   389b4:	5476 6172 6563 6547 5074 6972 726f 7469     vTraceGetPriorit
   389c4:	5079 6f72 6570 7472 3a79 6f20 6a62 6365     yProperty: objec
   389d4:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   389e4:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   389f4:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38a04:	6563 6547 5074 6972 726f 7469 5079 6f72     ceGetPriorityPro
   38a14:	6570 7472 3a79 4920 766e 6c61 6469 7620     perty: Invalid v
   38a24:	6c61 6575 6620 726f 6920 0064 5254 4341     alue for id.TRAC
   38a34:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38a44:	6563 6553 4f74 6a62 6365 5374 6174 6574     ceSetObjectState
   38a54:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   38a64:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   38a74:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38a84:	5476 6172 6563 6553 4f74 6a62 6365 5374     vTraceSetObjectS
   38a94:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   38aa4:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   38ab4:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38ac4:	6563 6547 4f74 6a62 6365 5374 6174 6574     ceGetObjectState
   38ad4:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   38ae4:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   38af4:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38b04:	5476 6172 6563 6547 4f74 6a62 6365 5374     vTraceGetObjectS
   38b14:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   38b24:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   38b34:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38b44:	6563 6553 5474 7361 496b 736e 6174 636e     ceSetTaskInstanc
   38b54:	4665 6e69 7369 6568 3a64 4920 766e 6c61     eFinished: Inval
   38b64:	6469 7620 6c61 6575 6620 726f 6820 6e61     id value for han
   38b74:	6c64 0065 7254 6361 2065 6552 6f63 6472     dle.Trace Record
   38b84:	7265 4420 6d65 006f 7441 6574 706d 2074     er Demo.Attempt 
   38b94:	6f74 6920 646e 7865 6f20 7475 6973 6564     to index outside
   38ba4:	6520 6576 746e 6220 6675 6566 2172 0000      event buffer!..
   38bb4:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   38bc4:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   38bd4:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   38be4:	6f20 6a62 6365 6374 616c 7373 0000 0000      objectclass....
   38bf4:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   38c04:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   38c14:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   38c24:	6f20 6a62 6365 6874 6e61 6c64 0065 0000      objecthandle...
   38c34:	624f 656a 7463 7420 6261 656c 6c20 6f6f     Object table loo
   38c44:	756b 2070 6977 6874 6920 766e 6c61 6469     kup with invalid
   38c54:	6f20 6a62 6365 2074 6168 646e 656c 6f20      object handle o
   38c64:	2072 626f 656a 7463 6320 616c 7373 0021     r object class!.
   38c74:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38c84:	5476 6172 6563 6547 4f74 6a62 6365 4874     vTraceGetObjectH
   38c94:	6e61 6c64 3a65 4920 766e 6c61 6469 7620     andle: Invalid v
   38ca4:	6c61 6575 6620 726f 6f20 6a62 6365 6374     alue for objectc
   38cb4:	616c 7373 0000 0000 5254 4341 5f45 5341     lass....TRACE_AS
   38cc4:	4553 5452 203a 7270 5476 6172 6563 7246     SERT: prvTraceFr
   38cd4:	6565 624f 656a 7463 6148 646e 656c 203a     eeObjectHandle: 
   38ce4:	6e49 6176 696c 2064 6176 756c 2065 6f66     Invalid value fo
   38cf4:	2072 626f 656a 7463 6c63 7361 0073 0000     r objectclass...
   38d04:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38d14:	5476 6172 6563 7246 6565 624f 656a 7463     vTraceFreeObject
   38d24:	6148 646e 656c 203a 6e49 6176 696c 2064     Handle: Invalid 
   38d34:	6176 756c 2065 6f66 2072 6168 646e 656c     value for handle
   38d44:	0000 0000 7441 6574 706d 2074 6f74 6620     ....Attempt to f
   38d54:	6572 2065 6f6d 6572 6820 6e61 6c64 7365     ree more handles
   38d64:	7420 6168 206e 6c61 6f6c 6163 6574 2164      than allocated!
   38d74:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   38d84:	203a 7270 5476 6172 6563 6553 4f74 6a62     : prvTraceSetObj
   38d94:	6365 4e74 6d61 3a65 6e20 6d61 2065 3d3d     ectName: name ==
   38da4:	4e20 4c55 004c 0000 6c49 656c 6167 206c      NULL...Illegal 
   38db4:	626f 656a 7463 6320 616c 7373 6920 206e     object class in 
   38dc4:	7270 5476 6172 6563 6553 4f74 6a62 6365     prvTraceSetObjec
   38dd4:	4e74 6d61 0065 0000 6c49 656c 6167 206c     tName...Illegal 
   38de4:	6168 646e 656c 2820 2930 6920 206e 7270     handle (0) in pr
   38df4:	5476 6172 6563 6553 4f74 6a62 6365 4e74     vTraceSetObjectN
   38e04:	6d61 2e65 0000 0000 5254 4341 5f45 5341     ame.....TRACE_AS
   38e14:	4553 5452 203a 7270 5476 6172 6563 704f     SERT: prvTraceOp
   38e24:	6e65 7953 626d 6c6f 203a 616e 656d 3d20     enSymbol: name =
   38e34:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   38e44:	4553 5452 203a 7270 4376 6568 6b63 6144     SERT: prvCheckDa
   38e54:	6174 6f54 6542 764f 7265 7277 7469 6574     taToBeOverwritte
   38e64:	466e 726f 754d 746c 4569 746e 7972 7645     nForMultiEntryEv
   38e74:	6e65 7374 203a 6f6e 4566 746e 6972 7365     ents: nofEntries
   38e84:	6f54 6843 6365 206b 3d3d 3020 0000 0000     ToCheck == 0....
   38e94:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38ea4:	5476 6172 6563 6547 4474 5354 203a 6e49     vTraceGetDTS: In
   38eb4:	6176 696c 2064 6176 756c 2065 6f66 2072     valid value for 
   38ec4:	6170 6172 5f6d 616d 4478 5354 0000 0000     param_maxDTS....
   38ed4:	6142 2064 6170 6172 5f6d 616d 4478 5354     Bad param_maxDTS
   38ee4:	6920 206e 7270 5476 6172 6563 6547 4474      in prvTraceGetD
   38ef4:	5354 0000 5254 4341 5f45 5341 4553 5452     TS..TRACE_ASSERT
   38f04:	203a 7270 5476 6172 6563 6f4c 6b6f 7075     : prvTraceLookup
   38f14:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   38f24:	203a 616e 656d 3d20 203d 554e 4c4c 0000     : name == NULL..
   38f34:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38f44:	5476 6172 6563 6f4c 6b6f 7075 7953 626d     vTraceLookupSymb
   38f54:	6c6f 6154 6c62 4565 746e 7972 203a 656c     olTableEntry: le
   38f64:	206e 3d3d 3020 0000 5254 4341 5f45 5341     n == 0..TRACE_AS
   38f74:	4553 5452 203a 7270 5476 6172 6563 7243     SERT: prvTraceCr
   38f84:	6165 6574 7953 626d 6c6f 6154 6c62 4565     eateSymbolTableE
   38f94:	746e 7972 203a 616e 656d 3d20 203d 554e     ntry: name == NU
   38fa4:	4c4c 0000 5254 4341 5f45 5341 4553 5452     LL..TRACE_ASSERT
   38fb4:	203a 7270 5476 6172 6563 7243 6165 6574     : prvTraceCreate
   38fc4:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   38fd4:	203a 656c 206e 3d3d 3020 0000 7953 626d     : len == 0..Symb
   38fe4:	6c6f 7420 6261 656c 6620 6c75 2e6c 4920     ol table full. I
   38ff4:	636e 6572 7361 2065 5254 5f43 4643 5f47     ncrease TRC_CFG_
   39004:	5953 424d 4c4f 545f 4241 454c 535f 5a49     SYMBOL_TABLE_SIZ
   39014:	2045 6e69 7420 6372 6f43 666e 6769 682e     E in trcConfig.h
   39024:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   39034:	203a 7270 5476 6172 6563 6547 4374 6568     : prvTraceGetChe
   39044:	6b63 7573 3a6d 7020 616e 656d 3d20 203d     cksum: pname == 
   39054:	554e 4c4c 0000 0000 5254 4341 5f45 5341     NULL....TRACE_AS
   39064:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   39074:	4374 6568 6b63 7573 3a6d 7020 7263 2063     tChecksum: pcrc 
   39084:	3d3d 4e20 4c55 004c 5254 4341 5f45 5341     == NULL.TRACE_AS
   39094:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   390a4:	4374 6568 6b63 7573 3a6d 7020 656c 676e     tChecksum: pleng
   390b4:	6874 3d20 203d 554e 4c4c 0000 4449 454c     th == NULL..IDLE
   390c4:	0000 0000 6d54 2072 7653 0063 e4b8 0001     ....Tmr Svc.....
   390d4:	e4b8 0001 e4b8 0001 e546 0001 e510 0001     ........F.......
   390e4:	e53a 0001 e4b8 0001 e4b8 0001 e546 0001     :...........F...
   390f4:	e510 0001                                   ....

000390f8 <sd_mmc_trans_units>:
   390f8:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

00039114 <sd_trans_multipliers>:
   39114:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   39124:	000f 0000 0014 0000 0019 0000 001e 0000     ................
   39134:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
   39144:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

00039154 <mmc_trans_multipliers>:
   39154:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   39164:	000f 0000 0014 0000 001a 0000 001e 0000     ................
   39174:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
   39184:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
   39194:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   391a4:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
   391b4:	746c 6320 646d 000a 000d 0000               lt cmd......

000391c0 <__FUNCTION__.17099>:
   391c0:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
   391d0:	4128 5050 2829 4e49 4f46 0029 6c53 776f     (APP)(INFO).Slow
   391e0:	6e69 2067 6f64 6e77 2e2e 0a2e 0000 0000     ing down........
   391f0:	000d 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   39200:	5d73 255b 5d64 0000 4828 4649 4629 6961     s][%d]..(HIF)Fai
   39210:	206c 6f74 7720 6b61 7075 7420 6568 6320     l to wakup the c
   39220:	6968 0a70 0000 0000 6828 6669 2029 4957     hip.....(hif) WI
   39230:	4946 485f 534f 5f54 4352 5f56 5443 4c52     FI_HOST_RCV_CTRL
   39240:	315f 6220 7375 6620 6961 0a6c 0000 0000     _1 bus fail.....
   39250:	6828 6669 2029 6461 7264 7365 2073 7562     (hif) address bu
   39260:	2073 6166 6c69 000a 6828 6669 2029 6f43     s fail..(hif) Co
   39270:	7272 7075 6574 2064 6170 6b63 7465 5320     rrupted packet S
   39280:	7a69 2065 203d 7525 3c20 204c 203d 7525     ize = %u <L = %u
   39290:	202c 2047 203d 7525 202c 504f 3d20 2520     , G = %u, OP = %
   392a0:	3230 3e58 000a 0000 4957 4946 6320 6c61     02X>....WIFI cal
   392b0:	626c 6361 206b 7369 6e20 746f 7220 6765     lback is not reg
   392c0:	7369 6574 6572 0a64 0000 0000 6353 6b6f     istered.....Scok
   392d0:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
   392e0:	746f 7220 6765 7369 6574 6572 0a64 0000     ot registered...
   392f0:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
   39300:	6f6e 2074 6572 6967 7473 7265 6465 000a     not registered..
   39310:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
   39320:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
   39330:	0a64 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
   39340:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
   39350:	7265 6465 000a 0000 6828 6669 2029 6e69     ered....(hif) in
   39360:	6176 696c 2064 7267 756f 2070 4449 000a     valid group ID..
   39370:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
   39380:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
   39390:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
   393a0:	2029 7257 6e6f 2067 6953 657a 000a 0000     ) Wrong Size....
   393b0:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
   393c0:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
   393d0:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
   393e0:	746e 7265 7572 7470 7220 6765 000a 0000     nterrupt reg....
   393f0:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
   39400:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
   39410:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
   39420:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
   39430:	6176 696c 2064 7261 7567 656d 746e 000a     valid argument..
   39440:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
   39450:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
   39460:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
   39470:	6666 7265 7320 7a69 2065 253c 3e75 253c     ffer size <%u><%
   39480:	756c 0a3e 0000 0000 5041 2050 6552 7571     lu>.....APP Requ
   39490:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
   394a0:	6f79 646e 7420 6568 7220 6365 7669 6465     yond the recived
   394b0:	6220 6675 6566 2072 6461 7264 7365 2073      buffer address 
   394c0:	6e61 2064 656c 676e 6874 000a 5247 2070     and length..GRp 
   394d0:	203f 6425 000a 0000 2658 0002 2628 0002     ? %d....X&..(&..
   394e0:	2620 0002 2638 0002 2630 0002 2650 0002      &..8&..0&..P&..
   394f0:	2640 0002 2648 0002                         @&..H&..

000394f8 <__FUNCTION__.17967>:
   394f8:	6968 5f66 6573 646e 0000 0000               hif_send....

00039504 <__FUNCTION__.17977>:
   39504:	6968 5f66 7369 0072                         hif_isr.

0003950c <__FUNCTION__.17986>:
   3950c:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

0003951c <__FUNCTION__.17998>:
   3951c:	6968 5f66 6572 6563 7669 0065               hif_receive.

00039528 <__FUNCTION__.18014>:
   39528:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
   39538:	4128 5050 2829 4e49 4f46 0029 6f43 666e     (APP)(INFO).Conf
   39548:	696c 7463 6465 4920 2050 2022 7525 252e     licted IP " %u.%
   39558:	2e75 7525 252e 2075 2022 000a 000d 0000     u.%u.%u " ......
   39568:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   39578:	5d64 0000 4552 2051 6f4e 2074 6564 6966     d]..REQ Not defi
   39588:	656e 2064 6425 000a 4e49 4156 494c 2044     ned %d..INVALID 
   39598:	4f50 4e49 4554 0a52 0000 0000 4e49 4156     POINTER.....INVA
   395a8:	494c 2044 5353 4449 000a 0000 4e49 4156     LID SSID....INVA
   395b8:	494c 2044 4843 000a 4e49 4156 494c 2044     LID CH..INVALID 
   395c8:	4844 5043 5320 5245 4556 2052 5049 000a     DHCP SERVER IP..
   395d8:	4e49 4156 494c 2044 454b 2059 4e49 4544     INVALID KEY INDE
   395e8:	0a58 0000 4e49 4156 494c 2044 454b 2059     X...INVALID KEY 
   395f8:	5453 4952 474e 5320 5a49 0a45 0000 0000     STRING SIZE.....
   39608:	4e49 4156 494c 2044 454b 2059 4953 455a     INVALID KEY SIZE
   39618:	000a 0000 4e49 4156 494c 2044 5057 2041     ....INVALID WPA 
   39628:	454b 2059 4953 455a 000a 0000 4e49 4156     KEY SIZE....INVA
   39638:	494c 2044 5541 4854 4e45 4954 4143 4954     LID AUTHENTICATI
   39648:	4e4f 4d20 444f 0a45 0000 0000 4e49 4156     ON MODE.....INVA
   39658:	494c 2044 6f4e 6f20 2066 6373 6e61 7320     LID No of scan s
   39668:	6f6c 7374 2021 6425 000a 0000 4e49 4156     lots! %d....INVA
   39678:	494c 2044 6373 6e61 7320 6f6c 2074 6974     LID scan slot ti
   39688:	656d 2021 6425 000a 4e49 4156 494c 2044     me! %d..INVALID 
   39698:	6f4e 6f20 2066 7270 626f 2065 6572 7571     No of probe requ
   396a8:	7365 7374 7020 7265 7320 6163 206e 6c73     ests per scan sl
   396b8:	746f 2520 0a64 0000 4e49 4156 494c 2044     ot %d...INVALID 
   396c8:	5352 4953 7420 7268 7365 6f68 646c 2520     RSSI threshold %
   396d8:	2064 000a 0a0d 0000 694d 6d73 7461 6863     d ......Mismatch
   396e8:	4620 7269 616d 7277 2065 6556 7372 6f69      Firmawre Versio
   396f8:	0a6e 0000 654b 2079 7369 6e20 746f 7620     n...Key is not v
   39708:	6c61 6469 000a 0000 6e49 6176 696c 2064     alid....Invalid 
   39718:	654b 0a79 0000 0000 5353 4449 4c20 4e45     Key.....SSID LEN
   39728:	4920 564e 4c41 4449 000a 0000 4843 4920      INVALID....CH I
   39738:	564e 4c41 4449 000a 6e49 6176 696c 2064     NVALID..Invalid 
   39748:	6557 2070 656b 2079 6e69 6564 2078 6425     Wep key index %d
   39758:	000a 0000 6e49 6176 696c 2064 6557 2070     ....Invalid Wep 
   39768:	656b 2079 656c 676e 6874 2520 0a64 0000     key length %d...
   39778:	6e49 6f63 7272 6365 2074 5350 204b 656b     Incorrect PSK ke
   39788:	2079 656c 676e 6874 000a 0000 6e75 6564     y length....unde
   39798:	6966 656e 2064 6573 2063 7974 6570 000a     fined sec type..
   397a8:	505f 5f53 4553 5652 5245 205f 7369 6e20     _PS_SERVER_ is n
   397b8:	746f 6420 6665 6e69 6465 000a 694c 7473     ot defined..List
   397c8:	6e65 6320 6168 6e6e 6c65 7320 6f68 6c75     en channel shoul
   397d8:	2064 6e6f 796c 6220 2065 324d 5f4d 4957     d only be M2M_WI
   397e8:	4946 435f 5f48 2f31 2f36 3131 0a20 0000     FI_CH_1/6/11 ...
   397f8:	4f50 4557 2052 4153 4556 2520 0a64 0000     POWER SAVE %d...
   39808:	4e49 4156 494c 2044 4f44 414d 4e49 4e20     INVALID DOMAIN N
   39818:	4d41 0a45 0000 0000 5250 474e 4220 6675     AME.....PRNG Buf
   39828:	6566 2072 7865 6563 6465 6465 6d20 7861     fer exceeded max
   39838:	6d69 6d75 7320 7a69 2065 6425 6f20 2072     imum size %d or 
   39848:	554e 4c4c 4220 6675 6566 0a72 0000 0000     NULL Buffer.....

00039858 <__FUNCTION__.17949>:
   39858:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

00039864 <__FUNCTION__.17978>:
   39864:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

00039874 <__FUNCTION__.18009>:
   39874:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
   39884:	735f 0063 4128 5050 2829 5245 2952 255b     _sc.(APP)(ERR)[%
   39894:	5d73 255b 5d64 0000 7542 2073 7265 6f72     s][%d]..Bus erro
   398a4:	2072 3528 2e29 6425 2520 786c 000a 0000     r (5).%d %lx....
   398b4:	000d 0000 6146 6c69 6465 7420 206f 6177     ....Failed to wa
   398c4:	756b 2070 6874 2065 6863 7069 000a 0000     kup the chip....
   398d4:	4128 5050 2829 4e49 4f46 0029 7244 7669     (APP)(INFO).Driv
   398e4:	7265 6556 4972 666e 3a6f 3020 2578 3830     erVerInfo: 0x%08
   398f4:	786c 000a 6166 6c69 6465 7420 206f 6564     lx..failed to de
   39904:	692d 696e 6974 6c61 7a69 0a65 0000 0000     -initialize.....

00039914 <__FUNCTION__.17806>:
   39914:	6863 7069 775f 6b61 0065 0000               chip_wake...

00039920 <__FUNCTION__.17855>:
   39920:	6863 7069 645f 6965 696e 0074 4128 5050     chip_deinit.(APP
   39930:	2829 5245 2952 255b 5d73 255b 5d64 0000     )(ERR)[%s][%d]..
   39940:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
   39950:	206c 6e69 7469 6220 7375 000a 000d 0000     l init bus......
   39960:	4128 5050 2829 4e49 4f46 0029 6843 7069     (APP)(INFO).Chip
   39970:	4920 2044 6c25 0a78 0000 0000 6166 6c69      ID %lx.....fail
   39980:	6465 7420 206f 6e65 6261 656c 6920 746e     ed to enable int
   39990:	7265 7572 7470 2e73 0a2e 0000 6e5b 696d     errupts.....[nmi
   399a0:	7320 6f74 5d70 203a 6863 7069 645f 6965      stop]: chip_dei
   399b0:	696e 2074 6166 6c69 000a 0000 6e5b 696d     nit fail....[nmi
   399c0:	7320 6f74 5d70 203a 5053 2049 6c66 7361      stop]: SPI flas
   399d0:	2068 6964 6173 6c62 2065 6166 6c69 000a     h disable fail..
   399e0:	6e5b 696d 7320 6f74 5d70 203a 6166 6c69     [nmi stop]: fail
   399f0:	6920 696e 2074 7562 0a73 0000                init bus...

000399fc <__FUNCTION__.17853>:
   399fc:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

00039a08 <__FUNCTION__.17860>:
   39a08:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...

00039a18 <crc7_syndrome_table>:
   39a18:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
   39a28:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
   39a38:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
   39a48:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
   39a58:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
   39a68:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
   39a78:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
   39a88:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
   39a98:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
   39aa8:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
   39ab8:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
   39ac8:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
   39ad8:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
   39ae8:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
   39af8:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
   39b08:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
   39b18:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   39b28:	5d64 0000 6e5b 696d 7320 6970 3a5d 4620     d]..[nmi spi]: F
   39b38:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
   39b48:	6220 7375 6520 7272 726f 2e2e 0a2e 0000      bus error......
   39b58:	000d 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   39b68:	6961 656c 2064 7562 2073 7265 6f72 2e72     ailed bus error.
   39b78:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   39b88:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   39b98:	736e 2065 6572 6461 202c 7825 2520 2078     nse read, %x %x 
   39ba8:	7825 000a 6e5b 696d 7320 6970 3a5d 4620     %x..[nmi spi]: F
   39bb8:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
   39bc8:	6573 7220 6165 2c64 6220 7375 6520 7272     se read, bus err
   39bd8:	726f 2e2e 0a2e 0000 6e5b 696d 7320 6970     or......[nmi spi
   39be8:	3a5d 7320 6970 6220 6675 6566 2072 6973     ]: spi buffer si
   39bf8:	657a 7420 6f6f 7320 616d 6c6c 2820 6425     ze too small (%d
   39c08:	2029 2528 2964 000a 6e5b 696d 7320 6970     ) (%d)..[nmi spi
   39c18:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
   39c28:	7073 6e6f 6573 202c 6d63 2064 2528 3230     sponse, cmd (%02
   39c38:	2978 202c 6572 7073 2820 3025 7832 0a29     x), resp (%02x).
   39c48:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   39c58:	6961 656c 2064 6d63 2064 7473 7461 2065     ailed cmd state 
   39c68:	6572 7073 6e6f 6573 7320 6174 6574 2820     response state (
   39c78:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   39c88:	3a5d 4520 7272 726f 202c 6164 6174 7220     ]: Error, data r
   39c98:	6165 2064 6572 7073 6e6f 6573 2820 3025     ead response (%0
   39ca8:	7832 0a29 0000 0000 6e5b 696d 7320 6970     2x).....[nmi spi
   39cb8:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   39cc8:	206e 6877 6e65 7220 6165 6964 676e 6420     n when reading d
   39cd8:	7461 2e61 000a 0000 6e5b 696d 7320 6970     ata.....[nmi spi
   39ce8:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   39cf8:	206e 6877 6e65 7220 6165 6964 676e 6320     n when reading c
   39d08:	6372 0a2e 0000 0000 6e5b 696d 7320 6970     rc......[nmi spi
   39d18:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   39d28:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
   39d38:	7272 726f 2e2e 0a2e 0000 0000 6e5b 696d     rror........[nmi
   39d48:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
   39d58:	6174 6220 6f6c 6b63 6320 6372 7220 6165     ta block crc rea
   39d68:	2c64 6220 7375 6520 7272 726f 2e2e 0a2e     d, bus error....
   39d78:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   39d88:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   39d98:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
   39da8:	6f72 2e72 2e2e 000a 6e5b 696d 7320 6970     ror.....[nmi spi
   39db8:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
   39dc8:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
   39dd8:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   39de8:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   39df8:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
   39e08:	7562 2073 7265 6f72 2e72 2e2e 000a 0000     bus error.......
   39e18:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   39e28:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
   39e38:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
   39e48:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   39e58:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
   39e68:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
   39e78:	7265 6f72 2e72 2e2e 000a 0000 6e5b 696d     error.......[nmi
   39e88:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   39e98:	2c64 7720 6972 6574 7220 6765 2820 3025     d, write reg (%0
   39ea8:	7838 2e29 2e2e 000a 6552 6573 2074 6e61     8x).....Reset an
   39eb8:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
   39ec8:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
   39ed8:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
   39ee8:	6220 6f6c 6b63 2820 3025 7838 2e29 2e2e      block (%08x)...
   39ef8:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   39f08:	6961 656c 2064 6c62 636f 206b 6164 6174     ailed block data
   39f18:	7720 6972 6574 2e2e 0a2e 0000 6552 6573      write......Rese
   39f28:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
   39f38:	786c 2520 0a64 0000 6e5b 696d 7320 6970     lx %d...[nmi spi
   39f48:	3a5d 4620 6961 656c 2064 6d63 2c64 7220     ]: Failed cmd, r
   39f58:	6165 2064 6572 2067 2528 3830 2978 2e2e     ead reg (%08x)..
   39f68:	0a2e 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
   39f78:	7274 2079 6425 2520 786c 000a 6e5b 696d     try %d %lx..[nmi
   39f88:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   39f98:	2c64 7220 6165 2064 6c62 636f 206b 2528     d, read block (%
   39fa8:	3830 2978 2e2e 0a2e 0000 0000 6e5b 696d     08x)........[nmi
   39fb8:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   39fc8:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   39fd8:	636f 6c6f 7720 7469 2068 5243 2043 6e6f     ocol with CRC on
   39fe8:	202c 6572 7974 6972 676e 7720 7469 2068     , retyring with 
   39ff8:	5243 2043 666f 2e66 2e2e 000a 6e5b 696d     CRC off.....[nmi
   3a008:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   3a018:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   3a028:	636f 6c6f 2e2e 0a2e 0000 0000 6e5b 696d     ocol........[nmi
   3a038:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   3a048:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
   3a058:	6f74 6f63 206c 6572 2e67 2e2e 000a 0000     tocol reg.......
   3a068:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
   3a078:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
   3a088:	2e2e 0a2e 0000 0000 41a8 0002 41a8 0002     .........A...A..
   3a098:	4238 0002 40fc 0002 4142 0002 4164 0002     8B...@..BA..dA..
   3a0a8:	41ea 0002 41ea 0002 42a4 0002 40d0 0002     .A...A...B...@..
   3a0b8:	42fe 0002 42fe 0002 42fe 0002 42fe 0002     .B...B...B...B..
   3a0c8:	4186 0002 4708 0002 4708 0002 4790 0002     .A...G...G...G..
   3a0d8:	466c 0002 46ae 0002 46cc 0002 4746 0002     lF...F...F..FG..
   3a0e8:	4746 0002 47f2 0002 4644 0002 4842 0002     FG...G..DF..BH..
   3a0f8:	4842 0002 4842 0002 4842 0002 46ea 0002     BH..BH..BH...F..

0003a108 <__FUNCTION__.17128>:
   3a108:	7073 5f69 6d63 0064                         spi_cmd.

0003a110 <__FUNCTION__.17135>:
   3a110:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

0003a120 <__FUNCTION__.17144>:
   3a120:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

0003a12c <__FUNCTION__.17177>:
   3a12c:	7073 5f69 6d63 5f64 6f63 706d 656c 6574     spi_cmd_complete
   3a13c:	0000 0000                                   ....

0003a140 <__FUNCTION__.17223>:
   3a140:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

0003a150 <__FUNCTION__.17235>:
   3a150:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

0003a160 <__FUNCTION__.17246>:
   3a160:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

0003a170 <__FUNCTION__.17258>:
   3a170:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

0003a180 <__FUNCTION__.17269>:
   3a180:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

0003a18c <__FUNCTION__.17290>:
   3a18c:	6d6e 735f 6970 695f 696e 0074 4128 5050     nm_spi_init.(APP
   3a19c:	2829 4e49 4f46 0029 4528 5252 2952 7543     )(INFO).(ERRR)Cu
   3a1ac:	7272 6e65 2074 253c 3e64 000a 000d 0000     rrent <%d>......
   3a1bc:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
   3a1cc:	206e 4449 3d20 2520 0d64 000a 6f53 6b63     n ID = %d...Sock
   3a1dc:	7420 206f 6564 656c 6574 3c20 6425 0a3e      to delete <%d>.
   3a1ec:	0000 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   3a1fc:	5d73 255b 5d64 0000 4e53 2049 7845 6563     s][%d]..SNI Exce
   3a20c:	6465 2073 614d 2078 654c 676e 6874 000a     eds Max Length..
   3a21c:	6e55 6e6b 776f 206e 5353 204c 6f53 6b63     Unknown SSL Sock
   3a22c:	7465 4f20 7470 6f69 206e 6425 000a 0000     et Option %d....
   3a23c:	6f4e 2074 5353 204c 6f53 6b63 7465 000a     Not SSL Socket..
   3a24c:	5322 2f44 4d4d 2043 6143 6472 5320 6f6c     "SD/MMC Card Slo
   3a25c:	2074 2230 0000 0000                         t 0"....

0003a264 <lun_desc>:
   3a264:	fedd 0001 ff35 0001 ff81 0001 ffcd 0001     ....5...........
   3a274:	fffd 0001 0081 0002 0111 0002 a24c 0003     ............L...
   3a284:	0800 4200 0c00 4200 1000 4200 1400 4200     ...B...B...B...B
   3a294:	1800 4200 1c00 4200 0a09 0c0b 0e0d 0000     ...B...B........
   3a2a4:	a126 0002 a1a0 0002 a1a0 0002 a144 0002     &...........D...
   3a2b4:	a13e 0002 a14a 0002 a12c 0002 a150 0002     >...J...,...P...
   3a2c4:	a186 0002 a388 0002 a3d8 0002 a3d8 0002     ................
   3a2d4:	a3d4 0002 a37a 0002 a39a 0002 a36a 0002     ....z.......j...
   3a2e4:	a3ac 0002 a3be 0002 a426 0002 a454 0002     ........&...T...
   3a2f4:	a454 0002 a450 0002 a420 0002 a42c 0002     T...P... ...,...
   3a304:	a41a 0002 a432 0002 a438 0002               ....2...8...

0003a310 <tcc_modules>:
   3a310:	2000 4200 2400 4200 2800 4200               . .B.$.B.(.B

0003a31c <_tcc_gclk_ids>:
   3a31c:	1a1a 001b                                   ....

0003a320 <_tcc_apbcmasks>:
   3a320:	0100 0000 0200 0000 0400 0000               ............

0003a32c <_tcc_maxs>:
   3a32c:	ffff 00ff ffff 00ff ffff 0000               ............

0003a338 <_tcc_cc_nums>:
   3a338:	0204 0002                                   ....

0003a33c <_tcc_ow_nums>:
   3a33c:	0408 0002                                   ....

0003a340 <_tcc_intflag>:
   3a340:	0001 0000 0002 0000 0004 0000 0008 0000     ................
   3a350:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
   3a360:	0000 0001 0000 0002 0000 0004 0000 0008     ................

0003a370 <LfnOfs>:
   3a370:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................
   3a380:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
   3a390:	5d5b 0000 feeb 4d90 4453 534f 2e35 0030     [].....MSDOS5.0.
   3a3a0:	4f4e 4e20 4d41 2045 2020 4620 5441 3233     NO NAME    FAT32
   3a3b0:	2020 0020 4f4e 4e20 4d41 2045 2020 4620        .NO NAME    F
   3a3c0:	5441 2020 2020 0020                         AT     .

0003a3c8 <excvt.4558>:
   3a3c8:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
   3a3d8:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
   3a3e8:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
   3a3f8:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
   3a408:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
   3a418:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
   3a428:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
   3a438:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................

0003a448 <Tbl>:
   3a448:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
   3a458:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
   3a468:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
   3a478:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
   3a488:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
   3a498:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
   3a4a8:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
   3a4b8:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
   3a4c8:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
   3a4d8:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
   3a4e8:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
   3a4f8:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
   3a508:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
   3a518:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
   3a528:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
   3a538:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

0003a548 <tbl_lower.4308>:
   3a548:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
   3a558:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
   3a568:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
   3a578:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
   3a588:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
   3a598:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
   3a5a8:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
   3a5b8:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
   3a5c8:	0103 0105 0107 0109 010b 010d 010f 0111     ................
   3a5d8:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
   3a5e8:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
   3a5f8:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
   3a608:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
   3a618:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
   3a628:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
   3a638:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
   3a648:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
   3a658:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
   3a668:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
   3a678:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
   3a688:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
   3a698:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
   3a6a8:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
   3a6b8:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
   3a6c8:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
   3a6d8:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
   3a6e8:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
   3a6f8:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
   3a708:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
   3a718:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

0003a728 <tbl_upper.4309>:
   3a728:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
   3a738:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
   3a748:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
   3a758:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
   3a768:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
   3a778:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
   3a788:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
   3a798:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
   3a7a8:	0102 0104 0106 0108 010a 010c 010e 0110     ................
   3a7b8:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
   3a7c8:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
   3a7d8:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
   3a7e8:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
   3a7f8:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
   3a808:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
   3a818:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
   3a828:	0393 0394 0395 0396 0397 0398 0399 039a     ................
   3a838:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
   3a848:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
   3a858:	0411 0412 0413 0414 0415 0416 0417 0418     ................
   3a868:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
   3a878:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
   3a888:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
   3a898:	0402 0403 0404 0405 0406 0407 0408 0409     ................
   3a8a8:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
   3a8b8:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
   3a8c8:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
   3a8d8:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
   3a8e8:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
   3a8f8:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
   3a908:	f792 0002 f792 0002 f792 0002 f620 0002     ............ ...
   3a918:	f792 0002 f70a 0002 f792 0002 f792 0002     ................
   3a928:	f792 0002 f792 0002 f792 0002 f792 0002     ................
   3a938:	f792 0002 f784 0002 514d 4354 0000 0000     ........MQTC....
   3a948:	0004 0000 0000 0000 0000 0000 0000 0000     ................
   3a958:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   3a998:	514d 4354 0000 0000 0004 0000 0000 0000     MQTC............
	...
   3a9b0:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   3a9f0:	514d 5454 0000 0000 514d 7349 7064 0000     MQTT....MQIsdp..
   3aa00:	7461 656d 2f6c 2e31 2e30 0032 7468 7074     atmel/1.0.2.http
   3aa10:	2f3a 002f 7468 7074 3a73 2f2f 0000 0000     ://.https://....
   3aa20:	4547 2054 0000 0000 4f50 5453 0020 0000     GET ....POST ...
   3aa30:	4544 454c 4554 0020 5550 2054 0000 0000     DELETE .PUT ....
   3aa40:	504f 4954 4e4f 2053 0000 0000 4548 4441     OPTIONS ....HEAD
   3aa50:	0020 0000 4820 5454 2f50 2e31 0d31 000a      ... HTTP/1.1...
   3aa60:	7355 7265 412d 6567 746e 203a 0000 0000     User-Agent: ....
   3aa70:	0a0d 0000 6f48 7473 203a 0000 6f43 6e6e     ....Host: ..Conn
   3aa80:	6365 6974 6e6f 203a 654b 7065 412d 696c     ection: Keep-Ali
   3aa90:	6576 0a0d 0000 0000 6341 6563 7470 452d     ve......Accept-E
   3aaa0:	636e 646f 6e69 3a67 0d20 000a 6341 6563     ncoding: ...Acce
   3aab0:	7470 432d 6168 7372 7465 203a 7475 2d66     pt-Charset: utf-
   3aac0:	0d38 000a 7254 6e61 6673 7265 452d 636e     8...Transfer-Enc
   3aad0:	646f 6e69 3a67 6320 7568 6b6e 6465 0a0d     oding: chunked..
   3aae0:	0000 0000 7525 0000 6f43 746e 6e65 2d74     ....%u..Content-
   3aaf0:	654c 676e 6874 203a 0000 0000 3130 3332     Length: ....0123
   3ab00:	3534 3736 3938 6261 6463 6665 7254 6e61     456789abcdefTran
   3ab10:	6673 7265 452d 636e 646f 6e69 3a67 0020     sfer-Encoding: .
   3ab20:	6f43 6e6e 6365 6974 6e6f 203a 0000 0000     Connection: ....
   3ab30:	5448 5054 002f 0000 0d31 0000 1886 0003     HTTP/...1.......
   3ab40:	1880 0003 187a 0003 1874 0003 188c 0003     ....z...t.......
   3ab50:	186e 0003 188c 0003 1868 0003 1862 0003     n.......h...b...
   3ab60:	188c 0003 185c 0003 185c 0003 1856 0003     ....\...\...V...
   3ab70:	1850 0003 184a 0003 2000 4200 2400 4200     P...J.... .B.$.B
   3ab80:	2800 4200 0a0d 2d2d 2d2d 452d 4553 3135     .(.B..-----ESE51
   3ab90:	2036 614d 6e69 5020 6f72 7267 6d61 2d2d     6 Main Program--
   3aba0:	2d2d 0d2d 000a 0000 0a0d 6e49 7469 6169     ---.......Initia
   3abb0:	696c 657a 4820 2e57 2e2e 0a0d 0000 0000     lize HW.........
   3abc0:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   3abd0:	676e 4920 4332 4420 6972 6576 2172 0a0d     ng I2C Driver!..
   3abe0:	0000 0000 6e49 7469 6169 696c 657a 2064     ....Initialized 
   3abf0:	3249 2043 7244 7669 7265 0d21 000a 0000     I2C Driver!.....
   3ac00:	6143 6e6e 746f 6620 6e69 2064 4d49 2155     Cannot find IMU!
   3ac10:	0a0d 0000 4d49 2055 6f66 6e75 2164 0a0d     ....IMU found!..
   3ac20:	0000 0000 4d49 2055 6e69 7469 6169 696c     ....IMU initiali
   3ac30:	657a 2164 0a0d 0000 6f43 6c75 2064 6f6e     zed!....Could no
   3ac40:	2074 6e69 7469 6169 696c 657a 4920 554d     t initialize IMU
   3ac50:	0a0d 0000 6e49 7469 6169 696c 697a 676e     ....Initializing
   3ac60:	6420 7369 6174 636e 2065 6573 736e 726f      distance sensor
   3ac70:	0a0d 0000 6944 7473 6e61 6563 7320 6e65     ....Distance sen
   3ac80:	6f73 2072 6e69 7469 6169 696c 657a 0d64     sor initialized.
   3ac90:	000a 0000 6548 7061 6220 6665 726f 2065     ....Heap before 
   3aca0:	7473 7261 6974 676e 7420 7361 736b 203a     starting tasks: 
   3acb0:	6425 0000 4c43 5f49 4154 4b53 0000 0000     %d..CLI_TASK....
   3acc0:	5245 3a52 4320 494c 7420 7361 206b 6f63     ERR: CLI task co
   3acd0:	6c75 2064 6f6e 2074 6562 6920 696e 6974     uld not be initi
   3ace0:	6c61 7a69 6465 0d21 000a 0000 6548 7061     alized!.....Heap
   3acf0:	6120 7466 7265 7320 6174 7472 6e69 2067      after starting 
   3ad00:	4c43 3a49 2520 0d64 0d0a 000a 4955 5420     CLI: %d.....UI T
   3ad10:	7361 006b 5245 3a52 5520 2049 6174 6b73     ask.ERR: UI task
   3ad20:	6320 756f 646c 6e20 746f 6220 2065 6e69      could not be in
   3ad30:	7469 6169 696c 657a 2164 0a0d 0000 0000     itialized!......
   3ad40:	6548 7061 6120 7466 7265 7320 6174 7472     Heap after start
   3ad50:	6e69 2067 4955 5420 7361 3a6b 2520 0d64     ing UI Task: %d.
   3ad60:	0d0a 000a 6f43 746e 6f72 206c 6154 6b73     ....Control Task
   3ad70:	0000 0000 5245 3a52 4320 6e6f 7274 6c6f     ....ERR: Control
   3ad80:	7420 7361 206b 6f63 6c75 2064 6f6e 2074      task could not 
   3ad90:	6562 6920 696e 6974 6c61 7a69 6465 0d21     be initialized!.
   3ada0:	000a 0000 6548 7061 6120 7466 7265 7320     ....Heap after s
   3adb0:	6174 7472 6e69 2067 6f43 746e 6f72 206c     tarting Control 
   3adc0:	6154 6b73 203a 6425 0a0d 0a0d 0000 0000     Task: %d........
   3add0:	4957 4946 545f 5341 004b 0000 5245 3a52     WIFI_TASK...ERR:
   3ade0:	5720 4649 2049 6174 6b73 6320 756f 646c      WIFI task could
   3adf0:	6e20 746f 6220 2065 6e69 7469 6169 696c      not be initiali
   3ae00:	657a 2164 0a0d 0000 6548 7061 6120 7466     zed!....Heap aft
   3ae10:	7265 7320 6174 7472 6e69 2067 4957 4946     er starting WIFI
   3ae20:	203a 6425 0a0d 0000 7245 6f72 2072 6e6f     : %d....Error on
   3ae30:	6d20 6d65 726f 2079 6c61 6f6c 6163 6974      memory allocati
   3ae40:	6e6f 6f20 206e 5246 4545 5452 534f 0d21     on on FREERTOS!.
   3ae50:	000a 0000 7245 6f72 2072 6e6f 7320 6174     ....Error on sta
   3ae60:	6b63 6f20 6576 6672 6f6c 2077 6e6f 4620     ck overflow on F
   3ae70:	4552 5245 4f54 2153 0a0d 0000 3a80 0003     REERTOS!.....:..
   3ae80:	39d0 0003 39d0 0003 39ce 0003 3a72 0003     .9...9...9..r:..
   3ae90:	3a72 0003 3a68 0003 39ce 0003 3a72 0003     r:..h:...9..r:..
   3aea0:	3a68 0003 3a72 0003 39ce 0003 3a78 0003     h:..r:...9..x:..
   3aeb0:	3a78 0003 3a78 0003 3b08 0003 448c 0003     x:..x:...;...D..
   3aec0:	446e 0003 4428 0003 4346 0003 4428 0003     nD..(D..FC..(D..
   3aed0:	4460 0003 4428 0003 4346 0003 446e 0003     `D..(D..FC..nD..
   3aee0:	446e 0003 4460 0003 4346 0003 433e 0003     nD..`D..FC..>C..
   3aef0:	433e 0003 433e 0003 46a4 0003 4aec 0003     >C..>C...F...J..
   3af00:	49ac 0003 49ac 0003 49a8 0003 4ac4 0003     .I...I...I...J..
   3af10:	4ac4 0003 4ab6 0003 49a8 0003 4ac4 0003     .J...J...I...J..
   3af20:	4ab6 0003 4ac4 0003 49a8 0003 4acc 0003     .J...J...I...J..
   3af30:	4acc 0003 4acc 0003 4cd0 0003               .J...J...L..

0003af3c <_global_impure_ptr>:
   3af3c:	0134 2000                                   4.. 

0003af40 <__sf_fake_stderr>:
	...

0003af60 <__sf_fake_stdin>:
	...

0003af80 <__sf_fake_stdout>:
	...
   3afa0:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
   3afb0:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
   3afc0:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
   3afd0:	3534 3736 3938 6261 6463 6665 0000               456789abcdef.

0003afdd <_ctype_>:
   3afdd:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   3afed:	2020 2020 2020 2020 2020 2020 2020 2020                     
   3affd:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   3b00d:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   3b01d:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   3b02d:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   3b03d:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   3b04d:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   3b05d:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0003b0e0 <_init>:
   3b0e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3b0e2:	46c0      	nop			; (mov r8, r8)
   3b0e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3b0e6:	bc08      	pop	{r3}
   3b0e8:	469e      	mov	lr, r3
   3b0ea:	4770      	bx	lr

0003b0ec <__init_array_start>:
   3b0ec:	000120dd 	.word	0x000120dd

0003b0f0 <_fini>:
   3b0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3b0f2:	46c0      	nop			; (mov r8, r8)
   3b0f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3b0f6:	bc08      	pop	{r3}
   3b0f8:	469e      	mov	lr, r3
   3b0fa:	4770      	bx	lr

0003b0fc <__fini_array_start>:
   3b0fc:	000120b5 	.word	0x000120b5
