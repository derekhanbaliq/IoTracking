
ESE516 MAIN FW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00029458  00012000  00012000  00002000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000300  20000000  0003b458  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000059e4  20000300  0003b760  00030300  2**4
                  ALLOC
  3 .stack        00002004  20005ce4  00041144  00030300  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00030300  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00030328  2**0
                  CONTENTS, READONLY
  6 .debug_info   0013a4ab  00000000  00000000  00030381  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00011741  00000000  00000000  0016a82c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000171e9  00000000  00000000  0017bf6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00003e30  00000000  00000000  00193156  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00003a60  00000000  00000000  00196f86  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00042729  00000000  00000000  0019a9e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0005fa38  00000000  00000000  001dd10f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000c4091  00000000  00000000  0023cb47  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000ea08  00000000  00000000  00300bd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00012000 <exception_table>:
   12000:	e8 7c 00 20 49 bd 02 00 41 be 02 00 41 be 02 00     .|. I...A...A...
	...
   1202c:	e1 ae 01 00 00 00 00 00 00 00 00 00 01 b0 01 00     ................
   1203c:	49 b0 01 00 41 be 02 00 41 be 02 00 41 be 02 00     I...A...A...A...
   1204c:	99 7e 02 00 c5 73 02 00 41 be 02 00 61 35 01 00     .~...s..A...a5..
   1205c:	41 be 02 00 a5 36 01 00 3d 85 02 00 55 85 02 00     A....6..=...U...
   1206c:	6d 85 02 00 85 85 02 00 9d 85 02 00 b5 85 02 00     m...............
   1207c:	91 bc 02 00 a5 bc 02 00 b9 bc 02 00 cd 8b 01 00     ................
   1208c:	e1 8b 01 00 f5 8b 01 00 00 00 00 00 00 00 00 00     ................
   1209c:	e9 33 01 00 41 be 02 00 25 35 01 00 41 be 02 00     .3..A...%5..A...
   120ac:	41 be 02 00 00 00 00 00                             A.......

000120b4 <__do_global_dtors_aux>:
   120b4:	b510      	push	{r4, lr}
   120b6:	4c06      	ldr	r4, [pc, #24]	; (120d0 <__do_global_dtors_aux+0x1c>)
   120b8:	7823      	ldrb	r3, [r4, #0]
   120ba:	2b00      	cmp	r3, #0
   120bc:	d107      	bne.n	120ce <__do_global_dtors_aux+0x1a>
   120be:	4b05      	ldr	r3, [pc, #20]	; (120d4 <__do_global_dtors_aux+0x20>)
   120c0:	2b00      	cmp	r3, #0
   120c2:	d002      	beq.n	120ca <__do_global_dtors_aux+0x16>
   120c4:	4804      	ldr	r0, [pc, #16]	; (120d8 <__do_global_dtors_aux+0x24>)
   120c6:	e000      	b.n	120ca <__do_global_dtors_aux+0x16>
   120c8:	bf00      	nop
   120ca:	2301      	movs	r3, #1
   120cc:	7023      	strb	r3, [r4, #0]
   120ce:	bd10      	pop	{r4, pc}
   120d0:	20000300 	.word	0x20000300
   120d4:	00000000 	.word	0x00000000
   120d8:	0003b458 	.word	0x0003b458

000120dc <frame_dummy>:
   120dc:	4b08      	ldr	r3, [pc, #32]	; (12100 <frame_dummy+0x24>)
   120de:	b510      	push	{r4, lr}
   120e0:	2b00      	cmp	r3, #0
   120e2:	d003      	beq.n	120ec <frame_dummy+0x10>
   120e4:	4907      	ldr	r1, [pc, #28]	; (12104 <frame_dummy+0x28>)
   120e6:	4808      	ldr	r0, [pc, #32]	; (12108 <frame_dummy+0x2c>)
   120e8:	e000      	b.n	120ec <frame_dummy+0x10>
   120ea:	bf00      	nop
   120ec:	4807      	ldr	r0, [pc, #28]	; (1210c <frame_dummy+0x30>)
   120ee:	6803      	ldr	r3, [r0, #0]
   120f0:	2b00      	cmp	r3, #0
   120f2:	d100      	bne.n	120f6 <frame_dummy+0x1a>
   120f4:	bd10      	pop	{r4, pc}
   120f6:	4b06      	ldr	r3, [pc, #24]	; (12110 <frame_dummy+0x34>)
   120f8:	2b00      	cmp	r3, #0
   120fa:	d0fb      	beq.n	120f4 <frame_dummy+0x18>
   120fc:	4798      	blx	r3
   120fe:	e7f9      	b.n	120f4 <frame_dummy+0x18>
   12100:	00000000 	.word	0x00000000
   12104:	20000304 	.word	0x20000304
   12108:	0003b458 	.word	0x0003b458
   1210c:	0003b458 	.word	0x0003b458
   12110:	00000000 	.word	0x00000000

00012114 <ssd1306_hard_reset>:
 * \brief Perform a hard reset of the OLED controller
 *
 * This functions will reset the OLED controller by setting the reset pin low.
 */
static inline void ssd1306_hard_reset(void)
{
   12114:	b580      	push	{r7, lr}
   12116:	af00      	add	r7, sp, #0
	/*uint32_t delay_10us = 10 * (system_gclk_gen_get_hz(0)/1000000);
	port_pin_set_output_level(SSD1306_RES_PIN, false);
	delay_cycles(delay_10us); // At lest 10us
	port_pin_set_output_level(SSD1306_RES_PIN, true);
	delay_cycles(delay_10us); // At lest 10us*/
}
   12118:	46c0      	nop			; (mov r8, r8)
   1211a:	46bd      	mov	sp, r7
   1211c:	bd80      	pop	{r7, pc}

0001211e <ssd1306_interface_init>:
 *
 * Depending on what interface used for interfacing the OLED controller this
 * function will initialize the necessary hardware.
 */
static void ssd1306_interface_init(void)
{
   1211e:	b580      	push	{r7, lr}
   12120:	af00      	add	r7, sp, #0

}
   12122:	46c0      	nop			; (mov r8, r8)
   12124:	46bd      	mov	sp, r7
   12126:	bd80      	pop	{r7, pc}

00012128 <ssd1306_init>:
 * Call this function to initialize the hardware interface and the OLED
 * controller. When initialization is done the display is turned on and ready
 * to receive data.
 */
void ssd1306_init(void)
{
   12128:	b580      	push	{r7, lr}
   1212a:	af00      	add	r7, sp, #0


	// Initialize the interface
	ssd1306_interface_init();
   1212c:	4b25      	ldr	r3, [pc, #148]	; (121c4 <ssd1306_init+0x9c>)
   1212e:	4798      	blx	r3

	// Do a hard reset of the OLED display controller
	ssd1306_hard_reset();
   12130:	4b25      	ldr	r3, [pc, #148]	; (121c8 <ssd1306_init+0xa0>)
   12132:	4798      	blx	r3

	// Set the reset pin to the default state
	//port_pin_set_output_level(SSD1306_RES_PIN, true);
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFF); //0xAE
   12134:	20ae      	movs	r0, #174	; 0xae
   12136:	4b25      	ldr	r3, [pc, #148]	; (121cc <ssd1306_init+0xa4>)
   12138:	4798      	blx	r3
	
	// Set Display Clock Divide Ratio / Oscillator Frequency (Default => 0x80)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_CLOCK_DIVIDE_RATIO); //0XD5
   1213a:	20d5      	movs	r0, #213	; 0xd5
   1213c:	4b23      	ldr	r3, [pc, #140]	; (121cc <ssd1306_init+0xa4>)
   1213e:	4798      	blx	r3
	ssd1306_write_command(0x80);
   12140:	2080      	movs	r0, #128	; 0x80
   12142:	4b22      	ldr	r3, [pc, #136]	; (121cc <ssd1306_init+0xa4>)
   12144:	4798      	blx	r3
	
	
	// 1/32 Duty (0x0F~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_MULTIPLEX_RATIO); //0XA8
   12146:	20a8      	movs	r0, #168	; 0xa8
   12148:	4b20      	ldr	r3, [pc, #128]	; (121cc <ssd1306_init+0xa4>)
   1214a:	4798      	blx	r3
	ssd1306_write_command(0x2F); //2F
   1214c:	202f      	movs	r0, #47	; 0x2f
   1214e:	4b1f      	ldr	r3, [pc, #124]	; (121cc <ssd1306_init+0xa4>)
   12150:	4798      	blx	r3
	
	// Shift Mapping RAM Counter (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_OFFSET); //D3
   12152:	20d3      	movs	r0, #211	; 0xd3
   12154:	4b1d      	ldr	r3, [pc, #116]	; (121cc <ssd1306_init+0xa4>)
   12156:	4798      	blx	r3
	ssd1306_write_command(0x00);
   12158:	2000      	movs	r0, #0
   1215a:	4b1c      	ldr	r3, [pc, #112]	; (121cc <ssd1306_init+0xa4>)
   1215c:	4798      	blx	r3
	
	// Set Mapping RAM Display Start Line (0x00~0x3F)
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(0x00));	
   1215e:	2040      	movs	r0, #64	; 0x40
   12160:	4b1a      	ldr	r3, [pc, #104]	; (121cc <ssd1306_init+0xa4>)
   12162:	4798      	blx	r3
	
	// Enable charge pump regulator
	ssd1306_write_command(SSD1306_CMD_SET_CHARGE_PUMP_SETTING); //8D
   12164:	208d      	movs	r0, #141	; 0x8d
   12166:	4b19      	ldr	r3, [pc, #100]	; (121cc <ssd1306_init+0xa4>)
   12168:	4798      	blx	r3
	ssd1306_write_command(0x14);
   1216a:	2014      	movs	r0, #20
   1216c:	4b17      	ldr	r3, [pc, #92]	; (121cc <ssd1306_init+0xa4>)
   1216e:	4798      	blx	r3

	ssd1306_write_command(SSD1306_CMD_SET_NORMAL_DISPLAY); //A6
   12170:	20a6      	movs	r0, #166	; 0xa6
   12172:	4b16      	ldr	r3, [pc, #88]	; (121cc <ssd1306_init+0xa4>)
   12174:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_ENTIRE_DISPLAY_AND_GDDRAM_ON); //0xA4
   12176:	20a4      	movs	r0, #164	; 0xa4
   12178:	4b14      	ldr	r3, [pc, #80]	; (121cc <ssd1306_init+0xa4>)
   1217a:	4798      	blx	r3
		
	ssd1306_write_command(SSD1306_CMD_SET_SEGMENT_RE_MAP_COL0_SEG0| 0x1); //0xA0
   1217c:	20a1      	movs	r0, #161	; 0xa1
   1217e:	4b13      	ldr	r3, [pc, #76]	; (121cc <ssd1306_init+0xa4>)
   12180:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_SET_COM_OUTPUT_SCAN_DOWN); //0xC8
   12182:	20c8      	movs	r0, #200	; 0xc8
   12184:	4b11      	ldr	r3, [pc, #68]	; (121cc <ssd1306_init+0xa4>)
   12186:	4798      	blx	r3
	
	// Set COM Pins hardware configuration
	ssd1306_write_command(SSD1306_CMD_SET_COM_PINS); //0xDA
   12188:	20da      	movs	r0, #218	; 0xda
   1218a:	4b10      	ldr	r3, [pc, #64]	; (121cc <ssd1306_init+0xa4>)
   1218c:	4798      	blx	r3
	ssd1306_write_command(0x12);
   1218e:	2012      	movs	r0, #18
   12190:	4b0e      	ldr	r3, [pc, #56]	; (121cc <ssd1306_init+0xa4>)
   12192:	4798      	blx	r3
		
	ssd1306_write_command(SSD1306_CMD_SET_CONTRAST_CONTROL_FOR_BANK0); //0x81
   12194:	2081      	movs	r0, #129	; 0x81
   12196:	4b0d      	ldr	r3, [pc, #52]	; (121cc <ssd1306_init+0xa4>)
   12198:	4798      	blx	r3
	ssd1306_write_command(0x8F);
   1219a:	208f      	movs	r0, #143	; 0x8f
   1219c:	4b0b      	ldr	r3, [pc, #44]	; (121cc <ssd1306_init+0xa4>)
   1219e:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_PRE_CHARGE_PERIOD); //0xD9
   121a0:	20d9      	movs	r0, #217	; 0xd9
   121a2:	4b0a      	ldr	r3, [pc, #40]	; (121cc <ssd1306_init+0xa4>)
   121a4:	4798      	blx	r3
	ssd1306_write_command(0xF1);	
   121a6:	20f1      	movs	r0, #241	; 0xf1
   121a8:	4b08      	ldr	r3, [pc, #32]	; (121cc <ssd1306_init+0xa4>)
   121aa:	4798      	blx	r3
	
	ssd1306_write_command(SSD1306_CMD_SET_VCOMH_DESELECT_LEVEL); //DB
   121ac:	20db      	movs	r0, #219	; 0xdb
   121ae:	4b07      	ldr	r3, [pc, #28]	; (121cc <ssd1306_init+0xa4>)
   121b0:	4798      	blx	r3
	ssd1306_write_command(0x40);
   121b2:	2040      	movs	r0, #64	; 0x40
   121b4:	4b05      	ldr	r3, [pc, #20]	; (121cc <ssd1306_init+0xa4>)
   121b6:	4798      	blx	r3

	
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_ON);
   121b8:	20af      	movs	r0, #175	; 0xaf
   121ba:	4b04      	ldr	r3, [pc, #16]	; (121cc <ssd1306_init+0xa4>)
   121bc:	4798      	blx	r3

}
   121be:	46c0      	nop			; (mov r8, r8)
   121c0:	46bd      	mov	sp, r7
   121c2:	bd80      	pop	{r7, pc}
   121c4:	0001211f 	.word	0x0001211f
   121c8:	00012115 	.word	0x00012115
   121cc:	000121d1 	.word	0x000121d1

000121d0 <ssd1306_write_command>:
 * \param command the command to write
 */


void ssd1306_write_command(uint8_t command)
{
   121d0:	b580      	push	{r7, lr}
   121d2:	b084      	sub	sp, #16
   121d4:	af00      	add	r7, sp, #0
   121d6:	0002      	movs	r2, r0
   121d8:	1dfb      	adds	r3, r7, #7
   121da:	701a      	strb	r2, [r3, #0]
	//Send 0 command byte
	uint8_t data[2];
	data[0] = I2C_COMMAND_SSD1306;
   121dc:	230c      	movs	r3, #12
   121de:	18fb      	adds	r3, r7, r3
   121e0:	2200      	movs	r2, #0
   121e2:	701a      	strb	r2, [r3, #0]
	data[1] = command;
   121e4:	230c      	movs	r3, #12
   121e6:	18fb      	adds	r3, r7, r3
   121e8:	1dfa      	adds	r2, r7, #7
   121ea:	7812      	ldrb	r2, [r2, #0]
   121ec:	705a      	strb	r2, [r3, #1]
	i2cOled.address = SSD1306_I2C_ADDRESS;
   121ee:	4b0c      	ldr	r3, [pc, #48]	; (12220 <ssd1306_write_command+0x50>)
   121f0:	223d      	movs	r2, #61	; 0x3d
   121f2:	701a      	strb	r2, [r3, #0]
	i2cOled.msgOut = (const uint8_t*) &data[0];
   121f4:	4b0a      	ldr	r3, [pc, #40]	; (12220 <ssd1306_write_command+0x50>)
   121f6:	220c      	movs	r2, #12
   121f8:	18ba      	adds	r2, r7, r2
   121fa:	605a      	str	r2, [r3, #4]
	i2cOled.lenOut = sizeof(data);
   121fc:	4b08      	ldr	r3, [pc, #32]	; (12220 <ssd1306_write_command+0x50>)
   121fe:	2202      	movs	r2, #2
   12200:	81da      	strh	r2, [r3, #14]
	i2cOled.msgIn = 0;
   12202:	4b07      	ldr	r3, [pc, #28]	; (12220 <ssd1306_write_command+0x50>)
   12204:	2200      	movs	r2, #0
   12206:	609a      	str	r2, [r3, #8]
	i2cOled.lenIn = 0;
   12208:	4b05      	ldr	r3, [pc, #20]	; (12220 <ssd1306_write_command+0x50>)
   1220a:	2200      	movs	r2, #0
   1220c:	819a      	strh	r2, [r3, #12]
	
	I2cWriteDataWait(&i2cOled, 100);
   1220e:	4b04      	ldr	r3, [pc, #16]	; (12220 <ssd1306_write_command+0x50>)
   12210:	2164      	movs	r1, #100	; 0x64
   12212:	0018      	movs	r0, r3
   12214:	4b03      	ldr	r3, [pc, #12]	; (12224 <ssd1306_write_command+0x54>)
   12216:	4798      	blx	r3
}
   12218:	46c0      	nop			; (mov r8, r8)
   1221a:	46bd      	mov	sp, r7
   1221c:	b004      	add	sp, #16
   1221e:	bd80      	pop	{r7, pc}
   12220:	2000476c 	.word	0x2000476c
   12224:	00015105 	.word	0x00015105

00012228 <ssd1306_write_data>:
 * data write function is called based on the selected interface.
 *
 * \param data the data to write
 */
void ssd1306_write_data(uint8_t data)
{
   12228:	b580      	push	{r7, lr}
   1222a:	b084      	sub	sp, #16
   1222c:	af00      	add	r7, sp, #0
   1222e:	0002      	movs	r2, r0
   12230:	1dfb      	adds	r3, r7, #7
   12232:	701a      	strb	r2, [r3, #0]
	uint8_t msg[2];
	msg[0] = I2C_DATA_SSD1306;
   12234:	230c      	movs	r3, #12
   12236:	18fb      	adds	r3, r7, r3
   12238:	2240      	movs	r2, #64	; 0x40
   1223a:	701a      	strb	r2, [r3, #0]
	msg[1] = data;
   1223c:	230c      	movs	r3, #12
   1223e:	18fb      	adds	r3, r7, r3
   12240:	1dfa      	adds	r2, r7, #7
   12242:	7812      	ldrb	r2, [r2, #0]
   12244:	705a      	strb	r2, [r3, #1]
	i2cOled.address = SSD1306_I2C_ADDRESS;
   12246:	4b0c      	ldr	r3, [pc, #48]	; (12278 <ssd1306_write_data+0x50>)
   12248:	223d      	movs	r2, #61	; 0x3d
   1224a:	701a      	strb	r2, [r3, #0]
	i2cOled.msgOut = (const uint8_t*) &msg[0];
   1224c:	4b0a      	ldr	r3, [pc, #40]	; (12278 <ssd1306_write_data+0x50>)
   1224e:	220c      	movs	r2, #12
   12250:	18ba      	adds	r2, r7, r2
   12252:	605a      	str	r2, [r3, #4]
	i2cOled.lenOut = sizeof(msg);
   12254:	4b08      	ldr	r3, [pc, #32]	; (12278 <ssd1306_write_data+0x50>)
   12256:	2202      	movs	r2, #2
   12258:	81da      	strh	r2, [r3, #14]
	i2cOled.msgIn = 0;
   1225a:	4b07      	ldr	r3, [pc, #28]	; (12278 <ssd1306_write_data+0x50>)
   1225c:	2200      	movs	r2, #0
   1225e:	609a      	str	r2, [r3, #8]
	i2cOled.lenIn = 0;
   12260:	4b05      	ldr	r3, [pc, #20]	; (12278 <ssd1306_write_data+0x50>)
   12262:	2200      	movs	r2, #0
   12264:	819a      	strh	r2, [r3, #12]
	
	I2cWriteDataWait(&i2cOled, 100);
   12266:	4b04      	ldr	r3, [pc, #16]	; (12278 <ssd1306_write_data+0x50>)
   12268:	2164      	movs	r1, #100	; 0x64
   1226a:	0018      	movs	r0, r3
   1226c:	4b03      	ldr	r3, [pc, #12]	; (1227c <ssd1306_write_data+0x54>)
   1226e:	4798      	blx	r3
}
   12270:	46c0      	nop			; (mov r8, r8)
   12272:	46bd      	mov	sp, r7
   12274:	b004      	add	sp, #16
   12276:	bd80      	pop	{r7, pc}
   12278:	2000476c 	.word	0x2000476c
   1227c:	00015105 	.word	0x00015105

00012280 <gfx_mono_set_framebuffer>:
	uint8_t framebuffer[FRAMEBUFFER_SIZE];
	gfx_mono_set_framebuffer(framebuffer);
\endcode
 */
void gfx_mono_set_framebuffer(uint8_t *framebuffer)
{
   12280:	b580      	push	{r7, lr}
   12282:	b082      	sub	sp, #8
   12284:	af00      	add	r7, sp, #0
   12286:	6078      	str	r0, [r7, #4]
	fbpointer = framebuffer;
   12288:	4b03      	ldr	r3, [pc, #12]	; (12298 <gfx_mono_set_framebuffer+0x18>)
   1228a:	687a      	ldr	r2, [r7, #4]
   1228c:	601a      	str	r2, [r3, #0]
}
   1228e:	46c0      	nop			; (mov r8, r8)
   12290:	46bd      	mov	sp, r7
   12292:	b002      	add	sp, #8
   12294:	bd80      	pop	{r7, pc}
   12296:	46c0      	nop			; (mov r8, r8)
   12298:	2000031c 	.word	0x2000031c

0001229c <gfx_mono_framebuffer_put_byte>:
	gfx_mono_framebuffer_put_byte(0, 0, 0xFF);
\endcode
 */
void gfx_mono_framebuffer_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data)
{
   1229c:	b590      	push	{r4, r7, lr}
   1229e:	b083      	sub	sp, #12
   122a0:	af00      	add	r7, sp, #0
   122a2:	0004      	movs	r4, r0
   122a4:	0008      	movs	r0, r1
   122a6:	0011      	movs	r1, r2
   122a8:	1dfb      	adds	r3, r7, #7
   122aa:	1c22      	adds	r2, r4, #0
   122ac:	701a      	strb	r2, [r3, #0]
   122ae:	1dbb      	adds	r3, r7, #6
   122b0:	1c02      	adds	r2, r0, #0
   122b2:	701a      	strb	r2, [r3, #0]
   122b4:	1d7b      	adds	r3, r7, #5
   122b6:	1c0a      	adds	r2, r1, #0
   122b8:	701a      	strb	r2, [r3, #0]
	*(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column) = data;
   122ba:	4b08      	ldr	r3, [pc, #32]	; (122dc <gfx_mono_framebuffer_put_byte+0x40>)
   122bc:	681a      	ldr	r2, [r3, #0]
   122be:	1dfb      	adds	r3, r7, #7
   122c0:	781b      	ldrb	r3, [r3, #0]
   122c2:	019b      	lsls	r3, r3, #6
   122c4:	0019      	movs	r1, r3
   122c6:	1dbb      	adds	r3, r7, #6
   122c8:	781b      	ldrb	r3, [r3, #0]
   122ca:	18cb      	adds	r3, r1, r3
   122cc:	18d3      	adds	r3, r2, r3
   122ce:	1d7a      	adds	r2, r7, #5
   122d0:	7812      	ldrb	r2, [r2, #0]
   122d2:	701a      	strb	r2, [r3, #0]
}
   122d4:	46c0      	nop			; (mov r8, r8)
   122d6:	46bd      	mov	sp, r7
   122d8:	b003      	add	sp, #12
   122da:	bd90      	pop	{r4, r7, pc}
   122dc:	2000031c 	.word	0x2000031c

000122e0 <gfx_mono_framebuffer_get_byte>:
 * \code
	data = gfx_mono_framebuffer_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_framebuffer_get_byte(gfx_coord_t page, gfx_coord_t column)
{
   122e0:	b580      	push	{r7, lr}
   122e2:	b082      	sub	sp, #8
   122e4:	af00      	add	r7, sp, #0
   122e6:	0002      	movs	r2, r0
   122e8:	1dfb      	adds	r3, r7, #7
   122ea:	701a      	strb	r2, [r3, #0]
   122ec:	1dbb      	adds	r3, r7, #6
   122ee:	1c0a      	adds	r2, r1, #0
   122f0:	701a      	strb	r2, [r3, #0]
	return *(fbpointer + (page * GFX_MONO_LCD_WIDTH) + column);
   122f2:	4b07      	ldr	r3, [pc, #28]	; (12310 <gfx_mono_framebuffer_get_byte+0x30>)
   122f4:	681a      	ldr	r2, [r3, #0]
   122f6:	1dfb      	adds	r3, r7, #7
   122f8:	781b      	ldrb	r3, [r3, #0]
   122fa:	019b      	lsls	r3, r3, #6
   122fc:	0019      	movs	r1, r3
   122fe:	1dbb      	adds	r3, r7, #6
   12300:	781b      	ldrb	r3, [r3, #0]
   12302:	18cb      	adds	r3, r1, r3
   12304:	18d3      	adds	r3, r2, r3
   12306:	781b      	ldrb	r3, [r3, #0]
}
   12308:	0018      	movs	r0, r3
   1230a:	46bd      	mov	sp, r7
   1230c:	b002      	add	sp, #8
   1230e:	bd80      	pop	{r7, pc}
   12310:	2000031c 	.word	0x2000031c

00012314 <gfx_mono_generic_draw_horizontal_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_horizontal_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
   12314:	b5b0      	push	{r4, r5, r7, lr}
   12316:	b084      	sub	sp, #16
   12318:	af00      	add	r7, sp, #0
   1231a:	0005      	movs	r5, r0
   1231c:	000c      	movs	r4, r1
   1231e:	0010      	movs	r0, r2
   12320:	0019      	movs	r1, r3
   12322:	1dfb      	adds	r3, r7, #7
   12324:	1c2a      	adds	r2, r5, #0
   12326:	701a      	strb	r2, [r3, #0]
   12328:	1dbb      	adds	r3, r7, #6
   1232a:	1c22      	adds	r2, r4, #0
   1232c:	701a      	strb	r2, [r3, #0]
   1232e:	1d7b      	adds	r3, r7, #5
   12330:	1c02      	adds	r2, r0, #0
   12332:	701a      	strb	r2, [r3, #0]
   12334:	1d3b      	adds	r3, r7, #4
   12336:	1c0a      	adds	r2, r1, #0
   12338:	701a      	strb	r2, [r3, #0]
	uint8_t page;
	uint8_t pixelmask;
	uint8_t temp;

	/* Clip line length if too long */
	if (x + length > GFX_MONO_LCD_WIDTH) {
   1233a:	1dfb      	adds	r3, r7, #7
   1233c:	781a      	ldrb	r2, [r3, #0]
   1233e:	1d7b      	adds	r3, r7, #5
   12340:	781b      	ldrb	r3, [r3, #0]
   12342:	18d3      	adds	r3, r2, r3
   12344:	2b40      	cmp	r3, #64	; 0x40
   12346:	dd05      	ble.n	12354 <gfx_mono_generic_draw_horizontal_line+0x40>
		length = GFX_MONO_LCD_WIDTH - x;
   12348:	1d7b      	adds	r3, r7, #5
   1234a:	1dfa      	adds	r2, r7, #7
   1234c:	7812      	ldrb	r2, [r2, #0]
   1234e:	2140      	movs	r1, #64	; 0x40
   12350:	1a8a      	subs	r2, r1, r2
   12352:	701a      	strb	r2, [r3, #0]
	}

	page = y / 8;
   12354:	230f      	movs	r3, #15
   12356:	18fb      	adds	r3, r7, r3
   12358:	1dba      	adds	r2, r7, #6
   1235a:	7812      	ldrb	r2, [r2, #0]
   1235c:	08d2      	lsrs	r2, r2, #3
   1235e:	701a      	strb	r2, [r3, #0]
	pixelmask = (1 << (y - (page * 8)));
   12360:	1dbb      	adds	r3, r7, #6
   12362:	781a      	ldrb	r2, [r3, #0]
   12364:	230f      	movs	r3, #15
   12366:	18fb      	adds	r3, r7, r3
   12368:	781b      	ldrb	r3, [r3, #0]
   1236a:	00db      	lsls	r3, r3, #3
   1236c:	1ad3      	subs	r3, r2, r3
   1236e:	2201      	movs	r2, #1
   12370:	409a      	lsls	r2, r3
   12372:	230e      	movs	r3, #14
   12374:	18fb      	adds	r3, r7, r3
   12376:	701a      	strb	r2, [r3, #0]

	if (length == 0) {
   12378:	1d7b      	adds	r3, r7, #5
   1237a:	781b      	ldrb	r3, [r3, #0]
   1237c:	2b00      	cmp	r3, #0
   1237e:	d100      	bne.n	12382 <gfx_mono_generic_draw_horizontal_line+0x6e>
   12380:	e0a4      	b.n	124cc <gfx_mono_generic_draw_horizontal_line+0x1b8>
		/* Nothing to do. Move along. */
		return;
	}

	switch (color) {
   12382:	1d3b      	adds	r3, r7, #4
   12384:	781b      	ldrb	r3, [r3, #0]
   12386:	2b01      	cmp	r3, #1
   12388:	d02f      	beq.n	123ea <gfx_mono_generic_draw_horizontal_line+0xd6>
   1238a:	2b02      	cmp	r3, #2
   1238c:	d100      	bne.n	12390 <gfx_mono_generic_draw_horizontal_line+0x7c>
   1238e:	e095      	b.n	124bc <gfx_mono_generic_draw_horizontal_line+0x1a8>
   12390:	2b00      	cmp	r3, #0
   12392:	d061      	beq.n	12458 <gfx_mono_generic_draw_horizontal_line+0x144>
			gfx_mono_put_byte(page, x + length, temp);
		}
		break;

	default:
		break;
   12394:	e09b      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
			temp = gfx_mono_get_byte(page, x + length);
   12396:	1dfa      	adds	r2, r7, #7
   12398:	1d7b      	adds	r3, r7, #5
   1239a:	7812      	ldrb	r2, [r2, #0]
   1239c:	781b      	ldrb	r3, [r3, #0]
   1239e:	18d3      	adds	r3, r2, r3
   123a0:	b2da      	uxtb	r2, r3
   123a2:	230d      	movs	r3, #13
   123a4:	18fc      	adds	r4, r7, r3
   123a6:	230f      	movs	r3, #15
   123a8:	18fb      	adds	r3, r7, r3
   123aa:	781b      	ldrb	r3, [r3, #0]
   123ac:	0011      	movs	r1, r2
   123ae:	0018      	movs	r0, r3
   123b0:	4b48      	ldr	r3, [pc, #288]	; (124d4 <gfx_mono_generic_draw_horizontal_line+0x1c0>)
   123b2:	4798      	blx	r3
   123b4:	0003      	movs	r3, r0
   123b6:	7023      	strb	r3, [r4, #0]
			temp |= pixelmask;
   123b8:	230d      	movs	r3, #13
   123ba:	18fb      	adds	r3, r7, r3
   123bc:	220d      	movs	r2, #13
   123be:	18b9      	adds	r1, r7, r2
   123c0:	220e      	movs	r2, #14
   123c2:	18ba      	adds	r2, r7, r2
   123c4:	7809      	ldrb	r1, [r1, #0]
   123c6:	7812      	ldrb	r2, [r2, #0]
   123c8:	430a      	orrs	r2, r1
   123ca:	701a      	strb	r2, [r3, #0]
			gfx_mono_put_byte(page, x + length, temp);
   123cc:	1dfa      	adds	r2, r7, #7
   123ce:	1d7b      	adds	r3, r7, #5
   123d0:	7812      	ldrb	r2, [r2, #0]
   123d2:	781b      	ldrb	r3, [r3, #0]
   123d4:	18d3      	adds	r3, r2, r3
   123d6:	b2d9      	uxtb	r1, r3
   123d8:	230d      	movs	r3, #13
   123da:	18fb      	adds	r3, r7, r3
   123dc:	781a      	ldrb	r2, [r3, #0]
   123de:	230f      	movs	r3, #15
   123e0:	18fb      	adds	r3, r7, r3
   123e2:	7818      	ldrb	r0, [r3, #0]
   123e4:	2300      	movs	r3, #0
   123e6:	4c3c      	ldr	r4, [pc, #240]	; (124d8 <gfx_mono_generic_draw_horizontal_line+0x1c4>)
   123e8:	47a0      	blx	r4
		while (length-- > 0) {
   123ea:	1d7b      	adds	r3, r7, #5
   123ec:	781b      	ldrb	r3, [r3, #0]
   123ee:	1d7a      	adds	r2, r7, #5
   123f0:	1e59      	subs	r1, r3, #1
   123f2:	7011      	strb	r1, [r2, #0]
   123f4:	2b00      	cmp	r3, #0
   123f6:	d1ce      	bne.n	12396 <gfx_mono_generic_draw_horizontal_line+0x82>
		break;
   123f8:	e069      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
			temp = gfx_mono_get_byte(page, x + length);
   123fa:	1dfa      	adds	r2, r7, #7
   123fc:	1d7b      	adds	r3, r7, #5
   123fe:	7812      	ldrb	r2, [r2, #0]
   12400:	781b      	ldrb	r3, [r3, #0]
   12402:	18d3      	adds	r3, r2, r3
   12404:	b2da      	uxtb	r2, r3
   12406:	230d      	movs	r3, #13
   12408:	18fc      	adds	r4, r7, r3
   1240a:	230f      	movs	r3, #15
   1240c:	18fb      	adds	r3, r7, r3
   1240e:	781b      	ldrb	r3, [r3, #0]
   12410:	0011      	movs	r1, r2
   12412:	0018      	movs	r0, r3
   12414:	4b2f      	ldr	r3, [pc, #188]	; (124d4 <gfx_mono_generic_draw_horizontal_line+0x1c0>)
   12416:	4798      	blx	r3
   12418:	0003      	movs	r3, r0
   1241a:	7023      	strb	r3, [r4, #0]
			temp &= ~pixelmask;
   1241c:	230e      	movs	r3, #14
   1241e:	18fb      	adds	r3, r7, r3
   12420:	781b      	ldrb	r3, [r3, #0]
   12422:	b25b      	sxtb	r3, r3
   12424:	43db      	mvns	r3, r3
   12426:	b25b      	sxtb	r3, r3
   12428:	220d      	movs	r2, #13
   1242a:	18ba      	adds	r2, r7, r2
   1242c:	7812      	ldrb	r2, [r2, #0]
   1242e:	b252      	sxtb	r2, r2
   12430:	4013      	ands	r3, r2
   12432:	b25a      	sxtb	r2, r3
   12434:	230d      	movs	r3, #13
   12436:	18fb      	adds	r3, r7, r3
   12438:	701a      	strb	r2, [r3, #0]
			gfx_mono_put_byte(page, x + length, temp);
   1243a:	1dfa      	adds	r2, r7, #7
   1243c:	1d7b      	adds	r3, r7, #5
   1243e:	7812      	ldrb	r2, [r2, #0]
   12440:	781b      	ldrb	r3, [r3, #0]
   12442:	18d3      	adds	r3, r2, r3
   12444:	b2d9      	uxtb	r1, r3
   12446:	230d      	movs	r3, #13
   12448:	18fb      	adds	r3, r7, r3
   1244a:	781a      	ldrb	r2, [r3, #0]
   1244c:	230f      	movs	r3, #15
   1244e:	18fb      	adds	r3, r7, r3
   12450:	7818      	ldrb	r0, [r3, #0]
   12452:	2300      	movs	r3, #0
   12454:	4c20      	ldr	r4, [pc, #128]	; (124d8 <gfx_mono_generic_draw_horizontal_line+0x1c4>)
   12456:	47a0      	blx	r4
		while (length-- > 0) {
   12458:	1d7b      	adds	r3, r7, #5
   1245a:	781b      	ldrb	r3, [r3, #0]
   1245c:	1d7a      	adds	r2, r7, #5
   1245e:	1e59      	subs	r1, r3, #1
   12460:	7011      	strb	r1, [r2, #0]
   12462:	2b00      	cmp	r3, #0
   12464:	d1c9      	bne.n	123fa <gfx_mono_generic_draw_horizontal_line+0xe6>
		break;
   12466:	e032      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
			temp = gfx_mono_get_byte(page, x + length);
   12468:	1dfa      	adds	r2, r7, #7
   1246a:	1d7b      	adds	r3, r7, #5
   1246c:	7812      	ldrb	r2, [r2, #0]
   1246e:	781b      	ldrb	r3, [r3, #0]
   12470:	18d3      	adds	r3, r2, r3
   12472:	b2da      	uxtb	r2, r3
   12474:	230d      	movs	r3, #13
   12476:	18fc      	adds	r4, r7, r3
   12478:	230f      	movs	r3, #15
   1247a:	18fb      	adds	r3, r7, r3
   1247c:	781b      	ldrb	r3, [r3, #0]
   1247e:	0011      	movs	r1, r2
   12480:	0018      	movs	r0, r3
   12482:	4b14      	ldr	r3, [pc, #80]	; (124d4 <gfx_mono_generic_draw_horizontal_line+0x1c0>)
   12484:	4798      	blx	r3
   12486:	0003      	movs	r3, r0
   12488:	7023      	strb	r3, [r4, #0]
			temp ^= pixelmask;
   1248a:	230d      	movs	r3, #13
   1248c:	18fb      	adds	r3, r7, r3
   1248e:	220d      	movs	r2, #13
   12490:	18b9      	adds	r1, r7, r2
   12492:	220e      	movs	r2, #14
   12494:	18ba      	adds	r2, r7, r2
   12496:	7809      	ldrb	r1, [r1, #0]
   12498:	7812      	ldrb	r2, [r2, #0]
   1249a:	404a      	eors	r2, r1
   1249c:	701a      	strb	r2, [r3, #0]
			gfx_mono_put_byte(page, x + length, temp);
   1249e:	1dfa      	adds	r2, r7, #7
   124a0:	1d7b      	adds	r3, r7, #5
   124a2:	7812      	ldrb	r2, [r2, #0]
   124a4:	781b      	ldrb	r3, [r3, #0]
   124a6:	18d3      	adds	r3, r2, r3
   124a8:	b2d9      	uxtb	r1, r3
   124aa:	230d      	movs	r3, #13
   124ac:	18fb      	adds	r3, r7, r3
   124ae:	781a      	ldrb	r2, [r3, #0]
   124b0:	230f      	movs	r3, #15
   124b2:	18fb      	adds	r3, r7, r3
   124b4:	7818      	ldrb	r0, [r3, #0]
   124b6:	2300      	movs	r3, #0
   124b8:	4c07      	ldr	r4, [pc, #28]	; (124d8 <gfx_mono_generic_draw_horizontal_line+0x1c4>)
   124ba:	47a0      	blx	r4
		while (length-- > 0) {
   124bc:	1d7b      	adds	r3, r7, #5
   124be:	781b      	ldrb	r3, [r3, #0]
   124c0:	1d7a      	adds	r2, r7, #5
   124c2:	1e59      	subs	r1, r3, #1
   124c4:	7011      	strb	r1, [r2, #0]
   124c6:	2b00      	cmp	r3, #0
   124c8:	d1ce      	bne.n	12468 <gfx_mono_generic_draw_horizontal_line+0x154>
		break;
   124ca:	e000      	b.n	124ce <gfx_mono_generic_draw_horizontal_line+0x1ba>
		return;
   124cc:	46c0      	nop			; (mov r8, r8)
	}
}
   124ce:	46bd      	mov	sp, r7
   124d0:	b004      	add	sp, #16
   124d2:	bdb0      	pop	{r4, r5, r7, pc}
   124d4:	00013129 	.word	0x00013129
   124d8:	00013089 	.word	0x00013089

000124dc <gfx_mono_generic_draw_vertical_line>:
 * \param[in]  length     Length of the line in pixels.
 * \param[in]  color      Pixel operation of the line.
 */
void gfx_mono_generic_draw_vertical_line(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t length, enum gfx_mono_color color)
{
   124dc:	b5b0      	push	{r4, r5, r7, lr}
   124de:	b084      	sub	sp, #16
   124e0:	af00      	add	r7, sp, #0
   124e2:	0005      	movs	r5, r0
   124e4:	000c      	movs	r4, r1
   124e6:	0010      	movs	r0, r2
   124e8:	0019      	movs	r1, r3
   124ea:	1dfb      	adds	r3, r7, #7
   124ec:	1c2a      	adds	r2, r5, #0
   124ee:	701a      	strb	r2, [r3, #0]
   124f0:	1dbb      	adds	r3, r7, #6
   124f2:	1c22      	adds	r2, r4, #0
   124f4:	701a      	strb	r2, [r3, #0]
   124f6:	1d7b      	adds	r3, r7, #5
   124f8:	1c02      	adds	r2, r0, #0
   124fa:	701a      	strb	r2, [r3, #0]
   124fc:	1d3b      	adds	r3, r7, #4
   124fe:	1c0a      	adds	r2, r1, #0
   12500:	701a      	strb	r2, [r3, #0]
	if (length == 0) {
   12502:	1d7b      	adds	r3, r7, #5
   12504:	781b      	ldrb	r3, [r3, #0]
   12506:	2b00      	cmp	r3, #0
   12508:	d100      	bne.n	1250c <gfx_mono_generic_draw_vertical_line+0x30>
   1250a:	e0a7      	b.n	1265c <gfx_mono_generic_draw_vertical_line+0x180>
		return;
	}

	gfx_coord_t y2 = y + length - 1;
   1250c:	1dba      	adds	r2, r7, #6
   1250e:	1d7b      	adds	r3, r7, #5
   12510:	7812      	ldrb	r2, [r2, #0]
   12512:	781b      	ldrb	r3, [r3, #0]
   12514:	18d3      	adds	r3, r2, r3
   12516:	b2da      	uxtb	r2, r3
   12518:	230f      	movs	r3, #15
   1251a:	18fb      	adds	r3, r7, r3
   1251c:	3a01      	subs	r2, #1
   1251e:	701a      	strb	r2, [r3, #0]

	if (y == y2) {
   12520:	1dba      	adds	r2, r7, #6
   12522:	230f      	movs	r3, #15
   12524:	18fb      	adds	r3, r7, r3
   12526:	7812      	ldrb	r2, [r2, #0]
   12528:	781b      	ldrb	r3, [r3, #0]
   1252a:	429a      	cmp	r2, r3
   1252c:	d109      	bne.n	12542 <gfx_mono_generic_draw_vertical_line+0x66>
		gfx_mono_draw_pixel(x, y, color);
   1252e:	1d3b      	adds	r3, r7, #4
   12530:	781a      	ldrb	r2, [r3, #0]
   12532:	1dbb      	adds	r3, r7, #6
   12534:	7819      	ldrb	r1, [r3, #0]
   12536:	1dfb      	adds	r3, r7, #7
   12538:	781b      	ldrb	r3, [r3, #0]
   1253a:	0018      	movs	r0, r3
   1253c:	4b49      	ldr	r3, [pc, #292]	; (12664 <gfx_mono_generic_draw_vertical_line+0x188>)
   1253e:	4798      	blx	r3
		return;
   12540:	e08d      	b.n	1265e <gfx_mono_generic_draw_vertical_line+0x182>
	}

	if (y2 >= GFX_MONO_LCD_HEIGHT - 1) {
   12542:	230f      	movs	r3, #15
   12544:	18fb      	adds	r3, r7, r3
   12546:	781b      	ldrb	r3, [r3, #0]
   12548:	2b2e      	cmp	r3, #46	; 0x2e
   1254a:	d903      	bls.n	12554 <gfx_mono_generic_draw_vertical_line+0x78>
		y2 = GFX_MONO_LCD_HEIGHT - 1;
   1254c:	230f      	movs	r3, #15
   1254e:	18fb      	adds	r3, r7, r3
   12550:	222f      	movs	r2, #47	; 0x2f
   12552:	701a      	strb	r2, [r3, #0]
	}

	gfx_coord_t y1page = y / 8;
   12554:	230e      	movs	r3, #14
   12556:	18fb      	adds	r3, r7, r3
   12558:	1dba      	adds	r2, r7, #6
   1255a:	7812      	ldrb	r2, [r2, #0]
   1255c:	08d2      	lsrs	r2, r2, #3
   1255e:	701a      	strb	r2, [r3, #0]
	gfx_coord_t y2page = y2 / 8;
   12560:	230d      	movs	r3, #13
   12562:	18fb      	adds	r3, r7, r3
   12564:	220f      	movs	r2, #15
   12566:	18ba      	adds	r2, r7, r2
   12568:	7812      	ldrb	r2, [r2, #0]
   1256a:	08d2      	lsrs	r2, r2, #3
   1256c:	701a      	strb	r2, [r3, #0]

	uint8_t y1bitpos = y & 0x07;
   1256e:	230c      	movs	r3, #12
   12570:	18fb      	adds	r3, r7, r3
   12572:	1dba      	adds	r2, r7, #6
   12574:	7812      	ldrb	r2, [r2, #0]
   12576:	2107      	movs	r1, #7
   12578:	400a      	ands	r2, r1
   1257a:	701a      	strb	r2, [r3, #0]
	uint8_t y2bitpos = y2 & 0x07;
   1257c:	230b      	movs	r3, #11
   1257e:	18fb      	adds	r3, r7, r3
   12580:	220f      	movs	r2, #15
   12582:	18ba      	adds	r2, r7, r2
   12584:	7812      	ldrb	r2, [r2, #0]
   12586:	2107      	movs	r1, #7
   12588:	400a      	ands	r2, r1
   1258a:	701a      	strb	r2, [r3, #0]

	uint8_t y1pixelmask = 0xFF << y1bitpos;
   1258c:	230c      	movs	r3, #12
   1258e:	18fb      	adds	r3, r7, r3
   12590:	781b      	ldrb	r3, [r3, #0]
   12592:	22ff      	movs	r2, #255	; 0xff
   12594:	409a      	lsls	r2, r3
   12596:	230a      	movs	r3, #10
   12598:	18fb      	adds	r3, r7, r3
   1259a:	701a      	strb	r2, [r3, #0]
	uint8_t y2pixelmask = 0xFF >> (7 - y2bitpos);
   1259c:	230b      	movs	r3, #11
   1259e:	18fb      	adds	r3, r7, r3
   125a0:	781b      	ldrb	r3, [r3, #0]
   125a2:	2207      	movs	r2, #7
   125a4:	1ad3      	subs	r3, r2, r3
   125a6:	22ff      	movs	r2, #255	; 0xff
   125a8:	411a      	asrs	r2, r3
   125aa:	2309      	movs	r3, #9
   125ac:	18fb      	adds	r3, r7, r3
   125ae:	701a      	strb	r2, [r3, #0]

	/* The pixels are on the same page; combine masks */
	if (y1page == y2page) {
   125b0:	230e      	movs	r3, #14
   125b2:	18fa      	adds	r2, r7, r3
   125b4:	230d      	movs	r3, #13
   125b6:	18fb      	adds	r3, r7, r3
   125b8:	7812      	ldrb	r2, [r2, #0]
   125ba:	781b      	ldrb	r3, [r3, #0]
   125bc:	429a      	cmp	r2, r3
   125be:	d117      	bne.n	125f0 <gfx_mono_generic_draw_vertical_line+0x114>
		uint8_t pixelmask = y1pixelmask & y2pixelmask;
   125c0:	2308      	movs	r3, #8
   125c2:	18fb      	adds	r3, r7, r3
   125c4:	220a      	movs	r2, #10
   125c6:	18ba      	adds	r2, r7, r2
   125c8:	2109      	movs	r1, #9
   125ca:	1879      	adds	r1, r7, r1
   125cc:	7812      	ldrb	r2, [r2, #0]
   125ce:	7809      	ldrb	r1, [r1, #0]
   125d0:	400a      	ands	r2, r1
   125d2:	701a      	strb	r2, [r3, #0]
		gfx_mono_mask_byte(y1page, x, pixelmask, color);
   125d4:	1d3b      	adds	r3, r7, #4
   125d6:	781c      	ldrb	r4, [r3, #0]
   125d8:	2308      	movs	r3, #8
   125da:	18fb      	adds	r3, r7, r3
   125dc:	781a      	ldrb	r2, [r3, #0]
   125de:	1dfb      	adds	r3, r7, #7
   125e0:	7819      	ldrb	r1, [r3, #0]
   125e2:	230e      	movs	r3, #14
   125e4:	18fb      	adds	r3, r7, r3
   125e6:	7818      	ldrb	r0, [r3, #0]
   125e8:	0023      	movs	r3, r4
   125ea:	4c1f      	ldr	r4, [pc, #124]	; (12668 <gfx_mono_generic_draw_vertical_line+0x18c>)
   125ec:	47a0      	blx	r4
   125ee:	e036      	b.n	1265e <gfx_mono_generic_draw_vertical_line+0x182>
	} else {
		gfx_mono_mask_byte(y1page, x, y1pixelmask, color);
   125f0:	1d3b      	adds	r3, r7, #4
   125f2:	781c      	ldrb	r4, [r3, #0]
   125f4:	230a      	movs	r3, #10
   125f6:	18fb      	adds	r3, r7, r3
   125f8:	781a      	ldrb	r2, [r3, #0]
   125fa:	1dfb      	adds	r3, r7, #7
   125fc:	7819      	ldrb	r1, [r3, #0]
   125fe:	230e      	movs	r3, #14
   12600:	18fb      	adds	r3, r7, r3
   12602:	7818      	ldrb	r0, [r3, #0]
   12604:	0023      	movs	r3, r4
   12606:	4c18      	ldr	r4, [pc, #96]	; (12668 <gfx_mono_generic_draw_vertical_line+0x18c>)
   12608:	47a0      	blx	r4

		while (++y1page < y2page) {
   1260a:	e00a      	b.n	12622 <gfx_mono_generic_draw_vertical_line+0x146>
			gfx_mono_mask_byte(y1page, x, 0xFF, color);
   1260c:	1d3b      	adds	r3, r7, #4
   1260e:	781a      	ldrb	r2, [r3, #0]
   12610:	1dfb      	adds	r3, r7, #7
   12612:	7819      	ldrb	r1, [r3, #0]
   12614:	230e      	movs	r3, #14
   12616:	18fb      	adds	r3, r7, r3
   12618:	7818      	ldrb	r0, [r3, #0]
   1261a:	0013      	movs	r3, r2
   1261c:	22ff      	movs	r2, #255	; 0xff
   1261e:	4c12      	ldr	r4, [pc, #72]	; (12668 <gfx_mono_generic_draw_vertical_line+0x18c>)
   12620:	47a0      	blx	r4
		while (++y1page < y2page) {
   12622:	230e      	movs	r3, #14
   12624:	18fb      	adds	r3, r7, r3
   12626:	220e      	movs	r2, #14
   12628:	18ba      	adds	r2, r7, r2
   1262a:	7812      	ldrb	r2, [r2, #0]
   1262c:	3201      	adds	r2, #1
   1262e:	701a      	strb	r2, [r3, #0]
   12630:	230e      	movs	r3, #14
   12632:	18fa      	adds	r2, r7, r3
   12634:	230d      	movs	r3, #13
   12636:	18fb      	adds	r3, r7, r3
   12638:	7812      	ldrb	r2, [r2, #0]
   1263a:	781b      	ldrb	r3, [r3, #0]
   1263c:	429a      	cmp	r2, r3
   1263e:	d3e5      	bcc.n	1260c <gfx_mono_generic_draw_vertical_line+0x130>
		}

		gfx_mono_mask_byte(y2page, x, y2pixelmask, color);
   12640:	1d3b      	adds	r3, r7, #4
   12642:	781c      	ldrb	r4, [r3, #0]
   12644:	2309      	movs	r3, #9
   12646:	18fb      	adds	r3, r7, r3
   12648:	781a      	ldrb	r2, [r3, #0]
   1264a:	1dfb      	adds	r3, r7, #7
   1264c:	7819      	ldrb	r1, [r3, #0]
   1264e:	230d      	movs	r3, #13
   12650:	18fb      	adds	r3, r7, r3
   12652:	7818      	ldrb	r0, [r3, #0]
   12654:	0023      	movs	r3, r4
   12656:	4c04      	ldr	r4, [pc, #16]	; (12668 <gfx_mono_generic_draw_vertical_line+0x18c>)
   12658:	47a0      	blx	r4
   1265a:	e000      	b.n	1265e <gfx_mono_generic_draw_vertical_line+0x182>
		return;
   1265c:	46c0      	nop			; (mov r8, r8)
	}
}
   1265e:	46bd      	mov	sp, r7
   12660:	b004      	add	sp, #16
   12662:	bdb0      	pop	{r4, r5, r7, pc}
   12664:	00012f95 	.word	0x00012f95
   12668:	00013159 	.word	0x00013159

0001266c <gfx_mono_generic_draw_line>:
 * \param[in]  color       Pixel operation of the line.
 */
void gfx_mono_generic_draw_line(gfx_coord_t x1, gfx_coord_t y1,
		gfx_coord_t x2, gfx_coord_t y2,
		enum gfx_mono_color color)
{
   1266c:	b5b0      	push	{r4, r5, r7, lr}
   1266e:	b084      	sub	sp, #16
   12670:	af00      	add	r7, sp, #0
   12672:	0005      	movs	r5, r0
   12674:	000c      	movs	r4, r1
   12676:	0010      	movs	r0, r2
   12678:	0019      	movs	r1, r3
   1267a:	1dfb      	adds	r3, r7, #7
   1267c:	1c2a      	adds	r2, r5, #0
   1267e:	701a      	strb	r2, [r3, #0]
   12680:	1dbb      	adds	r3, r7, #6
   12682:	1c22      	adds	r2, r4, #0
   12684:	701a      	strb	r2, [r3, #0]
   12686:	1d7b      	adds	r3, r7, #5
   12688:	1c02      	adds	r2, r0, #0
   1268a:	701a      	strb	r2, [r3, #0]
   1268c:	1d3b      	adds	r3, r7, #4
   1268e:	1c0a      	adds	r2, r1, #0
   12690:	701a      	strb	r2, [r3, #0]
	int8_t dx;
	int8_t dy;
	int8_t e;

	/* swap x1,y1  with x2,y2 */
	if (x1 > x2) {
   12692:	1dfa      	adds	r2, r7, #7
   12694:	1d7b      	adds	r3, r7, #5
   12696:	7812      	ldrb	r2, [r2, #0]
   12698:	781b      	ldrb	r3, [r3, #0]
   1269a:	429a      	cmp	r2, r3
   1269c:	d91b      	bls.n	126d6 <gfx_mono_generic_draw_line+0x6a>
		dx = x1;
   1269e:	230a      	movs	r3, #10
   126a0:	18fb      	adds	r3, r7, r3
   126a2:	1dfa      	adds	r2, r7, #7
   126a4:	7812      	ldrb	r2, [r2, #0]
   126a6:	701a      	strb	r2, [r3, #0]
		x1 = x2;
   126a8:	1dfb      	adds	r3, r7, #7
   126aa:	1d7a      	adds	r2, r7, #5
   126ac:	7812      	ldrb	r2, [r2, #0]
   126ae:	701a      	strb	r2, [r3, #0]
		x2 = dx;
   126b0:	1d7b      	adds	r3, r7, #5
   126b2:	220a      	movs	r2, #10
   126b4:	18ba      	adds	r2, r7, r2
   126b6:	7812      	ldrb	r2, [r2, #0]
   126b8:	701a      	strb	r2, [r3, #0]
		dy = y1;
   126ba:	2309      	movs	r3, #9
   126bc:	18fb      	adds	r3, r7, r3
   126be:	1dba      	adds	r2, r7, #6
   126c0:	7812      	ldrb	r2, [r2, #0]
   126c2:	701a      	strb	r2, [r3, #0]
		y1 = y2;
   126c4:	1dbb      	adds	r3, r7, #6
   126c6:	1d3a      	adds	r2, r7, #4
   126c8:	7812      	ldrb	r2, [r2, #0]
   126ca:	701a      	strb	r2, [r3, #0]
		y2 = dy;
   126cc:	1d3b      	adds	r3, r7, #4
   126ce:	2209      	movs	r2, #9
   126d0:	18ba      	adds	r2, r7, r2
   126d2:	7812      	ldrb	r2, [r2, #0]
   126d4:	701a      	strb	r2, [r3, #0]
	}

	dx = x2 - x1;
   126d6:	1d7a      	adds	r2, r7, #5
   126d8:	1dfb      	adds	r3, r7, #7
   126da:	7812      	ldrb	r2, [r2, #0]
   126dc:	781b      	ldrb	r3, [r3, #0]
   126de:	1ad3      	subs	r3, r2, r3
   126e0:	b2da      	uxtb	r2, r3
   126e2:	230a      	movs	r3, #10
   126e4:	18fb      	adds	r3, r7, r3
   126e6:	701a      	strb	r2, [r3, #0]
	dy = y2 - y1;
   126e8:	1d3a      	adds	r2, r7, #4
   126ea:	1dbb      	adds	r3, r7, #6
   126ec:	7812      	ldrb	r2, [r2, #0]
   126ee:	781b      	ldrb	r3, [r3, #0]
   126f0:	1ad3      	subs	r3, r2, r3
   126f2:	b2da      	uxtb	r2, r3
   126f4:	2309      	movs	r3, #9
   126f6:	18fb      	adds	r3, r7, r3
   126f8:	701a      	strb	r2, [r3, #0]

	x = x1;
   126fa:	230e      	movs	r3, #14
   126fc:	18fb      	adds	r3, r7, r3
   126fe:	1dfa      	adds	r2, r7, #7
   12700:	7812      	ldrb	r2, [r2, #0]
   12702:	701a      	strb	r2, [r3, #0]
	y = y1;
   12704:	230d      	movs	r3, #13
   12706:	18fb      	adds	r3, r7, r3
   12708:	1dba      	adds	r2, r7, #6
   1270a:	7812      	ldrb	r2, [r2, #0]
   1270c:	701a      	strb	r2, [r3, #0]

	if (dx < 0) {
   1270e:	230a      	movs	r3, #10
   12710:	18fb      	adds	r3, r7, r3
   12712:	781b      	ldrb	r3, [r3, #0]
   12714:	2b7f      	cmp	r3, #127	; 0x7f
   12716:	d90c      	bls.n	12732 <gfx_mono_generic_draw_line+0xc6>
		xinc = -1;
   12718:	230c      	movs	r3, #12
   1271a:	18fb      	adds	r3, r7, r3
   1271c:	22ff      	movs	r2, #255	; 0xff
   1271e:	701a      	strb	r2, [r3, #0]
		dx = -dx;
   12720:	230a      	movs	r3, #10
   12722:	18fb      	adds	r3, r7, r3
   12724:	781b      	ldrb	r3, [r3, #0]
   12726:	425b      	negs	r3, r3
   12728:	b2da      	uxtb	r2, r3
   1272a:	230a      	movs	r3, #10
   1272c:	18fb      	adds	r3, r7, r3
   1272e:	701a      	strb	r2, [r3, #0]
   12730:	e003      	b.n	1273a <gfx_mono_generic_draw_line+0xce>
	} else {
		xinc = 1;
   12732:	230c      	movs	r3, #12
   12734:	18fb      	adds	r3, r7, r3
   12736:	2201      	movs	r2, #1
   12738:	701a      	strb	r2, [r3, #0]
	}

	if (dy < 0) {
   1273a:	2309      	movs	r3, #9
   1273c:	18fb      	adds	r3, r7, r3
   1273e:	781b      	ldrb	r3, [r3, #0]
   12740:	2b7f      	cmp	r3, #127	; 0x7f
   12742:	d90c      	bls.n	1275e <gfx_mono_generic_draw_line+0xf2>
		yinc = -1;
   12744:	230b      	movs	r3, #11
   12746:	18fb      	adds	r3, r7, r3
   12748:	22ff      	movs	r2, #255	; 0xff
   1274a:	701a      	strb	r2, [r3, #0]
		dy = -dy;
   1274c:	2309      	movs	r3, #9
   1274e:	18fb      	adds	r3, r7, r3
   12750:	781b      	ldrb	r3, [r3, #0]
   12752:	425b      	negs	r3, r3
   12754:	b2da      	uxtb	r2, r3
   12756:	2309      	movs	r3, #9
   12758:	18fb      	adds	r3, r7, r3
   1275a:	701a      	strb	r2, [r3, #0]
   1275c:	e003      	b.n	12766 <gfx_mono_generic_draw_line+0xfa>
	} else {
		yinc = 1;
   1275e:	230b      	movs	r3, #11
   12760:	18fb      	adds	r3, r7, r3
   12762:	2201      	movs	r2, #1
   12764:	701a      	strb	r2, [r3, #0]
	}

	if (dx > dy) {
   12766:	230a      	movs	r3, #10
   12768:	18fa      	adds	r2, r7, r3
   1276a:	2309      	movs	r3, #9
   1276c:	18fb      	adds	r3, r7, r3
   1276e:	7812      	ldrb	r2, [r2, #0]
   12770:	b252      	sxtb	r2, r2
   12772:	781b      	ldrb	r3, [r3, #0]
   12774:	b25b      	sxtb	r3, r3
   12776:	429a      	cmp	r2, r3
   12778:	dd5b      	ble.n	12832 <gfx_mono_generic_draw_line+0x1c6>
		e = dy - dx;
   1277a:	2309      	movs	r3, #9
   1277c:	18fb      	adds	r3, r7, r3
   1277e:	781a      	ldrb	r2, [r3, #0]
   12780:	230a      	movs	r3, #10
   12782:	18fb      	adds	r3, r7, r3
   12784:	781b      	ldrb	r3, [r3, #0]
   12786:	1ad3      	subs	r3, r2, r3
   12788:	b2da      	uxtb	r2, r3
   1278a:	2308      	movs	r3, #8
   1278c:	18fb      	adds	r3, r7, r3
   1278e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i <= dx; i++) {
   12790:	230f      	movs	r3, #15
   12792:	18fb      	adds	r3, r7, r3
   12794:	2200      	movs	r2, #0
   12796:	701a      	strb	r2, [r3, #0]
   12798:	e041      	b.n	1281e <gfx_mono_generic_draw_line+0x1b2>
			gfx_mono_draw_pixel(x, y, color);
   1279a:	2320      	movs	r3, #32
   1279c:	18fb      	adds	r3, r7, r3
   1279e:	781a      	ldrb	r2, [r3, #0]
   127a0:	230d      	movs	r3, #13
   127a2:	18fb      	adds	r3, r7, r3
   127a4:	7819      	ldrb	r1, [r3, #0]
   127a6:	230e      	movs	r3, #14
   127a8:	18fb      	adds	r3, r7, r3
   127aa:	781b      	ldrb	r3, [r3, #0]
   127ac:	0018      	movs	r0, r3
   127ae:	4b50      	ldr	r3, [pc, #320]	; (128f0 <gfx_mono_generic_draw_line+0x284>)
   127b0:	4798      	blx	r3
			if (e >= 0) {
   127b2:	2308      	movs	r3, #8
   127b4:	18fb      	adds	r3, r7, r3
   127b6:	781b      	ldrb	r3, [r3, #0]
   127b8:	2b7f      	cmp	r3, #127	; 0x7f
   127ba:	d814      	bhi.n	127e6 <gfx_mono_generic_draw_line+0x17a>
				e -= dx;
   127bc:	2308      	movs	r3, #8
   127be:	18fb      	adds	r3, r7, r3
   127c0:	781a      	ldrb	r2, [r3, #0]
   127c2:	230a      	movs	r3, #10
   127c4:	18fb      	adds	r3, r7, r3
   127c6:	781b      	ldrb	r3, [r3, #0]
   127c8:	1ad3      	subs	r3, r2, r3
   127ca:	b2da      	uxtb	r2, r3
   127cc:	2308      	movs	r3, #8
   127ce:	18fb      	adds	r3, r7, r3
   127d0:	701a      	strb	r2, [r3, #0]
				y += yinc;
   127d2:	230b      	movs	r3, #11
   127d4:	18fb      	adds	r3, r7, r3
   127d6:	7819      	ldrb	r1, [r3, #0]
   127d8:	230d      	movs	r3, #13
   127da:	18fb      	adds	r3, r7, r3
   127dc:	220d      	movs	r2, #13
   127de:	18ba      	adds	r2, r7, r2
   127e0:	7812      	ldrb	r2, [r2, #0]
   127e2:	188a      	adds	r2, r1, r2
   127e4:	701a      	strb	r2, [r3, #0]
			}

			e += dy;
   127e6:	2308      	movs	r3, #8
   127e8:	18fb      	adds	r3, r7, r3
   127ea:	781a      	ldrb	r2, [r3, #0]
   127ec:	2309      	movs	r3, #9
   127ee:	18fb      	adds	r3, r7, r3
   127f0:	781b      	ldrb	r3, [r3, #0]
   127f2:	18d3      	adds	r3, r2, r3
   127f4:	b2da      	uxtb	r2, r3
   127f6:	2308      	movs	r3, #8
   127f8:	18fb      	adds	r3, r7, r3
   127fa:	701a      	strb	r2, [r3, #0]
			x += xinc;
   127fc:	230c      	movs	r3, #12
   127fe:	18fb      	adds	r3, r7, r3
   12800:	7819      	ldrb	r1, [r3, #0]
   12802:	230e      	movs	r3, #14
   12804:	18fb      	adds	r3, r7, r3
   12806:	220e      	movs	r2, #14
   12808:	18ba      	adds	r2, r7, r2
   1280a:	7812      	ldrb	r2, [r2, #0]
   1280c:	188a      	adds	r2, r1, r2
   1280e:	701a      	strb	r2, [r3, #0]
		for (i = 0; i <= dx; i++) {
   12810:	230f      	movs	r3, #15
   12812:	18fb      	adds	r3, r7, r3
   12814:	781a      	ldrb	r2, [r3, #0]
   12816:	230f      	movs	r3, #15
   12818:	18fb      	adds	r3, r7, r3
   1281a:	3201      	adds	r2, #1
   1281c:	701a      	strb	r2, [r3, #0]
   1281e:	230f      	movs	r3, #15
   12820:	18fb      	adds	r3, r7, r3
   12822:	781a      	ldrb	r2, [r3, #0]
   12824:	230a      	movs	r3, #10
   12826:	18fb      	adds	r3, r7, r3
   12828:	781b      	ldrb	r3, [r3, #0]
   1282a:	b25b      	sxtb	r3, r3
   1282c:	429a      	cmp	r2, r3
   1282e:	ddb4      	ble.n	1279a <gfx_mono_generic_draw_line+0x12e>

			e += dx;
			y += yinc;
		}
	}
}
   12830:	e05a      	b.n	128e8 <gfx_mono_generic_draw_line+0x27c>
		e = dx - dy;
   12832:	230a      	movs	r3, #10
   12834:	18fb      	adds	r3, r7, r3
   12836:	781a      	ldrb	r2, [r3, #0]
   12838:	2309      	movs	r3, #9
   1283a:	18fb      	adds	r3, r7, r3
   1283c:	781b      	ldrb	r3, [r3, #0]
   1283e:	1ad3      	subs	r3, r2, r3
   12840:	b2da      	uxtb	r2, r3
   12842:	2308      	movs	r3, #8
   12844:	18fb      	adds	r3, r7, r3
   12846:	701a      	strb	r2, [r3, #0]
		for (i = 0; i <= dy; i++) {
   12848:	230f      	movs	r3, #15
   1284a:	18fb      	adds	r3, r7, r3
   1284c:	2200      	movs	r2, #0
   1284e:	701a      	strb	r2, [r3, #0]
   12850:	e041      	b.n	128d6 <gfx_mono_generic_draw_line+0x26a>
			gfx_mono_draw_pixel(x, y, color);
   12852:	2320      	movs	r3, #32
   12854:	18fb      	adds	r3, r7, r3
   12856:	781a      	ldrb	r2, [r3, #0]
   12858:	230d      	movs	r3, #13
   1285a:	18fb      	adds	r3, r7, r3
   1285c:	7819      	ldrb	r1, [r3, #0]
   1285e:	230e      	movs	r3, #14
   12860:	18fb      	adds	r3, r7, r3
   12862:	781b      	ldrb	r3, [r3, #0]
   12864:	0018      	movs	r0, r3
   12866:	4b22      	ldr	r3, [pc, #136]	; (128f0 <gfx_mono_generic_draw_line+0x284>)
   12868:	4798      	blx	r3
			if (e >= 0) {
   1286a:	2308      	movs	r3, #8
   1286c:	18fb      	adds	r3, r7, r3
   1286e:	781b      	ldrb	r3, [r3, #0]
   12870:	2b7f      	cmp	r3, #127	; 0x7f
   12872:	d814      	bhi.n	1289e <gfx_mono_generic_draw_line+0x232>
				e -= dy;
   12874:	2308      	movs	r3, #8
   12876:	18fb      	adds	r3, r7, r3
   12878:	781a      	ldrb	r2, [r3, #0]
   1287a:	2309      	movs	r3, #9
   1287c:	18fb      	adds	r3, r7, r3
   1287e:	781b      	ldrb	r3, [r3, #0]
   12880:	1ad3      	subs	r3, r2, r3
   12882:	b2da      	uxtb	r2, r3
   12884:	2308      	movs	r3, #8
   12886:	18fb      	adds	r3, r7, r3
   12888:	701a      	strb	r2, [r3, #0]
				x += xinc;
   1288a:	230c      	movs	r3, #12
   1288c:	18fb      	adds	r3, r7, r3
   1288e:	7819      	ldrb	r1, [r3, #0]
   12890:	230e      	movs	r3, #14
   12892:	18fb      	adds	r3, r7, r3
   12894:	220e      	movs	r2, #14
   12896:	18ba      	adds	r2, r7, r2
   12898:	7812      	ldrb	r2, [r2, #0]
   1289a:	188a      	adds	r2, r1, r2
   1289c:	701a      	strb	r2, [r3, #0]
			e += dx;
   1289e:	2308      	movs	r3, #8
   128a0:	18fb      	adds	r3, r7, r3
   128a2:	781a      	ldrb	r2, [r3, #0]
   128a4:	230a      	movs	r3, #10
   128a6:	18fb      	adds	r3, r7, r3
   128a8:	781b      	ldrb	r3, [r3, #0]
   128aa:	18d3      	adds	r3, r2, r3
   128ac:	b2da      	uxtb	r2, r3
   128ae:	2308      	movs	r3, #8
   128b0:	18fb      	adds	r3, r7, r3
   128b2:	701a      	strb	r2, [r3, #0]
			y += yinc;
   128b4:	230b      	movs	r3, #11
   128b6:	18fb      	adds	r3, r7, r3
   128b8:	7819      	ldrb	r1, [r3, #0]
   128ba:	230d      	movs	r3, #13
   128bc:	18fb      	adds	r3, r7, r3
   128be:	220d      	movs	r2, #13
   128c0:	18ba      	adds	r2, r7, r2
   128c2:	7812      	ldrb	r2, [r2, #0]
   128c4:	188a      	adds	r2, r1, r2
   128c6:	701a      	strb	r2, [r3, #0]
		for (i = 0; i <= dy; i++) {
   128c8:	230f      	movs	r3, #15
   128ca:	18fb      	adds	r3, r7, r3
   128cc:	781a      	ldrb	r2, [r3, #0]
   128ce:	230f      	movs	r3, #15
   128d0:	18fb      	adds	r3, r7, r3
   128d2:	3201      	adds	r2, #1
   128d4:	701a      	strb	r2, [r3, #0]
   128d6:	230f      	movs	r3, #15
   128d8:	18fb      	adds	r3, r7, r3
   128da:	781a      	ldrb	r2, [r3, #0]
   128dc:	2309      	movs	r3, #9
   128de:	18fb      	adds	r3, r7, r3
   128e0:	781b      	ldrb	r3, [r3, #0]
   128e2:	b25b      	sxtb	r3, r3
   128e4:	429a      	cmp	r2, r3
   128e6:	ddb4      	ble.n	12852 <gfx_mono_generic_draw_line+0x1e6>
}
   128e8:	46c0      	nop			; (mov r8, r8)
   128ea:	46bd      	mov	sp, r7
   128ec:	b004      	add	sp, #16
   128ee:	bdb0      	pop	{r4, r5, r7, pc}
   128f0:	00012f95 	.word	0x00012f95

000128f4 <gfx_mono_generic_draw_filled_rect>:
 * \param[in]  color       Pixel operation of the line
 */
void gfx_mono_generic_draw_filled_rect(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t width, gfx_coord_t height,
		enum gfx_mono_color color)
{
   128f4:	b5b0      	push	{r4, r5, r7, lr}
   128f6:	b082      	sub	sp, #8
   128f8:	af00      	add	r7, sp, #0
   128fa:	0005      	movs	r5, r0
   128fc:	000c      	movs	r4, r1
   128fe:	0010      	movs	r0, r2
   12900:	0019      	movs	r1, r3
   12902:	1dfb      	adds	r3, r7, #7
   12904:	1c2a      	adds	r2, r5, #0
   12906:	701a      	strb	r2, [r3, #0]
   12908:	1dbb      	adds	r3, r7, #6
   1290a:	1c22      	adds	r2, r4, #0
   1290c:	701a      	strb	r2, [r3, #0]
   1290e:	1d7b      	adds	r3, r7, #5
   12910:	1c02      	adds	r2, r0, #0
   12912:	701a      	strb	r2, [r3, #0]
   12914:	1d3b      	adds	r3, r7, #4
   12916:	1c0a      	adds	r2, r1, #0
   12918:	701a      	strb	r2, [r3, #0]
	if (height == 0) {
   1291a:	1d3b      	adds	r3, r7, #4
   1291c:	781b      	ldrb	r3, [r3, #0]
   1291e:	2b00      	cmp	r3, #0
   12920:	d018      	beq.n	12954 <gfx_mono_generic_draw_filled_rect+0x60>
		/* Nothing to do. Move along. */
		return;
	}

	while (height-- > 0) {
   12922:	e00f      	b.n	12944 <gfx_mono_generic_draw_filled_rect+0x50>
		gfx_mono_draw_horizontal_line(x, y + height, width, color);
   12924:	1dba      	adds	r2, r7, #6
   12926:	1d3b      	adds	r3, r7, #4
   12928:	7812      	ldrb	r2, [r2, #0]
   1292a:	781b      	ldrb	r3, [r3, #0]
   1292c:	18d3      	adds	r3, r2, r3
   1292e:	b2d9      	uxtb	r1, r3
   12930:	2318      	movs	r3, #24
   12932:	18fb      	adds	r3, r7, r3
   12934:	781c      	ldrb	r4, [r3, #0]
   12936:	1d7b      	adds	r3, r7, #5
   12938:	781a      	ldrb	r2, [r3, #0]
   1293a:	1dfb      	adds	r3, r7, #7
   1293c:	7818      	ldrb	r0, [r3, #0]
   1293e:	0023      	movs	r3, r4
   12940:	4c06      	ldr	r4, [pc, #24]	; (1295c <gfx_mono_generic_draw_filled_rect+0x68>)
   12942:	47a0      	blx	r4
	while (height-- > 0) {
   12944:	1d3b      	adds	r3, r7, #4
   12946:	781b      	ldrb	r3, [r3, #0]
   12948:	1d3a      	adds	r2, r7, #4
   1294a:	1e59      	subs	r1, r3, #1
   1294c:	7011      	strb	r1, [r2, #0]
   1294e:	2b00      	cmp	r3, #0
   12950:	d1e8      	bne.n	12924 <gfx_mono_generic_draw_filled_rect+0x30>
   12952:	e000      	b.n	12956 <gfx_mono_generic_draw_filled_rect+0x62>
		return;
   12954:	46c0      	nop			; (mov r8, r8)
	}
}
   12956:	46bd      	mov	sp, r7
   12958:	b002      	add	sp, #8
   1295a:	bdb0      	pop	{r4, r5, r7, pc}
   1295c:	00012315 	.word	0x00012315

00012960 <gfx_mono_generic_draw_filled_circle>:
 * \param[in]  quadrant_mask Bitmask indicating which quadrants to draw.
 */
void gfx_mono_generic_draw_filled_circle(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t radius, enum gfx_mono_color color,
		uint8_t quadrant_mask)
{
   12960:	b5b0      	push	{r4, r5, r7, lr}
   12962:	b084      	sub	sp, #16
   12964:	af00      	add	r7, sp, #0
   12966:	0005      	movs	r5, r0
   12968:	000c      	movs	r4, r1
   1296a:	0010      	movs	r0, r2
   1296c:	0019      	movs	r1, r3
   1296e:	1dfb      	adds	r3, r7, #7
   12970:	1c2a      	adds	r2, r5, #0
   12972:	701a      	strb	r2, [r3, #0]
   12974:	1dbb      	adds	r3, r7, #6
   12976:	1c22      	adds	r2, r4, #0
   12978:	701a      	strb	r2, [r3, #0]
   1297a:	1d7b      	adds	r3, r7, #5
   1297c:	1c02      	adds	r2, r0, #0
   1297e:	701a      	strb	r2, [r3, #0]
   12980:	1d3b      	adds	r3, r7, #4
   12982:	1c0a      	adds	r2, r1, #0
   12984:	701a      	strb	r2, [r3, #0]
	gfx_coord_t offset_x;
	gfx_coord_t offset_y;
	int16_t error;

	/* Draw only a pixel if radius is zero. */
	if (radius == 0) {
   12986:	1d7b      	adds	r3, r7, #5
   12988:	781b      	ldrb	r3, [r3, #0]
   1298a:	2b00      	cmp	r3, #0
   1298c:	d109      	bne.n	129a2 <gfx_mono_generic_draw_filled_circle+0x42>
		gfx_mono_draw_pixel(x, y, color);
   1298e:	1d3b      	adds	r3, r7, #4
   12990:	781a      	ldrb	r2, [r3, #0]
   12992:	1dbb      	adds	r3, r7, #6
   12994:	7819      	ldrb	r1, [r3, #0]
   12996:	1dfb      	adds	r3, r7, #7
   12998:	781b      	ldrb	r3, [r3, #0]
   1299a:	0018      	movs	r0, r3
   1299c:	4b8f      	ldr	r3, [pc, #572]	; (12bdc <gfx_mono_generic_draw_filled_circle+0x27c>)
   1299e:	4798      	blx	r3
		return;
   129a0:	e118      	b.n	12bd4 <gfx_mono_generic_draw_filled_circle+0x274>
	}

	/* Set up start iterators. */
	offset_x = 0;
   129a2:	230f      	movs	r3, #15
   129a4:	18fb      	adds	r3, r7, r3
   129a6:	2200      	movs	r2, #0
   129a8:	701a      	strb	r2, [r3, #0]
	offset_y = radius;
   129aa:	230e      	movs	r3, #14
   129ac:	18fb      	adds	r3, r7, r3
   129ae:	1d7a      	adds	r2, r7, #5
   129b0:	7812      	ldrb	r2, [r2, #0]
   129b2:	701a      	strb	r2, [r3, #0]
	error = 3 - 2 * radius;
   129b4:	1d7b      	adds	r3, r7, #5
   129b6:	781b      	ldrb	r3, [r3, #0]
   129b8:	b29b      	uxth	r3, r3
   129ba:	18db      	adds	r3, r3, r3
   129bc:	b29b      	uxth	r3, r3
   129be:	2203      	movs	r2, #3
   129c0:	1ad3      	subs	r3, r2, r3
   129c2:	b29a      	uxth	r2, r3
   129c4:	230c      	movs	r3, #12
   129c6:	18fb      	adds	r3, r7, r3
   129c8:	801a      	strh	r2, [r3, #0]

	/* Iterate offset_x from 0 to radius. */
	while (offset_x <= offset_y) {
   129ca:	e0fa      	b.n	12bc2 <gfx_mono_generic_draw_filled_circle+0x262>
		/* Draw vertical lines tracking each quadrant. */
		if (quadrant_mask & GFX_QUADRANT0) {
   129cc:	2320      	movs	r3, #32
   129ce:	18fb      	adds	r3, r7, r3
   129d0:	781b      	ldrb	r3, [r3, #0]
   129d2:	2203      	movs	r2, #3
   129d4:	4013      	ands	r3, r2
   129d6:	d02d      	beq.n	12a34 <gfx_mono_generic_draw_filled_circle+0xd4>
			gfx_mono_draw_vertical_line(x + offset_y,
   129d8:	1dfa      	adds	r2, r7, #7
   129da:	230e      	movs	r3, #14
   129dc:	18fb      	adds	r3, r7, r3
   129de:	7812      	ldrb	r2, [r2, #0]
   129e0:	781b      	ldrb	r3, [r3, #0]
   129e2:	18d3      	adds	r3, r2, r3
   129e4:	b2d8      	uxtb	r0, r3
   129e6:	1dba      	adds	r2, r7, #6
   129e8:	230f      	movs	r3, #15
   129ea:	18fb      	adds	r3, r7, r3
   129ec:	7812      	ldrb	r2, [r2, #0]
   129ee:	781b      	ldrb	r3, [r3, #0]
   129f0:	1ad3      	subs	r3, r2, r3
   129f2:	b2d9      	uxtb	r1, r3
   129f4:	230f      	movs	r3, #15
   129f6:	18fb      	adds	r3, r7, r3
   129f8:	781b      	ldrb	r3, [r3, #0]
   129fa:	3301      	adds	r3, #1
   129fc:	b2da      	uxtb	r2, r3
   129fe:	1d3b      	adds	r3, r7, #4
   12a00:	781b      	ldrb	r3, [r3, #0]
   12a02:	4c77      	ldr	r4, [pc, #476]	; (12be0 <gfx_mono_generic_draw_filled_circle+0x280>)
   12a04:	47a0      	blx	r4
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
   12a06:	1dfa      	adds	r2, r7, #7
   12a08:	230f      	movs	r3, #15
   12a0a:	18fb      	adds	r3, r7, r3
   12a0c:	7812      	ldrb	r2, [r2, #0]
   12a0e:	781b      	ldrb	r3, [r3, #0]
   12a10:	18d3      	adds	r3, r2, r3
   12a12:	b2d8      	uxtb	r0, r3
   12a14:	1dba      	adds	r2, r7, #6
   12a16:	230e      	movs	r3, #14
   12a18:	18fb      	adds	r3, r7, r3
   12a1a:	7812      	ldrb	r2, [r2, #0]
   12a1c:	781b      	ldrb	r3, [r3, #0]
   12a1e:	1ad3      	subs	r3, r2, r3
   12a20:	b2d9      	uxtb	r1, r3
   12a22:	230e      	movs	r3, #14
   12a24:	18fb      	adds	r3, r7, r3
   12a26:	781b      	ldrb	r3, [r3, #0]
   12a28:	3301      	adds	r3, #1
   12a2a:	b2da      	uxtb	r2, r3
   12a2c:	1d3b      	adds	r3, r7, #4
   12a2e:	781b      	ldrb	r3, [r3, #0]
   12a30:	4c6b      	ldr	r4, [pc, #428]	; (12be0 <gfx_mono_generic_draw_filled_circle+0x280>)
   12a32:	47a0      	blx	r4
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT1) {
   12a34:	2320      	movs	r3, #32
   12a36:	18fb      	adds	r3, r7, r3
   12a38:	781b      	ldrb	r3, [r3, #0]
   12a3a:	220c      	movs	r2, #12
   12a3c:	4013      	ands	r3, r2
   12a3e:	d02d      	beq.n	12a9c <gfx_mono_generic_draw_filled_circle+0x13c>
			gfx_mono_draw_vertical_line(x - offset_y,
   12a40:	1dfa      	adds	r2, r7, #7
   12a42:	230e      	movs	r3, #14
   12a44:	18fb      	adds	r3, r7, r3
   12a46:	7812      	ldrb	r2, [r2, #0]
   12a48:	781b      	ldrb	r3, [r3, #0]
   12a4a:	1ad3      	subs	r3, r2, r3
   12a4c:	b2d8      	uxtb	r0, r3
   12a4e:	1dba      	adds	r2, r7, #6
   12a50:	230f      	movs	r3, #15
   12a52:	18fb      	adds	r3, r7, r3
   12a54:	7812      	ldrb	r2, [r2, #0]
   12a56:	781b      	ldrb	r3, [r3, #0]
   12a58:	1ad3      	subs	r3, r2, r3
   12a5a:	b2d9      	uxtb	r1, r3
   12a5c:	230f      	movs	r3, #15
   12a5e:	18fb      	adds	r3, r7, r3
   12a60:	781b      	ldrb	r3, [r3, #0]
   12a62:	3301      	adds	r3, #1
   12a64:	b2da      	uxtb	r2, r3
   12a66:	1d3b      	adds	r3, r7, #4
   12a68:	781b      	ldrb	r3, [r3, #0]
   12a6a:	4c5d      	ldr	r4, [pc, #372]	; (12be0 <gfx_mono_generic_draw_filled_circle+0x280>)
   12a6c:	47a0      	blx	r4
					y - offset_x, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
   12a6e:	1dfa      	adds	r2, r7, #7
   12a70:	230f      	movs	r3, #15
   12a72:	18fb      	adds	r3, r7, r3
   12a74:	7812      	ldrb	r2, [r2, #0]
   12a76:	781b      	ldrb	r3, [r3, #0]
   12a78:	1ad3      	subs	r3, r2, r3
   12a7a:	b2d8      	uxtb	r0, r3
   12a7c:	1dba      	adds	r2, r7, #6
   12a7e:	230e      	movs	r3, #14
   12a80:	18fb      	adds	r3, r7, r3
   12a82:	7812      	ldrb	r2, [r2, #0]
   12a84:	781b      	ldrb	r3, [r3, #0]
   12a86:	1ad3      	subs	r3, r2, r3
   12a88:	b2d9      	uxtb	r1, r3
   12a8a:	230e      	movs	r3, #14
   12a8c:	18fb      	adds	r3, r7, r3
   12a8e:	781b      	ldrb	r3, [r3, #0]
   12a90:	3301      	adds	r3, #1
   12a92:	b2da      	uxtb	r2, r3
   12a94:	1d3b      	adds	r3, r7, #4
   12a96:	781b      	ldrb	r3, [r3, #0]
   12a98:	4c51      	ldr	r4, [pc, #324]	; (12be0 <gfx_mono_generic_draw_filled_circle+0x280>)
   12a9a:	47a0      	blx	r4
					y - offset_y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT2) {
   12a9c:	2320      	movs	r3, #32
   12a9e:	18fb      	adds	r3, r7, r3
   12aa0:	781b      	ldrb	r3, [r3, #0]
   12aa2:	2230      	movs	r2, #48	; 0x30
   12aa4:	4013      	ands	r3, r2
   12aa6:	d025      	beq.n	12af4 <gfx_mono_generic_draw_filled_circle+0x194>
			gfx_mono_draw_vertical_line(x - offset_y,
   12aa8:	1dfa      	adds	r2, r7, #7
   12aaa:	230e      	movs	r3, #14
   12aac:	18fb      	adds	r3, r7, r3
   12aae:	7812      	ldrb	r2, [r2, #0]
   12ab0:	781b      	ldrb	r3, [r3, #0]
   12ab2:	1ad3      	subs	r3, r2, r3
   12ab4:	b2d8      	uxtb	r0, r3
   12ab6:	230f      	movs	r3, #15
   12ab8:	18fb      	adds	r3, r7, r3
   12aba:	781b      	ldrb	r3, [r3, #0]
   12abc:	3301      	adds	r3, #1
   12abe:	b2da      	uxtb	r2, r3
   12ac0:	1d3b      	adds	r3, r7, #4
   12ac2:	781c      	ldrb	r4, [r3, #0]
   12ac4:	1dbb      	adds	r3, r7, #6
   12ac6:	7819      	ldrb	r1, [r3, #0]
   12ac8:	0023      	movs	r3, r4
   12aca:	4c45      	ldr	r4, [pc, #276]	; (12be0 <gfx_mono_generic_draw_filled_circle+0x280>)
   12acc:	47a0      	blx	r4
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x - offset_x,
   12ace:	1dfa      	adds	r2, r7, #7
   12ad0:	230f      	movs	r3, #15
   12ad2:	18fb      	adds	r3, r7, r3
   12ad4:	7812      	ldrb	r2, [r2, #0]
   12ad6:	781b      	ldrb	r3, [r3, #0]
   12ad8:	1ad3      	subs	r3, r2, r3
   12ada:	b2d8      	uxtb	r0, r3
   12adc:	230e      	movs	r3, #14
   12ade:	18fb      	adds	r3, r7, r3
   12ae0:	781b      	ldrb	r3, [r3, #0]
   12ae2:	3301      	adds	r3, #1
   12ae4:	b2da      	uxtb	r2, r3
   12ae6:	1d3b      	adds	r3, r7, #4
   12ae8:	781c      	ldrb	r4, [r3, #0]
   12aea:	1dbb      	adds	r3, r7, #6
   12aec:	7819      	ldrb	r1, [r3, #0]
   12aee:	0023      	movs	r3, r4
   12af0:	4c3b      	ldr	r4, [pc, #236]	; (12be0 <gfx_mono_generic_draw_filled_circle+0x280>)
   12af2:	47a0      	blx	r4
					y, offset_y + 1, color);
		}

		if (quadrant_mask & GFX_QUADRANT3) {
   12af4:	2320      	movs	r3, #32
   12af6:	18fb      	adds	r3, r7, r3
   12af8:	781b      	ldrb	r3, [r3, #0]
   12afa:	22c0      	movs	r2, #192	; 0xc0
   12afc:	4013      	ands	r3, r2
   12afe:	d025      	beq.n	12b4c <gfx_mono_generic_draw_filled_circle+0x1ec>
			gfx_mono_draw_vertical_line(x + offset_y,
   12b00:	1dfa      	adds	r2, r7, #7
   12b02:	230e      	movs	r3, #14
   12b04:	18fb      	adds	r3, r7, r3
   12b06:	7812      	ldrb	r2, [r2, #0]
   12b08:	781b      	ldrb	r3, [r3, #0]
   12b0a:	18d3      	adds	r3, r2, r3
   12b0c:	b2d8      	uxtb	r0, r3
   12b0e:	230f      	movs	r3, #15
   12b10:	18fb      	adds	r3, r7, r3
   12b12:	781b      	ldrb	r3, [r3, #0]
   12b14:	3301      	adds	r3, #1
   12b16:	b2da      	uxtb	r2, r3
   12b18:	1d3b      	adds	r3, r7, #4
   12b1a:	781c      	ldrb	r4, [r3, #0]
   12b1c:	1dbb      	adds	r3, r7, #6
   12b1e:	7819      	ldrb	r1, [r3, #0]
   12b20:	0023      	movs	r3, r4
   12b22:	4c2f      	ldr	r4, [pc, #188]	; (12be0 <gfx_mono_generic_draw_filled_circle+0x280>)
   12b24:	47a0      	blx	r4
					y, offset_x + 1, color);
			gfx_mono_draw_vertical_line(x + offset_x,
   12b26:	1dfa      	adds	r2, r7, #7
   12b28:	230f      	movs	r3, #15
   12b2a:	18fb      	adds	r3, r7, r3
   12b2c:	7812      	ldrb	r2, [r2, #0]
   12b2e:	781b      	ldrb	r3, [r3, #0]
   12b30:	18d3      	adds	r3, r2, r3
   12b32:	b2d8      	uxtb	r0, r3
   12b34:	230e      	movs	r3, #14
   12b36:	18fb      	adds	r3, r7, r3
   12b38:	781b      	ldrb	r3, [r3, #0]
   12b3a:	3301      	adds	r3, #1
   12b3c:	b2da      	uxtb	r2, r3
   12b3e:	1d3b      	adds	r3, r7, #4
   12b40:	781c      	ldrb	r4, [r3, #0]
   12b42:	1dbb      	adds	r3, r7, #6
   12b44:	7819      	ldrb	r1, [r3, #0]
   12b46:	0023      	movs	r3, r4
   12b48:	4c25      	ldr	r4, [pc, #148]	; (12be0 <gfx_mono_generic_draw_filled_circle+0x280>)
   12b4a:	47a0      	blx	r4
					y, offset_y + 1, color);
		}

		/* Update error value and step offset_y when required. */
		if (error < 0) {
   12b4c:	230c      	movs	r3, #12
   12b4e:	18fb      	adds	r3, r7, r3
   12b50:	2200      	movs	r2, #0
   12b52:	5e9b      	ldrsh	r3, [r3, r2]
   12b54:	2b00      	cmp	r3, #0
   12b56:	da10      	bge.n	12b7a <gfx_mono_generic_draw_filled_circle+0x21a>
			error += ((offset_x << 2) + 6);
   12b58:	230f      	movs	r3, #15
   12b5a:	18fb      	adds	r3, r7, r3
   12b5c:	781b      	ldrb	r3, [r3, #0]
   12b5e:	b29b      	uxth	r3, r3
   12b60:	009b      	lsls	r3, r3, #2
   12b62:	b29a      	uxth	r2, r3
   12b64:	230c      	movs	r3, #12
   12b66:	18fb      	adds	r3, r7, r3
   12b68:	881b      	ldrh	r3, [r3, #0]
   12b6a:	18d3      	adds	r3, r2, r3
   12b6c:	b29b      	uxth	r3, r3
   12b6e:	3306      	adds	r3, #6
   12b70:	b29a      	uxth	r2, r3
   12b72:	230c      	movs	r3, #12
   12b74:	18fb      	adds	r3, r7, r3
   12b76:	801a      	strh	r2, [r3, #0]
   12b78:	e01c      	b.n	12bb4 <gfx_mono_generic_draw_filled_circle+0x254>
		} else {
			error += (((offset_x - offset_y) << 2) + 10);
   12b7a:	230f      	movs	r3, #15
   12b7c:	18fb      	adds	r3, r7, r3
   12b7e:	781b      	ldrb	r3, [r3, #0]
   12b80:	b29a      	uxth	r2, r3
   12b82:	230e      	movs	r3, #14
   12b84:	18fb      	adds	r3, r7, r3
   12b86:	781b      	ldrb	r3, [r3, #0]
   12b88:	b29b      	uxth	r3, r3
   12b8a:	1ad3      	subs	r3, r2, r3
   12b8c:	b29b      	uxth	r3, r3
   12b8e:	009b      	lsls	r3, r3, #2
   12b90:	b29a      	uxth	r2, r3
   12b92:	230c      	movs	r3, #12
   12b94:	18fb      	adds	r3, r7, r3
   12b96:	881b      	ldrh	r3, [r3, #0]
   12b98:	18d3      	adds	r3, r2, r3
   12b9a:	b29b      	uxth	r3, r3
   12b9c:	330a      	adds	r3, #10
   12b9e:	b29a      	uxth	r2, r3
   12ba0:	230c      	movs	r3, #12
   12ba2:	18fb      	adds	r3, r7, r3
   12ba4:	801a      	strh	r2, [r3, #0]
			--offset_y;
   12ba6:	230e      	movs	r3, #14
   12ba8:	18fb      	adds	r3, r7, r3
   12baa:	220e      	movs	r2, #14
   12bac:	18ba      	adds	r2, r7, r2
   12bae:	7812      	ldrb	r2, [r2, #0]
   12bb0:	3a01      	subs	r2, #1
   12bb2:	701a      	strb	r2, [r3, #0]
		}

		/* Next X. */
		++offset_x;
   12bb4:	230f      	movs	r3, #15
   12bb6:	18fb      	adds	r3, r7, r3
   12bb8:	220f      	movs	r2, #15
   12bba:	18ba      	adds	r2, r7, r2
   12bbc:	7812      	ldrb	r2, [r2, #0]
   12bbe:	3201      	adds	r2, #1
   12bc0:	701a      	strb	r2, [r3, #0]
	while (offset_x <= offset_y) {
   12bc2:	230f      	movs	r3, #15
   12bc4:	18fa      	adds	r2, r7, r3
   12bc6:	230e      	movs	r3, #14
   12bc8:	18fb      	adds	r3, r7, r3
   12bca:	7812      	ldrb	r2, [r2, #0]
   12bcc:	781b      	ldrb	r3, [r3, #0]
   12bce:	429a      	cmp	r2, r3
   12bd0:	d800      	bhi.n	12bd4 <gfx_mono_generic_draw_filled_circle+0x274>
   12bd2:	e6fb      	b.n	129cc <gfx_mono_generic_draw_filled_circle+0x6c>
	}
}
   12bd4:	46bd      	mov	sp, r7
   12bd6:	b004      	add	sp, #16
   12bd8:	bdb0      	pop	{r4, r5, r7, pc}
   12bda:	46c0      	nop			; (mov r8, r8)
   12bdc:	00012f95 	.word	0x00012f95
   12be0:	000124dd 	.word	0x000124dd

00012be4 <gfx_mono_draw_char_progmem>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
static void gfx_mono_draw_char_progmem(const char ch, const gfx_coord_t x,
		const gfx_coord_t y, const struct font *font)
{
   12be4:	b590      	push	{r4, r7, lr}
   12be6:	b087      	sub	sp, #28
   12be8:	af00      	add	r7, sp, #0
   12bea:	0004      	movs	r4, r0
   12bec:	0008      	movs	r0, r1
   12bee:	0011      	movs	r1, r2
   12bf0:	603b      	str	r3, [r7, #0]
   12bf2:	1dfb      	adds	r3, r7, #7
   12bf4:	1c22      	adds	r2, r4, #0
   12bf6:	701a      	strb	r2, [r3, #0]
   12bf8:	1dbb      	adds	r3, r7, #6
   12bfa:	1c02      	adds	r2, r0, #0
   12bfc:	701a      	strb	r2, [r3, #0]
   12bfe:	1d7b      	adds	r3, r7, #5
   12c00:	1c0a      	adds	r2, r1, #0
   12c02:	701a      	strb	r2, [r3, #0]
	uint8_t i;

	/* Sanity check on parameters, assert if font is NULL. */
	Assert(font != NULL);

	gfx_coord_t inc_x = x;
   12c04:	2310      	movs	r3, #16
   12c06:	18fb      	adds	r3, r7, r3
   12c08:	1dba      	adds	r2, r7, #6
   12c0a:	7812      	ldrb	r2, [r2, #0]
   12c0c:	701a      	strb	r2, [r3, #0]
	gfx_coord_t inc_y = y;
   12c0e:	230f      	movs	r3, #15
   12c10:	18fb      	adds	r3, r7, r3
   12c12:	1d7a      	adds	r2, r7, #5
   12c14:	7812      	ldrb	r2, [r2, #0]
   12c16:	701a      	strb	r2, [r3, #0]

	char_row_size = font->width / CONFIG_FONT_PIXELS_PER_BYTE;
   12c18:	683b      	ldr	r3, [r7, #0]
   12c1a:	7a1a      	ldrb	r2, [r3, #8]
   12c1c:	2313      	movs	r3, #19
   12c1e:	18fb      	adds	r3, r7, r3
   12c20:	08d2      	lsrs	r2, r2, #3
   12c22:	701a      	strb	r2, [r3, #0]
	if (font->width % CONFIG_FONT_PIXELS_PER_BYTE) {
   12c24:	683b      	ldr	r3, [r7, #0]
   12c26:	7a1b      	ldrb	r3, [r3, #8]
   12c28:	2207      	movs	r2, #7
   12c2a:	4013      	ands	r3, r2
   12c2c:	b2db      	uxtb	r3, r3
   12c2e:	2b00      	cmp	r3, #0
   12c30:	d006      	beq.n	12c40 <gfx_mono_draw_char_progmem+0x5c>
		char_row_size++;
   12c32:	2313      	movs	r3, #19
   12c34:	18fb      	adds	r3, r7, r3
   12c36:	781a      	ldrb	r2, [r3, #0]
   12c38:	2313      	movs	r3, #19
   12c3a:	18fb      	adds	r3, r7, r3
   12c3c:	3201      	adds	r2, #1
   12c3e:	701a      	strb	r2, [r3, #0]
	}

	glyph_data_offset = char_row_size * font->height *
   12c40:	2313      	movs	r3, #19
   12c42:	18fb      	adds	r3, r7, r3
   12c44:	781b      	ldrb	r3, [r3, #0]
   12c46:	b29b      	uxth	r3, r3
   12c48:	683a      	ldr	r2, [r7, #0]
   12c4a:	7a52      	ldrb	r2, [r2, #9]
   12c4c:	b292      	uxth	r2, r2
   12c4e:	4353      	muls	r3, r2
   12c50:	b29a      	uxth	r2, r3
			((uint8_t)ch - font->first_char);
   12c52:	1dfb      	adds	r3, r7, #7
   12c54:	781b      	ldrb	r3, [r3, #0]
   12c56:	6839      	ldr	r1, [r7, #0]
   12c58:	7a89      	ldrb	r1, [r1, #10]
   12c5a:	1a5b      	subs	r3, r3, r1
	glyph_data_offset = char_row_size * font->height *
   12c5c:	b299      	uxth	r1, r3
   12c5e:	230c      	movs	r3, #12
   12c60:	18fb      	adds	r3, r7, r3
   12c62:	434a      	muls	r2, r1
   12c64:	801a      	strh	r2, [r3, #0]
	glyph_data = font->data.progmem + glyph_data_offset;
   12c66:	683b      	ldr	r3, [r7, #0]
   12c68:	685a      	ldr	r2, [r3, #4]
   12c6a:	230c      	movs	r3, #12
   12c6c:	18fb      	adds	r3, r7, r3
   12c6e:	881b      	ldrh	r3, [r3, #0]
   12c70:	18d3      	adds	r3, r2, r3
   12c72:	617b      	str	r3, [r7, #20]
	rows_left = font->height;
   12c74:	2312      	movs	r3, #18
   12c76:	18fb      	adds	r3, r7, r3
   12c78:	683a      	ldr	r2, [r7, #0]
   12c7a:	7a52      	ldrb	r2, [r2, #9]
   12c7c:	701a      	strb	r2, [r3, #0]

	do {
		uint8_t glyph_byte = 0;
   12c7e:	230e      	movs	r3, #14
   12c80:	18fb      	adds	r3, r7, r3
   12c82:	2200      	movs	r2, #0
   12c84:	701a      	strb	r2, [r3, #0]
		uint8_t pixelsToDraw = font->width;
   12c86:	230b      	movs	r3, #11
   12c88:	18fb      	adds	r3, r7, r3
   12c8a:	683a      	ldr	r2, [r7, #0]
   12c8c:	7a12      	ldrb	r2, [r2, #8]
   12c8e:	701a      	strb	r2, [r3, #0]

		for (i = 0; i < pixelsToDraw; i++) {
   12c90:	2311      	movs	r3, #17
   12c92:	18fb      	adds	r3, r7, r3
   12c94:	2200      	movs	r2, #0
   12c96:	701a      	strb	r2, [r3, #0]
   12c98:	e034      	b.n	12d04 <gfx_mono_draw_char_progmem+0x120>
			if (i % CONFIG_FONT_PIXELS_PER_BYTE == 0) {
   12c9a:	2311      	movs	r3, #17
   12c9c:	18fb      	adds	r3, r7, r3
   12c9e:	781b      	ldrb	r3, [r3, #0]
   12ca0:	2207      	movs	r2, #7
   12ca2:	4013      	ands	r3, r2
   12ca4:	b2db      	uxtb	r3, r3
   12ca6:	2b00      	cmp	r3, #0
   12ca8:	d107      	bne.n	12cba <gfx_mono_draw_char_progmem+0xd6>
				glyph_byte = PROGMEM_READ_BYTE(glyph_data);
   12caa:	230e      	movs	r3, #14
   12cac:	18fb      	adds	r3, r7, r3
   12cae:	697a      	ldr	r2, [r7, #20]
   12cb0:	7812      	ldrb	r2, [r2, #0]
   12cb2:	701a      	strb	r2, [r3, #0]
				glyph_data++;
   12cb4:	697b      	ldr	r3, [r7, #20]
   12cb6:	3301      	adds	r3, #1
   12cb8:	617b      	str	r3, [r7, #20]
			}

			if ((glyph_byte & 0x80)) {
   12cba:	230e      	movs	r3, #14
   12cbc:	18fb      	adds	r3, r7, r3
   12cbe:	781b      	ldrb	r3, [r3, #0]
   12cc0:	b25b      	sxtb	r3, r3
   12cc2:	2b00      	cmp	r3, #0
   12cc4:	da09      	bge.n	12cda <gfx_mono_draw_char_progmem+0xf6>
				gfx_mono_draw_pixel(inc_x, inc_y,
   12cc6:	230f      	movs	r3, #15
   12cc8:	18fb      	adds	r3, r7, r3
   12cca:	7819      	ldrb	r1, [r3, #0]
   12ccc:	2310      	movs	r3, #16
   12cce:	18fb      	adds	r3, r7, r3
   12cd0:	781b      	ldrb	r3, [r3, #0]
   12cd2:	2201      	movs	r2, #1
   12cd4:	0018      	movs	r0, r3
   12cd6:	4b1d      	ldr	r3, [pc, #116]	; (12d4c <gfx_mono_draw_char_progmem+0x168>)
   12cd8:	4798      	blx	r3
						GFX_PIXEL_SET);
			}

			inc_x += 1;
   12cda:	2310      	movs	r3, #16
   12cdc:	18fb      	adds	r3, r7, r3
   12cde:	2210      	movs	r2, #16
   12ce0:	18ba      	adds	r2, r7, r2
   12ce2:	7812      	ldrb	r2, [r2, #0]
   12ce4:	3201      	adds	r2, #1
   12ce6:	701a      	strb	r2, [r3, #0]
			glyph_byte <<= 1;
   12ce8:	230e      	movs	r3, #14
   12cea:	18fa      	adds	r2, r7, r3
   12cec:	230e      	movs	r3, #14
   12cee:	18fb      	adds	r3, r7, r3
   12cf0:	781b      	ldrb	r3, [r3, #0]
   12cf2:	18db      	adds	r3, r3, r3
   12cf4:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < pixelsToDraw; i++) {
   12cf6:	2311      	movs	r3, #17
   12cf8:	18fb      	adds	r3, r7, r3
   12cfa:	781a      	ldrb	r2, [r3, #0]
   12cfc:	2311      	movs	r3, #17
   12cfe:	18fb      	adds	r3, r7, r3
   12d00:	3201      	adds	r2, #1
   12d02:	701a      	strb	r2, [r3, #0]
   12d04:	2311      	movs	r3, #17
   12d06:	18fa      	adds	r2, r7, r3
   12d08:	230b      	movs	r3, #11
   12d0a:	18fb      	adds	r3, r7, r3
   12d0c:	7812      	ldrb	r2, [r2, #0]
   12d0e:	781b      	ldrb	r3, [r3, #0]
   12d10:	429a      	cmp	r2, r3
   12d12:	d3c2      	bcc.n	12c9a <gfx_mono_draw_char_progmem+0xb6>
		}

		inc_y += 1;
   12d14:	230f      	movs	r3, #15
   12d16:	18fb      	adds	r3, r7, r3
   12d18:	220f      	movs	r2, #15
   12d1a:	18ba      	adds	r2, r7, r2
   12d1c:	7812      	ldrb	r2, [r2, #0]
   12d1e:	3201      	adds	r2, #1
   12d20:	701a      	strb	r2, [r3, #0]
		inc_x = x;
   12d22:	2310      	movs	r3, #16
   12d24:	18fb      	adds	r3, r7, r3
   12d26:	1dba      	adds	r2, r7, #6
   12d28:	7812      	ldrb	r2, [r2, #0]
   12d2a:	701a      	strb	r2, [r3, #0]
		rows_left--;
   12d2c:	2312      	movs	r3, #18
   12d2e:	18fb      	adds	r3, r7, r3
   12d30:	781a      	ldrb	r2, [r3, #0]
   12d32:	2312      	movs	r3, #18
   12d34:	18fb      	adds	r3, r7, r3
   12d36:	3a01      	subs	r2, #1
   12d38:	701a      	strb	r2, [r3, #0]
	} while (rows_left > 0);
   12d3a:	2312      	movs	r3, #18
   12d3c:	18fb      	adds	r3, r7, r3
   12d3e:	781b      	ldrb	r3, [r3, #0]
   12d40:	2b00      	cmp	r3, #0
   12d42:	d19c      	bne.n	12c7e <gfx_mono_draw_char_progmem+0x9a>
}
   12d44:	46c0      	nop			; (mov r8, r8)
   12d46:	46bd      	mov	sp, r7
   12d48:	b007      	add	sp, #28
   12d4a:	bd90      	pop	{r4, r7, pc}
   12d4c:	00012f95 	.word	0x00012f95

00012d50 <gfx_mono_draw_char>:
 * \param[in] y        Y coordinate on screen.
 * \param[in] font     Font to draw character in
 */
void gfx_mono_draw_char(const char c, const gfx_coord_t x, const gfx_coord_t y,
		const struct font *font)
{
   12d50:	b590      	push	{r4, r7, lr}
   12d52:	b085      	sub	sp, #20
   12d54:	af02      	add	r7, sp, #8
   12d56:	0004      	movs	r4, r0
   12d58:	0008      	movs	r0, r1
   12d5a:	0011      	movs	r1, r2
   12d5c:	603b      	str	r3, [r7, #0]
   12d5e:	1dfb      	adds	r3, r7, #7
   12d60:	1c22      	adds	r2, r4, #0
   12d62:	701a      	strb	r2, [r3, #0]
   12d64:	1dbb      	adds	r3, r7, #6
   12d66:	1c02      	adds	r2, r0, #0
   12d68:	701a      	strb	r2, [r3, #0]
   12d6a:	1d7b      	adds	r3, r7, #5
   12d6c:	1c0a      	adds	r2, r1, #0
   12d6e:	701a      	strb	r2, [r3, #0]
	gfx_mono_draw_filled_rect(x, y, font->width, font->height,
   12d70:	683b      	ldr	r3, [r7, #0]
   12d72:	7a1a      	ldrb	r2, [r3, #8]
   12d74:	683b      	ldr	r3, [r7, #0]
   12d76:	7a5c      	ldrb	r4, [r3, #9]
   12d78:	1d7b      	adds	r3, r7, #5
   12d7a:	7819      	ldrb	r1, [r3, #0]
   12d7c:	1dbb      	adds	r3, r7, #6
   12d7e:	7818      	ldrb	r0, [r3, #0]
   12d80:	2300      	movs	r3, #0
   12d82:	9300      	str	r3, [sp, #0]
   12d84:	0023      	movs	r3, r4
   12d86:	4c0b      	ldr	r4, [pc, #44]	; (12db4 <gfx_mono_draw_char+0x64>)
   12d88:	47a0      	blx	r4
			GFX_PIXEL_CLR);

	switch (font->type) {
   12d8a:	683b      	ldr	r3, [r7, #0]
   12d8c:	781b      	ldrb	r3, [r3, #0]
   12d8e:	2b00      	cmp	r3, #0
   12d90:	d000      	beq.n	12d94 <gfx_mono_draw_char+0x44>

#endif
	default:
		/* Unsupported mode, call assert */
		Assert(false);
		break;
   12d92:	e00a      	b.n	12daa <gfx_mono_draw_char+0x5a>
		gfx_mono_draw_char_progmem(c, x, y, font);
   12d94:	683c      	ldr	r4, [r7, #0]
   12d96:	1d7b      	adds	r3, r7, #5
   12d98:	781a      	ldrb	r2, [r3, #0]
   12d9a:	1dbb      	adds	r3, r7, #6
   12d9c:	7819      	ldrb	r1, [r3, #0]
   12d9e:	1dfb      	adds	r3, r7, #7
   12da0:	7818      	ldrb	r0, [r3, #0]
   12da2:	0023      	movs	r3, r4
   12da4:	4c04      	ldr	r4, [pc, #16]	; (12db8 <gfx_mono_draw_char+0x68>)
   12da6:	47a0      	blx	r4
		break;
   12da8:	46c0      	nop			; (mov r8, r8)
	}
}
   12daa:	46c0      	nop			; (mov r8, r8)
   12dac:	46bd      	mov	sp, r7
   12dae:	b003      	add	sp, #12
   12db0:	bd90      	pop	{r4, r7, pc}
   12db2:	46c0      	nop			; (mov r8, r8)
   12db4:	000128f5 	.word	0x000128f5
   12db8:	00012be5 	.word	0x00012be5

00012dbc <gfx_mono_draw_string>:
 * \param[in] y         Y coordinate on screen.
 * \param[in] font      Font to draw string in
 */
void gfx_mono_draw_string(const char *str, gfx_coord_t x, gfx_coord_t y,
		const struct font *font)
{
   12dbc:	b590      	push	{r4, r7, lr}
   12dbe:	b087      	sub	sp, #28
   12dc0:	af00      	add	r7, sp, #0
   12dc2:	60f8      	str	r0, [r7, #12]
   12dc4:	0008      	movs	r0, r1
   12dc6:	0011      	movs	r1, r2
   12dc8:	607b      	str	r3, [r7, #4]
   12dca:	230b      	movs	r3, #11
   12dcc:	18fb      	adds	r3, r7, r3
   12dce:	1c02      	adds	r2, r0, #0
   12dd0:	701a      	strb	r2, [r3, #0]
   12dd2:	230a      	movs	r3, #10
   12dd4:	18fb      	adds	r3, r7, r3
   12dd6:	1c0a      	adds	r2, r1, #0
   12dd8:	701a      	strb	r2, [r3, #0]
	/* Save X in order to know where to return to on CR. */
	const gfx_coord_t start_of_string_position_x = x;
   12dda:	2317      	movs	r3, #23
   12ddc:	18fb      	adds	r3, r7, r3
   12dde:	220b      	movs	r2, #11
   12de0:	18ba      	adds	r2, r7, r2
   12de2:	7812      	ldrb	r2, [r2, #0]
   12de4:	701a      	strb	r2, [r3, #0]
	Assert(font != NULL);

	/* Draw characters until trailing null byte */
	do {
		/* Handle '\n' as newline, draw normal characters. */
		if (*str == '\n') {
   12de6:	68fb      	ldr	r3, [r7, #12]
   12de8:	781b      	ldrb	r3, [r3, #0]
   12dea:	2b0a      	cmp	r3, #10
   12dec:	d111      	bne.n	12e12 <gfx_mono_draw_string+0x56>
			x = start_of_string_position_x;
   12dee:	230b      	movs	r3, #11
   12df0:	18fb      	adds	r3, r7, r3
   12df2:	2217      	movs	r2, #23
   12df4:	18ba      	adds	r2, r7, r2
   12df6:	7812      	ldrb	r2, [r2, #0]
   12df8:	701a      	strb	r2, [r3, #0]
			y += font->height + 1;
   12dfa:	687b      	ldr	r3, [r7, #4]
   12dfc:	7a5a      	ldrb	r2, [r3, #9]
   12dfe:	230a      	movs	r3, #10
   12e00:	18fb      	adds	r3, r7, r3
   12e02:	781b      	ldrb	r3, [r3, #0]
   12e04:	18d3      	adds	r3, r2, r3
   12e06:	b2da      	uxtb	r2, r3
   12e08:	230a      	movs	r3, #10
   12e0a:	18fb      	adds	r3, r7, r3
   12e0c:	3201      	adds	r2, #1
   12e0e:	701a      	strb	r2, [r3, #0]
   12e10:	e018      	b.n	12e44 <gfx_mono_draw_string+0x88>
		} else if (*str == '\r') {
   12e12:	68fb      	ldr	r3, [r7, #12]
   12e14:	781b      	ldrb	r3, [r3, #0]
   12e16:	2b0d      	cmp	r3, #13
   12e18:	d014      	beq.n	12e44 <gfx_mono_draw_string+0x88>
			/* Skip '\r' characters. */
		} else {
			gfx_mono_draw_char(*str, x, y, font);
   12e1a:	68fb      	ldr	r3, [r7, #12]
   12e1c:	7818      	ldrb	r0, [r3, #0]
   12e1e:	687c      	ldr	r4, [r7, #4]
   12e20:	230a      	movs	r3, #10
   12e22:	18fb      	adds	r3, r7, r3
   12e24:	781a      	ldrb	r2, [r3, #0]
   12e26:	230b      	movs	r3, #11
   12e28:	18fb      	adds	r3, r7, r3
   12e2a:	7819      	ldrb	r1, [r3, #0]
   12e2c:	0023      	movs	r3, r4
   12e2e:	4c0b      	ldr	r4, [pc, #44]	; (12e5c <gfx_mono_draw_string+0xa0>)
   12e30:	47a0      	blx	r4
			x += font->width;
   12e32:	687b      	ldr	r3, [r7, #4]
   12e34:	7a19      	ldrb	r1, [r3, #8]
   12e36:	230b      	movs	r3, #11
   12e38:	18fb      	adds	r3, r7, r3
   12e3a:	220b      	movs	r2, #11
   12e3c:	18ba      	adds	r2, r7, r2
   12e3e:	7812      	ldrb	r2, [r2, #0]
   12e40:	188a      	adds	r2, r1, r2
   12e42:	701a      	strb	r2, [r3, #0]
		}
	} while (*(++str));
   12e44:	68fb      	ldr	r3, [r7, #12]
   12e46:	3301      	adds	r3, #1
   12e48:	60fb      	str	r3, [r7, #12]
   12e4a:	68fb      	ldr	r3, [r7, #12]
   12e4c:	781b      	ldrb	r3, [r3, #0]
   12e4e:	2b00      	cmp	r3, #0
   12e50:	d1c9      	bne.n	12de6 <gfx_mono_draw_string+0x2a>
}
   12e52:	46c0      	nop			; (mov r8, r8)
   12e54:	46bd      	mov	sp, r7
   12e56:	b007      	add	sp, #28
   12e58:	bd90      	pop	{r4, r7, pc}
   12e5a:	46c0      	nop			; (mov r8, r8)
   12e5c:	00012d51 	.word	0x00012d51

00012e60 <ssd1306_set_page_address>:
 * RAM.
 *
 * \param address the page address
 */
static inline void ssd1306_set_page_address(uint8_t address)
{
   12e60:	b580      	push	{r7, lr}
   12e62:	b082      	sub	sp, #8
   12e64:	af00      	add	r7, sp, #0
   12e66:	0002      	movs	r2, r0
   12e68:	1dfb      	adds	r3, r7, #7
   12e6a:	701a      	strb	r2, [r3, #0]
	// Make sure that the address is 4 bits (only 8 pages)
	address &= 0x0F;
   12e6c:	1dfb      	adds	r3, r7, #7
   12e6e:	1dfa      	adds	r2, r7, #7
   12e70:	7812      	ldrb	r2, [r2, #0]
   12e72:	210f      	movs	r1, #15
   12e74:	400a      	ands	r2, r1
   12e76:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_SET_PAGE_START_ADDRESS(address));
   12e78:	1dfb      	adds	r3, r7, #7
   12e7a:	781b      	ldrb	r3, [r3, #0]
   12e7c:	2250      	movs	r2, #80	; 0x50
   12e7e:	4252      	negs	r2, r2
   12e80:	4313      	orrs	r3, r2
   12e82:	b2db      	uxtb	r3, r3
   12e84:	0018      	movs	r0, r3
   12e86:	4b03      	ldr	r3, [pc, #12]	; (12e94 <ssd1306_set_page_address+0x34>)
   12e88:	4798      	blx	r3
}
   12e8a:	46c0      	nop			; (mov r8, r8)
   12e8c:	46bd      	mov	sp, r7
   12e8e:	b002      	add	sp, #8
   12e90:	bd80      	pop	{r7, pc}
   12e92:	46c0      	nop			; (mov r8, r8)
   12e94:	000121d1 	.word	0x000121d1

00012e98 <ssd1306_set_column_address>:
 * \brief Set current column in display RAM
 *
 * \param address the column address
 */
static inline void ssd1306_set_column_address(uint8_t address)
{
   12e98:	b580      	push	{r7, lr}
   12e9a:	b082      	sub	sp, #8
   12e9c:	af00      	add	r7, sp, #0
   12e9e:	0002      	movs	r2, r0
   12ea0:	1dfb      	adds	r3, r7, #7
   12ea2:	701a      	strb	r2, [r3, #0]
	// Make sure the address is 7 bits
	address &= 0x7F;
   12ea4:	1dfb      	adds	r3, r7, #7
   12ea6:	1dfa      	adds	r2, r7, #7
   12ea8:	7812      	ldrb	r2, [r2, #0]
   12eaa:	217f      	movs	r1, #127	; 0x7f
   12eac:	400a      	ands	r2, r1
   12eae:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_MSB(address >> 4)+ 0x02); //ESE516 change
   12eb0:	1dfb      	adds	r3, r7, #7
   12eb2:	781b      	ldrb	r3, [r3, #0]
   12eb4:	091b      	lsrs	r3, r3, #4
   12eb6:	b2db      	uxtb	r3, r3
   12eb8:	2210      	movs	r2, #16
   12eba:	4313      	orrs	r3, r2
   12ebc:	b2db      	uxtb	r3, r3
   12ebe:	3302      	adds	r3, #2
   12ec0:	b2db      	uxtb	r3, r3
   12ec2:	0018      	movs	r0, r3
   12ec4:	4b06      	ldr	r3, [pc, #24]	; (12ee0 <ssd1306_set_column_address+0x48>)
   12ec6:	4798      	blx	r3
	ssd1306_write_command(SSD1306_CMD_COL_ADD_SET_LSB(address & 0x0F));
   12ec8:	1dfb      	adds	r3, r7, #7
   12eca:	781b      	ldrb	r3, [r3, #0]
   12ecc:	220f      	movs	r2, #15
   12ece:	4013      	ands	r3, r2
   12ed0:	b2db      	uxtb	r3, r3
   12ed2:	0018      	movs	r0, r3
   12ed4:	4b02      	ldr	r3, [pc, #8]	; (12ee0 <ssd1306_set_column_address+0x48>)
   12ed6:	4798      	blx	r3
}
   12ed8:	46c0      	nop			; (mov r8, r8)
   12eda:	46bd      	mov	sp, r7
   12edc:	b002      	add	sp, #8
   12ede:	bd80      	pop	{r7, pc}
   12ee0:	000121d1 	.word	0x000121d1

00012ee4 <ssd1306_set_display_start_line_address>:
 * \brief Set the display start draw line address
 *
 * This function will set which line should be the start draw line for the OLED.
 */
static inline void ssd1306_set_display_start_line_address(uint8_t address)
{
   12ee4:	b580      	push	{r7, lr}
   12ee6:	b082      	sub	sp, #8
   12ee8:	af00      	add	r7, sp, #0
   12eea:	0002      	movs	r2, r0
   12eec:	1dfb      	adds	r3, r7, #7
   12eee:	701a      	strb	r2, [r3, #0]
	// Make sure address is 6 bits
	address &= 0x3F;
   12ef0:	1dfb      	adds	r3, r7, #7
   12ef2:	1dfa      	adds	r2, r7, #7
   12ef4:	7812      	ldrb	r2, [r2, #0]
   12ef6:	213f      	movs	r1, #63	; 0x3f
   12ef8:	400a      	ands	r2, r1
   12efa:	701a      	strb	r2, [r3, #0]
	ssd1306_write_command(SSD1306_CMD_SET_DISPLAY_START_LINE(address));
   12efc:	1dfb      	adds	r3, r7, #7
   12efe:	781b      	ldrb	r3, [r3, #0]
   12f00:	2240      	movs	r2, #64	; 0x40
   12f02:	4313      	orrs	r3, r2
   12f04:	b2db      	uxtb	r3, r3
   12f06:	0018      	movs	r0, r3
   12f08:	4b02      	ldr	r3, [pc, #8]	; (12f14 <ssd1306_set_display_start_line_address+0x30>)
   12f0a:	4798      	blx	r3
}
   12f0c:	46c0      	nop			; (mov r8, r8)
   12f0e:	46bd      	mov	sp, r7
   12f10:	b002      	add	sp, #8
   12f12:	bd80      	pop	{r7, pc}
   12f14:	000121d1 	.word	0x000121d1

00012f18 <gfx_mono_ssd1306_init>:
 * It will also write the graphic controller RAM to all zeroes.
 *
 * \note This function will clear the contents of the display.
 */
void gfx_mono_ssd1306_init(void)
{
   12f18:	b590      	push	{r4, r7, lr}
   12f1a:	b083      	sub	sp, #12
   12f1c:	af00      	add	r7, sp, #0
	uint8_t page;
	uint8_t column;

#ifdef CONFIG_SSD1306_FRAMEBUFFER
	gfx_mono_set_framebuffer(framebuffer);
   12f1e:	4b18      	ldr	r3, [pc, #96]	; (12f80 <gfx_mono_ssd1306_init+0x68>)
   12f20:	0018      	movs	r0, r3
   12f22:	4b18      	ldr	r3, [pc, #96]	; (12f84 <gfx_mono_ssd1306_init+0x6c>)
   12f24:	4798      	blx	r3
#endif

	/* Initialize the low-level display controller. */
	ssd1306_init();
   12f26:	4b18      	ldr	r3, [pc, #96]	; (12f88 <gfx_mono_ssd1306_init+0x70>)
   12f28:	4798      	blx	r3

	/* Set display to output data from line 0 */
	ssd1306_set_display_start_line_address(0);
   12f2a:	2000      	movs	r0, #0
   12f2c:	4b17      	ldr	r3, [pc, #92]	; (12f8c <gfx_mono_ssd1306_init+0x74>)
   12f2e:	4798      	blx	r3

	/* Clear the contents of the display.
	 * If using a framebuffer (SPI interface) it will both clear the
	 * controller memory and the framebuffer.
	 */
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
   12f30:	1dfb      	adds	r3, r7, #7
   12f32:	2200      	movs	r2, #0
   12f34:	701a      	strb	r2, [r3, #0]
   12f36:	e01a      	b.n	12f6e <gfx_mono_ssd1306_init+0x56>
		for (column = 0; column < 128; column++) {
   12f38:	1dbb      	adds	r3, r7, #6
   12f3a:	2200      	movs	r2, #0
   12f3c:	701a      	strb	r2, [r3, #0]
   12f3e:	e00c      	b.n	12f5a <gfx_mono_ssd1306_init+0x42>
			gfx_mono_ssd1306_put_byte(page, column, 0x00, true);
   12f40:	1dbb      	adds	r3, r7, #6
   12f42:	7819      	ldrb	r1, [r3, #0]
   12f44:	1dfb      	adds	r3, r7, #7
   12f46:	7818      	ldrb	r0, [r3, #0]
   12f48:	2301      	movs	r3, #1
   12f4a:	2200      	movs	r2, #0
   12f4c:	4c10      	ldr	r4, [pc, #64]	; (12f90 <gfx_mono_ssd1306_init+0x78>)
   12f4e:	47a0      	blx	r4
		for (column = 0; column < 128; column++) {
   12f50:	1dbb      	adds	r3, r7, #6
   12f52:	781a      	ldrb	r2, [r3, #0]
   12f54:	1dbb      	adds	r3, r7, #6
   12f56:	3201      	adds	r2, #1
   12f58:	701a      	strb	r2, [r3, #0]
   12f5a:	1dbb      	adds	r3, r7, #6
   12f5c:	781b      	ldrb	r3, [r3, #0]
   12f5e:	b25b      	sxtb	r3, r3
   12f60:	2b00      	cmp	r3, #0
   12f62:	daed      	bge.n	12f40 <gfx_mono_ssd1306_init+0x28>
	for (page = 0; page < GFX_MONO_LCD_PAGES; page++) {
   12f64:	1dfb      	adds	r3, r7, #7
   12f66:	781a      	ldrb	r2, [r3, #0]
   12f68:	1dfb      	adds	r3, r7, #7
   12f6a:	3201      	adds	r2, #1
   12f6c:	701a      	strb	r2, [r3, #0]
   12f6e:	1dfb      	adds	r3, r7, #7
   12f70:	781b      	ldrb	r3, [r3, #0]
   12f72:	2b05      	cmp	r3, #5
   12f74:	d9e0      	bls.n	12f38 <gfx_mono_ssd1306_init+0x20>
		}
	}
}
   12f76:	46c0      	nop			; (mov r8, r8)
   12f78:	46bd      	mov	sp, r7
   12f7a:	b003      	add	sp, #12
   12f7c:	bd90      	pop	{r4, r7, pc}
   12f7e:	46c0      	nop			; (mov r8, r8)
   12f80:	20000320 	.word	0x20000320
   12f84:	00012281 	.word	0x00012281
   12f88:	00012129 	.word	0x00012129
   12f8c:	00012ee5 	.word	0x00012ee5
   12f90:	00013089 	.word	0x00013089

00012f94 <gfx_mono_ssd1306_draw_pixel>:
	gfx_mono_ssd1306_draw_pixel(10, 10, GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_draw_pixel(gfx_coord_t x, gfx_coord_t y,
		gfx_coord_t color)
{
   12f94:	b590      	push	{r4, r7, lr}
   12f96:	b085      	sub	sp, #20
   12f98:	af00      	add	r7, sp, #0
   12f9a:	0004      	movs	r4, r0
   12f9c:	0008      	movs	r0, r1
   12f9e:	0011      	movs	r1, r2
   12fa0:	1dfb      	adds	r3, r7, #7
   12fa2:	1c22      	adds	r2, r4, #0
   12fa4:	701a      	strb	r2, [r3, #0]
   12fa6:	1dbb      	adds	r3, r7, #6
   12fa8:	1c02      	adds	r2, r0, #0
   12faa:	701a      	strb	r2, [r3, #0]
   12fac:	1d7b      	adds	r3, r7, #5
   12fae:	1c0a      	adds	r2, r1, #0
   12fb0:	701a      	strb	r2, [r3, #0]
	uint8_t page;
	uint8_t pixel_mask;
	uint8_t pixel_value;

	/* Discard pixels drawn outside the screen */
	if ((x > GFX_MONO_LCD_WIDTH - 1) || (y > GFX_MONO_LCD_HEIGHT - 1)) {
   12fb2:	1dfb      	adds	r3, r7, #7
   12fb4:	781b      	ldrb	r3, [r3, #0]
   12fb6:	2b3f      	cmp	r3, #63	; 0x3f
   12fb8:	d85d      	bhi.n	13076 <gfx_mono_ssd1306_draw_pixel+0xe2>
   12fba:	1dbb      	adds	r3, r7, #6
   12fbc:	781b      	ldrb	r3, [r3, #0]
   12fbe:	2b2f      	cmp	r3, #47	; 0x2f
   12fc0:	d859      	bhi.n	13076 <gfx_mono_ssd1306_draw_pixel+0xe2>
		return;
	}

	page = y / GFX_MONO_LCD_PIXELS_PER_BYTE;
   12fc2:	230e      	movs	r3, #14
   12fc4:	18fb      	adds	r3, r7, r3
   12fc6:	1dba      	adds	r2, r7, #6
   12fc8:	7812      	ldrb	r2, [r2, #0]
   12fca:	08d2      	lsrs	r2, r2, #3
   12fcc:	701a      	strb	r2, [r3, #0]
	pixel_mask = (1 << (y - (page * 8)));
   12fce:	1dbb      	adds	r3, r7, #6
   12fd0:	781a      	ldrb	r2, [r3, #0]
   12fd2:	230e      	movs	r3, #14
   12fd4:	18fb      	adds	r3, r7, r3
   12fd6:	781b      	ldrb	r3, [r3, #0]
   12fd8:	00db      	lsls	r3, r3, #3
   12fda:	1ad3      	subs	r3, r2, r3
   12fdc:	2201      	movs	r2, #1
   12fde:	409a      	lsls	r2, r3
   12fe0:	230d      	movs	r3, #13
   12fe2:	18fb      	adds	r3, r7, r3
   12fe4:	701a      	strb	r2, [r3, #0]
	/*
	 * Read the page containing the pixel in interest, then perform the
	 * requested action on this pixel before writing the page back to the
	 * display.
	 */
	pixel_value = gfx_mono_get_byte(page, x);
   12fe6:	230f      	movs	r3, #15
   12fe8:	18fc      	adds	r4, r7, r3
   12fea:	1dfb      	adds	r3, r7, #7
   12fec:	781a      	ldrb	r2, [r3, #0]
   12fee:	230e      	movs	r3, #14
   12ff0:	18fb      	adds	r3, r7, r3
   12ff2:	781b      	ldrb	r3, [r3, #0]
   12ff4:	0011      	movs	r1, r2
   12ff6:	0018      	movs	r0, r3
   12ff8:	4b21      	ldr	r3, [pc, #132]	; (13080 <gfx_mono_ssd1306_draw_pixel+0xec>)
   12ffa:	4798      	blx	r3
   12ffc:	0003      	movs	r3, r0
   12ffe:	7023      	strb	r3, [r4, #0]

	switch (color) {
   13000:	1d7b      	adds	r3, r7, #5
   13002:	781b      	ldrb	r3, [r3, #0]
   13004:	2b01      	cmp	r3, #1
   13006:	d004      	beq.n	13012 <gfx_mono_ssd1306_draw_pixel+0x7e>
   13008:	2b02      	cmp	r3, #2
   1300a:	d01d      	beq.n	13048 <gfx_mono_ssd1306_draw_pixel+0xb4>
   1300c:	2b00      	cmp	r3, #0
   1300e:	d00b      	beq.n	13028 <gfx_mono_ssd1306_draw_pixel+0x94>
	case GFX_PIXEL_XOR:
		pixel_value ^= pixel_mask;
		break;

	default:
		break;
   13010:	e025      	b.n	1305e <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value |= pixel_mask;
   13012:	230f      	movs	r3, #15
   13014:	18fb      	adds	r3, r7, r3
   13016:	220f      	movs	r2, #15
   13018:	18b9      	adds	r1, r7, r2
   1301a:	220d      	movs	r2, #13
   1301c:	18ba      	adds	r2, r7, r2
   1301e:	7809      	ldrb	r1, [r1, #0]
   13020:	7812      	ldrb	r2, [r2, #0]
   13022:	430a      	orrs	r2, r1
   13024:	701a      	strb	r2, [r3, #0]
		break;
   13026:	e01a      	b.n	1305e <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value &= ~pixel_mask;
   13028:	230d      	movs	r3, #13
   1302a:	18fb      	adds	r3, r7, r3
   1302c:	781b      	ldrb	r3, [r3, #0]
   1302e:	b25b      	sxtb	r3, r3
   13030:	43db      	mvns	r3, r3
   13032:	b25b      	sxtb	r3, r3
   13034:	220f      	movs	r2, #15
   13036:	18ba      	adds	r2, r7, r2
   13038:	7812      	ldrb	r2, [r2, #0]
   1303a:	b252      	sxtb	r2, r2
   1303c:	4013      	ands	r3, r2
   1303e:	b25a      	sxtb	r2, r3
   13040:	230f      	movs	r3, #15
   13042:	18fb      	adds	r3, r7, r3
   13044:	701a      	strb	r2, [r3, #0]
		break;
   13046:	e00a      	b.n	1305e <gfx_mono_ssd1306_draw_pixel+0xca>
		pixel_value ^= pixel_mask;
   13048:	230f      	movs	r3, #15
   1304a:	18fb      	adds	r3, r7, r3
   1304c:	220f      	movs	r2, #15
   1304e:	18b9      	adds	r1, r7, r2
   13050:	220d      	movs	r2, #13
   13052:	18ba      	adds	r2, r7, r2
   13054:	7809      	ldrb	r1, [r1, #0]
   13056:	7812      	ldrb	r2, [r2, #0]
   13058:	404a      	eors	r2, r1
   1305a:	701a      	strb	r2, [r3, #0]
		break;
   1305c:	46c0      	nop			; (mov r8, r8)
	}

	gfx_mono_put_byte(page, x, pixel_value);
   1305e:	230f      	movs	r3, #15
   13060:	18fb      	adds	r3, r7, r3
   13062:	781a      	ldrb	r2, [r3, #0]
   13064:	1dfb      	adds	r3, r7, #7
   13066:	7819      	ldrb	r1, [r3, #0]
   13068:	230e      	movs	r3, #14
   1306a:	18fb      	adds	r3, r7, r3
   1306c:	7818      	ldrb	r0, [r3, #0]
   1306e:	2300      	movs	r3, #0
   13070:	4c04      	ldr	r4, [pc, #16]	; (13084 <gfx_mono_ssd1306_draw_pixel+0xf0>)
   13072:	47a0      	blx	r4
   13074:	e000      	b.n	13078 <gfx_mono_ssd1306_draw_pixel+0xe4>
		return;
   13076:	46c0      	nop			; (mov r8, r8)
}
   13078:	46bd      	mov	sp, r7
   1307a:	b005      	add	sp, #20
   1307c:	bd90      	pop	{r4, r7, pc}
   1307e:	46c0      	nop			; (mov r8, r8)
   13080:	00013129 	.word	0x00013129
   13084:	00013089 	.word	0x00013089

00013088 <gfx_mono_ssd1306_put_byte>:
	gfx_mono_ssd1306_put_byte(0, 0, 0xFF, false);
\endcode
  */
 void gfx_mono_ssd1306_put_byte(gfx_coord_t page, gfx_coord_t column,
		uint8_t data, bool force)
{
   13088:	b5b0      	push	{r4, r5, r7, lr}
   1308a:	b082      	sub	sp, #8
   1308c:	af00      	add	r7, sp, #0
   1308e:	0005      	movs	r5, r0
   13090:	000c      	movs	r4, r1
   13092:	0010      	movs	r0, r2
   13094:	0019      	movs	r1, r3
   13096:	1dfb      	adds	r3, r7, #7
   13098:	1c2a      	adds	r2, r5, #0
   1309a:	701a      	strb	r2, [r3, #0]
   1309c:	1dbb      	adds	r3, r7, #6
   1309e:	1c22      	adds	r2, r4, #0
   130a0:	701a      	strb	r2, [r3, #0]
   130a2:	1d7b      	adds	r3, r7, #5
   130a4:	1c02      	adds	r2, r0, #0
   130a6:	701a      	strb	r2, [r3, #0]
   130a8:	1d3b      	adds	r3, r7, #4
   130aa:	1c0a      	adds	r2, r1, #0
   130ac:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	if (!force && data == gfx_mono_framebuffer_get_byte(page, column)) {
   130ae:	1d3b      	adds	r3, r7, #4
   130b0:	781b      	ldrb	r3, [r3, #0]
   130b2:	2201      	movs	r2, #1
   130b4:	4053      	eors	r3, r2
   130b6:	b2db      	uxtb	r3, r3
   130b8:	2b00      	cmp	r3, #0
   130ba:	d00d      	beq.n	130d8 <gfx_mono_ssd1306_put_byte+0x50>
   130bc:	1dbb      	adds	r3, r7, #6
   130be:	781a      	ldrb	r2, [r3, #0]
   130c0:	1dfb      	adds	r3, r7, #7
   130c2:	781b      	ldrb	r3, [r3, #0]
   130c4:	0011      	movs	r1, r2
   130c6:	0018      	movs	r0, r3
   130c8:	4b12      	ldr	r3, [pc, #72]	; (13114 <gfx_mono_ssd1306_put_byte+0x8c>)
   130ca:	4798      	blx	r3
   130cc:	0003      	movs	r3, r0
   130ce:	001a      	movs	r2, r3
   130d0:	1d7b      	adds	r3, r7, #5
   130d2:	781b      	ldrb	r3, [r3, #0]
   130d4:	4293      	cmp	r3, r2
   130d6:	d018      	beq.n	1310a <gfx_mono_ssd1306_put_byte+0x82>
		return;
	}
	gfx_mono_framebuffer_put_byte(page, column, data);
   130d8:	1d7b      	adds	r3, r7, #5
   130da:	781a      	ldrb	r2, [r3, #0]
   130dc:	1dbb      	adds	r3, r7, #6
   130de:	7819      	ldrb	r1, [r3, #0]
   130e0:	1dfb      	adds	r3, r7, #7
   130e2:	781b      	ldrb	r3, [r3, #0]
   130e4:	0018      	movs	r0, r3
   130e6:	4b0c      	ldr	r3, [pc, #48]	; (13118 <gfx_mono_ssd1306_put_byte+0x90>)
   130e8:	4798      	blx	r3
#endif

	ssd1306_set_page_address(page);
   130ea:	1dfb      	adds	r3, r7, #7
   130ec:	781b      	ldrb	r3, [r3, #0]
   130ee:	0018      	movs	r0, r3
   130f0:	4b0a      	ldr	r3, [pc, #40]	; (1311c <gfx_mono_ssd1306_put_byte+0x94>)
   130f2:	4798      	blx	r3
	ssd1306_set_column_address(column);
   130f4:	1dbb      	adds	r3, r7, #6
   130f6:	781b      	ldrb	r3, [r3, #0]
   130f8:	0018      	movs	r0, r3
   130fa:	4b09      	ldr	r3, [pc, #36]	; (13120 <gfx_mono_ssd1306_put_byte+0x98>)
   130fc:	4798      	blx	r3

	ssd1306_write_data(data);
   130fe:	1d7b      	adds	r3, r7, #5
   13100:	781b      	ldrb	r3, [r3, #0]
   13102:	0018      	movs	r0, r3
   13104:	4b07      	ldr	r3, [pc, #28]	; (13124 <gfx_mono_ssd1306_put_byte+0x9c>)
   13106:	4798      	blx	r3
   13108:	e000      	b.n	1310c <gfx_mono_ssd1306_put_byte+0x84>
		return;
   1310a:	46c0      	nop			; (mov r8, r8)
}
   1310c:	46bd      	mov	sp, r7
   1310e:	b002      	add	sp, #8
   13110:	bdb0      	pop	{r4, r5, r7, pc}
   13112:	46c0      	nop			; (mov r8, r8)
   13114:	000122e1 	.word	0x000122e1
   13118:	0001229d 	.word	0x0001229d
   1311c:	00012e61 	.word	0x00012e61
   13120:	00012e99 	.word	0x00012e99
   13124:	00012229 	.word	0x00012229

00013128 <gfx_mono_ssd1306_get_byte>:
 * \code
	data = gfx_mono_ssd1306_get_byte(0, 0);
\endcode
 */
uint8_t gfx_mono_ssd1306_get_byte(gfx_coord_t page, gfx_coord_t column)
{
   13128:	b580      	push	{r7, lr}
   1312a:	b082      	sub	sp, #8
   1312c:	af00      	add	r7, sp, #0
   1312e:	0002      	movs	r2, r0
   13130:	1dfb      	adds	r3, r7, #7
   13132:	701a      	strb	r2, [r3, #0]
   13134:	1dbb      	adds	r3, r7, #6
   13136:	1c0a      	adds	r2, r1, #0
   13138:	701a      	strb	r2, [r3, #0]
#ifdef CONFIG_SSD1306_FRAMEBUFFER
	return gfx_mono_framebuffer_get_byte(page, column);
   1313a:	1dbb      	adds	r3, r7, #6
   1313c:	781a      	ldrb	r2, [r3, #0]
   1313e:	1dfb      	adds	r3, r7, #7
   13140:	781b      	ldrb	r3, [r3, #0]
   13142:	0011      	movs	r1, r2
   13144:	0018      	movs	r0, r3
   13146:	4b03      	ldr	r3, [pc, #12]	; (13154 <gfx_mono_ssd1306_get_byte+0x2c>)
   13148:	4798      	blx	r3
   1314a:	0003      	movs	r3, r0
	ssd1306_set_column_address(column);

	return ssd1306_read_data();

#endif
}
   1314c:	0018      	movs	r0, r3
   1314e:	46bd      	mov	sp, r7
   13150:	b002      	add	sp, #8
   13152:	bd80      	pop	{r7, pc}
   13154:	000122e1 	.word	0x000122e1

00013158 <gfx_mono_ssd1306_mask_byte>:
	gfx_mono_ssd1306_mask_byte(0,0,0xAA,GFX_PIXEL_XOR);
\endcode
 */
void gfx_mono_ssd1306_mask_byte(gfx_coord_t page, gfx_coord_t column,
		gfx_mono_color_t pixel_mask, gfx_mono_color_t color)
{
   13158:	b5b0      	push	{r4, r5, r7, lr}
   1315a:	b084      	sub	sp, #16
   1315c:	af00      	add	r7, sp, #0
   1315e:	0005      	movs	r5, r0
   13160:	000c      	movs	r4, r1
   13162:	0010      	movs	r0, r2
   13164:	0019      	movs	r1, r3
   13166:	1dfb      	adds	r3, r7, #7
   13168:	1c2a      	adds	r2, r5, #0
   1316a:	701a      	strb	r2, [r3, #0]
   1316c:	1dbb      	adds	r3, r7, #6
   1316e:	1c22      	adds	r2, r4, #0
   13170:	701a      	strb	r2, [r3, #0]
   13172:	1d7b      	adds	r3, r7, #5
   13174:	1c02      	adds	r2, r0, #0
   13176:	701a      	strb	r2, [r3, #0]
   13178:	1d3b      	adds	r3, r7, #4
   1317a:	1c0a      	adds	r2, r1, #0
   1317c:	701a      	strb	r2, [r3, #0]
	gfx_mono_color_t temp = gfx_mono_get_byte(page, column);
   1317e:	230f      	movs	r3, #15
   13180:	18fc      	adds	r4, r7, r3
   13182:	1dbb      	adds	r3, r7, #6
   13184:	781a      	ldrb	r2, [r3, #0]
   13186:	1dfb      	adds	r3, r7, #7
   13188:	781b      	ldrb	r3, [r3, #0]
   1318a:	0011      	movs	r1, r2
   1318c:	0018      	movs	r0, r3
   1318e:	4b1f      	ldr	r3, [pc, #124]	; (1320c <gfx_mono_ssd1306_mask_byte+0xb4>)
   13190:	4798      	blx	r3
   13192:	0003      	movs	r3, r0
   13194:	7023      	strb	r3, [r4, #0]

	switch (color) {
   13196:	1d3b      	adds	r3, r7, #4
   13198:	781b      	ldrb	r3, [r3, #0]
   1319a:	2b01      	cmp	r3, #1
   1319c:	d004      	beq.n	131a8 <gfx_mono_ssd1306_mask_byte+0x50>
   1319e:	2b02      	cmp	r3, #2
   131a0:	d01b      	beq.n	131da <gfx_mono_ssd1306_mask_byte+0x82>
   131a2:	2b00      	cmp	r3, #0
   131a4:	d00a      	beq.n	131bc <gfx_mono_ssd1306_mask_byte+0x64>
	case GFX_PIXEL_XOR:
		temp ^= pixel_mask;
		break;

	default:
		break;
   131a6:	e022      	b.n	131ee <gfx_mono_ssd1306_mask_byte+0x96>
		temp |= pixel_mask;
   131a8:	230f      	movs	r3, #15
   131aa:	18fb      	adds	r3, r7, r3
   131ac:	220f      	movs	r2, #15
   131ae:	18b9      	adds	r1, r7, r2
   131b0:	1d7a      	adds	r2, r7, #5
   131b2:	7809      	ldrb	r1, [r1, #0]
   131b4:	7812      	ldrb	r2, [r2, #0]
   131b6:	430a      	orrs	r2, r1
   131b8:	701a      	strb	r2, [r3, #0]
		break;
   131ba:	e018      	b.n	131ee <gfx_mono_ssd1306_mask_byte+0x96>
		temp &= ~pixel_mask;
   131bc:	1d7b      	adds	r3, r7, #5
   131be:	781b      	ldrb	r3, [r3, #0]
   131c0:	b25b      	sxtb	r3, r3
   131c2:	43db      	mvns	r3, r3
   131c4:	b25b      	sxtb	r3, r3
   131c6:	220f      	movs	r2, #15
   131c8:	18ba      	adds	r2, r7, r2
   131ca:	7812      	ldrb	r2, [r2, #0]
   131cc:	b252      	sxtb	r2, r2
   131ce:	4013      	ands	r3, r2
   131d0:	b25a      	sxtb	r2, r3
   131d2:	230f      	movs	r3, #15
   131d4:	18fb      	adds	r3, r7, r3
   131d6:	701a      	strb	r2, [r3, #0]
		break;
   131d8:	e009      	b.n	131ee <gfx_mono_ssd1306_mask_byte+0x96>
		temp ^= pixel_mask;
   131da:	230f      	movs	r3, #15
   131dc:	18fb      	adds	r3, r7, r3
   131de:	220f      	movs	r2, #15
   131e0:	18b9      	adds	r1, r7, r2
   131e2:	1d7a      	adds	r2, r7, #5
   131e4:	7809      	ldrb	r1, [r1, #0]
   131e6:	7812      	ldrb	r2, [r2, #0]
   131e8:	404a      	eors	r2, r1
   131ea:	701a      	strb	r2, [r3, #0]
		break;
   131ec:	46c0      	nop			; (mov r8, r8)
	}

	gfx_mono_put_byte(page, column, temp);
   131ee:	230f      	movs	r3, #15
   131f0:	18fb      	adds	r3, r7, r3
   131f2:	781a      	ldrb	r2, [r3, #0]
   131f4:	1dbb      	adds	r3, r7, #6
   131f6:	7819      	ldrb	r1, [r3, #0]
   131f8:	1dfb      	adds	r3, r7, #7
   131fa:	7818      	ldrb	r0, [r3, #0]
   131fc:	2300      	movs	r3, #0
   131fe:	4c04      	ldr	r4, [pc, #16]	; (13210 <gfx_mono_ssd1306_mask_byte+0xb8>)
   13200:	47a0      	blx	r4
}
   13202:	46c0      	nop			; (mov r8, r8)
   13204:	46bd      	mov	sp, r7
   13206:	b004      	add	sp, #16
   13208:	bdb0      	pop	{r4, r5, r7, pc}
   1320a:	46c0      	nop			; (mov r8, r8)
   1320c:	00013129 	.word	0x00013129
   13210:	00013089 	.word	0x00013089

00013214 <adc_is_syncing>:
 * \retval true if the module synchronization is ongoing
 * \retval false if the module has completed synchronization
 */
static inline bool adc_is_syncing(
	struct adc_module *const module_inst)
{
   13214:	b580      	push	{r7, lr}
   13216:	b084      	sub	sp, #16
   13218:	af00      	add	r7, sp, #0
   1321a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
   1321c:	687b      	ldr	r3, [r7, #4]
   1321e:	681b      	ldr	r3, [r3, #0]
   13220:	60fb      	str	r3, [r7, #12]

	if (adc_module->STATUS.reg & ADC_STATUS_SYNCBUSY) {
   13222:	68fb      	ldr	r3, [r7, #12]
   13224:	7e5b      	ldrb	r3, [r3, #25]
   13226:	b2db      	uxtb	r3, r3
   13228:	b25b      	sxtb	r3, r3
   1322a:	2b00      	cmp	r3, #0
   1322c:	da01      	bge.n	13232 <adc_is_syncing+0x1e>
		return true;
   1322e:	2301      	movs	r3, #1
   13230:	e000      	b.n	13234 <adc_is_syncing+0x20>
	}

	return false;
   13232:	2300      	movs	r3, #0
}
   13234:	0018      	movs	r0, r3
   13236:	46bd      	mov	sp, r7
   13238:	b004      	add	sp, #16
   1323a:	bd80      	pop	{r7, pc}

0001323c <adc_start_conversion>:
 *
 * \param[in] module_inst  Pointer to the ADC software instance struct
 */
static inline void adc_start_conversion(
		struct adc_module *const module_inst)
{
   1323c:	b580      	push	{r7, lr}
   1323e:	b084      	sub	sp, #16
   13240:	af00      	add	r7, sp, #0
   13242:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   13244:	687b      	ldr	r3, [r7, #4]
   13246:	681b      	ldr	r3, [r3, #0]
   13248:	60fb      	str	r3, [r7, #12]

	while (adc_is_syncing(module_inst)) {
   1324a:	46c0      	nop			; (mov r8, r8)
   1324c:	687b      	ldr	r3, [r7, #4]
   1324e:	0018      	movs	r0, r3
   13250:	4b0b      	ldr	r3, [pc, #44]	; (13280 <adc_start_conversion+0x44>)
   13252:	4798      	blx	r3
   13254:	1e03      	subs	r3, r0, #0
   13256:	d1f9      	bne.n	1324c <adc_start_conversion+0x10>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
   13258:	68fb      	ldr	r3, [r7, #12]
   1325a:	7b1b      	ldrb	r3, [r3, #12]
   1325c:	b2db      	uxtb	r3, r3
   1325e:	2202      	movs	r2, #2
   13260:	4313      	orrs	r3, r2
   13262:	b2da      	uxtb	r2, r3
   13264:	68fb      	ldr	r3, [r7, #12]
   13266:	731a      	strb	r2, [r3, #12]

	while (adc_is_syncing(module_inst)) {
   13268:	46c0      	nop			; (mov r8, r8)
   1326a:	687b      	ldr	r3, [r7, #4]
   1326c:	0018      	movs	r0, r3
   1326e:	4b04      	ldr	r3, [pc, #16]	; (13280 <adc_start_conversion+0x44>)
   13270:	4798      	blx	r3
   13272:	1e03      	subs	r3, r0, #0
   13274:	d1f9      	bne.n	1326a <adc_start_conversion+0x2e>
		/* Wait for synchronization */
	}
}
   13276:	46c0      	nop			; (mov r8, r8)
   13278:	46bd      	mov	sp, r7
   1327a:	b004      	add	sp, #16
   1327c:	bd80      	pop	{r7, pc}
   1327e:	46c0      	nop			; (mov r8, r8)
   13280:	00013215 	.word	0x00013215

00013284 <adc_disable_interrupt>:
 * \param[in] module_inst Pointer to the ADC software instance struct
 * \param[in] interrupt Interrupt to disable
 */
static inline void adc_disable_interrupt(struct adc_module *const module_inst,
		enum adc_interrupt_flag interrupt)
{
   13284:	b580      	push	{r7, lr}
   13286:	b084      	sub	sp, #16
   13288:	af00      	add	r7, sp, #0
   1328a:	6078      	str	r0, [r7, #4]
   1328c:	000a      	movs	r2, r1
   1328e:	1cfb      	adds	r3, r7, #3
   13290:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
   13292:	687b      	ldr	r3, [r7, #4]
   13294:	681b      	ldr	r3, [r3, #0]
   13296:	60fb      	str	r3, [r7, #12]
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
   13298:	68fb      	ldr	r3, [r7, #12]
   1329a:	1cfa      	adds	r2, r7, #3
   1329c:	7812      	ldrb	r2, [r2, #0]
   1329e:	759a      	strb	r2, [r3, #22]
}
   132a0:	46c0      	nop			; (mov r8, r8)
   132a2:	46bd      	mov	sp, r7
   132a4:	b004      	add	sp, #16
   132a6:	bd80      	pop	{r7, pc}

000132a8 <_adc_interrupt_handler>:
#include "adc_callback.h"

struct adc_module *_adc_instances[ADC_INST_NUM];

static void _adc_interrupt_handler(const uint8_t instance)
{
   132a8:	b580      	push	{r7, lr}
   132aa:	b084      	sub	sp, #16
   132ac:	af00      	add	r7, sp, #0
   132ae:	0002      	movs	r2, r0
   132b0:	1dfb      	adds	r3, r7, #7
   132b2:	701a      	strb	r2, [r3, #0]
	struct adc_module *module = _adc_instances[instance];
   132b4:	1dfb      	adds	r3, r7, #7
   132b6:	781a      	ldrb	r2, [r3, #0]
   132b8:	4b47      	ldr	r3, [pc, #284]	; (133d8 <_adc_interrupt_handler+0x130>)
   132ba:	0092      	lsls	r2, r2, #2
   132bc:	58d3      	ldr	r3, [r2, r3]
   132be:	60fb      	str	r3, [r7, #12]

	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
   132c0:	68fb      	ldr	r3, [r7, #12]
   132c2:	681b      	ldr	r3, [r3, #0]
   132c4:	7e1b      	ldrb	r3, [r3, #24]
   132c6:	b2da      	uxtb	r2, r3
   132c8:	68fb      	ldr	r3, [r7, #12]
   132ca:	681b      	ldr	r3, [r3, #0]
   132cc:	7ddb      	ldrb	r3, [r3, #23]
   132ce:	b2db      	uxtb	r3, r3
   132d0:	4013      	ands	r3, r2
   132d2:	b2db      	uxtb	r3, r3
   132d4:	60bb      	str	r3, [r7, #8]

	if (flags & ADC_INTFLAG_RESRDY) {
   132d6:	68bb      	ldr	r3, [r7, #8]
   132d8:	2201      	movs	r2, #1
   132da:	4013      	ands	r3, r2
   132dc:	d045      	beq.n	1336a <_adc_interrupt_handler+0xc2>
		/* clear interrupt flag */
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
   132de:	68fb      	ldr	r3, [r7, #12]
   132e0:	681b      	ldr	r3, [r3, #0]
   132e2:	2201      	movs	r2, #1
   132e4:	761a      	strb	r2, [r3, #24]

		while (adc_is_syncing(module)) {
   132e6:	46c0      	nop			; (mov r8, r8)
   132e8:	68fb      	ldr	r3, [r7, #12]
   132ea:	0018      	movs	r0, r3
   132ec:	4b3b      	ldr	r3, [pc, #236]	; (133dc <_adc_interrupt_handler+0x134>)
   132ee:	4798      	blx	r3
   132f0:	1e03      	subs	r3, r0, #0
   132f2:	d1f9      	bne.n	132e8 <_adc_interrupt_handler+0x40>
			/* Wait for synchronization */
		}

		/* store ADC result in job buffer */
		*(module->job_buffer++) = module->hw->RESULT.reg;
   132f4:	68fb      	ldr	r3, [r7, #12]
   132f6:	695b      	ldr	r3, [r3, #20]
   132f8:	1c99      	adds	r1, r3, #2
   132fa:	68fa      	ldr	r2, [r7, #12]
   132fc:	6151      	str	r1, [r2, #20]
   132fe:	68fa      	ldr	r2, [r7, #12]
   13300:	6812      	ldr	r2, [r2, #0]
   13302:	8b52      	ldrh	r2, [r2, #26]
   13304:	b292      	uxth	r2, r2
   13306:	801a      	strh	r2, [r3, #0]

		if (--module->remaining_conversions > 0) {
   13308:	68fb      	ldr	r3, [r7, #12]
   1330a:	8b1b      	ldrh	r3, [r3, #24]
   1330c:	b29b      	uxth	r3, r3
   1330e:	3b01      	subs	r3, #1
   13310:	b29b      	uxth	r3, r3
   13312:	68fa      	ldr	r2, [r7, #12]
   13314:	1c19      	adds	r1, r3, #0
   13316:	8311      	strh	r1, [r2, #24]
   13318:	2b00      	cmp	r3, #0
   1331a:	d008      	beq.n	1332e <_adc_interrupt_handler+0x86>
			if (module->software_trigger == true) {
   1331c:	68fb      	ldr	r3, [r7, #12]
   1331e:	7f5b      	ldrb	r3, [r3, #29]
   13320:	2b00      	cmp	r3, #0
   13322:	d022      	beq.n	1336a <_adc_interrupt_handler+0xc2>
				adc_start_conversion(module);
   13324:	68fb      	ldr	r3, [r7, #12]
   13326:	0018      	movs	r0, r3
   13328:	4b2d      	ldr	r3, [pc, #180]	; (133e0 <_adc_interrupt_handler+0x138>)
   1332a:	4798      	blx	r3
   1332c:	e01d      	b.n	1336a <_adc_interrupt_handler+0xc2>
			}
		} else {
			adc_disable_interrupt(module, ADC_INTERRUPT_RESULT_READY);
   1332e:	68fb      	ldr	r3, [r7, #12]
   13330:	2101      	movs	r1, #1
   13332:	0018      	movs	r0, r3
   13334:	4b2b      	ldr	r3, [pc, #172]	; (133e4 <_adc_interrupt_handler+0x13c>)
   13336:	4798      	blx	r3
			if (module->job_status == STATUS_BUSY) {
   13338:	68fb      	ldr	r3, [r7, #12]
   1333a:	7f1b      	ldrb	r3, [r3, #28]
   1333c:	b2db      	uxtb	r3, r3
   1333e:	2b05      	cmp	r3, #5
   13340:	d113      	bne.n	1336a <_adc_interrupt_handler+0xc2>
				/* job is complete. update status,disable interrupt
					*and call callback */
				module->job_status = STATUS_OK;
   13342:	68fb      	ldr	r3, [r7, #12]
   13344:	2200      	movs	r2, #0
   13346:	771a      	strb	r2, [r3, #28]

				if ((module->enabled_callback_mask &
   13348:	68fb      	ldr	r3, [r7, #12]
   1334a:	7edb      	ldrb	r3, [r3, #27]
   1334c:	001a      	movs	r2, r3
   1334e:	2301      	movs	r3, #1
   13350:	4013      	ands	r3, r2
   13352:	d00a      	beq.n	1336a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
					(module->registered_callback_mask &
   13354:	68fb      	ldr	r3, [r7, #12]
   13356:	7e9b      	ldrb	r3, [r3, #26]
   13358:	001a      	movs	r2, r3
   1335a:	2301      	movs	r3, #1
   1335c:	4013      	ands	r3, r2
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
   1335e:	d004      	beq.n	1336a <_adc_interrupt_handler+0xc2>
						(1 << ADC_CALLBACK_READ_BUFFER))) {
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
   13360:	68fb      	ldr	r3, [r7, #12]
   13362:	689b      	ldr	r3, [r3, #8]
   13364:	68fa      	ldr	r2, [r7, #12]
   13366:	0010      	movs	r0, r2
   13368:	4798      	blx	r3
				}
			}
		}
	}

	if (flags & ADC_INTFLAG_WINMON) {
   1336a:	68bb      	ldr	r3, [r7, #8]
   1336c:	2204      	movs	r2, #4
   1336e:	4013      	ands	r3, r2
   13370:	d014      	beq.n	1339c <_adc_interrupt_handler+0xf4>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
   13372:	68fb      	ldr	r3, [r7, #12]
   13374:	681b      	ldr	r3, [r3, #0]
   13376:	2204      	movs	r2, #4
   13378:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   1337a:	68fb      	ldr	r3, [r7, #12]
   1337c:	7edb      	ldrb	r3, [r3, #27]
   1337e:	001a      	movs	r2, r3
   13380:	2302      	movs	r3, #2
   13382:	4013      	ands	r3, r2
   13384:	d00a      	beq.n	1339c <_adc_interrupt_handler+0xf4>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_WINDOW))) {
   13386:	68fb      	ldr	r3, [r7, #12]
   13388:	7e9b      	ldrb	r3, [r3, #26]
   1338a:	001a      	movs	r2, r3
   1338c:	2302      	movs	r3, #2
   1338e:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
   13390:	d004      	beq.n	1339c <_adc_interrupt_handler+0xf4>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
   13392:	68fb      	ldr	r3, [r7, #12]
   13394:	68db      	ldr	r3, [r3, #12]
   13396:	68fa      	ldr	r2, [r7, #12]
   13398:	0010      	movs	r0, r2
   1339a:	4798      	blx	r3
		}

	}

	if (flags & ADC_INTFLAG_OVERRUN) {
   1339c:	68bb      	ldr	r3, [r7, #8]
   1339e:	2202      	movs	r2, #2
   133a0:	4013      	ands	r3, r2
   133a2:	d014      	beq.n	133ce <_adc_interrupt_handler+0x126>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
   133a4:	68fb      	ldr	r3, [r7, #12]
   133a6:	681b      	ldr	r3, [r3, #0]
   133a8:	2202      	movs	r2, #2
   133aa:	761a      	strb	r2, [r3, #24]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   133ac:	68fb      	ldr	r3, [r7, #12]
   133ae:	7edb      	ldrb	r3, [r3, #27]
   133b0:	001a      	movs	r2, r3
   133b2:	2304      	movs	r3, #4
   133b4:	4013      	ands	r3, r2
   133b6:	d00a      	beq.n	133ce <_adc_interrupt_handler+0x126>
				(module->registered_callback_mask & (1 << ADC_CALLBACK_ERROR))) {
   133b8:	68fb      	ldr	r3, [r7, #12]
   133ba:	7e9b      	ldrb	r3, [r3, #26]
   133bc:	001a      	movs	r2, r3
   133be:	2304      	movs	r3, #4
   133c0:	4013      	ands	r3, r2
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
   133c2:	d004      	beq.n	133ce <_adc_interrupt_handler+0x126>
			(module->callback[ADC_CALLBACK_ERROR])(module);
   133c4:	68fb      	ldr	r3, [r7, #12]
   133c6:	691b      	ldr	r3, [r3, #16]
   133c8:	68fa      	ldr	r2, [r7, #12]
   133ca:	0010      	movs	r0, r2
   133cc:	4798      	blx	r3
		}
	}
}
   133ce:	46c0      	nop			; (mov r8, r8)
   133d0:	46bd      	mov	sp, r7
   133d2:	b004      	add	sp, #16
   133d4:	bd80      	pop	{r7, pc}
   133d6:	46c0      	nop			; (mov r8, r8)
   133d8:	20004780 	.word	0x20004780
   133dc:	00013215 	.word	0x00013215
   133e0:	0001323d 	.word	0x0001323d
   133e4:	00013285 	.word	0x00013285

000133e8 <ADC_Handler>:

/** Interrupt handler for the ADC module. */
void ADC_Handler(void)
{
   133e8:	b580      	push	{r7, lr}
   133ea:	af00      	add	r7, sp, #0
	_adc_interrupt_handler(0);
   133ec:	2000      	movs	r0, #0
   133ee:	4b02      	ldr	r3, [pc, #8]	; (133f8 <ADC_Handler+0x10>)
   133f0:	4798      	blx	r3
}
   133f2:	46c0      	nop			; (mov r8, r8)
   133f4:	46bd      	mov	sp, r7
   133f6:	bd80      	pop	{r7, pc}
   133f8:	000132a9 	.word	0x000132a9

000133fc <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
   133fc:	b580      	push	{r7, lr}
   133fe:	b082      	sub	sp, #8
   13400:	af00      	add	r7, sp, #0
   13402:	0002      	movs	r2, r0
   13404:	1dfb      	adds	r3, r7, #7
   13406:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   13408:	4a07      	ldr	r2, [pc, #28]	; (13428 <system_interrupt_disable+0x2c>)
   1340a:	1dfb      	adds	r3, r7, #7
   1340c:	781b      	ldrb	r3, [r3, #0]
   1340e:	0019      	movs	r1, r3
   13410:	231f      	movs	r3, #31
   13412:	400b      	ands	r3, r1
   13414:	2101      	movs	r1, #1
   13416:	4099      	lsls	r1, r3
   13418:	000b      	movs	r3, r1
   1341a:	0019      	movs	r1, r3
   1341c:	2380      	movs	r3, #128	; 0x80
   1341e:	50d1      	str	r1, [r2, r3]
}
   13420:	46c0      	nop			; (mov r8, r8)
   13422:	46bd      	mov	sp, r7
   13424:	b002      	add	sp, #8
   13426:	bd80      	pop	{r7, pc}
   13428:	e000e100 	.word	0xe000e100

0001342c <_dac_interrupt_handler>:
 *  Internal handler for DAC module interrupts.
 *
 * \param[in] instance  DAC instance number
 */
static void _dac_interrupt_handler(const uint8_t instance)
{
   1342c:	b580      	push	{r7, lr}
   1342e:	b084      	sub	sp, #16
   13430:	af00      	add	r7, sp, #0
   13432:	0002      	movs	r2, r0
   13434:	1dfb      	adds	r3, r7, #7
   13436:	701a      	strb	r2, [r3, #0]
	struct dac_module *module = _dac_instances[instance];
   13438:	1dfb      	adds	r3, r7, #7
   1343a:	781a      	ldrb	r2, [r3, #0]
   1343c:	4b37      	ldr	r3, [pc, #220]	; (1351c <_dac_interrupt_handler+0xf0>)
   1343e:	0092      	lsls	r2, r2, #2
   13440:	58d3      	ldr	r3, [r2, r3]
   13442:	60fb      	str	r3, [r7, #12]
	Dac *const dac_hw = module->hw;
   13444:	68fb      	ldr	r3, [r7, #12]
   13446:	681b      	ldr	r3, [r3, #0]
   13448:	60bb      	str	r3, [r7, #8]

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_UNDERRUN) {
   1344a:	68bb      	ldr	r3, [r7, #8]
   1344c:	799b      	ldrb	r3, [r3, #6]
   1344e:	b2db      	uxtb	r3, r3
   13450:	001a      	movs	r2, r3
   13452:	2301      	movs	r3, #1
   13454:	4013      	ands	r3, r2
   13456:	d00e      	beq.n	13476 <_dac_interrupt_handler+0x4a>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_UNDERRUN;
   13458:	68bb      	ldr	r3, [r7, #8]
   1345a:	2201      	movs	r2, #1
   1345c:	719a      	strb	r2, [r3, #6]

		if ((module->callback) &&
   1345e:	68fb      	ldr	r3, [r7, #12]
   13460:	3314      	adds	r3, #20
   13462:	2b00      	cmp	r3, #0
   13464:	d007      	beq.n	13476 <_dac_interrupt_handler+0x4a>
			 (module->callback_enable[DAC_CALLBACK_DATA_UNDERRUN])){
   13466:	68fb      	ldr	r3, [r7, #12]
   13468:	7c5b      	ldrb	r3, [r3, #17]
		if ((module->callback) &&
   1346a:	2b00      	cmp	r3, #0
   1346c:	d003      	beq.n	13476 <_dac_interrupt_handler+0x4a>
			module->callback[DAC_CALLBACK_DATA_UNDERRUN](0);
   1346e:	68fb      	ldr	r3, [r7, #12]
   13470:	699b      	ldr	r3, [r3, #24]
   13472:	2000      	movs	r0, #0
   13474:	4798      	blx	r3
		}
	}

	if (dac_hw->INTFLAG.reg & DAC_INTFLAG_EMPTY) {
   13476:	68bb      	ldr	r3, [r7, #8]
   13478:	799b      	ldrb	r3, [r3, #6]
   1347a:	b2db      	uxtb	r3, r3
   1347c:	001a      	movs	r2, r3
   1347e:	2302      	movs	r3, #2
   13480:	4013      	ands	r3, r2
   13482:	d047      	beq.n	13514 <_dac_interrupt_handler+0xe8>
		dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   13484:	68bb      	ldr	r3, [r7, #8]
   13486:	2202      	movs	r2, #2
   13488:	719a      	strb	r2, [r3, #6]

		/* If in a write buffer job */
		if (module->remaining_conversions) {
   1348a:	68fb      	ldr	r3, [r7, #12]
   1348c:	899b      	ldrh	r3, [r3, #12]
   1348e:	b29b      	uxth	r3, r3
   13490:	2b00      	cmp	r3, #0
   13492:	d033      	beq.n	134fc <_dac_interrupt_handler+0xd0>

			/* Fill the data buffer with next data in write buffer */
			dac_hw->DATABUF.reg =
				module->job_buffer[module->transferred_conversions++];
   13494:	68fb      	ldr	r3, [r7, #12]
   13496:	689a      	ldr	r2, [r3, #8]
   13498:	68fb      	ldr	r3, [r7, #12]
   1349a:	89db      	ldrh	r3, [r3, #14]
   1349c:	b29b      	uxth	r3, r3
   1349e:	1c59      	adds	r1, r3, #1
   134a0:	b288      	uxth	r0, r1
   134a2:	68f9      	ldr	r1, [r7, #12]
   134a4:	81c8      	strh	r0, [r1, #14]
   134a6:	005b      	lsls	r3, r3, #1
   134a8:	18d3      	adds	r3, r2, r3
   134aa:	881b      	ldrh	r3, [r3, #0]
   134ac:	b29a      	uxth	r2, r3
			dac_hw->DATABUF.reg =
   134ae:	68bb      	ldr	r3, [r7, #8]
   134b0:	819a      	strh	r2, [r3, #12]

			/* Write buffer size decrement */
			module->remaining_conversions --;
   134b2:	68fb      	ldr	r3, [r7, #12]
   134b4:	899b      	ldrh	r3, [r3, #12]
   134b6:	b29b      	uxth	r3, r3
   134b8:	3b01      	subs	r3, #1
   134ba:	b29a      	uxth	r2, r3
   134bc:	68fb      	ldr	r3, [r7, #12]
   134be:	819a      	strh	r2, [r3, #12]

			/* If in a write buffer job and all the data are converted */
			if (module->remaining_conversions == 0) {
   134c0:	68fb      	ldr	r3, [r7, #12]
   134c2:	899b      	ldrh	r3, [r3, #12]
   134c4:	b29b      	uxth	r3, r3
   134c6:	2b00      	cmp	r3, #0
   134c8:	d118      	bne.n	134fc <_dac_interrupt_handler+0xd0>
				module->job_status = STATUS_OK;
   134ca:	68fb      	ldr	r3, [r7, #12]
   134cc:	2220      	movs	r2, #32
   134ce:	2100      	movs	r1, #0
   134d0:	5499      	strb	r1, [r3, r2]

				/* Disable interrupt */
				dac_hw->INTENCLR.reg = DAC_INTENCLR_EMPTY;
   134d2:	68bb      	ldr	r3, [r7, #8]
   134d4:	2202      	movs	r2, #2
   134d6:	711a      	strb	r2, [r3, #4]
				dac_hw->INTFLAG.reg = DAC_INTFLAG_EMPTY;
   134d8:	68bb      	ldr	r3, [r7, #8]
   134da:	2202      	movs	r2, #2
   134dc:	719a      	strb	r2, [r3, #6]
				system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_DAC);
   134de:	2019      	movs	r0, #25
   134e0:	4b0f      	ldr	r3, [pc, #60]	; (13520 <_dac_interrupt_handler+0xf4>)
   134e2:	4798      	blx	r3

				if ((module->callback) &&
   134e4:	68fb      	ldr	r3, [r7, #12]
   134e6:	3314      	adds	r3, #20
   134e8:	2b00      	cmp	r3, #0
   134ea:	d007      	beq.n	134fc <_dac_interrupt_handler+0xd0>
					 (module->callback_enable[DAC_CALLBACK_TRANSFER_COMPLETE])) {
   134ec:	68fb      	ldr	r3, [r7, #12]
   134ee:	7c9b      	ldrb	r3, [r3, #18]
				if ((module->callback) &&
   134f0:	2b00      	cmp	r3, #0
   134f2:	d003      	beq.n	134fc <_dac_interrupt_handler+0xd0>
					module->callback[DAC_CALLBACK_TRANSFER_COMPLETE](0);
   134f4:	68fb      	ldr	r3, [r7, #12]
   134f6:	69db      	ldr	r3, [r3, #28]
   134f8:	2000      	movs	r0, #0
   134fa:	4798      	blx	r3
				}
			}
		}

		if ((module->callback) &&
   134fc:	68fb      	ldr	r3, [r7, #12]
   134fe:	3314      	adds	r3, #20
   13500:	2b00      	cmp	r3, #0
   13502:	d007      	beq.n	13514 <_dac_interrupt_handler+0xe8>
			 (module->callback_enable[DAC_CALLBACK_DATA_EMPTY])) {
   13504:	68fb      	ldr	r3, [r7, #12]
   13506:	7c1b      	ldrb	r3, [r3, #16]
		if ((module->callback) &&
   13508:	2b00      	cmp	r3, #0
   1350a:	d003      	beq.n	13514 <_dac_interrupt_handler+0xe8>
			module->callback[DAC_CALLBACK_DATA_EMPTY](0);
   1350c:	68fb      	ldr	r3, [r7, #12]
   1350e:	695b      	ldr	r3, [r3, #20]
   13510:	2000      	movs	r0, #0
   13512:	4798      	blx	r3
		}
	}
}
   13514:	46c0      	nop			; (mov r8, r8)
   13516:	46bd      	mov	sp, r7
   13518:	b004      	add	sp, #16
   1351a:	bd80      	pop	{r7, pc}
   1351c:	20004784 	.word	0x20004784
   13520:	000133fd 	.word	0x000133fd

00013524 <DAC_Handler>:

/** Handler for the DAC hardware module interrupt. */
void DAC_Handler(void)
{
   13524:	b580      	push	{r7, lr}
   13526:	af00      	add	r7, sp, #0
	_dac_interrupt_handler(0);
   13528:	2000      	movs	r0, #0
   1352a:	4b02      	ldr	r3, [pc, #8]	; (13534 <DAC_Handler+0x10>)
   1352c:	4798      	blx	r3
}
   1352e:	46c0      	nop			; (mov r8, r8)
   13530:	46bd      	mov	sp, r7
   13532:	bd80      	pop	{r7, pc}
   13534:	0001342d 	.word	0x0001342d

00013538 <system_interrupt_enter_critical_section>:
{
   13538:	b580      	push	{r7, lr}
   1353a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   1353c:	4b02      	ldr	r3, [pc, #8]	; (13548 <system_interrupt_enter_critical_section+0x10>)
   1353e:	4798      	blx	r3
}
   13540:	46c0      	nop			; (mov r8, r8)
   13542:	46bd      	mov	sp, r7
   13544:	bd80      	pop	{r7, pc}
   13546:	46c0      	nop			; (mov r8, r8)
   13548:	00027025 	.word	0x00027025

0001354c <system_interrupt_leave_critical_section>:
{
   1354c:	b580      	push	{r7, lr}
   1354e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   13550:	4b02      	ldr	r3, [pc, #8]	; (1355c <system_interrupt_leave_critical_section+0x10>)
   13552:	4798      	blx	r3
}
   13554:	46c0      	nop			; (mov r8, r8)
   13556:	46bd      	mov	sp, r7
   13558:	bd80      	pop	{r7, pc}
   1355a:	46c0      	nop			; (mov r8, r8)
   1355c:	00027079 	.word	0x00027079

00013560 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
   13560:	b580      	push	{r7, lr}
   13562:	b086      	sub	sp, #24
   13564:	af00      	add	r7, sp, #0
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
   13566:	4b49      	ldr	r3, [pc, #292]	; (1368c <DMAC_Handler+0x12c>)
   13568:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
   1356a:	4b49      	ldr	r3, [pc, #292]	; (13690 <DMAC_Handler+0x130>)
   1356c:	8c1b      	ldrh	r3, [r3, #32]
   1356e:	b29b      	uxth	r3, r3
   13570:	b2da      	uxtb	r2, r3
   13572:	2317      	movs	r3, #23
   13574:	18fb      	adds	r3, r7, r3
   13576:	210f      	movs	r1, #15
   13578:	400a      	ands	r2, r1
   1357a:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
   1357c:	2317      	movs	r3, #23
   1357e:	18fb      	adds	r3, r7, r3
   13580:	781a      	ldrb	r2, [r3, #0]
   13582:	4b44      	ldr	r3, [pc, #272]	; (13694 <DMAC_Handler+0x134>)
   13584:	0092      	lsls	r2, r2, #2
   13586:	58d3      	ldr	r3, [r2, r3]
   13588:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
   1358a:	4a41      	ldr	r2, [pc, #260]	; (13690 <DMAC_Handler+0x130>)
   1358c:	693b      	ldr	r3, [r7, #16]
   1358e:	781b      	ldrb	r3, [r3, #0]
   13590:	210f      	movs	r1, #15
   13592:	400b      	ands	r3, r1
   13594:	b2d9      	uxtb	r1, r3
   13596:	233f      	movs	r3, #63	; 0x3f
   13598:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
   1359a:	493d      	ldr	r1, [pc, #244]	; (13690 <DMAC_Handler+0x130>)
   1359c:	230f      	movs	r3, #15
   1359e:	18fb      	adds	r3, r7, r3
   135a0:	224e      	movs	r2, #78	; 0x4e
   135a2:	5c8a      	ldrb	r2, [r1, r2]
   135a4:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
   135a6:	693b      	ldr	r3, [r7, #16]
   135a8:	781b      	ldrb	r3, [r3, #0]
   135aa:	4a3b      	ldr	r2, [pc, #236]	; (13698 <DMAC_Handler+0x138>)
   135ac:	011b      	lsls	r3, r3, #4
   135ae:	18d3      	adds	r3, r2, r3
   135b0:	3302      	adds	r3, #2
   135b2:	881b      	ldrh	r3, [r3, #0]
   135b4:	b29b      	uxth	r3, r3
   135b6:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
   135b8:	693b      	ldr	r3, [r7, #16]
   135ba:	781b      	ldrb	r3, [r3, #0]
   135bc:	4a37      	ldr	r2, [pc, #220]	; (1369c <DMAC_Handler+0x13c>)
   135be:	011b      	lsls	r3, r3, #4
   135c0:	18d3      	adds	r3, r2, r3
   135c2:	3302      	adds	r3, #2
   135c4:	881b      	ldrh	r3, [r3, #0]
   135c6:	b29b      	uxth	r3, r3
   135c8:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
   135ca:	68ba      	ldr	r2, [r7, #8]
   135cc:	687b      	ldr	r3, [r7, #4]
   135ce:	1ad2      	subs	r2, r2, r3
   135d0:	693b      	ldr	r3, [r7, #16]
   135d2:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
   135d4:	230f      	movs	r3, #15
   135d6:	18fb      	adds	r3, r7, r3
   135d8:	781b      	ldrb	r3, [r3, #0]
   135da:	2201      	movs	r2, #1
   135dc:	4013      	ands	r3, r2
   135de:	d016      	beq.n	1360e <DMAC_Handler+0xae>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
   135e0:	4a2b      	ldr	r2, [pc, #172]	; (13690 <DMAC_Handler+0x130>)
   135e2:	234e      	movs	r3, #78	; 0x4e
   135e4:	2101      	movs	r1, #1
   135e6:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
   135e8:	693b      	ldr	r3, [r7, #16]
   135ea:	2210      	movs	r2, #16
   135ec:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   135ee:	693b      	ldr	r3, [r7, #16]
   135f0:	7c1b      	ldrb	r3, [r3, #16]
   135f2:	001a      	movs	r2, r3
   135f4:	2301      	movs	r3, #1
   135f6:	4013      	ands	r3, r2
   135f8:	d042      	beq.n	13680 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
   135fa:	693b      	ldr	r3, [r7, #16]
   135fc:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
   135fe:	2b00      	cmp	r3, #0
   13600:	d03e      	beq.n	13680 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
   13602:	693b      	ldr	r3, [r7, #16]
   13604:	685b      	ldr	r3, [r3, #4]
   13606:	693a      	ldr	r2, [r7, #16]
   13608:	0010      	movs	r0, r2
   1360a:	4798      	blx	r3
   1360c:	e038      	b.n	13680 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
   1360e:	230f      	movs	r3, #15
   13610:	18fb      	adds	r3, r7, r3
   13612:	781b      	ldrb	r3, [r3, #0]
   13614:	2202      	movs	r2, #2
   13616:	4013      	ands	r3, r2
   13618:	d016      	beq.n	13648 <DMAC_Handler+0xe8>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
   1361a:	4a1d      	ldr	r2, [pc, #116]	; (13690 <DMAC_Handler+0x130>)
   1361c:	234e      	movs	r3, #78	; 0x4e
   1361e:	2102      	movs	r1, #2
   13620:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
   13622:	693b      	ldr	r3, [r7, #16]
   13624:	2200      	movs	r2, #0
   13626:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   13628:	693b      	ldr	r3, [r7, #16]
   1362a:	7c1b      	ldrb	r3, [r3, #16]
   1362c:	001a      	movs	r2, r3
   1362e:	2302      	movs	r3, #2
   13630:	4013      	ands	r3, r2
   13632:	d025      	beq.n	13680 <DMAC_Handler+0x120>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
   13634:	693b      	ldr	r3, [r7, #16]
   13636:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
   13638:	2b00      	cmp	r3, #0
   1363a:	d021      	beq.n	13680 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
   1363c:	693b      	ldr	r3, [r7, #16]
   1363e:	689b      	ldr	r3, [r3, #8]
   13640:	693a      	ldr	r2, [r7, #16]
   13642:	0010      	movs	r0, r2
   13644:	4798      	blx	r3
   13646:	e01b      	b.n	13680 <DMAC_Handler+0x120>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
   13648:	230f      	movs	r3, #15
   1364a:	18fb      	adds	r3, r7, r3
   1364c:	781b      	ldrb	r3, [r3, #0]
   1364e:	2204      	movs	r2, #4
   13650:	4013      	ands	r3, r2
   13652:	d015      	beq.n	13680 <DMAC_Handler+0x120>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
   13654:	4a0e      	ldr	r2, [pc, #56]	; (13690 <DMAC_Handler+0x130>)
   13656:	234e      	movs	r3, #78	; 0x4e
   13658:	2104      	movs	r1, #4
   1365a:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
   1365c:	693b      	ldr	r3, [r7, #16]
   1365e:	2206      	movs	r2, #6
   13660:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   13662:	693b      	ldr	r3, [r7, #16]
   13664:	7c1b      	ldrb	r3, [r3, #16]
   13666:	001a      	movs	r2, r3
   13668:	2304      	movs	r3, #4
   1366a:	4013      	ands	r3, r2
   1366c:	d008      	beq.n	13680 <DMAC_Handler+0x120>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
   1366e:	693b      	ldr	r3, [r7, #16]
   13670:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
   13672:	2b00      	cmp	r3, #0
   13674:	d004      	beq.n	13680 <DMAC_Handler+0x120>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
   13676:	693b      	ldr	r3, [r7, #16]
   13678:	68db      	ldr	r3, [r3, #12]
   1367a:	693a      	ldr	r2, [r7, #16]
   1367c:	0010      	movs	r0, r2
   1367e:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
   13680:	4b07      	ldr	r3, [pc, #28]	; (136a0 <DMAC_Handler+0x140>)
   13682:	4798      	blx	r3
}
   13684:	46c0      	nop			; (mov r8, r8)
   13686:	46bd      	mov	sp, r7
   13688:	b006      	add	sp, #24
   1368a:	bd80      	pop	{r7, pc}
   1368c:	00013539 	.word	0x00013539
   13690:	41004800 	.word	0x41004800
   13694:	200004f0 	.word	0x200004f0
   13698:	20004790 	.word	0x20004790
   1369c:	200004a0 	.word	0x200004a0
   136a0:	0001354d 	.word	0x0001354d

000136a4 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
   136a4:	b580      	push	{r7, lr}
   136a6:	b082      	sub	sp, #8
   136a8:	af00      	add	r7, sp, #0
	struct events_hook *current_hook = _events_inst.hook_list;
   136aa:	4b15      	ldr	r3, [pc, #84]	; (13700 <EVSYS_Handler+0x5c>)
   136ac:	691b      	ldr	r3, [r3, #16]
   136ae:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
   136b0:	4b14      	ldr	r3, [pc, #80]	; (13704 <EVSYS_Handler+0x60>)
   136b2:	699b      	ldr	r3, [r3, #24]
   136b4:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
   136b6:	4b12      	ldr	r3, [pc, #72]	; (13700 <EVSYS_Handler+0x5c>)
   136b8:	689a      	ldr	r2, [r3, #8]
   136ba:	683b      	ldr	r3, [r7, #0]
   136bc:	431a      	orrs	r2, r3
   136be:	4b10      	ldr	r3, [pc, #64]	; (13700 <EVSYS_Handler+0x5c>)
   136c0:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
   136c2:	4b10      	ldr	r3, [pc, #64]	; (13704 <EVSYS_Handler+0x60>)
   136c4:	4a10      	ldr	r2, [pc, #64]	; (13708 <EVSYS_Handler+0x64>)
   136c6:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
   136c8:	e008      	b.n	136dc <EVSYS_Handler+0x38>
		current_hook->hook_func(current_hook->resource);
   136ca:	687b      	ldr	r3, [r7, #4]
   136cc:	685a      	ldr	r2, [r3, #4]
   136ce:	687b      	ldr	r3, [r7, #4]
   136d0:	681b      	ldr	r3, [r3, #0]
   136d2:	0018      	movs	r0, r3
   136d4:	4790      	blx	r2
		current_hook = current_hook->next;
   136d6:	687b      	ldr	r3, [r7, #4]
   136d8:	689b      	ldr	r3, [r3, #8]
   136da:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
   136dc:	687b      	ldr	r3, [r7, #4]
   136de:	2b00      	cmp	r3, #0
   136e0:	d1f3      	bne.n	136ca <EVSYS_Handler+0x26>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
   136e2:	4b07      	ldr	r3, [pc, #28]	; (13700 <EVSYS_Handler+0x5c>)
   136e4:	68db      	ldr	r3, [r3, #12]
   136e6:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
   136e8:	4b05      	ldr	r3, [pc, #20]	; (13700 <EVSYS_Handler+0x5c>)
   136ea:	689b      	ldr	r3, [r3, #8]
   136ec:	683a      	ldr	r2, [r7, #0]
   136ee:	43d2      	mvns	r2, r2
   136f0:	401a      	ands	r2, r3
   136f2:	4b03      	ldr	r3, [pc, #12]	; (13700 <EVSYS_Handler+0x5c>)
   136f4:	609a      	str	r2, [r3, #8]
}
   136f6:	46c0      	nop			; (mov r8, r8)
   136f8:	46bd      	mov	sp, r7
   136fa:	b002      	add	sp, #8
   136fc:	bd80      	pop	{r7, pc}
   136fe:	46c0      	nop			; (mov r8, r8)
   13700:	2000000c 	.word	0x2000000c
   13704:	42000400 	.word	0x42000400
   13708:	0f0fffff 	.word	0x0f0fffff

0001370c <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
   1370c:	b580      	push	{r7, lr}
   1370e:	b082      	sub	sp, #8
   13710:	af00      	add	r7, sp, #0
   13712:	0002      	movs	r2, r0
   13714:	6039      	str	r1, [r7, #0]
   13716:	1dfb      	adds	r3, r7, #7
   13718:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   1371a:	1dfb      	adds	r3, r7, #7
   1371c:	781b      	ldrb	r3, [r3, #0]
   1371e:	2b01      	cmp	r3, #1
   13720:	d00a      	beq.n	13738 <system_apb_clock_set_mask+0x2c>
   13722:	2b02      	cmp	r3, #2
   13724:	d00f      	beq.n	13746 <system_apb_clock_set_mask+0x3a>
   13726:	2b00      	cmp	r3, #0
   13728:	d114      	bne.n	13754 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
   1372a:	4b0e      	ldr	r3, [pc, #56]	; (13764 <system_apb_clock_set_mask+0x58>)
   1372c:	4a0d      	ldr	r2, [pc, #52]	; (13764 <system_apb_clock_set_mask+0x58>)
   1372e:	6991      	ldr	r1, [r2, #24]
   13730:	683a      	ldr	r2, [r7, #0]
   13732:	430a      	orrs	r2, r1
   13734:	619a      	str	r2, [r3, #24]
			break;
   13736:	e00f      	b.n	13758 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
   13738:	4b0a      	ldr	r3, [pc, #40]	; (13764 <system_apb_clock_set_mask+0x58>)
   1373a:	4a0a      	ldr	r2, [pc, #40]	; (13764 <system_apb_clock_set_mask+0x58>)
   1373c:	69d1      	ldr	r1, [r2, #28]
   1373e:	683a      	ldr	r2, [r7, #0]
   13740:	430a      	orrs	r2, r1
   13742:	61da      	str	r2, [r3, #28]
			break;
   13744:	e008      	b.n	13758 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
   13746:	4b07      	ldr	r3, [pc, #28]	; (13764 <system_apb_clock_set_mask+0x58>)
   13748:	4a06      	ldr	r2, [pc, #24]	; (13764 <system_apb_clock_set_mask+0x58>)
   1374a:	6a11      	ldr	r1, [r2, #32]
   1374c:	683a      	ldr	r2, [r7, #0]
   1374e:	430a      	orrs	r2, r1
   13750:	621a      	str	r2, [r3, #32]
			break;
   13752:	e001      	b.n	13758 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
   13754:	2317      	movs	r3, #23
   13756:	e000      	b.n	1375a <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
   13758:	2300      	movs	r3, #0
}
   1375a:	0018      	movs	r0, r3
   1375c:	46bd      	mov	sp, r7
   1375e:	b002      	add	sp, #8
   13760:	bd80      	pop	{r7, pc}
   13762:	46c0      	nop			; (mov r8, r8)
   13764:	40000400 	.word	0x40000400

00013768 <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
   13768:	b580      	push	{r7, lr}
   1376a:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
   1376c:	2102      	movs	r1, #2
   1376e:	2002      	movs	r0, #2
   13770:	4b07      	ldr	r3, [pc, #28]	; (13790 <_system_events_init+0x28>)
   13772:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
   13774:	4b07      	ldr	r3, [pc, #28]	; (13794 <_system_events_init+0x2c>)
   13776:	2201      	movs	r2, #1
   13778:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
   1377a:	46c0      	nop			; (mov r8, r8)
   1377c:	4b05      	ldr	r3, [pc, #20]	; (13794 <_system_events_init+0x2c>)
   1377e:	781b      	ldrb	r3, [r3, #0]
   13780:	b2db      	uxtb	r3, r3
   13782:	001a      	movs	r2, r3
   13784:	2301      	movs	r3, #1
   13786:	4013      	ands	r3, r2
   13788:	d1f8      	bne.n	1377c <_system_events_init+0x14>
	}
}
   1378a:	46c0      	nop			; (mov r8, r8)
   1378c:	46bd      	mov	sp, r7
   1378e:	bd80      	pop	{r7, pc}
   13790:	0001370d 	.word	0x0001370d
   13794:	42000400 	.word	0x42000400

00013798 <i2c_master_is_syncing>:
 * \retval true   Module is busy synchronizing
 * \retval false  Module is not synchronizing
 */
static inline bool i2c_master_is_syncing (
		const struct i2c_master_module *const module)
{
   13798:	b580      	push	{r7, lr}
   1379a:	b084      	sub	sp, #16
   1379c:	af00      	add	r7, sp, #0
   1379e:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   137a0:	687b      	ldr	r3, [r7, #4]
   137a2:	681b      	ldr	r3, [r3, #0]
   137a4:	60fb      	str	r3, [r7, #12]

#if defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_1)
	return (i2c_hw->STATUS.reg & SERCOM_I2CM_STATUS_SYNCBUSY);
#elif defined(FEATURE_SERCOM_SYNCBUSY_SCHEME_VERSION_2)
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   137a6:	68fb      	ldr	r3, [r7, #12]
   137a8:	69db      	ldr	r3, [r3, #28]
   137aa:	2207      	movs	r2, #7
   137ac:	4013      	ands	r3, r2
   137ae:	1e5a      	subs	r2, r3, #1
   137b0:	4193      	sbcs	r3, r2
   137b2:	b2db      	uxtb	r3, r3
#else
#  error Unknown SERCOM SYNCBUSY scheme!
#endif
}
   137b4:	0018      	movs	r0, r3
   137b6:	46bd      	mov	sp, r7
   137b8:	b004      	add	sp, #16
   137ba:	bd80      	pop	{r7, pc}

000137bc <_i2c_master_wait_for_sync>:
 *
 * \param[in]  module  Pointer to software module structure
 */
static void _i2c_master_wait_for_sync(
		const struct i2c_master_module *const module)
{
   137bc:	b580      	push	{r7, lr}
   137be:	b082      	sub	sp, #8
   137c0:	af00      	add	r7, sp, #0
   137c2:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (i2c_master_is_syncing(module)) {
   137c4:	46c0      	nop			; (mov r8, r8)
   137c6:	687b      	ldr	r3, [r7, #4]
   137c8:	0018      	movs	r0, r3
   137ca:	4b04      	ldr	r3, [pc, #16]	; (137dc <_i2c_master_wait_for_sync+0x20>)
   137cc:	4798      	blx	r3
   137ce:	1e03      	subs	r3, r0, #0
   137d0:	d1f9      	bne.n	137c6 <_i2c_master_wait_for_sync+0xa>
		/* Wait for I2C module to sync. */
	}
}
   137d2:	46c0      	nop			; (mov r8, r8)
   137d4:	46bd      	mov	sp, r7
   137d6:	b002      	add	sp, #8
   137d8:	bd80      	pop	{r7, pc}
   137da:	46c0      	nop			; (mov r8, r8)
   137dc:	00013799 	.word	0x00013799

000137e0 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
   137e0:	b580      	push	{r7, lr}
   137e2:	b084      	sub	sp, #16
   137e4:	af00      	add	r7, sp, #0
   137e6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   137e8:	687b      	ldr	r3, [r7, #4]
   137ea:	681b      	ldr	r3, [r3, #0]
   137ec:	60fb      	str	r3, [r7, #12]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   137ee:	68fb      	ldr	r3, [r7, #12]
   137f0:	681b      	ldr	r3, [r3, #0]
   137f2:	011b      	lsls	r3, r3, #4
   137f4:	0fdb      	lsrs	r3, r3, #31
   137f6:	b2db      	uxtb	r3, r3
   137f8:	001a      	movs	r2, r3
   137fa:	230b      	movs	r3, #11
   137fc:	18fb      	adds	r3, r7, r3
   137fe:	1e51      	subs	r1, r2, #1
   13800:	418a      	sbcs	r2, r1
   13802:	701a      	strb	r2, [r3, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
   13804:	2308      	movs	r3, #8
   13806:	18fb      	adds	r3, r7, r3
   13808:	687a      	ldr	r2, [r7, #4]
   1380a:	8b52      	ldrh	r2, [r2, #26]
   1380c:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   1380e:	687b      	ldr	r3, [r7, #4]
   13810:	8b9b      	ldrh	r3, [r3, #28]
   13812:	b29a      	uxth	r2, r3
   13814:	2308      	movs	r3, #8
   13816:	18fb      	adds	r3, r7, r3
   13818:	2108      	movs	r1, #8
   1381a:	1879      	adds	r1, r7, r1
   1381c:	8809      	ldrh	r1, [r1, #0]
   1381e:	1a8a      	subs	r2, r1, r2
   13820:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   13822:	687b      	ldr	r3, [r7, #4]
   13824:	8b9b      	ldrh	r3, [r3, #28]
   13826:	b29b      	uxth	r3, r3
   13828:	3b01      	subs	r3, #1
   1382a:	b29a      	uxth	r2, r3
   1382c:	687b      	ldr	r3, [r7, #4]
   1382e:	839a      	strh	r2, [r3, #28]

	if (sclsm_flag) {
   13830:	230b      	movs	r3, #11
   13832:	18fb      	adds	r3, r7, r3
   13834:	781b      	ldrb	r3, [r3, #0]
   13836:	2b00      	cmp	r3, #0
   13838:	d010      	beq.n	1385c <_i2c_master_read+0x7c>
		if (module->send_nack && module->buffer_remaining == 1) {
   1383a:	687b      	ldr	r3, [r7, #4]
   1383c:	7adb      	ldrb	r3, [r3, #11]
   1383e:	2b00      	cmp	r3, #0
   13840:	d01c      	beq.n	1387c <_i2c_master_read+0x9c>
   13842:	687b      	ldr	r3, [r7, #4]
   13844:	8b9b      	ldrh	r3, [r3, #28]
   13846:	b29b      	uxth	r3, r3
   13848:	2b01      	cmp	r3, #1
   1384a:	d117      	bne.n	1387c <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1384c:	68fb      	ldr	r3, [r7, #12]
   1384e:	685b      	ldr	r3, [r3, #4]
   13850:	2280      	movs	r2, #128	; 0x80
   13852:	02d2      	lsls	r2, r2, #11
   13854:	431a      	orrs	r2, r3
   13856:	68fb      	ldr	r3, [r7, #12]
   13858:	605a      	str	r2, [r3, #4]
   1385a:	e00f      	b.n	1387c <_i2c_master_read+0x9c>
		}
	} else {
		if (module->send_nack && module->buffer_remaining == 0) {
   1385c:	687b      	ldr	r3, [r7, #4]
   1385e:	7adb      	ldrb	r3, [r3, #11]
   13860:	2b00      	cmp	r3, #0
   13862:	d00b      	beq.n	1387c <_i2c_master_read+0x9c>
   13864:	687b      	ldr	r3, [r7, #4]
   13866:	8b9b      	ldrh	r3, [r3, #28]
   13868:	b29b      	uxth	r3, r3
   1386a:	2b00      	cmp	r3, #0
   1386c:	d106      	bne.n	1387c <_i2c_master_read+0x9c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   1386e:	68fb      	ldr	r3, [r7, #12]
   13870:	685b      	ldr	r3, [r3, #4]
   13872:	2280      	movs	r2, #128	; 0x80
   13874:	02d2      	lsls	r2, r2, #11
   13876:	431a      	orrs	r2, r3
   13878:	68fb      	ldr	r3, [r7, #12]
   1387a:	605a      	str	r2, [r3, #4]
		}
	}

	if (module->buffer_remaining == 0) {
   1387c:	687b      	ldr	r3, [r7, #4]
   1387e:	8b9b      	ldrh	r3, [r3, #28]
   13880:	b29b      	uxth	r3, r3
   13882:	2b00      	cmp	r3, #0
   13884:	d10e      	bne.n	138a4 <_i2c_master_read+0xc4>
		if (module->send_stop) {
   13886:	687b      	ldr	r3, [r7, #4]
   13888:	7a9b      	ldrb	r3, [r3, #10]
   1388a:	2b00      	cmp	r3, #0
   1388c:	d00a      	beq.n	138a4 <_i2c_master_read+0xc4>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   1388e:	687b      	ldr	r3, [r7, #4]
   13890:	0018      	movs	r0, r3
   13892:	4b0e      	ldr	r3, [pc, #56]	; (138cc <_i2c_master_read+0xec>)
   13894:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   13896:	68fb      	ldr	r3, [r7, #12]
   13898:	685b      	ldr	r3, [r3, #4]
   1389a:	22c0      	movs	r2, #192	; 0xc0
   1389c:	0292      	lsls	r2, r2, #10
   1389e:	431a      	orrs	r2, r3
   138a0:	68fb      	ldr	r3, [r7, #12]
   138a2:	605a      	str	r2, [r3, #4]
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
   138a4:	687b      	ldr	r3, [r7, #4]
   138a6:	0018      	movs	r0, r3
   138a8:	4b08      	ldr	r3, [pc, #32]	; (138cc <_i2c_master_read+0xec>)
   138aa:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
   138ac:	687b      	ldr	r3, [r7, #4]
   138ae:	6a1a      	ldr	r2, [r3, #32]
   138b0:	2308      	movs	r3, #8
   138b2:	18fb      	adds	r3, r7, r3
   138b4:	881b      	ldrh	r3, [r3, #0]
   138b6:	18d3      	adds	r3, r2, r3
   138b8:	68fa      	ldr	r2, [r7, #12]
   138ba:	2128      	movs	r1, #40	; 0x28
   138bc:	5c52      	ldrb	r2, [r2, r1]
   138be:	b2d2      	uxtb	r2, r2
   138c0:	701a      	strb	r2, [r3, #0]
}
   138c2:	46c0      	nop			; (mov r8, r8)
   138c4:	46bd      	mov	sp, r7
   138c6:	b004      	add	sp, #16
   138c8:	bd80      	pop	{r7, pc}
   138ca:	46c0      	nop			; (mov r8, r8)
   138cc:	000137bd 	.word	0x000137bd

000138d0 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
   138d0:	b580      	push	{r7, lr}
   138d2:	b084      	sub	sp, #16
   138d4:	af00      	add	r7, sp, #0
   138d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   138d8:	687b      	ldr	r3, [r7, #4]
   138da:	681b      	ldr	r3, [r3, #0]
   138dc:	60fb      	str	r3, [r7, #12]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
   138de:	68fb      	ldr	r3, [r7, #12]
   138e0:	8b5b      	ldrh	r3, [r3, #26]
   138e2:	b29b      	uxth	r3, r3
   138e4:	001a      	movs	r2, r3
   138e6:	2304      	movs	r3, #4
   138e8:	4013      	ands	r3, r2
   138ea:	d004      	beq.n	138f6 <_i2c_master_write+0x26>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
   138ec:	687b      	ldr	r3, [r7, #4]
   138ee:	2225      	movs	r2, #37	; 0x25
   138f0:	211e      	movs	r1, #30
   138f2:	5499      	strb	r1, [r3, r2]
		/* Do not write more data */
		return;
   138f4:	e024      	b.n	13940 <_i2c_master_write+0x70>
	}

	/* Find index to get next byte in buffer */
	uint16_t buffer_index = module->buffer_length;
   138f6:	230a      	movs	r3, #10
   138f8:	18fb      	adds	r3, r7, r3
   138fa:	687a      	ldr	r2, [r7, #4]
   138fc:	8b52      	ldrh	r2, [r2, #26]
   138fe:	801a      	strh	r2, [r3, #0]
	buffer_index -= module->buffer_remaining;
   13900:	687b      	ldr	r3, [r7, #4]
   13902:	8b9b      	ldrh	r3, [r3, #28]
   13904:	b29a      	uxth	r2, r3
   13906:	230a      	movs	r3, #10
   13908:	18fb      	adds	r3, r7, r3
   1390a:	210a      	movs	r1, #10
   1390c:	1879      	adds	r1, r7, r1
   1390e:	8809      	ldrh	r1, [r1, #0]
   13910:	1a8a      	subs	r2, r1, r2
   13912:	801a      	strh	r2, [r3, #0]

	module->buffer_remaining--;
   13914:	687b      	ldr	r3, [r7, #4]
   13916:	8b9b      	ldrh	r3, [r3, #28]
   13918:	b29b      	uxth	r3, r3
   1391a:	3b01      	subs	r3, #1
   1391c:	b29a      	uxth	r2, r3
   1391e:	687b      	ldr	r3, [r7, #4]
   13920:	839a      	strh	r2, [r3, #28]

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
   13922:	687b      	ldr	r3, [r7, #4]
   13924:	0018      	movs	r0, r3
   13926:	4b08      	ldr	r3, [pc, #32]	; (13948 <_i2c_master_write+0x78>)
   13928:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
   1392a:	687b      	ldr	r3, [r7, #4]
   1392c:	6a1a      	ldr	r2, [r3, #32]
   1392e:	230a      	movs	r3, #10
   13930:	18fb      	adds	r3, r7, r3
   13932:	881b      	ldrh	r3, [r3, #0]
   13934:	18d3      	adds	r3, r2, r3
   13936:	781b      	ldrb	r3, [r3, #0]
   13938:	b2d9      	uxtb	r1, r3
   1393a:	68fb      	ldr	r3, [r7, #12]
   1393c:	2228      	movs	r2, #40	; 0x28
   1393e:	5499      	strb	r1, [r3, r2]
}
   13940:	46bd      	mov	sp, r7
   13942:	b004      	add	sp, #16
   13944:	bd80      	pop	{r7, pc}
   13946:	46c0      	nop			; (mov r8, r8)
   13948:	000137bd 	.word	0x000137bd

0001394c <_i2c_master_async_address_response>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_async_address_response(
		struct i2c_master_module *const module)
{
   1394c:	b580      	push	{r7, lr}
   1394e:	b084      	sub	sp, #16
   13950:	af00      	add	r7, sp, #0
   13952:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13954:	687b      	ldr	r3, [r7, #4]
   13956:	681b      	ldr	r3, [r3, #0]
   13958:	60fb      	str	r3, [r7, #12]

	/* Check for error. Ignore bus-error; workaround for bus state stuck in
	 * BUSY.
	 */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
   1395a:	68fb      	ldr	r3, [r7, #12]
   1395c:	7e1b      	ldrb	r3, [r3, #24]
   1395e:	b2db      	uxtb	r3, r3
   13960:	001a      	movs	r2, r3
   13962:	2301      	movs	r3, #1
   13964:	4013      	ands	r3, r2
   13966:	d02b      	beq.n	139c0 <_i2c_master_async_address_response+0x74>
	{
		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   13968:	68fb      	ldr	r3, [r7, #12]
   1396a:	2201      	movs	r2, #1
   1396c:	761a      	strb	r2, [r3, #24]

		/* Check arbitration */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   1396e:	68fb      	ldr	r3, [r7, #12]
   13970:	8b5b      	ldrh	r3, [r3, #26]
   13972:	b29b      	uxth	r3, r3
   13974:	001a      	movs	r2, r3
   13976:	2302      	movs	r3, #2
   13978:	4013      	ands	r3, r2
   1397a:	d004      	beq.n	13986 <_i2c_master_async_address_response+0x3a>
			/* Return busy */
			module->status = STATUS_ERR_PACKET_COLLISION;
   1397c:	687b      	ldr	r3, [r7, #4]
   1397e:	2225      	movs	r2, #37	; 0x25
   13980:	2141      	movs	r1, #65	; 0x41
   13982:	5499      	strb	r1, [r3, r2]
   13984:	e01c      	b.n	139c0 <_i2c_master_async_address_response+0x74>
		}
		/* No slave responds */
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   13986:	68fb      	ldr	r3, [r7, #12]
   13988:	8b5b      	ldrh	r3, [r3, #26]
   1398a:	b29b      	uxth	r3, r3
   1398c:	001a      	movs	r2, r3
   1398e:	2304      	movs	r3, #4
   13990:	4013      	ands	r3, r2
   13992:	d015      	beq.n	139c0 <_i2c_master_async_address_response+0x74>
			module->status           = STATUS_ERR_BAD_ADDRESS;
   13994:	687b      	ldr	r3, [r7, #4]
   13996:	2225      	movs	r2, #37	; 0x25
   13998:	2118      	movs	r1, #24
   1399a:	5499      	strb	r1, [r3, r2]
			module->buffer_remaining = 0;
   1399c:	687b      	ldr	r3, [r7, #4]
   1399e:	2200      	movs	r2, #0
   139a0:	839a      	strh	r2, [r3, #28]

			if (module->send_stop) {
   139a2:	687b      	ldr	r3, [r7, #4]
   139a4:	7a9b      	ldrb	r3, [r3, #10]
   139a6:	2b00      	cmp	r3, #0
   139a8:	d00a      	beq.n	139c0 <_i2c_master_async_address_response+0x74>
				/* Send stop condition */
				_i2c_master_wait_for_sync(module);
   139aa:	687b      	ldr	r3, [r7, #4]
   139ac:	0018      	movs	r0, r3
   139ae:	4b13      	ldr	r3, [pc, #76]	; (139fc <_i2c_master_async_address_response+0xb0>)
   139b0:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   139b2:	68fb      	ldr	r3, [r7, #12]
   139b4:	685b      	ldr	r3, [r3, #4]
   139b6:	22c0      	movs	r2, #192	; 0xc0
   139b8:	0292      	lsls	r2, r2, #10
   139ba:	431a      	orrs	r2, r3
   139bc:	68fb      	ldr	r3, [r7, #12]
   139be:	605a      	str	r2, [r3, #4]
			}
		}
	}

	module->buffer_length = module->buffer_remaining;
   139c0:	687b      	ldr	r3, [r7, #4]
   139c2:	8b9b      	ldrh	r3, [r3, #28]
   139c4:	b29a      	uxth	r2, r3
   139c6:	687b      	ldr	r3, [r7, #4]
   139c8:	835a      	strh	r2, [r3, #26]

	/* Check for status OK. */
	if (module->status == STATUS_BUSY) {
   139ca:	687b      	ldr	r3, [r7, #4]
   139cc:	2225      	movs	r2, #37	; 0x25
   139ce:	5c9b      	ldrb	r3, [r3, r2]
   139d0:	b2db      	uxtb	r3, r3
   139d2:	2b05      	cmp	r3, #5
   139d4:	d10e      	bne.n	139f4 <_i2c_master_async_address_response+0xa8>
		/* Call function based on transfer direction. */
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   139d6:	687b      	ldr	r3, [r7, #4]
   139d8:	2224      	movs	r2, #36	; 0x24
   139da:	5c9b      	ldrb	r3, [r3, r2]
   139dc:	b2db      	uxtb	r3, r3
   139de:	2b00      	cmp	r3, #0
   139e0:	d104      	bne.n	139ec <_i2c_master_async_address_response+0xa0>
			_i2c_master_write(module);
   139e2:	687b      	ldr	r3, [r7, #4]
   139e4:	0018      	movs	r0, r3
   139e6:	4b06      	ldr	r3, [pc, #24]	; (13a00 <_i2c_master_async_address_response+0xb4>)
   139e8:	4798      	blx	r3
		} else {
			_i2c_master_read(module);
		}
	}
}
   139ea:	e003      	b.n	139f4 <_i2c_master_async_address_response+0xa8>
			_i2c_master_read(module);
   139ec:	687b      	ldr	r3, [r7, #4]
   139ee:	0018      	movs	r0, r3
   139f0:	4b04      	ldr	r3, [pc, #16]	; (13a04 <_i2c_master_async_address_response+0xb8>)
   139f2:	4798      	blx	r3
}
   139f4:	46c0      	nop			; (mov r8, r8)
   139f6:	46bd      	mov	sp, r7
   139f8:	b004      	add	sp, #16
   139fa:	bd80      	pop	{r7, pc}
   139fc:	000137bd 	.word	0x000137bd
   13a00:	000138d1 	.word	0x000138d1
   13a04:	000137e1 	.word	0x000137e1

00013a08 <i2c_master_register_callback>:
 */
void i2c_master_register_callback(
		struct i2c_master_module *const module,
		const i2c_master_callback_t callback,
		enum i2c_master_callback callback_type)
{
   13a08:	b580      	push	{r7, lr}
   13a0a:	b084      	sub	sp, #16
   13a0c:	af00      	add	r7, sp, #0
   13a0e:	60f8      	str	r0, [r7, #12]
   13a10:	60b9      	str	r1, [r7, #8]
   13a12:	1dfb      	adds	r3, r7, #7
   13a14:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback */
	module->callbacks[callback_type] = callback;
   13a16:	1dfb      	adds	r3, r7, #7
   13a18:	781b      	ldrb	r3, [r3, #0]
   13a1a:	68fa      	ldr	r2, [r7, #12]
   13a1c:	3302      	adds	r3, #2
   13a1e:	009b      	lsls	r3, r3, #2
   13a20:	18d3      	adds	r3, r2, r3
   13a22:	3304      	adds	r3, #4
   13a24:	68ba      	ldr	r2, [r7, #8]
   13a26:	601a      	str	r2, [r3, #0]

	/* Set corresponding bit to set callback as registered */
	module->registered_callback |= (1 << callback_type);
   13a28:	68fb      	ldr	r3, [r7, #12]
   13a2a:	7e1b      	ldrb	r3, [r3, #24]
   13a2c:	b2db      	uxtb	r3, r3
   13a2e:	b25a      	sxtb	r2, r3
   13a30:	1dfb      	adds	r3, r7, #7
   13a32:	781b      	ldrb	r3, [r3, #0]
   13a34:	2101      	movs	r1, #1
   13a36:	4099      	lsls	r1, r3
   13a38:	000b      	movs	r3, r1
   13a3a:	b25b      	sxtb	r3, r3
   13a3c:	4313      	orrs	r3, r2
   13a3e:	b25b      	sxtb	r3, r3
   13a40:	b2da      	uxtb	r2, r3
   13a42:	68fb      	ldr	r3, [r7, #12]
   13a44:	761a      	strb	r2, [r3, #24]
}
   13a46:	46c0      	nop			; (mov r8, r8)
   13a48:	46bd      	mov	sp, r7
   13a4a:	b004      	add	sp, #16
   13a4c:	bd80      	pop	{r7, pc}
	...

00013a50 <_i2c_master_read_packet>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13a50:	b590      	push	{r4, r7, lr}
   13a52:	b087      	sub	sp, #28
   13a54:	af00      	add	r7, sp, #0
   13a56:	6078      	str	r0, [r7, #4]
   13a58:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13a5a:	687b      	ldr	r3, [r7, #4]
   13a5c:	681b      	ldr	r3, [r3, #0]
   13a5e:	613b      	str	r3, [r7, #16]
	enum status_code tmp_status;

	/* Save packet to software module */
	module->buffer             = packet->data;
   13a60:	683b      	ldr	r3, [r7, #0]
   13a62:	685a      	ldr	r2, [r3, #4]
   13a64:	687b      	ldr	r3, [r7, #4]
   13a66:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   13a68:	683b      	ldr	r3, [r7, #0]
   13a6a:	885a      	ldrh	r2, [r3, #2]
   13a6c:	687b      	ldr	r3, [r7, #4]
   13a6e:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_READ;
   13a70:	687b      	ldr	r3, [r7, #4]
   13a72:	2224      	movs	r2, #36	; 0x24
   13a74:	2101      	movs	r1, #1
   13a76:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   13a78:	687b      	ldr	r3, [r7, #4]
   13a7a:	2225      	movs	r2, #37	; 0x25
   13a7c:	2105      	movs	r1, #5
   13a7e:	5499      	strb	r1, [r3, r2]

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13a80:	693b      	ldr	r3, [r7, #16]
   13a82:	681b      	ldr	r3, [r3, #0]
   13a84:	011b      	lsls	r3, r3, #4
   13a86:	0fdb      	lsrs	r3, r3, #31
   13a88:	b2db      	uxtb	r3, r3
   13a8a:	001a      	movs	r2, r3
   13a8c:	230f      	movs	r3, #15
   13a8e:	18fb      	adds	r3, r7, r3
   13a90:	1e51      	subs	r1, r2, #1
   13a92:	418a      	sbcs	r2, r1
   13a94:	701a      	strb	r2, [r3, #0]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   13a96:	683b      	ldr	r3, [r7, #0]
   13a98:	7a5b      	ldrb	r3, [r3, #9]
   13a9a:	2b00      	cmp	r3, #0
   13a9c:	d006      	beq.n	13aac <_i2c_master_read_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   13a9e:	683b      	ldr	r3, [r7, #0]
   13aa0:	7a9a      	ldrb	r2, [r3, #10]
   13aa2:	687b      	ldr	r3, [r7, #4]
   13aa4:	0011      	movs	r1, r2
   13aa6:	0018      	movs	r0, r3
   13aa8:	4b3b      	ldr	r3, [pc, #236]	; (13b98 <_i2c_master_read_packet+0x148>)
   13aaa:	4798      	blx	r3
	}

	/* Set action to ACK or NACK. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
   13aac:	230f      	movs	r3, #15
   13aae:	18fb      	adds	r3, r7, r3
   13ab0:	781b      	ldrb	r3, [r3, #0]
   13ab2:	2b00      	cmp	r3, #0
   13ab4:	d00b      	beq.n	13ace <_i2c_master_read_packet+0x7e>
   13ab6:	683b      	ldr	r3, [r7, #0]
   13ab8:	885b      	ldrh	r3, [r3, #2]
   13aba:	2b01      	cmp	r3, #1
   13abc:	d107      	bne.n	13ace <_i2c_master_read_packet+0x7e>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   13abe:	693b      	ldr	r3, [r7, #16]
   13ac0:	685b      	ldr	r3, [r3, #4]
   13ac2:	2280      	movs	r2, #128	; 0x80
   13ac4:	02d2      	lsls	r2, r2, #11
   13ac6:	431a      	orrs	r2, r3
   13ac8:	693b      	ldr	r3, [r7, #16]
   13aca:	605a      	str	r2, [r3, #4]
   13acc:	e005      	b.n	13ada <_i2c_master_read_packet+0x8a>
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   13ace:	693b      	ldr	r3, [r7, #16]
   13ad0:	685b      	ldr	r3, [r3, #4]
   13ad2:	4a32      	ldr	r2, [pc, #200]	; (13b9c <_i2c_master_read_packet+0x14c>)
   13ad4:	401a      	ands	r2, r3
   13ad6:	693b      	ldr	r3, [r7, #16]
   13ad8:	605a      	str	r2, [r3, #4]
	}

	if (packet->ten_bit_address) {
   13ada:	683b      	ldr	r3, [r7, #0]
   13adc:	7a1b      	ldrb	r3, [r3, #8]
   13ade:	2b00      	cmp	r3, #0
   13ae0:	d045      	beq.n	13b6e <_i2c_master_read_packet+0x11e>
		/*
		 * Write ADDR.ADDR[10:1] with the 10-bit address. ADDR.TENBITEN must
		 * be set and read/write bit (ADDR.ADDR[0]) equal to 0.
		 */
		i2c_module->ADDR.reg = (packet->address << 1) |
   13ae2:	683b      	ldr	r3, [r7, #0]
   13ae4:	881b      	ldrh	r3, [r3, #0]
   13ae6:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13ae8:	683b      	ldr	r3, [r7, #0]
   13aea:	7a5b      	ldrb	r3, [r3, #9]
   13aec:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
   13aee:	4313      	orrs	r3, r2
   13af0:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13af2:	2380      	movs	r3, #128	; 0x80
   13af4:	021b      	lsls	r3, r3, #8
   13af6:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) |
   13af8:	693b      	ldr	r3, [r7, #16]
   13afa:	625a      	str	r2, [r3, #36]	; 0x24
			SERCOM_I2CM_ADDR_TENBITEN;

		/* Wait for response on bus. */
		tmp_status = _i2c_master_wait_for_bus(module);
   13afc:	2317      	movs	r3, #23
   13afe:	18fc      	adds	r4, r7, r3
   13b00:	687b      	ldr	r3, [r7, #4]
   13b02:	0018      	movs	r0, r3
   13b04:	4b26      	ldr	r3, [pc, #152]	; (13ba0 <_i2c_master_read_packet+0x150>)
   13b06:	4798      	blx	r3
   13b08:	0003      	movs	r3, r0
   13b0a:	7023      	strb	r3, [r4, #0]

		/* Set action to ack. */
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   13b0c:	693b      	ldr	r3, [r7, #16]
   13b0e:	685b      	ldr	r3, [r3, #4]
   13b10:	4a22      	ldr	r2, [pc, #136]	; (13b9c <_i2c_master_read_packet+0x14c>)
   13b12:	401a      	ands	r2, r3
   13b14:	693b      	ldr	r3, [r7, #16]
   13b16:	605a      	str	r2, [r3, #4]

		/* Check for address response error unless previous error is
		 * detected. */
		if (tmp_status == STATUS_OK) {
   13b18:	2317      	movs	r3, #23
   13b1a:	18fb      	adds	r3, r7, r3
   13b1c:	781b      	ldrb	r3, [r3, #0]
   13b1e:	2b00      	cmp	r3, #0
   13b20:	d107      	bne.n	13b32 <_i2c_master_read_packet+0xe2>
			tmp_status = _i2c_master_address_response(module);
   13b22:	2317      	movs	r3, #23
   13b24:	18fc      	adds	r4, r7, r3
   13b26:	687b      	ldr	r3, [r7, #4]
   13b28:	0018      	movs	r0, r3
   13b2a:	4b1e      	ldr	r3, [pc, #120]	; (13ba4 <_i2c_master_read_packet+0x154>)
   13b2c:	4798      	blx	r3
   13b2e:	0003      	movs	r3, r0
   13b30:	7023      	strb	r3, [r4, #0]
		}

		if (tmp_status == STATUS_OK) {
   13b32:	2317      	movs	r3, #23
   13b34:	18fb      	adds	r3, r7, r3
   13b36:	781b      	ldrb	r3, [r3, #0]
   13b38:	2b00      	cmp	r3, #0
   13b3a:	d114      	bne.n	13b66 <_i2c_master_read_packet+0x116>
			/* Enable interrupts */
			i2c_module->INTENSET.reg =
   13b3c:	693b      	ldr	r3, [r7, #16]
   13b3e:	2203      	movs	r2, #3
   13b40:	759a      	strb	r2, [r3, #22]

			/*
			 * Write ADDR[7:0] register to "11110 address[9:8] 1"
			 * ADDR.TENBITEN must be cleared
			 */
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   13b42:	683b      	ldr	r3, [r7, #0]
   13b44:	881b      	ldrh	r3, [r3, #0]
   13b46:	0a1b      	lsrs	r3, r3, #8
   13b48:	b29b      	uxth	r3, r3
   13b4a:	2278      	movs	r2, #120	; 0x78
   13b4c:	4313      	orrs	r3, r2
   13b4e:	b29b      	uxth	r3, r3
   13b50:	005a      	lsls	r2, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13b52:	683b      	ldr	r3, [r7, #0]
   13b54:	7a5b      	ldrb	r3, [r3, #9]
   13b56:	039b      	lsls	r3, r3, #14
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   13b58:	4313      	orrs	r3, r2
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13b5a:	2201      	movs	r2, #1
   13b5c:	4313      	orrs	r3, r2
   13b5e:	001a      	movs	r2, r3
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
   13b60:	693b      	ldr	r3, [r7, #16]
   13b62:	625a      	str	r2, [r3, #36]	; 0x24
   13b64:	e012      	b.n	13b8c <_i2c_master_read_packet+0x13c>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
   13b66:	2317      	movs	r3, #23
   13b68:	18fb      	adds	r3, r7, r3
   13b6a:	781b      	ldrb	r3, [r3, #0]
   13b6c:	e00f      	b.n	13b8e <_i2c_master_read_packet+0x13e>
		}
	} else {
		/* Enable interrupts */
		i2c_module->INTENSET.reg =
   13b6e:	693b      	ldr	r3, [r7, #16]
   13b70:	2203      	movs	r2, #3
   13b72:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

		/* Set address and direction bit. Will send start command on bus */
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   13b74:	683b      	ldr	r3, [r7, #0]
   13b76:	881b      	ldrh	r3, [r3, #0]
   13b78:	005b      	lsls	r3, r3, #1
   13b7a:	2201      	movs	r2, #1
   13b7c:	431a      	orrs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   13b7e:	683b      	ldr	r3, [r7, #0]
   13b80:	7a5b      	ldrb	r3, [r3, #9]
   13b82:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
   13b84:	4313      	orrs	r3, r2
   13b86:	001a      	movs	r2, r3
   13b88:	693b      	ldr	r3, [r7, #16]
   13b8a:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   13b8c:	2300      	movs	r3, #0
}
   13b8e:	0018      	movs	r0, r3
   13b90:	46bd      	mov	sp, r7
   13b92:	b007      	add	sp, #28
   13b94:	bd90      	pop	{r4, r7, pc}
   13b96:	46c0      	nop			; (mov r8, r8)
   13b98:	00018b79 	.word	0x00018b79
   13b9c:	fffbffff 	.word	0xfffbffff
   13ba0:	00018b1b 	.word	0x00018b1b
   13ba4:	00018abd 	.word	0x00018abd

00013ba8 <i2c_master_read_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_read_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13ba8:	b580      	push	{r7, lr}
   13baa:	b082      	sub	sp, #8
   13bac:	af00      	add	r7, sp, #0
   13bae:	6078      	str	r0, [r7, #4]
   13bb0:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
   13bb2:	687b      	ldr	r3, [r7, #4]
   13bb4:	8b9b      	ldrh	r3, [r3, #28]
   13bb6:	b29b      	uxth	r3, r3
   13bb8:	2b00      	cmp	r3, #0
   13bba:	d001      	beq.n	13bc0 <i2c_master_read_packet_job+0x18>
		return STATUS_BUSY;
   13bbc:	2305      	movs	r3, #5
   13bbe:	e00c      	b.n	13bda <i2c_master_read_packet_job+0x32>
	}

	/* Make sure we send STOP */
	module->send_stop = true;
   13bc0:	687b      	ldr	r3, [r7, #4]
   13bc2:	2201      	movs	r2, #1
   13bc4:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   13bc6:	687b      	ldr	r3, [r7, #4]
   13bc8:	2201      	movs	r2, #1
   13bca:	72da      	strb	r2, [r3, #11]
	/* Start reading */
	return _i2c_master_read_packet(module, packet);
   13bcc:	683a      	ldr	r2, [r7, #0]
   13bce:	687b      	ldr	r3, [r7, #4]
   13bd0:	0011      	movs	r1, r2
   13bd2:	0018      	movs	r0, r3
   13bd4:	4b03      	ldr	r3, [pc, #12]	; (13be4 <i2c_master_read_packet_job+0x3c>)
   13bd6:	4798      	blx	r3
   13bd8:	0003      	movs	r3, r0
}
   13bda:	0018      	movs	r0, r3
   13bdc:	46bd      	mov	sp, r7
   13bde:	b002      	add	sp, #8
   13be0:	bd80      	pop	{r7, pc}
   13be2:	46c0      	nop			; (mov r8, r8)
   13be4:	00013a51 	.word	0x00013a51

00013be8 <_i2c_master_write_packet>:
 * \retval STATUS_BUSY If module is currently busy with another transfer
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13be8:	b580      	push	{r7, lr}
   13bea:	b084      	sub	sp, #16
   13bec:	af00      	add	r7, sp, #0
   13bee:	6078      	str	r0, [r7, #4]
   13bf0:	6039      	str	r1, [r7, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13bf2:	687b      	ldr	r3, [r7, #4]
   13bf4:	681b      	ldr	r3, [r3, #0]
   13bf6:	60fb      	str	r3, [r7, #12]

	/* Switch to high speed mode */
	if (packet->high_speed) {
   13bf8:	683b      	ldr	r3, [r7, #0]
   13bfa:	7a5b      	ldrb	r3, [r3, #9]
   13bfc:	2b00      	cmp	r3, #0
   13bfe:	d006      	beq.n	13c0e <_i2c_master_write_packet+0x26>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
   13c00:	683b      	ldr	r3, [r7, #0]
   13c02:	7a9a      	ldrb	r2, [r3, #10]
   13c04:	687b      	ldr	r3, [r7, #4]
   13c06:	0011      	movs	r1, r2
   13c08:	0018      	movs	r0, r3
   13c0a:	4b1e      	ldr	r3, [pc, #120]	; (13c84 <_i2c_master_write_packet+0x9c>)
   13c0c:	4798      	blx	r3
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
   13c0e:	68fb      	ldr	r3, [r7, #12]
   13c10:	685b      	ldr	r3, [r3, #4]
   13c12:	4a1d      	ldr	r2, [pc, #116]	; (13c88 <_i2c_master_write_packet+0xa0>)
   13c14:	401a      	ands	r2, r3
   13c16:	68fb      	ldr	r3, [r7, #12]
   13c18:	605a      	str	r2, [r3, #4]

	/* Save packet to software module */
	module->buffer             = packet->data;
   13c1a:	683b      	ldr	r3, [r7, #0]
   13c1c:	685a      	ldr	r2, [r3, #4]
   13c1e:	687b      	ldr	r3, [r7, #4]
   13c20:	621a      	str	r2, [r3, #32]
	module->buffer_remaining   = packet->data_length;
   13c22:	683b      	ldr	r3, [r7, #0]
   13c24:	885a      	ldrh	r2, [r3, #2]
   13c26:	687b      	ldr	r3, [r7, #4]
   13c28:	839a      	strh	r2, [r3, #28]
	module->transfer_direction = I2C_TRANSFER_WRITE;
   13c2a:	687b      	ldr	r3, [r7, #4]
   13c2c:	2224      	movs	r2, #36	; 0x24
   13c2e:	2100      	movs	r1, #0
   13c30:	5499      	strb	r1, [r3, r2]
	module->status             = STATUS_BUSY;
   13c32:	687b      	ldr	r3, [r7, #4]
   13c34:	2225      	movs	r2, #37	; 0x25
   13c36:	2105      	movs	r1, #5
   13c38:	5499      	strb	r1, [r3, r2]

	/* Enable interrupts */
	i2c_module->INTENSET.reg =
   13c3a:	68fb      	ldr	r3, [r7, #12]
   13c3c:	2203      	movs	r2, #3
   13c3e:	759a      	strb	r2, [r3, #22]
			SERCOM_I2CM_INTENSET_MB | SERCOM_I2CM_INTENSET_SB;

	/* Set address and direction bit, will send start command on bus */
	if (packet->ten_bit_address) {
   13c40:	683b      	ldr	r3, [r7, #0]
   13c42:	7a1b      	ldrb	r3, [r3, #8]
   13c44:	2b00      	cmp	r3, #0
   13c46:	d00d      	beq.n	13c64 <_i2c_master_write_packet+0x7c>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   13c48:	683b      	ldr	r3, [r7, #0]
   13c4a:	881b      	ldrh	r3, [r3, #0]
   13c4c:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13c4e:	683b      	ldr	r3, [r7, #0]
   13c50:	7a5b      	ldrb	r3, [r3, #9]
   13c52:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   13c54:	4313      	orrs	r3, r2
   13c56:	001a      	movs	r2, r3
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
   13c58:	2380      	movs	r3, #128	; 0x80
   13c5a:	021b      	lsls	r3, r3, #8
   13c5c:	431a      	orrs	r2, r3
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   13c5e:	68fb      	ldr	r3, [r7, #12]
   13c60:	625a      	str	r2, [r3, #36]	; 0x24
   13c62:	e009      	b.n	13c78 <_i2c_master_write_packet+0x90>
			SERCOM_I2CM_ADDR_TENBITEN;
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   13c64:	683b      	ldr	r3, [r7, #0]
   13c66:	881b      	ldrh	r3, [r3, #0]
   13c68:	005a      	lsls	r2, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
   13c6a:	683b      	ldr	r3, [r7, #0]
   13c6c:	7a5b      	ldrb	r3, [r3, #9]
   13c6e:	039b      	lsls	r3, r3, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
   13c70:	4313      	orrs	r3, r2
   13c72:	001a      	movs	r2, r3
   13c74:	68fb      	ldr	r3, [r7, #12]
   13c76:	625a      	str	r2, [r3, #36]	; 0x24
	}

	return STATUS_OK;
   13c78:	2300      	movs	r3, #0
}
   13c7a:	0018      	movs	r0, r3
   13c7c:	46bd      	mov	sp, r7
   13c7e:	b004      	add	sp, #16
   13c80:	bd80      	pop	{r7, pc}
   13c82:	46c0      	nop			; (mov r8, r8)
   13c84:	00018b79 	.word	0x00018b79
   13c88:	fffbffff 	.word	0xfffbffff

00013c8c <i2c_master_write_packet_job>:
 * \retval STATUS_BUSY  If module is currently busy with another transfer
 */
enum status_code i2c_master_write_packet_job(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
   13c8c:	b580      	push	{r7, lr}
   13c8e:	b082      	sub	sp, #8
   13c90:	af00      	add	r7, sp, #0
   13c92:	6078      	str	r0, [r7, #4]
   13c94:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy with another job. */
	if (module->buffer_remaining > 0) {
   13c96:	687b      	ldr	r3, [r7, #4]
   13c98:	8b9b      	ldrh	r3, [r3, #28]
   13c9a:	b29b      	uxth	r3, r3
   13c9c:	2b00      	cmp	r3, #0
   13c9e:	d001      	beq.n	13ca4 <i2c_master_write_packet_job+0x18>
		return STATUS_BUSY;
   13ca0:	2305      	movs	r3, #5
   13ca2:	e00c      	b.n	13cbe <i2c_master_write_packet_job+0x32>
	}

	/* Make sure we send STOP at end*/
	module->send_stop = true;
   13ca4:	687b      	ldr	r3, [r7, #4]
   13ca6:	2201      	movs	r2, #1
   13ca8:	729a      	strb	r2, [r3, #10]
	module->send_nack = true;
   13caa:	687b      	ldr	r3, [r7, #4]
   13cac:	2201      	movs	r2, #1
   13cae:	72da      	strb	r2, [r3, #11]
	/* Start write operation */
	return _i2c_master_write_packet(module, packet);
   13cb0:	683a      	ldr	r2, [r7, #0]
   13cb2:	687b      	ldr	r3, [r7, #4]
   13cb4:	0011      	movs	r1, r2
   13cb6:	0018      	movs	r0, r3
   13cb8:	4b03      	ldr	r3, [pc, #12]	; (13cc8 <i2c_master_write_packet_job+0x3c>)
   13cba:	4798      	blx	r3
   13cbc:	0003      	movs	r3, r0
}
   13cbe:	0018      	movs	r0, r3
   13cc0:	46bd      	mov	sp, r7
   13cc2:	b002      	add	sp, #8
   13cc4:	bd80      	pop	{r7, pc}
   13cc6:	46c0      	nop			; (mov r8, r8)
   13cc8:	00013be9 	.word	0x00013be9

00013ccc <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
   13ccc:	b580      	push	{r7, lr}
   13cce:	b086      	sub	sp, #24
   13cd0:	af00      	add	r7, sp, #0
   13cd2:	0002      	movs	r2, r0
   13cd4:	1dfb      	adds	r3, r7, #7
   13cd6:	701a      	strb	r2, [r3, #0]
	/* Get software module for callback handling */
	struct i2c_master_module *module =
			(struct i2c_master_module*)_sercom_instances[instance];
   13cd8:	1dfb      	adds	r3, r7, #7
   13cda:	781a      	ldrb	r2, [r3, #0]
	struct i2c_master_module *module =
   13cdc:	4b93      	ldr	r3, [pc, #588]	; (13f2c <_i2c_master_interrupt_handler+0x260>)
   13cde:	0092      	lsls	r2, r2, #2
   13ce0:	58d3      	ldr	r3, [r2, r3]
   13ce2:	617b      	str	r3, [r7, #20]

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   13ce4:	697b      	ldr	r3, [r7, #20]
   13ce6:	681b      	ldr	r3, [r3, #0]
   13ce8:	613b      	str	r3, [r7, #16]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
   13cea:	693b      	ldr	r3, [r7, #16]
   13cec:	681b      	ldr	r3, [r3, #0]
   13cee:	011b      	lsls	r3, r3, #4
   13cf0:	0fdb      	lsrs	r3, r3, #31
   13cf2:	b2db      	uxtb	r3, r3
   13cf4:	001a      	movs	r2, r3
   13cf6:	230f      	movs	r3, #15
   13cf8:	18fb      	adds	r3, r7, r3
   13cfa:	1e51      	subs	r1, r2, #1
   13cfc:	418a      	sbcs	r2, r1
   13cfe:	701a      	strb	r2, [r3, #0]

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
   13d00:	230e      	movs	r3, #14
   13d02:	18fb      	adds	r3, r7, r3
   13d04:	697a      	ldr	r2, [r7, #20]
   13d06:	7e52      	ldrb	r2, [r2, #25]
   13d08:	701a      	strb	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   13d0a:	697b      	ldr	r3, [r7, #20]
   13d0c:	7e1b      	ldrb	r3, [r3, #24]
   13d0e:	b2da      	uxtb	r2, r3
   13d10:	230e      	movs	r3, #14
   13d12:	18fb      	adds	r3, r7, r3
   13d14:	210e      	movs	r1, #14
   13d16:	1879      	adds	r1, r7, r1
   13d18:	7809      	ldrb	r1, [r1, #0]
   13d1a:	400a      	ands	r2, r1
   13d1c:	701a      	strb	r2, [r3, #0]

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
   13d1e:	697b      	ldr	r3, [r7, #20]
   13d20:	8b5b      	ldrh	r3, [r3, #26]
   13d22:	b29b      	uxth	r3, r3
   13d24:	2b00      	cmp	r3, #0
   13d26:	d109      	bne.n	13d3c <_i2c_master_interrupt_handler+0x70>
   13d28:	697b      	ldr	r3, [r7, #20]
   13d2a:	8b9b      	ldrh	r3, [r3, #28]
   13d2c:	b29b      	uxth	r3, r3
   13d2e:	2b00      	cmp	r3, #0
   13d30:	d004      	beq.n	13d3c <_i2c_master_interrupt_handler+0x70>
		/* Call function for address response */
		_i2c_master_async_address_response(module);
   13d32:	697b      	ldr	r3, [r7, #20]
   13d34:	0018      	movs	r0, r3
   13d36:	4b7e      	ldr	r3, [pc, #504]	; (13f30 <_i2c_master_interrupt_handler+0x264>)
   13d38:	4798      	blx	r3
   13d3a:	e070      	b.n	13e1e <_i2c_master_interrupt_handler+0x152>

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   13d3c:	697b      	ldr	r3, [r7, #20]
   13d3e:	8b5b      	ldrh	r3, [r3, #26]
   13d40:	b29b      	uxth	r3, r3
   13d42:	2b00      	cmp	r3, #0
   13d44:	d039      	beq.n	13dba <_i2c_master_interrupt_handler+0xee>
   13d46:	697b      	ldr	r3, [r7, #20]
   13d48:	8b9b      	ldrh	r3, [r3, #28]
   13d4a:	b29b      	uxth	r3, r3
   13d4c:	2b00      	cmp	r3, #0
   13d4e:	d134      	bne.n	13dba <_i2c_master_interrupt_handler+0xee>
			(module->status == STATUS_BUSY) &&
   13d50:	697b      	ldr	r3, [r7, #20]
   13d52:	2225      	movs	r2, #37	; 0x25
   13d54:	5c9b      	ldrb	r3, [r3, r2]
   13d56:	b2db      	uxtb	r3, r3
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   13d58:	2b05      	cmp	r3, #5
   13d5a:	d12e      	bne.n	13dba <_i2c_master_interrupt_handler+0xee>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
   13d5c:	697b      	ldr	r3, [r7, #20]
   13d5e:	2224      	movs	r2, #36	; 0x24
   13d60:	5c9b      	ldrb	r3, [r3, r2]
   13d62:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   13d64:	2b00      	cmp	r3, #0
   13d66:	d128      	bne.n	13dba <_i2c_master_interrupt_handler+0xee>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   13d68:	693b      	ldr	r3, [r7, #16]
   13d6a:	2203      	movs	r2, #3
   13d6c:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   13d6e:	697b      	ldr	r3, [r7, #20]
   13d70:	2200      	movs	r2, #0
   13d72:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   13d74:	697b      	ldr	r3, [r7, #20]
   13d76:	2225      	movs	r2, #37	; 0x25
   13d78:	2100      	movs	r1, #0
   13d7a:	5499      	strb	r1, [r3, r2]

		if (module->send_stop) {
   13d7c:	697b      	ldr	r3, [r7, #20]
   13d7e:	7a9b      	ldrb	r3, [r3, #10]
   13d80:	2b00      	cmp	r3, #0
   13d82:	d00b      	beq.n	13d9c <_i2c_master_interrupt_handler+0xd0>
			/* Send stop condition */
			_i2c_master_wait_for_sync(module);
   13d84:	697b      	ldr	r3, [r7, #20]
   13d86:	0018      	movs	r0, r3
   13d88:	4b6a      	ldr	r3, [pc, #424]	; (13f34 <_i2c_master_interrupt_handler+0x268>)
   13d8a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   13d8c:	693b      	ldr	r3, [r7, #16]
   13d8e:	685b      	ldr	r3, [r3, #4]
   13d90:	22c0      	movs	r2, #192	; 0xc0
   13d92:	0292      	lsls	r2, r2, #10
   13d94:	431a      	orrs	r2, r3
   13d96:	693b      	ldr	r3, [r7, #16]
   13d98:	605a      	str	r2, [r3, #4]
   13d9a:	e002      	b.n	13da2 <_i2c_master_interrupt_handler+0xd6>
		} else {
			/* Clear write interrupt flag */
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
   13d9c:	693b      	ldr	r3, [r7, #16]
   13d9e:	2201      	movs	r2, #1
   13da0:	761a      	strb	r2, [r3, #24]
		}
		
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   13da2:	230e      	movs	r3, #14
   13da4:	18fb      	adds	r3, r7, r3
   13da6:	781b      	ldrb	r3, [r3, #0]
   13da8:	2201      	movs	r2, #1
   13daa:	4013      	ands	r3, r2
   13dac:	d037      	beq.n	13e1e <_i2c_master_interrupt_handler+0x152>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   13dae:	697b      	ldr	r3, [r7, #20]
   13db0:	68db      	ldr	r3, [r3, #12]
   13db2:	697a      	ldr	r2, [r7, #20]
   13db4:	0010      	movs	r0, r2
   13db6:	4798      	blx	r3
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
   13db8:	e031      	b.n	13e1e <_i2c_master_interrupt_handler+0x152>
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
   13dba:	697b      	ldr	r3, [r7, #20]
   13dbc:	8b5b      	ldrh	r3, [r3, #26]
   13dbe:	b29b      	uxth	r3, r3
   13dc0:	2b00      	cmp	r3, #0
   13dc2:	d02c      	beq.n	13e1e <_i2c_master_interrupt_handler+0x152>
   13dc4:	697b      	ldr	r3, [r7, #20]
   13dc6:	8b9b      	ldrh	r3, [r3, #28]
   13dc8:	b29b      	uxth	r3, r3
   13dca:	2b00      	cmp	r3, #0
   13dcc:	d027      	beq.n	13e1e <_i2c_master_interrupt_handler+0x152>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   13dce:	693b      	ldr	r3, [r7, #16]
   13dd0:	8b5b      	ldrh	r3, [r3, #26]
   13dd2:	b29b      	uxth	r3, r3
   13dd4:	001a      	movs	r2, r3
   13dd6:	2320      	movs	r3, #32
   13dd8:	4013      	ands	r3, r2
   13dda:	d111      	bne.n	13e00 <_i2c_master_interrupt_handler+0x134>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   13ddc:	230f      	movs	r3, #15
   13dde:	18fb      	adds	r3, r7, r3
   13de0:	781b      	ldrb	r3, [r3, #0]
   13de2:	2201      	movs	r2, #1
   13de4:	4053      	eors	r3, r2
   13de6:	b2db      	uxtb	r3, r3
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
   13de8:	2b00      	cmp	r3, #0
   13dea:	d104      	bne.n	13df6 <_i2c_master_interrupt_handler+0x12a>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
   13dec:	697b      	ldr	r3, [r7, #20]
   13dee:	8b9b      	ldrh	r3, [r3, #28]
   13df0:	b29b      	uxth	r3, r3
   13df2:	2b01      	cmp	r3, #1
   13df4:	d004      	beq.n	13e00 <_i2c_master_interrupt_handler+0x134>
			module->status = STATUS_ERR_PACKET_COLLISION;
   13df6:	697b      	ldr	r3, [r7, #20]
   13df8:	2225      	movs	r2, #37	; 0x25
   13dfa:	2141      	movs	r1, #65	; 0x41
   13dfc:	5499      	strb	r1, [r3, r2]
   13dfe:	e00e      	b.n	13e1e <_i2c_master_interrupt_handler+0x152>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
   13e00:	697b      	ldr	r3, [r7, #20]
   13e02:	2224      	movs	r2, #36	; 0x24
   13e04:	5c9b      	ldrb	r3, [r3, r2]
   13e06:	b2db      	uxtb	r3, r3
   13e08:	2b00      	cmp	r3, #0
   13e0a:	d104      	bne.n	13e16 <_i2c_master_interrupt_handler+0x14a>
			_i2c_master_write(module);
   13e0c:	697b      	ldr	r3, [r7, #20]
   13e0e:	0018      	movs	r0, r3
   13e10:	4b49      	ldr	r3, [pc, #292]	; (13f38 <_i2c_master_interrupt_handler+0x26c>)
   13e12:	4798      	blx	r3
   13e14:	e003      	b.n	13e1e <_i2c_master_interrupt_handler+0x152>
		} else {
			_i2c_master_read(module);
   13e16:	697b      	ldr	r3, [r7, #20]
   13e18:	0018      	movs	r0, r3
   13e1a:	4b48      	ldr	r3, [pc, #288]	; (13f3c <_i2c_master_interrupt_handler+0x270>)
   13e1c:	4798      	blx	r3
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   13e1e:	697b      	ldr	r3, [r7, #20]
   13e20:	8b5b      	ldrh	r3, [r3, #26]
   13e22:	b29b      	uxth	r3, r3
   13e24:	2b00      	cmp	r3, #0
   13e26:	d047      	beq.n	13eb8 <_i2c_master_interrupt_handler+0x1ec>
   13e28:	697b      	ldr	r3, [r7, #20]
   13e2a:	8b9b      	ldrh	r3, [r3, #28]
   13e2c:	b29b      	uxth	r3, r3
   13e2e:	2b00      	cmp	r3, #0
   13e30:	d142      	bne.n	13eb8 <_i2c_master_interrupt_handler+0x1ec>
			(module->status == STATUS_BUSY) &&
   13e32:	697b      	ldr	r3, [r7, #20]
   13e34:	2225      	movs	r2, #37	; 0x25
   13e36:	5c9b      	ldrb	r3, [r3, r2]
   13e38:	b2db      	uxtb	r3, r3
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
   13e3a:	2b05      	cmp	r3, #5
   13e3c:	d13c      	bne.n	13eb8 <_i2c_master_interrupt_handler+0x1ec>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
   13e3e:	697b      	ldr	r3, [r7, #20]
   13e40:	2224      	movs	r2, #36	; 0x24
   13e42:	5c9b      	ldrb	r3, [r3, r2]
   13e44:	b2db      	uxtb	r3, r3
			(module->status == STATUS_BUSY) &&
   13e46:	2b01      	cmp	r3, #1
   13e48:	d136      	bne.n	13eb8 <_i2c_master_interrupt_handler+0x1ec>
		
		/* Clear read interrupt flag */
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   13e4a:	693b      	ldr	r3, [r7, #16]
   13e4c:	7e1b      	ldrb	r3, [r3, #24]
   13e4e:	b2db      	uxtb	r3, r3
   13e50:	001a      	movs	r2, r3
   13e52:	2302      	movs	r3, #2
   13e54:	4013      	ands	r3, r2
   13e56:	d002      	beq.n	13e5e <_i2c_master_interrupt_handler+0x192>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   13e58:	693b      	ldr	r3, [r7, #16]
   13e5a:	2202      	movs	r2, #2
   13e5c:	761a      	strb	r2, [r3, #24]
		}
		/* Stop packet operation */
		i2c_module->INTENCLR.reg =
   13e5e:	693b      	ldr	r3, [r7, #16]
   13e60:	2203      	movs	r2, #3
   13e62:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_MB | SERCOM_I2CM_INTENCLR_SB;
		module->buffer_length = 0;
   13e64:	697b      	ldr	r3, [r7, #20]
   13e66:	2200      	movs	r2, #0
   13e68:	835a      	strh	r2, [r3, #26]
		module->status        = STATUS_OK;
   13e6a:	697b      	ldr	r3, [r7, #20]
   13e6c:	2225      	movs	r2, #37	; 0x25
   13e6e:	2100      	movs	r1, #0
   13e70:	5499      	strb	r1, [r3, r2]

		/* Call appropriate callback if enabled and registered */
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
   13e72:	230e      	movs	r3, #14
   13e74:	18fb      	adds	r3, r7, r3
   13e76:	781b      	ldrb	r3, [r3, #0]
   13e78:	2202      	movs	r2, #2
   13e7a:	4013      	ands	r3, r2
   13e7c:	d00b      	beq.n	13e96 <_i2c_master_interrupt_handler+0x1ca>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
   13e7e:	697b      	ldr	r3, [r7, #20]
   13e80:	2224      	movs	r2, #36	; 0x24
   13e82:	5c9b      	ldrb	r3, [r3, r2]
   13e84:	b2db      	uxtb	r3, r3
   13e86:	2b01      	cmp	r3, #1
   13e88:	d105      	bne.n	13e96 <_i2c_master_interrupt_handler+0x1ca>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
   13e8a:	697b      	ldr	r3, [r7, #20]
   13e8c:	691b      	ldr	r3, [r3, #16]
   13e8e:	697a      	ldr	r2, [r7, #20]
   13e90:	0010      	movs	r0, r2
   13e92:	4798      	blx	r3
   13e94:	e010      	b.n	13eb8 <_i2c_master_interrupt_handler+0x1ec>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
   13e96:	230e      	movs	r3, #14
   13e98:	18fb      	adds	r3, r7, r3
   13e9a:	781b      	ldrb	r3, [r3, #0]
   13e9c:	2201      	movs	r2, #1
   13e9e:	4013      	ands	r3, r2
   13ea0:	d00a      	beq.n	13eb8 <_i2c_master_interrupt_handler+0x1ec>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
   13ea2:	697b      	ldr	r3, [r7, #20]
   13ea4:	2224      	movs	r2, #36	; 0x24
   13ea6:	5c9b      	ldrb	r3, [r3, r2]
   13ea8:	b2db      	uxtb	r3, r3
   13eaa:	2b00      	cmp	r3, #0
   13eac:	d104      	bne.n	13eb8 <_i2c_master_interrupt_handler+0x1ec>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
   13eae:	697b      	ldr	r3, [r7, #20]
   13eb0:	68db      	ldr	r3, [r3, #12]
   13eb2:	697a      	ldr	r2, [r7, #20]
   13eb4:	0010      	movs	r0, r2
   13eb6:	4798      	blx	r3
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
   13eb8:	697b      	ldr	r3, [r7, #20]
   13eba:	2225      	movs	r2, #37	; 0x25
   13ebc:	5c9b      	ldrb	r3, [r3, r2]
   13ebe:	b2db      	uxtb	r3, r3
   13ec0:	2b05      	cmp	r3, #5
   13ec2:	d02e      	beq.n	13f22 <_i2c_master_interrupt_handler+0x256>
   13ec4:	697b      	ldr	r3, [r7, #20]
   13ec6:	2225      	movs	r2, #37	; 0x25
   13ec8:	5c9b      	ldrb	r3, [r3, r2]
   13eca:	b2db      	uxtb	r3, r3
   13ecc:	2b00      	cmp	r3, #0
   13ece:	d028      	beq.n	13f22 <_i2c_master_interrupt_handler+0x256>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
   13ed0:	693b      	ldr	r3, [r7, #16]
   13ed2:	2203      	movs	r2, #3
   13ed4:	751a      	strb	r2, [r3, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
   13ed6:	697b      	ldr	r3, [r7, #20]
   13ed8:	2200      	movs	r2, #0
   13eda:	835a      	strh	r2, [r3, #26]
		module->buffer_remaining = 0;
   13edc:	697b      	ldr	r3, [r7, #20]
   13ede:	2200      	movs	r2, #0
   13ee0:	839a      	strh	r2, [r3, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   13ee2:	697b      	ldr	r3, [r7, #20]
   13ee4:	2225      	movs	r2, #37	; 0x25
   13ee6:	5c9b      	ldrb	r3, [r3, r2]
   13ee8:	b2db      	uxtb	r3, r3
   13eea:	2b41      	cmp	r3, #65	; 0x41
   13eec:	d00e      	beq.n	13f0c <_i2c_master_interrupt_handler+0x240>
				module->send_stop) {
   13eee:	697b      	ldr	r3, [r7, #20]
   13ef0:	7a9b      	ldrb	r3, [r3, #10]
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
   13ef2:	2b00      	cmp	r3, #0
   13ef4:	d00a      	beq.n	13f0c <_i2c_master_interrupt_handler+0x240>
			_i2c_master_wait_for_sync(module);
   13ef6:	697b      	ldr	r3, [r7, #20]
   13ef8:	0018      	movs	r0, r3
   13efa:	4b0e      	ldr	r3, [pc, #56]	; (13f34 <_i2c_master_interrupt_handler+0x268>)
   13efc:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
   13efe:	693b      	ldr	r3, [r7, #16]
   13f00:	685b      	ldr	r3, [r3, #4]
   13f02:	22e0      	movs	r2, #224	; 0xe0
   13f04:	02d2      	lsls	r2, r2, #11
   13f06:	431a      	orrs	r2, r3
   13f08:	693b      	ldr	r3, [r7, #16]
   13f0a:	605a      	str	r2, [r3, #4]
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
   13f0c:	230e      	movs	r3, #14
   13f0e:	18fb      	adds	r3, r7, r3
   13f10:	781b      	ldrb	r3, [r3, #0]
   13f12:	2204      	movs	r2, #4
   13f14:	4013      	ands	r3, r2
   13f16:	d004      	beq.n	13f22 <_i2c_master_interrupt_handler+0x256>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
   13f18:	697b      	ldr	r3, [r7, #20]
   13f1a:	695b      	ldr	r3, [r3, #20]
   13f1c:	697a      	ldr	r2, [r7, #20]
   13f1e:	0010      	movs	r0, r2
   13f20:	4798      	blx	r3
		}
	}
}
   13f22:	46c0      	nop			; (mov r8, r8)
   13f24:	46bd      	mov	sp, r7
   13f26:	b006      	add	sp, #24
   13f28:	bd80      	pop	{r7, pc}
   13f2a:	46c0      	nop			; (mov r8, r8)
   13f2c:	20005c58 	.word	0x20005c58
   13f30:	0001394d 	.word	0x0001394d
   13f34:	000137bd 	.word	0x000137bd
   13f38:	000138d1 	.word	0x000138d1
   13f3c:	000137e1 	.word	0x000137e1

00013f40 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
   13f40:	b580      	push	{r7, lr}
   13f42:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
   13f44:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
   13f48:	4b02      	ldr	r3, [pc, #8]	; (13f54 <NVIC_SystemReset+0x14>)
   13f4a:	4a03      	ldr	r2, [pc, #12]	; (13f58 <NVIC_SystemReset+0x18>)
   13f4c:	60da      	str	r2, [r3, #12]
   13f4e:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
   13f52:	e7fe      	b.n	13f52 <NVIC_SystemReset+0x12>
   13f54:	e000ed00 	.word	0xe000ed00
   13f58:	05fa0004 	.word	0x05fa0004

00013f5c <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
   13f5c:	b580      	push	{r7, lr}
   13f5e:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
   13f60:	4b02      	ldr	r3, [pc, #8]	; (13f6c <system_reset+0x10>)
   13f62:	4798      	blx	r3
}
   13f64:	46c0      	nop			; (mov r8, r8)
   13f66:	46bd      	mov	sp, r7
   13f68:	bd80      	pop	{r7, pc}
   13f6a:	46c0      	nop			; (mov r8, r8)
   13f6c:	00013f41 	.word	0x00013f41

00013f70 <vCommandConsoleTask>:
/******************************************************************************
 * CLI Thread
 ******************************************************************************/

void vCommandConsoleTask(void *pvParameters)
{
   13f70:	b580      	push	{r7, lr}
   13f72:	b086      	sub	sp, #24
   13f74:	af00      	add	r7, sp, #0
   13f76:	6078      	str	r0, [r7, #4]
    // REGISTER COMMANDS HERE
    FreeRTOS_CLIRegisterCommand(&xOTAUCommand);
   13f78:	4b9e      	ldr	r3, [pc, #632]	; (141f4 <vCommandConsoleTask+0x284>)
   13f7a:	0018      	movs	r0, r3
   13f7c:	4b9e      	ldr	r3, [pc, #632]	; (141f8 <vCommandConsoleTask+0x288>)
   13f7e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xImuGetCommand);
   13f80:	4b9e      	ldr	r3, [pc, #632]	; (141fc <vCommandConsoleTask+0x28c>)
   13f82:	0018      	movs	r0, r3
   13f84:	4b9c      	ldr	r3, [pc, #624]	; (141f8 <vCommandConsoleTask+0x288>)
   13f86:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xClearScreen);
   13f88:	4b9d      	ldr	r3, [pc, #628]	; (14200 <vCommandConsoleTask+0x290>)
   13f8a:	0018      	movs	r0, r3
   13f8c:	4b9a      	ldr	r3, [pc, #616]	; (141f8 <vCommandConsoleTask+0x288>)
   13f8e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xResetCommand);
   13f90:	4b9c      	ldr	r3, [pc, #624]	; (14204 <vCommandConsoleTask+0x294>)
   13f92:	0018      	movs	r0, r3
   13f94:	4b98      	ldr	r3, [pc, #608]	; (141f8 <vCommandConsoleTask+0x288>)
   13f96:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xNeotrellisTurnLEDCommand);
   13f98:	4b9b      	ldr	r3, [pc, #620]	; (14208 <vCommandConsoleTask+0x298>)
   13f9a:	0018      	movs	r0, r3
   13f9c:	4b96      	ldr	r3, [pc, #600]	; (141f8 <vCommandConsoleTask+0x288>)
   13f9e:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xNeotrellisProcessButtonCommand);
   13fa0:	4b9a      	ldr	r3, [pc, #616]	; (1420c <vCommandConsoleTask+0x29c>)
   13fa2:	0018      	movs	r0, r3
   13fa4:	4b94      	ldr	r3, [pc, #592]	; (141f8 <vCommandConsoleTask+0x288>)
   13fa6:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xDistanceSensorGetDistance);
   13fa8:	4b99      	ldr	r3, [pc, #612]	; (14210 <vCommandConsoleTask+0x2a0>)
   13faa:	0018      	movs	r0, r3
   13fac:	4b92      	ldr	r3, [pc, #584]	; (141f8 <vCommandConsoleTask+0x288>)
   13fae:	4798      	blx	r3
    FreeRTOS_CLIRegisterCommand(&xSendDummyGameData);
   13fb0:	4b98      	ldr	r3, [pc, #608]	; (14214 <vCommandConsoleTask+0x2a4>)
   13fb2:	0018      	movs	r0, r3
   13fb4:	4b90      	ldr	r3, [pc, #576]	; (141f8 <vCommandConsoleTask+0x288>)
   13fb6:	4798      	blx	r3
	FreeRTOS_CLIRegisterCommand(&xI2cScan);
   13fb8:	4b97      	ldr	r3, [pc, #604]	; (14218 <vCommandConsoleTask+0x2a8>)
   13fba:	0018      	movs	r0, r3
   13fbc:	4b8e      	ldr	r3, [pc, #568]	; (141f8 <vCommandConsoleTask+0x288>)
   13fbe:	4798      	blx	r3

    char cRxedChar[2];
    unsigned char cInputIndex = 0;
   13fc0:	2317      	movs	r3, #23
   13fc2:	18fb      	adds	r3, r7, r3
   13fc4:	2200      	movs	r2, #0
   13fc6:	701a      	strb	r2, [r3, #0]
    /* This code assumes the peripheral being used as the console has already
    been opened and configured, and is passed into the task as the task
    parameter.  Cast the task parameter to the correct type. */

    /* Send a welcome message to the user knows they are connected. */
    SerialConsoleWriteString((char *)pcWelcomeMessage);
   13fc8:	4b94      	ldr	r3, [pc, #592]	; (1421c <vCommandConsoleTask+0x2ac>)
   13fca:	0018      	movs	r0, r3
   13fcc:	4b94      	ldr	r3, [pc, #592]	; (14220 <vCommandConsoleTask+0x2b0>)
   13fce:	4798      	blx	r3

    // Any semaphores/mutexes/etc you needed to be initialized, you can do them here
    cliCharReadySemaphore = xSemaphoreCreateBinary();
   13fd0:	2203      	movs	r2, #3
   13fd2:	2100      	movs	r1, #0
   13fd4:	2001      	movs	r0, #1
   13fd6:	4b93      	ldr	r3, [pc, #588]	; (14224 <vCommandConsoleTask+0x2b4>)
   13fd8:	4798      	blx	r3
   13fda:	0002      	movs	r2, r0
   13fdc:	4b92      	ldr	r3, [pc, #584]	; (14228 <vCommandConsoleTask+0x2b8>)
   13fde:	601a      	str	r2, [r3, #0]
    if (cliCharReadySemaphore == NULL) {
   13fe0:	4b91      	ldr	r3, [pc, #580]	; (14228 <vCommandConsoleTask+0x2b8>)
   13fe2:	681b      	ldr	r3, [r3, #0]
   13fe4:	2b00      	cmp	r3, #0
   13fe6:	d107      	bne.n	13ff8 <vCommandConsoleTask+0x88>
        LogMessage(LOG_ERROR_LVL, "Could not allocate semaphore\r\n");
   13fe8:	4b90      	ldr	r3, [pc, #576]	; (1422c <vCommandConsoleTask+0x2bc>)
   13fea:	0019      	movs	r1, r3
   13fec:	2003      	movs	r0, #3
   13fee:	4b90      	ldr	r3, [pc, #576]	; (14230 <vCommandConsoleTask+0x2c0>)
   13ff0:	4798      	blx	r3
        vTaskSuspend(NULL);
   13ff2:	2000      	movs	r0, #0
   13ff4:	4b8f      	ldr	r3, [pc, #572]	; (14234 <vCommandConsoleTask+0x2c4>)
   13ff6:	4798      	blx	r3
    }

    for (;;) {
        FreeRTOS_read(&cRxedChar[0]);
   13ff8:	230c      	movs	r3, #12
   13ffa:	18fb      	adds	r3, r7, r3
   13ffc:	0018      	movs	r0, r3
   13ffe:	4b8e      	ldr	r3, [pc, #568]	; (14238 <vCommandConsoleTask+0x2c8>)
   14000:	4798      	blx	r3

        if (cRxedChar[0] == '\n' || cRxedChar[0] == '\r') {
   14002:	230c      	movs	r3, #12
   14004:	18fb      	adds	r3, r7, r3
   14006:	781b      	ldrb	r3, [r3, #0]
   14008:	2b0a      	cmp	r3, #10
   1400a:	d004      	beq.n	14016 <vCommandConsoleTask+0xa6>
   1400c:	230c      	movs	r3, #12
   1400e:	18fb      	adds	r3, r7, r3
   14010:	781b      	ldrb	r3, [r3, #0]
   14012:	2b0d      	cmp	r3, #13
   14014:	d137      	bne.n	14086 <vCommandConsoleTask+0x116>
            /* A newline character was received, so the input command string is
            complete and can be processed.  Transmit a line separator, just to
            make the output easier to read. */
            SerialConsoleWriteString((char *)"\r\n");
   14016:	4b89      	ldr	r3, [pc, #548]	; (1423c <vCommandConsoleTask+0x2cc>)
   14018:	0018      	movs	r0, r3
   1401a:	4b81      	ldr	r3, [pc, #516]	; (14220 <vCommandConsoleTask+0x2b0>)
   1401c:	4798      	blx	r3
            // Copy for last command
            isEscapeCode = false;
   1401e:	4b88      	ldr	r3, [pc, #544]	; (14240 <vCommandConsoleTask+0x2d0>)
   14020:	2200      	movs	r2, #0
   14022:	701a      	strb	r2, [r3, #0]
            pcEscapeCodePos = 0;
   14024:	4b87      	ldr	r3, [pc, #540]	; (14244 <vCommandConsoleTask+0x2d4>)
   14026:	2200      	movs	r2, #0
   14028:	701a      	strb	r2, [r3, #0]
            strncpy(pcLastCommand, pcInputString, MAX_INPUT_LENGTH_CLI - 1);
   1402a:	4987      	ldr	r1, [pc, #540]	; (14248 <vCommandConsoleTask+0x2d8>)
   1402c:	4b87      	ldr	r3, [pc, #540]	; (1424c <vCommandConsoleTask+0x2dc>)
   1402e:	2231      	movs	r2, #49	; 0x31
   14030:	0018      	movs	r0, r3
   14032:	4b87      	ldr	r3, [pc, #540]	; (14250 <vCommandConsoleTask+0x2e0>)
   14034:	4798      	blx	r3
            pcLastCommand[MAX_INPUT_LENGTH_CLI - 1] = 0;  // Ensure null termination
   14036:	4b85      	ldr	r3, [pc, #532]	; (1424c <vCommandConsoleTask+0x2dc>)
   14038:	2231      	movs	r2, #49	; 0x31
   1403a:	2100      	movs	r1, #0
   1403c:	5499      	strb	r1, [r3, r2]
            explanation of why this is. */
            do {
                /* Send the command string to the command interpreter.  Any
                output generated by the command interpreter will be placed in the
                pcOutputString buffer. */
                xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString,        /* The command string.*/
   1403e:	4985      	ldr	r1, [pc, #532]	; (14254 <vCommandConsoleTask+0x2e4>)
   14040:	4b81      	ldr	r3, [pc, #516]	; (14248 <vCommandConsoleTask+0x2d8>)
   14042:	2264      	movs	r2, #100	; 0x64
   14044:	0018      	movs	r0, r3
   14046:	4b84      	ldr	r3, [pc, #528]	; (14258 <vCommandConsoleTask+0x2e8>)
   14048:	4798      	blx	r3
   1404a:	0003      	movs	r3, r0
   1404c:	613b      	str	r3, [r7, #16]
                );

                /* Write the output generated by the command interpreter to the
                console. */
                // Ensure it is null terminated
                pcOutputString[MAX_OUTPUT_LENGTH_CLI - 1] = 0;
   1404e:	4b81      	ldr	r3, [pc, #516]	; (14254 <vCommandConsoleTask+0x2e4>)
   14050:	2263      	movs	r2, #99	; 0x63
   14052:	2100      	movs	r1, #0
   14054:	5499      	strb	r1, [r3, r2]
                SerialConsoleWriteString(pcOutputString);
   14056:	4b7f      	ldr	r3, [pc, #508]	; (14254 <vCommandConsoleTask+0x2e4>)
   14058:	0018      	movs	r0, r3
   1405a:	4b71      	ldr	r3, [pc, #452]	; (14220 <vCommandConsoleTask+0x2b0>)
   1405c:	4798      	blx	r3

            } while (xMoreDataToFollow != pdFALSE);
   1405e:	693b      	ldr	r3, [r7, #16]
   14060:	2b00      	cmp	r3, #0
   14062:	d1ec      	bne.n	1403e <vCommandConsoleTask+0xce>

            /* All the strings generated by the input command have been sent.
            Processing of the command is complete.  Clear the input string ready
            to receive the next command. */
            cInputIndex = 0;
   14064:	2317      	movs	r3, #23
   14066:	18fb      	adds	r3, r7, r3
   14068:	2200      	movs	r2, #0
   1406a:	701a      	strb	r2, [r3, #0]
            memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   1406c:	4b76      	ldr	r3, [pc, #472]	; (14248 <vCommandConsoleTask+0x2d8>)
   1406e:	2232      	movs	r2, #50	; 0x32
   14070:	2100      	movs	r1, #0
   14072:	0018      	movs	r0, r3
   14074:	4b79      	ldr	r3, [pc, #484]	; (1425c <vCommandConsoleTask+0x2ec>)
   14076:	4798      	blx	r3
            memset(pcOutputString, 0, MAX_OUTPUT_LENGTH_CLI);
   14078:	4b76      	ldr	r3, [pc, #472]	; (14254 <vCommandConsoleTask+0x2e4>)
   1407a:	2264      	movs	r2, #100	; 0x64
   1407c:	2100      	movs	r1, #0
   1407e:	0018      	movs	r0, r3
   14080:	4b76      	ldr	r3, [pc, #472]	; (1425c <vCommandConsoleTask+0x2ec>)
   14082:	4798      	blx	r3
   14084:	e0b5      	b.n	141f2 <vCommandConsoleTask+0x282>
        } else {
            /* The if() clause performs the processing after a newline character
is received.  This else clause performs the processing if any other
character is received. */

            if (true == isEscapeCode) {
   14086:	4b6e      	ldr	r3, [pc, #440]	; (14240 <vCommandConsoleTask+0x2d0>)
   14088:	781b      	ldrb	r3, [r3, #0]
   1408a:	2b00      	cmp	r3, #0
   1408c:	d059      	beq.n	14142 <vCommandConsoleTask+0x1d2>
                if (pcEscapeCodePos < CLI_PC_ESCAPE_CODE_SIZE) {
   1408e:	4b6d      	ldr	r3, [pc, #436]	; (14244 <vCommandConsoleTask+0x2d4>)
   14090:	781b      	ldrb	r3, [r3, #0]
   14092:	2b03      	cmp	r3, #3
   14094:	d80c      	bhi.n	140b0 <vCommandConsoleTask+0x140>
                    pcEscapeCodes[pcEscapeCodePos++] = cRxedChar[0];
   14096:	4b6b      	ldr	r3, [pc, #428]	; (14244 <vCommandConsoleTask+0x2d4>)
   14098:	781b      	ldrb	r3, [r3, #0]
   1409a:	1c5a      	adds	r2, r3, #1
   1409c:	b2d1      	uxtb	r1, r2
   1409e:	4a69      	ldr	r2, [pc, #420]	; (14244 <vCommandConsoleTask+0x2d4>)
   140a0:	7011      	strb	r1, [r2, #0]
   140a2:	001a      	movs	r2, r3
   140a4:	230c      	movs	r3, #12
   140a6:	18fb      	adds	r3, r7, r3
   140a8:	7819      	ldrb	r1, [r3, #0]
   140aa:	4b6d      	ldr	r3, [pc, #436]	; (14260 <vCommandConsoleTask+0x2f0>)
   140ac:	5499      	strb	r1, [r3, r2]
   140ae:	e005      	b.n	140bc <vCommandConsoleTask+0x14c>
                } else {
                    isEscapeCode = false;
   140b0:	4b63      	ldr	r3, [pc, #396]	; (14240 <vCommandConsoleTask+0x2d0>)
   140b2:	2200      	movs	r2, #0
   140b4:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   140b6:	4b63      	ldr	r3, [pc, #396]	; (14244 <vCommandConsoleTask+0x2d4>)
   140b8:	2200      	movs	r2, #0
   140ba:	701a      	strb	r2, [r3, #0]
                }

                if (pcEscapeCodePos >= CLI_PC_MIN_ESCAPE_CODE_SIZE) {
   140bc:	4b61      	ldr	r3, [pc, #388]	; (14244 <vCommandConsoleTask+0x2d4>)
   140be:	781b      	ldrb	r3, [r3, #0]
   140c0:	2b01      	cmp	r3, #1
   140c2:	d999      	bls.n	13ff8 <vCommandConsoleTask+0x88>
                    // UP ARROW SHOW LAST COMMAND
                    if (strcasecmp(pcEscapeCodes, "oa")) {
   140c4:	4a67      	ldr	r2, [pc, #412]	; (14264 <vCommandConsoleTask+0x2f4>)
   140c6:	4b66      	ldr	r3, [pc, #408]	; (14260 <vCommandConsoleTask+0x2f0>)
   140c8:	0011      	movs	r1, r2
   140ca:	0018      	movs	r0, r3
   140cc:	4b66      	ldr	r3, [pc, #408]	; (14268 <vCommandConsoleTask+0x2f8>)
   140ce:	4798      	blx	r3
   140d0:	1e03      	subs	r3, r0, #0
   140d2:	d02f      	beq.n	14134 <vCommandConsoleTask+0x1c4>
                        /// Delete current line and add prompt (">")
                        sprintf(pcInputString, "%c[2K\r>", 27);
   140d4:	4965      	ldr	r1, [pc, #404]	; (1426c <vCommandConsoleTask+0x2fc>)
   140d6:	4b5c      	ldr	r3, [pc, #368]	; (14248 <vCommandConsoleTask+0x2d8>)
   140d8:	221b      	movs	r2, #27
   140da:	0018      	movs	r0, r3
   140dc:	4b64      	ldr	r3, [pc, #400]	; (14270 <vCommandConsoleTask+0x300>)
   140de:	4798      	blx	r3
                        SerialConsoleWriteString((char *)pcInputString);
   140e0:	4b59      	ldr	r3, [pc, #356]	; (14248 <vCommandConsoleTask+0x2d8>)
   140e2:	0018      	movs	r0, r3
   140e4:	4b4e      	ldr	r3, [pc, #312]	; (14220 <vCommandConsoleTask+0x2b0>)
   140e6:	4798      	blx	r3
                        /// Clear input buffer
                        cInputIndex = 0;
   140e8:	2317      	movs	r3, #23
   140ea:	18fb      	adds	r3, r7, r3
   140ec:	2200      	movs	r2, #0
   140ee:	701a      	strb	r2, [r3, #0]
                        memset(pcInputString, 0x00, MAX_INPUT_LENGTH_CLI);
   140f0:	4b55      	ldr	r3, [pc, #340]	; (14248 <vCommandConsoleTask+0x2d8>)
   140f2:	2232      	movs	r2, #50	; 0x32
   140f4:	2100      	movs	r1, #0
   140f6:	0018      	movs	r0, r3
   140f8:	4b58      	ldr	r3, [pc, #352]	; (1425c <vCommandConsoleTask+0x2ec>)
   140fa:	4798      	blx	r3
                        /// Send last command
                        strncpy(pcInputString, pcLastCommand, MAX_INPUT_LENGTH_CLI - 1);
   140fc:	4953      	ldr	r1, [pc, #332]	; (1424c <vCommandConsoleTask+0x2dc>)
   140fe:	4b52      	ldr	r3, [pc, #328]	; (14248 <vCommandConsoleTask+0x2d8>)
   14100:	2231      	movs	r2, #49	; 0x31
   14102:	0018      	movs	r0, r3
   14104:	4b52      	ldr	r3, [pc, #328]	; (14250 <vCommandConsoleTask+0x2e0>)
   14106:	4798      	blx	r3
                        cInputIndex = (strlen(pcInputString) < MAX_INPUT_LENGTH_CLI - 1) ? strlen(pcLastCommand) : MAX_INPUT_LENGTH_CLI - 1;
   14108:	4b4f      	ldr	r3, [pc, #316]	; (14248 <vCommandConsoleTask+0x2d8>)
   1410a:	0018      	movs	r0, r3
   1410c:	4b59      	ldr	r3, [pc, #356]	; (14274 <vCommandConsoleTask+0x304>)
   1410e:	4798      	blx	r3
   14110:	0003      	movs	r3, r0
   14112:	2b30      	cmp	r3, #48	; 0x30
   14114:	d806      	bhi.n	14124 <vCommandConsoleTask+0x1b4>
   14116:	4b4d      	ldr	r3, [pc, #308]	; (1424c <vCommandConsoleTask+0x2dc>)
   14118:	0018      	movs	r0, r3
   1411a:	4b56      	ldr	r3, [pc, #344]	; (14274 <vCommandConsoleTask+0x304>)
   1411c:	4798      	blx	r3
   1411e:	0003      	movs	r3, r0
   14120:	b2da      	uxtb	r2, r3
   14122:	e000      	b.n	14126 <vCommandConsoleTask+0x1b6>
   14124:	2231      	movs	r2, #49	; 0x31
   14126:	2317      	movs	r3, #23
   14128:	18fb      	adds	r3, r7, r3
   1412a:	701a      	strb	r2, [r3, #0]
                        SerialConsoleWriteString(pcInputString);
   1412c:	4b46      	ldr	r3, [pc, #280]	; (14248 <vCommandConsoleTask+0x2d8>)
   1412e:	0018      	movs	r0, r3
   14130:	4b3b      	ldr	r3, [pc, #236]	; (14220 <vCommandConsoleTask+0x2b0>)
   14132:	4798      	blx	r3
                    }

                    isEscapeCode = false;
   14134:	4b42      	ldr	r3, [pc, #264]	; (14240 <vCommandConsoleTask+0x2d0>)
   14136:	2200      	movs	r2, #0
   14138:	701a      	strb	r2, [r3, #0]
                    pcEscapeCodePos = 0;
   1413a:	4b42      	ldr	r3, [pc, #264]	; (14244 <vCommandConsoleTask+0x2d4>)
   1413c:	2200      	movs	r2, #0
   1413e:	701a      	strb	r2, [r3, #0]
   14140:	e75a      	b.n	13ff8 <vCommandConsoleTask+0x88>
            }
            /* The if() clause performs the processing after a newline character
            is received.  This else clause performs the processing if any other
            character is received. */

            else if (cRxedChar[0] == '\r') {
   14142:	230c      	movs	r3, #12
   14144:	18fb      	adds	r3, r7, r3
   14146:	781b      	ldrb	r3, [r3, #0]
   14148:	2b0d      	cmp	r3, #13
   1414a:	d100      	bne.n	1414e <vCommandConsoleTask+0x1de>
   1414c:	e754      	b.n	13ff8 <vCommandConsoleTask+0x88>
                /* Ignore carriage returns. */
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   1414e:	230c      	movs	r3, #12
   14150:	18fb      	adds	r3, r7, r3
   14152:	781b      	ldrb	r3, [r3, #0]
   14154:	2b08      	cmp	r3, #8
   14156:	d004      	beq.n	14162 <vCommandConsoleTask+0x1f2>
   14158:	230c      	movs	r3, #12
   1415a:	18fb      	adds	r3, r7, r3
   1415c:	781b      	ldrb	r3, [r3, #0]
   1415e:	2b7f      	cmp	r3, #127	; 0x7f
   14160:	d11c      	bne.n	1419c <vCommandConsoleTask+0x22c>
                char erase[4] = {0x08, 0x20, 0x08, 0x00};
   14162:	2308      	movs	r3, #8
   14164:	18fb      	adds	r3, r7, r3
   14166:	4a44      	ldr	r2, [pc, #272]	; (14278 <vCommandConsoleTask+0x308>)
   14168:	6812      	ldr	r2, [r2, #0]
   1416a:	601a      	str	r2, [r3, #0]
                SerialConsoleWriteString(erase);
   1416c:	2308      	movs	r3, #8
   1416e:	18fb      	adds	r3, r7, r3
   14170:	0018      	movs	r0, r3
   14172:	4b2b      	ldr	r3, [pc, #172]	; (14220 <vCommandConsoleTask+0x2b0>)
   14174:	4798      	blx	r3
                /* Backspace was pressed.  Erase the last character in the input
                buffer - if there are any. */
                if (cInputIndex > 0) {
   14176:	2317      	movs	r3, #23
   14178:	18fb      	adds	r3, r7, r3
   1417a:	781b      	ldrb	r3, [r3, #0]
   1417c:	2b00      	cmp	r3, #0
   1417e:	d037      	beq.n	141f0 <vCommandConsoleTask+0x280>
                    cInputIndex--;
   14180:	2317      	movs	r3, #23
   14182:	18fb      	adds	r3, r7, r3
   14184:	781a      	ldrb	r2, [r3, #0]
   14186:	2317      	movs	r3, #23
   14188:	18fb      	adds	r3, r7, r3
   1418a:	3a01      	subs	r2, #1
   1418c:	701a      	strb	r2, [r3, #0]
                    pcInputString[cInputIndex] = 0;
   1418e:	2317      	movs	r3, #23
   14190:	18fb      	adds	r3, r7, r3
   14192:	781b      	ldrb	r3, [r3, #0]
   14194:	4a2c      	ldr	r2, [pc, #176]	; (14248 <vCommandConsoleTask+0x2d8>)
   14196:	2100      	movs	r1, #0
   14198:	54d1      	strb	r1, [r2, r3]
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   1419a:	e029      	b.n	141f0 <vCommandConsoleTask+0x280>
                }
            }
            // ESC
            else if (cRxedChar[0] == ASCII_ESC) {
   1419c:	230c      	movs	r3, #12
   1419e:	18fb      	adds	r3, r7, r3
   141a0:	781b      	ldrb	r3, [r3, #0]
   141a2:	2b1b      	cmp	r3, #27
   141a4:	d106      	bne.n	141b4 <vCommandConsoleTask+0x244>
                isEscapeCode = true;  // Next characters will be code arguments
   141a6:	4b26      	ldr	r3, [pc, #152]	; (14240 <vCommandConsoleTask+0x2d0>)
   141a8:	2201      	movs	r2, #1
   141aa:	701a      	strb	r2, [r3, #0]
                pcEscapeCodePos = 0;
   141ac:	4b25      	ldr	r3, [pc, #148]	; (14244 <vCommandConsoleTask+0x2d4>)
   141ae:	2200      	movs	r2, #0
   141b0:	701a      	strb	r2, [r3, #0]
   141b2:	e721      	b.n	13ff8 <vCommandConsoleTask+0x88>
            } else {
                /* A character was entered.  It was not a new line, backspace
                or carriage return, so it is accepted as part of the input and
                placed into the input buffer.  When a n is entered the complete
                string will be passed to the command interpreter. */
                if (cInputIndex < MAX_INPUT_LENGTH_CLI) {
   141b4:	2317      	movs	r3, #23
   141b6:	18fb      	adds	r3, r7, r3
   141b8:	781b      	ldrb	r3, [r3, #0]
   141ba:	2b31      	cmp	r3, #49	; 0x31
   141bc:	d80e      	bhi.n	141dc <vCommandConsoleTask+0x26c>
                    pcInputString[cInputIndex] = cRxedChar[0];
   141be:	2317      	movs	r3, #23
   141c0:	18fb      	adds	r3, r7, r3
   141c2:	781b      	ldrb	r3, [r3, #0]
   141c4:	220c      	movs	r2, #12
   141c6:	18ba      	adds	r2, r7, r2
   141c8:	7811      	ldrb	r1, [r2, #0]
   141ca:	4a1f      	ldr	r2, [pc, #124]	; (14248 <vCommandConsoleTask+0x2d8>)
   141cc:	54d1      	strb	r1, [r2, r3]
                    cInputIndex++;
   141ce:	2317      	movs	r3, #23
   141d0:	18fb      	adds	r3, r7, r3
   141d2:	781a      	ldrb	r2, [r3, #0]
   141d4:	2317      	movs	r3, #23
   141d6:	18fb      	adds	r3, r7, r3
   141d8:	3201      	adds	r2, #1
   141da:	701a      	strb	r2, [r3, #0]
                }

                // Order Echo
                cRxedChar[1] = 0;
   141dc:	230c      	movs	r3, #12
   141de:	18fb      	adds	r3, r7, r3
   141e0:	2200      	movs	r2, #0
   141e2:	705a      	strb	r2, [r3, #1]
                SerialConsoleWriteString(&cRxedChar[0]);
   141e4:	230c      	movs	r3, #12
   141e6:	18fb      	adds	r3, r7, r3
   141e8:	0018      	movs	r0, r3
   141ea:	4b0d      	ldr	r3, [pc, #52]	; (14220 <vCommandConsoleTask+0x2b0>)
   141ec:	4798      	blx	r3
   141ee:	e703      	b.n	13ff8 <vCommandConsoleTask+0x88>
            } else if (cRxedChar[0] == ASCII_BACKSPACE || cRxedChar[0] == ASCII_DELETE) {
   141f0:	46c0      	nop			; (mov r8, r8)
        FreeRTOS_read(&cRxedChar[0]);
   141f2:	e701      	b.n	13ff8 <vCommandConsoleTask+0x88>
   141f4:	00037244 	.word	0x00037244
   141f8:	00018cc1 	.word	0x00018cc1
   141fc:	00037234 	.word	0x00037234
   14200:	000372b4 	.word	0x000372b4
   14204:	00037254 	.word	0x00037254
   14208:	00037264 	.word	0x00037264
   1420c:	00037274 	.word	0x00037274
   14210:	00037284 	.word	0x00037284
   14214:	00037294 	.word	0x00037294
   14218:	000372a4 	.word	0x000372a4
   1421c:	00036ea0 	.word	0x00036ea0
   14220:	0001ebe5 	.word	0x0001ebe5
   14224:	0001b285 	.word	0x0001b285
   14228:	200047e0 	.word	0x200047e0
   1422c:	000370bc 	.word	0x000370bc
   14230:	0001ecd1 	.word	0x0001ecd1
   14234:	0001d071 	.word	0x0001d071
   14238:	0001427d 	.word	0x0001427d
   1423c:	000370dc 	.word	0x000370dc
   14240:	20000514 	.word	0x20000514
   14244:	20000515 	.word	0x20000515
   14248:	2000054c 	.word	0x2000054c
   1424c:	20000518 	.word	0x20000518
   14250:	00035c17 	.word	0x00035c17
   14254:	20000580 	.word	0x20000580
   14258:	00018d31 	.word	0x00018d31
   1425c:	0003582f 	.word	0x0003582f
   14260:	200005e4 	.word	0x200005e4
   14264:	000370e0 	.word	0x000370e0
   14268:	00035b31 	.word	0x00035b31
   1426c:	000370e4 	.word	0x000370e4
   14270:	00035aed 	.word	0x00035aed
   14274:	00035be7 	.word	0x00035be7
   14278:	000370ec 	.word	0x000370ec

0001427c <FreeRTOS_read>:
 * @brief		This function block the thread unless we received a character
 * @details		This function blocks until UartSemaphoreHandle is released to continue reading characters in CLI
 * @note
 */
static void FreeRTOS_read(char *character)
{
   1427c:	b580      	push	{r7, lr}
   1427e:	b084      	sub	sp, #16
   14280:	af00      	add	r7, sp, #0
   14282:	6078      	str	r0, [r7, #4]
    // We check if there are more characters in the buffer that arrived since the last time
    // This function returns -1 if the buffer is empty, other value otherwise
    int ret = SerialConsoleReadCharacter((uint8_t *)character);
   14284:	687b      	ldr	r3, [r7, #4]
   14286:	0018      	movs	r0, r3
   14288:	4b0c      	ldr	r3, [pc, #48]	; (142bc <FreeRTOS_read+0x40>)
   1428a:	4798      	blx	r3
   1428c:	0003      	movs	r3, r0
   1428e:	60fb      	str	r3, [r7, #12]

    while (ret == -1) {
   14290:	e00d      	b.n	142ae <FreeRTOS_read+0x32>
        // there are no more characters - block the thread until we receive a semaphore indicating reception of at least 1 character
        xSemaphoreTake(cliCharReadySemaphore, portMAX_DELAY);
   14292:	4b0b      	ldr	r3, [pc, #44]	; (142c0 <FreeRTOS_read+0x44>)
   14294:	681a      	ldr	r2, [r3, #0]
   14296:	2301      	movs	r3, #1
   14298:	425b      	negs	r3, r3
   1429a:	0019      	movs	r1, r3
   1429c:	0010      	movs	r0, r2
   1429e:	4b09      	ldr	r3, [pc, #36]	; (142c4 <FreeRTOS_read+0x48>)
   142a0:	4798      	blx	r3

        // If we are here it means there are characters in the buffer - we re-read from the buffer to get the newly acquired character
        ret = SerialConsoleReadCharacter((uint8_t *)character);
   142a2:	687b      	ldr	r3, [r7, #4]
   142a4:	0018      	movs	r0, r3
   142a6:	4b05      	ldr	r3, [pc, #20]	; (142bc <FreeRTOS_read+0x40>)
   142a8:	4798      	blx	r3
   142aa:	0003      	movs	r3, r0
   142ac:	60fb      	str	r3, [r7, #12]
    while (ret == -1) {
   142ae:	68fb      	ldr	r3, [r7, #12]
   142b0:	3301      	adds	r3, #1
   142b2:	d0ee      	beq.n	14292 <FreeRTOS_read+0x16>
    }
}
   142b4:	46c0      	nop			; (mov r8, r8)
   142b6:	46bd      	mov	sp, r7
   142b8:	b004      	add	sp, #16
   142ba:	bd80      	pop	{r7, pc}
   142bc:	0001ec81 	.word	0x0001ec81
   142c0:	200047e0 	.word	0x200047e0
   142c4:	0001c23d 	.word	0x0001c23d

000142c8 <CliCharReadySemaphoreGiveFromISR>:
 * @brief		Give cliCharReadySemaphore binary semaphore from an ISR
 * @details
 * @note
 */
void CliCharReadySemaphoreGiveFromISR(void)
{
   142c8:	b580      	push	{r7, lr}
   142ca:	af00      	add	r7, sp, #0
    static BaseType_t xHigherPriorityTaskWoken;
    xHigherPriorityTaskWoken = pdFALSE;
   142cc:	4b0a      	ldr	r3, [pc, #40]	; (142f8 <CliCharReadySemaphoreGiveFromISR+0x30>)
   142ce:	2200      	movs	r2, #0
   142d0:	601a      	str	r2, [r3, #0]
    xSemaphoreGiveFromISR(cliCharReadySemaphore, &xHigherPriorityTaskWoken);
   142d2:	4b0a      	ldr	r3, [pc, #40]	; (142fc <CliCharReadySemaphoreGiveFromISR+0x34>)
   142d4:	681b      	ldr	r3, [r3, #0]
   142d6:	4a08      	ldr	r2, [pc, #32]	; (142f8 <CliCharReadySemaphoreGiveFromISR+0x30>)
   142d8:	0011      	movs	r1, r2
   142da:	0018      	movs	r0, r3
   142dc:	4b08      	ldr	r3, [pc, #32]	; (14300 <CliCharReadySemaphoreGiveFromISR+0x38>)
   142de:	4798      	blx	r3
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   142e0:	4b05      	ldr	r3, [pc, #20]	; (142f8 <CliCharReadySemaphoreGiveFromISR+0x30>)
   142e2:	681b      	ldr	r3, [r3, #0]
   142e4:	2b00      	cmp	r3, #0
   142e6:	d003      	beq.n	142f0 <CliCharReadySemaphoreGiveFromISR+0x28>
   142e8:	4b06      	ldr	r3, [pc, #24]	; (14304 <CliCharReadySemaphoreGiveFromISR+0x3c>)
   142ea:	2280      	movs	r2, #128	; 0x80
   142ec:	0552      	lsls	r2, r2, #21
   142ee:	601a      	str	r2, [r3, #0]
}
   142f0:	46c0      	nop			; (mov r8, r8)
   142f2:	46bd      	mov	sp, r7
   142f4:	bd80      	pop	{r7, pc}
   142f6:	46c0      	nop			; (mov r8, r8)
   142f8:	200005e8 	.word	0x200005e8
   142fc:	200047e0 	.word	0x200047e0
   14300:	0001bbb5 	.word	0x0001bbb5
   14304:	e000ed04 	.word	0xe000ed04

00014308 <CLI_GetImuData>:
 * CLI Functions - Define here
 ******************************************************************************/

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_GetImuData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   14308:	b5b0      	push	{r4, r5, r7, lr}
   1430a:	b08a      	sub	sp, #40	; 0x28
   1430c:	af02      	add	r7, sp, #8
   1430e:	60f8      	str	r0, [r7, #12]
   14310:	60b9      	str	r1, [r7, #8]
   14312:	607a      	str	r2, [r7, #4]
    static int16_t data_raw_acceleration[3];
    static float acceleration_mg[3];
    uint8_t reg;
    stmdev_ctx_t *dev_ctx = GetImuStruct();
   14314:	4b49      	ldr	r3, [pc, #292]	; (1443c <CLI_GetImuData+0x134>)
   14316:	4798      	blx	r3
   14318:	0003      	movs	r3, r0
   1431a:	61fb      	str	r3, [r7, #28]
	struct ImuDataPacket imuPacket;

    /* Read output only if new xl value is available */
    lsm6dso_xl_flag_data_ready_get(dev_ctx, &reg);
   1431c:	231b      	movs	r3, #27
   1431e:	18fa      	adds	r2, r7, r3
   14320:	69fb      	ldr	r3, [r7, #28]
   14322:	0011      	movs	r1, r2
   14324:	0018      	movs	r0, r3
   14326:	4b46      	ldr	r3, [pc, #280]	; (14440 <CLI_GetImuData+0x138>)
   14328:	4798      	blx	r3

    if (reg) {
   1432a:	231b      	movs	r3, #27
   1432c:	18fb      	adds	r3, r7, r3
   1432e:	781b      	ldrb	r3, [r3, #0]
   14330:	2b00      	cmp	r3, #0
   14332:	d064      	beq.n	143fe <CLI_GetImuData+0xf6>
        memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
   14334:	4b43      	ldr	r3, [pc, #268]	; (14444 <CLI_GetImuData+0x13c>)
   14336:	2206      	movs	r2, #6
   14338:	2100      	movs	r1, #0
   1433a:	0018      	movs	r0, r3
   1433c:	4b42      	ldr	r3, [pc, #264]	; (14448 <CLI_GetImuData+0x140>)
   1433e:	4798      	blx	r3
        lsm6dso_acceleration_raw_get(dev_ctx, data_raw_acceleration);
   14340:	4a40      	ldr	r2, [pc, #256]	; (14444 <CLI_GetImuData+0x13c>)
   14342:	69fb      	ldr	r3, [r7, #28]
   14344:	0011      	movs	r1, r2
   14346:	0018      	movs	r0, r3
   14348:	4b40      	ldr	r3, [pc, #256]	; (1444c <CLI_GetImuData+0x144>)
   1434a:	4798      	blx	r3
        acceleration_mg[0] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[0]);
   1434c:	4b3d      	ldr	r3, [pc, #244]	; (14444 <CLI_GetImuData+0x13c>)
   1434e:	2200      	movs	r2, #0
   14350:	5e9b      	ldrsh	r3, [r3, r2]
   14352:	0018      	movs	r0, r3
   14354:	4b3e      	ldr	r3, [pc, #248]	; (14450 <CLI_GetImuData+0x148>)
   14356:	4798      	blx	r3
   14358:	1c02      	adds	r2, r0, #0
   1435a:	4b3e      	ldr	r3, [pc, #248]	; (14454 <CLI_GetImuData+0x14c>)
   1435c:	601a      	str	r2, [r3, #0]
        acceleration_mg[1] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[1]);
   1435e:	4b39      	ldr	r3, [pc, #228]	; (14444 <CLI_GetImuData+0x13c>)
   14360:	2202      	movs	r2, #2
   14362:	5e9b      	ldrsh	r3, [r3, r2]
   14364:	0018      	movs	r0, r3
   14366:	4b3a      	ldr	r3, [pc, #232]	; (14450 <CLI_GetImuData+0x148>)
   14368:	4798      	blx	r3
   1436a:	1c02      	adds	r2, r0, #0
   1436c:	4b39      	ldr	r3, [pc, #228]	; (14454 <CLI_GetImuData+0x14c>)
   1436e:	605a      	str	r2, [r3, #4]
        acceleration_mg[2] = lsm6dso_from_fs2_to_mg(data_raw_acceleration[2]);
   14370:	4b34      	ldr	r3, [pc, #208]	; (14444 <CLI_GetImuData+0x13c>)
   14372:	2204      	movs	r2, #4
   14374:	5e9b      	ldrsh	r3, [r3, r2]
   14376:	0018      	movs	r0, r3
   14378:	4b35      	ldr	r3, [pc, #212]	; (14450 <CLI_GetImuData+0x148>)
   1437a:	4798      	blx	r3
   1437c:	1c02      	adds	r2, r0, #0
   1437e:	4b35      	ldr	r3, [pc, #212]	; (14454 <CLI_GetImuData+0x14c>)
   14380:	609a      	str	r2, [r3, #8]

        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "Acceleration [mg]:X %d\tY %d\tZ %d\r\n", (int)acceleration_mg[0], (int)acceleration_mg[1], (int)acceleration_mg[2]);
   14382:	4b34      	ldr	r3, [pc, #208]	; (14454 <CLI_GetImuData+0x14c>)
   14384:	681a      	ldr	r2, [r3, #0]
   14386:	4b34      	ldr	r3, [pc, #208]	; (14458 <CLI_GetImuData+0x150>)
   14388:	1c10      	adds	r0, r2, #0
   1438a:	4798      	blx	r3
   1438c:	0005      	movs	r5, r0
   1438e:	4b31      	ldr	r3, [pc, #196]	; (14454 <CLI_GetImuData+0x14c>)
   14390:	685a      	ldr	r2, [r3, #4]
   14392:	4b31      	ldr	r3, [pc, #196]	; (14458 <CLI_GetImuData+0x150>)
   14394:	1c10      	adds	r0, r2, #0
   14396:	4798      	blx	r3
   14398:	0004      	movs	r4, r0
   1439a:	4b2e      	ldr	r3, [pc, #184]	; (14454 <CLI_GetImuData+0x14c>)
   1439c:	689a      	ldr	r2, [r3, #8]
   1439e:	4b2e      	ldr	r3, [pc, #184]	; (14458 <CLI_GetImuData+0x150>)
   143a0:	1c10      	adds	r0, r2, #0
   143a2:	4798      	blx	r3
   143a4:	0003      	movs	r3, r0
   143a6:	4a2d      	ldr	r2, [pc, #180]	; (1445c <CLI_GetImuData+0x154>)
   143a8:	68b9      	ldr	r1, [r7, #8]
   143aa:	68f8      	ldr	r0, [r7, #12]
   143ac:	9301      	str	r3, [sp, #4]
   143ae:	9400      	str	r4, [sp, #0]
   143b0:	002b      	movs	r3, r5
   143b2:	4c2b      	ldr	r4, [pc, #172]	; (14460 <CLI_GetImuData+0x158>)
   143b4:	47a0      	blx	r4
		imuPacket.xmg = (int)acceleration_mg[0];
   143b6:	4b27      	ldr	r3, [pc, #156]	; (14454 <CLI_GetImuData+0x14c>)
   143b8:	681a      	ldr	r2, [r3, #0]
   143ba:	4b27      	ldr	r3, [pc, #156]	; (14458 <CLI_GetImuData+0x150>)
   143bc:	1c10      	adds	r0, r2, #0
   143be:	4798      	blx	r3
   143c0:	0003      	movs	r3, r0
   143c2:	b21a      	sxth	r2, r3
   143c4:	2314      	movs	r3, #20
   143c6:	18fb      	adds	r3, r7, r3
   143c8:	801a      	strh	r2, [r3, #0]
		imuPacket.ymg = (int)acceleration_mg[1];
   143ca:	4b22      	ldr	r3, [pc, #136]	; (14454 <CLI_GetImuData+0x14c>)
   143cc:	685a      	ldr	r2, [r3, #4]
   143ce:	4b22      	ldr	r3, [pc, #136]	; (14458 <CLI_GetImuData+0x150>)
   143d0:	1c10      	adds	r0, r2, #0
   143d2:	4798      	blx	r3
   143d4:	0003      	movs	r3, r0
   143d6:	b21a      	sxth	r2, r3
   143d8:	2314      	movs	r3, #20
   143da:	18fb      	adds	r3, r7, r3
   143dc:	805a      	strh	r2, [r3, #2]
		imuPacket.zmg = (int)acceleration_mg[2];
   143de:	4b1d      	ldr	r3, [pc, #116]	; (14454 <CLI_GetImuData+0x14c>)
   143e0:	689a      	ldr	r2, [r3, #8]
   143e2:	4b1d      	ldr	r3, [pc, #116]	; (14458 <CLI_GetImuData+0x150>)
   143e4:	1c10      	adds	r0, r2, #0
   143e6:	4798      	blx	r3
   143e8:	0003      	movs	r3, r0
   143ea:	b21a      	sxth	r2, r3
   143ec:	2314      	movs	r3, #20
   143ee:	18fb      	adds	r3, r7, r3
   143f0:	809a      	strh	r2, [r3, #4]
		WifiAddImuDataToQueue(&imuPacket);
   143f2:	2314      	movs	r3, #20
   143f4:	18fb      	adds	r3, r7, r3
   143f6:	0018      	movs	r0, r3
   143f8:	4b1a      	ldr	r3, [pc, #104]	; (14464 <CLI_GetImuData+0x15c>)
   143fa:	4798      	blx	r3
   143fc:	e019      	b.n	14432 <CLI_GetImuData+0x12a>
    } else {
        snprintf((char *)pcWriteBuffer, xWriteBufferLen, "No data ready! Sending dummy data \r\n");
   143fe:	4a1a      	ldr	r2, [pc, #104]	; (14468 <CLI_GetImuData+0x160>)
   14400:	68b9      	ldr	r1, [r7, #8]
   14402:	68fb      	ldr	r3, [r7, #12]
   14404:	0018      	movs	r0, r3
   14406:	4b16      	ldr	r3, [pc, #88]	; (14460 <CLI_GetImuData+0x158>)
   14408:	4798      	blx	r3
		imuPacket.xmg = -1;
   1440a:	2314      	movs	r3, #20
   1440c:	18fb      	adds	r3, r7, r3
   1440e:	2201      	movs	r2, #1
   14410:	4252      	negs	r2, r2
   14412:	801a      	strh	r2, [r3, #0]
		imuPacket.ymg = -2;
   14414:	2314      	movs	r3, #20
   14416:	18fb      	adds	r3, r7, r3
   14418:	2202      	movs	r2, #2
   1441a:	4252      	negs	r2, r2
   1441c:	805a      	strh	r2, [r3, #2]
		imuPacket.zmg = -3;
   1441e:	2314      	movs	r3, #20
   14420:	18fb      	adds	r3, r7, r3
   14422:	2203      	movs	r2, #3
   14424:	4252      	negs	r2, r2
   14426:	809a      	strh	r2, [r3, #4]
		WifiAddImuDataToQueue(&imuPacket);
   14428:	2314      	movs	r3, #20
   1442a:	18fb      	adds	r3, r7, r3
   1442c:	0018      	movs	r0, r3
   1442e:	4b0d      	ldr	r3, [pc, #52]	; (14464 <CLI_GetImuData+0x15c>)
   14430:	4798      	blx	r3
    }
    return pdFALSE;
   14432:	2300      	movs	r3, #0
}
   14434:	0018      	movs	r0, r3
   14436:	46bd      	mov	sp, r7
   14438:	b008      	add	sp, #32
   1443a:	bdb0      	pop	{r4, r5, r7, pc}
   1443c:	00016101 	.word	0x00016101
   14440:	00015aed 	.word	0x00015aed
   14444:	200005ec 	.word	0x200005ec
   14448:	0003582f 	.word	0x0003582f
   1444c:	00015b29 	.word	0x00015b29
   14450:	0001537d 	.word	0x0001537d
   14454:	200005f4 	.word	0x200005f4
   14458:	00033dd5 	.word	0x00033dd5
   1445c:	000370f0 	.word	0x000370f0
   14460:	00035a89 	.word	0x00035a89
   14464:	000182d9 	.word	0x000182d9
   14468:	00037114 	.word	0x00037114

0001446c <xCliClearTerminalScreen>:
// THIS COMMAND USES vt100 TERMINAL COMMANDS TO CLEAR THE SCREEN ON A TERMINAL PROGRAM LIKE TERA TERM
// SEE http://www.csie.ntu.edu.tw/~r92094/c++/VT100.html for more info
// CLI SPECIFIC COMMANDS
static char bufCli[CLI_MSG_LEN];
BaseType_t xCliClearTerminalScreen(char *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   1446c:	b590      	push	{r4, r7, lr}
   1446e:	b087      	sub	sp, #28
   14470:	af00      	add	r7, sp, #0
   14472:	60f8      	str	r0, [r7, #12]
   14474:	60b9      	str	r1, [r7, #8]
   14476:	607a      	str	r2, [r7, #4]
    char clearScreen = ASCII_ESC;
   14478:	2317      	movs	r3, #23
   1447a:	18fb      	adds	r3, r7, r3
   1447c:	221b      	movs	r2, #27
   1447e:	701a      	strb	r2, [r3, #0]
    snprintf(bufCli, CLI_MSG_LEN - 1, "%c[2J", clearScreen);
   14480:	2317      	movs	r3, #23
   14482:	18fb      	adds	r3, r7, r3
   14484:	781b      	ldrb	r3, [r3, #0]
   14486:	4a08      	ldr	r2, [pc, #32]	; (144a8 <xCliClearTerminalScreen+0x3c>)
   14488:	4808      	ldr	r0, [pc, #32]	; (144ac <xCliClearTerminalScreen+0x40>)
   1448a:	210f      	movs	r1, #15
   1448c:	4c08      	ldr	r4, [pc, #32]	; (144b0 <xCliClearTerminalScreen+0x44>)
   1448e:	47a0      	blx	r4
    snprintf(pcWriteBuffer, xWriteBufferLen, bufCli);
   14490:	4a06      	ldr	r2, [pc, #24]	; (144ac <xCliClearTerminalScreen+0x40>)
   14492:	68b9      	ldr	r1, [r7, #8]
   14494:	68fb      	ldr	r3, [r7, #12]
   14496:	0018      	movs	r0, r3
   14498:	4b05      	ldr	r3, [pc, #20]	; (144b0 <xCliClearTerminalScreen+0x44>)
   1449a:	4798      	blx	r3
    return pdFALSE;
   1449c:	2300      	movs	r3, #0
}
   1449e:	0018      	movs	r0, r3
   144a0:	46bd      	mov	sp, r7
   144a2:	b007      	add	sp, #28
   144a4:	bd90      	pop	{r4, r7, pc}
   144a6:	46c0      	nop			; (mov r8, r8)
   144a8:	0003713c 	.word	0x0003713c
   144ac:	20000504 	.word	0x20000504
   144b0:	00035a89 	.word	0x00035a89

000144b4 <CLI_OTAU>:

// Example CLI Command. Reads from the IMU and returns data.
BaseType_t CLI_OTAU(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   144b4:	b580      	push	{r7, lr}
   144b6:	b084      	sub	sp, #16
   144b8:	af00      	add	r7, sp, #0
   144ba:	60f8      	str	r0, [r7, #12]
   144bc:	60b9      	str	r1, [r7, #8]
   144be:	607a      	str	r2, [r7, #4]
    WifiHandlerSetState(WIFI_DOWNLOAD_INIT);
   144c0:	2002      	movs	r0, #2
   144c2:	4b03      	ldr	r3, [pc, #12]	; (144d0 <CLI_OTAU+0x1c>)
   144c4:	4798      	blx	r3

    return pdFALSE;
   144c6:	2300      	movs	r3, #0
}
   144c8:	0018      	movs	r0, r3
   144ca:	46bd      	mov	sp, r7
   144cc:	b004      	add	sp, #16
   144ce:	bd80      	pop	{r7, pc}
   144d0:	000182a5 	.word	0x000182a5

000144d4 <CLI_ResetDevice>:

// Example CLI Command. Resets system.
BaseType_t CLI_ResetDevice(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   144d4:	b580      	push	{r7, lr}
   144d6:	b084      	sub	sp, #16
   144d8:	af00      	add	r7, sp, #0
   144da:	60f8      	str	r0, [r7, #12]
   144dc:	60b9      	str	r1, [r7, #8]
   144de:	607a      	str	r2, [r7, #4]
    system_reset();
   144e0:	4b03      	ldr	r3, [pc, #12]	; (144f0 <CLI_ResetDevice+0x1c>)
   144e2:	4798      	blx	r3
    return pdFALSE;
   144e4:	2300      	movs	r3, #0
}
   144e6:	0018      	movs	r0, r3
   144e8:	46bd      	mov	sp, r7
   144ea:	b004      	add	sp, #16
   144ec:	bd80      	pop	{r7, pc}
   144ee:	46c0      	nop			; (mov r8, r8)
   144f0:	00013f5d 	.word	0x00013f5d

000144f4 <CLI_NeotrellisSetLed>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_NeotrellisSetLed(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   144f4:	b580      	push	{r7, lr}
   144f6:	b084      	sub	sp, #16
   144f8:	af00      	add	r7, sp, #0
   144fa:	60f8      	str	r0, [r7, #12]
   144fc:	60b9      	str	r1, [r7, #8]
   144fe:	607a      	str	r2, [r7, #4]
    snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Students to fill out!");
   14500:	4a05      	ldr	r2, [pc, #20]	; (14518 <CLI_NeotrellisSetLed+0x24>)
   14502:	68b9      	ldr	r1, [r7, #8]
   14504:	68fb      	ldr	r3, [r7, #12]
   14506:	0018      	movs	r0, r3
   14508:	4b04      	ldr	r3, [pc, #16]	; (1451c <CLI_NeotrellisSetLed+0x28>)
   1450a:	4798      	blx	r3
    // Check code SeesawSetLed and SeesawSetLed
    // How do you get parameters? Checl link in comments!
    // Check that the input is sanitized: Key between 0-15, RGB between 0-255. Print if there is an error!
    // return pdFalse to tell the FreeRTOS CLI your call is done and does not need to call again.
    // This function expects 4 arguments inside pcCommandString: key, R, G, B.
    return pdFALSE;
   1450c:	2300      	movs	r3, #0
}
   1450e:	0018      	movs	r0, r3
   14510:	46bd      	mov	sp, r7
   14512:	b004      	add	sp, #16
   14514:	bd80      	pop	{r7, pc}
   14516:	46c0      	nop			; (mov r8, r8)
   14518:	00037144 	.word	0x00037144
   1451c:	00035a89 	.word	0x00035a89

00014520 <CLI_NeotrellProcessButtonBuffer>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_NeotrellProcessButtonBuffer(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   14520:	b590      	push	{r4, r7, lr}
   14522:	b099      	sub	sp, #100	; 0x64
   14524:	af00      	add	r7, sp, #0
   14526:	60f8      	str	r0, [r7, #12]
   14528:	60b9      	str	r1, [r7, #8]
   1452a:	607a      	str	r2, [r7, #4]
    // snprintf(pcWriteBuffer,xWriteBufferLen, "count: %d\num_req_eve:%d\t\n",count,num_req_eve);
    // Print to pcWriteBuffer in order.
    // If the string is too long to print, print what you can.
    // The function you write will be useful in the future.
    uint8_t buffer[64];
    uint8_t count = SeesawGetKeypadCount();
   1452c:	235f      	movs	r3, #95	; 0x5f
   1452e:	18fc      	adds	r4, r7, r3
   14530:	4b36      	ldr	r3, [pc, #216]	; (1460c <CLI_NeotrellProcessButtonBuffer+0xec>)
   14532:	4798      	blx	r3
   14534:	0003      	movs	r3, r0
   14536:	7023      	strb	r3, [r4, #0]
    if (count >= 1) {
   14538:	235f      	movs	r3, #95	; 0x5f
   1453a:	18fb      	adds	r3, r7, r3
   1453c:	781b      	ldrb	r3, [r3, #0]
   1453e:	2b00      	cmp	r3, #0
   14540:	d05d      	beq.n	145fe <CLI_NeotrellProcessButtonBuffer+0xde>
        int32_t res = SeesawReadKeypad(buffer, 1);
   14542:	2310      	movs	r3, #16
   14544:	18fb      	adds	r3, r7, r3
   14546:	2101      	movs	r1, #1
   14548:	0018      	movs	r0, r3
   1454a:	4b31      	ldr	r3, [pc, #196]	; (14610 <CLI_NeotrellProcessButtonBuffer+0xf0>)
   1454c:	4798      	blx	r3
   1454e:	0003      	movs	r3, r0
   14550:	65bb      	str	r3, [r7, #88]	; 0x58
        if (res == 0) {
   14552:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   14554:	2b00      	cmp	r3, #0
   14556:	d150      	bne.n	145fa <CLI_NeotrellProcessButtonBuffer+0xda>
            uint8_t pos, press;
            press = buffer[0] & 0x3;
   14558:	2310      	movs	r3, #16
   1455a:	18fb      	adds	r3, r7, r3
   1455c:	781a      	ldrb	r2, [r3, #0]
   1455e:	2357      	movs	r3, #87	; 0x57
   14560:	18fb      	adds	r3, r7, r3
   14562:	2103      	movs	r1, #3
   14564:	400a      	ands	r2, r1
   14566:	701a      	strb	r2, [r3, #0]
            pos = buffer[0] >> 2;
   14568:	2310      	movs	r3, #16
   1456a:	18fb      	adds	r3, r7, r3
   1456c:	781a      	ldrb	r2, [r3, #0]
   1456e:	2356      	movs	r3, #86	; 0x56
   14570:	18fb      	adds	r3, r7, r3
   14572:	0892      	lsrs	r2, r2, #2
   14574:	701a      	strb	r2, [r3, #0]
            int num = NEO_TRELLIS_SEESAW_KEY(pos);
   14576:	2356      	movs	r3, #86	; 0x56
   14578:	18fb      	adds	r3, r7, r3
   1457a:	781b      	ldrb	r3, [r3, #0]
   1457c:	08db      	lsrs	r3, r3, #3
   1457e:	b2db      	uxtb	r3, r3
   14580:	009a      	lsls	r2, r3, #2
   14582:	2356      	movs	r3, #86	; 0x56
   14584:	18fb      	adds	r3, r7, r3
   14586:	781b      	ldrb	r3, [r3, #0]
   14588:	2107      	movs	r1, #7
   1458a:	400b      	ands	r3, r1
   1458c:	18d3      	adds	r3, r2, r3
   1458e:	653b      	str	r3, [r7, #80]	; 0x50
            if (press == 0x2) {
   14590:	2357      	movs	r3, #87	; 0x57
   14592:	18fb      	adds	r3, r7, r3
   14594:	781b      	ldrb	r3, [r3, #0]
   14596:	2b02      	cmp	r3, #2
   14598:	d115      	bne.n	145c6 <CLI_NeotrellProcessButtonBuffer+0xa6>
                snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Button #%d is released\r\n", NEO_TRELLIS_SEESAW_KEY(num));
   1459a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1459c:	2b00      	cmp	r3, #0
   1459e:	da00      	bge.n	145a2 <CLI_NeotrellProcessButtonBuffer+0x82>
   145a0:	3307      	adds	r3, #7
   145a2:	10db      	asrs	r3, r3, #3
   145a4:	009a      	lsls	r2, r3, #2
   145a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   145a8:	491a      	ldr	r1, [pc, #104]	; (14614 <CLI_NeotrellProcessButtonBuffer+0xf4>)
   145aa:	400b      	ands	r3, r1
   145ac:	d504      	bpl.n	145b8 <CLI_NeotrellProcessButtonBuffer+0x98>
   145ae:	3b01      	subs	r3, #1
   145b0:	2108      	movs	r1, #8
   145b2:	4249      	negs	r1, r1
   145b4:	430b      	orrs	r3, r1
   145b6:	3301      	adds	r3, #1
   145b8:	18d3      	adds	r3, r2, r3
   145ba:	4a17      	ldr	r2, [pc, #92]	; (14618 <CLI_NeotrellProcessButtonBuffer+0xf8>)
   145bc:	68b9      	ldr	r1, [r7, #8]
   145be:	68f8      	ldr	r0, [r7, #12]
   145c0:	4c16      	ldr	r4, [pc, #88]	; (1461c <CLI_NeotrellProcessButtonBuffer+0xfc>)
   145c2:	47a0      	blx	r4
   145c4:	e019      	b.n	145fa <CLI_NeotrellProcessButtonBuffer+0xda>
            } else if (press == 0x3) {
   145c6:	2357      	movs	r3, #87	; 0x57
   145c8:	18fb      	adds	r3, r7, r3
   145ca:	781b      	ldrb	r3, [r3, #0]
   145cc:	2b03      	cmp	r3, #3
   145ce:	d114      	bne.n	145fa <CLI_NeotrellProcessButtonBuffer+0xda>
                snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Button #%d is pressed\r\n", NEO_TRELLIS_SEESAW_KEY(num));
   145d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   145d2:	2b00      	cmp	r3, #0
   145d4:	da00      	bge.n	145d8 <CLI_NeotrellProcessButtonBuffer+0xb8>
   145d6:	3307      	adds	r3, #7
   145d8:	10db      	asrs	r3, r3, #3
   145da:	009a      	lsls	r2, r3, #2
   145dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   145de:	490d      	ldr	r1, [pc, #52]	; (14614 <CLI_NeotrellProcessButtonBuffer+0xf4>)
   145e0:	400b      	ands	r3, r1
   145e2:	d504      	bpl.n	145ee <CLI_NeotrellProcessButtonBuffer+0xce>
   145e4:	3b01      	subs	r3, #1
   145e6:	2108      	movs	r1, #8
   145e8:	4249      	negs	r1, r1
   145ea:	430b      	orrs	r3, r1
   145ec:	3301      	adds	r3, #1
   145ee:	18d3      	adds	r3, r2, r3
   145f0:	4a0b      	ldr	r2, [pc, #44]	; (14620 <CLI_NeotrellProcessButtonBuffer+0x100>)
   145f2:	68b9      	ldr	r1, [r7, #8]
   145f4:	68f8      	ldr	r0, [r7, #12]
   145f6:	4c09      	ldr	r4, [pc, #36]	; (1461c <CLI_NeotrellProcessButtonBuffer+0xfc>)
   145f8:	47a0      	blx	r4
            }
        }
        return pdTRUE;
   145fa:	2301      	movs	r3, #1
   145fc:	e002      	b.n	14604 <CLI_NeotrellProcessButtonBuffer+0xe4>
    } else {
        pcWriteBuffer = 0;
   145fe:	2300      	movs	r3, #0
   14600:	60fb      	str	r3, [r7, #12]
        return pdFALSE;
   14602:	2300      	movs	r3, #0
    }
}
   14604:	0018      	movs	r0, r3
   14606:	46bd      	mov	sp, r7
   14608:	b019      	add	sp, #100	; 0x64
   1460a:	bd90      	pop	{r4, r7, pc}
   1460c:	00016301 	.word	0x00016301
   14610:	00016369 	.word	0x00016369
   14614:	80000007 	.word	0x80000007
   14618:	0003715c 	.word	0x0003715c
   1461c:	00035a89 	.word	0x00035a89
   14620:	00037178 	.word	0x00037178

00014624 <CLI_DistanceSensorGetDistance>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_DistanceSensorGetDistance(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   14624:	b590      	push	{r4, r7, lr}
   14626:	b087      	sub	sp, #28
   14628:	af00      	add	r7, sp, #0
   1462a:	60f8      	str	r0, [r7, #12]
   1462c:	60b9      	str	r1, [r7, #8]
   1462e:	607a      	str	r2, [r7, #4]
    uint16_t distance = 0;
   14630:	2312      	movs	r3, #18
   14632:	18fb      	adds	r3, r7, r3
   14634:	2200      	movs	r2, #0
   14636:	801a      	strh	r2, [r3, #0]
    int error = DistanceSensorGetDistance(&distance, 100);
   14638:	2312      	movs	r3, #18
   1463a:	18fb      	adds	r3, r7, r3
   1463c:	2164      	movs	r1, #100	; 0x64
   1463e:	0018      	movs	r0, r3
   14640:	4b19      	ldr	r3, [pc, #100]	; (146a8 <CLI_DistanceSensorGetDistance+0x84>)
   14642:	4798      	blx	r3
   14644:	0003      	movs	r3, r0
   14646:	617b      	str	r3, [r7, #20]
    if (0 != error) {
   14648:	697b      	ldr	r3, [r7, #20]
   1464a:	2b00      	cmp	r3, #0
   1464c:	d006      	beq.n	1465c <CLI_DistanceSensorGetDistance+0x38>
        snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Sensor Error %d!\r\n", error);
   1464e:	697b      	ldr	r3, [r7, #20]
   14650:	4a16      	ldr	r2, [pc, #88]	; (146ac <CLI_DistanceSensorGetDistance+0x88>)
   14652:	68b9      	ldr	r1, [r7, #8]
   14654:	68f8      	ldr	r0, [r7, #12]
   14656:	4c16      	ldr	r4, [pc, #88]	; (146b0 <CLI_DistanceSensorGetDistance+0x8c>)
   14658:	47a0      	blx	r4
   1465a:	e007      	b.n	1466c <CLI_DistanceSensorGetDistance+0x48>
    } else {
        snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Distance: %d mm\r\n", distance);
   1465c:	2312      	movs	r3, #18
   1465e:	18fb      	adds	r3, r7, r3
   14660:	881b      	ldrh	r3, [r3, #0]
   14662:	4a14      	ldr	r2, [pc, #80]	; (146b4 <CLI_DistanceSensorGetDistance+0x90>)
   14664:	68b9      	ldr	r1, [r7, #8]
   14666:	68f8      	ldr	r0, [r7, #12]
   14668:	4c11      	ldr	r4, [pc, #68]	; (146b0 <CLI_DistanceSensorGetDistance+0x8c>)
   1466a:	47a0      	blx	r4
    }

    error = WifiAddDistanceDataToQueue(&distance);
   1466c:	2312      	movs	r3, #18
   1466e:	18fb      	adds	r3, r7, r3
   14670:	0018      	movs	r0, r3
   14672:	4b11      	ldr	r3, [pc, #68]	; (146b8 <CLI_DistanceSensorGetDistance+0x94>)
   14674:	4798      	blx	r3
   14676:	0003      	movs	r3, r0
   14678:	617b      	str	r3, [r7, #20]
    if (error == pdTRUE) {
   1467a:	697b      	ldr	r3, [r7, #20]
   1467c:	2b01      	cmp	r3, #1
   1467e:	d10e      	bne.n	1469e <CLI_DistanceSensorGetDistance+0x7a>
        strcat((char *) pcWriteBuffer, "Distance Data MQTT Post\r\n");
   14680:	68fb      	ldr	r3, [r7, #12]
   14682:	0018      	movs	r0, r3
   14684:	4b0d      	ldr	r3, [pc, #52]	; (146bc <CLI_DistanceSensorGetDistance+0x98>)
   14686:	4798      	blx	r3
   14688:	0003      	movs	r3, r0
   1468a:	001a      	movs	r2, r3
   1468c:	68fb      	ldr	r3, [r7, #12]
   1468e:	189a      	adds	r2, r3, r2
   14690:	4b0b      	ldr	r3, [pc, #44]	; (146c0 <CLI_DistanceSensorGetDistance+0x9c>)
   14692:	0010      	movs	r0, r2
   14694:	0019      	movs	r1, r3
   14696:	231a      	movs	r3, #26
   14698:	001a      	movs	r2, r3
   1469a:	4b0a      	ldr	r3, [pc, #40]	; (146c4 <CLI_DistanceSensorGetDistance+0xa0>)
   1469c:	4798      	blx	r3
    }
    return pdFALSE;
   1469e:	2300      	movs	r3, #0
}
   146a0:	0018      	movs	r0, r3
   146a2:	46bd      	mov	sp, r7
   146a4:	b007      	add	sp, #28
   146a6:	bd90      	pop	{r4, r7, pc}
   146a8:	000149d1 	.word	0x000149d1
   146ac:	00037190 	.word	0x00037190
   146b0:	00035a89 	.word	0x00035a89
   146b4:	000371a4 	.word	0x000371a4
   146b8:	00018305 	.word	0x00018305
   146bc:	00035be7 	.word	0x00035be7
   146c0:	000371b8 	.word	0x000371b8
   146c4:	000357f9 	.word	0x000357f9

000146c8 <CLI_SendDummyGameData>:
 * @note         Please see https://www.freertos.org/FreeRTOS-Plus/FreeRTOS_Plus_CLI/FreeRTOS_Plus_CLI_Accessing_Command_Line_Parameters.html
                                 for more information on how to use the FreeRTOS CLI.

 */
BaseType_t CLI_SendDummyGameData(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   146c8:	b580      	push	{r7, lr}
   146ca:	b08a      	sub	sp, #40	; 0x28
   146cc:	af00      	add	r7, sp, #0
   146ce:	60f8      	str	r0, [r7, #12]
   146d0:	60b9      	str	r1, [r7, #8]
   146d2:	607a      	str	r2, [r7, #4]
    struct GameDataPacket gamevar;

    gamevar.game[0] = 0;
   146d4:	2310      	movs	r3, #16
   146d6:	18fb      	adds	r3, r7, r3
   146d8:	2200      	movs	r2, #0
   146da:	701a      	strb	r2, [r3, #0]
    gamevar.game[1] = 1;
   146dc:	2310      	movs	r3, #16
   146de:	18fb      	adds	r3, r7, r3
   146e0:	2201      	movs	r2, #1
   146e2:	705a      	strb	r2, [r3, #1]
    gamevar.game[2] = 2;
   146e4:	2310      	movs	r3, #16
   146e6:	18fb      	adds	r3, r7, r3
   146e8:	2202      	movs	r2, #2
   146ea:	709a      	strb	r2, [r3, #2]
    gamevar.game[3] = 3;
   146ec:	2310      	movs	r3, #16
   146ee:	18fb      	adds	r3, r7, r3
   146f0:	2203      	movs	r2, #3
   146f2:	70da      	strb	r2, [r3, #3]
    gamevar.game[4] = 4;
   146f4:	2310      	movs	r3, #16
   146f6:	18fb      	adds	r3, r7, r3
   146f8:	2204      	movs	r2, #4
   146fa:	711a      	strb	r2, [r3, #4]
    gamevar.game[5] = 5;
   146fc:	2310      	movs	r3, #16
   146fe:	18fb      	adds	r3, r7, r3
   14700:	2205      	movs	r2, #5
   14702:	715a      	strb	r2, [r3, #5]
    gamevar.game[6] = 6;
   14704:	2310      	movs	r3, #16
   14706:	18fb      	adds	r3, r7, r3
   14708:	2206      	movs	r2, #6
   1470a:	719a      	strb	r2, [r3, #6]
    gamevar.game[7] = 7;
   1470c:	2310      	movs	r3, #16
   1470e:	18fb      	adds	r3, r7, r3
   14710:	2207      	movs	r2, #7
   14712:	71da      	strb	r2, [r3, #7]
    gamevar.game[8] = 8;
   14714:	2310      	movs	r3, #16
   14716:	18fb      	adds	r3, r7, r3
   14718:	2208      	movs	r2, #8
   1471a:	721a      	strb	r2, [r3, #8]
    gamevar.game[9] = 9;
   1471c:	2310      	movs	r3, #16
   1471e:	18fb      	adds	r3, r7, r3
   14720:	2209      	movs	r2, #9
   14722:	725a      	strb	r2, [r3, #9]
    gamevar.game[10] = 0xFF;
   14724:	2310      	movs	r3, #16
   14726:	18fb      	adds	r3, r7, r3
   14728:	22ff      	movs	r2, #255	; 0xff
   1472a:	729a      	strb	r2, [r3, #10]

    int error = WifiAddGameDataToQueue(&gamevar);
   1472c:	2310      	movs	r3, #16
   1472e:	18fb      	adds	r3, r7, r3
   14730:	0018      	movs	r0, r3
   14732:	4b09      	ldr	r3, [pc, #36]	; (14758 <CLI_SendDummyGameData+0x90>)
   14734:	4798      	blx	r3
   14736:	0003      	movs	r3, r0
   14738:	627b      	str	r3, [r7, #36]	; 0x24
    if (error == pdTRUE) {
   1473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1473c:	2b01      	cmp	r3, #1
   1473e:	d105      	bne.n	1474c <CLI_SendDummyGameData+0x84>
        snprintf((char *) pcWriteBuffer, xWriteBufferLen, "Dummy Game Data MQTT Post\r\n");
   14740:	4a06      	ldr	r2, [pc, #24]	; (1475c <CLI_SendDummyGameData+0x94>)
   14742:	68b9      	ldr	r1, [r7, #8]
   14744:	68fb      	ldr	r3, [r7, #12]
   14746:	0018      	movs	r0, r3
   14748:	4b05      	ldr	r3, [pc, #20]	; (14760 <CLI_SendDummyGameData+0x98>)
   1474a:	4798      	blx	r3
    }
    return pdFALSE;
   1474c:	2300      	movs	r3, #0
}
   1474e:	0018      	movs	r0, r3
   14750:	46bd      	mov	sp, r7
   14752:	b00a      	add	sp, #40	; 0x28
   14754:	bd80      	pop	{r7, pc}
   14756:	46c0      	nop			; (mov r8, r8)
   14758:	00018331 	.word	0x00018331
   1475c:	000371d4 	.word	0x000371d4
   14760:	00035a89 	.word	0x00035a89

00014764 <CLI_i2cScan>:
 * @param    p_cli 
 * @param    argc 
 * @param    argv 
 ******************************************************************************/
BaseType_t CLI_i2cScan(int8_t *pcWriteBuffer, size_t xWriteBufferLen, const int8_t *pcCommandString)
{
   14764:	b590      	push	{r4, r7, lr}
   14766:	b08f      	sub	sp, #60	; 0x3c
   14768:	af00      	add	r7, sp, #0
   1476a:	60f8      	str	r0, [r7, #12]
   1476c:	60b9      	str	r1, [r7, #8]
   1476e:	607a      	str	r2, [r7, #4]

		I2C_Data i2cOled; 
        uint8_t address;
		//Send 0 command byte
		uint8_t dataOut[2] = {0,0};
   14770:	2318      	movs	r3, #24
   14772:	18fb      	adds	r3, r7, r3
   14774:	2200      	movs	r2, #0
   14776:	701a      	strb	r2, [r3, #0]
   14778:	2318      	movs	r3, #24
   1477a:	18fb      	adds	r3, r7, r3
   1477c:	2200      	movs	r2, #0
   1477e:	705a      	strb	r2, [r3, #1]
		uint8_t dataIn[2];
		dataOut[0] = 0;
   14780:	2318      	movs	r3, #24
   14782:	18fb      	adds	r3, r7, r3
   14784:	2200      	movs	r2, #0
   14786:	701a      	strb	r2, [r3, #0]
		dataOut[1] = 0;
   14788:	2318      	movs	r3, #24
   1478a:	18fb      	adds	r3, r7, r3
   1478c:	2200      	movs	r2, #0
   1478e:	705a      	strb	r2, [r3, #1]
		i2cOled.address = 0;
   14790:	231c      	movs	r3, #28
   14792:	18fb      	adds	r3, r7, r3
   14794:	2200      	movs	r2, #0
   14796:	701a      	strb	r2, [r3, #0]
		i2cOled.msgIn = (uint8_t*) &dataIn[0];
   14798:	231c      	movs	r3, #28
   1479a:	18fb      	adds	r3, r7, r3
   1479c:	2214      	movs	r2, #20
   1479e:	18ba      	adds	r2, r7, r2
   147a0:	609a      	str	r2, [r3, #8]
		i2cOled.lenOut = 1;
   147a2:	231c      	movs	r3, #28
   147a4:	18fb      	adds	r3, r7, r3
   147a6:	2201      	movs	r2, #1
   147a8:	81da      	strh	r2, [r3, #14]
		i2cOled.msgOut = (const uint8_t*) &dataOut[0];
   147aa:	231c      	movs	r3, #28
   147ac:	18fb      	adds	r3, r7, r3
   147ae:	2218      	movs	r2, #24
   147b0:	18ba      	adds	r2, r7, r2
   147b2:	605a      	str	r2, [r3, #4]
		i2cOled.lenIn = 1;
   147b4:	231c      	movs	r3, #28
   147b6:	18fb      	adds	r3, r7, r3
   147b8:	2201      	movs	r2, #1
   147ba:	819a      	strh	r2, [r3, #12]

            SerialConsoleWriteString("0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\r\n");
   147bc:	4b2a      	ldr	r3, [pc, #168]	; (14868 <CLI_i2cScan+0x104>)
   147be:	0018      	movs	r0, r3
   147c0:	4b2a      	ldr	r3, [pc, #168]	; (1486c <CLI_i2cScan+0x108>)
   147c2:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   147c4:	2300      	movs	r3, #0
   147c6:	637b      	str	r3, [r7, #52]	; 0x34
   147c8:	e042      	b.n	14850 <CLI_i2cScan+0xec>
            {
				snprintf(bufCli, CLI_MSG_LEN - 1, "%02x: ", i);
   147ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   147cc:	4a28      	ldr	r2, [pc, #160]	; (14870 <CLI_i2cScan+0x10c>)
   147ce:	4829      	ldr	r0, [pc, #164]	; (14874 <CLI_i2cScan+0x110>)
   147d0:	210f      	movs	r1, #15
   147d2:	4c29      	ldr	r4, [pc, #164]	; (14878 <CLI_i2cScan+0x114>)
   147d4:	47a0      	blx	r4
                SerialConsoleWriteString(bufCli);
   147d6:	4b27      	ldr	r3, [pc, #156]	; (14874 <CLI_i2cScan+0x110>)
   147d8:	0018      	movs	r0, r3
   147da:	4b24      	ldr	r3, [pc, #144]	; (1486c <CLI_i2cScan+0x108>)
   147dc:	4798      	blx	r3

                for (int j = 0; j < 16; j++)
   147de:	2300      	movs	r3, #0
   147e0:	633b      	str	r3, [r7, #48]	; 0x30
   147e2:	e02b      	b.n	1483c <CLI_i2cScan+0xd8>
                {

                    i2cOled.address = (i + j);
   147e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   147e6:	b2da      	uxtb	r2, r3
   147e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   147ea:	b2db      	uxtb	r3, r3
   147ec:	18d3      	adds	r3, r2, r3
   147ee:	b2da      	uxtb	r2, r3
   147f0:	231c      	movs	r3, #28
   147f2:	18fb      	adds	r3, r7, r3
   147f4:	701a      	strb	r2, [r3, #0]

                    	
                    int32_t ret = I2cReadDataWait(&i2cOled, 100, 100);
   147f6:	231c      	movs	r3, #28
   147f8:	18fb      	adds	r3, r7, r3
   147fa:	2264      	movs	r2, #100	; 0x64
   147fc:	2164      	movs	r1, #100	; 0x64
   147fe:	0018      	movs	r0, r3
   14800:	4b1e      	ldr	r3, [pc, #120]	; (1487c <CLI_i2cScan+0x118>)
   14802:	4798      	blx	r3
   14804:	0003      	movs	r3, r0
   14806:	62fb      	str	r3, [r7, #44]	; 0x2c
                    if (ret == 0)
   14808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1480a:	2b00      	cmp	r3, #0
   1480c:	d10c      	bne.n	14828 <CLI_i2cScan+0xc4>
                    {
						snprintf(bufCli, CLI_MSG_LEN - 1, "%02x ", i2cOled.address);
   1480e:	231c      	movs	r3, #28
   14810:	18fb      	adds	r3, r7, r3
   14812:	781b      	ldrb	r3, [r3, #0]
   14814:	4a1a      	ldr	r2, [pc, #104]	; (14880 <CLI_i2cScan+0x11c>)
   14816:	4817      	ldr	r0, [pc, #92]	; (14874 <CLI_i2cScan+0x110>)
   14818:	210f      	movs	r1, #15
   1481a:	4c17      	ldr	r4, [pc, #92]	; (14878 <CLI_i2cScan+0x114>)
   1481c:	47a0      	blx	r4
                        SerialConsoleWriteString(bufCli);
   1481e:	4b15      	ldr	r3, [pc, #84]	; (14874 <CLI_i2cScan+0x110>)
   14820:	0018      	movs	r0, r3
   14822:	4b12      	ldr	r3, [pc, #72]	; (1486c <CLI_i2cScan+0x108>)
   14824:	4798      	blx	r3
   14826:	e006      	b.n	14836 <CLI_i2cScan+0xd2>
                    }
                    else
                    {
                        snprintf(bufCli, CLI_MSG_LEN - 1, "X  ");
   14828:	4b12      	ldr	r3, [pc, #72]	; (14874 <CLI_i2cScan+0x110>)
   1482a:	4a16      	ldr	r2, [pc, #88]	; (14884 <CLI_i2cScan+0x120>)
   1482c:	601a      	str	r2, [r3, #0]
						SerialConsoleWriteString(bufCli);
   1482e:	4b11      	ldr	r3, [pc, #68]	; (14874 <CLI_i2cScan+0x110>)
   14830:	0018      	movs	r0, r3
   14832:	4b0e      	ldr	r3, [pc, #56]	; (1486c <CLI_i2cScan+0x108>)
   14834:	4798      	blx	r3
                for (int j = 0; j < 16; j++)
   14836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   14838:	3301      	adds	r3, #1
   1483a:	633b      	str	r3, [r7, #48]	; 0x30
   1483c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1483e:	2b0f      	cmp	r3, #15
   14840:	ddd0      	ble.n	147e4 <CLI_i2cScan+0x80>
                    }
                }
                SerialConsoleWriteString( "\r\n");
   14842:	4b11      	ldr	r3, [pc, #68]	; (14888 <CLI_i2cScan+0x124>)
   14844:	0018      	movs	r0, r3
   14846:	4b09      	ldr	r3, [pc, #36]	; (1486c <CLI_i2cScan+0x108>)
   14848:	4798      	blx	r3
            for (int i = 0; i < 128; i += 16)
   1484a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1484c:	3310      	adds	r3, #16
   1484e:	637b      	str	r3, [r7, #52]	; 0x34
   14850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   14852:	2b7f      	cmp	r3, #127	; 0x7f
   14854:	ddb9      	ble.n	147ca <CLI_i2cScan+0x66>
            }
            SerialConsoleWriteString( "\r\n");
   14856:	4b0c      	ldr	r3, [pc, #48]	; (14888 <CLI_i2cScan+0x124>)
   14858:	0018      	movs	r0, r3
   1485a:	4b04      	ldr	r3, [pc, #16]	; (1486c <CLI_i2cScan+0x108>)
   1485c:	4798      	blx	r3
			return pdFALSE;
   1485e:	2300      	movs	r3, #0

}
   14860:	0018      	movs	r0, r3
   14862:	46bd      	mov	sp, r7
   14864:	b00f      	add	sp, #60	; 0x3c
   14866:	bd90      	pop	{r4, r7, pc}
   14868:	000371f0 	.word	0x000371f0
   1486c:	0001ebe5 	.word	0x0001ebe5
   14870:	00037224 	.word	0x00037224
   14874:	20000504 	.word	0x20000504
   14878:	00035a89 	.word	0x00035a89
   1487c:	000151dd 	.word	0x000151dd
   14880:	0003722c 	.word	0x0003722c
   14884:	00202058 	.word	0x00202058
   14888:	000370dc 	.word	0x000370dc

0001488c <vControlHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vControlHandlerTask(void *pvParameters)
{
   1488c:	b580      	push	{r7, lr}
   1488e:	b088      	sub	sp, #32
   14890:	af00      	add	r7, sp, #0
   14892:	6078      	str	r0, [r7, #4]
    SerialConsoleWriteString((char *)"ESE516 - Control Init Code\r\n");
   14894:	4b33      	ldr	r3, [pc, #204]	; (14964 <vControlHandlerTask+0xd8>)
   14896:	0018      	movs	r0, r3
   14898:	4b33      	ldr	r3, [pc, #204]	; (14968 <vControlHandlerTask+0xdc>)
   1489a:	4798      	blx	r3

    // Initialize Queues
    xQueueGameBufferIn = xQueueCreate(2, sizeof(struct GameDataPacket));
   1489c:	2200      	movs	r2, #0
   1489e:	2114      	movs	r1, #20
   148a0:	2002      	movs	r0, #2
   148a2:	4b32      	ldr	r3, [pc, #200]	; (1496c <vControlHandlerTask+0xe0>)
   148a4:	4798      	blx	r3
   148a6:	0002      	movs	r2, r0
   148a8:	4b31      	ldr	r3, [pc, #196]	; (14970 <vControlHandlerTask+0xe4>)
   148aa:	601a      	str	r2, [r3, #0]
    xQueueRgbColorBuffer = xQueueCreate(2, sizeof(struct RgbColorPacket));
   148ac:	2200      	movs	r2, #0
   148ae:	2103      	movs	r1, #3
   148b0:	2002      	movs	r0, #2
   148b2:	4b2e      	ldr	r3, [pc, #184]	; (1496c <vControlHandlerTask+0xe0>)
   148b4:	4798      	blx	r3
   148b6:	0002      	movs	r2, r0
   148b8:	4b2e      	ldr	r3, [pc, #184]	; (14974 <vControlHandlerTask+0xe8>)
   148ba:	601a      	str	r2, [r3, #0]

    if (xQueueGameBufferIn == NULL || xQueueRgbColorBuffer == NULL) {
   148bc:	4b2c      	ldr	r3, [pc, #176]	; (14970 <vControlHandlerTask+0xe4>)
   148be:	681b      	ldr	r3, [r3, #0]
   148c0:	2b00      	cmp	r3, #0
   148c2:	d003      	beq.n	148cc <vControlHandlerTask+0x40>
   148c4:	4b2b      	ldr	r3, [pc, #172]	; (14974 <vControlHandlerTask+0xe8>)
   148c6:	681b      	ldr	r3, [r3, #0]
   148c8:	2b00      	cmp	r3, #0
   148ca:	d103      	bne.n	148d4 <vControlHandlerTask+0x48>
        SerialConsoleWriteString((char *)"ERROR Initializing Control Data queues!\r\n");
   148cc:	4b2a      	ldr	r3, [pc, #168]	; (14978 <vControlHandlerTask+0xec>)
   148ce:	0018      	movs	r0, r3
   148d0:	4b25      	ldr	r3, [pc, #148]	; (14968 <vControlHandlerTask+0xdc>)
   148d2:	4798      	blx	r3
    }
    controlState = CONTROL_WAIT_FOR_GAME;  // Initial state
   148d4:	4b29      	ldr	r3, [pc, #164]	; (1497c <vControlHandlerTask+0xf0>)
   148d6:	2200      	movs	r2, #0
   148d8:	701a      	strb	r2, [r3, #0]

    while (1) {
        switch (controlState) {
   148da:	4b28      	ldr	r3, [pc, #160]	; (1497c <vControlHandlerTask+0xf0>)
   148dc:	781b      	ldrb	r3, [r3, #0]
   148de:	2b01      	cmp	r3, #1
   148e0:	d01d      	beq.n	1491e <vControlHandlerTask+0x92>
   148e2:	2b02      	cmp	r3, #2
   148e4:	d035      	beq.n	14952 <vControlHandlerTask+0xc6>
   148e6:	2b00      	cmp	r3, #0
   148e8:	d12f      	bne.n	1494a <vControlHandlerTask+0xbe>
            case (CONTROL_WAIT_FOR_GAME): {  // Should set the UI to ignore button presses and should wait until there is a message from the server with a new play.
                struct GameDataPacket gamePacketIn;
                if (pdPASS == xQueueReceive(xQueueGameBufferIn, &gamePacketIn, 0)) {
   148ea:	4b21      	ldr	r3, [pc, #132]	; (14970 <vControlHandlerTask+0xe4>)
   148ec:	681b      	ldr	r3, [r3, #0]
   148ee:	220c      	movs	r2, #12
   148f0:	18b9      	adds	r1, r7, r2
   148f2:	2200      	movs	r2, #0
   148f4:	0018      	movs	r0, r3
   148f6:	4b22      	ldr	r3, [pc, #136]	; (14980 <vControlHandlerTask+0xf4>)
   148f8:	4798      	blx	r3
   148fa:	0003      	movs	r3, r0
   148fc:	2b01      	cmp	r3, #1
   148fe:	d12a      	bne.n	14956 <vControlHandlerTask+0xca>
                    LogMessage(LOG_DEBUG_LVL, "Control Thread: Consumed game packet!\r\n");
   14900:	4b20      	ldr	r3, [pc, #128]	; (14984 <vControlHandlerTask+0xf8>)
   14902:	0019      	movs	r1, r3
   14904:	2001      	movs	r0, #1
   14906:	4b20      	ldr	r3, [pc, #128]	; (14988 <vControlHandlerTask+0xfc>)
   14908:	4798      	blx	r3
                    UiOrderShowMoves(&gamePacketIn);
   1490a:	230c      	movs	r3, #12
   1490c:	18fb      	adds	r3, r7, r3
   1490e:	0018      	movs	r0, r3
   14910:	4b1e      	ldr	r3, [pc, #120]	; (1498c <vControlHandlerTask+0x100>)
   14912:	4798      	blx	r3
                    controlState = CONTROL_PLAYING_MOVE;
   14914:	4b19      	ldr	r3, [pc, #100]	; (1497c <vControlHandlerTask+0xf0>)
   14916:	2201      	movs	r2, #1
   14918:	701a      	strb	r2, [r3, #0]
                }

                break;
   1491a:	46c0      	nop			; (mov r8, r8)
   1491c:	e01b      	b.n	14956 <vControlHandlerTask+0xca>
            }

            case (CONTROL_PLAYING_MOVE): {  // Should wait until the UI thread has showed the move AND comes back with the play from the user. Should go back to CONTROL_WAIT_FOR_GAME
                // after posting the game to MQTT
                if (UiPlayIsDone() == true) {
   1491e:	4b1c      	ldr	r3, [pc, #112]	; (14990 <vControlHandlerTask+0x104>)
   14920:	4798      	blx	r3
   14922:	1e03      	subs	r3, r0, #0
   14924:	d019      	beq.n	1495a <vControlHandlerTask+0xce>
                    // Send back local game packet
                    if (pdTRUE != WifiAddGameDataToQueue(UiGetGamePacketOut())) {
   14926:	4b1b      	ldr	r3, [pc, #108]	; (14994 <vControlHandlerTask+0x108>)
   14928:	4798      	blx	r3
   1492a:	0003      	movs	r3, r0
   1492c:	0018      	movs	r0, r3
   1492e:	4b1a      	ldr	r3, [pc, #104]	; (14998 <vControlHandlerTask+0x10c>)
   14930:	4798      	blx	r3
   14932:	0003      	movs	r3, r0
   14934:	2b01      	cmp	r3, #1
   14936:	d004      	beq.n	14942 <vControlHandlerTask+0xb6>
                        LogMessage(LOG_DEBUG_LVL, "Control Thread: Could not send game packet!\r\n");
   14938:	4b18      	ldr	r3, [pc, #96]	; (1499c <vControlHandlerTask+0x110>)
   1493a:	0019      	movs	r1, r3
   1493c:	2001      	movs	r0, #1
   1493e:	4b12      	ldr	r3, [pc, #72]	; (14988 <vControlHandlerTask+0xfc>)
   14940:	4798      	blx	r3
                    }
                    controlState = CONTROL_WAIT_FOR_GAME;
   14942:	4b0e      	ldr	r3, [pc, #56]	; (1497c <vControlHandlerTask+0xf0>)
   14944:	2200      	movs	r2, #0
   14946:	701a      	strb	r2, [r3, #0]
                }

                break;
   14948:	e007      	b.n	1495a <vControlHandlerTask+0xce>
            case (CONTROL_END_GAME): {
                break;
            }

            default:
                controlState = CONTROL_WAIT_FOR_GAME;
   1494a:	4b0c      	ldr	r3, [pc, #48]	; (1497c <vControlHandlerTask+0xf0>)
   1494c:	2200      	movs	r2, #0
   1494e:	701a      	strb	r2, [r3, #0]
                break;
   14950:	e004      	b.n	1495c <vControlHandlerTask+0xd0>
                break;
   14952:	46c0      	nop			; (mov r8, r8)
   14954:	e002      	b.n	1495c <vControlHandlerTask+0xd0>
                break;
   14956:	46c0      	nop			; (mov r8, r8)
   14958:	e000      	b.n	1495c <vControlHandlerTask+0xd0>
                break;
   1495a:	46c0      	nop			; (mov r8, r8)
        }
        vTaskDelay(40);
   1495c:	2028      	movs	r0, #40	; 0x28
   1495e:	4b10      	ldr	r3, [pc, #64]	; (149a0 <vControlHandlerTask+0x114>)
   14960:	4798      	blx	r3
        switch (controlState) {
   14962:	e7ba      	b.n	148da <vControlHandlerTask+0x4e>
   14964:	000372c4 	.word	0x000372c4
   14968:	0001ebe5 	.word	0x0001ebe5
   1496c:	0001b285 	.word	0x0001b285
   14970:	20000600 	.word	0x20000600
   14974:	20000604 	.word	0x20000604
   14978:	000372e4 	.word	0x000372e4
   1497c:	200047e4 	.word	0x200047e4
   14980:	0001bde5 	.word	0x0001bde5
   14984:	00037310 	.word	0x00037310
   14988:	0001ecd1 	.word	0x0001ecd1
   1498c:	000169b9 	.word	0x000169b9
   14990:	000169f5 	.word	0x000169f5
   14994:	00016a09 	.word	0x00016a09
   14998:	00018331 	.word	0x00018331
   1499c:	00037338 	.word	0x00037338
   149a0:	0001cf91 	.word	0x0001cf91

000149a4 <ControlAddGameData>:
 * @return		Returns pdTrue if data can be added to queue, 0 if queue is full
 * @note

 */
int ControlAddGameData(struct GameDataPacket *gameIn)
{
   149a4:	b590      	push	{r4, r7, lr}
   149a6:	b085      	sub	sp, #20
   149a8:	af00      	add	r7, sp, #0
   149aa:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueGameBufferIn, gameIn, (TickType_t)10);
   149ac:	4b06      	ldr	r3, [pc, #24]	; (149c8 <ControlAddGameData+0x24>)
   149ae:	6818      	ldr	r0, [r3, #0]
   149b0:	6879      	ldr	r1, [r7, #4]
   149b2:	2300      	movs	r3, #0
   149b4:	220a      	movs	r2, #10
   149b6:	4c05      	ldr	r4, [pc, #20]	; (149cc <ControlAddGameData+0x28>)
   149b8:	47a0      	blx	r4
   149ba:	0003      	movs	r3, r0
   149bc:	60fb      	str	r3, [r7, #12]
    return error;
   149be:	68fb      	ldr	r3, [r7, #12]
}
   149c0:	0018      	movs	r0, r3
   149c2:	46bd      	mov	sp, r7
   149c4:	b005      	add	sp, #20
   149c6:	bd90      	pop	{r4, r7, pc}
   149c8:	20000600 	.word	0x20000600
   149cc:	0001b52d 	.word	0x0001b52d

000149d0 <DistanceSensorGetDistance>:
 * @fn			int32_t DistanceSensorGetDistance (uint16_t *distance)
 * @brief		Gets the distance from the distance sensor.
 * @note			Returns 0 if successful. -1 if an error occurred
 */
int32_t DistanceSensorGetDistance(uint16_t *distance, const TickType_t xMaxBlockTime)
{
   149d0:	b580      	push	{r7, lr}
   149d2:	b084      	sub	sp, #16
   149d4:	af00      	add	r7, sp, #0
   149d6:	6078      	str	r0, [r7, #4]
   149d8:	6039      	str	r1, [r7, #0]
    int error = ERROR_NONE;
   149da:	2300      	movs	r3, #0
   149dc:	60fb      	str	r3, [r7, #12]

    // 1. Get MUTEX. DistanceSensorGetMutex. If we cant get it, goto
    error = DistanceSensorGetMutex(WAIT_I2C_LINE_MS);
   149de:	2396      	movs	r3, #150	; 0x96
   149e0:	005b      	lsls	r3, r3, #1
   149e2:	0018      	movs	r0, r3
   149e4:	4b25      	ldr	r3, [pc, #148]	; (14a7c <DistanceSensorGetDistance+0xac>)
   149e6:	4798      	blx	r3
   149e8:	0003      	movs	r3, r0
   149ea:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exitf;
   149ec:	68fb      	ldr	r3, [r7, #12]
   149ee:	2b00      	cmp	r3, #0
   149f0:	d139      	bne.n	14a66 <DistanceSensorGetDistance+0x96>

    //---2. Initiate sending data. First populate TX with the distance command. Use usart_write_buffer_job to transmit 1 character
    distTx = DISTANCE_US_100_CMD_READ_DISTANCE;
   149f2:	4b23      	ldr	r3, [pc, #140]	; (14a80 <DistanceSensorGetDistance+0xb0>)
   149f4:	2255      	movs	r2, #85	; 0x55
   149f6:	701a      	strb	r2, [r3, #0]
    if (STATUS_OK != usart_write_buffer_job(&usart_instance_dist, (uint8_t *)&distTx, 1)) {
   149f8:	4921      	ldr	r1, [pc, #132]	; (14a80 <DistanceSensorGetDistance+0xb0>)
   149fa:	4b22      	ldr	r3, [pc, #136]	; (14a84 <DistanceSensorGetDistance+0xb4>)
   149fc:	2201      	movs	r2, #1
   149fe:	0018      	movs	r0, r3
   14a00:	4b21      	ldr	r3, [pc, #132]	; (14a88 <DistanceSensorGetDistance+0xb8>)
   14a02:	4798      	blx	r3
   14a04:	1e03      	subs	r3, r0, #0
   14a06:	d130      	bne.n	14a6a <DistanceSensorGetDistance+0x9a>
        goto exitf;
    }

    // 3. )Wait until the TX finished. TX should release the binary semaphore - so wait until semaphore
    if (xSemaphoreTake(sensorDistanceSemaphoreHandle, xMaxBlockTime) == pdTRUE) {
   14a08:	4b20      	ldr	r3, [pc, #128]	; (14a8c <DistanceSensorGetDistance+0xbc>)
   14a0a:	681b      	ldr	r3, [r3, #0]
   14a0c:	683a      	ldr	r2, [r7, #0]
   14a0e:	0011      	movs	r1, r2
   14a10:	0018      	movs	r0, r3
   14a12:	4b1f      	ldr	r3, [pc, #124]	; (14a90 <DistanceSensorGetDistance+0xc0>)
   14a14:	4798      	blx	r3
   14a16:	0003      	movs	r3, r0
   14a18:	2b01      	cmp	r3, #1
   14a1a:	d003      	beq.n	14a24 <DistanceSensorGetDistance+0x54>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */

    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   14a1c:	2303      	movs	r3, #3
   14a1e:	425b      	negs	r3, r3
   14a20:	60fb      	str	r3, [r7, #12]
        goto exitf;
   14a22:	e023      	b.n	14a6c <DistanceSensorGetDistance+0x9c>
    }

    // 4. Initiate an rx job - usart_read_buffer_job - to read two characters. Read into variable latestRxDistance
    usart_read_buffer_job(&usart_instance_dist, (uint8_t *)&latestRxDistance, 2);  // Kicks off constant reading of characters
   14a24:	491b      	ldr	r1, [pc, #108]	; (14a94 <DistanceSensorGetDistance+0xc4>)
   14a26:	4b17      	ldr	r3, [pc, #92]	; (14a84 <DistanceSensorGetDistance+0xb4>)
   14a28:	2202      	movs	r2, #2
   14a2a:	0018      	movs	r0, r3
   14a2c:	4b1a      	ldr	r3, [pc, #104]	; (14a98 <DistanceSensorGetDistance+0xc8>)
   14a2e:	4798      	blx	r3

    //---7. Wait for notification
    if (xSemaphoreTake(sensorDistanceSemaphoreHandle, xMaxBlockTime) == pdTRUE) {
   14a30:	4b16      	ldr	r3, [pc, #88]	; (14a8c <DistanceSensorGetDistance+0xbc>)
   14a32:	681b      	ldr	r3, [r3, #0]
   14a34:	683a      	ldr	r2, [r7, #0]
   14a36:	0011      	movs	r1, r2
   14a38:	0018      	movs	r0, r3
   14a3a:	4b15      	ldr	r3, [pc, #84]	; (14a90 <DistanceSensorGetDistance+0xc0>)
   14a3c:	4798      	blx	r3
   14a3e:	0003      	movs	r3, r0
   14a40:	2b01      	cmp	r3, #1
   14a42:	d10c      	bne.n	14a5e <DistanceSensorGetDistance+0x8e>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        *distance = (latestRxDistance[0] << 8) + latestRxDistance[1];
   14a44:	4b13      	ldr	r3, [pc, #76]	; (14a94 <DistanceSensorGetDistance+0xc4>)
   14a46:	781b      	ldrb	r3, [r3, #0]
   14a48:	b29b      	uxth	r3, r3
   14a4a:	021b      	lsls	r3, r3, #8
   14a4c:	b29a      	uxth	r2, r3
   14a4e:	4b11      	ldr	r3, [pc, #68]	; (14a94 <DistanceSensorGetDistance+0xc4>)
   14a50:	785b      	ldrb	r3, [r3, #1]
   14a52:	b29b      	uxth	r3, r3
   14a54:	18d3      	adds	r3, r2, r3
   14a56:	b29a      	uxth	r2, r3
   14a58:	687b      	ldr	r3, [r7, #4]
   14a5a:	801a      	strh	r2, [r3, #0]
   14a5c:	e006      	b.n	14a6c <DistanceSensorGetDistance+0x9c>
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   14a5e:	2303      	movs	r3, #3
   14a60:	425b      	negs	r3, r3
   14a62:	60fb      	str	r3, [r7, #12]
        goto exitf;
   14a64:	e002      	b.n	14a6c <DistanceSensorGetDistance+0x9c>
    if (ERROR_NONE != error) goto exitf;
   14a66:	46c0      	nop			; (mov r8, r8)
   14a68:	e000      	b.n	14a6c <DistanceSensorGetDistance+0x9c>
        goto exitf;
   14a6a:	46c0      	nop			; (mov r8, r8)
    }

exitf:
    // Release mutex and return error
    DistanceSensorFreeMutex();
   14a6c:	4b0b      	ldr	r3, [pc, #44]	; (14a9c <DistanceSensorGetDistance+0xcc>)
   14a6e:	4798      	blx	r3

    return error;
   14a70:	68fb      	ldr	r3, [r7, #12]
}
   14a72:	0018      	movs	r0, r3
   14a74:	46bd      	mov	sp, r7
   14a76:	b004      	add	sp, #16
   14a78:	bd80      	pop	{r7, pc}
   14a7a:	46c0      	nop			; (mov r8, r8)
   14a7c:	00014ad9 	.word	0x00014ad9
   14a80:	200047ea 	.word	0x200047ea
   14a84:	200047f4 	.word	0x200047f4
   14a88:	00029d59 	.word	0x00029d59
   14a8c:	200047ec 	.word	0x200047ec
   14a90:	0001c23d 	.word	0x0001c23d
   14a94:	200047e8 	.word	0x200047e8
   14a98:	00029da1 	.word	0x00029da1
   14a9c:	00014aa1 	.word	0x00014aa1

00014aa0 <DistanceSensorFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
static int32_t DistanceSensorFreeMutex(void)
{
   14aa0:	b590      	push	{r4, r7, lr}
   14aa2:	b083      	sub	sp, #12
   14aa4:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   14aa6:	2300      	movs	r3, #0
   14aa8:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorDistanceMutexHandle) != pdTRUE) {
   14aaa:	4b09      	ldr	r3, [pc, #36]	; (14ad0 <DistanceSensorFreeMutex+0x30>)
   14aac:	6818      	ldr	r0, [r3, #0]
   14aae:	2300      	movs	r3, #0
   14ab0:	2200      	movs	r2, #0
   14ab2:	2100      	movs	r1, #0
   14ab4:	4c07      	ldr	r4, [pc, #28]	; (14ad4 <DistanceSensorFreeMutex+0x34>)
   14ab6:	47a0      	blx	r4
   14ab8:	0003      	movs	r3, r0
   14aba:	2b01      	cmp	r3, #1
   14abc:	d002      	beq.n	14ac4 <DistanceSensorFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   14abe:	2314      	movs	r3, #20
   14ac0:	425b      	negs	r3, r3
   14ac2:	607b      	str	r3, [r7, #4]
    }
    return error;
   14ac4:	687b      	ldr	r3, [r7, #4]
}
   14ac6:	0018      	movs	r0, r3
   14ac8:	46bd      	mov	sp, r7
   14aca:	b003      	add	sp, #12
   14acc:	bd90      	pop	{r4, r7, pc}
   14ace:	46c0      	nop			; (mov r8, r8)
   14ad0:	200047f0 	.word	0x200047f0
   14ad4:	0001b52d 	.word	0x0001b52d

00014ad8 <DistanceSensorGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
static int32_t DistanceSensorGetMutex(TickType_t waitTime)
{
   14ad8:	b580      	push	{r7, lr}
   14ada:	b084      	sub	sp, #16
   14adc:	af00      	add	r7, sp, #0
   14ade:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14ae0:	2300      	movs	r3, #0
   14ae2:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorDistanceMutexHandle, waitTime) != pdTRUE) {
   14ae4:	4b08      	ldr	r3, [pc, #32]	; (14b08 <DistanceSensorGetMutex+0x30>)
   14ae6:	681b      	ldr	r3, [r3, #0]
   14ae8:	687a      	ldr	r2, [r7, #4]
   14aea:	0011      	movs	r1, r2
   14aec:	0018      	movs	r0, r3
   14aee:	4b07      	ldr	r3, [pc, #28]	; (14b0c <DistanceSensorGetMutex+0x34>)
   14af0:	4798      	blx	r3
   14af2:	0003      	movs	r3, r0
   14af4:	2b01      	cmp	r3, #1
   14af6:	d002      	beq.n	14afe <DistanceSensorGetMutex+0x26>
        error = ERROR_NOT_READY;
   14af8:	231d      	movs	r3, #29
   14afa:	425b      	negs	r3, r3
   14afc:	60fb      	str	r3, [r7, #12]
    }
    return error;
   14afe:	68fb      	ldr	r3, [r7, #12]
   14b00:	0018      	movs	r0, r3
   14b02:	46bd      	mov	sp, r7
   14b04:	b004      	add	sp, #16
   14b06:	bd80      	pop	{r7, pc}
   14b08:	200047f0 	.word	0x200047f0
   14b0c:	0001c23d 	.word	0x0001c23d

00014b10 <system_interrupt_enable>:
{
   14b10:	b580      	push	{r7, lr}
   14b12:	b082      	sub	sp, #8
   14b14:	af00      	add	r7, sp, #0
   14b16:	0002      	movs	r2, r0
   14b18:	1dfb      	adds	r3, r7, #7
   14b1a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   14b1c:	4b06      	ldr	r3, [pc, #24]	; (14b38 <system_interrupt_enable+0x28>)
   14b1e:	1dfa      	adds	r2, r7, #7
   14b20:	7812      	ldrb	r2, [r2, #0]
   14b22:	0011      	movs	r1, r2
   14b24:	221f      	movs	r2, #31
   14b26:	400a      	ands	r2, r1
   14b28:	2101      	movs	r1, #1
   14b2a:	4091      	lsls	r1, r2
   14b2c:	000a      	movs	r2, r1
   14b2e:	601a      	str	r2, [r3, #0]
}
   14b30:	46c0      	nop			; (mov r8, r8)
   14b32:	46bd      	mov	sp, r7
   14b34:	b002      	add	sp, #8
   14b36:	bd80      	pop	{r7, pc}
   14b38:	e000e100 	.word	0xe000e100

00014b3c <i2c_master_is_syncing>:
{
   14b3c:	b580      	push	{r7, lr}
   14b3e:	b084      	sub	sp, #16
   14b40:	af00      	add	r7, sp, #0
   14b42:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   14b44:	687b      	ldr	r3, [r7, #4]
   14b46:	681b      	ldr	r3, [r3, #0]
   14b48:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   14b4a:	68fb      	ldr	r3, [r7, #12]
   14b4c:	69db      	ldr	r3, [r3, #28]
   14b4e:	2207      	movs	r2, #7
   14b50:	4013      	ands	r3, r2
   14b52:	1e5a      	subs	r2, r3, #1
   14b54:	4193      	sbcs	r3, r2
   14b56:	b2db      	uxtb	r3, r3
}
   14b58:	0018      	movs	r0, r3
   14b5a:	46bd      	mov	sp, r7
   14b5c:	b004      	add	sp, #16
   14b5e:	bd80      	pop	{r7, pc}

00014b60 <_i2c_master_wait_for_sync>:
{
   14b60:	b580      	push	{r7, lr}
   14b62:	b082      	sub	sp, #8
   14b64:	af00      	add	r7, sp, #0
   14b66:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   14b68:	46c0      	nop			; (mov r8, r8)
   14b6a:	687b      	ldr	r3, [r7, #4]
   14b6c:	0018      	movs	r0, r3
   14b6e:	4b04      	ldr	r3, [pc, #16]	; (14b80 <_i2c_master_wait_for_sync+0x20>)
   14b70:	4798      	blx	r3
   14b72:	1e03      	subs	r3, r0, #0
   14b74:	d1f9      	bne.n	14b6a <_i2c_master_wait_for_sync+0xa>
}
   14b76:	46c0      	nop			; (mov r8, r8)
   14b78:	46bd      	mov	sp, r7
   14b7a:	b002      	add	sp, #8
   14b7c:	bd80      	pop	{r7, pc}
   14b7e:	46c0      	nop			; (mov r8, r8)
   14b80:	00014b3d 	.word	0x00014b3d

00014b84 <i2c_master_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration structure to be initiated
 */
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
   14b84:	b580      	push	{r7, lr}
   14b86:	b082      	sub	sp, #8
   14b88:	af00      	add	r7, sp, #0
   14b8a:	6078      	str	r0, [r7, #4]
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
   14b8c:	687b      	ldr	r3, [r7, #4]
   14b8e:	2264      	movs	r2, #100	; 0x64
   14b90:	601a      	str	r2, [r3, #0]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
   14b92:	687b      	ldr	r3, [r7, #4]
   14b94:	4a1b      	ldr	r2, [pc, #108]	; (14c04 <i2c_master_get_config_defaults+0x80>)
   14b96:	605a      	str	r2, [r3, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
   14b98:	687b      	ldr	r3, [r7, #4]
   14b9a:	2200      	movs	r2, #0
   14b9c:	609a      	str	r2, [r3, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
   14b9e:	687b      	ldr	r3, [r7, #4]
   14ba0:	2200      	movs	r2, #0
   14ba2:	731a      	strb	r2, [r3, #12]
	config->run_in_standby   = false;
   14ba4:	687b      	ldr	r3, [r7, #4]
   14ba6:	2200      	movs	r2, #0
   14ba8:	761a      	strb	r2, [r3, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
   14baa:	687b      	ldr	r3, [r7, #4]
   14bac:	2280      	movs	r2, #128	; 0x80
   14bae:	0392      	lsls	r2, r2, #14
   14bb0:	611a      	str	r2, [r3, #16]
	config->buffer_timeout   = 65535;
   14bb2:	687b      	ldr	r3, [r7, #4]
   14bb4:	2201      	movs	r2, #1
   14bb6:	4252      	negs	r2, r2
   14bb8:	82da      	strh	r2, [r3, #22]
	config->unknown_bus_state_timeout = 65535;
   14bba:	687b      	ldr	r3, [r7, #4]
   14bbc:	2201      	movs	r2, #1
   14bbe:	4252      	negs	r2, r2
   14bc0:	829a      	strh	r2, [r3, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   14bc2:	687b      	ldr	r3, [r7, #4]
   14bc4:	2200      	movs	r2, #0
   14bc6:	61da      	str	r2, [r3, #28]
	config->pinmux_pad1      = PINMUX_DEFAULT;
   14bc8:	687b      	ldr	r3, [r7, #4]
   14bca:	2200      	movs	r2, #0
   14bcc:	621a      	str	r2, [r3, #32]
	config->scl_low_timeout  = false;
   14bce:	687b      	ldr	r3, [r7, #4]
   14bd0:	2224      	movs	r2, #36	; 0x24
   14bd2:	2100      	movs	r1, #0
   14bd4:	5499      	strb	r1, [r3, r2]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
   14bd6:	687b      	ldr	r3, [r7, #4]
   14bd8:	2200      	movs	r2, #0
   14bda:	629a      	str	r2, [r3, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
   14bdc:	687b      	ldr	r3, [r7, #4]
   14bde:	222c      	movs	r2, #44	; 0x2c
   14be0:	2100      	movs	r1, #0
   14be2:	5499      	strb	r1, [r3, r2]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
   14be4:	687b      	ldr	r3, [r7, #4]
   14be6:	222d      	movs	r2, #45	; 0x2d
   14be8:	2100      	movs	r1, #0
   14bea:	5499      	strb	r1, [r3, r2]
	config->master_scl_low_extend_timeout  = false;
   14bec:	687b      	ldr	r3, [r7, #4]
   14bee:	222e      	movs	r2, #46	; 0x2e
   14bf0:	2100      	movs	r1, #0
   14bf2:	5499      	strb	r1, [r3, r2]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
   14bf4:	687b      	ldr	r3, [r7, #4]
   14bf6:	22d7      	movs	r2, #215	; 0xd7
   14bf8:	861a      	strh	r2, [r3, #48]	; 0x30
}
   14bfa:	46c0      	nop			; (mov r8, r8)
   14bfc:	46bd      	mov	sp, r7
   14bfe:	b002      	add	sp, #8
   14c00:	bd80      	pop	{r7, pc}
   14c02:	46c0      	nop			; (mov r8, r8)
   14c04:	00000d48 	.word	0x00000d48

00014c08 <i2c_master_enable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_enable(
		const struct i2c_master_module *const module)
{
   14c08:	b580      	push	{r7, lr}
   14c0a:	b084      	sub	sp, #16
   14c0c:	af00      	add	r7, sp, #0
   14c0e:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   14c10:	687b      	ldr	r3, [r7, #4]
   14c12:	681b      	ldr	r3, [r3, #0]
   14c14:	60bb      	str	r3, [r7, #8]

	/* Timeout counter used to force bus state */
	uint32_t timeout_counter = 0;
   14c16:	2300      	movs	r3, #0
   14c18:	60fb      	str	r3, [r7, #12]

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   14c1a:	687b      	ldr	r3, [r7, #4]
   14c1c:	0018      	movs	r0, r3
   14c1e:	4b14      	ldr	r3, [pc, #80]	; (14c70 <i2c_master_enable+0x68>)
   14c20:	4798      	blx	r3

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
   14c22:	68bb      	ldr	r3, [r7, #8]
   14c24:	681b      	ldr	r3, [r3, #0]
   14c26:	2202      	movs	r2, #2
   14c28:	431a      	orrs	r2, r3
   14c2a:	68bb      	ldr	r3, [r7, #8]
   14c2c:	601a      	str	r2, [r3, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   14c2e:	687b      	ldr	r3, [r7, #4]
   14c30:	681b      	ldr	r3, [r3, #0]
   14c32:	0018      	movs	r0, r3
   14c34:	4b0f      	ldr	r3, [pc, #60]	; (14c74 <i2c_master_enable+0x6c>)
   14c36:	4798      	blx	r3
   14c38:	0003      	movs	r3, r0
   14c3a:	0018      	movs	r0, r3
   14c3c:	4b0e      	ldr	r3, [pc, #56]	; (14c78 <i2c_master_enable+0x70>)
   14c3e:	4798      	blx	r3
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   14c40:	e00c      	b.n	14c5c <i2c_master_enable+0x54>
		timeout_counter++;
   14c42:	68fb      	ldr	r3, [r7, #12]
   14c44:	3301      	adds	r3, #1
   14c46:	60fb      	str	r3, [r7, #12]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
   14c48:	687b      	ldr	r3, [r7, #4]
   14c4a:	88db      	ldrh	r3, [r3, #6]
   14c4c:	001a      	movs	r2, r3
   14c4e:	68fb      	ldr	r3, [r7, #12]
   14c50:	429a      	cmp	r2, r3
   14c52:	d803      	bhi.n	14c5c <i2c_master_enable+0x54>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
   14c54:	68bb      	ldr	r3, [r7, #8]
   14c56:	2210      	movs	r2, #16
   14c58:	835a      	strh	r2, [r3, #26]
			/* Workaround #1 */
			return;
   14c5a:	e006      	b.n	14c6a <i2c_master_enable+0x62>
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
   14c5c:	68bb      	ldr	r3, [r7, #8]
   14c5e:	8b5b      	ldrh	r3, [r3, #26]
   14c60:	b29b      	uxth	r3, r3
   14c62:	001a      	movs	r2, r3
   14c64:	2310      	movs	r3, #16
   14c66:	4013      	ands	r3, r2
   14c68:	d0eb      	beq.n	14c42 <i2c_master_enable+0x3a>
		}
	}
}
   14c6a:	46bd      	mov	sp, r7
   14c6c:	b004      	add	sp, #16
   14c6e:	bd80      	pop	{r7, pc}
   14c70:	00014b61 	.word	0x00014b61
   14c74:	000284f9 	.word	0x000284f9
   14c78:	00014b11 	.word	0x00014b11

00014c7c <i2c_master_enable_callback>:
 * \param[in]     callback_type  Callback type to enable
 */
static inline void i2c_master_enable_callback(
		struct i2c_master_module *const module,
		enum i2c_master_callback callback_type)
{
   14c7c:	b580      	push	{r7, lr}
   14c7e:	b082      	sub	sp, #8
   14c80:	af00      	add	r7, sp, #0
   14c82:	6078      	str	r0, [r7, #4]
   14c84:	000a      	movs	r2, r1
   14c86:	1cfb      	adds	r3, r7, #3
   14c88:	701a      	strb	r2, [r3, #0]
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
   14c8a:	687b      	ldr	r3, [r7, #4]
   14c8c:	7e5b      	ldrb	r3, [r3, #25]
   14c8e:	b2db      	uxtb	r3, r3
   14c90:	b25a      	sxtb	r2, r3
   14c92:	1cfb      	adds	r3, r7, #3
   14c94:	781b      	ldrb	r3, [r3, #0]
   14c96:	2101      	movs	r1, #1
   14c98:	4099      	lsls	r1, r3
   14c9a:	000b      	movs	r3, r1
   14c9c:	b25b      	sxtb	r3, r3
   14c9e:	4313      	orrs	r3, r2
   14ca0:	b25b      	sxtb	r3, r3
   14ca2:	b2da      	uxtb	r2, r3
   14ca4:	687b      	ldr	r3, [r7, #4]
   14ca6:	765a      	strb	r2, [r3, #25]
}
   14ca8:	46c0      	nop			; (mov r8, r8)
   14caa:	46bd      	mov	sp, r7
   14cac:	b002      	add	sp, #8
   14cae:	bd80      	pop	{r7, pc}

00014cb0 <I2cDriverConfigureSensorBus>:
struct i2c_master_packet sensorPacketWrite;
/******************************************************************************
 * Forward Declarations
 ******************************************************************************/
static int32_t I2cDriverConfigureSensorBus(void)
{
   14cb0:	b590      	push	{r4, r7, lr}
   14cb2:	b091      	sub	sp, #68	; 0x44
   14cb4:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   14cb6:	2300      	movs	r3, #0
   14cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
    status_code_genare_t errCodeAsf = STATUS_OK;
   14cba:	233a      	movs	r3, #58	; 0x3a
   14cbc:	18fb      	adds	r3, r7, r3
   14cbe:	2200      	movs	r2, #0
   14cc0:	701a      	strb	r2, [r3, #0]
    /* Initialize config structure and software module */
    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
   14cc2:	1d3b      	adds	r3, r7, #4
   14cc4:	0018      	movs	r0, r3
   14cc6:	4b21      	ldr	r3, [pc, #132]	; (14d4c <I2cDriverConfigureSensorBus+0x9c>)
   14cc8:	4798      	blx	r3

    config_i2c_master.pinmux_pad0 = PINMUX_PA08C_SERCOM0_PAD0;
   14cca:	1d3b      	adds	r3, r7, #4
   14ccc:	4a20      	ldr	r2, [pc, #128]	; (14d50 <I2cDriverConfigureSensorBus+0xa0>)
   14cce:	61da      	str	r2, [r3, #28]
    config_i2c_master.pinmux_pad1 = PINMUX_PA09C_SERCOM0_PAD1;
   14cd0:	1d3b      	adds	r3, r7, #4
   14cd2:	4a20      	ldr	r2, [pc, #128]	; (14d54 <I2cDriverConfigureSensorBus+0xa4>)
   14cd4:	621a      	str	r2, [r3, #32]
    /* Change buffer timeout to something longer */
    config_i2c_master.buffer_timeout = 1000;
   14cd6:	1d3b      	adds	r3, r7, #4
   14cd8:	22fa      	movs	r2, #250	; 0xfa
   14cda:	0092      	lsls	r2, r2, #2
   14cdc:	82da      	strh	r2, [r3, #22]
    /* Initialize and enable device with config. Try three times to initialize */

    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   14cde:	233b      	movs	r3, #59	; 0x3b
   14ce0:	18fb      	adds	r3, r7, r3
   14ce2:	2203      	movs	r2, #3
   14ce4:	701a      	strb	r2, [r3, #0]
   14ce6:	e01e      	b.n	14d26 <I2cDriverConfigureSensorBus+0x76>
        errCodeAsf = i2c_master_init(&i2cSensorBusInstance, SERCOM0, &config_i2c_master);
   14ce8:	233a      	movs	r3, #58	; 0x3a
   14cea:	18fc      	adds	r4, r7, r3
   14cec:	1d3a      	adds	r2, r7, #4
   14cee:	491a      	ldr	r1, [pc, #104]	; (14d58 <I2cDriverConfigureSensorBus+0xa8>)
   14cf0:	4b1a      	ldr	r3, [pc, #104]	; (14d5c <I2cDriverConfigureSensorBus+0xac>)
   14cf2:	0018      	movs	r0, r3
   14cf4:	4b1a      	ldr	r3, [pc, #104]	; (14d60 <I2cDriverConfigureSensorBus+0xb0>)
   14cf6:	4798      	blx	r3
   14cf8:	0003      	movs	r3, r0
   14cfa:	7023      	strb	r3, [r4, #0]
        if (STATUS_OK == errCodeAsf) {
   14cfc:	233a      	movs	r3, #58	; 0x3a
   14cfe:	18fb      	adds	r3, r7, r3
   14d00:	781b      	ldrb	r3, [r3, #0]
   14d02:	2b00      	cmp	r3, #0
   14d04:	d104      	bne.n	14d10 <I2cDriverConfigureSensorBus+0x60>
            error = errCodeAsf;
   14d06:	233a      	movs	r3, #58	; 0x3a
   14d08:	18fb      	adds	r3, r7, r3
   14d0a:	781b      	ldrb	r3, [r3, #0]
   14d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
            break;
   14d0e:	e00f      	b.n	14d30 <I2cDriverConfigureSensorBus+0x80>
        } else {
            i2c_master_reset(&i2cSensorBusInstance);
   14d10:	4b12      	ldr	r3, [pc, #72]	; (14d5c <I2cDriverConfigureSensorBus+0xac>)
   14d12:	0018      	movs	r0, r3
   14d14:	4b13      	ldr	r3, [pc, #76]	; (14d64 <I2cDriverConfigureSensorBus+0xb4>)
   14d16:	4798      	blx	r3
    for (uint8_t i = I2C_INIT_ATTEMPTS; i != 0; i--) {
   14d18:	233b      	movs	r3, #59	; 0x3b
   14d1a:	18fb      	adds	r3, r7, r3
   14d1c:	781a      	ldrb	r2, [r3, #0]
   14d1e:	233b      	movs	r3, #59	; 0x3b
   14d20:	18fb      	adds	r3, r7, r3
   14d22:	3a01      	subs	r2, #1
   14d24:	701a      	strb	r2, [r3, #0]
   14d26:	233b      	movs	r3, #59	; 0x3b
   14d28:	18fb      	adds	r3, r7, r3
   14d2a:	781b      	ldrb	r3, [r3, #0]
   14d2c:	2b00      	cmp	r3, #0
   14d2e:	d1db      	bne.n	14ce8 <I2cDriverConfigureSensorBus+0x38>
        }
    }

    if (STATUS_OK != error) goto exit;
   14d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   14d32:	2b00      	cmp	r3, #0
   14d34:	d104      	bne.n	14d40 <I2cDriverConfigureSensorBus+0x90>

    i2c_master_enable(&i2cSensorBusInstance);
   14d36:	4b09      	ldr	r3, [pc, #36]	; (14d5c <I2cDriverConfigureSensorBus+0xac>)
   14d38:	0018      	movs	r0, r3
   14d3a:	4b0b      	ldr	r3, [pc, #44]	; (14d68 <I2cDriverConfigureSensorBus+0xb8>)
   14d3c:	4798      	blx	r3
   14d3e:	e000      	b.n	14d42 <I2cDriverConfigureSensorBus+0x92>
    if (STATUS_OK != error) goto exit;
   14d40:	46c0      	nop			; (mov r8, r8)

exit:
    return error;
   14d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
   14d44:	0018      	movs	r0, r3
   14d46:	46bd      	mov	sp, r7
   14d48:	b011      	add	sp, #68	; 0x44
   14d4a:	bd90      	pop	{r4, r7, pc}
   14d4c:	00014b85 	.word	0x00014b85
   14d50:	00080002 	.word	0x00080002
   14d54:	00090002 	.word	0x00090002
   14d58:	42000800 	.word	0x42000800
   14d5c:	2000482c 	.word	0x2000482c
   14d60:	00018921 	.word	0x00018921
   14d64:	00018a55 	.word	0x00018a55
   14d68:	00014c09 	.word	0x00014c09

00014d6c <I2cSensorsTxComplete>:
  * @param[in]   i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return      This function is a callback, and it is registered as such when we send an I2C transmission on this I2C bus.
  * @note
  */
void I2cSensorsTxComplete(struct i2c_master_module *const module)
{
   14d6c:	b580      	push	{r7, lr}
   14d6e:	b084      	sub	sp, #16
   14d70:	af00      	add	r7, sp, #0
   14d72:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   14d74:	4b0e      	ldr	r3, [pc, #56]	; (14db0 <I2cSensorsTxComplete+0x44>)
   14d76:	2200      	movs	r2, #0
   14d78:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   14d7a:	4b0d      	ldr	r3, [pc, #52]	; (14db0 <I2cSensorsTxComplete+0x44>)
   14d7c:	2201      	movs	r2, #1
   14d7e:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   14d80:	2300      	movs	r3, #0
   14d82:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   14d84:	4b0b      	ldr	r3, [pc, #44]	; (14db4 <I2cSensorsTxComplete+0x48>)
   14d86:	681b      	ldr	r3, [r3, #0]
   14d88:	220c      	movs	r2, #12
   14d8a:	18ba      	adds	r2, r7, r2
   14d8c:	0011      	movs	r1, r2
   14d8e:	0018      	movs	r0, r3
   14d90:	4b09      	ldr	r3, [pc, #36]	; (14db8 <I2cSensorsTxComplete+0x4c>)
   14d92:	4798      	blx	r3
    sensorTransmitError = false;
   14d94:	4b09      	ldr	r3, [pc, #36]	; (14dbc <I2cSensorsTxComplete+0x50>)
   14d96:	2200      	movs	r2, #0
   14d98:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   14d9a:	68fb      	ldr	r3, [r7, #12]
   14d9c:	2b00      	cmp	r3, #0
   14d9e:	d003      	beq.n	14da8 <I2cSensorsTxComplete+0x3c>
   14da0:	4b07      	ldr	r3, [pc, #28]	; (14dc0 <I2cSensorsTxComplete+0x54>)
   14da2:	2280      	movs	r2, #128	; 0x80
   14da4:	0552      	lsls	r2, r2, #21
   14da6:	601a      	str	r2, [r3, #0]
}
   14da8:	46c0      	nop			; (mov r8, r8)
   14daa:	46bd      	mov	sp, r7
   14dac:	b004      	add	sp, #16
   14dae:	bd80      	pop	{r7, pc}
   14db0:	2000060c 	.word	0x2000060c
   14db4:	20004854 	.word	0x20004854
   14db8:	0001bbb5 	.word	0x0001bbb5
   14dbc:	20000608 	.word	0x20000608
   14dc0:	e000ed04 	.word	0xe000ed04

00014dc4 <I2cSensorsRxComplete>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsRxComplete(struct i2c_master_module *const module)
{
   14dc4:	b580      	push	{r7, lr}
   14dc6:	b084      	sub	sp, #16
   14dc8:	af00      	add	r7, sp, #0
   14dca:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   14dcc:	4b0e      	ldr	r3, [pc, #56]	; (14e08 <I2cSensorsRxComplete+0x44>)
   14dce:	2200      	movs	r2, #0
   14dd0:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.rxDoneFlag = true;
   14dd2:	4b0d      	ldr	r3, [pc, #52]	; (14e08 <I2cSensorsRxComplete+0x44>)
   14dd4:	2201      	movs	r2, #1
   14dd6:	609a      	str	r2, [r3, #8]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   14dd8:	2300      	movs	r3, #0
   14dda:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   14ddc:	4b0b      	ldr	r3, [pc, #44]	; (14e0c <I2cSensorsRxComplete+0x48>)
   14dde:	681b      	ldr	r3, [r3, #0]
   14de0:	220c      	movs	r2, #12
   14de2:	18ba      	adds	r2, r7, r2
   14de4:	0011      	movs	r1, r2
   14de6:	0018      	movs	r0, r3
   14de8:	4b09      	ldr	r3, [pc, #36]	; (14e10 <I2cSensorsRxComplete+0x4c>)
   14dea:	4798      	blx	r3
    sensorTransmitError = false;
   14dec:	4b09      	ldr	r3, [pc, #36]	; (14e14 <I2cSensorsRxComplete+0x50>)
   14dee:	2200      	movs	r2, #0
   14df0:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   14df2:	68fb      	ldr	r3, [r7, #12]
   14df4:	2b00      	cmp	r3, #0
   14df6:	d003      	beq.n	14e00 <I2cSensorsRxComplete+0x3c>
   14df8:	4b07      	ldr	r3, [pc, #28]	; (14e18 <I2cSensorsRxComplete+0x54>)
   14dfa:	2280      	movs	r2, #128	; 0x80
   14dfc:	0552      	lsls	r2, r2, #21
   14dfe:	601a      	str	r2, [r3, #0]
}
   14e00:	46c0      	nop			; (mov r8, r8)
   14e02:	46bd      	mov	sp, r7
   14e04:	b004      	add	sp, #16
   14e06:	bd80      	pop	{r7, pc}
   14e08:	2000060c 	.word	0x2000060c
   14e0c:	20004854 	.word	0x20004854
   14e10:	0001bbb5 	.word	0x0001bbb5
   14e14:	20000608 	.word	0x20000608
   14e18:	e000ed04 	.word	0xe000ed04

00014e1c <I2cSensorsError>:
  * @param[in]		i2c Pointer to I2C structure used inside the Atmel ASFv3  framework
  * @return			This function is a callback, and it is registered as such when we send an I2C reception on this I2C bus.
  * @note
  */
void I2cSensorsError(struct i2c_master_module *const module)
{
   14e1c:	b580      	push	{r7, lr}
   14e1e:	b084      	sub	sp, #16
   14e20:	af00      	add	r7, sp, #0
   14e22:	6078      	str	r0, [r7, #4]
    I2cSensorBusState.i2cState = I2C_BUS_READY;
   14e24:	4b0e      	ldr	r3, [pc, #56]	; (14e60 <I2cSensorsError+0x44>)
   14e26:	2200      	movs	r2, #0
   14e28:	701a      	strb	r2, [r3, #0]
    I2cSensorBusState.txDoneFlag = true;
   14e2a:	4b0d      	ldr	r3, [pc, #52]	; (14e60 <I2cSensorsError+0x44>)
   14e2c:	2201      	movs	r2, #1
   14e2e:	605a      	str	r2, [r3, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
   14e30:	2300      	movs	r3, #0
   14e32:	60fb      	str	r3, [r7, #12]

    xSemaphoreGiveFromISR(sensorI2cSemaphoreHandle, &xHigherPriorityTaskWoken);
   14e34:	4b0b      	ldr	r3, [pc, #44]	; (14e64 <I2cSensorsError+0x48>)
   14e36:	681b      	ldr	r3, [r3, #0]
   14e38:	220c      	movs	r2, #12
   14e3a:	18ba      	adds	r2, r7, r2
   14e3c:	0011      	movs	r1, r2
   14e3e:	0018      	movs	r0, r3
   14e40:	4b09      	ldr	r3, [pc, #36]	; (14e68 <I2cSensorsError+0x4c>)
   14e42:	4798      	blx	r3
    sensorTransmitError = true;
   14e44:	4b09      	ldr	r3, [pc, #36]	; (14e6c <I2cSensorsError+0x50>)
   14e46:	2201      	movs	r2, #1
   14e48:	701a      	strb	r2, [r3, #0]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
   14e4a:	68fb      	ldr	r3, [r7, #12]
   14e4c:	2b00      	cmp	r3, #0
   14e4e:	d003      	beq.n	14e58 <I2cSensorsError+0x3c>
   14e50:	4b07      	ldr	r3, [pc, #28]	; (14e70 <I2cSensorsError+0x54>)
   14e52:	2280      	movs	r2, #128	; 0x80
   14e54:	0552      	lsls	r2, r2, #21
   14e56:	601a      	str	r2, [r3, #0]
}
   14e58:	46c0      	nop			; (mov r8, r8)
   14e5a:	46bd      	mov	sp, r7
   14e5c:	b004      	add	sp, #16
   14e5e:	bd80      	pop	{r7, pc}
   14e60:	2000060c 	.word	0x2000060c
   14e64:	20004854 	.word	0x20004854
   14e68:	0001bbb5 	.word	0x0001bbb5
   14e6c:	20000608 	.word	0x20000608
   14e70:	e000ed04 	.word	0xe000ed04

00014e74 <I2cDriverRegisterSensorBusCallbacks>:

void I2cDriverRegisterSensorBusCallbacks(void)
{
   14e74:	b580      	push	{r7, lr}
   14e76:	af00      	add	r7, sp, #0
    /* Register callback function. */
    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsTxComplete, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   14e78:	4911      	ldr	r1, [pc, #68]	; (14ec0 <I2cDriverRegisterSensorBusCallbacks+0x4c>)
   14e7a:	4b12      	ldr	r3, [pc, #72]	; (14ec4 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14e7c:	2200      	movs	r2, #0
   14e7e:	0018      	movs	r0, r3
   14e80:	4b11      	ldr	r3, [pc, #68]	; (14ec8 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   14e82:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_WRITE_COMPLETE);
   14e84:	4b0f      	ldr	r3, [pc, #60]	; (14ec4 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14e86:	2100      	movs	r1, #0
   14e88:	0018      	movs	r0, r3
   14e8a:	4b10      	ldr	r3, [pc, #64]	; (14ecc <I2cDriverRegisterSensorBusCallbacks+0x58>)
   14e8c:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsRxComplete, I2C_MASTER_CALLBACK_READ_COMPLETE);
   14e8e:	4910      	ldr	r1, [pc, #64]	; (14ed0 <I2cDriverRegisterSensorBusCallbacks+0x5c>)
   14e90:	4b0c      	ldr	r3, [pc, #48]	; (14ec4 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14e92:	2201      	movs	r2, #1
   14e94:	0018      	movs	r0, r3
   14e96:	4b0c      	ldr	r3, [pc, #48]	; (14ec8 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   14e98:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_READ_COMPLETE);
   14e9a:	4b0a      	ldr	r3, [pc, #40]	; (14ec4 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14e9c:	2101      	movs	r1, #1
   14e9e:	0018      	movs	r0, r3
   14ea0:	4b0a      	ldr	r3, [pc, #40]	; (14ecc <I2cDriverRegisterSensorBusCallbacks+0x58>)
   14ea2:	4798      	blx	r3

    i2c_master_register_callback(&i2cSensorBusInstance, I2cSensorsError, I2C_MASTER_CALLBACK_ERROR);
   14ea4:	490b      	ldr	r1, [pc, #44]	; (14ed4 <I2cDriverRegisterSensorBusCallbacks+0x60>)
   14ea6:	4b07      	ldr	r3, [pc, #28]	; (14ec4 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14ea8:	2202      	movs	r2, #2
   14eaa:	0018      	movs	r0, r3
   14eac:	4b06      	ldr	r3, [pc, #24]	; (14ec8 <I2cDriverRegisterSensorBusCallbacks+0x54>)
   14eae:	4798      	blx	r3
    i2c_master_enable_callback(&i2cSensorBusInstance, I2C_MASTER_CALLBACK_ERROR);
   14eb0:	4b04      	ldr	r3, [pc, #16]	; (14ec4 <I2cDriverRegisterSensorBusCallbacks+0x50>)
   14eb2:	2102      	movs	r1, #2
   14eb4:	0018      	movs	r0, r3
   14eb6:	4b05      	ldr	r3, [pc, #20]	; (14ecc <I2cDriverRegisterSensorBusCallbacks+0x58>)
   14eb8:	4798      	blx	r3
}
   14eba:	46c0      	nop			; (mov r8, r8)
   14ebc:	46bd      	mov	sp, r7
   14ebe:	bd80      	pop	{r7, pc}
   14ec0:	00014d6d 	.word	0x00014d6d
   14ec4:	2000482c 	.word	0x2000482c
   14ec8:	00013a09 	.word	0x00013a09
   14ecc:	00014c7d 	.word	0x00014c7d
   14ed0:	00014dc5 	.word	0x00014dc5
   14ed4:	00014e1d 	.word	0x00014e1d

00014ed8 <I2cInitializeDriver>:
 * @brief       Function call to initialize the I2C driver\
 * @details     This function must be called from an RTOS thread if using RTOS, and must be called before any I2C call
 * @note
 */
int32_t I2cInitializeDriver(void)
{
   14ed8:	b580      	push	{r7, lr}
   14eda:	b082      	sub	sp, #8
   14edc:	af00      	add	r7, sp, #0
    int32_t error = STATUS_OK;
   14ede:	2300      	movs	r3, #0
   14ee0:	607b      	str	r3, [r7, #4]

    error = I2cDriverConfigureSensorBus();
   14ee2:	4b14      	ldr	r3, [pc, #80]	; (14f34 <I2cInitializeDriver+0x5c>)
   14ee4:	4798      	blx	r3
   14ee6:	0003      	movs	r3, r0
   14ee8:	607b      	str	r3, [r7, #4]
    if (STATUS_OK != error) goto exit;
   14eea:	687b      	ldr	r3, [r7, #4]
   14eec:	2b00      	cmp	r3, #0
   14eee:	d11a      	bne.n	14f26 <I2cInitializeDriver+0x4e>

    I2cDriverRegisterSensorBusCallbacks();
   14ef0:	4b11      	ldr	r3, [pc, #68]	; (14f38 <I2cInitializeDriver+0x60>)
   14ef2:	4798      	blx	r3

    sensorI2cMutexHandle = xSemaphoreCreateMutex();
   14ef4:	2001      	movs	r0, #1
   14ef6:	4b11      	ldr	r3, [pc, #68]	; (14f3c <I2cInitializeDriver+0x64>)
   14ef8:	4798      	blx	r3
   14efa:	0002      	movs	r2, r0
   14efc:	4b10      	ldr	r3, [pc, #64]	; (14f40 <I2cInitializeDriver+0x68>)
   14efe:	601a      	str	r2, [r3, #0]

    sensorI2cSemaphoreHandle = xSemaphoreCreateBinary();
   14f00:	2203      	movs	r2, #3
   14f02:	2100      	movs	r1, #0
   14f04:	2001      	movs	r0, #1
   14f06:	4b0f      	ldr	r3, [pc, #60]	; (14f44 <I2cInitializeDriver+0x6c>)
   14f08:	4798      	blx	r3
   14f0a:	0002      	movs	r2, r0
   14f0c:	4b0e      	ldr	r3, [pc, #56]	; (14f48 <I2cInitializeDriver+0x70>)
   14f0e:	601a      	str	r2, [r3, #0]
    // xSemaphoreGive(sensorI2cSemaphoreHandle);

    if (NULL == sensorI2cMutexHandle || NULL == sensorI2cSemaphoreHandle) {
   14f10:	4b0b      	ldr	r3, [pc, #44]	; (14f40 <I2cInitializeDriver+0x68>)
   14f12:	681b      	ldr	r3, [r3, #0]
   14f14:	2b00      	cmp	r3, #0
   14f16:	d003      	beq.n	14f20 <I2cInitializeDriver+0x48>
   14f18:	4b0b      	ldr	r3, [pc, #44]	; (14f48 <I2cInitializeDriver+0x70>)
   14f1a:	681b      	ldr	r3, [r3, #0]
   14f1c:	2b00      	cmp	r3, #0
   14f1e:	d103      	bne.n	14f28 <I2cInitializeDriver+0x50>
        error = STATUS_SUSPEND;  // Could not initialize mutex!
   14f20:	2306      	movs	r3, #6
   14f22:	607b      	str	r3, [r7, #4]
        goto exit;
   14f24:	e000      	b.n	14f28 <I2cInitializeDriver+0x50>
    if (STATUS_OK != error) goto exit;
   14f26:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   14f28:	687b      	ldr	r3, [r7, #4]
}
   14f2a:	0018      	movs	r0, r3
   14f2c:	46bd      	mov	sp, r7
   14f2e:	b002      	add	sp, #8
   14f30:	bd80      	pop	{r7, pc}
   14f32:	46c0      	nop			; (mov r8, r8)
   14f34:	00014cb1 	.word	0x00014cb1
   14f38:	00014e75 	.word	0x00014e75
   14f3c:	0001b4ed 	.word	0x0001b4ed
   14f40:	20004828 	.word	0x20004828
   14f44:	0001b285 	.word	0x0001b285
   14f48:	20004854 	.word	0x20004854

00014f4c <I2cWriteData>:
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */

int32_t I2cWriteData(I2C_Data *data)
{
   14f4c:	b590      	push	{r4, r7, lr}
   14f4e:	b085      	sub	sp, #20
   14f50:	af00      	add	r7, sp, #0
   14f52:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14f54:	2300      	movs	r3, #0
   14f56:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   14f58:	687b      	ldr	r3, [r7, #4]
   14f5a:	2b00      	cmp	r3, #0
   14f5c:	d003      	beq.n	14f66 <I2cWriteData+0x1a>
   14f5e:	687b      	ldr	r3, [r7, #4]
   14f60:	685b      	ldr	r3, [r3, #4]
   14f62:	2b00      	cmp	r3, #0
   14f64:	d103      	bne.n	14f6e <I2cWriteData+0x22>
        error = ERR_INVALID_ARG;
   14f66:	2308      	movs	r3, #8
   14f68:	425b      	negs	r3, r3
   14f6a:	60fb      	str	r3, [r7, #12]
        goto exit;
   14f6c:	e01f      	b.n	14fae <I2cWriteData+0x62>
    }

    // Prepare to write
    sensorPacketWrite.address = data->address;
   14f6e:	687b      	ldr	r3, [r7, #4]
   14f70:	781b      	ldrb	r3, [r3, #0]
   14f72:	b29a      	uxth	r2, r3
   14f74:	4b10      	ldr	r3, [pc, #64]	; (14fb8 <I2cWriteData+0x6c>)
   14f76:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = (uint8_t *)data->msgOut;
   14f78:	687b      	ldr	r3, [r7, #4]
   14f7a:	685a      	ldr	r2, [r3, #4]
   14f7c:	4b0e      	ldr	r3, [pc, #56]	; (14fb8 <I2cWriteData+0x6c>)
   14f7e:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenOut;
   14f80:	687b      	ldr	r3, [r7, #4]
   14f82:	89da      	ldrh	r2, [r3, #14]
   14f84:	4b0c      	ldr	r3, [pc, #48]	; (14fb8 <I2cWriteData+0x6c>)
   14f86:	805a      	strh	r2, [r3, #2]

    // Write

    hwError = i2c_master_write_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   14f88:	230b      	movs	r3, #11
   14f8a:	18fc      	adds	r4, r7, r3
   14f8c:	4a0a      	ldr	r2, [pc, #40]	; (14fb8 <I2cWriteData+0x6c>)
   14f8e:	4b0b      	ldr	r3, [pc, #44]	; (14fbc <I2cWriteData+0x70>)
   14f90:	0011      	movs	r1, r2
   14f92:	0018      	movs	r0, r3
   14f94:	4b0a      	ldr	r3, [pc, #40]	; (14fc0 <I2cWriteData+0x74>)
   14f96:	4798      	blx	r3
   14f98:	0003      	movs	r3, r0
   14f9a:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   14f9c:	230b      	movs	r3, #11
   14f9e:	18fb      	adds	r3, r7, r3
   14fa0:	781b      	ldrb	r3, [r3, #0]
   14fa2:	2b00      	cmp	r3, #0
   14fa4:	d003      	beq.n	14fae <I2cWriteData+0x62>
        error = ERROR_IO;
   14fa6:	2306      	movs	r3, #6
   14fa8:	425b      	negs	r3, r3
   14faa:	60fb      	str	r3, [r7, #12]
        goto exit;
   14fac:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   14fae:	68fb      	ldr	r3, [r7, #12]
}
   14fb0:	0018      	movs	r0, r3
   14fb2:	46bd      	mov	sp, r7
   14fb4:	b005      	add	sp, #20
   14fb6:	bd90      	pop	{r4, r7, pc}
   14fb8:	20004858 	.word	0x20004858
   14fbc:	2000482c 	.word	0x2000482c
   14fc0:	00013c8d 	.word	0x00013c8d

00014fc4 <I2cReadData>:
 * @param[in]   data Pointer to I2C data structure which has all the information needed to send an I2C message
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
int32_t I2cReadData(I2C_Data *data)
{
   14fc4:	b590      	push	{r4, r7, lr}
   14fc6:	b085      	sub	sp, #20
   14fc8:	af00      	add	r7, sp, #0
   14fca:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   14fcc:	2300      	movs	r3, #0
   14fce:	60fb      	str	r3, [r7, #12]
    enum status_code hwError;

    // Check parameters
    if (data == NULL || data->msgOut == NULL) {
   14fd0:	687b      	ldr	r3, [r7, #4]
   14fd2:	2b00      	cmp	r3, #0
   14fd4:	d003      	beq.n	14fde <I2cReadData+0x1a>
   14fd6:	687b      	ldr	r3, [r7, #4]
   14fd8:	685b      	ldr	r3, [r3, #4]
   14fda:	2b00      	cmp	r3, #0
   14fdc:	d103      	bne.n	14fe6 <I2cReadData+0x22>
        error = ERR_INVALID_ARG;
   14fde:	2308      	movs	r3, #8
   14fe0:	425b      	negs	r3, r3
   14fe2:	60fb      	str	r3, [r7, #12]
        goto exit;
   14fe4:	e01f      	b.n	15026 <I2cReadData+0x62>
    }

    // Prepare to read
    sensorPacketWrite.address = data->address;
   14fe6:	687b      	ldr	r3, [r7, #4]
   14fe8:	781b      	ldrb	r3, [r3, #0]
   14fea:	b29a      	uxth	r2, r3
   14fec:	4b10      	ldr	r3, [pc, #64]	; (15030 <I2cReadData+0x6c>)
   14fee:	801a      	strh	r2, [r3, #0]
    sensorPacketWrite.data = data->msgIn;
   14ff0:	687b      	ldr	r3, [r7, #4]
   14ff2:	689a      	ldr	r2, [r3, #8]
   14ff4:	4b0e      	ldr	r3, [pc, #56]	; (15030 <I2cReadData+0x6c>)
   14ff6:	605a      	str	r2, [r3, #4]
    sensorPacketWrite.data_length = data->lenIn;
   14ff8:	687b      	ldr	r3, [r7, #4]
   14ffa:	899a      	ldrh	r2, [r3, #12]
   14ffc:	4b0c      	ldr	r3, [pc, #48]	; (15030 <I2cReadData+0x6c>)
   14ffe:	805a      	strh	r2, [r3, #2]

    // Read

    hwError = i2c_master_read_packet_job(&i2cSensorBusInstance, &sensorPacketWrite);
   15000:	230b      	movs	r3, #11
   15002:	18fc      	adds	r4, r7, r3
   15004:	4a0a      	ldr	r2, [pc, #40]	; (15030 <I2cReadData+0x6c>)
   15006:	4b0b      	ldr	r3, [pc, #44]	; (15034 <I2cReadData+0x70>)
   15008:	0011      	movs	r1, r2
   1500a:	0018      	movs	r0, r3
   1500c:	4b0a      	ldr	r3, [pc, #40]	; (15038 <I2cReadData+0x74>)
   1500e:	4798      	blx	r3
   15010:	0003      	movs	r3, r0
   15012:	7023      	strb	r3, [r4, #0]

    if (STATUS_OK != hwError) {
   15014:	230b      	movs	r3, #11
   15016:	18fb      	adds	r3, r7, r3
   15018:	781b      	ldrb	r3, [r3, #0]
   1501a:	2b00      	cmp	r3, #0
   1501c:	d003      	beq.n	15026 <I2cReadData+0x62>
        error = ERROR_IO;
   1501e:	2306      	movs	r3, #6
   15020:	425b      	negs	r3, r3
   15022:	60fb      	str	r3, [r7, #12]
        goto exit;
   15024:	46c0      	nop			; (mov r8, r8)
    }

exit:
    return error;
   15026:	68fb      	ldr	r3, [r7, #12]
}
   15028:	0018      	movs	r0, r3
   1502a:	46bd      	mov	sp, r7
   1502c:	b005      	add	sp, #20
   1502e:	bd90      	pop	{r4, r7, pc}
   15030:	20004858 	.word	0x20004858
   15034:	2000482c 	.word	0x2000482c
   15038:	00013ba9 	.word	0x00013ba9

0001503c <I2cFreeMutex>:
 * @param[in]   bus Enum that represents the bus in which we are interested to free the mutex of.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cFreeMutex(void)
{
   1503c:	b590      	push	{r4, r7, lr}
   1503e:	b083      	sub	sp, #12
   15040:	af00      	add	r7, sp, #0
    int32_t error = ERROR_NONE;
   15042:	2300      	movs	r3, #0
   15044:	607b      	str	r3, [r7, #4]

    if (xSemaphoreGive(sensorI2cMutexHandle) != pdTRUE) {
   15046:	4b09      	ldr	r3, [pc, #36]	; (1506c <I2cFreeMutex+0x30>)
   15048:	6818      	ldr	r0, [r3, #0]
   1504a:	2300      	movs	r3, #0
   1504c:	2200      	movs	r2, #0
   1504e:	2100      	movs	r1, #0
   15050:	4c07      	ldr	r4, [pc, #28]	; (15070 <I2cFreeMutex+0x34>)
   15052:	47a0      	blx	r4
   15054:	0003      	movs	r3, r0
   15056:	2b01      	cmp	r3, #1
   15058:	d002      	beq.n	15060 <I2cFreeMutex+0x24>
        error = ERROR_NOT_INITIALIZED;  // We could not return the mutex! We must not have it!
   1505a:	2314      	movs	r3, #20
   1505c:	425b      	negs	r3, r3
   1505e:	607b      	str	r3, [r7, #4]
    }
    return error;
   15060:	687b      	ldr	r3, [r7, #4]
}
   15062:	0018      	movs	r0, r3
   15064:	46bd      	mov	sp, r7
   15066:	b003      	add	sp, #12
   15068:	bd90      	pop	{r4, r7, pc}
   1506a:	46c0      	nop			; (mov r8, r8)
   1506c:	20004828 	.word	0x20004828
   15070:	0001b52d 	.word	0x0001b52d

00015074 <I2cGetMutex>:
 * @param[in]   waitTime Time to wait for the mutex to be freed.
 * @return      Returns (0) if the bus is ready, (1) if it is busy.
 * @note
 */
int32_t I2cGetMutex(TickType_t waitTime)
{
   15074:	b580      	push	{r7, lr}
   15076:	b084      	sub	sp, #16
   15078:	af00      	add	r7, sp, #0
   1507a:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   1507c:	2300      	movs	r3, #0
   1507e:	60fb      	str	r3, [r7, #12]
    if (xSemaphoreTake(sensorI2cMutexHandle, waitTime) != pdTRUE) {
   15080:	4b08      	ldr	r3, [pc, #32]	; (150a4 <I2cGetMutex+0x30>)
   15082:	681b      	ldr	r3, [r3, #0]
   15084:	687a      	ldr	r2, [r7, #4]
   15086:	0011      	movs	r1, r2
   15088:	0018      	movs	r0, r3
   1508a:	4b07      	ldr	r3, [pc, #28]	; (150a8 <I2cGetMutex+0x34>)
   1508c:	4798      	blx	r3
   1508e:	0003      	movs	r3, r0
   15090:	2b01      	cmp	r3, #1
   15092:	d002      	beq.n	1509a <I2cGetMutex+0x26>
        error = ERROR_NOT_READY;
   15094:	231d      	movs	r3, #29
   15096:	425b      	negs	r3, r3
   15098:	60fb      	str	r3, [r7, #12]
    }
    return error;
   1509a:	68fb      	ldr	r3, [r7, #12]
}
   1509c:	0018      	movs	r0, r3
   1509e:	46bd      	mov	sp, r7
   150a0:	b004      	add	sp, #16
   150a2:	bd80      	pop	{r7, pc}
   150a4:	20004828 	.word	0x20004828
   150a8:	0001c23d 	.word	0x0001c23d

000150ac <I2cGetSemaphoreHandle>:

static int32_t I2cGetSemaphoreHandle(SemaphoreHandle_t *handle)
{
   150ac:	b580      	push	{r7, lr}
   150ae:	b084      	sub	sp, #16
   150b0:	af00      	add	r7, sp, #0
   150b2:	6078      	str	r0, [r7, #4]
    int32_t error = ERROR_NONE;
   150b4:	2300      	movs	r3, #0
   150b6:	60fb      	str	r3, [r7, #12]
    *handle = sensorI2cSemaphoreHandle;
   150b8:	4b04      	ldr	r3, [pc, #16]	; (150cc <I2cGetSemaphoreHandle+0x20>)
   150ba:	681a      	ldr	r2, [r3, #0]
   150bc:	687b      	ldr	r3, [r7, #4]
   150be:	601a      	str	r2, [r3, #0]
    return error;
   150c0:	68fb      	ldr	r3, [r7, #12]
}
   150c2:	0018      	movs	r0, r3
   150c4:	46bd      	mov	sp, r7
   150c6:	b004      	add	sp, #16
   150c8:	bd80      	pop	{r7, pc}
   150ca:	46c0      	nop			; (mov r8, r8)
   150cc:	20004854 	.word	0x20004854

000150d0 <I2cGetTaskErrorStatus>:
 *the I2C data structure).
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static uint8_t I2cGetTaskErrorStatus(void)
{
   150d0:	b580      	push	{r7, lr}
   150d2:	af00      	add	r7, sp, #0
    return sensorTransmitError;
   150d4:	4b02      	ldr	r3, [pc, #8]	; (150e0 <I2cGetTaskErrorStatus+0x10>)
   150d6:	781b      	ldrb	r3, [r3, #0]
}
   150d8:	0018      	movs	r0, r3
   150da:	46bd      	mov	sp, r7
   150dc:	bd80      	pop	{r7, pc}
   150de:	46c0      	nop			; (mov r8, r8)
   150e0:	20000608 	.word	0x20000608

000150e4 <I2cSetTaskErrorStatus>:
 * @param[in]   value Value to which to set the error flag to.
 * @return      Returns an error message in case of error. See ErrCodes.h
 * @note
 */
static void I2cSetTaskErrorStatus(uint8_t value)
{
   150e4:	b580      	push	{r7, lr}
   150e6:	b082      	sub	sp, #8
   150e8:	af00      	add	r7, sp, #0
   150ea:	0002      	movs	r2, r0
   150ec:	1dfb      	adds	r3, r7, #7
   150ee:	701a      	strb	r2, [r3, #0]
    sensorTransmitError = value;
   150f0:	4b03      	ldr	r3, [pc, #12]	; (15100 <I2cSetTaskErrorStatus+0x1c>)
   150f2:	1dfa      	adds	r2, r7, #7
   150f4:	7812      	ldrb	r2, [r2, #0]
   150f6:	701a      	strb	r2, [r3, #0]
}
   150f8:	46c0      	nop			; (mov r8, r8)
   150fa:	46bd      	mov	sp, r7
   150fc:	b002      	add	sp, #8
   150fe:	bd80      	pop	{r7, pc}
   15100:	20000608 	.word	0x20000608

00015104 <I2cWriteDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error.
  * @note
  */
int32_t I2cWriteDataWait(I2C_Data *data, const TickType_t xMaxBlockTime)
{
   15104:	b580      	push	{r7, lr}
   15106:	b084      	sub	sp, #16
   15108:	af00      	add	r7, sp, #0
   1510a:	6078      	str	r0, [r7, #4]
   1510c:	6039      	str	r1, [r7, #0]
    int32_t error = ERROR_NONE;
   1510e:	2300      	movs	r3, #0
   15110:	60fb      	str	r3, [r7, #12]
    SemaphoreHandle_t semHandle = NULL;
   15112:	2300      	movs	r3, #0
   15114:	60bb      	str	r3, [r7, #8]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   15116:	2396      	movs	r3, #150	; 0x96
   15118:	005b      	lsls	r3, r3, #1
   1511a:	0018      	movs	r0, r3
   1511c:	4b28      	ldr	r3, [pc, #160]	; (151c0 <I2cWriteDataWait+0xbc>)
   1511e:	4798      	blx	r3
   15120:	0003      	movs	r3, r0
   15122:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   15124:	68fb      	ldr	r3, [r7, #12]
   15126:	2b00      	cmp	r3, #0
   15128:	d138      	bne.n	1519c <I2cWriteDataWait+0x98>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   1512a:	2308      	movs	r3, #8
   1512c:	18fb      	adds	r3, r7, r3
   1512e:	0018      	movs	r0, r3
   15130:	4b24      	ldr	r3, [pc, #144]	; (151c4 <I2cWriteDataWait+0xc0>)
   15132:	4798      	blx	r3
   15134:	0003      	movs	r3, r0
   15136:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) goto exit;
   15138:	68fb      	ldr	r3, [r7, #12]
   1513a:	2b00      	cmp	r3, #0
   1513c:	d130      	bne.n	151a0 <I2cWriteDataWait+0x9c>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   1513e:	687b      	ldr	r3, [r7, #4]
   15140:	0018      	movs	r0, r3
   15142:	4b21      	ldr	r3, [pc, #132]	; (151c8 <I2cWriteDataWait+0xc4>)
   15144:	4798      	blx	r3
   15146:	0003      	movs	r3, r0
   15148:	60fb      	str	r3, [r7, #12]
    if (ERROR_NONE != error) {
   1514a:	68fb      	ldr	r3, [r7, #12]
   1514c:	2b00      	cmp	r3, #0
   1514e:	d12a      	bne.n	151a6 <I2cWriteDataWait+0xa2>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   15150:	68bb      	ldr	r3, [r7, #8]
   15152:	683a      	ldr	r2, [r7, #0]
   15154:	0011      	movs	r1, r2
   15156:	0018      	movs	r0, r3
   15158:	4b1c      	ldr	r3, [pc, #112]	; (151cc <I2cWriteDataWait+0xc8>)
   1515a:	4798      	blx	r3
   1515c:	0003      	movs	r3, r0
   1515e:	2b01      	cmp	r3, #1
   15160:	d111      	bne.n	15186 <I2cWriteDataWait+0x82>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   15162:	4b1b      	ldr	r3, [pc, #108]	; (151d0 <I2cWriteDataWait+0xcc>)
   15164:	4798      	blx	r3
   15166:	1e03      	subs	r3, r0, #0
   15168:	d011      	beq.n	1518e <I2cWriteDataWait+0x8a>
            I2cSetTaskErrorStatus(false);
   1516a:	2000      	movs	r0, #0
   1516c:	4b19      	ldr	r3, [pc, #100]	; (151d4 <I2cWriteDataWait+0xd0>)
   1516e:	4798      	blx	r3
            if (error != ERROR_NONE) {
   15170:	68fb      	ldr	r3, [r7, #12]
   15172:	2b00      	cmp	r3, #0
   15174:	d003      	beq.n	1517e <I2cWriteDataWait+0x7a>
                error = ERROR_I2C_HANG_RESET;
   15176:	2321      	movs	r3, #33	; 0x21
   15178:	425b      	negs	r3, r3
   1517a:	60fb      	str	r3, [r7, #12]
            } else {
                error = ERROR_ABORTED;
            }
            goto exitError0;
   1517c:	e014      	b.n	151a8 <I2cWriteDataWait+0xa4>
                error = ERROR_ABORTED;
   1517e:	2303      	movs	r3, #3
   15180:	425b      	negs	r3, r3
   15182:	60fb      	str	r3, [r7, #12]
            goto exitError0;
   15184:	e010      	b.n	151a8 <I2cWriteDataWait+0xa4>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   15186:	2303      	movs	r3, #3
   15188:	425b      	negs	r3, r3
   1518a:	60fb      	str	r3, [r7, #12]
        goto exitError0;
   1518c:	e00c      	b.n	151a8 <I2cWriteDataWait+0xa4>
    }

    //---8. Release Mutex
    error |= I2cFreeMutex();
   1518e:	4b12      	ldr	r3, [pc, #72]	; (151d8 <I2cWriteDataWait+0xd4>)
   15190:	4798      	blx	r3
   15192:	0002      	movs	r2, r0
   15194:	68fb      	ldr	r3, [r7, #12]
   15196:	4313      	orrs	r3, r2
   15198:	60fb      	str	r3, [r7, #12]
   1519a:	e002      	b.n	151a2 <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   1519c:	46c0      	nop			; (mov r8, r8)
   1519e:	e000      	b.n	151a2 <I2cWriteDataWait+0x9e>
    if (ERROR_NONE != error) goto exit;
   151a0:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   151a2:	68fb      	ldr	r3, [r7, #12]
   151a4:	e007      	b.n	151b6 <I2cWriteDataWait+0xb2>
        goto exitError0;
   151a6:	46c0      	nop			; (mov r8, r8)

exitError0:
    error |= I2cFreeMutex();
   151a8:	4b0b      	ldr	r3, [pc, #44]	; (151d8 <I2cWriteDataWait+0xd4>)
   151aa:	4798      	blx	r3
   151ac:	0002      	movs	r2, r0
   151ae:	68fb      	ldr	r3, [r7, #12]
   151b0:	4313      	orrs	r3, r2
   151b2:	60fb      	str	r3, [r7, #12]
    // xSemaphoreGive(semHandle);
    return error;
   151b4:	68fb      	ldr	r3, [r7, #12]
}
   151b6:	0018      	movs	r0, r3
   151b8:	46bd      	mov	sp, r7
   151ba:	b004      	add	sp, #16
   151bc:	bd80      	pop	{r7, pc}
   151be:	46c0      	nop			; (mov r8, r8)
   151c0:	00015075 	.word	0x00015075
   151c4:	000150ad 	.word	0x000150ad
   151c8:	00014f4d 	.word	0x00014f4d
   151cc:	0001c23d 	.word	0x0001c23d
   151d0:	000150d1 	.word	0x000150d1
   151d4:	000150e5 	.word	0x000150e5
   151d8:	0001503d 	.word	0x0001503d

000151dc <I2cReadDataWait>:
  * @param[in]   xMaxBlockTime Maximum time for the thread to wait until the I2C mutex is free.
  * @return      Returns an error message in case of error. See ErrCodes.h
  * @note        THIS IS THE FREERTOS VERSION! DO NOT Declare #define USE_FREERTOS if you wish to use the baremetal version!
  */
int32_t I2cReadDataWait(I2C_Data *data, const TickType_t delay, const TickType_t xMaxBlockTime)
{
   151dc:	b580      	push	{r7, lr}
   151de:	b086      	sub	sp, #24
   151e0:	af00      	add	r7, sp, #0
   151e2:	60f8      	str	r0, [r7, #12]
   151e4:	60b9      	str	r1, [r7, #8]
   151e6:	607a      	str	r2, [r7, #4]
    int32_t error = ERROR_NONE;
   151e8:	2300      	movs	r3, #0
   151ea:	617b      	str	r3, [r7, #20]
    SemaphoreHandle_t semHandle = NULL;
   151ec:	2300      	movs	r3, #0
   151ee:	613b      	str	r3, [r7, #16]

    //---0. Get Mutex
    error = I2cGetMutex(WAIT_I2C_LINE_MS);
   151f0:	2396      	movs	r3, #150	; 0x96
   151f2:	005b      	lsls	r3, r3, #1
   151f4:	0018      	movs	r0, r3
   151f6:	4b35      	ldr	r3, [pc, #212]	; (152cc <I2cReadDataWait+0xf0>)
   151f8:	4798      	blx	r3
   151fa:	0003      	movs	r3, r0
   151fc:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   151fe:	697b      	ldr	r3, [r7, #20]
   15200:	2b00      	cmp	r3, #0
   15202:	d155      	bne.n	152b0 <I2cReadDataWait+0xd4>

    //---1. Get Semaphore Handle
    error = I2cGetSemaphoreHandle(&semHandle);
   15204:	2310      	movs	r3, #16
   15206:	18fb      	adds	r3, r7, r3
   15208:	0018      	movs	r0, r3
   1520a:	4b31      	ldr	r3, [pc, #196]	; (152d0 <I2cReadDataWait+0xf4>)
   1520c:	4798      	blx	r3
   1520e:	0003      	movs	r3, r0
   15210:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) goto exit;
   15212:	697b      	ldr	r3, [r7, #20]
   15214:	2b00      	cmp	r3, #0
   15216:	d14d      	bne.n	152b4 <I2cReadDataWait+0xd8>

    //---2. Initiate sending data

    error = I2cWriteData(data);
   15218:	68fb      	ldr	r3, [r7, #12]
   1521a:	0018      	movs	r0, r3
   1521c:	4b2d      	ldr	r3, [pc, #180]	; (152d4 <I2cReadDataWait+0xf8>)
   1521e:	4798      	blx	r3
   15220:	0003      	movs	r3, r0
   15222:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   15224:	697b      	ldr	r3, [r7, #20]
   15226:	2b00      	cmp	r3, #0
   15228:	d147      	bne.n	152ba <I2cReadDataWait+0xde>
        goto exitError0;
    }

    //---2. Wait for binary semaphore to tell us that we are done!
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   1522a:	693b      	ldr	r3, [r7, #16]
   1522c:	687a      	ldr	r2, [r7, #4]
   1522e:	0011      	movs	r1, r2
   15230:	0018      	movs	r0, r3
   15232:	4b29      	ldr	r3, [pc, #164]	; (152d8 <I2cReadDataWait+0xfc>)
   15234:	4798      	blx	r3
   15236:	0003      	movs	r3, r0
   15238:	2b01      	cmp	r3, #1
   1523a:	d118      	bne.n	1526e <I2cReadDataWait+0x92>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   1523c:	4b27      	ldr	r3, [pc, #156]	; (152dc <I2cReadDataWait+0x100>)
   1523e:	4798      	blx	r3
   15240:	1e03      	subs	r3, r0, #0
   15242:	d006      	beq.n	15252 <I2cReadDataWait+0x76>
            I2cSetTaskErrorStatus(false);
   15244:	2000      	movs	r0, #0
   15246:	4b26      	ldr	r3, [pc, #152]	; (152e0 <I2cReadDataWait+0x104>)
   15248:	4798      	blx	r3
            error = ERROR_ABORTED;
   1524a:	2303      	movs	r3, #3
   1524c:	425b      	negs	r3, r3
   1524e:	617b      	str	r3, [r7, #20]
            goto exitError0;
   15250:	e034      	b.n	152bc <I2cReadDataWait+0xe0>
        }
        vTaskDelay(delay);
   15252:	68bb      	ldr	r3, [r7, #8]
   15254:	0018      	movs	r0, r3
   15256:	4b23      	ldr	r3, [pc, #140]	; (152e4 <I2cReadDataWait+0x108>)
   15258:	4798      	blx	r3
        error = ERR_TIMEOUT;
        goto exitError0;
    }

    //---6. Initiate Read data
    error = I2cReadData(data);
   1525a:	68fb      	ldr	r3, [r7, #12]
   1525c:	0018      	movs	r0, r3
   1525e:	4b22      	ldr	r3, [pc, #136]	; (152e8 <I2cReadDataWait+0x10c>)
   15260:	4798      	blx	r3
   15262:	0003      	movs	r3, r0
   15264:	617b      	str	r3, [r7, #20]
    if (ERROR_NONE != error) {
   15266:	697b      	ldr	r3, [r7, #20]
   15268:	2b00      	cmp	r3, #0
   1526a:	d004      	beq.n	15276 <I2cReadDataWait+0x9a>
        goto exitError0;
   1526c:	e026      	b.n	152bc <I2cReadDataWait+0xe0>
        error = ERR_TIMEOUT;
   1526e:	2303      	movs	r3, #3
   15270:	425b      	negs	r3, r3
   15272:	617b      	str	r3, [r7, #20]
        goto exitError0;
   15274:	e022      	b.n	152bc <I2cReadDataWait+0xe0>
    }
    //---7. Wait for notification
    if (xSemaphoreTake(semHandle, xMaxBlockTime) == pdTRUE) {
   15276:	693b      	ldr	r3, [r7, #16]
   15278:	687a      	ldr	r2, [r7, #4]
   1527a:	0011      	movs	r1, r2
   1527c:	0018      	movs	r0, r3
   1527e:	4b16      	ldr	r3, [pc, #88]	; (152d8 <I2cReadDataWait+0xfc>)
   15280:	4798      	blx	r3
   15282:	0003      	movs	r3, r0
   15284:	2b01      	cmp	r3, #1
   15286:	d10a      	bne.n	1529e <I2cReadDataWait+0xc2>
        /* The transmission ended as expected. We now delay until the I2C sensor is finished */
        if (I2cGetTaskErrorStatus()) {
   15288:	4b14      	ldr	r3, [pc, #80]	; (152dc <I2cReadDataWait+0x100>)
   1528a:	4798      	blx	r3
   1528c:	1e03      	subs	r3, r0, #0
   1528e:	d00a      	beq.n	152a6 <I2cReadDataWait+0xca>
            I2cSetTaskErrorStatus(false);
   15290:	2000      	movs	r0, #0
   15292:	4b13      	ldr	r3, [pc, #76]	; (152e0 <I2cReadDataWait+0x104>)
   15294:	4798      	blx	r3
            error = ERROR_ABORTED;
   15296:	2303      	movs	r3, #3
   15298:	425b      	negs	r3, r3
   1529a:	617b      	str	r3, [r7, #20]
            goto exitError0;
   1529c:	e00e      	b.n	152bc <I2cReadDataWait+0xe0>
        }
    } else {
        /* The call to ulTaskNotifyTake() timed out. */
        error = ERR_TIMEOUT;
   1529e:	2303      	movs	r3, #3
   152a0:	425b      	negs	r3, r3
   152a2:	617b      	str	r3, [r7, #20]
        goto exitError0;
   152a4:	e00a      	b.n	152bc <I2cReadDataWait+0xe0>
    }

    //---8. Release Mutex
    error = I2cFreeMutex();
   152a6:	4b11      	ldr	r3, [pc, #68]	; (152ec <I2cReadDataWait+0x110>)
   152a8:	4798      	blx	r3
   152aa:	0003      	movs	r3, r0
   152ac:	617b      	str	r3, [r7, #20]
   152ae:	e002      	b.n	152b6 <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   152b0:	46c0      	nop			; (mov r8, r8)
   152b2:	e000      	b.n	152b6 <I2cReadDataWait+0xda>
    if (ERROR_NONE != error) goto exit;
   152b4:	46c0      	nop			; (mov r8, r8)
// xSemaphoreGive(semHandle);
exit:
    return error;
   152b6:	697b      	ldr	r3, [r7, #20]
   152b8:	e003      	b.n	152c2 <I2cReadDataWait+0xe6>
        goto exitError0;
   152ba:	46c0      	nop			; (mov r8, r8)

exitError0:
    I2cFreeMutex();
   152bc:	4b0b      	ldr	r3, [pc, #44]	; (152ec <I2cReadDataWait+0x110>)
   152be:	4798      	blx	r3
    // xSemaphoreGive(semHandle);
    return error;
   152c0:	697b      	ldr	r3, [r7, #20]
}
   152c2:	0018      	movs	r0, r3
   152c4:	46bd      	mov	sp, r7
   152c6:	b006      	add	sp, #24
   152c8:	bd80      	pop	{r7, pc}
   152ca:	46c0      	nop			; (mov r8, r8)
   152cc:	00015075 	.word	0x00015075
   152d0:	000150ad 	.word	0x000150ad
   152d4:	00014f4d 	.word	0x00014f4d
   152d8:	0001c23d 	.word	0x0001c23d
   152dc:	000150d1 	.word	0x000150d1
   152e0:	000150e5 	.word	0x000150e5
   152e4:	0001cf91 	.word	0x0001cf91
   152e8:	00014fc5 	.word	0x00014fc5
   152ec:	0001503d 	.word	0x0001503d

000152f0 <lsm6dso_read_reg>:
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
   152f0:	b5b0      	push	{r4, r5, r7, lr}
   152f2:	b086      	sub	sp, #24
   152f4:	af00      	add	r7, sp, #0
   152f6:	60f8      	str	r0, [r7, #12]
   152f8:	0008      	movs	r0, r1
   152fa:	607a      	str	r2, [r7, #4]
   152fc:	0019      	movs	r1, r3
   152fe:	230b      	movs	r3, #11
   15300:	18fb      	adds	r3, r7, r3
   15302:	1c02      	adds	r2, r0, #0
   15304:	701a      	strb	r2, [r3, #0]
   15306:	2308      	movs	r3, #8
   15308:	18fb      	adds	r3, r7, r3
   1530a:	1c0a      	adds	r2, r1, #0
   1530c:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
   1530e:	68fb      	ldr	r3, [r7, #12]
   15310:	685c      	ldr	r4, [r3, #4]
   15312:	68fb      	ldr	r3, [r7, #12]
   15314:	6898      	ldr	r0, [r3, #8]
   15316:	2308      	movs	r3, #8
   15318:	18fb      	adds	r3, r7, r3
   1531a:	881d      	ldrh	r5, [r3, #0]
   1531c:	687a      	ldr	r2, [r7, #4]
   1531e:	230b      	movs	r3, #11
   15320:	18fb      	adds	r3, r7, r3
   15322:	7819      	ldrb	r1, [r3, #0]
   15324:	002b      	movs	r3, r5
   15326:	47a0      	blx	r4
   15328:	0003      	movs	r3, r0
   1532a:	617b      	str	r3, [r7, #20]

  return ret;
   1532c:	697b      	ldr	r3, [r7, #20]
}
   1532e:	0018      	movs	r0, r3
   15330:	46bd      	mov	sp, r7
   15332:	b006      	add	sp, #24
   15334:	bdb0      	pop	{r4, r5, r7, pc}

00015336 <lsm6dso_write_reg>:
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
   15336:	b5b0      	push	{r4, r5, r7, lr}
   15338:	b086      	sub	sp, #24
   1533a:	af00      	add	r7, sp, #0
   1533c:	60f8      	str	r0, [r7, #12]
   1533e:	0008      	movs	r0, r1
   15340:	607a      	str	r2, [r7, #4]
   15342:	0019      	movs	r1, r3
   15344:	230b      	movs	r3, #11
   15346:	18fb      	adds	r3, r7, r3
   15348:	1c02      	adds	r2, r0, #0
   1534a:	701a      	strb	r2, [r3, #0]
   1534c:	2308      	movs	r3, #8
   1534e:	18fb      	adds	r3, r7, r3
   15350:	1c0a      	adds	r2, r1, #0
   15352:	801a      	strh	r2, [r3, #0]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
   15354:	68fb      	ldr	r3, [r7, #12]
   15356:	681c      	ldr	r4, [r3, #0]
   15358:	68fb      	ldr	r3, [r7, #12]
   1535a:	6898      	ldr	r0, [r3, #8]
   1535c:	2308      	movs	r3, #8
   1535e:	18fb      	adds	r3, r7, r3
   15360:	881d      	ldrh	r5, [r3, #0]
   15362:	687a      	ldr	r2, [r7, #4]
   15364:	230b      	movs	r3, #11
   15366:	18fb      	adds	r3, r7, r3
   15368:	7819      	ldrb	r1, [r3, #0]
   1536a:	002b      	movs	r3, r5
   1536c:	47a0      	blx	r4
   1536e:	0003      	movs	r3, r0
   15370:	617b      	str	r3, [r7, #20]

  return ret;
   15372:	697b      	ldr	r3, [r7, #20]
}
   15374:	0018      	movs	r0, r3
   15376:	46bd      	mov	sp, r7
   15378:	b006      	add	sp, #24
   1537a:	bdb0      	pop	{r4, r5, r7, pc}

0001537c <lsm6dso_from_fs2_to_mg>:
  * @brief     These functions convert raw-data into engineering units.
  * @{
  *
  */
float_t lsm6dso_from_fs2_to_mg(int16_t lsb)
{
   1537c:	b580      	push	{r7, lr}
   1537e:	b082      	sub	sp, #8
   15380:	af00      	add	r7, sp, #0
   15382:	0002      	movs	r2, r0
   15384:	1dbb      	adds	r3, r7, #6
   15386:	801a      	strh	r2, [r3, #0]
  return ((float_t)lsb) * 0.061f;
   15388:	1dbb      	adds	r3, r7, #6
   1538a:	2200      	movs	r2, #0
   1538c:	5e9a      	ldrsh	r2, [r3, r2]
   1538e:	4b06      	ldr	r3, [pc, #24]	; (153a8 <lsm6dso_from_fs2_to_mg+0x2c>)
   15390:	0010      	movs	r0, r2
   15392:	4798      	blx	r3
   15394:	1c02      	adds	r2, r0, #0
   15396:	4b05      	ldr	r3, [pc, #20]	; (153ac <lsm6dso_from_fs2_to_mg+0x30>)
   15398:	4905      	ldr	r1, [pc, #20]	; (153b0 <lsm6dso_from_fs2_to_mg+0x34>)
   1539a:	1c10      	adds	r0, r2, #0
   1539c:	4798      	blx	r3
   1539e:	1c03      	adds	r3, r0, #0
}
   153a0:	1c18      	adds	r0, r3, #0
   153a2:	46bd      	mov	sp, r7
   153a4:	b002      	add	sp, #8
   153a6:	bd80      	pop	{r7, pc}
   153a8:	00033e15 	.word	0x00033e15
   153ac:	00033b95 	.word	0x00033b95
   153b0:	3d79db23 	.word	0x3d79db23

000153b4 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
   153b4:	b590      	push	{r4, r7, lr}
   153b6:	b085      	sub	sp, #20
   153b8:	af00      	add	r7, sp, #0
   153ba:	6078      	str	r0, [r7, #4]
   153bc:	000a      	movs	r2, r1
   153be:	1cfb      	adds	r3, r7, #3
   153c0:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   153c2:	2308      	movs	r3, #8
   153c4:	18fa      	adds	r2, r7, r3
   153c6:	6878      	ldr	r0, [r7, #4]
   153c8:	2301      	movs	r3, #1
   153ca:	2110      	movs	r1, #16
   153cc:	4c12      	ldr	r4, [pc, #72]	; (15418 <lsm6dso_xl_full_scale_set+0x64>)
   153ce:	47a0      	blx	r4
   153d0:	0003      	movs	r3, r0
   153d2:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   153d4:	68fb      	ldr	r3, [r7, #12]
   153d6:	2b00      	cmp	r3, #0
   153d8:	d119      	bne.n	1540e <lsm6dso_xl_full_scale_set+0x5a>
  {
    reg.fs_xl = (uint8_t) val;
   153da:	1cfb      	adds	r3, r7, #3
   153dc:	781b      	ldrb	r3, [r3, #0]
   153de:	2203      	movs	r2, #3
   153e0:	4013      	ands	r3, r2
   153e2:	b2da      	uxtb	r2, r3
   153e4:	2308      	movs	r3, #8
   153e6:	18fb      	adds	r3, r7, r3
   153e8:	2103      	movs	r1, #3
   153ea:	400a      	ands	r2, r1
   153ec:	0090      	lsls	r0, r2, #2
   153ee:	781a      	ldrb	r2, [r3, #0]
   153f0:	210c      	movs	r1, #12
   153f2:	438a      	bics	r2, r1
   153f4:	1c11      	adds	r1, r2, #0
   153f6:	1c02      	adds	r2, r0, #0
   153f8:	430a      	orrs	r2, r1
   153fa:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   153fc:	2308      	movs	r3, #8
   153fe:	18fa      	adds	r2, r7, r3
   15400:	6878      	ldr	r0, [r7, #4]
   15402:	2301      	movs	r3, #1
   15404:	2110      	movs	r1, #16
   15406:	4c05      	ldr	r4, [pc, #20]	; (1541c <lsm6dso_xl_full_scale_set+0x68>)
   15408:	47a0      	blx	r4
   1540a:	0003      	movs	r3, r0
   1540c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   1540e:	68fb      	ldr	r3, [r7, #12]
}
   15410:	0018      	movs	r0, r3
   15412:	46bd      	mov	sp, r7
   15414:	b005      	add	sp, #20
   15416:	bd90      	pop	{r4, r7, pc}
   15418:	000152f1 	.word	0x000152f1
   1541c:	00015337 	.word	0x00015337

00015420 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
   15420:	b590      	push	{r4, r7, lr}
   15422:	b087      	sub	sp, #28
   15424:	af00      	add	r7, sp, #0
   15426:	6078      	str	r0, [r7, #4]
   15428:	000a      	movs	r2, r1
   1542a:	1cfb      	adds	r3, r7, #3
   1542c:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_xl_t odr_xl =  val;
   1542e:	2317      	movs	r3, #23
   15430:	18fb      	adds	r3, r7, r3
   15432:	1cfa      	adds	r2, r7, #3
   15434:	7812      	ldrb	r2, [r2, #0]
   15436:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
   15438:	230c      	movs	r3, #12
   1543a:	18fa      	adds	r2, r7, r3
   1543c:	687b      	ldr	r3, [r7, #4]
   1543e:	0011      	movs	r1, r2
   15440:	0018      	movs	r0, r3
   15442:	4ba4      	ldr	r3, [pc, #656]	; (156d4 <lsm6dso_xl_data_rate_set+0x2b4>)
   15444:	4798      	blx	r3
   15446:	0003      	movs	r3, r0
   15448:	613b      	str	r3, [r7, #16]

  if (ret == 0)
   1544a:	693b      	ldr	r3, [r7, #16]
   1544c:	2b00      	cmp	r3, #0
   1544e:	d000      	beq.n	15452 <lsm6dso_xl_data_rate_set+0x32>
   15450:	e113      	b.n	1567a <lsm6dso_xl_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   15452:	230c      	movs	r3, #12
   15454:	18fb      	adds	r3, r7, r3
   15456:	781b      	ldrb	r3, [r3, #0]
   15458:	07db      	lsls	r3, r3, #31
   1545a:	0fdb      	lsrs	r3, r3, #31
   1545c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   1545e:	230c      	movs	r3, #12
   15460:	18fb      	adds	r3, r7, r3
   15462:	781b      	ldrb	r3, [r3, #0]
   15464:	079b      	lsls	r3, r3, #30
   15466:	0fdb      	lsrs	r3, r3, #31
   15468:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   1546a:	4313      	orrs	r3, r2
   1546c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   1546e:	230c      	movs	r3, #12
   15470:	18fb      	adds	r3, r7, r3
   15472:	781b      	ldrb	r3, [r3, #0]
   15474:	075b      	lsls	r3, r3, #29
   15476:	0fdb      	lsrs	r3, r3, #31
   15478:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   1547a:	4313      	orrs	r3, r2
   1547c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   1547e:	230c      	movs	r3, #12
   15480:	18fb      	adds	r3, r7, r3
   15482:	781b      	ldrb	r3, [r3, #0]
   15484:	071b      	lsls	r3, r3, #28
   15486:	0fdb      	lsrs	r3, r3, #31
   15488:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   1548a:	4313      	orrs	r3, r2
   1548c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   1548e:	230c      	movs	r3, #12
   15490:	18fb      	adds	r3, r7, r3
   15492:	781b      	ldrb	r3, [r3, #0]
   15494:	06db      	lsls	r3, r3, #27
   15496:	0fdb      	lsrs	r3, r3, #31
   15498:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   1549a:	4313      	orrs	r3, r2
   1549c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   1549e:	230c      	movs	r3, #12
   154a0:	18fb      	adds	r3, r7, r3
   154a2:	781b      	ldrb	r3, [r3, #0]
   154a4:	069b      	lsls	r3, r3, #26
   154a6:	0fdb      	lsrs	r3, r3, #31
   154a8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   154aa:	4313      	orrs	r3, r2
   154ac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   154ae:	230c      	movs	r3, #12
   154b0:	18fb      	adds	r3, r7, r3
   154b2:	781b      	ldrb	r3, [r3, #0]
   154b4:	065b      	lsls	r3, r3, #25
   154b6:	0fdb      	lsrs	r3, r3, #31
   154b8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   154ba:	4313      	orrs	r3, r2
   154bc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   154be:	230c      	movs	r3, #12
   154c0:	18fb      	adds	r3, r7, r3
   154c2:	781b      	ldrb	r3, [r3, #0]
   154c4:	061b      	lsls	r3, r3, #24
   154c6:	0fdb      	lsrs	r3, r3, #31
   154c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   154ca:	4313      	orrs	r3, r2
   154cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   154ce:	230c      	movs	r3, #12
   154d0:	18fb      	adds	r3, r7, r3
   154d2:	785b      	ldrb	r3, [r3, #1]
   154d4:	07db      	lsls	r3, r3, #31
   154d6:	0fdb      	lsrs	r3, r3, #31
   154d8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   154da:	4313      	orrs	r3, r2
   154dc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   154de:	230c      	movs	r3, #12
   154e0:	18fb      	adds	r3, r7, r3
   154e2:	785b      	ldrb	r3, [r3, #1]
   154e4:	079b      	lsls	r3, r3, #30
   154e6:	0fdb      	lsrs	r3, r3, #31
   154e8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   154ea:	4313      	orrs	r3, r2
   154ec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   154ee:	230c      	movs	r3, #12
   154f0:	18fb      	adds	r3, r7, r3
   154f2:	785b      	ldrb	r3, [r3, #1]
   154f4:	075b      	lsls	r3, r3, #29
   154f6:	0fdb      	lsrs	r3, r3, #31
   154f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   154fa:	4313      	orrs	r3, r2
   154fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   154fe:	230c      	movs	r3, #12
   15500:	18fb      	adds	r3, r7, r3
   15502:	785b      	ldrb	r3, [r3, #1]
   15504:	071b      	lsls	r3, r3, #28
   15506:	0fdb      	lsrs	r3, r3, #31
   15508:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   1550a:	4313      	orrs	r3, r2
   1550c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   1550e:	230c      	movs	r3, #12
   15510:	18fb      	adds	r3, r7, r3
   15512:	785b      	ldrb	r3, [r3, #1]
   15514:	06db      	lsls	r3, r3, #27
   15516:	0fdb      	lsrs	r3, r3, #31
   15518:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   1551a:	4313      	orrs	r3, r2
   1551c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   1551e:	230c      	movs	r3, #12
   15520:	18fb      	adds	r3, r7, r3
   15522:	785b      	ldrb	r3, [r3, #1]
   15524:	069b      	lsls	r3, r3, #26
   15526:	0fdb      	lsrs	r3, r3, #31
   15528:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   1552a:	4313      	orrs	r3, r2
   1552c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   1552e:	230c      	movs	r3, #12
   15530:	18fb      	adds	r3, r7, r3
   15532:	785b      	ldrb	r3, [r3, #1]
   15534:	065b      	lsls	r3, r3, #25
   15536:	0fdb      	lsrs	r3, r3, #31
   15538:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   1553a:	4313      	orrs	r3, r2
   1553c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
   1553e:	230c      	movs	r3, #12
   15540:	18fb      	adds	r3, r7, r3
   15542:	785b      	ldrb	r3, [r3, #1]
   15544:	061b      	lsls	r3, r3, #24
   15546:	0fdb      	lsrs	r3, r3, #31
   15548:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   1554a:	4313      	orrs	r3, r2
   1554c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   1554e:	2b01      	cmp	r3, #1
   15550:	d000      	beq.n	15554 <lsm6dso_xl_data_rate_set+0x134>
   15552:	e092      	b.n	1567a <lsm6dso_xl_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
   15554:	230b      	movs	r3, #11
   15556:	18fa      	adds	r2, r7, r3
   15558:	687b      	ldr	r3, [r7, #4]
   1555a:	0011      	movs	r1, r2
   1555c:	0018      	movs	r0, r3
   1555e:	4b5e      	ldr	r3, [pc, #376]	; (156d8 <lsm6dso_xl_data_rate_set+0x2b8>)
   15560:	4798      	blx	r3
   15562:	0003      	movs	r3, r0
   15564:	613b      	str	r3, [r7, #16]

      if (ret == 0)
   15566:	693b      	ldr	r3, [r7, #16]
   15568:	2b00      	cmp	r3, #0
   1556a:	d000      	beq.n	1556e <lsm6dso_xl_data_rate_set+0x14e>
   1556c:	e085      	b.n	1567a <lsm6dso_xl_data_rate_set+0x25a>
      {
        switch (fsm_odr)
   1556e:	230b      	movs	r3, #11
   15570:	18fb      	adds	r3, r7, r3
   15572:	781b      	ldrb	r3, [r3, #0]
   15574:	2b01      	cmp	r3, #1
   15576:	d017      	beq.n	155a8 <lsm6dso_xl_data_rate_set+0x188>
   15578:	dc02      	bgt.n	15580 <lsm6dso_xl_data_rate_set+0x160>
   1557a:	2b00      	cmp	r3, #0
   1557c:	d005      	beq.n	1558a <lsm6dso_xl_data_rate_set+0x16a>
   1557e:	e076      	b.n	1566e <lsm6dso_xl_data_rate_set+0x24e>
   15580:	2b02      	cmp	r3, #2
   15582:	d029      	beq.n	155d8 <lsm6dso_xl_data_rate_set+0x1b8>
   15584:	2b03      	cmp	r3, #3
   15586:	d048      	beq.n	1561a <lsm6dso_xl_data_rate_set+0x1fa>
   15588:	e071      	b.n	1566e <lsm6dso_xl_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
   1558a:	1cfb      	adds	r3, r7, #3
   1558c:	781b      	ldrb	r3, [r3, #0]
   1558e:	2b00      	cmp	r3, #0
   15590:	d104      	bne.n	1559c <lsm6dso_xl_data_rate_set+0x17c>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
   15592:	2317      	movs	r3, #23
   15594:	18fb      	adds	r3, r7, r3
   15596:	2201      	movs	r2, #1
   15598:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   1559a:	e06e      	b.n	1567a <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   1559c:	2317      	movs	r3, #23
   1559e:	18fb      	adds	r3, r7, r3
   155a0:	1cfa      	adds	r2, r7, #3
   155a2:	7812      	ldrb	r2, [r2, #0]
   155a4:	701a      	strb	r2, [r3, #0]
            break;
   155a6:	e068      	b.n	1567a <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   155a8:	1cfb      	adds	r3, r7, #3
   155aa:	781b      	ldrb	r3, [r3, #0]
   155ac:	2b00      	cmp	r3, #0
   155ae:	d104      	bne.n	155ba <lsm6dso_xl_data_rate_set+0x19a>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
   155b0:	2317      	movs	r3, #23
   155b2:	18fb      	adds	r3, r7, r3
   155b4:	2202      	movs	r2, #2
   155b6:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   155b8:	e05f      	b.n	1567a <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   155ba:	1cfb      	adds	r3, r7, #3
   155bc:	781b      	ldrb	r3, [r3, #0]
   155be:	2b01      	cmp	r3, #1
   155c0:	d104      	bne.n	155cc <lsm6dso_xl_data_rate_set+0x1ac>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
   155c2:	2317      	movs	r3, #23
   155c4:	18fb      	adds	r3, r7, r3
   155c6:	2202      	movs	r2, #2
   155c8:	701a      	strb	r2, [r3, #0]
            break;
   155ca:	e056      	b.n	1567a <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   155cc:	2317      	movs	r3, #23
   155ce:	18fb      	adds	r3, r7, r3
   155d0:	1cfa      	adds	r2, r7, #3
   155d2:	7812      	ldrb	r2, [r2, #0]
   155d4:	701a      	strb	r2, [r3, #0]
            break;
   155d6:	e050      	b.n	1567a <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   155d8:	1cfb      	adds	r3, r7, #3
   155da:	781b      	ldrb	r3, [r3, #0]
   155dc:	2b00      	cmp	r3, #0
   155de:	d104      	bne.n	155ea <lsm6dso_xl_data_rate_set+0x1ca>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   155e0:	2317      	movs	r3, #23
   155e2:	18fb      	adds	r3, r7, r3
   155e4:	2203      	movs	r2, #3
   155e6:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   155e8:	e047      	b.n	1567a <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   155ea:	1cfb      	adds	r3, r7, #3
   155ec:	781b      	ldrb	r3, [r3, #0]
   155ee:	2b01      	cmp	r3, #1
   155f0:	d104      	bne.n	155fc <lsm6dso_xl_data_rate_set+0x1dc>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   155f2:	2317      	movs	r3, #23
   155f4:	18fb      	adds	r3, r7, r3
   155f6:	2203      	movs	r2, #3
   155f8:	701a      	strb	r2, [r3, #0]
            break;
   155fa:	e03e      	b.n	1567a <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_26Hz)
   155fc:	1cfb      	adds	r3, r7, #3
   155fe:	781b      	ldrb	r3, [r3, #0]
   15600:	2b02      	cmp	r3, #2
   15602:	d104      	bne.n	1560e <lsm6dso_xl_data_rate_set+0x1ee>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
   15604:	2317      	movs	r3, #23
   15606:	18fb      	adds	r3, r7, r3
   15608:	2203      	movs	r2, #3
   1560a:	701a      	strb	r2, [r3, #0]
            break;
   1560c:	e035      	b.n	1567a <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   1560e:	2317      	movs	r3, #23
   15610:	18fb      	adds	r3, r7, r3
   15612:	1cfa      	adds	r2, r7, #3
   15614:	7812      	ldrb	r2, [r2, #0]
   15616:	701a      	strb	r2, [r3, #0]
            break;
   15618:	e02f      	b.n	1567a <lsm6dso_xl_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
   1561a:	1cfb      	adds	r3, r7, #3
   1561c:	781b      	ldrb	r3, [r3, #0]
   1561e:	2b00      	cmp	r3, #0
   15620:	d104      	bne.n	1562c <lsm6dso_xl_data_rate_set+0x20c>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   15622:	2317      	movs	r3, #23
   15624:	18fb      	adds	r3, r7, r3
   15626:	2204      	movs	r2, #4
   15628:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_xl = val;
            }

            break;
   1562a:	e026      	b.n	1567a <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
   1562c:	1cfb      	adds	r3, r7, #3
   1562e:	781b      	ldrb	r3, [r3, #0]
   15630:	2b01      	cmp	r3, #1
   15632:	d104      	bne.n	1563e <lsm6dso_xl_data_rate_set+0x21e>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   15634:	2317      	movs	r3, #23
   15636:	18fb      	adds	r3, r7, r3
   15638:	2204      	movs	r2, #4
   1563a:	701a      	strb	r2, [r3, #0]
            break;
   1563c:	e01d      	b.n	1567a <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_26Hz)
   1563e:	1cfb      	adds	r3, r7, #3
   15640:	781b      	ldrb	r3, [r3, #0]
   15642:	2b02      	cmp	r3, #2
   15644:	d104      	bne.n	15650 <lsm6dso_xl_data_rate_set+0x230>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   15646:	2317      	movs	r3, #23
   15648:	18fb      	adds	r3, r7, r3
   1564a:	2204      	movs	r2, #4
   1564c:	701a      	strb	r2, [r3, #0]
            break;
   1564e:	e014      	b.n	1567a <lsm6dso_xl_data_rate_set+0x25a>
            else if (val == LSM6DSO_XL_ODR_52Hz)
   15650:	1cfb      	adds	r3, r7, #3
   15652:	781b      	ldrb	r3, [r3, #0]
   15654:	2b03      	cmp	r3, #3
   15656:	d104      	bne.n	15662 <lsm6dso_xl_data_rate_set+0x242>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
   15658:	2317      	movs	r3, #23
   1565a:	18fb      	adds	r3, r7, r3
   1565c:	2204      	movs	r2, #4
   1565e:	701a      	strb	r2, [r3, #0]
            break;
   15660:	e00b      	b.n	1567a <lsm6dso_xl_data_rate_set+0x25a>
              odr_xl = val;
   15662:	2317      	movs	r3, #23
   15664:	18fb      	adds	r3, r7, r3
   15666:	1cfa      	adds	r2, r7, #3
   15668:	7812      	ldrb	r2, [r2, #0]
   1566a:	701a      	strb	r2, [r3, #0]
            break;
   1566c:	e005      	b.n	1567a <lsm6dso_xl_data_rate_set+0x25a>

          default:
            odr_xl = val;
   1566e:	2317      	movs	r3, #23
   15670:	18fb      	adds	r3, r7, r3
   15672:	1cfa      	adds	r2, r7, #3
   15674:	7812      	ldrb	r2, [r2, #0]
   15676:	701a      	strb	r2, [r3, #0]
            break;
   15678:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
   1567a:	693b      	ldr	r3, [r7, #16]
   1567c:	2b00      	cmp	r3, #0
   1567e:	d108      	bne.n	15692 <lsm6dso_xl_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   15680:	2308      	movs	r3, #8
   15682:	18fa      	adds	r2, r7, r3
   15684:	6878      	ldr	r0, [r7, #4]
   15686:	2301      	movs	r3, #1
   15688:	2110      	movs	r1, #16
   1568a:	4c14      	ldr	r4, [pc, #80]	; (156dc <lsm6dso_xl_data_rate_set+0x2bc>)
   1568c:	47a0      	blx	r4
   1568e:	0003      	movs	r3, r0
   15690:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
   15692:	693b      	ldr	r3, [r7, #16]
   15694:	2b00      	cmp	r3, #0
   15696:	d118      	bne.n	156ca <lsm6dso_xl_data_rate_set+0x2aa>
  {
    reg.odr_xl = (uint8_t) odr_xl;
   15698:	2317      	movs	r3, #23
   1569a:	18fb      	adds	r3, r7, r3
   1569c:	781b      	ldrb	r3, [r3, #0]
   1569e:	220f      	movs	r2, #15
   156a0:	4013      	ands	r3, r2
   156a2:	b2da      	uxtb	r2, r3
   156a4:	2308      	movs	r3, #8
   156a6:	18fb      	adds	r3, r7, r3
   156a8:	0110      	lsls	r0, r2, #4
   156aa:	781a      	ldrb	r2, [r3, #0]
   156ac:	210f      	movs	r1, #15
   156ae:	400a      	ands	r2, r1
   156b0:	1c11      	adds	r1, r2, #0
   156b2:	1c02      	adds	r2, r0, #0
   156b4:	430a      	orrs	r2, r1
   156b6:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   156b8:	2308      	movs	r3, #8
   156ba:	18fa      	adds	r2, r7, r3
   156bc:	6878      	ldr	r0, [r7, #4]
   156be:	2301      	movs	r3, #1
   156c0:	2110      	movs	r1, #16
   156c2:	4c07      	ldr	r4, [pc, #28]	; (156e0 <lsm6dso_xl_data_rate_set+0x2c0>)
   156c4:	47a0      	blx	r4
   156c6:	0003      	movs	r3, r0
   156c8:	613b      	str	r3, [r7, #16]
  }

  return ret;
   156ca:	693b      	ldr	r3, [r7, #16]
}
   156cc:	0018      	movs	r0, r3
   156ce:	46bd      	mov	sp, r7
   156d0:	b007      	add	sp, #28
   156d2:	bd90      	pop	{r4, r7, pc}
   156d4:	00015efd 	.word	0x00015efd
   156d8:	00015f51 	.word	0x00015f51
   156dc:	000152f1 	.word	0x000152f1
   156e0:	00015337 	.word	0x00015337

000156e4 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
   156e4:	b590      	push	{r4, r7, lr}
   156e6:	b085      	sub	sp, #20
   156e8:	af00      	add	r7, sp, #0
   156ea:	6078      	str	r0, [r7, #4]
   156ec:	000a      	movs	r2, r1
   156ee:	1cfb      	adds	r3, r7, #3
   156f0:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   156f2:	2308      	movs	r3, #8
   156f4:	18fa      	adds	r2, r7, r3
   156f6:	6878      	ldr	r0, [r7, #4]
   156f8:	2301      	movs	r3, #1
   156fa:	2111      	movs	r1, #17
   156fc:	4c12      	ldr	r4, [pc, #72]	; (15748 <lsm6dso_gy_full_scale_set+0x64>)
   156fe:	47a0      	blx	r4
   15700:	0003      	movs	r3, r0
   15702:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15704:	68fb      	ldr	r3, [r7, #12]
   15706:	2b00      	cmp	r3, #0
   15708:	d119      	bne.n	1573e <lsm6dso_gy_full_scale_set+0x5a>
  {
    reg.fs_g = (uint8_t) val;
   1570a:	1cfb      	adds	r3, r7, #3
   1570c:	781b      	ldrb	r3, [r3, #0]
   1570e:	2207      	movs	r2, #7
   15710:	4013      	ands	r3, r2
   15712:	b2da      	uxtb	r2, r3
   15714:	2308      	movs	r3, #8
   15716:	18fb      	adds	r3, r7, r3
   15718:	2107      	movs	r1, #7
   1571a:	400a      	ands	r2, r1
   1571c:	1890      	adds	r0, r2, r2
   1571e:	781a      	ldrb	r2, [r3, #0]
   15720:	210e      	movs	r1, #14
   15722:	438a      	bics	r2, r1
   15724:	1c11      	adds	r1, r2, #0
   15726:	1c02      	adds	r2, r0, #0
   15728:	430a      	orrs	r2, r1
   1572a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   1572c:	2308      	movs	r3, #8
   1572e:	18fa      	adds	r2, r7, r3
   15730:	6878      	ldr	r0, [r7, #4]
   15732:	2301      	movs	r3, #1
   15734:	2111      	movs	r1, #17
   15736:	4c05      	ldr	r4, [pc, #20]	; (1574c <lsm6dso_gy_full_scale_set+0x68>)
   15738:	47a0      	blx	r4
   1573a:	0003      	movs	r3, r0
   1573c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   1573e:	68fb      	ldr	r3, [r7, #12]
}
   15740:	0018      	movs	r0, r3
   15742:	46bd      	mov	sp, r7
   15744:	b005      	add	sp, #20
   15746:	bd90      	pop	{r4, r7, pc}
   15748:	000152f1 	.word	0x000152f1
   1574c:	00015337 	.word	0x00015337

00015750 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
   15750:	b590      	push	{r4, r7, lr}
   15752:	b087      	sub	sp, #28
   15754:	af00      	add	r7, sp, #0
   15756:	6078      	str	r0, [r7, #4]
   15758:	000a      	movs	r2, r1
   1575a:	1cfb      	adds	r3, r7, #3
   1575c:	701a      	strb	r2, [r3, #0]
  lsm6dso_odr_g_t odr_gy =  val;
   1575e:	2317      	movs	r3, #23
   15760:	18fb      	adds	r3, r7, r3
   15762:	1cfa      	adds	r2, r7, #3
   15764:	7812      	ldrb	r2, [r2, #0]
   15766:	701a      	strb	r2, [r3, #0]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
   15768:	230c      	movs	r3, #12
   1576a:	18fa      	adds	r2, r7, r3
   1576c:	687b      	ldr	r3, [r7, #4]
   1576e:	0011      	movs	r1, r2
   15770:	0018      	movs	r0, r3
   15772:	4ba4      	ldr	r3, [pc, #656]	; (15a04 <lsm6dso_gy_data_rate_set+0x2b4>)
   15774:	4798      	blx	r3
   15776:	0003      	movs	r3, r0
   15778:	613b      	str	r3, [r7, #16]

  if (ret == 0)
   1577a:	693b      	ldr	r3, [r7, #16]
   1577c:	2b00      	cmp	r3, #0
   1577e:	d000      	beq.n	15782 <lsm6dso_gy_data_rate_set+0x32>
   15780:	e113      	b.n	159aa <lsm6dso_gy_data_rate_set+0x25a>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   15782:	230c      	movs	r3, #12
   15784:	18fb      	adds	r3, r7, r3
   15786:	781b      	ldrb	r3, [r3, #0]
   15788:	07db      	lsls	r3, r3, #31
   1578a:	0fdb      	lsrs	r3, r3, #31
   1578c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   1578e:	230c      	movs	r3, #12
   15790:	18fb      	adds	r3, r7, r3
   15792:	781b      	ldrb	r3, [r3, #0]
   15794:	079b      	lsls	r3, r3, #30
   15796:	0fdb      	lsrs	r3, r3, #31
   15798:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   1579a:	4313      	orrs	r3, r2
   1579c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   1579e:	230c      	movs	r3, #12
   157a0:	18fb      	adds	r3, r7, r3
   157a2:	781b      	ldrb	r3, [r3, #0]
   157a4:	075b      	lsls	r3, r3, #29
   157a6:	0fdb      	lsrs	r3, r3, #31
   157a8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
   157aa:	4313      	orrs	r3, r2
   157ac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   157ae:	230c      	movs	r3, #12
   157b0:	18fb      	adds	r3, r7, r3
   157b2:	781b      	ldrb	r3, [r3, #0]
   157b4:	071b      	lsls	r3, r3, #28
   157b6:	0fdb      	lsrs	r3, r3, #31
   157b8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
   157ba:	4313      	orrs	r3, r2
   157bc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   157be:	230c      	movs	r3, #12
   157c0:	18fb      	adds	r3, r7, r3
   157c2:	781b      	ldrb	r3, [r3, #0]
   157c4:	06db      	lsls	r3, r3, #27
   157c6:	0fdb      	lsrs	r3, r3, #31
   157c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
   157ca:	4313      	orrs	r3, r2
   157cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   157ce:	230c      	movs	r3, #12
   157d0:	18fb      	adds	r3, r7, r3
   157d2:	781b      	ldrb	r3, [r3, #0]
   157d4:	069b      	lsls	r3, r3, #26
   157d6:	0fdb      	lsrs	r3, r3, #31
   157d8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
   157da:	4313      	orrs	r3, r2
   157dc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   157de:	230c      	movs	r3, #12
   157e0:	18fb      	adds	r3, r7, r3
   157e2:	781b      	ldrb	r3, [r3, #0]
   157e4:	065b      	lsls	r3, r3, #25
   157e6:	0fdb      	lsrs	r3, r3, #31
   157e8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
   157ea:	4313      	orrs	r3, r2
   157ec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   157ee:	230c      	movs	r3, #12
   157f0:	18fb      	adds	r3, r7, r3
   157f2:	781b      	ldrb	r3, [r3, #0]
   157f4:	061b      	lsls	r3, r3, #24
   157f6:	0fdb      	lsrs	r3, r3, #31
   157f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
   157fa:	4313      	orrs	r3, r2
   157fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   157fe:	230c      	movs	r3, #12
   15800:	18fb      	adds	r3, r7, r3
   15802:	785b      	ldrb	r3, [r3, #1]
   15804:	07db      	lsls	r3, r3, #31
   15806:	0fdb      	lsrs	r3, r3, #31
   15808:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
   1580a:	4313      	orrs	r3, r2
   1580c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   1580e:	230c      	movs	r3, #12
   15810:	18fb      	adds	r3, r7, r3
   15812:	785b      	ldrb	r3, [r3, #1]
   15814:	079b      	lsls	r3, r3, #30
   15816:	0fdb      	lsrs	r3, r3, #31
   15818:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
   1581a:	4313      	orrs	r3, r2
   1581c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   1581e:	230c      	movs	r3, #12
   15820:	18fb      	adds	r3, r7, r3
   15822:	785b      	ldrb	r3, [r3, #1]
   15824:	075b      	lsls	r3, r3, #29
   15826:	0fdb      	lsrs	r3, r3, #31
   15828:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
   1582a:	4313      	orrs	r3, r2
   1582c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   1582e:	230c      	movs	r3, #12
   15830:	18fb      	adds	r3, r7, r3
   15832:	785b      	ldrb	r3, [r3, #1]
   15834:	071b      	lsls	r3, r3, #28
   15836:	0fdb      	lsrs	r3, r3, #31
   15838:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
   1583a:	4313      	orrs	r3, r2
   1583c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   1583e:	230c      	movs	r3, #12
   15840:	18fb      	adds	r3, r7, r3
   15842:	785b      	ldrb	r3, [r3, #1]
   15844:	06db      	lsls	r3, r3, #27
   15846:	0fdb      	lsrs	r3, r3, #31
   15848:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
   1584a:	4313      	orrs	r3, r2
   1584c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   1584e:	230c      	movs	r3, #12
   15850:	18fb      	adds	r3, r7, r3
   15852:	785b      	ldrb	r3, [r3, #1]
   15854:	069b      	lsls	r3, r3, #26
   15856:	0fdb      	lsrs	r3, r3, #31
   15858:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
   1585a:	4313      	orrs	r3, r2
   1585c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   1585e:	230c      	movs	r3, #12
   15860:	18fb      	adds	r3, r7, r3
   15862:	785b      	ldrb	r3, [r3, #1]
   15864:	065b      	lsls	r3, r3, #25
   15866:	0fdb      	lsrs	r3, r3, #31
   15868:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
   1586a:	4313      	orrs	r3, r2
   1586c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
   1586e:	230c      	movs	r3, #12
   15870:	18fb      	adds	r3, r7, r3
   15872:	785b      	ldrb	r3, [r3, #1]
   15874:	061b      	lsls	r3, r3, #24
   15876:	0fdb      	lsrs	r3, r3, #31
   15878:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
   1587a:	4313      	orrs	r3, r2
   1587c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
   1587e:	2b01      	cmp	r3, #1
   15880:	d000      	beq.n	15884 <lsm6dso_gy_data_rate_set+0x134>
   15882:	e092      	b.n	159aa <lsm6dso_gy_data_rate_set+0x25a>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
   15884:	230b      	movs	r3, #11
   15886:	18fa      	adds	r2, r7, r3
   15888:	687b      	ldr	r3, [r7, #4]
   1588a:	0011      	movs	r1, r2
   1588c:	0018      	movs	r0, r3
   1588e:	4b5e      	ldr	r3, [pc, #376]	; (15a08 <lsm6dso_gy_data_rate_set+0x2b8>)
   15890:	4798      	blx	r3
   15892:	0003      	movs	r3, r0
   15894:	613b      	str	r3, [r7, #16]

      if (ret == 0)
   15896:	693b      	ldr	r3, [r7, #16]
   15898:	2b00      	cmp	r3, #0
   1589a:	d000      	beq.n	1589e <lsm6dso_gy_data_rate_set+0x14e>
   1589c:	e085      	b.n	159aa <lsm6dso_gy_data_rate_set+0x25a>
      {
        switch (fsm_odr)
   1589e:	230b      	movs	r3, #11
   158a0:	18fb      	adds	r3, r7, r3
   158a2:	781b      	ldrb	r3, [r3, #0]
   158a4:	2b01      	cmp	r3, #1
   158a6:	d017      	beq.n	158d8 <lsm6dso_gy_data_rate_set+0x188>
   158a8:	dc02      	bgt.n	158b0 <lsm6dso_gy_data_rate_set+0x160>
   158aa:	2b00      	cmp	r3, #0
   158ac:	d005      	beq.n	158ba <lsm6dso_gy_data_rate_set+0x16a>
   158ae:	e076      	b.n	1599e <lsm6dso_gy_data_rate_set+0x24e>
   158b0:	2b02      	cmp	r3, #2
   158b2:	d029      	beq.n	15908 <lsm6dso_gy_data_rate_set+0x1b8>
   158b4:	2b03      	cmp	r3, #3
   158b6:	d048      	beq.n	1594a <lsm6dso_gy_data_rate_set+0x1fa>
   158b8:	e071      	b.n	1599e <lsm6dso_gy_data_rate_set+0x24e>
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
   158ba:	1cfb      	adds	r3, r7, #3
   158bc:	781b      	ldrb	r3, [r3, #0]
   158be:	2b00      	cmp	r3, #0
   158c0:	d104      	bne.n	158cc <lsm6dso_gy_data_rate_set+0x17c>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
   158c2:	2317      	movs	r3, #23
   158c4:	18fb      	adds	r3, r7, r3
   158c6:	2201      	movs	r2, #1
   158c8:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   158ca:	e06e      	b.n	159aa <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   158cc:	2317      	movs	r3, #23
   158ce:	18fb      	adds	r3, r7, r3
   158d0:	1cfa      	adds	r2, r7, #3
   158d2:	7812      	ldrb	r2, [r2, #0]
   158d4:	701a      	strb	r2, [r3, #0]
            break;
   158d6:	e068      	b.n	159aa <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   158d8:	1cfb      	adds	r3, r7, #3
   158da:	781b      	ldrb	r3, [r3, #0]
   158dc:	2b00      	cmp	r3, #0
   158de:	d104      	bne.n	158ea <lsm6dso_gy_data_rate_set+0x19a>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
   158e0:	2317      	movs	r3, #23
   158e2:	18fb      	adds	r3, r7, r3
   158e4:	2202      	movs	r2, #2
   158e6:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   158e8:	e05f      	b.n	159aa <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   158ea:	1cfb      	adds	r3, r7, #3
   158ec:	781b      	ldrb	r3, [r3, #0]
   158ee:	2b01      	cmp	r3, #1
   158f0:	d104      	bne.n	158fc <lsm6dso_gy_data_rate_set+0x1ac>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
   158f2:	2317      	movs	r3, #23
   158f4:	18fb      	adds	r3, r7, r3
   158f6:	2202      	movs	r2, #2
   158f8:	701a      	strb	r2, [r3, #0]
            break;
   158fa:	e056      	b.n	159aa <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   158fc:	2317      	movs	r3, #23
   158fe:	18fb      	adds	r3, r7, r3
   15900:	1cfa      	adds	r2, r7, #3
   15902:	7812      	ldrb	r2, [r2, #0]
   15904:	701a      	strb	r2, [r3, #0]
            break;
   15906:	e050      	b.n	159aa <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   15908:	1cfb      	adds	r3, r7, #3
   1590a:	781b      	ldrb	r3, [r3, #0]
   1590c:	2b00      	cmp	r3, #0
   1590e:	d104      	bne.n	1591a <lsm6dso_gy_data_rate_set+0x1ca>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   15910:	2317      	movs	r3, #23
   15912:	18fb      	adds	r3, r7, r3
   15914:	2203      	movs	r2, #3
   15916:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   15918:	e047      	b.n	159aa <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   1591a:	1cfb      	adds	r3, r7, #3
   1591c:	781b      	ldrb	r3, [r3, #0]
   1591e:	2b01      	cmp	r3, #1
   15920:	d104      	bne.n	1592c <lsm6dso_gy_data_rate_set+0x1dc>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   15922:	2317      	movs	r3, #23
   15924:	18fb      	adds	r3, r7, r3
   15926:	2203      	movs	r2, #3
   15928:	701a      	strb	r2, [r3, #0]
            break;
   1592a:	e03e      	b.n	159aa <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
   1592c:	1cfb      	adds	r3, r7, #3
   1592e:	781b      	ldrb	r3, [r3, #0]
   15930:	2b02      	cmp	r3, #2
   15932:	d104      	bne.n	1593e <lsm6dso_gy_data_rate_set+0x1ee>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
   15934:	2317      	movs	r3, #23
   15936:	18fb      	adds	r3, r7, r3
   15938:	2203      	movs	r2, #3
   1593a:	701a      	strb	r2, [r3, #0]
            break;
   1593c:	e035      	b.n	159aa <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   1593e:	2317      	movs	r3, #23
   15940:	18fb      	adds	r3, r7, r3
   15942:	1cfa      	adds	r2, r7, #3
   15944:	7812      	ldrb	r2, [r2, #0]
   15946:	701a      	strb	r2, [r3, #0]
            break;
   15948:	e02f      	b.n	159aa <lsm6dso_gy_data_rate_set+0x25a>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
   1594a:	1cfb      	adds	r3, r7, #3
   1594c:	781b      	ldrb	r3, [r3, #0]
   1594e:	2b00      	cmp	r3, #0
   15950:	d104      	bne.n	1595c <lsm6dso_gy_data_rate_set+0x20c>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   15952:	2317      	movs	r3, #23
   15954:	18fb      	adds	r3, r7, r3
   15956:	2204      	movs	r2, #4
   15958:	701a      	strb	r2, [r3, #0]
            else
            {
              odr_gy = val;
            }

            break;
   1595a:	e026      	b.n	159aa <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
   1595c:	1cfb      	adds	r3, r7, #3
   1595e:	781b      	ldrb	r3, [r3, #0]
   15960:	2b01      	cmp	r3, #1
   15962:	d104      	bne.n	1596e <lsm6dso_gy_data_rate_set+0x21e>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   15964:	2317      	movs	r3, #23
   15966:	18fb      	adds	r3, r7, r3
   15968:	2204      	movs	r2, #4
   1596a:	701a      	strb	r2, [r3, #0]
            break;
   1596c:	e01d      	b.n	159aa <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_26Hz)
   1596e:	1cfb      	adds	r3, r7, #3
   15970:	781b      	ldrb	r3, [r3, #0]
   15972:	2b02      	cmp	r3, #2
   15974:	d104      	bne.n	15980 <lsm6dso_gy_data_rate_set+0x230>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   15976:	2317      	movs	r3, #23
   15978:	18fb      	adds	r3, r7, r3
   1597a:	2204      	movs	r2, #4
   1597c:	701a      	strb	r2, [r3, #0]
            break;
   1597e:	e014      	b.n	159aa <lsm6dso_gy_data_rate_set+0x25a>
            else if (val == LSM6DSO_GY_ODR_52Hz)
   15980:	1cfb      	adds	r3, r7, #3
   15982:	781b      	ldrb	r3, [r3, #0]
   15984:	2b03      	cmp	r3, #3
   15986:	d104      	bne.n	15992 <lsm6dso_gy_data_rate_set+0x242>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
   15988:	2317      	movs	r3, #23
   1598a:	18fb      	adds	r3, r7, r3
   1598c:	2204      	movs	r2, #4
   1598e:	701a      	strb	r2, [r3, #0]
            break;
   15990:	e00b      	b.n	159aa <lsm6dso_gy_data_rate_set+0x25a>
              odr_gy = val;
   15992:	2317      	movs	r3, #23
   15994:	18fb      	adds	r3, r7, r3
   15996:	1cfa      	adds	r2, r7, #3
   15998:	7812      	ldrb	r2, [r2, #0]
   1599a:	701a      	strb	r2, [r3, #0]
            break;
   1599c:	e005      	b.n	159aa <lsm6dso_gy_data_rate_set+0x25a>

          default:
            odr_gy = val;
   1599e:	2317      	movs	r3, #23
   159a0:	18fb      	adds	r3, r7, r3
   159a2:	1cfa      	adds	r2, r7, #3
   159a4:	7812      	ldrb	r2, [r2, #0]
   159a6:	701a      	strb	r2, [r3, #0]
            break;
   159a8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  if (ret == 0)
   159aa:	693b      	ldr	r3, [r7, #16]
   159ac:	2b00      	cmp	r3, #0
   159ae:	d108      	bne.n	159c2 <lsm6dso_gy_data_rate_set+0x272>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   159b0:	2308      	movs	r3, #8
   159b2:	18fa      	adds	r2, r7, r3
   159b4:	6878      	ldr	r0, [r7, #4]
   159b6:	2301      	movs	r3, #1
   159b8:	2111      	movs	r1, #17
   159ba:	4c14      	ldr	r4, [pc, #80]	; (15a0c <lsm6dso_gy_data_rate_set+0x2bc>)
   159bc:	47a0      	blx	r4
   159be:	0003      	movs	r3, r0
   159c0:	613b      	str	r3, [r7, #16]
  }

  if (ret == 0)
   159c2:	693b      	ldr	r3, [r7, #16]
   159c4:	2b00      	cmp	r3, #0
   159c6:	d118      	bne.n	159fa <lsm6dso_gy_data_rate_set+0x2aa>
  {
    reg.odr_g = (uint8_t) odr_gy;
   159c8:	2317      	movs	r3, #23
   159ca:	18fb      	adds	r3, r7, r3
   159cc:	781b      	ldrb	r3, [r3, #0]
   159ce:	220f      	movs	r2, #15
   159d0:	4013      	ands	r3, r2
   159d2:	b2da      	uxtb	r2, r3
   159d4:	2308      	movs	r3, #8
   159d6:	18fb      	adds	r3, r7, r3
   159d8:	0110      	lsls	r0, r2, #4
   159da:	781a      	ldrb	r2, [r3, #0]
   159dc:	210f      	movs	r1, #15
   159de:	400a      	ands	r2, r1
   159e0:	1c11      	adds	r1, r2, #0
   159e2:	1c02      	adds	r2, r0, #0
   159e4:	430a      	orrs	r2, r1
   159e6:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
   159e8:	2308      	movs	r3, #8
   159ea:	18fa      	adds	r2, r7, r3
   159ec:	6878      	ldr	r0, [r7, #4]
   159ee:	2301      	movs	r3, #1
   159f0:	2111      	movs	r1, #17
   159f2:	4c07      	ldr	r4, [pc, #28]	; (15a10 <lsm6dso_gy_data_rate_set+0x2c0>)
   159f4:	47a0      	blx	r4
   159f6:	0003      	movs	r3, r0
   159f8:	613b      	str	r3, [r7, #16]
  }

  return ret;
   159fa:	693b      	ldr	r3, [r7, #16]
}
   159fc:	0018      	movs	r0, r3
   159fe:	46bd      	mov	sp, r7
   15a00:	b007      	add	sp, #28
   15a02:	bd90      	pop	{r4, r7, pc}
   15a04:	00015efd 	.word	0x00015efd
   15a08:	00015f51 	.word	0x00015f51
   15a0c:	000152f1 	.word	0x000152f1
   15a10:	00015337 	.word	0x00015337

00015a14 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
   15a14:	b590      	push	{r4, r7, lr}
   15a16:	b085      	sub	sp, #20
   15a18:	af00      	add	r7, sp, #0
   15a1a:	6078      	str	r0, [r7, #4]
   15a1c:	000a      	movs	r2, r1
   15a1e:	1cfb      	adds	r3, r7, #3
   15a20:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   15a22:	2308      	movs	r3, #8
   15a24:	18fa      	adds	r2, r7, r3
   15a26:	6878      	ldr	r0, [r7, #4]
   15a28:	2301      	movs	r3, #1
   15a2a:	2112      	movs	r1, #18
   15a2c:	4c12      	ldr	r4, [pc, #72]	; (15a78 <lsm6dso_block_data_update_set+0x64>)
   15a2e:	47a0      	blx	r4
   15a30:	0003      	movs	r3, r0
   15a32:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15a34:	68fb      	ldr	r3, [r7, #12]
   15a36:	2b00      	cmp	r3, #0
   15a38:	d119      	bne.n	15a6e <lsm6dso_block_data_update_set+0x5a>
  {
    reg.bdu = val;
   15a3a:	1cfb      	adds	r3, r7, #3
   15a3c:	781b      	ldrb	r3, [r3, #0]
   15a3e:	2201      	movs	r2, #1
   15a40:	4013      	ands	r3, r2
   15a42:	b2da      	uxtb	r2, r3
   15a44:	2308      	movs	r3, #8
   15a46:	18fb      	adds	r3, r7, r3
   15a48:	2101      	movs	r1, #1
   15a4a:	400a      	ands	r2, r1
   15a4c:	0190      	lsls	r0, r2, #6
   15a4e:	781a      	ldrb	r2, [r3, #0]
   15a50:	2140      	movs	r1, #64	; 0x40
   15a52:	438a      	bics	r2, r1
   15a54:	1c11      	adds	r1, r2, #0
   15a56:	1c02      	adds	r2, r0, #0
   15a58:	430a      	orrs	r2, r1
   15a5a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   15a5c:	2308      	movs	r3, #8
   15a5e:	18fa      	adds	r2, r7, r3
   15a60:	6878      	ldr	r0, [r7, #4]
   15a62:	2301      	movs	r3, #1
   15a64:	2112      	movs	r1, #18
   15a66:	4c05      	ldr	r4, [pc, #20]	; (15a7c <lsm6dso_block_data_update_set+0x68>)
   15a68:	47a0      	blx	r4
   15a6a:	0003      	movs	r3, r0
   15a6c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15a6e:	68fb      	ldr	r3, [r7, #12]
}
   15a70:	0018      	movs	r0, r3
   15a72:	46bd      	mov	sp, r7
   15a74:	b005      	add	sp, #20
   15a76:	bd90      	pop	{r4, r7, pc}
   15a78:	000152f1 	.word	0x000152f1
   15a7c:	00015337 	.word	0x00015337

00015a80 <lsm6dso_xl_offset_weight_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_offset_weight_set(stmdev_ctx_t *ctx,
                                     lsm6dso_usr_off_w_t val)
{
   15a80:	b590      	push	{r4, r7, lr}
   15a82:	b085      	sub	sp, #20
   15a84:	af00      	add	r7, sp, #0
   15a86:	6078      	str	r0, [r7, #4]
   15a88:	000a      	movs	r2, r1
   15a8a:	1cfb      	adds	r3, r7, #3
   15a8c:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl6_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
   15a8e:	2308      	movs	r3, #8
   15a90:	18fa      	adds	r2, r7, r3
   15a92:	6878      	ldr	r0, [r7, #4]
   15a94:	2301      	movs	r3, #1
   15a96:	2115      	movs	r1, #21
   15a98:	4c12      	ldr	r4, [pc, #72]	; (15ae4 <lsm6dso_xl_offset_weight_set+0x64>)
   15a9a:	47a0      	blx	r4
   15a9c:	0003      	movs	r3, r0
   15a9e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15aa0:	68fb      	ldr	r3, [r7, #12]
   15aa2:	2b00      	cmp	r3, #0
   15aa4:	d119      	bne.n	15ada <lsm6dso_xl_offset_weight_set+0x5a>
  {
    reg.usr_off_w = (uint8_t)val;
   15aa6:	1cfb      	adds	r3, r7, #3
   15aa8:	781b      	ldrb	r3, [r3, #0]
   15aaa:	2201      	movs	r2, #1
   15aac:	4013      	ands	r3, r2
   15aae:	b2da      	uxtb	r2, r3
   15ab0:	2308      	movs	r3, #8
   15ab2:	18fb      	adds	r3, r7, r3
   15ab4:	2101      	movs	r1, #1
   15ab6:	400a      	ands	r2, r1
   15ab8:	00d0      	lsls	r0, r2, #3
   15aba:	781a      	ldrb	r2, [r3, #0]
   15abc:	2108      	movs	r1, #8
   15abe:	438a      	bics	r2, r1
   15ac0:	1c11      	adds	r1, r2, #0
   15ac2:	1c02      	adds	r2, r0, #0
   15ac4:	430a      	orrs	r2, r1
   15ac6:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL6_C, (uint8_t *)&reg, 1);
   15ac8:	2308      	movs	r3, #8
   15aca:	18fa      	adds	r2, r7, r3
   15acc:	6878      	ldr	r0, [r7, #4]
   15ace:	2301      	movs	r3, #1
   15ad0:	2115      	movs	r1, #21
   15ad2:	4c05      	ldr	r4, [pc, #20]	; (15ae8 <lsm6dso_xl_offset_weight_set+0x68>)
   15ad4:	47a0      	blx	r4
   15ad6:	0003      	movs	r3, r0
   15ad8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15ada:	68fb      	ldr	r3, [r7, #12]
}
   15adc:	0018      	movs	r0, r3
   15ade:	46bd      	mov	sp, r7
   15ae0:	b005      	add	sp, #20
   15ae2:	bd90      	pop	{r4, r7, pc}
   15ae4:	000152f1 	.word	0x000152f1
   15ae8:	00015337 	.word	0x00015337

00015aec <lsm6dso_xl_flag_data_ready_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
   15aec:	b590      	push	{r4, r7, lr}
   15aee:	b085      	sub	sp, #20
   15af0:	af00      	add	r7, sp, #0
   15af2:	6078      	str	r0, [r7, #4]
   15af4:	6039      	str	r1, [r7, #0]
  lsm6dso_status_reg_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t *)&reg, 1);
   15af6:	2308      	movs	r3, #8
   15af8:	18fa      	adds	r2, r7, r3
   15afa:	6878      	ldr	r0, [r7, #4]
   15afc:	2301      	movs	r3, #1
   15afe:	211e      	movs	r1, #30
   15b00:	4c08      	ldr	r4, [pc, #32]	; (15b24 <lsm6dso_xl_flag_data_ready_get+0x38>)
   15b02:	47a0      	blx	r4
   15b04:	0003      	movs	r3, r0
   15b06:	60fb      	str	r3, [r7, #12]
  *val = reg.xlda;
   15b08:	2308      	movs	r3, #8
   15b0a:	18fb      	adds	r3, r7, r3
   15b0c:	781b      	ldrb	r3, [r3, #0]
   15b0e:	07db      	lsls	r3, r3, #31
   15b10:	0fdb      	lsrs	r3, r3, #31
   15b12:	b2db      	uxtb	r3, r3
   15b14:	001a      	movs	r2, r3
   15b16:	683b      	ldr	r3, [r7, #0]
   15b18:	701a      	strb	r2, [r3, #0]

  return ret;
   15b1a:	68fb      	ldr	r3, [r7, #12]
}
   15b1c:	0018      	movs	r0, r3
   15b1e:	46bd      	mov	sp, r7
   15b20:	b005      	add	sp, #20
   15b22:	bd90      	pop	{r4, r7, pc}
   15b24:	000152f1 	.word	0x000152f1

00015b28 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
   15b28:	b590      	push	{r4, r7, lr}
   15b2a:	b087      	sub	sp, #28
   15b2c:	af00      	add	r7, sp, #0
   15b2e:	6078      	str	r0, [r7, #4]
   15b30:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
   15b32:	230c      	movs	r3, #12
   15b34:	18fa      	adds	r2, r7, r3
   15b36:	6878      	ldr	r0, [r7, #4]
   15b38:	2306      	movs	r3, #6
   15b3a:	2128      	movs	r1, #40	; 0x28
   15b3c:	4c26      	ldr	r4, [pc, #152]	; (15bd8 <lsm6dso_acceleration_raw_get+0xb0>)
   15b3e:	47a0      	blx	r4
   15b40:	0003      	movs	r3, r0
   15b42:	617b      	str	r3, [r7, #20]
  val[0] = (int16_t)buff[1];
   15b44:	230c      	movs	r3, #12
   15b46:	18fb      	adds	r3, r7, r3
   15b48:	785b      	ldrb	r3, [r3, #1]
   15b4a:	b21a      	sxth	r2, r3
   15b4c:	683b      	ldr	r3, [r7, #0]
   15b4e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
   15b50:	683b      	ldr	r3, [r7, #0]
   15b52:	2200      	movs	r2, #0
   15b54:	5e9b      	ldrsh	r3, [r3, r2]
   15b56:	b29b      	uxth	r3, r3
   15b58:	021b      	lsls	r3, r3, #8
   15b5a:	b29a      	uxth	r2, r3
   15b5c:	230c      	movs	r3, #12
   15b5e:	18fb      	adds	r3, r7, r3
   15b60:	781b      	ldrb	r3, [r3, #0]
   15b62:	b29b      	uxth	r3, r3
   15b64:	18d3      	adds	r3, r2, r3
   15b66:	b29b      	uxth	r3, r3
   15b68:	b21a      	sxth	r2, r3
   15b6a:	683b      	ldr	r3, [r7, #0]
   15b6c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
   15b6e:	683b      	ldr	r3, [r7, #0]
   15b70:	3302      	adds	r3, #2
   15b72:	220c      	movs	r2, #12
   15b74:	18ba      	adds	r2, r7, r2
   15b76:	78d2      	ldrb	r2, [r2, #3]
   15b78:	b212      	sxth	r2, r2
   15b7a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
   15b7c:	683b      	ldr	r3, [r7, #0]
   15b7e:	3302      	adds	r3, #2
   15b80:	683a      	ldr	r2, [r7, #0]
   15b82:	3202      	adds	r2, #2
   15b84:	2100      	movs	r1, #0
   15b86:	5e52      	ldrsh	r2, [r2, r1]
   15b88:	b292      	uxth	r2, r2
   15b8a:	0212      	lsls	r2, r2, #8
   15b8c:	b291      	uxth	r1, r2
   15b8e:	220c      	movs	r2, #12
   15b90:	18ba      	adds	r2, r7, r2
   15b92:	7892      	ldrb	r2, [r2, #2]
   15b94:	b292      	uxth	r2, r2
   15b96:	188a      	adds	r2, r1, r2
   15b98:	b292      	uxth	r2, r2
   15b9a:	b212      	sxth	r2, r2
   15b9c:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
   15b9e:	683b      	ldr	r3, [r7, #0]
   15ba0:	3304      	adds	r3, #4
   15ba2:	220c      	movs	r2, #12
   15ba4:	18ba      	adds	r2, r7, r2
   15ba6:	7952      	ldrb	r2, [r2, #5]
   15ba8:	b212      	sxth	r2, r2
   15baa:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
   15bac:	683b      	ldr	r3, [r7, #0]
   15bae:	3304      	adds	r3, #4
   15bb0:	683a      	ldr	r2, [r7, #0]
   15bb2:	3204      	adds	r2, #4
   15bb4:	2100      	movs	r1, #0
   15bb6:	5e52      	ldrsh	r2, [r2, r1]
   15bb8:	b292      	uxth	r2, r2
   15bba:	0212      	lsls	r2, r2, #8
   15bbc:	b291      	uxth	r1, r2
   15bbe:	220c      	movs	r2, #12
   15bc0:	18ba      	adds	r2, r7, r2
   15bc2:	7912      	ldrb	r2, [r2, #4]
   15bc4:	b292      	uxth	r2, r2
   15bc6:	188a      	adds	r2, r1, r2
   15bc8:	b292      	uxth	r2, r2
   15bca:	b212      	sxth	r2, r2
   15bcc:	801a      	strh	r2, [r3, #0]

  return ret;
   15bce:	697b      	ldr	r3, [r7, #20]
}
   15bd0:	0018      	movs	r0, r3
   15bd2:	46bd      	mov	sp, r7
   15bd4:	b007      	add	sp, #28
   15bd6:	bd90      	pop	{r4, r7, pc}
   15bd8:	000152f1 	.word	0x000152f1

00015bdc <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
   15bdc:	b590      	push	{r4, r7, lr}
   15bde:	b085      	sub	sp, #20
   15be0:	af00      	add	r7, sp, #0
   15be2:	6078      	str	r0, [r7, #4]
   15be4:	000a      	movs	r2, r1
   15be6:	1cfb      	adds	r3, r7, #3
   15be8:	701a      	strb	r2, [r3, #0]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
   15bea:	2308      	movs	r3, #8
   15bec:	18fa      	adds	r2, r7, r3
   15bee:	6878      	ldr	r0, [r7, #4]
   15bf0:	2301      	movs	r3, #1
   15bf2:	2101      	movs	r1, #1
   15bf4:	4c11      	ldr	r4, [pc, #68]	; (15c3c <lsm6dso_mem_bank_set+0x60>)
   15bf6:	47a0      	blx	r4
   15bf8:	0003      	movs	r3, r0
   15bfa:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15bfc:	68fb      	ldr	r3, [r7, #12]
   15bfe:	2b00      	cmp	r3, #0
   15c00:	d117      	bne.n	15c32 <lsm6dso_mem_bank_set+0x56>
  {
    reg.reg_access = (uint8_t)val;
   15c02:	1cfb      	adds	r3, r7, #3
   15c04:	781b      	ldrb	r3, [r3, #0]
   15c06:	2203      	movs	r2, #3
   15c08:	4013      	ands	r3, r2
   15c0a:	b2da      	uxtb	r2, r3
   15c0c:	2308      	movs	r3, #8
   15c0e:	18fb      	adds	r3, r7, r3
   15c10:	0190      	lsls	r0, r2, #6
   15c12:	781a      	ldrb	r2, [r3, #0]
   15c14:	213f      	movs	r1, #63	; 0x3f
   15c16:	400a      	ands	r2, r1
   15c18:	1c11      	adds	r1, r2, #0
   15c1a:	1c02      	adds	r2, r0, #0
   15c1c:	430a      	orrs	r2, r1
   15c1e:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
   15c20:	2308      	movs	r3, #8
   15c22:	18fa      	adds	r2, r7, r3
   15c24:	6878      	ldr	r0, [r7, #4]
   15c26:	2301      	movs	r3, #1
   15c28:	2101      	movs	r1, #1
   15c2a:	4c05      	ldr	r4, [pc, #20]	; (15c40 <lsm6dso_mem_bank_set+0x64>)
   15c2c:	47a0      	blx	r4
   15c2e:	0003      	movs	r3, r0
   15c30:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15c32:	68fb      	ldr	r3, [r7, #12]
}
   15c34:	0018      	movs	r0, r3
   15c36:	46bd      	mov	sp, r7
   15c38:	b005      	add	sp, #20
   15c3a:	bd90      	pop	{r4, r7, pc}
   15c3c:	000152f1 	.word	0x000152f1
   15c40:	00015337 	.word	0x00015337

00015c44 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
   15c44:	b590      	push	{r4, r7, lr}
   15c46:	b085      	sub	sp, #20
   15c48:	af00      	add	r7, sp, #0
   15c4a:	6078      	str	r0, [r7, #4]
   15c4c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
   15c4e:	683a      	ldr	r2, [r7, #0]
   15c50:	6878      	ldr	r0, [r7, #4]
   15c52:	2301      	movs	r3, #1
   15c54:	210f      	movs	r1, #15
   15c56:	4c04      	ldr	r4, [pc, #16]	; (15c68 <lsm6dso_device_id_get+0x24>)
   15c58:	47a0      	blx	r4
   15c5a:	0003      	movs	r3, r0
   15c5c:	60fb      	str	r3, [r7, #12]

  return ret;
   15c5e:	68fb      	ldr	r3, [r7, #12]
}
   15c60:	0018      	movs	r0, r3
   15c62:	46bd      	mov	sp, r7
   15c64:	b005      	add	sp, #20
   15c66:	bd90      	pop	{r4, r7, pc}
   15c68:	000152f1 	.word	0x000152f1

00015c6c <lsm6dso_reset_set>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
   15c6c:	b590      	push	{r4, r7, lr}
   15c6e:	b085      	sub	sp, #20
   15c70:	af00      	add	r7, sp, #0
   15c72:	6078      	str	r0, [r7, #4]
   15c74:	000a      	movs	r2, r1
   15c76:	1cfb      	adds	r3, r7, #3
   15c78:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   15c7a:	2308      	movs	r3, #8
   15c7c:	18fa      	adds	r2, r7, r3
   15c7e:	6878      	ldr	r0, [r7, #4]
   15c80:	2301      	movs	r3, #1
   15c82:	2112      	movs	r1, #18
   15c84:	4c12      	ldr	r4, [pc, #72]	; (15cd0 <lsm6dso_reset_set+0x64>)
   15c86:	47a0      	blx	r4
   15c88:	0003      	movs	r3, r0
   15c8a:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15c8c:	68fb      	ldr	r3, [r7, #12]
   15c8e:	2b00      	cmp	r3, #0
   15c90:	d119      	bne.n	15cc6 <lsm6dso_reset_set+0x5a>
  {
    reg.sw_reset = val;
   15c92:	1cfb      	adds	r3, r7, #3
   15c94:	781b      	ldrb	r3, [r3, #0]
   15c96:	2201      	movs	r2, #1
   15c98:	4013      	ands	r3, r2
   15c9a:	b2da      	uxtb	r2, r3
   15c9c:	2308      	movs	r3, #8
   15c9e:	18fb      	adds	r3, r7, r3
   15ca0:	2101      	movs	r1, #1
   15ca2:	400a      	ands	r2, r1
   15ca4:	0010      	movs	r0, r2
   15ca6:	781a      	ldrb	r2, [r3, #0]
   15ca8:	2101      	movs	r1, #1
   15caa:	438a      	bics	r2, r1
   15cac:	1c11      	adds	r1, r2, #0
   15cae:	1c02      	adds	r2, r0, #0
   15cb0:	430a      	orrs	r2, r1
   15cb2:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   15cb4:	2308      	movs	r3, #8
   15cb6:	18fa      	adds	r2, r7, r3
   15cb8:	6878      	ldr	r0, [r7, #4]
   15cba:	2301      	movs	r3, #1
   15cbc:	2112      	movs	r1, #18
   15cbe:	4c05      	ldr	r4, [pc, #20]	; (15cd4 <lsm6dso_reset_set+0x68>)
   15cc0:	47a0      	blx	r4
   15cc2:	0003      	movs	r3, r0
   15cc4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15cc6:	68fb      	ldr	r3, [r7, #12]
}
   15cc8:	0018      	movs	r0, r3
   15cca:	46bd      	mov	sp, r7
   15ccc:	b005      	add	sp, #20
   15cce:	bd90      	pop	{r4, r7, pc}
   15cd0:	000152f1 	.word	0x000152f1
   15cd4:	00015337 	.word	0x00015337

00015cd8 <lsm6dso_reset_get>:
  * @param  val      change the values of sw_reset in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
   15cd8:	b590      	push	{r4, r7, lr}
   15cda:	b085      	sub	sp, #20
   15cdc:	af00      	add	r7, sp, #0
   15cde:	6078      	str	r0, [r7, #4]
   15ce0:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
   15ce2:	2308      	movs	r3, #8
   15ce4:	18fa      	adds	r2, r7, r3
   15ce6:	6878      	ldr	r0, [r7, #4]
   15ce8:	2301      	movs	r3, #1
   15cea:	2112      	movs	r1, #18
   15cec:	4c08      	ldr	r4, [pc, #32]	; (15d10 <lsm6dso_reset_get+0x38>)
   15cee:	47a0      	blx	r4
   15cf0:	0003      	movs	r3, r0
   15cf2:	60fb      	str	r3, [r7, #12]
  *val = reg.sw_reset;
   15cf4:	2308      	movs	r3, #8
   15cf6:	18fb      	adds	r3, r7, r3
   15cf8:	781b      	ldrb	r3, [r3, #0]
   15cfa:	07db      	lsls	r3, r3, #31
   15cfc:	0fdb      	lsrs	r3, r3, #31
   15cfe:	b2db      	uxtb	r3, r3
   15d00:	001a      	movs	r2, r3
   15d02:	683b      	ldr	r3, [r7, #0]
   15d04:	701a      	strb	r2, [r3, #0]

  return ret;
   15d06:	68fb      	ldr	r3, [r7, #12]
}
   15d08:	0018      	movs	r0, r3
   15d0a:	46bd      	mov	sp, r7
   15d0c:	b005      	add	sp, #20
   15d0e:	bd90      	pop	{r4, r7, pc}
   15d10:	000152f1 	.word	0x000152f1

00015d14 <lsm6dso_xl_filter_lp2_set>:
  * @param  val      change the values of lpf2_xl_en in reg CTRL1_XL
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_filter_lp2_set(stmdev_ctx_t *ctx, uint8_t val)
{
   15d14:	b590      	push	{r4, r7, lr}
   15d16:	b085      	sub	sp, #20
   15d18:	af00      	add	r7, sp, #0
   15d1a:	6078      	str	r0, [r7, #4]
   15d1c:	000a      	movs	r2, r1
   15d1e:	1cfb      	adds	r3, r7, #3
   15d20:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   15d22:	2308      	movs	r3, #8
   15d24:	18fa      	adds	r2, r7, r3
   15d26:	6878      	ldr	r0, [r7, #4]
   15d28:	2301      	movs	r3, #1
   15d2a:	2110      	movs	r1, #16
   15d2c:	4c12      	ldr	r4, [pc, #72]	; (15d78 <lsm6dso_xl_filter_lp2_set+0x64>)
   15d2e:	47a0      	blx	r4
   15d30:	0003      	movs	r3, r0
   15d32:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15d34:	68fb      	ldr	r3, [r7, #12]
   15d36:	2b00      	cmp	r3, #0
   15d38:	d119      	bne.n	15d6e <lsm6dso_xl_filter_lp2_set+0x5a>
  {
    reg.lpf2_xl_en = val;
   15d3a:	1cfb      	adds	r3, r7, #3
   15d3c:	781b      	ldrb	r3, [r3, #0]
   15d3e:	2201      	movs	r2, #1
   15d40:	4013      	ands	r3, r2
   15d42:	b2da      	uxtb	r2, r3
   15d44:	2308      	movs	r3, #8
   15d46:	18fb      	adds	r3, r7, r3
   15d48:	2101      	movs	r1, #1
   15d4a:	400a      	ands	r2, r1
   15d4c:	1890      	adds	r0, r2, r2
   15d4e:	781a      	ldrb	r2, [r3, #0]
   15d50:	2102      	movs	r1, #2
   15d52:	438a      	bics	r2, r1
   15d54:	1c11      	adds	r1, r2, #0
   15d56:	1c02      	adds	r2, r0, #0
   15d58:	430a      	orrs	r2, r1
   15d5a:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
   15d5c:	2308      	movs	r3, #8
   15d5e:	18fa      	adds	r2, r7, r3
   15d60:	6878      	ldr	r0, [r7, #4]
   15d62:	2301      	movs	r3, #1
   15d64:	2110      	movs	r1, #16
   15d66:	4c05      	ldr	r4, [pc, #20]	; (15d7c <lsm6dso_xl_filter_lp2_set+0x68>)
   15d68:	47a0      	blx	r4
   15d6a:	0003      	movs	r3, r0
   15d6c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15d6e:	68fb      	ldr	r3, [r7, #12]
}
   15d70:	0018      	movs	r0, r3
   15d72:	46bd      	mov	sp, r7
   15d74:	b005      	add	sp, #20
   15d76:	bd90      	pop	{r4, r7, pc}
   15d78:	000152f1 	.word	0x000152f1
   15d7c:	00015337 	.word	0x00015337

00015d80 <lsm6dso_xl_hp_path_on_out_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                      lsm6dso_hp_slope_xl_en_t val)
{
   15d80:	b590      	push	{r4, r7, lr}
   15d82:	b085      	sub	sp, #20
   15d84:	af00      	add	r7, sp, #0
   15d86:	6078      	str	r0, [r7, #4]
   15d88:	000a      	movs	r2, r1
   15d8a:	1cfb      	adds	r3, r7, #3
   15d8c:	701a      	strb	r2, [r3, #0]
  lsm6dso_ctrl8_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
   15d8e:	2308      	movs	r3, #8
   15d90:	18fa      	adds	r2, r7, r3
   15d92:	6878      	ldr	r0, [r7, #4]
   15d94:	2301      	movs	r3, #1
   15d96:	2117      	movs	r1, #23
   15d98:	4c25      	ldr	r4, [pc, #148]	; (15e30 <lsm6dso_xl_hp_path_on_out_set+0xb0>)
   15d9a:	47a0      	blx	r4
   15d9c:	0003      	movs	r3, r0
   15d9e:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15da0:	68fb      	ldr	r3, [r7, #12]
   15da2:	2b00      	cmp	r3, #0
   15da4:	d13f      	bne.n	15e26 <lsm6dso_xl_hp_path_on_out_set+0xa6>
  {
    reg.hp_slope_xl_en = ((uint8_t)val & 0x10U) >> 4;
   15da6:	1cfb      	adds	r3, r7, #3
   15da8:	781b      	ldrb	r3, [r3, #0]
   15daa:	091b      	lsrs	r3, r3, #4
   15dac:	b2db      	uxtb	r3, r3
   15dae:	1c1a      	adds	r2, r3, #0
   15db0:	2301      	movs	r3, #1
   15db2:	4013      	ands	r3, r2
   15db4:	b2da      	uxtb	r2, r3
   15db6:	2308      	movs	r3, #8
   15db8:	18fb      	adds	r3, r7, r3
   15dba:	2101      	movs	r1, #1
   15dbc:	400a      	ands	r2, r1
   15dbe:	0090      	lsls	r0, r2, #2
   15dc0:	781a      	ldrb	r2, [r3, #0]
   15dc2:	2104      	movs	r1, #4
   15dc4:	438a      	bics	r2, r1
   15dc6:	1c11      	adds	r1, r2, #0
   15dc8:	1c02      	adds	r2, r0, #0
   15dca:	430a      	orrs	r2, r1
   15dcc:	701a      	strb	r2, [r3, #0]
    reg.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
   15dce:	1cfb      	adds	r3, r7, #3
   15dd0:	781b      	ldrb	r3, [r3, #0]
   15dd2:	095b      	lsrs	r3, r3, #5
   15dd4:	b2db      	uxtb	r3, r3
   15dd6:	1c1a      	adds	r2, r3, #0
   15dd8:	2301      	movs	r3, #1
   15dda:	4013      	ands	r3, r2
   15ddc:	b2da      	uxtb	r2, r3
   15dde:	2308      	movs	r3, #8
   15de0:	18fb      	adds	r3, r7, r3
   15de2:	2101      	movs	r1, #1
   15de4:	400a      	ands	r2, r1
   15de6:	0110      	lsls	r0, r2, #4
   15de8:	781a      	ldrb	r2, [r3, #0]
   15dea:	2110      	movs	r1, #16
   15dec:	438a      	bics	r2, r1
   15dee:	1c11      	adds	r1, r2, #0
   15df0:	1c02      	adds	r2, r0, #0
   15df2:	430a      	orrs	r2, r1
   15df4:	701a      	strb	r2, [r3, #0]
    reg.hpcf_xl = (uint8_t)val & 0x07U;
   15df6:	1cfb      	adds	r3, r7, #3
   15df8:	781b      	ldrb	r3, [r3, #0]
   15dfa:	2207      	movs	r2, #7
   15dfc:	4013      	ands	r3, r2
   15dfe:	b2da      	uxtb	r2, r3
   15e00:	2308      	movs	r3, #8
   15e02:	18fb      	adds	r3, r7, r3
   15e04:	0150      	lsls	r0, r2, #5
   15e06:	781a      	ldrb	r2, [r3, #0]
   15e08:	211f      	movs	r1, #31
   15e0a:	400a      	ands	r2, r1
   15e0c:	1c11      	adds	r1, r2, #0
   15e0e:	1c02      	adds	r2, r0, #0
   15e10:	430a      	orrs	r2, r1
   15e12:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL8_XL, (uint8_t *)&reg, 1);
   15e14:	2308      	movs	r3, #8
   15e16:	18fa      	adds	r2, r7, r3
   15e18:	6878      	ldr	r0, [r7, #4]
   15e1a:	2301      	movs	r3, #1
   15e1c:	2117      	movs	r1, #23
   15e1e:	4c05      	ldr	r4, [pc, #20]	; (15e34 <lsm6dso_xl_hp_path_on_out_set+0xb4>)
   15e20:	47a0      	blx	r4
   15e22:	0003      	movs	r3, r0
   15e24:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15e26:	68fb      	ldr	r3, [r7, #12]
}
   15e28:	0018      	movs	r0, r3
   15e2a:	46bd      	mov	sp, r7
   15e2c:	b005      	add	sp, #20
   15e2e:	bd90      	pop	{r4, r7, pc}
   15e30:	000152f1 	.word	0x000152f1
   15e34:	00015337 	.word	0x00015337

00015e38 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
   15e38:	b590      	push	{r4, r7, lr}
   15e3a:	b087      	sub	sp, #28
   15e3c:	af00      	add	r7, sp, #0
   15e3e:	6078      	str	r0, [r7, #4]
   15e40:	000a      	movs	r2, r1
   15e42:	1cfb      	adds	r3, r7, #3
   15e44:	701a      	strb	r2, [r3, #0]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
   15e46:	230c      	movs	r3, #12
   15e48:	18fa      	adds	r2, r7, r3
   15e4a:	6878      	ldr	r0, [r7, #4]
   15e4c:	2301      	movs	r3, #1
   15e4e:	2118      	movs	r1, #24
   15e50:	4c28      	ldr	r4, [pc, #160]	; (15ef4 <lsm6dso_i3c_disable_set+0xbc>)
   15e52:	47a0      	blx	r4
   15e54:	0003      	movs	r3, r0
   15e56:	617b      	str	r3, [r7, #20]

  if (ret == 0)
   15e58:	697b      	ldr	r3, [r7, #20]
   15e5a:	2b00      	cmp	r3, #0
   15e5c:	d11c      	bne.n	15e98 <lsm6dso_i3c_disable_set+0x60>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
   15e5e:	1cfb      	adds	r3, r7, #3
   15e60:	781b      	ldrb	r3, [r3, #0]
   15e62:	09db      	lsrs	r3, r3, #7
   15e64:	b2db      	uxtb	r3, r3
   15e66:	1c1a      	adds	r2, r3, #0
   15e68:	2301      	movs	r3, #1
   15e6a:	4013      	ands	r3, r2
   15e6c:	b2da      	uxtb	r2, r3
   15e6e:	230c      	movs	r3, #12
   15e70:	18fb      	adds	r3, r7, r3
   15e72:	2101      	movs	r1, #1
   15e74:	400a      	ands	r2, r1
   15e76:	1890      	adds	r0, r2, r2
   15e78:	781a      	ldrb	r2, [r3, #0]
   15e7a:	2102      	movs	r1, #2
   15e7c:	438a      	bics	r2, r1
   15e7e:	1c11      	adds	r1, r2, #0
   15e80:	1c02      	adds	r2, r0, #0
   15e82:	430a      	orrs	r2, r1
   15e84:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
   15e86:	230c      	movs	r3, #12
   15e88:	18fa      	adds	r2, r7, r3
   15e8a:	6878      	ldr	r0, [r7, #4]
   15e8c:	2301      	movs	r3, #1
   15e8e:	2118      	movs	r1, #24
   15e90:	4c19      	ldr	r4, [pc, #100]	; (15ef8 <lsm6dso_i3c_disable_set+0xc0>)
   15e92:	47a0      	blx	r4
   15e94:	0003      	movs	r3, r0
   15e96:	617b      	str	r3, [r7, #20]
  }

  if (ret == 0)
   15e98:	697b      	ldr	r3, [r7, #20]
   15e9a:	2b00      	cmp	r3, #0
   15e9c:	d108      	bne.n	15eb0 <lsm6dso_i3c_disable_set+0x78>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
   15e9e:	2310      	movs	r3, #16
   15ea0:	18fa      	adds	r2, r7, r3
   15ea2:	6878      	ldr	r0, [r7, #4]
   15ea4:	2301      	movs	r3, #1
   15ea6:	2162      	movs	r1, #98	; 0x62
   15ea8:	4c12      	ldr	r4, [pc, #72]	; (15ef4 <lsm6dso_i3c_disable_set+0xbc>)
   15eaa:	47a0      	blx	r4
   15eac:	0003      	movs	r3, r0
   15eae:	617b      	str	r3, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
   15eb0:	697b      	ldr	r3, [r7, #20]
   15eb2:	2b00      	cmp	r3, #0
   15eb4:	d119      	bne.n	15eea <lsm6dso_i3c_disable_set+0xb2>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
   15eb6:	1cfb      	adds	r3, r7, #3
   15eb8:	781b      	ldrb	r3, [r3, #0]
   15eba:	2203      	movs	r2, #3
   15ebc:	4013      	ands	r3, r2
   15ebe:	b2da      	uxtb	r2, r3
   15ec0:	2310      	movs	r3, #16
   15ec2:	18fb      	adds	r3, r7, r3
   15ec4:	2103      	movs	r1, #3
   15ec6:	400a      	ands	r2, r1
   15ec8:	00d0      	lsls	r0, r2, #3
   15eca:	781a      	ldrb	r2, [r3, #0]
   15ecc:	2118      	movs	r1, #24
   15ece:	438a      	bics	r2, r1
   15ed0:	1c11      	adds	r1, r2, #0
   15ed2:	1c02      	adds	r2, r0, #0
   15ed4:	430a      	orrs	r2, r1
   15ed6:	701a      	strb	r2, [r3, #0]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
   15ed8:	2310      	movs	r3, #16
   15eda:	18fa      	adds	r2, r7, r3
   15edc:	6878      	ldr	r0, [r7, #4]
   15ede:	2301      	movs	r3, #1
   15ee0:	2162      	movs	r1, #98	; 0x62
   15ee2:	4c05      	ldr	r4, [pc, #20]	; (15ef8 <lsm6dso_i3c_disable_set+0xc0>)
   15ee4:	47a0      	blx	r4
   15ee6:	0003      	movs	r3, r0
   15ee8:	617b      	str	r3, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
   15eea:	697b      	ldr	r3, [r7, #20]
}
   15eec:	0018      	movs	r0, r3
   15eee:	46bd      	mov	sp, r7
   15ef0:	b007      	add	sp, #28
   15ef2:	bd90      	pop	{r4, r7, pc}
   15ef4:	000152f1 	.word	0x000152f1
   15ef8:	00015337 	.word	0x00015337

00015efc <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
   15efc:	b590      	push	{r4, r7, lr}
   15efe:	b085      	sub	sp, #20
   15f00:	af00      	add	r7, sp, #0
   15f02:	6078      	str	r0, [r7, #4]
   15f04:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
   15f06:	687b      	ldr	r3, [r7, #4]
   15f08:	2102      	movs	r1, #2
   15f0a:	0018      	movs	r0, r3
   15f0c:	4b0e      	ldr	r3, [pc, #56]	; (15f48 <lsm6dso_fsm_enable_get+0x4c>)
   15f0e:	4798      	blx	r3
   15f10:	0003      	movs	r3, r0
   15f12:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15f14:	68fb      	ldr	r3, [r7, #12]
   15f16:	2b00      	cmp	r3, #0
   15f18:	d107      	bne.n	15f2a <lsm6dso_fsm_enable_get+0x2e>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
   15f1a:	683a      	ldr	r2, [r7, #0]
   15f1c:	6878      	ldr	r0, [r7, #4]
   15f1e:	2302      	movs	r3, #2
   15f20:	2146      	movs	r1, #70	; 0x46
   15f22:	4c0a      	ldr	r4, [pc, #40]	; (15f4c <lsm6dso_fsm_enable_get+0x50>)
   15f24:	47a0      	blx	r4
   15f26:	0003      	movs	r3, r0
   15f28:	60fb      	str	r3, [r7, #12]
  }

  if (ret == 0)
   15f2a:	68fb      	ldr	r3, [r7, #12]
   15f2c:	2b00      	cmp	r3, #0
   15f2e:	d106      	bne.n	15f3e <lsm6dso_fsm_enable_get+0x42>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
   15f30:	687b      	ldr	r3, [r7, #4]
   15f32:	2100      	movs	r1, #0
   15f34:	0018      	movs	r0, r3
   15f36:	4b04      	ldr	r3, [pc, #16]	; (15f48 <lsm6dso_fsm_enable_get+0x4c>)
   15f38:	4798      	blx	r3
   15f3a:	0003      	movs	r3, r0
   15f3c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15f3e:	68fb      	ldr	r3, [r7, #12]
}
   15f40:	0018      	movs	r0, r3
   15f42:	46bd      	mov	sp, r7
   15f44:	b005      	add	sp, #20
   15f46:	bd90      	pop	{r4, r7, pc}
   15f48:	00015bdd 	.word	0x00015bdd
   15f4c:	000152f1 	.word	0x000152f1

00015f50 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
   15f50:	b590      	push	{r4, r7, lr}
   15f52:	b085      	sub	sp, #20
   15f54:	af00      	add	r7, sp, #0
   15f56:	6078      	str	r0, [r7, #4]
   15f58:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
   15f5a:	687b      	ldr	r3, [r7, #4]
   15f5c:	2102      	movs	r1, #2
   15f5e:	0018      	movs	r0, r3
   15f60:	4b21      	ldr	r3, [pc, #132]	; (15fe8 <lsm6dso_fsm_data_rate_get+0x98>)
   15f62:	4798      	blx	r3
   15f64:	0003      	movs	r3, r0
   15f66:	60fb      	str	r3, [r7, #12]

  if (ret == 0)
   15f68:	68fb      	ldr	r3, [r7, #12]
   15f6a:	2b00      	cmp	r3, #0
   15f6c:	d108      	bne.n	15f80 <lsm6dso_fsm_data_rate_get+0x30>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
   15f6e:	2308      	movs	r3, #8
   15f70:	18fa      	adds	r2, r7, r3
   15f72:	6878      	ldr	r0, [r7, #4]
   15f74:	2301      	movs	r3, #1
   15f76:	215f      	movs	r1, #95	; 0x5f
   15f78:	4c1c      	ldr	r4, [pc, #112]	; (15fec <lsm6dso_fsm_data_rate_get+0x9c>)
   15f7a:	47a0      	blx	r4
   15f7c:	0003      	movs	r3, r0
   15f7e:	60fb      	str	r3, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
   15f80:	68fb      	ldr	r3, [r7, #12]
   15f82:	2b00      	cmp	r3, #0
   15f84:	d12b      	bne.n	15fde <lsm6dso_fsm_data_rate_get+0x8e>
  {
    switch (reg.fsm_odr)
   15f86:	2308      	movs	r3, #8
   15f88:	18fb      	adds	r3, r7, r3
   15f8a:	781b      	ldrb	r3, [r3, #0]
   15f8c:	06db      	lsls	r3, r3, #27
   15f8e:	0f9b      	lsrs	r3, r3, #30
   15f90:	b2db      	uxtb	r3, r3
   15f92:	2b01      	cmp	r3, #1
   15f94:	d00c      	beq.n	15fb0 <lsm6dso_fsm_data_rate_get+0x60>
   15f96:	dc02      	bgt.n	15f9e <lsm6dso_fsm_data_rate_get+0x4e>
   15f98:	2b00      	cmp	r3, #0
   15f9a:	d005      	beq.n	15fa8 <lsm6dso_fsm_data_rate_get+0x58>
   15f9c:	e014      	b.n	15fc8 <lsm6dso_fsm_data_rate_get+0x78>
   15f9e:	2b02      	cmp	r3, #2
   15fa0:	d00a      	beq.n	15fb8 <lsm6dso_fsm_data_rate_get+0x68>
   15fa2:	2b03      	cmp	r3, #3
   15fa4:	d00c      	beq.n	15fc0 <lsm6dso_fsm_data_rate_get+0x70>
   15fa6:	e00f      	b.n	15fc8 <lsm6dso_fsm_data_rate_get+0x78>
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
   15fa8:	683b      	ldr	r3, [r7, #0]
   15faa:	2200      	movs	r2, #0
   15fac:	701a      	strb	r2, [r3, #0]
        break;
   15fae:	e00f      	b.n	15fd0 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
   15fb0:	683b      	ldr	r3, [r7, #0]
   15fb2:	2201      	movs	r2, #1
   15fb4:	701a      	strb	r2, [r3, #0]
        break;
   15fb6:	e00b      	b.n	15fd0 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
   15fb8:	683b      	ldr	r3, [r7, #0]
   15fba:	2202      	movs	r2, #2
   15fbc:	701a      	strb	r2, [r3, #0]
        break;
   15fbe:	e007      	b.n	15fd0 <lsm6dso_fsm_data_rate_get+0x80>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
   15fc0:	683b      	ldr	r3, [r7, #0]
   15fc2:	2203      	movs	r2, #3
   15fc4:	701a      	strb	r2, [r3, #0]
        break;
   15fc6:	e003      	b.n	15fd0 <lsm6dso_fsm_data_rate_get+0x80>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
   15fc8:	683b      	ldr	r3, [r7, #0]
   15fca:	2200      	movs	r2, #0
   15fcc:	701a      	strb	r2, [r3, #0]
        break;
   15fce:	46c0      	nop			; (mov r8, r8)
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
   15fd0:	687b      	ldr	r3, [r7, #4]
   15fd2:	2100      	movs	r1, #0
   15fd4:	0018      	movs	r0, r3
   15fd6:	4b04      	ldr	r3, [pc, #16]	; (15fe8 <lsm6dso_fsm_data_rate_get+0x98>)
   15fd8:	4798      	blx	r3
   15fda:	0003      	movs	r3, r0
   15fdc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
   15fde:	68fb      	ldr	r3, [r7, #12]
}
   15fe0:	0018      	movs	r0, r3
   15fe2:	46bd      	mov	sp, r7
   15fe4:	b005      	add	sp, #20
   15fe6:	bd90      	pop	{r4, r7, pc}
   15fe8:	00015bdd 	.word	0x00015bdd
   15fec:	000152f1 	.word	0x000152f1

00015ff0 <platform_write>:
 * @param[in]   len Length of the data sent
 * @return      Returns what the function "I2cWriteDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static int32_t platform_write(void *handle, uint8_t reg, uint8_t *bufp,uint16_t len)
{
   15ff0:	b580      	push	{r7, lr}
   15ff2:	b086      	sub	sp, #24
   15ff4:	af00      	add	r7, sp, #0
   15ff6:	60f8      	str	r0, [r7, #12]
   15ff8:	0008      	movs	r0, r1
   15ffa:	607a      	str	r2, [r7, #4]
   15ffc:	0019      	movs	r1, r3
   15ffe:	230b      	movs	r3, #11
   16000:	18fb      	adds	r3, r7, r3
   16002:	1c02      	adds	r2, r0, #0
   16004:	701a      	strb	r2, [r3, #0]
   16006:	2308      	movs	r3, #8
   16008:	18fb      	adds	r3, r7, r3
   1600a:	1c0a      	adds	r2, r1, #0
   1600c:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Use the array "msgOutImu" to copy the data to be sent. Remember that the position [0] of the array you send must be the register, and
	//starting from position [1] you can copy the data to be sent. Remember to adjust the length accordingly
	int32_t error = ERROR_NONE;
   1600e:	2300      	movs	r3, #0
   16010:	613b      	str	r3, [r7, #16]
	
	msgOutImu[0] = reg;
   16012:	4b19      	ldr	r3, [pc, #100]	; (16078 <platform_write+0x88>)
   16014:	220b      	movs	r2, #11
   16016:	18ba      	adds	r2, r7, r2
   16018:	7812      	ldrb	r2, [r2, #0]
   1601a:	701a      	strb	r2, [r3, #0]
	//loop through bufp to get message
 	for(int i = 0; i < len; i++)
   1601c:	2300      	movs	r3, #0
   1601e:	617b      	str	r3, [r7, #20]
   16020:	e00a      	b.n	16038 <platform_write+0x48>
 	{
 		msgOutImu[i+1] = bufp[i];
   16022:	697b      	ldr	r3, [r7, #20]
   16024:	3301      	adds	r3, #1
   16026:	697a      	ldr	r2, [r7, #20]
   16028:	6879      	ldr	r1, [r7, #4]
   1602a:	188a      	adds	r2, r1, r2
   1602c:	7811      	ldrb	r1, [r2, #0]
   1602e:	4a12      	ldr	r2, [pc, #72]	; (16078 <platform_write+0x88>)
   16030:	54d1      	strb	r1, [r2, r3]
 	for(int i = 0; i < len; i++)
   16032:	697b      	ldr	r3, [r7, #20]
   16034:	3301      	adds	r3, #1
   16036:	617b      	str	r3, [r7, #20]
   16038:	2308      	movs	r3, #8
   1603a:	18fb      	adds	r3, r7, r3
   1603c:	881a      	ldrh	r2, [r3, #0]
   1603e:	697b      	ldr	r3, [r7, #20]
   16040:	429a      	cmp	r2, r3
   16042:	dcee      	bgt.n	16022 <platform_write+0x32>
 	}
	//save individual data as part of the IMU_DATA struct
	imuData.address = LSM6DSO_I2C_ADD_H;
   16044:	4b0d      	ldr	r3, [pc, #52]	; (1607c <platform_write+0x8c>)
   16046:	226b      	movs	r2, #107	; 0x6b
   16048:	701a      	strb	r2, [r3, #0]
	imuData.lenOut = 1+len;
   1604a:	2308      	movs	r3, #8
   1604c:	18fb      	adds	r3, r7, r3
   1604e:	881b      	ldrh	r3, [r3, #0]
   16050:	3301      	adds	r3, #1
   16052:	b29a      	uxth	r2, r3
   16054:	4b09      	ldr	r3, [pc, #36]	; (1607c <platform_write+0x8c>)
   16056:	81da      	strh	r2, [r3, #14]
	imuData.msgOut = &msgOutImu;
   16058:	4b08      	ldr	r3, [pc, #32]	; (1607c <platform_write+0x8c>)
   1605a:	4a07      	ldr	r2, [pc, #28]	; (16078 <platform_write+0x88>)
   1605c:	605a      	str	r2, [r3, #4]
	//write the imudata struct object
	error = I2cWriteDataWait(&imuData, 100);
   1605e:	4b07      	ldr	r3, [pc, #28]	; (1607c <platform_write+0x8c>)
   16060:	2164      	movs	r1, #100	; 0x64
   16062:	0018      	movs	r0, r3
   16064:	4b06      	ldr	r3, [pc, #24]	; (16080 <platform_write+0x90>)
   16066:	4798      	blx	r3
   16068:	0003      	movs	r3, r0
   1606a:	613b      	str	r3, [r7, #16]
	return error;
   1606c:	693b      	ldr	r3, [r7, #16]

}
   1606e:	0018      	movs	r0, r3
   16070:	46bd      	mov	sp, r7
   16072:	b006      	add	sp, #24
   16074:	bd80      	pop	{r7, pc}
   16076:	46c0      	nop			; (mov r8, r8)
   16078:	20004864 	.word	0x20004864
   1607c:	200048a4 	.word	0x200048a4
   16080:	00015105 	.word	0x00015105

00016084 <platform_read>:
 * @param[in]   len Length of the data to be read
 * @return      Returns what the function "I2cWriteDataWait" returns
 * @note        STUDENTS TO FILL  
*****************************************************************************/
static  int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp, uint16_t len)
{
   16084:	b580      	push	{r7, lr}
   16086:	b086      	sub	sp, #24
   16088:	af00      	add	r7, sp, #0
   1608a:	60f8      	str	r0, [r7, #12]
   1608c:	0008      	movs	r0, r1
   1608e:	607a      	str	r2, [r7, #4]
   16090:	0019      	movs	r1, r3
   16092:	230b      	movs	r3, #11
   16094:	18fb      	adds	r3, r7, r3
   16096:	1c02      	adds	r2, r0, #0
   16098:	701a      	strb	r2, [r3, #0]
   1609a:	2308      	movs	r3, #8
   1609c:	18fb      	adds	r3, r7, r3
   1609e:	1c0a      	adds	r2, r1, #0
   160a0:	801a      	strh	r2, [r3, #0]
	//YOUR JOB: Fill out the structure "imuData" to send to the device
	//TIP: Check the structure "imuData" and notice that it has a msgOut and msgIn parameter. How do we fill this to our advantage?
	int32_t error = ERROR_NONE;
   160a2:	2300      	movs	r3, #0
   160a4:	617b      	str	r3, [r7, #20]
	//asssemble the message being read
	imuData.address = LSM6DSO_I2C_ADD_H;
   160a6:	4b13      	ldr	r3, [pc, #76]	; (160f4 <platform_read+0x70>)
   160a8:	226b      	movs	r2, #107	; 0x6b
   160aa:	701a      	strb	r2, [r3, #0]
	imuData.lenIn = len;
   160ac:	4b11      	ldr	r3, [pc, #68]	; (160f4 <platform_read+0x70>)
   160ae:	2208      	movs	r2, #8
   160b0:	18ba      	adds	r2, r7, r2
   160b2:	8812      	ldrh	r2, [r2, #0]
   160b4:	819a      	strh	r2, [r3, #12]
	imuData.msgIn = bufp;
   160b6:	4b0f      	ldr	r3, [pc, #60]	; (160f4 <platform_read+0x70>)
   160b8:	687a      	ldr	r2, [r7, #4]
   160ba:	609a      	str	r2, [r3, #8]
	//clear our outwards message
	imuData.lenOut = 1;
   160bc:	4b0d      	ldr	r3, [pc, #52]	; (160f4 <platform_read+0x70>)
   160be:	2201      	movs	r2, #1
   160c0:	81da      	strh	r2, [r3, #14]
	msgOutImu[0] = reg;
   160c2:	4b0d      	ldr	r3, [pc, #52]	; (160f8 <platform_read+0x74>)
   160c4:	220b      	movs	r2, #11
   160c6:	18ba      	adds	r2, r7, r2
   160c8:	7812      	ldrb	r2, [r2, #0]
   160ca:	701a      	strb	r2, [r3, #0]
	msgOutImu[1] = 0;
   160cc:	4b0a      	ldr	r3, [pc, #40]	; (160f8 <platform_read+0x74>)
   160ce:	2200      	movs	r2, #0
   160d0:	705a      	strb	r2, [r3, #1]
	imuData.msgOut = &msgOutImu;
   160d2:	4b08      	ldr	r3, [pc, #32]	; (160f4 <platform_read+0x70>)
   160d4:	4a08      	ldr	r2, [pc, #32]	; (160f8 <platform_read+0x74>)
   160d6:	605a      	str	r2, [r3, #4]
	//read the imudata struct
	error = I2cReadDataWait(&imuData, 5, 100);
   160d8:	4b06      	ldr	r3, [pc, #24]	; (160f4 <platform_read+0x70>)
   160da:	2264      	movs	r2, #100	; 0x64
   160dc:	2105      	movs	r1, #5
   160de:	0018      	movs	r0, r3
   160e0:	4b06      	ldr	r3, [pc, #24]	; (160fc <platform_read+0x78>)
   160e2:	4798      	blx	r3
   160e4:	0003      	movs	r3, r0
   160e6:	617b      	str	r3, [r7, #20]
	
	return error;
   160e8:	697b      	ldr	r3, [r7, #20]

}
   160ea:	0018      	movs	r0, r3
   160ec:	46bd      	mov	sp, r7
   160ee:	b006      	add	sp, #24
   160f0:	bd80      	pop	{r7, pc}
   160f2:	46c0      	nop			; (mov r8, r8)
   160f4:	200048a4 	.word	0x200048a4
   160f8:	20004864 	.word	0x20004864
   160fc:	000151dd 	.word	0x000151dd

00016100 <GetImuStruct>:


stmdev_ctx_t * GetImuStruct(void)
{
   16100:	b580      	push	{r7, lr}
   16102:	af00      	add	r7, sp, #0
return &dev_ctx;
   16104:	4b01      	ldr	r3, [pc, #4]	; (1610c <GetImuStruct+0xc>)
}
   16106:	0018      	movs	r0, r3
   16108:	46bd      	mov	sp, r7
   1610a:	bd80      	pop	{r7, pc}
   1610c:	20000020 	.word	0x20000020

00016110 <InitImu>:



int32_t InitImu(void)
{
   16110:	b580      	push	{r7, lr}
   16112:	b082      	sub	sp, #8
   16114:	af00      	add	r7, sp, #0
uint8_t rst;
int32_t error = 0;
   16116:	2300      	movs	r3, #0
   16118:	607b      	str	r3, [r7, #4]
/*
   * Restore default configuration
   */
  error = lsm6dso_reset_set(&dev_ctx, PROPERTY_ENABLE);
   1611a:	4b23      	ldr	r3, [pc, #140]	; (161a8 <InitImu+0x98>)
   1611c:	2101      	movs	r1, #1
   1611e:	0018      	movs	r0, r3
   16120:	4b22      	ldr	r3, [pc, #136]	; (161ac <InitImu+0x9c>)
   16122:	4798      	blx	r3
   16124:	0003      	movs	r3, r0
   16126:	607b      	str	r3, [r7, #4]
  do {
    error |= lsm6dso_reset_get(&dev_ctx, &rst);
   16128:	1cfa      	adds	r2, r7, #3
   1612a:	4b1f      	ldr	r3, [pc, #124]	; (161a8 <InitImu+0x98>)
   1612c:	0011      	movs	r1, r2
   1612e:	0018      	movs	r0, r3
   16130:	4b1f      	ldr	r3, [pc, #124]	; (161b0 <InitImu+0xa0>)
   16132:	4798      	blx	r3
   16134:	0002      	movs	r2, r0
   16136:	687b      	ldr	r3, [r7, #4]
   16138:	4313      	orrs	r3, r2
   1613a:	607b      	str	r3, [r7, #4]
  } while (rst);
   1613c:	1cfb      	adds	r3, r7, #3
   1613e:	781b      	ldrb	r3, [r3, #0]
   16140:	2b00      	cmp	r3, #0
   16142:	d1f1      	bne.n	16128 <InitImu+0x18>

  /* Disable I3C interface */
  lsm6dso_i3c_disable_set(&dev_ctx, LSM6DSO_I3C_DISABLE);
   16144:	4b18      	ldr	r3, [pc, #96]	; (161a8 <InitImu+0x98>)
   16146:	2180      	movs	r1, #128	; 0x80
   16148:	0018      	movs	r0, r3
   1614a:	4b1a      	ldr	r3, [pc, #104]	; (161b4 <InitImu+0xa4>)
   1614c:	4798      	blx	r3
  /* Enable Block Data Update */
  lsm6dso_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
   1614e:	4b16      	ldr	r3, [pc, #88]	; (161a8 <InitImu+0x98>)
   16150:	2101      	movs	r1, #1
   16152:	0018      	movs	r0, r3
   16154:	4b18      	ldr	r3, [pc, #96]	; (161b8 <InitImu+0xa8>)
   16156:	4798      	blx	r3
  /* Weight of XL user offset to 2^(-10) g/LSB */
  lsm6dso_xl_offset_weight_set(&dev_ctx, LSM6DSO_LSb_1mg);
   16158:	4b13      	ldr	r3, [pc, #76]	; (161a8 <InitImu+0x98>)
   1615a:	2100      	movs	r1, #0
   1615c:	0018      	movs	r0, r3
   1615e:	4b17      	ldr	r3, [pc, #92]	; (161bc <InitImu+0xac>)
   16160:	4798      	blx	r3
  /* Accelerometer X,Y,Z axis user offset correction expressed
   * in two’s complement. Set X to 48mg, Y tp 64 mg, Z to -127 mg
   */

  /* Set Output Data Rate */
  lsm6dso_xl_data_rate_set(&dev_ctx, LSM6DSO_XL_ODR_12Hz5);
   16162:	4b11      	ldr	r3, [pc, #68]	; (161a8 <InitImu+0x98>)
   16164:	2101      	movs	r1, #1
   16166:	0018      	movs	r0, r3
   16168:	4b15      	ldr	r3, [pc, #84]	; (161c0 <InitImu+0xb0>)
   1616a:	4798      	blx	r3
  lsm6dso_gy_data_rate_set(&dev_ctx, LSM6DSO_GY_ODR_12Hz5);
   1616c:	4b0e      	ldr	r3, [pc, #56]	; (161a8 <InitImu+0x98>)
   1616e:	2101      	movs	r1, #1
   16170:	0018      	movs	r0, r3
   16172:	4b14      	ldr	r3, [pc, #80]	; (161c4 <InitImu+0xb4>)
   16174:	4798      	blx	r3
  /* Set full scale */
  lsm6dso_xl_full_scale_set(&dev_ctx, LSM6DSO_2g);
   16176:	4b0c      	ldr	r3, [pc, #48]	; (161a8 <InitImu+0x98>)
   16178:	2100      	movs	r1, #0
   1617a:	0018      	movs	r0, r3
   1617c:	4b12      	ldr	r3, [pc, #72]	; (161c8 <InitImu+0xb8>)
   1617e:	4798      	blx	r3
  lsm6dso_gy_full_scale_set(&dev_ctx, LSM6DSO_2000dps);
   16180:	4b09      	ldr	r3, [pc, #36]	; (161a8 <InitImu+0x98>)
   16182:	2106      	movs	r1, #6
   16184:	0018      	movs	r0, r3
   16186:	4b11      	ldr	r3, [pc, #68]	; (161cc <InitImu+0xbc>)
   16188:	4798      	blx	r3
  /* Configure filtering chain(No aux interface). */
  /* Accelerometer - LPF1 + LPF2 path */
  lsm6dso_xl_hp_path_on_out_set(&dev_ctx, LSM6DSO_LP_ODR_DIV_100);
   1618a:	4b07      	ldr	r3, [pc, #28]	; (161a8 <InitImu+0x98>)
   1618c:	2104      	movs	r1, #4
   1618e:	0018      	movs	r0, r3
   16190:	4b0f      	ldr	r3, [pc, #60]	; (161d0 <InitImu+0xc0>)
   16192:	4798      	blx	r3
  lsm6dso_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);
   16194:	4b04      	ldr	r3, [pc, #16]	; (161a8 <InitImu+0x98>)
   16196:	2101      	movs	r1, #1
   16198:	0018      	movs	r0, r3
   1619a:	4b0e      	ldr	r3, [pc, #56]	; (161d4 <InitImu+0xc4>)
   1619c:	4798      	blx	r3

  return error;
   1619e:	687b      	ldr	r3, [r7, #4]
}
   161a0:	0018      	movs	r0, r3
   161a2:	46bd      	mov	sp, r7
   161a4:	b002      	add	sp, #8
   161a6:	bd80      	pop	{r7, pc}
   161a8:	20000020 	.word	0x20000020
   161ac:	00015c6d 	.word	0x00015c6d
   161b0:	00015cd9 	.word	0x00015cd9
   161b4:	00015e39 	.word	0x00015e39
   161b8:	00015a15 	.word	0x00015a15
   161bc:	00015a81 	.word	0x00015a81
   161c0:	00015421 	.word	0x00015421
   161c4:	00015751 	.word	0x00015751
   161c8:	000153b5 	.word	0x000153b5
   161cc:	000156e5 	.word	0x000156e5
   161d0:	00015d81 	.word	0x00015d81
   161d4:	00015d15 	.word	0x00015d15

000161d8 <InitializeSeesaw>:

 * @return		Returns 0 if no errors.
 * @note
 */
int InitializeSeesaw(void)
{
   161d8:	b580      	push	{r7, lr}
   161da:	b082      	sub	sp, #8
   161dc:	af00      	add	r7, sp, #0
    uint8_t readData[2];
    seesawData.address = NEO_TRELLIS_ADDR;
   161de:	4b38      	ldr	r3, [pc, #224]	; (162c0 <InitializeSeesaw+0xe8>)
   161e0:	222e      	movs	r2, #46	; 0x2e
   161e2:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgBaseGetHWID[0];
   161e4:	4b36      	ldr	r3, [pc, #216]	; (162c0 <InitializeSeesaw+0xe8>)
   161e6:	4a37      	ldr	r2, [pc, #220]	; (162c4 <InitializeSeesaw+0xec>)
   161e8:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgBaseGetHWID);
   161ea:	4b35      	ldr	r3, [pc, #212]	; (162c0 <InitializeSeesaw+0xe8>)
   161ec:	2202      	movs	r2, #2
   161ee:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = &readData[0];
   161f0:	4b33      	ldr	r3, [pc, #204]	; (162c0 <InitializeSeesaw+0xe8>)
   161f2:	003a      	movs	r2, r7
   161f4:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = 1;
   161f6:	4b32      	ldr	r3, [pc, #200]	; (162c0 <InitializeSeesaw+0xe8>)
   161f8:	2201      	movs	r2, #1
   161fa:	819a      	strh	r2, [r3, #12]

    // Check if device is on the line - it should answer with its HW ID

    int error = I2cReadDataWait(&seesawData, 0, 100);
   161fc:	4b30      	ldr	r3, [pc, #192]	; (162c0 <InitializeSeesaw+0xe8>)
   161fe:	2264      	movs	r2, #100	; 0x64
   16200:	2100      	movs	r1, #0
   16202:	0018      	movs	r0, r3
   16204:	4b30      	ldr	r3, [pc, #192]	; (162c8 <InitializeSeesaw+0xf0>)
   16206:	4798      	blx	r3
   16208:	0003      	movs	r3, r0
   1620a:	607b      	str	r3, [r7, #4]

    if (ERROR_NONE != error) {
   1620c:	687b      	ldr	r3, [r7, #4]
   1620e:	2b00      	cmp	r3, #0
   16210:	d004      	beq.n	1621c <InitializeSeesaw+0x44>
        SerialConsoleWriteString("Error initializing Seesaw!/r/n");
   16212:	4b2e      	ldr	r3, [pc, #184]	; (162cc <InitializeSeesaw+0xf4>)
   16214:	0018      	movs	r0, r3
   16216:	4b2e      	ldr	r3, [pc, #184]	; (162d0 <InitializeSeesaw+0xf8>)
   16218:	4798      	blx	r3
   1621a:	e00c      	b.n	16236 <InitializeSeesaw+0x5e>
    } else {
        if (readData[0] != SEESAW_HW_ID_CODE) {
   1621c:	003b      	movs	r3, r7
   1621e:	781b      	ldrb	r3, [r3, #0]
   16220:	2b55      	cmp	r3, #85	; 0x55
   16222:	d004      	beq.n	1622e <InitializeSeesaw+0x56>
            SerialConsoleWriteString("Error/r/n");
   16224:	4b2b      	ldr	r3, [pc, #172]	; (162d4 <InitializeSeesaw+0xfc>)
   16226:	0018      	movs	r0, r3
   16228:	4b29      	ldr	r3, [pc, #164]	; (162d0 <InitializeSeesaw+0xf8>)
   1622a:	4798      	blx	r3
   1622c:	e003      	b.n	16236 <InitializeSeesaw+0x5e>
        } else {
            SerialConsoleWriteString("Found Seesaw!/r/n");
   1622e:	4b2a      	ldr	r3, [pc, #168]	; (162d8 <InitializeSeesaw+0x100>)
   16230:	0018      	movs	r0, r3
   16232:	4b27      	ldr	r3, [pc, #156]	; (162d0 <InitializeSeesaw+0xf8>)
   16234:	4798      	blx	r3
        }
    }

    // Tell the Seesaw which pins to use
    seesawData.msgOut = &msgNeopixelPin[0];
   16236:	4b22      	ldr	r3, [pc, #136]	; (162c0 <InitializeSeesaw+0xe8>)
   16238:	4a28      	ldr	r2, [pc, #160]	; (162dc <InitializeSeesaw+0x104>)
   1623a:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgNeopixelPin);
   1623c:	4b20      	ldr	r3, [pc, #128]	; (162c0 <InitializeSeesaw+0xe8>)
   1623e:	2203      	movs	r2, #3
   16240:	81da      	strh	r2, [r3, #14]

    error = I2cWriteDataWait(&seesawData, 100);
   16242:	4b1f      	ldr	r3, [pc, #124]	; (162c0 <InitializeSeesaw+0xe8>)
   16244:	2164      	movs	r1, #100	; 0x64
   16246:	0018      	movs	r0, r3
   16248:	4b25      	ldr	r3, [pc, #148]	; (162e0 <InitializeSeesaw+0x108>)
   1624a:	4798      	blx	r3
   1624c:	0003      	movs	r3, r0
   1624e:	607b      	str	r3, [r7, #4]
    if (ERROR_NONE != error) {
   16250:	687b      	ldr	r3, [r7, #4]
   16252:	2b00      	cmp	r3, #0
   16254:	d003      	beq.n	1625e <InitializeSeesaw+0x86>
        SerialConsoleWriteString("Could not write Seesaw pin!/r/n");
   16256:	4b23      	ldr	r3, [pc, #140]	; (162e4 <InitializeSeesaw+0x10c>)
   16258:	0018      	movs	r0, r3
   1625a:	4b1d      	ldr	r3, [pc, #116]	; (162d0 <InitializeSeesaw+0xf8>)
   1625c:	4798      	blx	r3
    }

    // Set seesaw Neopixel speed
    seesawData.msgOut = &msgNeopixelSpeed[0];
   1625e:	4b18      	ldr	r3, [pc, #96]	; (162c0 <InitializeSeesaw+0xe8>)
   16260:	4a21      	ldr	r2, [pc, #132]	; (162e8 <InitializeSeesaw+0x110>)
   16262:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgNeopixelSpeed);
   16264:	4b16      	ldr	r3, [pc, #88]	; (162c0 <InitializeSeesaw+0xe8>)
   16266:	2203      	movs	r2, #3
   16268:	81da      	strh	r2, [r3, #14]

    error = I2cWriteDataWait(&seesawData, 100);
   1626a:	4b15      	ldr	r3, [pc, #84]	; (162c0 <InitializeSeesaw+0xe8>)
   1626c:	2164      	movs	r1, #100	; 0x64
   1626e:	0018      	movs	r0, r3
   16270:	4b1b      	ldr	r3, [pc, #108]	; (162e0 <InitializeSeesaw+0x108>)
   16272:	4798      	blx	r3
   16274:	0003      	movs	r3, r0
   16276:	607b      	str	r3, [r7, #4]
    if (ERROR_NONE != error) {
   16278:	687b      	ldr	r3, [r7, #4]
   1627a:	2b00      	cmp	r3, #0
   1627c:	d003      	beq.n	16286 <InitializeSeesaw+0xae>
        SerialConsoleWriteString("Could not set seesaw Neopixel speed!/r/n");
   1627e:	4b1b      	ldr	r3, [pc, #108]	; (162ec <InitializeSeesaw+0x114>)
   16280:	0018      	movs	r0, r3
   16282:	4b13      	ldr	r3, [pc, #76]	; (162d0 <InitializeSeesaw+0xf8>)
   16284:	4798      	blx	r3
    }

    // Set seesaw Neopixel number of devices
    seesawData.msgOut = &msgNeopixelBufLength[0];
   16286:	4b0e      	ldr	r3, [pc, #56]	; (162c0 <InitializeSeesaw+0xe8>)
   16288:	4a19      	ldr	r2, [pc, #100]	; (162f0 <InitializeSeesaw+0x118>)
   1628a:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgNeopixelBufLength);
   1628c:	4b0c      	ldr	r3, [pc, #48]	; (162c0 <InitializeSeesaw+0xe8>)
   1628e:	2204      	movs	r2, #4
   16290:	81da      	strh	r2, [r3, #14]

    error = I2cWriteDataWait(&seesawData, 100);
   16292:	4b0b      	ldr	r3, [pc, #44]	; (162c0 <InitializeSeesaw+0xe8>)
   16294:	2164      	movs	r1, #100	; 0x64
   16296:	0018      	movs	r0, r3
   16298:	4b11      	ldr	r3, [pc, #68]	; (162e0 <InitializeSeesaw+0x108>)
   1629a:	4798      	blx	r3
   1629c:	0003      	movs	r3, r0
   1629e:	607b      	str	r3, [r7, #4]
    if (ERROR_NONE != error) {
   162a0:	687b      	ldr	r3, [r7, #4]
   162a2:	2b00      	cmp	r3, #0
   162a4:	d003      	beq.n	162ae <InitializeSeesaw+0xd6>
        SerialConsoleWriteString("Could not set seesaw Neopixel number of devices/r/n");
   162a6:	4b13      	ldr	r3, [pc, #76]	; (162f4 <InitializeSeesaw+0x11c>)
   162a8:	0018      	movs	r0, r3
   162aa:	4b09      	ldr	r3, [pc, #36]	; (162d0 <InitializeSeesaw+0xf8>)
   162ac:	4798      	blx	r3
    }

    SeesawTurnOnLedTest();
   162ae:	4b12      	ldr	r3, [pc, #72]	; (162f8 <InitializeSeesaw+0x120>)
   162b0:	4798      	blx	r3

    SeesawInitializeKeypad();
   162b2:	4b12      	ldr	r3, [pc, #72]	; (162fc <InitializeSeesaw+0x124>)
   162b4:	4798      	blx	r3
    return error;
   162b6:	687b      	ldr	r3, [r7, #4]
}
   162b8:	0018      	movs	r0, r3
   162ba:	46bd      	mov	sp, r7
   162bc:	b002      	add	sp, #8
   162be:	bd80      	pop	{r7, pc}
   162c0:	200048b4 	.word	0x200048b4
   162c4:	00037368 	.word	0x00037368
   162c8:	000151dd 	.word	0x000151dd
   162cc:	00037380 	.word	0x00037380
   162d0:	0001ebe5 	.word	0x0001ebe5
   162d4:	000373a0 	.word	0x000373a0
   162d8:	000373ac 	.word	0x000373ac
   162dc:	0003736c 	.word	0x0003736c
   162e0:	00015105 	.word	0x00015105
   162e4:	000373c0 	.word	0x000373c0
   162e8:	00037370 	.word	0x00037370
   162ec:	000373e0 	.word	0x000373e0
   162f0:	00037374 	.word	0x00037374
   162f4:	0003740c 	.word	0x0003740c
   162f8:	000166ad 	.word	0x000166ad
   162fc:	000165bd 	.word	0x000165bd

00016300 <SeesawGetKeypadCount>:

 * @return		Returns the number of events in the buffer. Use SeesawReadKeypad to read these events.
 * @note
*/
uint8_t SeesawGetKeypadCount(void)
{
   16300:	b580      	push	{r7, lr}
   16302:	b082      	sub	sp, #8
   16304:	af00      	add	r7, sp, #0
    uint8_t count = 0;
   16306:	1cfb      	adds	r3, r7, #3
   16308:	2200      	movs	r2, #0
   1630a:	701a      	strb	r2, [r3, #0]
    seesawData.address = NEO_TRELLIS_ADDR;
   1630c:	4b11      	ldr	r3, [pc, #68]	; (16354 <SeesawGetKeypadCount+0x54>)
   1630e:	222e      	movs	r2, #46	; 0x2e
   16310:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgKeypadGetCount[0];
   16312:	4b10      	ldr	r3, [pc, #64]	; (16354 <SeesawGetKeypadCount+0x54>)
   16314:	4a10      	ldr	r2, [pc, #64]	; (16358 <SeesawGetKeypadCount+0x58>)
   16316:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgKeypadGetCount);
   16318:	4b0e      	ldr	r3, [pc, #56]	; (16354 <SeesawGetKeypadCount+0x54>)
   1631a:	2202      	movs	r2, #2
   1631c:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = &count;
   1631e:	4b0d      	ldr	r3, [pc, #52]	; (16354 <SeesawGetKeypadCount+0x54>)
   16320:	1cfa      	adds	r2, r7, #3
   16322:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = 1;
   16324:	4b0b      	ldr	r3, [pc, #44]	; (16354 <SeesawGetKeypadCount+0x54>)
   16326:	2201      	movs	r2, #1
   16328:	819a      	strh	r2, [r3, #12]

    int error = I2cReadDataWait(&seesawData, 0, 100);
   1632a:	4b0a      	ldr	r3, [pc, #40]	; (16354 <SeesawGetKeypadCount+0x54>)
   1632c:	2264      	movs	r2, #100	; 0x64
   1632e:	2100      	movs	r1, #0
   16330:	0018      	movs	r0, r3
   16332:	4b0a      	ldr	r3, [pc, #40]	; (1635c <SeesawGetKeypadCount+0x5c>)
   16334:	4798      	blx	r3
   16336:	0003      	movs	r3, r0
   16338:	607b      	str	r3, [r7, #4]

    if (ERROR_NONE != error) {
   1633a:	687b      	ldr	r3, [r7, #4]
   1633c:	2b00      	cmp	r3, #0
   1633e:	d003      	beq.n	16348 <SeesawGetKeypadCount+0x48>
        SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   16340:	4b07      	ldr	r3, [pc, #28]	; (16360 <SeesawGetKeypadCount+0x60>)
   16342:	0018      	movs	r0, r3
   16344:	4b07      	ldr	r3, [pc, #28]	; (16364 <SeesawGetKeypadCount+0x64>)
   16346:	4798      	blx	r3
    }
    return count;
   16348:	1cfb      	adds	r3, r7, #3
   1634a:	781b      	ldrb	r3, [r3, #0]
}
   1634c:	0018      	movs	r0, r3
   1634e:	46bd      	mov	sp, r7
   16350:	b002      	add	sp, #8
   16352:	bd80      	pop	{r7, pc}
   16354:	200048b4 	.word	0x200048b4
   16358:	0003737c 	.word	0x0003737c
   1635c:	000151dd 	.word	0x000151dd
   16360:	00037440 	.word	0x00037440
   16364:	0001ebe5 	.word	0x0001ebe5

00016368 <SeesawReadKeypad>:

 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Use SeesawGetKeypadCount to know how many events are in buffer.
*/
int32_t SeesawReadKeypad(uint8_t *buffer, uint8_t count)
{
   16368:	b580      	push	{r7, lr}
   1636a:	b084      	sub	sp, #16
   1636c:	af00      	add	r7, sp, #0
   1636e:	6078      	str	r0, [r7, #4]
   16370:	000a      	movs	r2, r1
   16372:	1cfb      	adds	r3, r7, #3
   16374:	701a      	strb	r2, [r3, #0]
    if (count == 0) return ERROR_NONE;
   16376:	1cfb      	adds	r3, r7, #3
   16378:	781b      	ldrb	r3, [r3, #0]
   1637a:	2b00      	cmp	r3, #0
   1637c:	d101      	bne.n	16382 <SeesawReadKeypad+0x1a>
   1637e:	2300      	movs	r3, #0
   16380:	e026      	b.n	163d0 <SeesawReadKeypad+0x68>
    uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_FIFO};
   16382:	2308      	movs	r3, #8
   16384:	18fb      	adds	r3, r7, r3
   16386:	4a14      	ldr	r2, [pc, #80]	; (163d8 <SeesawReadKeypad+0x70>)
   16388:	8812      	ldrh	r2, [r2, #0]
   1638a:	801a      	strh	r2, [r3, #0]
    seesawData.address = NEO_TRELLIS_ADDR;
   1638c:	4b13      	ldr	r3, [pc, #76]	; (163dc <SeesawReadKeypad+0x74>)
   1638e:	222e      	movs	r2, #46	; 0x2e
   16390:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = (const uint8_t*) &cmd[0];
   16392:	4b12      	ldr	r3, [pc, #72]	; (163dc <SeesawReadKeypad+0x74>)
   16394:	2208      	movs	r2, #8
   16396:	18ba      	adds	r2, r7, r2
   16398:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(cmd);
   1639a:	4b10      	ldr	r3, [pc, #64]	; (163dc <SeesawReadKeypad+0x74>)
   1639c:	2202      	movs	r2, #2
   1639e:	81da      	strh	r2, [r3, #14]
    seesawData.msgIn = buffer;
   163a0:	4b0e      	ldr	r3, [pc, #56]	; (163dc <SeesawReadKeypad+0x74>)
   163a2:	687a      	ldr	r2, [r7, #4]
   163a4:	609a      	str	r2, [r3, #8]
    seesawData.lenIn = count;
   163a6:	1cfb      	adds	r3, r7, #3
   163a8:	781b      	ldrb	r3, [r3, #0]
   163aa:	b29a      	uxth	r2, r3
   163ac:	4b0b      	ldr	r3, [pc, #44]	; (163dc <SeesawReadKeypad+0x74>)
   163ae:	819a      	strh	r2, [r3, #12]

    int error = I2cReadDataWait(&seesawData, 0, 100);
   163b0:	4b0a      	ldr	r3, [pc, #40]	; (163dc <SeesawReadKeypad+0x74>)
   163b2:	2264      	movs	r2, #100	; 0x64
   163b4:	2100      	movs	r1, #0
   163b6:	0018      	movs	r0, r3
   163b8:	4b09      	ldr	r3, [pc, #36]	; (163e0 <SeesawReadKeypad+0x78>)
   163ba:	4798      	blx	r3
   163bc:	0003      	movs	r3, r0
   163be:	60fb      	str	r3, [r7, #12]

    if (ERROR_NONE != error) {
   163c0:	68fb      	ldr	r3, [r7, #12]
   163c2:	2b00      	cmp	r3, #0
   163c4:	d003      	beq.n	163ce <SeesawReadKeypad+0x66>
        SerialConsoleWriteString("Error reading Seesaw counts!/r/n");
   163c6:	4b07      	ldr	r3, [pc, #28]	; (163e4 <SeesawReadKeypad+0x7c>)
   163c8:	0018      	movs	r0, r3
   163ca:	4b07      	ldr	r3, [pc, #28]	; (163e8 <SeesawReadKeypad+0x80>)
   163cc:	4798      	blx	r3
    }
    return error;
   163ce:	68fb      	ldr	r3, [r7, #12]
}
   163d0:	0018      	movs	r0, r3
   163d2:	46bd      	mov	sp, r7
   163d4:	b004      	add	sp, #16
   163d6:	bd80      	pop	{r7, pc}
   163d8:	00037464 	.word	0x00037464
   163dc:	200048b4 	.word	0x200048b4
   163e0:	000151dd 	.word	0x000151dd
   163e4:	00037440 	.word	0x00037440
   163e8:	0001ebe5 	.word	0x0001ebe5

000163ec <SeesawActivateKey>:

 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note
*/
int32_t SeesawActivateKey(uint8_t key, uint8_t edge, bool enable)
{
   163ec:	b590      	push	{r4, r7, lr}
   163ee:	b087      	sub	sp, #28
   163f0:	af00      	add	r7, sp, #0
   163f2:	0004      	movs	r4, r0
   163f4:	0008      	movs	r0, r1
   163f6:	0011      	movs	r1, r2
   163f8:	1dfb      	adds	r3, r7, #7
   163fa:	1c22      	adds	r2, r4, #0
   163fc:	701a      	strb	r2, [r3, #0]
   163fe:	1dbb      	adds	r3, r7, #6
   16400:	1c02      	adds	r2, r0, #0
   16402:	701a      	strb	r2, [r3, #0]
   16404:	1d7b      	adds	r3, r7, #5
   16406:	1c0a      	adds	r2, r1, #0
   16408:	701a      	strb	r2, [r3, #0]
    union keyState ks;
    ks.bit.STATE = enable;
   1640a:	2310      	movs	r3, #16
   1640c:	18fb      	adds	r3, r7, r3
   1640e:	1d7a      	adds	r2, r7, #5
   16410:	7812      	ldrb	r2, [r2, #0]
   16412:	2101      	movs	r1, #1
   16414:	0010      	movs	r0, r2
   16416:	4008      	ands	r0, r1
   16418:	781a      	ldrb	r2, [r3, #0]
   1641a:	2101      	movs	r1, #1
   1641c:	438a      	bics	r2, r1
   1641e:	1c11      	adds	r1, r2, #0
   16420:	1c02      	adds	r2, r0, #0
   16422:	430a      	orrs	r2, r1
   16424:	701a      	strb	r2, [r3, #0]
    ks.bit.ACTIVE = (1 << edge);
   16426:	1dbb      	adds	r3, r7, #6
   16428:	781b      	ldrb	r3, [r3, #0]
   1642a:	2201      	movs	r2, #1
   1642c:	409a      	lsls	r2, r3
   1642e:	0013      	movs	r3, r2
   16430:	b2db      	uxtb	r3, r3
   16432:	1c1a      	adds	r2, r3, #0
   16434:	230f      	movs	r3, #15
   16436:	4013      	ands	r3, r2
   16438:	b2da      	uxtb	r2, r3
   1643a:	2310      	movs	r3, #16
   1643c:	18fb      	adds	r3, r7, r3
   1643e:	210f      	movs	r1, #15
   16440:	400a      	ands	r2, r1
   16442:	1890      	adds	r0, r2, r2
   16444:	781a      	ldrb	r2, [r3, #0]
   16446:	211e      	movs	r1, #30
   16448:	438a      	bics	r2, r1
   1644a:	1c11      	adds	r1, r2, #0
   1644c:	1c02      	adds	r2, r0, #0
   1644e:	430a      	orrs	r2, r1
   16450:	701a      	strb	r2, [r3, #0]
    uint8_t cmd[] = {SEESAW_KEYPAD_BASE, SEESAW_KEYPAD_EVENT, key, ks.reg};
   16452:	230c      	movs	r3, #12
   16454:	18fb      	adds	r3, r7, r3
   16456:	2210      	movs	r2, #16
   16458:	701a      	strb	r2, [r3, #0]
   1645a:	230c      	movs	r3, #12
   1645c:	18fb      	adds	r3, r7, r3
   1645e:	2201      	movs	r2, #1
   16460:	705a      	strb	r2, [r3, #1]
   16462:	230c      	movs	r3, #12
   16464:	18fb      	adds	r3, r7, r3
   16466:	1dfa      	adds	r2, r7, #7
   16468:	7812      	ldrb	r2, [r2, #0]
   1646a:	709a      	strb	r2, [r3, #2]
   1646c:	2310      	movs	r3, #16
   1646e:	18fb      	adds	r3, r7, r3
   16470:	781a      	ldrb	r2, [r3, #0]
   16472:	230c      	movs	r3, #12
   16474:	18fb      	adds	r3, r7, r3
   16476:	70da      	strb	r2, [r3, #3]

    seesawData.address = NEO_TRELLIS_ADDR;
   16478:	4b0c      	ldr	r3, [pc, #48]	; (164ac <SeesawActivateKey+0xc0>)
   1647a:	222e      	movs	r2, #46	; 0x2e
   1647c:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = (const uint8_t *) &cmd[0];
   1647e:	4b0b      	ldr	r3, [pc, #44]	; (164ac <SeesawActivateKey+0xc0>)
   16480:	220c      	movs	r2, #12
   16482:	18ba      	adds	r2, r7, r2
   16484:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(cmd);
   16486:	4b09      	ldr	r3, [pc, #36]	; (164ac <SeesawActivateKey+0xc0>)
   16488:	2204      	movs	r2, #4
   1648a:	81da      	strh	r2, [r3, #14]
    seesawData.lenIn = 0;
   1648c:	4b07      	ldr	r3, [pc, #28]	; (164ac <SeesawActivateKey+0xc0>)
   1648e:	2200      	movs	r2, #0
   16490:	819a      	strh	r2, [r3, #12]
    int32_t error = I2cWriteDataWait(&seesawData, 100);
   16492:	4b06      	ldr	r3, [pc, #24]	; (164ac <SeesawActivateKey+0xc0>)
   16494:	2164      	movs	r1, #100	; 0x64
   16496:	0018      	movs	r0, r3
   16498:	4b05      	ldr	r3, [pc, #20]	; (164b0 <SeesawActivateKey+0xc4>)
   1649a:	4798      	blx	r3
   1649c:	0003      	movs	r3, r0
   1649e:	617b      	str	r3, [r7, #20]
    return error;
   164a0:	697b      	ldr	r3, [r7, #20]
}
   164a2:	0018      	movs	r0, r3
   164a4:	46bd      	mov	sp, r7
   164a6:	b007      	add	sp, #28
   164a8:	bd90      	pop	{r4, r7, pc}
   164aa:	46c0      	nop			; (mov r8, r8)
   164ac:	200048b4 	.word	0x200048b4
   164b0:	00015105 	.word	0x00015105

000164b4 <SeesawSetLed>:
 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Note that the LEDs wont turn on until you send a "SeesawOrderLedUpdate" command.
         FOR ESE516 Board, please do not turn ALL the LEDs to maximum brightness (255,255,255)!
*/
int32_t SeesawSetLed(uint8_t key, uint8_t red, uint8_t green, uint8_t blue)
{
   164b4:	b5b0      	push	{r4, r5, r7, lr}
   164b6:	b086      	sub	sp, #24
   164b8:	af00      	add	r7, sp, #0
   164ba:	0005      	movs	r5, r0
   164bc:	000c      	movs	r4, r1
   164be:	0010      	movs	r0, r2
   164c0:	0019      	movs	r1, r3
   164c2:	1dfb      	adds	r3, r7, #7
   164c4:	1c2a      	adds	r2, r5, #0
   164c6:	701a      	strb	r2, [r3, #0]
   164c8:	1dbb      	adds	r3, r7, #6
   164ca:	1c22      	adds	r2, r4, #0
   164cc:	701a      	strb	r2, [r3, #0]
   164ce:	1d7b      	adds	r3, r7, #5
   164d0:	1c02      	adds	r2, r0, #0
   164d2:	701a      	strb	r2, [r3, #0]
   164d4:	1d3b      	adds	r3, r7, #4
   164d6:	1c0a      	adds	r2, r1, #0
   164d8:	701a      	strb	r2, [r3, #0]
    uint8_t write_buffer1[7] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_BUF, 0, 0, green, red, blue};
   164da:	2308      	movs	r3, #8
   164dc:	18fb      	adds	r3, r7, r3
   164de:	220e      	movs	r2, #14
   164e0:	701a      	strb	r2, [r3, #0]
   164e2:	2308      	movs	r3, #8
   164e4:	18fb      	adds	r3, r7, r3
   164e6:	2204      	movs	r2, #4
   164e8:	705a      	strb	r2, [r3, #1]
   164ea:	2308      	movs	r3, #8
   164ec:	18fb      	adds	r3, r7, r3
   164ee:	2200      	movs	r2, #0
   164f0:	709a      	strb	r2, [r3, #2]
   164f2:	2308      	movs	r3, #8
   164f4:	18fb      	adds	r3, r7, r3
   164f6:	2200      	movs	r2, #0
   164f8:	70da      	strb	r2, [r3, #3]
   164fa:	2308      	movs	r3, #8
   164fc:	18fb      	adds	r3, r7, r3
   164fe:	1d7a      	adds	r2, r7, #5
   16500:	7812      	ldrb	r2, [r2, #0]
   16502:	711a      	strb	r2, [r3, #4]
   16504:	2308      	movs	r3, #8
   16506:	18fb      	adds	r3, r7, r3
   16508:	1dba      	adds	r2, r7, #6
   1650a:	7812      	ldrb	r2, [r2, #0]
   1650c:	715a      	strb	r2, [r3, #5]
   1650e:	2308      	movs	r3, #8
   16510:	18fb      	adds	r3, r7, r3
   16512:	1d3a      	adds	r2, r7, #4
   16514:	7812      	ldrb	r2, [r2, #0]
   16516:	719a      	strb	r2, [r3, #6]

    uint16_t offset = 3 * key;  // RGB LED
   16518:	1dfb      	adds	r3, r7, #7
   1651a:	781b      	ldrb	r3, [r3, #0]
   1651c:	b29b      	uxth	r3, r3
   1651e:	2216      	movs	r2, #22
   16520:	18ba      	adds	r2, r7, r2
   16522:	1c19      	adds	r1, r3, #0
   16524:	1c0b      	adds	r3, r1, #0
   16526:	18db      	adds	r3, r3, r3
   16528:	185b      	adds	r3, r3, r1
   1652a:	8013      	strh	r3, [r2, #0]
    write_buffer1[2] = (offset >> 8);
   1652c:	2316      	movs	r3, #22
   1652e:	18fb      	adds	r3, r7, r3
   16530:	881b      	ldrh	r3, [r3, #0]
   16532:	0a1b      	lsrs	r3, r3, #8
   16534:	b29b      	uxth	r3, r3
   16536:	b2da      	uxtb	r2, r3
   16538:	2308      	movs	r3, #8
   1653a:	18fb      	adds	r3, r7, r3
   1653c:	709a      	strb	r2, [r3, #2]
    write_buffer1[3] = (offset);
   1653e:	2316      	movs	r3, #22
   16540:	18fb      	adds	r3, r7, r3
   16542:	881b      	ldrh	r3, [r3, #0]
   16544:	b2da      	uxtb	r2, r3
   16546:	2308      	movs	r3, #8
   16548:	18fb      	adds	r3, r7, r3
   1654a:	70da      	strb	r2, [r3, #3]

    seesawData.msgOut = (const uint8_t *)&write_buffer1[0];
   1654c:	4b09      	ldr	r3, [pc, #36]	; (16574 <SeesawSetLed+0xc0>)
   1654e:	2208      	movs	r2, #8
   16550:	18ba      	adds	r2, r7, r2
   16552:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(write_buffer1);
   16554:	4b07      	ldr	r3, [pc, #28]	; (16574 <SeesawSetLed+0xc0>)
   16556:	2207      	movs	r2, #7
   16558:	81da      	strh	r2, [r3, #14]
    int error = I2cWriteDataWait(&seesawData, 100);
   1655a:	4b06      	ldr	r3, [pc, #24]	; (16574 <SeesawSetLed+0xc0>)
   1655c:	2164      	movs	r1, #100	; 0x64
   1655e:	0018      	movs	r0, r3
   16560:	4b05      	ldr	r3, [pc, #20]	; (16578 <SeesawSetLed+0xc4>)
   16562:	4798      	blx	r3
   16564:	0003      	movs	r3, r0
   16566:	613b      	str	r3, [r7, #16]
    return error;
   16568:	693b      	ldr	r3, [r7, #16]
}
   1656a:	0018      	movs	r0, r3
   1656c:	46bd      	mov	sp, r7
   1656e:	b006      	add	sp, #24
   16570:	bdb0      	pop	{r4, r5, r7, pc}
   16572:	46c0      	nop			; (mov r8, r8)
   16574:	200048b4 	.word	0x200048b4
   16578:	00015105 	.word	0x00015105

0001657c <SeesawOrderLedUpdate>:
 * @return		Returns zero if no I2C errors occurred. Other number in case of error
 * @note         Use "SeesawSetLed" to send LED Data. The data will not be use to update the display until this function has been called!

*/
int32_t SeesawOrderLedUpdate(void)
{
   1657c:	b580      	push	{r7, lr}
   1657e:	b082      	sub	sp, #8
   16580:	af00      	add	r7, sp, #0
    uint8_t orderBuffer[2] = {SEESAW_NEOPIXEL_BASE, SEESAW_NEOPIXEL_SHOW};
   16582:	003b      	movs	r3, r7
   16584:	4a0a      	ldr	r2, [pc, #40]	; (165b0 <SeesawOrderLedUpdate+0x34>)
   16586:	8812      	ldrh	r2, [r2, #0]
   16588:	801a      	strh	r2, [r3, #0]

    seesawData.msgOut = (const uint8_t *) &orderBuffer[0];
   1658a:	4b0a      	ldr	r3, [pc, #40]	; (165b4 <SeesawOrderLedUpdate+0x38>)
   1658c:	003a      	movs	r2, r7
   1658e:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(orderBuffer);
   16590:	4b08      	ldr	r3, [pc, #32]	; (165b4 <SeesawOrderLedUpdate+0x38>)
   16592:	2202      	movs	r2, #2
   16594:	81da      	strh	r2, [r3, #14]
    int error = I2cWriteDataWait(&seesawData, 100);
   16596:	4b07      	ldr	r3, [pc, #28]	; (165b4 <SeesawOrderLedUpdate+0x38>)
   16598:	2164      	movs	r1, #100	; 0x64
   1659a:	0018      	movs	r0, r3
   1659c:	4b06      	ldr	r3, [pc, #24]	; (165b8 <SeesawOrderLedUpdate+0x3c>)
   1659e:	4798      	blx	r3
   165a0:	0003      	movs	r3, r0
   165a2:	607b      	str	r3, [r7, #4]
    return error;
   165a4:	687b      	ldr	r3, [r7, #4]
}
   165a6:	0018      	movs	r0, r3
   165a8:	46bd      	mov	sp, r7
   165aa:	b002      	add	sp, #8
   165ac:	bd80      	pop	{r7, pc}
   165ae:	46c0      	nop			; (mov r8, r8)
   165b0:	00037468 	.word	0x00037468
   165b4:	200048b4 	.word	0x200048b4
   165b8:	00015105 	.word	0x00015105

000165bc <SeesawInitializeKeypad>:
/*****************************************************************************************
 *  @brief     Activates a given key on the keypad
 *  @return     Returns any error code found when executing task.
 ****************************************************************************************/
static void SeesawInitializeKeypad(void)
{
   165bc:	b580      	push	{r7, lr}
   165be:	b082      	sub	sp, #8
   165c0:	af00      	add	r7, sp, #0
    seesawData.address = NEO_TRELLIS_ADDR;
   165c2:	4b33      	ldr	r3, [pc, #204]	; (16690 <SeesawInitializeKeypad+0xd4>)
   165c4:	222e      	movs	r2, #46	; 0x2e
   165c6:	701a      	strb	r2, [r3, #0]
    seesawData.msgOut = &msgKeypadEnableInt[0];
   165c8:	4b31      	ldr	r3, [pc, #196]	; (16690 <SeesawInitializeKeypad+0xd4>)
   165ca:	4a32      	ldr	r2, [pc, #200]	; (16694 <SeesawInitializeKeypad+0xd8>)
   165cc:	605a      	str	r2, [r3, #4]
    seesawData.lenOut = sizeof(msgKeypadEnableInt);
   165ce:	4b30      	ldr	r3, [pc, #192]	; (16690 <SeesawInitializeKeypad+0xd4>)
   165d0:	2203      	movs	r2, #3
   165d2:	81da      	strh	r2, [r3, #14]
    seesawData.lenIn = 0;
   165d4:	4b2e      	ldr	r3, [pc, #184]	; (16690 <SeesawInitializeKeypad+0xd4>)
   165d6:	2200      	movs	r2, #0
   165d8:	819a      	strh	r2, [r3, #12]

    int32_t error = I2cWriteDataWait(&seesawData, 100);
   165da:	4b2d      	ldr	r3, [pc, #180]	; (16690 <SeesawInitializeKeypad+0xd4>)
   165dc:	2164      	movs	r1, #100	; 0x64
   165de:	0018      	movs	r0, r3
   165e0:	4b2d      	ldr	r3, [pc, #180]	; (16698 <SeesawInitializeKeypad+0xdc>)
   165e2:	4798      	blx	r3
   165e4:	0003      	movs	r3, r0
   165e6:	603b      	str	r3, [r7, #0]
    if (ERROR_NONE != error) {
   165e8:	683b      	ldr	r3, [r7, #0]
   165ea:	2b00      	cmp	r3, #0
   165ec:	d003      	beq.n	165f6 <SeesawInitializeKeypad+0x3a>
        SerialConsoleWriteString("Could not initialize Keypad!/r/n");
   165ee:	4b2b      	ldr	r3, [pc, #172]	; (1669c <SeesawInitializeKeypad+0xe0>)
   165f0:	0018      	movs	r0, r3
   165f2:	4b2b      	ldr	r3, [pc, #172]	; (166a0 <SeesawInitializeKeypad+0xe4>)
   165f4:	4798      	blx	r3
    }

    // Initialize all buttons to register an event for both press and release
    for (int i = 0; i < 16; i++) {
   165f6:	2300      	movs	r3, #0
   165f8:	607b      	str	r3, [r7, #4]
   165fa:	e041      	b.n	16680 <SeesawInitializeKeypad+0xc4>
        error = SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_RISING, true);
   165fc:	687b      	ldr	r3, [r7, #4]
   165fe:	2b00      	cmp	r3, #0
   16600:	da00      	bge.n	16604 <SeesawInitializeKeypad+0x48>
   16602:	3303      	adds	r3, #3
   16604:	109b      	asrs	r3, r3, #2
   16606:	b2db      	uxtb	r3, r3
   16608:	00db      	lsls	r3, r3, #3
   1660a:	b2da      	uxtb	r2, r3
   1660c:	687b      	ldr	r3, [r7, #4]
   1660e:	4925      	ldr	r1, [pc, #148]	; (166a4 <SeesawInitializeKeypad+0xe8>)
   16610:	400b      	ands	r3, r1
   16612:	d504      	bpl.n	1661e <SeesawInitializeKeypad+0x62>
   16614:	3b01      	subs	r3, #1
   16616:	2104      	movs	r1, #4
   16618:	4249      	negs	r1, r1
   1661a:	430b      	orrs	r3, r1
   1661c:	3301      	adds	r3, #1
   1661e:	b2db      	uxtb	r3, r3
   16620:	18d3      	adds	r3, r2, r3
   16622:	b2db      	uxtb	r3, r3
   16624:	2201      	movs	r2, #1
   16626:	2103      	movs	r1, #3
   16628:	0018      	movs	r0, r3
   1662a:	4b1f      	ldr	r3, [pc, #124]	; (166a8 <SeesawInitializeKeypad+0xec>)
   1662c:	4798      	blx	r3
   1662e:	0003      	movs	r3, r0
   16630:	603b      	str	r3, [r7, #0]
        error |= SeesawActivateKey(NEO_TRELLIS_KEY(i), SEESAW_KEYPAD_EDGE_FALLING, true);
   16632:	687b      	ldr	r3, [r7, #4]
   16634:	2b00      	cmp	r3, #0
   16636:	da00      	bge.n	1663a <SeesawInitializeKeypad+0x7e>
   16638:	3303      	adds	r3, #3
   1663a:	109b      	asrs	r3, r3, #2
   1663c:	b2db      	uxtb	r3, r3
   1663e:	00db      	lsls	r3, r3, #3
   16640:	b2da      	uxtb	r2, r3
   16642:	687b      	ldr	r3, [r7, #4]
   16644:	4917      	ldr	r1, [pc, #92]	; (166a4 <SeesawInitializeKeypad+0xe8>)
   16646:	400b      	ands	r3, r1
   16648:	d504      	bpl.n	16654 <SeesawInitializeKeypad+0x98>
   1664a:	3b01      	subs	r3, #1
   1664c:	2104      	movs	r1, #4
   1664e:	4249      	negs	r1, r1
   16650:	430b      	orrs	r3, r1
   16652:	3301      	adds	r3, #1
   16654:	b2db      	uxtb	r3, r3
   16656:	18d3      	adds	r3, r2, r3
   16658:	b2db      	uxtb	r3, r3
   1665a:	2201      	movs	r2, #1
   1665c:	2102      	movs	r1, #2
   1665e:	0018      	movs	r0, r3
   16660:	4b11      	ldr	r3, [pc, #68]	; (166a8 <SeesawInitializeKeypad+0xec>)
   16662:	4798      	blx	r3
   16664:	0002      	movs	r2, r0
   16666:	683b      	ldr	r3, [r7, #0]
   16668:	4313      	orrs	r3, r2
   1666a:	603b      	str	r3, [r7, #0]
        if (ERROR_NONE != error) {
   1666c:	683b      	ldr	r3, [r7, #0]
   1666e:	2b00      	cmp	r3, #0
   16670:	d003      	beq.n	1667a <SeesawInitializeKeypad+0xbe>
            SerialConsoleWriteString("Could not initialize Keypad!/r/n");
   16672:	4b0a      	ldr	r3, [pc, #40]	; (1669c <SeesawInitializeKeypad+0xe0>)
   16674:	0018      	movs	r0, r3
   16676:	4b0a      	ldr	r3, [pc, #40]	; (166a0 <SeesawInitializeKeypad+0xe4>)
   16678:	4798      	blx	r3
    for (int i = 0; i < 16; i++) {
   1667a:	687b      	ldr	r3, [r7, #4]
   1667c:	3301      	adds	r3, #1
   1667e:	607b      	str	r3, [r7, #4]
   16680:	687b      	ldr	r3, [r7, #4]
   16682:	2b0f      	cmp	r3, #15
   16684:	ddba      	ble.n	165fc <SeesawInitializeKeypad+0x40>
        }
    }
}
   16686:	46c0      	nop			; (mov r8, r8)
   16688:	46bd      	mov	sp, r7
   1668a:	b002      	add	sp, #8
   1668c:	bd80      	pop	{r7, pc}
   1668e:	46c0      	nop			; (mov r8, r8)
   16690:	200048b4 	.word	0x200048b4
   16694:	00037378 	.word	0x00037378
   16698:	00015105 	.word	0x00015105
   1669c:	0003746c 	.word	0x0003746c
   166a0:	0001ebe5 	.word	0x0001ebe5
   166a4:	80000003 	.word	0x80000003
   166a8:	000163ed 	.word	0x000163ed

000166ac <SeesawTurnOnLedTest>:

static void SeesawTurnOnLedTest(void)
{
   166ac:	b5b0      	push	{r4, r5, r7, lr}
   166ae:	af00      	add	r7, sp, #0
    SeesawSetLed(15, 255, 255, 255);
   166b0:	23ff      	movs	r3, #255	; 0xff
   166b2:	22ff      	movs	r2, #255	; 0xff
   166b4:	21ff      	movs	r1, #255	; 0xff
   166b6:	200f      	movs	r0, #15
   166b8:	4c09      	ldr	r4, [pc, #36]	; (166e0 <SeesawTurnOnLedTest+0x34>)
   166ba:	47a0      	blx	r4
    SeesawOrderLedUpdate();
   166bc:	4b09      	ldr	r3, [pc, #36]	; (166e4 <SeesawTurnOnLedTest+0x38>)
   166be:	4798      	blx	r3
    vTaskDelay(400);
   166c0:	23c8      	movs	r3, #200	; 0xc8
   166c2:	005b      	lsls	r3, r3, #1
   166c4:	0018      	movs	r0, r3
   166c6:	4b08      	ldr	r3, [pc, #32]	; (166e8 <SeesawTurnOnLedTest+0x3c>)
   166c8:	4798      	blx	r3

    SeesawSetLed(15, 0, 0, 0);
   166ca:	2300      	movs	r3, #0
   166cc:	2200      	movs	r2, #0
   166ce:	2100      	movs	r1, #0
   166d0:	200f      	movs	r0, #15
   166d2:	4c03      	ldr	r4, [pc, #12]	; (166e0 <SeesawTurnOnLedTest+0x34>)
   166d4:	47a0      	blx	r4
    SeesawOrderLedUpdate();
   166d6:	4b03      	ldr	r3, [pc, #12]	; (166e4 <SeesawTurnOnLedTest+0x38>)
   166d8:	4798      	blx	r3
   166da:	46c0      	nop			; (mov r8, r8)
   166dc:	46bd      	mov	sp, r7
   166de:	bdb0      	pop	{r4, r5, r7, pc}
   166e0:	000164b5 	.word	0x000164b5
   166e4:	0001657d 	.word	0x0001657d
   166e8:	0001cf91 	.word	0x0001cf91

000166ec <vUiHandlerTask>:
 * @param[in]	Parameters passed when task is initialized. In this case we can ignore them!
 * @return		Should not return! This is a task defining function.
 * @note
 */
void vUiHandlerTask(void *pvParameters)
{
   166ec:	b590      	push	{r4, r7, lr}
   166ee:	b089      	sub	sp, #36	; 0x24
   166f0:	af02      	add	r7, sp, #8
   166f2:	6078      	str	r0, [r7, #4]
    // Do initialization code here
    SerialConsoleWriteString("UI Task Started!");
   166f4:	4b99      	ldr	r3, [pc, #612]	; (1695c <vUiHandlerTask+0x270>)
   166f6:	0018      	movs	r0, r3
   166f8:	4b99      	ldr	r3, [pc, #612]	; (16960 <vUiHandlerTask+0x274>)
   166fa:	4798      	blx	r3
    uiState = UI_STATE_IGNORE_PRESSES;  // Initial state
   166fc:	4b99      	ldr	r3, [pc, #612]	; (16964 <vUiHandlerTask+0x278>)
   166fe:	2201      	movs	r2, #1
   16700:	701a      	strb	r2, [r3, #0]

    // Graphics Test - Students to uncomment to test out the OLED driver if you are using it! 
	
    gfx_mono_init();
   16702:	4b99      	ldr	r3, [pc, #612]	; (16968 <vUiHandlerTask+0x27c>)
   16704:	4798      	blx	r3
    gfx_mono_draw_line(0, 0, 64, 48, GFX_PIXEL_SET);
   16706:	2301      	movs	r3, #1
   16708:	9300      	str	r3, [sp, #0]
   1670a:	2330      	movs	r3, #48	; 0x30
   1670c:	2240      	movs	r2, #64	; 0x40
   1670e:	2100      	movs	r1, #0
   16710:	2000      	movs	r0, #0
   16712:	4c96      	ldr	r4, [pc, #600]	; (1696c <vUiHandlerTask+0x280>)
   16714:	47a0      	blx	r4
    gfx_mono_draw_filled_circle(54, 24, 10, GFX_PIXEL_SET, GFX_WHOLE);
   16716:	23ff      	movs	r3, #255	; 0xff
   16718:	9300      	str	r3, [sp, #0]
   1671a:	2301      	movs	r3, #1
   1671c:	220a      	movs	r2, #10
   1671e:	2118      	movs	r1, #24
   16720:	2036      	movs	r0, #54	; 0x36
   16722:	4c93      	ldr	r4, [pc, #588]	; (16970 <vUiHandlerTask+0x284>)
   16724:	47a0      	blx	r4
	gfx_mono_draw_string("ESE516",0,0, &sysfont);
   16726:	4b93      	ldr	r3, [pc, #588]	; (16974 <vUiHandlerTask+0x288>)
   16728:	4893      	ldr	r0, [pc, #588]	; (16978 <vUiHandlerTask+0x28c>)
   1672a:	2200      	movs	r2, #0
   1672c:	2100      	movs	r1, #0
   1672e:	4c93      	ldr	r4, [pc, #588]	; (1697c <vUiHandlerTask+0x290>)
   16730:	47a0      	blx	r4
	

    // Here we start the loop for the UI State Machine
    while (1) {
        switch (uiState) {
   16732:	4b8c      	ldr	r3, [pc, #560]	; (16964 <vUiHandlerTask+0x278>)
   16734:	781b      	ldrb	r3, [r3, #0]
   16736:	2b01      	cmp	r3, #1
   16738:	d100      	bne.n	1673c <vUiHandlerTask+0x50>
   1673a:	e107      	b.n	1694c <vUiHandlerTask+0x260>
   1673c:	2b02      	cmp	r3, #2
   1673e:	d002      	beq.n	16746 <vUiHandlerTask+0x5a>
   16740:	2b00      	cmp	r3, #0
   16742:	d06e      	beq.n	16822 <vUiHandlerTask+0x136>
   16744:	e0fe      	b.n	16944 <vUiHandlerTask+0x258>
            }

            case (UI_STATE_SHOW_MOVES): {
                // Set initial state variable that will be used on the
                // UI_STATE_Handle_Buttons and need to be initialized once
                pressedKeys = 0;  // Set number of keys pressed by player to 0.
   16746:	4b8e      	ldr	r3, [pc, #568]	; (16980 <vUiHandlerTask+0x294>)
   16748:	2200      	movs	r2, #0
   1674a:	701a      	strb	r2, [r3, #0]
                keysToPress = 1;  // Set as an example to 1. STUDENTS should change this
   1674c:	4b8d      	ldr	r3, [pc, #564]	; (16984 <vUiHandlerTask+0x298>)
   1674e:	2201      	movs	r2, #1
   16750:	701a      	strb	r2, [r3, #0]
                                  // to the number of key presses needed.
                memset(gamePacketOut.game, 0xff,
   16752:	4b8d      	ldr	r3, [pc, #564]	; (16988 <vUiHandlerTask+0x29c>)
   16754:	2214      	movs	r2, #20
   16756:	21ff      	movs	r1, #255	; 0xff
   16758:	0018      	movs	r0, r3
   1675a:	4b8c      	ldr	r3, [pc, #560]	; (1698c <vUiHandlerTask+0x2a0>)
   1675c:	4798      	blx	r3
                       sizeof(gamePacketOut.game));  // Erase gamePacketOut to an initial state
                playIsDone = false;                  // Set play to false
   1675e:	4b8c      	ldr	r3, [pc, #560]	; (16990 <vUiHandlerTask+0x2a4>)
   16760:	2200      	movs	r2, #0
   16762:	701a      	strb	r2, [r3, #0]
                uint8_t presses = SeesawGetKeypadCount();
   16764:	2317      	movs	r3, #23
   16766:	18fc      	adds	r4, r7, r3
   16768:	4b8a      	ldr	r3, [pc, #552]	; (16994 <vUiHandlerTask+0x2a8>)
   1676a:	4798      	blx	r3
   1676c:	0003      	movs	r3, r0
   1676e:	7023      	strb	r3, [r4, #0]
                if (presses >= BUTTON_PRESSES_MAX) presses = BUTTON_PRESSES_MAX;
   16770:	2317      	movs	r3, #23
   16772:	18fb      	adds	r3, r7, r3
   16774:	781b      	ldrb	r3, [r3, #0]
   16776:	2b0f      	cmp	r3, #15
   16778:	d903      	bls.n	16782 <vUiHandlerTask+0x96>
   1677a:	2317      	movs	r3, #23
   1677c:	18fb      	adds	r3, r7, r3
   1677e:	2210      	movs	r2, #16
   16780:	701a      	strb	r2, [r3, #0]
                if (presses != 0)
   16782:	2317      	movs	r3, #23
   16784:	18fb      	adds	r3, r7, r3
   16786:	781b      	ldrb	r3, [r3, #0]
   16788:	2b00      	cmp	r3, #0
   1678a:	d007      	beq.n	1679c <vUiHandlerTask+0xb0>
                    SeesawReadKeypad(buttons,
   1678c:	2317      	movs	r3, #23
   1678e:	18fb      	adds	r3, r7, r3
   16790:	781a      	ldrb	r2, [r3, #0]
   16792:	4b81      	ldr	r3, [pc, #516]	; (16998 <vUiHandlerTask+0x2ac>)
   16794:	0011      	movs	r1, r2
   16796:	0018      	movs	r0, r3
   16798:	4b80      	ldr	r3, [pc, #512]	; (1699c <vUiHandlerTask+0x2b0>)
   1679a:	4798      	blx	r3
                                     presses);  // Empty Seesaw buffer just in case
                                                // it has latent presses on it!
                memset(buttons, 0, BUTTON_PRESSES_MAX);
   1679c:	4b7e      	ldr	r3, [pc, #504]	; (16998 <vUiHandlerTask+0x2ac>)
   1679e:	2210      	movs	r2, #16
   167a0:	2100      	movs	r1, #0
   167a2:	0018      	movs	r0, r3
   167a4:	4b79      	ldr	r3, [pc, #484]	; (1698c <vUiHandlerTask+0x2a0>)
   167a6:	4798      	blx	r3
                // the message gets longer might be more fun! After you finish showing
                // the move should go to state UI_STATE_HANDLE_BUTTONS

                // In the beginner example we turn LED0 and LED15 will turn on for 500
                // ms then we go to UI_STATE_HANDLE_BUTTONS
                SeesawSetLed(0, red, green, blue);  // Turn button 1 on
   167a8:	4b7d      	ldr	r3, [pc, #500]	; (169a0 <vUiHandlerTask+0x2b4>)
   167aa:	781b      	ldrb	r3, [r3, #0]
   167ac:	b2d9      	uxtb	r1, r3
   167ae:	4b7d      	ldr	r3, [pc, #500]	; (169a4 <vUiHandlerTask+0x2b8>)
   167b0:	781b      	ldrb	r3, [r3, #0]
   167b2:	b2da      	uxtb	r2, r3
   167b4:	4b7c      	ldr	r3, [pc, #496]	; (169a8 <vUiHandlerTask+0x2bc>)
   167b6:	781b      	ldrb	r3, [r3, #0]
   167b8:	b2db      	uxtb	r3, r3
   167ba:	2000      	movs	r0, #0
   167bc:	4c7b      	ldr	r4, [pc, #492]	; (169ac <vUiHandlerTask+0x2c0>)
   167be:	47a0      	blx	r4
                SeesawOrderLedUpdate();
   167c0:	4b7b      	ldr	r3, [pc, #492]	; (169b0 <vUiHandlerTask+0x2c4>)
   167c2:	4798      	blx	r3
                vTaskDelay(1000);
   167c4:	23fa      	movs	r3, #250	; 0xfa
   167c6:	009b      	lsls	r3, r3, #2
   167c8:	0018      	movs	r0, r3
   167ca:	4b7a      	ldr	r3, [pc, #488]	; (169b4 <vUiHandlerTask+0x2c8>)
   167cc:	4798      	blx	r3
                SeesawSetLed(0, 0, 0, 0);            // Turn button 0 off
   167ce:	2300      	movs	r3, #0
   167d0:	2200      	movs	r2, #0
   167d2:	2100      	movs	r1, #0
   167d4:	2000      	movs	r0, #0
   167d6:	4c75      	ldr	r4, [pc, #468]	; (169ac <vUiHandlerTask+0x2c0>)
   167d8:	47a0      	blx	r4
                SeesawSetLed(15, red, green, blue);  // Turn button 15 on
   167da:	4b71      	ldr	r3, [pc, #452]	; (169a0 <vUiHandlerTask+0x2b4>)
   167dc:	781b      	ldrb	r3, [r3, #0]
   167de:	b2d9      	uxtb	r1, r3
   167e0:	4b70      	ldr	r3, [pc, #448]	; (169a4 <vUiHandlerTask+0x2b8>)
   167e2:	781b      	ldrb	r3, [r3, #0]
   167e4:	b2da      	uxtb	r2, r3
   167e6:	4b70      	ldr	r3, [pc, #448]	; (169a8 <vUiHandlerTask+0x2bc>)
   167e8:	781b      	ldrb	r3, [r3, #0]
   167ea:	b2db      	uxtb	r3, r3
   167ec:	200f      	movs	r0, #15
   167ee:	4c6f      	ldr	r4, [pc, #444]	; (169ac <vUiHandlerTask+0x2c0>)
   167f0:	47a0      	blx	r4
                SeesawOrderLedUpdate();
   167f2:	4b6f      	ldr	r3, [pc, #444]	; (169b0 <vUiHandlerTask+0x2c4>)
   167f4:	4798      	blx	r3
                vTaskDelay(1000);
   167f6:	23fa      	movs	r3, #250	; 0xfa
   167f8:	009b      	lsls	r3, r3, #2
   167fa:	0018      	movs	r0, r3
   167fc:	4b6d      	ldr	r3, [pc, #436]	; (169b4 <vUiHandlerTask+0x2c8>)
   167fe:	4798      	blx	r3
                SeesawSetLed(15, 0, 0, 0);  // Turn button 15 off
   16800:	2300      	movs	r3, #0
   16802:	2200      	movs	r2, #0
   16804:	2100      	movs	r1, #0
   16806:	200f      	movs	r0, #15
   16808:	4c68      	ldr	r4, [pc, #416]	; (169ac <vUiHandlerTask+0x2c0>)
   1680a:	47a0      	blx	r4
                SeesawOrderLedUpdate();
   1680c:	4b68      	ldr	r3, [pc, #416]	; (169b0 <vUiHandlerTask+0x2c4>)
   1680e:	4798      	blx	r3
                vTaskDelay(1000);
   16810:	23fa      	movs	r3, #250	; 0xfa
   16812:	009b      	lsls	r3, r3, #2
   16814:	0018      	movs	r0, r3
   16816:	4b67      	ldr	r3, [pc, #412]	; (169b4 <vUiHandlerTask+0x2c8>)
   16818:	4798      	blx	r3
                uiState = UI_STATE_HANDLE_BUTTONS;
   1681a:	4b52      	ldr	r3, [pc, #328]	; (16964 <vUiHandlerTask+0x278>)
   1681c:	2200      	movs	r2, #0
   1681e:	701a      	strb	r2, [r3, #0]

                break;
   16820:	e097      	b.n	16952 <vUiHandlerTask+0x266>
                // should be stored on "gamePacketOut". The keypresses that should count
                // are when the player RELEASES the button.

                // In this example, we return after only one button press!

                uint8_t numPresses = SeesawGetKeypadCount();
   16822:	2316      	movs	r3, #22
   16824:	18fc      	adds	r4, r7, r3
   16826:	4b5b      	ldr	r3, [pc, #364]	; (16994 <vUiHandlerTask+0x2a8>)
   16828:	4798      	blx	r3
   1682a:	0003      	movs	r3, r0
   1682c:	7023      	strb	r3, [r4, #0]
                memset(buttons, 0, BUTTON_PRESSES_MAX);
   1682e:	4b5a      	ldr	r3, [pc, #360]	; (16998 <vUiHandlerTask+0x2ac>)
   16830:	2210      	movs	r2, #16
   16832:	2100      	movs	r1, #0
   16834:	0018      	movs	r0, r3
   16836:	4b55      	ldr	r3, [pc, #340]	; (1698c <vUiHandlerTask+0x2a0>)
   16838:	4798      	blx	r3

                if (numPresses >= BUTTON_PRESSES_MAX) {
   1683a:	2316      	movs	r3, #22
   1683c:	18fb      	adds	r3, r7, r3
   1683e:	781b      	ldrb	r3, [r3, #0]
   16840:	2b0f      	cmp	r3, #15
   16842:	d903      	bls.n	1684c <vUiHandlerTask+0x160>
                    numPresses = BUTTON_PRESSES_MAX;
   16844:	2316      	movs	r3, #22
   16846:	18fb      	adds	r3, r7, r3
   16848:	2210      	movs	r2, #16
   1684a:	701a      	strb	r2, [r3, #0]
                }
                if (numPresses != 0 && ERROR_NONE == SeesawReadKeypad(buttons, numPresses)) {
   1684c:	2316      	movs	r3, #22
   1684e:	18fb      	adds	r3, r7, r3
   16850:	781b      	ldrb	r3, [r3, #0]
   16852:	2b00      	cmp	r3, #0
   16854:	d065      	beq.n	16922 <vUiHandlerTask+0x236>
   16856:	2316      	movs	r3, #22
   16858:	18fb      	adds	r3, r7, r3
   1685a:	781a      	ldrb	r2, [r3, #0]
   1685c:	4b4e      	ldr	r3, [pc, #312]	; (16998 <vUiHandlerTask+0x2ac>)
   1685e:	0011      	movs	r1, r2
   16860:	0018      	movs	r0, r3
   16862:	4b4e      	ldr	r3, [pc, #312]	; (1699c <vUiHandlerTask+0x2b0>)
   16864:	4798      	blx	r3
   16866:	1e03      	subs	r3, r0, #0
   16868:	d15b      	bne.n	16922 <vUiHandlerTask+0x236>
                    // Process Buttons
                    for (int iter = 0; iter < numPresses; iter++) {
   1686a:	2300      	movs	r3, #0
   1686c:	613b      	str	r3, [r7, #16]
   1686e:	e050      	b.n	16912 <vUiHandlerTask+0x226>
                        uint8_t keynum = NEO_TRELLIS_SEESAW_KEY((buttons[iter] & 0xFD) >> 2);
   16870:	4a49      	ldr	r2, [pc, #292]	; (16998 <vUiHandlerTask+0x2ac>)
   16872:	693b      	ldr	r3, [r7, #16]
   16874:	18d3      	adds	r3, r2, r3
   16876:	781b      	ldrb	r3, [r3, #0]
   16878:	089b      	lsrs	r3, r3, #2
   1687a:	b2db      	uxtb	r3, r3
   1687c:	2b00      	cmp	r3, #0
   1687e:	da00      	bge.n	16882 <vUiHandlerTask+0x196>
   16880:	3307      	adds	r3, #7
   16882:	10db      	asrs	r3, r3, #3
   16884:	b2db      	uxtb	r3, r3
   16886:	009b      	lsls	r3, r3, #2
   16888:	b2d9      	uxtb	r1, r3
   1688a:	4a43      	ldr	r2, [pc, #268]	; (16998 <vUiHandlerTask+0x2ac>)
   1688c:	693b      	ldr	r3, [r7, #16]
   1688e:	18d3      	adds	r3, r2, r3
   16890:	781b      	ldrb	r3, [r3, #0]
   16892:	089b      	lsrs	r3, r3, #2
   16894:	b2db      	uxtb	r3, r3
   16896:	2207      	movs	r2, #7
   16898:	4013      	ands	r3, r2
   1689a:	b2da      	uxtb	r2, r3
   1689c:	230f      	movs	r3, #15
   1689e:	18fb      	adds	r3, r7, r3
   168a0:	188a      	adds	r2, r1, r2
   168a2:	701a      	strb	r2, [r3, #0]
                        uint8_t actionButton = buttons[iter] & 0x03;
   168a4:	4a3c      	ldr	r2, [pc, #240]	; (16998 <vUiHandlerTask+0x2ac>)
   168a6:	693b      	ldr	r3, [r7, #16]
   168a8:	18d3      	adds	r3, r2, r3
   168aa:	781a      	ldrb	r2, [r3, #0]
   168ac:	230e      	movs	r3, #14
   168ae:	18fb      	adds	r3, r7, r3
   168b0:	2103      	movs	r1, #3
   168b2:	400a      	ands	r2, r1
   168b4:	701a      	strb	r2, [r3, #0]
                        if (actionButton == 0x03) {
   168b6:	230e      	movs	r3, #14
   168b8:	18fb      	adds	r3, r7, r3
   168ba:	781b      	ldrb	r3, [r3, #0]
   168bc:	2b03      	cmp	r3, #3
   168be:	d10f      	bne.n	168e0 <vUiHandlerTask+0x1f4>
                            SeesawSetLed(keynum, red, green, blue);
   168c0:	4b37      	ldr	r3, [pc, #220]	; (169a0 <vUiHandlerTask+0x2b4>)
   168c2:	781b      	ldrb	r3, [r3, #0]
   168c4:	b2d9      	uxtb	r1, r3
   168c6:	4b37      	ldr	r3, [pc, #220]	; (169a4 <vUiHandlerTask+0x2b8>)
   168c8:	781b      	ldrb	r3, [r3, #0]
   168ca:	b2da      	uxtb	r2, r3
   168cc:	4b36      	ldr	r3, [pc, #216]	; (169a8 <vUiHandlerTask+0x2bc>)
   168ce:	781b      	ldrb	r3, [r3, #0]
   168d0:	b2dc      	uxtb	r4, r3
   168d2:	230f      	movs	r3, #15
   168d4:	18fb      	adds	r3, r7, r3
   168d6:	7818      	ldrb	r0, [r3, #0]
   168d8:	0023      	movs	r3, r4
   168da:	4c34      	ldr	r4, [pc, #208]	; (169ac <vUiHandlerTask+0x2c0>)
   168dc:	47a0      	blx	r4
   168de:	e015      	b.n	1690c <vUiHandlerTask+0x220>
                        } else {
                            SeesawSetLed(keynum, 0, 0, 0);
   168e0:	230f      	movs	r3, #15
   168e2:	18fb      	adds	r3, r7, r3
   168e4:	7818      	ldrb	r0, [r3, #0]
   168e6:	2300      	movs	r3, #0
   168e8:	2200      	movs	r2, #0
   168ea:	2100      	movs	r1, #0
   168ec:	4c2f      	ldr	r4, [pc, #188]	; (169ac <vUiHandlerTask+0x2c0>)
   168ee:	47a0      	blx	r4
                            // Button released! Count this into the buttons pressed by user.
                            gamePacketOut.game[pressedKeys] = keynum;
   168f0:	4b23      	ldr	r3, [pc, #140]	; (16980 <vUiHandlerTask+0x294>)
   168f2:	781b      	ldrb	r3, [r3, #0]
   168f4:	0019      	movs	r1, r3
   168f6:	4b24      	ldr	r3, [pc, #144]	; (16988 <vUiHandlerTask+0x29c>)
   168f8:	220f      	movs	r2, #15
   168fa:	18ba      	adds	r2, r7, r2
   168fc:	7812      	ldrb	r2, [r2, #0]
   168fe:	545a      	strb	r2, [r3, r1]
                            pressedKeys++;
   16900:	4b1f      	ldr	r3, [pc, #124]	; (16980 <vUiHandlerTask+0x294>)
   16902:	781b      	ldrb	r3, [r3, #0]
   16904:	3301      	adds	r3, #1
   16906:	b2da      	uxtb	r2, r3
   16908:	4b1d      	ldr	r3, [pc, #116]	; (16980 <vUiHandlerTask+0x294>)
   1690a:	701a      	strb	r2, [r3, #0]
                    for (int iter = 0; iter < numPresses; iter++) {
   1690c:	693b      	ldr	r3, [r7, #16]
   1690e:	3301      	adds	r3, #1
   16910:	613b      	str	r3, [r7, #16]
   16912:	2316      	movs	r3, #22
   16914:	18fb      	adds	r3, r7, r3
   16916:	781a      	ldrb	r2, [r3, #0]
   16918:	693b      	ldr	r3, [r7, #16]
   1691a:	429a      	cmp	r2, r3
   1691c:	dca8      	bgt.n	16870 <vUiHandlerTask+0x184>
                        }
                    }
                    SeesawOrderLedUpdate();
   1691e:	4b24      	ldr	r3, [pc, #144]	; (169b0 <vUiHandlerTask+0x2c4>)
   16920:	4798      	blx	r3
                }

                // Check if we are done!
                if (pressedKeys >= keysToPress || pressedKeys >= GAME_SIZE) {
   16922:	4b17      	ldr	r3, [pc, #92]	; (16980 <vUiHandlerTask+0x294>)
   16924:	781a      	ldrb	r2, [r3, #0]
   16926:	4b17      	ldr	r3, [pc, #92]	; (16984 <vUiHandlerTask+0x298>)
   16928:	781b      	ldrb	r3, [r3, #0]
   1692a:	429a      	cmp	r2, r3
   1692c:	d203      	bcs.n	16936 <vUiHandlerTask+0x24a>
   1692e:	4b14      	ldr	r3, [pc, #80]	; (16980 <vUiHandlerTask+0x294>)
   16930:	781b      	ldrb	r3, [r3, #0]
   16932:	2b13      	cmp	r3, #19
   16934:	d90c      	bls.n	16950 <vUiHandlerTask+0x264>
                    // Tell control gamePacketOut is ready to be send out AND go back to
                    // UI_STATE_IGNORE_PRESSES
                    playIsDone = true;
   16936:	4b16      	ldr	r3, [pc, #88]	; (16990 <vUiHandlerTask+0x2a4>)
   16938:	2201      	movs	r2, #1
   1693a:	701a      	strb	r2, [r3, #0]
                    uiState = UI_STATE_IGNORE_PRESSES;
   1693c:	4b09      	ldr	r3, [pc, #36]	; (16964 <vUiHandlerTask+0x278>)
   1693e:	2201      	movs	r2, #1
   16940:	701a      	strb	r2, [r3, #0]
                }

                break;
   16942:	e005      	b.n	16950 <vUiHandlerTask+0x264>
            }

            default:  // In case of unforseen error, it is always good to sent state
                      // machine to an initial state.
                uiState = UI_STATE_HANDLE_BUTTONS;
   16944:	4b07      	ldr	r3, [pc, #28]	; (16964 <vUiHandlerTask+0x278>)
   16946:	2200      	movs	r2, #0
   16948:	701a      	strb	r2, [r3, #0]
                break;
   1694a:	e002      	b.n	16952 <vUiHandlerTask+0x266>
                break;
   1694c:	46c0      	nop			; (mov r8, r8)
   1694e:	e000      	b.n	16952 <vUiHandlerTask+0x266>
                break;
   16950:	46c0      	nop			; (mov r8, r8)
        }

        // After execution, you can put a thread to sleep for some time.
        vTaskDelay(50);
   16952:	2032      	movs	r0, #50	; 0x32
   16954:	4b17      	ldr	r3, [pc, #92]	; (169b4 <vUiHandlerTask+0x2c8>)
   16956:	4798      	blx	r3
        switch (uiState) {
   16958:	e6eb      	b.n	16732 <vUiHandlerTask+0x46>
   1695a:	46c0      	nop			; (mov r8, r8)
   1695c:	00037490 	.word	0x00037490
   16960:	0001ebe5 	.word	0x0001ebe5
   16964:	200048fc 	.word	0x200048fc
   16968:	00012f19 	.word	0x00012f19
   1696c:	0001266d 	.word	0x0001266d
   16970:	00012961 	.word	0x00012961
   16974:	20000000 	.word	0x20000000
   16978:	000374a4 	.word	0x000374a4
   1697c:	00012dbd 	.word	0x00012dbd
   16980:	20000621 	.word	0x20000621
   16984:	20000622 	.word	0x20000622
   16988:	200048c4 	.word	0x200048c4
   1698c:	0003582f 	.word	0x0003582f
   16990:	20000623 	.word	0x20000623
   16994:	00016301 	.word	0x00016301
   16998:	200048ec 	.word	0x200048ec
   1699c:	00016369 	.word	0x00016369
   169a0:	20000620 	.word	0x20000620
   169a4:	2000002c 	.word	0x2000002c
   169a8:	2000002d 	.word	0x2000002d
   169ac:	000164b5 	.word	0x000164b5
   169b0:	0001657d 	.word	0x0001657d
   169b4:	0001cf91 	.word	0x0001cf91

000169b8 <UiOrderShowMoves>:

/******************************************************************************
 * Functions
 ******************************************************************************/
void UiOrderShowMoves(struct GameDataPacket *packetIn)
{
   169b8:	b580      	push	{r7, lr}
   169ba:	b082      	sub	sp, #8
   169bc:	af00      	add	r7, sp, #0
   169be:	6078      	str	r0, [r7, #4]
    memcpy(&gamePacketIn, packetIn, sizeof(gamePacketIn));
   169c0:	4a08      	ldr	r2, [pc, #32]	; (169e4 <UiOrderShowMoves+0x2c>)
   169c2:	687b      	ldr	r3, [r7, #4]
   169c4:	0010      	movs	r0, r2
   169c6:	0019      	movs	r1, r3
   169c8:	2314      	movs	r3, #20
   169ca:	001a      	movs	r2, r3
   169cc:	4b06      	ldr	r3, [pc, #24]	; (169e8 <UiOrderShowMoves+0x30>)
   169ce:	4798      	blx	r3
    uiState = UI_STATE_SHOW_MOVES;
   169d0:	4b06      	ldr	r3, [pc, #24]	; (169ec <UiOrderShowMoves+0x34>)
   169d2:	2202      	movs	r2, #2
   169d4:	701a      	strb	r2, [r3, #0]
    playIsDone = false;  // Set play to false
   169d6:	4b06      	ldr	r3, [pc, #24]	; (169f0 <UiOrderShowMoves+0x38>)
   169d8:	2200      	movs	r2, #0
   169da:	701a      	strb	r2, [r3, #0]
}
   169dc:	46c0      	nop			; (mov r8, r8)
   169de:	46bd      	mov	sp, r7
   169e0:	b002      	add	sp, #8
   169e2:	bd80      	pop	{r7, pc}
   169e4:	200048d8 	.word	0x200048d8
   169e8:	000357f9 	.word	0x000357f9
   169ec:	200048fc 	.word	0x200048fc
   169f0:	20000623 	.word	0x20000623

000169f4 <UiPlayIsDone>:

bool UiPlayIsDone(void)
{
   169f4:	b580      	push	{r7, lr}
   169f6:	af00      	add	r7, sp, #0
    return playIsDone;
   169f8:	4b02      	ldr	r3, [pc, #8]	; (16a04 <UiPlayIsDone+0x10>)
   169fa:	781b      	ldrb	r3, [r3, #0]
}
   169fc:	0018      	movs	r0, r3
   169fe:	46bd      	mov	sp, r7
   16a00:	bd80      	pop	{r7, pc}
   16a02:	46c0      	nop			; (mov r8, r8)
   16a04:	20000623 	.word	0x20000623

00016a08 <UiGetGamePacketOut>:

struct GameDataPacket *UiGetGamePacketOut(void)
{
   16a08:	b580      	push	{r7, lr}
   16a0a:	af00      	add	r7, sp, #0
    return &gamePacketOut;
   16a0c:	4b01      	ldr	r3, [pc, #4]	; (16a14 <UiGetGamePacketOut+0xc>)
}
   16a0e:	0018      	movs	r0, r3
   16a10:	46bd      	mov	sp, r7
   16a12:	bd80      	pop	{r7, pc}
   16a14:	200048c4 	.word	0x200048c4

00016a18 <UIChangeColors>:
 * @return
 * @note

*/
void UIChangeColors(uint8_t r, uint8_t g, uint8_t b)
{
   16a18:	b590      	push	{r4, r7, lr}
   16a1a:	b083      	sub	sp, #12
   16a1c:	af00      	add	r7, sp, #0
   16a1e:	0004      	movs	r4, r0
   16a20:	0008      	movs	r0, r1
   16a22:	0011      	movs	r1, r2
   16a24:	1dfb      	adds	r3, r7, #7
   16a26:	1c22      	adds	r2, r4, #0
   16a28:	701a      	strb	r2, [r3, #0]
   16a2a:	1dbb      	adds	r3, r7, #6
   16a2c:	1c02      	adds	r2, r0, #0
   16a2e:	701a      	strb	r2, [r3, #0]
   16a30:	1d7b      	adds	r3, r7, #5
   16a32:	1c0a      	adds	r2, r1, #0
   16a34:	701a      	strb	r2, [r3, #0]
    red = r;
   16a36:	4b08      	ldr	r3, [pc, #32]	; (16a58 <UIChangeColors+0x40>)
   16a38:	1dfa      	adds	r2, r7, #7
   16a3a:	7812      	ldrb	r2, [r2, #0]
   16a3c:	701a      	strb	r2, [r3, #0]
    green = g;
   16a3e:	4b07      	ldr	r3, [pc, #28]	; (16a5c <UIChangeColors+0x44>)
   16a40:	1dba      	adds	r2, r7, #6
   16a42:	7812      	ldrb	r2, [r2, #0]
   16a44:	701a      	strb	r2, [r3, #0]
    blue = b;
   16a46:	4b06      	ldr	r3, [pc, #24]	; (16a60 <UIChangeColors+0x48>)
   16a48:	1d7a      	adds	r2, r7, #5
   16a4a:	7812      	ldrb	r2, [r2, #0]
   16a4c:	701a      	strb	r2, [r3, #0]
}
   16a4e:	46c0      	nop			; (mov r8, r8)
   16a50:	46bd      	mov	sp, r7
   16a52:	b003      	add	sp, #12
   16a54:	bd90      	pop	{r4, r7, pc}
   16a56:	46c0      	nop			; (mov r8, r8)
   16a58:	20000620 	.word	0x20000620
   16a5c:	2000002c 	.word	0x2000002c
   16a60:	2000002d 	.word	0x2000002d

00016a64 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   16a64:	b580      	push	{r7, lr}
   16a66:	b084      	sub	sp, #16
   16a68:	af00      	add	r7, sp, #0
   16a6a:	0002      	movs	r2, r0
   16a6c:	1dfb      	adds	r3, r7, #7
   16a6e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   16a70:	230f      	movs	r3, #15
   16a72:	18fb      	adds	r3, r7, r3
   16a74:	1dfa      	adds	r2, r7, #7
   16a76:	7812      	ldrb	r2, [r2, #0]
   16a78:	09d2      	lsrs	r2, r2, #7
   16a7a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   16a7c:	230e      	movs	r3, #14
   16a7e:	18fb      	adds	r3, r7, r3
   16a80:	1dfa      	adds	r2, r7, #7
   16a82:	7812      	ldrb	r2, [r2, #0]
   16a84:	0952      	lsrs	r2, r2, #5
   16a86:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   16a88:	4b0d      	ldr	r3, [pc, #52]	; (16ac0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   16a8a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
   16a8c:	230f      	movs	r3, #15
   16a8e:	18fb      	adds	r3, r7, r3
   16a90:	781b      	ldrb	r3, [r3, #0]
   16a92:	2b00      	cmp	r3, #0
   16a94:	d10f      	bne.n	16ab6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   16a96:	230f      	movs	r3, #15
   16a98:	18fb      	adds	r3, r7, r3
   16a9a:	781b      	ldrb	r3, [r3, #0]
   16a9c:	009b      	lsls	r3, r3, #2
   16a9e:	2210      	movs	r2, #16
   16aa0:	4694      	mov	ip, r2
   16aa2:	44bc      	add	ip, r7
   16aa4:	4463      	add	r3, ip
   16aa6:	3b08      	subs	r3, #8
   16aa8:	681a      	ldr	r2, [r3, #0]
   16aaa:	230e      	movs	r3, #14
   16aac:	18fb      	adds	r3, r7, r3
   16aae:	781b      	ldrb	r3, [r3, #0]
   16ab0:	01db      	lsls	r3, r3, #7
   16ab2:	18d3      	adds	r3, r2, r3
   16ab4:	e000      	b.n	16ab8 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
   16ab6:	2300      	movs	r3, #0
	}
}
   16ab8:	0018      	movs	r0, r3
   16aba:	46bd      	mov	sp, r7
   16abc:	b004      	add	sp, #16
   16abe:	bd80      	pop	{r7, pc}
   16ac0:	41004400 	.word	0x41004400

00016ac4 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
   16ac4:	b580      	push	{r7, lr}
   16ac6:	b082      	sub	sp, #8
   16ac8:	af00      	add	r7, sp, #0
   16aca:	0002      	movs	r2, r0
   16acc:	1dfb      	adds	r3, r7, #7
   16ace:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   16ad0:	1dfb      	adds	r3, r7, #7
   16ad2:	781b      	ldrb	r3, [r3, #0]
   16ad4:	0018      	movs	r0, r3
   16ad6:	4b03      	ldr	r3, [pc, #12]	; (16ae4 <port_get_group_from_gpio_pin+0x20>)
   16ad8:	4798      	blx	r3
   16ada:	0003      	movs	r3, r0
}
   16adc:	0018      	movs	r0, r3
   16ade:	46bd      	mov	sp, r7
   16ae0:	b002      	add	sp, #8
   16ae2:	bd80      	pop	{r7, pc}
   16ae4:	00016a65 	.word	0x00016a65

00016ae8 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
   16ae8:	b580      	push	{r7, lr}
   16aea:	b084      	sub	sp, #16
   16aec:	af00      	add	r7, sp, #0
   16aee:	0002      	movs	r2, r0
   16af0:	1dfb      	adds	r3, r7, #7
   16af2:	701a      	strb	r2, [r3, #0]
   16af4:	1dbb      	adds	r3, r7, #6
   16af6:	1c0a      	adds	r2, r1, #0
   16af8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   16afa:	1dfb      	adds	r3, r7, #7
   16afc:	781b      	ldrb	r3, [r3, #0]
   16afe:	0018      	movs	r0, r3
   16b00:	4b0d      	ldr	r3, [pc, #52]	; (16b38 <port_pin_set_output_level+0x50>)
   16b02:	4798      	blx	r3
   16b04:	0003      	movs	r3, r0
   16b06:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   16b08:	1dfb      	adds	r3, r7, #7
   16b0a:	781b      	ldrb	r3, [r3, #0]
   16b0c:	221f      	movs	r2, #31
   16b0e:	4013      	ands	r3, r2
   16b10:	2201      	movs	r2, #1
   16b12:	409a      	lsls	r2, r3
   16b14:	0013      	movs	r3, r2
   16b16:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
   16b18:	1dbb      	adds	r3, r7, #6
   16b1a:	781b      	ldrb	r3, [r3, #0]
   16b1c:	2b00      	cmp	r3, #0
   16b1e:	d003      	beq.n	16b28 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   16b20:	68fb      	ldr	r3, [r7, #12]
   16b22:	68ba      	ldr	r2, [r7, #8]
   16b24:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
   16b26:	e002      	b.n	16b2e <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   16b28:	68fb      	ldr	r3, [r7, #12]
   16b2a:	68ba      	ldr	r2, [r7, #8]
   16b2c:	615a      	str	r2, [r3, #20]
}
   16b2e:	46c0      	nop			; (mov r8, r8)
   16b30:	46bd      	mov	sp, r7
   16b32:	b004      	add	sp, #16
   16b34:	bd80      	pop	{r7, pc}
   16b36:	46c0      	nop			; (mov r8, r8)
   16b38:	00016ac5 	.word	0x00016ac5

00016b3c <init_state>:

/**
 * \brief Initialize download state to not ready.
 */
static void init_state(void)
{
   16b3c:	b580      	push	{r7, lr}
   16b3e:	af00      	add	r7, sp, #0
    down_state = NOT_READY;
   16b40:	4b02      	ldr	r3, [pc, #8]	; (16b4c <init_state+0x10>)
   16b42:	2200      	movs	r2, #0
   16b44:	701a      	strb	r2, [r3, #0]
}
   16b46:	46c0      	nop			; (mov r8, r8)
   16b48:	46bd      	mov	sp, r7
   16b4a:	bd80      	pop	{r7, pc}
   16b4c:	20000639 	.word	0x20000639

00016b50 <clear_state>:
/**
 * \brief Clear state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void clear_state(download_state mask)
{
   16b50:	b580      	push	{r7, lr}
   16b52:	b082      	sub	sp, #8
   16b54:	af00      	add	r7, sp, #0
   16b56:	0002      	movs	r2, r0
   16b58:	1dfb      	adds	r3, r7, #7
   16b5a:	701a      	strb	r2, [r3, #0]
    down_state &= ~mask;
   16b5c:	1dfb      	adds	r3, r7, #7
   16b5e:	781b      	ldrb	r3, [r3, #0]
   16b60:	b25b      	sxtb	r3, r3
   16b62:	43db      	mvns	r3, r3
   16b64:	b25b      	sxtb	r3, r3
   16b66:	4a06      	ldr	r2, [pc, #24]	; (16b80 <clear_state+0x30>)
   16b68:	7812      	ldrb	r2, [r2, #0]
   16b6a:	b252      	sxtb	r2, r2
   16b6c:	4013      	ands	r3, r2
   16b6e:	b25b      	sxtb	r3, r3
   16b70:	b2da      	uxtb	r2, r3
   16b72:	4b03      	ldr	r3, [pc, #12]	; (16b80 <clear_state+0x30>)
   16b74:	701a      	strb	r2, [r3, #0]
}
   16b76:	46c0      	nop			; (mov r8, r8)
   16b78:	46bd      	mov	sp, r7
   16b7a:	b002      	add	sp, #8
   16b7c:	bd80      	pop	{r7, pc}
   16b7e:	46c0      	nop			; (mov r8, r8)
   16b80:	20000639 	.word	0x20000639

00016b84 <add_state>:
/**
 * \brief Add state parameter at download processing state.
 * \param[in] mask Check download_state.
 */
static void add_state(download_state mask)
{
   16b84:	b580      	push	{r7, lr}
   16b86:	b082      	sub	sp, #8
   16b88:	af00      	add	r7, sp, #0
   16b8a:	0002      	movs	r2, r0
   16b8c:	1dfb      	adds	r3, r7, #7
   16b8e:	701a      	strb	r2, [r3, #0]
    down_state |= mask;
   16b90:	4b05      	ldr	r3, [pc, #20]	; (16ba8 <add_state+0x24>)
   16b92:	781a      	ldrb	r2, [r3, #0]
   16b94:	1dfb      	adds	r3, r7, #7
   16b96:	781b      	ldrb	r3, [r3, #0]
   16b98:	4313      	orrs	r3, r2
   16b9a:	b2da      	uxtb	r2, r3
   16b9c:	4b02      	ldr	r3, [pc, #8]	; (16ba8 <add_state+0x24>)
   16b9e:	701a      	strb	r2, [r3, #0]
}
   16ba0:	46c0      	nop			; (mov r8, r8)
   16ba2:	46bd      	mov	sp, r7
   16ba4:	b002      	add	sp, #8
   16ba6:	bd80      	pop	{r7, pc}
   16ba8:	20000639 	.word	0x20000639

00016bac <is_state_set>:
 * \param[in] mask Check download_state.
 * \return true if this state is set, false otherwise.
 */

static inline bool is_state_set(download_state mask)
{
   16bac:	b580      	push	{r7, lr}
   16bae:	b082      	sub	sp, #8
   16bb0:	af00      	add	r7, sp, #0
   16bb2:	0002      	movs	r2, r0
   16bb4:	1dfb      	adds	r3, r7, #7
   16bb6:	701a      	strb	r2, [r3, #0]
    return ((down_state & mask) != 0);
   16bb8:	4b06      	ldr	r3, [pc, #24]	; (16bd4 <is_state_set+0x28>)
   16bba:	781b      	ldrb	r3, [r3, #0]
   16bbc:	1dfa      	adds	r2, r7, #7
   16bbe:	7812      	ldrb	r2, [r2, #0]
   16bc0:	4013      	ands	r3, r2
   16bc2:	b2db      	uxtb	r3, r3
   16bc4:	1e5a      	subs	r2, r3, #1
   16bc6:	4193      	sbcs	r3, r2
   16bc8:	b2db      	uxtb	r3, r3
}
   16bca:	0018      	movs	r0, r3
   16bcc:	46bd      	mov	sp, r7
   16bce:	b002      	add	sp, #8
   16bd0:	bd80      	pop	{r7, pc}
   16bd2:	46c0      	nop			; (mov r8, r8)
   16bd4:	20000639 	.word	0x20000639

00016bd8 <is_exist_file>:
 * \param[in] fp The file pointer to check.
 * \param[in] file_path_name The file name to check.
 * \return true if this file name is exist, false otherwise.
 */
static bool is_exist_file(FIL *fp, const char *file_path_name)
{
   16bd8:	b590      	push	{r4, r7, lr}
   16bda:	b085      	sub	sp, #20
   16bdc:	af00      	add	r7, sp, #0
   16bde:	6078      	str	r0, [r7, #4]
   16be0:	6039      	str	r1, [r7, #0]
    if (fp == NULL || file_path_name == NULL) {
   16be2:	687b      	ldr	r3, [r7, #4]
   16be4:	2b00      	cmp	r3, #0
   16be6:	d002      	beq.n	16bee <is_exist_file+0x16>
   16be8:	683b      	ldr	r3, [r7, #0]
   16bea:	2b00      	cmp	r3, #0
   16bec:	d101      	bne.n	16bf2 <is_exist_file+0x1a>
        return false;
   16bee:	2300      	movs	r3, #0
   16bf0:	e013      	b.n	16c1a <is_exist_file+0x42>
    }

    FRESULT ret = f_open(&file_object, (char const *)file_path_name, FA_OPEN_EXISTING);
   16bf2:	230f      	movs	r3, #15
   16bf4:	18fc      	adds	r4, r7, r3
   16bf6:	6839      	ldr	r1, [r7, #0]
   16bf8:	4b0a      	ldr	r3, [pc, #40]	; (16c24 <is_exist_file+0x4c>)
   16bfa:	2200      	movs	r2, #0
   16bfc:	0018      	movs	r0, r3
   16bfe:	4b0a      	ldr	r3, [pc, #40]	; (16c28 <is_exist_file+0x50>)
   16c00:	4798      	blx	r3
   16c02:	0003      	movs	r3, r0
   16c04:	7023      	strb	r3, [r4, #0]
    f_close(&file_object);
   16c06:	4b07      	ldr	r3, [pc, #28]	; (16c24 <is_exist_file+0x4c>)
   16c08:	0018      	movs	r0, r3
   16c0a:	4b08      	ldr	r3, [pc, #32]	; (16c2c <is_exist_file+0x54>)
   16c0c:	4798      	blx	r3
    return (ret == FR_OK);
   16c0e:	230f      	movs	r3, #15
   16c10:	18fb      	adds	r3, r7, r3
   16c12:	781b      	ldrb	r3, [r3, #0]
   16c14:	425a      	negs	r2, r3
   16c16:	4153      	adcs	r3, r2
   16c18:	b2db      	uxtb	r3, r3
}
   16c1a:	0018      	movs	r0, r3
   16c1c:	46bd      	mov	sp, r7
   16c1e:	b005      	add	sp, #20
   16c20:	bd90      	pop	{r4, r7, pc}
   16c22:	46c0      	nop			; (mov r8, r8)
   16c24:	2000086c 	.word	0x2000086c
   16c28:	0002e77d 	.word	0x0002e77d
   16c2c:	0002f17d 	.word	0x0002f17d

00016c30 <rename_to_unique>:
 * \param[out] file_path_name The file name change to uniquely and changed name is returned to this buffer.
 * \param[in] max_len Maximum file name length.
 * \return true if this file name is unique, false otherwise.
 */
static bool rename_to_unique(FIL *fp, char *file_path_name, uint8_t max_len)
{
   16c30:	b580      	push	{r7, lr}
   16c32:	b09e      	sub	sp, #120	; 0x78
   16c34:	af00      	add	r7, sp, #0
   16c36:	60f8      	str	r0, [r7, #12]
   16c38:	60b9      	str	r1, [r7, #8]
   16c3a:	1dfb      	adds	r3, r7, #7
   16c3c:	701a      	strb	r2, [r3, #0]
#define NUMBRING_MAX (3)
#define ADDITION_SIZE (NUMBRING_MAX + 1) /* '-' character is added before the number. */
    uint16_t i = 1, name_len = 0, ext_len = 0, count = 0;
   16c3e:	2376      	movs	r3, #118	; 0x76
   16c40:	18fb      	adds	r3, r7, r3
   16c42:	2201      	movs	r2, #1
   16c44:	801a      	strh	r2, [r3, #0]
   16c46:	2374      	movs	r3, #116	; 0x74
   16c48:	18fb      	adds	r3, r7, r3
   16c4a:	2200      	movs	r2, #0
   16c4c:	801a      	strh	r2, [r3, #0]
   16c4e:	236e      	movs	r3, #110	; 0x6e
   16c50:	18fb      	adds	r3, r7, r3
   16c52:	2200      	movs	r2, #0
   16c54:	801a      	strh	r2, [r3, #0]
   16c56:	2372      	movs	r3, #114	; 0x72
   16c58:	18fb      	adds	r3, r7, r3
   16c5a:	2200      	movs	r2, #0
   16c5c:	801a      	strh	r2, [r3, #0]
    char name[MAIN_MAX_FILE_NAME_LENGTH + 1] = {0};
   16c5e:	2324      	movs	r3, #36	; 0x24
   16c60:	18fb      	adds	r3, r7, r3
   16c62:	0018      	movs	r0, r3
   16c64:	2341      	movs	r3, #65	; 0x41
   16c66:	001a      	movs	r2, r3
   16c68:	2100      	movs	r1, #0
   16c6a:	4b92      	ldr	r3, [pc, #584]	; (16eb4 <rename_to_unique+0x284>)
   16c6c:	4798      	blx	r3
    char ext[MAIN_MAX_FILE_EXT_LENGTH + 1] = {0};
   16c6e:	2318      	movs	r3, #24
   16c70:	18fb      	adds	r3, r7, r3
   16c72:	0018      	movs	r0, r3
   16c74:	2309      	movs	r3, #9
   16c76:	001a      	movs	r2, r3
   16c78:	2100      	movs	r1, #0
   16c7a:	4b8e      	ldr	r3, [pc, #568]	; (16eb4 <rename_to_unique+0x284>)
   16c7c:	4798      	blx	r3
    char numbering[NUMBRING_MAX + 1] = {0};
   16c7e:	2314      	movs	r3, #20
   16c80:	18fb      	adds	r3, r7, r3
   16c82:	2200      	movs	r2, #0
   16c84:	601a      	str	r2, [r3, #0]
    char *p = NULL;
   16c86:	2300      	movs	r3, #0
   16c88:	66bb      	str	r3, [r7, #104]	; 0x68
    bool valid_ext = false;
   16c8a:	2371      	movs	r3, #113	; 0x71
   16c8c:	18fb      	adds	r3, r7, r3
   16c8e:	2200      	movs	r2, #0
   16c90:	701a      	strb	r2, [r3, #0]

    if (file_path_name == NULL) {
   16c92:	68bb      	ldr	r3, [r7, #8]
   16c94:	2b00      	cmp	r3, #0
   16c96:	d101      	bne.n	16c9c <rename_to_unique+0x6c>
        return false;
   16c98:	2300      	movs	r3, #0
   16c9a:	e106      	b.n	16eaa <rename_to_unique+0x27a>
    }

    if (!is_exist_file(fp, file_path_name)) {
   16c9c:	68ba      	ldr	r2, [r7, #8]
   16c9e:	68fb      	ldr	r3, [r7, #12]
   16ca0:	0011      	movs	r1, r2
   16ca2:	0018      	movs	r0, r3
   16ca4:	4b84      	ldr	r3, [pc, #528]	; (16eb8 <rename_to_unique+0x288>)
   16ca6:	4798      	blx	r3
   16ca8:	0003      	movs	r3, r0
   16caa:	001a      	movs	r2, r3
   16cac:	2301      	movs	r3, #1
   16cae:	4053      	eors	r3, r2
   16cb0:	b2db      	uxtb	r3, r3
   16cb2:	2b00      	cmp	r3, #0
   16cb4:	d001      	beq.n	16cba <rename_to_unique+0x8a>
        return true;
   16cb6:	2301      	movs	r3, #1
   16cb8:	e0f7      	b.n	16eaa <rename_to_unique+0x27a>
    } else if (strlen(file_path_name) > MAIN_MAX_FILE_NAME_LENGTH) {
   16cba:	68bb      	ldr	r3, [r7, #8]
   16cbc:	0018      	movs	r0, r3
   16cbe:	4b7f      	ldr	r3, [pc, #508]	; (16ebc <rename_to_unique+0x28c>)
   16cc0:	4798      	blx	r3
   16cc2:	0003      	movs	r3, r0
   16cc4:	2b40      	cmp	r3, #64	; 0x40
   16cc6:	d901      	bls.n	16ccc <rename_to_unique+0x9c>
        return false;
   16cc8:	2300      	movs	r3, #0
   16cca:	e0ee      	b.n	16eaa <rename_to_unique+0x27a>
    }

    p = strrchr(file_path_name, '.');
   16ccc:	68bb      	ldr	r3, [r7, #8]
   16cce:	212e      	movs	r1, #46	; 0x2e
   16cd0:	0018      	movs	r0, r3
   16cd2:	4b7b      	ldr	r3, [pc, #492]	; (16ec0 <rename_to_unique+0x290>)
   16cd4:	4798      	blx	r3
   16cd6:	0003      	movs	r3, r0
   16cd8:	66bb      	str	r3, [r7, #104]	; 0x68
    if (p != NULL) {
   16cda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   16cdc:	2b00      	cmp	r3, #0
   16cde:	d052      	beq.n	16d86 <rename_to_unique+0x156>
        ext_len = strlen(p);
   16ce0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   16ce2:	0018      	movs	r0, r3
   16ce4:	4b75      	ldr	r3, [pc, #468]	; (16ebc <rename_to_unique+0x28c>)
   16ce6:	4798      	blx	r3
   16ce8:	0002      	movs	r2, r0
   16cea:	236e      	movs	r3, #110	; 0x6e
   16cec:	18fb      	adds	r3, r7, r3
   16cee:	801a      	strh	r2, [r3, #0]
        if (ext_len < MAIN_MAX_FILE_EXT_LENGTH) {
   16cf0:	236e      	movs	r3, #110	; 0x6e
   16cf2:	18fb      	adds	r3, r7, r3
   16cf4:	881b      	ldrh	r3, [r3, #0]
   16cf6:	2b07      	cmp	r3, #7
   16cf8:	d837      	bhi.n	16d6a <rename_to_unique+0x13a>
            valid_ext = true;
   16cfa:	2371      	movs	r3, #113	; 0x71
   16cfc:	18fb      	adds	r3, r7, r3
   16cfe:	2201      	movs	r2, #1
   16d00:	701a      	strb	r2, [r3, #0]
            strcpy(ext, p);
   16d02:	6eba      	ldr	r2, [r7, #104]	; 0x68
   16d04:	2318      	movs	r3, #24
   16d06:	18fb      	adds	r3, r7, r3
   16d08:	0011      	movs	r1, r2
   16d0a:	0018      	movs	r0, r3
   16d0c:	4b6d      	ldr	r3, [pc, #436]	; (16ec4 <rename_to_unique+0x294>)
   16d0e:	4798      	blx	r3
            if (strlen(file_path_name) - ext_len > MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE) {
   16d10:	68bb      	ldr	r3, [r7, #8]
   16d12:	0018      	movs	r0, r3
   16d14:	4b69      	ldr	r3, [pc, #420]	; (16ebc <rename_to_unique+0x28c>)
   16d16:	4798      	blx	r3
   16d18:	0002      	movs	r2, r0
   16d1a:	236e      	movs	r3, #110	; 0x6e
   16d1c:	18fb      	adds	r3, r7, r3
   16d1e:	881b      	ldrh	r3, [r3, #0]
   16d20:	1ad3      	subs	r3, r2, r3
   16d22:	2b3c      	cmp	r3, #60	; 0x3c
   16d24:	d911      	bls.n	16d4a <rename_to_unique+0x11a>
                name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE - ext_len;
   16d26:	2374      	movs	r3, #116	; 0x74
   16d28:	18fb      	adds	r3, r7, r3
   16d2a:	226e      	movs	r2, #110	; 0x6e
   16d2c:	18ba      	adds	r2, r7, r2
   16d2e:	8812      	ldrh	r2, [r2, #0]
   16d30:	213c      	movs	r1, #60	; 0x3c
   16d32:	1a8a      	subs	r2, r1, r2
   16d34:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   16d36:	2374      	movs	r3, #116	; 0x74
   16d38:	18fb      	adds	r3, r7, r3
   16d3a:	881a      	ldrh	r2, [r3, #0]
   16d3c:	68b9      	ldr	r1, [r7, #8]
   16d3e:	2324      	movs	r3, #36	; 0x24
   16d40:	18fb      	adds	r3, r7, r3
   16d42:	0018      	movs	r0, r3
   16d44:	4b60      	ldr	r3, [pc, #384]	; (16ec8 <rename_to_unique+0x298>)
   16d46:	4798      	blx	r3
   16d48:	e02a      	b.n	16da0 <rename_to_unique+0x170>
            } else {
                name_len = (p - file_path_name);
   16d4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
   16d4c:	68bb      	ldr	r3, [r7, #8]
   16d4e:	1ad2      	subs	r2, r2, r3
   16d50:	2374      	movs	r3, #116	; 0x74
   16d52:	18fb      	adds	r3, r7, r3
   16d54:	801a      	strh	r2, [r3, #0]
                strncpy(name, file_path_name, name_len);
   16d56:	2374      	movs	r3, #116	; 0x74
   16d58:	18fb      	adds	r3, r7, r3
   16d5a:	881a      	ldrh	r2, [r3, #0]
   16d5c:	68b9      	ldr	r1, [r7, #8]
   16d5e:	2324      	movs	r3, #36	; 0x24
   16d60:	18fb      	adds	r3, r7, r3
   16d62:	0018      	movs	r0, r3
   16d64:	4b58      	ldr	r3, [pc, #352]	; (16ec8 <rename_to_unique+0x298>)
   16d66:	4798      	blx	r3
   16d68:	e01a      	b.n	16da0 <rename_to_unique+0x170>
            }
        } else {
            name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   16d6a:	2374      	movs	r3, #116	; 0x74
   16d6c:	18fb      	adds	r3, r7, r3
   16d6e:	223c      	movs	r2, #60	; 0x3c
   16d70:	801a      	strh	r2, [r3, #0]
            strncpy(name, file_path_name, name_len);
   16d72:	2374      	movs	r3, #116	; 0x74
   16d74:	18fb      	adds	r3, r7, r3
   16d76:	881a      	ldrh	r2, [r3, #0]
   16d78:	68b9      	ldr	r1, [r7, #8]
   16d7a:	2324      	movs	r3, #36	; 0x24
   16d7c:	18fb      	adds	r3, r7, r3
   16d7e:	0018      	movs	r0, r3
   16d80:	4b51      	ldr	r3, [pc, #324]	; (16ec8 <rename_to_unique+0x298>)
   16d82:	4798      	blx	r3
   16d84:	e00c      	b.n	16da0 <rename_to_unique+0x170>
        }
    } else {
        name_len = MAIN_MAX_FILE_NAME_LENGTH - ADDITION_SIZE;
   16d86:	2374      	movs	r3, #116	; 0x74
   16d88:	18fb      	adds	r3, r7, r3
   16d8a:	223c      	movs	r2, #60	; 0x3c
   16d8c:	801a      	strh	r2, [r3, #0]
        strncpy(name, file_path_name, name_len);
   16d8e:	2374      	movs	r3, #116	; 0x74
   16d90:	18fb      	adds	r3, r7, r3
   16d92:	881a      	ldrh	r2, [r3, #0]
   16d94:	68b9      	ldr	r1, [r7, #8]
   16d96:	2324      	movs	r3, #36	; 0x24
   16d98:	18fb      	adds	r3, r7, r3
   16d9a:	0018      	movs	r0, r3
   16d9c:	4b4a      	ldr	r3, [pc, #296]	; (16ec8 <rename_to_unique+0x298>)
   16d9e:	4798      	blx	r3
    }

    name[name_len++] = '-';
   16da0:	2374      	movs	r3, #116	; 0x74
   16da2:	18fb      	adds	r3, r7, r3
   16da4:	881b      	ldrh	r3, [r3, #0]
   16da6:	2274      	movs	r2, #116	; 0x74
   16da8:	18ba      	adds	r2, r7, r2
   16daa:	1c59      	adds	r1, r3, #1
   16dac:	8011      	strh	r1, [r2, #0]
   16dae:	001a      	movs	r2, r3
   16db0:	2324      	movs	r3, #36	; 0x24
   16db2:	18fb      	adds	r3, r7, r3
   16db4:	212d      	movs	r1, #45	; 0x2d
   16db6:	5499      	strb	r1, [r3, r2]

    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   16db8:	2376      	movs	r3, #118	; 0x76
   16dba:	18fb      	adds	r3, r7, r3
   16dbc:	2200      	movs	r2, #0
   16dbe:	801a      	strh	r2, [r3, #0]
   16dc0:	2372      	movs	r3, #114	; 0x72
   16dc2:	18fb      	adds	r3, r7, r3
   16dc4:	2201      	movs	r2, #1
   16dc6:	801a      	strh	r2, [r3, #0]
   16dc8:	e010      	b.n	16dec <rename_to_unique+0x1bc>
        count *= 10;
   16dca:	2372      	movs	r3, #114	; 0x72
   16dcc:	18fa      	adds	r2, r7, r3
   16dce:	2372      	movs	r3, #114	; 0x72
   16dd0:	18fb      	adds	r3, r7, r3
   16dd2:	881b      	ldrh	r3, [r3, #0]
   16dd4:	1c19      	adds	r1, r3, #0
   16dd6:	0089      	lsls	r1, r1, #2
   16dd8:	18cb      	adds	r3, r1, r3
   16dda:	18db      	adds	r3, r3, r3
   16ddc:	8013      	strh	r3, [r2, #0]
    for (i = 0, count = 1; i < NUMBRING_MAX; i++) {
   16dde:	2376      	movs	r3, #118	; 0x76
   16de0:	18fb      	adds	r3, r7, r3
   16de2:	881a      	ldrh	r2, [r3, #0]
   16de4:	2376      	movs	r3, #118	; 0x76
   16de6:	18fb      	adds	r3, r7, r3
   16de8:	3201      	adds	r2, #1
   16dea:	801a      	strh	r2, [r3, #0]
   16dec:	2376      	movs	r3, #118	; 0x76
   16dee:	18fb      	adds	r3, r7, r3
   16df0:	881b      	ldrh	r3, [r3, #0]
   16df2:	2b02      	cmp	r3, #2
   16df4:	d9e9      	bls.n	16dca <rename_to_unique+0x19a>
    }
    for (i = 1; i < count; i++) {
   16df6:	2376      	movs	r3, #118	; 0x76
   16df8:	18fb      	adds	r3, r7, r3
   16dfa:	2201      	movs	r2, #1
   16dfc:	801a      	strh	r2, [r3, #0]
   16dfe:	e04b      	b.n	16e98 <rename_to_unique+0x268>
        sprintf(numbering, MAIN_ZERO_FMT(NUMBRING_MAX), i);
   16e00:	2376      	movs	r3, #118	; 0x76
   16e02:	18fb      	adds	r3, r7, r3
   16e04:	881a      	ldrh	r2, [r3, #0]
   16e06:	4931      	ldr	r1, [pc, #196]	; (16ecc <rename_to_unique+0x29c>)
   16e08:	2314      	movs	r3, #20
   16e0a:	18fb      	adds	r3, r7, r3
   16e0c:	0018      	movs	r0, r3
   16e0e:	4b30      	ldr	r3, [pc, #192]	; (16ed0 <rename_to_unique+0x2a0>)
   16e10:	4798      	blx	r3
        strncpy(&name[name_len], numbering, NUMBRING_MAX);
   16e12:	2374      	movs	r3, #116	; 0x74
   16e14:	18fb      	adds	r3, r7, r3
   16e16:	881b      	ldrh	r3, [r3, #0]
   16e18:	2224      	movs	r2, #36	; 0x24
   16e1a:	18ba      	adds	r2, r7, r2
   16e1c:	18d3      	adds	r3, r2, r3
   16e1e:	2214      	movs	r2, #20
   16e20:	18b9      	adds	r1, r7, r2
   16e22:	2203      	movs	r2, #3
   16e24:	0018      	movs	r0, r3
   16e26:	4b28      	ldr	r3, [pc, #160]	; (16ec8 <rename_to_unique+0x298>)
   16e28:	4798      	blx	r3
        if (valid_ext) {
   16e2a:	2371      	movs	r3, #113	; 0x71
   16e2c:	18fb      	adds	r3, r7, r3
   16e2e:	781b      	ldrb	r3, [r3, #0]
   16e30:	2b00      	cmp	r3, #0
   16e32:	d00c      	beq.n	16e4e <rename_to_unique+0x21e>
            strcpy(&name[name_len + NUMBRING_MAX], ext);
   16e34:	2374      	movs	r3, #116	; 0x74
   16e36:	18fb      	adds	r3, r7, r3
   16e38:	881b      	ldrh	r3, [r3, #0]
   16e3a:	3303      	adds	r3, #3
   16e3c:	2224      	movs	r2, #36	; 0x24
   16e3e:	18ba      	adds	r2, r7, r2
   16e40:	18d3      	adds	r3, r2, r3
   16e42:	2218      	movs	r2, #24
   16e44:	18ba      	adds	r2, r7, r2
   16e46:	0011      	movs	r1, r2
   16e48:	0018      	movs	r0, r3
   16e4a:	4b1e      	ldr	r3, [pc, #120]	; (16ec4 <rename_to_unique+0x294>)
   16e4c:	4798      	blx	r3
        }

        if (!is_exist_file(fp, name)) {
   16e4e:	2324      	movs	r3, #36	; 0x24
   16e50:	18fa      	adds	r2, r7, r3
   16e52:	68fb      	ldr	r3, [r7, #12]
   16e54:	0011      	movs	r1, r2
   16e56:	0018      	movs	r0, r3
   16e58:	4b17      	ldr	r3, [pc, #92]	; (16eb8 <rename_to_unique+0x288>)
   16e5a:	4798      	blx	r3
   16e5c:	0003      	movs	r3, r0
   16e5e:	001a      	movs	r2, r3
   16e60:	2301      	movs	r3, #1
   16e62:	4053      	eors	r3, r2
   16e64:	b2db      	uxtb	r3, r3
   16e66:	2b00      	cmp	r3, #0
   16e68:	d00f      	beq.n	16e8a <rename_to_unique+0x25a>
            memset(file_path_name, 0, max_len);
   16e6a:	1dfb      	adds	r3, r7, #7
   16e6c:	781a      	ldrb	r2, [r3, #0]
   16e6e:	68bb      	ldr	r3, [r7, #8]
   16e70:	2100      	movs	r1, #0
   16e72:	0018      	movs	r0, r3
   16e74:	4b0f      	ldr	r3, [pc, #60]	; (16eb4 <rename_to_unique+0x284>)
   16e76:	4798      	blx	r3
            strcpy(file_path_name, name);
   16e78:	2324      	movs	r3, #36	; 0x24
   16e7a:	18fa      	adds	r2, r7, r3
   16e7c:	68bb      	ldr	r3, [r7, #8]
   16e7e:	0011      	movs	r1, r2
   16e80:	0018      	movs	r0, r3
   16e82:	4b10      	ldr	r3, [pc, #64]	; (16ec4 <rename_to_unique+0x294>)
   16e84:	4798      	blx	r3
            return true;
   16e86:	2301      	movs	r3, #1
   16e88:	e00f      	b.n	16eaa <rename_to_unique+0x27a>
    for (i = 1; i < count; i++) {
   16e8a:	2376      	movs	r3, #118	; 0x76
   16e8c:	18fb      	adds	r3, r7, r3
   16e8e:	881a      	ldrh	r2, [r3, #0]
   16e90:	2376      	movs	r3, #118	; 0x76
   16e92:	18fb      	adds	r3, r7, r3
   16e94:	3201      	adds	r2, #1
   16e96:	801a      	strh	r2, [r3, #0]
   16e98:	2376      	movs	r3, #118	; 0x76
   16e9a:	18fa      	adds	r2, r7, r3
   16e9c:	2372      	movs	r3, #114	; 0x72
   16e9e:	18fb      	adds	r3, r7, r3
   16ea0:	8812      	ldrh	r2, [r2, #0]
   16ea2:	881b      	ldrh	r3, [r3, #0]
   16ea4:	429a      	cmp	r2, r3
   16ea6:	d3ab      	bcc.n	16e00 <rename_to_unique+0x1d0>
        }
    }
    return false;
   16ea8:	2300      	movs	r3, #0
}
   16eaa:	0018      	movs	r0, r3
   16eac:	46bd      	mov	sp, r7
   16eae:	b01e      	add	sp, #120	; 0x78
   16eb0:	bd80      	pop	{r7, pc}
   16eb2:	46c0      	nop			; (mov r8, r8)
   16eb4:	0003582f 	.word	0x0003582f
   16eb8:	00016bd9 	.word	0x00016bd9
   16ebc:	00035be7 	.word	0x00035be7
   16ec0:	00035c41 	.word	0x00035c41
   16ec4:	00035b9b 	.word	0x00035b9b
   16ec8:	00035c17 	.word	0x00035c17
   16ecc:	000374c0 	.word	0x000374c0
   16ed0:	00035aed 	.word	0x00035aed

00016ed4 <start_download>:

/**
 * \brief Start file download via HTTP connection.
 */
static void start_download(void)
{
   16ed4:	b590      	push	{r4, r7, lr}
   16ed6:	b083      	sub	sp, #12
   16ed8:	af02      	add	r7, sp, #8
    if (!is_state_set(STORAGE_READY)) {
   16eda:	2001      	movs	r0, #1
   16edc:	4b22      	ldr	r3, [pc, #136]	; (16f68 <start_download+0x94>)
   16ede:	4798      	blx	r3
   16ee0:	0003      	movs	r3, r0
   16ee2:	001a      	movs	r2, r3
   16ee4:	2301      	movs	r3, #1
   16ee6:	4053      	eors	r3, r2
   16ee8:	b2db      	uxtb	r3, r3
   16eea:	2b00      	cmp	r3, #0
   16eec:	d005      	beq.n	16efa <start_download+0x26>
        LogMessage(LOG_DEBUG_LVL, "start_download: MMC storage not ready.\r\n");
   16eee:	4b1f      	ldr	r3, [pc, #124]	; (16f6c <start_download+0x98>)
   16ef0:	0019      	movs	r1, r3
   16ef2:	2001      	movs	r0, #1
   16ef4:	4b1e      	ldr	r3, [pc, #120]	; (16f70 <start_download+0x9c>)
   16ef6:	4798      	blx	r3
        return;
   16ef8:	e032      	b.n	16f60 <start_download+0x8c>
    }

    if (!is_state_set(WIFI_CONNECTED)) {
   16efa:	2002      	movs	r0, #2
   16efc:	4b1a      	ldr	r3, [pc, #104]	; (16f68 <start_download+0x94>)
   16efe:	4798      	blx	r3
   16f00:	0003      	movs	r3, r0
   16f02:	001a      	movs	r2, r3
   16f04:	2301      	movs	r3, #1
   16f06:	4053      	eors	r3, r2
   16f08:	b2db      	uxtb	r3, r3
   16f0a:	2b00      	cmp	r3, #0
   16f0c:	d005      	beq.n	16f1a <start_download+0x46>
        LogMessage(LOG_DEBUG_LVL, "start_download: Wi-Fi is not connected.\r\n");
   16f0e:	4b19      	ldr	r3, [pc, #100]	; (16f74 <start_download+0xa0>)
   16f10:	0019      	movs	r1, r3
   16f12:	2001      	movs	r0, #1
   16f14:	4b16      	ldr	r3, [pc, #88]	; (16f70 <start_download+0x9c>)
   16f16:	4798      	blx	r3
        return;
   16f18:	e022      	b.n	16f60 <start_download+0x8c>
    }

    if (is_state_set(GET_REQUESTED)) {
   16f1a:	2004      	movs	r0, #4
   16f1c:	4b12      	ldr	r3, [pc, #72]	; (16f68 <start_download+0x94>)
   16f1e:	4798      	blx	r3
   16f20:	1e03      	subs	r3, r0, #0
   16f22:	d005      	beq.n	16f30 <start_download+0x5c>
        LogMessage(LOG_DEBUG_LVL, "start_download: request is sent already.\r\n");
   16f24:	4b14      	ldr	r3, [pc, #80]	; (16f78 <start_download+0xa4>)
   16f26:	0019      	movs	r1, r3
   16f28:	2001      	movs	r0, #1
   16f2a:	4b11      	ldr	r3, [pc, #68]	; (16f70 <start_download+0x9c>)
   16f2c:	4798      	blx	r3
        return;
   16f2e:	e017      	b.n	16f60 <start_download+0x8c>
    }

    if (is_state_set(DOWNLOADING)) {
   16f30:	2008      	movs	r0, #8
   16f32:	4b0d      	ldr	r3, [pc, #52]	; (16f68 <start_download+0x94>)
   16f34:	4798      	blx	r3
   16f36:	1e03      	subs	r3, r0, #0
   16f38:	d005      	beq.n	16f46 <start_download+0x72>
        LogMessage(LOG_DEBUG_LVL, "start_download: running download already.\r\n");
   16f3a:	4b10      	ldr	r3, [pc, #64]	; (16f7c <start_download+0xa8>)
   16f3c:	0019      	movs	r1, r3
   16f3e:	2001      	movs	r0, #1
   16f40:	4b0b      	ldr	r3, [pc, #44]	; (16f70 <start_download+0x9c>)
   16f42:	4798      	blx	r3
        return;
   16f44:	e00c      	b.n	16f60 <start_download+0x8c>
    }

    /* Send the HTTP request. */
    LogMessage(LOG_DEBUG_LVL, "start_download: sending HTTP request...\r\n");
   16f46:	4b0e      	ldr	r3, [pc, #56]	; (16f80 <start_download+0xac>)
   16f48:	0019      	movs	r1, r3
   16f4a:	2001      	movs	r0, #1
   16f4c:	4b08      	ldr	r3, [pc, #32]	; (16f70 <start_download+0x9c>)
   16f4e:	4798      	blx	r3
    http_client_send_request(&http_client_module_inst, MAIN_HTTP_FILE_URL, HTTP_METHOD_GET, NULL, NULL);
   16f50:	490c      	ldr	r1, [pc, #48]	; (16f84 <start_download+0xb0>)
   16f52:	480d      	ldr	r0, [pc, #52]	; (16f88 <start_download+0xb4>)
   16f54:	2300      	movs	r3, #0
   16f56:	9300      	str	r3, [sp, #0]
   16f58:	2300      	movs	r3, #0
   16f5a:	2201      	movs	r2, #1
   16f5c:	4c0b      	ldr	r4, [pc, #44]	; (16f8c <start_download+0xb8>)
   16f5e:	47a0      	blx	r4
}
   16f60:	46bd      	mov	sp, r7
   16f62:	b001      	add	sp, #4
   16f64:	bd90      	pop	{r4, r7, pc}
   16f66:	46c0      	nop			; (mov r8, r8)
   16f68:	00016bad 	.word	0x00016bad
   16f6c:	000374c8 	.word	0x000374c8
   16f70:	0001ecd1 	.word	0x0001ecd1
   16f74:	000374f4 	.word	0x000374f4
   16f78:	00037520 	.word	0x00037520
   16f7c:	0003754c 	.word	0x0003754c
   16f80:	00037578 	.word	0x00037578
   16f84:	000375a4 	.word	0x000375a4
   16f88:	20004958 	.word	0x20004958
   16f8c:	00031dd1 	.word	0x00031dd1

00016f90 <store_file_packet>:
 * \brief Store received packet to file.
 * \param[in] data Packet data.
 * \param[in] length Packet data length.
 */
static void store_file_packet(char *data, uint32_t length)
{
   16f90:	b5b0      	push	{r4, r5, r7, lr}
   16f92:	b086      	sub	sp, #24
   16f94:	af00      	add	r7, sp, #0
   16f96:	6078      	str	r0, [r7, #4]
   16f98:	6039      	str	r1, [r7, #0]
    FRESULT ret;
    if ((data == NULL) || (length < 1)) {
   16f9a:	687b      	ldr	r3, [r7, #4]
   16f9c:	2b00      	cmp	r3, #0
   16f9e:	d002      	beq.n	16fa6 <store_file_packet+0x16>
   16fa0:	683b      	ldr	r3, [r7, #0]
   16fa2:	2b00      	cmp	r3, #0
   16fa4:	d105      	bne.n	16fb2 <store_file_packet+0x22>
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: empty data.\r\n");
   16fa6:	4b58      	ldr	r3, [pc, #352]	; (17108 <store_file_packet+0x178>)
   16fa8:	0019      	movs	r1, r3
   16faa:	2001      	movs	r0, #1
   16fac:	4b57      	ldr	r3, [pc, #348]	; (1710c <store_file_packet+0x17c>)
   16fae:	4798      	blx	r3
        return;
   16fb0:	e0a6      	b.n	17100 <store_file_packet+0x170>
    }

    if (!is_state_set(DOWNLOADING)) {
   16fb2:	2008      	movs	r0, #8
   16fb4:	4b56      	ldr	r3, [pc, #344]	; (17110 <store_file_packet+0x180>)
   16fb6:	4798      	blx	r3
   16fb8:	0003      	movs	r3, r0
   16fba:	001a      	movs	r2, r3
   16fbc:	2301      	movs	r3, #1
   16fbe:	4053      	eors	r3, r2
   16fc0:	b2db      	uxtb	r3, r3
   16fc2:	2b00      	cmp	r3, #0
   16fc4:	d055      	beq.n	17072 <store_file_packet+0xe2>
        char *cp = NULL;
   16fc6:	2300      	movs	r3, #0
   16fc8:	617b      	str	r3, [r7, #20]
        save_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   16fca:	4b52      	ldr	r3, [pc, #328]	; (17114 <store_file_packet+0x184>)
   16fcc:	2230      	movs	r2, #48	; 0x30
   16fce:	701a      	strb	r2, [r3, #0]
        save_file_name[1] = ':';
   16fd0:	4b50      	ldr	r3, [pc, #320]	; (17114 <store_file_packet+0x184>)
   16fd2:	223a      	movs	r2, #58	; 0x3a
   16fd4:	705a      	strb	r2, [r3, #1]
        cp = (char *)(MAIN_HTTP_FILE_URL + strlen(MAIN_HTTP_FILE_URL));
   16fd6:	4b50      	ldr	r3, [pc, #320]	; (17118 <store_file_packet+0x188>)
   16fd8:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   16fda:	e002      	b.n	16fe2 <store_file_packet+0x52>
            cp--;
   16fdc:	697b      	ldr	r3, [r7, #20]
   16fde:	3b01      	subs	r3, #1
   16fe0:	617b      	str	r3, [r7, #20]
        while (*cp != '/') {
   16fe2:	697b      	ldr	r3, [r7, #20]
   16fe4:	781b      	ldrb	r3, [r3, #0]
   16fe6:	2b2f      	cmp	r3, #47	; 0x2f
   16fe8:	d1f8      	bne.n	16fdc <store_file_packet+0x4c>
        }
        if (strlen(cp) > 1) {
   16fea:	697b      	ldr	r3, [r7, #20]
   16fec:	0018      	movs	r0, r3
   16fee:	4b4b      	ldr	r3, [pc, #300]	; (1711c <store_file_packet+0x18c>)
   16ff0:	4798      	blx	r3
   16ff2:	0003      	movs	r3, r0
   16ff4:	2b01      	cmp	r3, #1
   16ff6:	d924      	bls.n	17042 <store_file_packet+0xb2>
            cp++;
   16ff8:	697b      	ldr	r3, [r7, #20]
   16ffa:	3301      	adds	r3, #1
   16ffc:	617b      	str	r3, [r7, #20]
            strcpy(&save_file_name[2], cp);
   16ffe:	697a      	ldr	r2, [r7, #20]
   17000:	4b47      	ldr	r3, [pc, #284]	; (17120 <store_file_packet+0x190>)
   17002:	0011      	movs	r1, r2
   17004:	0018      	movs	r0, r3
   17006:	4b47      	ldr	r3, [pc, #284]	; (17124 <store_file_packet+0x194>)
   17008:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
            add_state(CANCELED);
            return;
        }

        rename_to_unique(&file_object, save_file_name, MAIN_MAX_FILE_NAME_LENGTH);
   1700a:	4942      	ldr	r1, [pc, #264]	; (17114 <store_file_packet+0x184>)
   1700c:	4b46      	ldr	r3, [pc, #280]	; (17128 <store_file_packet+0x198>)
   1700e:	2240      	movs	r2, #64	; 0x40
   17010:	0018      	movs	r0, r3
   17012:	4b46      	ldr	r3, [pc, #280]	; (1712c <store_file_packet+0x19c>)
   17014:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: creating file [%s]\r\n", save_file_name);
   17016:	4a3f      	ldr	r2, [pc, #252]	; (17114 <store_file_packet+0x184>)
   17018:	4b45      	ldr	r3, [pc, #276]	; (17130 <store_file_packet+0x1a0>)
   1701a:	0019      	movs	r1, r3
   1701c:	2001      	movs	r0, #1
   1701e:	4b3b      	ldr	r3, [pc, #236]	; (1710c <store_file_packet+0x17c>)
   17020:	4798      	blx	r3
        ret = f_open(&file_object, (char const *)save_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   17022:	2313      	movs	r3, #19
   17024:	18fc      	adds	r4, r7, r3
   17026:	493b      	ldr	r1, [pc, #236]	; (17114 <store_file_packet+0x184>)
   17028:	4b3f      	ldr	r3, [pc, #252]	; (17128 <store_file_packet+0x198>)
   1702a:	220a      	movs	r2, #10
   1702c:	0018      	movs	r0, r3
   1702e:	4b41      	ldr	r3, [pc, #260]	; (17134 <store_file_packet+0x1a4>)
   17030:	4798      	blx	r3
   17032:	0003      	movs	r3, r0
   17034:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   17036:	2313      	movs	r3, #19
   17038:	18fb      	adds	r3, r7, r3
   1703a:	781b      	ldrb	r3, [r3, #0]
   1703c:	2b00      	cmp	r3, #0
   1703e:	d012      	beq.n	17066 <store_file_packet+0xd6>
   17040:	e008      	b.n	17054 <store_file_packet+0xc4>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file name is invalid. Download canceled.\r\n");
   17042:	4b3d      	ldr	r3, [pc, #244]	; (17138 <store_file_packet+0x1a8>)
   17044:	0019      	movs	r1, r3
   17046:	2001      	movs	r0, #1
   17048:	4b30      	ldr	r3, [pc, #192]	; (1710c <store_file_packet+0x17c>)
   1704a:	4798      	blx	r3
            add_state(CANCELED);
   1704c:	2020      	movs	r0, #32
   1704e:	4b3b      	ldr	r3, [pc, #236]	; (1713c <store_file_packet+0x1ac>)
   17050:	4798      	blx	r3
            return;
   17052:	e055      	b.n	17100 <store_file_packet+0x170>
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file creation error! ret:%d\r\n", ret);
   17054:	2313      	movs	r3, #19
   17056:	18fb      	adds	r3, r7, r3
   17058:	781a      	ldrb	r2, [r3, #0]
   1705a:	4b39      	ldr	r3, [pc, #228]	; (17140 <store_file_packet+0x1b0>)
   1705c:	0019      	movs	r1, r3
   1705e:	2001      	movs	r0, #1
   17060:	4b2a      	ldr	r3, [pc, #168]	; (1710c <store_file_packet+0x17c>)
   17062:	4798      	blx	r3
            return;
   17064:	e04c      	b.n	17100 <store_file_packet+0x170>
        }

        received_file_size = 0;
   17066:	4b37      	ldr	r3, [pc, #220]	; (17144 <store_file_packet+0x1b4>)
   17068:	2200      	movs	r2, #0
   1706a:	601a      	str	r2, [r3, #0]
        add_state(DOWNLOADING);
   1706c:	2008      	movs	r0, #8
   1706e:	4b33      	ldr	r3, [pc, #204]	; (1713c <store_file_packet+0x1ac>)
   17070:	4798      	blx	r3
    }

    if (data != NULL) {
   17072:	687b      	ldr	r3, [r7, #4]
   17074:	2b00      	cmp	r3, #0
   17076:	d043      	beq.n	17100 <store_file_packet+0x170>
        UINT wsize = 0;
   17078:	2300      	movs	r3, #0
   1707a:	60fb      	str	r3, [r7, #12]
        ret = f_write(&file_object, (const void *)data, length, &wsize);
   1707c:	2313      	movs	r3, #19
   1707e:	18fc      	adds	r4, r7, r3
   17080:	230c      	movs	r3, #12
   17082:	18fb      	adds	r3, r7, r3
   17084:	683a      	ldr	r2, [r7, #0]
   17086:	6879      	ldr	r1, [r7, #4]
   17088:	4827      	ldr	r0, [pc, #156]	; (17128 <store_file_packet+0x198>)
   1708a:	4d2f      	ldr	r5, [pc, #188]	; (17148 <store_file_packet+0x1b8>)
   1708c:	47a8      	blx	r5
   1708e:	0003      	movs	r3, r0
   17090:	7023      	strb	r3, [r4, #0]
        if (ret != FR_OK) {
   17092:	2313      	movs	r3, #19
   17094:	18fb      	adds	r3, r7, r3
   17096:	781b      	ldrb	r3, [r3, #0]
   17098:	2b00      	cmp	r3, #0
   1709a:	d00c      	beq.n	170b6 <store_file_packet+0x126>
            f_close(&file_object);
   1709c:	4b22      	ldr	r3, [pc, #136]	; (17128 <store_file_packet+0x198>)
   1709e:	0018      	movs	r0, r3
   170a0:	4b2a      	ldr	r3, [pc, #168]	; (1714c <store_file_packet+0x1bc>)
   170a2:	4798      	blx	r3
            add_state(CANCELED);
   170a4:	2020      	movs	r0, #32
   170a6:	4b25      	ldr	r3, [pc, #148]	; (1713c <store_file_packet+0x1ac>)
   170a8:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file write error, download canceled.\r\n");
   170aa:	4b29      	ldr	r3, [pc, #164]	; (17150 <store_file_packet+0x1c0>)
   170ac:	0019      	movs	r1, r3
   170ae:	2001      	movs	r0, #1
   170b0:	4b16      	ldr	r3, [pc, #88]	; (1710c <store_file_packet+0x17c>)
   170b2:	4798      	blx	r3
            return;
   170b4:	e024      	b.n	17100 <store_file_packet+0x170>
        }

        received_file_size += wsize;
   170b6:	4b23      	ldr	r3, [pc, #140]	; (17144 <store_file_packet+0x1b4>)
   170b8:	681a      	ldr	r2, [r3, #0]
   170ba:	68fb      	ldr	r3, [r7, #12]
   170bc:	18d2      	adds	r2, r2, r3
   170be:	4b21      	ldr	r3, [pc, #132]	; (17144 <store_file_packet+0x1b4>)
   170c0:	601a      	str	r2, [r3, #0]
        LogMessage(LOG_DEBUG_LVL, "store_file_packet: received[%lu], file size[%lu]\r\n", (unsigned long)received_file_size, (unsigned long)http_file_size);
   170c2:	4b20      	ldr	r3, [pc, #128]	; (17144 <store_file_packet+0x1b4>)
   170c4:	681a      	ldr	r2, [r3, #0]
   170c6:	4b23      	ldr	r3, [pc, #140]	; (17154 <store_file_packet+0x1c4>)
   170c8:	681b      	ldr	r3, [r3, #0]
   170ca:	4923      	ldr	r1, [pc, #140]	; (17158 <store_file_packet+0x1c8>)
   170cc:	2001      	movs	r0, #1
   170ce:	4c0f      	ldr	r4, [pc, #60]	; (1710c <store_file_packet+0x17c>)
   170d0:	47a0      	blx	r4
        if (received_file_size >= http_file_size) {
   170d2:	4b1c      	ldr	r3, [pc, #112]	; (17144 <store_file_packet+0x1b4>)
   170d4:	681a      	ldr	r2, [r3, #0]
   170d6:	4b1f      	ldr	r3, [pc, #124]	; (17154 <store_file_packet+0x1c4>)
   170d8:	681b      	ldr	r3, [r3, #0]
   170da:	429a      	cmp	r2, r3
   170dc:	d310      	bcc.n	17100 <store_file_packet+0x170>
            f_close(&file_object);
   170de:	4b12      	ldr	r3, [pc, #72]	; (17128 <store_file_packet+0x198>)
   170e0:	0018      	movs	r0, r3
   170e2:	4b1a      	ldr	r3, [pc, #104]	; (1714c <store_file_packet+0x1bc>)
   170e4:	4798      	blx	r3
            LogMessage(LOG_DEBUG_LVL, "store_file_packet: file downloaded successfully.\r\n");
   170e6:	4b1d      	ldr	r3, [pc, #116]	; (1715c <store_file_packet+0x1cc>)
   170e8:	0019      	movs	r1, r3
   170ea:	2001      	movs	r0, #1
   170ec:	4b07      	ldr	r3, [pc, #28]	; (1710c <store_file_packet+0x17c>)
   170ee:	4798      	blx	r3
            port_pin_set_output_level(LED_0_PIN, false);
   170f0:	2100      	movs	r1, #0
   170f2:	2017      	movs	r0, #23
   170f4:	4b1a      	ldr	r3, [pc, #104]	; (17160 <store_file_packet+0x1d0>)
   170f6:	4798      	blx	r3
            add_state(COMPLETED);
   170f8:	2010      	movs	r0, #16
   170fa:	4b10      	ldr	r3, [pc, #64]	; (1713c <store_file_packet+0x1ac>)
   170fc:	4798      	blx	r3
            return;
   170fe:	46c0      	nop			; (mov r8, r8)
        }
    }
}
   17100:	46bd      	mov	sp, r7
   17102:	b006      	add	sp, #24
   17104:	bdb0      	pop	{r4, r5, r7, pc}
   17106:	46c0      	nop			; (mov r8, r8)
   17108:	000375d8 	.word	0x000375d8
   1710c:	0001ecd1 	.word	0x0001ecd1
   17110:	00016bad 	.word	0x00016bad
   17114:	200000b4 	.word	0x200000b4
   17118:	000375d4 	.word	0x000375d4
   1711c:	00035be7 	.word	0x00035be7
   17120:	200000b6 	.word	0x200000b6
   17124:	00035b9b 	.word	0x00035b9b
   17128:	2000086c 	.word	0x2000086c
   1712c:	00016c31 	.word	0x00016c31
   17130:	0003763c 	.word	0x0003763c
   17134:	0002e77d 	.word	0x0002e77d
   17138:	000375fc 	.word	0x000375fc
   1713c:	00016b85 	.word	0x00016b85
   17140:	00037664 	.word	0x00037664
   17144:	20000894 	.word	0x20000894
   17148:	0002ecad 	.word	0x0002ecad
   1714c:	0002f17d 	.word	0x0002f17d
   17150:	00037698 	.word	0x00037698
   17154:	20000890 	.word	0x20000890
   17158:	000376d4 	.word	0x000376d4
   1715c:	00037708 	.word	0x00037708
   17160:	00016ae9 	.word	0x00016ae9

00017164 <http_client_callback>:
 * \param[in]  module_inst     Module instance of HTTP client module.
 * \param[in]  type            Type of event.
 * \param[in]  data            Data structure of the event. \refer http_client_data
 */
static void http_client_callback(struct http_client_module *module_inst, int type, union http_client_data *data)
{
   17164:	b590      	push	{r4, r7, lr}
   17166:	b085      	sub	sp, #20
   17168:	af00      	add	r7, sp, #0
   1716a:	60f8      	str	r0, [r7, #12]
   1716c:	60b9      	str	r1, [r7, #8]
   1716e:	607a      	str	r2, [r7, #4]
    switch (type) {
   17170:	68bb      	ldr	r3, [r7, #8]
   17172:	2b04      	cmp	r3, #4
   17174:	d900      	bls.n	17178 <http_client_callback+0x14>
   17176:	e077      	b.n	17268 <http_client_callback+0x104>
   17178:	68bb      	ldr	r3, [r7, #8]
   1717a:	009a      	lsls	r2, r3, #2
   1717c:	4b3c      	ldr	r3, [pc, #240]	; (17270 <http_client_callback+0x10c>)
   1717e:	18d3      	adds	r3, r2, r3
   17180:	681b      	ldr	r3, [r3, #0]
   17182:	469f      	mov	pc, r3
        case HTTP_CLIENT_CALLBACK_SOCK_CONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: HTTP client socket connected.\r\n");
   17184:	4b3b      	ldr	r3, [pc, #236]	; (17274 <http_client_callback+0x110>)
   17186:	0019      	movs	r1, r3
   17188:	2001      	movs	r0, #1
   1718a:	4b3b      	ldr	r3, [pc, #236]	; (17278 <http_client_callback+0x114>)
   1718c:	4798      	blx	r3
            break;
   1718e:	e06b      	b.n	17268 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_REQUESTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: request completed.\r\n");
   17190:	4b3a      	ldr	r3, [pc, #232]	; (1727c <http_client_callback+0x118>)
   17192:	0019      	movs	r1, r3
   17194:	2001      	movs	r0, #1
   17196:	4b38      	ldr	r3, [pc, #224]	; (17278 <http_client_callback+0x114>)
   17198:	4798      	blx	r3
            add_state(GET_REQUESTED);
   1719a:	2004      	movs	r0, #4
   1719c:	4b38      	ldr	r3, [pc, #224]	; (17280 <http_client_callback+0x11c>)
   1719e:	4798      	blx	r3
            break;
   171a0:	e062      	b.n	17268 <http_client_callback+0x104>

        case HTTP_CLIENT_CALLBACK_RECV_RESPONSE:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: received response %u data size %u\r\n", (unsigned int)data->recv_response.response_code, (unsigned int)data->recv_response.content_length);
   171a2:	687b      	ldr	r3, [r7, #4]
   171a4:	881b      	ldrh	r3, [r3, #0]
   171a6:	001a      	movs	r2, r3
   171a8:	687b      	ldr	r3, [r7, #4]
   171aa:	685b      	ldr	r3, [r3, #4]
   171ac:	4935      	ldr	r1, [pc, #212]	; (17284 <http_client_callback+0x120>)
   171ae:	2001      	movs	r0, #1
   171b0:	4c31      	ldr	r4, [pc, #196]	; (17278 <http_client_callback+0x114>)
   171b2:	47a0      	blx	r4
            if ((unsigned int)data->recv_response.response_code == 200) {
   171b4:	687b      	ldr	r3, [r7, #4]
   171b6:	881b      	ldrh	r3, [r3, #0]
   171b8:	2bc8      	cmp	r3, #200	; 0xc8
   171ba:	d10d      	bne.n	171d8 <http_client_callback+0x74>
                http_file_size = data->recv_response.content_length;
   171bc:	687b      	ldr	r3, [r7, #4]
   171be:	685a      	ldr	r2, [r3, #4]
   171c0:	4b31      	ldr	r3, [pc, #196]	; (17288 <http_client_callback+0x124>)
   171c2:	601a      	str	r2, [r3, #0]
                received_file_size = 0;
   171c4:	4b31      	ldr	r3, [pc, #196]	; (1728c <http_client_callback+0x128>)
   171c6:	2200      	movs	r2, #0
   171c8:	601a      	str	r2, [r3, #0]
            } else {
                add_state(CANCELED);
                return;
            }
            if (data->recv_response.content_length <= MAIN_BUFFER_MAX_SIZE) {
   171ca:	687b      	ldr	r3, [r7, #4]
   171cc:	685a      	ldr	r2, [r3, #4]
   171ce:	2380      	movs	r3, #128	; 0x80
   171d0:	009b      	lsls	r3, r3, #2
   171d2:	429a      	cmp	r2, r3
   171d4:	d843      	bhi.n	1725e <http_client_callback+0xfa>
   171d6:	e003      	b.n	171e0 <http_client_callback+0x7c>
                add_state(CANCELED);
   171d8:	2020      	movs	r0, #32
   171da:	4b29      	ldr	r3, [pc, #164]	; (17280 <http_client_callback+0x11c>)
   171dc:	4798      	blx	r3
                return;
   171de:	e043      	b.n	17268 <http_client_callback+0x104>
                store_file_packet(data->recv_response.content, data->recv_response.content_length);
   171e0:	687b      	ldr	r3, [r7, #4]
   171e2:	689a      	ldr	r2, [r3, #8]
   171e4:	687b      	ldr	r3, [r7, #4]
   171e6:	685b      	ldr	r3, [r3, #4]
   171e8:	0019      	movs	r1, r3
   171ea:	0010      	movs	r0, r2
   171ec:	4b28      	ldr	r3, [pc, #160]	; (17290 <http_client_callback+0x12c>)
   171ee:	4798      	blx	r3
                add_state(COMPLETED);
   171f0:	2010      	movs	r0, #16
   171f2:	4b23      	ldr	r3, [pc, #140]	; (17280 <http_client_callback+0x11c>)
   171f4:	4798      	blx	r3
            }
            break;
   171f6:	e032      	b.n	1725e <http_client_callback+0xfa>

        case HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA:
            store_file_packet(data->recv_chunked_data.data, data->recv_chunked_data.length);
   171f8:	687b      	ldr	r3, [r7, #4]
   171fa:	685a      	ldr	r2, [r3, #4]
   171fc:	687b      	ldr	r3, [r7, #4]
   171fe:	681b      	ldr	r3, [r3, #0]
   17200:	0019      	movs	r1, r3
   17202:	0010      	movs	r0, r2
   17204:	4b22      	ldr	r3, [pc, #136]	; (17290 <http_client_callback+0x12c>)
   17206:	4798      	blx	r3
            if (data->recv_chunked_data.is_complete) {
   17208:	687b      	ldr	r3, [r7, #4]
   1720a:	7a1b      	ldrb	r3, [r3, #8]
   1720c:	2b00      	cmp	r3, #0
   1720e:	d028      	beq.n	17262 <http_client_callback+0xfe>
                add_state(COMPLETED);
   17210:	2010      	movs	r0, #16
   17212:	4b1b      	ldr	r3, [pc, #108]	; (17280 <http_client_callback+0x11c>)
   17214:	4798      	blx	r3
            }

            break;
   17216:	e024      	b.n	17262 <http_client_callback+0xfe>

        case HTTP_CLIENT_CALLBACK_DISCONNECTED:
            LogMessage(LOG_DEBUG_LVL, "http_client_callback: disconnection reason:%d\r\n", data->disconnected.reason);
   17218:	687b      	ldr	r3, [r7, #4]
   1721a:	681a      	ldr	r2, [r3, #0]
   1721c:	4b1d      	ldr	r3, [pc, #116]	; (17294 <http_client_callback+0x130>)
   1721e:	0019      	movs	r1, r3
   17220:	2001      	movs	r0, #1
   17222:	4b15      	ldr	r3, [pc, #84]	; (17278 <http_client_callback+0x114>)
   17224:	4798      	blx	r3

            /* If disconnect reason is equal to -ECONNRESET(-104),
             * It means the server has closed the connection (timeout).
             * This is normal operation.
             */
            if (data->disconnected.reason == -EAGAIN) {
   17226:	687b      	ldr	r3, [r7, #4]
   17228:	681b      	ldr	r3, [r3, #0]
   1722a:	330b      	adds	r3, #11
   1722c:	d11b      	bne.n	17266 <http_client_callback+0x102>
                /* Server has not responded. Retry immediately. */
                if (is_state_set(DOWNLOADING)) {
   1722e:	2008      	movs	r0, #8
   17230:	4b19      	ldr	r3, [pc, #100]	; (17298 <http_client_callback+0x134>)
   17232:	4798      	blx	r3
   17234:	1e03      	subs	r3, r0, #0
   17236:	d006      	beq.n	17246 <http_client_callback+0xe2>
                    f_close(&file_object);
   17238:	4b18      	ldr	r3, [pc, #96]	; (1729c <http_client_callback+0x138>)
   1723a:	0018      	movs	r0, r3
   1723c:	4b18      	ldr	r3, [pc, #96]	; (172a0 <http_client_callback+0x13c>)
   1723e:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   17240:	2008      	movs	r0, #8
   17242:	4b18      	ldr	r3, [pc, #96]	; (172a4 <http_client_callback+0x140>)
   17244:	4798      	blx	r3
                }

                if (is_state_set(GET_REQUESTED)) {
   17246:	2004      	movs	r0, #4
   17248:	4b13      	ldr	r3, [pc, #76]	; (17298 <http_client_callback+0x134>)
   1724a:	4798      	blx	r3
   1724c:	1e03      	subs	r3, r0, #0
   1724e:	d002      	beq.n	17256 <http_client_callback+0xf2>
                    clear_state(GET_REQUESTED);
   17250:	2004      	movs	r0, #4
   17252:	4b14      	ldr	r3, [pc, #80]	; (172a4 <http_client_callback+0x140>)
   17254:	4798      	blx	r3
                }

                start_download();
   17256:	4b14      	ldr	r3, [pc, #80]	; (172a8 <http_client_callback+0x144>)
   17258:	4798      	blx	r3
            }

            break;
   1725a:	46c0      	nop			; (mov r8, r8)
   1725c:	e003      	b.n	17266 <http_client_callback+0x102>
            break;
   1725e:	46c0      	nop			; (mov r8, r8)
   17260:	e002      	b.n	17268 <http_client_callback+0x104>
            break;
   17262:	46c0      	nop			; (mov r8, r8)
   17264:	e000      	b.n	17268 <http_client_callback+0x104>
            break;
   17266:	46c0      	nop			; (mov r8, r8)
    }
}
   17268:	46bd      	mov	sp, r7
   1726a:	b005      	add	sp, #20
   1726c:	bd90      	pop	{r4, r7, pc}
   1726e:	46c0      	nop			; (mov r8, r8)
   17270:	00037e54 	.word	0x00037e54
   17274:	0003773c 	.word	0x0003773c
   17278:	0001ecd1 	.word	0x0001ecd1
   1727c:	00037774 	.word	0x00037774
   17280:	00016b85 	.word	0x00016b85
   17284:	000377a0 	.word	0x000377a0
   17288:	20000890 	.word	0x20000890
   1728c:	20000894 	.word	0x20000894
   17290:	00016f91 	.word	0x00016f91
   17294:	000377dc 	.word	0x000377dc
   17298:	00016bad 	.word	0x00016bad
   1729c:	2000086c 	.word	0x2000086c
   172a0:	0002f17d 	.word	0x0002f17d
   172a4:	00016b51 	.word	0x00016b51
   172a8:	00016ed5 	.word	0x00016ed5

000172ac <socket_cb>:
 *  - tstrSocketAcceptMsg
 *  - tstrSocketConnectMsg
 *  - tstrSocketRecvMsg
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   172ac:	b580      	push	{r7, lr}
   172ae:	b082      	sub	sp, #8
   172b0:	af00      	add	r7, sp, #0
   172b2:	603a      	str	r2, [r7, #0]
   172b4:	1dfb      	adds	r3, r7, #7
   172b6:	1c02      	adds	r2, r0, #0
   172b8:	701a      	strb	r2, [r3, #0]
   172ba:	1dbb      	adds	r3, r7, #6
   172bc:	1c0a      	adds	r2, r1, #0
   172be:	701a      	strb	r2, [r3, #0]
    http_client_socket_event_handler(sock, u8Msg, pvMsg);
   172c0:	683a      	ldr	r2, [r7, #0]
   172c2:	1dbb      	adds	r3, r7, #6
   172c4:	7819      	ldrb	r1, [r3, #0]
   172c6:	1dfb      	adds	r3, r7, #7
   172c8:	781b      	ldrb	r3, [r3, #0]
   172ca:	b25b      	sxtb	r3, r3
   172cc:	0018      	movs	r0, r3
   172ce:	4b03      	ldr	r3, [pc, #12]	; (172dc <socket_cb+0x30>)
   172d0:	4798      	blx	r3
}
   172d2:	46c0      	nop			; (mov r8, r8)
   172d4:	46bd      	mov	sp, r7
   172d6:	b002      	add	sp, #8
   172d8:	bd80      	pop	{r7, pc}
   172da:	46c0      	nop			; (mov r8, r8)
   172dc:	00031ae1 	.word	0x00031ae1

000172e0 <resolve_cb>:
 * \brief Callback for the gethostbyname function (DNS Resolution callback).
 * \param[in] pu8DomainName Domain name of the host.
 * \param[in] u32ServerIP Server IPv4 address encoded in NW byte order format. If it is Zero, then the DNS resolution failed.
 */
static void resolve_cb(uint8_t *pu8DomainName, uint32_t u32ServerIP)
{
   172e0:	b5b0      	push	{r4, r5, r7, lr}
   172e2:	b086      	sub	sp, #24
   172e4:	af04      	add	r7, sp, #16
   172e6:	6078      	str	r0, [r7, #4]
   172e8:	6039      	str	r1, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
               "resolve_cb: %s IP address is %d.%d.%d.%d\r\n\r\n",
               pu8DomainName,
               (int)IPV4_BYTE(u32ServerIP, 0),
   172ea:	683b      	ldr	r3, [r7, #0]
    LogMessage(LOG_DEBUG_LVL,
   172ec:	22ff      	movs	r2, #255	; 0xff
   172ee:	4013      	ands	r3, r2
   172f0:	001c      	movs	r4, r3
               (int)IPV4_BYTE(u32ServerIP, 1),
   172f2:	683b      	ldr	r3, [r7, #0]
   172f4:	0a1b      	lsrs	r3, r3, #8
   172f6:	001a      	movs	r2, r3
    LogMessage(LOG_DEBUG_LVL,
   172f8:	23ff      	movs	r3, #255	; 0xff
   172fa:	4013      	ands	r3, r2
               (int)IPV4_BYTE(u32ServerIP, 2),
   172fc:	683a      	ldr	r2, [r7, #0]
   172fe:	0c12      	lsrs	r2, r2, #16
   17300:	0011      	movs	r1, r2
    LogMessage(LOG_DEBUG_LVL,
   17302:	22ff      	movs	r2, #255	; 0xff
   17304:	400a      	ands	r2, r1
               (int)IPV4_BYTE(u32ServerIP, 3));
   17306:	6839      	ldr	r1, [r7, #0]
   17308:	0e09      	lsrs	r1, r1, #24
    LogMessage(LOG_DEBUG_LVL,
   1730a:	000d      	movs	r5, r1
   1730c:	6878      	ldr	r0, [r7, #4]
   1730e:	4909      	ldr	r1, [pc, #36]	; (17334 <resolve_cb+0x54>)
   17310:	9502      	str	r5, [sp, #8]
   17312:	9201      	str	r2, [sp, #4]
   17314:	9300      	str	r3, [sp, #0]
   17316:	0023      	movs	r3, r4
   17318:	0002      	movs	r2, r0
   1731a:	2001      	movs	r0, #1
   1731c:	4c06      	ldr	r4, [pc, #24]	; (17338 <resolve_cb+0x58>)
   1731e:	47a0      	blx	r4
    http_client_socket_resolve_handler(pu8DomainName, u32ServerIP);
   17320:	683a      	ldr	r2, [r7, #0]
   17322:	687b      	ldr	r3, [r7, #4]
   17324:	0011      	movs	r1, r2
   17326:	0018      	movs	r0, r3
   17328:	4b04      	ldr	r3, [pc, #16]	; (1733c <resolve_cb+0x5c>)
   1732a:	4798      	blx	r3
}
   1732c:	46c0      	nop			; (mov r8, r8)
   1732e:	46bd      	mov	sp, r7
   17330:	b002      	add	sp, #8
   17332:	bdb0      	pop	{r4, r5, r7, pc}
   17334:	0003780c 	.word	0x0003780c
   17338:	0001ecd1 	.word	0x0001ecd1
   1733c:	00031c45 	.word	0x00031c45

00017340 <wifi_cb>:
 *  - tstrM2MAPResp
 *  - tstrM2mScanDone
 *  - tstrM2mWifiscanResult
 */
static void wifi_cb(uint8_t u8MsgType, void *pvMsg)
{
   17340:	b590      	push	{r4, r7, lr}
   17342:	b087      	sub	sp, #28
   17344:	af02      	add	r7, sp, #8
   17346:	0002      	movs	r2, r0
   17348:	6039      	str	r1, [r7, #0]
   1734a:	1dfb      	adds	r3, r7, #7
   1734c:	701a      	strb	r2, [r3, #0]
    switch (u8MsgType) {
   1734e:	1dfb      	adds	r3, r7, #7
   17350:	781b      	ldrb	r3, [r3, #0]
   17352:	2b2c      	cmp	r3, #44	; 0x2c
   17354:	d002      	beq.n	1735c <wifi_cb+0x1c>
   17356:	2b32      	cmp	r3, #50	; 0x32
   17358:	d03d      	beq.n	173d6 <wifi_cb+0x96>
                }
            }
        } break;

        default:
            break;
   1735a:	e06f      	b.n	1743c <wifi_cb+0xfc>
            tstrM2mWifiStateChanged *pstrWifiState = (tstrM2mWifiStateChanged *)pvMsg;
   1735c:	683b      	ldr	r3, [r7, #0]
   1735e:	60fb      	str	r3, [r7, #12]
            if (pstrWifiState->u8CurrState == M2M_WIFI_CONNECTED) {
   17360:	68fb      	ldr	r3, [r7, #12]
   17362:	781b      	ldrb	r3, [r3, #0]
   17364:	2b01      	cmp	r3, #1
   17366:	d107      	bne.n	17378 <wifi_cb+0x38>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_CONNECTED\r\n");
   17368:	4b36      	ldr	r3, [pc, #216]	; (17444 <wifi_cb+0x104>)
   1736a:	0019      	movs	r1, r3
   1736c:	2001      	movs	r0, #1
   1736e:	4b36      	ldr	r3, [pc, #216]	; (17448 <wifi_cb+0x108>)
   17370:	4798      	blx	r3
                m2m_wifi_request_dhcp_client();
   17372:	4b36      	ldr	r3, [pc, #216]	; (1744c <wifi_cb+0x10c>)
   17374:	4798      	blx	r3
            break;
   17376:	e05e      	b.n	17436 <wifi_cb+0xf6>
            } else if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
   17378:	68fb      	ldr	r3, [r7, #12]
   1737a:	781b      	ldrb	r3, [r3, #0]
   1737c:	2b00      	cmp	r3, #0
   1737e:	d15a      	bne.n	17436 <wifi_cb+0xf6>
                LogMessage(LOG_DEBUG_LVL, "wifi_cb: M2M_WIFI_DISCONNECTED\r\n");
   17380:	4b33      	ldr	r3, [pc, #204]	; (17450 <wifi_cb+0x110>)
   17382:	0019      	movs	r1, r3
   17384:	2001      	movs	r0, #1
   17386:	4b30      	ldr	r3, [pc, #192]	; (17448 <wifi_cb+0x108>)
   17388:	4798      	blx	r3
                clear_state(WIFI_CONNECTED);
   1738a:	2002      	movs	r0, #2
   1738c:	4b31      	ldr	r3, [pc, #196]	; (17454 <wifi_cb+0x114>)
   1738e:	4798      	blx	r3
                if (is_state_set(DOWNLOADING)) {
   17390:	2008      	movs	r0, #8
   17392:	4b31      	ldr	r3, [pc, #196]	; (17458 <wifi_cb+0x118>)
   17394:	4798      	blx	r3
   17396:	1e03      	subs	r3, r0, #0
   17398:	d006      	beq.n	173a8 <wifi_cb+0x68>
                    f_close(&file_object);
   1739a:	4b30      	ldr	r3, [pc, #192]	; (1745c <wifi_cb+0x11c>)
   1739c:	0018      	movs	r0, r3
   1739e:	4b30      	ldr	r3, [pc, #192]	; (17460 <wifi_cb+0x120>)
   173a0:	4798      	blx	r3
                    clear_state(DOWNLOADING);
   173a2:	2008      	movs	r0, #8
   173a4:	4b2b      	ldr	r3, [pc, #172]	; (17454 <wifi_cb+0x114>)
   173a6:	4798      	blx	r3
                if (is_state_set(GET_REQUESTED)) {
   173a8:	2004      	movs	r0, #4
   173aa:	4b2b      	ldr	r3, [pc, #172]	; (17458 <wifi_cb+0x118>)
   173ac:	4798      	blx	r3
   173ae:	1e03      	subs	r3, r0, #0
   173b0:	d002      	beq.n	173b8 <wifi_cb+0x78>
                    clear_state(GET_REQUESTED);
   173b2:	2004      	movs	r0, #4
   173b4:	4b27      	ldr	r3, [pc, #156]	; (17454 <wifi_cb+0x114>)
   173b6:	4798      	blx	r3
                mqtt_disconnect(&mqtt_inst, 1);
   173b8:	4b2a      	ldr	r3, [pc, #168]	; (17464 <wifi_cb+0x124>)
   173ba:	2101      	movs	r1, #1
   173bc:	0018      	movs	r0, r3
   173be:	4b2a      	ldr	r3, [pc, #168]	; (17468 <wifi_cb+0x128>)
   173c0:	4798      	blx	r3
                m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   173c2:	4a2a      	ldr	r2, [pc, #168]	; (1746c <wifi_cb+0x12c>)
   173c4:	482a      	ldr	r0, [pc, #168]	; (17470 <wifi_cb+0x130>)
   173c6:	23ff      	movs	r3, #255	; 0xff
   173c8:	9300      	str	r3, [sp, #0]
   173ca:	0013      	movs	r3, r2
   173cc:	2202      	movs	r2, #2
   173ce:	2106      	movs	r1, #6
   173d0:	4c28      	ldr	r4, [pc, #160]	; (17474 <wifi_cb+0x134>)
   173d2:	47a0      	blx	r4
            break;
   173d4:	e02f      	b.n	17436 <wifi_cb+0xf6>
            uint8_t *pu8IPAddress = (uint8_t *)pvMsg;
   173d6:	683b      	ldr	r3, [r7, #0]
   173d8:	60bb      	str	r3, [r7, #8]
            LogMessage(LOG_DEBUG_LVL, "wifi_cb: IP address is %u.%u.%u.%u\r\n", pu8IPAddress[0], pu8IPAddress[1], pu8IPAddress[2], pu8IPAddress[3]);
   173da:	68bb      	ldr	r3, [r7, #8]
   173dc:	781b      	ldrb	r3, [r3, #0]
   173de:	0018      	movs	r0, r3
   173e0:	68bb      	ldr	r3, [r7, #8]
   173e2:	3301      	adds	r3, #1
   173e4:	781b      	ldrb	r3, [r3, #0]
   173e6:	001c      	movs	r4, r3
   173e8:	68bb      	ldr	r3, [r7, #8]
   173ea:	3302      	adds	r3, #2
   173ec:	781b      	ldrb	r3, [r3, #0]
   173ee:	001a      	movs	r2, r3
   173f0:	68bb      	ldr	r3, [r7, #8]
   173f2:	3303      	adds	r3, #3
   173f4:	781b      	ldrb	r3, [r3, #0]
   173f6:	4920      	ldr	r1, [pc, #128]	; (17478 <wifi_cb+0x138>)
   173f8:	9301      	str	r3, [sp, #4]
   173fa:	9200      	str	r2, [sp, #0]
   173fc:	0023      	movs	r3, r4
   173fe:	0002      	movs	r2, r0
   17400:	2001      	movs	r0, #1
   17402:	4c11      	ldr	r4, [pc, #68]	; (17448 <wifi_cb+0x108>)
   17404:	47a0      	blx	r4
            add_state(WIFI_CONNECTED);
   17406:	2002      	movs	r0, #2
   17408:	4b1c      	ldr	r3, [pc, #112]	; (1747c <wifi_cb+0x13c>)
   1740a:	4798      	blx	r3
            if (do_download_flag == 1) {
   1740c:	4b1c      	ldr	r3, [pc, #112]	; (17480 <wifi_cb+0x140>)
   1740e:	781b      	ldrb	r3, [r3, #0]
   17410:	2b01      	cmp	r3, #1
   17412:	d102      	bne.n	1741a <wifi_cb+0xda>
                start_download();
   17414:	4b1b      	ldr	r3, [pc, #108]	; (17484 <wifi_cb+0x144>)
   17416:	4798      	blx	r3
        } break;
   17418:	e00f      	b.n	1743a <wifi_cb+0xfa>
                if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   1741a:	4a1b      	ldr	r2, [pc, #108]	; (17488 <wifi_cb+0x148>)
   1741c:	4b11      	ldr	r3, [pc, #68]	; (17464 <wifi_cb+0x124>)
   1741e:	0011      	movs	r1, r2
   17420:	0018      	movs	r0, r3
   17422:	4b1a      	ldr	r3, [pc, #104]	; (1748c <wifi_cb+0x14c>)
   17424:	4798      	blx	r3
   17426:	1e03      	subs	r3, r0, #0
   17428:	d007      	beq.n	1743a <wifi_cb+0xfa>
                    LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   1742a:	4b19      	ldr	r3, [pc, #100]	; (17490 <wifi_cb+0x150>)
   1742c:	0019      	movs	r1, r3
   1742e:	2001      	movs	r0, #1
   17430:	4b05      	ldr	r3, [pc, #20]	; (17448 <wifi_cb+0x108>)
   17432:	4798      	blx	r3
        } break;
   17434:	e001      	b.n	1743a <wifi_cb+0xfa>
            break;
   17436:	46c0      	nop			; (mov r8, r8)
   17438:	e000      	b.n	1743c <wifi_cb+0xfc>
        } break;
   1743a:	46c0      	nop			; (mov r8, r8)
    }
}
   1743c:	46c0      	nop			; (mov r8, r8)
   1743e:	46bd      	mov	sp, r7
   17440:	b005      	add	sp, #20
   17442:	bd90      	pop	{r4, r7, pc}
   17444:	0003783c 	.word	0x0003783c
   17448:	0001ecd1 	.word	0x0001ecd1
   1744c:	000232b1 	.word	0x000232b1
   17450:	0003785c 	.word	0x0003785c
   17454:	00016b51 	.word	0x00016b51
   17458:	00016bad 	.word	0x00016bad
   1745c:	2000086c 	.word	0x2000086c
   17460:	0002f17d 	.word	0x0002f17d
   17464:	20000898 	.word	0x20000898
   17468:	0003078d 	.word	0x0003078d
   1746c:	00037880 	.word	0x00037880
   17470:	0003788c 	.word	0x0003788c
   17474:	00022ddd 	.word	0x00022ddd
   17478:	00037894 	.word	0x00037894
   1747c:	00016b85 	.word	0x00016b85
   17480:	20000638 	.word	0x20000638
   17484:	00016ed5 	.word	0x00016ed5
   17488:	000374ac 	.word	0x000374ac
   1748c:	00030659 	.word	0x00030659
   17490:	000378bc 	.word	0x000378bc

00017494 <init_storage>:

/**
 * \brief Initialize SD/MMC storage.
 */
void init_storage(void)
{
   17494:	b590      	push	{r4, r7, lr}
   17496:	b083      	sub	sp, #12
   17498:	af00      	add	r7, sp, #0
    FRESULT res;
    Ctrl_status status;

    /* Initialize SD/MMC stack. */
    sd_mmc_init();
   1749a:	4b29      	ldr	r3, [pc, #164]	; (17540 <init_storage+0xac>)
   1749c:	4798      	blx	r3
    while (true) {
        LogMessage(LOG_DEBUG_LVL, "init_storage: please plug an SD/MMC card in slot...\r\n");
   1749e:	4b29      	ldr	r3, [pc, #164]	; (17544 <init_storage+0xb0>)
   174a0:	0019      	movs	r1, r3
   174a2:	2001      	movs	r0, #1
   174a4:	4b28      	ldr	r3, [pc, #160]	; (17548 <init_storage+0xb4>)
   174a6:	4798      	blx	r3

        /* Wait card present and ready. */
        do {
            status = sd_mmc_test_unit_ready(0);
   174a8:	1dfc      	adds	r4, r7, #7
   174aa:	2000      	movs	r0, #0
   174ac:	4b27      	ldr	r3, [pc, #156]	; (1754c <init_storage+0xb8>)
   174ae:	4798      	blx	r3
   174b0:	0003      	movs	r3, r0
   174b2:	7023      	strb	r3, [r4, #0]
            if (CTRL_FAIL == status) {
   174b4:	1dfb      	adds	r3, r7, #7
   174b6:	781b      	ldrb	r3, [r3, #0]
   174b8:	2b01      	cmp	r3, #1
   174ba:	d110      	bne.n	174de <init_storage+0x4a>
                LogMessage(LOG_DEBUG_LVL, "init_storage: SD Card install failed.\r\n");
   174bc:	4b24      	ldr	r3, [pc, #144]	; (17550 <init_storage+0xbc>)
   174be:	0019      	movs	r1, r3
   174c0:	2001      	movs	r0, #1
   174c2:	4b21      	ldr	r3, [pc, #132]	; (17548 <init_storage+0xb4>)
   174c4:	4798      	blx	r3
                LogMessage(LOG_DEBUG_LVL, "init_storage: try unplug and re-plug the card.\r\n");
   174c6:	4b23      	ldr	r3, [pc, #140]	; (17554 <init_storage+0xc0>)
   174c8:	0019      	movs	r1, r3
   174ca:	2001      	movs	r0, #1
   174cc:	4b1e      	ldr	r3, [pc, #120]	; (17548 <init_storage+0xb4>)
   174ce:	4798      	blx	r3
                while (CTRL_NO_PRESENT != sd_mmc_check(0)) {
   174d0:	46c0      	nop			; (mov r8, r8)
   174d2:	2000      	movs	r0, #0
   174d4:	4b20      	ldr	r3, [pc, #128]	; (17558 <init_storage+0xc4>)
   174d6:	4798      	blx	r3
   174d8:	0003      	movs	r3, r0
   174da:	2b02      	cmp	r3, #2
   174dc:	d1f9      	bne.n	174d2 <init_storage+0x3e>
                }
            }
        } while (CTRL_GOOD != status);
   174de:	1dfb      	adds	r3, r7, #7
   174e0:	781b      	ldrb	r3, [r3, #0]
   174e2:	2b00      	cmp	r3, #0
   174e4:	d1e0      	bne.n	174a8 <init_storage+0x14>

        LogMessage(LOG_DEBUG_LVL, "init_storage: mounting SD card...\r\n");
   174e6:	4b1d      	ldr	r3, [pc, #116]	; (1755c <init_storage+0xc8>)
   174e8:	0019      	movs	r1, r3
   174ea:	2001      	movs	r0, #1
   174ec:	4b16      	ldr	r3, [pc, #88]	; (17548 <init_storage+0xb4>)
   174ee:	4798      	blx	r3
        memset(&fatfs, 0, sizeof(FATFS));
   174f0:	238c      	movs	r3, #140	; 0x8c
   174f2:	009a      	lsls	r2, r3, #2
   174f4:	4b1a      	ldr	r3, [pc, #104]	; (17560 <init_storage+0xcc>)
   174f6:	2100      	movs	r1, #0
   174f8:	0018      	movs	r0, r3
   174fa:	4b1a      	ldr	r3, [pc, #104]	; (17564 <init_storage+0xd0>)
   174fc:	4798      	blx	r3
        res = f_mount(LUN_ID_SD_MMC_0_MEM, &fatfs);
   174fe:	1dbc      	adds	r4, r7, #6
   17500:	4b17      	ldr	r3, [pc, #92]	; (17560 <init_storage+0xcc>)
   17502:	0019      	movs	r1, r3
   17504:	2000      	movs	r0, #0
   17506:	4b18      	ldr	r3, [pc, #96]	; (17568 <init_storage+0xd4>)
   17508:	4798      	blx	r3
   1750a:	0003      	movs	r3, r0
   1750c:	7023      	strb	r3, [r4, #0]
        if (FR_INVALID_DRIVE == res) {
   1750e:	1dbb      	adds	r3, r7, #6
   17510:	781b      	ldrb	r3, [r3, #0]
   17512:	2b0b      	cmp	r3, #11
   17514:	d107      	bne.n	17526 <init_storage+0x92>
            LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount failed! (res %d)\r\n", res);
   17516:	1dbb      	adds	r3, r7, #6
   17518:	781a      	ldrb	r2, [r3, #0]
   1751a:	4b14      	ldr	r3, [pc, #80]	; (1756c <init_storage+0xd8>)
   1751c:	0019      	movs	r1, r3
   1751e:	2001      	movs	r0, #1
   17520:	4b09      	ldr	r3, [pc, #36]	; (17548 <init_storage+0xb4>)
   17522:	4798      	blx	r3
            return;
   17524:	e008      	b.n	17538 <init_storage+0xa4>
        }

        LogMessage(LOG_DEBUG_LVL, "init_storage: SD card mount OK.\r\n");
   17526:	4b12      	ldr	r3, [pc, #72]	; (17570 <init_storage+0xdc>)
   17528:	0019      	movs	r1, r3
   1752a:	2001      	movs	r0, #1
   1752c:	4b06      	ldr	r3, [pc, #24]	; (17548 <init_storage+0xb4>)
   1752e:	4798      	blx	r3
        add_state(STORAGE_READY);
   17530:	2001      	movs	r0, #1
   17532:	4b10      	ldr	r3, [pc, #64]	; (17574 <init_storage+0xe0>)
   17534:	4798      	blx	r3
        return;
   17536:	46c0      	nop			; (mov r8, r8)
    }
}
   17538:	46bd      	mov	sp, r7
   1753a:	b003      	add	sp, #12
   1753c:	bd90      	pop	{r4, r7, pc}
   1753e:	46c0      	nop			; (mov r8, r8)
   17540:	0001fae9 	.word	0x0001fae9
   17544:	000378e0 	.word	0x000378e0
   17548:	0001ecd1 	.word	0x0001ecd1
   1754c:	0001ffc5 	.word	0x0001ffc5
   17550:	00037918 	.word	0x00037918
   17554:	00037940 	.word	0x00037940
   17558:	0001fb39 	.word	0x0001fb39
   1755c:	00037974 	.word	0x00037974
   17560:	2000063c 	.word	0x2000063c
   17564:	0003582f 	.word	0x0003582f
   17568:	0002e725 	.word	0x0002e725
   1756c:	00037998 	.word	0x00037998
   17570:	000379c8 	.word	0x000379c8
   17574:	00016b85 	.word	0x00016b85

00017578 <configure_timer>:

/**
 * \brief Configure Timer module.
 */
static void configure_timer(void)
{
   17578:	b580      	push	{r7, lr}
   1757a:	b082      	sub	sp, #8
   1757c:	af00      	add	r7, sp, #0
    struct sw_timer_config swt_conf;
    sw_timer_get_config_defaults(&swt_conf);
   1757e:	1d3b      	adds	r3, r7, #4
   17580:	0018      	movs	r0, r3
   17582:	4b08      	ldr	r3, [pc, #32]	; (175a4 <configure_timer+0x2c>)
   17584:	4798      	blx	r3

    sw_timer_init(&swt_module_inst, &swt_conf);
   17586:	1d3a      	adds	r2, r7, #4
   17588:	4b07      	ldr	r3, [pc, #28]	; (175a8 <configure_timer+0x30>)
   1758a:	0011      	movs	r1, r2
   1758c:	0018      	movs	r0, r3
   1758e:	4b07      	ldr	r3, [pc, #28]	; (175ac <configure_timer+0x34>)
   17590:	4798      	blx	r3
    sw_timer_enable(&swt_module_inst);
   17592:	4b05      	ldr	r3, [pc, #20]	; (175a8 <configure_timer+0x30>)
   17594:	0018      	movs	r0, r3
   17596:	4b06      	ldr	r3, [pc, #24]	; (175b0 <configure_timer+0x38>)
   17598:	4798      	blx	r3
}
   1759a:	46c0      	nop			; (mov r8, r8)
   1759c:	46bd      	mov	sp, r7
   1759e:	b002      	add	sp, #8
   175a0:	bd80      	pop	{r7, pc}
   175a2:	46c0      	nop			; (mov r8, r8)
   175a4:	00033275 	.word	0x00033275
   175a8:	20004900 	.word	0x20004900
   175ac:	00033299 	.word	0x00033299
   175b0:	00033385 	.word	0x00033385

000175b4 <configure_http_client>:

/**
 * \brief Configure HTTP client module.
 */
static void configure_http_client(void)
{
   175b4:	b580      	push	{r7, lr}
   175b6:	b088      	sub	sp, #32
   175b8:	af00      	add	r7, sp, #0
    struct http_client_config httpc_conf;
    int ret;

    http_client_get_config_defaults(&httpc_conf);
   175ba:	003b      	movs	r3, r7
   175bc:	0018      	movs	r0, r3
   175be:	4b16      	ldr	r3, [pc, #88]	; (17618 <configure_http_client+0x64>)
   175c0:	4798      	blx	r3

    httpc_conf.recv_buffer_size = MAIN_BUFFER_MAX_SIZE;
   175c2:	003b      	movs	r3, r7
   175c4:	2280      	movs	r2, #128	; 0x80
   175c6:	0092      	lsls	r2, r2, #2
   175c8:	611a      	str	r2, [r3, #16]
    httpc_conf.timer_inst = &swt_module_inst;
   175ca:	003b      	movs	r3, r7
   175cc:	4a13      	ldr	r2, [pc, #76]	; (1761c <configure_http_client+0x68>)
   175ce:	605a      	str	r2, [r3, #4]
    httpc_conf.port = 443;
   175d0:	003b      	movs	r3, r7
   175d2:	22bc      	movs	r2, #188	; 0xbc
   175d4:	32ff      	adds	r2, #255	; 0xff
   175d6:	801a      	strh	r2, [r3, #0]
    httpc_conf.tls = 1;
   175d8:	003b      	movs	r3, r7
   175da:	2201      	movs	r2, #1
   175dc:	709a      	strb	r2, [r3, #2]

    ret = http_client_init(&http_client_module_inst, &httpc_conf);
   175de:	003a      	movs	r2, r7
   175e0:	4b0f      	ldr	r3, [pc, #60]	; (17620 <configure_http_client+0x6c>)
   175e2:	0011      	movs	r1, r2
   175e4:	0018      	movs	r0, r3
   175e6:	4b0f      	ldr	r3, [pc, #60]	; (17624 <configure_http_client+0x70>)
   175e8:	4798      	blx	r3
   175ea:	0003      	movs	r3, r0
   175ec:	61fb      	str	r3, [r7, #28]
    if (ret < 0) {
   175ee:	69fb      	ldr	r3, [r7, #28]
   175f0:	2b00      	cmp	r3, #0
   175f2:	da06      	bge.n	17602 <configure_http_client+0x4e>
        LogMessage(LOG_DEBUG_LVL, "configure_http_client: HTTP client initialization failed! (res %d)\r\n", ret);
   175f4:	69fa      	ldr	r2, [r7, #28]
   175f6:	4b0c      	ldr	r3, [pc, #48]	; (17628 <configure_http_client+0x74>)
   175f8:	0019      	movs	r1, r3
   175fa:	2001      	movs	r0, #1
   175fc:	4b0b      	ldr	r3, [pc, #44]	; (1762c <configure_http_client+0x78>)
   175fe:	4798      	blx	r3
        while (1) {
   17600:	e7fe      	b.n	17600 <configure_http_client+0x4c>
        } /* Loop forever. */
    }

    http_client_register_callback(&http_client_module_inst, http_client_callback);
   17602:	4a0b      	ldr	r2, [pc, #44]	; (17630 <configure_http_client+0x7c>)
   17604:	4b06      	ldr	r3, [pc, #24]	; (17620 <configure_http_client+0x6c>)
   17606:	0011      	movs	r1, r2
   17608:	0018      	movs	r0, r3
   1760a:	4b0a      	ldr	r3, [pc, #40]	; (17634 <configure_http_client+0x80>)
   1760c:	4798      	blx	r3
}
   1760e:	46c0      	nop			; (mov r8, r8)
   17610:	46bd      	mov	sp, r7
   17612:	b008      	add	sp, #32
   17614:	bd80      	pop	{r7, pc}
   17616:	46c0      	nop			; (mov r8, r8)
   17618:	00031909 	.word	0x00031909
   1761c:	20004900 	.word	0x20004900
   17620:	20004958 	.word	0x20004958
   17624:	00031955 	.word	0x00031955
   17628:	000379ec 	.word	0x000379ec
   1762c:	0001ecd1 	.word	0x0001ecd1
   17630:	00017165 	.word	0x00017165
   17634:	00031a41 	.word	0x00031a41

00017638 <socket_event_handler>:
 *  - [SOCKET_MSG_SENDTO](@ref SOCKET_MSG_SENDTO)
 *  - [SOCKET_MSG_RECVFROM](@ref SOCKET_MSG_RECVFROM)
 * \param[in] msg_data A structure contains notification informations.
 */
static void socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   17638:	b580      	push	{r7, lr}
   1763a:	b082      	sub	sp, #8
   1763c:	af00      	add	r7, sp, #0
   1763e:	603a      	str	r2, [r7, #0]
   17640:	1dfb      	adds	r3, r7, #7
   17642:	1c02      	adds	r2, r0, #0
   17644:	701a      	strb	r2, [r3, #0]
   17646:	1dbb      	adds	r3, r7, #6
   17648:	1c0a      	adds	r2, r1, #0
   1764a:	701a      	strb	r2, [r3, #0]
    mqtt_socket_event_handler(sock, msg_type, msg_data);
   1764c:	683a      	ldr	r2, [r7, #0]
   1764e:	1dbb      	adds	r3, r7, #6
   17650:	7819      	ldrb	r1, [r3, #0]
   17652:	1dfb      	adds	r3, r7, #7
   17654:	781b      	ldrb	r3, [r3, #0]
   17656:	b25b      	sxtb	r3, r3
   17658:	0018      	movs	r0, r3
   1765a:	4b03      	ldr	r3, [pc, #12]	; (17668 <socket_event_handler+0x30>)
   1765c:	4798      	blx	r3
}
   1765e:	46c0      	nop			; (mov r8, r8)
   17660:	46bd      	mov	sp, r7
   17662:	b002      	add	sp, #8
   17664:	bd80      	pop	{r7, pc}
   17666:	46c0      	nop			; (mov r8, r8)
   17668:	00030601 	.word	0x00030601

0001766c <socket_resolve_handler>:
 *
 * \param[in] doamin_name Domain name.
 * \param[in] server_ip IP of server.
 */
static void socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   1766c:	b580      	push	{r7, lr}
   1766e:	b082      	sub	sp, #8
   17670:	af00      	add	r7, sp, #0
   17672:	6078      	str	r0, [r7, #4]
   17674:	6039      	str	r1, [r7, #0]
    mqtt_socket_resolve_handler(doamin_name, server_ip);
   17676:	683a      	ldr	r2, [r7, #0]
   17678:	687b      	ldr	r3, [r7, #4]
   1767a:	0011      	movs	r1, r2
   1767c:	0018      	movs	r0, r3
   1767e:	4b03      	ldr	r3, [pc, #12]	; (1768c <socket_resolve_handler+0x20>)
   17680:	4798      	blx	r3
}
   17682:	46c0      	nop			; (mov r8, r8)
   17684:	46bd      	mov	sp, r7
   17686:	b002      	add	sp, #8
   17688:	bd80      	pop	{r7, pc}
   1768a:	46c0      	nop			; (mov r8, r8)
   1768c:	00030635 	.word	0x00030635

00017690 <SubscribeHandlerLedTopic>:
 *
 * \param[in] msgData Data to be received.
 */

void SubscribeHandlerLedTopic(MessageData *msgData)
{
   17690:	b590      	push	{r4, r7, lr}
   17692:	b089      	sub	sp, #36	; 0x24
   17694:	af02      	add	r7, sp, #8
   17696:	6078      	str	r0, [r7, #4]
    uint8_t rgb[3] = {0, 0, 0};
   17698:	2310      	movs	r3, #16
   1769a:	18fb      	adds	r3, r7, r3
   1769c:	2200      	movs	r2, #0
   1769e:	701a      	strb	r2, [r3, #0]
   176a0:	2310      	movs	r3, #16
   176a2:	18fb      	adds	r3, r7, r3
   176a4:	2200      	movs	r2, #0
   176a6:	705a      	strb	r2, [r3, #1]
   176a8:	2310      	movs	r3, #16
   176aa:	18fb      	adds	r3, r7, r3
   176ac:	2200      	movs	r2, #0
   176ae:	709a      	strb	r2, [r3, #2]
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   176b0:	687b      	ldr	r3, [r7, #4]
   176b2:	685b      	ldr	r3, [r3, #4]
   176b4:	685a      	ldr	r2, [r3, #4]
   176b6:	687b      	ldr	r3, [r7, #4]
   176b8:	685b      	ldr	r3, [r3, #4]
   176ba:	689b      	ldr	r3, [r3, #8]
   176bc:	492a      	ldr	r1, [pc, #168]	; (17768 <SubscribeHandlerLedTopic+0xd8>)
   176be:	2001      	movs	r0, #1
   176c0:	4c2a      	ldr	r4, [pc, #168]	; (1776c <SubscribeHandlerLedTopic+0xdc>)
   176c2:	47a0      	blx	r4
    // Will receive something of the style "rgb(222, 224, 189)"
    if (strncmp(msgData->message->payload, "rgb(", 4) == 0) {
   176c4:	687b      	ldr	r3, [r7, #4]
   176c6:	681b      	ldr	r3, [r3, #0]
   176c8:	689b      	ldr	r3, [r3, #8]
   176ca:	4929      	ldr	r1, [pc, #164]	; (17770 <SubscribeHandlerLedTopic+0xe0>)
   176cc:	2204      	movs	r2, #4
   176ce:	0018      	movs	r0, r3
   176d0:	4b28      	ldr	r3, [pc, #160]	; (17774 <SubscribeHandlerLedTopic+0xe4>)
   176d2:	4798      	blx	r3
   176d4:	1e03      	subs	r3, r0, #0
   176d6:	d143      	bne.n	17760 <SubscribeHandlerLedTopic+0xd0>
        char *p = (char *)&msgData->message->payload[4];
   176d8:	687b      	ldr	r3, [r7, #4]
   176da:	681b      	ldr	r3, [r3, #0]
   176dc:	689b      	ldr	r3, [r3, #8]
   176de:	3304      	adds	r3, #4
   176e0:	60fb      	str	r3, [r7, #12]
        int nb = 0;
   176e2:	2300      	movs	r3, #0
   176e4:	617b      	str	r3, [r7, #20]
        while (nb <= 2 && *p) {
   176e6:	e015      	b.n	17714 <SubscribeHandlerLedTopic+0x84>
            rgb[nb++] = strtol(p, &p, 10);
   176e8:	697c      	ldr	r4, [r7, #20]
   176ea:	1c63      	adds	r3, r4, #1
   176ec:	617b      	str	r3, [r7, #20]
   176ee:	68fb      	ldr	r3, [r7, #12]
   176f0:	220c      	movs	r2, #12
   176f2:	18b9      	adds	r1, r7, r2
   176f4:	220a      	movs	r2, #10
   176f6:	0018      	movs	r0, r3
   176f8:	4b1f      	ldr	r3, [pc, #124]	; (17778 <SubscribeHandlerLedTopic+0xe8>)
   176fa:	4798      	blx	r3
   176fc:	0003      	movs	r3, r0
   176fe:	b2da      	uxtb	r2, r3
   17700:	2310      	movs	r3, #16
   17702:	18fb      	adds	r3, r7, r3
   17704:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
   17706:	68fb      	ldr	r3, [r7, #12]
   17708:	781b      	ldrb	r3, [r3, #0]
   1770a:	2b2c      	cmp	r3, #44	; 0x2c
   1770c:	d10a      	bne.n	17724 <SubscribeHandlerLedTopic+0x94>
            p++; /* skip, */
   1770e:	68fb      	ldr	r3, [r7, #12]
   17710:	3301      	adds	r3, #1
   17712:	60fb      	str	r3, [r7, #12]
        while (nb <= 2 && *p) {
   17714:	697b      	ldr	r3, [r7, #20]
   17716:	2b02      	cmp	r3, #2
   17718:	dc05      	bgt.n	17726 <SubscribeHandlerLedTopic+0x96>
   1771a:	68fb      	ldr	r3, [r7, #12]
   1771c:	781b      	ldrb	r3, [r3, #0]
   1771e:	2b00      	cmp	r3, #0
   17720:	d1e2      	bne.n	176e8 <SubscribeHandlerLedTopic+0x58>
   17722:	e000      	b.n	17726 <SubscribeHandlerLedTopic+0x96>
            if (*p != ',') break;
   17724:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nRGB %d %d %d\r\n", rgb[0], rgb[1], rgb[2]);
   17726:	2310      	movs	r3, #16
   17728:	18fb      	adds	r3, r7, r3
   1772a:	781b      	ldrb	r3, [r3, #0]
   1772c:	001a      	movs	r2, r3
   1772e:	2310      	movs	r3, #16
   17730:	18fb      	adds	r3, r7, r3
   17732:	785b      	ldrb	r3, [r3, #1]
   17734:	0018      	movs	r0, r3
   17736:	2310      	movs	r3, #16
   17738:	18fb      	adds	r3, r7, r3
   1773a:	789b      	ldrb	r3, [r3, #2]
   1773c:	490f      	ldr	r1, [pc, #60]	; (1777c <SubscribeHandlerLedTopic+0xec>)
   1773e:	9300      	str	r3, [sp, #0]
   17740:	0003      	movs	r3, r0
   17742:	2001      	movs	r0, #1
   17744:	4c09      	ldr	r4, [pc, #36]	; (1776c <SubscribeHandlerLedTopic+0xdc>)
   17746:	47a0      	blx	r4
        UIChangeColors(rgb[0], rgb[1], rgb[2]);
   17748:	2310      	movs	r3, #16
   1774a:	18fb      	adds	r3, r7, r3
   1774c:	7818      	ldrb	r0, [r3, #0]
   1774e:	2310      	movs	r3, #16
   17750:	18fb      	adds	r3, r7, r3
   17752:	7859      	ldrb	r1, [r3, #1]
   17754:	2310      	movs	r3, #16
   17756:	18fb      	adds	r3, r7, r3
   17758:	789b      	ldrb	r3, [r3, #2]
   1775a:	001a      	movs	r2, r3
   1775c:	4b08      	ldr	r3, [pc, #32]	; (17780 <SubscribeHandlerLedTopic+0xf0>)
   1775e:	4798      	blx	r3
    }
}
   17760:	46c0      	nop			; (mov r8, r8)
   17762:	46bd      	mov	sp, r7
   17764:	b007      	add	sp, #28
   17766:	bd90      	pop	{r4, r7, pc}
   17768:	00037a34 	.word	0x00037a34
   1776c:	0001ecd1 	.word	0x0001ecd1
   17770:	00037a3c 	.word	0x00037a3c
   17774:	00035bf5 	.word	0x00035bf5
   17778:	00035da1 	.word	0x00035da1
   1777c:	00037a44 	.word	0x00037a44
   17780:	00016a19 	.word	0x00016a19

00017784 <SubscribeHandlerGameTopic>:

void SubscribeHandlerGameTopic(MessageData *msgData)
{
   17784:	b590      	push	{r4, r7, lr}
   17786:	b08b      	sub	sp, #44	; 0x2c
   17788:	af00      	add	r7, sp, #0
   1778a:	6078      	str	r0, [r7, #4]
    struct GameDataPacket game;
    memset(game.game, 0xff, sizeof(game.game));
   1778c:	230c      	movs	r3, #12
   1778e:	18fb      	adds	r3, r7, r3
   17790:	2214      	movs	r2, #20
   17792:	21ff      	movs	r1, #255	; 0xff
   17794:	0018      	movs	r0, r3
   17796:	4b48      	ldr	r3, [pc, #288]	; (178b8 <SubscribeHandlerGameTopic+0x134>)
   17798:	4798      	blx	r3

    // Parse input. The start string must be '{"game":['
    if (strncmp(msgData->message->payload, "{\"game\":[", 9) == 0) {
   1779a:	687b      	ldr	r3, [r7, #4]
   1779c:	681b      	ldr	r3, [r3, #0]
   1779e:	689b      	ldr	r3, [r3, #8]
   177a0:	4946      	ldr	r1, [pc, #280]	; (178bc <SubscribeHandlerGameTopic+0x138>)
   177a2:	2209      	movs	r2, #9
   177a4:	0018      	movs	r0, r3
   177a6:	4b46      	ldr	r3, [pc, #280]	; (178c0 <SubscribeHandlerGameTopic+0x13c>)
   177a8:	4798      	blx	r3
   177aa:	1e03      	subs	r3, r0, #0
   177ac:	d166      	bne.n	1787c <SubscribeHandlerGameTopic+0xf8>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received!\r\n");
   177ae:	4b45      	ldr	r3, [pc, #276]	; (178c4 <SubscribeHandlerGameTopic+0x140>)
   177b0:	0019      	movs	r1, r3
   177b2:	2001      	movs	r0, #1
   177b4:	4b44      	ldr	r3, [pc, #272]	; (178c8 <SubscribeHandlerGameTopic+0x144>)
   177b6:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   177b8:	687b      	ldr	r3, [r7, #4]
   177ba:	685b      	ldr	r3, [r3, #4]
   177bc:	685a      	ldr	r2, [r3, #4]
   177be:	687b      	ldr	r3, [r7, #4]
   177c0:	685b      	ldr	r3, [r3, #4]
   177c2:	689b      	ldr	r3, [r3, #8]
   177c4:	4941      	ldr	r1, [pc, #260]	; (178cc <SubscribeHandlerGameTopic+0x148>)
   177c6:	2001      	movs	r0, #1
   177c8:	4c3f      	ldr	r4, [pc, #252]	; (178c8 <SubscribeHandlerGameTopic+0x144>)
   177ca:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   177cc:	687b      	ldr	r3, [r7, #4]
   177ce:	681b      	ldr	r3, [r3, #0]
   177d0:	68da      	ldr	r2, [r3, #12]
   177d2:	687b      	ldr	r3, [r7, #4]
   177d4:	681b      	ldr	r3, [r3, #0]
   177d6:	689b      	ldr	r3, [r3, #8]
   177d8:	493d      	ldr	r1, [pc, #244]	; (178d0 <SubscribeHandlerGameTopic+0x14c>)
   177da:	2001      	movs	r0, #1
   177dc:	4c3a      	ldr	r4, [pc, #232]	; (178c8 <SubscribeHandlerGameTopic+0x144>)
   177de:	47a0      	blx	r4

        int nb = 0;
   177e0:	2300      	movs	r3, #0
   177e2:	627b      	str	r3, [r7, #36]	; 0x24
        char *p = &msgData->message->payload[9];
   177e4:	687b      	ldr	r3, [r7, #4]
   177e6:	681b      	ldr	r3, [r3, #0]
   177e8:	689b      	ldr	r3, [r3, #8]
   177ea:	3309      	adds	r3, #9
   177ec:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
   177ee:	e015      	b.n	1781c <SubscribeHandlerGameTopic+0x98>
            game.game[nb++] = strtol(p, &p, 10);
   177f0:	6a7c      	ldr	r4, [r7, #36]	; 0x24
   177f2:	1c63      	adds	r3, r4, #1
   177f4:	627b      	str	r3, [r7, #36]	; 0x24
   177f6:	68bb      	ldr	r3, [r7, #8]
   177f8:	2208      	movs	r2, #8
   177fa:	18b9      	adds	r1, r7, r2
   177fc:	220a      	movs	r2, #10
   177fe:	0018      	movs	r0, r3
   17800:	4b34      	ldr	r3, [pc, #208]	; (178d4 <SubscribeHandlerGameTopic+0x150>)
   17802:	4798      	blx	r3
   17804:	0003      	movs	r3, r0
   17806:	b2da      	uxtb	r2, r3
   17808:	230c      	movs	r3, #12
   1780a:	18fb      	adds	r3, r7, r3
   1780c:	551a      	strb	r2, [r3, r4]
            if (*p != ',') break;
   1780e:	68bb      	ldr	r3, [r7, #8]
   17810:	781b      	ldrb	r3, [r3, #0]
   17812:	2b2c      	cmp	r3, #44	; 0x2c
   17814:	d10a      	bne.n	1782c <SubscribeHandlerGameTopic+0xa8>
            p++; /* skip, */
   17816:	68bb      	ldr	r3, [r7, #8]
   17818:	3301      	adds	r3, #1
   1781a:	60bb      	str	r3, [r7, #8]
        while (nb < GAME_SIZE && *p) {
   1781c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1781e:	2b13      	cmp	r3, #19
   17820:	dc05      	bgt.n	1782e <SubscribeHandlerGameTopic+0xaa>
   17822:	68bb      	ldr	r3, [r7, #8]
   17824:	781b      	ldrb	r3, [r3, #0]
   17826:	2b00      	cmp	r3, #0
   17828:	d1e2      	bne.n	177f0 <SubscribeHandlerGameTopic+0x6c>
   1782a:	e000      	b.n	1782e <SubscribeHandlerGameTopic+0xaa>
            if (*p != ',') break;
   1782c:	46c0      	nop			; (mov r8, r8)
        }
        LogMessage(LOG_DEBUG_LVL, "\r\nParsed Command: ");
   1782e:	4b2a      	ldr	r3, [pc, #168]	; (178d8 <SubscribeHandlerGameTopic+0x154>)
   17830:	0019      	movs	r1, r3
   17832:	2001      	movs	r0, #1
   17834:	4b24      	ldr	r3, [pc, #144]	; (178c8 <SubscribeHandlerGameTopic+0x144>)
   17836:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
   17838:	2300      	movs	r3, #0
   1783a:	623b      	str	r3, [r7, #32]
   1783c:	e00d      	b.n	1785a <SubscribeHandlerGameTopic+0xd6>
            LogMessage(LOG_DEBUG_LVL, "%d,", game.game[i]);
   1783e:	230c      	movs	r3, #12
   17840:	18fa      	adds	r2, r7, r3
   17842:	6a3b      	ldr	r3, [r7, #32]
   17844:	18d3      	adds	r3, r2, r3
   17846:	781b      	ldrb	r3, [r3, #0]
   17848:	001a      	movs	r2, r3
   1784a:	4b24      	ldr	r3, [pc, #144]	; (178dc <SubscribeHandlerGameTopic+0x158>)
   1784c:	0019      	movs	r1, r3
   1784e:	2001      	movs	r0, #1
   17850:	4b1d      	ldr	r3, [pc, #116]	; (178c8 <SubscribeHandlerGameTopic+0x144>)
   17852:	4798      	blx	r3
        for (int i = 0; i < GAME_SIZE; i++) {
   17854:	6a3b      	ldr	r3, [r7, #32]
   17856:	3301      	adds	r3, #1
   17858:	623b      	str	r3, [r7, #32]
   1785a:	6a3b      	ldr	r3, [r7, #32]
   1785c:	2b13      	cmp	r3, #19
   1785e:	ddee      	ble.n	1783e <SubscribeHandlerGameTopic+0xba>
        }

        if (pdTRUE == ControlAddGameData(&game)) {
   17860:	230c      	movs	r3, #12
   17862:	18fb      	adds	r3, r7, r3
   17864:	0018      	movs	r0, r3
   17866:	4b1e      	ldr	r3, [pc, #120]	; (178e0 <SubscribeHandlerGameTopic+0x15c>)
   17868:	4798      	blx	r3
   1786a:	0003      	movs	r3, r0
   1786c:	2b01      	cmp	r3, #1
   1786e:	d11e      	bne.n	178ae <SubscribeHandlerGameTopic+0x12a>
            LogMessage(LOG_DEBUG_LVL, "\r\nSent play to control!\r\n");
   17870:	4b1c      	ldr	r3, [pc, #112]	; (178e4 <SubscribeHandlerGameTopic+0x160>)
   17872:	0019      	movs	r1, r3
   17874:	2001      	movs	r0, #1
   17876:	4b14      	ldr	r3, [pc, #80]	; (178c8 <SubscribeHandlerGameTopic+0x144>)
   17878:	4798      	blx	r3
    } else {
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
    }
}
   1787a:	e018      	b.n	178ae <SubscribeHandlerGameTopic+0x12a>
        LogMessage(LOG_DEBUG_LVL, "\r\nGame message received but not understood!\r\n");
   1787c:	4b1a      	ldr	r3, [pc, #104]	; (178e8 <SubscribeHandlerGameTopic+0x164>)
   1787e:	0019      	movs	r1, r3
   17880:	2001      	movs	r0, #1
   17882:	4b11      	ldr	r3, [pc, #68]	; (178c8 <SubscribeHandlerGameTopic+0x144>)
   17884:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   17886:	687b      	ldr	r3, [r7, #4]
   17888:	685b      	ldr	r3, [r3, #4]
   1788a:	685a      	ldr	r2, [r3, #4]
   1788c:	687b      	ldr	r3, [r7, #4]
   1788e:	685b      	ldr	r3, [r3, #4]
   17890:	689b      	ldr	r3, [r3, #8]
   17892:	490e      	ldr	r1, [pc, #56]	; (178cc <SubscribeHandlerGameTopic+0x148>)
   17894:	2001      	movs	r0, #1
   17896:	4c0c      	ldr	r4, [pc, #48]	; (178c8 <SubscribeHandlerGameTopic+0x144>)
   17898:	47a0      	blx	r4
        LogMessage(LOG_DEBUG_LVL, "%.*s", msgData->message->payloadlen, (char *)msgData->message->payload);
   1789a:	687b      	ldr	r3, [r7, #4]
   1789c:	681b      	ldr	r3, [r3, #0]
   1789e:	68da      	ldr	r2, [r3, #12]
   178a0:	687b      	ldr	r3, [r7, #4]
   178a2:	681b      	ldr	r3, [r3, #0]
   178a4:	689b      	ldr	r3, [r3, #8]
   178a6:	490a      	ldr	r1, [pc, #40]	; (178d0 <SubscribeHandlerGameTopic+0x14c>)
   178a8:	2001      	movs	r0, #1
   178aa:	4c07      	ldr	r4, [pc, #28]	; (178c8 <SubscribeHandlerGameTopic+0x144>)
   178ac:	47a0      	blx	r4
}
   178ae:	46c0      	nop			; (mov r8, r8)
   178b0:	46bd      	mov	sp, r7
   178b2:	b00b      	add	sp, #44	; 0x2c
   178b4:	bd90      	pop	{r4, r7, pc}
   178b6:	46c0      	nop			; (mov r8, r8)
   178b8:	0003582f 	.word	0x0003582f
   178bc:	00037a58 	.word	0x00037a58
   178c0:	00035bf5 	.word	0x00035bf5
   178c4:	00037a64 	.word	0x00037a64
   178c8:	0001ecd1 	.word	0x0001ecd1
   178cc:	00037a34 	.word	0x00037a34
   178d0:	00037a80 	.word	0x00037a80
   178d4:	00035da1 	.word	0x00035da1
   178d8:	00037a88 	.word	0x00037a88
   178dc:	00037a9c 	.word	0x00037a9c
   178e0:	000149a5 	.word	0x000149a5
   178e4:	00037aa0 	.word	0x00037aa0
   178e8:	00037abc 	.word	0x00037abc

000178ec <SubscribeHandlerImuTopic>:

void SubscribeHandlerImuTopic(MessageData *msgData)
{
   178ec:	b590      	push	{r4, r7, lr}
   178ee:	b083      	sub	sp, #12
   178f0:	af00      	add	r7, sp, #0
   178f2:	6078      	str	r0, [r7, #4]
	LogMessage(LOG_DEBUG_LVL, "\r\nIMU topic received!\r\n");
   178f4:	4b09      	ldr	r3, [pc, #36]	; (1791c <SubscribeHandlerImuTopic+0x30>)
   178f6:	0019      	movs	r1, r3
   178f8:	2001      	movs	r0, #1
   178fa:	4b09      	ldr	r3, [pc, #36]	; (17920 <SubscribeHandlerImuTopic+0x34>)
   178fc:	4798      	blx	r3
    LogMessage(LOG_DEBUG_LVL, "\r\n %.*s", msgData->topicName->lenstring.len, msgData->topicName->lenstring.data);
   178fe:	687b      	ldr	r3, [r7, #4]
   17900:	685b      	ldr	r3, [r3, #4]
   17902:	685a      	ldr	r2, [r3, #4]
   17904:	687b      	ldr	r3, [r7, #4]
   17906:	685b      	ldr	r3, [r3, #4]
   17908:	689b      	ldr	r3, [r3, #8]
   1790a:	4906      	ldr	r1, [pc, #24]	; (17924 <SubscribeHandlerImuTopic+0x38>)
   1790c:	2001      	movs	r0, #1
   1790e:	4c04      	ldr	r4, [pc, #16]	; (17920 <SubscribeHandlerImuTopic+0x34>)
   17910:	47a0      	blx	r4
}
   17912:	46c0      	nop			; (mov r8, r8)
   17914:	46bd      	mov	sp, r7
   17916:	b003      	add	sp, #12
   17918:	bd90      	pop	{r4, r7, pc}
   1791a:	46c0      	nop			; (mov r8, r8)
   1791c:	00037aec 	.word	0x00037aec
   17920:	0001ecd1 	.word	0x0001ecd1
   17924:	00037a34 	.word	0x00037a34

00017928 <mqtt_callback>:
 *  - [MQTT_CALLBACK_DISCONNECTED](@ref MQTT_CALLBACK_DISCONNECTED)
 *  - [MQTT_CALLBACK_RECV_PUBLISH](@ref MQTT_CALLBACK_RECV_PUBLISH)
 * \param[in] data A structure contains notification informations. @ref mqtt_data
 */
static void mqtt_callback(struct mqtt_module *module_inst, int type, union mqtt_data *data)
{
   17928:	b590      	push	{r4, r7, lr}
   1792a:	b08b      	sub	sp, #44	; 0x2c
   1792c:	af06      	add	r7, sp, #24
   1792e:	60f8      	str	r0, [r7, #12]
   17930:	60b9      	str	r1, [r7, #8]
   17932:	607a      	str	r2, [r7, #4]
    switch (type) {
   17934:	68bb      	ldr	r3, [r7, #8]
   17936:	2b01      	cmp	r3, #1
   17938:	d03b      	beq.n	179b2 <mqtt_callback+0x8a>
   1793a:	2b05      	cmp	r3, #5
   1793c:	d05e      	beq.n	179fc <mqtt_callback+0xd4>
   1793e:	2b00      	cmp	r3, #0
   17940:	d000      	beq.n	17944 <mqtt_callback+0x1c>
            /* Stop timer and USART callback. */
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
            // usart_disable_callback(&cdc_uart_module, USART_CALLBACK_BUFFER_RECEIVED);
            break;
    }
}
   17942:	e061      	b.n	17a08 <mqtt_callback+0xe0>
            if (data->sock_connected.result >= 0) {
   17944:	687b      	ldr	r3, [r7, #4]
   17946:	681b      	ldr	r3, [r3, #0]
   17948:	2b00      	cmp	r3, #0
   1794a:	db25      	blt.n	17998 <mqtt_callback+0x70>
                LogMessage(LOG_DEBUG_LVL, "\r\nConnecting to Broker...");
   1794c:	4b30      	ldr	r3, [pc, #192]	; (17a10 <mqtt_callback+0xe8>)
   1794e:	0019      	movs	r1, r3
   17950:	2001      	movs	r0, #1
   17952:	4b30      	ldr	r3, [pc, #192]	; (17a14 <mqtt_callback+0xec>)
   17954:	4798      	blx	r3
                if (0 != mqtt_connect_broker(module_inst, 1, CLOUDMQTT_USER_ID, CLOUDMQTT_USER_PASSWORD, CLOUDMQTT_USER_ID, NULL, NULL, 0, 0, 0)) {
   17956:	4930      	ldr	r1, [pc, #192]	; (17a18 <mqtt_callback+0xf0>)
   17958:	4a30      	ldr	r2, [pc, #192]	; (17a1c <mqtt_callback+0xf4>)
   1795a:	68f8      	ldr	r0, [r7, #12]
   1795c:	2300      	movs	r3, #0
   1795e:	9305      	str	r3, [sp, #20]
   17960:	2300      	movs	r3, #0
   17962:	9304      	str	r3, [sp, #16]
   17964:	2300      	movs	r3, #0
   17966:	9303      	str	r3, [sp, #12]
   17968:	2300      	movs	r3, #0
   1796a:	9302      	str	r3, [sp, #8]
   1796c:	2300      	movs	r3, #0
   1796e:	9301      	str	r3, [sp, #4]
   17970:	4b2a      	ldr	r3, [pc, #168]	; (17a1c <mqtt_callback+0xf4>)
   17972:	9300      	str	r3, [sp, #0]
   17974:	000b      	movs	r3, r1
   17976:	2101      	movs	r1, #1
   17978:	4c29      	ldr	r4, [pc, #164]	; (17a20 <mqtt_callback+0xf8>)
   1797a:	47a0      	blx	r4
   1797c:	1e03      	subs	r3, r0, #0
   1797e:	d005      	beq.n	1798c <mqtt_callback+0x64>
                    LogMessage(LOG_DEBUG_LVL, "MQTT  Error - NOT Connected to broker\r\n");
   17980:	4b28      	ldr	r3, [pc, #160]	; (17a24 <mqtt_callback+0xfc>)
   17982:	0019      	movs	r1, r3
   17984:	2001      	movs	r0, #1
   17986:	4b23      	ldr	r3, [pc, #140]	; (17a14 <mqtt_callback+0xec>)
   17988:	4798      	blx	r3
        } break;
   1798a:	e03d      	b.n	17a08 <mqtt_callback+0xe0>
                    LogMessage(LOG_DEBUG_LVL, "MQTT Connected to broker\r\n");
   1798c:	4b26      	ldr	r3, [pc, #152]	; (17a28 <mqtt_callback+0x100>)
   1798e:	0019      	movs	r1, r3
   17990:	2001      	movs	r0, #1
   17992:	4b20      	ldr	r3, [pc, #128]	; (17a14 <mqtt_callback+0xec>)
   17994:	4798      	blx	r3
        } break;
   17996:	e037      	b.n	17a08 <mqtt_callback+0xe0>
                LogMessage(LOG_DEBUG_LVL, "Connect fail to server(%s)! retry it automatically.\r\n", main_mqtt_broker);
   17998:	4a24      	ldr	r2, [pc, #144]	; (17a2c <mqtt_callback+0x104>)
   1799a:	4b25      	ldr	r3, [pc, #148]	; (17a30 <mqtt_callback+0x108>)
   1799c:	0019      	movs	r1, r3
   1799e:	2001      	movs	r0, #1
   179a0:	4b1c      	ldr	r3, [pc, #112]	; (17a14 <mqtt_callback+0xec>)
   179a2:	4798      	blx	r3
                mqtt_connect(module_inst, main_mqtt_broker); /* Retry that. */
   179a4:	4a21      	ldr	r2, [pc, #132]	; (17a2c <mqtt_callback+0x104>)
   179a6:	68fb      	ldr	r3, [r7, #12]
   179a8:	0011      	movs	r1, r2
   179aa:	0018      	movs	r0, r3
   179ac:	4b21      	ldr	r3, [pc, #132]	; (17a34 <mqtt_callback+0x10c>)
   179ae:	4798      	blx	r3
        } break;
   179b0:	e02a      	b.n	17a08 <mqtt_callback+0xe0>
            if (data->connected.result == MQTT_CONN_RESULT_ACCEPT) {
   179b2:	687b      	ldr	r3, [r7, #4]
   179b4:	781b      	ldrb	r3, [r3, #0]
   179b6:	2b00      	cmp	r3, #0
   179b8:	d117      	bne.n	179ea <mqtt_callback+0xc2>
                mqtt_subscribe(module_inst, GAME_TOPIC_IN, 2, SubscribeHandlerGameTopic);
   179ba:	4b1f      	ldr	r3, [pc, #124]	; (17a38 <mqtt_callback+0x110>)
   179bc:	491f      	ldr	r1, [pc, #124]	; (17a3c <mqtt_callback+0x114>)
   179be:	68f8      	ldr	r0, [r7, #12]
   179c0:	2202      	movs	r2, #2
   179c2:	4c1f      	ldr	r4, [pc, #124]	; (17a40 <mqtt_callback+0x118>)
   179c4:	47a0      	blx	r4
                mqtt_subscribe(module_inst, LED_TOPIC, 2, SubscribeHandlerLedTopic);
   179c6:	4b1f      	ldr	r3, [pc, #124]	; (17a44 <mqtt_callback+0x11c>)
   179c8:	491f      	ldr	r1, [pc, #124]	; (17a48 <mqtt_callback+0x120>)
   179ca:	68f8      	ldr	r0, [r7, #12]
   179cc:	2202      	movs	r2, #2
   179ce:	4c1c      	ldr	r4, [pc, #112]	; (17a40 <mqtt_callback+0x118>)
   179d0:	47a0      	blx	r4
                mqtt_subscribe(module_inst, IMU_TOPIC, 2, SubscribeHandlerImuTopic);
   179d2:	4b1e      	ldr	r3, [pc, #120]	; (17a4c <mqtt_callback+0x124>)
   179d4:	491e      	ldr	r1, [pc, #120]	; (17a50 <mqtt_callback+0x128>)
   179d6:	68f8      	ldr	r0, [r7, #12]
   179d8:	2202      	movs	r2, #2
   179da:	4c19      	ldr	r4, [pc, #100]	; (17a40 <mqtt_callback+0x118>)
   179dc:	47a0      	blx	r4
                LogMessage(LOG_DEBUG_LVL, "MQTT Connected\r\n");
   179de:	4b1d      	ldr	r3, [pc, #116]	; (17a54 <mqtt_callback+0x12c>)
   179e0:	0019      	movs	r1, r3
   179e2:	2001      	movs	r0, #1
   179e4:	4b0b      	ldr	r3, [pc, #44]	; (17a14 <mqtt_callback+0xec>)
   179e6:	4798      	blx	r3
            break;
   179e8:	e00e      	b.n	17a08 <mqtt_callback+0xe0>
                LogMessage(LOG_DEBUG_LVL, "MQTT broker decline your access! error code %d\r\n", data->connected.result);
   179ea:	687b      	ldr	r3, [r7, #4]
   179ec:	781b      	ldrb	r3, [r3, #0]
   179ee:	001a      	movs	r2, r3
   179f0:	4b19      	ldr	r3, [pc, #100]	; (17a58 <mqtt_callback+0x130>)
   179f2:	0019      	movs	r1, r3
   179f4:	2001      	movs	r0, #1
   179f6:	4b07      	ldr	r3, [pc, #28]	; (17a14 <mqtt_callback+0xec>)
   179f8:	4798      	blx	r3
            break;
   179fa:	e005      	b.n	17a08 <mqtt_callback+0xe0>
            LogMessage(LOG_DEBUG_LVL, "MQTT disconnected\r\n");
   179fc:	4b17      	ldr	r3, [pc, #92]	; (17a5c <mqtt_callback+0x134>)
   179fe:	0019      	movs	r1, r3
   17a00:	2001      	movs	r0, #1
   17a02:	4b04      	ldr	r3, [pc, #16]	; (17a14 <mqtt_callback+0xec>)
   17a04:	4798      	blx	r3
            break;
   17a06:	46c0      	nop			; (mov r8, r8)
}
   17a08:	46c0      	nop			; (mov r8, r8)
   17a0a:	46bd      	mov	sp, r7
   17a0c:	b005      	add	sp, #20
   17a0e:	bd90      	pop	{r4, r7, pc}
   17a10:	00037b50 	.word	0x00037b50
   17a14:	0001ecd1 	.word	0x0001ecd1
   17a18:	00037b6c 	.word	0x00037b6c
   17a1c:	00037b7c 	.word	0x00037b7c
   17a20:	000306a1 	.word	0x000306a1
   17a24:	00037b88 	.word	0x00037b88
   17a28:	00037bb0 	.word	0x00037bb0
   17a2c:	000374ac 	.word	0x000374ac
   17a30:	00037bcc 	.word	0x00037bcc
   17a34:	00030659 	.word	0x00030659
   17a38:	00017785 	.word	0x00017785
   17a3c:	00037c04 	.word	0x00037c04
   17a40:	00030841 	.word	0x00030841
   17a44:	00017691 	.word	0x00017691
   17a48:	00037b2c 	.word	0x00037b2c
   17a4c:	000178ed 	.word	0x000178ed
   17a50:	00037c18 	.word	0x00037c18
   17a54:	00037c2c 	.word	0x00037c2c
   17a58:	00037c40 	.word	0x00037c40
   17a5c:	00037c74 	.word	0x00037c74

00017a60 <configure_mqtt>:

/**
 * \brief Configure MQTT service.
 */
static void configure_mqtt(void)
{
   17a60:	b580      	push	{r7, lr}
   17a62:	b088      	sub	sp, #32
   17a64:	af00      	add	r7, sp, #0
    struct mqtt_config mqtt_conf;
    int result;

    mqtt_get_config_defaults(&mqtt_conf);
   17a66:	1d3b      	adds	r3, r7, #4
   17a68:	0018      	movs	r0, r3
   17a6a:	4b1f      	ldr	r3, [pc, #124]	; (17ae8 <configure_mqtt+0x88>)
   17a6c:	4798      	blx	r3
    /* To use the MQTT service, it is necessary to always set the buffer and the timer. */
    mqtt_conf.read_buffer = mqtt_read_buffer;
   17a6e:	1d3b      	adds	r3, r7, #4
   17a70:	4a1e      	ldr	r2, [pc, #120]	; (17aec <configure_mqtt+0x8c>)
   17a72:	609a      	str	r2, [r3, #8]
    mqtt_conf.read_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   17a74:	1d3b      	adds	r3, r7, #4
   17a76:	2280      	movs	r2, #128	; 0x80
   17a78:	0092      	lsls	r2, r2, #2
   17a7a:	60da      	str	r2, [r3, #12]
    mqtt_conf.send_buffer = mqtt_send_buffer;
   17a7c:	1d3b      	adds	r3, r7, #4
   17a7e:	4a1c      	ldr	r2, [pc, #112]	; (17af0 <configure_mqtt+0x90>)
   17a80:	611a      	str	r2, [r3, #16]
    mqtt_conf.send_buffer_size = MAIN_MQTT_BUFFER_SIZE;
   17a82:	1d3b      	adds	r3, r7, #4
   17a84:	2280      	movs	r2, #128	; 0x80
   17a86:	0092      	lsls	r2, r2, #2
   17a88:	615a      	str	r2, [r3, #20]
    mqtt_conf.port = CLOUDMQTT_PORT;
   17a8a:	1d3b      	adds	r3, r7, #4
   17a8c:	4a19      	ldr	r2, [pc, #100]	; (17af4 <configure_mqtt+0x94>)
   17a8e:	801a      	strh	r2, [r3, #0]
    mqtt_conf.keep_alive = 6000;
   17a90:	1d3b      	adds	r3, r7, #4
   17a92:	4a19      	ldr	r2, [pc, #100]	; (17af8 <configure_mqtt+0x98>)
   17a94:	809a      	strh	r2, [r3, #4]

    result = mqtt_init(&mqtt_inst, &mqtt_conf);
   17a96:	1d3a      	adds	r2, r7, #4
   17a98:	4b18      	ldr	r3, [pc, #96]	; (17afc <configure_mqtt+0x9c>)
   17a9a:	0011      	movs	r1, r2
   17a9c:	0018      	movs	r0, r3
   17a9e:	4b18      	ldr	r3, [pc, #96]	; (17b00 <configure_mqtt+0xa0>)
   17aa0:	4798      	blx	r3
   17aa2:	0003      	movs	r3, r0
   17aa4:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   17aa6:	69fb      	ldr	r3, [r7, #28]
   17aa8:	2b00      	cmp	r3, #0
   17aaa:	da06      	bge.n	17aba <configure_mqtt+0x5a>
        LogMessage(LOG_DEBUG_LVL, "MQTT initialization failed. Error code is (%d)\r\n", result);
   17aac:	69fa      	ldr	r2, [r7, #28]
   17aae:	4b15      	ldr	r3, [pc, #84]	; (17b04 <configure_mqtt+0xa4>)
   17ab0:	0019      	movs	r1, r3
   17ab2:	2001      	movs	r0, #1
   17ab4:	4b14      	ldr	r3, [pc, #80]	; (17b08 <configure_mqtt+0xa8>)
   17ab6:	4798      	blx	r3
        while (1) {
   17ab8:	e7fe      	b.n	17ab8 <configure_mqtt+0x58>
        }
    }

    result = mqtt_register_callback(&mqtt_inst, mqtt_callback);
   17aba:	4a14      	ldr	r2, [pc, #80]	; (17b0c <configure_mqtt+0xac>)
   17abc:	4b0f      	ldr	r3, [pc, #60]	; (17afc <configure_mqtt+0x9c>)
   17abe:	0011      	movs	r1, r2
   17ac0:	0018      	movs	r0, r3
   17ac2:	4b13      	ldr	r3, [pc, #76]	; (17b10 <configure_mqtt+0xb0>)
   17ac4:	4798      	blx	r3
   17ac6:	0003      	movs	r3, r0
   17ac8:	61fb      	str	r3, [r7, #28]
    if (result < 0) {
   17aca:	69fb      	ldr	r3, [r7, #28]
   17acc:	2b00      	cmp	r3, #0
   17ace:	da06      	bge.n	17ade <configure_mqtt+0x7e>
        LogMessage(LOG_DEBUG_LVL, "MQTT register callback failed. Error code is (%d)\r\n", result);
   17ad0:	69fa      	ldr	r2, [r7, #28]
   17ad2:	4b10      	ldr	r3, [pc, #64]	; (17b14 <configure_mqtt+0xb4>)
   17ad4:	0019      	movs	r1, r3
   17ad6:	2001      	movs	r0, #1
   17ad8:	4b0b      	ldr	r3, [pc, #44]	; (17b08 <configure_mqtt+0xa8>)
   17ada:	4798      	blx	r3
        while (1) {
   17adc:	e7fe      	b.n	17adc <configure_mqtt+0x7c>
        }
    }
}
   17ade:	46c0      	nop			; (mov r8, r8)
   17ae0:	46bd      	mov	sp, r7
   17ae2:	b008      	add	sp, #32
   17ae4:	bd80      	pop	{r7, pc}
   17ae6:	46c0      	nop			; (mov r8, r8)
   17ae8:	00030599 	.word	0x00030599
   17aec:	200008d0 	.word	0x200008d0
   17af0:	20000ad0 	.word	0x20000ad0
   17af4:	0000075b 	.word	0x0000075b
   17af8:	00001770 	.word	0x00001770
   17afc:	20000898 	.word	0x20000898
   17b00:	000304e9 	.word	0x000304e9
   17b04:	00037c88 	.word	0x00037c88
   17b08:	0001ecd1 	.word	0x0001ecd1
   17b0c:	00017929 	.word	0x00017929
   17b10:	000305d9 	.word	0x000305d9
   17b14:	00037cbc 	.word	0x00037cbc

00017b18 <configure_extint_channel>:

// SETUP FOR EXTERNAL BUTTON INTERRUPT -- Used to send an MQTT Message

void configure_extint_channel(void)
{
   17b18:	b580      	push	{r7, lr}
   17b1a:	b084      	sub	sp, #16
   17b1c:	af00      	add	r7, sp, #0
    struct extint_chan_conf config_extint_chan;
    extint_chan_get_config_defaults(&config_extint_chan);
   17b1e:	1d3b      	adds	r3, r7, #4
   17b20:	0018      	movs	r0, r3
   17b22:	4b0b      	ldr	r3, [pc, #44]	; (17b50 <configure_extint_channel+0x38>)
   17b24:	4798      	blx	r3
    config_extint_chan.gpio_pin = BUTTON_0_EIC_PIN;
   17b26:	1d3b      	adds	r3, r7, #4
   17b28:	2237      	movs	r2, #55	; 0x37
   17b2a:	601a      	str	r2, [r3, #0]
    config_extint_chan.gpio_pin_mux = BUTTON_0_EIC_MUX;
   17b2c:	1d3b      	adds	r3, r7, #4
   17b2e:	2200      	movs	r2, #0
   17b30:	605a      	str	r2, [r3, #4]
    config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   17b32:	1d3b      	adds	r3, r7, #4
   17b34:	2201      	movs	r2, #1
   17b36:	721a      	strb	r2, [r3, #8]
    config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   17b38:	1d3b      	adds	r3, r7, #4
   17b3a:	2202      	movs	r2, #2
   17b3c:	72da      	strb	r2, [r3, #11]
    extint_chan_set_config(BUTTON_0_EIC_LINE, &config_extint_chan);
   17b3e:	1d3b      	adds	r3, r7, #4
   17b40:	0019      	movs	r1, r3
   17b42:	2007      	movs	r0, #7
   17b44:	4b03      	ldr	r3, [pc, #12]	; (17b54 <configure_extint_channel+0x3c>)
   17b46:	4798      	blx	r3
}
   17b48:	46c0      	nop			; (mov r8, r8)
   17b4a:	46bd      	mov	sp, r7
   17b4c:	b004      	add	sp, #16
   17b4e:	bd80      	pop	{r7, pc}
   17b50:	000276d1 	.word	0x000276d1
   17b54:	00027705 	.word	0x00027705

00017b58 <configure_extint_callbacks>:

void extint_detection_callback(void);
void configure_extint_callbacks(void)
{
   17b58:	b580      	push	{r7, lr}
   17b5a:	af00      	add	r7, sp, #0
    extint_register_callback(extint_detection_callback, BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   17b5c:	4b06      	ldr	r3, [pc, #24]	; (17b78 <configure_extint_callbacks+0x20>)
   17b5e:	2200      	movs	r2, #0
   17b60:	2107      	movs	r1, #7
   17b62:	0018      	movs	r0, r3
   17b64:	4b05      	ldr	r3, [pc, #20]	; (17b7c <configure_extint_callbacks+0x24>)
   17b66:	4798      	blx	r3
    extint_chan_enable_callback(BUTTON_0_EIC_LINE, EXTINT_CALLBACK_TYPE_DETECT);
   17b68:	2100      	movs	r1, #0
   17b6a:	2007      	movs	r0, #7
   17b6c:	4b04      	ldr	r3, [pc, #16]	; (17b80 <configure_extint_callbacks+0x28>)
   17b6e:	4798      	blx	r3
}
   17b70:	46c0      	nop			; (mov r8, r8)
   17b72:	46bd      	mov	sp, r7
   17b74:	bd80      	pop	{r7, pc}
   17b76:	46c0      	nop			; (mov r8, r8)
   17b78:	00017b85 	.word	0x00017b85
   17b7c:	000272d1 	.word	0x000272d1
   17b80:	00027335 	.word	0x00027335

00017b84 <extint_detection_callback>:

volatile bool isPressed = false;
void extint_detection_callback(void)
{
   17b84:	b5b0      	push	{r4, r5, r7, lr}
   17b86:	af00      	add	r7, sp, #0
    // Publish some data after a button press and release. Note: just an example! This is not the most elegant way of doing this!
    temperature++;
   17b88:	4b0c      	ldr	r3, [pc, #48]	; (17bbc <extint_detection_callback+0x38>)
   17b8a:	681b      	ldr	r3, [r3, #0]
   17b8c:	1c5a      	adds	r2, r3, #1
   17b8e:	4b0b      	ldr	r3, [pc, #44]	; (17bbc <extint_detection_callback+0x38>)
   17b90:	601a      	str	r2, [r3, #0]
    if (temperature > 40) temperature = 1;
   17b92:	4b0a      	ldr	r3, [pc, #40]	; (17bbc <extint_detection_callback+0x38>)
   17b94:	681b      	ldr	r3, [r3, #0]
   17b96:	2b28      	cmp	r3, #40	; 0x28
   17b98:	d902      	bls.n	17ba0 <extint_detection_callback+0x1c>
   17b9a:	4b08      	ldr	r3, [pc, #32]	; (17bbc <extint_detection_callback+0x38>)
   17b9c:	2201      	movs	r2, #1
   17b9e:	601a      	str	r2, [r3, #0]
    snprintf(mqtt_msg_temp, 63, "{\"d\":{\"temp\":%d}}", temperature);
   17ba0:	4b06      	ldr	r3, [pc, #24]	; (17bbc <extint_detection_callback+0x38>)
   17ba2:	681b      	ldr	r3, [r3, #0]
   17ba4:	4a06      	ldr	r2, [pc, #24]	; (17bc0 <extint_detection_callback+0x3c>)
   17ba6:	4807      	ldr	r0, [pc, #28]	; (17bc4 <extint_detection_callback+0x40>)
   17ba8:	213f      	movs	r1, #63	; 0x3f
   17baa:	4c07      	ldr	r4, [pc, #28]	; (17bc8 <extint_detection_callback+0x44>)
   17bac:	47a0      	blx	r4
    isPressed = true;
   17bae:	4b07      	ldr	r3, [pc, #28]	; (17bcc <extint_detection_callback+0x48>)
   17bb0:	2201      	movs	r2, #1
   17bb2:	701a      	strb	r2, [r3, #0]
    //Published in the Wifi thread main loop
}
   17bb4:	46c0      	nop			; (mov r8, r8)
   17bb6:	46bd      	mov	sp, r7
   17bb8:	bdb0      	pop	{r4, r5, r7, pc}
   17bba:	46c0      	nop			; (mov r8, r8)
   17bbc:	200000b0 	.word	0x200000b0
   17bc0:	00037cf0 	.word	0x00037cf0
   17bc4:	20000070 	.word	0x20000070
   17bc8:	00035a89 	.word	0x00035a89
   17bcc:	20000cd0 	.word	0x20000cd0

00017bd0 <HTTP_DownloadFileInit>:
 * @brief	Routine to initialize HTTP download of the OTAU file
 * @note

*/
static void HTTP_DownloadFileInit(void)
{
   17bd0:	b580      	push	{r7, lr}
   17bd2:	af00      	add	r7, sp, #0
    if (mqtt_disconnect(&mqtt_inst, main_mqtt_broker)) {
   17bd4:	4a15      	ldr	r2, [pc, #84]	; (17c2c <HTTP_DownloadFileInit+0x5c>)
   17bd6:	4b16      	ldr	r3, [pc, #88]	; (17c30 <HTTP_DownloadFileInit+0x60>)
   17bd8:	0011      	movs	r1, r2
   17bda:	0018      	movs	r0, r3
   17bdc:	4b15      	ldr	r3, [pc, #84]	; (17c34 <HTTP_DownloadFileInit+0x64>)
   17bde:	4798      	blx	r3
   17be0:	1e03      	subs	r3, r0, #0
   17be2:	d008      	beq.n	17bf6 <HTTP_DownloadFileInit+0x26>
        LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   17be4:	4b14      	ldr	r3, [pc, #80]	; (17c38 <HTTP_DownloadFileInit+0x68>)
   17be6:	0019      	movs	r1, r3
   17be8:	2001      	movs	r0, #1
   17bea:	4b14      	ldr	r3, [pc, #80]	; (17c3c <HTTP_DownloadFileInit+0x6c>)
   17bec:	4798      	blx	r3
    }
    while ((mqtt_inst.isConnected)) {
   17bee:	e002      	b.n	17bf6 <HTTP_DownloadFileInit+0x26>
        m2m_wifi_handle_events(NULL);
   17bf0:	2000      	movs	r0, #0
   17bf2:	4b13      	ldr	r3, [pc, #76]	; (17c40 <HTTP_DownloadFileInit+0x70>)
   17bf4:	4798      	blx	r3
    while ((mqtt_inst.isConnected)) {
   17bf6:	4b0e      	ldr	r3, [pc, #56]	; (17c30 <HTTP_DownloadFileInit+0x60>)
   17bf8:	2234      	movs	r2, #52	; 0x34
   17bfa:	5c9b      	ldrb	r3, [r3, r2]
   17bfc:	2b00      	cmp	r3, #0
   17bfe:	d1f7      	bne.n	17bf0 <HTTP_DownloadFileInit+0x20>
    }
    socketDeinit();
   17c00:	4b10      	ldr	r3, [pc, #64]	; (17c44 <HTTP_DownloadFileInit+0x74>)
   17c02:	4798      	blx	r3
    // DOWNLOAD A FILE
    do_download_flag = true;
   17c04:	4b10      	ldr	r3, [pc, #64]	; (17c48 <HTTP_DownloadFileInit+0x78>)
   17c06:	2201      	movs	r2, #1
   17c08:	701a      	strb	r2, [r3, #0]
    /* Register socket callback function. */
    registerSocketCallback(socket_cb, resolve_cb);
   17c0a:	4a10      	ldr	r2, [pc, #64]	; (17c4c <HTTP_DownloadFileInit+0x7c>)
   17c0c:	4b10      	ldr	r3, [pc, #64]	; (17c50 <HTTP_DownloadFileInit+0x80>)
   17c0e:	0011      	movs	r1, r2
   17c10:	0018      	movs	r0, r3
   17c12:	4b10      	ldr	r3, [pc, #64]	; (17c54 <HTTP_DownloadFileInit+0x84>)
   17c14:	4798      	blx	r3
    /* Initialize socket module. */
    socketInit();
   17c16:	4b10      	ldr	r3, [pc, #64]	; (17c58 <HTTP_DownloadFileInit+0x88>)
   17c18:	4798      	blx	r3

    start_download();
   17c1a:	4b10      	ldr	r3, [pc, #64]	; (17c5c <HTTP_DownloadFileInit+0x8c>)
   17c1c:	4798      	blx	r3
    wifiStateMachine = WIFI_DOWNLOAD_HANDLE;
   17c1e:	4b10      	ldr	r3, [pc, #64]	; (17c60 <HTTP_DownloadFileInit+0x90>)
   17c20:	2203      	movs	r2, #3
   17c22:	701a      	strb	r2, [r3, #0]
}
   17c24:	46c0      	nop			; (mov r8, r8)
   17c26:	46bd      	mov	sp, r7
   17c28:	bd80      	pop	{r7, pc}
   17c2a:	46c0      	nop			; (mov r8, r8)
   17c2c:	000374ac 	.word	0x000374ac
   17c30:	20000898 	.word	0x20000898
   17c34:	0003078d 	.word	0x0003078d
   17c38:	000378bc 	.word	0x000378bc
   17c3c:	0001ecd1 	.word	0x0001ecd1
   17c40:	00022dc1 	.word	0x00022dc1
   17c44:	0002637d 	.word	0x0002637d
   17c48:	20000638 	.word	0x20000638
   17c4c:	000172e1 	.word	0x000172e1
   17c50:	000172ad 	.word	0x000172ad
   17c54:	000263c5 	.word	0x000263c5
   17c58:	0002632d 	.word	0x0002632d
   17c5c:	00016ed5 	.word	0x00016ed5
   17c60:	20000624 	.word	0x20000624

00017c64 <HTTP_DownloadFileTransaction>:
 * @brief	Routine to handle the HTTP transaction of downloading a file
 * @note

*/
static void HTTP_DownloadFileTransaction(void)
{
   17c64:	b590      	push	{r4, r7, lr}
   17c66:	b085      	sub	sp, #20
   17c68:	af00      	add	r7, sp, #0
    /* Connect to router. */
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   17c6a:	e009      	b.n	17c80 <HTTP_DownloadFileTransaction+0x1c>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   17c6c:	2000      	movs	r0, #0
   17c6e:	4b2a      	ldr	r3, [pc, #168]	; (17d18 <HTTP_DownloadFileTransaction+0xb4>)
   17c70:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   17c72:	4b2a      	ldr	r3, [pc, #168]	; (17d1c <HTTP_DownloadFileTransaction+0xb8>)
   17c74:	0018      	movs	r0, r3
   17c76:	4b2a      	ldr	r3, [pc, #168]	; (17d20 <HTTP_DownloadFileTransaction+0xbc>)
   17c78:	4798      	blx	r3
        vTaskDelay(5);
   17c7a:	2005      	movs	r0, #5
   17c7c:	4b29      	ldr	r3, [pc, #164]	; (17d24 <HTTP_DownloadFileTransaction+0xc0>)
   17c7e:	4798      	blx	r3
    while (!(is_state_set(COMPLETED) || is_state_set(CANCELED))) {
   17c80:	2010      	movs	r0, #16
   17c82:	4b29      	ldr	r3, [pc, #164]	; (17d28 <HTTP_DownloadFileTransaction+0xc4>)
   17c84:	4798      	blx	r3
   17c86:	0003      	movs	r3, r0
   17c88:	001a      	movs	r2, r3
   17c8a:	2301      	movs	r3, #1
   17c8c:	4053      	eors	r3, r2
   17c8e:	b2db      	uxtb	r3, r3
   17c90:	2b00      	cmp	r3, #0
   17c92:	d009      	beq.n	17ca8 <HTTP_DownloadFileTransaction+0x44>
   17c94:	2020      	movs	r0, #32
   17c96:	4b24      	ldr	r3, [pc, #144]	; (17d28 <HTTP_DownloadFileTransaction+0xc4>)
   17c98:	4798      	blx	r3
   17c9a:	0003      	movs	r3, r0
   17c9c:	001a      	movs	r2, r3
   17c9e:	2301      	movs	r3, #1
   17ca0:	4053      	eors	r3, r2
   17ca2:	b2db      	uxtb	r3, r3
   17ca4:	2b00      	cmp	r3, #0
   17ca6:	d1e1      	bne.n	17c6c <HTTP_DownloadFileTransaction+0x8>
    }

    // Disable socket for HTTP Transfer
    socketDeinit();
   17ca8:	4b20      	ldr	r3, [pc, #128]	; (17d2c <HTTP_DownloadFileTransaction+0xc8>)
   17caa:	4798      	blx	r3
    vTaskDelay(1000);
   17cac:	23fa      	movs	r3, #250	; 0xfa
   17cae:	009b      	lsls	r3, r3, #2
   17cb0:	0018      	movs	r0, r3
   17cb2:	4b1c      	ldr	r3, [pc, #112]	; (17d24 <HTTP_DownloadFileTransaction+0xc0>)
   17cb4:	4798      	blx	r3
    // CONNECT TO MQTT BROKER
    do_download_flag = false;
   17cb6:	4b1e      	ldr	r3, [pc, #120]	; (17d30 <HTTP_DownloadFileTransaction+0xcc>)
   17cb8:	2200      	movs	r2, #0
   17cba:	701a      	strb	r2, [r3, #0]

    // Write Flag
    char test_file_name[] = "0:FlagA.txt";
   17cbc:	003b      	movs	r3, r7
   17cbe:	4a1d      	ldr	r2, [pc, #116]	; (17d34 <HTTP_DownloadFileTransaction+0xd0>)
   17cc0:	ca13      	ldmia	r2!, {r0, r1, r4}
   17cc2:	c313      	stmia	r3!, {r0, r1, r4}
    test_file_name[0] = LUN_ID_SD_MMC_0_MEM + '0';
   17cc4:	003b      	movs	r3, r7
   17cc6:	2230      	movs	r2, #48	; 0x30
   17cc8:	701a      	strb	r2, [r3, #0]
    FRESULT res = f_open(&file_object, (char const *)test_file_name, FA_CREATE_ALWAYS | FA_WRITE);
   17cca:	230f      	movs	r3, #15
   17ccc:	18fc      	adds	r4, r7, r3
   17cce:	0039      	movs	r1, r7
   17cd0:	4b19      	ldr	r3, [pc, #100]	; (17d38 <HTTP_DownloadFileTransaction+0xd4>)
   17cd2:	220a      	movs	r2, #10
   17cd4:	0018      	movs	r0, r3
   17cd6:	4b19      	ldr	r3, [pc, #100]	; (17d3c <HTTP_DownloadFileTransaction+0xd8>)
   17cd8:	4798      	blx	r3
   17cda:	0003      	movs	r3, r0
   17cdc:	7023      	strb	r3, [r4, #0]

    if (res != FR_OK) {
   17cde:	230f      	movs	r3, #15
   17ce0:	18fb      	adds	r3, r7, r3
   17ce2:	781b      	ldrb	r3, [r3, #0]
   17ce4:	2b00      	cmp	r3, #0
   17ce6:	d008      	beq.n	17cfa <HTTP_DownloadFileTransaction+0x96>
        LogMessage(LOG_INFO_LVL, "[FAIL] res %d\r\n", res);
   17ce8:	230f      	movs	r3, #15
   17cea:	18fb      	adds	r3, r7, r3
   17cec:	781a      	ldrb	r2, [r3, #0]
   17cee:	4b14      	ldr	r3, [pc, #80]	; (17d40 <HTTP_DownloadFileTransaction+0xdc>)
   17cf0:	0019      	movs	r1, r3
   17cf2:	2000      	movs	r0, #0
   17cf4:	4b13      	ldr	r3, [pc, #76]	; (17d44 <HTTP_DownloadFileTransaction+0xe0>)
   17cf6:	4798      	blx	r3
   17cf8:	e003      	b.n	17d02 <HTTP_DownloadFileTransaction+0x9e>
    } else {
        SerialConsoleWriteString("FlagA.txt added!\r\n");
   17cfa:	4b13      	ldr	r3, [pc, #76]	; (17d48 <HTTP_DownloadFileTransaction+0xe4>)
   17cfc:	0018      	movs	r0, r3
   17cfe:	4b13      	ldr	r3, [pc, #76]	; (17d4c <HTTP_DownloadFileTransaction+0xe8>)
   17d00:	4798      	blx	r3
    }
	
	f_close(&file_object);
   17d02:	4b0d      	ldr	r3, [pc, #52]	; (17d38 <HTTP_DownloadFileTransaction+0xd4>)
   17d04:	0018      	movs	r0, r3
   17d06:	4b12      	ldr	r3, [pc, #72]	; (17d50 <HTTP_DownloadFileTransaction+0xec>)
   17d08:	4798      	blx	r3
    wifiStateMachine = WIFI_MQTT_INIT;
   17d0a:	4b12      	ldr	r3, [pc, #72]	; (17d54 <HTTP_DownloadFileTransaction+0xf0>)
   17d0c:	2200      	movs	r2, #0
   17d0e:	701a      	strb	r2, [r3, #0]
}
   17d10:	46c0      	nop			; (mov r8, r8)
   17d12:	46bd      	mov	sp, r7
   17d14:	b005      	add	sp, #20
   17d16:	bd90      	pop	{r4, r7, pc}
   17d18:	00022dc1 	.word	0x00022dc1
   17d1c:	20004900 	.word	0x20004900
   17d20:	000334b5 	.word	0x000334b5
   17d24:	0001cf91 	.word	0x0001cf91
   17d28:	00016bad 	.word	0x00016bad
   17d2c:	0002637d 	.word	0x0002637d
   17d30:	20000638 	.word	0x20000638
   17d34:	00037d28 	.word	0x00037d28
   17d38:	2000086c 	.word	0x2000086c
   17d3c:	0002e77d 	.word	0x0002e77d
   17d40:	00037d04 	.word	0x00037d04
   17d44:	0001ecd1 	.word	0x0001ecd1
   17d48:	00037d14 	.word	0x00037d14
   17d4c:	0001ebe5 	.word	0x0001ebe5
   17d50:	0002f17d 	.word	0x0002f17d
   17d54:	20000624 	.word	0x20000624

00017d58 <MQTT_InitRoutine>:
 * @brief	Routine to initialize the MQTT socket to prepare for MQTT transactions
 * @note

*/
static void MQTT_InitRoutine(void)
{
   17d58:	b580      	push	{r7, lr}
   17d5a:	af00      	add	r7, sp, #0
    socketDeinit();
   17d5c:	4b18      	ldr	r3, [pc, #96]	; (17dc0 <MQTT_InitRoutine+0x68>)
   17d5e:	4798      	blx	r3
    configure_mqtt();
   17d60:	4b18      	ldr	r3, [pc, #96]	; (17dc4 <MQTT_InitRoutine+0x6c>)
   17d62:	4798      	blx	r3
    // Re-enable socket for MQTT Transfer
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   17d64:	4a18      	ldr	r2, [pc, #96]	; (17dc8 <MQTT_InitRoutine+0x70>)
   17d66:	4b19      	ldr	r3, [pc, #100]	; (17dcc <MQTT_InitRoutine+0x74>)
   17d68:	0011      	movs	r1, r2
   17d6a:	0018      	movs	r0, r3
   17d6c:	4b18      	ldr	r3, [pc, #96]	; (17dd0 <MQTT_InitRoutine+0x78>)
   17d6e:	4798      	blx	r3
    socketInit();
   17d70:	4b18      	ldr	r3, [pc, #96]	; (17dd4 <MQTT_InitRoutine+0x7c>)
   17d72:	4798      	blx	r3
    /* Connect to router. */
    if (!(mqtt_inst.isConnected)) {
   17d74:	4b18      	ldr	r3, [pc, #96]	; (17dd8 <MQTT_InitRoutine+0x80>)
   17d76:	2234      	movs	r2, #52	; 0x34
   17d78:	5c9b      	ldrb	r3, [r3, r2]
   17d7a:	2201      	movs	r2, #1
   17d7c:	4053      	eors	r3, r2
   17d7e:	b2db      	uxtb	r3, r3
   17d80:	2b00      	cmp	r3, #0
   17d82:	d00c      	beq.n	17d9e <MQTT_InitRoutine+0x46>
        if (mqtt_connect(&mqtt_inst, main_mqtt_broker)) {
   17d84:	4a15      	ldr	r2, [pc, #84]	; (17ddc <MQTT_InitRoutine+0x84>)
   17d86:	4b14      	ldr	r3, [pc, #80]	; (17dd8 <MQTT_InitRoutine+0x80>)
   17d88:	0011      	movs	r1, r2
   17d8a:	0018      	movs	r0, r3
   17d8c:	4b14      	ldr	r3, [pc, #80]	; (17de0 <MQTT_InitRoutine+0x88>)
   17d8e:	4798      	blx	r3
   17d90:	1e03      	subs	r3, r0, #0
   17d92:	d004      	beq.n	17d9e <MQTT_InitRoutine+0x46>
            LogMessage(LOG_DEBUG_LVL, "Error connecting to MQTT Broker!\r\n");
   17d94:	4b13      	ldr	r3, [pc, #76]	; (17de4 <MQTT_InitRoutine+0x8c>)
   17d96:	0019      	movs	r1, r3
   17d98:	2001      	movs	r0, #1
   17d9a:	4b13      	ldr	r3, [pc, #76]	; (17de8 <MQTT_InitRoutine+0x90>)
   17d9c:	4798      	blx	r3
        }
    }

    if (mqtt_inst.isConnected) {
   17d9e:	4b0e      	ldr	r3, [pc, #56]	; (17dd8 <MQTT_InitRoutine+0x80>)
   17da0:	2234      	movs	r2, #52	; 0x34
   17da2:	5c9b      	ldrb	r3, [r3, r2]
   17da4:	2b00      	cmp	r3, #0
   17da6:	d004      	beq.n	17db2 <MQTT_InitRoutine+0x5a>
        LogMessage(LOG_DEBUG_LVL, "Connected to MQTT Broker!\r\n");
   17da8:	4b10      	ldr	r3, [pc, #64]	; (17dec <MQTT_InitRoutine+0x94>)
   17daa:	0019      	movs	r1, r3
   17dac:	2001      	movs	r0, #1
   17dae:	4b0e      	ldr	r3, [pc, #56]	; (17de8 <MQTT_InitRoutine+0x90>)
   17db0:	4798      	blx	r3
    }
    wifiStateMachine = WIFI_MQTT_HANDLE;
   17db2:	4b0f      	ldr	r3, [pc, #60]	; (17df0 <MQTT_InitRoutine+0x98>)
   17db4:	2201      	movs	r2, #1
   17db6:	701a      	strb	r2, [r3, #0]
}
   17db8:	46c0      	nop			; (mov r8, r8)
   17dba:	46bd      	mov	sp, r7
   17dbc:	bd80      	pop	{r7, pc}
   17dbe:	46c0      	nop			; (mov r8, r8)
   17dc0:	0002637d 	.word	0x0002637d
   17dc4:	00017a61 	.word	0x00017a61
   17dc8:	0001766d 	.word	0x0001766d
   17dcc:	00017639 	.word	0x00017639
   17dd0:	000263c5 	.word	0x000263c5
   17dd4:	0002632d 	.word	0x0002632d
   17dd8:	20000898 	.word	0x20000898
   17ddc:	000374ac 	.word	0x000374ac
   17de0:	00030659 	.word	0x00030659
   17de4:	000378bc 	.word	0x000378bc
   17de8:	0001ecd1 	.word	0x0001ecd1
   17dec:	00037d34 	.word	0x00037d34
   17df0:	20000624 	.word	0x20000624

00017df4 <MQTT_HandleTransactions>:
 * @brief	Routine to handle MQTT transactions
 * @note

*/
static void MQTT_HandleTransactions(void)
{
   17df4:	b580      	push	{r7, lr}
   17df6:	af00      	add	r7, sp, #0
    /* Handle pending events from network controller. */
    m2m_wifi_handle_events(NULL);
   17df8:	2000      	movs	r0, #0
   17dfa:	4b0b      	ldr	r3, [pc, #44]	; (17e28 <MQTT_HandleTransactions+0x34>)
   17dfc:	4798      	blx	r3
    sw_timer_task(&swt_module_inst);
   17dfe:	4b0b      	ldr	r3, [pc, #44]	; (17e2c <MQTT_HandleTransactions+0x38>)
   17e00:	0018      	movs	r0, r3
   17e02:	4b0b      	ldr	r3, [pc, #44]	; (17e30 <MQTT_HandleTransactions+0x3c>)
   17e04:	4798      	blx	r3

    // Check if data has to be sent!
    MQTT_HandleGameMessages();
   17e06:	4b0b      	ldr	r3, [pc, #44]	; (17e34 <MQTT_HandleTransactions+0x40>)
   17e08:	4798      	blx	r3
    MQTT_HandleImuMessages();
   17e0a:	4b0b      	ldr	r3, [pc, #44]	; (17e38 <MQTT_HandleTransactions+0x44>)
   17e0c:	4798      	blx	r3

    // Handle MQTT messages
    if (mqtt_inst.isConnected) mqtt_yield(&mqtt_inst, 100);
   17e0e:	4b0b      	ldr	r3, [pc, #44]	; (17e3c <MQTT_HandleTransactions+0x48>)
   17e10:	2234      	movs	r2, #52	; 0x34
   17e12:	5c9b      	ldrb	r3, [r3, r2]
   17e14:	2b00      	cmp	r3, #0
   17e16:	d004      	beq.n	17e22 <MQTT_HandleTransactions+0x2e>
   17e18:	4b08      	ldr	r3, [pc, #32]	; (17e3c <MQTT_HandleTransactions+0x48>)
   17e1a:	2164      	movs	r1, #100	; 0x64
   17e1c:	0018      	movs	r0, r3
   17e1e:	4b08      	ldr	r3, [pc, #32]	; (17e40 <MQTT_HandleTransactions+0x4c>)
   17e20:	4798      	blx	r3
}
   17e22:	46c0      	nop			; (mov r8, r8)
   17e24:	46bd      	mov	sp, r7
   17e26:	bd80      	pop	{r7, pc}
   17e28:	00022dc1 	.word	0x00022dc1
   17e2c:	20004900 	.word	0x20004900
   17e30:	000334b5 	.word	0x000334b5
   17e34:	00017ed1 	.word	0x00017ed1
   17e38:	00017e45 	.word	0x00017e45
   17e3c:	20000898 	.word	0x20000898
   17e40:	00030889 	.word	0x00030889

00017e44 <MQTT_HandleImuMessages>:

static void MQTT_HandleImuMessages(void)
{
   17e44:	b590      	push	{r4, r7, lr}
   17e46:	b085      	sub	sp, #20
   17e48:	af02      	add	r7, sp, #8
    struct ImuDataPacket imuDataVar;
    if (pdPASS == xQueueReceive(xQueueImuBuffer, &imuDataVar, 0)) {
   17e4a:	4b18      	ldr	r3, [pc, #96]	; (17eac <MQTT_HandleImuMessages+0x68>)
   17e4c:	681b      	ldr	r3, [r3, #0]
   17e4e:	0039      	movs	r1, r7
   17e50:	2200      	movs	r2, #0
   17e52:	0018      	movs	r0, r3
   17e54:	4b16      	ldr	r3, [pc, #88]	; (17eb0 <MQTT_HandleImuMessages+0x6c>)
   17e56:	4798      	blx	r3
   17e58:	0003      	movs	r3, r0
   17e5a:	2b01      	cmp	r3, #1
   17e5c:	d121      	bne.n	17ea2 <MQTT_HandleImuMessages+0x5e>
        snprintf(mqtt_msg, 63, "{\"imux\":%d, \"imuy\": %d, \"imuz\": %d}", imuDataVar.xmg, imuDataVar.ymg, imuDataVar.zmg);
   17e5e:	003b      	movs	r3, r7
   17e60:	2200      	movs	r2, #0
   17e62:	5e9b      	ldrsh	r3, [r3, r2]
   17e64:	001c      	movs	r4, r3
   17e66:	003b      	movs	r3, r7
   17e68:	2202      	movs	r2, #2
   17e6a:	5e9b      	ldrsh	r3, [r3, r2]
   17e6c:	0019      	movs	r1, r3
   17e6e:	003b      	movs	r3, r7
   17e70:	2204      	movs	r2, #4
   17e72:	5e9b      	ldrsh	r3, [r3, r2]
   17e74:	4a0f      	ldr	r2, [pc, #60]	; (17eb4 <MQTT_HandleImuMessages+0x70>)
   17e76:	4810      	ldr	r0, [pc, #64]	; (17eb8 <MQTT_HandleImuMessages+0x74>)
   17e78:	9301      	str	r3, [sp, #4]
   17e7a:	9100      	str	r1, [sp, #0]
   17e7c:	0023      	movs	r3, r4
   17e7e:	213f      	movs	r1, #63	; 0x3f
   17e80:	4c0e      	ldr	r4, [pc, #56]	; (17ebc <MQTT_HandleImuMessages+0x78>)
   17e82:	47a0      	blx	r4
        mqtt_publish(&mqtt_inst, IMU_TOPIC, mqtt_msg, strlen(mqtt_msg), 1, 0);
   17e84:	4b0c      	ldr	r3, [pc, #48]	; (17eb8 <MQTT_HandleImuMessages+0x74>)
   17e86:	0018      	movs	r0, r3
   17e88:	4b0d      	ldr	r3, [pc, #52]	; (17ec0 <MQTT_HandleImuMessages+0x7c>)
   17e8a:	4798      	blx	r3
   17e8c:	0004      	movs	r4, r0
   17e8e:	4a0a      	ldr	r2, [pc, #40]	; (17eb8 <MQTT_HandleImuMessages+0x74>)
   17e90:	490c      	ldr	r1, [pc, #48]	; (17ec4 <MQTT_HandleImuMessages+0x80>)
   17e92:	480d      	ldr	r0, [pc, #52]	; (17ec8 <MQTT_HandleImuMessages+0x84>)
   17e94:	2300      	movs	r3, #0
   17e96:	9301      	str	r3, [sp, #4]
   17e98:	2301      	movs	r3, #1
   17e9a:	9300      	str	r3, [sp, #0]
   17e9c:	0023      	movs	r3, r4
   17e9e:	4c0b      	ldr	r4, [pc, #44]	; (17ecc <MQTT_HandleImuMessages+0x88>)
   17ea0:	47a0      	blx	r4
    }
}
   17ea2:	46c0      	nop			; (mov r8, r8)
   17ea4:	46bd      	mov	sp, r7
   17ea6:	b003      	add	sp, #12
   17ea8:	bd90      	pop	{r4, r7, pc}
   17eaa:	46c0      	nop			; (mov r8, r8)
   17eac:	20000630 	.word	0x20000630
   17eb0:	0001bde5 	.word	0x0001bde5
   17eb4:	00037d50 	.word	0x00037d50
   17eb8:	20000030 	.word	0x20000030
   17ebc:	00035a89 	.word	0x00035a89
   17ec0:	00035be7 	.word	0x00035be7
   17ec4:	00037c18 	.word	0x00037c18
   17ec8:	20000898 	.word	0x20000898
   17ecc:	000307d5 	.word	0x000307d5

00017ed0 <MQTT_HandleGameMessages>:

static void MQTT_HandleGameMessages(void)
{
   17ed0:	b590      	push	{r4, r7, lr}
   17ed2:	b08b      	sub	sp, #44	; 0x2c
   17ed4:	af02      	add	r7, sp, #8
    struct GameDataPacket gamePacket;
    if (pdPASS == xQueueReceive(xQueueGameBuffer, &gamePacket, 0)) {
   17ed6:	4b39      	ldr	r3, [pc, #228]	; (17fbc <MQTT_HandleGameMessages+0xec>)
   17ed8:	681b      	ldr	r3, [r3, #0]
   17eda:	2208      	movs	r2, #8
   17edc:	18b9      	adds	r1, r7, r2
   17ede:	2200      	movs	r2, #0
   17ee0:	0018      	movs	r0, r3
   17ee2:	4b37      	ldr	r3, [pc, #220]	; (17fc0 <MQTT_HandleGameMessages+0xf0>)
   17ee4:	4798      	blx	r3
   17ee6:	0003      	movs	r3, r0
   17ee8:	2b01      	cmp	r3, #1
   17eea:	d163      	bne.n	17fb4 <MQTT_HandleGameMessages+0xe4>
        snprintf(mqtt_msg, 63, "{\"game\":[");
   17eec:	4b35      	ldr	r3, [pc, #212]	; (17fc4 <MQTT_HandleGameMessages+0xf4>)
   17eee:	4a36      	ldr	r2, [pc, #216]	; (17fc8 <MQTT_HandleGameMessages+0xf8>)
   17ef0:	ca03      	ldmia	r2!, {r0, r1}
   17ef2:	c303      	stmia	r3!, {r0, r1}
   17ef4:	8812      	ldrh	r2, [r2, #0]
   17ef6:	801a      	strh	r2, [r3, #0]
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   17ef8:	2300      	movs	r3, #0
   17efa:	61fb      	str	r3, [r7, #28]
   17efc:	e02d      	b.n	17f5a <MQTT_HandleGameMessages+0x8a>
            char numGame[5];
            if (gamePacket.game[iter] != 0xFF) {
   17efe:	2308      	movs	r3, #8
   17f00:	18fa      	adds	r2, r7, r3
   17f02:	69fb      	ldr	r3, [r7, #28]
   17f04:	18d3      	adds	r3, r2, r3
   17f06:	781b      	ldrb	r3, [r3, #0]
   17f08:	2bff      	cmp	r3, #255	; 0xff
   17f0a:	d02a      	beq.n	17f62 <MQTT_HandleGameMessages+0x92>
                snprintf(numGame, 3, "%d", gamePacket.game[iter]);
   17f0c:	2308      	movs	r3, #8
   17f0e:	18fa      	adds	r2, r7, r3
   17f10:	69fb      	ldr	r3, [r7, #28]
   17f12:	18d3      	adds	r3, r2, r3
   17f14:	781b      	ldrb	r3, [r3, #0]
   17f16:	4a2d      	ldr	r2, [pc, #180]	; (17fcc <MQTT_HandleGameMessages+0xfc>)
   17f18:	0038      	movs	r0, r7
   17f1a:	2103      	movs	r1, #3
   17f1c:	4c2c      	ldr	r4, [pc, #176]	; (17fd0 <MQTT_HandleGameMessages+0x100>)
   17f1e:	47a0      	blx	r4
                strcat(mqtt_msg, numGame);
   17f20:	003a      	movs	r2, r7
   17f22:	4b28      	ldr	r3, [pc, #160]	; (17fc4 <MQTT_HandleGameMessages+0xf4>)
   17f24:	0011      	movs	r1, r2
   17f26:	0018      	movs	r0, r3
   17f28:	4b2a      	ldr	r3, [pc, #168]	; (17fd4 <MQTT_HandleGameMessages+0x104>)
   17f2a:	4798      	blx	r3
                if (gamePacket.game[iter + 1] != 0xFF && iter + 1 < GAME_SIZE) {
   17f2c:	69fb      	ldr	r3, [r7, #28]
   17f2e:	3301      	adds	r3, #1
   17f30:	2208      	movs	r2, #8
   17f32:	18ba      	adds	r2, r7, r2
   17f34:	5cd3      	ldrb	r3, [r2, r3]
   17f36:	2bff      	cmp	r3, #255	; 0xff
   17f38:	d00c      	beq.n	17f54 <MQTT_HandleGameMessages+0x84>
   17f3a:	69fb      	ldr	r3, [r7, #28]
   17f3c:	3301      	adds	r3, #1
   17f3e:	2b13      	cmp	r3, #19
   17f40:	dc08      	bgt.n	17f54 <MQTT_HandleGameMessages+0x84>
                    snprintf(numGame, 5, ",");
   17f42:	003b      	movs	r3, r7
   17f44:	222c      	movs	r2, #44	; 0x2c
   17f46:	801a      	strh	r2, [r3, #0]
                    strcat(mqtt_msg, numGame);
   17f48:	003a      	movs	r2, r7
   17f4a:	4b1e      	ldr	r3, [pc, #120]	; (17fc4 <MQTT_HandleGameMessages+0xf4>)
   17f4c:	0011      	movs	r1, r2
   17f4e:	0018      	movs	r0, r3
   17f50:	4b20      	ldr	r3, [pc, #128]	; (17fd4 <MQTT_HandleGameMessages+0x104>)
   17f52:	4798      	blx	r3
        for (int iter = 0; iter < GAME_SIZE; iter++) {
   17f54:	69fb      	ldr	r3, [r7, #28]
   17f56:	3301      	adds	r3, #1
   17f58:	61fb      	str	r3, [r7, #28]
   17f5a:	69fb      	ldr	r3, [r7, #28]
   17f5c:	2b13      	cmp	r3, #19
   17f5e:	ddce      	ble.n	17efe <MQTT_HandleGameMessages+0x2e>
   17f60:	e000      	b.n	17f64 <MQTT_HandleGameMessages+0x94>
                }
            } else {
                break;
   17f62:	46c0      	nop			; (mov r8, r8)
            }
        }
        strcat(mqtt_msg, "]}");
   17f64:	4b17      	ldr	r3, [pc, #92]	; (17fc4 <MQTT_HandleGameMessages+0xf4>)
   17f66:	0018      	movs	r0, r3
   17f68:	4b1b      	ldr	r3, [pc, #108]	; (17fd8 <MQTT_HandleGameMessages+0x108>)
   17f6a:	4798      	blx	r3
   17f6c:	0003      	movs	r3, r0
   17f6e:	001a      	movs	r2, r3
   17f70:	4b14      	ldr	r3, [pc, #80]	; (17fc4 <MQTT_HandleGameMessages+0xf4>)
   17f72:	18d2      	adds	r2, r2, r3
   17f74:	4b19      	ldr	r3, [pc, #100]	; (17fdc <MQTT_HandleGameMessages+0x10c>)
   17f76:	0010      	movs	r0, r2
   17f78:	0019      	movs	r1, r3
   17f7a:	2303      	movs	r3, #3
   17f7c:	001a      	movs	r2, r3
   17f7e:	4b18      	ldr	r3, [pc, #96]	; (17fe0 <MQTT_HandleGameMessages+0x110>)
   17f80:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, mqtt_msg);
   17f82:	4b10      	ldr	r3, [pc, #64]	; (17fc4 <MQTT_HandleGameMessages+0xf4>)
   17f84:	0019      	movs	r1, r3
   17f86:	2001      	movs	r0, #1
   17f88:	4b16      	ldr	r3, [pc, #88]	; (17fe4 <MQTT_HandleGameMessages+0x114>)
   17f8a:	4798      	blx	r3
        LogMessage(LOG_DEBUG_LVL, "\r\n");
   17f8c:	4b16      	ldr	r3, [pc, #88]	; (17fe8 <MQTT_HandleGameMessages+0x118>)
   17f8e:	0019      	movs	r1, r3
   17f90:	2001      	movs	r0, #1
   17f92:	4b14      	ldr	r3, [pc, #80]	; (17fe4 <MQTT_HandleGameMessages+0x114>)
   17f94:	4798      	blx	r3
        mqtt_publish(&mqtt_inst, GAME_TOPIC_OUT, mqtt_msg, strlen(mqtt_msg), 1, 0);
   17f96:	4b0b      	ldr	r3, [pc, #44]	; (17fc4 <MQTT_HandleGameMessages+0xf4>)
   17f98:	0018      	movs	r0, r3
   17f9a:	4b0f      	ldr	r3, [pc, #60]	; (17fd8 <MQTT_HandleGameMessages+0x108>)
   17f9c:	4798      	blx	r3
   17f9e:	0004      	movs	r4, r0
   17fa0:	4a08      	ldr	r2, [pc, #32]	; (17fc4 <MQTT_HandleGameMessages+0xf4>)
   17fa2:	4912      	ldr	r1, [pc, #72]	; (17fec <MQTT_HandleGameMessages+0x11c>)
   17fa4:	4812      	ldr	r0, [pc, #72]	; (17ff0 <MQTT_HandleGameMessages+0x120>)
   17fa6:	2300      	movs	r3, #0
   17fa8:	9301      	str	r3, [sp, #4]
   17faa:	2301      	movs	r3, #1
   17fac:	9300      	str	r3, [sp, #0]
   17fae:	0023      	movs	r3, r4
   17fb0:	4c10      	ldr	r4, [pc, #64]	; (17ff4 <MQTT_HandleGameMessages+0x124>)
   17fb2:	47a0      	blx	r4
    }
}
   17fb4:	46c0      	nop			; (mov r8, r8)
   17fb6:	46bd      	mov	sp, r7
   17fb8:	b009      	add	sp, #36	; 0x24
   17fba:	bd90      	pop	{r4, r7, pc}
   17fbc:	2000062c 	.word	0x2000062c
   17fc0:	0001bde5 	.word	0x0001bde5
   17fc4:	20000030 	.word	0x20000030
   17fc8:	00037a58 	.word	0x00037a58
   17fcc:	00037d74 	.word	0x00037d74
   17fd0:	00035a89 	.word	0x00035a89
   17fd4:	00035b6d 	.word	0x00035b6d
   17fd8:	00035be7 	.word	0x00035be7
   17fdc:	00037d78 	.word	0x00037d78
   17fe0:	000357f9 	.word	0x000357f9
   17fe4:	0001ecd1 	.word	0x0001ecd1
   17fe8:	00037d7c 	.word	0x00037d7c
   17fec:	00037d80 	.word	0x00037d80
   17ff0:	20000898 	.word	0x20000898
   17ff4:	000307d5 	.word	0x000307d5

00017ff8 <vWifiTask>:
 * Application entry point.
 *
 * \return program return value.
 */
void vWifiTask(void *pvParameters)
{
   17ff8:	b590      	push	{r4, r7, lr}
   17ffa:	b08d      	sub	sp, #52	; 0x34
   17ffc:	af02      	add	r7, sp, #8
   17ffe:	6078      	str	r0, [r7, #4]
    tstrWifiInitParam param;
    int8_t ret;
    vTaskDelay(100);
   18000:	2064      	movs	r0, #100	; 0x64
   18002:	4b79      	ldr	r3, [pc, #484]	; (181e8 <vWifiTask+0x1f0>)
   18004:	4798      	blx	r3
    init_state();
   18006:	4b79      	ldr	r3, [pc, #484]	; (181ec <vWifiTask+0x1f4>)
   18008:	4798      	blx	r3
    // Create buffers to send data
    xQueueWifiState = xQueueCreate(5, sizeof(uint32_t));
   1800a:	2200      	movs	r2, #0
   1800c:	2104      	movs	r1, #4
   1800e:	2005      	movs	r0, #5
   18010:	4b77      	ldr	r3, [pc, #476]	; (181f0 <vWifiTask+0x1f8>)
   18012:	4798      	blx	r3
   18014:	0002      	movs	r2, r0
   18016:	4b77      	ldr	r3, [pc, #476]	; (181f4 <vWifiTask+0x1fc>)
   18018:	601a      	str	r2, [r3, #0]
    xQueueImuBuffer = xQueueCreate(5, sizeof(struct ImuDataPacket));
   1801a:	2200      	movs	r2, #0
   1801c:	2106      	movs	r1, #6
   1801e:	2005      	movs	r0, #5
   18020:	4b73      	ldr	r3, [pc, #460]	; (181f0 <vWifiTask+0x1f8>)
   18022:	4798      	blx	r3
   18024:	0002      	movs	r2, r0
   18026:	4b74      	ldr	r3, [pc, #464]	; (181f8 <vWifiTask+0x200>)
   18028:	601a      	str	r2, [r3, #0]
    xQueueGameBuffer = xQueueCreate(2, sizeof(struct GameDataPacket));
   1802a:	2200      	movs	r2, #0
   1802c:	2114      	movs	r1, #20
   1802e:	2002      	movs	r0, #2
   18030:	4b6f      	ldr	r3, [pc, #444]	; (181f0 <vWifiTask+0x1f8>)
   18032:	4798      	blx	r3
   18034:	0002      	movs	r2, r0
   18036:	4b71      	ldr	r3, [pc, #452]	; (181fc <vWifiTask+0x204>)
   18038:	601a      	str	r2, [r3, #0]
    xQueueDistanceBuffer = xQueueCreate(5, sizeof(uint16_t));
   1803a:	2200      	movs	r2, #0
   1803c:	2102      	movs	r1, #2
   1803e:	2005      	movs	r0, #5
   18040:	4b6b      	ldr	r3, [pc, #428]	; (181f0 <vWifiTask+0x1f8>)
   18042:	4798      	blx	r3
   18044:	0002      	movs	r2, r0
   18046:	4b6e      	ldr	r3, [pc, #440]	; (18200 <vWifiTask+0x208>)
   18048:	601a      	str	r2, [r3, #0]

    if (xQueueWifiState == NULL || xQueueImuBuffer == NULL || xQueueGameBuffer == NULL || xQueueDistanceBuffer == NULL) {
   1804a:	4b6a      	ldr	r3, [pc, #424]	; (181f4 <vWifiTask+0x1fc>)
   1804c:	681b      	ldr	r3, [r3, #0]
   1804e:	2b00      	cmp	r3, #0
   18050:	d00b      	beq.n	1806a <vWifiTask+0x72>
   18052:	4b69      	ldr	r3, [pc, #420]	; (181f8 <vWifiTask+0x200>)
   18054:	681b      	ldr	r3, [r3, #0]
   18056:	2b00      	cmp	r3, #0
   18058:	d007      	beq.n	1806a <vWifiTask+0x72>
   1805a:	4b68      	ldr	r3, [pc, #416]	; (181fc <vWifiTask+0x204>)
   1805c:	681b      	ldr	r3, [r3, #0]
   1805e:	2b00      	cmp	r3, #0
   18060:	d003      	beq.n	1806a <vWifiTask+0x72>
   18062:	4b67      	ldr	r3, [pc, #412]	; (18200 <vWifiTask+0x208>)
   18064:	681b      	ldr	r3, [r3, #0]
   18066:	2b00      	cmp	r3, #0
   18068:	d103      	bne.n	18072 <vWifiTask+0x7a>
        SerialConsoleWriteString("ERROR Initializing Wifi Data queues!\r\n");
   1806a:	4b66      	ldr	r3, [pc, #408]	; (18204 <vWifiTask+0x20c>)
   1806c:	0018      	movs	r0, r3
   1806e:	4b66      	ldr	r3, [pc, #408]	; (18208 <vWifiTask+0x210>)
   18070:	4798      	blx	r3
    }

    SerialConsoleWriteString("ESE516 - Wifi Init Code\r\n");
   18072:	4b66      	ldr	r3, [pc, #408]	; (1820c <vWifiTask+0x214>)
   18074:	0018      	movs	r0, r3
   18076:	4b64      	ldr	r3, [pc, #400]	; (18208 <vWifiTask+0x210>)
   18078:	4798      	blx	r3
    /* Initialize the Timer. */
    configure_timer();
   1807a:	4b65      	ldr	r3, [pc, #404]	; (18210 <vWifiTask+0x218>)
   1807c:	4798      	blx	r3

    /* Initialize the HTTP client service. */
    configure_http_client();
   1807e:	4b65      	ldr	r3, [pc, #404]	; (18214 <vWifiTask+0x21c>)
   18080:	4798      	blx	r3

    /* Initialize the MQTT service. */
    configure_mqtt();
   18082:	4b65      	ldr	r3, [pc, #404]	; (18218 <vWifiTask+0x220>)
   18084:	4798      	blx	r3

    /* Initialize SD/MMC storage. */
    init_storage();
   18086:	4b65      	ldr	r3, [pc, #404]	; (1821c <vWifiTask+0x224>)
   18088:	4798      	blx	r3

    /*Initialize BUTTON 0 as an external interrupt*/
    configure_extint_channel();
   1808a:	4b65      	ldr	r3, [pc, #404]	; (18220 <vWifiTask+0x228>)
   1808c:	4798      	blx	r3
    configure_extint_callbacks();
   1808e:	4b65      	ldr	r3, [pc, #404]	; (18224 <vWifiTask+0x22c>)
   18090:	4798      	blx	r3

    /* Initialize Wi-Fi parameters structure. */
    memset((uint8_t *)&param, 0, sizeof(tstrWifiInitParam));
   18092:	230c      	movs	r3, #12
   18094:	18fb      	adds	r3, r7, r3
   18096:	2218      	movs	r2, #24
   18098:	2100      	movs	r1, #0
   1809a:	0018      	movs	r0, r3
   1809c:	4b62      	ldr	r3, [pc, #392]	; (18228 <vWifiTask+0x230>)
   1809e:	4798      	blx	r3

    nm_bsp_init();
   180a0:	4b62      	ldr	r3, [pc, #392]	; (1822c <vWifiTask+0x234>)
   180a2:	4798      	blx	r3

    /* Initialize Wi-Fi driver with data and status callbacks. */
    param.pfAppWifiCb = wifi_cb;
   180a4:	230c      	movs	r3, #12
   180a6:	18fb      	adds	r3, r7, r3
   180a8:	4a61      	ldr	r2, [pc, #388]	; (18230 <vWifiTask+0x238>)
   180aa:	601a      	str	r2, [r3, #0]
    ret = m2m_wifi_init(&param);
   180ac:	2327      	movs	r3, #39	; 0x27
   180ae:	18fc      	adds	r4, r7, r3
   180b0:	230c      	movs	r3, #12
   180b2:	18fb      	adds	r3, r7, r3
   180b4:	0018      	movs	r0, r3
   180b6:	4b5f      	ldr	r3, [pc, #380]	; (18234 <vWifiTask+0x23c>)
   180b8:	4798      	blx	r3
   180ba:	0003      	movs	r3, r0
   180bc:	7023      	strb	r3, [r4, #0]
    if (M2M_SUCCESS != ret) {
   180be:	2327      	movs	r3, #39	; 0x27
   180c0:	18fb      	adds	r3, r7, r3
   180c2:	781b      	ldrb	r3, [r3, #0]
   180c4:	b25b      	sxtb	r3, r3
   180c6:	2b00      	cmp	r3, #0
   180c8:	d009      	beq.n	180de <vWifiTask+0xe6>
        LogMessage(LOG_DEBUG_LVL, "main: m2m_wifi_init call error! (res %d)\r\n", ret);
   180ca:	2327      	movs	r3, #39	; 0x27
   180cc:	18fb      	adds	r3, r7, r3
   180ce:	2200      	movs	r2, #0
   180d0:	569a      	ldrsb	r2, [r3, r2]
   180d2:	4b59      	ldr	r3, [pc, #356]	; (18238 <vWifiTask+0x240>)
   180d4:	0019      	movs	r1, r3
   180d6:	2001      	movs	r0, #1
   180d8:	4b58      	ldr	r3, [pc, #352]	; (1823c <vWifiTask+0x244>)
   180da:	4798      	blx	r3
        while (1) {
   180dc:	e7fe      	b.n	180dc <vWifiTask+0xe4>
        }
    }

    LogMessage(LOG_DEBUG_LVL, "main: connecting to WiFi AP %s...\r\n", (char *)MAIN_WLAN_SSID);
   180de:	4a58      	ldr	r2, [pc, #352]	; (18240 <vWifiTask+0x248>)
   180e0:	4b58      	ldr	r3, [pc, #352]	; (18244 <vWifiTask+0x24c>)
   180e2:	0019      	movs	r1, r3
   180e4:	2001      	movs	r0, #1
   180e6:	4b55      	ldr	r3, [pc, #340]	; (1823c <vWifiTask+0x244>)
   180e8:	4798      	blx	r3

    // Re-enable socket for MQTT Transfer
    socketInit();
   180ea:	4b57      	ldr	r3, [pc, #348]	; (18248 <vWifiTask+0x250>)
   180ec:	4798      	blx	r3
    registerSocketCallback(socket_event_handler, socket_resolve_handler);
   180ee:	4a57      	ldr	r2, [pc, #348]	; (1824c <vWifiTask+0x254>)
   180f0:	4b57      	ldr	r3, [pc, #348]	; (18250 <vWifiTask+0x258>)
   180f2:	0011      	movs	r1, r2
   180f4:	0018      	movs	r0, r3
   180f6:	4b57      	ldr	r3, [pc, #348]	; (18254 <vWifiTask+0x25c>)
   180f8:	4798      	blx	r3

    m2m_wifi_connect((char *)MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID), MAIN_WLAN_AUTH, (char *)MAIN_WLAN_PSK, M2M_WIFI_CH_ALL);
   180fa:	4a57      	ldr	r2, [pc, #348]	; (18258 <vWifiTask+0x260>)
   180fc:	4850      	ldr	r0, [pc, #320]	; (18240 <vWifiTask+0x248>)
   180fe:	23ff      	movs	r3, #255	; 0xff
   18100:	9300      	str	r3, [sp, #0]
   18102:	0013      	movs	r3, r2
   18104:	2202      	movs	r2, #2
   18106:	2106      	movs	r1, #6
   18108:	4c54      	ldr	r4, [pc, #336]	; (1825c <vWifiTask+0x264>)
   1810a:	47a0      	blx	r4

    while (!(is_state_set(WIFI_CONNECTED))) {
   1810c:	e006      	b.n	1811c <vWifiTask+0x124>
        /* Handle pending events from network controller. */
        m2m_wifi_handle_events(NULL);
   1810e:	2000      	movs	r0, #0
   18110:	4b53      	ldr	r3, [pc, #332]	; (18260 <vWifiTask+0x268>)
   18112:	4798      	blx	r3
        /* Checks the timer timeout. */
        sw_timer_task(&swt_module_inst);
   18114:	4b53      	ldr	r3, [pc, #332]	; (18264 <vWifiTask+0x26c>)
   18116:	0018      	movs	r0, r3
   18118:	4b53      	ldr	r3, [pc, #332]	; (18268 <vWifiTask+0x270>)
   1811a:	4798      	blx	r3
    while (!(is_state_set(WIFI_CONNECTED))) {
   1811c:	2002      	movs	r0, #2
   1811e:	4b53      	ldr	r3, [pc, #332]	; (1826c <vWifiTask+0x274>)
   18120:	4798      	blx	r3
   18122:	0003      	movs	r3, r0
   18124:	001a      	movs	r2, r3
   18126:	2301      	movs	r3, #1
   18128:	4053      	eors	r3, r2
   1812a:	b2db      	uxtb	r3, r3
   1812c:	2b00      	cmp	r3, #0
   1812e:	d1ee      	bne.n	1810e <vWifiTask+0x116>
    }

    vTaskDelay(1000);
   18130:	23fa      	movs	r3, #250	; 0xfa
   18132:	009b      	lsls	r3, r3, #2
   18134:	0018      	movs	r0, r3
   18136:	4b2c      	ldr	r3, [pc, #176]	; (181e8 <vWifiTask+0x1f0>)
   18138:	4798      	blx	r3

    wifiStateMachine = WIFI_MQTT_HANDLE;
   1813a:	4b4d      	ldr	r3, [pc, #308]	; (18270 <vWifiTask+0x278>)
   1813c:	2201      	movs	r2, #1
   1813e:	701a      	strb	r2, [r3, #0]
    while (1) {
        switch (wifiStateMachine) {
   18140:	4b4b      	ldr	r3, [pc, #300]	; (18270 <vWifiTask+0x278>)
   18142:	781b      	ldrb	r3, [r3, #0]
   18144:	b25b      	sxtb	r3, r3
   18146:	2b01      	cmp	r3, #1
   18148:	d00b      	beq.n	18162 <vWifiTask+0x16a>
   1814a:	dc02      	bgt.n	18152 <vWifiTask+0x15a>
   1814c:	2b00      	cmp	r3, #0
   1814e:	d005      	beq.n	1815c <vWifiTask+0x164>
   18150:	e010      	b.n	18174 <vWifiTask+0x17c>
   18152:	2b02      	cmp	r3, #2
   18154:	d008      	beq.n	18168 <vWifiTask+0x170>
   18156:	2b03      	cmp	r3, #3
   18158:	d009      	beq.n	1816e <vWifiTask+0x176>
   1815a:	e00b      	b.n	18174 <vWifiTask+0x17c>
            case (WIFI_MQTT_INIT): {
                MQTT_InitRoutine();
   1815c:	4b45      	ldr	r3, [pc, #276]	; (18274 <vWifiTask+0x27c>)
   1815e:	4798      	blx	r3

                break;
   18160:	e00c      	b.n	1817c <vWifiTask+0x184>
            }

            case (WIFI_MQTT_HANDLE): {
                MQTT_HandleTransactions();
   18162:	4b45      	ldr	r3, [pc, #276]	; (18278 <vWifiTask+0x280>)
   18164:	4798      	blx	r3
                break;
   18166:	e009      	b.n	1817c <vWifiTask+0x184>
            }

            case (WIFI_DOWNLOAD_INIT): {
                HTTP_DownloadFileInit();
   18168:	4b44      	ldr	r3, [pc, #272]	; (1827c <vWifiTask+0x284>)
   1816a:	4798      	blx	r3
                break;
   1816c:	e006      	b.n	1817c <vWifiTask+0x184>
            }

            case (WIFI_DOWNLOAD_HANDLE): {
                HTTP_DownloadFileTransaction();
   1816e:	4b44      	ldr	r3, [pc, #272]	; (18280 <vWifiTask+0x288>)
   18170:	4798      	blx	r3
                break;
   18172:	e003      	b.n	1817c <vWifiTask+0x184>
            }

            default:
                wifiStateMachine = WIFI_MQTT_INIT;
   18174:	4b3e      	ldr	r3, [pc, #248]	; (18270 <vWifiTask+0x278>)
   18176:	2200      	movs	r2, #0
   18178:	701a      	strb	r2, [r3, #0]
                break;
   1817a:	46c0      	nop			; (mov r8, r8)
        }
        // Check if a new state was called
        uint8_t DataToReceive = 0;
   1817c:	230b      	movs	r3, #11
   1817e:	18fb      	adds	r3, r7, r3
   18180:	2200      	movs	r2, #0
   18182:	701a      	strb	r2, [r3, #0]
        if (pdPASS == xQueueReceive(xQueueWifiState, &DataToReceive, 0)) {
   18184:	4b1b      	ldr	r3, [pc, #108]	; (181f4 <vWifiTask+0x1fc>)
   18186:	681b      	ldr	r3, [r3, #0]
   18188:	220b      	movs	r2, #11
   1818a:	18b9      	adds	r1, r7, r2
   1818c:	2200      	movs	r2, #0
   1818e:	0018      	movs	r0, r3
   18190:	4b3c      	ldr	r3, [pc, #240]	; (18284 <vWifiTask+0x28c>)
   18192:	4798      	blx	r3
   18194:	0003      	movs	r3, r0
   18196:	2b01      	cmp	r3, #1
   18198:	d105      	bne.n	181a6 <vWifiTask+0x1ae>
            wifiStateMachine = DataToReceive;  // Update new state
   1819a:	230b      	movs	r3, #11
   1819c:	18fb      	adds	r3, r7, r3
   1819e:	781b      	ldrb	r3, [r3, #0]
   181a0:	b25a      	sxtb	r2, r3
   181a2:	4b33      	ldr	r3, [pc, #204]	; (18270 <vWifiTask+0x278>)
   181a4:	701a      	strb	r2, [r3, #0]
        }

        //Check if we need to publish something. In this example, we publish the "temperature" when the button was pressed.
        if(isPressed)
   181a6:	4b38      	ldr	r3, [pc, #224]	; (18288 <vWifiTask+0x290>)
   181a8:	781b      	ldrb	r3, [r3, #0]
   181aa:	b2db      	uxtb	r3, r3
   181ac:	2b00      	cmp	r3, #0
   181ae:	d017      	beq.n	181e0 <vWifiTask+0x1e8>
        {
            mqtt_publish(&mqtt_inst, TEMPERATURE_TOPIC, mqtt_msg_temp, strlen(mqtt_msg_temp), 1, 0);
   181b0:	4b36      	ldr	r3, [pc, #216]	; (1828c <vWifiTask+0x294>)
   181b2:	0018      	movs	r0, r3
   181b4:	4b36      	ldr	r3, [pc, #216]	; (18290 <vWifiTask+0x298>)
   181b6:	4798      	blx	r3
   181b8:	0004      	movs	r4, r0
   181ba:	4a34      	ldr	r2, [pc, #208]	; (1828c <vWifiTask+0x294>)
   181bc:	4935      	ldr	r1, [pc, #212]	; (18294 <vWifiTask+0x29c>)
   181be:	4836      	ldr	r0, [pc, #216]	; (18298 <vWifiTask+0x2a0>)
   181c0:	2300      	movs	r3, #0
   181c2:	9301      	str	r3, [sp, #4]
   181c4:	2301      	movs	r3, #1
   181c6:	9300      	str	r3, [sp, #0]
   181c8:	0023      	movs	r3, r4
   181ca:	4c34      	ldr	r4, [pc, #208]	; (1829c <vWifiTask+0x2a4>)
   181cc:	47a0      	blx	r4
            LogMessage(LOG_DEBUG_LVL, "MQTT send %s\r\n", mqtt_msg_temp);
   181ce:	4a2f      	ldr	r2, [pc, #188]	; (1828c <vWifiTask+0x294>)
   181d0:	4b33      	ldr	r3, [pc, #204]	; (182a0 <vWifiTask+0x2a8>)
   181d2:	0019      	movs	r1, r3
   181d4:	2001      	movs	r0, #1
   181d6:	4b19      	ldr	r3, [pc, #100]	; (1823c <vWifiTask+0x244>)
   181d8:	4798      	blx	r3
            isPressed = false;
   181da:	4b2b      	ldr	r3, [pc, #172]	; (18288 <vWifiTask+0x290>)
   181dc:	2200      	movs	r2, #0
   181de:	701a      	strb	r2, [r3, #0]

        }

        vTaskDelay(100);
   181e0:	2064      	movs	r0, #100	; 0x64
   181e2:	4b01      	ldr	r3, [pc, #4]	; (181e8 <vWifiTask+0x1f0>)
   181e4:	4798      	blx	r3
    while (1) {
   181e6:	e7ab      	b.n	18140 <vWifiTask+0x148>
   181e8:	0001cf91 	.word	0x0001cf91
   181ec:	00016b3d 	.word	0x00016b3d
   181f0:	0001b285 	.word	0x0001b285
   181f4:	20000628 	.word	0x20000628
   181f8:	20000630 	.word	0x20000630
   181fc:	2000062c 	.word	0x2000062c
   18200:	20000634 	.word	0x20000634
   18204:	00037d94 	.word	0x00037d94
   18208:	0001ebe5 	.word	0x0001ebe5
   1820c:	00037dbc 	.word	0x00037dbc
   18210:	00017579 	.word	0x00017579
   18214:	000175b5 	.word	0x000175b5
   18218:	00017a61 	.word	0x00017a61
   1821c:	00017495 	.word	0x00017495
   18220:	00017b19 	.word	0x00017b19
   18224:	00017b59 	.word	0x00017b59
   18228:	0003582f 	.word	0x0003582f
   1822c:	000210f5 	.word	0x000210f5
   18230:	00017341 	.word	0x00017341
   18234:	00022bcd 	.word	0x00022bcd
   18238:	00037dd8 	.word	0x00037dd8
   1823c:	0001ecd1 	.word	0x0001ecd1
   18240:	0003788c 	.word	0x0003788c
   18244:	00037e04 	.word	0x00037e04
   18248:	0002632d 	.word	0x0002632d
   1824c:	0001766d 	.word	0x0001766d
   18250:	00017639 	.word	0x00017639
   18254:	000263c5 	.word	0x000263c5
   18258:	00037880 	.word	0x00037880
   1825c:	00022ddd 	.word	0x00022ddd
   18260:	00022dc1 	.word	0x00022dc1
   18264:	20004900 	.word	0x20004900
   18268:	000334b5 	.word	0x000334b5
   1826c:	00016bad 	.word	0x00016bad
   18270:	20000624 	.word	0x20000624
   18274:	00017d59 	.word	0x00017d59
   18278:	00017df5 	.word	0x00017df5
   1827c:	00017bd1 	.word	0x00017bd1
   18280:	00017c65 	.word	0x00017c65
   18284:	0001bde5 	.word	0x0001bde5
   18288:	20000cd0 	.word	0x20000cd0
   1828c:	20000070 	.word	0x20000070
   18290:	00035be7 	.word	0x00035be7
   18294:	00037e28 	.word	0x00037e28
   18298:	20000898 	.word	0x20000898
   1829c:	000307d5 	.word	0x000307d5
   182a0:	00037e44 	.word	0x00037e44

000182a4 <WifiHandlerSetState>:
    }
    return;
}

void WifiHandlerSetState(uint8_t state)
{
   182a4:	b590      	push	{r4, r7, lr}
   182a6:	b083      	sub	sp, #12
   182a8:	af00      	add	r7, sp, #0
   182aa:	0002      	movs	r2, r0
   182ac:	1dfb      	adds	r3, r7, #7
   182ae:	701a      	strb	r2, [r3, #0]
    if (state <= WIFI_DOWNLOAD_HANDLE) {
   182b0:	1dfb      	adds	r3, r7, #7
   182b2:	781b      	ldrb	r3, [r3, #0]
   182b4:	2b03      	cmp	r3, #3
   182b6:	d806      	bhi.n	182c6 <WifiHandlerSetState+0x22>
        xQueueSend(xQueueWifiState, &state, (TickType_t)10);
   182b8:	4b05      	ldr	r3, [pc, #20]	; (182d0 <WifiHandlerSetState+0x2c>)
   182ba:	6818      	ldr	r0, [r3, #0]
   182bc:	1df9      	adds	r1, r7, #7
   182be:	2300      	movs	r3, #0
   182c0:	220a      	movs	r2, #10
   182c2:	4c04      	ldr	r4, [pc, #16]	; (182d4 <WifiHandlerSetState+0x30>)
   182c4:	47a0      	blx	r4
    }
}
   182c6:	46c0      	nop			; (mov r8, r8)
   182c8:	46bd      	mov	sp, r7
   182ca:	b003      	add	sp, #12
   182cc:	bd90      	pop	{r4, r7, pc}
   182ce:	46c0      	nop			; (mov r8, r8)
   182d0:	20000628 	.word	0x20000628
   182d4:	0001b52d 	.word	0x0001b52d

000182d8 <WifiAddImuDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddImuDataToQueue(struct ImuDataPacket *imuPacket)
{
   182d8:	b590      	push	{r4, r7, lr}
   182da:	b085      	sub	sp, #20
   182dc:	af00      	add	r7, sp, #0
   182de:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueImuBuffer, imuPacket, (TickType_t)10);
   182e0:	4b06      	ldr	r3, [pc, #24]	; (182fc <WifiAddImuDataToQueue+0x24>)
   182e2:	6818      	ldr	r0, [r3, #0]
   182e4:	6879      	ldr	r1, [r7, #4]
   182e6:	2300      	movs	r3, #0
   182e8:	220a      	movs	r2, #10
   182ea:	4c05      	ldr	r4, [pc, #20]	; (18300 <WifiAddImuDataToQueue+0x28>)
   182ec:	47a0      	blx	r4
   182ee:	0003      	movs	r3, r0
   182f0:	60fb      	str	r3, [r7, #12]
    return error;
   182f2:	68fb      	ldr	r3, [r7, #12]
}
   182f4:	0018      	movs	r0, r3
   182f6:	46bd      	mov	sp, r7
   182f8:	b005      	add	sp, #20
   182fa:	bd90      	pop	{r4, r7, pc}
   182fc:	20000630 	.word	0x20000630
   18300:	0001b52d 	.word	0x0001b52d

00018304 <WifiAddDistanceDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddDistanceDataToQueue(uint16_t *distance)
{
   18304:	b590      	push	{r4, r7, lr}
   18306:	b085      	sub	sp, #20
   18308:	af00      	add	r7, sp, #0
   1830a:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueDistanceBuffer, distance, (TickType_t)10);
   1830c:	4b06      	ldr	r3, [pc, #24]	; (18328 <WifiAddDistanceDataToQueue+0x24>)
   1830e:	6818      	ldr	r0, [r3, #0]
   18310:	6879      	ldr	r1, [r7, #4]
   18312:	2300      	movs	r3, #0
   18314:	220a      	movs	r2, #10
   18316:	4c05      	ldr	r4, [pc, #20]	; (1832c <WifiAddDistanceDataToQueue+0x28>)
   18318:	47a0      	blx	r4
   1831a:	0003      	movs	r3, r0
   1831c:	60fb      	str	r3, [r7, #12]
    return error;
   1831e:	68fb      	ldr	r3, [r7, #12]
}
   18320:	0018      	movs	r0, r3
   18322:	46bd      	mov	sp, r7
   18324:	b005      	add	sp, #20
   18326:	bd90      	pop	{r4, r7, pc}
   18328:	20000634 	.word	0x20000634
   1832c:	0001b52d 	.word	0x0001b52d

00018330 <WifiAddGameDataToQueue>:
 * @return		Returns pdTrue if data can be added to queue, pdFalse if queue is full
 * @note

*/
int WifiAddGameDataToQueue(struct GameDataPacket *game)
{
   18330:	b590      	push	{r4, r7, lr}
   18332:	b085      	sub	sp, #20
   18334:	af00      	add	r7, sp, #0
   18336:	6078      	str	r0, [r7, #4]
    int error = xQueueSend(xQueueGameBuffer, game, (TickType_t)10);
   18338:	4b06      	ldr	r3, [pc, #24]	; (18354 <WifiAddGameDataToQueue+0x24>)
   1833a:	6818      	ldr	r0, [r3, #0]
   1833c:	6879      	ldr	r1, [r7, #4]
   1833e:	2300      	movs	r3, #0
   18340:	220a      	movs	r2, #10
   18342:	4c05      	ldr	r4, [pc, #20]	; (18358 <WifiAddGameDataToQueue+0x28>)
   18344:	47a0      	blx	r4
   18346:	0003      	movs	r3, r0
   18348:	60fb      	str	r3, [r7, #12]
    return error;
   1834a:	68fb      	ldr	r3, [r7, #12]
}
   1834c:	0018      	movs	r0, r3
   1834e:	46bd      	mov	sp, r7
   18350:	b005      	add	sp, #20
   18352:	bd90      	pop	{r4, r7, pc}
   18354:	2000062c 	.word	0x2000062c
   18358:	0001b52d 	.word	0x0001b52d

0001835c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
   1835c:	b580      	push	{r7, lr}
   1835e:	b082      	sub	sp, #8
   18360:	af00      	add	r7, sp, #0
   18362:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
   18364:	687b      	ldr	r3, [r7, #4]
   18366:	2200      	movs	r2, #0
   18368:	701a      	strb	r2, [r3, #0]
}
   1836a:	46c0      	nop			; (mov r8, r8)
   1836c:	46bd      	mov	sp, r7
   1836e:	b002      	add	sp, #8
   18370:	bd80      	pop	{r7, pc}
	...

00018374 <system_apb_clock_set_mask>:
{
   18374:	b580      	push	{r7, lr}
   18376:	b082      	sub	sp, #8
   18378:	af00      	add	r7, sp, #0
   1837a:	0002      	movs	r2, r0
   1837c:	6039      	str	r1, [r7, #0]
   1837e:	1dfb      	adds	r3, r7, #7
   18380:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   18382:	1dfb      	adds	r3, r7, #7
   18384:	781b      	ldrb	r3, [r3, #0]
   18386:	2b01      	cmp	r3, #1
   18388:	d00a      	beq.n	183a0 <system_apb_clock_set_mask+0x2c>
   1838a:	2b02      	cmp	r3, #2
   1838c:	d00f      	beq.n	183ae <system_apb_clock_set_mask+0x3a>
   1838e:	2b00      	cmp	r3, #0
   18390:	d114      	bne.n	183bc <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   18392:	4b0e      	ldr	r3, [pc, #56]	; (183cc <system_apb_clock_set_mask+0x58>)
   18394:	4a0d      	ldr	r2, [pc, #52]	; (183cc <system_apb_clock_set_mask+0x58>)
   18396:	6991      	ldr	r1, [r2, #24]
   18398:	683a      	ldr	r2, [r7, #0]
   1839a:	430a      	orrs	r2, r1
   1839c:	619a      	str	r2, [r3, #24]
			break;
   1839e:	e00f      	b.n	183c0 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   183a0:	4b0a      	ldr	r3, [pc, #40]	; (183cc <system_apb_clock_set_mask+0x58>)
   183a2:	4a0a      	ldr	r2, [pc, #40]	; (183cc <system_apb_clock_set_mask+0x58>)
   183a4:	69d1      	ldr	r1, [r2, #28]
   183a6:	683a      	ldr	r2, [r7, #0]
   183a8:	430a      	orrs	r2, r1
   183aa:	61da      	str	r2, [r3, #28]
			break;
   183ac:	e008      	b.n	183c0 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   183ae:	4b07      	ldr	r3, [pc, #28]	; (183cc <system_apb_clock_set_mask+0x58>)
   183b0:	4a06      	ldr	r2, [pc, #24]	; (183cc <system_apb_clock_set_mask+0x58>)
   183b2:	6a11      	ldr	r1, [r2, #32]
   183b4:	683a      	ldr	r2, [r7, #0]
   183b6:	430a      	orrs	r2, r1
   183b8:	621a      	str	r2, [r3, #32]
			break;
   183ba:	e001      	b.n	183c0 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   183bc:	2317      	movs	r3, #23
   183be:	e000      	b.n	183c2 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   183c0:	2300      	movs	r3, #0
}
   183c2:	0018      	movs	r0, r3
   183c4:	46bd      	mov	sp, r7
   183c6:	b002      	add	sp, #8
   183c8:	bd80      	pop	{r7, pc}
   183ca:	46c0      	nop			; (mov r8, r8)
   183cc:	40000400 	.word	0x40000400

000183d0 <system_pinmux_get_config_defaults>:
{
   183d0:	b580      	push	{r7, lr}
   183d2:	b082      	sub	sp, #8
   183d4:	af00      	add	r7, sp, #0
   183d6:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   183d8:	687b      	ldr	r3, [r7, #4]
   183da:	2280      	movs	r2, #128	; 0x80
   183dc:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   183de:	687b      	ldr	r3, [r7, #4]
   183e0:	2200      	movs	r2, #0
   183e2:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   183e4:	687b      	ldr	r3, [r7, #4]
   183e6:	2201      	movs	r2, #1
   183e8:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   183ea:	687b      	ldr	r3, [r7, #4]
   183ec:	2200      	movs	r2, #0
   183ee:	70da      	strb	r2, [r3, #3]
}
   183f0:	46c0      	nop			; (mov r8, r8)
   183f2:	46bd      	mov	sp, r7
   183f4:	b002      	add	sp, #8
   183f6:	bd80      	pop	{r7, pc}

000183f8 <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
   183f8:	b580      	push	{r7, lr}
   183fa:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   183fc:	4b05      	ldr	r3, [pc, #20]	; (18414 <system_is_debugger_present+0x1c>)
   183fe:	789b      	ldrb	r3, [r3, #2]
   18400:	b2db      	uxtb	r3, r3
   18402:	001a      	movs	r2, r3
   18404:	2302      	movs	r3, #2
   18406:	4013      	ands	r3, r2
   18408:	1e5a      	subs	r2, r3, #1
   1840a:	4193      	sbcs	r3, r2
   1840c:	b2db      	uxtb	r3, r3
}
   1840e:	0018      	movs	r0, r3
   18410:	46bd      	mov	sp, r7
   18412:	bd80      	pop	{r7, pc}
   18414:	41002000 	.word	0x41002000

00018418 <system_interrupt_enter_critical_section>:
{
   18418:	b580      	push	{r7, lr}
   1841a:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   1841c:	4b02      	ldr	r3, [pc, #8]	; (18428 <system_interrupt_enter_critical_section+0x10>)
   1841e:	4798      	blx	r3
}
   18420:	46c0      	nop			; (mov r8, r8)
   18422:	46bd      	mov	sp, r7
   18424:	bd80      	pop	{r7, pc}
   18426:	46c0      	nop			; (mov r8, r8)
   18428:	00027025 	.word	0x00027025

0001842c <system_interrupt_leave_critical_section>:
{
   1842c:	b580      	push	{r7, lr}
   1842e:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   18430:	4b02      	ldr	r3, [pc, #8]	; (1843c <system_interrupt_leave_critical_section+0x10>)
   18432:	4798      	blx	r3
}
   18434:	46c0      	nop			; (mov r8, r8)
   18436:	46bd      	mov	sp, r7
   18438:	bd80      	pop	{r7, pc}
   1843a:	46c0      	nop			; (mov r8, r8)
   1843c:	00027079 	.word	0x00027079

00018440 <system_interrupt_disable>:
{
   18440:	b580      	push	{r7, lr}
   18442:	b082      	sub	sp, #8
   18444:	af00      	add	r7, sp, #0
   18446:	0002      	movs	r2, r0
   18448:	1dfb      	adds	r3, r7, #7
   1844a:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1844c:	4a07      	ldr	r2, [pc, #28]	; (1846c <system_interrupt_disable+0x2c>)
   1844e:	1dfb      	adds	r3, r7, #7
   18450:	781b      	ldrb	r3, [r3, #0]
   18452:	0019      	movs	r1, r3
   18454:	231f      	movs	r3, #31
   18456:	400b      	ands	r3, r1
   18458:	2101      	movs	r1, #1
   1845a:	4099      	lsls	r1, r3
   1845c:	000b      	movs	r3, r1
   1845e:	0019      	movs	r1, r3
   18460:	2380      	movs	r3, #128	; 0x80
   18462:	50d1      	str	r1, [r2, r3]
}
   18464:	46c0      	nop			; (mov r8, r8)
   18466:	46bd      	mov	sp, r7
   18468:	b002      	add	sp, #8
   1846a:	bd80      	pop	{r7, pc}
   1846c:	e000e100 	.word	0xe000e100

00018470 <i2c_master_is_syncing>:
{
   18470:	b580      	push	{r7, lr}
   18472:	b084      	sub	sp, #16
   18474:	af00      	add	r7, sp, #0
   18476:	6078      	str	r0, [r7, #4]
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
   18478:	687b      	ldr	r3, [r7, #4]
   1847a:	681b      	ldr	r3, [r3, #0]
   1847c:	60fb      	str	r3, [r7, #12]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
   1847e:	68fb      	ldr	r3, [r7, #12]
   18480:	69db      	ldr	r3, [r3, #28]
   18482:	2207      	movs	r2, #7
   18484:	4013      	ands	r3, r2
   18486:	1e5a      	subs	r2, r3, #1
   18488:	4193      	sbcs	r3, r2
   1848a:	b2db      	uxtb	r3, r3
}
   1848c:	0018      	movs	r0, r3
   1848e:	46bd      	mov	sp, r7
   18490:	b004      	add	sp, #16
   18492:	bd80      	pop	{r7, pc}

00018494 <_i2c_master_wait_for_sync>:
{
   18494:	b580      	push	{r7, lr}
   18496:	b082      	sub	sp, #8
   18498:	af00      	add	r7, sp, #0
   1849a:	6078      	str	r0, [r7, #4]
	while (i2c_master_is_syncing(module)) {
   1849c:	46c0      	nop			; (mov r8, r8)
   1849e:	687b      	ldr	r3, [r7, #4]
   184a0:	0018      	movs	r0, r3
   184a2:	4b04      	ldr	r3, [pc, #16]	; (184b4 <_i2c_master_wait_for_sync+0x20>)
   184a4:	4798      	blx	r3
   184a6:	1e03      	subs	r3, r0, #0
   184a8:	d1f9      	bne.n	1849e <_i2c_master_wait_for_sync+0xa>
}
   184aa:	46c0      	nop			; (mov r8, r8)
   184ac:	46bd      	mov	sp, r7
   184ae:	b002      	add	sp, #8
   184b0:	bd80      	pop	{r7, pc}
   184b2:	46c0      	nop			; (mov r8, r8)
   184b4:	00018471 	.word	0x00018471

000184b8 <i2c_master_disable>:
 *
 * \param[in]  module  Pointer to the software module struct
 */
static inline void i2c_master_disable(
		const struct i2c_master_module *const module)
{
   184b8:	b580      	push	{r7, lr}
   184ba:	b084      	sub	sp, #16
   184bc:	af00      	add	r7, sp, #0
   184be:	6078      	str	r0, [r7, #4]
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   184c0:	687b      	ldr	r3, [r7, #4]
   184c2:	681b      	ldr	r3, [r3, #0]
   184c4:	60fb      	str	r3, [r7, #12]

#if I2C_MASTER_CALLBACK_MODE == true
		/* Disable module interrupts */
		system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   184c6:	687b      	ldr	r3, [r7, #4]
   184c8:	681b      	ldr	r3, [r3, #0]
   184ca:	0018      	movs	r0, r3
   184cc:	4b0d      	ldr	r3, [pc, #52]	; (18504 <i2c_master_disable+0x4c>)
   184ce:	4798      	blx	r3
   184d0:	0003      	movs	r3, r0
   184d2:	0018      	movs	r0, r3
   184d4:	4b0c      	ldr	r3, [pc, #48]	; (18508 <i2c_master_disable+0x50>)
   184d6:	4798      	blx	r3
#endif

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);
   184d8:	687b      	ldr	r3, [r7, #4]
   184da:	0018      	movs	r0, r3
   184dc:	4b0b      	ldr	r3, [pc, #44]	; (1850c <i2c_master_disable+0x54>)
   184de:	4798      	blx	r3

	/* Disbale interrupt */
	i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MASK;
   184e0:	68fb      	ldr	r3, [r7, #12]
   184e2:	2283      	movs	r2, #131	; 0x83
   184e4:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MASK;
   184e6:	68fb      	ldr	r3, [r7, #12]
   184e8:	2283      	movs	r2, #131	; 0x83
   184ea:	761a      	strb	r2, [r3, #24]

	/* Disable module */
	i2c_module->CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
   184ec:	68fb      	ldr	r3, [r7, #12]
   184ee:	681b      	ldr	r3, [r3, #0]
   184f0:	2202      	movs	r2, #2
   184f2:	4393      	bics	r3, r2
   184f4:	001a      	movs	r2, r3
   184f6:	68fb      	ldr	r3, [r7, #12]
   184f8:	601a      	str	r2, [r3, #0]

}
   184fa:	46c0      	nop			; (mov r8, r8)
   184fc:	46bd      	mov	sp, r7
   184fe:	b004      	add	sp, #16
   18500:	bd80      	pop	{r7, pc}
   18502:	46c0      	nop			; (mov r8, r8)
   18504:	000284f9 	.word	0x000284f9
   18508:	00018441 	.word	0x00018441
   1850c:	00018495 	.word	0x00018495

00018510 <_i2c_master_set_config>:
 *                                          with set GCLK frequency
 */
static enum status_code _i2c_master_set_config(
		struct i2c_master_module *const module,
		const struct i2c_master_config *const config)
{
   18510:	b5f0      	push	{r4, r5, r6, r7, lr}
   18512:	b097      	sub	sp, #92	; 0x5c
   18514:	af00      	add	r7, sp, #0
   18516:	6178      	str	r0, [r7, #20]
   18518:	6139      	str	r1, [r7, #16]
	Assert(module->hw);
	Assert(config);

	/* Temporary variables. */
	uint32_t tmp_ctrla;
	int32_t tmp_baud = 0;
   1851a:	2300      	movs	r3, #0
   1851c:	63fb      	str	r3, [r7, #60]	; 0x3c
	int32_t tmp_baud_hs = 0;
   1851e:	2300      	movs	r3, #0
   18520:	653b      	str	r3, [r7, #80]	; 0x50
	int32_t tmp_baudlow_hs = 0;
   18522:	2300      	movs	r3, #0
   18524:	64fb      	str	r3, [r7, #76]	; 0x4c
	enum status_code tmp_status_code = STATUS_OK;
   18526:	233b      	movs	r3, #59	; 0x3b
   18528:	2210      	movs	r2, #16
   1852a:	4694      	mov	ip, r2
   1852c:	44bc      	add	ip, r7
   1852e:	4463      	add	r3, ip
   18530:	2200      	movs	r2, #0
   18532:	701a      	strb	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   18534:	697b      	ldr	r3, [r7, #20]
   18536:	681b      	ldr	r3, [r3, #0]
   18538:	63bb      	str	r3, [r7, #56]	; 0x38
	Sercom *const sercom_hw = module->hw;
   1853a:	697b      	ldr	r3, [r7, #20]
   1853c:	681b      	ldr	r3, [r3, #0]
   1853e:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
   18540:	2323      	movs	r3, #35	; 0x23
   18542:	2210      	movs	r2, #16
   18544:	18ba      	adds	r2, r7, r2
   18546:	18d4      	adds	r4, r2, r3
   18548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1854a:	0018      	movs	r0, r3
   1854c:	4bc0      	ldr	r3, [pc, #768]	; (18850 <_i2c_master_set_config+0x340>)
   1854e:	4798      	blx	r3
   18550:	0003      	movs	r3, r0
   18552:	7023      	strb	r3, [r4, #0]

	/* Pin configuration */
	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   18554:	230c      	movs	r3, #12
   18556:	2210      	movs	r2, #16
   18558:	4694      	mov	ip, r2
   1855a:	44bc      	add	ip, r7
   1855c:	4463      	add	r3, ip
   1855e:	0018      	movs	r0, r3
   18560:	4bbc      	ldr	r3, [pc, #752]	; (18854 <_i2c_master_set_config+0x344>)
   18562:	4798      	blx	r3

	uint32_t pad0 = config->pinmux_pad0;
   18564:	693b      	ldr	r3, [r7, #16]
   18566:	69db      	ldr	r3, [r3, #28]
   18568:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t pad1 = config->pinmux_pad1;
   1856a:	693b      	ldr	r3, [r7, #16]
   1856c:	6a1b      	ldr	r3, [r3, #32]
   1856e:	643b      	str	r3, [r7, #64]	; 0x40

	/* SERCOM PAD0 - SDA */
	if (pad0 == PINMUX_DEFAULT) {
   18570:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   18572:	2b00      	cmp	r3, #0
   18574:	d106      	bne.n	18584 <_i2c_master_set_config+0x74>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
   18576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   18578:	2100      	movs	r1, #0
   1857a:	0018      	movs	r0, r3
   1857c:	4bb6      	ldr	r3, [pc, #728]	; (18858 <_i2c_master_set_config+0x348>)
   1857e:	4798      	blx	r3
   18580:	0003      	movs	r3, r0
   18582:	647b      	str	r3, [r7, #68]	; 0x44
	}
	pin_conf.mux_position = pad0 & 0xFFFF;
   18584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   18586:	b2da      	uxtb	r2, r3
   18588:	230c      	movs	r3, #12
   1858a:	2110      	movs	r1, #16
   1858c:	468c      	mov	ip, r1
   1858e:	44bc      	add	ip, r7
   18590:	4463      	add	r3, ip
   18592:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   18594:	230c      	movs	r3, #12
   18596:	2210      	movs	r2, #16
   18598:	4694      	mov	ip, r2
   1859a:	44bc      	add	ip, r7
   1859c:	4463      	add	r3, ip
   1859e:	2202      	movs	r2, #2
   185a0:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
   185a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   185a4:	0c1b      	lsrs	r3, r3, #16
   185a6:	b2db      	uxtb	r3, r3
   185a8:	220c      	movs	r2, #12
   185aa:	2110      	movs	r1, #16
   185ac:	468c      	mov	ip, r1
   185ae:	44bc      	add	ip, r7
   185b0:	4462      	add	r2, ip
   185b2:	0011      	movs	r1, r2
   185b4:	0018      	movs	r0, r3
   185b6:	4ba9      	ldr	r3, [pc, #676]	; (1885c <_i2c_master_set_config+0x34c>)
   185b8:	4798      	blx	r3

	/* SERCOM PAD1 - SCL */
	if (pad1 == PINMUX_DEFAULT) {
   185ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   185bc:	2b00      	cmp	r3, #0
   185be:	d106      	bne.n	185ce <_i2c_master_set_config+0xbe>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
   185c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   185c2:	2101      	movs	r1, #1
   185c4:	0018      	movs	r0, r3
   185c6:	4ba4      	ldr	r3, [pc, #656]	; (18858 <_i2c_master_set_config+0x348>)
   185c8:	4798      	blx	r3
   185ca:	0003      	movs	r3, r0
   185cc:	643b      	str	r3, [r7, #64]	; 0x40
	}
	pin_conf.mux_position = pad1 & 0xFFFF;
   185ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   185d0:	b2da      	uxtb	r2, r3
   185d2:	230c      	movs	r3, #12
   185d4:	2110      	movs	r1, #16
   185d6:	468c      	mov	ip, r1
   185d8:	44bc      	add	ip, r7
   185da:	4463      	add	r3, ip
   185dc:	701a      	strb	r2, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
   185de:	230c      	movs	r3, #12
   185e0:	2210      	movs	r2, #16
   185e2:	4694      	mov	ip, r2
   185e4:	44bc      	add	ip, r7
   185e6:	4463      	add	r3, ip
   185e8:	2202      	movs	r2, #2
   185ea:	705a      	strb	r2, [r3, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
   185ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   185ee:	0c1b      	lsrs	r3, r3, #16
   185f0:	b2db      	uxtb	r3, r3
   185f2:	220c      	movs	r2, #12
   185f4:	2110      	movs	r1, #16
   185f6:	468c      	mov	ip, r1
   185f8:	44bc      	add	ip, r7
   185fa:	4462      	add	r2, ip
   185fc:	0011      	movs	r1, r2
   185fe:	0018      	movs	r0, r3
   18600:	4b96      	ldr	r3, [pc, #600]	; (1885c <_i2c_master_set_config+0x34c>)
   18602:	4798      	blx	r3

	/* Save timeout on unknown bus state in software module. */
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
   18604:	693b      	ldr	r3, [r7, #16]
   18606:	8a9a      	ldrh	r2, [r3, #20]
   18608:	697b      	ldr	r3, [r7, #20]
   1860a:	80da      	strh	r2, [r3, #6]

	/* Save timeout on buffer write. */
	module->buffer_timeout = config->buffer_timeout;
   1860c:	693b      	ldr	r3, [r7, #16]
   1860e:	8ada      	ldrh	r2, [r3, #22]
   18610:	697b      	ldr	r3, [r7, #20]
   18612:	811a      	strh	r2, [r3, #8]

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   18614:	693b      	ldr	r3, [r7, #16]
   18616:	7e1b      	ldrb	r3, [r3, #24]
   18618:	2b00      	cmp	r3, #0
   1861a:	d103      	bne.n	18624 <_i2c_master_set_config+0x114>
   1861c:	4b90      	ldr	r3, [pc, #576]	; (18860 <_i2c_master_set_config+0x350>)
   1861e:	4798      	blx	r3
   18620:	1e03      	subs	r3, r0, #0
   18622:	d002      	beq.n	1862a <_i2c_master_set_config+0x11a>
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
   18624:	2380      	movs	r3, #128	; 0x80
   18626:	657b      	str	r3, [r7, #84]	; 0x54
   18628:	e001      	b.n	1862e <_i2c_master_set_config+0x11e>
	} else {
		tmp_ctrla = 0;
   1862a:	2300      	movs	r3, #0
   1862c:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set start data hold timeout. */
	if (config->start_hold_time != I2C_MASTER_START_HOLD_TIME_DISABLED) {
   1862e:	693b      	ldr	r3, [r7, #16]
   18630:	691b      	ldr	r3, [r3, #16]
   18632:	2b00      	cmp	r3, #0
   18634:	d004      	beq.n	18640 <_i2c_master_set_config+0x130>
		tmp_ctrla |= config->start_hold_time;
   18636:	693b      	ldr	r3, [r7, #16]
   18638:	691b      	ldr	r3, [r3, #16]
   1863a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1863c:	4313      	orrs	r3, r2
   1863e:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set transfer speed */
	tmp_ctrla |= config->transfer_speed;
   18640:	693b      	ldr	r3, [r7, #16]
   18642:	689b      	ldr	r3, [r3, #8]
   18644:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   18646:	4313      	orrs	r3, r2
   18648:	657b      	str	r3, [r7, #84]	; 0x54

	/* Check and set SCL low timeout. */
	if (config->scl_low_timeout) {
   1864a:	693b      	ldr	r3, [r7, #16]
   1864c:	2224      	movs	r2, #36	; 0x24
   1864e:	5c9b      	ldrb	r3, [r3, r2]
   18650:	2b00      	cmp	r3, #0
   18652:	d004      	beq.n	1865e <_i2c_master_set_config+0x14e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
   18654:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   18656:	2280      	movs	r2, #128	; 0x80
   18658:	05d2      	lsls	r2, r2, #23
   1865a:	4313      	orrs	r3, r2
   1865c:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set inactive bus timeout. */
	if (config->inactive_timeout != I2C_MASTER_INACTIVE_TIMEOUT_DISABLED) {
   1865e:	693b      	ldr	r3, [r7, #16]
   18660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   18662:	2b00      	cmp	r3, #0
   18664:	d004      	beq.n	18670 <_i2c_master_set_config+0x160>
		tmp_ctrla |= config->inactive_timeout;
   18666:	693b      	ldr	r3, [r7, #16]
   18668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1866a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
   1866c:	4313      	orrs	r3, r2
   1866e:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set SCL clock stretch mode. */
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
   18670:	693b      	ldr	r3, [r7, #16]
   18672:	222c      	movs	r2, #44	; 0x2c
   18674:	5c9b      	ldrb	r3, [r3, r2]
   18676:	2b00      	cmp	r3, #0
   18678:	d105      	bne.n	18686 <_i2c_master_set_config+0x176>
   1867a:	693b      	ldr	r3, [r7, #16]
   1867c:	689a      	ldr	r2, [r3, #8]
   1867e:	2380      	movs	r3, #128	; 0x80
   18680:	049b      	lsls	r3, r3, #18
   18682:	429a      	cmp	r2, r3
   18684:	d104      	bne.n	18690 <_i2c_master_set_config+0x180>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
   18686:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   18688:	2280      	movs	r2, #128	; 0x80
   1868a:	0512      	lsls	r2, r2, #20
   1868c:	4313      	orrs	r3, r2
   1868e:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set slave SCL low extend timeout. */
	if (config->slave_scl_low_extend_timeout) {
   18690:	693b      	ldr	r3, [r7, #16]
   18692:	222d      	movs	r2, #45	; 0x2d
   18694:	5c9b      	ldrb	r3, [r3, r2]
   18696:	2b00      	cmp	r3, #0
   18698:	d004      	beq.n	186a4 <_i2c_master_set_config+0x194>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
   1869a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   1869c:	2280      	movs	r2, #128	; 0x80
   1869e:	0412      	lsls	r2, r2, #16
   186a0:	4313      	orrs	r3, r2
   186a2:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Check and set master SCL low extend timeout. */
	if (config->master_scl_low_extend_timeout) {
   186a4:	693b      	ldr	r3, [r7, #16]
   186a6:	222e      	movs	r2, #46	; 0x2e
   186a8:	5c9b      	ldrb	r3, [r3, r2]
   186aa:	2b00      	cmp	r3, #0
   186ac:	d004      	beq.n	186b8 <_i2c_master_set_config+0x1a8>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
   186ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   186b0:	2280      	movs	r2, #128	; 0x80
   186b2:	03d2      	lsls	r2, r2, #15
   186b4:	4313      	orrs	r3, r2
   186b6:	657b      	str	r3, [r7, #84]	; 0x54
	}

	/* Write config to register CTRLA. */
	i2c_module->CTRLA.reg |= tmp_ctrla;
   186b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   186ba:	681a      	ldr	r2, [r3, #0]
   186bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   186be:	431a      	orrs	r2, r3
   186c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   186c2:	601a      	str	r2, [r3, #0]

	/* Set configurations in CTRLB. */
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
   186c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   186c6:	2280      	movs	r2, #128	; 0x80
   186c8:	0052      	lsls	r2, r2, #1
   186ca:	605a      	str	r2, [r3, #4]

	/* Find and set baudrate, considering sda/scl rise time */
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
   186cc:	2323      	movs	r3, #35	; 0x23
   186ce:	2210      	movs	r2, #16
   186d0:	4694      	mov	ip, r2
   186d2:	44bc      	add	ip, r7
   186d4:	4463      	add	r3, ip
   186d6:	781b      	ldrb	r3, [r3, #0]
   186d8:	3314      	adds	r3, #20
   186da:	b2db      	uxtb	r3, r3
   186dc:	0018      	movs	r0, r3
   186de:	4b61      	ldr	r3, [pc, #388]	; (18864 <_i2c_master_set_config+0x354>)
   186e0:	4798      	blx	r3
   186e2:	0003      	movs	r3, r0
   186e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fscl        = 1000 * config->baud_rate;
   186e6:	693b      	ldr	r3, [r7, #16]
   186e8:	681b      	ldr	r3, [r3, #0]
   186ea:	22fa      	movs	r2, #250	; 0xfa
   186ec:	0092      	lsls	r2, r2, #2
   186ee:	4353      	muls	r3, r2
   186f0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
   186f2:	693b      	ldr	r3, [r7, #16]
   186f4:	685b      	ldr	r3, [r3, #4]
   186f6:	22fa      	movs	r2, #250	; 0xfa
   186f8:	0092      	lsls	r2, r2, #2
   186fa:	4353      	muls	r3, r2
   186fc:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t trise       = config->sda_scl_rise_time_ns;
   186fe:	693b      	ldr	r3, [r7, #16]
   18700:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   18702:	623b      	str	r3, [r7, #32]
	
	tmp_baud = (int32_t)(div_ceil(
   18704:	4b58      	ldr	r3, [pc, #352]	; (18868 <_i2c_master_set_config+0x358>)
   18706:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   18708:	4798      	blx	r3
   1870a:	0005      	movs	r5, r0
   1870c:	000e      	movs	r6, r1
   1870e:	4b56      	ldr	r3, [pc, #344]	; (18868 <_i2c_master_set_config+0x358>)
   18710:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   18712:	4798      	blx	r3
   18714:	60b8      	str	r0, [r7, #8]
   18716:	60f9      	str	r1, [r7, #12]
   18718:	4b53      	ldr	r3, [pc, #332]	; (18868 <_i2c_master_set_config+0x358>)
   1871a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   1871c:	4798      	blx	r3
   1871e:	4c53      	ldr	r4, [pc, #332]	; (1886c <_i2c_master_set_config+0x35c>)
   18720:	4a53      	ldr	r2, [pc, #332]	; (18870 <_i2c_master_set_config+0x360>)
   18722:	4b54      	ldr	r3, [pc, #336]	; (18874 <_i2c_master_set_config+0x364>)
   18724:	47a0      	blx	r4
   18726:	0003      	movs	r3, r0
   18728:	000c      	movs	r4, r1
   1872a:	603b      	str	r3, [r7, #0]
   1872c:	607c      	str	r4, [r7, #4]
   1872e:	4b4e      	ldr	r3, [pc, #312]	; (18868 <_i2c_master_set_config+0x358>)
   18730:	6a38      	ldr	r0, [r7, #32]
   18732:	4798      	blx	r3
   18734:	0002      	movs	r2, r0
   18736:	000b      	movs	r3, r1
   18738:	4c4c      	ldr	r4, [pc, #304]	; (1886c <_i2c_master_set_config+0x35c>)
   1873a:	6838      	ldr	r0, [r7, #0]
   1873c:	6879      	ldr	r1, [r7, #4]
   1873e:	47a0      	blx	r4
   18740:	0003      	movs	r3, r0
   18742:	000c      	movs	r4, r1
   18744:	0018      	movs	r0, r3
   18746:	0021      	movs	r1, r4
   18748:	4c4b      	ldr	r4, [pc, #300]	; (18878 <_i2c_master_set_config+0x368>)
   1874a:	2200      	movs	r2, #0
   1874c:	4b4b      	ldr	r3, [pc, #300]	; (1887c <_i2c_master_set_config+0x36c>)
   1874e:	47a0      	blx	r4
   18750:	0003      	movs	r3, r0
   18752:	000c      	movs	r4, r1
   18754:	001a      	movs	r2, r3
   18756:	0023      	movs	r3, r4
   18758:	4c44      	ldr	r4, [pc, #272]	; (1886c <_i2c_master_set_config+0x35c>)
   1875a:	68b8      	ldr	r0, [r7, #8]
   1875c:	68f9      	ldr	r1, [r7, #12]
   1875e:	47a0      	blx	r4
   18760:	0003      	movs	r3, r0
   18762:	000c      	movs	r4, r1
   18764:	001a      	movs	r2, r3
   18766:	0023      	movs	r3, r4
   18768:	4c45      	ldr	r4, [pc, #276]	; (18880 <_i2c_master_set_config+0x370>)
   1876a:	0028      	movs	r0, r5
   1876c:	0031      	movs	r1, r6
   1876e:	47a0      	blx	r4
   18770:	0003      	movs	r3, r0
   18772:	000c      	movs	r4, r1
   18774:	001d      	movs	r5, r3
   18776:	0026      	movs	r6, r4
   18778:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1877a:	005a      	lsls	r2, r3, #1
   1877c:	4b3a      	ldr	r3, [pc, #232]	; (18868 <_i2c_master_set_config+0x358>)
   1877e:	0010      	movs	r0, r2
   18780:	4798      	blx	r3
   18782:	0002      	movs	r2, r0
   18784:	000b      	movs	r3, r1
   18786:	4c3c      	ldr	r4, [pc, #240]	; (18878 <_i2c_master_set_config+0x368>)
   18788:	0028      	movs	r0, r5
   1878a:	0031      	movs	r1, r6
   1878c:	47a0      	blx	r4
   1878e:	0003      	movs	r3, r0
   18790:	000c      	movs	r4, r1
   18792:	0018      	movs	r0, r3
   18794:	0021      	movs	r1, r4
   18796:	4c3a      	ldr	r4, [pc, #232]	; (18880 <_i2c_master_set_config+0x370>)
   18798:	2200      	movs	r2, #0
   1879a:	4b3a      	ldr	r3, [pc, #232]	; (18884 <_i2c_master_set_config+0x374>)
   1879c:	47a0      	blx	r4
   1879e:	0003      	movs	r3, r0
   187a0:	000c      	movs	r4, r1
   187a2:	001d      	movs	r5, r3
   187a4:	0026      	movs	r6, r4
   187a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   187a8:	005a      	lsls	r2, r3, #1
   187aa:	4b2f      	ldr	r3, [pc, #188]	; (18868 <_i2c_master_set_config+0x358>)
   187ac:	0010      	movs	r0, r2
   187ae:	4798      	blx	r3
   187b0:	0002      	movs	r2, r0
   187b2:	000b      	movs	r3, r1
   187b4:	4c34      	ldr	r4, [pc, #208]	; (18888 <_i2c_master_set_config+0x378>)
   187b6:	0028      	movs	r0, r5
   187b8:	0031      	movs	r1, r6
   187ba:	47a0      	blx	r4
   187bc:	0003      	movs	r3, r0
   187be:	000c      	movs	r4, r1
   187c0:	0019      	movs	r1, r3
   187c2:	0022      	movs	r2, r4
   187c4:	4b31      	ldr	r3, [pc, #196]	; (1888c <_i2c_master_set_config+0x37c>)
   187c6:	0008      	movs	r0, r1
   187c8:	0011      	movs	r1, r2
   187ca:	4798      	blx	r3
   187cc:	0003      	movs	r3, r0
   187ce:	63fb      	str	r3, [r7, #60]	; 0x3c
			fgclk - fscl * (10 + (fgclk * 0.000000001)* trise), 2 * fscl));
	
	/* For High speed mode, set the SCL ratio of high:low to 1:2. */
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
   187d0:	693b      	ldr	r3, [r7, #16]
   187d2:	689a      	ldr	r2, [r3, #8]
   187d4:	2380      	movs	r3, #128	; 0x80
   187d6:	049b      	lsls	r3, r3, #18
   187d8:	429a      	cmp	r2, r3
   187da:	d16a      	bne.n	188b2 <_i2c_master_set_config+0x3a2>
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
   187dc:	4b22      	ldr	r3, [pc, #136]	; (18868 <_i2c_master_set_config+0x358>)
   187de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   187e0:	4798      	blx	r3
   187e2:	4c25      	ldr	r4, [pc, #148]	; (18878 <_i2c_master_set_config+0x368>)
   187e4:	0002      	movs	r2, r0
   187e6:	000b      	movs	r3, r1
   187e8:	47a0      	blx	r4
   187ea:	0003      	movs	r3, r0
   187ec:	000c      	movs	r4, r1
   187ee:	001d      	movs	r5, r3
   187f0:	0026      	movs	r6, r4
   187f2:	4b1d      	ldr	r3, [pc, #116]	; (18868 <_i2c_master_set_config+0x358>)
   187f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
   187f6:	4798      	blx	r3
   187f8:	4c1c      	ldr	r4, [pc, #112]	; (1886c <_i2c_master_set_config+0x35c>)
   187fa:	2200      	movs	r2, #0
   187fc:	4b24      	ldr	r3, [pc, #144]	; (18890 <_i2c_master_set_config+0x380>)
   187fe:	47a0      	blx	r4
   18800:	0003      	movs	r3, r0
   18802:	000c      	movs	r4, r1
   18804:	001a      	movs	r2, r3
   18806:	0023      	movs	r3, r4
   18808:	4c1f      	ldr	r4, [pc, #124]	; (18888 <_i2c_master_set_config+0x378>)
   1880a:	0028      	movs	r0, r5
   1880c:	0031      	movs	r1, r6
   1880e:	47a0      	blx	r4
   18810:	0003      	movs	r3, r0
   18812:	000c      	movs	r4, r1
   18814:	0018      	movs	r0, r3
   18816:	0021      	movs	r1, r4
   18818:	4c19      	ldr	r4, [pc, #100]	; (18880 <_i2c_master_set_config+0x370>)
   1881a:	2200      	movs	r2, #0
   1881c:	4b19      	ldr	r3, [pc, #100]	; (18884 <_i2c_master_set_config+0x374>)
   1881e:	47a0      	blx	r4
   18820:	0003      	movs	r3, r0
   18822:	000c      	movs	r4, r1
   18824:	0019      	movs	r1, r3
   18826:	0022      	movs	r2, r4
   18828:	4b18      	ldr	r3, [pc, #96]	; (1888c <_i2c_master_set_config+0x37c>)
   1882a:	0008      	movs	r0, r1
   1882c:	0011      	movs	r1, r2
   1882e:	4798      	blx	r3
   18830:	0003      	movs	r3, r0
   18832:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (tmp_baudlow_hs) {
   18834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   18836:	2b00      	cmp	r3, #0
   18838:	d02e      	beq.n	18898 <_i2c_master_set_config+0x388>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
   1883a:	4b16      	ldr	r3, [pc, #88]	; (18894 <_i2c_master_set_config+0x384>)
   1883c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   1883e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
   18840:	4798      	blx	r3
   18842:	0003      	movs	r3, r0
   18844:	1e9a      	subs	r2, r3, #2
   18846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   18848:	1ad3      	subs	r3, r2, r3
   1884a:	653b      	str	r3, [r7, #80]	; 0x50
   1884c:	e031      	b.n	188b2 <_i2c_master_set_config+0x3a2>
   1884e:	46c0      	nop			; (mov r8, r8)
   18850:	00028429 	.word	0x00028429
   18854:	000183d1 	.word	0x000183d1
   18858:	0002826d 	.word	0x0002826d
   1885c:	0002b019 	.word	0x0002b019
   18860:	000183f9 	.word	0x000183f9
   18864:	0002addd 	.word	0x0002addd
   18868:	000356d1 	.word	0x000356d1
   1886c:	00034b3d 	.word	0x00034b3d
   18870:	e826d695 	.word	0xe826d695
   18874:	3e112e0b 	.word	0x3e112e0b
   18878:	00033eb5 	.word	0x00033eb5
   1887c:	40240000 	.word	0x40240000
   18880:	0003503d 	.word	0x0003503d
   18884:	3ff00000 	.word	0x3ff00000
   18888:	000344d5 	.word	0x000344d5
   1888c:	00035669 	.word	0x00035669
   18890:	40080000 	.word	0x40080000
   18894:	00033855 	.word	0x00033855
		} else {
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
   18898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1889a:	005a      	lsls	r2, r3, #1
   1889c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1889e:	18d3      	adds	r3, r2, r3
   188a0:	1e5a      	subs	r2, r3, #1
   188a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   188a4:	0059      	lsls	r1, r3, #1
   188a6:	4b1d      	ldr	r3, [pc, #116]	; (1891c <_i2c_master_set_config+0x40c>)
   188a8:	0010      	movs	r0, r2
   188aa:	4798      	blx	r3
   188ac:	0003      	movs	r3, r0
   188ae:	3b01      	subs	r3, #1
   188b0:	653b      	str	r3, [r7, #80]	; 0x50
		}
	}

	/* Check that baudrate is supported at current speed. */
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
   188b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   188b4:	2bff      	cmp	r3, #255	; 0xff
   188b6:	dc08      	bgt.n	188ca <_i2c_master_set_config+0x3ba>
   188b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   188ba:	2b00      	cmp	r3, #0
   188bc:	db05      	blt.n	188ca <_i2c_master_set_config+0x3ba>
   188be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   188c0:	2bff      	cmp	r3, #255	; 0xff
   188c2:	dc02      	bgt.n	188ca <_i2c_master_set_config+0x3ba>
   188c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   188c6:	2b00      	cmp	r3, #0
   188c8:	da06      	bge.n	188d8 <_i2c_master_set_config+0x3c8>
		/* Baud rate not supported. */
		tmp_status_code = STATUS_ERR_BAUDRATE_UNAVAILABLE;
   188ca:	233b      	movs	r3, #59	; 0x3b
   188cc:	2210      	movs	r2, #16
   188ce:	4694      	mov	ip, r2
   188d0:	44bc      	add	ip, r7
   188d2:	4463      	add	r3, ip
   188d4:	2240      	movs	r2, #64	; 0x40
   188d6:	701a      	strb	r2, [r3, #0]
	}
	if (tmp_status_code != STATUS_ERR_BAUDRATE_UNAVAILABLE) {
   188d8:	233b      	movs	r3, #59	; 0x3b
   188da:	2210      	movs	r2, #16
   188dc:	4694      	mov	ip, r2
   188de:	44bc      	add	ip, r7
   188e0:	4463      	add	r3, ip
   188e2:	781b      	ldrb	r3, [r3, #0]
   188e4:	2b40      	cmp	r3, #64	; 0x40
   188e6:	d00e      	beq.n	18906 <_i2c_master_set_config+0x3f6>
		/* Baud rate acceptable. */
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   188e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   188ea:	22ff      	movs	r2, #255	; 0xff
   188ec:	401a      	ands	r2, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   188ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   188f0:	041b      	lsls	r3, r3, #16
   188f2:	0019      	movs	r1, r3
   188f4:	23ff      	movs	r3, #255	; 0xff
   188f6:	041b      	lsls	r3, r3, #16
   188f8:	400b      	ands	r3, r1
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   188fa:	4313      	orrs	r3, r2
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
   188fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   188fe:	0612      	lsls	r2, r2, #24
   18900:	431a      	orrs	r2, r3
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
   18902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   18904:	60da      	str	r2, [r3, #12]
	}

	return tmp_status_code;
   18906:	233b      	movs	r3, #59	; 0x3b
   18908:	2210      	movs	r2, #16
   1890a:	4694      	mov	ip, r2
   1890c:	44bc      	add	ip, r7
   1890e:	4463      	add	r3, ip
   18910:	781b      	ldrb	r3, [r3, #0]
}
   18912:	0018      	movs	r0, r3
   18914:	46bd      	mov	sp, r7
   18916:	b017      	add	sp, #92	; 0x5c
   18918:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1891a:	46c0      	nop			; (mov r8, r8)
   1891c:	00033855 	.word	0x00033855

00018920 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
   18920:	b590      	push	{r4, r7, lr}
   18922:	b08b      	sub	sp, #44	; 0x2c
   18924:	af00      	add	r7, sp, #0
   18926:	60f8      	str	r0, [r7, #12]
   18928:	60b9      	str	r1, [r7, #8]
   1892a:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
   1892c:	68fb      	ldr	r3, [r7, #12]
   1892e:	68ba      	ldr	r2, [r7, #8]
   18930:	601a      	str	r2, [r3, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   18932:	68fb      	ldr	r3, [r7, #12]
   18934:	681b      	ldr	r3, [r3, #0]
   18936:	627b      	str	r3, [r7, #36]	; 0x24

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   18938:	68fb      	ldr	r3, [r7, #12]
   1893a:	681b      	ldr	r3, [r3, #0]
   1893c:	0018      	movs	r0, r3
   1893e:	4b3b      	ldr	r3, [pc, #236]	; (18a2c <i2c_master_init+0x10c>)
   18940:	4798      	blx	r3
   18942:	0003      	movs	r3, r0
   18944:	623b      	str	r3, [r7, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
	}
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   18946:	6a3b      	ldr	r3, [r7, #32]
   18948:	3302      	adds	r3, #2
   1894a:	61fb      	str	r3, [r7, #28]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   1894c:	6a3b      	ldr	r3, [r7, #32]
   1894e:	3314      	adds	r3, #20
   18950:	61bb      	str	r3, [r7, #24]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   18952:	2201      	movs	r2, #1
   18954:	69fb      	ldr	r3, [r7, #28]
   18956:	409a      	lsls	r2, r3
   18958:	0013      	movs	r3, r2
   1895a:	0019      	movs	r1, r3
   1895c:	2002      	movs	r0, #2
   1895e:	4b34      	ldr	r3, [pc, #208]	; (18a30 <i2c_master_init+0x110>)
   18960:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   18962:	2314      	movs	r3, #20
   18964:	18fb      	adds	r3, r7, r3
   18966:	0018      	movs	r0, r3
   18968:	4b32      	ldr	r3, [pc, #200]	; (18a34 <i2c_master_init+0x114>)
   1896a:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   1896c:	687b      	ldr	r3, [r7, #4]
   1896e:	7b1a      	ldrb	r2, [r3, #12]
   18970:	2314      	movs	r3, #20
   18972:	18fb      	adds	r3, r7, r3
   18974:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   18976:	69bb      	ldr	r3, [r7, #24]
   18978:	b2db      	uxtb	r3, r3
   1897a:	2214      	movs	r2, #20
   1897c:	18ba      	adds	r2, r7, r2
   1897e:	0011      	movs	r1, r2
   18980:	0018      	movs	r0, r3
   18982:	4b2d      	ldr	r3, [pc, #180]	; (18a38 <i2c_master_init+0x118>)
   18984:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   18986:	69bb      	ldr	r3, [r7, #24]
   18988:	b2db      	uxtb	r3, r3
   1898a:	0018      	movs	r0, r3
   1898c:	4b2b      	ldr	r3, [pc, #172]	; (18a3c <i2c_master_init+0x11c>)
   1898e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   18990:	687b      	ldr	r3, [r7, #4]
   18992:	7b1b      	ldrb	r3, [r3, #12]
   18994:	2100      	movs	r1, #0
   18996:	0018      	movs	r0, r3
   18998:	4b29      	ldr	r3, [pc, #164]	; (18a40 <i2c_master_init+0x120>)
   1899a:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
   1899c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1899e:	681b      	ldr	r3, [r3, #0]
   189a0:	2202      	movs	r2, #2
   189a2:	4013      	ands	r3, r2
   189a4:	d001      	beq.n	189aa <i2c_master_init+0x8a>
		return STATUS_ERR_DENIED;
   189a6:	231c      	movs	r3, #28
   189a8:	e03b      	b.n	18a22 <i2c_master_init+0x102>
	}

	/* Check if reset is in progress. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
   189aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   189ac:	681b      	ldr	r3, [r3, #0]
   189ae:	2201      	movs	r2, #1
   189b0:	4013      	ands	r3, r2
   189b2:	d001      	beq.n	189b8 <i2c_master_init+0x98>
		return STATUS_BUSY;
   189b4:	2305      	movs	r3, #5
   189b6:	e034      	b.n	18a22 <i2c_master_init+0x102>
	}

#if I2C_MASTER_CALLBACK_MODE == true
	/* Get sercom instance index and register callback. */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   189b8:	68fb      	ldr	r3, [r7, #12]
   189ba:	681b      	ldr	r3, [r3, #0]
   189bc:	2217      	movs	r2, #23
   189be:	18bc      	adds	r4, r7, r2
   189c0:	0018      	movs	r0, r3
   189c2:	4b1a      	ldr	r3, [pc, #104]	; (18a2c <i2c_master_init+0x10c>)
   189c4:	4798      	blx	r3
   189c6:	0003      	movs	r3, r0
   189c8:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
   189ca:	4a1e      	ldr	r2, [pc, #120]	; (18a44 <i2c_master_init+0x124>)
   189cc:	2317      	movs	r3, #23
   189ce:	18fb      	adds	r3, r7, r3
   189d0:	781b      	ldrb	r3, [r3, #0]
   189d2:	0011      	movs	r1, r2
   189d4:	0018      	movs	r0, r3
   189d6:	4b1c      	ldr	r3, [pc, #112]	; (18a48 <i2c_master_init+0x128>)
   189d8:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   189da:	2317      	movs	r3, #23
   189dc:	18fb      	adds	r3, r7, r3
   189de:	781a      	ldrb	r2, [r3, #0]
   189e0:	4b1a      	ldr	r3, [pc, #104]	; (18a4c <i2c_master_init+0x12c>)
   189e2:	0092      	lsls	r2, r2, #2
   189e4:	68f9      	ldr	r1, [r7, #12]
   189e6:	50d1      	str	r1, [r2, r3]

	/* Initialize values in module. */
	module->registered_callback = 0;
   189e8:	68fb      	ldr	r3, [r7, #12]
   189ea:	2200      	movs	r2, #0
   189ec:	761a      	strb	r2, [r3, #24]
	module->enabled_callback = 0;
   189ee:	68fb      	ldr	r3, [r7, #12]
   189f0:	2200      	movs	r2, #0
   189f2:	765a      	strb	r2, [r3, #25]
	module->buffer_length = 0;
   189f4:	68fb      	ldr	r3, [r7, #12]
   189f6:	2200      	movs	r2, #0
   189f8:	835a      	strh	r2, [r3, #26]
	module->buffer_remaining = 0;
   189fa:	68fb      	ldr	r3, [r7, #12]
   189fc:	2200      	movs	r2, #0
   189fe:	839a      	strh	r2, [r3, #28]

	module->status = STATUS_OK;
   18a00:	68fb      	ldr	r3, [r7, #12]
   18a02:	2225      	movs	r2, #37	; 0x25
   18a04:	2100      	movs	r1, #0
   18a06:	5499      	strb	r1, [r3, r2]
	module->buffer = NULL;
   18a08:	68fb      	ldr	r3, [r7, #12]
   18a0a:	2200      	movs	r2, #0
   18a0c:	621a      	str	r2, [r3, #32]
#endif

	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
   18a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   18a10:	2214      	movs	r2, #20
   18a12:	601a      	str	r2, [r3, #0]

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
   18a14:	687a      	ldr	r2, [r7, #4]
   18a16:	68fb      	ldr	r3, [r7, #12]
   18a18:	0011      	movs	r1, r2
   18a1a:	0018      	movs	r0, r3
   18a1c:	4b0c      	ldr	r3, [pc, #48]	; (18a50 <i2c_master_init+0x130>)
   18a1e:	4798      	blx	r3
   18a20:	0003      	movs	r3, r0
}
   18a22:	0018      	movs	r0, r3
   18a24:	46bd      	mov	sp, r7
   18a26:	b00b      	add	sp, #44	; 0x2c
   18a28:	bd90      	pop	{r4, r7, pc}
   18a2a:	46c0      	nop			; (mov r8, r8)
   18a2c:	00028429 	.word	0x00028429
   18a30:	00018375 	.word	0x00018375
   18a34:	0001835d 	.word	0x0001835d
   18a38:	0002acb9 	.word	0x0002acb9
   18a3c:	0002acfd 	.word	0x0002acfd
   18a40:	000281e1 	.word	0x000281e1
   18a44:	00013ccd 	.word	0x00013ccd
   18a48:	0002848d 	.word	0x0002848d
   18a4c:	20005c58 	.word	0x20005c58
   18a50:	00018511 	.word	0x00018511

00018a54 <i2c_master_reset>:
 * Reset the module to hardware defaults.
 *
 * \param[in,out] module Pointer to software module structure
 */
void i2c_master_reset(struct i2c_master_module *const module)
{
   18a54:	b580      	push	{r7, lr}
   18a56:	b084      	sub	sp, #16
   18a58:	af00      	add	r7, sp, #0
   18a5a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   18a5c:	687b      	ldr	r3, [r7, #4]
   18a5e:	681b      	ldr	r3, [r3, #0]
   18a60:	60fb      	str	r3, [r7, #12]

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   18a62:	687b      	ldr	r3, [r7, #4]
   18a64:	0018      	movs	r0, r3
   18a66:	4b0f      	ldr	r3, [pc, #60]	; (18aa4 <i2c_master_reset+0x50>)
   18a68:	4798      	blx	r3

	/* Disable module */
	i2c_master_disable(module);
   18a6a:	687b      	ldr	r3, [r7, #4]
   18a6c:	0018      	movs	r0, r3
   18a6e:	4b0e      	ldr	r3, [pc, #56]	; (18aa8 <i2c_master_reset+0x54>)
   18a70:	4798      	blx	r3

#if I2C_MASTER_CALLBACK_MODE == true
	/* Clear all pending interrupts */
	system_interrupt_enter_critical_section();
   18a72:	4b0e      	ldr	r3, [pc, #56]	; (18aac <i2c_master_reset+0x58>)
   18a74:	4798      	blx	r3
	system_interrupt_clear_pending(_sercom_get_interrupt_vector(module->hw));
   18a76:	687b      	ldr	r3, [r7, #4]
   18a78:	681b      	ldr	r3, [r3, #0]
   18a7a:	0018      	movs	r0, r3
   18a7c:	4b0c      	ldr	r3, [pc, #48]	; (18ab0 <i2c_master_reset+0x5c>)
   18a7e:	4798      	blx	r3
   18a80:	0003      	movs	r3, r0
   18a82:	0018      	movs	r0, r3
   18a84:	4b0b      	ldr	r3, [pc, #44]	; (18ab4 <i2c_master_reset+0x60>)
   18a86:	4798      	blx	r3
	system_interrupt_leave_critical_section();
   18a88:	4b0b      	ldr	r3, [pc, #44]	; (18ab8 <i2c_master_reset+0x64>)
   18a8a:	4798      	blx	r3
#endif

	/* Wait for sync */
	_i2c_master_wait_for_sync(module);
   18a8c:	687b      	ldr	r3, [r7, #4]
   18a8e:	0018      	movs	r0, r3
   18a90:	4b04      	ldr	r3, [pc, #16]	; (18aa4 <i2c_master_reset+0x50>)
   18a92:	4798      	blx	r3

	/* Reset module */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_SWRST;
   18a94:	68fb      	ldr	r3, [r7, #12]
   18a96:	2201      	movs	r2, #1
   18a98:	601a      	str	r2, [r3, #0]
}
   18a9a:	46c0      	nop			; (mov r8, r8)
   18a9c:	46bd      	mov	sp, r7
   18a9e:	b004      	add	sp, #16
   18aa0:	bd80      	pop	{r7, pc}
   18aa2:	46c0      	nop			; (mov r8, r8)
   18aa4:	00018495 	.word	0x00018495
   18aa8:	000184b9 	.word	0x000184b9
   18aac:	00018419 	.word	0x00018419
   18ab0:	000284f9 	.word	0x000284f9
   18ab4:	0002ae35 	.word	0x0002ae35
   18ab8:	0001842d 	.word	0x0001842d

00018abc <_i2c_master_address_response>:
 * \retval STATUS_ERR_BAD_ADDRESS       If slave is busy, or no slave
 *                                      acknowledged the address
 */
enum status_code _i2c_master_address_response(
		struct i2c_master_module *const module)
{
   18abc:	b580      	push	{r7, lr}
   18abe:	b084      	sub	sp, #16
   18ac0:	af00      	add	r7, sp, #0
   18ac2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   18ac4:	687b      	ldr	r3, [r7, #4]
   18ac6:	681b      	ldr	r3, [r3, #0]
   18ac8:	60fb      	str	r3, [r7, #12]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
   18aca:	68fb      	ldr	r3, [r7, #12]
   18acc:	7e1b      	ldrb	r3, [r3, #24]
   18ace:	b2db      	uxtb	r3, r3
   18ad0:	001a      	movs	r2, r3
   18ad2:	2302      	movs	r3, #2
   18ad4:	4013      	ands	r3, r2
   18ad6:	d00b      	beq.n	18af0 <_i2c_master_address_response+0x34>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
   18ad8:	68fb      	ldr	r3, [r7, #12]
   18ada:	2202      	movs	r2, #2
   18adc:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
   18ade:	68fb      	ldr	r3, [r7, #12]
   18ae0:	8b5b      	ldrh	r3, [r3, #26]
   18ae2:	b29b      	uxth	r3, r3
   18ae4:	001a      	movs	r2, r3
   18ae6:	2302      	movs	r3, #2
   18ae8:	4013      	ands	r3, r2
   18aea:	d011      	beq.n	18b10 <_i2c_master_address_response+0x54>
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
   18aec:	2341      	movs	r3, #65	; 0x41
   18aee:	e010      	b.n	18b12 <_i2c_master_address_response+0x56>
		}
	/* Check that slave responded with ack. */
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
   18af0:	68fb      	ldr	r3, [r7, #12]
   18af2:	8b5b      	ldrh	r3, [r3, #26]
   18af4:	b29b      	uxth	r3, r3
   18af6:	001a      	movs	r2, r3
   18af8:	2304      	movs	r3, #4
   18afa:	4013      	ands	r3, r2
   18afc:	d008      	beq.n	18b10 <_i2c_master_address_response+0x54>
		/* Slave busy. Issue ack and stop command. */
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
   18afe:	68fb      	ldr	r3, [r7, #12]
   18b00:	685b      	ldr	r3, [r3, #4]
   18b02:	22c0      	movs	r2, #192	; 0xc0
   18b04:	0292      	lsls	r2, r2, #10
   18b06:	431a      	orrs	r2, r3
   18b08:	68fb      	ldr	r3, [r7, #12]
   18b0a:	605a      	str	r2, [r3, #4]

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
   18b0c:	2318      	movs	r3, #24
   18b0e:	e000      	b.n	18b12 <_i2c_master_address_response+0x56>
	}

	return STATUS_OK;
   18b10:	2300      	movs	r3, #0
}
   18b12:	0018      	movs	r0, r3
   18b14:	46bd      	mov	sp, r7
   18b16:	b004      	add	sp, #16
   18b18:	bd80      	pop	{r7, pc}

00018b1a <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
   18b1a:	b580      	push	{r7, lr}
   18b1c:	b084      	sub	sp, #16
   18b1e:	af00      	add	r7, sp, #0
   18b20:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   18b22:	687b      	ldr	r3, [r7, #4]
   18b24:	681b      	ldr	r3, [r3, #0]
   18b26:	60bb      	str	r3, [r7, #8]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
   18b28:	230e      	movs	r3, #14
   18b2a:	18fb      	adds	r3, r7, r3
   18b2c:	2200      	movs	r2, #0
   18b2e:	801a      	strh	r2, [r3, #0]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   18b30:	e00f      	b.n	18b52 <_i2c_master_wait_for_bus+0x38>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
   18b32:	230e      	movs	r3, #14
   18b34:	18fb      	adds	r3, r7, r3
   18b36:	220e      	movs	r2, #14
   18b38:	18ba      	adds	r2, r7, r2
   18b3a:	8812      	ldrh	r2, [r2, #0]
   18b3c:	3201      	adds	r2, #1
   18b3e:	801a      	strh	r2, [r3, #0]
   18b40:	687b      	ldr	r3, [r7, #4]
   18b42:	891b      	ldrh	r3, [r3, #8]
   18b44:	220e      	movs	r2, #14
   18b46:	18ba      	adds	r2, r7, r2
   18b48:	8812      	ldrh	r2, [r2, #0]
   18b4a:	429a      	cmp	r2, r3
   18b4c:	d301      	bcc.n	18b52 <_i2c_master_wait_for_bus+0x38>
			return STATUS_ERR_TIMEOUT;
   18b4e:	2312      	movs	r3, #18
   18b50:	e00e      	b.n	18b70 <_i2c_master_wait_for_bus+0x56>
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   18b52:	68bb      	ldr	r3, [r7, #8]
   18b54:	7e1b      	ldrb	r3, [r3, #24]
   18b56:	b2db      	uxtb	r3, r3
   18b58:	001a      	movs	r2, r3
   18b5a:	2301      	movs	r3, #1
   18b5c:	4013      	ands	r3, r2
   18b5e:	d106      	bne.n	18b6e <_i2c_master_wait_for_bus+0x54>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
   18b60:	68bb      	ldr	r3, [r7, #8]
   18b62:	7e1b      	ldrb	r3, [r3, #24]
   18b64:	b2db      	uxtb	r3, r3
   18b66:	001a      	movs	r2, r3
   18b68:	2302      	movs	r3, #2
   18b6a:	4013      	ands	r3, r2
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
   18b6c:	d0e1      	beq.n	18b32 <_i2c_master_wait_for_bus+0x18>
		}
	}
	return STATUS_OK;
   18b6e:	2300      	movs	r3, #0
}
   18b70:	0018      	movs	r0, r3
   18b72:	46bd      	mov	sp, r7
   18b74:	b004      	add	sp, #16
   18b76:	bd80      	pop	{r7, pc}

00018b78 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
   18b78:	b590      	push	{r4, r7, lr}
   18b7a:	b085      	sub	sp, #20
   18b7c:	af00      	add	r7, sp, #0
   18b7e:	6078      	str	r0, [r7, #4]
   18b80:	000a      	movs	r2, r1
   18b82:	1cfb      	adds	r3, r7, #3
   18b84:	701a      	strb	r2, [r3, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
   18b86:	687b      	ldr	r3, [r7, #4]
   18b88:	681b      	ldr	r3, [r3, #0]
   18b8a:	60fb      	str	r3, [r7, #12]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
   18b8c:	68fb      	ldr	r3, [r7, #12]
   18b8e:	685b      	ldr	r3, [r3, #4]
   18b90:	2280      	movs	r2, #128	; 0x80
   18b92:	02d2      	lsls	r2, r2, #11
   18b94:	431a      	orrs	r2, r3
   18b96:	68fb      	ldr	r3, [r7, #12]
   18b98:	605a      	str	r2, [r3, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
   18b9a:	1cfb      	adds	r3, r7, #3
   18b9c:	781a      	ldrb	r2, [r3, #0]
   18b9e:	68fb      	ldr	r3, [r7, #12]
   18ba0:	625a      	str	r2, [r3, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
   18ba2:	230b      	movs	r3, #11
   18ba4:	18fc      	adds	r4, r7, r3
   18ba6:	687b      	ldr	r3, [r7, #4]
   18ba8:	0018      	movs	r0, r3
   18baa:	4b07      	ldr	r3, [pc, #28]	; (18bc8 <_i2c_master_send_hs_master_code+0x50>)
   18bac:	4798      	blx	r3
   18bae:	0003      	movs	r3, r0
   18bb0:	7023      	strb	r3, [r4, #0]
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
   18bb2:	68fb      	ldr	r3, [r7, #12]
   18bb4:	2201      	movs	r2, #1
   18bb6:	761a      	strb	r2, [r3, #24]

	return tmp_status;
   18bb8:	230b      	movs	r3, #11
   18bba:	18fb      	adds	r3, r7, r3
   18bbc:	781b      	ldrb	r3, [r3, #0]
}
   18bbe:	0018      	movs	r0, r3
   18bc0:	46bd      	mov	sp, r7
   18bc2:	b005      	add	sp, #20
   18bc4:	bd90      	pop	{r4, r7, pc}
   18bc6:	46c0      	nop			; (mov r8, r8)
   18bc8:	00018b1b 	.word	0x00018b1b

00018bcc <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
   18bcc:	b580      	push	{r7, lr}
   18bce:	af00      	add	r7, sp, #0
   18bd0:	2000      	movs	r0, #0
   18bd2:	4b02      	ldr	r3, [pc, #8]	; (18bdc <TC3_Handler+0x10>)
   18bd4:	4798      	blx	r3
   18bd6:	46c0      	nop			; (mov r8, r8)
   18bd8:	46bd      	mov	sp, r7
   18bda:	bd80      	pop	{r7, pc}
   18bdc:	00018c09 	.word	0x00018c09

00018be0 <TC4_Handler>:
   18be0:	b580      	push	{r7, lr}
   18be2:	af00      	add	r7, sp, #0
   18be4:	2001      	movs	r0, #1
   18be6:	4b02      	ldr	r3, [pc, #8]	; (18bf0 <TC4_Handler+0x10>)
   18be8:	4798      	blx	r3
   18bea:	46c0      	nop			; (mov r8, r8)
   18bec:	46bd      	mov	sp, r7
   18bee:	bd80      	pop	{r7, pc}
   18bf0:	00018c09 	.word	0x00018c09

00018bf4 <TC5_Handler>:
   18bf4:	b580      	push	{r7, lr}
   18bf6:	af00      	add	r7, sp, #0
   18bf8:	2002      	movs	r0, #2
   18bfa:	4b02      	ldr	r3, [pc, #8]	; (18c04 <TC5_Handler+0x10>)
   18bfc:	4798      	blx	r3
   18bfe:	46c0      	nop			; (mov r8, r8)
   18c00:	46bd      	mov	sp, r7
   18c02:	bd80      	pop	{r7, pc}
   18c04:	00018c09 	.word	0x00018c09

00018c08 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
   18c08:	b580      	push	{r7, lr}
   18c0a:	b084      	sub	sp, #16
   18c0c:	af00      	add	r7, sp, #0
   18c0e:	0002      	movs	r2, r0
   18c10:	1dfb      	adds	r3, r7, #7
   18c12:	701a      	strb	r2, [r3, #0]
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
   18c14:	1dfb      	adds	r3, r7, #7
   18c16:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
   18c18:	4b28      	ldr	r3, [pc, #160]	; (18cbc <_tc_interrupt_handler+0xb4>)
   18c1a:	0092      	lsls	r2, r2, #2
   18c1c:	58d3      	ldr	r3, [r2, r3]
   18c1e:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   18c20:	68fb      	ldr	r3, [r7, #12]
   18c22:	681b      	ldr	r3, [r3, #0]
   18c24:	7b9b      	ldrb	r3, [r3, #14]
   18c26:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
   18c28:	68fa      	ldr	r2, [r7, #12]
   18c2a:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   18c2c:	4013      	ands	r3, r2
   18c2e:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
   18c30:	68fb      	ldr	r3, [r7, #12]
   18c32:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
   18c34:	230b      	movs	r3, #11
   18c36:	18fb      	adds	r3, r7, r3
   18c38:	400a      	ands	r2, r1
   18c3a:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
   18c3c:	230b      	movs	r3, #11
   18c3e:	18fb      	adds	r3, r7, r3
   18c40:	781b      	ldrb	r3, [r3, #0]
   18c42:	2201      	movs	r2, #1
   18c44:	4013      	ands	r3, r2
   18c46:	d008      	beq.n	18c5a <_tc_interrupt_handler+0x52>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
   18c48:	68fb      	ldr	r3, [r7, #12]
   18c4a:	689b      	ldr	r3, [r3, #8]
   18c4c:	68fa      	ldr	r2, [r7, #12]
   18c4e:	0010      	movs	r0, r2
   18c50:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
   18c52:	68fb      	ldr	r3, [r7, #12]
   18c54:	681b      	ldr	r3, [r3, #0]
   18c56:	2201      	movs	r2, #1
   18c58:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
   18c5a:	230b      	movs	r3, #11
   18c5c:	18fb      	adds	r3, r7, r3
   18c5e:	781b      	ldrb	r3, [r3, #0]
   18c60:	2202      	movs	r2, #2
   18c62:	4013      	ands	r3, r2
   18c64:	d008      	beq.n	18c78 <_tc_interrupt_handler+0x70>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
   18c66:	68fb      	ldr	r3, [r7, #12]
   18c68:	68db      	ldr	r3, [r3, #12]
   18c6a:	68fa      	ldr	r2, [r7, #12]
   18c6c:	0010      	movs	r0, r2
   18c6e:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
   18c70:	68fb      	ldr	r3, [r7, #12]
   18c72:	681b      	ldr	r3, [r3, #0]
   18c74:	2202      	movs	r2, #2
   18c76:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
   18c78:	230b      	movs	r3, #11
   18c7a:	18fb      	adds	r3, r7, r3
   18c7c:	781b      	ldrb	r3, [r3, #0]
   18c7e:	2210      	movs	r2, #16
   18c80:	4013      	ands	r3, r2
   18c82:	d008      	beq.n	18c96 <_tc_interrupt_handler+0x8e>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
   18c84:	68fb      	ldr	r3, [r7, #12]
   18c86:	691b      	ldr	r3, [r3, #16]
   18c88:	68fa      	ldr	r2, [r7, #12]
   18c8a:	0010      	movs	r0, r2
   18c8c:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
   18c8e:	68fb      	ldr	r3, [r7, #12]
   18c90:	681b      	ldr	r3, [r3, #0]
   18c92:	2210      	movs	r2, #16
   18c94:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
   18c96:	230b      	movs	r3, #11
   18c98:	18fb      	adds	r3, r7, r3
   18c9a:	781b      	ldrb	r3, [r3, #0]
   18c9c:	2220      	movs	r2, #32
   18c9e:	4013      	ands	r3, r2
   18ca0:	d008      	beq.n	18cb4 <_tc_interrupt_handler+0xac>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
   18ca2:	68fb      	ldr	r3, [r7, #12]
   18ca4:	695b      	ldr	r3, [r3, #20]
   18ca6:	68fa      	ldr	r2, [r7, #12]
   18ca8:	0010      	movs	r0, r2
   18caa:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
   18cac:	68fb      	ldr	r3, [r7, #12]
   18cae:	681b      	ldr	r3, [r3, #0]
   18cb0:	2220      	movs	r2, #32
   18cb2:	739a      	strb	r2, [r3, #14]
	}
}
   18cb4:	46c0      	nop			; (mov r8, r8)
   18cb6:	46bd      	mov	sp, r7
   18cb8:	b004      	add	sp, #16
   18cba:	bd80      	pop	{r7, pc}
   18cbc:	20004a40 	.word	0x20004a40

00018cc0 <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
{
   18cc0:	b580      	push	{r7, lr}
   18cc2:	b084      	sub	sp, #16
   18cc4:	af00      	add	r7, sp, #0
   18cc6:	6078      	str	r0, [r7, #4]
static CLI_Definition_List_Item_t *pxLastCommandInList = &xRegisteredCommands;
CLI_Definition_List_Item_t *pxNewListItem;
BaseType_t xReturn = pdFAIL;
   18cc8:	2300      	movs	r3, #0
   18cca:	60fb      	str	r3, [r7, #12]

	/* Check the parameter is not NULL. */
	configASSERT( pxCommandToRegister );
   18ccc:	687b      	ldr	r3, [r7, #4]
   18cce:	2b00      	cmp	r3, #0
   18cd0:	d101      	bne.n	18cd6 <FreeRTOS_CLIRegisterCommand+0x16>
   18cd2:	b672      	cpsid	i
   18cd4:	e7fe      	b.n	18cd4 <FreeRTOS_CLIRegisterCommand+0x14>

	/* Create a new list item that will reference the command being registered. */
	pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
   18cd6:	2008      	movs	r0, #8
   18cd8:	4b11      	ldr	r3, [pc, #68]	; (18d20 <FreeRTOS_CLIRegisterCommand+0x60>)
   18cda:	4798      	blx	r3
   18cdc:	0003      	movs	r3, r0
   18cde:	60bb      	str	r3, [r7, #8]
	configASSERT( pxNewListItem );
   18ce0:	68bb      	ldr	r3, [r7, #8]
   18ce2:	2b00      	cmp	r3, #0
   18ce4:	d101      	bne.n	18cea <FreeRTOS_CLIRegisterCommand+0x2a>
   18ce6:	b672      	cpsid	i
   18ce8:	e7fe      	b.n	18ce8 <FreeRTOS_CLIRegisterCommand+0x28>

	if( pxNewListItem != NULL )
   18cea:	68bb      	ldr	r3, [r7, #8]
   18cec:	2b00      	cmp	r3, #0
   18cee:	d012      	beq.n	18d16 <FreeRTOS_CLIRegisterCommand+0x56>
	{
		taskENTER_CRITICAL();
   18cf0:	4b0c      	ldr	r3, [pc, #48]	; (18d24 <FreeRTOS_CLIRegisterCommand+0x64>)
   18cf2:	4798      	blx	r3
		{
			/* Reference the command being registered from the newly created
			list item. */
			pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
   18cf4:	68bb      	ldr	r3, [r7, #8]
   18cf6:	687a      	ldr	r2, [r7, #4]
   18cf8:	601a      	str	r2, [r3, #0]

			/* The new list item will get added to the end of the list, so
			pxNext has nowhere to point. */
			pxNewListItem->pxNext = NULL;
   18cfa:	68bb      	ldr	r3, [r7, #8]
   18cfc:	2200      	movs	r2, #0
   18cfe:	605a      	str	r2, [r3, #4]

			/* Add the newly created list item to the end of the already existing
			list. */
			pxLastCommandInList->pxNext = pxNewListItem;
   18d00:	4b09      	ldr	r3, [pc, #36]	; (18d28 <FreeRTOS_CLIRegisterCommand+0x68>)
   18d02:	681b      	ldr	r3, [r3, #0]
   18d04:	68ba      	ldr	r2, [r7, #8]
   18d06:	605a      	str	r2, [r3, #4]

			/* Set the end of list marker to the new list item. */
			pxLastCommandInList = pxNewListItem;
   18d08:	4b07      	ldr	r3, [pc, #28]	; (18d28 <FreeRTOS_CLIRegisterCommand+0x68>)
   18d0a:	68ba      	ldr	r2, [r7, #8]
   18d0c:	601a      	str	r2, [r3, #0]
		}
		taskEXIT_CRITICAL();
   18d0e:	4b07      	ldr	r3, [pc, #28]	; (18d2c <FreeRTOS_CLIRegisterCommand+0x6c>)
   18d10:	4798      	blx	r3

		xReturn = pdPASS;
   18d12:	2301      	movs	r3, #1
   18d14:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
   18d16:	68fb      	ldr	r3, [r7, #12]
}
   18d18:	0018      	movs	r0, r3
   18d1a:	46bd      	mov	sp, r7
   18d1c:	b004      	add	sp, #16
   18d1e:	bd80      	pop	{r7, pc}
   18d20:	0001b0d1 	.word	0x0001b0d1
   18d24:	0001af99 	.word	0x0001af99
   18d28:	20000100 	.word	0x20000100
   18d2c:	0001afbd 	.word	0x0001afbd

00018d30 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
   18d30:	b580      	push	{r7, lr}
   18d32:	b088      	sub	sp, #32
   18d34:	af00      	add	r7, sp, #0
   18d36:	60f8      	str	r0, [r7, #12]
   18d38:	60b9      	str	r1, [r7, #8]
   18d3a:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
   18d3c:	2301      	movs	r3, #1
   18d3e:	61fb      	str	r3, [r7, #28]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
   18d40:	4b3d      	ldr	r3, [pc, #244]	; (18e38 <FreeRTOS_CLIProcessCommand+0x108>)
   18d42:	681b      	ldr	r3, [r3, #0]
   18d44:	2b00      	cmp	r3, #0
   18d46:	d144      	bne.n	18dd2 <FreeRTOS_CLIProcessCommand+0xa2>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   18d48:	4b3b      	ldr	r3, [pc, #236]	; (18e38 <FreeRTOS_CLIProcessCommand+0x108>)
   18d4a:	4a3c      	ldr	r2, [pc, #240]	; (18e3c <FreeRTOS_CLIProcessCommand+0x10c>)
   18d4c:	601a      	str	r2, [r3, #0]
   18d4e:	e03a      	b.n	18dc6 <FreeRTOS_CLIProcessCommand+0x96>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
   18d50:	4b39      	ldr	r3, [pc, #228]	; (18e38 <FreeRTOS_CLIProcessCommand+0x108>)
   18d52:	681b      	ldr	r3, [r3, #0]
   18d54:	681b      	ldr	r3, [r3, #0]
   18d56:	681b      	ldr	r3, [r3, #0]
   18d58:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
   18d5a:	69bb      	ldr	r3, [r7, #24]
   18d5c:	0018      	movs	r0, r3
   18d5e:	4b38      	ldr	r3, [pc, #224]	; (18e40 <FreeRTOS_CLIProcessCommand+0x110>)
   18d60:	4798      	blx	r3
   18d62:	0003      	movs	r3, r0
   18d64:	617b      	str	r3, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
   18d66:	68fa      	ldr	r2, [r7, #12]
   18d68:	697b      	ldr	r3, [r7, #20]
   18d6a:	18d3      	adds	r3, r2, r3
   18d6c:	781b      	ldrb	r3, [r3, #0]
   18d6e:	2b20      	cmp	r3, #32
   18d70:	d005      	beq.n	18d7e <FreeRTOS_CLIProcessCommand+0x4e>
   18d72:	68fa      	ldr	r2, [r7, #12]
   18d74:	697b      	ldr	r3, [r7, #20]
   18d76:	18d3      	adds	r3, r2, r3
   18d78:	781b      	ldrb	r3, [r3, #0]
   18d7a:	2b00      	cmp	r3, #0
   18d7c:	d11e      	bne.n	18dbc <FreeRTOS_CLIProcessCommand+0x8c>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
   18d7e:	697a      	ldr	r2, [r7, #20]
   18d80:	69b9      	ldr	r1, [r7, #24]
   18d82:	68fb      	ldr	r3, [r7, #12]
   18d84:	0018      	movs	r0, r3
   18d86:	4b2f      	ldr	r3, [pc, #188]	; (18e44 <FreeRTOS_CLIProcessCommand+0x114>)
   18d88:	4798      	blx	r3
   18d8a:	1e03      	subs	r3, r0, #0
   18d8c:	d116      	bne.n	18dbc <FreeRTOS_CLIProcessCommand+0x8c>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
   18d8e:	4b2a      	ldr	r3, [pc, #168]	; (18e38 <FreeRTOS_CLIProcessCommand+0x108>)
   18d90:	681b      	ldr	r3, [r3, #0]
   18d92:	681b      	ldr	r3, [r3, #0]
   18d94:	7b1b      	ldrb	r3, [r3, #12]
   18d96:	b25b      	sxtb	r3, r3
   18d98:	2b00      	cmp	r3, #0
   18d9a:	db19      	blt.n	18dd0 <FreeRTOS_CLIProcessCommand+0xa0>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
   18d9c:	68fb      	ldr	r3, [r7, #12]
   18d9e:	0018      	movs	r0, r3
   18da0:	4b29      	ldr	r3, [pc, #164]	; (18e48 <FreeRTOS_CLIProcessCommand+0x118>)
   18da2:	4798      	blx	r3
   18da4:	0003      	movs	r3, r0
   18da6:	001a      	movs	r2, r3
   18da8:	4b23      	ldr	r3, [pc, #140]	; (18e38 <FreeRTOS_CLIProcessCommand+0x108>)
   18daa:	681b      	ldr	r3, [r3, #0]
   18dac:	681b      	ldr	r3, [r3, #0]
   18dae:	7b1b      	ldrb	r3, [r3, #12]
   18db0:	b25b      	sxtb	r3, r3
   18db2:	429a      	cmp	r2, r3
   18db4:	d00c      	beq.n	18dd0 <FreeRTOS_CLIProcessCommand+0xa0>
						{
							xReturn = pdFALSE;
   18db6:	2300      	movs	r3, #0
   18db8:	61fb      	str	r3, [r7, #28]
						}
					}

					break;
   18dba:	e009      	b.n	18dd0 <FreeRTOS_CLIProcessCommand+0xa0>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
   18dbc:	4b1e      	ldr	r3, [pc, #120]	; (18e38 <FreeRTOS_CLIProcessCommand+0x108>)
   18dbe:	681b      	ldr	r3, [r3, #0]
   18dc0:	685a      	ldr	r2, [r3, #4]
   18dc2:	4b1d      	ldr	r3, [pc, #116]	; (18e38 <FreeRTOS_CLIProcessCommand+0x108>)
   18dc4:	601a      	str	r2, [r3, #0]
   18dc6:	4b1c      	ldr	r3, [pc, #112]	; (18e38 <FreeRTOS_CLIProcessCommand+0x108>)
   18dc8:	681b      	ldr	r3, [r3, #0]
   18dca:	2b00      	cmp	r3, #0
   18dcc:	d1c0      	bne.n	18d50 <FreeRTOS_CLIProcessCommand+0x20>
   18dce:	e000      	b.n	18dd2 <FreeRTOS_CLIProcessCommand+0xa2>
					break;
   18dd0:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
   18dd2:	4b19      	ldr	r3, [pc, #100]	; (18e38 <FreeRTOS_CLIProcessCommand+0x108>)
   18dd4:	681b      	ldr	r3, [r3, #0]
   18dd6:	2b00      	cmp	r3, #0
   18dd8:	d00c      	beq.n	18df4 <FreeRTOS_CLIProcessCommand+0xc4>
   18dda:	69fb      	ldr	r3, [r7, #28]
   18ddc:	2b00      	cmp	r3, #0
   18dde:	d109      	bne.n	18df4 <FreeRTOS_CLIProcessCommand+0xc4>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   18de0:	687a      	ldr	r2, [r7, #4]
   18de2:	491a      	ldr	r1, [pc, #104]	; (18e4c <FreeRTOS_CLIProcessCommand+0x11c>)
   18de4:	68bb      	ldr	r3, [r7, #8]
   18de6:	0018      	movs	r0, r3
   18de8:	4b19      	ldr	r3, [pc, #100]	; (18e50 <FreeRTOS_CLIProcessCommand+0x120>)
   18dea:	4798      	blx	r3
		pxCommand = NULL;
   18dec:	4b12      	ldr	r3, [pc, #72]	; (18e38 <FreeRTOS_CLIProcessCommand+0x108>)
   18dee:	2200      	movs	r2, #0
   18df0:	601a      	str	r2, [r3, #0]
   18df2:	e01c      	b.n	18e2e <FreeRTOS_CLIProcessCommand+0xfe>
	}
	else if( pxCommand != NULL )
   18df4:	4b10      	ldr	r3, [pc, #64]	; (18e38 <FreeRTOS_CLIProcessCommand+0x108>)
   18df6:	681b      	ldr	r3, [r3, #0]
   18df8:	2b00      	cmp	r3, #0
   18dfa:	d010      	beq.n	18e1e <FreeRTOS_CLIProcessCommand+0xee>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
   18dfc:	4b0e      	ldr	r3, [pc, #56]	; (18e38 <FreeRTOS_CLIProcessCommand+0x108>)
   18dfe:	681b      	ldr	r3, [r3, #0]
   18e00:	681b      	ldr	r3, [r3, #0]
   18e02:	689b      	ldr	r3, [r3, #8]
   18e04:	68fa      	ldr	r2, [r7, #12]
   18e06:	6879      	ldr	r1, [r7, #4]
   18e08:	68b8      	ldr	r0, [r7, #8]
   18e0a:	4798      	blx	r3
   18e0c:	0003      	movs	r3, r0
   18e0e:	61fb      	str	r3, [r7, #28]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
   18e10:	69fb      	ldr	r3, [r7, #28]
   18e12:	2b00      	cmp	r3, #0
   18e14:	d10b      	bne.n	18e2e <FreeRTOS_CLIProcessCommand+0xfe>
		{
			pxCommand = NULL;
   18e16:	4b08      	ldr	r3, [pc, #32]	; (18e38 <FreeRTOS_CLIProcessCommand+0x108>)
   18e18:	2200      	movs	r2, #0
   18e1a:	601a      	str	r2, [r3, #0]
   18e1c:	e007      	b.n	18e2e <FreeRTOS_CLIProcessCommand+0xfe>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
   18e1e:	687a      	ldr	r2, [r7, #4]
   18e20:	490c      	ldr	r1, [pc, #48]	; (18e54 <FreeRTOS_CLIProcessCommand+0x124>)
   18e22:	68bb      	ldr	r3, [r7, #8]
   18e24:	0018      	movs	r0, r3
   18e26:	4b0a      	ldr	r3, [pc, #40]	; (18e50 <FreeRTOS_CLIProcessCommand+0x120>)
   18e28:	4798      	blx	r3
		xReturn = pdFALSE;
   18e2a:	2300      	movs	r3, #0
   18e2c:	61fb      	str	r3, [r7, #28]
	}

	return xReturn;
   18e2e:	69fb      	ldr	r3, [r7, #28]
}
   18e30:	0018      	movs	r0, r3
   18e32:	46bd      	mov	sp, r7
   18e34:	b008      	add	sp, #32
   18e36:	bd80      	pop	{r7, pc}
   18e38:	20000cd4 	.word	0x20000cd4
   18e3c:	200000f8 	.word	0x200000f8
   18e40:	00035be7 	.word	0x00035be7
   18e44:	00035bf5 	.word	0x00035bf5
   18e48:	00018eb9 	.word	0x00018eb9
   18e4c:	00037ea0 	.word	0x00037ea0
   18e50:	00035c17 	.word	0x00035c17
   18e54:	00037ef8 	.word	0x00037ef8

00018e58 <prvHelpCommand>:
	return pcReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
   18e58:	b580      	push	{r7, lr}
   18e5a:	b086      	sub	sp, #24
   18e5c:	af00      	add	r7, sp, #0
   18e5e:	60f8      	str	r0, [r7, #12]
   18e60:	60b9      	str	r1, [r7, #8]
   18e62:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
   18e64:	4b11      	ldr	r3, [pc, #68]	; (18eac <prvHelpCommand+0x54>)
   18e66:	681b      	ldr	r3, [r3, #0]
   18e68:	2b00      	cmp	r3, #0
   18e6a:	d102      	bne.n	18e72 <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
   18e6c:	4b0f      	ldr	r3, [pc, #60]	; (18eac <prvHelpCommand+0x54>)
   18e6e:	4a10      	ldr	r2, [pc, #64]	; (18eb0 <prvHelpCommand+0x58>)
   18e70:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
   18e72:	4b0e      	ldr	r3, [pc, #56]	; (18eac <prvHelpCommand+0x54>)
   18e74:	681b      	ldr	r3, [r3, #0]
   18e76:	681b      	ldr	r3, [r3, #0]
   18e78:	6859      	ldr	r1, [r3, #4]
   18e7a:	68ba      	ldr	r2, [r7, #8]
   18e7c:	68fb      	ldr	r3, [r7, #12]
   18e7e:	0018      	movs	r0, r3
   18e80:	4b0c      	ldr	r3, [pc, #48]	; (18eb4 <prvHelpCommand+0x5c>)
   18e82:	4798      	blx	r3
	pxCommand = pxCommand->pxNext;
   18e84:	4b09      	ldr	r3, [pc, #36]	; (18eac <prvHelpCommand+0x54>)
   18e86:	681b      	ldr	r3, [r3, #0]
   18e88:	685a      	ldr	r2, [r3, #4]
   18e8a:	4b08      	ldr	r3, [pc, #32]	; (18eac <prvHelpCommand+0x54>)
   18e8c:	601a      	str	r2, [r3, #0]

	if( pxCommand == NULL )
   18e8e:	4b07      	ldr	r3, [pc, #28]	; (18eac <prvHelpCommand+0x54>)
   18e90:	681b      	ldr	r3, [r3, #0]
   18e92:	2b00      	cmp	r3, #0
   18e94:	d102      	bne.n	18e9c <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
   18e96:	2300      	movs	r3, #0
   18e98:	617b      	str	r3, [r7, #20]
   18e9a:	e001      	b.n	18ea0 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
   18e9c:	2301      	movs	r3, #1
   18e9e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
   18ea0:	697b      	ldr	r3, [r7, #20]
}
   18ea2:	0018      	movs	r0, r3
   18ea4:	46bd      	mov	sp, r7
   18ea6:	b006      	add	sp, #24
   18ea8:	bd80      	pop	{r7, pc}
   18eaa:	46c0      	nop			; (mov r8, r8)
   18eac:	20000cd8 	.word	0x20000cd8
   18eb0:	200000f8 	.word	0x200000f8
   18eb4:	00035c17 	.word	0x00035c17

00018eb8 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
   18eb8:	b580      	push	{r7, lr}
   18eba:	b084      	sub	sp, #16
   18ebc:	af00      	add	r7, sp, #0
   18ebe:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
   18ec0:	230f      	movs	r3, #15
   18ec2:	18fb      	adds	r3, r7, r3
   18ec4:	2200      	movs	r2, #0
   18ec6:	701a      	strb	r2, [r3, #0]
BaseType_t xLastCharacterWasSpace = pdFALSE;
   18ec8:	2300      	movs	r3, #0
   18eca:	60bb      	str	r3, [r7, #8]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
   18ecc:	e018      	b.n	18f00 <prvGetNumberOfParameters+0x48>
	{
		if( ( *pcCommandString ) == ' ' )
   18ece:	687b      	ldr	r3, [r7, #4]
   18ed0:	781b      	ldrb	r3, [r3, #0]
   18ed2:	2b20      	cmp	r3, #32
   18ed4:	d10f      	bne.n	18ef6 <prvGetNumberOfParameters+0x3e>
		{
			if( xLastCharacterWasSpace != pdTRUE )
   18ed6:	68bb      	ldr	r3, [r7, #8]
   18ed8:	2b01      	cmp	r3, #1
   18eda:	d00e      	beq.n	18efa <prvGetNumberOfParameters+0x42>
			{
				cParameters++;
   18edc:	230f      	movs	r3, #15
   18ede:	18fb      	adds	r3, r7, r3
   18ee0:	781b      	ldrb	r3, [r3, #0]
   18ee2:	b25b      	sxtb	r3, r3
   18ee4:	b2db      	uxtb	r3, r3
   18ee6:	3301      	adds	r3, #1
   18ee8:	b2da      	uxtb	r2, r3
   18eea:	230f      	movs	r3, #15
   18eec:	18fb      	adds	r3, r7, r3
   18eee:	701a      	strb	r2, [r3, #0]
				xLastCharacterWasSpace = pdTRUE;
   18ef0:	2301      	movs	r3, #1
   18ef2:	60bb      	str	r3, [r7, #8]
   18ef4:	e001      	b.n	18efa <prvGetNumberOfParameters+0x42>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
   18ef6:	2300      	movs	r3, #0
   18ef8:	60bb      	str	r3, [r7, #8]
		}

		pcCommandString++;
   18efa:	687b      	ldr	r3, [r7, #4]
   18efc:	3301      	adds	r3, #1
   18efe:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
   18f00:	687b      	ldr	r3, [r7, #4]
   18f02:	781b      	ldrb	r3, [r3, #0]
   18f04:	2b00      	cmp	r3, #0
   18f06:	d1e2      	bne.n	18ece <prvGetNumberOfParameters+0x16>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
   18f08:	68bb      	ldr	r3, [r7, #8]
   18f0a:	2b01      	cmp	r3, #1
   18f0c:	d109      	bne.n	18f22 <prvGetNumberOfParameters+0x6a>
	{
		cParameters--;
   18f0e:	230f      	movs	r3, #15
   18f10:	18fb      	adds	r3, r7, r3
   18f12:	781b      	ldrb	r3, [r3, #0]
   18f14:	b25b      	sxtb	r3, r3
   18f16:	b2db      	uxtb	r3, r3
   18f18:	3b01      	subs	r3, #1
   18f1a:	b2da      	uxtb	r2, r3
   18f1c:	230f      	movs	r3, #15
   18f1e:	18fb      	adds	r3, r7, r3
   18f20:	701a      	strb	r2, [r3, #0]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
   18f22:	230f      	movs	r3, #15
   18f24:	18fb      	adds	r3, r7, r3
   18f26:	781b      	ldrb	r3, [r3, #0]
   18f28:	b25b      	sxtb	r3, r3
}
   18f2a:	0018      	movs	r0, r3
   18f2c:	46bd      	mov	sp, r7
   18f2e:	b004      	add	sp, #16
   18f30:	bd80      	pop	{r7, pc}
	...

00018f34 <prvTraceGetQueueNumber>:
{
	return (uint32_t)ucQueueGetQueueNumber(handle);
}
#else 
uint32_t prvTraceGetQueueNumber(void* handle)
{
   18f34:	b580      	push	{r7, lr}
   18f36:	b082      	sub	sp, #8
   18f38:	af00      	add	r7, sp, #0
   18f3a:	6078      	str	r0, [r7, #4]
	return (uint32_t)uxQueueGetQueueNumber(handle);
   18f3c:	687b      	ldr	r3, [r7, #4]
   18f3e:	0018      	movs	r0, r3
   18f40:	4b03      	ldr	r3, [pc, #12]	; (18f50 <prvTraceGetQueueNumber+0x1c>)
   18f42:	4798      	blx	r3
   18f44:	0003      	movs	r3, r0
}
   18f46:	0018      	movs	r0, r3
   18f48:	46bd      	mov	sp, r7
   18f4a:	b002      	add	sp, #8
   18f4c:	bd80      	pop	{r7, pc}
   18f4e:	46c0      	nop			; (mov r8, r8)
   18f50:	0001c6f5 	.word	0x0001c6f5

00018f54 <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
   18f54:	b580      	push	{r7, lr}
   18f56:	b082      	sub	sp, #8
   18f58:	af00      	add	r7, sp, #0
   18f5a:	6078      	str	r0, [r7, #4]
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
   18f5c:	687b      	ldr	r3, [r7, #4]
   18f5e:	0018      	movs	r0, r3
   18f60:	4b03      	ldr	r3, [pc, #12]	; (18f70 <prvTraceGetQueueType+0x1c>)
   18f62:	4798      	blx	r3
   18f64:	0003      	movs	r3, r0
}
   18f66:	0018      	movs	r0, r3
   18f68:	46bd      	mov	sp, r7
   18f6a:	b002      	add	sp, #8
   18f6c:	bd80      	pop	{r7, pc}
   18f6e:	46c0      	nop			; (mov r8, r8)
   18f70:	0001c721 	.word	0x0001c721

00018f74 <prvTraceGetTaskNumberLow16>:

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
   18f74:	b580      	push	{r7, lr}
   18f76:	b082      	sub	sp, #8
   18f78:	af00      	add	r7, sp, #0
   18f7a:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
   18f7c:	687b      	ldr	r3, [r7, #4]
   18f7e:	0018      	movs	r0, r3
   18f80:	4b03      	ldr	r3, [pc, #12]	; (18f90 <prvTraceGetTaskNumberLow16+0x1c>)
   18f82:	4798      	blx	r3
   18f84:	0003      	movs	r3, r0
   18f86:	b29b      	uxth	r3, r3
}
   18f88:	0018      	movs	r0, r3
   18f8a:	46bd      	mov	sp, r7
   18f8c:	b002      	add	sp, #8
   18f8e:	bd80      	pop	{r7, pc}
   18f90:	0001da51 	.word	0x0001da51

00018f94 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
   18f94:	b580      	push	{r7, lr}
   18f96:	b082      	sub	sp, #8
   18f98:	af00      	add	r7, sp, #0
   18f9a:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
   18f9c:	687b      	ldr	r3, [r7, #4]
   18f9e:	0018      	movs	r0, r3
   18fa0:	4b04      	ldr	r3, [pc, #16]	; (18fb4 <prvTraceGetTaskNumberHigh16+0x20>)
   18fa2:	4798      	blx	r3
   18fa4:	0003      	movs	r3, r0
   18fa6:	0c1b      	lsrs	r3, r3, #16
   18fa8:	b29b      	uxth	r3, r3
}
   18faa:	0018      	movs	r0, r3
   18fac:	46bd      	mov	sp, r7
   18fae:	b002      	add	sp, #8
   18fb0:	bd80      	pop	{r7, pc}
   18fb2:	46c0      	nop			; (mov r8, r8)
   18fb4:	0001da51 	.word	0x0001da51

00018fb8 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
   18fb8:	b580      	push	{r7, lr}
   18fba:	b082      	sub	sp, #8
   18fbc:	af00      	add	r7, sp, #0
   18fbe:	6078      	str	r0, [r7, #4]
   18fc0:	000a      	movs	r2, r1
   18fc2:	1cbb      	adds	r3, r7, #2
   18fc4:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
   18fc6:	687b      	ldr	r3, [r7, #4]
   18fc8:	0018      	movs	r0, r3
   18fca:	4b08      	ldr	r3, [pc, #32]	; (18fec <prvTraceSetTaskNumberLow16+0x34>)
   18fcc:	4798      	blx	r3
   18fce:	0003      	movs	r3, r0
   18fd0:	0c1b      	lsrs	r3, r3, #16
   18fd2:	041a      	lsls	r2, r3, #16
   18fd4:	1cbb      	adds	r3, r7, #2
   18fd6:	881b      	ldrh	r3, [r3, #0]
   18fd8:	431a      	orrs	r2, r3
   18fda:	687b      	ldr	r3, [r7, #4]
   18fdc:	0011      	movs	r1, r2
   18fde:	0018      	movs	r0, r3
   18fe0:	4b03      	ldr	r3, [pc, #12]	; (18ff0 <prvTraceSetTaskNumberLow16+0x38>)
   18fe2:	4798      	blx	r3
}
   18fe4:	46c0      	nop			; (mov r8, r8)
   18fe6:	46bd      	mov	sp, r7
   18fe8:	b002      	add	sp, #8
   18fea:	bd80      	pop	{r7, pc}
   18fec:	0001da51 	.word	0x0001da51
   18ff0:	0001da79 	.word	0x0001da79

00018ff4 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
   18ff4:	b580      	push	{r7, lr}
   18ff6:	b082      	sub	sp, #8
   18ff8:	af00      	add	r7, sp, #0
   18ffa:	6078      	str	r0, [r7, #4]
   18ffc:	000a      	movs	r2, r1
   18ffe:	1cbb      	adds	r3, r7, #2
   19000:	801a      	strh	r2, [r3, #0]
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
   19002:	687b      	ldr	r3, [r7, #4]
   19004:	0018      	movs	r0, r3
   19006:	4b09      	ldr	r3, [pc, #36]	; (1902c <prvTraceSetTaskNumberHigh16+0x38>)
   19008:	4798      	blx	r3
   1900a:	0003      	movs	r3, r0
   1900c:	041b      	lsls	r3, r3, #16
   1900e:	0c1a      	lsrs	r2, r3, #16
   19010:	1cbb      	adds	r3, r7, #2
   19012:	881b      	ldrh	r3, [r3, #0]
   19014:	041b      	lsls	r3, r3, #16
   19016:	431a      	orrs	r2, r3
   19018:	687b      	ldr	r3, [r7, #4]
   1901a:	0011      	movs	r1, r2
   1901c:	0018      	movs	r0, r3
   1901e:	4b04      	ldr	r3, [pc, #16]	; (19030 <prvTraceSetTaskNumberHigh16+0x3c>)
   19020:	4798      	blx	r3
}
   19022:	46c0      	nop			; (mov r8, r8)
   19024:	46bd      	mov	sp, r7
   19026:	b002      	add	sp, #8
   19028:	bd80      	pop	{r7, pc}
   1902a:	46c0      	nop			; (mov r8, r8)
   1902c:	0001da51 	.word	0x0001da51
   19030:	0001da79 	.word	0x0001da79

00019034 <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
   19034:	b580      	push	{r7, lr}
   19036:	b082      	sub	sp, #8
   19038:	af00      	add	r7, sp, #0
   1903a:	6078      	str	r0, [r7, #4]
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
   1903c:	687b      	ldr	r3, [r7, #4]
   1903e:	0018      	movs	r0, r3
   19040:	4b03      	ldr	r3, [pc, #12]	; (19050 <prvTraceGetQueueNumberLow16+0x1c>)
   19042:	4798      	blx	r3
   19044:	0003      	movs	r3, r0
   19046:	b29b      	uxth	r3, r3
}
   19048:	0018      	movs	r0, r3
   1904a:	46bd      	mov	sp, r7
   1904c:	b002      	add	sp, #8
   1904e:	bd80      	pop	{r7, pc}
   19050:	00018f35 	.word	0x00018f35

00019054 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
   19054:	b580      	push	{r7, lr}
   19056:	b082      	sub	sp, #8
   19058:	af00      	add	r7, sp, #0
   1905a:	6078      	str	r0, [r7, #4]
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
   1905c:	687b      	ldr	r3, [r7, #4]
   1905e:	0018      	movs	r0, r3
   19060:	4b04      	ldr	r3, [pc, #16]	; (19074 <prvTraceGetQueueNumberHigh16+0x20>)
   19062:	4798      	blx	r3
   19064:	0003      	movs	r3, r0
   19066:	0c1b      	lsrs	r3, r3, #16
   19068:	b29b      	uxth	r3, r3
}
   1906a:	0018      	movs	r0, r3
   1906c:	46bd      	mov	sp, r7
   1906e:	b002      	add	sp, #8
   19070:	bd80      	pop	{r7, pc}
   19072:	46c0      	nop			; (mov r8, r8)
   19074:	00018f35 	.word	0x00018f35

00019078 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
   19078:	b580      	push	{r7, lr}
   1907a:	b082      	sub	sp, #8
   1907c:	af00      	add	r7, sp, #0
   1907e:	6078      	str	r0, [r7, #4]
   19080:	000a      	movs	r2, r1
   19082:	1cbb      	adds	r3, r7, #2
   19084:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
   19086:	687b      	ldr	r3, [r7, #4]
   19088:	0018      	movs	r0, r3
   1908a:	4b08      	ldr	r3, [pc, #32]	; (190ac <prvTraceSetQueueNumberLow16+0x34>)
   1908c:	4798      	blx	r3
   1908e:	0003      	movs	r3, r0
   19090:	0c1b      	lsrs	r3, r3, #16
   19092:	041a      	lsls	r2, r3, #16
   19094:	1cbb      	adds	r3, r7, #2
   19096:	881b      	ldrh	r3, [r3, #0]
   19098:	431a      	orrs	r2, r3
   1909a:	687b      	ldr	r3, [r7, #4]
   1909c:	0011      	movs	r1, r2
   1909e:	0018      	movs	r0, r3
   190a0:	4b03      	ldr	r3, [pc, #12]	; (190b0 <prvTraceSetQueueNumberLow16+0x38>)
   190a2:	4798      	blx	r3
}
   190a4:	46c0      	nop			; (mov r8, r8)
   190a6:	46bd      	mov	sp, r7
   190a8:	b002      	add	sp, #8
   190aa:	bd80      	pop	{r7, pc}
   190ac:	00018f35 	.word	0x00018f35
   190b0:	0001c709 	.word	0x0001c709

000190b4 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
   190b4:	b580      	push	{r7, lr}
   190b6:	b082      	sub	sp, #8
   190b8:	af00      	add	r7, sp, #0
   190ba:	6078      	str	r0, [r7, #4]
   190bc:	000a      	movs	r2, r1
   190be:	1cbb      	adds	r3, r7, #2
   190c0:	801a      	strh	r2, [r3, #0]
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
   190c2:	687b      	ldr	r3, [r7, #4]
   190c4:	0018      	movs	r0, r3
   190c6:	4b09      	ldr	r3, [pc, #36]	; (190ec <prvTraceSetQueueNumberHigh16+0x38>)
   190c8:	4798      	blx	r3
   190ca:	0003      	movs	r3, r0
   190cc:	041b      	lsls	r3, r3, #16
   190ce:	0c1a      	lsrs	r2, r3, #16
   190d0:	1cbb      	adds	r3, r7, #2
   190d2:	881b      	ldrh	r3, [r3, #0]
   190d4:	041b      	lsls	r3, r3, #16
   190d6:	431a      	orrs	r2, r3
   190d8:	687b      	ldr	r3, [r7, #4]
   190da:	0011      	movs	r1, r2
   190dc:	0018      	movs	r0, r3
   190de:	4b04      	ldr	r3, [pc, #16]	; (190f0 <prvTraceSetQueueNumberHigh16+0x3c>)
   190e0:	4798      	blx	r3
}
   190e2:	46c0      	nop			; (mov r8, r8)
   190e4:	46bd      	mov	sp, r7
   190e6:	b002      	add	sp, #8
   190e8:	bd80      	pop	{r7, pc}
   190ea:	46c0      	nop			; (mov r8, r8)
   190ec:	00018f35 	.word	0x00018f35
   190f0:	0001c709 	.word	0x0001c709

000190f4 <prvAddTaskToStackMonitor>:
TaskStackMonitorEntry_t tasksInStackMonitor[TRC_CFG_STACK_MONITOR_MAX_TASKS] = { NULL };

int tasksNotIncluded = 0;

void prvAddTaskToStackMonitor(void* task)
{
   190f4:	b580      	push	{r7, lr}
   190f6:	b084      	sub	sp, #16
   190f8:	af00      	add	r7, sp, #0
   190fa:	6078      	str	r0, [r7, #4]
	int foundEmptySlot = 0;
   190fc:	2300      	movs	r3, #0
   190fe:	60fb      	str	r3, [r7, #12]

	// find an empty slot
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   19100:	2300      	movs	r3, #0
   19102:	60bb      	str	r3, [r7, #8]
   19104:	e018      	b.n	19138 <prvAddTaskToStackMonitor+0x44>
	{
		if (tasksInStackMonitor[i].tcb == NULL)
   19106:	4b14      	ldr	r3, [pc, #80]	; (19158 <prvAddTaskToStackMonitor+0x64>)
   19108:	68ba      	ldr	r2, [r7, #8]
   1910a:	00d2      	lsls	r2, r2, #3
   1910c:	58d3      	ldr	r3, [r2, r3]
   1910e:	2b00      	cmp	r3, #0
   19110:	d10f      	bne.n	19132 <prvAddTaskToStackMonitor+0x3e>
		{
			tasksInStackMonitor[i].tcb = task;
   19112:	4b11      	ldr	r3, [pc, #68]	; (19158 <prvAddTaskToStackMonitor+0x64>)
   19114:	68ba      	ldr	r2, [r7, #8]
   19116:	00d2      	lsls	r2, r2, #3
   19118:	6879      	ldr	r1, [r7, #4]
   1911a:	50d1      	str	r1, [r2, r3]
			tasksInStackMonitor[i].uiPreviousLowMark = 0xFFFFFFFF;
   1911c:	4a0e      	ldr	r2, [pc, #56]	; (19158 <prvAddTaskToStackMonitor+0x64>)
   1911e:	68bb      	ldr	r3, [r7, #8]
   19120:	00db      	lsls	r3, r3, #3
   19122:	18d3      	adds	r3, r2, r3
   19124:	3304      	adds	r3, #4
   19126:	2201      	movs	r2, #1
   19128:	4252      	negs	r2, r2
   1912a:	601a      	str	r2, [r3, #0]
			foundEmptySlot = 1;
   1912c:	2301      	movs	r3, #1
   1912e:	60fb      	str	r3, [r7, #12]
			break;
   19130:	e005      	b.n	1913e <prvAddTaskToStackMonitor+0x4a>
	for (int i = 0; i < TRC_CFG_STACK_MONITOR_MAX_TASKS; i++)
   19132:	68bb      	ldr	r3, [r7, #8]
   19134:	3301      	adds	r3, #1
   19136:	60bb      	str	r3, [r7, #8]
   19138:	68bb      	ldr	r3, [r7, #8]
   1913a:	2b09      	cmp	r3, #9
   1913c:	dde3      	ble.n	19106 <prvAddTaskToStackMonitor+0x12>
		}
	}

	if (foundEmptySlot == 0)
   1913e:	68fb      	ldr	r3, [r7, #12]
   19140:	2b00      	cmp	r3, #0
   19142:	d104      	bne.n	1914e <prvAddTaskToStackMonitor+0x5a>
	{
		tasksNotIncluded++;
   19144:	4b05      	ldr	r3, [pc, #20]	; (1915c <prvAddTaskToStackMonitor+0x68>)
   19146:	681b      	ldr	r3, [r3, #0]
   19148:	1c5a      	adds	r2, r3, #1
   1914a:	4b04      	ldr	r3, [pc, #16]	; (1915c <prvAddTaskToStackMonitor+0x68>)
   1914c:	601a      	str	r2, [r3, #0]
	}
}
   1914e:	46c0      	nop			; (mov r8, r8)
   19150:	46bd      	mov	sp, r7
   19152:	b004      	add	sp, #16
   19154:	bd80      	pop	{r7, pc}
   19156:	46c0      	nop			; (mov r8, r8)
   19158:	20000ce0 	.word	0x20000ce0
   1915c:	20000d30 	.word	0x20000d30

00019160 <prvReportStackUsage>:
		}
	}
}

void prvReportStackUsage()
{
   19160:	b590      	push	{r4, r7, lr}
   19162:	b085      	sub	sp, #20
   19164:	af00      	add	r7, sp, #0
	static int i = 0;	/* Static index used to loop over the monitored tasks */
	int count = 0;		/* The number of generated reports */
   19166:	2300      	movs	r3, #0
   19168:	60fb      	str	r3, [r7, #12]
	int initial = i;	/* Used to make sure we break if we are back at the inital value */
   1916a:	4b2b      	ldr	r3, [pc, #172]	; (19218 <prvReportStackUsage+0xb8>)
   1916c:	681b      	ldr	r3, [r3, #0]
   1916e:	60bb      	str	r3, [r7, #8]
	
	do
	{
		/* Check the current spot */
		if (tasksInStackMonitor[i].tcb != NULL)
   19170:	4b29      	ldr	r3, [pc, #164]	; (19218 <prvReportStackUsage+0xb8>)
   19172:	681a      	ldr	r2, [r3, #0]
   19174:	4b29      	ldr	r3, [pc, #164]	; (1921c <prvReportStackUsage+0xbc>)
   19176:	00d2      	lsls	r2, r2, #3
   19178:	58d3      	ldr	r3, [r2, r3]
   1917a:	2b00      	cmp	r3, #0
   1917c:	d035      	beq.n	191ea <prvReportStackUsage+0x8a>
		{
			/* Get the amount of unused stack */
			uint32_t unusedStackSpace = uxTaskGetStackHighWaterMark((TaskType)tasksInStackMonitor[i].tcb);
   1917e:	4b26      	ldr	r3, [pc, #152]	; (19218 <prvReportStackUsage+0xb8>)
   19180:	681a      	ldr	r2, [r3, #0]
   19182:	4b26      	ldr	r3, [pc, #152]	; (1921c <prvReportStackUsage+0xbc>)
   19184:	00d2      	lsls	r2, r2, #3
   19186:	58d3      	ldr	r3, [r2, r3]
   19188:	0018      	movs	r0, r3
   1918a:	4b25      	ldr	r3, [pc, #148]	; (19220 <prvReportStackUsage+0xc0>)
   1918c:	4798      	blx	r3
   1918e:	0003      	movs	r3, r0
   19190:	607b      	str	r3, [r7, #4]

			/* Store for later use */
			if (tasksInStackMonitor[i].uiPreviousLowMark > unusedStackSpace)
   19192:	4b21      	ldr	r3, [pc, #132]	; (19218 <prvReportStackUsage+0xb8>)
   19194:	681b      	ldr	r3, [r3, #0]
   19196:	4a21      	ldr	r2, [pc, #132]	; (1921c <prvReportStackUsage+0xbc>)
   19198:	00db      	lsls	r3, r3, #3
   1919a:	18d3      	adds	r3, r2, r3
   1919c:	3304      	adds	r3, #4
   1919e:	681a      	ldr	r2, [r3, #0]
   191a0:	687b      	ldr	r3, [r7, #4]
   191a2:	429a      	cmp	r2, r3
   191a4:	d907      	bls.n	191b6 <prvReportStackUsage+0x56>
				tasksInStackMonitor[i].uiPreviousLowMark = unusedStackSpace;
   191a6:	4b1c      	ldr	r3, [pc, #112]	; (19218 <prvReportStackUsage+0xb8>)
   191a8:	681b      	ldr	r3, [r3, #0]
   191aa:	4a1c      	ldr	r2, [pc, #112]	; (1921c <prvReportStackUsage+0xbc>)
   191ac:	00db      	lsls	r3, r3, #3
   191ae:	18d3      	adds	r3, r2, r3
   191b0:	3304      	adds	r3, #4
   191b2:	687a      	ldr	r2, [r7, #4]
   191b4:	601a      	str	r2, [r3, #0]

#if TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT
			prvTraceStoreKernelCallWithParam(TRACE_UNUSED_STACK, TRACE_CLASS_TASK, TRACE_GET_TASK_NUMBER(tasksInStackMonitor[i].tcb), tasksInStackMonitor[i].uiPreviousLowMark);
   191b6:	4b18      	ldr	r3, [pc, #96]	; (19218 <prvReportStackUsage+0xb8>)
   191b8:	681a      	ldr	r2, [r3, #0]
   191ba:	4b18      	ldr	r3, [pc, #96]	; (1921c <prvReportStackUsage+0xbc>)
   191bc:	00d2      	lsls	r2, r2, #3
   191be:	58d3      	ldr	r3, [r2, r3]
   191c0:	0018      	movs	r0, r3
   191c2:	4b18      	ldr	r3, [pc, #96]	; (19224 <prvReportStackUsage+0xc4>)
   191c4:	4798      	blx	r3
   191c6:	0003      	movs	r3, r0
   191c8:	b2db      	uxtb	r3, r3
   191ca:	0019      	movs	r1, r3
   191cc:	4b12      	ldr	r3, [pc, #72]	; (19218 <prvReportStackUsage+0xb8>)
   191ce:	681b      	ldr	r3, [r3, #0]
   191d0:	4a12      	ldr	r2, [pc, #72]	; (1921c <prvReportStackUsage+0xbc>)
   191d2:	00db      	lsls	r3, r3, #3
   191d4:	18d3      	adds	r3, r2, r3
   191d6:	3304      	adds	r3, #4
   191d8:	681b      	ldr	r3, [r3, #0]
   191da:	000a      	movs	r2, r1
   191dc:	2103      	movs	r1, #3
   191de:	20ea      	movs	r0, #234	; 0xea
   191e0:	4c11      	ldr	r4, [pc, #68]	; (19228 <prvReportStackUsage+0xc8>)
   191e2:	47a0      	blx	r4
#else /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */
			prvTraceStoreEvent2(PSF_EVENT_UNUSED_STACK, (uint32_t)tasksInStackMonitor[i].tcb, tasksInStackMonitor[i].uiPreviousLowMark);
#endif /* TRC_CFG_RECORDER_MODE == TRC_RECORDER_MODE_SNAPSHOT */

			count++;
   191e4:	68fb      	ldr	r3, [r7, #12]
   191e6:	3301      	adds	r3, #1
   191e8:	60fb      	str	r3, [r7, #12]
		}

		i = (i + 1) % TRC_CFG_STACK_MONITOR_MAX_TASKS; // Move i beyond this task
   191ea:	4b0b      	ldr	r3, [pc, #44]	; (19218 <prvReportStackUsage+0xb8>)
   191ec:	681b      	ldr	r3, [r3, #0]
   191ee:	1c5a      	adds	r2, r3, #1
   191f0:	4b0e      	ldr	r3, [pc, #56]	; (1922c <prvReportStackUsage+0xcc>)
   191f2:	210a      	movs	r1, #10
   191f4:	0010      	movs	r0, r2
   191f6:	4798      	blx	r3
   191f8:	000b      	movs	r3, r1
   191fa:	001a      	movs	r2, r3
   191fc:	4b06      	ldr	r3, [pc, #24]	; (19218 <prvReportStackUsage+0xb8>)
   191fe:	601a      	str	r2, [r3, #0]
	} while (count < TRC_CFG_STACK_MONITOR_MAX_REPORTS && i != initial);
   19200:	68fb      	ldr	r3, [r7, #12]
   19202:	2b00      	cmp	r3, #0
   19204:	dc04      	bgt.n	19210 <prvReportStackUsage+0xb0>
   19206:	4b04      	ldr	r3, [pc, #16]	; (19218 <prvReportStackUsage+0xb8>)
   19208:	681a      	ldr	r2, [r3, #0]
   1920a:	68bb      	ldr	r3, [r7, #8]
   1920c:	429a      	cmp	r2, r3
   1920e:	d1af      	bne.n	19170 <prvReportStackUsage+0x10>
}
   19210:	46c0      	nop			; (mov r8, r8)
   19212:	46bd      	mov	sp, r7
   19214:	b005      	add	sp, #20
   19216:	bd90      	pop	{r4, r7, pc}
   19218:	20000d34 	.word	0x20000d34
   1921c:	20000ce0 	.word	0x20000ce0
   19220:	0001dbf1 	.word	0x0001dbf1
   19224:	00018f75 	.word	0x00018f75
   19228:	00019abd 	.word	0x00019abd
   1922c:	00033b35 	.word	0x00033b35

00019230 <prvTraceGetCurrentTaskHandle>:
#endif /* (TRC_CFG_INCLUDE_STREAM_BUFFER_EVENTS == 1 && TRC_CFG_FREERTOS_VERSION >= TRC_FREERTOS_VERSION_10_0_0) */

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
   19230:	b580      	push	{r7, lr}
   19232:	af00      	add	r7, sp, #0
	return xTaskGetCurrentTaskHandle();
   19234:	4b02      	ldr	r3, [pc, #8]	; (19240 <prvTraceGetCurrentTaskHandle+0x10>)
   19236:	4798      	blx	r3
   19238:	0003      	movs	r3, r0
}
   1923a:	0018      	movs	r0, r3
   1923c:	46bd      	mov	sp, r7
   1923e:	bd80      	pop	{r7, pc}
   19240:	0001dc9d 	.word	0x0001dc9d

00019244 <vTraceEnable>:
*
*
* Note: See other implementation of vTraceEnable in trcStreamingRecorder.c
******************************************************************************/
void vTraceEnable(int startOption)
{
   19244:	b590      	push	{r4, r7, lr}
   19246:	b085      	sub	sp, #20
   19248:	af02      	add	r7, sp, #8
   1924a:	6078      	str	r0, [r7, #4]
	prvTraceInitTraceData();
   1924c:	4b14      	ldr	r3, [pc, #80]	; (192a0 <vTraceEnable+0x5c>)
   1924e:	4798      	blx	r3

	if (startOption == TRC_START)
   19250:	687b      	ldr	r3, [r7, #4]
   19252:	2b01      	cmp	r3, #1
   19254:	d102      	bne.n	1925c <vTraceEnable+0x18>
	{
		vTraceStart();
   19256:	4b13      	ldr	r3, [pc, #76]	; (192a4 <vTraceEnable+0x60>)
   19258:	4798      	blx	r3
   1925a:	e00e      	b.n	1927a <vTraceEnable+0x36>
	}
	else if (startOption == TRC_START_AWAIT_HOST)
   1925c:	687b      	ldr	r3, [r7, #4]
   1925e:	2b02      	cmp	r3, #2
   19260:	d104      	bne.n	1926c <vTraceEnable+0x28>
	{
		prvTraceError("vTraceEnable(TRC_START_AWAIT_HOST) not allowed in Snapshot mode");
   19262:	4b11      	ldr	r3, [pc, #68]	; (192a8 <vTraceEnable+0x64>)
   19264:	0018      	movs	r0, r3
   19266:	4b11      	ldr	r3, [pc, #68]	; (192ac <vTraceEnable+0x68>)
   19268:	4798      	blx	r3
   1926a:	e006      	b.n	1927a <vTraceEnable+0x36>
	}
	else if (startOption != TRC_INIT)
   1926c:	687b      	ldr	r3, [r7, #4]
   1926e:	2b00      	cmp	r3, #0
   19270:	d003      	beq.n	1927a <vTraceEnable+0x36>
	{
		prvTraceError("Unexpected argument to vTraceEnable (snapshot mode)");
   19272:	4b0f      	ldr	r3, [pc, #60]	; (192b0 <vTraceEnable+0x6c>)
   19274:	0018      	movs	r0, r3
   19276:	4b0d      	ldr	r3, [pc, #52]	; (192ac <vTraceEnable+0x68>)
   19278:	4798      	blx	r3
	}

#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
	/* Creates the TzCtrl task - reports unsed stack */
	if (HandleTzCtrl == NULL)
   1927a:	4b0e      	ldr	r3, [pc, #56]	; (192b4 <vTraceEnable+0x70>)
   1927c:	681b      	ldr	r3, [r3, #0]
   1927e:	2b00      	cmp	r3, #0
   19280:	d10a      	bne.n	19298 <vTraceEnable+0x54>
	{
#if defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1)
		HandleTzCtrl = xTaskCreateStatic(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, stackTzCtrl, &tcbTzCtrl);
#else /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
		xTaskCreate(TzCtrl, STRING_CAST("TzCtrl"), TRC_CFG_CTRL_TASK_STACK_SIZE, NULL, TRC_CFG_CTRL_TASK_PRIORITY, &HandleTzCtrl);
   19282:	2396      	movs	r3, #150	; 0x96
   19284:	005a      	lsls	r2, r3, #1
   19286:	490c      	ldr	r1, [pc, #48]	; (192b8 <vTraceEnable+0x74>)
   19288:	480c      	ldr	r0, [pc, #48]	; (192bc <vTraceEnable+0x78>)
   1928a:	4b0a      	ldr	r3, [pc, #40]	; (192b4 <vTraceEnable+0x70>)
   1928c:	9301      	str	r3, [sp, #4]
   1928e:	2304      	movs	r3, #4
   19290:	9300      	str	r3, [sp, #0]
   19292:	2300      	movs	r3, #0
   19294:	4c0a      	ldr	r4, [pc, #40]	; (192c0 <vTraceEnable+0x7c>)
   19296:	47a0      	blx	r4
#endif /* defined(configSUPPORT_STATIC_ALLOCATION) && (configSUPPORT_STATIC_ALLOCATION == 1) */
	}

#endif /* defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0) */
}
   19298:	46c0      	nop			; (mov r8, r8)
   1929a:	46bd      	mov	sp, r7
   1929c:	b003      	add	sp, #12
   1929e:	bd90      	pop	{r4, r7, pc}
   192a0:	0001a189 	.word	0x0001a189
   192a4:	000196e1 	.word	0x000196e1
   192a8:	00037f58 	.word	0x00037f58
   192ac:	0001a831 	.word	0x0001a831
   192b0:	00037f98 	.word	0x00037f98
   192b4:	20000cdc 	.word	0x20000cdc
   192b8:	00037fcc 	.word	0x00037fcc
   192bc:	000192c5 	.word	0x000192c5
   192c0:	0001cbf5 	.word	0x0001cbf5

000192c4 <TzCtrl>:
* interface (assuming TRC_STREAM_PORT_USE_INTERNAL_BUFFER == 1) and for
* receiving commands from Tracealyzer. Also does some diagnostics.
******************************************************************************/
#if defined(TRC_CFG_ENABLE_STACK_MONITOR) && (TRC_CFG_ENABLE_STACK_MONITOR == 1) && (TRC_CFG_SCHEDULING_ONLY == 0)
static portTASK_FUNCTION(TzCtrl, pvParameters)
{
   192c4:	b580      	push	{r7, lr}
   192c6:	b082      	sub	sp, #8
   192c8:	af00      	add	r7, sp, #0
   192ca:	6078      	str	r0, [r7, #4]
	(void)pvParameters;

	while (1)
	{
		if (xTraceIsRecordingEnabled())
   192cc:	4b04      	ldr	r3, [pc, #16]	; (192e0 <TzCtrl+0x1c>)
   192ce:	4798      	blx	r3
   192d0:	1e03      	subs	r3, r0, #0
   192d2:	d001      	beq.n	192d8 <TzCtrl+0x14>
		{
			prvReportStackUsage();
   192d4:	4b03      	ldr	r3, [pc, #12]	; (192e4 <TzCtrl+0x20>)
   192d6:	4798      	blx	r3
		}

		vTaskDelay(TRC_CFG_CTRL_TASK_DELAY);
   192d8:	2004      	movs	r0, #4
   192da:	4b03      	ldr	r3, [pc, #12]	; (192e8 <TzCtrl+0x24>)
   192dc:	4798      	blx	r3
		if (xTraceIsRecordingEnabled())
   192de:	e7f5      	b.n	192cc <TzCtrl+0x8>
   192e0:	00019725 	.word	0x00019725
   192e4:	00019161 	.word	0x00019161
   192e8:	0001cf91 	.word	0x0001cf91

000192ec <vTraceInitObjectPropertyTable>:
}
#endif

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
   192ec:	b580      	push	{r7, lr}
   192ee:	af00      	add	r7, sp, #0
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
   192f0:	4b60      	ldr	r3, [pc, #384]	; (19474 <vTraceInitObjectPropertyTable+0x188>)
   192f2:	681b      	ldr	r3, [r3, #0]
   192f4:	2209      	movs	r2, #9
   192f6:	65da      	str	r2, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
   192f8:	4b5e      	ldr	r3, [pc, #376]	; (19474 <vTraceInitObjectPropertyTable+0x188>)
   192fa:	681b      	ldr	r3, [r3, #0]
   192fc:	2264      	movs	r2, #100	; 0x64
   192fe:	210a      	movs	r1, #10
   19300:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[1] = TRC_CFG_NSEMAPHORE;
   19302:	4b5c      	ldr	r3, [pc, #368]	; (19474 <vTraceInitObjectPropertyTable+0x188>)
   19304:	681b      	ldr	r3, [r3, #0]
   19306:	2265      	movs	r2, #101	; 0x65
   19308:	210a      	movs	r1, #10
   1930a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[2] = TRC_CFG_NMUTEX;
   1930c:	4b59      	ldr	r3, [pc, #356]	; (19474 <vTraceInitObjectPropertyTable+0x188>)
   1930e:	681b      	ldr	r3, [r3, #0]
   19310:	2266      	movs	r2, #102	; 0x66
   19312:	210a      	movs	r1, #10
   19314:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[3] = TRC_CFG_NTASK;
   19316:	4b57      	ldr	r3, [pc, #348]	; (19474 <vTraceInitObjectPropertyTable+0x188>)
   19318:	681b      	ldr	r3, [r3, #0]
   1931a:	2267      	movs	r2, #103	; 0x67
   1931c:	210f      	movs	r1, #15
   1931e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[4] = TRC_CFG_NISR;
   19320:	4b54      	ldr	r3, [pc, #336]	; (19474 <vTraceInitObjectPropertyTable+0x188>)
   19322:	681b      	ldr	r3, [r3, #0]
   19324:	2268      	movs	r2, #104	; 0x68
   19326:	2105      	movs	r1, #5
   19328:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[5] = TRC_CFG_NTIMER;
   1932a:	4b52      	ldr	r3, [pc, #328]	; (19474 <vTraceInitObjectPropertyTable+0x188>)
   1932c:	681b      	ldr	r3, [r3, #0]
   1932e:	2269      	movs	r2, #105	; 0x69
   19330:	2105      	movs	r1, #5
   19332:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[6] = TRC_CFG_NEVENTGROUP;
   19334:	4b4f      	ldr	r3, [pc, #316]	; (19474 <vTraceInitObjectPropertyTable+0x188>)
   19336:	681b      	ldr	r3, [r3, #0]
   19338:	226a      	movs	r2, #106	; 0x6a
   1933a:	2105      	movs	r1, #5
   1933c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[7] = TRC_CFG_NSTREAMBUFFER;
   1933e:	4b4d      	ldr	r3, [pc, #308]	; (19474 <vTraceInitObjectPropertyTable+0x188>)
   19340:	681b      	ldr	r3, [r3, #0]
   19342:	226b      	movs	r2, #107	; 0x6b
   19344:	2105      	movs	r1, #5
   19346:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
   19348:	4b4a      	ldr	r3, [pc, #296]	; (19474 <vTraceInitObjectPropertyTable+0x188>)
   1934a:	681b      	ldr	r3, [r3, #0]
   1934c:	226c      	movs	r2, #108	; 0x6c
   1934e:	2105      	movs	r1, #5
   19350:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
   19352:	4b48      	ldr	r3, [pc, #288]	; (19474 <vTraceInitObjectPropertyTable+0x188>)
   19354:	681b      	ldr	r3, [r3, #0]
   19356:	2270      	movs	r2, #112	; 0x70
   19358:	210f      	movs	r1, #15
   1935a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[1] = TRC_CFG_NAME_LEN_SEMAPHORE;
   1935c:	4b45      	ldr	r3, [pc, #276]	; (19474 <vTraceInitObjectPropertyTable+0x188>)
   1935e:	681b      	ldr	r3, [r3, #0]
   19360:	2271      	movs	r2, #113	; 0x71
   19362:	210f      	movs	r1, #15
   19364:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[2] = TRC_CFG_NAME_LEN_MUTEX;
   19366:	4b43      	ldr	r3, [pc, #268]	; (19474 <vTraceInitObjectPropertyTable+0x188>)
   19368:	681b      	ldr	r3, [r3, #0]
   1936a:	2272      	movs	r2, #114	; 0x72
   1936c:	210f      	movs	r1, #15
   1936e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[3] = TRC_CFG_NAME_LEN_TASK;
   19370:	4b40      	ldr	r3, [pc, #256]	; (19474 <vTraceInitObjectPropertyTable+0x188>)
   19372:	681b      	ldr	r3, [r3, #0]
   19374:	2273      	movs	r2, #115	; 0x73
   19376:	210f      	movs	r1, #15
   19378:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[4] = TRC_CFG_NAME_LEN_ISR;
   1937a:	4b3e      	ldr	r3, [pc, #248]	; (19474 <vTraceInitObjectPropertyTable+0x188>)
   1937c:	681b      	ldr	r3, [r3, #0]
   1937e:	2274      	movs	r2, #116	; 0x74
   19380:	210f      	movs	r1, #15
   19382:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[5] = TRC_CFG_NAME_LEN_TIMER;
   19384:	4b3b      	ldr	r3, [pc, #236]	; (19474 <vTraceInitObjectPropertyTable+0x188>)
   19386:	681b      	ldr	r3, [r3, #0]
   19388:	2275      	movs	r2, #117	; 0x75
   1938a:	210f      	movs	r1, #15
   1938c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[6] = TRC_CFG_NAME_LEN_EVENTGROUP;
   1938e:	4b39      	ldr	r3, [pc, #228]	; (19474 <vTraceInitObjectPropertyTable+0x188>)
   19390:	681b      	ldr	r3, [r3, #0]
   19392:	2276      	movs	r2, #118	; 0x76
   19394:	210f      	movs	r1, #15
   19396:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[7] = TRC_CFG_NAME_LEN_STREAMBUFFER;
   19398:	4b36      	ldr	r3, [pc, #216]	; (19474 <vTraceInitObjectPropertyTable+0x188>)
   1939a:	681b      	ldr	r3, [r3, #0]
   1939c:	2277      	movs	r2, #119	; 0x77
   1939e:	210f      	movs	r1, #15
   193a0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
   193a2:	4b34      	ldr	r3, [pc, #208]	; (19474 <vTraceInitObjectPropertyTable+0x188>)
   193a4:	681b      	ldr	r3, [r3, #0]
   193a6:	2278      	movs	r2, #120	; 0x78
   193a8:	210f      	movs	r1, #15
   193aa:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
   193ac:	4b31      	ldr	r3, [pc, #196]	; (19474 <vTraceInitObjectPropertyTable+0x188>)
   193ae:	681b      	ldr	r3, [r3, #0]
   193b0:	227c      	movs	r2, #124	; 0x7c
   193b2:	2110      	movs	r1, #16
   193b4:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[1] = PropertyTableSizeSemaphore;
   193b6:	4b2f      	ldr	r3, [pc, #188]	; (19474 <vTraceInitObjectPropertyTable+0x188>)
   193b8:	681b      	ldr	r3, [r3, #0]
   193ba:	227d      	movs	r2, #125	; 0x7d
   193bc:	2110      	movs	r1, #16
   193be:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[2] = PropertyTableSizeMutex;
   193c0:	4b2c      	ldr	r3, [pc, #176]	; (19474 <vTraceInitObjectPropertyTable+0x188>)
   193c2:	681b      	ldr	r3, [r3, #0]
   193c4:	227e      	movs	r2, #126	; 0x7e
   193c6:	2110      	movs	r1, #16
   193c8:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[3] = PropertyTableSizeTask;
   193ca:	4b2a      	ldr	r3, [pc, #168]	; (19474 <vTraceInitObjectPropertyTable+0x188>)
   193cc:	681b      	ldr	r3, [r3, #0]
   193ce:	227f      	movs	r2, #127	; 0x7f
   193d0:	2113      	movs	r1, #19
   193d2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
   193d4:	4b27      	ldr	r3, [pc, #156]	; (19474 <vTraceInitObjectPropertyTable+0x188>)
   193d6:	681b      	ldr	r3, [r3, #0]
   193d8:	2280      	movs	r2, #128	; 0x80
   193da:	2111      	movs	r1, #17
   193dc:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
   193de:	4b25      	ldr	r3, [pc, #148]	; (19474 <vTraceInitObjectPropertyTable+0x188>)
   193e0:	681b      	ldr	r3, [r3, #0]
   193e2:	2281      	movs	r2, #129	; 0x81
   193e4:	2110      	movs	r1, #16
   193e6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
   193e8:	4b22      	ldr	r3, [pc, #136]	; (19474 <vTraceInitObjectPropertyTable+0x188>)
   193ea:	681b      	ldr	r3, [r3, #0]
   193ec:	2282      	movs	r2, #130	; 0x82
   193ee:	2113      	movs	r1, #19
   193f0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
   193f2:	4b20      	ldr	r3, [pc, #128]	; (19474 <vTraceInitObjectPropertyTable+0x188>)
   193f4:	681b      	ldr	r3, [r3, #0]
   193f6:	2283      	movs	r2, #131	; 0x83
   193f8:	2113      	movs	r1, #19
   193fa:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
   193fc:	4b1d      	ldr	r3, [pc, #116]	; (19474 <vTraceInitObjectPropertyTable+0x188>)
   193fe:	681b      	ldr	r3, [r3, #0]
   19400:	2284      	movs	r2, #132	; 0x84
   19402:	2113      	movs	r1, #19
   19404:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
   19406:	4b1b      	ldr	r3, [pc, #108]	; (19474 <vTraceInitObjectPropertyTable+0x188>)
   19408:	681b      	ldr	r3, [r3, #0]
   1940a:	2288      	movs	r2, #136	; 0x88
   1940c:	2100      	movs	r1, #0
   1940e:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[1] = StartIndexSemaphore;
   19410:	4b18      	ldr	r3, [pc, #96]	; (19474 <vTraceInitObjectPropertyTable+0x188>)
   19412:	681b      	ldr	r3, [r3, #0]
   19414:	228a      	movs	r2, #138	; 0x8a
   19416:	21a0      	movs	r1, #160	; 0xa0
   19418:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[2] = StartIndexMutex;
   1941a:	4b16      	ldr	r3, [pc, #88]	; (19474 <vTraceInitObjectPropertyTable+0x188>)
   1941c:	681b      	ldr	r3, [r3, #0]
   1941e:	228c      	movs	r2, #140	; 0x8c
   19420:	21a0      	movs	r1, #160	; 0xa0
   19422:	0049      	lsls	r1, r1, #1
   19424:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
   19426:	4b13      	ldr	r3, [pc, #76]	; (19474 <vTraceInitObjectPropertyTable+0x188>)
   19428:	681b      	ldr	r3, [r3, #0]
   1942a:	228e      	movs	r2, #142	; 0x8e
   1942c:	21f0      	movs	r1, #240	; 0xf0
   1942e:	0049      	lsls	r1, r1, #1
   19430:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
   19432:	4b10      	ldr	r3, [pc, #64]	; (19474 <vTraceInitObjectPropertyTable+0x188>)
   19434:	681b      	ldr	r3, [r3, #0]
   19436:	2290      	movs	r2, #144	; 0x90
   19438:	490f      	ldr	r1, [pc, #60]	; (19478 <vTraceInitObjectPropertyTable+0x18c>)
   1943a:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
   1943c:	4b0d      	ldr	r3, [pc, #52]	; (19474 <vTraceInitObjectPropertyTable+0x188>)
   1943e:	681b      	ldr	r3, [r3, #0]
   19440:	2292      	movs	r2, #146	; 0x92
   19442:	490e      	ldr	r1, [pc, #56]	; (1947c <vTraceInitObjectPropertyTable+0x190>)
   19444:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
   19446:	4b0b      	ldr	r3, [pc, #44]	; (19474 <vTraceInitObjectPropertyTable+0x188>)
   19448:	681b      	ldr	r3, [r3, #0]
   1944a:	2294      	movs	r2, #148	; 0x94
   1944c:	490c      	ldr	r1, [pc, #48]	; (19480 <vTraceInitObjectPropertyTable+0x194>)
   1944e:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
   19450:	4b08      	ldr	r3, [pc, #32]	; (19474 <vTraceInitObjectPropertyTable+0x188>)
   19452:	681b      	ldr	r3, [r3, #0]
   19454:	2296      	movs	r2, #150	; 0x96
   19456:	490b      	ldr	r1, [pc, #44]	; (19484 <vTraceInitObjectPropertyTable+0x198>)
   19458:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
   1945a:	4b06      	ldr	r3, [pc, #24]	; (19474 <vTraceInitObjectPropertyTable+0x188>)
   1945c:	681b      	ldr	r3, [r3, #0]
   1945e:	2298      	movs	r2, #152	; 0x98
   19460:	218c      	movs	r1, #140	; 0x8c
   19462:	00c9      	lsls	r1, r1, #3
   19464:	5299      	strh	r1, [r3, r2]
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
   19466:	4b03      	ldr	r3, [pc, #12]	; (19474 <vTraceInitObjectPropertyTable+0x188>)
   19468:	681b      	ldr	r3, [r3, #0]
   1946a:	4a07      	ldr	r2, [pc, #28]	; (19488 <vTraceInitObjectPropertyTable+0x19c>)
   1946c:	661a      	str	r2, [r3, #96]	; 0x60
}
   1946e:	46c0      	nop			; (mov r8, r8)
   19470:	46bd      	mov	sp, r7
   19472:	bd80      	pop	{r7, pc}
   19474:	20000df4 	.word	0x20000df4
   19478:	000002fd 	.word	0x000002fd
   1947c:	00000352 	.word	0x00000352
   19480:	000003a2 	.word	0x000003a2
   19484:	00000401 	.word	0x00000401
   19488:	000004bf 	.word	0x000004bf

0001948c <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
   1948c:	b580      	push	{r7, lr}
   1948e:	af00      	add	r7, sp, #0
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
   19490:	4b2e      	ldr	r3, [pc, #184]	; (1954c <vTraceInitObjectHandleStack+0xc0>)
   19492:	2200      	movs	r2, #0
   19494:	825a      	strh	r2, [r3, #18]
   19496:	4b2d      	ldr	r3, [pc, #180]	; (1954c <vTraceInitObjectHandleStack+0xc0>)
   19498:	8a5a      	ldrh	r2, [r3, #18]
   1949a:	4b2c      	ldr	r3, [pc, #176]	; (1954c <vTraceInitObjectHandleStack+0xc0>)
   1949c:	801a      	strh	r2, [r3, #0]
	objectHandleStacks.indexOfNextAvailableHandle[1] = objectHandleStacks.lowestIndexOfClass[1] = (TRC_CFG_NQUEUE);
   1949e:	4b2b      	ldr	r3, [pc, #172]	; (1954c <vTraceInitObjectHandleStack+0xc0>)
   194a0:	220a      	movs	r2, #10
   194a2:	829a      	strh	r2, [r3, #20]
   194a4:	4b29      	ldr	r3, [pc, #164]	; (1954c <vTraceInitObjectHandleStack+0xc0>)
   194a6:	8a9a      	ldrh	r2, [r3, #20]
   194a8:	4b28      	ldr	r3, [pc, #160]	; (1954c <vTraceInitObjectHandleStack+0xc0>)
   194aa:	805a      	strh	r2, [r3, #2]
	objectHandleStacks.indexOfNextAvailableHandle[2] = objectHandleStacks.lowestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE);
   194ac:	4b27      	ldr	r3, [pc, #156]	; (1954c <vTraceInitObjectHandleStack+0xc0>)
   194ae:	2214      	movs	r2, #20
   194b0:	82da      	strh	r2, [r3, #22]
   194b2:	4b26      	ldr	r3, [pc, #152]	; (1954c <vTraceInitObjectHandleStack+0xc0>)
   194b4:	8ada      	ldrh	r2, [r3, #22]
   194b6:	4b25      	ldr	r3, [pc, #148]	; (1954c <vTraceInitObjectHandleStack+0xc0>)
   194b8:	809a      	strh	r2, [r3, #4]
	objectHandleStacks.indexOfNextAvailableHandle[3] = objectHandleStacks.lowestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX);
   194ba:	4b24      	ldr	r3, [pc, #144]	; (1954c <vTraceInitObjectHandleStack+0xc0>)
   194bc:	221e      	movs	r2, #30
   194be:	831a      	strh	r2, [r3, #24]
   194c0:	4b22      	ldr	r3, [pc, #136]	; (1954c <vTraceInitObjectHandleStack+0xc0>)
   194c2:	8b1a      	ldrh	r2, [r3, #24]
   194c4:	4b21      	ldr	r3, [pc, #132]	; (1954c <vTraceInitObjectHandleStack+0xc0>)
   194c6:	80da      	strh	r2, [r3, #6]
	objectHandleStacks.indexOfNextAvailableHandle[4] = objectHandleStacks.lowestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK);
   194c8:	4b20      	ldr	r3, [pc, #128]	; (1954c <vTraceInitObjectHandleStack+0xc0>)
   194ca:	222d      	movs	r2, #45	; 0x2d
   194cc:	835a      	strh	r2, [r3, #26]
   194ce:	4b1f      	ldr	r3, [pc, #124]	; (1954c <vTraceInitObjectHandleStack+0xc0>)
   194d0:	8b5a      	ldrh	r2, [r3, #26]
   194d2:	4b1e      	ldr	r3, [pc, #120]	; (1954c <vTraceInitObjectHandleStack+0xc0>)
   194d4:	811a      	strh	r2, [r3, #8]
	objectHandleStacks.indexOfNextAvailableHandle[5] = objectHandleStacks.lowestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR);
   194d6:	4b1d      	ldr	r3, [pc, #116]	; (1954c <vTraceInitObjectHandleStack+0xc0>)
   194d8:	2232      	movs	r2, #50	; 0x32
   194da:	839a      	strh	r2, [r3, #28]
   194dc:	4b1b      	ldr	r3, [pc, #108]	; (1954c <vTraceInitObjectHandleStack+0xc0>)
   194de:	8b9a      	ldrh	r2, [r3, #28]
   194e0:	4b1a      	ldr	r3, [pc, #104]	; (1954c <vTraceInitObjectHandleStack+0xc0>)
   194e2:	815a      	strh	r2, [r3, #10]
	objectHandleStacks.indexOfNextAvailableHandle[6] = objectHandleStacks.lowestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER);
   194e4:	4b19      	ldr	r3, [pc, #100]	; (1954c <vTraceInitObjectHandleStack+0xc0>)
   194e6:	2237      	movs	r2, #55	; 0x37
   194e8:	83da      	strh	r2, [r3, #30]
   194ea:	4b18      	ldr	r3, [pc, #96]	; (1954c <vTraceInitObjectHandleStack+0xc0>)
   194ec:	8bda      	ldrh	r2, [r3, #30]
   194ee:	4b17      	ldr	r3, [pc, #92]	; (1954c <vTraceInitObjectHandleStack+0xc0>)
   194f0:	819a      	strh	r2, [r3, #12]
	objectHandleStacks.indexOfNextAvailableHandle[7] = objectHandleStacks.lowestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP);
   194f2:	4b16      	ldr	r3, [pc, #88]	; (1954c <vTraceInitObjectHandleStack+0xc0>)
   194f4:	223c      	movs	r2, #60	; 0x3c
   194f6:	841a      	strh	r2, [r3, #32]
   194f8:	4b14      	ldr	r3, [pc, #80]	; (1954c <vTraceInitObjectHandleStack+0xc0>)
   194fa:	8c1a      	ldrh	r2, [r3, #32]
   194fc:	4b13      	ldr	r3, [pc, #76]	; (1954c <vTraceInitObjectHandleStack+0xc0>)
   194fe:	81da      	strh	r2, [r3, #14]
	objectHandleStacks.indexOfNextAvailableHandle[8] = objectHandleStacks.lowestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER);
   19500:	4b12      	ldr	r3, [pc, #72]	; (1954c <vTraceInitObjectHandleStack+0xc0>)
   19502:	2241      	movs	r2, #65	; 0x41
   19504:	845a      	strh	r2, [r3, #34]	; 0x22
   19506:	4b11      	ldr	r3, [pc, #68]	; (1954c <vTraceInitObjectHandleStack+0xc0>)
   19508:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
   1950a:	4b10      	ldr	r3, [pc, #64]	; (1954c <vTraceInitObjectHandleStack+0xc0>)
   1950c:	821a      	strh	r2, [r3, #16]

	objectHandleStacks.highestIndexOfClass[0] = (TRC_CFG_NQUEUE) - 1;
   1950e:	4b0f      	ldr	r3, [pc, #60]	; (1954c <vTraceInitObjectHandleStack+0xc0>)
   19510:	2209      	movs	r2, #9
   19512:	849a      	strh	r2, [r3, #36]	; 0x24
	objectHandleStacks.highestIndexOfClass[1] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) - 1;
   19514:	4b0d      	ldr	r3, [pc, #52]	; (1954c <vTraceInitObjectHandleStack+0xc0>)
   19516:	2213      	movs	r2, #19
   19518:	84da      	strh	r2, [r3, #38]	; 0x26
	objectHandleStacks.highestIndexOfClass[2] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) - 1;
   1951a:	4b0c      	ldr	r3, [pc, #48]	; (1954c <vTraceInitObjectHandleStack+0xc0>)
   1951c:	221d      	movs	r2, #29
   1951e:	851a      	strh	r2, [r3, #40]	; 0x28
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
   19520:	4b0a      	ldr	r3, [pc, #40]	; (1954c <vTraceInitObjectHandleStack+0xc0>)
   19522:	222c      	movs	r2, #44	; 0x2c
   19524:	855a      	strh	r2, [r3, #42]	; 0x2a
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
   19526:	4b09      	ldr	r3, [pc, #36]	; (1954c <vTraceInitObjectHandleStack+0xc0>)
   19528:	2231      	movs	r2, #49	; 0x31
   1952a:	859a      	strh	r2, [r3, #44]	; 0x2c
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
   1952c:	4b07      	ldr	r3, [pc, #28]	; (1954c <vTraceInitObjectHandleStack+0xc0>)
   1952e:	2236      	movs	r2, #54	; 0x36
   19530:	85da      	strh	r2, [r3, #46]	; 0x2e
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
   19532:	4b06      	ldr	r3, [pc, #24]	; (1954c <vTraceInitObjectHandleStack+0xc0>)
   19534:	223b      	movs	r2, #59	; 0x3b
   19536:	861a      	strh	r2, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
   19538:	4b04      	ldr	r3, [pc, #16]	; (1954c <vTraceInitObjectHandleStack+0xc0>)
   1953a:	2240      	movs	r2, #64	; 0x40
   1953c:	865a      	strh	r2, [r3, #50]	; 0x32
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
   1953e:	4b03      	ldr	r3, [pc, #12]	; (1954c <vTraceInitObjectHandleStack+0xc0>)
   19540:	2245      	movs	r2, #69	; 0x45
   19542:	869a      	strh	r2, [r3, #52]	; 0x34
}
   19544:	46c0      	nop			; (mov r8, r8)
   19546:	46bd      	mov	sp, r7
   19548:	bd80      	pop	{r7, pc}
   1954a:	46c0      	nop			; (mov r8, r8)
   1954c:	20000d64 	.word	0x20000d64

00019550 <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
   19550:	b580      	push	{r7, lr}
   19552:	b082      	sub	sp, #8
   19554:	af00      	add	r7, sp, #0
   19556:	0002      	movs	r2, r0
   19558:	1dfb      	adds	r3, r7, #7
   1955a:	701a      	strb	r2, [r3, #0]
	switch(objectclass)
   1955c:	1dfb      	adds	r3, r7, #7
   1955e:	781b      	ldrb	r3, [r3, #0]
   19560:	2b08      	cmp	r3, #8
   19562:	d816      	bhi.n	19592 <pszTraceGetErrorNotEnoughHandles+0x42>
   19564:	009a      	lsls	r2, r3, #2
   19566:	4b0d      	ldr	r3, [pc, #52]	; (1959c <pszTraceGetErrorNotEnoughHandles+0x4c>)
   19568:	18d3      	adds	r3, r2, r3
   1956a:	681b      	ldr	r3, [r3, #0]
   1956c:	469f      	mov	pc, r3
	{
	case TRACE_CLASS_TASK:
		return "Not enough TASK handles - increase TRC_CFG_NTASK in trcSnapshotConfig.h";
   1956e:	4b0c      	ldr	r3, [pc, #48]	; (195a0 <pszTraceGetErrorNotEnoughHandles+0x50>)
   19570:	e010      	b.n	19594 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_ISR:
		return "Not enough ISR handles - increase TRC_CFG_NISR in trcSnapshotConfig.h";
   19572:	4b0c      	ldr	r3, [pc, #48]	; (195a4 <pszTraceGetErrorNotEnoughHandles+0x54>)
   19574:	e00e      	b.n	19594 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_SEMAPHORE:
		return "Not enough SEMAPHORE handles - increase TRC_CFG_NSEMAPHORE in trcSnapshotConfig.h";
   19576:	4b0c      	ldr	r3, [pc, #48]	; (195a8 <pszTraceGetErrorNotEnoughHandles+0x58>)
   19578:	e00c      	b.n	19594 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MUTEX:
		return "Not enough MUTEX handles - increase TRC_CFG_NMUTEX in trcSnapshotConfig.h";
   1957a:	4b0c      	ldr	r3, [pc, #48]	; (195ac <pszTraceGetErrorNotEnoughHandles+0x5c>)
   1957c:	e00a      	b.n	19594 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_QUEUE:
		return "Not enough QUEUE handles - increase TRC_CFG_NQUEUE in trcSnapshotConfig.h";
   1957e:	4b0c      	ldr	r3, [pc, #48]	; (195b0 <pszTraceGetErrorNotEnoughHandles+0x60>)
   19580:	e008      	b.n	19594 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_TIMER:
		return "Not enough TIMER handles - increase TRC_CFG_NTIMER in trcSnapshotConfig.h";
   19582:	4b0c      	ldr	r3, [pc, #48]	; (195b4 <pszTraceGetErrorNotEnoughHandles+0x64>)
   19584:	e006      	b.n	19594 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_EVENTGROUP:
		return "Not enough EVENTGROUP handles - increase TRC_CFG_NEVENTGROUP in trcSnapshotConfig.h";
   19586:	4b0c      	ldr	r3, [pc, #48]	; (195b8 <pszTraceGetErrorNotEnoughHandles+0x68>)
   19588:	e004      	b.n	19594 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_STREAMBUFFER:
		return "Not enough STREAMBUFFER handles - increase TRC_CFG_NSTREAMBUFFER in trcSnapshotConfig.h";
   1958a:	4b0c      	ldr	r3, [pc, #48]	; (195bc <pszTraceGetErrorNotEnoughHandles+0x6c>)
   1958c:	e002      	b.n	19594 <pszTraceGetErrorNotEnoughHandles+0x44>
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
   1958e:	4b0c      	ldr	r3, [pc, #48]	; (195c0 <pszTraceGetErrorNotEnoughHandles+0x70>)
   19590:	e000      	b.n	19594 <pszTraceGetErrorNotEnoughHandles+0x44>
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
   19592:	4b0c      	ldr	r3, [pc, #48]	; (195c4 <pszTraceGetErrorNotEnoughHandles+0x74>)
	}
}
   19594:	0018      	movs	r0, r3
   19596:	46bd      	mov	sp, r7
   19598:	b002      	add	sp, #8
   1959a:	bd80      	pop	{r7, pc}
   1959c:	000382d4 	.word	0x000382d4
   195a0:	00037fd4 	.word	0x00037fd4
   195a4:	0003801c 	.word	0x0003801c
   195a8:	00038064 	.word	0x00038064
   195ac:	000380b8 	.word	0x000380b8
   195b0:	00038104 	.word	0x00038104
   195b4:	00038150 	.word	0x00038150
   195b8:	0003819c 	.word	0x0003819c
   195bc:	000381f0 	.word	0x000381f0
   195c0:	00038248 	.word	0x00038248
   195c4:	000382a4 	.word	0x000382a4

000195c8 <uiTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
uint32_t uiTraceStart(void)
{
   195c8:	b590      	push	{r4, r7, lr}
   195ca:	b087      	sub	sp, #28
   195cc:	af00      	add	r7, sp, #0
	traceHandle handle;
	TRACE_ALLOC_CRITICAL_SECTION();

	handle = 0;
   195ce:	2317      	movs	r3, #23
   195d0:	18fb      	adds	r3, r7, r3
   195d2:	2200      	movs	r2, #0
   195d4:	701a      	strb	r2, [r3, #0]

	if (RecorderDataPtr == NULL)
   195d6:	4b36      	ldr	r3, [pc, #216]	; (196b0 <uiTraceStart+0xe8>)
   195d8:	681b      	ldr	r3, [r3, #0]
   195da:	2b00      	cmp	r3, #0
   195dc:	d10b      	bne.n	195f6 <uiTraceStart+0x2e>
	{
		TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized. Use vTraceEnable() instead!", 0);
   195de:	4b34      	ldr	r3, [pc, #208]	; (196b0 <uiTraceStart+0xe8>)
   195e0:	681b      	ldr	r3, [r3, #0]
   195e2:	2b00      	cmp	r3, #0
   195e4:	d105      	bne.n	195f2 <uiTraceStart+0x2a>
   195e6:	4b33      	ldr	r3, [pc, #204]	; (196b4 <uiTraceStart+0xec>)
   195e8:	0018      	movs	r0, r3
   195ea:	4b33      	ldr	r3, [pc, #204]	; (196b8 <uiTraceStart+0xf0>)
   195ec:	4798      	blx	r3
   195ee:	2300      	movs	r3, #0
   195f0:	e059      	b.n	196a6 <uiTraceStart+0xde>
		return 0;
   195f2:	2300      	movs	r3, #0
   195f4:	e057      	b.n	196a6 <uiTraceStart+0xde>
	}
	
	if (RecorderDataPtr->recorderActive == 1)
   195f6:	4b2e      	ldr	r3, [pc, #184]	; (196b0 <uiTraceStart+0xe8>)
   195f8:	681b      	ldr	r3, [r3, #0]
   195fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   195fc:	2b01      	cmp	r3, #1
   195fe:	d101      	bne.n	19604 <uiTraceStart+0x3c>
		return 1; /* Already running */
   19600:	2301      	movs	r3, #1
   19602:	e050      	b.n	196a6 <uiTraceStart+0xde>

	if (traceErrorMessage == NULL)
   19604:	4b2d      	ldr	r3, [pc, #180]	; (196bc <uiTraceStart+0xf4>)
   19606:	681b      	ldr	r3, [r3, #0]
   19608:	2b00      	cmp	r3, #0
   1960a:	d149      	bne.n	196a0 <uiTraceStart+0xd8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1960c:	f3ef 8310 	mrs	r3, PRIMASK
   19610:	60bb      	str	r3, [r7, #8]
  return(result);
   19612:	68bb      	ldr	r3, [r7, #8]
	{
		trcCRITICAL_SECTION_BEGIN();
   19614:	613b      	str	r3, [r7, #16]
   19616:	2301      	movs	r3, #1
   19618:	60fb      	str	r3, [r7, #12]

    \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1961a:	68fb      	ldr	r3, [r7, #12]
   1961c:	f383 8810 	msr	PRIMASK, r3
   19620:	4b27      	ldr	r3, [pc, #156]	; (196c0 <uiTraceStart+0xf8>)
   19622:	681b      	ldr	r3, [r3, #0]
   19624:	1c5a      	adds	r2, r3, #1
   19626:	4b26      	ldr	r3, [pc, #152]	; (196c0 <uiTraceStart+0xf8>)
   19628:	601a      	str	r2, [r3, #0]
		RecorderDataPtr->recorderActive = 1;
   1962a:	4b21      	ldr	r3, [pc, #132]	; (196b0 <uiTraceStart+0xe8>)
   1962c:	681b      	ldr	r3, [r3, #0]
   1962e:	2201      	movs	r2, #1
   19630:	631a      	str	r2, [r3, #48]	; 0x30

		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
   19632:	4b24      	ldr	r3, [pc, #144]	; (196c4 <uiTraceStart+0xfc>)
   19634:	4798      	blx	r3
   19636:	0003      	movs	r3, r0
   19638:	0018      	movs	r0, r3
   1963a:	4b23      	ldr	r3, [pc, #140]	; (196c8 <uiTraceStart+0x100>)
   1963c:	4798      	blx	r3
   1963e:	0003      	movs	r3, r0
   19640:	001a      	movs	r2, r3
   19642:	2317      	movs	r3, #23
   19644:	18fb      	adds	r3, r7, r3
   19646:	701a      	strb	r2, [r3, #0]
		if (handle == 0)
   19648:	2317      	movs	r3, #23
   1964a:	18fb      	adds	r3, r7, r3
   1964c:	781b      	ldrb	r3, [r3, #0]
   1964e:	2b00      	cmp	r3, #0
   19650:	d116      	bne.n	19680 <uiTraceStart+0xb8>
		{
			/* This occurs if the scheduler is not yet started.
			This creates a dummy "(startup)" task entry internally in the
			recorder */
			handle = prvTraceGetObjectHandle(TRACE_CLASS_TASK);
   19652:	2317      	movs	r3, #23
   19654:	18fc      	adds	r4, r7, r3
   19656:	2003      	movs	r0, #3
   19658:	4b1c      	ldr	r3, [pc, #112]	; (196cc <uiTraceStart+0x104>)
   1965a:	4798      	blx	r3
   1965c:	0003      	movs	r3, r0
   1965e:	7023      	strb	r3, [r4, #0]
			prvTraceSetObjectName(TRACE_CLASS_TASK, handle, "(startup)");
   19660:	4a1b      	ldr	r2, [pc, #108]	; (196d0 <uiTraceStart+0x108>)
   19662:	2317      	movs	r3, #23
   19664:	18fb      	adds	r3, r7, r3
   19666:	781b      	ldrb	r3, [r3, #0]
   19668:	0019      	movs	r1, r3
   1966a:	2003      	movs	r0, #3
   1966c:	4b19      	ldr	r3, [pc, #100]	; (196d4 <uiTraceStart+0x10c>)
   1966e:	4798      	blx	r3

			prvTraceSetPriorityProperty(TRACE_CLASS_TASK, handle, 0);
   19670:	2317      	movs	r3, #23
   19672:	18fb      	adds	r3, r7, r3
   19674:	781b      	ldrb	r3, [r3, #0]
   19676:	2200      	movs	r2, #0
   19678:	0019      	movs	r1, r3
   1967a:	2003      	movs	r0, #3
   1967c:	4b16      	ldr	r3, [pc, #88]	; (196d8 <uiTraceStart+0x110>)
   1967e:	4798      	blx	r3
		}

		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
   19680:	2317      	movs	r3, #23
   19682:	18fb      	adds	r3, r7, r3
   19684:	781b      	ldrb	r3, [r3, #0]
   19686:	0018      	movs	r0, r3
   19688:	4b14      	ldr	r3, [pc, #80]	; (196dc <uiTraceStart+0x114>)
   1968a:	4798      	blx	r3
		trcCRITICAL_SECTION_END();
   1968c:	4b0c      	ldr	r3, [pc, #48]	; (196c0 <uiTraceStart+0xf8>)
   1968e:	681b      	ldr	r3, [r3, #0]
   19690:	1e5a      	subs	r2, r3, #1
   19692:	4b0b      	ldr	r3, [pc, #44]	; (196c0 <uiTraceStart+0xf8>)
   19694:	601a      	str	r2, [r3, #0]
   19696:	693b      	ldr	r3, [r7, #16]
   19698:	607b      	str	r3, [r7, #4]
   1969a:	687b      	ldr	r3, [r7, #4]
   1969c:	f383 8810 	msr	PRIMASK, r3
	}

	return RecorderDataPtr->recorderActive;
   196a0:	4b03      	ldr	r3, [pc, #12]	; (196b0 <uiTraceStart+0xe8>)
   196a2:	681b      	ldr	r3, [r3, #0]
   196a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
}
   196a6:	0018      	movs	r0, r3
   196a8:	46bd      	mov	sp, r7
   196aa:	b007      	add	sp, #28
   196ac:	bd90      	pop	{r4, r7, pc}
   196ae:	46c0      	nop			; (mov r8, r8)
   196b0:	20000df4 	.word	0x20000df4
   196b4:	000382f8 	.word	0x000382f8
   196b8:	0001a831 	.word	0x0001a831
   196bc:	20000d54 	.word	0x20000d54
   196c0:	20000d4c 	.word	0x20000d4c
   196c4:	00019231 	.word	0x00019231
   196c8:	00018f75 	.word	0x00018f75
   196cc:	0001a515 	.word	0x0001a515
   196d0:	0003833c 	.word	0x0003833c
   196d4:	0001a745 	.word	0x0001a745
   196d8:	00019ea9 	.word	0x00019ea9
   196dc:	00019d91 	.word	0x00019d91

000196e0 <vTraceStart>:
 *
 * This function is obsolete, but has been saved for backwards compatibility.
 * We recommend using vTraceEnable instead.
 ******************************************************************************/
void vTraceStart(void)
{
   196e0:	b580      	push	{r7, lr}
   196e2:	af00      	add	r7, sp, #0
	(void)uiTraceStart();
   196e4:	4b02      	ldr	r3, [pc, #8]	; (196f0 <vTraceStart+0x10>)
   196e6:	4798      	blx	r3
}
   196e8:	46c0      	nop			; (mov r8, r8)
   196ea:	46bd      	mov	sp, r7
   196ec:	bd80      	pop	{r7, pc}
   196ee:	46c0      	nop			; (mov r8, r8)
   196f0:	000195c9 	.word	0x000195c9

000196f4 <vTraceStop>:
 *
 * Stops the recorder. The recording can be resumed by calling vTraceStart.
 * This does not reset the recorder. Use vTraceClear if that is desired.
 ******************************************************************************/
void vTraceStop(void)
{
   196f4:	b580      	push	{r7, lr}
   196f6:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   196f8:	4b08      	ldr	r3, [pc, #32]	; (1971c <vTraceStop+0x28>)
   196fa:	681b      	ldr	r3, [r3, #0]
   196fc:	2b00      	cmp	r3, #0
   196fe:	d003      	beq.n	19708 <vTraceStop+0x14>
	{
		RecorderDataPtr->recorderActive = 0;
   19700:	4b06      	ldr	r3, [pc, #24]	; (1971c <vTraceStop+0x28>)
   19702:	681b      	ldr	r3, [r3, #0]
   19704:	2200      	movs	r2, #0
   19706:	631a      	str	r2, [r3, #48]	; 0x30
	}

	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
   19708:	4b05      	ldr	r3, [pc, #20]	; (19720 <vTraceStop+0x2c>)
   1970a:	681b      	ldr	r3, [r3, #0]
   1970c:	2b00      	cmp	r3, #0
   1970e:	d002      	beq.n	19716 <vTraceStop+0x22>
	{
		(*vTraceStopHookPtr)();			/* An application call-back function. */
   19710:	4b03      	ldr	r3, [pc, #12]	; (19720 <vTraceStop+0x2c>)
   19712:	681b      	ldr	r3, [r3, #0]
   19714:	4798      	blx	r3
	}
}
   19716:	46c0      	nop			; (mov r8, r8)
   19718:	46bd      	mov	sp, r7
   1971a:	bd80      	pop	{r7, pc}
   1971c:	20000df4 	.word	0x20000df4
   19720:	20000d5c 	.word	0x20000d5c

00019724 <xTraceIsRecordingEnabled>:
/*******************************************************************************
* xTraceIsRecordingEnabled
* Returns true (1) if the recorder is enabled (i.e. is recording), otherwise 0.
******************************************************************************/
int xTraceIsRecordingEnabled(void)
{
   19724:	b580      	push	{r7, lr}
   19726:	af00      	add	r7, sp, #0
	if (RecorderDataPtr != NULL)
   19728:	4b05      	ldr	r3, [pc, #20]	; (19740 <xTraceIsRecordingEnabled+0x1c>)
   1972a:	681b      	ldr	r3, [r3, #0]
   1972c:	2b00      	cmp	r3, #0
   1972e:	d003      	beq.n	19738 <xTraceIsRecordingEnabled+0x14>
	{
		return (int)RecorderDataPtr->recorderActive;
   19730:	4b03      	ldr	r3, [pc, #12]	; (19740 <xTraceIsRecordingEnabled+0x1c>)
   19732:	681b      	ldr	r3, [r3, #0]
   19734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19736:	e000      	b.n	1973a <xTraceIsRecordingEnabled+0x16>
	}
	else
	{
		return 0;
   19738:	2300      	movs	r3, #0
	}
}
   1973a:	0018      	movs	r0, r3
   1973c:	46bd      	mov	sp, r7
   1973e:	bd80      	pop	{r7, pc}
   19740:	20000df4 	.word	0x20000df4

00019744 <prvTraceStoreTaskReady>:
 * prvTraceStoreTaskReady
 *
 * This function stores a ready state for the task handle sent in as parameter.
 ******************************************************************************/
void prvTraceStoreTaskReady(traceHandle handle) 
{
   19744:	b590      	push	{r4, r7, lr}
   19746:	b089      	sub	sp, #36	; 0x24
   19748:	af00      	add	r7, sp, #0
   1974a:	0002      	movs	r2, r0
   1974c:	1dfb      	adds	r3, r7, #7
   1974e:	701a      	strb	r2, [r3, #0]
	TREvent* tr;
	uint8_t hnd8;

	TRACE_ALLOC_CRITICAL_SECTION();

	if (handle == 0)
   19750:	1dfb      	adds	r3, r7, #7
   19752:	781b      	ldrb	r3, [r3, #0]
   19754:	2b00      	cmp	r3, #0
   19756:	d057      	beq.n	19808 <prvTraceStoreTaskReady+0xc4>
		/*  On FreeRTOS v7.3.0, this occurs when creating tasks due to a bad
		placement of the trace macro. In that case, the events are ignored. */
		return;
	}
	
	if (! readyEventsEnabled)
   19758:	4b2e      	ldr	r3, [pc, #184]	; (19814 <prvTraceStoreTaskReady+0xd0>)
   1975a:	681b      	ldr	r3, [r3, #0]
   1975c:	2b00      	cmp	r3, #0
   1975e:	d055      	beq.n	1980c <prvTraceStoreTaskReady+0xc8>
		a "hidden" (not traced) task, we must therefore disable recording 
		of ready events to avoid an undesired ready event... */
		return;
	}

	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
   19760:	1dfb      	adds	r3, r7, #7
   19762:	781b      	ldrb	r3, [r3, #0]
   19764:	2b0f      	cmp	r3, #15
   19766:	d904      	bls.n	19772 <prvTraceStoreTaskReady+0x2e>
   19768:	4b2b      	ldr	r3, [pc, #172]	; (19818 <prvTraceStoreTaskReady+0xd4>)
   1976a:	0018      	movs	r0, r3
   1976c:	4b2b      	ldr	r3, [pc, #172]	; (1981c <prvTraceStoreTaskReady+0xd8>)
   1976e:	4798      	blx	r3
   19770:	e04d      	b.n	1980e <prvTraceStoreTaskReady+0xca>

	if (recorder_busy)
   19772:	4b2b      	ldr	r3, [pc, #172]	; (19820 <prvTraceStoreTaskReady+0xdc>)
   19774:	681b      	ldr	r3, [r3, #0]
   19776:	2b00      	cmp	r3, #0
   19778:	d004      	beq.n	19784 <prvTraceStoreTaskReady+0x40>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (1)");
   1977a:	4b2a      	ldr	r3, [pc, #168]	; (19824 <prvTraceStoreTaskReady+0xe0>)
   1977c:	0018      	movs	r0, r3
   1977e:	4b27      	ldr	r3, [pc, #156]	; (1981c <prvTraceStoreTaskReady+0xd8>)
   19780:	4798      	blx	r3
		return;
   19782:	e044      	b.n	1980e <prvTraceStoreTaskReady+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19784:	f3ef 8310 	mrs	r3, PRIMASK
   19788:	60fb      	str	r3, [r7, #12]
  return(result);
   1978a:	68fb      	ldr	r3, [r7, #12]
	}

	trcCRITICAL_SECTION_BEGIN();
   1978c:	61fb      	str	r3, [r7, #28]
   1978e:	2301      	movs	r3, #1
   19790:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   19792:	693b      	ldr	r3, [r7, #16]
   19794:	f383 8810 	msr	PRIMASK, r3
   19798:	4b21      	ldr	r3, [pc, #132]	; (19820 <prvTraceStoreTaskReady+0xdc>)
   1979a:	681b      	ldr	r3, [r3, #0]
   1979c:	1c5a      	adds	r2, r3, #1
   1979e:	4b20      	ldr	r3, [pc, #128]	; (19820 <prvTraceStoreTaskReady+0xdc>)
   197a0:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
   197a2:	4b21      	ldr	r3, [pc, #132]	; (19828 <prvTraceStoreTaskReady+0xe4>)
   197a4:	681b      	ldr	r3, [r3, #0]
   197a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   197a8:	2b00      	cmp	r3, #0
   197aa:	d022      	beq.n	197f2 <prvTraceStoreTaskReady+0xae>
	{
		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   197ac:	231a      	movs	r3, #26
   197ae:	18fc      	adds	r4, r7, r3
   197b0:	4b1e      	ldr	r3, [pc, #120]	; (1982c <prvTraceStoreTaskReady+0xe8>)
   197b2:	0018      	movs	r0, r3
   197b4:	4b1e      	ldr	r3, [pc, #120]	; (19830 <prvTraceStoreTaskReady+0xec>)
   197b6:	4798      	blx	r3
   197b8:	0003      	movs	r3, r0
   197ba:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle(handle);
   197bc:	2319      	movs	r3, #25
   197be:	18fb      	adds	r3, r7, r3
   197c0:	1dfa      	adds	r2, r7, #7
   197c2:	7812      	ldrb	r2, [r2, #0]
   197c4:	701a      	strb	r2, [r3, #0]
		tr = (TREvent*)prvTraceNextFreeEventBufferSlot();
   197c6:	4b1b      	ldr	r3, [pc, #108]	; (19834 <prvTraceStoreTaskReady+0xf0>)
   197c8:	4798      	blx	r3
   197ca:	0003      	movs	r3, r0
   197cc:	617b      	str	r3, [r7, #20]
		if (tr != NULL)
   197ce:	697b      	ldr	r3, [r7, #20]
   197d0:	2b00      	cmp	r3, #0
   197d2:	d00e      	beq.n	197f2 <prvTraceStoreTaskReady+0xae>
		{
			tr->type = DIV_TASK_READY;
   197d4:	697b      	ldr	r3, [r7, #20]
   197d6:	2202      	movs	r2, #2
   197d8:	701a      	strb	r2, [r3, #0]
			tr->dts = dts3;
   197da:	697b      	ldr	r3, [r7, #20]
   197dc:	221a      	movs	r2, #26
   197de:	18ba      	adds	r2, r7, r2
   197e0:	8812      	ldrh	r2, [r2, #0]
   197e2:	805a      	strh	r2, [r3, #2]
			tr->objHandle = hnd8;
   197e4:	697b      	ldr	r3, [r7, #20]
   197e6:	2219      	movs	r2, #25
   197e8:	18ba      	adds	r2, r7, r2
   197ea:	7812      	ldrb	r2, [r2, #0]
   197ec:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   197ee:	4b12      	ldr	r3, [pc, #72]	; (19838 <prvTraceStoreTaskReady+0xf4>)
   197f0:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   197f2:	4b0b      	ldr	r3, [pc, #44]	; (19820 <prvTraceStoreTaskReady+0xdc>)
   197f4:	681b      	ldr	r3, [r3, #0]
   197f6:	1e5a      	subs	r2, r3, #1
   197f8:	4b09      	ldr	r3, [pc, #36]	; (19820 <prvTraceStoreTaskReady+0xdc>)
   197fa:	601a      	str	r2, [r3, #0]
   197fc:	69fb      	ldr	r3, [r7, #28]
   197fe:	60bb      	str	r3, [r7, #8]
   19800:	68bb      	ldr	r3, [r7, #8]
   19802:	f383 8810 	msr	PRIMASK, r3
   19806:	e002      	b.n	1980e <prvTraceStoreTaskReady+0xca>
		return;
   19808:	46c0      	nop			; (mov r8, r8)
   1980a:	e000      	b.n	1980e <prvTraceStoreTaskReady+0xca>
		return;
   1980c:	46c0      	nop			; (mov r8, r8)
}
   1980e:	46bd      	mov	sp, r7
   19810:	b009      	add	sp, #36	; 0x24
   19812:	bd90      	pop	{r4, r7, pc}
   19814:	2000010c 	.word	0x2000010c
   19818:	000386a4 	.word	0x000386a4
   1981c:	0001a831 	.word	0x0001a831
   19820:	20000d4c 	.word	0x20000d4c
   19824:	000386e4 	.word	0x000386e4
   19828:	20000df4 	.word	0x20000df4
   1982c:	0000ffff 	.word	0x0000ffff
   19830:	0001aa45 	.word	0x0001aa45
   19834:	0001a3e9 	.word	0x0001a3e9
   19838:	0001a9ed 	.word	0x0001a9ed

0001983c <vTraceStoreMemMangEvent>:
 * Note: On "free" calls, the signed_size parameter should be negative.
 ******************************************************************************/
#if (TRC_CFG_INCLUDE_MEMMANG_EVENTS == 1)
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void vTraceStoreMemMangEvent(uint32_t ecode, uint32_t address, int32_t signed_size)
{
   1983c:	b580      	push	{r7, lr}
   1983e:	b08e      	sub	sp, #56	; 0x38
   19840:	af00      	add	r7, sp, #0
   19842:	60f8      	str	r0, [r7, #12]
   19844:	60b9      	str	r1, [r7, #8]
   19846:	607a      	str	r2, [r7, #4]
	uint16_t addr_low;
	uint8_t addr_high;
	uint32_t size;
	TRACE_ALLOC_CRITICAL_SECTION();

	if (RecorderDataPtr == NULL)
   19848:	4b48      	ldr	r3, [pc, #288]	; (1996c <vTraceStoreMemMangEvent+0x130>)
   1984a:	681b      	ldr	r3, [r3, #0]
   1984c:	2b00      	cmp	r3, #0
   1984e:	d100      	bne.n	19852 <vTraceStoreMemMangEvent+0x16>
   19850:	e088      	b.n	19964 <vTraceStoreMemMangEvent+0x128>
	{
		/* Occurs in vTraceInitTraceData, if using dynamic allocation. */
		return;
	}
	
	if (signed_size < 0)
   19852:	687b      	ldr	r3, [r7, #4]
   19854:	2b00      	cmp	r3, #0
   19856:	da03      	bge.n	19860 <vTraceStoreMemMangEvent+0x24>
		size = (uint32_t)(- signed_size);
   19858:	687b      	ldr	r3, [r7, #4]
   1985a:	425b      	negs	r3, r3
   1985c:	637b      	str	r3, [r7, #52]	; 0x34
   1985e:	e001      	b.n	19864 <vTraceStoreMemMangEvent+0x28>
	else
		size = (uint32_t)(signed_size);
   19860:	687b      	ldr	r3, [r7, #4]
   19862:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19864:	f3ef 8310 	mrs	r3, PRIMASK
   19868:	61bb      	str	r3, [r7, #24]
  return(result);
   1986a:	69bb      	ldr	r3, [r7, #24]

	trcCRITICAL_SECTION_BEGIN();
   1986c:	633b      	str	r3, [r7, #48]	; 0x30
   1986e:	2301      	movs	r3, #1
   19870:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   19872:	69fb      	ldr	r3, [r7, #28]
   19874:	f383 8810 	msr	PRIMASK, r3
   19878:	4b3d      	ldr	r3, [pc, #244]	; (19970 <vTraceStoreMemMangEvent+0x134>)
   1987a:	681b      	ldr	r3, [r3, #0]
   1987c:	1c5a      	adds	r2, r3, #1
   1987e:	4b3c      	ldr	r3, [pc, #240]	; (19970 <vTraceStoreMemMangEvent+0x134>)
   19880:	601a      	str	r2, [r3, #0]
	
	/* Only update heapMemUsage if we have a valid address */
	if (address != 0)
   19882:	68bb      	ldr	r3, [r7, #8]
   19884:	2b00      	cmp	r3, #0
   19886:	d005      	beq.n	19894 <vTraceStoreMemMangEvent+0x58>
		heapMemUsage += (uint32_t)signed_size;
   19888:	4b3a      	ldr	r3, [pc, #232]	; (19974 <vTraceStoreMemMangEvent+0x138>)
   1988a:	681a      	ldr	r2, [r3, #0]
   1988c:	687b      	ldr	r3, [r7, #4]
   1988e:	18d2      	adds	r2, r2, r3
   19890:	4b38      	ldr	r3, [pc, #224]	; (19974 <vTraceStoreMemMangEvent+0x138>)
   19892:	601a      	str	r2, [r3, #0]
	
	if (RecorderDataPtr->recorderActive)
   19894:	4b35      	ldr	r3, [pc, #212]	; (1996c <vTraceStoreMemMangEvent+0x130>)
   19896:	681b      	ldr	r3, [r3, #0]
   19898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1989a:	2b00      	cmp	r3, #0
   1989c:	d057      	beq.n	1994e <vTraceStoreMemMangEvent+0x112>
	{
		dts1 = (uint8_t)prvTraceGetDTS(0xFF);
   1989e:	20ff      	movs	r0, #255	; 0xff
   198a0:	4b35      	ldr	r3, [pc, #212]	; (19978 <vTraceStoreMemMangEvent+0x13c>)
   198a2:	4798      	blx	r3
   198a4:	0003      	movs	r3, r0
   198a6:	001a      	movs	r2, r3
   198a8:	232f      	movs	r3, #47	; 0x2f
   198aa:	18fb      	adds	r3, r7, r3
   198ac:	701a      	strb	r2, [r3, #0]
		size_low = (uint16_t)prvTraceGetParam(0xFFFF, size);
   198ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   198b0:	4a32      	ldr	r2, [pc, #200]	; (1997c <vTraceStoreMemMangEvent+0x140>)
   198b2:	0019      	movs	r1, r3
   198b4:	0010      	movs	r0, r2
   198b6:	4b32      	ldr	r3, [pc, #200]	; (19980 <vTraceStoreMemMangEvent+0x144>)
   198b8:	4798      	blx	r3
   198ba:	0002      	movs	r2, r0
   198bc:	232c      	movs	r3, #44	; 0x2c
   198be:	18fb      	adds	r3, r7, r3
   198c0:	801a      	strh	r2, [r3, #0]
		ms = (MemEventSize *)prvTraceNextFreeEventBufferSlot();
   198c2:	4b30      	ldr	r3, [pc, #192]	; (19984 <vTraceStoreMemMangEvent+0x148>)
   198c4:	4798      	blx	r3
   198c6:	0003      	movs	r3, r0
   198c8:	62bb      	str	r3, [r7, #40]	; 0x28

		if (ms != NULL)
   198ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   198cc:	2b00      	cmp	r3, #0
   198ce:	d03e      	beq.n	1994e <vTraceStoreMemMangEvent+0x112>
		{
			ms->dts = dts1;
   198d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   198d2:	222f      	movs	r2, #47	; 0x2f
   198d4:	18ba      	adds	r2, r7, r2
   198d6:	7812      	ldrb	r2, [r2, #0]
   198d8:	705a      	strb	r2, [r3, #1]
			ms->type = NULL_EVENT; /* Updated when all events are written */
   198da:	6abb      	ldr	r3, [r7, #40]	; 0x28
   198dc:	2200      	movs	r2, #0
   198de:	701a      	strb	r2, [r3, #0]
			ms->size = size_low;
   198e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   198e2:	222c      	movs	r2, #44	; 0x2c
   198e4:	18ba      	adds	r2, r7, r2
   198e6:	8812      	ldrh	r2, [r2, #0]
   198e8:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   198ea:	4b27      	ldr	r3, [pc, #156]	; (19988 <vTraceStoreMemMangEvent+0x14c>)
   198ec:	4798      	blx	r3
				addr_low = address & 0xFFFF;          
				addr_high = (address >> 16) & 0xFF;
			#else
				/* The whole 32 bit address is stored using a second event record
				for the upper 16 bit */
				addr_low = (uint16_t)prvTraceGetParam(0xFFFF, address);
   198ee:	68bb      	ldr	r3, [r7, #8]
   198f0:	4a22      	ldr	r2, [pc, #136]	; (1997c <vTraceStoreMemMangEvent+0x140>)
   198f2:	0019      	movs	r1, r3
   198f4:	0010      	movs	r0, r2
   198f6:	4b22      	ldr	r3, [pc, #136]	; (19980 <vTraceStoreMemMangEvent+0x144>)
   198f8:	4798      	blx	r3
   198fa:	0002      	movs	r2, r0
   198fc:	2326      	movs	r3, #38	; 0x26
   198fe:	18fb      	adds	r3, r7, r3
   19900:	801a      	strh	r2, [r3, #0]
				addr_high = 0;
   19902:	2325      	movs	r3, #37	; 0x25
   19904:	18fb      	adds	r3, r7, r3
   19906:	2200      	movs	r2, #0
   19908:	701a      	strb	r2, [r3, #0]
			#endif

			ma = (MemEventAddr *) prvTraceNextFreeEventBufferSlot();
   1990a:	4b1e      	ldr	r3, [pc, #120]	; (19984 <vTraceStoreMemMangEvent+0x148>)
   1990c:	4798      	blx	r3
   1990e:	0003      	movs	r3, r0
   19910:	623b      	str	r3, [r7, #32]
			if (ma != NULL)
   19912:	6a3b      	ldr	r3, [r7, #32]
   19914:	2b00      	cmp	r3, #0
   19916:	d01a      	beq.n	1994e <vTraceStoreMemMangEvent+0x112>
			{
				ma->addr_low = addr_low;
   19918:	6a3b      	ldr	r3, [r7, #32]
   1991a:	2226      	movs	r2, #38	; 0x26
   1991c:	18ba      	adds	r2, r7, r2
   1991e:	8812      	ldrh	r2, [r2, #0]
   19920:	805a      	strh	r2, [r3, #2]
				ma->addr_high = addr_high;
   19922:	6a3b      	ldr	r3, [r7, #32]
   19924:	2225      	movs	r2, #37	; 0x25
   19926:	18ba      	adds	r2, r7, r2
   19928:	7812      	ldrb	r2, [r2, #0]
   1992a:	705a      	strb	r2, [r3, #1]
				ma->type = (uint8_t) (ecode  + 1); /* Note this! */
   1992c:	68fb      	ldr	r3, [r7, #12]
   1992e:	b2db      	uxtb	r3, r3
   19930:	3301      	adds	r3, #1
   19932:	b2da      	uxtb	r2, r3
   19934:	6a3b      	ldr	r3, [r7, #32]
   19936:	701a      	strb	r2, [r3, #0]
				ms->type = (uint8_t) ecode;
   19938:	68fb      	ldr	r3, [r7, #12]
   1993a:	b2da      	uxtb	r2, r3
   1993c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1993e:	701a      	strb	r2, [r3, #0]
				prvTraceUpdateCounters();					
   19940:	4b11      	ldr	r3, [pc, #68]	; (19988 <vTraceStoreMemMangEvent+0x14c>)
   19942:	4798      	blx	r3
				RecorderDataPtr->heapMemUsage = heapMemUsage;
   19944:	4b09      	ldr	r3, [pc, #36]	; (1996c <vTraceStoreMemMangEvent+0x130>)
   19946:	681b      	ldr	r3, [r3, #0]
   19948:	4a0a      	ldr	r2, [pc, #40]	; (19974 <vTraceStoreMemMangEvent+0x138>)
   1994a:	6812      	ldr	r2, [r2, #0]
   1994c:	651a      	str	r2, [r3, #80]	; 0x50
			}
		}
	}
	trcCRITICAL_SECTION_END();
   1994e:	4b08      	ldr	r3, [pc, #32]	; (19970 <vTraceStoreMemMangEvent+0x134>)
   19950:	681b      	ldr	r3, [r3, #0]
   19952:	1e5a      	subs	r2, r3, #1
   19954:	4b06      	ldr	r3, [pc, #24]	; (19970 <vTraceStoreMemMangEvent+0x134>)
   19956:	601a      	str	r2, [r3, #0]
   19958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1995a:	617b      	str	r3, [r7, #20]
   1995c:	697b      	ldr	r3, [r7, #20]
   1995e:	f383 8810 	msr	PRIMASK, r3
   19962:	e000      	b.n	19966 <vTraceStoreMemMangEvent+0x12a>
		return;
   19964:	46c0      	nop			; (mov r8, r8)
}
   19966:	46bd      	mov	sp, r7
   19968:	b00e      	add	sp, #56	; 0x38
   1996a:	bd80      	pop	{r7, pc}
   1996c:	20000df4 	.word	0x20000df4
   19970:	20000d4c 	.word	0x20000d4c
   19974:	20000d60 	.word	0x20000d60
   19978:	0001aa45 	.word	0x0001aa45
   1997c:	0000ffff 	.word	0x0000ffff
   19980:	00019c09 	.word	0x00019c09
   19984:	0001a3e9 	.word	0x0001a3e9
   19988:	0001a9ed 	.word	0x0001a9ed

0001998c <prvTraceStoreKernelCall>:
 * This is the main integration point for storing kernel calls, and
 * is called by the hooks in trcKernelHooks.h (see trcKernelPort.h for event codes).
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCall(uint32_t ecode, traceObjectClass objectClass, uint32_t objectNumber)
{
   1998c:	b590      	push	{r4, r7, lr}
   1998e:	b08b      	sub	sp, #44	; 0x2c
   19990:	af00      	add	r7, sp, #0
   19992:	60f8      	str	r0, [r7, #12]
   19994:	607a      	str	r2, [r7, #4]
   19996:	230b      	movs	r3, #11
   19998:	18fb      	adds	r3, r7, r3
   1999a:	1c0a      	adds	r2, r1, #0
   1999c:	701a      	strb	r2, [r3, #0]
	KernelCall * kse;
	uint16_t dts1;
	uint8_t hnd8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
   1999e:	68fb      	ldr	r3, [r7, #12]
   199a0:	2bfe      	cmp	r3, #254	; 0xfe
   199a2:	d904      	bls.n	199ae <prvTraceStoreKernelCall+0x22>
   199a4:	4b39      	ldr	r3, [pc, #228]	; (19a8c <prvTraceStoreKernelCall+0x100>)
   199a6:	0018      	movs	r0, r3
   199a8:	4b39      	ldr	r3, [pc, #228]	; (19a90 <prvTraceStoreKernelCall+0x104>)
   199aa:	4798      	blx	r3
   199ac:	e06b      	b.n	19a86 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   199ae:	230b      	movs	r3, #11
   199b0:	18fb      	adds	r3, r7, r3
   199b2:	781b      	ldrb	r3, [r3, #0]
   199b4:	2b08      	cmp	r3, #8
   199b6:	d904      	bls.n	199c2 <prvTraceStoreKernelCall+0x36>
   199b8:	4b36      	ldr	r3, [pc, #216]	; (19a94 <prvTraceStoreKernelCall+0x108>)
   199ba:	0018      	movs	r0, r3
   199bc:	4b34      	ldr	r3, [pc, #208]	; (19a90 <prvTraceStoreKernelCall+0x104>)
   199be:	4798      	blx	r3
   199c0:	e061      	b.n	19a86 <prvTraceStoreKernelCall+0xfa>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
   199c2:	4b35      	ldr	r3, [pc, #212]	; (19a98 <prvTraceStoreKernelCall+0x10c>)
   199c4:	681a      	ldr	r2, [r3, #0]
   199c6:	230b      	movs	r3, #11
   199c8:	18fb      	adds	r3, r7, r3
   199ca:	781b      	ldrb	r3, [r3, #0]
   199cc:	2164      	movs	r1, #100	; 0x64
   199ce:	18d3      	adds	r3, r2, r3
   199d0:	185b      	adds	r3, r3, r1
   199d2:	781b      	ldrb	r3, [r3, #0]
   199d4:	001a      	movs	r2, r3
   199d6:	687b      	ldr	r3, [r7, #4]
   199d8:	429a      	cmp	r2, r3
   199da:	d204      	bcs.n	199e6 <prvTraceStoreKernelCall+0x5a>
   199dc:	4b2f      	ldr	r3, [pc, #188]	; (19a9c <prvTraceStoreKernelCall+0x110>)
   199de:	0018      	movs	r0, r3
   199e0:	4b2b      	ldr	r3, [pc, #172]	; (19a90 <prvTraceStoreKernelCall+0x104>)
   199e2:	4798      	blx	r3
   199e4:	e04f      	b.n	19a86 <prvTraceStoreKernelCall+0xfa>

	if (recorder_busy)
   199e6:	4b2e      	ldr	r3, [pc, #184]	; (19aa0 <prvTraceStoreKernelCall+0x114>)
   199e8:	681b      	ldr	r3, [r3, #0]
   199ea:	2b00      	cmp	r3, #0
   199ec:	d004      	beq.n	199f8 <prvTraceStoreKernelCall+0x6c>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (2)");
   199ee:	4b2d      	ldr	r3, [pc, #180]	; (19aa4 <prvTraceStoreKernelCall+0x118>)
   199f0:	0018      	movs	r0, r3
   199f2:	4b27      	ldr	r3, [pc, #156]	; (19a90 <prvTraceStoreKernelCall+0x104>)
   199f4:	4798      	blx	r3
		return;
   199f6:	e046      	b.n	19a86 <prvTraceStoreKernelCall+0xfa>
	}

	if (handle_of_last_logged_task == 0)
   199f8:	4b2b      	ldr	r3, [pc, #172]	; (19aa8 <prvTraceStoreKernelCall+0x11c>)
   199fa:	781b      	ldrb	r3, [r3, #0]
   199fc:	2b00      	cmp	r3, #0
   199fe:	d041      	beq.n	19a84 <prvTraceStoreKernelCall+0xf8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19a00:	f3ef 8310 	mrs	r3, PRIMASK
   19a04:	617b      	str	r3, [r7, #20]
  return(result);
   19a06:	697b      	ldr	r3, [r7, #20]
	{
		return;
	}

	trcCRITICAL_SECTION_BEGIN();
   19a08:	627b      	str	r3, [r7, #36]	; 0x24
   19a0a:	2301      	movs	r3, #1
   19a0c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   19a0e:	69bb      	ldr	r3, [r7, #24]
   19a10:	f383 8810 	msr	PRIMASK, r3
   19a14:	4b22      	ldr	r3, [pc, #136]	; (19aa0 <prvTraceStoreKernelCall+0x114>)
   19a16:	681b      	ldr	r3, [r3, #0]
   19a18:	1c5a      	adds	r2, r3, #1
   19a1a:	4b21      	ldr	r3, [pc, #132]	; (19aa0 <prvTraceStoreKernelCall+0x114>)
   19a1c:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive)
   19a1e:	4b1e      	ldr	r3, [pc, #120]	; (19a98 <prvTraceStoreKernelCall+0x10c>)
   19a20:	681b      	ldr	r3, [r3, #0]
   19a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19a24:	2b00      	cmp	r3, #0
   19a26:	d022      	beq.n	19a6e <prvTraceStoreKernelCall+0xe2>
	{
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
   19a28:	2322      	movs	r3, #34	; 0x22
   19a2a:	18fc      	adds	r4, r7, r3
   19a2c:	4b1f      	ldr	r3, [pc, #124]	; (19aac <prvTraceStoreKernelCall+0x120>)
   19a2e:	0018      	movs	r0, r3
   19a30:	4b1f      	ldr	r3, [pc, #124]	; (19ab0 <prvTraceStoreKernelCall+0x124>)
   19a32:	4798      	blx	r3
   19a34:	0003      	movs	r3, r0
   19a36:	8023      	strh	r3, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   19a38:	2321      	movs	r3, #33	; 0x21
   19a3a:	18fb      	adds	r3, r7, r3
   19a3c:	687a      	ldr	r2, [r7, #4]
   19a3e:	701a      	strb	r2, [r3, #0]
		kse = (KernelCall*) prvTraceNextFreeEventBufferSlot();
   19a40:	4b1c      	ldr	r3, [pc, #112]	; (19ab4 <prvTraceStoreKernelCall+0x128>)
   19a42:	4798      	blx	r3
   19a44:	0003      	movs	r3, r0
   19a46:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   19a48:	69fb      	ldr	r3, [r7, #28]
   19a4a:	2b00      	cmp	r3, #0
   19a4c:	d00f      	beq.n	19a6e <prvTraceStoreKernelCall+0xe2>
		{
			kse->dts = dts1;
   19a4e:	69fb      	ldr	r3, [r7, #28]
   19a50:	2222      	movs	r2, #34	; 0x22
   19a52:	18ba      	adds	r2, r7, r2
   19a54:	8812      	ldrh	r2, [r2, #0]
   19a56:	805a      	strh	r2, [r3, #2]
			kse->type = (uint8_t)ecode;
   19a58:	68fb      	ldr	r3, [r7, #12]
   19a5a:	b2da      	uxtb	r2, r3
   19a5c:	69fb      	ldr	r3, [r7, #28]
   19a5e:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   19a60:	69fb      	ldr	r3, [r7, #28]
   19a62:	2221      	movs	r2, #33	; 0x21
   19a64:	18ba      	adds	r2, r7, r2
   19a66:	7812      	ldrb	r2, [r2, #0]
   19a68:	705a      	strb	r2, [r3, #1]
			prvTraceUpdateCounters();
   19a6a:	4b13      	ldr	r3, [pc, #76]	; (19ab8 <prvTraceStoreKernelCall+0x12c>)
   19a6c:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   19a6e:	4b0c      	ldr	r3, [pc, #48]	; (19aa0 <prvTraceStoreKernelCall+0x114>)
   19a70:	681b      	ldr	r3, [r3, #0]
   19a72:	1e5a      	subs	r2, r3, #1
   19a74:	4b0a      	ldr	r3, [pc, #40]	; (19aa0 <prvTraceStoreKernelCall+0x114>)
   19a76:	601a      	str	r2, [r3, #0]
   19a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19a7a:	613b      	str	r3, [r7, #16]
   19a7c:	693b      	ldr	r3, [r7, #16]
   19a7e:	f383 8810 	msr	PRIMASK, r3
   19a82:	e000      	b.n	19a86 <prvTraceStoreKernelCall+0xfa>
		return;
   19a84:	46c0      	nop			; (mov r8, r8)
}
   19a86:	46bd      	mov	sp, r7
   19a88:	b00b      	add	sp, #44	; 0x2c
   19a8a:	bd90      	pop	{r4, r7, pc}
   19a8c:	00038754 	.word	0x00038754
   19a90:	0001a831 	.word	0x0001a831
   19a94:	0003878c 	.word	0x0003878c
   19a98:	20000df4 	.word	0x20000df4
   19a9c:	000387d4 	.word	0x000387d4
   19aa0:	20000d4c 	.word	0x20000d4c
   19aa4:	0003881c 	.word	0x0003881c
   19aa8:	20000d58 	.word	0x20000d58
   19aac:	0000ffff 	.word	0x0000ffff
   19ab0:	0001aa45 	.word	0x0001aa45
   19ab4:	0001a3e9 	.word	0x0001a3e9
   19ab8:	0001a9ed 	.word	0x0001a9ed

00019abc <prvTraceStoreKernelCallWithParam>:
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithParam(uint32_t evtcode,
									traceObjectClass objectClass,
									uint32_t objectNumber,
									uint32_t param)
{
   19abc:	b580      	push	{r7, lr}
   19abe:	b08a      	sub	sp, #40	; 0x28
   19ac0:	af00      	add	r7, sp, #0
   19ac2:	60f8      	str	r0, [r7, #12]
   19ac4:	607a      	str	r2, [r7, #4]
   19ac6:	603b      	str	r3, [r7, #0]
   19ac8:	230b      	movs	r3, #11
   19aca:	18fb      	adds	r3, r7, r3
   19acc:	1c0a      	adds	r2, r1, #0
   19ace:	701a      	strb	r2, [r3, #0]
	uint8_t dts2;
	uint8_t hnd8;
	uint8_t p8;
	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
   19ad0:	68fb      	ldr	r3, [r7, #12]
   19ad2:	2bfe      	cmp	r3, #254	; 0xfe
   19ad4:	d904      	bls.n	19ae0 <prvTraceStoreKernelCallWithParam+0x24>
   19ad6:	4b40      	ldr	r3, [pc, #256]	; (19bd8 <prvTraceStoreKernelCallWithParam+0x11c>)
   19ad8:	0018      	movs	r0, r3
   19ada:	4b40      	ldr	r3, [pc, #256]	; (19bdc <prvTraceStoreKernelCallWithParam+0x120>)
   19adc:	4798      	blx	r3
   19ade:	e077      	b.n	19bd0 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
   19ae0:	230b      	movs	r3, #11
   19ae2:	18fb      	adds	r3, r7, r3
   19ae4:	781b      	ldrb	r3, [r3, #0]
   19ae6:	2b08      	cmp	r3, #8
   19ae8:	d904      	bls.n	19af4 <prvTraceStoreKernelCallWithParam+0x38>
   19aea:	4b3d      	ldr	r3, [pc, #244]	; (19be0 <prvTraceStoreKernelCallWithParam+0x124>)
   19aec:	0018      	movs	r0, r3
   19aee:	4b3b      	ldr	r3, [pc, #236]	; (19bdc <prvTraceStoreKernelCallWithParam+0x120>)
   19af0:	4798      	blx	r3
   19af2:	e06d      	b.n	19bd0 <prvTraceStoreKernelCallWithParam+0x114>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
   19af4:	4b3b      	ldr	r3, [pc, #236]	; (19be4 <prvTraceStoreKernelCallWithParam+0x128>)
   19af6:	681a      	ldr	r2, [r3, #0]
   19af8:	230b      	movs	r3, #11
   19afa:	18fb      	adds	r3, r7, r3
   19afc:	781b      	ldrb	r3, [r3, #0]
   19afe:	2164      	movs	r1, #100	; 0x64
   19b00:	18d3      	adds	r3, r2, r3
   19b02:	185b      	adds	r3, r3, r1
   19b04:	781b      	ldrb	r3, [r3, #0]
   19b06:	001a      	movs	r2, r3
   19b08:	687b      	ldr	r3, [r7, #4]
   19b0a:	429a      	cmp	r2, r3
   19b0c:	d204      	bcs.n	19b18 <prvTraceStoreKernelCallWithParam+0x5c>
   19b0e:	4b36      	ldr	r3, [pc, #216]	; (19be8 <prvTraceStoreKernelCallWithParam+0x12c>)
   19b10:	0018      	movs	r0, r3
   19b12:	4b32      	ldr	r3, [pc, #200]	; (19bdc <prvTraceStoreKernelCallWithParam+0x120>)
   19b14:	4798      	blx	r3
   19b16:	e05b      	b.n	19bd0 <prvTraceStoreKernelCallWithParam+0x114>

	if (recorder_busy)
   19b18:	4b34      	ldr	r3, [pc, #208]	; (19bec <prvTraceStoreKernelCallWithParam+0x130>)
   19b1a:	681b      	ldr	r3, [r3, #0]
   19b1c:	2b00      	cmp	r3, #0
   19b1e:	d004      	beq.n	19b2a <prvTraceStoreKernelCallWithParam+0x6e>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (3)");
   19b20:	4b33      	ldr	r3, [pc, #204]	; (19bf0 <prvTraceStoreKernelCallWithParam+0x134>)
   19b22:	0018      	movs	r0, r3
   19b24:	4b2d      	ldr	r3, [pc, #180]	; (19bdc <prvTraceStoreKernelCallWithParam+0x120>)
   19b26:	4798      	blx	r3
		return;
   19b28:	e052      	b.n	19bd0 <prvTraceStoreKernelCallWithParam+0x114>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19b2a:	f3ef 8310 	mrs	r3, PRIMASK
   19b2e:	617b      	str	r3, [r7, #20]
  return(result);
   19b30:	697b      	ldr	r3, [r7, #20]
	}

	trcCRITICAL_SECTION_BEGIN();
   19b32:	627b      	str	r3, [r7, #36]	; 0x24
   19b34:	2301      	movs	r3, #1
   19b36:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   19b38:	69bb      	ldr	r3, [r7, #24]
   19b3a:	f383 8810 	msr	PRIMASK, r3
   19b3e:	4b2b      	ldr	r3, [pc, #172]	; (19bec <prvTraceStoreKernelCallWithParam+0x130>)
   19b40:	681b      	ldr	r3, [r3, #0]
   19b42:	1c5a      	adds	r2, r3, #1
   19b44:	4b29      	ldr	r3, [pc, #164]	; (19bec <prvTraceStoreKernelCallWithParam+0x130>)
   19b46:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   19b48:	4b26      	ldr	r3, [pc, #152]	; (19be4 <prvTraceStoreKernelCallWithParam+0x128>)
   19b4a:	681b      	ldr	r3, [r3, #0]
   19b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19b4e:	2b00      	cmp	r3, #0
   19b50:	d034      	beq.n	19bbc <prvTraceStoreKernelCallWithParam+0x100>
   19b52:	4b28      	ldr	r3, [pc, #160]	; (19bf4 <prvTraceStoreKernelCallWithParam+0x138>)
   19b54:	781b      	ldrb	r3, [r3, #0]
   19b56:	2b00      	cmp	r3, #0
   19b58:	d030      	beq.n	19bbc <prvTraceStoreKernelCallWithParam+0x100>
	{
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
   19b5a:	20ff      	movs	r0, #255	; 0xff
   19b5c:	4b26      	ldr	r3, [pc, #152]	; (19bf8 <prvTraceStoreKernelCallWithParam+0x13c>)
   19b5e:	4798      	blx	r3
   19b60:	0003      	movs	r3, r0
   19b62:	001a      	movs	r2, r3
   19b64:	2323      	movs	r3, #35	; 0x23
   19b66:	18fb      	adds	r3, r7, r3
   19b68:	701a      	strb	r2, [r3, #0]
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
   19b6a:	683b      	ldr	r3, [r7, #0]
   19b6c:	0019      	movs	r1, r3
   19b6e:	20ff      	movs	r0, #255	; 0xff
   19b70:	4b22      	ldr	r3, [pc, #136]	; (19bfc <prvTraceStoreKernelCallWithParam+0x140>)
   19b72:	4798      	blx	r3
   19b74:	0002      	movs	r2, r0
   19b76:	2322      	movs	r3, #34	; 0x22
   19b78:	18fb      	adds	r3, r7, r3
   19b7a:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
   19b7c:	2321      	movs	r3, #33	; 0x21
   19b7e:	18fb      	adds	r3, r7, r3
   19b80:	687a      	ldr	r2, [r7, #4]
   19b82:	701a      	strb	r2, [r3, #0]
		kse = (KernelCallWithParamAndHandle*) prvTraceNextFreeEventBufferSlot();
   19b84:	4b1e      	ldr	r3, [pc, #120]	; (19c00 <prvTraceStoreKernelCallWithParam+0x144>)
   19b86:	4798      	blx	r3
   19b88:	0003      	movs	r3, r0
   19b8a:	61fb      	str	r3, [r7, #28]
		if (kse != NULL)
   19b8c:	69fb      	ldr	r3, [r7, #28]
   19b8e:	2b00      	cmp	r3, #0
   19b90:	d014      	beq.n	19bbc <prvTraceStoreKernelCallWithParam+0x100>
		{
			kse->dts = dts2;
   19b92:	69fb      	ldr	r3, [r7, #28]
   19b94:	2223      	movs	r2, #35	; 0x23
   19b96:	18ba      	adds	r2, r7, r2
   19b98:	7812      	ldrb	r2, [r2, #0]
   19b9a:	70da      	strb	r2, [r3, #3]
			kse->type = (uint8_t)evtcode;
   19b9c:	68fb      	ldr	r3, [r7, #12]
   19b9e:	b2da      	uxtb	r2, r3
   19ba0:	69fb      	ldr	r3, [r7, #28]
   19ba2:	701a      	strb	r2, [r3, #0]
			kse->objHandle = hnd8;
   19ba4:	69fb      	ldr	r3, [r7, #28]
   19ba6:	2221      	movs	r2, #33	; 0x21
   19ba8:	18ba      	adds	r2, r7, r2
   19baa:	7812      	ldrb	r2, [r2, #0]
   19bac:	705a      	strb	r2, [r3, #1]
			kse->param = p8;
   19bae:	69fb      	ldr	r3, [r7, #28]
   19bb0:	2222      	movs	r2, #34	; 0x22
   19bb2:	18ba      	adds	r2, r7, r2
   19bb4:	7812      	ldrb	r2, [r2, #0]
   19bb6:	709a      	strb	r2, [r3, #2]
			prvTraceUpdateCounters();
   19bb8:	4b12      	ldr	r3, [pc, #72]	; (19c04 <prvTraceStoreKernelCallWithParam+0x148>)
   19bba:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   19bbc:	4b0b      	ldr	r3, [pc, #44]	; (19bec <prvTraceStoreKernelCallWithParam+0x130>)
   19bbe:	681b      	ldr	r3, [r3, #0]
   19bc0:	1e5a      	subs	r2, r3, #1
   19bc2:	4b0a      	ldr	r3, [pc, #40]	; (19bec <prvTraceStoreKernelCallWithParam+0x130>)
   19bc4:	601a      	str	r2, [r3, #0]
   19bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   19bc8:	613b      	str	r3, [r7, #16]
   19bca:	693b      	ldr	r3, [r7, #16]
   19bcc:	f383 8810 	msr	PRIMASK, r3
}
   19bd0:	46bd      	mov	sp, r7
   19bd2:	b00a      	add	sp, #40	; 0x28
   19bd4:	bd80      	pop	{r7, pc}
   19bd6:	46c0      	nop			; (mov r8, r8)
   19bd8:	00038854 	.word	0x00038854
   19bdc:	0001a831 	.word	0x0001a831
   19be0:	00038894 	.word	0x00038894
   19be4:	20000df4 	.word	0x20000df4
   19be8:	000388e4 	.word	0x000388e4
   19bec:	20000d4c 	.word	0x20000d4c
   19bf0:	00038934 	.word	0x00038934
   19bf4:	20000d58 	.word	0x20000d58
   19bf8:	0001aa45 	.word	0x0001aa45
   19bfc:	00019c09 	.word	0x00019c09
   19c00:	0001a3e9 	.word	0x0001a3e9
   19c04:	0001a9ed 	.word	0x0001a9ed

00019c08 <prvTraceGetParam>:
 *
 * May only be called within a critical section!
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
static uint32_t prvTraceGetParam(uint32_t param_max, uint32_t param)
{
   19c08:	b580      	push	{r7, lr}
   19c0a:	b084      	sub	sp, #16
   19c0c:	af00      	add	r7, sp, #0
   19c0e:	6078      	str	r0, [r7, #4]
   19c10:	6039      	str	r1, [r7, #0]
	XPSEvent* xps;

	TRACE_ASSERT(param_max == 0xFF || param_max == 0xFFFF,
   19c12:	687b      	ldr	r3, [r7, #4]
   19c14:	2bff      	cmp	r3, #255	; 0xff
   19c16:	d009      	beq.n	19c2c <prvTraceGetParam+0x24>
   19c18:	687b      	ldr	r3, [r7, #4]
   19c1a:	4a19      	ldr	r2, [pc, #100]	; (19c80 <prvTraceGetParam+0x78>)
   19c1c:	4293      	cmp	r3, r2
   19c1e:	d005      	beq.n	19c2c <prvTraceGetParam+0x24>
   19c20:	4b18      	ldr	r3, [pc, #96]	; (19c84 <prvTraceGetParam+0x7c>)
   19c22:	0018      	movs	r0, r3
   19c24:	4b18      	ldr	r3, [pc, #96]	; (19c88 <prvTraceGetParam+0x80>)
   19c26:	4798      	blx	r3
   19c28:	683b      	ldr	r3, [r7, #0]
   19c2a:	e024      	b.n	19c76 <prvTraceGetParam+0x6e>
		"prvTraceGetParam: Invalid value for param_max", param);

	if (param <= param_max)
   19c2c:	683a      	ldr	r2, [r7, #0]
   19c2e:	687b      	ldr	r3, [r7, #4]
   19c30:	429a      	cmp	r2, r3
   19c32:	d801      	bhi.n	19c38 <prvTraceGetParam+0x30>
	{
		return param;
   19c34:	683b      	ldr	r3, [r7, #0]
   19c36:	e01e      	b.n	19c76 <prvTraceGetParam+0x6e>
	}
	else
	{
		xps = (XPSEvent*) prvTraceNextFreeEventBufferSlot();
   19c38:	4b14      	ldr	r3, [pc, #80]	; (19c8c <prvTraceGetParam+0x84>)
   19c3a:	4798      	blx	r3
   19c3c:	0003      	movs	r3, r0
   19c3e:	60fb      	str	r3, [r7, #12]
		if (xps != NULL)
   19c40:	68fb      	ldr	r3, [r7, #12]
   19c42:	2b00      	cmp	r3, #0
   19c44:	d014      	beq.n	19c70 <prvTraceGetParam+0x68>
		{
			xps->type = DIV_XPS;
   19c46:	68fb      	ldr	r3, [r7, #12]
   19c48:	2201      	movs	r2, #1
   19c4a:	701a      	strb	r2, [r3, #0]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
   19c4c:	687b      	ldr	r3, [r7, #4]
   19c4e:	43db      	mvns	r3, r3
   19c50:	683a      	ldr	r2, [r7, #0]
   19c52:	4013      	ands	r3, r2
   19c54:	0a1b      	lsrs	r3, r3, #8
   19c56:	b2da      	uxtb	r2, r3
   19c58:	68fb      	ldr	r3, [r7, #12]
   19c5a:	705a      	strb	r2, [r3, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
   19c5c:	687b      	ldr	r3, [r7, #4]
   19c5e:	43db      	mvns	r3, r3
   19c60:	683a      	ldr	r2, [r7, #0]
   19c62:	4013      	ands	r3, r2
   19c64:	0c1b      	lsrs	r3, r3, #16
   19c66:	b29a      	uxth	r2, r3
   19c68:	68fb      	ldr	r3, [r7, #12]
   19c6a:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   19c6c:	4b08      	ldr	r3, [pc, #32]	; (19c90 <prvTraceGetParam+0x88>)
   19c6e:	4798      	blx	r3
		}

		return param & param_max;
   19c70:	683b      	ldr	r3, [r7, #0]
   19c72:	687a      	ldr	r2, [r7, #4]
   19c74:	4013      	ands	r3, r2
	}
}
   19c76:	0018      	movs	r0, r3
   19c78:	46bd      	mov	sp, r7
   19c7a:	b004      	add	sp, #16
   19c7c:	bd80      	pop	{r7, pc}
   19c7e:	46c0      	nop			; (mov r8, r8)
   19c80:	0000ffff 	.word	0x0000ffff
   19c84:	0003896c 	.word	0x0003896c
   19c88:	0001a831 	.word	0x0001a831
   19c8c:	0001a3e9 	.word	0x0001a3e9
   19c90:	0001a9ed 	.word	0x0001a9ed

00019c94 <prvTraceStoreKernelCallWithNumericParamOnly>:
 * Used for storing kernel calls with numeric parameters only. This is
 * only used for traceTASK_DELAY and traceDELAY_UNTIL at the moment.
 ******************************************************************************/
#if (TRC_CFG_SCHEDULING_ONLY == 0)
void prvTraceStoreKernelCallWithNumericParamOnly(uint32_t evtcode, uint32_t param)
{
   19c94:	b580      	push	{r7, lr}
   19c96:	b08a      	sub	sp, #40	; 0x28
   19c98:	af00      	add	r7, sp, #0
   19c9a:	6078      	str	r0, [r7, #4]
   19c9c:	6039      	str	r1, [r7, #0]
	KernelCallWithParam16 * kse;
	uint8_t dts6;
	uint16_t restParam;
	TRACE_ALLOC_CRITICAL_SECTION();

	restParam = 0;
   19c9e:	2326      	movs	r3, #38	; 0x26
   19ca0:	18fb      	adds	r3, r7, r3
   19ca2:	2200      	movs	r2, #0
   19ca4:	801a      	strh	r2, [r3, #0]

	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
   19ca6:	687b      	ldr	r3, [r7, #4]
   19ca8:	2bfe      	cmp	r3, #254	; 0xfe
   19caa:	d904      	bls.n	19cb6 <prvTraceStoreKernelCallWithNumericParamOnly+0x22>
   19cac:	4b2d      	ldr	r3, [pc, #180]	; (19d64 <prvTraceStoreKernelCallWithNumericParamOnly+0xd0>)
   19cae:	0018      	movs	r0, r3
   19cb0:	4b2d      	ldr	r3, [pc, #180]	; (19d68 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   19cb2:	4798      	blx	r3
   19cb4:	e053      	b.n	19d5e <prvTraceStoreKernelCallWithNumericParamOnly+0xca>

	if (recorder_busy)
   19cb6:	4b2d      	ldr	r3, [pc, #180]	; (19d6c <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   19cb8:	681b      	ldr	r3, [r3, #0]
   19cba:	2b00      	cmp	r3, #0
   19cbc:	d004      	beq.n	19cc8 <prvTraceStoreKernelCallWithNumericParamOnly+0x34>
		* TRACE_EXIT_CRITICAL_SECTION). They must disable the RTOS tick interrupt
		* and any other ISRs that calls the trace recorder directly or via
		* traced kernel functions. The ARM port disables all interrupts using the
		* PRIMASK register to avoid this issue.
		*************************************************************************/
		prvTraceError("Recorder busy - high priority ISR using syscall? (4)");
   19cbe:	4b2c      	ldr	r3, [pc, #176]	; (19d70 <prvTraceStoreKernelCallWithNumericParamOnly+0xdc>)
   19cc0:	0018      	movs	r0, r3
   19cc2:	4b29      	ldr	r3, [pc, #164]	; (19d68 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>)
   19cc4:	4798      	blx	r3
		return;
   19cc6:	e04a      	b.n	19d5e <prvTraceStoreKernelCallWithNumericParamOnly+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19cc8:	f3ef 8310 	mrs	r3, PRIMASK
   19ccc:	613b      	str	r3, [r7, #16]
  return(result);
   19cce:	693b      	ldr	r3, [r7, #16]
	}

	trcCRITICAL_SECTION_BEGIN();
   19cd0:	623b      	str	r3, [r7, #32]
   19cd2:	2301      	movs	r3, #1
   19cd4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   19cd6:	697b      	ldr	r3, [r7, #20]
   19cd8:	f383 8810 	msr	PRIMASK, r3
   19cdc:	4b23      	ldr	r3, [pc, #140]	; (19d6c <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   19cde:	681b      	ldr	r3, [r3, #0]
   19ce0:	1c5a      	adds	r2, r3, #1
   19ce2:	4b22      	ldr	r3, [pc, #136]	; (19d6c <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   19ce4:	601a      	str	r2, [r3, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
   19ce6:	4b23      	ldr	r3, [pc, #140]	; (19d74 <prvTraceStoreKernelCallWithNumericParamOnly+0xe0>)
   19ce8:	681b      	ldr	r3, [r3, #0]
   19cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19cec:	2b00      	cmp	r3, #0
   19cee:	d02c      	beq.n	19d4a <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
   19cf0:	4b21      	ldr	r3, [pc, #132]	; (19d78 <prvTraceStoreKernelCallWithNumericParamOnly+0xe4>)
   19cf2:	781b      	ldrb	r3, [r3, #0]
   19cf4:	2b00      	cmp	r3, #0
   19cf6:	d028      	beq.n	19d4a <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
	{
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
   19cf8:	20ff      	movs	r0, #255	; 0xff
   19cfa:	4b20      	ldr	r3, [pc, #128]	; (19d7c <prvTraceStoreKernelCallWithNumericParamOnly+0xe8>)
   19cfc:	4798      	blx	r3
   19cfe:	0003      	movs	r3, r0
   19d00:	001a      	movs	r2, r3
   19d02:	231f      	movs	r3, #31
   19d04:	18fb      	adds	r3, r7, r3
   19d06:	701a      	strb	r2, [r3, #0]
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
   19d08:	683b      	ldr	r3, [r7, #0]
   19d0a:	4a1d      	ldr	r2, [pc, #116]	; (19d80 <prvTraceStoreKernelCallWithNumericParamOnly+0xec>)
   19d0c:	0019      	movs	r1, r3
   19d0e:	0010      	movs	r0, r2
   19d10:	4b1c      	ldr	r3, [pc, #112]	; (19d84 <prvTraceStoreKernelCallWithNumericParamOnly+0xf0>)
   19d12:	4798      	blx	r3
   19d14:	0002      	movs	r2, r0
   19d16:	2326      	movs	r3, #38	; 0x26
   19d18:	18fb      	adds	r3, r7, r3
   19d1a:	801a      	strh	r2, [r3, #0]
		kse = (KernelCallWithParam16*) prvTraceNextFreeEventBufferSlot();
   19d1c:	4b1a      	ldr	r3, [pc, #104]	; (19d88 <prvTraceStoreKernelCallWithNumericParamOnly+0xf4>)
   19d1e:	4798      	blx	r3
   19d20:	0003      	movs	r3, r0
   19d22:	61bb      	str	r3, [r7, #24]
		if (kse != NULL)
   19d24:	69bb      	ldr	r3, [r7, #24]
   19d26:	2b00      	cmp	r3, #0
   19d28:	d00f      	beq.n	19d4a <prvTraceStoreKernelCallWithNumericParamOnly+0xb6>
		{
			kse->dts = dts6;
   19d2a:	69bb      	ldr	r3, [r7, #24]
   19d2c:	221f      	movs	r2, #31
   19d2e:	18ba      	adds	r2, r7, r2
   19d30:	7812      	ldrb	r2, [r2, #0]
   19d32:	705a      	strb	r2, [r3, #1]
			kse->type = (uint8_t)evtcode;
   19d34:	687b      	ldr	r3, [r7, #4]
   19d36:	b2da      	uxtb	r2, r3
   19d38:	69bb      	ldr	r3, [r7, #24]
   19d3a:	701a      	strb	r2, [r3, #0]
			kse->param = restParam;
   19d3c:	69bb      	ldr	r3, [r7, #24]
   19d3e:	2226      	movs	r2, #38	; 0x26
   19d40:	18ba      	adds	r2, r7, r2
   19d42:	8812      	ldrh	r2, [r2, #0]
   19d44:	805a      	strh	r2, [r3, #2]
			prvTraceUpdateCounters();
   19d46:	4b11      	ldr	r3, [pc, #68]	; (19d8c <prvTraceStoreKernelCallWithNumericParamOnly+0xf8>)
   19d48:	4798      	blx	r3
		}
	}
	trcCRITICAL_SECTION_END();
   19d4a:	4b08      	ldr	r3, [pc, #32]	; (19d6c <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   19d4c:	681b      	ldr	r3, [r3, #0]
   19d4e:	1e5a      	subs	r2, r3, #1
   19d50:	4b06      	ldr	r3, [pc, #24]	; (19d6c <prvTraceStoreKernelCallWithNumericParamOnly+0xd8>)
   19d52:	601a      	str	r2, [r3, #0]
   19d54:	6a3b      	ldr	r3, [r7, #32]
   19d56:	60fb      	str	r3, [r7, #12]
   19d58:	68fb      	ldr	r3, [r7, #12]
   19d5a:	f383 8810 	msr	PRIMASK, r3
}
   19d5e:	46bd      	mov	sp, r7
   19d60:	b00a      	add	sp, #40	; 0x28
   19d62:	bd80      	pop	{r7, pc}
   19d64:	000389a8 	.word	0x000389a8
   19d68:	0001a831 	.word	0x0001a831
   19d6c:	20000d4c 	.word	0x20000d4c
   19d70:	00038a00 	.word	0x00038a00
   19d74:	20000df4 	.word	0x20000df4
   19d78:	20000d58 	.word	0x20000d58
   19d7c:	0001aa45 	.word	0x0001aa45
   19d80:	0000ffff 	.word	0x0000ffff
   19d84:	00019c09 	.word	0x00019c09
   19d88:	0001a3e9 	.word	0x0001a3e9
   19d8c:	0001a9ed 	.word	0x0001a9ed

00019d90 <prvTraceStoreTaskswitch>:
 * prvTraceStoreTaskswitch
 * Called by the scheduler from the SWITCHED_OUT hook, and by uiTraceStart.
 * At this point interrupts are assumed to be disabled!
 ******************************************************************************/
void prvTraceStoreTaskswitch(traceHandle task_handle)
{
   19d90:	b590      	push	{r4, r7, lr}
   19d92:	b089      	sub	sp, #36	; 0x24
   19d94:	af00      	add	r7, sp, #0
   19d96:	0002      	movs	r2, r0
   19d98:	1dfb      	adds	r3, r7, #7
   19d9a:	701a      	strb	r2, [r3, #0]
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
	extern int32_t isPendingContextSwitch;
#endif
	trcSR_ALLOC_CRITICAL_SECTION_ON_CORTEX_M_ONLY();

	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
   19d9c:	1dfb      	adds	r3, r7, #7
   19d9e:	781b      	ldrb	r3, [r3, #0]
   19da0:	2b0f      	cmp	r3, #15
   19da2:	d904      	bls.n	19dae <prvTraceStoreTaskswitch+0x1e>
   19da4:	4b34      	ldr	r3, [pc, #208]	; (19e78 <prvTraceStoreTaskswitch+0xe8>)
   19da6:	0018      	movs	r0, r3
   19da8:	4b34      	ldr	r3, [pc, #208]	; (19e7c <prvTraceStoreTaskswitch+0xec>)
   19daa:	4798      	blx	r3
   19dac:	e061      	b.n	19e72 <prvTraceStoreTaskswitch+0xe2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   19dae:	f3ef 8310 	mrs	r3, PRIMASK
   19db2:	60fb      	str	r3, [r7, #12]
  return(result);
   19db4:	68fb      	ldr	r3, [r7, #12]
		"prvTraceStoreTaskswitch: Invalid value for task_handle", TRC_UNUSED);

	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
   19db6:	61fb      	str	r3, [r7, #28]
   19db8:	2301      	movs	r3, #1
   19dba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   19dbc:	693b      	ldr	r3, [r7, #16]
   19dbe:	f383 8810 	msr	PRIMASK, r3
   19dc2:	4b2f      	ldr	r3, [pc, #188]	; (19e80 <prvTraceStoreTaskswitch+0xf0>)
   19dc4:	681b      	ldr	r3, [r3, #0]
   19dc6:	1c5a      	adds	r2, r3, #1
   19dc8:	4b2d      	ldr	r3, [pc, #180]	; (19e80 <prvTraceStoreTaskswitch+0xf0>)
   19dca:	601a      	str	r2, [r3, #0]

	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
   19dcc:	4b2d      	ldr	r3, [pc, #180]	; (19e84 <prvTraceStoreTaskswitch+0xf4>)
   19dce:	781b      	ldrb	r3, [r3, #0]
   19dd0:	1dfa      	adds	r2, r7, #7
   19dd2:	7812      	ldrb	r2, [r2, #0]
   19dd4:	429a      	cmp	r2, r3
   19dd6:	d042      	beq.n	19e5e <prvTraceStoreTaskswitch+0xce>
   19dd8:	4b2b      	ldr	r3, [pc, #172]	; (19e88 <prvTraceStoreTaskswitch+0xf8>)
   19dda:	681b      	ldr	r3, [r3, #0]
   19ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   19dde:	2b00      	cmp	r3, #0
   19de0:	d03d      	beq.n	19e5e <prvTraceStoreTaskswitch+0xce>
	{
#if (TRC_CFG_INCLUDE_ISR_TRACING == 1)
		isPendingContextSwitch = 0;
   19de2:	4b2a      	ldr	r3, [pc, #168]	; (19e8c <prvTraceStoreTaskswitch+0xfc>)
   19de4:	2200      	movs	r2, #0
   19de6:	601a      	str	r2, [r3, #0]
#endif

		dts3 = (uint16_t)prvTraceGetDTS(0xFFFF);
   19de8:	231a      	movs	r3, #26
   19dea:	18fc      	adds	r4, r7, r3
   19dec:	4b28      	ldr	r3, [pc, #160]	; (19e90 <prvTraceStoreTaskswitch+0x100>)
   19dee:	0018      	movs	r0, r3
   19df0:	4b28      	ldr	r3, [pc, #160]	; (19e94 <prvTraceStoreTaskswitch+0x104>)
   19df2:	4798      	blx	r3
   19df4:	0003      	movs	r3, r0
   19df6:	8023      	strh	r3, [r4, #0]
		handle_of_last_logged_task = task_handle;
   19df8:	4b22      	ldr	r3, [pc, #136]	; (19e84 <prvTraceStoreTaskswitch+0xf4>)
   19dfa:	1dfa      	adds	r2, r7, #7
   19dfc:	7812      	ldrb	r2, [r2, #0]
   19dfe:	701a      	strb	r2, [r3, #0]
		hnd8 = prvTraceGet8BitHandle(handle_of_last_logged_task);
   19e00:	2319      	movs	r3, #25
   19e02:	18fb      	adds	r3, r7, r3
   19e04:	4a1f      	ldr	r2, [pc, #124]	; (19e84 <prvTraceStoreTaskswitch+0xf4>)
   19e06:	7812      	ldrb	r2, [r2, #0]
   19e08:	701a      	strb	r2, [r3, #0]
		ts = (TSEvent*)prvTraceNextFreeEventBufferSlot();
   19e0a:	4b23      	ldr	r3, [pc, #140]	; (19e98 <prvTraceStoreTaskswitch+0x108>)
   19e0c:	4798      	blx	r3
   19e0e:	0003      	movs	r3, r0
   19e10:	617b      	str	r3, [r7, #20]

		if (ts != NULL)
   19e12:	697b      	ldr	r3, [r7, #20]
   19e14:	2b00      	cmp	r3, #0
   19e16:	d022      	beq.n	19e5e <prvTraceStoreTaskswitch+0xce>
		{
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
   19e18:	4b1a      	ldr	r3, [pc, #104]	; (19e84 <prvTraceStoreTaskswitch+0xf4>)
   19e1a:	781b      	ldrb	r3, [r3, #0]
   19e1c:	0019      	movs	r1, r3
   19e1e:	2003      	movs	r0, #3
   19e20:	4b1e      	ldr	r3, [pc, #120]	; (19e9c <prvTraceStoreTaskswitch+0x10c>)
   19e22:	4798      	blx	r3
   19e24:	0003      	movs	r3, r0
   19e26:	2b01      	cmp	r3, #1
   19e28:	d103      	bne.n	19e32 <prvTraceStoreTaskswitch+0xa2>
				handle_of_last_logged_task) == TASK_STATE_INSTANCE_ACTIVE)
			{
				ts->type = TS_TASK_RESUME;
   19e2a:	697b      	ldr	r3, [r7, #20]
   19e2c:	2207      	movs	r2, #7
   19e2e:	701a      	strb	r2, [r3, #0]
   19e30:	e002      	b.n	19e38 <prvTraceStoreTaskswitch+0xa8>
			}
			else
			{
				ts->type = TS_TASK_BEGIN;
   19e32:	697b      	ldr	r3, [r7, #20]
   19e34:	2206      	movs	r2, #6
   19e36:	701a      	strb	r2, [r3, #0]
			}

			ts->dts = dts3;
   19e38:	697b      	ldr	r3, [r7, #20]
   19e3a:	221a      	movs	r2, #26
   19e3c:	18ba      	adds	r2, r7, r2
   19e3e:	8812      	ldrh	r2, [r2, #0]
   19e40:	805a      	strh	r2, [r3, #2]
			ts->objHandle = hnd8;
   19e42:	697b      	ldr	r3, [r7, #20]
   19e44:	2219      	movs	r2, #25
   19e46:	18ba      	adds	r2, r7, r2
   19e48:	7812      	ldrb	r2, [r2, #0]
   19e4a:	705a      	strb	r2, [r3, #1]

			prvTraceSetObjectState(TRACE_CLASS_TASK,
   19e4c:	4b0d      	ldr	r3, [pc, #52]	; (19e84 <prvTraceStoreTaskswitch+0xf4>)
   19e4e:	781b      	ldrb	r3, [r3, #0]
   19e50:	2201      	movs	r2, #1
   19e52:	0019      	movs	r1, r3
   19e54:	2003      	movs	r0, #3
   19e56:	4b12      	ldr	r3, [pc, #72]	; (19ea0 <prvTraceStoreTaskswitch+0x110>)
   19e58:	4798      	blx	r3
									handle_of_last_logged_task,
									TASK_STATE_INSTANCE_ACTIVE);

			prvTraceUpdateCounters();
   19e5a:	4b12      	ldr	r3, [pc, #72]	; (19ea4 <prvTraceStoreTaskswitch+0x114>)
   19e5c:	4798      	blx	r3
		}
	}

	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
   19e5e:	4b08      	ldr	r3, [pc, #32]	; (19e80 <prvTraceStoreTaskswitch+0xf0>)
   19e60:	681b      	ldr	r3, [r3, #0]
   19e62:	1e5a      	subs	r2, r3, #1
   19e64:	4b06      	ldr	r3, [pc, #24]	; (19e80 <prvTraceStoreTaskswitch+0xf0>)
   19e66:	601a      	str	r2, [r3, #0]
   19e68:	69fb      	ldr	r3, [r7, #28]
   19e6a:	60bb      	str	r3, [r7, #8]
   19e6c:	68bb      	ldr	r3, [r7, #8]
   19e6e:	f383 8810 	msr	PRIMASK, r3
}
   19e72:	46bd      	mov	sp, r7
   19e74:	b009      	add	sp, #36	; 0x24
   19e76:	bd90      	pop	{r4, r7, pc}
   19e78:	00038a38 	.word	0x00038a38
   19e7c:	0001a831 	.word	0x0001a831
   19e80:	20000d4c 	.word	0x20000d4c
   19e84:	20000d58 	.word	0x20000d58
   19e88:	20000df4 	.word	0x20000df4
   19e8c:	20000d38 	.word	0x20000d38
   19e90:	0000ffff 	.word	0x0000ffff
   19e94:	0001aa45 	.word	0x0001aa45
   19e98:	0001a3e9 	.word	0x0001a3e9
   19e9c:	0001a08d 	.word	0x0001a08d
   19ea0:	00019fe9 	.word	0x00019fe9
   19ea4:	0001a9ed 	.word	0x0001a9ed

00019ea8 <prvTraceSetPriorityProperty>:
		}
	}
}

void prvTraceSetPriorityProperty(uint8_t objectclass, traceHandle id, uint8_t value)
{
   19ea8:	b590      	push	{r4, r7, lr}
   19eaa:	b083      	sub	sp, #12
   19eac:	af00      	add	r7, sp, #0
   19eae:	0004      	movs	r4, r0
   19eb0:	0008      	movs	r0, r1
   19eb2:	0011      	movs	r1, r2
   19eb4:	1dfb      	adds	r3, r7, #7
   19eb6:	1c22      	adds	r2, r4, #0
   19eb8:	701a      	strb	r2, [r3, #0]
   19eba:	1dbb      	adds	r3, r7, #6
   19ebc:	1c02      	adds	r2, r0, #0
   19ebe:	701a      	strb	r2, [r3, #0]
   19ec0:	1d7b      	adds	r3, r7, #5
   19ec2:	1c0a      	adds	r2, r1, #0
   19ec4:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   19ec6:	1dfb      	adds	r3, r7, #7
   19ec8:	781b      	ldrb	r3, [r3, #0]
   19eca:	2b08      	cmp	r3, #8
   19ecc:	d904      	bls.n	19ed8 <prvTraceSetPriorityProperty+0x30>
   19ece:	4b1a      	ldr	r3, [pc, #104]	; (19f38 <prvTraceSetPriorityProperty+0x90>)
   19ed0:	0018      	movs	r0, r3
   19ed2:	4b1a      	ldr	r3, [pc, #104]	; (19f3c <prvTraceSetPriorityProperty+0x94>)
   19ed4:	4798      	blx	r3
   19ed6:	e02c      	b.n	19f32 <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   19ed8:	4b19      	ldr	r3, [pc, #100]	; (19f40 <prvTraceSetPriorityProperty+0x98>)
   19eda:	681a      	ldr	r2, [r3, #0]
   19edc:	1dfb      	adds	r3, r7, #7
   19ede:	781b      	ldrb	r3, [r3, #0]
   19ee0:	2164      	movs	r1, #100	; 0x64
   19ee2:	18d3      	adds	r3, r2, r3
   19ee4:	185b      	adds	r3, r3, r1
   19ee6:	781b      	ldrb	r3, [r3, #0]
   19ee8:	1dba      	adds	r2, r7, #6
   19eea:	7812      	ldrb	r2, [r2, #0]
   19eec:	429a      	cmp	r2, r3
   19eee:	d904      	bls.n	19efa <prvTraceSetPriorityProperty+0x52>
   19ef0:	4b14      	ldr	r3, [pc, #80]	; (19f44 <prvTraceSetPriorityProperty+0x9c>)
   19ef2:	0018      	movs	r0, r3
   19ef4:	4b11      	ldr	r3, [pc, #68]	; (19f3c <prvTraceSetPriorityProperty+0x94>)
   19ef6:	4798      	blx	r3
   19ef8:	e01b      	b.n	19f32 <prvTraceSetPriorityProperty+0x8a>
		"prvTraceSetPriorityProperty: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
   19efa:	4b11      	ldr	r3, [pc, #68]	; (19f40 <prvTraceSetPriorityProperty+0x98>)
   19efc:	681c      	ldr	r4, [r3, #0]
   19efe:	1dfb      	adds	r3, r7, #7
   19f00:	781a      	ldrb	r2, [r3, #0]
   19f02:	1dbb      	adds	r3, r7, #6
   19f04:	781b      	ldrb	r3, [r3, #0]
   19f06:	0011      	movs	r1, r2
   19f08:	0018      	movs	r0, r3
   19f0a:	4b0f      	ldr	r3, [pc, #60]	; (19f48 <prvTraceSetPriorityProperty+0xa0>)
   19f0c:	4798      	blx	r3
   19f0e:	0003      	movs	r3, r0
   19f10:	0018      	movs	r0, r3
   19f12:	4b0b      	ldr	r3, [pc, #44]	; (19f40 <prvTraceSetPriorityProperty+0x98>)
   19f14:	681a      	ldr	r2, [r3, #0]
   19f16:	1dfb      	adds	r3, r7, #7
   19f18:	781b      	ldrb	r3, [r3, #0]
   19f1a:	2170      	movs	r1, #112	; 0x70
   19f1c:	18d3      	adds	r3, r2, r3
   19f1e:	185b      	adds	r3, r3, r1
   19f20:	781b      	ldrb	r3, [r3, #0]
   19f22:	18c3      	adds	r3, r0, r3
   19f24:	3301      	adds	r3, #1
   19f26:	229c      	movs	r2, #156	; 0x9c
   19f28:	18e3      	adds	r3, r4, r3
   19f2a:	189b      	adds	r3, r3, r2
   19f2c:	1d7a      	adds	r2, r7, #5
   19f2e:	7812      	ldrb	r2, [r2, #0]
   19f30:	701a      	strb	r2, [r3, #0]
}
   19f32:	46bd      	mov	sp, r7
   19f34:	b003      	add	sp, #12
   19f36:	bd90      	pop	{r4, r7, pc}
   19f38:	00038bcc 	.word	0x00038bcc
   19f3c:	0001a831 	.word	0x0001a831
   19f40:	20000df4 	.word	0x20000df4
   19f44:	00038c18 	.word	0x00038c18
   19f48:	0001a43d 	.word	0x0001a43d

00019f4c <prvTraceGetPriorityProperty>:

uint8_t prvTraceGetPriorityProperty(uint8_t objectclass, traceHandle id)
{
   19f4c:	b590      	push	{r4, r7, lr}
   19f4e:	b083      	sub	sp, #12
   19f50:	af00      	add	r7, sp, #0
   19f52:	0002      	movs	r2, r0
   19f54:	1dfb      	adds	r3, r7, #7
   19f56:	701a      	strb	r2, [r3, #0]
   19f58:	1dbb      	adds	r3, r7, #6
   19f5a:	1c0a      	adds	r2, r1, #0
   19f5c:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   19f5e:	1dfb      	adds	r3, r7, #7
   19f60:	781b      	ldrb	r3, [r3, #0]
   19f62:	2b08      	cmp	r3, #8
   19f64:	d905      	bls.n	19f72 <prvTraceGetPriorityProperty+0x26>
   19f66:	4b1b      	ldr	r3, [pc, #108]	; (19fd4 <prvTraceGetPriorityProperty+0x88>)
   19f68:	0018      	movs	r0, r3
   19f6a:	4b1b      	ldr	r3, [pc, #108]	; (19fd8 <prvTraceGetPriorityProperty+0x8c>)
   19f6c:	4798      	blx	r3
   19f6e:	2300      	movs	r3, #0
   19f70:	e02b      	b.n	19fca <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   19f72:	4b1a      	ldr	r3, [pc, #104]	; (19fdc <prvTraceGetPriorityProperty+0x90>)
   19f74:	681a      	ldr	r2, [r3, #0]
   19f76:	1dfb      	adds	r3, r7, #7
   19f78:	781b      	ldrb	r3, [r3, #0]
   19f7a:	2164      	movs	r1, #100	; 0x64
   19f7c:	18d3      	adds	r3, r2, r3
   19f7e:	185b      	adds	r3, r3, r1
   19f80:	781b      	ldrb	r3, [r3, #0]
   19f82:	1dba      	adds	r2, r7, #6
   19f84:	7812      	ldrb	r2, [r2, #0]
   19f86:	429a      	cmp	r2, r3
   19f88:	d905      	bls.n	19f96 <prvTraceGetPriorityProperty+0x4a>
   19f8a:	4b15      	ldr	r3, [pc, #84]	; (19fe0 <prvTraceGetPriorityProperty+0x94>)
   19f8c:	0018      	movs	r0, r3
   19f8e:	4b12      	ldr	r3, [pc, #72]	; (19fd8 <prvTraceGetPriorityProperty+0x8c>)
   19f90:	4798      	blx	r3
   19f92:	2300      	movs	r3, #0
   19f94:	e019      	b.n	19fca <prvTraceGetPriorityProperty+0x7e>
		"prvTraceGetPriorityProperty: Invalid value for id", 0);

	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
   19f96:	4b11      	ldr	r3, [pc, #68]	; (19fdc <prvTraceGetPriorityProperty+0x90>)
   19f98:	681c      	ldr	r4, [r3, #0]
   19f9a:	1dfb      	adds	r3, r7, #7
   19f9c:	781a      	ldrb	r2, [r3, #0]
   19f9e:	1dbb      	adds	r3, r7, #6
   19fa0:	781b      	ldrb	r3, [r3, #0]
   19fa2:	0011      	movs	r1, r2
   19fa4:	0018      	movs	r0, r3
   19fa6:	4b0f      	ldr	r3, [pc, #60]	; (19fe4 <prvTraceGetPriorityProperty+0x98>)
   19fa8:	4798      	blx	r3
   19faa:	0003      	movs	r3, r0
   19fac:	0018      	movs	r0, r3
   19fae:	4b0b      	ldr	r3, [pc, #44]	; (19fdc <prvTraceGetPriorityProperty+0x90>)
   19fb0:	681a      	ldr	r2, [r3, #0]
   19fb2:	1dfb      	adds	r3, r7, #7
   19fb4:	781b      	ldrb	r3, [r3, #0]
   19fb6:	2170      	movs	r1, #112	; 0x70
   19fb8:	18d3      	adds	r3, r2, r3
   19fba:	185b      	adds	r3, r3, r1
   19fbc:	781b      	ldrb	r3, [r3, #0]
   19fbe:	18c3      	adds	r3, r0, r3
   19fc0:	3301      	adds	r3, #1
   19fc2:	229c      	movs	r2, #156	; 0x9c
   19fc4:	18e3      	adds	r3, r4, r3
   19fc6:	189b      	adds	r3, r3, r2
   19fc8:	781b      	ldrb	r3, [r3, #0]
}
   19fca:	0018      	movs	r0, r3
   19fcc:	46bd      	mov	sp, r7
   19fce:	b003      	add	sp, #12
   19fd0:	bd90      	pop	{r4, r7, pc}
   19fd2:	46c0      	nop			; (mov r8, r8)
   19fd4:	00038c58 	.word	0x00038c58
   19fd8:	0001a831 	.word	0x0001a831
   19fdc:	20000df4 	.word	0x20000df4
   19fe0:	00038ca4 	.word	0x00038ca4
   19fe4:	0001a43d 	.word	0x0001a43d

00019fe8 <prvTraceSetObjectState>:

void prvTraceSetObjectState(uint8_t objectclass, traceHandle id, uint8_t value)
{
   19fe8:	b590      	push	{r4, r7, lr}
   19fea:	b083      	sub	sp, #12
   19fec:	af00      	add	r7, sp, #0
   19fee:	0004      	movs	r4, r0
   19ff0:	0008      	movs	r0, r1
   19ff2:	0011      	movs	r1, r2
   19ff4:	1dfb      	adds	r3, r7, #7
   19ff6:	1c22      	adds	r2, r4, #0
   19ff8:	701a      	strb	r2, [r3, #0]
   19ffa:	1dbb      	adds	r3, r7, #6
   19ffc:	1c02      	adds	r2, r0, #0
   19ffe:	701a      	strb	r2, [r3, #0]
   1a000:	1d7b      	adds	r3, r7, #5
   1a002:	1c0a      	adds	r2, r1, #0
   1a004:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   1a006:	1dfb      	adds	r3, r7, #7
   1a008:	781b      	ldrb	r3, [r3, #0]
   1a00a:	2b08      	cmp	r3, #8
   1a00c:	d904      	bls.n	1a018 <prvTraceSetObjectState+0x30>
   1a00e:	4b1a      	ldr	r3, [pc, #104]	; (1a078 <prvTraceSetObjectState+0x90>)
   1a010:	0018      	movs	r0, r3
   1a012:	4b1a      	ldr	r3, [pc, #104]	; (1a07c <prvTraceSetObjectState+0x94>)
   1a014:	4798      	blx	r3
   1a016:	e02b      	b.n	1a070 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: objectclass >= TRACE_NCLASSES", TRC_UNUSED);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1a018:	4b19      	ldr	r3, [pc, #100]	; (1a080 <prvTraceSetObjectState+0x98>)
   1a01a:	681a      	ldr	r2, [r3, #0]
   1a01c:	1dfb      	adds	r3, r7, #7
   1a01e:	781b      	ldrb	r3, [r3, #0]
   1a020:	2164      	movs	r1, #100	; 0x64
   1a022:	18d3      	adds	r3, r2, r3
   1a024:	185b      	adds	r3, r3, r1
   1a026:	781b      	ldrb	r3, [r3, #0]
   1a028:	1dba      	adds	r2, r7, #6
   1a02a:	7812      	ldrb	r2, [r2, #0]
   1a02c:	429a      	cmp	r2, r3
   1a02e:	d904      	bls.n	1a03a <prvTraceSetObjectState+0x52>
   1a030:	4b14      	ldr	r3, [pc, #80]	; (1a084 <prvTraceSetObjectState+0x9c>)
   1a032:	0018      	movs	r0, r3
   1a034:	4b11      	ldr	r3, [pc, #68]	; (1a07c <prvTraceSetObjectState+0x94>)
   1a036:	4798      	blx	r3
   1a038:	e01a      	b.n	1a070 <prvTraceSetObjectState+0x88>
		"prvTraceSetObjectState: Invalid value for id", TRC_UNUSED);

	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
   1a03a:	4b11      	ldr	r3, [pc, #68]	; (1a080 <prvTraceSetObjectState+0x98>)
   1a03c:	681c      	ldr	r4, [r3, #0]
   1a03e:	1dfb      	adds	r3, r7, #7
   1a040:	781a      	ldrb	r2, [r3, #0]
   1a042:	1dbb      	adds	r3, r7, #6
   1a044:	781b      	ldrb	r3, [r3, #0]
   1a046:	0011      	movs	r1, r2
   1a048:	0018      	movs	r0, r3
   1a04a:	4b0f      	ldr	r3, [pc, #60]	; (1a088 <prvTraceSetObjectState+0xa0>)
   1a04c:	4798      	blx	r3
   1a04e:	0003      	movs	r3, r0
   1a050:	0018      	movs	r0, r3
   1a052:	4b0b      	ldr	r3, [pc, #44]	; (1a080 <prvTraceSetObjectState+0x98>)
   1a054:	681a      	ldr	r2, [r3, #0]
   1a056:	1dfb      	adds	r3, r7, #7
   1a058:	781b      	ldrb	r3, [r3, #0]
   1a05a:	2170      	movs	r1, #112	; 0x70
   1a05c:	18d3      	adds	r3, r2, r3
   1a05e:	185b      	adds	r3, r3, r1
   1a060:	781b      	ldrb	r3, [r3, #0]
   1a062:	18c3      	adds	r3, r0, r3
   1a064:	229c      	movs	r2, #156	; 0x9c
   1a066:	18e3      	adds	r3, r4, r3
   1a068:	189b      	adds	r3, r3, r2
   1a06a:	1d7a      	adds	r2, r7, #5
   1a06c:	7812      	ldrb	r2, [r2, #0]
   1a06e:	701a      	strb	r2, [r3, #0]
}
   1a070:	46bd      	mov	sp, r7
   1a072:	b003      	add	sp, #12
   1a074:	bd90      	pop	{r4, r7, pc}
   1a076:	46c0      	nop			; (mov r8, r8)
   1a078:	00038ce4 	.word	0x00038ce4
   1a07c:	0001a831 	.word	0x0001a831
   1a080:	20000df4 	.word	0x20000df4
   1a084:	00038d28 	.word	0x00038d28
   1a088:	0001a43d 	.word	0x0001a43d

0001a08c <prvTraceGetObjectState>:

uint8_t prvTraceGetObjectState(uint8_t objectclass, traceHandle id)
{
   1a08c:	b590      	push	{r4, r7, lr}
   1a08e:	b083      	sub	sp, #12
   1a090:	af00      	add	r7, sp, #0
   1a092:	0002      	movs	r2, r0
   1a094:	1dfb      	adds	r3, r7, #7
   1a096:	701a      	strb	r2, [r3, #0]
   1a098:	1dbb      	adds	r3, r7, #6
   1a09a:	1c0a      	adds	r2, r1, #0
   1a09c:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
   1a09e:	1dfb      	adds	r3, r7, #7
   1a0a0:	781b      	ldrb	r3, [r3, #0]
   1a0a2:	2b08      	cmp	r3, #8
   1a0a4:	d905      	bls.n	1a0b2 <prvTraceGetObjectState+0x26>
   1a0a6:	4b1a      	ldr	r3, [pc, #104]	; (1a110 <prvTraceGetObjectState+0x84>)
   1a0a8:	0018      	movs	r0, r3
   1a0aa:	4b1a      	ldr	r3, [pc, #104]	; (1a114 <prvTraceGetObjectState+0x88>)
   1a0ac:	4798      	blx	r3
   1a0ae:	2300      	movs	r3, #0
   1a0b0:	e02a      	b.n	1a108 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: objectclass >= TRACE_NCLASSES", 0);
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
   1a0b2:	4b19      	ldr	r3, [pc, #100]	; (1a118 <prvTraceGetObjectState+0x8c>)
   1a0b4:	681a      	ldr	r2, [r3, #0]
   1a0b6:	1dfb      	adds	r3, r7, #7
   1a0b8:	781b      	ldrb	r3, [r3, #0]
   1a0ba:	2164      	movs	r1, #100	; 0x64
   1a0bc:	18d3      	adds	r3, r2, r3
   1a0be:	185b      	adds	r3, r3, r1
   1a0c0:	781b      	ldrb	r3, [r3, #0]
   1a0c2:	1dba      	adds	r2, r7, #6
   1a0c4:	7812      	ldrb	r2, [r2, #0]
   1a0c6:	429a      	cmp	r2, r3
   1a0c8:	d905      	bls.n	1a0d6 <prvTraceGetObjectState+0x4a>
   1a0ca:	4b14      	ldr	r3, [pc, #80]	; (1a11c <prvTraceGetObjectState+0x90>)
   1a0cc:	0018      	movs	r0, r3
   1a0ce:	4b11      	ldr	r3, [pc, #68]	; (1a114 <prvTraceGetObjectState+0x88>)
   1a0d0:	4798      	blx	r3
   1a0d2:	2300      	movs	r3, #0
   1a0d4:	e018      	b.n	1a108 <prvTraceGetObjectState+0x7c>
		"prvTraceGetObjectState: Invalid value for id", 0);

	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
   1a0d6:	4b10      	ldr	r3, [pc, #64]	; (1a118 <prvTraceGetObjectState+0x8c>)
   1a0d8:	681c      	ldr	r4, [r3, #0]
   1a0da:	1dfb      	adds	r3, r7, #7
   1a0dc:	781a      	ldrb	r2, [r3, #0]
   1a0de:	1dbb      	adds	r3, r7, #6
   1a0e0:	781b      	ldrb	r3, [r3, #0]
   1a0e2:	0011      	movs	r1, r2
   1a0e4:	0018      	movs	r0, r3
   1a0e6:	4b0e      	ldr	r3, [pc, #56]	; (1a120 <prvTraceGetObjectState+0x94>)
   1a0e8:	4798      	blx	r3
   1a0ea:	0003      	movs	r3, r0
   1a0ec:	0018      	movs	r0, r3
   1a0ee:	4b0a      	ldr	r3, [pc, #40]	; (1a118 <prvTraceGetObjectState+0x8c>)
   1a0f0:	681a      	ldr	r2, [r3, #0]
   1a0f2:	1dfb      	adds	r3, r7, #7
   1a0f4:	781b      	ldrb	r3, [r3, #0]
   1a0f6:	2170      	movs	r1, #112	; 0x70
   1a0f8:	18d3      	adds	r3, r2, r3
   1a0fa:	185b      	adds	r3, r3, r1
   1a0fc:	781b      	ldrb	r3, [r3, #0]
   1a0fe:	18c3      	adds	r3, r0, r3
   1a100:	229c      	movs	r2, #156	; 0x9c
   1a102:	18e3      	adds	r3, r4, r3
   1a104:	189b      	adds	r3, r3, r2
   1a106:	781b      	ldrb	r3, [r3, #0]
}
   1a108:	0018      	movs	r0, r3
   1a10a:	46bd      	mov	sp, r7
   1a10c:	b003      	add	sp, #12
   1a10e:	bd90      	pop	{r4, r7, pc}
   1a110:	00038d64 	.word	0x00038d64
   1a114:	0001a831 	.word	0x0001a831
   1a118:	20000df4 	.word	0x20000df4
   1a11c:	00038da8 	.word	0x00038da8
   1a120:	0001a43d 	.word	0x0001a43d

0001a124 <prvTraceSetTaskInstanceFinished>:

void prvTraceSetTaskInstanceFinished(traceHandle handle)
{
   1a124:	b590      	push	{r4, r7, lr}
   1a126:	b083      	sub	sp, #12
   1a128:	af00      	add	r7, sp, #0
   1a12a:	0002      	movs	r2, r0
   1a12c:	1dfb      	adds	r3, r7, #7
   1a12e:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
   1a130:	4b11      	ldr	r3, [pc, #68]	; (1a178 <prvTraceSetTaskInstanceFinished+0x54>)
   1a132:	681b      	ldr	r3, [r3, #0]
   1a134:	2267      	movs	r2, #103	; 0x67
   1a136:	5c9b      	ldrb	r3, [r3, r2]
   1a138:	1dfa      	adds	r2, r7, #7
   1a13a:	7812      	ldrb	r2, [r2, #0]
   1a13c:	429a      	cmp	r2, r3
   1a13e:	d904      	bls.n	1a14a <prvTraceSetTaskInstanceFinished+0x26>
   1a140:	4b0e      	ldr	r3, [pc, #56]	; (1a17c <prvTraceSetTaskInstanceFinished+0x58>)
   1a142:	0018      	movs	r0, r3
   1a144:	4b0e      	ldr	r3, [pc, #56]	; (1a180 <prvTraceSetTaskInstanceFinished+0x5c>)
   1a146:	4798      	blx	r3
   1a148:	e013      	b.n	1a172 <prvTraceSetTaskInstanceFinished+0x4e>
		"prvTraceSetTaskInstanceFinished: Invalid value for handle", TRC_UNUSED);

#if (TRC_CFG_USE_IMPLICIT_IFE_RULES == 1)
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
   1a14a:	4b0b      	ldr	r3, [pc, #44]	; (1a178 <prvTraceSetTaskInstanceFinished+0x54>)
   1a14c:	681c      	ldr	r4, [r3, #0]
   1a14e:	1dfb      	adds	r3, r7, #7
   1a150:	781b      	ldrb	r3, [r3, #0]
   1a152:	2103      	movs	r1, #3
   1a154:	0018      	movs	r0, r3
   1a156:	4b0b      	ldr	r3, [pc, #44]	; (1a184 <prvTraceSetTaskInstanceFinished+0x60>)
   1a158:	4798      	blx	r3
   1a15a:	0003      	movs	r3, r0
   1a15c:	0019      	movs	r1, r3
   1a15e:	4b06      	ldr	r3, [pc, #24]	; (1a178 <prvTraceSetTaskInstanceFinished+0x54>)
   1a160:	681b      	ldr	r3, [r3, #0]
   1a162:	2273      	movs	r2, #115	; 0x73
   1a164:	5c9b      	ldrb	r3, [r3, r2]
   1a166:	18cb      	adds	r3, r1, r3
   1a168:	229c      	movs	r2, #156	; 0x9c
   1a16a:	18e3      	adds	r3, r4, r3
   1a16c:	189b      	adds	r3, r3, r2
   1a16e:	2200      	movs	r2, #0
   1a170:	701a      	strb	r2, [r3, #0]
#endif
}
   1a172:	46bd      	mov	sp, r7
   1a174:	b003      	add	sp, #12
   1a176:	bd90      	pop	{r4, r7, pc}
   1a178:	20000df4 	.word	0x20000df4
   1a17c:	00038de4 	.word	0x00038de4
   1a180:	0001a831 	.word	0x0001a831
   1a184:	0001a43d 	.word	0x0001a43d

0001a188 <prvTraceInitTraceData>:
 ******************************************************************************/
RecorderDataType* RecorderDataPtr = NULL;

/* This version of the function dynamically allocates the trace data */
void prvTraceInitTraceData()
{	
   1a188:	b580      	push	{r7, lr}
   1a18a:	af00      	add	r7, sp, #0
	
	if (RecorderDataPtr == NULL)
   1a18c:	4b75      	ldr	r3, [pc, #468]	; (1a364 <prvTraceInitTraceData+0x1dc>)
   1a18e:	681b      	ldr	r3, [r3, #0]
   1a190:	2b00      	cmp	r3, #0
   1a192:	d103      	bne.n	1a19c <prvTraceInitTraceData+0x14>
	{
#if (TRC_CFG_RECORDER_BUFFER_ALLOCATION == TRC_RECORDER_BUFFER_ALLOCATION_STATIC)
	RecorderDataPtr = &RecorderData;
   1a194:	4b73      	ldr	r3, [pc, #460]	; (1a364 <prvTraceInitTraceData+0x1dc>)
   1a196:	4a74      	ldr	r2, [pc, #464]	; (1a368 <prvTraceInitTraceData+0x1e0>)
   1a198:	601a      	str	r2, [r3, #0]
   1a19a:	e006      	b.n	1a1aa <prvTraceInitTraceData+0x22>
		}
#endif
	}
	else
	{
		if (RecorderDataPtr->startmarker0 == 1)
   1a19c:	4b71      	ldr	r3, [pc, #452]	; (1a364 <prvTraceInitTraceData+0x1dc>)
   1a19e:	681b      	ldr	r3, [r3, #0]
   1a1a0:	781b      	ldrb	r3, [r3, #0]
   1a1a2:	b2db      	uxtb	r3, r3
   1a1a4:	2b01      	cmp	r3, #1
   1a1a6:	d100      	bne.n	1a1aa <prvTraceInitTraceData+0x22>
   1a1a8:	e0d8      	b.n	1a35c <prvTraceInitTraceData+0x1d4>
			/* Already initialized */
			return;
		}
	}
	
	init_hwtc_count = TRC_HWTC_COUNT;
   1a1aa:	4b70      	ldr	r3, [pc, #448]	; (1a36c <prvTraceInitTraceData+0x1e4>)
   1a1ac:	681a      	ldr	r2, [r3, #0]
   1a1ae:	4b70      	ldr	r3, [pc, #448]	; (1a370 <prvTraceInitTraceData+0x1e8>)
   1a1b0:	601a      	str	r2, [r3, #0]
		
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
   1a1b2:	4b6c      	ldr	r3, [pc, #432]	; (1a364 <prvTraceInitTraceData+0x1dc>)
   1a1b4:	6818      	ldr	r0, [r3, #0]
   1a1b6:	23bd      	movs	r3, #189	; 0xbd
   1a1b8:	011b      	lsls	r3, r3, #4
   1a1ba:	001a      	movs	r2, r3
   1a1bc:	2100      	movs	r1, #0
   1a1be:	4b6d      	ldr	r3, [pc, #436]	; (1a374 <prvTraceInitTraceData+0x1ec>)
   1a1c0:	4798      	blx	r3
	
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
   1a1c2:	4b68      	ldr	r3, [pc, #416]	; (1a364 <prvTraceInitTraceData+0x1dc>)
   1a1c4:	681b      	ldr	r3, [r3, #0]
   1a1c6:	4a6c      	ldr	r2, [pc, #432]	; (1a378 <prvTraceInitTraceData+0x1f0>)
   1a1c8:	819a      	strh	r2, [r3, #12]
	RecorderDataPtr->minor_version = TRACE_MINOR_VERSION;
   1a1ca:	4b66      	ldr	r3, [pc, #408]	; (1a364 <prvTraceInitTraceData+0x1dc>)
   1a1cc:	681b      	ldr	r3, [r3, #0]
   1a1ce:	2205      	movs	r2, #5
   1a1d0:	739a      	strb	r2, [r3, #14]
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
   1a1d2:	4b64      	ldr	r3, [pc, #400]	; (1a364 <prvTraceInitTraceData+0x1dc>)
   1a1d4:	681b      	ldr	r3, [r3, #0]
   1a1d6:	2200      	movs	r2, #0
   1a1d8:	73da      	strb	r2, [r3, #15]
	RecorderDataPtr->filesize = sizeof(RecorderDataType);
   1a1da:	4b62      	ldr	r3, [pc, #392]	; (1a364 <prvTraceInitTraceData+0x1dc>)
   1a1dc:	681b      	ldr	r3, [r3, #0]
   1a1de:	22bd      	movs	r2, #189	; 0xbd
   1a1e0:	0112      	lsls	r2, r2, #4
   1a1e2:	611a      	str	r2, [r3, #16]
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
   1a1e4:	4b5f      	ldr	r3, [pc, #380]	; (1a364 <prvTraceInitTraceData+0x1dc>)
   1a1e6:	681b      	ldr	r3, [r3, #0]
   1a1e8:	2296      	movs	r2, #150	; 0x96
   1a1ea:	0052      	lsls	r2, r2, #1
   1a1ec:	619a      	str	r2, [r3, #24]
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
   1a1ee:	4b5d      	ldr	r3, [pc, #372]	; (1a364 <prvTraceInitTraceData+0x1dc>)
   1a1f0:	681b      	ldr	r3, [r3, #0]
   1a1f2:	4a62      	ldr	r2, [pc, #392]	; (1a37c <prvTraceInitTraceData+0x1f4>)
   1a1f4:	655a      	str	r2, [r3, #84]	; 0x54
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
   1a1f6:	4b5b      	ldr	r3, [pc, #364]	; (1a364 <prvTraceInitTraceData+0x1dc>)
   1a1f8:	681b      	ldr	r3, [r3, #0]
   1a1fa:	2200      	movs	r2, #0
   1a1fc:	659a      	str	r2, [r3, #88]	; 0x58
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
   1a1fe:	4b59      	ldr	r3, [pc, #356]	; (1a364 <prvTraceInitTraceData+0x1dc>)
   1a200:	681b      	ldr	r3, [r3, #0]
   1a202:	2200      	movs	r2, #0
   1a204:	635a      	str	r2, [r3, #52]	; 0x34

	/* This function is kernel specific */
	vTraceInitObjectPropertyTable();
   1a206:	4b5e      	ldr	r3, [pc, #376]	; (1a380 <prvTraceInitTraceData+0x1f8>)
   1a208:	4798      	blx	r3

	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
   1a20a:	4b56      	ldr	r3, [pc, #344]	; (1a364 <prvTraceInitTraceData+0x1dc>)
   1a20c:	681b      	ldr	r3, [r3, #0]
   1a20e:	4a5d      	ldr	r2, [pc, #372]	; (1a384 <prvTraceInitTraceData+0x1fc>)
   1a210:	495d      	ldr	r1, [pc, #372]	; (1a388 <prvTraceInitTraceData+0x200>)
   1a212:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
   1a214:	4b53      	ldr	r3, [pc, #332]	; (1a364 <prvTraceInitTraceData+0x1dc>)
   1a216:	681a      	ldr	r2, [r3, #0]
   1a218:	23ac      	movs	r3, #172	; 0xac
   1a21a:	00db      	lsls	r3, r3, #3
   1a21c:	21c8      	movs	r1, #200	; 0xc8
   1a21e:	50d1      	str	r1, [r2, r3]
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
   1a220:	4b50      	ldr	r3, [pc, #320]	; (1a364 <prvTraceInitTraceData+0x1dc>)
   1a222:	681b      	ldr	r3, [r3, #0]
   1a224:	4a59      	ldr	r2, [pc, #356]	; (1a38c <prvTraceInitTraceData+0x204>)
   1a226:	2101      	movs	r1, #1
   1a228:	5099      	str	r1, [r3, r2]
#if (TRC_CFG_INCLUDE_FLOAT_SUPPORT == 1)
	RecorderDataPtr->exampleFloatEncoding = 1.0f; /* otherwise already zero */
#endif
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
   1a22a:	4b4e      	ldr	r3, [pc, #312]	; (1a364 <prvTraceInitTraceData+0x1dc>)
   1a22c:	681a      	ldr	r2, [r3, #0]
   1a22e:	23d7      	movs	r3, #215	; 0xd7
   1a230:	00db      	lsls	r3, r3, #3
   1a232:	4957      	ldr	r1, [pc, #348]	; (1a390 <prvTraceInitTraceData+0x208>)
   1a234:	50d1      	str	r1, [r2, r3]
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
   1a236:	4b4b      	ldr	r3, [pc, #300]	; (1a364 <prvTraceInitTraceData+0x1dc>)
   1a238:	681b      	ldr	r3, [r3, #0]
   1a23a:	4a56      	ldr	r2, [pc, #344]	; (1a394 <prvTraceInitTraceData+0x20c>)
   1a23c:	4694      	mov	ip, r2
   1a23e:	4463      	add	r3, ip
   1a240:	4955      	ldr	r1, [pc, #340]	; (1a398 <prvTraceInitTraceData+0x210>)
   1a242:	2250      	movs	r2, #80	; 0x50
   1a244:	0018      	movs	r0, r3
   1a246:	4b55      	ldr	r3, [pc, #340]	; (1a39c <prvTraceInitTraceData+0x214>)
   1a248:	4798      	blx	r3
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
   1a24a:	4b46      	ldr	r3, [pc, #280]	; (1a364 <prvTraceInitTraceData+0x1dc>)
   1a24c:	681b      	ldr	r3, [r3, #0]
   1a24e:	4a54      	ldr	r2, [pc, #336]	; (1a3a0 <prvTraceInitTraceData+0x218>)
   1a250:	4954      	ldr	r1, [pc, #336]	; (1a3a4 <prvTraceInitTraceData+0x21c>)
   1a252:	5099      	str	r1, [r3, r2]
	RecorderDataPtr->endmarker0 = 0x0A;
   1a254:	4b43      	ldr	r3, [pc, #268]	; (1a364 <prvTraceInitTraceData+0x1dc>)
   1a256:	681b      	ldr	r3, [r3, #0]
   1a258:	4a53      	ldr	r2, [pc, #332]	; (1a3a8 <prvTraceInitTraceData+0x220>)
   1a25a:	210a      	movs	r1, #10
   1a25c:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker1 = 0x0B;
   1a25e:	4b41      	ldr	r3, [pc, #260]	; (1a364 <prvTraceInitTraceData+0x1dc>)
   1a260:	681b      	ldr	r3, [r3, #0]
   1a262:	4a52      	ldr	r2, [pc, #328]	; (1a3ac <prvTraceInitTraceData+0x224>)
   1a264:	210b      	movs	r1, #11
   1a266:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker2 = 0x0C;
   1a268:	4b3e      	ldr	r3, [pc, #248]	; (1a364 <prvTraceInitTraceData+0x1dc>)
   1a26a:	681b      	ldr	r3, [r3, #0]
   1a26c:	4a50      	ldr	r2, [pc, #320]	; (1a3b0 <prvTraceInitTraceData+0x228>)
   1a26e:	210c      	movs	r1, #12
   1a270:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker3 = 0x0D;
   1a272:	4b3c      	ldr	r3, [pc, #240]	; (1a364 <prvTraceInitTraceData+0x1dc>)
   1a274:	681b      	ldr	r3, [r3, #0]
   1a276:	4a4f      	ldr	r2, [pc, #316]	; (1a3b4 <prvTraceInitTraceData+0x22c>)
   1a278:	210d      	movs	r1, #13
   1a27a:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker4 = 0x71;
   1a27c:	4b39      	ldr	r3, [pc, #228]	; (1a364 <prvTraceInitTraceData+0x1dc>)
   1a27e:	681b      	ldr	r3, [r3, #0]
   1a280:	4a4d      	ldr	r2, [pc, #308]	; (1a3b8 <prvTraceInitTraceData+0x230>)
   1a282:	2171      	movs	r1, #113	; 0x71
   1a284:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker5 = 0x72;
   1a286:	4b37      	ldr	r3, [pc, #220]	; (1a364 <prvTraceInitTraceData+0x1dc>)
   1a288:	681b      	ldr	r3, [r3, #0]
   1a28a:	4a4c      	ldr	r2, [pc, #304]	; (1a3bc <prvTraceInitTraceData+0x234>)
   1a28c:	2172      	movs	r1, #114	; 0x72
   1a28e:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker6 = 0x73;
   1a290:	4b34      	ldr	r3, [pc, #208]	; (1a364 <prvTraceInitTraceData+0x1dc>)
   1a292:	681b      	ldr	r3, [r3, #0]
   1a294:	4a4a      	ldr	r2, [pc, #296]	; (1a3c0 <prvTraceInitTraceData+0x238>)
   1a296:	2173      	movs	r1, #115	; 0x73
   1a298:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker7 = 0x74;
   1a29a:	4b32      	ldr	r3, [pc, #200]	; (1a364 <prvTraceInitTraceData+0x1dc>)
   1a29c:	681b      	ldr	r3, [r3, #0]
   1a29e:	4a49      	ldr	r2, [pc, #292]	; (1a3c4 <prvTraceInitTraceData+0x23c>)
   1a2a0:	2174      	movs	r1, #116	; 0x74
   1a2a2:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker8 = 0xF1;
   1a2a4:	4b2f      	ldr	r3, [pc, #188]	; (1a364 <prvTraceInitTraceData+0x1dc>)
   1a2a6:	681b      	ldr	r3, [r3, #0]
   1a2a8:	4a47      	ldr	r2, [pc, #284]	; (1a3c8 <prvTraceInitTraceData+0x240>)
   1a2aa:	21f1      	movs	r1, #241	; 0xf1
   1a2ac:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker9 = 0xF2;
   1a2ae:	4b2d      	ldr	r3, [pc, #180]	; (1a364 <prvTraceInitTraceData+0x1dc>)
   1a2b0:	681b      	ldr	r3, [r3, #0]
   1a2b2:	4a46      	ldr	r2, [pc, #280]	; (1a3cc <prvTraceInitTraceData+0x244>)
   1a2b4:	21f2      	movs	r1, #242	; 0xf2
   1a2b6:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker10 = 0xF3;
   1a2b8:	4b2a      	ldr	r3, [pc, #168]	; (1a364 <prvTraceInitTraceData+0x1dc>)
   1a2ba:	681b      	ldr	r3, [r3, #0]
   1a2bc:	4a44      	ldr	r2, [pc, #272]	; (1a3d0 <prvTraceInitTraceData+0x248>)
   1a2be:	21f3      	movs	r1, #243	; 0xf3
   1a2c0:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->endmarker11 = 0xF4;
   1a2c2:	4b28      	ldr	r3, [pc, #160]	; (1a364 <prvTraceInitTraceData+0x1dc>)
   1a2c4:	681b      	ldr	r3, [r3, #0]
   1a2c6:	4a43      	ldr	r2, [pc, #268]	; (1a3d4 <prvTraceInitTraceData+0x24c>)
   1a2c8:	21f4      	movs	r1, #244	; 0xf4
   1a2ca:	5499      	strb	r1, [r3, r2]
	RecorderDataPtr->userEventBuffer.numberOfSlots = (TRC_CFG_SEPARATE_USER_EVENT_BUFFER_SIZE);
	RecorderDataPtr->userEventBuffer.numberOfChannels = (TRC_CFG_UB_CHANNELS) + 1;
#endif

	/* Kernel specific initialization of the objectHandleStacks variable */
	vTraceInitObjectHandleStack();
   1a2cc:	4b42      	ldr	r3, [pc, #264]	; (1a3d8 <prvTraceInitTraceData+0x250>)
   1a2ce:	4798      	blx	r3
	and the fields are volatile to ensure this assignment order. This to avoid any 
	chance of accidental duplicates of this elsewhere in memory.
	
	Moreover, the fields are set byte-by-byte to avoid endian issues.*/
	
	RecorderDataPtr->startmarker11 = 0xF4;
   1a2d0:	4b24      	ldr	r3, [pc, #144]	; (1a364 <prvTraceInitTraceData+0x1dc>)
   1a2d2:	681b      	ldr	r3, [r3, #0]
   1a2d4:	22f4      	movs	r2, #244	; 0xf4
   1a2d6:	72da      	strb	r2, [r3, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
   1a2d8:	4b22      	ldr	r3, [pc, #136]	; (1a364 <prvTraceInitTraceData+0x1dc>)
   1a2da:	681b      	ldr	r3, [r3, #0]
   1a2dc:	22f3      	movs	r2, #243	; 0xf3
   1a2de:	729a      	strb	r2, [r3, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
   1a2e0:	4b20      	ldr	r3, [pc, #128]	; (1a364 <prvTraceInitTraceData+0x1dc>)
   1a2e2:	681b      	ldr	r3, [r3, #0]
   1a2e4:	22f2      	movs	r2, #242	; 0xf2
   1a2e6:	725a      	strb	r2, [r3, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
   1a2e8:	4b1e      	ldr	r3, [pc, #120]	; (1a364 <prvTraceInitTraceData+0x1dc>)
   1a2ea:	681b      	ldr	r3, [r3, #0]
   1a2ec:	22f1      	movs	r2, #241	; 0xf1
   1a2ee:	721a      	strb	r2, [r3, #8]
	RecorderDataPtr->startmarker7 = 0x74;
   1a2f0:	4b1c      	ldr	r3, [pc, #112]	; (1a364 <prvTraceInitTraceData+0x1dc>)
   1a2f2:	681b      	ldr	r3, [r3, #0]
   1a2f4:	2274      	movs	r2, #116	; 0x74
   1a2f6:	71da      	strb	r2, [r3, #7]
	RecorderDataPtr->startmarker6 = 0x73;
   1a2f8:	4b1a      	ldr	r3, [pc, #104]	; (1a364 <prvTraceInitTraceData+0x1dc>)
   1a2fa:	681b      	ldr	r3, [r3, #0]
   1a2fc:	2273      	movs	r2, #115	; 0x73
   1a2fe:	719a      	strb	r2, [r3, #6]
	RecorderDataPtr->startmarker5 = 0x72;
   1a300:	4b18      	ldr	r3, [pc, #96]	; (1a364 <prvTraceInitTraceData+0x1dc>)
   1a302:	681b      	ldr	r3, [r3, #0]
   1a304:	2272      	movs	r2, #114	; 0x72
   1a306:	715a      	strb	r2, [r3, #5]
	RecorderDataPtr->startmarker4 = 0x71;
   1a308:	4b16      	ldr	r3, [pc, #88]	; (1a364 <prvTraceInitTraceData+0x1dc>)
   1a30a:	681b      	ldr	r3, [r3, #0]
   1a30c:	2271      	movs	r2, #113	; 0x71
   1a30e:	711a      	strb	r2, [r3, #4]
	RecorderDataPtr->startmarker3 = 0x04;
   1a310:	4b14      	ldr	r3, [pc, #80]	; (1a364 <prvTraceInitTraceData+0x1dc>)
   1a312:	681b      	ldr	r3, [r3, #0]
   1a314:	2204      	movs	r2, #4
   1a316:	70da      	strb	r2, [r3, #3]
	RecorderDataPtr->startmarker2 = 0x03;
   1a318:	4b12      	ldr	r3, [pc, #72]	; (1a364 <prvTraceInitTraceData+0x1dc>)
   1a31a:	681b      	ldr	r3, [r3, #0]
   1a31c:	2203      	movs	r2, #3
   1a31e:	709a      	strb	r2, [r3, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
   1a320:	4b10      	ldr	r3, [pc, #64]	; (1a364 <prvTraceInitTraceData+0x1dc>)
   1a322:	681b      	ldr	r3, [r3, #0]
   1a324:	2202      	movs	r2, #2
   1a326:	705a      	strb	r2, [r3, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
   1a328:	4b0e      	ldr	r3, [pc, #56]	; (1a364 <prvTraceInitTraceData+0x1dc>)
   1a32a:	681b      	ldr	r3, [r3, #0]
   1a32c:	2201      	movs	r2, #1
   1a32e:	701a      	strb	r2, [r3, #0]

	if (traceErrorMessage != NULL)
   1a330:	4b2a      	ldr	r3, [pc, #168]	; (1a3dc <prvTraceInitTraceData+0x254>)
   1a332:	681b      	ldr	r3, [r3, #0]
   1a334:	2b00      	cmp	r3, #0
   1a336:	d012      	beq.n	1a35e <prvTraceInitTraceData+0x1d6>
	{
		// An error was detected before vTraceEnable was called, make sure this is stored in the trace data.
		prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   1a338:	4b0a      	ldr	r3, [pc, #40]	; (1a364 <prvTraceInitTraceData+0x1dc>)
   1a33a:	681b      	ldr	r3, [r3, #0]
   1a33c:	4a15      	ldr	r2, [pc, #84]	; (1a394 <prvTraceInitTraceData+0x20c>)
   1a33e:	1898      	adds	r0, r3, r2
   1a340:	4b26      	ldr	r3, [pc, #152]	; (1a3dc <prvTraceInitTraceData+0x254>)
   1a342:	681b      	ldr	r3, [r3, #0]
   1a344:	2250      	movs	r2, #80	; 0x50
   1a346:	0019      	movs	r1, r3
   1a348:	4b14      	ldr	r3, [pc, #80]	; (1a39c <prvTraceInitTraceData+0x214>)
   1a34a:	4798      	blx	r3
		RecorderDataPtr->internalErrorOccured = 1;
   1a34c:	4b05      	ldr	r3, [pc, #20]	; (1a364 <prvTraceInitTraceData+0x1dc>)
   1a34e:	681b      	ldr	r3, [r3, #0]
   1a350:	4a23      	ldr	r2, [pc, #140]	; (1a3e0 <prvTraceInitTraceData+0x258>)
   1a352:	2101      	movs	r1, #1
   1a354:	5099      	str	r1, [r3, r2]
		vTraceStop();
   1a356:	4b23      	ldr	r3, [pc, #140]	; (1a3e4 <prvTraceInitTraceData+0x25c>)
   1a358:	4798      	blx	r3
   1a35a:	e000      	b.n	1a35e <prvTraceInitTraceData+0x1d6>
			return;
   1a35c:	46c0      	nop			; (mov r8, r8)

	
#ifdef TRC_PORT_SPECIFIC_INIT
	TRC_PORT_SPECIFIC_INIT();
#endif
}
   1a35e:	46bd      	mov	sp, r7
   1a360:	bd80      	pop	{r7, pc}
   1a362:	46c0      	nop			; (mov r8, r8)
   1a364:	20000df4 	.word	0x20000df4
   1a368:	20004a4c 	.word	0x20004a4c
   1a36c:	e000e018 	.word	0xe000e018
   1a370:	2000561c 	.word	0x2000561c
   1a374:	0003582f 	.word	0x0003582f
   1a378:	00001aa1 	.word	0x00001aa1
   1a37c:	f0f0f0f0 	.word	0xf0f0f0f0
   1a380:	000192ed 	.word	0x000192ed
   1a384:	0000055c 	.word	0x0000055c
   1a388:	f1f1f1f1 	.word	0xf1f1f1f1
   1a38c:	00000564 	.word	0x00000564
   1a390:	f2f2f2f2 	.word	0xf2f2f2f2
   1a394:	000006bc 	.word	0x000006bc
   1a398:	00038e2c 	.word	0x00038e2c
   1a39c:	0001a6fd 	.word	0x0001a6fd
   1a3a0:	0000070c 	.word	0x0000070c
   1a3a4:	f3f3f3f3 	.word	0xf3f3f3f3
   1a3a8:	00000bc4 	.word	0x00000bc4
   1a3ac:	00000bc5 	.word	0x00000bc5
   1a3b0:	00000bc6 	.word	0x00000bc6
   1a3b4:	00000bc7 	.word	0x00000bc7
   1a3b8:	00000bc8 	.word	0x00000bc8
   1a3bc:	00000bc9 	.word	0x00000bc9
   1a3c0:	00000bca 	.word	0x00000bca
   1a3c4:	00000bcb 	.word	0x00000bcb
   1a3c8:	00000bcc 	.word	0x00000bcc
   1a3cc:	00000bcd 	.word	0x00000bcd
   1a3d0:	00000bce 	.word	0x00000bce
   1a3d4:	00000bcf 	.word	0x00000bcf
   1a3d8:	0001948d 	.word	0x0001948d
   1a3dc:	20000d54 	.word	0x20000d54
   1a3e0:	000006b4 	.word	0x000006b4
   1a3e4:	000196f5 	.word	0x000196f5

0001a3e8 <prvTraceNextFreeEventBufferSlot>:


void* prvTraceNextFreeEventBufferSlot(void)
{
   1a3e8:	b580      	push	{r7, lr}
   1a3ea:	af00      	add	r7, sp, #0
	if (! RecorderDataPtr->recorderActive)
   1a3ec:	4b10      	ldr	r3, [pc, #64]	; (1a430 <prvTraceNextFreeEventBufferSlot+0x48>)
   1a3ee:	681b      	ldr	r3, [r3, #0]
   1a3f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a3f2:	2b00      	cmp	r3, #0
   1a3f4:	d101      	bne.n	1a3fa <prvTraceNextFreeEventBufferSlot+0x12>
	{
		/* If an XTS or XPS event prior to the main event has filled the buffer
		before saving the main event, and store mode is "stop when full". */
		return NULL;
   1a3f6:	2300      	movs	r3, #0
   1a3f8:	e017      	b.n	1a42a <prvTraceNextFreeEventBufferSlot+0x42>
	}

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   1a3fa:	4b0d      	ldr	r3, [pc, #52]	; (1a430 <prvTraceNextFreeEventBufferSlot+0x48>)
   1a3fc:	681b      	ldr	r3, [r3, #0]
   1a3fe:	69da      	ldr	r2, [r3, #28]
   1a400:	232c      	movs	r3, #44	; 0x2c
   1a402:	33ff      	adds	r3, #255	; 0xff
   1a404:	429a      	cmp	r2, r3
   1a406:	d905      	bls.n	1a414 <prvTraceNextFreeEventBufferSlot+0x2c>
	{
		prvTraceError("Attempt to index outside event buffer!");
   1a408:	4b0a      	ldr	r3, [pc, #40]	; (1a434 <prvTraceNextFreeEventBufferSlot+0x4c>)
   1a40a:	0018      	movs	r0, r3
   1a40c:	4b0a      	ldr	r3, [pc, #40]	; (1a438 <prvTraceNextFreeEventBufferSlot+0x50>)
   1a40e:	4798      	blx	r3
		return NULL;
   1a410:	2300      	movs	r3, #0
   1a412:	e00a      	b.n	1a42a <prvTraceNextFreeEventBufferSlot+0x42>
	}
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
   1a414:	4b06      	ldr	r3, [pc, #24]	; (1a430 <prvTraceNextFreeEventBufferSlot+0x48>)
   1a416:	681a      	ldr	r2, [r3, #0]
   1a418:	4b05      	ldr	r3, [pc, #20]	; (1a430 <prvTraceNextFreeEventBufferSlot+0x48>)
   1a41a:	681b      	ldr	r3, [r3, #0]
   1a41c:	69db      	ldr	r3, [r3, #28]
   1a41e:	009b      	lsls	r3, r3, #2
   1a420:	21e2      	movs	r1, #226	; 0xe2
   1a422:	00c9      	lsls	r1, r1, #3
   1a424:	468c      	mov	ip, r1
   1a426:	4463      	add	r3, ip
   1a428:	18d3      	adds	r3, r2, r3
}
   1a42a:	0018      	movs	r0, r3
   1a42c:	46bd      	mov	sp, r7
   1a42e:	bd80      	pop	{r7, pc}
   1a430:	20000df4 	.word	0x20000df4
   1a434:	00038e40 	.word	0x00038e40
   1a438:	0001a831 	.word	0x0001a831

0001a43c <uiIndexOfObject>:

uint16_t uiIndexOfObject(traceHandle objecthandle, uint8_t objectclass)
{
   1a43c:	b580      	push	{r7, lr}
   1a43e:	b082      	sub	sp, #8
   1a440:	af00      	add	r7, sp, #0
   1a442:	0002      	movs	r2, r0
   1a444:	1dfb      	adds	r3, r7, #7
   1a446:	701a      	strb	r2, [r3, #0]
   1a448:	1dbb      	adds	r3, r7, #6
   1a44a:	1c0a      	adds	r2, r1, #0
   1a44c:	701a      	strb	r2, [r3, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   1a44e:	1dbb      	adds	r3, r7, #6
   1a450:	781b      	ldrb	r3, [r3, #0]
   1a452:	2b08      	cmp	r3, #8
   1a454:	d905      	bls.n	1a462 <uiIndexOfObject+0x26>
   1a456:	4b2a      	ldr	r3, [pc, #168]	; (1a500 <uiIndexOfObject+0xc4>)
   1a458:	0018      	movs	r0, r3
   1a45a:	4b2a      	ldr	r3, [pc, #168]	; (1a504 <uiIndexOfObject+0xc8>)
   1a45c:	4798      	blx	r3
   1a45e:	2300      	movs	r3, #0
   1a460:	e049      	b.n	1a4f6 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objectclass", 0);
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
   1a462:	1dfb      	adds	r3, r7, #7
   1a464:	781b      	ldrb	r3, [r3, #0]
   1a466:	2b00      	cmp	r3, #0
   1a468:	d00b      	beq.n	1a482 <uiIndexOfObject+0x46>
   1a46a:	4b27      	ldr	r3, [pc, #156]	; (1a508 <uiIndexOfObject+0xcc>)
   1a46c:	681a      	ldr	r2, [r3, #0]
   1a46e:	1dbb      	adds	r3, r7, #6
   1a470:	781b      	ldrb	r3, [r3, #0]
   1a472:	2164      	movs	r1, #100	; 0x64
   1a474:	18d3      	adds	r3, r2, r3
   1a476:	185b      	adds	r3, r3, r1
   1a478:	781b      	ldrb	r3, [r3, #0]
   1a47a:	1dfa      	adds	r2, r7, #7
   1a47c:	7812      	ldrb	r2, [r2, #0]
   1a47e:	429a      	cmp	r2, r3
   1a480:	d905      	bls.n	1a48e <uiIndexOfObject+0x52>
   1a482:	4b22      	ldr	r3, [pc, #136]	; (1a50c <uiIndexOfObject+0xd0>)
   1a484:	0018      	movs	r0, r3
   1a486:	4b1f      	ldr	r3, [pc, #124]	; (1a504 <uiIndexOfObject+0xc8>)
   1a488:	4798      	blx	r3
   1a48a:	2300      	movs	r3, #0
   1a48c:	e033      	b.n	1a4f6 <uiIndexOfObject+0xba>
		"uiIndexOfObject: Invalid value for objecthandle", 0);

	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   1a48e:	1dbb      	adds	r3, r7, #6
   1a490:	781b      	ldrb	r3, [r3, #0]
   1a492:	2b08      	cmp	r3, #8
   1a494:	d82a      	bhi.n	1a4ec <uiIndexOfObject+0xb0>
   1a496:	1dfb      	adds	r3, r7, #7
   1a498:	781b      	ldrb	r3, [r3, #0]
   1a49a:	2b00      	cmp	r3, #0
   1a49c:	d026      	beq.n	1a4ec <uiIndexOfObject+0xb0>
		(objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass]))
   1a49e:	4b1a      	ldr	r3, [pc, #104]	; (1a508 <uiIndexOfObject+0xcc>)
   1a4a0:	681a      	ldr	r2, [r3, #0]
   1a4a2:	1dbb      	adds	r3, r7, #6
   1a4a4:	781b      	ldrb	r3, [r3, #0]
   1a4a6:	2164      	movs	r1, #100	; 0x64
   1a4a8:	18d3      	adds	r3, r2, r3
   1a4aa:	185b      	adds	r3, r3, r1
   1a4ac:	781b      	ldrb	r3, [r3, #0]
	if ((objectclass < TRACE_NCLASSES) && (objecthandle > 0) && 
   1a4ae:	1dfa      	adds	r2, r7, #7
   1a4b0:	7812      	ldrb	r2, [r2, #0]
   1a4b2:	429a      	cmp	r2, r3
   1a4b4:	d81a      	bhi.n	1a4ec <uiIndexOfObject+0xb0>
	{
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1a4b6:	4b14      	ldr	r3, [pc, #80]	; (1a508 <uiIndexOfObject+0xcc>)
   1a4b8:	681a      	ldr	r2, [r3, #0]
   1a4ba:	1dbb      	adds	r3, r7, #6
   1a4bc:	781b      	ldrb	r3, [r3, #0]
   1a4be:	3340      	adds	r3, #64	; 0x40
   1a4c0:	005b      	lsls	r3, r3, #1
   1a4c2:	18d3      	adds	r3, r2, r3
   1a4c4:	3308      	adds	r3, #8
   1a4c6:	881a      	ldrh	r2, [r3, #0]
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   1a4c8:	4b0f      	ldr	r3, [pc, #60]	; (1a508 <uiIndexOfObject+0xcc>)
   1a4ca:	6819      	ldr	r1, [r3, #0]
   1a4cc:	1dbb      	adds	r3, r7, #6
   1a4ce:	781b      	ldrb	r3, [r3, #0]
   1a4d0:	207c      	movs	r0, #124	; 0x7c
   1a4d2:	18cb      	adds	r3, r1, r3
   1a4d4:	181b      	adds	r3, r3, r0
   1a4d6:	781b      	ldrb	r3, [r3, #0]
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1a4d8:	b29b      	uxth	r3, r3
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
   1a4da:	1df9      	adds	r1, r7, #7
   1a4dc:	7809      	ldrb	r1, [r1, #0]
   1a4de:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
   1a4e0:	b289      	uxth	r1, r1
   1a4e2:	434b      	muls	r3, r1
   1a4e4:	b29b      	uxth	r3, r3
   1a4e6:	18d3      	adds	r3, r2, r3
   1a4e8:	b29b      	uxth	r3, r3
   1a4ea:	e004      	b.n	1a4f6 <uiIndexOfObject+0xba>
	}

	prvTraceError("Object table lookup with invalid object handle or object class!");
   1a4ec:	4b08      	ldr	r3, [pc, #32]	; (1a510 <uiIndexOfObject+0xd4>)
   1a4ee:	0018      	movs	r0, r3
   1a4f0:	4b04      	ldr	r3, [pc, #16]	; (1a504 <uiIndexOfObject+0xc8>)
   1a4f2:	4798      	blx	r3
	return 0;
   1a4f4:	2300      	movs	r3, #0
}
   1a4f6:	0018      	movs	r0, r3
   1a4f8:	46bd      	mov	sp, r7
   1a4fa:	b002      	add	sp, #8
   1a4fc:	bd80      	pop	{r7, pc}
   1a4fe:	46c0      	nop			; (mov r8, r8)
   1a500:	00038e68 	.word	0x00038e68
   1a504:	0001a831 	.word	0x0001a831
   1a508:	20000df4 	.word	0x20000df4
   1a50c:	00038ea8 	.word	0x00038ea8
   1a510:	00038ee8 	.word	0x00038ee8

0001a514 <prvTraceGetObjectHandle>:

traceHandle prvTraceGetObjectHandle(traceObjectClass objectclass)
{
   1a514:	b580      	push	{r7, lr}
   1a516:	b088      	sub	sp, #32
   1a518:	af00      	add	r7, sp, #0
   1a51a:	0002      	movs	r2, r0
   1a51c:	1dfb      	adds	r3, r7, #7
   1a51e:	701a      	strb	r2, [r3, #0]
	traceHandle handle;
	static int indexOfHandle;

	TRACE_ALLOC_CRITICAL_SECTION();

	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
   1a520:	4b5a      	ldr	r3, [pc, #360]	; (1a68c <prvTraceGetObjectHandle+0x178>)
   1a522:	681b      	ldr	r3, [r3, #0]
   1a524:	2b00      	cmp	r3, #0
   1a526:	d105      	bne.n	1a534 <prvTraceGetObjectHandle+0x20>
   1a528:	4b59      	ldr	r3, [pc, #356]	; (1a690 <prvTraceGetObjectHandle+0x17c>)
   1a52a:	0018      	movs	r0, r3
   1a52c:	4b59      	ldr	r3, [pc, #356]	; (1a694 <prvTraceGetObjectHandle+0x180>)
   1a52e:	4798      	blx	r3
   1a530:	2300      	movs	r3, #0
   1a532:	e0a7      	b.n	1a684 <prvTraceGetObjectHandle+0x170>
	
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
   1a534:	1dfb      	adds	r3, r7, #7
   1a536:	781b      	ldrb	r3, [r3, #0]
   1a538:	2b08      	cmp	r3, #8
   1a53a:	d905      	bls.n	1a548 <prvTraceGetObjectHandle+0x34>
   1a53c:	4b56      	ldr	r3, [pc, #344]	; (1a698 <prvTraceGetObjectHandle+0x184>)
   1a53e:	0018      	movs	r0, r3
   1a540:	4b54      	ldr	r3, [pc, #336]	; (1a694 <prvTraceGetObjectHandle+0x180>)
   1a542:	4798      	blx	r3
   1a544:	2300      	movs	r3, #0
   1a546:	e09d      	b.n	1a684 <prvTraceGetObjectHandle+0x170>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   1a548:	f3ef 8310 	mrs	r3, PRIMASK
   1a54c:	60fb      	str	r3, [r7, #12]
  return(result);
   1a54e:	68fb      	ldr	r3, [r7, #12]
		"prvTraceGetObjectHandle: Invalid value for objectclass", (traceHandle)0);

	trcCRITICAL_SECTION_BEGIN();
   1a550:	61bb      	str	r3, [r7, #24]
   1a552:	2301      	movs	r3, #1
   1a554:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   1a556:	693b      	ldr	r3, [r7, #16]
   1a558:	f383 8810 	msr	PRIMASK, r3
   1a55c:	4b4f      	ldr	r3, [pc, #316]	; (1a69c <prvTraceGetObjectHandle+0x188>)
   1a55e:	681b      	ldr	r3, [r3, #0]
   1a560:	1c5a      	adds	r2, r3, #1
   1a562:	4b4e      	ldr	r3, [pc, #312]	; (1a69c <prvTraceGetObjectHandle+0x188>)
   1a564:	601a      	str	r2, [r3, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
   1a566:	1dfb      	adds	r3, r7, #7
   1a568:	781a      	ldrb	r2, [r3, #0]
   1a56a:	4b4d      	ldr	r3, [pc, #308]	; (1a6a0 <prvTraceGetObjectHandle+0x18c>)
   1a56c:	0052      	lsls	r2, r2, #1
   1a56e:	5ad3      	ldrh	r3, [r2, r3]
   1a570:	001a      	movs	r2, r3
   1a572:	4b4c      	ldr	r3, [pc, #304]	; (1a6a4 <prvTraceGetObjectHandle+0x190>)
   1a574:	601a      	str	r2, [r3, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
   1a576:	4b4b      	ldr	r3, [pc, #300]	; (1a6a4 <prvTraceGetObjectHandle+0x190>)
   1a578:	681b      	ldr	r3, [r3, #0]
   1a57a:	4a49      	ldr	r2, [pc, #292]	; (1a6a0 <prvTraceGetObjectHandle+0x18c>)
   1a57c:	2148      	movs	r1, #72	; 0x48
   1a57e:	18d3      	adds	r3, r2, r3
   1a580:	185b      	adds	r3, r3, r1
   1a582:	781b      	ldrb	r3, [r3, #0]
   1a584:	2b00      	cmp	r3, #0
   1a586:	d117      	bne.n	1a5b8 <prvTraceGetObjectHandle+0xa4>
	{
		/* Zero is used to indicate a never before used handle, i.e.,
			new slots in the handle stack. The handle slot needs to
			be initialized here (starts at 1). */
		objectHandleStacks.objectHandles[indexOfHandle] =
   1a588:	4b46      	ldr	r3, [pc, #280]	; (1a6a4 <prvTraceGetObjectHandle+0x190>)
   1a58a:	681a      	ldr	r2, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   1a58c:	4b45      	ldr	r3, [pc, #276]	; (1a6a4 <prvTraceGetObjectHandle+0x190>)
   1a58e:	681b      	ldr	r3, [r3, #0]
   1a590:	b2d9      	uxtb	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass]);
   1a592:	1dfb      	adds	r3, r7, #7
   1a594:	781b      	ldrb	r3, [r3, #0]
   1a596:	4842      	ldr	r0, [pc, #264]	; (1a6a0 <prvTraceGetObjectHandle+0x18c>)
   1a598:	3308      	adds	r3, #8
   1a59a:	005b      	lsls	r3, r3, #1
   1a59c:	18c3      	adds	r3, r0, r3
   1a59e:	3302      	adds	r3, #2
   1a5a0:	881b      	ldrh	r3, [r3, #0]
			(traceHandle)(1 + indexOfHandle -
   1a5a2:	b2db      	uxtb	r3, r3
   1a5a4:	1acb      	subs	r3, r1, r3
   1a5a6:	b2db      	uxtb	r3, r3
   1a5a8:	3301      	adds	r3, #1
   1a5aa:	b2d8      	uxtb	r0, r3
		objectHandleStacks.objectHandles[indexOfHandle] =
   1a5ac:	4b3c      	ldr	r3, [pc, #240]	; (1a6a0 <prvTraceGetObjectHandle+0x18c>)
   1a5ae:	2148      	movs	r1, #72	; 0x48
   1a5b0:	189b      	adds	r3, r3, r2
   1a5b2:	185b      	adds	r3, r3, r1
   1a5b4:	1c02      	adds	r2, r0, #0
   1a5b6:	701a      	strb	r2, [r3, #0]
	}

	handle = objectHandleStacks.objectHandles[indexOfHandle];
   1a5b8:	4b3a      	ldr	r3, [pc, #232]	; (1a6a4 <prvTraceGetObjectHandle+0x190>)
   1a5ba:	681a      	ldr	r2, [r3, #0]
   1a5bc:	231f      	movs	r3, #31
   1a5be:	18fb      	adds	r3, r7, r3
   1a5c0:	4937      	ldr	r1, [pc, #220]	; (1a6a0 <prvTraceGetObjectHandle+0x18c>)
   1a5c2:	2048      	movs	r0, #72	; 0x48
   1a5c4:	188a      	adds	r2, r1, r2
   1a5c6:	1812      	adds	r2, r2, r0
   1a5c8:	7812      	ldrb	r2, [r2, #0]
   1a5ca:	701a      	strb	r2, [r3, #0]

	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   1a5cc:	1dfb      	adds	r3, r7, #7
   1a5ce:	781a      	ldrb	r2, [r3, #0]
   1a5d0:	4b33      	ldr	r3, [pc, #204]	; (1a6a0 <prvTraceGetObjectHandle+0x18c>)
   1a5d2:	0052      	lsls	r2, r2, #1
   1a5d4:	5ad2      	ldrh	r2, [r2, r3]
		> objectHandleStacks.highestIndexOfClass[objectclass])
   1a5d6:	1dfb      	adds	r3, r7, #7
   1a5d8:	781b      	ldrb	r3, [r3, #0]
   1a5da:	4931      	ldr	r1, [pc, #196]	; (1a6a0 <prvTraceGetObjectHandle+0x18c>)
   1a5dc:	3310      	adds	r3, #16
   1a5de:	005b      	lsls	r3, r3, #1
   1a5e0:	18cb      	adds	r3, r1, r3
   1a5e2:	3304      	adds	r3, #4
   1a5e4:	881b      	ldrh	r3, [r3, #0]
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
   1a5e6:	429a      	cmp	r2, r3
   1a5e8:	d90d      	bls.n	1a606 <prvTraceGetObjectHandle+0xf2>
	{
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   1a5ea:	1dfb      	adds	r3, r7, #7
   1a5ec:	781b      	ldrb	r3, [r3, #0]
   1a5ee:	0018      	movs	r0, r3
   1a5f0:	4b2d      	ldr	r3, [pc, #180]	; (1a6a8 <prvTraceGetObjectHandle+0x194>)
   1a5f2:	4798      	blx	r3
   1a5f4:	0003      	movs	r3, r0
   1a5f6:	0018      	movs	r0, r3
   1a5f8:	4b26      	ldr	r3, [pc, #152]	; (1a694 <prvTraceGetObjectHandle+0x180>)
   1a5fa:	4798      	blx	r3
		handle = 0;
   1a5fc:	231f      	movs	r3, #31
   1a5fe:	18fb      	adds	r3, r7, r3
   1a600:	2200      	movs	r2, #0
   1a602:	701a      	strb	r2, [r3, #0]
   1a604:	e031      	b.n	1a66a <prvTraceGetObjectHandle+0x156>
	}
	else
	{
		int hndCount;
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
   1a606:	1dfb      	adds	r3, r7, #7
   1a608:	781b      	ldrb	r3, [r3, #0]
   1a60a:	4a25      	ldr	r2, [pc, #148]	; (1a6a0 <prvTraceGetObjectHandle+0x18c>)
   1a60c:	0059      	lsls	r1, r3, #1
   1a60e:	5a8a      	ldrh	r2, [r1, r2]
   1a610:	3201      	adds	r2, #1
   1a612:	b291      	uxth	r1, r2
   1a614:	4a22      	ldr	r2, [pc, #136]	; (1a6a0 <prvTraceGetObjectHandle+0x18c>)
   1a616:	005b      	lsls	r3, r3, #1
   1a618:	5299      	strh	r1, [r3, r2]

		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   1a61a:	1dfb      	adds	r3, r7, #7
   1a61c:	781a      	ldrb	r2, [r3, #0]
   1a61e:	4b20      	ldr	r3, [pc, #128]	; (1a6a0 <prvTraceGetObjectHandle+0x18c>)
   1a620:	0052      	lsls	r2, r2, #1
   1a622:	5ad3      	ldrh	r3, [r2, r3]
   1a624:	0019      	movs	r1, r3
			objectHandleStacks.lowestIndexOfClass[objectclass];
   1a626:	1dfb      	adds	r3, r7, #7
   1a628:	781b      	ldrb	r3, [r3, #0]
   1a62a:	4a1d      	ldr	r2, [pc, #116]	; (1a6a0 <prvTraceGetObjectHandle+0x18c>)
   1a62c:	3308      	adds	r3, #8
   1a62e:	005b      	lsls	r3, r3, #1
   1a630:	18d3      	adds	r3, r2, r3
   1a632:	3302      	adds	r3, #2
   1a634:	881b      	ldrh	r3, [r3, #0]
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
   1a636:	1acb      	subs	r3, r1, r3
   1a638:	617b      	str	r3, [r7, #20]

		if (hndCount >
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
   1a63a:	1dfb      	adds	r3, r7, #7
   1a63c:	781b      	ldrb	r3, [r3, #0]
   1a63e:	4a18      	ldr	r2, [pc, #96]	; (1a6a0 <prvTraceGetObjectHandle+0x18c>)
   1a640:	3318      	adds	r3, #24
   1a642:	005b      	lsls	r3, r3, #1
   1a644:	18d3      	adds	r3, r2, r3
   1a646:	3306      	adds	r3, #6
   1a648:	881b      	ldrh	r3, [r3, #0]
   1a64a:	001a      	movs	r2, r3
		if (hndCount >
   1a64c:	697b      	ldr	r3, [r7, #20]
   1a64e:	429a      	cmp	r2, r3
   1a650:	da0b      	bge.n	1a66a <prvTraceGetObjectHandle+0x156>
		{
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   1a652:	1dfb      	adds	r3, r7, #7
   1a654:	781b      	ldrb	r3, [r3, #0]
				(traceHandle)hndCount;
   1a656:	697a      	ldr	r2, [r7, #20]
   1a658:	b2d2      	uxtb	r2, r2
   1a65a:	b291      	uxth	r1, r2
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass] =
   1a65c:	4a10      	ldr	r2, [pc, #64]	; (1a6a0 <prvTraceGetObjectHandle+0x18c>)
   1a65e:	3318      	adds	r3, #24
   1a660:	005b      	lsls	r3, r3, #1
   1a662:	18d3      	adds	r3, r2, r3
   1a664:	3306      	adds	r3, #6
   1a666:	1c0a      	adds	r2, r1, #0
   1a668:	801a      	strh	r2, [r3, #0]
		}
	}
	trcCRITICAL_SECTION_END();
   1a66a:	4b0c      	ldr	r3, [pc, #48]	; (1a69c <prvTraceGetObjectHandle+0x188>)
   1a66c:	681b      	ldr	r3, [r3, #0]
   1a66e:	1e5a      	subs	r2, r3, #1
   1a670:	4b0a      	ldr	r3, [pc, #40]	; (1a69c <prvTraceGetObjectHandle+0x188>)
   1a672:	601a      	str	r2, [r3, #0]
   1a674:	69bb      	ldr	r3, [r7, #24]
   1a676:	60bb      	str	r3, [r7, #8]
   1a678:	68bb      	ldr	r3, [r7, #8]
   1a67a:	f383 8810 	msr	PRIMASK, r3

	return handle;
   1a67e:	231f      	movs	r3, #31
   1a680:	18fb      	adds	r3, r7, r3
   1a682:	781b      	ldrb	r3, [r3, #0]
}
   1a684:	0018      	movs	r0, r3
   1a686:	46bd      	mov	sp, r7
   1a688:	b008      	add	sp, #32
   1a68a:	bd80      	pop	{r7, pc}
   1a68c:	20000df4 	.word	0x20000df4
   1a690:	00038348 	.word	0x00038348
   1a694:	0001a831 	.word	0x0001a831
   1a698:	00038f28 	.word	0x00038f28
   1a69c:	20000d4c 	.word	0x20000d4c
   1a6a0:	20000d64 	.word	0x20000d64
   1a6a4:	20000df8 	.word	0x20000df8
   1a6a8:	00019551 	.word	0x00019551

0001a6ac <prvMarkObjectAsUsed>:
 * Sets an "is used flag" on object creation, using the first byte of the name
 * field. This allows for counting the number of used Object Table slots, even
 * if no names have been set.
 ******************************************************************************/
void prvMarkObjectAsUsed(traceObjectClass objectclass, traceHandle handle)
{
   1a6ac:	b590      	push	{r4, r7, lr}
   1a6ae:	b085      	sub	sp, #20
   1a6b0:	af00      	add	r7, sp, #0
   1a6b2:	0002      	movs	r2, r0
   1a6b4:	1dfb      	adds	r3, r7, #7
   1a6b6:	701a      	strb	r2, [r3, #0]
   1a6b8:	1dbb      	adds	r3, r7, #6
   1a6ba:	1c0a      	adds	r2, r1, #0
   1a6bc:	701a      	strb	r2, [r3, #0]
	uint16_t idx = uiIndexOfObject(handle, objectclass);
   1a6be:	230e      	movs	r3, #14
   1a6c0:	18fc      	adds	r4, r7, r3
   1a6c2:	1dfb      	adds	r3, r7, #7
   1a6c4:	781a      	ldrb	r2, [r3, #0]
   1a6c6:	1dbb      	adds	r3, r7, #6
   1a6c8:	781b      	ldrb	r3, [r3, #0]
   1a6ca:	0011      	movs	r1, r2
   1a6cc:	0018      	movs	r0, r3
   1a6ce:	4b09      	ldr	r3, [pc, #36]	; (1a6f4 <prvMarkObjectAsUsed+0x48>)
   1a6d0:	4798      	blx	r3
   1a6d2:	0003      	movs	r3, r0
   1a6d4:	8023      	strh	r3, [r4, #0]
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
   1a6d6:	4b08      	ldr	r3, [pc, #32]	; (1a6f8 <prvMarkObjectAsUsed+0x4c>)
   1a6d8:	681a      	ldr	r2, [r3, #0]
   1a6da:	230e      	movs	r3, #14
   1a6dc:	18fb      	adds	r3, r7, r3
   1a6de:	881b      	ldrh	r3, [r3, #0]
   1a6e0:	219c      	movs	r1, #156	; 0x9c
   1a6e2:	18d3      	adds	r3, r2, r3
   1a6e4:	185b      	adds	r3, r3, r1
   1a6e6:	2201      	movs	r2, #1
   1a6e8:	701a      	strb	r2, [r3, #0]
}
   1a6ea:	46c0      	nop			; (mov r8, r8)
   1a6ec:	46bd      	mov	sp, r7
   1a6ee:	b005      	add	sp, #20
   1a6f0:	bd90      	pop	{r4, r7, pc}
   1a6f2:	46c0      	nop			; (mov r8, r8)
   1a6f4:	0001a43d 	.word	0x0001a43d
   1a6f8:	20000df4 	.word	0x20000df4

0001a6fc <prvStrncpy>:
 * prvStrncpy
 *
 * Private string copy function, to improve portability between compilers.
 ******************************************************************************/
static void prvStrncpy(char* dst, const char* src, uint32_t maxLength)
{
   1a6fc:	b580      	push	{r7, lr}
   1a6fe:	b086      	sub	sp, #24
   1a700:	af00      	add	r7, sp, #0
   1a702:	60f8      	str	r0, [r7, #12]
   1a704:	60b9      	str	r1, [r7, #8]
   1a706:	607a      	str	r2, [r7, #4]
	uint32_t i;
	for (i = 0; i < maxLength; i++)
   1a708:	2300      	movs	r3, #0
   1a70a:	617b      	str	r3, [r7, #20]
   1a70c:	e010      	b.n	1a730 <prvStrncpy+0x34>
	{
		dst[i] = src[i];
   1a70e:	68fa      	ldr	r2, [r7, #12]
   1a710:	697b      	ldr	r3, [r7, #20]
   1a712:	18d3      	adds	r3, r2, r3
   1a714:	68b9      	ldr	r1, [r7, #8]
   1a716:	697a      	ldr	r2, [r7, #20]
   1a718:	188a      	adds	r2, r1, r2
   1a71a:	7812      	ldrb	r2, [r2, #0]
   1a71c:	701a      	strb	r2, [r3, #0]
		if (src[i] == 0)
   1a71e:	68ba      	ldr	r2, [r7, #8]
   1a720:	697b      	ldr	r3, [r7, #20]
   1a722:	18d3      	adds	r3, r2, r3
   1a724:	781b      	ldrb	r3, [r3, #0]
   1a726:	2b00      	cmp	r3, #0
   1a728:	d007      	beq.n	1a73a <prvStrncpy+0x3e>
	for (i = 0; i < maxLength; i++)
   1a72a:	697b      	ldr	r3, [r7, #20]
   1a72c:	3301      	adds	r3, #1
   1a72e:	617b      	str	r3, [r7, #20]
   1a730:	697a      	ldr	r2, [r7, #20]
   1a732:	687b      	ldr	r3, [r7, #4]
   1a734:	429a      	cmp	r2, r3
   1a736:	d3ea      	bcc.n	1a70e <prvStrncpy+0x12>
			break;
	}
}
   1a738:	e000      	b.n	1a73c <prvStrncpy+0x40>
			break;
   1a73a:	46c0      	nop			; (mov r8, r8)
}
   1a73c:	46c0      	nop			; (mov r8, r8)
   1a73e:	46bd      	mov	sp, r7
   1a740:	b006      	add	sp, #24
   1a742:	bd80      	pop	{r7, pc}

0001a744 <prvTraceSetObjectName>:
 * recorder's Object Property Table, at the given handle and object class.
 ******************************************************************************/
void prvTraceSetObjectName(traceObjectClass objectclass,
						 traceHandle handle,
						 const char* name)
{
   1a744:	b580      	push	{r7, lr}
   1a746:	b082      	sub	sp, #8
   1a748:	af00      	add	r7, sp, #0
   1a74a:	603a      	str	r2, [r7, #0]
   1a74c:	1dfb      	adds	r3, r7, #7
   1a74e:	1c02      	adds	r2, r0, #0
   1a750:	701a      	strb	r2, [r3, #0]
   1a752:	1dbb      	adds	r3, r7, #6
   1a754:	1c0a      	adds	r2, r1, #0
   1a756:	701a      	strb	r2, [r3, #0]
	static uint16_t idx;

	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
   1a758:	683b      	ldr	r3, [r7, #0]
   1a75a:	2b00      	cmp	r3, #0
   1a75c:	d104      	bne.n	1a768 <prvTraceSetObjectName+0x24>
   1a75e:	4b2a      	ldr	r3, [pc, #168]	; (1a808 <prvTraceSetObjectName+0xc4>)
   1a760:	0018      	movs	r0, r3
   1a762:	4b2a      	ldr	r3, [pc, #168]	; (1a80c <prvTraceSetObjectName+0xc8>)
   1a764:	4798      	blx	r3
   1a766:	e04b      	b.n	1a800 <prvTraceSetObjectName+0xbc>

	if (objectclass >= TRACE_NCLASSES)
   1a768:	1dfb      	adds	r3, r7, #7
   1a76a:	781b      	ldrb	r3, [r3, #0]
   1a76c:	2b08      	cmp	r3, #8
   1a76e:	d904      	bls.n	1a77a <prvTraceSetObjectName+0x36>
	{
		prvTraceError("Illegal object class in prvTraceSetObjectName");
   1a770:	4b27      	ldr	r3, [pc, #156]	; (1a810 <prvTraceSetObjectName+0xcc>)
   1a772:	0018      	movs	r0, r3
   1a774:	4b25      	ldr	r3, [pc, #148]	; (1a80c <prvTraceSetObjectName+0xc8>)
   1a776:	4798      	blx	r3
		return;
   1a778:	e042      	b.n	1a800 <prvTraceSetObjectName+0xbc>
	}

	if (handle == 0)
   1a77a:	1dbb      	adds	r3, r7, #6
   1a77c:	781b      	ldrb	r3, [r3, #0]
   1a77e:	2b00      	cmp	r3, #0
   1a780:	d104      	bne.n	1a78c <prvTraceSetObjectName+0x48>
	{
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
   1a782:	4b24      	ldr	r3, [pc, #144]	; (1a814 <prvTraceSetObjectName+0xd0>)
   1a784:	0018      	movs	r0, r3
   1a786:	4b21      	ldr	r3, [pc, #132]	; (1a80c <prvTraceSetObjectName+0xc8>)
   1a788:	4798      	blx	r3
		return;
   1a78a:	e039      	b.n	1a800 <prvTraceSetObjectName+0xbc>
	}

	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
   1a78c:	4b22      	ldr	r3, [pc, #136]	; (1a818 <prvTraceSetObjectName+0xd4>)
   1a78e:	681a      	ldr	r2, [r3, #0]
   1a790:	1dfb      	adds	r3, r7, #7
   1a792:	781b      	ldrb	r3, [r3, #0]
   1a794:	2164      	movs	r1, #100	; 0x64
   1a796:	18d3      	adds	r3, r2, r3
   1a798:	185b      	adds	r3, r3, r1
   1a79a:	781b      	ldrb	r3, [r3, #0]
   1a79c:	1dba      	adds	r2, r7, #6
   1a79e:	7812      	ldrb	r2, [r2, #0]
   1a7a0:	429a      	cmp	r2, r3
   1a7a2:	d909      	bls.n	1a7b8 <prvTraceSetObjectName+0x74>
	{
		/* ERROR */
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
   1a7a4:	1dfb      	adds	r3, r7, #7
   1a7a6:	781b      	ldrb	r3, [r3, #0]
   1a7a8:	0018      	movs	r0, r3
   1a7aa:	4b1c      	ldr	r3, [pc, #112]	; (1a81c <prvTraceSetObjectName+0xd8>)
   1a7ac:	4798      	blx	r3
   1a7ae:	0003      	movs	r3, r0
   1a7b0:	0018      	movs	r0, r3
   1a7b2:	4b16      	ldr	r3, [pc, #88]	; (1a80c <prvTraceSetObjectName+0xc8>)
   1a7b4:	4798      	blx	r3
   1a7b6:	e023      	b.n	1a800 <prvTraceSetObjectName+0xbc>
	}
	else
	{
		idx = uiIndexOfObject(handle, objectclass);
   1a7b8:	1dfb      	adds	r3, r7, #7
   1a7ba:	781a      	ldrb	r2, [r3, #0]
   1a7bc:	1dbb      	adds	r3, r7, #6
   1a7be:	781b      	ldrb	r3, [r3, #0]
   1a7c0:	0011      	movs	r1, r2
   1a7c2:	0018      	movs	r0, r3
   1a7c4:	4b16      	ldr	r3, [pc, #88]	; (1a820 <prvTraceSetObjectName+0xdc>)
   1a7c6:	4798      	blx	r3
   1a7c8:	0003      	movs	r3, r0
   1a7ca:	001a      	movs	r2, r3
   1a7cc:	4b15      	ldr	r3, [pc, #84]	; (1a824 <prvTraceSetObjectName+0xe0>)
   1a7ce:	801a      	strh	r2, [r3, #0]

		if (traceErrorMessage == NULL)
   1a7d0:	4b15      	ldr	r3, [pc, #84]	; (1a828 <prvTraceSetObjectName+0xe4>)
   1a7d2:	681b      	ldr	r3, [r3, #0]
   1a7d4:	2b00      	cmp	r3, #0
   1a7d6:	d113      	bne.n	1a800 <prvTraceSetObjectName+0xbc>
		{
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   1a7d8:	4b0f      	ldr	r3, [pc, #60]	; (1a818 <prvTraceSetObjectName+0xd4>)
   1a7da:	681a      	ldr	r2, [r3, #0]
   1a7dc:	4b11      	ldr	r3, [pc, #68]	; (1a824 <prvTraceSetObjectName+0xe0>)
   1a7de:	881b      	ldrh	r3, [r3, #0]
   1a7e0:	3398      	adds	r3, #152	; 0x98
   1a7e2:	18d3      	adds	r3, r2, r3
   1a7e4:	1d18      	adds	r0, r3, #4
				name,
				RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[ objectclass ]);
   1a7e6:	4b0c      	ldr	r3, [pc, #48]	; (1a818 <prvTraceSetObjectName+0xd4>)
   1a7e8:	681a      	ldr	r2, [r3, #0]
   1a7ea:	1dfb      	adds	r3, r7, #7
   1a7ec:	781b      	ldrb	r3, [r3, #0]
   1a7ee:	2170      	movs	r1, #112	; 0x70
   1a7f0:	18d3      	adds	r3, r2, r3
   1a7f2:	185b      	adds	r3, r3, r1
   1a7f4:	781b      	ldrb	r3, [r3, #0]
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
   1a7f6:	001a      	movs	r2, r3
   1a7f8:	683b      	ldr	r3, [r7, #0]
   1a7fa:	0019      	movs	r1, r3
   1a7fc:	4b0b      	ldr	r3, [pc, #44]	; (1a82c <prvTraceSetObjectName+0xe8>)
   1a7fe:	4798      	blx	r3
		}
	}
}
   1a800:	46bd      	mov	sp, r7
   1a802:	b002      	add	sp, #8
   1a804:	bd80      	pop	{r7, pc}
   1a806:	46c0      	nop			; (mov r8, r8)
   1a808:	0003902c 	.word	0x0003902c
   1a80c:	0001a831 	.word	0x0001a831
   1a810:	00039060 	.word	0x00039060
   1a814:	00039090 	.word	0x00039090
   1a818:	20000df4 	.word	0x20000df4
   1a81c:	00019551 	.word	0x00019551
   1a820:	0001a43d 	.word	0x0001a43d
   1a824:	20000dfc 	.word	0x20000dfc
   1a828:	20000d54 	.word	0x20000d54
   1a82c:	0001a6fd 	.word	0x0001a6fd

0001a830 <prvTraceError>:
 * Note: If a recorder error is registered before vTraceStart is called, the
 * trace start will be aborted. This can occur if any of the Nxxxx constants
 * (e.g., TRC_CFG_NTASK) in trcConfig.h is too small.
 ******************************************************************************/
void prvTraceError(const char* msg)
{
   1a830:	b580      	push	{r7, lr}
   1a832:	b082      	sub	sp, #8
   1a834:	af00      	add	r7, sp, #0
   1a836:	6078      	str	r0, [r7, #4]
	/* Stop the recorder */
	if (RecorderDataPtr != NULL)
   1a838:	4b11      	ldr	r3, [pc, #68]	; (1a880 <prvTraceError+0x50>)
   1a83a:	681b      	ldr	r3, [r3, #0]
   1a83c:	2b00      	cmp	r3, #0
   1a83e:	d001      	beq.n	1a844 <prvTraceError+0x14>
	{
		vTraceStop();
   1a840:	4b10      	ldr	r3, [pc, #64]	; (1a884 <prvTraceError+0x54>)
   1a842:	4798      	blx	r3
	}

	/* If first error only... */
	if (traceErrorMessage == NULL)
   1a844:	4b10      	ldr	r3, [pc, #64]	; (1a888 <prvTraceError+0x58>)
   1a846:	681b      	ldr	r3, [r3, #0]
   1a848:	2b00      	cmp	r3, #0
   1a84a:	d115      	bne.n	1a878 <prvTraceError+0x48>
	{
		traceErrorMessage = (char*)(intptr_t) msg;
   1a84c:	4b0e      	ldr	r3, [pc, #56]	; (1a888 <prvTraceError+0x58>)
   1a84e:	687a      	ldr	r2, [r7, #4]
   1a850:	601a      	str	r2, [r3, #0]
		if (RecorderDataPtr != NULL)
   1a852:	4b0b      	ldr	r3, [pc, #44]	; (1a880 <prvTraceError+0x50>)
   1a854:	681b      	ldr	r3, [r3, #0]
   1a856:	2b00      	cmp	r3, #0
   1a858:	d00e      	beq.n	1a878 <prvTraceError+0x48>
		{
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
   1a85a:	4b09      	ldr	r3, [pc, #36]	; (1a880 <prvTraceError+0x50>)
   1a85c:	681b      	ldr	r3, [r3, #0]
   1a85e:	4a0b      	ldr	r2, [pc, #44]	; (1a88c <prvTraceError+0x5c>)
   1a860:	1898      	adds	r0, r3, r2
   1a862:	4b09      	ldr	r3, [pc, #36]	; (1a888 <prvTraceError+0x58>)
   1a864:	681b      	ldr	r3, [r3, #0]
   1a866:	2250      	movs	r2, #80	; 0x50
   1a868:	0019      	movs	r1, r3
   1a86a:	4b09      	ldr	r3, [pc, #36]	; (1a890 <prvTraceError+0x60>)
   1a86c:	4798      	blx	r3
			RecorderDataPtr->internalErrorOccured = 1;
   1a86e:	4b04      	ldr	r3, [pc, #16]	; (1a880 <prvTraceError+0x50>)
   1a870:	681b      	ldr	r3, [r3, #0]
   1a872:	4a08      	ldr	r2, [pc, #32]	; (1a894 <prvTraceError+0x64>)
   1a874:	2101      	movs	r1, #1
   1a876:	5099      	str	r1, [r3, r2]
		}
	}
}
   1a878:	46c0      	nop			; (mov r8, r8)
   1a87a:	46bd      	mov	sp, r7
   1a87c:	b002      	add	sp, #8
   1a87e:	bd80      	pop	{r7, pc}
   1a880:	20000df4 	.word	0x20000df4
   1a884:	000196f5 	.word	0x000196f5
   1a888:	20000d54 	.word	0x20000d54
   1a88c:	000006bc 	.word	0x000006bc
   1a890:	0001a6fd 	.word	0x0001a6fd
   1a894:	000006b4 	.word	0x000006b4

0001a898 <prvCheckDataToBeOverwrittenForMultiEntryEvents>:
 * This is assumed to execute within a critical section...
 *****************************************************************************/

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
void prvCheckDataToBeOverwrittenForMultiEntryEvents(uint8_t nofEntriesToCheck)
{
   1a898:	b580      	push	{r7, lr}
   1a89a:	b086      	sub	sp, #24
   1a89c:	af00      	add	r7, sp, #0
   1a89e:	0002      	movs	r2, r0
   1a8a0:	1dfb      	adds	r3, r7, #7
   1a8a2:	701a      	strb	r2, [r3, #0]
	/* Generic "int" type is desired - should be 16 bit variable on 16 bit HW */
	unsigned int i = 0;
   1a8a4:	2300      	movs	r3, #0
   1a8a6:	617b      	str	r3, [r7, #20]
	unsigned int e = 0;
   1a8a8:	2300      	movs	r3, #0
   1a8aa:	613b      	str	r3, [r7, #16]

	TRACE_ASSERT(nofEntriesToCheck != 0, 
   1a8ac:	1dfb      	adds	r3, r7, #7
   1a8ae:	781b      	ldrb	r3, [r3, #0]
   1a8b0:	2b00      	cmp	r3, #0
   1a8b2:	d000      	beq.n	1a8b6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x1e>
   1a8b4:	e089      	b.n	1a9ca <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x132>
   1a8b6:	4b49      	ldr	r3, [pc, #292]	; (1a9dc <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x144>)
   1a8b8:	0018      	movs	r0, r3
   1a8ba:	4b49      	ldr	r3, [pc, #292]	; (1a9e0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x148>)
   1a8bc:	4798      	blx	r3
   1a8be:	e08a      	b.n	1a9d6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
		"prvCheckDataToBeOverwrittenForMultiEntryEvents: nofEntriesToCheck == 0", TRC_UNUSED);

	while (i < nofEntriesToCheck)
	{
		e = RecorderDataPtr->nextFreeIndex + i;
   1a8c0:	4b48      	ldr	r3, [pc, #288]	; (1a9e4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a8c2:	681b      	ldr	r3, [r3, #0]
   1a8c4:	69da      	ldr	r2, [r3, #28]
   1a8c6:	697b      	ldr	r3, [r7, #20]
   1a8c8:	18d3      	adds	r3, r2, r3
   1a8ca:	613b      	str	r3, [r7, #16]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   1a8cc:	4b45      	ldr	r3, [pc, #276]	; (1a9e4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a8ce:	6819      	ldr	r1, [r3, #0]
   1a8d0:	693b      	ldr	r3, [r7, #16]
   1a8d2:	009a      	lsls	r2, r3, #2
   1a8d4:	23e2      	movs	r3, #226	; 0xe2
   1a8d6:	00db      	lsls	r3, r3, #3
   1a8d8:	188a      	adds	r2, r1, r2
   1a8da:	18d3      	adds	r3, r2, r3
   1a8dc:	781b      	ldrb	r3, [r3, #0]
   1a8de:	2b98      	cmp	r3, #152	; 0x98
   1a8e0:	d934      	bls.n	1a94c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
			(RecorderDataPtr->eventData[e*4] < USER_EVENT + 16))
   1a8e2:	4b40      	ldr	r3, [pc, #256]	; (1a9e4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a8e4:	6819      	ldr	r1, [r3, #0]
   1a8e6:	693b      	ldr	r3, [r7, #16]
   1a8e8:	009a      	lsls	r2, r3, #2
   1a8ea:	23e2      	movs	r3, #226	; 0xe2
   1a8ec:	00db      	lsls	r3, r3, #3
   1a8ee:	188a      	adds	r2, r1, r2
   1a8f0:	18d3      	adds	r3, r2, r3
   1a8f2:	781b      	ldrb	r3, [r3, #0]
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
   1a8f4:	2ba7      	cmp	r3, #167	; 0xa7
   1a8f6:	d829      	bhi.n	1a94c <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xb4>
		{
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
   1a8f8:	4b3a      	ldr	r3, [pc, #232]	; (1a9e4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a8fa:	6819      	ldr	r1, [r3, #0]
   1a8fc:	693b      	ldr	r3, [r7, #16]
   1a8fe:	009a      	lsls	r2, r3, #2
   1a900:	23e2      	movs	r3, #226	; 0xe2
   1a902:	00db      	lsls	r3, r3, #3
   1a904:	188a      	adds	r2, r1, r2
   1a906:	18d3      	adds	r3, r2, r3
   1a908:	781a      	ldrb	r2, [r3, #0]
   1a90a:	230f      	movs	r3, #15
   1a90c:	18fb      	adds	r3, r7, r3
   1a90e:	3268      	adds	r2, #104	; 0x68
   1a910:	701a      	strb	r2, [r3, #0]
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
   1a912:	230f      	movs	r3, #15
   1a914:	18fb      	adds	r3, r7, r3
   1a916:	781a      	ldrb	r2, [r3, #0]
   1a918:	693b      	ldr	r3, [r7, #16]
   1a91a:	18d2      	adds	r2, r2, r3
   1a91c:	4b31      	ldr	r3, [pc, #196]	; (1a9e4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a91e:	681b      	ldr	r3, [r3, #0]
   1a920:	699b      	ldr	r3, [r3, #24]
   1a922:	429a      	cmp	r2, r3
   1a924:	d24d      	bcs.n	1a9c2 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			{
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
   1a926:	4b2f      	ldr	r3, [pc, #188]	; (1a9e4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a928:	681a      	ldr	r2, [r3, #0]
   1a92a:	693b      	ldr	r3, [r7, #16]
   1a92c:	009b      	lsls	r3, r3, #2
   1a92e:	21e2      	movs	r1, #226	; 0xe2
   1a930:	00c9      	lsls	r1, r1, #3
   1a932:	468c      	mov	ip, r1
   1a934:	4463      	add	r3, ip
   1a936:	18d0      	adds	r0, r2, r3
   1a938:	230f      	movs	r3, #15
   1a93a:	18fb      	adds	r3, r7, r3
   1a93c:	781b      	ldrb	r3, [r3, #0]
   1a93e:	3301      	adds	r3, #1
   1a940:	009b      	lsls	r3, r3, #2
   1a942:	001a      	movs	r2, r3
   1a944:	2100      	movs	r1, #0
   1a946:	4b28      	ldr	r3, [pc, #160]	; (1a9e8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1a948:	4798      	blx	r3
		{
   1a94a:	e03a      	b.n	1a9c2 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12a>
			}
		}
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
   1a94c:	4b25      	ldr	r3, [pc, #148]	; (1a9e4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a94e:	6819      	ldr	r1, [r3, #0]
   1a950:	693b      	ldr	r3, [r7, #16]
   1a952:	009a      	lsls	r2, r3, #2
   1a954:	23e2      	movs	r3, #226	; 0xe2
   1a956:	00db      	lsls	r3, r3, #3
   1a958:	188a      	adds	r2, r1, r2
   1a95a:	18d3      	adds	r3, r2, r3
   1a95c:	781b      	ldrb	r3, [r3, #0]
   1a95e:	2b01      	cmp	r3, #1
   1a960:	d130      	bne.n	1a9c4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
			if ((e + 1) < RecorderDataPtr->maxEvents)
   1a962:	693b      	ldr	r3, [r7, #16]
   1a964:	1c5a      	adds	r2, r3, #1
   1a966:	4b1f      	ldr	r3, [pc, #124]	; (1a9e4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a968:	681b      	ldr	r3, [r3, #0]
   1a96a:	699b      	ldr	r3, [r3, #24]
   1a96c:	429a      	cmp	r2, r3
   1a96e:	d20e      	bcs.n	1a98e <prvCheckDataToBeOverwrittenForMultiEntryEvents+0xf6>
			{
				/* Clear 8 bytes */
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
   1a970:	4b1c      	ldr	r3, [pc, #112]	; (1a9e4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a972:	681a      	ldr	r2, [r3, #0]
   1a974:	693b      	ldr	r3, [r7, #16]
   1a976:	009b      	lsls	r3, r3, #2
   1a978:	21e2      	movs	r1, #226	; 0xe2
   1a97a:	00c9      	lsls	r1, r1, #3
   1a97c:	468c      	mov	ip, r1
   1a97e:	4463      	add	r3, ip
   1a980:	18d3      	adds	r3, r2, r3
   1a982:	2208      	movs	r2, #8
   1a984:	2100      	movs	r1, #0
   1a986:	0018      	movs	r0, r3
   1a988:	4b17      	ldr	r3, [pc, #92]	; (1a9e8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1a98a:	4798      	blx	r3
   1a98c:	e01a      	b.n	1a9c4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
			}
			else
			{
				/* Clear 8 bytes, 4 first and 4 last */
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
   1a98e:	4b15      	ldr	r3, [pc, #84]	; (1a9e4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a990:	681b      	ldr	r3, [r3, #0]
   1a992:	22e2      	movs	r2, #226	; 0xe2
   1a994:	00d2      	lsls	r2, r2, #3
   1a996:	4694      	mov	ip, r2
   1a998:	4463      	add	r3, ip
   1a99a:	2204      	movs	r2, #4
   1a99c:	2100      	movs	r1, #0
   1a99e:	0018      	movs	r0, r3
   1a9a0:	4b11      	ldr	r3, [pc, #68]	; (1a9e8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1a9a2:	4798      	blx	r3
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
   1a9a4:	4b0f      	ldr	r3, [pc, #60]	; (1a9e4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x14c>)
   1a9a6:	681a      	ldr	r2, [r3, #0]
   1a9a8:	693b      	ldr	r3, [r7, #16]
   1a9aa:	009b      	lsls	r3, r3, #2
   1a9ac:	21e2      	movs	r1, #226	; 0xe2
   1a9ae:	00c9      	lsls	r1, r1, #3
   1a9b0:	468c      	mov	ip, r1
   1a9b2:	4463      	add	r3, ip
   1a9b4:	18d3      	adds	r3, r2, r3
   1a9b6:	2204      	movs	r2, #4
   1a9b8:	2100      	movs	r1, #0
   1a9ba:	0018      	movs	r0, r3
   1a9bc:	4b0a      	ldr	r3, [pc, #40]	; (1a9e8 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x150>)
   1a9be:	4798      	blx	r3
   1a9c0:	e000      	b.n	1a9c4 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x12c>
		{
   1a9c2:	46c0      	nop			; (mov r8, r8)
			}
		}
		i++;
   1a9c4:	697b      	ldr	r3, [r7, #20]
   1a9c6:	3301      	adds	r3, #1
   1a9c8:	617b      	str	r3, [r7, #20]
	while (i < nofEntriesToCheck)
   1a9ca:	1dfb      	adds	r3, r7, #7
   1a9cc:	781a      	ldrb	r2, [r3, #0]
   1a9ce:	697b      	ldr	r3, [r7, #20]
   1a9d0:	429a      	cmp	r2, r3
   1a9d2:	d900      	bls.n	1a9d6 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x13e>
   1a9d4:	e774      	b.n	1a8c0 <prvCheckDataToBeOverwrittenForMultiEntryEvents+0x28>
	}
}
   1a9d6:	46bd      	mov	sp, r7
   1a9d8:	b006      	add	sp, #24
   1a9da:	bd80      	pop	{r7, pc}
   1a9dc:	000390f0 	.word	0x000390f0
   1a9e0:	0001a831 	.word	0x0001a831
   1a9e4:	20000df4 	.word	0x20000df4
   1a9e8:	0003582f 	.word	0x0003582f

0001a9ec <prvTraceUpdateCounters>:
 * prvTraceUpdateCounters
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
   1a9ec:	b580      	push	{r7, lr}
   1a9ee:	af00      	add	r7, sp, #0
	if (RecorderDataPtr->recorderActive == 0)
   1a9f0:	4b12      	ldr	r3, [pc, #72]	; (1aa3c <prvTraceUpdateCounters+0x50>)
   1a9f2:	681b      	ldr	r3, [r3, #0]
   1a9f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1a9f6:	2b00      	cmp	r3, #0
   1a9f8:	d01c      	beq.n	1aa34 <prvTraceUpdateCounters+0x48>
	{
		return;
	}
	
	RecorderDataPtr->numEvents++;
   1a9fa:	4b10      	ldr	r3, [pc, #64]	; (1aa3c <prvTraceUpdateCounters+0x50>)
   1a9fc:	681b      	ldr	r3, [r3, #0]
   1a9fe:	695a      	ldr	r2, [r3, #20]
   1aa00:	3201      	adds	r2, #1
   1aa02:	615a      	str	r2, [r3, #20]

	RecorderDataPtr->nextFreeIndex++;
   1aa04:	4b0d      	ldr	r3, [pc, #52]	; (1aa3c <prvTraceUpdateCounters+0x50>)
   1aa06:	681b      	ldr	r3, [r3, #0]
   1aa08:	69da      	ldr	r2, [r3, #28]
   1aa0a:	3201      	adds	r2, #1
   1aa0c:	61da      	str	r2, [r3, #28]

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
   1aa0e:	4b0b      	ldr	r3, [pc, #44]	; (1aa3c <prvTraceUpdateCounters+0x50>)
   1aa10:	681b      	ldr	r3, [r3, #0]
   1aa12:	69da      	ldr	r2, [r3, #28]
   1aa14:	232c      	movs	r3, #44	; 0x2c
   1aa16:	33ff      	adds	r3, #255	; 0xff
   1aa18:	429a      	cmp	r2, r3
   1aa1a:	d907      	bls.n	1aa2c <prvTraceUpdateCounters+0x40>
	{
#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
		RecorderDataPtr->bufferIsFull = 1;
   1aa1c:	4b07      	ldr	r3, [pc, #28]	; (1aa3c <prvTraceUpdateCounters+0x50>)
   1aa1e:	681b      	ldr	r3, [r3, #0]
   1aa20:	2201      	movs	r2, #1
   1aa22:	621a      	str	r2, [r3, #32]
		RecorderDataPtr->nextFreeIndex = 0;
   1aa24:	4b05      	ldr	r3, [pc, #20]	; (1aa3c <prvTraceUpdateCounters+0x50>)
   1aa26:	681b      	ldr	r3, [r3, #0]
   1aa28:	2200      	movs	r2, #0
   1aa2a:	61da      	str	r2, [r3, #28]
		vTraceStop();
#endif
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
   1aa2c:	2001      	movs	r0, #1
   1aa2e:	4b04      	ldr	r3, [pc, #16]	; (1aa40 <prvTraceUpdateCounters+0x54>)
   1aa30:	4798      	blx	r3
   1aa32:	e000      	b.n	1aa36 <prvTraceUpdateCounters+0x4a>
		return;
   1aa34:	46c0      	nop			; (mov r8, r8)
#endif
}
   1aa36:	46bd      	mov	sp, r7
   1aa38:	bd80      	pop	{r7, pc}
   1aa3a:	46c0      	nop			; (mov r8, r8)
   1aa3c:	20000df4 	.word	0x20000df4
   1aa40:	0001a899 	.word	0x0001a899

0001aa44 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
   1aa44:	b5b0      	push	{r4, r5, r7, lr}
   1aa46:	b086      	sub	sp, #24
   1aa48:	af00      	add	r7, sp, #0
   1aa4a:	0002      	movs	r2, r0
   1aa4c:	1dbb      	adds	r3, r7, #6
   1aa4e:	801a      	strh	r2, [r3, #0]
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
   1aa50:	2300      	movs	r3, #0
   1aa52:	617b      	str	r3, [r7, #20]
	uint32_t dts = 0;
   1aa54:	2300      	movs	r3, #0
   1aa56:	613b      	str	r3, [r7, #16]
	uint32_t timestamp = 0;
   1aa58:	2300      	movs	r3, #0
   1aa5a:	60fb      	str	r3, [r7, #12]

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
   1aa5c:	1dbb      	adds	r3, r7, #6
   1aa5e:	881b      	ldrh	r3, [r3, #0]
   1aa60:	2bff      	cmp	r3, #255	; 0xff
   1aa62:	d00a      	beq.n	1aa7a <prvTraceGetDTS+0x36>
   1aa64:	1dbb      	adds	r3, r7, #6
   1aa66:	881b      	ldrh	r3, [r3, #0]
   1aa68:	4a60      	ldr	r2, [pc, #384]	; (1abec <prvTraceGetDTS+0x1a8>)
   1aa6a:	4293      	cmp	r3, r2
   1aa6c:	d005      	beq.n	1aa7a <prvTraceGetDTS+0x36>
   1aa6e:	4b60      	ldr	r3, [pc, #384]	; (1abf0 <prvTraceGetDTS+0x1ac>)
   1aa70:	0018      	movs	r0, r3
   1aa72:	4b60      	ldr	r3, [pc, #384]	; (1abf4 <prvTraceGetDTS+0x1b0>)
   1aa74:	4798      	blx	r3
   1aa76:	2300      	movs	r3, #0
   1aa78:	e0b3      	b.n	1abe2 <prvTraceGetDTS+0x19e>

	
	if (RecorderDataPtr->frequency == 0)
   1aa7a:	4b5f      	ldr	r3, [pc, #380]	; (1abf8 <prvTraceGetDTS+0x1b4>)
   1aa7c:	681b      	ldr	r3, [r3, #0]
   1aa7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1aa80:	2b00      	cmp	r3, #0
   1aa82:	d118      	bne.n	1aab6 <prvTraceGetDTS+0x72>
	{	
		if (timestampFrequency != 0)
   1aa84:	4b5d      	ldr	r3, [pc, #372]	; (1abfc <prvTraceGetDTS+0x1b8>)
   1aa86:	681b      	ldr	r3, [r3, #0]
   1aa88:	2b00      	cmp	r3, #0
   1aa8a:	d006      	beq.n	1aa9a <prvTraceGetDTS+0x56>
		{
			/* If to override default TRC_HWTC_FREQ_HZ value with value set by vTraceSetFrequency */
			RecorderDataPtr->frequency = timestampFrequency / (TRC_HWTC_DIVISOR);
   1aa8c:	4b5a      	ldr	r3, [pc, #360]	; (1abf8 <prvTraceGetDTS+0x1b4>)
   1aa8e:	681b      	ldr	r3, [r3, #0]
   1aa90:	4a5a      	ldr	r2, [pc, #360]	; (1abfc <prvTraceGetDTS+0x1b8>)
   1aa92:	6812      	ldr	r2, [r2, #0]
   1aa94:	0892      	lsrs	r2, r2, #2
   1aa96:	625a      	str	r2, [r3, #36]	; 0x24
   1aa98:	e00d      	b.n	1aab6 <prvTraceGetDTS+0x72>
		} 
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
   1aa9a:	4b59      	ldr	r3, [pc, #356]	; (1ac00 <prvTraceGetDTS+0x1bc>)
   1aa9c:	681a      	ldr	r2, [r3, #0]
   1aa9e:	4b59      	ldr	r3, [pc, #356]	; (1ac04 <prvTraceGetDTS+0x1c0>)
   1aaa0:	681b      	ldr	r3, [r3, #0]
   1aaa2:	429a      	cmp	r2, r3
   1aaa4:	d007      	beq.n	1aab6 <prvTraceGetDTS+0x72>
			/* If using default value and timer has been started. 
			Note: If the default frequency value set here would be incorrect, e.g.,
			if the timer has actually not been configured yet, override this 
			with vTraceSetFrequency.
			*/
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
   1aaa6:	4b54      	ldr	r3, [pc, #336]	; (1abf8 <prvTraceGetDTS+0x1b4>)
   1aaa8:	681c      	ldr	r4, [r3, #0]
   1aaaa:	2000      	movs	r0, #0
   1aaac:	4b56      	ldr	r3, [pc, #344]	; (1ac08 <prvTraceGetDTS+0x1c4>)
   1aaae:	4798      	blx	r3
   1aab0:	0003      	movs	r3, r0
   1aab2:	089b      	lsrs	r3, r3, #2
   1aab4:	6263      	str	r3, [r4, #36]	; 0x24
	* The below statements read the timestamp from the timer port module.
	* If necessary, whole seconds are extracted using division while the rest
	* comes from the modulo operation.
	**************************************************************************/
	
	prvTracePortGetTimeStamp(&timestamp);	
   1aab6:	230c      	movs	r3, #12
   1aab8:	18fb      	adds	r3, r7, r3
   1aaba:	0018      	movs	r0, r3
   1aabc:	4b53      	ldr	r3, [pc, #332]	; (1ac0c <prvTraceGetDTS+0x1c8>)
   1aabe:	4798      	blx	r3
	
	/***************************************************************************
	* Since dts is unsigned the result will be correct even if timestamp has
	* wrapped around.
	***************************************************************************/
	dts = timestamp - old_timestamp;
   1aac0:	68fa      	ldr	r2, [r7, #12]
   1aac2:	4b53      	ldr	r3, [pc, #332]	; (1ac10 <prvTraceGetDTS+0x1cc>)
   1aac4:	681b      	ldr	r3, [r3, #0]
   1aac6:	1ad3      	subs	r3, r2, r3
   1aac8:	613b      	str	r3, [r7, #16]
	old_timestamp = timestamp;
   1aaca:	68fa      	ldr	r2, [r7, #12]
   1aacc:	4b50      	ldr	r3, [pc, #320]	; (1ac10 <prvTraceGetDTS+0x1cc>)
   1aace:	601a      	str	r2, [r3, #0]

	if (RecorderDataPtr->frequency > 0)
   1aad0:	4b49      	ldr	r3, [pc, #292]	; (1abf8 <prvTraceGetDTS+0x1b4>)
   1aad2:	681b      	ldr	r3, [r3, #0]
   1aad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1aad6:	2b00      	cmp	r3, #0
   1aad8:	d044      	beq.n	1ab64 <prvTraceGetDTS+0x120>
	{
		/* Check if dts > 1 second */
		if (dts > RecorderDataPtr->frequency)
   1aada:	4b47      	ldr	r3, [pc, #284]	; (1abf8 <prvTraceGetDTS+0x1b4>)
   1aadc:	681b      	ldr	r3, [r3, #0]
   1aade:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1aae0:	693b      	ldr	r3, [r7, #16]
   1aae2:	429a      	cmp	r2, r3
   1aae4:	d21e      	bcs.n	1ab24 <prvTraceGetDTS+0xe0>
		{
			/* More than 1 second has passed */
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
   1aae6:	4b44      	ldr	r3, [pc, #272]	; (1abf8 <prvTraceGetDTS+0x1b4>)
   1aae8:	681c      	ldr	r4, [r3, #0]
   1aaea:	4b43      	ldr	r3, [pc, #268]	; (1abf8 <prvTraceGetDTS+0x1b4>)
   1aaec:	681b      	ldr	r3, [r3, #0]
   1aaee:	6add      	ldr	r5, [r3, #44]	; 0x2c
   1aaf0:	4b41      	ldr	r3, [pc, #260]	; (1abf8 <prvTraceGetDTS+0x1b4>)
   1aaf2:	681b      	ldr	r3, [r3, #0]
   1aaf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   1aaf6:	4b47      	ldr	r3, [pc, #284]	; (1ac14 <prvTraceGetDTS+0x1d0>)
   1aaf8:	0011      	movs	r1, r2
   1aafa:	6938      	ldr	r0, [r7, #16]
   1aafc:	4798      	blx	r3
   1aafe:	0003      	movs	r3, r0
   1ab00:	18eb      	adds	r3, r5, r3
   1ab02:	62e3      	str	r3, [r4, #44]	; 0x2c
			/* The part that is not an entire second is added to absTimeLastEvent */
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
   1ab04:	4b3c      	ldr	r3, [pc, #240]	; (1abf8 <prvTraceGetDTS+0x1b4>)
   1ab06:	681c      	ldr	r4, [r3, #0]
   1ab08:	4b3b      	ldr	r3, [pc, #236]	; (1abf8 <prvTraceGetDTS+0x1b4>)
   1ab0a:	681b      	ldr	r3, [r3, #0]
   1ab0c:	6a9d      	ldr	r5, [r3, #40]	; 0x28
   1ab0e:	4b3a      	ldr	r3, [pc, #232]	; (1abf8 <prvTraceGetDTS+0x1b4>)
   1ab10:	681b      	ldr	r3, [r3, #0]
   1ab12:	6a59      	ldr	r1, [r3, #36]	; 0x24
   1ab14:	693a      	ldr	r2, [r7, #16]
   1ab16:	4b40      	ldr	r3, [pc, #256]	; (1ac18 <prvTraceGetDTS+0x1d4>)
   1ab18:	0010      	movs	r0, r2
   1ab1a:	4798      	blx	r3
   1ab1c:	000b      	movs	r3, r1
   1ab1e:	18eb      	adds	r3, r5, r3
   1ab20:	62a3      	str	r3, [r4, #40]	; 0x28
   1ab22:	e007      	b.n	1ab34 <prvTraceGetDTS+0xf0>
		}
		else
		{
			RecorderDataPtr->absTimeLastEvent += dts;
   1ab24:	4b34      	ldr	r3, [pc, #208]	; (1abf8 <prvTraceGetDTS+0x1b4>)
   1ab26:	681b      	ldr	r3, [r3, #0]
   1ab28:	4a33      	ldr	r2, [pc, #204]	; (1abf8 <prvTraceGetDTS+0x1b4>)
   1ab2a:	6812      	ldr	r2, [r2, #0]
   1ab2c:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1ab2e:	693a      	ldr	r2, [r7, #16]
   1ab30:	188a      	adds	r2, r1, r2
   1ab32:	629a      	str	r2, [r3, #40]	; 0x28
		}

		/* Check if absTimeLastEvent >= 1 second */
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
   1ab34:	4b30      	ldr	r3, [pc, #192]	; (1abf8 <prvTraceGetDTS+0x1b4>)
   1ab36:	681b      	ldr	r3, [r3, #0]
   1ab38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1ab3a:	4b2f      	ldr	r3, [pc, #188]	; (1abf8 <prvTraceGetDTS+0x1b4>)
   1ab3c:	681b      	ldr	r3, [r3, #0]
   1ab3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1ab40:	429a      	cmp	r2, r3
   1ab42:	d313      	bcc.n	1ab6c <prvTraceGetDTS+0x128>
		{
			/* RecorderDataPtr->absTimeLastEvent is more than or equal to 1 second, but always less than 2 seconds */
			RecorderDataPtr->absTimeLastEventSecond++;
   1ab44:	4b2c      	ldr	r3, [pc, #176]	; (1abf8 <prvTraceGetDTS+0x1b4>)
   1ab46:	681b      	ldr	r3, [r3, #0]
   1ab48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ab4a:	3201      	adds	r2, #1
   1ab4c:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
   1ab4e:	4b2a      	ldr	r3, [pc, #168]	; (1abf8 <prvTraceGetDTS+0x1b4>)
   1ab50:	681b      	ldr	r3, [r3, #0]
   1ab52:	4a29      	ldr	r2, [pc, #164]	; (1abf8 <prvTraceGetDTS+0x1b4>)
   1ab54:	6812      	ldr	r2, [r2, #0]
   1ab56:	6a91      	ldr	r1, [r2, #40]	; 0x28
   1ab58:	4a27      	ldr	r2, [pc, #156]	; (1abf8 <prvTraceGetDTS+0x1b4>)
   1ab5a:	6812      	ldr	r2, [r2, #0]
   1ab5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
   1ab5e:	1a8a      	subs	r2, r1, r2
   1ab60:	629a      	str	r2, [r3, #40]	; 0x28
   1ab62:	e003      	b.n	1ab6c <prvTraceGetDTS+0x128>
		}
	}
	else
	{
		/* Special case if the recorder has not yet started (frequency may be uninitialized, i.e., zero) */
		RecorderDataPtr->absTimeLastEvent = timestamp;
   1ab64:	4b24      	ldr	r3, [pc, #144]	; (1abf8 <prvTraceGetDTS+0x1b4>)
   1ab66:	681b      	ldr	r3, [r3, #0]
   1ab68:	68fa      	ldr	r2, [r7, #12]
   1ab6a:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* If the dts (time since last event) does not fit in event->dts (only 8 or 16 bits) */
	if (dts > param_maxDTS)
   1ab6c:	1dbb      	adds	r3, r7, #6
   1ab6e:	881a      	ldrh	r2, [r3, #0]
   1ab70:	693b      	ldr	r3, [r7, #16]
   1ab72:	429a      	cmp	r2, r3
   1ab74:	d22f      	bcs.n	1abd6 <prvTraceGetDTS+0x192>
	{
		/* Create an XTS event (eXtended TimeStamp) containing the higher dts bits*/
		xts = (XTSEvent*) prvTraceNextFreeEventBufferSlot();
   1ab76:	4b29      	ldr	r3, [pc, #164]	; (1ac1c <prvTraceGetDTS+0x1d8>)
   1ab78:	4798      	blx	r3
   1ab7a:	0003      	movs	r3, r0
   1ab7c:	617b      	str	r3, [r7, #20]

		if (xts != NULL)
   1ab7e:	697b      	ldr	r3, [r7, #20]
   1ab80:	2b00      	cmp	r3, #0
   1ab82:	d028      	beq.n	1abd6 <prvTraceGetDTS+0x192>
		{
			if (param_maxDTS == 0xFFFF)
   1ab84:	1dbb      	adds	r3, r7, #6
   1ab86:	881b      	ldrh	r3, [r3, #0]
   1ab88:	4a18      	ldr	r2, [pc, #96]	; (1abec <prvTraceGetDTS+0x1a8>)
   1ab8a:	4293      	cmp	r3, r2
   1ab8c:	d10b      	bne.n	1aba6 <prvTraceGetDTS+0x162>
			{
				xts->type = XTS16;
   1ab8e:	697b      	ldr	r3, [r7, #20]
   1ab90:	22a9      	movs	r2, #169	; 0xa9
   1ab92:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
   1ab94:	693b      	ldr	r3, [r7, #16]
   1ab96:	0c1b      	lsrs	r3, r3, #16
   1ab98:	b29a      	uxth	r2, r3
   1ab9a:	697b      	ldr	r3, [r7, #20]
   1ab9c:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = 0;
   1ab9e:	697b      	ldr	r3, [r7, #20]
   1aba0:	2200      	movs	r2, #0
   1aba2:	705a      	strb	r2, [r3, #1]
   1aba4:	e015      	b.n	1abd2 <prvTraceGetDTS+0x18e>
			}
			else if (param_maxDTS == 0xFF)
   1aba6:	1dbb      	adds	r3, r7, #6
   1aba8:	881b      	ldrh	r3, [r3, #0]
   1abaa:	2bff      	cmp	r3, #255	; 0xff
   1abac:	d10d      	bne.n	1abca <prvTraceGetDTS+0x186>
			{
				xts->type = XTS8;
   1abae:	697b      	ldr	r3, [r7, #20]
   1abb0:	22a8      	movs	r2, #168	; 0xa8
   1abb2:	701a      	strb	r2, [r3, #0]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
   1abb4:	693b      	ldr	r3, [r7, #16]
   1abb6:	0a1b      	lsrs	r3, r3, #8
   1abb8:	b29a      	uxth	r2, r3
   1abba:	697b      	ldr	r3, [r7, #20]
   1abbc:	805a      	strh	r2, [r3, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
   1abbe:	693b      	ldr	r3, [r7, #16]
   1abc0:	0e1b      	lsrs	r3, r3, #24
   1abc2:	b2da      	uxtb	r2, r3
   1abc4:	697b      	ldr	r3, [r7, #20]
   1abc6:	705a      	strb	r2, [r3, #1]
   1abc8:	e003      	b.n	1abd2 <prvTraceGetDTS+0x18e>
			}
			else
			{
				prvTraceError("Bad param_maxDTS in prvTraceGetDTS");
   1abca:	4b15      	ldr	r3, [pc, #84]	; (1ac20 <prvTraceGetDTS+0x1dc>)
   1abcc:	0018      	movs	r0, r3
   1abce:	4b09      	ldr	r3, [pc, #36]	; (1abf4 <prvTraceGetDTS+0x1b0>)
   1abd0:	4798      	blx	r3
			}
			prvTraceUpdateCounters();
   1abd2:	4b14      	ldr	r3, [pc, #80]	; (1ac24 <prvTraceGetDTS+0x1e0>)
   1abd4:	4798      	blx	r3
		}
	}

	return (uint16_t)dts & param_maxDTS;
   1abd6:	693b      	ldr	r3, [r7, #16]
   1abd8:	b29b      	uxth	r3, r3
   1abda:	1dba      	adds	r2, r7, #6
   1abdc:	8812      	ldrh	r2, [r2, #0]
   1abde:	4013      	ands	r3, r2
   1abe0:	b29b      	uxth	r3, r3
}
   1abe2:	0018      	movs	r0, r3
   1abe4:	46bd      	mov	sp, r7
   1abe6:	b006      	add	sp, #24
   1abe8:	bdb0      	pop	{r4, r5, r7, pc}
   1abea:	46c0      	nop			; (mov r8, r8)
   1abec:	0000ffff 	.word	0x0000ffff
   1abf0:	00039148 	.word	0x00039148
   1abf4:	0001a831 	.word	0x0001a831
   1abf8:	20000df4 	.word	0x20000df4
   1abfc:	20000d50 	.word	0x20000d50
   1ac00:	e000e018 	.word	0xe000e018
   1ac04:	2000561c 	.word	0x2000561c
   1ac08:	0002abe1 	.word	0x0002abe1
   1ac0c:	0001ac29 	.word	0x0001ac29
   1ac10:	20000e00 	.word	0x20000e00
   1ac14:	00033855 	.word	0x00033855
   1ac18:	00033961 	.word	0x00033961
   1ac1c:	0001a3e9 	.word	0x0001a3e9
   1ac20:	00039188 	.word	0x00039188
   1ac24:	0001a9ed 	.word	0x0001a9ed

0001ac28 <prvTracePortGetTimeStamp>:
 * or the trace recorder library. Typically you should not need to change
 * the code of prvTracePortGetTimeStamp if using the HWTC macros.
 *
 ******************************************************************************/
void prvTracePortGetTimeStamp(uint32_t *pTimestamp)
{
   1ac28:	b580      	push	{r7, lr}
   1ac2a:	b084      	sub	sp, #16
   1ac2c:	af00      	add	r7, sp, #0
   1ac2e:	6078      	str	r0, [r7, #4]
	static uint32_t last_hwtc_count = 0;
	uint32_t hwtc_count = 0;
   1ac30:	2300      	movs	r3, #0
   1ac32:	60bb      	str	r3, [r7, #8]

#if TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR
	/* systick based timer */
	static uint32_t last_traceTickCount = 0;
	uint32_t traceTickCount = 0;
   1ac34:	2300      	movs	r3, #0
   1ac36:	60fb      	str	r3, [r7, #12]
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
   1ac38:	4b2d      	ldr	r3, [pc, #180]	; (1acf0 <prvTracePortGetTimeStamp+0xc8>)
   1ac3a:	681b      	ldr	r3, [r3, #0]
   1ac3c:	2b01      	cmp	r3, #1
   1ac3e:	d107      	bne.n	1ac50 <prvTracePortGetTimeStamp+0x28>
	{
		if (pTimestamp)
   1ac40:	687b      	ldr	r3, [r7, #4]
   1ac42:	2b00      	cmp	r3, #0
   1ac44:	d04f      	beq.n	1ace6 <prvTracePortGetTimeStamp+0xbe>
			*pTimestamp = last_timestamp;
   1ac46:	4b2b      	ldr	r3, [pc, #172]	; (1acf4 <prvTracePortGetTimeStamp+0xcc>)
   1ac48:	681a      	ldr	r2, [r3, #0]
   1ac4a:	687b      	ldr	r3, [r7, #4]
   1ac4c:	601a      	str	r2, [r3, #0]
		return;
   1ac4e:	e04a      	b.n	1ace6 <prvTracePortGetTimeStamp+0xbe>
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
#elif (TRC_HWTC_TYPE == TRC_OS_TIMER_DECR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_DECR)
	/* Convert decreasing tick count into increasing tick count */
	hwtc_count = (TRC_HWTC_PERIOD) - (TRC_HWTC_COUNT);
   1ac50:	4b29      	ldr	r3, [pc, #164]	; (1acf8 <prvTracePortGetTimeStamp+0xd0>)
   1ac52:	681a      	ldr	r2, [r3, #0]
   1ac54:	4b29      	ldr	r3, [pc, #164]	; (1acfc <prvTracePortGetTimeStamp+0xd4>)
   1ac56:	681b      	ldr	r3, [r3, #0]
   1ac58:	1ad3      	subs	r3, r2, r3
   1ac5a:	3301      	adds	r3, #1
   1ac5c:	60bb      	str	r3, [r7, #8]
	}
#endif

#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)
	/* Timestamping is based on a timer that wraps at TRC_HWTC_PERIOD */
	if (last_traceTickCount - uiTraceTickCount - 1 < 0x80000000)
   1ac5e:	4b28      	ldr	r3, [pc, #160]	; (1ad00 <prvTracePortGetTimeStamp+0xd8>)
   1ac60:	681a      	ldr	r2, [r3, #0]
   1ac62:	4b28      	ldr	r3, [pc, #160]	; (1ad04 <prvTracePortGetTimeStamp+0xdc>)
   1ac64:	681b      	ldr	r3, [r3, #0]
   1ac66:	1ad3      	subs	r3, r2, r3
   1ac68:	3b01      	subs	r3, #1
   1ac6a:	2b00      	cmp	r3, #0
   1ac6c:	db03      	blt.n	1ac76 <prvTracePortGetTimeStamp+0x4e>
	{
		/* This means last_traceTickCount is higher than uiTraceTickCount,
		so we have previously compensated for a missed tick.
		Therefore we use the last stored value because that is more accurate. */
		traceTickCount = last_traceTickCount;
   1ac6e:	4b24      	ldr	r3, [pc, #144]	; (1ad00 <prvTracePortGetTimeStamp+0xd8>)
   1ac70:	681b      	ldr	r3, [r3, #0]
   1ac72:	60fb      	str	r3, [r7, #12]
   1ac74:	e002      	b.n	1ac7c <prvTracePortGetTimeStamp+0x54>
	}
	else
	{
		/* Business as usual */
		traceTickCount = uiTraceTickCount;
   1ac76:	4b23      	ldr	r3, [pc, #140]	; (1ad04 <prvTracePortGetTimeStamp+0xdc>)
   1ac78:	681b      	ldr	r3, [r3, #0]
   1ac7a:	60fb      	str	r3, [r7, #12]
	}

	/* Check for overflow. May occur if the update of uiTraceTickCount has been
	delayed due to disabled interrupts. */
	if (traceTickCount == last_traceTickCount && hwtc_count < last_hwtc_count)
   1ac7c:	4b20      	ldr	r3, [pc, #128]	; (1ad00 <prvTracePortGetTimeStamp+0xd8>)
   1ac7e:	681b      	ldr	r3, [r3, #0]
   1ac80:	68fa      	ldr	r2, [r7, #12]
   1ac82:	429a      	cmp	r2, r3
   1ac84:	d107      	bne.n	1ac96 <prvTracePortGetTimeStamp+0x6e>
   1ac86:	4b20      	ldr	r3, [pc, #128]	; (1ad08 <prvTracePortGetTimeStamp+0xe0>)
   1ac88:	681b      	ldr	r3, [r3, #0]
   1ac8a:	68ba      	ldr	r2, [r7, #8]
   1ac8c:	429a      	cmp	r2, r3
   1ac8e:	d202      	bcs.n	1ac96 <prvTracePortGetTimeStamp+0x6e>
	{
		/* A trace tick has occurred but not been executed by the kernel, so we compensate manually. */
		traceTickCount++;
   1ac90:	68fb      	ldr	r3, [r7, #12]
   1ac92:	3301      	adds	r3, #1
   1ac94:	60fb      	str	r3, [r7, #12]
	}

	/* Check if the return address is OK, then we perform the calculation. */
	if (pTimestamp)
   1ac96:	687b      	ldr	r3, [r7, #4]
   1ac98:	2b00      	cmp	r3, #0
   1ac9a:	d016      	beq.n	1acca <prvTracePortGetTimeStamp+0xa2>
	{
		/* Get timestamp from trace ticks. Scale down the period to avoid unwanted overflows. */
		last_timestamp = traceTickCount * ((TRC_HWTC_PERIOD) / (TRC_HWTC_DIVISOR));
   1ac9c:	4b16      	ldr	r3, [pc, #88]	; (1acf8 <prvTracePortGetTimeStamp+0xd0>)
   1ac9e:	681b      	ldr	r3, [r3, #0]
   1aca0:	3301      	adds	r3, #1
   1aca2:	089b      	lsrs	r3, r3, #2
   1aca4:	68fa      	ldr	r2, [r7, #12]
   1aca6:	435a      	muls	r2, r3
   1aca8:	4b12      	ldr	r3, [pc, #72]	; (1acf4 <prvTracePortGetTimeStamp+0xcc>)
   1acaa:	601a      	str	r2, [r3, #0]
		/* Increase timestamp by (hwtc_count + "lost hardware ticks from scaling down period") / TRC_HWTC_DIVISOR. */
		last_timestamp += (hwtc_count + traceTickCount * ((TRC_HWTC_PERIOD) % (TRC_HWTC_DIVISOR))) / (TRC_HWTC_DIVISOR);
   1acac:	4b12      	ldr	r3, [pc, #72]	; (1acf8 <prvTracePortGetTimeStamp+0xd0>)
   1acae:	681b      	ldr	r3, [r3, #0]
   1acb0:	3301      	adds	r3, #1
   1acb2:	2203      	movs	r2, #3
   1acb4:	4013      	ands	r3, r2
   1acb6:	68fa      	ldr	r2, [r7, #12]
   1acb8:	435a      	muls	r2, r3
   1acba:	68bb      	ldr	r3, [r7, #8]
   1acbc:	18d3      	adds	r3, r2, r3
   1acbe:	089a      	lsrs	r2, r3, #2
   1acc0:	4b0c      	ldr	r3, [pc, #48]	; (1acf4 <prvTracePortGetTimeStamp+0xcc>)
   1acc2:	681b      	ldr	r3, [r3, #0]
   1acc4:	18d2      	adds	r2, r2, r3
   1acc6:	4b0b      	ldr	r3, [pc, #44]	; (1acf4 <prvTracePortGetTimeStamp+0xcc>)
   1acc8:	601a      	str	r2, [r3, #0]
	}
	/* Store the previous value */
	last_traceTickCount = traceTickCount;
   1acca:	4b0d      	ldr	r3, [pc, #52]	; (1ad00 <prvTracePortGetTimeStamp+0xd8>)
   1accc:	68fa      	ldr	r2, [r7, #12]
   1acce:	601a      	str	r2, [r3, #0]
	/* We increase the scaled timestamp by the scaled amount */
	last_timestamp += diff_scaled;
#endif /*(TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR)*/

	/* Is anyone interested in the results? */
	if (pTimestamp)
   1acd0:	687b      	ldr	r3, [r7, #4]
   1acd2:	2b00      	cmp	r3, #0
   1acd4:	d003      	beq.n	1acde <prvTracePortGetTimeStamp+0xb6>
		*pTimestamp = last_timestamp;
   1acd6:	4b07      	ldr	r3, [pc, #28]	; (1acf4 <prvTracePortGetTimeStamp+0xcc>)
   1acd8:	681a      	ldr	r2, [r3, #0]
   1acda:	687b      	ldr	r3, [r7, #4]
   1acdc:	601a      	str	r2, [r3, #0]

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
   1acde:	4b0a      	ldr	r3, [pc, #40]	; (1ad08 <prvTracePortGetTimeStamp+0xe0>)
   1ace0:	68ba      	ldr	r2, [r7, #8]
   1ace2:	601a      	str	r2, [r3, #0]
   1ace4:	e000      	b.n	1ace8 <prvTracePortGetTimeStamp+0xc0>
		return;
   1ace6:	46c0      	nop			; (mov r8, r8)
}
   1ace8:	46bd      	mov	sp, r7
   1acea:	b004      	add	sp, #16
   1acec:	bd80      	pop	{r7, pc}
   1acee:	46c0      	nop			; (mov r8, r8)
   1acf0:	20000d40 	.word	0x20000d40
   1acf4:	20000d44 	.word	0x20000d44
   1acf8:	e000e014 	.word	0xe000e014
   1acfc:	e000e018 	.word	0xe000e018
   1ad00:	20000e04 	.word	0x20000e04
   1ad04:	20000d3c 	.word	0x20000d3c
   1ad08:	20000e08 	.word	0x20000e08

0001ad0c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
   1ad0c:	b580      	push	{r7, lr}
   1ad0e:	b082      	sub	sp, #8
   1ad10:	af00      	add	r7, sp, #0
   1ad12:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1ad14:	687b      	ldr	r3, [r7, #4]
   1ad16:	3308      	adds	r3, #8
   1ad18:	001a      	movs	r2, r3
   1ad1a:	687b      	ldr	r3, [r7, #4]
   1ad1c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   1ad1e:	687b      	ldr	r3, [r7, #4]
   1ad20:	2201      	movs	r2, #1
   1ad22:	4252      	negs	r2, r2
   1ad24:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1ad26:	687b      	ldr	r3, [r7, #4]
   1ad28:	3308      	adds	r3, #8
   1ad2a:	001a      	movs	r2, r3
   1ad2c:	687b      	ldr	r3, [r7, #4]
   1ad2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1ad30:	687b      	ldr	r3, [r7, #4]
   1ad32:	3308      	adds	r3, #8
   1ad34:	001a      	movs	r2, r3
   1ad36:	687b      	ldr	r3, [r7, #4]
   1ad38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
   1ad3a:	687b      	ldr	r3, [r7, #4]
   1ad3c:	2200      	movs	r2, #0
   1ad3e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
   1ad40:	46c0      	nop			; (mov r8, r8)
   1ad42:	46bd      	mov	sp, r7
   1ad44:	b002      	add	sp, #8
   1ad46:	bd80      	pop	{r7, pc}

0001ad48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
   1ad48:	b580      	push	{r7, lr}
   1ad4a:	b082      	sub	sp, #8
   1ad4c:	af00      	add	r7, sp, #0
   1ad4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   1ad50:	687b      	ldr	r3, [r7, #4]
   1ad52:	2200      	movs	r2, #0
   1ad54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
   1ad56:	46c0      	nop			; (mov r8, r8)
   1ad58:	46bd      	mov	sp, r7
   1ad5a:	b002      	add	sp, #8
   1ad5c:	bd80      	pop	{r7, pc}

0001ad5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1ad5e:	b580      	push	{r7, lr}
   1ad60:	b084      	sub	sp, #16
   1ad62:	af00      	add	r7, sp, #0
   1ad64:	6078      	str	r0, [r7, #4]
   1ad66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
   1ad68:	687b      	ldr	r3, [r7, #4]
   1ad6a:	685b      	ldr	r3, [r3, #4]
   1ad6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
   1ad6e:	683b      	ldr	r3, [r7, #0]
   1ad70:	68fa      	ldr	r2, [r7, #12]
   1ad72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
   1ad74:	68fb      	ldr	r3, [r7, #12]
   1ad76:	689a      	ldr	r2, [r3, #8]
   1ad78:	683b      	ldr	r3, [r7, #0]
   1ad7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
   1ad7c:	68fb      	ldr	r3, [r7, #12]
   1ad7e:	689b      	ldr	r3, [r3, #8]
   1ad80:	683a      	ldr	r2, [r7, #0]
   1ad82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
   1ad84:	68fb      	ldr	r3, [r7, #12]
   1ad86:	683a      	ldr	r2, [r7, #0]
   1ad88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1ad8a:	683b      	ldr	r3, [r7, #0]
   1ad8c:	687a      	ldr	r2, [r7, #4]
   1ad8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1ad90:	687b      	ldr	r3, [r7, #4]
   1ad92:	681b      	ldr	r3, [r3, #0]
   1ad94:	1c5a      	adds	r2, r3, #1
   1ad96:	687b      	ldr	r3, [r7, #4]
   1ad98:	601a      	str	r2, [r3, #0]
}
   1ad9a:	46c0      	nop			; (mov r8, r8)
   1ad9c:	46bd      	mov	sp, r7
   1ad9e:	b004      	add	sp, #16
   1ada0:	bd80      	pop	{r7, pc}

0001ada2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
   1ada2:	b580      	push	{r7, lr}
   1ada4:	b084      	sub	sp, #16
   1ada6:	af00      	add	r7, sp, #0
   1ada8:	6078      	str	r0, [r7, #4]
   1adaa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
   1adac:	683b      	ldr	r3, [r7, #0]
   1adae:	681b      	ldr	r3, [r3, #0]
   1adb0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   1adb2:	68bb      	ldr	r3, [r7, #8]
   1adb4:	3301      	adds	r3, #1
   1adb6:	d103      	bne.n	1adc0 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   1adb8:	687b      	ldr	r3, [r7, #4]
   1adba:	691b      	ldr	r3, [r3, #16]
   1adbc:	60fb      	str	r3, [r7, #12]
   1adbe:	e00c      	b.n	1adda <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
   1adc0:	687b      	ldr	r3, [r7, #4]
   1adc2:	3308      	adds	r3, #8
   1adc4:	60fb      	str	r3, [r7, #12]
   1adc6:	e002      	b.n	1adce <vListInsert+0x2c>
   1adc8:	68fb      	ldr	r3, [r7, #12]
   1adca:	685b      	ldr	r3, [r3, #4]
   1adcc:	60fb      	str	r3, [r7, #12]
   1adce:	68fb      	ldr	r3, [r7, #12]
   1add0:	685b      	ldr	r3, [r3, #4]
   1add2:	681a      	ldr	r2, [r3, #0]
   1add4:	68bb      	ldr	r3, [r7, #8]
   1add6:	429a      	cmp	r2, r3
   1add8:	d9f6      	bls.n	1adc8 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   1adda:	68fb      	ldr	r3, [r7, #12]
   1addc:	685a      	ldr	r2, [r3, #4]
   1adde:	683b      	ldr	r3, [r7, #0]
   1ade0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
   1ade2:	683b      	ldr	r3, [r7, #0]
   1ade4:	685b      	ldr	r3, [r3, #4]
   1ade6:	683a      	ldr	r2, [r7, #0]
   1ade8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
   1adea:	683b      	ldr	r3, [r7, #0]
   1adec:	68fa      	ldr	r2, [r7, #12]
   1adee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
   1adf0:	68fb      	ldr	r3, [r7, #12]
   1adf2:	683a      	ldr	r2, [r7, #0]
   1adf4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   1adf6:	683b      	ldr	r3, [r7, #0]
   1adf8:	687a      	ldr	r2, [r7, #4]
   1adfa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
   1adfc:	687b      	ldr	r3, [r7, #4]
   1adfe:	681b      	ldr	r3, [r3, #0]
   1ae00:	1c5a      	adds	r2, r3, #1
   1ae02:	687b      	ldr	r3, [r7, #4]
   1ae04:	601a      	str	r2, [r3, #0]
}
   1ae06:	46c0      	nop			; (mov r8, r8)
   1ae08:	46bd      	mov	sp, r7
   1ae0a:	b004      	add	sp, #16
   1ae0c:	bd80      	pop	{r7, pc}

0001ae0e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
   1ae0e:	b580      	push	{r7, lr}
   1ae10:	b084      	sub	sp, #16
   1ae12:	af00      	add	r7, sp, #0
   1ae14:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
   1ae16:	687b      	ldr	r3, [r7, #4]
   1ae18:	691b      	ldr	r3, [r3, #16]
   1ae1a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   1ae1c:	687b      	ldr	r3, [r7, #4]
   1ae1e:	685b      	ldr	r3, [r3, #4]
   1ae20:	687a      	ldr	r2, [r7, #4]
   1ae22:	6892      	ldr	r2, [r2, #8]
   1ae24:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   1ae26:	687b      	ldr	r3, [r7, #4]
   1ae28:	689b      	ldr	r3, [r3, #8]
   1ae2a:	687a      	ldr	r2, [r7, #4]
   1ae2c:	6852      	ldr	r2, [r2, #4]
   1ae2e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   1ae30:	68fb      	ldr	r3, [r7, #12]
   1ae32:	685a      	ldr	r2, [r3, #4]
   1ae34:	687b      	ldr	r3, [r7, #4]
   1ae36:	429a      	cmp	r2, r3
   1ae38:	d103      	bne.n	1ae42 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   1ae3a:	687b      	ldr	r3, [r7, #4]
   1ae3c:	689a      	ldr	r2, [r3, #8]
   1ae3e:	68fb      	ldr	r3, [r7, #12]
   1ae40:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
   1ae42:	687b      	ldr	r3, [r7, #4]
   1ae44:	2200      	movs	r2, #0
   1ae46:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
   1ae48:	68fb      	ldr	r3, [r7, #12]
   1ae4a:	681b      	ldr	r3, [r3, #0]
   1ae4c:	1e5a      	subs	r2, r3, #1
   1ae4e:	68fb      	ldr	r3, [r7, #12]
   1ae50:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   1ae52:	68fb      	ldr	r3, [r7, #12]
   1ae54:	681b      	ldr	r3, [r3, #0]
}
   1ae56:	0018      	movs	r0, r3
   1ae58:	46bd      	mov	sp, r7
   1ae5a:	b004      	add	sp, #16
   1ae5c:	bd80      	pop	{r7, pc}
	...

0001ae60 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
   1ae60:	b580      	push	{r7, lr}
   1ae62:	b084      	sub	sp, #16
   1ae64:	af00      	add	r7, sp, #0
   1ae66:	60f8      	str	r0, [r7, #12]
   1ae68:	60b9      	str	r1, [r7, #8]
   1ae6a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
   1ae6c:	68fb      	ldr	r3, [r7, #12]
   1ae6e:	3b04      	subs	r3, #4
   1ae70:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   1ae72:	68fb      	ldr	r3, [r7, #12]
   1ae74:	2280      	movs	r2, #128	; 0x80
   1ae76:	0452      	lsls	r2, r2, #17
   1ae78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1ae7a:	68fb      	ldr	r3, [r7, #12]
   1ae7c:	3b04      	subs	r3, #4
   1ae7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
   1ae80:	68ba      	ldr	r2, [r7, #8]
   1ae82:	68fb      	ldr	r3, [r7, #12]
   1ae84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
   1ae86:	68fb      	ldr	r3, [r7, #12]
   1ae88:	3b04      	subs	r3, #4
   1ae8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
   1ae8c:	4a08      	ldr	r2, [pc, #32]	; (1aeb0 <pxPortInitialiseStack+0x50>)
   1ae8e:	68fb      	ldr	r3, [r7, #12]
   1ae90:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
   1ae92:	68fb      	ldr	r3, [r7, #12]
   1ae94:	3b14      	subs	r3, #20
   1ae96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
   1ae98:	687a      	ldr	r2, [r7, #4]
   1ae9a:	68fb      	ldr	r3, [r7, #12]
   1ae9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
   1ae9e:	68fb      	ldr	r3, [r7, #12]
   1aea0:	3b20      	subs	r3, #32
   1aea2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
   1aea4:	68fb      	ldr	r3, [r7, #12]
}
   1aea6:	0018      	movs	r0, r3
   1aea8:	46bd      	mov	sp, r7
   1aeaa:	b004      	add	sp, #16
   1aeac:	bd80      	pop	{r7, pc}
   1aeae:	46c0      	nop			; (mov r8, r8)
   1aeb0:	0001aeb5 	.word	0x0001aeb5

0001aeb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
   1aeb4:	b580      	push	{r7, lr}
   1aeb6:	b082      	sub	sp, #8
   1aeb8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
   1aeba:	2300      	movs	r3, #0
   1aebc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
   1aebe:	4b07      	ldr	r3, [pc, #28]	; (1aedc <prvTaskExitError+0x28>)
   1aec0:	681b      	ldr	r3, [r3, #0]
   1aec2:	3301      	adds	r3, #1
   1aec4:	d001      	beq.n	1aeca <prvTaskExitError+0x16>
   1aec6:	b672      	cpsid	i
   1aec8:	e7fe      	b.n	1aec8 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
   1aeca:	b672      	cpsid	i
	while( ulDummy == 0 )
   1aecc:	46c0      	nop			; (mov r8, r8)
   1aece:	687b      	ldr	r3, [r7, #4]
   1aed0:	2b00      	cmp	r3, #0
   1aed2:	d0fc      	beq.n	1aece <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
   1aed4:	46c0      	nop			; (mov r8, r8)
   1aed6:	46bd      	mov	sp, r7
   1aed8:	b002      	add	sp, #8
   1aeda:	bd80      	pop	{r7, pc}
   1aedc:	20000114 	.word	0x20000114

0001aee0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
   1aee0:	b580      	push	{r7, lr}
   1aee2:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
   1aee4:	46c0      	nop			; (mov r8, r8)
   1aee6:	46bd      	mov	sp, r7
   1aee8:	bd80      	pop	{r7, pc}
   1aeea:	0000      	movs	r0, r0
   1aeec:	0000      	movs	r0, r0
	...

0001aef0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
   1aef0:	4a0b      	ldr	r2, [pc, #44]	; (1af20 <pxCurrentTCBConst2>)
   1aef2:	6813      	ldr	r3, [r2, #0]
   1aef4:	6818      	ldr	r0, [r3, #0]
   1aef6:	3020      	adds	r0, #32
   1aef8:	f380 8809 	msr	PSP, r0
   1aefc:	2002      	movs	r0, #2
   1aefe:	f380 8814 	msr	CONTROL, r0
   1af02:	f3bf 8f6f 	isb	sy
   1af06:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
   1af08:	46ae      	mov	lr, r5
   1af0a:	bc08      	pop	{r3}
   1af0c:	bc04      	pop	{r2}
   1af0e:	b662      	cpsie	i
   1af10:	4718      	bx	r3
   1af12:	46c0      	nop			; (mov r8, r8)
   1af14:	46c0      	nop			; (mov r8, r8)
   1af16:	46c0      	nop			; (mov r8, r8)
   1af18:	46c0      	nop			; (mov r8, r8)
   1af1a:	46c0      	nop			; (mov r8, r8)
   1af1c:	46c0      	nop			; (mov r8, r8)
   1af1e:	46c0      	nop			; (mov r8, r8)

0001af20 <pxCurrentTCBConst2>:
   1af20:	200040dc 	.word	0x200040dc
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
   1af24:	46c0      	nop			; (mov r8, r8)
   1af26:	46c0      	nop			; (mov r8, r8)

0001af28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
   1af28:	b580      	push	{r7, lr}
   1af2a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
   1af2c:	4b0e      	ldr	r3, [pc, #56]	; (1af68 <xPortStartScheduler+0x40>)
   1af2e:	4a0e      	ldr	r2, [pc, #56]	; (1af68 <xPortStartScheduler+0x40>)
   1af30:	6812      	ldr	r2, [r2, #0]
   1af32:	21ff      	movs	r1, #255	; 0xff
   1af34:	0409      	lsls	r1, r1, #16
   1af36:	430a      	orrs	r2, r1
   1af38:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
   1af3a:	4b0b      	ldr	r3, [pc, #44]	; (1af68 <xPortStartScheduler+0x40>)
   1af3c:	4a0a      	ldr	r2, [pc, #40]	; (1af68 <xPortStartScheduler+0x40>)
   1af3e:	6812      	ldr	r2, [r2, #0]
   1af40:	21ff      	movs	r1, #255	; 0xff
   1af42:	0609      	lsls	r1, r1, #24
   1af44:	430a      	orrs	r2, r1
   1af46:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
   1af48:	4b08      	ldr	r3, [pc, #32]	; (1af6c <xPortStartScheduler+0x44>)
   1af4a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   1af4c:	4b08      	ldr	r3, [pc, #32]	; (1af70 <xPortStartScheduler+0x48>)
   1af4e:	2200      	movs	r2, #0
   1af50:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
   1af52:	4b08      	ldr	r3, [pc, #32]	; (1af74 <xPortStartScheduler+0x4c>)
   1af54:	4798      	blx	r3
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
   1af56:	4b08      	ldr	r3, [pc, #32]	; (1af78 <xPortStartScheduler+0x50>)
   1af58:	4798      	blx	r3
	prvTaskExitError();
   1af5a:	4b08      	ldr	r3, [pc, #32]	; (1af7c <xPortStartScheduler+0x54>)
   1af5c:	4798      	blx	r3

	/* Should not get here! */
	return 0;
   1af5e:	2300      	movs	r3, #0
}
   1af60:	0018      	movs	r0, r3
   1af62:	46bd      	mov	sp, r7
   1af64:	bd80      	pop	{r7, pc}
   1af66:	46c0      	nop			; (mov r8, r8)
   1af68:	e000ed20 	.word	0xe000ed20
   1af6c:	0001b089 	.word	0x0001b089
   1af70:	20000114 	.word	0x20000114
   1af74:	0001aef1 	.word	0x0001aef1
   1af78:	0001d5e5 	.word	0x0001d5e5
   1af7c:	0001aeb5 	.word	0x0001aeb5

0001af80 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
   1af80:	b580      	push	{r7, lr}
   1af82:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
   1af84:	4b03      	ldr	r3, [pc, #12]	; (1af94 <vPortYield+0x14>)
   1af86:	2280      	movs	r2, #128	; 0x80
   1af88:	0552      	lsls	r2, r2, #21
   1af8a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	//__asm volatile( "dsb" ::: "memory" );
	//__asm volatile( "isb" );
}
   1af8c:	46c0      	nop			; (mov r8, r8)
   1af8e:	46bd      	mov	sp, r7
   1af90:	bd80      	pop	{r7, pc}
   1af92:	46c0      	nop			; (mov r8, r8)
   1af94:	e000ed04 	.word	0xe000ed04

0001af98 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   1af98:	b580      	push	{r7, lr}
   1af9a:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
   1af9c:	b672      	cpsid	i
    uxCriticalNesting++;
   1af9e:	4b06      	ldr	r3, [pc, #24]	; (1afb8 <vPortEnterCritical+0x20>)
   1afa0:	681b      	ldr	r3, [r3, #0]
   1afa2:	1c5a      	adds	r2, r3, #1
   1afa4:	4b04      	ldr	r3, [pc, #16]	; (1afb8 <vPortEnterCritical+0x20>)
   1afa6:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
   1afa8:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
   1afac:	f3bf 8f6f 	isb	sy
}
   1afb0:	46c0      	nop			; (mov r8, r8)
   1afb2:	46bd      	mov	sp, r7
   1afb4:	bd80      	pop	{r7, pc}
   1afb6:	46c0      	nop			; (mov r8, r8)
   1afb8:	20000114 	.word	0x20000114

0001afbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   1afbc:	b580      	push	{r7, lr}
   1afbe:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
   1afc0:	4b09      	ldr	r3, [pc, #36]	; (1afe8 <vPortExitCritical+0x2c>)
   1afc2:	681b      	ldr	r3, [r3, #0]
   1afc4:	2b00      	cmp	r3, #0
   1afc6:	d101      	bne.n	1afcc <vPortExitCritical+0x10>
   1afc8:	b672      	cpsid	i
   1afca:	e7fe      	b.n	1afca <vPortExitCritical+0xe>
    uxCriticalNesting--;
   1afcc:	4b06      	ldr	r3, [pc, #24]	; (1afe8 <vPortExitCritical+0x2c>)
   1afce:	681b      	ldr	r3, [r3, #0]
   1afd0:	1e5a      	subs	r2, r3, #1
   1afd2:	4b05      	ldr	r3, [pc, #20]	; (1afe8 <vPortExitCritical+0x2c>)
   1afd4:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
   1afd6:	4b04      	ldr	r3, [pc, #16]	; (1afe8 <vPortExitCritical+0x2c>)
   1afd8:	681b      	ldr	r3, [r3, #0]
   1afda:	2b00      	cmp	r3, #0
   1afdc:	d100      	bne.n	1afe0 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
   1afde:	b662      	cpsie	i
    }
}
   1afe0:	46c0      	nop			; (mov r8, r8)
   1afe2:	46bd      	mov	sp, r7
   1afe4:	bd80      	pop	{r7, pc}
   1afe6:	46c0      	nop			; (mov r8, r8)
   1afe8:	20000114 	.word	0x20000114

0001afec <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
   1afec:	f3ef 8010 	mrs	r0, PRIMASK
   1aff0:	b672      	cpsid	i
   1aff2:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
   1aff4:	46c0      	nop			; (mov r8, r8)
   1aff6:	0018      	movs	r0, r3

0001aff8 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
   1aff8:	f380 8810 	msr	PRIMASK, r0
   1affc:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
   1affe:	46c0      	nop			; (mov r8, r8)

0001b000 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
   1b000:	f3ef 8009 	mrs	r0, PSP
   1b004:	4b0e      	ldr	r3, [pc, #56]	; (1b040 <pxCurrentTCBConst>)
   1b006:	681a      	ldr	r2, [r3, #0]
   1b008:	3820      	subs	r0, #32
   1b00a:	6010      	str	r0, [r2, #0]
   1b00c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1b00e:	4644      	mov	r4, r8
   1b010:	464d      	mov	r5, r9
   1b012:	4656      	mov	r6, sl
   1b014:	465f      	mov	r7, fp
   1b016:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
   1b018:	b508      	push	{r3, lr}
   1b01a:	b672      	cpsid	i
   1b01c:	f002 fae2 	bl	1d5e4 <vTaskSwitchContext>
   1b020:	b662      	cpsie	i
   1b022:	bc0c      	pop	{r2, r3}
   1b024:	6811      	ldr	r1, [r2, #0]
   1b026:	6808      	ldr	r0, [r1, #0]
   1b028:	3010      	adds	r0, #16
   1b02a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1b02c:	46a0      	mov	r8, r4
   1b02e:	46a9      	mov	r9, r5
   1b030:	46b2      	mov	sl, r6
   1b032:	46bb      	mov	fp, r7
   1b034:	f380 8809 	msr	PSP, r0
   1b038:	3820      	subs	r0, #32
   1b03a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
   1b03c:	4718      	bx	r3
   1b03e:	46c0      	nop			; (mov r8, r8)

0001b040 <pxCurrentTCBConst>:
   1b040:	200040dc 	.word	0x200040dc
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
   1b044:	46c0      	nop			; (mov r8, r8)
   1b046:	46c0      	nop			; (mov r8, r8)

0001b048 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
   1b048:	b580      	push	{r7, lr}
   1b04a:	b082      	sub	sp, #8
   1b04c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
   1b04e:	4b0a      	ldr	r3, [pc, #40]	; (1b078 <SysTick_Handler+0x30>)
   1b050:	4798      	blx	r3
   1b052:	0003      	movs	r3, r0
   1b054:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
   1b056:	4b09      	ldr	r3, [pc, #36]	; (1b07c <SysTick_Handler+0x34>)
   1b058:	4798      	blx	r3
   1b05a:	1e03      	subs	r3, r0, #0
   1b05c:	d003      	beq.n	1b066 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
   1b05e:	4b08      	ldr	r3, [pc, #32]	; (1b080 <SysTick_Handler+0x38>)
   1b060:	2280      	movs	r2, #128	; 0x80
   1b062:	0552      	lsls	r2, r2, #21
   1b064:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
   1b066:	687b      	ldr	r3, [r7, #4]
   1b068:	0018      	movs	r0, r3
   1b06a:	4b06      	ldr	r3, [pc, #24]	; (1b084 <SysTick_Handler+0x3c>)
   1b06c:	4798      	blx	r3
}
   1b06e:	46c0      	nop			; (mov r8, r8)
   1b070:	46bd      	mov	sp, r7
   1b072:	b002      	add	sp, #8
   1b074:	bd80      	pop	{r7, pc}
   1b076:	46c0      	nop			; (mov r8, r8)
   1b078:	0001afed 	.word	0x0001afed
   1b07c:	0001d3f5 	.word	0x0001d3f5
   1b080:	e000ed04 	.word	0xe000ed04
   1b084:	0001aff9 	.word	0x0001aff9

0001b088 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
   1b088:	b5b0      	push	{r4, r5, r7, lr}
   1b08a:	af00      	add	r7, sp, #0
	/* Stop and reset the SysTick. */
	*(portNVIC_SYSTICK_CTRL) = 0UL;
   1b08c:	4b0b      	ldr	r3, [pc, #44]	; (1b0bc <prvSetupTimerInterrupt+0x34>)
   1b08e:	2200      	movs	r2, #0
   1b090:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CURRENT_VALUE) = 0UL;
   1b092:	4b0b      	ldr	r3, [pc, #44]	; (1b0c0 <prvSetupTimerInterrupt+0x38>)
   1b094:	2200      	movs	r2, #0
   1b096:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
   1b098:	4c0a      	ldr	r4, [pc, #40]	; (1b0c4 <prvSetupTimerInterrupt+0x3c>)
   1b09a:	2000      	movs	r0, #0
   1b09c:	4b0a      	ldr	r3, [pc, #40]	; (1b0c8 <prvSetupTimerInterrupt+0x40>)
   1b09e:	4798      	blx	r3
   1b0a0:	4b0a      	ldr	r3, [pc, #40]	; (1b0cc <prvSetupTimerInterrupt+0x44>)
   1b0a2:	22fa      	movs	r2, #250	; 0xfa
   1b0a4:	0091      	lsls	r1, r2, #2
   1b0a6:	4798      	blx	r3
   1b0a8:	0003      	movs	r3, r0
   1b0aa:	3b01      	subs	r3, #1
   1b0ac:	6023      	str	r3, [r4, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
   1b0ae:	4b03      	ldr	r3, [pc, #12]	; (1b0bc <prvSetupTimerInterrupt+0x34>)
   1b0b0:	2207      	movs	r2, #7
   1b0b2:	601a      	str	r2, [r3, #0]
}
   1b0b4:	46c0      	nop			; (mov r8, r8)
   1b0b6:	46bd      	mov	sp, r7
   1b0b8:	bdb0      	pop	{r4, r5, r7, pc}
   1b0ba:	46c0      	nop			; (mov r8, r8)
   1b0bc:	e000e010 	.word	0xe000e010
   1b0c0:	e000e018 	.word	0xe000e018
   1b0c4:	e000e014 	.word	0xe000e014
   1b0c8:	0002abe1 	.word	0x0002abe1
   1b0cc:	00033855 	.word	0x00033855

0001b0d0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   1b0d0:	b580      	push	{r7, lr}
   1b0d2:	b084      	sub	sp, #16
   1b0d4:	af00      	add	r7, sp, #0
   1b0d6:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL;
   1b0d8:	2300      	movs	r3, #0
   1b0da:	60fb      	str	r3, [r7, #12]
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if( portBYTE_ALIGNMENT != 1 )
	{
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   1b0dc:	687b      	ldr	r3, [r7, #4]
   1b0de:	2207      	movs	r2, #7
   1b0e0:	4013      	ands	r3, r2
   1b0e2:	d004      	beq.n	1b0ee <pvPortMalloc+0x1e>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   1b0e4:	687b      	ldr	r3, [r7, #4]
   1b0e6:	2207      	movs	r2, #7
   1b0e8:	4393      	bics	r3, r2
   1b0ea:	3308      	adds	r3, #8
   1b0ec:	607b      	str	r3, [r7, #4]
		}
	}
	#endif

	vTaskSuspendAll();
   1b0ee:	4b21      	ldr	r3, [pc, #132]	; (1b174 <pvPortMalloc+0xa4>)
   1b0f0:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
   1b0f2:	4b21      	ldr	r3, [pc, #132]	; (1b178 <pvPortMalloc+0xa8>)
   1b0f4:	681b      	ldr	r3, [r3, #0]
   1b0f6:	2b00      	cmp	r3, #0
   1b0f8:	d105      	bne.n	1b106 <pvPortMalloc+0x36>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
   1b0fa:	4b20      	ldr	r3, [pc, #128]	; (1b17c <pvPortMalloc+0xac>)
   1b0fc:	2207      	movs	r2, #7
   1b0fe:	4393      	bics	r3, r2
   1b100:	001a      	movs	r2, r3
   1b102:	4b1d      	ldr	r3, [pc, #116]	; (1b178 <pvPortMalloc+0xa8>)
   1b104:	601a      	str	r2, [r3, #0]
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1b106:	4b1e      	ldr	r3, [pc, #120]	; (1b180 <pvPortMalloc+0xb0>)
   1b108:	681a      	ldr	r2, [r3, #0]
   1b10a:	687b      	ldr	r3, [r7, #4]
   1b10c:	18d3      	adds	r3, r2, r3
   1b10e:	4a1d      	ldr	r2, [pc, #116]	; (1b184 <pvPortMalloc+0xb4>)
   1b110:	4293      	cmp	r3, r2
   1b112:	d813      	bhi.n	1b13c <pvPortMalloc+0x6c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
   1b114:	4b1a      	ldr	r3, [pc, #104]	; (1b180 <pvPortMalloc+0xb0>)
   1b116:	681a      	ldr	r2, [r3, #0]
   1b118:	687b      	ldr	r3, [r7, #4]
   1b11a:	18d2      	adds	r2, r2, r3
   1b11c:	4b18      	ldr	r3, [pc, #96]	; (1b180 <pvPortMalloc+0xb0>)
   1b11e:	681b      	ldr	r3, [r3, #0]
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
   1b120:	429a      	cmp	r2, r3
   1b122:	d90b      	bls.n	1b13c <pvPortMalloc+0x6c>
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
   1b124:	4b14      	ldr	r3, [pc, #80]	; (1b178 <pvPortMalloc+0xa8>)
   1b126:	681a      	ldr	r2, [r3, #0]
   1b128:	4b15      	ldr	r3, [pc, #84]	; (1b180 <pvPortMalloc+0xb0>)
   1b12a:	681b      	ldr	r3, [r3, #0]
   1b12c:	18d3      	adds	r3, r2, r3
   1b12e:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;
   1b130:	4b13      	ldr	r3, [pc, #76]	; (1b180 <pvPortMalloc+0xb0>)
   1b132:	681a      	ldr	r2, [r3, #0]
   1b134:	687b      	ldr	r3, [r7, #4]
   1b136:	18d2      	adds	r2, r2, r3
   1b138:	4b11      	ldr	r3, [pc, #68]	; (1b180 <pvPortMalloc+0xb0>)
   1b13a:	601a      	str	r2, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
   1b13c:	68fb      	ldr	r3, [r7, #12]
   1b13e:	2b00      	cmp	r3, #0
   1b140:	d006      	beq.n	1b150 <pvPortMalloc+0x80>
   1b142:	68fb      	ldr	r3, [r7, #12]
   1b144:	687a      	ldr	r2, [r7, #4]
   1b146:	0019      	movs	r1, r3
   1b148:	2094      	movs	r0, #148	; 0x94
   1b14a:	4b0f      	ldr	r3, [pc, #60]	; (1b188 <pvPortMalloc+0xb8>)
   1b14c:	4798      	blx	r3
   1b14e:	e005      	b.n	1b15c <pvPortMalloc+0x8c>
   1b150:	68fb      	ldr	r3, [r7, #12]
   1b152:	687a      	ldr	r2, [r7, #4]
   1b154:	0019      	movs	r1, r3
   1b156:	20e8      	movs	r0, #232	; 0xe8
   1b158:	4b0b      	ldr	r3, [pc, #44]	; (1b188 <pvPortMalloc+0xb8>)
   1b15a:	4798      	blx	r3
	}
	( void ) xTaskResumeAll();
   1b15c:	4b0b      	ldr	r3, [pc, #44]	; (1b18c <pvPortMalloc+0xbc>)
   1b15e:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
   1b160:	68fb      	ldr	r3, [r7, #12]
   1b162:	2b00      	cmp	r3, #0
   1b164:	d101      	bne.n	1b16a <pvPortMalloc+0x9a>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
   1b166:	4b0a      	ldr	r3, [pc, #40]	; (1b190 <pvPortMalloc+0xc0>)
   1b168:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
   1b16a:	68fb      	ldr	r3, [r7, #12]
}
   1b16c:	0018      	movs	r0, r3
   1b16e:	46bd      	mov	sp, r7
   1b170:	b004      	add	sp, #16
   1b172:	bd80      	pop	{r7, pc}
   1b174:	0001d251 	.word	0x0001d251
   1b178:	200040d8 	.word	0x200040d8
   1b17c:	20000e14 	.word	0x20000e14
   1b180:	200040d4 	.word	0x200040d4
   1b184:	000032bf 	.word	0x000032bf
   1b188:	0001983d 	.word	0x0001983d
   1b18c:	0001d269 	.word	0x0001d269
   1b190:	00033825 	.word	0x00033825

0001b194 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   1b194:	b580      	push	{r7, lr}
   1b196:	b082      	sub	sp, #8
   1b198:	af00      	add	r7, sp, #0
   1b19a:	6078      	str	r0, [r7, #4]
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
   1b19c:	687b      	ldr	r3, [r7, #4]
   1b19e:	2b00      	cmp	r3, #0
   1b1a0:	d001      	beq.n	1b1a6 <vPortFree+0x12>
   1b1a2:	b672      	cpsid	i
   1b1a4:	e7fe      	b.n	1b1a4 <vPortFree+0x10>
}
   1b1a6:	46c0      	nop			; (mov r8, r8)
   1b1a8:	46bd      	mov	sp, r7
   1b1aa:	b002      	add	sp, #8
   1b1ac:	bd80      	pop	{r7, pc}
	...

0001b1b0 <xPortGetFreeHeapSize>:
	xNextFreeByte = ( size_t ) 0;
}
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
   1b1b0:	b580      	push	{r7, lr}
   1b1b2:	af00      	add	r7, sp, #0
	return ( configADJUSTED_HEAP_SIZE - xNextFreeByte );
   1b1b4:	4b03      	ldr	r3, [pc, #12]	; (1b1c4 <xPortGetFreeHeapSize+0x14>)
   1b1b6:	681b      	ldr	r3, [r3, #0]
   1b1b8:	22cb      	movs	r2, #203	; 0xcb
   1b1ba:	0192      	lsls	r2, r2, #6
   1b1bc:	1ad3      	subs	r3, r2, r3
}
   1b1be:	0018      	movs	r0, r3
   1b1c0:	46bd      	mov	sp, r7
   1b1c2:	bd80      	pop	{r7, pc}
   1b1c4:	200040d4 	.word	0x200040d4

0001b1c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
   1b1c8:	b580      	push	{r7, lr}
   1b1ca:	b084      	sub	sp, #16
   1b1cc:	af00      	add	r7, sp, #0
   1b1ce:	6078      	str	r0, [r7, #4]
   1b1d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b1d2:	687b      	ldr	r3, [r7, #4]
   1b1d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
   1b1d6:	68fb      	ldr	r3, [r7, #12]
   1b1d8:	2b00      	cmp	r3, #0
   1b1da:	d101      	bne.n	1b1e0 <xQueueGenericReset+0x18>
   1b1dc:	b672      	cpsid	i
   1b1de:	e7fe      	b.n	1b1de <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
   1b1e0:	4b23      	ldr	r3, [pc, #140]	; (1b270 <xQueueGenericReset+0xa8>)
   1b1e2:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   1b1e4:	68fb      	ldr	r3, [r7, #12]
   1b1e6:	681a      	ldr	r2, [r3, #0]
   1b1e8:	68fb      	ldr	r3, [r7, #12]
   1b1ea:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
   1b1ec:	68fb      	ldr	r3, [r7, #12]
   1b1ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b1f0:	434b      	muls	r3, r1
   1b1f2:	18d2      	adds	r2, r2, r3
   1b1f4:	68fb      	ldr	r3, [r7, #12]
   1b1f6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
   1b1f8:	68fb      	ldr	r3, [r7, #12]
   1b1fa:	2200      	movs	r2, #0
   1b1fc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   1b1fe:	68fb      	ldr	r3, [r7, #12]
   1b200:	681a      	ldr	r2, [r3, #0]
   1b202:	68fb      	ldr	r3, [r7, #12]
   1b204:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
   1b206:	68fb      	ldr	r3, [r7, #12]
   1b208:	681a      	ldr	r2, [r3, #0]
   1b20a:	68fb      	ldr	r3, [r7, #12]
   1b20c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b20e:	1e59      	subs	r1, r3, #1
   1b210:	68fb      	ldr	r3, [r7, #12]
   1b212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b214:	434b      	muls	r3, r1
   1b216:	18d2      	adds	r2, r2, r3
   1b218:	68fb      	ldr	r3, [r7, #12]
   1b21a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
   1b21c:	68fb      	ldr	r3, [r7, #12]
   1b21e:	2244      	movs	r2, #68	; 0x44
   1b220:	21ff      	movs	r1, #255	; 0xff
   1b222:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
   1b224:	68fb      	ldr	r3, [r7, #12]
   1b226:	2245      	movs	r2, #69	; 0x45
   1b228:	21ff      	movs	r1, #255	; 0xff
   1b22a:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
   1b22c:	683b      	ldr	r3, [r7, #0]
   1b22e:	2b00      	cmp	r3, #0
   1b230:	d10d      	bne.n	1b24e <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1b232:	68fb      	ldr	r3, [r7, #12]
   1b234:	691b      	ldr	r3, [r3, #16]
   1b236:	2b00      	cmp	r3, #0
   1b238:	d013      	beq.n	1b262 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1b23a:	68fb      	ldr	r3, [r7, #12]
   1b23c:	3310      	adds	r3, #16
   1b23e:	0018      	movs	r0, r3
   1b240:	4b0c      	ldr	r3, [pc, #48]	; (1b274 <xQueueGenericReset+0xac>)
   1b242:	4798      	blx	r3
   1b244:	1e03      	subs	r3, r0, #0
   1b246:	d00c      	beq.n	1b262 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
   1b248:	4b0b      	ldr	r3, [pc, #44]	; (1b278 <xQueueGenericReset+0xb0>)
   1b24a:	4798      	blx	r3
   1b24c:	e009      	b.n	1b262 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   1b24e:	68fb      	ldr	r3, [r7, #12]
   1b250:	3310      	adds	r3, #16
   1b252:	0018      	movs	r0, r3
   1b254:	4b09      	ldr	r3, [pc, #36]	; (1b27c <xQueueGenericReset+0xb4>)
   1b256:	4798      	blx	r3
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   1b258:	68fb      	ldr	r3, [r7, #12]
   1b25a:	3324      	adds	r3, #36	; 0x24
   1b25c:	0018      	movs	r0, r3
   1b25e:	4b07      	ldr	r3, [pc, #28]	; (1b27c <xQueueGenericReset+0xb4>)
   1b260:	4798      	blx	r3
		}
	}
	taskEXIT_CRITICAL();
   1b262:	4b07      	ldr	r3, [pc, #28]	; (1b280 <xQueueGenericReset+0xb8>)
   1b264:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
   1b266:	2301      	movs	r3, #1
}
   1b268:	0018      	movs	r0, r3
   1b26a:	46bd      	mov	sp, r7
   1b26c:	b004      	add	sp, #16
   1b26e:	bd80      	pop	{r7, pc}
   1b270:	0001af99 	.word	0x0001af99
   1b274:	0001d829 	.word	0x0001d829
   1b278:	0001af81 	.word	0x0001af81
   1b27c:	0001ad0d 	.word	0x0001ad0d
   1b280:	0001afbd 	.word	0x0001afbd

0001b284 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
   1b284:	b590      	push	{r4, r7, lr}
   1b286:	b08b      	sub	sp, #44	; 0x2c
   1b288:	af02      	add	r7, sp, #8
   1b28a:	60f8      	str	r0, [r7, #12]
   1b28c:	60b9      	str	r1, [r7, #8]
   1b28e:	1dfb      	adds	r3, r7, #7
   1b290:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
   1b292:	68fb      	ldr	r3, [r7, #12]
   1b294:	2b00      	cmp	r3, #0
   1b296:	d101      	bne.n	1b29c <xQueueGenericCreate+0x18>
   1b298:	b672      	cpsid	i
   1b29a:	e7fe      	b.n	1b29a <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
   1b29c:	68bb      	ldr	r3, [r7, #8]
   1b29e:	2b00      	cmp	r3, #0
   1b2a0:	d102      	bne.n	1b2a8 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
   1b2a2:	2300      	movs	r3, #0
   1b2a4:	61fb      	str	r3, [r7, #28]
   1b2a6:	e003      	b.n	1b2b0 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1b2a8:	68fb      	ldr	r3, [r7, #12]
   1b2aa:	68ba      	ldr	r2, [r7, #8]
   1b2ac:	4353      	muls	r3, r2
   1b2ae:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
   1b2b0:	69fb      	ldr	r3, [r7, #28]
   1b2b2:	3354      	adds	r3, #84	; 0x54
   1b2b4:	0018      	movs	r0, r3
   1b2b6:	4b19      	ldr	r3, [pc, #100]	; (1b31c <xQueueGenericCreate+0x98>)
   1b2b8:	4798      	blx	r3
   1b2ba:	0003      	movs	r3, r0
   1b2bc:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
   1b2be:	69bb      	ldr	r3, [r7, #24]
   1b2c0:	2b00      	cmp	r3, #0
   1b2c2:	d00d      	beq.n	1b2e0 <xQueueGenericCreate+0x5c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
   1b2c4:	69bb      	ldr	r3, [r7, #24]
   1b2c6:	3354      	adds	r3, #84	; 0x54
   1b2c8:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
   1b2ca:	1dfb      	adds	r3, r7, #7
   1b2cc:	781c      	ldrb	r4, [r3, #0]
   1b2ce:	697a      	ldr	r2, [r7, #20]
   1b2d0:	68b9      	ldr	r1, [r7, #8]
   1b2d2:	68f8      	ldr	r0, [r7, #12]
   1b2d4:	69bb      	ldr	r3, [r7, #24]
   1b2d6:	9300      	str	r3, [sp, #0]
   1b2d8:	0023      	movs	r3, r4
   1b2da:	4c11      	ldr	r4, [pc, #68]	; (1b320 <xQueueGenericCreate+0x9c>)
   1b2dc:	47a0      	blx	r4
   1b2de:	e017      	b.n	1b310 <xQueueGenericCreate+0x8c>
		}
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
   1b2e0:	4b10      	ldr	r3, [pc, #64]	; (1b324 <xQueueGenericCreate+0xa0>)
   1b2e2:	4798      	blx	r3
   1b2e4:	0003      	movs	r3, r0
   1b2e6:	0018      	movs	r0, r3
   1b2e8:	4b0f      	ldr	r3, [pc, #60]	; (1b328 <xQueueGenericCreate+0xa4>)
   1b2ea:	4798      	blx	r3
   1b2ec:	0003      	movs	r3, r0
   1b2ee:	001a      	movs	r2, r3
   1b2f0:	4b0e      	ldr	r3, [pc, #56]	; (1b32c <xQueueGenericCreate+0xa8>)
   1b2f2:	881b      	ldrh	r3, [r3, #0]
   1b2f4:	4013      	ands	r3, r2
   1b2f6:	b29b      	uxth	r3, r3
   1b2f8:	2b00      	cmp	r3, #0
   1b2fa:	d009      	beq.n	1b310 <xQueueGenericCreate+0x8c>
   1b2fc:	1dfb      	adds	r3, r7, #7
   1b2fe:	781b      	ldrb	r3, [r3, #0]
   1b300:	4a0b      	ldr	r2, [pc, #44]	; (1b330 <xQueueGenericCreate+0xac>)
   1b302:	5cd3      	ldrb	r3, [r2, r3]
   1b304:	3340      	adds	r3, #64	; 0x40
   1b306:	b2db      	uxtb	r3, r3
   1b308:	2100      	movs	r1, #0
   1b30a:	0018      	movs	r0, r3
   1b30c:	4b09      	ldr	r3, [pc, #36]	; (1b334 <xQueueGenericCreate+0xb0>)
   1b30e:	4798      	blx	r3
		}

		return pxNewQueue;
   1b310:	69bb      	ldr	r3, [r7, #24]
	}
   1b312:	0018      	movs	r0, r3
   1b314:	46bd      	mov	sp, r7
   1b316:	b009      	add	sp, #36	; 0x24
   1b318:	bd90      	pop	{r4, r7, pc}
   1b31a:	46c0      	nop			; (mov r8, r8)
   1b31c:	0001b0d1 	.word	0x0001b0d1
   1b320:	0001b339 	.word	0x0001b339
   1b324:	00019231 	.word	0x00019231
   1b328:	00018f95 	.word	0x00018f95
   1b32c:	20000110 	.word	0x20000110
   1b330:	20000104 	.word	0x20000104
   1b334:	00019c95 	.word	0x00019c95

0001b338 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
   1b338:	b5b0      	push	{r4, r5, r7, lr}
   1b33a:	b084      	sub	sp, #16
   1b33c:	af00      	add	r7, sp, #0
   1b33e:	60f8      	str	r0, [r7, #12]
   1b340:	60b9      	str	r1, [r7, #8]
   1b342:	607a      	str	r2, [r7, #4]
   1b344:	001a      	movs	r2, r3
   1b346:	1cfb      	adds	r3, r7, #3
   1b348:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
   1b34a:	68bb      	ldr	r3, [r7, #8]
   1b34c:	2b00      	cmp	r3, #0
   1b34e:	d103      	bne.n	1b358 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
   1b350:	6a3b      	ldr	r3, [r7, #32]
   1b352:	6a3a      	ldr	r2, [r7, #32]
   1b354:	601a      	str	r2, [r3, #0]
   1b356:	e002      	b.n	1b35e <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
   1b358:	6a3b      	ldr	r3, [r7, #32]
   1b35a:	687a      	ldr	r2, [r7, #4]
   1b35c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
   1b35e:	6a3b      	ldr	r3, [r7, #32]
   1b360:	68fa      	ldr	r2, [r7, #12]
   1b362:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
   1b364:	6a3b      	ldr	r3, [r7, #32]
   1b366:	68ba      	ldr	r2, [r7, #8]
   1b368:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
   1b36a:	6a3b      	ldr	r3, [r7, #32]
   1b36c:	2101      	movs	r1, #1
   1b36e:	0018      	movs	r0, r3
   1b370:	4b41      	ldr	r3, [pc, #260]	; (1b478 <prvInitialiseNewQueue+0x140>)
   1b372:	4798      	blx	r3

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
   1b374:	6a3b      	ldr	r3, [r7, #32]
   1b376:	1cfa      	adds	r2, r7, #3
   1b378:	2150      	movs	r1, #80	; 0x50
   1b37a:	7812      	ldrb	r2, [r2, #0]
   1b37c:	545a      	strb	r2, [r3, r1]
	}
	#endif /* configUSE_TRACE_FACILITY */

	#if( configUSE_QUEUE_SETS == 1 )
	{
		pxNewQueue->pxQueueSetContainer = NULL;
   1b37e:	6a3b      	ldr	r3, [r7, #32]
   1b380:	2200      	movs	r2, #0
   1b382:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
   1b384:	6a3b      	ldr	r3, [r7, #32]
   1b386:	0018      	movs	r0, r3
   1b388:	4b3c      	ldr	r3, [pc, #240]	; (1b47c <prvInitialiseNewQueue+0x144>)
   1b38a:	4798      	blx	r3
   1b38c:	0003      	movs	r3, r0
   1b38e:	001a      	movs	r2, r3
   1b390:	4b3b      	ldr	r3, [pc, #236]	; (1b480 <prvInitialiseNewQueue+0x148>)
   1b392:	5c9b      	ldrb	r3, [r3, r2]
   1b394:	0018      	movs	r0, r3
   1b396:	4b3b      	ldr	r3, [pc, #236]	; (1b484 <prvInitialiseNewQueue+0x14c>)
   1b398:	4798      	blx	r3
   1b39a:	0003      	movs	r3, r0
   1b39c:	b29a      	uxth	r2, r3
   1b39e:	6a3b      	ldr	r3, [r7, #32]
   1b3a0:	0011      	movs	r1, r2
   1b3a2:	0018      	movs	r0, r3
   1b3a4:	4b38      	ldr	r3, [pc, #224]	; (1b488 <prvInitialiseNewQueue+0x150>)
   1b3a6:	4798      	blx	r3
   1b3a8:	4b38      	ldr	r3, [pc, #224]	; (1b48c <prvInitialiseNewQueue+0x154>)
   1b3aa:	881a      	ldrh	r2, [r3, #0]
   1b3ac:	6a3b      	ldr	r3, [r7, #32]
   1b3ae:	0011      	movs	r1, r2
   1b3b0:	0018      	movs	r0, r3
   1b3b2:	4b37      	ldr	r3, [pc, #220]	; (1b490 <prvInitialiseNewQueue+0x158>)
   1b3b4:	4798      	blx	r3
   1b3b6:	6a3b      	ldr	r3, [r7, #32]
   1b3b8:	0018      	movs	r0, r3
   1b3ba:	4b30      	ldr	r3, [pc, #192]	; (1b47c <prvInitialiseNewQueue+0x144>)
   1b3bc:	4798      	blx	r3
   1b3be:	0003      	movs	r3, r0
   1b3c0:	001a      	movs	r2, r3
   1b3c2:	4b2f      	ldr	r3, [pc, #188]	; (1b480 <prvInitialiseNewQueue+0x148>)
   1b3c4:	5c9c      	ldrb	r4, [r3, r2]
   1b3c6:	6a3b      	ldr	r3, [r7, #32]
   1b3c8:	0018      	movs	r0, r3
   1b3ca:	4b32      	ldr	r3, [pc, #200]	; (1b494 <prvInitialiseNewQueue+0x15c>)
   1b3cc:	4798      	blx	r3
   1b3ce:	0003      	movs	r3, r0
   1b3d0:	b2db      	uxtb	r3, r3
   1b3d2:	0019      	movs	r1, r3
   1b3d4:	0020      	movs	r0, r4
   1b3d6:	4b30      	ldr	r3, [pc, #192]	; (1b498 <prvInitialiseNewQueue+0x160>)
   1b3d8:	4798      	blx	r3
   1b3da:	4b30      	ldr	r3, [pc, #192]	; (1b49c <prvInitialiseNewQueue+0x164>)
   1b3dc:	4798      	blx	r3
   1b3de:	0003      	movs	r3, r0
   1b3e0:	0018      	movs	r0, r3
   1b3e2:	4b2f      	ldr	r3, [pc, #188]	; (1b4a0 <prvInitialiseNewQueue+0x168>)
   1b3e4:	4798      	blx	r3
   1b3e6:	0003      	movs	r3, r0
   1b3e8:	001a      	movs	r2, r3
   1b3ea:	4b2e      	ldr	r3, [pc, #184]	; (1b4a4 <prvInitialiseNewQueue+0x16c>)
   1b3ec:	881b      	ldrh	r3, [r3, #0]
   1b3ee:	4013      	ands	r3, r2
   1b3f0:	b29b      	uxth	r3, r3
   1b3f2:	2b00      	cmp	r3, #0
   1b3f4:	d029      	beq.n	1b44a <prvInitialiseNewQueue+0x112>
   1b3f6:	6a3b      	ldr	r3, [r7, #32]
   1b3f8:	0018      	movs	r0, r3
   1b3fa:	4b2b      	ldr	r3, [pc, #172]	; (1b4a8 <prvInitialiseNewQueue+0x170>)
   1b3fc:	4798      	blx	r3
   1b3fe:	0003      	movs	r3, r0
   1b400:	001a      	movs	r2, r3
   1b402:	4b28      	ldr	r3, [pc, #160]	; (1b4a4 <prvInitialiseNewQueue+0x16c>)
   1b404:	881b      	ldrh	r3, [r3, #0]
   1b406:	4013      	ands	r3, r2
   1b408:	b29b      	uxth	r3, r3
   1b40a:	2b00      	cmp	r3, #0
   1b40c:	d01d      	beq.n	1b44a <prvInitialiseNewQueue+0x112>
   1b40e:	6a3b      	ldr	r3, [r7, #32]
   1b410:	0018      	movs	r0, r3
   1b412:	4b1a      	ldr	r3, [pc, #104]	; (1b47c <prvInitialiseNewQueue+0x144>)
   1b414:	4798      	blx	r3
   1b416:	0003      	movs	r3, r0
   1b418:	001a      	movs	r2, r3
   1b41a:	4b19      	ldr	r3, [pc, #100]	; (1b480 <prvInitialiseNewQueue+0x148>)
   1b41c:	5c9b      	ldrb	r3, [r3, r2]
   1b41e:	3318      	adds	r3, #24
   1b420:	b2db      	uxtb	r3, r3
   1b422:	001d      	movs	r5, r3
   1b424:	6a3b      	ldr	r3, [r7, #32]
   1b426:	0018      	movs	r0, r3
   1b428:	4b14      	ldr	r3, [pc, #80]	; (1b47c <prvInitialiseNewQueue+0x144>)
   1b42a:	4798      	blx	r3
   1b42c:	0003      	movs	r3, r0
   1b42e:	001a      	movs	r2, r3
   1b430:	4b13      	ldr	r3, [pc, #76]	; (1b480 <prvInitialiseNewQueue+0x148>)
   1b432:	5c9c      	ldrb	r4, [r3, r2]
   1b434:	6a3b      	ldr	r3, [r7, #32]
   1b436:	0018      	movs	r0, r3
   1b438:	4b16      	ldr	r3, [pc, #88]	; (1b494 <prvInitialiseNewQueue+0x15c>)
   1b43a:	4798      	blx	r3
   1b43c:	0003      	movs	r3, r0
   1b43e:	b2db      	uxtb	r3, r3
   1b440:	001a      	movs	r2, r3
   1b442:	0021      	movs	r1, r4
   1b444:	0028      	movs	r0, r5
   1b446:	4b19      	ldr	r3, [pc, #100]	; (1b4ac <prvInitialiseNewQueue+0x174>)
   1b448:	4798      	blx	r3
   1b44a:	6a3b      	ldr	r3, [r7, #32]
   1b44c:	0018      	movs	r0, r3
   1b44e:	4b0b      	ldr	r3, [pc, #44]	; (1b47c <prvInitialiseNewQueue+0x144>)
   1b450:	4798      	blx	r3
   1b452:	0003      	movs	r3, r0
   1b454:	001a      	movs	r2, r3
   1b456:	4b0a      	ldr	r3, [pc, #40]	; (1b480 <prvInitialiseNewQueue+0x148>)
   1b458:	5c9c      	ldrb	r4, [r3, r2]
   1b45a:	6a3b      	ldr	r3, [r7, #32]
   1b45c:	0018      	movs	r0, r3
   1b45e:	4b0d      	ldr	r3, [pc, #52]	; (1b494 <prvInitialiseNewQueue+0x15c>)
   1b460:	4798      	blx	r3
   1b462:	0003      	movs	r3, r0
   1b464:	b2db      	uxtb	r3, r3
   1b466:	2200      	movs	r2, #0
   1b468:	0019      	movs	r1, r3
   1b46a:	0020      	movs	r0, r4
   1b46c:	4b10      	ldr	r3, [pc, #64]	; (1b4b0 <prvInitialiseNewQueue+0x178>)
   1b46e:	4798      	blx	r3
}
   1b470:	46c0      	nop			; (mov r8, r8)
   1b472:	46bd      	mov	sp, r7
   1b474:	b004      	add	sp, #16
   1b476:	bdb0      	pop	{r4, r5, r7, pc}
   1b478:	0001b1c9 	.word	0x0001b1c9
   1b47c:	00018f55 	.word	0x00018f55
   1b480:	20000104 	.word	0x20000104
   1b484:	0001a515 	.word	0x0001a515
   1b488:	00019079 	.word	0x00019079
   1b48c:	20000112 	.word	0x20000112
   1b490:	000190b5 	.word	0x000190b5
   1b494:	00019035 	.word	0x00019035
   1b498:	0001a6ad 	.word	0x0001a6ad
   1b49c:	00019231 	.word	0x00019231
   1b4a0:	00018f95 	.word	0x00018f95
   1b4a4:	20000110 	.word	0x20000110
   1b4a8:	00019055 	.word	0x00019055
   1b4ac:	0001998d 	.word	0x0001998d
   1b4b0:	00019fe9 	.word	0x00019fe9

0001b4b4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
   1b4b4:	b590      	push	{r4, r7, lr}
   1b4b6:	b083      	sub	sp, #12
   1b4b8:	af00      	add	r7, sp, #0
   1b4ba:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
   1b4bc:	687b      	ldr	r3, [r7, #4]
   1b4be:	2b00      	cmp	r3, #0
   1b4c0:	d00e      	beq.n	1b4e0 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
   1b4c2:	687b      	ldr	r3, [r7, #4]
   1b4c4:	2200      	movs	r2, #0
   1b4c6:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   1b4c8:	687b      	ldr	r3, [r7, #4]
   1b4ca:	2200      	movs	r2, #0
   1b4cc:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
   1b4ce:	687b      	ldr	r3, [r7, #4]
   1b4d0:	2200      	movs	r2, #0
   1b4d2:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
   1b4d4:	6878      	ldr	r0, [r7, #4]
   1b4d6:	2300      	movs	r3, #0
   1b4d8:	2200      	movs	r2, #0
   1b4da:	2100      	movs	r1, #0
   1b4dc:	4c02      	ldr	r4, [pc, #8]	; (1b4e8 <prvInitialiseMutex+0x34>)
   1b4de:	47a0      	blx	r4
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
   1b4e0:	46c0      	nop			; (mov r8, r8)
   1b4e2:	46bd      	mov	sp, r7
   1b4e4:	b003      	add	sp, #12
   1b4e6:	bd90      	pop	{r4, r7, pc}
   1b4e8:	0001b52d 	.word	0x0001b52d

0001b4ec <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
   1b4ec:	b580      	push	{r7, lr}
   1b4ee:	b086      	sub	sp, #24
   1b4f0:	af00      	add	r7, sp, #0
   1b4f2:	0002      	movs	r2, r0
   1b4f4:	1dfb      	adds	r3, r7, #7
   1b4f6:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
   1b4f8:	2301      	movs	r3, #1
   1b4fa:	617b      	str	r3, [r7, #20]
   1b4fc:	2300      	movs	r3, #0
   1b4fe:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
   1b500:	1dfb      	adds	r3, r7, #7
   1b502:	781a      	ldrb	r2, [r3, #0]
   1b504:	6939      	ldr	r1, [r7, #16]
   1b506:	697b      	ldr	r3, [r7, #20]
   1b508:	0018      	movs	r0, r3
   1b50a:	4b06      	ldr	r3, [pc, #24]	; (1b524 <xQueueCreateMutex+0x38>)
   1b50c:	4798      	blx	r3
   1b50e:	0003      	movs	r3, r0
   1b510:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
   1b512:	68fb      	ldr	r3, [r7, #12]
   1b514:	0018      	movs	r0, r3
   1b516:	4b04      	ldr	r3, [pc, #16]	; (1b528 <xQueueCreateMutex+0x3c>)
   1b518:	4798      	blx	r3

		return pxNewQueue;
   1b51a:	68fb      	ldr	r3, [r7, #12]
	}
   1b51c:	0018      	movs	r0, r3
   1b51e:	46bd      	mov	sp, r7
   1b520:	b006      	add	sp, #24
   1b522:	bd80      	pop	{r7, pc}
   1b524:	0001b285 	.word	0x0001b285
   1b528:	0001b4b5 	.word	0x0001b4b5

0001b52c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
   1b52c:	b5b0      	push	{r4, r5, r7, lr}
   1b52e:	b08a      	sub	sp, #40	; 0x28
   1b530:	af00      	add	r7, sp, #0
   1b532:	60f8      	str	r0, [r7, #12]
   1b534:	60b9      	str	r1, [r7, #8]
   1b536:	607a      	str	r2, [r7, #4]
   1b538:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
   1b53a:	2300      	movs	r3, #0
   1b53c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b53e:	68fb      	ldr	r3, [r7, #12]
   1b540:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
   1b542:	6a3b      	ldr	r3, [r7, #32]
   1b544:	2b00      	cmp	r3, #0
   1b546:	d101      	bne.n	1b54c <xQueueGenericSend+0x20>
   1b548:	b672      	cpsid	i
   1b54a:	e7fe      	b.n	1b54a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1b54c:	68bb      	ldr	r3, [r7, #8]
   1b54e:	2b00      	cmp	r3, #0
   1b550:	d103      	bne.n	1b55a <xQueueGenericSend+0x2e>
   1b552:	6a3b      	ldr	r3, [r7, #32]
   1b554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b556:	2b00      	cmp	r3, #0
   1b558:	d101      	bne.n	1b55e <xQueueGenericSend+0x32>
   1b55a:	2301      	movs	r3, #1
   1b55c:	e000      	b.n	1b560 <xQueueGenericSend+0x34>
   1b55e:	2300      	movs	r3, #0
   1b560:	2b00      	cmp	r3, #0
   1b562:	d101      	bne.n	1b568 <xQueueGenericSend+0x3c>
   1b564:	b672      	cpsid	i
   1b566:	e7fe      	b.n	1b566 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1b568:	683b      	ldr	r3, [r7, #0]
   1b56a:	2b02      	cmp	r3, #2
   1b56c:	d103      	bne.n	1b576 <xQueueGenericSend+0x4a>
   1b56e:	6a3b      	ldr	r3, [r7, #32]
   1b570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b572:	2b01      	cmp	r3, #1
   1b574:	d101      	bne.n	1b57a <xQueueGenericSend+0x4e>
   1b576:	2301      	movs	r3, #1
   1b578:	e000      	b.n	1b57c <xQueueGenericSend+0x50>
   1b57a:	2300      	movs	r3, #0
   1b57c:	2b00      	cmp	r3, #0
   1b57e:	d101      	bne.n	1b584 <xQueueGenericSend+0x58>
   1b580:	b672      	cpsid	i
   1b582:	e7fe      	b.n	1b582 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1b584:	4bbc      	ldr	r3, [pc, #752]	; (1b878 <xQueueGenericSend+0x34c>)
   1b586:	4798      	blx	r3
   1b588:	1e03      	subs	r3, r0, #0
   1b58a:	d102      	bne.n	1b592 <xQueueGenericSend+0x66>
   1b58c:	687b      	ldr	r3, [r7, #4]
   1b58e:	2b00      	cmp	r3, #0
   1b590:	d101      	bne.n	1b596 <xQueueGenericSend+0x6a>
   1b592:	2301      	movs	r3, #1
   1b594:	e000      	b.n	1b598 <xQueueGenericSend+0x6c>
   1b596:	2300      	movs	r3, #0
   1b598:	2b00      	cmp	r3, #0
   1b59a:	d101      	bne.n	1b5a0 <xQueueGenericSend+0x74>
   1b59c:	b672      	cpsid	i
   1b59e:	e7fe      	b.n	1b59e <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   1b5a0:	4bb6      	ldr	r3, [pc, #728]	; (1b87c <xQueueGenericSend+0x350>)
   1b5a2:	4798      	blx	r3
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1b5a4:	6a3b      	ldr	r3, [r7, #32]
   1b5a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1b5a8:	6a3b      	ldr	r3, [r7, #32]
   1b5aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b5ac:	429a      	cmp	r2, r3
   1b5ae:	d303      	bcc.n	1b5b8 <xQueueGenericSend+0x8c>
   1b5b0:	683b      	ldr	r3, [r7, #0]
   1b5b2:	2b02      	cmp	r3, #2
   1b5b4:	d000      	beq.n	1b5b8 <xQueueGenericSend+0x8c>
   1b5b6:	e08e      	b.n	1b6d6 <xQueueGenericSend+0x1aa>
			{
				traceQUEUE_SEND( pxQueue );
   1b5b8:	4bb1      	ldr	r3, [pc, #708]	; (1b880 <xQueueGenericSend+0x354>)
   1b5ba:	4798      	blx	r3
   1b5bc:	0003      	movs	r3, r0
   1b5be:	0018      	movs	r0, r3
   1b5c0:	4bb0      	ldr	r3, [pc, #704]	; (1b884 <xQueueGenericSend+0x358>)
   1b5c2:	4798      	blx	r3
   1b5c4:	0003      	movs	r3, r0
   1b5c6:	001a      	movs	r2, r3
   1b5c8:	4baf      	ldr	r3, [pc, #700]	; (1b888 <xQueueGenericSend+0x35c>)
   1b5ca:	881b      	ldrh	r3, [r3, #0]
   1b5cc:	4013      	ands	r3, r2
   1b5ce:	b29b      	uxth	r3, r3
   1b5d0:	2b00      	cmp	r3, #0
   1b5d2:	d02e      	beq.n	1b632 <xQueueGenericSend+0x106>
   1b5d4:	6a3b      	ldr	r3, [r7, #32]
   1b5d6:	0018      	movs	r0, r3
   1b5d8:	4bac      	ldr	r3, [pc, #688]	; (1b88c <xQueueGenericSend+0x360>)
   1b5da:	4798      	blx	r3
   1b5dc:	0003      	movs	r3, r0
   1b5de:	001a      	movs	r2, r3
   1b5e0:	4ba9      	ldr	r3, [pc, #676]	; (1b888 <xQueueGenericSend+0x35c>)
   1b5e2:	881b      	ldrh	r3, [r3, #0]
   1b5e4:	4013      	ands	r3, r2
   1b5e6:	b29b      	uxth	r3, r3
   1b5e8:	2b00      	cmp	r3, #0
   1b5ea:	d022      	beq.n	1b632 <xQueueGenericSend+0x106>
   1b5ec:	683b      	ldr	r3, [r7, #0]
   1b5ee:	2b00      	cmp	r3, #0
   1b5f0:	d10b      	bne.n	1b60a <xQueueGenericSend+0xde>
   1b5f2:	6a3b      	ldr	r3, [r7, #32]
   1b5f4:	0018      	movs	r0, r3
   1b5f6:	4ba6      	ldr	r3, [pc, #664]	; (1b890 <xQueueGenericSend+0x364>)
   1b5f8:	4798      	blx	r3
   1b5fa:	0003      	movs	r3, r0
   1b5fc:	001a      	movs	r2, r3
   1b5fe:	4ba5      	ldr	r3, [pc, #660]	; (1b894 <xQueueGenericSend+0x368>)
   1b600:	5c9b      	ldrb	r3, [r3, r2]
   1b602:	3320      	adds	r3, #32
   1b604:	b2db      	uxtb	r3, r3
   1b606:	001d      	movs	r5, r3
   1b608:	e000      	b.n	1b60c <xQueueGenericSend+0xe0>
   1b60a:	2525      	movs	r5, #37	; 0x25
   1b60c:	6a3b      	ldr	r3, [r7, #32]
   1b60e:	0018      	movs	r0, r3
   1b610:	4b9f      	ldr	r3, [pc, #636]	; (1b890 <xQueueGenericSend+0x364>)
   1b612:	4798      	blx	r3
   1b614:	0003      	movs	r3, r0
   1b616:	001a      	movs	r2, r3
   1b618:	4b9e      	ldr	r3, [pc, #632]	; (1b894 <xQueueGenericSend+0x368>)
   1b61a:	5c9c      	ldrb	r4, [r3, r2]
   1b61c:	6a3b      	ldr	r3, [r7, #32]
   1b61e:	0018      	movs	r0, r3
   1b620:	4b9d      	ldr	r3, [pc, #628]	; (1b898 <xQueueGenericSend+0x36c>)
   1b622:	4798      	blx	r3
   1b624:	0003      	movs	r3, r0
   1b626:	b2db      	uxtb	r3, r3
   1b628:	001a      	movs	r2, r3
   1b62a:	0021      	movs	r1, r4
   1b62c:	0028      	movs	r0, r5
   1b62e:	4b9b      	ldr	r3, [pc, #620]	; (1b89c <xQueueGenericSend+0x370>)
   1b630:	4798      	blx	r3
   1b632:	6a3b      	ldr	r3, [r7, #32]
   1b634:	0018      	movs	r0, r3
   1b636:	4b96      	ldr	r3, [pc, #600]	; (1b890 <xQueueGenericSend+0x364>)
   1b638:	4798      	blx	r3
   1b63a:	0003      	movs	r3, r0
   1b63c:	001a      	movs	r2, r3
   1b63e:	4b95      	ldr	r3, [pc, #596]	; (1b894 <xQueueGenericSend+0x368>)
   1b640:	5c9c      	ldrb	r4, [r3, r2]
   1b642:	6a3b      	ldr	r3, [r7, #32]
   1b644:	0018      	movs	r0, r3
   1b646:	4b94      	ldr	r3, [pc, #592]	; (1b898 <xQueueGenericSend+0x36c>)
   1b648:	4798      	blx	r3
   1b64a:	0003      	movs	r3, r0
   1b64c:	b2dd      	uxtb	r5, r3
   1b64e:	6a3b      	ldr	r3, [r7, #32]
   1b650:	0018      	movs	r0, r3
   1b652:	4b8f      	ldr	r3, [pc, #572]	; (1b890 <xQueueGenericSend+0x364>)
   1b654:	4798      	blx	r3
   1b656:	0003      	movs	r3, r0
   1b658:	001a      	movs	r2, r3
   1b65a:	4b8e      	ldr	r3, [pc, #568]	; (1b894 <xQueueGenericSend+0x368>)
   1b65c:	5c9b      	ldrb	r3, [r3, r2]
   1b65e:	2b02      	cmp	r3, #2
   1b660:	d005      	beq.n	1b66e <xQueueGenericSend+0x142>
   1b662:	6a3b      	ldr	r3, [r7, #32]
   1b664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1b666:	b2db      	uxtb	r3, r3
   1b668:	3301      	adds	r3, #1
   1b66a:	b2db      	uxtb	r3, r3
   1b66c:	e000      	b.n	1b670 <xQueueGenericSend+0x144>
   1b66e:	2300      	movs	r3, #0
   1b670:	001a      	movs	r2, r3
   1b672:	0029      	movs	r1, r5
   1b674:	0020      	movs	r0, r4
   1b676:	4b8a      	ldr	r3, [pc, #552]	; (1b8a0 <xQueueGenericSend+0x374>)
   1b678:	4798      	blx	r3
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1b67a:	683a      	ldr	r2, [r7, #0]
   1b67c:	68b9      	ldr	r1, [r7, #8]
   1b67e:	6a3b      	ldr	r3, [r7, #32]
   1b680:	0018      	movs	r0, r3
   1b682:	4b88      	ldr	r3, [pc, #544]	; (1b8a4 <xQueueGenericSend+0x378>)
   1b684:	4798      	blx	r3
   1b686:	0003      	movs	r3, r0
   1b688:	61fb      	str	r3, [r7, #28]

				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1b68a:	6a3b      	ldr	r3, [r7, #32]
   1b68c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1b68e:	2b00      	cmp	r3, #0
   1b690:	d00a      	beq.n	1b6a8 <xQueueGenericSend+0x17c>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1b692:	683a      	ldr	r2, [r7, #0]
   1b694:	6a3b      	ldr	r3, [r7, #32]
   1b696:	0011      	movs	r1, r2
   1b698:	0018      	movs	r0, r3
   1b69a:	4b83      	ldr	r3, [pc, #524]	; (1b8a8 <xQueueGenericSend+0x37c>)
   1b69c:	4798      	blx	r3
   1b69e:	1e03      	subs	r3, r0, #0
   1b6a0:	d015      	beq.n	1b6ce <xQueueGenericSend+0x1a2>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock. A context switch is required. */
							queueYIELD_IF_USING_PREEMPTION();
   1b6a2:	4b82      	ldr	r3, [pc, #520]	; (1b8ac <xQueueGenericSend+0x380>)
   1b6a4:	4798      	blx	r3
   1b6a6:	e012      	b.n	1b6ce <xQueueGenericSend+0x1a2>
					}
					else
					{
						/* If there was a task waiting for data to arrive on the
						queue then unblock it now. */
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1b6a8:	6a3b      	ldr	r3, [r7, #32]
   1b6aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1b6ac:	2b00      	cmp	r3, #0
   1b6ae:	d009      	beq.n	1b6c4 <xQueueGenericSend+0x198>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1b6b0:	6a3b      	ldr	r3, [r7, #32]
   1b6b2:	3324      	adds	r3, #36	; 0x24
   1b6b4:	0018      	movs	r0, r3
   1b6b6:	4b7e      	ldr	r3, [pc, #504]	; (1b8b0 <xQueueGenericSend+0x384>)
   1b6b8:	4798      	blx	r3
   1b6ba:	1e03      	subs	r3, r0, #0
   1b6bc:	d007      	beq.n	1b6ce <xQueueGenericSend+0x1a2>
							{
								/* The unblocked task has a priority higher than
								our own so yield immediately.  Yes it is ok to
								do this from within the critical section - the
								kernel takes care of that. */
								queueYIELD_IF_USING_PREEMPTION();
   1b6be:	4b7b      	ldr	r3, [pc, #492]	; (1b8ac <xQueueGenericSend+0x380>)
   1b6c0:	4798      	blx	r3
   1b6c2:	e004      	b.n	1b6ce <xQueueGenericSend+0x1a2>
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
						}
						else if( xYieldRequired != pdFALSE )
   1b6c4:	69fb      	ldr	r3, [r7, #28]
   1b6c6:	2b00      	cmp	r3, #0
   1b6c8:	d001      	beq.n	1b6ce <xQueueGenericSend+0x1a2>
						{
							/* This path is a special case that will only get
							executed if the task was holding multiple mutexes
							and the mutexes were given back in an order that is
							different to that in which they were taken. */
							queueYIELD_IF_USING_PREEMPTION();
   1b6ca:	4b78      	ldr	r3, [pc, #480]	; (1b8ac <xQueueGenericSend+0x380>)
   1b6cc:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
   1b6ce:	4b79      	ldr	r3, [pc, #484]	; (1b8b4 <xQueueGenericSend+0x388>)
   1b6d0:	4798      	blx	r3
				return pdPASS;
   1b6d2:	2301      	movs	r3, #1
   1b6d4:	e142      	b.n	1b95c <xQueueGenericSend+0x430>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1b6d6:	687b      	ldr	r3, [r7, #4]
   1b6d8:	2b00      	cmp	r3, #0
   1b6da:	d140      	bne.n	1b75e <xQueueGenericSend+0x232>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1b6dc:	4b75      	ldr	r3, [pc, #468]	; (1b8b4 <xQueueGenericSend+0x388>)
   1b6de:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
   1b6e0:	4b67      	ldr	r3, [pc, #412]	; (1b880 <xQueueGenericSend+0x354>)
   1b6e2:	4798      	blx	r3
   1b6e4:	0003      	movs	r3, r0
   1b6e6:	0018      	movs	r0, r3
   1b6e8:	4b66      	ldr	r3, [pc, #408]	; (1b884 <xQueueGenericSend+0x358>)
   1b6ea:	4798      	blx	r3
   1b6ec:	0003      	movs	r3, r0
   1b6ee:	001a      	movs	r2, r3
   1b6f0:	4b65      	ldr	r3, [pc, #404]	; (1b888 <xQueueGenericSend+0x35c>)
   1b6f2:	881b      	ldrh	r3, [r3, #0]
   1b6f4:	4013      	ands	r3, r2
   1b6f6:	b29b      	uxth	r3, r3
   1b6f8:	2b00      	cmp	r3, #0
   1b6fa:	d02e      	beq.n	1b75a <xQueueGenericSend+0x22e>
   1b6fc:	6a3b      	ldr	r3, [r7, #32]
   1b6fe:	0018      	movs	r0, r3
   1b700:	4b62      	ldr	r3, [pc, #392]	; (1b88c <xQueueGenericSend+0x360>)
   1b702:	4798      	blx	r3
   1b704:	0003      	movs	r3, r0
   1b706:	001a      	movs	r2, r3
   1b708:	4b5f      	ldr	r3, [pc, #380]	; (1b888 <xQueueGenericSend+0x35c>)
   1b70a:	881b      	ldrh	r3, [r3, #0]
   1b70c:	4013      	ands	r3, r2
   1b70e:	b29b      	uxth	r3, r3
   1b710:	2b00      	cmp	r3, #0
   1b712:	d022      	beq.n	1b75a <xQueueGenericSend+0x22e>
   1b714:	683b      	ldr	r3, [r7, #0]
   1b716:	2b00      	cmp	r3, #0
   1b718:	d10b      	bne.n	1b732 <xQueueGenericSend+0x206>
   1b71a:	6a3b      	ldr	r3, [r7, #32]
   1b71c:	0018      	movs	r0, r3
   1b71e:	4b5c      	ldr	r3, [pc, #368]	; (1b890 <xQueueGenericSend+0x364>)
   1b720:	4798      	blx	r3
   1b722:	0003      	movs	r3, r0
   1b724:	001a      	movs	r2, r3
   1b726:	4b5b      	ldr	r3, [pc, #364]	; (1b894 <xQueueGenericSend+0x368>)
   1b728:	5c9b      	ldrb	r3, [r3, r2]
   1b72a:	3348      	adds	r3, #72	; 0x48
   1b72c:	b2db      	uxtb	r3, r3
   1b72e:	001d      	movs	r5, r3
   1b730:	e000      	b.n	1b734 <xQueueGenericSend+0x208>
   1b732:	254d      	movs	r5, #77	; 0x4d
   1b734:	6a3b      	ldr	r3, [r7, #32]
   1b736:	0018      	movs	r0, r3
   1b738:	4b55      	ldr	r3, [pc, #340]	; (1b890 <xQueueGenericSend+0x364>)
   1b73a:	4798      	blx	r3
   1b73c:	0003      	movs	r3, r0
   1b73e:	001a      	movs	r2, r3
   1b740:	4b54      	ldr	r3, [pc, #336]	; (1b894 <xQueueGenericSend+0x368>)
   1b742:	5c9c      	ldrb	r4, [r3, r2]
   1b744:	6a3b      	ldr	r3, [r7, #32]
   1b746:	0018      	movs	r0, r3
   1b748:	4b53      	ldr	r3, [pc, #332]	; (1b898 <xQueueGenericSend+0x36c>)
   1b74a:	4798      	blx	r3
   1b74c:	0003      	movs	r3, r0
   1b74e:	b2db      	uxtb	r3, r3
   1b750:	001a      	movs	r2, r3
   1b752:	0021      	movs	r1, r4
   1b754:	0028      	movs	r0, r5
   1b756:	4b51      	ldr	r3, [pc, #324]	; (1b89c <xQueueGenericSend+0x370>)
   1b758:	4798      	blx	r3
					return errQUEUE_FULL;
   1b75a:	2300      	movs	r3, #0
   1b75c:	e0fe      	b.n	1b95c <xQueueGenericSend+0x430>
				}
				else if( xEntryTimeSet == pdFALSE )
   1b75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1b760:	2b00      	cmp	r3, #0
   1b762:	d106      	bne.n	1b772 <xQueueGenericSend+0x246>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1b764:	2314      	movs	r3, #20
   1b766:	18fb      	adds	r3, r7, r3
   1b768:	0018      	movs	r0, r3
   1b76a:	4b53      	ldr	r3, [pc, #332]	; (1b8b8 <xQueueGenericSend+0x38c>)
   1b76c:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1b76e:	2301      	movs	r3, #1
   1b770:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1b772:	4b50      	ldr	r3, [pc, #320]	; (1b8b4 <xQueueGenericSend+0x388>)
   1b774:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1b776:	4b51      	ldr	r3, [pc, #324]	; (1b8bc <xQueueGenericSend+0x390>)
   1b778:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1b77a:	4b40      	ldr	r3, [pc, #256]	; (1b87c <xQueueGenericSend+0x350>)
   1b77c:	4798      	blx	r3
   1b77e:	6a3b      	ldr	r3, [r7, #32]
   1b780:	2244      	movs	r2, #68	; 0x44
   1b782:	5c9b      	ldrb	r3, [r3, r2]
   1b784:	b25b      	sxtb	r3, r3
   1b786:	3301      	adds	r3, #1
   1b788:	d103      	bne.n	1b792 <xQueueGenericSend+0x266>
   1b78a:	6a3b      	ldr	r3, [r7, #32]
   1b78c:	2244      	movs	r2, #68	; 0x44
   1b78e:	2100      	movs	r1, #0
   1b790:	5499      	strb	r1, [r3, r2]
   1b792:	6a3b      	ldr	r3, [r7, #32]
   1b794:	2245      	movs	r2, #69	; 0x45
   1b796:	5c9b      	ldrb	r3, [r3, r2]
   1b798:	b25b      	sxtb	r3, r3
   1b79a:	3301      	adds	r3, #1
   1b79c:	d103      	bne.n	1b7a6 <xQueueGenericSend+0x27a>
   1b79e:	6a3b      	ldr	r3, [r7, #32]
   1b7a0:	2245      	movs	r2, #69	; 0x45
   1b7a2:	2100      	movs	r1, #0
   1b7a4:	5499      	strb	r1, [r3, r2]
   1b7a6:	4b43      	ldr	r3, [pc, #268]	; (1b8b4 <xQueueGenericSend+0x388>)
   1b7a8:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1b7aa:	1d3a      	adds	r2, r7, #4
   1b7ac:	2314      	movs	r3, #20
   1b7ae:	18fb      	adds	r3, r7, r3
   1b7b0:	0011      	movs	r1, r2
   1b7b2:	0018      	movs	r0, r3
   1b7b4:	4b42      	ldr	r3, [pc, #264]	; (1b8c0 <xQueueGenericSend+0x394>)
   1b7b6:	4798      	blx	r3
   1b7b8:	1e03      	subs	r3, r0, #0
   1b7ba:	d000      	beq.n	1b7be <xQueueGenericSend+0x292>
   1b7bc:	e08a      	b.n	1b8d4 <xQueueGenericSend+0x3a8>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   1b7be:	6a3b      	ldr	r3, [r7, #32]
   1b7c0:	0018      	movs	r0, r3
   1b7c2:	4b40      	ldr	r3, [pc, #256]	; (1b8c4 <xQueueGenericSend+0x398>)
   1b7c4:	4798      	blx	r3
   1b7c6:	1e03      	subs	r3, r0, #0
   1b7c8:	d04f      	beq.n	1b86a <xQueueGenericSend+0x33e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
   1b7ca:	4b2d      	ldr	r3, [pc, #180]	; (1b880 <xQueueGenericSend+0x354>)
   1b7cc:	4798      	blx	r3
   1b7ce:	0003      	movs	r3, r0
   1b7d0:	0018      	movs	r0, r3
   1b7d2:	4b2c      	ldr	r3, [pc, #176]	; (1b884 <xQueueGenericSend+0x358>)
   1b7d4:	4798      	blx	r3
   1b7d6:	0003      	movs	r3, r0
   1b7d8:	001a      	movs	r2, r3
   1b7da:	4b2b      	ldr	r3, [pc, #172]	; (1b888 <xQueueGenericSend+0x35c>)
   1b7dc:	881b      	ldrh	r3, [r3, #0]
   1b7de:	4013      	ands	r3, r2
   1b7e0:	b29b      	uxth	r3, r3
   1b7e2:	2b00      	cmp	r3, #0
   1b7e4:	d02e      	beq.n	1b844 <xQueueGenericSend+0x318>
   1b7e6:	6a3b      	ldr	r3, [r7, #32]
   1b7e8:	0018      	movs	r0, r3
   1b7ea:	4b28      	ldr	r3, [pc, #160]	; (1b88c <xQueueGenericSend+0x360>)
   1b7ec:	4798      	blx	r3
   1b7ee:	0003      	movs	r3, r0
   1b7f0:	001a      	movs	r2, r3
   1b7f2:	4b25      	ldr	r3, [pc, #148]	; (1b888 <xQueueGenericSend+0x35c>)
   1b7f4:	881b      	ldrh	r3, [r3, #0]
   1b7f6:	4013      	ands	r3, r2
   1b7f8:	b29b      	uxth	r3, r3
   1b7fa:	2b00      	cmp	r3, #0
   1b7fc:	d022      	beq.n	1b844 <xQueueGenericSend+0x318>
   1b7fe:	683b      	ldr	r3, [r7, #0]
   1b800:	2b00      	cmp	r3, #0
   1b802:	d10b      	bne.n	1b81c <xQueueGenericSend+0x2f0>
   1b804:	6a3b      	ldr	r3, [r7, #32]
   1b806:	0018      	movs	r0, r3
   1b808:	4b21      	ldr	r3, [pc, #132]	; (1b890 <xQueueGenericSend+0x364>)
   1b80a:	4798      	blx	r3
   1b80c:	0003      	movs	r3, r0
   1b80e:	001a      	movs	r2, r3
   1b810:	4b20      	ldr	r3, [pc, #128]	; (1b894 <xQueueGenericSend+0x368>)
   1b812:	5c9b      	ldrb	r3, [r3, r2]
   1b814:	3370      	adds	r3, #112	; 0x70
   1b816:	b2db      	uxtb	r3, r3
   1b818:	001d      	movs	r5, r3
   1b81a:	e000      	b.n	1b81e <xQueueGenericSend+0x2f2>
   1b81c:	2575      	movs	r5, #117	; 0x75
   1b81e:	6a3b      	ldr	r3, [r7, #32]
   1b820:	0018      	movs	r0, r3
   1b822:	4b1b      	ldr	r3, [pc, #108]	; (1b890 <xQueueGenericSend+0x364>)
   1b824:	4798      	blx	r3
   1b826:	0003      	movs	r3, r0
   1b828:	001a      	movs	r2, r3
   1b82a:	4b1a      	ldr	r3, [pc, #104]	; (1b894 <xQueueGenericSend+0x368>)
   1b82c:	5c9c      	ldrb	r4, [r3, r2]
   1b82e:	6a3b      	ldr	r3, [r7, #32]
   1b830:	0018      	movs	r0, r3
   1b832:	4b19      	ldr	r3, [pc, #100]	; (1b898 <xQueueGenericSend+0x36c>)
   1b834:	4798      	blx	r3
   1b836:	0003      	movs	r3, r0
   1b838:	b2db      	uxtb	r3, r3
   1b83a:	001a      	movs	r2, r3
   1b83c:	0021      	movs	r1, r4
   1b83e:	0028      	movs	r0, r5
   1b840:	4b16      	ldr	r3, [pc, #88]	; (1b89c <xQueueGenericSend+0x370>)
   1b842:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   1b844:	6a3b      	ldr	r3, [r7, #32]
   1b846:	3310      	adds	r3, #16
   1b848:	687a      	ldr	r2, [r7, #4]
   1b84a:	0011      	movs	r1, r2
   1b84c:	0018      	movs	r0, r3
   1b84e:	4b1e      	ldr	r3, [pc, #120]	; (1b8c8 <xQueueGenericSend+0x39c>)
   1b850:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   1b852:	6a3b      	ldr	r3, [r7, #32]
   1b854:	0018      	movs	r0, r3
   1b856:	4b1d      	ldr	r3, [pc, #116]	; (1b8cc <xQueueGenericSend+0x3a0>)
   1b858:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   1b85a:	4b1d      	ldr	r3, [pc, #116]	; (1b8d0 <xQueueGenericSend+0x3a4>)
   1b85c:	4798      	blx	r3
   1b85e:	1e03      	subs	r3, r0, #0
   1b860:	d000      	beq.n	1b864 <xQueueGenericSend+0x338>
   1b862:	e69d      	b.n	1b5a0 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
   1b864:	4b11      	ldr	r3, [pc, #68]	; (1b8ac <xQueueGenericSend+0x380>)
   1b866:	4798      	blx	r3
   1b868:	e69a      	b.n	1b5a0 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   1b86a:	6a3b      	ldr	r3, [r7, #32]
   1b86c:	0018      	movs	r0, r3
   1b86e:	4b17      	ldr	r3, [pc, #92]	; (1b8cc <xQueueGenericSend+0x3a0>)
   1b870:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1b872:	4b17      	ldr	r3, [pc, #92]	; (1b8d0 <xQueueGenericSend+0x3a4>)
   1b874:	4798      	blx	r3
   1b876:	e693      	b.n	1b5a0 <xQueueGenericSend+0x74>
   1b878:	0001dcb9 	.word	0x0001dcb9
   1b87c:	0001af99 	.word	0x0001af99
   1b880:	00019231 	.word	0x00019231
   1b884:	00018f95 	.word	0x00018f95
   1b888:	20000110 	.word	0x20000110
   1b88c:	00019055 	.word	0x00019055
   1b890:	00018f55 	.word	0x00018f55
   1b894:	20000104 	.word	0x20000104
   1b898:	00019035 	.word	0x00019035
   1b89c:	0001998d 	.word	0x0001998d
   1b8a0:	00019fe9 	.word	0x00019fe9
   1b8a4:	0001c765 	.word	0x0001c765
   1b8a8:	0001ca69 	.word	0x0001ca69
   1b8ac:	0001af81 	.word	0x0001af81
   1b8b0:	0001d829 	.word	0x0001d829
   1b8b4:	0001afbd 	.word	0x0001afbd
   1b8b8:	0001d969 	.word	0x0001d969
   1b8bc:	0001d251 	.word	0x0001d251
   1b8c0:	0001d991 	.word	0x0001d991
   1b8c4:	0001c9b9 	.word	0x0001c9b9
   1b8c8:	0001d705 	.word	0x0001d705
   1b8cc:	0001c895 	.word	0x0001c895
   1b8d0:	0001d269 	.word	0x0001d269
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   1b8d4:	6a3b      	ldr	r3, [r7, #32]
   1b8d6:	0018      	movs	r0, r3
   1b8d8:	4b22      	ldr	r3, [pc, #136]	; (1b964 <xQueueGenericSend+0x438>)
   1b8da:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1b8dc:	4b22      	ldr	r3, [pc, #136]	; (1b968 <xQueueGenericSend+0x43c>)
   1b8de:	4798      	blx	r3

			traceQUEUE_SEND_FAILED( pxQueue );
   1b8e0:	4b22      	ldr	r3, [pc, #136]	; (1b96c <xQueueGenericSend+0x440>)
   1b8e2:	4798      	blx	r3
   1b8e4:	0003      	movs	r3, r0
   1b8e6:	0018      	movs	r0, r3
   1b8e8:	4b21      	ldr	r3, [pc, #132]	; (1b970 <xQueueGenericSend+0x444>)
   1b8ea:	4798      	blx	r3
   1b8ec:	0003      	movs	r3, r0
   1b8ee:	001a      	movs	r2, r3
   1b8f0:	4b20      	ldr	r3, [pc, #128]	; (1b974 <xQueueGenericSend+0x448>)
   1b8f2:	881b      	ldrh	r3, [r3, #0]
   1b8f4:	4013      	ands	r3, r2
   1b8f6:	b29b      	uxth	r3, r3
   1b8f8:	2b00      	cmp	r3, #0
   1b8fa:	d02e      	beq.n	1b95a <xQueueGenericSend+0x42e>
   1b8fc:	6a3b      	ldr	r3, [r7, #32]
   1b8fe:	0018      	movs	r0, r3
   1b900:	4b1d      	ldr	r3, [pc, #116]	; (1b978 <xQueueGenericSend+0x44c>)
   1b902:	4798      	blx	r3
   1b904:	0003      	movs	r3, r0
   1b906:	001a      	movs	r2, r3
   1b908:	4b1a      	ldr	r3, [pc, #104]	; (1b974 <xQueueGenericSend+0x448>)
   1b90a:	881b      	ldrh	r3, [r3, #0]
   1b90c:	4013      	ands	r3, r2
   1b90e:	b29b      	uxth	r3, r3
   1b910:	2b00      	cmp	r3, #0
   1b912:	d022      	beq.n	1b95a <xQueueGenericSend+0x42e>
   1b914:	683b      	ldr	r3, [r7, #0]
   1b916:	2b00      	cmp	r3, #0
   1b918:	d10b      	bne.n	1b932 <xQueueGenericSend+0x406>
   1b91a:	6a3b      	ldr	r3, [r7, #32]
   1b91c:	0018      	movs	r0, r3
   1b91e:	4b17      	ldr	r3, [pc, #92]	; (1b97c <xQueueGenericSend+0x450>)
   1b920:	4798      	blx	r3
   1b922:	0003      	movs	r3, r0
   1b924:	001a      	movs	r2, r3
   1b926:	4b16      	ldr	r3, [pc, #88]	; (1b980 <xQueueGenericSend+0x454>)
   1b928:	5c9b      	ldrb	r3, [r3, r2]
   1b92a:	3348      	adds	r3, #72	; 0x48
   1b92c:	b2db      	uxtb	r3, r3
   1b92e:	001d      	movs	r5, r3
   1b930:	e000      	b.n	1b934 <xQueueGenericSend+0x408>
   1b932:	254d      	movs	r5, #77	; 0x4d
   1b934:	6a3b      	ldr	r3, [r7, #32]
   1b936:	0018      	movs	r0, r3
   1b938:	4b10      	ldr	r3, [pc, #64]	; (1b97c <xQueueGenericSend+0x450>)
   1b93a:	4798      	blx	r3
   1b93c:	0003      	movs	r3, r0
   1b93e:	001a      	movs	r2, r3
   1b940:	4b0f      	ldr	r3, [pc, #60]	; (1b980 <xQueueGenericSend+0x454>)
   1b942:	5c9c      	ldrb	r4, [r3, r2]
   1b944:	6a3b      	ldr	r3, [r7, #32]
   1b946:	0018      	movs	r0, r3
   1b948:	4b0e      	ldr	r3, [pc, #56]	; (1b984 <xQueueGenericSend+0x458>)
   1b94a:	4798      	blx	r3
   1b94c:	0003      	movs	r3, r0
   1b94e:	b2db      	uxtb	r3, r3
   1b950:	001a      	movs	r2, r3
   1b952:	0021      	movs	r1, r4
   1b954:	0028      	movs	r0, r5
   1b956:	4b0c      	ldr	r3, [pc, #48]	; (1b988 <xQueueGenericSend+0x45c>)
   1b958:	4798      	blx	r3
			return errQUEUE_FULL;
   1b95a:	2300      	movs	r3, #0
		}
	}
}
   1b95c:	0018      	movs	r0, r3
   1b95e:	46bd      	mov	sp, r7
   1b960:	b00a      	add	sp, #40	; 0x28
   1b962:	bdb0      	pop	{r4, r5, r7, pc}
   1b964:	0001c895 	.word	0x0001c895
   1b968:	0001d269 	.word	0x0001d269
   1b96c:	00019231 	.word	0x00019231
   1b970:	00018f95 	.word	0x00018f95
   1b974:	20000110 	.word	0x20000110
   1b978:	00019055 	.word	0x00019055
   1b97c:	00018f55 	.word	0x00018f55
   1b980:	20000104 	.word	0x20000104
   1b984:	00019035 	.word	0x00019035
   1b988:	0001998d 	.word	0x0001998d

0001b98c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
   1b98c:	b5b0      	push	{r4, r5, r7, lr}
   1b98e:	b088      	sub	sp, #32
   1b990:	af00      	add	r7, sp, #0
   1b992:	60f8      	str	r0, [r7, #12]
   1b994:	60b9      	str	r1, [r7, #8]
   1b996:	607a      	str	r2, [r7, #4]
   1b998:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1b99a:	68fb      	ldr	r3, [r7, #12]
   1b99c:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
   1b99e:	69bb      	ldr	r3, [r7, #24]
   1b9a0:	2b00      	cmp	r3, #0
   1b9a2:	d101      	bne.n	1b9a8 <xQueueGenericSendFromISR+0x1c>
   1b9a4:	b672      	cpsid	i
   1b9a6:	e7fe      	b.n	1b9a6 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1b9a8:	68bb      	ldr	r3, [r7, #8]
   1b9aa:	2b00      	cmp	r3, #0
   1b9ac:	d103      	bne.n	1b9b6 <xQueueGenericSendFromISR+0x2a>
   1b9ae:	69bb      	ldr	r3, [r7, #24]
   1b9b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1b9b2:	2b00      	cmp	r3, #0
   1b9b4:	d101      	bne.n	1b9ba <xQueueGenericSendFromISR+0x2e>
   1b9b6:	2301      	movs	r3, #1
   1b9b8:	e000      	b.n	1b9bc <xQueueGenericSendFromISR+0x30>
   1b9ba:	2300      	movs	r3, #0
   1b9bc:	2b00      	cmp	r3, #0
   1b9be:	d101      	bne.n	1b9c4 <xQueueGenericSendFromISR+0x38>
   1b9c0:	b672      	cpsid	i
   1b9c2:	e7fe      	b.n	1b9c2 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
   1b9c4:	683b      	ldr	r3, [r7, #0]
   1b9c6:	2b02      	cmp	r3, #2
   1b9c8:	d103      	bne.n	1b9d2 <xQueueGenericSendFromISR+0x46>
   1b9ca:	69bb      	ldr	r3, [r7, #24]
   1b9cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b9ce:	2b01      	cmp	r3, #1
   1b9d0:	d101      	bne.n	1b9d6 <xQueueGenericSendFromISR+0x4a>
   1b9d2:	2301      	movs	r3, #1
   1b9d4:	e000      	b.n	1b9d8 <xQueueGenericSendFromISR+0x4c>
   1b9d6:	2300      	movs	r3, #0
   1b9d8:	2b00      	cmp	r3, #0
   1b9da:	d101      	bne.n	1b9e0 <xQueueGenericSendFromISR+0x54>
   1b9dc:	b672      	cpsid	i
   1b9de:	e7fe      	b.n	1b9de <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1b9e0:	4b68      	ldr	r3, [pc, #416]	; (1bb84 <xQueueGenericSendFromISR+0x1f8>)
   1b9e2:	4798      	blx	r3
   1b9e4:	0003      	movs	r3, r0
   1b9e6:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
   1b9e8:	69bb      	ldr	r3, [r7, #24]
   1b9ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1b9ec:	69bb      	ldr	r3, [r7, #24]
   1b9ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1b9f0:	429a      	cmp	r2, r3
   1b9f2:	d303      	bcc.n	1b9fc <xQueueGenericSendFromISR+0x70>
   1b9f4:	683b      	ldr	r3, [r7, #0]
   1b9f6:	2b02      	cmp	r3, #2
   1b9f8:	d000      	beq.n	1b9fc <xQueueGenericSendFromISR+0x70>
   1b9fa:	e088      	b.n	1bb0e <xQueueGenericSendFromISR+0x182>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1b9fc:	2313      	movs	r3, #19
   1b9fe:	18fb      	adds	r3, r7, r3
   1ba00:	69ba      	ldr	r2, [r7, #24]
   1ba02:	2145      	movs	r1, #69	; 0x45
   1ba04:	5c52      	ldrb	r2, [r2, r1]
   1ba06:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1ba08:	69bb      	ldr	r3, [r7, #24]
   1ba0a:	0018      	movs	r0, r3
   1ba0c:	4b5e      	ldr	r3, [pc, #376]	; (1bb88 <xQueueGenericSendFromISR+0x1fc>)
   1ba0e:	4798      	blx	r3
   1ba10:	0003      	movs	r3, r0
   1ba12:	001a      	movs	r2, r3
   1ba14:	4b5d      	ldr	r3, [pc, #372]	; (1bb8c <xQueueGenericSendFromISR+0x200>)
   1ba16:	881b      	ldrh	r3, [r3, #0]
   1ba18:	4013      	ands	r3, r2
   1ba1a:	b29b      	uxth	r3, r3
   1ba1c:	2b00      	cmp	r3, #0
   1ba1e:	d022      	beq.n	1ba66 <xQueueGenericSendFromISR+0xda>
   1ba20:	683b      	ldr	r3, [r7, #0]
   1ba22:	2b00      	cmp	r3, #0
   1ba24:	d10b      	bne.n	1ba3e <xQueueGenericSendFromISR+0xb2>
   1ba26:	69bb      	ldr	r3, [r7, #24]
   1ba28:	0018      	movs	r0, r3
   1ba2a:	4b59      	ldr	r3, [pc, #356]	; (1bb90 <xQueueGenericSendFromISR+0x204>)
   1ba2c:	4798      	blx	r3
   1ba2e:	0003      	movs	r3, r0
   1ba30:	001a      	movs	r2, r3
   1ba32:	4b58      	ldr	r3, [pc, #352]	; (1bb94 <xQueueGenericSendFromISR+0x208>)
   1ba34:	5c9b      	ldrb	r3, [r3, r2]
   1ba36:	3330      	adds	r3, #48	; 0x30
   1ba38:	b2db      	uxtb	r3, r3
   1ba3a:	001d      	movs	r5, r3
   1ba3c:	e000      	b.n	1ba40 <xQueueGenericSendFromISR+0xb4>
   1ba3e:	2535      	movs	r5, #53	; 0x35
   1ba40:	69bb      	ldr	r3, [r7, #24]
   1ba42:	0018      	movs	r0, r3
   1ba44:	4b52      	ldr	r3, [pc, #328]	; (1bb90 <xQueueGenericSendFromISR+0x204>)
   1ba46:	4798      	blx	r3
   1ba48:	0003      	movs	r3, r0
   1ba4a:	001a      	movs	r2, r3
   1ba4c:	4b51      	ldr	r3, [pc, #324]	; (1bb94 <xQueueGenericSendFromISR+0x208>)
   1ba4e:	5c9c      	ldrb	r4, [r3, r2]
   1ba50:	69bb      	ldr	r3, [r7, #24]
   1ba52:	0018      	movs	r0, r3
   1ba54:	4b50      	ldr	r3, [pc, #320]	; (1bb98 <xQueueGenericSendFromISR+0x20c>)
   1ba56:	4798      	blx	r3
   1ba58:	0003      	movs	r3, r0
   1ba5a:	b2db      	uxtb	r3, r3
   1ba5c:	001a      	movs	r2, r3
   1ba5e:	0021      	movs	r1, r4
   1ba60:	0028      	movs	r0, r5
   1ba62:	4b4e      	ldr	r3, [pc, #312]	; (1bb9c <xQueueGenericSendFromISR+0x210>)
   1ba64:	4798      	blx	r3
   1ba66:	69bb      	ldr	r3, [r7, #24]
   1ba68:	0018      	movs	r0, r3
   1ba6a:	4b49      	ldr	r3, [pc, #292]	; (1bb90 <xQueueGenericSendFromISR+0x204>)
   1ba6c:	4798      	blx	r3
   1ba6e:	0003      	movs	r3, r0
   1ba70:	001a      	movs	r2, r3
   1ba72:	4b48      	ldr	r3, [pc, #288]	; (1bb94 <xQueueGenericSendFromISR+0x208>)
   1ba74:	5c9c      	ldrb	r4, [r3, r2]
   1ba76:	69bb      	ldr	r3, [r7, #24]
   1ba78:	0018      	movs	r0, r3
   1ba7a:	4b47      	ldr	r3, [pc, #284]	; (1bb98 <xQueueGenericSendFromISR+0x20c>)
   1ba7c:	4798      	blx	r3
   1ba7e:	0003      	movs	r3, r0
   1ba80:	b2d9      	uxtb	r1, r3
   1ba82:	69bb      	ldr	r3, [r7, #24]
   1ba84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ba86:	b2db      	uxtb	r3, r3
   1ba88:	3301      	adds	r3, #1
   1ba8a:	b2db      	uxtb	r3, r3
   1ba8c:	001a      	movs	r2, r3
   1ba8e:	0020      	movs	r0, r4
   1ba90:	4b43      	ldr	r3, [pc, #268]	; (1bba0 <xQueueGenericSendFromISR+0x214>)
   1ba92:	4798      	blx	r3
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   1ba94:	683a      	ldr	r2, [r7, #0]
   1ba96:	68b9      	ldr	r1, [r7, #8]
   1ba98:	69bb      	ldr	r3, [r7, #24]
   1ba9a:	0018      	movs	r0, r3
   1ba9c:	4b41      	ldr	r3, [pc, #260]	; (1bba4 <xQueueGenericSendFromISR+0x218>)
   1ba9e:	4798      	blx	r3

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1baa0:	2313      	movs	r3, #19
   1baa2:	18fb      	adds	r3, r7, r3
   1baa4:	781b      	ldrb	r3, [r3, #0]
   1baa6:	b25b      	sxtb	r3, r3
   1baa8:	3301      	adds	r3, #1
   1baaa:	d124      	bne.n	1baf6 <xQueueGenericSendFromISR+0x16a>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1baac:	69bb      	ldr	r3, [r7, #24]
   1baae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1bab0:	2b00      	cmp	r3, #0
   1bab2:	d00e      	beq.n	1bad2 <xQueueGenericSendFromISR+0x146>
					{
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
   1bab4:	683a      	ldr	r2, [r7, #0]
   1bab6:	69bb      	ldr	r3, [r7, #24]
   1bab8:	0011      	movs	r1, r2
   1baba:	0018      	movs	r0, r3
   1babc:	4b3a      	ldr	r3, [pc, #232]	; (1bba8 <xQueueGenericSendFromISR+0x21c>)
   1babe:	4798      	blx	r3
   1bac0:	1e03      	subs	r3, r0, #0
   1bac2:	d021      	beq.n	1bb08 <xQueueGenericSendFromISR+0x17c>
						{
							/* The queue is a member of a queue set, and posting
							to the queue set caused a higher priority task to
							unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1bac4:	687b      	ldr	r3, [r7, #4]
   1bac6:	2b00      	cmp	r3, #0
   1bac8:	d01e      	beq.n	1bb08 <xQueueGenericSendFromISR+0x17c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1baca:	687b      	ldr	r3, [r7, #4]
   1bacc:	2201      	movs	r2, #1
   1bace:	601a      	str	r2, [r3, #0]
   1bad0:	e01a      	b.n	1bb08 <xQueueGenericSendFromISR+0x17c>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1bad2:	69bb      	ldr	r3, [r7, #24]
   1bad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1bad6:	2b00      	cmp	r3, #0
   1bad8:	d016      	beq.n	1bb08 <xQueueGenericSendFromISR+0x17c>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1bada:	69bb      	ldr	r3, [r7, #24]
   1badc:	3324      	adds	r3, #36	; 0x24
   1bade:	0018      	movs	r0, r3
   1bae0:	4b32      	ldr	r3, [pc, #200]	; (1bbac <xQueueGenericSendFromISR+0x220>)
   1bae2:	4798      	blx	r3
   1bae4:	1e03      	subs	r3, r0, #0
   1bae6:	d00f      	beq.n	1bb08 <xQueueGenericSendFromISR+0x17c>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1bae8:	687b      	ldr	r3, [r7, #4]
   1baea:	2b00      	cmp	r3, #0
   1baec:	d00c      	beq.n	1bb08 <xQueueGenericSendFromISR+0x17c>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1baee:	687b      	ldr	r3, [r7, #4]
   1baf0:	2201      	movs	r2, #1
   1baf2:	601a      	str	r2, [r3, #0]
   1baf4:	e008      	b.n	1bb08 <xQueueGenericSendFromISR+0x17c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1baf6:	2313      	movs	r3, #19
   1baf8:	18fb      	adds	r3, r7, r3
   1bafa:	781b      	ldrb	r3, [r3, #0]
   1bafc:	3301      	adds	r3, #1
   1bafe:	b2db      	uxtb	r3, r3
   1bb00:	b259      	sxtb	r1, r3
   1bb02:	69bb      	ldr	r3, [r7, #24]
   1bb04:	2245      	movs	r2, #69	; 0x45
   1bb06:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1bb08:	2301      	movs	r3, #1
   1bb0a:	61fb      	str	r3, [r7, #28]
		{
   1bb0c:	e030      	b.n	1bb70 <xQueueGenericSendFromISR+0x1e4>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1bb0e:	69bb      	ldr	r3, [r7, #24]
   1bb10:	0018      	movs	r0, r3
   1bb12:	4b1d      	ldr	r3, [pc, #116]	; (1bb88 <xQueueGenericSendFromISR+0x1fc>)
   1bb14:	4798      	blx	r3
   1bb16:	0003      	movs	r3, r0
   1bb18:	001a      	movs	r2, r3
   1bb1a:	4b1c      	ldr	r3, [pc, #112]	; (1bb8c <xQueueGenericSendFromISR+0x200>)
   1bb1c:	881b      	ldrh	r3, [r3, #0]
   1bb1e:	4013      	ands	r3, r2
   1bb20:	b29b      	uxth	r3, r3
   1bb22:	2b00      	cmp	r3, #0
   1bb24:	d022      	beq.n	1bb6c <xQueueGenericSendFromISR+0x1e0>
   1bb26:	683b      	ldr	r3, [r7, #0]
   1bb28:	2b00      	cmp	r3, #0
   1bb2a:	d10b      	bne.n	1bb44 <xQueueGenericSendFromISR+0x1b8>
   1bb2c:	69bb      	ldr	r3, [r7, #24]
   1bb2e:	0018      	movs	r0, r3
   1bb30:	4b17      	ldr	r3, [pc, #92]	; (1bb90 <xQueueGenericSendFromISR+0x204>)
   1bb32:	4798      	blx	r3
   1bb34:	0003      	movs	r3, r0
   1bb36:	001a      	movs	r2, r3
   1bb38:	4b16      	ldr	r3, [pc, #88]	; (1bb94 <xQueueGenericSendFromISR+0x208>)
   1bb3a:	5c9b      	ldrb	r3, [r3, r2]
   1bb3c:	3358      	adds	r3, #88	; 0x58
   1bb3e:	b2db      	uxtb	r3, r3
   1bb40:	001d      	movs	r5, r3
   1bb42:	e000      	b.n	1bb46 <xQueueGenericSendFromISR+0x1ba>
   1bb44:	255d      	movs	r5, #93	; 0x5d
   1bb46:	69bb      	ldr	r3, [r7, #24]
   1bb48:	0018      	movs	r0, r3
   1bb4a:	4b11      	ldr	r3, [pc, #68]	; (1bb90 <xQueueGenericSendFromISR+0x204>)
   1bb4c:	4798      	blx	r3
   1bb4e:	0003      	movs	r3, r0
   1bb50:	001a      	movs	r2, r3
   1bb52:	4b10      	ldr	r3, [pc, #64]	; (1bb94 <xQueueGenericSendFromISR+0x208>)
   1bb54:	5c9c      	ldrb	r4, [r3, r2]
   1bb56:	69bb      	ldr	r3, [r7, #24]
   1bb58:	0018      	movs	r0, r3
   1bb5a:	4b0f      	ldr	r3, [pc, #60]	; (1bb98 <xQueueGenericSendFromISR+0x20c>)
   1bb5c:	4798      	blx	r3
   1bb5e:	0003      	movs	r3, r0
   1bb60:	b2db      	uxtb	r3, r3
   1bb62:	001a      	movs	r2, r3
   1bb64:	0021      	movs	r1, r4
   1bb66:	0028      	movs	r0, r5
   1bb68:	4b0c      	ldr	r3, [pc, #48]	; (1bb9c <xQueueGenericSendFromISR+0x210>)
   1bb6a:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1bb6c:	2300      	movs	r3, #0
   1bb6e:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1bb70:	697b      	ldr	r3, [r7, #20]
   1bb72:	0018      	movs	r0, r3
   1bb74:	4b0e      	ldr	r3, [pc, #56]	; (1bbb0 <xQueueGenericSendFromISR+0x224>)
   1bb76:	4798      	blx	r3

	return xReturn;
   1bb78:	69fb      	ldr	r3, [r7, #28]
}
   1bb7a:	0018      	movs	r0, r3
   1bb7c:	46bd      	mov	sp, r7
   1bb7e:	b008      	add	sp, #32
   1bb80:	bdb0      	pop	{r4, r5, r7, pc}
   1bb82:	46c0      	nop			; (mov r8, r8)
   1bb84:	0001afed 	.word	0x0001afed
   1bb88:	00019055 	.word	0x00019055
   1bb8c:	20000110 	.word	0x20000110
   1bb90:	00018f55 	.word	0x00018f55
   1bb94:	20000104 	.word	0x20000104
   1bb98:	00019035 	.word	0x00019035
   1bb9c:	0001998d 	.word	0x0001998d
   1bba0:	00019fe9 	.word	0x00019fe9
   1bba4:	0001c765 	.word	0x0001c765
   1bba8:	0001ca69 	.word	0x0001ca69
   1bbac:	0001d829 	.word	0x0001d829
   1bbb0:	0001aff9 	.word	0x0001aff9

0001bbb4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
   1bbb4:	b580      	push	{r7, lr}
   1bbb6:	b082      	sub	sp, #8
   1bbb8:	af00      	add	r7, sp, #0
   1bbba:	6078      	str	r0, [r7, #4]
   1bbbc:	6039      	str	r1, [r7, #0]
   1bbbe:	6839      	ldr	r1, [r7, #0]
   1bbc0:	687b      	ldr	r3, [r7, #4]
   1bbc2:	2200      	movs	r2, #0
   1bbc4:	0018      	movs	r0, r3
   1bbc6:	4b03      	ldr	r3, [pc, #12]	; (1bbd4 <xQueueGiveFromISR+0x20>)
   1bbc8:	4798      	blx	r3
   1bbca:	0003      	movs	r3, r0
   1bbcc:	0018      	movs	r0, r3
   1bbce:	46bd      	mov	sp, r7
   1bbd0:	b002      	add	sp, #8
   1bbd2:	bd80      	pop	{r7, pc}
   1bbd4:	0001bbd9 	.word	0x0001bbd9

0001bbd8 <MyWrapper>:
{
   1bbd8:	b5b0      	push	{r4, r5, r7, lr}
   1bbda:	b08a      	sub	sp, #40	; 0x28
   1bbdc:	af00      	add	r7, sp, #0
   1bbde:	60f8      	str	r0, [r7, #12]
   1bbe0:	60b9      	str	r1, [r7, #8]
   1bbe2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1bbe4:	68fb      	ldr	r3, [r7, #12]
   1bbe6:	623b      	str	r3, [r7, #32]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
   1bbe8:	6a3b      	ldr	r3, [r7, #32]
   1bbea:	2b00      	cmp	r3, #0
   1bbec:	d101      	bne.n	1bbf2 <MyWrapper+0x1a>
   1bbee:	b672      	cpsid	i
   1bbf0:	e7fe      	b.n	1bbf0 <MyWrapper+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1bbf2:	6a3b      	ldr	r3, [r7, #32]
   1bbf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1bbf6:	2b00      	cmp	r3, #0
   1bbf8:	d001      	beq.n	1bbfe <MyWrapper+0x26>
   1bbfa:	b672      	cpsid	i
   1bbfc:	e7fe      	b.n	1bbfc <MyWrapper+0x24>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
   1bbfe:	6a3b      	ldr	r3, [r7, #32]
   1bc00:	681b      	ldr	r3, [r3, #0]
   1bc02:	2b00      	cmp	r3, #0
   1bc04:	d103      	bne.n	1bc0e <MyWrapper+0x36>
   1bc06:	6a3b      	ldr	r3, [r7, #32]
   1bc08:	685b      	ldr	r3, [r3, #4]
   1bc0a:	2b00      	cmp	r3, #0
   1bc0c:	d101      	bne.n	1bc12 <MyWrapper+0x3a>
   1bc0e:	2301      	movs	r3, #1
   1bc10:	e000      	b.n	1bc14 <MyWrapper+0x3c>
   1bc12:	2300      	movs	r3, #0
   1bc14:	2b00      	cmp	r3, #0
   1bc16:	d101      	bne.n	1bc1c <MyWrapper+0x44>
   1bc18:	b672      	cpsid	i
   1bc1a:	e7fe      	b.n	1bc1a <MyWrapper+0x42>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   1bc1c:	4b66      	ldr	r3, [pc, #408]	; (1bdb8 <MyWrapper+0x1e0>)
   1bc1e:	4798      	blx	r3
   1bc20:	0003      	movs	r3, r0
   1bc22:	61fb      	str	r3, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1bc24:	6a3b      	ldr	r3, [r7, #32]
   1bc26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bc28:	61bb      	str	r3, [r7, #24]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
   1bc2a:	6a3b      	ldr	r3, [r7, #32]
   1bc2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1bc2e:	69bb      	ldr	r3, [r7, #24]
   1bc30:	429a      	cmp	r2, r3
   1bc32:	d800      	bhi.n	1bc36 <MyWrapper+0x5e>
   1bc34:	e085      	b.n	1bd42 <MyWrapper+0x16a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
   1bc36:	2317      	movs	r3, #23
   1bc38:	18fb      	adds	r3, r7, r3
   1bc3a:	6a3a      	ldr	r2, [r7, #32]
   1bc3c:	2145      	movs	r1, #69	; 0x45
   1bc3e:	5c52      	ldrb	r2, [r2, r1]
   1bc40:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND_FROM_ISR( pxQueue );
   1bc42:	6a3b      	ldr	r3, [r7, #32]
   1bc44:	0018      	movs	r0, r3
   1bc46:	4b5d      	ldr	r3, [pc, #372]	; (1bdbc <MyWrapper+0x1e4>)
   1bc48:	4798      	blx	r3
   1bc4a:	0003      	movs	r3, r0
   1bc4c:	001a      	movs	r2, r3
   1bc4e:	4b5c      	ldr	r3, [pc, #368]	; (1bdc0 <MyWrapper+0x1e8>)
   1bc50:	881b      	ldrh	r3, [r3, #0]
   1bc52:	4013      	ands	r3, r2
   1bc54:	b29b      	uxth	r3, r3
   1bc56:	2b00      	cmp	r3, #0
   1bc58:	d022      	beq.n	1bca0 <MyWrapper+0xc8>
   1bc5a:	687b      	ldr	r3, [r7, #4]
   1bc5c:	2b00      	cmp	r3, #0
   1bc5e:	d10b      	bne.n	1bc78 <MyWrapper+0xa0>
   1bc60:	6a3b      	ldr	r3, [r7, #32]
   1bc62:	0018      	movs	r0, r3
   1bc64:	4b57      	ldr	r3, [pc, #348]	; (1bdc4 <MyWrapper+0x1ec>)
   1bc66:	4798      	blx	r3
   1bc68:	0003      	movs	r3, r0
   1bc6a:	001a      	movs	r2, r3
   1bc6c:	4b56      	ldr	r3, [pc, #344]	; (1bdc8 <MyWrapper+0x1f0>)
   1bc6e:	5c9b      	ldrb	r3, [r3, r2]
   1bc70:	3330      	adds	r3, #48	; 0x30
   1bc72:	b2db      	uxtb	r3, r3
   1bc74:	001d      	movs	r5, r3
   1bc76:	e000      	b.n	1bc7a <MyWrapper+0xa2>
   1bc78:	2535      	movs	r5, #53	; 0x35
   1bc7a:	6a3b      	ldr	r3, [r7, #32]
   1bc7c:	0018      	movs	r0, r3
   1bc7e:	4b51      	ldr	r3, [pc, #324]	; (1bdc4 <MyWrapper+0x1ec>)
   1bc80:	4798      	blx	r3
   1bc82:	0003      	movs	r3, r0
   1bc84:	001a      	movs	r2, r3
   1bc86:	4b50      	ldr	r3, [pc, #320]	; (1bdc8 <MyWrapper+0x1f0>)
   1bc88:	5c9c      	ldrb	r4, [r3, r2]
   1bc8a:	6a3b      	ldr	r3, [r7, #32]
   1bc8c:	0018      	movs	r0, r3
   1bc8e:	4b4f      	ldr	r3, [pc, #316]	; (1bdcc <MyWrapper+0x1f4>)
   1bc90:	4798      	blx	r3
   1bc92:	0003      	movs	r3, r0
   1bc94:	b2db      	uxtb	r3, r3
   1bc96:	001a      	movs	r2, r3
   1bc98:	0021      	movs	r1, r4
   1bc9a:	0028      	movs	r0, r5
   1bc9c:	4b4c      	ldr	r3, [pc, #304]	; (1bdd0 <MyWrapper+0x1f8>)
   1bc9e:	4798      	blx	r3
   1bca0:	6a3b      	ldr	r3, [r7, #32]
   1bca2:	0018      	movs	r0, r3
   1bca4:	4b47      	ldr	r3, [pc, #284]	; (1bdc4 <MyWrapper+0x1ec>)
   1bca6:	4798      	blx	r3
   1bca8:	0003      	movs	r3, r0
   1bcaa:	001a      	movs	r2, r3
   1bcac:	4b46      	ldr	r3, [pc, #280]	; (1bdc8 <MyWrapper+0x1f0>)
   1bcae:	5c9c      	ldrb	r4, [r3, r2]
   1bcb0:	6a3b      	ldr	r3, [r7, #32]
   1bcb2:	0018      	movs	r0, r3
   1bcb4:	4b45      	ldr	r3, [pc, #276]	; (1bdcc <MyWrapper+0x1f4>)
   1bcb6:	4798      	blx	r3
   1bcb8:	0003      	movs	r3, r0
   1bcba:	b2d9      	uxtb	r1, r3
   1bcbc:	6a3b      	ldr	r3, [r7, #32]
   1bcbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bcc0:	b2db      	uxtb	r3, r3
   1bcc2:	3301      	adds	r3, #1
   1bcc4:	b2db      	uxtb	r3, r3
   1bcc6:	001a      	movs	r2, r3
   1bcc8:	0020      	movs	r0, r4
   1bcca:	4b42      	ldr	r3, [pc, #264]	; (1bdd4 <MyWrapper+0x1fc>)
   1bccc:	4798      	blx	r3
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1bcce:	69bb      	ldr	r3, [r7, #24]
   1bcd0:	1c5a      	adds	r2, r3, #1
   1bcd2:	6a3b      	ldr	r3, [r7, #32]
   1bcd4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
   1bcd6:	2317      	movs	r3, #23
   1bcd8:	18fb      	adds	r3, r7, r3
   1bcda:	781b      	ldrb	r3, [r3, #0]
   1bcdc:	b25b      	sxtb	r3, r3
   1bcde:	3301      	adds	r3, #1
   1bce0:	d123      	bne.n	1bd2a <MyWrapper+0x152>
			{
				#if ( configUSE_QUEUE_SETS == 1 )
				{
					if( pxQueue->pxQueueSetContainer != NULL )
   1bce2:	6a3b      	ldr	r3, [r7, #32]
   1bce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1bce6:	2b00      	cmp	r3, #0
   1bce8:	d00d      	beq.n	1bd06 <MyWrapper+0x12e>
					{
						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1bcea:	6a3b      	ldr	r3, [r7, #32]
   1bcec:	2100      	movs	r1, #0
   1bcee:	0018      	movs	r0, r3
   1bcf0:	4b39      	ldr	r3, [pc, #228]	; (1bdd8 <MyWrapper+0x200>)
   1bcf2:	4798      	blx	r3
   1bcf4:	1e03      	subs	r3, r0, #0
   1bcf6:	d021      	beq.n	1bd3c <MyWrapper+0x164>
						{
							/* The semaphore is a member of a queue set, and
							posting	to the queue set caused a higher priority
							task to	unblock.  A context switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
   1bcf8:	68bb      	ldr	r3, [r7, #8]
   1bcfa:	2b00      	cmp	r3, #0
   1bcfc:	d01e      	beq.n	1bd3c <MyWrapper+0x164>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
   1bcfe:	68bb      	ldr	r3, [r7, #8]
   1bd00:	2201      	movs	r2, #1
   1bd02:	601a      	str	r2, [r3, #0]
   1bd04:	e01a      	b.n	1bd3c <MyWrapper+0x164>
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else
					{
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1bd06:	6a3b      	ldr	r3, [r7, #32]
   1bd08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1bd0a:	2b00      	cmp	r3, #0
   1bd0c:	d016      	beq.n	1bd3c <MyWrapper+0x164>
						{
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1bd0e:	6a3b      	ldr	r3, [r7, #32]
   1bd10:	3324      	adds	r3, #36	; 0x24
   1bd12:	0018      	movs	r0, r3
   1bd14:	4b31      	ldr	r3, [pc, #196]	; (1bddc <MyWrapper+0x204>)
   1bd16:	4798      	blx	r3
   1bd18:	1e03      	subs	r3, r0, #0
   1bd1a:	d00f      	beq.n	1bd3c <MyWrapper+0x164>
							{
								/* The task waiting has a higher priority so
								record that a context switch is required. */
								if( pxHigherPriorityTaskWoken != NULL )
   1bd1c:	68bb      	ldr	r3, [r7, #8]
   1bd1e:	2b00      	cmp	r3, #0
   1bd20:	d00c      	beq.n	1bd3c <MyWrapper+0x164>
								{
									*pxHigherPriorityTaskWoken = pdTRUE;
   1bd22:	68bb      	ldr	r3, [r7, #8]
   1bd24:	2201      	movs	r2, #1
   1bd26:	601a      	str	r2, [r3, #0]
   1bd28:	e008      	b.n	1bd3c <MyWrapper+0x164>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1bd2a:	2317      	movs	r3, #23
   1bd2c:	18fb      	adds	r3, r7, r3
   1bd2e:	781b      	ldrb	r3, [r3, #0]
   1bd30:	3301      	adds	r3, #1
   1bd32:	b2db      	uxtb	r3, r3
   1bd34:	b259      	sxtb	r1, r3
   1bd36:	6a3b      	ldr	r3, [r7, #32]
   1bd38:	2245      	movs	r2, #69	; 0x45
   1bd3a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
   1bd3c:	2301      	movs	r3, #1
   1bd3e:	627b      	str	r3, [r7, #36]	; 0x24
   1bd40:	e030      	b.n	1bda4 <MyWrapper+0x1cc>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
   1bd42:	6a3b      	ldr	r3, [r7, #32]
   1bd44:	0018      	movs	r0, r3
   1bd46:	4b1d      	ldr	r3, [pc, #116]	; (1bdbc <MyWrapper+0x1e4>)
   1bd48:	4798      	blx	r3
   1bd4a:	0003      	movs	r3, r0
   1bd4c:	001a      	movs	r2, r3
   1bd4e:	4b1c      	ldr	r3, [pc, #112]	; (1bdc0 <MyWrapper+0x1e8>)
   1bd50:	881b      	ldrh	r3, [r3, #0]
   1bd52:	4013      	ands	r3, r2
   1bd54:	b29b      	uxth	r3, r3
   1bd56:	2b00      	cmp	r3, #0
   1bd58:	d022      	beq.n	1bda0 <MyWrapper+0x1c8>
   1bd5a:	687b      	ldr	r3, [r7, #4]
   1bd5c:	2b00      	cmp	r3, #0
   1bd5e:	d10b      	bne.n	1bd78 <MyWrapper+0x1a0>
   1bd60:	6a3b      	ldr	r3, [r7, #32]
   1bd62:	0018      	movs	r0, r3
   1bd64:	4b17      	ldr	r3, [pc, #92]	; (1bdc4 <MyWrapper+0x1ec>)
   1bd66:	4798      	blx	r3
   1bd68:	0003      	movs	r3, r0
   1bd6a:	001a      	movs	r2, r3
   1bd6c:	4b16      	ldr	r3, [pc, #88]	; (1bdc8 <MyWrapper+0x1f0>)
   1bd6e:	5c9b      	ldrb	r3, [r3, r2]
   1bd70:	3358      	adds	r3, #88	; 0x58
   1bd72:	b2db      	uxtb	r3, r3
   1bd74:	001d      	movs	r5, r3
   1bd76:	e000      	b.n	1bd7a <MyWrapper+0x1a2>
   1bd78:	255d      	movs	r5, #93	; 0x5d
   1bd7a:	6a3b      	ldr	r3, [r7, #32]
   1bd7c:	0018      	movs	r0, r3
   1bd7e:	4b11      	ldr	r3, [pc, #68]	; (1bdc4 <MyWrapper+0x1ec>)
   1bd80:	4798      	blx	r3
   1bd82:	0003      	movs	r3, r0
   1bd84:	001a      	movs	r2, r3
   1bd86:	4b10      	ldr	r3, [pc, #64]	; (1bdc8 <MyWrapper+0x1f0>)
   1bd88:	5c9c      	ldrb	r4, [r3, r2]
   1bd8a:	6a3b      	ldr	r3, [r7, #32]
   1bd8c:	0018      	movs	r0, r3
   1bd8e:	4b0f      	ldr	r3, [pc, #60]	; (1bdcc <MyWrapper+0x1f4>)
   1bd90:	4798      	blx	r3
   1bd92:	0003      	movs	r3, r0
   1bd94:	b2db      	uxtb	r3, r3
   1bd96:	001a      	movs	r2, r3
   1bd98:	0021      	movs	r1, r4
   1bd9a:	0028      	movs	r0, r5
   1bd9c:	4b0c      	ldr	r3, [pc, #48]	; (1bdd0 <MyWrapper+0x1f8>)
   1bd9e:	4798      	blx	r3
			xReturn = errQUEUE_FULL;
   1bda0:	2300      	movs	r3, #0
   1bda2:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   1bda4:	69fb      	ldr	r3, [r7, #28]
   1bda6:	0018      	movs	r0, r3
   1bda8:	4b0d      	ldr	r3, [pc, #52]	; (1bde0 <MyWrapper+0x208>)
   1bdaa:	4798      	blx	r3

	return xReturn;
   1bdac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   1bdae:	0018      	movs	r0, r3
   1bdb0:	46bd      	mov	sp, r7
   1bdb2:	b00a      	add	sp, #40	; 0x28
   1bdb4:	bdb0      	pop	{r4, r5, r7, pc}
   1bdb6:	46c0      	nop			; (mov r8, r8)
   1bdb8:	0001afed 	.word	0x0001afed
   1bdbc:	00019055 	.word	0x00019055
   1bdc0:	20000110 	.word	0x20000110
   1bdc4:	00018f55 	.word	0x00018f55
   1bdc8:	20000104 	.word	0x20000104
   1bdcc:	00019035 	.word	0x00019035
   1bdd0:	0001998d 	.word	0x0001998d
   1bdd4:	00019fe9 	.word	0x00019fe9
   1bdd8:	0001ca69 	.word	0x0001ca69
   1bddc:	0001d829 	.word	0x0001d829
   1bde0:	0001aff9 	.word	0x0001aff9

0001bde4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
   1bde4:	b5b0      	push	{r4, r5, r7, lr}
   1bde6:	b08a      	sub	sp, #40	; 0x28
   1bde8:	af00      	add	r7, sp, #0
   1bdea:	60f8      	str	r0, [r7, #12]
   1bdec:	60b9      	str	r1, [r7, #8]
   1bdee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
   1bdf0:	2300      	movs	r3, #0
   1bdf2:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1bdf4:	68fb      	ldr	r3, [r7, #12]
   1bdf6:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1bdf8:	6a3b      	ldr	r3, [r7, #32]
   1bdfa:	2b00      	cmp	r3, #0
   1bdfc:	d101      	bne.n	1be02 <xQueueReceive+0x1e>
   1bdfe:	b672      	cpsid	i
   1be00:	e7fe      	b.n	1be00 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
   1be02:	68bb      	ldr	r3, [r7, #8]
   1be04:	2b00      	cmp	r3, #0
   1be06:	d103      	bne.n	1be10 <xQueueReceive+0x2c>
   1be08:	6a3b      	ldr	r3, [r7, #32]
   1be0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1be0c:	2b00      	cmp	r3, #0
   1be0e:	d101      	bne.n	1be14 <xQueueReceive+0x30>
   1be10:	2301      	movs	r3, #1
   1be12:	e000      	b.n	1be16 <xQueueReceive+0x32>
   1be14:	2300      	movs	r3, #0
   1be16:	2b00      	cmp	r3, #0
   1be18:	d101      	bne.n	1be1e <xQueueReceive+0x3a>
   1be1a:	b672      	cpsid	i
   1be1c:	e7fe      	b.n	1be1c <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1be1e:	4bbf      	ldr	r3, [pc, #764]	; (1c11c <xQueueReceive+0x338>)
   1be20:	4798      	blx	r3
   1be22:	1e03      	subs	r3, r0, #0
   1be24:	d102      	bne.n	1be2c <xQueueReceive+0x48>
   1be26:	687b      	ldr	r3, [r7, #4]
   1be28:	2b00      	cmp	r3, #0
   1be2a:	d101      	bne.n	1be30 <xQueueReceive+0x4c>
   1be2c:	2301      	movs	r3, #1
   1be2e:	e000      	b.n	1be32 <xQueueReceive+0x4e>
   1be30:	2300      	movs	r3, #0
   1be32:	2b00      	cmp	r3, #0
   1be34:	d101      	bne.n	1be3a <xQueueReceive+0x56>
   1be36:	b672      	cpsid	i
   1be38:	e7fe      	b.n	1be38 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1be3a:	4bb9      	ldr	r3, [pc, #740]	; (1c120 <xQueueReceive+0x33c>)
   1be3c:	4798      	blx	r3
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1be3e:	6a3b      	ldr	r3, [r7, #32]
   1be40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1be42:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1be44:	69fb      	ldr	r3, [r7, #28]
   1be46:	2b00      	cmp	r3, #0
   1be48:	d100      	bne.n	1be4c <xQueueReceive+0x68>
   1be4a:	e07d      	b.n	1bf48 <xQueueReceive+0x164>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   1be4c:	68ba      	ldr	r2, [r7, #8]
   1be4e:	6a3b      	ldr	r3, [r7, #32]
   1be50:	0011      	movs	r1, r2
   1be52:	0018      	movs	r0, r3
   1be54:	4bb3      	ldr	r3, [pc, #716]	; (1c124 <xQueueReceive+0x340>)
   1be56:	4798      	blx	r3
				traceQUEUE_RECEIVE( pxQueue );
   1be58:	4bb3      	ldr	r3, [pc, #716]	; (1c128 <xQueueReceive+0x344>)
   1be5a:	4798      	blx	r3
   1be5c:	0003      	movs	r3, r0
   1be5e:	0018      	movs	r0, r3
   1be60:	4bb2      	ldr	r3, [pc, #712]	; (1c12c <xQueueReceive+0x348>)
   1be62:	4798      	blx	r3
   1be64:	0003      	movs	r3, r0
   1be66:	001a      	movs	r2, r3
   1be68:	4bb1      	ldr	r3, [pc, #708]	; (1c130 <xQueueReceive+0x34c>)
   1be6a:	881b      	ldrh	r3, [r3, #0]
   1be6c:	4013      	ands	r3, r2
   1be6e:	b29b      	uxth	r3, r3
   1be70:	2b00      	cmp	r3, #0
   1be72:	d029      	beq.n	1bec8 <xQueueReceive+0xe4>
   1be74:	6a3b      	ldr	r3, [r7, #32]
   1be76:	0018      	movs	r0, r3
   1be78:	4bae      	ldr	r3, [pc, #696]	; (1c134 <xQueueReceive+0x350>)
   1be7a:	4798      	blx	r3
   1be7c:	0003      	movs	r3, r0
   1be7e:	001a      	movs	r2, r3
   1be80:	4bab      	ldr	r3, [pc, #684]	; (1c130 <xQueueReceive+0x34c>)
   1be82:	881b      	ldrh	r3, [r3, #0]
   1be84:	4013      	ands	r3, r2
   1be86:	b29b      	uxth	r3, r3
   1be88:	2b00      	cmp	r3, #0
   1be8a:	d01d      	beq.n	1bec8 <xQueueReceive+0xe4>
   1be8c:	6a3b      	ldr	r3, [r7, #32]
   1be8e:	0018      	movs	r0, r3
   1be90:	4ba9      	ldr	r3, [pc, #676]	; (1c138 <xQueueReceive+0x354>)
   1be92:	4798      	blx	r3
   1be94:	0003      	movs	r3, r0
   1be96:	001a      	movs	r2, r3
   1be98:	4ba8      	ldr	r3, [pc, #672]	; (1c13c <xQueueReceive+0x358>)
   1be9a:	5c9b      	ldrb	r3, [r3, r2]
   1be9c:	3328      	adds	r3, #40	; 0x28
   1be9e:	b2db      	uxtb	r3, r3
   1bea0:	001d      	movs	r5, r3
   1bea2:	6a3b      	ldr	r3, [r7, #32]
   1bea4:	0018      	movs	r0, r3
   1bea6:	4ba4      	ldr	r3, [pc, #656]	; (1c138 <xQueueReceive+0x354>)
   1bea8:	4798      	blx	r3
   1beaa:	0003      	movs	r3, r0
   1beac:	001a      	movs	r2, r3
   1beae:	4ba3      	ldr	r3, [pc, #652]	; (1c13c <xQueueReceive+0x358>)
   1beb0:	5c9c      	ldrb	r4, [r3, r2]
   1beb2:	6a3b      	ldr	r3, [r7, #32]
   1beb4:	0018      	movs	r0, r3
   1beb6:	4ba2      	ldr	r3, [pc, #648]	; (1c140 <xQueueReceive+0x35c>)
   1beb8:	4798      	blx	r3
   1beba:	0003      	movs	r3, r0
   1bebc:	b2db      	uxtb	r3, r3
   1bebe:	001a      	movs	r2, r3
   1bec0:	0021      	movs	r1, r4
   1bec2:	0028      	movs	r0, r5
   1bec4:	4b9f      	ldr	r3, [pc, #636]	; (1c144 <xQueueReceive+0x360>)
   1bec6:	4798      	blx	r3
   1bec8:	6a3b      	ldr	r3, [r7, #32]
   1beca:	0018      	movs	r0, r3
   1becc:	4b9a      	ldr	r3, [pc, #616]	; (1c138 <xQueueReceive+0x354>)
   1bece:	4798      	blx	r3
   1bed0:	0003      	movs	r3, r0
   1bed2:	001a      	movs	r2, r3
   1bed4:	4b99      	ldr	r3, [pc, #612]	; (1c13c <xQueueReceive+0x358>)
   1bed6:	5c9c      	ldrb	r4, [r3, r2]
   1bed8:	6a3b      	ldr	r3, [r7, #32]
   1beda:	0018      	movs	r0, r3
   1bedc:	4b98      	ldr	r3, [pc, #608]	; (1c140 <xQueueReceive+0x35c>)
   1bede:	4798      	blx	r3
   1bee0:	0003      	movs	r3, r0
   1bee2:	b2dd      	uxtb	r5, r3
   1bee4:	6a3b      	ldr	r3, [r7, #32]
   1bee6:	0018      	movs	r0, r3
   1bee8:	4b93      	ldr	r3, [pc, #588]	; (1c138 <xQueueReceive+0x354>)
   1beea:	4798      	blx	r3
   1beec:	0003      	movs	r3, r0
   1beee:	001a      	movs	r2, r3
   1bef0:	4b92      	ldr	r3, [pc, #584]	; (1c13c <xQueueReceive+0x358>)
   1bef2:	5c9b      	ldrb	r3, [r3, r2]
   1bef4:	2b02      	cmp	r3, #2
   1bef6:	d108      	bne.n	1bf0a <xQueueReceive+0x126>
   1bef8:	4b8b      	ldr	r3, [pc, #556]	; (1c128 <xQueueReceive+0x344>)
   1befa:	4798      	blx	r3
   1befc:	0003      	movs	r3, r0
   1befe:	0018      	movs	r0, r3
   1bf00:	4b91      	ldr	r3, [pc, #580]	; (1c148 <xQueueReceive+0x364>)
   1bf02:	4798      	blx	r3
   1bf04:	0003      	movs	r3, r0
   1bf06:	b2db      	uxtb	r3, r3
   1bf08:	e004      	b.n	1bf14 <xQueueReceive+0x130>
   1bf0a:	6a3b      	ldr	r3, [r7, #32]
   1bf0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1bf0e:	b2db      	uxtb	r3, r3
   1bf10:	3b01      	subs	r3, #1
   1bf12:	b2db      	uxtb	r3, r3
   1bf14:	001a      	movs	r2, r3
   1bf16:	0029      	movs	r1, r5
   1bf18:	0020      	movs	r0, r4
   1bf1a:	4b8c      	ldr	r3, [pc, #560]	; (1c14c <xQueueReceive+0x368>)
   1bf1c:	4798      	blx	r3
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
   1bf1e:	69fb      	ldr	r3, [r7, #28]
   1bf20:	1e5a      	subs	r2, r3, #1
   1bf22:	6a3b      	ldr	r3, [r7, #32]
   1bf24:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1bf26:	6a3b      	ldr	r3, [r7, #32]
   1bf28:	691b      	ldr	r3, [r3, #16]
   1bf2a:	2b00      	cmp	r3, #0
   1bf2c:	d008      	beq.n	1bf40 <xQueueReceive+0x15c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1bf2e:	6a3b      	ldr	r3, [r7, #32]
   1bf30:	3310      	adds	r3, #16
   1bf32:	0018      	movs	r0, r3
   1bf34:	4b86      	ldr	r3, [pc, #536]	; (1c150 <xQueueReceive+0x36c>)
   1bf36:	4798      	blx	r3
   1bf38:	1e03      	subs	r3, r0, #0
   1bf3a:	d001      	beq.n	1bf40 <xQueueReceive+0x15c>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1bf3c:	4b85      	ldr	r3, [pc, #532]	; (1c154 <xQueueReceive+0x370>)
   1bf3e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1bf40:	4b85      	ldr	r3, [pc, #532]	; (1c158 <xQueueReceive+0x374>)
   1bf42:	4798      	blx	r3
				return pdPASS;
   1bf44:	2301      	movs	r3, #1
   1bf46:	e15f      	b.n	1c208 <xQueueReceive+0x424>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1bf48:	687b      	ldr	r3, [r7, #4]
   1bf4a:	2b00      	cmp	r3, #0
   1bf4c:	d13b      	bne.n	1bfc6 <xQueueReceive+0x1e2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   1bf4e:	4b82      	ldr	r3, [pc, #520]	; (1c158 <xQueueReceive+0x374>)
   1bf50:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1bf52:	4b75      	ldr	r3, [pc, #468]	; (1c128 <xQueueReceive+0x344>)
   1bf54:	4798      	blx	r3
   1bf56:	0003      	movs	r3, r0
   1bf58:	0018      	movs	r0, r3
   1bf5a:	4b74      	ldr	r3, [pc, #464]	; (1c12c <xQueueReceive+0x348>)
   1bf5c:	4798      	blx	r3
   1bf5e:	0003      	movs	r3, r0
   1bf60:	001a      	movs	r2, r3
   1bf62:	4b73      	ldr	r3, [pc, #460]	; (1c130 <xQueueReceive+0x34c>)
   1bf64:	881b      	ldrh	r3, [r3, #0]
   1bf66:	4013      	ands	r3, r2
   1bf68:	b29b      	uxth	r3, r3
   1bf6a:	2b00      	cmp	r3, #0
   1bf6c:	d029      	beq.n	1bfc2 <xQueueReceive+0x1de>
   1bf6e:	6a3b      	ldr	r3, [r7, #32]
   1bf70:	0018      	movs	r0, r3
   1bf72:	4b70      	ldr	r3, [pc, #448]	; (1c134 <xQueueReceive+0x350>)
   1bf74:	4798      	blx	r3
   1bf76:	0003      	movs	r3, r0
   1bf78:	001a      	movs	r2, r3
   1bf7a:	4b6d      	ldr	r3, [pc, #436]	; (1c130 <xQueueReceive+0x34c>)
   1bf7c:	881b      	ldrh	r3, [r3, #0]
   1bf7e:	4013      	ands	r3, r2
   1bf80:	b29b      	uxth	r3, r3
   1bf82:	2b00      	cmp	r3, #0
   1bf84:	d01d      	beq.n	1bfc2 <xQueueReceive+0x1de>
   1bf86:	6a3b      	ldr	r3, [r7, #32]
   1bf88:	0018      	movs	r0, r3
   1bf8a:	4b6b      	ldr	r3, [pc, #428]	; (1c138 <xQueueReceive+0x354>)
   1bf8c:	4798      	blx	r3
   1bf8e:	0003      	movs	r3, r0
   1bf90:	001a      	movs	r2, r3
   1bf92:	4b6a      	ldr	r3, [pc, #424]	; (1c13c <xQueueReceive+0x358>)
   1bf94:	5c9b      	ldrb	r3, [r3, r2]
   1bf96:	3350      	adds	r3, #80	; 0x50
   1bf98:	b2db      	uxtb	r3, r3
   1bf9a:	001d      	movs	r5, r3
   1bf9c:	6a3b      	ldr	r3, [r7, #32]
   1bf9e:	0018      	movs	r0, r3
   1bfa0:	4b65      	ldr	r3, [pc, #404]	; (1c138 <xQueueReceive+0x354>)
   1bfa2:	4798      	blx	r3
   1bfa4:	0003      	movs	r3, r0
   1bfa6:	001a      	movs	r2, r3
   1bfa8:	4b64      	ldr	r3, [pc, #400]	; (1c13c <xQueueReceive+0x358>)
   1bfaa:	5c9c      	ldrb	r4, [r3, r2]
   1bfac:	6a3b      	ldr	r3, [r7, #32]
   1bfae:	0018      	movs	r0, r3
   1bfb0:	4b63      	ldr	r3, [pc, #396]	; (1c140 <xQueueReceive+0x35c>)
   1bfb2:	4798      	blx	r3
   1bfb4:	0003      	movs	r3, r0
   1bfb6:	b2db      	uxtb	r3, r3
   1bfb8:	001a      	movs	r2, r3
   1bfba:	0021      	movs	r1, r4
   1bfbc:	0028      	movs	r0, r5
   1bfbe:	4b61      	ldr	r3, [pc, #388]	; (1c144 <xQueueReceive+0x360>)
   1bfc0:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1bfc2:	2300      	movs	r3, #0
   1bfc4:	e120      	b.n	1c208 <xQueueReceive+0x424>
				}
				else if( xEntryTimeSet == pdFALSE )
   1bfc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1bfc8:	2b00      	cmp	r3, #0
   1bfca:	d106      	bne.n	1bfda <xQueueReceive+0x1f6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1bfcc:	2314      	movs	r3, #20
   1bfce:	18fb      	adds	r3, r7, r3
   1bfd0:	0018      	movs	r0, r3
   1bfd2:	4b62      	ldr	r3, [pc, #392]	; (1c15c <xQueueReceive+0x378>)
   1bfd4:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1bfd6:	2301      	movs	r3, #1
   1bfd8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1bfda:	4b5f      	ldr	r3, [pc, #380]	; (1c158 <xQueueReceive+0x374>)
   1bfdc:	4798      	blx	r3

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   1bfde:	4b60      	ldr	r3, [pc, #384]	; (1c160 <xQueueReceive+0x37c>)
   1bfe0:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1bfe2:	4b4f      	ldr	r3, [pc, #316]	; (1c120 <xQueueReceive+0x33c>)
   1bfe4:	4798      	blx	r3
   1bfe6:	6a3b      	ldr	r3, [r7, #32]
   1bfe8:	2244      	movs	r2, #68	; 0x44
   1bfea:	5c9b      	ldrb	r3, [r3, r2]
   1bfec:	b25b      	sxtb	r3, r3
   1bfee:	3301      	adds	r3, #1
   1bff0:	d103      	bne.n	1bffa <xQueueReceive+0x216>
   1bff2:	6a3b      	ldr	r3, [r7, #32]
   1bff4:	2244      	movs	r2, #68	; 0x44
   1bff6:	2100      	movs	r1, #0
   1bff8:	5499      	strb	r1, [r3, r2]
   1bffa:	6a3b      	ldr	r3, [r7, #32]
   1bffc:	2245      	movs	r2, #69	; 0x45
   1bffe:	5c9b      	ldrb	r3, [r3, r2]
   1c000:	b25b      	sxtb	r3, r3
   1c002:	3301      	adds	r3, #1
   1c004:	d103      	bne.n	1c00e <xQueueReceive+0x22a>
   1c006:	6a3b      	ldr	r3, [r7, #32]
   1c008:	2245      	movs	r2, #69	; 0x45
   1c00a:	2100      	movs	r1, #0
   1c00c:	5499      	strb	r1, [r3, r2]
   1c00e:	4b52      	ldr	r3, [pc, #328]	; (1c158 <xQueueReceive+0x374>)
   1c010:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1c012:	1d3a      	adds	r2, r7, #4
   1c014:	2314      	movs	r3, #20
   1c016:	18fb      	adds	r3, r7, r3
   1c018:	0011      	movs	r1, r2
   1c01a:	0018      	movs	r0, r3
   1c01c:	4b51      	ldr	r3, [pc, #324]	; (1c164 <xQueueReceive+0x380>)
   1c01e:	4798      	blx	r3
   1c020:	1e03      	subs	r3, r0, #0
   1c022:	d000      	beq.n	1c026 <xQueueReceive+0x242>
   1c024:	e0aa      	b.n	1c17c <xQueueReceive+0x398>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1c026:	6a3b      	ldr	r3, [r7, #32]
   1c028:	0018      	movs	r0, r3
   1c02a:	4b4f      	ldr	r3, [pc, #316]	; (1c168 <xQueueReceive+0x384>)
   1c02c:	4798      	blx	r3
   1c02e:	1e03      	subs	r3, r0, #0
   1c030:	d06d      	beq.n	1c10e <xQueueReceive+0x32a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1c032:	4b3d      	ldr	r3, [pc, #244]	; (1c128 <xQueueReceive+0x344>)
   1c034:	4798      	blx	r3
   1c036:	0003      	movs	r3, r0
   1c038:	0018      	movs	r0, r3
   1c03a:	4b3c      	ldr	r3, [pc, #240]	; (1c12c <xQueueReceive+0x348>)
   1c03c:	4798      	blx	r3
   1c03e:	0003      	movs	r3, r0
   1c040:	001a      	movs	r2, r3
   1c042:	4b3b      	ldr	r3, [pc, #236]	; (1c130 <xQueueReceive+0x34c>)
   1c044:	881b      	ldrh	r3, [r3, #0]
   1c046:	4013      	ands	r3, r2
   1c048:	b29b      	uxth	r3, r3
   1c04a:	2b00      	cmp	r3, #0
   1c04c:	d029      	beq.n	1c0a2 <xQueueReceive+0x2be>
   1c04e:	6a3b      	ldr	r3, [r7, #32]
   1c050:	0018      	movs	r0, r3
   1c052:	4b38      	ldr	r3, [pc, #224]	; (1c134 <xQueueReceive+0x350>)
   1c054:	4798      	blx	r3
   1c056:	0003      	movs	r3, r0
   1c058:	001a      	movs	r2, r3
   1c05a:	4b35      	ldr	r3, [pc, #212]	; (1c130 <xQueueReceive+0x34c>)
   1c05c:	881b      	ldrh	r3, [r3, #0]
   1c05e:	4013      	ands	r3, r2
   1c060:	b29b      	uxth	r3, r3
   1c062:	2b00      	cmp	r3, #0
   1c064:	d01d      	beq.n	1c0a2 <xQueueReceive+0x2be>
   1c066:	6a3b      	ldr	r3, [r7, #32]
   1c068:	0018      	movs	r0, r3
   1c06a:	4b33      	ldr	r3, [pc, #204]	; (1c138 <xQueueReceive+0x354>)
   1c06c:	4798      	blx	r3
   1c06e:	0003      	movs	r3, r0
   1c070:	001a      	movs	r2, r3
   1c072:	4b32      	ldr	r3, [pc, #200]	; (1c13c <xQueueReceive+0x358>)
   1c074:	5c9b      	ldrb	r3, [r3, r2]
   1c076:	3368      	adds	r3, #104	; 0x68
   1c078:	b2db      	uxtb	r3, r3
   1c07a:	001d      	movs	r5, r3
   1c07c:	6a3b      	ldr	r3, [r7, #32]
   1c07e:	0018      	movs	r0, r3
   1c080:	4b2d      	ldr	r3, [pc, #180]	; (1c138 <xQueueReceive+0x354>)
   1c082:	4798      	blx	r3
   1c084:	0003      	movs	r3, r0
   1c086:	001a      	movs	r2, r3
   1c088:	4b2c      	ldr	r3, [pc, #176]	; (1c13c <xQueueReceive+0x358>)
   1c08a:	5c9c      	ldrb	r4, [r3, r2]
   1c08c:	6a3b      	ldr	r3, [r7, #32]
   1c08e:	0018      	movs	r0, r3
   1c090:	4b2b      	ldr	r3, [pc, #172]	; (1c140 <xQueueReceive+0x35c>)
   1c092:	4798      	blx	r3
   1c094:	0003      	movs	r3, r0
   1c096:	b2db      	uxtb	r3, r3
   1c098:	001a      	movs	r2, r3
   1c09a:	0021      	movs	r1, r4
   1c09c:	0028      	movs	r0, r5
   1c09e:	4b29      	ldr	r3, [pc, #164]	; (1c144 <xQueueReceive+0x360>)
   1c0a0:	4798      	blx	r3
   1c0a2:	6a3b      	ldr	r3, [r7, #32]
   1c0a4:	0018      	movs	r0, r3
   1c0a6:	4b24      	ldr	r3, [pc, #144]	; (1c138 <xQueueReceive+0x354>)
   1c0a8:	4798      	blx	r3
   1c0aa:	0003      	movs	r3, r0
   1c0ac:	001a      	movs	r2, r3
   1c0ae:	4b23      	ldr	r3, [pc, #140]	; (1c13c <xQueueReceive+0x358>)
   1c0b0:	5c9b      	ldrb	r3, [r3, r2]
   1c0b2:	2b02      	cmp	r3, #2
   1c0b4:	d018      	beq.n	1c0e8 <xQueueReceive+0x304>
   1c0b6:	4b1c      	ldr	r3, [pc, #112]	; (1c128 <xQueueReceive+0x344>)
   1c0b8:	4798      	blx	r3
   1c0ba:	0003      	movs	r3, r0
   1c0bc:	0018      	movs	r0, r3
   1c0be:	4b1b      	ldr	r3, [pc, #108]	; (1c12c <xQueueReceive+0x348>)
   1c0c0:	4798      	blx	r3
   1c0c2:	0003      	movs	r3, r0
   1c0c4:	001a      	movs	r2, r3
   1c0c6:	4b1a      	ldr	r3, [pc, #104]	; (1c130 <xQueueReceive+0x34c>)
   1c0c8:	881b      	ldrh	r3, [r3, #0]
   1c0ca:	4013      	ands	r3, r2
   1c0cc:	b29b      	uxth	r3, r3
   1c0ce:	2b00      	cmp	r3, #0
   1c0d0:	d00a      	beq.n	1c0e8 <xQueueReceive+0x304>
   1c0d2:	4b15      	ldr	r3, [pc, #84]	; (1c128 <xQueueReceive+0x344>)
   1c0d4:	4798      	blx	r3
   1c0d6:	0003      	movs	r3, r0
   1c0d8:	0018      	movs	r0, r3
   1c0da:	4b1b      	ldr	r3, [pc, #108]	; (1c148 <xQueueReceive+0x364>)
   1c0dc:	4798      	blx	r3
   1c0de:	0003      	movs	r3, r0
   1c0e0:	b2db      	uxtb	r3, r3
   1c0e2:	0018      	movs	r0, r3
   1c0e4:	4b21      	ldr	r3, [pc, #132]	; (1c16c <xQueueReceive+0x388>)
   1c0e6:	4798      	blx	r3
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1c0e8:	6a3b      	ldr	r3, [r7, #32]
   1c0ea:	3324      	adds	r3, #36	; 0x24
   1c0ec:	687a      	ldr	r2, [r7, #4]
   1c0ee:	0011      	movs	r1, r2
   1c0f0:	0018      	movs	r0, r3
   1c0f2:	4b1f      	ldr	r3, [pc, #124]	; (1c170 <xQueueReceive+0x38c>)
   1c0f4:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1c0f6:	6a3b      	ldr	r3, [r7, #32]
   1c0f8:	0018      	movs	r0, r3
   1c0fa:	4b1e      	ldr	r3, [pc, #120]	; (1c174 <xQueueReceive+0x390>)
   1c0fc:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1c0fe:	4b1e      	ldr	r3, [pc, #120]	; (1c178 <xQueueReceive+0x394>)
   1c100:	4798      	blx	r3
   1c102:	1e03      	subs	r3, r0, #0
   1c104:	d000      	beq.n	1c108 <xQueueReceive+0x324>
   1c106:	e698      	b.n	1be3a <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
   1c108:	4b12      	ldr	r3, [pc, #72]	; (1c154 <xQueueReceive+0x370>)
   1c10a:	4798      	blx	r3
   1c10c:	e695      	b.n	1be3a <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
   1c10e:	6a3b      	ldr	r3, [r7, #32]
   1c110:	0018      	movs	r0, r3
   1c112:	4b18      	ldr	r3, [pc, #96]	; (1c174 <xQueueReceive+0x390>)
   1c114:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1c116:	4b18      	ldr	r3, [pc, #96]	; (1c178 <xQueueReceive+0x394>)
   1c118:	4798      	blx	r3
   1c11a:	e68e      	b.n	1be3a <xQueueReceive+0x56>
   1c11c:	0001dcb9 	.word	0x0001dcb9
   1c120:	0001af99 	.word	0x0001af99
   1c124:	0001c845 	.word	0x0001c845
   1c128:	00019231 	.word	0x00019231
   1c12c:	00018f95 	.word	0x00018f95
   1c130:	20000110 	.word	0x20000110
   1c134:	00019055 	.word	0x00019055
   1c138:	00018f55 	.word	0x00018f55
   1c13c:	20000104 	.word	0x20000104
   1c140:	00019035 	.word	0x00019035
   1c144:	0001998d 	.word	0x0001998d
   1c148:	00018f75 	.word	0x00018f75
   1c14c:	00019fe9 	.word	0x00019fe9
   1c150:	0001d829 	.word	0x0001d829
   1c154:	0001af81 	.word	0x0001af81
   1c158:	0001afbd 	.word	0x0001afbd
   1c15c:	0001d969 	.word	0x0001d969
   1c160:	0001d251 	.word	0x0001d251
   1c164:	0001d991 	.word	0x0001d991
   1c168:	0001c985 	.word	0x0001c985
   1c16c:	0001a125 	.word	0x0001a125
   1c170:	0001d705 	.word	0x0001d705
   1c174:	0001c895 	.word	0x0001c895
   1c178:	0001d269 	.word	0x0001d269
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
   1c17c:	6a3b      	ldr	r3, [r7, #32]
   1c17e:	0018      	movs	r0, r3
   1c180:	4b23      	ldr	r3, [pc, #140]	; (1c210 <xQueueReceive+0x42c>)
   1c182:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1c184:	4b23      	ldr	r3, [pc, #140]	; (1c214 <xQueueReceive+0x430>)
   1c186:	4798      	blx	r3

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1c188:	6a3b      	ldr	r3, [r7, #32]
   1c18a:	0018      	movs	r0, r3
   1c18c:	4b22      	ldr	r3, [pc, #136]	; (1c218 <xQueueReceive+0x434>)
   1c18e:	4798      	blx	r3
   1c190:	1e03      	subs	r3, r0, #0
   1c192:	d100      	bne.n	1c196 <xQueueReceive+0x3b2>
   1c194:	e651      	b.n	1be3a <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1c196:	4b21      	ldr	r3, [pc, #132]	; (1c21c <xQueueReceive+0x438>)
   1c198:	4798      	blx	r3
   1c19a:	0003      	movs	r3, r0
   1c19c:	0018      	movs	r0, r3
   1c19e:	4b20      	ldr	r3, [pc, #128]	; (1c220 <xQueueReceive+0x43c>)
   1c1a0:	4798      	blx	r3
   1c1a2:	0003      	movs	r3, r0
   1c1a4:	001a      	movs	r2, r3
   1c1a6:	4b1f      	ldr	r3, [pc, #124]	; (1c224 <xQueueReceive+0x440>)
   1c1a8:	881b      	ldrh	r3, [r3, #0]
   1c1aa:	4013      	ands	r3, r2
   1c1ac:	b29b      	uxth	r3, r3
   1c1ae:	2b00      	cmp	r3, #0
   1c1b0:	d029      	beq.n	1c206 <xQueueReceive+0x422>
   1c1b2:	6a3b      	ldr	r3, [r7, #32]
   1c1b4:	0018      	movs	r0, r3
   1c1b6:	4b1c      	ldr	r3, [pc, #112]	; (1c228 <xQueueReceive+0x444>)
   1c1b8:	4798      	blx	r3
   1c1ba:	0003      	movs	r3, r0
   1c1bc:	001a      	movs	r2, r3
   1c1be:	4b19      	ldr	r3, [pc, #100]	; (1c224 <xQueueReceive+0x440>)
   1c1c0:	881b      	ldrh	r3, [r3, #0]
   1c1c2:	4013      	ands	r3, r2
   1c1c4:	b29b      	uxth	r3, r3
   1c1c6:	2b00      	cmp	r3, #0
   1c1c8:	d01d      	beq.n	1c206 <xQueueReceive+0x422>
   1c1ca:	6a3b      	ldr	r3, [r7, #32]
   1c1cc:	0018      	movs	r0, r3
   1c1ce:	4b17      	ldr	r3, [pc, #92]	; (1c22c <xQueueReceive+0x448>)
   1c1d0:	4798      	blx	r3
   1c1d2:	0003      	movs	r3, r0
   1c1d4:	001a      	movs	r2, r3
   1c1d6:	4b16      	ldr	r3, [pc, #88]	; (1c230 <xQueueReceive+0x44c>)
   1c1d8:	5c9b      	ldrb	r3, [r3, r2]
   1c1da:	3350      	adds	r3, #80	; 0x50
   1c1dc:	b2db      	uxtb	r3, r3
   1c1de:	001d      	movs	r5, r3
   1c1e0:	6a3b      	ldr	r3, [r7, #32]
   1c1e2:	0018      	movs	r0, r3
   1c1e4:	4b11      	ldr	r3, [pc, #68]	; (1c22c <xQueueReceive+0x448>)
   1c1e6:	4798      	blx	r3
   1c1e8:	0003      	movs	r3, r0
   1c1ea:	001a      	movs	r2, r3
   1c1ec:	4b10      	ldr	r3, [pc, #64]	; (1c230 <xQueueReceive+0x44c>)
   1c1ee:	5c9c      	ldrb	r4, [r3, r2]
   1c1f0:	6a3b      	ldr	r3, [r7, #32]
   1c1f2:	0018      	movs	r0, r3
   1c1f4:	4b0f      	ldr	r3, [pc, #60]	; (1c234 <xQueueReceive+0x450>)
   1c1f6:	4798      	blx	r3
   1c1f8:	0003      	movs	r3, r0
   1c1fa:	b2db      	uxtb	r3, r3
   1c1fc:	001a      	movs	r2, r3
   1c1fe:	0021      	movs	r1, r4
   1c200:	0028      	movs	r0, r5
   1c202:	4b0d      	ldr	r3, [pc, #52]	; (1c238 <xQueueReceive+0x454>)
   1c204:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1c206:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1c208:	0018      	movs	r0, r3
   1c20a:	46bd      	mov	sp, r7
   1c20c:	b00a      	add	sp, #40	; 0x28
   1c20e:	bdb0      	pop	{r4, r5, r7, pc}
   1c210:	0001c895 	.word	0x0001c895
   1c214:	0001d269 	.word	0x0001d269
   1c218:	0001c985 	.word	0x0001c985
   1c21c:	00019231 	.word	0x00019231
   1c220:	00018f95 	.word	0x00018f95
   1c224:	20000110 	.word	0x20000110
   1c228:	00019055 	.word	0x00019055
   1c22c:	00018f55 	.word	0x00018f55
   1c230:	20000104 	.word	0x20000104
   1c234:	00019035 	.word	0x00019035
   1c238:	0001998d 	.word	0x0001998d

0001c23c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
   1c23c:	b5b0      	push	{r4, r5, r7, lr}
   1c23e:	b08a      	sub	sp, #40	; 0x28
   1c240:	af00      	add	r7, sp, #0
   1c242:	6078      	str	r0, [r7, #4]
   1c244:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
   1c246:	2300      	movs	r3, #0
   1c248:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1c24a:	687b      	ldr	r3, [r7, #4]
   1c24c:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
   1c24e:	2300      	movs	r3, #0
   1c250:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
   1c252:	69fb      	ldr	r3, [r7, #28]
   1c254:	2b00      	cmp	r3, #0
   1c256:	d101      	bne.n	1c25c <xQueueSemaphoreTake+0x20>
   1c258:	b672      	cpsid	i
   1c25a:	e7fe      	b.n	1c25a <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
   1c25c:	69fb      	ldr	r3, [r7, #28]
   1c25e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c260:	2b00      	cmp	r3, #0
   1c262:	d001      	beq.n	1c268 <xQueueSemaphoreTake+0x2c>
   1c264:	b672      	cpsid	i
   1c266:	e7fe      	b.n	1c266 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
   1c268:	4bcb      	ldr	r3, [pc, #812]	; (1c598 <xQueueSemaphoreTake+0x35c>)
   1c26a:	4798      	blx	r3
   1c26c:	1e03      	subs	r3, r0, #0
   1c26e:	d102      	bne.n	1c276 <xQueueSemaphoreTake+0x3a>
   1c270:	683b      	ldr	r3, [r7, #0]
   1c272:	2b00      	cmp	r3, #0
   1c274:	d101      	bne.n	1c27a <xQueueSemaphoreTake+0x3e>
   1c276:	2301      	movs	r3, #1
   1c278:	e000      	b.n	1c27c <xQueueSemaphoreTake+0x40>
   1c27a:	2300      	movs	r3, #0
   1c27c:	2b00      	cmp	r3, #0
   1c27e:	d101      	bne.n	1c284 <xQueueSemaphoreTake+0x48>
   1c280:	b672      	cpsid	i
   1c282:	e7fe      	b.n	1c282 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   1c284:	4bc5      	ldr	r3, [pc, #788]	; (1c59c <xQueueSemaphoreTake+0x360>)
   1c286:	4798      	blx	r3
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
   1c288:	69fb      	ldr	r3, [r7, #28]
   1c28a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c28c:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
   1c28e:	69bb      	ldr	r3, [r7, #24]
   1c290:	2b00      	cmp	r3, #0
   1c292:	d100      	bne.n	1c296 <xQueueSemaphoreTake+0x5a>
   1c294:	e080      	b.n	1c398 <xQueueSemaphoreTake+0x15c>
			{
				traceQUEUE_RECEIVE( pxQueue );
   1c296:	4bc2      	ldr	r3, [pc, #776]	; (1c5a0 <xQueueSemaphoreTake+0x364>)
   1c298:	4798      	blx	r3
   1c29a:	0003      	movs	r3, r0
   1c29c:	0018      	movs	r0, r3
   1c29e:	4bc1      	ldr	r3, [pc, #772]	; (1c5a4 <xQueueSemaphoreTake+0x368>)
   1c2a0:	4798      	blx	r3
   1c2a2:	0003      	movs	r3, r0
   1c2a4:	001a      	movs	r2, r3
   1c2a6:	4bc0      	ldr	r3, [pc, #768]	; (1c5a8 <xQueueSemaphoreTake+0x36c>)
   1c2a8:	881b      	ldrh	r3, [r3, #0]
   1c2aa:	4013      	ands	r3, r2
   1c2ac:	b29b      	uxth	r3, r3
   1c2ae:	2b00      	cmp	r3, #0
   1c2b0:	d029      	beq.n	1c306 <xQueueSemaphoreTake+0xca>
   1c2b2:	69fb      	ldr	r3, [r7, #28]
   1c2b4:	0018      	movs	r0, r3
   1c2b6:	4bbd      	ldr	r3, [pc, #756]	; (1c5ac <xQueueSemaphoreTake+0x370>)
   1c2b8:	4798      	blx	r3
   1c2ba:	0003      	movs	r3, r0
   1c2bc:	001a      	movs	r2, r3
   1c2be:	4bba      	ldr	r3, [pc, #744]	; (1c5a8 <xQueueSemaphoreTake+0x36c>)
   1c2c0:	881b      	ldrh	r3, [r3, #0]
   1c2c2:	4013      	ands	r3, r2
   1c2c4:	b29b      	uxth	r3, r3
   1c2c6:	2b00      	cmp	r3, #0
   1c2c8:	d01d      	beq.n	1c306 <xQueueSemaphoreTake+0xca>
   1c2ca:	69fb      	ldr	r3, [r7, #28]
   1c2cc:	0018      	movs	r0, r3
   1c2ce:	4bb8      	ldr	r3, [pc, #736]	; (1c5b0 <xQueueSemaphoreTake+0x374>)
   1c2d0:	4798      	blx	r3
   1c2d2:	0003      	movs	r3, r0
   1c2d4:	001a      	movs	r2, r3
   1c2d6:	4bb7      	ldr	r3, [pc, #732]	; (1c5b4 <xQueueSemaphoreTake+0x378>)
   1c2d8:	5c9b      	ldrb	r3, [r3, r2]
   1c2da:	3328      	adds	r3, #40	; 0x28
   1c2dc:	b2db      	uxtb	r3, r3
   1c2de:	001d      	movs	r5, r3
   1c2e0:	69fb      	ldr	r3, [r7, #28]
   1c2e2:	0018      	movs	r0, r3
   1c2e4:	4bb2      	ldr	r3, [pc, #712]	; (1c5b0 <xQueueSemaphoreTake+0x374>)
   1c2e6:	4798      	blx	r3
   1c2e8:	0003      	movs	r3, r0
   1c2ea:	001a      	movs	r2, r3
   1c2ec:	4bb1      	ldr	r3, [pc, #708]	; (1c5b4 <xQueueSemaphoreTake+0x378>)
   1c2ee:	5c9c      	ldrb	r4, [r3, r2]
   1c2f0:	69fb      	ldr	r3, [r7, #28]
   1c2f2:	0018      	movs	r0, r3
   1c2f4:	4bb0      	ldr	r3, [pc, #704]	; (1c5b8 <xQueueSemaphoreTake+0x37c>)
   1c2f6:	4798      	blx	r3
   1c2f8:	0003      	movs	r3, r0
   1c2fa:	b2db      	uxtb	r3, r3
   1c2fc:	001a      	movs	r2, r3
   1c2fe:	0021      	movs	r1, r4
   1c300:	0028      	movs	r0, r5
   1c302:	4bae      	ldr	r3, [pc, #696]	; (1c5bc <xQueueSemaphoreTake+0x380>)
   1c304:	4798      	blx	r3
   1c306:	69fb      	ldr	r3, [r7, #28]
   1c308:	0018      	movs	r0, r3
   1c30a:	4ba9      	ldr	r3, [pc, #676]	; (1c5b0 <xQueueSemaphoreTake+0x374>)
   1c30c:	4798      	blx	r3
   1c30e:	0003      	movs	r3, r0
   1c310:	001a      	movs	r2, r3
   1c312:	4ba8      	ldr	r3, [pc, #672]	; (1c5b4 <xQueueSemaphoreTake+0x378>)
   1c314:	5c9c      	ldrb	r4, [r3, r2]
   1c316:	69fb      	ldr	r3, [r7, #28]
   1c318:	0018      	movs	r0, r3
   1c31a:	4ba7      	ldr	r3, [pc, #668]	; (1c5b8 <xQueueSemaphoreTake+0x37c>)
   1c31c:	4798      	blx	r3
   1c31e:	0003      	movs	r3, r0
   1c320:	b2dd      	uxtb	r5, r3
   1c322:	69fb      	ldr	r3, [r7, #28]
   1c324:	0018      	movs	r0, r3
   1c326:	4ba2      	ldr	r3, [pc, #648]	; (1c5b0 <xQueueSemaphoreTake+0x374>)
   1c328:	4798      	blx	r3
   1c32a:	0003      	movs	r3, r0
   1c32c:	001a      	movs	r2, r3
   1c32e:	4ba1      	ldr	r3, [pc, #644]	; (1c5b4 <xQueueSemaphoreTake+0x378>)
   1c330:	5c9b      	ldrb	r3, [r3, r2]
   1c332:	2b02      	cmp	r3, #2
   1c334:	d108      	bne.n	1c348 <xQueueSemaphoreTake+0x10c>
   1c336:	4b9a      	ldr	r3, [pc, #616]	; (1c5a0 <xQueueSemaphoreTake+0x364>)
   1c338:	4798      	blx	r3
   1c33a:	0003      	movs	r3, r0
   1c33c:	0018      	movs	r0, r3
   1c33e:	4ba0      	ldr	r3, [pc, #640]	; (1c5c0 <xQueueSemaphoreTake+0x384>)
   1c340:	4798      	blx	r3
   1c342:	0003      	movs	r3, r0
   1c344:	b2db      	uxtb	r3, r3
   1c346:	e004      	b.n	1c352 <xQueueSemaphoreTake+0x116>
   1c348:	69fb      	ldr	r3, [r7, #28]
   1c34a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c34c:	b2db      	uxtb	r3, r3
   1c34e:	3b01      	subs	r3, #1
   1c350:	b2db      	uxtb	r3, r3
   1c352:	001a      	movs	r2, r3
   1c354:	0029      	movs	r1, r5
   1c356:	0020      	movs	r0, r4
   1c358:	4b9a      	ldr	r3, [pc, #616]	; (1c5c4 <xQueueSemaphoreTake+0x388>)
   1c35a:	4798      	blx	r3

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
   1c35c:	69bb      	ldr	r3, [r7, #24]
   1c35e:	1e5a      	subs	r2, r3, #1
   1c360:	69fb      	ldr	r3, [r7, #28]
   1c362:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1c364:	69fb      	ldr	r3, [r7, #28]
   1c366:	681b      	ldr	r3, [r3, #0]
   1c368:	2b00      	cmp	r3, #0
   1c36a:	d104      	bne.n	1c376 <xQueueSemaphoreTake+0x13a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
   1c36c:	4b96      	ldr	r3, [pc, #600]	; (1c5c8 <xQueueSemaphoreTake+0x38c>)
   1c36e:	4798      	blx	r3
   1c370:	0002      	movs	r2, r0
   1c372:	69fb      	ldr	r3, [r7, #28]
   1c374:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1c376:	69fb      	ldr	r3, [r7, #28]
   1c378:	691b      	ldr	r3, [r3, #16]
   1c37a:	2b00      	cmp	r3, #0
   1c37c:	d008      	beq.n	1c390 <xQueueSemaphoreTake+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1c37e:	69fb      	ldr	r3, [r7, #28]
   1c380:	3310      	adds	r3, #16
   1c382:	0018      	movs	r0, r3
   1c384:	4b91      	ldr	r3, [pc, #580]	; (1c5cc <xQueueSemaphoreTake+0x390>)
   1c386:	4798      	blx	r3
   1c388:	1e03      	subs	r3, r0, #0
   1c38a:	d001      	beq.n	1c390 <xQueueSemaphoreTake+0x154>
					{
						queueYIELD_IF_USING_PREEMPTION();
   1c38c:	4b90      	ldr	r3, [pc, #576]	; (1c5d0 <xQueueSemaphoreTake+0x394>)
   1c38e:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
   1c390:	4b90      	ldr	r3, [pc, #576]	; (1c5d4 <xQueueSemaphoreTake+0x398>)
   1c392:	4798      	blx	r3
				return pdPASS;
   1c394:	2301      	movs	r3, #1
   1c396:	e18b      	b.n	1c6b0 <xQueueSemaphoreTake+0x474>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
   1c398:	683b      	ldr	r3, [r7, #0]
   1c39a:	2b00      	cmp	r3, #0
   1c39c:	d140      	bne.n	1c420 <xQueueSemaphoreTake+0x1e4>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
   1c39e:	6a3b      	ldr	r3, [r7, #32]
   1c3a0:	2b00      	cmp	r3, #0
   1c3a2:	d001      	beq.n	1c3a8 <xQueueSemaphoreTake+0x16c>
   1c3a4:	b672      	cpsid	i
   1c3a6:	e7fe      	b.n	1c3a6 <xQueueSemaphoreTake+0x16a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
   1c3a8:	4b8a      	ldr	r3, [pc, #552]	; (1c5d4 <xQueueSemaphoreTake+0x398>)
   1c3aa:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
   1c3ac:	4b7c      	ldr	r3, [pc, #496]	; (1c5a0 <xQueueSemaphoreTake+0x364>)
   1c3ae:	4798      	blx	r3
   1c3b0:	0003      	movs	r3, r0
   1c3b2:	0018      	movs	r0, r3
   1c3b4:	4b7b      	ldr	r3, [pc, #492]	; (1c5a4 <xQueueSemaphoreTake+0x368>)
   1c3b6:	4798      	blx	r3
   1c3b8:	0003      	movs	r3, r0
   1c3ba:	001a      	movs	r2, r3
   1c3bc:	4b7a      	ldr	r3, [pc, #488]	; (1c5a8 <xQueueSemaphoreTake+0x36c>)
   1c3be:	881b      	ldrh	r3, [r3, #0]
   1c3c0:	4013      	ands	r3, r2
   1c3c2:	b29b      	uxth	r3, r3
   1c3c4:	2b00      	cmp	r3, #0
   1c3c6:	d029      	beq.n	1c41c <xQueueSemaphoreTake+0x1e0>
   1c3c8:	69fb      	ldr	r3, [r7, #28]
   1c3ca:	0018      	movs	r0, r3
   1c3cc:	4b77      	ldr	r3, [pc, #476]	; (1c5ac <xQueueSemaphoreTake+0x370>)
   1c3ce:	4798      	blx	r3
   1c3d0:	0003      	movs	r3, r0
   1c3d2:	001a      	movs	r2, r3
   1c3d4:	4b74      	ldr	r3, [pc, #464]	; (1c5a8 <xQueueSemaphoreTake+0x36c>)
   1c3d6:	881b      	ldrh	r3, [r3, #0]
   1c3d8:	4013      	ands	r3, r2
   1c3da:	b29b      	uxth	r3, r3
   1c3dc:	2b00      	cmp	r3, #0
   1c3de:	d01d      	beq.n	1c41c <xQueueSemaphoreTake+0x1e0>
   1c3e0:	69fb      	ldr	r3, [r7, #28]
   1c3e2:	0018      	movs	r0, r3
   1c3e4:	4b72      	ldr	r3, [pc, #456]	; (1c5b0 <xQueueSemaphoreTake+0x374>)
   1c3e6:	4798      	blx	r3
   1c3e8:	0003      	movs	r3, r0
   1c3ea:	001a      	movs	r2, r3
   1c3ec:	4b71      	ldr	r3, [pc, #452]	; (1c5b4 <xQueueSemaphoreTake+0x378>)
   1c3ee:	5c9b      	ldrb	r3, [r3, r2]
   1c3f0:	3350      	adds	r3, #80	; 0x50
   1c3f2:	b2db      	uxtb	r3, r3
   1c3f4:	001d      	movs	r5, r3
   1c3f6:	69fb      	ldr	r3, [r7, #28]
   1c3f8:	0018      	movs	r0, r3
   1c3fa:	4b6d      	ldr	r3, [pc, #436]	; (1c5b0 <xQueueSemaphoreTake+0x374>)
   1c3fc:	4798      	blx	r3
   1c3fe:	0003      	movs	r3, r0
   1c400:	001a      	movs	r2, r3
   1c402:	4b6c      	ldr	r3, [pc, #432]	; (1c5b4 <xQueueSemaphoreTake+0x378>)
   1c404:	5c9c      	ldrb	r4, [r3, r2]
   1c406:	69fb      	ldr	r3, [r7, #28]
   1c408:	0018      	movs	r0, r3
   1c40a:	4b6b      	ldr	r3, [pc, #428]	; (1c5b8 <xQueueSemaphoreTake+0x37c>)
   1c40c:	4798      	blx	r3
   1c40e:	0003      	movs	r3, r0
   1c410:	b2db      	uxtb	r3, r3
   1c412:	001a      	movs	r2, r3
   1c414:	0021      	movs	r1, r4
   1c416:	0028      	movs	r0, r5
   1c418:	4b68      	ldr	r3, [pc, #416]	; (1c5bc <xQueueSemaphoreTake+0x380>)
   1c41a:	4798      	blx	r3
					return errQUEUE_EMPTY;
   1c41c:	2300      	movs	r3, #0
   1c41e:	e147      	b.n	1c6b0 <xQueueSemaphoreTake+0x474>
				}
				else if( xEntryTimeSet == pdFALSE )
   1c420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1c422:	2b00      	cmp	r3, #0
   1c424:	d106      	bne.n	1c434 <xQueueSemaphoreTake+0x1f8>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
   1c426:	230c      	movs	r3, #12
   1c428:	18fb      	adds	r3, r7, r3
   1c42a:	0018      	movs	r0, r3
   1c42c:	4b6a      	ldr	r3, [pc, #424]	; (1c5d8 <xQueueSemaphoreTake+0x39c>)
   1c42e:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   1c430:	2301      	movs	r3, #1
   1c432:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
   1c434:	4b67      	ldr	r3, [pc, #412]	; (1c5d4 <xQueueSemaphoreTake+0x398>)
   1c436:	4798      	blx	r3

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
   1c438:	4b68      	ldr	r3, [pc, #416]	; (1c5dc <xQueueSemaphoreTake+0x3a0>)
   1c43a:	4798      	blx	r3
		prvLockQueue( pxQueue );
   1c43c:	4b57      	ldr	r3, [pc, #348]	; (1c59c <xQueueSemaphoreTake+0x360>)
   1c43e:	4798      	blx	r3
   1c440:	69fb      	ldr	r3, [r7, #28]
   1c442:	2244      	movs	r2, #68	; 0x44
   1c444:	5c9b      	ldrb	r3, [r3, r2]
   1c446:	b25b      	sxtb	r3, r3
   1c448:	3301      	adds	r3, #1
   1c44a:	d103      	bne.n	1c454 <xQueueSemaphoreTake+0x218>
   1c44c:	69fb      	ldr	r3, [r7, #28]
   1c44e:	2244      	movs	r2, #68	; 0x44
   1c450:	2100      	movs	r1, #0
   1c452:	5499      	strb	r1, [r3, r2]
   1c454:	69fb      	ldr	r3, [r7, #28]
   1c456:	2245      	movs	r2, #69	; 0x45
   1c458:	5c9b      	ldrb	r3, [r3, r2]
   1c45a:	b25b      	sxtb	r3, r3
   1c45c:	3301      	adds	r3, #1
   1c45e:	d103      	bne.n	1c468 <xQueueSemaphoreTake+0x22c>
   1c460:	69fb      	ldr	r3, [r7, #28]
   1c462:	2245      	movs	r2, #69	; 0x45
   1c464:	2100      	movs	r1, #0
   1c466:	5499      	strb	r1, [r3, r2]
   1c468:	4b5a      	ldr	r3, [pc, #360]	; (1c5d4 <xQueueSemaphoreTake+0x398>)
   1c46a:	4798      	blx	r3

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   1c46c:	003a      	movs	r2, r7
   1c46e:	230c      	movs	r3, #12
   1c470:	18fb      	adds	r3, r7, r3
   1c472:	0011      	movs	r1, r2
   1c474:	0018      	movs	r0, r3
   1c476:	4b5a      	ldr	r3, [pc, #360]	; (1c5e0 <xQueueSemaphoreTake+0x3a4>)
   1c478:	4798      	blx	r3
   1c47a:	1e03      	subs	r3, r0, #0
   1c47c:	d000      	beq.n	1c480 <xQueueSemaphoreTake+0x244>
   1c47e:	e0bd      	b.n	1c5fc <xQueueSemaphoreTake+0x3c0>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1c480:	69fb      	ldr	r3, [r7, #28]
   1c482:	0018      	movs	r0, r3
   1c484:	4b57      	ldr	r3, [pc, #348]	; (1c5e4 <xQueueSemaphoreTake+0x3a8>)
   1c486:	4798      	blx	r3
   1c488:	1e03      	subs	r3, r0, #0
   1c48a:	d100      	bne.n	1c48e <xQueueSemaphoreTake+0x252>
   1c48c:	e07c      	b.n	1c588 <xQueueSemaphoreTake+0x34c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
   1c48e:	4b44      	ldr	r3, [pc, #272]	; (1c5a0 <xQueueSemaphoreTake+0x364>)
   1c490:	4798      	blx	r3
   1c492:	0003      	movs	r3, r0
   1c494:	0018      	movs	r0, r3
   1c496:	4b43      	ldr	r3, [pc, #268]	; (1c5a4 <xQueueSemaphoreTake+0x368>)
   1c498:	4798      	blx	r3
   1c49a:	0003      	movs	r3, r0
   1c49c:	001a      	movs	r2, r3
   1c49e:	4b42      	ldr	r3, [pc, #264]	; (1c5a8 <xQueueSemaphoreTake+0x36c>)
   1c4a0:	881b      	ldrh	r3, [r3, #0]
   1c4a2:	4013      	ands	r3, r2
   1c4a4:	b29b      	uxth	r3, r3
   1c4a6:	2b00      	cmp	r3, #0
   1c4a8:	d029      	beq.n	1c4fe <xQueueSemaphoreTake+0x2c2>
   1c4aa:	69fb      	ldr	r3, [r7, #28]
   1c4ac:	0018      	movs	r0, r3
   1c4ae:	4b3f      	ldr	r3, [pc, #252]	; (1c5ac <xQueueSemaphoreTake+0x370>)
   1c4b0:	4798      	blx	r3
   1c4b2:	0003      	movs	r3, r0
   1c4b4:	001a      	movs	r2, r3
   1c4b6:	4b3c      	ldr	r3, [pc, #240]	; (1c5a8 <xQueueSemaphoreTake+0x36c>)
   1c4b8:	881b      	ldrh	r3, [r3, #0]
   1c4ba:	4013      	ands	r3, r2
   1c4bc:	b29b      	uxth	r3, r3
   1c4be:	2b00      	cmp	r3, #0
   1c4c0:	d01d      	beq.n	1c4fe <xQueueSemaphoreTake+0x2c2>
   1c4c2:	69fb      	ldr	r3, [r7, #28]
   1c4c4:	0018      	movs	r0, r3
   1c4c6:	4b3a      	ldr	r3, [pc, #232]	; (1c5b0 <xQueueSemaphoreTake+0x374>)
   1c4c8:	4798      	blx	r3
   1c4ca:	0003      	movs	r3, r0
   1c4cc:	001a      	movs	r2, r3
   1c4ce:	4b39      	ldr	r3, [pc, #228]	; (1c5b4 <xQueueSemaphoreTake+0x378>)
   1c4d0:	5c9b      	ldrb	r3, [r3, r2]
   1c4d2:	3368      	adds	r3, #104	; 0x68
   1c4d4:	b2db      	uxtb	r3, r3
   1c4d6:	001d      	movs	r5, r3
   1c4d8:	69fb      	ldr	r3, [r7, #28]
   1c4da:	0018      	movs	r0, r3
   1c4dc:	4b34      	ldr	r3, [pc, #208]	; (1c5b0 <xQueueSemaphoreTake+0x374>)
   1c4de:	4798      	blx	r3
   1c4e0:	0003      	movs	r3, r0
   1c4e2:	001a      	movs	r2, r3
   1c4e4:	4b33      	ldr	r3, [pc, #204]	; (1c5b4 <xQueueSemaphoreTake+0x378>)
   1c4e6:	5c9c      	ldrb	r4, [r3, r2]
   1c4e8:	69fb      	ldr	r3, [r7, #28]
   1c4ea:	0018      	movs	r0, r3
   1c4ec:	4b32      	ldr	r3, [pc, #200]	; (1c5b8 <xQueueSemaphoreTake+0x37c>)
   1c4ee:	4798      	blx	r3
   1c4f0:	0003      	movs	r3, r0
   1c4f2:	b2db      	uxtb	r3, r3
   1c4f4:	001a      	movs	r2, r3
   1c4f6:	0021      	movs	r1, r4
   1c4f8:	0028      	movs	r0, r5
   1c4fa:	4b30      	ldr	r3, [pc, #192]	; (1c5bc <xQueueSemaphoreTake+0x380>)
   1c4fc:	4798      	blx	r3
   1c4fe:	69fb      	ldr	r3, [r7, #28]
   1c500:	0018      	movs	r0, r3
   1c502:	4b2b      	ldr	r3, [pc, #172]	; (1c5b0 <xQueueSemaphoreTake+0x374>)
   1c504:	4798      	blx	r3
   1c506:	0003      	movs	r3, r0
   1c508:	001a      	movs	r2, r3
   1c50a:	4b2a      	ldr	r3, [pc, #168]	; (1c5b4 <xQueueSemaphoreTake+0x378>)
   1c50c:	5c9b      	ldrb	r3, [r3, r2]
   1c50e:	2b02      	cmp	r3, #2
   1c510:	d018      	beq.n	1c544 <xQueueSemaphoreTake+0x308>
   1c512:	4b23      	ldr	r3, [pc, #140]	; (1c5a0 <xQueueSemaphoreTake+0x364>)
   1c514:	4798      	blx	r3
   1c516:	0003      	movs	r3, r0
   1c518:	0018      	movs	r0, r3
   1c51a:	4b22      	ldr	r3, [pc, #136]	; (1c5a4 <xQueueSemaphoreTake+0x368>)
   1c51c:	4798      	blx	r3
   1c51e:	0003      	movs	r3, r0
   1c520:	001a      	movs	r2, r3
   1c522:	4b21      	ldr	r3, [pc, #132]	; (1c5a8 <xQueueSemaphoreTake+0x36c>)
   1c524:	881b      	ldrh	r3, [r3, #0]
   1c526:	4013      	ands	r3, r2
   1c528:	b29b      	uxth	r3, r3
   1c52a:	2b00      	cmp	r3, #0
   1c52c:	d00a      	beq.n	1c544 <xQueueSemaphoreTake+0x308>
   1c52e:	4b1c      	ldr	r3, [pc, #112]	; (1c5a0 <xQueueSemaphoreTake+0x364>)
   1c530:	4798      	blx	r3
   1c532:	0003      	movs	r3, r0
   1c534:	0018      	movs	r0, r3
   1c536:	4b22      	ldr	r3, [pc, #136]	; (1c5c0 <xQueueSemaphoreTake+0x384>)
   1c538:	4798      	blx	r3
   1c53a:	0003      	movs	r3, r0
   1c53c:	b2db      	uxtb	r3, r3
   1c53e:	0018      	movs	r0, r3
   1c540:	4b29      	ldr	r3, [pc, #164]	; (1c5e8 <xQueueSemaphoreTake+0x3ac>)
   1c542:	4798      	blx	r3

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1c544:	69fb      	ldr	r3, [r7, #28]
   1c546:	681b      	ldr	r3, [r3, #0]
   1c548:	2b00      	cmp	r3, #0
   1c54a:	d10a      	bne.n	1c562 <xQueueSemaphoreTake+0x326>
					{
						taskENTER_CRITICAL();
   1c54c:	4b13      	ldr	r3, [pc, #76]	; (1c59c <xQueueSemaphoreTake+0x360>)
   1c54e:	4798      	blx	r3
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   1c550:	69fb      	ldr	r3, [r7, #28]
   1c552:	685b      	ldr	r3, [r3, #4]
   1c554:	0018      	movs	r0, r3
   1c556:	4b25      	ldr	r3, [pc, #148]	; (1c5ec <xQueueSemaphoreTake+0x3b0>)
   1c558:	4798      	blx	r3
   1c55a:	0003      	movs	r3, r0
   1c55c:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
   1c55e:	4b1d      	ldr	r3, [pc, #116]	; (1c5d4 <xQueueSemaphoreTake+0x398>)
   1c560:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   1c562:	69fb      	ldr	r3, [r7, #28]
   1c564:	3324      	adds	r3, #36	; 0x24
   1c566:	683a      	ldr	r2, [r7, #0]
   1c568:	0011      	movs	r1, r2
   1c56a:	0018      	movs	r0, r3
   1c56c:	4b20      	ldr	r3, [pc, #128]	; (1c5f0 <xQueueSemaphoreTake+0x3b4>)
   1c56e:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   1c570:	69fb      	ldr	r3, [r7, #28]
   1c572:	0018      	movs	r0, r3
   1c574:	4b1f      	ldr	r3, [pc, #124]	; (1c5f4 <xQueueSemaphoreTake+0x3b8>)
   1c576:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1c578:	4b1f      	ldr	r3, [pc, #124]	; (1c5f8 <xQueueSemaphoreTake+0x3bc>)
   1c57a:	4798      	blx	r3
   1c57c:	1e03      	subs	r3, r0, #0
   1c57e:	d000      	beq.n	1c582 <xQueueSemaphoreTake+0x346>
   1c580:	e680      	b.n	1c284 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
   1c582:	4b13      	ldr	r3, [pc, #76]	; (1c5d0 <xQueueSemaphoreTake+0x394>)
   1c584:	4798      	blx	r3
   1c586:	e67d      	b.n	1c284 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
   1c588:	69fb      	ldr	r3, [r7, #28]
   1c58a:	0018      	movs	r0, r3
   1c58c:	4b19      	ldr	r3, [pc, #100]	; (1c5f4 <xQueueSemaphoreTake+0x3b8>)
   1c58e:	4798      	blx	r3
				( void ) xTaskResumeAll();
   1c590:	4b19      	ldr	r3, [pc, #100]	; (1c5f8 <xQueueSemaphoreTake+0x3bc>)
   1c592:	4798      	blx	r3
   1c594:	e676      	b.n	1c284 <xQueueSemaphoreTake+0x48>
   1c596:	46c0      	nop			; (mov r8, r8)
   1c598:	0001dcb9 	.word	0x0001dcb9
   1c59c:	0001af99 	.word	0x0001af99
   1c5a0:	00019231 	.word	0x00019231
   1c5a4:	00018f95 	.word	0x00018f95
   1c5a8:	20000110 	.word	0x20000110
   1c5ac:	00019055 	.word	0x00019055
   1c5b0:	00018f55 	.word	0x00018f55
   1c5b4:	20000104 	.word	0x20000104
   1c5b8:	00019035 	.word	0x00019035
   1c5bc:	0001998d 	.word	0x0001998d
   1c5c0:	00018f75 	.word	0x00018f75
   1c5c4:	00019fe9 	.word	0x00019fe9
   1c5c8:	0001e185 	.word	0x0001e185
   1c5cc:	0001d829 	.word	0x0001d829
   1c5d0:	0001af81 	.word	0x0001af81
   1c5d4:	0001afbd 	.word	0x0001afbd
   1c5d8:	0001d969 	.word	0x0001d969
   1c5dc:	0001d251 	.word	0x0001d251
   1c5e0:	0001d991 	.word	0x0001d991
   1c5e4:	0001c985 	.word	0x0001c985
   1c5e8:	0001a125 	.word	0x0001a125
   1c5ec:	0001dcf1 	.word	0x0001dcf1
   1c5f0:	0001d705 	.word	0x0001d705
   1c5f4:	0001c895 	.word	0x0001c895
   1c5f8:	0001d269 	.word	0x0001d269
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
   1c5fc:	69fb      	ldr	r3, [r7, #28]
   1c5fe:	0018      	movs	r0, r3
   1c600:	4b2d      	ldr	r3, [pc, #180]	; (1c6b8 <xQueueSemaphoreTake+0x47c>)
   1c602:	4798      	blx	r3
			( void ) xTaskResumeAll();
   1c604:	4b2d      	ldr	r3, [pc, #180]	; (1c6bc <xQueueSemaphoreTake+0x480>)
   1c606:	4798      	blx	r3

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   1c608:	69fb      	ldr	r3, [r7, #28]
   1c60a:	0018      	movs	r0, r3
   1c60c:	4b2c      	ldr	r3, [pc, #176]	; (1c6c0 <xQueueSemaphoreTake+0x484>)
   1c60e:	4798      	blx	r3
   1c610:	1e03      	subs	r3, r0, #0
   1c612:	d100      	bne.n	1c616 <xQueueSemaphoreTake+0x3da>
   1c614:	e636      	b.n	1c284 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
   1c616:	6a3b      	ldr	r3, [r7, #32]
   1c618:	2b00      	cmp	r3, #0
   1c61a:	d010      	beq.n	1c63e <xQueueSemaphoreTake+0x402>
					{
						taskENTER_CRITICAL();
   1c61c:	4b29      	ldr	r3, [pc, #164]	; (1c6c4 <xQueueSemaphoreTake+0x488>)
   1c61e:	4798      	blx	r3
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
   1c620:	69fb      	ldr	r3, [r7, #28]
   1c622:	0018      	movs	r0, r3
   1c624:	4b28      	ldr	r3, [pc, #160]	; (1c6c8 <xQueueSemaphoreTake+0x48c>)
   1c626:	4798      	blx	r3
   1c628:	0003      	movs	r3, r0
   1c62a:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
   1c62c:	69fb      	ldr	r3, [r7, #28]
   1c62e:	685b      	ldr	r3, [r3, #4]
   1c630:	697a      	ldr	r2, [r7, #20]
   1c632:	0011      	movs	r1, r2
   1c634:	0018      	movs	r0, r3
   1c636:	4b25      	ldr	r3, [pc, #148]	; (1c6cc <xQueueSemaphoreTake+0x490>)
   1c638:	4798      	blx	r3
						}
						taskEXIT_CRITICAL();
   1c63a:	4b25      	ldr	r3, [pc, #148]	; (1c6d0 <xQueueSemaphoreTake+0x494>)
   1c63c:	4798      	blx	r3
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
   1c63e:	4b25      	ldr	r3, [pc, #148]	; (1c6d4 <xQueueSemaphoreTake+0x498>)
   1c640:	4798      	blx	r3
   1c642:	0003      	movs	r3, r0
   1c644:	0018      	movs	r0, r3
   1c646:	4b24      	ldr	r3, [pc, #144]	; (1c6d8 <xQueueSemaphoreTake+0x49c>)
   1c648:	4798      	blx	r3
   1c64a:	0003      	movs	r3, r0
   1c64c:	001a      	movs	r2, r3
   1c64e:	4b23      	ldr	r3, [pc, #140]	; (1c6dc <xQueueSemaphoreTake+0x4a0>)
   1c650:	881b      	ldrh	r3, [r3, #0]
   1c652:	4013      	ands	r3, r2
   1c654:	b29b      	uxth	r3, r3
   1c656:	2b00      	cmp	r3, #0
   1c658:	d029      	beq.n	1c6ae <xQueueSemaphoreTake+0x472>
   1c65a:	69fb      	ldr	r3, [r7, #28]
   1c65c:	0018      	movs	r0, r3
   1c65e:	4b20      	ldr	r3, [pc, #128]	; (1c6e0 <xQueueSemaphoreTake+0x4a4>)
   1c660:	4798      	blx	r3
   1c662:	0003      	movs	r3, r0
   1c664:	001a      	movs	r2, r3
   1c666:	4b1d      	ldr	r3, [pc, #116]	; (1c6dc <xQueueSemaphoreTake+0x4a0>)
   1c668:	881b      	ldrh	r3, [r3, #0]
   1c66a:	4013      	ands	r3, r2
   1c66c:	b29b      	uxth	r3, r3
   1c66e:	2b00      	cmp	r3, #0
   1c670:	d01d      	beq.n	1c6ae <xQueueSemaphoreTake+0x472>
   1c672:	69fb      	ldr	r3, [r7, #28]
   1c674:	0018      	movs	r0, r3
   1c676:	4b1b      	ldr	r3, [pc, #108]	; (1c6e4 <xQueueSemaphoreTake+0x4a8>)
   1c678:	4798      	blx	r3
   1c67a:	0003      	movs	r3, r0
   1c67c:	001a      	movs	r2, r3
   1c67e:	4b1a      	ldr	r3, [pc, #104]	; (1c6e8 <xQueueSemaphoreTake+0x4ac>)
   1c680:	5c9b      	ldrb	r3, [r3, r2]
   1c682:	3350      	adds	r3, #80	; 0x50
   1c684:	b2db      	uxtb	r3, r3
   1c686:	001d      	movs	r5, r3
   1c688:	69fb      	ldr	r3, [r7, #28]
   1c68a:	0018      	movs	r0, r3
   1c68c:	4b15      	ldr	r3, [pc, #84]	; (1c6e4 <xQueueSemaphoreTake+0x4a8>)
   1c68e:	4798      	blx	r3
   1c690:	0003      	movs	r3, r0
   1c692:	001a      	movs	r2, r3
   1c694:	4b14      	ldr	r3, [pc, #80]	; (1c6e8 <xQueueSemaphoreTake+0x4ac>)
   1c696:	5c9c      	ldrb	r4, [r3, r2]
   1c698:	69fb      	ldr	r3, [r7, #28]
   1c69a:	0018      	movs	r0, r3
   1c69c:	4b13      	ldr	r3, [pc, #76]	; (1c6ec <xQueueSemaphoreTake+0x4b0>)
   1c69e:	4798      	blx	r3
   1c6a0:	0003      	movs	r3, r0
   1c6a2:	b2db      	uxtb	r3, r3
   1c6a4:	001a      	movs	r2, r3
   1c6a6:	0021      	movs	r1, r4
   1c6a8:	0028      	movs	r0, r5
   1c6aa:	4b11      	ldr	r3, [pc, #68]	; (1c6f0 <xQueueSemaphoreTake+0x4b4>)
   1c6ac:	4798      	blx	r3
				return errQUEUE_EMPTY;
   1c6ae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
   1c6b0:	0018      	movs	r0, r3
   1c6b2:	46bd      	mov	sp, r7
   1c6b4:	b00a      	add	sp, #40	; 0x28
   1c6b6:	bdb0      	pop	{r4, r5, r7, pc}
   1c6b8:	0001c895 	.word	0x0001c895
   1c6bc:	0001d269 	.word	0x0001d269
   1c6c0:	0001c985 	.word	0x0001c985
   1c6c4:	0001af99 	.word	0x0001af99
   1c6c8:	0001c737 	.word	0x0001c737
   1c6cc:	0001dfe9 	.word	0x0001dfe9
   1c6d0:	0001afbd 	.word	0x0001afbd
   1c6d4:	00019231 	.word	0x00019231
   1c6d8:	00018f95 	.word	0x00018f95
   1c6dc:	20000110 	.word	0x20000110
   1c6e0:	00019055 	.word	0x00019055
   1c6e4:	00018f55 	.word	0x00018f55
   1c6e8:	20000104 	.word	0x20000104
   1c6ec:	00019035 	.word	0x00019035
   1c6f0:	0001998d 	.word	0x0001998d

0001c6f4 <uxQueueGetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
	{
   1c6f4:	b580      	push	{r7, lr}
   1c6f6:	b082      	sub	sp, #8
   1c6f8:	af00      	add	r7, sp, #0
   1c6fa:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
   1c6fc:	687b      	ldr	r3, [r7, #4]
   1c6fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	}
   1c700:	0018      	movs	r0, r3
   1c702:	46bd      	mov	sp, r7
   1c704:	b002      	add	sp, #8
   1c706:	bd80      	pop	{r7, pc}

0001c708 <vQueueSetQueueNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
	{
   1c708:	b580      	push	{r7, lr}
   1c70a:	b082      	sub	sp, #8
   1c70c:	af00      	add	r7, sp, #0
   1c70e:	6078      	str	r0, [r7, #4]
   1c710:	6039      	str	r1, [r7, #0]
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
   1c712:	687b      	ldr	r3, [r7, #4]
   1c714:	683a      	ldr	r2, [r7, #0]
   1c716:	64da      	str	r2, [r3, #76]	; 0x4c
	}
   1c718:	46c0      	nop			; (mov r8, r8)
   1c71a:	46bd      	mov	sp, r7
   1c71c:	b002      	add	sp, #8
   1c71e:	bd80      	pop	{r7, pc}

0001c720 <ucQueueGetQueueType>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
   1c720:	b580      	push	{r7, lr}
   1c722:	b082      	sub	sp, #8
   1c724:	af00      	add	r7, sp, #0
   1c726:	6078      	str	r0, [r7, #4]
		return ( ( Queue_t * ) xQueue )->ucQueueType;
   1c728:	687b      	ldr	r3, [r7, #4]
   1c72a:	2250      	movs	r2, #80	; 0x50
   1c72c:	5c9b      	ldrb	r3, [r3, r2]
	}
   1c72e:	0018      	movs	r0, r3
   1c730:	46bd      	mov	sp, r7
   1c732:	b002      	add	sp, #8
   1c734:	bd80      	pop	{r7, pc}

0001c736 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
   1c736:	b580      	push	{r7, lr}
   1c738:	b084      	sub	sp, #16
   1c73a:	af00      	add	r7, sp, #0
   1c73c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
   1c73e:	687b      	ldr	r3, [r7, #4]
   1c740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c742:	2b00      	cmp	r3, #0
   1c744:	d006      	beq.n	1c754 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
   1c746:	687b      	ldr	r3, [r7, #4]
   1c748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1c74a:	681b      	ldr	r3, [r3, #0]
   1c74c:	2205      	movs	r2, #5
   1c74e:	1ad3      	subs	r3, r2, r3
   1c750:	60fb      	str	r3, [r7, #12]
   1c752:	e001      	b.n	1c758 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
   1c754:	2300      	movs	r3, #0
   1c756:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
   1c758:	68fb      	ldr	r3, [r7, #12]
	}
   1c75a:	0018      	movs	r0, r3
   1c75c:	46bd      	mov	sp, r7
   1c75e:	b004      	add	sp, #16
   1c760:	bd80      	pop	{r7, pc}
	...

0001c764 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
   1c764:	b580      	push	{r7, lr}
   1c766:	b086      	sub	sp, #24
   1c768:	af00      	add	r7, sp, #0
   1c76a:	60f8      	str	r0, [r7, #12]
   1c76c:	60b9      	str	r1, [r7, #8]
   1c76e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
   1c770:	2300      	movs	r3, #0
   1c772:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
   1c774:	68fb      	ldr	r3, [r7, #12]
   1c776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c778:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
   1c77a:	68fb      	ldr	r3, [r7, #12]
   1c77c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c77e:	2b00      	cmp	r3, #0
   1c780:	d10e      	bne.n	1c7a0 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   1c782:	68fb      	ldr	r3, [r7, #12]
   1c784:	681b      	ldr	r3, [r3, #0]
   1c786:	2b00      	cmp	r3, #0
   1c788:	d14e      	bne.n	1c828 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   1c78a:	68fb      	ldr	r3, [r7, #12]
   1c78c:	685b      	ldr	r3, [r3, #4]
   1c78e:	0018      	movs	r0, r3
   1c790:	4b2a      	ldr	r3, [pc, #168]	; (1c83c <prvCopyDataToQueue+0xd8>)
   1c792:	4798      	blx	r3
   1c794:	0003      	movs	r3, r0
   1c796:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
   1c798:	68fb      	ldr	r3, [r7, #12]
   1c79a:	2200      	movs	r2, #0
   1c79c:	605a      	str	r2, [r3, #4]
   1c79e:	e043      	b.n	1c828 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
   1c7a0:	687b      	ldr	r3, [r7, #4]
   1c7a2:	2b00      	cmp	r3, #0
   1c7a4:	d119      	bne.n	1c7da <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
   1c7a6:	68fb      	ldr	r3, [r7, #12]
   1c7a8:	6898      	ldr	r0, [r3, #8]
   1c7aa:	68fb      	ldr	r3, [r7, #12]
   1c7ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1c7ae:	68bb      	ldr	r3, [r7, #8]
   1c7b0:	0019      	movs	r1, r3
   1c7b2:	4b23      	ldr	r3, [pc, #140]	; (1c840 <prvCopyDataToQueue+0xdc>)
   1c7b4:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   1c7b6:	68fb      	ldr	r3, [r7, #12]
   1c7b8:	689a      	ldr	r2, [r3, #8]
   1c7ba:	68fb      	ldr	r3, [r7, #12]
   1c7bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c7be:	18d2      	adds	r2, r2, r3
   1c7c0:	68fb      	ldr	r3, [r7, #12]
   1c7c2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1c7c4:	68fb      	ldr	r3, [r7, #12]
   1c7c6:	689a      	ldr	r2, [r3, #8]
   1c7c8:	68fb      	ldr	r3, [r7, #12]
   1c7ca:	685b      	ldr	r3, [r3, #4]
   1c7cc:	429a      	cmp	r2, r3
   1c7ce:	d32b      	bcc.n	1c828 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   1c7d0:	68fb      	ldr	r3, [r7, #12]
   1c7d2:	681a      	ldr	r2, [r3, #0]
   1c7d4:	68fb      	ldr	r3, [r7, #12]
   1c7d6:	609a      	str	r2, [r3, #8]
   1c7d8:	e026      	b.n	1c828 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1c7da:	68fb      	ldr	r3, [r7, #12]
   1c7dc:	68d8      	ldr	r0, [r3, #12]
   1c7de:	68fb      	ldr	r3, [r7, #12]
   1c7e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1c7e2:	68bb      	ldr	r3, [r7, #8]
   1c7e4:	0019      	movs	r1, r3
   1c7e6:	4b16      	ldr	r3, [pc, #88]	; (1c840 <prvCopyDataToQueue+0xdc>)
   1c7e8:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
   1c7ea:	68fb      	ldr	r3, [r7, #12]
   1c7ec:	68da      	ldr	r2, [r3, #12]
   1c7ee:	68fb      	ldr	r3, [r7, #12]
   1c7f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c7f2:	425b      	negs	r3, r3
   1c7f4:	18d2      	adds	r2, r2, r3
   1c7f6:	68fb      	ldr	r3, [r7, #12]
   1c7f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
   1c7fa:	68fb      	ldr	r3, [r7, #12]
   1c7fc:	68da      	ldr	r2, [r3, #12]
   1c7fe:	68fb      	ldr	r3, [r7, #12]
   1c800:	681b      	ldr	r3, [r3, #0]
   1c802:	429a      	cmp	r2, r3
   1c804:	d207      	bcs.n	1c816 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   1c806:	68fb      	ldr	r3, [r7, #12]
   1c808:	685a      	ldr	r2, [r3, #4]
   1c80a:	68fb      	ldr	r3, [r7, #12]
   1c80c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c80e:	425b      	negs	r3, r3
   1c810:	18d2      	adds	r2, r2, r3
   1c812:	68fb      	ldr	r3, [r7, #12]
   1c814:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
   1c816:	687b      	ldr	r3, [r7, #4]
   1c818:	2b02      	cmp	r3, #2
   1c81a:	d105      	bne.n	1c828 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
   1c81c:	693b      	ldr	r3, [r7, #16]
   1c81e:	2b00      	cmp	r3, #0
   1c820:	d002      	beq.n	1c828 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
   1c822:	693b      	ldr	r3, [r7, #16]
   1c824:	3b01      	subs	r3, #1
   1c826:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
   1c828:	693b      	ldr	r3, [r7, #16]
   1c82a:	1c5a      	adds	r2, r3, #1
   1c82c:	68fb      	ldr	r3, [r7, #12]
   1c82e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
   1c830:	697b      	ldr	r3, [r7, #20]
}
   1c832:	0018      	movs	r0, r3
   1c834:	46bd      	mov	sp, r7
   1c836:	b006      	add	sp, #24
   1c838:	bd80      	pop	{r7, pc}
   1c83a:	46c0      	nop			; (mov r8, r8)
   1c83c:	0001de81 	.word	0x0001de81
   1c840:	000357f9 	.word	0x000357f9

0001c844 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
   1c844:	b580      	push	{r7, lr}
   1c846:	b082      	sub	sp, #8
   1c848:	af00      	add	r7, sp, #0
   1c84a:	6078      	str	r0, [r7, #4]
   1c84c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
   1c84e:	687b      	ldr	r3, [r7, #4]
   1c850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c852:	2b00      	cmp	r3, #0
   1c854:	d018      	beq.n	1c888 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
   1c856:	687b      	ldr	r3, [r7, #4]
   1c858:	68da      	ldr	r2, [r3, #12]
   1c85a:	687b      	ldr	r3, [r7, #4]
   1c85c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1c85e:	18d2      	adds	r2, r2, r3
   1c860:	687b      	ldr	r3, [r7, #4]
   1c862:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
   1c864:	687b      	ldr	r3, [r7, #4]
   1c866:	68da      	ldr	r2, [r3, #12]
   1c868:	687b      	ldr	r3, [r7, #4]
   1c86a:	685b      	ldr	r3, [r3, #4]
   1c86c:	429a      	cmp	r2, r3
   1c86e:	d303      	bcc.n	1c878 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
   1c870:	687b      	ldr	r3, [r7, #4]
   1c872:	681a      	ldr	r2, [r3, #0]
   1c874:	687b      	ldr	r3, [r7, #4]
   1c876:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
   1c878:	687b      	ldr	r3, [r7, #4]
   1c87a:	68d9      	ldr	r1, [r3, #12]
   1c87c:	687b      	ldr	r3, [r7, #4]
   1c87e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   1c880:	683b      	ldr	r3, [r7, #0]
   1c882:	0018      	movs	r0, r3
   1c884:	4b02      	ldr	r3, [pc, #8]	; (1c890 <prvCopyDataFromQueue+0x4c>)
   1c886:	4798      	blx	r3
	}
}
   1c888:	46c0      	nop			; (mov r8, r8)
   1c88a:	46bd      	mov	sp, r7
   1c88c:	b002      	add	sp, #8
   1c88e:	bd80      	pop	{r7, pc}
   1c890:	000357f9 	.word	0x000357f9

0001c894 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
   1c894:	b580      	push	{r7, lr}
   1c896:	b084      	sub	sp, #16
   1c898:	af00      	add	r7, sp, #0
   1c89a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   1c89c:	4b34      	ldr	r3, [pc, #208]	; (1c970 <prvUnlockQueue+0xdc>)
   1c89e:	4798      	blx	r3
	{
		int8_t cTxLock = pxQueue->cTxLock;
   1c8a0:	230f      	movs	r3, #15
   1c8a2:	18fb      	adds	r3, r7, r3
   1c8a4:	687a      	ldr	r2, [r7, #4]
   1c8a6:	2145      	movs	r1, #69	; 0x45
   1c8a8:	5c52      	ldrb	r2, [r2, r1]
   1c8aa:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1c8ac:	e022      	b.n	1c8f4 <prvUnlockQueue+0x60>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			#if ( configUSE_QUEUE_SETS == 1 )
			{
				if( pxQueue->pxQueueSetContainer != NULL )
   1c8ae:	687b      	ldr	r3, [r7, #4]
   1c8b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1c8b2:	2b00      	cmp	r3, #0
   1c8b4:	d009      	beq.n	1c8ca <prvUnlockQueue+0x36>
				{
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
   1c8b6:	687b      	ldr	r3, [r7, #4]
   1c8b8:	2100      	movs	r1, #0
   1c8ba:	0018      	movs	r0, r3
   1c8bc:	4b2d      	ldr	r3, [pc, #180]	; (1c974 <prvUnlockQueue+0xe0>)
   1c8be:	4798      	blx	r3
   1c8c0:	1e03      	subs	r3, r0, #0
   1c8c2:	d00f      	beq.n	1c8e4 <prvUnlockQueue+0x50>
					{
						/* The queue is a member of a queue set, and posting to
						the queue set caused a higher priority task to unblock.
						A context switch is required. */
						vTaskMissedYield();
   1c8c4:	4b2c      	ldr	r3, [pc, #176]	; (1c978 <prvUnlockQueue+0xe4>)
   1c8c6:	4798      	blx	r3
   1c8c8:	e00c      	b.n	1c8e4 <prvUnlockQueue+0x50>
				else
				{
					/* Tasks that are removed from the event list will get
					added to the pending ready list as the scheduler is still
					suspended. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   1c8ca:	687b      	ldr	r3, [r7, #4]
   1c8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1c8ce:	2b00      	cmp	r3, #0
   1c8d0:	d017      	beq.n	1c902 <prvUnlockQueue+0x6e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   1c8d2:	687b      	ldr	r3, [r7, #4]
   1c8d4:	3324      	adds	r3, #36	; 0x24
   1c8d6:	0018      	movs	r0, r3
   1c8d8:	4b28      	ldr	r3, [pc, #160]	; (1c97c <prvUnlockQueue+0xe8>)
   1c8da:	4798      	blx	r3
   1c8dc:	1e03      	subs	r3, r0, #0
   1c8de:	d001      	beq.n	1c8e4 <prvUnlockQueue+0x50>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							vTaskMissedYield();
   1c8e0:	4b25      	ldr	r3, [pc, #148]	; (1c978 <prvUnlockQueue+0xe4>)
   1c8e2:	4798      	blx	r3
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
   1c8e4:	230f      	movs	r3, #15
   1c8e6:	18fb      	adds	r3, r7, r3
   1c8e8:	781b      	ldrb	r3, [r3, #0]
   1c8ea:	3b01      	subs	r3, #1
   1c8ec:	b2da      	uxtb	r2, r3
   1c8ee:	230f      	movs	r3, #15
   1c8f0:	18fb      	adds	r3, r7, r3
   1c8f2:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
   1c8f4:	230f      	movs	r3, #15
   1c8f6:	18fb      	adds	r3, r7, r3
   1c8f8:	781b      	ldrb	r3, [r3, #0]
   1c8fa:	b25b      	sxtb	r3, r3
   1c8fc:	2b00      	cmp	r3, #0
   1c8fe:	dcd6      	bgt.n	1c8ae <prvUnlockQueue+0x1a>
   1c900:	e000      	b.n	1c904 <prvUnlockQueue+0x70>
						break;
   1c902:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
   1c904:	687b      	ldr	r3, [r7, #4]
   1c906:	2245      	movs	r2, #69	; 0x45
   1c908:	21ff      	movs	r1, #255	; 0xff
   1c90a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1c90c:	4b1c      	ldr	r3, [pc, #112]	; (1c980 <prvUnlockQueue+0xec>)
   1c90e:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   1c910:	4b17      	ldr	r3, [pc, #92]	; (1c970 <prvUnlockQueue+0xdc>)
   1c912:	4798      	blx	r3
	{
		int8_t cRxLock = pxQueue->cRxLock;
   1c914:	230e      	movs	r3, #14
   1c916:	18fb      	adds	r3, r7, r3
   1c918:	687a      	ldr	r2, [r7, #4]
   1c91a:	2144      	movs	r1, #68	; 0x44
   1c91c:	5c52      	ldrb	r2, [r2, r1]
   1c91e:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
   1c920:	e014      	b.n	1c94c <prvUnlockQueue+0xb8>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   1c922:	687b      	ldr	r3, [r7, #4]
   1c924:	691b      	ldr	r3, [r3, #16]
   1c926:	2b00      	cmp	r3, #0
   1c928:	d017      	beq.n	1c95a <prvUnlockQueue+0xc6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   1c92a:	687b      	ldr	r3, [r7, #4]
   1c92c:	3310      	adds	r3, #16
   1c92e:	0018      	movs	r0, r3
   1c930:	4b12      	ldr	r3, [pc, #72]	; (1c97c <prvUnlockQueue+0xe8>)
   1c932:	4798      	blx	r3
   1c934:	1e03      	subs	r3, r0, #0
   1c936:	d001      	beq.n	1c93c <prvUnlockQueue+0xa8>
				{
					vTaskMissedYield();
   1c938:	4b0f      	ldr	r3, [pc, #60]	; (1c978 <prvUnlockQueue+0xe4>)
   1c93a:	4798      	blx	r3
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
   1c93c:	230e      	movs	r3, #14
   1c93e:	18fb      	adds	r3, r7, r3
   1c940:	781b      	ldrb	r3, [r3, #0]
   1c942:	3b01      	subs	r3, #1
   1c944:	b2da      	uxtb	r2, r3
   1c946:	230e      	movs	r3, #14
   1c948:	18fb      	adds	r3, r7, r3
   1c94a:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
   1c94c:	230e      	movs	r3, #14
   1c94e:	18fb      	adds	r3, r7, r3
   1c950:	781b      	ldrb	r3, [r3, #0]
   1c952:	b25b      	sxtb	r3, r3
   1c954:	2b00      	cmp	r3, #0
   1c956:	dce4      	bgt.n	1c922 <prvUnlockQueue+0x8e>
   1c958:	e000      	b.n	1c95c <prvUnlockQueue+0xc8>
			}
			else
			{
				break;
   1c95a:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
   1c95c:	687b      	ldr	r3, [r7, #4]
   1c95e:	2244      	movs	r2, #68	; 0x44
   1c960:	21ff      	movs	r1, #255	; 0xff
   1c962:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
   1c964:	4b06      	ldr	r3, [pc, #24]	; (1c980 <prvUnlockQueue+0xec>)
   1c966:	4798      	blx	r3
}
   1c968:	46c0      	nop			; (mov r8, r8)
   1c96a:	46bd      	mov	sp, r7
   1c96c:	b004      	add	sp, #16
   1c96e:	bd80      	pop	{r7, pc}
   1c970:	0001af99 	.word	0x0001af99
   1c974:	0001ca69 	.word	0x0001ca69
   1c978:	0001da3d 	.word	0x0001da3d
   1c97c:	0001d829 	.word	0x0001d829
   1c980:	0001afbd 	.word	0x0001afbd

0001c984 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
   1c984:	b580      	push	{r7, lr}
   1c986:	b084      	sub	sp, #16
   1c988:	af00      	add	r7, sp, #0
   1c98a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1c98c:	4b08      	ldr	r3, [pc, #32]	; (1c9b0 <prvIsQueueEmpty+0x2c>)
   1c98e:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
   1c990:	687b      	ldr	r3, [r7, #4]
   1c992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1c994:	2b00      	cmp	r3, #0
   1c996:	d102      	bne.n	1c99e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
   1c998:	2301      	movs	r3, #1
   1c99a:	60fb      	str	r3, [r7, #12]
   1c99c:	e001      	b.n	1c9a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
   1c99e:	2300      	movs	r3, #0
   1c9a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1c9a2:	4b04      	ldr	r3, [pc, #16]	; (1c9b4 <prvIsQueueEmpty+0x30>)
   1c9a4:	4798      	blx	r3

	return xReturn;
   1c9a6:	68fb      	ldr	r3, [r7, #12]
}
   1c9a8:	0018      	movs	r0, r3
   1c9aa:	46bd      	mov	sp, r7
   1c9ac:	b004      	add	sp, #16
   1c9ae:	bd80      	pop	{r7, pc}
   1c9b0:	0001af99 	.word	0x0001af99
   1c9b4:	0001afbd 	.word	0x0001afbd

0001c9b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
   1c9b8:	b580      	push	{r7, lr}
   1c9ba:	b084      	sub	sp, #16
   1c9bc:	af00      	add	r7, sp, #0
   1c9be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
   1c9c0:	4b09      	ldr	r3, [pc, #36]	; (1c9e8 <prvIsQueueFull+0x30>)
   1c9c2:	4798      	blx	r3
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
   1c9c4:	687b      	ldr	r3, [r7, #4]
   1c9c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1c9c8:	687b      	ldr	r3, [r7, #4]
   1c9ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1c9cc:	429a      	cmp	r2, r3
   1c9ce:	d102      	bne.n	1c9d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
   1c9d0:	2301      	movs	r3, #1
   1c9d2:	60fb      	str	r3, [r7, #12]
   1c9d4:	e001      	b.n	1c9da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
   1c9d6:	2300      	movs	r3, #0
   1c9d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
   1c9da:	4b04      	ldr	r3, [pc, #16]	; (1c9ec <prvIsQueueFull+0x34>)
   1c9dc:	4798      	blx	r3

	return xReturn;
   1c9de:	68fb      	ldr	r3, [r7, #12]
}
   1c9e0:	0018      	movs	r0, r3
   1c9e2:	46bd      	mov	sp, r7
   1c9e4:	b004      	add	sp, #16
   1c9e6:	bd80      	pop	{r7, pc}
   1c9e8:	0001af99 	.word	0x0001af99
   1c9ec:	0001afbd 	.word	0x0001afbd

0001c9f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1c9f0:	b580      	push	{r7, lr}
   1c9f2:	b086      	sub	sp, #24
   1c9f4:	af00      	add	r7, sp, #0
   1c9f6:	60f8      	str	r0, [r7, #12]
   1c9f8:	60b9      	str	r1, [r7, #8]
   1c9fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
   1c9fc:	68fb      	ldr	r3, [r7, #12]
   1c9fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   1ca00:	4b15      	ldr	r3, [pc, #84]	; (1ca58 <vQueueWaitForMessageRestricted+0x68>)
   1ca02:	4798      	blx	r3
   1ca04:	697b      	ldr	r3, [r7, #20]
   1ca06:	2244      	movs	r2, #68	; 0x44
   1ca08:	5c9b      	ldrb	r3, [r3, r2]
   1ca0a:	b25b      	sxtb	r3, r3
   1ca0c:	3301      	adds	r3, #1
   1ca0e:	d103      	bne.n	1ca18 <vQueueWaitForMessageRestricted+0x28>
   1ca10:	697b      	ldr	r3, [r7, #20]
   1ca12:	2244      	movs	r2, #68	; 0x44
   1ca14:	2100      	movs	r1, #0
   1ca16:	5499      	strb	r1, [r3, r2]
   1ca18:	697b      	ldr	r3, [r7, #20]
   1ca1a:	2245      	movs	r2, #69	; 0x45
   1ca1c:	5c9b      	ldrb	r3, [r3, r2]
   1ca1e:	b25b      	sxtb	r3, r3
   1ca20:	3301      	adds	r3, #1
   1ca22:	d103      	bne.n	1ca2c <vQueueWaitForMessageRestricted+0x3c>
   1ca24:	697b      	ldr	r3, [r7, #20]
   1ca26:	2245      	movs	r2, #69	; 0x45
   1ca28:	2100      	movs	r1, #0
   1ca2a:	5499      	strb	r1, [r3, r2]
   1ca2c:	4b0b      	ldr	r3, [pc, #44]	; (1ca5c <vQueueWaitForMessageRestricted+0x6c>)
   1ca2e:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
   1ca30:	697b      	ldr	r3, [r7, #20]
   1ca32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1ca34:	2b00      	cmp	r3, #0
   1ca36:	d106      	bne.n	1ca46 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
   1ca38:	697b      	ldr	r3, [r7, #20]
   1ca3a:	3324      	adds	r3, #36	; 0x24
   1ca3c:	687a      	ldr	r2, [r7, #4]
   1ca3e:	68b9      	ldr	r1, [r7, #8]
   1ca40:	0018      	movs	r0, r3
   1ca42:	4b07      	ldr	r3, [pc, #28]	; (1ca60 <vQueueWaitForMessageRestricted+0x70>)
   1ca44:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
   1ca46:	697b      	ldr	r3, [r7, #20]
   1ca48:	0018      	movs	r0, r3
   1ca4a:	4b06      	ldr	r3, [pc, #24]	; (1ca64 <vQueueWaitForMessageRestricted+0x74>)
   1ca4c:	4798      	blx	r3
	}
   1ca4e:	46c0      	nop			; (mov r8, r8)
   1ca50:	46bd      	mov	sp, r7
   1ca52:	b006      	add	sp, #24
   1ca54:	bd80      	pop	{r7, pc}
   1ca56:	46c0      	nop			; (mov r8, r8)
   1ca58:	0001af99 	.word	0x0001af99
   1ca5c:	0001afbd 	.word	0x0001afbd
   1ca60:	0001d749 	.word	0x0001d749
   1ca64:	0001c895 	.word	0x0001c895

0001ca68 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
   1ca68:	b5b0      	push	{r4, r5, r7, lr}
   1ca6a:	b086      	sub	sp, #24
   1ca6c:	af00      	add	r7, sp, #0
   1ca6e:	6078      	str	r0, [r7, #4]
   1ca70:	6039      	str	r1, [r7, #0]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
   1ca72:	687b      	ldr	r3, [r7, #4]
   1ca74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1ca76:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
   1ca78:	2300      	movs	r3, #0
   1ca7a:	617b      	str	r3, [r7, #20]

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
   1ca7c:	693b      	ldr	r3, [r7, #16]
   1ca7e:	2b00      	cmp	r3, #0
   1ca80:	d101      	bne.n	1ca86 <prvNotifyQueueSetContainer+0x1e>
   1ca82:	b672      	cpsid	i
   1ca84:	e7fe      	b.n	1ca84 <prvNotifyQueueSetContainer+0x1c>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
   1ca86:	693b      	ldr	r3, [r7, #16]
   1ca88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1ca8a:	693b      	ldr	r3, [r7, #16]
   1ca8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1ca8e:	429a      	cmp	r2, r3
   1ca90:	d301      	bcc.n	1ca96 <prvNotifyQueueSetContainer+0x2e>
   1ca92:	b672      	cpsid	i
   1ca94:	e7fe      	b.n	1ca94 <prvNotifyQueueSetContainer+0x2c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
   1ca96:	693b      	ldr	r3, [r7, #16]
   1ca98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1ca9a:	693b      	ldr	r3, [r7, #16]
   1ca9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1ca9e:	429a      	cmp	r2, r3
   1caa0:	d300      	bcc.n	1caa4 <prvNotifyQueueSetContainer+0x3c>
   1caa2:	e08b      	b.n	1cbbc <prvNotifyQueueSetContainer+0x154>
		{
			const int8_t cTxLock = pxQueueSetContainer->cTxLock;
   1caa4:	230f      	movs	r3, #15
   1caa6:	18fb      	adds	r3, r7, r3
   1caa8:	693a      	ldr	r2, [r7, #16]
   1caaa:	2145      	movs	r1, #69	; 0x45
   1caac:	5c52      	ldrb	r2, [r2, r1]
   1caae:	701a      	strb	r2, [r3, #0]

			traceQUEUE_SEND( pxQueueSetContainer );
   1cab0:	4b45      	ldr	r3, [pc, #276]	; (1cbc8 <prvNotifyQueueSetContainer+0x160>)
   1cab2:	4798      	blx	r3
   1cab4:	0003      	movs	r3, r0
   1cab6:	0018      	movs	r0, r3
   1cab8:	4b44      	ldr	r3, [pc, #272]	; (1cbcc <prvNotifyQueueSetContainer+0x164>)
   1caba:	4798      	blx	r3
   1cabc:	0003      	movs	r3, r0
   1cabe:	001a      	movs	r2, r3
   1cac0:	4b43      	ldr	r3, [pc, #268]	; (1cbd0 <prvNotifyQueueSetContainer+0x168>)
   1cac2:	881b      	ldrh	r3, [r3, #0]
   1cac4:	4013      	ands	r3, r2
   1cac6:	b29b      	uxth	r3, r3
   1cac8:	2b00      	cmp	r3, #0
   1caca:	d02e      	beq.n	1cb2a <prvNotifyQueueSetContainer+0xc2>
   1cacc:	693b      	ldr	r3, [r7, #16]
   1cace:	0018      	movs	r0, r3
   1cad0:	4b40      	ldr	r3, [pc, #256]	; (1cbd4 <prvNotifyQueueSetContainer+0x16c>)
   1cad2:	4798      	blx	r3
   1cad4:	0003      	movs	r3, r0
   1cad6:	001a      	movs	r2, r3
   1cad8:	4b3d      	ldr	r3, [pc, #244]	; (1cbd0 <prvNotifyQueueSetContainer+0x168>)
   1cada:	881b      	ldrh	r3, [r3, #0]
   1cadc:	4013      	ands	r3, r2
   1cade:	b29b      	uxth	r3, r3
   1cae0:	2b00      	cmp	r3, #0
   1cae2:	d022      	beq.n	1cb2a <prvNotifyQueueSetContainer+0xc2>
   1cae4:	683b      	ldr	r3, [r7, #0]
   1cae6:	2b00      	cmp	r3, #0
   1cae8:	d10b      	bne.n	1cb02 <prvNotifyQueueSetContainer+0x9a>
   1caea:	693b      	ldr	r3, [r7, #16]
   1caec:	0018      	movs	r0, r3
   1caee:	4b3a      	ldr	r3, [pc, #232]	; (1cbd8 <prvNotifyQueueSetContainer+0x170>)
   1caf0:	4798      	blx	r3
   1caf2:	0003      	movs	r3, r0
   1caf4:	001a      	movs	r2, r3
   1caf6:	4b39      	ldr	r3, [pc, #228]	; (1cbdc <prvNotifyQueueSetContainer+0x174>)
   1caf8:	5c9b      	ldrb	r3, [r3, r2]
   1cafa:	3320      	adds	r3, #32
   1cafc:	b2db      	uxtb	r3, r3
   1cafe:	001d      	movs	r5, r3
   1cb00:	e000      	b.n	1cb04 <prvNotifyQueueSetContainer+0x9c>
   1cb02:	2525      	movs	r5, #37	; 0x25
   1cb04:	693b      	ldr	r3, [r7, #16]
   1cb06:	0018      	movs	r0, r3
   1cb08:	4b33      	ldr	r3, [pc, #204]	; (1cbd8 <prvNotifyQueueSetContainer+0x170>)
   1cb0a:	4798      	blx	r3
   1cb0c:	0003      	movs	r3, r0
   1cb0e:	001a      	movs	r2, r3
   1cb10:	4b32      	ldr	r3, [pc, #200]	; (1cbdc <prvNotifyQueueSetContainer+0x174>)
   1cb12:	5c9c      	ldrb	r4, [r3, r2]
   1cb14:	693b      	ldr	r3, [r7, #16]
   1cb16:	0018      	movs	r0, r3
   1cb18:	4b31      	ldr	r3, [pc, #196]	; (1cbe0 <prvNotifyQueueSetContainer+0x178>)
   1cb1a:	4798      	blx	r3
   1cb1c:	0003      	movs	r3, r0
   1cb1e:	b2db      	uxtb	r3, r3
   1cb20:	001a      	movs	r2, r3
   1cb22:	0021      	movs	r1, r4
   1cb24:	0028      	movs	r0, r5
   1cb26:	4b2f      	ldr	r3, [pc, #188]	; (1cbe4 <prvNotifyQueueSetContainer+0x17c>)
   1cb28:	4798      	blx	r3
   1cb2a:	693b      	ldr	r3, [r7, #16]
   1cb2c:	0018      	movs	r0, r3
   1cb2e:	4b2a      	ldr	r3, [pc, #168]	; (1cbd8 <prvNotifyQueueSetContainer+0x170>)
   1cb30:	4798      	blx	r3
   1cb32:	0003      	movs	r3, r0
   1cb34:	001a      	movs	r2, r3
   1cb36:	4b29      	ldr	r3, [pc, #164]	; (1cbdc <prvNotifyQueueSetContainer+0x174>)
   1cb38:	5c9c      	ldrb	r4, [r3, r2]
   1cb3a:	693b      	ldr	r3, [r7, #16]
   1cb3c:	0018      	movs	r0, r3
   1cb3e:	4b28      	ldr	r3, [pc, #160]	; (1cbe0 <prvNotifyQueueSetContainer+0x178>)
   1cb40:	4798      	blx	r3
   1cb42:	0003      	movs	r3, r0
   1cb44:	b2dd      	uxtb	r5, r3
   1cb46:	693b      	ldr	r3, [r7, #16]
   1cb48:	0018      	movs	r0, r3
   1cb4a:	4b23      	ldr	r3, [pc, #140]	; (1cbd8 <prvNotifyQueueSetContainer+0x170>)
   1cb4c:	4798      	blx	r3
   1cb4e:	0003      	movs	r3, r0
   1cb50:	001a      	movs	r2, r3
   1cb52:	4b22      	ldr	r3, [pc, #136]	; (1cbdc <prvNotifyQueueSetContainer+0x174>)
   1cb54:	5c9b      	ldrb	r3, [r3, r2]
   1cb56:	2b02      	cmp	r3, #2
   1cb58:	d005      	beq.n	1cb66 <prvNotifyQueueSetContainer+0xfe>
   1cb5a:	693b      	ldr	r3, [r7, #16]
   1cb5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1cb5e:	b2db      	uxtb	r3, r3
   1cb60:	3301      	adds	r3, #1
   1cb62:	b2db      	uxtb	r3, r3
   1cb64:	e000      	b.n	1cb68 <prvNotifyQueueSetContainer+0x100>
   1cb66:	2300      	movs	r3, #0
   1cb68:	001a      	movs	r2, r3
   1cb6a:	0029      	movs	r1, r5
   1cb6c:	0020      	movs	r0, r4
   1cb6e:	4b1e      	ldr	r3, [pc, #120]	; (1cbe8 <prvNotifyQueueSetContainer+0x180>)
   1cb70:	4798      	blx	r3

			/* The data copied is the handle of the queue that contains data. */
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
   1cb72:	683a      	ldr	r2, [r7, #0]
   1cb74:	1d39      	adds	r1, r7, #4
   1cb76:	693b      	ldr	r3, [r7, #16]
   1cb78:	0018      	movs	r0, r3
   1cb7a:	4b1c      	ldr	r3, [pc, #112]	; (1cbec <prvNotifyQueueSetContainer+0x184>)
   1cb7c:	4798      	blx	r3
   1cb7e:	0003      	movs	r3, r0
   1cb80:	617b      	str	r3, [r7, #20]

			if( cTxLock == queueUNLOCKED )
   1cb82:	230f      	movs	r3, #15
   1cb84:	18fb      	adds	r3, r7, r3
   1cb86:	781b      	ldrb	r3, [r3, #0]
   1cb88:	b25b      	sxtb	r3, r3
   1cb8a:	3301      	adds	r3, #1
   1cb8c:	d10d      	bne.n	1cbaa <prvNotifyQueueSetContainer+0x142>
			{
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
   1cb8e:	693b      	ldr	r3, [r7, #16]
   1cb90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1cb92:	2b00      	cmp	r3, #0
   1cb94:	d012      	beq.n	1cbbc <prvNotifyQueueSetContainer+0x154>
				{
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
   1cb96:	693b      	ldr	r3, [r7, #16]
   1cb98:	3324      	adds	r3, #36	; 0x24
   1cb9a:	0018      	movs	r0, r3
   1cb9c:	4b14      	ldr	r3, [pc, #80]	; (1cbf0 <prvNotifyQueueSetContainer+0x188>)
   1cb9e:	4798      	blx	r3
   1cba0:	1e03      	subs	r3, r0, #0
   1cba2:	d00b      	beq.n	1cbbc <prvNotifyQueueSetContainer+0x154>
					{
						/* The task waiting has a higher priority. */
						xReturn = pdTRUE;
   1cba4:	2301      	movs	r3, #1
   1cba6:	617b      	str	r3, [r7, #20]
   1cba8:	e008      	b.n	1cbbc <prvNotifyQueueSetContainer+0x154>
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else
			{
				pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
   1cbaa:	230f      	movs	r3, #15
   1cbac:	18fb      	adds	r3, r7, r3
   1cbae:	781b      	ldrb	r3, [r3, #0]
   1cbb0:	3301      	adds	r3, #1
   1cbb2:	b2db      	uxtb	r3, r3
   1cbb4:	b259      	sxtb	r1, r3
   1cbb6:	693b      	ldr	r3, [r7, #16]
   1cbb8:	2245      	movs	r2, #69	; 0x45
   1cbba:	5499      	strb	r1, [r3, r2]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1cbbc:	697b      	ldr	r3, [r7, #20]
	}
   1cbbe:	0018      	movs	r0, r3
   1cbc0:	46bd      	mov	sp, r7
   1cbc2:	b006      	add	sp, #24
   1cbc4:	bdb0      	pop	{r4, r5, r7, pc}
   1cbc6:	46c0      	nop			; (mov r8, r8)
   1cbc8:	00019231 	.word	0x00019231
   1cbcc:	00018f95 	.word	0x00018f95
   1cbd0:	20000110 	.word	0x20000110
   1cbd4:	00019055 	.word	0x00019055
   1cbd8:	00018f55 	.word	0x00018f55
   1cbdc:	20000104 	.word	0x20000104
   1cbe0:	00019035 	.word	0x00019035
   1cbe4:	0001998d 	.word	0x0001998d
   1cbe8:	00019fe9 	.word	0x00019fe9
   1cbec:	0001c765 	.word	0x0001c765
   1cbf0:	0001d829 	.word	0x0001d829

0001cbf4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
   1cbf4:	b590      	push	{r4, r7, lr}
   1cbf6:	b08d      	sub	sp, #52	; 0x34
   1cbf8:	af04      	add	r7, sp, #16
   1cbfa:	60f8      	str	r0, [r7, #12]
   1cbfc:	60b9      	str	r1, [r7, #8]
   1cbfe:	603b      	str	r3, [r7, #0]
   1cc00:	1dbb      	adds	r3, r7, #6
   1cc02:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1cc04:	1dbb      	adds	r3, r7, #6
   1cc06:	881b      	ldrh	r3, [r3, #0]
   1cc08:	009b      	lsls	r3, r3, #2
   1cc0a:	0018      	movs	r0, r3
   1cc0c:	4b1d      	ldr	r3, [pc, #116]	; (1cc84 <xTaskCreate+0x90>)
   1cc0e:	4798      	blx	r3
   1cc10:	0003      	movs	r3, r0
   1cc12:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
   1cc14:	697b      	ldr	r3, [r7, #20]
   1cc16:	2b00      	cmp	r3, #0
   1cc18:	d010      	beq.n	1cc3c <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
   1cc1a:	2054      	movs	r0, #84	; 0x54
   1cc1c:	4b19      	ldr	r3, [pc, #100]	; (1cc84 <xTaskCreate+0x90>)
   1cc1e:	4798      	blx	r3
   1cc20:	0003      	movs	r3, r0
   1cc22:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
   1cc24:	69fb      	ldr	r3, [r7, #28]
   1cc26:	2b00      	cmp	r3, #0
   1cc28:	d003      	beq.n	1cc32 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
   1cc2a:	69fb      	ldr	r3, [r7, #28]
   1cc2c:	697a      	ldr	r2, [r7, #20]
   1cc2e:	631a      	str	r2, [r3, #48]	; 0x30
   1cc30:	e006      	b.n	1cc40 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
   1cc32:	697b      	ldr	r3, [r7, #20]
   1cc34:	0018      	movs	r0, r3
   1cc36:	4b14      	ldr	r3, [pc, #80]	; (1cc88 <xTaskCreate+0x94>)
   1cc38:	4798      	blx	r3
   1cc3a:	e001      	b.n	1cc40 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
   1cc3c:	2300      	movs	r3, #0
   1cc3e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
   1cc40:	69fb      	ldr	r3, [r7, #28]
   1cc42:	2b00      	cmp	r3, #0
   1cc44:	d016      	beq.n	1cc74 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
   1cc46:	1dbb      	adds	r3, r7, #6
   1cc48:	881a      	ldrh	r2, [r3, #0]
   1cc4a:	683c      	ldr	r4, [r7, #0]
   1cc4c:	68b9      	ldr	r1, [r7, #8]
   1cc4e:	68f8      	ldr	r0, [r7, #12]
   1cc50:	2300      	movs	r3, #0
   1cc52:	9303      	str	r3, [sp, #12]
   1cc54:	69fb      	ldr	r3, [r7, #28]
   1cc56:	9302      	str	r3, [sp, #8]
   1cc58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   1cc5a:	9301      	str	r3, [sp, #4]
   1cc5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   1cc5e:	9300      	str	r3, [sp, #0]
   1cc60:	0023      	movs	r3, r4
   1cc62:	4c0a      	ldr	r4, [pc, #40]	; (1cc8c <xTaskCreate+0x98>)
   1cc64:	47a0      	blx	r4
			prvAddNewTaskToReadyList( pxNewTCB );
   1cc66:	69fb      	ldr	r3, [r7, #28]
   1cc68:	0018      	movs	r0, r3
   1cc6a:	4b09      	ldr	r3, [pc, #36]	; (1cc90 <xTaskCreate+0x9c>)
   1cc6c:	4798      	blx	r3
			xReturn = pdPASS;
   1cc6e:	2301      	movs	r3, #1
   1cc70:	61bb      	str	r3, [r7, #24]
   1cc72:	e002      	b.n	1cc7a <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   1cc74:	2301      	movs	r3, #1
   1cc76:	425b      	negs	r3, r3
   1cc78:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
   1cc7a:	69bb      	ldr	r3, [r7, #24]
	}
   1cc7c:	0018      	movs	r0, r3
   1cc7e:	46bd      	mov	sp, r7
   1cc80:	b009      	add	sp, #36	; 0x24
   1cc82:	bd90      	pop	{r4, r7, pc}
   1cc84:	0001b0d1 	.word	0x0001b0d1
   1cc88:	0001b195 	.word	0x0001b195
   1cc8c:	0001cc95 	.word	0x0001cc95
   1cc90:	0001cda5 	.word	0x0001cda5

0001cc94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
   1cc94:	b580      	push	{r7, lr}
   1cc96:	b086      	sub	sp, #24
   1cc98:	af00      	add	r7, sp, #0
   1cc9a:	60f8      	str	r0, [r7, #12]
   1cc9c:	60b9      	str	r1, [r7, #8]
   1cc9e:	607a      	str	r2, [r7, #4]
   1cca0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
   1cca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cca4:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1cca6:	687b      	ldr	r3, [r7, #4]
   1cca8:	009b      	lsls	r3, r3, #2
   1ccaa:	001a      	movs	r2, r3
   1ccac:	21a5      	movs	r1, #165	; 0xa5
   1ccae:	4b39      	ldr	r3, [pc, #228]	; (1cd94 <prvInitialiseNewTask+0x100>)
   1ccb0:	4798      	blx	r3
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
   1ccb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1ccb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1ccb6:	687b      	ldr	r3, [r7, #4]
   1ccb8:	4937      	ldr	r1, [pc, #220]	; (1cd98 <prvInitialiseNewTask+0x104>)
   1ccba:	468c      	mov	ip, r1
   1ccbc:	4463      	add	r3, ip
   1ccbe:	009b      	lsls	r3, r3, #2
   1ccc0:	18d3      	adds	r3, r2, r3
   1ccc2:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
   1ccc4:	693b      	ldr	r3, [r7, #16]
   1ccc6:	2207      	movs	r2, #7
   1ccc8:	4393      	bics	r3, r2
   1ccca:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   1cccc:	693b      	ldr	r3, [r7, #16]
   1ccce:	2207      	movs	r2, #7
   1ccd0:	4013      	ands	r3, r2
   1ccd2:	d001      	beq.n	1ccd8 <prvInitialiseNewTask+0x44>
   1ccd4:	b672      	cpsid	i
   1ccd6:	e7fe      	b.n	1ccd6 <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1ccd8:	2300      	movs	r3, #0
   1ccda:	617b      	str	r3, [r7, #20]
   1ccdc:	e013      	b.n	1cd06 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
   1ccde:	68ba      	ldr	r2, [r7, #8]
   1cce0:	697b      	ldr	r3, [r7, #20]
   1cce2:	18d3      	adds	r3, r2, r3
   1cce4:	7818      	ldrb	r0, [r3, #0]
   1cce6:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1cce8:	2134      	movs	r1, #52	; 0x34
   1ccea:	697b      	ldr	r3, [r7, #20]
   1ccec:	18d3      	adds	r3, r2, r3
   1ccee:	185b      	adds	r3, r3, r1
   1ccf0:	1c02      	adds	r2, r0, #0
   1ccf2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
   1ccf4:	68ba      	ldr	r2, [r7, #8]
   1ccf6:	697b      	ldr	r3, [r7, #20]
   1ccf8:	18d3      	adds	r3, r2, r3
   1ccfa:	781b      	ldrb	r3, [r3, #0]
   1ccfc:	2b00      	cmp	r3, #0
   1ccfe:	d006      	beq.n	1cd0e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
   1cd00:	697b      	ldr	r3, [r7, #20]
   1cd02:	3301      	adds	r3, #1
   1cd04:	617b      	str	r3, [r7, #20]
   1cd06:	697b      	ldr	r3, [r7, #20]
   1cd08:	2b07      	cmp	r3, #7
   1cd0a:	d9e8      	bls.n	1ccde <prvInitialiseNewTask+0x4a>
   1cd0c:	e000      	b.n	1cd10 <prvInitialiseNewTask+0x7c>
		{
			break;
   1cd0e:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
   1cd10:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cd12:	223b      	movs	r2, #59	; 0x3b
   1cd14:	2100      	movs	r1, #0
   1cd16:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
   1cd18:	6a3b      	ldr	r3, [r7, #32]
   1cd1a:	2b04      	cmp	r3, #4
   1cd1c:	d901      	bls.n	1cd22 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
   1cd1e:	2304      	movs	r3, #4
   1cd20:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
   1cd22:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cd24:	6a3a      	ldr	r2, [r7, #32]
   1cd26:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
   1cd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cd2a:	6a3a      	ldr	r2, [r7, #32]
   1cd2c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
   1cd2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cd30:	2200      	movs	r2, #0
   1cd32:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
   1cd34:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cd36:	3304      	adds	r3, #4
   1cd38:	0018      	movs	r0, r3
   1cd3a:	4b18      	ldr	r3, [pc, #96]	; (1cd9c <prvInitialiseNewTask+0x108>)
   1cd3c:	4798      	blx	r3
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
   1cd3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cd40:	3318      	adds	r3, #24
   1cd42:	0018      	movs	r0, r3
   1cd44:	4b15      	ldr	r3, [pc, #84]	; (1cd9c <prvInitialiseNewTask+0x108>)
   1cd46:	4798      	blx	r3

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
   1cd48:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cd4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1cd4c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1cd4e:	6a3b      	ldr	r3, [r7, #32]
   1cd50:	2205      	movs	r2, #5
   1cd52:	1ad2      	subs	r2, r2, r3
   1cd54:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cd56:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
   1cd58:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cd5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1cd5c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
   1cd5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cd60:	2200      	movs	r2, #0
   1cd62:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1cd64:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cd66:	2250      	movs	r2, #80	; 0x50
   1cd68:	2100      	movs	r1, #0
   1cd6a:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   1cd6c:	683a      	ldr	r2, [r7, #0]
   1cd6e:	68f9      	ldr	r1, [r7, #12]
   1cd70:	693b      	ldr	r3, [r7, #16]
   1cd72:	0018      	movs	r0, r3
   1cd74:	4b0a      	ldr	r3, [pc, #40]	; (1cda0 <prvInitialiseNewTask+0x10c>)
   1cd76:	4798      	blx	r3
   1cd78:	0002      	movs	r2, r0
   1cd7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1cd7c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
   1cd7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1cd80:	2b00      	cmp	r3, #0
   1cd82:	d002      	beq.n	1cd8a <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
   1cd84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1cd86:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1cd88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1cd8a:	46c0      	nop			; (mov r8, r8)
   1cd8c:	46bd      	mov	sp, r7
   1cd8e:	b006      	add	sp, #24
   1cd90:	bd80      	pop	{r7, pc}
   1cd92:	46c0      	nop			; (mov r8, r8)
   1cd94:	0003582f 	.word	0x0003582f
   1cd98:	3fffffff 	.word	0x3fffffff
   1cd9c:	0001ad49 	.word	0x0001ad49
   1cda0:	0001ae61 	.word	0x0001ae61

0001cda4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
   1cda4:	b580      	push	{r7, lr}
   1cda6:	b082      	sub	sp, #8
   1cda8:	af00      	add	r7, sp, #0
   1cdaa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
   1cdac:	4b60      	ldr	r3, [pc, #384]	; (1cf30 <prvAddNewTaskToReadyList+0x18c>)
   1cdae:	4798      	blx	r3
	{
		uxCurrentNumberOfTasks++;
   1cdb0:	4b60      	ldr	r3, [pc, #384]	; (1cf34 <prvAddNewTaskToReadyList+0x190>)
   1cdb2:	681b      	ldr	r3, [r3, #0]
   1cdb4:	1c5a      	adds	r2, r3, #1
   1cdb6:	4b5f      	ldr	r3, [pc, #380]	; (1cf34 <prvAddNewTaskToReadyList+0x190>)
   1cdb8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
   1cdba:	4b5f      	ldr	r3, [pc, #380]	; (1cf38 <prvAddNewTaskToReadyList+0x194>)
   1cdbc:	681b      	ldr	r3, [r3, #0]
   1cdbe:	2b00      	cmp	r3, #0
   1cdc0:	d109      	bne.n	1cdd6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
   1cdc2:	4b5d      	ldr	r3, [pc, #372]	; (1cf38 <prvAddNewTaskToReadyList+0x194>)
   1cdc4:	687a      	ldr	r2, [r7, #4]
   1cdc6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
   1cdc8:	4b5a      	ldr	r3, [pc, #360]	; (1cf34 <prvAddNewTaskToReadyList+0x190>)
   1cdca:	681b      	ldr	r3, [r3, #0]
   1cdcc:	2b01      	cmp	r3, #1
   1cdce:	d110      	bne.n	1cdf2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
   1cdd0:	4b5a      	ldr	r3, [pc, #360]	; (1cf3c <prvAddNewTaskToReadyList+0x198>)
   1cdd2:	4798      	blx	r3
   1cdd4:	e00d      	b.n	1cdf2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
   1cdd6:	4b5a      	ldr	r3, [pc, #360]	; (1cf40 <prvAddNewTaskToReadyList+0x19c>)
   1cdd8:	681b      	ldr	r3, [r3, #0]
   1cdda:	2b00      	cmp	r3, #0
   1cddc:	d109      	bne.n	1cdf2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
   1cdde:	4b56      	ldr	r3, [pc, #344]	; (1cf38 <prvAddNewTaskToReadyList+0x194>)
   1cde0:	681b      	ldr	r3, [r3, #0]
   1cde2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cde4:	687b      	ldr	r3, [r7, #4]
   1cde6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cde8:	429a      	cmp	r2, r3
   1cdea:	d802      	bhi.n	1cdf2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
   1cdec:	4b52      	ldr	r3, [pc, #328]	; (1cf38 <prvAddNewTaskToReadyList+0x194>)
   1cdee:	687a      	ldr	r2, [r7, #4]
   1cdf0:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
   1cdf2:	4b54      	ldr	r3, [pc, #336]	; (1cf44 <prvAddNewTaskToReadyList+0x1a0>)
   1cdf4:	681b      	ldr	r3, [r3, #0]
   1cdf6:	1c5a      	adds	r2, r3, #1
   1cdf8:	4b52      	ldr	r3, [pc, #328]	; (1cf44 <prvAddNewTaskToReadyList+0x1a0>)
   1cdfa:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
   1cdfc:	4b51      	ldr	r3, [pc, #324]	; (1cf44 <prvAddNewTaskToReadyList+0x1a0>)
   1cdfe:	681a      	ldr	r2, [r3, #0]
   1ce00:	687b      	ldr	r3, [r7, #4]
   1ce02:	63da      	str	r2, [r3, #60]	; 0x3c
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
   1ce04:	687b      	ldr	r3, [r7, #4]
   1ce06:	2b00      	cmp	r3, #0
   1ce08:	d052      	beq.n	1ceb0 <prvAddNewTaskToReadyList+0x10c>
   1ce0a:	2003      	movs	r0, #3
   1ce0c:	4b4e      	ldr	r3, [pc, #312]	; (1cf48 <prvAddNewTaskToReadyList+0x1a4>)
   1ce0e:	4798      	blx	r3
   1ce10:	0003      	movs	r3, r0
   1ce12:	b29a      	uxth	r2, r3
   1ce14:	687b      	ldr	r3, [r7, #4]
   1ce16:	0011      	movs	r1, r2
   1ce18:	0018      	movs	r0, r3
   1ce1a:	4b4c      	ldr	r3, [pc, #304]	; (1cf4c <prvAddNewTaskToReadyList+0x1a8>)
   1ce1c:	4798      	blx	r3
   1ce1e:	4b4c      	ldr	r3, [pc, #304]	; (1cf50 <prvAddNewTaskToReadyList+0x1ac>)
   1ce20:	881a      	ldrh	r2, [r3, #0]
   1ce22:	687b      	ldr	r3, [r7, #4]
   1ce24:	0011      	movs	r1, r2
   1ce26:	0018      	movs	r0, r3
   1ce28:	4b4a      	ldr	r3, [pc, #296]	; (1cf54 <prvAddNewTaskToReadyList+0x1b0>)
   1ce2a:	4798      	blx	r3
   1ce2c:	687b      	ldr	r3, [r7, #4]
   1ce2e:	0018      	movs	r0, r3
   1ce30:	4b49      	ldr	r3, [pc, #292]	; (1cf58 <prvAddNewTaskToReadyList+0x1b4>)
   1ce32:	4798      	blx	r3
   1ce34:	0003      	movs	r3, r0
   1ce36:	b2d9      	uxtb	r1, r3
   1ce38:	687b      	ldr	r3, [r7, #4]
   1ce3a:	3334      	adds	r3, #52	; 0x34
   1ce3c:	001a      	movs	r2, r3
   1ce3e:	2003      	movs	r0, #3
   1ce40:	4b46      	ldr	r3, [pc, #280]	; (1cf5c <prvAddNewTaskToReadyList+0x1b8>)
   1ce42:	4798      	blx	r3
   1ce44:	687b      	ldr	r3, [r7, #4]
   1ce46:	0018      	movs	r0, r3
   1ce48:	4b43      	ldr	r3, [pc, #268]	; (1cf58 <prvAddNewTaskToReadyList+0x1b4>)
   1ce4a:	4798      	blx	r3
   1ce4c:	0003      	movs	r3, r0
   1ce4e:	b2d9      	uxtb	r1, r3
   1ce50:	687b      	ldr	r3, [r7, #4]
   1ce52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1ce54:	b2db      	uxtb	r3, r3
   1ce56:	001a      	movs	r2, r3
   1ce58:	2003      	movs	r0, #3
   1ce5a:	4b41      	ldr	r3, [pc, #260]	; (1cf60 <prvAddNewTaskToReadyList+0x1bc>)
   1ce5c:	4798      	blx	r3
   1ce5e:	4b41      	ldr	r3, [pc, #260]	; (1cf64 <prvAddNewTaskToReadyList+0x1c0>)
   1ce60:	4798      	blx	r3
   1ce62:	0003      	movs	r3, r0
   1ce64:	0018      	movs	r0, r3
   1ce66:	4b40      	ldr	r3, [pc, #256]	; (1cf68 <prvAddNewTaskToReadyList+0x1c4>)
   1ce68:	4798      	blx	r3
   1ce6a:	0003      	movs	r3, r0
   1ce6c:	001a      	movs	r2, r3
   1ce6e:	4b3f      	ldr	r3, [pc, #252]	; (1cf6c <prvAddNewTaskToReadyList+0x1c8>)
   1ce70:	881b      	ldrh	r3, [r3, #0]
   1ce72:	4013      	ands	r3, r2
   1ce74:	b29b      	uxth	r3, r3
   1ce76:	2b00      	cmp	r3, #0
   1ce78:	d016      	beq.n	1cea8 <prvAddNewTaskToReadyList+0x104>
   1ce7a:	687b      	ldr	r3, [r7, #4]
   1ce7c:	0018      	movs	r0, r3
   1ce7e:	4b3a      	ldr	r3, [pc, #232]	; (1cf68 <prvAddNewTaskToReadyList+0x1c4>)
   1ce80:	4798      	blx	r3
   1ce82:	0003      	movs	r3, r0
   1ce84:	001a      	movs	r2, r3
   1ce86:	4b39      	ldr	r3, [pc, #228]	; (1cf6c <prvAddNewTaskToReadyList+0x1c8>)
   1ce88:	881b      	ldrh	r3, [r3, #0]
   1ce8a:	4013      	ands	r3, r2
   1ce8c:	b29b      	uxth	r3, r3
   1ce8e:	2b00      	cmp	r3, #0
   1ce90:	d00a      	beq.n	1cea8 <prvAddNewTaskToReadyList+0x104>
   1ce92:	687b      	ldr	r3, [r7, #4]
   1ce94:	0018      	movs	r0, r3
   1ce96:	4b30      	ldr	r3, [pc, #192]	; (1cf58 <prvAddNewTaskToReadyList+0x1b4>)
   1ce98:	4798      	blx	r3
   1ce9a:	0003      	movs	r3, r0
   1ce9c:	b2db      	uxtb	r3, r3
   1ce9e:	001a      	movs	r2, r3
   1cea0:	2103      	movs	r1, #3
   1cea2:	201b      	movs	r0, #27
   1cea4:	4b32      	ldr	r3, [pc, #200]	; (1cf70 <prvAddNewTaskToReadyList+0x1cc>)
   1cea6:	4798      	blx	r3
   1cea8:	687b      	ldr	r3, [r7, #4]
   1ceaa:	0018      	movs	r0, r3
   1ceac:	4b31      	ldr	r3, [pc, #196]	; (1cf74 <prvAddNewTaskToReadyList+0x1d0>)
   1ceae:	4798      	blx	r3

		prvAddTaskToReadyList( pxNewTCB );
   1ceb0:	687b      	ldr	r3, [r7, #4]
   1ceb2:	0018      	movs	r0, r3
   1ceb4:	4b2c      	ldr	r3, [pc, #176]	; (1cf68 <prvAddNewTaskToReadyList+0x1c4>)
   1ceb6:	4798      	blx	r3
   1ceb8:	0003      	movs	r3, r0
   1ceba:	001a      	movs	r2, r3
   1cebc:	4b2b      	ldr	r3, [pc, #172]	; (1cf6c <prvAddNewTaskToReadyList+0x1c8>)
   1cebe:	881b      	ldrh	r3, [r3, #0]
   1cec0:	4013      	ands	r3, r2
   1cec2:	b29b      	uxth	r3, r3
   1cec4:	2b00      	cmp	r3, #0
   1cec6:	d008      	beq.n	1ceda <prvAddNewTaskToReadyList+0x136>
   1cec8:	687b      	ldr	r3, [r7, #4]
   1ceca:	0018      	movs	r0, r3
   1cecc:	4b22      	ldr	r3, [pc, #136]	; (1cf58 <prvAddNewTaskToReadyList+0x1b4>)
   1cece:	4798      	blx	r3
   1ced0:	0003      	movs	r3, r0
   1ced2:	b2db      	uxtb	r3, r3
   1ced4:	0018      	movs	r0, r3
   1ced6:	4b28      	ldr	r3, [pc, #160]	; (1cf78 <prvAddNewTaskToReadyList+0x1d4>)
   1ced8:	4798      	blx	r3
   1ceda:	687b      	ldr	r3, [r7, #4]
   1cedc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cede:	4b27      	ldr	r3, [pc, #156]	; (1cf7c <prvAddNewTaskToReadyList+0x1d8>)
   1cee0:	681b      	ldr	r3, [r3, #0]
   1cee2:	429a      	cmp	r2, r3
   1cee4:	d903      	bls.n	1ceee <prvAddNewTaskToReadyList+0x14a>
   1cee6:	687b      	ldr	r3, [r7, #4]
   1cee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ceea:	4b24      	ldr	r3, [pc, #144]	; (1cf7c <prvAddNewTaskToReadyList+0x1d8>)
   1ceec:	601a      	str	r2, [r3, #0]
   1ceee:	687b      	ldr	r3, [r7, #4]
   1cef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cef2:	0013      	movs	r3, r2
   1cef4:	009b      	lsls	r3, r3, #2
   1cef6:	189b      	adds	r3, r3, r2
   1cef8:	009b      	lsls	r3, r3, #2
   1cefa:	4a21      	ldr	r2, [pc, #132]	; (1cf80 <prvAddNewTaskToReadyList+0x1dc>)
   1cefc:	189a      	adds	r2, r3, r2
   1cefe:	687b      	ldr	r3, [r7, #4]
   1cf00:	3304      	adds	r3, #4
   1cf02:	0019      	movs	r1, r3
   1cf04:	0010      	movs	r0, r2
   1cf06:	4b1f      	ldr	r3, [pc, #124]	; (1cf84 <prvAddNewTaskToReadyList+0x1e0>)
   1cf08:	4798      	blx	r3

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
   1cf0a:	4b1f      	ldr	r3, [pc, #124]	; (1cf88 <prvAddNewTaskToReadyList+0x1e4>)
   1cf0c:	4798      	blx	r3

	if( xSchedulerRunning != pdFALSE )
   1cf0e:	4b0c      	ldr	r3, [pc, #48]	; (1cf40 <prvAddNewTaskToReadyList+0x19c>)
   1cf10:	681b      	ldr	r3, [r3, #0]
   1cf12:	2b00      	cmp	r3, #0
   1cf14:	d008      	beq.n	1cf28 <prvAddNewTaskToReadyList+0x184>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
   1cf16:	4b08      	ldr	r3, [pc, #32]	; (1cf38 <prvAddNewTaskToReadyList+0x194>)
   1cf18:	681b      	ldr	r3, [r3, #0]
   1cf1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1cf1c:	687b      	ldr	r3, [r7, #4]
   1cf1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1cf20:	429a      	cmp	r2, r3
   1cf22:	d201      	bcs.n	1cf28 <prvAddNewTaskToReadyList+0x184>
		{
			taskYIELD_IF_USING_PREEMPTION();
   1cf24:	4b19      	ldr	r3, [pc, #100]	; (1cf8c <prvAddNewTaskToReadyList+0x1e8>)
   1cf26:	4798      	blx	r3
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
   1cf28:	46c0      	nop			; (mov r8, r8)
   1cf2a:	46bd      	mov	sp, r7
   1cf2c:	b002      	add	sp, #8
   1cf2e:	bd80      	pop	{r7, pc}
   1cf30:	0001af99 	.word	0x0001af99
   1cf34:	200041b4 	.word	0x200041b4
   1cf38:	200040dc 	.word	0x200040dc
   1cf3c:	0001dac5 	.word	0x0001dac5
   1cf40:	200041c0 	.word	0x200041c0
   1cf44:	200041d0 	.word	0x200041d0
   1cf48:	0001a515 	.word	0x0001a515
   1cf4c:	00018fb9 	.word	0x00018fb9
   1cf50:	20000112 	.word	0x20000112
   1cf54:	00018ff5 	.word	0x00018ff5
   1cf58:	00018f75 	.word	0x00018f75
   1cf5c:	0001a745 	.word	0x0001a745
   1cf60:	00019ea9 	.word	0x00019ea9
   1cf64:	00019231 	.word	0x00019231
   1cf68:	00018f95 	.word	0x00018f95
   1cf6c:	20000110 	.word	0x20000110
   1cf70:	0001998d 	.word	0x0001998d
   1cf74:	000190f5 	.word	0x000190f5
   1cf78:	00019745 	.word	0x00019745
   1cf7c:	200041bc 	.word	0x200041bc
   1cf80:	200040e0 	.word	0x200040e0
   1cf84:	0001ad5f 	.word	0x0001ad5f
   1cf88:	0001afbd 	.word	0x0001afbd
   1cf8c:	0001af81 	.word	0x0001af81

0001cf90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
   1cf90:	b580      	push	{r7, lr}
   1cf92:	b084      	sub	sp, #16
   1cf94:	af00      	add	r7, sp, #0
   1cf96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
   1cf98:	2300      	movs	r3, #0
   1cf9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
   1cf9c:	687b      	ldr	r3, [r7, #4]
   1cf9e:	2b00      	cmp	r3, #0
   1cfa0:	d045      	beq.n	1d02e <vTaskDelay+0x9e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
   1cfa2:	4b27      	ldr	r3, [pc, #156]	; (1d040 <vTaskDelay+0xb0>)
   1cfa4:	681b      	ldr	r3, [r3, #0]
   1cfa6:	2b00      	cmp	r3, #0
   1cfa8:	d001      	beq.n	1cfae <vTaskDelay+0x1e>
   1cfaa:	b672      	cpsid	i
   1cfac:	e7fe      	b.n	1cfac <vTaskDelay+0x1c>
			vTaskSuspendAll();
   1cfae:	4b25      	ldr	r3, [pc, #148]	; (1d044 <vTaskDelay+0xb4>)
   1cfb0:	4798      	blx	r3
			{
				traceTASK_DELAY();
   1cfb2:	4b25      	ldr	r3, [pc, #148]	; (1d048 <vTaskDelay+0xb8>)
   1cfb4:	681b      	ldr	r3, [r3, #0]
   1cfb6:	0018      	movs	r0, r3
   1cfb8:	4b24      	ldr	r3, [pc, #144]	; (1d04c <vTaskDelay+0xbc>)
   1cfba:	4798      	blx	r3
   1cfbc:	0003      	movs	r3, r0
   1cfbe:	001a      	movs	r2, r3
   1cfc0:	4b23      	ldr	r3, [pc, #140]	; (1d050 <vTaskDelay+0xc0>)
   1cfc2:	881b      	ldrh	r3, [r3, #0]
   1cfc4:	4013      	ands	r3, r2
   1cfc6:	b29b      	uxth	r3, r3
   1cfc8:	2b00      	cmp	r3, #0
   1cfca:	d00e      	beq.n	1cfea <vTaskDelay+0x5a>
   1cfcc:	687b      	ldr	r3, [r7, #4]
   1cfce:	0019      	movs	r1, r3
   1cfd0:	2089      	movs	r0, #137	; 0x89
   1cfd2:	4b20      	ldr	r3, [pc, #128]	; (1d054 <vTaskDelay+0xc4>)
   1cfd4:	4798      	blx	r3
   1cfd6:	4b1c      	ldr	r3, [pc, #112]	; (1d048 <vTaskDelay+0xb8>)
   1cfd8:	681b      	ldr	r3, [r3, #0]
   1cfda:	0018      	movs	r0, r3
   1cfdc:	4b1e      	ldr	r3, [pc, #120]	; (1d058 <vTaskDelay+0xc8>)
   1cfde:	4798      	blx	r3
   1cfe0:	0003      	movs	r3, r0
   1cfe2:	b2db      	uxtb	r3, r3
   1cfe4:	0018      	movs	r0, r3
   1cfe6:	4b1d      	ldr	r3, [pc, #116]	; (1d05c <vTaskDelay+0xcc>)
   1cfe8:	4798      	blx	r3
   1cfea:	4b1d      	ldr	r3, [pc, #116]	; (1d060 <vTaskDelay+0xd0>)
   1cfec:	4798      	blx	r3
   1cfee:	0003      	movs	r3, r0
   1cff0:	0018      	movs	r0, r3
   1cff2:	4b16      	ldr	r3, [pc, #88]	; (1d04c <vTaskDelay+0xbc>)
   1cff4:	4798      	blx	r3
   1cff6:	0003      	movs	r3, r0
   1cff8:	001a      	movs	r2, r3
   1cffa:	4b15      	ldr	r3, [pc, #84]	; (1d050 <vTaskDelay+0xc0>)
   1cffc:	881b      	ldrh	r3, [r3, #0]
   1cffe:	4013      	ands	r3, r2
   1d000:	b29b      	uxth	r3, r3
   1d002:	2b00      	cmp	r3, #0
   1d004:	d00a      	beq.n	1d01c <vTaskDelay+0x8c>
   1d006:	4b16      	ldr	r3, [pc, #88]	; (1d060 <vTaskDelay+0xd0>)
   1d008:	4798      	blx	r3
   1d00a:	0003      	movs	r3, r0
   1d00c:	0018      	movs	r0, r3
   1d00e:	4b12      	ldr	r3, [pc, #72]	; (1d058 <vTaskDelay+0xc8>)
   1d010:	4798      	blx	r3
   1d012:	0003      	movs	r3, r0
   1d014:	b2db      	uxtb	r3, r3
   1d016:	0018      	movs	r0, r3
   1d018:	4b10      	ldr	r3, [pc, #64]	; (1d05c <vTaskDelay+0xcc>)
   1d01a:	4798      	blx	r3
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
   1d01c:	687b      	ldr	r3, [r7, #4]
   1d01e:	2100      	movs	r1, #0
   1d020:	0018      	movs	r0, r3
   1d022:	4b10      	ldr	r3, [pc, #64]	; (1d064 <vTaskDelay+0xd4>)
   1d024:	4798      	blx	r3
			}
			xAlreadyYielded = xTaskResumeAll();
   1d026:	4b10      	ldr	r3, [pc, #64]	; (1d068 <vTaskDelay+0xd8>)
   1d028:	4798      	blx	r3
   1d02a:	0003      	movs	r3, r0
   1d02c:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   1d02e:	68fb      	ldr	r3, [r7, #12]
   1d030:	2b00      	cmp	r3, #0
   1d032:	d101      	bne.n	1d038 <vTaskDelay+0xa8>
		{
			portYIELD_WITHIN_API();
   1d034:	4b0d      	ldr	r3, [pc, #52]	; (1d06c <vTaskDelay+0xdc>)
   1d036:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1d038:	46c0      	nop			; (mov r8, r8)
   1d03a:	46bd      	mov	sp, r7
   1d03c:	b004      	add	sp, #16
   1d03e:	bd80      	pop	{r7, pc}
   1d040:	200041dc 	.word	0x200041dc
   1d044:	0001d251 	.word	0x0001d251
   1d048:	200040dc 	.word	0x200040dc
   1d04c:	00018f95 	.word	0x00018f95
   1d050:	20000110 	.word	0x20000110
   1d054:	00019c95 	.word	0x00019c95
   1d058:	00018f75 	.word	0x00018f75
   1d05c:	0001a125 	.word	0x0001a125
   1d060:	00019231 	.word	0x00019231
   1d064:	0001e1a9 	.word	0x0001e1a9
   1d068:	0001d269 	.word	0x0001d269
   1d06c:	0001af81 	.word	0x0001af81

0001d070 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
   1d070:	b580      	push	{r7, lr}
   1d072:	b084      	sub	sp, #16
   1d074:	af00      	add	r7, sp, #0
   1d076:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
   1d078:	4b42      	ldr	r3, [pc, #264]	; (1d184 <vTaskSuspend+0x114>)
   1d07a:	4798      	blx	r3
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
   1d07c:	687b      	ldr	r3, [r7, #4]
   1d07e:	2b00      	cmp	r3, #0
   1d080:	d102      	bne.n	1d088 <vTaskSuspend+0x18>
   1d082:	4b41      	ldr	r3, [pc, #260]	; (1d188 <vTaskSuspend+0x118>)
   1d084:	681b      	ldr	r3, [r3, #0]
   1d086:	e000      	b.n	1d08a <vTaskSuspend+0x1a>
   1d088:	687b      	ldr	r3, [r7, #4]
   1d08a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );
   1d08c:	4b3f      	ldr	r3, [pc, #252]	; (1d18c <vTaskSuspend+0x11c>)
   1d08e:	4798      	blx	r3
   1d090:	0003      	movs	r3, r0
   1d092:	0018      	movs	r0, r3
   1d094:	4b3e      	ldr	r3, [pc, #248]	; (1d190 <vTaskSuspend+0x120>)
   1d096:	4798      	blx	r3
   1d098:	0003      	movs	r3, r0
   1d09a:	001a      	movs	r2, r3
   1d09c:	4b3d      	ldr	r3, [pc, #244]	; (1d194 <vTaskSuspend+0x124>)
   1d09e:	881b      	ldrh	r3, [r3, #0]
   1d0a0:	4013      	ands	r3, r2
   1d0a2:	b29b      	uxth	r3, r3
   1d0a4:	2b00      	cmp	r3, #0
   1d0a6:	d016      	beq.n	1d0d6 <vTaskSuspend+0x66>
   1d0a8:	68fb      	ldr	r3, [r7, #12]
   1d0aa:	0018      	movs	r0, r3
   1d0ac:	4b38      	ldr	r3, [pc, #224]	; (1d190 <vTaskSuspend+0x120>)
   1d0ae:	4798      	blx	r3
   1d0b0:	0003      	movs	r3, r0
   1d0b2:	001a      	movs	r2, r3
   1d0b4:	4b37      	ldr	r3, [pc, #220]	; (1d194 <vTaskSuspend+0x124>)
   1d0b6:	881b      	ldrh	r3, [r3, #0]
   1d0b8:	4013      	ands	r3, r2
   1d0ba:	b29b      	uxth	r3, r3
   1d0bc:	2b00      	cmp	r3, #0
   1d0be:	d00a      	beq.n	1d0d6 <vTaskSuspend+0x66>
   1d0c0:	68fb      	ldr	r3, [r7, #12]
   1d0c2:	0018      	movs	r0, r3
   1d0c4:	4b34      	ldr	r3, [pc, #208]	; (1d198 <vTaskSuspend+0x128>)
   1d0c6:	4798      	blx	r3
   1d0c8:	0003      	movs	r3, r0
   1d0ca:	b2db      	uxtb	r3, r3
   1d0cc:	001a      	movs	r2, r3
   1d0ce:	2103      	movs	r1, #3
   1d0d0:	208a      	movs	r0, #138	; 0x8a
   1d0d2:	4b32      	ldr	r3, [pc, #200]	; (1d19c <vTaskSuspend+0x12c>)
   1d0d4:	4798      	blx	r3
   1d0d6:	68fb      	ldr	r3, [r7, #12]
   1d0d8:	0018      	movs	r0, r3
   1d0da:	4b2f      	ldr	r3, [pc, #188]	; (1d198 <vTaskSuspend+0x128>)
   1d0dc:	4798      	blx	r3
   1d0de:	0003      	movs	r3, r0
   1d0e0:	b2db      	uxtb	r3, r3
   1d0e2:	0018      	movs	r0, r3
   1d0e4:	4b2e      	ldr	r3, [pc, #184]	; (1d1a0 <vTaskSuspend+0x130>)
   1d0e6:	4798      	blx	r3

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1d0e8:	68fb      	ldr	r3, [r7, #12]
   1d0ea:	3304      	adds	r3, #4
   1d0ec:	0018      	movs	r0, r3
   1d0ee:	4b2d      	ldr	r3, [pc, #180]	; (1d1a4 <vTaskSuspend+0x134>)
   1d0f0:	4798      	blx	r3
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1d0f2:	68fb      	ldr	r3, [r7, #12]
   1d0f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1d0f6:	2b00      	cmp	r3, #0
   1d0f8:	d004      	beq.n	1d104 <vTaskSuspend+0x94>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1d0fa:	68fb      	ldr	r3, [r7, #12]
   1d0fc:	3318      	adds	r3, #24
   1d0fe:	0018      	movs	r0, r3
   1d100:	4b28      	ldr	r3, [pc, #160]	; (1d1a4 <vTaskSuspend+0x134>)
   1d102:	4798      	blx	r3
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
   1d104:	68fb      	ldr	r3, [r7, #12]
   1d106:	1d1a      	adds	r2, r3, #4
   1d108:	4b27      	ldr	r3, [pc, #156]	; (1d1a8 <vTaskSuspend+0x138>)
   1d10a:	0011      	movs	r1, r2
   1d10c:	0018      	movs	r0, r3
   1d10e:	4b27      	ldr	r3, [pc, #156]	; (1d1ac <vTaskSuspend+0x13c>)
   1d110:	4798      	blx	r3

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
   1d112:	68fb      	ldr	r3, [r7, #12]
   1d114:	2250      	movs	r2, #80	; 0x50
   1d116:	5c9b      	ldrb	r3, [r3, r2]
   1d118:	b2db      	uxtb	r3, r3
   1d11a:	2b01      	cmp	r3, #1
   1d11c:	d103      	bne.n	1d126 <vTaskSuspend+0xb6>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
   1d11e:	68fb      	ldr	r3, [r7, #12]
   1d120:	2250      	movs	r2, #80	; 0x50
   1d122:	2100      	movs	r1, #0
   1d124:	5499      	strb	r1, [r3, r2]
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
   1d126:	4b22      	ldr	r3, [pc, #136]	; (1d1b0 <vTaskSuspend+0x140>)
   1d128:	4798      	blx	r3

		if( xSchedulerRunning != pdFALSE )
   1d12a:	4b22      	ldr	r3, [pc, #136]	; (1d1b4 <vTaskSuspend+0x144>)
   1d12c:	681b      	ldr	r3, [r3, #0]
   1d12e:	2b00      	cmp	r3, #0
   1d130:	d005      	beq.n	1d13e <vTaskSuspend+0xce>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
   1d132:	4b14      	ldr	r3, [pc, #80]	; (1d184 <vTaskSuspend+0x114>)
   1d134:	4798      	blx	r3
			{
				prvResetNextTaskUnblockTime();
   1d136:	4b20      	ldr	r3, [pc, #128]	; (1d1b8 <vTaskSuspend+0x148>)
   1d138:	4798      	blx	r3
			}
			taskEXIT_CRITICAL();
   1d13a:	4b1d      	ldr	r3, [pc, #116]	; (1d1b0 <vTaskSuspend+0x140>)
   1d13c:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
   1d13e:	4b12      	ldr	r3, [pc, #72]	; (1d188 <vTaskSuspend+0x118>)
   1d140:	681b      	ldr	r3, [r3, #0]
   1d142:	68fa      	ldr	r2, [r7, #12]
   1d144:	429a      	cmp	r2, r3
   1d146:	d118      	bne.n	1d17a <vTaskSuspend+0x10a>
		{
			if( xSchedulerRunning != pdFALSE )
   1d148:	4b1a      	ldr	r3, [pc, #104]	; (1d1b4 <vTaskSuspend+0x144>)
   1d14a:	681b      	ldr	r3, [r3, #0]
   1d14c:	2b00      	cmp	r3, #0
   1d14e:	d008      	beq.n	1d162 <vTaskSuspend+0xf2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
   1d150:	4b1a      	ldr	r3, [pc, #104]	; (1d1bc <vTaskSuspend+0x14c>)
   1d152:	681b      	ldr	r3, [r3, #0]
   1d154:	2b00      	cmp	r3, #0
   1d156:	d001      	beq.n	1d15c <vTaskSuspend+0xec>
   1d158:	b672      	cpsid	i
   1d15a:	e7fe      	b.n	1d15a <vTaskSuspend+0xea>
				portYIELD_WITHIN_API();
   1d15c:	4b18      	ldr	r3, [pc, #96]	; (1d1c0 <vTaskSuspend+0x150>)
   1d15e:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1d160:	e00b      	b.n	1d17a <vTaskSuspend+0x10a>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
   1d162:	4b11      	ldr	r3, [pc, #68]	; (1d1a8 <vTaskSuspend+0x138>)
   1d164:	681a      	ldr	r2, [r3, #0]
   1d166:	4b17      	ldr	r3, [pc, #92]	; (1d1c4 <vTaskSuspend+0x154>)
   1d168:	681b      	ldr	r3, [r3, #0]
   1d16a:	429a      	cmp	r2, r3
   1d16c:	d103      	bne.n	1d176 <vTaskSuspend+0x106>
					pxCurrentTCB = NULL;
   1d16e:	4b06      	ldr	r3, [pc, #24]	; (1d188 <vTaskSuspend+0x118>)
   1d170:	2200      	movs	r2, #0
   1d172:	601a      	str	r2, [r3, #0]
	}
   1d174:	e001      	b.n	1d17a <vTaskSuspend+0x10a>
					vTaskSwitchContext();
   1d176:	4b14      	ldr	r3, [pc, #80]	; (1d1c8 <vTaskSuspend+0x158>)
   1d178:	4798      	blx	r3
	}
   1d17a:	46c0      	nop			; (mov r8, r8)
   1d17c:	46bd      	mov	sp, r7
   1d17e:	b004      	add	sp, #16
   1d180:	bd80      	pop	{r7, pc}
   1d182:	46c0      	nop			; (mov r8, r8)
   1d184:	0001af99 	.word	0x0001af99
   1d188:	200040dc 	.word	0x200040dc
   1d18c:	00019231 	.word	0x00019231
   1d190:	00018f95 	.word	0x00018f95
   1d194:	20000110 	.word	0x20000110
   1d198:	00018f75 	.word	0x00018f75
   1d19c:	0001998d 	.word	0x0001998d
   1d1a0:	0001a125 	.word	0x0001a125
   1d1a4:	0001ae0f 	.word	0x0001ae0f
   1d1a8:	200041a0 	.word	0x200041a0
   1d1ac:	0001ad5f 	.word	0x0001ad5f
   1d1b0:	0001afbd 	.word	0x0001afbd
   1d1b4:	200041c0 	.word	0x200041c0
   1d1b8:	0001dc55 	.word	0x0001dc55
   1d1bc:	200041dc 	.word	0x200041dc
   1d1c0:	0001af81 	.word	0x0001af81
   1d1c4:	200041b4 	.word	0x200041b4
   1d1c8:	0001d5e5 	.word	0x0001d5e5

0001d1cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
   1d1cc:	b590      	push	{r4, r7, lr}
   1d1ce:	b085      	sub	sp, #20
   1d1d0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
   1d1d2:	4916      	ldr	r1, [pc, #88]	; (1d22c <vTaskStartScheduler+0x60>)
   1d1d4:	4816      	ldr	r0, [pc, #88]	; (1d230 <vTaskStartScheduler+0x64>)
   1d1d6:	4b17      	ldr	r3, [pc, #92]	; (1d234 <vTaskStartScheduler+0x68>)
   1d1d8:	9301      	str	r3, [sp, #4]
   1d1da:	2300      	movs	r3, #0
   1d1dc:	9300      	str	r3, [sp, #0]
   1d1de:	2300      	movs	r3, #0
   1d1e0:	2296      	movs	r2, #150	; 0x96
   1d1e2:	4c15      	ldr	r4, [pc, #84]	; (1d238 <vTaskStartScheduler+0x6c>)
   1d1e4:	47a0      	blx	r4
   1d1e6:	0003      	movs	r3, r0
   1d1e8:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   1d1ea:	687b      	ldr	r3, [r7, #4]
   1d1ec:	2b01      	cmp	r3, #1
   1d1ee:	d103      	bne.n	1d1f8 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
   1d1f0:	4b12      	ldr	r3, [pc, #72]	; (1d23c <vTaskStartScheduler+0x70>)
   1d1f2:	4798      	blx	r3
   1d1f4:	0003      	movs	r3, r0
   1d1f6:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
   1d1f8:	687b      	ldr	r3, [r7, #4]
   1d1fa:	2b01      	cmp	r3, #1
   1d1fc:	d10d      	bne.n	1d21a <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
   1d1fe:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
   1d200:	4b0f      	ldr	r3, [pc, #60]	; (1d240 <vTaskStartScheduler+0x74>)
   1d202:	2201      	movs	r2, #1
   1d204:	4252      	negs	r2, r2
   1d206:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
   1d208:	4b0e      	ldr	r3, [pc, #56]	; (1d244 <vTaskStartScheduler+0x78>)
   1d20a:	2201      	movs	r2, #1
   1d20c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
   1d20e:	4b0e      	ldr	r3, [pc, #56]	; (1d248 <vTaskStartScheduler+0x7c>)
   1d210:	2200      	movs	r2, #0
   1d212:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   1d214:	4b0d      	ldr	r3, [pc, #52]	; (1d24c <vTaskStartScheduler+0x80>)
   1d216:	4798      	blx	r3
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
   1d218:	e004      	b.n	1d224 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
   1d21a:	687b      	ldr	r3, [r7, #4]
   1d21c:	3301      	adds	r3, #1
   1d21e:	d101      	bne.n	1d224 <vTaskStartScheduler+0x58>
   1d220:	b672      	cpsid	i
   1d222:	e7fe      	b.n	1d222 <vTaskStartScheduler+0x56>
}
   1d224:	46c0      	nop			; (mov r8, r8)
   1d226:	46bd      	mov	sp, r7
   1d228:	b003      	add	sp, #12
   1d22a:	bd90      	pop	{r4, r7, pc}
   1d22c:	00039374 	.word	0x00039374
   1d230:	0001da9d 	.word	0x0001da9d
   1d234:	200041d8 	.word	0x200041d8
   1d238:	0001cbf5 	.word	0x0001cbf5
   1d23c:	0001e25d 	.word	0x0001e25d
   1d240:	200041d4 	.word	0x200041d4
   1d244:	200041c0 	.word	0x200041c0
   1d248:	200041b8 	.word	0x200041b8
   1d24c:	0001af29 	.word	0x0001af29

0001d250 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
   1d250:	b580      	push	{r7, lr}
   1d252:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
   1d254:	4b03      	ldr	r3, [pc, #12]	; (1d264 <vTaskSuspendAll+0x14>)
   1d256:	681b      	ldr	r3, [r3, #0]
   1d258:	1c5a      	adds	r2, r3, #1
   1d25a:	4b02      	ldr	r3, [pc, #8]	; (1d264 <vTaskSuspendAll+0x14>)
   1d25c:	601a      	str	r2, [r3, #0]
}
   1d25e:	46c0      	nop			; (mov r8, r8)
   1d260:	46bd      	mov	sp, r7
   1d262:	bd80      	pop	{r7, pc}
   1d264:	200041dc 	.word	0x200041dc

0001d268 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
   1d268:	b580      	push	{r7, lr}
   1d26a:	b084      	sub	sp, #16
   1d26c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
   1d26e:	2300      	movs	r3, #0
   1d270:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
   1d272:	2300      	movs	r3, #0
   1d274:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   1d276:	4b45      	ldr	r3, [pc, #276]	; (1d38c <xTaskResumeAll+0x124>)
   1d278:	681b      	ldr	r3, [r3, #0]
   1d27a:	2b00      	cmp	r3, #0
   1d27c:	d101      	bne.n	1d282 <xTaskResumeAll+0x1a>
   1d27e:	b672      	cpsid	i
   1d280:	e7fe      	b.n	1d280 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   1d282:	4b43      	ldr	r3, [pc, #268]	; (1d390 <xTaskResumeAll+0x128>)
   1d284:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   1d286:	4b41      	ldr	r3, [pc, #260]	; (1d38c <xTaskResumeAll+0x124>)
   1d288:	681b      	ldr	r3, [r3, #0]
   1d28a:	1e5a      	subs	r2, r3, #1
   1d28c:	4b3f      	ldr	r3, [pc, #252]	; (1d38c <xTaskResumeAll+0x124>)
   1d28e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1d290:	4b3e      	ldr	r3, [pc, #248]	; (1d38c <xTaskResumeAll+0x124>)
   1d292:	681b      	ldr	r3, [r3, #0]
   1d294:	2b00      	cmp	r3, #0
   1d296:	d000      	beq.n	1d29a <xTaskResumeAll+0x32>
   1d298:	e071      	b.n	1d37e <xTaskResumeAll+0x116>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
   1d29a:	4b3e      	ldr	r3, [pc, #248]	; (1d394 <xTaskResumeAll+0x12c>)
   1d29c:	681b      	ldr	r3, [r3, #0]
   1d29e:	2b00      	cmp	r3, #0
   1d2a0:	d100      	bne.n	1d2a4 <xTaskResumeAll+0x3c>
   1d2a2:	e06c      	b.n	1d37e <xTaskResumeAll+0x116>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1d2a4:	e044      	b.n	1d330 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
   1d2a6:	4b3c      	ldr	r3, [pc, #240]	; (1d398 <xTaskResumeAll+0x130>)
   1d2a8:	68db      	ldr	r3, [r3, #12]
   1d2aa:	68db      	ldr	r3, [r3, #12]
   1d2ac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1d2ae:	68fb      	ldr	r3, [r7, #12]
   1d2b0:	3318      	adds	r3, #24
   1d2b2:	0018      	movs	r0, r3
   1d2b4:	4b39      	ldr	r3, [pc, #228]	; (1d39c <xTaskResumeAll+0x134>)
   1d2b6:	4798      	blx	r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1d2b8:	68fb      	ldr	r3, [r7, #12]
   1d2ba:	3304      	adds	r3, #4
   1d2bc:	0018      	movs	r0, r3
   1d2be:	4b37      	ldr	r3, [pc, #220]	; (1d39c <xTaskResumeAll+0x134>)
   1d2c0:	4798      	blx	r3
					prvAddTaskToReadyList( pxTCB );
   1d2c2:	68fb      	ldr	r3, [r7, #12]
   1d2c4:	0018      	movs	r0, r3
   1d2c6:	4b36      	ldr	r3, [pc, #216]	; (1d3a0 <xTaskResumeAll+0x138>)
   1d2c8:	4798      	blx	r3
   1d2ca:	0003      	movs	r3, r0
   1d2cc:	001a      	movs	r2, r3
   1d2ce:	4b35      	ldr	r3, [pc, #212]	; (1d3a4 <xTaskResumeAll+0x13c>)
   1d2d0:	881b      	ldrh	r3, [r3, #0]
   1d2d2:	4013      	ands	r3, r2
   1d2d4:	b29b      	uxth	r3, r3
   1d2d6:	2b00      	cmp	r3, #0
   1d2d8:	d008      	beq.n	1d2ec <xTaskResumeAll+0x84>
   1d2da:	68fb      	ldr	r3, [r7, #12]
   1d2dc:	0018      	movs	r0, r3
   1d2de:	4b32      	ldr	r3, [pc, #200]	; (1d3a8 <xTaskResumeAll+0x140>)
   1d2e0:	4798      	blx	r3
   1d2e2:	0003      	movs	r3, r0
   1d2e4:	b2db      	uxtb	r3, r3
   1d2e6:	0018      	movs	r0, r3
   1d2e8:	4b30      	ldr	r3, [pc, #192]	; (1d3ac <xTaskResumeAll+0x144>)
   1d2ea:	4798      	blx	r3
   1d2ec:	68fb      	ldr	r3, [r7, #12]
   1d2ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d2f0:	4b2f      	ldr	r3, [pc, #188]	; (1d3b0 <xTaskResumeAll+0x148>)
   1d2f2:	681b      	ldr	r3, [r3, #0]
   1d2f4:	429a      	cmp	r2, r3
   1d2f6:	d903      	bls.n	1d300 <xTaskResumeAll+0x98>
   1d2f8:	68fb      	ldr	r3, [r7, #12]
   1d2fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d2fc:	4b2c      	ldr	r3, [pc, #176]	; (1d3b0 <xTaskResumeAll+0x148>)
   1d2fe:	601a      	str	r2, [r3, #0]
   1d300:	68fb      	ldr	r3, [r7, #12]
   1d302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d304:	0013      	movs	r3, r2
   1d306:	009b      	lsls	r3, r3, #2
   1d308:	189b      	adds	r3, r3, r2
   1d30a:	009b      	lsls	r3, r3, #2
   1d30c:	4a29      	ldr	r2, [pc, #164]	; (1d3b4 <xTaskResumeAll+0x14c>)
   1d30e:	189a      	adds	r2, r3, r2
   1d310:	68fb      	ldr	r3, [r7, #12]
   1d312:	3304      	adds	r3, #4
   1d314:	0019      	movs	r1, r3
   1d316:	0010      	movs	r0, r2
   1d318:	4b27      	ldr	r3, [pc, #156]	; (1d3b8 <xTaskResumeAll+0x150>)
   1d31a:	4798      	blx	r3

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1d31c:	68fb      	ldr	r3, [r7, #12]
   1d31e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d320:	4b26      	ldr	r3, [pc, #152]	; (1d3bc <xTaskResumeAll+0x154>)
   1d322:	681b      	ldr	r3, [r3, #0]
   1d324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d326:	429a      	cmp	r2, r3
   1d328:	d302      	bcc.n	1d330 <xTaskResumeAll+0xc8>
					{
						xYieldPending = pdTRUE;
   1d32a:	4b25      	ldr	r3, [pc, #148]	; (1d3c0 <xTaskResumeAll+0x158>)
   1d32c:	2201      	movs	r2, #1
   1d32e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
   1d330:	4b19      	ldr	r3, [pc, #100]	; (1d398 <xTaskResumeAll+0x130>)
   1d332:	681b      	ldr	r3, [r3, #0]
   1d334:	2b00      	cmp	r3, #0
   1d336:	d1b6      	bne.n	1d2a6 <xTaskResumeAll+0x3e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
   1d338:	68fb      	ldr	r3, [r7, #12]
   1d33a:	2b00      	cmp	r3, #0
   1d33c:	d001      	beq.n	1d342 <xTaskResumeAll+0xda>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
   1d33e:	4b21      	ldr	r3, [pc, #132]	; (1d3c4 <xTaskResumeAll+0x15c>)
   1d340:	4798      	blx	r3
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
   1d342:	4b21      	ldr	r3, [pc, #132]	; (1d3c8 <xTaskResumeAll+0x160>)
   1d344:	681b      	ldr	r3, [r3, #0]
   1d346:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
   1d348:	687b      	ldr	r3, [r7, #4]
   1d34a:	2b00      	cmp	r3, #0
   1d34c:	d00f      	beq.n	1d36e <xTaskResumeAll+0x106>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
   1d34e:	4b1f      	ldr	r3, [pc, #124]	; (1d3cc <xTaskResumeAll+0x164>)
   1d350:	4798      	blx	r3
   1d352:	1e03      	subs	r3, r0, #0
   1d354:	d002      	beq.n	1d35c <xTaskResumeAll+0xf4>
							{
								xYieldPending = pdTRUE;
   1d356:	4b1a      	ldr	r3, [pc, #104]	; (1d3c0 <xTaskResumeAll+0x158>)
   1d358:	2201      	movs	r2, #1
   1d35a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
   1d35c:	687b      	ldr	r3, [r7, #4]
   1d35e:	3b01      	subs	r3, #1
   1d360:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
   1d362:	687b      	ldr	r3, [r7, #4]
   1d364:	2b00      	cmp	r3, #0
   1d366:	d1f2      	bne.n	1d34e <xTaskResumeAll+0xe6>

						uxPendedTicks = 0;
   1d368:	4b17      	ldr	r3, [pc, #92]	; (1d3c8 <xTaskResumeAll+0x160>)
   1d36a:	2200      	movs	r2, #0
   1d36c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
   1d36e:	4b14      	ldr	r3, [pc, #80]	; (1d3c0 <xTaskResumeAll+0x158>)
   1d370:	681b      	ldr	r3, [r3, #0]
   1d372:	2b00      	cmp	r3, #0
   1d374:	d003      	beq.n	1d37e <xTaskResumeAll+0x116>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
   1d376:	2301      	movs	r3, #1
   1d378:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
   1d37a:	4b15      	ldr	r3, [pc, #84]	; (1d3d0 <xTaskResumeAll+0x168>)
   1d37c:	4798      	blx	r3
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1d37e:	4b15      	ldr	r3, [pc, #84]	; (1d3d4 <xTaskResumeAll+0x16c>)
   1d380:	4798      	blx	r3

	return xAlreadyYielded;
   1d382:	68bb      	ldr	r3, [r7, #8]
}
   1d384:	0018      	movs	r0, r3
   1d386:	46bd      	mov	sp, r7
   1d388:	b004      	add	sp, #16
   1d38a:	bd80      	pop	{r7, pc}
   1d38c:	200041dc 	.word	0x200041dc
   1d390:	0001af99 	.word	0x0001af99
   1d394:	200041b4 	.word	0x200041b4
   1d398:	20004174 	.word	0x20004174
   1d39c:	0001ae0f 	.word	0x0001ae0f
   1d3a0:	00018f95 	.word	0x00018f95
   1d3a4:	20000110 	.word	0x20000110
   1d3a8:	00018f75 	.word	0x00018f75
   1d3ac:	00019745 	.word	0x00019745
   1d3b0:	200041bc 	.word	0x200041bc
   1d3b4:	200040e0 	.word	0x200040e0
   1d3b8:	0001ad5f 	.word	0x0001ad5f
   1d3bc:	200040dc 	.word	0x200040dc
   1d3c0:	200041c8 	.word	0x200041c8
   1d3c4:	0001dc55 	.word	0x0001dc55
   1d3c8:	200041c4 	.word	0x200041c4
   1d3cc:	0001d3f5 	.word	0x0001d3f5
   1d3d0:	0001af81 	.word	0x0001af81
   1d3d4:	0001afbd 	.word	0x0001afbd

0001d3d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
   1d3d8:	b580      	push	{r7, lr}
   1d3da:	b082      	sub	sp, #8
   1d3dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
   1d3de:	4b04      	ldr	r3, [pc, #16]	; (1d3f0 <xTaskGetTickCount+0x18>)
   1d3e0:	681b      	ldr	r3, [r3, #0]
   1d3e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
   1d3e4:	687b      	ldr	r3, [r7, #4]
}
   1d3e6:	0018      	movs	r0, r3
   1d3e8:	46bd      	mov	sp, r7
   1d3ea:	b002      	add	sp, #8
   1d3ec:	bd80      	pop	{r7, pc}
   1d3ee:	46c0      	nop			; (mov r8, r8)
   1d3f0:	200041b8 	.word	0x200041b8

0001d3f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
   1d3f4:	b580      	push	{r7, lr}
   1d3f6:	b086      	sub	sp, #24
   1d3f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
   1d3fa:	2300      	movs	r3, #0
   1d3fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
   1d3fe:	4b64      	ldr	r3, [pc, #400]	; (1d590 <xTaskIncrementTick+0x19c>)
   1d400:	681b      	ldr	r3, [r3, #0]
   1d402:	2b01      	cmp	r3, #1
   1d404:	d003      	beq.n	1d40e <xTaskIncrementTick+0x1a>
   1d406:	4b63      	ldr	r3, [pc, #396]	; (1d594 <xTaskIncrementTick+0x1a0>)
   1d408:	681b      	ldr	r3, [r3, #0]
   1d40a:	2b00      	cmp	r3, #0
   1d40c:	d107      	bne.n	1d41e <xTaskIncrementTick+0x2a>
   1d40e:	4b62      	ldr	r3, [pc, #392]	; (1d598 <xTaskIncrementTick+0x1a4>)
   1d410:	681b      	ldr	r3, [r3, #0]
   1d412:	1c5a      	adds	r2, r3, #1
   1d414:	4b60      	ldr	r3, [pc, #384]	; (1d598 <xTaskIncrementTick+0x1a4>)
   1d416:	601a      	str	r2, [r3, #0]
   1d418:	2000      	movs	r0, #0
   1d41a:	4b60      	ldr	r3, [pc, #384]	; (1d59c <xTaskIncrementTick+0x1a8>)
   1d41c:	4798      	blx	r3
   1d41e:	4b5c      	ldr	r3, [pc, #368]	; (1d590 <xTaskIncrementTick+0x19c>)
   1d420:	681b      	ldr	r3, [r3, #0]
   1d422:	2b00      	cmp	r3, #0
   1d424:	d106      	bne.n	1d434 <xTaskIncrementTick+0x40>
   1d426:	4b5e      	ldr	r3, [pc, #376]	; (1d5a0 <xTaskIncrementTick+0x1ac>)
   1d428:	681b      	ldr	r3, [r3, #0]
   1d42a:	3301      	adds	r3, #1
   1d42c:	0019      	movs	r1, r3
   1d42e:	2003      	movs	r0, #3
   1d430:	4b5c      	ldr	r3, [pc, #368]	; (1d5a4 <xTaskIncrementTick+0x1b0>)
   1d432:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1d434:	4b56      	ldr	r3, [pc, #344]	; (1d590 <xTaskIncrementTick+0x19c>)
   1d436:	681b      	ldr	r3, [r3, #0]
   1d438:	2b00      	cmp	r3, #0
   1d43a:	d000      	beq.n	1d43e <xTaskIncrementTick+0x4a>
   1d43c:	e098      	b.n	1d570 <xTaskIncrementTick+0x17c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
   1d43e:	4b58      	ldr	r3, [pc, #352]	; (1d5a0 <xTaskIncrementTick+0x1ac>)
   1d440:	681b      	ldr	r3, [r3, #0]
   1d442:	3301      	adds	r3, #1
   1d444:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
   1d446:	4b56      	ldr	r3, [pc, #344]	; (1d5a0 <xTaskIncrementTick+0x1ac>)
   1d448:	693a      	ldr	r2, [r7, #16]
   1d44a:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
   1d44c:	693b      	ldr	r3, [r7, #16]
   1d44e:	2b00      	cmp	r3, #0
   1d450:	d117      	bne.n	1d482 <xTaskIncrementTick+0x8e>
		{
			taskSWITCH_DELAYED_LISTS();
   1d452:	4b55      	ldr	r3, [pc, #340]	; (1d5a8 <xTaskIncrementTick+0x1b4>)
   1d454:	681b      	ldr	r3, [r3, #0]
   1d456:	681b      	ldr	r3, [r3, #0]
   1d458:	2b00      	cmp	r3, #0
   1d45a:	d001      	beq.n	1d460 <xTaskIncrementTick+0x6c>
   1d45c:	b672      	cpsid	i
   1d45e:	e7fe      	b.n	1d45e <xTaskIncrementTick+0x6a>
   1d460:	4b51      	ldr	r3, [pc, #324]	; (1d5a8 <xTaskIncrementTick+0x1b4>)
   1d462:	681b      	ldr	r3, [r3, #0]
   1d464:	60fb      	str	r3, [r7, #12]
   1d466:	4b51      	ldr	r3, [pc, #324]	; (1d5ac <xTaskIncrementTick+0x1b8>)
   1d468:	681a      	ldr	r2, [r3, #0]
   1d46a:	4b4f      	ldr	r3, [pc, #316]	; (1d5a8 <xTaskIncrementTick+0x1b4>)
   1d46c:	601a      	str	r2, [r3, #0]
   1d46e:	4b4f      	ldr	r3, [pc, #316]	; (1d5ac <xTaskIncrementTick+0x1b8>)
   1d470:	68fa      	ldr	r2, [r7, #12]
   1d472:	601a      	str	r2, [r3, #0]
   1d474:	4b4e      	ldr	r3, [pc, #312]	; (1d5b0 <xTaskIncrementTick+0x1bc>)
   1d476:	681b      	ldr	r3, [r3, #0]
   1d478:	1c5a      	adds	r2, r3, #1
   1d47a:	4b4d      	ldr	r3, [pc, #308]	; (1d5b0 <xTaskIncrementTick+0x1bc>)
   1d47c:	601a      	str	r2, [r3, #0]
   1d47e:	4b4d      	ldr	r3, [pc, #308]	; (1d5b4 <xTaskIncrementTick+0x1c0>)
   1d480:	4798      	blx	r3

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
   1d482:	4b4d      	ldr	r3, [pc, #308]	; (1d5b8 <xTaskIncrementTick+0x1c4>)
   1d484:	681b      	ldr	r3, [r3, #0]
   1d486:	693a      	ldr	r2, [r7, #16]
   1d488:	429a      	cmp	r2, r3
   1d48a:	d363      	bcc.n	1d554 <xTaskIncrementTick+0x160>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1d48c:	4b46      	ldr	r3, [pc, #280]	; (1d5a8 <xTaskIncrementTick+0x1b4>)
   1d48e:	681b      	ldr	r3, [r3, #0]
   1d490:	681b      	ldr	r3, [r3, #0]
   1d492:	2b00      	cmp	r3, #0
   1d494:	d101      	bne.n	1d49a <xTaskIncrementTick+0xa6>
   1d496:	2301      	movs	r3, #1
   1d498:	e000      	b.n	1d49c <xTaskIncrementTick+0xa8>
   1d49a:	2300      	movs	r3, #0
   1d49c:	2b00      	cmp	r3, #0
   1d49e:	d004      	beq.n	1d4aa <xTaskIncrementTick+0xb6>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1d4a0:	4b45      	ldr	r3, [pc, #276]	; (1d5b8 <xTaskIncrementTick+0x1c4>)
   1d4a2:	2201      	movs	r2, #1
   1d4a4:	4252      	negs	r2, r2
   1d4a6:	601a      	str	r2, [r3, #0]
					break;
   1d4a8:	e054      	b.n	1d554 <xTaskIncrementTick+0x160>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1d4aa:	4b3f      	ldr	r3, [pc, #252]	; (1d5a8 <xTaskIncrementTick+0x1b4>)
   1d4ac:	681b      	ldr	r3, [r3, #0]
   1d4ae:	68db      	ldr	r3, [r3, #12]
   1d4b0:	68db      	ldr	r3, [r3, #12]
   1d4b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
   1d4b4:	68bb      	ldr	r3, [r7, #8]
   1d4b6:	685b      	ldr	r3, [r3, #4]
   1d4b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
   1d4ba:	693a      	ldr	r2, [r7, #16]
   1d4bc:	687b      	ldr	r3, [r7, #4]
   1d4be:	429a      	cmp	r2, r3
   1d4c0:	d203      	bcs.n	1d4ca <xTaskIncrementTick+0xd6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
   1d4c2:	4b3d      	ldr	r3, [pc, #244]	; (1d5b8 <xTaskIncrementTick+0x1c4>)
   1d4c4:	687a      	ldr	r2, [r7, #4]
   1d4c6:	601a      	str	r2, [r3, #0]
						break;
   1d4c8:	e044      	b.n	1d554 <xTaskIncrementTick+0x160>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1d4ca:	68bb      	ldr	r3, [r7, #8]
   1d4cc:	3304      	adds	r3, #4
   1d4ce:	0018      	movs	r0, r3
   1d4d0:	4b3a      	ldr	r3, [pc, #232]	; (1d5bc <xTaskIncrementTick+0x1c8>)
   1d4d2:	4798      	blx	r3

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
   1d4d4:	68bb      	ldr	r3, [r7, #8]
   1d4d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1d4d8:	2b00      	cmp	r3, #0
   1d4da:	d004      	beq.n	1d4e6 <xTaskIncrementTick+0xf2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
   1d4dc:	68bb      	ldr	r3, [r7, #8]
   1d4de:	3318      	adds	r3, #24
   1d4e0:	0018      	movs	r0, r3
   1d4e2:	4b36      	ldr	r3, [pc, #216]	; (1d5bc <xTaskIncrementTick+0x1c8>)
   1d4e4:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
   1d4e6:	68bb      	ldr	r3, [r7, #8]
   1d4e8:	0018      	movs	r0, r3
   1d4ea:	4b35      	ldr	r3, [pc, #212]	; (1d5c0 <xTaskIncrementTick+0x1cc>)
   1d4ec:	4798      	blx	r3
   1d4ee:	0003      	movs	r3, r0
   1d4f0:	001a      	movs	r2, r3
   1d4f2:	4b34      	ldr	r3, [pc, #208]	; (1d5c4 <xTaskIncrementTick+0x1d0>)
   1d4f4:	881b      	ldrh	r3, [r3, #0]
   1d4f6:	4013      	ands	r3, r2
   1d4f8:	b29b      	uxth	r3, r3
   1d4fa:	2b00      	cmp	r3, #0
   1d4fc:	d008      	beq.n	1d510 <xTaskIncrementTick+0x11c>
   1d4fe:	68bb      	ldr	r3, [r7, #8]
   1d500:	0018      	movs	r0, r3
   1d502:	4b31      	ldr	r3, [pc, #196]	; (1d5c8 <xTaskIncrementTick+0x1d4>)
   1d504:	4798      	blx	r3
   1d506:	0003      	movs	r3, r0
   1d508:	b2db      	uxtb	r3, r3
   1d50a:	0018      	movs	r0, r3
   1d50c:	4b2f      	ldr	r3, [pc, #188]	; (1d5cc <xTaskIncrementTick+0x1d8>)
   1d50e:	4798      	blx	r3
   1d510:	68bb      	ldr	r3, [r7, #8]
   1d512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d514:	4b2e      	ldr	r3, [pc, #184]	; (1d5d0 <xTaskIncrementTick+0x1dc>)
   1d516:	681b      	ldr	r3, [r3, #0]
   1d518:	429a      	cmp	r2, r3
   1d51a:	d903      	bls.n	1d524 <xTaskIncrementTick+0x130>
   1d51c:	68bb      	ldr	r3, [r7, #8]
   1d51e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d520:	4b2b      	ldr	r3, [pc, #172]	; (1d5d0 <xTaskIncrementTick+0x1dc>)
   1d522:	601a      	str	r2, [r3, #0]
   1d524:	68bb      	ldr	r3, [r7, #8]
   1d526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d528:	0013      	movs	r3, r2
   1d52a:	009b      	lsls	r3, r3, #2
   1d52c:	189b      	adds	r3, r3, r2
   1d52e:	009b      	lsls	r3, r3, #2
   1d530:	4a28      	ldr	r2, [pc, #160]	; (1d5d4 <xTaskIncrementTick+0x1e0>)
   1d532:	189a      	adds	r2, r3, r2
   1d534:	68bb      	ldr	r3, [r7, #8]
   1d536:	3304      	adds	r3, #4
   1d538:	0019      	movs	r1, r3
   1d53a:	0010      	movs	r0, r2
   1d53c:	4b26      	ldr	r3, [pc, #152]	; (1d5d8 <xTaskIncrementTick+0x1e4>)
   1d53e:	4798      	blx	r3
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   1d540:	68bb      	ldr	r3, [r7, #8]
   1d542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d544:	4b25      	ldr	r3, [pc, #148]	; (1d5dc <xTaskIncrementTick+0x1e8>)
   1d546:	681b      	ldr	r3, [r3, #0]
   1d548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d54a:	429a      	cmp	r2, r3
   1d54c:	d39e      	bcc.n	1d48c <xTaskIncrementTick+0x98>
						{
							xSwitchRequired = pdTRUE;
   1d54e:	2301      	movs	r3, #1
   1d550:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1d552:	e79b      	b.n	1d48c <xTaskIncrementTick+0x98>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
   1d554:	4b21      	ldr	r3, [pc, #132]	; (1d5dc <xTaskIncrementTick+0x1e8>)
   1d556:	681b      	ldr	r3, [r3, #0]
   1d558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d55a:	491e      	ldr	r1, [pc, #120]	; (1d5d4 <xTaskIncrementTick+0x1e0>)
   1d55c:	0013      	movs	r3, r2
   1d55e:	009b      	lsls	r3, r3, #2
   1d560:	189b      	adds	r3, r3, r2
   1d562:	009b      	lsls	r3, r3, #2
   1d564:	585b      	ldr	r3, [r3, r1]
   1d566:	2b01      	cmp	r3, #1
   1d568:	d907      	bls.n	1d57a <xTaskIncrementTick+0x186>
			{
				xSwitchRequired = pdTRUE;
   1d56a:	2301      	movs	r3, #1
   1d56c:	617b      	str	r3, [r7, #20]
   1d56e:	e004      	b.n	1d57a <xTaskIncrementTick+0x186>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
   1d570:	4b08      	ldr	r3, [pc, #32]	; (1d594 <xTaskIncrementTick+0x1a0>)
   1d572:	681b      	ldr	r3, [r3, #0]
   1d574:	1c5a      	adds	r2, r3, #1
   1d576:	4b07      	ldr	r3, [pc, #28]	; (1d594 <xTaskIncrementTick+0x1a0>)
   1d578:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
   1d57a:	4b19      	ldr	r3, [pc, #100]	; (1d5e0 <xTaskIncrementTick+0x1ec>)
   1d57c:	681b      	ldr	r3, [r3, #0]
   1d57e:	2b00      	cmp	r3, #0
   1d580:	d001      	beq.n	1d586 <xTaskIncrementTick+0x192>
		{
			xSwitchRequired = pdTRUE;
   1d582:	2301      	movs	r3, #1
   1d584:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
   1d586:	697b      	ldr	r3, [r7, #20]
}
   1d588:	0018      	movs	r0, r3
   1d58a:	46bd      	mov	sp, r7
   1d58c:	b006      	add	sp, #24
   1d58e:	bd80      	pop	{r7, pc}
   1d590:	200041dc 	.word	0x200041dc
   1d594:	200041c4 	.word	0x200041c4
   1d598:	20000d3c 	.word	0x20000d3c
   1d59c:	0001ac29 	.word	0x0001ac29
   1d5a0:	200041b8 	.word	0x200041b8
   1d5a4:	00019c95 	.word	0x00019c95
   1d5a8:	2000416c 	.word	0x2000416c
   1d5ac:	20004170 	.word	0x20004170
   1d5b0:	200041cc 	.word	0x200041cc
   1d5b4:	0001dc55 	.word	0x0001dc55
   1d5b8:	200041d4 	.word	0x200041d4
   1d5bc:	0001ae0f 	.word	0x0001ae0f
   1d5c0:	00018f95 	.word	0x00018f95
   1d5c4:	20000110 	.word	0x20000110
   1d5c8:	00018f75 	.word	0x00018f75
   1d5cc:	00019745 	.word	0x00019745
   1d5d0:	200041bc 	.word	0x200041bc
   1d5d4:	200040e0 	.word	0x200040e0
   1d5d8:	0001ad5f 	.word	0x0001ad5f
   1d5dc:	200040dc 	.word	0x200040dc
   1d5e0:	200041c8 	.word	0x200041c8

0001d5e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   1d5e4:	b580      	push	{r7, lr}
   1d5e6:	b082      	sub	sp, #8
   1d5e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
   1d5ea:	4b3a      	ldr	r3, [pc, #232]	; (1d6d4 <vTaskSwitchContext+0xf0>)
   1d5ec:	681b      	ldr	r3, [r3, #0]
   1d5ee:	2b00      	cmp	r3, #0
   1d5f0:	d003      	beq.n	1d5fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
   1d5f2:	4b39      	ldr	r3, [pc, #228]	; (1d6d8 <vTaskSwitchContext+0xf4>)
   1d5f4:	2201      	movs	r2, #1
   1d5f6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
   1d5f8:	e067      	b.n	1d6ca <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
   1d5fa:	4b37      	ldr	r3, [pc, #220]	; (1d6d8 <vTaskSwitchContext+0xf4>)
   1d5fc:	2200      	movs	r2, #0
   1d5fe:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
   1d600:	4b36      	ldr	r3, [pc, #216]	; (1d6dc <vTaskSwitchContext+0xf8>)
   1d602:	681b      	ldr	r3, [r3, #0]
   1d604:	681a      	ldr	r2, [r3, #0]
   1d606:	4b35      	ldr	r3, [pc, #212]	; (1d6dc <vTaskSwitchContext+0xf8>)
   1d608:	681b      	ldr	r3, [r3, #0]
   1d60a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1d60c:	429a      	cmp	r2, r3
   1d60e:	d808      	bhi.n	1d622 <vTaskSwitchContext+0x3e>
   1d610:	4b32      	ldr	r3, [pc, #200]	; (1d6dc <vTaskSwitchContext+0xf8>)
   1d612:	681a      	ldr	r2, [r3, #0]
   1d614:	4b31      	ldr	r3, [pc, #196]	; (1d6dc <vTaskSwitchContext+0xf8>)
   1d616:	681b      	ldr	r3, [r3, #0]
   1d618:	3334      	adds	r3, #52	; 0x34
   1d61a:	0019      	movs	r1, r3
   1d61c:	0010      	movs	r0, r2
   1d61e:	4b30      	ldr	r3, [pc, #192]	; (1d6e0 <vTaskSwitchContext+0xfc>)
   1d620:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
   1d622:	4b30      	ldr	r3, [pc, #192]	; (1d6e4 <vTaskSwitchContext+0x100>)
   1d624:	681b      	ldr	r3, [r3, #0]
   1d626:	607b      	str	r3, [r7, #4]
   1d628:	e007      	b.n	1d63a <vTaskSwitchContext+0x56>
   1d62a:	687b      	ldr	r3, [r7, #4]
   1d62c:	2b00      	cmp	r3, #0
   1d62e:	d101      	bne.n	1d634 <vTaskSwitchContext+0x50>
   1d630:	b672      	cpsid	i
   1d632:	e7fe      	b.n	1d632 <vTaskSwitchContext+0x4e>
   1d634:	687b      	ldr	r3, [r7, #4]
   1d636:	3b01      	subs	r3, #1
   1d638:	607b      	str	r3, [r7, #4]
   1d63a:	492b      	ldr	r1, [pc, #172]	; (1d6e8 <vTaskSwitchContext+0x104>)
   1d63c:	687a      	ldr	r2, [r7, #4]
   1d63e:	0013      	movs	r3, r2
   1d640:	009b      	lsls	r3, r3, #2
   1d642:	189b      	adds	r3, r3, r2
   1d644:	009b      	lsls	r3, r3, #2
   1d646:	585b      	ldr	r3, [r3, r1]
   1d648:	2b00      	cmp	r3, #0
   1d64a:	d0ee      	beq.n	1d62a <vTaskSwitchContext+0x46>
   1d64c:	687a      	ldr	r2, [r7, #4]
   1d64e:	0013      	movs	r3, r2
   1d650:	009b      	lsls	r3, r3, #2
   1d652:	189b      	adds	r3, r3, r2
   1d654:	009b      	lsls	r3, r3, #2
   1d656:	4a24      	ldr	r2, [pc, #144]	; (1d6e8 <vTaskSwitchContext+0x104>)
   1d658:	189b      	adds	r3, r3, r2
   1d65a:	603b      	str	r3, [r7, #0]
   1d65c:	683b      	ldr	r3, [r7, #0]
   1d65e:	685b      	ldr	r3, [r3, #4]
   1d660:	685a      	ldr	r2, [r3, #4]
   1d662:	683b      	ldr	r3, [r7, #0]
   1d664:	605a      	str	r2, [r3, #4]
   1d666:	683b      	ldr	r3, [r7, #0]
   1d668:	685a      	ldr	r2, [r3, #4]
   1d66a:	683b      	ldr	r3, [r7, #0]
   1d66c:	3308      	adds	r3, #8
   1d66e:	429a      	cmp	r2, r3
   1d670:	d104      	bne.n	1d67c <vTaskSwitchContext+0x98>
   1d672:	683b      	ldr	r3, [r7, #0]
   1d674:	685b      	ldr	r3, [r3, #4]
   1d676:	685a      	ldr	r2, [r3, #4]
   1d678:	683b      	ldr	r3, [r7, #0]
   1d67a:	605a      	str	r2, [r3, #4]
   1d67c:	683b      	ldr	r3, [r7, #0]
   1d67e:	685b      	ldr	r3, [r3, #4]
   1d680:	68da      	ldr	r2, [r3, #12]
   1d682:	4b16      	ldr	r3, [pc, #88]	; (1d6dc <vTaskSwitchContext+0xf8>)
   1d684:	601a      	str	r2, [r3, #0]
   1d686:	4b17      	ldr	r3, [pc, #92]	; (1d6e4 <vTaskSwitchContext+0x100>)
   1d688:	687a      	ldr	r2, [r7, #4]
   1d68a:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_IN();
   1d68c:	4b17      	ldr	r3, [pc, #92]	; (1d6ec <vTaskSwitchContext+0x108>)
   1d68e:	2201      	movs	r2, #1
   1d690:	601a      	str	r2, [r3, #0]
   1d692:	4b17      	ldr	r3, [pc, #92]	; (1d6f0 <vTaskSwitchContext+0x10c>)
   1d694:	4798      	blx	r3
   1d696:	0003      	movs	r3, r0
   1d698:	0018      	movs	r0, r3
   1d69a:	4b16      	ldr	r3, [pc, #88]	; (1d6f4 <vTaskSwitchContext+0x110>)
   1d69c:	4798      	blx	r3
   1d69e:	0003      	movs	r3, r0
   1d6a0:	001a      	movs	r2, r3
   1d6a2:	4b15      	ldr	r3, [pc, #84]	; (1d6f8 <vTaskSwitchContext+0x114>)
   1d6a4:	881b      	ldrh	r3, [r3, #0]
   1d6a6:	4013      	ands	r3, r2
   1d6a8:	b29b      	uxth	r3, r3
   1d6aa:	2b00      	cmp	r3, #0
   1d6ac:	d00a      	beq.n	1d6c4 <vTaskSwitchContext+0xe0>
   1d6ae:	4b10      	ldr	r3, [pc, #64]	; (1d6f0 <vTaskSwitchContext+0x10c>)
   1d6b0:	4798      	blx	r3
   1d6b2:	0003      	movs	r3, r0
   1d6b4:	0018      	movs	r0, r3
   1d6b6:	4b11      	ldr	r3, [pc, #68]	; (1d6fc <vTaskSwitchContext+0x118>)
   1d6b8:	4798      	blx	r3
   1d6ba:	0003      	movs	r3, r0
   1d6bc:	b2db      	uxtb	r3, r3
   1d6be:	0018      	movs	r0, r3
   1d6c0:	4b0f      	ldr	r3, [pc, #60]	; (1d700 <vTaskSwitchContext+0x11c>)
   1d6c2:	4798      	blx	r3
   1d6c4:	4b09      	ldr	r3, [pc, #36]	; (1d6ec <vTaskSwitchContext+0x108>)
   1d6c6:	2202      	movs	r2, #2
   1d6c8:	601a      	str	r2, [r3, #0]
}
   1d6ca:	46c0      	nop			; (mov r8, r8)
   1d6cc:	46bd      	mov	sp, r7
   1d6ce:	b002      	add	sp, #8
   1d6d0:	bd80      	pop	{r7, pc}
   1d6d2:	46c0      	nop			; (mov r8, r8)
   1d6d4:	200041dc 	.word	0x200041dc
   1d6d8:	200041c8 	.word	0x200041c8
   1d6dc:	200040dc 	.word	0x200040dc
   1d6e0:	0003383d 	.word	0x0003383d
   1d6e4:	200041bc 	.word	0x200041bc
   1d6e8:	200040e0 	.word	0x200040e0
   1d6ec:	20000d48 	.word	0x20000d48
   1d6f0:	00019231 	.word	0x00019231
   1d6f4:	00018f95 	.word	0x00018f95
   1d6f8:	20000110 	.word	0x20000110
   1d6fc:	00018f75 	.word	0x00018f75
   1d700:	00019d91 	.word	0x00019d91

0001d704 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
   1d704:	b580      	push	{r7, lr}
   1d706:	b082      	sub	sp, #8
   1d708:	af00      	add	r7, sp, #0
   1d70a:	6078      	str	r0, [r7, #4]
   1d70c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
   1d70e:	687b      	ldr	r3, [r7, #4]
   1d710:	2b00      	cmp	r3, #0
   1d712:	d101      	bne.n	1d718 <vTaskPlaceOnEventList+0x14>
   1d714:	b672      	cpsid	i
   1d716:	e7fe      	b.n	1d716 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1d718:	4b08      	ldr	r3, [pc, #32]	; (1d73c <vTaskPlaceOnEventList+0x38>)
   1d71a:	681b      	ldr	r3, [r3, #0]
   1d71c:	3318      	adds	r3, #24
   1d71e:	001a      	movs	r2, r3
   1d720:	687b      	ldr	r3, [r7, #4]
   1d722:	0011      	movs	r1, r2
   1d724:	0018      	movs	r0, r3
   1d726:	4b06      	ldr	r3, [pc, #24]	; (1d740 <vTaskPlaceOnEventList+0x3c>)
   1d728:	4798      	blx	r3

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
   1d72a:	683b      	ldr	r3, [r7, #0]
   1d72c:	2101      	movs	r1, #1
   1d72e:	0018      	movs	r0, r3
   1d730:	4b04      	ldr	r3, [pc, #16]	; (1d744 <vTaskPlaceOnEventList+0x40>)
   1d732:	4798      	blx	r3
}
   1d734:	46c0      	nop			; (mov r8, r8)
   1d736:	46bd      	mov	sp, r7
   1d738:	b002      	add	sp, #8
   1d73a:	bd80      	pop	{r7, pc}
   1d73c:	200040dc 	.word	0x200040dc
   1d740:	0001ada3 	.word	0x0001ada3
   1d744:	0001e1a9 	.word	0x0001e1a9

0001d748 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
   1d748:	b580      	push	{r7, lr}
   1d74a:	b084      	sub	sp, #16
   1d74c:	af00      	add	r7, sp, #0
   1d74e:	60f8      	str	r0, [r7, #12]
   1d750:	60b9      	str	r1, [r7, #8]
   1d752:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
   1d754:	68fb      	ldr	r3, [r7, #12]
   1d756:	2b00      	cmp	r3, #0
   1d758:	d101      	bne.n	1d75e <vTaskPlaceOnEventListRestricted+0x16>
   1d75a:	b672      	cpsid	i
   1d75c:	e7fe      	b.n	1d75c <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
   1d75e:	4b28      	ldr	r3, [pc, #160]	; (1d800 <vTaskPlaceOnEventListRestricted+0xb8>)
   1d760:	681b      	ldr	r3, [r3, #0]
   1d762:	3318      	adds	r3, #24
   1d764:	001a      	movs	r2, r3
   1d766:	68fb      	ldr	r3, [r7, #12]
   1d768:	0011      	movs	r1, r2
   1d76a:	0018      	movs	r0, r3
   1d76c:	4b25      	ldr	r3, [pc, #148]	; (1d804 <vTaskPlaceOnEventListRestricted+0xbc>)
   1d76e:	4798      	blx	r3

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
   1d770:	687b      	ldr	r3, [r7, #4]
   1d772:	2b00      	cmp	r3, #0
   1d774:	d002      	beq.n	1d77c <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
   1d776:	2301      	movs	r3, #1
   1d778:	425b      	negs	r3, r3
   1d77a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
   1d77c:	4b20      	ldr	r3, [pc, #128]	; (1d800 <vTaskPlaceOnEventListRestricted+0xb8>)
   1d77e:	681b      	ldr	r3, [r3, #0]
   1d780:	0018      	movs	r0, r3
   1d782:	4b21      	ldr	r3, [pc, #132]	; (1d808 <vTaskPlaceOnEventListRestricted+0xc0>)
   1d784:	4798      	blx	r3
   1d786:	0003      	movs	r3, r0
   1d788:	001a      	movs	r2, r3
   1d78a:	4b20      	ldr	r3, [pc, #128]	; (1d80c <vTaskPlaceOnEventListRestricted+0xc4>)
   1d78c:	881b      	ldrh	r3, [r3, #0]
   1d78e:	4013      	ands	r3, r2
   1d790:	b29b      	uxth	r3, r3
   1d792:	2b00      	cmp	r3, #0
   1d794:	d011      	beq.n	1d7ba <vTaskPlaceOnEventListRestricted+0x72>
   1d796:	4b1e      	ldr	r3, [pc, #120]	; (1d810 <vTaskPlaceOnEventListRestricted+0xc8>)
   1d798:	681a      	ldr	r2, [r3, #0]
   1d79a:	68bb      	ldr	r3, [r7, #8]
   1d79c:	18d3      	adds	r3, r2, r3
   1d79e:	0019      	movs	r1, r3
   1d7a0:	2088      	movs	r0, #136	; 0x88
   1d7a2:	4b1c      	ldr	r3, [pc, #112]	; (1d814 <vTaskPlaceOnEventListRestricted+0xcc>)
   1d7a4:	4798      	blx	r3
   1d7a6:	4b16      	ldr	r3, [pc, #88]	; (1d800 <vTaskPlaceOnEventListRestricted+0xb8>)
   1d7a8:	681b      	ldr	r3, [r3, #0]
   1d7aa:	0018      	movs	r0, r3
   1d7ac:	4b1a      	ldr	r3, [pc, #104]	; (1d818 <vTaskPlaceOnEventListRestricted+0xd0>)
   1d7ae:	4798      	blx	r3
   1d7b0:	0003      	movs	r3, r0
   1d7b2:	b2db      	uxtb	r3, r3
   1d7b4:	0018      	movs	r0, r3
   1d7b6:	4b19      	ldr	r3, [pc, #100]	; (1d81c <vTaskPlaceOnEventListRestricted+0xd4>)
   1d7b8:	4798      	blx	r3
   1d7ba:	4b19      	ldr	r3, [pc, #100]	; (1d820 <vTaskPlaceOnEventListRestricted+0xd8>)
   1d7bc:	4798      	blx	r3
   1d7be:	0003      	movs	r3, r0
   1d7c0:	0018      	movs	r0, r3
   1d7c2:	4b11      	ldr	r3, [pc, #68]	; (1d808 <vTaskPlaceOnEventListRestricted+0xc0>)
   1d7c4:	4798      	blx	r3
   1d7c6:	0003      	movs	r3, r0
   1d7c8:	001a      	movs	r2, r3
   1d7ca:	4b10      	ldr	r3, [pc, #64]	; (1d80c <vTaskPlaceOnEventListRestricted+0xc4>)
   1d7cc:	881b      	ldrh	r3, [r3, #0]
   1d7ce:	4013      	ands	r3, r2
   1d7d0:	b29b      	uxth	r3, r3
   1d7d2:	2b00      	cmp	r3, #0
   1d7d4:	d00a      	beq.n	1d7ec <vTaskPlaceOnEventListRestricted+0xa4>
   1d7d6:	4b12      	ldr	r3, [pc, #72]	; (1d820 <vTaskPlaceOnEventListRestricted+0xd8>)
   1d7d8:	4798      	blx	r3
   1d7da:	0003      	movs	r3, r0
   1d7dc:	0018      	movs	r0, r3
   1d7de:	4b0e      	ldr	r3, [pc, #56]	; (1d818 <vTaskPlaceOnEventListRestricted+0xd0>)
   1d7e0:	4798      	blx	r3
   1d7e2:	0003      	movs	r3, r0
   1d7e4:	b2db      	uxtb	r3, r3
   1d7e6:	0018      	movs	r0, r3
   1d7e8:	4b0c      	ldr	r3, [pc, #48]	; (1d81c <vTaskPlaceOnEventListRestricted+0xd4>)
   1d7ea:	4798      	blx	r3
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
   1d7ec:	687a      	ldr	r2, [r7, #4]
   1d7ee:	68bb      	ldr	r3, [r7, #8]
   1d7f0:	0011      	movs	r1, r2
   1d7f2:	0018      	movs	r0, r3
   1d7f4:	4b0b      	ldr	r3, [pc, #44]	; (1d824 <vTaskPlaceOnEventListRestricted+0xdc>)
   1d7f6:	4798      	blx	r3
	}
   1d7f8:	46c0      	nop			; (mov r8, r8)
   1d7fa:	46bd      	mov	sp, r7
   1d7fc:	b004      	add	sp, #16
   1d7fe:	bd80      	pop	{r7, pc}
   1d800:	200040dc 	.word	0x200040dc
   1d804:	0001ad5f 	.word	0x0001ad5f
   1d808:	00018f95 	.word	0x00018f95
   1d80c:	20000110 	.word	0x20000110
   1d810:	200041b8 	.word	0x200041b8
   1d814:	00019c95 	.word	0x00019c95
   1d818:	00018f75 	.word	0x00018f75
   1d81c:	0001a125 	.word	0x0001a125
   1d820:	00019231 	.word	0x00019231
   1d824:	0001e1a9 	.word	0x0001e1a9

0001d828 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
   1d828:	b580      	push	{r7, lr}
   1d82a:	b084      	sub	sp, #16
   1d82c:	af00      	add	r7, sp, #0
   1d82e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   1d830:	687b      	ldr	r3, [r7, #4]
   1d832:	68db      	ldr	r3, [r3, #12]
   1d834:	68db      	ldr	r3, [r3, #12]
   1d836:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
   1d838:	68bb      	ldr	r3, [r7, #8]
   1d83a:	2b00      	cmp	r3, #0
   1d83c:	d101      	bne.n	1d842 <xTaskRemoveFromEventList+0x1a>
   1d83e:	b672      	cpsid	i
   1d840:	e7fe      	b.n	1d840 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   1d842:	68bb      	ldr	r3, [r7, #8]
   1d844:	3318      	adds	r3, #24
   1d846:	0018      	movs	r0, r3
   1d848:	4b2a      	ldr	r3, [pc, #168]	; (1d8f4 <xTaskRemoveFromEventList+0xcc>)
   1d84a:	4798      	blx	r3

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1d84c:	4b2a      	ldr	r3, [pc, #168]	; (1d8f8 <xTaskRemoveFromEventList+0xd0>)
   1d84e:	681b      	ldr	r3, [r3, #0]
   1d850:	2b00      	cmp	r3, #0
   1d852:	d132      	bne.n	1d8ba <xTaskRemoveFromEventList+0x92>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
   1d854:	68bb      	ldr	r3, [r7, #8]
   1d856:	3304      	adds	r3, #4
   1d858:	0018      	movs	r0, r3
   1d85a:	4b26      	ldr	r3, [pc, #152]	; (1d8f4 <xTaskRemoveFromEventList+0xcc>)
   1d85c:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
   1d85e:	68bb      	ldr	r3, [r7, #8]
   1d860:	0018      	movs	r0, r3
   1d862:	4b26      	ldr	r3, [pc, #152]	; (1d8fc <xTaskRemoveFromEventList+0xd4>)
   1d864:	4798      	blx	r3
   1d866:	0003      	movs	r3, r0
   1d868:	001a      	movs	r2, r3
   1d86a:	4b25      	ldr	r3, [pc, #148]	; (1d900 <xTaskRemoveFromEventList+0xd8>)
   1d86c:	881b      	ldrh	r3, [r3, #0]
   1d86e:	4013      	ands	r3, r2
   1d870:	b29b      	uxth	r3, r3
   1d872:	2b00      	cmp	r3, #0
   1d874:	d008      	beq.n	1d888 <xTaskRemoveFromEventList+0x60>
   1d876:	68bb      	ldr	r3, [r7, #8]
   1d878:	0018      	movs	r0, r3
   1d87a:	4b22      	ldr	r3, [pc, #136]	; (1d904 <xTaskRemoveFromEventList+0xdc>)
   1d87c:	4798      	blx	r3
   1d87e:	0003      	movs	r3, r0
   1d880:	b2db      	uxtb	r3, r3
   1d882:	0018      	movs	r0, r3
   1d884:	4b20      	ldr	r3, [pc, #128]	; (1d908 <xTaskRemoveFromEventList+0xe0>)
   1d886:	4798      	blx	r3
   1d888:	68bb      	ldr	r3, [r7, #8]
   1d88a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d88c:	4b1f      	ldr	r3, [pc, #124]	; (1d90c <xTaskRemoveFromEventList+0xe4>)
   1d88e:	681b      	ldr	r3, [r3, #0]
   1d890:	429a      	cmp	r2, r3
   1d892:	d903      	bls.n	1d89c <xTaskRemoveFromEventList+0x74>
   1d894:	68bb      	ldr	r3, [r7, #8]
   1d896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d898:	4b1c      	ldr	r3, [pc, #112]	; (1d90c <xTaskRemoveFromEventList+0xe4>)
   1d89a:	601a      	str	r2, [r3, #0]
   1d89c:	68bb      	ldr	r3, [r7, #8]
   1d89e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d8a0:	0013      	movs	r3, r2
   1d8a2:	009b      	lsls	r3, r3, #2
   1d8a4:	189b      	adds	r3, r3, r2
   1d8a6:	009b      	lsls	r3, r3, #2
   1d8a8:	4a19      	ldr	r2, [pc, #100]	; (1d910 <xTaskRemoveFromEventList+0xe8>)
   1d8aa:	189a      	adds	r2, r3, r2
   1d8ac:	68bb      	ldr	r3, [r7, #8]
   1d8ae:	3304      	adds	r3, #4
   1d8b0:	0019      	movs	r1, r3
   1d8b2:	0010      	movs	r0, r2
   1d8b4:	4b17      	ldr	r3, [pc, #92]	; (1d914 <xTaskRemoveFromEventList+0xec>)
   1d8b6:	4798      	blx	r3
   1d8b8:	e007      	b.n	1d8ca <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   1d8ba:	68bb      	ldr	r3, [r7, #8]
   1d8bc:	3318      	adds	r3, #24
   1d8be:	001a      	movs	r2, r3
   1d8c0:	4b15      	ldr	r3, [pc, #84]	; (1d918 <xTaskRemoveFromEventList+0xf0>)
   1d8c2:	0011      	movs	r1, r2
   1d8c4:	0018      	movs	r0, r3
   1d8c6:	4b13      	ldr	r3, [pc, #76]	; (1d914 <xTaskRemoveFromEventList+0xec>)
   1d8c8:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
   1d8ca:	68bb      	ldr	r3, [r7, #8]
   1d8cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1d8ce:	4b13      	ldr	r3, [pc, #76]	; (1d91c <xTaskRemoveFromEventList+0xf4>)
   1d8d0:	681b      	ldr	r3, [r3, #0]
   1d8d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1d8d4:	429a      	cmp	r2, r3
   1d8d6:	d905      	bls.n	1d8e4 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
   1d8d8:	2301      	movs	r3, #1
   1d8da:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
   1d8dc:	4b10      	ldr	r3, [pc, #64]	; (1d920 <xTaskRemoveFromEventList+0xf8>)
   1d8de:	2201      	movs	r2, #1
   1d8e0:	601a      	str	r2, [r3, #0]
   1d8e2:	e001      	b.n	1d8e8 <xTaskRemoveFromEventList+0xc0>
	}
	else
	{
		xReturn = pdFALSE;
   1d8e4:	2300      	movs	r3, #0
   1d8e6:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
   1d8e8:	68fb      	ldr	r3, [r7, #12]
}
   1d8ea:	0018      	movs	r0, r3
   1d8ec:	46bd      	mov	sp, r7
   1d8ee:	b004      	add	sp, #16
   1d8f0:	bd80      	pop	{r7, pc}
   1d8f2:	46c0      	nop			; (mov r8, r8)
   1d8f4:	0001ae0f 	.word	0x0001ae0f
   1d8f8:	200041dc 	.word	0x200041dc
   1d8fc:	00018f95 	.word	0x00018f95
   1d900:	20000110 	.word	0x20000110
   1d904:	00018f75 	.word	0x00018f75
   1d908:	00019745 	.word	0x00019745
   1d90c:	200041bc 	.word	0x200041bc
   1d910:	200040e0 	.word	0x200040e0
   1d914:	0001ad5f 	.word	0x0001ad5f
   1d918:	20004174 	.word	0x20004174
   1d91c:	200040dc 	.word	0x200040dc
   1d920:	200041c8 	.word	0x200041c8

0001d924 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1d924:	b580      	push	{r7, lr}
   1d926:	b082      	sub	sp, #8
   1d928:	af00      	add	r7, sp, #0
   1d92a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
   1d92c:	687b      	ldr	r3, [r7, #4]
   1d92e:	2b00      	cmp	r3, #0
   1d930:	d101      	bne.n	1d936 <vTaskSetTimeOutState+0x12>
   1d932:	b672      	cpsid	i
   1d934:	e7fe      	b.n	1d934 <vTaskSetTimeOutState+0x10>
	taskENTER_CRITICAL();
   1d936:	4b08      	ldr	r3, [pc, #32]	; (1d958 <vTaskSetTimeOutState+0x34>)
   1d938:	4798      	blx	r3
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
   1d93a:	4b08      	ldr	r3, [pc, #32]	; (1d95c <vTaskSetTimeOutState+0x38>)
   1d93c:	681a      	ldr	r2, [r3, #0]
   1d93e:	687b      	ldr	r3, [r7, #4]
   1d940:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
   1d942:	4b07      	ldr	r3, [pc, #28]	; (1d960 <vTaskSetTimeOutState+0x3c>)
   1d944:	681a      	ldr	r2, [r3, #0]
   1d946:	687b      	ldr	r3, [r7, #4]
   1d948:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
   1d94a:	4b06      	ldr	r3, [pc, #24]	; (1d964 <vTaskSetTimeOutState+0x40>)
   1d94c:	4798      	blx	r3
}
   1d94e:	46c0      	nop			; (mov r8, r8)
   1d950:	46bd      	mov	sp, r7
   1d952:	b002      	add	sp, #8
   1d954:	bd80      	pop	{r7, pc}
   1d956:	46c0      	nop			; (mov r8, r8)
   1d958:	0001af99 	.word	0x0001af99
   1d95c:	200041cc 	.word	0x200041cc
   1d960:	200041b8 	.word	0x200041b8
   1d964:	0001afbd 	.word	0x0001afbd

0001d968 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
   1d968:	b580      	push	{r7, lr}
   1d96a:	b082      	sub	sp, #8
   1d96c:	af00      	add	r7, sp, #0
   1d96e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   1d970:	4b05      	ldr	r3, [pc, #20]	; (1d988 <vTaskInternalSetTimeOutState+0x20>)
   1d972:	681a      	ldr	r2, [r3, #0]
   1d974:	687b      	ldr	r3, [r7, #4]
   1d976:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   1d978:	4b04      	ldr	r3, [pc, #16]	; (1d98c <vTaskInternalSetTimeOutState+0x24>)
   1d97a:	681a      	ldr	r2, [r3, #0]
   1d97c:	687b      	ldr	r3, [r7, #4]
   1d97e:	605a      	str	r2, [r3, #4]
}
   1d980:	46c0      	nop			; (mov r8, r8)
   1d982:	46bd      	mov	sp, r7
   1d984:	b002      	add	sp, #8
   1d986:	bd80      	pop	{r7, pc}
   1d988:	200041cc 	.word	0x200041cc
   1d98c:	200041b8 	.word	0x200041b8

0001d990 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
   1d990:	b580      	push	{r7, lr}
   1d992:	b086      	sub	sp, #24
   1d994:	af00      	add	r7, sp, #0
   1d996:	6078      	str	r0, [r7, #4]
   1d998:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
   1d99a:	687b      	ldr	r3, [r7, #4]
   1d99c:	2b00      	cmp	r3, #0
   1d99e:	d101      	bne.n	1d9a4 <xTaskCheckForTimeOut+0x14>
   1d9a0:	b672      	cpsid	i
   1d9a2:	e7fe      	b.n	1d9a2 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
   1d9a4:	683b      	ldr	r3, [r7, #0]
   1d9a6:	2b00      	cmp	r3, #0
   1d9a8:	d101      	bne.n	1d9ae <xTaskCheckForTimeOut+0x1e>
   1d9aa:	b672      	cpsid	i
   1d9ac:	e7fe      	b.n	1d9ac <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
   1d9ae:	4b1e      	ldr	r3, [pc, #120]	; (1da28 <xTaskCheckForTimeOut+0x98>)
   1d9b0:	4798      	blx	r3
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
   1d9b2:	4b1e      	ldr	r3, [pc, #120]	; (1da2c <xTaskCheckForTimeOut+0x9c>)
   1d9b4:	681b      	ldr	r3, [r3, #0]
   1d9b6:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
   1d9b8:	687b      	ldr	r3, [r7, #4]
   1d9ba:	685b      	ldr	r3, [r3, #4]
   1d9bc:	693a      	ldr	r2, [r7, #16]
   1d9be:	1ad3      	subs	r3, r2, r3
   1d9c0:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
   1d9c2:	683b      	ldr	r3, [r7, #0]
   1d9c4:	681b      	ldr	r3, [r3, #0]
   1d9c6:	3301      	adds	r3, #1
   1d9c8:	d102      	bne.n	1d9d0 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
   1d9ca:	2300      	movs	r3, #0
   1d9cc:	617b      	str	r3, [r7, #20]
   1d9ce:	e024      	b.n	1da1a <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
   1d9d0:	687b      	ldr	r3, [r7, #4]
   1d9d2:	681a      	ldr	r2, [r3, #0]
   1d9d4:	4b16      	ldr	r3, [pc, #88]	; (1da30 <xTaskCheckForTimeOut+0xa0>)
   1d9d6:	681b      	ldr	r3, [r3, #0]
   1d9d8:	429a      	cmp	r2, r3
   1d9da:	d007      	beq.n	1d9ec <xTaskCheckForTimeOut+0x5c>
   1d9dc:	687b      	ldr	r3, [r7, #4]
   1d9de:	685a      	ldr	r2, [r3, #4]
   1d9e0:	693b      	ldr	r3, [r7, #16]
   1d9e2:	429a      	cmp	r2, r3
   1d9e4:	d802      	bhi.n	1d9ec <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
   1d9e6:	2301      	movs	r3, #1
   1d9e8:	617b      	str	r3, [r7, #20]
   1d9ea:	e016      	b.n	1da1a <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
   1d9ec:	683b      	ldr	r3, [r7, #0]
   1d9ee:	681a      	ldr	r2, [r3, #0]
   1d9f0:	68fb      	ldr	r3, [r7, #12]
   1d9f2:	429a      	cmp	r2, r3
   1d9f4:	d90c      	bls.n	1da10 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
   1d9f6:	683b      	ldr	r3, [r7, #0]
   1d9f8:	681a      	ldr	r2, [r3, #0]
   1d9fa:	68fb      	ldr	r3, [r7, #12]
   1d9fc:	1ad2      	subs	r2, r2, r3
   1d9fe:	683b      	ldr	r3, [r7, #0]
   1da00:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
   1da02:	687b      	ldr	r3, [r7, #4]
   1da04:	0018      	movs	r0, r3
   1da06:	4b0b      	ldr	r3, [pc, #44]	; (1da34 <xTaskCheckForTimeOut+0xa4>)
   1da08:	4798      	blx	r3
			xReturn = pdFALSE;
   1da0a:	2300      	movs	r3, #0
   1da0c:	617b      	str	r3, [r7, #20]
   1da0e:	e004      	b.n	1da1a <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
   1da10:	683b      	ldr	r3, [r7, #0]
   1da12:	2200      	movs	r2, #0
   1da14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
   1da16:	2301      	movs	r3, #1
   1da18:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
   1da1a:	4b07      	ldr	r3, [pc, #28]	; (1da38 <xTaskCheckForTimeOut+0xa8>)
   1da1c:	4798      	blx	r3

	return xReturn;
   1da1e:	697b      	ldr	r3, [r7, #20]
}
   1da20:	0018      	movs	r0, r3
   1da22:	46bd      	mov	sp, r7
   1da24:	b006      	add	sp, #24
   1da26:	bd80      	pop	{r7, pc}
   1da28:	0001af99 	.word	0x0001af99
   1da2c:	200041b8 	.word	0x200041b8
   1da30:	200041cc 	.word	0x200041cc
   1da34:	0001d969 	.word	0x0001d969
   1da38:	0001afbd 	.word	0x0001afbd

0001da3c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
   1da3c:	b580      	push	{r7, lr}
   1da3e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
   1da40:	4b02      	ldr	r3, [pc, #8]	; (1da4c <vTaskMissedYield+0x10>)
   1da42:	2201      	movs	r2, #1
   1da44:	601a      	str	r2, [r3, #0]
}
   1da46:	46c0      	nop			; (mov r8, r8)
   1da48:	46bd      	mov	sp, r7
   1da4a:	bd80      	pop	{r7, pc}
   1da4c:	200041c8 	.word	0x200041c8

0001da50 <uxTaskGetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
	{
   1da50:	b580      	push	{r7, lr}
   1da52:	b084      	sub	sp, #16
   1da54:	af00      	add	r7, sp, #0
   1da56:	6078      	str	r0, [r7, #4]
	UBaseType_t uxReturn;
	TCB_t *pxTCB;

		if( xTask != NULL )
   1da58:	687b      	ldr	r3, [r7, #4]
   1da5a:	2b00      	cmp	r3, #0
   1da5c:	d005      	beq.n	1da6a <uxTaskGetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1da5e:	687b      	ldr	r3, [r7, #4]
   1da60:	60bb      	str	r3, [r7, #8]
			uxReturn = pxTCB->uxTaskNumber;
   1da62:	68bb      	ldr	r3, [r7, #8]
   1da64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1da66:	60fb      	str	r3, [r7, #12]
   1da68:	e001      	b.n	1da6e <uxTaskGetTaskNumber+0x1e>
		}
		else
		{
			uxReturn = 0U;
   1da6a:	2300      	movs	r3, #0
   1da6c:	60fb      	str	r3, [r7, #12]
		}

		return uxReturn;
   1da6e:	68fb      	ldr	r3, [r7, #12]
	}
   1da70:	0018      	movs	r0, r3
   1da72:	46bd      	mov	sp, r7
   1da74:	b004      	add	sp, #16
   1da76:	bd80      	pop	{r7, pc}

0001da78 <vTaskSetTaskNumber>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
	{
   1da78:	b580      	push	{r7, lr}
   1da7a:	b084      	sub	sp, #16
   1da7c:	af00      	add	r7, sp, #0
   1da7e:	6078      	str	r0, [r7, #4]
   1da80:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;

		if( xTask != NULL )
   1da82:	687b      	ldr	r3, [r7, #4]
   1da84:	2b00      	cmp	r3, #0
   1da86:	d004      	beq.n	1da92 <vTaskSetTaskNumber+0x1a>
		{
			pxTCB = ( TCB_t * ) xTask;
   1da88:	687b      	ldr	r3, [r7, #4]
   1da8a:	60fb      	str	r3, [r7, #12]
			pxTCB->uxTaskNumber = uxHandle;
   1da8c:	68fb      	ldr	r3, [r7, #12]
   1da8e:	683a      	ldr	r2, [r7, #0]
   1da90:	641a      	str	r2, [r3, #64]	; 0x40
		}
	}
   1da92:	46c0      	nop			; (mov r8, r8)
   1da94:	46bd      	mov	sp, r7
   1da96:	b004      	add	sp, #16
   1da98:	bd80      	pop	{r7, pc}
	...

0001da9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   1da9c:	b580      	push	{r7, lr}
   1da9e:	b082      	sub	sp, #8
   1daa0:	af00      	add	r7, sp, #0
   1daa2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
   1daa4:	4b04      	ldr	r3, [pc, #16]	; (1dab8 <prvIdleTask+0x1c>)
   1daa6:	4798      	blx	r3

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
   1daa8:	4b04      	ldr	r3, [pc, #16]	; (1dabc <prvIdleTask+0x20>)
   1daaa:	681b      	ldr	r3, [r3, #0]
   1daac:	2b01      	cmp	r3, #1
   1daae:	d9f9      	bls.n	1daa4 <prvIdleTask+0x8>
			{
				taskYIELD();
   1dab0:	4b03      	ldr	r3, [pc, #12]	; (1dac0 <prvIdleTask+0x24>)
   1dab2:	4798      	blx	r3
		prvCheckTasksWaitingTermination();
   1dab4:	e7f6      	b.n	1daa4 <prvIdleTask+0x8>
   1dab6:	46c0      	nop			; (mov r8, r8)
   1dab8:	0001db51 	.word	0x0001db51
   1dabc:	200040e0 	.word	0x200040e0
   1dac0:	0001af81 	.word	0x0001af81

0001dac4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
   1dac4:	b580      	push	{r7, lr}
   1dac6:	b082      	sub	sp, #8
   1dac8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1daca:	2300      	movs	r3, #0
   1dacc:	607b      	str	r3, [r7, #4]
   1dace:	e00c      	b.n	1daea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
   1dad0:	687a      	ldr	r2, [r7, #4]
   1dad2:	0013      	movs	r3, r2
   1dad4:	009b      	lsls	r3, r3, #2
   1dad6:	189b      	adds	r3, r3, r2
   1dad8:	009b      	lsls	r3, r3, #2
   1dada:	4a14      	ldr	r2, [pc, #80]	; (1db2c <prvInitialiseTaskLists+0x68>)
   1dadc:	189b      	adds	r3, r3, r2
   1dade:	0018      	movs	r0, r3
   1dae0:	4b13      	ldr	r3, [pc, #76]	; (1db30 <prvInitialiseTaskLists+0x6c>)
   1dae2:	4798      	blx	r3
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
   1dae4:	687b      	ldr	r3, [r7, #4]
   1dae6:	3301      	adds	r3, #1
   1dae8:	607b      	str	r3, [r7, #4]
   1daea:	687b      	ldr	r3, [r7, #4]
   1daec:	2b04      	cmp	r3, #4
   1daee:	d9ef      	bls.n	1dad0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
   1daf0:	4b10      	ldr	r3, [pc, #64]	; (1db34 <prvInitialiseTaskLists+0x70>)
   1daf2:	0018      	movs	r0, r3
   1daf4:	4b0e      	ldr	r3, [pc, #56]	; (1db30 <prvInitialiseTaskLists+0x6c>)
   1daf6:	4798      	blx	r3
	vListInitialise( &xDelayedTaskList2 );
   1daf8:	4b0f      	ldr	r3, [pc, #60]	; (1db38 <prvInitialiseTaskLists+0x74>)
   1dafa:	0018      	movs	r0, r3
   1dafc:	4b0c      	ldr	r3, [pc, #48]	; (1db30 <prvInitialiseTaskLists+0x6c>)
   1dafe:	4798      	blx	r3
	vListInitialise( &xPendingReadyList );
   1db00:	4b0e      	ldr	r3, [pc, #56]	; (1db3c <prvInitialiseTaskLists+0x78>)
   1db02:	0018      	movs	r0, r3
   1db04:	4b0a      	ldr	r3, [pc, #40]	; (1db30 <prvInitialiseTaskLists+0x6c>)
   1db06:	4798      	blx	r3

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
   1db08:	4b0d      	ldr	r3, [pc, #52]	; (1db40 <prvInitialiseTaskLists+0x7c>)
   1db0a:	0018      	movs	r0, r3
   1db0c:	4b08      	ldr	r3, [pc, #32]	; (1db30 <prvInitialiseTaskLists+0x6c>)
   1db0e:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
   1db10:	4b0c      	ldr	r3, [pc, #48]	; (1db44 <prvInitialiseTaskLists+0x80>)
   1db12:	0018      	movs	r0, r3
   1db14:	4b06      	ldr	r3, [pc, #24]	; (1db30 <prvInitialiseTaskLists+0x6c>)
   1db16:	4798      	blx	r3
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   1db18:	4b0b      	ldr	r3, [pc, #44]	; (1db48 <prvInitialiseTaskLists+0x84>)
   1db1a:	4a06      	ldr	r2, [pc, #24]	; (1db34 <prvInitialiseTaskLists+0x70>)
   1db1c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   1db1e:	4b0b      	ldr	r3, [pc, #44]	; (1db4c <prvInitialiseTaskLists+0x88>)
   1db20:	4a05      	ldr	r2, [pc, #20]	; (1db38 <prvInitialiseTaskLists+0x74>)
   1db22:	601a      	str	r2, [r3, #0]
}
   1db24:	46c0      	nop			; (mov r8, r8)
   1db26:	46bd      	mov	sp, r7
   1db28:	b002      	add	sp, #8
   1db2a:	bd80      	pop	{r7, pc}
   1db2c:	200040e0 	.word	0x200040e0
   1db30:	0001ad0d 	.word	0x0001ad0d
   1db34:	20004144 	.word	0x20004144
   1db38:	20004158 	.word	0x20004158
   1db3c:	20004174 	.word	0x20004174
   1db40:	20004188 	.word	0x20004188
   1db44:	200041a0 	.word	0x200041a0
   1db48:	2000416c 	.word	0x2000416c
   1db4c:	20004170 	.word	0x20004170

0001db50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
   1db50:	b580      	push	{r7, lr}
   1db52:	b082      	sub	sp, #8
   1db54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1db56:	e01a      	b.n	1db8e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
   1db58:	4b11      	ldr	r3, [pc, #68]	; (1dba0 <prvCheckTasksWaitingTermination+0x50>)
   1db5a:	4798      	blx	r3
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
   1db5c:	4b11      	ldr	r3, [pc, #68]	; (1dba4 <prvCheckTasksWaitingTermination+0x54>)
   1db5e:	68db      	ldr	r3, [r3, #12]
   1db60:	68db      	ldr	r3, [r3, #12]
   1db62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
   1db64:	687b      	ldr	r3, [r7, #4]
   1db66:	3304      	adds	r3, #4
   1db68:	0018      	movs	r0, r3
   1db6a:	4b0f      	ldr	r3, [pc, #60]	; (1dba8 <prvCheckTasksWaitingTermination+0x58>)
   1db6c:	4798      	blx	r3
				--uxCurrentNumberOfTasks;
   1db6e:	4b0f      	ldr	r3, [pc, #60]	; (1dbac <prvCheckTasksWaitingTermination+0x5c>)
   1db70:	681b      	ldr	r3, [r3, #0]
   1db72:	1e5a      	subs	r2, r3, #1
   1db74:	4b0d      	ldr	r3, [pc, #52]	; (1dbac <prvCheckTasksWaitingTermination+0x5c>)
   1db76:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
   1db78:	4b0d      	ldr	r3, [pc, #52]	; (1dbb0 <prvCheckTasksWaitingTermination+0x60>)
   1db7a:	681b      	ldr	r3, [r3, #0]
   1db7c:	1e5a      	subs	r2, r3, #1
   1db7e:	4b0c      	ldr	r3, [pc, #48]	; (1dbb0 <prvCheckTasksWaitingTermination+0x60>)
   1db80:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
   1db82:	4b0c      	ldr	r3, [pc, #48]	; (1dbb4 <prvCheckTasksWaitingTermination+0x64>)
   1db84:	4798      	blx	r3

			prvDeleteTCB( pxTCB );
   1db86:	687b      	ldr	r3, [r7, #4]
   1db88:	0018      	movs	r0, r3
   1db8a:	4b0b      	ldr	r3, [pc, #44]	; (1dbb8 <prvCheckTasksWaitingTermination+0x68>)
   1db8c:	4798      	blx	r3
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
   1db8e:	4b08      	ldr	r3, [pc, #32]	; (1dbb0 <prvCheckTasksWaitingTermination+0x60>)
   1db90:	681b      	ldr	r3, [r3, #0]
   1db92:	2b00      	cmp	r3, #0
   1db94:	d1e0      	bne.n	1db58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
   1db96:	46c0      	nop			; (mov r8, r8)
   1db98:	46bd      	mov	sp, r7
   1db9a:	b002      	add	sp, #8
   1db9c:	bd80      	pop	{r7, pc}
   1db9e:	46c0      	nop			; (mov r8, r8)
   1dba0:	0001af99 	.word	0x0001af99
   1dba4:	20004188 	.word	0x20004188
   1dba8:	0001ae0f 	.word	0x0001ae0f
   1dbac:	200041b4 	.word	0x200041b4
   1dbb0:	2000419c 	.word	0x2000419c
   1dbb4:	0001afbd 	.word	0x0001afbd
   1dbb8:	0001dc2d 	.word	0x0001dc2d

0001dbbc <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )

	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
   1dbbc:	b580      	push	{r7, lr}
   1dbbe:	b084      	sub	sp, #16
   1dbc0:	af00      	add	r7, sp, #0
   1dbc2:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
   1dbc4:	2300      	movs	r3, #0
   1dbc6:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1dbc8:	e005      	b.n	1dbd6 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
   1dbca:	687b      	ldr	r3, [r7, #4]
   1dbcc:	3301      	adds	r3, #1
   1dbce:	607b      	str	r3, [r7, #4]
			ulCount++;
   1dbd0:	68fb      	ldr	r3, [r7, #12]
   1dbd2:	3301      	adds	r3, #1
   1dbd4:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
   1dbd6:	687b      	ldr	r3, [r7, #4]
   1dbd8:	781b      	ldrb	r3, [r3, #0]
   1dbda:	2ba5      	cmp	r3, #165	; 0xa5
   1dbdc:	d0f5      	beq.n	1dbca <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
   1dbde:	68fb      	ldr	r3, [r7, #12]
   1dbe0:	089b      	lsrs	r3, r3, #2
   1dbe2:	60fb      	str	r3, [r7, #12]

		return ( uint16_t ) ulCount;
   1dbe4:	68fb      	ldr	r3, [r7, #12]
   1dbe6:	b29b      	uxth	r3, r3
	}
   1dbe8:	0018      	movs	r0, r3
   1dbea:	46bd      	mov	sp, r7
   1dbec:	b004      	add	sp, #16
   1dbee:	bd80      	pop	{r7, pc}

0001dbf0 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
   1dbf0:	b580      	push	{r7, lr}
   1dbf2:	b086      	sub	sp, #24
   1dbf4:	af00      	add	r7, sp, #0
   1dbf6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
   1dbf8:	687b      	ldr	r3, [r7, #4]
   1dbfa:	2b00      	cmp	r3, #0
   1dbfc:	d102      	bne.n	1dc04 <uxTaskGetStackHighWaterMark+0x14>
   1dbfe:	4b09      	ldr	r3, [pc, #36]	; (1dc24 <uxTaskGetStackHighWaterMark+0x34>)
   1dc00:	681b      	ldr	r3, [r3, #0]
   1dc02:	e000      	b.n	1dc06 <uxTaskGetStackHighWaterMark+0x16>
   1dc04:	687b      	ldr	r3, [r7, #4]
   1dc06:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
   1dc08:	697b      	ldr	r3, [r7, #20]
   1dc0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1dc0c:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
   1dc0e:	693b      	ldr	r3, [r7, #16]
   1dc10:	0018      	movs	r0, r3
   1dc12:	4b05      	ldr	r3, [pc, #20]	; (1dc28 <uxTaskGetStackHighWaterMark+0x38>)
   1dc14:	4798      	blx	r3
   1dc16:	0003      	movs	r3, r0
   1dc18:	60fb      	str	r3, [r7, #12]

		return uxReturn;
   1dc1a:	68fb      	ldr	r3, [r7, #12]
	}
   1dc1c:	0018      	movs	r0, r3
   1dc1e:	46bd      	mov	sp, r7
   1dc20:	b006      	add	sp, #24
   1dc22:	bd80      	pop	{r7, pc}
   1dc24:	200040dc 	.word	0x200040dc
   1dc28:	0001dbbd 	.word	0x0001dbbd

0001dc2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
   1dc2c:	b580      	push	{r7, lr}
   1dc2e:	b082      	sub	sp, #8
   1dc30:	af00      	add	r7, sp, #0
   1dc32:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
   1dc34:	687b      	ldr	r3, [r7, #4]
   1dc36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1dc38:	0018      	movs	r0, r3
   1dc3a:	4b05      	ldr	r3, [pc, #20]	; (1dc50 <prvDeleteTCB+0x24>)
   1dc3c:	4798      	blx	r3
			vPortFree( pxTCB );
   1dc3e:	687b      	ldr	r3, [r7, #4]
   1dc40:	0018      	movs	r0, r3
   1dc42:	4b03      	ldr	r3, [pc, #12]	; (1dc50 <prvDeleteTCB+0x24>)
   1dc44:	4798      	blx	r3
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
   1dc46:	46c0      	nop			; (mov r8, r8)
   1dc48:	46bd      	mov	sp, r7
   1dc4a:	b002      	add	sp, #8
   1dc4c:	bd80      	pop	{r7, pc}
   1dc4e:	46c0      	nop			; (mov r8, r8)
   1dc50:	0001b195 	.word	0x0001b195

0001dc54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
   1dc54:	b580      	push	{r7, lr}
   1dc56:	b082      	sub	sp, #8
   1dc58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   1dc5a:	4b0e      	ldr	r3, [pc, #56]	; (1dc94 <prvResetNextTaskUnblockTime+0x40>)
   1dc5c:	681b      	ldr	r3, [r3, #0]
   1dc5e:	681b      	ldr	r3, [r3, #0]
   1dc60:	2b00      	cmp	r3, #0
   1dc62:	d101      	bne.n	1dc68 <prvResetNextTaskUnblockTime+0x14>
   1dc64:	2301      	movs	r3, #1
   1dc66:	e000      	b.n	1dc6a <prvResetNextTaskUnblockTime+0x16>
   1dc68:	2300      	movs	r3, #0
   1dc6a:	2b00      	cmp	r3, #0
   1dc6c:	d004      	beq.n	1dc78 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
   1dc6e:	4b0a      	ldr	r3, [pc, #40]	; (1dc98 <prvResetNextTaskUnblockTime+0x44>)
   1dc70:	2201      	movs	r2, #1
   1dc72:	4252      	negs	r2, r2
   1dc74:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
   1dc76:	e008      	b.n	1dc8a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   1dc78:	4b06      	ldr	r3, [pc, #24]	; (1dc94 <prvResetNextTaskUnblockTime+0x40>)
   1dc7a:	681b      	ldr	r3, [r3, #0]
   1dc7c:	68db      	ldr	r3, [r3, #12]
   1dc7e:	68db      	ldr	r3, [r3, #12]
   1dc80:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
   1dc82:	687b      	ldr	r3, [r7, #4]
   1dc84:	685a      	ldr	r2, [r3, #4]
   1dc86:	4b04      	ldr	r3, [pc, #16]	; (1dc98 <prvResetNextTaskUnblockTime+0x44>)
   1dc88:	601a      	str	r2, [r3, #0]
}
   1dc8a:	46c0      	nop			; (mov r8, r8)
   1dc8c:	46bd      	mov	sp, r7
   1dc8e:	b002      	add	sp, #8
   1dc90:	bd80      	pop	{r7, pc}
   1dc92:	46c0      	nop			; (mov r8, r8)
   1dc94:	2000416c 	.word	0x2000416c
   1dc98:	200041d4 	.word	0x200041d4

0001dc9c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
   1dc9c:	b580      	push	{r7, lr}
   1dc9e:	b082      	sub	sp, #8
   1dca0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   1dca2:	4b04      	ldr	r3, [pc, #16]	; (1dcb4 <xTaskGetCurrentTaskHandle+0x18>)
   1dca4:	681b      	ldr	r3, [r3, #0]
   1dca6:	607b      	str	r3, [r7, #4]

		return xReturn;
   1dca8:	687b      	ldr	r3, [r7, #4]
	}
   1dcaa:	0018      	movs	r0, r3
   1dcac:	46bd      	mov	sp, r7
   1dcae:	b002      	add	sp, #8
   1dcb0:	bd80      	pop	{r7, pc}
   1dcb2:	46c0      	nop			; (mov r8, r8)
   1dcb4:	200040dc 	.word	0x200040dc

0001dcb8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
   1dcb8:	b580      	push	{r7, lr}
   1dcba:	b082      	sub	sp, #8
   1dcbc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
   1dcbe:	4b0a      	ldr	r3, [pc, #40]	; (1dce8 <xTaskGetSchedulerState+0x30>)
   1dcc0:	681b      	ldr	r3, [r3, #0]
   1dcc2:	2b00      	cmp	r3, #0
   1dcc4:	d102      	bne.n	1dccc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   1dcc6:	2301      	movs	r3, #1
   1dcc8:	607b      	str	r3, [r7, #4]
   1dcca:	e008      	b.n	1dcde <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
   1dccc:	4b07      	ldr	r3, [pc, #28]	; (1dcec <xTaskGetSchedulerState+0x34>)
   1dcce:	681b      	ldr	r3, [r3, #0]
   1dcd0:	2b00      	cmp	r3, #0
   1dcd2:	d102      	bne.n	1dcda <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
   1dcd4:	2302      	movs	r3, #2
   1dcd6:	607b      	str	r3, [r7, #4]
   1dcd8:	e001      	b.n	1dcde <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   1dcda:	2300      	movs	r3, #0
   1dcdc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
   1dcde:	687b      	ldr	r3, [r7, #4]
	}
   1dce0:	0018      	movs	r0, r3
   1dce2:	46bd      	mov	sp, r7
   1dce4:	b002      	add	sp, #8
   1dce6:	bd80      	pop	{r7, pc}
   1dce8:	200041c0 	.word	0x200041c0
   1dcec:	200041dc 	.word	0x200041dc

0001dcf0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
   1dcf0:	b590      	push	{r4, r7, lr}
   1dcf2:	b085      	sub	sp, #20
   1dcf4:	af00      	add	r7, sp, #0
   1dcf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
   1dcf8:	687b      	ldr	r3, [r7, #4]
   1dcfa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1dcfc:	2300      	movs	r3, #0
   1dcfe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
   1dd00:	687b      	ldr	r3, [r7, #4]
   1dd02:	2b00      	cmp	r3, #0
   1dd04:	d100      	bne.n	1dd08 <xTaskPriorityInherit+0x18>
   1dd06:	e09d      	b.n	1de44 <xTaskPriorityInherit+0x154>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
   1dd08:	68bb      	ldr	r3, [r7, #8]
   1dd0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dd0c:	4b50      	ldr	r3, [pc, #320]	; (1de50 <xTaskPriorityInherit+0x160>)
   1dd0e:	681b      	ldr	r3, [r3, #0]
   1dd10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1dd12:	429a      	cmp	r2, r3
   1dd14:	d300      	bcc.n	1dd18 <xTaskPriorityInherit+0x28>
   1dd16:	e08c      	b.n	1de32 <xTaskPriorityInherit+0x142>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1dd18:	68bb      	ldr	r3, [r7, #8]
   1dd1a:	699b      	ldr	r3, [r3, #24]
   1dd1c:	2b00      	cmp	r3, #0
   1dd1e:	db06      	blt.n	1dd2e <xTaskPriorityInherit+0x3e>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1dd20:	4b4b      	ldr	r3, [pc, #300]	; (1de50 <xTaskPriorityInherit+0x160>)
   1dd22:	681b      	ldr	r3, [r3, #0]
   1dd24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1dd26:	2205      	movs	r2, #5
   1dd28:	1ad2      	subs	r2, r2, r3
   1dd2a:	68bb      	ldr	r3, [r7, #8]
   1dd2c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
   1dd2e:	68bb      	ldr	r3, [r7, #8]
   1dd30:	6959      	ldr	r1, [r3, #20]
   1dd32:	68bb      	ldr	r3, [r7, #8]
   1dd34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dd36:	0013      	movs	r3, r2
   1dd38:	009b      	lsls	r3, r3, #2
   1dd3a:	189b      	adds	r3, r3, r2
   1dd3c:	009b      	lsls	r3, r3, #2
   1dd3e:	4a45      	ldr	r2, [pc, #276]	; (1de54 <xTaskPriorityInherit+0x164>)
   1dd40:	189b      	adds	r3, r3, r2
   1dd42:	4299      	cmp	r1, r3
   1dd44:	d101      	bne.n	1dd4a <xTaskPriorityInherit+0x5a>
   1dd46:	2301      	movs	r3, #1
   1dd48:	e000      	b.n	1dd4c <xTaskPriorityInherit+0x5c>
   1dd4a:	2300      	movs	r3, #0
   1dd4c:	2b00      	cmp	r3, #0
   1dd4e:	d037      	beq.n	1ddc0 <xTaskPriorityInherit+0xd0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1dd50:	68bb      	ldr	r3, [r7, #8]
   1dd52:	3304      	adds	r3, #4
   1dd54:	0018      	movs	r0, r3
   1dd56:	4b40      	ldr	r3, [pc, #256]	; (1de58 <xTaskPriorityInherit+0x168>)
   1dd58:	4798      	blx	r3
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1dd5a:	4b3d      	ldr	r3, [pc, #244]	; (1de50 <xTaskPriorityInherit+0x160>)
   1dd5c:	681b      	ldr	r3, [r3, #0]
   1dd5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dd60:	68bb      	ldr	r3, [r7, #8]
   1dd62:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
   1dd64:	68bb      	ldr	r3, [r7, #8]
   1dd66:	0018      	movs	r0, r3
   1dd68:	4b3c      	ldr	r3, [pc, #240]	; (1de5c <xTaskPriorityInherit+0x16c>)
   1dd6a:	4798      	blx	r3
   1dd6c:	0003      	movs	r3, r0
   1dd6e:	001a      	movs	r2, r3
   1dd70:	4b3b      	ldr	r3, [pc, #236]	; (1de60 <xTaskPriorityInherit+0x170>)
   1dd72:	881b      	ldrh	r3, [r3, #0]
   1dd74:	4013      	ands	r3, r2
   1dd76:	b29b      	uxth	r3, r3
   1dd78:	2b00      	cmp	r3, #0
   1dd7a:	d008      	beq.n	1dd8e <xTaskPriorityInherit+0x9e>
   1dd7c:	68bb      	ldr	r3, [r7, #8]
   1dd7e:	0018      	movs	r0, r3
   1dd80:	4b38      	ldr	r3, [pc, #224]	; (1de64 <xTaskPriorityInherit+0x174>)
   1dd82:	4798      	blx	r3
   1dd84:	0003      	movs	r3, r0
   1dd86:	b2db      	uxtb	r3, r3
   1dd88:	0018      	movs	r0, r3
   1dd8a:	4b37      	ldr	r3, [pc, #220]	; (1de68 <xTaskPriorityInherit+0x178>)
   1dd8c:	4798      	blx	r3
   1dd8e:	68bb      	ldr	r3, [r7, #8]
   1dd90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dd92:	4b36      	ldr	r3, [pc, #216]	; (1de6c <xTaskPriorityInherit+0x17c>)
   1dd94:	681b      	ldr	r3, [r3, #0]
   1dd96:	429a      	cmp	r2, r3
   1dd98:	d903      	bls.n	1dda2 <xTaskPriorityInherit+0xb2>
   1dd9a:	68bb      	ldr	r3, [r7, #8]
   1dd9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dd9e:	4b33      	ldr	r3, [pc, #204]	; (1de6c <xTaskPriorityInherit+0x17c>)
   1dda0:	601a      	str	r2, [r3, #0]
   1dda2:	68bb      	ldr	r3, [r7, #8]
   1dda4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dda6:	0013      	movs	r3, r2
   1dda8:	009b      	lsls	r3, r3, #2
   1ddaa:	189b      	adds	r3, r3, r2
   1ddac:	009b      	lsls	r3, r3, #2
   1ddae:	4a29      	ldr	r2, [pc, #164]	; (1de54 <xTaskPriorityInherit+0x164>)
   1ddb0:	189a      	adds	r2, r3, r2
   1ddb2:	68bb      	ldr	r3, [r7, #8]
   1ddb4:	3304      	adds	r3, #4
   1ddb6:	0019      	movs	r1, r3
   1ddb8:	0010      	movs	r0, r2
   1ddba:	4b2d      	ldr	r3, [pc, #180]	; (1de70 <xTaskPriorityInherit+0x180>)
   1ddbc:	4798      	blx	r3
   1ddbe:	e004      	b.n	1ddca <xTaskPriorityInherit+0xda>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
   1ddc0:	4b23      	ldr	r3, [pc, #140]	; (1de50 <xTaskPriorityInherit+0x160>)
   1ddc2:	681b      	ldr	r3, [r3, #0]
   1ddc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1ddc6:	68bb      	ldr	r3, [r7, #8]
   1ddc8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
   1ddca:	68bb      	ldr	r3, [r7, #8]
   1ddcc:	0018      	movs	r0, r3
   1ddce:	4b23      	ldr	r3, [pc, #140]	; (1de5c <xTaskPriorityInherit+0x16c>)
   1ddd0:	4798      	blx	r3
   1ddd2:	0003      	movs	r3, r0
   1ddd4:	001a      	movs	r2, r3
   1ddd6:	4b22      	ldr	r3, [pc, #136]	; (1de60 <xTaskPriorityInherit+0x170>)
   1ddd8:	881b      	ldrh	r3, [r3, #0]
   1ddda:	4013      	ands	r3, r2
   1dddc:	b29b      	uxth	r3, r3
   1ddde:	2b00      	cmp	r3, #0
   1dde0:	d024      	beq.n	1de2c <xTaskPriorityInherit+0x13c>
   1dde2:	68bb      	ldr	r3, [r7, #8]
   1dde4:	0018      	movs	r0, r3
   1dde6:	4b1f      	ldr	r3, [pc, #124]	; (1de64 <xTaskPriorityInherit+0x174>)
   1dde8:	4798      	blx	r3
   1ddea:	0003      	movs	r3, r0
   1ddec:	b2db      	uxtb	r3, r3
   1ddee:	001c      	movs	r4, r3
   1ddf0:	68bb      	ldr	r3, [r7, #8]
   1ddf2:	0018      	movs	r0, r3
   1ddf4:	4b1b      	ldr	r3, [pc, #108]	; (1de64 <xTaskPriorityInherit+0x174>)
   1ddf6:	4798      	blx	r3
   1ddf8:	0003      	movs	r3, r0
   1ddfa:	b2db      	uxtb	r3, r3
   1ddfc:	0019      	movs	r1, r3
   1ddfe:	2003      	movs	r0, #3
   1de00:	4b1c      	ldr	r3, [pc, #112]	; (1de74 <xTaskPriorityInherit+0x184>)
   1de02:	4798      	blx	r3
   1de04:	0003      	movs	r3, r0
   1de06:	0022      	movs	r2, r4
   1de08:	2103      	movs	r1, #3
   1de0a:	208e      	movs	r0, #142	; 0x8e
   1de0c:	4c1a      	ldr	r4, [pc, #104]	; (1de78 <xTaskPriorityInherit+0x188>)
   1de0e:	47a0      	blx	r4
   1de10:	68bb      	ldr	r3, [r7, #8]
   1de12:	0018      	movs	r0, r3
   1de14:	4b13      	ldr	r3, [pc, #76]	; (1de64 <xTaskPriorityInherit+0x174>)
   1de16:	4798      	blx	r3
   1de18:	0003      	movs	r3, r0
   1de1a:	b2d9      	uxtb	r1, r3
   1de1c:	4b0c      	ldr	r3, [pc, #48]	; (1de50 <xTaskPriorityInherit+0x160>)
   1de1e:	681b      	ldr	r3, [r3, #0]
   1de20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1de22:	b2db      	uxtb	r3, r3
   1de24:	001a      	movs	r2, r3
   1de26:	2003      	movs	r0, #3
   1de28:	4b14      	ldr	r3, [pc, #80]	; (1de7c <xTaskPriorityInherit+0x18c>)
   1de2a:	4798      	blx	r3

				/* Inheritance occurred. */
				xReturn = pdTRUE;
   1de2c:	2301      	movs	r3, #1
   1de2e:	60fb      	str	r3, [r7, #12]
   1de30:	e008      	b.n	1de44 <xTaskPriorityInherit+0x154>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
   1de32:	68bb      	ldr	r3, [r7, #8]
   1de34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1de36:	4b06      	ldr	r3, [pc, #24]	; (1de50 <xTaskPriorityInherit+0x160>)
   1de38:	681b      	ldr	r3, [r3, #0]
   1de3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1de3c:	429a      	cmp	r2, r3
   1de3e:	d201      	bcs.n	1de44 <xTaskPriorityInherit+0x154>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
   1de40:	2301      	movs	r3, #1
   1de42:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1de44:	68fb      	ldr	r3, [r7, #12]
	}
   1de46:	0018      	movs	r0, r3
   1de48:	46bd      	mov	sp, r7
   1de4a:	b005      	add	sp, #20
   1de4c:	bd90      	pop	{r4, r7, pc}
   1de4e:	46c0      	nop			; (mov r8, r8)
   1de50:	200040dc 	.word	0x200040dc
   1de54:	200040e0 	.word	0x200040e0
   1de58:	0001ae0f 	.word	0x0001ae0f
   1de5c:	00018f95 	.word	0x00018f95
   1de60:	20000110 	.word	0x20000110
   1de64:	00018f75 	.word	0x00018f75
   1de68:	00019745 	.word	0x00019745
   1de6c:	200041bc 	.word	0x200041bc
   1de70:	0001ad5f 	.word	0x0001ad5f
   1de74:	00019f4d 	.word	0x00019f4d
   1de78:	00019abd 	.word	0x00019abd
   1de7c:	00019ea9 	.word	0x00019ea9

0001de80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
   1de80:	b590      	push	{r4, r7, lr}
   1de82:	b085      	sub	sp, #20
   1de84:	af00      	add	r7, sp, #0
   1de86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1de88:	687b      	ldr	r3, [r7, #4]
   1de8a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
   1de8c:	2300      	movs	r3, #0
   1de8e:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1de90:	687b      	ldr	r3, [r7, #4]
   1de92:	2b00      	cmp	r3, #0
   1de94:	d100      	bne.n	1de98 <xTaskPriorityDisinherit+0x18>
   1de96:	e089      	b.n	1dfac <xTaskPriorityDisinherit+0x12c>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
   1de98:	4b47      	ldr	r3, [pc, #284]	; (1dfb8 <xTaskPriorityDisinherit+0x138>)
   1de9a:	681b      	ldr	r3, [r3, #0]
   1de9c:	68ba      	ldr	r2, [r7, #8]
   1de9e:	429a      	cmp	r2, r3
   1dea0:	d001      	beq.n	1dea6 <xTaskPriorityDisinherit+0x26>
   1dea2:	b672      	cpsid	i
   1dea4:	e7fe      	b.n	1dea4 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
   1dea6:	68bb      	ldr	r3, [r7, #8]
   1dea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1deaa:	2b00      	cmp	r3, #0
   1deac:	d101      	bne.n	1deb2 <xTaskPriorityDisinherit+0x32>
   1deae:	b672      	cpsid	i
   1deb0:	e7fe      	b.n	1deb0 <xTaskPriorityDisinherit+0x30>
			( pxTCB->uxMutexesHeld )--;
   1deb2:	68bb      	ldr	r3, [r7, #8]
   1deb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1deb6:	1e5a      	subs	r2, r3, #1
   1deb8:	68bb      	ldr	r3, [r7, #8]
   1deba:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   1debc:	68bb      	ldr	r3, [r7, #8]
   1debe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1dec0:	68bb      	ldr	r3, [r7, #8]
   1dec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1dec4:	429a      	cmp	r2, r3
   1dec6:	d071      	beq.n	1dfac <xTaskPriorityDisinherit+0x12c>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
   1dec8:	68bb      	ldr	r3, [r7, #8]
   1deca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1decc:	2b00      	cmp	r3, #0
   1dece:	d16d      	bne.n	1dfac <xTaskPriorityDisinherit+0x12c>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1ded0:	68bb      	ldr	r3, [r7, #8]
   1ded2:	3304      	adds	r3, #4
   1ded4:	0018      	movs	r0, r3
   1ded6:	4b39      	ldr	r3, [pc, #228]	; (1dfbc <xTaskPriorityDisinherit+0x13c>)
   1ded8:	4798      	blx	r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1deda:	68bb      	ldr	r3, [r7, #8]
   1dedc:	0018      	movs	r0, r3
   1dede:	4b38      	ldr	r3, [pc, #224]	; (1dfc0 <xTaskPriorityDisinherit+0x140>)
   1dee0:	4798      	blx	r3
   1dee2:	0003      	movs	r3, r0
   1dee4:	001a      	movs	r2, r3
   1dee6:	4b37      	ldr	r3, [pc, #220]	; (1dfc4 <xTaskPriorityDisinherit+0x144>)
   1dee8:	881b      	ldrh	r3, [r3, #0]
   1deea:	4013      	ands	r3, r2
   1deec:	b29b      	uxth	r3, r3
   1deee:	2b00      	cmp	r3, #0
   1def0:	d023      	beq.n	1df3a <xTaskPriorityDisinherit+0xba>
   1def2:	68bb      	ldr	r3, [r7, #8]
   1def4:	0018      	movs	r0, r3
   1def6:	4b34      	ldr	r3, [pc, #208]	; (1dfc8 <xTaskPriorityDisinherit+0x148>)
   1def8:	4798      	blx	r3
   1defa:	0003      	movs	r3, r0
   1defc:	b2db      	uxtb	r3, r3
   1defe:	001c      	movs	r4, r3
   1df00:	68bb      	ldr	r3, [r7, #8]
   1df02:	0018      	movs	r0, r3
   1df04:	4b30      	ldr	r3, [pc, #192]	; (1dfc8 <xTaskPriorityDisinherit+0x148>)
   1df06:	4798      	blx	r3
   1df08:	0003      	movs	r3, r0
   1df0a:	b2db      	uxtb	r3, r3
   1df0c:	0019      	movs	r1, r3
   1df0e:	2003      	movs	r0, #3
   1df10:	4b2e      	ldr	r3, [pc, #184]	; (1dfcc <xTaskPriorityDisinherit+0x14c>)
   1df12:	4798      	blx	r3
   1df14:	0003      	movs	r3, r0
   1df16:	0022      	movs	r2, r4
   1df18:	2103      	movs	r1, #3
   1df1a:	208f      	movs	r0, #143	; 0x8f
   1df1c:	4c2c      	ldr	r4, [pc, #176]	; (1dfd0 <xTaskPriorityDisinherit+0x150>)
   1df1e:	47a0      	blx	r4
   1df20:	68bb      	ldr	r3, [r7, #8]
   1df22:	0018      	movs	r0, r3
   1df24:	4b28      	ldr	r3, [pc, #160]	; (1dfc8 <xTaskPriorityDisinherit+0x148>)
   1df26:	4798      	blx	r3
   1df28:	0003      	movs	r3, r0
   1df2a:	b2d9      	uxtb	r1, r3
   1df2c:	68bb      	ldr	r3, [r7, #8]
   1df2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1df30:	b2db      	uxtb	r3, r3
   1df32:	001a      	movs	r2, r3
   1df34:	2003      	movs	r0, #3
   1df36:	4b27      	ldr	r3, [pc, #156]	; (1dfd4 <xTaskPriorityDisinherit+0x154>)
   1df38:	4798      	blx	r3
					pxTCB->uxPriority = pxTCB->uxBasePriority;
   1df3a:	68bb      	ldr	r3, [r7, #8]
   1df3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1df3e:	68bb      	ldr	r3, [r7, #8]
   1df40:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1df42:	68bb      	ldr	r3, [r7, #8]
   1df44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1df46:	2205      	movs	r2, #5
   1df48:	1ad2      	subs	r2, r2, r3
   1df4a:	68bb      	ldr	r3, [r7, #8]
   1df4c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
   1df4e:	68bb      	ldr	r3, [r7, #8]
   1df50:	0018      	movs	r0, r3
   1df52:	4b1b      	ldr	r3, [pc, #108]	; (1dfc0 <xTaskPriorityDisinherit+0x140>)
   1df54:	4798      	blx	r3
   1df56:	0003      	movs	r3, r0
   1df58:	001a      	movs	r2, r3
   1df5a:	4b1a      	ldr	r3, [pc, #104]	; (1dfc4 <xTaskPriorityDisinherit+0x144>)
   1df5c:	881b      	ldrh	r3, [r3, #0]
   1df5e:	4013      	ands	r3, r2
   1df60:	b29b      	uxth	r3, r3
   1df62:	2b00      	cmp	r3, #0
   1df64:	d008      	beq.n	1df78 <xTaskPriorityDisinherit+0xf8>
   1df66:	68bb      	ldr	r3, [r7, #8]
   1df68:	0018      	movs	r0, r3
   1df6a:	4b17      	ldr	r3, [pc, #92]	; (1dfc8 <xTaskPriorityDisinherit+0x148>)
   1df6c:	4798      	blx	r3
   1df6e:	0003      	movs	r3, r0
   1df70:	b2db      	uxtb	r3, r3
   1df72:	0018      	movs	r0, r3
   1df74:	4b18      	ldr	r3, [pc, #96]	; (1dfd8 <xTaskPriorityDisinherit+0x158>)
   1df76:	4798      	blx	r3
   1df78:	68bb      	ldr	r3, [r7, #8]
   1df7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1df7c:	4b17      	ldr	r3, [pc, #92]	; (1dfdc <xTaskPriorityDisinherit+0x15c>)
   1df7e:	681b      	ldr	r3, [r3, #0]
   1df80:	429a      	cmp	r2, r3
   1df82:	d903      	bls.n	1df8c <xTaskPriorityDisinherit+0x10c>
   1df84:	68bb      	ldr	r3, [r7, #8]
   1df86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1df88:	4b14      	ldr	r3, [pc, #80]	; (1dfdc <xTaskPriorityDisinherit+0x15c>)
   1df8a:	601a      	str	r2, [r3, #0]
   1df8c:	68bb      	ldr	r3, [r7, #8]
   1df8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1df90:	0013      	movs	r3, r2
   1df92:	009b      	lsls	r3, r3, #2
   1df94:	189b      	adds	r3, r3, r2
   1df96:	009b      	lsls	r3, r3, #2
   1df98:	4a11      	ldr	r2, [pc, #68]	; (1dfe0 <xTaskPriorityDisinherit+0x160>)
   1df9a:	189a      	adds	r2, r3, r2
   1df9c:	68bb      	ldr	r3, [r7, #8]
   1df9e:	3304      	adds	r3, #4
   1dfa0:	0019      	movs	r1, r3
   1dfa2:	0010      	movs	r0, r2
   1dfa4:	4b0f      	ldr	r3, [pc, #60]	; (1dfe4 <xTaskPriorityDisinherit+0x164>)
   1dfa6:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
   1dfa8:	2301      	movs	r3, #1
   1dfaa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
   1dfac:	68fb      	ldr	r3, [r7, #12]
	}
   1dfae:	0018      	movs	r0, r3
   1dfb0:	46bd      	mov	sp, r7
   1dfb2:	b005      	add	sp, #20
   1dfb4:	bd90      	pop	{r4, r7, pc}
   1dfb6:	46c0      	nop			; (mov r8, r8)
   1dfb8:	200040dc 	.word	0x200040dc
   1dfbc:	0001ae0f 	.word	0x0001ae0f
   1dfc0:	00018f95 	.word	0x00018f95
   1dfc4:	20000110 	.word	0x20000110
   1dfc8:	00018f75 	.word	0x00018f75
   1dfcc:	00019f4d 	.word	0x00019f4d
   1dfd0:	00019abd 	.word	0x00019abd
   1dfd4:	00019ea9 	.word	0x00019ea9
   1dfd8:	00019745 	.word	0x00019745
   1dfdc:	200041bc 	.word	0x200041bc
   1dfe0:	200040e0 	.word	0x200040e0
   1dfe4:	0001ad5f 	.word	0x0001ad5f

0001dfe8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
   1dfe8:	b590      	push	{r4, r7, lr}
   1dfea:	b087      	sub	sp, #28
   1dfec:	af00      	add	r7, sp, #0
   1dfee:	6078      	str	r0, [r7, #4]
   1dff0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
   1dff2:	687b      	ldr	r3, [r7, #4]
   1dff4:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
   1dff6:	2301      	movs	r3, #1
   1dff8:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
   1dffa:	687b      	ldr	r3, [r7, #4]
   1dffc:	2b00      	cmp	r3, #0
   1dffe:	d100      	bne.n	1e002 <vTaskPriorityDisinheritAfterTimeout+0x1a>
   1e000:	e0a4      	b.n	1e14c <vTaskPriorityDisinheritAfterTimeout+0x164>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
   1e002:	693b      	ldr	r3, [r7, #16]
   1e004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   1e006:	2b00      	cmp	r3, #0
   1e008:	d101      	bne.n	1e00e <vTaskPriorityDisinheritAfterTimeout+0x26>
   1e00a:	b672      	cpsid	i
   1e00c:	e7fe      	b.n	1e00c <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
   1e00e:	693b      	ldr	r3, [r7, #16]
   1e010:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   1e012:	683b      	ldr	r3, [r7, #0]
   1e014:	429a      	cmp	r2, r3
   1e016:	d202      	bcs.n	1e01e <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
   1e018:	683b      	ldr	r3, [r7, #0]
   1e01a:	617b      	str	r3, [r7, #20]
   1e01c:	e002      	b.n	1e024 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
   1e01e:	693b      	ldr	r3, [r7, #16]
   1e020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1e022:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
   1e024:	693b      	ldr	r3, [r7, #16]
   1e026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e028:	697b      	ldr	r3, [r7, #20]
   1e02a:	429a      	cmp	r2, r3
   1e02c:	d100      	bne.n	1e030 <vTaskPriorityDisinheritAfterTimeout+0x48>
   1e02e:	e08d      	b.n	1e14c <vTaskPriorityDisinheritAfterTimeout+0x164>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
   1e030:	693b      	ldr	r3, [r7, #16]
   1e032:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1e034:	68fb      	ldr	r3, [r7, #12]
   1e036:	429a      	cmp	r2, r3
   1e038:	d000      	beq.n	1e03c <vTaskPriorityDisinheritAfterTimeout+0x54>
   1e03a:	e087      	b.n	1e14c <vTaskPriorityDisinheritAfterTimeout+0x164>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
   1e03c:	4b45      	ldr	r3, [pc, #276]	; (1e154 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
   1e03e:	681b      	ldr	r3, [r3, #0]
   1e040:	693a      	ldr	r2, [r7, #16]
   1e042:	429a      	cmp	r2, r3
   1e044:	d101      	bne.n	1e04a <vTaskPriorityDisinheritAfterTimeout+0x62>
   1e046:	b672      	cpsid	i
   1e048:	e7fe      	b.n	1e048 <vTaskPriorityDisinheritAfterTimeout+0x60>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
   1e04a:	693b      	ldr	r3, [r7, #16]
   1e04c:	0018      	movs	r0, r3
   1e04e:	4b42      	ldr	r3, [pc, #264]	; (1e158 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1e050:	4798      	blx	r3
   1e052:	0003      	movs	r3, r0
   1e054:	001a      	movs	r2, r3
   1e056:	4b41      	ldr	r3, [pc, #260]	; (1e15c <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1e058:	881b      	ldrh	r3, [r3, #0]
   1e05a:	4013      	ands	r3, r2
   1e05c:	b29b      	uxth	r3, r3
   1e05e:	2b00      	cmp	r3, #0
   1e060:	d023      	beq.n	1e0aa <vTaskPriorityDisinheritAfterTimeout+0xc2>
   1e062:	693b      	ldr	r3, [r7, #16]
   1e064:	0018      	movs	r0, r3
   1e066:	4b3e      	ldr	r3, [pc, #248]	; (1e160 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1e068:	4798      	blx	r3
   1e06a:	0003      	movs	r3, r0
   1e06c:	b2db      	uxtb	r3, r3
   1e06e:	001c      	movs	r4, r3
   1e070:	693b      	ldr	r3, [r7, #16]
   1e072:	0018      	movs	r0, r3
   1e074:	4b3a      	ldr	r3, [pc, #232]	; (1e160 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1e076:	4798      	blx	r3
   1e078:	0003      	movs	r3, r0
   1e07a:	b2db      	uxtb	r3, r3
   1e07c:	0019      	movs	r1, r3
   1e07e:	2003      	movs	r0, #3
   1e080:	4b38      	ldr	r3, [pc, #224]	; (1e164 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
   1e082:	4798      	blx	r3
   1e084:	0003      	movs	r3, r0
   1e086:	0022      	movs	r2, r4
   1e088:	2103      	movs	r1, #3
   1e08a:	208f      	movs	r0, #143	; 0x8f
   1e08c:	4c36      	ldr	r4, [pc, #216]	; (1e168 <vTaskPriorityDisinheritAfterTimeout+0x180>)
   1e08e:	47a0      	blx	r4
   1e090:	693b      	ldr	r3, [r7, #16]
   1e092:	0018      	movs	r0, r3
   1e094:	4b32      	ldr	r3, [pc, #200]	; (1e160 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1e096:	4798      	blx	r3
   1e098:	0003      	movs	r3, r0
   1e09a:	b2d9      	uxtb	r1, r3
   1e09c:	693b      	ldr	r3, [r7, #16]
   1e09e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1e0a0:	b2db      	uxtb	r3, r3
   1e0a2:	001a      	movs	r2, r3
   1e0a4:	2003      	movs	r0, #3
   1e0a6:	4b31      	ldr	r3, [pc, #196]	; (1e16c <vTaskPriorityDisinheritAfterTimeout+0x184>)
   1e0a8:	4798      	blx	r3
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
   1e0aa:	693b      	ldr	r3, [r7, #16]
   1e0ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1e0ae:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
   1e0b0:	693b      	ldr	r3, [r7, #16]
   1e0b2:	697a      	ldr	r2, [r7, #20]
   1e0b4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
   1e0b6:	693b      	ldr	r3, [r7, #16]
   1e0b8:	699b      	ldr	r3, [r3, #24]
   1e0ba:	2b00      	cmp	r3, #0
   1e0bc:	db04      	blt.n	1e0c8 <vTaskPriorityDisinheritAfterTimeout+0xe0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1e0be:	697b      	ldr	r3, [r7, #20]
   1e0c0:	2205      	movs	r2, #5
   1e0c2:	1ad2      	subs	r2, r2, r3
   1e0c4:	693b      	ldr	r3, [r7, #16]
   1e0c6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
   1e0c8:	693b      	ldr	r3, [r7, #16]
   1e0ca:	6959      	ldr	r1, [r3, #20]
   1e0cc:	68ba      	ldr	r2, [r7, #8]
   1e0ce:	0013      	movs	r3, r2
   1e0d0:	009b      	lsls	r3, r3, #2
   1e0d2:	189b      	adds	r3, r3, r2
   1e0d4:	009b      	lsls	r3, r3, #2
   1e0d6:	4a26      	ldr	r2, [pc, #152]	; (1e170 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1e0d8:	189b      	adds	r3, r3, r2
   1e0da:	4299      	cmp	r1, r3
   1e0dc:	d101      	bne.n	1e0e2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
   1e0de:	2301      	movs	r3, #1
   1e0e0:	e000      	b.n	1e0e4 <vTaskPriorityDisinheritAfterTimeout+0xfc>
   1e0e2:	2300      	movs	r3, #0
   1e0e4:	2b00      	cmp	r3, #0
   1e0e6:	d031      	beq.n	1e14c <vTaskPriorityDisinheritAfterTimeout+0x164>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1e0e8:	693b      	ldr	r3, [r7, #16]
   1e0ea:	3304      	adds	r3, #4
   1e0ec:	0018      	movs	r0, r3
   1e0ee:	4b21      	ldr	r3, [pc, #132]	; (1e174 <vTaskPriorityDisinheritAfterTimeout+0x18c>)
   1e0f0:	4798      	blx	r3
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
   1e0f2:	693b      	ldr	r3, [r7, #16]
   1e0f4:	0018      	movs	r0, r3
   1e0f6:	4b18      	ldr	r3, [pc, #96]	; (1e158 <vTaskPriorityDisinheritAfterTimeout+0x170>)
   1e0f8:	4798      	blx	r3
   1e0fa:	0003      	movs	r3, r0
   1e0fc:	001a      	movs	r2, r3
   1e0fe:	4b17      	ldr	r3, [pc, #92]	; (1e15c <vTaskPriorityDisinheritAfterTimeout+0x174>)
   1e100:	881b      	ldrh	r3, [r3, #0]
   1e102:	4013      	ands	r3, r2
   1e104:	b29b      	uxth	r3, r3
   1e106:	2b00      	cmp	r3, #0
   1e108:	d008      	beq.n	1e11c <vTaskPriorityDisinheritAfterTimeout+0x134>
   1e10a:	693b      	ldr	r3, [r7, #16]
   1e10c:	0018      	movs	r0, r3
   1e10e:	4b14      	ldr	r3, [pc, #80]	; (1e160 <vTaskPriorityDisinheritAfterTimeout+0x178>)
   1e110:	4798      	blx	r3
   1e112:	0003      	movs	r3, r0
   1e114:	b2db      	uxtb	r3, r3
   1e116:	0018      	movs	r0, r3
   1e118:	4b17      	ldr	r3, [pc, #92]	; (1e178 <vTaskPriorityDisinheritAfterTimeout+0x190>)
   1e11a:	4798      	blx	r3
   1e11c:	693b      	ldr	r3, [r7, #16]
   1e11e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e120:	4b16      	ldr	r3, [pc, #88]	; (1e17c <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1e122:	681b      	ldr	r3, [r3, #0]
   1e124:	429a      	cmp	r2, r3
   1e126:	d903      	bls.n	1e130 <vTaskPriorityDisinheritAfterTimeout+0x148>
   1e128:	693b      	ldr	r3, [r7, #16]
   1e12a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e12c:	4b13      	ldr	r3, [pc, #76]	; (1e17c <vTaskPriorityDisinheritAfterTimeout+0x194>)
   1e12e:	601a      	str	r2, [r3, #0]
   1e130:	693b      	ldr	r3, [r7, #16]
   1e132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1e134:	0013      	movs	r3, r2
   1e136:	009b      	lsls	r3, r3, #2
   1e138:	189b      	adds	r3, r3, r2
   1e13a:	009b      	lsls	r3, r3, #2
   1e13c:	4a0c      	ldr	r2, [pc, #48]	; (1e170 <vTaskPriorityDisinheritAfterTimeout+0x188>)
   1e13e:	189a      	adds	r2, r3, r2
   1e140:	693b      	ldr	r3, [r7, #16]
   1e142:	3304      	adds	r3, #4
   1e144:	0019      	movs	r1, r3
   1e146:	0010      	movs	r0, r2
   1e148:	4b0d      	ldr	r3, [pc, #52]	; (1e180 <vTaskPriorityDisinheritAfterTimeout+0x198>)
   1e14a:	4798      	blx	r3
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
   1e14c:	46c0      	nop			; (mov r8, r8)
   1e14e:	46bd      	mov	sp, r7
   1e150:	b007      	add	sp, #28
   1e152:	bd90      	pop	{r4, r7, pc}
   1e154:	200040dc 	.word	0x200040dc
   1e158:	00018f95 	.word	0x00018f95
   1e15c:	20000110 	.word	0x20000110
   1e160:	00018f75 	.word	0x00018f75
   1e164:	00019f4d 	.word	0x00019f4d
   1e168:	00019abd 	.word	0x00019abd
   1e16c:	00019ea9 	.word	0x00019ea9
   1e170:	200040e0 	.word	0x200040e0
   1e174:	0001ae0f 	.word	0x0001ae0f
   1e178:	00019745 	.word	0x00019745
   1e17c:	200041bc 	.word	0x200041bc
   1e180:	0001ad5f 	.word	0x0001ad5f

0001e184 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
   1e184:	b580      	push	{r7, lr}
   1e186:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
   1e188:	4b06      	ldr	r3, [pc, #24]	; (1e1a4 <pvTaskIncrementMutexHeldCount+0x20>)
   1e18a:	681b      	ldr	r3, [r3, #0]
   1e18c:	2b00      	cmp	r3, #0
   1e18e:	d004      	beq.n	1e19a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
   1e190:	4b04      	ldr	r3, [pc, #16]	; (1e1a4 <pvTaskIncrementMutexHeldCount+0x20>)
   1e192:	681b      	ldr	r3, [r3, #0]
   1e194:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1e196:	3201      	adds	r2, #1
   1e198:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
   1e19a:	4b02      	ldr	r3, [pc, #8]	; (1e1a4 <pvTaskIncrementMutexHeldCount+0x20>)
   1e19c:	681b      	ldr	r3, [r3, #0]
	}
   1e19e:	0018      	movs	r0, r3
   1e1a0:	46bd      	mov	sp, r7
   1e1a2:	bd80      	pop	{r7, pc}
   1e1a4:	200040dc 	.word	0x200040dc

0001e1a8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
   1e1a8:	b580      	push	{r7, lr}
   1e1aa:	b084      	sub	sp, #16
   1e1ac:	af00      	add	r7, sp, #0
   1e1ae:	6078      	str	r0, [r7, #4]
   1e1b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
   1e1b2:	4b21      	ldr	r3, [pc, #132]	; (1e238 <prvAddCurrentTaskToDelayedList+0x90>)
   1e1b4:	681b      	ldr	r3, [r3, #0]
   1e1b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
   1e1b8:	4b20      	ldr	r3, [pc, #128]	; (1e23c <prvAddCurrentTaskToDelayedList+0x94>)
   1e1ba:	681b      	ldr	r3, [r3, #0]
   1e1bc:	3304      	adds	r3, #4
   1e1be:	0018      	movs	r0, r3
   1e1c0:	4b1f      	ldr	r3, [pc, #124]	; (1e240 <prvAddCurrentTaskToDelayedList+0x98>)
   1e1c2:	4798      	blx	r3
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
   1e1c4:	687b      	ldr	r3, [r7, #4]
   1e1c6:	3301      	adds	r3, #1
   1e1c8:	d10b      	bne.n	1e1e2 <prvAddCurrentTaskToDelayedList+0x3a>
   1e1ca:	683b      	ldr	r3, [r7, #0]
   1e1cc:	2b00      	cmp	r3, #0
   1e1ce:	d008      	beq.n	1e1e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1e1d0:	4b1a      	ldr	r3, [pc, #104]	; (1e23c <prvAddCurrentTaskToDelayedList+0x94>)
   1e1d2:	681b      	ldr	r3, [r3, #0]
   1e1d4:	1d1a      	adds	r2, r3, #4
   1e1d6:	4b1b      	ldr	r3, [pc, #108]	; (1e244 <prvAddCurrentTaskToDelayedList+0x9c>)
   1e1d8:	0011      	movs	r1, r2
   1e1da:	0018      	movs	r0, r3
   1e1dc:	4b1a      	ldr	r3, [pc, #104]	; (1e248 <prvAddCurrentTaskToDelayedList+0xa0>)
   1e1de:	4798      	blx	r3

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
   1e1e0:	e026      	b.n	1e230 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
   1e1e2:	68fa      	ldr	r2, [r7, #12]
   1e1e4:	687b      	ldr	r3, [r7, #4]
   1e1e6:	18d3      	adds	r3, r2, r3
   1e1e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
   1e1ea:	4b14      	ldr	r3, [pc, #80]	; (1e23c <prvAddCurrentTaskToDelayedList+0x94>)
   1e1ec:	681b      	ldr	r3, [r3, #0]
   1e1ee:	68ba      	ldr	r2, [r7, #8]
   1e1f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
   1e1f2:	68ba      	ldr	r2, [r7, #8]
   1e1f4:	68fb      	ldr	r3, [r7, #12]
   1e1f6:	429a      	cmp	r2, r3
   1e1f8:	d209      	bcs.n	1e20e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1e1fa:	4b14      	ldr	r3, [pc, #80]	; (1e24c <prvAddCurrentTaskToDelayedList+0xa4>)
   1e1fc:	681a      	ldr	r2, [r3, #0]
   1e1fe:	4b0f      	ldr	r3, [pc, #60]	; (1e23c <prvAddCurrentTaskToDelayedList+0x94>)
   1e200:	681b      	ldr	r3, [r3, #0]
   1e202:	3304      	adds	r3, #4
   1e204:	0019      	movs	r1, r3
   1e206:	0010      	movs	r0, r2
   1e208:	4b11      	ldr	r3, [pc, #68]	; (1e250 <prvAddCurrentTaskToDelayedList+0xa8>)
   1e20a:	4798      	blx	r3
}
   1e20c:	e010      	b.n	1e230 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
   1e20e:	4b11      	ldr	r3, [pc, #68]	; (1e254 <prvAddCurrentTaskToDelayedList+0xac>)
   1e210:	681a      	ldr	r2, [r3, #0]
   1e212:	4b0a      	ldr	r3, [pc, #40]	; (1e23c <prvAddCurrentTaskToDelayedList+0x94>)
   1e214:	681b      	ldr	r3, [r3, #0]
   1e216:	3304      	adds	r3, #4
   1e218:	0019      	movs	r1, r3
   1e21a:	0010      	movs	r0, r2
   1e21c:	4b0c      	ldr	r3, [pc, #48]	; (1e250 <prvAddCurrentTaskToDelayedList+0xa8>)
   1e21e:	4798      	blx	r3
				if( xTimeToWake < xNextTaskUnblockTime )
   1e220:	4b0d      	ldr	r3, [pc, #52]	; (1e258 <prvAddCurrentTaskToDelayedList+0xb0>)
   1e222:	681b      	ldr	r3, [r3, #0]
   1e224:	68ba      	ldr	r2, [r7, #8]
   1e226:	429a      	cmp	r2, r3
   1e228:	d202      	bcs.n	1e230 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
   1e22a:	4b0b      	ldr	r3, [pc, #44]	; (1e258 <prvAddCurrentTaskToDelayedList+0xb0>)
   1e22c:	68ba      	ldr	r2, [r7, #8]
   1e22e:	601a      	str	r2, [r3, #0]
}
   1e230:	46c0      	nop			; (mov r8, r8)
   1e232:	46bd      	mov	sp, r7
   1e234:	b004      	add	sp, #16
   1e236:	bd80      	pop	{r7, pc}
   1e238:	200041b8 	.word	0x200041b8
   1e23c:	200040dc 	.word	0x200040dc
   1e240:	0001ae0f 	.word	0x0001ae0f
   1e244:	200041a0 	.word	0x200041a0
   1e248:	0001ad5f 	.word	0x0001ad5f
   1e24c:	20004170 	.word	0x20004170
   1e250:	0001ada3 	.word	0x0001ada3
   1e254:	2000416c 	.word	0x2000416c
   1e258:	200041d4 	.word	0x200041d4

0001e25c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
   1e25c:	b590      	push	{r4, r7, lr}
   1e25e:	b085      	sub	sp, #20
   1e260:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
   1e262:	2300      	movs	r3, #0
   1e264:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   1e266:	4b0e      	ldr	r3, [pc, #56]	; (1e2a0 <xTimerCreateTimerTask+0x44>)
   1e268:	4798      	blx	r3

	if( xTimerQueue != NULL )
   1e26a:	4b0e      	ldr	r3, [pc, #56]	; (1e2a4 <xTimerCreateTimerTask+0x48>)
   1e26c:	681b      	ldr	r3, [r3, #0]
   1e26e:	2b00      	cmp	r3, #0
   1e270:	d00b      	beq.n	1e28a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
   1e272:	490d      	ldr	r1, [pc, #52]	; (1e2a8 <xTimerCreateTimerTask+0x4c>)
   1e274:	480d      	ldr	r0, [pc, #52]	; (1e2ac <xTimerCreateTimerTask+0x50>)
   1e276:	4b0e      	ldr	r3, [pc, #56]	; (1e2b0 <xTimerCreateTimerTask+0x54>)
   1e278:	9301      	str	r3, [sp, #4]
   1e27a:	2302      	movs	r3, #2
   1e27c:	9300      	str	r3, [sp, #0]
   1e27e:	2300      	movs	r3, #0
   1e280:	2280      	movs	r2, #128	; 0x80
   1e282:	4c0c      	ldr	r4, [pc, #48]	; (1e2b4 <xTimerCreateTimerTask+0x58>)
   1e284:	47a0      	blx	r4
   1e286:	0003      	movs	r3, r0
   1e288:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
   1e28a:	687b      	ldr	r3, [r7, #4]
   1e28c:	2b00      	cmp	r3, #0
   1e28e:	d101      	bne.n	1e294 <xTimerCreateTimerTask+0x38>
   1e290:	b672      	cpsid	i
   1e292:	e7fe      	b.n	1e292 <xTimerCreateTimerTask+0x36>
	return xReturn;
   1e294:	687b      	ldr	r3, [r7, #4]
}
   1e296:	0018      	movs	r0, r3
   1e298:	46bd      	mov	sp, r7
   1e29a:	b003      	add	sp, #12
   1e29c:	bd90      	pop	{r4, r7, pc}
   1e29e:	46c0      	nop			; (mov r8, r8)
   1e2a0:	0001e7a5 	.word	0x0001e7a5
   1e2a4:	20004210 	.word	0x20004210
   1e2a8:	0003937c 	.word	0x0003937c
   1e2ac:	0001e3dd 	.word	0x0001e3dd
   1e2b0:	20004214 	.word	0x20004214
   1e2b4:	0001cbf5 	.word	0x0001cbf5

0001e2b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
   1e2b8:	b590      	push	{r4, r7, lr}
   1e2ba:	b089      	sub	sp, #36	; 0x24
   1e2bc:	af00      	add	r7, sp, #0
   1e2be:	60f8      	str	r0, [r7, #12]
   1e2c0:	60b9      	str	r1, [r7, #8]
   1e2c2:	607a      	str	r2, [r7, #4]
   1e2c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
   1e2c6:	2300      	movs	r3, #0
   1e2c8:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
   1e2ca:	68fb      	ldr	r3, [r7, #12]
   1e2cc:	2b00      	cmp	r3, #0
   1e2ce:	d101      	bne.n	1e2d4 <xTimerGenericCommand+0x1c>
   1e2d0:	b672      	cpsid	i
   1e2d2:	e7fe      	b.n	1e2d2 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   1e2d4:	4b1e      	ldr	r3, [pc, #120]	; (1e350 <xTimerGenericCommand+0x98>)
   1e2d6:	681b      	ldr	r3, [r3, #0]
   1e2d8:	2b00      	cmp	r3, #0
   1e2da:	d033      	beq.n	1e344 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   1e2dc:	2310      	movs	r3, #16
   1e2de:	18fb      	adds	r3, r7, r3
   1e2e0:	68ba      	ldr	r2, [r7, #8]
   1e2e2:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
   1e2e4:	2310      	movs	r3, #16
   1e2e6:	18fb      	adds	r3, r7, r3
   1e2e8:	687a      	ldr	r2, [r7, #4]
   1e2ea:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
   1e2ec:	2310      	movs	r3, #16
   1e2ee:	18fb      	adds	r3, r7, r3
   1e2f0:	68fa      	ldr	r2, [r7, #12]
   1e2f2:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
   1e2f4:	68bb      	ldr	r3, [r7, #8]
   1e2f6:	2b05      	cmp	r3, #5
   1e2f8:	dc1a      	bgt.n	1e330 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   1e2fa:	4b16      	ldr	r3, [pc, #88]	; (1e354 <xTimerGenericCommand+0x9c>)
   1e2fc:	4798      	blx	r3
   1e2fe:	0003      	movs	r3, r0
   1e300:	2b02      	cmp	r3, #2
   1e302:	d10a      	bne.n	1e31a <xTimerGenericCommand+0x62>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
   1e304:	4b12      	ldr	r3, [pc, #72]	; (1e350 <xTimerGenericCommand+0x98>)
   1e306:	6818      	ldr	r0, [r3, #0]
   1e308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   1e30a:	2310      	movs	r3, #16
   1e30c:	18f9      	adds	r1, r7, r3
   1e30e:	2300      	movs	r3, #0
   1e310:	4c11      	ldr	r4, [pc, #68]	; (1e358 <xTimerGenericCommand+0xa0>)
   1e312:	47a0      	blx	r4
   1e314:	0003      	movs	r3, r0
   1e316:	61fb      	str	r3, [r7, #28]
   1e318:	e014      	b.n	1e344 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   1e31a:	4b0d      	ldr	r3, [pc, #52]	; (1e350 <xTimerGenericCommand+0x98>)
   1e31c:	6818      	ldr	r0, [r3, #0]
   1e31e:	2310      	movs	r3, #16
   1e320:	18f9      	adds	r1, r7, r3
   1e322:	2300      	movs	r3, #0
   1e324:	2200      	movs	r2, #0
   1e326:	4c0c      	ldr	r4, [pc, #48]	; (1e358 <xTimerGenericCommand+0xa0>)
   1e328:	47a0      	blx	r4
   1e32a:	0003      	movs	r3, r0
   1e32c:	61fb      	str	r3, [r7, #28]
   1e32e:	e009      	b.n	1e344 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   1e330:	4b07      	ldr	r3, [pc, #28]	; (1e350 <xTimerGenericCommand+0x98>)
   1e332:	6818      	ldr	r0, [r3, #0]
   1e334:	683a      	ldr	r2, [r7, #0]
   1e336:	2310      	movs	r3, #16
   1e338:	18f9      	adds	r1, r7, r3
   1e33a:	2300      	movs	r3, #0
   1e33c:	4c07      	ldr	r4, [pc, #28]	; (1e35c <xTimerGenericCommand+0xa4>)
   1e33e:	47a0      	blx	r4
   1e340:	0003      	movs	r3, r0
   1e342:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
   1e344:	69fb      	ldr	r3, [r7, #28]
}
   1e346:	0018      	movs	r0, r3
   1e348:	46bd      	mov	sp, r7
   1e34a:	b009      	add	sp, #36	; 0x24
   1e34c:	bd90      	pop	{r4, r7, pc}
   1e34e:	46c0      	nop			; (mov r8, r8)
   1e350:	20004210 	.word	0x20004210
   1e354:	0001dcb9 	.word	0x0001dcb9
   1e358:	0001b52d 	.word	0x0001b52d
   1e35c:	0001b98d 	.word	0x0001b98d

0001e360 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
   1e360:	b590      	push	{r4, r7, lr}
   1e362:	b087      	sub	sp, #28
   1e364:	af02      	add	r7, sp, #8
   1e366:	6078      	str	r0, [r7, #4]
   1e368:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1e36a:	4b18      	ldr	r3, [pc, #96]	; (1e3cc <prvProcessExpiredTimer+0x6c>)
   1e36c:	681b      	ldr	r3, [r3, #0]
   1e36e:	68db      	ldr	r3, [r3, #12]
   1e370:	68db      	ldr	r3, [r3, #12]
   1e372:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1e374:	68fb      	ldr	r3, [r7, #12]
   1e376:	3304      	adds	r3, #4
   1e378:	0018      	movs	r0, r3
   1e37a:	4b15      	ldr	r3, [pc, #84]	; (1e3d0 <prvProcessExpiredTimer+0x70>)
   1e37c:	4798      	blx	r3
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1e37e:	68fb      	ldr	r3, [r7, #12]
   1e380:	69db      	ldr	r3, [r3, #28]
   1e382:	2b01      	cmp	r3, #1
   1e384:	d119      	bne.n	1e3ba <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
   1e386:	68fb      	ldr	r3, [r7, #12]
   1e388:	699a      	ldr	r2, [r3, #24]
   1e38a:	687b      	ldr	r3, [r7, #4]
   1e38c:	18d1      	adds	r1, r2, r3
   1e38e:	687b      	ldr	r3, [r7, #4]
   1e390:	683a      	ldr	r2, [r7, #0]
   1e392:	68f8      	ldr	r0, [r7, #12]
   1e394:	4c0f      	ldr	r4, [pc, #60]	; (1e3d4 <prvProcessExpiredTimer+0x74>)
   1e396:	47a0      	blx	r4
   1e398:	1e03      	subs	r3, r0, #0
   1e39a:	d00e      	beq.n	1e3ba <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1e39c:	687a      	ldr	r2, [r7, #4]
   1e39e:	68f8      	ldr	r0, [r7, #12]
   1e3a0:	2300      	movs	r3, #0
   1e3a2:	9300      	str	r3, [sp, #0]
   1e3a4:	2300      	movs	r3, #0
   1e3a6:	2100      	movs	r1, #0
   1e3a8:	4c0b      	ldr	r4, [pc, #44]	; (1e3d8 <prvProcessExpiredTimer+0x78>)
   1e3aa:	47a0      	blx	r4
   1e3ac:	0003      	movs	r3, r0
   1e3ae:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
   1e3b0:	68bb      	ldr	r3, [r7, #8]
   1e3b2:	2b00      	cmp	r3, #0
   1e3b4:	d101      	bne.n	1e3ba <prvProcessExpiredTimer+0x5a>
   1e3b6:	b672      	cpsid	i
   1e3b8:	e7fe      	b.n	1e3b8 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1e3ba:	68fb      	ldr	r3, [r7, #12]
   1e3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e3be:	68fa      	ldr	r2, [r7, #12]
   1e3c0:	0010      	movs	r0, r2
   1e3c2:	4798      	blx	r3
}
   1e3c4:	46c0      	nop			; (mov r8, r8)
   1e3c6:	46bd      	mov	sp, r7
   1e3c8:	b005      	add	sp, #20
   1e3ca:	bd90      	pop	{r4, r7, pc}
   1e3cc:	20004208 	.word	0x20004208
   1e3d0:	0001ae0f 	.word	0x0001ae0f
   1e3d4:	0001e545 	.word	0x0001e545
   1e3d8:	0001e2b9 	.word	0x0001e2b9

0001e3dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   1e3dc:	b580      	push	{r7, lr}
   1e3de:	b084      	sub	sp, #16
   1e3e0:	af00      	add	r7, sp, #0
   1e3e2:	6078      	str	r0, [r7, #4]

		/* Allow the application writer to execute some code in the context of
		this task at the point the task starts executing.  This is useful if the
		application includes initialisation code that would benefit from
		executing after the scheduler has been started. */
		vApplicationDaemonTaskStartupHook();
   1e3e4:	4b08      	ldr	r3, [pc, #32]	; (1e408 <prvTimerTask+0x2c>)
   1e3e6:	4798      	blx	r3

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1e3e8:	2308      	movs	r3, #8
   1e3ea:	18fb      	adds	r3, r7, r3
   1e3ec:	0018      	movs	r0, r3
   1e3ee:	4b07      	ldr	r3, [pc, #28]	; (1e40c <prvTimerTask+0x30>)
   1e3f0:	4798      	blx	r3
   1e3f2:	0003      	movs	r3, r0
   1e3f4:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
   1e3f6:	68ba      	ldr	r2, [r7, #8]
   1e3f8:	68fb      	ldr	r3, [r7, #12]
   1e3fa:	0011      	movs	r1, r2
   1e3fc:	0018      	movs	r0, r3
   1e3fe:	4b04      	ldr	r3, [pc, #16]	; (1e410 <prvTimerTask+0x34>)
   1e400:	4798      	blx	r3

		/* Empty the command queue. */
		prvProcessReceivedCommands();
   1e402:	4b04      	ldr	r3, [pc, #16]	; (1e414 <prvTimerTask+0x38>)
   1e404:	4798      	blx	r3
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
   1e406:	e7ef      	b.n	1e3e8 <prvTimerTask+0xc>
   1e408:	000335ad 	.word	0x000335ad
   1e40c:	0001e4bd 	.word	0x0001e4bd
   1e410:	0001e419 	.word	0x0001e419
   1e414:	0001e5cd 	.word	0x0001e5cd

0001e418 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
   1e418:	b580      	push	{r7, lr}
   1e41a:	b084      	sub	sp, #16
   1e41c:	af00      	add	r7, sp, #0
   1e41e:	6078      	str	r0, [r7, #4]
   1e420:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
   1e422:	4b1e      	ldr	r3, [pc, #120]	; (1e49c <prvProcessTimerOrBlockTask+0x84>)
   1e424:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1e426:	2308      	movs	r3, #8
   1e428:	18fb      	adds	r3, r7, r3
   1e42a:	0018      	movs	r0, r3
   1e42c:	4b1c      	ldr	r3, [pc, #112]	; (1e4a0 <prvProcessTimerOrBlockTask+0x88>)
   1e42e:	4798      	blx	r3
   1e430:	0003      	movs	r3, r0
   1e432:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
   1e434:	68bb      	ldr	r3, [r7, #8]
   1e436:	2b00      	cmp	r3, #0
   1e438:	d129      	bne.n	1e48e <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   1e43a:	683b      	ldr	r3, [r7, #0]
   1e43c:	2b00      	cmp	r3, #0
   1e43e:	d10c      	bne.n	1e45a <prvProcessTimerOrBlockTask+0x42>
   1e440:	687a      	ldr	r2, [r7, #4]
   1e442:	68fb      	ldr	r3, [r7, #12]
   1e444:	429a      	cmp	r2, r3
   1e446:	d808      	bhi.n	1e45a <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
   1e448:	4b16      	ldr	r3, [pc, #88]	; (1e4a4 <prvProcessTimerOrBlockTask+0x8c>)
   1e44a:	4798      	blx	r3
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
   1e44c:	68fa      	ldr	r2, [r7, #12]
   1e44e:	687b      	ldr	r3, [r7, #4]
   1e450:	0011      	movs	r1, r2
   1e452:	0018      	movs	r0, r3
   1e454:	4b14      	ldr	r3, [pc, #80]	; (1e4a8 <prvProcessTimerOrBlockTask+0x90>)
   1e456:	4798      	blx	r3
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
   1e458:	e01b      	b.n	1e492 <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
   1e45a:	683b      	ldr	r3, [r7, #0]
   1e45c:	2b00      	cmp	r3, #0
   1e45e:	d006      	beq.n	1e46e <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
   1e460:	4b12      	ldr	r3, [pc, #72]	; (1e4ac <prvProcessTimerOrBlockTask+0x94>)
   1e462:	681b      	ldr	r3, [r3, #0]
   1e464:	681b      	ldr	r3, [r3, #0]
   1e466:	425a      	negs	r2, r3
   1e468:	4153      	adcs	r3, r2
   1e46a:	b2db      	uxtb	r3, r3
   1e46c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
   1e46e:	4b10      	ldr	r3, [pc, #64]	; (1e4b0 <prvProcessTimerOrBlockTask+0x98>)
   1e470:	6818      	ldr	r0, [r3, #0]
   1e472:	687a      	ldr	r2, [r7, #4]
   1e474:	68fb      	ldr	r3, [r7, #12]
   1e476:	1ad3      	subs	r3, r2, r3
   1e478:	683a      	ldr	r2, [r7, #0]
   1e47a:	0019      	movs	r1, r3
   1e47c:	4b0d      	ldr	r3, [pc, #52]	; (1e4b4 <prvProcessTimerOrBlockTask+0x9c>)
   1e47e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   1e480:	4b08      	ldr	r3, [pc, #32]	; (1e4a4 <prvProcessTimerOrBlockTask+0x8c>)
   1e482:	4798      	blx	r3
   1e484:	1e03      	subs	r3, r0, #0
   1e486:	d104      	bne.n	1e492 <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
   1e488:	4b0b      	ldr	r3, [pc, #44]	; (1e4b8 <prvProcessTimerOrBlockTask+0xa0>)
   1e48a:	4798      	blx	r3
}
   1e48c:	e001      	b.n	1e492 <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
   1e48e:	4b05      	ldr	r3, [pc, #20]	; (1e4a4 <prvProcessTimerOrBlockTask+0x8c>)
   1e490:	4798      	blx	r3
}
   1e492:	46c0      	nop			; (mov r8, r8)
   1e494:	46bd      	mov	sp, r7
   1e496:	b004      	add	sp, #16
   1e498:	bd80      	pop	{r7, pc}
   1e49a:	46c0      	nop			; (mov r8, r8)
   1e49c:	0001d251 	.word	0x0001d251
   1e4a0:	0001e4fd 	.word	0x0001e4fd
   1e4a4:	0001d269 	.word	0x0001d269
   1e4a8:	0001e361 	.word	0x0001e361
   1e4ac:	2000420c 	.word	0x2000420c
   1e4b0:	20004210 	.word	0x20004210
   1e4b4:	0001c9f1 	.word	0x0001c9f1
   1e4b8:	0001af81 	.word	0x0001af81

0001e4bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
   1e4bc:	b580      	push	{r7, lr}
   1e4be:	b084      	sub	sp, #16
   1e4c0:	af00      	add	r7, sp, #0
   1e4c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   1e4c4:	4b0c      	ldr	r3, [pc, #48]	; (1e4f8 <prvGetNextExpireTime+0x3c>)
   1e4c6:	681b      	ldr	r3, [r3, #0]
   1e4c8:	681b      	ldr	r3, [r3, #0]
   1e4ca:	425a      	negs	r2, r3
   1e4cc:	4153      	adcs	r3, r2
   1e4ce:	b2db      	uxtb	r3, r3
   1e4d0:	001a      	movs	r2, r3
   1e4d2:	687b      	ldr	r3, [r7, #4]
   1e4d4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   1e4d6:	687b      	ldr	r3, [r7, #4]
   1e4d8:	681b      	ldr	r3, [r3, #0]
   1e4da:	2b00      	cmp	r3, #0
   1e4dc:	d105      	bne.n	1e4ea <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1e4de:	4b06      	ldr	r3, [pc, #24]	; (1e4f8 <prvGetNextExpireTime+0x3c>)
   1e4e0:	681b      	ldr	r3, [r3, #0]
   1e4e2:	68db      	ldr	r3, [r3, #12]
   1e4e4:	681b      	ldr	r3, [r3, #0]
   1e4e6:	60fb      	str	r3, [r7, #12]
   1e4e8:	e001      	b.n	1e4ee <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
   1e4ea:	2300      	movs	r3, #0
   1e4ec:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
   1e4ee:	68fb      	ldr	r3, [r7, #12]
}
   1e4f0:	0018      	movs	r0, r3
   1e4f2:	46bd      	mov	sp, r7
   1e4f4:	b004      	add	sp, #16
   1e4f6:	bd80      	pop	{r7, pc}
   1e4f8:	20004208 	.word	0x20004208

0001e4fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
   1e4fc:	b580      	push	{r7, lr}
   1e4fe:	b084      	sub	sp, #16
   1e500:	af00      	add	r7, sp, #0
   1e502:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
   1e504:	4b0c      	ldr	r3, [pc, #48]	; (1e538 <prvSampleTimeNow+0x3c>)
   1e506:	4798      	blx	r3
   1e508:	0003      	movs	r3, r0
   1e50a:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
   1e50c:	4b0b      	ldr	r3, [pc, #44]	; (1e53c <prvSampleTimeNow+0x40>)
   1e50e:	681b      	ldr	r3, [r3, #0]
   1e510:	68fa      	ldr	r2, [r7, #12]
   1e512:	429a      	cmp	r2, r3
   1e514:	d205      	bcs.n	1e522 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
   1e516:	4b0a      	ldr	r3, [pc, #40]	; (1e540 <prvSampleTimeNow+0x44>)
   1e518:	4798      	blx	r3
		*pxTimerListsWereSwitched = pdTRUE;
   1e51a:	687b      	ldr	r3, [r7, #4]
   1e51c:	2201      	movs	r2, #1
   1e51e:	601a      	str	r2, [r3, #0]
   1e520:	e002      	b.n	1e528 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   1e522:	687b      	ldr	r3, [r7, #4]
   1e524:	2200      	movs	r2, #0
   1e526:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
   1e528:	4b04      	ldr	r3, [pc, #16]	; (1e53c <prvSampleTimeNow+0x40>)
   1e52a:	68fa      	ldr	r2, [r7, #12]
   1e52c:	601a      	str	r2, [r3, #0]

	return xTimeNow;
   1e52e:	68fb      	ldr	r3, [r7, #12]
}
   1e530:	0018      	movs	r0, r3
   1e532:	46bd      	mov	sp, r7
   1e534:	b004      	add	sp, #16
   1e536:	bd80      	pop	{r7, pc}
   1e538:	0001d3d9 	.word	0x0001d3d9
   1e53c:	20004218 	.word	0x20004218
   1e540:	0001e6e5 	.word	0x0001e6e5

0001e544 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
   1e544:	b580      	push	{r7, lr}
   1e546:	b086      	sub	sp, #24
   1e548:	af00      	add	r7, sp, #0
   1e54a:	60f8      	str	r0, [r7, #12]
   1e54c:	60b9      	str	r1, [r7, #8]
   1e54e:	607a      	str	r2, [r7, #4]
   1e550:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
   1e552:	2300      	movs	r3, #0
   1e554:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   1e556:	68fb      	ldr	r3, [r7, #12]
   1e558:	68ba      	ldr	r2, [r7, #8]
   1e55a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1e55c:	68fb      	ldr	r3, [r7, #12]
   1e55e:	68fa      	ldr	r2, [r7, #12]
   1e560:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
   1e562:	68ba      	ldr	r2, [r7, #8]
   1e564:	687b      	ldr	r3, [r7, #4]
   1e566:	429a      	cmp	r2, r3
   1e568:	d812      	bhi.n	1e590 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
   1e56a:	687a      	ldr	r2, [r7, #4]
   1e56c:	683b      	ldr	r3, [r7, #0]
   1e56e:	1ad2      	subs	r2, r2, r3
   1e570:	68fb      	ldr	r3, [r7, #12]
   1e572:	699b      	ldr	r3, [r3, #24]
   1e574:	429a      	cmp	r2, r3
   1e576:	d302      	bcc.n	1e57e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   1e578:	2301      	movs	r3, #1
   1e57a:	617b      	str	r3, [r7, #20]
   1e57c:	e01b      	b.n	1e5b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   1e57e:	4b10      	ldr	r3, [pc, #64]	; (1e5c0 <prvInsertTimerInActiveList+0x7c>)
   1e580:	681a      	ldr	r2, [r3, #0]
   1e582:	68fb      	ldr	r3, [r7, #12]
   1e584:	3304      	adds	r3, #4
   1e586:	0019      	movs	r1, r3
   1e588:	0010      	movs	r0, r2
   1e58a:	4b0e      	ldr	r3, [pc, #56]	; (1e5c4 <prvInsertTimerInActiveList+0x80>)
   1e58c:	4798      	blx	r3
   1e58e:	e012      	b.n	1e5b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   1e590:	687a      	ldr	r2, [r7, #4]
   1e592:	683b      	ldr	r3, [r7, #0]
   1e594:	429a      	cmp	r2, r3
   1e596:	d206      	bcs.n	1e5a6 <prvInsertTimerInActiveList+0x62>
   1e598:	68ba      	ldr	r2, [r7, #8]
   1e59a:	683b      	ldr	r3, [r7, #0]
   1e59c:	429a      	cmp	r2, r3
   1e59e:	d302      	bcc.n	1e5a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   1e5a0:	2301      	movs	r3, #1
   1e5a2:	617b      	str	r3, [r7, #20]
   1e5a4:	e007      	b.n	1e5b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1e5a6:	4b08      	ldr	r3, [pc, #32]	; (1e5c8 <prvInsertTimerInActiveList+0x84>)
   1e5a8:	681a      	ldr	r2, [r3, #0]
   1e5aa:	68fb      	ldr	r3, [r7, #12]
   1e5ac:	3304      	adds	r3, #4
   1e5ae:	0019      	movs	r1, r3
   1e5b0:	0010      	movs	r0, r2
   1e5b2:	4b04      	ldr	r3, [pc, #16]	; (1e5c4 <prvInsertTimerInActiveList+0x80>)
   1e5b4:	4798      	blx	r3
		}
	}

	return xProcessTimerNow;
   1e5b6:	697b      	ldr	r3, [r7, #20]
}
   1e5b8:	0018      	movs	r0, r3
   1e5ba:	46bd      	mov	sp, r7
   1e5bc:	b006      	add	sp, #24
   1e5be:	bd80      	pop	{r7, pc}
   1e5c0:	2000420c 	.word	0x2000420c
   1e5c4:	0001ada3 	.word	0x0001ada3
   1e5c8:	20004208 	.word	0x20004208

0001e5cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
   1e5cc:	b590      	push	{r4, r7, lr}
   1e5ce:	b08b      	sub	sp, #44	; 0x2c
   1e5d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1e5d2:	e068      	b.n	1e6a6 <prvProcessReceivedCommands+0xda>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
   1e5d4:	2308      	movs	r3, #8
   1e5d6:	18fb      	adds	r3, r7, r3
   1e5d8:	681b      	ldr	r3, [r3, #0]
   1e5da:	2b00      	cmp	r3, #0
   1e5dc:	db63      	blt.n	1e6a6 <prvProcessReceivedCommands+0xda>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
   1e5de:	2308      	movs	r3, #8
   1e5e0:	18fb      	adds	r3, r7, r3
   1e5e2:	689b      	ldr	r3, [r3, #8]
   1e5e4:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
   1e5e6:	69fb      	ldr	r3, [r7, #28]
   1e5e8:	695b      	ldr	r3, [r3, #20]
   1e5ea:	2b00      	cmp	r3, #0
   1e5ec:	d004      	beq.n	1e5f8 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1e5ee:	69fb      	ldr	r3, [r7, #28]
   1e5f0:	3304      	adds	r3, #4
   1e5f2:	0018      	movs	r0, r3
   1e5f4:	4b33      	ldr	r3, [pc, #204]	; (1e6c4 <prvProcessReceivedCommands+0xf8>)
   1e5f6:	4798      	blx	r3
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   1e5f8:	1d3b      	adds	r3, r7, #4
   1e5fa:	0018      	movs	r0, r3
   1e5fc:	4b32      	ldr	r3, [pc, #200]	; (1e6c8 <prvProcessReceivedCommands+0xfc>)
   1e5fe:	4798      	blx	r3
   1e600:	0003      	movs	r3, r0
   1e602:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
   1e604:	2308      	movs	r3, #8
   1e606:	18fb      	adds	r3, r7, r3
   1e608:	681b      	ldr	r3, [r3, #0]
   1e60a:	2b09      	cmp	r3, #9
   1e60c:	d84a      	bhi.n	1e6a4 <prvProcessReceivedCommands+0xd8>
   1e60e:	009a      	lsls	r2, r3, #2
   1e610:	4b2e      	ldr	r3, [pc, #184]	; (1e6cc <prvProcessReceivedCommands+0x100>)
   1e612:	18d3      	adds	r3, r2, r3
   1e614:	681b      	ldr	r3, [r3, #0]
   1e616:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
   1e618:	2308      	movs	r3, #8
   1e61a:	18fb      	adds	r3, r7, r3
   1e61c:	685a      	ldr	r2, [r3, #4]
   1e61e:	69fb      	ldr	r3, [r7, #28]
   1e620:	699b      	ldr	r3, [r3, #24]
   1e622:	18d1      	adds	r1, r2, r3
   1e624:	2308      	movs	r3, #8
   1e626:	18fb      	adds	r3, r7, r3
   1e628:	685b      	ldr	r3, [r3, #4]
   1e62a:	69ba      	ldr	r2, [r7, #24]
   1e62c:	69f8      	ldr	r0, [r7, #28]
   1e62e:	4c28      	ldr	r4, [pc, #160]	; (1e6d0 <prvProcessReceivedCommands+0x104>)
   1e630:	47a0      	blx	r4
   1e632:	1e03      	subs	r3, r0, #0
   1e634:	d037      	beq.n	1e6a6 <prvProcessReceivedCommands+0xda>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1e636:	69fb      	ldr	r3, [r7, #28]
   1e638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e63a:	69fa      	ldr	r2, [r7, #28]
   1e63c:	0010      	movs	r0, r2
   1e63e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1e640:	69fb      	ldr	r3, [r7, #28]
   1e642:	69db      	ldr	r3, [r3, #28]
   1e644:	2b01      	cmp	r3, #1
   1e646:	d12e      	bne.n	1e6a6 <prvProcessReceivedCommands+0xda>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   1e648:	2308      	movs	r3, #8
   1e64a:	18fb      	adds	r3, r7, r3
   1e64c:	685a      	ldr	r2, [r3, #4]
   1e64e:	69fb      	ldr	r3, [r7, #28]
   1e650:	699b      	ldr	r3, [r3, #24]
   1e652:	18d2      	adds	r2, r2, r3
   1e654:	69f8      	ldr	r0, [r7, #28]
   1e656:	2300      	movs	r3, #0
   1e658:	9300      	str	r3, [sp, #0]
   1e65a:	2300      	movs	r3, #0
   1e65c:	2100      	movs	r1, #0
   1e65e:	4c1d      	ldr	r4, [pc, #116]	; (1e6d4 <prvProcessReceivedCommands+0x108>)
   1e660:	47a0      	blx	r4
   1e662:	0003      	movs	r3, r0
   1e664:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
   1e666:	697b      	ldr	r3, [r7, #20]
   1e668:	2b00      	cmp	r3, #0
   1e66a:	d11c      	bne.n	1e6a6 <prvProcessReceivedCommands+0xda>
   1e66c:	b672      	cpsid	i
   1e66e:	e7fe      	b.n	1e66e <prvProcessReceivedCommands+0xa2>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
   1e670:	2308      	movs	r3, #8
   1e672:	18fb      	adds	r3, r7, r3
   1e674:	685a      	ldr	r2, [r3, #4]
   1e676:	69fb      	ldr	r3, [r7, #28]
   1e678:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   1e67a:	69fb      	ldr	r3, [r7, #28]
   1e67c:	699b      	ldr	r3, [r3, #24]
   1e67e:	2b00      	cmp	r3, #0
   1e680:	d101      	bne.n	1e686 <prvProcessReceivedCommands+0xba>
   1e682:	b672      	cpsid	i
   1e684:	e7fe      	b.n	1e684 <prvProcessReceivedCommands+0xb8>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   1e686:	69fb      	ldr	r3, [r7, #28]
   1e688:	699a      	ldr	r2, [r3, #24]
   1e68a:	69bb      	ldr	r3, [r7, #24]
   1e68c:	18d1      	adds	r1, r2, r3
   1e68e:	69bb      	ldr	r3, [r7, #24]
   1e690:	69ba      	ldr	r2, [r7, #24]
   1e692:	69f8      	ldr	r0, [r7, #28]
   1e694:	4c0e      	ldr	r4, [pc, #56]	; (1e6d0 <prvProcessReceivedCommands+0x104>)
   1e696:	47a0      	blx	r4
					break;
   1e698:	e005      	b.n	1e6a6 <prvProcessReceivedCommands+0xda>
					allocated. */
					#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
					{
						/* The timer can only have been allocated dynamically -
						free it again. */
						vPortFree( pxTimer );
   1e69a:	69fb      	ldr	r3, [r7, #28]
   1e69c:	0018      	movs	r0, r3
   1e69e:	4b0e      	ldr	r3, [pc, #56]	; (1e6d8 <prvProcessReceivedCommands+0x10c>)
   1e6a0:	4798      	blx	r3
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
   1e6a2:	e000      	b.n	1e6a6 <prvProcessReceivedCommands+0xda>

				default	:
					/* Don't expect to get here. */
					break;
   1e6a4:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
   1e6a6:	4b0d      	ldr	r3, [pc, #52]	; (1e6dc <prvProcessReceivedCommands+0x110>)
   1e6a8:	681b      	ldr	r3, [r3, #0]
   1e6aa:	2208      	movs	r2, #8
   1e6ac:	18b9      	adds	r1, r7, r2
   1e6ae:	2200      	movs	r2, #0
   1e6b0:	0018      	movs	r0, r3
   1e6b2:	4b0b      	ldr	r3, [pc, #44]	; (1e6e0 <prvProcessReceivedCommands+0x114>)
   1e6b4:	4798      	blx	r3
   1e6b6:	1e03      	subs	r3, r0, #0
   1e6b8:	d18c      	bne.n	1e5d4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
   1e6ba:	46c0      	nop			; (mov r8, r8)
   1e6bc:	46bd      	mov	sp, r7
   1e6be:	b009      	add	sp, #36	; 0x24
   1e6c0:	bd90      	pop	{r4, r7, pc}
   1e6c2:	46c0      	nop			; (mov r8, r8)
   1e6c4:	0001ae0f 	.word	0x0001ae0f
   1e6c8:	0001e4fd 	.word	0x0001e4fd
   1e6cc:	00039384 	.word	0x00039384
   1e6d0:	0001e545 	.word	0x0001e545
   1e6d4:	0001e2b9 	.word	0x0001e2b9
   1e6d8:	0001b195 	.word	0x0001b195
   1e6dc:	20004210 	.word	0x20004210
   1e6e0:	0001bde5 	.word	0x0001bde5

0001e6e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
   1e6e4:	b590      	push	{r4, r7, lr}
   1e6e6:	b089      	sub	sp, #36	; 0x24
   1e6e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1e6ea:	e03e      	b.n	1e76a <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   1e6ec:	4b28      	ldr	r3, [pc, #160]	; (1e790 <prvSwitchTimerLists+0xac>)
   1e6ee:	681b      	ldr	r3, [r3, #0]
   1e6f0:	68db      	ldr	r3, [r3, #12]
   1e6f2:	681b      	ldr	r3, [r3, #0]
   1e6f4:	617b      	str	r3, [r7, #20]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   1e6f6:	4b26      	ldr	r3, [pc, #152]	; (1e790 <prvSwitchTimerLists+0xac>)
   1e6f8:	681b      	ldr	r3, [r3, #0]
   1e6fa:	68db      	ldr	r3, [r3, #12]
   1e6fc:	68db      	ldr	r3, [r3, #12]
   1e6fe:	613b      	str	r3, [r7, #16]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
   1e700:	693b      	ldr	r3, [r7, #16]
   1e702:	3304      	adds	r3, #4
   1e704:	0018      	movs	r0, r3
   1e706:	4b23      	ldr	r3, [pc, #140]	; (1e794 <prvSwitchTimerLists+0xb0>)
   1e708:	4798      	blx	r3
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
   1e70a:	693b      	ldr	r3, [r7, #16]
   1e70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1e70e:	693a      	ldr	r2, [r7, #16]
   1e710:	0010      	movs	r0, r2
   1e712:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
   1e714:	693b      	ldr	r3, [r7, #16]
   1e716:	69db      	ldr	r3, [r3, #28]
   1e718:	2b01      	cmp	r3, #1
   1e71a:	d126      	bne.n	1e76a <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   1e71c:	693b      	ldr	r3, [r7, #16]
   1e71e:	699a      	ldr	r2, [r3, #24]
   1e720:	697b      	ldr	r3, [r7, #20]
   1e722:	18d3      	adds	r3, r2, r3
   1e724:	60fb      	str	r3, [r7, #12]
			if( xReloadTime > xNextExpireTime )
   1e726:	68fa      	ldr	r2, [r7, #12]
   1e728:	697b      	ldr	r3, [r7, #20]
   1e72a:	429a      	cmp	r2, r3
   1e72c:	d90e      	bls.n	1e74c <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   1e72e:	693b      	ldr	r3, [r7, #16]
   1e730:	68fa      	ldr	r2, [r7, #12]
   1e732:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   1e734:	693b      	ldr	r3, [r7, #16]
   1e736:	693a      	ldr	r2, [r7, #16]
   1e738:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   1e73a:	4b15      	ldr	r3, [pc, #84]	; (1e790 <prvSwitchTimerLists+0xac>)
   1e73c:	681a      	ldr	r2, [r3, #0]
   1e73e:	693b      	ldr	r3, [r7, #16]
   1e740:	3304      	adds	r3, #4
   1e742:	0019      	movs	r1, r3
   1e744:	0010      	movs	r0, r2
   1e746:	4b14      	ldr	r3, [pc, #80]	; (1e798 <prvSwitchTimerLists+0xb4>)
   1e748:	4798      	blx	r3
   1e74a:	e00e      	b.n	1e76a <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
   1e74c:	697a      	ldr	r2, [r7, #20]
   1e74e:	6938      	ldr	r0, [r7, #16]
   1e750:	2300      	movs	r3, #0
   1e752:	9300      	str	r3, [sp, #0]
   1e754:	2300      	movs	r3, #0
   1e756:	2100      	movs	r1, #0
   1e758:	4c10      	ldr	r4, [pc, #64]	; (1e79c <prvSwitchTimerLists+0xb8>)
   1e75a:	47a0      	blx	r4
   1e75c:	0003      	movs	r3, r0
   1e75e:	60bb      	str	r3, [r7, #8]
				configASSERT( xResult );
   1e760:	68bb      	ldr	r3, [r7, #8]
   1e762:	2b00      	cmp	r3, #0
   1e764:	d101      	bne.n	1e76a <prvSwitchTimerLists+0x86>
   1e766:	b672      	cpsid	i
   1e768:	e7fe      	b.n	1e768 <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   1e76a:	4b09      	ldr	r3, [pc, #36]	; (1e790 <prvSwitchTimerLists+0xac>)
   1e76c:	681b      	ldr	r3, [r3, #0]
   1e76e:	681b      	ldr	r3, [r3, #0]
   1e770:	2b00      	cmp	r3, #0
   1e772:	d1bb      	bne.n	1e6ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
   1e774:	4b06      	ldr	r3, [pc, #24]	; (1e790 <prvSwitchTimerLists+0xac>)
   1e776:	681b      	ldr	r3, [r3, #0]
   1e778:	607b      	str	r3, [r7, #4]
	pxCurrentTimerList = pxOverflowTimerList;
   1e77a:	4b09      	ldr	r3, [pc, #36]	; (1e7a0 <prvSwitchTimerLists+0xbc>)
   1e77c:	681a      	ldr	r2, [r3, #0]
   1e77e:	4b04      	ldr	r3, [pc, #16]	; (1e790 <prvSwitchTimerLists+0xac>)
   1e780:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
   1e782:	4b07      	ldr	r3, [pc, #28]	; (1e7a0 <prvSwitchTimerLists+0xbc>)
   1e784:	687a      	ldr	r2, [r7, #4]
   1e786:	601a      	str	r2, [r3, #0]
}
   1e788:	46c0      	nop			; (mov r8, r8)
   1e78a:	46bd      	mov	sp, r7
   1e78c:	b007      	add	sp, #28
   1e78e:	bd90      	pop	{r4, r7, pc}
   1e790:	20004208 	.word	0x20004208
   1e794:	0001ae0f 	.word	0x0001ae0f
   1e798:	0001ada3 	.word	0x0001ada3
   1e79c:	0001e2b9 	.word	0x0001e2b9
   1e7a0:	2000420c 	.word	0x2000420c

0001e7a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   1e7a4:	b580      	push	{r7, lr}
   1e7a6:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   1e7a8:	4b10      	ldr	r3, [pc, #64]	; (1e7ec <prvCheckForValidListAndQueue+0x48>)
   1e7aa:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   1e7ac:	4b10      	ldr	r3, [pc, #64]	; (1e7f0 <prvCheckForValidListAndQueue+0x4c>)
   1e7ae:	681b      	ldr	r3, [r3, #0]
   1e7b0:	2b00      	cmp	r3, #0
   1e7b2:	d115      	bne.n	1e7e0 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
   1e7b4:	4b0f      	ldr	r3, [pc, #60]	; (1e7f4 <prvCheckForValidListAndQueue+0x50>)
   1e7b6:	0018      	movs	r0, r3
   1e7b8:	4b0f      	ldr	r3, [pc, #60]	; (1e7f8 <prvCheckForValidListAndQueue+0x54>)
   1e7ba:	4798      	blx	r3
			vListInitialise( &xActiveTimerList2 );
   1e7bc:	4b0f      	ldr	r3, [pc, #60]	; (1e7fc <prvCheckForValidListAndQueue+0x58>)
   1e7be:	0018      	movs	r0, r3
   1e7c0:	4b0d      	ldr	r3, [pc, #52]	; (1e7f8 <prvCheckForValidListAndQueue+0x54>)
   1e7c2:	4798      	blx	r3
			pxCurrentTimerList = &xActiveTimerList1;
   1e7c4:	4b0e      	ldr	r3, [pc, #56]	; (1e800 <prvCheckForValidListAndQueue+0x5c>)
   1e7c6:	4a0b      	ldr	r2, [pc, #44]	; (1e7f4 <prvCheckForValidListAndQueue+0x50>)
   1e7c8:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   1e7ca:	4b0e      	ldr	r3, [pc, #56]	; (1e804 <prvCheckForValidListAndQueue+0x60>)
   1e7cc:	4a0b      	ldr	r2, [pc, #44]	; (1e7fc <prvCheckForValidListAndQueue+0x58>)
   1e7ce:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
   1e7d0:	2200      	movs	r2, #0
   1e7d2:	210c      	movs	r1, #12
   1e7d4:	2005      	movs	r0, #5
   1e7d6:	4b0c      	ldr	r3, [pc, #48]	; (1e808 <prvCheckForValidListAndQueue+0x64>)
   1e7d8:	4798      	blx	r3
   1e7da:	0002      	movs	r2, r0
   1e7dc:	4b04      	ldr	r3, [pc, #16]	; (1e7f0 <prvCheckForValidListAndQueue+0x4c>)
   1e7de:	601a      	str	r2, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
   1e7e0:	4b0a      	ldr	r3, [pc, #40]	; (1e80c <prvCheckForValidListAndQueue+0x68>)
   1e7e2:	4798      	blx	r3
}
   1e7e4:	46c0      	nop			; (mov r8, r8)
   1e7e6:	46bd      	mov	sp, r7
   1e7e8:	bd80      	pop	{r7, pc}
   1e7ea:	46c0      	nop			; (mov r8, r8)
   1e7ec:	0001af99 	.word	0x0001af99
   1e7f0:	20004210 	.word	0x20004210
   1e7f4:	200041e0 	.word	0x200041e0
   1e7f8:	0001ad0d 	.word	0x0001ad0d
   1e7fc:	200041f4 	.word	0x200041f4
   1e800:	20004208 	.word	0x20004208
   1e804:	2000420c 	.word	0x2000420c
   1e808:	0001b285 	.word	0x0001b285
   1e80c:	0001afbd 	.word	0x0001afbd

0001e810 <advance_pointer>:
 };

 #pragma mark - Private Functions -

 static void advance_pointer(cbuf_handle_t cbuf)
 {
   1e810:	b580      	push	{r7, lr}
   1e812:	b082      	sub	sp, #8
   1e814:	af00      	add	r7, sp, #0
   1e816:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 if(cbuf->full)
   1e818:	687b      	ldr	r3, [r7, #4]
   1e81a:	7c1b      	ldrb	r3, [r3, #16]
   1e81c:	2b00      	cmp	r3, #0
   1e81e:	d00b      	beq.n	1e838 <advance_pointer+0x28>
	 {
		 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1e820:	687b      	ldr	r3, [r7, #4]
   1e822:	689b      	ldr	r3, [r3, #8]
   1e824:	1c5a      	adds	r2, r3, #1
   1e826:	687b      	ldr	r3, [r7, #4]
   1e828:	68d9      	ldr	r1, [r3, #12]
   1e82a:	4b10      	ldr	r3, [pc, #64]	; (1e86c <advance_pointer+0x5c>)
   1e82c:	0010      	movs	r0, r2
   1e82e:	4798      	blx	r3
   1e830:	000b      	movs	r3, r1
   1e832:	001a      	movs	r2, r3
   1e834:	687b      	ldr	r3, [r7, #4]
   1e836:	609a      	str	r2, [r3, #8]
	 }

	 cbuf->head = (cbuf->head + 1) % cbuf->max;
   1e838:	687b      	ldr	r3, [r7, #4]
   1e83a:	685b      	ldr	r3, [r3, #4]
   1e83c:	1c5a      	adds	r2, r3, #1
   1e83e:	687b      	ldr	r3, [r7, #4]
   1e840:	68d9      	ldr	r1, [r3, #12]
   1e842:	4b0a      	ldr	r3, [pc, #40]	; (1e86c <advance_pointer+0x5c>)
   1e844:	0010      	movs	r0, r2
   1e846:	4798      	blx	r3
   1e848:	000b      	movs	r3, r1
   1e84a:	001a      	movs	r2, r3
   1e84c:	687b      	ldr	r3, [r7, #4]
   1e84e:	605a      	str	r2, [r3, #4]

	 // We mark full because we will advance tail on the next time around
	 cbuf->full = (cbuf->head == cbuf->tail);
   1e850:	687b      	ldr	r3, [r7, #4]
   1e852:	685a      	ldr	r2, [r3, #4]
   1e854:	687b      	ldr	r3, [r7, #4]
   1e856:	689b      	ldr	r3, [r3, #8]
   1e858:	1ad3      	subs	r3, r2, r3
   1e85a:	425a      	negs	r2, r3
   1e85c:	4153      	adcs	r3, r2
   1e85e:	b2da      	uxtb	r2, r3
   1e860:	687b      	ldr	r3, [r7, #4]
   1e862:	741a      	strb	r2, [r3, #16]
 }
   1e864:	46c0      	nop			; (mov r8, r8)
   1e866:	46bd      	mov	sp, r7
   1e868:	b002      	add	sp, #8
   1e86a:	bd80      	pop	{r7, pc}
   1e86c:	00033961 	.word	0x00033961

0001e870 <retreat_pointer>:

 static void retreat_pointer(cbuf_handle_t cbuf)
 {
   1e870:	b580      	push	{r7, lr}
   1e872:	b082      	sub	sp, #8
   1e874:	af00      	add	r7, sp, #0
   1e876:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 cbuf->full = false;
   1e878:	687b      	ldr	r3, [r7, #4]
   1e87a:	2200      	movs	r2, #0
   1e87c:	741a      	strb	r2, [r3, #16]
	 cbuf->tail = (cbuf->tail + 1) % cbuf->max;
   1e87e:	687b      	ldr	r3, [r7, #4]
   1e880:	689b      	ldr	r3, [r3, #8]
   1e882:	1c5a      	adds	r2, r3, #1
   1e884:	687b      	ldr	r3, [r7, #4]
   1e886:	68d9      	ldr	r1, [r3, #12]
   1e888:	4b05      	ldr	r3, [pc, #20]	; (1e8a0 <retreat_pointer+0x30>)
   1e88a:	0010      	movs	r0, r2
   1e88c:	4798      	blx	r3
   1e88e:	000b      	movs	r3, r1
   1e890:	001a      	movs	r2, r3
   1e892:	687b      	ldr	r3, [r7, #4]
   1e894:	609a      	str	r2, [r3, #8]
 }
   1e896:	46c0      	nop			; (mov r8, r8)
   1e898:	46bd      	mov	sp, r7
   1e89a:	b002      	add	sp, #8
   1e89c:	bd80      	pop	{r7, pc}
   1e89e:	46c0      	nop			; (mov r8, r8)
   1e8a0:	00033961 	.word	0x00033961

0001e8a4 <circular_buf_init>:

 #pragma mark - APIs -

 cbuf_handle_t circular_buf_init(uint8_t* buffer, size_t size)
 {
   1e8a4:	b580      	push	{r7, lr}
   1e8a6:	b084      	sub	sp, #16
   1e8a8:	af00      	add	r7, sp, #0
   1e8aa:	6078      	str	r0, [r7, #4]
   1e8ac:	6039      	str	r1, [r7, #0]
	// assert(buffer && size);

	 cbuf_handle_t cbuf = malloc(sizeof(circular_buf_t));
   1e8ae:	2014      	movs	r0, #20
   1e8b0:	4b09      	ldr	r3, [pc, #36]	; (1e8d8 <circular_buf_init+0x34>)
   1e8b2:	4798      	blx	r3
   1e8b4:	0003      	movs	r3, r0
   1e8b6:	60fb      	str	r3, [r7, #12]
	 //assert(cbuf);

	 cbuf->buffer = buffer;
   1e8b8:	68fb      	ldr	r3, [r7, #12]
   1e8ba:	687a      	ldr	r2, [r7, #4]
   1e8bc:	601a      	str	r2, [r3, #0]
	 cbuf->max = size;
   1e8be:	68fb      	ldr	r3, [r7, #12]
   1e8c0:	683a      	ldr	r2, [r7, #0]
   1e8c2:	60da      	str	r2, [r3, #12]
	 circular_buf_reset(cbuf);
   1e8c4:	68fb      	ldr	r3, [r7, #12]
   1e8c6:	0018      	movs	r0, r3
   1e8c8:	4b04      	ldr	r3, [pc, #16]	; (1e8dc <circular_buf_init+0x38>)
   1e8ca:	4798      	blx	r3

	// assert(circular_buf_empty(cbuf));

	 return cbuf;
   1e8cc:	68fb      	ldr	r3, [r7, #12]
 }
   1e8ce:	0018      	movs	r0, r3
   1e8d0:	46bd      	mov	sp, r7
   1e8d2:	b004      	add	sp, #16
   1e8d4:	bd80      	pop	{r7, pc}
   1e8d6:	46c0      	nop			; (mov r8, r8)
   1e8d8:	000357d1 	.word	0x000357d1
   1e8dc:	0001e8e1 	.word	0x0001e8e1

0001e8e0 <circular_buf_reset>:
	// assert(cbuf);
	 free(cbuf);
 }

 void circular_buf_reset(cbuf_handle_t cbuf)
 {
   1e8e0:	b580      	push	{r7, lr}
   1e8e2:	b082      	sub	sp, #8
   1e8e4:	af00      	add	r7, sp, #0
   1e8e6:	6078      	str	r0, [r7, #4]
	// assert(cbuf);

	 cbuf->head = 0;
   1e8e8:	687b      	ldr	r3, [r7, #4]
   1e8ea:	2200      	movs	r2, #0
   1e8ec:	605a      	str	r2, [r3, #4]
	 cbuf->tail = 0;
   1e8ee:	687b      	ldr	r3, [r7, #4]
   1e8f0:	2200      	movs	r2, #0
   1e8f2:	609a      	str	r2, [r3, #8]
	 cbuf->full = false;
   1e8f4:	687b      	ldr	r3, [r7, #4]
   1e8f6:	2200      	movs	r2, #0
   1e8f8:	741a      	strb	r2, [r3, #16]
 }
   1e8fa:	46c0      	nop			; (mov r8, r8)
   1e8fc:	46bd      	mov	sp, r7
   1e8fe:	b002      	add	sp, #8
   1e900:	bd80      	pop	{r7, pc}
	...

0001e904 <circular_buf_put>:

	 return cbuf->max;
 }

 void circular_buf_put(cbuf_handle_t cbuf, uint8_t data)
 {
   1e904:	b580      	push	{r7, lr}
   1e906:	b082      	sub	sp, #8
   1e908:	af00      	add	r7, sp, #0
   1e90a:	6078      	str	r0, [r7, #4]
   1e90c:	000a      	movs	r2, r1
   1e90e:	1cfb      	adds	r3, r7, #3
   1e910:	701a      	strb	r2, [r3, #0]
	 //assert(cbuf && cbuf->buffer);

	 cbuf->buffer[cbuf->head] = data;
   1e912:	687b      	ldr	r3, [r7, #4]
   1e914:	681a      	ldr	r2, [r3, #0]
   1e916:	687b      	ldr	r3, [r7, #4]
   1e918:	685b      	ldr	r3, [r3, #4]
   1e91a:	18d3      	adds	r3, r2, r3
   1e91c:	1cfa      	adds	r2, r7, #3
   1e91e:	7812      	ldrb	r2, [r2, #0]
   1e920:	701a      	strb	r2, [r3, #0]

	 advance_pointer(cbuf);
   1e922:	687b      	ldr	r3, [r7, #4]
   1e924:	0018      	movs	r0, r3
   1e926:	4b03      	ldr	r3, [pc, #12]	; (1e934 <circular_buf_put+0x30>)
   1e928:	4798      	blx	r3
 }
   1e92a:	46c0      	nop			; (mov r8, r8)
   1e92c:	46bd      	mov	sp, r7
   1e92e:	b002      	add	sp, #8
   1e930:	bd80      	pop	{r7, pc}
   1e932:	46c0      	nop			; (mov r8, r8)
   1e934:	0001e811 	.word	0x0001e811

0001e938 <circular_buf_get>:

	 return r;
 }

 int circular_buf_get(cbuf_handle_t cbuf, uint8_t * data)
 {
   1e938:	b580      	push	{r7, lr}
   1e93a:	b084      	sub	sp, #16
   1e93c:	af00      	add	r7, sp, #0
   1e93e:	6078      	str	r0, [r7, #4]
   1e940:	6039      	str	r1, [r7, #0]
	 //assert(cbuf && data && cbuf->buffer);
	 
	 int r = -1;
   1e942:	2301      	movs	r3, #1
   1e944:	425b      	negs	r3, r3
   1e946:	60fb      	str	r3, [r7, #12]

	 if(!circular_buf_empty(cbuf))
   1e948:	687b      	ldr	r3, [r7, #4]
   1e94a:	0018      	movs	r0, r3
   1e94c:	4b0d      	ldr	r3, [pc, #52]	; (1e984 <circular_buf_get+0x4c>)
   1e94e:	4798      	blx	r3
   1e950:	0003      	movs	r3, r0
   1e952:	001a      	movs	r2, r3
   1e954:	2301      	movs	r3, #1
   1e956:	4053      	eors	r3, r2
   1e958:	b2db      	uxtb	r3, r3
   1e95a:	2b00      	cmp	r3, #0
   1e95c:	d00d      	beq.n	1e97a <circular_buf_get+0x42>
	 {
		 *data = cbuf->buffer[cbuf->tail];
   1e95e:	687b      	ldr	r3, [r7, #4]
   1e960:	681a      	ldr	r2, [r3, #0]
   1e962:	687b      	ldr	r3, [r7, #4]
   1e964:	689b      	ldr	r3, [r3, #8]
   1e966:	18d3      	adds	r3, r2, r3
   1e968:	781a      	ldrb	r2, [r3, #0]
   1e96a:	683b      	ldr	r3, [r7, #0]
   1e96c:	701a      	strb	r2, [r3, #0]
		 retreat_pointer(cbuf);
   1e96e:	687b      	ldr	r3, [r7, #4]
   1e970:	0018      	movs	r0, r3
   1e972:	4b05      	ldr	r3, [pc, #20]	; (1e988 <circular_buf_get+0x50>)
   1e974:	4798      	blx	r3

		 r = 0;
   1e976:	2300      	movs	r3, #0
   1e978:	60fb      	str	r3, [r7, #12]
	 }

	 return r;
   1e97a:	68fb      	ldr	r3, [r7, #12]
 }
   1e97c:	0018      	movs	r0, r3
   1e97e:	46bd      	mov	sp, r7
   1e980:	b004      	add	sp, #16
   1e982:	bd80      	pop	{r7, pc}
   1e984:	0001e98d 	.word	0x0001e98d
   1e988:	0001e871 	.word	0x0001e871

0001e98c <circular_buf_empty>:

 bool circular_buf_empty(cbuf_handle_t cbuf)
 {
   1e98c:	b580      	push	{r7, lr}
   1e98e:	b082      	sub	sp, #8
   1e990:	af00      	add	r7, sp, #0
   1e992:	6078      	str	r0, [r7, #4]
	 //assert(cbuf);

	 return (!cbuf->full && (cbuf->head == cbuf->tail));
   1e994:	687b      	ldr	r3, [r7, #4]
   1e996:	7c1b      	ldrb	r3, [r3, #16]
   1e998:	2201      	movs	r2, #1
   1e99a:	4053      	eors	r3, r2
   1e99c:	b2db      	uxtb	r3, r3
   1e99e:	2b00      	cmp	r3, #0
   1e9a0:	d007      	beq.n	1e9b2 <circular_buf_empty+0x26>
   1e9a2:	687b      	ldr	r3, [r7, #4]
   1e9a4:	685a      	ldr	r2, [r3, #4]
   1e9a6:	687b      	ldr	r3, [r7, #4]
   1e9a8:	689b      	ldr	r3, [r3, #8]
   1e9aa:	429a      	cmp	r2, r3
   1e9ac:	d101      	bne.n	1e9b2 <circular_buf_empty+0x26>
   1e9ae:	2301      	movs	r3, #1
   1e9b0:	e000      	b.n	1e9b4 <circular_buf_empty+0x28>
   1e9b2:	2300      	movs	r3, #0
   1e9b4:	1c1a      	adds	r2, r3, #0
   1e9b6:	2301      	movs	r3, #1
   1e9b8:	4013      	ands	r3, r2
   1e9ba:	b2db      	uxtb	r3, r3
 }
   1e9bc:	0018      	movs	r0, r3
   1e9be:	46bd      	mov	sp, r7
   1e9c0:	b002      	add	sp, #8
   1e9c2:	bd80      	pop	{r7, pc}

0001e9c4 <system_interrupt_enable>:
{
   1e9c4:	b580      	push	{r7, lr}
   1e9c6:	b082      	sub	sp, #8
   1e9c8:	af00      	add	r7, sp, #0
   1e9ca:	0002      	movs	r2, r0
   1e9cc:	1dfb      	adds	r3, r7, #7
   1e9ce:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   1e9d0:	4b06      	ldr	r3, [pc, #24]	; (1e9ec <system_interrupt_enable+0x28>)
   1e9d2:	1dfa      	adds	r2, r7, #7
   1e9d4:	7812      	ldrb	r2, [r2, #0]
   1e9d6:	0011      	movs	r1, r2
   1e9d8:	221f      	movs	r2, #31
   1e9da:	400a      	ands	r2, r1
   1e9dc:	2101      	movs	r1, #1
   1e9de:	4091      	lsls	r1, r2
   1e9e0:	000a      	movs	r2, r1
   1e9e2:	601a      	str	r2, [r3, #0]
}
   1e9e4:	46c0      	nop			; (mov r8, r8)
   1e9e6:	46bd      	mov	sp, r7
   1e9e8:	b002      	add	sp, #8
   1e9ea:	bd80      	pop	{r7, pc}
   1e9ec:	e000e100 	.word	0xe000e100

0001e9f0 <usart_is_syncing>:
 * \retval false  Peripheral is not busy syncing and can be read/written without
 *                stalling the bus
 */
static inline bool usart_is_syncing(
		const struct usart_module *const module)
{
   1e9f0:	b580      	push	{r7, lr}
   1e9f2:	b084      	sub	sp, #16
   1e9f4:	af00      	add	r7, sp, #0
   1e9f6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
   1e9f8:	687b      	ldr	r3, [r7, #4]
   1e9fa:	681b      	ldr	r3, [r3, #0]
   1e9fc:	60fb      	str	r3, [r7, #12]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
   1e9fe:	68fb      	ldr	r3, [r7, #12]
   1ea00:	69db      	ldr	r3, [r3, #28]
   1ea02:	1e5a      	subs	r2, r3, #1
   1ea04:	4193      	sbcs	r3, r2
   1ea06:	b2db      	uxtb	r3, r3
#else
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
#endif
}
   1ea08:	0018      	movs	r0, r3
   1ea0a:	46bd      	mov	sp, r7
   1ea0c:	b004      	add	sp, #16
   1ea0e:	bd80      	pop	{r7, pc}

0001ea10 <_usart_wait_for_sync>:
 * \internal
 * Waits until synchronization is complete
 */
static inline void _usart_wait_for_sync(
		const struct usart_module *const module)
{
   1ea10:	b580      	push	{r7, lr}
   1ea12:	b082      	sub	sp, #8
   1ea14:	af00      	add	r7, sp, #0
   1ea16:	6078      	str	r0, [r7, #4]
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
   1ea18:	46c0      	nop			; (mov r8, r8)
   1ea1a:	687b      	ldr	r3, [r7, #4]
   1ea1c:	0018      	movs	r0, r3
   1ea1e:	4b04      	ldr	r3, [pc, #16]	; (1ea30 <_usart_wait_for_sync+0x20>)
   1ea20:	4798      	blx	r3
   1ea22:	1e03      	subs	r3, r0, #0
   1ea24:	d1f9      	bne.n	1ea1a <_usart_wait_for_sync+0xa>
		/* Wait until the synchronization is complete */
	}
}
   1ea26:	46c0      	nop			; (mov r8, r8)
   1ea28:	46bd      	mov	sp, r7
   1ea2a:	b002      	add	sp, #8
   1ea2c:	bd80      	pop	{r7, pc}
   1ea2e:	46c0      	nop			; (mov r8, r8)
   1ea30:	0001e9f1 	.word	0x0001e9f1

0001ea34 <usart_get_config_defaults>:
 *
 * \param[in,out] config  Pointer to configuration struct
 */
static inline void usart_get_config_defaults(
		struct usart_config *const config)
{
   1ea34:	b580      	push	{r7, lr}
   1ea36:	b082      	sub	sp, #8
   1ea38:	af00      	add	r7, sp, #0
   1ea3a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
   1ea3c:	687b      	ldr	r3, [r7, #4]
   1ea3e:	2280      	movs	r2, #128	; 0x80
   1ea40:	05d2      	lsls	r2, r2, #23
   1ea42:	601a      	str	r2, [r3, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
   1ea44:	687b      	ldr	r3, [r7, #4]
   1ea46:	2200      	movs	r2, #0
   1ea48:	605a      	str	r2, [r3, #4]
	config->parity           = USART_PARITY_NONE;
   1ea4a:	687b      	ldr	r3, [r7, #4]
   1ea4c:	22ff      	movs	r2, #255	; 0xff
   1ea4e:	811a      	strh	r2, [r3, #8]
	config->stopbits         = USART_STOPBITS_1;
   1ea50:	687b      	ldr	r3, [r7, #4]
   1ea52:	2200      	movs	r2, #0
   1ea54:	729a      	strb	r2, [r3, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
   1ea56:	687b      	ldr	r3, [r7, #4]
   1ea58:	2200      	movs	r2, #0
   1ea5a:	72da      	strb	r2, [r3, #11]
	config->baudrate         = 9600;
   1ea5c:	687b      	ldr	r3, [r7, #4]
   1ea5e:	2296      	movs	r2, #150	; 0x96
   1ea60:	0192      	lsls	r2, r2, #6
   1ea62:	621a      	str	r2, [r3, #32]
	config->receiver_enable  = true;
   1ea64:	687b      	ldr	r3, [r7, #4]
   1ea66:	2224      	movs	r2, #36	; 0x24
   1ea68:	2101      	movs	r1, #1
   1ea6a:	5499      	strb	r1, [r3, r2]
	config->transmitter_enable = true;
   1ea6c:	687b      	ldr	r3, [r7, #4]
   1ea6e:	2225      	movs	r2, #37	; 0x25
   1ea70:	2101      	movs	r1, #1
   1ea72:	5499      	strb	r1, [r3, r2]
	config->clock_polarity_inverted = false;
   1ea74:	687b      	ldr	r3, [r7, #4]
   1ea76:	2226      	movs	r2, #38	; 0x26
   1ea78:	2100      	movs	r1, #0
   1ea7a:	5499      	strb	r1, [r3, r2]
	config->use_external_clock = false;
   1ea7c:	687b      	ldr	r3, [r7, #4]
   1ea7e:	2227      	movs	r2, #39	; 0x27
   1ea80:	2100      	movs	r1, #0
   1ea82:	5499      	strb	r1, [r3, r2]
	config->ext_clock_freq   = 0;
   1ea84:	687b      	ldr	r3, [r7, #4]
   1ea86:	2200      	movs	r2, #0
   1ea88:	629a      	str	r2, [r3, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
   1ea8a:	687b      	ldr	r3, [r7, #4]
   1ea8c:	2288      	movs	r2, #136	; 0x88
   1ea8e:	0352      	lsls	r2, r2, #13
   1ea90:	60da      	str	r2, [r3, #12]
	config->run_in_standby   = false;
   1ea92:	687b      	ldr	r3, [r7, #4]
   1ea94:	222c      	movs	r2, #44	; 0x2c
   1ea96:	2100      	movs	r1, #0
   1ea98:	5499      	strb	r1, [r3, r2]
	config->generator_source = GCLK_GENERATOR_0;
   1ea9a:	687b      	ldr	r3, [r7, #4]
   1ea9c:	222d      	movs	r2, #45	; 0x2d
   1ea9e:	2100      	movs	r1, #0
   1eaa0:	5499      	strb	r1, [r3, r2]
	config->pinmux_pad0      = PINMUX_DEFAULT;
   1eaa2:	687b      	ldr	r3, [r7, #4]
   1eaa4:	2200      	movs	r2, #0
   1eaa6:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad1      = PINMUX_DEFAULT;
   1eaa8:	687b      	ldr	r3, [r7, #4]
   1eaaa:	2200      	movs	r2, #0
   1eaac:	635a      	str	r2, [r3, #52]	; 0x34
	config->pinmux_pad2      = PINMUX_DEFAULT;
   1eaae:	687b      	ldr	r3, [r7, #4]
   1eab0:	2200      	movs	r2, #0
   1eab2:	639a      	str	r2, [r3, #56]	; 0x38
	config->pinmux_pad3      = PINMUX_DEFAULT;
   1eab4:	687b      	ldr	r3, [r7, #4]
   1eab6:	2200      	movs	r2, #0
   1eab8:	63da      	str	r2, [r3, #60]	; 0x3c
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
   1eaba:	687b      	ldr	r3, [r7, #4]
   1eabc:	2200      	movs	r2, #0
   1eabe:	615a      	str	r2, [r3, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
   1eac0:	687b      	ldr	r3, [r7, #4]
   1eac2:	2200      	movs	r2, #0
   1eac4:	821a      	strh	r2, [r3, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
   1eac6:	687b      	ldr	r3, [r7, #4]
   1eac8:	2200      	movs	r2, #0
   1eaca:	76da      	strb	r2, [r3, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
   1eacc:	687b      	ldr	r3, [r7, #4]
   1eace:	2200      	movs	r2, #0
   1ead0:	761a      	strb	r2, [r3, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
   1ead2:	687b      	ldr	r3, [r7, #4]
   1ead4:	2200      	movs	r2, #0
   1ead6:	771a      	strb	r2, [r3, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
   1ead8:	687b      	ldr	r3, [r7, #4]
   1eada:	2200      	movs	r2, #0
   1eadc:	765a      	strb	r2, [r3, #25]
	config->receive_pulse_length                    = 19;
   1eade:	687b      	ldr	r3, [r7, #4]
   1eae0:	2213      	movs	r2, #19
   1eae2:	769a      	strb	r2, [r3, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
   1eae4:	687b      	ldr	r3, [r7, #4]
   1eae6:	2200      	movs	r2, #0
   1eae8:	775a      	strb	r2, [r3, #29]
#endif
#ifdef FEATURE_USART_RS485
	config->rs485_guard_time = RS485_GUARD_TIME_0_BIT;
#endif
}
   1eaea:	46c0      	nop			; (mov r8, r8)
   1eaec:	46bd      	mov	sp, r7
   1eaee:	b002      	add	sp, #8
   1eaf0:	bd80      	pop	{r7, pc}
	...

0001eaf4 <usart_enable>:
 *
 * \param[in]  module  Pointer to USART software instance struct
 */
static inline void usart_enable(
		const struct usart_module *const module)
{
   1eaf4:	b580      	push	{r7, lr}
   1eaf6:	b084      	sub	sp, #16
   1eaf8:	af00      	add	r7, sp, #0
   1eafa:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   1eafc:	687b      	ldr	r3, [r7, #4]
   1eafe:	681b      	ldr	r3, [r3, #0]
   1eb00:	60fb      	str	r3, [r7, #12]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   1eb02:	687b      	ldr	r3, [r7, #4]
   1eb04:	681b      	ldr	r3, [r3, #0]
   1eb06:	0018      	movs	r0, r3
   1eb08:	4b09      	ldr	r3, [pc, #36]	; (1eb30 <usart_enable+0x3c>)
   1eb0a:	4798      	blx	r3
   1eb0c:	0003      	movs	r3, r0
   1eb0e:	0018      	movs	r0, r3
   1eb10:	4b08      	ldr	r3, [pc, #32]	; (1eb34 <usart_enable+0x40>)
   1eb12:	4798      	blx	r3
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   1eb14:	687b      	ldr	r3, [r7, #4]
   1eb16:	0018      	movs	r0, r3
   1eb18:	4b07      	ldr	r3, [pc, #28]	; (1eb38 <usart_enable+0x44>)
   1eb1a:	4798      	blx	r3

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
   1eb1c:	68fb      	ldr	r3, [r7, #12]
   1eb1e:	681b      	ldr	r3, [r3, #0]
   1eb20:	2202      	movs	r2, #2
   1eb22:	431a      	orrs	r2, r3
   1eb24:	68fb      	ldr	r3, [r7, #12]
   1eb26:	601a      	str	r2, [r3, #0]
}
   1eb28:	46c0      	nop			; (mov r8, r8)
   1eb2a:	46bd      	mov	sp, r7
   1eb2c:	b004      	add	sp, #16
   1eb2e:	bd80      	pop	{r7, pc}
   1eb30:	000284f9 	.word	0x000284f9
   1eb34:	0001e9c5 	.word	0x0001e9c5
   1eb38:	0001ea11 	.word	0x0001ea11

0001eb3c <usart_enable_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 */
static inline void usart_enable_callback(
		struct usart_module *const module,
		enum usart_callback callback_type)
{
   1eb3c:	b580      	push	{r7, lr}
   1eb3e:	b082      	sub	sp, #8
   1eb40:	af00      	add	r7, sp, #0
   1eb42:	6078      	str	r0, [r7, #4]
   1eb44:	000a      	movs	r2, r1
   1eb46:	1cfb      	adds	r3, r7, #3
   1eb48:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
   1eb4a:	687b      	ldr	r3, [r7, #4]
   1eb4c:	2231      	movs	r2, #49	; 0x31
   1eb4e:	5c9b      	ldrb	r3, [r3, r2]
   1eb50:	b25a      	sxtb	r2, r3
   1eb52:	1cfb      	adds	r3, r7, #3
   1eb54:	781b      	ldrb	r3, [r3, #0]
   1eb56:	2101      	movs	r1, #1
   1eb58:	4099      	lsls	r1, r3
   1eb5a:	000b      	movs	r3, r1
   1eb5c:	b25b      	sxtb	r3, r3
   1eb5e:	4313      	orrs	r3, r2
   1eb60:	b25b      	sxtb	r3, r3
   1eb62:	b2d9      	uxtb	r1, r3
   1eb64:	687b      	ldr	r3, [r7, #4]
   1eb66:	2231      	movs	r2, #49	; 0x31
   1eb68:	5499      	strb	r1, [r3, r2]

}
   1eb6a:	46c0      	nop			; (mov r8, r8)
   1eb6c:	46bd      	mov	sp, r7
   1eb6e:	b002      	add	sp, #8
   1eb70:	bd80      	pop	{r7, pc}
	...

0001eb74 <InitializeSerialConsole>:
 *				asynchronous reads and writes.
 * @note			Call from main once to initialize Hardware.
 */

void InitializeSerialConsole(void)
{
   1eb74:	b580      	push	{r7, lr}
   1eb76:	af00      	add	r7, sp, #0
    // Initialize circular buffers for RX and TX
    cbufRx = circular_buf_init((uint8_t *)rxCharacterBuffer, RX_BUFFER_SIZE);
   1eb78:	2380      	movs	r3, #128	; 0x80
   1eb7a:	009a      	lsls	r2, r3, #2
   1eb7c:	4b0f      	ldr	r3, [pc, #60]	; (1ebbc <InitializeSerialConsole+0x48>)
   1eb7e:	0011      	movs	r1, r2
   1eb80:	0018      	movs	r0, r3
   1eb82:	4b0f      	ldr	r3, [pc, #60]	; (1ebc0 <InitializeSerialConsole+0x4c>)
   1eb84:	4798      	blx	r3
   1eb86:	0002      	movs	r2, r0
   1eb88:	4b0e      	ldr	r3, [pc, #56]	; (1ebc4 <InitializeSerialConsole+0x50>)
   1eb8a:	601a      	str	r2, [r3, #0]
    cbufTx = circular_buf_init((uint8_t *)txCharacterBuffer, RX_BUFFER_SIZE);
   1eb8c:	2380      	movs	r3, #128	; 0x80
   1eb8e:	009a      	lsls	r2, r3, #2
   1eb90:	4b0d      	ldr	r3, [pc, #52]	; (1ebc8 <InitializeSerialConsole+0x54>)
   1eb92:	0011      	movs	r1, r2
   1eb94:	0018      	movs	r0, r3
   1eb96:	4b0a      	ldr	r3, [pc, #40]	; (1ebc0 <InitializeSerialConsole+0x4c>)
   1eb98:	4798      	blx	r3
   1eb9a:	0002      	movs	r2, r0
   1eb9c:	4b0b      	ldr	r3, [pc, #44]	; (1ebcc <InitializeSerialConsole+0x58>)
   1eb9e:	601a      	str	r2, [r3, #0]

    // Configure USART and Callbacks
    configure_usart();
   1eba0:	4b0b      	ldr	r3, [pc, #44]	; (1ebd0 <InitializeSerialConsole+0x5c>)
   1eba2:	4798      	blx	r3
    configure_usart_callbacks();
   1eba4:	4b0b      	ldr	r3, [pc, #44]	; (1ebd4 <InitializeSerialConsole+0x60>)
   1eba6:	4798      	blx	r3

    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Kicks off constant reading of characters
   1eba8:	490b      	ldr	r1, [pc, #44]	; (1ebd8 <InitializeSerialConsole+0x64>)
   1ebaa:	4b0c      	ldr	r3, [pc, #48]	; (1ebdc <InitializeSerialConsole+0x68>)
   1ebac:	2201      	movs	r2, #1
   1ebae:	0018      	movs	r0, r3
   1ebb0:	4b0b      	ldr	r3, [pc, #44]	; (1ebe0 <InitializeSerialConsole+0x6c>)
   1ebb2:	4798      	blx	r3

    // Add any other calls you need to do to initialize your Serial Console
}
   1ebb4:	46c0      	nop			; (mov r8, r8)
   1ebb6:	46bd      	mov	sp, r7
   1ebb8:	bd80      	pop	{r7, pc}
   1ebba:	46c0      	nop			; (mov r8, r8)
   1ebbc:	200058dc 	.word	0x200058dc
   1ebc0:	0001e8a5 	.word	0x0001e8a5
   1ebc4:	200056d4 	.word	0x200056d4
   1ebc8:	200056dc 	.word	0x200056dc
   1ebcc:	20005ae0 	.word	0x20005ae0
   1ebd0:	0001ed49 	.word	0x0001ed49
   1ebd4:	0001edc1 	.word	0x0001edc1
   1ebd8:	200056d8 	.word	0x200056d8
   1ebdc:	200056a0 	.word	0x200056a0
   1ebe0:	00029da1 	.word	0x00029da1

0001ebe4 <SerialConsoleWriteString>:
 * @details		Uses the ringbuffer 'cbufTx', which in turn uses the array 'txCharacterBuffer'. Modified to be
 *thread safe.
 * @note			Use to send a string of characters to the user via UART
 */
void SerialConsoleWriteString(const char *string)
{
   1ebe4:	b580      	push	{r7, lr}
   1ebe6:	b084      	sub	sp, #16
   1ebe8:	af00      	add	r7, sp, #0
   1ebea:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1ebec:	4b1a      	ldr	r3, [pc, #104]	; (1ec58 <SerialConsoleWriteString+0x74>)
   1ebee:	4798      	blx	r3
    if (string != NULL) {
   1ebf0:	687b      	ldr	r3, [r7, #4]
   1ebf2:	2b00      	cmp	r3, #0
   1ebf4:	d02a      	beq.n	1ec4c <SerialConsoleWriteString+0x68>
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1ebf6:	2300      	movs	r3, #0
   1ebf8:	60fb      	str	r3, [r7, #12]
   1ebfa:	e00b      	b.n	1ec14 <SerialConsoleWriteString+0x30>
            circular_buf_put(cbufTx, string[iter]);
   1ebfc:	4b17      	ldr	r3, [pc, #92]	; (1ec5c <SerialConsoleWriteString+0x78>)
   1ebfe:	6818      	ldr	r0, [r3, #0]
   1ec00:	687a      	ldr	r2, [r7, #4]
   1ec02:	68fb      	ldr	r3, [r7, #12]
   1ec04:	18d3      	adds	r3, r2, r3
   1ec06:	781b      	ldrb	r3, [r3, #0]
   1ec08:	0019      	movs	r1, r3
   1ec0a:	4b15      	ldr	r3, [pc, #84]	; (1ec60 <SerialConsoleWriteString+0x7c>)
   1ec0c:	4798      	blx	r3
        for (size_t iter = 0; iter < strlen(string); iter++) {
   1ec0e:	68fb      	ldr	r3, [r7, #12]
   1ec10:	3301      	adds	r3, #1
   1ec12:	60fb      	str	r3, [r7, #12]
   1ec14:	687b      	ldr	r3, [r7, #4]
   1ec16:	0018      	movs	r0, r3
   1ec18:	4b12      	ldr	r3, [pc, #72]	; (1ec64 <SerialConsoleWriteString+0x80>)
   1ec1a:	4798      	blx	r3
   1ec1c:	0002      	movs	r2, r0
   1ec1e:	68fb      	ldr	r3, [r7, #12]
   1ec20:	429a      	cmp	r2, r3
   1ec22:	d8eb      	bhi.n	1ebfc <SerialConsoleWriteString+0x18>
        }

        if (usart_get_job_status(&usart_instance, USART_TRANSCEIVER_TX) == STATUS_OK) {
   1ec24:	4b10      	ldr	r3, [pc, #64]	; (1ec68 <SerialConsoleWriteString+0x84>)
   1ec26:	2101      	movs	r1, #1
   1ec28:	0018      	movs	r0, r3
   1ec2a:	4b10      	ldr	r3, [pc, #64]	; (1ec6c <SerialConsoleWriteString+0x88>)
   1ec2c:	4798      	blx	r3
   1ec2e:	1e03      	subs	r3, r0, #0
   1ec30:	d10c      	bne.n	1ec4c <SerialConsoleWriteString+0x68>
            circular_buf_get(cbufTx, (uint8_t *)&latestTx);  // Perform only if the SERCOM TX is free (not busy)
   1ec32:	4b0a      	ldr	r3, [pc, #40]	; (1ec5c <SerialConsoleWriteString+0x78>)
   1ec34:	681b      	ldr	r3, [r3, #0]
   1ec36:	4a0e      	ldr	r2, [pc, #56]	; (1ec70 <SerialConsoleWriteString+0x8c>)
   1ec38:	0011      	movs	r1, r2
   1ec3a:	0018      	movs	r0, r3
   1ec3c:	4b0d      	ldr	r3, [pc, #52]	; (1ec74 <SerialConsoleWriteString+0x90>)
   1ec3e:	4798      	blx	r3
            usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1ec40:	490b      	ldr	r1, [pc, #44]	; (1ec70 <SerialConsoleWriteString+0x8c>)
   1ec42:	4b09      	ldr	r3, [pc, #36]	; (1ec68 <SerialConsoleWriteString+0x84>)
   1ec44:	2201      	movs	r2, #1
   1ec46:	0018      	movs	r0, r3
   1ec48:	4b0b      	ldr	r3, [pc, #44]	; (1ec78 <SerialConsoleWriteString+0x94>)
   1ec4a:	4798      	blx	r3
        }
    }
    xTaskResumeAll();
   1ec4c:	4b0b      	ldr	r3, [pc, #44]	; (1ec7c <SerialConsoleWriteString+0x98>)
   1ec4e:	4798      	blx	r3
}
   1ec50:	46c0      	nop			; (mov r8, r8)
   1ec52:	46bd      	mov	sp, r7
   1ec54:	b004      	add	sp, #16
   1ec56:	bd80      	pop	{r7, pc}
   1ec58:	0001d251 	.word	0x0001d251
   1ec5c:	20005ae0 	.word	0x20005ae0
   1ec60:	0001e905 	.word	0x0001e905
   1ec64:	00035be7 	.word	0x00035be7
   1ec68:	200056a0 	.word	0x200056a0
   1ec6c:	00029de9 	.word	0x00029de9
   1ec70:	20005adc 	.word	0x20005adc
   1ec74:	0001e939 	.word	0x0001e939
   1ec78:	00029d59 	.word	0x00029d59
   1ec7c:	0001d269 	.word	0x0001d269

0001ec80 <SerialConsoleReadCharacter>:
 * @param[in]	Pointer to a character. This function will return the character from the RX buffer into this pointer
 * @return		Returns -1 if there are no characters in the buffer
 * @note			Use to receive characters from the RX buffer (FIFO)
 */
int SerialConsoleReadCharacter(uint8_t *rxChar)
{
   1ec80:	b580      	push	{r7, lr}
   1ec82:	b084      	sub	sp, #16
   1ec84:	af00      	add	r7, sp, #0
   1ec86:	6078      	str	r0, [r7, #4]
    vTaskSuspendAll();
   1ec88:	4b08      	ldr	r3, [pc, #32]	; (1ecac <SerialConsoleReadCharacter+0x2c>)
   1ec8a:	4798      	blx	r3
    int a = circular_buf_get(cbufRx, (uint8_t *)rxChar);
   1ec8c:	4b08      	ldr	r3, [pc, #32]	; (1ecb0 <SerialConsoleReadCharacter+0x30>)
   1ec8e:	681b      	ldr	r3, [r3, #0]
   1ec90:	687a      	ldr	r2, [r7, #4]
   1ec92:	0011      	movs	r1, r2
   1ec94:	0018      	movs	r0, r3
   1ec96:	4b07      	ldr	r3, [pc, #28]	; (1ecb4 <SerialConsoleReadCharacter+0x34>)
   1ec98:	4798      	blx	r3
   1ec9a:	0003      	movs	r3, r0
   1ec9c:	60fb      	str	r3, [r7, #12]
    xTaskResumeAll();
   1ec9e:	4b06      	ldr	r3, [pc, #24]	; (1ecb8 <SerialConsoleReadCharacter+0x38>)
   1eca0:	4798      	blx	r3
    return a;
   1eca2:	68fb      	ldr	r3, [r7, #12]
}
   1eca4:	0018      	movs	r0, r3
   1eca6:	46bd      	mov	sp, r7
   1eca8:	b004      	add	sp, #16
   1ecaa:	bd80      	pop	{r7, pc}
   1ecac:	0001d251 	.word	0x0001d251
   1ecb0:	200056d4 	.word	0x200056d4
   1ecb4:	0001e939 	.word	0x0001e939
   1ecb8:	0001d269 	.word	0x0001d269

0001ecbc <getLogLevel>:
 * @return		Returns the current debug level of the system.
 * @note
 */

enum eDebugLogLevels getLogLevel(void)
{
   1ecbc:	b580      	push	{r7, lr}
   1ecbe:	af00      	add	r7, sp, #0
    return currentDebugLevel;
   1ecc0:	4b02      	ldr	r3, [pc, #8]	; (1eccc <getLogLevel+0x10>)
   1ecc2:	781b      	ldrb	r3, [r3, #0]
}
   1ecc4:	0018      	movs	r0, r3
   1ecc6:	46bd      	mov	sp, r7
   1ecc8:	bd80      	pop	{r7, pc}
   1ecca:	46c0      	nop			; (mov r8, r8)
   1eccc:	2000421c 	.word	0x2000421c

0001ecd0 <LogMessage>:
 * @fn			LogMessage
 * @brief
 * @note
 */
void LogMessage(enum eDebugLogLevels level, const char *format, ...)
{
   1ecd0:	b40e      	push	{r1, r2, r3}
   1ecd2:	b590      	push	{r4, r7, lr}
   1ecd4:	b084      	sub	sp, #16
   1ecd6:	af00      	add	r7, sp, #0
   1ecd8:	0002      	movs	r2, r0
   1ecda:	1dfb      	adds	r3, r7, #7
   1ecdc:	701a      	strb	r2, [r3, #0]
    if (getLogLevel() <= level) {
   1ecde:	4b0e      	ldr	r3, [pc, #56]	; (1ed18 <LogMessage+0x48>)
   1ece0:	4798      	blx	r3
   1ece2:	0003      	movs	r3, r0
   1ece4:	001a      	movs	r2, r3
   1ece6:	1dfb      	adds	r3, r7, #7
   1ece8:	781b      	ldrb	r3, [r3, #0]
   1ecea:	4293      	cmp	r3, r2
   1ecec:	d30c      	bcc.n	1ed08 <LogMessage+0x38>
        va_list ap;
        va_start(ap, format);
   1ecee:	2320      	movs	r3, #32
   1ecf0:	18fb      	adds	r3, r7, r3
   1ecf2:	60fb      	str	r3, [r7, #12]
        vsnprintf(debugBuffer, 127, format, ap);
   1ecf4:	68fb      	ldr	r3, [r7, #12]
   1ecf6:	69fa      	ldr	r2, [r7, #28]
   1ecf8:	4808      	ldr	r0, [pc, #32]	; (1ed1c <LogMessage+0x4c>)
   1ecfa:	217f      	movs	r1, #127	; 0x7f
   1ecfc:	4c08      	ldr	r4, [pc, #32]	; (1ed20 <LogMessage+0x50>)
   1ecfe:	47a0      	blx	r4
        SerialConsoleWriteString(debugBuffer);
   1ed00:	4b06      	ldr	r3, [pc, #24]	; (1ed1c <LogMessage+0x4c>)
   1ed02:	0018      	movs	r0, r3
   1ed04:	4b07      	ldr	r3, [pc, #28]	; (1ed24 <LogMessage+0x54>)
   1ed06:	4798      	blx	r3
        va_end(ap);
    }
};
   1ed08:	46c0      	nop			; (mov r8, r8)
   1ed0a:	46bd      	mov	sp, r7
   1ed0c:	b004      	add	sp, #16
   1ed0e:	bc90      	pop	{r4, r7}
   1ed10:	bc08      	pop	{r3}
   1ed12:	b003      	add	sp, #12
   1ed14:	4718      	bx	r3
   1ed16:	46c0      	nop			; (mov r8, r8)
   1ed18:	0001ecbd 	.word	0x0001ecbd
   1ed1c:	20005620 	.word	0x20005620
   1ed20:	00035e21 	.word	0x00035e21
   1ed24:	0001ebe5 	.word	0x0001ebe5

0001ed28 <LogMessageDebug>:
 * @fn			LogMessage Debug
 * @brief
 * @note
 */
void LogMessageDebug(const char *format, ...)
{
   1ed28:	b40f      	push	{r0, r1, r2, r3}
   1ed2a:	b580      	push	{r7, lr}
   1ed2c:	af00      	add	r7, sp, #0
    LogMessage(LOG_DEBUG_LVL, format);
   1ed2e:	68bb      	ldr	r3, [r7, #8]
   1ed30:	0019      	movs	r1, r3
   1ed32:	2001      	movs	r0, #1
   1ed34:	4b03      	ldr	r3, [pc, #12]	; (1ed44 <LogMessageDebug+0x1c>)
   1ed36:	4798      	blx	r3
};
   1ed38:	46c0      	nop			; (mov r8, r8)
   1ed3a:	46bd      	mov	sp, r7
   1ed3c:	bc80      	pop	{r7}
   1ed3e:	bc08      	pop	{r3}
   1ed40:	b004      	add	sp, #16
   1ed42:	4718      	bx	r3
   1ed44:	0001ecd1 	.word	0x0001ecd1

0001ed48 <configure_usart>:
 * @fn			static void configure_usart(void)
 * @brief		Code to configure the SERCOM "EDBG_CDC_MODULE" to be a UART channel running at 115200 8N1
 * @note
 */
static void configure_usart(void)
{
   1ed48:	b580      	push	{r7, lr}
   1ed4a:	b090      	sub	sp, #64	; 0x40
   1ed4c:	af00      	add	r7, sp, #0
    struct usart_config config_usart;
    usart_get_config_defaults(&config_usart);
   1ed4e:	003b      	movs	r3, r7
   1ed50:	0018      	movs	r0, r3
   1ed52:	4b14      	ldr	r3, [pc, #80]	; (1eda4 <configure_usart+0x5c>)
   1ed54:	4798      	blx	r3

    config_usart.baudrate = 115200;
   1ed56:	003b      	movs	r3, r7
   1ed58:	22e1      	movs	r2, #225	; 0xe1
   1ed5a:	0252      	lsls	r2, r2, #9
   1ed5c:	621a      	str	r2, [r3, #32]
    config_usart.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
   1ed5e:	003b      	movs	r3, r7
   1ed60:	22c4      	movs	r2, #196	; 0xc4
   1ed62:	0392      	lsls	r2, r2, #14
   1ed64:	60da      	str	r2, [r3, #12]
    config_usart.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
   1ed66:	003b      	movs	r3, r7
   1ed68:	2201      	movs	r2, #1
   1ed6a:	4252      	negs	r2, r2
   1ed6c:	631a      	str	r2, [r3, #48]	; 0x30
    config_usart.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
   1ed6e:	003b      	movs	r3, r7
   1ed70:	2201      	movs	r2, #1
   1ed72:	4252      	negs	r2, r2
   1ed74:	635a      	str	r2, [r3, #52]	; 0x34
    config_usart.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
   1ed76:	003b      	movs	r3, r7
   1ed78:	4a0b      	ldr	r2, [pc, #44]	; (1eda8 <configure_usart+0x60>)
   1ed7a:	639a      	str	r2, [r3, #56]	; 0x38
    config_usart.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
   1ed7c:	003b      	movs	r3, r7
   1ed7e:	4a0b      	ldr	r2, [pc, #44]	; (1edac <configure_usart+0x64>)
   1ed80:	63da      	str	r2, [r3, #60]	; 0x3c
    while (usart_init(&usart_instance, EDBG_CDC_MODULE, &config_usart) != STATUS_OK) {
   1ed82:	46c0      	nop			; (mov r8, r8)
   1ed84:	003a      	movs	r2, r7
   1ed86:	490a      	ldr	r1, [pc, #40]	; (1edb0 <configure_usart+0x68>)
   1ed88:	4b0a      	ldr	r3, [pc, #40]	; (1edb4 <configure_usart+0x6c>)
   1ed8a:	0018      	movs	r0, r3
   1ed8c:	4b0a      	ldr	r3, [pc, #40]	; (1edb8 <configure_usart+0x70>)
   1ed8e:	4798      	blx	r3
   1ed90:	1e03      	subs	r3, r0, #0
   1ed92:	d1f7      	bne.n	1ed84 <configure_usart+0x3c>
    }

    usart_enable(&usart_instance);
   1ed94:	4b07      	ldr	r3, [pc, #28]	; (1edb4 <configure_usart+0x6c>)
   1ed96:	0018      	movs	r0, r3
   1ed98:	4b08      	ldr	r3, [pc, #32]	; (1edbc <configure_usart+0x74>)
   1ed9a:	4798      	blx	r3
}
   1ed9c:	46c0      	nop			; (mov r8, r8)
   1ed9e:	46bd      	mov	sp, r7
   1eda0:	b010      	add	sp, #64	; 0x40
   1eda2:	bd80      	pop	{r7, pc}
   1eda4:	0001ea35 	.word	0x0001ea35
   1eda8:	002a0003 	.word	0x002a0003
   1edac:	002b0003 	.word	0x002b0003
   1edb0:	42001800 	.word	0x42001800
   1edb4:	200056a0 	.word	0x200056a0
   1edb8:	0002995d 	.word	0x0002995d
   1edbc:	0001eaf5 	.word	0x0001eaf5

0001edc0 <configure_usart_callbacks>:
 * @fn			static void configure_usart_callbacks(void)
 * @brief		Code to register callbacks
 * @note
 */
static void configure_usart_callbacks(void)
{
   1edc0:	b580      	push	{r7, lr}
   1edc2:	af00      	add	r7, sp, #0
    usart_register_callback(&usart_instance, usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
   1edc4:	490c      	ldr	r1, [pc, #48]	; (1edf8 <configure_usart_callbacks+0x38>)
   1edc6:	4b0d      	ldr	r3, [pc, #52]	; (1edfc <configure_usart_callbacks+0x3c>)
   1edc8:	2200      	movs	r2, #0
   1edca:	0018      	movs	r0, r3
   1edcc:	4b0c      	ldr	r3, [pc, #48]	; (1ee00 <configure_usart_callbacks+0x40>)
   1edce:	4798      	blx	r3
    usart_register_callback(&usart_instance, usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
   1edd0:	490c      	ldr	r1, [pc, #48]	; (1ee04 <configure_usart_callbacks+0x44>)
   1edd2:	4b0a      	ldr	r3, [pc, #40]	; (1edfc <configure_usart_callbacks+0x3c>)
   1edd4:	2201      	movs	r2, #1
   1edd6:	0018      	movs	r0, r3
   1edd8:	4b09      	ldr	r3, [pc, #36]	; (1ee00 <configure_usart_callbacks+0x40>)
   1edda:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_TRANSMITTED);
   1eddc:	4b07      	ldr	r3, [pc, #28]	; (1edfc <configure_usart_callbacks+0x3c>)
   1edde:	2100      	movs	r1, #0
   1ede0:	0018      	movs	r0, r3
   1ede2:	4b09      	ldr	r3, [pc, #36]	; (1ee08 <configure_usart_callbacks+0x48>)
   1ede4:	4798      	blx	r3
    usart_enable_callback(&usart_instance, USART_CALLBACK_BUFFER_RECEIVED);
   1ede6:	4b05      	ldr	r3, [pc, #20]	; (1edfc <configure_usart_callbacks+0x3c>)
   1ede8:	2101      	movs	r1, #1
   1edea:	0018      	movs	r0, r3
   1edec:	4b06      	ldr	r3, [pc, #24]	; (1ee08 <configure_usart_callbacks+0x48>)
   1edee:	4798      	blx	r3
}
   1edf0:	46c0      	nop			; (mov r8, r8)
   1edf2:	46bd      	mov	sp, r7
   1edf4:	bd80      	pop	{r7, pc}
   1edf6:	46c0      	nop			; (mov r8, r8)
   1edf8:	0001ee55 	.word	0x0001ee55
   1edfc:	200056a0 	.word	0x200056a0
   1ee00:	00029d11 	.word	0x00029d11
   1ee04:	0001ee0d 	.word	0x0001ee0d
   1ee08:	0001eb3d 	.word	0x0001eb3d

0001ee0c <usart_read_callback>:
 * @fn			void usart_read_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes receives all the bytes requested from a UART read job
 * @note
 */
void usart_read_callback(struct usart_module *const usart_module)
{
   1ee0c:	b580      	push	{r7, lr}
   1ee0e:	b082      	sub	sp, #8
   1ee10:	af00      	add	r7, sp, #0
   1ee12:	6078      	str	r0, [r7, #4]
    circular_buf_put(cbufRx, (uint8_t)latestRx);                      // Add the latest read character into the RX circular Buffer
   1ee14:	4b09      	ldr	r3, [pc, #36]	; (1ee3c <usart_read_callback+0x30>)
   1ee16:	681a      	ldr	r2, [r3, #0]
   1ee18:	4b09      	ldr	r3, [pc, #36]	; (1ee40 <usart_read_callback+0x34>)
   1ee1a:	781b      	ldrb	r3, [r3, #0]
   1ee1c:	0019      	movs	r1, r3
   1ee1e:	0010      	movs	r0, r2
   1ee20:	4b08      	ldr	r3, [pc, #32]	; (1ee44 <usart_read_callback+0x38>)
   1ee22:	4798      	blx	r3
    usart_read_buffer_job(&usart_instance, (uint8_t *)&latestRx, 1);  // Order the MCU to keep reading
   1ee24:	4906      	ldr	r1, [pc, #24]	; (1ee40 <usart_read_callback+0x34>)
   1ee26:	4b08      	ldr	r3, [pc, #32]	; (1ee48 <usart_read_callback+0x3c>)
   1ee28:	2201      	movs	r2, #1
   1ee2a:	0018      	movs	r0, r3
   1ee2c:	4b07      	ldr	r3, [pc, #28]	; (1ee4c <usart_read_callback+0x40>)
   1ee2e:	4798      	blx	r3
    CliCharReadySemaphoreGiveFromISR();                               // Give binary semaphore
   1ee30:	4b07      	ldr	r3, [pc, #28]	; (1ee50 <usart_read_callback+0x44>)
   1ee32:	4798      	blx	r3
}
   1ee34:	46c0      	nop			; (mov r8, r8)
   1ee36:	46bd      	mov	sp, r7
   1ee38:	b002      	add	sp, #8
   1ee3a:	bd80      	pop	{r7, pc}
   1ee3c:	200056d4 	.word	0x200056d4
   1ee40:	200056d8 	.word	0x200056d8
   1ee44:	0001e905 	.word	0x0001e905
   1ee48:	200056a0 	.word	0x200056a0
   1ee4c:	00029da1 	.word	0x00029da1
   1ee50:	000142c9 	.word	0x000142c9

0001ee54 <usart_write_callback>:
 * @fn			void usart_write_callback(struct usart_module *const usart_module)
 * @brief		Callback called when the system finishes sending all the bytes requested from a UART read job
 * @note
 */
void usart_write_callback(struct usart_module *const usart_module)
{
   1ee54:	b580      	push	{r7, lr}
   1ee56:	b082      	sub	sp, #8
   1ee58:	af00      	add	r7, sp, #0
   1ee5a:	6078      	str	r0, [r7, #4]
    if (circular_buf_get(cbufTx, (uint8_t *)&latestTx) != -1)  // Only continue if there are more characters to send
   1ee5c:	4b09      	ldr	r3, [pc, #36]	; (1ee84 <usart_write_callback+0x30>)
   1ee5e:	681b      	ldr	r3, [r3, #0]
   1ee60:	4a09      	ldr	r2, [pc, #36]	; (1ee88 <usart_write_callback+0x34>)
   1ee62:	0011      	movs	r1, r2
   1ee64:	0018      	movs	r0, r3
   1ee66:	4b09      	ldr	r3, [pc, #36]	; (1ee8c <usart_write_callback+0x38>)
   1ee68:	4798      	blx	r3
   1ee6a:	0003      	movs	r3, r0
   1ee6c:	3301      	adds	r3, #1
   1ee6e:	d005      	beq.n	1ee7c <usart_write_callback+0x28>
    {
        usart_write_buffer_job(&usart_instance, (uint8_t *)&latestTx, 1);
   1ee70:	4905      	ldr	r1, [pc, #20]	; (1ee88 <usart_write_callback+0x34>)
   1ee72:	4b07      	ldr	r3, [pc, #28]	; (1ee90 <usart_write_callback+0x3c>)
   1ee74:	2201      	movs	r2, #1
   1ee76:	0018      	movs	r0, r3
   1ee78:	4b06      	ldr	r3, [pc, #24]	; (1ee94 <usart_write_callback+0x40>)
   1ee7a:	4798      	blx	r3
    }
}
   1ee7c:	46c0      	nop			; (mov r8, r8)
   1ee7e:	46bd      	mov	sp, r7
   1ee80:	b002      	add	sp, #8
   1ee82:	bd80      	pop	{r7, pc}
   1ee84:	20005ae0 	.word	0x20005ae0
   1ee88:	20005adc 	.word	0x20005adc
   1ee8c:	0001e939 	.word	0x0001e939
   1ee90:	200056a0 	.word	0x200056a0
   1ee94:	00029d59 	.word	0x00029d59

0001ee98 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
   1ee98:	b590      	push	{r4, r7, lr}
   1ee9a:	b087      	sub	sp, #28
   1ee9c:	af00      	add	r7, sp, #0
   1ee9e:	60f8      	str	r0, [r7, #12]
   1eea0:	000c      	movs	r4, r1
   1eea2:	0010      	movs	r0, r2
   1eea4:	0019      	movs	r1, r3
   1eea6:	230a      	movs	r3, #10
   1eea8:	18fb      	adds	r3, r7, r3
   1eeaa:	1c22      	adds	r2, r4, #0
   1eeac:	801a      	strh	r2, [r3, #0]
   1eeae:	2308      	movs	r3, #8
   1eeb0:	18fb      	adds	r3, r7, r3
   1eeb2:	1c02      	adds	r2, r0, #0
   1eeb4:	801a      	strh	r2, [r3, #0]
   1eeb6:	1dfb      	adds	r3, r7, #7
   1eeb8:	1c0a      	adds	r2, r1, #0
   1eeba:	701a      	strb	r2, [r3, #0]
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
   1eebc:	230a      	movs	r3, #10
   1eebe:	18fb      	adds	r3, r7, r3
   1eec0:	881a      	ldrh	r2, [r3, #0]
   1eec2:	2308      	movs	r3, #8
   1eec4:	18fb      	adds	r3, r7, r3
   1eec6:	881b      	ldrh	r3, [r3, #0]
   1eec8:	1ad3      	subs	r3, r2, r3
   1eeca:	3307      	adds	r3, #7
   1eecc:	2b00      	cmp	r3, #0
   1eece:	da00      	bge.n	1eed2 <SDMMC_UNSTUFF_BITS+0x3a>
   1eed0:	3307      	adds	r3, #7
   1eed2:	10db      	asrs	r3, r3, #3
   1eed4:	3b01      	subs	r3, #1
   1eed6:	68fa      	ldr	r2, [r7, #12]
   1eed8:	18d3      	adds	r3, r2, r3
   1eeda:	781b      	ldrb	r3, [r3, #0]
   1eedc:	0019      	movs	r1, r3
   1eede:	2308      	movs	r3, #8
   1eee0:	18fb      	adds	r3, r7, r3
   1eee2:	881b      	ldrh	r3, [r3, #0]
   1eee4:	2207      	movs	r2, #7
   1eee6:	4013      	ands	r3, r2
   1eee8:	4119      	asrs	r1, r3
   1eeea:	000b      	movs	r3, r1
   1eeec:	617b      	str	r3, [r7, #20]
	if (((pos % 8) + size) > 8) {
   1eeee:	2308      	movs	r3, #8
   1eef0:	18fb      	adds	r3, r7, r3
   1eef2:	881b      	ldrh	r3, [r3, #0]
   1eef4:	2207      	movs	r2, #7
   1eef6:	401a      	ands	r2, r3
   1eef8:	1dfb      	adds	r3, r7, #7
   1eefa:	781b      	ldrb	r3, [r3, #0]
   1eefc:	18d3      	adds	r3, r2, r3
   1eefe:	2b08      	cmp	r3, #8
   1ef00:	dd1c      	ble.n	1ef3c <SDMMC_UNSTUFF_BITS+0xa4>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
   1ef02:	230a      	movs	r3, #10
   1ef04:	18fb      	adds	r3, r7, r3
   1ef06:	881a      	ldrh	r2, [r3, #0]
   1ef08:	2308      	movs	r3, #8
   1ef0a:	18fb      	adds	r3, r7, r3
   1ef0c:	881b      	ldrh	r3, [r3, #0]
   1ef0e:	1ad3      	subs	r3, r2, r3
   1ef10:	3307      	adds	r3, #7
   1ef12:	2b00      	cmp	r3, #0
   1ef14:	da00      	bge.n	1ef18 <SDMMC_UNSTUFF_BITS+0x80>
   1ef16:	3307      	adds	r3, #7
   1ef18:	10db      	asrs	r3, r3, #3
   1ef1a:	3b02      	subs	r3, #2
   1ef1c:	68fa      	ldr	r2, [r7, #12]
   1ef1e:	18d3      	adds	r3, r2, r3
   1ef20:	781b      	ldrb	r3, [r3, #0]
   1ef22:	0019      	movs	r1, r3
   1ef24:	2308      	movs	r3, #8
   1ef26:	18fb      	adds	r3, r7, r3
   1ef28:	881b      	ldrh	r3, [r3, #0]
   1ef2a:	2207      	movs	r2, #7
   1ef2c:	4013      	ands	r3, r2
   1ef2e:	2208      	movs	r2, #8
   1ef30:	1ad3      	subs	r3, r2, r3
   1ef32:	4099      	lsls	r1, r3
   1ef34:	000b      	movs	r3, r1
   1ef36:	697a      	ldr	r2, [r7, #20]
   1ef38:	4313      	orrs	r3, r2
   1ef3a:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1ef3c:	2308      	movs	r3, #8
   1ef3e:	18fb      	adds	r3, r7, r3
   1ef40:	881b      	ldrh	r3, [r3, #0]
   1ef42:	2207      	movs	r2, #7
   1ef44:	401a      	ands	r2, r3
   1ef46:	1dfb      	adds	r3, r7, #7
   1ef48:	781b      	ldrb	r3, [r3, #0]
   1ef4a:	18d3      	adds	r3, r2, r3
   1ef4c:	2b10      	cmp	r3, #16
   1ef4e:	dd1c      	ble.n	1ef8a <SDMMC_UNSTUFF_BITS+0xf2>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1ef50:	230a      	movs	r3, #10
   1ef52:	18fb      	adds	r3, r7, r3
   1ef54:	881a      	ldrh	r2, [r3, #0]
   1ef56:	2308      	movs	r3, #8
   1ef58:	18fb      	adds	r3, r7, r3
   1ef5a:	881b      	ldrh	r3, [r3, #0]
   1ef5c:	1ad3      	subs	r3, r2, r3
   1ef5e:	3307      	adds	r3, #7
   1ef60:	2b00      	cmp	r3, #0
   1ef62:	da00      	bge.n	1ef66 <SDMMC_UNSTUFF_BITS+0xce>
   1ef64:	3307      	adds	r3, #7
   1ef66:	10db      	asrs	r3, r3, #3
   1ef68:	3b03      	subs	r3, #3
   1ef6a:	68fa      	ldr	r2, [r7, #12]
   1ef6c:	18d3      	adds	r3, r2, r3
   1ef6e:	781b      	ldrb	r3, [r3, #0]
   1ef70:	0019      	movs	r1, r3
   1ef72:	2308      	movs	r3, #8
   1ef74:	18fb      	adds	r3, r7, r3
   1ef76:	881b      	ldrh	r3, [r3, #0]
   1ef78:	2207      	movs	r2, #7
   1ef7a:	4013      	ands	r3, r2
   1ef7c:	2210      	movs	r2, #16
   1ef7e:	1ad3      	subs	r3, r2, r3
   1ef80:	4099      	lsls	r1, r3
   1ef82:	000b      	movs	r3, r1
   1ef84:	697a      	ldr	r2, [r7, #20]
   1ef86:	4313      	orrs	r3, r2
   1ef88:	617b      	str	r3, [r7, #20]
	}
	if (((pos % 8) + size) > 16) {
   1ef8a:	2308      	movs	r3, #8
   1ef8c:	18fb      	adds	r3, r7, r3
   1ef8e:	881b      	ldrh	r3, [r3, #0]
   1ef90:	2207      	movs	r2, #7
   1ef92:	401a      	ands	r2, r3
   1ef94:	1dfb      	adds	r3, r7, #7
   1ef96:	781b      	ldrb	r3, [r3, #0]
   1ef98:	18d3      	adds	r3, r2, r3
   1ef9a:	2b10      	cmp	r3, #16
   1ef9c:	dd1c      	ble.n	1efd8 <SDMMC_UNSTUFF_BITS+0x140>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
   1ef9e:	230a      	movs	r3, #10
   1efa0:	18fb      	adds	r3, r7, r3
   1efa2:	881a      	ldrh	r2, [r3, #0]
   1efa4:	2308      	movs	r3, #8
   1efa6:	18fb      	adds	r3, r7, r3
   1efa8:	881b      	ldrh	r3, [r3, #0]
   1efaa:	1ad3      	subs	r3, r2, r3
   1efac:	3307      	adds	r3, #7
   1efae:	2b00      	cmp	r3, #0
   1efb0:	da00      	bge.n	1efb4 <SDMMC_UNSTUFF_BITS+0x11c>
   1efb2:	3307      	adds	r3, #7
   1efb4:	10db      	asrs	r3, r3, #3
   1efb6:	3b03      	subs	r3, #3
   1efb8:	68fa      	ldr	r2, [r7, #12]
   1efba:	18d3      	adds	r3, r2, r3
   1efbc:	781b      	ldrb	r3, [r3, #0]
   1efbe:	0019      	movs	r1, r3
   1efc0:	2308      	movs	r3, #8
   1efc2:	18fb      	adds	r3, r7, r3
   1efc4:	881b      	ldrh	r3, [r3, #0]
   1efc6:	2207      	movs	r2, #7
   1efc8:	4013      	ands	r3, r2
   1efca:	2210      	movs	r2, #16
   1efcc:	1ad3      	subs	r3, r2, r3
   1efce:	4099      	lsls	r1, r3
   1efd0:	000b      	movs	r3, r1
   1efd2:	697a      	ldr	r2, [r7, #20]
   1efd4:	4313      	orrs	r3, r2
   1efd6:	617b      	str	r3, [r7, #20]
	}
	value &=  ((uint32_t)1 << size) - 1;
   1efd8:	1dfb      	adds	r3, r7, #7
   1efda:	781b      	ldrb	r3, [r3, #0]
   1efdc:	2201      	movs	r2, #1
   1efde:	409a      	lsls	r2, r3
   1efe0:	0013      	movs	r3, r2
   1efe2:	1e5a      	subs	r2, r3, #1
   1efe4:	697b      	ldr	r3, [r7, #20]
   1efe6:	4013      	ands	r3, r2
   1efe8:	617b      	str	r3, [r7, #20]
	return value;
   1efea:	697b      	ldr	r3, [r7, #20]
}
   1efec:	0018      	movs	r0, r3
   1efee:	46bd      	mov	sp, r7
   1eff0:	b007      	add	sp, #28
   1eff2:	bd90      	pop	{r4, r7, pc}

0001eff4 <mmc_spi_op_cond>:
 * - CMD58 reads OCR
 *
 * \return true if success, otherwise false
 */
static bool mmc_spi_op_cond(void)
{
   1eff4:	b580      	push	{r7, lr}
   1eff6:	b082      	sub	sp, #8
   1eff8:	af00      	add	r7, sp, #0
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1effa:	4b23      	ldr	r3, [pc, #140]	; (1f088 <mmc_spi_op_cond+0x94>)
   1effc:	607b      	str	r3, [r7, #4]
	do {
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
   1effe:	4b23      	ldr	r3, [pc, #140]	; (1f08c <mmc_spi_op_cond+0x98>)
   1f000:	2100      	movs	r1, #0
   1f002:	0018      	movs	r0, r3
   1f004:	4b22      	ldr	r3, [pc, #136]	; (1f090 <mmc_spi_op_cond+0x9c>)
   1f006:	4798      	blx	r3
   1f008:	0003      	movs	r3, r0
   1f00a:	001a      	movs	r2, r3
   1f00c:	2301      	movs	r3, #1
   1f00e:	4053      	eors	r3, r2
   1f010:	b2db      	uxtb	r3, r3
   1f012:	2b00      	cmp	r3, #0
   1f014:	d001      	beq.n	1f01a <mmc_spi_op_cond+0x26>
			sd_mmc_debug("%s: CMD1 SPI Fail - Busy retry %d\n\r",
					__func__, (int)(7150 - retry));
			return false;
   1f016:	2300      	movs	r3, #0
   1f018:	e031      	b.n	1f07e <mmc_spi_op_cond+0x8a>
		}
		// Check busy flag
		resp = driver_get_response();
   1f01a:	4b1e      	ldr	r3, [pc, #120]	; (1f094 <mmc_spi_op_cond+0xa0>)
   1f01c:	4798      	blx	r3
   1f01e:	0003      	movs	r3, r0
   1f020:	603b      	str	r3, [r7, #0]
		if (!(resp & R1_SPI_IDLE)) {
   1f022:	683b      	ldr	r3, [r7, #0]
   1f024:	2201      	movs	r2, #1
   1f026:	4013      	ands	r3, r2
   1f028:	d006      	beq.n	1f038 <mmc_spi_op_cond+0x44>
			break;
		}
		if (retry-- == 0) {
   1f02a:	687b      	ldr	r3, [r7, #4]
   1f02c:	1e5a      	subs	r2, r3, #1
   1f02e:	607a      	str	r2, [r7, #4]
   1f030:	2b00      	cmp	r3, #0
   1f032:	d1e4      	bne.n	1effe <mmc_spi_op_cond+0xa>
			sd_mmc_debug("%s: CMD1 Timeout on busy\n\r", __func__);
			return false;
   1f034:	2300      	movs	r3, #0
   1f036:	e022      	b.n	1f07e <mmc_spi_op_cond+0x8a>
			break;
   1f038:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1f03a:	4b17      	ldr	r3, [pc, #92]	; (1f098 <mmc_spi_op_cond+0xa4>)
   1f03c:	2100      	movs	r1, #0
   1f03e:	0018      	movs	r0, r3
   1f040:	4b13      	ldr	r3, [pc, #76]	; (1f090 <mmc_spi_op_cond+0x9c>)
   1f042:	4798      	blx	r3
   1f044:	0003      	movs	r3, r0
   1f046:	001a      	movs	r2, r3
   1f048:	2301      	movs	r3, #1
   1f04a:	4053      	eors	r3, r2
   1f04c:	b2db      	uxtb	r3, r3
   1f04e:	2b00      	cmp	r3, #0
   1f050:	d001      	beq.n	1f056 <mmc_spi_op_cond+0x62>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1f052:	2300      	movs	r3, #0
   1f054:	e013      	b.n	1f07e <mmc_spi_op_cond+0x8a>
	}
	// Check OCR value
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
   1f056:	4b0f      	ldr	r3, [pc, #60]	; (1f094 <mmc_spi_op_cond+0xa0>)
   1f058:	4798      	blx	r3
   1f05a:	0002      	movs	r2, r0
   1f05c:	23c0      	movs	r3, #192	; 0xc0
   1f05e:	05db      	lsls	r3, r3, #23
   1f060:	401a      	ands	r2, r3
   1f062:	2380      	movs	r3, #128	; 0x80
   1f064:	05db      	lsls	r3, r3, #23
   1f066:	429a      	cmp	r2, r3
   1f068:	d108      	bne.n	1f07c <mmc_spi_op_cond+0x88>
			== OCR_ACCESS_MODE_SECTOR) {
		sd_mmc_card->type |= CARD_TYPE_HC;
   1f06a:	4b0c      	ldr	r3, [pc, #48]	; (1f09c <mmc_spi_op_cond+0xa8>)
   1f06c:	681a      	ldr	r2, [r3, #0]
   1f06e:	4b0b      	ldr	r3, [pc, #44]	; (1f09c <mmc_spi_op_cond+0xa8>)
   1f070:	681b      	ldr	r3, [r3, #0]
   1f072:	7adb      	ldrb	r3, [r3, #11]
   1f074:	2108      	movs	r1, #8
   1f076:	430b      	orrs	r3, r1
   1f078:	b2db      	uxtb	r3, r3
   1f07a:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1f07c:	2301      	movs	r3, #1
}
   1f07e:	0018      	movs	r0, r3
   1f080:	46bd      	mov	sp, r7
   1f082:	b002      	add	sp, #8
   1f084:	bd80      	pop	{r7, pc}
   1f086:	46c0      	nop			; (mov r8, r8)
   1f088:	00001bee 	.word	0x00001bee
   1f08c:	00001101 	.word	0x00001101
   1f090:	00020a71 	.word	0x00020a71
   1f094:	00020cb1 	.word	0x00020cb1
   1f098:	0000053a 	.word	0x0000053a
   1f09c:	20004244 	.word	0x20004244

0001f0a0 <sd_spi_op_cond>:
 * \param v2   Shall be 1 if it is a SD card V2
 *
 * \return true if success, otherwise false
 */
static bool sd_spi_op_cond(uint8_t v2)
{
   1f0a0:	b580      	push	{r7, lr}
   1f0a2:	b086      	sub	sp, #24
   1f0a4:	af00      	add	r7, sp, #0
   1f0a6:	0002      	movs	r2, r0
   1f0a8:	1dfb      	adds	r3, r7, #7
   1f0aa:	701a      	strb	r2, [r3, #0]
	/*
	 * Timeout 1s = 400KHz / ((6+1)*8) cylces = 7150 retry
	 * 6 = cmd byte size
	 * 1 = response byte size
	 */
	retry = 7150;
   1f0ac:	4b2e      	ldr	r3, [pc, #184]	; (1f168 <sd_spi_op_cond+0xc8>)
   1f0ae:	613b      	str	r3, [r7, #16]
	do {
		// CMD55 - Indicate to the card that the next command is an
		// application specific command rather than a standard command.
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
   1f0b0:	4b2e      	ldr	r3, [pc, #184]	; (1f16c <sd_spi_op_cond+0xcc>)
   1f0b2:	2100      	movs	r1, #0
   1f0b4:	0018      	movs	r0, r3
   1f0b6:	4b2e      	ldr	r3, [pc, #184]	; (1f170 <sd_spi_op_cond+0xd0>)
   1f0b8:	4798      	blx	r3
   1f0ba:	0003      	movs	r3, r0
   1f0bc:	001a      	movs	r2, r3
   1f0be:	2301      	movs	r3, #1
   1f0c0:	4053      	eors	r3, r2
   1f0c2:	b2db      	uxtb	r3, r3
   1f0c4:	2b00      	cmp	r3, #0
   1f0c6:	d001      	beq.n	1f0cc <sd_spi_op_cond+0x2c>
			sd_mmc_debug("%s: CMD55 Fail\n\r", __func__);
			return false;
   1f0c8:	2300      	movs	r3, #0
   1f0ca:	e048      	b.n	1f15e <sd_spi_op_cond+0xbe>
		}

		// (ACMD41) Sends host OCR register
		arg = 0;
   1f0cc:	2300      	movs	r3, #0
   1f0ce:	617b      	str	r3, [r7, #20]
		if (v2) {
   1f0d0:	1dfb      	adds	r3, r7, #7
   1f0d2:	781b      	ldrb	r3, [r3, #0]
   1f0d4:	2b00      	cmp	r3, #0
   1f0d6:	d004      	beq.n	1f0e2 <sd_spi_op_cond+0x42>
			arg |= SD_ACMD41_HCS;
   1f0d8:	697b      	ldr	r3, [r7, #20]
   1f0da:	2280      	movs	r2, #128	; 0x80
   1f0dc:	05d2      	lsls	r2, r2, #23
   1f0de:	4313      	orrs	r3, r2
   1f0e0:	617b      	str	r3, [r7, #20]
		}
		// Check response
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
   1f0e2:	697b      	ldr	r3, [r7, #20]
   1f0e4:	4a23      	ldr	r2, [pc, #140]	; (1f174 <sd_spi_op_cond+0xd4>)
   1f0e6:	0019      	movs	r1, r3
   1f0e8:	0010      	movs	r0, r2
   1f0ea:	4b21      	ldr	r3, [pc, #132]	; (1f170 <sd_spi_op_cond+0xd0>)
   1f0ec:	4798      	blx	r3
   1f0ee:	0003      	movs	r3, r0
   1f0f0:	001a      	movs	r2, r3
   1f0f2:	2301      	movs	r3, #1
   1f0f4:	4053      	eors	r3, r2
   1f0f6:	b2db      	uxtb	r3, r3
   1f0f8:	2b00      	cmp	r3, #0
   1f0fa:	d001      	beq.n	1f100 <sd_spi_op_cond+0x60>
			sd_mmc_debug("%s: ACMD41 Fail\n\r", __func__);
			return false;
   1f0fc:	2300      	movs	r3, #0
   1f0fe:	e02e      	b.n	1f15e <sd_spi_op_cond+0xbe>
		}
		resp = driver_get_response();
   1f100:	4b1d      	ldr	r3, [pc, #116]	; (1f178 <sd_spi_op_cond+0xd8>)
   1f102:	4798      	blx	r3
   1f104:	0003      	movs	r3, r0
   1f106:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
   1f108:	68fb      	ldr	r3, [r7, #12]
   1f10a:	2201      	movs	r2, #1
   1f10c:	4013      	ands	r3, r2
   1f10e:	d006      	beq.n	1f11e <sd_spi_op_cond+0x7e>
			// Card is ready
			break;
		}
		if (retry-- == 0) {
   1f110:	693b      	ldr	r3, [r7, #16]
   1f112:	1e5a      	subs	r2, r3, #1
   1f114:	613a      	str	r2, [r7, #16]
   1f116:	2b00      	cmp	r3, #0
   1f118:	d1ca      	bne.n	1f0b0 <sd_spi_op_cond+0x10>
			sd_mmc_debug("%s: ACMD41 Timeout on busy, resp32 0x%08x \n\r",
					__func__, resp);
			return false;
   1f11a:	2300      	movs	r3, #0
   1f11c:	e01f      	b.n	1f15e <sd_spi_op_cond+0xbe>
			break;
   1f11e:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	// Read OCR for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
   1f120:	4b16      	ldr	r3, [pc, #88]	; (1f17c <sd_spi_op_cond+0xdc>)
   1f122:	2100      	movs	r1, #0
   1f124:	0018      	movs	r0, r3
   1f126:	4b12      	ldr	r3, [pc, #72]	; (1f170 <sd_spi_op_cond+0xd0>)
   1f128:	4798      	blx	r3
   1f12a:	0003      	movs	r3, r0
   1f12c:	001a      	movs	r2, r3
   1f12e:	2301      	movs	r3, #1
   1f130:	4053      	eors	r3, r2
   1f132:	b2db      	uxtb	r3, r3
   1f134:	2b00      	cmp	r3, #0
   1f136:	d001      	beq.n	1f13c <sd_spi_op_cond+0x9c>
		sd_mmc_debug("%s: CMD58 Fail\n\r", __func__);
		return false;
   1f138:	2300      	movs	r3, #0
   1f13a:	e010      	b.n	1f15e <sd_spi_op_cond+0xbe>
	}
	if ((driver_get_response() & OCR_CCS) != 0) {
   1f13c:	4b0e      	ldr	r3, [pc, #56]	; (1f178 <sd_spi_op_cond+0xd8>)
   1f13e:	4798      	blx	r3
   1f140:	0002      	movs	r2, r0
   1f142:	2380      	movs	r3, #128	; 0x80
   1f144:	05db      	lsls	r3, r3, #23
   1f146:	4013      	ands	r3, r2
   1f148:	d008      	beq.n	1f15c <sd_spi_op_cond+0xbc>
		sd_mmc_card->type |= CARD_TYPE_HC;
   1f14a:	4b0d      	ldr	r3, [pc, #52]	; (1f180 <sd_spi_op_cond+0xe0>)
   1f14c:	681a      	ldr	r2, [r3, #0]
   1f14e:	4b0c      	ldr	r3, [pc, #48]	; (1f180 <sd_spi_op_cond+0xe0>)
   1f150:	681b      	ldr	r3, [r3, #0]
   1f152:	7adb      	ldrb	r3, [r3, #11]
   1f154:	2108      	movs	r1, #8
   1f156:	430b      	orrs	r3, r1
   1f158:	b2db      	uxtb	r3, r3
   1f15a:	72d3      	strb	r3, [r2, #11]
	}
	return true;
   1f15c:	2301      	movs	r3, #1
}
   1f15e:	0018      	movs	r0, r3
   1f160:	46bd      	mov	sp, r7
   1f162:	b006      	add	sp, #24
   1f164:	bd80      	pop	{r7, pc}
   1f166:	46c0      	nop			; (mov r8, r8)
   1f168:	00001bee 	.word	0x00001bee
   1f16c:	00001137 	.word	0x00001137
   1f170:	00020a71 	.word	0x00020a71
   1f174:	00001129 	.word	0x00001129
   1f178:	00020cb1 	.word	0x00020cb1
   1f17c:	0000053a 	.word	0x0000053a
   1f180:	20004244 	.word	0x20004244

0001f184 <sdio_op_cond>:
	return true;
}

#else
static bool sdio_op_cond(void)
{
   1f184:	b580      	push	{r7, lr}
   1f186:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
   1f188:	2301      	movs	r3, #1
}
   1f18a:	0018      	movs	r0, r3
   1f18c:	46bd      	mov	sp, r7
   1f18e:	bd80      	pop	{r7, pc}

0001f190 <sd_cmd8>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_err.
 */
static bool sd_cmd8(uint8_t * v2)
{
   1f190:	b580      	push	{r7, lr}
   1f192:	b084      	sub	sp, #16
   1f194:	af00      	add	r7, sp, #0
   1f196:	6078      	str	r0, [r7, #4]
	uint32_t resp;

	*v2 = 0;
   1f198:	687b      	ldr	r3, [r7, #4]
   1f19a:	2200      	movs	r2, #0
   1f19c:	701a      	strb	r2, [r3, #0]
	// Test for SD version 2
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
   1f19e:	23d5      	movs	r3, #213	; 0xd5
   1f1a0:	005b      	lsls	r3, r3, #1
   1f1a2:	4a14      	ldr	r2, [pc, #80]	; (1f1f4 <sd_cmd8+0x64>)
   1f1a4:	0019      	movs	r1, r3
   1f1a6:	0010      	movs	r0, r2
   1f1a8:	4b13      	ldr	r3, [pc, #76]	; (1f1f8 <sd_cmd8+0x68>)
   1f1aa:	4798      	blx	r3
   1f1ac:	0003      	movs	r3, r0
   1f1ae:	001a      	movs	r2, r3
   1f1b0:	2301      	movs	r3, #1
   1f1b2:	4053      	eors	r3, r2
   1f1b4:	b2db      	uxtb	r3, r3
   1f1b6:	2b00      	cmp	r3, #0
   1f1b8:	d001      	beq.n	1f1be <sd_cmd8+0x2e>
			SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		return true; // It is not a V2
   1f1ba:	2301      	movs	r3, #1
   1f1bc:	e015      	b.n	1f1ea <sd_cmd8+0x5a>
	}
	// Check R7 response
	resp = driver_get_response();
   1f1be:	4b0f      	ldr	r3, [pc, #60]	; (1f1fc <sd_cmd8+0x6c>)
   1f1c0:	4798      	blx	r3
   1f1c2:	0003      	movs	r3, r0
   1f1c4:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
   1f1c6:	68fb      	ldr	r3, [r7, #12]
   1f1c8:	3301      	adds	r3, #1
   1f1ca:	d101      	bne.n	1f1d0 <sd_cmd8+0x40>
		// No compliance R7 value
		return true; // It is not a V2
   1f1cc:	2301      	movs	r3, #1
   1f1ce:	e00c      	b.n	1f1ea <sd_cmd8+0x5a>
	}
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
   1f1d0:	68fb      	ldr	r3, [r7, #12]
   1f1d2:	051b      	lsls	r3, r3, #20
   1f1d4:	0d1a      	lsrs	r2, r3, #20
   1f1d6:	23d5      	movs	r3, #213	; 0xd5
   1f1d8:	005b      	lsls	r3, r3, #1
   1f1da:	429a      	cmp	r2, r3
   1f1dc:	d001      	beq.n	1f1e2 <sd_cmd8+0x52>
				!= (SD_CMD8_PATTERN | SD_CMD8_HIGH_VOLTAGE)) {
		sd_mmc_debug("%s: CMD8 resp32 0x%08x UNUSABLE CARD\n\r",
				__func__, resp);
		return false;
   1f1de:	2300      	movs	r3, #0
   1f1e0:	e003      	b.n	1f1ea <sd_cmd8+0x5a>
	}
	sd_mmc_debug("SD card V2\n\r");
	*v2 = 1;
   1f1e2:	687b      	ldr	r3, [r7, #4]
   1f1e4:	2201      	movs	r2, #1
   1f1e6:	701a      	strb	r2, [r3, #0]
	return true;
   1f1e8:	2301      	movs	r3, #1
}
   1f1ea:	0018      	movs	r0, r3
   1f1ec:	46bd      	mov	sp, r7
   1f1ee:	b004      	add	sp, #16
   1f1f0:	bd80      	pop	{r7, pc}
   1f1f2:	46c0      	nop			; (mov r8, r8)
   1f1f4:	00005508 	.word	0x00005508
   1f1f8:	00020a71 	.word	0x00020a71
   1f1fc:	00020cb1 	.word	0x00020cb1

0001f200 <mmc_cmd8>:
 * support information
 *
 * \return true if success, otherwise false
 */
static bool mmc_cmd8(uint8_t *b_authorize_high_speed)
{
   1f200:	b590      	push	{r4, r7, lr}
   1f202:	b089      	sub	sp, #36	; 0x24
   1f204:	af02      	add	r7, sp, #8
   1f206:	6078      	str	r0, [r7, #4]
	uint16_t i;
	uint32_t ext_csd;
	uint32_t sec_count;

	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
   1f208:	2380      	movs	r3, #128	; 0x80
   1f20a:	009a      	lsls	r2, r3, #2
   1f20c:	4841      	ldr	r0, [pc, #260]	; (1f314 <mmc_cmd8+0x114>)
   1f20e:	2300      	movs	r3, #0
   1f210:	9300      	str	r3, [sp, #0]
   1f212:	2301      	movs	r3, #1
   1f214:	2100      	movs	r1, #0
   1f216:	4c40      	ldr	r4, [pc, #256]	; (1f318 <mmc_cmd8+0x118>)
   1f218:	47a0      	blx	r4
   1f21a:	0003      	movs	r3, r0
   1f21c:	001a      	movs	r2, r3
   1f21e:	2301      	movs	r3, #1
   1f220:	4053      	eors	r3, r2
   1f222:	b2db      	uxtb	r3, r3
   1f224:	2b00      	cmp	r3, #0
   1f226:	d001      	beq.n	1f22c <mmc_cmd8+0x2c>
			EXT_CSD_BSIZE, 1, false)) {
		return false;
   1f228:	2300      	movs	r3, #0
   1f22a:	e06e      	b.n	1f30a <mmc_cmd8+0x10a>
	//** Read and decode Extended Extended CSD
	// Note: The read access is done in byte to avoid a buffer
	// of EXT_CSD_BSIZE Byte in stack.

	// Read card type
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1f22c:	2316      	movs	r3, #22
   1f22e:	18fb      	adds	r3, r7, r3
   1f230:	2200      	movs	r2, #0
   1f232:	801a      	strh	r2, [r3, #0]
   1f234:	e014      	b.n	1f260 <mmc_cmd8+0x60>
		if (!driver_read_word(&ext_csd)) {
   1f236:	2310      	movs	r3, #16
   1f238:	18fb      	adds	r3, r7, r3
   1f23a:	0018      	movs	r0, r3
   1f23c:	4b37      	ldr	r3, [pc, #220]	; (1f31c <mmc_cmd8+0x11c>)
   1f23e:	4798      	blx	r3
   1f240:	0003      	movs	r3, r0
   1f242:	001a      	movs	r2, r3
   1f244:	2301      	movs	r3, #1
   1f246:	4053      	eors	r3, r2
   1f248:	b2db      	uxtb	r3, r3
   1f24a:	2b00      	cmp	r3, #0
   1f24c:	d001      	beq.n	1f252 <mmc_cmd8+0x52>
			return false;
   1f24e:	2300      	movs	r3, #0
   1f250:	e05b      	b.n	1f30a <mmc_cmd8+0x10a>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
   1f252:	2316      	movs	r3, #22
   1f254:	18fb      	adds	r3, r7, r3
   1f256:	881a      	ldrh	r2, [r3, #0]
   1f258:	2316      	movs	r3, #22
   1f25a:	18fb      	adds	r3, r7, r3
   1f25c:	3201      	adds	r2, #1
   1f25e:	801a      	strh	r2, [r3, #0]
   1f260:	2316      	movs	r3, #22
   1f262:	18fb      	adds	r3, r7, r3
   1f264:	881b      	ldrh	r3, [r3, #0]
   1f266:	2b31      	cmp	r3, #49	; 0x31
   1f268:	d9e5      	bls.n	1f236 <mmc_cmd8+0x36>
		}
	}
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
			& MMC_CTYPE_52MHZ;
   1f26a:	693b      	ldr	r3, [r7, #16]
   1f26c:	b2db      	uxtb	r3, r3
   1f26e:	2202      	movs	r2, #2
   1f270:	4013      	ands	r3, r2
   1f272:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
   1f274:	687b      	ldr	r3, [r7, #4]
   1f276:	701a      	strb	r2, [r3, #0]

	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
   1f278:	4b29      	ldr	r3, [pc, #164]	; (1f320 <mmc_cmd8+0x120>)
   1f27a:	681b      	ldr	r3, [r3, #0]
   1f27c:	330e      	adds	r3, #14
   1f27e:	0018      	movs	r0, r3
   1f280:	230c      	movs	r3, #12
   1f282:	223e      	movs	r2, #62	; 0x3e
   1f284:	2180      	movs	r1, #128	; 0x80
   1f286:	4c27      	ldr	r4, [pc, #156]	; (1f324 <mmc_cmd8+0x124>)
   1f288:	47a0      	blx	r4
   1f28a:	0002      	movs	r2, r0
   1f28c:	4b26      	ldr	r3, [pc, #152]	; (1f328 <mmc_cmd8+0x128>)
   1f28e:	429a      	cmp	r2, r3
   1f290:	d135      	bne.n	1f2fe <mmc_cmd8+0xfe>
		// For high capacity SD/MMC card,
		// memory capacity = SEC_COUNT * 512 byte
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1f292:	e014      	b.n	1f2be <mmc_cmd8+0xbe>
			if (!driver_read_word(&sec_count)) {
   1f294:	230c      	movs	r3, #12
   1f296:	18fb      	adds	r3, r7, r3
   1f298:	0018      	movs	r0, r3
   1f29a:	4b20      	ldr	r3, [pc, #128]	; (1f31c <mmc_cmd8+0x11c>)
   1f29c:	4798      	blx	r3
   1f29e:	0003      	movs	r3, r0
   1f2a0:	001a      	movs	r2, r3
   1f2a2:	2301      	movs	r3, #1
   1f2a4:	4053      	eors	r3, r2
   1f2a6:	b2db      	uxtb	r3, r3
   1f2a8:	2b00      	cmp	r3, #0
   1f2aa:	d001      	beq.n	1f2b0 <mmc_cmd8+0xb0>
				return false;
   1f2ac:	2300      	movs	r3, #0
   1f2ae:	e02c      	b.n	1f30a <mmc_cmd8+0x10a>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
   1f2b0:	2316      	movs	r3, #22
   1f2b2:	18fb      	adds	r3, r7, r3
   1f2b4:	881a      	ldrh	r2, [r3, #0]
   1f2b6:	2316      	movs	r3, #22
   1f2b8:	18fb      	adds	r3, r7, r3
   1f2ba:	3201      	adds	r2, #1
   1f2bc:	801a      	strh	r2, [r3, #0]
   1f2be:	2316      	movs	r3, #22
   1f2c0:	18fb      	adds	r3, r7, r3
   1f2c2:	881b      	ldrh	r3, [r3, #0]
   1f2c4:	2b35      	cmp	r3, #53	; 0x35
   1f2c6:	d9e5      	bls.n	1f294 <mmc_cmd8+0x94>
			}
		}
		sd_mmc_card->capacity = sec_count / 2;
   1f2c8:	4b15      	ldr	r3, [pc, #84]	; (1f320 <mmc_cmd8+0x120>)
   1f2ca:	681b      	ldr	r3, [r3, #0]
   1f2cc:	68fa      	ldr	r2, [r7, #12]
   1f2ce:	0852      	lsrs	r2, r2, #1
   1f2d0:	605a      	str	r2, [r3, #4]
	}
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1f2d2:	e014      	b.n	1f2fe <mmc_cmd8+0xfe>
		if (!driver_read_word(&sec_count)) {
   1f2d4:	230c      	movs	r3, #12
   1f2d6:	18fb      	adds	r3, r7, r3
   1f2d8:	0018      	movs	r0, r3
   1f2da:	4b10      	ldr	r3, [pc, #64]	; (1f31c <mmc_cmd8+0x11c>)
   1f2dc:	4798      	blx	r3
   1f2de:	0003      	movs	r3, r0
   1f2e0:	001a      	movs	r2, r3
   1f2e2:	2301      	movs	r3, #1
   1f2e4:	4053      	eors	r3, r2
   1f2e6:	b2db      	uxtb	r3, r3
   1f2e8:	2b00      	cmp	r3, #0
   1f2ea:	d001      	beq.n	1f2f0 <mmc_cmd8+0xf0>
			return false;
   1f2ec:	2300      	movs	r3, #0
   1f2ee:	e00c      	b.n	1f30a <mmc_cmd8+0x10a>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
   1f2f0:	2316      	movs	r3, #22
   1f2f2:	18fb      	adds	r3, r7, r3
   1f2f4:	881a      	ldrh	r2, [r3, #0]
   1f2f6:	2316      	movs	r3, #22
   1f2f8:	18fb      	adds	r3, r7, r3
   1f2fa:	3201      	adds	r2, #1
   1f2fc:	801a      	strh	r2, [r3, #0]
   1f2fe:	2316      	movs	r3, #22
   1f300:	18fb      	adds	r3, r7, r3
   1f302:	881b      	ldrh	r3, [r3, #0]
   1f304:	2b7f      	cmp	r3, #127	; 0x7f
   1f306:	d9e5      	bls.n	1f2d4 <mmc_cmd8+0xd4>
		}
	}
	return true;
   1f308:	2301      	movs	r3, #1
}
   1f30a:	0018      	movs	r0, r3
   1f30c:	46bd      	mov	sp, r7
   1f30e:	b007      	add	sp, #28
   1f310:	bd90      	pop	{r4, r7, pc}
   1f312:	46c0      	nop			; (mov r8, r8)
   1f314:	00081108 	.word	0x00081108
   1f318:	00020a99 	.word	0x00020a99
   1f31c:	00020cc5 	.word	0x00020cc5
   1f320:	20004244 	.word	0x20004244
   1f324:	0001ee99 	.word	0x0001ee99
   1f328:	00000fff 	.word	0x00000fff

0001f32c <sd_mmc_cmd9_spi>:
 * data (CSD) on the CMD line spi.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd9_spi(void)
{
   1f32c:	b590      	push	{r4, r7, lr}
   1f32e:	b083      	sub	sp, #12
   1f330:	af02      	add	r7, sp, #8
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
   1f332:	4b15      	ldr	r3, [pc, #84]	; (1f388 <sd_mmc_cmd9_spi+0x5c>)
   1f334:	681b      	ldr	r3, [r3, #0]
   1f336:	891b      	ldrh	r3, [r3, #8]
   1f338:	0419      	lsls	r1, r3, #16
   1f33a:	4814      	ldr	r0, [pc, #80]	; (1f38c <sd_mmc_cmd9_spi+0x60>)
   1f33c:	2301      	movs	r3, #1
   1f33e:	9300      	str	r3, [sp, #0]
   1f340:	2301      	movs	r3, #1
   1f342:	2210      	movs	r2, #16
   1f344:	4c12      	ldr	r4, [pc, #72]	; (1f390 <sd_mmc_cmd9_spi+0x64>)
   1f346:	47a0      	blx	r4
   1f348:	0003      	movs	r3, r0
   1f34a:	001a      	movs	r2, r3
   1f34c:	2301      	movs	r3, #1
   1f34e:	4053      	eors	r3, r2
   1f350:	b2db      	uxtb	r3, r3
   1f352:	2b00      	cmp	r3, #0
   1f354:	d001      	beq.n	1f35a <sd_mmc_cmd9_spi+0x2e>
			CSD_REG_BSIZE, 1, true)) {
		return false;
   1f356:	2300      	movs	r3, #0
   1f358:	e012      	b.n	1f380 <sd_mmc_cmd9_spi+0x54>
	}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
   1f35a:	4b0b      	ldr	r3, [pc, #44]	; (1f388 <sd_mmc_cmd9_spi+0x5c>)
   1f35c:	681b      	ldr	r3, [r3, #0]
   1f35e:	330e      	adds	r3, #14
   1f360:	2101      	movs	r1, #1
   1f362:	0018      	movs	r0, r3
   1f364:	4b0b      	ldr	r3, [pc, #44]	; (1f394 <sd_mmc_cmd9_spi+0x68>)
   1f366:	4798      	blx	r3
   1f368:	0003      	movs	r3, r0
   1f36a:	001a      	movs	r2, r3
   1f36c:	2301      	movs	r3, #1
   1f36e:	4053      	eors	r3, r2
   1f370:	b2db      	uxtb	r3, r3
   1f372:	2b00      	cmp	r3, #0
   1f374:	d001      	beq.n	1f37a <sd_mmc_cmd9_spi+0x4e>
		return false;
   1f376:	2300      	movs	r3, #0
   1f378:	e002      	b.n	1f380 <sd_mmc_cmd9_spi+0x54>
	}
	return driver_wait_end_of_read_blocks();
   1f37a:	4b07      	ldr	r3, [pc, #28]	; (1f398 <sd_mmc_cmd9_spi+0x6c>)
   1f37c:	4798      	blx	r3
   1f37e:	0003      	movs	r3, r0
}
   1f380:	0018      	movs	r0, r3
   1f382:	46bd      	mov	sp, r7
   1f384:	b001      	add	sp, #4
   1f386:	bd90      	pop	{r4, r7, pc}
   1f388:	20004244 	.word	0x20004244
   1f38c:	00081109 	.word	0x00081109
   1f390:	00020a99 	.word	0x00020a99
   1f394:	00020d69 	.word	0x00020d69
   1f398:	00020e0d 	.word	0x00020e0d

0001f39c <mmc_decode_csd>:

/**
 * \brief Decodes MMC CSD register
 */
static void mmc_decode_csd(void)
{
   1f39c:	b5b0      	push	{r4, r5, r7, lr}
   1f39e:	b084      	sub	sp, #16
   1f3a0:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get MMC System Specification version supported by the card
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
   1f3a2:	4b45      	ldr	r3, [pc, #276]	; (1f4b8 <mmc_decode_csd+0x11c>)
   1f3a4:	681b      	ldr	r3, [r3, #0]
   1f3a6:	330e      	adds	r3, #14
   1f3a8:	0018      	movs	r0, r3
   1f3aa:	2304      	movs	r3, #4
   1f3ac:	227a      	movs	r2, #122	; 0x7a
   1f3ae:	2180      	movs	r1, #128	; 0x80
   1f3b0:	4c42      	ldr	r4, [pc, #264]	; (1f4bc <mmc_decode_csd+0x120>)
   1f3b2:	47a0      	blx	r4
   1f3b4:	0003      	movs	r3, r0
   1f3b6:	2b02      	cmp	r3, #2
   1f3b8:	d011      	beq.n	1f3de <mmc_decode_csd+0x42>
   1f3ba:	d802      	bhi.n	1f3c2 <mmc_decode_csd+0x26>
   1f3bc:	2b01      	cmp	r3, #1
   1f3be:	d009      	beq.n	1f3d4 <mmc_decode_csd+0x38>
   1f3c0:	e003      	b.n	1f3ca <mmc_decode_csd+0x2e>
   1f3c2:	2b03      	cmp	r3, #3
   1f3c4:	d010      	beq.n	1f3e8 <mmc_decode_csd+0x4c>
   1f3c6:	2b04      	cmp	r3, #4
   1f3c8:	d013      	beq.n	1f3f2 <mmc_decode_csd+0x56>
	default:
	case 0:
		sd_mmc_card->version = CARD_VER_MMC_1_2;
   1f3ca:	4b3b      	ldr	r3, [pc, #236]	; (1f4b8 <mmc_decode_csd+0x11c>)
   1f3cc:	681b      	ldr	r3, [r3, #0]
   1f3ce:	2212      	movs	r2, #18
   1f3d0:	731a      	strb	r2, [r3, #12]
		break;
   1f3d2:	e013      	b.n	1f3fc <mmc_decode_csd+0x60>

	case 1:
		sd_mmc_card->version = CARD_VER_MMC_1_4;
   1f3d4:	4b38      	ldr	r3, [pc, #224]	; (1f4b8 <mmc_decode_csd+0x11c>)
   1f3d6:	681b      	ldr	r3, [r3, #0]
   1f3d8:	2214      	movs	r2, #20
   1f3da:	731a      	strb	r2, [r3, #12]
		break;
   1f3dc:	e00e      	b.n	1f3fc <mmc_decode_csd+0x60>

	case 2:
		sd_mmc_card->version = CARD_VER_MMC_2_2;
   1f3de:	4b36      	ldr	r3, [pc, #216]	; (1f4b8 <mmc_decode_csd+0x11c>)
   1f3e0:	681b      	ldr	r3, [r3, #0]
   1f3e2:	2222      	movs	r2, #34	; 0x22
   1f3e4:	731a      	strb	r2, [r3, #12]
		break;
   1f3e6:	e009      	b.n	1f3fc <mmc_decode_csd+0x60>

	case 3:
		sd_mmc_card->version = CARD_VER_MMC_3;
   1f3e8:	4b33      	ldr	r3, [pc, #204]	; (1f4b8 <mmc_decode_csd+0x11c>)
   1f3ea:	681b      	ldr	r3, [r3, #0]
   1f3ec:	2230      	movs	r2, #48	; 0x30
   1f3ee:	731a      	strb	r2, [r3, #12]
		break;
   1f3f0:	e004      	b.n	1f3fc <mmc_decode_csd+0x60>

	case 4:
		sd_mmc_card->version = CARD_VER_MMC_4;
   1f3f2:	4b31      	ldr	r3, [pc, #196]	; (1f4b8 <mmc_decode_csd+0x11c>)
   1f3f4:	681b      	ldr	r3, [r3, #0]
   1f3f6:	2240      	movs	r2, #64	; 0x40
   1f3f8:	731a      	strb	r2, [r3, #12]
		break;
   1f3fa:	46c0      	nop			; (mov r8, r8)
	}

	// Get MMC memory max transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1f3fc:	4b2e      	ldr	r3, [pc, #184]	; (1f4b8 <mmc_decode_csd+0x11c>)
   1f3fe:	681b      	ldr	r3, [r3, #0]
   1f400:	330e      	adds	r3, #14
   1f402:	0018      	movs	r0, r3
   1f404:	2308      	movs	r3, #8
   1f406:	2260      	movs	r2, #96	; 0x60
   1f408:	2180      	movs	r1, #128	; 0x80
   1f40a:	4c2c      	ldr	r4, [pc, #176]	; (1f4bc <mmc_decode_csd+0x120>)
   1f40c:	47a0      	blx	r4
   1f40e:	0003      	movs	r3, r0
   1f410:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1f412:	68fb      	ldr	r3, [r7, #12]
   1f414:	2207      	movs	r2, #7
   1f416:	401a      	ands	r2, r3
   1f418:	4b29      	ldr	r3, [pc, #164]	; (1f4c0 <mmc_decode_csd+0x124>)
   1f41a:	0092      	lsls	r2, r2, #2
   1f41c:	58d3      	ldr	r3, [r2, r3]
   1f41e:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
   1f420:	68fb      	ldr	r3, [r7, #12]
   1f422:	08db      	lsrs	r3, r3, #3
   1f424:	220f      	movs	r2, #15
   1f426:	401a      	ands	r2, r3
   1f428:	4b26      	ldr	r3, [pc, #152]	; (1f4c4 <mmc_decode_csd+0x128>)
   1f42a:	0092      	lsls	r2, r2, #2
   1f42c:	58d3      	ldr	r3, [r2, r3]
   1f42e:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1f430:	4b21      	ldr	r3, [pc, #132]	; (1f4b8 <mmc_decode_csd+0x11c>)
   1f432:	681b      	ldr	r3, [r3, #0]
   1f434:	68ba      	ldr	r2, [r7, #8]
   1f436:	6879      	ldr	r1, [r7, #4]
   1f438:	434a      	muls	r2, r1
   1f43a:	21fa      	movs	r1, #250	; 0xfa
   1f43c:	0089      	lsls	r1, r1, #2
   1f43e:	434a      	muls	r2, r1
   1f440:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD/MMC card:
	 * memory capacity = SEC_COUNT * 512 byte
	 */
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
   1f442:	4b1d      	ldr	r3, [pc, #116]	; (1f4b8 <mmc_decode_csd+0x11c>)
   1f444:	681b      	ldr	r3, [r3, #0]
   1f446:	330e      	adds	r3, #14
   1f448:	0018      	movs	r0, r3
   1f44a:	230c      	movs	r3, #12
   1f44c:	223e      	movs	r2, #62	; 0x3e
   1f44e:	2180      	movs	r1, #128	; 0x80
   1f450:	4c1a      	ldr	r4, [pc, #104]	; (1f4bc <mmc_decode_csd+0x120>)
   1f452:	47a0      	blx	r4
   1f454:	0002      	movs	r2, r0
   1f456:	4b1c      	ldr	r3, [pc, #112]	; (1f4c8 <mmc_decode_csd+0x12c>)
   1f458:	429a      	cmp	r2, r3
   1f45a:	d028      	beq.n	1f4ae <mmc_decode_csd+0x112>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1f45c:	4b16      	ldr	r3, [pc, #88]	; (1f4b8 <mmc_decode_csd+0x11c>)
   1f45e:	681b      	ldr	r3, [r3, #0]
   1f460:	330e      	adds	r3, #14
   1f462:	0018      	movs	r0, r3
   1f464:	230c      	movs	r3, #12
   1f466:	223e      	movs	r2, #62	; 0x3e
   1f468:	2180      	movs	r1, #128	; 0x80
   1f46a:	4c14      	ldr	r4, [pc, #80]	; (1f4bc <mmc_decode_csd+0x120>)
   1f46c:	47a0      	blx	r4
   1f46e:	0003      	movs	r3, r0
   1f470:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1f472:	4b11      	ldr	r3, [pc, #68]	; (1f4b8 <mmc_decode_csd+0x11c>)
   1f474:	681b      	ldr	r3, [r3, #0]
   1f476:	330e      	adds	r3, #14
   1f478:	0018      	movs	r0, r3
   1f47a:	2303      	movs	r3, #3
   1f47c:	222f      	movs	r2, #47	; 0x2f
   1f47e:	2180      	movs	r1, #128	; 0x80
   1f480:	4d0e      	ldr	r5, [pc, #56]	; (1f4bc <mmc_decode_csd+0x120>)
   1f482:	47a8      	blx	r5
   1f484:	0003      	movs	r3, r0
   1f486:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
   1f488:	409c      	lsls	r4, r3
   1f48a:	0023      	movs	r3, r4
   1f48c:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1f48e:	4b0a      	ldr	r3, [pc, #40]	; (1f4b8 <mmc_decode_csd+0x11c>)
   1f490:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1f492:	4b09      	ldr	r3, [pc, #36]	; (1f4b8 <mmc_decode_csd+0x11c>)
   1f494:	681b      	ldr	r3, [r3, #0]
   1f496:	330e      	adds	r3, #14
   1f498:	0018      	movs	r0, r3
   1f49a:	2304      	movs	r3, #4
   1f49c:	2250      	movs	r2, #80	; 0x50
   1f49e:	2180      	movs	r1, #128	; 0x80
   1f4a0:	4d06      	ldr	r5, [pc, #24]	; (1f4bc <mmc_decode_csd+0x120>)
   1f4a2:	47a8      	blx	r5
   1f4a4:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1f4a6:	683b      	ldr	r3, [r7, #0]
   1f4a8:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
   1f4aa:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1f4ac:	6063      	str	r3, [r4, #4]
	}
}
   1f4ae:	46c0      	nop			; (mov r8, r8)
   1f4b0:	46bd      	mov	sp, r7
   1f4b2:	b004      	add	sp, #16
   1f4b4:	bdb0      	pop	{r4, r5, r7, pc}
   1f4b6:	46c0      	nop			; (mov r8, r8)
   1f4b8:	20004244 	.word	0x20004244
   1f4bc:	0001ee99 	.word	0x0001ee99
   1f4c0:	000393ac 	.word	0x000393ac
   1f4c4:	00039408 	.word	0x00039408
   1f4c8:	00000fff 	.word	0x00000fff

0001f4cc <sd_decode_csd>:

/**
 * \brief Decodes SD CSD register
 */
static void sd_decode_csd(void)
{
   1f4cc:	b5b0      	push	{r4, r5, r7, lr}
   1f4ce:	b084      	sub	sp, #16
   1f4d0:	af00      	add	r7, sp, #0
 	uint32_t unit;
	uint32_t mul;
	uint32_t tran_speed;

	// Get SD memory maximum transfer speed in Hz.
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
   1f4d2:	4b35      	ldr	r3, [pc, #212]	; (1f5a8 <sd_decode_csd+0xdc>)
   1f4d4:	681b      	ldr	r3, [r3, #0]
   1f4d6:	330e      	adds	r3, #14
   1f4d8:	0018      	movs	r0, r3
   1f4da:	2308      	movs	r3, #8
   1f4dc:	2260      	movs	r2, #96	; 0x60
   1f4de:	2180      	movs	r1, #128	; 0x80
   1f4e0:	4c32      	ldr	r4, [pc, #200]	; (1f5ac <sd_decode_csd+0xe0>)
   1f4e2:	47a0      	blx	r4
   1f4e4:	0003      	movs	r3, r0
   1f4e6:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
   1f4e8:	68fb      	ldr	r3, [r7, #12]
   1f4ea:	2207      	movs	r2, #7
   1f4ec:	401a      	ands	r2, r3
   1f4ee:	4b30      	ldr	r3, [pc, #192]	; (1f5b0 <sd_decode_csd+0xe4>)
   1f4f0:	0092      	lsls	r2, r2, #2
   1f4f2:	58d3      	ldr	r3, [r2, r3]
   1f4f4:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
   1f4f6:	68fb      	ldr	r3, [r7, #12]
   1f4f8:	08db      	lsrs	r3, r3, #3
   1f4fa:	220f      	movs	r2, #15
   1f4fc:	401a      	ands	r2, r3
   1f4fe:	4b2d      	ldr	r3, [pc, #180]	; (1f5b4 <sd_decode_csd+0xe8>)
   1f500:	0092      	lsls	r2, r2, #2
   1f502:	58d3      	ldr	r3, [r2, r3]
   1f504:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
   1f506:	4b28      	ldr	r3, [pc, #160]	; (1f5a8 <sd_decode_csd+0xdc>)
   1f508:	681b      	ldr	r3, [r3, #0]
   1f50a:	68ba      	ldr	r2, [r7, #8]
   1f50c:	6879      	ldr	r1, [r7, #4]
   1f50e:	434a      	muls	r2, r1
   1f510:	21fa      	movs	r1, #250	; 0xfa
   1f512:	0089      	lsls	r1, r1, #2
   1f514:	434a      	muls	r2, r1
   1f516:	601a      	str	r2, [r3, #0]
	 * BLOCK_LEN = 2 ^ READ_BL_LEN      (READ_BL_LEN < 12)
	 * ----------------------------------------------------
	 * For high capacity SD card:
	 * memory capacity = (C_SIZE+1) * 512K byte
	 */
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
   1f518:	4b23      	ldr	r3, [pc, #140]	; (1f5a8 <sd_decode_csd+0xdc>)
   1f51a:	681b      	ldr	r3, [r3, #0]
   1f51c:	330e      	adds	r3, #14
   1f51e:	0018      	movs	r0, r3
   1f520:	2302      	movs	r3, #2
   1f522:	227e      	movs	r2, #126	; 0x7e
   1f524:	2180      	movs	r1, #128	; 0x80
   1f526:	4c21      	ldr	r4, [pc, #132]	; (1f5ac <sd_decode_csd+0xe0>)
   1f528:	47a0      	blx	r4
   1f52a:	1e03      	subs	r3, r0, #0
   1f52c:	d00f      	beq.n	1f54e <sd_decode_csd+0x82>
		sd_mmc_card->capacity =
   1f52e:	4b1e      	ldr	r3, [pc, #120]	; (1f5a8 <sd_decode_csd+0xdc>)
   1f530:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
   1f532:	4b1d      	ldr	r3, [pc, #116]	; (1f5a8 <sd_decode_csd+0xdc>)
   1f534:	681b      	ldr	r3, [r3, #0]
   1f536:	330e      	adds	r3, #14
   1f538:	0018      	movs	r0, r3
   1f53a:	2316      	movs	r3, #22
   1f53c:	2230      	movs	r2, #48	; 0x30
   1f53e:	2180      	movs	r1, #128	; 0x80
   1f540:	4d1a      	ldr	r5, [pc, #104]	; (1f5ac <sd_decode_csd+0xe0>)
   1f542:	47a8      	blx	r5
   1f544:	0003      	movs	r3, r0
				* 512;
   1f546:	3301      	adds	r3, #1
   1f548:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
   1f54a:	6063      	str	r3, [r4, #4]
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
		sd_mmc_card->capacity = blocknr *
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
				/ 1024;
	}
}
   1f54c:	e028      	b.n	1f5a0 <sd_decode_csd+0xd4>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1f54e:	4b16      	ldr	r3, [pc, #88]	; (1f5a8 <sd_decode_csd+0xdc>)
   1f550:	681b      	ldr	r3, [r3, #0]
   1f552:	330e      	adds	r3, #14
   1f554:	0018      	movs	r0, r3
   1f556:	230c      	movs	r3, #12
   1f558:	223e      	movs	r2, #62	; 0x3e
   1f55a:	2180      	movs	r1, #128	; 0x80
   1f55c:	4c13      	ldr	r4, [pc, #76]	; (1f5ac <sd_decode_csd+0xe0>)
   1f55e:	47a0      	blx	r4
   1f560:	0003      	movs	r3, r0
   1f562:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
   1f564:	4b10      	ldr	r3, [pc, #64]	; (1f5a8 <sd_decode_csd+0xdc>)
   1f566:	681b      	ldr	r3, [r3, #0]
   1f568:	330e      	adds	r3, #14
   1f56a:	0018      	movs	r0, r3
   1f56c:	2303      	movs	r3, #3
   1f56e:	222f      	movs	r2, #47	; 0x2f
   1f570:	2180      	movs	r1, #128	; 0x80
   1f572:	4d0e      	ldr	r5, [pc, #56]	; (1f5ac <sd_decode_csd+0xe0>)
   1f574:	47a8      	blx	r5
   1f576:	0003      	movs	r3, r0
   1f578:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
   1f57a:	409c      	lsls	r4, r3
   1f57c:	0023      	movs	r3, r4
   1f57e:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
   1f580:	4b09      	ldr	r3, [pc, #36]	; (1f5a8 <sd_decode_csd+0xdc>)
   1f582:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
   1f584:	4b08      	ldr	r3, [pc, #32]	; (1f5a8 <sd_decode_csd+0xdc>)
   1f586:	681b      	ldr	r3, [r3, #0]
   1f588:	330e      	adds	r3, #14
   1f58a:	0018      	movs	r0, r3
   1f58c:	2304      	movs	r3, #4
   1f58e:	2250      	movs	r2, #80	; 0x50
   1f590:	2180      	movs	r1, #128	; 0x80
   1f592:	4d06      	ldr	r5, [pc, #24]	; (1f5ac <sd_decode_csd+0xe0>)
   1f594:	47a8      	blx	r5
   1f596:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
   1f598:	683b      	ldr	r3, [r7, #0]
   1f59a:	4093      	lsls	r3, r2
				/ 1024;
   1f59c:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
   1f59e:	6063      	str	r3, [r4, #4]
}
   1f5a0:	46c0      	nop			; (mov r8, r8)
   1f5a2:	46bd      	mov	sp, r7
   1f5a4:	b004      	add	sp, #16
   1f5a6:	bdb0      	pop	{r4, r5, r7, pc}
   1f5a8:	20004244 	.word	0x20004244
   1f5ac:	0001ee99 	.word	0x0001ee99
   1f5b0:	000393ac 	.word	0x000393ac
   1f5b4:	000393c8 	.word	0x000393c8

0001f5b8 <sd_mmc_cmd13>:
 * This function waits the clear of the busy flag
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_cmd13(void)
{
   1f5b8:	b580      	push	{r7, lr}
   1f5ba:	b082      	sub	sp, #8
   1f5bc:	af00      	add	r7, sp, #0
	/* Wait for data ready status.
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	nec_timeout = 200000;
   1f5be:	4b11      	ldr	r3, [pc, #68]	; (1f604 <sd_mmc_cmd13+0x4c>)
   1f5c0:	607b      	str	r3, [r7, #4]
	do {
		if (sd_mmc_is_spi()) {
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
   1f5c2:	4b11      	ldr	r3, [pc, #68]	; (1f608 <sd_mmc_cmd13+0x50>)
   1f5c4:	2100      	movs	r1, #0
   1f5c6:	0018      	movs	r0, r3
   1f5c8:	4b10      	ldr	r3, [pc, #64]	; (1f60c <sd_mmc_cmd13+0x54>)
   1f5ca:	4798      	blx	r3
   1f5cc:	0003      	movs	r3, r0
   1f5ce:	001a      	movs	r2, r3
   1f5d0:	2301      	movs	r3, #1
   1f5d2:	4053      	eors	r3, r2
   1f5d4:	b2db      	uxtb	r3, r3
   1f5d6:	2b00      	cmp	r3, #0
   1f5d8:	d001      	beq.n	1f5de <sd_mmc_cmd13+0x26>
				return false;
   1f5da:	2300      	movs	r3, #0
   1f5dc:	e00e      	b.n	1f5fc <sd_mmc_cmd13+0x44>
			}
			// Check busy flag
			if (!(driver_get_response() & 0xFF)) {
   1f5de:	4b0c      	ldr	r3, [pc, #48]	; (1f610 <sd_mmc_cmd13+0x58>)
   1f5e0:	4798      	blx	r3
   1f5e2:	0002      	movs	r2, r0
   1f5e4:	23ff      	movs	r3, #255	; 0xff
   1f5e6:	4013      	ands	r3, r2
   1f5e8:	d006      	beq.n	1f5f8 <sd_mmc_cmd13+0x40>
			// Check busy flag
			if (driver_get_response() & CARD_STATUS_READY_FOR_DATA) {
				break;
			}
		}
		if (nec_timeout-- == 0) {
   1f5ea:	687b      	ldr	r3, [r7, #4]
   1f5ec:	1e5a      	subs	r2, r3, #1
   1f5ee:	607a      	str	r2, [r7, #4]
   1f5f0:	2b00      	cmp	r3, #0
   1f5f2:	d1e6      	bne.n	1f5c2 <sd_mmc_cmd13+0xa>
			sd_mmc_debug("%s: CMD13 Busy timeout\n\r", __func__);
			return false;
   1f5f4:	2300      	movs	r3, #0
   1f5f6:	e001      	b.n	1f5fc <sd_mmc_cmd13+0x44>
				break;
   1f5f8:	46c0      	nop			; (mov r8, r8)
		}
	} while (1);

	return true;
   1f5fa:	2301      	movs	r3, #1
}
   1f5fc:	0018      	movs	r0, r3
   1f5fe:	46bd      	mov	sp, r7
   1f600:	b002      	add	sp, #8
   1f602:	bd80      	pop	{r7, pc}
   1f604:	00030d40 	.word	0x00030d40
   1f608:	00001b0d 	.word	0x00001b0d
   1f60c:	00020a71 	.word	0x00020a71
   1f610:	00020cb1 	.word	0x00020cb1

0001f614 <sd_acmd51>:
 *
 *
 * \return true if success, otherwise false
 */
static bool sd_acmd51(void)
{
   1f614:	b590      	push	{r4, r7, lr}
   1f616:	b085      	sub	sp, #20
   1f618:	af02      	add	r7, sp, #8
	uint8_t scr[SD_SCR_REG_BSIZE];

	// CMD55 - Indicate to the card that the next command is an
	// application specific command rather than a standard command.
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
   1f61a:	4b38      	ldr	r3, [pc, #224]	; (1f6fc <sd_acmd51+0xe8>)
   1f61c:	681b      	ldr	r3, [r3, #0]
   1f61e:	891b      	ldrh	r3, [r3, #8]
   1f620:	041b      	lsls	r3, r3, #16
   1f622:	4a37      	ldr	r2, [pc, #220]	; (1f700 <sd_acmd51+0xec>)
   1f624:	0019      	movs	r1, r3
   1f626:	0010      	movs	r0, r2
   1f628:	4b36      	ldr	r3, [pc, #216]	; (1f704 <sd_acmd51+0xf0>)
   1f62a:	4798      	blx	r3
   1f62c:	0003      	movs	r3, r0
   1f62e:	001a      	movs	r2, r3
   1f630:	2301      	movs	r3, #1
   1f632:	4053      	eors	r3, r2
   1f634:	b2db      	uxtb	r3, r3
   1f636:	2b00      	cmp	r3, #0
   1f638:	d001      	beq.n	1f63e <sd_acmd51+0x2a>
		return false;
   1f63a:	2300      	movs	r3, #0
   1f63c:	e059      	b.n	1f6f2 <sd_acmd51+0xde>
	}
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
   1f63e:	4832      	ldr	r0, [pc, #200]	; (1f708 <sd_acmd51+0xf4>)
   1f640:	2301      	movs	r3, #1
   1f642:	9300      	str	r3, [sp, #0]
   1f644:	2301      	movs	r3, #1
   1f646:	2208      	movs	r2, #8
   1f648:	2100      	movs	r1, #0
   1f64a:	4c30      	ldr	r4, [pc, #192]	; (1f70c <sd_acmd51+0xf8>)
   1f64c:	47a0      	blx	r4
   1f64e:	0003      	movs	r3, r0
   1f650:	001a      	movs	r2, r3
   1f652:	2301      	movs	r3, #1
   1f654:	4053      	eors	r3, r2
   1f656:	b2db      	uxtb	r3, r3
   1f658:	2b00      	cmp	r3, #0
   1f65a:	d001      	beq.n	1f660 <sd_acmd51+0x4c>
			SD_SCR_REG_BSIZE, 1, true)) {
		return false;
   1f65c:	2300      	movs	r3, #0
   1f65e:	e048      	b.n	1f6f2 <sd_acmd51+0xde>
	}
	if (!driver_start_read_blocks(scr, 1)) {
   1f660:	003b      	movs	r3, r7
   1f662:	2101      	movs	r1, #1
   1f664:	0018      	movs	r0, r3
   1f666:	4b2a      	ldr	r3, [pc, #168]	; (1f710 <sd_acmd51+0xfc>)
   1f668:	4798      	blx	r3
   1f66a:	0003      	movs	r3, r0
   1f66c:	001a      	movs	r2, r3
   1f66e:	2301      	movs	r3, #1
   1f670:	4053      	eors	r3, r2
   1f672:	b2db      	uxtb	r3, r3
   1f674:	2b00      	cmp	r3, #0
   1f676:	d001      	beq.n	1f67c <sd_acmd51+0x68>
		return false;
   1f678:	2300      	movs	r3, #0
   1f67a:	e03a      	b.n	1f6f2 <sd_acmd51+0xde>
	}
	if (!driver_wait_end_of_read_blocks()) {
   1f67c:	4b25      	ldr	r3, [pc, #148]	; (1f714 <sd_acmd51+0x100>)
   1f67e:	4798      	blx	r3
   1f680:	0003      	movs	r3, r0
   1f682:	001a      	movs	r2, r3
   1f684:	2301      	movs	r3, #1
   1f686:	4053      	eors	r3, r2
   1f688:	b2db      	uxtb	r3, r3
   1f68a:	2b00      	cmp	r3, #0
   1f68c:	d001      	beq.n	1f692 <sd_acmd51+0x7e>
		return false;
   1f68e:	2300      	movs	r3, #0
   1f690:	e02f      	b.n	1f6f2 <sd_acmd51+0xde>
	}

	// Get SD Memory Card - Spec. Version
	switch (SD_SCR_SD_SPEC(scr)) {
   1f692:	0038      	movs	r0, r7
   1f694:	2304      	movs	r3, #4
   1f696:	2238      	movs	r2, #56	; 0x38
   1f698:	2140      	movs	r1, #64	; 0x40
   1f69a:	4c1f      	ldr	r4, [pc, #124]	; (1f718 <sd_acmd51+0x104>)
   1f69c:	47a0      	blx	r4
   1f69e:	0003      	movs	r3, r0
   1f6a0:	2b01      	cmp	r3, #1
   1f6a2:	d008      	beq.n	1f6b6 <sd_acmd51+0xa2>
   1f6a4:	d302      	bcc.n	1f6ac <sd_acmd51+0x98>
   1f6a6:	2b02      	cmp	r3, #2
   1f6a8:	d00a      	beq.n	1f6c0 <sd_acmd51+0xac>
   1f6aa:	e01c      	b.n	1f6e6 <sd_acmd51+0xd2>
	case SD_SCR_SD_SPEC_1_0_01:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1f6ac:	4b13      	ldr	r3, [pc, #76]	; (1f6fc <sd_acmd51+0xe8>)
   1f6ae:	681b      	ldr	r3, [r3, #0]
   1f6b0:	2210      	movs	r2, #16
   1f6b2:	731a      	strb	r2, [r3, #12]
		break;
   1f6b4:	e01c      	b.n	1f6f0 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_1_10:
		sd_mmc_card->version = CARD_VER_SD_1_10;
   1f6b6:	4b11      	ldr	r3, [pc, #68]	; (1f6fc <sd_acmd51+0xe8>)
   1f6b8:	681b      	ldr	r3, [r3, #0]
   1f6ba:	221a      	movs	r2, #26
   1f6bc:	731a      	strb	r2, [r3, #12]
		break;
   1f6be:	e017      	b.n	1f6f0 <sd_acmd51+0xdc>

	case SD_SCR_SD_SPEC_2_00:
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
   1f6c0:	0038      	movs	r0, r7
   1f6c2:	2301      	movs	r3, #1
   1f6c4:	222f      	movs	r2, #47	; 0x2f
   1f6c6:	2140      	movs	r1, #64	; 0x40
   1f6c8:	4c13      	ldr	r4, [pc, #76]	; (1f718 <sd_acmd51+0x104>)
   1f6ca:	47a0      	blx	r4
   1f6cc:	0003      	movs	r3, r0
   1f6ce:	2b01      	cmp	r3, #1
   1f6d0:	d104      	bne.n	1f6dc <sd_acmd51+0xc8>
			sd_mmc_card->version = CARD_VER_SD_3_0;
   1f6d2:	4b0a      	ldr	r3, [pc, #40]	; (1f6fc <sd_acmd51+0xe8>)
   1f6d4:	681b      	ldr	r3, [r3, #0]
   1f6d6:	2230      	movs	r2, #48	; 0x30
   1f6d8:	731a      	strb	r2, [r3, #12]
		} else {
			sd_mmc_card->version = CARD_VER_SD_2_0;
		}
		break;
   1f6da:	e009      	b.n	1f6f0 <sd_acmd51+0xdc>
			sd_mmc_card->version = CARD_VER_SD_2_0;
   1f6dc:	4b07      	ldr	r3, [pc, #28]	; (1f6fc <sd_acmd51+0xe8>)
   1f6de:	681b      	ldr	r3, [r3, #0]
   1f6e0:	2220      	movs	r2, #32
   1f6e2:	731a      	strb	r2, [r3, #12]
		break;
   1f6e4:	e004      	b.n	1f6f0 <sd_acmd51+0xdc>

	default:
		sd_mmc_card->version = CARD_VER_SD_1_0;
   1f6e6:	4b05      	ldr	r3, [pc, #20]	; (1f6fc <sd_acmd51+0xe8>)
   1f6e8:	681b      	ldr	r3, [r3, #0]
   1f6ea:	2210      	movs	r2, #16
   1f6ec:	731a      	strb	r2, [r3, #12]
		break;
   1f6ee:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   1f6f0:	2301      	movs	r3, #1
}
   1f6f2:	0018      	movs	r0, r3
   1f6f4:	46bd      	mov	sp, r7
   1f6f6:	b003      	add	sp, #12
   1f6f8:	bd90      	pop	{r4, r7, pc}
   1f6fa:	46c0      	nop			; (mov r8, r8)
   1f6fc:	20004244 	.word	0x20004244
   1f700:	00001137 	.word	0x00001137
   1f704:	00020a71 	.word	0x00020a71
   1f708:	00081133 	.word	0x00081133
   1f70c:	00020a99 	.word	0x00020a99
   1f710:	00020d69 	.word	0x00020d69
   1f714:	00020e0d 	.word	0x00020e0d
   1f718:	0001ee99 	.word	0x0001ee99

0001f71c <sd_mmc_select_slot>:
 * \retval SD_MMC_ERR_UNUSABLE Unusable card
 * \retval SD_MMC_INIT_ONGOING Card initialization requested
 * \retval SD_MMC_OK           Card present
 */
static sd_mmc_err_t sd_mmc_select_slot(uint8_t slot)
{
   1f71c:	b580      	push	{r7, lr}
   1f71e:	b082      	sub	sp, #8
   1f720:	af00      	add	r7, sp, #0
   1f722:	0002      	movs	r2, r0
   1f724:	1dfb      	adds	r3, r7, #7
   1f726:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
   1f728:	1dfb      	adds	r3, r7, #7
   1f72a:	781b      	ldrb	r3, [r3, #0]
   1f72c:	2b00      	cmp	r3, #0
   1f72e:	d001      	beq.n	1f734 <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
   1f730:	2304      	movs	r3, #4
   1f732:	e047      	b.n	1f7c4 <sd_mmc_select_slot+0xa8>
	if (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE) {
		return SD_MMC_ERR_UNUSABLE;
	}
#else
	// No pin card detection, then always try to install it
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
   1f734:	1dfb      	adds	r3, r7, #7
   1f736:	781b      	ldrb	r3, [r3, #0]
   1f738:	4a24      	ldr	r2, [pc, #144]	; (1f7cc <sd_mmc_select_slot+0xb0>)
   1f73a:	015b      	lsls	r3, r3, #5
   1f73c:	18d3      	adds	r3, r2, r3
   1f73e:	330a      	adds	r3, #10
   1f740:	781b      	ldrb	r3, [r3, #0]
   1f742:	2b04      	cmp	r3, #4
   1f744:	d008      	beq.n	1f758 <sd_mmc_select_slot+0x3c>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
   1f746:	1dfb      	adds	r3, r7, #7
   1f748:	781b      	ldrb	r3, [r3, #0]
   1f74a:	4a20      	ldr	r2, [pc, #128]	; (1f7cc <sd_mmc_select_slot+0xb0>)
   1f74c:	015b      	lsls	r3, r3, #5
   1f74e:	18d3      	adds	r3, r2, r3
   1f750:	330a      	adds	r3, #10
   1f752:	781b      	ldrb	r3, [r3, #0]
   1f754:	2b03      	cmp	r3, #3
   1f756:	d11d      	bne.n	1f794 <sd_mmc_select_slot+0x78>
		// Card is not initialized
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
   1f758:	1dfb      	adds	r3, r7, #7
   1f75a:	781b      	ldrb	r3, [r3, #0]
   1f75c:	4a1b      	ldr	r2, [pc, #108]	; (1f7cc <sd_mmc_select_slot+0xb0>)
   1f75e:	015b      	lsls	r3, r3, #5
   1f760:	18d3      	adds	r3, r2, r3
   1f762:	330a      	adds	r3, #10
   1f764:	2202      	movs	r2, #2
   1f766:	701a      	strb	r2, [r3, #0]
		// Set 1-bit bus width and low clock for initialization
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
   1f768:	1dfb      	adds	r3, r7, #7
   1f76a:	781a      	ldrb	r2, [r3, #0]
   1f76c:	4b17      	ldr	r3, [pc, #92]	; (1f7cc <sd_mmc_select_slot+0xb0>)
   1f76e:	0152      	lsls	r2, r2, #5
   1f770:	4917      	ldr	r1, [pc, #92]	; (1f7d0 <sd_mmc_select_slot+0xb4>)
   1f772:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
   1f774:	1dfb      	adds	r3, r7, #7
   1f776:	781b      	ldrb	r3, [r3, #0]
   1f778:	4a14      	ldr	r2, [pc, #80]	; (1f7cc <sd_mmc_select_slot+0xb0>)
   1f77a:	015b      	lsls	r3, r3, #5
   1f77c:	18d3      	adds	r3, r2, r3
   1f77e:	330d      	adds	r3, #13
   1f780:	2201      	movs	r2, #1
   1f782:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
   1f784:	1dfb      	adds	r3, r7, #7
   1f786:	781b      	ldrb	r3, [r3, #0]
   1f788:	4a10      	ldr	r2, [pc, #64]	; (1f7cc <sd_mmc_select_slot+0xb0>)
   1f78a:	015b      	lsls	r3, r3, #5
   1f78c:	18d3      	adds	r3, r2, r3
   1f78e:	331e      	adds	r3, #30
   1f790:	2200      	movs	r2, #0
   1f792:	701a      	strb	r2, [r3, #0]
	}
#endif

	// Initialize interface
	sd_mmc_slot_sel = slot;
   1f794:	4b0f      	ldr	r3, [pc, #60]	; (1f7d4 <sd_mmc_select_slot+0xb8>)
   1f796:	1dfa      	adds	r2, r7, #7
   1f798:	7812      	ldrb	r2, [r2, #0]
   1f79a:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
   1f79c:	1dfb      	adds	r3, r7, #7
   1f79e:	781b      	ldrb	r3, [r3, #0]
   1f7a0:	015a      	lsls	r2, r3, #5
   1f7a2:	4b0a      	ldr	r3, [pc, #40]	; (1f7cc <sd_mmc_select_slot+0xb0>)
   1f7a4:	18d2      	adds	r2, r2, r3
   1f7a6:	4b0c      	ldr	r3, [pc, #48]	; (1f7d8 <sd_mmc_select_slot+0xbc>)
   1f7a8:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
   1f7aa:	4b0c      	ldr	r3, [pc, #48]	; (1f7dc <sd_mmc_select_slot+0xc0>)
   1f7ac:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
   1f7ae:	1dfb      	adds	r3, r7, #7
   1f7b0:	781b      	ldrb	r3, [r3, #0]
   1f7b2:	4a06      	ldr	r2, [pc, #24]	; (1f7cc <sd_mmc_select_slot+0xb0>)
   1f7b4:	015b      	lsls	r3, r3, #5
   1f7b6:	18d3      	adds	r3, r2, r3
   1f7b8:	330a      	adds	r3, #10
   1f7ba:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
   1f7bc:	3b02      	subs	r3, #2
   1f7be:	425a      	negs	r2, r3
   1f7c0:	4153      	adcs	r3, r2
   1f7c2:	b2db      	uxtb	r3, r3
}
   1f7c4:	0018      	movs	r0, r3
   1f7c6:	46bd      	mov	sp, r7
   1f7c8:	b002      	add	sp, #8
   1f7ca:	bd80      	pop	{r7, pc}
   1f7cc:	20004220 	.word	0x20004220
   1f7d0:	00061a80 	.word	0x00061a80
   1f7d4:	20004240 	.word	0x20004240
   1f7d8:	20004244 	.word	0x20004244
   1f7dc:	0001f7e1 	.word	0x0001f7e1

0001f7e0 <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
   1f7e0:	b5b0      	push	{r4, r5, r7, lr}
   1f7e2:	af00      	add	r7, sp, #0
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1f7e4:	4b09      	ldr	r3, [pc, #36]	; (1f80c <sd_mmc_configure_slot+0x2c>)
   1f7e6:	7818      	ldrb	r0, [r3, #0]
   1f7e8:	4b09      	ldr	r3, [pc, #36]	; (1f810 <sd_mmc_configure_slot+0x30>)
   1f7ea:	681b      	ldr	r3, [r3, #0]
   1f7ec:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1f7ee:	4b08      	ldr	r3, [pc, #32]	; (1f810 <sd_mmc_configure_slot+0x30>)
   1f7f0:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1f7f2:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
   1f7f4:	4b06      	ldr	r3, [pc, #24]	; (1f810 <sd_mmc_configure_slot+0x30>)
   1f7f6:	681b      	ldr	r3, [r3, #0]
   1f7f8:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
   1f7fa:	1e5c      	subs	r4, r3, #1
   1f7fc:	41a3      	sbcs	r3, r4
   1f7fe:	b2db      	uxtb	r3, r3
   1f800:	4c04      	ldr	r4, [pc, #16]	; (1f814 <sd_mmc_configure_slot+0x34>)
   1f802:	47a0      	blx	r4
}
   1f804:	46c0      	nop			; (mov r8, r8)
   1f806:	46bd      	mov	sp, r7
   1f808:	bdb0      	pop	{r4, r5, r7, pc}
   1f80a:	46c0      	nop			; (mov r8, r8)
   1f80c:	20004240 	.word	0x20004240
   1f810:	20004244 	.word	0x20004244
   1f814:	00020959 	.word	0x00020959

0001f818 <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
   1f818:	b580      	push	{r7, lr}
   1f81a:	af00      	add	r7, sp, #0
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
   1f81c:	4b05      	ldr	r3, [pc, #20]	; (1f834 <sd_mmc_deselect_slot+0x1c>)
   1f81e:	781b      	ldrb	r3, [r3, #0]
   1f820:	2b00      	cmp	r3, #0
   1f822:	d104      	bne.n	1f82e <sd_mmc_deselect_slot+0x16>
		driver_deselect_device(sd_mmc_slot_sel);
   1f824:	4b03      	ldr	r3, [pc, #12]	; (1f834 <sd_mmc_deselect_slot+0x1c>)
   1f826:	781b      	ldrb	r3, [r3, #0]
   1f828:	0018      	movs	r0, r3
   1f82a:	4b03      	ldr	r3, [pc, #12]	; (1f838 <sd_mmc_deselect_slot+0x20>)
   1f82c:	4798      	blx	r3
	}
}
   1f82e:	46c0      	nop			; (mov r8, r8)
   1f830:	46bd      	mov	sp, r7
   1f832:	bd80      	pop	{r7, pc}
   1f834:	20004240 	.word	0x20004240
   1f838:	000209e1 	.word	0x000209e1

0001f83c <sd_mmc_spi_card_init>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_card_init(void)
{
   1f83c:	b580      	push	{r7, lr}
   1f83e:	b082      	sub	sp, #8
   1f840:	af00      	add	r7, sp, #0
	uint8_t v2 = 0;
   1f842:	1dfb      	adds	r3, r7, #7
   1f844:	2200      	movs	r2, #0
   1f846:	701a      	strb	r2, [r3, #0]

	// In first, try to install SD/SDIO card
	sd_mmc_card->type = CARD_TYPE_SD;
   1f848:	4b59      	ldr	r3, [pc, #356]	; (1f9b0 <sd_mmc_spi_card_init+0x174>)
   1f84a:	681b      	ldr	r3, [r3, #0]
   1f84c:	2201      	movs	r2, #1
   1f84e:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
   1f850:	4b57      	ldr	r3, [pc, #348]	; (1f9b0 <sd_mmc_spi_card_init+0x174>)
   1f852:	681b      	ldr	r3, [r3, #0]
   1f854:	2200      	movs	r2, #0
   1f856:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
   1f858:	4b55      	ldr	r3, [pc, #340]	; (1f9b0 <sd_mmc_spi_card_init+0x174>)
   1f85a:	681b      	ldr	r3, [r3, #0]
   1f85c:	2200      	movs	r2, #0
   1f85e:	811a      	strh	r2, [r3, #8]
	sd_mmc_debug("Start SD card install\n\r");

	// Card need of 74 cycles clock minimum to start
	driver_send_clock();
   1f860:	4b54      	ldr	r3, [pc, #336]	; (1f9b4 <sd_mmc_spi_card_init+0x178>)
   1f862:	4798      	blx	r3

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1f864:	2388      	movs	r3, #136	; 0x88
   1f866:	015b      	lsls	r3, r3, #5
   1f868:	2100      	movs	r1, #0
   1f86a:	0018      	movs	r0, r3
   1f86c:	4b52      	ldr	r3, [pc, #328]	; (1f9b8 <sd_mmc_spi_card_init+0x17c>)
   1f86e:	4798      	blx	r3
   1f870:	0003      	movs	r3, r0
   1f872:	001a      	movs	r2, r3
   1f874:	2301      	movs	r3, #1
   1f876:	4053      	eors	r3, r2
   1f878:	b2db      	uxtb	r3, r3
   1f87a:	2b00      	cmp	r3, #0
   1f87c:	d001      	beq.n	1f882 <sd_mmc_spi_card_init+0x46>
		return false;
   1f87e:	2300      	movs	r3, #0
   1f880:	e092      	b.n	1f9a8 <sd_mmc_spi_card_init+0x16c>
	}
	if (!sd_cmd8(&v2)) {
   1f882:	1dfb      	adds	r3, r7, #7
   1f884:	0018      	movs	r0, r3
   1f886:	4b4d      	ldr	r3, [pc, #308]	; (1f9bc <sd_mmc_spi_card_init+0x180>)
   1f888:	4798      	blx	r3
   1f88a:	0003      	movs	r3, r0
   1f88c:	001a      	movs	r2, r3
   1f88e:	2301      	movs	r3, #1
   1f890:	4053      	eors	r3, r2
   1f892:	b2db      	uxtb	r3, r3
   1f894:	2b00      	cmp	r3, #0
   1f896:	d001      	beq.n	1f89c <sd_mmc_spi_card_init+0x60>
		return false;
   1f898:	2300      	movs	r3, #0
   1f89a:	e085      	b.n	1f9a8 <sd_mmc_spi_card_init+0x16c>
	}
	// Try to get the SDIO card's operating condition
	if (!sdio_op_cond()) {
   1f89c:	4b48      	ldr	r3, [pc, #288]	; (1f9c0 <sd_mmc_spi_card_init+0x184>)
   1f89e:	4798      	blx	r3
   1f8a0:	0003      	movs	r3, r0
   1f8a2:	001a      	movs	r2, r3
   1f8a4:	2301      	movs	r3, #1
   1f8a6:	4053      	eors	r3, r2
   1f8a8:	b2db      	uxtb	r3, r3
   1f8aa:	2b00      	cmp	r3, #0
   1f8ac:	d001      	beq.n	1f8b2 <sd_mmc_spi_card_init+0x76>
		return false;
   1f8ae:	2300      	movs	r3, #0
   1f8b0:	e07a      	b.n	1f9a8 <sd_mmc_spi_card_init+0x16c>
	}

	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1f8b2:	4b3f      	ldr	r3, [pc, #252]	; (1f9b0 <sd_mmc_spi_card_init+0x174>)
   1f8b4:	681b      	ldr	r3, [r3, #0]
   1f8b6:	7adb      	ldrb	r3, [r3, #11]
   1f8b8:	001a      	movs	r2, r3
   1f8ba:	2301      	movs	r3, #1
   1f8bc:	4013      	ands	r3, r2
   1f8be:	d021      	beq.n	1f904 <sd_mmc_spi_card_init+0xc8>
		// Try to get the SD card's operating condition
		if (!sd_spi_op_cond(v2)) {
   1f8c0:	1dfb      	adds	r3, r7, #7
   1f8c2:	781b      	ldrb	r3, [r3, #0]
   1f8c4:	0018      	movs	r0, r3
   1f8c6:	4b3f      	ldr	r3, [pc, #252]	; (1f9c4 <sd_mmc_spi_card_init+0x188>)
   1f8c8:	4798      	blx	r3
   1f8ca:	0003      	movs	r3, r0
   1f8cc:	001a      	movs	r2, r3
   1f8ce:	2301      	movs	r3, #1
   1f8d0:	4053      	eors	r3, r2
   1f8d2:	b2db      	uxtb	r3, r3
   1f8d4:	2b00      	cmp	r3, #0
   1f8d6:	d007      	beq.n	1f8e8 <sd_mmc_spi_card_init+0xac>
			// It is not a SD card
			sd_mmc_debug("Start MMC Install\n\r");
			sd_mmc_card->type = CARD_TYPE_MMC;
   1f8d8:	4b35      	ldr	r3, [pc, #212]	; (1f9b0 <sd_mmc_spi_card_init+0x174>)
   1f8da:	681b      	ldr	r3, [r3, #0]
   1f8dc:	2202      	movs	r2, #2
   1f8de:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
   1f8e0:	4b39      	ldr	r3, [pc, #228]	; (1f9c8 <sd_mmc_spi_card_init+0x18c>)
   1f8e2:	4798      	blx	r3
   1f8e4:	0003      	movs	r3, r0
   1f8e6:	e05f      	b.n	1f9a8 <sd_mmc_spi_card_init+0x16c>
		 * However, to be sure, the CRC OFF command is send.
		 * Unfortunately, specific SDIO card does not support it
		 * (H&D wireless card - HDG104 WiFi SIP)
		 * and the command is send only on SD card.
		 */
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1f8e8:	4b38      	ldr	r3, [pc, #224]	; (1f9cc <sd_mmc_spi_card_init+0x190>)
   1f8ea:	2100      	movs	r1, #0
   1f8ec:	0018      	movs	r0, r3
   1f8ee:	4b32      	ldr	r3, [pc, #200]	; (1f9b8 <sd_mmc_spi_card_init+0x17c>)
   1f8f0:	4798      	blx	r3
   1f8f2:	0003      	movs	r3, r0
   1f8f4:	001a      	movs	r2, r3
   1f8f6:	2301      	movs	r3, #1
   1f8f8:	4053      	eors	r3, r2
   1f8fa:	b2db      	uxtb	r3, r3
   1f8fc:	2b00      	cmp	r3, #0
   1f8fe:	d001      	beq.n	1f904 <sd_mmc_spi_card_init+0xc8>
			return false;
   1f900:	2300      	movs	r3, #0
   1f902:	e051      	b.n	1f9a8 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// SD MEMORY
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1f904:	4b2a      	ldr	r3, [pc, #168]	; (1f9b0 <sd_mmc_spi_card_init+0x174>)
   1f906:	681b      	ldr	r3, [r3, #0]
   1f908:	7adb      	ldrb	r3, [r3, #11]
   1f90a:	001a      	movs	r2, r3
   1f90c:	2301      	movs	r3, #1
   1f90e:	4013      	ands	r3, r2
   1f910:	d017      	beq.n	1f942 <sd_mmc_spi_card_init+0x106>
		// Get the Card-Specific Data
		if (!sd_mmc_cmd9_spi()) {
   1f912:	4b2f      	ldr	r3, [pc, #188]	; (1f9d0 <sd_mmc_spi_card_init+0x194>)
   1f914:	4798      	blx	r3
   1f916:	0003      	movs	r3, r0
   1f918:	001a      	movs	r2, r3
   1f91a:	2301      	movs	r3, #1
   1f91c:	4053      	eors	r3, r2
   1f91e:	b2db      	uxtb	r3, r3
   1f920:	2b00      	cmp	r3, #0
   1f922:	d001      	beq.n	1f928 <sd_mmc_spi_card_init+0xec>
			return false;
   1f924:	2300      	movs	r3, #0
   1f926:	e03f      	b.n	1f9a8 <sd_mmc_spi_card_init+0x16c>
		}
		sd_decode_csd();
   1f928:	4b2a      	ldr	r3, [pc, #168]	; (1f9d4 <sd_mmc_spi_card_init+0x198>)
   1f92a:	4798      	blx	r3
		// Read the SCR to get card version
		if (!sd_acmd51()) {
   1f92c:	4b2a      	ldr	r3, [pc, #168]	; (1f9d8 <sd_mmc_spi_card_init+0x19c>)
   1f92e:	4798      	blx	r3
   1f930:	0003      	movs	r3, r0
   1f932:	001a      	movs	r2, r3
   1f934:	2301      	movs	r3, #1
   1f936:	4053      	eors	r3, r2
   1f938:	b2db      	uxtb	r3, r3
   1f93a:	2b00      	cmp	r3, #0
   1f93c:	d001      	beq.n	1f942 <sd_mmc_spi_card_init+0x106>
			return false;
   1f93e:	2300      	movs	r3, #0
   1f940:	e032      	b.n	1f9a8 <sd_mmc_spi_card_init+0x16c>
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	// SD MEMORY not HC, Set default block size
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1f942:	4b1b      	ldr	r3, [pc, #108]	; (1f9b0 <sd_mmc_spi_card_init+0x174>)
   1f944:	681b      	ldr	r3, [r3, #0]
   1f946:	7adb      	ldrb	r3, [r3, #11]
   1f948:	001a      	movs	r2, r3
   1f94a:	2301      	movs	r3, #1
   1f94c:	4013      	ands	r3, r2
   1f94e:	d016      	beq.n	1f97e <sd_mmc_spi_card_init+0x142>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
   1f950:	4b17      	ldr	r3, [pc, #92]	; (1f9b0 <sd_mmc_spi_card_init+0x174>)
   1f952:	681b      	ldr	r3, [r3, #0]
   1f954:	7adb      	ldrb	r3, [r3, #11]
   1f956:	001a      	movs	r2, r3
   1f958:	2308      	movs	r3, #8
   1f95a:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
   1f95c:	d10f      	bne.n	1f97e <sd_mmc_spi_card_init+0x142>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1f95e:	2380      	movs	r3, #128	; 0x80
   1f960:	009b      	lsls	r3, r3, #2
   1f962:	4a1e      	ldr	r2, [pc, #120]	; (1f9dc <sd_mmc_spi_card_init+0x1a0>)
   1f964:	0019      	movs	r1, r3
   1f966:	0010      	movs	r0, r2
   1f968:	4b13      	ldr	r3, [pc, #76]	; (1f9b8 <sd_mmc_spi_card_init+0x17c>)
   1f96a:	4798      	blx	r3
   1f96c:	0003      	movs	r3, r0
   1f96e:	001a      	movs	r2, r3
   1f970:	2301      	movs	r3, #1
   1f972:	4053      	eors	r3, r2
   1f974:	b2db      	uxtb	r3, r3
   1f976:	2b00      	cmp	r3, #0
   1f978:	d001      	beq.n	1f97e <sd_mmc_spi_card_init+0x142>
			return false;
   1f97a:	2300      	movs	r3, #0
   1f97c:	e014      	b.n	1f9a8 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Check communication
	if (sd_mmc_card->type & CARD_TYPE_SD) {
   1f97e:	4b0c      	ldr	r3, [pc, #48]	; (1f9b0 <sd_mmc_spi_card_init+0x174>)
   1f980:	681b      	ldr	r3, [r3, #0]
   1f982:	7adb      	ldrb	r3, [r3, #11]
   1f984:	001a      	movs	r2, r3
   1f986:	2301      	movs	r3, #1
   1f988:	4013      	ands	r3, r2
   1f98a:	d00a      	beq.n	1f9a2 <sd_mmc_spi_card_init+0x166>
		if (!sd_mmc_cmd13()) {
   1f98c:	4b14      	ldr	r3, [pc, #80]	; (1f9e0 <sd_mmc_spi_card_init+0x1a4>)
   1f98e:	4798      	blx	r3
   1f990:	0003      	movs	r3, r0
   1f992:	001a      	movs	r2, r3
   1f994:	2301      	movs	r3, #1
   1f996:	4053      	eors	r3, r2
   1f998:	b2db      	uxtb	r3, r3
   1f99a:	2b00      	cmp	r3, #0
   1f99c:	d001      	beq.n	1f9a2 <sd_mmc_spi_card_init+0x166>
			return false;
   1f99e:	2300      	movs	r3, #0
   1f9a0:	e002      	b.n	1f9a8 <sd_mmc_spi_card_init+0x16c>
		}
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1f9a2:	4b10      	ldr	r3, [pc, #64]	; (1f9e4 <sd_mmc_spi_card_init+0x1a8>)
   1f9a4:	4798      	blx	r3
	return true;
   1f9a6:	2301      	movs	r3, #1
}
   1f9a8:	0018      	movs	r0, r3
   1f9aa:	46bd      	mov	sp, r7
   1f9ac:	b002      	add	sp, #8
   1f9ae:	bd80      	pop	{r7, pc}
   1f9b0:	20004244 	.word	0x20004244
   1f9b4:	00020a25 	.word	0x00020a25
   1f9b8:	00020a71 	.word	0x00020a71
   1f9bc:	0001f191 	.word	0x0001f191
   1f9c0:	0001f185 	.word	0x0001f185
   1f9c4:	0001f0a1 	.word	0x0001f0a1
   1f9c8:	0001f9e9 	.word	0x0001f9e9
   1f9cc:	0000113b 	.word	0x0000113b
   1f9d0:	0001f32d 	.word	0x0001f32d
   1f9d4:	0001f4cd 	.word	0x0001f4cd
   1f9d8:	0001f615 	.word	0x0001f615
   1f9dc:	00001110 	.word	0x00001110
   1f9e0:	0001f5b9 	.word	0x0001f5b9
   1f9e4:	0001f7e1 	.word	0x0001f7e1

0001f9e8 <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
   1f9e8:	b580      	push	{r7, lr}
   1f9ea:	b082      	sub	sp, #8
   1f9ec:	af00      	add	r7, sp, #0
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
   1f9ee:	2388      	movs	r3, #136	; 0x88
   1f9f0:	015b      	lsls	r3, r3, #5
   1f9f2:	2100      	movs	r1, #0
   1f9f4:	0018      	movs	r0, r3
   1f9f6:	4b32      	ldr	r3, [pc, #200]	; (1fac0 <sd_mmc_spi_install_mmc+0xd8>)
   1f9f8:	4798      	blx	r3
   1f9fa:	0003      	movs	r3, r0
   1f9fc:	001a      	movs	r2, r3
   1f9fe:	2301      	movs	r3, #1
   1fa00:	4053      	eors	r3, r2
   1fa02:	b2db      	uxtb	r3, r3
   1fa04:	2b00      	cmp	r3, #0
   1fa06:	d001      	beq.n	1fa0c <sd_mmc_spi_install_mmc+0x24>
		return false;
   1fa08:	2300      	movs	r3, #0
   1fa0a:	e055      	b.n	1fab8 <sd_mmc_spi_install_mmc+0xd0>
	}

	if (!mmc_spi_op_cond()) {
   1fa0c:	4b2d      	ldr	r3, [pc, #180]	; (1fac4 <sd_mmc_spi_install_mmc+0xdc>)
   1fa0e:	4798      	blx	r3
   1fa10:	0003      	movs	r3, r0
   1fa12:	001a      	movs	r2, r3
   1fa14:	2301      	movs	r3, #1
   1fa16:	4053      	eors	r3, r2
   1fa18:	b2db      	uxtb	r3, r3
   1fa1a:	2b00      	cmp	r3, #0
   1fa1c:	d001      	beq.n	1fa22 <sd_mmc_spi_install_mmc+0x3a>
		return false;
   1fa1e:	2300      	movs	r3, #0
   1fa20:	e04a      	b.n	1fab8 <sd_mmc_spi_install_mmc+0xd0>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
   1fa22:	4b29      	ldr	r3, [pc, #164]	; (1fac8 <sd_mmc_spi_install_mmc+0xe0>)
   1fa24:	2100      	movs	r1, #0
   1fa26:	0018      	movs	r0, r3
   1fa28:	4b25      	ldr	r3, [pc, #148]	; (1fac0 <sd_mmc_spi_install_mmc+0xd8>)
   1fa2a:	4798      	blx	r3
   1fa2c:	0003      	movs	r3, r0
   1fa2e:	001a      	movs	r2, r3
   1fa30:	2301      	movs	r3, #1
   1fa32:	4053      	eors	r3, r2
   1fa34:	b2db      	uxtb	r3, r3
   1fa36:	2b00      	cmp	r3, #0
   1fa38:	d001      	beq.n	1fa3e <sd_mmc_spi_install_mmc+0x56>
		return false;
   1fa3a:	2300      	movs	r3, #0
   1fa3c:	e03c      	b.n	1fab8 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
   1fa3e:	4b23      	ldr	r3, [pc, #140]	; (1facc <sd_mmc_spi_install_mmc+0xe4>)
   1fa40:	4798      	blx	r3
   1fa42:	0003      	movs	r3, r0
   1fa44:	001a      	movs	r2, r3
   1fa46:	2301      	movs	r3, #1
   1fa48:	4053      	eors	r3, r2
   1fa4a:	b2db      	uxtb	r3, r3
   1fa4c:	2b00      	cmp	r3, #0
   1fa4e:	d001      	beq.n	1fa54 <sd_mmc_spi_install_mmc+0x6c>
		return false;
   1fa50:	2300      	movs	r3, #0
   1fa52:	e031      	b.n	1fab8 <sd_mmc_spi_install_mmc+0xd0>
	}
	mmc_decode_csd();
   1fa54:	4b1e      	ldr	r3, [pc, #120]	; (1fad0 <sd_mmc_spi_install_mmc+0xe8>)
   1fa56:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
   1fa58:	4b1e      	ldr	r3, [pc, #120]	; (1fad4 <sd_mmc_spi_install_mmc+0xec>)
   1fa5a:	681b      	ldr	r3, [r3, #0]
   1fa5c:	7b1b      	ldrb	r3, [r3, #12]
   1fa5e:	2b3f      	cmp	r3, #63	; 0x3f
   1fa60:	d90c      	bls.n	1fa7c <sd_mmc_spi_install_mmc+0x94>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
   1fa62:	1dfb      	adds	r3, r7, #7
   1fa64:	0018      	movs	r0, r3
   1fa66:	4b1c      	ldr	r3, [pc, #112]	; (1fad8 <sd_mmc_spi_install_mmc+0xf0>)
   1fa68:	4798      	blx	r3
   1fa6a:	0003      	movs	r3, r0
   1fa6c:	001a      	movs	r2, r3
   1fa6e:	2301      	movs	r3, #1
   1fa70:	4053      	eors	r3, r2
   1fa72:	b2db      	uxtb	r3, r3
   1fa74:	2b00      	cmp	r3, #0
   1fa76:	d001      	beq.n	1fa7c <sd_mmc_spi_install_mmc+0x94>
			return false;
   1fa78:	2300      	movs	r3, #0
   1fa7a:	e01d      	b.n	1fab8 <sd_mmc_spi_install_mmc+0xd0>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
   1fa7c:	2380      	movs	r3, #128	; 0x80
   1fa7e:	009b      	lsls	r3, r3, #2
   1fa80:	4a16      	ldr	r2, [pc, #88]	; (1fadc <sd_mmc_spi_install_mmc+0xf4>)
   1fa82:	0019      	movs	r1, r3
   1fa84:	0010      	movs	r0, r2
   1fa86:	4b0e      	ldr	r3, [pc, #56]	; (1fac0 <sd_mmc_spi_install_mmc+0xd8>)
   1fa88:	4798      	blx	r3
   1fa8a:	0003      	movs	r3, r0
   1fa8c:	001a      	movs	r2, r3
   1fa8e:	2301      	movs	r3, #1
   1fa90:	4053      	eors	r3, r2
   1fa92:	b2db      	uxtb	r3, r3
   1fa94:	2b00      	cmp	r3, #0
   1fa96:	d001      	beq.n	1fa9c <sd_mmc_spi_install_mmc+0xb4>
		return false;
   1fa98:	2300      	movs	r3, #0
   1fa9a:	e00d      	b.n	1fab8 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
   1fa9c:	4b10      	ldr	r3, [pc, #64]	; (1fae0 <sd_mmc_spi_install_mmc+0xf8>)
   1fa9e:	4798      	blx	r3
   1faa0:	0003      	movs	r3, r0
   1faa2:	001a      	movs	r2, r3
   1faa4:	2301      	movs	r3, #1
   1faa6:	4053      	eors	r3, r2
   1faa8:	b2db      	uxtb	r3, r3
   1faaa:	2b00      	cmp	r3, #0
   1faac:	d001      	beq.n	1fab2 <sd_mmc_spi_install_mmc+0xca>
		return false;
   1faae:	2300      	movs	r3, #0
   1fab0:	e002      	b.n	1fab8 <sd_mmc_spi_install_mmc+0xd0>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
   1fab2:	4b0c      	ldr	r3, [pc, #48]	; (1fae4 <sd_mmc_spi_install_mmc+0xfc>)
   1fab4:	4798      	blx	r3
	return true;
   1fab6:	2301      	movs	r3, #1
}
   1fab8:	0018      	movs	r0, r3
   1faba:	46bd      	mov	sp, r7
   1fabc:	b002      	add	sp, #8
   1fabe:	bd80      	pop	{r7, pc}
   1fac0:	00020a71 	.word	0x00020a71
   1fac4:	0001eff5 	.word	0x0001eff5
   1fac8:	0000113b 	.word	0x0000113b
   1facc:	0001f32d 	.word	0x0001f32d
   1fad0:	0001f39d 	.word	0x0001f39d
   1fad4:	20004244 	.word	0x20004244
   1fad8:	0001f201 	.word	0x0001f201
   1fadc:	00001110 	.word	0x00001110
   1fae0:	0001f5b9 	.word	0x0001f5b9
   1fae4:	0001f7e1 	.word	0x0001f7e1

0001fae8 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
   1fae8:	b580      	push	{r7, lr}
   1faea:	b082      	sub	sp, #8
   1faec:	af00      	add	r7, sp, #0
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1faee:	1dfb      	adds	r3, r7, #7
   1faf0:	2200      	movs	r2, #0
   1faf2:	701a      	strb	r2, [r3, #0]
   1faf4:	e00c      	b.n	1fb10 <sd_mmc_init+0x28>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
   1faf6:	1dfb      	adds	r3, r7, #7
   1faf8:	781b      	ldrb	r3, [r3, #0]
   1fafa:	4a0c      	ldr	r2, [pc, #48]	; (1fb2c <sd_mmc_init+0x44>)
   1fafc:	015b      	lsls	r3, r3, #5
   1fafe:	18d3      	adds	r3, r2, r3
   1fb00:	330a      	adds	r3, #10
   1fb02:	2204      	movs	r2, #4
   1fb04:	701a      	strb	r2, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
   1fb06:	1dfb      	adds	r3, r7, #7
   1fb08:	781a      	ldrb	r2, [r3, #0]
   1fb0a:	1dfb      	adds	r3, r7, #7
   1fb0c:	3201      	adds	r2, #1
   1fb0e:	701a      	strb	r2, [r3, #0]
   1fb10:	1dfb      	adds	r3, r7, #7
   1fb12:	781b      	ldrb	r3, [r3, #0]
   1fb14:	2b00      	cmp	r3, #0
   1fb16:	d0ee      	beq.n	1faf6 <sd_mmc_init+0xe>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
   1fb18:	4b05      	ldr	r3, [pc, #20]	; (1fb30 <sd_mmc_init+0x48>)
   1fb1a:	22ff      	movs	r2, #255	; 0xff
   1fb1c:	701a      	strb	r2, [r3, #0]
	driver_init();
   1fb1e:	4b05      	ldr	r3, [pc, #20]	; (1fb34 <sd_mmc_init+0x4c>)
   1fb20:	4798      	blx	r3
}
   1fb22:	46c0      	nop			; (mov r8, r8)
   1fb24:	46bd      	mov	sp, r7
   1fb26:	b002      	add	sp, #8
   1fb28:	bd80      	pop	{r7, pc}
   1fb2a:	46c0      	nop			; (mov r8, r8)
   1fb2c:	20004220 	.word	0x20004220
   1fb30:	20004240 	.word	0x20004240
   1fb34:	00020891 	.word	0x00020891

0001fb38 <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
   1fb38:	b590      	push	{r4, r7, lr}
   1fb3a:	b085      	sub	sp, #20
   1fb3c:	af00      	add	r7, sp, #0
   1fb3e:	0002      	movs	r2, r0
   1fb40:	1dfb      	adds	r3, r7, #7
   1fb42:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1fb44:	230f      	movs	r3, #15
   1fb46:	18fc      	adds	r4, r7, r3
   1fb48:	1dfb      	adds	r3, r7, #7
   1fb4a:	781b      	ldrb	r3, [r3, #0]
   1fb4c:	0018      	movs	r0, r3
   1fb4e:	4b13      	ldr	r3, [pc, #76]	; (1fb9c <sd_mmc_check+0x64>)
   1fb50:	4798      	blx	r3
   1fb52:	0003      	movs	r3, r0
   1fb54:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
   1fb56:	230f      	movs	r3, #15
   1fb58:	18fb      	adds	r3, r7, r3
   1fb5a:	781b      	ldrb	r3, [r3, #0]
   1fb5c:	2b01      	cmp	r3, #1
   1fb5e:	d005      	beq.n	1fb6c <sd_mmc_check+0x34>
		sd_mmc_deselect_slot();
   1fb60:	4b0f      	ldr	r3, [pc, #60]	; (1fba0 <sd_mmc_check+0x68>)
   1fb62:	4798      	blx	r3
		return sd_mmc_err;
   1fb64:	230f      	movs	r3, #15
   1fb66:	18fb      	adds	r3, r7, r3
   1fb68:	781b      	ldrb	r3, [r3, #0]
   1fb6a:	e012      	b.n	1fb92 <sd_mmc_check+0x5a>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
   1fb6c:	4b0d      	ldr	r3, [pc, #52]	; (1fba4 <sd_mmc_check+0x6c>)
   1fb6e:	4798      	blx	r3
   1fb70:	1e03      	subs	r3, r0, #0
   1fb72:	d007      	beq.n	1fb84 <sd_mmc_check+0x4c>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
   1fb74:	4b0c      	ldr	r3, [pc, #48]	; (1fba8 <sd_mmc_check+0x70>)
   1fb76:	681b      	ldr	r3, [r3, #0]
   1fb78:	2200      	movs	r2, #0
   1fb7a:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
   1fb7c:	4b08      	ldr	r3, [pc, #32]	; (1fba0 <sd_mmc_check+0x68>)
   1fb7e:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
   1fb80:	2301      	movs	r3, #1
   1fb82:	e006      	b.n	1fb92 <sd_mmc_check+0x5a>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
   1fb84:	4b08      	ldr	r3, [pc, #32]	; (1fba8 <sd_mmc_check+0x70>)
   1fb86:	681b      	ldr	r3, [r3, #0]
   1fb88:	2203      	movs	r2, #3
   1fb8a:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
   1fb8c:	4b04      	ldr	r3, [pc, #16]	; (1fba0 <sd_mmc_check+0x68>)
   1fb8e:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
   1fb90:	2303      	movs	r3, #3
}
   1fb92:	0018      	movs	r0, r3
   1fb94:	46bd      	mov	sp, r7
   1fb96:	b005      	add	sp, #20
   1fb98:	bd90      	pop	{r4, r7, pc}
   1fb9a:	46c0      	nop			; (mov r8, r8)
   1fb9c:	0001f71d 	.word	0x0001f71d
   1fba0:	0001f819 	.word	0x0001f819
   1fba4:	0001f83d 	.word	0x0001f83d
   1fba8:	20004244 	.word	0x20004244

0001fbac <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
   1fbac:	b580      	push	{r7, lr}
   1fbae:	b082      	sub	sp, #8
   1fbb0:	af00      	add	r7, sp, #0
   1fbb2:	0002      	movs	r2, r0
   1fbb4:	1dfb      	adds	r3, r7, #7
   1fbb6:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1fbb8:	1dfb      	adds	r3, r7, #7
   1fbba:	781b      	ldrb	r3, [r3, #0]
   1fbbc:	0018      	movs	r0, r3
   1fbbe:	4b07      	ldr	r3, [pc, #28]	; (1fbdc <sd_mmc_get_type+0x30>)
   1fbc0:	4798      	blx	r3
   1fbc2:	1e03      	subs	r3, r0, #0
   1fbc4:	d001      	beq.n	1fbca <sd_mmc_get_type+0x1e>
		return CARD_TYPE_UNKNOWN;
   1fbc6:	2300      	movs	r3, #0
   1fbc8:	e004      	b.n	1fbd4 <sd_mmc_get_type+0x28>
	}
	sd_mmc_deselect_slot();
   1fbca:	4b05      	ldr	r3, [pc, #20]	; (1fbe0 <sd_mmc_get_type+0x34>)
   1fbcc:	4798      	blx	r3
	return sd_mmc_card->type;
   1fbce:	4b05      	ldr	r3, [pc, #20]	; (1fbe4 <sd_mmc_get_type+0x38>)
   1fbd0:	681b      	ldr	r3, [r3, #0]
   1fbd2:	7adb      	ldrb	r3, [r3, #11]
}
   1fbd4:	0018      	movs	r0, r3
   1fbd6:	46bd      	mov	sp, r7
   1fbd8:	b002      	add	sp, #8
   1fbda:	bd80      	pop	{r7, pc}
   1fbdc:	0001f71d 	.word	0x0001f71d
   1fbe0:	0001f819 	.word	0x0001f819
   1fbe4:	20004244 	.word	0x20004244

0001fbe8 <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
   1fbe8:	b580      	push	{r7, lr}
   1fbea:	b082      	sub	sp, #8
   1fbec:	af00      	add	r7, sp, #0
   1fbee:	0002      	movs	r2, r0
   1fbf0:	1dfb      	adds	r3, r7, #7
   1fbf2:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
   1fbf4:	1dfb      	adds	r3, r7, #7
   1fbf6:	781b      	ldrb	r3, [r3, #0]
   1fbf8:	0018      	movs	r0, r3
   1fbfa:	4b07      	ldr	r3, [pc, #28]	; (1fc18 <sd_mmc_get_capacity+0x30>)
   1fbfc:	4798      	blx	r3
   1fbfe:	1e03      	subs	r3, r0, #0
   1fc00:	d001      	beq.n	1fc06 <sd_mmc_get_capacity+0x1e>
		return 0;
   1fc02:	2300      	movs	r3, #0
   1fc04:	e004      	b.n	1fc10 <sd_mmc_get_capacity+0x28>
	}
	sd_mmc_deselect_slot();
   1fc06:	4b05      	ldr	r3, [pc, #20]	; (1fc1c <sd_mmc_get_capacity+0x34>)
   1fc08:	4798      	blx	r3
	return sd_mmc_card->capacity;
   1fc0a:	4b05      	ldr	r3, [pc, #20]	; (1fc20 <sd_mmc_get_capacity+0x38>)
   1fc0c:	681b      	ldr	r3, [r3, #0]
   1fc0e:	685b      	ldr	r3, [r3, #4]
}
   1fc10:	0018      	movs	r0, r3
   1fc12:	46bd      	mov	sp, r7
   1fc14:	b002      	add	sp, #8
   1fc16:	bd80      	pop	{r7, pc}
   1fc18:	0001f71d 	.word	0x0001f71d
   1fc1c:	0001f819 	.word	0x0001f819
   1fc20:	20004244 	.word	0x20004244

0001fc24 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
   1fc24:	b580      	push	{r7, lr}
   1fc26:	b082      	sub	sp, #8
   1fc28:	af00      	add	r7, sp, #0
   1fc2a:	0002      	movs	r2, r0
   1fc2c:	1dfb      	adds	r3, r7, #7
   1fc2e:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
   1fc30:	2300      	movs	r3, #0
}
   1fc32:	0018      	movs	r0, r3
   1fc34:	46bd      	mov	sp, r7
   1fc36:	b002      	add	sp, #8
   1fc38:	bd80      	pop	{r7, pc}
	...

0001fc3c <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1fc3c:	b590      	push	{r4, r7, lr}
   1fc3e:	b089      	sub	sp, #36	; 0x24
   1fc40:	af02      	add	r7, sp, #8
   1fc42:	6039      	str	r1, [r7, #0]
   1fc44:	0011      	movs	r1, r2
   1fc46:	1dfb      	adds	r3, r7, #7
   1fc48:	1c02      	adds	r2, r0, #0
   1fc4a:	701a      	strb	r2, [r3, #0]
   1fc4c:	1d3b      	adds	r3, r7, #4
   1fc4e:	1c0a      	adds	r2, r1, #0
   1fc50:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1fc52:	230f      	movs	r3, #15
   1fc54:	18fc      	adds	r4, r7, r3
   1fc56:	1dfb      	adds	r3, r7, #7
   1fc58:	781b      	ldrb	r3, [r3, #0]
   1fc5a:	0018      	movs	r0, r3
   1fc5c:	4b29      	ldr	r3, [pc, #164]	; (1fd04 <sd_mmc_init_read_blocks+0xc8>)
   1fc5e:	4798      	blx	r3
   1fc60:	0003      	movs	r3, r0
   1fc62:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1fc64:	230f      	movs	r3, #15
   1fc66:	18fb      	adds	r3, r7, r3
   1fc68:	781b      	ldrb	r3, [r3, #0]
   1fc6a:	2b00      	cmp	r3, #0
   1fc6c:	d003      	beq.n	1fc76 <sd_mmc_init_read_blocks+0x3a>
		return sd_mmc_err;
   1fc6e:	230f      	movs	r3, #15
   1fc70:	18fb      	adds	r3, r7, r3
   1fc72:	781b      	ldrb	r3, [r3, #0]
   1fc74:	e041      	b.n	1fcfa <sd_mmc_init_read_blocks+0xbe>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
   1fc76:	4b24      	ldr	r3, [pc, #144]	; (1fd08 <sd_mmc_init_read_blocks+0xcc>)
   1fc78:	4798      	blx	r3
   1fc7a:	0003      	movs	r3, r0
   1fc7c:	001a      	movs	r2, r3
   1fc7e:	2301      	movs	r3, #1
   1fc80:	4053      	eors	r3, r2
   1fc82:	b2db      	uxtb	r3, r3
   1fc84:	2b00      	cmp	r3, #0
   1fc86:	d003      	beq.n	1fc90 <sd_mmc_init_read_blocks+0x54>
		sd_mmc_deselect_slot();
   1fc88:	4b20      	ldr	r3, [pc, #128]	; (1fd0c <sd_mmc_init_read_blocks+0xd0>)
   1fc8a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1fc8c:	2305      	movs	r3, #5
   1fc8e:	e034      	b.n	1fcfa <sd_mmc_init_read_blocks+0xbe>
	}

	if (nb_block > 1) {
   1fc90:	1d3b      	adds	r3, r7, #4
   1fc92:	881b      	ldrh	r3, [r3, #0]
   1fc94:	2b01      	cmp	r3, #1
   1fc96:	d902      	bls.n	1fc9e <sd_mmc_init_read_blocks+0x62>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
   1fc98:	4b1d      	ldr	r3, [pc, #116]	; (1fd10 <sd_mmc_init_read_blocks+0xd4>)
   1fc9a:	617b      	str	r3, [r7, #20]
   1fc9c:	e001      	b.n	1fca2 <sd_mmc_init_read_blocks+0x66>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
   1fc9e:	4b1d      	ldr	r3, [pc, #116]	; (1fd14 <sd_mmc_init_read_blocks+0xd8>)
   1fca0:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1fca2:	4b1d      	ldr	r3, [pc, #116]	; (1fd18 <sd_mmc_init_read_blocks+0xdc>)
   1fca4:	681b      	ldr	r3, [r3, #0]
   1fca6:	7adb      	ldrb	r3, [r3, #11]
   1fca8:	001a      	movs	r2, r3
   1fcaa:	2308      	movs	r3, #8
   1fcac:	4013      	ands	r3, r2
   1fcae:	d002      	beq.n	1fcb6 <sd_mmc_init_read_blocks+0x7a>
		arg = start;
   1fcb0:	683b      	ldr	r3, [r7, #0]
   1fcb2:	613b      	str	r3, [r7, #16]
   1fcb4:	e002      	b.n	1fcbc <sd_mmc_init_read_blocks+0x80>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1fcb6:	683b      	ldr	r3, [r7, #0]
   1fcb8:	025b      	lsls	r3, r3, #9
   1fcba:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1fcbc:	1d3b      	adds	r3, r7, #4
   1fcbe:	881c      	ldrh	r4, [r3, #0]
   1fcc0:	2380      	movs	r3, #128	; 0x80
   1fcc2:	009a      	lsls	r2, r3, #2
   1fcc4:	6939      	ldr	r1, [r7, #16]
   1fcc6:	6978      	ldr	r0, [r7, #20]
   1fcc8:	2301      	movs	r3, #1
   1fcca:	9300      	str	r3, [sp, #0]
   1fccc:	0023      	movs	r3, r4
   1fcce:	4c13      	ldr	r4, [pc, #76]	; (1fd1c <sd_mmc_init_read_blocks+0xe0>)
   1fcd0:	47a0      	blx	r4
   1fcd2:	0003      	movs	r3, r0
   1fcd4:	001a      	movs	r2, r3
   1fcd6:	2301      	movs	r3, #1
   1fcd8:	4053      	eors	r3, r2
   1fcda:	b2db      	uxtb	r3, r3
   1fcdc:	2b00      	cmp	r3, #0
   1fcde:	d003      	beq.n	1fce8 <sd_mmc_init_read_blocks+0xac>
		sd_mmc_deselect_slot();
   1fce0:	4b0a      	ldr	r3, [pc, #40]	; (1fd0c <sd_mmc_init_read_blocks+0xd0>)
   1fce2:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1fce4:	2305      	movs	r3, #5
   1fce6:	e008      	b.n	1fcfa <sd_mmc_init_read_blocks+0xbe>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1fce8:	4b0d      	ldr	r3, [pc, #52]	; (1fd20 <sd_mmc_init_read_blocks+0xe4>)
   1fcea:	1d3a      	adds	r2, r7, #4
   1fcec:	8812      	ldrh	r2, [r2, #0]
   1fcee:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1fcf0:	4b0c      	ldr	r3, [pc, #48]	; (1fd24 <sd_mmc_init_read_blocks+0xe8>)
   1fcf2:	1d3a      	adds	r2, r7, #4
   1fcf4:	8812      	ldrh	r2, [r2, #0]
   1fcf6:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1fcf8:	2300      	movs	r3, #0
}
   1fcfa:	0018      	movs	r0, r3
   1fcfc:	46bd      	mov	sp, r7
   1fcfe:	b007      	add	sp, #28
   1fd00:	bd90      	pop	{r4, r7, pc}
   1fd02:	46c0      	nop			; (mov r8, r8)
   1fd04:	0001f71d 	.word	0x0001f71d
   1fd08:	0001f5b9 	.word	0x0001f5b9
   1fd0c:	0001f819 	.word	0x0001f819
   1fd10:	00101112 	.word	0x00101112
   1fd14:	00081111 	.word	0x00081111
   1fd18:	20004244 	.word	0x20004244
   1fd1c:	00020a99 	.word	0x00020a99
   1fd20:	2000424a 	.word	0x2000424a
   1fd24:	20004248 	.word	0x20004248

0001fd28 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
   1fd28:	b580      	push	{r7, lr}
   1fd2a:	b082      	sub	sp, #8
   1fd2c:	af00      	add	r7, sp, #0
   1fd2e:	6078      	str	r0, [r7, #4]
   1fd30:	000a      	movs	r2, r1
   1fd32:	1cbb      	adds	r3, r7, #2
   1fd34:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
   1fd36:	1cbb      	adds	r3, r7, #2
   1fd38:	881a      	ldrh	r2, [r3, #0]
   1fd3a:	687b      	ldr	r3, [r7, #4]
   1fd3c:	0011      	movs	r1, r2
   1fd3e:	0018      	movs	r0, r3
   1fd40:	4b0d      	ldr	r3, [pc, #52]	; (1fd78 <sd_mmc_start_read_blocks+0x50>)
   1fd42:	4798      	blx	r3
   1fd44:	0003      	movs	r3, r0
   1fd46:	001a      	movs	r2, r3
   1fd48:	2301      	movs	r3, #1
   1fd4a:	4053      	eors	r3, r2
   1fd4c:	b2db      	uxtb	r3, r3
   1fd4e:	2b00      	cmp	r3, #0
   1fd50:	d004      	beq.n	1fd5c <sd_mmc_start_read_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1fd52:	4b0a      	ldr	r3, [pc, #40]	; (1fd7c <sd_mmc_start_read_blocks+0x54>)
   1fd54:	2200      	movs	r2, #0
   1fd56:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1fd58:	2305      	movs	r3, #5
   1fd5a:	e008      	b.n	1fd6e <sd_mmc_start_read_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1fd5c:	4b07      	ldr	r3, [pc, #28]	; (1fd7c <sd_mmc_start_read_blocks+0x54>)
   1fd5e:	881a      	ldrh	r2, [r3, #0]
   1fd60:	1cbb      	adds	r3, r7, #2
   1fd62:	881b      	ldrh	r3, [r3, #0]
   1fd64:	1ad3      	subs	r3, r2, r3
   1fd66:	b29a      	uxth	r2, r3
   1fd68:	4b04      	ldr	r3, [pc, #16]	; (1fd7c <sd_mmc_start_read_blocks+0x54>)
   1fd6a:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1fd6c:	2300      	movs	r3, #0
}
   1fd6e:	0018      	movs	r0, r3
   1fd70:	46bd      	mov	sp, r7
   1fd72:	b002      	add	sp, #8
   1fd74:	bd80      	pop	{r7, pc}
   1fd76:	46c0      	nop			; (mov r8, r8)
   1fd78:	00020d69 	.word	0x00020d69
   1fd7c:	2000424a 	.word	0x2000424a

0001fd80 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
   1fd80:	b580      	push	{r7, lr}
   1fd82:	b082      	sub	sp, #8
   1fd84:	af00      	add	r7, sp, #0
   1fd86:	0002      	movs	r2, r0
   1fd88:	1dfb      	adds	r3, r7, #7
   1fd8a:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_read_blocks()) {
   1fd8c:	4b1c      	ldr	r3, [pc, #112]	; (1fe00 <sd_mmc_wait_end_of_read_blocks+0x80>)
   1fd8e:	4798      	blx	r3
   1fd90:	0003      	movs	r3, r0
   1fd92:	001a      	movs	r2, r3
   1fd94:	2301      	movs	r3, #1
   1fd96:	4053      	eors	r3, r2
   1fd98:	b2db      	uxtb	r3, r3
   1fd9a:	2b00      	cmp	r3, #0
   1fd9c:	d001      	beq.n	1fda2 <sd_mmc_wait_end_of_read_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1fd9e:	2305      	movs	r3, #5
   1fda0:	e029      	b.n	1fdf6 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	if (abort) {
   1fda2:	1dfb      	adds	r3, r7, #7
   1fda4:	781b      	ldrb	r3, [r3, #0]
   1fda6:	2b00      	cmp	r3, #0
   1fda8:	d003      	beq.n	1fdb2 <sd_mmc_wait_end_of_read_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1fdaa:	4b16      	ldr	r3, [pc, #88]	; (1fe04 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1fdac:	2200      	movs	r2, #0
   1fdae:	801a      	strh	r2, [r3, #0]
   1fdb0:	e005      	b.n	1fdbe <sd_mmc_wait_end_of_read_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1fdb2:	4b14      	ldr	r3, [pc, #80]	; (1fe04 <sd_mmc_wait_end_of_read_blocks+0x84>)
   1fdb4:	881b      	ldrh	r3, [r3, #0]
   1fdb6:	2b00      	cmp	r3, #0
   1fdb8:	d001      	beq.n	1fdbe <sd_mmc_wait_end_of_read_blocks+0x3e>
		return SD_MMC_OK;
   1fdba:	2300      	movs	r3, #0
   1fdbc:	e01b      	b.n	1fdf6 <sd_mmc_wait_end_of_read_blocks+0x76>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1fdbe:	4b12      	ldr	r3, [pc, #72]	; (1fe08 <sd_mmc_wait_end_of_read_blocks+0x88>)
   1fdc0:	881b      	ldrh	r3, [r3, #0]
   1fdc2:	2b01      	cmp	r3, #1
   1fdc4:	d103      	bne.n	1fdce <sd_mmc_wait_end_of_read_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1fdc6:	4b11      	ldr	r3, [pc, #68]	; (1fe0c <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1fdc8:	4798      	blx	r3
		return SD_MMC_OK;
   1fdca:	2300      	movs	r3, #0
   1fdcc:	e013      	b.n	1fdf6 <sd_mmc_wait_end_of_read_blocks+0x76>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
   1fdce:	4b10      	ldr	r3, [pc, #64]	; (1fe10 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1fdd0:	2100      	movs	r1, #0
   1fdd2:	0018      	movs	r0, r3
   1fdd4:	4b0f      	ldr	r3, [pc, #60]	; (1fe14 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1fdd6:	4798      	blx	r3
   1fdd8:	0003      	movs	r3, r0
   1fdda:	001a      	movs	r2, r3
   1fddc:	2301      	movs	r3, #1
   1fdde:	4053      	eors	r3, r2
   1fde0:	b2db      	uxtb	r3, r3
   1fde2:	2b00      	cmp	r3, #0
   1fde4:	d004      	beq.n	1fdf0 <sd_mmc_wait_end_of_read_blocks+0x70>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
   1fde6:	4b0a      	ldr	r3, [pc, #40]	; (1fe10 <sd_mmc_wait_end_of_read_blocks+0x90>)
   1fde8:	2100      	movs	r1, #0
   1fdea:	0018      	movs	r0, r3
   1fdec:	4b09      	ldr	r3, [pc, #36]	; (1fe14 <sd_mmc_wait_end_of_read_blocks+0x94>)
   1fdee:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
   1fdf0:	4b06      	ldr	r3, [pc, #24]	; (1fe0c <sd_mmc_wait_end_of_read_blocks+0x8c>)
   1fdf2:	4798      	blx	r3
	return SD_MMC_OK;
   1fdf4:	2300      	movs	r3, #0
}
   1fdf6:	0018      	movs	r0, r3
   1fdf8:	46bd      	mov	sp, r7
   1fdfa:	b002      	add	sp, #8
   1fdfc:	bd80      	pop	{r7, pc}
   1fdfe:	46c0      	nop			; (mov r8, r8)
   1fe00:	00020e0d 	.word	0x00020e0d
   1fe04:	2000424a 	.word	0x2000424a
   1fe08:	20004248 	.word	0x20004248
   1fe0c:	0001f819 	.word	0x0001f819
   1fe10:	0000310c 	.word	0x0000310c
   1fe14:	00020a71 	.word	0x00020a71

0001fe18 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
   1fe18:	b590      	push	{r4, r7, lr}
   1fe1a:	b089      	sub	sp, #36	; 0x24
   1fe1c:	af02      	add	r7, sp, #8
   1fe1e:	6039      	str	r1, [r7, #0]
   1fe20:	0011      	movs	r1, r2
   1fe22:	1dfb      	adds	r3, r7, #7
   1fe24:	1c02      	adds	r2, r0, #0
   1fe26:	701a      	strb	r2, [r3, #0]
   1fe28:	1d3b      	adds	r3, r7, #4
   1fe2a:	1c0a      	adds	r2, r1, #0
   1fe2c:	801a      	strh	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
   1fe2e:	230f      	movs	r3, #15
   1fe30:	18fc      	adds	r4, r7, r3
   1fe32:	1dfb      	adds	r3, r7, #7
   1fe34:	781b      	ldrb	r3, [r3, #0]
   1fe36:	0018      	movs	r0, r3
   1fe38:	4b28      	ldr	r3, [pc, #160]	; (1fedc <sd_mmc_init_write_blocks+0xc4>)
   1fe3a:	4798      	blx	r3
   1fe3c:	0003      	movs	r3, r0
   1fe3e:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
   1fe40:	230f      	movs	r3, #15
   1fe42:	18fb      	adds	r3, r7, r3
   1fe44:	781b      	ldrb	r3, [r3, #0]
   1fe46:	2b00      	cmp	r3, #0
   1fe48:	d003      	beq.n	1fe52 <sd_mmc_init_write_blocks+0x3a>
		return sd_mmc_err;
   1fe4a:	230f      	movs	r3, #15
   1fe4c:	18fb      	adds	r3, r7, r3
   1fe4e:	781b      	ldrb	r3, [r3, #0]
   1fe50:	e03f      	b.n	1fed2 <sd_mmc_init_write_blocks+0xba>
	}
	if (sd_mmc_is_write_protected(slot)) {
   1fe52:	1dfb      	adds	r3, r7, #7
   1fe54:	781b      	ldrb	r3, [r3, #0]
   1fe56:	0018      	movs	r0, r3
   1fe58:	4b21      	ldr	r3, [pc, #132]	; (1fee0 <sd_mmc_init_write_blocks+0xc8>)
   1fe5a:	4798      	blx	r3
   1fe5c:	1e03      	subs	r3, r0, #0
   1fe5e:	d003      	beq.n	1fe68 <sd_mmc_init_write_blocks+0x50>
		sd_mmc_deselect_slot();
   1fe60:	4b20      	ldr	r3, [pc, #128]	; (1fee4 <sd_mmc_init_write_blocks+0xcc>)
   1fe62:	4798      	blx	r3
		return SD_MMC_ERR_WP;
   1fe64:	2307      	movs	r3, #7
   1fe66:	e034      	b.n	1fed2 <sd_mmc_init_write_blocks+0xba>
	}

	if (nb_block > 1) {
   1fe68:	1d3b      	adds	r3, r7, #4
   1fe6a:	881b      	ldrh	r3, [r3, #0]
   1fe6c:	2b01      	cmp	r3, #1
   1fe6e:	d902      	bls.n	1fe76 <sd_mmc_init_write_blocks+0x5e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
   1fe70:	4b1d      	ldr	r3, [pc, #116]	; (1fee8 <sd_mmc_init_write_blocks+0xd0>)
   1fe72:	617b      	str	r3, [r7, #20]
   1fe74:	e001      	b.n	1fe7a <sd_mmc_init_write_blocks+0x62>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
   1fe76:	4b1d      	ldr	r3, [pc, #116]	; (1feec <sd_mmc_init_write_blocks+0xd4>)
   1fe78:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
   1fe7a:	4b1d      	ldr	r3, [pc, #116]	; (1fef0 <sd_mmc_init_write_blocks+0xd8>)
   1fe7c:	681b      	ldr	r3, [r3, #0]
   1fe7e:	7adb      	ldrb	r3, [r3, #11]
   1fe80:	001a      	movs	r2, r3
   1fe82:	2308      	movs	r3, #8
   1fe84:	4013      	ands	r3, r2
   1fe86:	d002      	beq.n	1fe8e <sd_mmc_init_write_blocks+0x76>
		arg = start;
   1fe88:	683b      	ldr	r3, [r7, #0]
   1fe8a:	613b      	str	r3, [r7, #16]
   1fe8c:	e002      	b.n	1fe94 <sd_mmc_init_write_blocks+0x7c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
   1fe8e:	683b      	ldr	r3, [r7, #0]
   1fe90:	025b      	lsls	r3, r3, #9
   1fe92:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
   1fe94:	1d3b      	adds	r3, r7, #4
   1fe96:	881c      	ldrh	r4, [r3, #0]
   1fe98:	2380      	movs	r3, #128	; 0x80
   1fe9a:	009a      	lsls	r2, r3, #2
   1fe9c:	6939      	ldr	r1, [r7, #16]
   1fe9e:	6978      	ldr	r0, [r7, #20]
   1fea0:	2301      	movs	r3, #1
   1fea2:	9300      	str	r3, [sp, #0]
   1fea4:	0023      	movs	r3, r4
   1fea6:	4c13      	ldr	r4, [pc, #76]	; (1fef4 <sd_mmc_init_write_blocks+0xdc>)
   1fea8:	47a0      	blx	r4
   1feaa:	0003      	movs	r3, r0
   1feac:	001a      	movs	r2, r3
   1feae:	2301      	movs	r3, #1
   1feb0:	4053      	eors	r3, r2
   1feb2:	b2db      	uxtb	r3, r3
   1feb4:	2b00      	cmp	r3, #0
   1feb6:	d003      	beq.n	1fec0 <sd_mmc_init_write_blocks+0xa8>
		sd_mmc_deselect_slot();
   1feb8:	4b0a      	ldr	r3, [pc, #40]	; (1fee4 <sd_mmc_init_write_blocks+0xcc>)
   1feba:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
   1febc:	2305      	movs	r3, #5
   1febe:	e008      	b.n	1fed2 <sd_mmc_init_write_blocks+0xba>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
   1fec0:	4b0d      	ldr	r3, [pc, #52]	; (1fef8 <sd_mmc_init_write_blocks+0xe0>)
   1fec2:	1d3a      	adds	r2, r7, #4
   1fec4:	8812      	ldrh	r2, [r2, #0]
   1fec6:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
   1fec8:	4b0c      	ldr	r3, [pc, #48]	; (1fefc <sd_mmc_init_write_blocks+0xe4>)
   1feca:	1d3a      	adds	r2, r7, #4
   1fecc:	8812      	ldrh	r2, [r2, #0]
   1fece:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1fed0:	2300      	movs	r3, #0
}
   1fed2:	0018      	movs	r0, r3
   1fed4:	46bd      	mov	sp, r7
   1fed6:	b007      	add	sp, #28
   1fed8:	bd90      	pop	{r4, r7, pc}
   1feda:	46c0      	nop			; (mov r8, r8)
   1fedc:	0001f71d 	.word	0x0001f71d
   1fee0:	0001fc25 	.word	0x0001fc25
   1fee4:	0001f819 	.word	0x0001f819
   1fee8:	00109119 	.word	0x00109119
   1feec:	00089118 	.word	0x00089118
   1fef0:	20004244 	.word	0x20004244
   1fef4:	00020a99 	.word	0x00020a99
   1fef8:	2000424a 	.word	0x2000424a
   1fefc:	20004248 	.word	0x20004248

0001ff00 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
   1ff00:	b580      	push	{r7, lr}
   1ff02:	b082      	sub	sp, #8
   1ff04:	af00      	add	r7, sp, #0
   1ff06:	6078      	str	r0, [r7, #4]
   1ff08:	000a      	movs	r2, r1
   1ff0a:	1cbb      	adds	r3, r7, #2
   1ff0c:	801a      	strh	r2, [r3, #0]
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
   1ff0e:	1cbb      	adds	r3, r7, #2
   1ff10:	881a      	ldrh	r2, [r3, #0]
   1ff12:	687b      	ldr	r3, [r7, #4]
   1ff14:	0011      	movs	r1, r2
   1ff16:	0018      	movs	r0, r3
   1ff18:	4b0d      	ldr	r3, [pc, #52]	; (1ff50 <sd_mmc_start_write_blocks+0x50>)
   1ff1a:	4798      	blx	r3
   1ff1c:	0003      	movs	r3, r0
   1ff1e:	001a      	movs	r2, r3
   1ff20:	2301      	movs	r3, #1
   1ff22:	4053      	eors	r3, r2
   1ff24:	b2db      	uxtb	r3, r3
   1ff26:	2b00      	cmp	r3, #0
   1ff28:	d004      	beq.n	1ff34 <sd_mmc_start_write_blocks+0x34>
		sd_mmc_nb_block_remaining = 0;
   1ff2a:	4b0a      	ldr	r3, [pc, #40]	; (1ff54 <sd_mmc_start_write_blocks+0x54>)
   1ff2c:	2200      	movs	r2, #0
   1ff2e:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
   1ff30:	2305      	movs	r3, #5
   1ff32:	e008      	b.n	1ff46 <sd_mmc_start_write_blocks+0x46>
	}
	sd_mmc_nb_block_remaining -= nb_block;
   1ff34:	4b07      	ldr	r3, [pc, #28]	; (1ff54 <sd_mmc_start_write_blocks+0x54>)
   1ff36:	881a      	ldrh	r2, [r3, #0]
   1ff38:	1cbb      	adds	r3, r7, #2
   1ff3a:	881b      	ldrh	r3, [r3, #0]
   1ff3c:	1ad3      	subs	r3, r2, r3
   1ff3e:	b29a      	uxth	r2, r3
   1ff40:	4b04      	ldr	r3, [pc, #16]	; (1ff54 <sd_mmc_start_write_blocks+0x54>)
   1ff42:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
   1ff44:	2300      	movs	r3, #0
}
   1ff46:	0018      	movs	r0, r3
   1ff48:	46bd      	mov	sp, r7
   1ff4a:	b002      	add	sp, #8
   1ff4c:	bd80      	pop	{r7, pc}
   1ff4e:	46c0      	nop			; (mov r8, r8)
   1ff50:	00020e19 	.word	0x00020e19
   1ff54:	2000424a 	.word	0x2000424a

0001ff58 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
   1ff58:	b580      	push	{r7, lr}
   1ff5a:	b082      	sub	sp, #8
   1ff5c:	af00      	add	r7, sp, #0
   1ff5e:	0002      	movs	r2, r0
   1ff60:	1dfb      	adds	r3, r7, #7
   1ff62:	701a      	strb	r2, [r3, #0]
	if (!driver_wait_end_of_write_blocks()) {
   1ff64:	4b13      	ldr	r3, [pc, #76]	; (1ffb4 <sd_mmc_wait_end_of_write_blocks+0x5c>)
   1ff66:	4798      	blx	r3
   1ff68:	0003      	movs	r3, r0
   1ff6a:	001a      	movs	r2, r3
   1ff6c:	2301      	movs	r3, #1
   1ff6e:	4053      	eors	r3, r2
   1ff70:	b2db      	uxtb	r3, r3
   1ff72:	2b00      	cmp	r3, #0
   1ff74:	d001      	beq.n	1ff7a <sd_mmc_wait_end_of_write_blocks+0x22>
		return SD_MMC_ERR_COMM;
   1ff76:	2305      	movs	r3, #5
   1ff78:	e018      	b.n	1ffac <sd_mmc_wait_end_of_write_blocks+0x54>
	}
	if (abort) {
   1ff7a:	1dfb      	adds	r3, r7, #7
   1ff7c:	781b      	ldrb	r3, [r3, #0]
   1ff7e:	2b00      	cmp	r3, #0
   1ff80:	d003      	beq.n	1ff8a <sd_mmc_wait_end_of_write_blocks+0x32>
		sd_mmc_nb_block_remaining = 0;
   1ff82:	4b0d      	ldr	r3, [pc, #52]	; (1ffb8 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1ff84:	2200      	movs	r2, #0
   1ff86:	801a      	strh	r2, [r3, #0]
   1ff88:	e005      	b.n	1ff96 <sd_mmc_wait_end_of_write_blocks+0x3e>
	} else if (sd_mmc_nb_block_remaining) {
   1ff8a:	4b0b      	ldr	r3, [pc, #44]	; (1ffb8 <sd_mmc_wait_end_of_write_blocks+0x60>)
   1ff8c:	881b      	ldrh	r3, [r3, #0]
   1ff8e:	2b00      	cmp	r3, #0
   1ff90:	d001      	beq.n	1ff96 <sd_mmc_wait_end_of_write_blocks+0x3e>
		return SD_MMC_OK;
   1ff92:	2300      	movs	r3, #0
   1ff94:	e00a      	b.n	1ffac <sd_mmc_wait_end_of_write_blocks+0x54>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
   1ff96:	4b09      	ldr	r3, [pc, #36]	; (1ffbc <sd_mmc_wait_end_of_write_blocks+0x64>)
   1ff98:	881b      	ldrh	r3, [r3, #0]
   1ff9a:	2b01      	cmp	r3, #1
   1ff9c:	d103      	bne.n	1ffa6 <sd_mmc_wait_end_of_write_blocks+0x4e>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
   1ff9e:	4b08      	ldr	r3, [pc, #32]	; (1ffc0 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1ffa0:	4798      	blx	r3
		return SD_MMC_OK;
   1ffa2:	2300      	movs	r3, #0
   1ffa4:	e002      	b.n	1ffac <sd_mmc_wait_end_of_write_blocks+0x54>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
   1ffa6:	4b06      	ldr	r3, [pc, #24]	; (1ffc0 <sd_mmc_wait_end_of_write_blocks+0x68>)
   1ffa8:	4798      	blx	r3
	return SD_MMC_OK;
   1ffaa:	2300      	movs	r3, #0
}
   1ffac:	0018      	movs	r0, r3
   1ffae:	46bd      	mov	sp, r7
   1ffb0:	b002      	add	sp, #8
   1ffb2:	bd80      	pop	{r7, pc}
   1ffb4:	00020ed9 	.word	0x00020ed9
   1ffb8:	2000424a 	.word	0x2000424a
   1ffbc:	20004248 	.word	0x20004248
   1ffc0:	0001f819 	.word	0x0001f819

0001ffc4 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
   1ffc4:	b580      	push	{r7, lr}
   1ffc6:	b082      	sub	sp, #8
   1ffc8:	af00      	add	r7, sp, #0
   1ffca:	0002      	movs	r2, r0
   1ffcc:	1dfb      	adds	r3, r7, #7
   1ffce:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_check(slot))
   1ffd0:	1dfb      	adds	r3, r7, #7
   1ffd2:	781b      	ldrb	r3, [r3, #0]
   1ffd4:	0018      	movs	r0, r3
   1ffd6:	4b16      	ldr	r3, [pc, #88]	; (20030 <sd_mmc_test_unit_ready+0x6c>)
   1ffd8:	4798      	blx	r3
   1ffda:	0003      	movs	r3, r0
   1ffdc:	2b01      	cmp	r3, #1
   1ffde:	d019      	beq.n	20014 <sd_mmc_test_unit_ready+0x50>
   1ffe0:	2b02      	cmp	r3, #2
   1ffe2:	d019      	beq.n	20018 <sd_mmc_test_unit_ready+0x54>
   1ffe4:	2b00      	cmp	r3, #0
   1ffe6:	d11e      	bne.n	20026 <sd_mmc_test_unit_ready+0x62>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
   1ffe8:	1dfb      	adds	r3, r7, #7
   1ffea:	781b      	ldrb	r3, [r3, #0]
   1ffec:	4a11      	ldr	r2, [pc, #68]	; (20034 <sd_mmc_test_unit_ready+0x70>)
   1ffee:	5cd3      	ldrb	r3, [r2, r3]
   1fff0:	2b00      	cmp	r3, #0
   1fff2:	d001      	beq.n	1fff8 <sd_mmc_test_unit_ready+0x34>
			return CTRL_NO_PRESENT;
   1fff4:	2302      	movs	r3, #2
   1fff6:	e017      	b.n	20028 <sd_mmc_test_unit_ready+0x64>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
   1fff8:	1dfb      	adds	r3, r7, #7
   1fffa:	781b      	ldrb	r3, [r3, #0]
   1fffc:	0018      	movs	r0, r3
   1fffe:	4b0e      	ldr	r3, [pc, #56]	; (20038 <sd_mmc_test_unit_ready+0x74>)
   20000:	4798      	blx	r3
   20002:	0003      	movs	r3, r0
   20004:	001a      	movs	r2, r3
   20006:	2303      	movs	r3, #3
   20008:	4013      	ands	r3, r2
   2000a:	d001      	beq.n	20010 <sd_mmc_test_unit_ready+0x4c>
			return CTRL_GOOD;
   2000c:	2300      	movs	r3, #0
   2000e:	e00b      	b.n	20028 <sd_mmc_test_unit_ready+0x64>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
   20010:	2302      	movs	r3, #2
   20012:	e009      	b.n	20028 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
   20014:	2303      	movs	r3, #3
   20016:	e007      	b.n	20028 <sd_mmc_test_unit_ready+0x64>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
   20018:	1dfb      	adds	r3, r7, #7
   2001a:	781b      	ldrb	r3, [r3, #0]
   2001c:	4a05      	ldr	r2, [pc, #20]	; (20034 <sd_mmc_test_unit_ready+0x70>)
   2001e:	2100      	movs	r1, #0
   20020:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
   20022:	2302      	movs	r3, #2
   20024:	e000      	b.n	20028 <sd_mmc_test_unit_ready+0x64>

	default:
		return CTRL_FAIL;
   20026:	2301      	movs	r3, #1
	}
}
   20028:	0018      	movs	r0, r3
   2002a:	46bd      	mov	sp, r7
   2002c:	b002      	add	sp, #8
   2002e:	bd80      	pop	{r7, pc}
   20030:	0001fb39 	.word	0x0001fb39
   20034:	2000424c 	.word	0x2000424c
   20038:	0001fbad 	.word	0x0001fbad

0002003c <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
   2003c:	b580      	push	{r7, lr}
   2003e:	af00      	add	r7, sp, #0
	return sd_mmc_test_unit_ready(0);
   20040:	2000      	movs	r0, #0
   20042:	4b03      	ldr	r3, [pc, #12]	; (20050 <sd_mmc_test_unit_ready_0+0x14>)
   20044:	4798      	blx	r3
   20046:	0003      	movs	r3, r0
}
   20048:	0018      	movs	r0, r3
   2004a:	46bd      	mov	sp, r7
   2004c:	bd80      	pop	{r7, pc}
   2004e:	46c0      	nop			; (mov r8, r8)
   20050:	0001ffc5 	.word	0x0001ffc5

00020054 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
   20054:	b580      	push	{r7, lr}
   20056:	b082      	sub	sp, #8
   20058:	af00      	add	r7, sp, #0
   2005a:	0002      	movs	r2, r0
   2005c:	6039      	str	r1, [r7, #0]
   2005e:	1dfb      	adds	r3, r7, #7
   20060:	701a      	strb	r2, [r3, #0]
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
   20062:	1dfb      	adds	r3, r7, #7
   20064:	781b      	ldrb	r3, [r3, #0]
   20066:	0018      	movs	r0, r3
   20068:	4b08      	ldr	r3, [pc, #32]	; (2008c <sd_mmc_read_capacity+0x38>)
   2006a:	4798      	blx	r3
   2006c:	0003      	movs	r3, r0
   2006e:	005b      	lsls	r3, r3, #1
   20070:	1e5a      	subs	r2, r3, #1
   20072:	683b      	ldr	r3, [r7, #0]
   20074:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
   20076:	1dfb      	adds	r3, r7, #7
   20078:	781b      	ldrb	r3, [r3, #0]
   2007a:	0018      	movs	r0, r3
   2007c:	4b04      	ldr	r3, [pc, #16]	; (20090 <sd_mmc_read_capacity+0x3c>)
   2007e:	4798      	blx	r3
   20080:	0003      	movs	r3, r0
}
   20082:	0018      	movs	r0, r3
   20084:	46bd      	mov	sp, r7
   20086:	b002      	add	sp, #8
   20088:	bd80      	pop	{r7, pc}
   2008a:	46c0      	nop			; (mov r8, r8)
   2008c:	0001fbe9 	.word	0x0001fbe9
   20090:	0001ffc5 	.word	0x0001ffc5

00020094 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
   20094:	b580      	push	{r7, lr}
   20096:	b082      	sub	sp, #8
   20098:	af00      	add	r7, sp, #0
   2009a:	6078      	str	r0, [r7, #4]
	return sd_mmc_read_capacity(0, nb_sector);
   2009c:	687b      	ldr	r3, [r7, #4]
   2009e:	0019      	movs	r1, r3
   200a0:	2000      	movs	r0, #0
   200a2:	4b03      	ldr	r3, [pc, #12]	; (200b0 <sd_mmc_read_capacity_0+0x1c>)
   200a4:	4798      	blx	r3
   200a6:	0003      	movs	r3, r0
}
   200a8:	0018      	movs	r0, r3
   200aa:	46bd      	mov	sp, r7
   200ac:	b002      	add	sp, #8
   200ae:	bd80      	pop	{r7, pc}
   200b0:	00020055 	.word	0x00020055

000200b4 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
   200b4:	b580      	push	{r7, lr}
   200b6:	b082      	sub	sp, #8
   200b8:	af00      	add	r7, sp, #0
   200ba:	0002      	movs	r2, r0
   200bc:	1dfb      	adds	r3, r7, #7
   200be:	701a      	strb	r2, [r3, #0]
   200c0:	1dbb      	adds	r3, r7, #6
   200c2:	1c0a      	adds	r2, r1, #0
   200c4:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
   200c6:	1dfb      	adds	r3, r7, #7
   200c8:	781b      	ldrb	r3, [r3, #0]
   200ca:	4a04      	ldr	r2, [pc, #16]	; (200dc <sd_mmc_unload+0x28>)
   200cc:	1db9      	adds	r1, r7, #6
   200ce:	7809      	ldrb	r1, [r1, #0]
   200d0:	54d1      	strb	r1, [r2, r3]
	return true;
   200d2:	2301      	movs	r3, #1
}
   200d4:	0018      	movs	r0, r3
   200d6:	46bd      	mov	sp, r7
   200d8:	b002      	add	sp, #8
   200da:	bd80      	pop	{r7, pc}
   200dc:	2000424c 	.word	0x2000424c

000200e0 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
   200e0:	b580      	push	{r7, lr}
   200e2:	b082      	sub	sp, #8
   200e4:	af00      	add	r7, sp, #0
   200e6:	0002      	movs	r2, r0
   200e8:	1dfb      	adds	r3, r7, #7
   200ea:	701a      	strb	r2, [r3, #0]
	return sd_mmc_unload(0, unload);
   200ec:	1dfb      	adds	r3, r7, #7
   200ee:	781b      	ldrb	r3, [r3, #0]
   200f0:	0019      	movs	r1, r3
   200f2:	2000      	movs	r0, #0
   200f4:	4b03      	ldr	r3, [pc, #12]	; (20104 <sd_mmc_unload_0+0x24>)
   200f6:	4798      	blx	r3
   200f8:	0003      	movs	r3, r0
}
   200fa:	0018      	movs	r0, r3
   200fc:	46bd      	mov	sp, r7
   200fe:	b002      	add	sp, #8
   20100:	bd80      	pop	{r7, pc}
   20102:	46c0      	nop			; (mov r8, r8)
   20104:	000200b5 	.word	0x000200b5

00020108 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
   20108:	b580      	push	{r7, lr}
   2010a:	b082      	sub	sp, #8
   2010c:	af00      	add	r7, sp, #0
   2010e:	0002      	movs	r2, r0
   20110:	1dfb      	adds	r3, r7, #7
   20112:	701a      	strb	r2, [r3, #0]
	return sd_mmc_is_write_protected(slot);
   20114:	1dfb      	adds	r3, r7, #7
   20116:	781b      	ldrb	r3, [r3, #0]
   20118:	0018      	movs	r0, r3
   2011a:	4b03      	ldr	r3, [pc, #12]	; (20128 <sd_mmc_wr_protect+0x20>)
   2011c:	4798      	blx	r3
   2011e:	0003      	movs	r3, r0
}
   20120:	0018      	movs	r0, r3
   20122:	46bd      	mov	sp, r7
   20124:	b002      	add	sp, #8
   20126:	bd80      	pop	{r7, pc}
   20128:	0001fc25 	.word	0x0001fc25

0002012c <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
   2012c:	b580      	push	{r7, lr}
   2012e:	af00      	add	r7, sp, #0
	return sd_mmc_wr_protect(0);
   20130:	2000      	movs	r0, #0
   20132:	4b03      	ldr	r3, [pc, #12]	; (20140 <sd_mmc_wr_protect_0+0x14>)
   20134:	4798      	blx	r3
   20136:	0003      	movs	r3, r0
}
   20138:	0018      	movs	r0, r3
   2013a:	46bd      	mov	sp, r7
   2013c:	bd80      	pop	{r7, pc}
   2013e:	46c0      	nop			; (mov r8, r8)
   20140:	00020109 	.word	0x00020109

00020144 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
   20144:	b580      	push	{r7, lr}
   20146:	b082      	sub	sp, #8
   20148:	af00      	add	r7, sp, #0
   2014a:	0002      	movs	r2, r0
   2014c:	1dfb      	adds	r3, r7, #7
   2014e:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
   20150:	2301      	movs	r3, #1
}
   20152:	0018      	movs	r0, r3
   20154:	46bd      	mov	sp, r7
   20156:	b002      	add	sp, #8
   20158:	bd80      	pop	{r7, pc}
	...

0002015c <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
   2015c:	b580      	push	{r7, lr}
   2015e:	af00      	add	r7, sp, #0
	return sd_mmc_removal(0);
   20160:	2000      	movs	r0, #0
   20162:	4b03      	ldr	r3, [pc, #12]	; (20170 <sd_mmc_removal_0+0x14>)
   20164:	4798      	blx	r3
   20166:	0003      	movs	r3, r0
}
   20168:	0018      	movs	r0, r3
   2016a:	46bd      	mov	sp, r7
   2016c:	bd80      	pop	{r7, pc}
   2016e:	46c0      	nop			; (mov r8, r8)
   20170:	00020145 	.word	0x00020145

00020174 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
   20174:	b580      	push	{r7, lr}
   20176:	b084      	sub	sp, #16
   20178:	af00      	add	r7, sp, #0
   2017a:	60b9      	str	r1, [r7, #8]
   2017c:	607a      	str	r2, [r7, #4]
   2017e:	230f      	movs	r3, #15
   20180:	18fb      	adds	r3, r7, r3
   20182:	1c02      	adds	r2, r0, #0
   20184:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
   20186:	68b9      	ldr	r1, [r7, #8]
   20188:	230f      	movs	r3, #15
   2018a:	18fb      	adds	r3, r7, r3
   2018c:	781b      	ldrb	r3, [r3, #0]
   2018e:	2201      	movs	r2, #1
   20190:	0018      	movs	r0, r3
   20192:	4b10      	ldr	r3, [pc, #64]	; (201d4 <sd_mmc_mem_2_ram+0x60>)
   20194:	4798      	blx	r3
   20196:	1e03      	subs	r3, r0, #0
   20198:	d005      	beq.n	201a6 <sd_mmc_mem_2_ram+0x32>
   2019a:	2b02      	cmp	r3, #2
   2019c:	d101      	bne.n	201a2 <sd_mmc_mem_2_ram+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   2019e:	2302      	movs	r3, #2
   201a0:	e013      	b.n	201ca <sd_mmc_mem_2_ram+0x56>
	default:
		return CTRL_FAIL;
   201a2:	2301      	movs	r3, #1
   201a4:	e011      	b.n	201ca <sd_mmc_mem_2_ram+0x56>
		break;
   201a6:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
   201a8:	687b      	ldr	r3, [r7, #4]
   201aa:	2101      	movs	r1, #1
   201ac:	0018      	movs	r0, r3
   201ae:	4b0a      	ldr	r3, [pc, #40]	; (201d8 <sd_mmc_mem_2_ram+0x64>)
   201b0:	4798      	blx	r3
   201b2:	1e03      	subs	r3, r0, #0
   201b4:	d001      	beq.n	201ba <sd_mmc_mem_2_ram+0x46>
		return CTRL_FAIL;
   201b6:	2301      	movs	r3, #1
   201b8:	e007      	b.n	201ca <sd_mmc_mem_2_ram+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
   201ba:	2000      	movs	r0, #0
   201bc:	4b07      	ldr	r3, [pc, #28]	; (201dc <sd_mmc_mem_2_ram+0x68>)
   201be:	4798      	blx	r3
   201c0:	1e03      	subs	r3, r0, #0
   201c2:	d001      	beq.n	201c8 <sd_mmc_mem_2_ram+0x54>
		return CTRL_FAIL;
   201c4:	2301      	movs	r3, #1
   201c6:	e000      	b.n	201ca <sd_mmc_mem_2_ram+0x56>
	}
	return CTRL_GOOD;
   201c8:	2300      	movs	r3, #0
}
   201ca:	0018      	movs	r0, r3
   201cc:	46bd      	mov	sp, r7
   201ce:	b004      	add	sp, #16
   201d0:	bd80      	pop	{r7, pc}
   201d2:	46c0      	nop			; (mov r8, r8)
   201d4:	0001fc3d 	.word	0x0001fc3d
   201d8:	0001fd29 	.word	0x0001fd29
   201dc:	0001fd81 	.word	0x0001fd81

000201e0 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
   201e0:	b580      	push	{r7, lr}
   201e2:	b082      	sub	sp, #8
   201e4:	af00      	add	r7, sp, #0
   201e6:	6078      	str	r0, [r7, #4]
   201e8:	6039      	str	r1, [r7, #0]
	return sd_mmc_mem_2_ram(0, addr, ram);
   201ea:	683a      	ldr	r2, [r7, #0]
   201ec:	687b      	ldr	r3, [r7, #4]
   201ee:	0019      	movs	r1, r3
   201f0:	2000      	movs	r0, #0
   201f2:	4b03      	ldr	r3, [pc, #12]	; (20200 <sd_mmc_mem_2_ram_0+0x20>)
   201f4:	4798      	blx	r3
   201f6:	0003      	movs	r3, r0
}
   201f8:	0018      	movs	r0, r3
   201fa:	46bd      	mov	sp, r7
   201fc:	b002      	add	sp, #8
   201fe:	bd80      	pop	{r7, pc}
   20200:	00020175 	.word	0x00020175

00020204 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
   20204:	b580      	push	{r7, lr}
   20206:	b084      	sub	sp, #16
   20208:	af00      	add	r7, sp, #0
   2020a:	60b9      	str	r1, [r7, #8]
   2020c:	607a      	str	r2, [r7, #4]
   2020e:	230f      	movs	r3, #15
   20210:	18fb      	adds	r3, r7, r3
   20212:	1c02      	adds	r2, r0, #0
   20214:	701a      	strb	r2, [r3, #0]
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
   20216:	68b9      	ldr	r1, [r7, #8]
   20218:	230f      	movs	r3, #15
   2021a:	18fb      	adds	r3, r7, r3
   2021c:	781b      	ldrb	r3, [r3, #0]
   2021e:	2201      	movs	r2, #1
   20220:	0018      	movs	r0, r3
   20222:	4b10      	ldr	r3, [pc, #64]	; (20264 <sd_mmc_ram_2_mem+0x60>)
   20224:	4798      	blx	r3
   20226:	1e03      	subs	r3, r0, #0
   20228:	d005      	beq.n	20236 <sd_mmc_ram_2_mem+0x32>
   2022a:	2b02      	cmp	r3, #2
   2022c:	d101      	bne.n	20232 <sd_mmc_ram_2_mem+0x2e>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
   2022e:	2302      	movs	r3, #2
   20230:	e013      	b.n	2025a <sd_mmc_ram_2_mem+0x56>
	default:
		return CTRL_FAIL;
   20232:	2301      	movs	r3, #1
   20234:	e011      	b.n	2025a <sd_mmc_ram_2_mem+0x56>
		break;
   20236:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
   20238:	687b      	ldr	r3, [r7, #4]
   2023a:	2101      	movs	r1, #1
   2023c:	0018      	movs	r0, r3
   2023e:	4b0a      	ldr	r3, [pc, #40]	; (20268 <sd_mmc_ram_2_mem+0x64>)
   20240:	4798      	blx	r3
   20242:	1e03      	subs	r3, r0, #0
   20244:	d001      	beq.n	2024a <sd_mmc_ram_2_mem+0x46>
		return CTRL_FAIL;
   20246:	2301      	movs	r3, #1
   20248:	e007      	b.n	2025a <sd_mmc_ram_2_mem+0x56>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
   2024a:	2000      	movs	r0, #0
   2024c:	4b07      	ldr	r3, [pc, #28]	; (2026c <sd_mmc_ram_2_mem+0x68>)
   2024e:	4798      	blx	r3
   20250:	1e03      	subs	r3, r0, #0
   20252:	d001      	beq.n	20258 <sd_mmc_ram_2_mem+0x54>
		return CTRL_FAIL;
   20254:	2301      	movs	r3, #1
   20256:	e000      	b.n	2025a <sd_mmc_ram_2_mem+0x56>
	}
	return CTRL_GOOD;
   20258:	2300      	movs	r3, #0
}
   2025a:	0018      	movs	r0, r3
   2025c:	46bd      	mov	sp, r7
   2025e:	b004      	add	sp, #16
   20260:	bd80      	pop	{r7, pc}
   20262:	46c0      	nop			; (mov r8, r8)
   20264:	0001fe19 	.word	0x0001fe19
   20268:	0001ff01 	.word	0x0001ff01
   2026c:	0001ff59 	.word	0x0001ff59

00020270 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
   20270:	b580      	push	{r7, lr}
   20272:	b082      	sub	sp, #8
   20274:	af00      	add	r7, sp, #0
   20276:	6078      	str	r0, [r7, #4]
   20278:	6039      	str	r1, [r7, #0]
	return sd_mmc_ram_2_mem(0, addr, ram);
   2027a:	683a      	ldr	r2, [r7, #0]
   2027c:	687b      	ldr	r3, [r7, #4]
   2027e:	0019      	movs	r1, r3
   20280:	2000      	movs	r0, #0
   20282:	4b03      	ldr	r3, [pc, #12]	; (20290 <sd_mmc_ram_2_mem_0+0x20>)
   20284:	4798      	blx	r3
   20286:	0003      	movs	r3, r0
}
   20288:	0018      	movs	r0, r3
   2028a:	46bd      	mov	sp, r7
   2028c:	b002      	add	sp, #8
   2028e:	bd80      	pop	{r7, pc}
   20290:	00020205 	.word	0x00020205

00020294 <system_pinmux_get_group_from_gpio_pin>:
{
   20294:	b580      	push	{r7, lr}
   20296:	b084      	sub	sp, #16
   20298:	af00      	add	r7, sp, #0
   2029a:	0002      	movs	r2, r0
   2029c:	1dfb      	adds	r3, r7, #7
   2029e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   202a0:	230f      	movs	r3, #15
   202a2:	18fb      	adds	r3, r7, r3
   202a4:	1dfa      	adds	r2, r7, #7
   202a6:	7812      	ldrb	r2, [r2, #0]
   202a8:	09d2      	lsrs	r2, r2, #7
   202aa:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   202ac:	230e      	movs	r3, #14
   202ae:	18fb      	adds	r3, r7, r3
   202b0:	1dfa      	adds	r2, r7, #7
   202b2:	7812      	ldrb	r2, [r2, #0]
   202b4:	0952      	lsrs	r2, r2, #5
   202b6:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   202b8:	4b0d      	ldr	r3, [pc, #52]	; (202f0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   202ba:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   202bc:	230f      	movs	r3, #15
   202be:	18fb      	adds	r3, r7, r3
   202c0:	781b      	ldrb	r3, [r3, #0]
   202c2:	2b00      	cmp	r3, #0
   202c4:	d10f      	bne.n	202e6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   202c6:	230f      	movs	r3, #15
   202c8:	18fb      	adds	r3, r7, r3
   202ca:	781b      	ldrb	r3, [r3, #0]
   202cc:	009b      	lsls	r3, r3, #2
   202ce:	2210      	movs	r2, #16
   202d0:	4694      	mov	ip, r2
   202d2:	44bc      	add	ip, r7
   202d4:	4463      	add	r3, ip
   202d6:	3b08      	subs	r3, #8
   202d8:	681a      	ldr	r2, [r3, #0]
   202da:	230e      	movs	r3, #14
   202dc:	18fb      	adds	r3, r7, r3
   202de:	781b      	ldrb	r3, [r3, #0]
   202e0:	01db      	lsls	r3, r3, #7
   202e2:	18d3      	adds	r3, r2, r3
   202e4:	e000      	b.n	202e8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   202e6:	2300      	movs	r3, #0
}
   202e8:	0018      	movs	r0, r3
   202ea:	46bd      	mov	sp, r7
   202ec:	b004      	add	sp, #16
   202ee:	bd80      	pop	{r7, pc}
   202f0:	41004400 	.word	0x41004400

000202f4 <system_interrupt_enable>:
{
   202f4:	b580      	push	{r7, lr}
   202f6:	b082      	sub	sp, #8
   202f8:	af00      	add	r7, sp, #0
   202fa:	0002      	movs	r2, r0
   202fc:	1dfb      	adds	r3, r7, #7
   202fe:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   20300:	4b06      	ldr	r3, [pc, #24]	; (2031c <system_interrupt_enable+0x28>)
   20302:	1dfa      	adds	r2, r7, #7
   20304:	7812      	ldrb	r2, [r2, #0]
   20306:	0011      	movs	r1, r2
   20308:	221f      	movs	r2, #31
   2030a:	400a      	ands	r2, r1
   2030c:	2101      	movs	r1, #1
   2030e:	4091      	lsls	r1, r2
   20310:	000a      	movs	r2, r1
   20312:	601a      	str	r2, [r3, #0]
}
   20314:	46c0      	nop			; (mov r8, r8)
   20316:	46bd      	mov	sp, r7
   20318:	b002      	add	sp, #8
   2031a:	bd80      	pop	{r7, pc}
   2031c:	e000e100 	.word	0xe000e100

00020320 <port_get_group_from_gpio_pin>:
{
   20320:	b580      	push	{r7, lr}
   20322:	b082      	sub	sp, #8
   20324:	af00      	add	r7, sp, #0
   20326:	0002      	movs	r2, r0
   20328:	1dfb      	adds	r3, r7, #7
   2032a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   2032c:	1dfb      	adds	r3, r7, #7
   2032e:	781b      	ldrb	r3, [r3, #0]
   20330:	0018      	movs	r0, r3
   20332:	4b03      	ldr	r3, [pc, #12]	; (20340 <port_get_group_from_gpio_pin+0x20>)
   20334:	4798      	blx	r3
   20336:	0003      	movs	r3, r0
}
   20338:	0018      	movs	r0, r3
   2033a:	46bd      	mov	sp, r7
   2033c:	b002      	add	sp, #8
   2033e:	bd80      	pop	{r7, pc}
   20340:	00020295 	.word	0x00020295

00020344 <port_get_config_defaults>:
{
   20344:	b580      	push	{r7, lr}
   20346:	b082      	sub	sp, #8
   20348:	af00      	add	r7, sp, #0
   2034a:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   2034c:	687b      	ldr	r3, [r7, #4]
   2034e:	2200      	movs	r2, #0
   20350:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   20352:	687b      	ldr	r3, [r7, #4]
   20354:	2201      	movs	r2, #1
   20356:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   20358:	687b      	ldr	r3, [r7, #4]
   2035a:	2200      	movs	r2, #0
   2035c:	709a      	strb	r2, [r3, #2]
}
   2035e:	46c0      	nop			; (mov r8, r8)
   20360:	46bd      	mov	sp, r7
   20362:	b002      	add	sp, #8
   20364:	bd80      	pop	{r7, pc}
	...

00020368 <port_pin_set_output_level>:
{
   20368:	b580      	push	{r7, lr}
   2036a:	b084      	sub	sp, #16
   2036c:	af00      	add	r7, sp, #0
   2036e:	0002      	movs	r2, r0
   20370:	1dfb      	adds	r3, r7, #7
   20372:	701a      	strb	r2, [r3, #0]
   20374:	1dbb      	adds	r3, r7, #6
   20376:	1c0a      	adds	r2, r1, #0
   20378:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2037a:	1dfb      	adds	r3, r7, #7
   2037c:	781b      	ldrb	r3, [r3, #0]
   2037e:	0018      	movs	r0, r3
   20380:	4b0d      	ldr	r3, [pc, #52]	; (203b8 <port_pin_set_output_level+0x50>)
   20382:	4798      	blx	r3
   20384:	0003      	movs	r3, r0
   20386:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   20388:	1dfb      	adds	r3, r7, #7
   2038a:	781b      	ldrb	r3, [r3, #0]
   2038c:	221f      	movs	r2, #31
   2038e:	4013      	ands	r3, r2
   20390:	2201      	movs	r2, #1
   20392:	409a      	lsls	r2, r3
   20394:	0013      	movs	r3, r2
   20396:	60bb      	str	r3, [r7, #8]
	if (level) {
   20398:	1dbb      	adds	r3, r7, #6
   2039a:	781b      	ldrb	r3, [r3, #0]
   2039c:	2b00      	cmp	r3, #0
   2039e:	d003      	beq.n	203a8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   203a0:	68fb      	ldr	r3, [r7, #12]
   203a2:	68ba      	ldr	r2, [r7, #8]
   203a4:	619a      	str	r2, [r3, #24]
}
   203a6:	e002      	b.n	203ae <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   203a8:	68fb      	ldr	r3, [r7, #12]
   203aa:	68ba      	ldr	r2, [r7, #8]
   203ac:	615a      	str	r2, [r3, #20]
}
   203ae:	46c0      	nop			; (mov r8, r8)
   203b0:	46bd      	mov	sp, r7
   203b2:	b004      	add	sp, #16
   203b4:	bd80      	pop	{r7, pc}
   203b6:	46c0      	nop			; (mov r8, r8)
   203b8:	00020321 	.word	0x00020321

000203bc <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
   203bc:	b580      	push	{r7, lr}
   203be:	b084      	sub	sp, #16
   203c0:	af00      	add	r7, sp, #0
   203c2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   203c4:	687b      	ldr	r3, [r7, #4]
   203c6:	681b      	ldr	r3, [r3, #0]
   203c8:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
   203ca:	68fb      	ldr	r3, [r7, #12]
   203cc:	69db      	ldr	r3, [r3, #28]
   203ce:	1e5a      	subs	r2, r3, #1
   203d0:	4193      	sbcs	r3, r2
   203d2:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
   203d4:	0018      	movs	r0, r3
   203d6:	46bd      	mov	sp, r7
   203d8:	b004      	add	sp, #16
   203da:	bd80      	pop	{r7, pc}

000203dc <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
   203dc:	b580      	push	{r7, lr}
   203de:	b082      	sub	sp, #8
   203e0:	af00      	add	r7, sp, #0
   203e2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
   203e4:	687b      	ldr	r3, [r7, #4]
   203e6:	2201      	movs	r2, #1
   203e8:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   203ea:	687b      	ldr	r3, [r7, #4]
   203ec:	2200      	movs	r2, #0
   203ee:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   203f0:	687b      	ldr	r3, [r7, #4]
   203f2:	2200      	movs	r2, #0
   203f4:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   203f6:	687b      	ldr	r3, [r7, #4]
   203f8:	22c0      	movs	r2, #192	; 0xc0
   203fa:	0392      	lsls	r2, r2, #14
   203fc:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   203fe:	687b      	ldr	r3, [r7, #4]
   20400:	2200      	movs	r2, #0
   20402:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   20404:	687b      	ldr	r3, [r7, #4]
   20406:	2200      	movs	r2, #0
   20408:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   2040a:	687b      	ldr	r3, [r7, #4]
   2040c:	2201      	movs	r2, #1
   2040e:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
   20410:	687b      	ldr	r3, [r7, #4]
   20412:	2201      	movs	r2, #1
   20414:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
   20416:	687b      	ldr	r3, [r7, #4]
   20418:	2200      	movs	r2, #0
   2041a:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
   2041c:	687b      	ldr	r3, [r7, #4]
   2041e:	2224      	movs	r2, #36	; 0x24
   20420:	2100      	movs	r1, #0
   20422:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   20424:	687b      	ldr	r3, [r7, #4]
   20426:	3318      	adds	r3, #24
   20428:	220c      	movs	r2, #12
   2042a:	2100      	movs	r1, #0
   2042c:	0018      	movs	r0, r3
   2042e:	4b0a      	ldr	r3, [pc, #40]	; (20458 <spi_get_config_defaults+0x7c>)
   20430:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
   20432:	687b      	ldr	r3, [r7, #4]
   20434:	4a09      	ldr	r2, [pc, #36]	; (2045c <spi_get_config_defaults+0x80>)
   20436:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
   20438:	687b      	ldr	r3, [r7, #4]
   2043a:	2200      	movs	r2, #0
   2043c:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   2043e:	687b      	ldr	r3, [r7, #4]
   20440:	2200      	movs	r2, #0
   20442:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   20444:	687b      	ldr	r3, [r7, #4]
   20446:	2200      	movs	r2, #0
   20448:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   2044a:	687b      	ldr	r3, [r7, #4]
   2044c:	2200      	movs	r2, #0
   2044e:	635a      	str	r2, [r3, #52]	; 0x34

};
   20450:	46c0      	nop			; (mov r8, r8)
   20452:	46bd      	mov	sp, r7
   20454:	b002      	add	sp, #8
   20456:	bd80      	pop	{r7, pc}
   20458:	0003582f 	.word	0x0003582f
   2045c:	000186a0 	.word	0x000186a0

00020460 <spi_slave_inst_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
   20460:	b580      	push	{r7, lr}
   20462:	b082      	sub	sp, #8
   20464:	af00      	add	r7, sp, #0
   20466:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->ss_pin          = 10;
   20468:	687b      	ldr	r3, [r7, #4]
   2046a:	220a      	movs	r2, #10
   2046c:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   2046e:	687b      	ldr	r3, [r7, #4]
   20470:	2200      	movs	r2, #0
   20472:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   20474:	687b      	ldr	r3, [r7, #4]
   20476:	2200      	movs	r2, #0
   20478:	709a      	strb	r2, [r3, #2]
}
   2047a:	46c0      	nop			; (mov r8, r8)
   2047c:	46bd      	mov	sp, r7
   2047e:	b002      	add	sp, #8
   20480:	bd80      	pop	{r7, pc}
	...

00020484 <spi_attach_slave>:
 *
 */
static inline void spi_attach_slave(
		struct spi_slave_inst *const slave,
		const struct spi_slave_inst_config *const config)
{
   20484:	b580      	push	{r7, lr}
   20486:	b084      	sub	sp, #16
   20488:	af00      	add	r7, sp, #0
   2048a:	6078      	str	r0, [r7, #4]
   2048c:	6039      	str	r1, [r7, #0]
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
   2048e:	683b      	ldr	r3, [r7, #0]
   20490:	781a      	ldrb	r2, [r3, #0]
   20492:	687b      	ldr	r3, [r7, #4]
   20494:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   20496:	683b      	ldr	r3, [r7, #0]
   20498:	785a      	ldrb	r2, [r3, #1]
   2049a:	687b      	ldr	r3, [r7, #4]
   2049c:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   2049e:	683b      	ldr	r3, [r7, #0]
   204a0:	789a      	ldrb	r2, [r3, #2]
   204a2:	687b      	ldr	r3, [r7, #4]
   204a4:	709a      	strb	r2, [r3, #2]

	/* Get default config for pin */
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   204a6:	230c      	movs	r3, #12
   204a8:	18fb      	adds	r3, r7, r3
   204aa:	0018      	movs	r0, r3
   204ac:	4b0b      	ldr	r3, [pc, #44]	; (204dc <spi_attach_slave+0x58>)
   204ae:	4798      	blx	r3

	/* Edit config to set the pin as output */
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   204b0:	230c      	movs	r3, #12
   204b2:	18fb      	adds	r3, r7, r3
   204b4:	2201      	movs	r2, #1
   204b6:	701a      	strb	r2, [r3, #0]

	/* Set config on Slave Select pin */
	port_pin_set_config(slave->ss_pin, &pin_conf);
   204b8:	687b      	ldr	r3, [r7, #4]
   204ba:	781b      	ldrb	r3, [r3, #0]
   204bc:	220c      	movs	r2, #12
   204be:	18ba      	adds	r2, r7, r2
   204c0:	0011      	movs	r1, r2
   204c2:	0018      	movs	r0, r3
   204c4:	4b06      	ldr	r3, [pc, #24]	; (204e0 <spi_attach_slave+0x5c>)
   204c6:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   204c8:	687b      	ldr	r3, [r7, #4]
   204ca:	781b      	ldrb	r3, [r3, #0]
   204cc:	2101      	movs	r1, #1
   204ce:	0018      	movs	r0, r3
   204d0:	4b04      	ldr	r3, [pc, #16]	; (204e4 <spi_attach_slave+0x60>)
   204d2:	4798      	blx	r3
}
   204d4:	46c0      	nop			; (mov r8, r8)
   204d6:	46bd      	mov	sp, r7
   204d8:	b004      	add	sp, #16
   204da:	bd80      	pop	{r7, pc}
   204dc:	00020345 	.word	0x00020345
   204e0:	00027829 	.word	0x00027829
   204e4:	00020369 	.word	0x00020369

000204e8 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
   204e8:	b580      	push	{r7, lr}
   204ea:	b084      	sub	sp, #16
   204ec:	af00      	add	r7, sp, #0
   204ee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   204f0:	687b      	ldr	r3, [r7, #4]
   204f2:	681b      	ldr	r3, [r3, #0]
   204f4:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   204f6:	687b      	ldr	r3, [r7, #4]
   204f8:	681b      	ldr	r3, [r3, #0]
   204fa:	0018      	movs	r0, r3
   204fc:	4b0b      	ldr	r3, [pc, #44]	; (2052c <spi_enable+0x44>)
   204fe:	4798      	blx	r3
   20500:	0003      	movs	r3, r0
   20502:	0018      	movs	r0, r3
   20504:	4b0a      	ldr	r3, [pc, #40]	; (20530 <spi_enable+0x48>)
   20506:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   20508:	46c0      	nop			; (mov r8, r8)
   2050a:	687b      	ldr	r3, [r7, #4]
   2050c:	0018      	movs	r0, r3
   2050e:	4b09      	ldr	r3, [pc, #36]	; (20534 <spi_enable+0x4c>)
   20510:	4798      	blx	r3
   20512:	1e03      	subs	r3, r0, #0
   20514:	d1f9      	bne.n	2050a <spi_enable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   20516:	68fb      	ldr	r3, [r7, #12]
   20518:	681b      	ldr	r3, [r3, #0]
   2051a:	2202      	movs	r2, #2
   2051c:	431a      	orrs	r2, r3
   2051e:	68fb      	ldr	r3, [r7, #12]
   20520:	601a      	str	r2, [r3, #0]
}
   20522:	46c0      	nop			; (mov r8, r8)
   20524:	46bd      	mov	sp, r7
   20526:	b004      	add	sp, #16
   20528:	bd80      	pop	{r7, pc}
   2052a:	46c0      	nop			; (mov r8, r8)
   2052c:	000284f9 	.word	0x000284f9
   20530:	000202f5 	.word	0x000202f5
   20534:	000203bd 	.word	0x000203bd

00020538 <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
   20538:	b580      	push	{r7, lr}
   2053a:	b084      	sub	sp, #16
   2053c:	af00      	add	r7, sp, #0
   2053e:	6078      	str	r0, [r7, #4]
   20540:	000a      	movs	r2, r1
   20542:	1cfb      	adds	r3, r7, #3
   20544:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
   20546:	230f      	movs	r3, #15
   20548:	18fb      	adds	r3, r7, r3
   2054a:	2200      	movs	r2, #0
   2054c:	701a      	strb	r2, [r3, #0]
	while (size--) {
   2054e:	e038      	b.n	205c2 <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
   20550:	687b      	ldr	r3, [r7, #4]
   20552:	1c5a      	adds	r2, r3, #1
   20554:	607a      	str	r2, [r7, #4]
   20556:	220e      	movs	r2, #14
   20558:	18ba      	adds	r2, r7, r2
   2055a:	781b      	ldrb	r3, [r3, #0]
   2055c:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   2055e:	230d      	movs	r3, #13
   20560:	18fb      	adds	r3, r7, r3
   20562:	2200      	movs	r2, #0
   20564:	701a      	strb	r2, [r3, #0]
   20566:	e027      	b.n	205b8 <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
   20568:	230f      	movs	r3, #15
   2056a:	18fa      	adds	r2, r7, r3
   2056c:	230f      	movs	r3, #15
   2056e:	18fb      	adds	r3, r7, r3
   20570:	781b      	ldrb	r3, [r3, #0]
   20572:	18db      	adds	r3, r3, r3
   20574:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
   20576:	230e      	movs	r3, #14
   20578:	18fa      	adds	r2, r7, r3
   2057a:	230f      	movs	r3, #15
   2057c:	18fb      	adds	r3, r7, r3
   2057e:	7812      	ldrb	r2, [r2, #0]
   20580:	781b      	ldrb	r3, [r3, #0]
   20582:	4053      	eors	r3, r2
   20584:	b2db      	uxtb	r3, r3
   20586:	b25b      	sxtb	r3, r3
   20588:	2b00      	cmp	r3, #0
   2058a:	da07      	bge.n	2059c <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
   2058c:	230f      	movs	r3, #15
   2058e:	18fb      	adds	r3, r7, r3
   20590:	220f      	movs	r2, #15
   20592:	18ba      	adds	r2, r7, r2
   20594:	7812      	ldrb	r2, [r2, #0]
   20596:	2109      	movs	r1, #9
   20598:	404a      	eors	r2, r1
   2059a:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
   2059c:	230e      	movs	r3, #14
   2059e:	18fa      	adds	r2, r7, r3
   205a0:	230e      	movs	r3, #14
   205a2:	18fb      	adds	r3, r7, r3
   205a4:	781b      	ldrb	r3, [r3, #0]
   205a6:	18db      	adds	r3, r3, r3
   205a8:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
   205aa:	230d      	movs	r3, #13
   205ac:	18fb      	adds	r3, r7, r3
   205ae:	781a      	ldrb	r2, [r3, #0]
   205b0:	230d      	movs	r3, #13
   205b2:	18fb      	adds	r3, r7, r3
   205b4:	3201      	adds	r2, #1
   205b6:	701a      	strb	r2, [r3, #0]
   205b8:	230d      	movs	r3, #13
   205ba:	18fb      	adds	r3, r7, r3
   205bc:	781b      	ldrb	r3, [r3, #0]
   205be:	2b07      	cmp	r3, #7
   205c0:	d9d2      	bls.n	20568 <sd_mmc_spi_crc7+0x30>
	while (size--) {
   205c2:	1cfb      	adds	r3, r7, #3
   205c4:	781b      	ldrb	r3, [r3, #0]
   205c6:	1cfa      	adds	r2, r7, #3
   205c8:	1e59      	subs	r1, r3, #1
   205ca:	7011      	strb	r1, [r2, #0]
   205cc:	2b00      	cmp	r3, #0
   205ce:	d1bf      	bne.n	20550 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
   205d0:	230f      	movs	r3, #15
   205d2:	18fb      	adds	r3, r7, r3
   205d4:	781b      	ldrb	r3, [r3, #0]
   205d6:	005b      	lsls	r3, r3, #1
   205d8:	b25b      	sxtb	r3, r3
   205da:	2201      	movs	r2, #1
   205dc:	4313      	orrs	r3, r2
   205de:	b25a      	sxtb	r2, r3
   205e0:	230f      	movs	r3, #15
   205e2:	18fb      	adds	r3, r7, r3
   205e4:	701a      	strb	r2, [r3, #0]
	return crc;
   205e6:	230f      	movs	r3, #15
   205e8:	18fb      	adds	r3, r7, r3
   205ea:	781b      	ldrb	r3, [r3, #0]
}
   205ec:	0018      	movs	r0, r3
   205ee:	46bd      	mov	sp, r7
   205f0:	b004      	add	sp, #16
   205f2:	bd80      	pop	{r7, pc}

000205f4 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
   205f4:	b590      	push	{r4, r7, lr}
   205f6:	b083      	sub	sp, #12
   205f8:	af00      	add	r7, sp, #0
	uint8_t line = 0xFF;
   205fa:	1c7b      	adds	r3, r7, #1
   205fc:	22ff      	movs	r2, #255	; 0xff
   205fe:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
   20600:	1cbb      	adds	r3, r7, #2
   20602:	22ff      	movs	r2, #255	; 0xff
   20604:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   20606:	1cbb      	adds	r3, r7, #2
   20608:	881b      	ldrh	r3, [r3, #0]
   2060a:	1c79      	adds	r1, r7, #1
   2060c:	4811      	ldr	r0, [pc, #68]	; (20654 <sd_mmc_spi_wait_busy+0x60>)
   2060e:	2201      	movs	r2, #1
   20610:	4c11      	ldr	r4, [pc, #68]	; (20658 <sd_mmc_spi_wait_busy+0x64>)
   20612:	47a0      	blx	r4
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
   20614:	4b11      	ldr	r3, [pc, #68]	; (2065c <sd_mmc_spi_wait_busy+0x68>)
   20616:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   20618:	1cbb      	adds	r3, r7, #2
   2061a:	881b      	ldrh	r3, [r3, #0]
   2061c:	1c79      	adds	r1, r7, #1
   2061e:	480d      	ldr	r0, [pc, #52]	; (20654 <sd_mmc_spi_wait_busy+0x60>)
   20620:	2201      	movs	r2, #1
   20622:	4c0d      	ldr	r4, [pc, #52]	; (20658 <sd_mmc_spi_wait_busy+0x64>)
   20624:	47a0      	blx	r4
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
   20626:	1cbb      	adds	r3, r7, #2
   20628:	881b      	ldrh	r3, [r3, #0]
   2062a:	1c79      	adds	r1, r7, #1
   2062c:	4809      	ldr	r0, [pc, #36]	; (20654 <sd_mmc_spi_wait_busy+0x60>)
   2062e:	2201      	movs	r2, #1
   20630:	4c09      	ldr	r4, [pc, #36]	; (20658 <sd_mmc_spi_wait_busy+0x64>)
   20632:	47a0      	blx	r4
			dummy);
		if (!(nec_timeout--)) {
   20634:	687b      	ldr	r3, [r7, #4]
   20636:	1e5a      	subs	r2, r3, #1
   20638:	607a      	str	r2, [r7, #4]
   2063a:	2b00      	cmp	r3, #0
   2063c:	d101      	bne.n	20642 <sd_mmc_spi_wait_busy+0x4e>
			return false;
   2063e:	2300      	movs	r3, #0
   20640:	e004      	b.n	2064c <sd_mmc_spi_wait_busy+0x58>
		}
	} while (line != 0xFF);
   20642:	1c7b      	adds	r3, r7, #1
   20644:	781b      	ldrb	r3, [r3, #0]
   20646:	2bff      	cmp	r3, #255	; 0xff
   20648:	d1ed      	bne.n	20626 <sd_mmc_spi_wait_busy+0x32>
	return true;
   2064a:	2301      	movs	r3, #1
}
   2064c:	0018      	movs	r0, r3
   2064e:	46bd      	mov	sp, r7
   20650:	b003      	add	sp, #12
   20652:	bd90      	pop	{r4, r7, pc}
   20654:	20004250 	.word	0x20004250
   20658:	00028e39 	.word	0x00028e39
   2065c:	00030d40 	.word	0x00030d40

00020660 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
   20660:	b590      	push	{r4, r7, lr}
   20662:	b083      	sub	sp, #12
   20664:	af00      	add	r7, sp, #0
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
   20666:	1cbb      	adds	r3, r7, #2
   20668:	22ff      	movs	r2, #255	; 0xff
   2066a:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
   2066c:	1c7b      	adds	r3, r7, #1
   2066e:	2200      	movs	r2, #0
   20670:	701a      	strb	r2, [r3, #0]
	i = 500000;
   20672:	4b18      	ldr	r3, [pc, #96]	; (206d4 <sd_mmc_spi_start_read_block+0x74>)
   20674:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
   20676:	687b      	ldr	r3, [r7, #4]
   20678:	1e5a      	subs	r2, r3, #1
   2067a:	607a      	str	r2, [r7, #4]
   2067c:	2b00      	cmp	r3, #0
   2067e:	d104      	bne.n	2068a <sd_mmc_spi_start_read_block+0x2a>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
   20680:	4b15      	ldr	r3, [pc, #84]	; (206d8 <sd_mmc_spi_start_read_block+0x78>)
   20682:	2204      	movs	r2, #4
   20684:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
   20686:	2300      	movs	r3, #0
   20688:	e020      	b.n	206cc <sd_mmc_spi_start_read_block+0x6c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
   2068a:	1cbb      	adds	r3, r7, #2
   2068c:	881b      	ldrh	r3, [r3, #0]
   2068e:	1c79      	adds	r1, r7, #1
   20690:	4812      	ldr	r0, [pc, #72]	; (206dc <sd_mmc_spi_start_read_block+0x7c>)
   20692:	2201      	movs	r2, #1
   20694:	4c12      	ldr	r4, [pc, #72]	; (206e0 <sd_mmc_spi_start_read_block+0x80>)
   20696:	47a0      	blx	r4
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
   20698:	1c7b      	adds	r3, r7, #1
   2069a:	781b      	ldrb	r3, [r3, #0]
   2069c:	001a      	movs	r2, r3
   2069e:	23f0      	movs	r3, #240	; 0xf0
   206a0:	4013      	ands	r3, r2
   206a2:	d10e      	bne.n	206c2 <sd_mmc_spi_start_read_block+0x62>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
   206a4:	1c7b      	adds	r3, r7, #1
   206a6:	781b      	ldrb	r3, [r3, #0]
   206a8:	001a      	movs	r2, r3
   206aa:	2307      	movs	r3, #7
   206ac:	4013      	ands	r3, r2
   206ae:	d003      	beq.n	206b8 <sd_mmc_spi_start_read_block+0x58>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
   206b0:	4b09      	ldr	r3, [pc, #36]	; (206d8 <sd_mmc_spi_start_read_block+0x78>)
   206b2:	2207      	movs	r2, #7
   206b4:	701a      	strb	r2, [r3, #0]
   206b6:	e002      	b.n	206be <sd_mmc_spi_start_read_block+0x5e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
   206b8:	4b07      	ldr	r3, [pc, #28]	; (206d8 <sd_mmc_spi_start_read_block+0x78>)
   206ba:	220b      	movs	r2, #11
   206bc:	701a      	strb	r2, [r3, #0]
			}
			return false;
   206be:	2300      	movs	r3, #0
   206c0:	e004      	b.n	206cc <sd_mmc_spi_start_read_block+0x6c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
   206c2:	1c7b      	adds	r3, r7, #1
   206c4:	781b      	ldrb	r3, [r3, #0]
   206c6:	2bfe      	cmp	r3, #254	; 0xfe
   206c8:	d1d5      	bne.n	20676 <sd_mmc_spi_start_read_block+0x16>

	return true;
   206ca:	2301      	movs	r3, #1
}
   206cc:	0018      	movs	r0, r3
   206ce:	46bd      	mov	sp, r7
   206d0:	b003      	add	sp, #12
   206d2:	bd90      	pop	{r4, r7, pc}
   206d4:	0007a120 	.word	0x0007a120
   206d8:	20004293 	.word	0x20004293
   206dc:	20004250 	.word	0x20004250
   206e0:	00028e39 	.word	0x00028e39

000206e4 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
   206e4:	b590      	push	{r4, r7, lr}
   206e6:	b083      	sub	sp, #12
   206e8:	af00      	add	r7, sp, #0
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
   206ea:	1dbb      	adds	r3, r7, #6
   206ec:	22ff      	movs	r2, #255	; 0xff
   206ee:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
   206f0:	1dbb      	adds	r3, r7, #6
   206f2:	881b      	ldrh	r3, [r3, #0]
   206f4:	1d39      	adds	r1, r7, #4
   206f6:	4804      	ldr	r0, [pc, #16]	; (20708 <sd_mmc_spi_stop_read_block+0x24>)
   206f8:	2202      	movs	r2, #2
   206fa:	4c04      	ldr	r4, [pc, #16]	; (2070c <sd_mmc_spi_stop_read_block+0x28>)
   206fc:	47a0      	blx	r4
			dummy);
}
   206fe:	46c0      	nop			; (mov r8, r8)
   20700:	46bd      	mov	sp, r7
   20702:	b003      	add	sp, #12
   20704:	bd90      	pop	{r4, r7, pc}
   20706:	46c0      	nop			; (mov r8, r8)
   20708:	20004250 	.word	0x20004250
   2070c:	00028e39 	.word	0x00028e39

00020710 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
   20710:	b580      	push	{r7, lr}
   20712:	b082      	sub	sp, #8
   20714:	af00      	add	r7, sp, #0
	uint8_t dummy = 0xFF;
   20716:	1dfb      	adds	r3, r7, #7
   20718:	22ff      	movs	r2, #255	; 0xff
   2071a:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
   2071c:	1df9      	adds	r1, r7, #7
   2071e:	4b0d      	ldr	r3, [pc, #52]	; (20754 <sd_mmc_spi_start_write_block+0x44>)
   20720:	2201      	movs	r2, #1
   20722:	0018      	movs	r0, r3
   20724:	4b0c      	ldr	r3, [pc, #48]	; (20758 <sd_mmc_spi_start_write_block+0x48>)
   20726:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
   20728:	4b0c      	ldr	r3, [pc, #48]	; (2075c <sd_mmc_spi_start_write_block+0x4c>)
   2072a:	881b      	ldrh	r3, [r3, #0]
   2072c:	2b01      	cmp	r3, #1
   2072e:	d103      	bne.n	20738 <sd_mmc_spi_start_write_block+0x28>
		token = SPI_TOKEN_SINGLE_WRITE;
   20730:	1dbb      	adds	r3, r7, #6
   20732:	22fe      	movs	r2, #254	; 0xfe
   20734:	701a      	strb	r2, [r3, #0]
   20736:	e002      	b.n	2073e <sd_mmc_spi_start_write_block+0x2e>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
   20738:	1dbb      	adds	r3, r7, #6
   2073a:	22fc      	movs	r2, #252	; 0xfc
   2073c:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
   2073e:	1db9      	adds	r1, r7, #6
   20740:	4b04      	ldr	r3, [pc, #16]	; (20754 <sd_mmc_spi_start_write_block+0x44>)
   20742:	2201      	movs	r2, #1
   20744:	0018      	movs	r0, r3
   20746:	4b04      	ldr	r3, [pc, #16]	; (20758 <sd_mmc_spi_start_write_block+0x48>)
   20748:	4798      	blx	r3
}
   2074a:	46c0      	nop			; (mov r8, r8)
   2074c:	46bd      	mov	sp, r7
   2074e:	b002      	add	sp, #8
   20750:	bd80      	pop	{r7, pc}
   20752:	46c0      	nop			; (mov r8, r8)
   20754:	20004250 	.word	0x20004250
   20758:	0002905d 	.word	0x0002905d
   2075c:	2000429e 	.word	0x2000429e

00020760 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
   20760:	b590      	push	{r4, r7, lr}
   20762:	b083      	sub	sp, #12
   20764:	af00      	add	r7, sp, #0
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
   20766:	1dbb      	adds	r3, r7, #6
   20768:	22ff      	movs	r2, #255	; 0xff
   2076a:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
   2076c:	1cbb      	adds	r3, r7, #2
   2076e:	2201      	movs	r2, #1
   20770:	4252      	negs	r2, r2
   20772:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
   20774:	1cb9      	adds	r1, r7, #2
   20776:	4b1b      	ldr	r3, [pc, #108]	; (207e4 <sd_mmc_spi_stop_write_block+0x84>)
   20778:	2202      	movs	r2, #2
   2077a:	0018      	movs	r0, r3
   2077c:	4b1a      	ldr	r3, [pc, #104]	; (207e8 <sd_mmc_spi_stop_write_block+0x88>)
   2077e:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
   20780:	1dbb      	adds	r3, r7, #6
   20782:	881b      	ldrh	r3, [r3, #0]
   20784:	1d79      	adds	r1, r7, #5
   20786:	4817      	ldr	r0, [pc, #92]	; (207e4 <sd_mmc_spi_stop_write_block+0x84>)
   20788:	2201      	movs	r2, #1
   2078a:	4c18      	ldr	r4, [pc, #96]	; (207ec <sd_mmc_spi_stop_write_block+0x8c>)
   2078c:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
   2078e:	1d7b      	adds	r3, r7, #5
   20790:	781b      	ldrb	r3, [r3, #0]
   20792:	001a      	movs	r2, r3
   20794:	2310      	movs	r3, #16
   20796:	4013      	ands	r3, r2
   20798:	d105      	bne.n	207a6 <sd_mmc_spi_stop_write_block+0x46>
   2079a:	1d7b      	adds	r3, r7, #5
   2079c:	781b      	ldrb	r3, [r3, #0]
   2079e:	001a      	movs	r2, r3
   207a0:	2301      	movs	r3, #1
   207a2:	4013      	ands	r3, r2
   207a4:	d104      	bne.n	207b0 <sd_mmc_spi_stop_write_block+0x50>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   207a6:	4b12      	ldr	r3, [pc, #72]	; (207f0 <sd_mmc_spi_stop_write_block+0x90>)
   207a8:	2201      	movs	r2, #1
   207aa:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
   207ac:	2300      	movs	r3, #0
   207ae:	e014      	b.n	207da <sd_mmc_spi_stop_write_block+0x7a>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
   207b0:	1d7b      	adds	r3, r7, #5
   207b2:	781b      	ldrb	r3, [r3, #0]
   207b4:	001a      	movs	r2, r3
   207b6:	231e      	movs	r3, #30
   207b8:	4013      	ands	r3, r2
   207ba:	2b04      	cmp	r3, #4
   207bc:	d00b      	beq.n	207d6 <sd_mmc_spi_stop_write_block+0x76>
   207be:	2b0a      	cmp	r3, #10
   207c0:	d104      	bne.n	207cc <sd_mmc_spi_stop_write_block+0x6c>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
   207c2:	4b0b      	ldr	r3, [pc, #44]	; (207f0 <sd_mmc_spi_stop_write_block+0x90>)
   207c4:	2208      	movs	r2, #8
   207c6:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
   207c8:	2300      	movs	r3, #0
   207ca:	e006      	b.n	207da <sd_mmc_spi_stop_write_block+0x7a>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
   207cc:	4b08      	ldr	r3, [pc, #32]	; (207f0 <sd_mmc_spi_stop_write_block+0x90>)
   207ce:	220a      	movs	r2, #10
   207d0:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
   207d2:	2300      	movs	r3, #0
   207d4:	e001      	b.n	207da <sd_mmc_spi_stop_write_block+0x7a>
		break;
   207d6:	46c0      	nop			; (mov r8, r8)
	}
	return true;
   207d8:	2301      	movs	r3, #1
}
   207da:	0018      	movs	r0, r3
   207dc:	46bd      	mov	sp, r7
   207de:	b003      	add	sp, #12
   207e0:	bd90      	pop	{r4, r7, pc}
   207e2:	46c0      	nop			; (mov r8, r8)
   207e4:	20004250 	.word	0x20004250
   207e8:	0002905d 	.word	0x0002905d
   207ec:	00028e39 	.word	0x00028e39
   207f0:	20004293 	.word	0x20004293

000207f4 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
   207f4:	b590      	push	{r4, r7, lr}
   207f6:	b083      	sub	sp, #12
   207f8:	af00      	add	r7, sp, #0
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
   207fa:	4b1d      	ldr	r3, [pc, #116]	; (20870 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   207fc:	881b      	ldrh	r3, [r3, #0]
   207fe:	2b01      	cmp	r3, #1
   20800:	d101      	bne.n	20806 <sd_mmc_spi_stop_multiwrite_block+0x12>
		return true; // Single block write
   20802:	2301      	movs	r3, #1
   20804:	e030      	b.n	20868 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	if (sd_mmc_spi_nb_block >
   20806:	4b1a      	ldr	r3, [pc, #104]	; (20870 <sd_mmc_spi_stop_multiwrite_block+0x7c>)
   20808:	881b      	ldrh	r3, [r3, #0]
   2080a:	001c      	movs	r4, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
   2080c:	4b19      	ldr	r3, [pc, #100]	; (20874 <sd_mmc_spi_stop_multiwrite_block+0x80>)
   2080e:	681a      	ldr	r2, [r3, #0]
   20810:	4b19      	ldr	r3, [pc, #100]	; (20878 <sd_mmc_spi_stop_multiwrite_block+0x84>)
   20812:	881b      	ldrh	r3, [r3, #0]
   20814:	0019      	movs	r1, r3
   20816:	4b19      	ldr	r3, [pc, #100]	; (2087c <sd_mmc_spi_stop_multiwrite_block+0x88>)
   20818:	0010      	movs	r0, r2
   2081a:	4798      	blx	r3
   2081c:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
   2081e:	429c      	cmp	r4, r3
   20820:	d901      	bls.n	20826 <sd_mmc_spi_stop_multiwrite_block+0x32>
		return true; // It is not the End of multi write
   20822:	2301      	movs	r3, #1
   20824:	e020      	b.n	20868 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
   20826:	1dfb      	adds	r3, r7, #7
   20828:	22ff      	movs	r2, #255	; 0xff
   2082a:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   2082c:	1df9      	adds	r1, r7, #7
   2082e:	4b14      	ldr	r3, [pc, #80]	; (20880 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   20830:	2201      	movs	r2, #1
   20832:	0018      	movs	r0, r3
   20834:	4b13      	ldr	r3, [pc, #76]	; (20884 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   20836:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
   20838:	1dfb      	adds	r3, r7, #7
   2083a:	22fd      	movs	r2, #253	; 0xfd
   2083c:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
   2083e:	1df9      	adds	r1, r7, #7
   20840:	4b0f      	ldr	r3, [pc, #60]	; (20880 <sd_mmc_spi_stop_multiwrite_block+0x8c>)
   20842:	2201      	movs	r2, #1
   20844:	0018      	movs	r0, r3
   20846:	4b0f      	ldr	r3, [pc, #60]	; (20884 <sd_mmc_spi_stop_multiwrite_block+0x90>)
   20848:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
   2084a:	4b0f      	ldr	r3, [pc, #60]	; (20888 <sd_mmc_spi_stop_multiwrite_block+0x94>)
   2084c:	4798      	blx	r3
   2084e:	0003      	movs	r3, r0
   20850:	001a      	movs	r2, r3
   20852:	2301      	movs	r3, #1
   20854:	4053      	eors	r3, r2
   20856:	b2db      	uxtb	r3, r3
   20858:	2b00      	cmp	r3, #0
   2085a:	d004      	beq.n	20866 <sd_mmc_spi_stop_multiwrite_block+0x72>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   2085c:	4b0b      	ldr	r3, [pc, #44]	; (2088c <sd_mmc_spi_stop_multiwrite_block+0x98>)
   2085e:	2205      	movs	r2, #5
   20860:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
   20862:	2300      	movs	r3, #0
   20864:	e000      	b.n	20868 <sd_mmc_spi_stop_multiwrite_block+0x74>
	}
	return true;
   20866:	2301      	movs	r3, #1
}
   20868:	0018      	movs	r0, r3
   2086a:	46bd      	mov	sp, r7
   2086c:	b003      	add	sp, #12
   2086e:	bd90      	pop	{r4, r7, pc}
   20870:	2000429e 	.word	0x2000429e
   20874:	20004298 	.word	0x20004298
   20878:	2000429c 	.word	0x2000429c
   2087c:	00033855 	.word	0x00033855
   20880:	20004250 	.word	0x20004250
   20884:	0002905d 	.word	0x0002905d
   20888:	000205f5 	.word	0x000205f5
   2088c:	20004293 	.word	0x20004293

00020890 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
   20890:	b580      	push	{r7, lr}
   20892:	b090      	sub	sp, #64	; 0x40
   20894:	af00      	add	r7, sp, #0
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20896:	4b1f      	ldr	r3, [pc, #124]	; (20914 <sd_mmc_spi_init+0x84>)
   20898:	2200      	movs	r2, #0
   2089a:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   2089c:	233c      	movs	r3, #60	; 0x3c
   2089e:	18fb      	adds	r3, r7, r3
   208a0:	0018      	movs	r0, r3
   208a2:	4b1d      	ldr	r3, [pc, #116]	; (20918 <sd_mmc_spi_init+0x88>)
   208a4:	4798      	blx	r3
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
	#endif

	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
   208a6:	1d3b      	adds	r3, r7, #4
   208a8:	0018      	movs	r0, r3
   208aa:	4b1c      	ldr	r3, [pc, #112]	; (2091c <sd_mmc_spi_init+0x8c>)
   208ac:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
   208ae:	1d3b      	adds	r3, r7, #4
   208b0:	2280      	movs	r2, #128	; 0x80
   208b2:	0252      	lsls	r2, r2, #9
   208b4:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
   208b6:	1d3b      	adds	r3, r7, #4
   208b8:	4a19      	ldr	r2, [pc, #100]	; (20920 <sd_mmc_spi_init+0x90>)
   208ba:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
   208bc:	1d3b      	adds	r3, r7, #4
   208be:	4a19      	ldr	r2, [pc, #100]	; (20924 <sd_mmc_spi_init+0x94>)
   208c0:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
   208c2:	1d3b      	adds	r3, r7, #4
   208c4:	4a18      	ldr	r2, [pc, #96]	; (20928 <sd_mmc_spi_init+0x98>)
   208c6:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
   208c8:	1d3b      	adds	r3, r7, #4
   208ca:	4a18      	ldr	r2, [pc, #96]	; (2092c <sd_mmc_spi_init+0x9c>)
   208cc:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
   208ce:	1d3b      	adds	r3, r7, #4
   208d0:	2224      	movs	r2, #36	; 0x24
   208d2:	2100      	movs	r1, #0
   208d4:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
   208d6:	1d3b      	adds	r3, r7, #4
   208d8:	4a15      	ldr	r2, [pc, #84]	; (20930 <sd_mmc_spi_init+0xa0>)
   208da:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
   208dc:	1d3a      	adds	r2, r7, #4
   208de:	4915      	ldr	r1, [pc, #84]	; (20934 <sd_mmc_spi_init+0xa4>)
   208e0:	4b15      	ldr	r3, [pc, #84]	; (20938 <sd_mmc_spi_init+0xa8>)
   208e2:	0018      	movs	r0, r3
   208e4:	4b15      	ldr	r3, [pc, #84]	; (2093c <sd_mmc_spi_init+0xac>)
   208e6:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
   208e8:	4b13      	ldr	r3, [pc, #76]	; (20938 <sd_mmc_spi_init+0xa8>)
   208ea:	0018      	movs	r0, r3
   208ec:	4b14      	ldr	r3, [pc, #80]	; (20940 <sd_mmc_spi_init+0xb0>)
   208ee:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
   208f0:	4b14      	ldr	r3, [pc, #80]	; (20944 <sd_mmc_spi_init+0xb4>)
   208f2:	0018      	movs	r0, r3
   208f4:	4b14      	ldr	r3, [pc, #80]	; (20948 <sd_mmc_spi_init+0xb8>)
   208f6:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
   208f8:	4b14      	ldr	r3, [pc, #80]	; (2094c <sd_mmc_spi_init+0xbc>)
   208fa:	781a      	ldrb	r2, [r3, #0]
   208fc:	4b11      	ldr	r3, [pc, #68]	; (20944 <sd_mmc_spi_init+0xb4>)
   208fe:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
   20900:	4a10      	ldr	r2, [pc, #64]	; (20944 <sd_mmc_spi_init+0xb4>)
   20902:	4b13      	ldr	r3, [pc, #76]	; (20950 <sd_mmc_spi_init+0xc0>)
   20904:	0011      	movs	r1, r2
   20906:	0018      	movs	r0, r3
   20908:	4b12      	ldr	r3, [pc, #72]	; (20954 <sd_mmc_spi_init+0xc4>)
   2090a:	4798      	blx	r3
}
   2090c:	46c0      	nop			; (mov r8, r8)
   2090e:	46bd      	mov	sp, r7
   20910:	b010      	add	sp, #64	; 0x40
   20912:	bd80      	pop	{r7, pc}
   20914:	20004293 	.word	0x20004293
   20918:	00020345 	.word	0x00020345
   2091c:	000203dd 	.word	0x000203dd
   20920:	00100002 	.word	0x00100002
   20924:	00110002 	.word	0x00110002
   20928:	00120002 	.word	0x00120002
   2092c:	00130002 	.word	0x00130002
   20930:	00061a80 	.word	0x00061a80
   20934:	42000c00 	.word	0x42000c00
   20938:	20004250 	.word	0x20004250
   2093c:	00028ca9 	.word	0x00028ca9
   20940:	000204e9 	.word	0x000204e9
   20944:	20004290 	.word	0x20004290
   20948:	00020461 	.word	0x00020461
   2094c:	20000118 	.word	0x20000118
   20950:	2000428c 	.word	0x2000428c
   20954:	00020485 	.word	0x00020485

00020958 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
   20958:	b590      	push	{r4, r7, lr}
   2095a:	b083      	sub	sp, #12
   2095c:	af00      	add	r7, sp, #0
   2095e:	0004      	movs	r4, r0
   20960:	6039      	str	r1, [r7, #0]
   20962:	0010      	movs	r0, r2
   20964:	0019      	movs	r1, r3
   20966:	1dfb      	adds	r3, r7, #7
   20968:	1c22      	adds	r2, r4, #0
   2096a:	701a      	strb	r2, [r3, #0]
   2096c:	1dbb      	adds	r3, r7, #6
   2096e:	1c02      	adds	r2, r0, #0
   20970:	701a      	strb	r2, [r3, #0]
   20972:	1d7b      	adds	r3, r7, #5
   20974:	1c0a      	adds	r2, r1, #0
   20976:	701a      	strb	r2, [r3, #0]
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20978:	4b13      	ldr	r3, [pc, #76]	; (209c8 <sd_mmc_spi_select_device+0x70>)
   2097a:	2200      	movs	r2, #0
   2097c:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
   2097e:	683b      	ldr	r3, [r7, #0]
   20980:	4a12      	ldr	r2, [pc, #72]	; (209cc <sd_mmc_spi_select_device+0x74>)
   20982:	4293      	cmp	r3, r2
   20984:	d907      	bls.n	20996 <sd_mmc_spi_select_device+0x3e>
		clock = SD_MMC_SPI_MAX_CLOCK;
   20986:	4b11      	ldr	r3, [pc, #68]	; (209cc <sd_mmc_spi_select_device+0x74>)
   20988:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   2098a:	e004      	b.n	20996 <sd_mmc_spi_select_device+0x3e>
		clock -= clock / 8;
   2098c:	683b      	ldr	r3, [r7, #0]
   2098e:	08db      	lsrs	r3, r3, #3
   20990:	683a      	ldr	r2, [r7, #0]
   20992:	1ad3      	subs	r3, r2, r3
   20994:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
   20996:	683a      	ldr	r2, [r7, #0]
   20998:	4b0d      	ldr	r3, [pc, #52]	; (209d0 <sd_mmc_spi_select_device+0x78>)
   2099a:	0011      	movs	r1, r2
   2099c:	0018      	movs	r0, r3
   2099e:	4b0d      	ldr	r3, [pc, #52]	; (209d4 <sd_mmc_spi_select_device+0x7c>)
   209a0:	4798      	blx	r3
   209a2:	0003      	movs	r3, r0
   209a4:	2b17      	cmp	r3, #23
   209a6:	d0f1      	beq.n	2098c <sd_mmc_spi_select_device+0x34>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
   209a8:	1dfb      	adds	r3, r7, #7
   209aa:	781a      	ldrb	r2, [r3, #0]
   209ac:	0013      	movs	r3, r2
   209ae:	005b      	lsls	r3, r3, #1
   209b0:	189b      	adds	r3, r3, r2
   209b2:	4a09      	ldr	r2, [pc, #36]	; (209d8 <sd_mmc_spi_select_device+0x80>)
   209b4:	1899      	adds	r1, r3, r2
   209b6:	4b06      	ldr	r3, [pc, #24]	; (209d0 <sd_mmc_spi_select_device+0x78>)
   209b8:	2201      	movs	r2, #1
   209ba:	0018      	movs	r0, r3
   209bc:	4b07      	ldr	r3, [pc, #28]	; (209dc <sd_mmc_spi_select_device+0x84>)
   209be:	4798      	blx	r3
}
   209c0:	46c0      	nop			; (mov r8, r8)
   209c2:	46bd      	mov	sp, r7
   209c4:	b003      	add	sp, #12
   209c6:	bd90      	pop	{r4, r7, pc}
   209c8:	20004293 	.word	0x20004293
   209cc:	00989680 	.word	0x00989680
   209d0:	20004250 	.word	0x20004250
   209d4:	000289d1 	.word	0x000289d1
   209d8:	2000428c 	.word	0x2000428c
   209dc:	00028f6d 	.word	0x00028f6d

000209e0 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
   209e0:	b580      	push	{r7, lr}
   209e2:	b082      	sub	sp, #8
   209e4:	af00      	add	r7, sp, #0
   209e6:	0002      	movs	r2, r0
   209e8:	1dfb      	adds	r3, r7, #7
   209ea:	701a      	strb	r2, [r3, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   209ec:	4b09      	ldr	r3, [pc, #36]	; (20a14 <sd_mmc_spi_deselect_device+0x34>)
   209ee:	2200      	movs	r2, #0
   209f0:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
   209f2:	1dfb      	adds	r3, r7, #7
   209f4:	781a      	ldrb	r2, [r3, #0]
   209f6:	0013      	movs	r3, r2
   209f8:	005b      	lsls	r3, r3, #1
   209fa:	189b      	adds	r3, r3, r2
   209fc:	4a06      	ldr	r2, [pc, #24]	; (20a18 <sd_mmc_spi_deselect_device+0x38>)
   209fe:	1899      	adds	r1, r3, r2
   20a00:	4b06      	ldr	r3, [pc, #24]	; (20a1c <sd_mmc_spi_deselect_device+0x3c>)
   20a02:	2200      	movs	r2, #0
   20a04:	0018      	movs	r0, r3
   20a06:	4b06      	ldr	r3, [pc, #24]	; (20a20 <sd_mmc_spi_deselect_device+0x40>)
   20a08:	4798      	blx	r3
}
   20a0a:	46c0      	nop			; (mov r8, r8)
   20a0c:	46bd      	mov	sp, r7
   20a0e:	b002      	add	sp, #8
   20a10:	bd80      	pop	{r7, pc}
   20a12:	46c0      	nop			; (mov r8, r8)
   20a14:	20004293 	.word	0x20004293
   20a18:	2000428c 	.word	0x2000428c
   20a1c:	20004250 	.word	0x20004250
   20a20:	00028f6d 	.word	0x00028f6d

00020a24 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
   20a24:	b580      	push	{r7, lr}
   20a26:	b082      	sub	sp, #8
   20a28:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t dummy = 0xFF;
   20a2a:	1dbb      	adds	r3, r7, #6
   20a2c:	22ff      	movs	r2, #255	; 0xff
   20a2e:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20a30:	4b0c      	ldr	r3, [pc, #48]	; (20a64 <sd_mmc_spi_send_clock+0x40>)
   20a32:	2200      	movs	r2, #0
   20a34:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
   20a36:	1dfb      	adds	r3, r7, #7
   20a38:	2200      	movs	r2, #0
   20a3a:	701a      	strb	r2, [r3, #0]
   20a3c:	e00a      	b.n	20a54 <sd_mmc_spi_send_clock+0x30>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
   20a3e:	1db9      	adds	r1, r7, #6
   20a40:	4b09      	ldr	r3, [pc, #36]	; (20a68 <sd_mmc_spi_send_clock+0x44>)
   20a42:	2201      	movs	r2, #1
   20a44:	0018      	movs	r0, r3
   20a46:	4b09      	ldr	r3, [pc, #36]	; (20a6c <sd_mmc_spi_send_clock+0x48>)
   20a48:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
   20a4a:	1dfb      	adds	r3, r7, #7
   20a4c:	781a      	ldrb	r2, [r3, #0]
   20a4e:	1dfb      	adds	r3, r7, #7
   20a50:	3201      	adds	r2, #1
   20a52:	701a      	strb	r2, [r3, #0]
   20a54:	1dfb      	adds	r3, r7, #7
   20a56:	781b      	ldrb	r3, [r3, #0]
   20a58:	2b09      	cmp	r3, #9
   20a5a:	d9f0      	bls.n	20a3e <sd_mmc_spi_send_clock+0x1a>
	}
}
   20a5c:	46c0      	nop			; (mov r8, r8)
   20a5e:	46bd      	mov	sp, r7
   20a60:	b002      	add	sp, #8
   20a62:	bd80      	pop	{r7, pc}
   20a64:	20004293 	.word	0x20004293
   20a68:	20004250 	.word	0x20004250
   20a6c:	0002905d 	.word	0x0002905d

00020a70 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
   20a70:	b590      	push	{r4, r7, lr}
   20a72:	b085      	sub	sp, #20
   20a74:	af02      	add	r7, sp, #8
   20a76:	6078      	str	r0, [r7, #4]
   20a78:	6039      	str	r1, [r7, #0]
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
   20a7a:	6839      	ldr	r1, [r7, #0]
   20a7c:	6878      	ldr	r0, [r7, #4]
   20a7e:	2300      	movs	r3, #0
   20a80:	9300      	str	r3, [sp, #0]
   20a82:	2300      	movs	r3, #0
   20a84:	2200      	movs	r2, #0
   20a86:	4c03      	ldr	r4, [pc, #12]	; (20a94 <sd_mmc_spi_send_cmd+0x24>)
   20a88:	47a0      	blx	r4
   20a8a:	0003      	movs	r3, r0
}
   20a8c:	0018      	movs	r0, r3
   20a8e:	46bd      	mov	sp, r7
   20a90:	b003      	add	sp, #12
   20a92:	bd90      	pop	{r4, r7, pc}
   20a94:	00020a99 	.word	0x00020a99

00020a98 <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
   20a98:	b590      	push	{r4, r7, lr}
   20a9a:	b089      	sub	sp, #36	; 0x24
   20a9c:	af00      	add	r7, sp, #0
   20a9e:	60f8      	str	r0, [r7, #12]
   20aa0:	60b9      	str	r1, [r7, #8]
   20aa2:	0019      	movs	r1, r3
   20aa4:	1dbb      	adds	r3, r7, #6
   20aa6:	801a      	strh	r2, [r3, #0]
   20aa8:	1d3b      	adds	r3, r7, #4
   20aaa:	1c0a      	adds	r2, r1, #0
   20aac:	801a      	strh	r2, [r3, #0]
	uint8_t dummy = 0xFF;
   20aae:	231b      	movs	r3, #27
   20ab0:	18fb      	adds	r3, r7, r3
   20ab2:	22ff      	movs	r2, #255	; 0xff
   20ab4:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
   20ab6:	231c      	movs	r3, #28
   20ab8:	18fb      	adds	r3, r7, r3
   20aba:	22ff      	movs	r2, #255	; 0xff
   20abc:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20abe:	4b72      	ldr	r3, [pc, #456]	; (20c88 <sd_mmc_spi_adtc_start+0x1f0>)
   20ac0:	2200      	movs	r2, #0
   20ac2:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
   20ac4:	68fb      	ldr	r3, [r7, #12]
   20ac6:	b2db      	uxtb	r3, r3
   20ac8:	223f      	movs	r2, #63	; 0x3f
   20aca:	4013      	ands	r3, r2
   20acc:	b2db      	uxtb	r3, r3
   20ace:	2240      	movs	r2, #64	; 0x40
   20ad0:	4313      	orrs	r3, r2
   20ad2:	b2da      	uxtb	r2, r3
   20ad4:	2314      	movs	r3, #20
   20ad6:	18fb      	adds	r3, r7, r3
   20ad8:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
   20ada:	68bb      	ldr	r3, [r7, #8]
   20adc:	0e1b      	lsrs	r3, r3, #24
   20ade:	b2da      	uxtb	r2, r3
   20ae0:	2314      	movs	r3, #20
   20ae2:	18fb      	adds	r3, r7, r3
   20ae4:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
   20ae6:	68bb      	ldr	r3, [r7, #8]
   20ae8:	0c1b      	lsrs	r3, r3, #16
   20aea:	b2da      	uxtb	r2, r3
   20aec:	2314      	movs	r3, #20
   20aee:	18fb      	adds	r3, r7, r3
   20af0:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
   20af2:	68bb      	ldr	r3, [r7, #8]
   20af4:	0a1b      	lsrs	r3, r3, #8
   20af6:	b2da      	uxtb	r2, r3
   20af8:	2314      	movs	r3, #20
   20afa:	18fb      	adds	r3, r7, r3
   20afc:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
   20afe:	68bb      	ldr	r3, [r7, #8]
   20b00:	b2da      	uxtb	r2, r3
   20b02:	2314      	movs	r3, #20
   20b04:	18fb      	adds	r3, r7, r3
   20b06:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
   20b08:	2314      	movs	r3, #20
   20b0a:	18fb      	adds	r3, r7, r3
   20b0c:	2105      	movs	r1, #5
   20b0e:	0018      	movs	r0, r3
   20b10:	4b5e      	ldr	r3, [pc, #376]	; (20c8c <sd_mmc_spi_adtc_start+0x1f4>)
   20b12:	4798      	blx	r3
   20b14:	0003      	movs	r3, r0
   20b16:	001a      	movs	r2, r3
   20b18:	2314      	movs	r3, #20
   20b1a:	18fb      	adds	r3, r7, r3
   20b1c:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
   20b1e:	231b      	movs	r3, #27
   20b20:	18f9      	adds	r1, r7, r3
   20b22:	4b5b      	ldr	r3, [pc, #364]	; (20c90 <sd_mmc_spi_adtc_start+0x1f8>)
   20b24:	2201      	movs	r2, #1
   20b26:	0018      	movs	r0, r3
   20b28:	4b5a      	ldr	r3, [pc, #360]	; (20c94 <sd_mmc_spi_adtc_start+0x1fc>)
   20b2a:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
   20b2c:	2314      	movs	r3, #20
   20b2e:	18f9      	adds	r1, r7, r3
   20b30:	4b57      	ldr	r3, [pc, #348]	; (20c90 <sd_mmc_spi_adtc_start+0x1f8>)
   20b32:	2206      	movs	r2, #6
   20b34:	0018      	movs	r0, r3
   20b36:	4b57      	ldr	r3, [pc, #348]	; (20c94 <sd_mmc_spi_adtc_start+0x1fc>)
   20b38:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
   20b3a:	2313      	movs	r3, #19
   20b3c:	18fb      	adds	r3, r7, r3
   20b3e:	22ff      	movs	r2, #255	; 0xff
   20b40:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   20b42:	231c      	movs	r3, #28
   20b44:	18fb      	adds	r3, r7, r3
   20b46:	881b      	ldrh	r3, [r3, #0]
   20b48:	2213      	movs	r2, #19
   20b4a:	18b9      	adds	r1, r7, r2
   20b4c:	4850      	ldr	r0, [pc, #320]	; (20c90 <sd_mmc_spi_adtc_start+0x1f8>)
   20b4e:	2201      	movs	r2, #1
   20b50:	4c51      	ldr	r4, [pc, #324]	; (20c98 <sd_mmc_spi_adtc_start+0x200>)
   20b52:	47a0      	blx	r4
			dummy2);
	ncr_timeout = 7;
   20b54:	231f      	movs	r3, #31
   20b56:	18fb      	adds	r3, r7, r3
   20b58:	2207      	movs	r2, #7
   20b5a:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
   20b5c:	231c      	movs	r3, #28
   20b5e:	18fb      	adds	r3, r7, r3
   20b60:	881b      	ldrh	r3, [r3, #0]
   20b62:	2213      	movs	r2, #19
   20b64:	18b9      	adds	r1, r7, r2
   20b66:	484a      	ldr	r0, [pc, #296]	; (20c90 <sd_mmc_spi_adtc_start+0x1f8>)
   20b68:	2201      	movs	r2, #1
   20b6a:	4c4b      	ldr	r4, [pc, #300]	; (20c98 <sd_mmc_spi_adtc_start+0x200>)
   20b6c:	47a0      	blx	r4
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
   20b6e:	2313      	movs	r3, #19
   20b70:	18fb      	adds	r3, r7, r3
   20b72:	781b      	ldrb	r3, [r3, #0]
   20b74:	b25b      	sxtb	r3, r3
   20b76:	2b00      	cmp	r3, #0
   20b78:	da10      	bge.n	20b9c <sd_mmc_spi_adtc_start+0x104>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
   20b7a:	231f      	movs	r3, #31
   20b7c:	18fb      	adds	r3, r7, r3
   20b7e:	221f      	movs	r2, #31
   20b80:	18ba      	adds	r2, r7, r2
   20b82:	7812      	ldrb	r2, [r2, #0]
   20b84:	3a01      	subs	r2, #1
   20b86:	701a      	strb	r2, [r3, #0]
   20b88:	231f      	movs	r3, #31
   20b8a:	18fb      	adds	r3, r7, r3
   20b8c:	781b      	ldrb	r3, [r3, #0]
   20b8e:	2b00      	cmp	r3, #0
   20b90:	d1e4      	bne.n	20b5c <sd_mmc_spi_adtc_start+0xc4>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
   20b92:	4b3d      	ldr	r3, [pc, #244]	; (20c88 <sd_mmc_spi_adtc_start+0x1f0>)
   20b94:	2202      	movs	r2, #2
   20b96:	701a      	strb	r2, [r3, #0]
			return false;
   20b98:	2300      	movs	r3, #0
   20b9a:	e070      	b.n	20c7e <sd_mmc_spi_adtc_start+0x1e6>
			break;
   20b9c:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
   20b9e:	2313      	movs	r3, #19
   20ba0:	18fb      	adds	r3, r7, r3
   20ba2:	781b      	ldrb	r3, [r3, #0]
   20ba4:	001a      	movs	r2, r3
   20ba6:	4b3d      	ldr	r3, [pc, #244]	; (20c9c <sd_mmc_spi_adtc_start+0x204>)
   20ba8:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
   20baa:	2313      	movs	r3, #19
   20bac:	18fb      	adds	r3, r7, r3
   20bae:	781b      	ldrb	r3, [r3, #0]
   20bb0:	001a      	movs	r2, r3
   20bb2:	2308      	movs	r3, #8
   20bb4:	4013      	ands	r3, r2
   20bb6:	d004      	beq.n	20bc2 <sd_mmc_spi_adtc_start+0x12a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
   20bb8:	4b33      	ldr	r3, [pc, #204]	; (20c88 <sd_mmc_spi_adtc_start+0x1f0>)
   20bba:	2206      	movs	r2, #6
   20bbc:	701a      	strb	r2, [r3, #0]
		return false;
   20bbe:	2300      	movs	r3, #0
   20bc0:	e05d      	b.n	20c7e <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
   20bc2:	2313      	movs	r3, #19
   20bc4:	18fb      	adds	r3, r7, r3
   20bc6:	781b      	ldrb	r3, [r3, #0]
   20bc8:	001a      	movs	r2, r3
   20bca:	2304      	movs	r3, #4
   20bcc:	4013      	ands	r3, r2
   20bce:	d004      	beq.n	20bda <sd_mmc_spi_adtc_start+0x142>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
   20bd0:	4b2d      	ldr	r3, [pc, #180]	; (20c88 <sd_mmc_spi_adtc_start+0x1f0>)
   20bd2:	2209      	movs	r2, #9
   20bd4:	701a      	strb	r2, [r3, #0]
		return false;
   20bd6:	2300      	movs	r3, #0
   20bd8:	e051      	b.n	20c7e <sd_mmc_spi_adtc_start+0x1e6>
	}
	if (r1 & ~R1_SPI_IDLE) {
   20bda:	2313      	movs	r3, #19
   20bdc:	18fb      	adds	r3, r7, r3
   20bde:	781b      	ldrb	r3, [r3, #0]
   20be0:	001a      	movs	r2, r3
   20be2:	2301      	movs	r3, #1
   20be4:	439a      	bics	r2, r3
   20be6:	1e13      	subs	r3, r2, #0
   20be8:	d004      	beq.n	20bf4 <sd_mmc_spi_adtc_start+0x15c>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
   20bea:	4b27      	ldr	r3, [pc, #156]	; (20c88 <sd_mmc_spi_adtc_start+0x1f0>)
   20bec:	2201      	movs	r2, #1
   20bee:	701a      	strb	r2, [r3, #0]
		return false;
   20bf0:	2300      	movs	r3, #0
   20bf2:	e044      	b.n	20c7e <sd_mmc_spi_adtc_start+0x1e6>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
   20bf4:	68fa      	ldr	r2, [r7, #12]
   20bf6:	2380      	movs	r3, #128	; 0x80
   20bf8:	019b      	lsls	r3, r3, #6
   20bfa:	4013      	ands	r3, r2
   20bfc:	d00d      	beq.n	20c1a <sd_mmc_spi_adtc_start+0x182>
		if (!sd_mmc_spi_wait_busy()) {
   20bfe:	4b28      	ldr	r3, [pc, #160]	; (20ca0 <sd_mmc_spi_adtc_start+0x208>)
   20c00:	4798      	blx	r3
   20c02:	0003      	movs	r3, r0
   20c04:	001a      	movs	r2, r3
   20c06:	2301      	movs	r3, #1
   20c08:	4053      	eors	r3, r2
   20c0a:	b2db      	uxtb	r3, r3
   20c0c:	2b00      	cmp	r3, #0
   20c0e:	d004      	beq.n	20c1a <sd_mmc_spi_adtc_start+0x182>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
   20c10:	4b1d      	ldr	r3, [pc, #116]	; (20c88 <sd_mmc_spi_adtc_start+0x1f0>)
   20c12:	2203      	movs	r2, #3
   20c14:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
   20c16:	2300      	movs	r3, #0
   20c18:	e031      	b.n	20c7e <sd_mmc_spi_adtc_start+0x1e6>
		}
	}
	if (cmd & SDMMC_RESP_8) {
   20c1a:	68fa      	ldr	r2, [r7, #12]
   20c1c:	2380      	movs	r3, #128	; 0x80
   20c1e:	009b      	lsls	r3, r3, #2
   20c20:	4013      	ands	r3, r2
   20c22:	d00e      	beq.n	20c42 <sd_mmc_spi_adtc_start+0x1aa>
		sd_mmc_spi_response_32 = 0;
   20c24:	4b1d      	ldr	r3, [pc, #116]	; (20c9c <sd_mmc_spi_adtc_start+0x204>)
   20c26:	2200      	movs	r2, #0
   20c28:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
   20c2a:	231c      	movs	r3, #28
   20c2c:	18fb      	adds	r3, r7, r3
   20c2e:	881b      	ldrh	r3, [r3, #0]
   20c30:	491a      	ldr	r1, [pc, #104]	; (20c9c <sd_mmc_spi_adtc_start+0x204>)
   20c32:	4817      	ldr	r0, [pc, #92]	; (20c90 <sd_mmc_spi_adtc_start+0x1f8>)
   20c34:	2201      	movs	r2, #1
   20c36:	4c18      	ldr	r4, [pc, #96]	; (20c98 <sd_mmc_spi_adtc_start+0x200>)
   20c38:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
   20c3a:	4b18      	ldr	r3, [pc, #96]	; (20c9c <sd_mmc_spi_adtc_start+0x204>)
   20c3c:	681a      	ldr	r2, [r3, #0]
   20c3e:	4b17      	ldr	r3, [pc, #92]	; (20c9c <sd_mmc_spi_adtc_start+0x204>)
   20c40:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
   20c42:	68fa      	ldr	r2, [r7, #12]
   20c44:	2380      	movs	r3, #128	; 0x80
   20c46:	00db      	lsls	r3, r3, #3
   20c48:	4013      	ands	r3, r2
   20c4a:	d00c      	beq.n	20c66 <sd_mmc_spi_adtc_start+0x1ce>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
   20c4c:	231c      	movs	r3, #28
   20c4e:	18fb      	adds	r3, r7, r3
   20c50:	881b      	ldrh	r3, [r3, #0]
   20c52:	4912      	ldr	r1, [pc, #72]	; (20c9c <sd_mmc_spi_adtc_start+0x204>)
   20c54:	480e      	ldr	r0, [pc, #56]	; (20c90 <sd_mmc_spi_adtc_start+0x1f8>)
   20c56:	2204      	movs	r2, #4
   20c58:	4c0f      	ldr	r4, [pc, #60]	; (20c98 <sd_mmc_spi_adtc_start+0x200>)
   20c5a:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
   20c5c:	4b0f      	ldr	r3, [pc, #60]	; (20c9c <sd_mmc_spi_adtc_start+0x204>)
   20c5e:	681b      	ldr	r3, [r3, #0]
   20c60:	ba1a      	rev	r2, r3
   20c62:	4b0e      	ldr	r3, [pc, #56]	; (20c9c <sd_mmc_spi_adtc_start+0x204>)
   20c64:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
   20c66:	4b0f      	ldr	r3, [pc, #60]	; (20ca4 <sd_mmc_spi_adtc_start+0x20c>)
   20c68:	1dba      	adds	r2, r7, #6
   20c6a:	8812      	ldrh	r2, [r2, #0]
   20c6c:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
   20c6e:	4b0e      	ldr	r3, [pc, #56]	; (20ca8 <sd_mmc_spi_adtc_start+0x210>)
   20c70:	1d3a      	adds	r2, r7, #4
   20c72:	8812      	ldrh	r2, [r2, #0]
   20c74:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
   20c76:	4b0d      	ldr	r3, [pc, #52]	; (20cac <sd_mmc_spi_adtc_start+0x214>)
   20c78:	2200      	movs	r2, #0
   20c7a:	601a      	str	r2, [r3, #0]
	return true; // Command complete
   20c7c:	2301      	movs	r3, #1
}
   20c7e:	0018      	movs	r0, r3
   20c80:	46bd      	mov	sp, r7
   20c82:	b009      	add	sp, #36	; 0x24
   20c84:	bd90      	pop	{r4, r7, pc}
   20c86:	46c0      	nop			; (mov r8, r8)
   20c88:	20004293 	.word	0x20004293
   20c8c:	00020539 	.word	0x00020539
   20c90:	20004250 	.word	0x20004250
   20c94:	0002905d 	.word	0x0002905d
   20c98:	00028e39 	.word	0x00028e39
   20c9c:	20004294 	.word	0x20004294
   20ca0:	000205f5 	.word	0x000205f5
   20ca4:	2000429c 	.word	0x2000429c
   20ca8:	2000429e 	.word	0x2000429e
   20cac:	20004298 	.word	0x20004298

00020cb0 <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
   20cb0:	b580      	push	{r7, lr}
   20cb2:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
   20cb4:	4b02      	ldr	r3, [pc, #8]	; (20cc0 <sd_mmc_spi_get_response+0x10>)
   20cb6:	681b      	ldr	r3, [r3, #0]
}
   20cb8:	0018      	movs	r0, r3
   20cba:	46bd      	mov	sp, r7
   20cbc:	bd80      	pop	{r7, pc}
   20cbe:	46c0      	nop			; (mov r8, r8)
   20cc0:	20004294 	.word	0x20004294

00020cc4 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
   20cc4:	b590      	push	{r4, r7, lr}
   20cc6:	b085      	sub	sp, #20
   20cc8:	af00      	add	r7, sp, #0
   20cca:	6078      	str	r0, [r7, #4]
	uint16_t dummy = 0xFF;
   20ccc:	230e      	movs	r3, #14
   20cce:	18fb      	adds	r3, r7, r3
   20cd0:	22ff      	movs	r2, #255	; 0xff
   20cd2:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20cd4:	4b1c      	ldr	r3, [pc, #112]	; (20d48 <sd_mmc_spi_read_word+0x84>)
   20cd6:	2200      	movs	r2, #0
   20cd8:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   20cda:	4b1c      	ldr	r3, [pc, #112]	; (20d4c <sd_mmc_spi_read_word+0x88>)
   20cdc:	681a      	ldr	r2, [r3, #0]
   20cde:	4b1c      	ldr	r3, [pc, #112]	; (20d50 <sd_mmc_spi_read_word+0x8c>)
   20ce0:	881b      	ldrh	r3, [r3, #0]
   20ce2:	0019      	movs	r1, r3
   20ce4:	4b1b      	ldr	r3, [pc, #108]	; (20d54 <sd_mmc_spi_read_word+0x90>)
   20ce6:	0010      	movs	r0, r2
   20ce8:	4798      	blx	r3
   20cea:	1e0b      	subs	r3, r1, #0
   20cec:	d10a      	bne.n	20d04 <sd_mmc_spi_read_word+0x40>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
   20cee:	4b1a      	ldr	r3, [pc, #104]	; (20d58 <sd_mmc_spi_read_word+0x94>)
   20cf0:	4798      	blx	r3
   20cf2:	0003      	movs	r3, r0
   20cf4:	001a      	movs	r2, r3
   20cf6:	2301      	movs	r3, #1
   20cf8:	4053      	eors	r3, r2
   20cfa:	b2db      	uxtb	r3, r3
   20cfc:	2b00      	cmp	r3, #0
   20cfe:	d001      	beq.n	20d04 <sd_mmc_spi_read_word+0x40>
			return false;
   20d00:	2300      	movs	r3, #0
   20d02:	e01d      	b.n	20d40 <sd_mmc_spi_read_word+0x7c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
   20d04:	230e      	movs	r3, #14
   20d06:	18fb      	adds	r3, r7, r3
   20d08:	881b      	ldrh	r3, [r3, #0]
   20d0a:	1d39      	adds	r1, r7, #4
   20d0c:	4813      	ldr	r0, [pc, #76]	; (20d5c <sd_mmc_spi_read_word+0x98>)
   20d0e:	2204      	movs	r2, #4
   20d10:	4c13      	ldr	r4, [pc, #76]	; (20d60 <sd_mmc_spi_read_word+0x9c>)
   20d12:	47a0      	blx	r4
			dummy);
	*value = le32_to_cpu(*value);
   20d14:	687b      	ldr	r3, [r7, #4]
   20d16:	687a      	ldr	r2, [r7, #4]
   20d18:	6812      	ldr	r2, [r2, #0]
   20d1a:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
   20d1c:	4b0b      	ldr	r3, [pc, #44]	; (20d4c <sd_mmc_spi_read_word+0x88>)
   20d1e:	681b      	ldr	r3, [r3, #0]
   20d20:	1d1a      	adds	r2, r3, #4
   20d22:	4b0a      	ldr	r3, [pc, #40]	; (20d4c <sd_mmc_spi_read_word+0x88>)
   20d24:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
   20d26:	4b09      	ldr	r3, [pc, #36]	; (20d4c <sd_mmc_spi_read_word+0x88>)
   20d28:	681a      	ldr	r2, [r3, #0]
   20d2a:	4b09      	ldr	r3, [pc, #36]	; (20d50 <sd_mmc_spi_read_word+0x8c>)
   20d2c:	881b      	ldrh	r3, [r3, #0]
   20d2e:	0019      	movs	r1, r3
   20d30:	4b08      	ldr	r3, [pc, #32]	; (20d54 <sd_mmc_spi_read_word+0x90>)
   20d32:	0010      	movs	r0, r2
   20d34:	4798      	blx	r3
   20d36:	1e0b      	subs	r3, r1, #0
   20d38:	d101      	bne.n	20d3e <sd_mmc_spi_read_word+0x7a>
		// End of block
		sd_mmc_spi_stop_read_block();
   20d3a:	4b0a      	ldr	r3, [pc, #40]	; (20d64 <sd_mmc_spi_read_word+0xa0>)
   20d3c:	4798      	blx	r3
	}
	return true;
   20d3e:	2301      	movs	r3, #1
}
   20d40:	0018      	movs	r0, r3
   20d42:	46bd      	mov	sp, r7
   20d44:	b005      	add	sp, #20
   20d46:	bd90      	pop	{r4, r7, pc}
   20d48:	20004293 	.word	0x20004293
   20d4c:	20004298 	.word	0x20004298
   20d50:	2000429c 	.word	0x2000429c
   20d54:	00033961 	.word	0x00033961
   20d58:	00020661 	.word	0x00020661
   20d5c:	20004250 	.word	0x20004250
   20d60:	00028e39 	.word	0x00028e39
   20d64:	000206e5 	.word	0x000206e5

00020d68 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
   20d68:	b590      	push	{r4, r7, lr}
   20d6a:	b085      	sub	sp, #20
   20d6c:	af00      	add	r7, sp, #0
   20d6e:	6078      	str	r0, [r7, #4]
   20d70:	000a      	movs	r2, r1
   20d72:	1cbb      	adds	r3, r7, #2
   20d74:	801a      	strh	r2, [r3, #0]
	uint32_t pos;
	uint16_t dummy = 0xFF;
   20d76:	230a      	movs	r3, #10
   20d78:	18fb      	adds	r3, r7, r3
   20d7a:	22ff      	movs	r2, #255	; 0xff
   20d7c:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20d7e:	4b1c      	ldr	r3, [pc, #112]	; (20df0 <sd_mmc_spi_start_read_blocks+0x88>)
   20d80:	2200      	movs	r2, #0
   20d82:	701a      	strb	r2, [r3, #0]
	pos = 0;
   20d84:	2300      	movs	r3, #0
   20d86:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   20d88:	e025      	b.n	20dd6 <sd_mmc_spi_start_read_blocks+0x6e>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
   20d8a:	4b1a      	ldr	r3, [pc, #104]	; (20df4 <sd_mmc_spi_start_read_blocks+0x8c>)
   20d8c:	4798      	blx	r3
   20d8e:	0003      	movs	r3, r0
   20d90:	001a      	movs	r2, r3
   20d92:	2301      	movs	r3, #1
   20d94:	4053      	eors	r3, r2
   20d96:	b2db      	uxtb	r3, r3
   20d98:	2b00      	cmp	r3, #0
   20d9a:	d001      	beq.n	20da0 <sd_mmc_spi_start_read_blocks+0x38>
			return false;
   20d9c:	2300      	movs	r3, #0
   20d9e:	e022      	b.n	20de6 <sd_mmc_spi_start_read_blocks+0x7e>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
   20da0:	687a      	ldr	r2, [r7, #4]
   20da2:	68fb      	ldr	r3, [r7, #12]
   20da4:	18d1      	adds	r1, r2, r3
   20da6:	4b14      	ldr	r3, [pc, #80]	; (20df8 <sd_mmc_spi_start_read_blocks+0x90>)
   20da8:	881a      	ldrh	r2, [r3, #0]
   20daa:	230a      	movs	r3, #10
   20dac:	18fb      	adds	r3, r7, r3
   20dae:	881b      	ldrh	r3, [r3, #0]
   20db0:	4812      	ldr	r0, [pc, #72]	; (20dfc <sd_mmc_spi_start_read_blocks+0x94>)
   20db2:	4c13      	ldr	r4, [pc, #76]	; (20e00 <sd_mmc_spi_start_read_blocks+0x98>)
   20db4:	47a0      	blx	r4
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
   20db6:	4b10      	ldr	r3, [pc, #64]	; (20df8 <sd_mmc_spi_start_read_blocks+0x90>)
   20db8:	881b      	ldrh	r3, [r3, #0]
   20dba:	001a      	movs	r2, r3
   20dbc:	68fb      	ldr	r3, [r7, #12]
   20dbe:	189b      	adds	r3, r3, r2
   20dc0:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   20dc2:	4b0d      	ldr	r3, [pc, #52]	; (20df8 <sd_mmc_spi_start_read_blocks+0x90>)
   20dc4:	881b      	ldrh	r3, [r3, #0]
   20dc6:	001a      	movs	r2, r3
   20dc8:	4b0e      	ldr	r3, [pc, #56]	; (20e04 <sd_mmc_spi_start_read_blocks+0x9c>)
   20dca:	681b      	ldr	r3, [r3, #0]
   20dcc:	18d2      	adds	r2, r2, r3
   20dce:	4b0d      	ldr	r3, [pc, #52]	; (20e04 <sd_mmc_spi_start_read_blocks+0x9c>)
   20dd0:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
   20dd2:	4b0d      	ldr	r3, [pc, #52]	; (20e08 <sd_mmc_spi_start_read_blocks+0xa0>)
   20dd4:	4798      	blx	r3
	while (nb_block--) {
   20dd6:	1cbb      	adds	r3, r7, #2
   20dd8:	881b      	ldrh	r3, [r3, #0]
   20dda:	1cba      	adds	r2, r7, #2
   20ddc:	1e59      	subs	r1, r3, #1
   20dde:	8011      	strh	r1, [r2, #0]
   20de0:	2b00      	cmp	r3, #0
   20de2:	d1d2      	bne.n	20d8a <sd_mmc_spi_start_read_blocks+0x22>
	}
	return true;
   20de4:	2301      	movs	r3, #1
}
   20de6:	0018      	movs	r0, r3
   20de8:	46bd      	mov	sp, r7
   20dea:	b005      	add	sp, #20
   20dec:	bd90      	pop	{r4, r7, pc}
   20dee:	46c0      	nop			; (mov r8, r8)
   20df0:	20004293 	.word	0x20004293
   20df4:	00020661 	.word	0x00020661
   20df8:	2000429c 	.word	0x2000429c
   20dfc:	20004250 	.word	0x20004250
   20e00:	00028e39 	.word	0x00028e39
   20e04:	20004298 	.word	0x20004298
   20e08:	000206e5 	.word	0x000206e5

00020e0c <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
   20e0c:	b580      	push	{r7, lr}
   20e0e:	af00      	add	r7, sp, #0
	return true;
   20e10:	2301      	movs	r3, #1
}
   20e12:	0018      	movs	r0, r3
   20e14:	46bd      	mov	sp, r7
   20e16:	bd80      	pop	{r7, pc}

00020e18 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
   20e18:	b580      	push	{r7, lr}
   20e1a:	b084      	sub	sp, #16
   20e1c:	af00      	add	r7, sp, #0
   20e1e:	6078      	str	r0, [r7, #4]
   20e20:	000a      	movs	r2, r1
   20e22:	1cbb      	adds	r3, r7, #2
   20e24:	801a      	strh	r2, [r3, #0]
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
   20e26:	4b24      	ldr	r3, [pc, #144]	; (20eb8 <sd_mmc_spi_start_write_blocks+0xa0>)
   20e28:	2200      	movs	r2, #0
   20e2a:	701a      	strb	r2, [r3, #0]
	pos = 0;
   20e2c:	2300      	movs	r3, #0
   20e2e:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
   20e30:	e035      	b.n	20e9e <sd_mmc_spi_start_write_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
   20e32:	4b22      	ldr	r3, [pc, #136]	; (20ebc <sd_mmc_spi_start_write_blocks+0xa4>)
   20e34:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
   20e36:	687a      	ldr	r2, [r7, #4]
   20e38:	68fb      	ldr	r3, [r7, #12]
   20e3a:	18d1      	adds	r1, r2, r3
   20e3c:	4b20      	ldr	r3, [pc, #128]	; (20ec0 <sd_mmc_spi_start_write_blocks+0xa8>)
   20e3e:	881a      	ldrh	r2, [r3, #0]
   20e40:	4b20      	ldr	r3, [pc, #128]	; (20ec4 <sd_mmc_spi_start_write_blocks+0xac>)
   20e42:	0018      	movs	r0, r3
   20e44:	4b20      	ldr	r3, [pc, #128]	; (20ec8 <sd_mmc_spi_start_write_blocks+0xb0>)
   20e46:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
   20e48:	4b1d      	ldr	r3, [pc, #116]	; (20ec0 <sd_mmc_spi_start_write_blocks+0xa8>)
   20e4a:	881b      	ldrh	r3, [r3, #0]
   20e4c:	001a      	movs	r2, r3
   20e4e:	68fb      	ldr	r3, [r7, #12]
   20e50:	189b      	adds	r3, r3, r2
   20e52:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
   20e54:	4b1a      	ldr	r3, [pc, #104]	; (20ec0 <sd_mmc_spi_start_write_blocks+0xa8>)
   20e56:	881b      	ldrh	r3, [r3, #0]
   20e58:	001a      	movs	r2, r3
   20e5a:	4b1c      	ldr	r3, [pc, #112]	; (20ecc <sd_mmc_spi_start_write_blocks+0xb4>)
   20e5c:	681b      	ldr	r3, [r3, #0]
   20e5e:	18d2      	adds	r2, r2, r3
   20e60:	4b1a      	ldr	r3, [pc, #104]	; (20ecc <sd_mmc_spi_start_write_blocks+0xb4>)
   20e62:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
   20e64:	4b1a      	ldr	r3, [pc, #104]	; (20ed0 <sd_mmc_spi_start_write_blocks+0xb8>)
   20e66:	4798      	blx	r3
   20e68:	0003      	movs	r3, r0
   20e6a:	001a      	movs	r2, r3
   20e6c:	2301      	movs	r3, #1
   20e6e:	4053      	eors	r3, r2
   20e70:	b2db      	uxtb	r3, r3
   20e72:	2b00      	cmp	r3, #0
   20e74:	d001      	beq.n	20e7a <sd_mmc_spi_start_write_blocks+0x62>
			return false;
   20e76:	2300      	movs	r3, #0
   20e78:	e019      	b.n	20eae <sd_mmc_spi_start_write_blocks+0x96>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
   20e7a:	1cbb      	adds	r3, r7, #2
   20e7c:	881b      	ldrh	r3, [r3, #0]
   20e7e:	2b00      	cmp	r3, #0
   20e80:	d00d      	beq.n	20e9e <sd_mmc_spi_start_write_blocks+0x86>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
   20e82:	4b14      	ldr	r3, [pc, #80]	; (20ed4 <sd_mmc_spi_start_write_blocks+0xbc>)
   20e84:	4798      	blx	r3
   20e86:	0003      	movs	r3, r0
   20e88:	001a      	movs	r2, r3
   20e8a:	2301      	movs	r3, #1
   20e8c:	4053      	eors	r3, r2
   20e8e:	b2db      	uxtb	r3, r3
   20e90:	2b00      	cmp	r3, #0
   20e92:	d004      	beq.n	20e9e <sd_mmc_spi_start_write_blocks+0x86>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   20e94:	4b08      	ldr	r3, [pc, #32]	; (20eb8 <sd_mmc_spi_start_write_blocks+0xa0>)
   20e96:	2205      	movs	r2, #5
   20e98:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
   20e9a:	2300      	movs	r3, #0
   20e9c:	e007      	b.n	20eae <sd_mmc_spi_start_write_blocks+0x96>
	while (nb_block--) {
   20e9e:	1cbb      	adds	r3, r7, #2
   20ea0:	881b      	ldrh	r3, [r3, #0]
   20ea2:	1cba      	adds	r2, r7, #2
   20ea4:	1e59      	subs	r1, r3, #1
   20ea6:	8011      	strh	r1, [r2, #0]
   20ea8:	2b00      	cmp	r3, #0
   20eaa:	d1c2      	bne.n	20e32 <sd_mmc_spi_start_write_blocks+0x1a>
			}
		}
	}
	return true;
   20eac:	2301      	movs	r3, #1
}
   20eae:	0018      	movs	r0, r3
   20eb0:	46bd      	mov	sp, r7
   20eb2:	b004      	add	sp, #16
   20eb4:	bd80      	pop	{r7, pc}
   20eb6:	46c0      	nop			; (mov r8, r8)
   20eb8:	20004293 	.word	0x20004293
   20ebc:	00020711 	.word	0x00020711
   20ec0:	2000429c 	.word	0x2000429c
   20ec4:	20004250 	.word	0x20004250
   20ec8:	0002905d 	.word	0x0002905d
   20ecc:	20004298 	.word	0x20004298
   20ed0:	00020761 	.word	0x00020761
   20ed4:	000205f5 	.word	0x000205f5

00020ed8 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
   20ed8:	b580      	push	{r7, lr}
   20eda:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
   20edc:	4b09      	ldr	r3, [pc, #36]	; (20f04 <sd_mmc_spi_wait_end_of_write_blocks+0x2c>)
   20ede:	4798      	blx	r3
   20ee0:	0003      	movs	r3, r0
   20ee2:	001a      	movs	r2, r3
   20ee4:	2301      	movs	r3, #1
   20ee6:	4053      	eors	r3, r2
   20ee8:	b2db      	uxtb	r3, r3
   20eea:	2b00      	cmp	r3, #0
   20eec:	d004      	beq.n	20ef8 <sd_mmc_spi_wait_end_of_write_blocks+0x20>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
   20eee:	4b06      	ldr	r3, [pc, #24]	; (20f08 <sd_mmc_spi_wait_end_of_write_blocks+0x30>)
   20ef0:	2205      	movs	r2, #5
   20ef2:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
   20ef4:	2300      	movs	r3, #0
   20ef6:	e002      	b.n	20efe <sd_mmc_spi_wait_end_of_write_blocks+0x26>
	}
	return sd_mmc_spi_stop_multiwrite_block();
   20ef8:	4b04      	ldr	r3, [pc, #16]	; (20f0c <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
   20efa:	4798      	blx	r3
   20efc:	0003      	movs	r3, r0
}
   20efe:	0018      	movs	r0, r3
   20f00:	46bd      	mov	sp, r7
   20f02:	bd80      	pop	{r7, pc}
   20f04:	000205f5 	.word	0x000205f5
   20f08:	20004293 	.word	0x20004293
   20f0c:	000207f5 	.word	0x000207f5

00020f10 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
   20f10:	b580      	push	{r7, lr}
   20f12:	af00      	add	r7, sp, #0
	cycles_per_ms = system_gclk_gen_get_hz(0);
   20f14:	2000      	movs	r0, #0
   20f16:	4b0f      	ldr	r3, [pc, #60]	; (20f54 <delay_init+0x44>)
   20f18:	4798      	blx	r3
   20f1a:	0002      	movs	r2, r0
   20f1c:	4b0e      	ldr	r3, [pc, #56]	; (20f58 <delay_init+0x48>)
   20f1e:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
   20f20:	4b0d      	ldr	r3, [pc, #52]	; (20f58 <delay_init+0x48>)
   20f22:	6818      	ldr	r0, [r3, #0]
   20f24:	4b0d      	ldr	r3, [pc, #52]	; (20f5c <delay_init+0x4c>)
   20f26:	22fa      	movs	r2, #250	; 0xfa
   20f28:	0091      	lsls	r1, r2, #2
   20f2a:	4798      	blx	r3
   20f2c:	0003      	movs	r3, r0
   20f2e:	001a      	movs	r2, r3
   20f30:	4b09      	ldr	r3, [pc, #36]	; (20f58 <delay_init+0x48>)
   20f32:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
   20f34:	4b08      	ldr	r3, [pc, #32]	; (20f58 <delay_init+0x48>)
   20f36:	6818      	ldr	r0, [r3, #0]
   20f38:	4b08      	ldr	r3, [pc, #32]	; (20f5c <delay_init+0x4c>)
   20f3a:	22fa      	movs	r2, #250	; 0xfa
   20f3c:	0091      	lsls	r1, r2, #2
   20f3e:	4798      	blx	r3
   20f40:	0003      	movs	r3, r0
   20f42:	001a      	movs	r2, r3
   20f44:	4b06      	ldr	r3, [pc, #24]	; (20f60 <delay_init+0x50>)
   20f46:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
   20f48:	4b06      	ldr	r3, [pc, #24]	; (20f64 <delay_init+0x54>)
   20f4a:	2205      	movs	r2, #5
   20f4c:	601a      	str	r2, [r3, #0]
}
   20f4e:	46c0      	nop			; (mov r8, r8)
   20f50:	46bd      	mov	sp, r7
   20f52:	bd80      	pop	{r7, pc}
   20f54:	0002abe1 	.word	0x0002abe1
   20f58:	2000011c 	.word	0x2000011c
   20f5c:	00033855 	.word	0x00033855
   20f60:	20000120 	.word	0x20000120
   20f64:	e000e010 	.word	0xe000e010

00020f68 <system_pinmux_get_group_from_gpio_pin>:
{
   20f68:	b580      	push	{r7, lr}
   20f6a:	b084      	sub	sp, #16
   20f6c:	af00      	add	r7, sp, #0
   20f6e:	0002      	movs	r2, r0
   20f70:	1dfb      	adds	r3, r7, #7
   20f72:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   20f74:	230f      	movs	r3, #15
   20f76:	18fb      	adds	r3, r7, r3
   20f78:	1dfa      	adds	r2, r7, #7
   20f7a:	7812      	ldrb	r2, [r2, #0]
   20f7c:	09d2      	lsrs	r2, r2, #7
   20f7e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   20f80:	230e      	movs	r3, #14
   20f82:	18fb      	adds	r3, r7, r3
   20f84:	1dfa      	adds	r2, r7, #7
   20f86:	7812      	ldrb	r2, [r2, #0]
   20f88:	0952      	lsrs	r2, r2, #5
   20f8a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   20f8c:	4b0d      	ldr	r3, [pc, #52]	; (20fc4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   20f8e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   20f90:	230f      	movs	r3, #15
   20f92:	18fb      	adds	r3, r7, r3
   20f94:	781b      	ldrb	r3, [r3, #0]
   20f96:	2b00      	cmp	r3, #0
   20f98:	d10f      	bne.n	20fba <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   20f9a:	230f      	movs	r3, #15
   20f9c:	18fb      	adds	r3, r7, r3
   20f9e:	781b      	ldrb	r3, [r3, #0]
   20fa0:	009b      	lsls	r3, r3, #2
   20fa2:	2210      	movs	r2, #16
   20fa4:	4694      	mov	ip, r2
   20fa6:	44bc      	add	ip, r7
   20fa8:	4463      	add	r3, ip
   20faa:	3b08      	subs	r3, #8
   20fac:	681a      	ldr	r2, [r3, #0]
   20fae:	230e      	movs	r3, #14
   20fb0:	18fb      	adds	r3, r7, r3
   20fb2:	781b      	ldrb	r3, [r3, #0]
   20fb4:	01db      	lsls	r3, r3, #7
   20fb6:	18d3      	adds	r3, r2, r3
   20fb8:	e000      	b.n	20fbc <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   20fba:	2300      	movs	r3, #0
}
   20fbc:	0018      	movs	r0, r3
   20fbe:	46bd      	mov	sp, r7
   20fc0:	b004      	add	sp, #16
   20fc2:	bd80      	pop	{r7, pc}
   20fc4:	41004400 	.word	0x41004400

00020fc8 <system_interrupt_enable_global>:
{
   20fc8:	b580      	push	{r7, lr}
   20fca:	af00      	add	r7, sp, #0
	cpu_irq_enable();
   20fcc:	4b04      	ldr	r3, [pc, #16]	; (20fe0 <system_interrupt_enable_global+0x18>)
   20fce:	2201      	movs	r2, #1
   20fd0:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   20fd2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   20fd6:	b662      	cpsie	i
}
   20fd8:	46c0      	nop			; (mov r8, r8)
   20fda:	46bd      	mov	sp, r7
   20fdc:	bd80      	pop	{r7, pc}
   20fde:	46c0      	nop			; (mov r8, r8)
   20fe0:	20000126 	.word	0x20000126

00020fe4 <port_get_group_from_gpio_pin>:
{
   20fe4:	b580      	push	{r7, lr}
   20fe6:	b082      	sub	sp, #8
   20fe8:	af00      	add	r7, sp, #0
   20fea:	0002      	movs	r2, r0
   20fec:	1dfb      	adds	r3, r7, #7
   20fee:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   20ff0:	1dfb      	adds	r3, r7, #7
   20ff2:	781b      	ldrb	r3, [r3, #0]
   20ff4:	0018      	movs	r0, r3
   20ff6:	4b03      	ldr	r3, [pc, #12]	; (21004 <port_get_group_from_gpio_pin+0x20>)
   20ff8:	4798      	blx	r3
   20ffa:	0003      	movs	r3, r0
}
   20ffc:	0018      	movs	r0, r3
   20ffe:	46bd      	mov	sp, r7
   21000:	b002      	add	sp, #8
   21002:	bd80      	pop	{r7, pc}
   21004:	00020f69 	.word	0x00020f69

00021008 <port_get_config_defaults>:
{
   21008:	b580      	push	{r7, lr}
   2100a:	b082      	sub	sp, #8
   2100c:	af00      	add	r7, sp, #0
   2100e:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   21010:	687b      	ldr	r3, [r7, #4]
   21012:	2200      	movs	r2, #0
   21014:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   21016:	687b      	ldr	r3, [r7, #4]
   21018:	2201      	movs	r2, #1
   2101a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   2101c:	687b      	ldr	r3, [r7, #4]
   2101e:	2200      	movs	r2, #0
   21020:	709a      	strb	r2, [r3, #2]
}
   21022:	46c0      	nop			; (mov r8, r8)
   21024:	46bd      	mov	sp, r7
   21026:	b002      	add	sp, #8
   21028:	bd80      	pop	{r7, pc}
	...

0002102c <port_pin_set_output_level>:
{
   2102c:	b580      	push	{r7, lr}
   2102e:	b084      	sub	sp, #16
   21030:	af00      	add	r7, sp, #0
   21032:	0002      	movs	r2, r0
   21034:	1dfb      	adds	r3, r7, #7
   21036:	701a      	strb	r2, [r3, #0]
   21038:	1dbb      	adds	r3, r7, #6
   2103a:	1c0a      	adds	r2, r1, #0
   2103c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2103e:	1dfb      	adds	r3, r7, #7
   21040:	781b      	ldrb	r3, [r3, #0]
   21042:	0018      	movs	r0, r3
   21044:	4b0d      	ldr	r3, [pc, #52]	; (2107c <port_pin_set_output_level+0x50>)
   21046:	4798      	blx	r3
   21048:	0003      	movs	r3, r0
   2104a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   2104c:	1dfb      	adds	r3, r7, #7
   2104e:	781b      	ldrb	r3, [r3, #0]
   21050:	221f      	movs	r2, #31
   21052:	4013      	ands	r3, r2
   21054:	2201      	movs	r2, #1
   21056:	409a      	lsls	r2, r3
   21058:	0013      	movs	r3, r2
   2105a:	60bb      	str	r3, [r7, #8]
	if (level) {
   2105c:	1dbb      	adds	r3, r7, #6
   2105e:	781b      	ldrb	r3, [r3, #0]
   21060:	2b00      	cmp	r3, #0
   21062:	d003      	beq.n	2106c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   21064:	68fb      	ldr	r3, [r7, #12]
   21066:	68ba      	ldr	r2, [r7, #8]
   21068:	619a      	str	r2, [r3, #24]
}
   2106a:	e002      	b.n	21072 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   2106c:	68fb      	ldr	r3, [r7, #12]
   2106e:	68ba      	ldr	r2, [r7, #8]
   21070:	615a      	str	r2, [r3, #20]
}
   21072:	46c0      	nop			; (mov r8, r8)
   21074:	46bd      	mov	sp, r7
   21076:	b004      	add	sp, #16
   21078:	bd80      	pop	{r7, pc}
   2107a:	46c0      	nop			; (mov r8, r8)
   2107c:	00020fe5 	.word	0x00020fe5

00021080 <chip_isr>:
#include "conf_winc.h"

static tpfNmBspIsr gpfIsr;

static void chip_isr(void)
{
   21080:	b580      	push	{r7, lr}
   21082:	af00      	add	r7, sp, #0
	if (gpfIsr) {
   21084:	4b04      	ldr	r3, [pc, #16]	; (21098 <chip_isr+0x18>)
   21086:	681b      	ldr	r3, [r3, #0]
   21088:	2b00      	cmp	r3, #0
   2108a:	d002      	beq.n	21092 <chip_isr+0x12>
		gpfIsr();
   2108c:	4b02      	ldr	r3, [pc, #8]	; (21098 <chip_isr+0x18>)
   2108e:	681b      	ldr	r3, [r3, #0]
   21090:	4798      	blx	r3
	}
}
   21092:	46c0      	nop			; (mov r8, r8)
   21094:	46bd      	mov	sp, r7
   21096:	bd80      	pop	{r7, pc}
   21098:	200042a0 	.word	0x200042a0

0002109c <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
   2109c:	b580      	push	{r7, lr}
   2109e:	b082      	sub	sp, #8
   210a0:	af00      	add	r7, sp, #0
	struct port_config pin_conf;

	port_get_config_defaults(&pin_conf);
   210a2:	1d3b      	adds	r3, r7, #4
   210a4:	0018      	movs	r0, r3
   210a6:	4b10      	ldr	r3, [pc, #64]	; (210e8 <init_chip_pins+0x4c>)
   210a8:	4798      	blx	r3

	/* Configure control pins as output. */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   210aa:	1d3b      	adds	r3, r7, #4
   210ac:	2201      	movs	r2, #1
   210ae:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(CONF_WINC_PIN_RESET, &pin_conf);
   210b0:	1d3b      	adds	r3, r7, #4
   210b2:	0019      	movs	r1, r3
   210b4:	201b      	movs	r0, #27
   210b6:	4b0d      	ldr	r3, [pc, #52]	; (210ec <init_chip_pins+0x50>)
   210b8:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_CHIP_ENABLE, &pin_conf);
   210ba:	1d3b      	adds	r3, r7, #4
   210bc:	0019      	movs	r1, r3
   210be:	201c      	movs	r0, #28
   210c0:	4b0a      	ldr	r3, [pc, #40]	; (210ec <init_chip_pins+0x50>)
   210c2:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_PIN_WAKE, &pin_conf);
   210c4:	1d3b      	adds	r3, r7, #4
   210c6:	0019      	movs	r1, r3
   210c8:	2028      	movs	r0, #40	; 0x28
   210ca:	4b08      	ldr	r3, [pc, #32]	; (210ec <init_chip_pins+0x50>)
   210cc:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   210ce:	2100      	movs	r1, #0
   210d0:	201c      	movs	r0, #28
   210d2:	4b07      	ldr	r3, [pc, #28]	; (210f0 <init_chip_pins+0x54>)
   210d4:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   210d6:	2100      	movs	r1, #0
   210d8:	201b      	movs	r0, #27
   210da:	4b05      	ldr	r3, [pc, #20]	; (210f0 <init_chip_pins+0x54>)
   210dc:	4798      	blx	r3
}
   210de:	46c0      	nop			; (mov r8, r8)
   210e0:	46bd      	mov	sp, r7
   210e2:	b002      	add	sp, #8
   210e4:	bd80      	pop	{r7, pc}
   210e6:	46c0      	nop			; (mov r8, r8)
   210e8:	00021009 	.word	0x00021009
   210ec:	00027829 	.word	0x00027829
   210f0:	0002102d 	.word	0x0002102d

000210f4 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
   210f4:	b580      	push	{r7, lr}
   210f6:	af00      	add	r7, sp, #0
	gpfIsr = NULL;
   210f8:	4b0b      	ldr	r3, [pc, #44]	; (21128 <nm_bsp_init+0x34>)
   210fa:	2200      	movs	r2, #0
   210fc:	601a      	str	r2, [r3, #0]

	/* Initialize chip IOs. */
	init_chip_pins();
   210fe:	4b0b      	ldr	r3, [pc, #44]	; (2112c <nm_bsp_init+0x38>)
   21100:	4798      	blx	r3

    /* Make sure a 1ms Systick is configured. */
    if (!(SysTick->CTRL & SysTick_CTRL_ENABLE_Msk && SysTick->CTRL & SysTick_CTRL_TICKINT_Msk)) {
   21102:	4b0b      	ldr	r3, [pc, #44]	; (21130 <nm_bsp_init+0x3c>)
   21104:	681b      	ldr	r3, [r3, #0]
   21106:	2201      	movs	r2, #1
   21108:	4013      	ands	r3, r2
   2110a:	d004      	beq.n	21116 <nm_bsp_init+0x22>
   2110c:	4b08      	ldr	r3, [pc, #32]	; (21130 <nm_bsp_init+0x3c>)
   2110e:	681b      	ldr	r3, [r3, #0]
   21110:	2202      	movs	r2, #2
   21112:	4013      	ands	r3, r2
   21114:	d101      	bne.n	2111a <nm_bsp_init+0x26>
	    delay_init();
   21116:	4b07      	ldr	r3, [pc, #28]	; (21134 <nm_bsp_init+0x40>)
   21118:	4798      	blx	r3
    }

	system_interrupt_enable_global();
   2111a:	4b07      	ldr	r3, [pc, #28]	; (21138 <nm_bsp_init+0x44>)
   2111c:	4798      	blx	r3

	return M2M_SUCCESS;
   2111e:	2300      	movs	r3, #0
}
   21120:	0018      	movs	r0, r3
   21122:	46bd      	mov	sp, r7
   21124:	bd80      	pop	{r7, pc}
   21126:	46c0      	nop			; (mov r8, r8)
   21128:	200042a0 	.word	0x200042a0
   2112c:	0002109d 	.word	0x0002109d
   21130:	e000e010 	.word	0xe000e010
   21134:	00020f11 	.word	0x00020f11
   21138:	00020fc9 	.word	0x00020fc9

0002113c <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
   2113c:	b580      	push	{r7, lr}
   2113e:	af00      	add	r7, sp, #0
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, false);
   21140:	2100      	movs	r1, #0
   21142:	201c      	movs	r0, #28
   21144:	4b0b      	ldr	r3, [pc, #44]	; (21174 <nm_bsp_reset+0x38>)
   21146:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, false);
   21148:	2100      	movs	r1, #0
   2114a:	201b      	movs	r0, #27
   2114c:	4b09      	ldr	r3, [pc, #36]	; (21174 <nm_bsp_reset+0x38>)
   2114e:	4798      	blx	r3
	nm_bsp_sleep(1);
   21150:	2001      	movs	r0, #1
   21152:	4b09      	ldr	r3, [pc, #36]	; (21178 <nm_bsp_reset+0x3c>)
   21154:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_CHIP_ENABLE, true);
   21156:	2101      	movs	r1, #1
   21158:	201c      	movs	r0, #28
   2115a:	4b06      	ldr	r3, [pc, #24]	; (21174 <nm_bsp_reset+0x38>)
   2115c:	4798      	blx	r3
	nm_bsp_sleep(10);
   2115e:	200a      	movs	r0, #10
   21160:	4b05      	ldr	r3, [pc, #20]	; (21178 <nm_bsp_reset+0x3c>)
   21162:	4798      	blx	r3
	port_pin_set_output_level(CONF_WINC_PIN_RESET, true);
   21164:	2101      	movs	r1, #1
   21166:	201b      	movs	r0, #27
   21168:	4b02      	ldr	r3, [pc, #8]	; (21174 <nm_bsp_reset+0x38>)
   2116a:	4798      	blx	r3
}
   2116c:	46c0      	nop			; (mov r8, r8)
   2116e:	46bd      	mov	sp, r7
   21170:	bd80      	pop	{r7, pc}
   21172:	46c0      	nop			; (mov r8, r8)
   21174:	0002102d 	.word	0x0002102d
   21178:	0002117d 	.word	0x0002117d

0002117c <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
   2117c:	b580      	push	{r7, lr}
   2117e:	b082      	sub	sp, #8
   21180:	af00      	add	r7, sp, #0
   21182:	6078      	str	r0, [r7, #4]
#ifdef __FREERTOS__
	vTaskDelay(u32TimeMsec);
   21184:	687b      	ldr	r3, [r7, #4]
   21186:	0018      	movs	r0, r3
   21188:	4b02      	ldr	r3, [pc, #8]	; (21194 <nm_bsp_sleep+0x18>)
   2118a:	4798      	blx	r3
	while (u32TimeMsec--) {
		delay_ms(1);
	}
	
#endif
}
   2118c:	46c0      	nop			; (mov r8, r8)
   2118e:	46bd      	mov	sp, r7
   21190:	b002      	add	sp, #8
   21192:	bd80      	pop	{r7, pc}
   21194:	0001cf91 	.word	0x0001cf91

00021198 <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
   21198:	b580      	push	{r7, lr}
   2119a:	b086      	sub	sp, #24
   2119c:	af00      	add	r7, sp, #0
   2119e:	6078      	str	r0, [r7, #4]
	struct extint_chan_conf config_extint_chan;

	gpfIsr = pfIsr;
   211a0:	4b15      	ldr	r3, [pc, #84]	; (211f8 <nm_bsp_register_isr+0x60>)
   211a2:	687a      	ldr	r2, [r7, #4]
   211a4:	601a      	str	r2, [r3, #0]

	extint_chan_get_config_defaults(&config_extint_chan);
   211a6:	230c      	movs	r3, #12
   211a8:	18fb      	adds	r3, r7, r3
   211aa:	0018      	movs	r0, r3
   211ac:	4b13      	ldr	r3, [pc, #76]	; (211fc <nm_bsp_register_isr+0x64>)
   211ae:	4798      	blx	r3
	config_extint_chan.gpio_pin = CONF_WINC_SPI_INT_PIN;
   211b0:	230c      	movs	r3, #12
   211b2:	18fb      	adds	r3, r7, r3
   211b4:	2229      	movs	r2, #41	; 0x29
   211b6:	601a      	str	r2, [r3, #0]
	config_extint_chan.gpio_pin_mux = CONF_WINC_SPI_INT_MUX;
   211b8:	230c      	movs	r3, #12
   211ba:	18fb      	adds	r3, r7, r3
   211bc:	2200      	movs	r2, #0
   211be:	605a      	str	r2, [r3, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
   211c0:	230c      	movs	r3, #12
   211c2:	18fb      	adds	r3, r7, r3
   211c4:	2201      	movs	r2, #1
   211c6:	721a      	strb	r2, [r3, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_FALLING;
   211c8:	230c      	movs	r3, #12
   211ca:	18fb      	adds	r3, r7, r3
   211cc:	2202      	movs	r2, #2
   211ce:	72da      	strb	r2, [r3, #11]

	extint_chan_set_config(CONF_WINC_SPI_INT_EIC, &config_extint_chan);
   211d0:	230c      	movs	r3, #12
   211d2:	18fb      	adds	r3, r7, r3
   211d4:	0019      	movs	r1, r3
   211d6:	2009      	movs	r0, #9
   211d8:	4b09      	ldr	r3, [pc, #36]	; (21200 <nm_bsp_register_isr+0x68>)
   211da:	4798      	blx	r3
	extint_register_callback(chip_isr, CONF_WINC_SPI_INT_EIC,
   211dc:	4b09      	ldr	r3, [pc, #36]	; (21204 <nm_bsp_register_isr+0x6c>)
   211de:	2200      	movs	r2, #0
   211e0:	2109      	movs	r1, #9
   211e2:	0018      	movs	r0, r3
   211e4:	4b08      	ldr	r3, [pc, #32]	; (21208 <nm_bsp_register_isr+0x70>)
   211e6:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   211e8:	2100      	movs	r1, #0
   211ea:	2009      	movs	r0, #9
   211ec:	4b07      	ldr	r3, [pc, #28]	; (2120c <nm_bsp_register_isr+0x74>)
   211ee:	4798      	blx	r3
			EXTINT_CALLBACK_TYPE_DETECT);
}
   211f0:	46c0      	nop			; (mov r8, r8)
   211f2:	46bd      	mov	sp, r7
   211f4:	b006      	add	sp, #24
   211f6:	bd80      	pop	{r7, pc}
   211f8:	200042a0 	.word	0x200042a0
   211fc:	000276d1 	.word	0x000276d1
   21200:	00027705 	.word	0x00027705
   21204:	00021081 	.word	0x00021081
   21208:	000272d1 	.word	0x000272d1
   2120c:	00027335 	.word	0x00027335

00021210 <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
   21210:	b580      	push	{r7, lr}
   21212:	b082      	sub	sp, #8
   21214:	af00      	add	r7, sp, #0
   21216:	0002      	movs	r2, r0
   21218:	1dfb      	adds	r3, r7, #7
   2121a:	701a      	strb	r2, [r3, #0]
	if (u8Enable) {
   2121c:	1dfb      	adds	r3, r7, #7
   2121e:	781b      	ldrb	r3, [r3, #0]
   21220:	2b00      	cmp	r3, #0
   21222:	d004      	beq.n	2122e <nm_bsp_interrupt_ctrl+0x1e>
		extint_chan_enable_callback(CONF_WINC_SPI_INT_EIC,
   21224:	2100      	movs	r1, #0
   21226:	2009      	movs	r0, #9
   21228:	4b05      	ldr	r3, [pc, #20]	; (21240 <nm_bsp_interrupt_ctrl+0x30>)
   2122a:	4798      	blx	r3
				EXTINT_CALLBACK_TYPE_DETECT);
	} else {
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
				EXTINT_CALLBACK_TYPE_DETECT);
	}
}
   2122c:	e003      	b.n	21236 <nm_bsp_interrupt_ctrl+0x26>
		extint_chan_disable_callback(CONF_WINC_SPI_INT_EIC,
   2122e:	2100      	movs	r1, #0
   21230:	2009      	movs	r0, #9
   21232:	4b04      	ldr	r3, [pc, #16]	; (21244 <nm_bsp_interrupt_ctrl+0x34>)
   21234:	4798      	blx	r3
}
   21236:	46c0      	nop			; (mov r8, r8)
   21238:	46bd      	mov	sp, r7
   2123a:	b002      	add	sp, #8
   2123c:	bd80      	pop	{r7, pc}
   2123e:	46c0      	nop			; (mov r8, r8)
   21240:	00027335 	.word	0x00027335
   21244:	0002737d 	.word	0x0002737d

00021248 <system_pinmux_get_group_from_gpio_pin>:
{
   21248:	b580      	push	{r7, lr}
   2124a:	b084      	sub	sp, #16
   2124c:	af00      	add	r7, sp, #0
   2124e:	0002      	movs	r2, r0
   21250:	1dfb      	adds	r3, r7, #7
   21252:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   21254:	230f      	movs	r3, #15
   21256:	18fb      	adds	r3, r7, r3
   21258:	1dfa      	adds	r2, r7, #7
   2125a:	7812      	ldrb	r2, [r2, #0]
   2125c:	09d2      	lsrs	r2, r2, #7
   2125e:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   21260:	230e      	movs	r3, #14
   21262:	18fb      	adds	r3, r7, r3
   21264:	1dfa      	adds	r2, r7, #7
   21266:	7812      	ldrb	r2, [r2, #0]
   21268:	0952      	lsrs	r2, r2, #5
   2126a:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   2126c:	4b0d      	ldr	r3, [pc, #52]	; (212a4 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2126e:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   21270:	230f      	movs	r3, #15
   21272:	18fb      	adds	r3, r7, r3
   21274:	781b      	ldrb	r3, [r3, #0]
   21276:	2b00      	cmp	r3, #0
   21278:	d10f      	bne.n	2129a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2127a:	230f      	movs	r3, #15
   2127c:	18fb      	adds	r3, r7, r3
   2127e:	781b      	ldrb	r3, [r3, #0]
   21280:	009b      	lsls	r3, r3, #2
   21282:	2210      	movs	r2, #16
   21284:	4694      	mov	ip, r2
   21286:	44bc      	add	ip, r7
   21288:	4463      	add	r3, ip
   2128a:	3b08      	subs	r3, #8
   2128c:	681a      	ldr	r2, [r3, #0]
   2128e:	230e      	movs	r3, #14
   21290:	18fb      	adds	r3, r7, r3
   21292:	781b      	ldrb	r3, [r3, #0]
   21294:	01db      	lsls	r3, r3, #7
   21296:	18d3      	adds	r3, r2, r3
   21298:	e000      	b.n	2129c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2129a:	2300      	movs	r3, #0
}
   2129c:	0018      	movs	r0, r3
   2129e:	46bd      	mov	sp, r7
   212a0:	b004      	add	sp, #16
   212a2:	bd80      	pop	{r7, pc}
   212a4:	41004400 	.word	0x41004400

000212a8 <system_interrupt_enable>:
{
   212a8:	b580      	push	{r7, lr}
   212aa:	b082      	sub	sp, #8
   212ac:	af00      	add	r7, sp, #0
   212ae:	0002      	movs	r2, r0
   212b0:	1dfb      	adds	r3, r7, #7
   212b2:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   212b4:	4b06      	ldr	r3, [pc, #24]	; (212d0 <system_interrupt_enable+0x28>)
   212b6:	1dfa      	adds	r2, r7, #7
   212b8:	7812      	ldrb	r2, [r2, #0]
   212ba:	0011      	movs	r1, r2
   212bc:	221f      	movs	r2, #31
   212be:	400a      	ands	r2, r1
   212c0:	2101      	movs	r1, #1
   212c2:	4091      	lsls	r1, r2
   212c4:	000a      	movs	r2, r1
   212c6:	601a      	str	r2, [r3, #0]
}
   212c8:	46c0      	nop			; (mov r8, r8)
   212ca:	46bd      	mov	sp, r7
   212cc:	b002      	add	sp, #8
   212ce:	bd80      	pop	{r7, pc}
   212d0:	e000e100 	.word	0xe000e100

000212d4 <system_interrupt_disable>:
{
   212d4:	b580      	push	{r7, lr}
   212d6:	b082      	sub	sp, #8
   212d8:	af00      	add	r7, sp, #0
   212da:	0002      	movs	r2, r0
   212dc:	1dfb      	adds	r3, r7, #7
   212de:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   212e0:	4a07      	ldr	r2, [pc, #28]	; (21300 <system_interrupt_disable+0x2c>)
   212e2:	1dfb      	adds	r3, r7, #7
   212e4:	781b      	ldrb	r3, [r3, #0]
   212e6:	0019      	movs	r1, r3
   212e8:	231f      	movs	r3, #31
   212ea:	400b      	ands	r3, r1
   212ec:	2101      	movs	r1, #1
   212ee:	4099      	lsls	r1, r3
   212f0:	000b      	movs	r3, r1
   212f2:	0019      	movs	r1, r3
   212f4:	2380      	movs	r3, #128	; 0x80
   212f6:	50d1      	str	r1, [r2, r3]
}
   212f8:	46c0      	nop			; (mov r8, r8)
   212fa:	46bd      	mov	sp, r7
   212fc:	b002      	add	sp, #8
   212fe:	bd80      	pop	{r7, pc}
   21300:	e000e100 	.word	0xe000e100

00021304 <port_get_group_from_gpio_pin>:
{
   21304:	b580      	push	{r7, lr}
   21306:	b082      	sub	sp, #8
   21308:	af00      	add	r7, sp, #0
   2130a:	0002      	movs	r2, r0
   2130c:	1dfb      	adds	r3, r7, #7
   2130e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   21310:	1dfb      	adds	r3, r7, #7
   21312:	781b      	ldrb	r3, [r3, #0]
   21314:	0018      	movs	r0, r3
   21316:	4b03      	ldr	r3, [pc, #12]	; (21324 <port_get_group_from_gpio_pin+0x20>)
   21318:	4798      	blx	r3
   2131a:	0003      	movs	r3, r0
}
   2131c:	0018      	movs	r0, r3
   2131e:	46bd      	mov	sp, r7
   21320:	b002      	add	sp, #8
   21322:	bd80      	pop	{r7, pc}
   21324:	00021249 	.word	0x00021249

00021328 <port_get_config_defaults>:
{
   21328:	b580      	push	{r7, lr}
   2132a:	b082      	sub	sp, #8
   2132c:	af00      	add	r7, sp, #0
   2132e:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   21330:	687b      	ldr	r3, [r7, #4]
   21332:	2200      	movs	r2, #0
   21334:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   21336:	687b      	ldr	r3, [r7, #4]
   21338:	2201      	movs	r2, #1
   2133a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   2133c:	687b      	ldr	r3, [r7, #4]
   2133e:	2200      	movs	r2, #0
   21340:	709a      	strb	r2, [r3, #2]
}
   21342:	46c0      	nop			; (mov r8, r8)
   21344:	46bd      	mov	sp, r7
   21346:	b002      	add	sp, #8
   21348:	bd80      	pop	{r7, pc}
	...

0002134c <port_pin_set_output_level>:
{
   2134c:	b580      	push	{r7, lr}
   2134e:	b084      	sub	sp, #16
   21350:	af00      	add	r7, sp, #0
   21352:	0002      	movs	r2, r0
   21354:	1dfb      	adds	r3, r7, #7
   21356:	701a      	strb	r2, [r3, #0]
   21358:	1dbb      	adds	r3, r7, #6
   2135a:	1c0a      	adds	r2, r1, #0
   2135c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2135e:	1dfb      	adds	r3, r7, #7
   21360:	781b      	ldrb	r3, [r3, #0]
   21362:	0018      	movs	r0, r3
   21364:	4b0d      	ldr	r3, [pc, #52]	; (2139c <port_pin_set_output_level+0x50>)
   21366:	4798      	blx	r3
   21368:	0003      	movs	r3, r0
   2136a:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   2136c:	1dfb      	adds	r3, r7, #7
   2136e:	781b      	ldrb	r3, [r3, #0]
   21370:	221f      	movs	r2, #31
   21372:	4013      	ands	r3, r2
   21374:	2201      	movs	r2, #1
   21376:	409a      	lsls	r2, r3
   21378:	0013      	movs	r3, r2
   2137a:	60bb      	str	r3, [r7, #8]
	if (level) {
   2137c:	1dbb      	adds	r3, r7, #6
   2137e:	781b      	ldrb	r3, [r3, #0]
   21380:	2b00      	cmp	r3, #0
   21382:	d003      	beq.n	2138c <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   21384:	68fb      	ldr	r3, [r7, #12]
   21386:	68ba      	ldr	r2, [r7, #8]
   21388:	619a      	str	r2, [r3, #24]
}
   2138a:	e002      	b.n	21392 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   2138c:	68fb      	ldr	r3, [r7, #12]
   2138e:	68ba      	ldr	r2, [r7, #8]
   21390:	615a      	str	r2, [r3, #20]
}
   21392:	46c0      	nop			; (mov r8, r8)
   21394:	46bd      	mov	sp, r7
   21396:	b004      	add	sp, #16
   21398:	bd80      	pop	{r7, pc}
   2139a:	46c0      	nop			; (mov r8, r8)
   2139c:	00021305 	.word	0x00021305

000213a0 <spi_is_syncing>:
{
   213a0:	b580      	push	{r7, lr}
   213a2:	b084      	sub	sp, #16
   213a4:	af00      	add	r7, sp, #0
   213a6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   213a8:	687b      	ldr	r3, [r7, #4]
   213aa:	681b      	ldr	r3, [r3, #0]
   213ac:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   213ae:	68fb      	ldr	r3, [r7, #12]
   213b0:	69db      	ldr	r3, [r3, #28]
   213b2:	1e5a      	subs	r2, r3, #1
   213b4:	4193      	sbcs	r3, r2
   213b6:	b2db      	uxtb	r3, r3
}
   213b8:	0018      	movs	r0, r3
   213ba:	46bd      	mov	sp, r7
   213bc:	b004      	add	sp, #16
   213be:	bd80      	pop	{r7, pc}

000213c0 <spi_get_config_defaults>:
{
   213c0:	b580      	push	{r7, lr}
   213c2:	b082      	sub	sp, #8
   213c4:	af00      	add	r7, sp, #0
   213c6:	6078      	str	r0, [r7, #4]
	config->mode             = SPI_MODE_MASTER;
   213c8:	687b      	ldr	r3, [r7, #4]
   213ca:	2201      	movs	r2, #1
   213cc:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
   213ce:	687b      	ldr	r3, [r7, #4]
   213d0:	2200      	movs	r2, #0
   213d2:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
   213d4:	687b      	ldr	r3, [r7, #4]
   213d6:	2200      	movs	r2, #0
   213d8:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
   213da:	687b      	ldr	r3, [r7, #4]
   213dc:	22c0      	movs	r2, #192	; 0xc0
   213de:	0392      	lsls	r2, r2, #14
   213e0:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
   213e2:	687b      	ldr	r3, [r7, #4]
   213e4:	2200      	movs	r2, #0
   213e6:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
   213e8:	687b      	ldr	r3, [r7, #4]
   213ea:	2200      	movs	r2, #0
   213ec:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
   213ee:	687b      	ldr	r3, [r7, #4]
   213f0:	2201      	movs	r2, #1
   213f2:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
   213f4:	687b      	ldr	r3, [r7, #4]
   213f6:	2201      	movs	r2, #1
   213f8:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
   213fa:	687b      	ldr	r3, [r7, #4]
   213fc:	2200      	movs	r2, #0
   213fe:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
   21400:	687b      	ldr	r3, [r7, #4]
   21402:	2224      	movs	r2, #36	; 0x24
   21404:	2100      	movs	r1, #0
   21406:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
   21408:	687b      	ldr	r3, [r7, #4]
   2140a:	3318      	adds	r3, #24
   2140c:	220c      	movs	r2, #12
   2140e:	2100      	movs	r1, #0
   21410:	0018      	movs	r0, r3
   21412:	4b0a      	ldr	r3, [pc, #40]	; (2143c <spi_get_config_defaults+0x7c>)
   21414:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
   21416:	687b      	ldr	r3, [r7, #4]
   21418:	4a09      	ldr	r2, [pc, #36]	; (21440 <spi_get_config_defaults+0x80>)
   2141a:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
   2141c:	687b      	ldr	r3, [r7, #4]
   2141e:	2200      	movs	r2, #0
   21420:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
   21422:	687b      	ldr	r3, [r7, #4]
   21424:	2200      	movs	r2, #0
   21426:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
   21428:	687b      	ldr	r3, [r7, #4]
   2142a:	2200      	movs	r2, #0
   2142c:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
   2142e:	687b      	ldr	r3, [r7, #4]
   21430:	2200      	movs	r2, #0
   21432:	635a      	str	r2, [r3, #52]	; 0x34
};
   21434:	46c0      	nop			; (mov r8, r8)
   21436:	46bd      	mov	sp, r7
   21438:	b002      	add	sp, #8
   2143a:	bd80      	pop	{r7, pc}
   2143c:	0003582f 	.word	0x0003582f
   21440:	000186a0 	.word	0x000186a0

00021444 <spi_slave_inst_get_config_defaults>:
{
   21444:	b580      	push	{r7, lr}
   21446:	b082      	sub	sp, #8
   21448:	af00      	add	r7, sp, #0
   2144a:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
   2144c:	687b      	ldr	r3, [r7, #4]
   2144e:	220a      	movs	r2, #10
   21450:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
   21452:	687b      	ldr	r3, [r7, #4]
   21454:	2200      	movs	r2, #0
   21456:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
   21458:	687b      	ldr	r3, [r7, #4]
   2145a:	2200      	movs	r2, #0
   2145c:	709a      	strb	r2, [r3, #2]
}
   2145e:	46c0      	nop			; (mov r8, r8)
   21460:	46bd      	mov	sp, r7
   21462:	b002      	add	sp, #8
   21464:	bd80      	pop	{r7, pc}
	...

00021468 <spi_attach_slave>:
{
   21468:	b580      	push	{r7, lr}
   2146a:	b084      	sub	sp, #16
   2146c:	af00      	add	r7, sp, #0
   2146e:	6078      	str	r0, [r7, #4]
   21470:	6039      	str	r1, [r7, #0]
	slave->ss_pin          = config->ss_pin;
   21472:	683b      	ldr	r3, [r7, #0]
   21474:	781a      	ldrb	r2, [r3, #0]
   21476:	687b      	ldr	r3, [r7, #4]
   21478:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
   2147a:	683b      	ldr	r3, [r7, #0]
   2147c:	785a      	ldrb	r2, [r3, #1]
   2147e:	687b      	ldr	r3, [r7, #4]
   21480:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
   21482:	683b      	ldr	r3, [r7, #0]
   21484:	789a      	ldrb	r2, [r3, #2]
   21486:	687b      	ldr	r3, [r7, #4]
   21488:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
   2148a:	230c      	movs	r3, #12
   2148c:	18fb      	adds	r3, r7, r3
   2148e:	0018      	movs	r0, r3
   21490:	4b0b      	ldr	r3, [pc, #44]	; (214c0 <spi_attach_slave+0x58>)
   21492:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
   21494:	230c      	movs	r3, #12
   21496:	18fb      	adds	r3, r7, r3
   21498:	2201      	movs	r2, #1
   2149a:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
   2149c:	687b      	ldr	r3, [r7, #4]
   2149e:	781b      	ldrb	r3, [r3, #0]
   214a0:	220c      	movs	r2, #12
   214a2:	18ba      	adds	r2, r7, r2
   214a4:	0011      	movs	r1, r2
   214a6:	0018      	movs	r0, r3
   214a8:	4b06      	ldr	r3, [pc, #24]	; (214c4 <spi_attach_slave+0x5c>)
   214aa:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
   214ac:	687b      	ldr	r3, [r7, #4]
   214ae:	781b      	ldrb	r3, [r3, #0]
   214b0:	2101      	movs	r1, #1
   214b2:	0018      	movs	r0, r3
   214b4:	4b04      	ldr	r3, [pc, #16]	; (214c8 <spi_attach_slave+0x60>)
   214b6:	4798      	blx	r3
}
   214b8:	46c0      	nop			; (mov r8, r8)
   214ba:	46bd      	mov	sp, r7
   214bc:	b004      	add	sp, #16
   214be:	bd80      	pop	{r7, pc}
   214c0:	00021329 	.word	0x00021329
   214c4:	00027829 	.word	0x00027829
   214c8:	0002134d 	.word	0x0002134d

000214cc <spi_enable>:
{
   214cc:	b580      	push	{r7, lr}
   214ce:	b084      	sub	sp, #16
   214d0:	af00      	add	r7, sp, #0
   214d2:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   214d4:	687b      	ldr	r3, [r7, #4]
   214d6:	681b      	ldr	r3, [r3, #0]
   214d8:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   214da:	687b      	ldr	r3, [r7, #4]
   214dc:	681b      	ldr	r3, [r3, #0]
   214de:	0018      	movs	r0, r3
   214e0:	4b0b      	ldr	r3, [pc, #44]	; (21510 <spi_enable+0x44>)
   214e2:	4798      	blx	r3
   214e4:	0003      	movs	r3, r0
   214e6:	0018      	movs	r0, r3
   214e8:	4b0a      	ldr	r3, [pc, #40]	; (21514 <spi_enable+0x48>)
   214ea:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   214ec:	46c0      	nop			; (mov r8, r8)
   214ee:	687b      	ldr	r3, [r7, #4]
   214f0:	0018      	movs	r0, r3
   214f2:	4b09      	ldr	r3, [pc, #36]	; (21518 <spi_enable+0x4c>)
   214f4:	4798      	blx	r3
   214f6:	1e03      	subs	r3, r0, #0
   214f8:	d1f9      	bne.n	214ee <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   214fa:	68fb      	ldr	r3, [r7, #12]
   214fc:	681b      	ldr	r3, [r3, #0]
   214fe:	2202      	movs	r2, #2
   21500:	431a      	orrs	r2, r3
   21502:	68fb      	ldr	r3, [r7, #12]
   21504:	601a      	str	r2, [r3, #0]
}
   21506:	46c0      	nop			; (mov r8, r8)
   21508:	46bd      	mov	sp, r7
   2150a:	b004      	add	sp, #16
   2150c:	bd80      	pop	{r7, pc}
   2150e:	46c0      	nop			; (mov r8, r8)
   21510:	000284f9 	.word	0x000284f9
   21514:	000212a9 	.word	0x000212a9
   21518:	000213a1 	.word	0x000213a1

0002151c <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
   2151c:	b580      	push	{r7, lr}
   2151e:	b084      	sub	sp, #16
   21520:	af00      	add	r7, sp, #0
   21522:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   21524:	687b      	ldr	r3, [r7, #4]
   21526:	681b      	ldr	r3, [r3, #0]
   21528:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   2152a:	687b      	ldr	r3, [r7, #4]
   2152c:	681b      	ldr	r3, [r3, #0]
   2152e:	0018      	movs	r0, r3
   21530:	4b0e      	ldr	r3, [pc, #56]	; (2156c <spi_disable+0x50>)
   21532:	4798      	blx	r3
   21534:	0003      	movs	r3, r0
   21536:	0018      	movs	r0, r3
   21538:	4b0d      	ldr	r3, [pc, #52]	; (21570 <spi_disable+0x54>)
   2153a:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
   2153c:	46c0      	nop			; (mov r8, r8)
   2153e:	687b      	ldr	r3, [r7, #4]
   21540:	0018      	movs	r0, r3
   21542:	4b0c      	ldr	r3, [pc, #48]	; (21574 <spi_disable+0x58>)
   21544:	4798      	blx	r3
   21546:	1e03      	subs	r3, r0, #0
   21548:	d1f9      	bne.n	2153e <spi_disable+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   2154a:	68fb      	ldr	r3, [r7, #12]
   2154c:	228f      	movs	r2, #143	; 0x8f
   2154e:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   21550:	68fb      	ldr	r3, [r7, #12]
   21552:	228f      	movs	r2, #143	; 0x8f
   21554:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   21556:	68fb      	ldr	r3, [r7, #12]
   21558:	681b      	ldr	r3, [r3, #0]
   2155a:	2202      	movs	r2, #2
   2155c:	4393      	bics	r3, r2
   2155e:	001a      	movs	r2, r3
   21560:	68fb      	ldr	r3, [r7, #12]
   21562:	601a      	str	r2, [r3, #0]
}
   21564:	46c0      	nop			; (mov r8, r8)
   21566:	46bd      	mov	sp, r7
   21568:	b004      	add	sp, #16
   2156a:	bd80      	pop	{r7, pc}
   2156c:	000284f9 	.word	0x000284f9
   21570:	000212d5 	.word	0x000212d5
   21574:	000213a1 	.word	0x000213a1

00021578 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
   21578:	b580      	push	{r7, lr}
   2157a:	b084      	sub	sp, #16
   2157c:	af00      	add	r7, sp, #0
   2157e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   21580:	687b      	ldr	r3, [r7, #4]
   21582:	681b      	ldr	r3, [r3, #0]
   21584:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   21586:	68fb      	ldr	r3, [r7, #12]
   21588:	7e1b      	ldrb	r3, [r3, #24]
   2158a:	b2db      	uxtb	r3, r3
   2158c:	001a      	movs	r2, r3
   2158e:	2302      	movs	r3, #2
   21590:	4013      	ands	r3, r2
   21592:	1e5a      	subs	r2, r3, #1
   21594:	4193      	sbcs	r3, r2
   21596:	b2db      	uxtb	r3, r3
}
   21598:	0018      	movs	r0, r3
   2159a:	46bd      	mov	sp, r7
   2159c:	b004      	add	sp, #16
   2159e:	bd80      	pop	{r7, pc}

000215a0 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
   215a0:	b580      	push	{r7, lr}
   215a2:	b084      	sub	sp, #16
   215a4:	af00      	add	r7, sp, #0
   215a6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   215a8:	687b      	ldr	r3, [r7, #4]
   215aa:	681b      	ldr	r3, [r3, #0]
   215ac:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   215ae:	68fb      	ldr	r3, [r7, #12]
   215b0:	7e1b      	ldrb	r3, [r3, #24]
   215b2:	b2db      	uxtb	r3, r3
   215b4:	001a      	movs	r2, r3
   215b6:	2301      	movs	r3, #1
   215b8:	4013      	ands	r3, r2
   215ba:	1e5a      	subs	r2, r3, #1
   215bc:	4193      	sbcs	r3, r2
   215be:	b2db      	uxtb	r3, r3
}
   215c0:	0018      	movs	r0, r3
   215c2:	46bd      	mov	sp, r7
   215c4:	b004      	add	sp, #16
   215c6:	bd80      	pop	{r7, pc}

000215c8 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
   215c8:	b580      	push	{r7, lr}
   215ca:	b084      	sub	sp, #16
   215cc:	af00      	add	r7, sp, #0
   215ce:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   215d0:	687b      	ldr	r3, [r7, #4]
   215d2:	681b      	ldr	r3, [r3, #0]
   215d4:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   215d6:	68fb      	ldr	r3, [r7, #12]
   215d8:	7e1b      	ldrb	r3, [r3, #24]
   215da:	b2db      	uxtb	r3, r3
   215dc:	001a      	movs	r2, r3
   215de:	2304      	movs	r3, #4
   215e0:	4013      	ands	r3, r2
   215e2:	1e5a      	subs	r2, r3, #1
   215e4:	4193      	sbcs	r3, r2
   215e6:	b2db      	uxtb	r3, r3
}
   215e8:	0018      	movs	r0, r3
   215ea:	46bd      	mov	sp, r7
   215ec:	b004      	add	sp, #16
   215ee:	bd80      	pop	{r7, pc}

000215f0 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
   215f0:	b580      	push	{r7, lr}
   215f2:	b084      	sub	sp, #16
   215f4:	af00      	add	r7, sp, #0
   215f6:	6078      	str	r0, [r7, #4]
   215f8:	000a      	movs	r2, r1
   215fa:	1cbb      	adds	r3, r7, #2
   215fc:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   215fe:	687b      	ldr	r3, [r7, #4]
   21600:	681b      	ldr	r3, [r3, #0]
   21602:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
   21604:	687b      	ldr	r3, [r7, #4]
   21606:	0018      	movs	r0, r3
   21608:	4b0a      	ldr	r3, [pc, #40]	; (21634 <spi_write+0x44>)
   2160a:	4798      	blx	r3
   2160c:	0003      	movs	r3, r0
   2160e:	001a      	movs	r2, r3
   21610:	2301      	movs	r3, #1
   21612:	4053      	eors	r3, r2
   21614:	b2db      	uxtb	r3, r3
   21616:	2b00      	cmp	r3, #0
   21618:	d001      	beq.n	2161e <spi_write+0x2e>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
   2161a:	2305      	movs	r3, #5
   2161c:	e006      	b.n	2162c <spi_write+0x3c>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   2161e:	1cbb      	adds	r3, r7, #2
   21620:	881b      	ldrh	r3, [r3, #0]
   21622:	05db      	lsls	r3, r3, #23
   21624:	0dda      	lsrs	r2, r3, #23
   21626:	68fb      	ldr	r3, [r7, #12]
   21628:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
   2162a:	2300      	movs	r3, #0
}
   2162c:	0018      	movs	r0, r3
   2162e:	46bd      	mov	sp, r7
   21630:	b004      	add	sp, #16
   21632:	bd80      	pop	{r7, pc}
   21634:	000215a1 	.word	0x000215a1

00021638 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
   21638:	b580      	push	{r7, lr}
   2163a:	b084      	sub	sp, #16
   2163c:	af00      	add	r7, sp, #0
   2163e:	6078      	str	r0, [r7, #4]
   21640:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   21642:	687b      	ldr	r3, [r7, #4]
   21644:	681b      	ldr	r3, [r3, #0]
   21646:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
   21648:	687b      	ldr	r3, [r7, #4]
   2164a:	0018      	movs	r0, r3
   2164c:	4b1b      	ldr	r3, [pc, #108]	; (216bc <spi_read+0x84>)
   2164e:	4798      	blx	r3
   21650:	0003      	movs	r3, r0
   21652:	001a      	movs	r2, r3
   21654:	2301      	movs	r3, #1
   21656:	4053      	eors	r3, r2
   21658:	b2db      	uxtb	r3, r3
   2165a:	2b00      	cmp	r3, #0
   2165c:	d001      	beq.n	21662 <spi_read+0x2a>
		/* No data has been received, return */
		return STATUS_ERR_IO;
   2165e:	2310      	movs	r3, #16
   21660:	e027      	b.n	216b2 <spi_read+0x7a>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
   21662:	230f      	movs	r3, #15
   21664:	18fb      	adds	r3, r7, r3
   21666:	2200      	movs	r2, #0
   21668:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   2166a:	68bb      	ldr	r3, [r7, #8]
   2166c:	8b5b      	ldrh	r3, [r3, #26]
   2166e:	b29b      	uxth	r3, r3
   21670:	001a      	movs	r2, r3
   21672:	2304      	movs	r3, #4
   21674:	4013      	ands	r3, r2
   21676:	d006      	beq.n	21686 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   21678:	230f      	movs	r3, #15
   2167a:	18fb      	adds	r3, r7, r3
   2167c:	221e      	movs	r2, #30
   2167e:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   21680:	68bb      	ldr	r3, [r7, #8]
   21682:	2204      	movs	r2, #4
   21684:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   21686:	687b      	ldr	r3, [r7, #4]
   21688:	799b      	ldrb	r3, [r3, #6]
   2168a:	2b01      	cmp	r3, #1
   2168c:	d108      	bne.n	216a0 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   2168e:	68bb      	ldr	r3, [r7, #8]
   21690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   21692:	b29b      	uxth	r3, r3
   21694:	05db      	lsls	r3, r3, #23
   21696:	0ddb      	lsrs	r3, r3, #23
   21698:	b29a      	uxth	r2, r3
   2169a:	683b      	ldr	r3, [r7, #0]
   2169c:	801a      	strh	r2, [r3, #0]
   2169e:	e005      	b.n	216ac <spi_read+0x74>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
   216a0:	68bb      	ldr	r3, [r7, #8]
   216a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   216a4:	b2db      	uxtb	r3, r3
   216a6:	b29a      	uxth	r2, r3
   216a8:	683b      	ldr	r3, [r7, #0]
   216aa:	801a      	strh	r2, [r3, #0]
	}

	return retval;
   216ac:	230f      	movs	r3, #15
   216ae:	18fb      	adds	r3, r7, r3
   216b0:	781b      	ldrb	r3, [r3, #0]
}
   216b2:	0018      	movs	r0, r3
   216b4:	46bd      	mov	sp, r7
   216b6:	b004      	add	sp, #16
   216b8:	bd80      	pop	{r7, pc}
   216ba:	46c0      	nop			; (mov r8, r8)
   216bc:	000215c9 	.word	0x000215c9

000216c0 <spi_rw>:

struct spi_module master;
struct spi_slave_inst slave_inst;

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
   216c0:	b580      	push	{r7, lr}
   216c2:	b086      	sub	sp, #24
   216c4:	af00      	add	r7, sp, #0
   216c6:	60f8      	str	r0, [r7, #12]
   216c8:	60b9      	str	r1, [r7, #8]
   216ca:	1dbb      	adds	r3, r7, #6
   216cc:	801a      	strh	r2, [r3, #0]
	uint8 u8Dummy = 0xFF;
   216ce:	2313      	movs	r3, #19
   216d0:	18fb      	adds	r3, r7, r3
   216d2:	22ff      	movs	r2, #255	; 0xff
   216d4:	701a      	strb	r2, [r3, #0]
	uint8 u8SkipMosi = 0, u8SkipMiso = 0;
   216d6:	2317      	movs	r3, #23
   216d8:	18fb      	adds	r3, r7, r3
   216da:	2200      	movs	r2, #0
   216dc:	701a      	strb	r2, [r3, #0]
   216de:	2316      	movs	r3, #22
   216e0:	18fb      	adds	r3, r7, r3
   216e2:	2200      	movs	r2, #0
   216e4:	701a      	strb	r2, [r3, #0]
	uint16_t txd_data = 0;
   216e6:	2314      	movs	r3, #20
   216e8:	18fb      	adds	r3, r7, r3
   216ea:	2200      	movs	r2, #0
   216ec:	801a      	strh	r2, [r3, #0]
	uint16_t rxd_data = 0;
   216ee:	2310      	movs	r3, #16
   216f0:	18fb      	adds	r3, r7, r3
   216f2:	2200      	movs	r2, #0
   216f4:	801a      	strh	r2, [r3, #0]

	if(((pu8Miso == NULL) && (pu8Mosi == NULL)) ||(u16Sz == 0)) {
   216f6:	68bb      	ldr	r3, [r7, #8]
   216f8:	2b00      	cmp	r3, #0
   216fa:	d102      	bne.n	21702 <spi_rw+0x42>
   216fc:	68fb      	ldr	r3, [r7, #12]
   216fe:	2b00      	cmp	r3, #0
   21700:	d003      	beq.n	2170a <spi_rw+0x4a>
   21702:	1dbb      	adds	r3, r7, #6
   21704:	881b      	ldrh	r3, [r3, #0]
   21706:	2b00      	cmp	r3, #0
   21708:	d102      	bne.n	21710 <spi_rw+0x50>
		return M2M_ERR_INVALID_ARG;
   2170a:	230f      	movs	r3, #15
   2170c:	425b      	negs	r3, r3
   2170e:	e07e      	b.n	2180e <spi_rw+0x14e>
	}

	if (pu8Mosi == NULL) {
   21710:	68fb      	ldr	r3, [r7, #12]
   21712:	2b00      	cmp	r3, #0
   21714:	d106      	bne.n	21724 <spi_rw+0x64>
		pu8Mosi = &u8Dummy;
   21716:	2313      	movs	r3, #19
   21718:	18fb      	adds	r3, r7, r3
   2171a:	60fb      	str	r3, [r7, #12]
		u8SkipMosi = 1;
   2171c:	2317      	movs	r3, #23
   2171e:	18fb      	adds	r3, r7, r3
   21720:	2201      	movs	r2, #1
   21722:	701a      	strb	r2, [r3, #0]
	}
	if(pu8Miso == NULL) {
   21724:	68bb      	ldr	r3, [r7, #8]
   21726:	2b00      	cmp	r3, #0
   21728:	d106      	bne.n	21738 <spi_rw+0x78>
		pu8Miso = &u8Dummy;
   2172a:	2313      	movs	r3, #19
   2172c:	18fb      	adds	r3, r7, r3
   2172e:	60bb      	str	r3, [r7, #8]
		u8SkipMiso = 1;
   21730:	2316      	movs	r3, #22
   21732:	18fb      	adds	r3, r7, r3
   21734:	2201      	movs	r2, #1
   21736:	701a      	strb	r2, [r3, #0]
	}

	spi_select_slave(&master, &slave_inst, true);
   21738:	4937      	ldr	r1, [pc, #220]	; (21818 <spi_rw+0x158>)
   2173a:	4b38      	ldr	r3, [pc, #224]	; (2181c <spi_rw+0x15c>)
   2173c:	2201      	movs	r2, #1
   2173e:	0018      	movs	r0, r3
   21740:	4b37      	ldr	r3, [pc, #220]	; (21820 <spi_rw+0x160>)
   21742:	4798      	blx	r3

	while (u16Sz) {
   21744:	e04c      	b.n	217e0 <spi_rw+0x120>
		txd_data = *pu8Mosi;
   21746:	68fb      	ldr	r3, [r7, #12]
   21748:	781a      	ldrb	r2, [r3, #0]
   2174a:	2314      	movs	r3, #20
   2174c:	18fb      	adds	r3, r7, r3
   2174e:	801a      	strh	r2, [r3, #0]
		while (!spi_is_ready_to_write(&master))
   21750:	46c0      	nop			; (mov r8, r8)
   21752:	4b32      	ldr	r3, [pc, #200]	; (2181c <spi_rw+0x15c>)
   21754:	0018      	movs	r0, r3
   21756:	4b33      	ldr	r3, [pc, #204]	; (21824 <spi_rw+0x164>)
   21758:	4798      	blx	r3
   2175a:	0003      	movs	r3, r0
   2175c:	001a      	movs	r2, r3
   2175e:	2301      	movs	r3, #1
   21760:	4053      	eors	r3, r2
   21762:	b2db      	uxtb	r3, r3
   21764:	2b00      	cmp	r3, #0
   21766:	d1f4      	bne.n	21752 <spi_rw+0x92>
			;
		while(spi_write(&master, txd_data) != STATUS_OK)
   21768:	46c0      	nop			; (mov r8, r8)
   2176a:	2314      	movs	r3, #20
   2176c:	18fb      	adds	r3, r7, r3
   2176e:	881a      	ldrh	r2, [r3, #0]
   21770:	4b2a      	ldr	r3, [pc, #168]	; (2181c <spi_rw+0x15c>)
   21772:	0011      	movs	r1, r2
   21774:	0018      	movs	r0, r3
   21776:	4b2c      	ldr	r3, [pc, #176]	; (21828 <spi_rw+0x168>)
   21778:	4798      	blx	r3
   2177a:	1e03      	subs	r3, r0, #0
   2177c:	d1f5      	bne.n	2176a <spi_rw+0xaa>
			;

		/* Read SPI master data register. */
		while (!spi_is_ready_to_read(&master))
   2177e:	46c0      	nop			; (mov r8, r8)
   21780:	4b26      	ldr	r3, [pc, #152]	; (2181c <spi_rw+0x15c>)
   21782:	0018      	movs	r0, r3
   21784:	4b29      	ldr	r3, [pc, #164]	; (2182c <spi_rw+0x16c>)
   21786:	4798      	blx	r3
   21788:	0003      	movs	r3, r0
   2178a:	001a      	movs	r2, r3
   2178c:	2301      	movs	r3, #1
   2178e:	4053      	eors	r3, r2
   21790:	b2db      	uxtb	r3, r3
   21792:	2b00      	cmp	r3, #0
   21794:	d1f4      	bne.n	21780 <spi_rw+0xc0>
			;
		while (spi_read(&master, &rxd_data) != STATUS_OK)
   21796:	46c0      	nop			; (mov r8, r8)
   21798:	2310      	movs	r3, #16
   2179a:	18fa      	adds	r2, r7, r3
   2179c:	4b1f      	ldr	r3, [pc, #124]	; (2181c <spi_rw+0x15c>)
   2179e:	0011      	movs	r1, r2
   217a0:	0018      	movs	r0, r3
   217a2:	4b23      	ldr	r3, [pc, #140]	; (21830 <spi_rw+0x170>)
   217a4:	4798      	blx	r3
   217a6:	1e03      	subs	r3, r0, #0
   217a8:	d1f6      	bne.n	21798 <spi_rw+0xd8>
			;
		*pu8Miso = rxd_data;
   217aa:	2310      	movs	r3, #16
   217ac:	18fb      	adds	r3, r7, r3
   217ae:	881b      	ldrh	r3, [r3, #0]
   217b0:	b2da      	uxtb	r2, r3
   217b2:	68bb      	ldr	r3, [r7, #8]
   217b4:	701a      	strb	r2, [r3, #0]
			
		u16Sz--;
   217b6:	1dbb      	adds	r3, r7, #6
   217b8:	881a      	ldrh	r2, [r3, #0]
   217ba:	1dbb      	adds	r3, r7, #6
   217bc:	3a01      	subs	r2, #1
   217be:	801a      	strh	r2, [r3, #0]
		if (!u8SkipMiso)
   217c0:	2316      	movs	r3, #22
   217c2:	18fb      	adds	r3, r7, r3
   217c4:	781b      	ldrb	r3, [r3, #0]
   217c6:	2b00      	cmp	r3, #0
   217c8:	d102      	bne.n	217d0 <spi_rw+0x110>
			pu8Miso++;
   217ca:	68bb      	ldr	r3, [r7, #8]
   217cc:	3301      	adds	r3, #1
   217ce:	60bb      	str	r3, [r7, #8]
		if (!u8SkipMosi)
   217d0:	2317      	movs	r3, #23
   217d2:	18fb      	adds	r3, r7, r3
   217d4:	781b      	ldrb	r3, [r3, #0]
   217d6:	2b00      	cmp	r3, #0
   217d8:	d102      	bne.n	217e0 <spi_rw+0x120>
			pu8Mosi++;
   217da:	68fb      	ldr	r3, [r7, #12]
   217dc:	3301      	adds	r3, #1
   217de:	60fb      	str	r3, [r7, #12]
	while (u16Sz) {
   217e0:	1dbb      	adds	r3, r7, #6
   217e2:	881b      	ldrh	r3, [r3, #0]
   217e4:	2b00      	cmp	r3, #0
   217e6:	d1ae      	bne.n	21746 <spi_rw+0x86>
	}

	while (!spi_is_write_complete(&master))
   217e8:	46c0      	nop			; (mov r8, r8)
   217ea:	4b0c      	ldr	r3, [pc, #48]	; (2181c <spi_rw+0x15c>)
   217ec:	0018      	movs	r0, r3
   217ee:	4b11      	ldr	r3, [pc, #68]	; (21834 <spi_rw+0x174>)
   217f0:	4798      	blx	r3
   217f2:	0003      	movs	r3, r0
   217f4:	001a      	movs	r2, r3
   217f6:	2301      	movs	r3, #1
   217f8:	4053      	eors	r3, r2
   217fa:	b2db      	uxtb	r3, r3
   217fc:	2b00      	cmp	r3, #0
   217fe:	d1f4      	bne.n	217ea <spi_rw+0x12a>
		;

	spi_select_slave(&master, &slave_inst, false);
   21800:	4905      	ldr	r1, [pc, #20]	; (21818 <spi_rw+0x158>)
   21802:	4b06      	ldr	r3, [pc, #24]	; (2181c <spi_rw+0x15c>)
   21804:	2200      	movs	r2, #0
   21806:	0018      	movs	r0, r3
   21808:	4b05      	ldr	r3, [pc, #20]	; (21820 <spi_rw+0x160>)
   2180a:	4798      	blx	r3

	return M2M_SUCCESS;
   2180c:	2300      	movs	r3, #0
}
   2180e:	0018      	movs	r0, r3
   21810:	46bd      	mov	sp, r7
   21812:	b006      	add	sp, #24
   21814:	bd80      	pop	{r7, pc}
   21816:	46c0      	nop			; (mov r8, r8)
   21818:	20005ae4 	.word	0x20005ae4
   2181c:	20005ae8 	.word	0x20005ae8
   21820:	00028f6d 	.word	0x00028f6d
   21824:	000215a1 	.word	0x000215a1
   21828:	000215f1 	.word	0x000215f1
   2182c:	000215c9 	.word	0x000215c9
   21830:	00021639 	.word	0x00021639
   21834:	00021579 	.word	0x00021579

00021838 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(void *pvinit)
{
   21838:	b580      	push	{r7, lr}
   2183a:	b092      	sub	sp, #72	; 0x48
   2183c:	af00      	add	r7, sp, #0
   2183e:	6078      	str	r0, [r7, #4]
	sint8 result = M2M_SUCCESS;
   21840:	2347      	movs	r3, #71	; 0x47
   21842:	18fb      	adds	r3, r7, r3
   21844:	2200      	movs	r2, #0
   21846:	701a      	strb	r2, [r3, #0]
	struct spi_config config;
	struct spi_slave_inst_config slave_config;

	/* Select SPI slave CS pin. */
	/* This step will set the CS high */
	spi_slave_inst_get_config_defaults(&slave_config);
   21848:	2308      	movs	r3, #8
   2184a:	18fb      	adds	r3, r7, r3
   2184c:	0018      	movs	r0, r3
   2184e:	4b26      	ldr	r3, [pc, #152]	; (218e8 <nm_bus_init+0xb0>)
   21850:	4798      	blx	r3
	slave_config.ss_pin = CONF_WINC_SPI_CS_PIN;
   21852:	2308      	movs	r3, #8
   21854:	18fb      	adds	r3, r7, r3
   21856:	220e      	movs	r2, #14
   21858:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&slave_inst, &slave_config);
   2185a:	2308      	movs	r3, #8
   2185c:	18fa      	adds	r2, r7, r3
   2185e:	4b23      	ldr	r3, [pc, #140]	; (218ec <nm_bus_init+0xb4>)
   21860:	0011      	movs	r1, r2
   21862:	0018      	movs	r0, r3
   21864:	4b22      	ldr	r3, [pc, #136]	; (218f0 <nm_bus_init+0xb8>)
   21866:	4798      	blx	r3

	/* Configure the SPI master. */
	spi_get_config_defaults(&config);
   21868:	230c      	movs	r3, #12
   2186a:	18fb      	adds	r3, r7, r3
   2186c:	0018      	movs	r0, r3
   2186e:	4b21      	ldr	r3, [pc, #132]	; (218f4 <nm_bus_init+0xbc>)
   21870:	4798      	blx	r3
	config.mux_setting = CONF_WINC_SPI_SERCOM_MUX;
   21872:	230c      	movs	r3, #12
   21874:	18fb      	adds	r3, r7, r3
   21876:	22c0      	movs	r2, #192	; 0xc0
   21878:	0392      	lsls	r2, r2, #14
   2187a:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = CONF_WINC_SPI_PINMUX_PAD0;
   2187c:	230c      	movs	r3, #12
   2187e:	18fb      	adds	r3, r7, r3
   21880:	4a1d      	ldr	r2, [pc, #116]	; (218f8 <nm_bus_init+0xc0>)
   21882:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = CONF_WINC_SPI_PINMUX_PAD1;
   21884:	230c      	movs	r3, #12
   21886:	18fb      	adds	r3, r7, r3
   21888:	4a1c      	ldr	r2, [pc, #112]	; (218fc <nm_bus_init+0xc4>)
   2188a:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = CONF_WINC_SPI_PINMUX_PAD2;
   2188c:	230c      	movs	r3, #12
   2188e:	18fb      	adds	r3, r7, r3
   21890:	2201      	movs	r2, #1
   21892:	4252      	negs	r2, r2
   21894:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = CONF_WINC_SPI_PINMUX_PAD3;
   21896:	230c      	movs	r3, #12
   21898:	18fb      	adds	r3, r7, r3
   2189a:	4a19      	ldr	r2, [pc, #100]	; (21900 <nm_bus_init+0xc8>)
   2189c:	635a      	str	r2, [r3, #52]	; 0x34
	config.master_slave_select_enable = false;
   2189e:	230c      	movs	r3, #12
   218a0:	18fb      	adds	r3, r7, r3
   218a2:	2200      	movs	r2, #0
   218a4:	751a      	strb	r2, [r3, #20]
	
	config.mode_specific.master.baudrate = CONF_WINC_SPI_CLOCK;
   218a6:	230c      	movs	r3, #12
   218a8:	18fb      	adds	r3, r7, r3
   218aa:	4a16      	ldr	r2, [pc, #88]	; (21904 <nm_bus_init+0xcc>)
   218ac:	619a      	str	r2, [r3, #24]
	if (spi_init(&master, CONF_WINC_SPI_MODULE, &config) != STATUS_OK) {
   218ae:	230c      	movs	r3, #12
   218b0:	18fa      	adds	r2, r7, r3
   218b2:	4915      	ldr	r1, [pc, #84]	; (21908 <nm_bus_init+0xd0>)
   218b4:	4b15      	ldr	r3, [pc, #84]	; (2190c <nm_bus_init+0xd4>)
   218b6:	0018      	movs	r0, r3
   218b8:	4b15      	ldr	r3, [pc, #84]	; (21910 <nm_bus_init+0xd8>)
   218ba:	4798      	blx	r3
   218bc:	1e03      	subs	r3, r0, #0
   218be:	d002      	beq.n	218c6 <nm_bus_init+0x8e>
		return M2M_ERR_BUS_FAIL;
   218c0:	2306      	movs	r3, #6
   218c2:	425b      	negs	r3, r3
   218c4:	e00c      	b.n	218e0 <nm_bus_init+0xa8>
	}

	/* Enable the SPI master. */
	spi_enable(&master);
   218c6:	4b11      	ldr	r3, [pc, #68]	; (2190c <nm_bus_init+0xd4>)
   218c8:	0018      	movs	r0, r3
   218ca:	4b12      	ldr	r3, [pc, #72]	; (21914 <nm_bus_init+0xdc>)
   218cc:	4798      	blx	r3

	nm_bsp_reset();
   218ce:	4b12      	ldr	r3, [pc, #72]	; (21918 <nm_bus_init+0xe0>)
   218d0:	4798      	blx	r3
	nm_bsp_sleep(1);
   218d2:	2001      	movs	r0, #1
   218d4:	4b11      	ldr	r3, [pc, #68]	; (2191c <nm_bus_init+0xe4>)
   218d6:	4798      	blx	r3
#endif
	return result;
   218d8:	2347      	movs	r3, #71	; 0x47
   218da:	18fb      	adds	r3, r7, r3
   218dc:	781b      	ldrb	r3, [r3, #0]
   218de:	b25b      	sxtb	r3, r3
}
   218e0:	0018      	movs	r0, r3
   218e2:	46bd      	mov	sp, r7
   218e4:	b012      	add	sp, #72	; 0x48
   218e6:	bd80      	pop	{r7, pc}
   218e8:	00021445 	.word	0x00021445
   218ec:	20005ae4 	.word	0x20005ae4
   218f0:	00021469 	.word	0x00021469
   218f4:	000213c1 	.word	0x000213c1
   218f8:	000c0002 	.word	0x000c0002
   218fc:	000d0002 	.word	0x000d0002
   21900:	000f0002 	.word	0x000f0002
   21904:	00124f80 	.word	0x00124f80
   21908:	42001000 	.word	0x42001000
   2190c:	20005ae8 	.word	0x20005ae8
   21910:	00028ca9 	.word	0x00028ca9
   21914:	000214cd 	.word	0x000214cd
   21918:	0002113d 	.word	0x0002113d
   2191c:	0002117d 	.word	0x0002117d

00021920 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
   21920:	b590      	push	{r4, r7, lr}
   21922:	b085      	sub	sp, #20
   21924:	af00      	add	r7, sp, #0
   21926:	0002      	movs	r2, r0
   21928:	6039      	str	r1, [r7, #0]
   2192a:	1dfb      	adds	r3, r7, #7
   2192c:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = 0;
   2192e:	230f      	movs	r3, #15
   21930:	18fb      	adds	r3, r7, r3
   21932:	2200      	movs	r2, #0
   21934:	701a      	strb	r2, [r3, #0]
	switch(u8Cmd)
   21936:	1dfb      	adds	r3, r7, #7
   21938:	781b      	ldrb	r3, [r3, #0]
   2193a:	2b03      	cmp	r3, #3
   2193c:	d10f      	bne.n	2195e <nm_bus_ioctl+0x3e>
			s8Ret = nm_i2c_write_special(pstrParam->pu8Buf1, pstrParam->u16Sz1, pstrParam->pu8Buf2, pstrParam->u16Sz2);
		}
		break;
#elif defined CONF_WINC_USE_SPI
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
   2193e:	683b      	ldr	r3, [r7, #0]
   21940:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
   21942:	68bb      	ldr	r3, [r7, #8]
   21944:	6818      	ldr	r0, [r3, #0]
   21946:	68bb      	ldr	r3, [r7, #8]
   21948:	6859      	ldr	r1, [r3, #4]
   2194a:	68bb      	ldr	r3, [r7, #8]
   2194c:	891b      	ldrh	r3, [r3, #8]
   2194e:	220f      	movs	r2, #15
   21950:	18bc      	adds	r4, r7, r2
   21952:	001a      	movs	r2, r3
   21954:	4b10      	ldr	r3, [pc, #64]	; (21998 <nm_bus_ioctl+0x78>)
   21956:	4798      	blx	r3
   21958:	0003      	movs	r3, r0
   2195a:	7023      	strb	r3, [r4, #0]
		}
		break;
   2195c:	e013      	b.n	21986 <nm_bus_ioctl+0x66>
#endif
		default:
			s8Ret = -1;
   2195e:	230f      	movs	r3, #15
   21960:	18fb      	adds	r3, r7, r3
   21962:	22ff      	movs	r2, #255	; 0xff
   21964:	701a      	strb	r2, [r3, #0]
			M2M_ERR("invalide ioclt cmd\n");
   21966:	2383      	movs	r3, #131	; 0x83
   21968:	005a      	lsls	r2, r3, #1
   2196a:	490c      	ldr	r1, [pc, #48]	; (2199c <nm_bus_ioctl+0x7c>)
   2196c:	4b0c      	ldr	r3, [pc, #48]	; (219a0 <nm_bus_ioctl+0x80>)
   2196e:	0018      	movs	r0, r3
   21970:	4b0c      	ldr	r3, [pc, #48]	; (219a4 <nm_bus_ioctl+0x84>)
   21972:	4798      	blx	r3
   21974:	4b0c      	ldr	r3, [pc, #48]	; (219a8 <nm_bus_ioctl+0x88>)
   21976:	0018      	movs	r0, r3
   21978:	4b0a      	ldr	r3, [pc, #40]	; (219a4 <nm_bus_ioctl+0x84>)
   2197a:	4798      	blx	r3
   2197c:	4b0b      	ldr	r3, [pc, #44]	; (219ac <nm_bus_ioctl+0x8c>)
   2197e:	0018      	movs	r0, r3
   21980:	4b08      	ldr	r3, [pc, #32]	; (219a4 <nm_bus_ioctl+0x84>)
   21982:	4798      	blx	r3
			break;
   21984:	46c0      	nop			; (mov r8, r8)
	}

	return s8Ret;
   21986:	230f      	movs	r3, #15
   21988:	18fb      	adds	r3, r7, r3
   2198a:	781b      	ldrb	r3, [r3, #0]
   2198c:	b25b      	sxtb	r3, r3
}
   2198e:	0018      	movs	r0, r3
   21990:	46bd      	mov	sp, r7
   21992:	b005      	add	sp, #20
   21994:	bd90      	pop	{r4, r7, pc}
   21996:	46c0      	nop			; (mov r8, r8)
   21998:	000216c1 	.word	0x000216c1
   2199c:	00039474 	.word	0x00039474
   219a0:	00039448 	.word	0x00039448
   219a4:	0001ed29 	.word	0x0001ed29
   219a8:	0003945c 	.word	0x0003945c
   219ac:	00039470 	.word	0x00039470

000219b0 <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
   219b0:	b580      	push	{r7, lr}
   219b2:	b082      	sub	sp, #8
   219b4:	af00      	add	r7, sp, #0
	sint8 result = M2M_SUCCESS;
   219b6:	1dfb      	adds	r3, r7, #7
   219b8:	2200      	movs	r2, #0
   219ba:	701a      	strb	r2, [r3, #0]
	struct port_config pin_conf;
		
	port_get_config_defaults(&pin_conf);
   219bc:	1d3b      	adds	r3, r7, #4
   219be:	0018      	movs	r0, r3
   219c0:	4b13      	ldr	r3, [pc, #76]	; (21a10 <nm_bus_deinit+0x60>)
   219c2:	4798      	blx	r3
	/* Configure control pins as input no pull up. */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   219c4:	1d3b      	adds	r3, r7, #4
   219c6:	2200      	movs	r2, #0
   219c8:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_NONE;
   219ca:	1d3b      	adds	r3, r7, #4
   219cc:	2200      	movs	r2, #0
   219ce:	705a      	strb	r2, [r3, #1]
	i2c_master_disable(&i2c_master_instance);
	port_pin_set_config(CONF_WINC_I2C_SCL, &pin_conf);
	port_pin_set_config(CONF_WINC_I2C_SDA, &pin_conf);
#endif /* CONF_WINC_USE_I2C */
#ifdef CONF_WINC_USE_SPI
	spi_disable(&master);
   219d0:	4b10      	ldr	r3, [pc, #64]	; (21a14 <nm_bus_deinit+0x64>)
   219d2:	0018      	movs	r0, r3
   219d4:	4b10      	ldr	r3, [pc, #64]	; (21a18 <nm_bus_deinit+0x68>)
   219d6:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MOSI, &pin_conf);
   219d8:	1d3b      	adds	r3, r7, #4
   219da:	0019      	movs	r1, r3
   219dc:	200c      	movs	r0, #12
   219de:	4b0f      	ldr	r3, [pc, #60]	; (21a1c <nm_bus_deinit+0x6c>)
   219e0:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_MISO, &pin_conf);
   219e2:	1d3b      	adds	r3, r7, #4
   219e4:	0019      	movs	r1, r3
   219e6:	200f      	movs	r0, #15
   219e8:	4b0c      	ldr	r3, [pc, #48]	; (21a1c <nm_bus_deinit+0x6c>)
   219ea:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SCK,  &pin_conf);
   219ec:	1d3b      	adds	r3, r7, #4
   219ee:	0019      	movs	r1, r3
   219f0:	200d      	movs	r0, #13
   219f2:	4b0a      	ldr	r3, [pc, #40]	; (21a1c <nm_bus_deinit+0x6c>)
   219f4:	4798      	blx	r3
	port_pin_set_config(CONF_WINC_SPI_SS,   &pin_conf);
   219f6:	1d3b      	adds	r3, r7, #4
   219f8:	0019      	movs	r1, r3
   219fa:	200e      	movs	r0, #14
   219fc:	4b07      	ldr	r3, [pc, #28]	; (21a1c <nm_bus_deinit+0x6c>)
   219fe:	4798      	blx	r3
	//port_pin_set_output_level(CONF_WINC_SPI_MOSI, false);
	//port_pin_set_output_level(CONF_WINC_SPI_MISO, false);
	//port_pin_set_output_level(CONF_WINC_SPI_SCK,  false);
	//port_pin_set_output_level(CONF_WINC_SPI_SS,   false);
#endif /* CONF_WINC_USE_SPI */
	return result;
   21a00:	1dfb      	adds	r3, r7, #7
   21a02:	781b      	ldrb	r3, [r3, #0]
   21a04:	b25b      	sxtb	r3, r3
}
   21a06:	0018      	movs	r0, r3
   21a08:	46bd      	mov	sp, r7
   21a0a:	b002      	add	sp, #8
   21a0c:	bd80      	pop	{r7, pc}
   21a0e:	46c0      	nop			; (mov r8, r8)
   21a10:	00021329 	.word	0x00021329
   21a14:	20005ae8 	.word	0x20005ae8
   21a18:	0002151d 	.word	0x0002151d
   21a1c:	00027829 	.word	0x00027829

00021a20 <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8* pDst,uint8* pSrc,uint32 sz)
{
   21a20:	b580      	push	{r7, lr}
   21a22:	b084      	sub	sp, #16
   21a24:	af00      	add	r7, sp, #0
   21a26:	60f8      	str	r0, [r7, #12]
   21a28:	60b9      	str	r1, [r7, #8]
   21a2a:	607a      	str	r2, [r7, #4]
	if(sz == 0) return;
   21a2c:	687b      	ldr	r3, [r7, #4]
   21a2e:	2b00      	cmp	r3, #0
   21a30:	d010      	beq.n	21a54 <m2m_memcpy+0x34>
	do
	{
		*pDst = *pSrc;
   21a32:	68bb      	ldr	r3, [r7, #8]
   21a34:	781a      	ldrb	r2, [r3, #0]
   21a36:	68fb      	ldr	r3, [r7, #12]
   21a38:	701a      	strb	r2, [r3, #0]
		pDst++;
   21a3a:	68fb      	ldr	r3, [r7, #12]
   21a3c:	3301      	adds	r3, #1
   21a3e:	60fb      	str	r3, [r7, #12]
		pSrc++;
   21a40:	68bb      	ldr	r3, [r7, #8]
   21a42:	3301      	adds	r3, #1
   21a44:	60bb      	str	r3, [r7, #8]
	}while(--sz);
   21a46:	687b      	ldr	r3, [r7, #4]
   21a48:	3b01      	subs	r3, #1
   21a4a:	607b      	str	r3, [r7, #4]
   21a4c:	687b      	ldr	r3, [r7, #4]
   21a4e:	2b00      	cmp	r3, #0
   21a50:	d1ef      	bne.n	21a32 <m2m_memcpy+0x12>
   21a52:	e000      	b.n	21a56 <m2m_memcpy+0x36>
	if(sz == 0) return;
   21a54:	46c0      	nop			; (mov r8, r8)
}
   21a56:	46bd      	mov	sp, r7
   21a58:	b004      	add	sp, #16
   21a5a:	bd80      	pop	{r7, pc}

00021a5c <m2m_memset>:

	return cs;
}

void m2m_memset(uint8* pBuf,uint8 val,uint32 sz)
{
   21a5c:	b580      	push	{r7, lr}
   21a5e:	b084      	sub	sp, #16
   21a60:	af00      	add	r7, sp, #0
   21a62:	60f8      	str	r0, [r7, #12]
   21a64:	607a      	str	r2, [r7, #4]
   21a66:	230b      	movs	r3, #11
   21a68:	18fb      	adds	r3, r7, r3
   21a6a:	1c0a      	adds	r2, r1, #0
   21a6c:	701a      	strb	r2, [r3, #0]
	if(sz == 0) return;
   21a6e:	687b      	ldr	r3, [r7, #4]
   21a70:	2b00      	cmp	r3, #0
   21a72:	d00e      	beq.n	21a92 <m2m_memset+0x36>
	do
	{
		*pBuf = val;
   21a74:	68fb      	ldr	r3, [r7, #12]
   21a76:	220b      	movs	r2, #11
   21a78:	18ba      	adds	r2, r7, r2
   21a7a:	7812      	ldrb	r2, [r2, #0]
   21a7c:	701a      	strb	r2, [r3, #0]
		pBuf++;
   21a7e:	68fb      	ldr	r3, [r7, #12]
   21a80:	3301      	adds	r3, #1
   21a82:	60fb      	str	r3, [r7, #12]
	}while(--sz);
   21a84:	687b      	ldr	r3, [r7, #4]
   21a86:	3b01      	subs	r3, #1
   21a88:	607b      	str	r3, [r7, #4]
   21a8a:	687b      	ldr	r3, [r7, #4]
   21a8c:	2b00      	cmp	r3, #0
   21a8e:	d1f1      	bne.n	21a74 <m2m_memset+0x18>
   21a90:	e000      	b.n	21a94 <m2m_memset+0x38>
	if(sz == 0) return;
   21a92:	46c0      	nop			; (mov r8, r8)
}
   21a94:	46bd      	mov	sp, r7
   21a96:	b004      	add	sp, #16
   21a98:	bd80      	pop	{r7, pc}

00021a9a <m2m_strlen>:

uint16 m2m_strlen(uint8 * pcStr)
{
   21a9a:	b580      	push	{r7, lr}
   21a9c:	b084      	sub	sp, #16
   21a9e:	af00      	add	r7, sp, #0
   21aa0:	6078      	str	r0, [r7, #4]
	uint16	u16StrLen = 0;
   21aa2:	230e      	movs	r3, #14
   21aa4:	18fb      	adds	r3, r7, r3
   21aa6:	2200      	movs	r2, #0
   21aa8:	801a      	strh	r2, [r3, #0]
	while(*pcStr)
   21aaa:	e009      	b.n	21ac0 <m2m_strlen+0x26>
	{
		u16StrLen ++;
   21aac:	230e      	movs	r3, #14
   21aae:	18fb      	adds	r3, r7, r3
   21ab0:	881a      	ldrh	r2, [r3, #0]
   21ab2:	230e      	movs	r3, #14
   21ab4:	18fb      	adds	r3, r7, r3
   21ab6:	3201      	adds	r2, #1
   21ab8:	801a      	strh	r2, [r3, #0]
		pcStr++;
   21aba:	687b      	ldr	r3, [r7, #4]
   21abc:	3301      	adds	r3, #1
   21abe:	607b      	str	r3, [r7, #4]
	while(*pcStr)
   21ac0:	687b      	ldr	r3, [r7, #4]
   21ac2:	781b      	ldrb	r3, [r3, #0]
   21ac4:	2b00      	cmp	r3, #0
   21ac6:	d1f1      	bne.n	21aac <m2m_strlen+0x12>
	}
	return u16StrLen;
   21ac8:	230e      	movs	r3, #14
   21aca:	18fb      	adds	r3, r7, r3
   21acc:	881b      	ldrh	r3, [r3, #0]
}
   21ace:	0018      	movs	r0, r3
   21ad0:	46bd      	mov	sp, r7
   21ad2:	b004      	add	sp, #16
   21ad4:	bd80      	pop	{r7, pc}
	...

00021ad8 <isr>:
#ifdef ETH_MODE
extern void os_hook_isr(void);
#endif

static void isr(void)
{
   21ad8:	b580      	push	{r7, lr}
   21ada:	af00      	add	r7, sp, #0
	gstrHifCxt.u8Interrupt++;
   21adc:	4b04      	ldr	r3, [pc, #16]	; (21af0 <isr+0x18>)
   21ade:	78db      	ldrb	r3, [r3, #3]
   21ae0:	b2db      	uxtb	r3, r3
   21ae2:	3301      	adds	r3, #1
   21ae4:	b2da      	uxtb	r2, r3
   21ae6:	4b02      	ldr	r3, [pc, #8]	; (21af0 <isr+0x18>)
   21ae8:	70da      	strb	r2, [r3, #3]
	nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
   21aea:	46c0      	nop			; (mov r8, r8)
   21aec:	46bd      	mov	sp, r7
   21aee:	bd80      	pop	{r7, pc}
   21af0:	20005b24 	.word	0x20005b24

00021af4 <hif_set_rx_done>:
static sint8 hif_set_rx_done(void)
{
   21af4:	b590      	push	{r4, r7, lr}
   21af6:	b083      	sub	sp, #12
   21af8:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   21afa:	1dfb      	adds	r3, r7, #7
   21afc:	2200      	movs	r2, #0
   21afe:	701a      	strb	r2, [r3, #0]

	gstrHifCxt.u8HifRXDone = 0;
   21b00:	4b14      	ldr	r3, [pc, #80]	; (21b54 <hif_set_rx_done+0x60>)
   21b02:	2200      	movs	r2, #0
   21b04:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
   21b06:	2001      	movs	r0, #1
   21b08:	4b13      	ldr	r3, [pc, #76]	; (21b58 <hif_set_rx_done+0x64>)
   21b0a:	4798      	blx	r3
#endif
	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0,&reg);
   21b0c:	1dfc      	adds	r4, r7, #7
   21b0e:	003b      	movs	r3, r7
   21b10:	4a12      	ldr	r2, [pc, #72]	; (21b5c <hif_set_rx_done+0x68>)
   21b12:	0019      	movs	r1, r3
   21b14:	0010      	movs	r0, r2
   21b16:	4b12      	ldr	r3, [pc, #72]	; (21b60 <hif_set_rx_done+0x6c>)
   21b18:	4798      	blx	r3
   21b1a:	0003      	movs	r3, r0
   21b1c:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   21b1e:	1dfb      	adds	r3, r7, #7
   21b20:	781b      	ldrb	r3, [r3, #0]
   21b22:	b25b      	sxtb	r3, r3
   21b24:	2b00      	cmp	r3, #0
   21b26:	d10d      	bne.n	21b44 <hif_set_rx_done+0x50>
	/* Set RX Done */
	reg |= NBIT1;
   21b28:	683b      	ldr	r3, [r7, #0]
   21b2a:	2202      	movs	r2, #2
   21b2c:	4313      	orrs	r3, r2
   21b2e:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   21b30:	683b      	ldr	r3, [r7, #0]
   21b32:	1dfc      	adds	r4, r7, #7
   21b34:	4a09      	ldr	r2, [pc, #36]	; (21b5c <hif_set_rx_done+0x68>)
   21b36:	0019      	movs	r1, r3
   21b38:	0010      	movs	r0, r2
   21b3a:	4b0a      	ldr	r3, [pc, #40]	; (21b64 <hif_set_rx_done+0x70>)
   21b3c:	4798      	blx	r3
   21b3e:	0003      	movs	r3, r0
   21b40:	7023      	strb	r3, [r4, #0]
   21b42:	e000      	b.n	21b46 <hif_set_rx_done+0x52>
	if(ret != M2M_SUCCESS)goto ERR1;
   21b44:	46c0      	nop			; (mov r8, r8)
	if(ret != M2M_SUCCESS)goto ERR1;
#ifdef NM_LEVEL_INTERRUPT
	nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
	return ret;
   21b46:	1dfb      	adds	r3, r7, #7
   21b48:	781b      	ldrb	r3, [r3, #0]
   21b4a:	b25b      	sxtb	r3, r3

}
   21b4c:	0018      	movs	r0, r3
   21b4e:	46bd      	mov	sp, r7
   21b50:	b003      	add	sp, #12
   21b52:	bd90      	pop	{r4, r7, pc}
   21b54:	20005b24 	.word	0x20005b24
   21b58:	00021211 	.word	0x00021211
   21b5c:	00001070 	.word	0x00001070
   21b60:	00023aed 	.word	0x00023aed
   21b64:	00023b11 	.word	0x00023b11

00021b68 <m2m_hif_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   21b68:	b580      	push	{r7, lr}
   21b6a:	b082      	sub	sp, #8
   21b6c:	af00      	add	r7, sp, #0
   21b6e:	603a      	str	r2, [r7, #0]
   21b70:	1dfb      	adds	r3, r7, #7
   21b72:	1c02      	adds	r2, r0, #0
   21b74:	701a      	strb	r2, [r3, #0]
   21b76:	1d3b      	adds	r3, r7, #4
   21b78:	1c0a      	adds	r2, r1, #0
   21b7a:	801a      	strh	r2, [r3, #0]


}
   21b7c:	46c0      	nop			; (mov r8, r8)
   21b7e:	46bd      	mov	sp, r7
   21b80:	b002      	add	sp, #8
   21b82:	bd80      	pop	{r7, pc}

00021b84 <hif_chip_wake>:
*	@brief	To Wakeup the chip.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_wake(void)
{
   21b84:	b590      	push	{r4, r7, lr}
   21b86:	b083      	sub	sp, #12
   21b88:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   21b8a:	1dfb      	adds	r3, r7, #7
   21b8c:	2200      	movs	r2, #0
   21b8e:	701a      	strb	r2, [r3, #0]
	if(gstrHifCxt.u8HifRXDone)
   21b90:	4b16      	ldr	r3, [pc, #88]	; (21bec <hif_chip_wake+0x68>)
   21b92:	789b      	ldrb	r3, [r3, #2]
   21b94:	b2db      	uxtb	r3, r3
   21b96:	2b00      	cmp	r3, #0
   21b98:	d003      	beq.n	21ba2 <hif_chip_wake+0x1e>
	{
		/*chip already wake for the rx not done no need to send wake request*/
		return ret;
   21b9a:	1dfb      	adds	r3, r7, #7
   21b9c:	781b      	ldrb	r3, [r3, #0]
   21b9e:	b25b      	sxtb	r3, r3
   21ba0:	e01f      	b.n	21be2 <hif_chip_wake+0x5e>
	}
	if(gstrHifCxt.u8ChipSleep == 0)
   21ba2:	4b12      	ldr	r3, [pc, #72]	; (21bec <hif_chip_wake+0x68>)
   21ba4:	785b      	ldrb	r3, [r3, #1]
   21ba6:	b2db      	uxtb	r3, r3
   21ba8:	2b00      	cmp	r3, #0
   21baa:	d10e      	bne.n	21bca <hif_chip_wake+0x46>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   21bac:	4b0f      	ldr	r3, [pc, #60]	; (21bec <hif_chip_wake+0x68>)
   21bae:	781b      	ldrb	r3, [r3, #0]
   21bb0:	b2db      	uxtb	r3, r3
   21bb2:	2b00      	cmp	r3, #0
   21bb4:	d009      	beq.n	21bca <hif_chip_wake+0x46>
		{
			ret = chip_wake();
   21bb6:	1dfc      	adds	r4, r7, #7
   21bb8:	4b0d      	ldr	r3, [pc, #52]	; (21bf0 <hif_chip_wake+0x6c>)
   21bba:	4798      	blx	r3
   21bbc:	0003      	movs	r3, r0
   21bbe:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   21bc0:	1dfb      	adds	r3, r7, #7
   21bc2:	781b      	ldrb	r3, [r3, #0]
   21bc4:	b25b      	sxtb	r3, r3
   21bc6:	2b00      	cmp	r3, #0
   21bc8:	d107      	bne.n	21bda <hif_chip_wake+0x56>
		}
		else
		{
		}
	}
	gstrHifCxt.u8ChipSleep++;
   21bca:	4b08      	ldr	r3, [pc, #32]	; (21bec <hif_chip_wake+0x68>)
   21bcc:	785b      	ldrb	r3, [r3, #1]
   21bce:	b2db      	uxtb	r3, r3
   21bd0:	3301      	adds	r3, #1
   21bd2:	b2da      	uxtb	r2, r3
   21bd4:	4b05      	ldr	r3, [pc, #20]	; (21bec <hif_chip_wake+0x68>)
   21bd6:	705a      	strb	r2, [r3, #1]
   21bd8:	e000      	b.n	21bdc <hif_chip_wake+0x58>
			if(ret != M2M_SUCCESS)goto ERR1;
   21bda:	46c0      	nop			; (mov r8, r8)
ERR1:
	return ret;
   21bdc:	1dfb      	adds	r3, r7, #7
   21bde:	781b      	ldrb	r3, [r3, #0]
   21be0:	b25b      	sxtb	r3, r3
}
   21be2:	0018      	movs	r0, r3
   21be4:	46bd      	mov	sp, r7
   21be6:	b003      	add	sp, #12
   21be8:	bd90      	pop	{r4, r7, pc}
   21bea:	46c0      	nop			; (mov r8, r8)
   21bec:	20005b24 	.word	0x20005b24
   21bf0:	000235bd 	.word	0x000235bd

00021bf4 <hif_chip_sleep_sc>:
*	@brief	To clear the chip sleep but keep the chip sleep
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep_sc(void)
{
   21bf4:	b580      	push	{r7, lr}
   21bf6:	af00      	add	r7, sp, #0
	if(gstrHifCxt.u8ChipSleep >= 1)
   21bf8:	4b07      	ldr	r3, [pc, #28]	; (21c18 <hif_chip_sleep_sc+0x24>)
   21bfa:	785b      	ldrb	r3, [r3, #1]
   21bfc:	b2db      	uxtb	r3, r3
   21bfe:	2b00      	cmp	r3, #0
   21c00:	d006      	beq.n	21c10 <hif_chip_sleep_sc+0x1c>
	{
		gstrHifCxt.u8ChipSleep--;
   21c02:	4b05      	ldr	r3, [pc, #20]	; (21c18 <hif_chip_sleep_sc+0x24>)
   21c04:	785b      	ldrb	r3, [r3, #1]
   21c06:	b2db      	uxtb	r3, r3
   21c08:	3b01      	subs	r3, #1
   21c0a:	b2da      	uxtb	r2, r3
   21c0c:	4b02      	ldr	r3, [pc, #8]	; (21c18 <hif_chip_sleep_sc+0x24>)
   21c0e:	705a      	strb	r2, [r3, #1]
	}
	return M2M_SUCCESS;
   21c10:	2300      	movs	r3, #0
}
   21c12:	0018      	movs	r0, r3
   21c14:	46bd      	mov	sp, r7
   21c16:	bd80      	pop	{r7, pc}
   21c18:	20005b24 	.word	0x20005b24

00021c1c <hif_chip_sleep>:
*	@brief	To make the chip sleep.
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_chip_sleep(void)
{
   21c1c:	b590      	push	{r4, r7, lr}
   21c1e:	b083      	sub	sp, #12
   21c20:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   21c22:	1dfb      	adds	r3, r7, #7
   21c24:	2200      	movs	r2, #0
   21c26:	701a      	strb	r2, [r3, #0]

	if(gstrHifCxt.u8ChipSleep >= 1)
   21c28:	4b10      	ldr	r3, [pc, #64]	; (21c6c <hif_chip_sleep+0x50>)
   21c2a:	785b      	ldrb	r3, [r3, #1]
   21c2c:	b2db      	uxtb	r3, r3
   21c2e:	2b00      	cmp	r3, #0
   21c30:	d006      	beq.n	21c40 <hif_chip_sleep+0x24>
	{
		gstrHifCxt.u8ChipSleep--;
   21c32:	4b0e      	ldr	r3, [pc, #56]	; (21c6c <hif_chip_sleep+0x50>)
   21c34:	785b      	ldrb	r3, [r3, #1]
   21c36:	b2db      	uxtb	r3, r3
   21c38:	3b01      	subs	r3, #1
   21c3a:	b2da      	uxtb	r2, r3
   21c3c:	4b0b      	ldr	r3, [pc, #44]	; (21c6c <hif_chip_sleep+0x50>)
   21c3e:	705a      	strb	r2, [r3, #1]
	}
	
	if(gstrHifCxt.u8ChipSleep == 0)
   21c40:	4b0a      	ldr	r3, [pc, #40]	; (21c6c <hif_chip_sleep+0x50>)
   21c42:	785b      	ldrb	r3, [r3, #1]
   21c44:	b2db      	uxtb	r3, r3
   21c46:	2b00      	cmp	r3, #0
   21c48:	d109      	bne.n	21c5e <hif_chip_sleep+0x42>
	{
		if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
   21c4a:	4b08      	ldr	r3, [pc, #32]	; (21c6c <hif_chip_sleep+0x50>)
   21c4c:	781b      	ldrb	r3, [r3, #0]
   21c4e:	b2db      	uxtb	r3, r3
   21c50:	2b00      	cmp	r3, #0
   21c52:	d004      	beq.n	21c5e <hif_chip_sleep+0x42>
		{
			ret = chip_sleep();
   21c54:	1dfc      	adds	r4, r7, #7
   21c56:	4b06      	ldr	r3, [pc, #24]	; (21c70 <hif_chip_sleep+0x54>)
   21c58:	4798      	blx	r3
   21c5a:	0003      	movs	r3, r0
   21c5c:	7023      	strb	r3, [r4, #0]
		else
		{
		}
	}
ERR1:
	return ret;
   21c5e:	1dfb      	adds	r3, r7, #7
   21c60:	781b      	ldrb	r3, [r3, #0]
   21c62:	b25b      	sxtb	r3, r3
}
   21c64:	0018      	movs	r0, r3
   21c66:	46bd      	mov	sp, r7
   21c68:	b003      	add	sp, #12
   21c6a:	bd90      	pop	{r4, r7, pc}
   21c6c:	20005b24 	.word	0x20005b24
   21c70:	000234e5 	.word	0x000234e5

00021c74 <hif_init>:
*				Pointer to the arguments.
*   @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_init(void * arg)
{
   21c74:	b580      	push	{r7, lr}
   21c76:	b082      	sub	sp, #8
   21c78:	af00      	add	r7, sp, #0
   21c7a:	6078      	str	r0, [r7, #4]
	m2m_memset((uint8*)&gstrHifCxt,0,sizeof(tstrHifContext));
   21c7c:	4b09      	ldr	r3, [pc, #36]	; (21ca4 <hif_init+0x30>)
   21c7e:	222c      	movs	r2, #44	; 0x2c
   21c80:	2100      	movs	r1, #0
   21c82:	0018      	movs	r0, r3
   21c84:	4b08      	ldr	r3, [pc, #32]	; (21ca8 <hif_init+0x34>)
   21c86:	4798      	blx	r3
	nm_bsp_register_isr(isr);
   21c88:	4b08      	ldr	r3, [pc, #32]	; (21cac <hif_init+0x38>)
   21c8a:	0018      	movs	r0, r3
   21c8c:	4b08      	ldr	r3, [pc, #32]	; (21cb0 <hif_init+0x3c>)
   21c8e:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_HIF,m2m_hif_cb);
   21c90:	4b08      	ldr	r3, [pc, #32]	; (21cb4 <hif_init+0x40>)
   21c92:	0019      	movs	r1, r3
   21c94:	2003      	movs	r0, #3
   21c96:	4b08      	ldr	r3, [pc, #32]	; (21cb8 <hif_init+0x44>)
   21c98:	4798      	blx	r3
	return M2M_SUCCESS;
   21c9a:	2300      	movs	r3, #0
}
   21c9c:	0018      	movs	r0, r3
   21c9e:	46bd      	mov	sp, r7
   21ca0:	b002      	add	sp, #8
   21ca2:	bd80      	pop	{r7, pc}
   21ca4:	20005b24 	.word	0x20005b24
   21ca8:	00021a5d 	.word	0x00021a5d
   21cac:	00021ad9 	.word	0x00021ad9
   21cb0:	00021199 	.word	0x00021199
   21cb4:	00021b69 	.word	0x00021b69
   21cb8:	00022759 	.word	0x00022759

00021cbc <hif_send>:
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_send(uint8 u8Gid,uint8 u8Opcode,uint8 *pu8CtrlBuf,uint16 u16CtrlBufSize,
			   uint8 *pu8DataBuf,uint16 u16DataSize, uint16 u16DataOffset)
{
   21cbc:	b590      	push	{r4, r7, lr}
   21cbe:	b089      	sub	sp, #36	; 0x24
   21cc0:	af00      	add	r7, sp, #0
   21cc2:	0004      	movs	r4, r0
   21cc4:	0008      	movs	r0, r1
   21cc6:	603a      	str	r2, [r7, #0]
   21cc8:	0019      	movs	r1, r3
   21cca:	1dfb      	adds	r3, r7, #7
   21ccc:	1c22      	adds	r2, r4, #0
   21cce:	701a      	strb	r2, [r3, #0]
   21cd0:	1dbb      	adds	r3, r7, #6
   21cd2:	1c02      	adds	r2, r0, #0
   21cd4:	701a      	strb	r2, [r3, #0]
   21cd6:	1d3b      	adds	r3, r7, #4
   21cd8:	1c0a      	adds	r2, r1, #0
   21cda:	801a      	strh	r2, [r3, #0]
	sint8		ret = M2M_ERR_SEND;
   21cdc:	231f      	movs	r3, #31
   21cde:	18fb      	adds	r3, r7, r3
   21ce0:	22ff      	movs	r2, #255	; 0xff
   21ce2:	701a      	strb	r2, [r3, #0]
	volatile tstrHifHdr	strHif;

	strHif.u8Opcode		= u8Opcode&(~NBIT7);
   21ce4:	1dbb      	adds	r3, r7, #6
   21ce6:	781b      	ldrb	r3, [r3, #0]
   21ce8:	227f      	movs	r2, #127	; 0x7f
   21cea:	4013      	ands	r3, r2
   21cec:	b2da      	uxtb	r2, r3
   21cee:	2318      	movs	r3, #24
   21cf0:	18fb      	adds	r3, r7, r3
   21cf2:	705a      	strb	r2, [r3, #1]
	strHif.u8Gid		= u8Gid;
   21cf4:	2318      	movs	r3, #24
   21cf6:	18fb      	adds	r3, r7, r3
   21cf8:	1dfa      	adds	r2, r7, #7
   21cfa:	7812      	ldrb	r2, [r2, #0]
   21cfc:	701a      	strb	r2, [r3, #0]
	strHif.u16Length	= M2M_HIF_HDR_OFFSET;
   21cfe:	2318      	movs	r3, #24
   21d00:	18fb      	adds	r3, r7, r3
   21d02:	2208      	movs	r2, #8
   21d04:	805a      	strh	r2, [r3, #2]
	if(pu8DataBuf != NULL)
   21d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   21d08:	2b00      	cmp	r3, #0
   21d0a:	d011      	beq.n	21d30 <hif_send+0x74>
	{
		strHif.u16Length += u16DataOffset + u16DataSize;
   21d0c:	2318      	movs	r3, #24
   21d0e:	18fb      	adds	r3, r7, r3
   21d10:	885b      	ldrh	r3, [r3, #2]
   21d12:	b29a      	uxth	r2, r3
   21d14:	2338      	movs	r3, #56	; 0x38
   21d16:	18f9      	adds	r1, r7, r3
   21d18:	2334      	movs	r3, #52	; 0x34
   21d1a:	18fb      	adds	r3, r7, r3
   21d1c:	8809      	ldrh	r1, [r1, #0]
   21d1e:	881b      	ldrh	r3, [r3, #0]
   21d20:	18cb      	adds	r3, r1, r3
   21d22:	b29b      	uxth	r3, r3
   21d24:	18d3      	adds	r3, r2, r3
   21d26:	b29a      	uxth	r2, r3
   21d28:	2318      	movs	r3, #24
   21d2a:	18fb      	adds	r3, r7, r3
   21d2c:	805a      	strh	r2, [r3, #2]
   21d2e:	e00a      	b.n	21d46 <hif_send+0x8a>
	}
	else
	{
		strHif.u16Length += u16CtrlBufSize;
   21d30:	2318      	movs	r3, #24
   21d32:	18fb      	adds	r3, r7, r3
   21d34:	885b      	ldrh	r3, [r3, #2]
   21d36:	b29a      	uxth	r2, r3
   21d38:	1d3b      	adds	r3, r7, #4
   21d3a:	881b      	ldrh	r3, [r3, #0]
   21d3c:	18d3      	adds	r3, r2, r3
   21d3e:	b29a      	uxth	r2, r3
   21d40:	2318      	movs	r3, #24
   21d42:	18fb      	adds	r3, r7, r3
   21d44:	805a      	strh	r2, [r3, #2]
	}
	ret = hif_chip_wake();
   21d46:	231f      	movs	r3, #31
   21d48:	18fc      	adds	r4, r7, r3
   21d4a:	4bb2      	ldr	r3, [pc, #712]	; (22014 <hif_send+0x358>)
   21d4c:	4798      	blx	r3
   21d4e:	0003      	movs	r3, r0
   21d50:	7023      	strb	r3, [r4, #0]
	if(ret == M2M_SUCCESS)
   21d52:	231f      	movs	r3, #31
   21d54:	18fb      	adds	r3, r7, r3
   21d56:	781b      	ldrb	r3, [r3, #0]
   21d58:	b25b      	sxtb	r3, r3
   21d5a:	2b00      	cmp	r3, #0
   21d5c:	d000      	beq.n	21d60 <hif_send+0xa4>
   21d5e:	e129      	b.n	21fb4 <hif_send+0x2f8>
	{
		volatile uint32 reg, dma_addr = 0;
   21d60:	2300      	movs	r3, #0
   21d62:	613b      	str	r3, [r7, #16]
		volatile uint16 cnt = 0;
   21d64:	230e      	movs	r3, #14
   21d66:	18fb      	adds	r3, r7, r3
   21d68:	2200      	movs	r2, #0
   21d6a:	801a      	strh	r2, [r3, #0]
//#define OPTIMIZE_BUS 
/*please define in firmware also*/
#ifndef OPTIMIZE_BUS
		reg = 0UL;
   21d6c:	2300      	movs	r3, #0
   21d6e:	617b      	str	r3, [r7, #20]
		reg |= (uint32)u8Gid;
   21d70:	1dfb      	adds	r3, r7, #7
   21d72:	781a      	ldrb	r2, [r3, #0]
   21d74:	697b      	ldr	r3, [r7, #20]
   21d76:	4313      	orrs	r3, r2
   21d78:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)u8Opcode<<8);
   21d7a:	1dbb      	adds	r3, r7, #6
   21d7c:	781b      	ldrb	r3, [r3, #0]
   21d7e:	021a      	lsls	r2, r3, #8
   21d80:	697b      	ldr	r3, [r7, #20]
   21d82:	4313      	orrs	r3, r2
   21d84:	617b      	str	r3, [r7, #20]
		reg |= ((uint32)strHif.u16Length<<16);
   21d86:	2318      	movs	r3, #24
   21d88:	18fb      	adds	r3, r7, r3
   21d8a:	885b      	ldrh	r3, [r3, #2]
   21d8c:	b29b      	uxth	r3, r3
   21d8e:	041a      	lsls	r2, r3, #16
   21d90:	697b      	ldr	r3, [r7, #20]
   21d92:	4313      	orrs	r3, r2
   21d94:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(NMI_STATE_REG,reg);
   21d96:	697b      	ldr	r3, [r7, #20]
   21d98:	221f      	movs	r2, #31
   21d9a:	18bc      	adds	r4, r7, r2
   21d9c:	4a9e      	ldr	r2, [pc, #632]	; (22018 <hif_send+0x35c>)
   21d9e:	0019      	movs	r1, r3
   21da0:	0010      	movs	r0, r2
   21da2:	4b9e      	ldr	r3, [pc, #632]	; (2201c <hif_send+0x360>)
   21da4:	4798      	blx	r3
   21da6:	0003      	movs	r3, r0
   21da8:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   21daa:	231f      	movs	r3, #31
   21dac:	18fb      	adds	r3, r7, r3
   21dae:	781b      	ldrb	r3, [r3, #0]
   21db0:	b25b      	sxtb	r3, r3
   21db2:	2b00      	cmp	r3, #0
   21db4:	d000      	beq.n	21db8 <hif_send+0xfc>
   21db6:	e119      	b.n	21fec <hif_send+0x330>

		reg = 0UL;
   21db8:	2300      	movs	r3, #0
   21dba:	617b      	str	r3, [r7, #20]
		reg |= NBIT1;
   21dbc:	697b      	ldr	r3, [r7, #20]
   21dbe:	2202      	movs	r2, #2
   21dc0:	4313      	orrs	r3, r2
   21dc2:	617b      	str	r3, [r7, #20]
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
   21dc4:	697b      	ldr	r3, [r7, #20]
   21dc6:	221f      	movs	r2, #31
   21dc8:	18bc      	adds	r4, r7, r2
   21dca:	4a95      	ldr	r2, [pc, #596]	; (22020 <hif_send+0x364>)
   21dcc:	0019      	movs	r1, r3
   21dce:	0010      	movs	r0, r2
   21dd0:	4b92      	ldr	r3, [pc, #584]	; (2201c <hif_send+0x360>)
   21dd2:	4798      	blx	r3
   21dd4:	0003      	movs	r3, r0
   21dd6:	7023      	strb	r3, [r4, #0]
		if(M2M_SUCCESS != ret) goto ERR1;
   21dd8:	231f      	movs	r3, #31
   21dda:	18fb      	adds	r3, r7, r3
   21ddc:	781b      	ldrb	r3, [r3, #0]
   21dde:	b25b      	sxtb	r3, r3
   21de0:	2b00      	cmp	r3, #0
   21de2:	d000      	beq.n	21de6 <hif_send+0x12a>
   21de4:	e104      	b.n	21ff0 <hif_send+0x334>
		reg |= (u8Gid == M2M_REQ_GROUP_IP) ? (NBIT3):(0); /*IP = 1 or non IP*/
		reg |= ((uint32)strHif.u16Length << 4); /*length of pkt max = 4096*/
		ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
		if(M2M_SUCCESS != ret) goto ERR1;
#endif
		dma_addr = 0;
   21de6:	2300      	movs	r3, #0
   21de8:	613b      	str	r3, [r7, #16]
		
		for(cnt = 0; cnt < 1000; cnt ++)
   21dea:	230e      	movs	r3, #14
   21dec:	18fb      	adds	r3, r7, r3
   21dee:	2200      	movs	r2, #0
   21df0:	801a      	strh	r2, [r3, #0]
   21df2:	e050      	b.n	21e96 <hif_send+0x1da>
		{
			ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2,(uint32 *)&reg);
   21df4:	231f      	movs	r3, #31
   21df6:	18fc      	adds	r4, r7, r3
   21df8:	2314      	movs	r3, #20
   21dfa:	18fb      	adds	r3, r7, r3
   21dfc:	4a88      	ldr	r2, [pc, #544]	; (22020 <hif_send+0x364>)
   21dfe:	0019      	movs	r1, r3
   21e00:	0010      	movs	r0, r2
   21e02:	4b88      	ldr	r3, [pc, #544]	; (22024 <hif_send+0x368>)
   21e04:	4798      	blx	r3
   21e06:	0003      	movs	r3, r0
   21e08:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS) break;
   21e0a:	231f      	movs	r3, #31
   21e0c:	18fb      	adds	r3, r7, r3
   21e0e:	781b      	ldrb	r3, [r3, #0]
   21e10:	b25b      	sxtb	r3, r3
   21e12:	2b00      	cmp	r3, #0
   21e14:	d147      	bne.n	21ea6 <hif_send+0x1ea>
			/*
			 * If it takes too long to get a response, the slow down to 
			 * avoid back-to-back register read operations.
			 */
			if(cnt >= 500) {
   21e16:	230e      	movs	r3, #14
   21e18:	18fb      	adds	r3, r7, r3
   21e1a:	881b      	ldrh	r3, [r3, #0]
   21e1c:	b29a      	uxth	r2, r3
   21e1e:	23f4      	movs	r3, #244	; 0xf4
   21e20:	33ff      	adds	r3, #255	; 0xff
   21e22:	429a      	cmp	r2, r3
   21e24:	d916      	bls.n	21e54 <hif_send+0x198>
				if(cnt < 501) {
   21e26:	230e      	movs	r3, #14
   21e28:	18fb      	adds	r3, r7, r3
   21e2a:	881b      	ldrh	r3, [r3, #0]
   21e2c:	b29a      	uxth	r2, r3
   21e2e:	23fa      	movs	r3, #250	; 0xfa
   21e30:	005b      	lsls	r3, r3, #1
   21e32:	429a      	cmp	r2, r3
   21e34:	d80b      	bhi.n	21e4e <hif_send+0x192>
					M2M_INFO("Slowing down...\n");
   21e36:	4b7c      	ldr	r3, [pc, #496]	; (22028 <hif_send+0x36c>)
   21e38:	0018      	movs	r0, r3
   21e3a:	4b7c      	ldr	r3, [pc, #496]	; (2202c <hif_send+0x370>)
   21e3c:	4798      	blx	r3
   21e3e:	4b7c      	ldr	r3, [pc, #496]	; (22030 <hif_send+0x374>)
   21e40:	0018      	movs	r0, r3
   21e42:	4b7a      	ldr	r3, [pc, #488]	; (2202c <hif_send+0x370>)
   21e44:	4798      	blx	r3
   21e46:	4b7b      	ldr	r3, [pc, #492]	; (22034 <hif_send+0x378>)
   21e48:	0018      	movs	r0, r3
   21e4a:	4b78      	ldr	r3, [pc, #480]	; (2202c <hif_send+0x370>)
   21e4c:	4798      	blx	r3
				}
				nm_bsp_sleep(1);
   21e4e:	2001      	movs	r0, #1
   21e50:	4b79      	ldr	r3, [pc, #484]	; (22038 <hif_send+0x37c>)
   21e52:	4798      	blx	r3
			}
			if (!(reg & NBIT1))
   21e54:	697b      	ldr	r3, [r7, #20]
   21e56:	2202      	movs	r2, #2
   21e58:	4013      	ands	r3, r2
   21e5a:	d113      	bne.n	21e84 <hif_send+0x1c8>
			{
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4,(uint32 *)&dma_addr);
   21e5c:	231f      	movs	r3, #31
   21e5e:	18fc      	adds	r4, r7, r3
   21e60:	2310      	movs	r3, #16
   21e62:	18fb      	adds	r3, r7, r3
   21e64:	4a75      	ldr	r2, [pc, #468]	; (2203c <hif_send+0x380>)
   21e66:	0019      	movs	r1, r3
   21e68:	0010      	movs	r0, r2
   21e6a:	4b6e      	ldr	r3, [pc, #440]	; (22024 <hif_send+0x368>)
   21e6c:	4798      	blx	r3
   21e6e:	0003      	movs	r3, r0
   21e70:	7023      	strb	r3, [r4, #0]
				if(ret != M2M_SUCCESS) {
   21e72:	231f      	movs	r3, #31
   21e74:	18fb      	adds	r3, r7, r3
   21e76:	781b      	ldrb	r3, [r3, #0]
   21e78:	b25b      	sxtb	r3, r3
   21e7a:	2b00      	cmp	r3, #0
   21e7c:	d015      	beq.n	21eaa <hif_send+0x1ee>
					/*in case of read error clear the DMA address and return error*/
					dma_addr = 0;
   21e7e:	2300      	movs	r3, #0
   21e80:	613b      	str	r3, [r7, #16]
					goto ERR1;
   21e82:	e0bc      	b.n	21ffe <hif_send+0x342>
		for(cnt = 0; cnt < 1000; cnt ++)
   21e84:	230e      	movs	r3, #14
   21e86:	18fb      	adds	r3, r7, r3
   21e88:	881b      	ldrh	r3, [r3, #0]
   21e8a:	b29b      	uxth	r3, r3
   21e8c:	3301      	adds	r3, #1
   21e8e:	b29a      	uxth	r2, r3
   21e90:	230e      	movs	r3, #14
   21e92:	18fb      	adds	r3, r7, r3
   21e94:	801a      	strh	r2, [r3, #0]
   21e96:	230e      	movs	r3, #14
   21e98:	18fb      	adds	r3, r7, r3
   21e9a:	881b      	ldrh	r3, [r3, #0]
   21e9c:	b29b      	uxth	r3, r3
   21e9e:	4a68      	ldr	r2, [pc, #416]	; (22040 <hif_send+0x384>)
   21ea0:	4293      	cmp	r3, r2
   21ea2:	d9a7      	bls.n	21df4 <hif_send+0x138>
   21ea4:	e002      	b.n	21eac <hif_send+0x1f0>
			if(ret != M2M_SUCCESS) break;
   21ea6:	46c0      	nop			; (mov r8, r8)
   21ea8:	e000      	b.n	21eac <hif_send+0x1f0>
				}
				/*in case of success break */
				break;
   21eaa:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (dma_addr != 0)
   21eac:	693b      	ldr	r3, [r7, #16]
   21eae:	2b00      	cmp	r3, #0
   21eb0:	d100      	bne.n	21eb4 <hif_send+0x1f8>
   21eb2:	e074      	b.n	21f9e <hif_send+0x2e2>
		{
			volatile uint32	u32CurrAddr;
			u32CurrAddr = dma_addr;
   21eb4:	693b      	ldr	r3, [r7, #16]
   21eb6:	60bb      	str	r3, [r7, #8]
			strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
   21eb8:	2318      	movs	r3, #24
   21eba:	18fb      	adds	r3, r7, r3
   21ebc:	885b      	ldrh	r3, [r3, #2]
   21ebe:	b29a      	uxth	r2, r3
   21ec0:	2318      	movs	r3, #24
   21ec2:	18fb      	adds	r3, r7, r3
   21ec4:	805a      	strh	r2, [r3, #2]
			ret = nm_write_block(u32CurrAddr, (uint8*)&strHif, M2M_HIF_HDR_OFFSET);
   21ec6:	68bb      	ldr	r3, [r7, #8]
   21ec8:	221f      	movs	r2, #31
   21eca:	18bc      	adds	r4, r7, r2
   21ecc:	2218      	movs	r2, #24
   21ece:	18b9      	adds	r1, r7, r2
   21ed0:	2208      	movs	r2, #8
   21ed2:	0018      	movs	r0, r3
   21ed4:	4b5b      	ldr	r3, [pc, #364]	; (22044 <hif_send+0x388>)
   21ed6:	4798      	blx	r3
   21ed8:	0003      	movs	r3, r0
   21eda:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   21edc:	231f      	movs	r3, #31
   21ede:	18fb      	adds	r3, r7, r3
   21ee0:	781b      	ldrb	r3, [r3, #0]
   21ee2:	b25b      	sxtb	r3, r3
   21ee4:	2b00      	cmp	r3, #0
   21ee6:	d000      	beq.n	21eea <hif_send+0x22e>
   21ee8:	e084      	b.n	21ff4 <hif_send+0x338>
			u32CurrAddr += M2M_HIF_HDR_OFFSET;
   21eea:	68bb      	ldr	r3, [r7, #8]
   21eec:	3308      	adds	r3, #8
   21eee:	60bb      	str	r3, [r7, #8]
			if(pu8CtrlBuf != NULL)
   21ef0:	683b      	ldr	r3, [r7, #0]
   21ef2:	2b00      	cmp	r3, #0
   21ef4:	d016      	beq.n	21f24 <hif_send+0x268>
			{
				ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
   21ef6:	68b8      	ldr	r0, [r7, #8]
   21ef8:	1d3b      	adds	r3, r7, #4
   21efa:	881a      	ldrh	r2, [r3, #0]
   21efc:	231f      	movs	r3, #31
   21efe:	18fc      	adds	r4, r7, r3
   21f00:	683b      	ldr	r3, [r7, #0]
   21f02:	0019      	movs	r1, r3
   21f04:	4b4f      	ldr	r3, [pc, #316]	; (22044 <hif_send+0x388>)
   21f06:	4798      	blx	r3
   21f08:	0003      	movs	r3, r0
   21f0a:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   21f0c:	231f      	movs	r3, #31
   21f0e:	18fb      	adds	r3, r7, r3
   21f10:	781b      	ldrb	r3, [r3, #0]
   21f12:	b25b      	sxtb	r3, r3
   21f14:	2b00      	cmp	r3, #0
   21f16:	d000      	beq.n	21f1a <hif_send+0x25e>
   21f18:	e06e      	b.n	21ff8 <hif_send+0x33c>
				u32CurrAddr += u16CtrlBufSize;
   21f1a:	1d3b      	adds	r3, r7, #4
   21f1c:	881a      	ldrh	r2, [r3, #0]
   21f1e:	68bb      	ldr	r3, [r7, #8]
   21f20:	18d3      	adds	r3, r2, r3
   21f22:	60bb      	str	r3, [r7, #8]
			}
			if(pu8DataBuf != NULL)
   21f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   21f26:	2b00      	cmp	r3, #0
   21f28:	d021      	beq.n	21f6e <hif_send+0x2b2>
			{
				u32CurrAddr += (u16DataOffset - u16CtrlBufSize);
   21f2a:	2338      	movs	r3, #56	; 0x38
   21f2c:	18fb      	adds	r3, r7, r3
   21f2e:	881a      	ldrh	r2, [r3, #0]
   21f30:	1d3b      	adds	r3, r7, #4
   21f32:	881b      	ldrh	r3, [r3, #0]
   21f34:	1ad3      	subs	r3, r2, r3
   21f36:	001a      	movs	r2, r3
   21f38:	68bb      	ldr	r3, [r7, #8]
   21f3a:	18d3      	adds	r3, r2, r3
   21f3c:	60bb      	str	r3, [r7, #8]
				ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
   21f3e:	68b8      	ldr	r0, [r7, #8]
   21f40:	2334      	movs	r3, #52	; 0x34
   21f42:	18fb      	adds	r3, r7, r3
   21f44:	881a      	ldrh	r2, [r3, #0]
   21f46:	231f      	movs	r3, #31
   21f48:	18fc      	adds	r4, r7, r3
   21f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   21f4c:	0019      	movs	r1, r3
   21f4e:	4b3d      	ldr	r3, [pc, #244]	; (22044 <hif_send+0x388>)
   21f50:	4798      	blx	r3
   21f52:	0003      	movs	r3, r0
   21f54:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret) goto ERR1;
   21f56:	231f      	movs	r3, #31
   21f58:	18fb      	adds	r3, r7, r3
   21f5a:	781b      	ldrb	r3, [r3, #0]
   21f5c:	b25b      	sxtb	r3, r3
   21f5e:	2b00      	cmp	r3, #0
   21f60:	d14c      	bne.n	21ffc <hif_send+0x340>
				u32CurrAddr += u16DataSize;
   21f62:	2334      	movs	r3, #52	; 0x34
   21f64:	18fb      	adds	r3, r7, r3
   21f66:	881a      	ldrh	r2, [r3, #0]
   21f68:	68bb      	ldr	r3, [r7, #8]
   21f6a:	18d3      	adds	r3, r2, r3
   21f6c:	60bb      	str	r3, [r7, #8]
			}

			reg = dma_addr << 2;
   21f6e:	693b      	ldr	r3, [r7, #16]
   21f70:	009b      	lsls	r3, r3, #2
   21f72:	617b      	str	r3, [r7, #20]
			reg |= NBIT1;
   21f74:	697b      	ldr	r3, [r7, #20]
   21f76:	2202      	movs	r2, #2
   21f78:	4313      	orrs	r3, r2
   21f7a:	617b      	str	r3, [r7, #20]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
   21f7c:	697b      	ldr	r3, [r7, #20]
   21f7e:	221f      	movs	r2, #31
   21f80:	18bc      	adds	r4, r7, r2
   21f82:	4a31      	ldr	r2, [pc, #196]	; (22048 <hif_send+0x38c>)
   21f84:	0019      	movs	r1, r3
   21f86:	0010      	movs	r0, r2
   21f88:	4b24      	ldr	r3, [pc, #144]	; (2201c <hif_send+0x360>)
   21f8a:	4798      	blx	r3
   21f8c:	0003      	movs	r3, r0
   21f8e:	7023      	strb	r3, [r4, #0]
			if(M2M_SUCCESS != ret) goto ERR1;
   21f90:	231f      	movs	r3, #31
   21f92:	18fb      	adds	r3, r7, r3
   21f94:	781b      	ldrb	r3, [r3, #0]
   21f96:	b25b      	sxtb	r3, r3
   21f98:	2b00      	cmp	r3, #0
   21f9a:	d01c      	beq.n	21fd6 <hif_send+0x31a>
   21f9c:	e02f      	b.n	21ffe <hif_send+0x342>
		}
		else
		{
			ret = hif_chip_sleep();
   21f9e:	231f      	movs	r3, #31
   21fa0:	18fc      	adds	r4, r7, r3
   21fa2:	4b2a      	ldr	r3, [pc, #168]	; (2204c <hif_send+0x390>)
   21fa4:	4798      	blx	r3
   21fa6:	0003      	movs	r3, r0
   21fa8:	7023      	strb	r3, [r4, #0]
			M2M_DBG("Failed to alloc rx size %d\r",ret);
			ret = M2M_ERR_MEM_ALLOC;
   21faa:	231f      	movs	r3, #31
   21fac:	18fb      	adds	r3, r7, r3
   21fae:	22fd      	movs	r2, #253	; 0xfd
   21fb0:	701a      	strb	r2, [r3, #0]
			goto ERR2;
   21fb2:	e026      	b.n	22002 <hif_send+0x346>
		}

	}
	else
	{
		M2M_ERR("(HIF)Fail to wakup the chip\n");
   21fb4:	2398      	movs	r3, #152	; 0x98
   21fb6:	33ff      	adds	r3, #255	; 0xff
   21fb8:	001a      	movs	r2, r3
   21fba:	4925      	ldr	r1, [pc, #148]	; (22050 <hif_send+0x394>)
   21fbc:	4b25      	ldr	r3, [pc, #148]	; (22054 <hif_send+0x398>)
   21fbe:	0018      	movs	r0, r3
   21fc0:	4b1a      	ldr	r3, [pc, #104]	; (2202c <hif_send+0x370>)
   21fc2:	4798      	blx	r3
   21fc4:	4b24      	ldr	r3, [pc, #144]	; (22058 <hif_send+0x39c>)
   21fc6:	0018      	movs	r0, r3
   21fc8:	4b18      	ldr	r3, [pc, #96]	; (2202c <hif_send+0x370>)
   21fca:	4798      	blx	r3
   21fcc:	4b19      	ldr	r3, [pc, #100]	; (22034 <hif_send+0x378>)
   21fce:	0018      	movs	r0, r3
   21fd0:	4b16      	ldr	r3, [pc, #88]	; (2202c <hif_send+0x370>)
   21fd2:	4798      	blx	r3
		goto ERR2;
   21fd4:	e015      	b.n	22002 <hif_send+0x346>
	}
	/*actual sleep ret = M2M_SUCCESS*/
 	ret = hif_chip_sleep();
   21fd6:	231f      	movs	r3, #31
   21fd8:	18fc      	adds	r4, r7, r3
   21fda:	4b1c      	ldr	r3, [pc, #112]	; (2204c <hif_send+0x390>)
   21fdc:	4798      	blx	r3
   21fde:	0003      	movs	r3, r0
   21fe0:	7023      	strb	r3, [r4, #0]
	return ret;
   21fe2:	231f      	movs	r3, #31
   21fe4:	18fb      	adds	r3, r7, r3
   21fe6:	781b      	ldrb	r3, [r3, #0]
   21fe8:	b25b      	sxtb	r3, r3
   21fea:	e00e      	b.n	2200a <hif_send+0x34e>
		if(M2M_SUCCESS != ret) goto ERR1;
   21fec:	46c0      	nop			; (mov r8, r8)
   21fee:	e006      	b.n	21ffe <hif_send+0x342>
		if(M2M_SUCCESS != ret) goto ERR1;
   21ff0:	46c0      	nop			; (mov r8, r8)
   21ff2:	e004      	b.n	21ffe <hif_send+0x342>
			if(M2M_SUCCESS != ret) goto ERR1;
   21ff4:	46c0      	nop			; (mov r8, r8)
   21ff6:	e002      	b.n	21ffe <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   21ff8:	46c0      	nop			; (mov r8, r8)
   21ffa:	e000      	b.n	21ffe <hif_send+0x342>
				if(M2M_SUCCESS != ret) goto ERR1;
   21ffc:	46c0      	nop			; (mov r8, r8)
ERR1:
	/*reset the count but no actual sleep as it already bus error*/
	hif_chip_sleep_sc();
   21ffe:	4b17      	ldr	r3, [pc, #92]	; (2205c <hif_send+0x3a0>)
   22000:	4798      	blx	r3
ERR2:
	/*logical error*/
	return ret;
   22002:	231f      	movs	r3, #31
   22004:	18fb      	adds	r3, r7, r3
   22006:	781b      	ldrb	r3, [r3, #0]
   22008:	b25b      	sxtb	r3, r3
}
   2200a:	0018      	movs	r0, r3
   2200c:	46bd      	mov	sp, r7
   2200e:	b009      	add	sp, #36	; 0x24
   22010:	bd90      	pop	{r4, r7, pc}
   22012:	46c0      	nop			; (mov r8, r8)
   22014:	00021b85 	.word	0x00021b85
   22018:	0000108c 	.word	0x0000108c
   2201c:	00023b11 	.word	0x00023b11
   22020:	00001078 	.word	0x00001078
   22024:	00023aed 	.word	0x00023aed
   22028:	00039484 	.word	0x00039484
   2202c:	0001ed29 	.word	0x0001ed29
   22030:	00039490 	.word	0x00039490
   22034:	000394a4 	.word	0x000394a4
   22038:	0002117d 	.word	0x0002117d
   2203c:	00150400 	.word	0x00150400
   22040:	000003e7 	.word	0x000003e7
   22044:	00023c59 	.word	0x00023c59
   22048:	0000106c 	.word	0x0000106c
   2204c:	00021c1d 	.word	0x00021c1d
   22050:	000397ac 	.word	0x000397ac
   22054:	000394a8 	.word	0x000394a8
   22058:	000394bc 	.word	0x000394bc
   2205c:	00021bf5 	.word	0x00021bf5

00022060 <hif_isr>:
*	@date	15 July 2012
*	@return	1 in case of interrupt received else 0 will be returned
*	@version	1.0
*/
static sint8 hif_isr(void)
{
   22060:	b590      	push	{r4, r7, lr}
   22062:	b087      	sub	sp, #28
   22064:	af02      	add	r7, sp, #8
	sint8 ret = M2M_SUCCESS;
   22066:	230f      	movs	r3, #15
   22068:	18fb      	adds	r3, r7, r3
   2206a:	2200      	movs	r2, #0
   2206c:	701a      	strb	r2, [r3, #0]
	uint32 reg;
	volatile tstrHifHdr strHif;

	ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
   2206e:	230f      	movs	r3, #15
   22070:	18fc      	adds	r4, r7, r3
   22072:	2308      	movs	r3, #8
   22074:	18fb      	adds	r3, r7, r3
   22076:	4adc      	ldr	r2, [pc, #880]	; (223e8 <hif_isr+0x388>)
   22078:	0019      	movs	r1, r3
   2207a:	0010      	movs	r0, r2
   2207c:	4bdb      	ldr	r3, [pc, #876]	; (223ec <hif_isr+0x38c>)
   2207e:	4798      	blx	r3
   22080:	0003      	movs	r3, r0
   22082:	7023      	strb	r3, [r4, #0]
	if(M2M_SUCCESS == ret)
   22084:	230f      	movs	r3, #15
   22086:	18fb      	adds	r3, r7, r3
   22088:	781b      	ldrb	r3, [r3, #0]
   2208a:	b25b      	sxtb	r3, r3
   2208c:	2b00      	cmp	r3, #0
   2208e:	d000      	beq.n	22092 <hif_isr+0x32>
   22090:	e21e      	b.n	224d0 <hif_isr+0x470>
	{
		if(reg & 0x1)	/* New interrupt has been received */
   22092:	68bb      	ldr	r3, [r7, #8]
   22094:	2201      	movs	r2, #1
   22096:	4013      	ands	r3, r2
   22098:	d100      	bne.n	2209c <hif_isr+0x3c>
   2209a:	e204      	b.n	224a6 <hif_isr+0x446>
		{
			uint16 size;

			nm_bsp_interrupt_ctrl(0);
   2209c:	2000      	movs	r0, #0
   2209e:	4bd4      	ldr	r3, [pc, #848]	; (223f0 <hif_isr+0x390>)
   220a0:	4798      	blx	r3
			/*Clearing RX interrupt*/
			reg &= ~NBIT0;
   220a2:	68bb      	ldr	r3, [r7, #8]
   220a4:	2201      	movs	r2, #1
   220a6:	4393      	bics	r3, r2
   220a8:	60bb      	str	r3, [r7, #8]
			ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0,reg);
   220aa:	68bb      	ldr	r3, [r7, #8]
   220ac:	220f      	movs	r2, #15
   220ae:	18bc      	adds	r4, r7, r2
   220b0:	4acd      	ldr	r2, [pc, #820]	; (223e8 <hif_isr+0x388>)
   220b2:	0019      	movs	r1, r3
   220b4:	0010      	movs	r0, r2
   220b6:	4bcf      	ldr	r3, [pc, #828]	; (223f4 <hif_isr+0x394>)
   220b8:	4798      	blx	r3
   220ba:	0003      	movs	r3, r0
   220bc:	7023      	strb	r3, [r4, #0]
			if(ret != M2M_SUCCESS)goto ERR1;
   220be:	230f      	movs	r3, #15
   220c0:	18fb      	adds	r3, r7, r3
   220c2:	781b      	ldrb	r3, [r3, #0]
   220c4:	b25b      	sxtb	r3, r3
   220c6:	2b00      	cmp	r3, #0
   220c8:	d000      	beq.n	220cc <hif_isr+0x6c>
   220ca:	e210      	b.n	224ee <hif_isr+0x48e>
			gstrHifCxt.u8HifRXDone = 1;
   220cc:	4bca      	ldr	r3, [pc, #808]	; (223f8 <hif_isr+0x398>)
   220ce:	2201      	movs	r2, #1
   220d0:	709a      	strb	r2, [r3, #2]
			size = (uint16)((reg >> 2) & 0xfff);
   220d2:	68bb      	ldr	r3, [r7, #8]
   220d4:	089b      	lsrs	r3, r3, #2
   220d6:	b29a      	uxth	r2, r3
   220d8:	230c      	movs	r3, #12
   220da:	18fb      	adds	r3, r7, r3
   220dc:	0512      	lsls	r2, r2, #20
   220de:	0d12      	lsrs	r2, r2, #20
   220e0:	801a      	strh	r2, [r3, #0]
			if (size > 0) {
   220e2:	230c      	movs	r3, #12
   220e4:	18fb      	adds	r3, r7, r3
   220e6:	881b      	ldrh	r3, [r3, #0]
   220e8:	2b00      	cmp	r3, #0
   220ea:	d100      	bne.n	220ee <hif_isr+0x8e>
   220ec:	e1c8      	b.n	22480 <hif_isr+0x420>
				uint32 address = 0;
   220ee:	2300      	movs	r3, #0
   220f0:	603b      	str	r3, [r7, #0]
				/**
				start bus transfer
				**/
				ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
   220f2:	230f      	movs	r3, #15
   220f4:	18fc      	adds	r4, r7, r3
   220f6:	003b      	movs	r3, r7
   220f8:	4ac0      	ldr	r2, [pc, #768]	; (223fc <hif_isr+0x39c>)
   220fa:	0019      	movs	r1, r3
   220fc:	0010      	movs	r0, r2
   220fe:	4bbb      	ldr	r3, [pc, #748]	; (223ec <hif_isr+0x38c>)
   22100:	4798      	blx	r3
   22102:	0003      	movs	r3, r0
   22104:	7023      	strb	r3, [r4, #0]
				if(M2M_SUCCESS != ret)
   22106:	230f      	movs	r3, #15
   22108:	18fb      	adds	r3, r7, r3
   2210a:	781b      	ldrb	r3, [r3, #0]
   2210c:	b25b      	sxtb	r3, r3
   2210e:	2b00      	cmp	r3, #0
   22110:	d012      	beq.n	22138 <hif_isr+0xd8>
				{
					M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
   22112:	23e4      	movs	r3, #228	; 0xe4
   22114:	005a      	lsls	r2, r3, #1
   22116:	49ba      	ldr	r1, [pc, #744]	; (22400 <hif_isr+0x3a0>)
   22118:	4bba      	ldr	r3, [pc, #744]	; (22404 <hif_isr+0x3a4>)
   2211a:	0018      	movs	r0, r3
   2211c:	4bba      	ldr	r3, [pc, #744]	; (22408 <hif_isr+0x3a8>)
   2211e:	4798      	blx	r3
   22120:	4bba      	ldr	r3, [pc, #744]	; (2240c <hif_isr+0x3ac>)
   22122:	0018      	movs	r0, r3
   22124:	4bb8      	ldr	r3, [pc, #736]	; (22408 <hif_isr+0x3a8>)
   22126:	4798      	blx	r3
   22128:	4bb9      	ldr	r3, [pc, #740]	; (22410 <hif_isr+0x3b0>)
   2212a:	0018      	movs	r0, r3
   2212c:	4bb6      	ldr	r3, [pc, #728]	; (22408 <hif_isr+0x3a8>)
   2212e:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   22130:	2001      	movs	r0, #1
   22132:	4baf      	ldr	r3, [pc, #700]	; (223f0 <hif_isr+0x390>)
   22134:	4798      	blx	r3
					goto ERR1;
   22136:	e1db      	b.n	224f0 <hif_isr+0x490>
				}
				gstrHifCxt.u32RxAddr = address;
   22138:	683a      	ldr	r2, [r7, #0]
   2213a:	4baf      	ldr	r3, [pc, #700]	; (223f8 <hif_isr+0x398>)
   2213c:	609a      	str	r2, [r3, #8]
				gstrHifCxt.u32RxSize = size;
   2213e:	230c      	movs	r3, #12
   22140:	18fb      	adds	r3, r7, r3
   22142:	881a      	ldrh	r2, [r3, #0]
   22144:	4bac      	ldr	r3, [pc, #688]	; (223f8 <hif_isr+0x398>)
   22146:	60da      	str	r2, [r3, #12]
				ret = nm_read_block(address, (uint8*)&strHif, sizeof(tstrHifHdr));
   22148:	683b      	ldr	r3, [r7, #0]
   2214a:	220f      	movs	r2, #15
   2214c:	18bc      	adds	r4, r7, r2
   2214e:	1d39      	adds	r1, r7, #4
   22150:	2204      	movs	r2, #4
   22152:	0018      	movs	r0, r3
   22154:	4baf      	ldr	r3, [pc, #700]	; (22414 <hif_isr+0x3b4>)
   22156:	4798      	blx	r3
   22158:	0003      	movs	r3, r0
   2215a:	7023      	strb	r3, [r4, #0]
				strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
   2215c:	1d3b      	adds	r3, r7, #4
   2215e:	885b      	ldrh	r3, [r3, #2]
   22160:	b29a      	uxth	r2, r3
   22162:	1d3b      	adds	r3, r7, #4
   22164:	805a      	strh	r2, [r3, #2]
				if(M2M_SUCCESS != ret)
   22166:	230f      	movs	r3, #15
   22168:	18fb      	adds	r3, r7, r3
   2216a:	781b      	ldrb	r3, [r3, #0]
   2216c:	b25b      	sxtb	r3, r3
   2216e:	2b00      	cmp	r3, #0
   22170:	d012      	beq.n	22198 <hif_isr+0x138>
				{
					M2M_ERR("(hif) address bus fail\n");
   22172:	23e9      	movs	r3, #233	; 0xe9
   22174:	005a      	lsls	r2, r3, #1
   22176:	49a2      	ldr	r1, [pc, #648]	; (22400 <hif_isr+0x3a0>)
   22178:	4ba2      	ldr	r3, [pc, #648]	; (22404 <hif_isr+0x3a4>)
   2217a:	0018      	movs	r0, r3
   2217c:	4ba2      	ldr	r3, [pc, #648]	; (22408 <hif_isr+0x3a8>)
   2217e:	4798      	blx	r3
   22180:	4ba5      	ldr	r3, [pc, #660]	; (22418 <hif_isr+0x3b8>)
   22182:	0018      	movs	r0, r3
   22184:	4ba0      	ldr	r3, [pc, #640]	; (22408 <hif_isr+0x3a8>)
   22186:	4798      	blx	r3
   22188:	4ba1      	ldr	r3, [pc, #644]	; (22410 <hif_isr+0x3b0>)
   2218a:	0018      	movs	r0, r3
   2218c:	4b9e      	ldr	r3, [pc, #632]	; (22408 <hif_isr+0x3a8>)
   2218e:	4798      	blx	r3
					nm_bsp_interrupt_ctrl(1);
   22190:	2001      	movs	r0, #1
   22192:	4b97      	ldr	r3, [pc, #604]	; (223f0 <hif_isr+0x390>)
   22194:	4798      	blx	r3
					goto ERR1;
   22196:	e1ab      	b.n	224f0 <hif_isr+0x490>
				}
				if(strHif.u16Length != size)
   22198:	1d3b      	adds	r3, r7, #4
   2219a:	885b      	ldrh	r3, [r3, #2]
   2219c:	b29b      	uxth	r3, r3
   2219e:	220c      	movs	r2, #12
   221a0:	18ba      	adds	r2, r7, r2
   221a2:	8812      	ldrh	r2, [r2, #0]
   221a4:	429a      	cmp	r2, r3
   221a6:	d02f      	beq.n	22208 <hif_isr+0x1a8>
				{
					if((size - strHif.u16Length) > 4)
   221a8:	230c      	movs	r3, #12
   221aa:	18fb      	adds	r3, r7, r3
   221ac:	881b      	ldrh	r3, [r3, #0]
   221ae:	1d3a      	adds	r2, r7, #4
   221b0:	8852      	ldrh	r2, [r2, #2]
   221b2:	b292      	uxth	r2, r2
   221b4:	1a9b      	subs	r3, r3, r2
   221b6:	2b04      	cmp	r3, #4
   221b8:	dd26      	ble.n	22208 <hif_isr+0x1a8>
					{
						M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
   221ba:	23dc      	movs	r3, #220	; 0xdc
   221bc:	33ff      	adds	r3, #255	; 0xff
   221be:	001a      	movs	r2, r3
   221c0:	498f      	ldr	r1, [pc, #572]	; (22400 <hif_isr+0x3a0>)
   221c2:	4b90      	ldr	r3, [pc, #576]	; (22404 <hif_isr+0x3a4>)
   221c4:	0018      	movs	r0, r3
   221c6:	4b90      	ldr	r3, [pc, #576]	; (22408 <hif_isr+0x3a8>)
   221c8:	4798      	blx	r3
   221ca:	230c      	movs	r3, #12
   221cc:	18fb      	adds	r3, r7, r3
   221ce:	8819      	ldrh	r1, [r3, #0]
   221d0:	1d3b      	adds	r3, r7, #4
   221d2:	885b      	ldrh	r3, [r3, #2]
   221d4:	b29b      	uxth	r3, r3
   221d6:	001a      	movs	r2, r3
   221d8:	1d3b      	adds	r3, r7, #4
   221da:	781b      	ldrb	r3, [r3, #0]
   221dc:	b2db      	uxtb	r3, r3
   221de:	001c      	movs	r4, r3
   221e0:	1d3b      	adds	r3, r7, #4
   221e2:	785b      	ldrb	r3, [r3, #1]
   221e4:	b2db      	uxtb	r3, r3
   221e6:	488d      	ldr	r0, [pc, #564]	; (2241c <hif_isr+0x3bc>)
   221e8:	9300      	str	r3, [sp, #0]
   221ea:	0023      	movs	r3, r4
   221ec:	4c86      	ldr	r4, [pc, #536]	; (22408 <hif_isr+0x3a8>)
   221ee:	47a0      	blx	r4
   221f0:	4b87      	ldr	r3, [pc, #540]	; (22410 <hif_isr+0x3b0>)
   221f2:	0018      	movs	r0, r3
   221f4:	4b84      	ldr	r3, [pc, #528]	; (22408 <hif_isr+0x3a8>)
   221f6:	4798      	blx	r3
							size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
						nm_bsp_interrupt_ctrl(1);
   221f8:	2001      	movs	r0, #1
   221fa:	4b7d      	ldr	r3, [pc, #500]	; (223f0 <hif_isr+0x390>)
   221fc:	4798      	blx	r3
						ret = M2M_ERR_BUS_FAIL;
   221fe:	230f      	movs	r3, #15
   22200:	18fb      	adds	r3, r7, r3
   22202:	22fa      	movs	r2, #250	; 0xfa
   22204:	701a      	strb	r2, [r3, #0]
						goto ERR1;
   22206:	e173      	b.n	224f0 <hif_isr+0x490>
					}
				}

				if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
   22208:	1d3b      	adds	r3, r7, #4
   2220a:	781b      	ldrb	r3, [r3, #0]
   2220c:	b2db      	uxtb	r3, r3
   2220e:	2b01      	cmp	r3, #1
   22210:	d122      	bne.n	22258 <hif_isr+0x1f8>
				{
					if(gstrHifCxt.pfWifiCb)
   22212:	4b79      	ldr	r3, [pc, #484]	; (223f8 <hif_isr+0x398>)
   22214:	691b      	ldr	r3, [r3, #16]
   22216:	2b00      	cmp	r3, #0
   22218:	d00d      	beq.n	22236 <hif_isr+0x1d6>
						gstrHifCxt.pfWifiCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2221a:	4b77      	ldr	r3, [pc, #476]	; (223f8 <hif_isr+0x398>)
   2221c:	691b      	ldr	r3, [r3, #16]
   2221e:	1d3a      	adds	r2, r7, #4
   22220:	7852      	ldrb	r2, [r2, #1]
   22222:	b2d0      	uxtb	r0, r2
   22224:	1d3a      	adds	r2, r7, #4
   22226:	8852      	ldrh	r2, [r2, #2]
   22228:	b292      	uxth	r2, r2
   2222a:	3a08      	subs	r2, #8
   2222c:	b291      	uxth	r1, r2
   2222e:	683a      	ldr	r2, [r7, #0]
   22230:	3208      	adds	r2, #8
   22232:	4798      	blx	r3
   22234:	e102      	b.n	2243c <hif_isr+0x3dc>
					else
						M2M_ERR("WIFI callback is not registered\n");
   22236:	23e8      	movs	r3, #232	; 0xe8
   22238:	33ff      	adds	r3, #255	; 0xff
   2223a:	001a      	movs	r2, r3
   2223c:	4970      	ldr	r1, [pc, #448]	; (22400 <hif_isr+0x3a0>)
   2223e:	4b71      	ldr	r3, [pc, #452]	; (22404 <hif_isr+0x3a4>)
   22240:	0018      	movs	r0, r3
   22242:	4b71      	ldr	r3, [pc, #452]	; (22408 <hif_isr+0x3a8>)
   22244:	4798      	blx	r3
   22246:	4b76      	ldr	r3, [pc, #472]	; (22420 <hif_isr+0x3c0>)
   22248:	0018      	movs	r0, r3
   2224a:	4b6f      	ldr	r3, [pc, #444]	; (22408 <hif_isr+0x3a8>)
   2224c:	4798      	blx	r3
   2224e:	4b70      	ldr	r3, [pc, #448]	; (22410 <hif_isr+0x3b0>)
   22250:	0018      	movs	r0, r3
   22252:	4b6d      	ldr	r3, [pc, #436]	; (22408 <hif_isr+0x3a8>)
   22254:	4798      	blx	r3
   22256:	e0f1      	b.n	2243c <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
   22258:	1d3b      	adds	r3, r7, #4
   2225a:	781b      	ldrb	r3, [r3, #0]
   2225c:	b2db      	uxtb	r3, r3
   2225e:	2b02      	cmp	r3, #2
   22260:	d122      	bne.n	222a8 <hif_isr+0x248>
				{
					if(gstrHifCxt.pfIpCb)
   22262:	4b65      	ldr	r3, [pc, #404]	; (223f8 <hif_isr+0x398>)
   22264:	695b      	ldr	r3, [r3, #20]
   22266:	2b00      	cmp	r3, #0
   22268:	d00d      	beq.n	22286 <hif_isr+0x226>
						gstrHifCxt.pfIpCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2226a:	4b63      	ldr	r3, [pc, #396]	; (223f8 <hif_isr+0x398>)
   2226c:	695b      	ldr	r3, [r3, #20]
   2226e:	1d3a      	adds	r2, r7, #4
   22270:	7852      	ldrb	r2, [r2, #1]
   22272:	b2d0      	uxtb	r0, r2
   22274:	1d3a      	adds	r2, r7, #4
   22276:	8852      	ldrh	r2, [r2, #2]
   22278:	b292      	uxth	r2, r2
   2227a:	3a08      	subs	r2, #8
   2227c:	b291      	uxth	r1, r2
   2227e:	683a      	ldr	r2, [r7, #0]
   22280:	3208      	adds	r2, #8
   22282:	4798      	blx	r3
   22284:	e0da      	b.n	2243c <hif_isr+0x3dc>
					else
						M2M_ERR("Scoket callback is not registered\n");
   22286:	23f0      	movs	r3, #240	; 0xf0
   22288:	33ff      	adds	r3, #255	; 0xff
   2228a:	001a      	movs	r2, r3
   2228c:	495c      	ldr	r1, [pc, #368]	; (22400 <hif_isr+0x3a0>)
   2228e:	4b5d      	ldr	r3, [pc, #372]	; (22404 <hif_isr+0x3a4>)
   22290:	0018      	movs	r0, r3
   22292:	4b5d      	ldr	r3, [pc, #372]	; (22408 <hif_isr+0x3a8>)
   22294:	4798      	blx	r3
   22296:	4b63      	ldr	r3, [pc, #396]	; (22424 <hif_isr+0x3c4>)
   22298:	0018      	movs	r0, r3
   2229a:	4b5b      	ldr	r3, [pc, #364]	; (22408 <hif_isr+0x3a8>)
   2229c:	4798      	blx	r3
   2229e:	4b5c      	ldr	r3, [pc, #368]	; (22410 <hif_isr+0x3b0>)
   222a0:	0018      	movs	r0, r3
   222a2:	4b59      	ldr	r3, [pc, #356]	; (22408 <hif_isr+0x3a8>)
   222a4:	4798      	blx	r3
   222a6:	e0c9      	b.n	2243c <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
   222a8:	1d3b      	adds	r3, r7, #4
   222aa:	781b      	ldrb	r3, [r3, #0]
   222ac:	b2db      	uxtb	r3, r3
   222ae:	2b04      	cmp	r3, #4
   222b0:	d122      	bne.n	222f8 <hif_isr+0x298>
				{
					if(gstrHifCxt.pfOtaCb)
   222b2:	4b51      	ldr	r3, [pc, #324]	; (223f8 <hif_isr+0x398>)
   222b4:	699b      	ldr	r3, [r3, #24]
   222b6:	2b00      	cmp	r3, #0
   222b8:	d00d      	beq.n	222d6 <hif_isr+0x276>
						gstrHifCxt.pfOtaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   222ba:	4b4f      	ldr	r3, [pc, #316]	; (223f8 <hif_isr+0x398>)
   222bc:	699b      	ldr	r3, [r3, #24]
   222be:	1d3a      	adds	r2, r7, #4
   222c0:	7852      	ldrb	r2, [r2, #1]
   222c2:	b2d0      	uxtb	r0, r2
   222c4:	1d3a      	adds	r2, r7, #4
   222c6:	8852      	ldrh	r2, [r2, #2]
   222c8:	b292      	uxth	r2, r2
   222ca:	3a08      	subs	r2, #8
   222cc:	b291      	uxth	r1, r2
   222ce:	683a      	ldr	r2, [r7, #0]
   222d0:	3208      	adds	r2, #8
   222d2:	4798      	blx	r3
   222d4:	e0b2      	b.n	2243c <hif_isr+0x3dc>
					else
						M2M_ERR("Ota callback is not registered\n");
   222d6:	23f8      	movs	r3, #248	; 0xf8
   222d8:	33ff      	adds	r3, #255	; 0xff
   222da:	001a      	movs	r2, r3
   222dc:	4948      	ldr	r1, [pc, #288]	; (22400 <hif_isr+0x3a0>)
   222de:	4b49      	ldr	r3, [pc, #292]	; (22404 <hif_isr+0x3a4>)
   222e0:	0018      	movs	r0, r3
   222e2:	4b49      	ldr	r3, [pc, #292]	; (22408 <hif_isr+0x3a8>)
   222e4:	4798      	blx	r3
   222e6:	4b50      	ldr	r3, [pc, #320]	; (22428 <hif_isr+0x3c8>)
   222e8:	0018      	movs	r0, r3
   222ea:	4b47      	ldr	r3, [pc, #284]	; (22408 <hif_isr+0x3a8>)
   222ec:	4798      	blx	r3
   222ee:	4b48      	ldr	r3, [pc, #288]	; (22410 <hif_isr+0x3b0>)
   222f0:	0018      	movs	r0, r3
   222f2:	4b45      	ldr	r3, [pc, #276]	; (22408 <hif_isr+0x3a8>)
   222f4:	4798      	blx	r3
   222f6:	e0a1      	b.n	2243c <hif_isr+0x3dc>

				}
				else if(M2M_REQ_GROUP_CRYPTO == strHif.u8Gid)
   222f8:	1d3b      	adds	r3, r7, #4
   222fa:	781b      	ldrb	r3, [r3, #0]
   222fc:	b2db      	uxtb	r3, r3
   222fe:	2b06      	cmp	r3, #6
   22300:	d121      	bne.n	22346 <hif_isr+0x2e6>
				{
					if(gstrHifCxt.pfCryptoCb)
   22302:	4b3d      	ldr	r3, [pc, #244]	; (223f8 <hif_isr+0x398>)
   22304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   22306:	2b00      	cmp	r3, #0
   22308:	d00d      	beq.n	22326 <hif_isr+0x2c6>
						gstrHifCxt.pfCryptoCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   2230a:	4b3b      	ldr	r3, [pc, #236]	; (223f8 <hif_isr+0x398>)
   2230c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2230e:	1d3a      	adds	r2, r7, #4
   22310:	7852      	ldrb	r2, [r2, #1]
   22312:	b2d0      	uxtb	r0, r2
   22314:	1d3a      	adds	r2, r7, #4
   22316:	8852      	ldrh	r2, [r2, #2]
   22318:	b292      	uxth	r2, r2
   2231a:	3a08      	subs	r2, #8
   2231c:	b291      	uxth	r1, r2
   2231e:	683a      	ldr	r2, [r7, #0]
   22320:	3208      	adds	r2, #8
   22322:	4798      	blx	r3
   22324:	e08a      	b.n	2243c <hif_isr+0x3dc>

					else
						M2M_ERR("Crypto callback is not registered\n");
   22326:	2380      	movs	r3, #128	; 0x80
   22328:	009a      	lsls	r2, r3, #2
   2232a:	4935      	ldr	r1, [pc, #212]	; (22400 <hif_isr+0x3a0>)
   2232c:	4b35      	ldr	r3, [pc, #212]	; (22404 <hif_isr+0x3a4>)
   2232e:	0018      	movs	r0, r3
   22330:	4b35      	ldr	r3, [pc, #212]	; (22408 <hif_isr+0x3a8>)
   22332:	4798      	blx	r3
   22334:	4b3d      	ldr	r3, [pc, #244]	; (2242c <hif_isr+0x3cc>)
   22336:	0018      	movs	r0, r3
   22338:	4b33      	ldr	r3, [pc, #204]	; (22408 <hif_isr+0x3a8>)
   2233a:	4798      	blx	r3
   2233c:	4b34      	ldr	r3, [pc, #208]	; (22410 <hif_isr+0x3b0>)
   2233e:	0018      	movs	r0, r3
   22340:	4b31      	ldr	r3, [pc, #196]	; (22408 <hif_isr+0x3a8>)
   22342:	4798      	blx	r3
   22344:	e07a      	b.n	2243c <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
   22346:	1d3b      	adds	r3, r7, #4
   22348:	781b      	ldrb	r3, [r3, #0]
   2234a:	b2db      	uxtb	r3, r3
   2234c:	2b07      	cmp	r3, #7
   2234e:	d120      	bne.n	22392 <hif_isr+0x332>
				{
					if(gstrHifCxt.pfSigmaCb)
   22350:	4b29      	ldr	r3, [pc, #164]	; (223f8 <hif_isr+0x398>)
   22352:	69db      	ldr	r3, [r3, #28]
   22354:	2b00      	cmp	r3, #0
   22356:	d00d      	beq.n	22374 <hif_isr+0x314>
						gstrHifCxt.pfSigmaCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   22358:	4b27      	ldr	r3, [pc, #156]	; (223f8 <hif_isr+0x398>)
   2235a:	69db      	ldr	r3, [r3, #28]
   2235c:	1d3a      	adds	r2, r7, #4
   2235e:	7852      	ldrb	r2, [r2, #1]
   22360:	b2d0      	uxtb	r0, r2
   22362:	1d3a      	adds	r2, r7, #4
   22364:	8852      	ldrh	r2, [r2, #2]
   22366:	b292      	uxth	r2, r2
   22368:	3a08      	subs	r2, #8
   2236a:	b291      	uxth	r1, r2
   2236c:	683a      	ldr	r2, [r7, #0]
   2236e:	3208      	adds	r2, #8
   22370:	4798      	blx	r3
   22372:	e063      	b.n	2243c <hif_isr+0x3dc>
					else
						M2M_ERR("Sigma callback is not registered\n");
   22374:	4a2e      	ldr	r2, [pc, #184]	; (22430 <hif_isr+0x3d0>)
   22376:	4922      	ldr	r1, [pc, #136]	; (22400 <hif_isr+0x3a0>)
   22378:	4b22      	ldr	r3, [pc, #136]	; (22404 <hif_isr+0x3a4>)
   2237a:	0018      	movs	r0, r3
   2237c:	4b22      	ldr	r3, [pc, #136]	; (22408 <hif_isr+0x3a8>)
   2237e:	4798      	blx	r3
   22380:	4b2c      	ldr	r3, [pc, #176]	; (22434 <hif_isr+0x3d4>)
   22382:	0018      	movs	r0, r3
   22384:	4b20      	ldr	r3, [pc, #128]	; (22408 <hif_isr+0x3a8>)
   22386:	4798      	blx	r3
   22388:	4b21      	ldr	r3, [pc, #132]	; (22410 <hif_isr+0x3b0>)
   2238a:	0018      	movs	r0, r3
   2238c:	4b1e      	ldr	r3, [pc, #120]	; (22408 <hif_isr+0x3a8>)
   2238e:	4798      	blx	r3
   22390:	e054      	b.n	2243c <hif_isr+0x3dc>
				}
				else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
   22392:	1d3b      	adds	r3, r7, #4
   22394:	781b      	ldrb	r3, [r3, #0]
   22396:	b2db      	uxtb	r3, r3
   22398:	2b05      	cmp	r3, #5
   2239a:	d111      	bne.n	223c0 <hif_isr+0x360>
				{
				    if(gstrHifCxt.pfSslCb)
   2239c:	4b16      	ldr	r3, [pc, #88]	; (223f8 <hif_isr+0x398>)
   2239e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   223a0:	2b00      	cmp	r3, #0
   223a2:	d04b      	beq.n	2243c <hif_isr+0x3dc>
						gstrHifCxt.pfSslCb(strHif.u8Opcode,strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
   223a4:	4b14      	ldr	r3, [pc, #80]	; (223f8 <hif_isr+0x398>)
   223a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   223a8:	1d3a      	adds	r2, r7, #4
   223aa:	7852      	ldrb	r2, [r2, #1]
   223ac:	b2d0      	uxtb	r0, r2
   223ae:	1d3a      	adds	r2, r7, #4
   223b0:	8852      	ldrh	r2, [r2, #2]
   223b2:	b292      	uxth	r2, r2
   223b4:	3a08      	subs	r2, #8
   223b6:	b291      	uxth	r1, r2
   223b8:	683a      	ldr	r2, [r7, #0]
   223ba:	3208      	adds	r2, #8
   223bc:	4798      	blx	r3
   223be:	e03d      	b.n	2243c <hif_isr+0x3dc>
				}
				else
				{
					M2M_ERR("(hif) invalid group ID\n");
   223c0:	2384      	movs	r3, #132	; 0x84
   223c2:	009a      	lsls	r2, r3, #2
   223c4:	490e      	ldr	r1, [pc, #56]	; (22400 <hif_isr+0x3a0>)
   223c6:	4b0f      	ldr	r3, [pc, #60]	; (22404 <hif_isr+0x3a4>)
   223c8:	0018      	movs	r0, r3
   223ca:	4b0f      	ldr	r3, [pc, #60]	; (22408 <hif_isr+0x3a8>)
   223cc:	4798      	blx	r3
   223ce:	4b1a      	ldr	r3, [pc, #104]	; (22438 <hif_isr+0x3d8>)
   223d0:	0018      	movs	r0, r3
   223d2:	4b0d      	ldr	r3, [pc, #52]	; (22408 <hif_isr+0x3a8>)
   223d4:	4798      	blx	r3
   223d6:	4b0e      	ldr	r3, [pc, #56]	; (22410 <hif_isr+0x3b0>)
   223d8:	0018      	movs	r0, r3
   223da:	4b0b      	ldr	r3, [pc, #44]	; (22408 <hif_isr+0x3a8>)
   223dc:	4798      	blx	r3
					ret = M2M_ERR_BUS_FAIL;
   223de:	230f      	movs	r3, #15
   223e0:	18fb      	adds	r3, r7, r3
   223e2:	22fa      	movs	r2, #250	; 0xfa
   223e4:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   223e6:	e083      	b.n	224f0 <hif_isr+0x490>
   223e8:	00001070 	.word	0x00001070
   223ec:	00023aed 	.word	0x00023aed
   223f0:	00021211 	.word	0x00021211
   223f4:	00023b11 	.word	0x00023b11
   223f8:	20005b24 	.word	0x20005b24
   223fc:	00001084 	.word	0x00001084
   22400:	000397b8 	.word	0x000397b8
   22404:	000394a8 	.word	0x000394a8
   22408:	0001ed29 	.word	0x0001ed29
   2240c:	000394dc 	.word	0x000394dc
   22410:	000394a4 	.word	0x000394a4
   22414:	00023b61 	.word	0x00023b61
   22418:	00039504 	.word	0x00039504
   2241c:	0003951c 	.word	0x0003951c
   22420:	0003955c 	.word	0x0003955c
   22424:	00039580 	.word	0x00039580
   22428:	000395a4 	.word	0x000395a4
   2242c:	000395c4 	.word	0x000395c4
   22430:	00000207 	.word	0x00000207
   22434:	000395e8 	.word	0x000395e8
   22438:	0003960c 	.word	0x0003960c
				}
				if(gstrHifCxt.u8HifRXDone)
   2243c:	4b30      	ldr	r3, [pc, #192]	; (22500 <hif_isr+0x4a0>)
   2243e:	789b      	ldrb	r3, [r3, #2]
   22440:	b2db      	uxtb	r3, r3
   22442:	2b00      	cmp	r3, #0
   22444:	d054      	beq.n	224f0 <hif_isr+0x490>
				{
					M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
   22446:	4a2f      	ldr	r2, [pc, #188]	; (22504 <hif_isr+0x4a4>)
   22448:	492f      	ldr	r1, [pc, #188]	; (22508 <hif_isr+0x4a8>)
   2244a:	4b30      	ldr	r3, [pc, #192]	; (2250c <hif_isr+0x4ac>)
   2244c:	0018      	movs	r0, r3
   2244e:	4b30      	ldr	r3, [pc, #192]	; (22510 <hif_isr+0x4b0>)
   22450:	4798      	blx	r3
   22452:	1d3b      	adds	r3, r7, #4
   22454:	781b      	ldrb	r3, [r3, #0]
   22456:	b2db      	uxtb	r3, r3
   22458:	0019      	movs	r1, r3
   2245a:	1d3b      	adds	r3, r7, #4
   2245c:	785b      	ldrb	r3, [r3, #1]
   2245e:	b2db      	uxtb	r3, r3
   22460:	001a      	movs	r2, r3
   22462:	4b2c      	ldr	r3, [pc, #176]	; (22514 <hif_isr+0x4b4>)
   22464:	0018      	movs	r0, r3
   22466:	4b2a      	ldr	r3, [pc, #168]	; (22510 <hif_isr+0x4b0>)
   22468:	4798      	blx	r3
   2246a:	4b2b      	ldr	r3, [pc, #172]	; (22518 <hif_isr+0x4b8>)
   2246c:	0018      	movs	r0, r3
   2246e:	4b28      	ldr	r3, [pc, #160]	; (22510 <hif_isr+0x4b0>)
   22470:	4798      	blx	r3
					ret = hif_set_rx_done();
   22472:	230f      	movs	r3, #15
   22474:	18fc      	adds	r4, r7, r3
   22476:	4b29      	ldr	r3, [pc, #164]	; (2251c <hif_isr+0x4bc>)
   22478:	4798      	blx	r3
   2247a:	0003      	movs	r3, r0
   2247c:	7023      	strb	r3, [r4, #0]
   2247e:	e037      	b.n	224f0 <hif_isr+0x490>
					if(ret != M2M_SUCCESS) goto ERR1;
				}
			}
			else
			{
				M2M_ERR("(hif) Wrong Size\n");
   22480:	4a27      	ldr	r2, [pc, #156]	; (22520 <hif_isr+0x4c0>)
   22482:	4921      	ldr	r1, [pc, #132]	; (22508 <hif_isr+0x4a8>)
   22484:	4b21      	ldr	r3, [pc, #132]	; (2250c <hif_isr+0x4ac>)
   22486:	0018      	movs	r0, r3
   22488:	4b21      	ldr	r3, [pc, #132]	; (22510 <hif_isr+0x4b0>)
   2248a:	4798      	blx	r3
   2248c:	4b25      	ldr	r3, [pc, #148]	; (22524 <hif_isr+0x4c4>)
   2248e:	0018      	movs	r0, r3
   22490:	4b1f      	ldr	r3, [pc, #124]	; (22510 <hif_isr+0x4b0>)
   22492:	4798      	blx	r3
   22494:	4b20      	ldr	r3, [pc, #128]	; (22518 <hif_isr+0x4b8>)
   22496:	0018      	movs	r0, r3
   22498:	4b1d      	ldr	r3, [pc, #116]	; (22510 <hif_isr+0x4b0>)
   2249a:	4798      	blx	r3
				ret = M2M_ERR_RCV;
   2249c:	230f      	movs	r3, #15
   2249e:	18fb      	adds	r3, r7, r3
   224a0:	22fe      	movs	r2, #254	; 0xfe
   224a2:	701a      	strb	r2, [r3, #0]
				goto ERR1;
   224a4:	e024      	b.n	224f0 <hif_isr+0x490>
			}
		}
		else
		{
#ifndef WIN32
			M2M_ERR("(hif) False interrupt %lx",reg);
   224a6:	4a20      	ldr	r2, [pc, #128]	; (22528 <hif_isr+0x4c8>)
   224a8:	4917      	ldr	r1, [pc, #92]	; (22508 <hif_isr+0x4a8>)
   224aa:	4b18      	ldr	r3, [pc, #96]	; (2250c <hif_isr+0x4ac>)
   224ac:	0018      	movs	r0, r3
   224ae:	4b18      	ldr	r3, [pc, #96]	; (22510 <hif_isr+0x4b0>)
   224b0:	4798      	blx	r3
   224b2:	68ba      	ldr	r2, [r7, #8]
   224b4:	4b1d      	ldr	r3, [pc, #116]	; (2252c <hif_isr+0x4cc>)
   224b6:	0011      	movs	r1, r2
   224b8:	0018      	movs	r0, r3
   224ba:	4b15      	ldr	r3, [pc, #84]	; (22510 <hif_isr+0x4b0>)
   224bc:	4798      	blx	r3
   224be:	4b16      	ldr	r3, [pc, #88]	; (22518 <hif_isr+0x4b8>)
   224c0:	0018      	movs	r0, r3
   224c2:	4b13      	ldr	r3, [pc, #76]	; (22510 <hif_isr+0x4b0>)
   224c4:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   224c6:	230f      	movs	r3, #15
   224c8:	18fb      	adds	r3, r7, r3
   224ca:	22f4      	movs	r2, #244	; 0xf4
   224cc:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   224ce:	e00f      	b.n	224f0 <hif_isr+0x490>
#endif
		}
	}
	else
	{
		M2M_ERR("(hif) Fail to Read interrupt reg\n");
   224d0:	4a17      	ldr	r2, [pc, #92]	; (22530 <hif_isr+0x4d0>)
   224d2:	490d      	ldr	r1, [pc, #52]	; (22508 <hif_isr+0x4a8>)
   224d4:	4b0d      	ldr	r3, [pc, #52]	; (2250c <hif_isr+0x4ac>)
   224d6:	0018      	movs	r0, r3
   224d8:	4b0d      	ldr	r3, [pc, #52]	; (22510 <hif_isr+0x4b0>)
   224da:	4798      	blx	r3
   224dc:	4b15      	ldr	r3, [pc, #84]	; (22534 <hif_isr+0x4d4>)
   224de:	0018      	movs	r0, r3
   224e0:	4b0b      	ldr	r3, [pc, #44]	; (22510 <hif_isr+0x4b0>)
   224e2:	4798      	blx	r3
   224e4:	4b0c      	ldr	r3, [pc, #48]	; (22518 <hif_isr+0x4b8>)
   224e6:	0018      	movs	r0, r3
   224e8:	4b09      	ldr	r3, [pc, #36]	; (22510 <hif_isr+0x4b0>)
   224ea:	4798      	blx	r3
		goto ERR1;
   224ec:	e000      	b.n	224f0 <hif_isr+0x490>
			if(ret != M2M_SUCCESS)goto ERR1;
   224ee:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   224f0:	230f      	movs	r3, #15
   224f2:	18fb      	adds	r3, r7, r3
   224f4:	781b      	ldrb	r3, [r3, #0]
   224f6:	b25b      	sxtb	r3, r3
}
   224f8:	0018      	movs	r0, r3
   224fa:	46bd      	mov	sp, r7
   224fc:	b005      	add	sp, #20
   224fe:	bd90      	pop	{r4, r7, pc}
   22500:	20005b24 	.word	0x20005b24
   22504:	00000216 	.word	0x00000216
   22508:	000397b8 	.word	0x000397b8
   2250c:	000394a8 	.word	0x000394a8
   22510:	0001ed29 	.word	0x0001ed29
   22514:	00039624 	.word	0x00039624
   22518:	000394a4 	.word	0x000394a4
   2251c:	00021af5 	.word	0x00021af5
   22520:	0000021d 	.word	0x0000021d
   22524:	00039650 	.word	0x00039650
   22528:	00000225 	.word	0x00000225
   2252c:	00039664 	.word	0x00039664
   22530:	0000022e 	.word	0x0000022e
   22534:	00039680 	.word	0x00039680

00022538 <hif_handle_isr>:
*	@brief	Handle interrupt received from NMC1500 firmware.
*   @return     The function SHALL return 0 for success and a negative value otherwise.
*/

sint8 hif_handle_isr(void)
{
   22538:	b590      	push	{r4, r7, lr}
   2253a:	b083      	sub	sp, #12
   2253c:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;	
   2253e:	1dfb      	adds	r3, r7, #7
   22540:	2200      	movs	r2, #0
   22542:	701a      	strb	r2, [r3, #0]
	
	gstrHifCxt.u8Yield = 0;
   22544:	4b1c      	ldr	r3, [pc, #112]	; (225b8 <hif_handle_isr+0x80>)
   22546:	2200      	movs	r2, #0
   22548:	711a      	strb	r2, [r3, #4]
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   2254a:	e024      	b.n	22596 <hif_handle_isr+0x5e>
		/*must be at that place because of the race of interrupt increment and that decrement*/
		/*when the interrupt enabled*/
		gstrHifCxt.u8Interrupt--;
   2254c:	4b1a      	ldr	r3, [pc, #104]	; (225b8 <hif_handle_isr+0x80>)
   2254e:	78db      	ldrb	r3, [r3, #3]
   22550:	b2db      	uxtb	r3, r3
   22552:	3b01      	subs	r3, #1
   22554:	b2da      	uxtb	r2, r3
   22556:	4b18      	ldr	r3, [pc, #96]	; (225b8 <hif_handle_isr+0x80>)
   22558:	70da      	strb	r2, [r3, #3]
		while(1)
		{
			ret = hif_isr();
   2255a:	1dfc      	adds	r4, r7, #7
   2255c:	4b17      	ldr	r3, [pc, #92]	; (225bc <hif_handle_isr+0x84>)
   2255e:	4798      	blx	r3
   22560:	0003      	movs	r3, r0
   22562:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   22564:	1dfb      	adds	r3, r7, #7
   22566:	781b      	ldrb	r3, [r3, #0]
   22568:	b25b      	sxtb	r3, r3
   2256a:	2b00      	cmp	r3, #0
   2256c:	d100      	bne.n	22570 <hif_handle_isr+0x38>
				/*we will try forever untill we get that interrupt*/
				/*Fail return errors here due to bus errors (reading expected values)*/
				break;
   2256e:	e012      	b.n	22596 <hif_handle_isr+0x5e>
			} else {
				M2M_ERR("(HIF) Fail to handle interrupt %d try Again..\n",ret);
   22570:	4a13      	ldr	r2, [pc, #76]	; (225c0 <hif_handle_isr+0x88>)
   22572:	4914      	ldr	r1, [pc, #80]	; (225c4 <hif_handle_isr+0x8c>)
   22574:	4b14      	ldr	r3, [pc, #80]	; (225c8 <hif_handle_isr+0x90>)
   22576:	0018      	movs	r0, r3
   22578:	4b14      	ldr	r3, [pc, #80]	; (225cc <hif_handle_isr+0x94>)
   2257a:	4798      	blx	r3
   2257c:	1dfb      	adds	r3, r7, #7
   2257e:	2200      	movs	r2, #0
   22580:	569a      	ldrsb	r2, [r3, r2]
   22582:	4b13      	ldr	r3, [pc, #76]	; (225d0 <hif_handle_isr+0x98>)
   22584:	0011      	movs	r1, r2
   22586:	0018      	movs	r0, r3
   22588:	4b10      	ldr	r3, [pc, #64]	; (225cc <hif_handle_isr+0x94>)
   2258a:	4798      	blx	r3
   2258c:	4b11      	ldr	r3, [pc, #68]	; (225d4 <hif_handle_isr+0x9c>)
   2258e:	0018      	movs	r0, r3
   22590:	4b0e      	ldr	r3, [pc, #56]	; (225cc <hif_handle_isr+0x94>)
   22592:	4798      	blx	r3
			ret = hif_isr();
   22594:	e7e1      	b.n	2255a <hif_handle_isr+0x22>
	while (gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield) {
   22596:	4b08      	ldr	r3, [pc, #32]	; (225b8 <hif_handle_isr+0x80>)
   22598:	78db      	ldrb	r3, [r3, #3]
   2259a:	b2db      	uxtb	r3, r3
   2259c:	2b00      	cmp	r3, #0
   2259e:	d004      	beq.n	225aa <hif_handle_isr+0x72>
   225a0:	4b05      	ldr	r3, [pc, #20]	; (225b8 <hif_handle_isr+0x80>)
   225a2:	791b      	ldrb	r3, [r3, #4]
   225a4:	b2db      	uxtb	r3, r3
   225a6:	2b00      	cmp	r3, #0
   225a8:	d0d0      	beq.n	2254c <hif_handle_isr+0x14>
			}
		}
	}

	return ret;
   225aa:	1dfb      	adds	r3, r7, #7
   225ac:	781b      	ldrb	r3, [r3, #0]
   225ae:	b25b      	sxtb	r3, r3
}
   225b0:	0018      	movs	r0, r3
   225b2:	46bd      	mov	sp, r7
   225b4:	b003      	add	sp, #12
   225b6:	bd90      	pop	{r4, r7, pc}
   225b8:	20005b24 	.word	0x20005b24
   225bc:	00022061 	.word	0x00022061
   225c0:	00000257 	.word	0x00000257
   225c4:	000397c0 	.word	0x000397c0
   225c8:	000394a8 	.word	0x000394a8
   225cc:	0001ed29 	.word	0x0001ed29
   225d0:	000396a4 	.word	0x000396a4
   225d4:	000394a4 	.word	0x000394a4

000225d8 <hif_receive>:
*	@param [in]	isDone
*				If you don't need any more packets send True otherwise send false
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
   225d8:	b590      	push	{r4, r7, lr}
   225da:	b087      	sub	sp, #28
   225dc:	af00      	add	r7, sp, #0
   225de:	60f8      	str	r0, [r7, #12]
   225e0:	60b9      	str	r1, [r7, #8]
   225e2:	0019      	movs	r1, r3
   225e4:	1dbb      	adds	r3, r7, #6
   225e6:	801a      	strh	r2, [r3, #0]
   225e8:	1d7b      	adds	r3, r7, #5
   225ea:	1c0a      	adds	r2, r1, #0
   225ec:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   225ee:	2317      	movs	r3, #23
   225f0:	18fb      	adds	r3, r7, r3
   225f2:	2200      	movs	r2, #0
   225f4:	701a      	strb	r2, [r3, #0]
	if((u32Addr == 0)||(pu8Buf == NULL) || (u16Sz == 0))
   225f6:	68fb      	ldr	r3, [r7, #12]
   225f8:	2b00      	cmp	r3, #0
   225fa:	d006      	beq.n	2260a <hif_receive+0x32>
   225fc:	68bb      	ldr	r3, [r7, #8]
   225fe:	2b00      	cmp	r3, #0
   22600:	d003      	beq.n	2260a <hif_receive+0x32>
   22602:	1dbb      	adds	r3, r7, #6
   22604:	881b      	ldrh	r3, [r3, #0]
   22606:	2b00      	cmp	r3, #0
   22608:	d11e      	bne.n	22648 <hif_receive+0x70>
	{
		if(isDone)
   2260a:	1d7b      	adds	r3, r7, #5
   2260c:	781b      	ldrb	r3, [r3, #0]
   2260e:	2b00      	cmp	r3, #0
   22610:	d006      	beq.n	22620 <hif_receive+0x48>
		{			
			/* set RX done */
			ret = hif_set_rx_done();
   22612:	2317      	movs	r3, #23
   22614:	18fc      	adds	r4, r7, r3
   22616:	4b45      	ldr	r3, [pc, #276]	; (2272c <hif_receive+0x154>)
   22618:	4798      	blx	r3
   2261a:	0003      	movs	r3, r0
   2261c:	7023      	strb	r3, [r4, #0]
		else
		{
			ret = M2M_ERR_FAIL;
			M2M_ERR(" hif_receive: Invalid argument\n");
		}
		goto ERR1;
   2261e:	e07c      	b.n	2271a <hif_receive+0x142>
			ret = M2M_ERR_FAIL;
   22620:	2317      	movs	r3, #23
   22622:	18fb      	adds	r3, r7, r3
   22624:	22f4      	movs	r2, #244	; 0xf4
   22626:	701a      	strb	r2, [r3, #0]
			M2M_ERR(" hif_receive: Invalid argument\n");
   22628:	239e      	movs	r3, #158	; 0x9e
   2262a:	009a      	lsls	r2, r3, #2
   2262c:	4940      	ldr	r1, [pc, #256]	; (22730 <hif_receive+0x158>)
   2262e:	4b41      	ldr	r3, [pc, #260]	; (22734 <hif_receive+0x15c>)
   22630:	0018      	movs	r0, r3
   22632:	4b41      	ldr	r3, [pc, #260]	; (22738 <hif_receive+0x160>)
   22634:	4798      	blx	r3
   22636:	4b41      	ldr	r3, [pc, #260]	; (2273c <hif_receive+0x164>)
   22638:	0018      	movs	r0, r3
   2263a:	4b3f      	ldr	r3, [pc, #252]	; (22738 <hif_receive+0x160>)
   2263c:	4798      	blx	r3
   2263e:	4b40      	ldr	r3, [pc, #256]	; (22740 <hif_receive+0x168>)
   22640:	0018      	movs	r0, r3
   22642:	4b3d      	ldr	r3, [pc, #244]	; (22738 <hif_receive+0x160>)
   22644:	4798      	blx	r3
		goto ERR1;
   22646:	e068      	b.n	2271a <hif_receive+0x142>
	}

	if(u16Sz > gstrHifCxt.u32RxSize)
   22648:	1dbb      	adds	r3, r7, #6
   2264a:	881a      	ldrh	r2, [r3, #0]
   2264c:	4b3d      	ldr	r3, [pc, #244]	; (22744 <hif_receive+0x16c>)
   2264e:	68db      	ldr	r3, [r3, #12]
   22650:	429a      	cmp	r2, r3
   22652:	d917      	bls.n	22684 <hif_receive+0xac>
	{
		ret = M2M_ERR_FAIL;
   22654:	2317      	movs	r3, #23
   22656:	18fb      	adds	r3, r7, r3
   22658:	22f4      	movs	r2, #244	; 0xf4
   2265a:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Size is larger than the recived buffer size <%u><%lu>\n",u16Sz, gstrHifCxt.u32RxSize);
   2265c:	23a0      	movs	r3, #160	; 0xa0
   2265e:	009a      	lsls	r2, r3, #2
   22660:	4933      	ldr	r1, [pc, #204]	; (22730 <hif_receive+0x158>)
   22662:	4b34      	ldr	r3, [pc, #208]	; (22734 <hif_receive+0x15c>)
   22664:	0018      	movs	r0, r3
   22666:	4b34      	ldr	r3, [pc, #208]	; (22738 <hif_receive+0x160>)
   22668:	4798      	blx	r3
   2266a:	1dbb      	adds	r3, r7, #6
   2266c:	8819      	ldrh	r1, [r3, #0]
   2266e:	4b35      	ldr	r3, [pc, #212]	; (22744 <hif_receive+0x16c>)
   22670:	68da      	ldr	r2, [r3, #12]
   22672:	4b35      	ldr	r3, [pc, #212]	; (22748 <hif_receive+0x170>)
   22674:	0018      	movs	r0, r3
   22676:	4b30      	ldr	r3, [pc, #192]	; (22738 <hif_receive+0x160>)
   22678:	4798      	blx	r3
   2267a:	4b31      	ldr	r3, [pc, #196]	; (22740 <hif_receive+0x168>)
   2267c:	0018      	movs	r0, r3
   2267e:	4b2e      	ldr	r3, [pc, #184]	; (22738 <hif_receive+0x160>)
   22680:	4798      	blx	r3
		goto ERR1;
   22682:	e04a      	b.n	2271a <hif_receive+0x142>
	}
	if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize)))
   22684:	4b2f      	ldr	r3, [pc, #188]	; (22744 <hif_receive+0x16c>)
   22686:	689a      	ldr	r2, [r3, #8]
   22688:	68fb      	ldr	r3, [r7, #12]
   2268a:	429a      	cmp	r2, r3
   2268c:	d80a      	bhi.n	226a4 <hif_receive+0xcc>
   2268e:	1dbb      	adds	r3, r7, #6
   22690:	881a      	ldrh	r2, [r3, #0]
   22692:	68fb      	ldr	r3, [r7, #12]
   22694:	18d2      	adds	r2, r2, r3
   22696:	4b2b      	ldr	r3, [pc, #172]	; (22744 <hif_receive+0x16c>)
   22698:	6899      	ldr	r1, [r3, #8]
   2269a:	4b2a      	ldr	r3, [pc, #168]	; (22744 <hif_receive+0x16c>)
   2269c:	68db      	ldr	r3, [r3, #12]
   2269e:	18cb      	adds	r3, r1, r3
   226a0:	429a      	cmp	r2, r3
   226a2:	d912      	bls.n	226ca <hif_receive+0xf2>
	{
		ret = M2M_ERR_FAIL;
   226a4:	2317      	movs	r3, #23
   226a6:	18fb      	adds	r3, r7, r3
   226a8:	22f4      	movs	r2, #244	; 0xf4
   226aa:	701a      	strb	r2, [r3, #0]
		M2M_ERR("APP Requested Address beyond the recived buffer address and length\n");
   226ac:	4a27      	ldr	r2, [pc, #156]	; (2274c <hif_receive+0x174>)
   226ae:	4920      	ldr	r1, [pc, #128]	; (22730 <hif_receive+0x158>)
   226b0:	4b20      	ldr	r3, [pc, #128]	; (22734 <hif_receive+0x15c>)
   226b2:	0018      	movs	r0, r3
   226b4:	4b20      	ldr	r3, [pc, #128]	; (22738 <hif_receive+0x160>)
   226b6:	4798      	blx	r3
   226b8:	4b25      	ldr	r3, [pc, #148]	; (22750 <hif_receive+0x178>)
   226ba:	0018      	movs	r0, r3
   226bc:	4b1e      	ldr	r3, [pc, #120]	; (22738 <hif_receive+0x160>)
   226be:	4798      	blx	r3
   226c0:	4b1f      	ldr	r3, [pc, #124]	; (22740 <hif_receive+0x168>)
   226c2:	0018      	movs	r0, r3
   226c4:	4b1c      	ldr	r3, [pc, #112]	; (22738 <hif_receive+0x160>)
   226c6:	4798      	blx	r3
		goto ERR1;
   226c8:	e027      	b.n	2271a <hif_receive+0x142>
	}
	
	/* Receive the payload */
	ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
   226ca:	1dbb      	adds	r3, r7, #6
   226cc:	881a      	ldrh	r2, [r3, #0]
   226ce:	2317      	movs	r3, #23
   226d0:	18fc      	adds	r4, r7, r3
   226d2:	68b9      	ldr	r1, [r7, #8]
   226d4:	68fb      	ldr	r3, [r7, #12]
   226d6:	0018      	movs	r0, r3
   226d8:	4b1e      	ldr	r3, [pc, #120]	; (22754 <hif_receive+0x17c>)
   226da:	4798      	blx	r3
   226dc:	0003      	movs	r3, r0
   226de:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   226e0:	2317      	movs	r3, #23
   226e2:	18fb      	adds	r3, r7, r3
   226e4:	781b      	ldrb	r3, [r3, #0]
   226e6:	b25b      	sxtb	r3, r3
   226e8:	2b00      	cmp	r3, #0
   226ea:	d115      	bne.n	22718 <hif_receive+0x140>

	/* check if this is the last packet */
	if((((gstrHifCxt.u32RxAddr + gstrHifCxt.u32RxSize) - (u32Addr + u16Sz)) <= 0) || isDone)
   226ec:	4b15      	ldr	r3, [pc, #84]	; (22744 <hif_receive+0x16c>)
   226ee:	689a      	ldr	r2, [r3, #8]
   226f0:	4b14      	ldr	r3, [pc, #80]	; (22744 <hif_receive+0x16c>)
   226f2:	68db      	ldr	r3, [r3, #12]
   226f4:	18d2      	adds	r2, r2, r3
   226f6:	1dbb      	adds	r3, r7, #6
   226f8:	8819      	ldrh	r1, [r3, #0]
   226fa:	68fb      	ldr	r3, [r7, #12]
   226fc:	18cb      	adds	r3, r1, r3
   226fe:	429a      	cmp	r2, r3
   22700:	d003      	beq.n	2270a <hif_receive+0x132>
   22702:	1d7b      	adds	r3, r7, #5
   22704:	781b      	ldrb	r3, [r3, #0]
   22706:	2b00      	cmp	r3, #0
   22708:	d007      	beq.n	2271a <hif_receive+0x142>
	{
		/* set RX done */
		ret = hif_set_rx_done();
   2270a:	2317      	movs	r3, #23
   2270c:	18fc      	adds	r4, r7, r3
   2270e:	4b07      	ldr	r3, [pc, #28]	; (2272c <hif_receive+0x154>)
   22710:	4798      	blx	r3
   22712:	0003      	movs	r3, r0
   22714:	7023      	strb	r3, [r4, #0]
   22716:	e000      	b.n	2271a <hif_receive+0x142>
	if(ret != M2M_SUCCESS)goto ERR1;
   22718:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   2271a:	2317      	movs	r3, #23
   2271c:	18fb      	adds	r3, r7, r3
   2271e:	781b      	ldrb	r3, [r3, #0]
   22720:	b25b      	sxtb	r3, r3
}
   22722:	0018      	movs	r0, r3
   22724:	46bd      	mov	sp, r7
   22726:	b007      	add	sp, #28
   22728:	bd90      	pop	{r4, r7, pc}
   2272a:	46c0      	nop			; (mov r8, r8)
   2272c:	00021af5 	.word	0x00021af5
   22730:	000397d0 	.word	0x000397d0
   22734:	000394a8 	.word	0x000394a8
   22738:	0001ed29 	.word	0x0001ed29
   2273c:	000396d4 	.word	0x000396d4
   22740:	000394a4 	.word	0x000394a4
   22744:	20005b24 	.word	0x20005b24
   22748:	000396f4 	.word	0x000396f4
   2274c:	00000286 	.word	0x00000286
   22750:	0003973c 	.word	0x0003973c
   22754:	00023b61 	.word	0x00023b61

00022758 <hif_register_cb>:
*				function to be set
*    @return		The function shall return ZERO for successful operation and a negative value otherwise.
*/

sint8 hif_register_cb(uint8 u8Grp,tpfHifCallBack fn)
{
   22758:	b580      	push	{r7, lr}
   2275a:	b084      	sub	sp, #16
   2275c:	af00      	add	r7, sp, #0
   2275e:	0002      	movs	r2, r0
   22760:	6039      	str	r1, [r7, #0]
   22762:	1dfb      	adds	r3, r7, #7
   22764:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   22766:	230f      	movs	r3, #15
   22768:	18fb      	adds	r3, r7, r3
   2276a:	2200      	movs	r2, #0
   2276c:	701a      	strb	r2, [r3, #0]
	switch(u8Grp)
   2276e:	1dfb      	adds	r3, r7, #7
   22770:	781b      	ldrb	r3, [r3, #0]
   22772:	2b07      	cmp	r3, #7
   22774:	d820      	bhi.n	227b8 <hif_register_cb+0x60>
   22776:	009a      	lsls	r2, r3, #2
   22778:	4b1e      	ldr	r3, [pc, #120]	; (227f4 <hif_register_cb+0x9c>)
   2277a:	18d3      	adds	r3, r2, r3
   2277c:	681b      	ldr	r3, [r3, #0]
   2277e:	469f      	mov	pc, r3
	{
		case M2M_REQ_GROUP_IP:
			gstrHifCxt.pfIpCb = fn;
   22780:	4b1d      	ldr	r3, [pc, #116]	; (227f8 <hif_register_cb+0xa0>)
   22782:	683a      	ldr	r2, [r7, #0]
   22784:	615a      	str	r2, [r3, #20]
			break;
   22786:	e02d      	b.n	227e4 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_WIFI:
			gstrHifCxt.pfWifiCb = fn;
   22788:	4b1b      	ldr	r3, [pc, #108]	; (227f8 <hif_register_cb+0xa0>)
   2278a:	683a      	ldr	r2, [r7, #0]
   2278c:	611a      	str	r2, [r3, #16]
			break;
   2278e:	e029      	b.n	227e4 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_OTA:
			gstrHifCxt.pfOtaCb = fn;
   22790:	4b19      	ldr	r3, [pc, #100]	; (227f8 <hif_register_cb+0xa0>)
   22792:	683a      	ldr	r2, [r7, #0]
   22794:	619a      	str	r2, [r3, #24]
			break;
   22796:	e025      	b.n	227e4 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_HIF:
			gstrHifCxt.pfHifCb = fn;
   22798:	4b17      	ldr	r3, [pc, #92]	; (227f8 <hif_register_cb+0xa0>)
   2279a:	683a      	ldr	r2, [r7, #0]
   2279c:	621a      	str	r2, [r3, #32]
			break;
   2279e:	e021      	b.n	227e4 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_CRYPTO:
			gstrHifCxt.pfCryptoCb = fn;
   227a0:	4b15      	ldr	r3, [pc, #84]	; (227f8 <hif_register_cb+0xa0>)
   227a2:	683a      	ldr	r2, [r7, #0]
   227a4:	625a      	str	r2, [r3, #36]	; 0x24
			break;
   227a6:	e01d      	b.n	227e4 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SIGMA:
			gstrHifCxt.pfSigmaCb = fn;
   227a8:	4b13      	ldr	r3, [pc, #76]	; (227f8 <hif_register_cb+0xa0>)
   227aa:	683a      	ldr	r2, [r7, #0]
   227ac:	61da      	str	r2, [r3, #28]
			break;
   227ae:	e019      	b.n	227e4 <hif_register_cb+0x8c>
		case M2M_REQ_GROUP_SSL:
			gstrHifCxt.pfSslCb = fn;
   227b0:	4b11      	ldr	r3, [pc, #68]	; (227f8 <hif_register_cb+0xa0>)
   227b2:	683a      	ldr	r2, [r7, #0]
   227b4:	629a      	str	r2, [r3, #40]	; 0x28
			break;
   227b6:	e015      	b.n	227e4 <hif_register_cb+0x8c>
		default:
			M2M_ERR("GRp ? %d\n",u8Grp);
   227b8:	4a10      	ldr	r2, [pc, #64]	; (227fc <hif_register_cb+0xa4>)
   227ba:	4911      	ldr	r1, [pc, #68]	; (22800 <hif_register_cb+0xa8>)
   227bc:	4b11      	ldr	r3, [pc, #68]	; (22804 <hif_register_cb+0xac>)
   227be:	0018      	movs	r0, r3
   227c0:	4b11      	ldr	r3, [pc, #68]	; (22808 <hif_register_cb+0xb0>)
   227c2:	4798      	blx	r3
   227c4:	1dfb      	adds	r3, r7, #7
   227c6:	781a      	ldrb	r2, [r3, #0]
   227c8:	4b10      	ldr	r3, [pc, #64]	; (2280c <hif_register_cb+0xb4>)
   227ca:	0011      	movs	r1, r2
   227cc:	0018      	movs	r0, r3
   227ce:	4b0e      	ldr	r3, [pc, #56]	; (22808 <hif_register_cb+0xb0>)
   227d0:	4798      	blx	r3
   227d2:	4b0f      	ldr	r3, [pc, #60]	; (22810 <hif_register_cb+0xb8>)
   227d4:	0018      	movs	r0, r3
   227d6:	4b0c      	ldr	r3, [pc, #48]	; (22808 <hif_register_cb+0xb0>)
   227d8:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   227da:	230f      	movs	r3, #15
   227dc:	18fb      	adds	r3, r7, r3
   227de:	22f4      	movs	r2, #244	; 0xf4
   227e0:	701a      	strb	r2, [r3, #0]
			break;
   227e2:	46c0      	nop			; (mov r8, r8)
	}
	return ret;
   227e4:	230f      	movs	r3, #15
   227e6:	18fb      	adds	r3, r7, r3
   227e8:	781b      	ldrb	r3, [r3, #0]
   227ea:	b25b      	sxtb	r3, r3
}
   227ec:	0018      	movs	r0, r3
   227ee:	46bd      	mov	sp, r7
   227f0:	b004      	add	sp, #16
   227f2:	bd80      	pop	{r7, pc}
   227f4:	0003978c 	.word	0x0003978c
   227f8:	20005b24 	.word	0x20005b24
   227fc:	000002be 	.word	0x000002be
   22800:	000397dc 	.word	0x000397dc
   22804:	000394a8 	.word	0x000394a8
   22808:	0001ed29 	.word	0x0001ed29
   2280c:	00039780 	.word	0x00039780
   22810:	000394a4 	.word	0x000394a4

00022814 <m2m_wifi_cb>:
*	@author
*	@date
*	@version	1.0
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
   22814:	b590      	push	{r4, r7, lr}
   22816:	b0af      	sub	sp, #188	; 0xbc
   22818:	af02      	add	r7, sp, #8
   2281a:	603a      	str	r2, [r7, #0]
   2281c:	1dfb      	adds	r3, r7, #7
   2281e:	1c02      	adds	r2, r0, #0
   22820:	701a      	strb	r2, [r3, #0]
   22822:	1d3b      	adds	r3, r7, #4
   22824:	1c0a      	adds	r2, r1, #0
   22826:	801a      	strh	r2, [r3, #0]
	uint8 rx_buf[8];
	if (u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
   22828:	1dfb      	adds	r3, r7, #7
   2282a:	781b      	ldrb	r3, [r3, #0]
   2282c:	2b2c      	cmp	r3, #44	; 0x2c
   2282e:	d116      	bne.n	2285e <m2m_wifi_cb+0x4a>
	{
		tstrM2mWifiStateChanged strState;
		if (hif_receive(u32Addr, (uint8*) &strState,sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
   22830:	23a4      	movs	r3, #164	; 0xa4
   22832:	18f9      	adds	r1, r7, r3
   22834:	6838      	ldr	r0, [r7, #0]
   22836:	2300      	movs	r3, #0
   22838:	2204      	movs	r2, #4
   2283a:	4cca      	ldr	r4, [pc, #808]	; (22b64 <m2m_wifi_cb+0x350>)
   2283c:	47a0      	blx	r4
   2283e:	1e03      	subs	r3, r0, #0
   22840:	d000      	beq.n	22844 <m2m_wifi_cb+0x30>
   22842:	e1b4      	b.n	22bae <m2m_wifi_cb+0x39a>
		{
			if (gpfAppWifiCb)
   22844:	4bc8      	ldr	r3, [pc, #800]	; (22b68 <m2m_wifi_cb+0x354>)
   22846:	681b      	ldr	r3, [r3, #0]
   22848:	2b00      	cmp	r3, #0
   2284a:	d100      	bne.n	2284e <m2m_wifi_cb+0x3a>
   2284c:	e1af      	b.n	22bae <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
   2284e:	4bc6      	ldr	r3, [pc, #792]	; (22b68 <m2m_wifi_cb+0x354>)
   22850:	681b      	ldr	r3, [r3, #0]
   22852:	22a4      	movs	r2, #164	; 0xa4
   22854:	18ba      	adds	r2, r7, r2
   22856:	0011      	movs	r1, r2
   22858:	202c      	movs	r0, #44	; 0x2c
   2285a:	4798      	blx	r3
#endif
	else
	{
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
	}
}
   2285c:	e1a7      	b.n	22bae <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
   2285e:	1dfb      	adds	r3, r7, #7
   22860:	781b      	ldrb	r3, [r3, #0]
   22862:	2b1b      	cmp	r3, #27
   22864:	d116      	bne.n	22894 <m2m_wifi_cb+0x80>
		if (hif_receive(u32Addr, (uint8*) &strSysTime,sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
   22866:	239c      	movs	r3, #156	; 0x9c
   22868:	18f9      	adds	r1, r7, r3
   2286a:	6838      	ldr	r0, [r7, #0]
   2286c:	2300      	movs	r3, #0
   2286e:	2208      	movs	r2, #8
   22870:	4cbc      	ldr	r4, [pc, #752]	; (22b64 <m2m_wifi_cb+0x350>)
   22872:	47a0      	blx	r4
   22874:	1e03      	subs	r3, r0, #0
   22876:	d000      	beq.n	2287a <m2m_wifi_cb+0x66>
   22878:	e199      	b.n	22bae <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   2287a:	4bbb      	ldr	r3, [pc, #748]	; (22b68 <m2m_wifi_cb+0x354>)
   2287c:	681b      	ldr	r3, [r3, #0]
   2287e:	2b00      	cmp	r3, #0
   22880:	d100      	bne.n	22884 <m2m_wifi_cb+0x70>
   22882:	e194      	b.n	22bae <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
   22884:	4bb8      	ldr	r3, [pc, #736]	; (22b68 <m2m_wifi_cb+0x354>)
   22886:	681b      	ldr	r3, [r3, #0]
   22888:	229c      	movs	r2, #156	; 0x9c
   2288a:	18ba      	adds	r2, r7, r2
   2288c:	0011      	movs	r1, r2
   2288e:	201b      	movs	r0, #27
   22890:	4798      	blx	r3
}
   22892:	e18c      	b.n	22bae <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
   22894:	1dfb      	adds	r3, r7, #7
   22896:	781b      	ldrb	r3, [r3, #0]
   22898:	2b06      	cmp	r3, #6
   2289a:	d116      	bne.n	228ca <m2m_wifi_cb+0xb6>
		if(hif_receive(u32Addr, (uint8*)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
   2289c:	230c      	movs	r3, #12
   2289e:	18f9      	adds	r1, r7, r3
   228a0:	6838      	ldr	r0, [r7, #0]
   228a2:	2301      	movs	r3, #1
   228a4:	2230      	movs	r2, #48	; 0x30
   228a6:	4caf      	ldr	r4, [pc, #700]	; (22b64 <m2m_wifi_cb+0x350>)
   228a8:	47a0      	blx	r4
   228aa:	1e03      	subs	r3, r0, #0
   228ac:	d000      	beq.n	228b0 <m2m_wifi_cb+0x9c>
   228ae:	e17e      	b.n	22bae <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   228b0:	4bad      	ldr	r3, [pc, #692]	; (22b68 <m2m_wifi_cb+0x354>)
   228b2:	681b      	ldr	r3, [r3, #0]
   228b4:	2b00      	cmp	r3, #0
   228b6:	d100      	bne.n	228ba <m2m_wifi_cb+0xa6>
   228b8:	e179      	b.n	22bae <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
   228ba:	4bab      	ldr	r3, [pc, #684]	; (22b68 <m2m_wifi_cb+0x354>)
   228bc:	681b      	ldr	r3, [r3, #0]
   228be:	220c      	movs	r2, #12
   228c0:	18ba      	adds	r2, r7, r2
   228c2:	0011      	movs	r1, r2
   228c4:	2006      	movs	r0, #6
   228c6:	4798      	blx	r3
}
   228c8:	e171      	b.n	22bae <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
   228ca:	1dfb      	adds	r3, r7, #7
   228cc:	781b      	ldrb	r3, [r3, #0]
   228ce:	2b0e      	cmp	r3, #14
   228d0:	d100      	bne.n	228d4 <m2m_wifi_cb+0xc0>
   228d2:	e16c      	b.n	22bae <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
   228d4:	1dfb      	adds	r3, r7, #7
   228d6:	781b      	ldrb	r3, [r3, #0]
   228d8:	2b32      	cmp	r3, #50	; 0x32
   228da:	d116      	bne.n	2290a <m2m_wifi_cb+0xf6>
		if (hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
   228dc:	2384      	movs	r3, #132	; 0x84
   228de:	18f9      	adds	r1, r7, r3
   228e0:	6838      	ldr	r0, [r7, #0]
   228e2:	2300      	movs	r3, #0
   228e4:	2218      	movs	r2, #24
   228e6:	4c9f      	ldr	r4, [pc, #636]	; (22b64 <m2m_wifi_cb+0x350>)
   228e8:	47a0      	blx	r4
   228ea:	1e03      	subs	r3, r0, #0
   228ec:	d000      	beq.n	228f0 <m2m_wifi_cb+0xdc>
   228ee:	e15e      	b.n	22bae <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   228f0:	4b9d      	ldr	r3, [pc, #628]	; (22b68 <m2m_wifi_cb+0x354>)
   228f2:	681b      	ldr	r3, [r3, #0]
   228f4:	2b00      	cmp	r3, #0
   228f6:	d100      	bne.n	228fa <m2m_wifi_cb+0xe6>
   228f8:	e159      	b.n	22bae <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
   228fa:	4b9b      	ldr	r3, [pc, #620]	; (22b68 <m2m_wifi_cb+0x354>)
   228fc:	681b      	ldr	r3, [r3, #0]
   228fe:	2284      	movs	r2, #132	; 0x84
   22900:	18ba      	adds	r2, r7, r2
   22902:	0011      	movs	r1, r2
   22904:	2032      	movs	r0, #50	; 0x32
   22906:	4798      	blx	r3
}
   22908:	e151      	b.n	22bae <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_REQ_WPS)
   2290a:	1dfb      	adds	r3, r7, #7
   2290c:	781b      	ldrb	r3, [r3, #0]
   2290e:	2b2f      	cmp	r3, #47	; 0x2f
   22910:	d11d      	bne.n	2294e <m2m_wifi_cb+0x13a>
		m2m_memset((uint8*)&strWps,0,sizeof(tstrM2MWPSInfo));
   22912:	230c      	movs	r3, #12
   22914:	18fb      	adds	r3, r7, r3
   22916:	2264      	movs	r2, #100	; 0x64
   22918:	2100      	movs	r1, #0
   2291a:	0018      	movs	r0, r3
   2291c:	4b93      	ldr	r3, [pc, #588]	; (22b6c <m2m_wifi_cb+0x358>)
   2291e:	4798      	blx	r3
		if(hif_receive(u32Addr, (uint8*)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
   22920:	230c      	movs	r3, #12
   22922:	18f9      	adds	r1, r7, r3
   22924:	6838      	ldr	r0, [r7, #0]
   22926:	2300      	movs	r3, #0
   22928:	2264      	movs	r2, #100	; 0x64
   2292a:	4c8e      	ldr	r4, [pc, #568]	; (22b64 <m2m_wifi_cb+0x350>)
   2292c:	47a0      	blx	r4
   2292e:	1e03      	subs	r3, r0, #0
   22930:	d000      	beq.n	22934 <m2m_wifi_cb+0x120>
   22932:	e13c      	b.n	22bae <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   22934:	4b8c      	ldr	r3, [pc, #560]	; (22b68 <m2m_wifi_cb+0x354>)
   22936:	681b      	ldr	r3, [r3, #0]
   22938:	2b00      	cmp	r3, #0
   2293a:	d100      	bne.n	2293e <m2m_wifi_cb+0x12a>
   2293c:	e137      	b.n	22bae <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
   2293e:	4b8a      	ldr	r3, [pc, #552]	; (22b68 <m2m_wifi_cb+0x354>)
   22940:	681b      	ldr	r3, [r3, #0]
   22942:	220c      	movs	r2, #12
   22944:	18ba      	adds	r2, r7, r2
   22946:	0011      	movs	r1, r2
   22948:	202f      	movs	r0, #47	; 0x2f
   2294a:	4798      	blx	r3
}
   2294c:	e12f      	b.n	22bae <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
   2294e:	1dfb      	adds	r3, r7, #7
   22950:	781b      	ldrb	r3, [r3, #0]
   22952:	2b34      	cmp	r3, #52	; 0x34
   22954:	d137      	bne.n	229c6 <m2m_wifi_cb+0x1b2>
		if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
   22956:	2380      	movs	r3, #128	; 0x80
   22958:	18f9      	adds	r1, r7, r3
   2295a:	6838      	ldr	r0, [r7, #0]
   2295c:	2300      	movs	r3, #0
   2295e:	2204      	movs	r2, #4
   22960:	4c80      	ldr	r4, [pc, #512]	; (22b64 <m2m_wifi_cb+0x350>)
   22962:	47a0      	blx	r4
   22964:	1e03      	subs	r3, r0, #0
   22966:	d000      	beq.n	2296a <m2m_wifi_cb+0x156>
   22968:	e121      	b.n	22bae <m2m_wifi_cb+0x39a>
			M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n", 
   2296a:	4b81      	ldr	r3, [pc, #516]	; (22b70 <m2m_wifi_cb+0x35c>)
   2296c:	0018      	movs	r0, r3
   2296e:	4b81      	ldr	r3, [pc, #516]	; (22b74 <m2m_wifi_cb+0x360>)
   22970:	4798      	blx	r3
   22972:	2380      	movs	r3, #128	; 0x80
   22974:	18fb      	adds	r3, r7, r3
   22976:	681b      	ldr	r3, [r3, #0]
   22978:	0e1b      	lsrs	r3, r3, #24
   2297a:	b2db      	uxtb	r3, r3
   2297c:	0019      	movs	r1, r3
   2297e:	2380      	movs	r3, #128	; 0x80
   22980:	18fb      	adds	r3, r7, r3
   22982:	681b      	ldr	r3, [r3, #0]
   22984:	0c1b      	lsrs	r3, r3, #16
   22986:	b2db      	uxtb	r3, r3
   22988:	001a      	movs	r2, r3
   2298a:	2380      	movs	r3, #128	; 0x80
   2298c:	18fb      	adds	r3, r7, r3
   2298e:	681b      	ldr	r3, [r3, #0]
   22990:	0a1b      	lsrs	r3, r3, #8
   22992:	b2db      	uxtb	r3, r3
   22994:	001c      	movs	r4, r3
   22996:	2380      	movs	r3, #128	; 0x80
   22998:	18fb      	adds	r3, r7, r3
   2299a:	681b      	ldr	r3, [r3, #0]
   2299c:	b2db      	uxtb	r3, r3
   2299e:	4876      	ldr	r0, [pc, #472]	; (22b78 <m2m_wifi_cb+0x364>)
   229a0:	9300      	str	r3, [sp, #0]
   229a2:	0023      	movs	r3, r4
   229a4:	4c73      	ldr	r4, [pc, #460]	; (22b74 <m2m_wifi_cb+0x360>)
   229a6:	47a0      	blx	r4
   229a8:	4b74      	ldr	r3, [pc, #464]	; (22b7c <m2m_wifi_cb+0x368>)
   229aa:	0018      	movs	r0, r3
   229ac:	4b71      	ldr	r3, [pc, #452]	; (22b74 <m2m_wifi_cb+0x360>)
   229ae:	4798      	blx	r3
			if (gpfAppWifiCb)
   229b0:	4b6d      	ldr	r3, [pc, #436]	; (22b68 <m2m_wifi_cb+0x354>)
   229b2:	681b      	ldr	r3, [r3, #0]
   229b4:	2b00      	cmp	r3, #0
   229b6:	d100      	bne.n	229ba <m2m_wifi_cb+0x1a6>
   229b8:	e0f9      	b.n	22bae <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
   229ba:	4b6b      	ldr	r3, [pc, #428]	; (22b68 <m2m_wifi_cb+0x354>)
   229bc:	681b      	ldr	r3, [r3, #0]
   229be:	2100      	movs	r1, #0
   229c0:	2034      	movs	r0, #52	; 0x34
   229c2:	4798      	blx	r3
}
   229c4:	e0f3      	b.n	22bae <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
   229c6:	1dfb      	adds	r3, r7, #7
   229c8:	781b      	ldrb	r3, [r3, #0]
   229ca:	2b11      	cmp	r3, #17
   229cc:	d11e      	bne.n	22a0c <m2m_wifi_cb+0x1f8>
		gu8scanInProgress = 0;
   229ce:	4b6c      	ldr	r3, [pc, #432]	; (22b80 <m2m_wifi_cb+0x36c>)
   229d0:	2200      	movs	r2, #0
   229d2:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Addr, (uint8*)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
   229d4:	237c      	movs	r3, #124	; 0x7c
   229d6:	18f9      	adds	r1, r7, r3
   229d8:	6838      	ldr	r0, [r7, #0]
   229da:	2300      	movs	r3, #0
   229dc:	2204      	movs	r2, #4
   229de:	4c61      	ldr	r4, [pc, #388]	; (22b64 <m2m_wifi_cb+0x350>)
   229e0:	47a0      	blx	r4
   229e2:	1e03      	subs	r3, r0, #0
   229e4:	d000      	beq.n	229e8 <m2m_wifi_cb+0x1d4>
   229e6:	e0e2      	b.n	22bae <m2m_wifi_cb+0x39a>
			gu8ChNum = strState.u8NumofCh;
   229e8:	237c      	movs	r3, #124	; 0x7c
   229ea:	18fb      	adds	r3, r7, r3
   229ec:	781a      	ldrb	r2, [r3, #0]
   229ee:	4b65      	ldr	r3, [pc, #404]	; (22b84 <m2m_wifi_cb+0x370>)
   229f0:	701a      	strb	r2, [r3, #0]
			if (gpfAppWifiCb)
   229f2:	4b5d      	ldr	r3, [pc, #372]	; (22b68 <m2m_wifi_cb+0x354>)
   229f4:	681b      	ldr	r3, [r3, #0]
   229f6:	2b00      	cmp	r3, #0
   229f8:	d100      	bne.n	229fc <m2m_wifi_cb+0x1e8>
   229fa:	e0d8      	b.n	22bae <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
   229fc:	4b5a      	ldr	r3, [pc, #360]	; (22b68 <m2m_wifi_cb+0x354>)
   229fe:	681b      	ldr	r3, [r3, #0]
   22a00:	227c      	movs	r2, #124	; 0x7c
   22a02:	18ba      	adds	r2, r7, r2
   22a04:	0011      	movs	r1, r2
   22a06:	2011      	movs	r0, #17
   22a08:	4798      	blx	r3
}
   22a0a:	e0d0      	b.n	22bae <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
   22a0c:	1dfb      	adds	r3, r7, #7
   22a0e:	781b      	ldrb	r3, [r3, #0]
   22a10:	2b13      	cmp	r3, #19
   22a12:	d116      	bne.n	22a42 <m2m_wifi_cb+0x22e>
		if(hif_receive(u32Addr, (uint8*)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
   22a14:	230c      	movs	r3, #12
   22a16:	18f9      	adds	r1, r7, r3
   22a18:	6838      	ldr	r0, [r7, #0]
   22a1a:	2300      	movs	r3, #0
   22a1c:	222c      	movs	r2, #44	; 0x2c
   22a1e:	4c51      	ldr	r4, [pc, #324]	; (22b64 <m2m_wifi_cb+0x350>)
   22a20:	47a0      	blx	r4
   22a22:	1e03      	subs	r3, r0, #0
   22a24:	d000      	beq.n	22a28 <m2m_wifi_cb+0x214>
   22a26:	e0c2      	b.n	22bae <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   22a28:	4b4f      	ldr	r3, [pc, #316]	; (22b68 <m2m_wifi_cb+0x354>)
   22a2a:	681b      	ldr	r3, [r3, #0]
   22a2c:	2b00      	cmp	r3, #0
   22a2e:	d100      	bne.n	22a32 <m2m_wifi_cb+0x21e>
   22a30:	e0bd      	b.n	22bae <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
   22a32:	4b4d      	ldr	r3, [pc, #308]	; (22b68 <m2m_wifi_cb+0x354>)
   22a34:	681b      	ldr	r3, [r3, #0]
   22a36:	220c      	movs	r2, #12
   22a38:	18ba      	adds	r2, r7, r2
   22a3a:	0011      	movs	r1, r2
   22a3c:	2013      	movs	r0, #19
   22a3e:	4798      	blx	r3
}
   22a40:	e0b5      	b.n	22bae <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
   22a42:	1dfb      	adds	r3, r7, #7
   22a44:	781b      	ldrb	r3, [r3, #0]
   22a46:	2b04      	cmp	r3, #4
   22a48:	d116      	bne.n	22a78 <m2m_wifi_cb+0x264>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   22a4a:	23a8      	movs	r3, #168	; 0xa8
   22a4c:	18f9      	adds	r1, r7, r3
   22a4e:	6838      	ldr	r0, [r7, #0]
   22a50:	2300      	movs	r3, #0
   22a52:	2204      	movs	r2, #4
   22a54:	4c43      	ldr	r4, [pc, #268]	; (22b64 <m2m_wifi_cb+0x350>)
   22a56:	47a0      	blx	r4
   22a58:	1e03      	subs	r3, r0, #0
   22a5a:	d000      	beq.n	22a5e <m2m_wifi_cb+0x24a>
   22a5c:	e0a7      	b.n	22bae <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   22a5e:	4b42      	ldr	r3, [pc, #264]	; (22b68 <m2m_wifi_cb+0x354>)
   22a60:	681b      	ldr	r3, [r3, #0]
   22a62:	2b00      	cmp	r3, #0
   22a64:	d100      	bne.n	22a68 <m2m_wifi_cb+0x254>
   22a66:	e0a2      	b.n	22bae <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
   22a68:	4b3f      	ldr	r3, [pc, #252]	; (22b68 <m2m_wifi_cb+0x354>)
   22a6a:	681b      	ldr	r3, [r3, #0]
   22a6c:	22a8      	movs	r2, #168	; 0xa8
   22a6e:	18ba      	adds	r2, r7, r2
   22a70:	0011      	movs	r1, r2
   22a72:	2004      	movs	r0, #4
   22a74:	4798      	blx	r3
}
   22a76:	e09a      	b.n	22bae <m2m_wifi_cb+0x39a>
	else if (u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
   22a78:	1dfb      	adds	r3, r7, #7
   22a7a:	781b      	ldrb	r3, [r3, #0]
   22a7c:	2b65      	cmp	r3, #101	; 0x65
   22a7e:	d116      	bne.n	22aae <m2m_wifi_cb+0x29a>
		if (hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
   22a80:	23a8      	movs	r3, #168	; 0xa8
   22a82:	18f9      	adds	r1, r7, r3
   22a84:	6838      	ldr	r0, [r7, #0]
   22a86:	2300      	movs	r3, #0
   22a88:	2204      	movs	r2, #4
   22a8a:	4c36      	ldr	r4, [pc, #216]	; (22b64 <m2m_wifi_cb+0x350>)
   22a8c:	47a0      	blx	r4
   22a8e:	1e03      	subs	r3, r0, #0
   22a90:	d000      	beq.n	22a94 <m2m_wifi_cb+0x280>
   22a92:	e08c      	b.n	22bae <m2m_wifi_cb+0x39a>
			if (gpfAppWifiCb)
   22a94:	4b34      	ldr	r3, [pc, #208]	; (22b68 <m2m_wifi_cb+0x354>)
   22a96:	681b      	ldr	r3, [r3, #0]
   22a98:	2b00      	cmp	r3, #0
   22a9a:	d100      	bne.n	22a9e <m2m_wifi_cb+0x28a>
   22a9c:	e087      	b.n	22bae <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
   22a9e:	4b32      	ldr	r3, [pc, #200]	; (22b68 <m2m_wifi_cb+0x354>)
   22aa0:	681b      	ldr	r3, [r3, #0]
   22aa2:	22a8      	movs	r2, #168	; 0xa8
   22aa4:	18ba      	adds	r2, r7, r2
   22aa6:	0011      	movs	r1, r2
   22aa8:	2065      	movs	r0, #101	; 0x65
   22aaa:	4798      	blx	r3
}
   22aac:	e07f      	b.n	22bae <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
   22aae:	1dfb      	adds	r3, r7, #7
   22ab0:	781b      	ldrb	r3, [r3, #0]
   22ab2:	2b09      	cmp	r3, #9
   22ab4:	d116      	bne.n	22ae4 <m2m_wifi_cb+0x2d0>
		if(hif_receive(u32Addr, (uint8*)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
   22ab6:	230c      	movs	r3, #12
   22ab8:	18f9      	adds	r1, r7, r3
   22aba:	6838      	ldr	r0, [r7, #0]
   22abc:	2301      	movs	r3, #1
   22abe:	2264      	movs	r2, #100	; 0x64
   22ac0:	4c28      	ldr	r4, [pc, #160]	; (22b64 <m2m_wifi_cb+0x350>)
   22ac2:	47a0      	blx	r4
   22ac4:	1e03      	subs	r3, r0, #0
   22ac6:	d000      	beq.n	22aca <m2m_wifi_cb+0x2b6>
   22ac8:	e071      	b.n	22bae <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   22aca:	4b27      	ldr	r3, [pc, #156]	; (22b68 <m2m_wifi_cb+0x354>)
   22acc:	681b      	ldr	r3, [r3, #0]
   22ace:	2b00      	cmp	r3, #0
   22ad0:	d100      	bne.n	22ad4 <m2m_wifi_cb+0x2c0>
   22ad2:	e06c      	b.n	22bae <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
   22ad4:	4b24      	ldr	r3, [pc, #144]	; (22b68 <m2m_wifi_cb+0x354>)
   22ad6:	681b      	ldr	r3, [r3, #0]
   22ad8:	220c      	movs	r2, #12
   22ada:	18ba      	adds	r2, r7, r2
   22adc:	0011      	movs	r1, r2
   22ade:	2009      	movs	r0, #9
   22ae0:	4798      	blx	r3
}
   22ae2:	e064      	b.n	22bae <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
   22ae4:	1dfb      	adds	r3, r7, #7
   22ae6:	781b      	ldrb	r3, [r3, #0]
   22ae8:	2b2a      	cmp	r3, #42	; 0x2a
   22aea:	d114      	bne.n	22b16 <m2m_wifi_cb+0x302>
		if(hif_receive(u32Addr, (uint8*)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
   22aec:	2378      	movs	r3, #120	; 0x78
   22aee:	18f9      	adds	r1, r7, r3
   22af0:	6838      	ldr	r0, [r7, #0]
   22af2:	2301      	movs	r3, #1
   22af4:	2204      	movs	r2, #4
   22af6:	4c1b      	ldr	r4, [pc, #108]	; (22b64 <m2m_wifi_cb+0x350>)
   22af8:	47a0      	blx	r4
   22afa:	1e03      	subs	r3, r0, #0
   22afc:	d157      	bne.n	22bae <m2m_wifi_cb+0x39a>
			if(gpfAppWifiCb)
   22afe:	4b1a      	ldr	r3, [pc, #104]	; (22b68 <m2m_wifi_cb+0x354>)
   22b00:	681b      	ldr	r3, [r3, #0]
   22b02:	2b00      	cmp	r3, #0
   22b04:	d053      	beq.n	22bae <m2m_wifi_cb+0x39a>
				gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
   22b06:	4b18      	ldr	r3, [pc, #96]	; (22b68 <m2m_wifi_cb+0x354>)
   22b08:	681b      	ldr	r3, [r3, #0]
   22b0a:	2278      	movs	r2, #120	; 0x78
   22b0c:	18ba      	adds	r2, r7, r2
   22b0e:	0011      	movs	r1, r2
   22b10:	202a      	movs	r0, #42	; 0x2a
   22b12:	4798      	blx	r3
}
   22b14:	e04b      	b.n	22bae <m2m_wifi_cb+0x39a>
	else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
   22b16:	1dfb      	adds	r3, r7, #7
   22b18:	781b      	ldrb	r3, [r3, #0]
   22b1a:	2b20      	cmp	r3, #32
   22b1c:	d134      	bne.n	22b88 <m2m_wifi_cb+0x374>
		if(hif_receive(u32Addr, (uint8*)&strPrng,sizeof(tstrPrng), 0) == M2M_SUCCESS)
   22b1e:	2370      	movs	r3, #112	; 0x70
   22b20:	18f9      	adds	r1, r7, r3
   22b22:	6838      	ldr	r0, [r7, #0]
   22b24:	2300      	movs	r3, #0
   22b26:	2208      	movs	r2, #8
   22b28:	4c0e      	ldr	r4, [pc, #56]	; (22b64 <m2m_wifi_cb+0x350>)
   22b2a:	47a0      	blx	r4
   22b2c:	1e03      	subs	r3, r0, #0
   22b2e:	d13e      	bne.n	22bae <m2m_wifi_cb+0x39a>
			if(hif_receive(u32Addr + sizeof(tstrPrng),strPrng.pu8RngBuff,strPrng.u16PrngSize, 1) == M2M_SUCCESS)
   22b30:	683b      	ldr	r3, [r7, #0]
   22b32:	3308      	adds	r3, #8
   22b34:	0018      	movs	r0, r3
   22b36:	2370      	movs	r3, #112	; 0x70
   22b38:	18fb      	adds	r3, r7, r3
   22b3a:	6819      	ldr	r1, [r3, #0]
   22b3c:	2370      	movs	r3, #112	; 0x70
   22b3e:	18fb      	adds	r3, r7, r3
   22b40:	889a      	ldrh	r2, [r3, #4]
   22b42:	2301      	movs	r3, #1
   22b44:	4c07      	ldr	r4, [pc, #28]	; (22b64 <m2m_wifi_cb+0x350>)
   22b46:	47a0      	blx	r4
   22b48:	1e03      	subs	r3, r0, #0
   22b4a:	d130      	bne.n	22bae <m2m_wifi_cb+0x39a>
				if(gpfAppWifiCb)
   22b4c:	4b06      	ldr	r3, [pc, #24]	; (22b68 <m2m_wifi_cb+0x354>)
   22b4e:	681b      	ldr	r3, [r3, #0]
   22b50:	2b00      	cmp	r3, #0
   22b52:	d02c      	beq.n	22bae <m2m_wifi_cb+0x39a>
					gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG,&strPrng);
   22b54:	4b04      	ldr	r3, [pc, #16]	; (22b68 <m2m_wifi_cb+0x354>)
   22b56:	681b      	ldr	r3, [r3, #0]
   22b58:	2270      	movs	r2, #112	; 0x70
   22b5a:	18ba      	adds	r2, r7, r2
   22b5c:	0011      	movs	r1, r2
   22b5e:	2020      	movs	r0, #32
   22b60:	4798      	blx	r3
}
   22b62:	e024      	b.n	22bae <m2m_wifi_cb+0x39a>
   22b64:	000225d9 	.word	0x000225d9
   22b68:	200042a8 	.word	0x200042a8
   22b6c:	00021a5d 	.word	0x00021a5d
   22b70:	000397ec 	.word	0x000397ec
   22b74:	0001ed29 	.word	0x0001ed29
   22b78:	000397f8 	.word	0x000397f8
   22b7c:	00039818 	.word	0x00039818
   22b80:	200042a5 	.word	0x200042a5
   22b84:	200042a4 	.word	0x200042a4
		M2M_ERR("REQ Not defined %d\n",u8OpCode);
   22b88:	2324      	movs	r3, #36	; 0x24
   22b8a:	33ff      	adds	r3, #255	; 0xff
   22b8c:	001a      	movs	r2, r3
   22b8e:	490a      	ldr	r1, [pc, #40]	; (22bb8 <m2m_wifi_cb+0x3a4>)
   22b90:	4b0a      	ldr	r3, [pc, #40]	; (22bbc <m2m_wifi_cb+0x3a8>)
   22b92:	0018      	movs	r0, r3
   22b94:	4b0a      	ldr	r3, [pc, #40]	; (22bc0 <m2m_wifi_cb+0x3ac>)
   22b96:	4798      	blx	r3
   22b98:	1dfb      	adds	r3, r7, #7
   22b9a:	781a      	ldrb	r2, [r3, #0]
   22b9c:	4b09      	ldr	r3, [pc, #36]	; (22bc4 <m2m_wifi_cb+0x3b0>)
   22b9e:	0011      	movs	r1, r2
   22ba0:	0018      	movs	r0, r3
   22ba2:	4b07      	ldr	r3, [pc, #28]	; (22bc0 <m2m_wifi_cb+0x3ac>)
   22ba4:	4798      	blx	r3
   22ba6:	4b08      	ldr	r3, [pc, #32]	; (22bc8 <m2m_wifi_cb+0x3b4>)
   22ba8:	0018      	movs	r0, r3
   22baa:	4b05      	ldr	r3, [pc, #20]	; (22bc0 <m2m_wifi_cb+0x3ac>)
   22bac:	4798      	blx	r3
}
   22bae:	46c0      	nop			; (mov r8, r8)
   22bb0:	46bd      	mov	sp, r7
   22bb2:	b02d      	add	sp, #180	; 0xb4
   22bb4:	bd90      	pop	{r4, r7, pc}
   22bb6:	46c0      	nop			; (mov r8, r8)
   22bb8:	00039bb8 	.word	0x00039bb8
   22bbc:	0003981c 	.word	0x0003981c
   22bc0:	0001ed29 	.word	0x0001ed29
   22bc4:	00039830 	.word	0x00039830
   22bc8:	00039818 	.word	0x00039818

00022bcc <m2m_wifi_init>:
	s8Ret = hif_send(M2M_REQ_GROUP_SSL, M2M_SSL_IND_CRL|M2M_REQ_DATA_PKT, NULL, 0, (uint8*)pCRL, sizeof(tstrTlsCrlInfo), 0);
	return s8Ret;
}

sint8 m2m_wifi_init(tstrWifiInitParam * param)
{
   22bcc:	b590      	push	{r4, r7, lr}
   22bce:	b091      	sub	sp, #68	; 0x44
   22bd0:	af02      	add	r7, sp, #8
   22bd2:	6078      	str	r0, [r7, #4]
	tstrM2mRev strtmp;
	sint8 ret = M2M_SUCCESS;
   22bd4:	2337      	movs	r3, #55	; 0x37
   22bd6:	18fb      	adds	r3, r7, r3
   22bd8:	2200      	movs	r2, #0
   22bda:	701a      	strb	r2, [r3, #0]
	uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
   22bdc:	230b      	movs	r3, #11
   22bde:	18fb      	adds	r3, r7, r3
   22be0:	2201      	movs	r2, #1
   22be2:	701a      	strb	r2, [r3, #0]
	
	if(param == NULL) {
   22be4:	687b      	ldr	r3, [r7, #4]
   22be6:	2b00      	cmp	r3, #0
   22be8:	d104      	bne.n	22bf4 <m2m_wifi_init+0x28>
		ret = M2M_ERR_FAIL;
   22bea:	2337      	movs	r3, #55	; 0x37
   22bec:	18fb      	adds	r3, r7, r3
   22bee:	22f4      	movs	r2, #244	; 0xf4
   22bf0:	701a      	strb	r2, [r3, #0]
		goto _EXIT0;
   22bf2:	e0b3      	b.n	22d5c <m2m_wifi_init+0x190>
	}
	
	gpfAppWifiCb = param->pfAppWifiCb;
   22bf4:	687b      	ldr	r3, [r7, #4]
   22bf6:	681a      	ldr	r2, [r3, #0]
   22bf8:	4b5c      	ldr	r3, [pc, #368]	; (22d6c <m2m_wifi_init+0x1a0>)
   22bfa:	601a      	str	r2, [r3, #0]
#endif /* ETH_MODE */

#ifdef CONF_MGMT
	gpfAppMonCb  = param->pfAppMonCb;
#endif
	gu8scanInProgress = 0;
   22bfc:	4b5c      	ldr	r3, [pc, #368]	; (22d70 <m2m_wifi_init+0x1a4>)
   22bfe:	2200      	movs	r2, #0
   22c00:	701a      	strb	r2, [r3, #0]
	/* Apply device specific initialization. */
	ret = nm_drv_init(&u8WifiMode);
   22c02:	2337      	movs	r3, #55	; 0x37
   22c04:	18fc      	adds	r4, r7, r3
   22c06:	230b      	movs	r3, #11
   22c08:	18fb      	adds	r3, r7, r3
   22c0a:	0018      	movs	r0, r3
   22c0c:	4b59      	ldr	r3, [pc, #356]	; (22d74 <m2m_wifi_init+0x1a8>)
   22c0e:	4798      	blx	r3
   22c10:	0003      	movs	r3, r0
   22c12:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   22c14:	2337      	movs	r3, #55	; 0x37
   22c16:	18fb      	adds	r3, r7, r3
   22c18:	781b      	ldrb	r3, [r3, #0]
   22c1a:	b25b      	sxtb	r3, r3
   22c1c:	2b00      	cmp	r3, #0
   22c1e:	d000      	beq.n	22c22 <m2m_wifi_init+0x56>
   22c20:	e099      	b.n	22d56 <m2m_wifi_init+0x18a>
	/* Initialize host interface module */
	ret = hif_init(NULL);
   22c22:	2337      	movs	r3, #55	; 0x37
   22c24:	18fc      	adds	r4, r7, r3
   22c26:	2000      	movs	r0, #0
   22c28:	4b53      	ldr	r3, [pc, #332]	; (22d78 <m2m_wifi_init+0x1ac>)
   22c2a:	4798      	blx	r3
   22c2c:	0003      	movs	r3, r0
   22c2e:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   22c30:	2337      	movs	r3, #55	; 0x37
   22c32:	18fb      	adds	r3, r7, r3
   22c34:	781b      	ldrb	r3, [r3, #0]
   22c36:	b25b      	sxtb	r3, r3
   22c38:	2b00      	cmp	r3, #0
   22c3a:	d000      	beq.n	22c3e <m2m_wifi_init+0x72>
   22c3c:	e086      	b.n	22d4c <m2m_wifi_init+0x180>

	hif_register_cb(M2M_REQ_GROUP_WIFI,m2m_wifi_cb);
   22c3e:	4b4f      	ldr	r3, [pc, #316]	; (22d7c <m2m_wifi_init+0x1b0>)
   22c40:	0019      	movs	r1, r3
   22c42:	2001      	movs	r0, #1
   22c44:	4b4e      	ldr	r3, [pc, #312]	; (22d80 <m2m_wifi_init+0x1b4>)
   22c46:	4798      	blx	r3

	ret = nm_get_firmware_full_info(&strtmp);
   22c48:	2337      	movs	r3, #55	; 0x37
   22c4a:	18fc      	adds	r4, r7, r3
   22c4c:	230c      	movs	r3, #12
   22c4e:	18fb      	adds	r3, r7, r3
   22c50:	0018      	movs	r0, r3
   22c52:	4b4c      	ldr	r3, [pc, #304]	; (22d84 <m2m_wifi_init+0x1b8>)
   22c54:	4798      	blx	r3
   22c56:	0003      	movs	r3, r0
   22c58:	7023      	strb	r3, [r4, #0]

	M2M_INFO("Firmware ver   : %u.%u.%u Svnrev %u\n", strtmp.u8FirmwareMajor, strtmp.u8FirmwareMinor, strtmp.u8FirmwarePatch,strtmp.u16FirmwareSvnNum);
   22c5a:	4b4b      	ldr	r3, [pc, #300]	; (22d88 <m2m_wifi_init+0x1bc>)
   22c5c:	0018      	movs	r0, r3
   22c5e:	4b4b      	ldr	r3, [pc, #300]	; (22d8c <m2m_wifi_init+0x1c0>)
   22c60:	4798      	blx	r3
   22c62:	230c      	movs	r3, #12
   22c64:	18fb      	adds	r3, r7, r3
   22c66:	791b      	ldrb	r3, [r3, #4]
   22c68:	0019      	movs	r1, r3
   22c6a:	230c      	movs	r3, #12
   22c6c:	18fb      	adds	r3, r7, r3
   22c6e:	795b      	ldrb	r3, [r3, #5]
   22c70:	001a      	movs	r2, r3
   22c72:	230c      	movs	r3, #12
   22c74:	18fb      	adds	r3, r7, r3
   22c76:	799b      	ldrb	r3, [r3, #6]
   22c78:	001c      	movs	r4, r3
   22c7a:	230c      	movs	r3, #12
   22c7c:	18fb      	adds	r3, r7, r3
   22c7e:	8c1b      	ldrh	r3, [r3, #32]
   22c80:	4843      	ldr	r0, [pc, #268]	; (22d90 <m2m_wifi_init+0x1c4>)
   22c82:	9300      	str	r3, [sp, #0]
   22c84:	0023      	movs	r3, r4
   22c86:	4c41      	ldr	r4, [pc, #260]	; (22d8c <m2m_wifi_init+0x1c0>)
   22c88:	47a0      	blx	r4
   22c8a:	4b42      	ldr	r3, [pc, #264]	; (22d94 <m2m_wifi_init+0x1c8>)
   22c8c:	0018      	movs	r0, r3
   22c8e:	4b3f      	ldr	r3, [pc, #252]	; (22d8c <m2m_wifi_init+0x1c0>)
   22c90:	4798      	blx	r3
	M2M_INFO("Firmware Build %s Time %s\n",strtmp.BuildDate,strtmp.BuildTime);
   22c92:	4b3d      	ldr	r3, [pc, #244]	; (22d88 <m2m_wifi_init+0x1bc>)
   22c94:	0018      	movs	r0, r3
   22c96:	4b3d      	ldr	r3, [pc, #244]	; (22d8c <m2m_wifi_init+0x1c0>)
   22c98:	4798      	blx	r3
   22c9a:	230c      	movs	r3, #12
   22c9c:	18fb      	adds	r3, r7, r3
   22c9e:	3316      	adds	r3, #22
   22ca0:	001a      	movs	r2, r3
   22ca2:	230c      	movs	r3, #12
   22ca4:	18fb      	adds	r3, r7, r3
   22ca6:	330a      	adds	r3, #10
   22ca8:	0019      	movs	r1, r3
   22caa:	4b3b      	ldr	r3, [pc, #236]	; (22d98 <m2m_wifi_init+0x1cc>)
   22cac:	0018      	movs	r0, r3
   22cae:	4b37      	ldr	r3, [pc, #220]	; (22d8c <m2m_wifi_init+0x1c0>)
   22cb0:	4798      	blx	r3
   22cb2:	4b38      	ldr	r3, [pc, #224]	; (22d94 <m2m_wifi_init+0x1c8>)
   22cb4:	0018      	movs	r0, r3
   22cb6:	4b35      	ldr	r3, [pc, #212]	; (22d8c <m2m_wifi_init+0x1c0>)
   22cb8:	4798      	blx	r3
	M2M_INFO("Firmware Min driver ver : %u.%u.%u\n", strtmp.u8DriverMajor, strtmp.u8DriverMinor, strtmp.u8DriverPatch);
   22cba:	4b33      	ldr	r3, [pc, #204]	; (22d88 <m2m_wifi_init+0x1bc>)
   22cbc:	0018      	movs	r0, r3
   22cbe:	4b33      	ldr	r3, [pc, #204]	; (22d8c <m2m_wifi_init+0x1c0>)
   22cc0:	4798      	blx	r3
   22cc2:	230c      	movs	r3, #12
   22cc4:	18fb      	adds	r3, r7, r3
   22cc6:	79db      	ldrb	r3, [r3, #7]
   22cc8:	0019      	movs	r1, r3
   22cca:	230c      	movs	r3, #12
   22ccc:	18fb      	adds	r3, r7, r3
   22cce:	7a1b      	ldrb	r3, [r3, #8]
   22cd0:	001a      	movs	r2, r3
   22cd2:	230c      	movs	r3, #12
   22cd4:	18fb      	adds	r3, r7, r3
   22cd6:	7a5b      	ldrb	r3, [r3, #9]
   22cd8:	4830      	ldr	r0, [pc, #192]	; (22d9c <m2m_wifi_init+0x1d0>)
   22cda:	4c2c      	ldr	r4, [pc, #176]	; (22d8c <m2m_wifi_init+0x1c0>)
   22cdc:	47a0      	blx	r4
   22cde:	4b2d      	ldr	r3, [pc, #180]	; (22d94 <m2m_wifi_init+0x1c8>)
   22ce0:	0018      	movs	r0, r3
   22ce2:	4b2a      	ldr	r3, [pc, #168]	; (22d8c <m2m_wifi_init+0x1c0>)
   22ce4:	4798      	blx	r3
	M2M_INFO("Driver ver: %u.%u.%u\n", M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   22ce6:	4b28      	ldr	r3, [pc, #160]	; (22d88 <m2m_wifi_init+0x1bc>)
   22ce8:	0018      	movs	r0, r3
   22cea:	4b28      	ldr	r3, [pc, #160]	; (22d8c <m2m_wifi_init+0x1c0>)
   22cec:	4798      	blx	r3
   22cee:	482c      	ldr	r0, [pc, #176]	; (22da0 <m2m_wifi_init+0x1d4>)
   22cf0:	2304      	movs	r3, #4
   22cf2:	2205      	movs	r2, #5
   22cf4:	2113      	movs	r1, #19
   22cf6:	4c25      	ldr	r4, [pc, #148]	; (22d8c <m2m_wifi_init+0x1c0>)
   22cf8:	47a0      	blx	r4
   22cfa:	4b26      	ldr	r3, [pc, #152]	; (22d94 <m2m_wifi_init+0x1c8>)
   22cfc:	0018      	movs	r0, r3
   22cfe:	4b23      	ldr	r3, [pc, #140]	; (22d8c <m2m_wifi_init+0x1c0>)
   22d00:	4798      	blx	r3
	M2M_INFO("Driver built at %s\t%s\n",__DATE__,__TIME__);
   22d02:	4b21      	ldr	r3, [pc, #132]	; (22d88 <m2m_wifi_init+0x1bc>)
   22d04:	0018      	movs	r0, r3
   22d06:	4b21      	ldr	r3, [pc, #132]	; (22d8c <m2m_wifi_init+0x1c0>)
   22d08:	4798      	blx	r3
   22d0a:	4a26      	ldr	r2, [pc, #152]	; (22da4 <m2m_wifi_init+0x1d8>)
   22d0c:	4926      	ldr	r1, [pc, #152]	; (22da8 <m2m_wifi_init+0x1dc>)
   22d0e:	4b27      	ldr	r3, [pc, #156]	; (22dac <m2m_wifi_init+0x1e0>)
   22d10:	0018      	movs	r0, r3
   22d12:	4b1e      	ldr	r3, [pc, #120]	; (22d8c <m2m_wifi_init+0x1c0>)
   22d14:	4798      	blx	r3
   22d16:	4b1f      	ldr	r3, [pc, #124]	; (22d94 <m2m_wifi_init+0x1c8>)
   22d18:	0018      	movs	r0, r3
   22d1a:	4b1c      	ldr	r3, [pc, #112]	; (22d8c <m2m_wifi_init+0x1c0>)
   22d1c:	4798      	blx	r3
	if(M2M_ERR_FW_VER_MISMATCH == ret)
   22d1e:	2337      	movs	r3, #55	; 0x37
   22d20:	18fb      	adds	r3, r7, r3
   22d22:	781b      	ldrb	r3, [r3, #0]
   22d24:	b25b      	sxtb	r3, r3
   22d26:	330d      	adds	r3, #13
   22d28:	d117      	bne.n	22d5a <m2m_wifi_init+0x18e>
	{
		M2M_ERR("Mismatch Firmawre Version\n");
   22d2a:	23e8      	movs	r3, #232	; 0xe8
   22d2c:	33ff      	adds	r3, #255	; 0xff
   22d2e:	001a      	movs	r2, r3
   22d30:	491f      	ldr	r1, [pc, #124]	; (22db0 <m2m_wifi_init+0x1e4>)
   22d32:	4b20      	ldr	r3, [pc, #128]	; (22db4 <m2m_wifi_init+0x1e8>)
   22d34:	0018      	movs	r0, r3
   22d36:	4b15      	ldr	r3, [pc, #84]	; (22d8c <m2m_wifi_init+0x1c0>)
   22d38:	4798      	blx	r3
   22d3a:	4b1f      	ldr	r3, [pc, #124]	; (22db8 <m2m_wifi_init+0x1ec>)
   22d3c:	0018      	movs	r0, r3
   22d3e:	4b13      	ldr	r3, [pc, #76]	; (22d8c <m2m_wifi_init+0x1c0>)
   22d40:	4798      	blx	r3
   22d42:	4b14      	ldr	r3, [pc, #80]	; (22d94 <m2m_wifi_init+0x1c8>)
   22d44:	0018      	movs	r0, r3
   22d46:	4b11      	ldr	r3, [pc, #68]	; (22d8c <m2m_wifi_init+0x1c0>)
   22d48:	4798      	blx	r3
	}

	goto _EXIT0;
   22d4a:	e006      	b.n	22d5a <m2m_wifi_init+0x18e>
	if(ret != M2M_SUCCESS) 	goto _EXIT1;
   22d4c:	46c0      	nop			; (mov r8, r8)

_EXIT1:
	nm_drv_deinit(NULL);
   22d4e:	2000      	movs	r0, #0
   22d50:	4b1a      	ldr	r3, [pc, #104]	; (22dbc <m2m_wifi_init+0x1f0>)
   22d52:	4798      	blx	r3
   22d54:	e002      	b.n	22d5c <m2m_wifi_init+0x190>
	if(ret != M2M_SUCCESS) 	goto _EXIT0;
   22d56:	46c0      	nop			; (mov r8, r8)
   22d58:	e000      	b.n	22d5c <m2m_wifi_init+0x190>
	goto _EXIT0;
   22d5a:	46c0      	nop			; (mov r8, r8)
_EXIT0:
	return ret;
   22d5c:	2337      	movs	r3, #55	; 0x37
   22d5e:	18fb      	adds	r3, r7, r3
   22d60:	781b      	ldrb	r3, [r3, #0]
   22d62:	b25b      	sxtb	r3, r3
}
   22d64:	0018      	movs	r0, r3
   22d66:	46bd      	mov	sp, r7
   22d68:	b00f      	add	sp, #60	; 0x3c
   22d6a:	bd90      	pop	{r4, r7, pc}
   22d6c:	200042a8 	.word	0x200042a8
   22d70:	200042a5 	.word	0x200042a5
   22d74:	00023ef1 	.word	0x00023ef1
   22d78:	00021c75 	.word	0x00021c75
   22d7c:	00022815 	.word	0x00022815
   22d80:	00022759 	.word	0x00022759
   22d84:	00023d25 	.word	0x00023d25
   22d88:	000397ec 	.word	0x000397ec
   22d8c:	0001ed29 	.word	0x0001ed29
   22d90:	00039990 	.word	0x00039990
   22d94:	00039818 	.word	0x00039818
   22d98:	000399b8 	.word	0x000399b8
   22d9c:	000399d4 	.word	0x000399d4
   22da0:	000399f8 	.word	0x000399f8
   22da4:	00039a10 	.word	0x00039a10
   22da8:	00039a1c 	.word	0x00039a1c
   22dac:	00039a28 	.word	0x00039a28
   22db0:	00039bc4 	.word	0x00039bc4
   22db4:	0003981c 	.word	0x0003981c
   22db8:	00039a40 	.word	0x00039a40
   22dbc:	00024081 	.word	0x00024081

00022dc0 <m2m_wifi_handle_events>:
{
	hif_yield();
}

sint8 m2m_wifi_handle_events(void * arg)
{
   22dc0:	b580      	push	{r7, lr}
   22dc2:	b082      	sub	sp, #8
   22dc4:	af00      	add	r7, sp, #0
   22dc6:	6078      	str	r0, [r7, #4]
	return hif_handle_isr();
   22dc8:	4b03      	ldr	r3, [pc, #12]	; (22dd8 <m2m_wifi_handle_events+0x18>)
   22dca:	4798      	blx	r3
   22dcc:	0003      	movs	r3, r0
}
   22dce:	0018      	movs	r0, r3
   22dd0:	46bd      	mov	sp, r7
   22dd2:	b002      	add	sp, #8
   22dd4:	bd80      	pop	{r7, pc}
   22dd6:	46c0      	nop			; (mov r8, r8)
   22dd8:	00022539 	.word	0x00022539

00022ddc <m2m_wifi_connect>:
{
	return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DEFAULT_CONNECT, NULL, 0,NULL, 0,0);
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
   22ddc:	b590      	push	{r4, r7, lr}
   22dde:	b087      	sub	sp, #28
   22de0:	af02      	add	r7, sp, #8
   22de2:	60f8      	str	r0, [r7, #12]
   22de4:	0008      	movs	r0, r1
   22de6:	0011      	movs	r1, r2
   22de8:	607b      	str	r3, [r7, #4]
   22dea:	230b      	movs	r3, #11
   22dec:	18fb      	adds	r3, r7, r3
   22dee:	1c02      	adds	r2, r0, #0
   22df0:	701a      	strb	r2, [r3, #0]
   22df2:	230a      	movs	r3, #10
   22df4:	18fb      	adds	r3, r7, r3
   22df6:	1c0a      	adds	r2, r1, #0
   22df8:	701a      	strb	r2, [r3, #0]
	return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch,0);
   22dfa:	687c      	ldr	r4, [r7, #4]
   22dfc:	230a      	movs	r3, #10
   22dfe:	18fb      	adds	r3, r7, r3
   22e00:	781a      	ldrb	r2, [r3, #0]
   22e02:	230b      	movs	r3, #11
   22e04:	18fb      	adds	r3, r7, r3
   22e06:	7819      	ldrb	r1, [r3, #0]
   22e08:	68f8      	ldr	r0, [r7, #12]
   22e0a:	2300      	movs	r3, #0
   22e0c:	9301      	str	r3, [sp, #4]
   22e0e:	2320      	movs	r3, #32
   22e10:	18fb      	adds	r3, r7, r3
   22e12:	881b      	ldrh	r3, [r3, #0]
   22e14:	9300      	str	r3, [sp, #0]
   22e16:	0023      	movs	r3, r4
   22e18:	4c03      	ldr	r4, [pc, #12]	; (22e28 <m2m_wifi_connect+0x4c>)
   22e1a:	47a0      	blx	r4
   22e1c:	0003      	movs	r3, r0
}
   22e1e:	0018      	movs	r0, r3
   22e20:	46bd      	mov	sp, r7
   22e22:	b005      	add	sp, #20
   22e24:	bd90      	pop	{r4, r7, pc}
   22e26:	46c0      	nop			; (mov r8, r8)
   22e28:	00022e2d 	.word	0x00022e2d

00022e2c <m2m_wifi_connect_sc>:
sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
   22e2c:	b5b0      	push	{r4, r5, r7, lr}
   22e2e:	b0aa      	sub	sp, #168	; 0xa8
   22e30:	af04      	add	r7, sp, #16
   22e32:	60f8      	str	r0, [r7, #12]
   22e34:	0008      	movs	r0, r1
   22e36:	0011      	movs	r1, r2
   22e38:	607b      	str	r3, [r7, #4]
   22e3a:	230b      	movs	r3, #11
   22e3c:	18fb      	adds	r3, r7, r3
   22e3e:	1c02      	adds	r2, r0, #0
   22e40:	701a      	strb	r2, [r3, #0]
   22e42:	230a      	movs	r3, #10
   22e44:	18fb      	adds	r3, r7, r3
   22e46:	1c0a      	adds	r2, r1, #0
   22e48:	701a      	strb	r2, [r3, #0]
	sint8				ret = M2M_SUCCESS;
   22e4a:	2397      	movs	r3, #151	; 0x97
   22e4c:	18fb      	adds	r3, r7, r3
   22e4e:	2200      	movs	r2, #0
   22e50:	701a      	strb	r2, [r3, #0]
	tstrM2mWifiConnect	strConnect;
	tstrM2MWifiSecInfo	*pstrAuthInfo;

	if(u8SecType != M2M_WIFI_SEC_OPEN)
   22e52:	230a      	movs	r3, #10
   22e54:	18fb      	adds	r3, r7, r3
   22e56:	781b      	ldrb	r3, [r3, #0]
   22e58:	2b01      	cmp	r3, #1
   22e5a:	d100      	bne.n	22e5e <m2m_wifi_connect_sc+0x32>
   22e5c:	e085      	b.n	22f6a <m2m_wifi_connect_sc+0x13e>
	{
		if(pvAuthInfo == NULL)
   22e5e:	687b      	ldr	r3, [r7, #4]
   22e60:	2b00      	cmp	r3, #0
   22e62:	d112      	bne.n	22e8a <m2m_wifi_connect_sc+0x5e>
		{
			M2M_ERR("Key is not valid\n");
   22e64:	4ad8      	ldr	r2, [pc, #864]	; (231c8 <m2m_wifi_connect_sc+0x39c>)
   22e66:	49d9      	ldr	r1, [pc, #868]	; (231cc <m2m_wifi_connect_sc+0x3a0>)
   22e68:	4bd9      	ldr	r3, [pc, #868]	; (231d0 <m2m_wifi_connect_sc+0x3a4>)
   22e6a:	0018      	movs	r0, r3
   22e6c:	4bd9      	ldr	r3, [pc, #868]	; (231d4 <m2m_wifi_connect_sc+0x3a8>)
   22e6e:	4798      	blx	r3
   22e70:	4bd9      	ldr	r3, [pc, #868]	; (231d8 <m2m_wifi_connect_sc+0x3ac>)
   22e72:	0018      	movs	r0, r3
   22e74:	4bd7      	ldr	r3, [pc, #860]	; (231d4 <m2m_wifi_connect_sc+0x3a8>)
   22e76:	4798      	blx	r3
   22e78:	4bd8      	ldr	r3, [pc, #864]	; (231dc <m2m_wifi_connect_sc+0x3b0>)
   22e7a:	0018      	movs	r0, r3
   22e7c:	4bd5      	ldr	r3, [pc, #852]	; (231d4 <m2m_wifi_connect_sc+0x3a8>)
   22e7e:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22e80:	2397      	movs	r3, #151	; 0x97
   22e82:	18fb      	adds	r3, r7, r3
   22e84:	22f4      	movs	r2, #244	; 0xf4
   22e86:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22e88:	e1f9      	b.n	2327e <m2m_wifi_connect_sc+0x452>
		}
		if((u8SecType == M2M_WIFI_SEC_WPA_PSK) && (m2m_strlen(pvAuthInfo) == (M2M_MAX_PSK_LEN-1)))
   22e8a:	230a      	movs	r3, #10
   22e8c:	18fb      	adds	r3, r7, r3
   22e8e:	781b      	ldrb	r3, [r3, #0]
   22e90:	2b02      	cmp	r3, #2
   22e92:	d16a      	bne.n	22f6a <m2m_wifi_connect_sc+0x13e>
   22e94:	687b      	ldr	r3, [r7, #4]
   22e96:	0018      	movs	r0, r3
   22e98:	4bd1      	ldr	r3, [pc, #836]	; (231e0 <m2m_wifi_connect_sc+0x3b4>)
   22e9a:	4798      	blx	r3
   22e9c:	0003      	movs	r3, r0
   22e9e:	2b40      	cmp	r3, #64	; 0x40
   22ea0:	d163      	bne.n	22f6a <m2m_wifi_connect_sc+0x13e>
		{
			uint8 i = 0;
   22ea2:	2396      	movs	r3, #150	; 0x96
   22ea4:	18fb      	adds	r3, r7, r3
   22ea6:	2200      	movs	r2, #0
   22ea8:	701a      	strb	r2, [r3, #0]
			uint8* pu8Psk = (uint8*)pvAuthInfo;
   22eaa:	687b      	ldr	r3, [r7, #4]
   22eac:	2290      	movs	r2, #144	; 0x90
   22eae:	18ba      	adds	r2, r7, r2
   22eb0:	6013      	str	r3, [r2, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   22eb2:	e055      	b.n	22f60 <m2m_wifi_connect_sc+0x134>
			{
				if(pu8Psk[i]<'0' || (pu8Psk[i]>'9' && pu8Psk[i] < 'A')|| (pu8Psk[i]>'F' && pu8Psk[i] < 'a') || pu8Psk[i] > 'f')
   22eb4:	2396      	movs	r3, #150	; 0x96
   22eb6:	18fb      	adds	r3, r7, r3
   22eb8:	781b      	ldrb	r3, [r3, #0]
   22eba:	2290      	movs	r2, #144	; 0x90
   22ebc:	18ba      	adds	r2, r7, r2
   22ebe:	6812      	ldr	r2, [r2, #0]
   22ec0:	18d3      	adds	r3, r2, r3
   22ec2:	781b      	ldrb	r3, [r3, #0]
   22ec4:	2b2f      	cmp	r3, #47	; 0x2f
   22ec6:	d931      	bls.n	22f2c <m2m_wifi_connect_sc+0x100>
   22ec8:	2396      	movs	r3, #150	; 0x96
   22eca:	18fb      	adds	r3, r7, r3
   22ecc:	781b      	ldrb	r3, [r3, #0]
   22ece:	2290      	movs	r2, #144	; 0x90
   22ed0:	18ba      	adds	r2, r7, r2
   22ed2:	6812      	ldr	r2, [r2, #0]
   22ed4:	18d3      	adds	r3, r2, r3
   22ed6:	781b      	ldrb	r3, [r3, #0]
   22ed8:	2b39      	cmp	r3, #57	; 0x39
   22eda:	d909      	bls.n	22ef0 <m2m_wifi_connect_sc+0xc4>
   22edc:	2396      	movs	r3, #150	; 0x96
   22ede:	18fb      	adds	r3, r7, r3
   22ee0:	781b      	ldrb	r3, [r3, #0]
   22ee2:	2290      	movs	r2, #144	; 0x90
   22ee4:	18ba      	adds	r2, r7, r2
   22ee6:	6812      	ldr	r2, [r2, #0]
   22ee8:	18d3      	adds	r3, r2, r3
   22eea:	781b      	ldrb	r3, [r3, #0]
   22eec:	2b40      	cmp	r3, #64	; 0x40
   22eee:	d91d      	bls.n	22f2c <m2m_wifi_connect_sc+0x100>
   22ef0:	2396      	movs	r3, #150	; 0x96
   22ef2:	18fb      	adds	r3, r7, r3
   22ef4:	781b      	ldrb	r3, [r3, #0]
   22ef6:	2290      	movs	r2, #144	; 0x90
   22ef8:	18ba      	adds	r2, r7, r2
   22efa:	6812      	ldr	r2, [r2, #0]
   22efc:	18d3      	adds	r3, r2, r3
   22efe:	781b      	ldrb	r3, [r3, #0]
   22f00:	2b46      	cmp	r3, #70	; 0x46
   22f02:	d909      	bls.n	22f18 <m2m_wifi_connect_sc+0xec>
   22f04:	2396      	movs	r3, #150	; 0x96
   22f06:	18fb      	adds	r3, r7, r3
   22f08:	781b      	ldrb	r3, [r3, #0]
   22f0a:	2290      	movs	r2, #144	; 0x90
   22f0c:	18ba      	adds	r2, r7, r2
   22f0e:	6812      	ldr	r2, [r2, #0]
   22f10:	18d3      	adds	r3, r2, r3
   22f12:	781b      	ldrb	r3, [r3, #0]
   22f14:	2b60      	cmp	r3, #96	; 0x60
   22f16:	d909      	bls.n	22f2c <m2m_wifi_connect_sc+0x100>
   22f18:	2396      	movs	r3, #150	; 0x96
   22f1a:	18fb      	adds	r3, r7, r3
   22f1c:	781b      	ldrb	r3, [r3, #0]
   22f1e:	2290      	movs	r2, #144	; 0x90
   22f20:	18ba      	adds	r2, r7, r2
   22f22:	6812      	ldr	r2, [r2, #0]
   22f24:	18d3      	adds	r3, r2, r3
   22f26:	781b      	ldrb	r3, [r3, #0]
   22f28:	2b66      	cmp	r3, #102	; 0x66
   22f2a:	d912      	bls.n	22f52 <m2m_wifi_connect_sc+0x126>
				{
					M2M_ERR("Invalid Key\n");
   22f2c:	4aad      	ldr	r2, [pc, #692]	; (231e4 <m2m_wifi_connect_sc+0x3b8>)
   22f2e:	49a7      	ldr	r1, [pc, #668]	; (231cc <m2m_wifi_connect_sc+0x3a0>)
   22f30:	4ba7      	ldr	r3, [pc, #668]	; (231d0 <m2m_wifi_connect_sc+0x3a4>)
   22f32:	0018      	movs	r0, r3
   22f34:	4ba7      	ldr	r3, [pc, #668]	; (231d4 <m2m_wifi_connect_sc+0x3a8>)
   22f36:	4798      	blx	r3
   22f38:	4bab      	ldr	r3, [pc, #684]	; (231e8 <m2m_wifi_connect_sc+0x3bc>)
   22f3a:	0018      	movs	r0, r3
   22f3c:	4ba5      	ldr	r3, [pc, #660]	; (231d4 <m2m_wifi_connect_sc+0x3a8>)
   22f3e:	4798      	blx	r3
   22f40:	4ba6      	ldr	r3, [pc, #664]	; (231dc <m2m_wifi_connect_sc+0x3b0>)
   22f42:	0018      	movs	r0, r3
   22f44:	4ba3      	ldr	r3, [pc, #652]	; (231d4 <m2m_wifi_connect_sc+0x3a8>)
   22f46:	4798      	blx	r3
					ret = M2M_ERR_FAIL;
   22f48:	2397      	movs	r3, #151	; 0x97
   22f4a:	18fb      	adds	r3, r7, r3
   22f4c:	22f4      	movs	r2, #244	; 0xf4
   22f4e:	701a      	strb	r2, [r3, #0]
					goto ERR1;
   22f50:	e195      	b.n	2327e <m2m_wifi_connect_sc+0x452>
				}
				i++;
   22f52:	2396      	movs	r3, #150	; 0x96
   22f54:	18fb      	adds	r3, r7, r3
   22f56:	781a      	ldrb	r2, [r3, #0]
   22f58:	2396      	movs	r3, #150	; 0x96
   22f5a:	18fb      	adds	r3, r7, r3
   22f5c:	3201      	adds	r2, #1
   22f5e:	701a      	strb	r2, [r3, #0]
			while(i < (M2M_MAX_PSK_LEN-1))
   22f60:	2396      	movs	r3, #150	; 0x96
   22f62:	18fb      	adds	r3, r7, r3
   22f64:	781b      	ldrb	r3, [r3, #0]
   22f66:	2b3f      	cmp	r3, #63	; 0x3f
   22f68:	d9a4      	bls.n	22eb4 <m2m_wifi_connect_sc+0x88>
			}
		}
	}
	if((u8SsidLen<=0)||(u8SsidLen>=M2M_MAX_SSID_LEN))
   22f6a:	230b      	movs	r3, #11
   22f6c:	18fb      	adds	r3, r7, r3
   22f6e:	781b      	ldrb	r3, [r3, #0]
   22f70:	2b00      	cmp	r3, #0
   22f72:	d004      	beq.n	22f7e <m2m_wifi_connect_sc+0x152>
   22f74:	230b      	movs	r3, #11
   22f76:	18fb      	adds	r3, r7, r3
   22f78:	781b      	ldrb	r3, [r3, #0]
   22f7a:	2b20      	cmp	r3, #32
   22f7c:	d913      	bls.n	22fa6 <m2m_wifi_connect_sc+0x17a>
	{
		M2M_ERR("SSID LEN INVALID\n");
   22f7e:	238c      	movs	r3, #140	; 0x8c
   22f80:	009a      	lsls	r2, r3, #2
   22f82:	4992      	ldr	r1, [pc, #584]	; (231cc <m2m_wifi_connect_sc+0x3a0>)
   22f84:	4b92      	ldr	r3, [pc, #584]	; (231d0 <m2m_wifi_connect_sc+0x3a4>)
   22f86:	0018      	movs	r0, r3
   22f88:	4b92      	ldr	r3, [pc, #584]	; (231d4 <m2m_wifi_connect_sc+0x3a8>)
   22f8a:	4798      	blx	r3
   22f8c:	4b97      	ldr	r3, [pc, #604]	; (231ec <m2m_wifi_connect_sc+0x3c0>)
   22f8e:	0018      	movs	r0, r3
   22f90:	4b90      	ldr	r3, [pc, #576]	; (231d4 <m2m_wifi_connect_sc+0x3a8>)
   22f92:	4798      	blx	r3
   22f94:	4b91      	ldr	r3, [pc, #580]	; (231dc <m2m_wifi_connect_sc+0x3b0>)
   22f96:	0018      	movs	r0, r3
   22f98:	4b8e      	ldr	r3, [pc, #568]	; (231d4 <m2m_wifi_connect_sc+0x3a8>)
   22f9a:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   22f9c:	2397      	movs	r3, #151	; 0x97
   22f9e:	18fb      	adds	r3, r7, r3
   22fa0:	22f4      	movs	r2, #244	; 0xf4
   22fa2:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   22fa4:	e16b      	b.n	2327e <m2m_wifi_connect_sc+0x452>
	}

	if(u16Ch < M2M_WIFI_CH_1|| u16Ch > M2M_WIFI_CH_14)
   22fa6:	23a8      	movs	r3, #168	; 0xa8
   22fa8:	18fb      	adds	r3, r7, r3
   22faa:	881b      	ldrh	r3, [r3, #0]
   22fac:	2b00      	cmp	r3, #0
   22fae:	d004      	beq.n	22fba <m2m_wifi_connect_sc+0x18e>
   22fb0:	23a8      	movs	r3, #168	; 0xa8
   22fb2:	18fb      	adds	r3, r7, r3
   22fb4:	881b      	ldrh	r3, [r3, #0]
   22fb6:	2b0e      	cmp	r3, #14
   22fb8:	d917      	bls.n	22fea <m2m_wifi_connect_sc+0x1be>
	{
		if(u16Ch!=M2M_WIFI_CH_ALL)
   22fba:	23a8      	movs	r3, #168	; 0xa8
   22fbc:	18fb      	adds	r3, r7, r3
   22fbe:	881b      	ldrh	r3, [r3, #0]
   22fc0:	2bff      	cmp	r3, #255	; 0xff
   22fc2:	d012      	beq.n	22fea <m2m_wifi_connect_sc+0x1be>
		{
			M2M_ERR("CH INVALID\n");
   22fc4:	4a8a      	ldr	r2, [pc, #552]	; (231f0 <m2m_wifi_connect_sc+0x3c4>)
   22fc6:	4981      	ldr	r1, [pc, #516]	; (231cc <m2m_wifi_connect_sc+0x3a0>)
   22fc8:	4b81      	ldr	r3, [pc, #516]	; (231d0 <m2m_wifi_connect_sc+0x3a4>)
   22fca:	0018      	movs	r0, r3
   22fcc:	4b81      	ldr	r3, [pc, #516]	; (231d4 <m2m_wifi_connect_sc+0x3a8>)
   22fce:	4798      	blx	r3
   22fd0:	4b88      	ldr	r3, [pc, #544]	; (231f4 <m2m_wifi_connect_sc+0x3c8>)
   22fd2:	0018      	movs	r0, r3
   22fd4:	4b7f      	ldr	r3, [pc, #508]	; (231d4 <m2m_wifi_connect_sc+0x3a8>)
   22fd6:	4798      	blx	r3
   22fd8:	4b80      	ldr	r3, [pc, #512]	; (231dc <m2m_wifi_connect_sc+0x3b0>)
   22fda:	0018      	movs	r0, r3
   22fdc:	4b7d      	ldr	r3, [pc, #500]	; (231d4 <m2m_wifi_connect_sc+0x3a8>)
   22fde:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   22fe0:	2397      	movs	r3, #151	; 0x97
   22fe2:	18fb      	adds	r3, r7, r3
   22fe4:	22f4      	movs	r2, #244	; 0xf4
   22fe6:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   22fe8:	e149      	b.n	2327e <m2m_wifi_connect_sc+0x452>
		}
	}


	m2m_memcpy(strConnect.au8SSID, (uint8*)pcSsid, u8SsidLen);
   22fea:	230b      	movs	r3, #11
   22fec:	18fb      	adds	r3, r7, r3
   22fee:	781a      	ldrb	r2, [r3, #0]
   22ff0:	68f9      	ldr	r1, [r7, #12]
   22ff2:	2314      	movs	r3, #20
   22ff4:	18fb      	adds	r3, r7, r3
   22ff6:	3346      	adds	r3, #70	; 0x46
   22ff8:	0018      	movs	r0, r3
   22ffa:	4b7f      	ldr	r3, [pc, #508]	; (231f8 <m2m_wifi_connect_sc+0x3cc>)
   22ffc:	4798      	blx	r3
	strConnect.au8SSID[u8SsidLen]	= 0;
   22ffe:	230b      	movs	r3, #11
   23000:	18fb      	adds	r3, r7, r3
   23002:	781b      	ldrb	r3, [r3, #0]
   23004:	2214      	movs	r2, #20
   23006:	18ba      	adds	r2, r7, r2
   23008:	2146      	movs	r1, #70	; 0x46
   2300a:	18d3      	adds	r3, r2, r3
   2300c:	185b      	adds	r3, r3, r1
   2300e:	2200      	movs	r2, #0
   23010:	701a      	strb	r2, [r3, #0]
	strConnect.u16Ch				= NM_BSP_B_L_16(u16Ch);
   23012:	2314      	movs	r3, #20
   23014:	18fb      	adds	r3, r7, r3
   23016:	22a8      	movs	r2, #168	; 0xa8
   23018:	18ba      	adds	r2, r7, r2
   2301a:	2144      	movs	r1, #68	; 0x44
   2301c:	8812      	ldrh	r2, [r2, #0]
   2301e:	525a      	strh	r2, [r3, r1]
	/* Credentials will be Not be saved if u8NoSaveCred is set */ 
	strConnect.u8NoSaveCred 			= u8NoSaveCred ? 1:0;
   23020:	23ac      	movs	r3, #172	; 0xac
   23022:	18fb      	adds	r3, r7, r3
   23024:	781b      	ldrb	r3, [r3, #0]
   23026:	1e5a      	subs	r2, r3, #1
   23028:	4193      	sbcs	r3, r2
   2302a:	b2db      	uxtb	r3, r3
   2302c:	0019      	movs	r1, r3
   2302e:	2314      	movs	r3, #20
   23030:	18fb      	adds	r3, r7, r3
   23032:	2267      	movs	r2, #103	; 0x67
   23034:	5499      	strb	r1, [r3, r2]
	pstrAuthInfo = &strConnect.strSec;
   23036:	2314      	movs	r3, #20
   23038:	18fb      	adds	r3, r7, r3
   2303a:	228c      	movs	r2, #140	; 0x8c
   2303c:	18ba      	adds	r2, r7, r2
   2303e:	6013      	str	r3, [r2, #0]
	pstrAuthInfo->u8SecType		= u8SecType;
   23040:	238c      	movs	r3, #140	; 0x8c
   23042:	18fb      	adds	r3, r7, r3
   23044:	681b      	ldr	r3, [r3, #0]
   23046:	220a      	movs	r2, #10
   23048:	18ba      	adds	r2, r7, r2
   2304a:	2141      	movs	r1, #65	; 0x41
   2304c:	7812      	ldrb	r2, [r2, #0]
   2304e:	545a      	strb	r2, [r3, r1]

	if(u8SecType == M2M_WIFI_SEC_WEP)
   23050:	230a      	movs	r3, #10
   23052:	18fb      	adds	r3, r7, r3
   23054:	781b      	ldrb	r3, [r3, #0]
   23056:	2b03      	cmp	r3, #3
   23058:	d000      	beq.n	2305c <m2m_wifi_connect_sc+0x230>
   2305a:	e07d      	b.n	23158 <m2m_wifi_connect_sc+0x32c>
	{
		tstrM2mWifiWepParams	* pstrWepParams = (tstrM2mWifiWepParams*)pvAuthInfo;
   2305c:	687b      	ldr	r3, [r7, #4]
   2305e:	2288      	movs	r2, #136	; 0x88
   23060:	18ba      	adds	r2, r7, r2
   23062:	6013      	str	r3, [r2, #0]
		tstrM2mWifiWepParams	*pstrWep = &pstrAuthInfo->uniAuth.strWepInfo;
   23064:	238c      	movs	r3, #140	; 0x8c
   23066:	18fb      	adds	r3, r7, r3
   23068:	681b      	ldr	r3, [r3, #0]
   2306a:	2284      	movs	r2, #132	; 0x84
   2306c:	18ba      	adds	r2, r7, r2
   2306e:	6013      	str	r3, [r2, #0]
		pstrWep->u8KeyIndx =pstrWepParams->u8KeyIndx-1;
   23070:	2388      	movs	r3, #136	; 0x88
   23072:	18fb      	adds	r3, r7, r3
   23074:	681b      	ldr	r3, [r3, #0]
   23076:	781b      	ldrb	r3, [r3, #0]
   23078:	3b01      	subs	r3, #1
   2307a:	b2da      	uxtb	r2, r3
   2307c:	2384      	movs	r3, #132	; 0x84
   2307e:	18fb      	adds	r3, r7, r3
   23080:	681b      	ldr	r3, [r3, #0]
   23082:	701a      	strb	r2, [r3, #0]

		if(pstrWep->u8KeyIndx >= WEP_KEY_MAX_INDEX)
   23084:	2384      	movs	r3, #132	; 0x84
   23086:	18fb      	adds	r3, r7, r3
   23088:	681b      	ldr	r3, [r3, #0]
   2308a:	781b      	ldrb	r3, [r3, #0]
   2308c:	2b03      	cmp	r3, #3
   2308e:	d919      	bls.n	230c4 <m2m_wifi_connect_sc+0x298>
		{
			M2M_ERR("Invalid Wep key index %d\n", pstrWep->u8KeyIndx);
   23090:	2394      	movs	r3, #148	; 0x94
   23092:	009a      	lsls	r2, r3, #2
   23094:	494d      	ldr	r1, [pc, #308]	; (231cc <m2m_wifi_connect_sc+0x3a0>)
   23096:	4b4e      	ldr	r3, [pc, #312]	; (231d0 <m2m_wifi_connect_sc+0x3a4>)
   23098:	0018      	movs	r0, r3
   2309a:	4b4e      	ldr	r3, [pc, #312]	; (231d4 <m2m_wifi_connect_sc+0x3a8>)
   2309c:	4798      	blx	r3
   2309e:	2384      	movs	r3, #132	; 0x84
   230a0:	18fb      	adds	r3, r7, r3
   230a2:	681b      	ldr	r3, [r3, #0]
   230a4:	781b      	ldrb	r3, [r3, #0]
   230a6:	001a      	movs	r2, r3
   230a8:	4b54      	ldr	r3, [pc, #336]	; (231fc <m2m_wifi_connect_sc+0x3d0>)
   230aa:	0011      	movs	r1, r2
   230ac:	0018      	movs	r0, r3
   230ae:	4b49      	ldr	r3, [pc, #292]	; (231d4 <m2m_wifi_connect_sc+0x3a8>)
   230b0:	4798      	blx	r3
   230b2:	4b4a      	ldr	r3, [pc, #296]	; (231dc <m2m_wifi_connect_sc+0x3b0>)
   230b4:	0018      	movs	r0, r3
   230b6:	4b47      	ldr	r3, [pc, #284]	; (231d4 <m2m_wifi_connect_sc+0x3a8>)
   230b8:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   230ba:	2397      	movs	r3, #151	; 0x97
   230bc:	18fb      	adds	r3, r7, r3
   230be:	22f4      	movs	r2, #244	; 0xf4
   230c0:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   230c2:	e0dc      	b.n	2327e <m2m_wifi_connect_sc+0x452>
		}
		pstrWep->u8KeySz = pstrWepParams->u8KeySz-1;
   230c4:	2388      	movs	r3, #136	; 0x88
   230c6:	18fb      	adds	r3, r7, r3
   230c8:	681b      	ldr	r3, [r3, #0]
   230ca:	785b      	ldrb	r3, [r3, #1]
   230cc:	3b01      	subs	r3, #1
   230ce:	b2da      	uxtb	r2, r3
   230d0:	2384      	movs	r3, #132	; 0x84
   230d2:	18fb      	adds	r3, r7, r3
   230d4:	681b      	ldr	r3, [r3, #0]
   230d6:	705a      	strb	r2, [r3, #1]
		if ((pstrWep->u8KeySz != WEP_40_KEY_STRING_SIZE)&& (pstrWep->u8KeySz != WEP_104_KEY_STRING_SIZE))
   230d8:	2384      	movs	r3, #132	; 0x84
   230da:	18fb      	adds	r3, r7, r3
   230dc:	681b      	ldr	r3, [r3, #0]
   230de:	785b      	ldrb	r3, [r3, #1]
   230e0:	2b0a      	cmp	r3, #10
   230e2:	d01e      	beq.n	23122 <m2m_wifi_connect_sc+0x2f6>
   230e4:	2384      	movs	r3, #132	; 0x84
   230e6:	18fb      	adds	r3, r7, r3
   230e8:	681b      	ldr	r3, [r3, #0]
   230ea:	785b      	ldrb	r3, [r3, #1]
   230ec:	2b1a      	cmp	r3, #26
   230ee:	d018      	beq.n	23122 <m2m_wifi_connect_sc+0x2f6>
		{
			M2M_ERR("Invalid Wep key length %d\n", pstrWep->u8KeySz);
   230f0:	4a43      	ldr	r2, [pc, #268]	; (23200 <m2m_wifi_connect_sc+0x3d4>)
   230f2:	4936      	ldr	r1, [pc, #216]	; (231cc <m2m_wifi_connect_sc+0x3a0>)
   230f4:	4b36      	ldr	r3, [pc, #216]	; (231d0 <m2m_wifi_connect_sc+0x3a4>)
   230f6:	0018      	movs	r0, r3
   230f8:	4b36      	ldr	r3, [pc, #216]	; (231d4 <m2m_wifi_connect_sc+0x3a8>)
   230fa:	4798      	blx	r3
   230fc:	2384      	movs	r3, #132	; 0x84
   230fe:	18fb      	adds	r3, r7, r3
   23100:	681b      	ldr	r3, [r3, #0]
   23102:	785b      	ldrb	r3, [r3, #1]
   23104:	001a      	movs	r2, r3
   23106:	4b3f      	ldr	r3, [pc, #252]	; (23204 <m2m_wifi_connect_sc+0x3d8>)
   23108:	0011      	movs	r1, r2
   2310a:	0018      	movs	r0, r3
   2310c:	4b31      	ldr	r3, [pc, #196]	; (231d4 <m2m_wifi_connect_sc+0x3a8>)
   2310e:	4798      	blx	r3
   23110:	4b32      	ldr	r3, [pc, #200]	; (231dc <m2m_wifi_connect_sc+0x3b0>)
   23112:	0018      	movs	r0, r3
   23114:	4b2f      	ldr	r3, [pc, #188]	; (231d4 <m2m_wifi_connect_sc+0x3a8>)
   23116:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   23118:	2397      	movs	r3, #151	; 0x97
   2311a:	18fb      	adds	r3, r7, r3
   2311c:	22f4      	movs	r2, #244	; 0xf4
   2311e:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   23120:	e0ad      	b.n	2327e <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy((uint8*)pstrWep->au8WepKey,(uint8*)pstrWepParams->au8WepKey, pstrWepParams->u8KeySz);
   23122:	2384      	movs	r3, #132	; 0x84
   23124:	18fb      	adds	r3, r7, r3
   23126:	681b      	ldr	r3, [r3, #0]
   23128:	1c98      	adds	r0, r3, #2
   2312a:	2388      	movs	r3, #136	; 0x88
   2312c:	18fb      	adds	r3, r7, r3
   2312e:	681b      	ldr	r3, [r3, #0]
   23130:	1c99      	adds	r1, r3, #2
   23132:	2388      	movs	r3, #136	; 0x88
   23134:	18fb      	adds	r3, r7, r3
   23136:	681b      	ldr	r3, [r3, #0]
   23138:	785b      	ldrb	r3, [r3, #1]
   2313a:	001a      	movs	r2, r3
   2313c:	4b2e      	ldr	r3, [pc, #184]	; (231f8 <m2m_wifi_connect_sc+0x3cc>)
   2313e:	4798      	blx	r3
		pstrWep->au8WepKey[pstrWepParams->u8KeySz] = 0;
   23140:	2388      	movs	r3, #136	; 0x88
   23142:	18fb      	adds	r3, r7, r3
   23144:	681b      	ldr	r3, [r3, #0]
   23146:	785b      	ldrb	r3, [r3, #1]
   23148:	001a      	movs	r2, r3
   2314a:	2384      	movs	r3, #132	; 0x84
   2314c:	18fb      	adds	r3, r7, r3
   2314e:	681b      	ldr	r3, [r3, #0]
   23150:	189b      	adds	r3, r3, r2
   23152:	2200      	movs	r2, #0
   23154:	709a      	strb	r2, [r3, #2]
   23156:	e081      	b.n	2325c <m2m_wifi_connect_sc+0x430>

	}


	else if(u8SecType == M2M_WIFI_SEC_WPA_PSK)
   23158:	230a      	movs	r3, #10
   2315a:	18fb      	adds	r3, r7, r3
   2315c:	781b      	ldrb	r3, [r3, #0]
   2315e:	2b02      	cmp	r3, #2
   23160:	d156      	bne.n	23210 <m2m_wifi_connect_sc+0x3e4>
	{
		uint16	u16KeyLen = m2m_strlen((uint8*)pvAuthInfo);
   23162:	2382      	movs	r3, #130	; 0x82
   23164:	18fc      	adds	r4, r7, r3
   23166:	687b      	ldr	r3, [r7, #4]
   23168:	0018      	movs	r0, r3
   2316a:	4b1d      	ldr	r3, [pc, #116]	; (231e0 <m2m_wifi_connect_sc+0x3b4>)
   2316c:	4798      	blx	r3
   2316e:	0003      	movs	r3, r0
   23170:	8023      	strh	r3, [r4, #0]
		if((u16KeyLen <= 0)||(u16KeyLen >= M2M_MAX_PSK_LEN))
   23172:	2382      	movs	r3, #130	; 0x82
   23174:	18fb      	adds	r3, r7, r3
   23176:	881b      	ldrh	r3, [r3, #0]
   23178:	2b00      	cmp	r3, #0
   2317a:	d004      	beq.n	23186 <m2m_wifi_connect_sc+0x35a>
   2317c:	2382      	movs	r3, #130	; 0x82
   2317e:	18fb      	adds	r3, r7, r3
   23180:	881b      	ldrh	r3, [r3, #0]
   23182:	2b40      	cmp	r3, #64	; 0x40
   23184:	d912      	bls.n	231ac <m2m_wifi_connect_sc+0x380>
		{
			M2M_ERR("Incorrect PSK key length\n");
   23186:	4a20      	ldr	r2, [pc, #128]	; (23208 <m2m_wifi_connect_sc+0x3dc>)
   23188:	4910      	ldr	r1, [pc, #64]	; (231cc <m2m_wifi_connect_sc+0x3a0>)
   2318a:	4b11      	ldr	r3, [pc, #68]	; (231d0 <m2m_wifi_connect_sc+0x3a4>)
   2318c:	0018      	movs	r0, r3
   2318e:	4b11      	ldr	r3, [pc, #68]	; (231d4 <m2m_wifi_connect_sc+0x3a8>)
   23190:	4798      	blx	r3
   23192:	4b1e      	ldr	r3, [pc, #120]	; (2320c <m2m_wifi_connect_sc+0x3e0>)
   23194:	0018      	movs	r0, r3
   23196:	4b0f      	ldr	r3, [pc, #60]	; (231d4 <m2m_wifi_connect_sc+0x3a8>)
   23198:	4798      	blx	r3
   2319a:	4b10      	ldr	r3, [pc, #64]	; (231dc <m2m_wifi_connect_sc+0x3b0>)
   2319c:	0018      	movs	r0, r3
   2319e:	4b0d      	ldr	r3, [pc, #52]	; (231d4 <m2m_wifi_connect_sc+0x3a8>)
   231a0:	4798      	blx	r3
			ret = M2M_ERR_FAIL;
   231a2:	2397      	movs	r3, #151	; 0x97
   231a4:	18fb      	adds	r3, r7, r3
   231a6:	22f4      	movs	r2, #244	; 0xf4
   231a8:	701a      	strb	r2, [r3, #0]
			goto ERR1;
   231aa:	e068      	b.n	2327e <m2m_wifi_connect_sc+0x452>
		}
		m2m_memcpy(pstrAuthInfo->uniAuth.au8PSK, (uint8*)pvAuthInfo, u16KeyLen + 1);
   231ac:	238c      	movs	r3, #140	; 0x8c
   231ae:	18fb      	adds	r3, r7, r3
   231b0:	6818      	ldr	r0, [r3, #0]
   231b2:	2382      	movs	r3, #130	; 0x82
   231b4:	18fb      	adds	r3, r7, r3
   231b6:	881b      	ldrh	r3, [r3, #0]
   231b8:	3301      	adds	r3, #1
   231ba:	001a      	movs	r2, r3
   231bc:	687b      	ldr	r3, [r7, #4]
   231be:	0019      	movs	r1, r3
   231c0:	4b0d      	ldr	r3, [pc, #52]	; (231f8 <m2m_wifi_connect_sc+0x3cc>)
   231c2:	4798      	blx	r3
   231c4:	e04a      	b.n	2325c <m2m_wifi_connect_sc+0x430>
   231c6:	46c0      	nop			; (mov r8, r8)
   231c8:	0000021a 	.word	0x0000021a
   231cc:	00039bd4 	.word	0x00039bd4
   231d0:	0003981c 	.word	0x0003981c
   231d4:	0001ed29 	.word	0x0001ed29
   231d8:	00039a5c 	.word	0x00039a5c
   231dc:	00039818 	.word	0x00039818
   231e0:	00021a9b 	.word	0x00021a9b
   231e4:	00000226 	.word	0x00000226
   231e8:	00039a70 	.word	0x00039a70
   231ec:	00039a80 	.word	0x00039a80
   231f0:	00000239 	.word	0x00000239
   231f4:	00039a94 	.word	0x00039a94
   231f8:	00021a21 	.word	0x00021a21
   231fc:	00039aa0 	.word	0x00039aa0
   23200:	00000257 	.word	0x00000257
   23204:	00039abc 	.word	0x00039abc
   23208:	00000266 	.word	0x00000266
   2320c:	00039ad8 	.word	0x00039ad8
	}
	else if(u8SecType == M2M_WIFI_SEC_802_1X)
   23210:	230a      	movs	r3, #10
   23212:	18fb      	adds	r3, r7, r3
   23214:	781b      	ldrb	r3, [r3, #0]
   23216:	2b04      	cmp	r3, #4
   23218:	d108      	bne.n	2322c <m2m_wifi_connect_sc+0x400>
	{
		m2m_memcpy((uint8*)&pstrAuthInfo->uniAuth.strCred1x, (uint8*)pvAuthInfo, sizeof(tstr1xAuthCredentials));
   2321a:	238c      	movs	r3, #140	; 0x8c
   2321c:	18fb      	adds	r3, r7, r3
   2321e:	681b      	ldr	r3, [r3, #0]
   23220:	6879      	ldr	r1, [r7, #4]
   23222:	223e      	movs	r2, #62	; 0x3e
   23224:	0018      	movs	r0, r3
   23226:	4b1a      	ldr	r3, [pc, #104]	; (23290 <m2m_wifi_connect_sc+0x464>)
   23228:	4798      	blx	r3
   2322a:	e017      	b.n	2325c <m2m_wifi_connect_sc+0x430>
	}
	else if(u8SecType == M2M_WIFI_SEC_OPEN)
   2322c:	230a      	movs	r3, #10
   2322e:	18fb      	adds	r3, r7, r3
   23230:	781b      	ldrb	r3, [r3, #0]
   23232:	2b01      	cmp	r3, #1
   23234:	d012      	beq.n	2325c <m2m_wifi_connect_sc+0x430>
	{

	}
	else
	{
		M2M_ERR("undefined sec type\n");
   23236:	4a17      	ldr	r2, [pc, #92]	; (23294 <m2m_wifi_connect_sc+0x468>)
   23238:	4917      	ldr	r1, [pc, #92]	; (23298 <m2m_wifi_connect_sc+0x46c>)
   2323a:	4b18      	ldr	r3, [pc, #96]	; (2329c <m2m_wifi_connect_sc+0x470>)
   2323c:	0018      	movs	r0, r3
   2323e:	4b18      	ldr	r3, [pc, #96]	; (232a0 <m2m_wifi_connect_sc+0x474>)
   23240:	4798      	blx	r3
   23242:	4b18      	ldr	r3, [pc, #96]	; (232a4 <m2m_wifi_connect_sc+0x478>)
   23244:	0018      	movs	r0, r3
   23246:	4b16      	ldr	r3, [pc, #88]	; (232a0 <m2m_wifi_connect_sc+0x474>)
   23248:	4798      	blx	r3
   2324a:	4b17      	ldr	r3, [pc, #92]	; (232a8 <m2m_wifi_connect_sc+0x47c>)
   2324c:	0018      	movs	r0, r3
   2324e:	4b14      	ldr	r3, [pc, #80]	; (232a0 <m2m_wifi_connect_sc+0x474>)
   23250:	4798      	blx	r3
		ret = M2M_ERR_FAIL;
   23252:	2397      	movs	r3, #151	; 0x97
   23254:	18fb      	adds	r3, r7, r3
   23256:	22f4      	movs	r2, #244	; 0xf4
   23258:	701a      	strb	r2, [r3, #0]
		goto ERR1;
   2325a:	e010      	b.n	2327e <m2m_wifi_connect_sc+0x452>
	}

	ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT, (uint8*)&strConnect, sizeof(tstrM2mWifiConnect),NULL, 0,0);
   2325c:	2397      	movs	r3, #151	; 0x97
   2325e:	18fc      	adds	r4, r7, r3
   23260:	2314      	movs	r3, #20
   23262:	18fa      	adds	r2, r7, r3
   23264:	2300      	movs	r3, #0
   23266:	9302      	str	r3, [sp, #8]
   23268:	2300      	movs	r3, #0
   2326a:	9301      	str	r3, [sp, #4]
   2326c:	2300      	movs	r3, #0
   2326e:	9300      	str	r3, [sp, #0]
   23270:	236c      	movs	r3, #108	; 0x6c
   23272:	2128      	movs	r1, #40	; 0x28
   23274:	2001      	movs	r0, #1
   23276:	4d0d      	ldr	r5, [pc, #52]	; (232ac <m2m_wifi_connect_sc+0x480>)
   23278:	47a8      	blx	r5
   2327a:	0003      	movs	r3, r0
   2327c:	7023      	strb	r3, [r4, #0]

ERR1:
	return ret;
   2327e:	2397      	movs	r3, #151	; 0x97
   23280:	18fb      	adds	r3, r7, r3
   23282:	781b      	ldrb	r3, [r3, #0]
   23284:	b25b      	sxtb	r3, r3
}
   23286:	0018      	movs	r0, r3
   23288:	46bd      	mov	sp, r7
   2328a:	b026      	add	sp, #152	; 0x98
   2328c:	bdb0      	pop	{r4, r5, r7, pc}
   2328e:	46c0      	nop			; (mov r8, r8)
   23290:	00021a21 	.word	0x00021a21
   23294:	00000276 	.word	0x00000276
   23298:	00039bd4 	.word	0x00039bd4
   2329c:	0003981c 	.word	0x0003981c
   232a0:	0001ed29 	.word	0x0001ed29
   232a4:	00039af4 	.word	0x00039af4
   232a8:	00039818 	.word	0x00039818
   232ac:	00021cbd 	.word	0x00021cbd

000232b0 <m2m_wifi_request_dhcp_client>:
	return hif_send(M2M_REQ_GROUP_IP, M2M_IP_REQ_STATIC_IP_CONF,
		(uint8*) pstrStaticIPConf, sizeof(tstrM2MIPConfig), NULL, 0,0);
}

sint8 m2m_wifi_request_dhcp_client(void)
{
   232b0:	b580      	push	{r7, lr}
   232b2:	af00      	add	r7, sp, #0
	/*legacy API should be removed */
	return 0;
   232b4:	2300      	movs	r3, #0
}
   232b6:	0018      	movs	r0, r3
   232b8:	46bd      	mov	sp, r7
   232ba:	bd80      	pop	{r7, pc}

000232bc <chip_apply_conf>:

#define TIMEOUT						(0xfffffffful)
#define WAKUP_TRAILS_TIMEOUT		(4)

sint8 chip_apply_conf(uint32 u32Conf)
{
   232bc:	b590      	push	{r4, r7, lr}
   232be:	b087      	sub	sp, #28
   232c0:	af00      	add	r7, sp, #0
   232c2:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   232c4:	2317      	movs	r3, #23
   232c6:	18fb      	adds	r3, r7, r3
   232c8:	2200      	movs	r2, #0
   232ca:	701a      	strb	r2, [r3, #0]
	uint32 val32 = u32Conf;
   232cc:	687b      	ldr	r3, [r7, #4]
   232ce:	613b      	str	r3, [r7, #16]
#endif
#if defined CONF_WINC_XO_XTALGM2_DIS
	val32 |= rHAVE_XO_XTALGM2_DIS_BIT;
#endif

	val32 |= rHAVE_RESERVED1_BIT;
   232d0:	693b      	ldr	r3, [r7, #16]
   232d2:	2280      	movs	r2, #128	; 0x80
   232d4:	0052      	lsls	r2, r2, #1
   232d6:	4313      	orrs	r3, r2
   232d8:	613b      	str	r3, [r7, #16]
	do  {
		nm_write_reg(rNMI_GP_REG_1, val32);
   232da:	693a      	ldr	r2, [r7, #16]
   232dc:	23a5      	movs	r3, #165	; 0xa5
   232de:	015b      	lsls	r3, r3, #5
   232e0:	0011      	movs	r1, r2
   232e2:	0018      	movs	r0, r3
   232e4:	4b12      	ldr	r3, [pc, #72]	; (23330 <chip_apply_conf+0x74>)
   232e6:	4798      	blx	r3
		if(val32 != 0) {		
   232e8:	693b      	ldr	r3, [r7, #16]
   232ea:	2b00      	cmp	r3, #0
   232ec:	d018      	beq.n	23320 <chip_apply_conf+0x64>
			uint32 reg = 0;
   232ee:	2300      	movs	r3, #0
   232f0:	60fb      	str	r3, [r7, #12]
			ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
   232f2:	2317      	movs	r3, #23
   232f4:	18fc      	adds	r4, r7, r3
   232f6:	230c      	movs	r3, #12
   232f8:	18fa      	adds	r2, r7, r3
   232fa:	23a5      	movs	r3, #165	; 0xa5
   232fc:	015b      	lsls	r3, r3, #5
   232fe:	0011      	movs	r1, r2
   23300:	0018      	movs	r0, r3
   23302:	4b0c      	ldr	r3, [pc, #48]	; (23334 <chip_apply_conf+0x78>)
   23304:	4798      	blx	r3
   23306:	0003      	movs	r3, r0
   23308:	7023      	strb	r3, [r4, #0]
			if(ret == M2M_SUCCESS) {
   2330a:	2317      	movs	r3, #23
   2330c:	18fb      	adds	r3, r7, r3
   2330e:	781b      	ldrb	r3, [r3, #0]
   23310:	b25b      	sxtb	r3, r3
   23312:	2b00      	cmp	r3, #0
   23314:	d1e1      	bne.n	232da <chip_apply_conf+0x1e>
				if(reg == val32)
   23316:	68fa      	ldr	r2, [r7, #12]
   23318:	693b      	ldr	r3, [r7, #16]
   2331a:	429a      	cmp	r2, r3
   2331c:	d002      	beq.n	23324 <chip_apply_conf+0x68>
		nm_write_reg(rNMI_GP_REG_1, val32);
   2331e:	e7dc      	b.n	232da <chip_apply_conf+0x1e>
					break;
			}
		} else {
			break;
   23320:	46c0      	nop			; (mov r8, r8)
   23322:	e000      	b.n	23326 <chip_apply_conf+0x6a>
					break;
   23324:	46c0      	nop			; (mov r8, r8)
		}
	} while(1);

	return M2M_SUCCESS;
   23326:	2300      	movs	r3, #0
}
   23328:	0018      	movs	r0, r3
   2332a:	46bd      	mov	sp, r7
   2332c:	b007      	add	sp, #28
   2332e:	bd90      	pop	{r4, r7, pc}
   23330:	00023b11 	.word	0x00023b11
   23334:	00023aed 	.word	0x00023aed

00023338 <enable_interrupts>:
		nm_write_reg(WAKE_CLK_REG, reg);
	}
}

sint8 enable_interrupts(void)
{
   23338:	b590      	push	{r4, r7, lr}
   2333a:	b083      	sub	sp, #12
   2333c:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   2333e:	2300      	movs	r3, #0
   23340:	603b      	str	r3, [r7, #0]
	sint8 ret = M2M_SUCCESS;
   23342:	1dfb      	adds	r3, r7, #7
   23344:	2200      	movs	r2, #0
   23346:	701a      	strb	r2, [r3, #0]
	/**
	interrupt pin mux select
	**/
	ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
   23348:	1dfc      	adds	r4, r7, #7
   2334a:	003b      	movs	r3, r7
   2334c:	4a24      	ldr	r2, [pc, #144]	; (233e0 <enable_interrupts+0xa8>)
   2334e:	0019      	movs	r1, r3
   23350:	0010      	movs	r0, r2
   23352:	4b24      	ldr	r3, [pc, #144]	; (233e4 <enable_interrupts+0xac>)
   23354:	4798      	blx	r3
   23356:	0003      	movs	r3, r0
   23358:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   2335a:	1dfb      	adds	r3, r7, #7
   2335c:	781b      	ldrb	r3, [r3, #0]
   2335e:	b25b      	sxtb	r3, r3
   23360:	2b00      	cmp	r3, #0
   23362:	d131      	bne.n	233c8 <enable_interrupts+0x90>
	
	reg |= ((uint32) 1 << 8);
   23364:	683b      	ldr	r3, [r7, #0]
   23366:	2280      	movs	r2, #128	; 0x80
   23368:	0052      	lsls	r2, r2, #1
   2336a:	4313      	orrs	r3, r2
   2336c:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_PIN_MUX_0, reg);
   2336e:	683b      	ldr	r3, [r7, #0]
   23370:	1dfc      	adds	r4, r7, #7
   23372:	4a1b      	ldr	r2, [pc, #108]	; (233e0 <enable_interrupts+0xa8>)
   23374:	0019      	movs	r1, r3
   23376:	0010      	movs	r0, r2
   23378:	4b1b      	ldr	r3, [pc, #108]	; (233e8 <enable_interrupts+0xb0>)
   2337a:	4798      	blx	r3
   2337c:	0003      	movs	r3, r0
   2337e:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   23380:	1dfb      	adds	r3, r7, #7
   23382:	781b      	ldrb	r3, [r3, #0]
   23384:	b25b      	sxtb	r3, r3
   23386:	2b00      	cmp	r3, #0
   23388:	d120      	bne.n	233cc <enable_interrupts+0x94>
	
	/**
	interrupt enable
	**/
	ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
   2338a:	1dfc      	adds	r4, r7, #7
   2338c:	003a      	movs	r2, r7
   2338e:	23d0      	movs	r3, #208	; 0xd0
   23390:	015b      	lsls	r3, r3, #5
   23392:	0011      	movs	r1, r2
   23394:	0018      	movs	r0, r3
   23396:	4b13      	ldr	r3, [pc, #76]	; (233e4 <enable_interrupts+0xac>)
   23398:	4798      	blx	r3
   2339a:	0003      	movs	r3, r0
   2339c:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) goto ERR1;
   2339e:	1dfb      	adds	r3, r7, #7
   233a0:	781b      	ldrb	r3, [r3, #0]
   233a2:	b25b      	sxtb	r3, r3
   233a4:	2b00      	cmp	r3, #0
   233a6:	d113      	bne.n	233d0 <enable_interrupts+0x98>
	
	reg |= ((uint32) 1 << 16);
   233a8:	683b      	ldr	r3, [r7, #0]
   233aa:	2280      	movs	r2, #128	; 0x80
   233ac:	0252      	lsls	r2, r2, #9
   233ae:	4313      	orrs	r3, r2
   233b0:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_INTR_ENABLE, reg);
   233b2:	683a      	ldr	r2, [r7, #0]
   233b4:	1dfc      	adds	r4, r7, #7
   233b6:	23d0      	movs	r3, #208	; 0xd0
   233b8:	015b      	lsls	r3, r3, #5
   233ba:	0011      	movs	r1, r2
   233bc:	0018      	movs	r0, r3
   233be:	4b0a      	ldr	r3, [pc, #40]	; (233e8 <enable_interrupts+0xb0>)
   233c0:	4798      	blx	r3
   233c2:	0003      	movs	r3, r0
   233c4:	7023      	strb	r3, [r4, #0]
   233c6:	e004      	b.n	233d2 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   233c8:	46c0      	nop			; (mov r8, r8)
   233ca:	e002      	b.n	233d2 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   233cc:	46c0      	nop			; (mov r8, r8)
   233ce:	e000      	b.n	233d2 <enable_interrupts+0x9a>
	if (M2M_SUCCESS != ret) goto ERR1;
   233d0:	46c0      	nop			; (mov r8, r8)
	if (M2M_SUCCESS != ret) goto ERR1;
ERR1:	
	return ret;
   233d2:	1dfb      	adds	r3, r7, #7
   233d4:	781b      	ldrb	r3, [r3, #0]
   233d6:	b25b      	sxtb	r3, r3
}
   233d8:	0018      	movs	r0, r3
   233da:	46bd      	mov	sp, r7
   233dc:	b003      	add	sp, #12
   233de:	bd90      	pop	{r4, r7, pc}
   233e0:	00001408 	.word	0x00001408
   233e4:	00023aed 	.word	0x00023aed
   233e8:	00023b11 	.word	0x00023b11

000233ec <nmi_get_chipid>:
	nm_bsp_sleep(1);
	return ret;
}

uint32 nmi_get_chipid(void)
{
   233ec:	b580      	push	{r7, lr}
   233ee:	b082      	sub	sp, #8
   233f0:	af00      	add	r7, sp, #0
	static uint32 chipid = 0;

	if (chipid == 0) {
   233f2:	4b32      	ldr	r3, [pc, #200]	; (234bc <nmi_get_chipid+0xd0>)
   233f4:	681b      	ldr	r3, [r3, #0]
   233f6:	2b00      	cmp	r3, #0
   233f8:	d159      	bne.n	234ae <nmi_get_chipid+0xc2>
		uint32 rfrevid;
		
		if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
   233fa:	4a30      	ldr	r2, [pc, #192]	; (234bc <nmi_get_chipid+0xd0>)
   233fc:	2380      	movs	r3, #128	; 0x80
   233fe:	015b      	lsls	r3, r3, #5
   23400:	0011      	movs	r1, r2
   23402:	0018      	movs	r0, r3
   23404:	4b2e      	ldr	r3, [pc, #184]	; (234c0 <nmi_get_chipid+0xd4>)
   23406:	4798      	blx	r3
   23408:	1e03      	subs	r3, r0, #0
   2340a:	d004      	beq.n	23416 <nmi_get_chipid+0x2a>
			chipid = 0;
   2340c:	4b2b      	ldr	r3, [pc, #172]	; (234bc <nmi_get_chipid+0xd0>)
   2340e:	2200      	movs	r2, #0
   23410:	601a      	str	r2, [r3, #0]
			return 0;
   23412:	2300      	movs	r3, #0
   23414:	e04d      	b.n	234b2 <nmi_get_chipid+0xc6>
		}
		//if((ret = nm_read_reg_with_ret(0x11fc, &revid)) != M2M_SUCCESS) {
		//	return 0;
		//}
		if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
   23416:	1d3b      	adds	r3, r7, #4
   23418:	4a2a      	ldr	r2, [pc, #168]	; (234c4 <nmi_get_chipid+0xd8>)
   2341a:	0019      	movs	r1, r3
   2341c:	0010      	movs	r0, r2
   2341e:	4b28      	ldr	r3, [pc, #160]	; (234c0 <nmi_get_chipid+0xd4>)
   23420:	4798      	blx	r3
   23422:	1e03      	subs	r3, r0, #0
   23424:	d004      	beq.n	23430 <nmi_get_chipid+0x44>
			chipid = 0;
   23426:	4b25      	ldr	r3, [pc, #148]	; (234bc <nmi_get_chipid+0xd0>)
   23428:	2200      	movs	r2, #0
   2342a:	601a      	str	r2, [r3, #0]
			return 0;
   2342c:	2300      	movs	r3, #0
   2342e:	e040      	b.n	234b2 <nmi_get_chipid+0xc6>
		}

		if (chipid == 0x1002a0)  {
   23430:	4b22      	ldr	r3, [pc, #136]	; (234bc <nmi_get_chipid+0xd0>)
   23432:	681b      	ldr	r3, [r3, #0]
   23434:	4a24      	ldr	r2, [pc, #144]	; (234c8 <nmi_get_chipid+0xdc>)
   23436:	4293      	cmp	r3, r2
   23438:	d106      	bne.n	23448 <nmi_get_chipid+0x5c>
			if (rfrevid == 0x1) { /* 1002A0 */
   2343a:	687b      	ldr	r3, [r7, #4]
   2343c:	2b01      	cmp	r3, #1
   2343e:	d029      	beq.n	23494 <nmi_get_chipid+0xa8>
			} else /* if (rfrevid == 0x2) */ { /* 1002A1 */
				chipid = 0x1002a1;
   23440:	4b1e      	ldr	r3, [pc, #120]	; (234bc <nmi_get_chipid+0xd0>)
   23442:	4a22      	ldr	r2, [pc, #136]	; (234cc <nmi_get_chipid+0xe0>)
   23444:	601a      	str	r2, [r3, #0]
   23446:	e025      	b.n	23494 <nmi_get_chipid+0xa8>
			}
		} else if(chipid == 0x1002b0) {
   23448:	4b1c      	ldr	r3, [pc, #112]	; (234bc <nmi_get_chipid+0xd0>)
   2344a:	681b      	ldr	r3, [r3, #0]
   2344c:	4a20      	ldr	r2, [pc, #128]	; (234d0 <nmi_get_chipid+0xe4>)
   2344e:	4293      	cmp	r3, r2
   23450:	d10d      	bne.n	2346e <nmi_get_chipid+0x82>
			if(rfrevid == 3) { /* 1002B0 */
   23452:	687b      	ldr	r3, [r7, #4]
   23454:	2b03      	cmp	r3, #3
   23456:	d01d      	beq.n	23494 <nmi_get_chipid+0xa8>
			} else if(rfrevid == 4) { /* 1002B1 */
   23458:	687b      	ldr	r3, [r7, #4]
   2345a:	2b04      	cmp	r3, #4
   2345c:	d103      	bne.n	23466 <nmi_get_chipid+0x7a>
				chipid = 0x1002b1;
   2345e:	4b17      	ldr	r3, [pc, #92]	; (234bc <nmi_get_chipid+0xd0>)
   23460:	4a1c      	ldr	r2, [pc, #112]	; (234d4 <nmi_get_chipid+0xe8>)
   23462:	601a      	str	r2, [r3, #0]
   23464:	e016      	b.n	23494 <nmi_get_chipid+0xa8>
			} else /* if(rfrevid == 5) */ { /* 1002B2 */
				chipid = 0x1002b2;
   23466:	4b15      	ldr	r3, [pc, #84]	; (234bc <nmi_get_chipid+0xd0>)
   23468:	4a1b      	ldr	r2, [pc, #108]	; (234d8 <nmi_get_chipid+0xec>)
   2346a:	601a      	str	r2, [r3, #0]
   2346c:	e012      	b.n	23494 <nmi_get_chipid+0xa8>
			}
		}else if(chipid == 0x1000F0) { 
   2346e:	4b13      	ldr	r3, [pc, #76]	; (234bc <nmi_get_chipid+0xd0>)
   23470:	681b      	ldr	r3, [r3, #0]
   23472:	4a1a      	ldr	r2, [pc, #104]	; (234dc <nmi_get_chipid+0xf0>)
   23474:	4293      	cmp	r3, r2
   23476:	d10d      	bne.n	23494 <nmi_get_chipid+0xa8>
			if((nm_read_reg_with_ret(0x3B0000, &chipid)) != M2M_SUCCESS) {
   23478:	4a10      	ldr	r2, [pc, #64]	; (234bc <nmi_get_chipid+0xd0>)
   2347a:	23ec      	movs	r3, #236	; 0xec
   2347c:	039b      	lsls	r3, r3, #14
   2347e:	0011      	movs	r1, r2
   23480:	0018      	movs	r0, r3
   23482:	4b0f      	ldr	r3, [pc, #60]	; (234c0 <nmi_get_chipid+0xd4>)
   23484:	4798      	blx	r3
   23486:	1e03      	subs	r3, r0, #0
   23488:	d004      	beq.n	23494 <nmi_get_chipid+0xa8>
			chipid = 0;
   2348a:	4b0c      	ldr	r3, [pc, #48]	; (234bc <nmi_get_chipid+0xd0>)
   2348c:	2200      	movs	r2, #0
   2348e:	601a      	str	r2, [r3, #0]
			return 0;
   23490:	2300      	movs	r3, #0
   23492:	e00e      	b.n	234b2 <nmi_get_chipid+0xc6>
				chipid |= 0x050000;
			}
		}
#else
		/*M2M is by default have SPI flash*/
		chipid &= ~(0x0f0000);
   23494:	4b09      	ldr	r3, [pc, #36]	; (234bc <nmi_get_chipid+0xd0>)
   23496:	681b      	ldr	r3, [r3, #0]
   23498:	4a11      	ldr	r2, [pc, #68]	; (234e0 <nmi_get_chipid+0xf4>)
   2349a:	401a      	ands	r2, r3
   2349c:	4b07      	ldr	r3, [pc, #28]	; (234bc <nmi_get_chipid+0xd0>)
   2349e:	601a      	str	r2, [r3, #0]
		chipid |= 0x050000;
   234a0:	4b06      	ldr	r3, [pc, #24]	; (234bc <nmi_get_chipid+0xd0>)
   234a2:	681b      	ldr	r3, [r3, #0]
   234a4:	22a0      	movs	r2, #160	; 0xa0
   234a6:	02d2      	lsls	r2, r2, #11
   234a8:	431a      	orrs	r2, r3
   234aa:	4b04      	ldr	r3, [pc, #16]	; (234bc <nmi_get_chipid+0xd0>)
   234ac:	601a      	str	r2, [r3, #0]
#endif /* PROBE_FLASH */
	}
	return chipid;
   234ae:	4b03      	ldr	r3, [pc, #12]	; (234bc <nmi_get_chipid+0xd0>)
   234b0:	681b      	ldr	r3, [r3, #0]
}
   234b2:	0018      	movs	r0, r3
   234b4:	46bd      	mov	sp, r7
   234b6:	b002      	add	sp, #8
   234b8:	bd80      	pop	{r7, pc}
   234ba:	46c0      	nop			; (mov r8, r8)
   234bc:	200042ac 	.word	0x200042ac
   234c0:	00023aed 	.word	0x00023aed
   234c4:	000013f4 	.word	0x000013f4
   234c8:	001002a0 	.word	0x001002a0
   234cc:	001002a1 	.word	0x001002a1
   234d0:	001002b0 	.word	0x001002b0
   234d4:	001002b1 	.word	0x001002b1
   234d8:	001002b2 	.word	0x001002b2
   234dc:	001000f0 	.word	0x001000f0
   234e0:	fff0ffff 	.word	0xfff0ffff

000234e4 <chip_sleep>:

	/* Do PLL update */
	nmi_update_pll();
}
sint8 chip_sleep(void)
{
   234e4:	b590      	push	{r4, r7, lr}
   234e6:	b083      	sub	sp, #12
   234e8:	af00      	add	r7, sp, #0
	uint32 reg;
	sint8 ret = M2M_SUCCESS;
   234ea:	1dfb      	adds	r3, r7, #7
   234ec:	2200      	movs	r2, #0
   234ee:	701a      	strb	r2, [r3, #0]
	
	while(1)
	{
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   234f0:	1dfc      	adds	r4, r7, #7
   234f2:	003b      	movs	r3, r7
   234f4:	0019      	movs	r1, r3
   234f6:	2010      	movs	r0, #16
   234f8:	4b2e      	ldr	r3, [pc, #184]	; (235b4 <chip_sleep+0xd0>)
   234fa:	4798      	blx	r3
   234fc:	0003      	movs	r3, r0
   234fe:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto ERR1;
   23500:	1dfb      	adds	r3, r7, #7
   23502:	781b      	ldrb	r3, [r3, #0]
   23504:	b25b      	sxtb	r3, r3
   23506:	2b00      	cmp	r3, #0
   23508:	d145      	bne.n	23596 <chip_sleep+0xb2>
		if((reg & NBIT0) == 0) break;
   2350a:	683b      	ldr	r3, [r7, #0]
   2350c:	2201      	movs	r2, #1
   2350e:	4013      	ands	r3, r2
   23510:	d000      	beq.n	23514 <chip_sleep+0x30>
		ret = nm_read_reg_with_ret(CORT_HOST_COMM,&reg);
   23512:	e7ed      	b.n	234f0 <chip_sleep+0xc>
		if((reg & NBIT0) == 0) break;
   23514:	46c0      	nop			; (mov r8, r8)
	}
	
	/* Clear bit 1 */
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   23516:	1dfc      	adds	r4, r7, #7
   23518:	003b      	movs	r3, r7
   2351a:	0019      	movs	r1, r3
   2351c:	2001      	movs	r0, #1
   2351e:	4b25      	ldr	r3, [pc, #148]	; (235b4 <chip_sleep+0xd0>)
   23520:	4798      	blx	r3
   23522:	0003      	movs	r3, r0
   23524:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   23526:	1dfb      	adds	r3, r7, #7
   23528:	781b      	ldrb	r3, [r3, #0]
   2352a:	b25b      	sxtb	r3, r3
   2352c:	2b00      	cmp	r3, #0
   2352e:	d134      	bne.n	2359a <chip_sleep+0xb6>
	if(reg & NBIT1)
   23530:	683b      	ldr	r3, [r7, #0]
   23532:	2202      	movs	r2, #2
   23534:	4013      	ands	r3, r2
   23536:	d010      	beq.n	2355a <chip_sleep+0x76>
	{
		reg &=~NBIT1;
   23538:	683b      	ldr	r3, [r7, #0]
   2353a:	2202      	movs	r2, #2
   2353c:	4393      	bics	r3, r2
   2353e:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(WAKE_CLK_REG, reg);
   23540:	683b      	ldr	r3, [r7, #0]
   23542:	1dfc      	adds	r4, r7, #7
   23544:	0019      	movs	r1, r3
   23546:	2001      	movs	r0, #1
   23548:	4b1b      	ldr	r3, [pc, #108]	; (235b8 <chip_sleep+0xd4>)
   2354a:	4798      	blx	r3
   2354c:	0003      	movs	r3, r0
   2354e:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto ERR1;
   23550:	1dfb      	adds	r3, r7, #7
   23552:	781b      	ldrb	r3, [r3, #0]
   23554:	b25b      	sxtb	r3, r3
   23556:	2b00      	cmp	r3, #0
   23558:	d121      	bne.n	2359e <chip_sleep+0xba>
	}
	
	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   2355a:	1dfc      	adds	r4, r7, #7
   2355c:	003b      	movs	r3, r7
   2355e:	0019      	movs	r1, r3
   23560:	200b      	movs	r0, #11
   23562:	4b14      	ldr	r3, [pc, #80]	; (235b4 <chip_sleep+0xd0>)
   23564:	4798      	blx	r3
   23566:	0003      	movs	r3, r0
   23568:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto ERR1;
   2356a:	1dfb      	adds	r3, r7, #7
   2356c:	781b      	ldrb	r3, [r3, #0]
   2356e:	b25b      	sxtb	r3, r3
   23570:	2b00      	cmp	r3, #0
   23572:	d116      	bne.n	235a2 <chip_sleep+0xbe>
	if(reg & NBIT0)
   23574:	683b      	ldr	r3, [r7, #0]
   23576:	2201      	movs	r2, #1
   23578:	4013      	ands	r3, r2
   2357a:	d013      	beq.n	235a4 <chip_sleep+0xc0>
	{
		reg &= ~NBIT0;
   2357c:	683b      	ldr	r3, [r7, #0]
   2357e:	2201      	movs	r2, #1
   23580:	4393      	bics	r3, r2
   23582:	603b      	str	r3, [r7, #0]
		ret = nm_write_reg(HOST_CORT_COMM, reg);
   23584:	683b      	ldr	r3, [r7, #0]
   23586:	1dfc      	adds	r4, r7, #7
   23588:	0019      	movs	r1, r3
   2358a:	200b      	movs	r0, #11
   2358c:	4b0a      	ldr	r3, [pc, #40]	; (235b8 <chip_sleep+0xd4>)
   2358e:	4798      	blx	r3
   23590:	0003      	movs	r3, r0
   23592:	7023      	strb	r3, [r4, #0]
   23594:	e006      	b.n	235a4 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS) goto ERR1;
   23596:	46c0      	nop			; (mov r8, r8)
   23598:	e004      	b.n	235a4 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   2359a:	46c0      	nop			; (mov r8, r8)
   2359c:	e002      	b.n	235a4 <chip_sleep+0xc0>
		if(ret != M2M_SUCCESS)goto ERR1;
   2359e:	46c0      	nop			; (mov r8, r8)
   235a0:	e000      	b.n	235a4 <chip_sleep+0xc0>
	if(ret != M2M_SUCCESS)goto ERR1;
   235a2:	46c0      	nop			; (mov r8, r8)
		if(ret != M2M_SUCCESS)goto ERR1;
	}

ERR1:
	return ret;
   235a4:	1dfb      	adds	r3, r7, #7
   235a6:	781b      	ldrb	r3, [r3, #0]
   235a8:	b25b      	sxtb	r3, r3
}
   235aa:	0018      	movs	r0, r3
   235ac:	46bd      	mov	sp, r7
   235ae:	b003      	add	sp, #12
   235b0:	bd90      	pop	{r4, r7, pc}
   235b2:	46c0      	nop			; (mov r8, r8)
   235b4:	00023aed 	.word	0x00023aed
   235b8:	00023b11 	.word	0x00023b11

000235bc <chip_wake>:
sint8 chip_wake(void)
{
   235bc:	b590      	push	{r4, r7, lr}
   235be:	b085      	sub	sp, #20
   235c0:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   235c2:	230f      	movs	r3, #15
   235c4:	18fb      	adds	r3, r7, r3
   235c6:	2200      	movs	r2, #0
   235c8:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, clk_status_reg = 0,trials = 0;
   235ca:	2300      	movs	r3, #0
   235cc:	607b      	str	r3, [r7, #4]
   235ce:	2300      	movs	r3, #0
   235d0:	603b      	str	r3, [r7, #0]
   235d2:	2300      	movs	r3, #0
   235d4:	60bb      	str	r3, [r7, #8]

	ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
   235d6:	230f      	movs	r3, #15
   235d8:	18fc      	adds	r4, r7, r3
   235da:	1d3b      	adds	r3, r7, #4
   235dc:	0019      	movs	r1, r3
   235de:	200b      	movs	r0, #11
   235e0:	4b4e      	ldr	r3, [pc, #312]	; (2371c <chip_wake+0x160>)
   235e2:	4798      	blx	r3
   235e4:	0003      	movs	r3, r0
   235e6:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   235e8:	230f      	movs	r3, #15
   235ea:	18fb      	adds	r3, r7, r3
   235ec:	781b      	ldrb	r3, [r3, #0]
   235ee:	b25b      	sxtb	r3, r3
   235f0:	2b00      	cmp	r3, #0
   235f2:	d000      	beq.n	235f6 <chip_wake+0x3a>
   235f4:	e082      	b.n	236fc <chip_wake+0x140>
	
	if(!(reg & NBIT0))
   235f6:	687b      	ldr	r3, [r7, #4]
   235f8:	2201      	movs	r2, #1
   235fa:	4013      	ands	r3, r2
   235fc:	d111      	bne.n	23622 <chip_wake+0x66>
	{
		/*USE bit 0 to indicate host wakeup*/
		ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
   235fe:	687b      	ldr	r3, [r7, #4]
   23600:	2201      	movs	r2, #1
   23602:	4313      	orrs	r3, r2
   23604:	220f      	movs	r2, #15
   23606:	18bc      	adds	r4, r7, r2
   23608:	0019      	movs	r1, r3
   2360a:	200b      	movs	r0, #11
   2360c:	4b44      	ldr	r3, [pc, #272]	; (23720 <chip_wake+0x164>)
   2360e:	4798      	blx	r3
   23610:	0003      	movs	r3, r0
   23612:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   23614:	230f      	movs	r3, #15
   23616:	18fb      	adds	r3, r7, r3
   23618:	781b      	ldrb	r3, [r3, #0]
   2361a:	b25b      	sxtb	r3, r3
   2361c:	2b00      	cmp	r3, #0
   2361e:	d000      	beq.n	23622 <chip_wake+0x66>
   23620:	e06e      	b.n	23700 <chip_wake+0x144>
	}
		
	ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
   23622:	230f      	movs	r3, #15
   23624:	18fc      	adds	r4, r7, r3
   23626:	1d3b      	adds	r3, r7, #4
   23628:	0019      	movs	r1, r3
   2362a:	2001      	movs	r0, #1
   2362c:	4b3b      	ldr	r3, [pc, #236]	; (2371c <chip_wake+0x160>)
   2362e:	4798      	blx	r3
   23630:	0003      	movs	r3, r0
   23632:	7023      	strb	r3, [r4, #0]
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   23634:	230f      	movs	r3, #15
   23636:	18fb      	adds	r3, r7, r3
   23638:	781b      	ldrb	r3, [r3, #0]
   2363a:	b25b      	sxtb	r3, r3
   2363c:	2b00      	cmp	r3, #0
   2363e:	d161      	bne.n	23704 <chip_wake+0x148>
	/* Set bit 1 */
	if(!(reg & NBIT1))
   23640:	687b      	ldr	r3, [r7, #4]
   23642:	2202      	movs	r2, #2
   23644:	4013      	ands	r3, r2
   23646:	d110      	bne.n	2366a <chip_wake+0xae>
	{
		ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
   23648:	687b      	ldr	r3, [r7, #4]
   2364a:	2202      	movs	r2, #2
   2364c:	4313      	orrs	r3, r2
   2364e:	220f      	movs	r2, #15
   23650:	18bc      	adds	r4, r7, r2
   23652:	0019      	movs	r1, r3
   23654:	2001      	movs	r0, #1
   23656:	4b32      	ldr	r3, [pc, #200]	; (23720 <chip_wake+0x164>)
   23658:	4798      	blx	r3
   2365a:	0003      	movs	r3, r0
   2365c:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   2365e:	230f      	movs	r3, #15
   23660:	18fb      	adds	r3, r7, r3
   23662:	781b      	ldrb	r3, [r3, #0]
   23664:	b25b      	sxtb	r3, r3
   23666:	2b00      	cmp	r3, #0
   23668:	d14e      	bne.n	23708 <chip_wake+0x14c>
	}

	do
	{
		ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
   2366a:	230f      	movs	r3, #15
   2366c:	18fc      	adds	r4, r7, r3
   2366e:	003b      	movs	r3, r7
   23670:	0019      	movs	r1, r3
   23672:	200f      	movs	r0, #15
   23674:	4b29      	ldr	r3, [pc, #164]	; (2371c <chip_wake+0x160>)
   23676:	4798      	blx	r3
   23678:	0003      	movs	r3, r0
   2367a:	7023      	strb	r3, [r4, #0]
		if(ret != M2M_SUCCESS) {
   2367c:	230f      	movs	r3, #15
   2367e:	18fb      	adds	r3, r7, r3
   23680:	781b      	ldrb	r3, [r3, #0]
   23682:	b25b      	sxtb	r3, r3
   23684:	2b00      	cmp	r3, #0
   23686:	d014      	beq.n	236b2 <chip_wake+0xf6>
			M2M_ERR("Bus error (5).%d %lx\n",ret,clk_status_reg);
   23688:	23a8      	movs	r3, #168	; 0xa8
   2368a:	005a      	lsls	r2, r3, #1
   2368c:	4925      	ldr	r1, [pc, #148]	; (23724 <chip_wake+0x168>)
   2368e:	4b26      	ldr	r3, [pc, #152]	; (23728 <chip_wake+0x16c>)
   23690:	0018      	movs	r0, r3
   23692:	4b26      	ldr	r3, [pc, #152]	; (2372c <chip_wake+0x170>)
   23694:	4798      	blx	r3
   23696:	230f      	movs	r3, #15
   23698:	18fb      	adds	r3, r7, r3
   2369a:	2100      	movs	r1, #0
   2369c:	5659      	ldrsb	r1, [r3, r1]
   2369e:	683a      	ldr	r2, [r7, #0]
   236a0:	4b23      	ldr	r3, [pc, #140]	; (23730 <chip_wake+0x174>)
   236a2:	0018      	movs	r0, r3
   236a4:	4b21      	ldr	r3, [pc, #132]	; (2372c <chip_wake+0x170>)
   236a6:	4798      	blx	r3
   236a8:	4b22      	ldr	r3, [pc, #136]	; (23734 <chip_wake+0x178>)
   236aa:	0018      	movs	r0, r3
   236ac:	4b1f      	ldr	r3, [pc, #124]	; (2372c <chip_wake+0x170>)
   236ae:	4798      	blx	r3
			goto _WAKE_EXIT;
   236b0:	e02b      	b.n	2370a <chip_wake+0x14e>
		}
		if(clk_status_reg & NBIT2) {
   236b2:	683b      	ldr	r3, [r7, #0]
   236b4:	2204      	movs	r2, #4
   236b6:	4013      	ands	r3, r2
   236b8:	d11c      	bne.n	236f4 <chip_wake+0x138>
			break;
		}
		nm_bsp_sleep(2);
   236ba:	2002      	movs	r0, #2
   236bc:	4b1e      	ldr	r3, [pc, #120]	; (23738 <chip_wake+0x17c>)
   236be:	4798      	blx	r3
		trials++;
   236c0:	68bb      	ldr	r3, [r7, #8]
   236c2:	3301      	adds	r3, #1
   236c4:	60bb      	str	r3, [r7, #8]
		if(trials > WAKUP_TRAILS_TIMEOUT)
   236c6:	68bb      	ldr	r3, [r7, #8]
   236c8:	2b04      	cmp	r3, #4
   236ca:	d9ce      	bls.n	2366a <chip_wake+0xae>
		{
			M2M_ERR("Failed to wakup the chip\n");
   236cc:	23ad      	movs	r3, #173	; 0xad
   236ce:	005a      	lsls	r2, r3, #1
   236d0:	4914      	ldr	r1, [pc, #80]	; (23724 <chip_wake+0x168>)
   236d2:	4b15      	ldr	r3, [pc, #84]	; (23728 <chip_wake+0x16c>)
   236d4:	0018      	movs	r0, r3
   236d6:	4b15      	ldr	r3, [pc, #84]	; (2372c <chip_wake+0x170>)
   236d8:	4798      	blx	r3
   236da:	4b18      	ldr	r3, [pc, #96]	; (2373c <chip_wake+0x180>)
   236dc:	0018      	movs	r0, r3
   236de:	4b13      	ldr	r3, [pc, #76]	; (2372c <chip_wake+0x170>)
   236e0:	4798      	blx	r3
   236e2:	4b14      	ldr	r3, [pc, #80]	; (23734 <chip_wake+0x178>)
   236e4:	0018      	movs	r0, r3
   236e6:	4b11      	ldr	r3, [pc, #68]	; (2372c <chip_wake+0x170>)
   236e8:	4798      	blx	r3
			ret = M2M_ERR_TIME_OUT;
   236ea:	230f      	movs	r3, #15
   236ec:	18fb      	adds	r3, r7, r3
   236ee:	22fc      	movs	r2, #252	; 0xfc
   236f0:	701a      	strb	r2, [r3, #0]
			goto _WAKE_EXIT;
   236f2:	e00a      	b.n	2370a <chip_wake+0x14e>
			break;
   236f4:	46c0      	nop			; (mov r8, r8)
		}
	}while(1);
	
	/*workaround sometimes spi fail to read clock regs after reading/writing clockless registers*/
	nm_bus_reset();
   236f6:	4b12      	ldr	r3, [pc, #72]	; (23740 <chip_wake+0x184>)
   236f8:	4798      	blx	r3
   236fa:	e006      	b.n	2370a <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   236fc:	46c0      	nop			; (mov r8, r8)
   236fe:	e004      	b.n	2370a <chip_wake+0x14e>
		if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   23700:	46c0      	nop			; (mov r8, r8)
   23702:	e002      	b.n	2370a <chip_wake+0x14e>
	if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
   23704:	46c0      	nop			; (mov r8, r8)
   23706:	e000      	b.n	2370a <chip_wake+0x14e>
		if(ret != M2M_SUCCESS) goto _WAKE_EXIT;	
   23708:	46c0      	nop			; (mov r8, r8)
	
_WAKE_EXIT:
	return ret;
   2370a:	230f      	movs	r3, #15
   2370c:	18fb      	adds	r3, r7, r3
   2370e:	781b      	ldrb	r3, [r3, #0]
   23710:	b25b      	sxtb	r3, r3
}
   23712:	0018      	movs	r0, r3
   23714:	46bd      	mov	sp, r7
   23716:	b005      	add	sp, #20
   23718:	bd90      	pop	{r4, r7, pc}
   2371a:	46c0      	nop			; (mov r8, r8)
   2371c:	00023aed 	.word	0x00023aed
   23720:	00023b11 	.word	0x00023b11
   23724:	00039c74 	.word	0x00039c74
   23728:	00039be8 	.word	0x00039be8
   2372c:	0001ed29 	.word	0x0001ed29
   23730:	00039bfc 	.word	0x00039bfc
   23734:	00039c14 	.word	0x00039c14
   23738:	0002117d 	.word	0x0002117d
   2373c:	00039c18 	.word	0x00039c18
   23740:	00023aad 	.word	0x00023aad

00023744 <wait_for_bootrom>:
	nm_bsp_sleep(50);
	return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
   23744:	b580      	push	{r7, lr}
   23746:	b088      	sub	sp, #32
   23748:	af00      	add	r7, sp, #0
   2374a:	0002      	movs	r2, r0
   2374c:	1dfb      	adds	r3, r7, #7
   2374e:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   23750:	2313      	movs	r3, #19
   23752:	18fb      	adds	r3, r7, r3
   23754:	2200      	movs	r2, #0
   23756:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   23758:	2300      	movs	r3, #0
   2375a:	61fb      	str	r3, [r7, #28]
   2375c:	2300      	movs	r3, #0
   2375e:	61bb      	str	r3, [r7, #24]
	uint32 u32GpReg1 = 0;
   23760:	2300      	movs	r3, #0
   23762:	617b      	str	r3, [r7, #20]
	uint32 u32DriverVerInfo = M2M_MAKE_VERSION_INFO(M2M_RELEASE_VERSION_MAJOR_NO,\
   23764:	4b4a      	ldr	r3, [pc, #296]	; (23890 <wait_for_bootrom+0x14c>)
   23766:	60fb      	str	r3, [r7, #12]
				M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO,\
				M2M_MIN_REQ_DRV_VERSION_MAJOR_NO, M2M_MIN_REQ_DRV_VERSION_MINOR_NO,\
				M2M_MIN_REQ_DRV_VERSION_PATCH_NO);


	reg = 0;
   23768:	2300      	movs	r3, #0
   2376a:	61fb      	str	r3, [r7, #28]
	while(1) {
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   2376c:	4b49      	ldr	r3, [pc, #292]	; (23894 <wait_for_bootrom+0x150>)
   2376e:	0018      	movs	r0, r3
   23770:	4b49      	ldr	r3, [pc, #292]	; (23898 <wait_for_bootrom+0x154>)
   23772:	4798      	blx	r3
   23774:	0003      	movs	r3, r0
   23776:	61fb      	str	r3, [r7, #28]
		if (reg & 0x80000000) {
   23778:	69fb      	ldr	r3, [r7, #28]
   2377a:	2b00      	cmp	r3, #0
   2377c:	db03      	blt.n	23786 <wait_for_bootrom+0x42>
			break;
		}
		nm_bsp_sleep(1); /* TODO: Why bus error if this delay is not here. */
   2377e:	2001      	movs	r0, #1
   23780:	4b46      	ldr	r3, [pc, #280]	; (2389c <wait_for_bootrom+0x158>)
   23782:	4798      	blx	r3
		reg = nm_read_reg(0x1014);	/* wait for efuse loading done */
   23784:	e7f2      	b.n	2376c <wait_for_bootrom+0x28>
			break;
   23786:	46c0      	nop			; (mov r8, r8)
	}
	reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
   23788:	4b45      	ldr	r3, [pc, #276]	; (238a0 <wait_for_bootrom+0x15c>)
   2378a:	0018      	movs	r0, r3
   2378c:	4b42      	ldr	r3, [pc, #264]	; (23898 <wait_for_bootrom+0x154>)
   2378e:	4798      	blx	r3
   23790:	0003      	movs	r3, r0
   23792:	61fb      	str	r3, [r7, #28]
	reg &= 0x1;
   23794:	69fb      	ldr	r3, [r7, #28]
   23796:	2201      	movs	r2, #1
   23798:	4013      	ands	r3, r2
   2379a:	61fb      	str	r3, [r7, #28]

	/* check if waiting for the host will be skipped or not */
	if(reg == 0)
   2379c:	69fb      	ldr	r3, [r7, #28]
   2379e:	2b00      	cmp	r3, #0
   237a0:	d112      	bne.n	237c8 <wait_for_bootrom+0x84>
	{
		reg = 0;
   237a2:	2300      	movs	r3, #0
   237a4:	61fb      	str	r3, [r7, #28]
		while(reg != M2M_FINISH_BOOT_ROM)
   237a6:	e00b      	b.n	237c0 <wait_for_bootrom+0x7c>
		{
			nm_bsp_sleep(1);
   237a8:	2001      	movs	r0, #1
   237aa:	4b3c      	ldr	r3, [pc, #240]	; (2389c <wait_for_bootrom+0x158>)
   237ac:	4798      	blx	r3
			reg = nm_read_reg(BOOTROM_REG);
   237ae:	4b3d      	ldr	r3, [pc, #244]	; (238a4 <wait_for_bootrom+0x160>)
   237b0:	0018      	movs	r0, r3
   237b2:	4b39      	ldr	r3, [pc, #228]	; (23898 <wait_for_bootrom+0x154>)
   237b4:	4798      	blx	r3
   237b6:	0003      	movs	r3, r0
   237b8:	61fb      	str	r3, [r7, #28]

			if(++cnt > TIMEOUT)
   237ba:	69bb      	ldr	r3, [r7, #24]
   237bc:	3301      	adds	r3, #1
   237be:	61bb      	str	r3, [r7, #24]
		while(reg != M2M_FINISH_BOOT_ROM)
   237c0:	69fb      	ldr	r3, [r7, #28]
   237c2:	4a39      	ldr	r2, [pc, #228]	; (238a8 <wait_for_bootrom+0x164>)
   237c4:	4293      	cmp	r3, r2
   237c6:	d1ef      	bne.n	237a8 <wait_for_bootrom+0x64>
				goto ERR2;
			}
		}
	}
	
	if(M2M_WIFI_MODE_ATE_HIGH == arg) {
   237c8:	1dfb      	adds	r3, r7, #7
   237ca:	781b      	ldrb	r3, [r3, #0]
   237cc:	2b02      	cmp	r3, #2
   237ce:	d10d      	bne.n	237ec <wait_for_bootrom+0xa8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   237d0:	4a36      	ldr	r2, [pc, #216]	; (238ac <wait_for_bootrom+0x168>)
   237d2:	4b37      	ldr	r3, [pc, #220]	; (238b0 <wait_for_bootrom+0x16c>)
   237d4:	0011      	movs	r1, r2
   237d6:	0018      	movs	r0, r3
   237d8:	4b36      	ldr	r3, [pc, #216]	; (238b4 <wait_for_bootrom+0x170>)
   237da:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, NBIT20);
   237dc:	2380      	movs	r3, #128	; 0x80
   237de:	035b      	lsls	r3, r3, #13
   237e0:	4a35      	ldr	r2, [pc, #212]	; (238b8 <wait_for_bootrom+0x174>)
   237e2:	0019      	movs	r1, r3
   237e4:	0010      	movs	r0, r2
   237e6:	4b33      	ldr	r3, [pc, #204]	; (238b4 <wait_for_bootrom+0x170>)
   237e8:	4798      	blx	r3
   237ea:	e022      	b.n	23832 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ATE_LOW == arg) {
   237ec:	1dfb      	adds	r3, r7, #7
   237ee:	781b      	ldrb	r3, [r3, #0]
   237f0:	2b03      	cmp	r3, #3
   237f2:	d10b      	bne.n	2380c <wait_for_bootrom+0xc8>
		nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
   237f4:	4a2d      	ldr	r2, [pc, #180]	; (238ac <wait_for_bootrom+0x168>)
   237f6:	4b2e      	ldr	r3, [pc, #184]	; (238b0 <wait_for_bootrom+0x16c>)
   237f8:	0011      	movs	r1, r2
   237fa:	0018      	movs	r0, r3
   237fc:	4b2d      	ldr	r3, [pc, #180]	; (238b4 <wait_for_bootrom+0x170>)
   237fe:	4798      	blx	r3
		nm_write_reg(NMI_STATE_REG, 0);
   23800:	4b2d      	ldr	r3, [pc, #180]	; (238b8 <wait_for_bootrom+0x174>)
   23802:	2100      	movs	r1, #0
   23804:	0018      	movs	r0, r3
   23806:	4b2b      	ldr	r3, [pc, #172]	; (238b4 <wait_for_bootrom+0x170>)
   23808:	4798      	blx	r3
   2380a:	e012      	b.n	23832 <wait_for_bootrom+0xee>
	}else if(M2M_WIFI_MODE_ETHERNET == arg){
   2380c:	1dfb      	adds	r3, r7, #7
   2380e:	781b      	ldrb	r3, [r3, #0]
   23810:	2b04      	cmp	r3, #4
   23812:	d108      	bne.n	23826 <wait_for_bootrom+0xe2>
		u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
   23814:	2380      	movs	r3, #128	; 0x80
   23816:	617b      	str	r3, [r7, #20]
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   23818:	68fb      	ldr	r3, [r7, #12]
   2381a:	4a27      	ldr	r2, [pc, #156]	; (238b8 <wait_for_bootrom+0x174>)
   2381c:	0019      	movs	r1, r3
   2381e:	0010      	movs	r0, r2
   23820:	4b24      	ldr	r3, [pc, #144]	; (238b4 <wait_for_bootrom+0x170>)
   23822:	4798      	blx	r3
   23824:	e005      	b.n	23832 <wait_for_bootrom+0xee>
	} else {
		/*bypass this step*/
		nm_write_reg(NMI_STATE_REG, u32DriverVerInfo);
   23826:	68fb      	ldr	r3, [r7, #12]
   23828:	4a23      	ldr	r2, [pc, #140]	; (238b8 <wait_for_bootrom+0x174>)
   2382a:	0019      	movs	r1, r3
   2382c:	0010      	movs	r0, r2
   2382e:	4b21      	ldr	r3, [pc, #132]	; (238b4 <wait_for_bootrom+0x170>)
   23830:	4798      	blx	r3
	}

	if(REV(nmi_get_chipid()) >= REV_3A0){
   23832:	4b22      	ldr	r3, [pc, #136]	; (238bc <wait_for_bootrom+0x178>)
   23834:	4798      	blx	r3
   23836:	0003      	movs	r3, r0
   23838:	051b      	lsls	r3, r3, #20
   2383a:	0d1b      	lsrs	r3, r3, #20
   2383c:	4a20      	ldr	r2, [pc, #128]	; (238c0 <wait_for_bootrom+0x17c>)
   2383e:	4293      	cmp	r3, r2
   23840:	d906      	bls.n	23850 <wait_for_bootrom+0x10c>
		chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
   23842:	697b      	ldr	r3, [r7, #20]
   23844:	2202      	movs	r2, #2
   23846:	4313      	orrs	r3, r2
   23848:	0018      	movs	r0, r3
   2384a:	4b1e      	ldr	r3, [pc, #120]	; (238c4 <wait_for_bootrom+0x180>)
   2384c:	4798      	blx	r3
   2384e:	e003      	b.n	23858 <wait_for_bootrom+0x114>
	} else {
		chip_apply_conf(u32GpReg1);
   23850:	697b      	ldr	r3, [r7, #20]
   23852:	0018      	movs	r0, r3
   23854:	4b1b      	ldr	r3, [pc, #108]	; (238c4 <wait_for_bootrom+0x180>)
   23856:	4798      	blx	r3
	}
	M2M_INFO("DriverVerInfo: 0x%08lx\n",u32DriverVerInfo);
   23858:	4b1b      	ldr	r3, [pc, #108]	; (238c8 <wait_for_bootrom+0x184>)
   2385a:	0018      	movs	r0, r3
   2385c:	4b1b      	ldr	r3, [pc, #108]	; (238cc <wait_for_bootrom+0x188>)
   2385e:	4798      	blx	r3
   23860:	68fa      	ldr	r2, [r7, #12]
   23862:	4b1b      	ldr	r3, [pc, #108]	; (238d0 <wait_for_bootrom+0x18c>)
   23864:	0011      	movs	r1, r2
   23866:	0018      	movs	r0, r3
   23868:	4b18      	ldr	r3, [pc, #96]	; (238cc <wait_for_bootrom+0x188>)
   2386a:	4798      	blx	r3
   2386c:	4b19      	ldr	r3, [pc, #100]	; (238d4 <wait_for_bootrom+0x190>)
   2386e:	0018      	movs	r0, r3
   23870:	4b16      	ldr	r3, [pc, #88]	; (238cc <wait_for_bootrom+0x188>)
   23872:	4798      	blx	r3

	nm_write_reg(BOOTROM_REG,M2M_START_FIRMWARE);
   23874:	4a18      	ldr	r2, [pc, #96]	; (238d8 <wait_for_bootrom+0x194>)
   23876:	4b0b      	ldr	r3, [pc, #44]	; (238a4 <wait_for_bootrom+0x160>)
   23878:	0011      	movs	r1, r2
   2387a:	0018      	movs	r0, r3
   2387c:	4b0d      	ldr	r3, [pc, #52]	; (238b4 <wait_for_bootrom+0x170>)
   2387e:	4798      	blx	r3
#ifdef __ROM_TEST__
	rom_test();
#endif /* __ROM_TEST__ */

ERR2:
	return ret;
   23880:	2313      	movs	r3, #19
   23882:	18fb      	adds	r3, r7, r3
   23884:	781b      	ldrb	r3, [r3, #0]
   23886:	b25b      	sxtb	r3, r3
}
   23888:	0018      	movs	r0, r3
   2388a:	46bd      	mov	sp, r7
   2388c:	b008      	add	sp, #32
   2388e:	bd80      	pop	{r7, pc}
   23890:	13301354 	.word	0x13301354
   23894:	00001014 	.word	0x00001014
   23898:	00023acd 	.word	0x00023acd
   2389c:	0002117d 	.word	0x0002117d
   238a0:	000207bc 	.word	0x000207bc
   238a4:	000c000c 	.word	0x000c000c
   238a8:	10add09e 	.word	0x10add09e
   238ac:	3c1cd57d 	.word	0x3c1cd57d
   238b0:	000207ac 	.word	0x000207ac
   238b4:	00023b11 	.word	0x00023b11
   238b8:	0000108c 	.word	0x0000108c
   238bc:	000233ed 	.word	0x000233ed
   238c0:	0000039f 	.word	0x0000039f
   238c4:	000232bd 	.word	0x000232bd
   238c8:	00039c34 	.word	0x00039c34
   238cc:	0001ed29 	.word	0x0001ed29
   238d0:	00039c40 	.word	0x00039c40
   238d4:	00039c14 	.word	0x00039c14
   238d8:	ef522f61 	.word	0xef522f61

000238dc <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
   238dc:	b580      	push	{r7, lr}
   238de:	b088      	sub	sp, #32
   238e0:	af00      	add	r7, sp, #0
   238e2:	0002      	movs	r2, r0
   238e4:	1dfb      	adds	r3, r7, #7
   238e6:	701a      	strb	r2, [r3, #0]
	sint8 ret = M2M_SUCCESS;
   238e8:	231f      	movs	r3, #31
   238ea:	18fb      	adds	r3, r7, r3
   238ec:	2200      	movs	r2, #0
   238ee:	701a      	strb	r2, [r3, #0]
	uint32 reg = 0, cnt = 0;
   238f0:	2300      	movs	r3, #0
   238f2:	61bb      	str	r3, [r7, #24]
   238f4:	2300      	movs	r3, #0
   238f6:	617b      	str	r3, [r7, #20]
	uint32 u32Timeout = TIMEOUT;
   238f8:	2301      	movs	r3, #1
   238fa:	425b      	negs	r3, r3
   238fc:	613b      	str	r3, [r7, #16]
	volatile uint32 regAddress = NMI_STATE_REG;
   238fe:	4b1d      	ldr	r3, [pc, #116]	; (23974 <wait_for_firmware_start+0x98>)
   23900:	60fb      	str	r3, [r7, #12]
	volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
   23902:	4b1d      	ldr	r3, [pc, #116]	; (23978 <wait_for_firmware_start+0x9c>)
   23904:	60bb      	str	r3, [r7, #8]
	
	if((M2M_WIFI_MODE_ATE_HIGH == arg)||(M2M_WIFI_MODE_ATE_LOW == arg)) {
   23906:	1dfb      	adds	r3, r7, #7
   23908:	781b      	ldrb	r3, [r3, #0]
   2390a:	2b02      	cmp	r3, #2
   2390c:	d003      	beq.n	23916 <wait_for_firmware_start+0x3a>
   2390e:	1dfb      	adds	r3, r7, #7
   23910:	781b      	ldrb	r3, [r3, #0]
   23912:	2b03      	cmp	r3, #3
   23914:	d119      	bne.n	2394a <wait_for_firmware_start+0x6e>
		regAddress = NMI_REV_REG;
   23916:	4b19      	ldr	r3, [pc, #100]	; (2397c <wait_for_firmware_start+0xa0>)
   23918:	60fb      	str	r3, [r7, #12]
		checkValue = M2M_ATE_FW_IS_UP_VALUE;
   2391a:	4b19      	ldr	r3, [pc, #100]	; (23980 <wait_for_firmware_start+0xa4>)
   2391c:	60bb      	str	r3, [r7, #8]
	} else {
		/*bypass this step*/
	}
	
	
	while (checkValue != reg)
   2391e:	e014      	b.n	2394a <wait_for_firmware_start+0x6e>
	{
		nm_bsp_sleep(2); /* TODO: Why bus error if this delay is not here. */
   23920:	2002      	movs	r0, #2
   23922:	4b18      	ldr	r3, [pc, #96]	; (23984 <wait_for_firmware_start+0xa8>)
   23924:	4798      	blx	r3
		M2M_DBG("%x %x %x\n",(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x108c),(unsigned int)nm_read_reg(0x14A0));
		reg = nm_read_reg(regAddress);
   23926:	68fb      	ldr	r3, [r7, #12]
   23928:	0018      	movs	r0, r3
   2392a:	4b17      	ldr	r3, [pc, #92]	; (23988 <wait_for_firmware_start+0xac>)
   2392c:	4798      	blx	r3
   2392e:	0003      	movs	r3, r0
   23930:	61bb      	str	r3, [r7, #24]
		if(++cnt >= u32Timeout)
   23932:	697b      	ldr	r3, [r7, #20]
   23934:	3301      	adds	r3, #1
   23936:	617b      	str	r3, [r7, #20]
   23938:	697a      	ldr	r2, [r7, #20]
   2393a:	693b      	ldr	r3, [r7, #16]
   2393c:	429a      	cmp	r2, r3
   2393e:	d304      	bcc.n	2394a <wait_for_firmware_start+0x6e>
		{
			M2M_DBG("Time out for wait firmware Run\n");
			ret = M2M_ERR_INIT;
   23940:	231f      	movs	r3, #31
   23942:	18fb      	adds	r3, r7, r3
   23944:	22fb      	movs	r2, #251	; 0xfb
   23946:	701a      	strb	r2, [r3, #0]
			goto ERR;
   23948:	e00c      	b.n	23964 <wait_for_firmware_start+0x88>
	while (checkValue != reg)
   2394a:	68ba      	ldr	r2, [r7, #8]
   2394c:	69bb      	ldr	r3, [r7, #24]
   2394e:	429a      	cmp	r2, r3
   23950:	d1e6      	bne.n	23920 <wait_for_firmware_start+0x44>
		}
	}
	if(M2M_FINISH_INIT_STATE == checkValue)
   23952:	68bb      	ldr	r3, [r7, #8]
   23954:	4a08      	ldr	r2, [pc, #32]	; (23978 <wait_for_firmware_start+0x9c>)
   23956:	4293      	cmp	r3, r2
   23958:	d104      	bne.n	23964 <wait_for_firmware_start+0x88>
	{
		nm_write_reg(NMI_STATE_REG, 0);
   2395a:	4b06      	ldr	r3, [pc, #24]	; (23974 <wait_for_firmware_start+0x98>)
   2395c:	2100      	movs	r1, #0
   2395e:	0018      	movs	r0, r3
   23960:	4b0a      	ldr	r3, [pc, #40]	; (2398c <wait_for_firmware_start+0xb0>)
   23962:	4798      	blx	r3
	}
ERR:
	return ret;
   23964:	231f      	movs	r3, #31
   23966:	18fb      	adds	r3, r7, r3
   23968:	781b      	ldrb	r3, [r3, #0]
   2396a:	b25b      	sxtb	r3, r3
}
   2396c:	0018      	movs	r0, r3
   2396e:	46bd      	mov	sp, r7
   23970:	b008      	add	sp, #32
   23972:	bd80      	pop	{r7, pc}
   23974:	0000108c 	.word	0x0000108c
   23978:	02532636 	.word	0x02532636
   2397c:	000207ac 	.word	0x000207ac
   23980:	d75dc1c3 	.word	0xd75dc1c3
   23984:	0002117d 	.word	0x0002117d
   23988:	00023acd 	.word	0x00023acd
   2398c:	00023b11 	.word	0x00023b11

00023990 <chip_deinit>:

sint8 chip_deinit(void)
{
   23990:	b590      	push	{r4, r7, lr}
   23992:	b083      	sub	sp, #12
   23994:	af00      	add	r7, sp, #0
	uint32 reg = 0;
   23996:	2300      	movs	r3, #0
   23998:	603b      	str	r3, [r7, #0]
	sint8 ret;

	/**
	stop the firmware, need a re-download
	**/
	ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
   2399a:	1dfc      	adds	r4, r7, #7
   2399c:	003a      	movs	r2, r7
   2399e:	23a0      	movs	r3, #160	; 0xa0
   239a0:	015b      	lsls	r3, r3, #5
   239a2:	0011      	movs	r1, r2
   239a4:	0018      	movs	r0, r3
   239a6:	4b20      	ldr	r3, [pc, #128]	; (23a28 <chip_deinit+0x98>)
   239a8:	4798      	blx	r3
   239aa:	0003      	movs	r3, r0
   239ac:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   239ae:	1dfb      	adds	r3, r7, #7
   239b0:	781b      	ldrb	r3, [r3, #0]
   239b2:	b25b      	sxtb	r3, r3
   239b4:	2b00      	cmp	r3, #0
   239b6:	d00e      	beq.n	239d6 <chip_deinit+0x46>
		M2M_ERR("failed to de-initialize\n");
   239b8:	4a1c      	ldr	r2, [pc, #112]	; (23a2c <chip_deinit+0x9c>)
   239ba:	491d      	ldr	r1, [pc, #116]	; (23a30 <chip_deinit+0xa0>)
   239bc:	4b1d      	ldr	r3, [pc, #116]	; (23a34 <chip_deinit+0xa4>)
   239be:	0018      	movs	r0, r3
   239c0:	4b1d      	ldr	r3, [pc, #116]	; (23a38 <chip_deinit+0xa8>)
   239c2:	4798      	blx	r3
   239c4:	4b1d      	ldr	r3, [pc, #116]	; (23a3c <chip_deinit+0xac>)
   239c6:	0018      	movs	r0, r3
   239c8:	4b1b      	ldr	r3, [pc, #108]	; (23a38 <chip_deinit+0xa8>)
   239ca:	4798      	blx	r3
   239cc:	4b1c      	ldr	r3, [pc, #112]	; (23a40 <chip_deinit+0xb0>)
   239ce:	0018      	movs	r0, r3
   239d0:	4b19      	ldr	r3, [pc, #100]	; (23a38 <chip_deinit+0xa8>)
   239d2:	4798      	blx	r3
		goto ERR1;
   239d4:	e021      	b.n	23a1a <chip_deinit+0x8a>
	}
	reg &= ~(1 << 10);
   239d6:	683b      	ldr	r3, [r7, #0]
   239d8:	4a1a      	ldr	r2, [pc, #104]	; (23a44 <chip_deinit+0xb4>)
   239da:	4013      	ands	r3, r2
   239dc:	603b      	str	r3, [r7, #0]
	ret = nm_write_reg(NMI_GLB_RESET_0, reg);
   239de:	683a      	ldr	r2, [r7, #0]
   239e0:	1dfc      	adds	r4, r7, #7
   239e2:	23a0      	movs	r3, #160	; 0xa0
   239e4:	015b      	lsls	r3, r3, #5
   239e6:	0011      	movs	r1, r2
   239e8:	0018      	movs	r0, r3
   239ea:	4b17      	ldr	r3, [pc, #92]	; (23a48 <chip_deinit+0xb8>)
   239ec:	4798      	blx	r3
   239ee:	0003      	movs	r3, r0
   239f0:	7023      	strb	r3, [r4, #0]
	if (ret != M2M_SUCCESS) {
   239f2:	1dfb      	adds	r3, r7, #7
   239f4:	781b      	ldrb	r3, [r3, #0]
   239f6:	b25b      	sxtb	r3, r3
   239f8:	2b00      	cmp	r3, #0
   239fa:	d00e      	beq.n	23a1a <chip_deinit+0x8a>
		M2M_ERR("failed to de-initialize\n");
   239fc:	4a13      	ldr	r2, [pc, #76]	; (23a4c <chip_deinit+0xbc>)
   239fe:	490c      	ldr	r1, [pc, #48]	; (23a30 <chip_deinit+0xa0>)
   23a00:	4b0c      	ldr	r3, [pc, #48]	; (23a34 <chip_deinit+0xa4>)
   23a02:	0018      	movs	r0, r3
   23a04:	4b0c      	ldr	r3, [pc, #48]	; (23a38 <chip_deinit+0xa8>)
   23a06:	4798      	blx	r3
   23a08:	4b0c      	ldr	r3, [pc, #48]	; (23a3c <chip_deinit+0xac>)
   23a0a:	0018      	movs	r0, r3
   23a0c:	4b0a      	ldr	r3, [pc, #40]	; (23a38 <chip_deinit+0xa8>)
   23a0e:	4798      	blx	r3
   23a10:	4b0b      	ldr	r3, [pc, #44]	; (23a40 <chip_deinit+0xb0>)
   23a12:	0018      	movs	r0, r3
   23a14:	4b08      	ldr	r3, [pc, #32]	; (23a38 <chip_deinit+0xa8>)
   23a16:	4798      	blx	r3
		goto ERR1;
   23a18:	46c0      	nop			; (mov r8, r8)
	}

ERR1:
	return ret;
   23a1a:	1dfb      	adds	r3, r7, #7
   23a1c:	781b      	ldrb	r3, [r3, #0]
   23a1e:	b25b      	sxtb	r3, r3
}
   23a20:	0018      	movs	r0, r3
   23a22:	46bd      	mov	sp, r7
   23a24:	b003      	add	sp, #12
   23a26:	bd90      	pop	{r4, r7, pc}
   23a28:	00023aed 	.word	0x00023aed
   23a2c:	00000201 	.word	0x00000201
   23a30:	00039c80 	.word	0x00039c80
   23a34:	00039be8 	.word	0x00039be8
   23a38:	0001ed29 	.word	0x0001ed29
   23a3c:	00039c58 	.word	0x00039c58
   23a40:	00039c14 	.word	0x00039c14
   23a44:	fffffbff 	.word	0xfffffbff
   23a48:	00023b11 	.word	0x00023b11
   23a4c:	00000207 	.word	0x00000207

00023a50 <nm_bus_iface_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_bus_iface_init(void *pvInitVal)
{
   23a50:	b590      	push	{r4, r7, lr}
   23a52:	b085      	sub	sp, #20
   23a54:	af00      	add	r7, sp, #0
   23a56:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   23a58:	230f      	movs	r3, #15
   23a5a:	18fb      	adds	r3, r7, r3
   23a5c:	2200      	movs	r2, #0
   23a5e:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_init(pvInitVal);
   23a60:	230f      	movs	r3, #15
   23a62:	18fc      	adds	r4, r7, r3
   23a64:	687b      	ldr	r3, [r7, #4]
   23a66:	0018      	movs	r0, r3
   23a68:	4b05      	ldr	r3, [pc, #20]	; (23a80 <nm_bus_iface_init+0x30>)
   23a6a:	4798      	blx	r3
   23a6c:	0003      	movs	r3, r0
   23a6e:	7023      	strb	r3, [r4, #0]
	return ret;
   23a70:	230f      	movs	r3, #15
   23a72:	18fb      	adds	r3, r7, r3
   23a74:	781b      	ldrb	r3, [r3, #0]
   23a76:	b25b      	sxtb	r3, r3
}
   23a78:	0018      	movs	r0, r3
   23a7a:	46bd      	mov	sp, r7
   23a7c:	b005      	add	sp, #20
   23a7e:	bd90      	pop	{r4, r7, pc}
   23a80:	00021839 	.word	0x00021839

00023a84 <nm_bus_iface_deinit>:
*	@author	Samer Sarhan
*	@date	07 April 2014
*	@version	1.0
*/
sint8 nm_bus_iface_deinit(void)
{
   23a84:	b590      	push	{r4, r7, lr}
   23a86:	b083      	sub	sp, #12
   23a88:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   23a8a:	1dfb      	adds	r3, r7, #7
   23a8c:	2200      	movs	r2, #0
   23a8e:	701a      	strb	r2, [r3, #0]
	ret = nm_bus_deinit();
   23a90:	1dfc      	adds	r4, r7, #7
   23a92:	4b05      	ldr	r3, [pc, #20]	; (23aa8 <nm_bus_iface_deinit+0x24>)
   23a94:	4798      	blx	r3
   23a96:	0003      	movs	r3, r0
   23a98:	7023      	strb	r3, [r4, #0]

	return ret;
   23a9a:	1dfb      	adds	r3, r7, #7
   23a9c:	781b      	ldrb	r3, [r3, #0]
   23a9e:	b25b      	sxtb	r3, r3
}
   23aa0:	0018      	movs	r0, r3
   23aa2:	46bd      	mov	sp, r7
   23aa4:	b003      	add	sp, #12
   23aa6:	bd90      	pop	{r4, r7, pc}
   23aa8:	000219b1 	.word	0x000219b1

00023aac <nm_bus_reset>:
*	@brief	reset bus interface
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@version	1.0
*/
sint8 nm_bus_reset(void)
{
   23aac:	b580      	push	{r7, lr}
   23aae:	b082      	sub	sp, #8
   23ab0:	af00      	add	r7, sp, #0
	sint8 ret = M2M_SUCCESS;
   23ab2:	1dfb      	adds	r3, r7, #7
   23ab4:	2200      	movs	r2, #0
   23ab6:	701a      	strb	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_reset();
   23ab8:	4b03      	ldr	r3, [pc, #12]	; (23ac8 <nm_bus_reset+0x1c>)
   23aba:	4798      	blx	r3
   23abc:	0003      	movs	r3, r0
#else
#error "Plesae define bus usage"
#endif

	return ret;
}
   23abe:	0018      	movs	r0, r3
   23ac0:	46bd      	mov	sp, r7
   23ac2:	b002      	add	sp, #8
   23ac4:	bd80      	pop	{r7, pc}
   23ac6:	46c0      	nop			; (mov r8, r8)
   23ac8:	000258d9 	.word	0x000258d9

00023acc <nm_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_read_reg(uint32 u32Addr)
{
   23acc:	b580      	push	{r7, lr}
   23ace:	b082      	sub	sp, #8
   23ad0:	af00      	add	r7, sp, #0
   23ad2:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg(u32Addr);
   23ad4:	687b      	ldr	r3, [r7, #4]
   23ad6:	0018      	movs	r0, r3
   23ad8:	4b03      	ldr	r3, [pc, #12]	; (23ae8 <nm_read_reg+0x1c>)
   23ada:	4798      	blx	r3
   23adc:	0003      	movs	r3, r0
	return nm_i2c_read_reg(u32Addr);
#else
#error "Plesae define bus usage"
#endif

}
   23ade:	0018      	movs	r0, r3
   23ae0:	46bd      	mov	sp, r7
   23ae2:	b002      	add	sp, #8
   23ae4:	bd80      	pop	{r7, pc}
   23ae6:	46c0      	nop			; (mov r8, r8)
   23ae8:	00025a6d 	.word	0x00025a6d

00023aec <nm_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   23aec:	b580      	push	{r7, lr}
   23aee:	b082      	sub	sp, #8
   23af0:	af00      	add	r7, sp, #0
   23af2:	6078      	str	r0, [r7, #4]
   23af4:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_reg_with_ret(u32Addr,pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_reg_with_ret(u32Addr,pu32RetVal);
   23af6:	683a      	ldr	r2, [r7, #0]
   23af8:	687b      	ldr	r3, [r7, #4]
   23afa:	0011      	movs	r1, r2
   23afc:	0018      	movs	r0, r3
   23afe:	4b03      	ldr	r3, [pc, #12]	; (23b0c <nm_read_reg_with_ret+0x20>)
   23b00:	4798      	blx	r3
   23b02:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_read_reg_with_ret(u32Addr,pu32RetVal);
#else
#error "Plesae define bus usage"
#endif
}
   23b04:	0018      	movs	r0, r3
   23b06:	46bd      	mov	sp, r7
   23b08:	b002      	add	sp, #8
   23b0a:	bd80      	pop	{r7, pc}
   23b0c:	00025a91 	.word	0x00025a91

00023b10 <nm_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
   23b10:	b580      	push	{r7, lr}
   23b12:	b082      	sub	sp, #8
   23b14:	af00      	add	r7, sp, #0
   23b16:	6078      	str	r0, [r7, #4]
   23b18:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_reg(u32Addr,u32Val);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_reg(u32Addr,u32Val);
   23b1a:	683a      	ldr	r2, [r7, #0]
   23b1c:	687b      	ldr	r3, [r7, #4]
   23b1e:	0011      	movs	r1, r2
   23b20:	0018      	movs	r0, r3
   23b22:	4b03      	ldr	r3, [pc, #12]	; (23b30 <nm_write_reg+0x20>)
   23b24:	4798      	blx	r3
   23b26:	0003      	movs	r3, r0
#elif defined (CONF_WINC_USE_I2C)
	return nm_i2c_write_reg(u32Addr,u32Val);
#else
#error "Plesae define bus usage"
#endif
}
   23b28:	0018      	movs	r0, r3
   23b2a:	46bd      	mov	sp, r7
   23b2c:	b002      	add	sp, #8
   23b2e:	bd80      	pop	{r7, pc}
   23b30:	00025ae1 	.word	0x00025ae1

00023b34 <p_nm_read_block>:

static sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   23b34:	b580      	push	{r7, lr}
   23b36:	b084      	sub	sp, #16
   23b38:	af00      	add	r7, sp, #0
   23b3a:	60f8      	str	r0, [r7, #12]
   23b3c:	60b9      	str	r1, [r7, #8]
   23b3e:	1dbb      	adds	r3, r7, #6
   23b40:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_read_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_read_block(u32Addr,puBuf,u16Sz);
   23b42:	1dbb      	adds	r3, r7, #6
   23b44:	881a      	ldrh	r2, [r3, #0]
   23b46:	68b9      	ldr	r1, [r7, #8]
   23b48:	68fb      	ldr	r3, [r7, #12]
   23b4a:	0018      	movs	r0, r3
   23b4c:	4b03      	ldr	r3, [pc, #12]	; (23b5c <p_nm_read_block+0x28>)
   23b4e:	4798      	blx	r3
   23b50:	0003      	movs	r3, r0
	return nm_i2c_read_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   23b52:	0018      	movs	r0, r3
   23b54:	46bd      	mov	sp, r7
   23b56:	b004      	add	sp, #16
   23b58:	bd80      	pop	{r7, pc}
   23b5a:	46c0      	nop			; (mov r8, r8)
   23b5c:	00025b31 	.word	0x00025b31

00023b60 <nm_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   23b60:	b580      	push	{r7, lr}
   23b62:	b086      	sub	sp, #24
   23b64:	af00      	add	r7, sp, #0
   23b66:	60f8      	str	r0, [r7, #12]
   23b68:	60b9      	str	r1, [r7, #8]
   23b6a:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   23b6c:	4b2d      	ldr	r3, [pc, #180]	; (23c24 <nm_read_block+0xc4>)
   23b6e:	881a      	ldrh	r2, [r3, #0]
   23b70:	2310      	movs	r3, #16
   23b72:	18fb      	adds	r3, r7, r3
   23b74:	3a08      	subs	r2, #8
   23b76:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   23b78:	2300      	movs	r3, #0
   23b7a:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   23b7c:	2313      	movs	r3, #19
   23b7e:	18fb      	adds	r3, r7, r3
   23b80:	2200      	movs	r2, #0
   23b82:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   23b84:	2310      	movs	r3, #16
   23b86:	18fb      	adds	r3, r7, r3
   23b88:	881a      	ldrh	r2, [r3, #0]
   23b8a:	687b      	ldr	r3, [r7, #4]
   23b8c:	429a      	cmp	r2, r3
   23b8e:	d313      	bcc.n	23bb8 <nm_read_block+0x58>
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   23b90:	68ba      	ldr	r2, [r7, #8]
   23b92:	697b      	ldr	r3, [r7, #20]
   23b94:	18d1      	adds	r1, r2, r3
   23b96:	687b      	ldr	r3, [r7, #4]
   23b98:	b29a      	uxth	r2, r3
   23b9a:	68fb      	ldr	r3, [r7, #12]
   23b9c:	0018      	movs	r0, r3
   23b9e:	4b22      	ldr	r3, [pc, #136]	; (23c28 <nm_read_block+0xc8>)
   23ba0:	4798      	blx	r3
   23ba2:	0003      	movs	r3, r0
   23ba4:	b2da      	uxtb	r2, r3
   23ba6:	2313      	movs	r3, #19
   23ba8:	18fb      	adds	r3, r7, r3
   23baa:	781b      	ldrb	r3, [r3, #0]
   23bac:	18d3      	adds	r3, r2, r3
   23bae:	b2da      	uxtb	r2, r3
   23bb0:	2313      	movs	r3, #19
   23bb2:	18fb      	adds	r3, r7, r3
   23bb4:	701a      	strb	r2, [r3, #0]
			break;
   23bb6:	e02d      	b.n	23c14 <nm_read_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   23bb8:	68ba      	ldr	r2, [r7, #8]
   23bba:	697b      	ldr	r3, [r7, #20]
   23bbc:	18d1      	adds	r1, r2, r3
   23bbe:	2310      	movs	r3, #16
   23bc0:	18fb      	adds	r3, r7, r3
   23bc2:	881a      	ldrh	r2, [r3, #0]
   23bc4:	68fb      	ldr	r3, [r7, #12]
   23bc6:	0018      	movs	r0, r3
   23bc8:	4b17      	ldr	r3, [pc, #92]	; (23c28 <nm_read_block+0xc8>)
   23bca:	4798      	blx	r3
   23bcc:	0003      	movs	r3, r0
   23bce:	b2da      	uxtb	r2, r3
   23bd0:	2313      	movs	r3, #19
   23bd2:	18fb      	adds	r3, r7, r3
   23bd4:	781b      	ldrb	r3, [r3, #0]
   23bd6:	18d3      	adds	r3, r2, r3
   23bd8:	b2da      	uxtb	r2, r3
   23bda:	2313      	movs	r3, #19
   23bdc:	18fb      	adds	r3, r7, r3
   23bde:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   23be0:	2313      	movs	r3, #19
   23be2:	18fb      	adds	r3, r7, r3
   23be4:	781b      	ldrb	r3, [r3, #0]
   23be6:	b25b      	sxtb	r3, r3
   23be8:	2b00      	cmp	r3, #0
   23bea:	d112      	bne.n	23c12 <nm_read_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   23bec:	2310      	movs	r3, #16
   23bee:	18fb      	adds	r3, r7, r3
   23bf0:	881b      	ldrh	r3, [r3, #0]
   23bf2:	687a      	ldr	r2, [r7, #4]
   23bf4:	1ad3      	subs	r3, r2, r3
   23bf6:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   23bf8:	2310      	movs	r3, #16
   23bfa:	18fb      	adds	r3, r7, r3
   23bfc:	881b      	ldrh	r3, [r3, #0]
   23bfe:	697a      	ldr	r2, [r7, #20]
   23c00:	18d3      	adds	r3, r2, r3
   23c02:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   23c04:	2310      	movs	r3, #16
   23c06:	18fb      	adds	r3, r7, r3
   23c08:	881b      	ldrh	r3, [r3, #0]
   23c0a:	68fa      	ldr	r2, [r7, #12]
   23c0c:	18d3      	adds	r3, r2, r3
   23c0e:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   23c10:	e7b8      	b.n	23b84 <nm_read_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   23c12:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   23c14:	2313      	movs	r3, #19
   23c16:	18fb      	adds	r3, r7, r3
   23c18:	781b      	ldrb	r3, [r3, #0]
   23c1a:	b25b      	sxtb	r3, r3
}
   23c1c:	0018      	movs	r0, r3
   23c1e:	46bd      	mov	sp, r7
   23c20:	b006      	add	sp, #24
   23c22:	bd80      	pop	{r7, pc}
   23c24:	20000124 	.word	0x20000124
   23c28:	00023b35 	.word	0x00023b35

00023c2c <p_nm_write_block>:

static sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   23c2c:	b580      	push	{r7, lr}
   23c2e:	b084      	sub	sp, #16
   23c30:	af00      	add	r7, sp, #0
   23c32:	60f8      	str	r0, [r7, #12]
   23c34:	60b9      	str	r1, [r7, #8]
   23c36:	1dbb      	adds	r3, r7, #6
   23c38:	801a      	strh	r2, [r3, #0]
#ifdef CONF_WINC_USE_UART
	return nm_uart_write_block(u32Addr,puBuf,u16Sz);
#elif defined (CONF_WINC_USE_SPI)
	return nm_spi_write_block(u32Addr,puBuf,u16Sz);
   23c3a:	1dbb      	adds	r3, r7, #6
   23c3c:	881a      	ldrh	r2, [r3, #0]
   23c3e:	68b9      	ldr	r1, [r7, #8]
   23c40:	68fb      	ldr	r3, [r7, #12]
   23c42:	0018      	movs	r0, r3
   23c44:	4b03      	ldr	r3, [pc, #12]	; (23c54 <p_nm_write_block+0x28>)
   23c46:	4798      	blx	r3
   23c48:	0003      	movs	r3, r0
	return nm_i2c_write_block(u32Addr,puBuf,u16Sz);
#else
#error "Plesae define bus usage"
#endif

}
   23c4a:	0018      	movs	r0, r3
   23c4c:	46bd      	mov	sp, r7
   23c4e:	b004      	add	sp, #16
   23c50:	bd80      	pop	{r7, pc}
   23c52:	46c0      	nop			; (mov r8, r8)
   23c54:	00025b89 	.word	0x00025b89

00023c58 <nm_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/ 
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
   23c58:	b580      	push	{r7, lr}
   23c5a:	b086      	sub	sp, #24
   23c5c:	af00      	add	r7, sp, #0
   23c5e:	60f8      	str	r0, [r7, #12]
   23c60:	60b9      	str	r1, [r7, #8]
   23c62:	607a      	str	r2, [r7, #4]
	uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
   23c64:	4b2d      	ldr	r3, [pc, #180]	; (23d1c <nm_write_block+0xc4>)
   23c66:	881a      	ldrh	r2, [r3, #0]
   23c68:	2310      	movs	r3, #16
   23c6a:	18fb      	adds	r3, r7, r3
   23c6c:	3a08      	subs	r2, #8
   23c6e:	801a      	strh	r2, [r3, #0]
	uint32 off = 0;
   23c70:	2300      	movs	r3, #0
   23c72:	617b      	str	r3, [r7, #20]
	sint8 s8Ret = M2M_SUCCESS;
   23c74:	2313      	movs	r3, #19
   23c76:	18fb      	adds	r3, r7, r3
   23c78:	2200      	movs	r2, #0
   23c7a:	701a      	strb	r2, [r3, #0]

	for(;;)
	{
		if(u32Sz <= u16MaxTrxSz)
   23c7c:	2310      	movs	r3, #16
   23c7e:	18fb      	adds	r3, r7, r3
   23c80:	881a      	ldrh	r2, [r3, #0]
   23c82:	687b      	ldr	r3, [r7, #4]
   23c84:	429a      	cmp	r2, r3
   23c86:	d313      	bcc.n	23cb0 <nm_write_block+0x58>
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);	
   23c88:	68ba      	ldr	r2, [r7, #8]
   23c8a:	697b      	ldr	r3, [r7, #20]
   23c8c:	18d1      	adds	r1, r2, r3
   23c8e:	687b      	ldr	r3, [r7, #4]
   23c90:	b29a      	uxth	r2, r3
   23c92:	68fb      	ldr	r3, [r7, #12]
   23c94:	0018      	movs	r0, r3
   23c96:	4b22      	ldr	r3, [pc, #136]	; (23d20 <nm_write_block+0xc8>)
   23c98:	4798      	blx	r3
   23c9a:	0003      	movs	r3, r0
   23c9c:	b2da      	uxtb	r2, r3
   23c9e:	2313      	movs	r3, #19
   23ca0:	18fb      	adds	r3, r7, r3
   23ca2:	781b      	ldrb	r3, [r3, #0]
   23ca4:	18d3      	adds	r3, r2, r3
   23ca6:	b2da      	uxtb	r2, r3
   23ca8:	2313      	movs	r3, #19
   23caa:	18fb      	adds	r3, r7, r3
   23cac:	701a      	strb	r2, [r3, #0]
			break;
   23cae:	e02d      	b.n	23d0c <nm_write_block+0xb4>
		}
		else
		{
			s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
   23cb0:	68ba      	ldr	r2, [r7, #8]
   23cb2:	697b      	ldr	r3, [r7, #20]
   23cb4:	18d1      	adds	r1, r2, r3
   23cb6:	2310      	movs	r3, #16
   23cb8:	18fb      	adds	r3, r7, r3
   23cba:	881a      	ldrh	r2, [r3, #0]
   23cbc:	68fb      	ldr	r3, [r7, #12]
   23cbe:	0018      	movs	r0, r3
   23cc0:	4b17      	ldr	r3, [pc, #92]	; (23d20 <nm_write_block+0xc8>)
   23cc2:	4798      	blx	r3
   23cc4:	0003      	movs	r3, r0
   23cc6:	b2da      	uxtb	r2, r3
   23cc8:	2313      	movs	r3, #19
   23cca:	18fb      	adds	r3, r7, r3
   23ccc:	781b      	ldrb	r3, [r3, #0]
   23cce:	18d3      	adds	r3, r2, r3
   23cd0:	b2da      	uxtb	r2, r3
   23cd2:	2313      	movs	r3, #19
   23cd4:	18fb      	adds	r3, r7, r3
   23cd6:	701a      	strb	r2, [r3, #0]
			if(M2M_SUCCESS != s8Ret) break;
   23cd8:	2313      	movs	r3, #19
   23cda:	18fb      	adds	r3, r7, r3
   23cdc:	781b      	ldrb	r3, [r3, #0]
   23cde:	b25b      	sxtb	r3, r3
   23ce0:	2b00      	cmp	r3, #0
   23ce2:	d112      	bne.n	23d0a <nm_write_block+0xb2>
			u32Sz -= u16MaxTrxSz;
   23ce4:	2310      	movs	r3, #16
   23ce6:	18fb      	adds	r3, r7, r3
   23ce8:	881b      	ldrh	r3, [r3, #0]
   23cea:	687a      	ldr	r2, [r7, #4]
   23cec:	1ad3      	subs	r3, r2, r3
   23cee:	607b      	str	r3, [r7, #4]
			off += u16MaxTrxSz;
   23cf0:	2310      	movs	r3, #16
   23cf2:	18fb      	adds	r3, r7, r3
   23cf4:	881b      	ldrh	r3, [r3, #0]
   23cf6:	697a      	ldr	r2, [r7, #20]
   23cf8:	18d3      	adds	r3, r2, r3
   23cfa:	617b      	str	r3, [r7, #20]
			u32Addr += u16MaxTrxSz;
   23cfc:	2310      	movs	r3, #16
   23cfe:	18fb      	adds	r3, r7, r3
   23d00:	881b      	ldrh	r3, [r3, #0]
   23d02:	68fa      	ldr	r2, [r7, #12]
   23d04:	18d3      	adds	r3, r2, r3
   23d06:	60fb      	str	r3, [r7, #12]
		if(u32Sz <= u16MaxTrxSz)
   23d08:	e7b8      	b.n	23c7c <nm_write_block+0x24>
			if(M2M_SUCCESS != s8Ret) break;
   23d0a:	46c0      	nop			; (mov r8, r8)
		}
	}

	return s8Ret;
   23d0c:	2313      	movs	r3, #19
   23d0e:	18fb      	adds	r3, r7, r3
   23d10:	781b      	ldrb	r3, [r3, #0]
   23d12:	b25b      	sxtb	r3, r3
}
   23d14:	0018      	movs	r0, r3
   23d16:	46bd      	mov	sp, r7
   23d18:	b006      	add	sp, #24
   23d1a:	bd80      	pop	{r7, pc}
   23d1c:	20000124 	.word	0x20000124
   23d20:	00023c2d 	.word	0x00023c2d

00023d24 <nm_get_firmware_full_info>:
*	@param [out]	M2mRev
*			    pointer holds address of structure "tstrM2mRev" that contains the firmware version parameters
*	@version	1.0
*/
sint8 nm_get_firmware_full_info(tstrM2mRev* pstrRev)
{
   23d24:	b590      	push	{r4, r7, lr}
   23d26:	b089      	sub	sp, #36	; 0x24
   23d28:	af00      	add	r7, sp, #0
   23d2a:	6078      	str	r0, [r7, #4]
	uint16  curr_drv_ver, min_req_drv_ver,curr_firm_ver;
	uint32	reg = 0;
   23d2c:	2300      	movs	r3, #0
   23d2e:	617b      	str	r3, [r7, #20]
	sint8	ret = M2M_SUCCESS;
   23d30:	231f      	movs	r3, #31
   23d32:	18fb      	adds	r3, r7, r3
   23d34:	2200      	movs	r2, #0
   23d36:	701a      	strb	r2, [r3, #0]
	tstrGpRegs strgp = {0};
   23d38:	230c      	movs	r3, #12
   23d3a:	18fb      	adds	r3, r7, r3
   23d3c:	0018      	movs	r0, r3
   23d3e:	2308      	movs	r3, #8
   23d40:	001a      	movs	r2, r3
   23d42:	2100      	movs	r1, #0
   23d44:	4b64      	ldr	r3, [pc, #400]	; (23ed8 <nm_get_firmware_full_info+0x1b4>)
   23d46:	4798      	blx	r3
	if (pstrRev != NULL)
   23d48:	687b      	ldr	r3, [r7, #4]
   23d4a:	2b00      	cmp	r3, #0
   23d4c:	d100      	bne.n	23d50 <nm_get_firmware_full_info+0x2c>
   23d4e:	e0ba      	b.n	23ec6 <nm_get_firmware_full_info+0x1a2>
	{
		m2m_memset((uint8*)pstrRev,0,sizeof(tstrM2mRev));
   23d50:	687b      	ldr	r3, [r7, #4]
   23d52:	2228      	movs	r2, #40	; 0x28
   23d54:	2100      	movs	r1, #0
   23d56:	0018      	movs	r0, r3
   23d58:	4b60      	ldr	r3, [pc, #384]	; (23edc <nm_get_firmware_full_info+0x1b8>)
   23d5a:	4798      	blx	r3
		ret = nm_read_reg_with_ret(rNMI_GP_REG_2, &reg);
   23d5c:	231f      	movs	r3, #31
   23d5e:	18fc      	adds	r4, r7, r3
   23d60:	2314      	movs	r3, #20
   23d62:	18fb      	adds	r3, r7, r3
   23d64:	4a5e      	ldr	r2, [pc, #376]	; (23ee0 <nm_get_firmware_full_info+0x1bc>)
   23d66:	0019      	movs	r1, r3
   23d68:	0010      	movs	r0, r2
   23d6a:	4b5e      	ldr	r3, [pc, #376]	; (23ee4 <nm_get_firmware_full_info+0x1c0>)
   23d6c:	4798      	blx	r3
   23d6e:	0003      	movs	r3, r0
   23d70:	7023      	strb	r3, [r4, #0]
		if(ret == M2M_SUCCESS)
   23d72:	231f      	movs	r3, #31
   23d74:	18fb      	adds	r3, r7, r3
   23d76:	781b      	ldrb	r3, [r3, #0]
   23d78:	b25b      	sxtb	r3, r3
   23d7a:	2b00      	cmp	r3, #0
   23d7c:	d000      	beq.n	23d80 <nm_get_firmware_full_info+0x5c>
   23d7e:	e0a2      	b.n	23ec6 <nm_get_firmware_full_info+0x1a2>
		{
			if(reg != 0)
   23d80:	697b      	ldr	r3, [r7, #20]
   23d82:	2b00      	cmp	r3, #0
   23d84:	d100      	bne.n	23d88 <nm_get_firmware_full_info+0x64>
   23d86:	e09a      	b.n	23ebe <nm_get_firmware_full_info+0x19a>
			{
				ret = nm_read_block(reg|0x30000,(uint8*)&strgp,sizeof(tstrGpRegs));
   23d88:	697b      	ldr	r3, [r7, #20]
   23d8a:	22c0      	movs	r2, #192	; 0xc0
   23d8c:	0292      	lsls	r2, r2, #10
   23d8e:	4313      	orrs	r3, r2
   23d90:	221f      	movs	r2, #31
   23d92:	18bc      	adds	r4, r7, r2
   23d94:	220c      	movs	r2, #12
   23d96:	18b9      	adds	r1, r7, r2
   23d98:	2208      	movs	r2, #8
   23d9a:	0018      	movs	r0, r3
   23d9c:	4b52      	ldr	r3, [pc, #328]	; (23ee8 <nm_get_firmware_full_info+0x1c4>)
   23d9e:	4798      	blx	r3
   23da0:	0003      	movs	r3, r0
   23da2:	7023      	strb	r3, [r4, #0]
				if(ret == M2M_SUCCESS)
   23da4:	231f      	movs	r3, #31
   23da6:	18fb      	adds	r3, r7, r3
   23da8:	781b      	ldrb	r3, [r3, #0]
   23daa:	b25b      	sxtb	r3, r3
   23dac:	2b00      	cmp	r3, #0
   23dae:	d000      	beq.n	23db2 <nm_get_firmware_full_info+0x8e>
   23db0:	e089      	b.n	23ec6 <nm_get_firmware_full_info+0x1a2>
				{
					reg = strgp.u32Firmware_Ota_rev;
   23db2:	230c      	movs	r3, #12
   23db4:	18fb      	adds	r3, r7, r3
   23db6:	685b      	ldr	r3, [r3, #4]
   23db8:	617b      	str	r3, [r7, #20]
					reg &= 0x0000ffff;
   23dba:	697b      	ldr	r3, [r7, #20]
   23dbc:	041b      	lsls	r3, r3, #16
   23dbe:	0c1b      	lsrs	r3, r3, #16
   23dc0:	617b      	str	r3, [r7, #20]
					if(reg != 0)
   23dc2:	697b      	ldr	r3, [r7, #20]
   23dc4:	2b00      	cmp	r3, #0
   23dc6:	d100      	bne.n	23dca <nm_get_firmware_full_info+0xa6>
   23dc8:	e074      	b.n	23eb4 <nm_get_firmware_full_info+0x190>
					{
						ret = nm_read_block(reg|0x30000,(uint8*)pstrRev,sizeof(tstrM2mRev));
   23dca:	697b      	ldr	r3, [r7, #20]
   23dcc:	22c0      	movs	r2, #192	; 0xc0
   23dce:	0292      	lsls	r2, r2, #10
   23dd0:	4313      	orrs	r3, r2
   23dd2:	221f      	movs	r2, #31
   23dd4:	18bc      	adds	r4, r7, r2
   23dd6:	6879      	ldr	r1, [r7, #4]
   23dd8:	2228      	movs	r2, #40	; 0x28
   23dda:	0018      	movs	r0, r3
   23ddc:	4b42      	ldr	r3, [pc, #264]	; (23ee8 <nm_get_firmware_full_info+0x1c4>)
   23dde:	4798      	blx	r3
   23de0:	0003      	movs	r3, r0
   23de2:	7023      	strb	r3, [r4, #0]
						if(ret == M2M_SUCCESS)
   23de4:	231f      	movs	r3, #31
   23de6:	18fb      	adds	r3, r7, r3
   23de8:	781b      	ldrb	r3, [r3, #0]
   23dea:	b25b      	sxtb	r3, r3
   23dec:	2b00      	cmp	r3, #0
   23dee:	d16a      	bne.n	23ec6 <nm_get_firmware_full_info+0x1a2>
						{
							curr_firm_ver   = M2M_MAKE_VERSION(pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor,pstrRev->u8FirmwarePatch);
   23df0:	687b      	ldr	r3, [r7, #4]
   23df2:	791b      	ldrb	r3, [r3, #4]
   23df4:	021b      	lsls	r3, r3, #8
   23df6:	b21a      	sxth	r2, r3
   23df8:	687b      	ldr	r3, [r7, #4]
   23dfa:	795b      	ldrb	r3, [r3, #5]
   23dfc:	011b      	lsls	r3, r3, #4
   23dfe:	b21b      	sxth	r3, r3
   23e00:	21ff      	movs	r1, #255	; 0xff
   23e02:	400b      	ands	r3, r1
   23e04:	b21b      	sxth	r3, r3
   23e06:	4313      	orrs	r3, r2
   23e08:	b21a      	sxth	r2, r3
   23e0a:	687b      	ldr	r3, [r7, #4]
   23e0c:	799b      	ldrb	r3, [r3, #6]
   23e0e:	b21b      	sxth	r3, r3
   23e10:	210f      	movs	r1, #15
   23e12:	400b      	ands	r3, r1
   23e14:	b21b      	sxth	r3, r3
   23e16:	4313      	orrs	r3, r2
   23e18:	b21a      	sxth	r2, r3
   23e1a:	231c      	movs	r3, #28
   23e1c:	18fb      	adds	r3, r7, r3
   23e1e:	801a      	strh	r2, [r3, #0]
							curr_drv_ver    = M2M_MAKE_VERSION(M2M_RELEASE_VERSION_MAJOR_NO, M2M_RELEASE_VERSION_MINOR_NO, M2M_RELEASE_VERSION_PATCH_NO);
   23e20:	231a      	movs	r3, #26
   23e22:	18fb      	adds	r3, r7, r3
   23e24:	4a31      	ldr	r2, [pc, #196]	; (23eec <nm_get_firmware_full_info+0x1c8>)
   23e26:	801a      	strh	r2, [r3, #0]
							min_req_drv_ver = M2M_MAKE_VERSION(pstrRev->u8DriverMajor, pstrRev->u8DriverMinor,pstrRev->u8DriverPatch);
   23e28:	687b      	ldr	r3, [r7, #4]
   23e2a:	79db      	ldrb	r3, [r3, #7]
   23e2c:	021b      	lsls	r3, r3, #8
   23e2e:	b21a      	sxth	r2, r3
   23e30:	687b      	ldr	r3, [r7, #4]
   23e32:	7a1b      	ldrb	r3, [r3, #8]
   23e34:	011b      	lsls	r3, r3, #4
   23e36:	b21b      	sxth	r3, r3
   23e38:	21ff      	movs	r1, #255	; 0xff
   23e3a:	400b      	ands	r3, r1
   23e3c:	b21b      	sxth	r3, r3
   23e3e:	4313      	orrs	r3, r2
   23e40:	b21a      	sxth	r2, r3
   23e42:	687b      	ldr	r3, [r7, #4]
   23e44:	7a5b      	ldrb	r3, [r3, #9]
   23e46:	b21b      	sxth	r3, r3
   23e48:	210f      	movs	r1, #15
   23e4a:	400b      	ands	r3, r1
   23e4c:	b21b      	sxth	r3, r3
   23e4e:	4313      	orrs	r3, r2
   23e50:	b21a      	sxth	r2, r3
   23e52:	2318      	movs	r3, #24
   23e54:	18fb      	adds	r3, r7, r3
   23e56:	801a      	strh	r2, [r3, #0]
							if((curr_firm_ver == 0)||(min_req_drv_ver == 0)||(min_req_drv_ver == 0)){
   23e58:	231c      	movs	r3, #28
   23e5a:	18fb      	adds	r3, r7, r3
   23e5c:	881b      	ldrh	r3, [r3, #0]
   23e5e:	2b00      	cmp	r3, #0
   23e60:	d009      	beq.n	23e76 <nm_get_firmware_full_info+0x152>
   23e62:	2318      	movs	r3, #24
   23e64:	18fb      	adds	r3, r7, r3
   23e66:	881b      	ldrh	r3, [r3, #0]
   23e68:	2b00      	cmp	r3, #0
   23e6a:	d004      	beq.n	23e76 <nm_get_firmware_full_info+0x152>
   23e6c:	2318      	movs	r3, #24
   23e6e:	18fb      	adds	r3, r7, r3
   23e70:	881b      	ldrh	r3, [r3, #0]
   23e72:	2b00      	cmp	r3, #0
   23e74:	d104      	bne.n	23e80 <nm_get_firmware_full_info+0x15c>
								ret = M2M_ERR_FAIL;
   23e76:	231f      	movs	r3, #31
   23e78:	18fb      	adds	r3, r7, r3
   23e7a:	22f4      	movs	r2, #244	; 0xf4
   23e7c:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   23e7e:	e022      	b.n	23ec6 <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver <  min_req_drv_ver) {
   23e80:	231a      	movs	r3, #26
   23e82:	18fa      	adds	r2, r7, r3
   23e84:	2318      	movs	r3, #24
   23e86:	18fb      	adds	r3, r7, r3
   23e88:	8812      	ldrh	r2, [r2, #0]
   23e8a:	881b      	ldrh	r3, [r3, #0]
   23e8c:	429a      	cmp	r2, r3
   23e8e:	d204      	bcs.n	23e9a <nm_get_firmware_full_info+0x176>
								/*The current driver version should be larger or equal 
								than the min driver that the current firmware support  */
								ret = M2M_ERR_FW_VER_MISMATCH;
   23e90:	231f      	movs	r3, #31
   23e92:	18fb      	adds	r3, r7, r3
   23e94:	22f3      	movs	r2, #243	; 0xf3
   23e96:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   23e98:	e015      	b.n	23ec6 <nm_get_firmware_full_info+0x1a2>
							}
							if(curr_drv_ver >  curr_firm_ver) {
   23e9a:	231a      	movs	r3, #26
   23e9c:	18fa      	adds	r2, r7, r3
   23e9e:	231c      	movs	r3, #28
   23ea0:	18fb      	adds	r3, r7, r3
   23ea2:	8812      	ldrh	r2, [r2, #0]
   23ea4:	881b      	ldrh	r3, [r3, #0]
   23ea6:	429a      	cmp	r2, r3
   23ea8:	d90d      	bls.n	23ec6 <nm_get_firmware_full_info+0x1a2>
								/*The current driver should be equal or less than the firmware version*/
								ret = M2M_ERR_FW_VER_MISMATCH;
   23eaa:	231f      	movs	r3, #31
   23eac:	18fb      	adds	r3, r7, r3
   23eae:	22f3      	movs	r2, #243	; 0xf3
   23eb0:	701a      	strb	r2, [r3, #0]
								goto EXIT;
   23eb2:	e008      	b.n	23ec6 <nm_get_firmware_full_info+0x1a2>
							}
						}
					}else {
						ret = M2M_ERR_FAIL;
   23eb4:	231f      	movs	r3, #31
   23eb6:	18fb      	adds	r3, r7, r3
   23eb8:	22f4      	movs	r2, #244	; 0xf4
   23eba:	701a      	strb	r2, [r3, #0]
   23ebc:	e003      	b.n	23ec6 <nm_get_firmware_full_info+0x1a2>
					}
				}
			}else{
				ret = M2M_ERR_FAIL;
   23ebe:	231f      	movs	r3, #31
   23ec0:	18fb      	adds	r3, r7, r3
   23ec2:	22f4      	movs	r2, #244	; 0xf4
   23ec4:	701a      	strb	r2, [r3, #0]
			}
		}
	}
EXIT:
	return ret;
   23ec6:	231f      	movs	r3, #31
   23ec8:	18fb      	adds	r3, r7, r3
   23eca:	781b      	ldrb	r3, [r3, #0]
   23ecc:	b25b      	sxtb	r3, r3
}
   23ece:	0018      	movs	r0, r3
   23ed0:	46bd      	mov	sp, r7
   23ed2:	b009      	add	sp, #36	; 0x24
   23ed4:	bd90      	pop	{r4, r7, pc}
   23ed6:	46c0      	nop			; (mov r8, r8)
   23ed8:	0003582f 	.word	0x0003582f
   23edc:	00021a5d 	.word	0x00021a5d
   23ee0:	000c0008 	.word	0x000c0008
   23ee4:	00023aed 	.word	0x00023aed
   23ee8:	00023b61 	.word	0x00023b61
   23eec:	00001354 	.word	0x00001354

00023ef0 <nm_drv_init>:
*	@author	M. Abdelmawla
*	@date	15 July 2012
*	@version	1.0
*/
sint8 nm_drv_init(void * arg)
{
   23ef0:	b590      	push	{r4, r7, lr}
   23ef2:	b085      	sub	sp, #20
   23ef4:	af00      	add	r7, sp, #0
   23ef6:	6078      	str	r0, [r7, #4]
	sint8 ret = M2M_SUCCESS;
   23ef8:	230f      	movs	r3, #15
   23efa:	18fb      	adds	r3, r7, r3
   23efc:	2200      	movs	r2, #0
   23efe:	701a      	strb	r2, [r3, #0]
	uint8 u8Mode;
	
	if(NULL != arg) {
   23f00:	687b      	ldr	r3, [r7, #4]
   23f02:	2b00      	cmp	r3, #0
   23f04:	d013      	beq.n	23f2e <nm_drv_init+0x3e>
		u8Mode = *((uint8 *)arg);
   23f06:	230e      	movs	r3, #14
   23f08:	18fb      	adds	r3, r7, r3
   23f0a:	687a      	ldr	r2, [r7, #4]
   23f0c:	7812      	ldrb	r2, [r2, #0]
   23f0e:	701a      	strb	r2, [r3, #0]
		if((u8Mode < M2M_WIFI_MODE_NORMAL)||(u8Mode >= M2M_WIFI_MODE_MAX)) {
   23f10:	230e      	movs	r3, #14
   23f12:	18fb      	adds	r3, r7, r3
   23f14:	781b      	ldrb	r3, [r3, #0]
   23f16:	2b00      	cmp	r3, #0
   23f18:	d004      	beq.n	23f24 <nm_drv_init+0x34>
   23f1a:	230e      	movs	r3, #14
   23f1c:	18fb      	adds	r3, r7, r3
   23f1e:	781b      	ldrb	r3, [r3, #0]
   23f20:	2b04      	cmp	r3, #4
   23f22:	d908      	bls.n	23f36 <nm_drv_init+0x46>
			u8Mode = M2M_WIFI_MODE_NORMAL;
   23f24:	230e      	movs	r3, #14
   23f26:	18fb      	adds	r3, r7, r3
   23f28:	2201      	movs	r2, #1
   23f2a:	701a      	strb	r2, [r3, #0]
   23f2c:	e003      	b.n	23f36 <nm_drv_init+0x46>
		}
	} else {
		u8Mode = M2M_WIFI_MODE_NORMAL;
   23f2e:	230e      	movs	r3, #14
   23f30:	18fb      	adds	r3, r7, r3
   23f32:	2201      	movs	r2, #1
   23f34:	701a      	strb	r2, [r3, #0]
	}
	
	ret = nm_bus_iface_init(NULL);
   23f36:	230f      	movs	r3, #15
   23f38:	18fc      	adds	r4, r7, r3
   23f3a:	2000      	movs	r0, #0
   23f3c:	4b41      	ldr	r3, [pc, #260]	; (24044 <nm_drv_init+0x154>)
   23f3e:	4798      	blx	r3
   23f40:	0003      	movs	r3, r0
   23f42:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23f44:	230f      	movs	r3, #15
   23f46:	18fb      	adds	r3, r7, r3
   23f48:	781b      	ldrb	r3, [r3, #0]
   23f4a:	b25b      	sxtb	r3, r3
   23f4c:	2b00      	cmp	r3, #0
   23f4e:	d00f      	beq.n	23f70 <nm_drv_init+0x80>
		M2M_ERR("[nmi start]: fail init bus\n");
   23f50:	2390      	movs	r3, #144	; 0x90
   23f52:	005a      	lsls	r2, r3, #1
   23f54:	493c      	ldr	r1, [pc, #240]	; (24048 <nm_drv_init+0x158>)
   23f56:	4b3d      	ldr	r3, [pc, #244]	; (2404c <nm_drv_init+0x15c>)
   23f58:	0018      	movs	r0, r3
   23f5a:	4b3d      	ldr	r3, [pc, #244]	; (24050 <nm_drv_init+0x160>)
   23f5c:	4798      	blx	r3
   23f5e:	4b3d      	ldr	r3, [pc, #244]	; (24054 <nm_drv_init+0x164>)
   23f60:	0018      	movs	r0, r3
   23f62:	4b3b      	ldr	r3, [pc, #236]	; (24050 <nm_drv_init+0x160>)
   23f64:	4798      	blx	r3
   23f66:	4b3c      	ldr	r3, [pc, #240]	; (24058 <nm_drv_init+0x168>)
   23f68:	0018      	movs	r0, r3
   23f6a:	4b39      	ldr	r3, [pc, #228]	; (24050 <nm_drv_init+0x160>)
   23f6c:	4798      	blx	r3
		goto ERR1;
   23f6e:	e061      	b.n	24034 <nm_drv_init+0x144>
	ret = chip_reset();
	if (M2M_SUCCESS != ret) {
		goto ERR2;
	}
#endif
	M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
   23f70:	4b3a      	ldr	r3, [pc, #232]	; (2405c <nm_drv_init+0x16c>)
   23f72:	0018      	movs	r0, r3
   23f74:	4b36      	ldr	r3, [pc, #216]	; (24050 <nm_drv_init+0x160>)
   23f76:	4798      	blx	r3
   23f78:	4b39      	ldr	r3, [pc, #228]	; (24060 <nm_drv_init+0x170>)
   23f7a:	4798      	blx	r3
   23f7c:	0002      	movs	r2, r0
   23f7e:	4b39      	ldr	r3, [pc, #228]	; (24064 <nm_drv_init+0x174>)
   23f80:	0011      	movs	r1, r2
   23f82:	0018      	movs	r0, r3
   23f84:	4b32      	ldr	r3, [pc, #200]	; (24050 <nm_drv_init+0x160>)
   23f86:	4798      	blx	r3
   23f88:	4b33      	ldr	r3, [pc, #204]	; (24058 <nm_drv_init+0x168>)
   23f8a:	0018      	movs	r0, r3
   23f8c:	4b30      	ldr	r3, [pc, #192]	; (24050 <nm_drv_init+0x160>)
   23f8e:	4798      	blx	r3
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_init();
   23f90:	4b35      	ldr	r3, [pc, #212]	; (24068 <nm_drv_init+0x178>)
   23f92:	4798      	blx	r3
#endif
	ret = wait_for_bootrom(u8Mode);
   23f94:	230f      	movs	r3, #15
   23f96:	18fc      	adds	r4, r7, r3
   23f98:	230e      	movs	r3, #14
   23f9a:	18fb      	adds	r3, r7, r3
   23f9c:	781b      	ldrb	r3, [r3, #0]
   23f9e:	0018      	movs	r0, r3
   23fa0:	4b32      	ldr	r3, [pc, #200]	; (2406c <nm_drv_init+0x17c>)
   23fa2:	4798      	blx	r3
   23fa4:	0003      	movs	r3, r0
   23fa6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23fa8:	230f      	movs	r3, #15
   23faa:	18fb      	adds	r3, r7, r3
   23fac:	781b      	ldrb	r3, [r3, #0]
   23fae:	b25b      	sxtb	r3, r3
   23fb0:	2b00      	cmp	r3, #0
   23fb2:	d13a      	bne.n	2402a <nm_drv_init+0x13a>
		goto ERR2;
	}
		
	ret = wait_for_firmware_start(u8Mode);
   23fb4:	230f      	movs	r3, #15
   23fb6:	18fc      	adds	r4, r7, r3
   23fb8:	230e      	movs	r3, #14
   23fba:	18fb      	adds	r3, r7, r3
   23fbc:	781b      	ldrb	r3, [r3, #0]
   23fbe:	0018      	movs	r0, r3
   23fc0:	4b2b      	ldr	r3, [pc, #172]	; (24070 <nm_drv_init+0x180>)
   23fc2:	4798      	blx	r3
   23fc4:	0003      	movs	r3, r0
   23fc6:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23fc8:	230f      	movs	r3, #15
   23fca:	18fb      	adds	r3, r7, r3
   23fcc:	781b      	ldrb	r3, [r3, #0]
   23fce:	b25b      	sxtb	r3, r3
   23fd0:	2b00      	cmp	r3, #0
   23fd2:	d12c      	bne.n	2402e <nm_drv_init+0x13e>
		goto ERR2;
	}
	
	if((M2M_WIFI_MODE_ATE_HIGH == u8Mode)||(M2M_WIFI_MODE_ATE_LOW == u8Mode)) {
   23fd4:	230e      	movs	r3, #14
   23fd6:	18fb      	adds	r3, r7, r3
   23fd8:	781b      	ldrb	r3, [r3, #0]
   23fda:	2b02      	cmp	r3, #2
   23fdc:	d02a      	beq.n	24034 <nm_drv_init+0x144>
   23fde:	230e      	movs	r3, #14
   23fe0:	18fb      	adds	r3, r7, r3
   23fe2:	781b      	ldrb	r3, [r3, #0]
   23fe4:	2b03      	cmp	r3, #3
   23fe6:	d025      	beq.n	24034 <nm_drv_init+0x144>
		goto ERR1;
	} else {
		/*continue running*/
	}
	
	ret = enable_interrupts();
   23fe8:	230f      	movs	r3, #15
   23fea:	18fc      	adds	r4, r7, r3
   23fec:	4b21      	ldr	r3, [pc, #132]	; (24074 <nm_drv_init+0x184>)
   23fee:	4798      	blx	r3
   23ff0:	0003      	movs	r3, r0
   23ff2:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   23ff4:	230f      	movs	r3, #15
   23ff6:	18fb      	adds	r3, r7, r3
   23ff8:	781b      	ldrb	r3, [r3, #0]
   23ffa:	b25b      	sxtb	r3, r3
   23ffc:	2b00      	cmp	r3, #0
   23ffe:	d00f      	beq.n	24020 <nm_drv_init+0x130>
		M2M_ERR("failed to enable interrupts..\n");
   24000:	23a7      	movs	r3, #167	; 0xa7
   24002:	005a      	lsls	r2, r3, #1
   24004:	4910      	ldr	r1, [pc, #64]	; (24048 <nm_drv_init+0x158>)
   24006:	4b11      	ldr	r3, [pc, #68]	; (2404c <nm_drv_init+0x15c>)
   24008:	0018      	movs	r0, r3
   2400a:	4b11      	ldr	r3, [pc, #68]	; (24050 <nm_drv_init+0x160>)
   2400c:	4798      	blx	r3
   2400e:	4b1a      	ldr	r3, [pc, #104]	; (24078 <nm_drv_init+0x188>)
   24010:	0018      	movs	r0, r3
   24012:	4b0f      	ldr	r3, [pc, #60]	; (24050 <nm_drv_init+0x160>)
   24014:	4798      	blx	r3
   24016:	4b10      	ldr	r3, [pc, #64]	; (24058 <nm_drv_init+0x168>)
   24018:	0018      	movs	r0, r3
   2401a:	4b0d      	ldr	r3, [pc, #52]	; (24050 <nm_drv_init+0x160>)
   2401c:	4798      	blx	r3
		goto ERR2;
   2401e:	e007      	b.n	24030 <nm_drv_init+0x140>
	}
	return ret;
   24020:	230f      	movs	r3, #15
   24022:	18fb      	adds	r3, r7, r3
   24024:	781b      	ldrb	r3, [r3, #0]
   24026:	b25b      	sxtb	r3, r3
   24028:	e008      	b.n	2403c <nm_drv_init+0x14c>
		goto ERR2;
   2402a:	46c0      	nop			; (mov r8, r8)
   2402c:	e000      	b.n	24030 <nm_drv_init+0x140>
		goto ERR2;
   2402e:	46c0      	nop			; (mov r8, r8)
ERR2:
	nm_bus_iface_deinit();
   24030:	4b12      	ldr	r3, [pc, #72]	; (2407c <nm_drv_init+0x18c>)
   24032:	4798      	blx	r3
ERR1:
	return ret;
   24034:	230f      	movs	r3, #15
   24036:	18fb      	adds	r3, r7, r3
   24038:	781b      	ldrb	r3, [r3, #0]
   2403a:	b25b      	sxtb	r3, r3
}
   2403c:	0018      	movs	r0, r3
   2403e:	46bd      	mov	sp, r7
   24040:	b005      	add	sp, #20
   24042:	bd90      	pop	{r4, r7, pc}
   24044:	00023a51 	.word	0x00023a51
   24048:	00039d5c 	.word	0x00039d5c
   2404c:	00039c8c 	.word	0x00039c8c
   24050:	0001ed29 	.word	0x0001ed29
   24054:	00039ca0 	.word	0x00039ca0
   24058:	00039cbc 	.word	0x00039cbc
   2405c:	00039cc0 	.word	0x00039cc0
   24060:	000233ed 	.word	0x000233ed
   24064:	00039ccc 	.word	0x00039ccc
   24068:	00025909 	.word	0x00025909
   2406c:	00023745 	.word	0x00023745
   24070:	000238dd 	.word	0x000238dd
   24074:	00023339 	.word	0x00023339
   24078:	00039cdc 	.word	0x00039cdc
   2407c:	00023a85 	.word	0x00023a85

00024080 <nm_drv_deinit>:
*	@author	M. Abdelmawla
*	@date	17 July 2012
*	@version	1.0
*/
sint8 nm_drv_deinit(void * arg)
{
   24080:	b590      	push	{r4, r7, lr}
   24082:	b085      	sub	sp, #20
   24084:	af00      	add	r7, sp, #0
   24086:	6078      	str	r0, [r7, #4]
	sint8 ret;

	ret = chip_deinit();
   24088:	230f      	movs	r3, #15
   2408a:	18fc      	adds	r4, r7, r3
   2408c:	4b2e      	ldr	r3, [pc, #184]	; (24148 <nm_drv_deinit+0xc8>)
   2408e:	4798      	blx	r3
   24090:	0003      	movs	r3, r0
   24092:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   24094:	230f      	movs	r3, #15
   24096:	18fb      	adds	r3, r7, r3
   24098:	781b      	ldrb	r3, [r3, #0]
   2409a:	b25b      	sxtb	r3, r3
   2409c:	2b00      	cmp	r3, #0
   2409e:	d010      	beq.n	240c2 <nm_drv_deinit+0x42>
		M2M_ERR("[nmi stop]: chip_deinit fail\n");
   240a0:	2366      	movs	r3, #102	; 0x66
   240a2:	33ff      	adds	r3, #255	; 0xff
   240a4:	001a      	movs	r2, r3
   240a6:	4929      	ldr	r1, [pc, #164]	; (2414c <nm_drv_deinit+0xcc>)
   240a8:	4b29      	ldr	r3, [pc, #164]	; (24150 <nm_drv_deinit+0xd0>)
   240aa:	0018      	movs	r0, r3
   240ac:	4b29      	ldr	r3, [pc, #164]	; (24154 <nm_drv_deinit+0xd4>)
   240ae:	4798      	blx	r3
   240b0:	4b29      	ldr	r3, [pc, #164]	; (24158 <nm_drv_deinit+0xd8>)
   240b2:	0018      	movs	r0, r3
   240b4:	4b27      	ldr	r3, [pc, #156]	; (24154 <nm_drv_deinit+0xd4>)
   240b6:	4798      	blx	r3
   240b8:	4b28      	ldr	r3, [pc, #160]	; (2415c <nm_drv_deinit+0xdc>)
   240ba:	0018      	movs	r0, r3
   240bc:	4b25      	ldr	r3, [pc, #148]	; (24154 <nm_drv_deinit+0xd4>)
   240be:	4798      	blx	r3
		goto ERR1;
   240c0:	e03a      	b.n	24138 <nm_drv_deinit+0xb8>
	}
	
	/* Disable SPI flash to save power when the chip is off */
	ret = spi_flash_enable(0);
   240c2:	230f      	movs	r3, #15
   240c4:	18fc      	adds	r4, r7, r3
   240c6:	2000      	movs	r0, #0
   240c8:	4b25      	ldr	r3, [pc, #148]	; (24160 <nm_drv_deinit+0xe0>)
   240ca:	4798      	blx	r3
   240cc:	0003      	movs	r3, r0
   240ce:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   240d0:	230f      	movs	r3, #15
   240d2:	18fb      	adds	r3, r7, r3
   240d4:	781b      	ldrb	r3, [r3, #0]
   240d6:	b25b      	sxtb	r3, r3
   240d8:	2b00      	cmp	r3, #0
   240da:	d00f      	beq.n	240fc <nm_drv_deinit+0x7c>
		M2M_ERR("[nmi stop]: SPI flash disable fail\n");
   240dc:	23b6      	movs	r3, #182	; 0xb6
   240de:	005a      	lsls	r2, r3, #1
   240e0:	491a      	ldr	r1, [pc, #104]	; (2414c <nm_drv_deinit+0xcc>)
   240e2:	4b1b      	ldr	r3, [pc, #108]	; (24150 <nm_drv_deinit+0xd0>)
   240e4:	0018      	movs	r0, r3
   240e6:	4b1b      	ldr	r3, [pc, #108]	; (24154 <nm_drv_deinit+0xd4>)
   240e8:	4798      	blx	r3
   240ea:	4b1e      	ldr	r3, [pc, #120]	; (24164 <nm_drv_deinit+0xe4>)
   240ec:	0018      	movs	r0, r3
   240ee:	4b19      	ldr	r3, [pc, #100]	; (24154 <nm_drv_deinit+0xd4>)
   240f0:	4798      	blx	r3
   240f2:	4b1a      	ldr	r3, [pc, #104]	; (2415c <nm_drv_deinit+0xdc>)
   240f4:	0018      	movs	r0, r3
   240f6:	4b17      	ldr	r3, [pc, #92]	; (24154 <nm_drv_deinit+0xd4>)
   240f8:	4798      	blx	r3
		goto ERR1;
   240fa:	e01d      	b.n	24138 <nm_drv_deinit+0xb8>
	}

	ret = nm_bus_iface_deinit();
   240fc:	230f      	movs	r3, #15
   240fe:	18fc      	adds	r4, r7, r3
   24100:	4b19      	ldr	r3, [pc, #100]	; (24168 <nm_drv_deinit+0xe8>)
   24102:	4798      	blx	r3
   24104:	0003      	movs	r3, r0
   24106:	7023      	strb	r3, [r4, #0]
	if (M2M_SUCCESS != ret) {
   24108:	230f      	movs	r3, #15
   2410a:	18fb      	adds	r3, r7, r3
   2410c:	781b      	ldrb	r3, [r3, #0]
   2410e:	b25b      	sxtb	r3, r3
   24110:	2b00      	cmp	r3, #0
   24112:	d00f      	beq.n	24134 <nm_drv_deinit+0xb4>
		M2M_ERR("[nmi stop]: fail init bus\n");
   24114:	23b9      	movs	r3, #185	; 0xb9
   24116:	005a      	lsls	r2, r3, #1
   24118:	490c      	ldr	r1, [pc, #48]	; (2414c <nm_drv_deinit+0xcc>)
   2411a:	4b0d      	ldr	r3, [pc, #52]	; (24150 <nm_drv_deinit+0xd0>)
   2411c:	0018      	movs	r0, r3
   2411e:	4b0d      	ldr	r3, [pc, #52]	; (24154 <nm_drv_deinit+0xd4>)
   24120:	4798      	blx	r3
   24122:	4b12      	ldr	r3, [pc, #72]	; (2416c <nm_drv_deinit+0xec>)
   24124:	0018      	movs	r0, r3
   24126:	4b0b      	ldr	r3, [pc, #44]	; (24154 <nm_drv_deinit+0xd4>)
   24128:	4798      	blx	r3
   2412a:	4b0c      	ldr	r3, [pc, #48]	; (2415c <nm_drv_deinit+0xdc>)
   2412c:	0018      	movs	r0, r3
   2412e:	4b09      	ldr	r3, [pc, #36]	; (24154 <nm_drv_deinit+0xd4>)
   24130:	4798      	blx	r3
		goto ERR1;
   24132:	e001      	b.n	24138 <nm_drv_deinit+0xb8>
	}
#ifdef CONF_WINC_USE_SPI
	/* Must do this after global reset to set SPI data packet size. */
	nm_spi_deinit();
   24134:	4b0e      	ldr	r3, [pc, #56]	; (24170 <nm_drv_deinit+0xf0>)
   24136:	4798      	blx	r3
#endif

ERR1:
	return ret;
   24138:	230f      	movs	r3, #15
   2413a:	18fb      	adds	r3, r7, r3
   2413c:	781b      	ldrb	r3, [r3, #0]
   2413e:	b25b      	sxtb	r3, r3
}
   24140:	0018      	movs	r0, r3
   24142:	46bd      	mov	sp, r7
   24144:	b005      	add	sp, #20
   24146:	bd90      	pop	{r4, r7, pc}
   24148:	00023991 	.word	0x00023991
   2414c:	00039d68 	.word	0x00039d68
   24150:	00039c8c 	.word	0x00039c8c
   24154:	0001ed29 	.word	0x0001ed29
   24158:	00039cfc 	.word	0x00039cfc
   2415c:	00039cbc 	.word	0x00039cbc
   24160:	00026db1 	.word	0x00026db1
   24164:	00039d1c 	.word	0x00039d1c
   24168:	00023a85 	.word	0x00023a85
   2416c:	00039d40 	.word	0x00039d40
   24170:	00025a55 	.word	0x00025a55

00024174 <nmi_spi_read>:
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static uint8 	gu8Crc_off	=   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
   24174:	b580      	push	{r7, lr}
   24176:	b086      	sub	sp, #24
   24178:	af00      	add	r7, sp, #0
   2417a:	6078      	str	r0, [r7, #4]
   2417c:	000a      	movs	r2, r1
   2417e:	1cbb      	adds	r3, r7, #2
   24180:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
   24182:	230c      	movs	r3, #12
   24184:	18fb      	adds	r3, r7, r3
   24186:	2200      	movs	r2, #0
   24188:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = b;
   2418a:	230c      	movs	r3, #12
   2418c:	18fb      	adds	r3, r7, r3
   2418e:	687a      	ldr	r2, [r7, #4]
   24190:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   24192:	230c      	movs	r3, #12
   24194:	18fb      	adds	r3, r7, r3
   24196:	1cba      	adds	r2, r7, #2
   24198:	8812      	ldrh	r2, [r2, #0]
   2419a:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   2419c:	230c      	movs	r3, #12
   2419e:	18fb      	adds	r3, r7, r3
   241a0:	0019      	movs	r1, r3
   241a2:	2003      	movs	r0, #3
   241a4:	4b03      	ldr	r3, [pc, #12]	; (241b4 <nmi_spi_read+0x40>)
   241a6:	4798      	blx	r3
   241a8:	0003      	movs	r3, r0
}
   241aa:	0018      	movs	r0, r3
   241ac:	46bd      	mov	sp, r7
   241ae:	b006      	add	sp, #24
   241b0:	bd80      	pop	{r7, pc}
   241b2:	46c0      	nop			; (mov r8, r8)
   241b4:	00021921 	.word	0x00021921

000241b8 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
   241b8:	b580      	push	{r7, lr}
   241ba:	b086      	sub	sp, #24
   241bc:	af00      	add	r7, sp, #0
   241be:	6078      	str	r0, [r7, #4]
   241c0:	000a      	movs	r2, r1
   241c2:	1cbb      	adds	r3, r7, #2
   241c4:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
   241c6:	230c      	movs	r3, #12
   241c8:	18fb      	adds	r3, r7, r3
   241ca:	687a      	ldr	r2, [r7, #4]
   241cc:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = NULL;
   241ce:	230c      	movs	r3, #12
   241d0:	18fb      	adds	r3, r7, r3
   241d2:	2200      	movs	r2, #0
   241d4:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   241d6:	230c      	movs	r3, #12
   241d8:	18fb      	adds	r3, r7, r3
   241da:	1cba      	adds	r2, r7, #2
   241dc:	8812      	ldrh	r2, [r2, #0]
   241de:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
   241e0:	230c      	movs	r3, #12
   241e2:	18fb      	adds	r3, r7, r3
   241e4:	0019      	movs	r1, r3
   241e6:	2003      	movs	r0, #3
   241e8:	4b03      	ldr	r3, [pc, #12]	; (241f8 <nmi_spi_write+0x40>)
   241ea:	4798      	blx	r3
   241ec:	0003      	movs	r3, r0
}
   241ee:	0018      	movs	r0, r3
   241f0:	46bd      	mov	sp, r7
   241f2:	b006      	add	sp, #24
   241f4:	bd80      	pop	{r7, pc}
   241f6:	46c0      	nop			; (mov r8, r8)
   241f8:	00021921 	.word	0x00021921

000241fc <nmi_spi_rw>:
#ifndef USE_OLD_SPI_SW
static sint8 nmi_spi_rw(uint8 *bin,uint8* bout,uint16 sz)
{
   241fc:	b580      	push	{r7, lr}
   241fe:	b088      	sub	sp, #32
   24200:	af00      	add	r7, sp, #0
   24202:	60f8      	str	r0, [r7, #12]
   24204:	60b9      	str	r1, [r7, #8]
   24206:	1dbb      	adds	r3, r7, #6
   24208:	801a      	strh	r2, [r3, #0]
	tstrNmSpiRw spi;
	spi.pu8InBuf = bin;
   2420a:	2314      	movs	r3, #20
   2420c:	18fb      	adds	r3, r7, r3
   2420e:	68fa      	ldr	r2, [r7, #12]
   24210:	601a      	str	r2, [r3, #0]
	spi.pu8OutBuf = bout;
   24212:	2314      	movs	r3, #20
   24214:	18fb      	adds	r3, r7, r3
   24216:	68ba      	ldr	r2, [r7, #8]
   24218:	605a      	str	r2, [r3, #4]
	spi.u16Sz = sz;
   2421a:	2314      	movs	r3, #20
   2421c:	18fb      	adds	r3, r7, r3
   2421e:	1dba      	adds	r2, r7, #6
   24220:	8812      	ldrh	r2, [r2, #0]
   24222:	811a      	strh	r2, [r3, #8]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);	
   24224:	2314      	movs	r3, #20
   24226:	18fb      	adds	r3, r7, r3
   24228:	0019      	movs	r1, r3
   2422a:	2003      	movs	r0, #3
   2422c:	4b03      	ldr	r3, [pc, #12]	; (2423c <nmi_spi_rw+0x40>)
   2422e:	4798      	blx	r3
   24230:	0003      	movs	r3, r0
}
   24232:	0018      	movs	r0, r3
   24234:	46bd      	mov	sp, r7
   24236:	b008      	add	sp, #32
   24238:	bd80      	pop	{r7, pc}
   2423a:	46c0      	nop			; (mov r8, r8)
   2423c:	00021921 	.word	0x00021921

00024240 <crc7_byte>:
	0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static uint8 crc7_byte(uint8 crc, uint8 data)
{
   24240:	b580      	push	{r7, lr}
   24242:	b082      	sub	sp, #8
   24244:	af00      	add	r7, sp, #0
   24246:	0002      	movs	r2, r0
   24248:	1dfb      	adds	r3, r7, #7
   2424a:	701a      	strb	r2, [r3, #0]
   2424c:	1dbb      	adds	r3, r7, #6
   2424e:	1c0a      	adds	r2, r1, #0
   24250:	701a      	strb	r2, [r3, #0]
	return crc7_syndrome_table[(crc << 1) ^ data];
   24252:	1dfb      	adds	r3, r7, #7
   24254:	781b      	ldrb	r3, [r3, #0]
   24256:	005a      	lsls	r2, r3, #1
   24258:	1dbb      	adds	r3, r7, #6
   2425a:	781b      	ldrb	r3, [r3, #0]
   2425c:	4053      	eors	r3, r2
   2425e:	4a03      	ldr	r2, [pc, #12]	; (2426c <crc7_byte+0x2c>)
   24260:	5cd3      	ldrb	r3, [r2, r3]
}
   24262:	0018      	movs	r0, r3
   24264:	46bd      	mov	sp, r7
   24266:	b002      	add	sp, #8
   24268:	bd80      	pop	{r7, pc}
   2426a:	46c0      	nop			; (mov r8, r8)
   2426c:	00039d78 	.word	0x00039d78

00024270 <crc7>:

static uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
   24270:	b590      	push	{r4, r7, lr}
   24272:	b085      	sub	sp, #20
   24274:	af00      	add	r7, sp, #0
   24276:	60b9      	str	r1, [r7, #8]
   24278:	607a      	str	r2, [r7, #4]
   2427a:	230f      	movs	r3, #15
   2427c:	18fb      	adds	r3, r7, r3
   2427e:	1c02      	adds	r2, r0, #0
   24280:	701a      	strb	r2, [r3, #0]
	while (len--)
   24282:	e00e      	b.n	242a2 <crc7+0x32>
		crc = crc7_byte(crc, *buffer++);
   24284:	68bb      	ldr	r3, [r7, #8]
   24286:	1c5a      	adds	r2, r3, #1
   24288:	60ba      	str	r2, [r7, #8]
   2428a:	781a      	ldrb	r2, [r3, #0]
   2428c:	230f      	movs	r3, #15
   2428e:	18fc      	adds	r4, r7, r3
   24290:	230f      	movs	r3, #15
   24292:	18fb      	adds	r3, r7, r3
   24294:	781b      	ldrb	r3, [r3, #0]
   24296:	0011      	movs	r1, r2
   24298:	0018      	movs	r0, r3
   2429a:	4b08      	ldr	r3, [pc, #32]	; (242bc <crc7+0x4c>)
   2429c:	4798      	blx	r3
   2429e:	0003      	movs	r3, r0
   242a0:	7023      	strb	r3, [r4, #0]
	while (len--)
   242a2:	687b      	ldr	r3, [r7, #4]
   242a4:	1e5a      	subs	r2, r3, #1
   242a6:	607a      	str	r2, [r7, #4]
   242a8:	2b00      	cmp	r3, #0
   242aa:	d1eb      	bne.n	24284 <crc7+0x14>
	return crc;
   242ac:	230f      	movs	r3, #15
   242ae:	18fb      	adds	r3, r7, r3
   242b0:	781b      	ldrb	r3, [r3, #0]
}
   242b2:	0018      	movs	r0, r3
   242b4:	46bd      	mov	sp, r7
   242b6:	b005      	add	sp, #20
   242b8:	bd90      	pop	{r4, r7, pc}
   242ba:	46c0      	nop			; (mov r8, r8)
   242bc:	00024241 	.word	0x00024241

000242c0 <spi_cmd>:
#define DATA_PKT_SZ_4K			(4 * 1024)
#define DATA_PKT_SZ_8K			(8 * 1024)
#define DATA_PKT_SZ				DATA_PKT_SZ_8K

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz,uint8 clockless)
{
   242c0:	b590      	push	{r4, r7, lr}
   242c2:	b089      	sub	sp, #36	; 0x24
   242c4:	af00      	add	r7, sp, #0
   242c6:	60b9      	str	r1, [r7, #8]
   242c8:	607a      	str	r2, [r7, #4]
   242ca:	603b      	str	r3, [r7, #0]
   242cc:	230f      	movs	r3, #15
   242ce:	18fb      	adds	r3, r7, r3
   242d0:	1c02      	adds	r2, r0, #0
   242d2:	701a      	strb	r2, [r3, #0]
	uint8 bc[9];
	uint8 len = 5;
   242d4:	231f      	movs	r3, #31
   242d6:	18fb      	adds	r3, r7, r3
   242d8:	2205      	movs	r2, #5
   242da:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   242dc:	231e      	movs	r3, #30
   242de:	18fb      	adds	r3, r7, r3
   242e0:	2201      	movs	r2, #1
   242e2:	701a      	strb	r2, [r3, #0]

	bc[0] = cmd;
   242e4:	2314      	movs	r3, #20
   242e6:	18fb      	adds	r3, r7, r3
   242e8:	220f      	movs	r2, #15
   242ea:	18ba      	adds	r2, r7, r2
   242ec:	7812      	ldrb	r2, [r2, #0]
   242ee:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   242f0:	230f      	movs	r3, #15
   242f2:	18fb      	adds	r3, r7, r3
   242f4:	781b      	ldrb	r3, [r3, #0]
   242f6:	3bc1      	subs	r3, #193	; 0xc1
   242f8:	2b0e      	cmp	r3, #14
   242fa:	d900      	bls.n	242fe <spi_cmd+0x3e>
   242fc:	e11b      	b.n	24536 <spi_cmd+0x276>
   242fe:	009a      	lsls	r2, r3, #2
   24300:	4bb6      	ldr	r3, [pc, #728]	; (245dc <spi_cmd+0x31c>)
   24302:	18d3      	adds	r3, r2, r3
   24304:	681b      	ldr	r3, [r3, #0]
   24306:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		bc[1] = (uint8)(adr >> 16);
   24308:	68bb      	ldr	r3, [r7, #8]
   2430a:	0c1b      	lsrs	r3, r3, #16
   2430c:	b2da      	uxtb	r2, r3
   2430e:	2314      	movs	r3, #20
   24310:	18fb      	adds	r3, r7, r3
   24312:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   24314:	68bb      	ldr	r3, [r7, #8]
   24316:	0a1b      	lsrs	r3, r3, #8
   24318:	b2da      	uxtb	r2, r3
   2431a:	2314      	movs	r3, #20
   2431c:	18fb      	adds	r3, r7, r3
   2431e:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   24320:	68bb      	ldr	r3, [r7, #8]
   24322:	b2da      	uxtb	r2, r3
   24324:	2314      	movs	r3, #20
   24326:	18fb      	adds	r3, r7, r3
   24328:	70da      	strb	r2, [r3, #3]
		len = 5;
   2432a:	231f      	movs	r3, #31
   2432c:	18fb      	adds	r3, r7, r3
   2432e:	2205      	movs	r2, #5
   24330:	701a      	strb	r2, [r3, #0]
		break;
   24332:	e105      	b.n	24540 <spi_cmd+0x280>
	case CMD_INTERNAL_READ:			/* internal register read */
		bc[1] = (uint8)(adr >> 8);
   24334:	68bb      	ldr	r3, [r7, #8]
   24336:	0a1b      	lsrs	r3, r3, #8
   24338:	b2da      	uxtb	r2, r3
   2433a:	2314      	movs	r3, #20
   2433c:	18fb      	adds	r3, r7, r3
   2433e:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   24340:	2330      	movs	r3, #48	; 0x30
   24342:	18fb      	adds	r3, r7, r3
   24344:	781b      	ldrb	r3, [r3, #0]
   24346:	2b00      	cmp	r3, #0
   24348:	d009      	beq.n	2435e <spi_cmd+0x9e>
   2434a:	2314      	movs	r3, #20
   2434c:	18fb      	adds	r3, r7, r3
   2434e:	785b      	ldrb	r3, [r3, #1]
   24350:	2280      	movs	r2, #128	; 0x80
   24352:	4252      	negs	r2, r2
   24354:	4313      	orrs	r3, r2
   24356:	b2da      	uxtb	r2, r3
   24358:	2314      	movs	r3, #20
   2435a:	18fb      	adds	r3, r7, r3
   2435c:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)adr;
   2435e:	68bb      	ldr	r3, [r7, #8]
   24360:	b2da      	uxtb	r2, r3
   24362:	2314      	movs	r3, #20
   24364:	18fb      	adds	r3, r7, r3
   24366:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   24368:	2314      	movs	r3, #20
   2436a:	18fb      	adds	r3, r7, r3
   2436c:	2200      	movs	r2, #0
   2436e:	70da      	strb	r2, [r3, #3]
		len = 5;
   24370:	231f      	movs	r3, #31
   24372:	18fb      	adds	r3, r7, r3
   24374:	2205      	movs	r2, #5
   24376:	701a      	strb	r2, [r3, #0]
		break;
   24378:	e0e2      	b.n	24540 <spi_cmd+0x280>
	case CMD_TERMINATE:					/* termination */
		bc[1] = 0x00;
   2437a:	2314      	movs	r3, #20
   2437c:	18fb      	adds	r3, r7, r3
   2437e:	2200      	movs	r2, #0
   24380:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   24382:	2314      	movs	r3, #20
   24384:	18fb      	adds	r3, r7, r3
   24386:	2200      	movs	r2, #0
   24388:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   2438a:	2314      	movs	r3, #20
   2438c:	18fb      	adds	r3, r7, r3
   2438e:	2200      	movs	r2, #0
   24390:	70da      	strb	r2, [r3, #3]
		len = 5;
   24392:	231f      	movs	r3, #31
   24394:	18fb      	adds	r3, r7, r3
   24396:	2205      	movs	r2, #5
   24398:	701a      	strb	r2, [r3, #0]
		break;
   2439a:	e0d1      	b.n	24540 <spi_cmd+0x280>
	case CMD_REPEAT:						/* repeat */
		bc[1] = 0x00;
   2439c:	2314      	movs	r3, #20
   2439e:	18fb      	adds	r3, r7, r3
   243a0:	2200      	movs	r2, #0
   243a2:	705a      	strb	r2, [r3, #1]
		bc[2] = 0x00;
   243a4:	2314      	movs	r3, #20
   243a6:	18fb      	adds	r3, r7, r3
   243a8:	2200      	movs	r2, #0
   243aa:	709a      	strb	r2, [r3, #2]
		bc[3] = 0x00;
   243ac:	2314      	movs	r3, #20
   243ae:	18fb      	adds	r3, r7, r3
   243b0:	2200      	movs	r2, #0
   243b2:	70da      	strb	r2, [r3, #3]
		len = 5;
   243b4:	231f      	movs	r3, #31
   243b6:	18fb      	adds	r3, r7, r3
   243b8:	2205      	movs	r2, #5
   243ba:	701a      	strb	r2, [r3, #0]
		break;
   243bc:	e0c0      	b.n	24540 <spi_cmd+0x280>
	case CMD_RESET:							/* reset */
		bc[1] = 0xff;
   243be:	2314      	movs	r3, #20
   243c0:	18fb      	adds	r3, r7, r3
   243c2:	22ff      	movs	r2, #255	; 0xff
   243c4:	705a      	strb	r2, [r3, #1]
		bc[2] = 0xff;
   243c6:	2314      	movs	r3, #20
   243c8:	18fb      	adds	r3, r7, r3
   243ca:	22ff      	movs	r2, #255	; 0xff
   243cc:	709a      	strb	r2, [r3, #2]
		bc[3] = 0xff;
   243ce:	2314      	movs	r3, #20
   243d0:	18fb      	adds	r3, r7, r3
   243d2:	22ff      	movs	r2, #255	; 0xff
   243d4:	70da      	strb	r2, [r3, #3]
		len = 5;
   243d6:	231f      	movs	r3, #31
   243d8:	18fb      	adds	r3, r7, r3
   243da:	2205      	movs	r2, #5
   243dc:	701a      	strb	r2, [r3, #0]
		break;
   243de:	e0af      	b.n	24540 <spi_cmd+0x280>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		bc[1] = (uint8)(adr >> 16);
   243e0:	68bb      	ldr	r3, [r7, #8]
   243e2:	0c1b      	lsrs	r3, r3, #16
   243e4:	b2da      	uxtb	r2, r3
   243e6:	2314      	movs	r3, #20
   243e8:	18fb      	adds	r3, r7, r3
   243ea:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   243ec:	68bb      	ldr	r3, [r7, #8]
   243ee:	0a1b      	lsrs	r3, r3, #8
   243f0:	b2da      	uxtb	r2, r3
   243f2:	2314      	movs	r3, #20
   243f4:	18fb      	adds	r3, r7, r3
   243f6:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   243f8:	68bb      	ldr	r3, [r7, #8]
   243fa:	b2da      	uxtb	r2, r3
   243fc:	2314      	movs	r3, #20
   243fe:	18fb      	adds	r3, r7, r3
   24400:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 8);
   24402:	683b      	ldr	r3, [r7, #0]
   24404:	0a1b      	lsrs	r3, r3, #8
   24406:	b2da      	uxtb	r2, r3
   24408:	2314      	movs	r3, #20
   2440a:	18fb      	adds	r3, r7, r3
   2440c:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz);
   2440e:	683b      	ldr	r3, [r7, #0]
   24410:	b2da      	uxtb	r2, r3
   24412:	2314      	movs	r3, #20
   24414:	18fb      	adds	r3, r7, r3
   24416:	715a      	strb	r2, [r3, #5]
		len = 7;
   24418:	231f      	movs	r3, #31
   2441a:	18fb      	adds	r3, r7, r3
   2441c:	2207      	movs	r2, #7
   2441e:	701a      	strb	r2, [r3, #0]
		break;
   24420:	e08e      	b.n	24540 <spi_cmd+0x280>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		bc[1] = (uint8)(adr >> 16);
   24422:	68bb      	ldr	r3, [r7, #8]
   24424:	0c1b      	lsrs	r3, r3, #16
   24426:	b2da      	uxtb	r2, r3
   24428:	2314      	movs	r3, #20
   2442a:	18fb      	adds	r3, r7, r3
   2442c:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   2442e:	68bb      	ldr	r3, [r7, #8]
   24430:	0a1b      	lsrs	r3, r3, #8
   24432:	b2da      	uxtb	r2, r3
   24434:	2314      	movs	r3, #20
   24436:	18fb      	adds	r3, r7, r3
   24438:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)adr;
   2443a:	68bb      	ldr	r3, [r7, #8]
   2443c:	b2da      	uxtb	r2, r3
   2443e:	2314      	movs	r3, #20
   24440:	18fb      	adds	r3, r7, r3
   24442:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(sz >> 16);
   24444:	683b      	ldr	r3, [r7, #0]
   24446:	0c1b      	lsrs	r3, r3, #16
   24448:	b2da      	uxtb	r2, r3
   2444a:	2314      	movs	r3, #20
   2444c:	18fb      	adds	r3, r7, r3
   2444e:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(sz >> 8);
   24450:	683b      	ldr	r3, [r7, #0]
   24452:	0a1b      	lsrs	r3, r3, #8
   24454:	b2da      	uxtb	r2, r3
   24456:	2314      	movs	r3, #20
   24458:	18fb      	adds	r3, r7, r3
   2445a:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(sz);
   2445c:	683b      	ldr	r3, [r7, #0]
   2445e:	b2da      	uxtb	r2, r3
   24460:	2314      	movs	r3, #20
   24462:	18fb      	adds	r3, r7, r3
   24464:	719a      	strb	r2, [r3, #6]
		len = 8;
   24466:	231f      	movs	r3, #31
   24468:	18fb      	adds	r3, r7, r3
   2446a:	2208      	movs	r2, #8
   2446c:	701a      	strb	r2, [r3, #0]
		break;
   2446e:	e067      	b.n	24540 <spi_cmd+0x280>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		bc[1] = (uint8)(adr >> 8);
   24470:	68bb      	ldr	r3, [r7, #8]
   24472:	0a1b      	lsrs	r3, r3, #8
   24474:	b2da      	uxtb	r2, r3
   24476:	2314      	movs	r3, #20
   24478:	18fb      	adds	r3, r7, r3
   2447a:	705a      	strb	r2, [r3, #1]
		if(clockless)  bc[1] |= (1 << 7);
   2447c:	2330      	movs	r3, #48	; 0x30
   2447e:	18fb      	adds	r3, r7, r3
   24480:	781b      	ldrb	r3, [r3, #0]
   24482:	2b00      	cmp	r3, #0
   24484:	d009      	beq.n	2449a <spi_cmd+0x1da>
   24486:	2314      	movs	r3, #20
   24488:	18fb      	adds	r3, r7, r3
   2448a:	785b      	ldrb	r3, [r3, #1]
   2448c:	2280      	movs	r2, #128	; 0x80
   2448e:	4252      	negs	r2, r2
   24490:	4313      	orrs	r3, r2
   24492:	b2da      	uxtb	r2, r3
   24494:	2314      	movs	r3, #20
   24496:	18fb      	adds	r3, r7, r3
   24498:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr);
   2449a:	68bb      	ldr	r3, [r7, #8]
   2449c:	b2da      	uxtb	r2, r3
   2449e:	2314      	movs	r3, #20
   244a0:	18fb      	adds	r3, r7, r3
   244a2:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(u32data >> 24);
   244a4:	687b      	ldr	r3, [r7, #4]
   244a6:	0e1b      	lsrs	r3, r3, #24
   244a8:	b2da      	uxtb	r2, r3
   244aa:	2314      	movs	r3, #20
   244ac:	18fb      	adds	r3, r7, r3
   244ae:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 16);
   244b0:	687b      	ldr	r3, [r7, #4]
   244b2:	0c1b      	lsrs	r3, r3, #16
   244b4:	b2da      	uxtb	r2, r3
   244b6:	2314      	movs	r3, #20
   244b8:	18fb      	adds	r3, r7, r3
   244ba:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 8);
   244bc:	687b      	ldr	r3, [r7, #4]
   244be:	0a1b      	lsrs	r3, r3, #8
   244c0:	b2da      	uxtb	r2, r3
   244c2:	2314      	movs	r3, #20
   244c4:	18fb      	adds	r3, r7, r3
   244c6:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data);
   244c8:	687b      	ldr	r3, [r7, #4]
   244ca:	b2da      	uxtb	r2, r3
   244cc:	2314      	movs	r3, #20
   244ce:	18fb      	adds	r3, r7, r3
   244d0:	719a      	strb	r2, [r3, #6]
		len = 8;
   244d2:	231f      	movs	r3, #31
   244d4:	18fb      	adds	r3, r7, r3
   244d6:	2208      	movs	r2, #8
   244d8:	701a      	strb	r2, [r3, #0]
		break;
   244da:	e031      	b.n	24540 <spi_cmd+0x280>
	case CMD_SINGLE_WRITE:			/* single word write */
		bc[1] = (uint8)(adr >> 16);
   244dc:	68bb      	ldr	r3, [r7, #8]
   244de:	0c1b      	lsrs	r3, r3, #16
   244e0:	b2da      	uxtb	r2, r3
   244e2:	2314      	movs	r3, #20
   244e4:	18fb      	adds	r3, r7, r3
   244e6:	705a      	strb	r2, [r3, #1]
		bc[2] = (uint8)(adr >> 8);
   244e8:	68bb      	ldr	r3, [r7, #8]
   244ea:	0a1b      	lsrs	r3, r3, #8
   244ec:	b2da      	uxtb	r2, r3
   244ee:	2314      	movs	r3, #20
   244f0:	18fb      	adds	r3, r7, r3
   244f2:	709a      	strb	r2, [r3, #2]
		bc[3] = (uint8)(adr);
   244f4:	68bb      	ldr	r3, [r7, #8]
   244f6:	b2da      	uxtb	r2, r3
   244f8:	2314      	movs	r3, #20
   244fa:	18fb      	adds	r3, r7, r3
   244fc:	70da      	strb	r2, [r3, #3]
		bc[4] = (uint8)(u32data >> 24);
   244fe:	687b      	ldr	r3, [r7, #4]
   24500:	0e1b      	lsrs	r3, r3, #24
   24502:	b2da      	uxtb	r2, r3
   24504:	2314      	movs	r3, #20
   24506:	18fb      	adds	r3, r7, r3
   24508:	711a      	strb	r2, [r3, #4]
		bc[5] = (uint8)(u32data >> 16);
   2450a:	687b      	ldr	r3, [r7, #4]
   2450c:	0c1b      	lsrs	r3, r3, #16
   2450e:	b2da      	uxtb	r2, r3
   24510:	2314      	movs	r3, #20
   24512:	18fb      	adds	r3, r7, r3
   24514:	715a      	strb	r2, [r3, #5]
		bc[6] = (uint8)(u32data >> 8);
   24516:	687b      	ldr	r3, [r7, #4]
   24518:	0a1b      	lsrs	r3, r3, #8
   2451a:	b2da      	uxtb	r2, r3
   2451c:	2314      	movs	r3, #20
   2451e:	18fb      	adds	r3, r7, r3
   24520:	719a      	strb	r2, [r3, #6]
		bc[7] = (uint8)(u32data);
   24522:	687b      	ldr	r3, [r7, #4]
   24524:	b2da      	uxtb	r2, r3
   24526:	2314      	movs	r3, #20
   24528:	18fb      	adds	r3, r7, r3
   2452a:	71da      	strb	r2, [r3, #7]
		len = 9;
   2452c:	231f      	movs	r3, #31
   2452e:	18fb      	adds	r3, r7, r3
   24530:	2209      	movs	r2, #9
   24532:	701a      	strb	r2, [r3, #0]
		break;
   24534:	e004      	b.n	24540 <spi_cmd+0x280>
	default:
		result = N_FAIL;
   24536:	231e      	movs	r3, #30
   24538:	18fb      	adds	r3, r7, r3
   2453a:	2200      	movs	r2, #0
   2453c:	701a      	strb	r2, [r3, #0]
		break;
   2453e:	46c0      	nop			; (mov r8, r8)
	}

	if (result) {
   24540:	231e      	movs	r3, #30
   24542:	18fb      	adds	r3, r7, r3
   24544:	781b      	ldrb	r3, [r3, #0]
   24546:	b25b      	sxtb	r3, r3
   24548:	2b00      	cmp	r3, #0
   2454a:	d03f      	beq.n	245cc <spi_cmd+0x30c>
		if (!gu8Crc_off)
   2454c:	4b24      	ldr	r3, [pc, #144]	; (245e0 <spi_cmd+0x320>)
   2454e:	781b      	ldrb	r3, [r3, #0]
   24550:	2b00      	cmp	r3, #0
   24552:	d115      	bne.n	24580 <spi_cmd+0x2c0>
			bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
   24554:	231f      	movs	r3, #31
   24556:	18fb      	adds	r3, r7, r3
   24558:	781b      	ldrb	r3, [r3, #0]
   2455a:	1e5c      	subs	r4, r3, #1
   2455c:	231f      	movs	r3, #31
   2455e:	18fb      	adds	r3, r7, r3
   24560:	781b      	ldrb	r3, [r3, #0]
   24562:	3b01      	subs	r3, #1
   24564:	001a      	movs	r2, r3
   24566:	2314      	movs	r3, #20
   24568:	18fb      	adds	r3, r7, r3
   2456a:	0019      	movs	r1, r3
   2456c:	207f      	movs	r0, #127	; 0x7f
   2456e:	4b1d      	ldr	r3, [pc, #116]	; (245e4 <spi_cmd+0x324>)
   24570:	4798      	blx	r3
   24572:	0003      	movs	r3, r0
   24574:	18db      	adds	r3, r3, r3
   24576:	b2da      	uxtb	r2, r3
   24578:	2314      	movs	r3, #20
   2457a:	18fb      	adds	r3, r7, r3
   2457c:	551a      	strb	r2, [r3, r4]
   2457e:	e006      	b.n	2458e <spi_cmd+0x2ce>
		else
			len-=1;
   24580:	231f      	movs	r3, #31
   24582:	18fb      	adds	r3, r7, r3
   24584:	221f      	movs	r2, #31
   24586:	18ba      	adds	r2, r7, r2
   24588:	7812      	ldrb	r2, [r2, #0]
   2458a:	3a01      	subs	r2, #1
   2458c:	701a      	strb	r2, [r3, #0]

		if (M2M_SUCCESS != nmi_spi_write(bc, len)) {
   2458e:	231f      	movs	r3, #31
   24590:	18fb      	adds	r3, r7, r3
   24592:	781b      	ldrb	r3, [r3, #0]
   24594:	b29a      	uxth	r2, r3
   24596:	2314      	movs	r3, #20
   24598:	18fb      	adds	r3, r7, r3
   2459a:	0011      	movs	r1, r2
   2459c:	0018      	movs	r0, r3
   2459e:	4b12      	ldr	r3, [pc, #72]	; (245e8 <spi_cmd+0x328>)
   245a0:	4798      	blx	r3
   245a2:	1e03      	subs	r3, r0, #0
   245a4:	d012      	beq.n	245cc <spi_cmd+0x30c>
			M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   245a6:	2390      	movs	r3, #144	; 0x90
   245a8:	005a      	lsls	r2, r3, #1
   245aa:	4910      	ldr	r1, [pc, #64]	; (245ec <spi_cmd+0x32c>)
   245ac:	4b10      	ldr	r3, [pc, #64]	; (245f0 <spi_cmd+0x330>)
   245ae:	0018      	movs	r0, r3
   245b0:	4b10      	ldr	r3, [pc, #64]	; (245f4 <spi_cmd+0x334>)
   245b2:	4798      	blx	r3
   245b4:	4b10      	ldr	r3, [pc, #64]	; (245f8 <spi_cmd+0x338>)
   245b6:	0018      	movs	r0, r3
   245b8:	4b0e      	ldr	r3, [pc, #56]	; (245f4 <spi_cmd+0x334>)
   245ba:	4798      	blx	r3
   245bc:	4b0f      	ldr	r3, [pc, #60]	; (245fc <spi_cmd+0x33c>)
   245be:	0018      	movs	r0, r3
   245c0:	4b0c      	ldr	r3, [pc, #48]	; (245f4 <spi_cmd+0x334>)
   245c2:	4798      	blx	r3
			result = N_FAIL;
   245c4:	231e      	movs	r3, #30
   245c6:	18fb      	adds	r3, r7, r3
   245c8:	2200      	movs	r2, #0
   245ca:	701a      	strb	r2, [r3, #0]
		}
	}

	return result;
   245cc:	231e      	movs	r3, #30
   245ce:	18fb      	adds	r3, r7, r3
   245d0:	781b      	ldrb	r3, [r3, #0]
   245d2:	b25b      	sxtb	r3, r3
}
   245d4:	0018      	movs	r0, r3
   245d6:	46bd      	mov	sp, r7
   245d8:	b009      	add	sp, #36	; 0x24
   245da:	bd90      	pop	{r4, r7, pc}
   245dc:	0003a3f0 	.word	0x0003a3f0
   245e0:	200042b0 	.word	0x200042b0
   245e4:	00024271 	.word	0x00024271
   245e8:	000241b9 	.word	0x000241b9
   245ec:	0003a468 	.word	0x0003a468
   245f0:	00039e78 	.word	0x00039e78
   245f4:	0001ed29 	.word	0x0001ed29
   245f8:	00039e8c 	.word	0x00039e8c
   245fc:	00039eb8 	.word	0x00039eb8

00024600 <spi_data_rsp>:

static sint8 spi_data_rsp(uint8 cmd)
{
   24600:	b590      	push	{r4, r7, lr}
   24602:	b085      	sub	sp, #20
   24604:	af00      	add	r7, sp, #0
   24606:	0002      	movs	r2, r0
   24608:	1dfb      	adds	r3, r7, #7
   2460a:	701a      	strb	r2, [r3, #0]
	uint8 len;
	uint8 rsp[3];
	sint8 result = N_OK;
   2460c:	230e      	movs	r3, #14
   2460e:	18fb      	adds	r3, r7, r3
   24610:	2201      	movs	r2, #1
   24612:	701a      	strb	r2, [r3, #0]

    if (!gu8Crc_off)
   24614:	4b32      	ldr	r3, [pc, #200]	; (246e0 <spi_data_rsp+0xe0>)
   24616:	781b      	ldrb	r3, [r3, #0]
   24618:	2b00      	cmp	r3, #0
   2461a:	d104      	bne.n	24626 <spi_data_rsp+0x26>
		len = 2;
   2461c:	230f      	movs	r3, #15
   2461e:	18fb      	adds	r3, r7, r3
   24620:	2202      	movs	r2, #2
   24622:	701a      	strb	r2, [r3, #0]
   24624:	e003      	b.n	2462e <spi_data_rsp+0x2e>
	else
		len = 3;
   24626:	230f      	movs	r3, #15
   24628:	18fb      	adds	r3, r7, r3
   2462a:	2203      	movs	r2, #3
   2462c:	701a      	strb	r2, [r3, #0]

	if (M2M_SUCCESS != nmi_spi_read(&rsp[0], len)) {
   2462e:	230f      	movs	r3, #15
   24630:	18fb      	adds	r3, r7, r3
   24632:	781b      	ldrb	r3, [r3, #0]
   24634:	b29a      	uxth	r2, r3
   24636:	2308      	movs	r3, #8
   24638:	18fb      	adds	r3, r7, r3
   2463a:	0011      	movs	r1, r2
   2463c:	0018      	movs	r0, r3
   2463e:	4b29      	ldr	r3, [pc, #164]	; (246e4 <spi_data_rsp+0xe4>)
   24640:	4798      	blx	r3
   24642:	1e03      	subs	r3, r0, #0
   24644:	d013      	beq.n	2466e <spi_data_rsp+0x6e>
		M2M_ERR("[nmi spi]: Failed bus error...\n");
   24646:	239a      	movs	r3, #154	; 0x9a
   24648:	005a      	lsls	r2, r3, #1
   2464a:	4927      	ldr	r1, [pc, #156]	; (246e8 <spi_data_rsp+0xe8>)
   2464c:	4b27      	ldr	r3, [pc, #156]	; (246ec <spi_data_rsp+0xec>)
   2464e:	0018      	movs	r0, r3
   24650:	4b27      	ldr	r3, [pc, #156]	; (246f0 <spi_data_rsp+0xf0>)
   24652:	4798      	blx	r3
   24654:	4b27      	ldr	r3, [pc, #156]	; (246f4 <spi_data_rsp+0xf4>)
   24656:	0018      	movs	r0, r3
   24658:	4b25      	ldr	r3, [pc, #148]	; (246f0 <spi_data_rsp+0xf0>)
   2465a:	4798      	blx	r3
   2465c:	4b26      	ldr	r3, [pc, #152]	; (246f8 <spi_data_rsp+0xf8>)
   2465e:	0018      	movs	r0, r3
   24660:	4b23      	ldr	r3, [pc, #140]	; (246f0 <spi_data_rsp+0xf0>)
   24662:	4798      	blx	r3
		result = N_FAIL;
   24664:	230e      	movs	r3, #14
   24666:	18fb      	adds	r3, r7, r3
   24668:	2200      	movs	r2, #0
   2466a:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   2466c:	e030      	b.n	246d0 <spi_data_rsp+0xd0>
	}
		
	if((rsp[len-1] != 0)||(rsp[len-2] != 0xC3))
   2466e:	230f      	movs	r3, #15
   24670:	18fb      	adds	r3, r7, r3
   24672:	781b      	ldrb	r3, [r3, #0]
   24674:	3b01      	subs	r3, #1
   24676:	2208      	movs	r2, #8
   24678:	18ba      	adds	r2, r7, r2
   2467a:	5cd3      	ldrb	r3, [r2, r3]
   2467c:	2b00      	cmp	r3, #0
   2467e:	d108      	bne.n	24692 <spi_data_rsp+0x92>
   24680:	230f      	movs	r3, #15
   24682:	18fb      	adds	r3, r7, r3
   24684:	781b      	ldrb	r3, [r3, #0]
   24686:	3b02      	subs	r3, #2
   24688:	2208      	movs	r2, #8
   2468a:	18ba      	adds	r2, r7, r2
   2468c:	5cd3      	ldrb	r3, [r2, r3]
   2468e:	2bc3      	cmp	r3, #195	; 0xc3
   24690:	d01e      	beq.n	246d0 <spi_data_rsp+0xd0>
	{
		M2M_ERR("[nmi spi]: Failed data response read, %x %x %x\n",rsp[0],rsp[1],rsp[2]);
   24692:	233c      	movs	r3, #60	; 0x3c
   24694:	33ff      	adds	r3, #255	; 0xff
   24696:	001a      	movs	r2, r3
   24698:	4913      	ldr	r1, [pc, #76]	; (246e8 <spi_data_rsp+0xe8>)
   2469a:	4b14      	ldr	r3, [pc, #80]	; (246ec <spi_data_rsp+0xec>)
   2469c:	0018      	movs	r0, r3
   2469e:	4b14      	ldr	r3, [pc, #80]	; (246f0 <spi_data_rsp+0xf0>)
   246a0:	4798      	blx	r3
   246a2:	2308      	movs	r3, #8
   246a4:	18fb      	adds	r3, r7, r3
   246a6:	781b      	ldrb	r3, [r3, #0]
   246a8:	0019      	movs	r1, r3
   246aa:	2308      	movs	r3, #8
   246ac:	18fb      	adds	r3, r7, r3
   246ae:	785b      	ldrb	r3, [r3, #1]
   246b0:	001a      	movs	r2, r3
   246b2:	2308      	movs	r3, #8
   246b4:	18fb      	adds	r3, r7, r3
   246b6:	789b      	ldrb	r3, [r3, #2]
   246b8:	4810      	ldr	r0, [pc, #64]	; (246fc <spi_data_rsp+0xfc>)
   246ba:	4c0d      	ldr	r4, [pc, #52]	; (246f0 <spi_data_rsp+0xf0>)
   246bc:	47a0      	blx	r4
   246be:	4b0e      	ldr	r3, [pc, #56]	; (246f8 <spi_data_rsp+0xf8>)
   246c0:	0018      	movs	r0, r3
   246c2:	4b0b      	ldr	r3, [pc, #44]	; (246f0 <spi_data_rsp+0xf0>)
   246c4:	4798      	blx	r3
		result = N_FAIL;
   246c6:	230e      	movs	r3, #14
   246c8:	18fb      	adds	r3, r7, r3
   246ca:	2200      	movs	r2, #0
   246cc:	701a      	strb	r2, [r3, #0]
		goto _fail_;
   246ce:	46c0      	nop			; (mov r8, r8)
	}
_fail_:

	return result;
   246d0:	230e      	movs	r3, #14
   246d2:	18fb      	adds	r3, r7, r3
   246d4:	781b      	ldrb	r3, [r3, #0]
   246d6:	b25b      	sxtb	r3, r3
}
   246d8:	0018      	movs	r0, r3
   246da:	46bd      	mov	sp, r7
   246dc:	b005      	add	sp, #20
   246de:	bd90      	pop	{r4, r7, pc}
   246e0:	200042b0 	.word	0x200042b0
   246e4:	00024175 	.word	0x00024175
   246e8:	0003a470 	.word	0x0003a470
   246ec:	00039e78 	.word	0x00039e78
   246f0:	0001ed29 	.word	0x0001ed29
   246f4:	00039ebc 	.word	0x00039ebc
   246f8:	00039eb8 	.word	0x00039eb8
   246fc:	00039edc 	.word	0x00039edc

00024700 <spi_cmd_rsp>:

static sint8 spi_cmd_rsp(uint8 cmd)
{
   24700:	b580      	push	{r7, lr}
   24702:	b084      	sub	sp, #16
   24704:	af00      	add	r7, sp, #0
   24706:	0002      	movs	r2, r0
   24708:	1dfb      	adds	r3, r7, #7
   2470a:	701a      	strb	r2, [r3, #0]
	uint8 rsp;
	sint8 result = N_OK;
   2470c:	230f      	movs	r3, #15
   2470e:	18fb      	adds	r3, r7, r3
   24710:	2201      	movs	r2, #1
   24712:	701a      	strb	r2, [r3, #0]
	sint8 s8RetryCnt;

	/**
		Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   24714:	1dfb      	adds	r3, r7, #7
   24716:	781b      	ldrb	r3, [r3, #0]
   24718:	2bcf      	cmp	r3, #207	; 0xcf
   2471a:	d007      	beq.n	2472c <spi_cmd_rsp+0x2c>
   2471c:	1dfb      	adds	r3, r7, #7
   2471e:	781b      	ldrb	r3, [r3, #0]
   24720:	2bc5      	cmp	r3, #197	; 0xc5
   24722:	d003      	beq.n	2472c <spi_cmd_rsp+0x2c>
		 (cmd == CMD_TERMINATE) ||
   24724:	1dfb      	adds	r3, r7, #7
   24726:	781b      	ldrb	r3, [r3, #0]
   24728:	2bc6      	cmp	r3, #198	; 0xc6
   2472a:	d10c      	bne.n	24746 <spi_cmd_rsp+0x46>
		 (cmd == CMD_REPEAT)) {
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   2472c:	230d      	movs	r3, #13
   2472e:	18fb      	adds	r3, r7, r3
   24730:	2101      	movs	r1, #1
   24732:	0018      	movs	r0, r3
   24734:	4b3b      	ldr	r3, [pc, #236]	; (24824 <spi_cmd_rsp+0x124>)
   24736:	4798      	blx	r3
   24738:	1e03      	subs	r3, r0, #0
   2473a:	d004      	beq.n	24746 <spi_cmd_rsp+0x46>
			result = N_FAIL;
   2473c:	230f      	movs	r3, #15
   2473e:	18fb      	adds	r3, r7, r3
   24740:	2200      	movs	r2, #0
   24742:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   24744:	e065      	b.n	24812 <spi_cmd_rsp+0x112>
		}
	}

	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   24746:	230e      	movs	r3, #14
   24748:	18fb      	adds	r3, r7, r3
   2474a:	220a      	movs	r2, #10
   2474c:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   2474e:	230d      	movs	r3, #13
   24750:	18fb      	adds	r3, r7, r3
   24752:	2101      	movs	r1, #1
   24754:	0018      	movs	r0, r3
   24756:	4b33      	ldr	r3, [pc, #204]	; (24824 <spi_cmd_rsp+0x124>)
   24758:	4798      	blx	r3
   2475a:	1e03      	subs	r3, r0, #0
   2475c:	d014      	beq.n	24788 <spi_cmd_rsp+0x88>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   2475e:	235c      	movs	r3, #92	; 0x5c
   24760:	33ff      	adds	r3, #255	; 0xff
   24762:	001a      	movs	r2, r3
   24764:	4930      	ldr	r1, [pc, #192]	; (24828 <spi_cmd_rsp+0x128>)
   24766:	4b31      	ldr	r3, [pc, #196]	; (2482c <spi_cmd_rsp+0x12c>)
   24768:	0018      	movs	r0, r3
   2476a:	4b31      	ldr	r3, [pc, #196]	; (24830 <spi_cmd_rsp+0x130>)
   2476c:	4798      	blx	r3
   2476e:	4b31      	ldr	r3, [pc, #196]	; (24834 <spi_cmd_rsp+0x134>)
   24770:	0018      	movs	r0, r3
   24772:	4b2f      	ldr	r3, [pc, #188]	; (24830 <spi_cmd_rsp+0x130>)
   24774:	4798      	blx	r3
   24776:	4b30      	ldr	r3, [pc, #192]	; (24838 <spi_cmd_rsp+0x138>)
   24778:	0018      	movs	r0, r3
   2477a:	4b2d      	ldr	r3, [pc, #180]	; (24830 <spi_cmd_rsp+0x130>)
   2477c:	4798      	blx	r3
			result = N_FAIL;
   2477e:	230f      	movs	r3, #15
   24780:	18fb      	adds	r3, r7, r3
   24782:	2200      	movs	r2, #0
   24784:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   24786:	e044      	b.n	24812 <spi_cmd_rsp+0x112>
		}
	} while((rsp != cmd) && (s8RetryCnt-- >0));
   24788:	230d      	movs	r3, #13
   2478a:	18fb      	adds	r3, r7, r3
   2478c:	781b      	ldrb	r3, [r3, #0]
   2478e:	1dfa      	adds	r2, r7, #7
   24790:	7812      	ldrb	r2, [r2, #0]
   24792:	429a      	cmp	r2, r3
   24794:	d00b      	beq.n	247ae <spi_cmd_rsp+0xae>
   24796:	230e      	movs	r3, #14
   24798:	18fb      	adds	r3, r7, r3
   2479a:	781b      	ldrb	r3, [r3, #0]
   2479c:	b25b      	sxtb	r3, r3
   2479e:	b2da      	uxtb	r2, r3
   247a0:	3a01      	subs	r2, #1
   247a2:	b2d1      	uxtb	r1, r2
   247a4:	220e      	movs	r2, #14
   247a6:	18ba      	adds	r2, r7, r2
   247a8:	7011      	strb	r1, [r2, #0]
   247aa:	2b00      	cmp	r3, #0
   247ac:	dccf      	bgt.n	2474e <spi_cmd_rsp+0x4e>

	/**
		State response
	**/
	/* wait for response */
	s8RetryCnt = SPI_RESP_RETRY_COUNT;
   247ae:	230e      	movs	r3, #14
   247b0:	18fb      	adds	r3, r7, r3
   247b2:	220a      	movs	r2, #10
   247b4:	701a      	strb	r2, [r3, #0]
	do
	{
		if (M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
   247b6:	230d      	movs	r3, #13
   247b8:	18fb      	adds	r3, r7, r3
   247ba:	2101      	movs	r1, #1
   247bc:	0018      	movs	r0, r3
   247be:	4b19      	ldr	r3, [pc, #100]	; (24824 <spi_cmd_rsp+0x124>)
   247c0:	4798      	blx	r3
   247c2:	1e03      	subs	r3, r0, #0
   247c4:	d014      	beq.n	247f0 <spi_cmd_rsp+0xf0>
			M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
   247c6:	236a      	movs	r3, #106	; 0x6a
   247c8:	33ff      	adds	r3, #255	; 0xff
   247ca:	001a      	movs	r2, r3
   247cc:	4916      	ldr	r1, [pc, #88]	; (24828 <spi_cmd_rsp+0x128>)
   247ce:	4b17      	ldr	r3, [pc, #92]	; (2482c <spi_cmd_rsp+0x12c>)
   247d0:	0018      	movs	r0, r3
   247d2:	4b17      	ldr	r3, [pc, #92]	; (24830 <spi_cmd_rsp+0x130>)
   247d4:	4798      	blx	r3
   247d6:	4b17      	ldr	r3, [pc, #92]	; (24834 <spi_cmd_rsp+0x134>)
   247d8:	0018      	movs	r0, r3
   247da:	4b15      	ldr	r3, [pc, #84]	; (24830 <spi_cmd_rsp+0x130>)
   247dc:	4798      	blx	r3
   247de:	4b16      	ldr	r3, [pc, #88]	; (24838 <spi_cmd_rsp+0x138>)
   247e0:	0018      	movs	r0, r3
   247e2:	4b13      	ldr	r3, [pc, #76]	; (24830 <spi_cmd_rsp+0x130>)
   247e4:	4798      	blx	r3
			result = N_FAIL;
   247e6:	230f      	movs	r3, #15
   247e8:	18fb      	adds	r3, r7, r3
   247ea:	2200      	movs	r2, #0
   247ec:	701a      	strb	r2, [r3, #0]
			goto _fail_;
   247ee:	e010      	b.n	24812 <spi_cmd_rsp+0x112>
		}
	} while((rsp != 0x00) && (s8RetryCnt-- >0));
   247f0:	230d      	movs	r3, #13
   247f2:	18fb      	adds	r3, r7, r3
   247f4:	781b      	ldrb	r3, [r3, #0]
   247f6:	2b00      	cmp	r3, #0
   247f8:	d00b      	beq.n	24812 <spi_cmd_rsp+0x112>
   247fa:	230e      	movs	r3, #14
   247fc:	18fb      	adds	r3, r7, r3
   247fe:	781b      	ldrb	r3, [r3, #0]
   24800:	b25b      	sxtb	r3, r3
   24802:	b2da      	uxtb	r2, r3
   24804:	3a01      	subs	r2, #1
   24806:	b2d1      	uxtb	r1, r2
   24808:	220e      	movs	r2, #14
   2480a:	18ba      	adds	r2, r7, r2
   2480c:	7011      	strb	r1, [r2, #0]
   2480e:	2b00      	cmp	r3, #0
   24810:	dcd1      	bgt.n	247b6 <spi_cmd_rsp+0xb6>

_fail_:

	return result;
   24812:	230f      	movs	r3, #15
   24814:	18fb      	adds	r3, r7, r3
   24816:	781b      	ldrb	r3, [r3, #0]
   24818:	b25b      	sxtb	r3, r3
}
   2481a:	0018      	movs	r0, r3
   2481c:	46bd      	mov	sp, r7
   2481e:	b004      	add	sp, #16
   24820:	bd80      	pop	{r7, pc}
   24822:	46c0      	nop			; (mov r8, r8)
   24824:	00024175 	.word	0x00024175
   24828:	0003a480 	.word	0x0003a480
   2482c:	00039e78 	.word	0x00039e78
   24830:	0001ed29 	.word	0x0001ed29
   24834:	00039f0c 	.word	0x00039f0c
   24838:	00039eb8 	.word	0x00039eb8

0002483c <spi_cmd_complete>:
#ifndef USE_OLD_SPI_SW
static int spi_cmd_complete(uint8_t cmd, uint32_t adr, uint8_t *b, uint32_t sz, uint8_t clockless)
{
   2483c:	b590      	push	{r4, r7, lr}
   2483e:	b09f      	sub	sp, #124	; 0x7c
   24840:	af00      	add	r7, sp, #0
   24842:	60b9      	str	r1, [r7, #8]
   24844:	607a      	str	r2, [r7, #4]
   24846:	603b      	str	r3, [r7, #0]
   24848:	230f      	movs	r3, #15
   2484a:	18fb      	adds	r3, r7, r3
   2484c:	1c02      	adds	r2, r0, #0
   2484e:	701a      	strb	r2, [r3, #0]
	uint8_t wb[32], rb[32];
	uint8_t wix, rix;
	uint32_t len2;
	uint8_t rsp;
	int len = 0;
   24850:	2300      	movs	r3, #0
   24852:	66fb      	str	r3, [r7, #108]	; 0x6c
	int result = N_OK;
   24854:	2301      	movs	r3, #1
   24856:	66bb      	str	r3, [r7, #104]	; 0x68

	wb[0] = cmd;
   24858:	2338      	movs	r3, #56	; 0x38
   2485a:	18fb      	adds	r3, r7, r3
   2485c:	220f      	movs	r2, #15
   2485e:	18ba      	adds	r2, r7, r2
   24860:	7812      	ldrb	r2, [r2, #0]
   24862:	701a      	strb	r2, [r3, #0]
	switch (cmd) {
   24864:	230f      	movs	r3, #15
   24866:	18fb      	adds	r3, r7, r3
   24868:	781b      	ldrb	r3, [r3, #0]
   2486a:	3bc1      	subs	r3, #193	; 0xc1
   2486c:	2b0e      	cmp	r3, #14
   2486e:	d900      	bls.n	24872 <spi_cmd_complete+0x36>
   24870:	e103      	b.n	24a7a <spi_cmd_complete+0x23e>
   24872:	009a      	lsls	r2, r3, #2
   24874:	4bd1      	ldr	r3, [pc, #836]	; (24bbc <spi_cmd_complete+0x380>)
   24876:	18d3      	adds	r3, r2, r3
   24878:	681b      	ldr	r3, [r3, #0]
   2487a:	469f      	mov	pc, r3
	case CMD_SINGLE_READ:				/* single word (4 bytes) read */
		wb[1] = (uint8_t)(adr >> 16);
   2487c:	68bb      	ldr	r3, [r7, #8]
   2487e:	0c1b      	lsrs	r3, r3, #16
   24880:	b2da      	uxtb	r2, r3
   24882:	2338      	movs	r3, #56	; 0x38
   24884:	18fb      	adds	r3, r7, r3
   24886:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   24888:	68bb      	ldr	r3, [r7, #8]
   2488a:	0a1b      	lsrs	r3, r3, #8
   2488c:	b2da      	uxtb	r2, r3
   2488e:	2338      	movs	r3, #56	; 0x38
   24890:	18fb      	adds	r3, r7, r3
   24892:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   24894:	68bb      	ldr	r3, [r7, #8]
   24896:	b2da      	uxtb	r2, r3
   24898:	2338      	movs	r3, #56	; 0x38
   2489a:	18fb      	adds	r3, r7, r3
   2489c:	70da      	strb	r2, [r3, #3]
		len = 5;
   2489e:	2305      	movs	r3, #5
   248a0:	66fb      	str	r3, [r7, #108]	; 0x6c
		break; 
   248a2:	e0ed      	b.n	24a80 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_READ:			/* internal register read */ 
		wb[1] = (uint8_t)(adr >> 8);
   248a4:	68bb      	ldr	r3, [r7, #8]
   248a6:	0a1b      	lsrs	r3, r3, #8
   248a8:	b2da      	uxtb	r2, r3
   248aa:	2338      	movs	r3, #56	; 0x38
   248ac:	18fb      	adds	r3, r7, r3
   248ae:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   248b0:	2388      	movs	r3, #136	; 0x88
   248b2:	18fb      	adds	r3, r7, r3
   248b4:	781b      	ldrb	r3, [r3, #0]
   248b6:	2b01      	cmp	r3, #1
   248b8:	d109      	bne.n	248ce <spi_cmd_complete+0x92>
   248ba:	2338      	movs	r3, #56	; 0x38
   248bc:	18fb      	adds	r3, r7, r3
   248be:	785b      	ldrb	r3, [r3, #1]
   248c0:	2280      	movs	r2, #128	; 0x80
   248c2:	4252      	negs	r2, r2
   248c4:	4313      	orrs	r3, r2
   248c6:	b2da      	uxtb	r2, r3
   248c8:	2338      	movs	r3, #56	; 0x38
   248ca:	18fb      	adds	r3, r7, r3
   248cc:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)adr;
   248ce:	68bb      	ldr	r3, [r7, #8]
   248d0:	b2da      	uxtb	r2, r3
   248d2:	2338      	movs	r3, #56	; 0x38
   248d4:	18fb      	adds	r3, r7, r3
   248d6:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   248d8:	2338      	movs	r3, #56	; 0x38
   248da:	18fb      	adds	r3, r7, r3
   248dc:	2200      	movs	r2, #0
   248de:	70da      	strb	r2, [r3, #3]
		len = 5;
   248e0:	2305      	movs	r3, #5
   248e2:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   248e4:	e0cc      	b.n	24a80 <spi_cmd_complete+0x244>
	case CMD_TERMINATE:					/* termination */
		wb[1] = 0x00;
   248e6:	2338      	movs	r3, #56	; 0x38
   248e8:	18fb      	adds	r3, r7, r3
   248ea:	2200      	movs	r2, #0
   248ec:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   248ee:	2338      	movs	r3, #56	; 0x38
   248f0:	18fb      	adds	r3, r7, r3
   248f2:	2200      	movs	r2, #0
   248f4:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   248f6:	2338      	movs	r3, #56	; 0x38
   248f8:	18fb      	adds	r3, r7, r3
   248fa:	2200      	movs	r2, #0
   248fc:	70da      	strb	r2, [r3, #3]
		len = 5;
   248fe:	2305      	movs	r3, #5
   24900:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   24902:	e0bd      	b.n	24a80 <spi_cmd_complete+0x244>
	case CMD_REPEAT:						/* repeat */
		wb[1] = 0x00;
   24904:	2338      	movs	r3, #56	; 0x38
   24906:	18fb      	adds	r3, r7, r3
   24908:	2200      	movs	r2, #0
   2490a:	705a      	strb	r2, [r3, #1]
		wb[2] = 0x00;
   2490c:	2338      	movs	r3, #56	; 0x38
   2490e:	18fb      	adds	r3, r7, r3
   24910:	2200      	movs	r2, #0
   24912:	709a      	strb	r2, [r3, #2]
		wb[3] = 0x00;
   24914:	2338      	movs	r3, #56	; 0x38
   24916:	18fb      	adds	r3, r7, r3
   24918:	2200      	movs	r2, #0
   2491a:	70da      	strb	r2, [r3, #3]
		len = 5;
   2491c:	2305      	movs	r3, #5
   2491e:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   24920:	e0ae      	b.n	24a80 <spi_cmd_complete+0x244>
	case CMD_RESET:							/* reset */
		wb[1] = 0xff;
   24922:	2338      	movs	r3, #56	; 0x38
   24924:	18fb      	adds	r3, r7, r3
   24926:	22ff      	movs	r2, #255	; 0xff
   24928:	705a      	strb	r2, [r3, #1]
		wb[2] = 0xff;
   2492a:	2338      	movs	r3, #56	; 0x38
   2492c:	18fb      	adds	r3, r7, r3
   2492e:	22ff      	movs	r2, #255	; 0xff
   24930:	709a      	strb	r2, [r3, #2]
		wb[3] = 0xff;
   24932:	2338      	movs	r3, #56	; 0x38
   24934:	18fb      	adds	r3, r7, r3
   24936:	22ff      	movs	r2, #255	; 0xff
   24938:	70da      	strb	r2, [r3, #3]
		len = 5;
   2493a:	2305      	movs	r3, #5
   2493c:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   2493e:	e09f      	b.n	24a80 <spi_cmd_complete+0x244>
	case CMD_DMA_WRITE:					/* dma write */
	case CMD_DMA_READ:					/* dma read */
		wb[1] = (uint8_t)(adr >> 16);
   24940:	68bb      	ldr	r3, [r7, #8]
   24942:	0c1b      	lsrs	r3, r3, #16
   24944:	b2da      	uxtb	r2, r3
   24946:	2338      	movs	r3, #56	; 0x38
   24948:	18fb      	adds	r3, r7, r3
   2494a:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   2494c:	68bb      	ldr	r3, [r7, #8]
   2494e:	0a1b      	lsrs	r3, r3, #8
   24950:	b2da      	uxtb	r2, r3
   24952:	2338      	movs	r3, #56	; 0x38
   24954:	18fb      	adds	r3, r7, r3
   24956:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   24958:	68bb      	ldr	r3, [r7, #8]
   2495a:	b2da      	uxtb	r2, r3
   2495c:	2338      	movs	r3, #56	; 0x38
   2495e:	18fb      	adds	r3, r7, r3
   24960:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 8);
   24962:	683b      	ldr	r3, [r7, #0]
   24964:	0a1b      	lsrs	r3, r3, #8
   24966:	b2da      	uxtb	r2, r3
   24968:	2338      	movs	r3, #56	; 0x38
   2496a:	18fb      	adds	r3, r7, r3
   2496c:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz);
   2496e:	683b      	ldr	r3, [r7, #0]
   24970:	b2da      	uxtb	r2, r3
   24972:	2338      	movs	r3, #56	; 0x38
   24974:	18fb      	adds	r3, r7, r3
   24976:	715a      	strb	r2, [r3, #5]
		len = 7;
   24978:	2307      	movs	r3, #7
   2497a:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   2497c:	e080      	b.n	24a80 <spi_cmd_complete+0x244>
	case CMD_DMA_EXT_WRITE:		/* dma extended write */
	case CMD_DMA_EXT_READ:			/* dma extended read */
		wb[1] = (uint8_t)(adr >> 16);
   2497e:	68bb      	ldr	r3, [r7, #8]
   24980:	0c1b      	lsrs	r3, r3, #16
   24982:	b2da      	uxtb	r2, r3
   24984:	2338      	movs	r3, #56	; 0x38
   24986:	18fb      	adds	r3, r7, r3
   24988:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   2498a:	68bb      	ldr	r3, [r7, #8]
   2498c:	0a1b      	lsrs	r3, r3, #8
   2498e:	b2da      	uxtb	r2, r3
   24990:	2338      	movs	r3, #56	; 0x38
   24992:	18fb      	adds	r3, r7, r3
   24994:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)adr;
   24996:	68bb      	ldr	r3, [r7, #8]
   24998:	b2da      	uxtb	r2, r3
   2499a:	2338      	movs	r3, #56	; 0x38
   2499c:	18fb      	adds	r3, r7, r3
   2499e:	70da      	strb	r2, [r3, #3]
		wb[4] = (uint8_t)(sz >> 16);
   249a0:	683b      	ldr	r3, [r7, #0]
   249a2:	0c1b      	lsrs	r3, r3, #16
   249a4:	b2da      	uxtb	r2, r3
   249a6:	2338      	movs	r3, #56	; 0x38
   249a8:	18fb      	adds	r3, r7, r3
   249aa:	711a      	strb	r2, [r3, #4]
		wb[5] = (uint8_t)(sz >> 8);
   249ac:	683b      	ldr	r3, [r7, #0]
   249ae:	0a1b      	lsrs	r3, r3, #8
   249b0:	b2da      	uxtb	r2, r3
   249b2:	2338      	movs	r3, #56	; 0x38
   249b4:	18fb      	adds	r3, r7, r3
   249b6:	715a      	strb	r2, [r3, #5]
		wb[6] = (uint8_t)(sz);
   249b8:	683b      	ldr	r3, [r7, #0]
   249ba:	b2da      	uxtb	r2, r3
   249bc:	2338      	movs	r3, #56	; 0x38
   249be:	18fb      	adds	r3, r7, r3
   249c0:	719a      	strb	r2, [r3, #6]
		len = 8;
   249c2:	2308      	movs	r3, #8
   249c4:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   249c6:	e05b      	b.n	24a80 <spi_cmd_complete+0x244>
	case CMD_INTERNAL_WRITE:		/* internal register write */
		wb[1] = (uint8_t)(adr >> 8);
   249c8:	68bb      	ldr	r3, [r7, #8]
   249ca:	0a1b      	lsrs	r3, r3, #8
   249cc:	b2da      	uxtb	r2, r3
   249ce:	2338      	movs	r3, #56	; 0x38
   249d0:	18fb      	adds	r3, r7, r3
   249d2:	705a      	strb	r2, [r3, #1]
		if(clockless == 1)  wb[1] |= (1 << 7);
   249d4:	2388      	movs	r3, #136	; 0x88
   249d6:	18fb      	adds	r3, r7, r3
   249d8:	781b      	ldrb	r3, [r3, #0]
   249da:	2b01      	cmp	r3, #1
   249dc:	d109      	bne.n	249f2 <spi_cmd_complete+0x1b6>
   249de:	2338      	movs	r3, #56	; 0x38
   249e0:	18fb      	adds	r3, r7, r3
   249e2:	785b      	ldrb	r3, [r3, #1]
   249e4:	2280      	movs	r2, #128	; 0x80
   249e6:	4252      	negs	r2, r2
   249e8:	4313      	orrs	r3, r2
   249ea:	b2da      	uxtb	r2, r3
   249ec:	2338      	movs	r3, #56	; 0x38
   249ee:	18fb      	adds	r3, r7, r3
   249f0:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr);
   249f2:	68bb      	ldr	r3, [r7, #8]
   249f4:	b2da      	uxtb	r2, r3
   249f6:	2338      	movs	r3, #56	; 0x38
   249f8:	18fb      	adds	r3, r7, r3
   249fa:	709a      	strb	r2, [r3, #2]
		wb[3] = b[3];
   249fc:	687b      	ldr	r3, [r7, #4]
   249fe:	78da      	ldrb	r2, [r3, #3]
   24a00:	2338      	movs	r3, #56	; 0x38
   24a02:	18fb      	adds	r3, r7, r3
   24a04:	70da      	strb	r2, [r3, #3]
		wb[4] = b[2];
   24a06:	687b      	ldr	r3, [r7, #4]
   24a08:	789a      	ldrb	r2, [r3, #2]
   24a0a:	2338      	movs	r3, #56	; 0x38
   24a0c:	18fb      	adds	r3, r7, r3
   24a0e:	711a      	strb	r2, [r3, #4]
		wb[5] = b[1];
   24a10:	687b      	ldr	r3, [r7, #4]
   24a12:	785a      	ldrb	r2, [r3, #1]
   24a14:	2338      	movs	r3, #56	; 0x38
   24a16:	18fb      	adds	r3, r7, r3
   24a18:	715a      	strb	r2, [r3, #5]
		wb[6] = b[0];
   24a1a:	687b      	ldr	r3, [r7, #4]
   24a1c:	781a      	ldrb	r2, [r3, #0]
   24a1e:	2338      	movs	r3, #56	; 0x38
   24a20:	18fb      	adds	r3, r7, r3
   24a22:	719a      	strb	r2, [r3, #6]
		len = 8;
   24a24:	2308      	movs	r3, #8
   24a26:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   24a28:	e02a      	b.n	24a80 <spi_cmd_complete+0x244>
	case CMD_SINGLE_WRITE:			/* single word write */
		wb[1] = (uint8_t)(adr >> 16);
   24a2a:	68bb      	ldr	r3, [r7, #8]
   24a2c:	0c1b      	lsrs	r3, r3, #16
   24a2e:	b2da      	uxtb	r2, r3
   24a30:	2338      	movs	r3, #56	; 0x38
   24a32:	18fb      	adds	r3, r7, r3
   24a34:	705a      	strb	r2, [r3, #1]
		wb[2] = (uint8_t)(adr >> 8);
   24a36:	68bb      	ldr	r3, [r7, #8]
   24a38:	0a1b      	lsrs	r3, r3, #8
   24a3a:	b2da      	uxtb	r2, r3
   24a3c:	2338      	movs	r3, #56	; 0x38
   24a3e:	18fb      	adds	r3, r7, r3
   24a40:	709a      	strb	r2, [r3, #2]
		wb[3] = (uint8_t)(adr);
   24a42:	68bb      	ldr	r3, [r7, #8]
   24a44:	b2da      	uxtb	r2, r3
   24a46:	2338      	movs	r3, #56	; 0x38
   24a48:	18fb      	adds	r3, r7, r3
   24a4a:	70da      	strb	r2, [r3, #3]
		wb[4] = b[3];
   24a4c:	687b      	ldr	r3, [r7, #4]
   24a4e:	78da      	ldrb	r2, [r3, #3]
   24a50:	2338      	movs	r3, #56	; 0x38
   24a52:	18fb      	adds	r3, r7, r3
   24a54:	711a      	strb	r2, [r3, #4]
		wb[5] = b[2];
   24a56:	687b      	ldr	r3, [r7, #4]
   24a58:	789a      	ldrb	r2, [r3, #2]
   24a5a:	2338      	movs	r3, #56	; 0x38
   24a5c:	18fb      	adds	r3, r7, r3
   24a5e:	715a      	strb	r2, [r3, #5]
		wb[6] = b[1];
   24a60:	687b      	ldr	r3, [r7, #4]
   24a62:	785a      	ldrb	r2, [r3, #1]
   24a64:	2338      	movs	r3, #56	; 0x38
   24a66:	18fb      	adds	r3, r7, r3
   24a68:	719a      	strb	r2, [r3, #6]
		wb[7] = b[0];
   24a6a:	687b      	ldr	r3, [r7, #4]
   24a6c:	781a      	ldrb	r2, [r3, #0]
   24a6e:	2338      	movs	r3, #56	; 0x38
   24a70:	18fb      	adds	r3, r7, r3
   24a72:	71da      	strb	r2, [r3, #7]
		len = 9;
   24a74:	2309      	movs	r3, #9
   24a76:	66fb      	str	r3, [r7, #108]	; 0x6c
		break;
   24a78:	e002      	b.n	24a80 <spi_cmd_complete+0x244>
	default:
		result = N_FAIL;
   24a7a:	2300      	movs	r3, #0
   24a7c:	66bb      	str	r3, [r7, #104]	; 0x68
		break;
   24a7e:	46c0      	nop			; (mov r8, r8)
	}

	if (result != N_OK) {
   24a80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24a82:	2b01      	cmp	r3, #1
   24a84:	d001      	beq.n	24a8a <spi_cmd_complete+0x24e>
		return result;
   24a86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24a88:	e33a      	b.n	25100 <spi_cmd_complete+0x8c4>
	}

	if (!gu8Crc_off) {
   24a8a:	4b4d      	ldr	r3, [pc, #308]	; (24bc0 <spi_cmd_complete+0x384>)
   24a8c:	781b      	ldrb	r3, [r3, #0]
   24a8e:	2b00      	cmp	r3, #0
   24a90:	d111      	bne.n	24ab6 <spi_cmd_complete+0x27a>
		wb[len-1] = (crc7(0x7f, (const uint8_t *)&wb[0], len-1)) << 1;
   24a92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   24a94:	1e5c      	subs	r4, r3, #1
   24a96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   24a98:	3b01      	subs	r3, #1
   24a9a:	001a      	movs	r2, r3
   24a9c:	2338      	movs	r3, #56	; 0x38
   24a9e:	18fb      	adds	r3, r7, r3
   24aa0:	0019      	movs	r1, r3
   24aa2:	207f      	movs	r0, #127	; 0x7f
   24aa4:	4b47      	ldr	r3, [pc, #284]	; (24bc4 <spi_cmd_complete+0x388>)
   24aa6:	4798      	blx	r3
   24aa8:	0003      	movs	r3, r0
   24aaa:	18db      	adds	r3, r3, r3
   24aac:	b2da      	uxtb	r2, r3
   24aae:	2338      	movs	r3, #56	; 0x38
   24ab0:	18fb      	adds	r3, r7, r3
   24ab2:	551a      	strb	r2, [r3, r4]
   24ab4:	e002      	b.n	24abc <spi_cmd_complete+0x280>
	} else {
		len -=1;
   24ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   24ab8:	3b01      	subs	r3, #1
   24aba:	66fb      	str	r3, [r7, #108]	; 0x6c
#define NUM_DATA_HDR_BYTES (1)
#define NUM_DATA_BYTES (4)
#define NUM_CRC_BYTES (2)
#define NUM_DUMMY_BYTES (3)

	if ((cmd == CMD_RESET) ||
   24abc:	230f      	movs	r3, #15
   24abe:	18fb      	adds	r3, r7, r3
   24ac0:	781b      	ldrb	r3, [r3, #0]
   24ac2:	2bcf      	cmp	r3, #207	; 0xcf
   24ac4:	d009      	beq.n	24ada <spi_cmd_complete+0x29e>
   24ac6:	230f      	movs	r3, #15
   24ac8:	18fb      	adds	r3, r7, r3
   24aca:	781b      	ldrb	r3, [r3, #0]
   24acc:	2bc5      	cmp	r3, #197	; 0xc5
   24ace:	d004      	beq.n	24ada <spi_cmd_complete+0x29e>
		(cmd == CMD_TERMINATE) ||
   24ad0:	230f      	movs	r3, #15
   24ad2:	18fb      	adds	r3, r7, r3
   24ad4:	781b      	ldrb	r3, [r3, #0]
   24ad6:	2bc6      	cmp	r3, #198	; 0xc6
   24ad8:	d103      	bne.n	24ae2 <spi_cmd_complete+0x2a6>
		(cmd == CMD_REPEAT)) {
			len2 = len + (NUM_SKIP_BYTES + NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   24ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   24adc:	3306      	adds	r3, #6
   24ade:	673b      	str	r3, [r7, #112]	; 0x70
   24ae0:	e018      	b.n	24b14 <spi_cmd_complete+0x2d8>
	} else if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   24ae2:	230f      	movs	r3, #15
   24ae4:	18fb      	adds	r3, r7, r3
   24ae6:	781b      	ldrb	r3, [r3, #0]
   24ae8:	2bc4      	cmp	r3, #196	; 0xc4
   24aea:	d004      	beq.n	24af6 <spi_cmd_complete+0x2ba>
   24aec:	230f      	movs	r3, #15
   24aee:	18fb      	adds	r3, r7, r3
   24af0:	781b      	ldrb	r3, [r3, #0]
   24af2:	2bca      	cmp	r3, #202	; 0xca
   24af4:	d10b      	bne.n	24b0e <spi_cmd_complete+0x2d2>
		if (!gu8Crc_off) {
   24af6:	4b32      	ldr	r3, [pc, #200]	; (24bc0 <spi_cmd_complete+0x384>)
   24af8:	781b      	ldrb	r3, [r3, #0]
   24afa:	2b00      	cmp	r3, #0
   24afc:	d103      	bne.n	24b06 <spi_cmd_complete+0x2ca>
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   24afe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   24b00:	330c      	adds	r3, #12
   24b02:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   24b04:	e006      	b.n	24b14 <spi_cmd_complete+0x2d8>
			+ NUM_CRC_BYTES + NUM_DUMMY_BYTES);	
		} else {
			len2 = len + (NUM_RSP_BYTES + NUM_DATA_HDR_BYTES + NUM_DATA_BYTES 
   24b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   24b08:	330a      	adds	r3, #10
   24b0a:	673b      	str	r3, [r7, #112]	; 0x70
		if (!gu8Crc_off) {
   24b0c:	e002      	b.n	24b14 <spi_cmd_complete+0x2d8>
			+ NUM_DUMMY_BYTES);
		}
	} else {
		len2 = len + (NUM_RSP_BYTES + NUM_DUMMY_BYTES);
   24b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   24b10:	3305      	adds	r3, #5
   24b12:	673b      	str	r3, [r7, #112]	; 0x70
	}
#undef NUM_DUMMY_BYTES

	if(len2 > (sizeof(wb)/sizeof(wb[0]))) {
   24b14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24b16:	2b20      	cmp	r3, #32
   24b18:	d914      	bls.n	24b44 <spi_cmd_complete+0x308>
		M2M_ERR("[nmi spi]: spi buffer size too small (%d) (%d)\n",
   24b1a:	23f7      	movs	r3, #247	; 0xf7
   24b1c:	005a      	lsls	r2, r3, #1
   24b1e:	492a      	ldr	r1, [pc, #168]	; (24bc8 <spi_cmd_complete+0x38c>)
   24b20:	4b2a      	ldr	r3, [pc, #168]	; (24bcc <spi_cmd_complete+0x390>)
   24b22:	0018      	movs	r0, r3
   24b24:	4b2a      	ldr	r3, [pc, #168]	; (24bd0 <spi_cmd_complete+0x394>)
   24b26:	4798      	blx	r3
   24b28:	6f39      	ldr	r1, [r7, #112]	; 0x70
   24b2a:	4b2a      	ldr	r3, [pc, #168]	; (24bd4 <spi_cmd_complete+0x398>)
   24b2c:	2220      	movs	r2, #32
   24b2e:	0018      	movs	r0, r3
   24b30:	4b27      	ldr	r3, [pc, #156]	; (24bd0 <spi_cmd_complete+0x394>)
   24b32:	4798      	blx	r3
   24b34:	4b28      	ldr	r3, [pc, #160]	; (24bd8 <spi_cmd_complete+0x39c>)
   24b36:	0018      	movs	r0, r3
   24b38:	4b25      	ldr	r3, [pc, #148]	; (24bd0 <spi_cmd_complete+0x394>)
   24b3a:	4798      	blx	r3
			len2, (sizeof(wb)/sizeof(wb[0])));
		result = N_FAIL;
   24b3c:	2300      	movs	r3, #0
   24b3e:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   24b40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24b42:	e2dd      	b.n	25100 <spi_cmd_complete+0x8c4>
	}
	/* zero spi write buffers. */
	for(wix = len; wix< len2; wix++) {
   24b44:	2377      	movs	r3, #119	; 0x77
   24b46:	18fb      	adds	r3, r7, r3
   24b48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   24b4a:	701a      	strb	r2, [r3, #0]
   24b4c:	e00d      	b.n	24b6a <spi_cmd_complete+0x32e>
		wb[wix] = 0;
   24b4e:	2377      	movs	r3, #119	; 0x77
   24b50:	18fb      	adds	r3, r7, r3
   24b52:	781b      	ldrb	r3, [r3, #0]
   24b54:	2238      	movs	r2, #56	; 0x38
   24b56:	18ba      	adds	r2, r7, r2
   24b58:	2100      	movs	r1, #0
   24b5a:	54d1      	strb	r1, [r2, r3]
	for(wix = len; wix< len2; wix++) {
   24b5c:	2377      	movs	r3, #119	; 0x77
   24b5e:	18fb      	adds	r3, r7, r3
   24b60:	781a      	ldrb	r2, [r3, #0]
   24b62:	2377      	movs	r3, #119	; 0x77
   24b64:	18fb      	adds	r3, r7, r3
   24b66:	3201      	adds	r2, #1
   24b68:	701a      	strb	r2, [r3, #0]
   24b6a:	2377      	movs	r3, #119	; 0x77
   24b6c:	18fb      	adds	r3, r7, r3
   24b6e:	781a      	ldrb	r2, [r3, #0]
   24b70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24b72:	429a      	cmp	r2, r3
   24b74:	d3eb      	bcc.n	24b4e <spi_cmd_complete+0x312>
	}
	rix = len;
   24b76:	2376      	movs	r3, #118	; 0x76
   24b78:	18fb      	adds	r3, r7, r3
   24b7a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   24b7c:	701a      	strb	r2, [r3, #0]

	if (nmi_spi_rw(wb, rb, len2) != M2M_SUCCESS) {
   24b7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24b80:	b29a      	uxth	r2, r3
   24b82:	2318      	movs	r3, #24
   24b84:	18f9      	adds	r1, r7, r3
   24b86:	2338      	movs	r3, #56	; 0x38
   24b88:	18fb      	adds	r3, r7, r3
   24b8a:	0018      	movs	r0, r3
   24b8c:	4b13      	ldr	r3, [pc, #76]	; (24bdc <spi_cmd_complete+0x3a0>)
   24b8e:	4798      	blx	r3
   24b90:	1e03      	subs	r3, r0, #0
   24b92:	d027      	beq.n	24be4 <spi_cmd_complete+0x3a8>
		M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
   24b94:	23fa      	movs	r3, #250	; 0xfa
   24b96:	33ff      	adds	r3, #255	; 0xff
   24b98:	001a      	movs	r2, r3
   24b9a:	490b      	ldr	r1, [pc, #44]	; (24bc8 <spi_cmd_complete+0x38c>)
   24b9c:	4b0b      	ldr	r3, [pc, #44]	; (24bcc <spi_cmd_complete+0x390>)
   24b9e:	0018      	movs	r0, r3
   24ba0:	4b0b      	ldr	r3, [pc, #44]	; (24bd0 <spi_cmd_complete+0x394>)
   24ba2:	4798      	blx	r3
   24ba4:	4b0e      	ldr	r3, [pc, #56]	; (24be0 <spi_cmd_complete+0x3a4>)
   24ba6:	0018      	movs	r0, r3
   24ba8:	4b09      	ldr	r3, [pc, #36]	; (24bd0 <spi_cmd_complete+0x394>)
   24baa:	4798      	blx	r3
   24bac:	4b0a      	ldr	r3, [pc, #40]	; (24bd8 <spi_cmd_complete+0x39c>)
   24bae:	0018      	movs	r0, r3
   24bb0:	4b07      	ldr	r3, [pc, #28]	; (24bd0 <spi_cmd_complete+0x394>)
   24bb2:	4798      	blx	r3
		result = N_FAIL;
   24bb4:	2300      	movs	r3, #0
   24bb6:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   24bb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24bba:	e2a1      	b.n	25100 <spi_cmd_complete+0x8c4>
   24bbc:	0003a42c 	.word	0x0003a42c
   24bc0:	200042b0 	.word	0x200042b0
   24bc4:	00024271 	.word	0x00024271
   24bc8:	0003a48c 	.word	0x0003a48c
   24bcc:	00039e78 	.word	0x00039e78
   24bd0:	0001ed29 	.word	0x0001ed29
   24bd4:	00039f40 	.word	0x00039f40
   24bd8:	00039eb8 	.word	0x00039eb8
   24bdc:	000241fd 	.word	0x000241fd
   24be0:	00039e8c 	.word	0x00039e8c
#endif

	/**
	Command/Control response
	**/
	if ((cmd == CMD_RESET) ||
   24be4:	230f      	movs	r3, #15
   24be6:	18fb      	adds	r3, r7, r3
   24be8:	781b      	ldrb	r3, [r3, #0]
   24bea:	2bcf      	cmp	r3, #207	; 0xcf
   24bec:	d009      	beq.n	24c02 <spi_cmd_complete+0x3c6>
   24bee:	230f      	movs	r3, #15
   24bf0:	18fb      	adds	r3, r7, r3
   24bf2:	781b      	ldrb	r3, [r3, #0]
   24bf4:	2bc5      	cmp	r3, #197	; 0xc5
   24bf6:	d004      	beq.n	24c02 <spi_cmd_complete+0x3c6>
		(cmd == CMD_TERMINATE) ||
   24bf8:	230f      	movs	r3, #15
   24bfa:	18fb      	adds	r3, r7, r3
   24bfc:	781b      	ldrb	r3, [r3, #0]
   24bfe:	2bc6      	cmp	r3, #198	; 0xc6
   24c00:	d106      	bne.n	24c10 <spi_cmd_complete+0x3d4>
		(cmd == CMD_REPEAT)) {
			rix++; /* skip 1 byte */
   24c02:	2376      	movs	r3, #118	; 0x76
   24c04:	18fb      	adds	r3, r7, r3
   24c06:	781a      	ldrb	r2, [r3, #0]
   24c08:	2376      	movs	r3, #118	; 0x76
   24c0a:	18fb      	adds	r3, r7, r3
   24c0c:	3201      	adds	r2, #1
   24c0e:	701a      	strb	r2, [r3, #0]
	}

	rsp = rb[rix++];
   24c10:	2376      	movs	r3, #118	; 0x76
   24c12:	18fb      	adds	r3, r7, r3
   24c14:	781b      	ldrb	r3, [r3, #0]
   24c16:	2276      	movs	r2, #118	; 0x76
   24c18:	18ba      	adds	r2, r7, r2
   24c1a:	1c59      	adds	r1, r3, #1
   24c1c:	7011      	strb	r1, [r2, #0]
   24c1e:	001a      	movs	r2, r3
   24c20:	2318      	movs	r3, #24
   24c22:	18fb      	adds	r3, r7, r3
   24c24:	5c9a      	ldrb	r2, [r3, r2]
   24c26:	2317      	movs	r3, #23
   24c28:	18fb      	adds	r3, r7, r3
   24c2a:	701a      	strb	r2, [r3, #0]


	if (rsp != cmd) {
   24c2c:	2317      	movs	r3, #23
   24c2e:	18fb      	adds	r3, r7, r3
   24c30:	781b      	ldrb	r3, [r3, #0]
   24c32:	220f      	movs	r2, #15
   24c34:	18ba      	adds	r2, r7, r2
   24c36:	7812      	ldrb	r2, [r2, #0]
   24c38:	429a      	cmp	r2, r3
   24c3a:	d018      	beq.n	24c6e <spi_cmd_complete+0x432>
		M2M_ERR("[nmi spi]: Failed cmd response, cmd (%02x), resp (%02x)\n", cmd, rsp);
   24c3c:	4add      	ldr	r2, [pc, #884]	; (24fb4 <spi_cmd_complete+0x778>)
   24c3e:	49de      	ldr	r1, [pc, #888]	; (24fb8 <spi_cmd_complete+0x77c>)
   24c40:	4bde      	ldr	r3, [pc, #888]	; (24fbc <spi_cmd_complete+0x780>)
   24c42:	0018      	movs	r0, r3
   24c44:	4bde      	ldr	r3, [pc, #888]	; (24fc0 <spi_cmd_complete+0x784>)
   24c46:	4798      	blx	r3
   24c48:	230f      	movs	r3, #15
   24c4a:	18fb      	adds	r3, r7, r3
   24c4c:	7819      	ldrb	r1, [r3, #0]
   24c4e:	2317      	movs	r3, #23
   24c50:	18fb      	adds	r3, r7, r3
   24c52:	781b      	ldrb	r3, [r3, #0]
   24c54:	001a      	movs	r2, r3
   24c56:	4bdb      	ldr	r3, [pc, #876]	; (24fc4 <spi_cmd_complete+0x788>)
   24c58:	0018      	movs	r0, r3
   24c5a:	4bd9      	ldr	r3, [pc, #868]	; (24fc0 <spi_cmd_complete+0x784>)
   24c5c:	4798      	blx	r3
   24c5e:	4bda      	ldr	r3, [pc, #872]	; (24fc8 <spi_cmd_complete+0x78c>)
   24c60:	0018      	movs	r0, r3
   24c62:	4bd7      	ldr	r3, [pc, #860]	; (24fc0 <spi_cmd_complete+0x784>)
   24c64:	4798      	blx	r3
		result = N_FAIL;
   24c66:	2300      	movs	r3, #0
   24c68:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   24c6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24c6c:	e248      	b.n	25100 <spi_cmd_complete+0x8c4>
	}

	/**
	State response
	**/
	rsp = rb[rix++];
   24c6e:	2376      	movs	r3, #118	; 0x76
   24c70:	18fb      	adds	r3, r7, r3
   24c72:	781b      	ldrb	r3, [r3, #0]
   24c74:	2276      	movs	r2, #118	; 0x76
   24c76:	18ba      	adds	r2, r7, r2
   24c78:	1c59      	adds	r1, r3, #1
   24c7a:	7011      	strb	r1, [r2, #0]
   24c7c:	001a      	movs	r2, r3
   24c7e:	2318      	movs	r3, #24
   24c80:	18fb      	adds	r3, r7, r3
   24c82:	5c9a      	ldrb	r2, [r3, r2]
   24c84:	2317      	movs	r3, #23
   24c86:	18fb      	adds	r3, r7, r3
   24c88:	701a      	strb	r2, [r3, #0]
	if (rsp != 0x00) {
   24c8a:	2317      	movs	r3, #23
   24c8c:	18fb      	adds	r3, r7, r3
   24c8e:	781b      	ldrb	r3, [r3, #0]
   24c90:	2b00      	cmp	r3, #0
   24c92:	d016      	beq.n	24cc2 <spi_cmd_complete+0x486>
		M2M_ERR("[nmi spi]: Failed cmd state response state (%02x)\n", rsp);
   24c94:	4acd      	ldr	r2, [pc, #820]	; (24fcc <spi_cmd_complete+0x790>)
   24c96:	49c8      	ldr	r1, [pc, #800]	; (24fb8 <spi_cmd_complete+0x77c>)
   24c98:	4bc8      	ldr	r3, [pc, #800]	; (24fbc <spi_cmd_complete+0x780>)
   24c9a:	0018      	movs	r0, r3
   24c9c:	4bc8      	ldr	r3, [pc, #800]	; (24fc0 <spi_cmd_complete+0x784>)
   24c9e:	4798      	blx	r3
   24ca0:	2317      	movs	r3, #23
   24ca2:	18fb      	adds	r3, r7, r3
   24ca4:	781b      	ldrb	r3, [r3, #0]
   24ca6:	001a      	movs	r2, r3
   24ca8:	4bc9      	ldr	r3, [pc, #804]	; (24fd0 <spi_cmd_complete+0x794>)
   24caa:	0011      	movs	r1, r2
   24cac:	0018      	movs	r0, r3
   24cae:	4bc4      	ldr	r3, [pc, #784]	; (24fc0 <spi_cmd_complete+0x784>)
   24cb0:	4798      	blx	r3
   24cb2:	4bc5      	ldr	r3, [pc, #788]	; (24fc8 <spi_cmd_complete+0x78c>)
   24cb4:	0018      	movs	r0, r3
   24cb6:	4bc2      	ldr	r3, [pc, #776]	; (24fc0 <spi_cmd_complete+0x784>)
   24cb8:	4798      	blx	r3
		result = N_FAIL;
   24cba:	2300      	movs	r3, #0
   24cbc:	66bb      	str	r3, [r7, #104]	; 0x68
		return result;
   24cbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24cc0:	e21e      	b.n	25100 <spi_cmd_complete+0x8c4>
	}

	if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)
   24cc2:	230f      	movs	r3, #15
   24cc4:	18fb      	adds	r3, r7, r3
   24cc6:	781b      	ldrb	r3, [r3, #0]
   24cc8:	2bc4      	cmp	r3, #196	; 0xc4
   24cca:	d00f      	beq.n	24cec <spi_cmd_complete+0x4b0>
   24ccc:	230f      	movs	r3, #15
   24cce:	18fb      	adds	r3, r7, r3
   24cd0:	781b      	ldrb	r3, [r3, #0]
   24cd2:	2bca      	cmp	r3, #202	; 0xca
   24cd4:	d00a      	beq.n	24cec <spi_cmd_complete+0x4b0>
		|| (cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   24cd6:	230f      	movs	r3, #15
   24cd8:	18fb      	adds	r3, r7, r3
   24cda:	781b      	ldrb	r3, [r3, #0]
   24cdc:	2bc2      	cmp	r3, #194	; 0xc2
   24cde:	d005      	beq.n	24cec <spi_cmd_complete+0x4b0>
   24ce0:	230f      	movs	r3, #15
   24ce2:	18fb      	adds	r3, r7, r3
   24ce4:	781b      	ldrb	r3, [r3, #0]
   24ce6:	2bc8      	cmp	r3, #200	; 0xc8
   24ce8:	d000      	beq.n	24cec <spi_cmd_complete+0x4b0>
   24cea:	e208      	b.n	250fe <spi_cmd_complete+0x8c2>
			//uint16_t crc1, crc2;
			uint8_t crc[2];
			/**
			Data Respnose header
			**/
			retry = SPI_RESP_RETRY_COUNT;
   24cec:	230a      	movs	r3, #10
   24cee:	667b      	str	r3, [r7, #100]	; 0x64
			do {
				/* ensure there is room in buffer later to read data and crc */
				if(rix < len2) { 
   24cf0:	2376      	movs	r3, #118	; 0x76
   24cf2:	18fb      	adds	r3, r7, r3
   24cf4:	781a      	ldrb	r2, [r3, #0]
   24cf6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24cf8:	429a      	cmp	r2, r3
   24cfa:	d218      	bcs.n	24d2e <spi_cmd_complete+0x4f2>
					rsp = rb[rix++];
   24cfc:	2376      	movs	r3, #118	; 0x76
   24cfe:	18fb      	adds	r3, r7, r3
   24d00:	781b      	ldrb	r3, [r3, #0]
   24d02:	2276      	movs	r2, #118	; 0x76
   24d04:	18ba      	adds	r2, r7, r2
   24d06:	1c59      	adds	r1, r3, #1
   24d08:	7011      	strb	r1, [r2, #0]
   24d0a:	001a      	movs	r2, r3
   24d0c:	2318      	movs	r3, #24
   24d0e:	18fb      	adds	r3, r7, r3
   24d10:	5c9a      	ldrb	r2, [r3, r2]
   24d12:	2317      	movs	r3, #23
   24d14:	18fb      	adds	r3, r7, r3
   24d16:	701a      	strb	r2, [r3, #0]
				} else {
					retry = 0;
					break;
				}
				if (((rsp >> 4) & 0xf) == 0xf)
   24d18:	2317      	movs	r3, #23
   24d1a:	18fb      	adds	r3, r7, r3
   24d1c:	781b      	ldrb	r3, [r3, #0]
   24d1e:	091b      	lsrs	r3, r3, #4
   24d20:	b2db      	uxtb	r3, r3
   24d22:	001a      	movs	r2, r3
   24d24:	230f      	movs	r3, #15
   24d26:	4013      	ands	r3, r2
   24d28:	2b0f      	cmp	r3, #15
   24d2a:	d103      	bne.n	24d34 <spi_cmd_complete+0x4f8>
					break;
   24d2c:	e007      	b.n	24d3e <spi_cmd_complete+0x502>
					retry = 0;
   24d2e:	2300      	movs	r3, #0
   24d30:	667b      	str	r3, [r7, #100]	; 0x64
					break;
   24d32:	e004      	b.n	24d3e <spi_cmd_complete+0x502>
			} while (retry--);
   24d34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   24d36:	1e5a      	subs	r2, r3, #1
   24d38:	667a      	str	r2, [r7, #100]	; 0x64
   24d3a:	2b00      	cmp	r3, #0
   24d3c:	d1d8      	bne.n	24cf0 <spi_cmd_complete+0x4b4>

			if (retry <= 0) {
   24d3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   24d40:	2b00      	cmp	r3, #0
   24d42:	dc18      	bgt.n	24d76 <spi_cmd_complete+0x53a>
				M2M_ERR("[nmi spi]: Error, data read response (%02x)\n", rsp);
   24d44:	2395      	movs	r3, #149	; 0x95
   24d46:	009a      	lsls	r2, r3, #2
   24d48:	499b      	ldr	r1, [pc, #620]	; (24fb8 <spi_cmd_complete+0x77c>)
   24d4a:	4b9c      	ldr	r3, [pc, #624]	; (24fbc <spi_cmd_complete+0x780>)
   24d4c:	0018      	movs	r0, r3
   24d4e:	4b9c      	ldr	r3, [pc, #624]	; (24fc0 <spi_cmd_complete+0x784>)
   24d50:	4798      	blx	r3
   24d52:	2317      	movs	r3, #23
   24d54:	18fb      	adds	r3, r7, r3
   24d56:	781b      	ldrb	r3, [r3, #0]
   24d58:	001a      	movs	r2, r3
   24d5a:	4b9e      	ldr	r3, [pc, #632]	; (24fd4 <spi_cmd_complete+0x798>)
   24d5c:	0011      	movs	r1, r2
   24d5e:	0018      	movs	r0, r3
   24d60:	4b97      	ldr	r3, [pc, #604]	; (24fc0 <spi_cmd_complete+0x784>)
   24d62:	4798      	blx	r3
   24d64:	4b98      	ldr	r3, [pc, #608]	; (24fc8 <spi_cmd_complete+0x78c>)
   24d66:	0018      	movs	r0, r3
   24d68:	4b95      	ldr	r3, [pc, #596]	; (24fc0 <spi_cmd_complete+0x784>)
   24d6a:	4798      	blx	r3
				result = N_RESET;
   24d6c:	2301      	movs	r3, #1
   24d6e:	425b      	negs	r3, r3
   24d70:	66bb      	str	r3, [r7, #104]	; 0x68
				return result;
   24d72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24d74:	e1c4      	b.n	25100 <spi_cmd_complete+0x8c4>
			}

			if ((cmd == CMD_INTERNAL_READ) || (cmd == CMD_SINGLE_READ)) {
   24d76:	230f      	movs	r3, #15
   24d78:	18fb      	adds	r3, r7, r3
   24d7a:	781b      	ldrb	r3, [r3, #0]
   24d7c:	2bc4      	cmp	r3, #196	; 0xc4
   24d7e:	d005      	beq.n	24d8c <spi_cmd_complete+0x550>
   24d80:	230f      	movs	r3, #15
   24d82:	18fb      	adds	r3, r7, r3
   24d84:	781b      	ldrb	r3, [r3, #0]
   24d86:	2bca      	cmp	r3, #202	; 0xca
   24d88:	d000      	beq.n	24d8c <spi_cmd_complete+0x550>
   24d8a:	e08e      	b.n	24eaa <spi_cmd_complete+0x66e>
				/**
				Read bytes
				**/
				if((rix+3) < len2) { 
   24d8c:	2376      	movs	r3, #118	; 0x76
   24d8e:	18fb      	adds	r3, r7, r3
   24d90:	781b      	ldrb	r3, [r3, #0]
   24d92:	3303      	adds	r3, #3
   24d94:	001a      	movs	r2, r3
   24d96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24d98:	429a      	cmp	r2, r3
   24d9a:	d23c      	bcs.n	24e16 <spi_cmd_complete+0x5da>
					b[0] = rb[rix++];
   24d9c:	2376      	movs	r3, #118	; 0x76
   24d9e:	18fb      	adds	r3, r7, r3
   24da0:	781b      	ldrb	r3, [r3, #0]
   24da2:	2276      	movs	r2, #118	; 0x76
   24da4:	18ba      	adds	r2, r7, r2
   24da6:	1c59      	adds	r1, r3, #1
   24da8:	7011      	strb	r1, [r2, #0]
   24daa:	001a      	movs	r2, r3
   24dac:	2318      	movs	r3, #24
   24dae:	18fb      	adds	r3, r7, r3
   24db0:	5c9a      	ldrb	r2, [r3, r2]
   24db2:	687b      	ldr	r3, [r7, #4]
   24db4:	701a      	strb	r2, [r3, #0]
					b[1] = rb[rix++];
   24db6:	687b      	ldr	r3, [r7, #4]
   24db8:	1c5a      	adds	r2, r3, #1
   24dba:	2376      	movs	r3, #118	; 0x76
   24dbc:	18fb      	adds	r3, r7, r3
   24dbe:	781b      	ldrb	r3, [r3, #0]
   24dc0:	2176      	movs	r1, #118	; 0x76
   24dc2:	1879      	adds	r1, r7, r1
   24dc4:	1c58      	adds	r0, r3, #1
   24dc6:	7008      	strb	r0, [r1, #0]
   24dc8:	0019      	movs	r1, r3
   24dca:	2318      	movs	r3, #24
   24dcc:	18fb      	adds	r3, r7, r3
   24dce:	5c5b      	ldrb	r3, [r3, r1]
   24dd0:	7013      	strb	r3, [r2, #0]
					b[2] = rb[rix++];
   24dd2:	687b      	ldr	r3, [r7, #4]
   24dd4:	1c9a      	adds	r2, r3, #2
   24dd6:	2376      	movs	r3, #118	; 0x76
   24dd8:	18fb      	adds	r3, r7, r3
   24dda:	781b      	ldrb	r3, [r3, #0]
   24ddc:	2176      	movs	r1, #118	; 0x76
   24dde:	1879      	adds	r1, r7, r1
   24de0:	1c58      	adds	r0, r3, #1
   24de2:	7008      	strb	r0, [r1, #0]
   24de4:	0019      	movs	r1, r3
   24de6:	2318      	movs	r3, #24
   24de8:	18fb      	adds	r3, r7, r3
   24dea:	5c5b      	ldrb	r3, [r3, r1]
   24dec:	7013      	strb	r3, [r2, #0]
					b[3] = rb[rix++];
   24dee:	687b      	ldr	r3, [r7, #4]
   24df0:	1cda      	adds	r2, r3, #3
   24df2:	2376      	movs	r3, #118	; 0x76
   24df4:	18fb      	adds	r3, r7, r3
   24df6:	781b      	ldrb	r3, [r3, #0]
   24df8:	2176      	movs	r1, #118	; 0x76
   24dfa:	1879      	adds	r1, r7, r1
   24dfc:	1c58      	adds	r0, r3, #1
   24dfe:	7008      	strb	r0, [r1, #0]
   24e00:	0019      	movs	r1, r3
   24e02:	2318      	movs	r3, #24
   24e04:	18fb      	adds	r3, r7, r3
   24e06:	5c5b      	ldrb	r3, [r3, r1]
   24e08:	7013      	strb	r3, [r2, #0]
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
					result = N_FAIL;
					return result;
				}

				if (!gu8Crc_off) {						
   24e0a:	4b73      	ldr	r3, [pc, #460]	; (24fd8 <spi_cmd_complete+0x79c>)
   24e0c:	781b      	ldrb	r3, [r3, #0]
   24e0e:	2b00      	cmp	r3, #0
   24e10:	d000      	beq.n	24e14 <spi_cmd_complete+0x5d8>
   24e12:	e174      	b.n	250fe <spi_cmd_complete+0x8c2>
   24e14:	e011      	b.n	24e3a <spi_cmd_complete+0x5fe>
					M2M_ERR("[nmi spi]: buffer overrun when reading data.\n");
   24e16:	4a71      	ldr	r2, [pc, #452]	; (24fdc <spi_cmd_complete+0x7a0>)
   24e18:	4967      	ldr	r1, [pc, #412]	; (24fb8 <spi_cmd_complete+0x77c>)
   24e1a:	4b68      	ldr	r3, [pc, #416]	; (24fbc <spi_cmd_complete+0x780>)
   24e1c:	0018      	movs	r0, r3
   24e1e:	4b68      	ldr	r3, [pc, #416]	; (24fc0 <spi_cmd_complete+0x784>)
   24e20:	4798      	blx	r3
   24e22:	4b6f      	ldr	r3, [pc, #444]	; (24fe0 <spi_cmd_complete+0x7a4>)
   24e24:	0018      	movs	r0, r3
   24e26:	4b66      	ldr	r3, [pc, #408]	; (24fc0 <spi_cmd_complete+0x784>)
   24e28:	4798      	blx	r3
   24e2a:	4b67      	ldr	r3, [pc, #412]	; (24fc8 <spi_cmd_complete+0x78c>)
   24e2c:	0018      	movs	r0, r3
   24e2e:	4b64      	ldr	r3, [pc, #400]	; (24fc0 <spi_cmd_complete+0x784>)
   24e30:	4798      	blx	r3
					result = N_FAIL;
   24e32:	2300      	movs	r3, #0
   24e34:	66bb      	str	r3, [r7, #104]	; 0x68
					return result;
   24e36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24e38:	e162      	b.n	25100 <spi_cmd_complete+0x8c4>
					/**
					Read Crc
					**/
					if((rix+1) < len2) { 
   24e3a:	2376      	movs	r3, #118	; 0x76
   24e3c:	18fb      	adds	r3, r7, r3
   24e3e:	781b      	ldrb	r3, [r3, #0]
   24e40:	3301      	adds	r3, #1
   24e42:	001a      	movs	r2, r3
   24e44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24e46:	429a      	cmp	r2, r3
   24e48:	d21c      	bcs.n	24e84 <spi_cmd_complete+0x648>
						crc[0] = rb[rix++];
   24e4a:	2376      	movs	r3, #118	; 0x76
   24e4c:	18fb      	adds	r3, r7, r3
   24e4e:	781b      	ldrb	r3, [r3, #0]
   24e50:	2276      	movs	r2, #118	; 0x76
   24e52:	18ba      	adds	r2, r7, r2
   24e54:	1c59      	adds	r1, r3, #1
   24e56:	7011      	strb	r1, [r2, #0]
   24e58:	001a      	movs	r2, r3
   24e5a:	2318      	movs	r3, #24
   24e5c:	18fb      	adds	r3, r7, r3
   24e5e:	5c9a      	ldrb	r2, [r3, r2]
   24e60:	2314      	movs	r3, #20
   24e62:	18fb      	adds	r3, r7, r3
   24e64:	701a      	strb	r2, [r3, #0]
						crc[1] = rb[rix++];
   24e66:	2376      	movs	r3, #118	; 0x76
   24e68:	18fb      	adds	r3, r7, r3
   24e6a:	781b      	ldrb	r3, [r3, #0]
   24e6c:	2276      	movs	r2, #118	; 0x76
   24e6e:	18ba      	adds	r2, r7, r2
   24e70:	1c59      	adds	r1, r3, #1
   24e72:	7011      	strb	r1, [r2, #0]
   24e74:	001a      	movs	r2, r3
   24e76:	2318      	movs	r3, #24
   24e78:	18fb      	adds	r3, r7, r3
   24e7a:	5c9a      	ldrb	r2, [r3, r2]
   24e7c:	2314      	movs	r3, #20
   24e7e:	18fb      	adds	r3, r7, r3
   24e80:	705a      	strb	r2, [r3, #1]
				if (!gu8Crc_off) {						
   24e82:	e13c      	b.n	250fe <spi_cmd_complete+0x8c2>
					} else {
						M2M_ERR("[nmi spi]: buffer overrun when reading crc.\n");
   24e84:	239c      	movs	r3, #156	; 0x9c
   24e86:	009a      	lsls	r2, r3, #2
   24e88:	494b      	ldr	r1, [pc, #300]	; (24fb8 <spi_cmd_complete+0x77c>)
   24e8a:	4b4c      	ldr	r3, [pc, #304]	; (24fbc <spi_cmd_complete+0x780>)
   24e8c:	0018      	movs	r0, r3
   24e8e:	4b4c      	ldr	r3, [pc, #304]	; (24fc0 <spi_cmd_complete+0x784>)
   24e90:	4798      	blx	r3
   24e92:	4b54      	ldr	r3, [pc, #336]	; (24fe4 <spi_cmd_complete+0x7a8>)
   24e94:	0018      	movs	r0, r3
   24e96:	4b4a      	ldr	r3, [pc, #296]	; (24fc0 <spi_cmd_complete+0x784>)
   24e98:	4798      	blx	r3
   24e9a:	4b4b      	ldr	r3, [pc, #300]	; (24fc8 <spi_cmd_complete+0x78c>)
   24e9c:	0018      	movs	r0, r3
   24e9e:	4b48      	ldr	r3, [pc, #288]	; (24fc0 <spi_cmd_complete+0x784>)
   24ea0:	4798      	blx	r3
						result = N_FAIL;
   24ea2:	2300      	movs	r3, #0
   24ea4:	66bb      	str	r3, [r7, #104]	; 0x68
						return result;
   24ea6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   24ea8:	e12a      	b.n	25100 <spi_cmd_complete+0x8c4>
					}
				}
			} else if((cmd == CMD_DMA_READ) || (cmd == CMD_DMA_EXT_READ)) {
   24eaa:	230f      	movs	r3, #15
   24eac:	18fb      	adds	r3, r7, r3
   24eae:	781b      	ldrb	r3, [r3, #0]
   24eb0:	2bc2      	cmp	r3, #194	; 0xc2
   24eb2:	d005      	beq.n	24ec0 <spi_cmd_complete+0x684>
   24eb4:	230f      	movs	r3, #15
   24eb6:	18fb      	adds	r3, r7, r3
   24eb8:	781b      	ldrb	r3, [r3, #0]
   24eba:	2bc8      	cmp	r3, #200	; 0xc8
   24ebc:	d000      	beq.n	24ec0 <spi_cmd_complete+0x684>
   24ebe:	e11e      	b.n	250fe <spi_cmd_complete+0x8c2>
				int ix;

				/* some data may be read in response to dummy bytes. */
				for(ix=0; (rix < len2) && (ix < sz);) {
   24ec0:	2300      	movs	r3, #0
   24ec2:	663b      	str	r3, [r7, #96]	; 0x60
   24ec4:	e011      	b.n	24eea <spi_cmd_complete+0x6ae>
					b[ix++] = rb[rix++];				
   24ec6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24ec8:	1c5a      	adds	r2, r3, #1
   24eca:	663a      	str	r2, [r7, #96]	; 0x60
   24ecc:	001a      	movs	r2, r3
   24ece:	687b      	ldr	r3, [r7, #4]
   24ed0:	189a      	adds	r2, r3, r2
   24ed2:	2376      	movs	r3, #118	; 0x76
   24ed4:	18fb      	adds	r3, r7, r3
   24ed6:	781b      	ldrb	r3, [r3, #0]
   24ed8:	2176      	movs	r1, #118	; 0x76
   24eda:	1879      	adds	r1, r7, r1
   24edc:	1c58      	adds	r0, r3, #1
   24ede:	7008      	strb	r0, [r1, #0]
   24ee0:	0019      	movs	r1, r3
   24ee2:	2318      	movs	r3, #24
   24ee4:	18fb      	adds	r3, r7, r3
   24ee6:	5c5b      	ldrb	r3, [r3, r1]
   24ee8:	7013      	strb	r3, [r2, #0]
				for(ix=0; (rix < len2) && (ix < sz);) {
   24eea:	2376      	movs	r3, #118	; 0x76
   24eec:	18fb      	adds	r3, r7, r3
   24eee:	781a      	ldrb	r2, [r3, #0]
   24ef0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   24ef2:	429a      	cmp	r2, r3
   24ef4:	d203      	bcs.n	24efe <spi_cmd_complete+0x6c2>
   24ef6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   24ef8:	683b      	ldr	r3, [r7, #0]
   24efa:	429a      	cmp	r2, r3
   24efc:	d3e3      	bcc.n	24ec6 <spi_cmd_complete+0x68a>
				}
#if 0
				if(ix) M2M_INFO("ttt %d %d\n", sz, ix);
#endif
				sz -= ix;
   24efe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24f00:	683a      	ldr	r2, [r7, #0]
   24f02:	1ad3      	subs	r3, r2, r3
   24f04:	603b      	str	r3, [r7, #0]

				if(sz > 0) {
   24f06:	683b      	ldr	r3, [r7, #0]
   24f08:	2b00      	cmp	r3, #0
   24f0a:	d100      	bne.n	24f0e <spi_cmd_complete+0x6d2>
   24f0c:	e0f1      	b.n	250f2 <spi_cmd_complete+0x8b6>
					int nbytes;
					
					if (sz <= (DATA_PKT_SZ-ix)) {
   24f0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24f10:	2280      	movs	r2, #128	; 0x80
   24f12:	0192      	lsls	r2, r2, #6
   24f14:	1ad3      	subs	r3, r2, r3
   24f16:	001a      	movs	r2, r3
   24f18:	683b      	ldr	r3, [r7, #0]
   24f1a:	429a      	cmp	r2, r3
   24f1c:	d302      	bcc.n	24f24 <spi_cmd_complete+0x6e8>
						nbytes = sz;
   24f1e:	683b      	ldr	r3, [r7, #0]
   24f20:	65fb      	str	r3, [r7, #92]	; 0x5c
   24f22:	e004      	b.n	24f2e <spi_cmd_complete+0x6f2>
					} else {
						nbytes = DATA_PKT_SZ-ix;
   24f24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24f26:	2280      	movs	r2, #128	; 0x80
   24f28:	0192      	lsls	r2, r2, #6
   24f2a:	1ad3      	subs	r3, r2, r3
   24f2c:	65fb      	str	r3, [r7, #92]	; 0x5c
					}

					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   24f2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   24f30:	687a      	ldr	r2, [r7, #4]
   24f32:	18d3      	adds	r3, r2, r3
   24f34:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
   24f36:	b292      	uxth	r2, r2
   24f38:	0011      	movs	r1, r2
   24f3a:	0018      	movs	r0, r3
   24f3c:	4b2a      	ldr	r3, [pc, #168]	; (24fe8 <spi_cmd_complete+0x7ac>)
   24f3e:	4798      	blx	r3
   24f40:	1e03      	subs	r3, r0, #0
   24f42:	d010      	beq.n	24f66 <spi_cmd_complete+0x72a>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   24f44:	4a29      	ldr	r2, [pc, #164]	; (24fec <spi_cmd_complete+0x7b0>)
   24f46:	491c      	ldr	r1, [pc, #112]	; (24fb8 <spi_cmd_complete+0x77c>)
   24f48:	4b1c      	ldr	r3, [pc, #112]	; (24fbc <spi_cmd_complete+0x780>)
   24f4a:	0018      	movs	r0, r3
   24f4c:	4b1c      	ldr	r3, [pc, #112]	; (24fc0 <spi_cmd_complete+0x784>)
   24f4e:	4798      	blx	r3
   24f50:	4b27      	ldr	r3, [pc, #156]	; (24ff0 <spi_cmd_complete+0x7b4>)
   24f52:	0018      	movs	r0, r3
   24f54:	4b1a      	ldr	r3, [pc, #104]	; (24fc0 <spi_cmd_complete+0x784>)
   24f56:	4798      	blx	r3
   24f58:	4b1b      	ldr	r3, [pc, #108]	; (24fc8 <spi_cmd_complete+0x78c>)
   24f5a:	0018      	movs	r0, r3
   24f5c:	4b18      	ldr	r3, [pc, #96]	; (24fc0 <spi_cmd_complete+0x784>)
   24f5e:	4798      	blx	r3
						result = N_FAIL;
   24f60:	2300      	movs	r3, #0
   24f62:	66bb      	str	r3, [r7, #104]	; 0x68
						goto _error_;
   24f64:	e0cb      	b.n	250fe <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   24f66:	4b1c      	ldr	r3, [pc, #112]	; (24fd8 <spi_cmd_complete+0x79c>)
   24f68:	781b      	ldrb	r3, [r3, #0]
   24f6a:	2b00      	cmp	r3, #0
   24f6c:	d119      	bne.n	24fa2 <spi_cmd_complete+0x766>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   24f6e:	2314      	movs	r3, #20
   24f70:	18fb      	adds	r3, r7, r3
   24f72:	2102      	movs	r1, #2
   24f74:	0018      	movs	r0, r3
   24f76:	4b1c      	ldr	r3, [pc, #112]	; (24fe8 <spi_cmd_complete+0x7ac>)
   24f78:	4798      	blx	r3
   24f7a:	1e03      	subs	r3, r0, #0
   24f7c:	d011      	beq.n	24fa2 <spi_cmd_complete+0x766>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   24f7e:	23a6      	movs	r3, #166	; 0xa6
   24f80:	009a      	lsls	r2, r3, #2
   24f82:	490d      	ldr	r1, [pc, #52]	; (24fb8 <spi_cmd_complete+0x77c>)
   24f84:	4b0d      	ldr	r3, [pc, #52]	; (24fbc <spi_cmd_complete+0x780>)
   24f86:	0018      	movs	r0, r3
   24f88:	4b0d      	ldr	r3, [pc, #52]	; (24fc0 <spi_cmd_complete+0x784>)
   24f8a:	4798      	blx	r3
   24f8c:	4b19      	ldr	r3, [pc, #100]	; (24ff4 <spi_cmd_complete+0x7b8>)
   24f8e:	0018      	movs	r0, r3
   24f90:	4b0b      	ldr	r3, [pc, #44]	; (24fc0 <spi_cmd_complete+0x784>)
   24f92:	4798      	blx	r3
   24f94:	4b0c      	ldr	r3, [pc, #48]	; (24fc8 <spi_cmd_complete+0x78c>)
   24f96:	0018      	movs	r0, r3
   24f98:	4b09      	ldr	r3, [pc, #36]	; (24fc0 <spi_cmd_complete+0x784>)
   24f9a:	4798      	blx	r3
							result = N_FAIL;
   24f9c:	2300      	movs	r3, #0
   24f9e:	66bb      	str	r3, [r7, #104]	; 0x68
							goto _error_;
   24fa0:	e0ad      	b.n	250fe <spi_cmd_complete+0x8c2>
						}
					}

					
					ix += nbytes;
   24fa2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   24fa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   24fa6:	18d3      	adds	r3, r2, r3
   24fa8:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   24faa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   24fac:	683a      	ldr	r2, [r7, #0]
   24fae:	1ad3      	subs	r3, r2, r3
   24fb0:	603b      	str	r3, [r7, #0]
				}

				/*  if any data in left unread, then read the rest using normal DMA code.*/	
				while(sz > 0) {
   24fb2:	e09e      	b.n	250f2 <spi_cmd_complete+0x8b6>
   24fb4:	0000022f 	.word	0x0000022f
   24fb8:	0003a48c 	.word	0x0003a48c
   24fbc:	00039e78 	.word	0x00039e78
   24fc0:	0001ed29 	.word	0x0001ed29
   24fc4:	00039f70 	.word	0x00039f70
   24fc8:	00039eb8 	.word	0x00039eb8
   24fcc:	00000239 	.word	0x00000239
   24fd0:	00039fac 	.word	0x00039fac
   24fd4:	00039fe0 	.word	0x00039fe0
   24fd8:	200042b0 	.word	0x200042b0
   24fdc:	00000263 	.word	0x00000263
   24fe0:	0003a010 	.word	0x0003a010
   24fe4:	0003a040 	.word	0x0003a040
   24fe8:	00024175 	.word	0x00024175
   24fec:	0000028e 	.word	0x0000028e
   24ff0:	0003a070 	.word	0x0003a070
   24ff4:	0003a0a4 	.word	0x0003a0a4
					int nbytes;
			
					if (sz <= DATA_PKT_SZ) {
   24ff8:	683a      	ldr	r2, [r7, #0]
   24ffa:	2380      	movs	r3, #128	; 0x80
   24ffc:	019b      	lsls	r3, r3, #6
   24ffe:	429a      	cmp	r2, r3
   25000:	d802      	bhi.n	25008 <spi_cmd_complete+0x7cc>
						nbytes = sz;
   25002:	683b      	ldr	r3, [r7, #0]
   25004:	65bb      	str	r3, [r7, #88]	; 0x58
   25006:	e002      	b.n	2500e <spi_cmd_complete+0x7d2>
					} else {
						nbytes = DATA_PKT_SZ;
   25008:	2380      	movs	r3, #128	; 0x80
   2500a:	019b      	lsls	r3, r3, #6
   2500c:	65bb      	str	r3, [r7, #88]	; 0x58
					handled above for the first DMA.
					**/
					/**
					Data Respnose header
					**/
					retry = SPI_RESP_RETRY_COUNT;
   2500e:	230a      	movs	r3, #10
   25010:	667b      	str	r3, [r7, #100]	; 0x64
					do {
						if (nmi_spi_read(&rsp, 1) != M2M_SUCCESS) {
   25012:	2317      	movs	r3, #23
   25014:	18fb      	adds	r3, r7, r3
   25016:	2101      	movs	r1, #1
   25018:	0018      	movs	r0, r3
   2501a:	4b3b      	ldr	r3, [pc, #236]	; (25108 <spi_cmd_complete+0x8cc>)
   2501c:	4798      	blx	r3
   2501e:	1e03      	subs	r3, r0, #0
   25020:	d011      	beq.n	25046 <spi_cmd_complete+0x80a>
							M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
   25022:	23ae      	movs	r3, #174	; 0xae
   25024:	009a      	lsls	r2, r3, #2
   25026:	4939      	ldr	r1, [pc, #228]	; (2510c <spi_cmd_complete+0x8d0>)
   25028:	4b39      	ldr	r3, [pc, #228]	; (25110 <spi_cmd_complete+0x8d4>)
   2502a:	0018      	movs	r0, r3
   2502c:	4b39      	ldr	r3, [pc, #228]	; (25114 <spi_cmd_complete+0x8d8>)
   2502e:	4798      	blx	r3
   25030:	4b39      	ldr	r3, [pc, #228]	; (25118 <spi_cmd_complete+0x8dc>)
   25032:	0018      	movs	r0, r3
   25034:	4b37      	ldr	r3, [pc, #220]	; (25114 <spi_cmd_complete+0x8d8>)
   25036:	4798      	blx	r3
   25038:	4b38      	ldr	r3, [pc, #224]	; (2511c <spi_cmd_complete+0x8e0>)
   2503a:	0018      	movs	r0, r3
   2503c:	4b35      	ldr	r3, [pc, #212]	; (25114 <spi_cmd_complete+0x8d8>)
   2503e:	4798      	blx	r3
							result = N_FAIL;
   25040:	2300      	movs	r3, #0
   25042:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   25044:	e010      	b.n	25068 <spi_cmd_complete+0x82c>
						}
						if (((rsp >> 4) & 0xf) == 0xf)
   25046:	2317      	movs	r3, #23
   25048:	18fb      	adds	r3, r7, r3
   2504a:	781b      	ldrb	r3, [r3, #0]
   2504c:	091b      	lsrs	r3, r3, #4
   2504e:	b2db      	uxtb	r3, r3
   25050:	001a      	movs	r2, r3
   25052:	230f      	movs	r3, #15
   25054:	4013      	ands	r3, r2
   25056:	2b0f      	cmp	r3, #15
   25058:	d005      	beq.n	25066 <spi_cmd_complete+0x82a>
							break;
					} while (retry--);
   2505a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   2505c:	1e5a      	subs	r2, r3, #1
   2505e:	667a      	str	r2, [r7, #100]	; 0x64
   25060:	2b00      	cmp	r3, #0
   25062:	d1d6      	bne.n	25012 <spi_cmd_complete+0x7d6>
   25064:	e000      	b.n	25068 <spi_cmd_complete+0x82c>
							break;
   25066:	46c0      	nop			; (mov r8, r8)

					if (result == N_FAIL)
   25068:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   2506a:	2b00      	cmp	r3, #0
   2506c:	d046      	beq.n	250fc <spi_cmd_complete+0x8c0>


					/**
					Read bytes
					**/
					if (nmi_spi_read(&b[ix], nbytes) != M2M_SUCCESS) {
   2506e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   25070:	687a      	ldr	r2, [r7, #4]
   25072:	18d3      	adds	r3, r2, r3
   25074:	6dba      	ldr	r2, [r7, #88]	; 0x58
   25076:	b292      	uxth	r2, r2
   25078:	0011      	movs	r1, r2
   2507a:	0018      	movs	r0, r3
   2507c:	4b22      	ldr	r3, [pc, #136]	; (25108 <spi_cmd_complete+0x8cc>)
   2507e:	4798      	blx	r3
   25080:	1e03      	subs	r3, r0, #0
   25082:	d011      	beq.n	250a8 <spi_cmd_complete+0x86c>
						M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
   25084:	23b2      	movs	r3, #178	; 0xb2
   25086:	009a      	lsls	r2, r3, #2
   25088:	4920      	ldr	r1, [pc, #128]	; (2510c <spi_cmd_complete+0x8d0>)
   2508a:	4b21      	ldr	r3, [pc, #132]	; (25110 <spi_cmd_complete+0x8d4>)
   2508c:	0018      	movs	r0, r3
   2508e:	4b21      	ldr	r3, [pc, #132]	; (25114 <spi_cmd_complete+0x8d8>)
   25090:	4798      	blx	r3
   25092:	4b23      	ldr	r3, [pc, #140]	; (25120 <spi_cmd_complete+0x8e4>)
   25094:	0018      	movs	r0, r3
   25096:	4b1f      	ldr	r3, [pc, #124]	; (25114 <spi_cmd_complete+0x8d8>)
   25098:	4798      	blx	r3
   2509a:	4b20      	ldr	r3, [pc, #128]	; (2511c <spi_cmd_complete+0x8e0>)
   2509c:	0018      	movs	r0, r3
   2509e:	4b1d      	ldr	r3, [pc, #116]	; (25114 <spi_cmd_complete+0x8d8>)
   250a0:	4798      	blx	r3
						result = N_FAIL;
   250a2:	2300      	movs	r3, #0
   250a4:	66bb      	str	r3, [r7, #104]	; 0x68
						break;
   250a6:	e02a      	b.n	250fe <spi_cmd_complete+0x8c2>
					}

					/**
					Read Crc
					**/
					if (!gu8Crc_off) {
   250a8:	4b1e      	ldr	r3, [pc, #120]	; (25124 <spi_cmd_complete+0x8e8>)
   250aa:	781b      	ldrb	r3, [r3, #0]
   250ac:	2b00      	cmp	r3, #0
   250ae:	d118      	bne.n	250e2 <spi_cmd_complete+0x8a6>
						if (nmi_spi_read(crc, 2) != M2M_SUCCESS) {
   250b0:	2314      	movs	r3, #20
   250b2:	18fb      	adds	r3, r7, r3
   250b4:	2102      	movs	r1, #2
   250b6:	0018      	movs	r0, r3
   250b8:	4b13      	ldr	r3, [pc, #76]	; (25108 <spi_cmd_complete+0x8cc>)
   250ba:	4798      	blx	r3
   250bc:	1e03      	subs	r3, r0, #0
   250be:	d010      	beq.n	250e2 <spi_cmd_complete+0x8a6>
							M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
   250c0:	4a19      	ldr	r2, [pc, #100]	; (25128 <spi_cmd_complete+0x8ec>)
   250c2:	4912      	ldr	r1, [pc, #72]	; (2510c <spi_cmd_complete+0x8d0>)
   250c4:	4b12      	ldr	r3, [pc, #72]	; (25110 <spi_cmd_complete+0x8d4>)
   250c6:	0018      	movs	r0, r3
   250c8:	4b12      	ldr	r3, [pc, #72]	; (25114 <spi_cmd_complete+0x8d8>)
   250ca:	4798      	blx	r3
   250cc:	4b17      	ldr	r3, [pc, #92]	; (2512c <spi_cmd_complete+0x8f0>)
   250ce:	0018      	movs	r0, r3
   250d0:	4b10      	ldr	r3, [pc, #64]	; (25114 <spi_cmd_complete+0x8d8>)
   250d2:	4798      	blx	r3
   250d4:	4b11      	ldr	r3, [pc, #68]	; (2511c <spi_cmd_complete+0x8e0>)
   250d6:	0018      	movs	r0, r3
   250d8:	4b0e      	ldr	r3, [pc, #56]	; (25114 <spi_cmd_complete+0x8d8>)
   250da:	4798      	blx	r3
							result = N_FAIL;
   250dc:	2300      	movs	r3, #0
   250de:	66bb      	str	r3, [r7, #104]	; 0x68
							break;
   250e0:	e00d      	b.n	250fe <spi_cmd_complete+0x8c2>
						}
					}

					ix += nbytes;
   250e2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
   250e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   250e6:	18d3      	adds	r3, r2, r3
   250e8:	663b      	str	r3, [r7, #96]	; 0x60
					sz -= nbytes;
   250ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   250ec:	683a      	ldr	r2, [r7, #0]
   250ee:	1ad3      	subs	r3, r2, r3
   250f0:	603b      	str	r3, [r7, #0]
				while(sz > 0) {
   250f2:	683b      	ldr	r3, [r7, #0]
   250f4:	2b00      	cmp	r3, #0
   250f6:	d000      	beq.n	250fa <spi_cmd_complete+0x8be>
   250f8:	e77e      	b.n	24ff8 <spi_cmd_complete+0x7bc>
   250fa:	e000      	b.n	250fe <spi_cmd_complete+0x8c2>
						break;
   250fc:	46c0      	nop			; (mov r8, r8)
				}
			}
	}
_error_:
	return result;
   250fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
   25100:	0018      	movs	r0, r3
   25102:	46bd      	mov	sp, r7
   25104:	b01f      	add	sp, #124	; 0x7c
   25106:	bd90      	pop	{r4, r7, pc}
   25108:	00024175 	.word	0x00024175
   2510c:	0003a48c 	.word	0x0003a48c
   25110:	00039e78 	.word	0x00039e78
   25114:	0001ed29 	.word	0x0001ed29
   25118:	0003a0dc 	.word	0x0003a0dc
   2511c:	00039eb8 	.word	0x00039eb8
   25120:	0003a070 	.word	0x0003a070
   25124:	200042b0 	.word	0x200042b0
   25128:	000002d2 	.word	0x000002d2
   2512c:	0003a0a4 	.word	0x0003a0a4

00025130 <spi_data_write>:

	return result;
}

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
   25130:	b580      	push	{r7, lr}
   25132:	b086      	sub	sp, #24
   25134:	af00      	add	r7, sp, #0
   25136:	6078      	str	r0, [r7, #4]
   25138:	000a      	movs	r2, r1
   2513a:	1cbb      	adds	r3, r7, #2
   2513c:	801a      	strh	r2, [r3, #0]
	sint16 ix;
	uint16 nbytes;
	sint8 result = 1;
   2513e:	2313      	movs	r3, #19
   25140:	18fb      	adds	r3, r7, r3
   25142:	2201      	movs	r2, #1
   25144:	701a      	strb	r2, [r3, #0]
	uint8 cmd, order, crc[2] = {0};
   25146:	230c      	movs	r3, #12
   25148:	18fb      	adds	r3, r7, r3
   2514a:	2200      	movs	r2, #0
   2514c:	801a      	strh	r2, [r3, #0]
	//uint8 rsp;

	/**
		Data
	**/
	ix = 0;
   2514e:	2316      	movs	r3, #22
   25150:	18fb      	adds	r3, r7, r3
   25152:	2200      	movs	r2, #0
   25154:	801a      	strh	r2, [r3, #0]
	do {
		if (sz <= DATA_PKT_SZ)
   25156:	1cbb      	adds	r3, r7, #2
   25158:	881a      	ldrh	r2, [r3, #0]
   2515a:	2380      	movs	r3, #128	; 0x80
   2515c:	019b      	lsls	r3, r3, #6
   2515e:	429a      	cmp	r2, r3
   25160:	d805      	bhi.n	2516e <spi_data_write+0x3e>
			nbytes = sz;
   25162:	2314      	movs	r3, #20
   25164:	18fb      	adds	r3, r7, r3
   25166:	1cba      	adds	r2, r7, #2
   25168:	8812      	ldrh	r2, [r2, #0]
   2516a:	801a      	strh	r2, [r3, #0]
   2516c:	e004      	b.n	25178 <spi_data_write+0x48>
		else
			nbytes = DATA_PKT_SZ;
   2516e:	2314      	movs	r3, #20
   25170:	18fb      	adds	r3, r7, r3
   25172:	2280      	movs	r2, #128	; 0x80
   25174:	0192      	lsls	r2, r2, #6
   25176:	801a      	strh	r2, [r3, #0]

		/**
			Write command
		**/
		cmd = 0xf0;
   25178:	2311      	movs	r3, #17
   2517a:	18fb      	adds	r3, r7, r3
   2517c:	22f0      	movs	r2, #240	; 0xf0
   2517e:	701a      	strb	r2, [r3, #0]
		if (ix == 0)  {
   25180:	2316      	movs	r3, #22
   25182:	18fb      	adds	r3, r7, r3
   25184:	2200      	movs	r2, #0
   25186:	5e9b      	ldrsh	r3, [r3, r2]
   25188:	2b00      	cmp	r3, #0
   2518a:	d10f      	bne.n	251ac <spi_data_write+0x7c>
			if (sz <= DATA_PKT_SZ)
   2518c:	1cbb      	adds	r3, r7, #2
   2518e:	881a      	ldrh	r2, [r3, #0]
   25190:	2380      	movs	r3, #128	; 0x80
   25192:	019b      	lsls	r3, r3, #6
   25194:	429a      	cmp	r2, r3
   25196:	d804      	bhi.n	251a2 <spi_data_write+0x72>
				order = 0x3;
   25198:	2312      	movs	r3, #18
   2519a:	18fb      	adds	r3, r7, r3
   2519c:	2203      	movs	r2, #3
   2519e:	701a      	strb	r2, [r3, #0]
   251a0:	e013      	b.n	251ca <spi_data_write+0x9a>
			else
				order = 0x1;
   251a2:	2312      	movs	r3, #18
   251a4:	18fb      	adds	r3, r7, r3
   251a6:	2201      	movs	r2, #1
   251a8:	701a      	strb	r2, [r3, #0]
   251aa:	e00e      	b.n	251ca <spi_data_write+0x9a>
		} else {
			if (sz <= DATA_PKT_SZ)
   251ac:	1cbb      	adds	r3, r7, #2
   251ae:	881a      	ldrh	r2, [r3, #0]
   251b0:	2380      	movs	r3, #128	; 0x80
   251b2:	019b      	lsls	r3, r3, #6
   251b4:	429a      	cmp	r2, r3
   251b6:	d804      	bhi.n	251c2 <spi_data_write+0x92>
				order = 0x3;
   251b8:	2312      	movs	r3, #18
   251ba:	18fb      	adds	r3, r7, r3
   251bc:	2203      	movs	r2, #3
   251be:	701a      	strb	r2, [r3, #0]
   251c0:	e003      	b.n	251ca <spi_data_write+0x9a>
			else
				order = 0x2;
   251c2:	2312      	movs	r3, #18
   251c4:	18fb      	adds	r3, r7, r3
   251c6:	2202      	movs	r2, #2
   251c8:	701a      	strb	r2, [r3, #0]
		}
		cmd |= order;
   251ca:	2311      	movs	r3, #17
   251cc:	18fb      	adds	r3, r7, r3
   251ce:	781a      	ldrb	r2, [r3, #0]
   251d0:	2312      	movs	r3, #18
   251d2:	18fb      	adds	r3, r7, r3
   251d4:	781b      	ldrb	r3, [r3, #0]
   251d6:	4313      	orrs	r3, r2
   251d8:	b2da      	uxtb	r2, r3
   251da:	2311      	movs	r3, #17
   251dc:	18fb      	adds	r3, r7, r3
   251de:	701a      	strb	r2, [r3, #0]
		if (M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
   251e0:	2311      	movs	r3, #17
   251e2:	18fb      	adds	r3, r7, r3
   251e4:	2101      	movs	r1, #1
   251e6:	0018      	movs	r0, r3
   251e8:	4b3c      	ldr	r3, [pc, #240]	; (252dc <spi_data_write+0x1ac>)
   251ea:	4798      	blx	r3
   251ec:	1e03      	subs	r3, r0, #0
   251ee:	d012      	beq.n	25216 <spi_data_write+0xe6>
			M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
   251f0:	4a3b      	ldr	r2, [pc, #236]	; (252e0 <spi_data_write+0x1b0>)
   251f2:	493c      	ldr	r1, [pc, #240]	; (252e4 <spi_data_write+0x1b4>)
   251f4:	4b3c      	ldr	r3, [pc, #240]	; (252e8 <spi_data_write+0x1b8>)
   251f6:	0018      	movs	r0, r3
   251f8:	4b3c      	ldr	r3, [pc, #240]	; (252ec <spi_data_write+0x1bc>)
   251fa:	4798      	blx	r3
   251fc:	4b3c      	ldr	r3, [pc, #240]	; (252f0 <spi_data_write+0x1c0>)
   251fe:	0018      	movs	r0, r3
   25200:	4b3a      	ldr	r3, [pc, #232]	; (252ec <spi_data_write+0x1bc>)
   25202:	4798      	blx	r3
   25204:	4b3b      	ldr	r3, [pc, #236]	; (252f4 <spi_data_write+0x1c4>)
   25206:	0018      	movs	r0, r3
   25208:	4b38      	ldr	r3, [pc, #224]	; (252ec <spi_data_write+0x1bc>)
   2520a:	4798      	blx	r3
			result = N_FAIL;
   2520c:	2313      	movs	r3, #19
   2520e:	18fb      	adds	r3, r7, r3
   25210:	2200      	movs	r2, #0
   25212:	701a      	strb	r2, [r3, #0]
			break;
   25214:	e059      	b.n	252ca <spi_data_write+0x19a>
		}

		/**
			Write data
		**/
		if (M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
   25216:	2316      	movs	r3, #22
   25218:	18fb      	adds	r3, r7, r3
   2521a:	2200      	movs	r2, #0
   2521c:	5e9b      	ldrsh	r3, [r3, r2]
   2521e:	687a      	ldr	r2, [r7, #4]
   25220:	18d2      	adds	r2, r2, r3
   25222:	2314      	movs	r3, #20
   25224:	18fb      	adds	r3, r7, r3
   25226:	881b      	ldrh	r3, [r3, #0]
   25228:	0019      	movs	r1, r3
   2522a:	0010      	movs	r0, r2
   2522c:	4b2b      	ldr	r3, [pc, #172]	; (252dc <spi_data_write+0x1ac>)
   2522e:	4798      	blx	r3
   25230:	1e03      	subs	r3, r0, #0
   25232:	d012      	beq.n	2525a <spi_data_write+0x12a>
			M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
   25234:	4a30      	ldr	r2, [pc, #192]	; (252f8 <spi_data_write+0x1c8>)
   25236:	492b      	ldr	r1, [pc, #172]	; (252e4 <spi_data_write+0x1b4>)
   25238:	4b2b      	ldr	r3, [pc, #172]	; (252e8 <spi_data_write+0x1b8>)
   2523a:	0018      	movs	r0, r3
   2523c:	4b2b      	ldr	r3, [pc, #172]	; (252ec <spi_data_write+0x1bc>)
   2523e:	4798      	blx	r3
   25240:	4b2e      	ldr	r3, [pc, #184]	; (252fc <spi_data_write+0x1cc>)
   25242:	0018      	movs	r0, r3
   25244:	4b29      	ldr	r3, [pc, #164]	; (252ec <spi_data_write+0x1bc>)
   25246:	4798      	blx	r3
   25248:	4b2a      	ldr	r3, [pc, #168]	; (252f4 <spi_data_write+0x1c4>)
   2524a:	0018      	movs	r0, r3
   2524c:	4b27      	ldr	r3, [pc, #156]	; (252ec <spi_data_write+0x1bc>)
   2524e:	4798      	blx	r3
			result = N_FAIL;
   25250:	2313      	movs	r3, #19
   25252:	18fb      	adds	r3, r7, r3
   25254:	2200      	movs	r2, #0
   25256:	701a      	strb	r2, [r3, #0]
			break;
   25258:	e037      	b.n	252ca <spi_data_write+0x19a>
		}

		/**
			Write Crc
		**/
		if (!gu8Crc_off) {
   2525a:	4b29      	ldr	r3, [pc, #164]	; (25300 <spi_data_write+0x1d0>)
   2525c:	781b      	ldrb	r3, [r3, #0]
   2525e:	2b00      	cmp	r3, #0
   25260:	d11b      	bne.n	2529a <spi_data_write+0x16a>
			if (M2M_SUCCESS != nmi_spi_write(crc, 2)) {
   25262:	230c      	movs	r3, #12
   25264:	18fb      	adds	r3, r7, r3
   25266:	2102      	movs	r1, #2
   25268:	0018      	movs	r0, r3
   2526a:	4b1c      	ldr	r3, [pc, #112]	; (252dc <spi_data_write+0x1ac>)
   2526c:	4798      	blx	r3
   2526e:	1e03      	subs	r3, r0, #0
   25270:	d013      	beq.n	2529a <spi_data_write+0x16a>
				M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
   25272:	23d7      	movs	r3, #215	; 0xd7
   25274:	009a      	lsls	r2, r3, #2
   25276:	491b      	ldr	r1, [pc, #108]	; (252e4 <spi_data_write+0x1b4>)
   25278:	4b1b      	ldr	r3, [pc, #108]	; (252e8 <spi_data_write+0x1b8>)
   2527a:	0018      	movs	r0, r3
   2527c:	4b1b      	ldr	r3, [pc, #108]	; (252ec <spi_data_write+0x1bc>)
   2527e:	4798      	blx	r3
   25280:	4b20      	ldr	r3, [pc, #128]	; (25304 <spi_data_write+0x1d4>)
   25282:	0018      	movs	r0, r3
   25284:	4b19      	ldr	r3, [pc, #100]	; (252ec <spi_data_write+0x1bc>)
   25286:	4798      	blx	r3
   25288:	4b1a      	ldr	r3, [pc, #104]	; (252f4 <spi_data_write+0x1c4>)
   2528a:	0018      	movs	r0, r3
   2528c:	4b17      	ldr	r3, [pc, #92]	; (252ec <spi_data_write+0x1bc>)
   2528e:	4798      	blx	r3
				result = N_FAIL;
   25290:	2313      	movs	r3, #19
   25292:	18fb      	adds	r3, r7, r3
   25294:	2200      	movs	r2, #0
   25296:	701a      	strb	r2, [r3, #0]
				break;
   25298:	e017      	b.n	252ca <spi_data_write+0x19a>
			}
		}

		ix += nbytes;
   2529a:	2316      	movs	r3, #22
   2529c:	18fb      	adds	r3, r7, r3
   2529e:	881a      	ldrh	r2, [r3, #0]
   252a0:	2314      	movs	r3, #20
   252a2:	18fb      	adds	r3, r7, r3
   252a4:	881b      	ldrh	r3, [r3, #0]
   252a6:	18d3      	adds	r3, r2, r3
   252a8:	b29a      	uxth	r2, r3
   252aa:	2316      	movs	r3, #22
   252ac:	18fb      	adds	r3, r7, r3
   252ae:	801a      	strh	r2, [r3, #0]
		sz -= nbytes;
   252b0:	1cbb      	adds	r3, r7, #2
   252b2:	1cb9      	adds	r1, r7, #2
   252b4:	2214      	movs	r2, #20
   252b6:	18ba      	adds	r2, r7, r2
   252b8:	8809      	ldrh	r1, [r1, #0]
   252ba:	8812      	ldrh	r2, [r2, #0]
   252bc:	1a8a      	subs	r2, r1, r2
   252be:	801a      	strh	r2, [r3, #0]
	} while (sz);
   252c0:	1cbb      	adds	r3, r7, #2
   252c2:	881b      	ldrh	r3, [r3, #0]
   252c4:	2b00      	cmp	r3, #0
   252c6:	d000      	beq.n	252ca <spi_data_write+0x19a>
   252c8:	e745      	b.n	25156 <spi_data_write+0x26>


	return result;
   252ca:	2313      	movs	r3, #19
   252cc:	18fb      	adds	r3, r7, r3
   252ce:	781b      	ldrb	r3, [r3, #0]
   252d0:	b25b      	sxtb	r3, r3
}
   252d2:	0018      	movs	r0, r3
   252d4:	46bd      	mov	sp, r7
   252d6:	b006      	add	sp, #24
   252d8:	bd80      	pop	{r7, pc}
   252da:	46c0      	nop			; (mov r8, r8)
   252dc:	000241b9 	.word	0x000241b9
   252e0:	00000349 	.word	0x00000349
   252e4:	0003a4a0 	.word	0x0003a4a0
   252e8:	00039e78 	.word	0x00039e78
   252ec:	0001ed29 	.word	0x0001ed29
   252f0:	0003a140 	.word	0x0003a140
   252f4:	00039eb8 	.word	0x00039eb8
   252f8:	00000352 	.word	0x00000352
   252fc:	0003a178 	.word	0x0003a178
   25300:	200042b0 	.word	0x200042b0
   25304:	0003a1ac 	.word	0x0003a1ac

00025308 <spi_write_reg>:
	Spi interfaces

********************************************/

static sint8 spi_write_reg(uint32 addr, uint32 u32data)
{
   25308:	b590      	push	{r4, r7, lr}
   2530a:	b087      	sub	sp, #28
   2530c:	af02      	add	r7, sp, #8
   2530e:	6078      	str	r0, [r7, #4]
   25310:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   25312:	230f      	movs	r3, #15
   25314:	18fb      	adds	r3, r7, r3
   25316:	220a      	movs	r2, #10
   25318:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   2531a:	230c      	movs	r3, #12
   2531c:	18fb      	adds	r3, r7, r3
   2531e:	2201      	movs	r2, #1
   25320:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_WRITE;
   25322:	230e      	movs	r3, #14
   25324:	18fb      	adds	r3, r7, r3
   25326:	22c9      	movs	r2, #201	; 0xc9
   25328:	701a      	strb	r2, [r3, #0]
	uint8 clockless = 0;
   2532a:	230d      	movs	r3, #13
   2532c:	18fb      	adds	r3, r7, r3
   2532e:	2200      	movs	r2, #0
   25330:	701a      	strb	r2, [r3, #0]
	
_RETRY_:	
	if (addr <= 0x30)
   25332:	687b      	ldr	r3, [r7, #4]
   25334:	2b30      	cmp	r3, #48	; 0x30
   25336:	d808      	bhi.n	2534a <spi_write_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_WRITE;
   25338:	230e      	movs	r3, #14
   2533a:	18fb      	adds	r3, r7, r3
   2533c:	22c3      	movs	r2, #195	; 0xc3
   2533e:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   25340:	230d      	movs	r3, #13
   25342:	18fb      	adds	r3, r7, r3
   25344:	2201      	movs	r2, #1
   25346:	701a      	strb	r2, [r3, #0]
   25348:	e007      	b.n	2535a <spi_write_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_WRITE;
   2534a:	230e      	movs	r3, #14
   2534c:	18fb      	adds	r3, r7, r3
   2534e:	22c9      	movs	r2, #201	; 0xc9
   25350:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   25352:	230d      	movs	r3, #13
   25354:	18fb      	adds	r3, r7, r3
   25356:	2200      	movs	r2, #0
   25358:	701a      	strb	r2, [r3, #0]
		goto _FAIL_;
	}

#else

	result = spi_cmd_complete(cmd, addr, (uint8*)&u32data, 4, clockless);
   2535a:	003a      	movs	r2, r7
   2535c:	6879      	ldr	r1, [r7, #4]
   2535e:	230e      	movs	r3, #14
   25360:	18fb      	adds	r3, r7, r3
   25362:	7818      	ldrb	r0, [r3, #0]
   25364:	230d      	movs	r3, #13
   25366:	18fb      	adds	r3, r7, r3
   25368:	781b      	ldrb	r3, [r3, #0]
   2536a:	9300      	str	r3, [sp, #0]
   2536c:	2304      	movs	r3, #4
   2536e:	4c2e      	ldr	r4, [pc, #184]	; (25428 <spi_write_reg+0x120>)
   25370:	47a0      	blx	r4
   25372:	0002      	movs	r2, r0
   25374:	230c      	movs	r3, #12
   25376:	18fb      	adds	r3, r7, r3
   25378:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   2537a:	230c      	movs	r3, #12
   2537c:	18fb      	adds	r3, r7, r3
   2537e:	781b      	ldrb	r3, [r3, #0]
   25380:	b25b      	sxtb	r3, r3
   25382:	2b01      	cmp	r3, #1
   25384:	d010      	beq.n	253a8 <spi_write_reg+0xa0>
		M2M_ERR( "[nmi spi]: Failed cmd, write reg (%08x)...\n", addr);
   25386:	4a29      	ldr	r2, [pc, #164]	; (2542c <spi_write_reg+0x124>)
   25388:	4929      	ldr	r1, [pc, #164]	; (25430 <spi_write_reg+0x128>)
   2538a:	4b2a      	ldr	r3, [pc, #168]	; (25434 <spi_write_reg+0x12c>)
   2538c:	0018      	movs	r0, r3
   2538e:	4b2a      	ldr	r3, [pc, #168]	; (25438 <spi_write_reg+0x130>)
   25390:	4798      	blx	r3
   25392:	687a      	ldr	r2, [r7, #4]
   25394:	4b29      	ldr	r3, [pc, #164]	; (2543c <spi_write_reg+0x134>)
   25396:	0011      	movs	r1, r2
   25398:	0018      	movs	r0, r3
   2539a:	4b27      	ldr	r3, [pc, #156]	; (25438 <spi_write_reg+0x130>)
   2539c:	4798      	blx	r3
   2539e:	4b28      	ldr	r3, [pc, #160]	; (25440 <spi_write_reg+0x138>)
   253a0:	0018      	movs	r0, r3
   253a2:	4b25      	ldr	r3, [pc, #148]	; (25438 <spi_write_reg+0x130>)
   253a4:	4798      	blx	r3
		goto _FAIL_;
   253a6:	46c0      	nop			; (mov r8, r8)
	}

#endif
_FAIL_:
	if(result != N_OK)
   253a8:	230c      	movs	r3, #12
   253aa:	18fb      	adds	r3, r7, r3
   253ac:	781b      	ldrb	r3, [r3, #0]
   253ae:	b25b      	sxtb	r3, r3
   253b0:	2b01      	cmp	r3, #1
   253b2:	d030      	beq.n	25416 <spi_write_reg+0x10e>
	{
		nm_bsp_sleep(1);
   253b4:	2001      	movs	r0, #1
   253b6:	4b23      	ldr	r3, [pc, #140]	; (25444 <spi_write_reg+0x13c>)
   253b8:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   253ba:	2300      	movs	r3, #0
   253bc:	9300      	str	r3, [sp, #0]
   253be:	2300      	movs	r3, #0
   253c0:	2200      	movs	r2, #0
   253c2:	2100      	movs	r1, #0
   253c4:	20cf      	movs	r0, #207	; 0xcf
   253c6:	4c20      	ldr	r4, [pc, #128]	; (25448 <spi_write_reg+0x140>)
   253c8:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   253ca:	20cf      	movs	r0, #207	; 0xcf
   253cc:	4b1f      	ldr	r3, [pc, #124]	; (2544c <spi_write_reg+0x144>)
   253ce:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %lx\n",retry,addr,u32data);
   253d0:	23ea      	movs	r3, #234	; 0xea
   253d2:	009a      	lsls	r2, r3, #2
   253d4:	4916      	ldr	r1, [pc, #88]	; (25430 <spi_write_reg+0x128>)
   253d6:	4b17      	ldr	r3, [pc, #92]	; (25434 <spi_write_reg+0x12c>)
   253d8:	0018      	movs	r0, r3
   253da:	4b17      	ldr	r3, [pc, #92]	; (25438 <spi_write_reg+0x130>)
   253dc:	4798      	blx	r3
   253de:	230f      	movs	r3, #15
   253e0:	18fb      	adds	r3, r7, r3
   253e2:	7819      	ldrb	r1, [r3, #0]
   253e4:	683b      	ldr	r3, [r7, #0]
   253e6:	687a      	ldr	r2, [r7, #4]
   253e8:	4819      	ldr	r0, [pc, #100]	; (25450 <spi_write_reg+0x148>)
   253ea:	4c13      	ldr	r4, [pc, #76]	; (25438 <spi_write_reg+0x130>)
   253ec:	47a0      	blx	r4
   253ee:	4b14      	ldr	r3, [pc, #80]	; (25440 <spi_write_reg+0x138>)
   253f0:	0018      	movs	r0, r3
   253f2:	4b11      	ldr	r3, [pc, #68]	; (25438 <spi_write_reg+0x130>)
   253f4:	4798      	blx	r3
		nm_bsp_sleep(1);
   253f6:	2001      	movs	r0, #1
   253f8:	4b12      	ldr	r3, [pc, #72]	; (25444 <spi_write_reg+0x13c>)
   253fa:	4798      	blx	r3
		retry--;
   253fc:	230f      	movs	r3, #15
   253fe:	18fb      	adds	r3, r7, r3
   25400:	781a      	ldrb	r2, [r3, #0]
   25402:	230f      	movs	r3, #15
   25404:	18fb      	adds	r3, r7, r3
   25406:	3a01      	subs	r2, #1
   25408:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   2540a:	230f      	movs	r3, #15
   2540c:	18fb      	adds	r3, r7, r3
   2540e:	781b      	ldrb	r3, [r3, #0]
   25410:	2b00      	cmp	r3, #0
   25412:	d000      	beq.n	25416 <spi_write_reg+0x10e>
   25414:	e78d      	b.n	25332 <spi_write_reg+0x2a>
	}

	return result;
   25416:	230c      	movs	r3, #12
   25418:	18fb      	adds	r3, r7, r3
   2541a:	781b      	ldrb	r3, [r3, #0]
   2541c:	b25b      	sxtb	r3, r3
}
   2541e:	0018      	movs	r0, r3
   25420:	46bd      	mov	sp, r7
   25422:	b005      	add	sp, #20
   25424:	bd90      	pop	{r4, r7, pc}
   25426:	46c0      	nop			; (mov r8, r8)
   25428:	0002483d 	.word	0x0002483d
   2542c:	0000039d 	.word	0x0000039d
   25430:	0003a4b0 	.word	0x0003a4b0
   25434:	00039e78 	.word	0x00039e78
   25438:	0001ed29 	.word	0x0001ed29
   2543c:	0003a1e4 	.word	0x0003a1e4
   25440:	00039eb8 	.word	0x00039eb8
   25444:	0002117d 	.word	0x0002117d
   25448:	000242c1 	.word	0x000242c1
   2544c:	00024701 	.word	0x00024701
   25450:	0003a210 	.word	0x0003a210

00025454 <nm_spi_write>:

static sint8 nm_spi_write(uint32 addr, uint8 *buf, uint16 size)
{
   25454:	b590      	push	{r4, r7, lr}
   25456:	b089      	sub	sp, #36	; 0x24
   25458:	af02      	add	r7, sp, #8
   2545a:	60f8      	str	r0, [r7, #12]
   2545c:	60b9      	str	r1, [r7, #8]
   2545e:	1dbb      	adds	r3, r7, #6
   25460:	801a      	strh	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   25462:	2316      	movs	r3, #22
   25464:	18fb      	adds	r3, r7, r3
   25466:	220a      	movs	r2, #10
   25468:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_WRITE;
   2546a:	2315      	movs	r3, #21
   2546c:	18fb      	adds	r3, r7, r3
   2546e:	22c7      	movs	r2, #199	; 0xc7
   25470:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, NULL, size, 0);
   25472:	1dbb      	adds	r3, r7, #6
   25474:	881a      	ldrh	r2, [r3, #0]
   25476:	68f9      	ldr	r1, [r7, #12]
   25478:	2315      	movs	r3, #21
   2547a:	18fb      	adds	r3, r7, r3
   2547c:	7818      	ldrb	r0, [r3, #0]
   2547e:	2300      	movs	r3, #0
   25480:	9300      	str	r3, [sp, #0]
   25482:	0013      	movs	r3, r2
   25484:	2200      	movs	r2, #0
   25486:	4c4d      	ldr	r4, [pc, #308]	; (255bc <nm_spi_write+0x168>)
   25488:	47a0      	blx	r4
   2548a:	0002      	movs	r2, r0
   2548c:	2317      	movs	r3, #23
   2548e:	18fb      	adds	r3, r7, r3
   25490:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   25492:	2317      	movs	r3, #23
   25494:	18fb      	adds	r3, r7, r3
   25496:	781b      	ldrb	r3, [r3, #0]
   25498:	b25b      	sxtb	r3, r3
   2549a:	2b01      	cmp	r3, #1
   2549c:	d010      	beq.n	254c0 <nm_spi_write+0x6c>
		M2M_ERR( "[nmi spi]: Failed cmd, write block (%08x)...\n", addr);
   2549e:	4a48      	ldr	r2, [pc, #288]	; (255c0 <nm_spi_write+0x16c>)
   254a0:	4948      	ldr	r1, [pc, #288]	; (255c4 <nm_spi_write+0x170>)
   254a2:	4b49      	ldr	r3, [pc, #292]	; (255c8 <nm_spi_write+0x174>)
   254a4:	0018      	movs	r0, r3
   254a6:	4b49      	ldr	r3, [pc, #292]	; (255cc <nm_spi_write+0x178>)
   254a8:	4798      	blx	r3
   254aa:	68fa      	ldr	r2, [r7, #12]
   254ac:	4b48      	ldr	r3, [pc, #288]	; (255d0 <nm_spi_write+0x17c>)
   254ae:	0011      	movs	r1, r2
   254b0:	0018      	movs	r0, r3
   254b2:	4b46      	ldr	r3, [pc, #280]	; (255cc <nm_spi_write+0x178>)
   254b4:	4798      	blx	r3
   254b6:	4b47      	ldr	r3, [pc, #284]	; (255d4 <nm_spi_write+0x180>)
   254b8:	0018      	movs	r0, r3
   254ba:	4b44      	ldr	r3, [pc, #272]	; (255cc <nm_spi_write+0x178>)
   254bc:	4798      	blx	r3
		goto _FAIL_;
   254be:	e03e      	b.n	2553e <nm_spi_write+0xea>
#endif

	/**
		Data
	**/
	result = spi_data_write(buf, size);
   254c0:	2317      	movs	r3, #23
   254c2:	18fc      	adds	r4, r7, r3
   254c4:	1dbb      	adds	r3, r7, #6
   254c6:	881a      	ldrh	r2, [r3, #0]
   254c8:	68bb      	ldr	r3, [r7, #8]
   254ca:	0011      	movs	r1, r2
   254cc:	0018      	movs	r0, r3
   254ce:	4b42      	ldr	r3, [pc, #264]	; (255d8 <nm_spi_write+0x184>)
   254d0:	4798      	blx	r3
   254d2:	0003      	movs	r3, r0
   254d4:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   254d6:	2317      	movs	r3, #23
   254d8:	18fb      	adds	r3, r7, r3
   254da:	781b      	ldrb	r3, [r3, #0]
   254dc:	b25b      	sxtb	r3, r3
   254de:	2b01      	cmp	r3, #1
   254e0:	d00e      	beq.n	25500 <nm_spi_write+0xac>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   254e2:	4a3e      	ldr	r2, [pc, #248]	; (255dc <nm_spi_write+0x188>)
   254e4:	4937      	ldr	r1, [pc, #220]	; (255c4 <nm_spi_write+0x170>)
   254e6:	4b38      	ldr	r3, [pc, #224]	; (255c8 <nm_spi_write+0x174>)
   254e8:	0018      	movs	r0, r3
   254ea:	4b38      	ldr	r3, [pc, #224]	; (255cc <nm_spi_write+0x178>)
   254ec:	4798      	blx	r3
   254ee:	4b3c      	ldr	r3, [pc, #240]	; (255e0 <nm_spi_write+0x18c>)
   254f0:	0018      	movs	r0, r3
   254f2:	4b36      	ldr	r3, [pc, #216]	; (255cc <nm_spi_write+0x178>)
   254f4:	4798      	blx	r3
   254f6:	4b37      	ldr	r3, [pc, #220]	; (255d4 <nm_spi_write+0x180>)
   254f8:	0018      	movs	r0, r3
   254fa:	4b34      	ldr	r3, [pc, #208]	; (255cc <nm_spi_write+0x178>)
   254fc:	4798      	blx	r3
		goto _FAIL_;
   254fe:	e01e      	b.n	2553e <nm_spi_write+0xea>
	}
	/**
		Data RESP
	**/
	result = spi_data_rsp(cmd);
   25500:	2317      	movs	r3, #23
   25502:	18fc      	adds	r4, r7, r3
   25504:	2315      	movs	r3, #21
   25506:	18fb      	adds	r3, r7, r3
   25508:	781b      	ldrb	r3, [r3, #0]
   2550a:	0018      	movs	r0, r3
   2550c:	4b35      	ldr	r3, [pc, #212]	; (255e4 <nm_spi_write+0x190>)
   2550e:	4798      	blx	r3
   25510:	0003      	movs	r3, r0
   25512:	7023      	strb	r3, [r4, #0]
	if (result != N_OK) {
   25514:	2317      	movs	r3, #23
   25516:	18fb      	adds	r3, r7, r3
   25518:	781b      	ldrb	r3, [r3, #0]
   2551a:	b25b      	sxtb	r3, r3
   2551c:	2b01      	cmp	r3, #1
   2551e:	d00e      	beq.n	2553e <nm_spi_write+0xea>
		M2M_ERR("[nmi spi]: Failed block data write...\n");
   25520:	4a31      	ldr	r2, [pc, #196]	; (255e8 <nm_spi_write+0x194>)
   25522:	4928      	ldr	r1, [pc, #160]	; (255c4 <nm_spi_write+0x170>)
   25524:	4b28      	ldr	r3, [pc, #160]	; (255c8 <nm_spi_write+0x174>)
   25526:	0018      	movs	r0, r3
   25528:	4b28      	ldr	r3, [pc, #160]	; (255cc <nm_spi_write+0x178>)
   2552a:	4798      	blx	r3
   2552c:	4b2c      	ldr	r3, [pc, #176]	; (255e0 <nm_spi_write+0x18c>)
   2552e:	0018      	movs	r0, r3
   25530:	4b26      	ldr	r3, [pc, #152]	; (255cc <nm_spi_write+0x178>)
   25532:	4798      	blx	r3
   25534:	4b27      	ldr	r3, [pc, #156]	; (255d4 <nm_spi_write+0x180>)
   25536:	0018      	movs	r0, r3
   25538:	4b24      	ldr	r3, [pc, #144]	; (255cc <nm_spi_write+0x178>)
   2553a:	4798      	blx	r3
		goto _FAIL_;
   2553c:	46c0      	nop			; (mov r8, r8)
	}
	
_FAIL_:
	if(result != N_OK)
   2553e:	2317      	movs	r3, #23
   25540:	18fb      	adds	r3, r7, r3
   25542:	781b      	ldrb	r3, [r3, #0]
   25544:	b25b      	sxtb	r3, r3
   25546:	2b01      	cmp	r3, #1
   25548:	d030      	beq.n	255ac <nm_spi_write+0x158>
	{
		nm_bsp_sleep(1);
   2554a:	2001      	movs	r0, #1
   2554c:	4b27      	ldr	r3, [pc, #156]	; (255ec <nm_spi_write+0x198>)
   2554e:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   25550:	2300      	movs	r3, #0
   25552:	9300      	str	r3, [sp, #0]
   25554:	2300      	movs	r3, #0
   25556:	2200      	movs	r2, #0
   25558:	2100      	movs	r1, #0
   2555a:	20cf      	movs	r0, #207	; 0xcf
   2555c:	4c24      	ldr	r4, [pc, #144]	; (255f0 <nm_spi_write+0x19c>)
   2555e:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   25560:	20cf      	movs	r0, #207	; 0xcf
   25562:	4b24      	ldr	r3, [pc, #144]	; (255f4 <nm_spi_write+0x1a0>)
   25564:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   25566:	4a24      	ldr	r2, [pc, #144]	; (255f8 <nm_spi_write+0x1a4>)
   25568:	4916      	ldr	r1, [pc, #88]	; (255c4 <nm_spi_write+0x170>)
   2556a:	4b17      	ldr	r3, [pc, #92]	; (255c8 <nm_spi_write+0x174>)
   2556c:	0018      	movs	r0, r3
   2556e:	4b17      	ldr	r3, [pc, #92]	; (255cc <nm_spi_write+0x178>)
   25570:	4798      	blx	r3
   25572:	2316      	movs	r3, #22
   25574:	18fb      	adds	r3, r7, r3
   25576:	7819      	ldrb	r1, [r3, #0]
   25578:	1dbb      	adds	r3, r7, #6
   2557a:	881b      	ldrh	r3, [r3, #0]
   2557c:	68fa      	ldr	r2, [r7, #12]
   2557e:	481f      	ldr	r0, [pc, #124]	; (255fc <nm_spi_write+0x1a8>)
   25580:	4c12      	ldr	r4, [pc, #72]	; (255cc <nm_spi_write+0x178>)
   25582:	47a0      	blx	r4
   25584:	4b13      	ldr	r3, [pc, #76]	; (255d4 <nm_spi_write+0x180>)
   25586:	0018      	movs	r0, r3
   25588:	4b10      	ldr	r3, [pc, #64]	; (255cc <nm_spi_write+0x178>)
   2558a:	4798      	blx	r3
		nm_bsp_sleep(1);
   2558c:	2001      	movs	r0, #1
   2558e:	4b17      	ldr	r3, [pc, #92]	; (255ec <nm_spi_write+0x198>)
   25590:	4798      	blx	r3
		retry--;
   25592:	2316      	movs	r3, #22
   25594:	18fb      	adds	r3, r7, r3
   25596:	781a      	ldrb	r2, [r3, #0]
   25598:	2316      	movs	r3, #22
   2559a:	18fb      	adds	r3, r7, r3
   2559c:	3a01      	subs	r2, #1
   2559e:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   255a0:	2316      	movs	r3, #22
   255a2:	18fb      	adds	r3, r7, r3
   255a4:	781b      	ldrb	r3, [r3, #0]
   255a6:	2b00      	cmp	r3, #0
   255a8:	d000      	beq.n	255ac <nm_spi_write+0x158>
   255aa:	e762      	b.n	25472 <nm_spi_write+0x1e>
	}


	return result;
   255ac:	2317      	movs	r3, #23
   255ae:	18fb      	adds	r3, r7, r3
   255b0:	781b      	ldrb	r3, [r3, #0]
   255b2:	b25b      	sxtb	r3, r3
}
   255b4:	0018      	movs	r0, r3
   255b6:	46bd      	mov	sp, r7
   255b8:	b007      	add	sp, #28
   255ba:	bd90      	pop	{r4, r7, pc}
   255bc:	0002483d 	.word	0x0002483d
   255c0:	000003cf 	.word	0x000003cf
   255c4:	0003a4c0 	.word	0x0003a4c0
   255c8:	00039e78 	.word	0x00039e78
   255cc:	0001ed29 	.word	0x0001ed29
   255d0:	0003a22c 	.word	0x0003a22c
   255d4:	00039eb8 	.word	0x00039eb8
   255d8:	00025131 	.word	0x00025131
   255dc:	000003d9 	.word	0x000003d9
   255e0:	0003a25c 	.word	0x0003a25c
   255e4:	00024601 	.word	0x00024601
   255e8:	000003e1 	.word	0x000003e1
   255ec:	0002117d 	.word	0x0002117d
   255f0:	000242c1 	.word	0x000242c1
   255f4:	00024701 	.word	0x00024701
   255f8:	000003eb 	.word	0x000003eb
   255fc:	0003a284 	.word	0x0003a284

00025600 <spi_read_reg>:

static sint8 spi_read_reg(uint32 addr, uint32 *u32data)
{
   25600:	b590      	push	{r4, r7, lr}
   25602:	b087      	sub	sp, #28
   25604:	af02      	add	r7, sp, #8
   25606:	6078      	str	r0, [r7, #4]
   25608:	6039      	str	r1, [r7, #0]
	uint8 retry = SPI_RETRY_COUNT;
   2560a:	230f      	movs	r3, #15
   2560c:	18fb      	adds	r3, r7, r3
   2560e:	220a      	movs	r2, #10
   25610:	701a      	strb	r2, [r3, #0]
	sint8 result = N_OK;
   25612:	230c      	movs	r3, #12
   25614:	18fb      	adds	r3, r7, r3
   25616:	2201      	movs	r2, #1
   25618:	701a      	strb	r2, [r3, #0]
	uint8 cmd = CMD_SINGLE_READ;
   2561a:	230e      	movs	r3, #14
   2561c:	18fb      	adds	r3, r7, r3
   2561e:	22ca      	movs	r2, #202	; 0xca
   25620:	701a      	strb	r2, [r3, #0]
	uint8 tmp[4];
	uint8 clockless = 0;
   25622:	230d      	movs	r3, #13
   25624:	18fb      	adds	r3, r7, r3
   25626:	2200      	movs	r2, #0
   25628:	701a      	strb	r2, [r3, #0]

_RETRY_:

	if (addr <= 0xff)
   2562a:	687b      	ldr	r3, [r7, #4]
   2562c:	2bff      	cmp	r3, #255	; 0xff
   2562e:	d808      	bhi.n	25642 <spi_read_reg+0x42>
	{
		/**
		NMC1000 clockless registers.
		**/
		cmd = CMD_INTERNAL_READ;
   25630:	230e      	movs	r3, #14
   25632:	18fb      	adds	r3, r7, r3
   25634:	22c4      	movs	r2, #196	; 0xc4
   25636:	701a      	strb	r2, [r3, #0]
		clockless = 1;
   25638:	230d      	movs	r3, #13
   2563a:	18fb      	adds	r3, r7, r3
   2563c:	2201      	movs	r2, #1
   2563e:	701a      	strb	r2, [r3, #0]
   25640:	e007      	b.n	25652 <spi_read_reg+0x52>
	}
	else
	{
		cmd = CMD_SINGLE_READ;
   25642:	230e      	movs	r3, #14
   25644:	18fb      	adds	r3, r7, r3
   25646:	22ca      	movs	r2, #202	; 0xca
   25648:	701a      	strb	r2, [r3, #0]
		clockless = 0;
   2564a:	230d      	movs	r3, #13
   2564c:	18fb      	adds	r3, r7, r3
   2564e:	2200      	movs	r2, #0
   25650:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, (uint8*)&tmp[0], 4, clockless);
   25652:	2308      	movs	r3, #8
   25654:	18fa      	adds	r2, r7, r3
   25656:	6879      	ldr	r1, [r7, #4]
   25658:	230e      	movs	r3, #14
   2565a:	18fb      	adds	r3, r7, r3
   2565c:	7818      	ldrb	r0, [r3, #0]
   2565e:	230d      	movs	r3, #13
   25660:	18fb      	adds	r3, r7, r3
   25662:	781b      	ldrb	r3, [r3, #0]
   25664:	9300      	str	r3, [sp, #0]
   25666:	2304      	movs	r3, #4
   25668:	4c37      	ldr	r4, [pc, #220]	; (25748 <spi_read_reg+0x148>)
   2566a:	47a0      	blx	r4
   2566c:	0002      	movs	r2, r0
   2566e:	230c      	movs	r3, #12
   25670:	18fb      	adds	r3, r7, r3
   25672:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   25674:	230c      	movs	r3, #12
   25676:	18fb      	adds	r3, r7, r3
   25678:	781b      	ldrb	r3, [r3, #0]
   2567a:	b25b      	sxtb	r3, r3
   2567c:	2b01      	cmp	r3, #1
   2567e:	d010      	beq.n	256a2 <spi_read_reg+0xa2>
		M2M_ERR( "[nmi spi]: Failed cmd, read reg (%08x)...\n", addr);
   25680:	4a32      	ldr	r2, [pc, #200]	; (2574c <spi_read_reg+0x14c>)
   25682:	4933      	ldr	r1, [pc, #204]	; (25750 <spi_read_reg+0x150>)
   25684:	4b33      	ldr	r3, [pc, #204]	; (25754 <spi_read_reg+0x154>)
   25686:	0018      	movs	r0, r3
   25688:	4b33      	ldr	r3, [pc, #204]	; (25758 <spi_read_reg+0x158>)
   2568a:	4798      	blx	r3
   2568c:	687a      	ldr	r2, [r7, #4]
   2568e:	4b33      	ldr	r3, [pc, #204]	; (2575c <spi_read_reg+0x15c>)
   25690:	0011      	movs	r1, r2
   25692:	0018      	movs	r0, r3
   25694:	4b30      	ldr	r3, [pc, #192]	; (25758 <spi_read_reg+0x158>)
   25696:	4798      	blx	r3
   25698:	4b31      	ldr	r3, [pc, #196]	; (25760 <spi_read_reg+0x160>)
   2569a:	0018      	movs	r0, r3
   2569c:	4b2e      	ldr	r3, [pc, #184]	; (25758 <spi_read_reg+0x158>)
   2569e:	4798      	blx	r3
		goto _FAIL_;
   256a0:	e014      	b.n	256cc <spi_read_reg+0xcc>
	}

#endif

	*u32data = tmp[0] |
   256a2:	2308      	movs	r3, #8
   256a4:	18fb      	adds	r3, r7, r3
   256a6:	781b      	ldrb	r3, [r3, #0]
   256a8:	001a      	movs	r2, r3
		((uint32)tmp[1] << 8) |
   256aa:	2308      	movs	r3, #8
   256ac:	18fb      	adds	r3, r7, r3
   256ae:	785b      	ldrb	r3, [r3, #1]
   256b0:	021b      	lsls	r3, r3, #8
	*u32data = tmp[0] |
   256b2:	431a      	orrs	r2, r3
		((uint32)tmp[2] << 16) |
   256b4:	2308      	movs	r3, #8
   256b6:	18fb      	adds	r3, r7, r3
   256b8:	789b      	ldrb	r3, [r3, #2]
   256ba:	041b      	lsls	r3, r3, #16
		((uint32)tmp[1] << 8) |
   256bc:	431a      	orrs	r2, r3
		((uint32)tmp[3] << 24);
   256be:	2308      	movs	r3, #8
   256c0:	18fb      	adds	r3, r7, r3
   256c2:	78db      	ldrb	r3, [r3, #3]
   256c4:	061b      	lsls	r3, r3, #24
		((uint32)tmp[2] << 16) |
   256c6:	431a      	orrs	r2, r3
	*u32data = tmp[0] |
   256c8:	683b      	ldr	r3, [r7, #0]
   256ca:	601a      	str	r2, [r3, #0]
		
_FAIL_:
	if(result != N_OK)
   256cc:	230c      	movs	r3, #12
   256ce:	18fb      	adds	r3, r7, r3
   256d0:	781b      	ldrb	r3, [r3, #0]
   256d2:	b25b      	sxtb	r3, r3
   256d4:	2b01      	cmp	r3, #1
   256d6:	d02f      	beq.n	25738 <spi_read_reg+0x138>
	{
		
		nm_bsp_sleep(1);
   256d8:	2001      	movs	r0, #1
   256da:	4b22      	ldr	r3, [pc, #136]	; (25764 <spi_read_reg+0x164>)
   256dc:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   256de:	2300      	movs	r3, #0
   256e0:	9300      	str	r3, [sp, #0]
   256e2:	2300      	movs	r3, #0
   256e4:	2200      	movs	r2, #0
   256e6:	2100      	movs	r1, #0
   256e8:	20cf      	movs	r0, #207	; 0xcf
   256ea:	4c1f      	ldr	r4, [pc, #124]	; (25768 <spi_read_reg+0x168>)
   256ec:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   256ee:	20cf      	movs	r0, #207	; 0xcf
   256f0:	4b1e      	ldr	r3, [pc, #120]	; (2576c <spi_read_reg+0x16c>)
   256f2:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx\n",retry,addr);
   256f4:	4a1e      	ldr	r2, [pc, #120]	; (25770 <spi_read_reg+0x170>)
   256f6:	4916      	ldr	r1, [pc, #88]	; (25750 <spi_read_reg+0x150>)
   256f8:	4b16      	ldr	r3, [pc, #88]	; (25754 <spi_read_reg+0x154>)
   256fa:	0018      	movs	r0, r3
   256fc:	4b16      	ldr	r3, [pc, #88]	; (25758 <spi_read_reg+0x158>)
   256fe:	4798      	blx	r3
   25700:	230f      	movs	r3, #15
   25702:	18fb      	adds	r3, r7, r3
   25704:	7819      	ldrb	r1, [r3, #0]
   25706:	687a      	ldr	r2, [r7, #4]
   25708:	4b1a      	ldr	r3, [pc, #104]	; (25774 <spi_read_reg+0x174>)
   2570a:	0018      	movs	r0, r3
   2570c:	4b12      	ldr	r3, [pc, #72]	; (25758 <spi_read_reg+0x158>)
   2570e:	4798      	blx	r3
   25710:	4b13      	ldr	r3, [pc, #76]	; (25760 <spi_read_reg+0x160>)
   25712:	0018      	movs	r0, r3
   25714:	4b10      	ldr	r3, [pc, #64]	; (25758 <spi_read_reg+0x158>)
   25716:	4798      	blx	r3
		nm_bsp_sleep(1);
   25718:	2001      	movs	r0, #1
   2571a:	4b12      	ldr	r3, [pc, #72]	; (25764 <spi_read_reg+0x164>)
   2571c:	4798      	blx	r3
		retry--;
   2571e:	230f      	movs	r3, #15
   25720:	18fb      	adds	r3, r7, r3
   25722:	781a      	ldrb	r2, [r3, #0]
   25724:	230f      	movs	r3, #15
   25726:	18fb      	adds	r3, r7, r3
   25728:	3a01      	subs	r2, #1
   2572a:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   2572c:	230f      	movs	r3, #15
   2572e:	18fb      	adds	r3, r7, r3
   25730:	781b      	ldrb	r3, [r3, #0]
   25732:	2b00      	cmp	r3, #0
   25734:	d000      	beq.n	25738 <spi_read_reg+0x138>
   25736:	e778      	b.n	2562a <spi_read_reg+0x2a>
	}
		
	return result;
   25738:	230c      	movs	r3, #12
   2573a:	18fb      	adds	r3, r7, r3
   2573c:	781b      	ldrb	r3, [r3, #0]
   2573e:	b25b      	sxtb	r3, r3
}
   25740:	0018      	movs	r0, r3
   25742:	46bd      	mov	sp, r7
   25744:	b005      	add	sp, #20
   25746:	bd90      	pop	{r4, r7, pc}
   25748:	0002483d 	.word	0x0002483d
   2574c:	00000423 	.word	0x00000423
   25750:	0003a4d0 	.word	0x0003a4d0
   25754:	00039e78 	.word	0x00039e78
   25758:	0001ed29 	.word	0x0001ed29
   2575c:	0003a2a0 	.word	0x0003a2a0
   25760:	00039eb8 	.word	0x00039eb8
   25764:	0002117d 	.word	0x0002117d
   25768:	000242c1 	.word	0x000242c1
   2576c:	00024701 	.word	0x00024701
   25770:	00000435 	.word	0x00000435
   25774:	0003a2cc 	.word	0x0003a2cc

00025778 <nm_spi_read>:

static sint8 nm_spi_read(uint32 addr, uint8 *buf, uint16 size)
{
   25778:	b590      	push	{r4, r7, lr}
   2577a:	b089      	sub	sp, #36	; 0x24
   2577c:	af02      	add	r7, sp, #8
   2577e:	60f8      	str	r0, [r7, #12]
   25780:	60b9      	str	r1, [r7, #8]
   25782:	1dbb      	adds	r3, r7, #6
   25784:	801a      	strh	r2, [r3, #0]
	uint8 cmd = CMD_DMA_EXT_READ;
   25786:	2316      	movs	r3, #22
   25788:	18fb      	adds	r3, r7, r3
   2578a:	22c8      	movs	r2, #200	; 0xc8
   2578c:	701a      	strb	r2, [r3, #0]
	sint8 result;
	uint8 retry = SPI_RETRY_COUNT;
   2578e:	2317      	movs	r3, #23
   25790:	18fb      	adds	r3, r7, r3
   25792:	220a      	movs	r2, #10
   25794:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
		M2M_ERR("[nmi spi]: Failed block data read...\n");
		goto _FAIL_;
	}
#else
	result = spi_cmd_complete(cmd, addr, buf, size, 0);
   25796:	1dbb      	adds	r3, r7, #6
   25798:	881c      	ldrh	r4, [r3, #0]
   2579a:	68ba      	ldr	r2, [r7, #8]
   2579c:	68f9      	ldr	r1, [r7, #12]
   2579e:	2316      	movs	r3, #22
   257a0:	18fb      	adds	r3, r7, r3
   257a2:	7818      	ldrb	r0, [r3, #0]
   257a4:	2300      	movs	r3, #0
   257a6:	9300      	str	r3, [sp, #0]
   257a8:	0023      	movs	r3, r4
   257aa:	4c2e      	ldr	r4, [pc, #184]	; (25864 <nm_spi_read+0xec>)
   257ac:	47a0      	blx	r4
   257ae:	0002      	movs	r2, r0
   257b0:	2315      	movs	r3, #21
   257b2:	18fb      	adds	r3, r7, r3
   257b4:	701a      	strb	r2, [r3, #0]
	if (result != N_OK) {
   257b6:	2315      	movs	r3, #21
   257b8:	18fb      	adds	r3, r7, r3
   257ba:	781b      	ldrb	r3, [r3, #0]
   257bc:	b25b      	sxtb	r3, r3
   257be:	2b01      	cmp	r3, #1
   257c0:	d010      	beq.n	257e4 <nm_spi_read+0x6c>
		M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", addr);
   257c2:	4a29      	ldr	r2, [pc, #164]	; (25868 <nm_spi_read+0xf0>)
   257c4:	4929      	ldr	r1, [pc, #164]	; (2586c <nm_spi_read+0xf4>)
   257c6:	4b2a      	ldr	r3, [pc, #168]	; (25870 <nm_spi_read+0xf8>)
   257c8:	0018      	movs	r0, r3
   257ca:	4b2a      	ldr	r3, [pc, #168]	; (25874 <nm_spi_read+0xfc>)
   257cc:	4798      	blx	r3
   257ce:	68fa      	ldr	r2, [r7, #12]
   257d0:	4b29      	ldr	r3, [pc, #164]	; (25878 <nm_spi_read+0x100>)
   257d2:	0011      	movs	r1, r2
   257d4:	0018      	movs	r0, r3
   257d6:	4b27      	ldr	r3, [pc, #156]	; (25874 <nm_spi_read+0xfc>)
   257d8:	4798      	blx	r3
   257da:	4b28      	ldr	r3, [pc, #160]	; (2587c <nm_spi_read+0x104>)
   257dc:	0018      	movs	r0, r3
   257de:	4b25      	ldr	r3, [pc, #148]	; (25874 <nm_spi_read+0xfc>)
   257e0:	4798      	blx	r3
		goto _FAIL_;
   257e2:	46c0      	nop			; (mov r8, r8)
	}
#endif

_FAIL_:
	if(result != N_OK)
   257e4:	2315      	movs	r3, #21
   257e6:	18fb      	adds	r3, r7, r3
   257e8:	781b      	ldrb	r3, [r3, #0]
   257ea:	b25b      	sxtb	r3, r3
   257ec:	2b01      	cmp	r3, #1
   257ee:	d030      	beq.n	25852 <nm_spi_read+0xda>
	{
		nm_bsp_sleep(1);
   257f0:	2001      	movs	r0, #1
   257f2:	4b23      	ldr	r3, [pc, #140]	; (25880 <nm_spi_read+0x108>)
   257f4:	4798      	blx	r3
		spi_cmd(CMD_RESET, 0, 0, 0, 0);
   257f6:	2300      	movs	r3, #0
   257f8:	9300      	str	r3, [sp, #0]
   257fa:	2300      	movs	r3, #0
   257fc:	2200      	movs	r2, #0
   257fe:	2100      	movs	r1, #0
   25800:	20cf      	movs	r0, #207	; 0xcf
   25802:	4c20      	ldr	r4, [pc, #128]	; (25884 <nm_spi_read+0x10c>)
   25804:	47a0      	blx	r4
		spi_cmd_rsp(CMD_RESET);
   25806:	20cf      	movs	r0, #207	; 0xcf
   25808:	4b1f      	ldr	r3, [pc, #124]	; (25888 <nm_spi_read+0x110>)
   2580a:	4798      	blx	r3
		M2M_ERR("Reset and retry %d %lx %d\n",retry,addr,size);
   2580c:	4a1f      	ldr	r2, [pc, #124]	; (2588c <nm_spi_read+0x114>)
   2580e:	4917      	ldr	r1, [pc, #92]	; (2586c <nm_spi_read+0xf4>)
   25810:	4b17      	ldr	r3, [pc, #92]	; (25870 <nm_spi_read+0xf8>)
   25812:	0018      	movs	r0, r3
   25814:	4b17      	ldr	r3, [pc, #92]	; (25874 <nm_spi_read+0xfc>)
   25816:	4798      	blx	r3
   25818:	2317      	movs	r3, #23
   2581a:	18fb      	adds	r3, r7, r3
   2581c:	7819      	ldrb	r1, [r3, #0]
   2581e:	1dbb      	adds	r3, r7, #6
   25820:	881b      	ldrh	r3, [r3, #0]
   25822:	68fa      	ldr	r2, [r7, #12]
   25824:	481a      	ldr	r0, [pc, #104]	; (25890 <nm_spi_read+0x118>)
   25826:	4c13      	ldr	r4, [pc, #76]	; (25874 <nm_spi_read+0xfc>)
   25828:	47a0      	blx	r4
   2582a:	4b14      	ldr	r3, [pc, #80]	; (2587c <nm_spi_read+0x104>)
   2582c:	0018      	movs	r0, r3
   2582e:	4b11      	ldr	r3, [pc, #68]	; (25874 <nm_spi_read+0xfc>)
   25830:	4798      	blx	r3
		nm_bsp_sleep(1);
   25832:	2001      	movs	r0, #1
   25834:	4b12      	ldr	r3, [pc, #72]	; (25880 <nm_spi_read+0x108>)
   25836:	4798      	blx	r3
		retry--;
   25838:	2317      	movs	r3, #23
   2583a:	18fb      	adds	r3, r7, r3
   2583c:	781a      	ldrb	r2, [r3, #0]
   2583e:	2317      	movs	r3, #23
   25840:	18fb      	adds	r3, r7, r3
   25842:	3a01      	subs	r2, #1
   25844:	701a      	strb	r2, [r3, #0]
		if(retry) goto _RETRY_;
   25846:	2317      	movs	r3, #23
   25848:	18fb      	adds	r3, r7, r3
   2584a:	781b      	ldrb	r3, [r3, #0]
   2584c:	2b00      	cmp	r3, #0
   2584e:	d000      	beq.n	25852 <nm_spi_read+0xda>
   25850:	e7a1      	b.n	25796 <nm_spi_read+0x1e>
	}

	return result;
   25852:	2315      	movs	r3, #21
   25854:	18fb      	adds	r3, r7, r3
   25856:	781b      	ldrb	r3, [r3, #0]
   25858:	b25b      	sxtb	r3, r3
}
   2585a:	0018      	movs	r0, r3
   2585c:	46bd      	mov	sp, r7
   2585e:	b007      	add	sp, #28
   25860:	bd90      	pop	{r4, r7, pc}
   25862:	46c0      	nop			; (mov r8, r8)
   25864:	0002483d 	.word	0x0002483d
   25868:	00000472 	.word	0x00000472
   2586c:	0003a4e0 	.word	0x0003a4e0
   25870:	00039e78 	.word	0x00039e78
   25874:	0001ed29 	.word	0x0001ed29
   25878:	0003a2e4 	.word	0x0003a2e4
   2587c:	00039eb8 	.word	0x00039eb8
   25880:	0002117d 	.word	0x0002117d
   25884:	000242c1 	.word	0x000242c1
   25888:	00024701 	.word	0x00024701
   2588c:	0000047d 	.word	0x0000047d
   25890:	0003a284 	.word	0x0003a284

00025894 <spi_init_pkt_sz>:
	Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
   25894:	b580      	push	{r7, lr}
   25896:	b082      	sub	sp, #8
   25898:	af00      	add	r7, sp, #0
	uint32 val32;

	/* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
	val32 = nm_spi_read_reg(SPI_BASE+0x24);
   2589a:	4b0c      	ldr	r3, [pc, #48]	; (258cc <spi_init_pkt_sz+0x38>)
   2589c:	0018      	movs	r0, r3
   2589e:	4b0c      	ldr	r3, [pc, #48]	; (258d0 <spi_init_pkt_sz+0x3c>)
   258a0:	4798      	blx	r3
   258a2:	0003      	movs	r3, r0
   258a4:	607b      	str	r3, [r7, #4]
	val32 &= ~(0x7 << 4);
   258a6:	687b      	ldr	r3, [r7, #4]
   258a8:	2270      	movs	r2, #112	; 0x70
   258aa:	4393      	bics	r3, r2
   258ac:	607b      	str	r3, [r7, #4]
	case 256:  val32 |= (0 << 4); break;
	case 512:  val32 |= (1 << 4); break;
	case 1024: val32 |= (2 << 4); break;
	case 2048: val32 |= (3 << 4); break;
	case 4096: val32 |= (4 << 4); break;
	case 8192: val32 |= (5 << 4); break;
   258ae:	687b      	ldr	r3, [r7, #4]
   258b0:	2250      	movs	r2, #80	; 0x50
   258b2:	4313      	orrs	r3, r2
   258b4:	607b      	str	r3, [r7, #4]
   258b6:	46c0      	nop			; (mov r8, r8)

	}
	nm_spi_write_reg(SPI_BASE+0x24, val32);
   258b8:	687b      	ldr	r3, [r7, #4]
   258ba:	4a04      	ldr	r2, [pc, #16]	; (258cc <spi_init_pkt_sz+0x38>)
   258bc:	0019      	movs	r1, r3
   258be:	0010      	movs	r0, r2
   258c0:	4b04      	ldr	r3, [pc, #16]	; (258d4 <spi_init_pkt_sz+0x40>)
   258c2:	4798      	blx	r3
}
   258c4:	46c0      	nop			; (mov r8, r8)
   258c6:	46bd      	mov	sp, r7
   258c8:	b002      	add	sp, #8
   258ca:	bd80      	pop	{r7, pc}
   258cc:	0000e824 	.word	0x0000e824
   258d0:	00025a6d 	.word	0x00025a6d
   258d4:	00025ae1 	.word	0x00025ae1

000258d8 <nm_spi_reset>:

sint8 nm_spi_reset(void)
{
   258d8:	b590      	push	{r4, r7, lr}
   258da:	b083      	sub	sp, #12
   258dc:	af02      	add	r7, sp, #8
	spi_cmd(CMD_RESET, 0, 0, 0, 0);
   258de:	2300      	movs	r3, #0
   258e0:	9300      	str	r3, [sp, #0]
   258e2:	2300      	movs	r3, #0
   258e4:	2200      	movs	r2, #0
   258e6:	2100      	movs	r1, #0
   258e8:	20cf      	movs	r0, #207	; 0xcf
   258ea:	4c05      	ldr	r4, [pc, #20]	; (25900 <nm_spi_reset+0x28>)
   258ec:	47a0      	blx	r4
	spi_cmd_rsp(CMD_RESET);
   258ee:	20cf      	movs	r0, #207	; 0xcf
   258f0:	4b04      	ldr	r3, [pc, #16]	; (25904 <nm_spi_reset+0x2c>)
   258f2:	4798      	blx	r3
	return M2M_SUCCESS;
   258f4:	2300      	movs	r3, #0
}
   258f6:	0018      	movs	r0, r3
   258f8:	46bd      	mov	sp, r7
   258fa:	b001      	add	sp, #4
   258fc:	bd90      	pop	{r4, r7, pc}
   258fe:	46c0      	nop			; (mov r8, r8)
   25900:	000242c1 	.word	0x000242c1
   25904:	00024701 	.word	0x00024701

00025908 <nm_spi_init>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_init(void)
{
   25908:	b580      	push	{r7, lr}
   2590a:	b082      	sub	sp, #8
   2590c:	af00      	add	r7, sp, #0
	uint32 chipid;
	uint32 reg = 0;
   2590e:	2300      	movs	r3, #0
   25910:	603b      	str	r3, [r7, #0]
	

	/**
		configure protocol
	**/
	gu8Crc_off = 0;
   25912:	4b40      	ldr	r3, [pc, #256]	; (25a14 <nm_spi_init+0x10c>)
   25914:	2200      	movs	r2, #0
   25916:	701a      	strb	r2, [r3, #0]

	// TODO: We can remove the CRC trials if there is a definite way to reset
	// the SPI to it's initial value.
	if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)) {
   25918:	003b      	movs	r3, r7
   2591a:	4a3f      	ldr	r2, [pc, #252]	; (25a18 <nm_spi_init+0x110>)
   2591c:	0019      	movs	r1, r3
   2591e:	0010      	movs	r0, r2
   25920:	4b3e      	ldr	r3, [pc, #248]	; (25a1c <nm_spi_init+0x114>)
   25922:	4798      	blx	r3
   25924:	1e03      	subs	r3, r0, #0
   25926:	d129      	bne.n	2597c <nm_spi_init+0x74>
		/* Read failed. Try with CRC off. This might happen when module
		is removed but chip isn't reset*/
		gu8Crc_off = 1;
   25928:	4b3a      	ldr	r3, [pc, #232]	; (25a14 <nm_spi_init+0x10c>)
   2592a:	2201      	movs	r2, #1
   2592c:	701a      	strb	r2, [r3, #0]
		M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retyring with CRC off...\n");
   2592e:	2398      	movs	r3, #152	; 0x98
   25930:	00da      	lsls	r2, r3, #3
   25932:	493b      	ldr	r1, [pc, #236]	; (25a20 <nm_spi_init+0x118>)
   25934:	4b3b      	ldr	r3, [pc, #236]	; (25a24 <nm_spi_init+0x11c>)
   25936:	0018      	movs	r0, r3
   25938:	4b3b      	ldr	r3, [pc, #236]	; (25a28 <nm_spi_init+0x120>)
   2593a:	4798      	blx	r3
   2593c:	4b3b      	ldr	r3, [pc, #236]	; (25a2c <nm_spi_init+0x124>)
   2593e:	0018      	movs	r0, r3
   25940:	4b39      	ldr	r3, [pc, #228]	; (25a28 <nm_spi_init+0x120>)
   25942:	4798      	blx	r3
   25944:	4b3a      	ldr	r3, [pc, #232]	; (25a30 <nm_spi_init+0x128>)
   25946:	0018      	movs	r0, r3
   25948:	4b37      	ldr	r3, [pc, #220]	; (25a28 <nm_spi_init+0x120>)
   2594a:	4798      	blx	r3
		if (!spi_read_reg(NMI_SPI_PROTOCOL_CONFIG, &reg)){
   2594c:	003b      	movs	r3, r7
   2594e:	4a32      	ldr	r2, [pc, #200]	; (25a18 <nm_spi_init+0x110>)
   25950:	0019      	movs	r1, r3
   25952:	0010      	movs	r0, r2
   25954:	4b31      	ldr	r3, [pc, #196]	; (25a1c <nm_spi_init+0x114>)
   25956:	4798      	blx	r3
   25958:	1e03      	subs	r3, r0, #0
   2595a:	d10f      	bne.n	2597c <nm_spi_init+0x74>
			// Reaad failed with both CRC on and off, something went bad
			M2M_ERR( "[nmi spi]: Failed internal read protocol...\n");
   2595c:	4a35      	ldr	r2, [pc, #212]	; (25a34 <nm_spi_init+0x12c>)
   2595e:	4930      	ldr	r1, [pc, #192]	; (25a20 <nm_spi_init+0x118>)
   25960:	4b30      	ldr	r3, [pc, #192]	; (25a24 <nm_spi_init+0x11c>)
   25962:	0018      	movs	r0, r3
   25964:	4b30      	ldr	r3, [pc, #192]	; (25a28 <nm_spi_init+0x120>)
   25966:	4798      	blx	r3
   25968:	4b33      	ldr	r3, [pc, #204]	; (25a38 <nm_spi_init+0x130>)
   2596a:	0018      	movs	r0, r3
   2596c:	4b2e      	ldr	r3, [pc, #184]	; (25a28 <nm_spi_init+0x120>)
   2596e:	4798      	blx	r3
   25970:	4b2f      	ldr	r3, [pc, #188]	; (25a30 <nm_spi_init+0x128>)
   25972:	0018      	movs	r0, r3
   25974:	4b2c      	ldr	r3, [pc, #176]	; (25a28 <nm_spi_init+0x120>)
   25976:	4798      	blx	r3
			return 0;
   25978:	2300      	movs	r3, #0
   2597a:	e047      	b.n	25a0c <nm_spi_init+0x104>
		}
	}
	if(gu8Crc_off == 0)
   2597c:	4b25      	ldr	r3, [pc, #148]	; (25a14 <nm_spi_init+0x10c>)
   2597e:	781b      	ldrb	r3, [r3, #0]
   25980:	2b00      	cmp	r3, #0
   25982:	d126      	bne.n	259d2 <nm_spi_init+0xca>
	{
		reg &= ~0xc;	/* disable crc checking */
   25984:	683b      	ldr	r3, [r7, #0]
   25986:	220c      	movs	r2, #12
   25988:	4393      	bics	r3, r2
   2598a:	603b      	str	r3, [r7, #0]
		reg &= ~0x70;
   2598c:	683b      	ldr	r3, [r7, #0]
   2598e:	2270      	movs	r2, #112	; 0x70
   25990:	4393      	bics	r3, r2
   25992:	603b      	str	r3, [r7, #0]
		reg |= (0x5 << 4);
   25994:	683b      	ldr	r3, [r7, #0]
   25996:	2250      	movs	r2, #80	; 0x50
   25998:	4313      	orrs	r3, r2
   2599a:	603b      	str	r3, [r7, #0]
		if (!spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg)) {
   2599c:	683b      	ldr	r3, [r7, #0]
   2599e:	4a1e      	ldr	r2, [pc, #120]	; (25a18 <nm_spi_init+0x110>)
   259a0:	0019      	movs	r1, r3
   259a2:	0010      	movs	r0, r2
   259a4:	4b25      	ldr	r3, [pc, #148]	; (25a3c <nm_spi_init+0x134>)
   259a6:	4798      	blx	r3
   259a8:	1e03      	subs	r3, r0, #0
   259aa:	d10f      	bne.n	259cc <nm_spi_init+0xc4>
			M2M_ERR( "[nmi spi]: Failed internal write protocol reg...\n");
   259ac:	4a24      	ldr	r2, [pc, #144]	; (25a40 <nm_spi_init+0x138>)
   259ae:	491c      	ldr	r1, [pc, #112]	; (25a20 <nm_spi_init+0x118>)
   259b0:	4b1c      	ldr	r3, [pc, #112]	; (25a24 <nm_spi_init+0x11c>)
   259b2:	0018      	movs	r0, r3
   259b4:	4b1c      	ldr	r3, [pc, #112]	; (25a28 <nm_spi_init+0x120>)
   259b6:	4798      	blx	r3
   259b8:	4b22      	ldr	r3, [pc, #136]	; (25a44 <nm_spi_init+0x13c>)
   259ba:	0018      	movs	r0, r3
   259bc:	4b1a      	ldr	r3, [pc, #104]	; (25a28 <nm_spi_init+0x120>)
   259be:	4798      	blx	r3
   259c0:	4b1b      	ldr	r3, [pc, #108]	; (25a30 <nm_spi_init+0x128>)
   259c2:	0018      	movs	r0, r3
   259c4:	4b18      	ldr	r3, [pc, #96]	; (25a28 <nm_spi_init+0x120>)
   259c6:	4798      	blx	r3
			return 0;
   259c8:	2300      	movs	r3, #0
   259ca:	e01f      	b.n	25a0c <nm_spi_init+0x104>
		}
		gu8Crc_off = 1;
   259cc:	4b11      	ldr	r3, [pc, #68]	; (25a14 <nm_spi_init+0x10c>)
   259ce:	2201      	movs	r2, #1
   259d0:	701a      	strb	r2, [r3, #0]
	}

	/**
		make sure can read back chip id correctly
	**/
	if (!spi_read_reg(0x1000, &chipid)) {
   259d2:	1d3a      	adds	r2, r7, #4
   259d4:	2380      	movs	r3, #128	; 0x80
   259d6:	015b      	lsls	r3, r3, #5
   259d8:	0011      	movs	r1, r2
   259da:	0018      	movs	r0, r3
   259dc:	4b0f      	ldr	r3, [pc, #60]	; (25a1c <nm_spi_init+0x114>)
   259de:	4798      	blx	r3
   259e0:	1e03      	subs	r3, r0, #0
   259e2:	d110      	bne.n	25a06 <nm_spi_init+0xfe>
		M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
   259e4:	4a18      	ldr	r2, [pc, #96]	; (25a48 <nm_spi_init+0x140>)
   259e6:	490e      	ldr	r1, [pc, #56]	; (25a20 <nm_spi_init+0x118>)
   259e8:	4b0e      	ldr	r3, [pc, #56]	; (25a24 <nm_spi_init+0x11c>)
   259ea:	0018      	movs	r0, r3
   259ec:	4b0e      	ldr	r3, [pc, #56]	; (25a28 <nm_spi_init+0x120>)
   259ee:	4798      	blx	r3
   259f0:	4b16      	ldr	r3, [pc, #88]	; (25a4c <nm_spi_init+0x144>)
   259f2:	0018      	movs	r0, r3
   259f4:	4b0c      	ldr	r3, [pc, #48]	; (25a28 <nm_spi_init+0x120>)
   259f6:	4798      	blx	r3
   259f8:	4b0d      	ldr	r3, [pc, #52]	; (25a30 <nm_spi_init+0x128>)
   259fa:	0018      	movs	r0, r3
   259fc:	4b0a      	ldr	r3, [pc, #40]	; (25a28 <nm_spi_init+0x120>)
   259fe:	4798      	blx	r3
		return M2M_ERR_BUS_FAIL;
   25a00:	2306      	movs	r3, #6
   25a02:	425b      	negs	r3, r3
   25a04:	e002      	b.n	25a0c <nm_spi_init+0x104>
	}

	M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
	spi_init_pkt_sz();
   25a06:	4b12      	ldr	r3, [pc, #72]	; (25a50 <nm_spi_init+0x148>)
   25a08:	4798      	blx	r3


	return M2M_SUCCESS;
   25a0a:	2300      	movs	r3, #0
}
   25a0c:	0018      	movs	r0, r3
   25a0e:	46bd      	mov	sp, r7
   25a10:	b002      	add	sp, #8
   25a12:	bd80      	pop	{r7, pc}
   25a14:	200042b0 	.word	0x200042b0
   25a18:	0000e824 	.word	0x0000e824
   25a1c:	00025601 	.word	0x00025601
   25a20:	0003a4ec 	.word	0x0003a4ec
   25a24:	00039e78 	.word	0x00039e78
   25a28:	0001ed29 	.word	0x0001ed29
   25a2c:	0003a314 	.word	0x0003a314
   25a30:	00039eb8 	.word	0x00039eb8
   25a34:	000004c3 	.word	0x000004c3
   25a38:	0003a364 	.word	0x0003a364
   25a3c:	00025309 	.word	0x00025309
   25a40:	000004cd 	.word	0x000004cd
   25a44:	0003a394 	.word	0x0003a394
   25a48:	000004d7 	.word	0x000004d7
   25a4c:	0003a3c8 	.word	0x0003a3c8
   25a50:	00025895 	.word	0x00025895

00025a54 <nm_spi_deinit>:
*	@author	Samer Sarhan
*	@date	27 Feb 2015
*	@version	1.0
*/ 
sint8 nm_spi_deinit(void)
{
   25a54:	b580      	push	{r7, lr}
   25a56:	af00      	add	r7, sp, #0
	gu8Crc_off = 0;
   25a58:	4b03      	ldr	r3, [pc, #12]	; (25a68 <nm_spi_deinit+0x14>)
   25a5a:	2200      	movs	r2, #0
   25a5c:	701a      	strb	r2, [r3, #0]
	return M2M_SUCCESS;
   25a5e:	2300      	movs	r3, #0
}
   25a60:	0018      	movs	r0, r3
   25a62:	46bd      	mov	sp, r7
   25a64:	bd80      	pop	{r7, pc}
   25a66:	46c0      	nop			; (mov r8, r8)
   25a68:	200042b0 	.word	0x200042b0

00025a6c <nm_spi_read_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
   25a6c:	b580      	push	{r7, lr}
   25a6e:	b084      	sub	sp, #16
   25a70:	af00      	add	r7, sp, #0
   25a72:	6078      	str	r0, [r7, #4]
	uint32 u32Val;

	spi_read_reg(u32Addr, &u32Val);
   25a74:	230c      	movs	r3, #12
   25a76:	18fa      	adds	r2, r7, r3
   25a78:	687b      	ldr	r3, [r7, #4]
   25a7a:	0011      	movs	r1, r2
   25a7c:	0018      	movs	r0, r3
   25a7e:	4b03      	ldr	r3, [pc, #12]	; (25a8c <nm_spi_read_reg+0x20>)
   25a80:	4798      	blx	r3

	return u32Val;
   25a82:	68fb      	ldr	r3, [r7, #12]
}
   25a84:	0018      	movs	r0, r3
   25a86:	46bd      	mov	sp, r7
   25a88:	b004      	add	sp, #16
   25a8a:	bd80      	pop	{r7, pc}
   25a8c:	00025601 	.word	0x00025601

00025a90 <nm_spi_read_reg_with_ret>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
   25a90:	b590      	push	{r4, r7, lr}
   25a92:	b085      	sub	sp, #20
   25a94:	af00      	add	r7, sp, #0
   25a96:	6078      	str	r0, [r7, #4]
   25a98:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_read_reg(u32Addr,pu32RetVal);
   25a9a:	230f      	movs	r3, #15
   25a9c:	18fc      	adds	r4, r7, r3
   25a9e:	683a      	ldr	r2, [r7, #0]
   25aa0:	687b      	ldr	r3, [r7, #4]
   25aa2:	0011      	movs	r1, r2
   25aa4:	0018      	movs	r0, r3
   25aa6:	4b0d      	ldr	r3, [pc, #52]	; (25adc <nm_spi_read_reg_with_ret+0x4c>)
   25aa8:	4798      	blx	r3
   25aaa:	0003      	movs	r3, r0
   25aac:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   25aae:	230f      	movs	r3, #15
   25ab0:	18fb      	adds	r3, r7, r3
   25ab2:	781b      	ldrb	r3, [r3, #0]
   25ab4:	b25b      	sxtb	r3, r3
   25ab6:	2b01      	cmp	r3, #1
   25ab8:	d104      	bne.n	25ac4 <nm_spi_read_reg_with_ret+0x34>
   25aba:	230f      	movs	r3, #15
   25abc:	18fb      	adds	r3, r7, r3
   25abe:	2200      	movs	r2, #0
   25ac0:	701a      	strb	r2, [r3, #0]
   25ac2:	e003      	b.n	25acc <nm_spi_read_reg_with_ret+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   25ac4:	230f      	movs	r3, #15
   25ac6:	18fb      	adds	r3, r7, r3
   25ac8:	22fa      	movs	r2, #250	; 0xfa
   25aca:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   25acc:	230f      	movs	r3, #15
   25ace:	18fb      	adds	r3, r7, r3
   25ad0:	781b      	ldrb	r3, [r3, #0]
   25ad2:	b25b      	sxtb	r3, r3
}
   25ad4:	0018      	movs	r0, r3
   25ad6:	46bd      	mov	sp, r7
   25ad8:	b005      	add	sp, #20
   25ada:	bd90      	pop	{r4, r7, pc}
   25adc:	00025601 	.word	0x00025601

00025ae0 <nm_spi_write_reg>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_reg(uint32 u32Addr, uint32 u32Val)
{
   25ae0:	b590      	push	{r4, r7, lr}
   25ae2:	b085      	sub	sp, #20
   25ae4:	af00      	add	r7, sp, #0
   25ae6:	6078      	str	r0, [r7, #4]
   25ae8:	6039      	str	r1, [r7, #0]
	sint8 s8Ret;

	s8Ret = spi_write_reg(u32Addr, u32Val);
   25aea:	230f      	movs	r3, #15
   25aec:	18fc      	adds	r4, r7, r3
   25aee:	683a      	ldr	r2, [r7, #0]
   25af0:	687b      	ldr	r3, [r7, #4]
   25af2:	0011      	movs	r1, r2
   25af4:	0018      	movs	r0, r3
   25af6:	4b0d      	ldr	r3, [pc, #52]	; (25b2c <nm_spi_write_reg+0x4c>)
   25af8:	4798      	blx	r3
   25afa:	0003      	movs	r3, r0
   25afc:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   25afe:	230f      	movs	r3, #15
   25b00:	18fb      	adds	r3, r7, r3
   25b02:	781b      	ldrb	r3, [r3, #0]
   25b04:	b25b      	sxtb	r3, r3
   25b06:	2b01      	cmp	r3, #1
   25b08:	d104      	bne.n	25b14 <nm_spi_write_reg+0x34>
   25b0a:	230f      	movs	r3, #15
   25b0c:	18fb      	adds	r3, r7, r3
   25b0e:	2200      	movs	r2, #0
   25b10:	701a      	strb	r2, [r3, #0]
   25b12:	e003      	b.n	25b1c <nm_spi_write_reg+0x3c>
	else s8Ret = M2M_ERR_BUS_FAIL;
   25b14:	230f      	movs	r3, #15
   25b16:	18fb      	adds	r3, r7, r3
   25b18:	22fa      	movs	r2, #250	; 0xfa
   25b1a:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   25b1c:	230f      	movs	r3, #15
   25b1e:	18fb      	adds	r3, r7, r3
   25b20:	781b      	ldrb	r3, [r3, #0]
   25b22:	b25b      	sxtb	r3, r3
}
   25b24:	0018      	movs	r0, r3
   25b26:	46bd      	mov	sp, r7
   25b28:	b005      	add	sp, #20
   25b2a:	bd90      	pop	{r4, r7, pc}
   25b2c:	00025309 	.word	0x00025309

00025b30 <nm_spi_read_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   25b30:	b590      	push	{r4, r7, lr}
   25b32:	b087      	sub	sp, #28
   25b34:	af00      	add	r7, sp, #0
   25b36:	60f8      	str	r0, [r7, #12]
   25b38:	60b9      	str	r1, [r7, #8]
   25b3a:	1dbb      	adds	r3, r7, #6
   25b3c:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_read(u32Addr, puBuf, u16Sz);
   25b3e:	2317      	movs	r3, #23
   25b40:	18fc      	adds	r4, r7, r3
   25b42:	1dbb      	adds	r3, r7, #6
   25b44:	881a      	ldrh	r2, [r3, #0]
   25b46:	68b9      	ldr	r1, [r7, #8]
   25b48:	68fb      	ldr	r3, [r7, #12]
   25b4a:	0018      	movs	r0, r3
   25b4c:	4b0d      	ldr	r3, [pc, #52]	; (25b84 <nm_spi_read_block+0x54>)
   25b4e:	4798      	blx	r3
   25b50:	0003      	movs	r3, r0
   25b52:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   25b54:	2317      	movs	r3, #23
   25b56:	18fb      	adds	r3, r7, r3
   25b58:	781b      	ldrb	r3, [r3, #0]
   25b5a:	b25b      	sxtb	r3, r3
   25b5c:	2b01      	cmp	r3, #1
   25b5e:	d104      	bne.n	25b6a <nm_spi_read_block+0x3a>
   25b60:	2317      	movs	r3, #23
   25b62:	18fb      	adds	r3, r7, r3
   25b64:	2200      	movs	r2, #0
   25b66:	701a      	strb	r2, [r3, #0]
   25b68:	e003      	b.n	25b72 <nm_spi_read_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   25b6a:	2317      	movs	r3, #23
   25b6c:	18fb      	adds	r3, r7, r3
   25b6e:	22fa      	movs	r2, #250	; 0xfa
   25b70:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   25b72:	2317      	movs	r3, #23
   25b74:	18fb      	adds	r3, r7, r3
   25b76:	781b      	ldrb	r3, [r3, #0]
   25b78:	b25b      	sxtb	r3, r3
}
   25b7a:	0018      	movs	r0, r3
   25b7c:	46bd      	mov	sp, r7
   25b7e:	b007      	add	sp, #28
   25b80:	bd90      	pop	{r4, r7, pc}
   25b82:	46c0      	nop			; (mov r8, r8)
   25b84:	00025779 	.word	0x00025779

00025b88 <nm_spi_write_block>:
*	@author	M. Abdelmawla
*	@date	11 July 2012
*	@version	1.0
*/
sint8 nm_spi_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
   25b88:	b590      	push	{r4, r7, lr}
   25b8a:	b087      	sub	sp, #28
   25b8c:	af00      	add	r7, sp, #0
   25b8e:	60f8      	str	r0, [r7, #12]
   25b90:	60b9      	str	r1, [r7, #8]
   25b92:	1dbb      	adds	r3, r7, #6
   25b94:	801a      	strh	r2, [r3, #0]
	sint8 s8Ret;

	s8Ret = nm_spi_write(u32Addr, puBuf, u16Sz);
   25b96:	2317      	movs	r3, #23
   25b98:	18fc      	adds	r4, r7, r3
   25b9a:	1dbb      	adds	r3, r7, #6
   25b9c:	881a      	ldrh	r2, [r3, #0]
   25b9e:	68b9      	ldr	r1, [r7, #8]
   25ba0:	68fb      	ldr	r3, [r7, #12]
   25ba2:	0018      	movs	r0, r3
   25ba4:	4b0d      	ldr	r3, [pc, #52]	; (25bdc <nm_spi_write_block+0x54>)
   25ba6:	4798      	blx	r3
   25ba8:	0003      	movs	r3, r0
   25baa:	7023      	strb	r3, [r4, #0]

	if(N_OK == s8Ret) s8Ret = M2M_SUCCESS;
   25bac:	2317      	movs	r3, #23
   25bae:	18fb      	adds	r3, r7, r3
   25bb0:	781b      	ldrb	r3, [r3, #0]
   25bb2:	b25b      	sxtb	r3, r3
   25bb4:	2b01      	cmp	r3, #1
   25bb6:	d104      	bne.n	25bc2 <nm_spi_write_block+0x3a>
   25bb8:	2317      	movs	r3, #23
   25bba:	18fb      	adds	r3, r7, r3
   25bbc:	2200      	movs	r2, #0
   25bbe:	701a      	strb	r2, [r3, #0]
   25bc0:	e003      	b.n	25bca <nm_spi_write_block+0x42>
	else s8Ret = M2M_ERR_BUS_FAIL;
   25bc2:	2317      	movs	r3, #23
   25bc4:	18fb      	adds	r3, r7, r3
   25bc6:	22fa      	movs	r2, #250	; 0xfa
   25bc8:	701a      	strb	r2, [r3, #0]

	return s8Ret;
   25bca:	2317      	movs	r3, #23
   25bcc:	18fb      	adds	r3, r7, r3
   25bce:	781b      	ldrb	r3, [r3, #0]
   25bd0:	b25b      	sxtb	r3, r3
}
   25bd2:	0018      	movs	r0, r3
   25bd4:	46bd      	mov	sp, r7
   25bd6:	b007      	add	sp, #28
   25bd8:	bd90      	pop	{r4, r7, pc}
   25bda:	46c0      	nop			; (mov r8, r8)
   25bdc:	00025455 	.word	0x00025455

00025be0 <Socket_ReadSocketData>:
Date
		17 July 2012
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv,uint8 u8SocketMsg,
								  uint32 u32StartAddress,uint16 u16ReadCount)
{
   25be0:	b590      	push	{r4, r7, lr}
   25be2:	b089      	sub	sp, #36	; 0x24
   25be4:	af00      	add	r7, sp, #0
   25be6:	60b9      	str	r1, [r7, #8]
   25be8:	0011      	movs	r1, r2
   25bea:	607b      	str	r3, [r7, #4]
   25bec:	230f      	movs	r3, #15
   25bee:	18fb      	adds	r3, r7, r3
   25bf0:	1c02      	adds	r2, r0, #0
   25bf2:	701a      	strb	r2, [r3, #0]
   25bf4:	230e      	movs	r3, #14
   25bf6:	18fb      	adds	r3, r7, r3
   25bf8:	1c0a      	adds	r2, r1, #0
   25bfa:	701a      	strb	r2, [r3, #0]
	if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
   25bfc:	2330      	movs	r3, #48	; 0x30
   25bfe:	18fb      	adds	r3, r7, r3
   25c00:	881b      	ldrh	r3, [r3, #0]
   25c02:	2b00      	cmp	r3, #0
   25c04:	d100      	bne.n	25c08 <Socket_ReadSocketData+0x28>
   25c06:	e0d7      	b.n	25db8 <Socket_ReadSocketData+0x1d8>
   25c08:	230f      	movs	r3, #15
   25c0a:	18fb      	adds	r3, r7, r3
   25c0c:	2200      	movs	r2, #0
   25c0e:	569a      	ldrsb	r2, [r3, r2]
   25c10:	4b6b      	ldr	r3, [pc, #428]	; (25dc0 <Socket_ReadSocketData+0x1e0>)
   25c12:	0112      	lsls	r2, r2, #4
   25c14:	58d3      	ldr	r3, [r2, r3]
   25c16:	2b00      	cmp	r3, #0
   25c18:	d100      	bne.n	25c1c <Socket_ReadSocketData+0x3c>
   25c1a:	e0cd      	b.n	25db8 <Socket_ReadSocketData+0x1d8>
   25c1c:	230f      	movs	r3, #15
   25c1e:	18fb      	adds	r3, r7, r3
   25c20:	781b      	ldrb	r3, [r3, #0]
   25c22:	b25b      	sxtb	r3, r3
   25c24:	4a66      	ldr	r2, [pc, #408]	; (25dc0 <Socket_ReadSocketData+0x1e0>)
   25c26:	011b      	lsls	r3, r3, #4
   25c28:	18d3      	adds	r3, r2, r3
   25c2a:	3304      	adds	r3, #4
   25c2c:	881b      	ldrh	r3, [r3, #0]
   25c2e:	b29b      	uxth	r3, r3
   25c30:	2b00      	cmp	r3, #0
   25c32:	d100      	bne.n	25c36 <Socket_ReadSocketData+0x56>
   25c34:	e0c0      	b.n	25db8 <Socket_ReadSocketData+0x1d8>
   25c36:	230f      	movs	r3, #15
   25c38:	18fb      	adds	r3, r7, r3
   25c3a:	781b      	ldrb	r3, [r3, #0]
   25c3c:	b25b      	sxtb	r3, r3
   25c3e:	4a60      	ldr	r2, [pc, #384]	; (25dc0 <Socket_ReadSocketData+0x1e0>)
   25c40:	011b      	lsls	r3, r3, #4
   25c42:	18d3      	adds	r3, r2, r3
   25c44:	330a      	adds	r3, #10
   25c46:	781b      	ldrb	r3, [r3, #0]
   25c48:	b2db      	uxtb	r3, r3
   25c4a:	2b01      	cmp	r3, #1
   25c4c:	d000      	beq.n	25c50 <Socket_ReadSocketData+0x70>
   25c4e:	e0b3      	b.n	25db8 <Socket_ReadSocketData+0x1d8>
	{
		uint32	u32Address = u32StartAddress;
   25c50:	687b      	ldr	r3, [r7, #4]
   25c52:	61fb      	str	r3, [r7, #28]
		uint16	u16Read;
		sint16	s16Diff;
		uint8	u8SetRxDone;

		pstrRecv->u16RemainingSize = u16ReadCount;
   25c54:	68bb      	ldr	r3, [r7, #8]
   25c56:	2230      	movs	r2, #48	; 0x30
   25c58:	18ba      	adds	r2, r7, r2
   25c5a:	8812      	ldrh	r2, [r2, #0]
   25c5c:	80da      	strh	r2, [r3, #6]
		do
		{
			u8SetRxDone = 1;
   25c5e:	2319      	movs	r3, #25
   25c60:	18fb      	adds	r3, r7, r3
   25c62:	2201      	movs	r2, #1
   25c64:	701a      	strb	r2, [r3, #0]
			u16Read = u16ReadCount;
   25c66:	231a      	movs	r3, #26
   25c68:	18fb      	adds	r3, r7, r3
   25c6a:	2230      	movs	r2, #48	; 0x30
   25c6c:	18ba      	adds	r2, r7, r2
   25c6e:	8812      	ldrh	r2, [r2, #0]
   25c70:	801a      	strh	r2, [r3, #0]
			s16Diff	= u16Read - gastrSockets[sock].u16UserBufferSize;
   25c72:	230f      	movs	r3, #15
   25c74:	18fb      	adds	r3, r7, r3
   25c76:	781b      	ldrb	r3, [r3, #0]
   25c78:	b25b      	sxtb	r3, r3
   25c7a:	4a51      	ldr	r2, [pc, #324]	; (25dc0 <Socket_ReadSocketData+0x1e0>)
   25c7c:	011b      	lsls	r3, r3, #4
   25c7e:	18d3      	adds	r3, r2, r3
   25c80:	3304      	adds	r3, #4
   25c82:	881b      	ldrh	r3, [r3, #0]
   25c84:	b29b      	uxth	r3, r3
   25c86:	221a      	movs	r2, #26
   25c88:	18ba      	adds	r2, r7, r2
   25c8a:	8812      	ldrh	r2, [r2, #0]
   25c8c:	1ad3      	subs	r3, r2, r3
   25c8e:	b29a      	uxth	r2, r3
   25c90:	2316      	movs	r3, #22
   25c92:	18fb      	adds	r3, r7, r3
   25c94:	801a      	strh	r2, [r3, #0]
			if(s16Diff > 0)
   25c96:	2316      	movs	r3, #22
   25c98:	18fb      	adds	r3, r7, r3
   25c9a:	2200      	movs	r2, #0
   25c9c:	5e9b      	ldrsh	r3, [r3, r2]
   25c9e:	2b00      	cmp	r3, #0
   25ca0:	dd0f      	ble.n	25cc2 <Socket_ReadSocketData+0xe2>
			{
				u8SetRxDone = 0;
   25ca2:	2319      	movs	r3, #25
   25ca4:	18fb      	adds	r3, r7, r3
   25ca6:	2200      	movs	r2, #0
   25ca8:	701a      	strb	r2, [r3, #0]
				u16Read		= gastrSockets[sock].u16UserBufferSize;
   25caa:	230f      	movs	r3, #15
   25cac:	18fb      	adds	r3, r7, r3
   25cae:	2200      	movs	r2, #0
   25cb0:	569a      	ldrsb	r2, [r3, r2]
   25cb2:	231a      	movs	r3, #26
   25cb4:	18fb      	adds	r3, r7, r3
   25cb6:	4942      	ldr	r1, [pc, #264]	; (25dc0 <Socket_ReadSocketData+0x1e0>)
   25cb8:	0112      	lsls	r2, r2, #4
   25cba:	188a      	adds	r2, r1, r2
   25cbc:	3204      	adds	r2, #4
   25cbe:	8812      	ldrh	r2, [r2, #0]
   25cc0:	801a      	strh	r2, [r3, #0]
			}
			
			if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, u8SetRxDone) == M2M_SUCCESS)
   25cc2:	230f      	movs	r3, #15
   25cc4:	18fb      	adds	r3, r7, r3
   25cc6:	2200      	movs	r2, #0
   25cc8:	569a      	ldrsb	r2, [r3, r2]
   25cca:	4b3d      	ldr	r3, [pc, #244]	; (25dc0 <Socket_ReadSocketData+0x1e0>)
   25ccc:	0112      	lsls	r2, r2, #4
   25cce:	58d1      	ldr	r1, [r2, r3]
   25cd0:	2319      	movs	r3, #25
   25cd2:	18fb      	adds	r3, r7, r3
   25cd4:	781c      	ldrb	r4, [r3, #0]
   25cd6:	231a      	movs	r3, #26
   25cd8:	18fb      	adds	r3, r7, r3
   25cda:	881a      	ldrh	r2, [r3, #0]
   25cdc:	69f8      	ldr	r0, [r7, #28]
   25cde:	0023      	movs	r3, r4
   25ce0:	4c38      	ldr	r4, [pc, #224]	; (25dc4 <Socket_ReadSocketData+0x1e4>)
   25ce2:	47a0      	blx	r4
   25ce4:	1e03      	subs	r3, r0, #0
   25ce6:	d14f      	bne.n	25d88 <Socket_ReadSocketData+0x1a8>
			{
				pstrRecv->pu8Buffer			= gastrSockets[sock].pu8UserBuffer;
   25ce8:	230f      	movs	r3, #15
   25cea:	18fb      	adds	r3, r7, r3
   25cec:	2200      	movs	r2, #0
   25cee:	569a      	ldrsb	r2, [r3, r2]
   25cf0:	4b33      	ldr	r3, [pc, #204]	; (25dc0 <Socket_ReadSocketData+0x1e0>)
   25cf2:	0112      	lsls	r2, r2, #4
   25cf4:	58d2      	ldr	r2, [r2, r3]
   25cf6:	68bb      	ldr	r3, [r7, #8]
   25cf8:	601a      	str	r2, [r3, #0]
				pstrRecv->s16BufferSize		= u16Read;
   25cfa:	231a      	movs	r3, #26
   25cfc:	18fb      	adds	r3, r7, r3
   25cfe:	2200      	movs	r2, #0
   25d00:	5e9a      	ldrsh	r2, [r3, r2]
   25d02:	68bb      	ldr	r3, [r7, #8]
   25d04:	809a      	strh	r2, [r3, #4]
				pstrRecv->u16RemainingSize	-= u16Read;
   25d06:	68bb      	ldr	r3, [r7, #8]
   25d08:	88da      	ldrh	r2, [r3, #6]
   25d0a:	231a      	movs	r3, #26
   25d0c:	18fb      	adds	r3, r7, r3
   25d0e:	881b      	ldrh	r3, [r3, #0]
   25d10:	1ad3      	subs	r3, r2, r3
   25d12:	b29a      	uxth	r2, r3
   25d14:	68bb      	ldr	r3, [r7, #8]
   25d16:	80da      	strh	r2, [r3, #6]

				if (gpfAppSocketCb)
   25d18:	4b2b      	ldr	r3, [pc, #172]	; (25dc8 <Socket_ReadSocketData+0x1e8>)
   25d1a:	681b      	ldr	r3, [r3, #0]
   25d1c:	2b00      	cmp	r3, #0
   25d1e:	d00b      	beq.n	25d38 <Socket_ReadSocketData+0x158>
					gpfAppSocketCb(sock,u8SocketMsg, pstrRecv);
   25d20:	4b29      	ldr	r3, [pc, #164]	; (25dc8 <Socket_ReadSocketData+0x1e8>)
   25d22:	681b      	ldr	r3, [r3, #0]
   25d24:	68bc      	ldr	r4, [r7, #8]
   25d26:	220e      	movs	r2, #14
   25d28:	18ba      	adds	r2, r7, r2
   25d2a:	7811      	ldrb	r1, [r2, #0]
   25d2c:	220f      	movs	r2, #15
   25d2e:	18ba      	adds	r2, r7, r2
   25d30:	2000      	movs	r0, #0
   25d32:	5610      	ldrsb	r0, [r2, r0]
   25d34:	0022      	movs	r2, r4
   25d36:	4798      	blx	r3

				u16ReadCount -= u16Read;
   25d38:	2330      	movs	r3, #48	; 0x30
   25d3a:	18f9      	adds	r1, r7, r3
   25d3c:	2330      	movs	r3, #48	; 0x30
   25d3e:	18fa      	adds	r2, r7, r3
   25d40:	231a      	movs	r3, #26
   25d42:	18fb      	adds	r3, r7, r3
   25d44:	8812      	ldrh	r2, [r2, #0]
   25d46:	881b      	ldrh	r3, [r3, #0]
   25d48:	1ad3      	subs	r3, r2, r3
   25d4a:	800b      	strh	r3, [r1, #0]
				u32Address += u16Read;
   25d4c:	231a      	movs	r3, #26
   25d4e:	18fb      	adds	r3, r7, r3
   25d50:	881b      	ldrh	r3, [r3, #0]
   25d52:	69fa      	ldr	r2, [r7, #28]
   25d54:	18d3      	adds	r3, r2, r3
   25d56:	61fb      	str	r3, [r7, #28]

				if((!gastrSockets[sock].bIsUsed) && (u16ReadCount))
   25d58:	230f      	movs	r3, #15
   25d5a:	18fb      	adds	r3, r7, r3
   25d5c:	781b      	ldrb	r3, [r3, #0]
   25d5e:	b25b      	sxtb	r3, r3
   25d60:	4a17      	ldr	r2, [pc, #92]	; (25dc0 <Socket_ReadSocketData+0x1e0>)
   25d62:	011b      	lsls	r3, r3, #4
   25d64:	18d3      	adds	r3, r2, r3
   25d66:	330a      	adds	r3, #10
   25d68:	781b      	ldrb	r3, [r3, #0]
   25d6a:	b2db      	uxtb	r3, r3
   25d6c:	2b00      	cmp	r3, #0
   25d6e:	d11c      	bne.n	25daa <Socket_ReadSocketData+0x1ca>
   25d70:	2330      	movs	r3, #48	; 0x30
   25d72:	18fb      	adds	r3, r7, r3
   25d74:	881b      	ldrh	r3, [r3, #0]
   25d76:	2b00      	cmp	r3, #0
   25d78:	d017      	beq.n	25daa <Socket_ReadSocketData+0x1ca>
				{
					M2M_DBG("Application Closed Socket While Rx Is not Complete\n");
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   25d7a:	2301      	movs	r3, #1
   25d7c:	2200      	movs	r2, #0
   25d7e:	2100      	movs	r1, #0
   25d80:	2000      	movs	r0, #0
   25d82:	4c10      	ldr	r4, [pc, #64]	; (25dc4 <Socket_ReadSocketData+0x1e4>)
   25d84:	47a0      	blx	r4
						M2M_DBG("hif_receive Success\n");
					else
						M2M_DBG("hif_receive Fail\n");
					break;
   25d86:	e017      	b.n	25db8 <Socket_ReadSocketData+0x1d8>
				}
			}
			else
			{
				M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
   25d88:	4b10      	ldr	r3, [pc, #64]	; (25dcc <Socket_ReadSocketData+0x1ec>)
   25d8a:	0018      	movs	r0, r3
   25d8c:	4b10      	ldr	r3, [pc, #64]	; (25dd0 <Socket_ReadSocketData+0x1f0>)
   25d8e:	4798      	blx	r3
   25d90:	2330      	movs	r3, #48	; 0x30
   25d92:	18fb      	adds	r3, r7, r3
   25d94:	881a      	ldrh	r2, [r3, #0]
   25d96:	4b0f      	ldr	r3, [pc, #60]	; (25dd4 <Socket_ReadSocketData+0x1f4>)
   25d98:	0011      	movs	r1, r2
   25d9a:	0018      	movs	r0, r3
   25d9c:	4b0c      	ldr	r3, [pc, #48]	; (25dd0 <Socket_ReadSocketData+0x1f0>)
   25d9e:	4798      	blx	r3
   25da0:	4b0d      	ldr	r3, [pc, #52]	; (25dd8 <Socket_ReadSocketData+0x1f8>)
   25da2:	0018      	movs	r0, r3
   25da4:	4b0a      	ldr	r3, [pc, #40]	; (25dd0 <Socket_ReadSocketData+0x1f0>)
   25da6:	4798      	blx	r3
				break;
   25da8:	e006      	b.n	25db8 <Socket_ReadSocketData+0x1d8>
			}
		}while(u16ReadCount != 0);
   25daa:	2330      	movs	r3, #48	; 0x30
   25dac:	18fb      	adds	r3, r7, r3
   25dae:	881b      	ldrh	r3, [r3, #0]
   25db0:	2b00      	cmp	r3, #0
   25db2:	d000      	beq.n	25db6 <Socket_ReadSocketData+0x1d6>
   25db4:	e753      	b.n	25c5e <Socket_ReadSocketData+0x7e>
	}
}
   25db6:	e7ff      	b.n	25db8 <Socket_ReadSocketData+0x1d8>
   25db8:	46c0      	nop			; (mov r8, r8)
   25dba:	46bd      	mov	sp, r7
   25dbc:	b009      	add	sp, #36	; 0x24
   25dbe:	bd90      	pop	{r4, r7, pc}
   25dc0:	20005b54 	.word	0x20005b54
   25dc4:	000225d9 	.word	0x000225d9
   25dc8:	20005c04 	.word	0x20005c04
   25dcc:	0003a4f8 	.word	0x0003a4f8
   25dd0:	0001ed29 	.word	0x0001ed29
   25dd4:	0003a504 	.word	0x0003a504
   25dd8:	0003a518 	.word	0x0003a518

00025ddc <m2m_ip_cb>:

Date
		17 July 2012
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize,uint32 u32Address)
{	
   25ddc:	b590      	push	{r4, r7, lr}
   25dde:	b0bb      	sub	sp, #236	; 0xec
   25de0:	af02      	add	r7, sp, #8
   25de2:	603a      	str	r2, [r7, #0]
   25de4:	1dfb      	adds	r3, r7, #7
   25de6:	1c02      	adds	r2, r0, #0
   25de8:	701a      	strb	r2, [r3, #0]
   25dea:	1d3b      	adds	r3, r7, #4
   25dec:	1c0a      	adds	r2, r1, #0
   25dee:	801a      	strh	r2, [r3, #0]
	if((u8OpCode == SOCKET_CMD_BIND) || (u8OpCode == SOCKET_CMD_SSL_BIND))
   25df0:	1dfb      	adds	r3, r7, #7
   25df2:	781b      	ldrb	r3, [r3, #0]
   25df4:	2b41      	cmp	r3, #65	; 0x41
   25df6:	d003      	beq.n	25e00 <m2m_ip_cb+0x24>
   25df8:	1dfb      	adds	r3, r7, #7
   25dfa:	781b      	ldrb	r3, [r3, #0]
   25dfc:	2b54      	cmp	r3, #84	; 0x54
   25dfe:	d120      	bne.n	25e42 <m2m_ip_cb+0x66>
	{
		tstrBindReply		strBindReply;
		tstrSocketBindMsg	strBind;

		if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
   25e00:	23cc      	movs	r3, #204	; 0xcc
   25e02:	18f9      	adds	r1, r7, r3
   25e04:	6838      	ldr	r0, [r7, #0]
   25e06:	2300      	movs	r3, #0
   25e08:	2204      	movs	r2, #4
   25e0a:	4c98      	ldr	r4, [pc, #608]	; (2606c <m2m_ip_cb+0x290>)
   25e0c:	47a0      	blx	r4
   25e0e:	1e03      	subs	r3, r0, #0
   25e10:	d000      	beq.n	25e14 <m2m_ip_cb+0x38>
   25e12:	e275      	b.n	26300 <m2m_ip_cb+0x524>
		{
			strBind.status = strBindReply.s8Status;
   25e14:	23cc      	movs	r3, #204	; 0xcc
   25e16:	18fb      	adds	r3, r7, r3
   25e18:	2201      	movs	r2, #1
   25e1a:	569a      	ldrsb	r2, [r3, r2]
   25e1c:	23c8      	movs	r3, #200	; 0xc8
   25e1e:	18fb      	adds	r3, r7, r3
   25e20:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   25e22:	4b93      	ldr	r3, [pc, #588]	; (26070 <m2m_ip_cb+0x294>)
   25e24:	681b      	ldr	r3, [r3, #0]
   25e26:	2b00      	cmp	r3, #0
   25e28:	d100      	bne.n	25e2c <m2m_ip_cb+0x50>
   25e2a:	e269      	b.n	26300 <m2m_ip_cb+0x524>
				gpfAppSocketCb(strBindReply.sock,SOCKET_MSG_BIND,&strBind);
   25e2c:	4b90      	ldr	r3, [pc, #576]	; (26070 <m2m_ip_cb+0x294>)
   25e2e:	681b      	ldr	r3, [r3, #0]
   25e30:	22cc      	movs	r2, #204	; 0xcc
   25e32:	18ba      	adds	r2, r7, r2
   25e34:	2000      	movs	r0, #0
   25e36:	5610      	ldrsb	r0, [r2, r0]
   25e38:	22c8      	movs	r2, #200	; 0xc8
   25e3a:	18ba      	adds	r2, r7, r2
   25e3c:	2101      	movs	r1, #1
   25e3e:	4798      	blx	r3
	{
   25e40:	e25e      	b.n	26300 <m2m_ip_cb+0x524>
		}
	}
	else if(u8OpCode == SOCKET_CMD_LISTEN)
   25e42:	1dfb      	adds	r3, r7, #7
   25e44:	781b      	ldrb	r3, [r3, #0]
   25e46:	2b42      	cmp	r3, #66	; 0x42
   25e48:	d120      	bne.n	25e8c <m2m_ip_cb+0xb0>
	{
		tstrListenReply			strListenReply;
		tstrSocketListenMsg		strListen;
		if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
   25e4a:	23c4      	movs	r3, #196	; 0xc4
   25e4c:	18f9      	adds	r1, r7, r3
   25e4e:	6838      	ldr	r0, [r7, #0]
   25e50:	2300      	movs	r3, #0
   25e52:	2204      	movs	r2, #4
   25e54:	4c85      	ldr	r4, [pc, #532]	; (2606c <m2m_ip_cb+0x290>)
   25e56:	47a0      	blx	r4
   25e58:	1e03      	subs	r3, r0, #0
   25e5a:	d000      	beq.n	25e5e <m2m_ip_cb+0x82>
   25e5c:	e257      	b.n	2630e <m2m_ip_cb+0x532>
		{
			strListen.status = strListenReply.s8Status;
   25e5e:	23c4      	movs	r3, #196	; 0xc4
   25e60:	18fb      	adds	r3, r7, r3
   25e62:	2201      	movs	r2, #1
   25e64:	569a      	ldrsb	r2, [r3, r2]
   25e66:	23c0      	movs	r3, #192	; 0xc0
   25e68:	18fb      	adds	r3, r7, r3
   25e6a:	701a      	strb	r2, [r3, #0]
			if(gpfAppSocketCb)
   25e6c:	4b80      	ldr	r3, [pc, #512]	; (26070 <m2m_ip_cb+0x294>)
   25e6e:	681b      	ldr	r3, [r3, #0]
   25e70:	2b00      	cmp	r3, #0
   25e72:	d100      	bne.n	25e76 <m2m_ip_cb+0x9a>
   25e74:	e24b      	b.n	2630e <m2m_ip_cb+0x532>
				gpfAppSocketCb(strListenReply.sock,SOCKET_MSG_LISTEN, &strListen);
   25e76:	4b7e      	ldr	r3, [pc, #504]	; (26070 <m2m_ip_cb+0x294>)
   25e78:	681b      	ldr	r3, [r3, #0]
   25e7a:	22c4      	movs	r2, #196	; 0xc4
   25e7c:	18ba      	adds	r2, r7, r2
   25e7e:	2000      	movs	r0, #0
   25e80:	5610      	ldrsb	r0, [r2, r0]
   25e82:	22c0      	movs	r2, #192	; 0xc0
   25e84:	18ba      	adds	r2, r7, r2
   25e86:	2102      	movs	r1, #2
   25e88:	4798      	blx	r3
			{
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
			}
		}
	}
}
   25e8a:	e240      	b.n	2630e <m2m_ip_cb+0x532>
	else if(u8OpCode == SOCKET_CMD_ACCEPT)
   25e8c:	1dfb      	adds	r3, r7, #7
   25e8e:	781b      	ldrb	r3, [r3, #0]
   25e90:	2b43      	cmp	r3, #67	; 0x43
   25e92:	d000      	beq.n	25e96 <m2m_ip_cb+0xba>
   25e94:	e086      	b.n	25fa4 <m2m_ip_cb+0x1c8>
		if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
   25e96:	23b4      	movs	r3, #180	; 0xb4
   25e98:	18f9      	adds	r1, r7, r3
   25e9a:	6838      	ldr	r0, [r7, #0]
   25e9c:	2300      	movs	r3, #0
   25e9e:	220c      	movs	r2, #12
   25ea0:	4c72      	ldr	r4, [pc, #456]	; (2606c <m2m_ip_cb+0x290>)
   25ea2:	47a0      	blx	r4
   25ea4:	1e03      	subs	r3, r0, #0
   25ea6:	d000      	beq.n	25eaa <m2m_ip_cb+0xce>
   25ea8:	e231      	b.n	2630e <m2m_ip_cb+0x532>
			if(strAcceptReply.sConnectedSock >= 0)
   25eaa:	23b4      	movs	r3, #180	; 0xb4
   25eac:	18fb      	adds	r3, r7, r3
   25eae:	7a5b      	ldrb	r3, [r3, #9]
   25eb0:	b25b      	sxtb	r3, r3
   25eb2:	2b00      	cmp	r3, #0
   25eb4:	db4f      	blt.n	25f56 <m2m_ip_cb+0x17a>
				gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags 		= gastrSockets[strAcceptReply.sListenSock].u8SSLFlags;
   25eb6:	23b4      	movs	r3, #180	; 0xb4
   25eb8:	18fb      	adds	r3, r7, r3
   25eba:	7a5b      	ldrb	r3, [r3, #9]
   25ebc:	b25b      	sxtb	r3, r3
   25ebe:	0018      	movs	r0, r3
   25ec0:	23b4      	movs	r3, #180	; 0xb4
   25ec2:	18fb      	adds	r3, r7, r3
   25ec4:	7a1b      	ldrb	r3, [r3, #8]
   25ec6:	b25b      	sxtb	r3, r3
   25ec8:	4a6a      	ldr	r2, [pc, #424]	; (26074 <m2m_ip_cb+0x298>)
   25eca:	011b      	lsls	r3, r3, #4
   25ecc:	18d3      	adds	r3, r2, r3
   25ece:	330b      	adds	r3, #11
   25ed0:	781b      	ldrb	r3, [r3, #0]
   25ed2:	b2d9      	uxtb	r1, r3
   25ed4:	4a67      	ldr	r2, [pc, #412]	; (26074 <m2m_ip_cb+0x298>)
   25ed6:	0103      	lsls	r3, r0, #4
   25ed8:	18d3      	adds	r3, r2, r3
   25eda:	330b      	adds	r3, #11
   25edc:	1c0a      	adds	r2, r1, #0
   25ede:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].bIsUsed 		= 1;
   25ee0:	23b4      	movs	r3, #180	; 0xb4
   25ee2:	18fb      	adds	r3, r7, r3
   25ee4:	7a5b      	ldrb	r3, [r3, #9]
   25ee6:	b25b      	sxtb	r3, r3
   25ee8:	4a62      	ldr	r2, [pc, #392]	; (26074 <m2m_ip_cb+0x298>)
   25eea:	011b      	lsls	r3, r3, #4
   25eec:	18d3      	adds	r3, r2, r3
   25eee:	330a      	adds	r3, #10
   25ef0:	2201      	movs	r2, #1
   25ef2:	701a      	strb	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16DataOffset 	= strAcceptReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   25ef4:	23b4      	movs	r3, #180	; 0xb4
   25ef6:	18fb      	adds	r3, r7, r3
   25ef8:	7a5b      	ldrb	r3, [r3, #9]
   25efa:	b25b      	sxtb	r3, r3
   25efc:	0018      	movs	r0, r3
   25efe:	23b4      	movs	r3, #180	; 0xb4
   25f00:	18fb      	adds	r3, r7, r3
   25f02:	895b      	ldrh	r3, [r3, #10]
   25f04:	3b08      	subs	r3, #8
   25f06:	b299      	uxth	r1, r3
   25f08:	4a5a      	ldr	r2, [pc, #360]	; (26074 <m2m_ip_cb+0x298>)
   25f0a:	0103      	lsls	r3, r0, #4
   25f0c:	18d3      	adds	r3, r2, r3
   25f0e:	3308      	adds	r3, #8
   25f10:	1c0a      	adds	r2, r1, #0
   25f12:	801a      	strh	r2, [r3, #0]
				++gu16SessionID;
   25f14:	4b58      	ldr	r3, [pc, #352]	; (26078 <m2m_ip_cb+0x29c>)
   25f16:	881b      	ldrh	r3, [r3, #0]
   25f18:	b29b      	uxth	r3, r3
   25f1a:	3301      	adds	r3, #1
   25f1c:	b29a      	uxth	r2, r3
   25f1e:	4b56      	ldr	r3, [pc, #344]	; (26078 <m2m_ip_cb+0x29c>)
   25f20:	801a      	strh	r2, [r3, #0]
				if(gu16SessionID == 0)
   25f22:	4b55      	ldr	r3, [pc, #340]	; (26078 <m2m_ip_cb+0x29c>)
   25f24:	881b      	ldrh	r3, [r3, #0]
   25f26:	b29b      	uxth	r3, r3
   25f28:	2b00      	cmp	r3, #0
   25f2a:	d106      	bne.n	25f3a <m2m_ip_cb+0x15e>
					++gu16SessionID;
   25f2c:	4b52      	ldr	r3, [pc, #328]	; (26078 <m2m_ip_cb+0x29c>)
   25f2e:	881b      	ldrh	r3, [r3, #0]
   25f30:	b29b      	uxth	r3, r3
   25f32:	3301      	adds	r3, #1
   25f34:	b29a      	uxth	r2, r3
   25f36:	4b50      	ldr	r3, [pc, #320]	; (26078 <m2m_ip_cb+0x29c>)
   25f38:	801a      	strh	r2, [r3, #0]
				gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
   25f3a:	23b4      	movs	r3, #180	; 0xb4
   25f3c:	18fb      	adds	r3, r7, r3
   25f3e:	7a5b      	ldrb	r3, [r3, #9]
   25f40:	b25b      	sxtb	r3, r3
   25f42:	0018      	movs	r0, r3
   25f44:	4b4c      	ldr	r3, [pc, #304]	; (26078 <m2m_ip_cb+0x29c>)
   25f46:	881b      	ldrh	r3, [r3, #0]
   25f48:	b299      	uxth	r1, r3
   25f4a:	4a4a      	ldr	r2, [pc, #296]	; (26074 <m2m_ip_cb+0x298>)
   25f4c:	0103      	lsls	r3, r0, #4
   25f4e:	18d3      	adds	r3, r2, r3
   25f50:	3306      	adds	r3, #6
   25f52:	1c0a      	adds	r2, r1, #0
   25f54:	801a      	strh	r2, [r3, #0]
			strAccept.sock = strAcceptReply.sConnectedSock;
   25f56:	23b4      	movs	r3, #180	; 0xb4
   25f58:	18fb      	adds	r3, r7, r3
   25f5a:	2209      	movs	r2, #9
   25f5c:	569a      	ldrsb	r2, [r3, r2]
   25f5e:	23a0      	movs	r3, #160	; 0xa0
   25f60:	18fb      	adds	r3, r7, r3
   25f62:	701a      	strb	r2, [r3, #0]
			strAccept.strAddr.sin_family		= AF_INET;
   25f64:	23a0      	movs	r3, #160	; 0xa0
   25f66:	18fb      	adds	r3, r7, r3
   25f68:	2202      	movs	r2, #2
   25f6a:	809a      	strh	r2, [r3, #4]
			strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
   25f6c:	23b4      	movs	r3, #180	; 0xb4
   25f6e:	18fb      	adds	r3, r7, r3
   25f70:	885a      	ldrh	r2, [r3, #2]
   25f72:	23a0      	movs	r3, #160	; 0xa0
   25f74:	18fb      	adds	r3, r7, r3
   25f76:	80da      	strh	r2, [r3, #6]
			strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
   25f78:	23b4      	movs	r3, #180	; 0xb4
   25f7a:	18fb      	adds	r3, r7, r3
   25f7c:	685a      	ldr	r2, [r3, #4]
   25f7e:	23a0      	movs	r3, #160	; 0xa0
   25f80:	18fb      	adds	r3, r7, r3
   25f82:	609a      	str	r2, [r3, #8]
			if(gpfAppSocketCb)
   25f84:	4b3a      	ldr	r3, [pc, #232]	; (26070 <m2m_ip_cb+0x294>)
   25f86:	681b      	ldr	r3, [r3, #0]
   25f88:	2b00      	cmp	r3, #0
   25f8a:	d100      	bne.n	25f8e <m2m_ip_cb+0x1b2>
   25f8c:	e1bf      	b.n	2630e <m2m_ip_cb+0x532>
				gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
   25f8e:	4b38      	ldr	r3, [pc, #224]	; (26070 <m2m_ip_cb+0x294>)
   25f90:	681b      	ldr	r3, [r3, #0]
   25f92:	22b4      	movs	r2, #180	; 0xb4
   25f94:	18ba      	adds	r2, r7, r2
   25f96:	2008      	movs	r0, #8
   25f98:	5610      	ldrsb	r0, [r2, r0]
   25f9a:	22a0      	movs	r2, #160	; 0xa0
   25f9c:	18ba      	adds	r2, r7, r2
   25f9e:	2104      	movs	r1, #4
   25fa0:	4798      	blx	r3
}
   25fa2:	e1b4      	b.n	2630e <m2m_ip_cb+0x532>
	else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT))
   25fa4:	1dfb      	adds	r3, r7, #7
   25fa6:	781b      	ldrb	r3, [r3, #0]
   25fa8:	2b44      	cmp	r3, #68	; 0x44
   25faa:	d003      	beq.n	25fb4 <m2m_ip_cb+0x1d8>
   25fac:	1dfb      	adds	r3, r7, #7
   25fae:	781b      	ldrb	r3, [r3, #0]
   25fb0:	2b4b      	cmp	r3, #75	; 0x4b
   25fb2:	d13d      	bne.n	26030 <m2m_ip_cb+0x254>
		if(hif_receive(u32Address, (uint8*)&strConnectReply, sizeof(tstrConnectReply), 0) == M2M_SUCCESS)
   25fb4:	239c      	movs	r3, #156	; 0x9c
   25fb6:	18f9      	adds	r1, r7, r3
   25fb8:	6838      	ldr	r0, [r7, #0]
   25fba:	2300      	movs	r3, #0
   25fbc:	2204      	movs	r2, #4
   25fbe:	4c2b      	ldr	r4, [pc, #172]	; (2606c <m2m_ip_cb+0x290>)
   25fc0:	47a0      	blx	r4
   25fc2:	1e03      	subs	r3, r0, #0
   25fc4:	d000      	beq.n	25fc8 <m2m_ip_cb+0x1ec>
   25fc6:	e19d      	b.n	26304 <m2m_ip_cb+0x528>
			strConnMsg.sock		= strConnectReply.sock;
   25fc8:	239c      	movs	r3, #156	; 0x9c
   25fca:	18fb      	adds	r3, r7, r3
   25fcc:	2200      	movs	r2, #0
   25fce:	569a      	ldrsb	r2, [r3, r2]
   25fd0:	2398      	movs	r3, #152	; 0x98
   25fd2:	18fb      	adds	r3, r7, r3
   25fd4:	701a      	strb	r2, [r3, #0]
			strConnMsg.s8Error	= strConnectReply.s8Error;
   25fd6:	239c      	movs	r3, #156	; 0x9c
   25fd8:	18fb      	adds	r3, r7, r3
   25fda:	2201      	movs	r2, #1
   25fdc:	569a      	ldrsb	r2, [r3, r2]
   25fde:	2398      	movs	r3, #152	; 0x98
   25fe0:	18fb      	adds	r3, r7, r3
   25fe2:	705a      	strb	r2, [r3, #1]
			if(strConnectReply.s8Error == SOCK_ERR_NO_ERROR)
   25fe4:	239c      	movs	r3, #156	; 0x9c
   25fe6:	18fb      	adds	r3, r7, r3
   25fe8:	785b      	ldrb	r3, [r3, #1]
   25fea:	b25b      	sxtb	r3, r3
   25fec:	2b00      	cmp	r3, #0
   25fee:	d10f      	bne.n	26010 <m2m_ip_cb+0x234>
				gastrSockets[strConnectReply.sock].u16DataOffset = strConnectReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
   25ff0:	239c      	movs	r3, #156	; 0x9c
   25ff2:	18fb      	adds	r3, r7, r3
   25ff4:	781b      	ldrb	r3, [r3, #0]
   25ff6:	b25b      	sxtb	r3, r3
   25ff8:	0018      	movs	r0, r3
   25ffa:	239c      	movs	r3, #156	; 0x9c
   25ffc:	18fb      	adds	r3, r7, r3
   25ffe:	885b      	ldrh	r3, [r3, #2]
   26000:	3b08      	subs	r3, #8
   26002:	b299      	uxth	r1, r3
   26004:	4a1b      	ldr	r2, [pc, #108]	; (26074 <m2m_ip_cb+0x298>)
   26006:	0103      	lsls	r3, r0, #4
   26008:	18d3      	adds	r3, r2, r3
   2600a:	3308      	adds	r3, #8
   2600c:	1c0a      	adds	r2, r1, #0
   2600e:	801a      	strh	r2, [r3, #0]
			if(gpfAppSocketCb)
   26010:	4b17      	ldr	r3, [pc, #92]	; (26070 <m2m_ip_cb+0x294>)
   26012:	681b      	ldr	r3, [r3, #0]
   26014:	2b00      	cmp	r3, #0
   26016:	d100      	bne.n	2601a <m2m_ip_cb+0x23e>
   26018:	e174      	b.n	26304 <m2m_ip_cb+0x528>
				gpfAppSocketCb(strConnectReply.sock,SOCKET_MSG_CONNECT, &strConnMsg);
   2601a:	4b15      	ldr	r3, [pc, #84]	; (26070 <m2m_ip_cb+0x294>)
   2601c:	681b      	ldr	r3, [r3, #0]
   2601e:	229c      	movs	r2, #156	; 0x9c
   26020:	18ba      	adds	r2, r7, r2
   26022:	2000      	movs	r0, #0
   26024:	5610      	ldrsb	r0, [r2, r0]
   26026:	2298      	movs	r2, #152	; 0x98
   26028:	18ba      	adds	r2, r7, r2
   2602a:	2105      	movs	r1, #5
   2602c:	4798      	blx	r3
	{
   2602e:	e169      	b.n	26304 <m2m_ip_cb+0x528>
	else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
   26030:	1dfb      	adds	r3, r7, #7
   26032:	781b      	ldrb	r3, [r3, #0]
   26034:	2b4a      	cmp	r3, #74	; 0x4a
   26036:	d123      	bne.n	26080 <m2m_ip_cb+0x2a4>
		if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
   26038:	230c      	movs	r3, #12
   2603a:	18f9      	adds	r1, r7, r3
   2603c:	6838      	ldr	r0, [r7, #0]
   2603e:	2300      	movs	r3, #0
   26040:	2244      	movs	r2, #68	; 0x44
   26042:	4c0a      	ldr	r4, [pc, #40]	; (2606c <m2m_ip_cb+0x290>)
   26044:	47a0      	blx	r4
   26046:	1e03      	subs	r3, r0, #0
   26048:	d000      	beq.n	2604c <m2m_ip_cb+0x270>
   2604a:	e160      	b.n	2630e <m2m_ip_cb+0x532>
			if(gpfAppResolveCb)
   2604c:	4b0b      	ldr	r3, [pc, #44]	; (2607c <m2m_ip_cb+0x2a0>)
   2604e:	681b      	ldr	r3, [r3, #0]
   26050:	2b00      	cmp	r3, #0
   26052:	d100      	bne.n	26056 <m2m_ip_cb+0x27a>
   26054:	e15b      	b.n	2630e <m2m_ip_cb+0x532>
				gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
   26056:	4b09      	ldr	r3, [pc, #36]	; (2607c <m2m_ip_cb+0x2a0>)
   26058:	681a      	ldr	r2, [r3, #0]
   2605a:	230c      	movs	r3, #12
   2605c:	18fb      	adds	r3, r7, r3
   2605e:	6c19      	ldr	r1, [r3, #64]	; 0x40
   26060:	230c      	movs	r3, #12
   26062:	18fb      	adds	r3, r7, r3
   26064:	0018      	movs	r0, r3
   26066:	4790      	blx	r2
}
   26068:	e151      	b.n	2630e <m2m_ip_cb+0x532>
   2606a:	46c0      	nop			; (mov r8, r8)
   2606c:	000225d9 	.word	0x000225d9
   26070:	20005c04 	.word	0x20005c04
   26074:	20005b54 	.word	0x20005b54
   26078:	200042b2 	.word	0x200042b2
   2607c:	20005c0c 	.word	0x20005c0c
	else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
   26080:	1dfb      	adds	r3, r7, #7
   26082:	781b      	ldrb	r3, [r3, #0]
   26084:	2b46      	cmp	r3, #70	; 0x46
   26086:	d008      	beq.n	2609a <m2m_ip_cb+0x2be>
   26088:	1dfb      	adds	r3, r7, #7
   2608a:	781b      	ldrb	r3, [r3, #0]
   2608c:	2b48      	cmp	r3, #72	; 0x48
   2608e:	d004      	beq.n	2609a <m2m_ip_cb+0x2be>
   26090:	1dfb      	adds	r3, r7, #7
   26092:	781b      	ldrb	r3, [r3, #0]
   26094:	2b4d      	cmp	r3, #77	; 0x4d
   26096:	d000      	beq.n	2609a <m2m_ip_cb+0x2be>
   26098:	e0b4      	b.n	26204 <m2m_ip_cb+0x428>
		uint8				u8CallbackMsgID = SOCKET_MSG_RECV;
   2609a:	23df      	movs	r3, #223	; 0xdf
   2609c:	18fb      	adds	r3, r7, r3
   2609e:	2206      	movs	r2, #6
   260a0:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_RECVFROM)
   260a2:	1dfb      	adds	r3, r7, #7
   260a4:	781b      	ldrb	r3, [r3, #0]
   260a6:	2b48      	cmp	r3, #72	; 0x48
   260a8:	d103      	bne.n	260b2 <m2m_ip_cb+0x2d6>
			u8CallbackMsgID = SOCKET_MSG_RECVFROM;
   260aa:	23df      	movs	r3, #223	; 0xdf
   260ac:	18fb      	adds	r3, r7, r3
   260ae:	2209      	movs	r2, #9
   260b0:	701a      	strb	r2, [r3, #0]
		u16ReadSize = sizeof(tstrRecvReply);
   260b2:	23d8      	movs	r3, #216	; 0xd8
   260b4:	18fb      	adds	r3, r7, r3
   260b6:	2210      	movs	r2, #16
   260b8:	801a      	strh	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
   260ba:	23d8      	movs	r3, #216	; 0xd8
   260bc:	18fb      	adds	r3, r7, r3
   260be:	881a      	ldrh	r2, [r3, #0]
   260c0:	2388      	movs	r3, #136	; 0x88
   260c2:	18f9      	adds	r1, r7, r3
   260c4:	6838      	ldr	r0, [r7, #0]
   260c6:	2300      	movs	r3, #0
   260c8:	4c93      	ldr	r4, [pc, #588]	; (26318 <m2m_ip_cb+0x53c>)
   260ca:	47a0      	blx	r4
   260cc:	1e03      	subs	r3, r0, #0
   260ce:	d000      	beq.n	260d2 <m2m_ip_cb+0x2f6>
   260d0:	e11a      	b.n	26308 <m2m_ip_cb+0x52c>
			uint16 u16SessionID = 0;
   260d2:	23d6      	movs	r3, #214	; 0xd6
   260d4:	18fb      	adds	r3, r7, r3
   260d6:	2200      	movs	r2, #0
   260d8:	801a      	strh	r2, [r3, #0]
			sock			= strRecvReply.sock;
   260da:	23d5      	movs	r3, #213	; 0xd5
   260dc:	18fb      	adds	r3, r7, r3
   260de:	2288      	movs	r2, #136	; 0x88
   260e0:	18ba      	adds	r2, r7, r2
   260e2:	7b12      	ldrb	r2, [r2, #12]
   260e4:	701a      	strb	r2, [r3, #0]
			u16SessionID = strRecvReply.u16SessionID;
   260e6:	23d6      	movs	r3, #214	; 0xd6
   260e8:	18fb      	adds	r3, r7, r3
   260ea:	2288      	movs	r2, #136	; 0x88
   260ec:	18ba      	adds	r2, r7, r2
   260ee:	89d2      	ldrh	r2, [r2, #14]
   260f0:	801a      	strh	r2, [r3, #0]
			gastrSockets[sock].bIsRecvPending = 0;
   260f2:	23d5      	movs	r3, #213	; 0xd5
   260f4:	18fb      	adds	r3, r7, r3
   260f6:	781b      	ldrb	r3, [r3, #0]
   260f8:	b25b      	sxtb	r3, r3
   260fa:	4a88      	ldr	r2, [pc, #544]	; (2631c <m2m_ip_cb+0x540>)
   260fc:	011b      	lsls	r3, r3, #4
   260fe:	18d3      	adds	r3, r2, r3
   26100:	330c      	adds	r3, #12
   26102:	2200      	movs	r2, #0
   26104:	701a      	strb	r2, [r3, #0]
			s16RecvStatus	= NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
   26106:	23d2      	movs	r3, #210	; 0xd2
   26108:	18fb      	adds	r3, r7, r3
   2610a:	2288      	movs	r2, #136	; 0x88
   2610c:	18ba      	adds	r2, r7, r2
   2610e:	8912      	ldrh	r2, [r2, #8]
   26110:	801a      	strh	r2, [r3, #0]
			u16DataOffset	= NM_BSP_B_L_16(strRecvReply.u16DataOffset);
   26112:	23d0      	movs	r3, #208	; 0xd0
   26114:	18fb      	adds	r3, r7, r3
   26116:	2288      	movs	r2, #136	; 0x88
   26118:	18ba      	adds	r2, r7, r2
   2611a:	8952      	ldrh	r2, [r2, #10]
   2611c:	801a      	strh	r2, [r3, #0]
			strRecvMsg.strRemoteAddr.sin_port 			= strRecvReply.strRemoteAddr.u16Port;
   2611e:	2388      	movs	r3, #136	; 0x88
   26120:	18fb      	adds	r3, r7, r3
   26122:	885a      	ldrh	r2, [r3, #2]
   26124:	2370      	movs	r3, #112	; 0x70
   26126:	18fb      	adds	r3, r7, r3
   26128:	815a      	strh	r2, [r3, #10]
			strRecvMsg.strRemoteAddr.sin_addr.s_addr 	= strRecvReply.strRemoteAddr.u32IPAddr;
   2612a:	2388      	movs	r3, #136	; 0x88
   2612c:	18fb      	adds	r3, r7, r3
   2612e:	685a      	ldr	r2, [r3, #4]
   26130:	2370      	movs	r3, #112	; 0x70
   26132:	18fb      	adds	r3, r7, r3
   26134:	60da      	str	r2, [r3, #12]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   26136:	23d5      	movs	r3, #213	; 0xd5
   26138:	18fb      	adds	r3, r7, r3
   2613a:	781b      	ldrb	r3, [r3, #0]
   2613c:	b25b      	sxtb	r3, r3
   2613e:	4a77      	ldr	r2, [pc, #476]	; (2631c <m2m_ip_cb+0x540>)
   26140:	011b      	lsls	r3, r3, #4
   26142:	18d3      	adds	r3, r2, r3
   26144:	3306      	adds	r3, #6
   26146:	881b      	ldrh	r3, [r3, #0]
   26148:	b29b      	uxth	r3, r3
   2614a:	22d6      	movs	r2, #214	; 0xd6
   2614c:	18ba      	adds	r2, r7, r2
   2614e:	8812      	ldrh	r2, [r2, #0]
   26150:	429a      	cmp	r2, r3
   26152:	d148      	bne.n	261e6 <m2m_ip_cb+0x40a>
				if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
   26154:	23d2      	movs	r3, #210	; 0xd2
   26156:	18fb      	adds	r3, r7, r3
   26158:	2200      	movs	r2, #0
   2615a:	5e9b      	ldrsh	r3, [r3, r2]
   2615c:	2b00      	cmp	r3, #0
   2615e:	dd25      	ble.n	261ac <m2m_ip_cb+0x3d0>
   26160:	23d2      	movs	r3, #210	; 0xd2
   26162:	18fb      	adds	r3, r7, r3
   26164:	2200      	movs	r2, #0
   26166:	5e9a      	ldrsh	r2, [r3, r2]
   26168:	1d3b      	adds	r3, r7, #4
   2616a:	881b      	ldrh	r3, [r3, #0]
   2616c:	429a      	cmp	r2, r3
   2616e:	da1d      	bge.n	261ac <m2m_ip_cb+0x3d0>
					u32Address += u16DataOffset;
   26170:	23d0      	movs	r3, #208	; 0xd0
   26172:	18fb      	adds	r3, r7, r3
   26174:	881b      	ldrh	r3, [r3, #0]
   26176:	683a      	ldr	r2, [r7, #0]
   26178:	18d3      	adds	r3, r2, r3
   2617a:	603b      	str	r3, [r7, #0]
					u16ReadSize = (uint16)s16RecvStatus;
   2617c:	23d8      	movs	r3, #216	; 0xd8
   2617e:	18fb      	adds	r3, r7, r3
   26180:	22d2      	movs	r2, #210	; 0xd2
   26182:	18ba      	adds	r2, r7, r2
   26184:	8812      	ldrh	r2, [r2, #0]
   26186:	801a      	strh	r2, [r3, #0]
					Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
   26188:	683c      	ldr	r4, [r7, #0]
   2618a:	23df      	movs	r3, #223	; 0xdf
   2618c:	18fb      	adds	r3, r7, r3
   2618e:	781a      	ldrb	r2, [r3, #0]
   26190:	2370      	movs	r3, #112	; 0x70
   26192:	18f9      	adds	r1, r7, r3
   26194:	23d5      	movs	r3, #213	; 0xd5
   26196:	18fb      	adds	r3, r7, r3
   26198:	2000      	movs	r0, #0
   2619a:	5618      	ldrsb	r0, [r3, r0]
   2619c:	23d8      	movs	r3, #216	; 0xd8
   2619e:	18fb      	adds	r3, r7, r3
   261a0:	881b      	ldrh	r3, [r3, #0]
   261a2:	9300      	str	r3, [sp, #0]
   261a4:	0023      	movs	r3, r4
   261a6:	4c5e      	ldr	r4, [pc, #376]	; (26320 <m2m_ip_cb+0x544>)
   261a8:	47a0      	blx	r4
	{
   261aa:	e0ad      	b.n	26308 <m2m_ip_cb+0x52c>
					strRecvMsg.s16BufferSize	= s16RecvStatus;
   261ac:	2370      	movs	r3, #112	; 0x70
   261ae:	18fb      	adds	r3, r7, r3
   261b0:	22d2      	movs	r2, #210	; 0xd2
   261b2:	18ba      	adds	r2, r7, r2
   261b4:	8812      	ldrh	r2, [r2, #0]
   261b6:	809a      	strh	r2, [r3, #4]
					strRecvMsg.pu8Buffer		= NULL;
   261b8:	2370      	movs	r3, #112	; 0x70
   261ba:	18fb      	adds	r3, r7, r3
   261bc:	2200      	movs	r2, #0
   261be:	601a      	str	r2, [r3, #0]
					if(gpfAppSocketCb)
   261c0:	4b58      	ldr	r3, [pc, #352]	; (26324 <m2m_ip_cb+0x548>)
   261c2:	681b      	ldr	r3, [r3, #0]
   261c4:	2b00      	cmp	r3, #0
   261c6:	d100      	bne.n	261ca <m2m_ip_cb+0x3ee>
   261c8:	e09e      	b.n	26308 <m2m_ip_cb+0x52c>
						gpfAppSocketCb(sock,u8CallbackMsgID, &strRecvMsg);
   261ca:	4b56      	ldr	r3, [pc, #344]	; (26324 <m2m_ip_cb+0x548>)
   261cc:	681b      	ldr	r3, [r3, #0]
   261ce:	2270      	movs	r2, #112	; 0x70
   261d0:	18bc      	adds	r4, r7, r2
   261d2:	22df      	movs	r2, #223	; 0xdf
   261d4:	18ba      	adds	r2, r7, r2
   261d6:	7811      	ldrb	r1, [r2, #0]
   261d8:	22d5      	movs	r2, #213	; 0xd5
   261da:	18ba      	adds	r2, r7, r2
   261dc:	2000      	movs	r0, #0
   261de:	5610      	ldrsb	r0, [r2, r0]
   261e0:	0022      	movs	r2, r4
   261e2:	4798      	blx	r3
	{
   261e4:	e090      	b.n	26308 <m2m_ip_cb+0x52c>
				if(u16ReadSize < u16BufferSize)
   261e6:	23d8      	movs	r3, #216	; 0xd8
   261e8:	18fa      	adds	r2, r7, r3
   261ea:	1d3b      	adds	r3, r7, #4
   261ec:	8812      	ldrh	r2, [r2, #0]
   261ee:	881b      	ldrh	r3, [r3, #0]
   261f0:	429a      	cmp	r2, r3
   261f2:	d300      	bcc.n	261f6 <m2m_ip_cb+0x41a>
   261f4:	e088      	b.n	26308 <m2m_ip_cb+0x52c>
					if(hif_receive(0, NULL, 0, 1) == M2M_SUCCESS)
   261f6:	2301      	movs	r3, #1
   261f8:	2200      	movs	r2, #0
   261fa:	2100      	movs	r1, #0
   261fc:	2000      	movs	r0, #0
   261fe:	4c46      	ldr	r4, [pc, #280]	; (26318 <m2m_ip_cb+0x53c>)
   26200:	47a0      	blx	r4
	{
   26202:	e081      	b.n	26308 <m2m_ip_cb+0x52c>
	else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
   26204:	1dfb      	adds	r3, r7, #7
   26206:	781b      	ldrb	r3, [r3, #0]
   26208:	2b45      	cmp	r3, #69	; 0x45
   2620a:	d007      	beq.n	2621c <m2m_ip_cb+0x440>
   2620c:	1dfb      	adds	r3, r7, #7
   2620e:	781b      	ldrb	r3, [r3, #0]
   26210:	2b47      	cmp	r3, #71	; 0x47
   26212:	d003      	beq.n	2621c <m2m_ip_cb+0x440>
   26214:	1dfb      	adds	r3, r7, #7
   26216:	781b      	ldrb	r3, [r3, #0]
   26218:	2b4c      	cmp	r3, #76	; 0x4c
   2621a:	d14c      	bne.n	262b6 <m2m_ip_cb+0x4da>
		uint8			u8CallbackMsgID = SOCKET_MSG_SEND;
   2621c:	23de      	movs	r3, #222	; 0xde
   2621e:	18fb      	adds	r3, r7, r3
   26220:	2207      	movs	r2, #7
   26222:	701a      	strb	r2, [r3, #0]
		if(u8OpCode == SOCKET_CMD_SENDTO)
   26224:	1dfb      	adds	r3, r7, #7
   26226:	781b      	ldrb	r3, [r3, #0]
   26228:	2b47      	cmp	r3, #71	; 0x47
   2622a:	d103      	bne.n	26234 <m2m_ip_cb+0x458>
			u8CallbackMsgID = SOCKET_MSG_SENDTO;
   2622c:	23de      	movs	r3, #222	; 0xde
   2622e:	18fb      	adds	r3, r7, r3
   26230:	2208      	movs	r2, #8
   26232:	701a      	strb	r2, [r3, #0]
		if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
   26234:	2364      	movs	r3, #100	; 0x64
   26236:	18f9      	adds	r1, r7, r3
   26238:	6838      	ldr	r0, [r7, #0]
   2623a:	2300      	movs	r3, #0
   2623c:	2208      	movs	r2, #8
   2623e:	4c36      	ldr	r4, [pc, #216]	; (26318 <m2m_ip_cb+0x53c>)
   26240:	47a0      	blx	r4
   26242:	1e03      	subs	r3, r0, #0
   26244:	d162      	bne.n	2630c <m2m_ip_cb+0x530>
			uint16 u16SessionID = 0;
   26246:	23dc      	movs	r3, #220	; 0xdc
   26248:	18fb      	adds	r3, r7, r3
   2624a:	2200      	movs	r2, #0
   2624c:	801a      	strh	r2, [r3, #0]
			sock = strReply.sock;
   2624e:	23db      	movs	r3, #219	; 0xdb
   26250:	18fb      	adds	r3, r7, r3
   26252:	2264      	movs	r2, #100	; 0x64
   26254:	18ba      	adds	r2, r7, r2
   26256:	7812      	ldrb	r2, [r2, #0]
   26258:	701a      	strb	r2, [r3, #0]
			u16SessionID = strReply.u16SessionID;
   2625a:	23dc      	movs	r3, #220	; 0xdc
   2625c:	18fb      	adds	r3, r7, r3
   2625e:	2264      	movs	r2, #100	; 0x64
   26260:	18ba      	adds	r2, r7, r2
   26262:	8892      	ldrh	r2, [r2, #4]
   26264:	801a      	strh	r2, [r3, #0]
			s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
   26266:	2364      	movs	r3, #100	; 0x64
   26268:	18fb      	adds	r3, r7, r3
   2626a:	2202      	movs	r2, #2
   2626c:	5e9a      	ldrsh	r2, [r3, r2]
   2626e:	236e      	movs	r3, #110	; 0x6e
   26270:	18fb      	adds	r3, r7, r3
   26272:	801a      	strh	r2, [r3, #0]
			if(u16SessionID == gastrSockets[sock].u16SessionID)
   26274:	23db      	movs	r3, #219	; 0xdb
   26276:	18fb      	adds	r3, r7, r3
   26278:	781b      	ldrb	r3, [r3, #0]
   2627a:	b25b      	sxtb	r3, r3
   2627c:	4a27      	ldr	r2, [pc, #156]	; (2631c <m2m_ip_cb+0x540>)
   2627e:	011b      	lsls	r3, r3, #4
   26280:	18d3      	adds	r3, r2, r3
   26282:	3306      	adds	r3, #6
   26284:	881b      	ldrh	r3, [r3, #0]
   26286:	b29b      	uxth	r3, r3
   26288:	22dc      	movs	r2, #220	; 0xdc
   2628a:	18ba      	adds	r2, r7, r2
   2628c:	8812      	ldrh	r2, [r2, #0]
   2628e:	429a      	cmp	r2, r3
   26290:	d13c      	bne.n	2630c <m2m_ip_cb+0x530>
				if(gpfAppSocketCb)
   26292:	4b24      	ldr	r3, [pc, #144]	; (26324 <m2m_ip_cb+0x548>)
   26294:	681b      	ldr	r3, [r3, #0]
   26296:	2b00      	cmp	r3, #0
   26298:	d038      	beq.n	2630c <m2m_ip_cb+0x530>
					gpfAppSocketCb(sock,u8CallbackMsgID, &s16Rcvd);
   2629a:	4b22      	ldr	r3, [pc, #136]	; (26324 <m2m_ip_cb+0x548>)
   2629c:	681b      	ldr	r3, [r3, #0]
   2629e:	226e      	movs	r2, #110	; 0x6e
   262a0:	18bc      	adds	r4, r7, r2
   262a2:	22de      	movs	r2, #222	; 0xde
   262a4:	18ba      	adds	r2, r7, r2
   262a6:	7811      	ldrb	r1, [r2, #0]
   262a8:	22db      	movs	r2, #219	; 0xdb
   262aa:	18ba      	adds	r2, r7, r2
   262ac:	2000      	movs	r0, #0
   262ae:	5610      	ldrsb	r0, [r2, r0]
   262b0:	0022      	movs	r2, r4
   262b2:	4798      	blx	r3
	{
   262b4:	e02a      	b.n	2630c <m2m_ip_cb+0x530>
	else if(u8OpCode == SOCKET_CMD_PING)
   262b6:	1dfb      	adds	r3, r7, #7
   262b8:	781b      	ldrb	r3, [r3, #0]
   262ba:	2b52      	cmp	r3, #82	; 0x52
   262bc:	d127      	bne.n	2630e <m2m_ip_cb+0x532>
		if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
   262be:	2350      	movs	r3, #80	; 0x50
   262c0:	18f9      	adds	r1, r7, r3
   262c2:	6838      	ldr	r0, [r7, #0]
   262c4:	2301      	movs	r3, #1
   262c6:	2214      	movs	r2, #20
   262c8:	4c13      	ldr	r4, [pc, #76]	; (26318 <m2m_ip_cb+0x53c>)
   262ca:	47a0      	blx	r4
   262cc:	1e03      	subs	r3, r0, #0
   262ce:	d11e      	bne.n	2630e <m2m_ip_cb+0x532>
			gfpPingCb = (void (*)(uint32 , uint32 , uint8))strPingReply.u32CmdPrivate;
   262d0:	2350      	movs	r3, #80	; 0x50
   262d2:	18fb      	adds	r3, r7, r3
   262d4:	685b      	ldr	r3, [r3, #4]
   262d6:	001a      	movs	r2, r3
   262d8:	4b13      	ldr	r3, [pc, #76]	; (26328 <m2m_ip_cb+0x54c>)
   262da:	601a      	str	r2, [r3, #0]
			if(gfpPingCb != NULL)
   262dc:	4b12      	ldr	r3, [pc, #72]	; (26328 <m2m_ip_cb+0x54c>)
   262de:	681b      	ldr	r3, [r3, #0]
   262e0:	2b00      	cmp	r3, #0
   262e2:	d014      	beq.n	2630e <m2m_ip_cb+0x532>
				gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
   262e4:	4b10      	ldr	r3, [pc, #64]	; (26328 <m2m_ip_cb+0x54c>)
   262e6:	681c      	ldr	r4, [r3, #0]
   262e8:	2350      	movs	r3, #80	; 0x50
   262ea:	18fb      	adds	r3, r7, r3
   262ec:	6818      	ldr	r0, [r3, #0]
   262ee:	2350      	movs	r3, #80	; 0x50
   262f0:	18fb      	adds	r3, r7, r3
   262f2:	6899      	ldr	r1, [r3, #8]
   262f4:	2350      	movs	r3, #80	; 0x50
   262f6:	18fb      	adds	r3, r7, r3
   262f8:	7c1b      	ldrb	r3, [r3, #16]
   262fa:	001a      	movs	r2, r3
   262fc:	47a0      	blx	r4
}
   262fe:	e006      	b.n	2630e <m2m_ip_cb+0x532>
	{
   26300:	46c0      	nop			; (mov r8, r8)
   26302:	e004      	b.n	2630e <m2m_ip_cb+0x532>
	{
   26304:	46c0      	nop			; (mov r8, r8)
   26306:	e002      	b.n	2630e <m2m_ip_cb+0x532>
	{
   26308:	46c0      	nop			; (mov r8, r8)
   2630a:	e000      	b.n	2630e <m2m_ip_cb+0x532>
	{
   2630c:	46c0      	nop			; (mov r8, r8)
}
   2630e:	46c0      	nop			; (mov r8, r8)
   26310:	46bd      	mov	sp, r7
   26312:	b039      	add	sp, #228	; 0xe4
   26314:	bd90      	pop	{r4, r7, pc}
   26316:	46c0      	nop			; (mov r8, r8)
   26318:	000225d9 	.word	0x000225d9
   2631c:	20005b54 	.word	0x20005b54
   26320:	00025be1 	.word	0x00025be1
   26324:	20005c04 	.word	0x20005c04
   26328:	20005c08 	.word	0x20005c08

0002632c <socketInit>:

Date
		4 June 2012
*********************************************************************/
void socketInit(void)
{
   2632c:	b580      	push	{r7, lr}
   2632e:	af00      	add	r7, sp, #0
	if(gbSocketInit == 0)
   26330:	4b0c      	ldr	r3, [pc, #48]	; (26364 <socketInit+0x38>)
   26332:	781b      	ldrb	r3, [r3, #0]
   26334:	b2db      	uxtb	r3, r3
   26336:	2b00      	cmp	r3, #0
   26338:	d110      	bne.n	2635c <socketInit+0x30>
	{
		m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   2633a:	4b0b      	ldr	r3, [pc, #44]	; (26368 <socketInit+0x3c>)
   2633c:	22b0      	movs	r2, #176	; 0xb0
   2633e:	2100      	movs	r1, #0
   26340:	0018      	movs	r0, r3
   26342:	4b0a      	ldr	r3, [pc, #40]	; (2636c <socketInit+0x40>)
   26344:	4798      	blx	r3
		hif_register_cb(M2M_REQ_GROUP_IP,m2m_ip_cb);
   26346:	4b0a      	ldr	r3, [pc, #40]	; (26370 <socketInit+0x44>)
   26348:	0019      	movs	r1, r3
   2634a:	2002      	movs	r0, #2
   2634c:	4b09      	ldr	r3, [pc, #36]	; (26374 <socketInit+0x48>)
   2634e:	4798      	blx	r3
		gbSocketInit	= 1;
   26350:	4b04      	ldr	r3, [pc, #16]	; (26364 <socketInit+0x38>)
   26352:	2201      	movs	r2, #1
   26354:	701a      	strb	r2, [r3, #0]
		gu16SessionID	= 0;
   26356:	4b08      	ldr	r3, [pc, #32]	; (26378 <socketInit+0x4c>)
   26358:	2200      	movs	r2, #0
   2635a:	801a      	strh	r2, [r3, #0]
	}
}
   2635c:	46c0      	nop			; (mov r8, r8)
   2635e:	46bd      	mov	sp, r7
   26360:	bd80      	pop	{r7, pc}
   26362:	46c0      	nop			; (mov r8, r8)
   26364:	200042b4 	.word	0x200042b4
   26368:	20005b54 	.word	0x20005b54
   2636c:	00021a5d 	.word	0x00021a5d
   26370:	00025ddd 	.word	0x00025ddd
   26374:	00022759 	.word	0x00022759
   26378:	200042b2 	.word	0x200042b2

0002637c <socketDeinit>:

Date
		27 Feb 2015
*********************************************************************/
void socketDeinit(void)
{	
   2637c:	b580      	push	{r7, lr}
   2637e:	af00      	add	r7, sp, #0
	m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
   26380:	4b0a      	ldr	r3, [pc, #40]	; (263ac <socketDeinit+0x30>)
   26382:	22b0      	movs	r2, #176	; 0xb0
   26384:	2100      	movs	r1, #0
   26386:	0018      	movs	r0, r3
   26388:	4b09      	ldr	r3, [pc, #36]	; (263b0 <socketDeinit+0x34>)
   2638a:	4798      	blx	r3
	hif_register_cb(M2M_REQ_GROUP_IP, NULL);
   2638c:	2100      	movs	r1, #0
   2638e:	2002      	movs	r0, #2
   26390:	4b08      	ldr	r3, [pc, #32]	; (263b4 <socketDeinit+0x38>)
   26392:	4798      	blx	r3
	gpfAppSocketCb	= NULL;
   26394:	4b08      	ldr	r3, [pc, #32]	; (263b8 <socketDeinit+0x3c>)
   26396:	2200      	movs	r2, #0
   26398:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb	= NULL;
   2639a:	4b08      	ldr	r3, [pc, #32]	; (263bc <socketDeinit+0x40>)
   2639c:	2200      	movs	r2, #0
   2639e:	601a      	str	r2, [r3, #0]
	gbSocketInit	= 0;
   263a0:	4b07      	ldr	r3, [pc, #28]	; (263c0 <socketDeinit+0x44>)
   263a2:	2200      	movs	r2, #0
   263a4:	701a      	strb	r2, [r3, #0]
}
   263a6:	46c0      	nop			; (mov r8, r8)
   263a8:	46bd      	mov	sp, r7
   263aa:	bd80      	pop	{r7, pc}
   263ac:	20005b54 	.word	0x20005b54
   263b0:	00021a5d 	.word	0x00021a5d
   263b4:	00022759 	.word	0x00022759
   263b8:	20005c04 	.word	0x20005c04
   263bc:	20005c0c 	.word	0x20005c0c
   263c0:	200042b4 	.word	0x200042b4

000263c4 <registerSocketCallback>:

Date
		4 June 2012
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
   263c4:	b580      	push	{r7, lr}
   263c6:	b082      	sub	sp, #8
   263c8:	af00      	add	r7, sp, #0
   263ca:	6078      	str	r0, [r7, #4]
   263cc:	6039      	str	r1, [r7, #0]
	gpfAppSocketCb = pfAppSocketCb;
   263ce:	4b05      	ldr	r3, [pc, #20]	; (263e4 <registerSocketCallback+0x20>)
   263d0:	687a      	ldr	r2, [r7, #4]
   263d2:	601a      	str	r2, [r3, #0]
	gpfAppResolveCb = pfAppResolveCb;
   263d4:	4b04      	ldr	r3, [pc, #16]	; (263e8 <registerSocketCallback+0x24>)
   263d6:	683a      	ldr	r2, [r7, #0]
   263d8:	601a      	str	r2, [r3, #0]
}
   263da:	46c0      	nop			; (mov r8, r8)
   263dc:	46bd      	mov	sp, r7
   263de:	b002      	add	sp, #8
   263e0:	bd80      	pop	{r7, pc}
   263e2:	46c0      	nop			; (mov r8, r8)
   263e4:	20005c04 	.word	0x20005c04
   263e8:	20005c0c 	.word	0x20005c0c

000263ec <socket>:

Date
		4 June 2012
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
   263ec:	b590      	push	{r4, r7, lr}
   263ee:	b08d      	sub	sp, #52	; 0x34
   263f0:	af04      	add	r7, sp, #16
   263f2:	0004      	movs	r4, r0
   263f4:	0008      	movs	r0, r1
   263f6:	0011      	movs	r1, r2
   263f8:	1dbb      	adds	r3, r7, #6
   263fa:	1c22      	adds	r2, r4, #0
   263fc:	801a      	strh	r2, [r3, #0]
   263fe:	1d7b      	adds	r3, r7, #5
   26400:	1c02      	adds	r2, r0, #0
   26402:	701a      	strb	r2, [r3, #0]
   26404:	1d3b      	adds	r3, r7, #4
   26406:	1c0a      	adds	r2, r1, #0
   26408:	701a      	strb	r2, [r3, #0]
	SOCKET					sock = -1;
   2640a:	231f      	movs	r3, #31
   2640c:	18fb      	adds	r3, r7, r3
   2640e:	22ff      	movs	r2, #255	; 0xff
   26410:	701a      	strb	r2, [r3, #0]
	volatile tstrSocket		*pstrSock;
	static volatile uint8	u8NextTcpSock	= 0;
	static volatile uint8	u8NextUdpSock	= 0;

	/* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
	if(u16Domain == AF_INET)
   26412:	1dbb      	adds	r3, r7, #6
   26414:	881b      	ldrh	r3, [r3, #0]
   26416:	2b02      	cmp	r3, #2
   26418:	d000      	beq.n	2641c <socket+0x30>
   2641a:	e0ce      	b.n	265ba <socket+0x1ce>
	{
		if(u8Type == SOCK_STREAM)
   2641c:	1d7b      	adds	r3, r7, #5
   2641e:	781b      	ldrb	r3, [r3, #0]
   26420:	2b01      	cmp	r3, #1
   26422:	d135      	bne.n	26490 <socket+0xa4>
		{
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   26424:	231e      	movs	r3, #30
   26426:	18fb      	adds	r3, r7, r3
   26428:	2200      	movs	r2, #0
   2642a:	701a      	strb	r2, [r3, #0]
   2642c:	e02a      	b.n	26484 <socket+0x98>
			{
				u8SockID	= u8NextTcpSock;
   2642e:	2317      	movs	r3, #23
   26430:	18fb      	adds	r3, r7, r3
   26432:	4a66      	ldr	r2, [pc, #408]	; (265cc <socket+0x1e0>)
   26434:	7812      	ldrb	r2, [r2, #0]
   26436:	701a      	strb	r2, [r3, #0]
				pstrSock	= &gastrSockets[u8NextTcpSock];
   26438:	4b64      	ldr	r3, [pc, #400]	; (265cc <socket+0x1e0>)
   2643a:	781b      	ldrb	r3, [r3, #0]
   2643c:	b2db      	uxtb	r3, r3
   2643e:	011a      	lsls	r2, r3, #4
   26440:	4b63      	ldr	r3, [pc, #396]	; (265d0 <socket+0x1e4>)
   26442:	18d3      	adds	r3, r2, r3
   26444:	61bb      	str	r3, [r7, #24]
				u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
   26446:	4b61      	ldr	r3, [pc, #388]	; (265cc <socket+0x1e0>)
   26448:	781b      	ldrb	r3, [r3, #0]
   2644a:	b2db      	uxtb	r3, r3
   2644c:	1c5a      	adds	r2, r3, #1
   2644e:	4b61      	ldr	r3, [pc, #388]	; (265d4 <socket+0x1e8>)
   26450:	2107      	movs	r1, #7
   26452:	0010      	movs	r0, r2
   26454:	4798      	blx	r3
   26456:	000b      	movs	r3, r1
   26458:	b2da      	uxtb	r2, r3
   2645a:	4b5c      	ldr	r3, [pc, #368]	; (265cc <socket+0x1e0>)
   2645c:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   2645e:	69bb      	ldr	r3, [r7, #24]
   26460:	7a9b      	ldrb	r3, [r3, #10]
   26462:	b2db      	uxtb	r3, r3
   26464:	2b00      	cmp	r3, #0
   26466:	d106      	bne.n	26476 <socket+0x8a>
				{
					sock = (SOCKET)u8SockID;
   26468:	231f      	movs	r3, #31
   2646a:	18fb      	adds	r3, r7, r3
   2646c:	2217      	movs	r2, #23
   2646e:	18ba      	adds	r2, r7, r2
   26470:	7812      	ldrb	r2, [r2, #0]
   26472:	701a      	strb	r2, [r3, #0]
					break;
   26474:	e04c      	b.n	26510 <socket+0x124>
			for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
   26476:	231e      	movs	r3, #30
   26478:	18fb      	adds	r3, r7, r3
   2647a:	781a      	ldrb	r2, [r3, #0]
   2647c:	231e      	movs	r3, #30
   2647e:	18fb      	adds	r3, r7, r3
   26480:	3201      	adds	r2, #1
   26482:	701a      	strb	r2, [r3, #0]
   26484:	231e      	movs	r3, #30
   26486:	18fb      	adds	r3, r7, r3
   26488:	781b      	ldrb	r3, [r3, #0]
   2648a:	2b06      	cmp	r3, #6
   2648c:	d9cf      	bls.n	2642e <socket+0x42>
   2648e:	e03f      	b.n	26510 <socket+0x124>
				}
			}
		}
		else if(u8Type == SOCK_DGRAM)
   26490:	1d7b      	adds	r3, r7, #5
   26492:	781b      	ldrb	r3, [r3, #0]
   26494:	2b02      	cmp	r3, #2
   26496:	d13b      	bne.n	26510 <socket+0x124>
		{
			volatile tstrSocket	*pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
   26498:	4b4f      	ldr	r3, [pc, #316]	; (265d8 <socket+0x1ec>)
   2649a:	613b      	str	r3, [r7, #16]
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   2649c:	231e      	movs	r3, #30
   2649e:	18fb      	adds	r3, r7, r3
   264a0:	2200      	movs	r2, #0
   264a2:	701a      	strb	r2, [r3, #0]
   264a4:	e02f      	b.n	26506 <socket+0x11a>
			{
				u8SockID		= u8NextUdpSock;
   264a6:	2317      	movs	r3, #23
   264a8:	18fb      	adds	r3, r7, r3
   264aa:	4a4c      	ldr	r2, [pc, #304]	; (265dc <socket+0x1f0>)
   264ac:	7812      	ldrb	r2, [r2, #0]
   264ae:	701a      	strb	r2, [r3, #0]
				pstrSock		= &pastrUDPSockets[u8NextUdpSock];
   264b0:	4b4a      	ldr	r3, [pc, #296]	; (265dc <socket+0x1f0>)
   264b2:	781b      	ldrb	r3, [r3, #0]
   264b4:	b2db      	uxtb	r3, r3
   264b6:	011b      	lsls	r3, r3, #4
   264b8:	693a      	ldr	r2, [r7, #16]
   264ba:	18d3      	adds	r3, r2, r3
   264bc:	61bb      	str	r3, [r7, #24]
				u8NextUdpSock	= (u8NextUdpSock + 1) % UDP_SOCK_MAX;
   264be:	4b47      	ldr	r3, [pc, #284]	; (265dc <socket+0x1f0>)
   264c0:	781b      	ldrb	r3, [r3, #0]
   264c2:	b2db      	uxtb	r3, r3
   264c4:	3301      	adds	r3, #1
   264c6:	4a46      	ldr	r2, [pc, #280]	; (265e0 <socket+0x1f4>)
   264c8:	4013      	ands	r3, r2
   264ca:	d504      	bpl.n	264d6 <socket+0xea>
   264cc:	3b01      	subs	r3, #1
   264ce:	2204      	movs	r2, #4
   264d0:	4252      	negs	r2, r2
   264d2:	4313      	orrs	r3, r2
   264d4:	3301      	adds	r3, #1
   264d6:	b2da      	uxtb	r2, r3
   264d8:	4b40      	ldr	r3, [pc, #256]	; (265dc <socket+0x1f0>)
   264da:	701a      	strb	r2, [r3, #0]
				if(!pstrSock->bIsUsed)
   264dc:	69bb      	ldr	r3, [r7, #24]
   264de:	7a9b      	ldrb	r3, [r3, #10]
   264e0:	b2db      	uxtb	r3, r3
   264e2:	2b00      	cmp	r3, #0
   264e4:	d108      	bne.n	264f8 <socket+0x10c>
				{
					sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
   264e6:	2317      	movs	r3, #23
   264e8:	18fb      	adds	r3, r7, r3
   264ea:	781b      	ldrb	r3, [r3, #0]
   264ec:	3307      	adds	r3, #7
   264ee:	b2da      	uxtb	r2, r3
   264f0:	231f      	movs	r3, #31
   264f2:	18fb      	adds	r3, r7, r3
   264f4:	701a      	strb	r2, [r3, #0]
					break;
   264f6:	e00b      	b.n	26510 <socket+0x124>
			for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
   264f8:	231e      	movs	r3, #30
   264fa:	18fb      	adds	r3, r7, r3
   264fc:	781a      	ldrb	r2, [r3, #0]
   264fe:	231e      	movs	r3, #30
   26500:	18fb      	adds	r3, r7, r3
   26502:	3201      	adds	r2, #1
   26504:	701a      	strb	r2, [r3, #0]
   26506:	231e      	movs	r3, #30
   26508:	18fb      	adds	r3, r7, r3
   2650a:	781b      	ldrb	r3, [r3, #0]
   2650c:	2b03      	cmp	r3, #3
   2650e:	d9ca      	bls.n	264a6 <socket+0xba>
				}
			}
		}

		if(sock >= 0)
   26510:	231f      	movs	r3, #31
   26512:	18fb      	adds	r3, r7, r3
   26514:	781b      	ldrb	r3, [r3, #0]
   26516:	2b7f      	cmp	r3, #127	; 0x7f
   26518:	d84f      	bhi.n	265ba <socket+0x1ce>
		{
			m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
   2651a:	69bb      	ldr	r3, [r7, #24]
   2651c:	2210      	movs	r2, #16
   2651e:	2100      	movs	r1, #0
   26520:	0018      	movs	r0, r3
   26522:	4b30      	ldr	r3, [pc, #192]	; (265e4 <socket+0x1f8>)
   26524:	4798      	blx	r3
			pstrSock->bIsUsed = 1;
   26526:	69bb      	ldr	r3, [r7, #24]
   26528:	2201      	movs	r2, #1
   2652a:	729a      	strb	r2, [r3, #10]

			/* The session ID is used to distinguish different socket connections
				by comparing the assigned session ID to the one reported by the firmware*/
			++gu16SessionID;
   2652c:	4b2e      	ldr	r3, [pc, #184]	; (265e8 <socket+0x1fc>)
   2652e:	881b      	ldrh	r3, [r3, #0]
   26530:	b29b      	uxth	r3, r3
   26532:	3301      	adds	r3, #1
   26534:	b29a      	uxth	r2, r3
   26536:	4b2c      	ldr	r3, [pc, #176]	; (265e8 <socket+0x1fc>)
   26538:	801a      	strh	r2, [r3, #0]
			if(gu16SessionID == 0)
   2653a:	4b2b      	ldr	r3, [pc, #172]	; (265e8 <socket+0x1fc>)
   2653c:	881b      	ldrh	r3, [r3, #0]
   2653e:	b29b      	uxth	r3, r3
   26540:	2b00      	cmp	r3, #0
   26542:	d106      	bne.n	26552 <socket+0x166>
				++gu16SessionID;
   26544:	4b28      	ldr	r3, [pc, #160]	; (265e8 <socket+0x1fc>)
   26546:	881b      	ldrh	r3, [r3, #0]
   26548:	b29b      	uxth	r3, r3
   2654a:	3301      	adds	r3, #1
   2654c:	b29a      	uxth	r2, r3
   2654e:	4b26      	ldr	r3, [pc, #152]	; (265e8 <socket+0x1fc>)
   26550:	801a      	strh	r2, [r3, #0]
				
			pstrSock->u16SessionID = gu16SessionID;
   26552:	4b25      	ldr	r3, [pc, #148]	; (265e8 <socket+0x1fc>)
   26554:	881b      	ldrh	r3, [r3, #0]
   26556:	b29a      	uxth	r2, r3
   26558:	69bb      	ldr	r3, [r7, #24]
   2655a:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n",sock, gu16SessionID );
   2655c:	4b23      	ldr	r3, [pc, #140]	; (265ec <socket+0x200>)
   2655e:	0018      	movs	r0, r3
   26560:	4b23      	ldr	r3, [pc, #140]	; (265f0 <socket+0x204>)
   26562:	4798      	blx	r3
   26564:	231f      	movs	r3, #31
   26566:	18fb      	adds	r3, r7, r3
   26568:	2100      	movs	r1, #0
   2656a:	5659      	ldrsb	r1, [r3, r1]
   2656c:	4b1e      	ldr	r3, [pc, #120]	; (265e8 <socket+0x1fc>)
   2656e:	881b      	ldrh	r3, [r3, #0]
   26570:	b29b      	uxth	r3, r3
   26572:	001a      	movs	r2, r3
   26574:	4b1f      	ldr	r3, [pc, #124]	; (265f4 <socket+0x208>)
   26576:	0018      	movs	r0, r3
   26578:	4b1d      	ldr	r3, [pc, #116]	; (265f0 <socket+0x204>)
   2657a:	4798      	blx	r3
   2657c:	4b1e      	ldr	r3, [pc, #120]	; (265f8 <socket+0x20c>)
   2657e:	0018      	movs	r0, r3
   26580:	4b1b      	ldr	r3, [pc, #108]	; (265f0 <socket+0x204>)
   26582:	4798      	blx	r3

			if(u8Flags & SOCKET_FLAGS_SSL)
   26584:	1d3b      	adds	r3, r7, #4
   26586:	781b      	ldrb	r3, [r3, #0]
   26588:	2201      	movs	r2, #1
   2658a:	4013      	ands	r3, r2
   2658c:	d015      	beq.n	265ba <socket+0x1ce>
			{
				tstrSSLSocketCreateCmd	strSSLCreate;
				strSSLCreate.sslSock = sock;
   2658e:	230c      	movs	r3, #12
   26590:	18fb      	adds	r3, r7, r3
   26592:	221f      	movs	r2, #31
   26594:	18ba      	adds	r2, r7, r2
   26596:	7812      	ldrb	r2, [r2, #0]
   26598:	701a      	strb	r2, [r3, #0]
				pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE | SSL_FLAGS_NO_TX_COPY;
   2659a:	69bb      	ldr	r3, [r7, #24]
   2659c:	2221      	movs	r2, #33	; 0x21
   2659e:	72da      	strb	r2, [r3, #11]
				SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
   265a0:	230c      	movs	r3, #12
   265a2:	18fa      	adds	r2, r7, r3
   265a4:	2300      	movs	r3, #0
   265a6:	9302      	str	r3, [sp, #8]
   265a8:	2300      	movs	r3, #0
   265aa:	9301      	str	r3, [sp, #4]
   265ac:	2300      	movs	r3, #0
   265ae:	9300      	str	r3, [sp, #0]
   265b0:	2304      	movs	r3, #4
   265b2:	2150      	movs	r1, #80	; 0x50
   265b4:	2002      	movs	r0, #2
   265b6:	4c11      	ldr	r4, [pc, #68]	; (265fc <socket+0x210>)
   265b8:	47a0      	blx	r4
			}
		}
	}
	return sock;
   265ba:	231f      	movs	r3, #31
   265bc:	18fb      	adds	r3, r7, r3
   265be:	781b      	ldrb	r3, [r3, #0]
   265c0:	b25b      	sxtb	r3, r3
}
   265c2:	0018      	movs	r0, r3
   265c4:	46bd      	mov	sp, r7
   265c6:	b009      	add	sp, #36	; 0x24
   265c8:	bd90      	pop	{r4, r7, pc}
   265ca:	46c0      	nop			; (mov r8, r8)
   265cc:	200042b5 	.word	0x200042b5
   265d0:	20005b54 	.word	0x20005b54
   265d4:	00033b35 	.word	0x00033b35
   265d8:	20005bc4 	.word	0x20005bc4
   265dc:	200042b6 	.word	0x200042b6
   265e0:	80000003 	.word	0x80000003
   265e4:	00021a5d 	.word	0x00021a5d
   265e8:	200042b2 	.word	0x200042b2
   265ec:	0003a4f8 	.word	0x0003a4f8
   265f0:	0001ed29 	.word	0x0001ed29
   265f4:	0003a51c 	.word	0x0003a51c
   265f8:	0003a518 	.word	0x0003a518
   265fc:	00021cbd 	.word	0x00021cbd

00026600 <connect>:

Date
		5 June 2012
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
   26600:	b5b0      	push	{r4, r5, r7, lr}
   26602:	b08a      	sub	sp, #40	; 0x28
   26604:	af04      	add	r7, sp, #16
   26606:	6039      	str	r1, [r7, #0]
   26608:	0011      	movs	r1, r2
   2660a:	1dfb      	adds	r3, r7, #7
   2660c:	1c02      	adds	r2, r0, #0
   2660e:	701a      	strb	r2, [r3, #0]
   26610:	1dbb      	adds	r3, r7, #6
   26612:	1c0a      	adds	r2, r1, #0
   26614:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   26616:	2317      	movs	r3, #23
   26618:	18fb      	adds	r3, r7, r3
   2661a:	22fa      	movs	r2, #250	; 0xfa
   2661c:	701a      	strb	r2, [r3, #0]
	if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
   2661e:	1dfb      	adds	r3, r7, #7
   26620:	781b      	ldrb	r3, [r3, #0]
   26622:	2b7f      	cmp	r3, #127	; 0x7f
   26624:	d867      	bhi.n	266f6 <connect+0xf6>
   26626:	683b      	ldr	r3, [r7, #0]
   26628:	2b00      	cmp	r3, #0
   2662a:	d064      	beq.n	266f6 <connect+0xf6>
   2662c:	1dfb      	adds	r3, r7, #7
   2662e:	781b      	ldrb	r3, [r3, #0]
   26630:	b25b      	sxtb	r3, r3
   26632:	4a35      	ldr	r2, [pc, #212]	; (26708 <connect+0x108>)
   26634:	011b      	lsls	r3, r3, #4
   26636:	18d3      	adds	r3, r2, r3
   26638:	330a      	adds	r3, #10
   2663a:	781b      	ldrb	r3, [r3, #0]
   2663c:	b2db      	uxtb	r3, r3
   2663e:	2b01      	cmp	r3, #1
   26640:	d159      	bne.n	266f6 <connect+0xf6>
   26642:	1dbb      	adds	r3, r7, #6
   26644:	781b      	ldrb	r3, [r3, #0]
   26646:	2b00      	cmp	r3, #0
   26648:	d055      	beq.n	266f6 <connect+0xf6>
	{
		tstrConnectCmd	strConnect;
		uint8			u8Cmd = SOCKET_CMD_CONNECT;
   2664a:	2316      	movs	r3, #22
   2664c:	18fb      	adds	r3, r7, r3
   2664e:	2244      	movs	r2, #68	; 0x44
   26650:	701a      	strb	r2, [r3, #0]
		if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
   26652:	1dfb      	adds	r3, r7, #7
   26654:	781b      	ldrb	r3, [r3, #0]
   26656:	b25b      	sxtb	r3, r3
   26658:	4a2b      	ldr	r2, [pc, #172]	; (26708 <connect+0x108>)
   2665a:	011b      	lsls	r3, r3, #4
   2665c:	18d3      	adds	r3, r2, r3
   2665e:	330b      	adds	r3, #11
   26660:	781b      	ldrb	r3, [r3, #0]
   26662:	b2db      	uxtb	r3, r3
   26664:	001a      	movs	r2, r3
   26666:	2301      	movs	r3, #1
   26668:	4013      	ands	r3, r2
   2666a:	d00f      	beq.n	2668c <connect+0x8c>
		{
			u8Cmd = SOCKET_CMD_SSL_CONNECT;
   2666c:	2316      	movs	r3, #22
   2666e:	18fb      	adds	r3, r7, r3
   26670:	224b      	movs	r2, #75	; 0x4b
   26672:	701a      	strb	r2, [r3, #0]
			strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
   26674:	1dfb      	adds	r3, r7, #7
   26676:	781b      	ldrb	r3, [r3, #0]
   26678:	b25b      	sxtb	r3, r3
   2667a:	4a23      	ldr	r2, [pc, #140]	; (26708 <connect+0x108>)
   2667c:	011b      	lsls	r3, r3, #4
   2667e:	18d3      	adds	r3, r2, r3
   26680:	330b      	adds	r3, #11
   26682:	781b      	ldrb	r3, [r3, #0]
   26684:	b2da      	uxtb	r2, r3
   26686:	2308      	movs	r3, #8
   26688:	18fb      	adds	r3, r7, r3
   2668a:	725a      	strb	r2, [r3, #9]
		}
		strConnect.sock = sock;
   2668c:	2308      	movs	r3, #8
   2668e:	18fb      	adds	r3, r7, r3
   26690:	1dfa      	adds	r2, r7, #7
   26692:	7812      	ldrb	r2, [r2, #0]
   26694:	721a      	strb	r2, [r3, #8]
		m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
   26696:	6839      	ldr	r1, [r7, #0]
   26698:	2308      	movs	r3, #8
   2669a:	18fb      	adds	r3, r7, r3
   2669c:	2208      	movs	r2, #8
   2669e:	0018      	movs	r0, r3
   266a0:	4b1a      	ldr	r3, [pc, #104]	; (2670c <connect+0x10c>)
   266a2:	4798      	blx	r3

		strConnect.u16SessionID		= gastrSockets[sock].u16SessionID;
   266a4:	1dfb      	adds	r3, r7, #7
   266a6:	781b      	ldrb	r3, [r3, #0]
   266a8:	b25b      	sxtb	r3, r3
   266aa:	4a17      	ldr	r2, [pc, #92]	; (26708 <connect+0x108>)
   266ac:	011b      	lsls	r3, r3, #4
   266ae:	18d3      	adds	r3, r2, r3
   266b0:	3306      	adds	r3, #6
   266b2:	881b      	ldrh	r3, [r3, #0]
   266b4:	b29a      	uxth	r2, r3
   266b6:	2308      	movs	r3, #8
   266b8:	18fb      	adds	r3, r7, r3
   266ba:	815a      	strh	r2, [r3, #10]
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect,sizeof(tstrConnectCmd), NULL, 0, 0);
   266bc:	2317      	movs	r3, #23
   266be:	18fc      	adds	r4, r7, r3
   266c0:	2308      	movs	r3, #8
   266c2:	18fa      	adds	r2, r7, r3
   266c4:	2316      	movs	r3, #22
   266c6:	18fb      	adds	r3, r7, r3
   266c8:	7819      	ldrb	r1, [r3, #0]
   266ca:	2300      	movs	r3, #0
   266cc:	9302      	str	r3, [sp, #8]
   266ce:	2300      	movs	r3, #0
   266d0:	9301      	str	r3, [sp, #4]
   266d2:	2300      	movs	r3, #0
   266d4:	9300      	str	r3, [sp, #0]
   266d6:	230c      	movs	r3, #12
   266d8:	2002      	movs	r0, #2
   266da:	4d0d      	ldr	r5, [pc, #52]	; (26710 <connect+0x110>)
   266dc:	47a8      	blx	r5
   266de:	0003      	movs	r3, r0
   266e0:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   266e2:	2317      	movs	r3, #23
   266e4:	18fb      	adds	r3, r7, r3
   266e6:	781b      	ldrb	r3, [r3, #0]
   266e8:	b25b      	sxtb	r3, r3
   266ea:	2b00      	cmp	r3, #0
   266ec:	d003      	beq.n	266f6 <connect+0xf6>
		{
			s8Ret = SOCK_ERR_INVALID;
   266ee:	2317      	movs	r3, #23
   266f0:	18fb      	adds	r3, r7, r3
   266f2:	22f7      	movs	r2, #247	; 0xf7
   266f4:	701a      	strb	r2, [r3, #0]
		}
	}
	return s8Ret;
   266f6:	2317      	movs	r3, #23
   266f8:	18fb      	adds	r3, r7, r3
   266fa:	781b      	ldrb	r3, [r3, #0]
   266fc:	b25b      	sxtb	r3, r3
}
   266fe:	0018      	movs	r0, r3
   26700:	46bd      	mov	sp, r7
   26702:	b006      	add	sp, #24
   26704:	bdb0      	pop	{r4, r5, r7, pc}
   26706:	46c0      	nop			; (mov r8, r8)
   26708:	20005b54 	.word	0x20005b54
   2670c:	00021a21 	.word	0x00021a21
   26710:	00021cbd 	.word	0x00021cbd

00026714 <send>:

Date
		5 June 2012
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
   26714:	b590      	push	{r4, r7, lr}
   26716:	b08f      	sub	sp, #60	; 0x3c
   26718:	af04      	add	r7, sp, #16
   2671a:	0004      	movs	r4, r0
   2671c:	60b9      	str	r1, [r7, #8]
   2671e:	0010      	movs	r0, r2
   26720:	0019      	movs	r1, r3
   26722:	230f      	movs	r3, #15
   26724:	18fb      	adds	r3, r7, r3
   26726:	1c22      	adds	r2, r4, #0
   26728:	701a      	strb	r2, [r3, #0]
   2672a:	230c      	movs	r3, #12
   2672c:	18fb      	adds	r3, r7, r3
   2672e:	1c02      	adds	r2, r0, #0
   26730:	801a      	strh	r2, [r3, #0]
   26732:	1dbb      	adds	r3, r7, #6
   26734:	1c0a      	adds	r2, r1, #0
   26736:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   26738:	2326      	movs	r3, #38	; 0x26
   2673a:	18fb      	adds	r3, r7, r3
   2673c:	2206      	movs	r2, #6
   2673e:	4252      	negs	r2, r2
   26740:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
   26742:	230f      	movs	r3, #15
   26744:	18fb      	adds	r3, r7, r3
   26746:	781b      	ldrb	r3, [r3, #0]
   26748:	2b7f      	cmp	r3, #127	; 0x7f
   2674a:	d900      	bls.n	2674e <send+0x3a>
   2674c:	e087      	b.n	2685e <send+0x14a>
   2674e:	68bb      	ldr	r3, [r7, #8]
   26750:	2b00      	cmp	r3, #0
   26752:	d100      	bne.n	26756 <send+0x42>
   26754:	e083      	b.n	2685e <send+0x14a>
   26756:	230c      	movs	r3, #12
   26758:	18fb      	adds	r3, r7, r3
   2675a:	881a      	ldrh	r2, [r3, #0]
   2675c:	23af      	movs	r3, #175	; 0xaf
   2675e:	00db      	lsls	r3, r3, #3
   26760:	429a      	cmp	r2, r3
   26762:	d900      	bls.n	26766 <send+0x52>
   26764:	e07b      	b.n	2685e <send+0x14a>
   26766:	230f      	movs	r3, #15
   26768:	18fb      	adds	r3, r7, r3
   2676a:	781b      	ldrb	r3, [r3, #0]
   2676c:	b25b      	sxtb	r3, r3
   2676e:	4a40      	ldr	r2, [pc, #256]	; (26870 <send+0x15c>)
   26770:	011b      	lsls	r3, r3, #4
   26772:	18d3      	adds	r3, r2, r3
   26774:	330a      	adds	r3, #10
   26776:	781b      	ldrb	r3, [r3, #0]
   26778:	b2db      	uxtb	r3, r3
   2677a:	2b01      	cmp	r3, #1
   2677c:	d16f      	bne.n	2685e <send+0x14a>
	{
		uint16			u16DataOffset;
		tstrSendCmd		strSend;
		uint8			u8Cmd;

		u8Cmd			= SOCKET_CMD_SEND;
   2677e:	2323      	movs	r3, #35	; 0x23
   26780:	18fb      	adds	r3, r7, r3
   26782:	2245      	movs	r2, #69	; 0x45
   26784:	701a      	strb	r2, [r3, #0]
		u16DataOffset	= TCP_TX_PACKET_OFFSET;
   26786:	2324      	movs	r3, #36	; 0x24
   26788:	18fb      	adds	r3, r7, r3
   2678a:	2250      	movs	r2, #80	; 0x50
   2678c:	801a      	strh	r2, [r3, #0]

		strSend.sock			= sock;
   2678e:	2310      	movs	r3, #16
   26790:	18fb      	adds	r3, r7, r3
   26792:	220f      	movs	r2, #15
   26794:	18ba      	adds	r2, r7, r2
   26796:	7812      	ldrb	r2, [r2, #0]
   26798:	701a      	strb	r2, [r3, #0]
		strSend.u16DataSize		= NM_BSP_B_L_16(u16SendLength);
   2679a:	2310      	movs	r3, #16
   2679c:	18fb      	adds	r3, r7, r3
   2679e:	220c      	movs	r2, #12
   267a0:	18ba      	adds	r2, r7, r2
   267a2:	8812      	ldrh	r2, [r2, #0]
   267a4:	805a      	strh	r2, [r3, #2]
		strSend.u16SessionID	= gastrSockets[sock].u16SessionID;
   267a6:	230f      	movs	r3, #15
   267a8:	18fb      	adds	r3, r7, r3
   267aa:	781b      	ldrb	r3, [r3, #0]
   267ac:	b25b      	sxtb	r3, r3
   267ae:	4a30      	ldr	r2, [pc, #192]	; (26870 <send+0x15c>)
   267b0:	011b      	lsls	r3, r3, #4
   267b2:	18d3      	adds	r3, r2, r3
   267b4:	3306      	adds	r3, #6
   267b6:	881b      	ldrh	r3, [r3, #0]
   267b8:	b29a      	uxth	r2, r3
   267ba:	2310      	movs	r3, #16
   267bc:	18fb      	adds	r3, r7, r3
   267be:	819a      	strh	r2, [r3, #12]

		if(sock >= TCP_SOCK_MAX)
   267c0:	230f      	movs	r3, #15
   267c2:	18fb      	adds	r3, r7, r3
   267c4:	781b      	ldrb	r3, [r3, #0]
   267c6:	b25b      	sxtb	r3, r3
   267c8:	2b06      	cmp	r3, #6
   267ca:	dd03      	ble.n	267d4 <send+0xc0>
		{
			u16DataOffset = UDP_TX_PACKET_OFFSET;
   267cc:	2324      	movs	r3, #36	; 0x24
   267ce:	18fb      	adds	r3, r7, r3
   267d0:	2244      	movs	r2, #68	; 0x44
   267d2:	801a      	strh	r2, [r3, #0]
		}
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   267d4:	230f      	movs	r3, #15
   267d6:	18fb      	adds	r3, r7, r3
   267d8:	781b      	ldrb	r3, [r3, #0]
   267da:	b25b      	sxtb	r3, r3
   267dc:	4a24      	ldr	r2, [pc, #144]	; (26870 <send+0x15c>)
   267de:	011b      	lsls	r3, r3, #4
   267e0:	18d3      	adds	r3, r2, r3
   267e2:	330b      	adds	r3, #11
   267e4:	781b      	ldrb	r3, [r3, #0]
   267e6:	b2db      	uxtb	r3, r3
   267e8:	001a      	movs	r2, r3
   267ea:	2301      	movs	r3, #1
   267ec:	4013      	ands	r3, r2
   267ee:	d00f      	beq.n	26810 <send+0xfc>
		{
			u8Cmd			= SOCKET_CMD_SSL_SEND;
   267f0:	2323      	movs	r3, #35	; 0x23
   267f2:	18fb      	adds	r3, r7, r3
   267f4:	224c      	movs	r2, #76	; 0x4c
   267f6:	701a      	strb	r2, [r3, #0]
			u16DataOffset	= gastrSockets[sock].u16DataOffset;
   267f8:	230f      	movs	r3, #15
   267fa:	18fb      	adds	r3, r7, r3
   267fc:	2200      	movs	r2, #0
   267fe:	569a      	ldrsb	r2, [r3, r2]
   26800:	2324      	movs	r3, #36	; 0x24
   26802:	18fb      	adds	r3, r7, r3
   26804:	491a      	ldr	r1, [pc, #104]	; (26870 <send+0x15c>)
   26806:	0112      	lsls	r2, r2, #4
   26808:	188a      	adds	r2, r1, r2
   2680a:	3208      	adds	r2, #8
   2680c:	8812      	ldrh	r2, [r2, #0]
   2680e:	801a      	strh	r2, [r3, #0]
		}

		s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
   26810:	2323      	movs	r3, #35	; 0x23
   26812:	18fb      	adds	r3, r7, r3
   26814:	781b      	ldrb	r3, [r3, #0]
   26816:	2280      	movs	r2, #128	; 0x80
   26818:	4252      	negs	r2, r2
   2681a:	4313      	orrs	r3, r2
   2681c:	b2d9      	uxtb	r1, r3
   2681e:	2310      	movs	r3, #16
   26820:	18fa      	adds	r2, r7, r3
   26822:	2324      	movs	r3, #36	; 0x24
   26824:	18fb      	adds	r3, r7, r3
   26826:	881b      	ldrh	r3, [r3, #0]
   26828:	9302      	str	r3, [sp, #8]
   2682a:	230c      	movs	r3, #12
   2682c:	18fb      	adds	r3, r7, r3
   2682e:	881b      	ldrh	r3, [r3, #0]
   26830:	9301      	str	r3, [sp, #4]
   26832:	68bb      	ldr	r3, [r7, #8]
   26834:	9300      	str	r3, [sp, #0]
   26836:	2310      	movs	r3, #16
   26838:	2002      	movs	r0, #2
   2683a:	4c0e      	ldr	r4, [pc, #56]	; (26874 <send+0x160>)
   2683c:	47a0      	blx	r4
   2683e:	0003      	movs	r3, r0
   26840:	001a      	movs	r2, r3
   26842:	2326      	movs	r3, #38	; 0x26
   26844:	18fb      	adds	r3, r7, r3
   26846:	801a      	strh	r2, [r3, #0]
		if(s16Ret != SOCK_ERR_NO_ERROR)
   26848:	2326      	movs	r3, #38	; 0x26
   2684a:	18fb      	adds	r3, r7, r3
   2684c:	2200      	movs	r2, #0
   2684e:	5e9b      	ldrsh	r3, [r3, r2]
   26850:	2b00      	cmp	r3, #0
   26852:	d004      	beq.n	2685e <send+0x14a>
		{
			s16Ret = SOCK_ERR_BUFFER_FULL;
   26854:	2326      	movs	r3, #38	; 0x26
   26856:	18fb      	adds	r3, r7, r3
   26858:	220e      	movs	r2, #14
   2685a:	4252      	negs	r2, r2
   2685c:	801a      	strh	r2, [r3, #0]
		}
	}
	return s16Ret;
   2685e:	2326      	movs	r3, #38	; 0x26
   26860:	18fb      	adds	r3, r7, r3
   26862:	2200      	movs	r2, #0
   26864:	5e9b      	ldrsh	r3, [r3, r2]
}
   26866:	0018      	movs	r0, r3
   26868:	46bd      	mov	sp, r7
   2686a:	b00b      	add	sp, #44	; 0x2c
   2686c:	bd90      	pop	{r4, r7, pc}
   2686e:	46c0      	nop			; (mov r8, r8)
   26870:	20005b54 	.word	0x20005b54
   26874:	00021cbd 	.word	0x00021cbd

00026878 <recv>:

Date
		5 June 2012
*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
   26878:	b590      	push	{r4, r7, lr}
   2687a:	b08d      	sub	sp, #52	; 0x34
   2687c:	af04      	add	r7, sp, #16
   2687e:	60b9      	str	r1, [r7, #8]
   26880:	0011      	movs	r1, r2
   26882:	607b      	str	r3, [r7, #4]
   26884:	230f      	movs	r3, #15
   26886:	18fb      	adds	r3, r7, r3
   26888:	1c02      	adds	r2, r0, #0
   2688a:	701a      	strb	r2, [r3, #0]
   2688c:	230c      	movs	r3, #12
   2688e:	18fb      	adds	r3, r7, r3
   26890:	1c0a      	adds	r2, r1, #0
   26892:	801a      	strh	r2, [r3, #0]
	sint16	s16Ret = SOCK_ERR_INVALID_ARG;
   26894:	231e      	movs	r3, #30
   26896:	18fb      	adds	r3, r7, r3
   26898:	2206      	movs	r2, #6
   2689a:	4252      	negs	r2, r2
   2689c:	801a      	strh	r2, [r3, #0]
	
	if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
   2689e:	230f      	movs	r3, #15
   268a0:	18fb      	adds	r3, r7, r3
   268a2:	781b      	ldrb	r3, [r3, #0]
   268a4:	2b7f      	cmp	r3, #127	; 0x7f
   268a6:	d900      	bls.n	268aa <recv+0x32>
   268a8:	e099      	b.n	269de <recv+0x166>
   268aa:	68bb      	ldr	r3, [r7, #8]
   268ac:	2b00      	cmp	r3, #0
   268ae:	d100      	bne.n	268b2 <recv+0x3a>
   268b0:	e095      	b.n	269de <recv+0x166>
   268b2:	230c      	movs	r3, #12
   268b4:	18fb      	adds	r3, r7, r3
   268b6:	881b      	ldrh	r3, [r3, #0]
   268b8:	2b00      	cmp	r3, #0
   268ba:	d100      	bne.n	268be <recv+0x46>
   268bc:	e08f      	b.n	269de <recv+0x166>
   268be:	230f      	movs	r3, #15
   268c0:	18fb      	adds	r3, r7, r3
   268c2:	781b      	ldrb	r3, [r3, #0]
   268c4:	b25b      	sxtb	r3, r3
   268c6:	4a4a      	ldr	r2, [pc, #296]	; (269f0 <recv+0x178>)
   268c8:	011b      	lsls	r3, r3, #4
   268ca:	18d3      	adds	r3, r2, r3
   268cc:	330a      	adds	r3, #10
   268ce:	781b      	ldrb	r3, [r3, #0]
   268d0:	b2db      	uxtb	r3, r3
   268d2:	2b01      	cmp	r3, #1
   268d4:	d000      	beq.n	268d8 <recv+0x60>
   268d6:	e082      	b.n	269de <recv+0x166>
	{
		s16Ret = SOCK_ERR_NO_ERROR;
   268d8:	231e      	movs	r3, #30
   268da:	18fb      	adds	r3, r7, r3
   268dc:	2200      	movs	r2, #0
   268de:	801a      	strh	r2, [r3, #0]
		gastrSockets[sock].pu8UserBuffer 		= (uint8*)pvRecvBuf;
   268e0:	230f      	movs	r3, #15
   268e2:	18fb      	adds	r3, r7, r3
   268e4:	2200      	movs	r2, #0
   268e6:	569a      	ldrsb	r2, [r3, r2]
   268e8:	4b41      	ldr	r3, [pc, #260]	; (269f0 <recv+0x178>)
   268ea:	0112      	lsls	r2, r2, #4
   268ec:	68b9      	ldr	r1, [r7, #8]
   268ee:	50d1      	str	r1, [r2, r3]
		gastrSockets[sock].u16UserBufferSize 	= u16BufLen;
   268f0:	230f      	movs	r3, #15
   268f2:	18fb      	adds	r3, r7, r3
   268f4:	781b      	ldrb	r3, [r3, #0]
   268f6:	b25b      	sxtb	r3, r3
   268f8:	4a3d      	ldr	r2, [pc, #244]	; (269f0 <recv+0x178>)
   268fa:	011b      	lsls	r3, r3, #4
   268fc:	18d3      	adds	r3, r2, r3
   268fe:	3304      	adds	r3, #4
   26900:	220c      	movs	r2, #12
   26902:	18ba      	adds	r2, r7, r2
   26904:	8812      	ldrh	r2, [r2, #0]
   26906:	801a      	strh	r2, [r3, #0]

		if(!gastrSockets[sock].bIsRecvPending)
   26908:	230f      	movs	r3, #15
   2690a:	18fb      	adds	r3, r7, r3
   2690c:	781b      	ldrb	r3, [r3, #0]
   2690e:	b25b      	sxtb	r3, r3
   26910:	4a37      	ldr	r2, [pc, #220]	; (269f0 <recv+0x178>)
   26912:	011b      	lsls	r3, r3, #4
   26914:	18d3      	adds	r3, r2, r3
   26916:	330c      	adds	r3, #12
   26918:	781b      	ldrb	r3, [r3, #0]
   2691a:	b2db      	uxtb	r3, r3
   2691c:	2b00      	cmp	r3, #0
   2691e:	d15e      	bne.n	269de <recv+0x166>
		{
			tstrRecvCmd	strRecv;
			uint8		u8Cmd = SOCKET_CMD_RECV;
   26920:	231d      	movs	r3, #29
   26922:	18fb      	adds	r3, r7, r3
   26924:	2246      	movs	r2, #70	; 0x46
   26926:	701a      	strb	r2, [r3, #0]

			gastrSockets[sock].bIsRecvPending = 1;
   26928:	230f      	movs	r3, #15
   2692a:	18fb      	adds	r3, r7, r3
   2692c:	781b      	ldrb	r3, [r3, #0]
   2692e:	b25b      	sxtb	r3, r3
   26930:	4a2f      	ldr	r2, [pc, #188]	; (269f0 <recv+0x178>)
   26932:	011b      	lsls	r3, r3, #4
   26934:	18d3      	adds	r3, r2, r3
   26936:	330c      	adds	r3, #12
   26938:	2201      	movs	r2, #1
   2693a:	701a      	strb	r2, [r3, #0]
			if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   2693c:	230f      	movs	r3, #15
   2693e:	18fb      	adds	r3, r7, r3
   26940:	781b      	ldrb	r3, [r3, #0]
   26942:	b25b      	sxtb	r3, r3
   26944:	4a2a      	ldr	r2, [pc, #168]	; (269f0 <recv+0x178>)
   26946:	011b      	lsls	r3, r3, #4
   26948:	18d3      	adds	r3, r2, r3
   2694a:	330b      	adds	r3, #11
   2694c:	781b      	ldrb	r3, [r3, #0]
   2694e:	b2db      	uxtb	r3, r3
   26950:	001a      	movs	r2, r3
   26952:	2301      	movs	r3, #1
   26954:	4013      	ands	r3, r2
   26956:	d003      	beq.n	26960 <recv+0xe8>
			{
				u8Cmd = SOCKET_CMD_SSL_RECV;
   26958:	231d      	movs	r3, #29
   2695a:	18fb      	adds	r3, r7, r3
   2695c:	224d      	movs	r2, #77	; 0x4d
   2695e:	701a      	strb	r2, [r3, #0]
			}

			/* Check the timeout value. */
			if(u32Timeoutmsec == 0)
   26960:	687b      	ldr	r3, [r7, #4]
   26962:	2b00      	cmp	r3, #0
   26964:	d105      	bne.n	26972 <recv+0xfa>
				strRecv.u32Timeoutmsec = 0xFFFFFFFF;
   26966:	2314      	movs	r3, #20
   26968:	18fb      	adds	r3, r7, r3
   2696a:	2201      	movs	r2, #1
   2696c:	4252      	negs	r2, r2
   2696e:	601a      	str	r2, [r3, #0]
   26970:	e003      	b.n	2697a <recv+0x102>
			else
				strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
   26972:	2314      	movs	r3, #20
   26974:	18fb      	adds	r3, r7, r3
   26976:	687a      	ldr	r2, [r7, #4]
   26978:	601a      	str	r2, [r3, #0]
			strRecv.sock = sock;
   2697a:	2314      	movs	r3, #20
   2697c:	18fb      	adds	r3, r7, r3
   2697e:	220f      	movs	r2, #15
   26980:	18ba      	adds	r2, r7, r2
   26982:	7812      	ldrb	r2, [r2, #0]
   26984:	711a      	strb	r2, [r3, #4]
			strRecv.u16SessionID		= gastrSockets[sock].u16SessionID;
   26986:	230f      	movs	r3, #15
   26988:	18fb      	adds	r3, r7, r3
   2698a:	781b      	ldrb	r3, [r3, #0]
   2698c:	b25b      	sxtb	r3, r3
   2698e:	4a18      	ldr	r2, [pc, #96]	; (269f0 <recv+0x178>)
   26990:	011b      	lsls	r3, r3, #4
   26992:	18d3      	adds	r3, r2, r3
   26994:	3306      	adds	r3, #6
   26996:	881b      	ldrh	r3, [r3, #0]
   26998:	b29a      	uxth	r2, r3
   2699a:	2314      	movs	r3, #20
   2699c:	18fb      	adds	r3, r7, r3
   2699e:	80da      	strh	r2, [r3, #6]
		
			s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL , 0, 0);
   269a0:	2314      	movs	r3, #20
   269a2:	18fa      	adds	r2, r7, r3
   269a4:	231d      	movs	r3, #29
   269a6:	18fb      	adds	r3, r7, r3
   269a8:	7819      	ldrb	r1, [r3, #0]
   269aa:	2300      	movs	r3, #0
   269ac:	9302      	str	r3, [sp, #8]
   269ae:	2300      	movs	r3, #0
   269b0:	9301      	str	r3, [sp, #4]
   269b2:	2300      	movs	r3, #0
   269b4:	9300      	str	r3, [sp, #0]
   269b6:	2308      	movs	r3, #8
   269b8:	2002      	movs	r0, #2
   269ba:	4c0e      	ldr	r4, [pc, #56]	; (269f4 <recv+0x17c>)
   269bc:	47a0      	blx	r4
   269be:	0003      	movs	r3, r0
   269c0:	001a      	movs	r2, r3
   269c2:	231e      	movs	r3, #30
   269c4:	18fb      	adds	r3, r7, r3
   269c6:	801a      	strh	r2, [r3, #0]
			if(s16Ret != SOCK_ERR_NO_ERROR)
   269c8:	231e      	movs	r3, #30
   269ca:	18fb      	adds	r3, r7, r3
   269cc:	2200      	movs	r2, #0
   269ce:	5e9b      	ldrsh	r3, [r3, r2]
   269d0:	2b00      	cmp	r3, #0
   269d2:	d004      	beq.n	269de <recv+0x166>
			{
				s16Ret = SOCK_ERR_BUFFER_FULL;
   269d4:	231e      	movs	r3, #30
   269d6:	18fb      	adds	r3, r7, r3
   269d8:	220e      	movs	r2, #14
   269da:	4252      	negs	r2, r2
   269dc:	801a      	strh	r2, [r3, #0]
			}
		}
	}
	return s16Ret;
   269de:	231e      	movs	r3, #30
   269e0:	18fb      	adds	r3, r7, r3
   269e2:	2200      	movs	r2, #0
   269e4:	5e9b      	ldrsh	r3, [r3, r2]
}
   269e6:	0018      	movs	r0, r3
   269e8:	46bd      	mov	sp, r7
   269ea:	b009      	add	sp, #36	; 0x24
   269ec:	bd90      	pop	{r4, r7, pc}
   269ee:	46c0      	nop			; (mov r8, r8)
   269f0:	20005b54 	.word	0x20005b54
   269f4:	00021cbd 	.word	0x00021cbd

000269f8 <close>:

Date
		4 June 2012
*********************************************************************/
sint8 close(SOCKET sock)
{
   269f8:	b5b0      	push	{r4, r5, r7, lr}
   269fa:	b088      	sub	sp, #32
   269fc:	af04      	add	r7, sp, #16
   269fe:	0002      	movs	r2, r0
   26a00:	1dfb      	adds	r3, r7, #7
   26a02:	701a      	strb	r2, [r3, #0]
	sint8	s8Ret = SOCK_ERR_INVALID_ARG;
   26a04:	230f      	movs	r3, #15
   26a06:	18fb      	adds	r3, r7, r3
   26a08:	22fa      	movs	r2, #250	; 0xfa
   26a0a:	701a      	strb	r2, [r3, #0]
    M2M_INFO("Sock to delete <%d>\n", sock);
   26a0c:	4b43      	ldr	r3, [pc, #268]	; (26b1c <close+0x124>)
   26a0e:	0018      	movs	r0, r3
   26a10:	4b43      	ldr	r3, [pc, #268]	; (26b20 <close+0x128>)
   26a12:	4798      	blx	r3
   26a14:	1dfb      	adds	r3, r7, #7
   26a16:	2200      	movs	r2, #0
   26a18:	569a      	ldrsb	r2, [r3, r2]
   26a1a:	4b42      	ldr	r3, [pc, #264]	; (26b24 <close+0x12c>)
   26a1c:	0011      	movs	r1, r2
   26a1e:	0018      	movs	r0, r3
   26a20:	4b3f      	ldr	r3, [pc, #252]	; (26b20 <close+0x128>)
   26a22:	4798      	blx	r3
   26a24:	4b40      	ldr	r3, [pc, #256]	; (26b28 <close+0x130>)
   26a26:	0018      	movs	r0, r3
   26a28:	4b3d      	ldr	r3, [pc, #244]	; (26b20 <close+0x128>)
   26a2a:	4798      	blx	r3
	if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
   26a2c:	1dfb      	adds	r3, r7, #7
   26a2e:	781b      	ldrb	r3, [r3, #0]
   26a30:	2b7f      	cmp	r3, #127	; 0x7f
   26a32:	d86a      	bhi.n	26b0a <close+0x112>
   26a34:	1dfb      	adds	r3, r7, #7
   26a36:	781b      	ldrb	r3, [r3, #0]
   26a38:	b25b      	sxtb	r3, r3
   26a3a:	4a3c      	ldr	r2, [pc, #240]	; (26b2c <close+0x134>)
   26a3c:	011b      	lsls	r3, r3, #4
   26a3e:	18d3      	adds	r3, r2, r3
   26a40:	330a      	adds	r3, #10
   26a42:	781b      	ldrb	r3, [r3, #0]
   26a44:	b2db      	uxtb	r3, r3
   26a46:	2b01      	cmp	r3, #1
   26a48:	d15f      	bne.n	26b0a <close+0x112>
	{
		uint8	u8Cmd = SOCKET_CMD_CLOSE;
   26a4a:	230e      	movs	r3, #14
   26a4c:	18fb      	adds	r3, r7, r3
   26a4e:	2249      	movs	r2, #73	; 0x49
   26a50:	701a      	strb	r2, [r3, #0]
		tstrCloseCmd strclose;
		strclose.sock = sock; 
   26a52:	2308      	movs	r3, #8
   26a54:	18fb      	adds	r3, r7, r3
   26a56:	1dfa      	adds	r2, r7, #7
   26a58:	7812      	ldrb	r2, [r2, #0]
   26a5a:	701a      	strb	r2, [r3, #0]
		strclose.u16SessionID		= gastrSockets[sock].u16SessionID;
   26a5c:	1dfb      	adds	r3, r7, #7
   26a5e:	781b      	ldrb	r3, [r3, #0]
   26a60:	b25b      	sxtb	r3, r3
   26a62:	4a32      	ldr	r2, [pc, #200]	; (26b2c <close+0x134>)
   26a64:	011b      	lsls	r3, r3, #4
   26a66:	18d3      	adds	r3, r2, r3
   26a68:	3306      	adds	r3, #6
   26a6a:	881b      	ldrh	r3, [r3, #0]
   26a6c:	b29a      	uxth	r2, r3
   26a6e:	2308      	movs	r3, #8
   26a70:	18fb      	adds	r3, r7, r3
   26a72:	805a      	strh	r2, [r3, #2]
		
		gastrSockets[sock].bIsUsed = 0;
   26a74:	1dfb      	adds	r3, r7, #7
   26a76:	781b      	ldrb	r3, [r3, #0]
   26a78:	b25b      	sxtb	r3, r3
   26a7a:	4a2c      	ldr	r2, [pc, #176]	; (26b2c <close+0x134>)
   26a7c:	011b      	lsls	r3, r3, #4
   26a7e:	18d3      	adds	r3, r2, r3
   26a80:	330a      	adds	r3, #10
   26a82:	2200      	movs	r2, #0
   26a84:	701a      	strb	r2, [r3, #0]
		gastrSockets[sock].u16SessionID =0;
   26a86:	1dfb      	adds	r3, r7, #7
   26a88:	781b      	ldrb	r3, [r3, #0]
   26a8a:	b25b      	sxtb	r3, r3
   26a8c:	4a27      	ldr	r2, [pc, #156]	; (26b2c <close+0x134>)
   26a8e:	011b      	lsls	r3, r3, #4
   26a90:	18d3      	adds	r3, r2, r3
   26a92:	3306      	adds	r3, #6
   26a94:	2200      	movs	r2, #0
   26a96:	801a      	strh	r2, [r3, #0]
		
		if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
   26a98:	1dfb      	adds	r3, r7, #7
   26a9a:	781b      	ldrb	r3, [r3, #0]
   26a9c:	b25b      	sxtb	r3, r3
   26a9e:	4a23      	ldr	r2, [pc, #140]	; (26b2c <close+0x134>)
   26aa0:	011b      	lsls	r3, r3, #4
   26aa2:	18d3      	adds	r3, r2, r3
   26aa4:	330b      	adds	r3, #11
   26aa6:	781b      	ldrb	r3, [r3, #0]
   26aa8:	b2db      	uxtb	r3, r3
   26aaa:	001a      	movs	r2, r3
   26aac:	2301      	movs	r3, #1
   26aae:	4013      	ands	r3, r2
   26ab0:	d003      	beq.n	26aba <close+0xc2>
		{
			u8Cmd = SOCKET_CMD_SSL_CLOSE;
   26ab2:	230e      	movs	r3, #14
   26ab4:	18fb      	adds	r3, r7, r3
   26ab6:	224e      	movs	r2, #78	; 0x4e
   26ab8:	701a      	strb	r2, [r3, #0]
		}
		s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL,0, 0);
   26aba:	230f      	movs	r3, #15
   26abc:	18fc      	adds	r4, r7, r3
   26abe:	2308      	movs	r3, #8
   26ac0:	18fa      	adds	r2, r7, r3
   26ac2:	230e      	movs	r3, #14
   26ac4:	18fb      	adds	r3, r7, r3
   26ac6:	7819      	ldrb	r1, [r3, #0]
   26ac8:	2300      	movs	r3, #0
   26aca:	9302      	str	r3, [sp, #8]
   26acc:	2300      	movs	r3, #0
   26ace:	9301      	str	r3, [sp, #4]
   26ad0:	2300      	movs	r3, #0
   26ad2:	9300      	str	r3, [sp, #0]
   26ad4:	2304      	movs	r3, #4
   26ad6:	2002      	movs	r0, #2
   26ad8:	4d15      	ldr	r5, [pc, #84]	; (26b30 <close+0x138>)
   26ada:	47a8      	blx	r5
   26adc:	0003      	movs	r3, r0
   26ade:	7023      	strb	r3, [r4, #0]
		if(s8Ret != SOCK_ERR_NO_ERROR)
   26ae0:	230f      	movs	r3, #15
   26ae2:	18fb      	adds	r3, r7, r3
   26ae4:	781b      	ldrb	r3, [r3, #0]
   26ae6:	b25b      	sxtb	r3, r3
   26ae8:	2b00      	cmp	r3, #0
   26aea:	d003      	beq.n	26af4 <close+0xfc>
		{
			s8Ret = SOCK_ERR_INVALID;
   26aec:	230f      	movs	r3, #15
   26aee:	18fb      	adds	r3, r7, r3
   26af0:	22f7      	movs	r2, #247	; 0xf7
   26af2:	701a      	strb	r2, [r3, #0]
		}
		m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
   26af4:	1dfb      	adds	r3, r7, #7
   26af6:	781b      	ldrb	r3, [r3, #0]
   26af8:	b25b      	sxtb	r3, r3
   26afa:	011a      	lsls	r2, r3, #4
   26afc:	4b0b      	ldr	r3, [pc, #44]	; (26b2c <close+0x134>)
   26afe:	18d3      	adds	r3, r2, r3
   26b00:	2210      	movs	r2, #16
   26b02:	2100      	movs	r1, #0
   26b04:	0018      	movs	r0, r3
   26b06:	4b0b      	ldr	r3, [pc, #44]	; (26b34 <close+0x13c>)
   26b08:	4798      	blx	r3
	}
	return s8Ret;
   26b0a:	230f      	movs	r3, #15
   26b0c:	18fb      	adds	r3, r7, r3
   26b0e:	781b      	ldrb	r3, [r3, #0]
   26b10:	b25b      	sxtb	r3, r3
}
   26b12:	0018      	movs	r0, r3
   26b14:	46bd      	mov	sp, r7
   26b16:	b004      	add	sp, #16
   26b18:	bdb0      	pop	{r4, r5, r7, pc}
   26b1a:	46c0      	nop			; (mov r8, r8)
   26b1c:	0003a4f8 	.word	0x0003a4f8
   26b20:	0001ed29 	.word	0x0001ed29
   26b24:	0003a538 	.word	0x0003a538
   26b28:	0003a518 	.word	0x0003a518
   26b2c:	20005b54 	.word	0x20005b54
   26b30:	00021cbd 	.word	0x00021cbd
   26b34:	00021a5d 	.word	0x00021a5d

00026b38 <nmi_inet_addr>:

Date
		4 June 2012
*********************************************************************/
uint32 nmi_inet_addr(char *pcIpAddr)
{
   26b38:	b580      	push	{r7, lr}
   26b3a:	b086      	sub	sp, #24
   26b3c:	af00      	add	r7, sp, #0
   26b3e:	6078      	str	r0, [r7, #4]
	uint8	tmp;
	uint32	u32IP = 0;
   26b40:	2300      	movs	r3, #0
   26b42:	613b      	str	r3, [r7, #16]
	uint8	au8IP[4];
	uint8 	c;
	uint8	i, j;

	tmp = 0;
   26b44:	2317      	movs	r3, #23
   26b46:	18fb      	adds	r3, r7, r3
   26b48:	2200      	movs	r2, #0
   26b4a:	701a      	strb	r2, [r3, #0]

	for(i = 0; i < 4; ++i)
   26b4c:	2316      	movs	r3, #22
   26b4e:	18fb      	adds	r3, r7, r3
   26b50:	2200      	movs	r2, #0
   26b52:	701a      	strb	r2, [r3, #0]
   26b54:	e060      	b.n	26c18 <nmi_inet_addr+0xe0>
	{
		j = 0;
   26b56:	2315      	movs	r3, #21
   26b58:	18fb      	adds	r3, r7, r3
   26b5a:	2200      	movs	r2, #0
   26b5c:	701a      	strb	r2, [r3, #0]
		do
		{
			c = *pcIpAddr;
   26b5e:	2314      	movs	r3, #20
   26b60:	18fb      	adds	r3, r7, r3
   26b62:	687a      	ldr	r2, [r7, #4]
   26b64:	7812      	ldrb	r2, [r2, #0]
   26b66:	701a      	strb	r2, [r3, #0]
			++j;
   26b68:	2315      	movs	r3, #21
   26b6a:	18fb      	adds	r3, r7, r3
   26b6c:	2215      	movs	r2, #21
   26b6e:	18ba      	adds	r2, r7, r2
   26b70:	7812      	ldrb	r2, [r2, #0]
   26b72:	3201      	adds	r2, #1
   26b74:	701a      	strb	r2, [r3, #0]
			if(j > 4)
   26b76:	2315      	movs	r3, #21
   26b78:	18fb      	adds	r3, r7, r3
   26b7a:	781b      	ldrb	r3, [r3, #0]
   26b7c:	2b04      	cmp	r3, #4
   26b7e:	d901      	bls.n	26b84 <nmi_inet_addr+0x4c>
			{
				return 0;
   26b80:	2300      	movs	r3, #0
   26b82:	e057      	b.n	26c34 <nmi_inet_addr+0xfc>
			}
			if(c == '.' || c == 0)
   26b84:	2314      	movs	r3, #20
   26b86:	18fb      	adds	r3, r7, r3
   26b88:	781b      	ldrb	r3, [r3, #0]
   26b8a:	2b2e      	cmp	r3, #46	; 0x2e
   26b8c:	d004      	beq.n	26b98 <nmi_inet_addr+0x60>
   26b8e:	2314      	movs	r3, #20
   26b90:	18fb      	adds	r3, r7, r3
   26b92:	781b      	ldrb	r3, [r3, #0]
   26b94:	2b00      	cmp	r3, #0
   26b96:	d10d      	bne.n	26bb4 <nmi_inet_addr+0x7c>
			{
				au8IP[i] = tmp;
   26b98:	2316      	movs	r3, #22
   26b9a:	18fb      	adds	r3, r7, r3
   26b9c:	781b      	ldrb	r3, [r3, #0]
   26b9e:	220c      	movs	r2, #12
   26ba0:	18ba      	adds	r2, r7, r2
   26ba2:	2117      	movs	r1, #23
   26ba4:	1879      	adds	r1, r7, r1
   26ba6:	7809      	ldrb	r1, [r1, #0]
   26ba8:	54d1      	strb	r1, [r2, r3]
				tmp = 0;
   26baa:	2317      	movs	r3, #23
   26bac:	18fb      	adds	r3, r7, r3
   26bae:	2200      	movs	r2, #0
   26bb0:	701a      	strb	r2, [r3, #0]
   26bb2:	e01d      	b.n	26bf0 <nmi_inet_addr+0xb8>
			}
			else if(c >= '0' && c <= '9')
   26bb4:	2314      	movs	r3, #20
   26bb6:	18fb      	adds	r3, r7, r3
   26bb8:	781b      	ldrb	r3, [r3, #0]
   26bba:	2b2f      	cmp	r3, #47	; 0x2f
   26bbc:	d916      	bls.n	26bec <nmi_inet_addr+0xb4>
   26bbe:	2314      	movs	r3, #20
   26bc0:	18fb      	adds	r3, r7, r3
   26bc2:	781b      	ldrb	r3, [r3, #0]
   26bc4:	2b39      	cmp	r3, #57	; 0x39
   26bc6:	d811      	bhi.n	26bec <nmi_inet_addr+0xb4>
			{
				tmp = (tmp * 10) + (c - '0');
   26bc8:	2317      	movs	r3, #23
   26bca:	18fb      	adds	r3, r7, r3
   26bcc:	781b      	ldrb	r3, [r3, #0]
   26bce:	1c1a      	adds	r2, r3, #0
   26bd0:	0092      	lsls	r2, r2, #2
   26bd2:	18d3      	adds	r3, r2, r3
   26bd4:	18db      	adds	r3, r3, r3
   26bd6:	b2da      	uxtb	r2, r3
   26bd8:	2314      	movs	r3, #20
   26bda:	18fb      	adds	r3, r7, r3
   26bdc:	781b      	ldrb	r3, [r3, #0]
   26bde:	18d3      	adds	r3, r2, r3
   26be0:	b2da      	uxtb	r2, r3
   26be2:	2317      	movs	r3, #23
   26be4:	18fb      	adds	r3, r7, r3
   26be6:	3a30      	subs	r2, #48	; 0x30
   26be8:	701a      	strb	r2, [r3, #0]
   26bea:	e001      	b.n	26bf0 <nmi_inet_addr+0xb8>
			}
			else
			{
				return 0;
   26bec:	2300      	movs	r3, #0
   26bee:	e021      	b.n	26c34 <nmi_inet_addr+0xfc>
			}
			++pcIpAddr;
   26bf0:	687b      	ldr	r3, [r7, #4]
   26bf2:	3301      	adds	r3, #1
   26bf4:	607b      	str	r3, [r7, #4]
		} while(c != '.' && c != 0);
   26bf6:	2314      	movs	r3, #20
   26bf8:	18fb      	adds	r3, r7, r3
   26bfa:	781b      	ldrb	r3, [r3, #0]
   26bfc:	2b2e      	cmp	r3, #46	; 0x2e
   26bfe:	d004      	beq.n	26c0a <nmi_inet_addr+0xd2>
   26c00:	2314      	movs	r3, #20
   26c02:	18fb      	adds	r3, r7, r3
   26c04:	781b      	ldrb	r3, [r3, #0]
   26c06:	2b00      	cmp	r3, #0
   26c08:	d1a9      	bne.n	26b5e <nmi_inet_addr+0x26>
	for(i = 0; i < 4; ++i)
   26c0a:	2316      	movs	r3, #22
   26c0c:	18fb      	adds	r3, r7, r3
   26c0e:	2216      	movs	r2, #22
   26c10:	18ba      	adds	r2, r7, r2
   26c12:	7812      	ldrb	r2, [r2, #0]
   26c14:	3201      	adds	r2, #1
   26c16:	701a      	strb	r2, [r3, #0]
   26c18:	2316      	movs	r3, #22
   26c1a:	18fb      	adds	r3, r7, r3
   26c1c:	781b      	ldrb	r3, [r3, #0]
   26c1e:	2b03      	cmp	r3, #3
   26c20:	d999      	bls.n	26b56 <nmi_inet_addr+0x1e>
	}
	m2m_memcpy((uint8*)&u32IP, au8IP, 4);
   26c22:	230c      	movs	r3, #12
   26c24:	18f9      	adds	r1, r7, r3
   26c26:	2310      	movs	r3, #16
   26c28:	18fb      	adds	r3, r7, r3
   26c2a:	2204      	movs	r2, #4
   26c2c:	0018      	movs	r0, r3
   26c2e:	4b03      	ldr	r3, [pc, #12]	; (26c3c <nmi_inet_addr+0x104>)
   26c30:	4798      	blx	r3
	return u32IP;
   26c32:	693b      	ldr	r3, [r7, #16]
}
   26c34:	0018      	movs	r0, r3
   26c36:	46bd      	mov	sp, r7
   26c38:	b006      	add	sp, #24
   26c3a:	bd80      	pop	{r7, pc}
   26c3c:	00021a21 	.word	0x00021a21

00026c40 <gethostbyname>:

Date
		4 June 2012
*********************************************************************/
sint8 gethostbyname(uint8 * pcHostName)
{
   26c40:	b5b0      	push	{r4, r5, r7, lr}
   26c42:	b088      	sub	sp, #32
   26c44:	af04      	add	r7, sp, #16
   26c46:	6078      	str	r0, [r7, #4]
	sint8	s8Err = SOCK_ERR_INVALID_ARG;
   26c48:	230f      	movs	r3, #15
   26c4a:	18fb      	adds	r3, r7, r3
   26c4c:	22fa      	movs	r2, #250	; 0xfa
   26c4e:	701a      	strb	r2, [r3, #0]
	uint8	u8HostNameSize = (uint8)m2m_strlen(pcHostName);
   26c50:	687b      	ldr	r3, [r7, #4]
   26c52:	0018      	movs	r0, r3
   26c54:	4b14      	ldr	r3, [pc, #80]	; (26ca8 <gethostbyname+0x68>)
   26c56:	4798      	blx	r3
   26c58:	0003      	movs	r3, r0
   26c5a:	001a      	movs	r2, r3
   26c5c:	230e      	movs	r3, #14
   26c5e:	18fb      	adds	r3, r7, r3
   26c60:	701a      	strb	r2, [r3, #0]
	if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
   26c62:	230e      	movs	r3, #14
   26c64:	18fb      	adds	r3, r7, r3
   26c66:	781b      	ldrb	r3, [r3, #0]
   26c68:	2b40      	cmp	r3, #64	; 0x40
   26c6a:	d815      	bhi.n	26c98 <gethostbyname+0x58>
	{
		s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE, (uint8*)pcHostName, u8HostNameSize + 1, NULL,0, 0);
   26c6c:	230e      	movs	r3, #14
   26c6e:	18fb      	adds	r3, r7, r3
   26c70:	781b      	ldrb	r3, [r3, #0]
   26c72:	b29b      	uxth	r3, r3
   26c74:	3301      	adds	r3, #1
   26c76:	b299      	uxth	r1, r3
   26c78:	230f      	movs	r3, #15
   26c7a:	18fc      	adds	r4, r7, r3
   26c7c:	687a      	ldr	r2, [r7, #4]
   26c7e:	2300      	movs	r3, #0
   26c80:	9302      	str	r3, [sp, #8]
   26c82:	2300      	movs	r3, #0
   26c84:	9301      	str	r3, [sp, #4]
   26c86:	2300      	movs	r3, #0
   26c88:	9300      	str	r3, [sp, #0]
   26c8a:	000b      	movs	r3, r1
   26c8c:	214a      	movs	r1, #74	; 0x4a
   26c8e:	2002      	movs	r0, #2
   26c90:	4d06      	ldr	r5, [pc, #24]	; (26cac <gethostbyname+0x6c>)
   26c92:	47a8      	blx	r5
   26c94:	0003      	movs	r3, r0
   26c96:	7023      	strb	r3, [r4, #0]
	}
	return s8Err;
   26c98:	230f      	movs	r3, #15
   26c9a:	18fb      	adds	r3, r7, r3
   26c9c:	781b      	ldrb	r3, [r3, #0]
   26c9e:	b25b      	sxtb	r3, r3
}
   26ca0:	0018      	movs	r0, r3
   26ca2:	46bd      	mov	sp, r7
   26ca4:	b004      	add	sp, #16
   26ca6:	bdb0      	pop	{r4, r5, r7, pc}
   26ca8:	00021a9b 	.word	0x00021a9b
   26cac:	00021cbd 	.word	0x00021cbd

00026cb0 <spi_flash_enter_low_power_mode>:
		spi_flash_write_enable();
		spi_flash_gang_unblock();
	}
}
#endif
static void spi_flash_enter_low_power_mode(void) {
   26cb0:	b580      	push	{r7, lr}
   26cb2:	b082      	sub	sp, #8
   26cb4:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   26cb6:	003b      	movs	r3, r7
   26cb8:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xb9;
   26cba:	687b      	ldr	r3, [r7, #4]
   26cbc:	22b9      	movs	r2, #185	; 0xb9
   26cbe:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   26cc0:	4b13      	ldr	r3, [pc, #76]	; (26d10 <spi_flash_enter_low_power_mode+0x60>)
   26cc2:	2100      	movs	r1, #0
   26cc4:	0018      	movs	r0, r3
   26cc6:	4b13      	ldr	r3, [pc, #76]	; (26d14 <spi_flash_enter_low_power_mode+0x64>)
   26cc8:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   26cca:	687b      	ldr	r3, [r7, #4]
   26ccc:	781b      	ldrb	r3, [r3, #0]
   26cce:	001a      	movs	r2, r3
   26cd0:	4b11      	ldr	r3, [pc, #68]	; (26d18 <spi_flash_enter_low_power_mode+0x68>)
   26cd2:	0011      	movs	r1, r2
   26cd4:	0018      	movs	r0, r3
   26cd6:	4b0f      	ldr	r3, [pc, #60]	; (26d14 <spi_flash_enter_low_power_mode+0x64>)
   26cd8:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   26cda:	4b10      	ldr	r3, [pc, #64]	; (26d1c <spi_flash_enter_low_power_mode+0x6c>)
   26cdc:	2101      	movs	r1, #1
   26cde:	0018      	movs	r0, r3
   26ce0:	4b0c      	ldr	r3, [pc, #48]	; (26d14 <spi_flash_enter_low_power_mode+0x64>)
   26ce2:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   26ce4:	4b0e      	ldr	r3, [pc, #56]	; (26d20 <spi_flash_enter_low_power_mode+0x70>)
   26ce6:	2100      	movs	r1, #0
   26ce8:	0018      	movs	r0, r3
   26cea:	4b0a      	ldr	r3, [pc, #40]	; (26d14 <spi_flash_enter_low_power_mode+0x64>)
   26cec:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT, 1 | (1 << 7));
   26cee:	4b0d      	ldr	r3, [pc, #52]	; (26d24 <spi_flash_enter_low_power_mode+0x74>)
   26cf0:	2181      	movs	r1, #129	; 0x81
   26cf2:	0018      	movs	r0, r3
   26cf4:	4b07      	ldr	r3, [pc, #28]	; (26d14 <spi_flash_enter_low_power_mode+0x64>)
   26cf6:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   26cf8:	46c0      	nop			; (mov r8, r8)
   26cfa:	4b0b      	ldr	r3, [pc, #44]	; (26d28 <spi_flash_enter_low_power_mode+0x78>)
   26cfc:	0018      	movs	r0, r3
   26cfe:	4b0b      	ldr	r3, [pc, #44]	; (26d2c <spi_flash_enter_low_power_mode+0x7c>)
   26d00:	4798      	blx	r3
   26d02:	0003      	movs	r3, r0
   26d04:	2b01      	cmp	r3, #1
   26d06:	d1f8      	bne.n	26cfa <spi_flash_enter_low_power_mode+0x4a>
}
   26d08:	46c0      	nop			; (mov r8, r8)
   26d0a:	46bd      	mov	sp, r7
   26d0c:	b002      	add	sp, #8
   26d0e:	bd80      	pop	{r7, pc}
   26d10:	00010208 	.word	0x00010208
   26d14:	00023b11 	.word	0x00023b11
   26d18:	0001020c 	.word	0x0001020c
   26d1c:	00010214 	.word	0x00010214
   26d20:	0001021c 	.word	0x0001021c
   26d24:	00010204 	.word	0x00010204
   26d28:	00010218 	.word	0x00010218
   26d2c:	00023acd 	.word	0x00023acd

00026d30 <spi_flash_leave_low_power_mode>:


static void spi_flash_leave_low_power_mode(void) {
   26d30:	b580      	push	{r7, lr}
   26d32:	b082      	sub	sp, #8
   26d34:	af00      	add	r7, sp, #0
	volatile unsigned long tmp;
	unsigned char* cmd = (unsigned char*) &tmp;
   26d36:	003b      	movs	r3, r7
   26d38:	607b      	str	r3, [r7, #4]

	cmd[0] = 0xab;
   26d3a:	687b      	ldr	r3, [r7, #4]
   26d3c:	22ab      	movs	r2, #171	; 0xab
   26d3e:	701a      	strb	r2, [r3, #0]

	nm_write_reg(SPI_FLASH_DATA_CNT, 0);
   26d40:	4b13      	ldr	r3, [pc, #76]	; (26d90 <spi_flash_leave_low_power_mode+0x60>)
   26d42:	2100      	movs	r1, #0
   26d44:	0018      	movs	r0, r3
   26d46:	4b13      	ldr	r3, [pc, #76]	; (26d94 <spi_flash_leave_low_power_mode+0x64>)
   26d48:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF1, cmd[0]);
   26d4a:	687b      	ldr	r3, [r7, #4]
   26d4c:	781b      	ldrb	r3, [r3, #0]
   26d4e:	001a      	movs	r2, r3
   26d50:	4b11      	ldr	r3, [pc, #68]	; (26d98 <spi_flash_leave_low_power_mode+0x68>)
   26d52:	0011      	movs	r1, r2
   26d54:	0018      	movs	r0, r3
   26d56:	4b0f      	ldr	r3, [pc, #60]	; (26d94 <spi_flash_leave_low_power_mode+0x64>)
   26d58:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_BUF_DIR, 0x1);
   26d5a:	4b10      	ldr	r3, [pc, #64]	; (26d9c <spi_flash_leave_low_power_mode+0x6c>)
   26d5c:	2101      	movs	r1, #1
   26d5e:	0018      	movs	r0, r3
   26d60:	4b0c      	ldr	r3, [pc, #48]	; (26d94 <spi_flash_leave_low_power_mode+0x64>)
   26d62:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_DMA_ADDR, 0);
   26d64:	4b0e      	ldr	r3, [pc, #56]	; (26da0 <spi_flash_leave_low_power_mode+0x70>)
   26d66:	2100      	movs	r1, #0
   26d68:	0018      	movs	r0, r3
   26d6a:	4b0a      	ldr	r3, [pc, #40]	; (26d94 <spi_flash_leave_low_power_mode+0x64>)
   26d6c:	4798      	blx	r3
	nm_write_reg(SPI_FLASH_CMD_CNT,  1 | (1 << 7));
   26d6e:	4b0d      	ldr	r3, [pc, #52]	; (26da4 <spi_flash_leave_low_power_mode+0x74>)
   26d70:	2181      	movs	r1, #129	; 0x81
   26d72:	0018      	movs	r0, r3
   26d74:	4b07      	ldr	r3, [pc, #28]	; (26d94 <spi_flash_leave_low_power_mode+0x64>)
   26d76:	4798      	blx	r3
	while(nm_read_reg(SPI_FLASH_TR_DONE) != 1);
   26d78:	46c0      	nop			; (mov r8, r8)
   26d7a:	4b0b      	ldr	r3, [pc, #44]	; (26da8 <spi_flash_leave_low_power_mode+0x78>)
   26d7c:	0018      	movs	r0, r3
   26d7e:	4b0b      	ldr	r3, [pc, #44]	; (26dac <spi_flash_leave_low_power_mode+0x7c>)
   26d80:	4798      	blx	r3
   26d82:	0003      	movs	r3, r0
   26d84:	2b01      	cmp	r3, #1
   26d86:	d1f8      	bne.n	26d7a <spi_flash_leave_low_power_mode+0x4a>
}
   26d88:	46c0      	nop			; (mov r8, r8)
   26d8a:	46bd      	mov	sp, r7
   26d8c:	b002      	add	sp, #8
   26d8e:	bd80      	pop	{r7, pc}
   26d90:	00010208 	.word	0x00010208
   26d94:	00023b11 	.word	0x00023b11
   26d98:	0001020c 	.word	0x0001020c
   26d9c:	00010214 	.word	0x00010214
   26da0:	0001021c 	.word	0x0001021c
   26da4:	00010204 	.word	0x00010204
   26da8:	00010218 	.word	0x00010218
   26dac:	00023acd 	.word	0x00023acd

00026db0 <spi_flash_enable>:
 *	@brief	Enable spi flash operations
 *	@author	M. Abdelmawla
 *	@version	1.0
 */
sint8 spi_flash_enable(uint8 enable)
{
   26db0:	b590      	push	{r4, r7, lr}
   26db2:	b085      	sub	sp, #20
   26db4:	af00      	add	r7, sp, #0
   26db6:	0002      	movs	r2, r0
   26db8:	1dfb      	adds	r3, r7, #7
   26dba:	701a      	strb	r2, [r3, #0]
	sint8 s8Ret = M2M_SUCCESS;
   26dbc:	230f      	movs	r3, #15
   26dbe:	18fb      	adds	r3, r7, r3
   26dc0:	2200      	movs	r2, #0
   26dc2:	701a      	strb	r2, [r3, #0]
	if(REV(nmi_get_chipid()) >= REV_3A0) {		
   26dc4:	4b24      	ldr	r3, [pc, #144]	; (26e58 <spi_flash_enable+0xa8>)
   26dc6:	4798      	blx	r3
   26dc8:	0003      	movs	r3, r0
   26dca:	051b      	lsls	r3, r3, #20
   26dcc:	0d1b      	lsrs	r3, r3, #20
   26dce:	4a23      	ldr	r2, [pc, #140]	; (26e5c <spi_flash_enable+0xac>)
   26dd0:	4293      	cmp	r3, r2
   26dd2:	d938      	bls.n	26e46 <spi_flash_enable+0x96>
		uint32 u32Val;
		
		/* Enable pinmux to SPI flash. */
		s8Ret = nm_read_reg_with_ret(0x1410, &u32Val);
   26dd4:	230f      	movs	r3, #15
   26dd6:	18fc      	adds	r4, r7, r3
   26dd8:	2308      	movs	r3, #8
   26dda:	18fb      	adds	r3, r7, r3
   26ddc:	4a20      	ldr	r2, [pc, #128]	; (26e60 <spi_flash_enable+0xb0>)
   26dde:	0019      	movs	r1, r3
   26de0:	0010      	movs	r0, r2
   26de2:	4b20      	ldr	r3, [pc, #128]	; (26e64 <spi_flash_enable+0xb4>)
   26de4:	4798      	blx	r3
   26de6:	0003      	movs	r3, r0
   26de8:	7023      	strb	r3, [r4, #0]
		if(s8Ret != M2M_SUCCESS) {
   26dea:	230f      	movs	r3, #15
   26dec:	18fb      	adds	r3, r7, r3
   26dee:	781b      	ldrb	r3, [r3, #0]
   26df0:	b25b      	sxtb	r3, r3
   26df2:	2b00      	cmp	r3, #0
   26df4:	d126      	bne.n	26e44 <spi_flash_enable+0x94>
			goto ERR1;
		}
		/* GPIO15/16/17/18 */
		u32Val &= ~((0x7777ul) << 12);
   26df6:	68bb      	ldr	r3, [r7, #8]
   26df8:	4a1b      	ldr	r2, [pc, #108]	; (26e68 <spi_flash_enable+0xb8>)
   26dfa:	4013      	ands	r3, r2
   26dfc:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x1111ul) << 12);
   26dfe:	68bb      	ldr	r3, [r7, #8]
   26e00:	4a1a      	ldr	r2, [pc, #104]	; (26e6c <spi_flash_enable+0xbc>)
   26e02:	4313      	orrs	r3, r2
   26e04:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   26e06:	68bb      	ldr	r3, [r7, #8]
   26e08:	4a15      	ldr	r2, [pc, #84]	; (26e60 <spi_flash_enable+0xb0>)
   26e0a:	0019      	movs	r1, r3
   26e0c:	0010      	movs	r0, r2
   26e0e:	4b18      	ldr	r3, [pc, #96]	; (26e70 <spi_flash_enable+0xc0>)
   26e10:	4798      	blx	r3
		if(enable) {
   26e12:	1dfb      	adds	r3, r7, #7
   26e14:	781b      	ldrb	r3, [r3, #0]
   26e16:	2b00      	cmp	r3, #0
   26e18:	d002      	beq.n	26e20 <spi_flash_enable+0x70>
			spi_flash_leave_low_power_mode();
   26e1a:	4b16      	ldr	r3, [pc, #88]	; (26e74 <spi_flash_enable+0xc4>)
   26e1c:	4798      	blx	r3
   26e1e:	e001      	b.n	26e24 <spi_flash_enable+0x74>
		} else {
			spi_flash_enter_low_power_mode();
   26e20:	4b15      	ldr	r3, [pc, #84]	; (26e78 <spi_flash_enable+0xc8>)
   26e22:	4798      	blx	r3
		}
		/* Disable pinmux to SPI flash to minimize leakage. */
		u32Val &= ~((0x7777ul) << 12);
   26e24:	68bb      	ldr	r3, [r7, #8]
   26e26:	4a10      	ldr	r2, [pc, #64]	; (26e68 <spi_flash_enable+0xb8>)
   26e28:	4013      	ands	r3, r2
   26e2a:	60bb      	str	r3, [r7, #8]
		u32Val |= ((0x0010ul) << 12);
   26e2c:	68bb      	ldr	r3, [r7, #8]
   26e2e:	2280      	movs	r2, #128	; 0x80
   26e30:	0252      	lsls	r2, r2, #9
   26e32:	4313      	orrs	r3, r2
   26e34:	60bb      	str	r3, [r7, #8]
		nm_write_reg(0x1410, u32Val);
   26e36:	68bb      	ldr	r3, [r7, #8]
   26e38:	4a09      	ldr	r2, [pc, #36]	; (26e60 <spi_flash_enable+0xb0>)
   26e3a:	0019      	movs	r1, r3
   26e3c:	0010      	movs	r0, r2
   26e3e:	4b0c      	ldr	r3, [pc, #48]	; (26e70 <spi_flash_enable+0xc0>)
   26e40:	4798      	blx	r3
   26e42:	e000      	b.n	26e46 <spi_flash_enable+0x96>
			goto ERR1;
   26e44:	46c0      	nop			; (mov r8, r8)
	}
ERR1:
	return s8Ret;
   26e46:	230f      	movs	r3, #15
   26e48:	18fb      	adds	r3, r7, r3
   26e4a:	781b      	ldrb	r3, [r3, #0]
   26e4c:	b25b      	sxtb	r3, r3
}
   26e4e:	0018      	movs	r0, r3
   26e50:	46bd      	mov	sp, r7
   26e52:	b005      	add	sp, #20
   26e54:	bd90      	pop	{r4, r7, pc}
   26e56:	46c0      	nop			; (mov r8, r8)
   26e58:	000233ed 	.word	0x000233ed
   26e5c:	0000039f 	.word	0x0000039f
   26e60:	00001410 	.word	0x00001410
   26e64:	00023aed 	.word	0x00023aed
   26e68:	f8888fff 	.word	0xf8888fff
   26e6c:	01111000 	.word	0x01111000
   26e70:	00023b11 	.word	0x00023b11
   26e74:	00026d31 	.word	0x00026d31
   26e78:	00026cb1 	.word	0x00026cb1

00026e7c <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
   26e7c:	b580      	push	{r7, lr}
   26e7e:	b084      	sub	sp, #16
   26e80:	af00      	add	r7, sp, #0
   26e82:	0002      	movs	r2, r0
   26e84:	1dfb      	adds	r3, r7, #7
   26e86:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
   26e88:	1dfb      	adds	r3, r7, #7
   26e8a:	781b      	ldrb	r3, [r3, #0]
   26e8c:	2b00      	cmp	r3, #0
   26e8e:	d108      	bne.n	26ea2 <mem_test_unit_ready+0x26>
   26e90:	1dfb      	adds	r3, r7, #7
   26e92:	781a      	ldrb	r2, [r3, #0]
   26e94:	4b08      	ldr	r3, [pc, #32]	; (26eb8 <mem_test_unit_ready+0x3c>)
   26e96:	0152      	lsls	r2, r2, #5
   26e98:	58d3      	ldr	r3, [r2, r3]
   26e9a:	4798      	blx	r3
   26e9c:	0003      	movs	r3, r0
   26e9e:	001a      	movs	r2, r3
   26ea0:	e000      	b.n	26ea4 <mem_test_unit_ready+0x28>
   26ea2:	2201      	movs	r2, #1
  status =
   26ea4:	230f      	movs	r3, #15
   26ea6:	18fb      	adds	r3, r7, r3
   26ea8:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   26eaa:	230f      	movs	r3, #15
   26eac:	18fb      	adds	r3, r7, r3
   26eae:	781b      	ldrb	r3, [r3, #0]
}
   26eb0:	0018      	movs	r0, r3
   26eb2:	46bd      	mov	sp, r7
   26eb4:	b004      	add	sp, #16
   26eb6:	bd80      	pop	{r7, pc}
   26eb8:	0003a5c4 	.word	0x0003a5c4

00026ebc <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
   26ebc:	b580      	push	{r7, lr}
   26ebe:	b084      	sub	sp, #16
   26ec0:	af00      	add	r7, sp, #0
   26ec2:	0002      	movs	r2, r0
   26ec4:	6039      	str	r1, [r7, #0]
   26ec6:	1dfb      	adds	r3, r7, #7
   26ec8:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
   26eca:	1dfb      	adds	r3, r7, #7
   26ecc:	781b      	ldrb	r3, [r3, #0]
   26ece:	2b00      	cmp	r3, #0
   26ed0:	d10c      	bne.n	26eec <mem_read_capacity+0x30>
   26ed2:	1dfb      	adds	r3, r7, #7
   26ed4:	781b      	ldrb	r3, [r3, #0]
   26ed6:	4a0b      	ldr	r2, [pc, #44]	; (26f04 <mem_read_capacity+0x48>)
   26ed8:	015b      	lsls	r3, r3, #5
   26eda:	18d3      	adds	r3, r2, r3
   26edc:	3304      	adds	r3, #4
   26ede:	681b      	ldr	r3, [r3, #0]
   26ee0:	683a      	ldr	r2, [r7, #0]
   26ee2:	0010      	movs	r0, r2
   26ee4:	4798      	blx	r3
   26ee6:	0003      	movs	r3, r0
   26ee8:	001a      	movs	r2, r3
   26eea:	e000      	b.n	26eee <mem_read_capacity+0x32>
   26eec:	2201      	movs	r2, #1
  status =
   26eee:	230f      	movs	r3, #15
   26ef0:	18fb      	adds	r3, r7, r3
   26ef2:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
   26ef4:	230f      	movs	r3, #15
   26ef6:	18fb      	adds	r3, r7, r3
   26ef8:	781b      	ldrb	r3, [r3, #0]
}
   26efa:	0018      	movs	r0, r3
   26efc:	46bd      	mov	sp, r7
   26efe:	b004      	add	sp, #16
   26f00:	bd80      	pop	{r7, pc}
   26f02:	46c0      	nop			; (mov r8, r8)
   26f04:	0003a5c4 	.word	0x0003a5c4

00026f08 <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
   26f08:	b580      	push	{r7, lr}
   26f0a:	b084      	sub	sp, #16
   26f0c:	af00      	add	r7, sp, #0
   26f0e:	0002      	movs	r2, r0
   26f10:	1dfb      	adds	r3, r7, #7
   26f12:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
   26f14:	1dfb      	adds	r3, r7, #7
   26f16:	781b      	ldrb	r3, [r3, #0]
   26f18:	425a      	negs	r2, r3
   26f1a:	4153      	adcs	r3, r2
   26f1c:	b2da      	uxtb	r2, r3
  sector_size =
   26f1e:	230f      	movs	r3, #15
   26f20:	18fb      	adds	r3, r7, r3
   26f22:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
   26f24:	230f      	movs	r3, #15
   26f26:	18fb      	adds	r3, r7, r3
   26f28:	781b      	ldrb	r3, [r3, #0]
}
   26f2a:	0018      	movs	r0, r3
   26f2c:	46bd      	mov	sp, r7
   26f2e:	b004      	add	sp, #16
   26f30:	bd80      	pop	{r7, pc}
	...

00026f34 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
   26f34:	b580      	push	{r7, lr}
   26f36:	b084      	sub	sp, #16
   26f38:	af00      	add	r7, sp, #0
   26f3a:	0002      	movs	r2, r0
   26f3c:	1dfb      	adds	r3, r7, #7
   26f3e:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
   26f40:	1dfb      	adds	r3, r7, #7
   26f42:	781b      	ldrb	r3, [r3, #0]
   26f44:	2b00      	cmp	r3, #0
   26f46:	d109      	bne.n	26f5c <mem_wr_protect+0x28>
   26f48:	1dfb      	adds	r3, r7, #7
   26f4a:	781b      	ldrb	r3, [r3, #0]
   26f4c:	4a0a      	ldr	r2, [pc, #40]	; (26f78 <mem_wr_protect+0x44>)
   26f4e:	015b      	lsls	r3, r3, #5
   26f50:	18d3      	adds	r3, r2, r3
   26f52:	330c      	adds	r3, #12
   26f54:	681b      	ldr	r3, [r3, #0]
   26f56:	4798      	blx	r3
   26f58:	1e03      	subs	r3, r0, #0
   26f5a:	d001      	beq.n	26f60 <mem_wr_protect+0x2c>
   26f5c:	2201      	movs	r2, #1
   26f5e:	e000      	b.n	26f62 <mem_wr_protect+0x2e>
   26f60:	2200      	movs	r2, #0
  wr_protect =
   26f62:	230f      	movs	r3, #15
   26f64:	18fb      	adds	r3, r7, r3
   26f66:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
   26f68:	230f      	movs	r3, #15
   26f6a:	18fb      	adds	r3, r7, r3
   26f6c:	781b      	ldrb	r3, [r3, #0]
}
   26f6e:	0018      	movs	r0, r3
   26f70:	46bd      	mov	sp, r7
   26f72:	b004      	add	sp, #16
   26f74:	bd80      	pop	{r7, pc}
   26f76:	46c0      	nop			; (mov r8, r8)
   26f78:	0003a5c4 	.word	0x0003a5c4

00026f7c <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
   26f7c:	b580      	push	{r7, lr}
   26f7e:	b086      	sub	sp, #24
   26f80:	af00      	add	r7, sp, #0
   26f82:	60b9      	str	r1, [r7, #8]
   26f84:	607a      	str	r2, [r7, #4]
   26f86:	230f      	movs	r3, #15
   26f88:	18fb      	adds	r3, r7, r3
   26f8a:	1c02      	adds	r2, r0, #0
   26f8c:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
   26f8e:	230f      	movs	r3, #15
   26f90:	18fb      	adds	r3, r7, r3
   26f92:	781b      	ldrb	r3, [r3, #0]
   26f94:	2b00      	cmp	r3, #0
   26f96:	d10e      	bne.n	26fb6 <memory_2_ram+0x3a>
   26f98:	230f      	movs	r3, #15
   26f9a:	18fb      	adds	r3, r7, r3
   26f9c:	781b      	ldrb	r3, [r3, #0]
   26f9e:	4a0b      	ldr	r2, [pc, #44]	; (26fcc <memory_2_ram+0x50>)
   26fa0:	015b      	lsls	r3, r3, #5
   26fa2:	18d3      	adds	r3, r2, r3
   26fa4:	3314      	adds	r3, #20
   26fa6:	681b      	ldr	r3, [r3, #0]
   26fa8:	6879      	ldr	r1, [r7, #4]
   26faa:	68ba      	ldr	r2, [r7, #8]
   26fac:	0010      	movs	r0, r2
   26fae:	4798      	blx	r3
   26fb0:	0003      	movs	r3, r0
   26fb2:	001a      	movs	r2, r3
   26fb4:	e000      	b.n	26fb8 <memory_2_ram+0x3c>
   26fb6:	2201      	movs	r2, #1
  status =
   26fb8:	2317      	movs	r3, #23
   26fba:	18fb      	adds	r3, r7, r3
   26fbc:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
   26fbe:	2317      	movs	r3, #23
   26fc0:	18fb      	adds	r3, r7, r3
   26fc2:	781b      	ldrb	r3, [r3, #0]
}
   26fc4:	0018      	movs	r0, r3
   26fc6:	46bd      	mov	sp, r7
   26fc8:	b006      	add	sp, #24
   26fca:	bd80      	pop	{r7, pc}
   26fcc:	0003a5c4 	.word	0x0003a5c4

00026fd0 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
   26fd0:	b580      	push	{r7, lr}
   26fd2:	b086      	sub	sp, #24
   26fd4:	af00      	add	r7, sp, #0
   26fd6:	60b9      	str	r1, [r7, #8]
   26fd8:	607a      	str	r2, [r7, #4]
   26fda:	230f      	movs	r3, #15
   26fdc:	18fb      	adds	r3, r7, r3
   26fde:	1c02      	adds	r2, r0, #0
   26fe0:	701a      	strb	r2, [r3, #0]
  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
   26fe2:	230f      	movs	r3, #15
   26fe4:	18fb      	adds	r3, r7, r3
   26fe6:	781b      	ldrb	r3, [r3, #0]
   26fe8:	2b00      	cmp	r3, #0
   26fea:	d10e      	bne.n	2700a <ram_2_memory+0x3a>
   26fec:	230f      	movs	r3, #15
   26fee:	18fb      	adds	r3, r7, r3
   26ff0:	781b      	ldrb	r3, [r3, #0]
   26ff2:	4a0b      	ldr	r2, [pc, #44]	; (27020 <ram_2_memory+0x50>)
   26ff4:	015b      	lsls	r3, r3, #5
   26ff6:	18d3      	adds	r3, r2, r3
   26ff8:	3318      	adds	r3, #24
   26ffa:	681b      	ldr	r3, [r3, #0]
   26ffc:	6879      	ldr	r1, [r7, #4]
   26ffe:	68ba      	ldr	r2, [r7, #8]
   27000:	0010      	movs	r0, r2
   27002:	4798      	blx	r3
   27004:	0003      	movs	r3, r0
   27006:	001a      	movs	r2, r3
   27008:	e000      	b.n	2700c <ram_2_memory+0x3c>
   2700a:	2201      	movs	r2, #1
  status =
   2700c:	2317      	movs	r3, #23
   2700e:	18fb      	adds	r3, r7, r3
   27010:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
   27012:	2317      	movs	r3, #23
   27014:	18fb      	adds	r3, r7, r3
   27016:	781b      	ldrb	r3, [r3, #0]
}
   27018:	0018      	movs	r0, r3
   2701a:	46bd      	mov	sp, r7
   2701c:	b006      	add	sp, #24
   2701e:	bd80      	pop	{r7, pc}
   27020:	0003a5c4 	.word	0x0003a5c4

00027024 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   27024:	b580      	push	{r7, lr}
   27026:	b082      	sub	sp, #8
   27028:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   2702a:	4b10      	ldr	r3, [pc, #64]	; (2706c <cpu_irq_enter_critical+0x48>)
   2702c:	681b      	ldr	r3, [r3, #0]
   2702e:	2b00      	cmp	r3, #0
   27030:	d112      	bne.n	27058 <cpu_irq_enter_critical+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   27032:	f3ef 8310 	mrs	r3, PRIMASK
   27036:	607b      	str	r3, [r7, #4]
  return(result);
   27038:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   2703a:	2b00      	cmp	r3, #0
   2703c:	d109      	bne.n	27052 <cpu_irq_enter_critical+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
   2703e:	b672      	cpsid	i
   27040:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
   27044:	4b0a      	ldr	r3, [pc, #40]	; (27070 <cpu_irq_enter_critical+0x4c>)
   27046:	2200      	movs	r2, #0
   27048:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   2704a:	4b0a      	ldr	r3, [pc, #40]	; (27074 <cpu_irq_enter_critical+0x50>)
   2704c:	2201      	movs	r2, #1
   2704e:	701a      	strb	r2, [r3, #0]
   27050:	e002      	b.n	27058 <cpu_irq_enter_critical+0x34>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   27052:	4b08      	ldr	r3, [pc, #32]	; (27074 <cpu_irq_enter_critical+0x50>)
   27054:	2200      	movs	r2, #0
   27056:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   27058:	4b04      	ldr	r3, [pc, #16]	; (2706c <cpu_irq_enter_critical+0x48>)
   2705a:	681b      	ldr	r3, [r3, #0]
   2705c:	1c5a      	adds	r2, r3, #1
   2705e:	4b03      	ldr	r3, [pc, #12]	; (2706c <cpu_irq_enter_critical+0x48>)
   27060:	601a      	str	r2, [r3, #0]
}
   27062:	46c0      	nop			; (mov r8, r8)
   27064:	46bd      	mov	sp, r7
   27066:	b002      	add	sp, #8
   27068:	bd80      	pop	{r7, pc}
   2706a:	46c0      	nop			; (mov r8, r8)
   2706c:	200042b8 	.word	0x200042b8
   27070:	20000126 	.word	0x20000126
   27074:	200042bc 	.word	0x200042bc

00027078 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   27078:	b580      	push	{r7, lr}
   2707a:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   2707c:	4b0b      	ldr	r3, [pc, #44]	; (270ac <cpu_irq_leave_critical+0x34>)
   2707e:	681b      	ldr	r3, [r3, #0]
   27080:	1e5a      	subs	r2, r3, #1
   27082:	4b0a      	ldr	r3, [pc, #40]	; (270ac <cpu_irq_leave_critical+0x34>)
   27084:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   27086:	4b09      	ldr	r3, [pc, #36]	; (270ac <cpu_irq_leave_critical+0x34>)
   27088:	681b      	ldr	r3, [r3, #0]
   2708a:	2b00      	cmp	r3, #0
   2708c:	d10a      	bne.n	270a4 <cpu_irq_leave_critical+0x2c>
   2708e:	4b08      	ldr	r3, [pc, #32]	; (270b0 <cpu_irq_leave_critical+0x38>)
   27090:	781b      	ldrb	r3, [r3, #0]
   27092:	b2db      	uxtb	r3, r3
   27094:	2b00      	cmp	r3, #0
   27096:	d005      	beq.n	270a4 <cpu_irq_leave_critical+0x2c>
		cpu_irq_enable();
   27098:	4b06      	ldr	r3, [pc, #24]	; (270b4 <cpu_irq_leave_critical+0x3c>)
   2709a:	2201      	movs	r2, #1
   2709c:	701a      	strb	r2, [r3, #0]
   2709e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   270a2:	b662      	cpsie	i
	}
}
   270a4:	46c0      	nop			; (mov r8, r8)
   270a6:	46bd      	mov	sp, r7
   270a8:	bd80      	pop	{r7, pc}
   270aa:	46c0      	nop			; (mov r8, r8)
   270ac:	200042b8 	.word	0x200042b8
   270b0:	200042bc 	.word	0x200042bc
   270b4:	20000126 	.word	0x20000126

000270b8 <system_pinmux_get_group_from_gpio_pin>:
{
   270b8:	b580      	push	{r7, lr}
   270ba:	b084      	sub	sp, #16
   270bc:	af00      	add	r7, sp, #0
   270be:	0002      	movs	r2, r0
   270c0:	1dfb      	adds	r3, r7, #7
   270c2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   270c4:	230f      	movs	r3, #15
   270c6:	18fb      	adds	r3, r7, r3
   270c8:	1dfa      	adds	r2, r7, #7
   270ca:	7812      	ldrb	r2, [r2, #0]
   270cc:	09d2      	lsrs	r2, r2, #7
   270ce:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   270d0:	230e      	movs	r3, #14
   270d2:	18fb      	adds	r3, r7, r3
   270d4:	1dfa      	adds	r2, r7, #7
   270d6:	7812      	ldrb	r2, [r2, #0]
   270d8:	0952      	lsrs	r2, r2, #5
   270da:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   270dc:	4b0d      	ldr	r3, [pc, #52]	; (27114 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   270de:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   270e0:	230f      	movs	r3, #15
   270e2:	18fb      	adds	r3, r7, r3
   270e4:	781b      	ldrb	r3, [r3, #0]
   270e6:	2b00      	cmp	r3, #0
   270e8:	d10f      	bne.n	2710a <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   270ea:	230f      	movs	r3, #15
   270ec:	18fb      	adds	r3, r7, r3
   270ee:	781b      	ldrb	r3, [r3, #0]
   270f0:	009b      	lsls	r3, r3, #2
   270f2:	2210      	movs	r2, #16
   270f4:	4694      	mov	ip, r2
   270f6:	44bc      	add	ip, r7
   270f8:	4463      	add	r3, ip
   270fa:	3b08      	subs	r3, #8
   270fc:	681a      	ldr	r2, [r3, #0]
   270fe:	230e      	movs	r3, #14
   27100:	18fb      	adds	r3, r7, r3
   27102:	781b      	ldrb	r3, [r3, #0]
   27104:	01db      	lsls	r3, r3, #7
   27106:	18d3      	adds	r3, r2, r3
   27108:	e000      	b.n	2710c <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2710a:	2300      	movs	r3, #0
}
   2710c:	0018      	movs	r0, r3
   2710e:	46bd      	mov	sp, r7
   27110:	b004      	add	sp, #16
   27112:	bd80      	pop	{r7, pc}
   27114:	41004400 	.word	0x41004400

00027118 <port_get_group_from_gpio_pin>:
{
   27118:	b580      	push	{r7, lr}
   2711a:	b082      	sub	sp, #8
   2711c:	af00      	add	r7, sp, #0
   2711e:	0002      	movs	r2, r0
   27120:	1dfb      	adds	r3, r7, #7
   27122:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   27124:	1dfb      	adds	r3, r7, #7
   27126:	781b      	ldrb	r3, [r3, #0]
   27128:	0018      	movs	r0, r3
   2712a:	4b03      	ldr	r3, [pc, #12]	; (27138 <port_get_group_from_gpio_pin+0x20>)
   2712c:	4798      	blx	r3
   2712e:	0003      	movs	r3, r0
}
   27130:	0018      	movs	r0, r3
   27132:	46bd      	mov	sp, r7
   27134:	b002      	add	sp, #8
   27136:	bd80      	pop	{r7, pc}
   27138:	000270b9 	.word	0x000270b9

0002713c <port_get_config_defaults>:
{
   2713c:	b580      	push	{r7, lr}
   2713e:	b082      	sub	sp, #8
   27140:	af00      	add	r7, sp, #0
   27142:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
   27144:	687b      	ldr	r3, [r7, #4]
   27146:	2200      	movs	r2, #0
   27148:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
   2714a:	687b      	ldr	r3, [r7, #4]
   2714c:	2201      	movs	r2, #1
   2714e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
   27150:	687b      	ldr	r3, [r7, #4]
   27152:	2200      	movs	r2, #0
   27154:	709a      	strb	r2, [r3, #2]
}
   27156:	46c0      	nop			; (mov r8, r8)
   27158:	46bd      	mov	sp, r7
   2715a:	b002      	add	sp, #8
   2715c:	bd80      	pop	{r7, pc}
	...

00027160 <port_pin_set_output_level>:
{
   27160:	b580      	push	{r7, lr}
   27162:	b084      	sub	sp, #16
   27164:	af00      	add	r7, sp, #0
   27166:	0002      	movs	r2, r0
   27168:	1dfb      	adds	r3, r7, #7
   2716a:	701a      	strb	r2, [r3, #0]
   2716c:	1dbb      	adds	r3, r7, #6
   2716e:	1c0a      	adds	r2, r1, #0
   27170:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   27172:	1dfb      	adds	r3, r7, #7
   27174:	781b      	ldrb	r3, [r3, #0]
   27176:	0018      	movs	r0, r3
   27178:	4b0d      	ldr	r3, [pc, #52]	; (271b0 <port_pin_set_output_level+0x50>)
   2717a:	4798      	blx	r3
   2717c:	0003      	movs	r3, r0
   2717e:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   27180:	1dfb      	adds	r3, r7, #7
   27182:	781b      	ldrb	r3, [r3, #0]
   27184:	221f      	movs	r2, #31
   27186:	4013      	ands	r3, r2
   27188:	2201      	movs	r2, #1
   2718a:	409a      	lsls	r2, r3
   2718c:	0013      	movs	r3, r2
   2718e:	60bb      	str	r3, [r7, #8]
	if (level) {
   27190:	1dbb      	adds	r3, r7, #6
   27192:	781b      	ldrb	r3, [r3, #0]
   27194:	2b00      	cmp	r3, #0
   27196:	d003      	beq.n	271a0 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   27198:	68fb      	ldr	r3, [r7, #12]
   2719a:	68ba      	ldr	r2, [r7, #8]
   2719c:	619a      	str	r2, [r3, #24]
}
   2719e:	e002      	b.n	271a6 <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   271a0:	68fb      	ldr	r3, [r7, #12]
   271a2:	68ba      	ldr	r2, [r7, #8]
   271a4:	615a      	str	r2, [r3, #20]
}
   271a6:	46c0      	nop			; (mov r8, r8)
   271a8:	46bd      	mov	sp, r7
   271aa:	b004      	add	sp, #16
   271ac:	bd80      	pop	{r7, pc}
   271ae:	46c0      	nop			; (mov r8, r8)
   271b0:	00027119 	.word	0x00027119

000271b4 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
   271b4:	b580      	push	{r7, lr}
   271b6:	b082      	sub	sp, #8
   271b8:	af00      	add	r7, sp, #0
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
   271ba:	1d3b      	adds	r3, r7, #4
   271bc:	0018      	movs	r0, r3
   271be:	4b0e      	ldr	r3, [pc, #56]	; (271f8 <system_board_init+0x44>)
   271c0:	4798      	blx	r3

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
   271c2:	1d3b      	adds	r3, r7, #4
   271c4:	2201      	movs	r2, #1
   271c6:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
   271c8:	1d3b      	adds	r3, r7, #4
   271ca:	0019      	movs	r1, r3
   271cc:	2017      	movs	r0, #23
   271ce:	4b0b      	ldr	r3, [pc, #44]	; (271fc <system_board_init+0x48>)
   271d0:	4798      	blx	r3
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
   271d2:	2101      	movs	r1, #1
   271d4:	2017      	movs	r0, #23
   271d6:	4b0a      	ldr	r3, [pc, #40]	; (27200 <system_board_init+0x4c>)
   271d8:	4798      	blx	r3
	
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
   271da:	1d3b      	adds	r3, r7, #4
   271dc:	2200      	movs	r2, #0
   271de:	701a      	strb	r2, [r3, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
   271e0:	1d3b      	adds	r3, r7, #4
   271e2:	2201      	movs	r2, #1
   271e4:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
   271e6:	1d3b      	adds	r3, r7, #4
   271e8:	0019      	movs	r1, r3
   271ea:	2037      	movs	r0, #55	; 0x37
   271ec:	4b03      	ldr	r3, [pc, #12]	; (271fc <system_board_init+0x48>)
   271ee:	4798      	blx	r3
}
   271f0:	46c0      	nop			; (mov r8, r8)
   271f2:	46bd      	mov	sp, r7
   271f4:	b002      	add	sp, #8
   271f6:	bd80      	pop	{r7, pc}
   271f8:	0002713d 	.word	0x0002713d
   271fc:	00027829 	.word	0x00027829
   27200:	00027161 	.word	0x00027161

00027204 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
   27204:	b580      	push	{r7, lr}
   27206:	b084      	sub	sp, #16
   27208:	af00      	add	r7, sp, #0
   2720a:	0002      	movs	r2, r0
   2720c:	1dfb      	adds	r3, r7, #7
   2720e:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   27210:	230f      	movs	r3, #15
   27212:	18fb      	adds	r3, r7, r3
   27214:	1dfa      	adds	r2, r7, #7
   27216:	7812      	ldrb	r2, [r2, #0]
   27218:	0952      	lsrs	r2, r2, #5
   2721a:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
   2721c:	230f      	movs	r3, #15
   2721e:	18fb      	adds	r3, r7, r3
   27220:	781b      	ldrb	r3, [r3, #0]
   27222:	2b00      	cmp	r3, #0
   27224:	d10c      	bne.n	27240 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   27226:	4b09      	ldr	r3, [pc, #36]	; (2724c <_extint_get_eic_from_channel+0x48>)
   27228:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
   2722a:	230f      	movs	r3, #15
   2722c:	18fb      	adds	r3, r7, r3
   2722e:	781b      	ldrb	r3, [r3, #0]
   27230:	009b      	lsls	r3, r3, #2
   27232:	2210      	movs	r2, #16
   27234:	4694      	mov	ip, r2
   27236:	44bc      	add	ip, r7
   27238:	4463      	add	r3, ip
   2723a:	3b08      	subs	r3, #8
   2723c:	681b      	ldr	r3, [r3, #0]
   2723e:	e000      	b.n	27242 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
   27240:	2300      	movs	r3, #0
	}
}
   27242:	0018      	movs	r0, r3
   27244:	46bd      	mov	sp, r7
   27246:	b004      	add	sp, #16
   27248:	bd80      	pop	{r7, pc}
   2724a:	46c0      	nop			; (mov r8, r8)
   2724c:	40001800 	.word	0x40001800

00027250 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
   27250:	b580      	push	{r7, lr}
   27252:	b084      	sub	sp, #16
   27254:	af00      	add	r7, sp, #0
   27256:	0002      	movs	r2, r0
   27258:	1dfb      	adds	r3, r7, #7
   2725a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   2725c:	1dfb      	adds	r3, r7, #7
   2725e:	781b      	ldrb	r3, [r3, #0]
   27260:	0018      	movs	r0, r3
   27262:	4b0b      	ldr	r3, [pc, #44]	; (27290 <extint_chan_is_detected+0x40>)
   27264:	4798      	blx	r3
   27266:	0003      	movs	r3, r0
   27268:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   2726a:	1dfb      	adds	r3, r7, #7
   2726c:	781b      	ldrb	r3, [r3, #0]
   2726e:	221f      	movs	r2, #31
   27270:	4013      	ands	r3, r2
   27272:	2201      	movs	r2, #1
   27274:	409a      	lsls	r2, r3
   27276:	0013      	movs	r3, r2
   27278:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
   2727a:	68fb      	ldr	r3, [r7, #12]
   2727c:	691b      	ldr	r3, [r3, #16]
   2727e:	68ba      	ldr	r2, [r7, #8]
   27280:	4013      	ands	r3, r2
   27282:	1e5a      	subs	r2, r3, #1
   27284:	4193      	sbcs	r3, r2
   27286:	b2db      	uxtb	r3, r3
}
   27288:	0018      	movs	r0, r3
   2728a:	46bd      	mov	sp, r7
   2728c:	b004      	add	sp, #16
   2728e:	bd80      	pop	{r7, pc}
   27290:	00027205 	.word	0x00027205

00027294 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
   27294:	b580      	push	{r7, lr}
   27296:	b084      	sub	sp, #16
   27298:	af00      	add	r7, sp, #0
   2729a:	0002      	movs	r2, r0
   2729c:	1dfb      	adds	r3, r7, #7
   2729e:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
   272a0:	1dfb      	adds	r3, r7, #7
   272a2:	781b      	ldrb	r3, [r3, #0]
   272a4:	0018      	movs	r0, r3
   272a6:	4b09      	ldr	r3, [pc, #36]	; (272cc <extint_chan_clear_detected+0x38>)
   272a8:	4798      	blx	r3
   272aa:	0003      	movs	r3, r0
   272ac:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
   272ae:	1dfb      	adds	r3, r7, #7
   272b0:	781b      	ldrb	r3, [r3, #0]
   272b2:	221f      	movs	r2, #31
   272b4:	4013      	ands	r3, r2
   272b6:	2201      	movs	r2, #1
   272b8:	409a      	lsls	r2, r3
   272ba:	0013      	movs	r3, r2
   272bc:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
   272be:	68fb      	ldr	r3, [r7, #12]
   272c0:	68ba      	ldr	r2, [r7, #8]
   272c2:	611a      	str	r2, [r3, #16]
}
   272c4:	46c0      	nop			; (mov r8, r8)
   272c6:	46bd      	mov	sp, r7
   272c8:	b004      	add	sp, #16
   272ca:	bd80      	pop	{r7, pc}
   272cc:	00027205 	.word	0x00027205

000272d0 <extint_register_callback>:
 */
enum status_code extint_register_callback(
	const extint_callback_t callback,
	const uint8_t channel,
	const enum extint_callback_type type)
{
   272d0:	b580      	push	{r7, lr}
   272d2:	b082      	sub	sp, #8
   272d4:	af00      	add	r7, sp, #0
   272d6:	6078      	str	r0, [r7, #4]
   272d8:	0008      	movs	r0, r1
   272da:	0011      	movs	r1, r2
   272dc:	1cfb      	adds	r3, r7, #3
   272de:	1c02      	adds	r2, r0, #0
   272e0:	701a      	strb	r2, [r3, #0]
   272e2:	1cbb      	adds	r3, r7, #2
   272e4:	1c0a      	adds	r2, r1, #0
   272e6:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
   272e8:	1cbb      	adds	r3, r7, #2
   272ea:	781b      	ldrb	r3, [r3, #0]
   272ec:	2b00      	cmp	r3, #0
   272ee:	d001      	beq.n	272f4 <extint_register_callback+0x24>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   272f0:	2317      	movs	r3, #23
   272f2:	e019      	b.n	27328 <extint_register_callback+0x58>
	}

	if (_extint_dev.callbacks[channel] == NULL) {
   272f4:	1cfb      	adds	r3, r7, #3
   272f6:	781a      	ldrb	r2, [r3, #0]
   272f8:	4b0d      	ldr	r3, [pc, #52]	; (27330 <extint_register_callback+0x60>)
   272fa:	0092      	lsls	r2, r2, #2
   272fc:	58d3      	ldr	r3, [r2, r3]
   272fe:	2b00      	cmp	r3, #0
   27300:	d107      	bne.n	27312 <extint_register_callback+0x42>
		_extint_dev.callbacks[channel] = callback;
   27302:	1cfb      	adds	r3, r7, #3
   27304:	781a      	ldrb	r2, [r3, #0]
   27306:	4b0a      	ldr	r3, [pc, #40]	; (27330 <extint_register_callback+0x60>)
   27308:	0092      	lsls	r2, r2, #2
   2730a:	6879      	ldr	r1, [r7, #4]
   2730c:	50d1      	str	r1, [r2, r3]
		return STATUS_OK;
   2730e:	2300      	movs	r3, #0
   27310:	e00a      	b.n	27328 <extint_register_callback+0x58>
	} else if (_extint_dev.callbacks[channel] == callback) {
   27312:	1cfb      	adds	r3, r7, #3
   27314:	781a      	ldrb	r2, [r3, #0]
   27316:	4b06      	ldr	r3, [pc, #24]	; (27330 <extint_register_callback+0x60>)
   27318:	0092      	lsls	r2, r2, #2
   2731a:	58d2      	ldr	r2, [r2, r3]
   2731c:	687b      	ldr	r3, [r7, #4]
   2731e:	429a      	cmp	r2, r3
   27320:	d101      	bne.n	27326 <extint_register_callback+0x56>
		return STATUS_OK;
   27322:	2300      	movs	r3, #0
   27324:	e000      	b.n	27328 <extint_register_callback+0x58>
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
   27326:	231d      	movs	r3, #29
}
   27328:	0018      	movs	r0, r3
   2732a:	46bd      	mov	sp, r7
   2732c:	b002      	add	sp, #8
   2732e:	bd80      	pop	{r7, pc}
   27330:	20005c14 	.word	0x20005c14

00027334 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   27334:	b580      	push	{r7, lr}
   27336:	b084      	sub	sp, #16
   27338:	af00      	add	r7, sp, #0
   2733a:	0002      	movs	r2, r0
   2733c:	1dfb      	adds	r3, r7, #7
   2733e:	701a      	strb	r2, [r3, #0]
   27340:	1dbb      	adds	r3, r7, #6
   27342:	1c0a      	adds	r2, r1, #0
   27344:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   27346:	1dbb      	adds	r3, r7, #6
   27348:	781b      	ldrb	r3, [r3, #0]
   2734a:	2b00      	cmp	r3, #0
   2734c:	d10e      	bne.n	2736c <extint_chan_enable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   2734e:	1dfb      	adds	r3, r7, #7
   27350:	781b      	ldrb	r3, [r3, #0]
   27352:	0018      	movs	r0, r3
   27354:	4b08      	ldr	r3, [pc, #32]	; (27378 <extint_chan_enable_callback+0x44>)
   27356:	4798      	blx	r3
   27358:	0003      	movs	r3, r0
   2735a:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
   2735c:	1dfb      	adds	r3, r7, #7
   2735e:	781b      	ldrb	r3, [r3, #0]
   27360:	2201      	movs	r2, #1
   27362:	409a      	lsls	r2, r3
   27364:	68fb      	ldr	r3, [r7, #12]
   27366:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   27368:	2300      	movs	r3, #0
   2736a:	e000      	b.n	2736e <extint_chan_enable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   2736c:	2317      	movs	r3, #23
}
   2736e:	0018      	movs	r0, r3
   27370:	46bd      	mov	sp, r7
   27372:	b004      	add	sp, #16
   27374:	bd80      	pop	{r7, pc}
   27376:	46c0      	nop			; (mov r8, r8)
   27378:	00027205 	.word	0x00027205

0002737c <extint_chan_disable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_disable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
   2737c:	b580      	push	{r7, lr}
   2737e:	b084      	sub	sp, #16
   27380:	af00      	add	r7, sp, #0
   27382:	0002      	movs	r2, r0
   27384:	1dfb      	adds	r3, r7, #7
   27386:	701a      	strb	r2, [r3, #0]
   27388:	1dbb      	adds	r3, r7, #6
   2738a:	1c0a      	adds	r2, r1, #0
   2738c:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
   2738e:	1dbb      	adds	r3, r7, #6
   27390:	781b      	ldrb	r3, [r3, #0]
   27392:	2b00      	cmp	r3, #0
   27394:	d10e      	bne.n	273b4 <extint_chan_disable_callback+0x38>
		Eic *const eic = _extint_get_eic_from_channel(channel);
   27396:	1dfb      	adds	r3, r7, #7
   27398:	781b      	ldrb	r3, [r3, #0]
   2739a:	0018      	movs	r0, r3
   2739c:	4b08      	ldr	r3, [pc, #32]	; (273c0 <extint_chan_disable_callback+0x44>)
   2739e:	4798      	blx	r3
   273a0:	0003      	movs	r3, r0
   273a2:	60fb      	str	r3, [r7, #12]

		eic->INTENCLR.reg = (1UL << channel);
   273a4:	1dfb      	adds	r3, r7, #7
   273a6:	781b      	ldrb	r3, [r3, #0]
   273a8:	2201      	movs	r2, #1
   273aa:	409a      	lsls	r2, r3
   273ac:	68fb      	ldr	r3, [r7, #12]
   273ae:	609a      	str	r2, [r3, #8]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
   273b0:	2300      	movs	r3, #0
   273b2:	e000      	b.n	273b6 <extint_chan_disable_callback+0x3a>
		return STATUS_ERR_INVALID_ARG;
   273b4:	2317      	movs	r3, #23
}
   273b6:	0018      	movs	r0, r3
   273b8:	46bd      	mov	sp, r7
   273ba:	b004      	add	sp, #16
   273bc:	bd80      	pop	{r7, pc}
   273be:	46c0      	nop			; (mov r8, r8)
   273c0:	00027205 	.word	0x00027205

000273c4 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
   273c4:	b580      	push	{r7, lr}
   273c6:	af00      	add	r7, sp, #0
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   273c8:	4b15      	ldr	r3, [pc, #84]	; (27420 <EIC_Handler+0x5c>)
   273ca:	2200      	movs	r2, #0
   273cc:	701a      	strb	r2, [r3, #0]
   273ce:	e020      	b.n	27412 <EIC_Handler+0x4e>
		if (extint_chan_is_detected(_current_channel)) {
   273d0:	4b13      	ldr	r3, [pc, #76]	; (27420 <EIC_Handler+0x5c>)
   273d2:	781b      	ldrb	r3, [r3, #0]
   273d4:	0018      	movs	r0, r3
   273d6:	4b13      	ldr	r3, [pc, #76]	; (27424 <EIC_Handler+0x60>)
   273d8:	4798      	blx	r3
   273da:	1e03      	subs	r3, r0, #0
   273dc:	d013      	beq.n	27406 <EIC_Handler+0x42>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
   273de:	4b10      	ldr	r3, [pc, #64]	; (27420 <EIC_Handler+0x5c>)
   273e0:	781b      	ldrb	r3, [r3, #0]
   273e2:	0018      	movs	r0, r3
   273e4:	4b10      	ldr	r3, [pc, #64]	; (27428 <EIC_Handler+0x64>)
   273e6:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
   273e8:	4b0d      	ldr	r3, [pc, #52]	; (27420 <EIC_Handler+0x5c>)
   273ea:	781b      	ldrb	r3, [r3, #0]
   273ec:	001a      	movs	r2, r3
   273ee:	4b0f      	ldr	r3, [pc, #60]	; (2742c <EIC_Handler+0x68>)
   273f0:	0092      	lsls	r2, r2, #2
   273f2:	58d3      	ldr	r3, [r2, r3]
   273f4:	2b00      	cmp	r3, #0
   273f6:	d006      	beq.n	27406 <EIC_Handler+0x42>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
   273f8:	4b09      	ldr	r3, [pc, #36]	; (27420 <EIC_Handler+0x5c>)
   273fa:	781b      	ldrb	r3, [r3, #0]
   273fc:	001a      	movs	r2, r3
   273fe:	4b0b      	ldr	r3, [pc, #44]	; (2742c <EIC_Handler+0x68>)
   27400:	0092      	lsls	r2, r2, #2
   27402:	58d3      	ldr	r3, [r2, r3]
   27404:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
   27406:	4b06      	ldr	r3, [pc, #24]	; (27420 <EIC_Handler+0x5c>)
   27408:	781b      	ldrb	r3, [r3, #0]
   2740a:	3301      	adds	r3, #1
   2740c:	b2da      	uxtb	r2, r3
   2740e:	4b04      	ldr	r3, [pc, #16]	; (27420 <EIC_Handler+0x5c>)
   27410:	701a      	strb	r2, [r3, #0]
   27412:	4b03      	ldr	r3, [pc, #12]	; (27420 <EIC_Handler+0x5c>)
   27414:	781b      	ldrb	r3, [r3, #0]
   27416:	2b0f      	cmp	r3, #15
   27418:	d9da      	bls.n	273d0 <EIC_Handler+0xc>
			}
		}
	}
}
   2741a:	46c0      	nop			; (mov r8, r8)
   2741c:	46bd      	mov	sp, r7
   2741e:	bd80      	pop	{r7, pc}
   27420:	20005c10 	.word	0x20005c10
   27424:	00027251 	.word	0x00027251
   27428:	00027295 	.word	0x00027295
   2742c:	20005c14 	.word	0x20005c14

00027430 <system_gclk_chan_get_config_defaults>:
{
   27430:	b580      	push	{r7, lr}
   27432:	b082      	sub	sp, #8
   27434:	af00      	add	r7, sp, #0
   27436:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   27438:	687b      	ldr	r3, [r7, #4]
   2743a:	2200      	movs	r2, #0
   2743c:	701a      	strb	r2, [r3, #0]
}
   2743e:	46c0      	nop			; (mov r8, r8)
   27440:	46bd      	mov	sp, r7
   27442:	b002      	add	sp, #8
   27444:	bd80      	pop	{r7, pc}
	...

00027448 <system_apb_clock_set_mask>:
{
   27448:	b580      	push	{r7, lr}
   2744a:	b082      	sub	sp, #8
   2744c:	af00      	add	r7, sp, #0
   2744e:	0002      	movs	r2, r0
   27450:	6039      	str	r1, [r7, #0]
   27452:	1dfb      	adds	r3, r7, #7
   27454:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   27456:	1dfb      	adds	r3, r7, #7
   27458:	781b      	ldrb	r3, [r3, #0]
   2745a:	2b01      	cmp	r3, #1
   2745c:	d00a      	beq.n	27474 <system_apb_clock_set_mask+0x2c>
   2745e:	2b02      	cmp	r3, #2
   27460:	d00f      	beq.n	27482 <system_apb_clock_set_mask+0x3a>
   27462:	2b00      	cmp	r3, #0
   27464:	d114      	bne.n	27490 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   27466:	4b0e      	ldr	r3, [pc, #56]	; (274a0 <system_apb_clock_set_mask+0x58>)
   27468:	4a0d      	ldr	r2, [pc, #52]	; (274a0 <system_apb_clock_set_mask+0x58>)
   2746a:	6991      	ldr	r1, [r2, #24]
   2746c:	683a      	ldr	r2, [r7, #0]
   2746e:	430a      	orrs	r2, r1
   27470:	619a      	str	r2, [r3, #24]
			break;
   27472:	e00f      	b.n	27494 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   27474:	4b0a      	ldr	r3, [pc, #40]	; (274a0 <system_apb_clock_set_mask+0x58>)
   27476:	4a0a      	ldr	r2, [pc, #40]	; (274a0 <system_apb_clock_set_mask+0x58>)
   27478:	69d1      	ldr	r1, [r2, #28]
   2747a:	683a      	ldr	r2, [r7, #0]
   2747c:	430a      	orrs	r2, r1
   2747e:	61da      	str	r2, [r3, #28]
			break;
   27480:	e008      	b.n	27494 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   27482:	4b07      	ldr	r3, [pc, #28]	; (274a0 <system_apb_clock_set_mask+0x58>)
   27484:	4a06      	ldr	r2, [pc, #24]	; (274a0 <system_apb_clock_set_mask+0x58>)
   27486:	6a11      	ldr	r1, [r2, #32]
   27488:	683a      	ldr	r2, [r7, #0]
   2748a:	430a      	orrs	r2, r1
   2748c:	621a      	str	r2, [r3, #32]
			break;
   2748e:	e001      	b.n	27494 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   27490:	2317      	movs	r3, #23
   27492:	e000      	b.n	27496 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   27494:	2300      	movs	r3, #0
}
   27496:	0018      	movs	r0, r3
   27498:	46bd      	mov	sp, r7
   2749a:	b002      	add	sp, #8
   2749c:	bd80      	pop	{r7, pc}
   2749e:	46c0      	nop			; (mov r8, r8)
   274a0:	40000400 	.word	0x40000400

000274a4 <system_pinmux_get_config_defaults>:
{
   274a4:	b580      	push	{r7, lr}
   274a6:	b082      	sub	sp, #8
   274a8:	af00      	add	r7, sp, #0
   274aa:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   274ac:	687b      	ldr	r3, [r7, #4]
   274ae:	2280      	movs	r2, #128	; 0x80
   274b0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   274b2:	687b      	ldr	r3, [r7, #4]
   274b4:	2200      	movs	r2, #0
   274b6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   274b8:	687b      	ldr	r3, [r7, #4]
   274ba:	2201      	movs	r2, #1
   274bc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   274be:	687b      	ldr	r3, [r7, #4]
   274c0:	2200      	movs	r2, #0
   274c2:	70da      	strb	r2, [r3, #3]
}
   274c4:	46c0      	nop			; (mov r8, r8)
   274c6:	46bd      	mov	sp, r7
   274c8:	b002      	add	sp, #8
   274ca:	bd80      	pop	{r7, pc}

000274cc <system_interrupt_enable>:
{
   274cc:	b580      	push	{r7, lr}
   274ce:	b082      	sub	sp, #8
   274d0:	af00      	add	r7, sp, #0
   274d2:	0002      	movs	r2, r0
   274d4:	1dfb      	adds	r3, r7, #7
   274d6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   274d8:	4b06      	ldr	r3, [pc, #24]	; (274f4 <system_interrupt_enable+0x28>)
   274da:	1dfa      	adds	r2, r7, #7
   274dc:	7812      	ldrb	r2, [r2, #0]
   274de:	0011      	movs	r1, r2
   274e0:	221f      	movs	r2, #31
   274e2:	400a      	ands	r2, r1
   274e4:	2101      	movs	r1, #1
   274e6:	4091      	lsls	r1, r2
   274e8:	000a      	movs	r2, r1
   274ea:	601a      	str	r2, [r3, #0]
}
   274ec:	46c0      	nop			; (mov r8, r8)
   274ee:	46bd      	mov	sp, r7
   274f0:	b002      	add	sp, #8
   274f2:	bd80      	pop	{r7, pc}
   274f4:	e000e100 	.word	0xe000e100

000274f8 <_extint_get_eic_from_channel>:
{
   274f8:	b580      	push	{r7, lr}
   274fa:	b084      	sub	sp, #16
   274fc:	af00      	add	r7, sp, #0
   274fe:	0002      	movs	r2, r0
   27500:	1dfb      	adds	r3, r7, #7
   27502:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
   27504:	230f      	movs	r3, #15
   27506:	18fb      	adds	r3, r7, r3
   27508:	1dfa      	adds	r2, r7, #7
   2750a:	7812      	ldrb	r2, [r2, #0]
   2750c:	0952      	lsrs	r2, r2, #5
   2750e:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
   27510:	230f      	movs	r3, #15
   27512:	18fb      	adds	r3, r7, r3
   27514:	781b      	ldrb	r3, [r3, #0]
   27516:	2b00      	cmp	r3, #0
   27518:	d10c      	bne.n	27534 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   2751a:	4b09      	ldr	r3, [pc, #36]	; (27540 <_extint_get_eic_from_channel+0x48>)
   2751c:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
   2751e:	230f      	movs	r3, #15
   27520:	18fb      	adds	r3, r7, r3
   27522:	781b      	ldrb	r3, [r3, #0]
   27524:	009b      	lsls	r3, r3, #2
   27526:	2210      	movs	r2, #16
   27528:	4694      	mov	ip, r2
   2752a:	44bc      	add	ip, r7
   2752c:	4463      	add	r3, ip
   2752e:	3b08      	subs	r3, #8
   27530:	681b      	ldr	r3, [r3, #0]
   27532:	e000      	b.n	27536 <_extint_get_eic_from_channel+0x3e>
		return NULL;
   27534:	2300      	movs	r3, #0
}
   27536:	0018      	movs	r0, r3
   27538:	46bd      	mov	sp, r7
   2753a:	b004      	add	sp, #16
   2753c:	bd80      	pop	{r7, pc}
   2753e:	46c0      	nop			; (mov r8, r8)
   27540:	40001800 	.word	0x40001800

00027544 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
   27544:	b580      	push	{r7, lr}
   27546:	b082      	sub	sp, #8
   27548:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   2754a:	4b0f      	ldr	r3, [pc, #60]	; (27588 <extint_is_syncing+0x44>)
   2754c:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   2754e:	2300      	movs	r3, #0
   27550:	607b      	str	r3, [r7, #4]
   27552:	e011      	b.n	27578 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
   27554:	687b      	ldr	r3, [r7, #4]
   27556:	009b      	lsls	r3, r3, #2
   27558:	2208      	movs	r2, #8
   2755a:	4694      	mov	ip, r2
   2755c:	44bc      	add	ip, r7
   2755e:	4463      	add	r3, ip
   27560:	3b08      	subs	r3, #8
   27562:	681b      	ldr	r3, [r3, #0]
   27564:	785b      	ldrb	r3, [r3, #1]
   27566:	b2db      	uxtb	r3, r3
   27568:	b25b      	sxtb	r3, r3
   2756a:	2b00      	cmp	r3, #0
   2756c:	da01      	bge.n	27572 <extint_is_syncing+0x2e>
			return true;
   2756e:	2301      	movs	r3, #1
   27570:	e006      	b.n	27580 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   27572:	687b      	ldr	r3, [r7, #4]
   27574:	3301      	adds	r3, #1
   27576:	607b      	str	r3, [r7, #4]
   27578:	687b      	ldr	r3, [r7, #4]
   2757a:	2b00      	cmp	r3, #0
   2757c:	d0ea      	beq.n	27554 <extint_is_syncing+0x10>
		}
	}
	return false;
   2757e:	2300      	movs	r3, #0
}
   27580:	0018      	movs	r0, r3
   27582:	46bd      	mov	sp, r7
   27584:	b002      	add	sp, #8
   27586:	bd80      	pop	{r7, pc}
   27588:	40001800 	.word	0x40001800

0002758c <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
   2758c:	b580      	push	{r7, lr}
   2758e:	b084      	sub	sp, #16
   27590:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   27592:	4b2d      	ldr	r3, [pc, #180]	; (27648 <_system_extint_init+0xbc>)
   27594:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
   27596:	2140      	movs	r1, #64	; 0x40
   27598:	2000      	movs	r0, #0
   2759a:	4b2c      	ldr	r3, [pc, #176]	; (2764c <_system_extint_init+0xc0>)
   2759c:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   2759e:	003b      	movs	r3, r7
   275a0:	0018      	movs	r0, r3
   275a2:	4b2b      	ldr	r3, [pc, #172]	; (27650 <_system_extint_init+0xc4>)
   275a4:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
   275a6:	003b      	movs	r3, r7
   275a8:	2200      	movs	r2, #0
   275aa:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
   275ac:	003b      	movs	r3, r7
   275ae:	0019      	movs	r1, r3
   275b0:	2005      	movs	r0, #5
   275b2:	4b28      	ldr	r3, [pc, #160]	; (27654 <_system_extint_init+0xc8>)
   275b4:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
   275b6:	2005      	movs	r0, #5
   275b8:	4b27      	ldr	r3, [pc, #156]	; (27658 <_system_extint_init+0xcc>)
   275ba:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   275bc:	2300      	movs	r3, #0
   275be:	60fb      	str	r3, [r7, #12]
   275c0:	e018      	b.n	275f4 <_system_extint_init+0x68>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
   275c2:	68fb      	ldr	r3, [r7, #12]
   275c4:	009b      	lsls	r3, r3, #2
   275c6:	2210      	movs	r2, #16
   275c8:	4694      	mov	ip, r2
   275ca:	44bc      	add	ip, r7
   275cc:	4463      	add	r3, ip
   275ce:	3b0c      	subs	r3, #12
   275d0:	681a      	ldr	r2, [r3, #0]
   275d2:	68fb      	ldr	r3, [r7, #12]
   275d4:	009b      	lsls	r3, r3, #2
   275d6:	2110      	movs	r1, #16
   275d8:	468c      	mov	ip, r1
   275da:	44bc      	add	ip, r7
   275dc:	4463      	add	r3, ip
   275de:	3b0c      	subs	r3, #12
   275e0:	681b      	ldr	r3, [r3, #0]
   275e2:	781b      	ldrb	r3, [r3, #0]
   275e4:	b2db      	uxtb	r3, r3
   275e6:	2101      	movs	r1, #1
   275e8:	430b      	orrs	r3, r1
   275ea:	b2db      	uxtb	r3, r3
   275ec:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   275ee:	68fb      	ldr	r3, [r7, #12]
   275f0:	3301      	adds	r3, #1
   275f2:	60fb      	str	r3, [r7, #12]
   275f4:	68fb      	ldr	r3, [r7, #12]
   275f6:	2b00      	cmp	r3, #0
   275f8:	d0e3      	beq.n	275c2 <_system_extint_init+0x36>
	}

	while (extint_is_syncing()) {
   275fa:	46c0      	nop			; (mov r8, r8)
   275fc:	4b17      	ldr	r3, [pc, #92]	; (2765c <_system_extint_init+0xd0>)
   275fe:	4798      	blx	r3
   27600:	1e03      	subs	r3, r0, #0
   27602:	d1fb      	bne.n	275fc <_system_extint_init+0x70>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   27604:	230b      	movs	r3, #11
   27606:	18fb      	adds	r3, r7, r3
   27608:	2200      	movs	r2, #0
   2760a:	701a      	strb	r2, [r3, #0]
   2760c:	e00d      	b.n	2762a <_system_extint_init+0x9e>
		_extint_dev.callbacks[j] = NULL;
   2760e:	230b      	movs	r3, #11
   27610:	18fb      	adds	r3, r7, r3
   27612:	781a      	ldrb	r2, [r3, #0]
   27614:	4b12      	ldr	r3, [pc, #72]	; (27660 <_system_extint_init+0xd4>)
   27616:	0092      	lsls	r2, r2, #2
   27618:	2100      	movs	r1, #0
   2761a:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
   2761c:	230b      	movs	r3, #11
   2761e:	18fb      	adds	r3, r7, r3
   27620:	781a      	ldrb	r2, [r3, #0]
   27622:	230b      	movs	r3, #11
   27624:	18fb      	adds	r3, r7, r3
   27626:	3201      	adds	r2, #1
   27628:	701a      	strb	r2, [r3, #0]
   2762a:	230b      	movs	r3, #11
   2762c:	18fb      	adds	r3, r7, r3
   2762e:	781b      	ldrb	r3, [r3, #0]
   27630:	2b0f      	cmp	r3, #15
   27632:	d9ec      	bls.n	2760e <_system_extint_init+0x82>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
   27634:	2004      	movs	r0, #4
   27636:	4b0b      	ldr	r3, [pc, #44]	; (27664 <_system_extint_init+0xd8>)
   27638:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
   2763a:	4b0b      	ldr	r3, [pc, #44]	; (27668 <_system_extint_init+0xdc>)
   2763c:	4798      	blx	r3
}
   2763e:	46c0      	nop			; (mov r8, r8)
   27640:	46bd      	mov	sp, r7
   27642:	b004      	add	sp, #16
   27644:	bd80      	pop	{r7, pc}
   27646:	46c0      	nop			; (mov r8, r8)
   27648:	40001800 	.word	0x40001800
   2764c:	00027449 	.word	0x00027449
   27650:	00027431 	.word	0x00027431
   27654:	0002acb9 	.word	0x0002acb9
   27658:	0002acfd 	.word	0x0002acfd
   2765c:	00027545 	.word	0x00027545
   27660:	20005c14 	.word	0x20005c14
   27664:	000274cd 	.word	0x000274cd
   27668:	0002766d 	.word	0x0002766d

0002766c <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
   2766c:	b580      	push	{r7, lr}
   2766e:	b082      	sub	sp, #8
   27670:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
   27672:	4b15      	ldr	r3, [pc, #84]	; (276c8 <_extint_enable+0x5c>)
   27674:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   27676:	2300      	movs	r3, #0
   27678:	607b      	str	r3, [r7, #4]
   2767a:	e018      	b.n	276ae <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
   2767c:	687b      	ldr	r3, [r7, #4]
   2767e:	009b      	lsls	r3, r3, #2
   27680:	2208      	movs	r2, #8
   27682:	4694      	mov	ip, r2
   27684:	44bc      	add	ip, r7
   27686:	4463      	add	r3, ip
   27688:	3b08      	subs	r3, #8
   2768a:	681a      	ldr	r2, [r3, #0]
   2768c:	687b      	ldr	r3, [r7, #4]
   2768e:	009b      	lsls	r3, r3, #2
   27690:	2108      	movs	r1, #8
   27692:	468c      	mov	ip, r1
   27694:	44bc      	add	ip, r7
   27696:	4463      	add	r3, ip
   27698:	3b08      	subs	r3, #8
   2769a:	681b      	ldr	r3, [r3, #0]
   2769c:	781b      	ldrb	r3, [r3, #0]
   2769e:	b2db      	uxtb	r3, r3
   276a0:	2102      	movs	r1, #2
   276a2:	430b      	orrs	r3, r1
   276a4:	b2db      	uxtb	r3, r3
   276a6:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
   276a8:	687b      	ldr	r3, [r7, #4]
   276aa:	3301      	adds	r3, #1
   276ac:	607b      	str	r3, [r7, #4]
   276ae:	687b      	ldr	r3, [r7, #4]
   276b0:	2b00      	cmp	r3, #0
   276b2:	d0e3      	beq.n	2767c <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
   276b4:	46c0      	nop			; (mov r8, r8)
   276b6:	4b05      	ldr	r3, [pc, #20]	; (276cc <_extint_enable+0x60>)
   276b8:	4798      	blx	r3
   276ba:	1e03      	subs	r3, r0, #0
   276bc:	d1fb      	bne.n	276b6 <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
   276be:	46c0      	nop			; (mov r8, r8)
   276c0:	46bd      	mov	sp, r7
   276c2:	b002      	add	sp, #8
   276c4:	bd80      	pop	{r7, pc}
   276c6:	46c0      	nop			; (mov r8, r8)
   276c8:	40001800 	.word	0x40001800
   276cc:	00027545 	.word	0x00027545

000276d0 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
   276d0:	b580      	push	{r7, lr}
   276d2:	b082      	sub	sp, #8
   276d4:	af00      	add	r7, sp, #0
   276d6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
   276d8:	687b      	ldr	r3, [r7, #4]
   276da:	2200      	movs	r2, #0
   276dc:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
   276de:	687b      	ldr	r3, [r7, #4]
   276e0:	2200      	movs	r2, #0
   276e2:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
   276e4:	687b      	ldr	r3, [r7, #4]
   276e6:	2201      	movs	r2, #1
   276e8:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
   276ea:	687b      	ldr	r3, [r7, #4]
   276ec:	2201      	movs	r2, #1
   276ee:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
   276f0:	687b      	ldr	r3, [r7, #4]
   276f2:	2200      	movs	r2, #0
   276f4:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
   276f6:	687b      	ldr	r3, [r7, #4]
   276f8:	2202      	movs	r2, #2
   276fa:	72da      	strb	r2, [r3, #11]
}
   276fc:	46c0      	nop			; (mov r8, r8)
   276fe:	46bd      	mov	sp, r7
   27700:	b002      	add	sp, #8
   27702:	bd80      	pop	{r7, pc}

00027704 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
   27704:	b580      	push	{r7, lr}
   27706:	b086      	sub	sp, #24
   27708:	af00      	add	r7, sp, #0
   2770a:	0002      	movs	r2, r0
   2770c:	6039      	str	r1, [r7, #0]
   2770e:	1dfb      	adds	r3, r7, #7
   27710:	701a      	strb	r2, [r3, #0]
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   27712:	2308      	movs	r3, #8
   27714:	18fb      	adds	r3, r7, r3
   27716:	0018      	movs	r0, r3
   27718:	4b36      	ldr	r3, [pc, #216]	; (277f4 <extint_chan_set_config+0xf0>)
   2771a:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
   2771c:	683b      	ldr	r3, [r7, #0]
   2771e:	685b      	ldr	r3, [r3, #4]
   27720:	b2da      	uxtb	r2, r3
   27722:	2308      	movs	r3, #8
   27724:	18fb      	adds	r3, r7, r3
   27726:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   27728:	2308      	movs	r3, #8
   2772a:	18fb      	adds	r3, r7, r3
   2772c:	2200      	movs	r2, #0
   2772e:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
   27730:	683b      	ldr	r3, [r7, #0]
   27732:	7a1a      	ldrb	r2, [r3, #8]
   27734:	2308      	movs	r3, #8
   27736:	18fb      	adds	r3, r7, r3
   27738:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
   2773a:	683b      	ldr	r3, [r7, #0]
   2773c:	681b      	ldr	r3, [r3, #0]
   2773e:	b2db      	uxtb	r3, r3
   27740:	2208      	movs	r2, #8
   27742:	18ba      	adds	r2, r7, r2
   27744:	0011      	movs	r1, r2
   27746:	0018      	movs	r0, r3
   27748:	4b2b      	ldr	r3, [pc, #172]	; (277f8 <extint_chan_set_config+0xf4>)
   2774a:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
   2774c:	1dfb      	adds	r3, r7, #7
   2774e:	781b      	ldrb	r3, [r3, #0]
   27750:	0018      	movs	r0, r3
   27752:	4b2a      	ldr	r3, [pc, #168]	; (277fc <extint_chan_set_config+0xf8>)
   27754:	4798      	blx	r3
   27756:	0003      	movs	r3, r0
   27758:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
   2775a:	1dfb      	adds	r3, r7, #7
   2775c:	781b      	ldrb	r3, [r3, #0]
   2775e:	2207      	movs	r2, #7
   27760:	4013      	ands	r3, r2
   27762:	009b      	lsls	r3, r3, #2
   27764:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
   27766:	683b      	ldr	r3, [r7, #0]
   27768:	7adb      	ldrb	r3, [r3, #11]
   2776a:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
   2776c:	683b      	ldr	r3, [r7, #0]
   2776e:	7a9b      	ldrb	r3, [r3, #10]
   27770:	2b00      	cmp	r3, #0
   27772:	d003      	beq.n	2777c <extint_chan_set_config+0x78>
		new_config |= EIC_CONFIG_FILTEN0;
   27774:	697b      	ldr	r3, [r7, #20]
   27776:	2208      	movs	r2, #8
   27778:	4313      	orrs	r3, r2
   2777a:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
   2777c:	1dfb      	adds	r3, r7, #7
   2777e:	781b      	ldrb	r3, [r3, #0]
   27780:	08db      	lsrs	r3, r3, #3
   27782:	b2db      	uxtb	r3, r3
   27784:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
   27786:	1dfb      	adds	r3, r7, #7
   27788:	781b      	ldrb	r3, [r3, #0]
   2778a:	08db      	lsrs	r3, r3, #3
   2778c:	b2db      	uxtb	r3, r3
   2778e:	001a      	movs	r2, r3
   27790:	693b      	ldr	r3, [r7, #16]
   27792:	3206      	adds	r2, #6
   27794:	0092      	lsls	r2, r2, #2
   27796:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   27798:	210f      	movs	r1, #15
   2779a:	68fa      	ldr	r2, [r7, #12]
   2779c:	4091      	lsls	r1, r2
   2779e:	000a      	movs	r2, r1
   277a0:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   277a2:	401a      	ands	r2, r3
			(new_config << config_pos);
   277a4:	6979      	ldr	r1, [r7, #20]
   277a6:	68fb      	ldr	r3, [r7, #12]
   277a8:	4099      	lsls	r1, r3
   277aa:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
   277ac:	431a      	orrs	r2, r3
   277ae:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
   277b0:	693b      	ldr	r3, [r7, #16]
   277b2:	1d82      	adds	r2, r0, #6
   277b4:	0092      	lsls	r2, r2, #2
   277b6:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
   277b8:	683b      	ldr	r3, [r7, #0]
   277ba:	7a5b      	ldrb	r3, [r3, #9]
   277bc:	2b00      	cmp	r3, #0
   277be:	d00a      	beq.n	277d6 <extint_chan_set_config+0xd2>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
   277c0:	693b      	ldr	r3, [r7, #16]
   277c2:	695a      	ldr	r2, [r3, #20]
   277c4:	1dfb      	adds	r3, r7, #7
   277c6:	781b      	ldrb	r3, [r3, #0]
   277c8:	2101      	movs	r1, #1
   277ca:	4099      	lsls	r1, r3
   277cc:	000b      	movs	r3, r1
   277ce:	431a      	orrs	r2, r3
   277d0:	693b      	ldr	r3, [r7, #16]
   277d2:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
   277d4:	e00a      	b.n	277ec <extint_chan_set_config+0xe8>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
   277d6:	693b      	ldr	r3, [r7, #16]
   277d8:	695b      	ldr	r3, [r3, #20]
   277da:	1dfa      	adds	r2, r7, #7
   277dc:	7812      	ldrb	r2, [r2, #0]
   277de:	2101      	movs	r1, #1
   277e0:	4091      	lsls	r1, r2
   277e2:	000a      	movs	r2, r1
   277e4:	43d2      	mvns	r2, r2
   277e6:	401a      	ands	r2, r3
   277e8:	693b      	ldr	r3, [r7, #16]
   277ea:	615a      	str	r2, [r3, #20]
}
   277ec:	46c0      	nop			; (mov r8, r8)
   277ee:	46bd      	mov	sp, r7
   277f0:	b006      	add	sp, #24
   277f2:	bd80      	pop	{r7, pc}
   277f4:	000274a5 	.word	0x000274a5
   277f8:	0002b019 	.word	0x0002b019
   277fc:	000274f9 	.word	0x000274f9

00027800 <system_pinmux_get_config_defaults>:
{
   27800:	b580      	push	{r7, lr}
   27802:	b082      	sub	sp, #8
   27804:	af00      	add	r7, sp, #0
   27806:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   27808:	687b      	ldr	r3, [r7, #4]
   2780a:	2280      	movs	r2, #128	; 0x80
   2780c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2780e:	687b      	ldr	r3, [r7, #4]
   27810:	2200      	movs	r2, #0
   27812:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   27814:	687b      	ldr	r3, [r7, #4]
   27816:	2201      	movs	r2, #1
   27818:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2781a:	687b      	ldr	r3, [r7, #4]
   2781c:	2200      	movs	r2, #0
   2781e:	70da      	strb	r2, [r3, #3]
}
   27820:	46c0      	nop			; (mov r8, r8)
   27822:	46bd      	mov	sp, r7
   27824:	b002      	add	sp, #8
   27826:	bd80      	pop	{r7, pc}

00027828 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
   27828:	b580      	push	{r7, lr}
   2782a:	b084      	sub	sp, #16
   2782c:	af00      	add	r7, sp, #0
   2782e:	0002      	movs	r2, r0
   27830:	6039      	str	r1, [r7, #0]
   27832:	1dfb      	adds	r3, r7, #7
   27834:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
   27836:	230c      	movs	r3, #12
   27838:	18fb      	adds	r3, r7, r3
   2783a:	0018      	movs	r0, r3
   2783c:	4b10      	ldr	r3, [pc, #64]	; (27880 <port_pin_set_config+0x58>)
   2783e:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
   27840:	230c      	movs	r3, #12
   27842:	18fb      	adds	r3, r7, r3
   27844:	2280      	movs	r2, #128	; 0x80
   27846:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
   27848:	683b      	ldr	r3, [r7, #0]
   2784a:	781a      	ldrb	r2, [r3, #0]
   2784c:	230c      	movs	r3, #12
   2784e:	18fb      	adds	r3, r7, r3
   27850:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
   27852:	683b      	ldr	r3, [r7, #0]
   27854:	785a      	ldrb	r2, [r3, #1]
   27856:	230c      	movs	r3, #12
   27858:	18fb      	adds	r3, r7, r3
   2785a:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
   2785c:	683b      	ldr	r3, [r7, #0]
   2785e:	789a      	ldrb	r2, [r3, #2]
   27860:	230c      	movs	r3, #12
   27862:	18fb      	adds	r3, r7, r3
   27864:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
   27866:	230c      	movs	r3, #12
   27868:	18fa      	adds	r2, r7, r3
   2786a:	1dfb      	adds	r3, r7, #7
   2786c:	781b      	ldrb	r3, [r3, #0]
   2786e:	0011      	movs	r1, r2
   27870:	0018      	movs	r0, r3
   27872:	4b04      	ldr	r3, [pc, #16]	; (27884 <port_pin_set_config+0x5c>)
   27874:	4798      	blx	r3
}
   27876:	46c0      	nop			; (mov r8, r8)
   27878:	46bd      	mov	sp, r7
   2787a:	b004      	add	sp, #16
   2787c:	bd80      	pop	{r7, pc}
   2787e:	46c0      	nop			; (mov r8, r8)
   27880:	00027801 	.word	0x00027801
   27884:	0002b019 	.word	0x0002b019

00027888 <system_gclk_chan_get_config_defaults>:
{
   27888:	b580      	push	{r7, lr}
   2788a:	b082      	sub	sp, #8
   2788c:	af00      	add	r7, sp, #0
   2788e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   27890:	687b      	ldr	r3, [r7, #4]
   27892:	2200      	movs	r2, #0
   27894:	701a      	strb	r2, [r3, #0]
}
   27896:	46c0      	nop			; (mov r8, r8)
   27898:	46bd      	mov	sp, r7
   2789a:	b002      	add	sp, #8
   2789c:	bd80      	pop	{r7, pc}
	...

000278a0 <system_apb_clock_set_mask>:
{
   278a0:	b580      	push	{r7, lr}
   278a2:	b082      	sub	sp, #8
   278a4:	af00      	add	r7, sp, #0
   278a6:	0002      	movs	r2, r0
   278a8:	6039      	str	r1, [r7, #0]
   278aa:	1dfb      	adds	r3, r7, #7
   278ac:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   278ae:	1dfb      	adds	r3, r7, #7
   278b0:	781b      	ldrb	r3, [r3, #0]
   278b2:	2b01      	cmp	r3, #1
   278b4:	d00a      	beq.n	278cc <system_apb_clock_set_mask+0x2c>
   278b6:	2b02      	cmp	r3, #2
   278b8:	d00f      	beq.n	278da <system_apb_clock_set_mask+0x3a>
   278ba:	2b00      	cmp	r3, #0
   278bc:	d114      	bne.n	278e8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   278be:	4b0e      	ldr	r3, [pc, #56]	; (278f8 <system_apb_clock_set_mask+0x58>)
   278c0:	4a0d      	ldr	r2, [pc, #52]	; (278f8 <system_apb_clock_set_mask+0x58>)
   278c2:	6991      	ldr	r1, [r2, #24]
   278c4:	683a      	ldr	r2, [r7, #0]
   278c6:	430a      	orrs	r2, r1
   278c8:	619a      	str	r2, [r3, #24]
			break;
   278ca:	e00f      	b.n	278ec <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   278cc:	4b0a      	ldr	r3, [pc, #40]	; (278f8 <system_apb_clock_set_mask+0x58>)
   278ce:	4a0a      	ldr	r2, [pc, #40]	; (278f8 <system_apb_clock_set_mask+0x58>)
   278d0:	69d1      	ldr	r1, [r2, #28]
   278d2:	683a      	ldr	r2, [r7, #0]
   278d4:	430a      	orrs	r2, r1
   278d6:	61da      	str	r2, [r3, #28]
			break;
   278d8:	e008      	b.n	278ec <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   278da:	4b07      	ldr	r3, [pc, #28]	; (278f8 <system_apb_clock_set_mask+0x58>)
   278dc:	4a06      	ldr	r2, [pc, #24]	; (278f8 <system_apb_clock_set_mask+0x58>)
   278de:	6a11      	ldr	r1, [r2, #32]
   278e0:	683a      	ldr	r2, [r7, #0]
   278e2:	430a      	orrs	r2, r1
   278e4:	621a      	str	r2, [r3, #32]
			break;
   278e6:	e001      	b.n	278ec <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   278e8:	2317      	movs	r3, #23
   278ea:	e000      	b.n	278ee <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   278ec:	2300      	movs	r3, #0
}
   278ee:	0018      	movs	r0, r3
   278f0:	46bd      	mov	sp, r7
   278f2:	b002      	add	sp, #8
   278f4:	bd80      	pop	{r7, pc}
   278f6:	46c0      	nop			; (mov r8, r8)
   278f8:	40000400 	.word	0x40000400

000278fc <system_interrupt_enable>:
{
   278fc:	b580      	push	{r7, lr}
   278fe:	b082      	sub	sp, #8
   27900:	af00      	add	r7, sp, #0
   27902:	0002      	movs	r2, r0
   27904:	1dfb      	adds	r3, r7, #7
   27906:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   27908:	4b06      	ldr	r3, [pc, #24]	; (27924 <system_interrupt_enable+0x28>)
   2790a:	1dfa      	adds	r2, r7, #7
   2790c:	7812      	ldrb	r2, [r2, #0]
   2790e:	0011      	movs	r1, r2
   27910:	221f      	movs	r2, #31
   27912:	400a      	ands	r2, r1
   27914:	2101      	movs	r1, #1
   27916:	4091      	lsls	r1, r2
   27918:	000a      	movs	r2, r1
   2791a:	601a      	str	r2, [r3, #0]
}
   2791c:	46c0      	nop			; (mov r8, r8)
   2791e:	46bd      	mov	sp, r7
   27920:	b002      	add	sp, #8
   27922:	bd80      	pop	{r7, pc}
   27924:	e000e100 	.word	0xe000e100

00027928 <system_interrupt_disable>:
{
   27928:	b580      	push	{r7, lr}
   2792a:	b082      	sub	sp, #8
   2792c:	af00      	add	r7, sp, #0
   2792e:	0002      	movs	r2, r0
   27930:	1dfb      	adds	r3, r7, #7
   27932:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   27934:	4a07      	ldr	r2, [pc, #28]	; (27954 <system_interrupt_disable+0x2c>)
   27936:	1dfb      	adds	r3, r7, #7
   27938:	781b      	ldrb	r3, [r3, #0]
   2793a:	0019      	movs	r1, r3
   2793c:	231f      	movs	r3, #31
   2793e:	400b      	ands	r3, r1
   27940:	2101      	movs	r1, #1
   27942:	4099      	lsls	r1, r3
   27944:	000b      	movs	r3, r1
   27946:	0019      	movs	r1, r3
   27948:	2380      	movs	r3, #128	; 0x80
   2794a:	50d1      	str	r1, [r2, r3]
}
   2794c:	46c0      	nop			; (mov r8, r8)
   2794e:	46bd      	mov	sp, r7
   27950:	b002      	add	sp, #8
   27952:	bd80      	pop	{r7, pc}
   27954:	e000e100 	.word	0xe000e100

00027958 <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
   27958:	b580      	push	{r7, lr}
   2795a:	b084      	sub	sp, #16
   2795c:	af00      	add	r7, sp, #0
   2795e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   27960:	687b      	ldr	r3, [r7, #4]
   27962:	681b      	ldr	r3, [r3, #0]
   27964:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
   27966:	68fb      	ldr	r3, [r7, #12]
   27968:	7a9b      	ldrb	r3, [r3, #10]
   2796a:	b2db      	uxtb	r3, r3
   2796c:	b25b      	sxtb	r3, r3
   2796e:	2b00      	cmp	r3, #0
   27970:	da01      	bge.n	27976 <rtc_calendar_is_syncing+0x1e>
                return true;
   27972:	2301      	movs	r3, #1
   27974:	e000      	b.n	27978 <rtc_calendar_is_syncing+0x20>
        }

        return false;
   27976:	2300      	movs	r3, #0
}
   27978:	0018      	movs	r0, r3
   2797a:	46bd      	mov	sp, r7
   2797c:	b004      	add	sp, #16
   2797e:	bd80      	pop	{r7, pc}

00027980 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
   27980:	b580      	push	{r7, lr}
   27982:	b084      	sub	sp, #16
   27984:	af00      	add	r7, sp, #0
   27986:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   27988:	687b      	ldr	r3, [r7, #4]
   2798a:	681b      	ldr	r3, [r3, #0]
   2798c:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
   2798e:	2003      	movs	r0, #3
   27990:	4b0a      	ldr	r3, [pc, #40]	; (279bc <rtc_calendar_enable+0x3c>)
   27992:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   27994:	46c0      	nop			; (mov r8, r8)
   27996:	687b      	ldr	r3, [r7, #4]
   27998:	0018      	movs	r0, r3
   2799a:	4b09      	ldr	r3, [pc, #36]	; (279c0 <rtc_calendar_enable+0x40>)
   2799c:	4798      	blx	r3
   2799e:	1e03      	subs	r3, r0, #0
   279a0:	d1f9      	bne.n	27996 <rtc_calendar_enable+0x16>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
   279a2:	68fb      	ldr	r3, [r7, #12]
   279a4:	881b      	ldrh	r3, [r3, #0]
   279a6:	b29b      	uxth	r3, r3
   279a8:	2202      	movs	r2, #2
   279aa:	4313      	orrs	r3, r2
   279ac:	b29a      	uxth	r2, r3
   279ae:	68fb      	ldr	r3, [r7, #12]
   279b0:	801a      	strh	r2, [r3, #0]
}
   279b2:	46c0      	nop			; (mov r8, r8)
   279b4:	46bd      	mov	sp, r7
   279b6:	b004      	add	sp, #16
   279b8:	bd80      	pop	{r7, pc}
   279ba:	46c0      	nop			; (mov r8, r8)
   279bc:	000278fd 	.word	0x000278fd
   279c0:	00027959 	.word	0x00027959

000279c4 <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
   279c4:	b580      	push	{r7, lr}
   279c6:	b084      	sub	sp, #16
   279c8:	af00      	add	r7, sp, #0
   279ca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   279cc:	687b      	ldr	r3, [r7, #4]
   279ce:	681b      	ldr	r3, [r3, #0]
   279d0:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
   279d2:	2003      	movs	r0, #3
   279d4:	4b0d      	ldr	r3, [pc, #52]	; (27a0c <rtc_calendar_disable+0x48>)
   279d6:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
   279d8:	46c0      	nop			; (mov r8, r8)
   279da:	687b      	ldr	r3, [r7, #4]
   279dc:	0018      	movs	r0, r3
   279de:	4b0c      	ldr	r3, [pc, #48]	; (27a10 <rtc_calendar_disable+0x4c>)
   279e0:	4798      	blx	r3
   279e2:	1e03      	subs	r3, r0, #0
   279e4:	d1f9      	bne.n	279da <rtc_calendar_disable+0x16>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
   279e6:	68fb      	ldr	r3, [r7, #12]
   279e8:	22c1      	movs	r2, #193	; 0xc1
   279ea:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
   279ec:	68fb      	ldr	r3, [r7, #12]
   279ee:	22c1      	movs	r2, #193	; 0xc1
   279f0:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
   279f2:	68fb      	ldr	r3, [r7, #12]
   279f4:	881b      	ldrh	r3, [r3, #0]
   279f6:	b29b      	uxth	r3, r3
   279f8:	2202      	movs	r2, #2
   279fa:	4393      	bics	r3, r2
   279fc:	b29a      	uxth	r2, r3
   279fe:	68fb      	ldr	r3, [r7, #12]
   27a00:	801a      	strh	r2, [r3, #0]
}
   27a02:	46c0      	nop			; (mov r8, r8)
   27a04:	46bd      	mov	sp, r7
   27a06:	b004      	add	sp, #16
   27a08:	bd80      	pop	{r7, pc}
   27a0a:	46c0      	nop			; (mov r8, r8)
   27a0c:	00027929 	.word	0x00027929
   27a10:	00027959 	.word	0x00027959

00027a14 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
   27a14:	b580      	push	{r7, lr}
   27a16:	b084      	sub	sp, #16
   27a18:	af00      	add	r7, sp, #0
   27a1a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   27a1c:	687b      	ldr	r3, [r7, #4]
   27a1e:	681b      	ldr	r3, [r3, #0]
   27a20:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
   27a22:	687b      	ldr	r3, [r7, #4]
   27a24:	0018      	movs	r0, r3
   27a26:	4b0d      	ldr	r3, [pc, #52]	; (27a5c <rtc_calendar_reset+0x48>)
   27a28:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
   27a2a:	687b      	ldr	r3, [r7, #4]
   27a2c:	2200      	movs	r2, #0
   27a2e:	821a      	strh	r2, [r3, #16]
	module->enabled_callback    = 0;
   27a30:	687b      	ldr	r3, [r7, #4]
   27a32:	2200      	movs	r2, #0
   27a34:	825a      	strh	r2, [r3, #18]
#endif

	while (rtc_calendar_is_syncing(module)) {
   27a36:	46c0      	nop			; (mov r8, r8)
   27a38:	687b      	ldr	r3, [r7, #4]
   27a3a:	0018      	movs	r0, r3
   27a3c:	4b08      	ldr	r3, [pc, #32]	; (27a60 <rtc_calendar_reset+0x4c>)
   27a3e:	4798      	blx	r3
   27a40:	1e03      	subs	r3, r0, #0
   27a42:	d1f9      	bne.n	27a38 <rtc_calendar_reset+0x24>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
   27a44:	68fb      	ldr	r3, [r7, #12]
   27a46:	881b      	ldrh	r3, [r3, #0]
   27a48:	b29b      	uxth	r3, r3
   27a4a:	2201      	movs	r2, #1
   27a4c:	4313      	orrs	r3, r2
   27a4e:	b29a      	uxth	r2, r3
   27a50:	68fb      	ldr	r3, [r7, #12]
   27a52:	801a      	strh	r2, [r3, #0]
}
   27a54:	46c0      	nop			; (mov r8, r8)
   27a56:	46bd      	mov	sp, r7
   27a58:	b004      	add	sp, #16
   27a5a:	bd80      	pop	{r7, pc}
   27a5c:	000279c5 	.word	0x000279c5
   27a60:	00027959 	.word	0x00027959

00027a64 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
   27a64:	b580      	push	{r7, lr}
   27a66:	b084      	sub	sp, #16
   27a68:	af00      	add	r7, sp, #0
   27a6a:	6078      	str	r0, [r7, #4]
   27a6c:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
   27a6e:	683b      	ldr	r3, [r7, #0]
   27a70:	88db      	ldrh	r3, [r3, #6]
   27a72:	001a      	movs	r2, r3
   27a74:	687b      	ldr	r3, [r7, #4]
   27a76:	88db      	ldrh	r3, [r3, #6]
   27a78:	1ad3      	subs	r3, r2, r3
   27a7a:	069b      	lsls	r3, r3, #26
   27a7c:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
   27a7e:	683b      	ldr	r3, [r7, #0]
   27a80:	795b      	ldrb	r3, [r3, #5]
   27a82:	059b      	lsls	r3, r3, #22
   27a84:	001a      	movs	r2, r3
   27a86:	68fb      	ldr	r3, [r7, #12]
   27a88:	4313      	orrs	r3, r2
   27a8a:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
   27a8c:	683b      	ldr	r3, [r7, #0]
   27a8e:	791b      	ldrb	r3, [r3, #4]
   27a90:	045b      	lsls	r3, r3, #17
   27a92:	001a      	movs	r2, r3
   27a94:	68fb      	ldr	r3, [r7, #12]
   27a96:	4313      	orrs	r3, r2
   27a98:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
   27a9a:	683b      	ldr	r3, [r7, #0]
   27a9c:	789b      	ldrb	r3, [r3, #2]
   27a9e:	031b      	lsls	r3, r3, #12
   27aa0:	001a      	movs	r2, r3
   27aa2:	68fb      	ldr	r3, [r7, #12]
   27aa4:	4313      	orrs	r3, r2
   27aa6:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
   27aa8:	687b      	ldr	r3, [r7, #4]
   27aaa:	791b      	ldrb	r3, [r3, #4]
   27aac:	2201      	movs	r2, #1
   27aae:	4053      	eors	r3, r2
   27ab0:	b2db      	uxtb	r3, r3
   27ab2:	2b00      	cmp	r3, #0
   27ab4:	d008      	beq.n	27ac8 <rtc_calendar_time_to_register_value+0x64>
   27ab6:	683b      	ldr	r3, [r7, #0]
   27ab8:	78db      	ldrb	r3, [r3, #3]
   27aba:	2b00      	cmp	r3, #0
   27abc:	d004      	beq.n	27ac8 <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
   27abe:	68fb      	ldr	r3, [r7, #12]
   27ac0:	2280      	movs	r2, #128	; 0x80
   27ac2:	0252      	lsls	r2, r2, #9
   27ac4:	4313      	orrs	r3, r2
   27ac6:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
   27ac8:	683b      	ldr	r3, [r7, #0]
   27aca:	785b      	ldrb	r3, [r3, #1]
   27acc:	019b      	lsls	r3, r3, #6
   27ace:	001a      	movs	r2, r3
   27ad0:	68fb      	ldr	r3, [r7, #12]
   27ad2:	4313      	orrs	r3, r2
   27ad4:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
   27ad6:	683b      	ldr	r3, [r7, #0]
   27ad8:	781b      	ldrb	r3, [r3, #0]
   27ada:	001a      	movs	r2, r3
   27adc:	68fb      	ldr	r3, [r7, #12]
   27ade:	4313      	orrs	r3, r2
   27ae0:	60fb      	str	r3, [r7, #12]

	return register_value;
   27ae2:	68fb      	ldr	r3, [r7, #12]
}
   27ae4:	0018      	movs	r0, r3
   27ae6:	46bd      	mov	sp, r7
   27ae8:	b004      	add	sp, #16
   27aea:	bd80      	pop	{r7, pc}

00027aec <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
   27aec:	b580      	push	{r7, lr}
   27aee:	b084      	sub	sp, #16
   27af0:	af00      	add	r7, sp, #0
   27af2:	60f8      	str	r0, [r7, #12]
   27af4:	60b9      	str	r1, [r7, #8]
   27af6:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   27af8:	68bb      	ldr	r3, [r7, #8]
   27afa:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
   27afc:	b29a      	uxth	r2, r3
   27afe:	68fb      	ldr	r3, [r7, #12]
   27b00:	88db      	ldrh	r3, [r3, #6]
   27b02:	18d3      	adds	r3, r2, r3
   27b04:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
   27b06:	687b      	ldr	r3, [r7, #4]
   27b08:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
   27b0a:	68bb      	ldr	r3, [r7, #8]
   27b0c:	0d9b      	lsrs	r3, r3, #22
   27b0e:	b2db      	uxtb	r3, r3
   27b10:	220f      	movs	r2, #15
   27b12:	4013      	ands	r3, r2
   27b14:	b2da      	uxtb	r2, r3
   27b16:	687b      	ldr	r3, [r7, #4]
   27b18:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
   27b1a:	68bb      	ldr	r3, [r7, #8]
   27b1c:	0c5b      	lsrs	r3, r3, #17
   27b1e:	b2db      	uxtb	r3, r3
   27b20:	221f      	movs	r2, #31
   27b22:	4013      	ands	r3, r2
   27b24:	b2da      	uxtb	r2, r3
   27b26:	687b      	ldr	r3, [r7, #4]
   27b28:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
   27b2a:	68fb      	ldr	r3, [r7, #12]
   27b2c:	791b      	ldrb	r3, [r3, #4]
   27b2e:	2b00      	cmp	r3, #0
   27b30:	d008      	beq.n	27b44 <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
   27b32:	68bb      	ldr	r3, [r7, #8]
   27b34:	0b1b      	lsrs	r3, r3, #12
   27b36:	b2db      	uxtb	r3, r3
   27b38:	221f      	movs	r2, #31
   27b3a:	4013      	ands	r3, r2
   27b3c:	b2da      	uxtb	r2, r3
   27b3e:	687b      	ldr	r3, [r7, #4]
   27b40:	709a      	strb	r2, [r3, #2]
   27b42:	e010      	b.n	27b66 <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
   27b44:	68bb      	ldr	r3, [r7, #8]
   27b46:	0b1b      	lsrs	r3, r3, #12
   27b48:	b2db      	uxtb	r3, r3
   27b4a:	220f      	movs	r2, #15
   27b4c:	4013      	ands	r3, r2
   27b4e:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
   27b50:	687b      	ldr	r3, [r7, #4]
   27b52:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
   27b54:	68ba      	ldr	r2, [r7, #8]
   27b56:	2380      	movs	r3, #128	; 0x80
   27b58:	025b      	lsls	r3, r3, #9
   27b5a:	4013      	ands	r3, r2
   27b5c:	1e5a      	subs	r2, r3, #1
   27b5e:	4193      	sbcs	r3, r2
   27b60:	b2da      	uxtb	r2, r3
   27b62:	687b      	ldr	r3, [r7, #4]
   27b64:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
   27b66:	68bb      	ldr	r3, [r7, #8]
   27b68:	099b      	lsrs	r3, r3, #6
   27b6a:	b2db      	uxtb	r3, r3
   27b6c:	223f      	movs	r2, #63	; 0x3f
   27b6e:	4013      	ands	r3, r2
   27b70:	b2da      	uxtb	r2, r3
   27b72:	687b      	ldr	r3, [r7, #4]
   27b74:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
   27b76:	68bb      	ldr	r3, [r7, #8]
   27b78:	b2db      	uxtb	r3, r3
   27b7a:	223f      	movs	r2, #63	; 0x3f
   27b7c:	4013      	ands	r3, r2
   27b7e:	b2da      	uxtb	r2, r3
   27b80:	687b      	ldr	r3, [r7, #4]
   27b82:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
   27b84:	46c0      	nop			; (mov r8, r8)
   27b86:	46bd      	mov	sp, r7
   27b88:	b004      	add	sp, #16
   27b8a:	bd80      	pop	{r7, pc}

00027b8c <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
   27b8c:	b580      	push	{r7, lr}
   27b8e:	b084      	sub	sp, #16
   27b90:	af00      	add	r7, sp, #0
   27b92:	6078      	str	r0, [r7, #4]
   27b94:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   27b96:	687b      	ldr	r3, [r7, #4]
   27b98:	681b      	ldr	r3, [r3, #0]
   27b9a:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
   27b9c:	683b      	ldr	r3, [r7, #0]
   27b9e:	881a      	ldrh	r2, [r3, #0]
   27ba0:	230e      	movs	r3, #14
   27ba2:	18fb      	adds	r3, r7, r3
   27ba4:	2108      	movs	r1, #8
   27ba6:	430a      	orrs	r2, r1
   27ba8:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
   27baa:	683b      	ldr	r3, [r7, #0]
   27bac:	791b      	ldrb	r3, [r3, #4]
   27bae:	2201      	movs	r2, #1
   27bb0:	4053      	eors	r3, r2
   27bb2:	b2db      	uxtb	r3, r3
   27bb4:	2b00      	cmp	r3, #0
   27bb6:	d007      	beq.n	27bc8 <_rtc_calendar_set_config+0x3c>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
   27bb8:	230e      	movs	r3, #14
   27bba:	18fb      	adds	r3, r7, r3
   27bbc:	220e      	movs	r2, #14
   27bbe:	18ba      	adds	r2, r7, r2
   27bc0:	8812      	ldrh	r2, [r2, #0]
   27bc2:	2140      	movs	r1, #64	; 0x40
   27bc4:	430a      	orrs	r2, r1
   27bc6:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
   27bc8:	683b      	ldr	r3, [r7, #0]
   27bca:	789b      	ldrb	r3, [r3, #2]
   27bcc:	2b00      	cmp	r3, #0
   27bce:	d007      	beq.n	27be0 <_rtc_calendar_set_config+0x54>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
   27bd0:	230e      	movs	r3, #14
   27bd2:	18fb      	adds	r3, r7, r3
   27bd4:	220e      	movs	r2, #14
   27bd6:	18ba      	adds	r2, r7, r2
   27bd8:	8812      	ldrh	r2, [r2, #0]
   27bda:	2180      	movs	r1, #128	; 0x80
   27bdc:	430a      	orrs	r2, r1
   27bde:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
   27be0:	68bb      	ldr	r3, [r7, #8]
   27be2:	220e      	movs	r2, #14
   27be4:	18ba      	adds	r2, r7, r2
   27be6:	8812      	ldrh	r2, [r2, #0]
   27be8:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
   27bea:	683b      	ldr	r3, [r7, #0]
   27bec:	78db      	ldrb	r3, [r3, #3]
   27bee:	2b00      	cmp	r3, #0
   27bf0:	d008      	beq.n	27c04 <_rtc_calendar_set_config+0x78>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
   27bf2:	68bb      	ldr	r3, [r7, #8]
   27bf4:	885b      	ldrh	r3, [r3, #2]
   27bf6:	b29b      	uxth	r3, r3
   27bf8:	2280      	movs	r2, #128	; 0x80
   27bfa:	01d2      	lsls	r2, r2, #7
   27bfc:	4313      	orrs	r3, r2
   27bfe:	b29a      	uxth	r2, r3
   27c00:	68bb      	ldr	r3, [r7, #8]
   27c02:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   27c04:	230d      	movs	r3, #13
   27c06:	18fb      	adds	r3, r7, r3
   27c08:	2200      	movs	r2, #0
   27c0a:	701a      	strb	r2, [r3, #0]
   27c0c:	e017      	b.n	27c3e <_rtc_calendar_set_config+0xb2>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
   27c0e:	230d      	movs	r3, #13
   27c10:	18fb      	adds	r3, r7, r3
   27c12:	781a      	ldrb	r2, [r3, #0]
   27c14:	0013      	movs	r3, r2
   27c16:	009b      	lsls	r3, r3, #2
   27c18:	189b      	adds	r3, r3, r2
   27c1a:	005b      	lsls	r3, r3, #1
   27c1c:	3308      	adds	r3, #8
   27c1e:	683a      	ldr	r2, [r7, #0]
   27c20:	18d1      	adds	r1, r2, r3
   27c22:	230d      	movs	r3, #13
   27c24:	18fb      	adds	r3, r7, r3
   27c26:	781a      	ldrb	r2, [r3, #0]
   27c28:	687b      	ldr	r3, [r7, #4]
   27c2a:	0018      	movs	r0, r3
   27c2c:	4b08      	ldr	r3, [pc, #32]	; (27c50 <_rtc_calendar_set_config+0xc4>)
   27c2e:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   27c30:	230d      	movs	r3, #13
   27c32:	18fb      	adds	r3, r7, r3
   27c34:	781a      	ldrb	r2, [r3, #0]
   27c36:	230d      	movs	r3, #13
   27c38:	18fb      	adds	r3, r7, r3
   27c3a:	3201      	adds	r2, #1
   27c3c:	701a      	strb	r2, [r3, #0]
   27c3e:	230d      	movs	r3, #13
   27c40:	18fb      	adds	r3, r7, r3
   27c42:	781b      	ldrb	r3, [r3, #0]
   27c44:	2b00      	cmp	r3, #0
   27c46:	d0e2      	beq.n	27c0e <_rtc_calendar_set_config+0x82>
	}
}
   27c48:	46c0      	nop			; (mov r8, r8)
   27c4a:	46bd      	mov	sp, r7
   27c4c:	b004      	add	sp, #16
   27c4e:	bd80      	pop	{r7, pc}
   27c50:	00027d75 	.word	0x00027d75

00027c54 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
   27c54:	b580      	push	{r7, lr}
   27c56:	b086      	sub	sp, #24
   27c58:	af00      	add	r7, sp, #0
   27c5a:	60f8      	str	r0, [r7, #12]
   27c5c:	60b9      	str	r1, [r7, #8]
   27c5e:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   27c60:	68fb      	ldr	r3, [r7, #12]
   27c62:	68ba      	ldr	r2, [r7, #8]
   27c64:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
   27c66:	2120      	movs	r1, #32
   27c68:	2000      	movs	r0, #0
   27c6a:	4b18      	ldr	r3, [pc, #96]	; (27ccc <rtc_calendar_init+0x78>)
   27c6c:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   27c6e:	2314      	movs	r3, #20
   27c70:	18fb      	adds	r3, r7, r3
   27c72:	0018      	movs	r0, r3
   27c74:	4b16      	ldr	r3, [pc, #88]	; (27cd0 <rtc_calendar_init+0x7c>)
   27c76:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
   27c78:	2314      	movs	r3, #20
   27c7a:	18fb      	adds	r3, r7, r3
   27c7c:	2202      	movs	r2, #2
   27c7e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
   27c80:	2314      	movs	r3, #20
   27c82:	18fb      	adds	r3, r7, r3
   27c84:	0019      	movs	r1, r3
   27c86:	2004      	movs	r0, #4
   27c88:	4b12      	ldr	r3, [pc, #72]	; (27cd4 <rtc_calendar_init+0x80>)
   27c8a:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
   27c8c:	2004      	movs	r0, #4
   27c8e:	4b12      	ldr	r3, [pc, #72]	; (27cd8 <rtc_calendar_init+0x84>)
   27c90:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
   27c92:	68fb      	ldr	r3, [r7, #12]
   27c94:	0018      	movs	r0, r3
   27c96:	4b11      	ldr	r3, [pc, #68]	; (27cdc <rtc_calendar_init+0x88>)
   27c98:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
   27c9a:	687b      	ldr	r3, [r7, #4]
   27c9c:	791a      	ldrb	r2, [r3, #4]
   27c9e:	68fb      	ldr	r3, [r7, #12]
   27ca0:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
   27ca2:	687b      	ldr	r3, [r7, #4]
   27ca4:	78da      	ldrb	r2, [r3, #3]
   27ca6:	68fb      	ldr	r3, [r7, #12]
   27ca8:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
   27caa:	687b      	ldr	r3, [r7, #4]
   27cac:	88da      	ldrh	r2, [r3, #6]
   27cae:	68fb      	ldr	r3, [r7, #12]
   27cb0:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
   27cb2:	4b0b      	ldr	r3, [pc, #44]	; (27ce0 <rtc_calendar_init+0x8c>)
   27cb4:	68fa      	ldr	r2, [r7, #12]
   27cb6:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
   27cb8:	687a      	ldr	r2, [r7, #4]
   27cba:	68fb      	ldr	r3, [r7, #12]
   27cbc:	0011      	movs	r1, r2
   27cbe:	0018      	movs	r0, r3
   27cc0:	4b08      	ldr	r3, [pc, #32]	; (27ce4 <rtc_calendar_init+0x90>)
   27cc2:	4798      	blx	r3
}
   27cc4:	46c0      	nop			; (mov r8, r8)
   27cc6:	46bd      	mov	sp, r7
   27cc8:	b006      	add	sp, #24
   27cca:	bd80      	pop	{r7, pc}
   27ccc:	000278a1 	.word	0x000278a1
   27cd0:	00027889 	.word	0x00027889
   27cd4:	0002acb9 	.word	0x0002acb9
   27cd8:	0002acfd 	.word	0x0002acfd
   27cdc:	00027a15 	.word	0x00027a15
   27ce0:	20005c54 	.word	0x20005c54
   27ce4:	00027b8d 	.word	0x00027b8d

00027ce8 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
   27ce8:	b580      	push	{r7, lr}
   27cea:	b084      	sub	sp, #16
   27cec:	af00      	add	r7, sp, #0
   27cee:	6078      	str	r0, [r7, #4]
   27cf0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   27cf2:	687b      	ldr	r3, [r7, #4]
   27cf4:	681b      	ldr	r3, [r3, #0]
   27cf6:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
   27cf8:	687b      	ldr	r3, [r7, #4]
   27cfa:	795b      	ldrb	r3, [r3, #5]
   27cfc:	2201      	movs	r2, #1
   27cfe:	4053      	eors	r3, r2
   27d00:	b2db      	uxtb	r3, r3
   27d02:	2b00      	cmp	r3, #0
   27d04:	d00a      	beq.n	27d1c <rtc_calendar_get_time+0x34>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
   27d06:	68fb      	ldr	r3, [r7, #12]
   27d08:	4a16      	ldr	r2, [pc, #88]	; (27d64 <rtc_calendar_get_time+0x7c>)
   27d0a:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
   27d0c:	46c0      	nop			; (mov r8, r8)
   27d0e:	687b      	ldr	r3, [r7, #4]
   27d10:	0018      	movs	r0, r3
   27d12:	4b15      	ldr	r3, [pc, #84]	; (27d68 <rtc_calendar_get_time+0x80>)
   27d14:	4798      	blx	r3
   27d16:	1e03      	subs	r3, r0, #0
   27d18:	d1f9      	bne.n	27d0e <rtc_calendar_get_time+0x26>
   27d1a:	e016      	b.n	27d4a <rtc_calendar_get_time+0x62>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
   27d1c:	68fb      	ldr	r3, [r7, #12]
   27d1e:	885b      	ldrh	r3, [r3, #2]
   27d20:	b29b      	uxth	r3, r3
   27d22:	001a      	movs	r2, r3
   27d24:	2380      	movs	r3, #128	; 0x80
   27d26:	01db      	lsls	r3, r3, #7
   27d28:	4013      	ands	r3, r2
   27d2a:	d10e      	bne.n	27d4a <rtc_calendar_get_time+0x62>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
   27d2c:	68fb      	ldr	r3, [r7, #12]
   27d2e:	885b      	ldrh	r3, [r3, #2]
   27d30:	b29b      	uxth	r3, r3
   27d32:	4a0e      	ldr	r2, [pc, #56]	; (27d6c <rtc_calendar_get_time+0x84>)
   27d34:	4313      	orrs	r3, r2
   27d36:	b29a      	uxth	r2, r3
   27d38:	68fb      	ldr	r3, [r7, #12]
   27d3a:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
   27d3c:	46c0      	nop			; (mov r8, r8)
   27d3e:	687b      	ldr	r3, [r7, #4]
   27d40:	0018      	movs	r0, r3
   27d42:	4b09      	ldr	r3, [pc, #36]	; (27d68 <rtc_calendar_get_time+0x80>)
   27d44:	4798      	blx	r3
   27d46:	1e03      	subs	r3, r0, #0
   27d48:	d1f9      	bne.n	27d3e <rtc_calendar_get_time+0x56>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
   27d4a:	68fb      	ldr	r3, [r7, #12]
   27d4c:	691b      	ldr	r3, [r3, #16]
   27d4e:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
   27d50:	683a      	ldr	r2, [r7, #0]
   27d52:	68b9      	ldr	r1, [r7, #8]
   27d54:	687b      	ldr	r3, [r7, #4]
   27d56:	0018      	movs	r0, r3
   27d58:	4b05      	ldr	r3, [pc, #20]	; (27d70 <rtc_calendar_get_time+0x88>)
   27d5a:	4798      	blx	r3
}
   27d5c:	46c0      	nop			; (mov r8, r8)
   27d5e:	46bd      	mov	sp, r7
   27d60:	b004      	add	sp, #16
   27d62:	bd80      	pop	{r7, pc}
   27d64:	ffff8000 	.word	0xffff8000
   27d68:	00027959 	.word	0x00027959
   27d6c:	ffffc000 	.word	0xffffc000
   27d70:	00027aed 	.word	0x00027aed

00027d74 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
   27d74:	b580      	push	{r7, lr}
   27d76:	b086      	sub	sp, #24
   27d78:	af00      	add	r7, sp, #0
   27d7a:	60f8      	str	r0, [r7, #12]
   27d7c:	60b9      	str	r1, [r7, #8]
   27d7e:	1dfb      	adds	r3, r7, #7
   27d80:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
   27d82:	68fb      	ldr	r3, [r7, #12]
   27d84:	681b      	ldr	r3, [r3, #0]
   27d86:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
   27d88:	1dfb      	adds	r3, r7, #7
   27d8a:	781b      	ldrb	r3, [r3, #0]
   27d8c:	2b01      	cmp	r3, #1
   27d8e:	d901      	bls.n	27d94 <rtc_calendar_set_alarm+0x20>
		return STATUS_ERR_INVALID_ARG;
   27d90:	2317      	movs	r3, #23
   27d92:	e021      	b.n	27dd8 <rtc_calendar_set_alarm+0x64>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
   27d94:	68ba      	ldr	r2, [r7, #8]
   27d96:	68fb      	ldr	r3, [r7, #12]
   27d98:	0011      	movs	r1, r2
   27d9a:	0018      	movs	r0, r3
   27d9c:	4b10      	ldr	r3, [pc, #64]	; (27de0 <rtc_calendar_set_alarm+0x6c>)
   27d9e:	4798      	blx	r3
   27da0:	0003      	movs	r3, r0
   27da2:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
   27da4:	46c0      	nop			; (mov r8, r8)
   27da6:	68fb      	ldr	r3, [r7, #12]
   27da8:	0018      	movs	r0, r3
   27daa:	4b0e      	ldr	r3, [pc, #56]	; (27de4 <rtc_calendar_set_alarm+0x70>)
   27dac:	4798      	blx	r3
   27dae:	1e03      	subs	r3, r0, #0
   27db0:	d1f9      	bne.n	27da6 <rtc_calendar_set_alarm+0x32>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
   27db2:	1dfb      	adds	r3, r7, #7
   27db4:	781a      	ldrb	r2, [r3, #0]
   27db6:	697b      	ldr	r3, [r7, #20]
   27db8:	3203      	adds	r2, #3
   27dba:	00d2      	lsls	r2, r2, #3
   27dbc:	6939      	ldr	r1, [r7, #16]
   27dbe:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
   27dc0:	1dfb      	adds	r3, r7, #7
   27dc2:	781b      	ldrb	r3, [r3, #0]
   27dc4:	68ba      	ldr	r2, [r7, #8]
   27dc6:	7a11      	ldrb	r1, [r2, #8]
   27dc8:	697a      	ldr	r2, [r7, #20]
   27dca:	3303      	adds	r3, #3
   27dcc:	00db      	lsls	r3, r3, #3
   27dce:	18d3      	adds	r3, r2, r3
   27dd0:	3304      	adds	r3, #4
   27dd2:	1c0a      	adds	r2, r1, #0
   27dd4:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
   27dd6:	2300      	movs	r3, #0
}
   27dd8:	0018      	movs	r0, r3
   27dda:	46bd      	mov	sp, r7
   27ddc:	b006      	add	sp, #24
   27dde:	bd80      	pop	{r7, pc}
   27de0:	00027a65 	.word	0x00027a65
   27de4:	00027959 	.word	0x00027959

00027de8 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
   27de8:	b580      	push	{r7, lr}
   27dea:	b086      	sub	sp, #24
   27dec:	af00      	add	r7, sp, #0
   27dee:	6078      	str	r0, [r7, #4]
	struct rtc_module *module = _rtc_instance[instance_index];
   27df0:	4b28      	ldr	r3, [pc, #160]	; (27e94 <_rtc_interrupt_handler+0xac>)
   27df2:	687a      	ldr	r2, [r7, #4]
   27df4:	0092      	lsls	r2, r2, #2
   27df6:	58d3      	ldr	r3, [r2, r3]
   27df8:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
   27dfa:	697b      	ldr	r3, [r7, #20]
   27dfc:	681b      	ldr	r3, [r3, #0]
   27dfe:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
   27e00:	230e      	movs	r3, #14
   27e02:	18fb      	adds	r3, r7, r3
   27e04:	697a      	ldr	r2, [r7, #20]
   27e06:	8a52      	ldrh	r2, [r2, #18]
   27e08:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
   27e0a:	697b      	ldr	r3, [r7, #20]
   27e0c:	8a1b      	ldrh	r3, [r3, #16]
   27e0e:	b29a      	uxth	r2, r3
   27e10:	230e      	movs	r3, #14
   27e12:	18fb      	adds	r3, r7, r3
   27e14:	210e      	movs	r1, #14
   27e16:	1879      	adds	r1, r7, r1
   27e18:	8809      	ldrh	r1, [r1, #0]
   27e1a:	400a      	ands	r2, r1
   27e1c:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
   27e1e:	693b      	ldr	r3, [r7, #16]
   27e20:	7a1b      	ldrb	r3, [r3, #8]
   27e22:	b2da      	uxtb	r2, r3
   27e24:	230c      	movs	r3, #12
   27e26:	18fb      	adds	r3, r7, r3
   27e28:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
   27e2a:	693b      	ldr	r3, [r7, #16]
   27e2c:	79db      	ldrb	r3, [r3, #7]
   27e2e:	b2db      	uxtb	r3, r3
   27e30:	b29a      	uxth	r2, r3
   27e32:	230c      	movs	r3, #12
   27e34:	18fb      	adds	r3, r7, r3
   27e36:	210c      	movs	r1, #12
   27e38:	1879      	adds	r1, r7, r1
   27e3a:	8809      	ldrh	r1, [r1, #0]
   27e3c:	400a      	ands	r2, r1
   27e3e:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
   27e40:	230c      	movs	r3, #12
   27e42:	18fb      	adds	r3, r7, r3
   27e44:	881b      	ldrh	r3, [r3, #0]
   27e46:	2280      	movs	r2, #128	; 0x80
   27e48:	4013      	ands	r3, r2
   27e4a:	d00c      	beq.n	27e66 <_rtc_interrupt_handler+0x7e>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
   27e4c:	230e      	movs	r3, #14
   27e4e:	18fb      	adds	r3, r7, r3
   27e50:	881b      	ldrh	r3, [r3, #0]
   27e52:	2202      	movs	r2, #2
   27e54:	4013      	ands	r3, r2
   27e56:	d002      	beq.n	27e5e <_rtc_interrupt_handler+0x76>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
   27e58:	697b      	ldr	r3, [r7, #20]
   27e5a:	68db      	ldr	r3, [r3, #12]
   27e5c:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
   27e5e:	693b      	ldr	r3, [r7, #16]
   27e60:	2280      	movs	r2, #128	; 0x80
   27e62:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
   27e64:	e011      	b.n	27e8a <_rtc_interrupt_handler+0xa2>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
   27e66:	230c      	movs	r3, #12
   27e68:	18fb      	adds	r3, r7, r3
   27e6a:	881b      	ldrh	r3, [r3, #0]
   27e6c:	2201      	movs	r2, #1
   27e6e:	4013      	ands	r3, r2
   27e70:	d00b      	beq.n	27e8a <_rtc_interrupt_handler+0xa2>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
   27e72:	230e      	movs	r3, #14
   27e74:	18fb      	adds	r3, r7, r3
   27e76:	881b      	ldrh	r3, [r3, #0]
   27e78:	2201      	movs	r2, #1
   27e7a:	4013      	ands	r3, r2
   27e7c:	d002      	beq.n	27e84 <_rtc_interrupt_handler+0x9c>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
   27e7e:	697b      	ldr	r3, [r7, #20]
   27e80:	689b      	ldr	r3, [r3, #8]
   27e82:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
   27e84:	693b      	ldr	r3, [r7, #16]
   27e86:	2201      	movs	r2, #1
   27e88:	721a      	strb	r2, [r3, #8]
}
   27e8a:	46c0      	nop			; (mov r8, r8)
   27e8c:	46bd      	mov	sp, r7
   27e8e:	b006      	add	sp, #24
   27e90:	bd80      	pop	{r7, pc}
   27e92:	46c0      	nop			; (mov r8, r8)
   27e94:	20005c54 	.word	0x20005c54

00027e98 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
   27e98:	b580      	push	{r7, lr}
   27e9a:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
   27e9c:	2000      	movs	r0, #0
   27e9e:	4b02      	ldr	r3, [pc, #8]	; (27ea8 <RTC_Handler+0x10>)
   27ea0:	4798      	blx	r3
}
   27ea2:	46c0      	nop			; (mov r8, r8)
   27ea4:	46bd      	mov	sp, r7
   27ea6:	bd80      	pop	{r7, pc}
   27ea8:	00027de9 	.word	0x00027de9

00027eac <system_gclk_chan_get_config_defaults>:
{
   27eac:	b580      	push	{r7, lr}
   27eae:	b082      	sub	sp, #8
   27eb0:	af00      	add	r7, sp, #0
   27eb2:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   27eb4:	687b      	ldr	r3, [r7, #4]
   27eb6:	2200      	movs	r2, #0
   27eb8:	701a      	strb	r2, [r3, #0]
}
   27eba:	46c0      	nop			; (mov r8, r8)
   27ebc:	46bd      	mov	sp, r7
   27ebe:	b002      	add	sp, #8
   27ec0:	bd80      	pop	{r7, pc}

00027ec2 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
   27ec2:	b5f0      	push	{r4, r5, r6, r7, lr}
   27ec4:	b08d      	sub	sp, #52	; 0x34
   27ec6:	af00      	add	r7, sp, #0
   27ec8:	60b8      	str	r0, [r7, #8]
   27eca:	60f9      	str	r1, [r7, #12]
   27ecc:	603a      	str	r2, [r7, #0]
   27ece:	607b      	str	r3, [r7, #4]
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
   27ed0:	2300      	movs	r3, #0
   27ed2:	2400      	movs	r4, #0
   27ed4:	623b      	str	r3, [r7, #32]
   27ed6:	627c      	str	r4, [r7, #36]	; 0x24
   27ed8:	2300      	movs	r3, #0
   27eda:	2400      	movs	r4, #0
   27edc:	61bb      	str	r3, [r7, #24]
   27ede:	61fc      	str	r4, [r7, #28]
	for (i = 63; i >= 0; i--) {
   27ee0:	233f      	movs	r3, #63	; 0x3f
   27ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
   27ee4:	e053      	b.n	27f8e <long_division+0xcc>
		bit_shift = (uint64_t)1 << i;
   27ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27ee8:	3b20      	subs	r3, #32
   27eea:	2b00      	cmp	r3, #0
   27eec:	db04      	blt.n	27ef8 <long_division+0x36>
   27eee:	2201      	movs	r2, #1
   27ef0:	409a      	lsls	r2, r3
   27ef2:	0013      	movs	r3, r2
   27ef4:	617b      	str	r3, [r7, #20]
   27ef6:	e00b      	b.n	27f10 <long_division+0x4e>
   27ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27efa:	2220      	movs	r2, #32
   27efc:	1ad3      	subs	r3, r2, r3
   27efe:	2201      	movs	r2, #1
   27f00:	40da      	lsrs	r2, r3
   27f02:	0013      	movs	r3, r2
   27f04:	2100      	movs	r1, #0
   27f06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   27f08:	4091      	lsls	r1, r2
   27f0a:	000a      	movs	r2, r1
   27f0c:	4313      	orrs	r3, r2
   27f0e:	617b      	str	r3, [r7, #20]
   27f10:	2201      	movs	r2, #1
   27f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27f14:	409a      	lsls	r2, r3
   27f16:	0013      	movs	r3, r2
   27f18:	613b      	str	r3, [r7, #16]

		r = r << 1;
   27f1a:	69bb      	ldr	r3, [r7, #24]
   27f1c:	69fc      	ldr	r4, [r7, #28]
   27f1e:	18db      	adds	r3, r3, r3
   27f20:	4164      	adcs	r4, r4
   27f22:	61bb      	str	r3, [r7, #24]
   27f24:	61fc      	str	r4, [r7, #28]

		if (n & bit_shift) {
   27f26:	68bb      	ldr	r3, [r7, #8]
   27f28:	693a      	ldr	r2, [r7, #16]
   27f2a:	401a      	ands	r2, r3
   27f2c:	0015      	movs	r5, r2
   27f2e:	68fb      	ldr	r3, [r7, #12]
   27f30:	697a      	ldr	r2, [r7, #20]
   27f32:	401a      	ands	r2, r3
   27f34:	0016      	movs	r6, r2
   27f36:	002b      	movs	r3, r5
   27f38:	4333      	orrs	r3, r6
   27f3a:	d007      	beq.n	27f4c <long_division+0x8a>
			r |= 0x01;
   27f3c:	69bb      	ldr	r3, [r7, #24]
   27f3e:	2201      	movs	r2, #1
   27f40:	4313      	orrs	r3, r2
   27f42:	61bb      	str	r3, [r7, #24]
   27f44:	69fb      	ldr	r3, [r7, #28]
   27f46:	2200      	movs	r2, #0
   27f48:	4313      	orrs	r3, r2
   27f4a:	61fb      	str	r3, [r7, #28]
		}

		if (r >= d) {
   27f4c:	687a      	ldr	r2, [r7, #4]
   27f4e:	69fb      	ldr	r3, [r7, #28]
   27f50:	429a      	cmp	r2, r3
   27f52:	d819      	bhi.n	27f88 <long_division+0xc6>
   27f54:	687a      	ldr	r2, [r7, #4]
   27f56:	69fb      	ldr	r3, [r7, #28]
   27f58:	429a      	cmp	r2, r3
   27f5a:	d103      	bne.n	27f64 <long_division+0xa2>
   27f5c:	683a      	ldr	r2, [r7, #0]
   27f5e:	69bb      	ldr	r3, [r7, #24]
   27f60:	429a      	cmp	r2, r3
   27f62:	d811      	bhi.n	27f88 <long_division+0xc6>
			r = r - d;
   27f64:	69b9      	ldr	r1, [r7, #24]
   27f66:	69fa      	ldr	r2, [r7, #28]
   27f68:	683b      	ldr	r3, [r7, #0]
   27f6a:	687c      	ldr	r4, [r7, #4]
   27f6c:	1ac9      	subs	r1, r1, r3
   27f6e:	41a2      	sbcs	r2, r4
   27f70:	000b      	movs	r3, r1
   27f72:	0014      	movs	r4, r2
   27f74:	61bb      	str	r3, [r7, #24]
   27f76:	61fc      	str	r4, [r7, #28]
			q |= bit_shift;
   27f78:	6a3a      	ldr	r2, [r7, #32]
   27f7a:	693b      	ldr	r3, [r7, #16]
   27f7c:	4313      	orrs	r3, r2
   27f7e:	623b      	str	r3, [r7, #32]
   27f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   27f82:	697b      	ldr	r3, [r7, #20]
   27f84:	4313      	orrs	r3, r2
   27f86:	627b      	str	r3, [r7, #36]	; 0x24
	for (i = 63; i >= 0; i--) {
   27f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27f8a:	3b01      	subs	r3, #1
   27f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   27f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   27f90:	2b00      	cmp	r3, #0
   27f92:	daa8      	bge.n	27ee6 <long_division+0x24>
		}
	}

	return q;
   27f94:	6a3b      	ldr	r3, [r7, #32]
   27f96:	6a7c      	ldr	r4, [r7, #36]	; 0x24
}
   27f98:	0018      	movs	r0, r3
   27f9a:	0021      	movs	r1, r4
   27f9c:	46bd      	mov	sp, r7
   27f9e:	b00d      	add	sp, #52	; 0x34
   27fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}

00027fa2 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
   27fa2:	b580      	push	{r7, lr}
   27fa4:	b086      	sub	sp, #24
   27fa6:	af00      	add	r7, sp, #0
   27fa8:	60f8      	str	r0, [r7, #12]
   27faa:	60b9      	str	r1, [r7, #8]
   27fac:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
   27fae:	2316      	movs	r3, #22
   27fb0:	18fb      	adds	r3, r7, r3
   27fb2:	2200      	movs	r2, #0
   27fb4:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
   27fb6:	68bb      	ldr	r3, [r7, #8]
   27fb8:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
   27fba:	68bb      	ldr	r3, [r7, #8]
   27fbc:	085a      	lsrs	r2, r3, #1
   27fbe:	68fb      	ldr	r3, [r7, #12]
   27fc0:	429a      	cmp	r2, r3
   27fc2:	d201      	bcs.n	27fc8 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   27fc4:	2340      	movs	r3, #64	; 0x40
   27fc6:	e026      	b.n	28016 <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
   27fc8:	68bb      	ldr	r3, [r7, #8]
   27fca:	085b      	lsrs	r3, r3, #1
   27fcc:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
   27fce:	e00a      	b.n	27fe6 <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
   27fd0:	693a      	ldr	r2, [r7, #16]
   27fd2:	68fb      	ldr	r3, [r7, #12]
   27fd4:	1ad3      	subs	r3, r2, r3
   27fd6:	613b      	str	r3, [r7, #16]
		baud_calculated++;
   27fd8:	2316      	movs	r3, #22
   27fda:	18fb      	adds	r3, r7, r3
   27fdc:	881a      	ldrh	r2, [r3, #0]
   27fde:	2316      	movs	r3, #22
   27fe0:	18fb      	adds	r3, r7, r3
   27fe2:	3201      	adds	r2, #1
   27fe4:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
   27fe6:	693a      	ldr	r2, [r7, #16]
   27fe8:	68fb      	ldr	r3, [r7, #12]
   27fea:	429a      	cmp	r2, r3
   27fec:	d2f0      	bcs.n	27fd0 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
   27fee:	2316      	movs	r3, #22
   27ff0:	18fb      	adds	r3, r7, r3
   27ff2:	2216      	movs	r2, #22
   27ff4:	18ba      	adds	r2, r7, r2
   27ff6:	8812      	ldrh	r2, [r2, #0]
   27ff8:	3a01      	subs	r2, #1
   27ffa:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
   27ffc:	2316      	movs	r3, #22
   27ffe:	18fb      	adds	r3, r7, r3
   28000:	881b      	ldrh	r3, [r3, #0]
   28002:	2bff      	cmp	r3, #255	; 0xff
   28004:	d901      	bls.n	2800a <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   28006:	2340      	movs	r3, #64	; 0x40
   28008:	e005      	b.n	28016 <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
   2800a:	687b      	ldr	r3, [r7, #4]
   2800c:	2216      	movs	r2, #22
   2800e:	18ba      	adds	r2, r7, r2
   28010:	8812      	ldrh	r2, [r2, #0]
   28012:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
   28014:	2300      	movs	r3, #0
	}
}
   28016:	0018      	movs	r0, r3
   28018:	46bd      	mov	sp, r7
   2801a:	b006      	add	sp, #24
   2801c:	bd80      	pop	{r7, pc}
	...

00028020 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
   28020:	b5f0      	push	{r4, r5, r6, r7, lr}
   28022:	b0a1      	sub	sp, #132	; 0x84
   28024:	af00      	add	r7, sp, #0
   28026:	64f8      	str	r0, [r7, #76]	; 0x4c
   28028:	64b9      	str	r1, [r7, #72]	; 0x48
   2802a:	647a      	str	r2, [r7, #68]	; 0x44
   2802c:	2243      	movs	r2, #67	; 0x43
   2802e:	18ba      	adds	r2, r7, r2
   28030:	7013      	strb	r3, [r2, #0]
	/* Temporary variables  */
	uint64_t ratio = 0;
   28032:	2300      	movs	r3, #0
   28034:	2400      	movs	r4, #0
   28036:	673b      	str	r3, [r7, #112]	; 0x70
   28038:	677c      	str	r4, [r7, #116]	; 0x74
	uint64_t scale = 0;
   2803a:	2300      	movs	r3, #0
   2803c:	2400      	movs	r4, #0
   2803e:	66bb      	str	r3, [r7, #104]	; 0x68
   28040:	66fc      	str	r4, [r7, #108]	; 0x6c
	uint64_t baud_calculated = 0;
   28042:	2300      	movs	r3, #0
   28044:	2400      	movs	r4, #0
   28046:	67bb      	str	r3, [r7, #120]	; 0x78
   28048:	67fc      	str	r4, [r7, #124]	; 0x7c
	uint8_t baud_fp;
	uint32_t baud_int = 0;
   2804a:	2300      	movs	r3, #0
   2804c:	667b      	str	r3, [r7, #100]	; 0x64
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
   2804e:	2358      	movs	r3, #88	; 0x58
   28050:	2240      	movs	r2, #64	; 0x40
   28052:	4694      	mov	ip, r2
   28054:	44bc      	add	ip, r7
   28056:	4463      	add	r3, ip
   28058:	781a      	ldrb	r2, [r3, #0]
   2805a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2805c:	435a      	muls	r2, r3
   2805e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   28060:	429a      	cmp	r2, r3
   28062:	d901      	bls.n	28068 <_sercom_get_async_baud_val+0x48>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   28064:	2340      	movs	r3, #64	; 0x40
   28066:	e0b3      	b.n	281d0 <_sercom_get_async_baud_val+0x1b0>
	}

	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
   28068:	2343      	movs	r3, #67	; 0x43
   2806a:	18fb      	adds	r3, r7, r3
   2806c:	781b      	ldrb	r3, [r3, #0]
   2806e:	2b00      	cmp	r3, #0
   28070:	d13d      	bne.n	280ee <_sercom_get_async_baud_val+0xce>
		/* Calculate the BAUD value */
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
   28072:	2358      	movs	r3, #88	; 0x58
   28074:	2240      	movs	r2, #64	; 0x40
   28076:	4694      	mov	ip, r2
   28078:	44bc      	add	ip, r7
   2807a:	4463      	add	r3, ip
   2807c:	781b      	ldrb	r3, [r3, #0]
   2807e:	b2db      	uxtb	r3, r3
   28080:	613b      	str	r3, [r7, #16]
   28082:	2300      	movs	r3, #0
   28084:	617b      	str	r3, [r7, #20]
   28086:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   28088:	60bb      	str	r3, [r7, #8]
   2808a:	2300      	movs	r3, #0
   2808c:	60fb      	str	r3, [r7, #12]
   2808e:	4c52      	ldr	r4, [pc, #328]	; (281d8 <_sercom_get_async_baud_val+0x1b8>)
   28090:	68ba      	ldr	r2, [r7, #8]
   28092:	68fb      	ldr	r3, [r7, #12]
   28094:	6938      	ldr	r0, [r7, #16]
   28096:	6979      	ldr	r1, [r7, #20]
   28098:	47a0      	blx	r4
   2809a:	0003      	movs	r3, r0
   2809c:	000c      	movs	r4, r1
   2809e:	001b      	movs	r3, r3
   280a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   280a2:	2300      	movs	r3, #0
   280a4:	65bb      	str	r3, [r7, #88]	; 0x58
		ratio = long_division(temp1, peripheral_clock);
   280a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   280a8:	603b      	str	r3, [r7, #0]
   280aa:	2300      	movs	r3, #0
   280ac:	607b      	str	r3, [r7, #4]
   280ae:	6db8      	ldr	r0, [r7, #88]	; 0x58
   280b0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
   280b2:	683a      	ldr	r2, [r7, #0]
   280b4:	687b      	ldr	r3, [r7, #4]
   280b6:	4c49      	ldr	r4, [pc, #292]	; (281dc <_sercom_get_async_baud_val+0x1bc>)
   280b8:	47a0      	blx	r4
   280ba:	0003      	movs	r3, r0
   280bc:	000c      	movs	r4, r1
   280be:	673b      	str	r3, [r7, #112]	; 0x70
   280c0:	677c      	str	r4, [r7, #116]	; 0x74
		scale = ((uint64_t)1 << SHIFT) - ratio;
   280c2:	2100      	movs	r1, #0
   280c4:	2201      	movs	r2, #1
   280c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   280c8:	6f7c      	ldr	r4, [r7, #116]	; 0x74
   280ca:	1ac9      	subs	r1, r1, r3
   280cc:	41a2      	sbcs	r2, r4
   280ce:	000b      	movs	r3, r1
   280d0:	0014      	movs	r4, r2
   280d2:	66bb      	str	r3, [r7, #104]	; 0x68
   280d4:	66fc      	str	r4, [r7, #108]	; 0x6c
		baud_calculated = (65536 * scale) >> SHIFT;
   280d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   280d8:	0c1b      	lsrs	r3, r3, #16
   280da:	6efa      	ldr	r2, [r7, #108]	; 0x6c
   280dc:	0416      	lsls	r6, r2, #16
   280de:	431e      	orrs	r6, r3
   280e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   280e2:	041d      	lsls	r5, r3, #16
   280e4:	0033      	movs	r3, r6
   280e6:	67bb      	str	r3, [r7, #120]	; 0x78
   280e8:	2300      	movs	r3, #0
   280ea:	67fb      	str	r3, [r7, #124]	; 0x7c
   280ec:	e06a      	b.n	281c4 <_sercom_get_async_baud_val+0x1a4>
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
   280ee:	2343      	movs	r3, #67	; 0x43
   280f0:	18fb      	adds	r3, r7, r3
   280f2:	781b      	ldrb	r3, [r3, #0]
   280f4:	2b01      	cmp	r3, #1
   280f6:	d165      	bne.n	281c4 <_sercom_get_async_baud_val+0x1a4>
		temp1 = ((uint64_t)baudrate * sample_num);
   280f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   280fa:	633b      	str	r3, [r7, #48]	; 0x30
   280fc:	2300      	movs	r3, #0
   280fe:	637b      	str	r3, [r7, #52]	; 0x34
   28100:	2358      	movs	r3, #88	; 0x58
   28102:	2240      	movs	r2, #64	; 0x40
   28104:	4694      	mov	ip, r2
   28106:	44bc      	add	ip, r7
   28108:	4463      	add	r3, ip
   2810a:	781b      	ldrb	r3, [r3, #0]
   2810c:	b2db      	uxtb	r3, r3
   2810e:	62bb      	str	r3, [r7, #40]	; 0x28
   28110:	2300      	movs	r3, #0
   28112:	62fb      	str	r3, [r7, #44]	; 0x2c
   28114:	4c30      	ldr	r4, [pc, #192]	; (281d8 <_sercom_get_async_baud_val+0x1b8>)
   28116:	6aba      	ldr	r2, [r7, #40]	; 0x28
   28118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2811a:	6b38      	ldr	r0, [r7, #48]	; 0x30
   2811c:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2811e:	47a0      	blx	r4
   28120:	0003      	movs	r3, r0
   28122:	000c      	movs	r4, r1
   28124:	65bb      	str	r3, [r7, #88]	; 0x58
   28126:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_int = long_division( peripheral_clock, temp1);
   28128:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   2812a:	623b      	str	r3, [r7, #32]
   2812c:	2300      	movs	r3, #0
   2812e:	627b      	str	r3, [r7, #36]	; 0x24
   28130:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   28132:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   28134:	001a      	movs	r2, r3
   28136:	0023      	movs	r3, r4
   28138:	6a38      	ldr	r0, [r7, #32]
   2813a:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2813c:	4c27      	ldr	r4, [pc, #156]	; (281dc <_sercom_get_async_baud_val+0x1bc>)
   2813e:	47a0      	blx	r4
   28140:	0003      	movs	r3, r0
   28142:	000c      	movs	r4, r1
   28144:	667b      	str	r3, [r7, #100]	; 0x64
		if(baud_int > BAUD_INT_MAX) {
   28146:	6e7a      	ldr	r2, [r7, #100]	; 0x64
   28148:	2380      	movs	r3, #128	; 0x80
   2814a:	019b      	lsls	r3, r3, #6
   2814c:	429a      	cmp	r2, r3
   2814e:	d901      	bls.n	28154 <_sercom_get_async_baud_val+0x134>
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
   28150:	2340      	movs	r3, #64	; 0x40
   28152:	e03d      	b.n	281d0 <_sercom_get_async_baud_val+0x1b0>
		}
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
   28154:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   28156:	61bb      	str	r3, [r7, #24]
   28158:	2300      	movs	r3, #0
   2815a:	61fb      	str	r3, [r7, #28]
   2815c:	69b9      	ldr	r1, [r7, #24]
   2815e:	69fa      	ldr	r2, [r7, #28]
   28160:	000b      	movs	r3, r1
   28162:	0f5b      	lsrs	r3, r3, #29
   28164:	0010      	movs	r0, r2
   28166:	00c0      	lsls	r0, r0, #3
   28168:	63f8      	str	r0, [r7, #60]	; 0x3c
   2816a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
   2816c:	4318      	orrs	r0, r3
   2816e:	63f8      	str	r0, [r7, #60]	; 0x3c
   28170:	000b      	movs	r3, r1
   28172:	00db      	lsls	r3, r3, #3
   28174:	63bb      	str	r3, [r7, #56]	; 0x38
   28176:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   28178:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   2817a:	001a      	movs	r2, r3
   2817c:	0023      	movs	r3, r4
   2817e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
   28180:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   28182:	4c16      	ldr	r4, [pc, #88]	; (281dc <_sercom_get_async_baud_val+0x1bc>)
   28184:	47a0      	blx	r4
   28186:	0003      	movs	r3, r0
   28188:	000c      	movs	r4, r1
   2818a:	65bb      	str	r3, [r7, #88]	; 0x58
   2818c:	65fc      	str	r4, [r7, #92]	; 0x5c
		baud_fp = temp1 - 8 * baud_int;
   2818e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   28190:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
   28192:	b2d9      	uxtb	r1, r3
   28194:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   28196:	b2db      	uxtb	r3, r3
   28198:	00db      	lsls	r3, r3, #3
   2819a:	b2da      	uxtb	r2, r3
   2819c:	2317      	movs	r3, #23
   2819e:	2040      	movs	r0, #64	; 0x40
   281a0:	4684      	mov	ip, r0
   281a2:	44bc      	add	ip, r7
   281a4:	4463      	add	r3, ip
   281a6:	1a8a      	subs	r2, r1, r2
   281a8:	701a      	strb	r2, [r3, #0]
		baud_calculated = baud_int | (baud_fp << 13);
   281aa:	2317      	movs	r3, #23
   281ac:	2240      	movs	r2, #64	; 0x40
   281ae:	4694      	mov	ip, r2
   281b0:	44bc      	add	ip, r7
   281b2:	4463      	add	r3, ip
   281b4:	781b      	ldrb	r3, [r3, #0]
   281b6:	035b      	lsls	r3, r3, #13
   281b8:	001a      	movs	r2, r3
   281ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   281bc:	4313      	orrs	r3, r2
   281be:	67bb      	str	r3, [r7, #120]	; 0x78
   281c0:	2300      	movs	r3, #0
   281c2:	67fb      	str	r3, [r7, #124]	; 0x7c
	}

	*baudval = baud_calculated;
   281c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
   281c6:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
   281c8:	b29a      	uxth	r2, r3
   281ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   281cc:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
   281ce:	2300      	movs	r3, #0
}
   281d0:	0018      	movs	r0, r3
   281d2:	46bd      	mov	sp, r7
   281d4:	b021      	add	sp, #132	; 0x84
   281d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   281d8:	00033b41 	.word	0x00033b41
   281dc:	00027ec3 	.word	0x00027ec3

000281e0 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
   281e0:	b580      	push	{r7, lr}
   281e2:	b084      	sub	sp, #16
   281e4:	af00      	add	r7, sp, #0
   281e6:	0002      	movs	r2, r0
   281e8:	1dfb      	adds	r3, r7, #7
   281ea:	701a      	strb	r2, [r3, #0]
   281ec:	1dbb      	adds	r3, r7, #6
   281ee:	1c0a      	adds	r2, r1, #0
   281f0:	701a      	strb	r2, [r3, #0]
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
   281f2:	4b1a      	ldr	r3, [pc, #104]	; (2825c <sercom_set_gclk_generator+0x7c>)
   281f4:	781b      	ldrb	r3, [r3, #0]
   281f6:	2201      	movs	r2, #1
   281f8:	4053      	eors	r3, r2
   281fa:	b2db      	uxtb	r3, r3
   281fc:	2b00      	cmp	r3, #0
   281fe:	d103      	bne.n	28208 <sercom_set_gclk_generator+0x28>
   28200:	1dbb      	adds	r3, r7, #6
   28202:	781b      	ldrb	r3, [r3, #0]
   28204:	2b00      	cmp	r3, #0
   28206:	d01b      	beq.n	28240 <sercom_set_gclk_generator+0x60>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   28208:	230c      	movs	r3, #12
   2820a:	18fb      	adds	r3, r7, r3
   2820c:	0018      	movs	r0, r3
   2820e:	4b14      	ldr	r3, [pc, #80]	; (28260 <sercom_set_gclk_generator+0x80>)
   28210:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
   28212:	230c      	movs	r3, #12
   28214:	18fb      	adds	r3, r7, r3
   28216:	1dfa      	adds	r2, r7, #7
   28218:	7812      	ldrb	r2, [r2, #0]
   2821a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
   2821c:	230c      	movs	r3, #12
   2821e:	18fb      	adds	r3, r7, r3
   28220:	0019      	movs	r1, r3
   28222:	2013      	movs	r0, #19
   28224:	4b0f      	ldr	r3, [pc, #60]	; (28264 <sercom_set_gclk_generator+0x84>)
   28226:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
   28228:	2013      	movs	r0, #19
   2822a:	4b0f      	ldr	r3, [pc, #60]	; (28268 <sercom_set_gclk_generator+0x88>)
   2822c:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
   2822e:	4b0b      	ldr	r3, [pc, #44]	; (2825c <sercom_set_gclk_generator+0x7c>)
   28230:	1dfa      	adds	r2, r7, #7
   28232:	7812      	ldrb	r2, [r2, #0]
   28234:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
   28236:	4b09      	ldr	r3, [pc, #36]	; (2825c <sercom_set_gclk_generator+0x7c>)
   28238:	2201      	movs	r2, #1
   2823a:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
   2823c:	2300      	movs	r3, #0
   2823e:	e008      	b.n	28252 <sercom_set_gclk_generator+0x72>
	} else if (generator_source == _sercom_config.generator_source) {
   28240:	4b06      	ldr	r3, [pc, #24]	; (2825c <sercom_set_gclk_generator+0x7c>)
   28242:	785b      	ldrb	r3, [r3, #1]
   28244:	1dfa      	adds	r2, r7, #7
   28246:	7812      	ldrb	r2, [r2, #0]
   28248:	429a      	cmp	r2, r3
   2824a:	d101      	bne.n	28250 <sercom_set_gclk_generator+0x70>
		/* Return status OK if same config */
		return STATUS_OK;
   2824c:	2300      	movs	r3, #0
   2824e:	e000      	b.n	28252 <sercom_set_gclk_generator+0x72>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
   28250:	231d      	movs	r3, #29
}
   28252:	0018      	movs	r0, r3
   28254:	46bd      	mov	sp, r7
   28256:	b004      	add	sp, #16
   28258:	bd80      	pop	{r7, pc}
   2825a:	46c0      	nop			; (mov r8, r8)
   2825c:	200042c0 	.word	0x200042c0
   28260:	00027ead 	.word	0x00027ead
   28264:	0002acb9 	.word	0x0002acb9
   28268:	0002acfd 	.word	0x0002acfd

0002826c <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
   2826c:	b580      	push	{r7, lr}
   2826e:	b082      	sub	sp, #8
   28270:	af00      	add	r7, sp, #0
   28272:	6078      	str	r0, [r7, #4]
   28274:	000a      	movs	r2, r1
   28276:	1cfb      	adds	r3, r7, #3
   28278:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
   2827a:	687b      	ldr	r3, [r7, #4]
   2827c:	4a4d      	ldr	r2, [pc, #308]	; (283b4 <_sercom_get_default_pad+0x148>)
   2827e:	4293      	cmp	r3, r2
   28280:	d03f      	beq.n	28302 <_sercom_get_default_pad+0x96>
   28282:	4a4c      	ldr	r2, [pc, #304]	; (283b4 <_sercom_get_default_pad+0x148>)
   28284:	4293      	cmp	r3, r2
   28286:	d806      	bhi.n	28296 <_sercom_get_default_pad+0x2a>
   28288:	4a4b      	ldr	r2, [pc, #300]	; (283b8 <_sercom_get_default_pad+0x14c>)
   2828a:	4293      	cmp	r3, r2
   2828c:	d00f      	beq.n	282ae <_sercom_get_default_pad+0x42>
   2828e:	4a4b      	ldr	r2, [pc, #300]	; (283bc <_sercom_get_default_pad+0x150>)
   28290:	4293      	cmp	r3, r2
   28292:	d021      	beq.n	282d8 <_sercom_get_default_pad+0x6c>
   28294:	e089      	b.n	283aa <_sercom_get_default_pad+0x13e>
   28296:	4a4a      	ldr	r2, [pc, #296]	; (283c0 <_sercom_get_default_pad+0x154>)
   28298:	4293      	cmp	r3, r2
   2829a:	d100      	bne.n	2829e <_sercom_get_default_pad+0x32>
   2829c:	e05b      	b.n	28356 <_sercom_get_default_pad+0xea>
   2829e:	4a49      	ldr	r2, [pc, #292]	; (283c4 <_sercom_get_default_pad+0x158>)
   282a0:	4293      	cmp	r3, r2
   282a2:	d100      	bne.n	282a6 <_sercom_get_default_pad+0x3a>
   282a4:	e06c      	b.n	28380 <_sercom_get_default_pad+0x114>
   282a6:	4a48      	ldr	r2, [pc, #288]	; (283c8 <_sercom_get_default_pad+0x15c>)
   282a8:	4293      	cmp	r3, r2
   282aa:	d03f      	beq.n	2832c <_sercom_get_default_pad+0xc0>
   282ac:	e07d      	b.n	283aa <_sercom_get_default_pad+0x13e>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
   282ae:	1cfb      	adds	r3, r7, #3
   282b0:	781b      	ldrb	r3, [r3, #0]
   282b2:	2b01      	cmp	r3, #1
   282b4:	d00a      	beq.n	282cc <_sercom_get_default_pad+0x60>
   282b6:	dc02      	bgt.n	282be <_sercom_get_default_pad+0x52>
   282b8:	2b00      	cmp	r3, #0
   282ba:	d005      	beq.n	282c8 <_sercom_get_default_pad+0x5c>
   282bc:	e075      	b.n	283aa <_sercom_get_default_pad+0x13e>
   282be:	2b02      	cmp	r3, #2
   282c0:	d006      	beq.n	282d0 <_sercom_get_default_pad+0x64>
   282c2:	2b03      	cmp	r3, #3
   282c4:	d006      	beq.n	282d4 <_sercom_get_default_pad+0x68>
   282c6:	e070      	b.n	283aa <_sercom_get_default_pad+0x13e>
   282c8:	4b40      	ldr	r3, [pc, #256]	; (283cc <_sercom_get_default_pad+0x160>)
   282ca:	e06f      	b.n	283ac <_sercom_get_default_pad+0x140>
   282cc:	4b40      	ldr	r3, [pc, #256]	; (283d0 <_sercom_get_default_pad+0x164>)
   282ce:	e06d      	b.n	283ac <_sercom_get_default_pad+0x140>
   282d0:	4b40      	ldr	r3, [pc, #256]	; (283d4 <_sercom_get_default_pad+0x168>)
   282d2:	e06b      	b.n	283ac <_sercom_get_default_pad+0x140>
   282d4:	4b40      	ldr	r3, [pc, #256]	; (283d8 <_sercom_get_default_pad+0x16c>)
   282d6:	e069      	b.n	283ac <_sercom_get_default_pad+0x140>
   282d8:	1cfb      	adds	r3, r7, #3
   282da:	781b      	ldrb	r3, [r3, #0]
   282dc:	2b01      	cmp	r3, #1
   282de:	d00a      	beq.n	282f6 <_sercom_get_default_pad+0x8a>
   282e0:	dc02      	bgt.n	282e8 <_sercom_get_default_pad+0x7c>
   282e2:	2b00      	cmp	r3, #0
   282e4:	d005      	beq.n	282f2 <_sercom_get_default_pad+0x86>
   282e6:	e060      	b.n	283aa <_sercom_get_default_pad+0x13e>
   282e8:	2b02      	cmp	r3, #2
   282ea:	d006      	beq.n	282fa <_sercom_get_default_pad+0x8e>
   282ec:	2b03      	cmp	r3, #3
   282ee:	d006      	beq.n	282fe <_sercom_get_default_pad+0x92>
   282f0:	e05b      	b.n	283aa <_sercom_get_default_pad+0x13e>
   282f2:	2303      	movs	r3, #3
   282f4:	e05a      	b.n	283ac <_sercom_get_default_pad+0x140>
   282f6:	4b39      	ldr	r3, [pc, #228]	; (283dc <_sercom_get_default_pad+0x170>)
   282f8:	e058      	b.n	283ac <_sercom_get_default_pad+0x140>
   282fa:	4b39      	ldr	r3, [pc, #228]	; (283e0 <_sercom_get_default_pad+0x174>)
   282fc:	e056      	b.n	283ac <_sercom_get_default_pad+0x140>
   282fe:	4b39      	ldr	r3, [pc, #228]	; (283e4 <_sercom_get_default_pad+0x178>)
   28300:	e054      	b.n	283ac <_sercom_get_default_pad+0x140>
   28302:	1cfb      	adds	r3, r7, #3
   28304:	781b      	ldrb	r3, [r3, #0]
   28306:	2b01      	cmp	r3, #1
   28308:	d00a      	beq.n	28320 <_sercom_get_default_pad+0xb4>
   2830a:	dc02      	bgt.n	28312 <_sercom_get_default_pad+0xa6>
   2830c:	2b00      	cmp	r3, #0
   2830e:	d005      	beq.n	2831c <_sercom_get_default_pad+0xb0>
   28310:	e04b      	b.n	283aa <_sercom_get_default_pad+0x13e>
   28312:	2b02      	cmp	r3, #2
   28314:	d006      	beq.n	28324 <_sercom_get_default_pad+0xb8>
   28316:	2b03      	cmp	r3, #3
   28318:	d006      	beq.n	28328 <_sercom_get_default_pad+0xbc>
   2831a:	e046      	b.n	283aa <_sercom_get_default_pad+0x13e>
   2831c:	4b32      	ldr	r3, [pc, #200]	; (283e8 <_sercom_get_default_pad+0x17c>)
   2831e:	e045      	b.n	283ac <_sercom_get_default_pad+0x140>
   28320:	4b32      	ldr	r3, [pc, #200]	; (283ec <_sercom_get_default_pad+0x180>)
   28322:	e043      	b.n	283ac <_sercom_get_default_pad+0x140>
   28324:	4b32      	ldr	r3, [pc, #200]	; (283f0 <_sercom_get_default_pad+0x184>)
   28326:	e041      	b.n	283ac <_sercom_get_default_pad+0x140>
   28328:	4b32      	ldr	r3, [pc, #200]	; (283f4 <_sercom_get_default_pad+0x188>)
   2832a:	e03f      	b.n	283ac <_sercom_get_default_pad+0x140>
   2832c:	1cfb      	adds	r3, r7, #3
   2832e:	781b      	ldrb	r3, [r3, #0]
   28330:	2b01      	cmp	r3, #1
   28332:	d00a      	beq.n	2834a <_sercom_get_default_pad+0xde>
   28334:	dc02      	bgt.n	2833c <_sercom_get_default_pad+0xd0>
   28336:	2b00      	cmp	r3, #0
   28338:	d005      	beq.n	28346 <_sercom_get_default_pad+0xda>
   2833a:	e036      	b.n	283aa <_sercom_get_default_pad+0x13e>
   2833c:	2b02      	cmp	r3, #2
   2833e:	d006      	beq.n	2834e <_sercom_get_default_pad+0xe2>
   28340:	2b03      	cmp	r3, #3
   28342:	d006      	beq.n	28352 <_sercom_get_default_pad+0xe6>
   28344:	e031      	b.n	283aa <_sercom_get_default_pad+0x13e>
   28346:	4b2c      	ldr	r3, [pc, #176]	; (283f8 <_sercom_get_default_pad+0x18c>)
   28348:	e030      	b.n	283ac <_sercom_get_default_pad+0x140>
   2834a:	4b2c      	ldr	r3, [pc, #176]	; (283fc <_sercom_get_default_pad+0x190>)
   2834c:	e02e      	b.n	283ac <_sercom_get_default_pad+0x140>
   2834e:	4b2c      	ldr	r3, [pc, #176]	; (28400 <_sercom_get_default_pad+0x194>)
   28350:	e02c      	b.n	283ac <_sercom_get_default_pad+0x140>
   28352:	4b2c      	ldr	r3, [pc, #176]	; (28404 <_sercom_get_default_pad+0x198>)
   28354:	e02a      	b.n	283ac <_sercom_get_default_pad+0x140>
   28356:	1cfb      	adds	r3, r7, #3
   28358:	781b      	ldrb	r3, [r3, #0]
   2835a:	2b01      	cmp	r3, #1
   2835c:	d00a      	beq.n	28374 <_sercom_get_default_pad+0x108>
   2835e:	dc02      	bgt.n	28366 <_sercom_get_default_pad+0xfa>
   28360:	2b00      	cmp	r3, #0
   28362:	d005      	beq.n	28370 <_sercom_get_default_pad+0x104>
   28364:	e021      	b.n	283aa <_sercom_get_default_pad+0x13e>
   28366:	2b02      	cmp	r3, #2
   28368:	d006      	beq.n	28378 <_sercom_get_default_pad+0x10c>
   2836a:	2b03      	cmp	r3, #3
   2836c:	d006      	beq.n	2837c <_sercom_get_default_pad+0x110>
   2836e:	e01c      	b.n	283aa <_sercom_get_default_pad+0x13e>
   28370:	4b25      	ldr	r3, [pc, #148]	; (28408 <_sercom_get_default_pad+0x19c>)
   28372:	e01b      	b.n	283ac <_sercom_get_default_pad+0x140>
   28374:	4b25      	ldr	r3, [pc, #148]	; (2840c <_sercom_get_default_pad+0x1a0>)
   28376:	e019      	b.n	283ac <_sercom_get_default_pad+0x140>
   28378:	4b25      	ldr	r3, [pc, #148]	; (28410 <_sercom_get_default_pad+0x1a4>)
   2837a:	e017      	b.n	283ac <_sercom_get_default_pad+0x140>
   2837c:	4b25      	ldr	r3, [pc, #148]	; (28414 <_sercom_get_default_pad+0x1a8>)
   2837e:	e015      	b.n	283ac <_sercom_get_default_pad+0x140>
   28380:	1cfb      	adds	r3, r7, #3
   28382:	781b      	ldrb	r3, [r3, #0]
   28384:	2b01      	cmp	r3, #1
   28386:	d00a      	beq.n	2839e <_sercom_get_default_pad+0x132>
   28388:	dc02      	bgt.n	28390 <_sercom_get_default_pad+0x124>
   2838a:	2b00      	cmp	r3, #0
   2838c:	d005      	beq.n	2839a <_sercom_get_default_pad+0x12e>
   2838e:	e00c      	b.n	283aa <_sercom_get_default_pad+0x13e>
   28390:	2b02      	cmp	r3, #2
   28392:	d006      	beq.n	283a2 <_sercom_get_default_pad+0x136>
   28394:	2b03      	cmp	r3, #3
   28396:	d006      	beq.n	283a6 <_sercom_get_default_pad+0x13a>
   28398:	e007      	b.n	283aa <_sercom_get_default_pad+0x13e>
   2839a:	4b1f      	ldr	r3, [pc, #124]	; (28418 <_sercom_get_default_pad+0x1ac>)
   2839c:	e006      	b.n	283ac <_sercom_get_default_pad+0x140>
   2839e:	4b1f      	ldr	r3, [pc, #124]	; (2841c <_sercom_get_default_pad+0x1b0>)
   283a0:	e004      	b.n	283ac <_sercom_get_default_pad+0x140>
   283a2:	4b1f      	ldr	r3, [pc, #124]	; (28420 <_sercom_get_default_pad+0x1b4>)
   283a4:	e002      	b.n	283ac <_sercom_get_default_pad+0x140>
   283a6:	4b1f      	ldr	r3, [pc, #124]	; (28424 <_sercom_get_default_pad+0x1b8>)
   283a8:	e000      	b.n	283ac <_sercom_get_default_pad+0x140>
	}

	Assert(false);
	return 0;
   283aa:	2300      	movs	r3, #0
}
   283ac:	0018      	movs	r0, r3
   283ae:	46bd      	mov	sp, r7
   283b0:	b002      	add	sp, #8
   283b2:	bd80      	pop	{r7, pc}
   283b4:	42001000 	.word	0x42001000
   283b8:	42000800 	.word	0x42000800
   283bc:	42000c00 	.word	0x42000c00
   283c0:	42001800 	.word	0x42001800
   283c4:	42001c00 	.word	0x42001c00
   283c8:	42001400 	.word	0x42001400
   283cc:	00040003 	.word	0x00040003
   283d0:	00050003 	.word	0x00050003
   283d4:	00060003 	.word	0x00060003
   283d8:	00070003 	.word	0x00070003
   283dc:	00010003 	.word	0x00010003
   283e0:	001e0003 	.word	0x001e0003
   283e4:	001f0003 	.word	0x001f0003
   283e8:	00080003 	.word	0x00080003
   283ec:	00090003 	.word	0x00090003
   283f0:	000a0003 	.word	0x000a0003
   283f4:	000b0003 	.word	0x000b0003
   283f8:	00100003 	.word	0x00100003
   283fc:	00110003 	.word	0x00110003
   28400:	00120003 	.word	0x00120003
   28404:	00130003 	.word	0x00130003
   28408:	000c0003 	.word	0x000c0003
   2840c:	000d0003 	.word	0x000d0003
   28410:	000e0003 	.word	0x000e0003
   28414:	000f0003 	.word	0x000f0003
   28418:	00160003 	.word	0x00160003
   2841c:	00170003 	.word	0x00170003
   28420:	00180003 	.word	0x00180003
   28424:	00190003 	.word	0x00190003

00028428 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
   28428:	b590      	push	{r4, r7, lr}
   2842a:	b08b      	sub	sp, #44	; 0x2c
   2842c:	af00      	add	r7, sp, #0
   2842e:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
   28430:	230c      	movs	r3, #12
   28432:	18fb      	adds	r3, r7, r3
   28434:	4a0f      	ldr	r2, [pc, #60]	; (28474 <_sercom_get_sercom_inst_index+0x4c>)
   28436:	ca13      	ldmia	r2!, {r0, r1, r4}
   28438:	c313      	stmia	r3!, {r0, r1, r4}
   2843a:	ca13      	ldmia	r2!, {r0, r1, r4}
   2843c:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   2843e:	2300      	movs	r3, #0
   28440:	627b      	str	r3, [r7, #36]	; 0x24
   28442:	e00e      	b.n	28462 <_sercom_get_sercom_inst_index+0x3a>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
   28444:	230c      	movs	r3, #12
   28446:	18fb      	adds	r3, r7, r3
   28448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2844a:	0092      	lsls	r2, r2, #2
   2844c:	58d3      	ldr	r3, [r2, r3]
   2844e:	001a      	movs	r2, r3
   28450:	687b      	ldr	r3, [r7, #4]
   28452:	429a      	cmp	r2, r3
   28454:	d102      	bne.n	2845c <_sercom_get_sercom_inst_index+0x34>
			return i;
   28456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   28458:	b2db      	uxtb	r3, r3
   2845a:	e006      	b.n	2846a <_sercom_get_sercom_inst_index+0x42>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   2845c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2845e:	3301      	adds	r3, #1
   28460:	627b      	str	r3, [r7, #36]	; 0x24
   28462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   28464:	2b05      	cmp	r3, #5
   28466:	d9ed      	bls.n	28444 <_sercom_get_sercom_inst_index+0x1c>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
   28468:	2300      	movs	r3, #0
}
   2846a:	0018      	movs	r0, r3
   2846c:	46bd      	mov	sp, r7
   2846e:	b00b      	add	sp, #44	; 0x2c
   28470:	bd90      	pop	{r4, r7, pc}
   28472:	46c0      	nop			; (mov r8, r8)
   28474:	0003a5e4 	.word	0x0003a5e4

00028478 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
   28478:	b580      	push	{r7, lr}
   2847a:	b082      	sub	sp, #8
   2847c:	af00      	add	r7, sp, #0
   2847e:	0002      	movs	r2, r0
   28480:	1dfb      	adds	r3, r7, #7
   28482:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
   28484:	46c0      	nop			; (mov r8, r8)
   28486:	46bd      	mov	sp, r7
   28488:	b002      	add	sp, #8
   2848a:	bd80      	pop	{r7, pc}

0002848c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
   2848c:	b580      	push	{r7, lr}
   2848e:	b084      	sub	sp, #16
   28490:	af00      	add	r7, sp, #0
   28492:	0002      	movs	r2, r0
   28494:	6039      	str	r1, [r7, #0]
   28496:	1dfb      	adds	r3, r7, #7
   28498:	701a      	strb	r2, [r3, #0]
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
   2849a:	4b13      	ldr	r3, [pc, #76]	; (284e8 <_sercom_set_handler+0x5c>)
   2849c:	781b      	ldrb	r3, [r3, #0]
   2849e:	2201      	movs	r2, #1
   284a0:	4053      	eors	r3, r2
   284a2:	b2db      	uxtb	r3, r3
   284a4:	2b00      	cmp	r3, #0
   284a6:	d015      	beq.n	284d4 <_sercom_set_handler+0x48>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   284a8:	2300      	movs	r3, #0
   284aa:	60fb      	str	r3, [r7, #12]
   284ac:	e00c      	b.n	284c8 <_sercom_set_handler+0x3c>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
   284ae:	4b0f      	ldr	r3, [pc, #60]	; (284ec <_sercom_set_handler+0x60>)
   284b0:	68fa      	ldr	r2, [r7, #12]
   284b2:	0092      	lsls	r2, r2, #2
   284b4:	490e      	ldr	r1, [pc, #56]	; (284f0 <_sercom_set_handler+0x64>)
   284b6:	50d1      	str	r1, [r2, r3]
			_sercom_instances[i] = NULL;
   284b8:	4b0e      	ldr	r3, [pc, #56]	; (284f4 <_sercom_set_handler+0x68>)
   284ba:	68fa      	ldr	r2, [r7, #12]
   284bc:	0092      	lsls	r2, r2, #2
   284be:	2100      	movs	r1, #0
   284c0:	50d1      	str	r1, [r2, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
   284c2:	68fb      	ldr	r3, [r7, #12]
   284c4:	3301      	adds	r3, #1
   284c6:	60fb      	str	r3, [r7, #12]
   284c8:	68fb      	ldr	r3, [r7, #12]
   284ca:	2b05      	cmp	r3, #5
   284cc:	d9ef      	bls.n	284ae <_sercom_set_handler+0x22>
		}

		_handler_table_initialized = true;
   284ce:	4b06      	ldr	r3, [pc, #24]	; (284e8 <_sercom_set_handler+0x5c>)
   284d0:	2201      	movs	r2, #1
   284d2:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
   284d4:	1dfb      	adds	r3, r7, #7
   284d6:	781a      	ldrb	r2, [r3, #0]
   284d8:	4b04      	ldr	r3, [pc, #16]	; (284ec <_sercom_set_handler+0x60>)
   284da:	0092      	lsls	r2, r2, #2
   284dc:	6839      	ldr	r1, [r7, #0]
   284de:	50d1      	str	r1, [r2, r3]
}
   284e0:	46c0      	nop			; (mov r8, r8)
   284e2:	46bd      	mov	sp, r7
   284e4:	b004      	add	sp, #16
   284e6:	bd80      	pop	{r7, pc}
   284e8:	200042c2 	.word	0x200042c2
   284ec:	200042c4 	.word	0x200042c4
   284f0:	00028479 	.word	0x00028479
   284f4:	20005c58 	.word	0x20005c58

000284f8 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
   284f8:	b590      	push	{r4, r7, lr}
   284fa:	b085      	sub	sp, #20
   284fc:	af00      	add	r7, sp, #0
   284fe:	6078      	str	r0, [r7, #4]
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
   28500:	2308      	movs	r3, #8
   28502:	18fb      	adds	r3, r7, r3
   28504:	4a0b      	ldr	r2, [pc, #44]	; (28534 <_sercom_get_interrupt_vector+0x3c>)
   28506:	6811      	ldr	r1, [r2, #0]
   28508:	6019      	str	r1, [r3, #0]
   2850a:	8892      	ldrh	r2, [r2, #4]
   2850c:	809a      	strh	r2, [r3, #4]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
   2850e:	230f      	movs	r3, #15
   28510:	18fc      	adds	r4, r7, r3
   28512:	687b      	ldr	r3, [r7, #4]
   28514:	0018      	movs	r0, r3
   28516:	4b08      	ldr	r3, [pc, #32]	; (28538 <_sercom_get_interrupt_vector+0x40>)
   28518:	4798      	blx	r3
   2851a:	0003      	movs	r3, r0
   2851c:	7023      	strb	r3, [r4, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
   2851e:	230f      	movs	r3, #15
   28520:	18fb      	adds	r3, r7, r3
   28522:	781b      	ldrb	r3, [r3, #0]
   28524:	2208      	movs	r2, #8
   28526:	18ba      	adds	r2, r7, r2
   28528:	5cd3      	ldrb	r3, [r2, r3]
   2852a:	b25b      	sxtb	r3, r3
}
   2852c:	0018      	movs	r0, r3
   2852e:	46bd      	mov	sp, r7
   28530:	b005      	add	sp, #20
   28532:	bd90      	pop	{r4, r7, pc}
   28534:	0003a5fc 	.word	0x0003a5fc
   28538:	00028429 	.word	0x00028429

0002853c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
   2853c:	b580      	push	{r7, lr}
   2853e:	af00      	add	r7, sp, #0
   28540:	4b03      	ldr	r3, [pc, #12]	; (28550 <SERCOM0_Handler+0x14>)
   28542:	681b      	ldr	r3, [r3, #0]
   28544:	2000      	movs	r0, #0
   28546:	4798      	blx	r3
   28548:	46c0      	nop			; (mov r8, r8)
   2854a:	46bd      	mov	sp, r7
   2854c:	bd80      	pop	{r7, pc}
   2854e:	46c0      	nop			; (mov r8, r8)
   28550:	200042c4 	.word	0x200042c4

00028554 <SERCOM1_Handler>:
   28554:	b580      	push	{r7, lr}
   28556:	af00      	add	r7, sp, #0
   28558:	4b03      	ldr	r3, [pc, #12]	; (28568 <SERCOM1_Handler+0x14>)
   2855a:	685b      	ldr	r3, [r3, #4]
   2855c:	2001      	movs	r0, #1
   2855e:	4798      	blx	r3
   28560:	46c0      	nop			; (mov r8, r8)
   28562:	46bd      	mov	sp, r7
   28564:	bd80      	pop	{r7, pc}
   28566:	46c0      	nop			; (mov r8, r8)
   28568:	200042c4 	.word	0x200042c4

0002856c <SERCOM2_Handler>:
   2856c:	b580      	push	{r7, lr}
   2856e:	af00      	add	r7, sp, #0
   28570:	4b03      	ldr	r3, [pc, #12]	; (28580 <SERCOM2_Handler+0x14>)
   28572:	689b      	ldr	r3, [r3, #8]
   28574:	2002      	movs	r0, #2
   28576:	4798      	blx	r3
   28578:	46c0      	nop			; (mov r8, r8)
   2857a:	46bd      	mov	sp, r7
   2857c:	bd80      	pop	{r7, pc}
   2857e:	46c0      	nop			; (mov r8, r8)
   28580:	200042c4 	.word	0x200042c4

00028584 <SERCOM3_Handler>:
   28584:	b580      	push	{r7, lr}
   28586:	af00      	add	r7, sp, #0
   28588:	4b03      	ldr	r3, [pc, #12]	; (28598 <SERCOM3_Handler+0x14>)
   2858a:	68db      	ldr	r3, [r3, #12]
   2858c:	2003      	movs	r0, #3
   2858e:	4798      	blx	r3
   28590:	46c0      	nop			; (mov r8, r8)
   28592:	46bd      	mov	sp, r7
   28594:	bd80      	pop	{r7, pc}
   28596:	46c0      	nop			; (mov r8, r8)
   28598:	200042c4 	.word	0x200042c4

0002859c <SERCOM4_Handler>:
   2859c:	b580      	push	{r7, lr}
   2859e:	af00      	add	r7, sp, #0
   285a0:	4b03      	ldr	r3, [pc, #12]	; (285b0 <SERCOM4_Handler+0x14>)
   285a2:	691b      	ldr	r3, [r3, #16]
   285a4:	2004      	movs	r0, #4
   285a6:	4798      	blx	r3
   285a8:	46c0      	nop			; (mov r8, r8)
   285aa:	46bd      	mov	sp, r7
   285ac:	bd80      	pop	{r7, pc}
   285ae:	46c0      	nop			; (mov r8, r8)
   285b0:	200042c4 	.word	0x200042c4

000285b4 <SERCOM5_Handler>:
   285b4:	b580      	push	{r7, lr}
   285b6:	af00      	add	r7, sp, #0
   285b8:	4b03      	ldr	r3, [pc, #12]	; (285c8 <SERCOM5_Handler+0x14>)
   285ba:	695b      	ldr	r3, [r3, #20]
   285bc:	2005      	movs	r0, #5
   285be:	4798      	blx	r3
   285c0:	46c0      	nop			; (mov r8, r8)
   285c2:	46bd      	mov	sp, r7
   285c4:	bd80      	pop	{r7, pc}
   285c6:	46c0      	nop			; (mov r8, r8)
   285c8:	200042c4 	.word	0x200042c4

000285cc <system_pinmux_get_config_defaults>:
{
   285cc:	b580      	push	{r7, lr}
   285ce:	b082      	sub	sp, #8
   285d0:	af00      	add	r7, sp, #0
   285d2:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   285d4:	687b      	ldr	r3, [r7, #4]
   285d6:	2280      	movs	r2, #128	; 0x80
   285d8:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   285da:	687b      	ldr	r3, [r7, #4]
   285dc:	2200      	movs	r2, #0
   285de:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   285e0:	687b      	ldr	r3, [r7, #4]
   285e2:	2201      	movs	r2, #1
   285e4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   285e6:	687b      	ldr	r3, [r7, #4]
   285e8:	2200      	movs	r2, #0
   285ea:	70da      	strb	r2, [r3, #3]
}
   285ec:	46c0      	nop			; (mov r8, r8)
   285ee:	46bd      	mov	sp, r7
   285f0:	b002      	add	sp, #8
   285f2:	bd80      	pop	{r7, pc}

000285f4 <system_pinmux_get_group_from_gpio_pin>:
{
   285f4:	b580      	push	{r7, lr}
   285f6:	b084      	sub	sp, #16
   285f8:	af00      	add	r7, sp, #0
   285fa:	0002      	movs	r2, r0
   285fc:	1dfb      	adds	r3, r7, #7
   285fe:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   28600:	230f      	movs	r3, #15
   28602:	18fb      	adds	r3, r7, r3
   28604:	1dfa      	adds	r2, r7, #7
   28606:	7812      	ldrb	r2, [r2, #0]
   28608:	09d2      	lsrs	r2, r2, #7
   2860a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   2860c:	230e      	movs	r3, #14
   2860e:	18fb      	adds	r3, r7, r3
   28610:	1dfa      	adds	r2, r7, #7
   28612:	7812      	ldrb	r2, [r2, #0]
   28614:	0952      	lsrs	r2, r2, #5
   28616:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   28618:	4b0d      	ldr	r3, [pc, #52]	; (28650 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2861a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   2861c:	230f      	movs	r3, #15
   2861e:	18fb      	adds	r3, r7, r3
   28620:	781b      	ldrb	r3, [r3, #0]
   28622:	2b00      	cmp	r3, #0
   28624:	d10f      	bne.n	28646 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   28626:	230f      	movs	r3, #15
   28628:	18fb      	adds	r3, r7, r3
   2862a:	781b      	ldrb	r3, [r3, #0]
   2862c:	009b      	lsls	r3, r3, #2
   2862e:	2210      	movs	r2, #16
   28630:	4694      	mov	ip, r2
   28632:	44bc      	add	ip, r7
   28634:	4463      	add	r3, ip
   28636:	3b08      	subs	r3, #8
   28638:	681a      	ldr	r2, [r3, #0]
   2863a:	230e      	movs	r3, #14
   2863c:	18fb      	adds	r3, r7, r3
   2863e:	781b      	ldrb	r3, [r3, #0]
   28640:	01db      	lsls	r3, r3, #7
   28642:	18d3      	adds	r3, r2, r3
   28644:	e000      	b.n	28648 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   28646:	2300      	movs	r3, #0
}
   28648:	0018      	movs	r0, r3
   2864a:	46bd      	mov	sp, r7
   2864c:	b004      	add	sp, #16
   2864e:	bd80      	pop	{r7, pc}
   28650:	41004400 	.word	0x41004400

00028654 <port_get_group_from_gpio_pin>:
{
   28654:	b580      	push	{r7, lr}
   28656:	b082      	sub	sp, #8
   28658:	af00      	add	r7, sp, #0
   2865a:	0002      	movs	r2, r0
   2865c:	1dfb      	adds	r3, r7, #7
   2865e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
   28660:	1dfb      	adds	r3, r7, #7
   28662:	781b      	ldrb	r3, [r3, #0]
   28664:	0018      	movs	r0, r3
   28666:	4b03      	ldr	r3, [pc, #12]	; (28674 <port_get_group_from_gpio_pin+0x20>)
   28668:	4798      	blx	r3
   2866a:	0003      	movs	r3, r0
}
   2866c:	0018      	movs	r0, r3
   2866e:	46bd      	mov	sp, r7
   28670:	b002      	add	sp, #8
   28672:	bd80      	pop	{r7, pc}
   28674:	000285f5 	.word	0x000285f5

00028678 <port_pin_set_output_level>:
{
   28678:	b580      	push	{r7, lr}
   2867a:	b084      	sub	sp, #16
   2867c:	af00      	add	r7, sp, #0
   2867e:	0002      	movs	r2, r0
   28680:	1dfb      	adds	r3, r7, #7
   28682:	701a      	strb	r2, [r3, #0]
   28684:	1dbb      	adds	r3, r7, #6
   28686:	1c0a      	adds	r2, r1, #0
   28688:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
   2868a:	1dfb      	adds	r3, r7, #7
   2868c:	781b      	ldrb	r3, [r3, #0]
   2868e:	0018      	movs	r0, r3
   28690:	4b0d      	ldr	r3, [pc, #52]	; (286c8 <port_pin_set_output_level+0x50>)
   28692:	4798      	blx	r3
   28694:	0003      	movs	r3, r0
   28696:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
   28698:	1dfb      	adds	r3, r7, #7
   2869a:	781b      	ldrb	r3, [r3, #0]
   2869c:	221f      	movs	r2, #31
   2869e:	4013      	ands	r3, r2
   286a0:	2201      	movs	r2, #1
   286a2:	409a      	lsls	r2, r3
   286a4:	0013      	movs	r3, r2
   286a6:	60bb      	str	r3, [r7, #8]
	if (level) {
   286a8:	1dbb      	adds	r3, r7, #6
   286aa:	781b      	ldrb	r3, [r3, #0]
   286ac:	2b00      	cmp	r3, #0
   286ae:	d003      	beq.n	286b8 <port_pin_set_output_level+0x40>
		port_base->OUTSET.reg = pin_mask;
   286b0:	68fb      	ldr	r3, [r7, #12]
   286b2:	68ba      	ldr	r2, [r7, #8]
   286b4:	619a      	str	r2, [r3, #24]
}
   286b6:	e002      	b.n	286be <port_pin_set_output_level+0x46>
		port_base->OUTCLR.reg = pin_mask;
   286b8:	68fb      	ldr	r3, [r7, #12]
   286ba:	68ba      	ldr	r2, [r7, #8]
   286bc:	615a      	str	r2, [r3, #20]
}
   286be:	46c0      	nop			; (mov r8, r8)
   286c0:	46bd      	mov	sp, r7
   286c2:	b004      	add	sp, #16
   286c4:	bd80      	pop	{r7, pc}
   286c6:	46c0      	nop			; (mov r8, r8)
   286c8:	00028655 	.word	0x00028655

000286cc <system_gclk_chan_get_config_defaults>:
{
   286cc:	b580      	push	{r7, lr}
   286ce:	b082      	sub	sp, #8
   286d0:	af00      	add	r7, sp, #0
   286d2:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   286d4:	687b      	ldr	r3, [r7, #4]
   286d6:	2200      	movs	r2, #0
   286d8:	701a      	strb	r2, [r3, #0]
}
   286da:	46c0      	nop			; (mov r8, r8)
   286dc:	46bd      	mov	sp, r7
   286de:	b002      	add	sp, #8
   286e0:	bd80      	pop	{r7, pc}
	...

000286e4 <system_apb_clock_set_mask>:
{
   286e4:	b580      	push	{r7, lr}
   286e6:	b082      	sub	sp, #8
   286e8:	af00      	add	r7, sp, #0
   286ea:	0002      	movs	r2, r0
   286ec:	6039      	str	r1, [r7, #0]
   286ee:	1dfb      	adds	r3, r7, #7
   286f0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   286f2:	1dfb      	adds	r3, r7, #7
   286f4:	781b      	ldrb	r3, [r3, #0]
   286f6:	2b01      	cmp	r3, #1
   286f8:	d00a      	beq.n	28710 <system_apb_clock_set_mask+0x2c>
   286fa:	2b02      	cmp	r3, #2
   286fc:	d00f      	beq.n	2871e <system_apb_clock_set_mask+0x3a>
   286fe:	2b00      	cmp	r3, #0
   28700:	d114      	bne.n	2872c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   28702:	4b0e      	ldr	r3, [pc, #56]	; (2873c <system_apb_clock_set_mask+0x58>)
   28704:	4a0d      	ldr	r2, [pc, #52]	; (2873c <system_apb_clock_set_mask+0x58>)
   28706:	6991      	ldr	r1, [r2, #24]
   28708:	683a      	ldr	r2, [r7, #0]
   2870a:	430a      	orrs	r2, r1
   2870c:	619a      	str	r2, [r3, #24]
			break;
   2870e:	e00f      	b.n	28730 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   28710:	4b0a      	ldr	r3, [pc, #40]	; (2873c <system_apb_clock_set_mask+0x58>)
   28712:	4a0a      	ldr	r2, [pc, #40]	; (2873c <system_apb_clock_set_mask+0x58>)
   28714:	69d1      	ldr	r1, [r2, #28]
   28716:	683a      	ldr	r2, [r7, #0]
   28718:	430a      	orrs	r2, r1
   2871a:	61da      	str	r2, [r3, #28]
			break;
   2871c:	e008      	b.n	28730 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2871e:	4b07      	ldr	r3, [pc, #28]	; (2873c <system_apb_clock_set_mask+0x58>)
   28720:	4a06      	ldr	r2, [pc, #24]	; (2873c <system_apb_clock_set_mask+0x58>)
   28722:	6a11      	ldr	r1, [r2, #32]
   28724:	683a      	ldr	r2, [r7, #0]
   28726:	430a      	orrs	r2, r1
   28728:	621a      	str	r2, [r3, #32]
			break;
   2872a:	e001      	b.n	28730 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2872c:	2317      	movs	r3, #23
   2872e:	e000      	b.n	28732 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   28730:	2300      	movs	r3, #0
}
   28732:	0018      	movs	r0, r3
   28734:	46bd      	mov	sp, r7
   28736:	b002      	add	sp, #8
   28738:	bd80      	pop	{r7, pc}
   2873a:	46c0      	nop			; (mov r8, r8)
   2873c:	40000400 	.word	0x40000400

00028740 <system_is_debugger_present>:
{
   28740:	b580      	push	{r7, lr}
   28742:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   28744:	4b05      	ldr	r3, [pc, #20]	; (2875c <system_is_debugger_present+0x1c>)
   28746:	789b      	ldrb	r3, [r3, #2]
   28748:	b2db      	uxtb	r3, r3
   2874a:	001a      	movs	r2, r3
   2874c:	2302      	movs	r3, #2
   2874e:	4013      	ands	r3, r2
   28750:	1e5a      	subs	r2, r3, #1
   28752:	4193      	sbcs	r3, r2
   28754:	b2db      	uxtb	r3, r3
}
   28756:	0018      	movs	r0, r3
   28758:	46bd      	mov	sp, r7
   2875a:	bd80      	pop	{r7, pc}
   2875c:	41002000 	.word	0x41002000

00028760 <system_interrupt_enable>:
{
   28760:	b580      	push	{r7, lr}
   28762:	b082      	sub	sp, #8
   28764:	af00      	add	r7, sp, #0
   28766:	0002      	movs	r2, r0
   28768:	1dfb      	adds	r3, r7, #7
   2876a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2876c:	4b06      	ldr	r3, [pc, #24]	; (28788 <system_interrupt_enable+0x28>)
   2876e:	1dfa      	adds	r2, r7, #7
   28770:	7812      	ldrb	r2, [r2, #0]
   28772:	0011      	movs	r1, r2
   28774:	221f      	movs	r2, #31
   28776:	400a      	ands	r2, r1
   28778:	2101      	movs	r1, #1
   2877a:	4091      	lsls	r1, r2
   2877c:	000a      	movs	r2, r1
   2877e:	601a      	str	r2, [r3, #0]
}
   28780:	46c0      	nop			; (mov r8, r8)
   28782:	46bd      	mov	sp, r7
   28784:	b002      	add	sp, #8
   28786:	bd80      	pop	{r7, pc}
   28788:	e000e100 	.word	0xe000e100

0002878c <system_interrupt_disable>:
{
   2878c:	b580      	push	{r7, lr}
   2878e:	b082      	sub	sp, #8
   28790:	af00      	add	r7, sp, #0
   28792:	0002      	movs	r2, r0
   28794:	1dfb      	adds	r3, r7, #7
   28796:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   28798:	4a07      	ldr	r2, [pc, #28]	; (287b8 <system_interrupt_disable+0x2c>)
   2879a:	1dfb      	adds	r3, r7, #7
   2879c:	781b      	ldrb	r3, [r3, #0]
   2879e:	0019      	movs	r1, r3
   287a0:	231f      	movs	r3, #31
   287a2:	400b      	ands	r3, r1
   287a4:	2101      	movs	r1, #1
   287a6:	4099      	lsls	r1, r3
   287a8:	000b      	movs	r3, r1
   287aa:	0019      	movs	r1, r3
   287ac:	2380      	movs	r3, #128	; 0x80
   287ae:	50d1      	str	r1, [r2, r3]
}
   287b0:	46c0      	nop			; (mov r8, r8)
   287b2:	46bd      	mov	sp, r7
   287b4:	b002      	add	sp, #8
   287b6:	bd80      	pop	{r7, pc}
   287b8:	e000e100 	.word	0xe000e100

000287bc <spi_is_syncing>:
{
   287bc:	b580      	push	{r7, lr}
   287be:	b084      	sub	sp, #16
   287c0:	af00      	add	r7, sp, #0
   287c2:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   287c4:	687b      	ldr	r3, [r7, #4]
   287c6:	681b      	ldr	r3, [r3, #0]
   287c8:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
   287ca:	68fb      	ldr	r3, [r7, #12]
   287cc:	69db      	ldr	r3, [r3, #28]
   287ce:	1e5a      	subs	r2, r3, #1
   287d0:	4193      	sbcs	r3, r2
   287d2:	b2db      	uxtb	r3, r3
}
   287d4:	0018      	movs	r0, r3
   287d6:	46bd      	mov	sp, r7
   287d8:	b004      	add	sp, #16
   287da:	bd80      	pop	{r7, pc}

000287dc <spi_enable>:
{
   287dc:	b580      	push	{r7, lr}
   287de:	b084      	sub	sp, #16
   287e0:	af00      	add	r7, sp, #0
   287e2:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   287e4:	687b      	ldr	r3, [r7, #4]
   287e6:	681b      	ldr	r3, [r3, #0]
   287e8:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
   287ea:	687b      	ldr	r3, [r7, #4]
   287ec:	681b      	ldr	r3, [r3, #0]
   287ee:	0018      	movs	r0, r3
   287f0:	4b0b      	ldr	r3, [pc, #44]	; (28820 <spi_enable+0x44>)
   287f2:	4798      	blx	r3
   287f4:	0003      	movs	r3, r0
   287f6:	0018      	movs	r0, r3
   287f8:	4b0a      	ldr	r3, [pc, #40]	; (28824 <spi_enable+0x48>)
   287fa:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   287fc:	46c0      	nop			; (mov r8, r8)
   287fe:	687b      	ldr	r3, [r7, #4]
   28800:	0018      	movs	r0, r3
   28802:	4b09      	ldr	r3, [pc, #36]	; (28828 <spi_enable+0x4c>)
   28804:	4798      	blx	r3
   28806:	1e03      	subs	r3, r0, #0
   28808:	d1f9      	bne.n	287fe <spi_enable+0x22>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
   2880a:	68fb      	ldr	r3, [r7, #12]
   2880c:	681b      	ldr	r3, [r3, #0]
   2880e:	2202      	movs	r2, #2
   28810:	431a      	orrs	r2, r3
   28812:	68fb      	ldr	r3, [r7, #12]
   28814:	601a      	str	r2, [r3, #0]
}
   28816:	46c0      	nop			; (mov r8, r8)
   28818:	46bd      	mov	sp, r7
   2881a:	b004      	add	sp, #16
   2881c:	bd80      	pop	{r7, pc}
   2881e:	46c0      	nop			; (mov r8, r8)
   28820:	000284f9 	.word	0x000284f9
   28824:	00028761 	.word	0x00028761
   28828:	000287bd 	.word	0x000287bd

0002882c <spi_disable>:
{
   2882c:	b580      	push	{r7, lr}
   2882e:	b084      	sub	sp, #16
   28830:	af00      	add	r7, sp, #0
   28832:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   28834:	687b      	ldr	r3, [r7, #4]
   28836:	681b      	ldr	r3, [r3, #0]
   28838:	60fb      	str	r3, [r7, #12]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
   2883a:	687b      	ldr	r3, [r7, #4]
   2883c:	681b      	ldr	r3, [r3, #0]
   2883e:	0018      	movs	r0, r3
   28840:	4b0e      	ldr	r3, [pc, #56]	; (2887c <spi_disable+0x50>)
   28842:	4798      	blx	r3
   28844:	0003      	movs	r3, r0
   28846:	0018      	movs	r0, r3
   28848:	4b0d      	ldr	r3, [pc, #52]	; (28880 <spi_disable+0x54>)
   2884a:	4798      	blx	r3
	while (spi_is_syncing(module)) {
   2884c:	46c0      	nop			; (mov r8, r8)
   2884e:	687b      	ldr	r3, [r7, #4]
   28850:	0018      	movs	r0, r3
   28852:	4b0c      	ldr	r3, [pc, #48]	; (28884 <spi_disable+0x58>)
   28854:	4798      	blx	r3
   28856:	1e03      	subs	r3, r0, #0
   28858:	d1f9      	bne.n	2884e <spi_disable+0x22>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
   2885a:	68fb      	ldr	r3, [r7, #12]
   2885c:	228f      	movs	r2, #143	; 0x8f
   2885e:	751a      	strb	r2, [r3, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
   28860:	68fb      	ldr	r3, [r7, #12]
   28862:	228f      	movs	r2, #143	; 0x8f
   28864:	761a      	strb	r2, [r3, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
   28866:	68fb      	ldr	r3, [r7, #12]
   28868:	681b      	ldr	r3, [r3, #0]
   2886a:	2202      	movs	r2, #2
   2886c:	4393      	bics	r3, r2
   2886e:	001a      	movs	r2, r3
   28870:	68fb      	ldr	r3, [r7, #12]
   28872:	601a      	str	r2, [r3, #0]
}
   28874:	46c0      	nop			; (mov r8, r8)
   28876:	46bd      	mov	sp, r7
   28878:	b004      	add	sp, #16
   2887a:	bd80      	pop	{r7, pc}
   2887c:	000284f9 	.word	0x000284f9
   28880:	0002878d 	.word	0x0002878d
   28884:	000287bd 	.word	0x000287bd

00028888 <spi_is_write_complete>:
{
   28888:	b580      	push	{r7, lr}
   2888a:	b084      	sub	sp, #16
   2888c:	af00      	add	r7, sp, #0
   2888e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   28890:	687b      	ldr	r3, [r7, #4]
   28892:	681b      	ldr	r3, [r3, #0]
   28894:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
   28896:	68fb      	ldr	r3, [r7, #12]
   28898:	7e1b      	ldrb	r3, [r3, #24]
   2889a:	b2db      	uxtb	r3, r3
   2889c:	001a      	movs	r2, r3
   2889e:	2302      	movs	r3, #2
   288a0:	4013      	ands	r3, r2
   288a2:	1e5a      	subs	r2, r3, #1
   288a4:	4193      	sbcs	r3, r2
   288a6:	b2db      	uxtb	r3, r3
}
   288a8:	0018      	movs	r0, r3
   288aa:	46bd      	mov	sp, r7
   288ac:	b004      	add	sp, #16
   288ae:	bd80      	pop	{r7, pc}

000288b0 <spi_is_ready_to_write>:
{
   288b0:	b580      	push	{r7, lr}
   288b2:	b084      	sub	sp, #16
   288b4:	af00      	add	r7, sp, #0
   288b6:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   288b8:	687b      	ldr	r3, [r7, #4]
   288ba:	681b      	ldr	r3, [r3, #0]
   288bc:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
   288be:	68fb      	ldr	r3, [r7, #12]
   288c0:	7e1b      	ldrb	r3, [r3, #24]
   288c2:	b2db      	uxtb	r3, r3
   288c4:	001a      	movs	r2, r3
   288c6:	2301      	movs	r3, #1
   288c8:	4013      	ands	r3, r2
   288ca:	1e5a      	subs	r2, r3, #1
   288cc:	4193      	sbcs	r3, r2
   288ce:	b2db      	uxtb	r3, r3
}
   288d0:	0018      	movs	r0, r3
   288d2:	46bd      	mov	sp, r7
   288d4:	b004      	add	sp, #16
   288d6:	bd80      	pop	{r7, pc}

000288d8 <spi_is_ready_to_read>:
{
   288d8:	b580      	push	{r7, lr}
   288da:	b084      	sub	sp, #16
   288dc:	af00      	add	r7, sp, #0
   288de:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
   288e0:	687b      	ldr	r3, [r7, #4]
   288e2:	681b      	ldr	r3, [r3, #0]
   288e4:	60fb      	str	r3, [r7, #12]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
   288e6:	68fb      	ldr	r3, [r7, #12]
   288e8:	7e1b      	ldrb	r3, [r3, #24]
   288ea:	b2db      	uxtb	r3, r3
   288ec:	001a      	movs	r2, r3
   288ee:	2304      	movs	r3, #4
   288f0:	4013      	ands	r3, r2
   288f2:	1e5a      	subs	r2, r3, #1
   288f4:	4193      	sbcs	r3, r2
   288f6:	b2db      	uxtb	r3, r3
}
   288f8:	0018      	movs	r0, r3
   288fa:	46bd      	mov	sp, r7
   288fc:	b004      	add	sp, #16
   288fe:	bd80      	pop	{r7, pc}

00028900 <spi_write>:
{
   28900:	b580      	push	{r7, lr}
   28902:	b084      	sub	sp, #16
   28904:	af00      	add	r7, sp, #0
   28906:	6078      	str	r0, [r7, #4]
   28908:	000a      	movs	r2, r1
   2890a:	1cbb      	adds	r3, r7, #2
   2890c:	801a      	strh	r2, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   2890e:	687b      	ldr	r3, [r7, #4]
   28910:	681b      	ldr	r3, [r3, #0]
   28912:	60fb      	str	r3, [r7, #12]
	if (!spi_is_ready_to_write(module)) {
   28914:	687b      	ldr	r3, [r7, #4]
   28916:	0018      	movs	r0, r3
   28918:	4b0a      	ldr	r3, [pc, #40]	; (28944 <spi_write+0x44>)
   2891a:	4798      	blx	r3
   2891c:	0003      	movs	r3, r0
   2891e:	001a      	movs	r2, r3
   28920:	2301      	movs	r3, #1
   28922:	4053      	eors	r3, r2
   28924:	b2db      	uxtb	r3, r3
   28926:	2b00      	cmp	r3, #0
   28928:	d001      	beq.n	2892e <spi_write+0x2e>
		return STATUS_BUSY;
   2892a:	2305      	movs	r3, #5
   2892c:	e006      	b.n	2893c <spi_write+0x3c>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
   2892e:	1cbb      	adds	r3, r7, #2
   28930:	881b      	ldrh	r3, [r3, #0]
   28932:	05db      	lsls	r3, r3, #23
   28934:	0dda      	lsrs	r2, r3, #23
   28936:	68fb      	ldr	r3, [r7, #12]
   28938:	629a      	str	r2, [r3, #40]	; 0x28
	return STATUS_OK;
   2893a:	2300      	movs	r3, #0
}
   2893c:	0018      	movs	r0, r3
   2893e:	46bd      	mov	sp, r7
   28940:	b004      	add	sp, #16
   28942:	bd80      	pop	{r7, pc}
   28944:	000288b1 	.word	0x000288b1

00028948 <spi_read>:
{
   28948:	b580      	push	{r7, lr}
   2894a:	b084      	sub	sp, #16
   2894c:	af00      	add	r7, sp, #0
   2894e:	6078      	str	r0, [r7, #4]
   28950:	6039      	str	r1, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
   28952:	687b      	ldr	r3, [r7, #4]
   28954:	681b      	ldr	r3, [r3, #0]
   28956:	60bb      	str	r3, [r7, #8]
	if (!spi_is_ready_to_read(module)) {
   28958:	687b      	ldr	r3, [r7, #4]
   2895a:	0018      	movs	r0, r3
   2895c:	4b1b      	ldr	r3, [pc, #108]	; (289cc <spi_read+0x84>)
   2895e:	4798      	blx	r3
   28960:	0003      	movs	r3, r0
   28962:	001a      	movs	r2, r3
   28964:	2301      	movs	r3, #1
   28966:	4053      	eors	r3, r2
   28968:	b2db      	uxtb	r3, r3
   2896a:	2b00      	cmp	r3, #0
   2896c:	d001      	beq.n	28972 <spi_read+0x2a>
		return STATUS_ERR_IO;
   2896e:	2310      	movs	r3, #16
   28970:	e027      	b.n	289c2 <spi_read+0x7a>
	enum status_code retval = STATUS_OK;
   28972:	230f      	movs	r3, #15
   28974:	18fb      	adds	r3, r7, r3
   28976:	2200      	movs	r2, #0
   28978:	701a      	strb	r2, [r3, #0]
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   2897a:	68bb      	ldr	r3, [r7, #8]
   2897c:	8b5b      	ldrh	r3, [r3, #26]
   2897e:	b29b      	uxth	r3, r3
   28980:	001a      	movs	r2, r3
   28982:	2304      	movs	r3, #4
   28984:	4013      	ands	r3, r2
   28986:	d006      	beq.n	28996 <spi_read+0x4e>
		retval = STATUS_ERR_OVERFLOW;
   28988:	230f      	movs	r3, #15
   2898a:	18fb      	adds	r3, r7, r3
   2898c:	221e      	movs	r2, #30
   2898e:	701a      	strb	r2, [r3, #0]
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   28990:	68bb      	ldr	r3, [r7, #8]
   28992:	2204      	movs	r2, #4
   28994:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   28996:	687b      	ldr	r3, [r7, #4]
   28998:	799b      	ldrb	r3, [r3, #6]
   2899a:	2b01      	cmp	r3, #1
   2899c:	d108      	bne.n	289b0 <spi_read+0x68>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
   2899e:	68bb      	ldr	r3, [r7, #8]
   289a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   289a2:	b29b      	uxth	r3, r3
   289a4:	05db      	lsls	r3, r3, #23
   289a6:	0ddb      	lsrs	r3, r3, #23
   289a8:	b29a      	uxth	r2, r3
   289aa:	683b      	ldr	r3, [r7, #0]
   289ac:	801a      	strh	r2, [r3, #0]
   289ae:	e005      	b.n	289bc <spi_read+0x74>
		*rx_data = (uint8_t)spi_module->DATA.reg;
   289b0:	68bb      	ldr	r3, [r7, #8]
   289b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   289b4:	b2db      	uxtb	r3, r3
   289b6:	b29a      	uxth	r2, r3
   289b8:	683b      	ldr	r3, [r7, #0]
   289ba:	801a      	strh	r2, [r3, #0]
	return retval;
   289bc:	230f      	movs	r3, #15
   289be:	18fb      	adds	r3, r7, r3
   289c0:	781b      	ldrb	r3, [r3, #0]
}
   289c2:	0018      	movs	r0, r3
   289c4:	46bd      	mov	sp, r7
   289c6:	b004      	add	sp, #16
   289c8:	bd80      	pop	{r7, pc}
   289ca:	46c0      	nop			; (mov r8, r8)
   289cc:	000288d9 	.word	0x000288d9

000289d0 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
   289d0:	b590      	push	{r4, r7, lr}
   289d2:	b089      	sub	sp, #36	; 0x24
   289d4:	af00      	add	r7, sp, #0
   289d6:	6078      	str	r0, [r7, #4]
   289d8:	6039      	str	r1, [r7, #0]
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
   289da:	230c      	movs	r3, #12
   289dc:	18fb      	adds	r3, r7, r3
   289de:	2200      	movs	r2, #0
   289e0:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   289e2:	687b      	ldr	r3, [r7, #4]
   289e4:	681b      	ldr	r3, [r3, #0]
   289e6:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
   289e8:	687b      	ldr	r3, [r7, #4]
   289ea:	0018      	movs	r0, r3
   289ec:	4b24      	ldr	r3, [pc, #144]	; (28a80 <spi_set_baudrate+0xb0>)
   289ee:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   289f0:	46c0      	nop			; (mov r8, r8)
   289f2:	687b      	ldr	r3, [r7, #4]
   289f4:	0018      	movs	r0, r3
   289f6:	4b23      	ldr	r3, [pc, #140]	; (28a84 <spi_set_baudrate+0xb4>)
   289f8:	4798      	blx	r3
   289fa:	1e03      	subs	r3, r0, #0
   289fc:	d1f9      	bne.n	289f2 <spi_set_baudrate+0x22>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   289fe:	687b      	ldr	r3, [r7, #4]
   28a00:	681b      	ldr	r3, [r3, #0]
   28a02:	0018      	movs	r0, r3
   28a04:	4b20      	ldr	r3, [pc, #128]	; (28a88 <spi_set_baudrate+0xb8>)
   28a06:	4798      	blx	r3
   28a08:	0003      	movs	r3, r0
   28a0a:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   28a0c:	69bb      	ldr	r3, [r7, #24]
   28a0e:	3314      	adds	r3, #20
   28a10:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   28a12:	697b      	ldr	r3, [r7, #20]
   28a14:	b2db      	uxtb	r3, r3
   28a16:	0018      	movs	r0, r3
   28a18:	4b1c      	ldr	r3, [pc, #112]	; (28a8c <spi_set_baudrate+0xbc>)
   28a1a:	4798      	blx	r3
   28a1c:	0003      	movs	r3, r0
   28a1e:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
   28a20:	230f      	movs	r3, #15
   28a22:	18fc      	adds	r4, r7, r3
   28a24:	230c      	movs	r3, #12
   28a26:	18fa      	adds	r2, r7, r3
   28a28:	6939      	ldr	r1, [r7, #16]
   28a2a:	683b      	ldr	r3, [r7, #0]
   28a2c:	0018      	movs	r0, r3
   28a2e:	4b18      	ldr	r3, [pc, #96]	; (28a90 <spi_set_baudrate+0xc0>)
   28a30:	4798      	blx	r3
   28a32:	0003      	movs	r3, r0
   28a34:	7023      	strb	r3, [r4, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
   28a36:	230f      	movs	r3, #15
   28a38:	18fb      	adds	r3, r7, r3
   28a3a:	781b      	ldrb	r3, [r3, #0]
   28a3c:	2b00      	cmp	r3, #0
   28a3e:	d001      	beq.n	28a44 <spi_set_baudrate+0x74>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
   28a40:	2317      	movs	r3, #23
   28a42:	e018      	b.n	28a76 <spi_set_baudrate+0xa6>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
   28a44:	230c      	movs	r3, #12
   28a46:	18fb      	adds	r3, r7, r3
   28a48:	881b      	ldrh	r3, [r3, #0]
   28a4a:	b2da      	uxtb	r2, r3
   28a4c:	69fb      	ldr	r3, [r7, #28]
   28a4e:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
   28a50:	46c0      	nop			; (mov r8, r8)
   28a52:	687b      	ldr	r3, [r7, #4]
   28a54:	0018      	movs	r0, r3
   28a56:	4b0b      	ldr	r3, [pc, #44]	; (28a84 <spi_set_baudrate+0xb4>)
   28a58:	4798      	blx	r3
   28a5a:	1e03      	subs	r3, r0, #0
   28a5c:	d1f9      	bne.n	28a52 <spi_set_baudrate+0x82>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
   28a5e:	687b      	ldr	r3, [r7, #4]
   28a60:	0018      	movs	r0, r3
   28a62:	4b0c      	ldr	r3, [pc, #48]	; (28a94 <spi_set_baudrate+0xc4>)
   28a64:	4798      	blx	r3

	while (spi_is_syncing(module)) {
   28a66:	46c0      	nop			; (mov r8, r8)
   28a68:	687b      	ldr	r3, [r7, #4]
   28a6a:	0018      	movs	r0, r3
   28a6c:	4b05      	ldr	r3, [pc, #20]	; (28a84 <spi_set_baudrate+0xb4>)
   28a6e:	4798      	blx	r3
   28a70:	1e03      	subs	r3, r0, #0
   28a72:	d1f9      	bne.n	28a68 <spi_set_baudrate+0x98>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
   28a74:	2300      	movs	r3, #0
}
   28a76:	0018      	movs	r0, r3
   28a78:	46bd      	mov	sp, r7
   28a7a:	b009      	add	sp, #36	; 0x24
   28a7c:	bd90      	pop	{r4, r7, pc}
   28a7e:	46c0      	nop			; (mov r8, r8)
   28a80:	0002882d 	.word	0x0002882d
   28a84:	000287bd 	.word	0x000287bd
   28a88:	00028429 	.word	0x00028429
   28a8c:	0002addd 	.word	0x0002addd
   28a90:	00027fa3 	.word	0x00027fa3
   28a94:	000287dd 	.word	0x000287dd

00028a98 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
   28a98:	b590      	push	{r4, r7, lr}
   28a9a:	b093      	sub	sp, #76	; 0x4c
   28a9c:	af00      	add	r7, sp, #0
   28a9e:	6078      	str	r0, [r7, #4]
   28aa0:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
   28aa2:	687b      	ldr	r3, [r7, #4]
   28aa4:	681b      	ldr	r3, [r3, #0]
   28aa6:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
   28aa8:	687b      	ldr	r3, [r7, #4]
   28aaa:	681b      	ldr	r3, [r3, #0]
   28aac:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   28aae:	231c      	movs	r3, #28
   28ab0:	18fb      	adds	r3, r7, r3
   28ab2:	0018      	movs	r0, r3
   28ab4:	4b75      	ldr	r3, [pc, #468]	; (28c8c <_spi_set_config+0x1f4>)
   28ab6:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   28ab8:	231c      	movs	r3, #28
   28aba:	18fb      	adds	r3, r7, r3
   28abc:	2200      	movs	r2, #0
   28abe:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
   28ac0:	683b      	ldr	r3, [r7, #0]
   28ac2:	781b      	ldrb	r3, [r3, #0]
   28ac4:	2b00      	cmp	r3, #0
   28ac6:	d103      	bne.n	28ad0 <_spi_set_config+0x38>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   28ac8:	231c      	movs	r3, #28
   28aca:	18fb      	adds	r3, r7, r3
   28acc:	2200      	movs	r2, #0
   28ace:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   28ad0:	683b      	ldr	r3, [r7, #0]
   28ad2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
   28ad4:	230c      	movs	r3, #12
   28ad6:	18fb      	adds	r3, r7, r3
   28ad8:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   28ada:	683b      	ldr	r3, [r7, #0]
   28adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
   28ade:	230c      	movs	r3, #12
   28ae0:	18fb      	adds	r3, r7, r3
   28ae2:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   28ae4:	683b      	ldr	r3, [r7, #0]
   28ae6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   28ae8:	230c      	movs	r3, #12
   28aea:	18fb      	adds	r3, r7, r3
   28aec:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   28aee:	683b      	ldr	r3, [r7, #0]
   28af0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   28af2:	230c      	movs	r3, #12
   28af4:	18fb      	adds	r3, r7, r3
   28af6:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   28af8:	2347      	movs	r3, #71	; 0x47
   28afa:	18fb      	adds	r3, r7, r3
   28afc:	2200      	movs	r2, #0
   28afe:	701a      	strb	r2, [r3, #0]
   28b00:	e02c      	b.n	28b5c <_spi_set_config+0xc4>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   28b02:	2347      	movs	r3, #71	; 0x47
   28b04:	18fb      	adds	r3, r7, r3
   28b06:	781a      	ldrb	r2, [r3, #0]
   28b08:	230c      	movs	r3, #12
   28b0a:	18fb      	adds	r3, r7, r3
   28b0c:	0092      	lsls	r2, r2, #2
   28b0e:	58d3      	ldr	r3, [r2, r3]
   28b10:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   28b12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28b14:	2b00      	cmp	r3, #0
   28b16:	d109      	bne.n	28b2c <_spi_set_config+0x94>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   28b18:	2347      	movs	r3, #71	; 0x47
   28b1a:	18fb      	adds	r3, r7, r3
   28b1c:	781a      	ldrb	r2, [r3, #0]
   28b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   28b20:	0011      	movs	r1, r2
   28b22:	0018      	movs	r0, r3
   28b24:	4b5a      	ldr	r3, [pc, #360]	; (28c90 <_spi_set_config+0x1f8>)
   28b26:	4798      	blx	r3
   28b28:	0003      	movs	r3, r0
   28b2a:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   28b2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28b2e:	3301      	adds	r3, #1
   28b30:	d00d      	beq.n	28b4e <_spi_set_config+0xb6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   28b32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28b34:	b2da      	uxtb	r2, r3
   28b36:	231c      	movs	r3, #28
   28b38:	18fb      	adds	r3, r7, r3
   28b3a:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   28b3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   28b3e:	0c1b      	lsrs	r3, r3, #16
   28b40:	b2db      	uxtb	r3, r3
   28b42:	221c      	movs	r2, #28
   28b44:	18ba      	adds	r2, r7, r2
   28b46:	0011      	movs	r1, r2
   28b48:	0018      	movs	r0, r3
   28b4a:	4b52      	ldr	r3, [pc, #328]	; (28c94 <_spi_set_config+0x1fc>)
   28b4c:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   28b4e:	2347      	movs	r3, #71	; 0x47
   28b50:	18fb      	adds	r3, r7, r3
   28b52:	781a      	ldrb	r2, [r3, #0]
   28b54:	2347      	movs	r3, #71	; 0x47
   28b56:	18fb      	adds	r3, r7, r3
   28b58:	3201      	adds	r2, #1
   28b5a:	701a      	strb	r2, [r3, #0]
   28b5c:	2347      	movs	r3, #71	; 0x47
   28b5e:	18fb      	adds	r3, r7, r3
   28b60:	781b      	ldrb	r3, [r3, #0]
   28b62:	2b03      	cmp	r3, #3
   28b64:	d9cd      	bls.n	28b02 <_spi_set_config+0x6a>
		}
	}

	module->mode             = config->mode;
   28b66:	683b      	ldr	r3, [r7, #0]
   28b68:	781a      	ldrb	r2, [r3, #0]
   28b6a:	687b      	ldr	r3, [r7, #4]
   28b6c:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
   28b6e:	683b      	ldr	r3, [r7, #0]
   28b70:	7c1a      	ldrb	r2, [r3, #16]
   28b72:	687b      	ldr	r3, [r7, #4]
   28b74:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
   28b76:	683b      	ldr	r3, [r7, #0]
   28b78:	7c9a      	ldrb	r2, [r3, #18]
   28b7a:	687b      	ldr	r3, [r7, #4]
   28b7c:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
   28b7e:	683b      	ldr	r3, [r7, #0]
   28b80:	7d1a      	ldrb	r2, [r3, #20]
   28b82:	687b      	ldr	r3, [r7, #4]
   28b84:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
   28b86:	230a      	movs	r3, #10
   28b88:	18fb      	adds	r3, r7, r3
   28b8a:	2200      	movs	r2, #0
   28b8c:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
   28b8e:	2300      	movs	r3, #0
   28b90:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
   28b92:	2300      	movs	r3, #0
   28b94:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
   28b96:	683b      	ldr	r3, [r7, #0]
   28b98:	781b      	ldrb	r3, [r3, #0]
   28b9a:	2b01      	cmp	r3, #1
   28b9c:	d129      	bne.n	28bf2 <_spi_set_config+0x15a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   28b9e:	687b      	ldr	r3, [r7, #4]
   28ba0:	681b      	ldr	r3, [r3, #0]
   28ba2:	0018      	movs	r0, r3
   28ba4:	4b3c      	ldr	r3, [pc, #240]	; (28c98 <_spi_set_config+0x200>)
   28ba6:	4798      	blx	r3
   28ba8:	0003      	movs	r3, r0
   28baa:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   28bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   28bae:	3314      	adds	r3, #20
   28bb0:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
   28bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   28bb4:	b2db      	uxtb	r3, r3
   28bb6:	0018      	movs	r0, r3
   28bb8:	4b38      	ldr	r3, [pc, #224]	; (28c9c <_spi_set_config+0x204>)
   28bba:	4798      	blx	r3
   28bbc:	0003      	movs	r3, r0
   28bbe:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
   28bc0:	683b      	ldr	r3, [r7, #0]
   28bc2:	699b      	ldr	r3, [r3, #24]
   28bc4:	2223      	movs	r2, #35	; 0x23
   28bc6:	18bc      	adds	r4, r7, r2
   28bc8:	220a      	movs	r2, #10
   28bca:	18ba      	adds	r2, r7, r2
   28bcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
   28bce:	0018      	movs	r0, r3
   28bd0:	4b33      	ldr	r3, [pc, #204]	; (28ca0 <_spi_set_config+0x208>)
   28bd2:	4798      	blx	r3
   28bd4:	0003      	movs	r3, r0
   28bd6:	7023      	strb	r3, [r4, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
   28bd8:	2323      	movs	r3, #35	; 0x23
   28bda:	18fb      	adds	r3, r7, r3
   28bdc:	781b      	ldrb	r3, [r3, #0]
   28bde:	2b00      	cmp	r3, #0
   28be0:	d001      	beq.n	28be6 <_spi_set_config+0x14e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
   28be2:	2317      	movs	r3, #23
   28be4:	e04e      	b.n	28c84 <_spi_set_config+0x1ec>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
   28be6:	230a      	movs	r3, #10
   28be8:	18fb      	adds	r3, r7, r3
   28bea:	881b      	ldrh	r3, [r3, #0]
   28bec:	b2da      	uxtb	r2, r3
   28bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28bf0:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
   28bf2:	683b      	ldr	r3, [r7, #0]
   28bf4:	685b      	ldr	r3, [r3, #4]
   28bf6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   28bf8:	4313      	orrs	r3, r2
   28bfa:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
   28bfc:	683b      	ldr	r3, [r7, #0]
   28bfe:	689b      	ldr	r3, [r3, #8]
   28c00:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   28c02:	4313      	orrs	r3, r2
   28c04:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
   28c06:	683b      	ldr	r3, [r7, #0]
   28c08:	68db      	ldr	r3, [r3, #12]
   28c0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   28c0c:	4313      	orrs	r3, r2
   28c0e:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
   28c10:	683b      	ldr	r3, [r7, #0]
   28c12:	7c1b      	ldrb	r3, [r3, #16]
   28c14:	001a      	movs	r2, r3
   28c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28c18:	4313      	orrs	r3, r2
   28c1a:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   28c1c:	683b      	ldr	r3, [r7, #0]
   28c1e:	7c5b      	ldrb	r3, [r3, #17]
   28c20:	2b00      	cmp	r3, #0
   28c22:	d103      	bne.n	28c2c <_spi_set_config+0x194>
   28c24:	4b1f      	ldr	r3, [pc, #124]	; (28ca4 <_spi_set_config+0x20c>)
   28c26:	4798      	blx	r3
   28c28:	1e03      	subs	r3, r0, #0
   28c2a:	d003      	beq.n	28c34 <_spi_set_config+0x19c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
   28c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28c2e:	2280      	movs	r2, #128	; 0x80
   28c30:	4313      	orrs	r3, r2
   28c32:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
   28c34:	683b      	ldr	r3, [r7, #0]
   28c36:	7c9b      	ldrb	r3, [r3, #18]
   28c38:	2b00      	cmp	r3, #0
   28c3a:	d004      	beq.n	28c46 <_spi_set_config+0x1ae>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
   28c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28c3e:	2280      	movs	r2, #128	; 0x80
   28c40:	0292      	lsls	r2, r2, #10
   28c42:	4313      	orrs	r3, r2
   28c44:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
   28c46:	683b      	ldr	r3, [r7, #0]
   28c48:	7cdb      	ldrb	r3, [r3, #19]
   28c4a:	2b00      	cmp	r3, #0
   28c4c:	d004      	beq.n	28c58 <_spi_set_config+0x1c0>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
   28c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28c50:	2280      	movs	r2, #128	; 0x80
   28c52:	0092      	lsls	r2, r2, #2
   28c54:	4313      	orrs	r3, r2
   28c56:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
   28c58:	683b      	ldr	r3, [r7, #0]
   28c5a:	7d1b      	ldrb	r3, [r3, #20]
   28c5c:	2b00      	cmp	r3, #0
   28c5e:	d004      	beq.n	28c6a <_spi_set_config+0x1d2>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
   28c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28c62:	2280      	movs	r2, #128	; 0x80
   28c64:	0192      	lsls	r2, r2, #6
   28c66:	4313      	orrs	r3, r2
   28c68:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
   28c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28c6c:	681a      	ldr	r2, [r3, #0]
   28c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   28c70:	431a      	orrs	r2, r3
   28c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28c74:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
   28c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28c78:	685a      	ldr	r2, [r3, #4]
   28c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   28c7c:	431a      	orrs	r2, r3
   28c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   28c80:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
   28c82:	2300      	movs	r3, #0
}
   28c84:	0018      	movs	r0, r3
   28c86:	46bd      	mov	sp, r7
   28c88:	b013      	add	sp, #76	; 0x4c
   28c8a:	bd90      	pop	{r4, r7, pc}
   28c8c:	000285cd 	.word	0x000285cd
   28c90:	0002826d 	.word	0x0002826d
   28c94:	0002b019 	.word	0x0002b019
   28c98:	00028429 	.word	0x00028429
   28c9c:	0002addd 	.word	0x0002addd
   28ca0:	00027fa3 	.word	0x00027fa3
   28ca4:	00028741 	.word	0x00028741

00028ca8 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
   28ca8:	b590      	push	{r4, r7, lr}
   28caa:	b08b      	sub	sp, #44	; 0x2c
   28cac:	af00      	add	r7, sp, #0
   28cae:	60f8      	str	r0, [r7, #12]
   28cb0:	60b9      	str	r1, [r7, #8]
   28cb2:	607a      	str	r2, [r7, #4]
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
   28cb4:	68fb      	ldr	r3, [r7, #12]
   28cb6:	68ba      	ldr	r2, [r7, #8]
   28cb8:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
   28cba:	68fb      	ldr	r3, [r7, #12]
   28cbc:	681b      	ldr	r3, [r3, #0]
   28cbe:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
   28cc0:	6a3b      	ldr	r3, [r7, #32]
   28cc2:	681b      	ldr	r3, [r3, #0]
   28cc4:	2202      	movs	r2, #2
   28cc6:	4013      	ands	r3, r2
   28cc8:	d001      	beq.n	28cce <spi_init+0x26>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
   28cca:	231c      	movs	r3, #28
   28ccc:	e09c      	b.n	28e08 <spi_init+0x160>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
   28cce:	6a3b      	ldr	r3, [r7, #32]
   28cd0:	681b      	ldr	r3, [r3, #0]
   28cd2:	2201      	movs	r2, #1
   28cd4:	4013      	ands	r3, r2
   28cd6:	d001      	beq.n	28cdc <spi_init+0x34>
		return STATUS_BUSY;
   28cd8:	2305      	movs	r3, #5
   28cda:	e095      	b.n	28e08 <spi_init+0x160>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   28cdc:	68fb      	ldr	r3, [r7, #12]
   28cde:	681b      	ldr	r3, [r3, #0]
   28ce0:	0018      	movs	r0, r3
   28ce2:	4b4b      	ldr	r3, [pc, #300]	; (28e10 <spi_init+0x168>)
   28ce4:	4798      	blx	r3
   28ce6:	0003      	movs	r3, r0
   28ce8:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   28cea:	69fb      	ldr	r3, [r7, #28]
   28cec:	3302      	adds	r3, #2
   28cee:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   28cf0:	69fb      	ldr	r3, [r7, #28]
   28cf2:	3314      	adds	r3, #20
   28cf4:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   28cf6:	2201      	movs	r2, #1
   28cf8:	69bb      	ldr	r3, [r7, #24]
   28cfa:	409a      	lsls	r2, r3
   28cfc:	0013      	movs	r3, r2
   28cfe:	0019      	movs	r1, r3
   28d00:	2002      	movs	r0, #2
   28d02:	4b44      	ldr	r3, [pc, #272]	; (28e14 <spi_init+0x16c>)
   28d04:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   28d06:	2310      	movs	r3, #16
   28d08:	18fb      	adds	r3, r7, r3
   28d0a:	0018      	movs	r0, r3
   28d0c:	4b42      	ldr	r3, [pc, #264]	; (28e18 <spi_init+0x170>)
   28d0e:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   28d10:	687b      	ldr	r3, [r7, #4]
   28d12:	2224      	movs	r2, #36	; 0x24
   28d14:	5c9a      	ldrb	r2, [r3, r2]
   28d16:	2310      	movs	r3, #16
   28d18:	18fb      	adds	r3, r7, r3
   28d1a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   28d1c:	697b      	ldr	r3, [r7, #20]
   28d1e:	b2db      	uxtb	r3, r3
   28d20:	2210      	movs	r2, #16
   28d22:	18ba      	adds	r2, r7, r2
   28d24:	0011      	movs	r1, r2
   28d26:	0018      	movs	r0, r3
   28d28:	4b3c      	ldr	r3, [pc, #240]	; (28e1c <spi_init+0x174>)
   28d2a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   28d2c:	697b      	ldr	r3, [r7, #20]
   28d2e:	b2db      	uxtb	r3, r3
   28d30:	0018      	movs	r0, r3
   28d32:	4b3b      	ldr	r3, [pc, #236]	; (28e20 <spi_init+0x178>)
   28d34:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   28d36:	687b      	ldr	r3, [r7, #4]
   28d38:	2224      	movs	r2, #36	; 0x24
   28d3a:	5c9b      	ldrb	r3, [r3, r2]
   28d3c:	2100      	movs	r1, #0
   28d3e:	0018      	movs	r0, r3
   28d40:	4b38      	ldr	r3, [pc, #224]	; (28e24 <spi_init+0x17c>)
   28d42:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
   28d44:	687b      	ldr	r3, [r7, #4]
   28d46:	781b      	ldrb	r3, [r3, #0]
   28d48:	2b01      	cmp	r3, #1
   28d4a:	d105      	bne.n	28d58 <spi_init+0xb0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
   28d4c:	6a3b      	ldr	r3, [r7, #32]
   28d4e:	681b      	ldr	r3, [r3, #0]
   28d50:	220c      	movs	r2, #12
   28d52:	431a      	orrs	r2, r3
   28d54:	6a3b      	ldr	r3, [r7, #32]
   28d56:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   28d58:	2327      	movs	r3, #39	; 0x27
   28d5a:	18fb      	adds	r3, r7, r3
   28d5c:	2200      	movs	r2, #0
   28d5e:	701a      	strb	r2, [r3, #0]
   28d60:	e010      	b.n	28d84 <spi_init+0xdc>
		module->callback[i]        = NULL;
   28d62:	2327      	movs	r3, #39	; 0x27
   28d64:	18fb      	adds	r3, r7, r3
   28d66:	781b      	ldrb	r3, [r3, #0]
   28d68:	68fa      	ldr	r2, [r7, #12]
   28d6a:	3302      	adds	r3, #2
   28d6c:	009b      	lsls	r3, r3, #2
   28d6e:	18d3      	adds	r3, r2, r3
   28d70:	3304      	adds	r3, #4
   28d72:	2200      	movs	r2, #0
   28d74:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
   28d76:	2327      	movs	r3, #39	; 0x27
   28d78:	18fb      	adds	r3, r7, r3
   28d7a:	781a      	ldrb	r2, [r3, #0]
   28d7c:	2327      	movs	r3, #39	; 0x27
   28d7e:	18fb      	adds	r3, r7, r3
   28d80:	3201      	adds	r2, #1
   28d82:	701a      	strb	r2, [r3, #0]
   28d84:	2327      	movs	r3, #39	; 0x27
   28d86:	18fb      	adds	r3, r7, r3
   28d88:	781b      	ldrb	r3, [r3, #0]
   28d8a:	2b06      	cmp	r3, #6
   28d8c:	d9e9      	bls.n	28d62 <spi_init+0xba>
	}
	module->tx_buffer_ptr              = NULL;
   28d8e:	68fb      	ldr	r3, [r7, #12]
   28d90:	2200      	movs	r2, #0
   28d92:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
   28d94:	68fb      	ldr	r3, [r7, #12]
   28d96:	2200      	movs	r2, #0
   28d98:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
   28d9a:	68fb      	ldr	r3, [r7, #12]
   28d9c:	2200      	movs	r2, #0
   28d9e:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
   28da0:	68fb      	ldr	r3, [r7, #12]
   28da2:	2200      	movs	r2, #0
   28da4:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
   28da6:	68fb      	ldr	r3, [r7, #12]
   28da8:	2236      	movs	r2, #54	; 0x36
   28daa:	2100      	movs	r1, #0
   28dac:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
   28dae:	68fb      	ldr	r3, [r7, #12]
   28db0:	2237      	movs	r2, #55	; 0x37
   28db2:	2100      	movs	r1, #0
   28db4:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
   28db6:	68fb      	ldr	r3, [r7, #12]
   28db8:	2238      	movs	r2, #56	; 0x38
   28dba:	2100      	movs	r1, #0
   28dbc:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
   28dbe:	68fb      	ldr	r3, [r7, #12]
   28dc0:	2203      	movs	r2, #3
   28dc2:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
   28dc4:	68fb      	ldr	r3, [r7, #12]
   28dc6:	2200      	movs	r2, #0
   28dc8:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
   28dca:	68fb      	ldr	r3, [r7, #12]
   28dcc:	681b      	ldr	r3, [r3, #0]
   28dce:	2213      	movs	r2, #19
   28dd0:	18bc      	adds	r4, r7, r2
   28dd2:	0018      	movs	r0, r3
   28dd4:	4b0e      	ldr	r3, [pc, #56]	; (28e10 <spi_init+0x168>)
   28dd6:	4798      	blx	r3
   28dd8:	0003      	movs	r3, r0
   28dda:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
   28ddc:	4a12      	ldr	r2, [pc, #72]	; (28e28 <spi_init+0x180>)
   28dde:	2313      	movs	r3, #19
   28de0:	18fb      	adds	r3, r7, r3
   28de2:	781b      	ldrb	r3, [r3, #0]
   28de4:	0011      	movs	r1, r2
   28de6:	0018      	movs	r0, r3
   28de8:	4b10      	ldr	r3, [pc, #64]	; (28e2c <spi_init+0x184>)
   28dea:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   28dec:	2313      	movs	r3, #19
   28dee:	18fb      	adds	r3, r7, r3
   28df0:	781a      	ldrb	r2, [r3, #0]
   28df2:	4b0f      	ldr	r3, [pc, #60]	; (28e30 <spi_init+0x188>)
   28df4:	0092      	lsls	r2, r2, #2
   28df6:	68f9      	ldr	r1, [r7, #12]
   28df8:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
   28dfa:	687a      	ldr	r2, [r7, #4]
   28dfc:	68fb      	ldr	r3, [r7, #12]
   28dfe:	0011      	movs	r1, r2
   28e00:	0018      	movs	r0, r3
   28e02:	4b0c      	ldr	r3, [pc, #48]	; (28e34 <spi_init+0x18c>)
   28e04:	4798      	blx	r3
   28e06:	0003      	movs	r3, r0
}
   28e08:	0018      	movs	r0, r3
   28e0a:	46bd      	mov	sp, r7
   28e0c:	b00b      	add	sp, #44	; 0x2c
   28e0e:	bd90      	pop	{r4, r7, pc}
   28e10:	00028429 	.word	0x00028429
   28e14:	000286e5 	.word	0x000286e5
   28e18:	000286cd 	.word	0x000286cd
   28e1c:	0002acb9 	.word	0x0002acb9
   28e20:	0002acfd 	.word	0x0002acfd
   28e24:	000281e1 	.word	0x000281e1
   28e28:	00029301 	.word	0x00029301
   28e2c:	0002848d 	.word	0x0002848d
   28e30:	20005c58 	.word	0x20005c58
   28e34:	00028a99 	.word	0x00028a99

00028e38 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
   28e38:	b590      	push	{r4, r7, lr}
   28e3a:	b087      	sub	sp, #28
   28e3c:	af00      	add	r7, sp, #0
   28e3e:	60f8      	str	r0, [r7, #12]
   28e40:	60b9      	str	r1, [r7, #8]
   28e42:	0019      	movs	r1, r3
   28e44:	1dbb      	adds	r3, r7, #6
   28e46:	801a      	strh	r2, [r3, #0]
   28e48:	1d3b      	adds	r3, r7, #4
   28e4a:	1c0a      	adds	r2, r1, #0
   28e4c:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   28e4e:	68fb      	ldr	r3, [r7, #12]
   28e50:	2238      	movs	r2, #56	; 0x38
   28e52:	5c9b      	ldrb	r3, [r3, r2]
   28e54:	b2db      	uxtb	r3, r3
   28e56:	2b05      	cmp	r3, #5
   28e58:	d101      	bne.n	28e5e <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   28e5a:	2305      	movs	r3, #5
   28e5c:	e07a      	b.n	28f54 <spi_read_buffer_wait+0x11c>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
   28e5e:	1dbb      	adds	r3, r7, #6
   28e60:	881b      	ldrh	r3, [r3, #0]
   28e62:	2b00      	cmp	r3, #0
   28e64:	d101      	bne.n	28e6a <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
   28e66:	2317      	movs	r3, #23
   28e68:	e074      	b.n	28f54 <spi_read_buffer_wait+0x11c>
	}

	if (!(module->receiver_enabled)) {
   28e6a:	68fb      	ldr	r3, [r7, #12]
   28e6c:	79db      	ldrb	r3, [r3, #7]
   28e6e:	2201      	movs	r2, #1
   28e70:	4053      	eors	r3, r2
   28e72:	b2db      	uxtb	r3, r3
   28e74:	2b00      	cmp	r3, #0
   28e76:	d001      	beq.n	28e7c <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
   28e78:	231c      	movs	r3, #28
   28e7a:	e06b      	b.n	28f54 <spi_read_buffer_wait+0x11c>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
   28e7c:	2316      	movs	r3, #22
   28e7e:	18fb      	adds	r3, r7, r3
   28e80:	2200      	movs	r2, #0
   28e82:	801a      	strh	r2, [r3, #0]

	while (length--) {
   28e84:	e05e      	b.n	28f44 <spi_read_buffer_wait+0x10c>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
   28e86:	68fb      	ldr	r3, [r7, #12]
   28e88:	795b      	ldrb	r3, [r3, #5]
   28e8a:	2b01      	cmp	r3, #1
   28e8c:	d112      	bne.n	28eb4 <spi_read_buffer_wait+0x7c>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
   28e8e:	46c0      	nop			; (mov r8, r8)
   28e90:	68fb      	ldr	r3, [r7, #12]
   28e92:	0018      	movs	r0, r3
   28e94:	4b31      	ldr	r3, [pc, #196]	; (28f5c <spi_read_buffer_wait+0x124>)
   28e96:	4798      	blx	r3
   28e98:	0003      	movs	r3, r0
   28e9a:	001a      	movs	r2, r3
   28e9c:	2301      	movs	r3, #1
   28e9e:	4053      	eors	r3, r2
   28ea0:	b2db      	uxtb	r3, r3
   28ea2:	2b00      	cmp	r3, #0
   28ea4:	d1f4      	bne.n	28e90 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
   28ea6:	1d3b      	adds	r3, r7, #4
   28ea8:	881a      	ldrh	r2, [r3, #0]
   28eaa:	68fb      	ldr	r3, [r7, #12]
   28eac:	0011      	movs	r1, r2
   28eae:	0018      	movs	r0, r3
   28eb0:	4b2b      	ldr	r3, [pc, #172]	; (28f60 <spi_read_buffer_wait+0x128>)
   28eb2:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
   28eb4:	46c0      	nop			; (mov r8, r8)
   28eb6:	68fb      	ldr	r3, [r7, #12]
   28eb8:	0018      	movs	r0, r3
   28eba:	4b2a      	ldr	r3, [pc, #168]	; (28f64 <spi_read_buffer_wait+0x12c>)
   28ebc:	4798      	blx	r3
   28ebe:	0003      	movs	r3, r0
   28ec0:	001a      	movs	r2, r3
   28ec2:	2301      	movs	r3, #1
   28ec4:	4053      	eors	r3, r2
   28ec6:	b2db      	uxtb	r3, r3
   28ec8:	2b00      	cmp	r3, #0
   28eca:	d1f4      	bne.n	28eb6 <spi_read_buffer_wait+0x7e>
		}

		uint16_t received_data = 0;
   28ecc:	2312      	movs	r3, #18
   28ece:	18fb      	adds	r3, r7, r3
   28ed0:	2200      	movs	r2, #0
   28ed2:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
   28ed4:	2315      	movs	r3, #21
   28ed6:	18fc      	adds	r4, r7, r3
   28ed8:	2312      	movs	r3, #18
   28eda:	18fa      	adds	r2, r7, r3
   28edc:	68fb      	ldr	r3, [r7, #12]
   28ede:	0011      	movs	r1, r2
   28ee0:	0018      	movs	r0, r3
   28ee2:	4b21      	ldr	r3, [pc, #132]	; (28f68 <spi_read_buffer_wait+0x130>)
   28ee4:	4798      	blx	r3
   28ee6:	0003      	movs	r3, r0
   28ee8:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
   28eea:	2315      	movs	r3, #21
   28eec:	18fb      	adds	r3, r7, r3
   28eee:	781b      	ldrb	r3, [r3, #0]
   28ef0:	2b00      	cmp	r3, #0
   28ef2:	d003      	beq.n	28efc <spi_read_buffer_wait+0xc4>
			/* Overflow, abort */
			return retval;
   28ef4:	2315      	movs	r3, #21
   28ef6:	18fb      	adds	r3, r7, r3
   28ef8:	781b      	ldrb	r3, [r3, #0]
   28efa:	e02b      	b.n	28f54 <spi_read_buffer_wait+0x11c>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
   28efc:	2316      	movs	r3, #22
   28efe:	18fb      	adds	r3, r7, r3
   28f00:	881b      	ldrh	r3, [r3, #0]
   28f02:	2216      	movs	r2, #22
   28f04:	18ba      	adds	r2, r7, r2
   28f06:	1c59      	adds	r1, r3, #1
   28f08:	8011      	strh	r1, [r2, #0]
   28f0a:	001a      	movs	r2, r3
   28f0c:	68bb      	ldr	r3, [r7, #8]
   28f0e:	189b      	adds	r3, r3, r2
   28f10:	2212      	movs	r2, #18
   28f12:	18ba      	adds	r2, r7, r2
   28f14:	8812      	ldrh	r2, [r2, #0]
   28f16:	b2d2      	uxtb	r2, r2
   28f18:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   28f1a:	68fb      	ldr	r3, [r7, #12]
   28f1c:	799b      	ldrb	r3, [r3, #6]
   28f1e:	2b01      	cmp	r3, #1
   28f20:	d110      	bne.n	28f44 <spi_read_buffer_wait+0x10c>
			rx_data[rx_pos++] = (received_data >> 8);
   28f22:	2316      	movs	r3, #22
   28f24:	18fb      	adds	r3, r7, r3
   28f26:	881b      	ldrh	r3, [r3, #0]
   28f28:	2216      	movs	r2, #22
   28f2a:	18ba      	adds	r2, r7, r2
   28f2c:	1c59      	adds	r1, r3, #1
   28f2e:	8011      	strh	r1, [r2, #0]
   28f30:	001a      	movs	r2, r3
   28f32:	68bb      	ldr	r3, [r7, #8]
   28f34:	189b      	adds	r3, r3, r2
   28f36:	2212      	movs	r2, #18
   28f38:	18ba      	adds	r2, r7, r2
   28f3a:	8812      	ldrh	r2, [r2, #0]
   28f3c:	0a12      	lsrs	r2, r2, #8
   28f3e:	b292      	uxth	r2, r2
   28f40:	b2d2      	uxtb	r2, r2
   28f42:	701a      	strb	r2, [r3, #0]
	while (length--) {
   28f44:	1dbb      	adds	r3, r7, #6
   28f46:	881b      	ldrh	r3, [r3, #0]
   28f48:	1dba      	adds	r2, r7, #6
   28f4a:	1e59      	subs	r1, r3, #1
   28f4c:	8011      	strh	r1, [r2, #0]
   28f4e:	2b00      	cmp	r3, #0
   28f50:	d199      	bne.n	28e86 <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
   28f52:	2300      	movs	r3, #0
}
   28f54:	0018      	movs	r0, r3
   28f56:	46bd      	mov	sp, r7
   28f58:	b007      	add	sp, #28
   28f5a:	bd90      	pop	{r4, r7, pc}
   28f5c:	000288b1 	.word	0x000288b1
   28f60:	00028901 	.word	0x00028901
   28f64:	000288d9 	.word	0x000288d9
   28f68:	00028949 	.word	0x00028949

00028f6c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
   28f6c:	b580      	push	{r7, lr}
   28f6e:	b086      	sub	sp, #24
   28f70:	af00      	add	r7, sp, #0
   28f72:	60f8      	str	r0, [r7, #12]
   28f74:	60b9      	str	r1, [r7, #8]
   28f76:	1dfb      	adds	r3, r7, #7
   28f78:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
   28f7a:	68fb      	ldr	r3, [r7, #12]
   28f7c:	795b      	ldrb	r3, [r3, #5]
   28f7e:	2b01      	cmp	r3, #1
   28f80:	d001      	beq.n	28f86 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
   28f82:	2315      	movs	r3, #21
   28f84:	e05c      	b.n	29040 <spi_select_slave+0xd4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
   28f86:	68fb      	ldr	r3, [r7, #12]
   28f88:	7a1b      	ldrb	r3, [r3, #8]
   28f8a:	2201      	movs	r2, #1
   28f8c:	4053      	eors	r3, r2
   28f8e:	b2db      	uxtb	r3, r3
   28f90:	2b00      	cmp	r3, #0
   28f92:	d054      	beq.n	2903e <spi_select_slave+0xd2>
#  endif
	{
		if (select) {
   28f94:	1dfb      	adds	r3, r7, #7
   28f96:	781b      	ldrb	r3, [r3, #0]
   28f98:	2b00      	cmp	r3, #0
   28f9a:	d04a      	beq.n	29032 <spi_select_slave+0xc6>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
   28f9c:	68bb      	ldr	r3, [r7, #8]
   28f9e:	785b      	ldrb	r3, [r3, #1]
   28fa0:	2b00      	cmp	r3, #0
   28fa2:	d03f      	beq.n	29024 <spi_select_slave+0xb8>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
   28fa4:	68fb      	ldr	r3, [r7, #12]
   28fa6:	0018      	movs	r0, r3
   28fa8:	4b27      	ldr	r3, [pc, #156]	; (29048 <spi_select_slave+0xdc>)
   28faa:	4798      	blx	r3
   28fac:	0003      	movs	r3, r0
   28fae:	001a      	movs	r2, r3
   28fb0:	2301      	movs	r3, #1
   28fb2:	4053      	eors	r3, r2
   28fb4:	b2db      	uxtb	r3, r3
   28fb6:	2b00      	cmp	r3, #0
   28fb8:	d007      	beq.n	28fca <spi_select_slave+0x5e>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
   28fba:	68bb      	ldr	r3, [r7, #8]
   28fbc:	781b      	ldrb	r3, [r3, #0]
   28fbe:	2101      	movs	r1, #1
   28fc0:	0018      	movs	r0, r3
   28fc2:	4b22      	ldr	r3, [pc, #136]	; (2904c <spi_select_slave+0xe0>)
   28fc4:	4798      	blx	r3
					return STATUS_BUSY;
   28fc6:	2305      	movs	r3, #5
   28fc8:	e03a      	b.n	29040 <spi_select_slave+0xd4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   28fca:	68bb      	ldr	r3, [r7, #8]
   28fcc:	781b      	ldrb	r3, [r3, #0]
   28fce:	2100      	movs	r1, #0
   28fd0:	0018      	movs	r0, r3
   28fd2:	4b1e      	ldr	r3, [pc, #120]	; (2904c <spi_select_slave+0xe0>)
   28fd4:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
   28fd6:	68bb      	ldr	r3, [r7, #8]
   28fd8:	789b      	ldrb	r3, [r3, #2]
   28fda:	b29a      	uxth	r2, r3
   28fdc:	68fb      	ldr	r3, [r7, #12]
   28fde:	0011      	movs	r1, r2
   28fe0:	0018      	movs	r0, r3
   28fe2:	4b1b      	ldr	r3, [pc, #108]	; (29050 <spi_select_slave+0xe4>)
   28fe4:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
   28fe6:	68fb      	ldr	r3, [r7, #12]
   28fe8:	79db      	ldrb	r3, [r3, #7]
   28fea:	2201      	movs	r2, #1
   28fec:	4053      	eors	r3, r2
   28fee:	b2db      	uxtb	r3, r3
   28ff0:	2b00      	cmp	r3, #0
   28ff2:	d024      	beq.n	2903e <spi_select_slave+0xd2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
   28ff4:	46c0      	nop			; (mov r8, r8)
   28ff6:	68fb      	ldr	r3, [r7, #12]
   28ff8:	0018      	movs	r0, r3
   28ffa:	4b16      	ldr	r3, [pc, #88]	; (29054 <spi_select_slave+0xe8>)
   28ffc:	4798      	blx	r3
   28ffe:	0003      	movs	r3, r0
   29000:	001a      	movs	r2, r3
   29002:	2301      	movs	r3, #1
   29004:	4053      	eors	r3, r2
   29006:	b2db      	uxtb	r3, r3
   29008:	2b00      	cmp	r3, #0
   2900a:	d1f4      	bne.n	28ff6 <spi_select_slave+0x8a>
					}
					uint16_t flush = 0;
   2900c:	2316      	movs	r3, #22
   2900e:	18fb      	adds	r3, r7, r3
   29010:	2200      	movs	r2, #0
   29012:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
   29014:	2316      	movs	r3, #22
   29016:	18fa      	adds	r2, r7, r3
   29018:	68fb      	ldr	r3, [r7, #12]
   2901a:	0011      	movs	r1, r2
   2901c:	0018      	movs	r0, r3
   2901e:	4b0e      	ldr	r3, [pc, #56]	; (29058 <spi_select_slave+0xec>)
   29020:	4798      	blx	r3
   29022:	e00c      	b.n	2903e <spi_select_slave+0xd2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
   29024:	68bb      	ldr	r3, [r7, #8]
   29026:	781b      	ldrb	r3, [r3, #0]
   29028:	2100      	movs	r1, #0
   2902a:	0018      	movs	r0, r3
   2902c:	4b07      	ldr	r3, [pc, #28]	; (2904c <spi_select_slave+0xe0>)
   2902e:	4798      	blx	r3
   29030:	e005      	b.n	2903e <spi_select_slave+0xd2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
   29032:	68bb      	ldr	r3, [r7, #8]
   29034:	781b      	ldrb	r3, [r3, #0]
   29036:	2101      	movs	r1, #1
   29038:	0018      	movs	r0, r3
   2903a:	4b04      	ldr	r3, [pc, #16]	; (2904c <spi_select_slave+0xe0>)
   2903c:	4798      	blx	r3
		}
	}
	return STATUS_OK;
   2903e:	2300      	movs	r3, #0
}
   29040:	0018      	movs	r0, r3
   29042:	46bd      	mov	sp, r7
   29044:	b006      	add	sp, #24
   29046:	bd80      	pop	{r7, pc}
   29048:	000288b1 	.word	0x000288b1
   2904c:	00028679 	.word	0x00028679
   29050:	00028901 	.word	0x00028901
   29054:	000288d9 	.word	0x000288d9
   29058:	00028949 	.word	0x00028949

0002905c <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
   2905c:	b580      	push	{r7, lr}
   2905e:	b086      	sub	sp, #24
   29060:	af00      	add	r7, sp, #0
   29062:	60f8      	str	r0, [r7, #12]
   29064:	60b9      	str	r1, [r7, #8]
   29066:	1dbb      	adds	r3, r7, #6
   29068:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
   2906a:	68fb      	ldr	r3, [r7, #12]
   2906c:	2238      	movs	r2, #56	; 0x38
   2906e:	5c9b      	ldrb	r3, [r3, r2]
   29070:	b2db      	uxtb	r3, r3
   29072:	2b05      	cmp	r3, #5
   29074:	d101      	bne.n	2907a <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
   29076:	2305      	movs	r3, #5
   29078:	e087      	b.n	2918a <spi_write_buffer_wait+0x12e>
	}
#  endif

	if (length == 0) {
   2907a:	1dbb      	adds	r3, r7, #6
   2907c:	881b      	ldrh	r3, [r3, #0]
   2907e:	2b00      	cmp	r3, #0
   29080:	d101      	bne.n	29086 <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
   29082:	2317      	movs	r3, #23
   29084:	e081      	b.n	2918a <spi_write_buffer_wait+0x12e>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
   29086:	2316      	movs	r3, #22
   29088:	18fb      	adds	r3, r7, r3
   2908a:	2200      	movs	r2, #0
   2908c:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
   2908e:	2314      	movs	r3, #20
   29090:	18fb      	adds	r3, r7, r3
   29092:	1dba      	adds	r2, r7, #6
   29094:	8812      	ldrh	r2, [r2, #0]
   29096:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
   29098:	e05f      	b.n	2915a <spi_write_buffer_wait+0xfe>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
   2909a:	46c0      	nop			; (mov r8, r8)
   2909c:	68fb      	ldr	r3, [r7, #12]
   2909e:	0018      	movs	r0, r3
   290a0:	4b3c      	ldr	r3, [pc, #240]	; (29194 <spi_write_buffer_wait+0x138>)
   290a2:	4798      	blx	r3
   290a4:	0003      	movs	r3, r0
   290a6:	001a      	movs	r2, r3
   290a8:	2301      	movs	r3, #1
   290aa:	4053      	eors	r3, r2
   290ac:	b2db      	uxtb	r3, r3
   290ae:	2b00      	cmp	r3, #0
   290b0:	d1f4      	bne.n	2909c <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
   290b2:	2316      	movs	r3, #22
   290b4:	18fb      	adds	r3, r7, r3
   290b6:	881b      	ldrh	r3, [r3, #0]
   290b8:	2216      	movs	r2, #22
   290ba:	18ba      	adds	r2, r7, r2
   290bc:	1c59      	adds	r1, r3, #1
   290be:	8011      	strh	r1, [r2, #0]
   290c0:	001a      	movs	r2, r3
   290c2:	68bb      	ldr	r3, [r7, #8]
   290c4:	189b      	adds	r3, r3, r2
   290c6:	781a      	ldrb	r2, [r3, #0]
   290c8:	2312      	movs	r3, #18
   290ca:	18fb      	adds	r3, r7, r3
   290cc:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   290ce:	68fb      	ldr	r3, [r7, #12]
   290d0:	799b      	ldrb	r3, [r3, #6]
   290d2:	2b01      	cmp	r3, #1
   290d4:	d115      	bne.n	29102 <spi_write_buffer_wait+0xa6>
			data_to_send |= (tx_data[tx_pos++] << 8);
   290d6:	2316      	movs	r3, #22
   290d8:	18fb      	adds	r3, r7, r3
   290da:	881b      	ldrh	r3, [r3, #0]
   290dc:	2216      	movs	r2, #22
   290de:	18ba      	adds	r2, r7, r2
   290e0:	1c59      	adds	r1, r3, #1
   290e2:	8011      	strh	r1, [r2, #0]
   290e4:	001a      	movs	r2, r3
   290e6:	68bb      	ldr	r3, [r7, #8]
   290e8:	189b      	adds	r3, r3, r2
   290ea:	781b      	ldrb	r3, [r3, #0]
   290ec:	021b      	lsls	r3, r3, #8
   290ee:	b21a      	sxth	r2, r3
   290f0:	2312      	movs	r3, #18
   290f2:	18fb      	adds	r3, r7, r3
   290f4:	2100      	movs	r1, #0
   290f6:	5e5b      	ldrsh	r3, [r3, r1]
   290f8:	4313      	orrs	r3, r2
   290fa:	b21a      	sxth	r2, r3
   290fc:	2312      	movs	r3, #18
   290fe:	18fb      	adds	r3, r7, r3
   29100:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
   29102:	2312      	movs	r3, #18
   29104:	18fb      	adds	r3, r7, r3
   29106:	881a      	ldrh	r2, [r3, #0]
   29108:	68fb      	ldr	r3, [r7, #12]
   2910a:	0011      	movs	r1, r2
   2910c:	0018      	movs	r0, r3
   2910e:	4b22      	ldr	r3, [pc, #136]	; (29198 <spi_write_buffer_wait+0x13c>)
   29110:	4798      	blx	r3

		if (module->receiver_enabled) {
   29112:	68fb      	ldr	r3, [r7, #12]
   29114:	79db      	ldrb	r3, [r3, #7]
   29116:	2214      	movs	r2, #20
   29118:	18ba      	adds	r2, r7, r2
   2911a:	2114      	movs	r1, #20
   2911c:	1879      	adds	r1, r7, r1
   2911e:	8809      	ldrh	r1, [r1, #0]
   29120:	8011      	strh	r1, [r2, #0]
   29122:	2b00      	cmp	r3, #0
   29124:	d019      	beq.n	2915a <spi_write_buffer_wait+0xfe>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
   29126:	46c0      	nop			; (mov r8, r8)
   29128:	68fb      	ldr	r3, [r7, #12]
   2912a:	0018      	movs	r0, r3
   2912c:	4b1b      	ldr	r3, [pc, #108]	; (2919c <spi_write_buffer_wait+0x140>)
   2912e:	4798      	blx	r3
   29130:	0003      	movs	r3, r0
   29132:	001a      	movs	r2, r3
   29134:	2301      	movs	r3, #1
   29136:	4053      	eors	r3, r2
   29138:	b2db      	uxtb	r3, r3
   2913a:	2b00      	cmp	r3, #0
   2913c:	d1f4      	bne.n	29128 <spi_write_buffer_wait+0xcc>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
   2913e:	2310      	movs	r3, #16
   29140:	18fa      	adds	r2, r7, r3
   29142:	68fb      	ldr	r3, [r7, #12]
   29144:	0011      	movs	r1, r2
   29146:	0018      	movs	r0, r3
   29148:	4b15      	ldr	r3, [pc, #84]	; (291a0 <spi_write_buffer_wait+0x144>)
   2914a:	4798      	blx	r3
			flush_length--;
   2914c:	2314      	movs	r3, #20
   2914e:	18fb      	adds	r3, r7, r3
   29150:	881a      	ldrh	r2, [r3, #0]
   29152:	2314      	movs	r3, #20
   29154:	18fb      	adds	r3, r7, r3
   29156:	3a01      	subs	r2, #1
   29158:	801a      	strh	r2, [r3, #0]
	while (length--) {
   2915a:	1dbb      	adds	r3, r7, #6
   2915c:	881b      	ldrh	r3, [r3, #0]
   2915e:	1dba      	adds	r2, r7, #6
   29160:	1e59      	subs	r1, r3, #1
   29162:	8011      	strh	r1, [r2, #0]
   29164:	2b00      	cmp	r3, #0
   29166:	d198      	bne.n	2909a <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
   29168:	68fb      	ldr	r3, [r7, #12]
   2916a:	795b      	ldrb	r3, [r3, #5]
   2916c:	2b01      	cmp	r3, #1
   2916e:	d10b      	bne.n	29188 <spi_write_buffer_wait+0x12c>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
   29170:	46c0      	nop			; (mov r8, r8)
   29172:	68fb      	ldr	r3, [r7, #12]
   29174:	0018      	movs	r0, r3
   29176:	4b0b      	ldr	r3, [pc, #44]	; (291a4 <spi_write_buffer_wait+0x148>)
   29178:	4798      	blx	r3
   2917a:	0003      	movs	r3, r0
   2917c:	001a      	movs	r2, r3
   2917e:	2301      	movs	r3, #1
   29180:	4053      	eors	r3, r2
   29182:	b2db      	uxtb	r3, r3
   29184:	2b00      	cmp	r3, #0
   29186:	d1f4      	bne.n	29172 <spi_write_buffer_wait+0x116>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
   29188:	2300      	movs	r3, #0
}
   2918a:	0018      	movs	r0, r3
   2918c:	46bd      	mov	sp, r7
   2918e:	b006      	add	sp, #24
   29190:	bd80      	pop	{r7, pc}
   29192:	46c0      	nop			; (mov r8, r8)
   29194:	000288b1 	.word	0x000288b1
   29198:	00028901 	.word	0x00028901
   2919c:	000288d9 	.word	0x000288d9
   291a0:	00028949 	.word	0x00028949
   291a4:	00028889 	.word	0x00028889

000291a8 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
   291a8:	b580      	push	{r7, lr}
   291aa:	b084      	sub	sp, #16
   291ac:	af00      	add	r7, sp, #0
   291ae:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   291b0:	687b      	ldr	r3, [r7, #4]
   291b2:	681b      	ldr	r3, [r3, #0]
   291b4:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
   291b6:	687b      	ldr	r3, [r7, #4]
   291b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   291ba:	781b      	ldrb	r3, [r3, #0]
   291bc:	b2da      	uxtb	r2, r3
   291be:	230e      	movs	r3, #14
   291c0:	18fb      	adds	r3, r7, r3
   291c2:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
   291c4:	687b      	ldr	r3, [r7, #4]
   291c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   291c8:	1c5a      	adds	r2, r3, #1
   291ca:	687b      	ldr	r3, [r7, #4]
   291cc:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   291ce:	687b      	ldr	r3, [r7, #4]
   291d0:	799b      	ldrb	r3, [r3, #6]
   291d2:	2b01      	cmp	r3, #1
   291d4:	d113      	bne.n	291fe <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
   291d6:	687b      	ldr	r3, [r7, #4]
   291d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   291da:	781b      	ldrb	r3, [r3, #0]
   291dc:	b2db      	uxtb	r3, r3
   291de:	021b      	lsls	r3, r3, #8
   291e0:	b21a      	sxth	r2, r3
   291e2:	230e      	movs	r3, #14
   291e4:	18fb      	adds	r3, r7, r3
   291e6:	2100      	movs	r1, #0
   291e8:	5e5b      	ldrsh	r3, [r3, r1]
   291ea:	4313      	orrs	r3, r2
   291ec:	b21a      	sxth	r2, r3
   291ee:	230e      	movs	r3, #14
   291f0:	18fb      	adds	r3, r7, r3
   291f2:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
   291f4:	687b      	ldr	r3, [r7, #4]
   291f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   291f8:	1c5a      	adds	r2, r3, #1
   291fa:	687b      	ldr	r3, [r7, #4]
   291fc:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
   291fe:	230e      	movs	r3, #14
   29200:	18fb      	adds	r3, r7, r3
   29202:	881b      	ldrh	r3, [r3, #0]
   29204:	05db      	lsls	r3, r3, #23
   29206:	0dda      	lsrs	r2, r3, #23
   29208:	68bb      	ldr	r3, [r7, #8]
   2920a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
   2920c:	687b      	ldr	r3, [r7, #4]
   2920e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   29210:	b29b      	uxth	r3, r3
   29212:	3b01      	subs	r3, #1
   29214:	b29a      	uxth	r2, r3
   29216:	687b      	ldr	r3, [r7, #4]
   29218:	869a      	strh	r2, [r3, #52]	; 0x34
}
   2921a:	46c0      	nop			; (mov r8, r8)
   2921c:	46bd      	mov	sp, r7
   2921e:	b004      	add	sp, #16
   29220:	bd80      	pop	{r7, pc}
	...

00029224 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
   29224:	b580      	push	{r7, lr}
   29226:	b084      	sub	sp, #16
   29228:	af00      	add	r7, sp, #0
   2922a:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   2922c:	687b      	ldr	r3, [r7, #4]
   2922e:	681b      	ldr	r3, [r3, #0]
   29230:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
   29232:	4b08      	ldr	r3, [pc, #32]	; (29254 <_spi_write_dummy+0x30>)
   29234:	881b      	ldrh	r3, [r3, #0]
   29236:	001a      	movs	r2, r3
   29238:	68fb      	ldr	r3, [r7, #12]
   2923a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   2923c:	687b      	ldr	r3, [r7, #4]
   2923e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   29240:	b29b      	uxth	r3, r3
   29242:	3b01      	subs	r3, #1
   29244:	b29a      	uxth	r2, r3
   29246:	687b      	ldr	r3, [r7, #4]
   29248:	865a      	strh	r2, [r3, #50]	; 0x32
}
   2924a:	46c0      	nop			; (mov r8, r8)
   2924c:	46bd      	mov	sp, r7
   2924e:	b004      	add	sp, #16
   29250:	bd80      	pop	{r7, pc}
   29252:	46c0      	nop			; (mov r8, r8)
   29254:	20005c70 	.word	0x20005c70

00029258 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
   29258:	b580      	push	{r7, lr}
   2925a:	b084      	sub	sp, #16
   2925c:	af00      	add	r7, sp, #0
   2925e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   29260:	687b      	ldr	r3, [r7, #4]
   29262:	681b      	ldr	r3, [r3, #0]
   29264:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
   29266:	230a      	movs	r3, #10
   29268:	18fb      	adds	r3, r7, r3
   2926a:	2200      	movs	r2, #0
   2926c:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
   2926e:	68fb      	ldr	r3, [r7, #12]
   29270:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   29272:	230a      	movs	r3, #10
   29274:	18fb      	adds	r3, r7, r3
   29276:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
   29278:	687b      	ldr	r3, [r7, #4]
   2927a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   2927c:	b29b      	uxth	r3, r3
   2927e:	3b01      	subs	r3, #1
   29280:	b29a      	uxth	r2, r3
   29282:	687b      	ldr	r3, [r7, #4]
   29284:	865a      	strh	r2, [r3, #50]	; 0x32
}
   29286:	46c0      	nop			; (mov r8, r8)
   29288:	46bd      	mov	sp, r7
   2928a:	b004      	add	sp, #16
   2928c:	bd80      	pop	{r7, pc}

0002928e <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
   2928e:	b580      	push	{r7, lr}
   29290:	b084      	sub	sp, #16
   29292:	af00      	add	r7, sp, #0
   29294:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   29296:	687b      	ldr	r3, [r7, #4]
   29298:	681b      	ldr	r3, [r3, #0]
   2929a:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
   2929c:	68fb      	ldr	r3, [r7, #12]
   2929e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   292a0:	b29a      	uxth	r2, r3
   292a2:	230a      	movs	r3, #10
   292a4:	18fb      	adds	r3, r7, r3
   292a6:	05d2      	lsls	r2, r2, #23
   292a8:	0dd2      	lsrs	r2, r2, #23
   292aa:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
   292ac:	687b      	ldr	r3, [r7, #4]
   292ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   292b0:	220a      	movs	r2, #10
   292b2:	18ba      	adds	r2, r7, r2
   292b4:	8812      	ldrh	r2, [r2, #0]
   292b6:	b2d2      	uxtb	r2, r2
   292b8:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
   292ba:	687b      	ldr	r3, [r7, #4]
   292bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   292be:	1c5a      	adds	r2, r3, #1
   292c0:	687b      	ldr	r3, [r7, #4]
   292c2:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
   292c4:	687b      	ldr	r3, [r7, #4]
   292c6:	799b      	ldrb	r3, [r3, #6]
   292c8:	2b01      	cmp	r3, #1
   292ca:	d10d      	bne.n	292e8 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
   292cc:	687b      	ldr	r3, [r7, #4]
   292ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   292d0:	220a      	movs	r2, #10
   292d2:	18ba      	adds	r2, r7, r2
   292d4:	8812      	ldrh	r2, [r2, #0]
   292d6:	0a12      	lsrs	r2, r2, #8
   292d8:	b292      	uxth	r2, r2
   292da:	b2d2      	uxtb	r2, r2
   292dc:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
   292de:	687b      	ldr	r3, [r7, #4]
   292e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   292e2:	1c5a      	adds	r2, r3, #1
   292e4:	687b      	ldr	r3, [r7, #4]
   292e6:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
   292e8:	687b      	ldr	r3, [r7, #4]
   292ea:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   292ec:	b29b      	uxth	r3, r3
   292ee:	3b01      	subs	r3, #1
   292f0:	b29a      	uxth	r2, r3
   292f2:	687b      	ldr	r3, [r7, #4]
   292f4:	861a      	strh	r2, [r3, #48]	; 0x30
}
   292f6:	46c0      	nop			; (mov r8, r8)
   292f8:	46bd      	mov	sp, r7
   292fa:	b004      	add	sp, #16
   292fc:	bd80      	pop	{r7, pc}
	...

00029300 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
   29300:	b580      	push	{r7, lr}
   29302:	b086      	sub	sp, #24
   29304:	af00      	add	r7, sp, #0
   29306:	0002      	movs	r2, r0
   29308:	1dfb      	adds	r3, r7, #7
   2930a:	701a      	strb	r2, [r3, #0]
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
   2930c:	1dfb      	adds	r3, r7, #7
   2930e:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
   29310:	4b96      	ldr	r3, [pc, #600]	; (2956c <_spi_interrupt_handler+0x26c>)
   29312:	0092      	lsls	r2, r2, #2
   29314:	58d3      	ldr	r3, [r2, r3]
   29316:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
   29318:	697b      	ldr	r3, [r7, #20]
   2931a:	681b      	ldr	r3, [r3, #0]
   2931c:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
   2931e:	697b      	ldr	r3, [r7, #20]
   29320:	2237      	movs	r2, #55	; 0x37
   29322:	5c9a      	ldrb	r2, [r3, r2]
   29324:	697b      	ldr	r3, [r7, #20]
   29326:	2136      	movs	r1, #54	; 0x36
   29328:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
   2932a:	230f      	movs	r3, #15
   2932c:	18fb      	adds	r3, r7, r3
   2932e:	400a      	ands	r2, r1
   29330:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
   29332:	693b      	ldr	r3, [r7, #16]
   29334:	7e1b      	ldrb	r3, [r3, #24]
   29336:	b2da      	uxtb	r2, r3
   29338:	230c      	movs	r3, #12
   2933a:	18fb      	adds	r3, r7, r3
   2933c:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
   2933e:	693b      	ldr	r3, [r7, #16]
   29340:	7d9b      	ldrb	r3, [r3, #22]
   29342:	b2db      	uxtb	r3, r3
   29344:	b29a      	uxth	r2, r3
   29346:	230c      	movs	r3, #12
   29348:	18fb      	adds	r3, r7, r3
   2934a:	210c      	movs	r1, #12
   2934c:	1879      	adds	r1, r7, r1
   2934e:	8809      	ldrh	r1, [r1, #0]
   29350:	400a      	ands	r2, r1
   29352:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
   29354:	230c      	movs	r3, #12
   29356:	18fb      	adds	r3, r7, r3
   29358:	881b      	ldrh	r3, [r3, #0]
   2935a:	2201      	movs	r2, #1
   2935c:	4013      	ands	r3, r2
   2935e:	d038      	beq.n	293d2 <_spi_interrupt_handler+0xd2>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   29360:	697b      	ldr	r3, [r7, #20]
   29362:	795b      	ldrb	r3, [r3, #5]
   29364:	2b01      	cmp	r3, #1
   29366:	d110      	bne.n	2938a <_spi_interrupt_handler+0x8a>
			(module->dir == SPI_DIRECTION_READ)) {
   29368:	697b      	ldr	r3, [r7, #20]
   2936a:	7a5b      	ldrb	r3, [r3, #9]
   2936c:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   2936e:	2b00      	cmp	r3, #0
   29370:	d10b      	bne.n	2938a <_spi_interrupt_handler+0x8a>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
   29372:	697b      	ldr	r3, [r7, #20]
   29374:	0018      	movs	r0, r3
   29376:	4b7e      	ldr	r3, [pc, #504]	; (29570 <_spi_interrupt_handler+0x270>)
   29378:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
   2937a:	697b      	ldr	r3, [r7, #20]
   2937c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   2937e:	b29b      	uxth	r3, r3
   29380:	2b00      	cmp	r3, #0
   29382:	d102      	bne.n	2938a <_spi_interrupt_handler+0x8a>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   29384:	693b      	ldr	r3, [r7, #16]
   29386:	2201      	movs	r2, #1
   29388:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
   2938a:	697b      	ldr	r3, [r7, #20]
   2938c:	795b      	ldrb	r3, [r3, #5]
		if (0
   2938e:	2b01      	cmp	r3, #1
   29390:	d11f      	bne.n	293d2 <_spi_interrupt_handler+0xd2>
			(module->dir != SPI_DIRECTION_READ))
   29392:	697b      	ldr	r3, [r7, #20]
   29394:	7a5b      	ldrb	r3, [r3, #9]
   29396:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
   29398:	2b00      	cmp	r3, #0
   2939a:	d01a      	beq.n	293d2 <_spi_interrupt_handler+0xd2>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
   2939c:	697b      	ldr	r3, [r7, #20]
   2939e:	0018      	movs	r0, r3
   293a0:	4b74      	ldr	r3, [pc, #464]	; (29574 <_spi_interrupt_handler+0x274>)
   293a2:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
   293a4:	697b      	ldr	r3, [r7, #20]
   293a6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   293a8:	b29b      	uxth	r3, r3
   293aa:	2b00      	cmp	r3, #0
   293ac:	d111      	bne.n	293d2 <_spi_interrupt_handler+0xd2>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
   293ae:	693b      	ldr	r3, [r7, #16]
   293b0:	2201      	movs	r2, #1
   293b2:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
   293b4:	697b      	ldr	r3, [r7, #20]
   293b6:	7a5b      	ldrb	r3, [r3, #9]
   293b8:	b2db      	uxtb	r3, r3
   293ba:	2b01      	cmp	r3, #1
   293bc:	d109      	bne.n	293d2 <_spi_interrupt_handler+0xd2>
						!(module->receiver_enabled)) {
   293be:	697b      	ldr	r3, [r7, #20]
   293c0:	79db      	ldrb	r3, [r3, #7]
   293c2:	2201      	movs	r2, #1
   293c4:	4053      	eors	r3, r2
   293c6:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
   293c8:	2b00      	cmp	r3, #0
   293ca:	d002      	beq.n	293d2 <_spi_interrupt_handler+0xd2>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
   293cc:	693b      	ldr	r3, [r7, #16]
   293ce:	2202      	movs	r2, #2
   293d0:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
   293d2:	230c      	movs	r3, #12
   293d4:	18fb      	adds	r3, r7, r3
   293d6:	881b      	ldrh	r3, [r3, #0]
   293d8:	2204      	movs	r2, #4
   293da:	4013      	ands	r3, r2
   293dc:	d100      	bne.n	293e0 <_spi_interrupt_handler+0xe0>
   293de:	e07e      	b.n	294de <_spi_interrupt_handler+0x1de>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
   293e0:	693b      	ldr	r3, [r7, #16]
   293e2:	8b5b      	ldrh	r3, [r3, #26]
   293e4:	b29b      	uxth	r3, r3
   293e6:	001a      	movs	r2, r3
   293e8:	2304      	movs	r3, #4
   293ea:	4013      	ands	r3, r2
   293ec:	d022      	beq.n	29434 <_spi_interrupt_handler+0x134>
			if (module->dir != SPI_DIRECTION_WRITE) {
   293ee:	697b      	ldr	r3, [r7, #20]
   293f0:	7a5b      	ldrb	r3, [r3, #9]
   293f2:	b2db      	uxtb	r3, r3
   293f4:	2b01      	cmp	r3, #1
   293f6:	d014      	beq.n	29422 <_spi_interrupt_handler+0x122>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
   293f8:	697b      	ldr	r3, [r7, #20]
   293fa:	2238      	movs	r2, #56	; 0x38
   293fc:	211e      	movs	r1, #30
   293fe:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
   29400:	697b      	ldr	r3, [r7, #20]
   29402:	2203      	movs	r2, #3
   29404:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
   29406:	693b      	ldr	r3, [r7, #16]
   29408:	2205      	movs	r2, #5
   2940a:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
   2940c:	230f      	movs	r3, #15
   2940e:	18fb      	adds	r3, r7, r3
   29410:	781b      	ldrb	r3, [r3, #0]
   29412:	2208      	movs	r2, #8
   29414:	4013      	ands	r3, r2
   29416:	d004      	beq.n	29422 <_spi_interrupt_handler+0x122>
					(module->callback[SPI_CALLBACK_ERROR])(module);
   29418:	697b      	ldr	r3, [r7, #20]
   2941a:	699b      	ldr	r3, [r3, #24]
   2941c:	697a      	ldr	r2, [r7, #20]
   2941e:	0010      	movs	r0, r2
   29420:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
   29422:	693b      	ldr	r3, [r7, #16]
   29424:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   29426:	230a      	movs	r3, #10
   29428:	18fb      	adds	r3, r7, r3
   2942a:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
   2942c:	693b      	ldr	r3, [r7, #16]
   2942e:	2204      	movs	r2, #4
   29430:	835a      	strh	r2, [r3, #26]
   29432:	e054      	b.n	294de <_spi_interrupt_handler+0x1de>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
   29434:	697b      	ldr	r3, [r7, #20]
   29436:	7a5b      	ldrb	r3, [r3, #9]
   29438:	b2db      	uxtb	r3, r3
   2943a:	2b01      	cmp	r3, #1
   2943c:	d11e      	bne.n	2947c <_spi_interrupt_handler+0x17c>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
   2943e:	697b      	ldr	r3, [r7, #20]
   29440:	0018      	movs	r0, r3
   29442:	4b4d      	ldr	r3, [pc, #308]	; (29578 <_spi_interrupt_handler+0x278>)
   29444:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
   29446:	697b      	ldr	r3, [r7, #20]
   29448:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
   2944a:	b29b      	uxth	r3, r3
   2944c:	2b00      	cmp	r3, #0
   2944e:	d146      	bne.n	294de <_spi_interrupt_handler+0x1de>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   29450:	693b      	ldr	r3, [r7, #16]
   29452:	2204      	movs	r2, #4
   29454:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
   29456:	697b      	ldr	r3, [r7, #20]
   29458:	2238      	movs	r2, #56	; 0x38
   2945a:	2100      	movs	r1, #0
   2945c:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
   2945e:	697b      	ldr	r3, [r7, #20]
   29460:	2203      	movs	r2, #3
   29462:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
   29464:	230f      	movs	r3, #15
   29466:	18fb      	adds	r3, r7, r3
   29468:	781b      	ldrb	r3, [r3, #0]
   2946a:	2201      	movs	r2, #1
   2946c:	4013      	ands	r3, r2
   2946e:	d036      	beq.n	294de <_spi_interrupt_handler+0x1de>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
   29470:	697b      	ldr	r3, [r7, #20]
   29472:	68db      	ldr	r3, [r3, #12]
   29474:	697a      	ldr	r2, [r7, #20]
   29476:	0010      	movs	r0, r2
   29478:	4798      	blx	r3
   2947a:	e030      	b.n	294de <_spi_interrupt_handler+0x1de>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
   2947c:	697b      	ldr	r3, [r7, #20]
   2947e:	0018      	movs	r0, r3
   29480:	4b3e      	ldr	r3, [pc, #248]	; (2957c <_spi_interrupt_handler+0x27c>)
   29482:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
   29484:	697b      	ldr	r3, [r7, #20]
   29486:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
   29488:	b29b      	uxth	r3, r3
   2948a:	2b00      	cmp	r3, #0
   2948c:	d127      	bne.n	294de <_spi_interrupt_handler+0x1de>
					module->status = STATUS_OK;
   2948e:	697b      	ldr	r3, [r7, #20]
   29490:	2238      	movs	r2, #56	; 0x38
   29492:	2100      	movs	r1, #0
   29494:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
   29496:	693b      	ldr	r3, [r7, #16]
   29498:	2204      	movs	r2, #4
   2949a:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
   2949c:	697b      	ldr	r3, [r7, #20]
   2949e:	7a5b      	ldrb	r3, [r3, #9]
   294a0:	b2db      	uxtb	r3, r3
   294a2:	2b02      	cmp	r3, #2
   294a4:	d10b      	bne.n	294be <_spi_interrupt_handler+0x1be>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
   294a6:	230f      	movs	r3, #15
   294a8:	18fb      	adds	r3, r7, r3
   294aa:	781b      	ldrb	r3, [r3, #0]
   294ac:	2204      	movs	r2, #4
   294ae:	4013      	ands	r3, r2
   294b0:	d015      	beq.n	294de <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
   294b2:	697b      	ldr	r3, [r7, #20]
   294b4:	695b      	ldr	r3, [r3, #20]
   294b6:	697a      	ldr	r2, [r7, #20]
   294b8:	0010      	movs	r0, r2
   294ba:	4798      	blx	r3
   294bc:	e00f      	b.n	294de <_spi_interrupt_handler+0x1de>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
   294be:	697b      	ldr	r3, [r7, #20]
   294c0:	7a5b      	ldrb	r3, [r3, #9]
   294c2:	b2db      	uxtb	r3, r3
   294c4:	2b00      	cmp	r3, #0
   294c6:	d10a      	bne.n	294de <_spi_interrupt_handler+0x1de>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
   294c8:	230f      	movs	r3, #15
   294ca:	18fb      	adds	r3, r7, r3
   294cc:	781b      	ldrb	r3, [r3, #0]
   294ce:	2202      	movs	r2, #2
   294d0:	4013      	ands	r3, r2
   294d2:	d004      	beq.n	294de <_spi_interrupt_handler+0x1de>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
   294d4:	697b      	ldr	r3, [r7, #20]
   294d6:	691b      	ldr	r3, [r3, #16]
   294d8:	697a      	ldr	r2, [r7, #20]
   294da:	0010      	movs	r0, r2
   294dc:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
   294de:	230c      	movs	r3, #12
   294e0:	18fb      	adds	r3, r7, r3
   294e2:	881b      	ldrh	r3, [r3, #0]
   294e4:	2202      	movs	r2, #2
   294e6:	4013      	ands	r3, r2
   294e8:	d024      	beq.n	29534 <_spi_interrupt_handler+0x234>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
   294ea:	697b      	ldr	r3, [r7, #20]
   294ec:	795b      	ldrb	r3, [r3, #5]
   294ee:	2b01      	cmp	r3, #1
   294f0:	d120      	bne.n	29534 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   294f2:	697b      	ldr	r3, [r7, #20]
   294f4:	7a5b      	ldrb	r3, [r3, #9]
   294f6:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
   294f8:	2b01      	cmp	r3, #1
   294fa:	d11b      	bne.n	29534 <_spi_interrupt_handler+0x234>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
   294fc:	697b      	ldr	r3, [r7, #20]
   294fe:	79db      	ldrb	r3, [r3, #7]
   29500:	2201      	movs	r2, #1
   29502:	4053      	eors	r3, r2
   29504:	b2db      	uxtb	r3, r3
   29506:	2b00      	cmp	r3, #0
   29508:	d014      	beq.n	29534 <_spi_interrupt_handler+0x234>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
   2950a:	693b      	ldr	r3, [r7, #16]
   2950c:	2202      	movs	r2, #2
   2950e:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
   29510:	697b      	ldr	r3, [r7, #20]
   29512:	2203      	movs	r2, #3
   29514:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
   29516:	697b      	ldr	r3, [r7, #20]
   29518:	2238      	movs	r2, #56	; 0x38
   2951a:	2100      	movs	r1, #0
   2951c:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
   2951e:	230f      	movs	r3, #15
   29520:	18fb      	adds	r3, r7, r3
   29522:	781b      	ldrb	r3, [r3, #0]
   29524:	2201      	movs	r2, #1
   29526:	4013      	ands	r3, r2
   29528:	d004      	beq.n	29534 <_spi_interrupt_handler+0x234>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
   2952a:	697b      	ldr	r3, [r7, #20]
   2952c:	68db      	ldr	r3, [r3, #12]
   2952e:	697a      	ldr	r2, [r7, #20]
   29530:	0010      	movs	r0, r2
   29532:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
   29534:	230c      	movs	r3, #12
   29536:	18fb      	adds	r3, r7, r3
   29538:	881b      	ldrh	r3, [r3, #0]
   2953a:	2280      	movs	r2, #128	; 0x80
   2953c:	4013      	ands	r3, r2
   2953e:	d010      	beq.n	29562 <_spi_interrupt_handler+0x262>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   29540:	693b      	ldr	r3, [r7, #16]
   29542:	2280      	movs	r2, #128	; 0x80
   29544:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
   29546:	693b      	ldr	r3, [r7, #16]
   29548:	2280      	movs	r2, #128	; 0x80
   2954a:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
   2954c:	230f      	movs	r3, #15
   2954e:	18fb      	adds	r3, r7, r3
   29550:	781b      	ldrb	r3, [r3, #0]
   29552:	2240      	movs	r2, #64	; 0x40
   29554:	4013      	ands	r3, r2
   29556:	d004      	beq.n	29562 <_spi_interrupt_handler+0x262>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
   29558:	697b      	ldr	r3, [r7, #20]
   2955a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2955c:	697a      	ldr	r2, [r7, #20]
   2955e:	0010      	movs	r0, r2
   29560:	4798      	blx	r3
		}
	}
#  endif
}
   29562:	46c0      	nop			; (mov r8, r8)
   29564:	46bd      	mov	sp, r7
   29566:	b006      	add	sp, #24
   29568:	bd80      	pop	{r7, pc}
   2956a:	46c0      	nop			; (mov r8, r8)
   2956c:	20005c58 	.word	0x20005c58
   29570:	00029225 	.word	0x00029225
   29574:	000291a9 	.word	0x000291a9
   29578:	00029259 	.word	0x00029259
   2957c:	0002928f 	.word	0x0002928f

00029580 <system_gclk_chan_get_config_defaults>:
{
   29580:	b580      	push	{r7, lr}
   29582:	b082      	sub	sp, #8
   29584:	af00      	add	r7, sp, #0
   29586:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   29588:	687b      	ldr	r3, [r7, #4]
   2958a:	2200      	movs	r2, #0
   2958c:	701a      	strb	r2, [r3, #0]
}
   2958e:	46c0      	nop			; (mov r8, r8)
   29590:	46bd      	mov	sp, r7
   29592:	b002      	add	sp, #8
   29594:	bd80      	pop	{r7, pc}
	...

00029598 <system_apb_clock_set_mask>:
{
   29598:	b580      	push	{r7, lr}
   2959a:	b082      	sub	sp, #8
   2959c:	af00      	add	r7, sp, #0
   2959e:	0002      	movs	r2, r0
   295a0:	6039      	str	r1, [r7, #0]
   295a2:	1dfb      	adds	r3, r7, #7
   295a4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   295a6:	1dfb      	adds	r3, r7, #7
   295a8:	781b      	ldrb	r3, [r3, #0]
   295aa:	2b01      	cmp	r3, #1
   295ac:	d00a      	beq.n	295c4 <system_apb_clock_set_mask+0x2c>
   295ae:	2b02      	cmp	r3, #2
   295b0:	d00f      	beq.n	295d2 <system_apb_clock_set_mask+0x3a>
   295b2:	2b00      	cmp	r3, #0
   295b4:	d114      	bne.n	295e0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   295b6:	4b0e      	ldr	r3, [pc, #56]	; (295f0 <system_apb_clock_set_mask+0x58>)
   295b8:	4a0d      	ldr	r2, [pc, #52]	; (295f0 <system_apb_clock_set_mask+0x58>)
   295ba:	6991      	ldr	r1, [r2, #24]
   295bc:	683a      	ldr	r2, [r7, #0]
   295be:	430a      	orrs	r2, r1
   295c0:	619a      	str	r2, [r3, #24]
			break;
   295c2:	e00f      	b.n	295e4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   295c4:	4b0a      	ldr	r3, [pc, #40]	; (295f0 <system_apb_clock_set_mask+0x58>)
   295c6:	4a0a      	ldr	r2, [pc, #40]	; (295f0 <system_apb_clock_set_mask+0x58>)
   295c8:	69d1      	ldr	r1, [r2, #28]
   295ca:	683a      	ldr	r2, [r7, #0]
   295cc:	430a      	orrs	r2, r1
   295ce:	61da      	str	r2, [r3, #28]
			break;
   295d0:	e008      	b.n	295e4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   295d2:	4b07      	ldr	r3, [pc, #28]	; (295f0 <system_apb_clock_set_mask+0x58>)
   295d4:	4a06      	ldr	r2, [pc, #24]	; (295f0 <system_apb_clock_set_mask+0x58>)
   295d6:	6a11      	ldr	r1, [r2, #32]
   295d8:	683a      	ldr	r2, [r7, #0]
   295da:	430a      	orrs	r2, r1
   295dc:	621a      	str	r2, [r3, #32]
			break;
   295de:	e001      	b.n	295e4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   295e0:	2317      	movs	r3, #23
   295e2:	e000      	b.n	295e6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   295e4:	2300      	movs	r3, #0
}
   295e6:	0018      	movs	r0, r3
   295e8:	46bd      	mov	sp, r7
   295ea:	b002      	add	sp, #8
   295ec:	bd80      	pop	{r7, pc}
   295ee:	46c0      	nop			; (mov r8, r8)
   295f0:	40000400 	.word	0x40000400

000295f4 <system_pinmux_get_config_defaults>:
{
   295f4:	b580      	push	{r7, lr}
   295f6:	b082      	sub	sp, #8
   295f8:	af00      	add	r7, sp, #0
   295fa:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   295fc:	687b      	ldr	r3, [r7, #4]
   295fe:	2280      	movs	r2, #128	; 0x80
   29600:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   29602:	687b      	ldr	r3, [r7, #4]
   29604:	2200      	movs	r2, #0
   29606:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   29608:	687b      	ldr	r3, [r7, #4]
   2960a:	2201      	movs	r2, #1
   2960c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2960e:	687b      	ldr	r3, [r7, #4]
   29610:	2200      	movs	r2, #0
   29612:	70da      	strb	r2, [r3, #3]
}
   29614:	46c0      	nop			; (mov r8, r8)
   29616:	46bd      	mov	sp, r7
   29618:	b002      	add	sp, #8
   2961a:	bd80      	pop	{r7, pc}

0002961c <system_is_debugger_present>:
{
   2961c:	b580      	push	{r7, lr}
   2961e:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
   29620:	4b05      	ldr	r3, [pc, #20]	; (29638 <system_is_debugger_present+0x1c>)
   29622:	789b      	ldrb	r3, [r3, #2]
   29624:	b2db      	uxtb	r3, r3
   29626:	001a      	movs	r2, r3
   29628:	2302      	movs	r3, #2
   2962a:	4013      	ands	r3, r2
   2962c:	1e5a      	subs	r2, r3, #1
   2962e:	4193      	sbcs	r3, r2
   29630:	b2db      	uxtb	r3, r3
}
   29632:	0018      	movs	r0, r3
   29634:	46bd      	mov	sp, r7
   29636:	bd80      	pop	{r7, pc}
   29638:	41002000 	.word	0x41002000

0002963c <usart_is_syncing>:
{
   2963c:	b580      	push	{r7, lr}
   2963e:	b084      	sub	sp, #16
   29640:	af00      	add	r7, sp, #0
   29642:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   29644:	687b      	ldr	r3, [r7, #4]
   29646:	681b      	ldr	r3, [r3, #0]
   29648:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   2964a:	68fb      	ldr	r3, [r7, #12]
   2964c:	69db      	ldr	r3, [r3, #28]
   2964e:	1e5a      	subs	r2, r3, #1
   29650:	4193      	sbcs	r3, r2
   29652:	b2db      	uxtb	r3, r3
}
   29654:	0018      	movs	r0, r3
   29656:	46bd      	mov	sp, r7
   29658:	b004      	add	sp, #16
   2965a:	bd80      	pop	{r7, pc}

0002965c <_usart_wait_for_sync>:
{
   2965c:	b580      	push	{r7, lr}
   2965e:	b082      	sub	sp, #8
   29660:	af00      	add	r7, sp, #0
   29662:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   29664:	46c0      	nop			; (mov r8, r8)
   29666:	687b      	ldr	r3, [r7, #4]
   29668:	0018      	movs	r0, r3
   2966a:	4b04      	ldr	r3, [pc, #16]	; (2967c <_usart_wait_for_sync+0x20>)
   2966c:	4798      	blx	r3
   2966e:	1e03      	subs	r3, r0, #0
   29670:	d1f9      	bne.n	29666 <_usart_wait_for_sync+0xa>
}
   29672:	46c0      	nop			; (mov r8, r8)
   29674:	46bd      	mov	sp, r7
   29676:	b002      	add	sp, #8
   29678:	bd80      	pop	{r7, pc}
   2967a:	46c0      	nop			; (mov r8, r8)
   2967c:	0002963d 	.word	0x0002963d

00029680 <_usart_set_config>:
 * Set Configuration of the USART module
 */
static enum status_code _usart_set_config(
		struct usart_module *const module,
		const struct usart_config *const config)
{
   29680:	b5b0      	push	{r4, r5, r7, lr}
   29682:	b08c      	sub	sp, #48	; 0x30
   29684:	af02      	add	r7, sp, #8
   29686:	6078      	str	r0, [r7, #4]
   29688:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   2968a:	687b      	ldr	r3, [r7, #4]
   2968c:	681b      	ldr	r3, [r3, #0]
   2968e:	61bb      	str	r3, [r7, #24]

	/* Index for generic clock */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   29690:	687b      	ldr	r3, [r7, #4]
   29692:	681b      	ldr	r3, [r3, #0]
   29694:	0018      	movs	r0, r3
   29696:	4bab      	ldr	r3, [pc, #684]	; (29944 <_usart_set_config+0x2c4>)
   29698:	4798      	blx	r3
   2969a:	0003      	movs	r3, r0
   2969c:	617b      	str	r3, [r7, #20]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   2969e:	697b      	ldr	r3, [r7, #20]
   296a0:	3314      	adds	r3, #20
   296a2:	613b      	str	r3, [r7, #16]

	/* Cache new register values to minimize the number of register writes */
	uint32_t ctrla = 0;
   296a4:	2300      	movs	r3, #0
   296a6:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t ctrlb = 0;
   296a8:	2300      	movs	r3, #0
   296aa:	623b      	str	r3, [r7, #32]
#ifdef FEATURE_USART_ISO7816
	uint32_t ctrlc = 0;
#endif
	uint16_t baud  = 0;
   296ac:	230a      	movs	r3, #10
   296ae:	18fb      	adds	r3, r7, r3
   296b0:	2200      	movs	r2, #0
   296b2:	801a      	strh	r2, [r3, #0]
	uint32_t transfer_mode;

	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   296b4:	231f      	movs	r3, #31
   296b6:	18fb      	adds	r3, r7, r3
   296b8:	2200      	movs	r2, #0
   296ba:	701a      	strb	r2, [r3, #0]
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   296bc:	231e      	movs	r3, #30
   296be:	18fb      	adds	r3, r7, r3
   296c0:	2210      	movs	r2, #16
   296c2:	701a      	strb	r2, [r3, #0]

#ifdef FEATURE_USART_OVER_SAMPLE
	switch (config->sample_rate) {
   296c4:	683b      	ldr	r3, [r7, #0]
   296c6:	8a1b      	ldrh	r3, [r3, #16]
   296c8:	2280      	movs	r2, #128	; 0x80
   296ca:	01d2      	lsls	r2, r2, #7
   296cc:	4293      	cmp	r3, r2
   296ce:	d01c      	beq.n	2970a <_usart_set_config+0x8a>
   296d0:	2280      	movs	r2, #128	; 0x80
   296d2:	01d2      	lsls	r2, r2, #7
   296d4:	4293      	cmp	r3, r2
   296d6:	dc06      	bgt.n	296e6 <_usart_set_config+0x66>
   296d8:	2b00      	cmp	r3, #0
   296da:	d00d      	beq.n	296f8 <_usart_set_config+0x78>
   296dc:	2280      	movs	r2, #128	; 0x80
   296de:	0192      	lsls	r2, r2, #6
   296e0:	4293      	cmp	r3, r2
   296e2:	d024      	beq.n	2972e <_usart_set_config+0xae>
   296e4:	e035      	b.n	29752 <_usart_set_config+0xd2>
   296e6:	22c0      	movs	r2, #192	; 0xc0
   296e8:	01d2      	lsls	r2, r2, #7
   296ea:	4293      	cmp	r3, r2
   296ec:	d028      	beq.n	29740 <_usart_set_config+0xc0>
   296ee:	2280      	movs	r2, #128	; 0x80
   296f0:	0212      	lsls	r2, r2, #8
   296f2:	4293      	cmp	r3, r2
   296f4:	d012      	beq.n	2971c <_usart_set_config+0x9c>
   296f6:	e02c      	b.n	29752 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   296f8:	231f      	movs	r3, #31
   296fa:	18fb      	adds	r3, r7, r3
   296fc:	2200      	movs	r2, #0
   296fe:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   29700:	231e      	movs	r3, #30
   29702:	18fb      	adds	r3, r7, r3
   29704:	2210      	movs	r2, #16
   29706:	701a      	strb	r2, [r3, #0]
			break;
   29708:	e023      	b.n	29752 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2970a:	231f      	movs	r3, #31
   2970c:	18fb      	adds	r3, r7, r3
   2970e:	2200      	movs	r2, #0
   29710:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   29712:	231e      	movs	r3, #30
   29714:	18fb      	adds	r3, r7, r3
   29716:	2208      	movs	r2, #8
   29718:	701a      	strb	r2, [r3, #0]
			break;
   2971a:	e01a      	b.n	29752 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_3X_ARITHMETIC:
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
   2971c:	231f      	movs	r3, #31
   2971e:	18fb      	adds	r3, r7, r3
   29720:	2200      	movs	r2, #0
   29722:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
   29724:	231e      	movs	r3, #30
   29726:	18fb      	adds	r3, r7, r3
   29728:	2203      	movs	r2, #3
   2972a:	701a      	strb	r2, [r3, #0]
			break;
   2972c:	e011      	b.n	29752 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_16X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   2972e:	231f      	movs	r3, #31
   29730:	18fb      	adds	r3, r7, r3
   29732:	2201      	movs	r2, #1
   29734:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
   29736:	231e      	movs	r3, #30
   29738:	18fb      	adds	r3, r7, r3
   2973a:	2210      	movs	r2, #16
   2973c:	701a      	strb	r2, [r3, #0]
			break;
   2973e:	e008      	b.n	29752 <_usart_set_config+0xd2>
		case USART_SAMPLE_RATE_8X_FRACTIONAL:
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
   29740:	231f      	movs	r3, #31
   29742:	18fb      	adds	r3, r7, r3
   29744:	2201      	movs	r2, #1
   29746:	701a      	strb	r2, [r3, #0]
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
   29748:	231e      	movs	r3, #30
   2974a:	18fb      	adds	r3, r7, r3
   2974c:	2208      	movs	r2, #8
   2974e:	701a      	strb	r2, [r3, #0]
			break;
   29750:	46c0      	nop			; (mov r8, r8)
	}
#endif

	/* Set data order, internal muxing, and clock polarity */
	ctrla = (uint32_t)config->data_order |
   29752:	683b      	ldr	r3, [r7, #0]
   29754:	681a      	ldr	r2, [r3, #0]
		(uint32_t)config->mux_setting |
   29756:	683b      	ldr	r3, [r7, #0]
   29758:	68db      	ldr	r3, [r3, #12]
	ctrla = (uint32_t)config->data_order |
   2975a:	431a      	orrs	r2, r3
	#ifdef FEATURE_USART_OVER_SAMPLE
		config->sample_adjustment |
   2975c:	683b      	ldr	r3, [r7, #0]
   2975e:	695b      	ldr	r3, [r3, #20]
		(uint32_t)config->mux_setting |
   29760:	4313      	orrs	r3, r2
		config->sample_rate |
   29762:	683a      	ldr	r2, [r7, #0]
   29764:	8a12      	ldrh	r2, [r2, #16]
		config->sample_adjustment |
   29766:	4313      	orrs	r3, r2
	#endif
	#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
   29768:	683a      	ldr	r2, [r7, #0]
   2976a:	7e12      	ldrb	r2, [r2, #24]
   2976c:	0212      	lsls	r2, r2, #8
		config->sample_rate |
   2976e:	4313      	orrs	r3, r2
	#endif
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
   29770:	683a      	ldr	r2, [r7, #0]
   29772:	2126      	movs	r1, #38	; 0x26
   29774:	5c52      	ldrb	r2, [r2, r1]
   29776:	0752      	lsls	r2, r2, #29
	ctrla = (uint32_t)config->data_order |
   29778:	4313      	orrs	r3, r2
   2977a:	627b      	str	r3, [r7, #36]	; 0x24

	enum status_code status_code = STATUS_OK;
   2977c:	231d      	movs	r3, #29
   2977e:	18fb      	adds	r3, r7, r3
   29780:	2200      	movs	r2, #0
   29782:	701a      	strb	r2, [r3, #0]

	transfer_mode = (uint32_t)config->transfer_mode;
   29784:	683b      	ldr	r3, [r7, #0]
   29786:	685b      	ldr	r3, [r3, #4]
   29788:	60fb      	str	r3, [r7, #12]
#ifdef FEATURE_USART_ISO7816
	if(config->iso7816_config.enabled) {
		baud = config->baudrate;
	} else {
#endif
	switch (transfer_mode)
   2978a:	68fb      	ldr	r3, [r7, #12]
   2978c:	2b00      	cmp	r3, #0
   2978e:	d01e      	beq.n	297ce <_usart_set_config+0x14e>
   29790:	2280      	movs	r2, #128	; 0x80
   29792:	0552      	lsls	r2, r2, #21
   29794:	4293      	cmp	r3, r2
   29796:	d14f      	bne.n	29838 <_usart_set_config+0x1b8>
	{
		case USART_TRANSFER_SYNCHRONOUSLY:
			if (!config->use_external_clock) {
   29798:	683b      	ldr	r3, [r7, #0]
   2979a:	2227      	movs	r2, #39	; 0x27
   2979c:	5c9b      	ldrb	r3, [r3, r2]
   2979e:	2201      	movs	r2, #1
   297a0:	4053      	eors	r3, r2
   297a2:	b2db      	uxtb	r3, r3
   297a4:	2b00      	cmp	r3, #0
   297a6:	d046      	beq.n	29836 <_usart_set_config+0x1b6>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
   297a8:	683b      	ldr	r3, [r7, #0]
   297aa:	6a1d      	ldr	r5, [r3, #32]
   297ac:	693b      	ldr	r3, [r7, #16]
   297ae:	b2db      	uxtb	r3, r3
   297b0:	0018      	movs	r0, r3
   297b2:	4b65      	ldr	r3, [pc, #404]	; (29948 <_usart_set_config+0x2c8>)
   297b4:	4798      	blx	r3
   297b6:	0001      	movs	r1, r0
   297b8:	231d      	movs	r3, #29
   297ba:	18fc      	adds	r4, r7, r3
   297bc:	230a      	movs	r3, #10
   297be:	18fb      	adds	r3, r7, r3
   297c0:	001a      	movs	r2, r3
   297c2:	0028      	movs	r0, r5
   297c4:	4b61      	ldr	r3, [pc, #388]	; (2994c <_usart_set_config+0x2cc>)
   297c6:	4798      	blx	r3
   297c8:	0003      	movs	r3, r0
   297ca:	7023      	strb	r3, [r4, #0]
						system_gclk_chan_get_hz(gclk_index), &baud);
			}

			break;
   297cc:	e033      	b.n	29836 <_usart_set_config+0x1b6>

		case USART_TRANSFER_ASYNCHRONOUSLY:
			if (config->use_external_clock) {
   297ce:	683b      	ldr	r3, [r7, #0]
   297d0:	2227      	movs	r2, #39	; 0x27
   297d2:	5c9b      	ldrb	r3, [r3, r2]
   297d4:	2b00      	cmp	r3, #0
   297d6:	d014      	beq.n	29802 <_usart_set_config+0x182>
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
   297d8:	683b      	ldr	r3, [r7, #0]
   297da:	6a18      	ldr	r0, [r3, #32]
   297dc:	683b      	ldr	r3, [r7, #0]
   297de:	6a99      	ldr	r1, [r3, #40]	; 0x28
				status_code =
   297e0:	231d      	movs	r3, #29
   297e2:	18fc      	adds	r4, r7, r3
   297e4:	231f      	movs	r3, #31
   297e6:	18fb      	adds	r3, r7, r3
   297e8:	781d      	ldrb	r5, [r3, #0]
   297ea:	230a      	movs	r3, #10
   297ec:	18fa      	adds	r2, r7, r3
   297ee:	231e      	movs	r3, #30
   297f0:	18fb      	adds	r3, r7, r3
   297f2:	781b      	ldrb	r3, [r3, #0]
   297f4:	9300      	str	r3, [sp, #0]
   297f6:	002b      	movs	r3, r5
   297f8:	4d55      	ldr	r5, [pc, #340]	; (29950 <_usart_set_config+0x2d0>)
   297fa:	47a8      	blx	r5
   297fc:	0003      	movs	r3, r0
   297fe:	7023      	strb	r3, [r4, #0]
				status_code =
						_sercom_get_async_baud_val(config->baudrate,
							system_gclk_chan_get_hz(gclk_index), &baud, mode, sample_num);
			}

			break;
   29800:	e01a      	b.n	29838 <_usart_set_config+0x1b8>
						_sercom_get_async_baud_val(config->baudrate,
   29802:	683b      	ldr	r3, [r7, #0]
   29804:	6a1d      	ldr	r5, [r3, #32]
   29806:	693b      	ldr	r3, [r7, #16]
   29808:	b2db      	uxtb	r3, r3
   2980a:	0018      	movs	r0, r3
   2980c:	4b4e      	ldr	r3, [pc, #312]	; (29948 <_usart_set_config+0x2c8>)
   2980e:	4798      	blx	r3
				status_code =
   29810:	231d      	movs	r3, #29
   29812:	18fc      	adds	r4, r7, r3
   29814:	231f      	movs	r3, #31
   29816:	18fb      	adds	r3, r7, r3
   29818:	7819      	ldrb	r1, [r3, #0]
   2981a:	230a      	movs	r3, #10
   2981c:	18fa      	adds	r2, r7, r3
   2981e:	231e      	movs	r3, #30
   29820:	18fb      	adds	r3, r7, r3
   29822:	781b      	ldrb	r3, [r3, #0]
   29824:	9300      	str	r3, [sp, #0]
   29826:	000b      	movs	r3, r1
   29828:	0001      	movs	r1, r0
   2982a:	0028      	movs	r0, r5
   2982c:	4d48      	ldr	r5, [pc, #288]	; (29950 <_usart_set_config+0x2d0>)
   2982e:	47a8      	blx	r5
   29830:	0003      	movs	r3, r0
   29832:	7023      	strb	r3, [r4, #0]
			break;
   29834:	e000      	b.n	29838 <_usart_set_config+0x1b8>
			break;
   29836:	46c0      	nop			; (mov r8, r8)
	}

	/* Check if calculating the baudrate failed */
	if (status_code != STATUS_OK) {
   29838:	231d      	movs	r3, #29
   2983a:	18fb      	adds	r3, r7, r3
   2983c:	781b      	ldrb	r3, [r3, #0]
   2983e:	2b00      	cmp	r3, #0
   29840:	d003      	beq.n	2984a <_usart_set_config+0x1ca>
		/* Abort */
		return status_code;
   29842:	231d      	movs	r3, #29
   29844:	18fb      	adds	r3, r7, r3
   29846:	781b      	ldrb	r3, [r3, #0]
   29848:	e077      	b.n	2993a <_usart_set_config+0x2ba>
#ifdef FEATURE_USART_ISO7816
	}
#endif

#ifdef FEATURE_USART_IRDA
	if(config->encoding_format_enable) {
   2984a:	683b      	ldr	r3, [r7, #0]
   2984c:	7e5b      	ldrb	r3, [r3, #25]
   2984e:	2b00      	cmp	r3, #0
   29850:	d003      	beq.n	2985a <_usart_set_config+0x1da>
		usart_hw->RXPL.reg = config->receive_pulse_length;
   29852:	683b      	ldr	r3, [r7, #0]
   29854:	7e9a      	ldrb	r2, [r3, #26]
   29856:	69bb      	ldr	r3, [r7, #24]
   29858:	739a      	strb	r2, [r3, #14]
	}
#endif

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   2985a:	687b      	ldr	r3, [r7, #4]
   2985c:	0018      	movs	r0, r3
   2985e:	4b3d      	ldr	r3, [pc, #244]	; (29954 <_usart_set_config+0x2d4>)
   29860:	4798      	blx	r3

	/*Set baud val */
	usart_hw->BAUD.reg = baud;
   29862:	230a      	movs	r3, #10
   29864:	18fb      	adds	r3, r7, r3
   29866:	881a      	ldrh	r2, [r3, #0]
   29868:	69bb      	ldr	r3, [r7, #24]
   2986a:	819a      	strh	r2, [r3, #12]

	/* Set sample mode */
	ctrla |= transfer_mode;
   2986c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2986e:	68fb      	ldr	r3, [r7, #12]
   29870:	4313      	orrs	r3, r2
   29872:	627b      	str	r3, [r7, #36]	; 0x24

	if (config->use_external_clock == false) {
   29874:	683b      	ldr	r3, [r7, #0]
   29876:	2227      	movs	r2, #39	; 0x27
   29878:	5c9b      	ldrb	r3, [r3, r2]
   2987a:	2201      	movs	r2, #1
   2987c:	4053      	eors	r3, r2
   2987e:	b2db      	uxtb	r3, r3
   29880:	2b00      	cmp	r3, #0
   29882:	d003      	beq.n	2988c <_usart_set_config+0x20c>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
   29884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   29886:	2204      	movs	r2, #4
   29888:	4313      	orrs	r3, r2
   2988a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Set stopbits and enable transceivers */
	ctrlb =  
		#ifdef FEATURE_USART_IRDA
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   2988c:	683b      	ldr	r3, [r7, #0]
   2988e:	7e5b      	ldrb	r3, [r3, #25]
   29890:	029a      	lsls	r2, r3, #10
		#endif
		#ifdef FEATURE_USART_START_FRAME_DECTION
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   29892:	683b      	ldr	r3, [r7, #0]
   29894:	7f1b      	ldrb	r3, [r3, #28]
   29896:	025b      	lsls	r3, r3, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
   29898:	431a      	orrs	r2, r3
		#endif
		#ifdef FEATURE_USART_COLLISION_DECTION
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   2989a:	683b      	ldr	r3, [r7, #0]
   2989c:	7f5b      	ldrb	r3, [r3, #29]
   2989e:	021b      	lsls	r3, r3, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
   298a0:	431a      	orrs	r2, r3
		#endif
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   298a2:	683b      	ldr	r3, [r7, #0]
   298a4:	2124      	movs	r1, #36	; 0x24
   298a6:	5c5b      	ldrb	r3, [r3, r1]
   298a8:	045b      	lsls	r3, r3, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
   298aa:	431a      	orrs	r2, r3
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
   298ac:	683b      	ldr	r3, [r7, #0]
   298ae:	2125      	movs	r1, #37	; 0x25
   298b0:	5c5b      	ldrb	r3, [r3, r1]
   298b2:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
   298b4:	4313      	orrs	r3, r2
	ctrlb =  
   298b6:	623b      	str	r3, [r7, #32]
				ctrlb |= USART_STOPBITS_1;
				break;		
		}
	} else {
#endif
	ctrlb |= (uint32_t)config->stopbits;
   298b8:	683b      	ldr	r3, [r7, #0]
   298ba:	7a9b      	ldrb	r3, [r3, #10]
   298bc:	001a      	movs	r2, r3
   298be:	6a3b      	ldr	r3, [r7, #32]
   298c0:	4313      	orrs	r3, r2
   298c2:	623b      	str	r3, [r7, #32]
	ctrlb |= (uint32_t)config->character_size;
   298c4:	683b      	ldr	r3, [r7, #0]
   298c6:	7adb      	ldrb	r3, [r3, #11]
   298c8:	001a      	movs	r2, r3
   298ca:	6a3b      	ldr	r3, [r7, #32]
   298cc:	4313      	orrs	r3, r2
   298ce:	623b      	str	r3, [r7, #32]
	/* Check parity mode bits */
	if (config->parity != USART_PARITY_NONE) {
   298d0:	683b      	ldr	r3, [r7, #0]
   298d2:	891b      	ldrh	r3, [r3, #8]
   298d4:	2bff      	cmp	r3, #255	; 0xff
   298d6:	d00b      	beq.n	298f0 <_usart_set_config+0x270>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
   298d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   298da:	2280      	movs	r2, #128	; 0x80
   298dc:	0452      	lsls	r2, r2, #17
   298de:	4313      	orrs	r3, r2
   298e0:	627b      	str	r3, [r7, #36]	; 0x24
		ctrlb |= config->parity;
   298e2:	683b      	ldr	r3, [r7, #0]
   298e4:	891b      	ldrh	r3, [r3, #8]
   298e6:	001a      	movs	r2, r3
   298e8:	6a3b      	ldr	r3, [r7, #32]
   298ea:	4313      	orrs	r3, r2
   298ec:	623b      	str	r3, [r7, #32]
   298ee:	e008      	b.n	29902 <_usart_set_config+0x282>
	} else {
#ifdef FEATURE_USART_LIN_SLAVE
		if(config->lin_slave_enable) {
   298f0:	683b      	ldr	r3, [r7, #0]
   298f2:	7edb      	ldrb	r3, [r3, #27]
   298f4:	2b00      	cmp	r3, #0
   298f6:	d004      	beq.n	29902 <_usart_set_config+0x282>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
   298f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   298fa:	2280      	movs	r2, #128	; 0x80
   298fc:	04d2      	lsls	r2, r2, #19
   298fe:	4313      	orrs	r3, r2
   29900:	627b      	str	r3, [r7, #36]	; 0x24
		ctrla |= config->lin_node;
	}
#endif

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
   29902:	683b      	ldr	r3, [r7, #0]
   29904:	222c      	movs	r2, #44	; 0x2c
   29906:	5c9b      	ldrb	r3, [r3, r2]
   29908:	2b00      	cmp	r3, #0
   2990a:	d103      	bne.n	29914 <_usart_set_config+0x294>
   2990c:	4b12      	ldr	r3, [pc, #72]	; (29958 <_usart_set_config+0x2d8>)
   2990e:	4798      	blx	r3
   29910:	1e03      	subs	r3, r0, #0
   29912:	d003      	beq.n	2991c <_usart_set_config+0x29c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
   29914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   29916:	2280      	movs	r2, #128	; 0x80
   29918:	4313      	orrs	r3, r2
   2991a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   2991c:	687b      	ldr	r3, [r7, #4]
   2991e:	0018      	movs	r0, r3
   29920:	4b0c      	ldr	r3, [pc, #48]	; (29954 <_usart_set_config+0x2d4>)
   29922:	4798      	blx	r3

	/* Write configuration to CTRLB */
	usart_hw->CTRLB.reg = ctrlb;
   29924:	69bb      	ldr	r3, [r7, #24]
   29926:	6a3a      	ldr	r2, [r7, #32]
   29928:	605a      	str	r2, [r3, #4]

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);
   2992a:	687b      	ldr	r3, [r7, #4]
   2992c:	0018      	movs	r0, r3
   2992e:	4b09      	ldr	r3, [pc, #36]	; (29954 <_usart_set_config+0x2d4>)
   29930:	4798      	blx	r3

	/* Write configuration to CTRLA */
	usart_hw->CTRLA.reg = ctrla;
   29932:	69bb      	ldr	r3, [r7, #24]
   29934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   29936:	601a      	str	r2, [r3, #0]
		_usart_wait_for_sync(module);
		usart_hw->CTRLC.reg = ctrlc;
	}
#endif

	return STATUS_OK;
   29938:	2300      	movs	r3, #0
}
   2993a:	0018      	movs	r0, r3
   2993c:	46bd      	mov	sp, r7
   2993e:	b00a      	add	sp, #40	; 0x28
   29940:	bdb0      	pop	{r4, r5, r7, pc}
   29942:	46c0      	nop			; (mov r8, r8)
   29944:	00028429 	.word	0x00028429
   29948:	0002addd 	.word	0x0002addd
   2994c:	00027fa3 	.word	0x00027fa3
   29950:	00028021 	.word	0x00028021
   29954:	0002965d 	.word	0x0002965d
   29958:	0002961d 	.word	0x0002961d

0002995c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
   2995c:	b590      	push	{r4, r7, lr}
   2995e:	b093      	sub	sp, #76	; 0x4c
   29960:	af00      	add	r7, sp, #0
   29962:	60f8      	str	r0, [r7, #12]
   29964:	60b9      	str	r1, [r7, #8]
   29966:	607a      	str	r2, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(hw);
	Assert(config);

	enum status_code status_code = STATUS_OK;
   29968:	233b      	movs	r3, #59	; 0x3b
   2996a:	18fb      	adds	r3, r7, r3
   2996c:	2200      	movs	r2, #0
   2996e:	701a      	strb	r2, [r3, #0]

	/* Assign module pointer to software instance struct */
	module->hw = hw;
   29970:	68fb      	ldr	r3, [r7, #12]
   29972:	68ba      	ldr	r2, [r7, #8]
   29974:	601a      	str	r2, [r3, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   29976:	68fb      	ldr	r3, [r7, #12]
   29978:	681b      	ldr	r3, [r3, #0]
   2997a:	637b      	str	r3, [r7, #52]	; 0x34

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
   2997c:	68fb      	ldr	r3, [r7, #12]
   2997e:	681b      	ldr	r3, [r3, #0]
   29980:	0018      	movs	r0, r3
   29982:	4b86      	ldr	r3, [pc, #536]	; (29b9c <usart_init+0x240>)
   29984:	4798      	blx	r3
   29986:	0003      	movs	r3, r0
   29988:	633b      	str	r3, [r7, #48]	; 0x30
		gclk_index	= SERCOM5_GCLK_ID_CORE;
    } else {
    	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
    }
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
   2998a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2998c:	3302      	adds	r3, #2
   2998e:	62fb      	str	r3, [r7, #44]	; 0x2c
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
   29990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   29992:	3314      	adds	r3, #20
   29994:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
   29996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   29998:	681b      	ldr	r3, [r3, #0]
   2999a:	2201      	movs	r2, #1
   2999c:	4013      	ands	r3, r2
   2999e:	d001      	beq.n	299a4 <usart_init+0x48>
		/* The module is busy resetting itself */
		return STATUS_BUSY;
   299a0:	2305      	movs	r3, #5
   299a2:	e0f6      	b.n	29b92 <usart_init+0x236>
	}

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
   299a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   299a6:	681b      	ldr	r3, [r3, #0]
   299a8:	2202      	movs	r2, #2
   299aa:	4013      	ands	r3, r2
   299ac:	d001      	beq.n	299b2 <usart_init+0x56>
		/* Check the module is enabled */
		return STATUS_ERR_DENIED;
   299ae:	231c      	movs	r3, #28
   299b0:	e0ef      	b.n	29b92 <usart_init+0x236>
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
   299b2:	2201      	movs	r2, #1
   299b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   299b6:	409a      	lsls	r2, r3
   299b8:	0013      	movs	r3, r2
   299ba:	0019      	movs	r1, r3
   299bc:	2002      	movs	r0, #2
   299be:	4b78      	ldr	r3, [pc, #480]	; (29ba0 <usart_init+0x244>)
   299c0:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
   299c2:	2324      	movs	r3, #36	; 0x24
   299c4:	18fb      	adds	r3, r7, r3
   299c6:	0018      	movs	r0, r3
   299c8:	4b76      	ldr	r3, [pc, #472]	; (29ba4 <usart_init+0x248>)
   299ca:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
   299cc:	687b      	ldr	r3, [r7, #4]
   299ce:	222d      	movs	r2, #45	; 0x2d
   299d0:	5c9a      	ldrb	r2, [r3, r2]
   299d2:	2324      	movs	r3, #36	; 0x24
   299d4:	18fb      	adds	r3, r7, r3
   299d6:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
   299d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   299da:	b2db      	uxtb	r3, r3
   299dc:	2224      	movs	r2, #36	; 0x24
   299de:	18ba      	adds	r2, r7, r2
   299e0:	0011      	movs	r1, r2
   299e2:	0018      	movs	r0, r3
   299e4:	4b70      	ldr	r3, [pc, #448]	; (29ba8 <usart_init+0x24c>)
   299e6:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
   299e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   299ea:	b2db      	uxtb	r3, r3
   299ec:	0018      	movs	r0, r3
   299ee:	4b6f      	ldr	r3, [pc, #444]	; (29bac <usart_init+0x250>)
   299f0:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
   299f2:	687b      	ldr	r3, [r7, #4]
   299f4:	222d      	movs	r2, #45	; 0x2d
   299f6:	5c9b      	ldrb	r3, [r3, r2]
   299f8:	2100      	movs	r1, #0
   299fa:	0018      	movs	r0, r3
   299fc:	4b6c      	ldr	r3, [pc, #432]	; (29bb0 <usart_init+0x254>)
   299fe:	4798      	blx	r3

	/* Set character size */
	module->character_size = config->character_size;
   29a00:	687b      	ldr	r3, [r7, #4]
   29a02:	7ada      	ldrb	r2, [r3, #11]
   29a04:	68fb      	ldr	r3, [r7, #12]
   29a06:	715a      	strb	r2, [r3, #5]

	/* Set transmitter and receiver status */
	module->receiver_enabled = config->receiver_enable;
   29a08:	687b      	ldr	r3, [r7, #4]
   29a0a:	2224      	movs	r2, #36	; 0x24
   29a0c:	5c9a      	ldrb	r2, [r3, r2]
   29a0e:	68fb      	ldr	r3, [r7, #12]
   29a10:	719a      	strb	r2, [r3, #6]
	module->transmitter_enabled = config->transmitter_enable;
   29a12:	687b      	ldr	r3, [r7, #4]
   29a14:	2225      	movs	r2, #37	; 0x25
   29a16:	5c9a      	ldrb	r2, [r3, r2]
   29a18:	68fb      	ldr	r3, [r7, #12]
   29a1a:	71da      	strb	r2, [r3, #7]

#ifdef FEATURE_USART_LIN_SLAVE
	module->lin_slave_enabled = config->lin_slave_enable;
   29a1c:	687b      	ldr	r3, [r7, #4]
   29a1e:	7eda      	ldrb	r2, [r3, #27]
   29a20:	68fb      	ldr	r3, [r7, #12]
   29a22:	721a      	strb	r2, [r3, #8]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
   29a24:	687b      	ldr	r3, [r7, #4]
   29a26:	7f1a      	ldrb	r2, [r3, #28]
   29a28:	68fb      	ldr	r3, [r7, #12]
   29a2a:	725a      	strb	r2, [r3, #9]
#endif
#ifdef FEATURE_USART_ISO7816
	module->iso7816_mode_enabled = config->iso7816_config.enabled;
#endif
	/* Set configuration according to the config struct */
	status_code = _usart_set_config(module, config);
   29a2c:	233b      	movs	r3, #59	; 0x3b
   29a2e:	18fc      	adds	r4, r7, r3
   29a30:	687a      	ldr	r2, [r7, #4]
   29a32:	68fb      	ldr	r3, [r7, #12]
   29a34:	0011      	movs	r1, r2
   29a36:	0018      	movs	r0, r3
   29a38:	4b5e      	ldr	r3, [pc, #376]	; (29bb4 <usart_init+0x258>)
   29a3a:	4798      	blx	r3
   29a3c:	0003      	movs	r3, r0
   29a3e:	7023      	strb	r3, [r4, #0]
	if(status_code != STATUS_OK) {
   29a40:	233b      	movs	r3, #59	; 0x3b
   29a42:	18fb      	adds	r3, r7, r3
   29a44:	781b      	ldrb	r3, [r3, #0]
   29a46:	2b00      	cmp	r3, #0
   29a48:	d003      	beq.n	29a52 <usart_init+0xf6>
		return status_code;
   29a4a:	233b      	movs	r3, #59	; 0x3b
   29a4c:	18fb      	adds	r3, r7, r3
   29a4e:	781b      	ldrb	r3, [r3, #0]
   29a50:	e09f      	b.n	29b92 <usart_init+0x236>
	}

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
   29a52:	2320      	movs	r3, #32
   29a54:	18fb      	adds	r3, r7, r3
   29a56:	0018      	movs	r0, r3
   29a58:	4b57      	ldr	r3, [pc, #348]	; (29bb8 <usart_init+0x25c>)
   29a5a:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
   29a5c:	2320      	movs	r3, #32
   29a5e:	18fb      	adds	r3, r7, r3
   29a60:	2200      	movs	r2, #0
   29a62:	705a      	strb	r2, [r3, #1]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
   29a64:	2320      	movs	r3, #32
   29a66:	18fb      	adds	r3, r7, r3
   29a68:	2200      	movs	r2, #0
   29a6a:	709a      	strb	r2, [r3, #2]

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
   29a6c:	687b      	ldr	r3, [r7, #4]
   29a6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
   29a70:	2310      	movs	r3, #16
   29a72:	18fb      	adds	r3, r7, r3
   29a74:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
   29a76:	687b      	ldr	r3, [r7, #4]
   29a78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
   29a7a:	2310      	movs	r3, #16
   29a7c:	18fb      	adds	r3, r7, r3
   29a7e:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
   29a80:	687b      	ldr	r3, [r7, #4]
   29a82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
	uint32_t pad_pinmuxes[] = {
   29a84:	2310      	movs	r3, #16
   29a86:	18fb      	adds	r3, r7, r3
   29a88:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
   29a8a:	687b      	ldr	r3, [r7, #4]
   29a8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
	uint32_t pad_pinmuxes[] = {
   29a8e:	2310      	movs	r3, #16
   29a90:	18fb      	adds	r3, r7, r3
   29a92:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
   29a94:	2347      	movs	r3, #71	; 0x47
   29a96:	18fb      	adds	r3, r7, r3
   29a98:	2200      	movs	r2, #0
   29a9a:	701a      	strb	r2, [r3, #0]
   29a9c:	e02c      	b.n	29af8 <usart_init+0x19c>
		uint32_t current_pinmux = pad_pinmuxes[pad];
   29a9e:	2347      	movs	r3, #71	; 0x47
   29aa0:	18fb      	adds	r3, r7, r3
   29aa2:	781a      	ldrb	r2, [r3, #0]
   29aa4:	2310      	movs	r3, #16
   29aa6:	18fb      	adds	r3, r7, r3
   29aa8:	0092      	lsls	r2, r2, #2
   29aaa:	58d3      	ldr	r3, [r2, r3]
   29aac:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
   29aae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   29ab0:	2b00      	cmp	r3, #0
   29ab2:	d109      	bne.n	29ac8 <usart_init+0x16c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
   29ab4:	2347      	movs	r3, #71	; 0x47
   29ab6:	18fb      	adds	r3, r7, r3
   29ab8:	781a      	ldrb	r2, [r3, #0]
   29aba:	68bb      	ldr	r3, [r7, #8]
   29abc:	0011      	movs	r1, r2
   29abe:	0018      	movs	r0, r3
   29ac0:	4b3e      	ldr	r3, [pc, #248]	; (29bbc <usart_init+0x260>)
   29ac2:	4798      	blx	r3
   29ac4:	0003      	movs	r3, r0
   29ac6:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
   29ac8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   29aca:	3301      	adds	r3, #1
   29acc:	d00d      	beq.n	29aea <usart_init+0x18e>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
   29ace:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   29ad0:	b2da      	uxtb	r2, r3
   29ad2:	2320      	movs	r3, #32
   29ad4:	18fb      	adds	r3, r7, r3
   29ad6:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
   29ad8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   29ada:	0c1b      	lsrs	r3, r3, #16
   29adc:	b2db      	uxtb	r3, r3
   29ade:	2220      	movs	r2, #32
   29ae0:	18ba      	adds	r2, r7, r2
   29ae2:	0011      	movs	r1, r2
   29ae4:	0018      	movs	r0, r3
   29ae6:	4b36      	ldr	r3, [pc, #216]	; (29bc0 <usart_init+0x264>)
   29ae8:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
   29aea:	2347      	movs	r3, #71	; 0x47
   29aec:	18fb      	adds	r3, r7, r3
   29aee:	781a      	ldrb	r2, [r3, #0]
   29af0:	2347      	movs	r3, #71	; 0x47
   29af2:	18fb      	adds	r3, r7, r3
   29af4:	3201      	adds	r2, #1
   29af6:	701a      	strb	r2, [r3, #0]
   29af8:	2347      	movs	r3, #71	; 0x47
   29afa:	18fb      	adds	r3, r7, r3
   29afc:	781b      	ldrb	r3, [r3, #0]
   29afe:	2b03      	cmp	r3, #3
   29b00:	d9cd      	bls.n	29a9e <usart_init+0x142>
		}
	}

#if USART_CALLBACK_MODE == true
	/* Initialize parameters */
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   29b02:	2300      	movs	r3, #0
   29b04:	63fb      	str	r3, [r7, #60]	; 0x3c
   29b06:	e00a      	b.n	29b1e <usart_init+0x1c2>
		module->callback[i]            = NULL;
   29b08:	68fa      	ldr	r2, [r7, #12]
   29b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29b0c:	3302      	adds	r3, #2
   29b0e:	009b      	lsls	r3, r3, #2
   29b10:	18d3      	adds	r3, r2, r3
   29b12:	3304      	adds	r3, #4
   29b14:	2200      	movs	r2, #0
   29b16:	601a      	str	r2, [r3, #0]
	for (uint32_t i = 0; i < USART_CALLBACK_N; i++) {
   29b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29b1a:	3301      	adds	r3, #1
   29b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   29b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   29b20:	2b05      	cmp	r3, #5
   29b22:	d9f1      	bls.n	29b08 <usart_init+0x1ac>
	}

	module->tx_buffer_ptr              = NULL;
   29b24:	68fb      	ldr	r3, [r7, #12]
   29b26:	2200      	movs	r2, #0
   29b28:	629a      	str	r2, [r3, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
   29b2a:	68fb      	ldr	r3, [r7, #12]
   29b2c:	2200      	movs	r2, #0
   29b2e:	625a      	str	r2, [r3, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
   29b30:	68fb      	ldr	r3, [r7, #12]
   29b32:	2200      	movs	r2, #0
   29b34:	85da      	strh	r2, [r3, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
   29b36:	68fb      	ldr	r3, [r7, #12]
   29b38:	2200      	movs	r2, #0
   29b3a:	859a      	strh	r2, [r3, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
   29b3c:	68fb      	ldr	r3, [r7, #12]
   29b3e:	2230      	movs	r2, #48	; 0x30
   29b40:	2100      	movs	r1, #0
   29b42:	5499      	strb	r1, [r3, r2]
	module->callback_enable_mask       = 0x00;
   29b44:	68fb      	ldr	r3, [r7, #12]
   29b46:	2231      	movs	r2, #49	; 0x31
   29b48:	2100      	movs	r1, #0
   29b4a:	5499      	strb	r1, [r3, r2]
	module->rx_status                  = STATUS_OK;
   29b4c:	68fb      	ldr	r3, [r7, #12]
   29b4e:	2232      	movs	r2, #50	; 0x32
   29b50:	2100      	movs	r1, #0
   29b52:	5499      	strb	r1, [r3, r2]
	module->tx_status                  = STATUS_OK;
   29b54:	68fb      	ldr	r3, [r7, #12]
   29b56:	2233      	movs	r2, #51	; 0x33
   29b58:	2100      	movs	r1, #0
   29b5a:	5499      	strb	r1, [r3, r2]

	/* Set interrupt handler and register USART software module struct in
	 * look-up table */
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
   29b5c:	68fb      	ldr	r3, [r7, #12]
   29b5e:	681b      	ldr	r3, [r3, #0]
   29b60:	2227      	movs	r2, #39	; 0x27
   29b62:	18bc      	adds	r4, r7, r2
   29b64:	0018      	movs	r0, r3
   29b66:	4b0d      	ldr	r3, [pc, #52]	; (29b9c <usart_init+0x240>)
   29b68:	4798      	blx	r3
   29b6a:	0003      	movs	r3, r0
   29b6c:	7023      	strb	r3, [r4, #0]
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
   29b6e:	4a15      	ldr	r2, [pc, #84]	; (29bc4 <usart_init+0x268>)
   29b70:	2327      	movs	r3, #39	; 0x27
   29b72:	18fb      	adds	r3, r7, r3
   29b74:	781b      	ldrb	r3, [r3, #0]
   29b76:	0011      	movs	r1, r2
   29b78:	0018      	movs	r0, r3
   29b7a:	4b13      	ldr	r3, [pc, #76]	; (29bc8 <usart_init+0x26c>)
   29b7c:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
   29b7e:	2327      	movs	r3, #39	; 0x27
   29b80:	18fb      	adds	r3, r7, r3
   29b82:	781a      	ldrb	r2, [r3, #0]
   29b84:	4b11      	ldr	r3, [pc, #68]	; (29bcc <usart_init+0x270>)
   29b86:	0092      	lsls	r2, r2, #2
   29b88:	68f9      	ldr	r1, [r7, #12]
   29b8a:	50d1      	str	r1, [r2, r3]
#endif

	return status_code;
   29b8c:	233b      	movs	r3, #59	; 0x3b
   29b8e:	18fb      	adds	r3, r7, r3
   29b90:	781b      	ldrb	r3, [r3, #0]
}
   29b92:	0018      	movs	r0, r3
   29b94:	46bd      	mov	sp, r7
   29b96:	b013      	add	sp, #76	; 0x4c
   29b98:	bd90      	pop	{r4, r7, pc}
   29b9a:	46c0      	nop			; (mov r8, r8)
   29b9c:	00028429 	.word	0x00028429
   29ba0:	00029599 	.word	0x00029599
   29ba4:	00029581 	.word	0x00029581
   29ba8:	0002acb9 	.word	0x0002acb9
   29bac:	0002acfd 	.word	0x0002acfd
   29bb0:	000281e1 	.word	0x000281e1
   29bb4:	00029681 	.word	0x00029681
   29bb8:	000295f5 	.word	0x000295f5
   29bbc:	0002826d 	.word	0x0002826d
   29bc0:	0002b019 	.word	0x0002b019
   29bc4:	00029e39 	.word	0x00029e39
   29bc8:	0002848d 	.word	0x0002848d
   29bcc:	20005c58 	.word	0x20005c58

00029bd0 <system_interrupt_enter_critical_section>:
{
   29bd0:	b580      	push	{r7, lr}
   29bd2:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   29bd4:	4b02      	ldr	r3, [pc, #8]	; (29be0 <system_interrupt_enter_critical_section+0x10>)
   29bd6:	4798      	blx	r3
}
   29bd8:	46c0      	nop			; (mov r8, r8)
   29bda:	46bd      	mov	sp, r7
   29bdc:	bd80      	pop	{r7, pc}
   29bde:	46c0      	nop			; (mov r8, r8)
   29be0:	00027025 	.word	0x00027025

00029be4 <system_interrupt_leave_critical_section>:
{
   29be4:	b580      	push	{r7, lr}
   29be6:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   29be8:	4b02      	ldr	r3, [pc, #8]	; (29bf4 <system_interrupt_leave_critical_section+0x10>)
   29bea:	4798      	blx	r3
}
   29bec:	46c0      	nop			; (mov r8, r8)
   29bee:	46bd      	mov	sp, r7
   29bf0:	bd80      	pop	{r7, pc}
   29bf2:	46c0      	nop			; (mov r8, r8)
   29bf4:	00027079 	.word	0x00027079

00029bf8 <usart_is_syncing>:
{
   29bf8:	b580      	push	{r7, lr}
   29bfa:	b084      	sub	sp, #16
   29bfc:	af00      	add	r7, sp, #0
   29bfe:	6078      	str	r0, [r7, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
   29c00:	687b      	ldr	r3, [r7, #4]
   29c02:	681b      	ldr	r3, [r3, #0]
   29c04:	60fb      	str	r3, [r7, #12]
	return (usart_hw->SYNCBUSY.reg);
   29c06:	68fb      	ldr	r3, [r7, #12]
   29c08:	69db      	ldr	r3, [r3, #28]
   29c0a:	1e5a      	subs	r2, r3, #1
   29c0c:	4193      	sbcs	r3, r2
   29c0e:	b2db      	uxtb	r3, r3
}
   29c10:	0018      	movs	r0, r3
   29c12:	46bd      	mov	sp, r7
   29c14:	b004      	add	sp, #16
   29c16:	bd80      	pop	{r7, pc}

00029c18 <_usart_wait_for_sync>:
{
   29c18:	b580      	push	{r7, lr}
   29c1a:	b082      	sub	sp, #8
   29c1c:	af00      	add	r7, sp, #0
   29c1e:	6078      	str	r0, [r7, #4]
	while (usart_is_syncing(module)) {
   29c20:	46c0      	nop			; (mov r8, r8)
   29c22:	687b      	ldr	r3, [r7, #4]
   29c24:	0018      	movs	r0, r3
   29c26:	4b04      	ldr	r3, [pc, #16]	; (29c38 <_usart_wait_for_sync+0x20>)
   29c28:	4798      	blx	r3
   29c2a:	1e03      	subs	r3, r0, #0
   29c2c:	d1f9      	bne.n	29c22 <_usart_wait_for_sync+0xa>
}
   29c2e:	46c0      	nop			; (mov r8, r8)
   29c30:	46bd      	mov	sp, r7
   29c32:	b002      	add	sp, #8
   29c34:	bd80      	pop	{r7, pc}
   29c36:	46c0      	nop			; (mov r8, r8)
   29c38:	00029bf9 	.word	0x00029bf9

00029c3c <_usart_write_buffer>:
 */
enum status_code _usart_write_buffer(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   29c3c:	b580      	push	{r7, lr}
   29c3e:	b086      	sub	sp, #24
   29c40:	af00      	add	r7, sp, #0
   29c42:	60f8      	str	r0, [r7, #12]
   29c44:	60b9      	str	r1, [r7, #8]
   29c46:	1dbb      	adds	r3, r7, #6
   29c48:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(tx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   29c4a:	68fb      	ldr	r3, [r7, #12]
   29c4c:	681b      	ldr	r3, [r3, #0]
   29c4e:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   29c50:	4b0f      	ldr	r3, [pc, #60]	; (29c90 <_usart_write_buffer+0x54>)
   29c52:	4798      	blx	r3

	/* Check if the USART transmitter is busy */
	if (module->remaining_tx_buffer_length > 0) {
   29c54:	68fb      	ldr	r3, [r7, #12]
   29c56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   29c58:	b29b      	uxth	r3, r3
   29c5a:	2b00      	cmp	r3, #0
   29c5c:	d003      	beq.n	29c66 <_usart_write_buffer+0x2a>
		system_interrupt_leave_critical_section();
   29c5e:	4b0d      	ldr	r3, [pc, #52]	; (29c94 <_usart_write_buffer+0x58>)
   29c60:	4798      	blx	r3
		return STATUS_BUSY;
   29c62:	2305      	movs	r3, #5
   29c64:	e010      	b.n	29c88 <_usart_write_buffer+0x4c>
	}

	/* Write parameters to the device instance */
	module->remaining_tx_buffer_length = length;
   29c66:	68fb      	ldr	r3, [r7, #12]
   29c68:	1dba      	adds	r2, r7, #6
   29c6a:	8812      	ldrh	r2, [r2, #0]
   29c6c:	85da      	strh	r2, [r3, #46]	; 0x2e

	system_interrupt_leave_critical_section();
   29c6e:	4b09      	ldr	r3, [pc, #36]	; (29c94 <_usart_write_buffer+0x58>)
   29c70:	4798      	blx	r3

	module->tx_buffer_ptr              = tx_data;
   29c72:	68fb      	ldr	r3, [r7, #12]
   29c74:	68ba      	ldr	r2, [r7, #8]
   29c76:	629a      	str	r2, [r3, #40]	; 0x28
	module->tx_status                  = STATUS_BUSY;
   29c78:	68fb      	ldr	r3, [r7, #12]
   29c7a:	2233      	movs	r2, #51	; 0x33
   29c7c:	2105      	movs	r1, #5
   29c7e:	5499      	strb	r1, [r3, r2]

	/* Enable the Data Register Empty Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_DRE;
   29c80:	697b      	ldr	r3, [r7, #20]
   29c82:	2201      	movs	r2, #1
   29c84:	759a      	strb	r2, [r3, #22]

	return STATUS_OK;
   29c86:	2300      	movs	r3, #0
}
   29c88:	0018      	movs	r0, r3
   29c8a:	46bd      	mov	sp, r7
   29c8c:	b006      	add	sp, #24
   29c8e:	bd80      	pop	{r7, pc}
   29c90:	00029bd1 	.word	0x00029bd1
   29c94:	00029be5 	.word	0x00029be5

00029c98 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   29c98:	b580      	push	{r7, lr}
   29c9a:	b086      	sub	sp, #24
   29c9c:	af00      	add	r7, sp, #0
   29c9e:	60f8      	str	r0, [r7, #12]
   29ca0:	60b9      	str	r1, [r7, #8]
   29ca2:	1dbb      	adds	r3, r7, #6
   29ca4:	801a      	strh	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
   29ca6:	68fb      	ldr	r3, [r7, #12]
   29ca8:	681b      	ldr	r3, [r3, #0]
   29caa:	617b      	str	r3, [r7, #20]

	system_interrupt_enter_critical_section();
   29cac:	4b16      	ldr	r3, [pc, #88]	; (29d08 <_usart_read_buffer+0x70>)
   29cae:	4798      	blx	r3

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
   29cb0:	68fb      	ldr	r3, [r7, #12]
   29cb2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   29cb4:	b29b      	uxth	r3, r3
   29cb6:	2b00      	cmp	r3, #0
   29cb8:	d003      	beq.n	29cc2 <_usart_read_buffer+0x2a>
		system_interrupt_leave_critical_section();
   29cba:	4b14      	ldr	r3, [pc, #80]	; (29d0c <_usart_read_buffer+0x74>)
   29cbc:	4798      	blx	r3
		return STATUS_BUSY;
   29cbe:	2305      	movs	r3, #5
   29cc0:	e01e      	b.n	29d00 <_usart_read_buffer+0x68>
	}

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
   29cc2:	68fb      	ldr	r3, [r7, #12]
   29cc4:	1dba      	adds	r2, r7, #6
   29cc6:	8812      	ldrh	r2, [r2, #0]
   29cc8:	859a      	strh	r2, [r3, #44]	; 0x2c

	system_interrupt_leave_critical_section();
   29cca:	4b10      	ldr	r3, [pc, #64]	; (29d0c <_usart_read_buffer+0x74>)
   29ccc:	4798      	blx	r3

	module->rx_buffer_ptr              = rx_data;
   29cce:	68fb      	ldr	r3, [r7, #12]
   29cd0:	68ba      	ldr	r2, [r7, #8]
   29cd2:	625a      	str	r2, [r3, #36]	; 0x24
	module->rx_status                  = STATUS_BUSY;
   29cd4:	68fb      	ldr	r3, [r7, #12]
   29cd6:	2232      	movs	r2, #50	; 0x32
   29cd8:	2105      	movs	r1, #5
   29cda:	5499      	strb	r1, [r3, r2]

	/* Enable the RX Complete Interrupt */
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
   29cdc:	697b      	ldr	r3, [r7, #20]
   29cde:	2204      	movs	r2, #4
   29ce0:	759a      	strb	r2, [r3, #22]

#ifdef FEATURE_USART_LIN_SLAVE
	/* Enable the break character is received Interrupt */
	if(module->lin_slave_enabled) {
   29ce2:	68fb      	ldr	r3, [r7, #12]
   29ce4:	7a1b      	ldrb	r3, [r3, #8]
   29ce6:	2b00      	cmp	r3, #0
   29ce8:	d002      	beq.n	29cf0 <_usart_read_buffer+0x58>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXBRK;
   29cea:	697b      	ldr	r3, [r7, #20]
   29cec:	2220      	movs	r2, #32
   29cee:	759a      	strb	r2, [r3, #22]
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	/* Enable a start condition is detected Interrupt */
	if(module->start_frame_detection_enabled) {
   29cf0:	68fb      	ldr	r3, [r7, #12]
   29cf2:	7a5b      	ldrb	r3, [r3, #9]
   29cf4:	2b00      	cmp	r3, #0
   29cf6:	d002      	beq.n	29cfe <_usart_read_buffer+0x66>
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
   29cf8:	697b      	ldr	r3, [r7, #20]
   29cfa:	2208      	movs	r2, #8
   29cfc:	759a      	strb	r2, [r3, #22]
	}
#endif

	return STATUS_OK;
   29cfe:	2300      	movs	r3, #0
}
   29d00:	0018      	movs	r0, r3
   29d02:	46bd      	mov	sp, r7
   29d04:	b006      	add	sp, #24
   29d06:	bd80      	pop	{r7, pc}
   29d08:	00029bd1 	.word	0x00029bd1
   29d0c:	00029be5 	.word	0x00029be5

00029d10 <usart_register_callback>:
 */
void usart_register_callback(
		struct usart_module *const module,
		usart_callback_t callback_func,
		enum usart_callback callback_type)
{
   29d10:	b580      	push	{r7, lr}
   29d12:	b084      	sub	sp, #16
   29d14:	af00      	add	r7, sp, #0
   29d16:	60f8      	str	r0, [r7, #12]
   29d18:	60b9      	str	r1, [r7, #8]
   29d1a:	1dfb      	adds	r3, r7, #7
   29d1c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   29d1e:	1dfb      	adds	r3, r7, #7
   29d20:	781b      	ldrb	r3, [r3, #0]
   29d22:	68fa      	ldr	r2, [r7, #12]
   29d24:	3302      	adds	r3, #2
   29d26:	009b      	lsls	r3, r3, #2
   29d28:	18d3      	adds	r3, r2, r3
   29d2a:	3304      	adds	r3, #4
   29d2c:	68ba      	ldr	r2, [r7, #8]
   29d2e:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
   29d30:	68fb      	ldr	r3, [r7, #12]
   29d32:	2230      	movs	r2, #48	; 0x30
   29d34:	5c9b      	ldrb	r3, [r3, r2]
   29d36:	b25a      	sxtb	r2, r3
   29d38:	1dfb      	adds	r3, r7, #7
   29d3a:	781b      	ldrb	r3, [r3, #0]
   29d3c:	2101      	movs	r1, #1
   29d3e:	4099      	lsls	r1, r3
   29d40:	000b      	movs	r3, r1
   29d42:	b25b      	sxtb	r3, r3
   29d44:	4313      	orrs	r3, r2
   29d46:	b25b      	sxtb	r3, r3
   29d48:	b2d9      	uxtb	r1, r3
   29d4a:	68fb      	ldr	r3, [r7, #12]
   29d4c:	2230      	movs	r2, #48	; 0x30
   29d4e:	5499      	strb	r1, [r3, r2]
}
   29d50:	46c0      	nop			; (mov r8, r8)
   29d52:	46bd      	mov	sp, r7
   29d54:	b004      	add	sp, #16
   29d56:	bd80      	pop	{r7, pc}

00029d58 <usart_write_buffer_job>:
 */
enum status_code usart_write_buffer_job(
		struct usart_module *const module,
		uint8_t *tx_data,
		uint16_t length)
{
   29d58:	b580      	push	{r7, lr}
   29d5a:	b084      	sub	sp, #16
   29d5c:	af00      	add	r7, sp, #0
   29d5e:	60f8      	str	r0, [r7, #12]
   29d60:	60b9      	str	r1, [r7, #8]
   29d62:	1dbb      	adds	r3, r7, #6
   29d64:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(tx_data);

	if (length == 0) {
   29d66:	1dbb      	adds	r3, r7, #6
   29d68:	881b      	ldrh	r3, [r3, #0]
   29d6a:	2b00      	cmp	r3, #0
   29d6c:	d101      	bne.n	29d72 <usart_write_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   29d6e:	2317      	movs	r3, #23
   29d70:	e010      	b.n	29d94 <usart_write_buffer_job+0x3c>
	}

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
   29d72:	68fb      	ldr	r3, [r7, #12]
   29d74:	79db      	ldrb	r3, [r3, #7]
   29d76:	2201      	movs	r2, #1
   29d78:	4053      	eors	r3, r2
   29d7a:	b2db      	uxtb	r3, r3
   29d7c:	2b00      	cmp	r3, #0
   29d7e:	d001      	beq.n	29d84 <usart_write_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   29d80:	231c      	movs	r3, #28
   29d82:	e007      	b.n	29d94 <usart_write_buffer_job+0x3c>
	}

	/* Issue internal asynchronous write */
	return _usart_write_buffer(module, tx_data, length);
   29d84:	1dbb      	adds	r3, r7, #6
   29d86:	881a      	ldrh	r2, [r3, #0]
   29d88:	68b9      	ldr	r1, [r7, #8]
   29d8a:	68fb      	ldr	r3, [r7, #12]
   29d8c:	0018      	movs	r0, r3
   29d8e:	4b03      	ldr	r3, [pc, #12]	; (29d9c <usart_write_buffer_job+0x44>)
   29d90:	4798      	blx	r3
   29d92:	0003      	movs	r3, r0
}
   29d94:	0018      	movs	r0, r3
   29d96:	46bd      	mov	sp, r7
   29d98:	b004      	add	sp, #16
   29d9a:	bd80      	pop	{r7, pc}
   29d9c:	00029c3d 	.word	0x00029c3d

00029da0 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
   29da0:	b580      	push	{r7, lr}
   29da2:	b084      	sub	sp, #16
   29da4:	af00      	add	r7, sp, #0
   29da6:	60f8      	str	r0, [r7, #12]
   29da8:	60b9      	str	r1, [r7, #8]
   29daa:	1dbb      	adds	r3, r7, #6
   29dac:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
   29dae:	1dbb      	adds	r3, r7, #6
   29db0:	881b      	ldrh	r3, [r3, #0]
   29db2:	2b00      	cmp	r3, #0
   29db4:	d101      	bne.n	29dba <usart_read_buffer_job+0x1a>
		return STATUS_ERR_INVALID_ARG;
   29db6:	2317      	movs	r3, #23
   29db8:	e010      	b.n	29ddc <usart_read_buffer_job+0x3c>
	}

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
   29dba:	68fb      	ldr	r3, [r7, #12]
   29dbc:	799b      	ldrb	r3, [r3, #6]
   29dbe:	2201      	movs	r2, #1
   29dc0:	4053      	eors	r3, r2
   29dc2:	b2db      	uxtb	r3, r3
   29dc4:	2b00      	cmp	r3, #0
   29dc6:	d001      	beq.n	29dcc <usart_read_buffer_job+0x2c>
		return STATUS_ERR_DENIED;
   29dc8:	231c      	movs	r3, #28
   29dca:	e007      	b.n	29ddc <usart_read_buffer_job+0x3c>
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
   29dcc:	1dbb      	adds	r3, r7, #6
   29dce:	881a      	ldrh	r2, [r3, #0]
   29dd0:	68b9      	ldr	r1, [r7, #8]
   29dd2:	68fb      	ldr	r3, [r7, #12]
   29dd4:	0018      	movs	r0, r3
   29dd6:	4b03      	ldr	r3, [pc, #12]	; (29de4 <usart_read_buffer_job+0x44>)
   29dd8:	4798      	blx	r3
   29dda:	0003      	movs	r3, r0
}
   29ddc:	0018      	movs	r0, r3
   29dde:	46bd      	mov	sp, r7
   29de0:	b004      	add	sp, #16
   29de2:	bd80      	pop	{r7, pc}
   29de4:	00029c99 	.word	0x00029c99

00029de8 <usart_get_job_status>:
 * \retval STATUS_ERR_INVALID_ARG  An invalid transceiver enum given
 */
enum status_code usart_get_job_status(
		struct usart_module *const module,
		enum usart_transceiver_type transceiver_type)
{
   29de8:	b580      	push	{r7, lr}
   29dea:	b084      	sub	sp, #16
   29dec:	af00      	add	r7, sp, #0
   29dee:	6078      	str	r0, [r7, #4]
   29df0:	000a      	movs	r2, r1
   29df2:	1cfb      	adds	r3, r7, #3
   29df4:	701a      	strb	r2, [r3, #0]
	Assert(module);

	/* Variable for status code */
	enum status_code status_code;

	switch(transceiver_type) {
   29df6:	1cfb      	adds	r3, r7, #3
   29df8:	781b      	ldrb	r3, [r3, #0]
   29dfa:	2b00      	cmp	r3, #0
   29dfc:	d002      	beq.n	29e04 <usart_get_job_status+0x1c>
   29dfe:	2b01      	cmp	r3, #1
   29e00:	d007      	beq.n	29e12 <usart_get_job_status+0x2a>
   29e02:	e00d      	b.n	29e20 <usart_get_job_status+0x38>
	case USART_TRANSCEIVER_RX:
			status_code = module->rx_status;
   29e04:	230f      	movs	r3, #15
   29e06:	18fb      	adds	r3, r7, r3
   29e08:	687a      	ldr	r2, [r7, #4]
   29e0a:	2132      	movs	r1, #50	; 0x32
   29e0c:	5c52      	ldrb	r2, [r2, r1]
   29e0e:	701a      	strb	r2, [r3, #0]
			break;
   29e10:	e00b      	b.n	29e2a <usart_get_job_status+0x42>

	case USART_TRANSCEIVER_TX:
			status_code = module->tx_status;
   29e12:	230f      	movs	r3, #15
   29e14:	18fb      	adds	r3, r7, r3
   29e16:	687a      	ldr	r2, [r7, #4]
   29e18:	2133      	movs	r1, #51	; 0x33
   29e1a:	5c52      	ldrb	r2, [r2, r1]
   29e1c:	701a      	strb	r2, [r3, #0]
			break;
   29e1e:	e004      	b.n	29e2a <usart_get_job_status+0x42>

	default:
			status_code = STATUS_ERR_INVALID_ARG;
   29e20:	230f      	movs	r3, #15
   29e22:	18fb      	adds	r3, r7, r3
   29e24:	2217      	movs	r2, #23
   29e26:	701a      	strb	r2, [r3, #0]
			break;
   29e28:	46c0      	nop			; (mov r8, r8)
	}

	return status_code;
   29e2a:	230f      	movs	r3, #15
   29e2c:	18fb      	adds	r3, r7, r3
   29e2e:	781b      	ldrb	r3, [r3, #0]
}
   29e30:	0018      	movs	r0, r3
   29e32:	46bd      	mov	sp, r7
   29e34:	b004      	add	sp, #16
   29e36:	bd80      	pop	{r7, pc}

00029e38 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
   29e38:	b580      	push	{r7, lr}
   29e3a:	b088      	sub	sp, #32
   29e3c:	af00      	add	r7, sp, #0
   29e3e:	0002      	movs	r2, r0
   29e40:	1dfb      	adds	r3, r7, #7
   29e42:	701a      	strb	r2, [r3, #0]
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
		= (struct usart_module *)_sercom_instances[instance];
   29e44:	1dfb      	adds	r3, r7, #7
   29e46:	781a      	ldrb	r2, [r3, #0]
	struct usart_module *module
   29e48:	4ba3      	ldr	r3, [pc, #652]	; (2a0d8 <_usart_interrupt_handler+0x2a0>)
   29e4a:	0092      	lsls	r2, r2, #2
   29e4c:	58d3      	ldr	r3, [r2, r3]
   29e4e:	61bb      	str	r3, [r7, #24]

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
   29e50:	69bb      	ldr	r3, [r7, #24]
   29e52:	681b      	ldr	r3, [r3, #0]
	SercomUsart *const usart_hw
   29e54:	617b      	str	r3, [r7, #20]

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);
   29e56:	69bb      	ldr	r3, [r7, #24]
   29e58:	0018      	movs	r0, r3
   29e5a:	4ba0      	ldr	r3, [pc, #640]	; (2a0dc <_usart_interrupt_handler+0x2a4>)
   29e5c:	4798      	blx	r3

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
   29e5e:	697b      	ldr	r3, [r7, #20]
   29e60:	7e1b      	ldrb	r3, [r3, #24]
   29e62:	b2da      	uxtb	r2, r3
   29e64:	2312      	movs	r3, #18
   29e66:	18fb      	adds	r3, r7, r3
   29e68:	801a      	strh	r2, [r3, #0]
	interrupt_status &= usart_hw->INTENSET.reg;
   29e6a:	697b      	ldr	r3, [r7, #20]
   29e6c:	7d9b      	ldrb	r3, [r3, #22]
   29e6e:	b2db      	uxtb	r3, r3
   29e70:	b29a      	uxth	r2, r3
   29e72:	2312      	movs	r3, #18
   29e74:	18fb      	adds	r3, r7, r3
   29e76:	2112      	movs	r1, #18
   29e78:	1879      	adds	r1, r7, r1
   29e7a:	8809      	ldrh	r1, [r1, #0]
   29e7c:	400a      	ands	r2, r1
   29e7e:	801a      	strh	r2, [r3, #0]
	callback_status = module->callback_reg_mask &
   29e80:	69bb      	ldr	r3, [r7, #24]
   29e82:	2230      	movs	r2, #48	; 0x30
   29e84:	5c9b      	ldrb	r3, [r3, r2]
			module->callback_enable_mask;
   29e86:	69ba      	ldr	r2, [r7, #24]
   29e88:	2131      	movs	r1, #49	; 0x31
   29e8a:	5c52      	ldrb	r2, [r2, r1]
	callback_status = module->callback_reg_mask &
   29e8c:	4013      	ands	r3, r2
   29e8e:	b2da      	uxtb	r2, r3
   29e90:	2310      	movs	r3, #16
   29e92:	18fb      	adds	r3, r7, r3
   29e94:	801a      	strh	r2, [r3, #0]

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
   29e96:	2312      	movs	r3, #18
   29e98:	18fb      	adds	r3, r7, r3
   29e9a:	881b      	ldrh	r3, [r3, #0]
   29e9c:	2201      	movs	r2, #1
   29e9e:	4013      	ands	r3, r2
   29ea0:	d044      	beq.n	29f2c <_usart_interrupt_handler+0xf4>
		if (module->remaining_tx_buffer_length) {
   29ea2:	69bb      	ldr	r3, [r7, #24]
   29ea4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   29ea6:	b29b      	uxth	r3, r3
   29ea8:	2b00      	cmp	r3, #0
   29eaa:	d03c      	beq.n	29f26 <_usart_interrupt_handler+0xee>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
   29eac:	69bb      	ldr	r3, [r7, #24]
   29eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29eb0:	781b      	ldrb	r3, [r3, #0]
   29eb2:	b2da      	uxtb	r2, r3
   29eb4:	231c      	movs	r3, #28
   29eb6:	18fb      	adds	r3, r7, r3
   29eb8:	801a      	strh	r2, [r3, #0]
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
   29eba:	69bb      	ldr	r3, [r7, #24]
   29ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29ebe:	1c5a      	adds	r2, r3, #1
   29ec0:	69bb      	ldr	r3, [r7, #24]
   29ec2:	629a      	str	r2, [r3, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   29ec4:	69bb      	ldr	r3, [r7, #24]
   29ec6:	795b      	ldrb	r3, [r3, #5]
   29ec8:	2b01      	cmp	r3, #1
   29eca:	d113      	bne.n	29ef4 <_usart_interrupt_handler+0xbc>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
   29ecc:	69bb      	ldr	r3, [r7, #24]
   29ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29ed0:	781b      	ldrb	r3, [r3, #0]
   29ed2:	b2db      	uxtb	r3, r3
   29ed4:	021b      	lsls	r3, r3, #8
   29ed6:	b21a      	sxth	r2, r3
   29ed8:	231c      	movs	r3, #28
   29eda:	18fb      	adds	r3, r7, r3
   29edc:	2100      	movs	r1, #0
   29ede:	5e5b      	ldrsh	r3, [r3, r1]
   29ee0:	4313      	orrs	r3, r2
   29ee2:	b21a      	sxth	r2, r3
   29ee4:	231c      	movs	r3, #28
   29ee6:	18fb      	adds	r3, r7, r3
   29ee8:	801a      	strh	r2, [r3, #0]
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
   29eea:	69bb      	ldr	r3, [r7, #24]
   29eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   29eee:	1c5a      	adds	r2, r3, #1
   29ef0:	69bb      	ldr	r3, [r7, #24]
   29ef2:	629a      	str	r2, [r3, #40]	; 0x28
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
   29ef4:	231c      	movs	r3, #28
   29ef6:	18fb      	adds	r3, r7, r3
   29ef8:	881b      	ldrh	r3, [r3, #0]
   29efa:	05db      	lsls	r3, r3, #23
   29efc:	0ddb      	lsrs	r3, r3, #23
   29efe:	b29a      	uxth	r2, r3
   29f00:	697b      	ldr	r3, [r7, #20]
   29f02:	851a      	strh	r2, [r3, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
   29f04:	69bb      	ldr	r3, [r7, #24]
   29f06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   29f08:	b29b      	uxth	r3, r3
   29f0a:	3b01      	subs	r3, #1
   29f0c:	b29b      	uxth	r3, r3
   29f0e:	69ba      	ldr	r2, [r7, #24]
   29f10:	1c19      	adds	r1, r3, #0
   29f12:	85d1      	strh	r1, [r2, #46]	; 0x2e
   29f14:	2b00      	cmp	r3, #0
   29f16:	d109      	bne.n	29f2c <_usart_interrupt_handler+0xf4>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   29f18:	697b      	ldr	r3, [r7, #20]
   29f1a:	2201      	movs	r2, #1
   29f1c:	751a      	strb	r2, [r3, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
   29f1e:	697b      	ldr	r3, [r7, #20]
   29f20:	2202      	movs	r2, #2
   29f22:	759a      	strb	r2, [r3, #22]
   29f24:	e002      	b.n	29f2c <_usart_interrupt_handler+0xf4>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
   29f26:	697b      	ldr	r3, [r7, #20]
   29f28:	2201      	movs	r2, #1
   29f2a:	751a      	strb	r2, [r3, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
   29f2c:	2312      	movs	r3, #18
   29f2e:	18fb      	adds	r3, r7, r3
   29f30:	881b      	ldrh	r3, [r3, #0]
   29f32:	2202      	movs	r2, #2
   29f34:	4013      	ands	r3, r2
   29f36:	d011      	beq.n	29f5c <_usart_interrupt_handler+0x124>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
   29f38:	697b      	ldr	r3, [r7, #20]
   29f3a:	2202      	movs	r2, #2
   29f3c:	751a      	strb	r2, [r3, #20]
		module->tx_status = STATUS_OK;
   29f3e:	69bb      	ldr	r3, [r7, #24]
   29f40:	2233      	movs	r2, #51	; 0x33
   29f42:	2100      	movs	r1, #0
   29f44:	5499      	strb	r1, [r3, r2]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
   29f46:	2310      	movs	r3, #16
   29f48:	18fb      	adds	r3, r7, r3
   29f4a:	881b      	ldrh	r3, [r3, #0]
   29f4c:	2201      	movs	r2, #1
   29f4e:	4013      	ands	r3, r2
   29f50:	d004      	beq.n	29f5c <_usart_interrupt_handler+0x124>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
   29f52:	69bb      	ldr	r3, [r7, #24]
   29f54:	68db      	ldr	r3, [r3, #12]
   29f56:	69ba      	ldr	r2, [r7, #24]
   29f58:	0010      	movs	r0, r2
   29f5a:	4798      	blx	r3
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
   29f5c:	2312      	movs	r3, #18
   29f5e:	18fb      	adds	r3, r7, r3
   29f60:	881b      	ldrh	r3, [r3, #0]
   29f62:	2204      	movs	r2, #4
   29f64:	4013      	ands	r3, r2
   29f66:	d100      	bne.n	29f6a <_usart_interrupt_handler+0x132>
   29f68:	e0bd      	b.n	2a0e6 <_usart_interrupt_handler+0x2ae>

		if (module->remaining_rx_buffer_length) {
   29f6a:	69bb      	ldr	r3, [r7, #24]
   29f6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   29f6e:	b29b      	uxth	r3, r3
   29f70:	2b00      	cmp	r3, #0
   29f72:	d100      	bne.n	29f76 <_usart_interrupt_handler+0x13e>
   29f74:	e0b4      	b.n	2a0e0 <_usart_interrupt_handler+0x2a8>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
   29f76:	697b      	ldr	r3, [r7, #20]
   29f78:	8b5b      	ldrh	r3, [r3, #26]
   29f7a:	b29b      	uxth	r3, r3
   29f7c:	b2da      	uxtb	r2, r3
   29f7e:	231f      	movs	r3, #31
   29f80:	18fb      	adds	r3, r7, r3
   29f82:	213f      	movs	r1, #63	; 0x3f
   29f84:	400a      	ands	r2, r1
   29f86:	701a      	strb	r2, [r3, #0]
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
   29f88:	231f      	movs	r3, #31
   29f8a:	18fb      	adds	r3, r7, r3
   29f8c:	781b      	ldrb	r3, [r3, #0]
   29f8e:	2208      	movs	r2, #8
   29f90:	4013      	ands	r3, r2
   29f92:	d007      	beq.n	29fa4 <_usart_interrupt_handler+0x16c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
   29f94:	231f      	movs	r3, #31
   29f96:	18fb      	adds	r3, r7, r3
   29f98:	221f      	movs	r2, #31
   29f9a:	18ba      	adds	r2, r7, r2
   29f9c:	7812      	ldrb	r2, [r2, #0]
   29f9e:	2108      	movs	r1, #8
   29fa0:	438a      	bics	r2, r1
   29fa2:	701a      	strb	r2, [r3, #0]
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
   29fa4:	231f      	movs	r3, #31
   29fa6:	18fb      	adds	r3, r7, r3
   29fa8:	781b      	ldrb	r3, [r3, #0]
   29faa:	2b00      	cmp	r3, #0
   29fac:	d050      	beq.n	2a050 <_usart_interrupt_handler+0x218>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
   29fae:	231f      	movs	r3, #31
   29fb0:	18fb      	adds	r3, r7, r3
   29fb2:	781b      	ldrb	r3, [r3, #0]
   29fb4:	2202      	movs	r2, #2
   29fb6:	4013      	ands	r3, r2
   29fb8:	d007      	beq.n	29fca <_usart_interrupt_handler+0x192>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
   29fba:	69bb      	ldr	r3, [r7, #24]
   29fbc:	2232      	movs	r2, #50	; 0x32
   29fbe:	211a      	movs	r1, #26
   29fc0:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
   29fc2:	697b      	ldr	r3, [r7, #20]
   29fc4:	2202      	movs	r2, #2
   29fc6:	835a      	strh	r2, [r3, #26]
   29fc8:	e036      	b.n	2a038 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
   29fca:	231f      	movs	r3, #31
   29fcc:	18fb      	adds	r3, r7, r3
   29fce:	781b      	ldrb	r3, [r3, #0]
   29fd0:	2204      	movs	r2, #4
   29fd2:	4013      	ands	r3, r2
   29fd4:	d007      	beq.n	29fe6 <_usart_interrupt_handler+0x1ae>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_OVERFLOW;
   29fd6:	69bb      	ldr	r3, [r7, #24]
   29fd8:	2232      	movs	r2, #50	; 0x32
   29fda:	211e      	movs	r1, #30
   29fdc:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
   29fde:	697b      	ldr	r3, [r7, #20]
   29fe0:	2204      	movs	r2, #4
   29fe2:	835a      	strh	r2, [r3, #26]
   29fe4:	e028      	b.n	2a038 <_usart_interrupt_handler+0x200>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
   29fe6:	231f      	movs	r3, #31
   29fe8:	18fb      	adds	r3, r7, r3
   29fea:	781b      	ldrb	r3, [r3, #0]
   29fec:	2201      	movs	r2, #1
   29fee:	4013      	ands	r3, r2
   29ff0:	d007      	beq.n	2a002 <_usart_interrupt_handler+0x1ca>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_DATA;
   29ff2:	69bb      	ldr	r3, [r7, #24]
   29ff4:	2232      	movs	r2, #50	; 0x32
   29ff6:	2113      	movs	r1, #19
   29ff8:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
   29ffa:	697b      	ldr	r3, [r7, #20]
   29ffc:	2201      	movs	r2, #1
   29ffe:	835a      	strh	r2, [r3, #26]
   2a000:	e01a      	b.n	2a038 <_usart_interrupt_handler+0x200>
				}
#ifdef FEATURE_USART_LIN_SLAVE
				else if (error_code & SERCOM_USART_STATUS_ISF) {
   2a002:	231f      	movs	r3, #31
   2a004:	18fb      	adds	r3, r7, r3
   2a006:	781b      	ldrb	r3, [r3, #0]
   2a008:	2210      	movs	r2, #16
   2a00a:	4013      	ands	r3, r2
   2a00c:	d007      	beq.n	2a01e <_usart_interrupt_handler+0x1e6>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PROTOCOL;
   2a00e:	69bb      	ldr	r3, [r7, #24]
   2a010:	2232      	movs	r2, #50	; 0x32
   2a012:	2142      	movs	r1, #66	; 0x42
   2a014:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
   2a016:	697b      	ldr	r3, [r7, #20]
   2a018:	2210      	movs	r2, #16
   2a01a:	835a      	strh	r2, [r3, #26]
   2a01c:	e00c      	b.n	2a038 <_usart_interrupt_handler+0x200>
				}
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
				else if (error_code & SERCOM_USART_STATUS_COLL) {
   2a01e:	231f      	movs	r3, #31
   2a020:	18fb      	adds	r3, r7, r3
   2a022:	781b      	ldrb	r3, [r3, #0]
   2a024:	2220      	movs	r2, #32
   2a026:	4013      	ands	r3, r2
   2a028:	d006      	beq.n	2a038 <_usart_interrupt_handler+0x200>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
   2a02a:	69bb      	ldr	r3, [r7, #24]
   2a02c:	2232      	movs	r2, #50	; 0x32
   2a02e:	2141      	movs	r1, #65	; 0x41
   2a030:	5499      	strb	r1, [r3, r2]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
   2a032:	697b      	ldr	r3, [r7, #20]
   2a034:	2220      	movs	r2, #32
   2a036:	835a      	strh	r2, [r3, #26]
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
						& (1 << USART_CALLBACK_ERROR)) {
   2a038:	2310      	movs	r3, #16
   2a03a:	18fb      	adds	r3, r7, r3
   2a03c:	881b      	ldrh	r3, [r3, #0]
   2a03e:	2204      	movs	r2, #4
   2a040:	4013      	ands	r3, r2
				if (callback_status
   2a042:	d050      	beq.n	2a0e6 <_usart_interrupt_handler+0x2ae>
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
   2a044:	69bb      	ldr	r3, [r7, #24]
   2a046:	695b      	ldr	r3, [r3, #20]
   2a048:	69ba      	ldr	r2, [r7, #24]
   2a04a:	0010      	movs	r0, r2
   2a04c:	4798      	blx	r3
   2a04e:	e04a      	b.n	2a0e6 <_usart_interrupt_handler+0x2ae>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
   2a050:	697b      	ldr	r3, [r7, #20]
   2a052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
   2a054:	b29a      	uxth	r2, r3
   2a056:	230e      	movs	r3, #14
   2a058:	18fb      	adds	r3, r7, r3
   2a05a:	05d2      	lsls	r2, r2, #23
   2a05c:	0dd2      	lsrs	r2, r2, #23
   2a05e:	801a      	strh	r2, [r3, #0]

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
   2a060:	69bb      	ldr	r3, [r7, #24]
   2a062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2a064:	220e      	movs	r2, #14
   2a066:	18ba      	adds	r2, r7, r2
   2a068:	8812      	ldrh	r2, [r2, #0]
   2a06a:	b2d2      	uxtb	r2, r2
   2a06c:	701a      	strb	r2, [r3, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
   2a06e:	69bb      	ldr	r3, [r7, #24]
   2a070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2a072:	1c5a      	adds	r2, r3, #1
   2a074:	69bb      	ldr	r3, [r7, #24]
   2a076:	625a      	str	r2, [r3, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
   2a078:	69bb      	ldr	r3, [r7, #24]
   2a07a:	795b      	ldrb	r3, [r3, #5]
   2a07c:	2b01      	cmp	r3, #1
   2a07e:	d10d      	bne.n	2a09c <_usart_interrupt_handler+0x264>
					/* 9-bit data, write next received byte to the buffer */
					*(module->rx_buffer_ptr) = (received_data >> 8);
   2a080:	69bb      	ldr	r3, [r7, #24]
   2a082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2a084:	220e      	movs	r2, #14
   2a086:	18ba      	adds	r2, r7, r2
   2a088:	8812      	ldrh	r2, [r2, #0]
   2a08a:	0a12      	lsrs	r2, r2, #8
   2a08c:	b292      	uxth	r2, r2
   2a08e:	b2d2      	uxtb	r2, r2
   2a090:	701a      	strb	r2, [r3, #0]
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
   2a092:	69bb      	ldr	r3, [r7, #24]
   2a094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2a096:	1c5a      	adds	r2, r3, #1
   2a098:	69bb      	ldr	r3, [r7, #24]
   2a09a:	625a      	str	r2, [r3, #36]	; 0x24
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
   2a09c:	69bb      	ldr	r3, [r7, #24]
   2a09e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
   2a0a0:	b29b      	uxth	r3, r3
   2a0a2:	3b01      	subs	r3, #1
   2a0a4:	b29b      	uxth	r3, r3
   2a0a6:	69ba      	ldr	r2, [r7, #24]
   2a0a8:	1c19      	adds	r1, r3, #0
   2a0aa:	8591      	strh	r1, [r2, #44]	; 0x2c
   2a0ac:	2b00      	cmp	r3, #0
   2a0ae:	d11a      	bne.n	2a0e6 <_usart_interrupt_handler+0x2ae>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   2a0b0:	697b      	ldr	r3, [r7, #20]
   2a0b2:	2204      	movs	r2, #4
   2a0b4:	751a      	strb	r2, [r3, #20]
					module->rx_status = STATUS_OK;
   2a0b6:	69bb      	ldr	r3, [r7, #24]
   2a0b8:	2232      	movs	r2, #50	; 0x32
   2a0ba:	2100      	movs	r1, #0
   2a0bc:	5499      	strb	r1, [r3, r2]

					/* Run callback if registered and enabled */
					if (callback_status
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
   2a0be:	2310      	movs	r3, #16
   2a0c0:	18fb      	adds	r3, r7, r3
   2a0c2:	881b      	ldrh	r3, [r3, #0]
   2a0c4:	2202      	movs	r2, #2
   2a0c6:	4013      	ands	r3, r2
					if (callback_status
   2a0c8:	d00d      	beq.n	2a0e6 <_usart_interrupt_handler+0x2ae>
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
   2a0ca:	69bb      	ldr	r3, [r7, #24]
   2a0cc:	691b      	ldr	r3, [r3, #16]
   2a0ce:	69ba      	ldr	r2, [r7, #24]
   2a0d0:	0010      	movs	r0, r2
   2a0d2:	4798      	blx	r3
   2a0d4:	e007      	b.n	2a0e6 <_usart_interrupt_handler+0x2ae>
   2a0d6:	46c0      	nop			; (mov r8, r8)
   2a0d8:	20005c58 	.word	0x20005c58
   2a0dc:	00029c19 	.word	0x00029c19
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
   2a0e0:	697b      	ldr	r3, [r7, #20]
   2a0e2:	2204      	movs	r2, #4
   2a0e4:	751a      	strb	r2, [r3, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
   2a0e6:	2312      	movs	r3, #18
   2a0e8:	18fb      	adds	r3, r7, r3
   2a0ea:	881b      	ldrh	r3, [r3, #0]
   2a0ec:	2210      	movs	r2, #16
   2a0ee:	4013      	ands	r3, r2
   2a0f0:	d010      	beq.n	2a114 <_usart_interrupt_handler+0x2dc>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
   2a0f2:	697b      	ldr	r3, [r7, #20]
   2a0f4:	2210      	movs	r2, #16
   2a0f6:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
   2a0f8:	697b      	ldr	r3, [r7, #20]
   2a0fa:	2210      	movs	r2, #16
   2a0fc:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
   2a0fe:	2310      	movs	r3, #16
   2a100:	18fb      	adds	r3, r7, r3
   2a102:	881b      	ldrh	r3, [r3, #0]
   2a104:	2210      	movs	r2, #16
   2a106:	4013      	ands	r3, r2
   2a108:	d004      	beq.n	2a114 <_usart_interrupt_handler+0x2dc>
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
   2a10a:	69bb      	ldr	r3, [r7, #24]
   2a10c:	69db      	ldr	r3, [r3, #28]
   2a10e:	69ba      	ldr	r2, [r7, #24]
   2a110:	0010      	movs	r0, r2
   2a112:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
   2a114:	2312      	movs	r3, #18
   2a116:	18fb      	adds	r3, r7, r3
   2a118:	881b      	ldrh	r3, [r3, #0]
   2a11a:	2220      	movs	r2, #32
   2a11c:	4013      	ands	r3, r2
   2a11e:	d010      	beq.n	2a142 <_usart_interrupt_handler+0x30a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
   2a120:	697b      	ldr	r3, [r7, #20]
   2a122:	2220      	movs	r2, #32
   2a124:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
   2a126:	697b      	ldr	r3, [r7, #20]
   2a128:	2220      	movs	r2, #32
   2a12a:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
   2a12c:	2310      	movs	r3, #16
   2a12e:	18fb      	adds	r3, r7, r3
   2a130:	881b      	ldrh	r3, [r3, #0]
   2a132:	2208      	movs	r2, #8
   2a134:	4013      	ands	r3, r2
   2a136:	d004      	beq.n	2a142 <_usart_interrupt_handler+0x30a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
   2a138:	69bb      	ldr	r3, [r7, #24]
   2a13a:	699b      	ldr	r3, [r3, #24]
   2a13c:	69ba      	ldr	r2, [r7, #24]
   2a13e:	0010      	movs	r0, r2
   2a140:	4798      	blx	r3
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
   2a142:	2312      	movs	r3, #18
   2a144:	18fb      	adds	r3, r7, r3
   2a146:	881b      	ldrh	r3, [r3, #0]
   2a148:	2208      	movs	r2, #8
   2a14a:	4013      	ands	r3, r2
   2a14c:	d010      	beq.n	2a170 <_usart_interrupt_handler+0x338>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
   2a14e:	697b      	ldr	r3, [r7, #20]
   2a150:	2208      	movs	r2, #8
   2a152:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
   2a154:	697b      	ldr	r3, [r7, #20]
   2a156:	2208      	movs	r2, #8
   2a158:	761a      	strb	r2, [r3, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
   2a15a:	2310      	movs	r3, #16
   2a15c:	18fb      	adds	r3, r7, r3
   2a15e:	881b      	ldrh	r3, [r3, #0]
   2a160:	2220      	movs	r2, #32
   2a162:	4013      	ands	r3, r2
   2a164:	d004      	beq.n	2a170 <_usart_interrupt_handler+0x338>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
   2a166:	69bb      	ldr	r3, [r7, #24]
   2a168:	6a1b      	ldr	r3, [r3, #32]
   2a16a:	69ba      	ldr	r2, [r7, #24]
   2a16c:	0010      	movs	r0, r2
   2a16e:	4798      	blx	r3
		}
	}
#endif
}
   2a170:	46c0      	nop			; (mov r8, r8)
   2a172:	46bd      	mov	sp, r7
   2a174:	b008      	add	sp, #32
   2a176:	bd80      	pop	{r7, pc}

0002a178 <system_gclk_gen_get_config_defaults>:
{
   2a178:	b580      	push	{r7, lr}
   2a17a:	b082      	sub	sp, #8
   2a17c:	af00      	add	r7, sp, #0
   2a17e:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
   2a180:	687b      	ldr	r3, [r7, #4]
   2a182:	2201      	movs	r2, #1
   2a184:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
   2a186:	687b      	ldr	r3, [r7, #4]
   2a188:	2200      	movs	r2, #0
   2a18a:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
   2a18c:	687b      	ldr	r3, [r7, #4]
   2a18e:	2206      	movs	r2, #6
   2a190:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
   2a192:	687b      	ldr	r3, [r7, #4]
   2a194:	2200      	movs	r2, #0
   2a196:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
   2a198:	687b      	ldr	r3, [r7, #4]
   2a19a:	2200      	movs	r2, #0
   2a19c:	725a      	strb	r2, [r3, #9]
}
   2a19e:	46c0      	nop			; (mov r8, r8)
   2a1a0:	46bd      	mov	sp, r7
   2a1a2:	b002      	add	sp, #8
   2a1a4:	bd80      	pop	{r7, pc}

0002a1a6 <system_gclk_chan_get_config_defaults>:
{
   2a1a6:	b580      	push	{r7, lr}
   2a1a8:	b082      	sub	sp, #8
   2a1aa:	af00      	add	r7, sp, #0
   2a1ac:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2a1ae:	687b      	ldr	r3, [r7, #4]
   2a1b0:	2200      	movs	r2, #0
   2a1b2:	701a      	strb	r2, [r3, #0]
}
   2a1b4:	46c0      	nop			; (mov r8, r8)
   2a1b6:	46bd      	mov	sp, r7
   2a1b8:	b002      	add	sp, #8
   2a1ba:	bd80      	pop	{r7, pc}

0002a1bc <system_clock_source_osc8m_get_config_defaults>:
{
   2a1bc:	b580      	push	{r7, lr}
   2a1be:	b082      	sub	sp, #8
   2a1c0:	af00      	add	r7, sp, #0
   2a1c2:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
   2a1c4:	687b      	ldr	r3, [r7, #4]
   2a1c6:	2203      	movs	r2, #3
   2a1c8:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
   2a1ca:	687b      	ldr	r3, [r7, #4]
   2a1cc:	2200      	movs	r2, #0
   2a1ce:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
   2a1d0:	687b      	ldr	r3, [r7, #4]
   2a1d2:	2201      	movs	r2, #1
   2a1d4:	709a      	strb	r2, [r3, #2]
}
   2a1d6:	46c0      	nop			; (mov r8, r8)
   2a1d8:	46bd      	mov	sp, r7
   2a1da:	b002      	add	sp, #8
   2a1dc:	bd80      	pop	{r7, pc}
	...

0002a1e0 <system_cpu_clock_set_divider>:
{
   2a1e0:	b580      	push	{r7, lr}
   2a1e2:	b082      	sub	sp, #8
   2a1e4:	af00      	add	r7, sp, #0
   2a1e6:	0002      	movs	r2, r0
   2a1e8:	1dfb      	adds	r3, r7, #7
   2a1ea:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
   2a1ec:	4a03      	ldr	r2, [pc, #12]	; (2a1fc <system_cpu_clock_set_divider+0x1c>)
   2a1ee:	1dfb      	adds	r3, r7, #7
   2a1f0:	781b      	ldrb	r3, [r3, #0]
   2a1f2:	7213      	strb	r3, [r2, #8]
}
   2a1f4:	46c0      	nop			; (mov r8, r8)
   2a1f6:	46bd      	mov	sp, r7
   2a1f8:	b002      	add	sp, #8
   2a1fa:	bd80      	pop	{r7, pc}
   2a1fc:	40000400 	.word	0x40000400

0002a200 <system_apb_clock_set_divider>:
{
   2a200:	b580      	push	{r7, lr}
   2a202:	b082      	sub	sp, #8
   2a204:	af00      	add	r7, sp, #0
   2a206:	0002      	movs	r2, r0
   2a208:	1dfb      	adds	r3, r7, #7
   2a20a:	701a      	strb	r2, [r3, #0]
   2a20c:	1dbb      	adds	r3, r7, #6
   2a20e:	1c0a      	adds	r2, r1, #0
   2a210:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2a212:	1dfb      	adds	r3, r7, #7
   2a214:	781b      	ldrb	r3, [r3, #0]
   2a216:	2b01      	cmp	r3, #1
   2a218:	d008      	beq.n	2a22c <system_apb_clock_set_divider+0x2c>
   2a21a:	2b02      	cmp	r3, #2
   2a21c:	d00b      	beq.n	2a236 <system_apb_clock_set_divider+0x36>
   2a21e:	2b00      	cmp	r3, #0
   2a220:	d10e      	bne.n	2a240 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
   2a222:	4a0b      	ldr	r2, [pc, #44]	; (2a250 <system_apb_clock_set_divider+0x50>)
   2a224:	1dbb      	adds	r3, r7, #6
   2a226:	781b      	ldrb	r3, [r3, #0]
   2a228:	7253      	strb	r3, [r2, #9]
			break;
   2a22a:	e00b      	b.n	2a244 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
   2a22c:	4a08      	ldr	r2, [pc, #32]	; (2a250 <system_apb_clock_set_divider+0x50>)
   2a22e:	1dbb      	adds	r3, r7, #6
   2a230:	781b      	ldrb	r3, [r3, #0]
   2a232:	7293      	strb	r3, [r2, #10]
			break;
   2a234:	e006      	b.n	2a244 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
   2a236:	4a06      	ldr	r2, [pc, #24]	; (2a250 <system_apb_clock_set_divider+0x50>)
   2a238:	1dbb      	adds	r3, r7, #6
   2a23a:	781b      	ldrb	r3, [r3, #0]
   2a23c:	72d3      	strb	r3, [r2, #11]
			break;
   2a23e:	e001      	b.n	2a244 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
   2a240:	2317      	movs	r3, #23
   2a242:	e000      	b.n	2a246 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
   2a244:	2300      	movs	r3, #0
}
   2a246:	0018      	movs	r0, r3
   2a248:	46bd      	mov	sp, r7
   2a24a:	b002      	add	sp, #8
   2a24c:	bd80      	pop	{r7, pc}
   2a24e:	46c0      	nop			; (mov r8, r8)
   2a250:	40000400 	.word	0x40000400

0002a254 <system_clock_source_dpll_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to fill with default values
 */
static inline void system_clock_source_dpll_get_config_defaults(
		struct system_clock_source_dpll_config *const config)
{
   2a254:	b580      	push	{r7, lr}
   2a256:	b082      	sub	sp, #8
   2a258:	af00      	add	r7, sp, #0
   2a25a:	6078      	str	r0, [r7, #4]
	config->on_demand           = true;
   2a25c:	687b      	ldr	r3, [r7, #4]
   2a25e:	2201      	movs	r2, #1
   2a260:	701a      	strb	r2, [r3, #0]
	config->run_in_standby      = false;
   2a262:	687b      	ldr	r3, [r7, #4]
   2a264:	2200      	movs	r2, #0
   2a266:	705a      	strb	r2, [r3, #1]
	config->lock_bypass         = false;
   2a268:	687b      	ldr	r3, [r7, #4]
   2a26a:	2200      	movs	r2, #0
   2a26c:	709a      	strb	r2, [r3, #2]
	config->wake_up_fast        = false;
   2a26e:	687b      	ldr	r3, [r7, #4]
   2a270:	2200      	movs	r2, #0
   2a272:	70da      	strb	r2, [r3, #3]
	config->low_power_enable    = false;
   2a274:	687b      	ldr	r3, [r7, #4]
   2a276:	2200      	movs	r2, #0
   2a278:	711a      	strb	r2, [r3, #4]

	config->output_frequency    = 48000000;
   2a27a:	687b      	ldr	r3, [r7, #4]
   2a27c:	4a0a      	ldr	r2, [pc, #40]	; (2a2a8 <system_clock_source_dpll_get_config_defaults+0x54>)
   2a27e:	609a      	str	r2, [r3, #8]
	config->reference_frequency = 32768;
   2a280:	687b      	ldr	r3, [r7, #4]
   2a282:	2280      	movs	r2, #128	; 0x80
   2a284:	0212      	lsls	r2, r2, #8
   2a286:	60da      	str	r2, [r3, #12]
	config->reference_divider   = 1;
   2a288:	687b      	ldr	r3, [r7, #4]
   2a28a:	2201      	movs	r2, #1
   2a28c:	821a      	strh	r2, [r3, #16]
	config->reference_clock     = SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC32K;
   2a28e:	687b      	ldr	r3, [r7, #4]
   2a290:	2200      	movs	r2, #0
   2a292:	751a      	strb	r2, [r3, #20]

	config->lock_time           = SYSTEM_CLOCK_SOURCE_DPLL_LOCK_TIME_DEFAULT;
   2a294:	687b      	ldr	r3, [r7, #4]
   2a296:	2200      	movs	r2, #0
   2a298:	74da      	strb	r2, [r3, #19]
	config->filter              = SYSTEM_CLOCK_SOURCE_DPLL_FILTER_DEFAULT;
   2a29a:	687b      	ldr	r3, [r7, #4]
   2a29c:	2200      	movs	r2, #0
   2a29e:	749a      	strb	r2, [r3, #18]
};
   2a2a0:	46c0      	nop			; (mov r8, r8)
   2a2a2:	46bd      	mov	sp, r7
   2a2a4:	b002      	add	sp, #8
   2a2a6:	bd80      	pop	{r7, pc}
   2a2a8:	02dc6c00 	.word	0x02dc6c00

0002a2ac <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
   2a2ac:	b580      	push	{r7, lr}
   2a2ae:	b082      	sub	sp, #8
   2a2b0:	af00      	add	r7, sp, #0
   2a2b2:	0002      	movs	r2, r0
   2a2b4:	1dfb      	adds	r3, r7, #7
   2a2b6:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
   2a2b8:	4a08      	ldr	r2, [pc, #32]	; (2a2dc <system_flash_set_waitstates+0x30>)
   2a2ba:	1dfb      	adds	r3, r7, #7
   2a2bc:	781b      	ldrb	r3, [r3, #0]
   2a2be:	210f      	movs	r1, #15
   2a2c0:	400b      	ands	r3, r1
   2a2c2:	b2d9      	uxtb	r1, r3
   2a2c4:	6853      	ldr	r3, [r2, #4]
   2a2c6:	200f      	movs	r0, #15
   2a2c8:	4001      	ands	r1, r0
   2a2ca:	0049      	lsls	r1, r1, #1
   2a2cc:	201e      	movs	r0, #30
   2a2ce:	4383      	bics	r3, r0
   2a2d0:	430b      	orrs	r3, r1
   2a2d2:	6053      	str	r3, [r2, #4]
}
   2a2d4:	46c0      	nop			; (mov r8, r8)
   2a2d6:	46bd      	mov	sp, r7
   2a2d8:	b002      	add	sp, #8
   2a2da:	bd80      	pop	{r7, pc}
   2a2dc:	41004000 	.word	0x41004000

0002a2e0 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
   2a2e0:	b580      	push	{r7, lr}
   2a2e2:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
   2a2e4:	46c0      	nop			; (mov r8, r8)
   2a2e6:	4b04      	ldr	r3, [pc, #16]	; (2a2f8 <_system_dfll_wait_for_sync+0x18>)
   2a2e8:	68db      	ldr	r3, [r3, #12]
   2a2ea:	2210      	movs	r2, #16
   2a2ec:	4013      	ands	r3, r2
   2a2ee:	d0fa      	beq.n	2a2e6 <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
   2a2f0:	46c0      	nop			; (mov r8, r8)
   2a2f2:	46bd      	mov	sp, r7
   2a2f4:	bd80      	pop	{r7, pc}
   2a2f6:	46c0      	nop			; (mov r8, r8)
   2a2f8:	40000800 	.word	0x40000800

0002a2fc <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
   2a2fc:	b580      	push	{r7, lr}
   2a2fe:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
   2a300:	4b0c      	ldr	r3, [pc, #48]	; (2a334 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2a302:	2202      	movs	r2, #2
   2a304:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   2a306:	4b0c      	ldr	r3, [pc, #48]	; (2a338 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   2a308:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
   2a30a:	4a0a      	ldr	r2, [pc, #40]	; (2a334 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2a30c:	4b0b      	ldr	r3, [pc, #44]	; (2a33c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2a30e:	689b      	ldr	r3, [r3, #8]
   2a310:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
   2a312:	4a08      	ldr	r2, [pc, #32]	; (2a334 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2a314:	4b09      	ldr	r3, [pc, #36]	; (2a33c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2a316:	685b      	ldr	r3, [r3, #4]
   2a318:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
   2a31a:	4b06      	ldr	r3, [pc, #24]	; (2a334 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2a31c:	2200      	movs	r2, #0
   2a31e:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
   2a320:	4b05      	ldr	r3, [pc, #20]	; (2a338 <_system_clock_source_dfll_set_config_errata_9905+0x3c>)
   2a322:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
   2a324:	4a03      	ldr	r2, [pc, #12]	; (2a334 <_system_clock_source_dfll_set_config_errata_9905+0x38>)
   2a326:	4b05      	ldr	r3, [pc, #20]	; (2a33c <_system_clock_source_dfll_set_config_errata_9905+0x40>)
   2a328:	681b      	ldr	r3, [r3, #0]
   2a32a:	b29b      	uxth	r3, r3
   2a32c:	8493      	strh	r3, [r2, #36]	; 0x24
}
   2a32e:	46c0      	nop			; (mov r8, r8)
   2a330:	46bd      	mov	sp, r7
   2a332:	bd80      	pop	{r7, pc}
   2a334:	40000800 	.word	0x40000800
   2a338:	0002a2e1 	.word	0x0002a2e1
   2a33c:	200042dc 	.word	0x200042dc

0002a340 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
   2a340:	b580      	push	{r7, lr}
   2a342:	b082      	sub	sp, #8
   2a344:	af00      	add	r7, sp, #0
   2a346:	0002      	movs	r2, r0
   2a348:	1dfb      	adds	r3, r7, #7
   2a34a:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   2a34c:	1dfb      	adds	r3, r7, #7
   2a34e:	781b      	ldrb	r3, [r3, #0]
   2a350:	2b08      	cmp	r3, #8
   2a352:	d841      	bhi.n	2a3d8 <system_clock_source_get_hz+0x98>
   2a354:	009a      	lsls	r2, r3, #2
   2a356:	4b23      	ldr	r3, [pc, #140]	; (2a3e4 <system_clock_source_get_hz+0xa4>)
   2a358:	18d3      	adds	r3, r2, r3
   2a35a:	681b      	ldr	r3, [r3, #0]
   2a35c:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
   2a35e:	4b22      	ldr	r3, [pc, #136]	; (2a3e8 <system_clock_source_get_hz+0xa8>)
   2a360:	691b      	ldr	r3, [r3, #16]
   2a362:	e03a      	b.n	2a3da <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
   2a364:	4b21      	ldr	r3, [pc, #132]	; (2a3ec <system_clock_source_get_hz+0xac>)
   2a366:	6a1b      	ldr	r3, [r3, #32]
   2a368:	059b      	lsls	r3, r3, #22
   2a36a:	0f9b      	lsrs	r3, r3, #30
   2a36c:	b2db      	uxtb	r3, r3
   2a36e:	001a      	movs	r2, r3
   2a370:	4b1f      	ldr	r3, [pc, #124]	; (2a3f0 <system_clock_source_get_hz+0xb0>)
   2a372:	40d3      	lsrs	r3, r2
   2a374:	e031      	b.n	2a3da <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
   2a376:	2380      	movs	r3, #128	; 0x80
   2a378:	021b      	lsls	r3, r3, #8
   2a37a:	e02e      	b.n	2a3da <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
   2a37c:	2380      	movs	r3, #128	; 0x80
   2a37e:	021b      	lsls	r3, r3, #8
   2a380:	e02b      	b.n	2a3da <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
   2a382:	4b19      	ldr	r3, [pc, #100]	; (2a3e8 <system_clock_source_get_hz+0xa8>)
   2a384:	695b      	ldr	r3, [r3, #20]
   2a386:	e028      	b.n	2a3da <system_clock_source_get_hz+0x9a>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
   2a388:	4b17      	ldr	r3, [pc, #92]	; (2a3e8 <system_clock_source_get_hz+0xa8>)
   2a38a:	681b      	ldr	r3, [r3, #0]
   2a38c:	2202      	movs	r2, #2
   2a38e:	4013      	ands	r3, r2
   2a390:	d101      	bne.n	2a396 <system_clock_source_get_hz+0x56>
			return 0;
   2a392:	2300      	movs	r3, #0
   2a394:	e021      	b.n	2a3da <system_clock_source_get_hz+0x9a>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
   2a396:	4b17      	ldr	r3, [pc, #92]	; (2a3f4 <system_clock_source_get_hz+0xb4>)
   2a398:	4798      	blx	r3

		/* Check if operating in closed loop (USB) mode */
		switch(_system_clock_inst.dfll.control &
   2a39a:	4b13      	ldr	r3, [pc, #76]	; (2a3e8 <system_clock_source_get_hz+0xa8>)
   2a39c:	681b      	ldr	r3, [r3, #0]
   2a39e:	2224      	movs	r2, #36	; 0x24
   2a3a0:	4013      	ands	r3, r2
   2a3a2:	2b04      	cmp	r3, #4
   2a3a4:	d109      	bne.n	2a3ba <system_clock_source_get_hz+0x7a>
				(SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_USBCRM)) {
		case SYSCTRL_DFLLCTRL_MODE:
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   2a3a6:	2000      	movs	r0, #0
   2a3a8:	4b13      	ldr	r3, [pc, #76]	; (2a3f8 <system_clock_source_get_hz+0xb8>)
   2a3aa:	4798      	blx	r3
   2a3ac:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
   2a3ae:	4b0e      	ldr	r3, [pc, #56]	; (2a3e8 <system_clock_source_get_hz+0xa8>)
   2a3b0:	689b      	ldr	r3, [r3, #8]
   2a3b2:	041b      	lsls	r3, r3, #16
   2a3b4:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
   2a3b6:	4353      	muls	r3, r2
   2a3b8:	e00f      	b.n	2a3da <system_clock_source_get_hz+0x9a>
		default:
			return 48000000UL;
   2a3ba:	4b10      	ldr	r3, [pc, #64]	; (2a3fc <system_clock_source_get_hz+0xbc>)
   2a3bc:	e00d      	b.n	2a3da <system_clock_source_get_hz+0x9a>
		}

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
   2a3be:	4a0b      	ldr	r2, [pc, #44]	; (2a3ec <system_clock_source_get_hz+0xac>)
   2a3c0:	2350      	movs	r3, #80	; 0x50
   2a3c2:	5cd3      	ldrb	r3, [r2, r3]
   2a3c4:	b2db      	uxtb	r3, r3
   2a3c6:	001a      	movs	r2, r3
   2a3c8:	2304      	movs	r3, #4
   2a3ca:	4013      	ands	r3, r2
   2a3cc:	d101      	bne.n	2a3d2 <system_clock_source_get_hz+0x92>
			return 0;
   2a3ce:	2300      	movs	r3, #0
   2a3d0:	e003      	b.n	2a3da <system_clock_source_get_hz+0x9a>
		}

		return _system_clock_inst.dpll.frequency;
   2a3d2:	4b05      	ldr	r3, [pc, #20]	; (2a3e8 <system_clock_source_get_hz+0xa8>)
   2a3d4:	68db      	ldr	r3, [r3, #12]
   2a3d6:	e000      	b.n	2a3da <system_clock_source_get_hz+0x9a>
#endif

	default:
		return 0;
   2a3d8:	2300      	movs	r3, #0
	}
}
   2a3da:	0018      	movs	r0, r3
   2a3dc:	46bd      	mov	sp, r7
   2a3de:	b002      	add	sp, #8
   2a3e0:	bd80      	pop	{r7, pc}
   2a3e2:	46c0      	nop			; (mov r8, r8)
   2a3e4:	0003a604 	.word	0x0003a604
   2a3e8:	200042dc 	.word	0x200042dc
   2a3ec:	40000800 	.word	0x40000800
   2a3f0:	007a1200 	.word	0x007a1200
   2a3f4:	0002a2e1 	.word	0x0002a2e1
   2a3f8:	0002addd 	.word	0x0002addd
   2a3fc:	02dc6c00 	.word	0x02dc6c00

0002a400 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
   2a400:	b580      	push	{r7, lr}
   2a402:	b084      	sub	sp, #16
   2a404:	af00      	add	r7, sp, #0
   2a406:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
   2a408:	4b1a      	ldr	r3, [pc, #104]	; (2a474 <system_clock_source_osc8m_set_config+0x74>)
   2a40a:	6a1b      	ldr	r3, [r3, #32]
   2a40c:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
   2a40e:	687b      	ldr	r3, [r7, #4]
   2a410:	781b      	ldrb	r3, [r3, #0]
   2a412:	1c1a      	adds	r2, r3, #0
   2a414:	2303      	movs	r3, #3
   2a416:	4013      	ands	r3, r2
   2a418:	b2da      	uxtb	r2, r3
   2a41a:	230d      	movs	r3, #13
   2a41c:	18fb      	adds	r3, r7, r3
   2a41e:	2103      	movs	r1, #3
   2a420:	400a      	ands	r2, r1
   2a422:	0010      	movs	r0, r2
   2a424:	781a      	ldrb	r2, [r3, #0]
   2a426:	2103      	movs	r1, #3
   2a428:	438a      	bics	r2, r1
   2a42a:	1c11      	adds	r1, r2, #0
   2a42c:	1c02      	adds	r2, r0, #0
   2a42e:	430a      	orrs	r2, r1
   2a430:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
   2a432:	687b      	ldr	r3, [r7, #4]
   2a434:	789a      	ldrb	r2, [r3, #2]
   2a436:	230c      	movs	r3, #12
   2a438:	18fb      	adds	r3, r7, r3
   2a43a:	01d0      	lsls	r0, r2, #7
   2a43c:	781a      	ldrb	r2, [r3, #0]
   2a43e:	217f      	movs	r1, #127	; 0x7f
   2a440:	400a      	ands	r2, r1
   2a442:	1c11      	adds	r1, r2, #0
   2a444:	1c02      	adds	r2, r0, #0
   2a446:	430a      	orrs	r2, r1
   2a448:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
   2a44a:	687b      	ldr	r3, [r7, #4]
   2a44c:	785a      	ldrb	r2, [r3, #1]
   2a44e:	230c      	movs	r3, #12
   2a450:	18fb      	adds	r3, r7, r3
   2a452:	2101      	movs	r1, #1
   2a454:	400a      	ands	r2, r1
   2a456:	0190      	lsls	r0, r2, #6
   2a458:	781a      	ldrb	r2, [r3, #0]
   2a45a:	2140      	movs	r1, #64	; 0x40
   2a45c:	438a      	bics	r2, r1
   2a45e:	1c11      	adds	r1, r2, #0
   2a460:	1c02      	adds	r2, r0, #0
   2a462:	430a      	orrs	r2, r1
   2a464:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
   2a466:	4b03      	ldr	r3, [pc, #12]	; (2a474 <system_clock_source_osc8m_set_config+0x74>)
   2a468:	68fa      	ldr	r2, [r7, #12]
   2a46a:	621a      	str	r2, [r3, #32]
}
   2a46c:	46c0      	nop			; (mov r8, r8)
   2a46e:	46bd      	mov	sp, r7
   2a470:	b004      	add	sp, #16
   2a472:	bd80      	pop	{r7, pc}
   2a474:	40000800 	.word	0x40000800

0002a478 <system_clock_source_dpll_set_config>:
 *
 * \param[in] config  DPLL configuration structure containing the new config
 */
void system_clock_source_dpll_set_config(
		struct system_clock_source_dpll_config *const config)
{
   2a478:	b580      	push	{r7, lr}
   2a47a:	b086      	sub	sp, #24
   2a47c:	af00      	add	r7, sp, #0
   2a47e:	6078      	str	r0, [r7, #4]

	uint32_t tmpldr;
	uint8_t  tmpldrfrac;
	uint32_t refclk;

	refclk = config->reference_frequency;
   2a480:	687b      	ldr	r3, [r7, #4]
   2a482:	68db      	ldr	r3, [r3, #12]
   2a484:	617b      	str	r3, [r7, #20]

	/* Only reference clock REF1 can be divided */
	if (config->reference_clock == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_XOSC) {
   2a486:	687b      	ldr	r3, [r7, #4]
   2a488:	7d1b      	ldrb	r3, [r3, #20]
   2a48a:	2b01      	cmp	r3, #1
   2a48c:	d10a      	bne.n	2a4a4 <system_clock_source_dpll_set_config+0x2c>
		refclk = refclk / (2 * (config->reference_divider + 1));
   2a48e:	687b      	ldr	r3, [r7, #4]
   2a490:	8a1b      	ldrh	r3, [r3, #16]
   2a492:	3301      	adds	r3, #1
   2a494:	005b      	lsls	r3, r3, #1
   2a496:	001a      	movs	r2, r3
   2a498:	4b36      	ldr	r3, [pc, #216]	; (2a574 <system_clock_source_dpll_set_config+0xfc>)
   2a49a:	0011      	movs	r1, r2
   2a49c:	6978      	ldr	r0, [r7, #20]
   2a49e:	4798      	blx	r3
   2a4a0:	0003      	movs	r3, r0
   2a4a2:	617b      	str	r3, [r7, #20]
	}

	/* Calculate LDRFRAC and LDR */
	tmpldr = (config->output_frequency << 4) / refclk;
   2a4a4:	687b      	ldr	r3, [r7, #4]
   2a4a6:	689b      	ldr	r3, [r3, #8]
   2a4a8:	011a      	lsls	r2, r3, #4
   2a4aa:	4b32      	ldr	r3, [pc, #200]	; (2a574 <system_clock_source_dpll_set_config+0xfc>)
   2a4ac:	6979      	ldr	r1, [r7, #20]
   2a4ae:	0010      	movs	r0, r2
   2a4b0:	4798      	blx	r3
   2a4b2:	0003      	movs	r3, r0
   2a4b4:	613b      	str	r3, [r7, #16]
	tmpldrfrac = tmpldr & 0x0f;
   2a4b6:	693b      	ldr	r3, [r7, #16]
   2a4b8:	b2da      	uxtb	r2, r3
   2a4ba:	230f      	movs	r3, #15
   2a4bc:	18fb      	adds	r3, r7, r3
   2a4be:	210f      	movs	r1, #15
   2a4c0:	400a      	ands	r2, r1
   2a4c2:	701a      	strb	r2, [r3, #0]
	tmpldr = (tmpldr >> 4) - 1;
   2a4c4:	693b      	ldr	r3, [r7, #16]
   2a4c6:	091b      	lsrs	r3, r3, #4
   2a4c8:	3b01      	subs	r3, #1
   2a4ca:	613b      	str	r3, [r7, #16]

	SYSCTRL->DPLLCTRLA.reg =
   2a4cc:	492a      	ldr	r1, [pc, #168]	; (2a578 <system_clock_source_dpll_set_config+0x100>)
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   2a4ce:	687b      	ldr	r3, [r7, #4]
   2a4d0:	781b      	ldrb	r3, [r3, #0]
   2a4d2:	01db      	lsls	r3, r3, #7
   2a4d4:	b2da      	uxtb	r2, r3
			((uint32_t)config->run_in_standby << SYSCTRL_DPLLCTRLA_RUNSTDBY_Pos);
   2a4d6:	687b      	ldr	r3, [r7, #4]
   2a4d8:	785b      	ldrb	r3, [r3, #1]
   2a4da:	019b      	lsls	r3, r3, #6
   2a4dc:	b2db      	uxtb	r3, r3
			((uint32_t)config->on_demand << SYSCTRL_DPLLCTRLA_ONDEMAND_Pos) |
   2a4de:	4313      	orrs	r3, r2
   2a4e0:	b2da      	uxtb	r2, r3
	SYSCTRL->DPLLCTRLA.reg =
   2a4e2:	2344      	movs	r3, #68	; 0x44
   2a4e4:	54ca      	strb	r2, [r1, r3]

	SYSCTRL->DPLLRATIO.reg =
   2a4e6:	4b24      	ldr	r3, [pc, #144]	; (2a578 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   2a4e8:	220f      	movs	r2, #15
   2a4ea:	18ba      	adds	r2, r7, r2
   2a4ec:	7812      	ldrb	r2, [r2, #0]
   2a4ee:	0412      	lsls	r2, r2, #16
   2a4f0:	0011      	movs	r1, r2
   2a4f2:	22f0      	movs	r2, #240	; 0xf0
   2a4f4:	0312      	lsls	r2, r2, #12
   2a4f6:	4011      	ands	r1, r2
			SYSCTRL_DPLLRATIO_LDR(tmpldr);
   2a4f8:	693a      	ldr	r2, [r7, #16]
   2a4fa:	0512      	lsls	r2, r2, #20
   2a4fc:	0d12      	lsrs	r2, r2, #20
			SYSCTRL_DPLLRATIO_LDRFRAC(tmpldrfrac) |
   2a4fe:	430a      	orrs	r2, r1
	SYSCTRL->DPLLRATIO.reg =
   2a500:	649a      	str	r2, [r3, #72]	; 0x48

	SYSCTRL->DPLLCTRLB.reg =
   2a502:	4b1d      	ldr	r3, [pc, #116]	; (2a578 <system_clock_source_dpll_set_config+0x100>)
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   2a504:	687a      	ldr	r2, [r7, #4]
   2a506:	8a12      	ldrh	r2, [r2, #16]
   2a508:	0412      	lsls	r2, r2, #16
   2a50a:	0011      	movs	r1, r2
   2a50c:	4a1b      	ldr	r2, [pc, #108]	; (2a57c <system_clock_source_dpll_set_config+0x104>)
   2a50e:	4011      	ands	r1, r2
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   2a510:	687a      	ldr	r2, [r7, #4]
   2a512:	7892      	ldrb	r2, [r2, #2]
   2a514:	0312      	lsls	r2, r2, #12
			SYSCTRL_DPLLCTRLB_DIV(config->reference_divider) |
   2a516:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   2a518:	687a      	ldr	r2, [r7, #4]
   2a51a:	7cd2      	ldrb	r2, [r2, #19]
   2a51c:	0212      	lsls	r2, r2, #8
   2a51e:	0010      	movs	r0, r2
   2a520:	22e0      	movs	r2, #224	; 0xe0
   2a522:	00d2      	lsls	r2, r2, #3
   2a524:	4002      	ands	r2, r0
			((uint32_t)config->lock_bypass << SYSCTRL_DPLLCTRLB_LBYPASS_Pos) |
   2a526:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   2a528:	687a      	ldr	r2, [r7, #4]
   2a52a:	7d12      	ldrb	r2, [r2, #20]
   2a52c:	0112      	lsls	r2, r2, #4
   2a52e:	0010      	movs	r0, r2
   2a530:	2230      	movs	r2, #48	; 0x30
   2a532:	4002      	ands	r2, r0
			SYSCTRL_DPLLCTRLB_LTIME(config->lock_time) |
   2a534:	4311      	orrs	r1, r2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   2a536:	687a      	ldr	r2, [r7, #4]
   2a538:	78d2      	ldrb	r2, [r2, #3]
   2a53a:	00d2      	lsls	r2, r2, #3
			SYSCTRL_DPLLCTRLB_REFCLK(config->reference_clock) |
   2a53c:	4311      	orrs	r1, r2
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   2a53e:	687a      	ldr	r2, [r7, #4]
   2a540:	7912      	ldrb	r2, [r2, #4]
   2a542:	0092      	lsls	r2, r2, #2
			((uint32_t)config->wake_up_fast << SYSCTRL_DPLLCTRLB_WUF_Pos) |
   2a544:	4311      	orrs	r1, r2
			SYSCTRL_DPLLCTRLB_FILTER(config->filter);
   2a546:	687a      	ldr	r2, [r7, #4]
   2a548:	7c92      	ldrb	r2, [r2, #18]
   2a54a:	0010      	movs	r0, r2
   2a54c:	2203      	movs	r2, #3
   2a54e:	4002      	ands	r2, r0
			((uint32_t)config->low_power_enable << SYSCTRL_DPLLCTRLB_LPEN_Pos) |
   2a550:	430a      	orrs	r2, r1
	SYSCTRL->DPLLCTRLB.reg =
   2a552:	64da      	str	r2, [r3, #76]	; 0x4c

	/*
	 * Fck = Fckrx * (LDR + 1 + LDRFRAC / 16)
	 */
	_system_clock_inst.dpll.frequency =
			(refclk * (((tmpldr + 1) << 4) + tmpldrfrac)) >> 4;
   2a554:	693b      	ldr	r3, [r7, #16]
   2a556:	3301      	adds	r3, #1
   2a558:	011a      	lsls	r2, r3, #4
   2a55a:	230f      	movs	r3, #15
   2a55c:	18fb      	adds	r3, r7, r3
   2a55e:	781b      	ldrb	r3, [r3, #0]
   2a560:	18d3      	adds	r3, r2, r3
   2a562:	697a      	ldr	r2, [r7, #20]
   2a564:	4353      	muls	r3, r2
   2a566:	091a      	lsrs	r2, r3, #4
	_system_clock_inst.dpll.frequency =
   2a568:	4b05      	ldr	r3, [pc, #20]	; (2a580 <system_clock_source_dpll_set_config+0x108>)
   2a56a:	60da      	str	r2, [r3, #12]
}
   2a56c:	46c0      	nop			; (mov r8, r8)
   2a56e:	46bd      	mov	sp, r7
   2a570:	b006      	add	sp, #24
   2a572:	bd80      	pop	{r7, pc}
   2a574:	00033855 	.word	0x00033855
   2a578:	40000800 	.word	0x40000800
   2a57c:	07ff0000 	.word	0x07ff0000
   2a580:	200042dc 	.word	0x200042dc

0002a584 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
   2a584:	b580      	push	{r7, lr}
   2a586:	b082      	sub	sp, #8
   2a588:	af00      	add	r7, sp, #0
   2a58a:	0002      	movs	r2, r0
   2a58c:	1dfb      	adds	r3, r7, #7
   2a58e:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
   2a590:	1dfb      	adds	r3, r7, #7
   2a592:	781b      	ldrb	r3, [r3, #0]
   2a594:	2b08      	cmp	r3, #8
   2a596:	d83b      	bhi.n	2a610 <system_clock_source_enable+0x8c>
   2a598:	009a      	lsls	r2, r3, #2
   2a59a:	4b21      	ldr	r3, [pc, #132]	; (2a620 <system_clock_source_enable+0x9c>)
   2a59c:	18d3      	adds	r3, r2, r3
   2a59e:	681b      	ldr	r3, [r3, #0]
   2a5a0:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
   2a5a2:	4b20      	ldr	r3, [pc, #128]	; (2a624 <system_clock_source_enable+0xa0>)
   2a5a4:	4a1f      	ldr	r2, [pc, #124]	; (2a624 <system_clock_source_enable+0xa0>)
   2a5a6:	6a12      	ldr	r2, [r2, #32]
   2a5a8:	2102      	movs	r1, #2
   2a5aa:	430a      	orrs	r2, r1
   2a5ac:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
   2a5ae:	2300      	movs	r3, #0
   2a5b0:	e031      	b.n	2a616 <system_clock_source_enable+0x92>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
   2a5b2:	4b1c      	ldr	r3, [pc, #112]	; (2a624 <system_clock_source_enable+0xa0>)
   2a5b4:	4a1b      	ldr	r2, [pc, #108]	; (2a624 <system_clock_source_enable+0xa0>)
   2a5b6:	6992      	ldr	r2, [r2, #24]
   2a5b8:	2102      	movs	r1, #2
   2a5ba:	430a      	orrs	r2, r1
   2a5bc:	619a      	str	r2, [r3, #24]
		break;
   2a5be:	e029      	b.n	2a614 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
   2a5c0:	4a18      	ldr	r2, [pc, #96]	; (2a624 <system_clock_source_enable+0xa0>)
   2a5c2:	4b18      	ldr	r3, [pc, #96]	; (2a624 <system_clock_source_enable+0xa0>)
   2a5c4:	8a1b      	ldrh	r3, [r3, #16]
   2a5c6:	b29b      	uxth	r3, r3
   2a5c8:	2102      	movs	r1, #2
   2a5ca:	430b      	orrs	r3, r1
   2a5cc:	b29b      	uxth	r3, r3
   2a5ce:	8213      	strh	r3, [r2, #16]
		break;
   2a5d0:	e020      	b.n	2a614 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
   2a5d2:	4a14      	ldr	r2, [pc, #80]	; (2a624 <system_clock_source_enable+0xa0>)
   2a5d4:	4b13      	ldr	r3, [pc, #76]	; (2a624 <system_clock_source_enable+0xa0>)
   2a5d6:	8a9b      	ldrh	r3, [r3, #20]
   2a5d8:	b29b      	uxth	r3, r3
   2a5da:	2102      	movs	r1, #2
   2a5dc:	430b      	orrs	r3, r1
   2a5de:	b29b      	uxth	r3, r3
   2a5e0:	8293      	strh	r3, [r2, #20]
		break;
   2a5e2:	e017      	b.n	2a614 <system_clock_source_enable+0x90>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
   2a5e4:	4b10      	ldr	r3, [pc, #64]	; (2a628 <system_clock_source_enable+0xa4>)
   2a5e6:	681b      	ldr	r3, [r3, #0]
   2a5e8:	2202      	movs	r2, #2
   2a5ea:	431a      	orrs	r2, r3
   2a5ec:	4b0e      	ldr	r3, [pc, #56]	; (2a628 <system_clock_source_enable+0xa4>)
   2a5ee:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
   2a5f0:	4b0e      	ldr	r3, [pc, #56]	; (2a62c <system_clock_source_enable+0xa8>)
   2a5f2:	4798      	blx	r3
		break;
   2a5f4:	e00e      	b.n	2a614 <system_clock_source_enable+0x90>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
   2a5f6:	4a0b      	ldr	r2, [pc, #44]	; (2a624 <system_clock_source_enable+0xa0>)
   2a5f8:	490a      	ldr	r1, [pc, #40]	; (2a624 <system_clock_source_enable+0xa0>)
   2a5fa:	2344      	movs	r3, #68	; 0x44
   2a5fc:	5ccb      	ldrb	r3, [r1, r3]
   2a5fe:	b2db      	uxtb	r3, r3
   2a600:	2102      	movs	r1, #2
   2a602:	430b      	orrs	r3, r1
   2a604:	b2d9      	uxtb	r1, r3
   2a606:	2344      	movs	r3, #68	; 0x44
   2a608:	54d1      	strb	r1, [r2, r3]
		break;
   2a60a:	e003      	b.n	2a614 <system_clock_source_enable+0x90>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
   2a60c:	2300      	movs	r3, #0
   2a60e:	e002      	b.n	2a616 <system_clock_source_enable+0x92>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
   2a610:	2317      	movs	r3, #23
   2a612:	e000      	b.n	2a616 <system_clock_source_enable+0x92>
	}

	return STATUS_OK;
   2a614:	2300      	movs	r3, #0
}
   2a616:	0018      	movs	r0, r3
   2a618:	46bd      	mov	sp, r7
   2a61a:	b002      	add	sp, #8
   2a61c:	bd80      	pop	{r7, pc}
   2a61e:	46c0      	nop			; (mov r8, r8)
   2a620:	0003a628 	.word	0x0003a628
   2a624:	40000800 	.word	0x40000800
   2a628:	200042dc 	.word	0x200042dc
   2a62c:	0002a2fd 	.word	0x0002a2fd

0002a630 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
   2a630:	b580      	push	{r7, lr}
   2a632:	b084      	sub	sp, #16
   2a634:	af00      	add	r7, sp, #0
   2a636:	0002      	movs	r2, r0
   2a638:	1dfb      	adds	r3, r7, #7
   2a63a:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
   2a63c:	2300      	movs	r3, #0
   2a63e:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
   2a640:	1dfb      	adds	r3, r7, #7
   2a642:	781b      	ldrb	r3, [r3, #0]
   2a644:	2b08      	cmp	r3, #8
   2a646:	d821      	bhi.n	2a68c <system_clock_source_is_ready+0x5c>
   2a648:	009a      	lsls	r2, r3, #2
   2a64a:	4b18      	ldr	r3, [pc, #96]	; (2a6ac <system_clock_source_is_ready+0x7c>)
   2a64c:	18d3      	adds	r3, r2, r3
   2a64e:	681b      	ldr	r3, [r3, #0]
   2a650:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
   2a652:	2308      	movs	r3, #8
   2a654:	60fb      	str	r3, [r7, #12]
		break;
   2a656:	e01b      	b.n	2a690 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
   2a658:	2304      	movs	r3, #4
   2a65a:	60fb      	str	r3, [r7, #12]
		break;
   2a65c:	e018      	b.n	2a690 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
   2a65e:	2301      	movs	r3, #1
   2a660:	60fb      	str	r3, [r7, #12]
		break;
   2a662:	e015      	b.n	2a690 <system_clock_source_is_ready+0x60>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
   2a664:	2302      	movs	r3, #2
   2a666:	60fb      	str	r3, [r7, #12]
		break;
   2a668:	e012      	b.n	2a690 <system_clock_source_is_ready+0x60>
	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
   2a66a:	2310      	movs	r3, #16
   2a66c:	60fb      	str	r3, [r7, #12]
		}
		break;
   2a66e:	e00f      	b.n	2a690 <system_clock_source_is_ready+0x60>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
   2a670:	4a0f      	ldr	r2, [pc, #60]	; (2a6b0 <system_clock_source_is_ready+0x80>)
   2a672:	2350      	movs	r3, #80	; 0x50
   2a674:	5cd3      	ldrb	r3, [r2, r3]
   2a676:	b2db      	uxtb	r3, r3
   2a678:	001a      	movs	r2, r3
   2a67a:	2303      	movs	r3, #3
   2a67c:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
   2a67e:	3b03      	subs	r3, #3
   2a680:	425a      	negs	r2, r3
   2a682:	4153      	adcs	r3, r2
   2a684:	b2db      	uxtb	r3, r3
   2a686:	e00c      	b.n	2a6a2 <system_clock_source_is_ready+0x72>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
   2a688:	2301      	movs	r3, #1
   2a68a:	e00a      	b.n	2a6a2 <system_clock_source_is_ready+0x72>

	default:
		return false;
   2a68c:	2300      	movs	r3, #0
   2a68e:	e008      	b.n	2a6a2 <system_clock_source_is_ready+0x72>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
   2a690:	4b07      	ldr	r3, [pc, #28]	; (2a6b0 <system_clock_source_is_ready+0x80>)
   2a692:	68db      	ldr	r3, [r3, #12]
   2a694:	68fa      	ldr	r2, [r7, #12]
   2a696:	401a      	ands	r2, r3
   2a698:	68fb      	ldr	r3, [r7, #12]
   2a69a:	1ad3      	subs	r3, r2, r3
   2a69c:	425a      	negs	r2, r3
   2a69e:	4153      	adcs	r3, r2
   2a6a0:	b2db      	uxtb	r3, r3
}
   2a6a2:	0018      	movs	r0, r3
   2a6a4:	46bd      	mov	sp, r7
   2a6a6:	b004      	add	sp, #16
   2a6a8:	bd80      	pop	{r7, pc}
   2a6aa:	46c0      	nop			; (mov r8, r8)
   2a6ac:	0003a64c 	.word	0x0003a64c
   2a6b0:	40000800 	.word	0x40000800

0002a6b4 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
   2a6b4:	b580      	push	{r7, lr}
   2a6b6:	b082      	sub	sp, #8
   2a6b8:	af00      	add	r7, sp, #0
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
   2a6ba:	003b      	movs	r3, r7
   2a6bc:	2203      	movs	r2, #3
   2a6be:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   2a6c0:	2300      	movs	r3, #0
   2a6c2:	607b      	str	r3, [r7, #4]
   2a6c4:	e009      	b.n	2a6da <_switch_peripheral_gclk+0x26>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
   2a6c6:	687b      	ldr	r3, [r7, #4]
   2a6c8:	b2db      	uxtb	r3, r3
   2a6ca:	003a      	movs	r2, r7
   2a6cc:	0011      	movs	r1, r2
   2a6ce:	0018      	movs	r0, r3
   2a6d0:	4b05      	ldr	r3, [pc, #20]	; (2a6e8 <_switch_peripheral_gclk+0x34>)
   2a6d2:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
   2a6d4:	687b      	ldr	r3, [r7, #4]
   2a6d6:	3301      	adds	r3, #1
   2a6d8:	607b      	str	r3, [r7, #4]
   2a6da:	687b      	ldr	r3, [r7, #4]
   2a6dc:	2b24      	cmp	r3, #36	; 0x24
   2a6de:	d9f2      	bls.n	2a6c6 <_switch_peripheral_gclk+0x12>
	}
}
   2a6e0:	46c0      	nop			; (mov r8, r8)
   2a6e2:	46bd      	mov	sp, r7
   2a6e4:	b002      	add	sp, #8
   2a6e6:	bd80      	pop	{r7, pc}
   2a6e8:	0002acb9 	.word	0x0002acb9

0002a6ec <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
   2a6ec:	b580      	push	{r7, lr}
   2a6ee:	b0a6      	sub	sp, #152	; 0x98
   2a6f0:	af00      	add	r7, sp, #0
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
   2a6f2:	4b92      	ldr	r3, [pc, #584]	; (2a93c <system_clock_init+0x250>)
   2a6f4:	22c2      	movs	r2, #194	; 0xc2
   2a6f6:	00d2      	lsls	r2, r2, #3
   2a6f8:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
   2a6fa:	2003      	movs	r0, #3
   2a6fc:	4b90      	ldr	r3, [pc, #576]	; (2a940 <system_clock_init+0x254>)
   2a6fe:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
   2a700:	4b90      	ldr	r3, [pc, #576]	; (2a944 <system_clock_init+0x258>)
   2a702:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
   2a704:	2394      	movs	r3, #148	; 0x94
   2a706:	18fb      	adds	r3, r7, r3
   2a708:	0018      	movs	r0, r3
   2a70a:	4b8f      	ldr	r3, [pc, #572]	; (2a948 <system_clock_init+0x25c>)
   2a70c:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
   2a70e:	2394      	movs	r3, #148	; 0x94
   2a710:	18fb      	adds	r3, r7, r3
   2a712:	2200      	movs	r2, #0
   2a714:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
   2a716:	2394      	movs	r3, #148	; 0x94
   2a718:	18fb      	adds	r3, r7, r3
   2a71a:	2201      	movs	r2, #1
   2a71c:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
   2a71e:	2394      	movs	r3, #148	; 0x94
   2a720:	18fb      	adds	r3, r7, r3
   2a722:	2200      	movs	r2, #0
   2a724:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
   2a726:	2394      	movs	r3, #148	; 0x94
   2a728:	18fb      	adds	r3, r7, r3
   2a72a:	0018      	movs	r0, r3
   2a72c:	4b87      	ldr	r3, [pc, #540]	; (2a94c <system_clock_init+0x260>)
   2a72e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
   2a730:	2006      	movs	r0, #6
   2a732:	4b87      	ldr	r3, [pc, #540]	; (2a950 <system_clock_init+0x264>)
   2a734:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
   2a736:	4b87      	ldr	r3, [pc, #540]	; (2a954 <system_clock_init+0x268>)
   2a738:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
   2a73a:	2360      	movs	r3, #96	; 0x60
   2a73c:	18fb      	adds	r3, r7, r3
   2a73e:	0018      	movs	r0, r3
   2a740:	4b85      	ldr	r3, [pc, #532]	; (2a958 <system_clock_init+0x26c>)
   2a742:	4798      	blx	r3
   2a744:	2360      	movs	r3, #96	; 0x60
   2a746:	18fb      	adds	r3, r7, r3
   2a748:	2206      	movs	r2, #6
   2a74a:	701a      	strb	r2, [r3, #0]
   2a74c:	2360      	movs	r3, #96	; 0x60
   2a74e:	18fb      	adds	r3, r7, r3
   2a750:	2208      	movs	r2, #8
   2a752:	605a      	str	r2, [r3, #4]
   2a754:	2360      	movs	r3, #96	; 0x60
   2a756:	18fb      	adds	r3, r7, r3
   2a758:	2200      	movs	r2, #0
   2a75a:	721a      	strb	r2, [r3, #8]
   2a75c:	2360      	movs	r3, #96	; 0x60
   2a75e:	18fb      	adds	r3, r7, r3
   2a760:	2200      	movs	r2, #0
   2a762:	725a      	strb	r2, [r3, #9]
   2a764:	2360      	movs	r3, #96	; 0x60
   2a766:	18fb      	adds	r3, r7, r3
   2a768:	0019      	movs	r1, r3
   2a76a:	2001      	movs	r0, #1
   2a76c:	4b7b      	ldr	r3, [pc, #492]	; (2a95c <system_clock_init+0x270>)
   2a76e:	4798      	blx	r3
   2a770:	2001      	movs	r0, #1
   2a772:	4b7b      	ldr	r3, [pc, #492]	; (2a960 <system_clock_init+0x274>)
   2a774:	4798      	blx	r3
   2a776:	2354      	movs	r3, #84	; 0x54
   2a778:	18fb      	adds	r3, r7, r3
   2a77a:	0018      	movs	r0, r3
   2a77c:	4b76      	ldr	r3, [pc, #472]	; (2a958 <system_clock_init+0x26c>)
   2a77e:	4798      	blx	r3
   2a780:	2354      	movs	r3, #84	; 0x54
   2a782:	18fb      	adds	r3, r7, r3
   2a784:	2203      	movs	r2, #3
   2a786:	701a      	strb	r2, [r3, #0]
   2a788:	2354      	movs	r3, #84	; 0x54
   2a78a:	18fb      	adds	r3, r7, r3
   2a78c:	2201      	movs	r2, #1
   2a78e:	605a      	str	r2, [r3, #4]
   2a790:	2354      	movs	r3, #84	; 0x54
   2a792:	18fb      	adds	r3, r7, r3
   2a794:	2201      	movs	r2, #1
   2a796:	721a      	strb	r2, [r3, #8]
   2a798:	2354      	movs	r3, #84	; 0x54
   2a79a:	18fb      	adds	r3, r7, r3
   2a79c:	2200      	movs	r2, #0
   2a79e:	725a      	strb	r2, [r3, #9]
   2a7a0:	2354      	movs	r3, #84	; 0x54
   2a7a2:	18fb      	adds	r3, r7, r3
   2a7a4:	0019      	movs	r1, r3
   2a7a6:	2002      	movs	r0, #2
   2a7a8:	4b6c      	ldr	r3, [pc, #432]	; (2a95c <system_clock_init+0x270>)
   2a7aa:	4798      	blx	r3
   2a7ac:	2002      	movs	r0, #2
   2a7ae:	4b6c      	ldr	r3, [pc, #432]	; (2a960 <system_clock_init+0x274>)
   2a7b0:	4798      	blx	r3
   2a7b2:	233c      	movs	r3, #60	; 0x3c
   2a7b4:	18fb      	adds	r3, r7, r3
   2a7b6:	0018      	movs	r0, r3
   2a7b8:	4b67      	ldr	r3, [pc, #412]	; (2a958 <system_clock_init+0x26c>)
   2a7ba:	4798      	blx	r3
   2a7bc:	233c      	movs	r3, #60	; 0x3c
   2a7be:	18fb      	adds	r3, r7, r3
   2a7c0:	2203      	movs	r2, #3
   2a7c2:	701a      	strb	r2, [r3, #0]
   2a7c4:	233c      	movs	r3, #60	; 0x3c
   2a7c6:	18fb      	adds	r3, r7, r3
   2a7c8:	2220      	movs	r2, #32
   2a7ca:	605a      	str	r2, [r3, #4]
   2a7cc:	233c      	movs	r3, #60	; 0x3c
   2a7ce:	18fb      	adds	r3, r7, r3
   2a7d0:	2200      	movs	r2, #0
   2a7d2:	721a      	strb	r2, [r3, #8]
   2a7d4:	233c      	movs	r3, #60	; 0x3c
   2a7d6:	18fb      	adds	r3, r7, r3
   2a7d8:	2200      	movs	r2, #0
   2a7da:	725a      	strb	r2, [r3, #9]
   2a7dc:	233c      	movs	r3, #60	; 0x3c
   2a7de:	18fb      	adds	r3, r7, r3
   2a7e0:	0019      	movs	r1, r3
   2a7e2:	2004      	movs	r0, #4
   2a7e4:	4b5d      	ldr	r3, [pc, #372]	; (2a95c <system_clock_init+0x270>)
   2a7e6:	4798      	blx	r3
   2a7e8:	2004      	movs	r0, #4
   2a7ea:	4b5d      	ldr	r3, [pc, #372]	; (2a960 <system_clock_init+0x274>)
   2a7ec:	4798      	blx	r3
   2a7ee:	2330      	movs	r3, #48	; 0x30
   2a7f0:	18fb      	adds	r3, r7, r3
   2a7f2:	0018      	movs	r0, r3
   2a7f4:	4b58      	ldr	r3, [pc, #352]	; (2a958 <system_clock_init+0x26c>)
   2a7f6:	4798      	blx	r3
   2a7f8:	2330      	movs	r3, #48	; 0x30
   2a7fa:	18fb      	adds	r3, r7, r3
   2a7fc:	2206      	movs	r2, #6
   2a7fe:	701a      	strb	r2, [r3, #0]
   2a800:	2330      	movs	r3, #48	; 0x30
   2a802:	18fb      	adds	r3, r7, r3
   2a804:	2201      	movs	r2, #1
   2a806:	605a      	str	r2, [r3, #4]
   2a808:	2330      	movs	r3, #48	; 0x30
   2a80a:	18fb      	adds	r3, r7, r3
   2a80c:	2200      	movs	r2, #0
   2a80e:	721a      	strb	r2, [r3, #8]
   2a810:	2330      	movs	r3, #48	; 0x30
   2a812:	18fb      	adds	r3, r7, r3
   2a814:	2200      	movs	r2, #0
   2a816:	725a      	strb	r2, [r3, #9]
   2a818:	2330      	movs	r3, #48	; 0x30
   2a81a:	18fb      	adds	r3, r7, r3
   2a81c:	0019      	movs	r1, r3
   2a81e:	2005      	movs	r0, #5
   2a820:	4b4e      	ldr	r3, [pc, #312]	; (2a95c <system_clock_init+0x270>)
   2a822:	4798      	blx	r3
   2a824:	2005      	movs	r0, #5
   2a826:	4b4e      	ldr	r3, [pc, #312]	; (2a960 <system_clock_init+0x274>)
   2a828:	4798      	blx	r3
#  endif

#  if CONF_CLOCK_DPLL_ENABLE == true
	/* Enable DPLL internal lock timer and reference clock */
	struct system_gclk_chan_config dpll_gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&dpll_gclk_chan_conf);
   2a82a:	2390      	movs	r3, #144	; 0x90
   2a82c:	18fb      	adds	r3, r7, r3
   2a82e:	0018      	movs	r0, r3
   2a830:	4b4c      	ldr	r3, [pc, #304]	; (2a964 <system_clock_init+0x278>)
   2a832:	4798      	blx	r3
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL32K, &dpll_gclk_chan_conf);
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL32K);
	}

	if (CONF_CLOCK_DPLL_REFERENCE_CLOCK == SYSTEM_CLOCK_SOURCE_DPLL_REFERENCE_CLOCK_GCLK) {
		dpll_gclk_chan_conf.source_generator = CONF_CLOCK_DPLL_REFERENCE_GCLK_GENERATOR;
   2a834:	2390      	movs	r3, #144	; 0x90
   2a836:	18fb      	adds	r3, r7, r3
   2a838:	2201      	movs	r2, #1
   2a83a:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_FDPLL, &dpll_gclk_chan_conf);
   2a83c:	2390      	movs	r3, #144	; 0x90
   2a83e:	18fb      	adds	r3, r7, r3
   2a840:	0019      	movs	r1, r3
   2a842:	2001      	movs	r0, #1
   2a844:	4b48      	ldr	r3, [pc, #288]	; (2a968 <system_clock_init+0x27c>)
   2a846:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_FDPLL);
   2a848:	2001      	movs	r0, #1
   2a84a:	4b48      	ldr	r3, [pc, #288]	; (2a96c <system_clock_init+0x280>)
   2a84c:	4798      	blx	r3
	else {
		Assert(false);
	}

	struct system_clock_source_dpll_config dpll_config;
	system_clock_source_dpll_get_config_defaults(&dpll_config);
   2a84e:	2378      	movs	r3, #120	; 0x78
   2a850:	18fb      	adds	r3, r7, r3
   2a852:	0018      	movs	r0, r3
   2a854:	4b46      	ldr	r3, [pc, #280]	; (2a970 <system_clock_init+0x284>)
   2a856:	4798      	blx	r3

	dpll_config.on_demand        = false;
   2a858:	2378      	movs	r3, #120	; 0x78
   2a85a:	18fb      	adds	r3, r7, r3
   2a85c:	2200      	movs	r2, #0
   2a85e:	701a      	strb	r2, [r3, #0]
	dpll_config.run_in_standby   = CONF_CLOCK_DPLL_RUN_IN_STANDBY;
   2a860:	2378      	movs	r3, #120	; 0x78
   2a862:	18fb      	adds	r3, r7, r3
   2a864:	2200      	movs	r2, #0
   2a866:	705a      	strb	r2, [r3, #1]
	dpll_config.lock_bypass      = CONF_CLOCK_DPLL_LOCK_BYPASS;
   2a868:	2378      	movs	r3, #120	; 0x78
   2a86a:	18fb      	adds	r3, r7, r3
   2a86c:	2200      	movs	r2, #0
   2a86e:	709a      	strb	r2, [r3, #2]
	dpll_config.wake_up_fast     = CONF_CLOCK_DPLL_WAKE_UP_FAST;
   2a870:	2378      	movs	r3, #120	; 0x78
   2a872:	18fb      	adds	r3, r7, r3
   2a874:	2200      	movs	r2, #0
   2a876:	70da      	strb	r2, [r3, #3]
	dpll_config.low_power_enable = CONF_CLOCK_DPLL_LOW_POWER_ENABLE;
   2a878:	2378      	movs	r3, #120	; 0x78
   2a87a:	18fb      	adds	r3, r7, r3
   2a87c:	2200      	movs	r2, #0
   2a87e:	711a      	strb	r2, [r3, #4]

	dpll_config.filter           = CONF_CLOCK_DPLL_FILTER;
   2a880:	2378      	movs	r3, #120	; 0x78
   2a882:	18fb      	adds	r3, r7, r3
   2a884:	2200      	movs	r2, #0
   2a886:	749a      	strb	r2, [r3, #18]
	dpll_config.lock_time        = CONF_CLOCK_DPLL_LOCK_TIME;
   2a888:	2378      	movs	r3, #120	; 0x78
   2a88a:	18fb      	adds	r3, r7, r3
   2a88c:	2200      	movs	r2, #0
   2a88e:	74da      	strb	r2, [r3, #19]

	dpll_config.reference_clock     = CONF_CLOCK_DPLL_REFERENCE_CLOCK;
   2a890:	2378      	movs	r3, #120	; 0x78
   2a892:	18fb      	adds	r3, r7, r3
   2a894:	2202      	movs	r2, #2
   2a896:	751a      	strb	r2, [r3, #20]
	dpll_config.reference_frequency = CONF_CLOCK_DPLL_REFERENCE_FREQUENCY;
   2a898:	2378      	movs	r3, #120	; 0x78
   2a89a:	18fb      	adds	r3, r7, r3
   2a89c:	4a35      	ldr	r2, [pc, #212]	; (2a974 <system_clock_init+0x288>)
   2a89e:	60da      	str	r2, [r3, #12]
	dpll_config.reference_divider   = CONF_CLOCK_DPLL_REFERENCE_DIVIDER;
   2a8a0:	2378      	movs	r3, #120	; 0x78
   2a8a2:	18fb      	adds	r3, r7, r3
   2a8a4:	2201      	movs	r2, #1
   2a8a6:	821a      	strh	r2, [r3, #16]
	dpll_config.output_frequency    = CONF_CLOCK_DPLL_OUTPUT_FREQUENCY;
   2a8a8:	2378      	movs	r3, #120	; 0x78
   2a8aa:	18fb      	adds	r3, r7, r3
   2a8ac:	4a32      	ldr	r2, [pc, #200]	; (2a978 <system_clock_init+0x28c>)
   2a8ae:	609a      	str	r2, [r3, #8]

	system_clock_source_dpll_set_config(&dpll_config);
   2a8b0:	2378      	movs	r3, #120	; 0x78
   2a8b2:	18fb      	adds	r3, r7, r3
   2a8b4:	0018      	movs	r0, r3
   2a8b6:	4b31      	ldr	r3, [pc, #196]	; (2a97c <system_clock_init+0x290>)
   2a8b8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DPLL);
   2a8ba:	2008      	movs	r0, #8
   2a8bc:	4b24      	ldr	r3, [pc, #144]	; (2a950 <system_clock_init+0x264>)
   2a8be:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DPLL));
   2a8c0:	46c0      	nop			; (mov r8, r8)
   2a8c2:	2008      	movs	r0, #8
   2a8c4:	4b2e      	ldr	r3, [pc, #184]	; (2a980 <system_clock_init+0x294>)
   2a8c6:	4798      	blx	r3
   2a8c8:	0003      	movs	r3, r0
   2a8ca:	001a      	movs	r2, r3
   2a8cc:	2301      	movs	r3, #1
   2a8ce:	4053      	eors	r3, r2
   2a8d0:	b2db      	uxtb	r3, r3
   2a8d2:	2b00      	cmp	r3, #0
   2a8d4:	d1f5      	bne.n	2a8c2 <system_clock_init+0x1d6>
	if (CONF_CLOCK_DPLL_ON_DEMAND) {
		SYSCTRL->DPLLCTRLA.bit.ONDEMAND = 1;
   2a8d6:	4919      	ldr	r1, [pc, #100]	; (2a93c <system_clock_init+0x250>)
   2a8d8:	2244      	movs	r2, #68	; 0x44
   2a8da:	5c8b      	ldrb	r3, [r1, r2]
   2a8dc:	2080      	movs	r0, #128	; 0x80
   2a8de:	4240      	negs	r0, r0
   2a8e0:	4303      	orrs	r3, r0
   2a8e2:	548b      	strb	r3, [r1, r2]

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
   2a8e4:	2000      	movs	r0, #0
   2a8e6:	4b27      	ldr	r3, [pc, #156]	; (2a984 <system_clock_init+0x298>)
   2a8e8:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
   2a8ea:	2100      	movs	r1, #0
   2a8ec:	2000      	movs	r0, #0
   2a8ee:	4b26      	ldr	r3, [pc, #152]	; (2a988 <system_clock_init+0x29c>)
   2a8f0:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
   2a8f2:	2100      	movs	r1, #0
   2a8f4:	2001      	movs	r0, #1
   2a8f6:	4b24      	ldr	r3, [pc, #144]	; (2a988 <system_clock_init+0x29c>)
   2a8f8:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
   2a8fa:	2100      	movs	r1, #0
   2a8fc:	2002      	movs	r0, #2
   2a8fe:	4b22      	ldr	r3, [pc, #136]	; (2a988 <system_clock_init+0x29c>)
   2a900:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
   2a902:	003b      	movs	r3, r7
   2a904:	0018      	movs	r0, r3
   2a906:	4b14      	ldr	r3, [pc, #80]	; (2a958 <system_clock_init+0x26c>)
   2a908:	4798      	blx	r3
   2a90a:	003b      	movs	r3, r7
   2a90c:	2208      	movs	r2, #8
   2a90e:	701a      	strb	r2, [r3, #0]
   2a910:	003b      	movs	r3, r7
   2a912:	2201      	movs	r2, #1
   2a914:	605a      	str	r2, [r3, #4]
   2a916:	003b      	movs	r3, r7
   2a918:	2200      	movs	r2, #0
   2a91a:	721a      	strb	r2, [r3, #8]
   2a91c:	003b      	movs	r3, r7
   2a91e:	2201      	movs	r2, #1
   2a920:	725a      	strb	r2, [r3, #9]
   2a922:	003b      	movs	r3, r7
   2a924:	0019      	movs	r1, r3
   2a926:	2000      	movs	r0, #0
   2a928:	4b0c      	ldr	r3, [pc, #48]	; (2a95c <system_clock_init+0x270>)
   2a92a:	4798      	blx	r3
   2a92c:	2000      	movs	r0, #0
   2a92e:	4b0c      	ldr	r3, [pc, #48]	; (2a960 <system_clock_init+0x274>)
   2a930:	4798      	blx	r3
#endif
}
   2a932:	46c0      	nop			; (mov r8, r8)
   2a934:	46bd      	mov	sp, r7
   2a936:	b026      	add	sp, #152	; 0x98
   2a938:	bd80      	pop	{r7, pc}
   2a93a:	46c0      	nop			; (mov r8, r8)
   2a93c:	40000800 	.word	0x40000800
   2a940:	0002a2ad 	.word	0x0002a2ad
   2a944:	0002a6b5 	.word	0x0002a6b5
   2a948:	0002a1bd 	.word	0x0002a1bd
   2a94c:	0002a401 	.word	0x0002a401
   2a950:	0002a585 	.word	0x0002a585
   2a954:	0002aa31 	.word	0x0002aa31
   2a958:	0002a179 	.word	0x0002a179
   2a95c:	0002aa61 	.word	0x0002aa61
   2a960:	0002ab85 	.word	0x0002ab85
   2a964:	0002a1a7 	.word	0x0002a1a7
   2a968:	0002acb9 	.word	0x0002acb9
   2a96c:	0002acfd 	.word	0x0002acfd
   2a970:	0002a255 	.word	0x0002a255
   2a974:	000f4240 	.word	0x000f4240
   2a978:	02dc6c00 	.word	0x02dc6c00
   2a97c:	0002a479 	.word	0x0002a479
   2a980:	0002a631 	.word	0x0002a631
   2a984:	0002a1e1 	.word	0x0002a1e1
   2a988:	0002a201 	.word	0x0002a201

0002a98c <system_apb_clock_set_mask>:
{
   2a98c:	b580      	push	{r7, lr}
   2a98e:	b082      	sub	sp, #8
   2a990:	af00      	add	r7, sp, #0
   2a992:	0002      	movs	r2, r0
   2a994:	6039      	str	r1, [r7, #0]
   2a996:	1dfb      	adds	r3, r7, #7
   2a998:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2a99a:	1dfb      	adds	r3, r7, #7
   2a99c:	781b      	ldrb	r3, [r3, #0]
   2a99e:	2b01      	cmp	r3, #1
   2a9a0:	d00a      	beq.n	2a9b8 <system_apb_clock_set_mask+0x2c>
   2a9a2:	2b02      	cmp	r3, #2
   2a9a4:	d00f      	beq.n	2a9c6 <system_apb_clock_set_mask+0x3a>
   2a9a6:	2b00      	cmp	r3, #0
   2a9a8:	d114      	bne.n	2a9d4 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2a9aa:	4b0e      	ldr	r3, [pc, #56]	; (2a9e4 <system_apb_clock_set_mask+0x58>)
   2a9ac:	4a0d      	ldr	r2, [pc, #52]	; (2a9e4 <system_apb_clock_set_mask+0x58>)
   2a9ae:	6991      	ldr	r1, [r2, #24]
   2a9b0:	683a      	ldr	r2, [r7, #0]
   2a9b2:	430a      	orrs	r2, r1
   2a9b4:	619a      	str	r2, [r3, #24]
			break;
   2a9b6:	e00f      	b.n	2a9d8 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2a9b8:	4b0a      	ldr	r3, [pc, #40]	; (2a9e4 <system_apb_clock_set_mask+0x58>)
   2a9ba:	4a0a      	ldr	r2, [pc, #40]	; (2a9e4 <system_apb_clock_set_mask+0x58>)
   2a9bc:	69d1      	ldr	r1, [r2, #28]
   2a9be:	683a      	ldr	r2, [r7, #0]
   2a9c0:	430a      	orrs	r2, r1
   2a9c2:	61da      	str	r2, [r3, #28]
			break;
   2a9c4:	e008      	b.n	2a9d8 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2a9c6:	4b07      	ldr	r3, [pc, #28]	; (2a9e4 <system_apb_clock_set_mask+0x58>)
   2a9c8:	4a06      	ldr	r2, [pc, #24]	; (2a9e4 <system_apb_clock_set_mask+0x58>)
   2a9ca:	6a11      	ldr	r1, [r2, #32]
   2a9cc:	683a      	ldr	r2, [r7, #0]
   2a9ce:	430a      	orrs	r2, r1
   2a9d0:	621a      	str	r2, [r3, #32]
			break;
   2a9d2:	e001      	b.n	2a9d8 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2a9d4:	2317      	movs	r3, #23
   2a9d6:	e000      	b.n	2a9da <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2a9d8:	2300      	movs	r3, #0
}
   2a9da:	0018      	movs	r0, r3
   2a9dc:	46bd      	mov	sp, r7
   2a9de:	b002      	add	sp, #8
   2a9e0:	bd80      	pop	{r7, pc}
   2a9e2:	46c0      	nop			; (mov r8, r8)
   2a9e4:	40000400 	.word	0x40000400

0002a9e8 <system_interrupt_enter_critical_section>:
{
   2a9e8:	b580      	push	{r7, lr}
   2a9ea:	af00      	add	r7, sp, #0
	cpu_irq_enter_critical();
   2a9ec:	4b02      	ldr	r3, [pc, #8]	; (2a9f8 <system_interrupt_enter_critical_section+0x10>)
   2a9ee:	4798      	blx	r3
}
   2a9f0:	46c0      	nop			; (mov r8, r8)
   2a9f2:	46bd      	mov	sp, r7
   2a9f4:	bd80      	pop	{r7, pc}
   2a9f6:	46c0      	nop			; (mov r8, r8)
   2a9f8:	00027025 	.word	0x00027025

0002a9fc <system_interrupt_leave_critical_section>:
{
   2a9fc:	b580      	push	{r7, lr}
   2a9fe:	af00      	add	r7, sp, #0
	cpu_irq_leave_critical();
   2aa00:	4b02      	ldr	r3, [pc, #8]	; (2aa0c <system_interrupt_leave_critical_section+0x10>)
   2aa02:	4798      	blx	r3
}
   2aa04:	46c0      	nop			; (mov r8, r8)
   2aa06:	46bd      	mov	sp, r7
   2aa08:	bd80      	pop	{r7, pc}
   2aa0a:	46c0      	nop			; (mov r8, r8)
   2aa0c:	00027079 	.word	0x00027079

0002aa10 <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
   2aa10:	b580      	push	{r7, lr}
   2aa12:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
   2aa14:	4b05      	ldr	r3, [pc, #20]	; (2aa2c <system_gclk_is_syncing+0x1c>)
   2aa16:	785b      	ldrb	r3, [r3, #1]
   2aa18:	b2db      	uxtb	r3, r3
   2aa1a:	b25b      	sxtb	r3, r3
   2aa1c:	2b00      	cmp	r3, #0
   2aa1e:	da01      	bge.n	2aa24 <system_gclk_is_syncing+0x14>
		return true;
   2aa20:	2301      	movs	r3, #1
   2aa22:	e000      	b.n	2aa26 <system_gclk_is_syncing+0x16>
	}

	return false;
   2aa24:	2300      	movs	r3, #0
}
   2aa26:	0018      	movs	r0, r3
   2aa28:	46bd      	mov	sp, r7
   2aa2a:	bd80      	pop	{r7, pc}
   2aa2c:	40000c00 	.word	0x40000c00

0002aa30 <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
   2aa30:	b580      	push	{r7, lr}
   2aa32:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
   2aa34:	2108      	movs	r1, #8
   2aa36:	2000      	movs	r0, #0
   2aa38:	4b07      	ldr	r3, [pc, #28]	; (2aa58 <system_gclk_init+0x28>)
   2aa3a:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
   2aa3c:	4b07      	ldr	r3, [pc, #28]	; (2aa5c <system_gclk_init+0x2c>)
   2aa3e:	2201      	movs	r2, #1
   2aa40:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
   2aa42:	46c0      	nop			; (mov r8, r8)
   2aa44:	4b05      	ldr	r3, [pc, #20]	; (2aa5c <system_gclk_init+0x2c>)
   2aa46:	781b      	ldrb	r3, [r3, #0]
   2aa48:	b2db      	uxtb	r3, r3
   2aa4a:	001a      	movs	r2, r3
   2aa4c:	2301      	movs	r3, #1
   2aa4e:	4013      	ands	r3, r2
   2aa50:	d1f8      	bne.n	2aa44 <system_gclk_init+0x14>
		/* Wait for reset to complete */
	}
}
   2aa52:	46c0      	nop			; (mov r8, r8)
   2aa54:	46bd      	mov	sp, r7
   2aa56:	bd80      	pop	{r7, pc}
   2aa58:	0002a98d 	.word	0x0002a98d
   2aa5c:	40000c00 	.word	0x40000c00

0002aa60 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
   2aa60:	b580      	push	{r7, lr}
   2aa62:	b086      	sub	sp, #24
   2aa64:	af00      	add	r7, sp, #0
   2aa66:	0002      	movs	r2, r0
   2aa68:	6039      	str	r1, [r7, #0]
   2aa6a:	1dfb      	adds	r3, r7, #7
   2aa6c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
   2aa6e:	1dfb      	adds	r3, r7, #7
   2aa70:	781b      	ldrb	r3, [r3, #0]
   2aa72:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
   2aa74:	1dfb      	adds	r3, r7, #7
   2aa76:	781b      	ldrb	r3, [r3, #0]
   2aa78:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
   2aa7a:	683b      	ldr	r3, [r7, #0]
   2aa7c:	781b      	ldrb	r3, [r3, #0]
   2aa7e:	021b      	lsls	r3, r3, #8
   2aa80:	001a      	movs	r2, r3
   2aa82:	697b      	ldr	r3, [r7, #20]
   2aa84:	4313      	orrs	r3, r2
   2aa86:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
   2aa88:	683b      	ldr	r3, [r7, #0]
   2aa8a:	785b      	ldrb	r3, [r3, #1]
   2aa8c:	2b00      	cmp	r3, #0
   2aa8e:	d004      	beq.n	2aa9a <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
   2aa90:	697b      	ldr	r3, [r7, #20]
   2aa92:	2280      	movs	r2, #128	; 0x80
   2aa94:	02d2      	lsls	r2, r2, #11
   2aa96:	4313      	orrs	r3, r2
   2aa98:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
   2aa9a:	683b      	ldr	r3, [r7, #0]
   2aa9c:	7a5b      	ldrb	r3, [r3, #9]
   2aa9e:	2b00      	cmp	r3, #0
   2aaa0:	d004      	beq.n	2aaac <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
   2aaa2:	697b      	ldr	r3, [r7, #20]
   2aaa4:	2280      	movs	r2, #128	; 0x80
   2aaa6:	0312      	lsls	r2, r2, #12
   2aaa8:	4313      	orrs	r3, r2
   2aaaa:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
   2aaac:	683b      	ldr	r3, [r7, #0]
   2aaae:	685b      	ldr	r3, [r3, #4]
   2aab0:	2b01      	cmp	r3, #1
   2aab2:	d92c      	bls.n	2ab0e <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
   2aab4:	683b      	ldr	r3, [r7, #0]
   2aab6:	685a      	ldr	r2, [r3, #4]
   2aab8:	683b      	ldr	r3, [r7, #0]
   2aaba:	685b      	ldr	r3, [r3, #4]
   2aabc:	3b01      	subs	r3, #1
   2aabe:	4013      	ands	r3, r2
   2aac0:	d11a      	bne.n	2aaf8 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
   2aac2:	2300      	movs	r3, #0
   2aac4:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
   2aac6:	2302      	movs	r3, #2
   2aac8:	60bb      	str	r3, [r7, #8]
   2aaca:	e005      	b.n	2aad8 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
   2aacc:	68fb      	ldr	r3, [r7, #12]
   2aace:	3301      	adds	r3, #1
   2aad0:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
   2aad2:	68bb      	ldr	r3, [r7, #8]
   2aad4:	005b      	lsls	r3, r3, #1
   2aad6:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
   2aad8:	683b      	ldr	r3, [r7, #0]
   2aada:	685a      	ldr	r2, [r3, #4]
   2aadc:	68bb      	ldr	r3, [r7, #8]
   2aade:	429a      	cmp	r2, r3
   2aae0:	d8f4      	bhi.n	2aacc <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
   2aae2:	68fb      	ldr	r3, [r7, #12]
   2aae4:	021b      	lsls	r3, r3, #8
   2aae6:	693a      	ldr	r2, [r7, #16]
   2aae8:	4313      	orrs	r3, r2
   2aaea:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
   2aaec:	697b      	ldr	r3, [r7, #20]
   2aaee:	2280      	movs	r2, #128	; 0x80
   2aaf0:	0352      	lsls	r2, r2, #13
   2aaf2:	4313      	orrs	r3, r2
   2aaf4:	617b      	str	r3, [r7, #20]
   2aaf6:	e00a      	b.n	2ab0e <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
   2aaf8:	683b      	ldr	r3, [r7, #0]
   2aafa:	685b      	ldr	r3, [r3, #4]
   2aafc:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
   2aafe:	693a      	ldr	r2, [r7, #16]
   2ab00:	4313      	orrs	r3, r2
   2ab02:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
   2ab04:	697b      	ldr	r3, [r7, #20]
   2ab06:	2280      	movs	r2, #128	; 0x80
   2ab08:	0292      	lsls	r2, r2, #10
   2ab0a:	4313      	orrs	r3, r2
   2ab0c:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
   2ab0e:	683b      	ldr	r3, [r7, #0]
   2ab10:	7a1b      	ldrb	r3, [r3, #8]
   2ab12:	2b00      	cmp	r3, #0
   2ab14:	d004      	beq.n	2ab20 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
   2ab16:	697b      	ldr	r3, [r7, #20]
   2ab18:	2280      	movs	r2, #128	; 0x80
   2ab1a:	0392      	lsls	r2, r2, #14
   2ab1c:	4313      	orrs	r3, r2
   2ab1e:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
   2ab20:	46c0      	nop			; (mov r8, r8)
   2ab22:	4b13      	ldr	r3, [pc, #76]	; (2ab70 <system_gclk_gen_set_config+0x110>)
   2ab24:	4798      	blx	r3
   2ab26:	1e03      	subs	r3, r0, #0
   2ab28:	d1fb      	bne.n	2ab22 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2ab2a:	4b12      	ldr	r3, [pc, #72]	; (2ab74 <system_gclk_gen_set_config+0x114>)
   2ab2c:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   2ab2e:	4a12      	ldr	r2, [pc, #72]	; (2ab78 <system_gclk_gen_set_config+0x118>)
   2ab30:	1dfb      	adds	r3, r7, #7
   2ab32:	781b      	ldrb	r3, [r3, #0]
   2ab34:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
   2ab36:	46c0      	nop			; (mov r8, r8)
   2ab38:	4b0d      	ldr	r3, [pc, #52]	; (2ab70 <system_gclk_gen_set_config+0x110>)
   2ab3a:	4798      	blx	r3
   2ab3c:	1e03      	subs	r3, r0, #0
   2ab3e:	d1fb      	bne.n	2ab38 <system_gclk_gen_set_config+0xd8>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
   2ab40:	4b0e      	ldr	r3, [pc, #56]	; (2ab7c <system_gclk_gen_set_config+0x11c>)
   2ab42:	693a      	ldr	r2, [r7, #16]
   2ab44:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
   2ab46:	46c0      	nop			; (mov r8, r8)
   2ab48:	4b09      	ldr	r3, [pc, #36]	; (2ab70 <system_gclk_gen_set_config+0x110>)
   2ab4a:	4798      	blx	r3
   2ab4c:	1e03      	subs	r3, r0, #0
   2ab4e:	d1fb      	bne.n	2ab48 <system_gclk_gen_set_config+0xe8>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
   2ab50:	4b0a      	ldr	r3, [pc, #40]	; (2ab7c <system_gclk_gen_set_config+0x11c>)
   2ab52:	4a0a      	ldr	r2, [pc, #40]	; (2ab7c <system_gclk_gen_set_config+0x11c>)
   2ab54:	6851      	ldr	r1, [r2, #4]
   2ab56:	2280      	movs	r2, #128	; 0x80
   2ab58:	0252      	lsls	r2, r2, #9
   2ab5a:	4011      	ands	r1, r2
   2ab5c:	697a      	ldr	r2, [r7, #20]
   2ab5e:	430a      	orrs	r2, r1
   2ab60:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2ab62:	4b07      	ldr	r3, [pc, #28]	; (2ab80 <system_gclk_gen_set_config+0x120>)
   2ab64:	4798      	blx	r3
}
   2ab66:	46c0      	nop			; (mov r8, r8)
   2ab68:	46bd      	mov	sp, r7
   2ab6a:	b006      	add	sp, #24
   2ab6c:	bd80      	pop	{r7, pc}
   2ab6e:	46c0      	nop			; (mov r8, r8)
   2ab70:	0002aa11 	.word	0x0002aa11
   2ab74:	0002a9e9 	.word	0x0002a9e9
   2ab78:	40000c08 	.word	0x40000c08
   2ab7c:	40000c00 	.word	0x40000c00
   2ab80:	0002a9fd 	.word	0x0002a9fd

0002ab84 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
   2ab84:	b580      	push	{r7, lr}
   2ab86:	b082      	sub	sp, #8
   2ab88:	af00      	add	r7, sp, #0
   2ab8a:	0002      	movs	r2, r0
   2ab8c:	1dfb      	adds	r3, r7, #7
   2ab8e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   2ab90:	46c0      	nop			; (mov r8, r8)
   2ab92:	4b0e      	ldr	r3, [pc, #56]	; (2abcc <system_gclk_gen_enable+0x48>)
   2ab94:	4798      	blx	r3
   2ab96:	1e03      	subs	r3, r0, #0
   2ab98:	d1fb      	bne.n	2ab92 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2ab9a:	4b0d      	ldr	r3, [pc, #52]	; (2abd0 <system_gclk_gen_enable+0x4c>)
   2ab9c:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2ab9e:	4a0d      	ldr	r2, [pc, #52]	; (2abd4 <system_gclk_gen_enable+0x50>)
   2aba0:	1dfb      	adds	r3, r7, #7
   2aba2:	781b      	ldrb	r3, [r3, #0]
   2aba4:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2aba6:	46c0      	nop			; (mov r8, r8)
   2aba8:	4b08      	ldr	r3, [pc, #32]	; (2abcc <system_gclk_gen_enable+0x48>)
   2abaa:	4798      	blx	r3
   2abac:	1e03      	subs	r3, r0, #0
   2abae:	d1fb      	bne.n	2aba8 <system_gclk_gen_enable+0x24>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
   2abb0:	4b09      	ldr	r3, [pc, #36]	; (2abd8 <system_gclk_gen_enable+0x54>)
   2abb2:	4a09      	ldr	r2, [pc, #36]	; (2abd8 <system_gclk_gen_enable+0x54>)
   2abb4:	6852      	ldr	r2, [r2, #4]
   2abb6:	2180      	movs	r1, #128	; 0x80
   2abb8:	0249      	lsls	r1, r1, #9
   2abba:	430a      	orrs	r2, r1
   2abbc:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
   2abbe:	4b07      	ldr	r3, [pc, #28]	; (2abdc <system_gclk_gen_enable+0x58>)
   2abc0:	4798      	blx	r3
}
   2abc2:	46c0      	nop			; (mov r8, r8)
   2abc4:	46bd      	mov	sp, r7
   2abc6:	b002      	add	sp, #8
   2abc8:	bd80      	pop	{r7, pc}
   2abca:	46c0      	nop			; (mov r8, r8)
   2abcc:	0002aa11 	.word	0x0002aa11
   2abd0:	0002a9e9 	.word	0x0002a9e9
   2abd4:	40000c04 	.word	0x40000c04
   2abd8:	40000c00 	.word	0x40000c00
   2abdc:	0002a9fd 	.word	0x0002a9fd

0002abe0 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
   2abe0:	b580      	push	{r7, lr}
   2abe2:	b086      	sub	sp, #24
   2abe4:	af00      	add	r7, sp, #0
   2abe6:	0002      	movs	r2, r0
   2abe8:	1dfb      	adds	r3, r7, #7
   2abea:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
   2abec:	46c0      	nop			; (mov r8, r8)
   2abee:	4b2a      	ldr	r3, [pc, #168]	; (2ac98 <system_gclk_gen_get_hz+0xb8>)
   2abf0:	4798      	blx	r3
   2abf2:	1e03      	subs	r3, r0, #0
   2abf4:	d1fb      	bne.n	2abee <system_gclk_gen_get_hz+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
   2abf6:	4b29      	ldr	r3, [pc, #164]	; (2ac9c <system_gclk_gen_get_hz+0xbc>)
   2abf8:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2abfa:	4a29      	ldr	r2, [pc, #164]	; (2aca0 <system_gclk_gen_get_hz+0xc0>)
   2abfc:	1dfb      	adds	r3, r7, #7
   2abfe:	781b      	ldrb	r3, [r3, #0]
   2ac00:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2ac02:	46c0      	nop			; (mov r8, r8)
   2ac04:	4b24      	ldr	r3, [pc, #144]	; (2ac98 <system_gclk_gen_get_hz+0xb8>)
   2ac06:	4798      	blx	r3
   2ac08:	1e03      	subs	r3, r0, #0
   2ac0a:	d1fb      	bne.n	2ac04 <system_gclk_gen_get_hz+0x24>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
   2ac0c:	4b25      	ldr	r3, [pc, #148]	; (2aca4 <system_gclk_gen_get_hz+0xc4>)
   2ac0e:	685b      	ldr	r3, [r3, #4]
   2ac10:	04db      	lsls	r3, r3, #19
   2ac12:	0edb      	lsrs	r3, r3, #27
   2ac14:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
   2ac16:	0018      	movs	r0, r3
   2ac18:	4b23      	ldr	r3, [pc, #140]	; (2aca8 <system_gclk_gen_get_hz+0xc8>)
   2ac1a:	4798      	blx	r3
   2ac1c:	0003      	movs	r3, r0
   2ac1e:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
   2ac20:	4a1f      	ldr	r2, [pc, #124]	; (2aca0 <system_gclk_gen_get_hz+0xc0>)
   2ac22:	1dfb      	adds	r3, r7, #7
   2ac24:	781b      	ldrb	r3, [r3, #0]
   2ac26:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
   2ac28:	4b1e      	ldr	r3, [pc, #120]	; (2aca4 <system_gclk_gen_get_hz+0xc4>)
   2ac2a:	685b      	ldr	r3, [r3, #4]
   2ac2c:	02db      	lsls	r3, r3, #11
   2ac2e:	0fdb      	lsrs	r3, r3, #31
   2ac30:	b2da      	uxtb	r2, r3
   2ac32:	2313      	movs	r3, #19
   2ac34:	18fb      	adds	r3, r7, r3
   2ac36:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
   2ac38:	4a1c      	ldr	r2, [pc, #112]	; (2acac <system_gclk_gen_get_hz+0xcc>)
   2ac3a:	1dfb      	adds	r3, r7, #7
   2ac3c:	781b      	ldrb	r3, [r3, #0]
   2ac3e:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
   2ac40:	46c0      	nop			; (mov r8, r8)
   2ac42:	4b15      	ldr	r3, [pc, #84]	; (2ac98 <system_gclk_gen_get_hz+0xb8>)
   2ac44:	4798      	blx	r3
   2ac46:	1e03      	subs	r3, r0, #0
   2ac48:	d1fb      	bne.n	2ac42 <system_gclk_gen_get_hz+0x62>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
   2ac4a:	4b16      	ldr	r3, [pc, #88]	; (2aca4 <system_gclk_gen_get_hz+0xc4>)
   2ac4c:	689b      	ldr	r3, [r3, #8]
   2ac4e:	021b      	lsls	r3, r3, #8
   2ac50:	0c1b      	lsrs	r3, r3, #16
   2ac52:	b29b      	uxth	r3, r3
   2ac54:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
   2ac56:	4b16      	ldr	r3, [pc, #88]	; (2acb0 <system_gclk_gen_get_hz+0xd0>)
   2ac58:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
   2ac5a:	2313      	movs	r3, #19
   2ac5c:	18fb      	adds	r3, r7, r3
   2ac5e:	781b      	ldrb	r3, [r3, #0]
   2ac60:	2b00      	cmp	r3, #0
   2ac62:	d109      	bne.n	2ac78 <system_gclk_gen_get_hz+0x98>
   2ac64:	68fb      	ldr	r3, [r7, #12]
   2ac66:	2b01      	cmp	r3, #1
   2ac68:	d906      	bls.n	2ac78 <system_gclk_gen_get_hz+0x98>
		gen_input_hz /= divider;
   2ac6a:	4b12      	ldr	r3, [pc, #72]	; (2acb4 <system_gclk_gen_get_hz+0xd4>)
   2ac6c:	68f9      	ldr	r1, [r7, #12]
   2ac6e:	6978      	ldr	r0, [r7, #20]
   2ac70:	4798      	blx	r3
   2ac72:	0003      	movs	r3, r0
   2ac74:	617b      	str	r3, [r7, #20]
   2ac76:	e00a      	b.n	2ac8e <system_gclk_gen_get_hz+0xae>
	} else if (divsel) {
   2ac78:	2313      	movs	r3, #19
   2ac7a:	18fb      	adds	r3, r7, r3
   2ac7c:	781b      	ldrb	r3, [r3, #0]
   2ac7e:	2b00      	cmp	r3, #0
   2ac80:	d005      	beq.n	2ac8e <system_gclk_gen_get_hz+0xae>
		gen_input_hz >>= (divider+1);
   2ac82:	68fb      	ldr	r3, [r7, #12]
   2ac84:	3301      	adds	r3, #1
   2ac86:	697a      	ldr	r2, [r7, #20]
   2ac88:	40da      	lsrs	r2, r3
   2ac8a:	0013      	movs	r3, r2
   2ac8c:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
   2ac8e:	697b      	ldr	r3, [r7, #20]
}
   2ac90:	0018      	movs	r0, r3
   2ac92:	46bd      	mov	sp, r7
   2ac94:	b006      	add	sp, #24
   2ac96:	bd80      	pop	{r7, pc}
   2ac98:	0002aa11 	.word	0x0002aa11
   2ac9c:	0002a9e9 	.word	0x0002a9e9
   2aca0:	40000c04 	.word	0x40000c04
   2aca4:	40000c00 	.word	0x40000c00
   2aca8:	0002a341 	.word	0x0002a341
   2acac:	40000c08 	.word	0x40000c08
   2acb0:	0002a9fd 	.word	0x0002a9fd
   2acb4:	00033855 	.word	0x00033855

0002acb8 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
   2acb8:	b580      	push	{r7, lr}
   2acba:	b084      	sub	sp, #16
   2acbc:	af00      	add	r7, sp, #0
   2acbe:	0002      	movs	r2, r0
   2acc0:	6039      	str	r1, [r7, #0]
   2acc2:	1dfb      	adds	r3, r7, #7
   2acc4:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
   2acc6:	1dfb      	adds	r3, r7, #7
   2acc8:	781b      	ldrb	r3, [r3, #0]
   2acca:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
   2accc:	683b      	ldr	r3, [r7, #0]
   2acce:	781b      	ldrb	r3, [r3, #0]
   2acd0:	021b      	lsls	r3, r3, #8
   2acd2:	001a      	movs	r2, r3
   2acd4:	68fb      	ldr	r3, [r7, #12]
   2acd6:	4313      	orrs	r3, r2
   2acd8:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
   2acda:	1dfb      	adds	r3, r7, #7
   2acdc:	781b      	ldrb	r3, [r3, #0]
   2acde:	0018      	movs	r0, r3
   2ace0:	4b04      	ldr	r3, [pc, #16]	; (2acf4 <system_gclk_chan_set_config+0x3c>)
   2ace2:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
   2ace4:	4b04      	ldr	r3, [pc, #16]	; (2acf8 <system_gclk_chan_set_config+0x40>)
   2ace6:	68fa      	ldr	r2, [r7, #12]
   2ace8:	b292      	uxth	r2, r2
   2acea:	805a      	strh	r2, [r3, #2]
}
   2acec:	46c0      	nop			; (mov r8, r8)
   2acee:	46bd      	mov	sp, r7
   2acf0:	b004      	add	sp, #16
   2acf2:	bd80      	pop	{r7, pc}
   2acf4:	0002ad45 	.word	0x0002ad45
   2acf8:	40000c00 	.word	0x40000c00

0002acfc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
   2acfc:	b580      	push	{r7, lr}
   2acfe:	b082      	sub	sp, #8
   2ad00:	af00      	add	r7, sp, #0
   2ad02:	0002      	movs	r2, r0
   2ad04:	1dfb      	adds	r3, r7, #7
   2ad06:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   2ad08:	4b0a      	ldr	r3, [pc, #40]	; (2ad34 <system_gclk_chan_enable+0x38>)
   2ad0a:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2ad0c:	4a0a      	ldr	r2, [pc, #40]	; (2ad38 <system_gclk_chan_enable+0x3c>)
   2ad0e:	1dfb      	adds	r3, r7, #7
   2ad10:	781b      	ldrb	r3, [r3, #0]
   2ad12:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
   2ad14:	4909      	ldr	r1, [pc, #36]	; (2ad3c <system_gclk_chan_enable+0x40>)
   2ad16:	4b09      	ldr	r3, [pc, #36]	; (2ad3c <system_gclk_chan_enable+0x40>)
   2ad18:	885b      	ldrh	r3, [r3, #2]
   2ad1a:	b29b      	uxth	r3, r3
   2ad1c:	2280      	movs	r2, #128	; 0x80
   2ad1e:	01d2      	lsls	r2, r2, #7
   2ad20:	4313      	orrs	r3, r2
   2ad22:	b29b      	uxth	r3, r3
   2ad24:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
   2ad26:	4b06      	ldr	r3, [pc, #24]	; (2ad40 <system_gclk_chan_enable+0x44>)
   2ad28:	4798      	blx	r3
}
   2ad2a:	46c0      	nop			; (mov r8, r8)
   2ad2c:	46bd      	mov	sp, r7
   2ad2e:	b002      	add	sp, #8
   2ad30:	bd80      	pop	{r7, pc}
   2ad32:	46c0      	nop			; (mov r8, r8)
   2ad34:	0002a9e9 	.word	0x0002a9e9
   2ad38:	40000c02 	.word	0x40000c02
   2ad3c:	40000c00 	.word	0x40000c00
   2ad40:	0002a9fd 	.word	0x0002a9fd

0002ad44 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
   2ad44:	b580      	push	{r7, lr}
   2ad46:	b084      	sub	sp, #16
   2ad48:	af00      	add	r7, sp, #0
   2ad4a:	0002      	movs	r2, r0
   2ad4c:	1dfb      	adds	r3, r7, #7
   2ad4e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
   2ad50:	4b1c      	ldr	r3, [pc, #112]	; (2adc4 <system_gclk_chan_disable+0x80>)
   2ad52:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2ad54:	4a1c      	ldr	r2, [pc, #112]	; (2adc8 <system_gclk_chan_disable+0x84>)
   2ad56:	1dfb      	adds	r3, r7, #7
   2ad58:	781b      	ldrb	r3, [r3, #0]
   2ad5a:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
   2ad5c:	4b1b      	ldr	r3, [pc, #108]	; (2adcc <system_gclk_chan_disable+0x88>)
   2ad5e:	885b      	ldrh	r3, [r3, #2]
   2ad60:	051b      	lsls	r3, r3, #20
   2ad62:	0f1b      	lsrs	r3, r3, #28
   2ad64:	b2db      	uxtb	r3, r3
   2ad66:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
   2ad68:	4a18      	ldr	r2, [pc, #96]	; (2adcc <system_gclk_chan_disable+0x88>)
   2ad6a:	8853      	ldrh	r3, [r2, #2]
   2ad6c:	4918      	ldr	r1, [pc, #96]	; (2add0 <system_gclk_chan_disable+0x8c>)
   2ad6e:	400b      	ands	r3, r1
   2ad70:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
   2ad72:	4a16      	ldr	r2, [pc, #88]	; (2adcc <system_gclk_chan_disable+0x88>)
   2ad74:	4b15      	ldr	r3, [pc, #84]	; (2adcc <system_gclk_chan_disable+0x88>)
   2ad76:	885b      	ldrh	r3, [r3, #2]
   2ad78:	b29b      	uxth	r3, r3
   2ad7a:	4916      	ldr	r1, [pc, #88]	; (2add4 <system_gclk_chan_disable+0x90>)
   2ad7c:	400b      	ands	r3, r1
   2ad7e:	b29b      	uxth	r3, r3
   2ad80:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
   2ad82:	46c0      	nop			; (mov r8, r8)
   2ad84:	4b11      	ldr	r3, [pc, #68]	; (2adcc <system_gclk_chan_disable+0x88>)
   2ad86:	885b      	ldrh	r3, [r3, #2]
   2ad88:	b29b      	uxth	r3, r3
   2ad8a:	001a      	movs	r2, r3
   2ad8c:	2380      	movs	r3, #128	; 0x80
   2ad8e:	01db      	lsls	r3, r3, #7
   2ad90:	4013      	ands	r3, r2
   2ad92:	d1f7      	bne.n	2ad84 <system_gclk_chan_disable+0x40>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
   2ad94:	4a0d      	ldr	r2, [pc, #52]	; (2adcc <system_gclk_chan_disable+0x88>)
   2ad96:	68fb      	ldr	r3, [r7, #12]
   2ad98:	b2db      	uxtb	r3, r3
   2ad9a:	1c19      	adds	r1, r3, #0
   2ad9c:	230f      	movs	r3, #15
   2ad9e:	400b      	ands	r3, r1
   2ada0:	b2d9      	uxtb	r1, r3
   2ada2:	8853      	ldrh	r3, [r2, #2]
   2ada4:	1c08      	adds	r0, r1, #0
   2ada6:	210f      	movs	r1, #15
   2ada8:	4001      	ands	r1, r0
   2adaa:	0208      	lsls	r0, r1, #8
   2adac:	4908      	ldr	r1, [pc, #32]	; (2add0 <system_gclk_chan_disable+0x8c>)
   2adae:	400b      	ands	r3, r1
   2adb0:	1c19      	adds	r1, r3, #0
   2adb2:	1c03      	adds	r3, r0, #0
   2adb4:	430b      	orrs	r3, r1
   2adb6:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
   2adb8:	4b07      	ldr	r3, [pc, #28]	; (2add8 <system_gclk_chan_disable+0x94>)
   2adba:	4798      	blx	r3
}
   2adbc:	46c0      	nop			; (mov r8, r8)
   2adbe:	46bd      	mov	sp, r7
   2adc0:	b004      	add	sp, #16
   2adc2:	bd80      	pop	{r7, pc}
   2adc4:	0002a9e9 	.word	0x0002a9e9
   2adc8:	40000c02 	.word	0x40000c02
   2adcc:	40000c00 	.word	0x40000c00
   2add0:	fffff0ff 	.word	0xfffff0ff
   2add4:	ffffbfff 	.word	0xffffbfff
   2add8:	0002a9fd 	.word	0x0002a9fd

0002addc <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
   2addc:	b580      	push	{r7, lr}
   2adde:	b084      	sub	sp, #16
   2ade0:	af00      	add	r7, sp, #0
   2ade2:	0002      	movs	r2, r0
   2ade4:	1dfb      	adds	r3, r7, #7
   2ade6:	701a      	strb	r2, [r3, #0]
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
   2ade8:	4b0d      	ldr	r3, [pc, #52]	; (2ae20 <system_gclk_chan_get_hz+0x44>)
   2adea:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
   2adec:	4a0d      	ldr	r2, [pc, #52]	; (2ae24 <system_gclk_chan_get_hz+0x48>)
   2adee:	1dfb      	adds	r3, r7, #7
   2adf0:	781b      	ldrb	r3, [r3, #0]
   2adf2:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
   2adf4:	4b0c      	ldr	r3, [pc, #48]	; (2ae28 <system_gclk_chan_get_hz+0x4c>)
   2adf6:	885b      	ldrh	r3, [r3, #2]
   2adf8:	051b      	lsls	r3, r3, #20
   2adfa:	0f1b      	lsrs	r3, r3, #28
   2adfc:	b2da      	uxtb	r2, r3
   2adfe:	230f      	movs	r3, #15
   2ae00:	18fb      	adds	r3, r7, r3
   2ae02:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
   2ae04:	4b09      	ldr	r3, [pc, #36]	; (2ae2c <system_gclk_chan_get_hz+0x50>)
   2ae06:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
   2ae08:	230f      	movs	r3, #15
   2ae0a:	18fb      	adds	r3, r7, r3
   2ae0c:	781b      	ldrb	r3, [r3, #0]
   2ae0e:	0018      	movs	r0, r3
   2ae10:	4b07      	ldr	r3, [pc, #28]	; (2ae30 <system_gclk_chan_get_hz+0x54>)
   2ae12:	4798      	blx	r3
   2ae14:	0003      	movs	r3, r0
}
   2ae16:	0018      	movs	r0, r3
   2ae18:	46bd      	mov	sp, r7
   2ae1a:	b004      	add	sp, #16
   2ae1c:	bd80      	pop	{r7, pc}
   2ae1e:	46c0      	nop			; (mov r8, r8)
   2ae20:	0002a9e9 	.word	0x0002a9e9
   2ae24:	40000c02 	.word	0x40000c02
   2ae28:	40000c00 	.word	0x40000c00
   2ae2c:	0002a9fd 	.word	0x0002a9fd
   2ae30:	0002abe1 	.word	0x0002abe1

0002ae34 <system_interrupt_clear_pending>:
 * \retval STATUS_OK           If no error was detected
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_clear_pending(
		const enum system_interrupt_vector vector)
{
   2ae34:	b580      	push	{r7, lr}
   2ae36:	b084      	sub	sp, #16
   2ae38:	af00      	add	r7, sp, #0
   2ae3a:	0002      	movs	r2, r0
   2ae3c:	1dfb      	adds	r3, r7, #7
   2ae3e:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
   2ae40:	230f      	movs	r3, #15
   2ae42:	18fb      	adds	r3, r7, r3
   2ae44:	2200      	movs	r2, #0
   2ae46:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
   2ae48:	1dfb      	adds	r3, r7, #7
   2ae4a:	781b      	ldrb	r3, [r3, #0]
   2ae4c:	2b7f      	cmp	r3, #127	; 0x7f
   2ae4e:	d80b      	bhi.n	2ae68 <system_interrupt_clear_pending+0x34>
		NVIC->ICPR[0] = (1 << vector);
   2ae50:	4a13      	ldr	r2, [pc, #76]	; (2aea0 <system_interrupt_clear_pending+0x6c>)
   2ae52:	1dfb      	adds	r3, r7, #7
   2ae54:	781b      	ldrb	r3, [r3, #0]
   2ae56:	b25b      	sxtb	r3, r3
   2ae58:	2101      	movs	r1, #1
   2ae5a:	4099      	lsls	r1, r3
   2ae5c:	000b      	movs	r3, r1
   2ae5e:	0019      	movs	r1, r3
   2ae60:	23c0      	movs	r3, #192	; 0xc0
   2ae62:	005b      	lsls	r3, r3, #1
   2ae64:	50d1      	str	r1, [r2, r3]
   2ae66:	e014      	b.n	2ae92 <system_interrupt_clear_pending+0x5e>
	} else if (vector == SYSTEM_INTERRUPT_NON_MASKABLE) {
   2ae68:	1dfb      	adds	r3, r7, #7
   2ae6a:	781b      	ldrb	r3, [r3, #0]
   2ae6c:	b25b      	sxtb	r3, r3
   2ae6e:	330e      	adds	r3, #14
   2ae70:	d101      	bne.n	2ae76 <system_interrupt_clear_pending+0x42>
		/* Note: Clearing of NMI pending interrupts does not make sense and is
		 * not supported by the device, as it has the highest priority and will
		 * always be executed at the moment it is set */
		return STATUS_ERR_INVALID_ARG;
   2ae72:	2317      	movs	r3, #23
   2ae74:	e010      	b.n	2ae98 <system_interrupt_clear_pending+0x64>
	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
   2ae76:	1dfb      	adds	r3, r7, #7
   2ae78:	781b      	ldrb	r3, [r3, #0]
   2ae7a:	b25b      	sxtb	r3, r3
   2ae7c:	3301      	adds	r3, #1
   2ae7e:	d104      	bne.n	2ae8a <system_interrupt_clear_pending+0x56>
		SCB->ICSR = SCB_ICSR_PENDSTCLR_Msk;
   2ae80:	4b08      	ldr	r3, [pc, #32]	; (2aea4 <system_interrupt_clear_pending+0x70>)
   2ae82:	2280      	movs	r2, #128	; 0x80
   2ae84:	0492      	lsls	r2, r2, #18
   2ae86:	605a      	str	r2, [r3, #4]
   2ae88:	e003      	b.n	2ae92 <system_interrupt_clear_pending+0x5e>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
   2ae8a:	230f      	movs	r3, #15
   2ae8c:	18fb      	adds	r3, r7, r3
   2ae8e:	2217      	movs	r2, #23
   2ae90:	701a      	strb	r2, [r3, #0]
	}

	return status;
   2ae92:	230f      	movs	r3, #15
   2ae94:	18fb      	adds	r3, r7, r3
   2ae96:	781b      	ldrb	r3, [r3, #0]
}
   2ae98:	0018      	movs	r0, r3
   2ae9a:	46bd      	mov	sp, r7
   2ae9c:	b004      	add	sp, #16
   2ae9e:	bd80      	pop	{r7, pc}
   2aea0:	e000e100 	.word	0xe000e100
   2aea4:	e000ed00 	.word	0xe000ed00

0002aea8 <system_pinmux_get_group_from_gpio_pin>:
{
   2aea8:	b580      	push	{r7, lr}
   2aeaa:	b084      	sub	sp, #16
   2aeac:	af00      	add	r7, sp, #0
   2aeae:	0002      	movs	r2, r0
   2aeb0:	1dfb      	adds	r3, r7, #7
   2aeb2:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
   2aeb4:	230f      	movs	r3, #15
   2aeb6:	18fb      	adds	r3, r7, r3
   2aeb8:	1dfa      	adds	r2, r7, #7
   2aeba:	7812      	ldrb	r2, [r2, #0]
   2aebc:	09d2      	lsrs	r2, r2, #7
   2aebe:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
   2aec0:	230e      	movs	r3, #14
   2aec2:	18fb      	adds	r3, r7, r3
   2aec4:	1dfa      	adds	r2, r7, #7
   2aec6:	7812      	ldrb	r2, [r2, #0]
   2aec8:	0952      	lsrs	r2, r2, #5
   2aeca:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
   2aecc:	4b0d      	ldr	r3, [pc, #52]	; (2af04 <system_pinmux_get_group_from_gpio_pin+0x5c>)
   2aece:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
   2aed0:	230f      	movs	r3, #15
   2aed2:	18fb      	adds	r3, r7, r3
   2aed4:	781b      	ldrb	r3, [r3, #0]
   2aed6:	2b00      	cmp	r3, #0
   2aed8:	d10f      	bne.n	2aefa <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
   2aeda:	230f      	movs	r3, #15
   2aedc:	18fb      	adds	r3, r7, r3
   2aede:	781b      	ldrb	r3, [r3, #0]
   2aee0:	009b      	lsls	r3, r3, #2
   2aee2:	2210      	movs	r2, #16
   2aee4:	4694      	mov	ip, r2
   2aee6:	44bc      	add	ip, r7
   2aee8:	4463      	add	r3, ip
   2aeea:	3b08      	subs	r3, #8
   2aeec:	681a      	ldr	r2, [r3, #0]
   2aeee:	230e      	movs	r3, #14
   2aef0:	18fb      	adds	r3, r7, r3
   2aef2:	781b      	ldrb	r3, [r3, #0]
   2aef4:	01db      	lsls	r3, r3, #7
   2aef6:	18d3      	adds	r3, r2, r3
   2aef8:	e000      	b.n	2aefc <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
   2aefa:	2300      	movs	r3, #0
}
   2aefc:	0018      	movs	r0, r3
   2aefe:	46bd      	mov	sp, r7
   2af00:	b004      	add	sp, #16
   2af02:	bd80      	pop	{r7, pc}
   2af04:	41004400 	.word	0x41004400

0002af08 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
   2af08:	b580      	push	{r7, lr}
   2af0a:	b088      	sub	sp, #32
   2af0c:	af00      	add	r7, sp, #0
   2af0e:	60f8      	str	r0, [r7, #12]
   2af10:	60b9      	str	r1, [r7, #8]
   2af12:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
   2af14:	2300      	movs	r3, #0
   2af16:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
   2af18:	687b      	ldr	r3, [r7, #4]
   2af1a:	78db      	ldrb	r3, [r3, #3]
   2af1c:	2201      	movs	r2, #1
   2af1e:	4053      	eors	r3, r2
   2af20:	b2db      	uxtb	r3, r3
   2af22:	2b00      	cmp	r3, #0
   2af24:	d035      	beq.n	2af92 <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
   2af26:	687b      	ldr	r3, [r7, #4]
   2af28:	781b      	ldrb	r3, [r3, #0]
   2af2a:	2b80      	cmp	r3, #128	; 0x80
   2af2c:	d00b      	beq.n	2af46 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
   2af2e:	69fb      	ldr	r3, [r7, #28]
   2af30:	2280      	movs	r2, #128	; 0x80
   2af32:	0252      	lsls	r2, r2, #9
   2af34:	4313      	orrs	r3, r2
   2af36:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
   2af38:	687b      	ldr	r3, [r7, #4]
   2af3a:	781b      	ldrb	r3, [r3, #0]
   2af3c:	061b      	lsls	r3, r3, #24
   2af3e:	001a      	movs	r2, r3
   2af40:	69fb      	ldr	r3, [r7, #28]
   2af42:	4313      	orrs	r3, r2
   2af44:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2af46:	687b      	ldr	r3, [r7, #4]
   2af48:	785b      	ldrb	r3, [r3, #1]
   2af4a:	2b00      	cmp	r3, #0
   2af4c:	d003      	beq.n	2af56 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2af4e:	687b      	ldr	r3, [r7, #4]
   2af50:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
   2af52:	2b02      	cmp	r3, #2
   2af54:	d110      	bne.n	2af78 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
   2af56:	69fb      	ldr	r3, [r7, #28]
   2af58:	2280      	movs	r2, #128	; 0x80
   2af5a:	0292      	lsls	r2, r2, #10
   2af5c:	4313      	orrs	r3, r2
   2af5e:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
   2af60:	687b      	ldr	r3, [r7, #4]
   2af62:	789b      	ldrb	r3, [r3, #2]
   2af64:	2b00      	cmp	r3, #0
   2af66:	d004      	beq.n	2af72 <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
   2af68:	69fb      	ldr	r3, [r7, #28]
   2af6a:	2280      	movs	r2, #128	; 0x80
   2af6c:	02d2      	lsls	r2, r2, #11
   2af6e:	4313      	orrs	r3, r2
   2af70:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
   2af72:	68fb      	ldr	r3, [r7, #12]
   2af74:	68ba      	ldr	r2, [r7, #8]
   2af76:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2af78:	687b      	ldr	r3, [r7, #4]
   2af7a:	785b      	ldrb	r3, [r3, #1]
   2af7c:	2b01      	cmp	r3, #1
   2af7e:	d003      	beq.n	2af88 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2af80:	687b      	ldr	r3, [r7, #4]
   2af82:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2af84:	2b02      	cmp	r3, #2
   2af86:	d107      	bne.n	2af98 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
   2af88:	69fb      	ldr	r3, [r7, #28]
   2af8a:	4a22      	ldr	r2, [pc, #136]	; (2b014 <_system_pinmux_config+0x10c>)
   2af8c:	4013      	ands	r3, r2
   2af8e:	61fb      	str	r3, [r7, #28]
   2af90:	e002      	b.n	2af98 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
   2af92:	68fb      	ldr	r3, [r7, #12]
   2af94:	68ba      	ldr	r2, [r7, #8]
   2af96:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
   2af98:	68bb      	ldr	r3, [r7, #8]
   2af9a:	041b      	lsls	r3, r3, #16
   2af9c:	0c1b      	lsrs	r3, r3, #16
   2af9e:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
   2afa0:	68bb      	ldr	r3, [r7, #8]
   2afa2:	0c1b      	lsrs	r3, r3, #16
   2afa4:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2afa6:	69ba      	ldr	r2, [r7, #24]
   2afa8:	69fb      	ldr	r3, [r7, #28]
   2afaa:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
   2afac:	22a0      	movs	r2, #160	; 0xa0
   2afae:	05d2      	lsls	r2, r2, #23
   2afb0:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2afb2:	68fb      	ldr	r3, [r7, #12]
   2afb4:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2afb6:	697a      	ldr	r2, [r7, #20]
   2afb8:	69fb      	ldr	r3, [r7, #28]
   2afba:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
   2afbc:	22d0      	movs	r2, #208	; 0xd0
   2afbe:	0612      	lsls	r2, r2, #24
   2afc0:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
   2afc2:	68fb      	ldr	r3, [r7, #12]
   2afc4:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
   2afc6:	687b      	ldr	r3, [r7, #4]
   2afc8:	78db      	ldrb	r3, [r3, #3]
   2afca:	2201      	movs	r2, #1
   2afcc:	4053      	eors	r3, r2
   2afce:	b2db      	uxtb	r3, r3
   2afd0:	2b00      	cmp	r3, #0
   2afd2:	d01a      	beq.n	2b00a <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
   2afd4:	69fa      	ldr	r2, [r7, #28]
   2afd6:	2380      	movs	r3, #128	; 0x80
   2afd8:	02db      	lsls	r3, r3, #11
   2afda:	4013      	ands	r3, r2
   2afdc:	d00a      	beq.n	2aff4 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
   2afde:	687b      	ldr	r3, [r7, #4]
   2afe0:	789b      	ldrb	r3, [r3, #2]
   2afe2:	2b01      	cmp	r3, #1
   2afe4:	d103      	bne.n	2afee <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
   2afe6:	68fb      	ldr	r3, [r7, #12]
   2afe8:	68ba      	ldr	r2, [r7, #8]
   2afea:	619a      	str	r2, [r3, #24]
   2afec:	e002      	b.n	2aff4 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
   2afee:	68fb      	ldr	r3, [r7, #12]
   2aff0:	68ba      	ldr	r2, [r7, #8]
   2aff2:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2aff4:	687b      	ldr	r3, [r7, #4]
   2aff6:	785b      	ldrb	r3, [r3, #1]
   2aff8:	2b01      	cmp	r3, #1
   2affa:	d003      	beq.n	2b004 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
   2affc:	687b      	ldr	r3, [r7, #4]
   2affe:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
   2b000:	2b02      	cmp	r3, #2
   2b002:	d102      	bne.n	2b00a <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
   2b004:	68fb      	ldr	r3, [r7, #12]
   2b006:	68ba      	ldr	r2, [r7, #8]
   2b008:	609a      	str	r2, [r3, #8]
		}
	}
}
   2b00a:	46c0      	nop			; (mov r8, r8)
   2b00c:	46bd      	mov	sp, r7
   2b00e:	b008      	add	sp, #32
   2b010:	bd80      	pop	{r7, pc}
   2b012:	46c0      	nop			; (mov r8, r8)
   2b014:	fffbffff 	.word	0xfffbffff

0002b018 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
   2b018:	b580      	push	{r7, lr}
   2b01a:	b084      	sub	sp, #16
   2b01c:	af00      	add	r7, sp, #0
   2b01e:	0002      	movs	r2, r0
   2b020:	6039      	str	r1, [r7, #0]
   2b022:	1dfb      	adds	r3, r7, #7
   2b024:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
   2b026:	1dfb      	adds	r3, r7, #7
   2b028:	781b      	ldrb	r3, [r3, #0]
   2b02a:	0018      	movs	r0, r3
   2b02c:	4b0a      	ldr	r3, [pc, #40]	; (2b058 <system_pinmux_pin_set_config+0x40>)
   2b02e:	4798      	blx	r3
   2b030:	0003      	movs	r3, r0
   2b032:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
   2b034:	1dfb      	adds	r3, r7, #7
   2b036:	781b      	ldrb	r3, [r3, #0]
   2b038:	221f      	movs	r2, #31
   2b03a:	4013      	ands	r3, r2
   2b03c:	2201      	movs	r2, #1
   2b03e:	409a      	lsls	r2, r3
   2b040:	0013      	movs	r3, r2
   2b042:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
   2b044:	683a      	ldr	r2, [r7, #0]
   2b046:	68b9      	ldr	r1, [r7, #8]
   2b048:	68fb      	ldr	r3, [r7, #12]
   2b04a:	0018      	movs	r0, r3
   2b04c:	4b03      	ldr	r3, [pc, #12]	; (2b05c <system_pinmux_pin_set_config+0x44>)
   2b04e:	4798      	blx	r3
}
   2b050:	46c0      	nop			; (mov r8, r8)
   2b052:	46bd      	mov	sp, r7
   2b054:	b004      	add	sp, #16
   2b056:	bd80      	pop	{r7, pc}
   2b058:	0002aea9 	.word	0x0002aea9
   2b05c:	0002af09 	.word	0x0002af09

0002b060 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
   2b060:	b580      	push	{r7, lr}
   2b062:	af00      	add	r7, sp, #0
	return;
   2b064:	46c0      	nop			; (mov r8, r8)
}
   2b066:	46bd      	mov	sp, r7
   2b068:	bd80      	pop	{r7, pc}
	...

0002b06c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
   2b06c:	b580      	push	{r7, lr}
   2b06e:	af00      	add	r7, sp, #0
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
   2b070:	4b06      	ldr	r3, [pc, #24]	; (2b08c <system_init+0x20>)
   2b072:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
   2b074:	4b06      	ldr	r3, [pc, #24]	; (2b090 <system_init+0x24>)
   2b076:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
   2b078:	4b06      	ldr	r3, [pc, #24]	; (2b094 <system_init+0x28>)
   2b07a:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
   2b07c:	4b06      	ldr	r3, [pc, #24]	; (2b098 <system_init+0x2c>)
   2b07e:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
   2b080:	4b06      	ldr	r3, [pc, #24]	; (2b09c <system_init+0x30>)
   2b082:	4798      	blx	r3
}
   2b084:	46c0      	nop			; (mov r8, r8)
   2b086:	46bd      	mov	sp, r7
   2b088:	bd80      	pop	{r7, pc}
   2b08a:	46c0      	nop			; (mov r8, r8)
   2b08c:	0002a6ed 	.word	0x0002a6ed
   2b090:	000271b5 	.word	0x000271b5
   2b094:	00013769 	.word	0x00013769
   2b098:	0002758d 	.word	0x0002758d
   2b09c:	0002b061 	.word	0x0002b061

0002b0a0 <system_gclk_chan_get_config_defaults>:
{
   2b0a0:	b580      	push	{r7, lr}
   2b0a2:	b082      	sub	sp, #8
   2b0a4:	af00      	add	r7, sp, #0
   2b0a6:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
   2b0a8:	687b      	ldr	r3, [r7, #4]
   2b0aa:	2200      	movs	r2, #0
   2b0ac:	701a      	strb	r2, [r3, #0]
}
   2b0ae:	46c0      	nop			; (mov r8, r8)
   2b0b0:	46bd      	mov	sp, r7
   2b0b2:	b002      	add	sp, #8
   2b0b4:	bd80      	pop	{r7, pc}
	...

0002b0b8 <system_apb_clock_set_mask>:
{
   2b0b8:	b580      	push	{r7, lr}
   2b0ba:	b082      	sub	sp, #8
   2b0bc:	af00      	add	r7, sp, #0
   2b0be:	0002      	movs	r2, r0
   2b0c0:	6039      	str	r1, [r7, #0]
   2b0c2:	1dfb      	adds	r3, r7, #7
   2b0c4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
   2b0c6:	1dfb      	adds	r3, r7, #7
   2b0c8:	781b      	ldrb	r3, [r3, #0]
   2b0ca:	2b01      	cmp	r3, #1
   2b0cc:	d00a      	beq.n	2b0e4 <system_apb_clock_set_mask+0x2c>
   2b0ce:	2b02      	cmp	r3, #2
   2b0d0:	d00f      	beq.n	2b0f2 <system_apb_clock_set_mask+0x3a>
   2b0d2:	2b00      	cmp	r3, #0
   2b0d4:	d114      	bne.n	2b100 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
   2b0d6:	4b0e      	ldr	r3, [pc, #56]	; (2b110 <system_apb_clock_set_mask+0x58>)
   2b0d8:	4a0d      	ldr	r2, [pc, #52]	; (2b110 <system_apb_clock_set_mask+0x58>)
   2b0da:	6991      	ldr	r1, [r2, #24]
   2b0dc:	683a      	ldr	r2, [r7, #0]
   2b0de:	430a      	orrs	r2, r1
   2b0e0:	619a      	str	r2, [r3, #24]
			break;
   2b0e2:	e00f      	b.n	2b104 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
   2b0e4:	4b0a      	ldr	r3, [pc, #40]	; (2b110 <system_apb_clock_set_mask+0x58>)
   2b0e6:	4a0a      	ldr	r2, [pc, #40]	; (2b110 <system_apb_clock_set_mask+0x58>)
   2b0e8:	69d1      	ldr	r1, [r2, #28]
   2b0ea:	683a      	ldr	r2, [r7, #0]
   2b0ec:	430a      	orrs	r2, r1
   2b0ee:	61da      	str	r2, [r3, #28]
			break;
   2b0f0:	e008      	b.n	2b104 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
   2b0f2:	4b07      	ldr	r3, [pc, #28]	; (2b110 <system_apb_clock_set_mask+0x58>)
   2b0f4:	4a06      	ldr	r2, [pc, #24]	; (2b110 <system_apb_clock_set_mask+0x58>)
   2b0f6:	6a11      	ldr	r1, [r2, #32]
   2b0f8:	683a      	ldr	r2, [r7, #0]
   2b0fa:	430a      	orrs	r2, r1
   2b0fc:	621a      	str	r2, [r3, #32]
			break;
   2b0fe:	e001      	b.n	2b104 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
   2b100:	2317      	movs	r3, #23
   2b102:	e000      	b.n	2b106 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
   2b104:	2300      	movs	r3, #0
}
   2b106:	0018      	movs	r0, r3
   2b108:	46bd      	mov	sp, r7
   2b10a:	b002      	add	sp, #8
   2b10c:	bd80      	pop	{r7, pc}
   2b10e:	46c0      	nop			; (mov r8, r8)
   2b110:	40000400 	.word	0x40000400

0002b114 <system_pinmux_get_config_defaults>:
{
   2b114:	b580      	push	{r7, lr}
   2b116:	b082      	sub	sp, #8
   2b118:	af00      	add	r7, sp, #0
   2b11a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
   2b11c:	687b      	ldr	r3, [r7, #4]
   2b11e:	2280      	movs	r2, #128	; 0x80
   2b120:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
   2b122:	687b      	ldr	r3, [r7, #4]
   2b124:	2200      	movs	r2, #0
   2b126:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
   2b128:	687b      	ldr	r3, [r7, #4]
   2b12a:	2201      	movs	r2, #1
   2b12c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
   2b12e:	687b      	ldr	r3, [r7, #4]
   2b130:	2200      	movs	r2, #0
   2b132:	70da      	strb	r2, [r3, #3]
}
   2b134:	46c0      	nop			; (mov r8, r8)
   2b136:	46bd      	mov	sp, r7
   2b138:	b002      	add	sp, #8
   2b13a:	bd80      	pop	{r7, pc}

0002b13c <_tcc_get_inst_index>:
 *
 * \return Index of the given TCC module instance.
 */
uint8_t _tcc_get_inst_index(
		Tcc *const hw)
{
   2b13c:	b580      	push	{r7, lr}
   2b13e:	b084      	sub	sp, #16
   2b140:	af00      	add	r7, sp, #0
   2b142:	6078      	str	r0, [r7, #4]
	/* Find index for TCC instance. */
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   2b144:	2300      	movs	r3, #0
   2b146:	60fb      	str	r3, [r7, #12]
   2b148:	e00c      	b.n	2b164 <_tcc_get_inst_index+0x28>
		if (hw == tcc_modules[i]) {
   2b14a:	4b0a      	ldr	r3, [pc, #40]	; (2b174 <_tcc_get_inst_index+0x38>)
   2b14c:	68fa      	ldr	r2, [r7, #12]
   2b14e:	0092      	lsls	r2, r2, #2
   2b150:	58d2      	ldr	r2, [r2, r3]
   2b152:	687b      	ldr	r3, [r7, #4]
   2b154:	429a      	cmp	r2, r3
   2b156:	d102      	bne.n	2b15e <_tcc_get_inst_index+0x22>
			return i;
   2b158:	68fb      	ldr	r3, [r7, #12]
   2b15a:	b2db      	uxtb	r3, r3
   2b15c:	e006      	b.n	2b16c <_tcc_get_inst_index+0x30>
	for (uint32_t i = 0; i < TCC_INST_NUM; i++) {
   2b15e:	68fb      	ldr	r3, [r7, #12]
   2b160:	3301      	adds	r3, #1
   2b162:	60fb      	str	r3, [r7, #12]
   2b164:	68fb      	ldr	r3, [r7, #12]
   2b166:	2b02      	cmp	r3, #2
   2b168:	d9ef      	bls.n	2b14a <_tcc_get_inst_index+0xe>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
   2b16a:	2300      	movs	r3, #0
}
   2b16c:	0018      	movs	r0, r3
   2b16e:	46bd      	mov	sp, r7
   2b170:	b004      	add	sp, #16
   2b172:	bd80      	pop	{r7, pc}
   2b174:	0003a670 	.word	0x0003a670

0002b178 <tcc_get_config_defaults>:
 *
 */
void tcc_get_config_defaults(
		struct tcc_config *const config,
		Tcc *const hw)
{
   2b178:	b590      	push	{r4, r7, lr}
   2b17a:	b085      	sub	sp, #20
   2b17c:	af00      	add	r7, sp, #0
   2b17e:	6078      	str	r0, [r7, #4]
   2b180:	6039      	str	r1, [r7, #0]
	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2b182:	230f      	movs	r3, #15
   2b184:	18fc      	adds	r4, r7, r3
   2b186:	683b      	ldr	r3, [r7, #0]
   2b188:	0018      	movs	r0, r3
   2b18a:	4bad      	ldr	r3, [pc, #692]	; (2b440 <tcc_get_config_defaults+0x2c8>)
   2b18c:	4798      	blx	r3
   2b18e:	0003      	movs	r3, r0
   2b190:	7023      	strb	r3, [r4, #0]

	/* Base counter defaults */
	config->counter.count                  = 0;
   2b192:	687b      	ldr	r3, [r7, #4]
   2b194:	2200      	movs	r2, #0
   2b196:	601a      	str	r2, [r3, #0]

	config->counter.period                 = _tcc_maxs[module_index];
   2b198:	230f      	movs	r3, #15
   2b19a:	18fb      	adds	r3, r7, r3
   2b19c:	781a      	ldrb	r2, [r3, #0]
   2b19e:	4ba9      	ldr	r3, [pc, #676]	; (2b444 <tcc_get_config_defaults+0x2cc>)
   2b1a0:	0092      	lsls	r2, r2, #2
   2b1a2:	58d2      	ldr	r2, [r2, r3]
   2b1a4:	687b      	ldr	r3, [r7, #4]
   2b1a6:	605a      	str	r2, [r3, #4]

	config->counter.clock_source           = GCLK_GENERATOR_0;
   2b1a8:	687b      	ldr	r3, [r7, #4]
   2b1aa:	2200      	movs	r2, #0
   2b1ac:	729a      	strb	r2, [r3, #10]
	config->counter.clock_prescaler        = TCC_CLOCK_PRESCALER_DIV1;
   2b1ae:	687b      	ldr	r3, [r7, #4]
   2b1b0:	2200      	movs	r2, #0
   2b1b2:	72da      	strb	r2, [r3, #11]
	config->counter.reload_action          = TCC_RELOAD_ACTION_GCLK;
   2b1b4:	687b      	ldr	r3, [r7, #4]
   2b1b6:	2200      	movs	r2, #0
   2b1b8:	731a      	strb	r2, [r3, #12]

	config->counter.direction              = TCC_COUNT_DIRECTION_UP;
   2b1ba:	687b      	ldr	r3, [r7, #4]
   2b1bc:	2200      	movs	r2, #0
   2b1be:	725a      	strb	r2, [r3, #9]
	config->counter.oneshot                = false;
   2b1c0:	687b      	ldr	r3, [r7, #4]
   2b1c2:	2200      	movs	r2, #0
   2b1c4:	721a      	strb	r2, [r3, #8]
#endif

	/* Match/Capture defaults */
#  define _TCC_CHANNEL_MATCH_VALUE_INIT(n, value) \
		config->compare.match[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2b1c6:	687b      	ldr	r3, [r7, #4]
   2b1c8:	2200      	movs	r2, #0
   2b1ca:	61da      	str	r2, [r3, #28]
   2b1cc:	687b      	ldr	r3, [r7, #4]
   2b1ce:	2200      	movs	r2, #0
   2b1d0:	621a      	str	r2, [r3, #32]
   2b1d2:	687b      	ldr	r3, [r7, #4]
   2b1d4:	2200      	movs	r2, #0
   2b1d6:	625a      	str	r2, [r3, #36]	; 0x24
   2b1d8:	687b      	ldr	r3, [r7, #4]
   2b1da:	2200      	movs	r2, #0
   2b1dc:	629a      	str	r2, [r3, #40]	; 0x28
#  undef _TCC_CHANNEL_MATCH_VALUE_INIT

	/* Wave polarity defaults */
#  define _TCC_CHANNEL_WAVE_POLARITY_INIT(n, value) \
		config->compare.wave_polarity[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2b1de:	687b      	ldr	r3, [r7, #4]
   2b1e0:	2200      	movs	r2, #0
   2b1e2:	751a      	strb	r2, [r3, #20]
   2b1e4:	687b      	ldr	r3, [r7, #4]
   2b1e6:	2200      	movs	r2, #0
   2b1e8:	755a      	strb	r2, [r3, #21]
   2b1ea:	687b      	ldr	r3, [r7, #4]
   2b1ec:	2200      	movs	r2, #0
   2b1ee:	759a      	strb	r2, [r3, #22]
   2b1f0:	687b      	ldr	r3, [r7, #4]
   2b1f2:	2200      	movs	r2, #0
   2b1f4:	75da      	strb	r2, [r3, #23]
		_TCC_CHANNEL_WAVE_POLARITY_INIT, TCC_WAVE_POLARITY_0)
#  undef _TCC_CHANNEL_WAVE_POLARITY_INIT

	config->compare.wave_generation = TCC_WAVE_GENERATION_NORMAL_FREQ;
   2b1f6:	687b      	ldr	r3, [r7, #4]
   2b1f8:	2200      	movs	r2, #0
   2b1fa:	761a      	strb	r2, [r3, #24]
	config->compare.wave_ramp       = TCC_RAMP_RAMP1;
   2b1fc:	687b      	ldr	r3, [r7, #4]
   2b1fe:	2200      	movs	r2, #0
   2b200:	765a      	strb	r2, [r3, #25]

#  define _TCC_CHANNEL_FUNCTION_INIT(n, value) \
		config->compare.channel_function[n] = value;
	MREPEAT(TCC_NUM_CHANNELS,
   2b202:	687b      	ldr	r3, [r7, #4]
   2b204:	2200      	movs	r2, #0
   2b206:	741a      	strb	r2, [r3, #16]
   2b208:	687b      	ldr	r3, [r7, #4]
   2b20a:	2200      	movs	r2, #0
   2b20c:	745a      	strb	r2, [r3, #17]
   2b20e:	687b      	ldr	r3, [r7, #4]
   2b210:	2200      	movs	r2, #0
   2b212:	749a      	strb	r2, [r3, #18]
   2b214:	687b      	ldr	r3, [r7, #4]
   2b216:	2200      	movs	r2, #0
   2b218:	74da      	strb	r2, [r3, #19]
		config->wave_ext.recoverable_fault[n].source = TCC_FAULT_SOURCE_DISABLE;           \
		config->wave_ext.recoverable_fault[n].blanking = TCC_FAULT_BLANKING_DISABLE;       \
		config->wave_ext.recoverable_fault[n].halt_action = TCC_FAULT_HALT_ACTION_DISABLE; \
		config->wave_ext.recoverable_fault[n].capture_action = TCC_FAULT_CAPTURE_DISABLE;  \
		config->wave_ext.recoverable_fault[n].capture_channel = TCC_FAULT_CAPTURE_CHANNEL_0;
	MREPEAT(TCC_NUM_FAULTS, _TCC_FAULT_FUNCTION_INIT, 0)
   2b21a:	687b      	ldr	r3, [r7, #4]
   2b21c:	222c      	movs	r2, #44	; 0x2c
   2b21e:	2100      	movs	r1, #0
   2b220:	5499      	strb	r1, [r3, r2]
   2b222:	687b      	ldr	r3, [r7, #4]
   2b224:	222d      	movs	r2, #45	; 0x2d
   2b226:	2100      	movs	r1, #0
   2b228:	5499      	strb	r1, [r3, r2]
   2b22a:	687b      	ldr	r3, [r7, #4]
   2b22c:	222e      	movs	r2, #46	; 0x2e
   2b22e:	2100      	movs	r1, #0
   2b230:	5499      	strb	r1, [r3, r2]
   2b232:	687b      	ldr	r3, [r7, #4]
   2b234:	222f      	movs	r2, #47	; 0x2f
   2b236:	2100      	movs	r1, #0
   2b238:	5499      	strb	r1, [r3, r2]
   2b23a:	687b      	ldr	r3, [r7, #4]
   2b23c:	2230      	movs	r2, #48	; 0x30
   2b23e:	2100      	movs	r1, #0
   2b240:	5499      	strb	r1, [r3, r2]
   2b242:	687b      	ldr	r3, [r7, #4]
   2b244:	2231      	movs	r2, #49	; 0x31
   2b246:	2100      	movs	r1, #0
   2b248:	5499      	strb	r1, [r3, r2]
   2b24a:	687b      	ldr	r3, [r7, #4]
   2b24c:	2232      	movs	r2, #50	; 0x32
   2b24e:	2100      	movs	r1, #0
   2b250:	5499      	strb	r1, [r3, r2]
   2b252:	687b      	ldr	r3, [r7, #4]
   2b254:	2233      	movs	r2, #51	; 0x33
   2b256:	2100      	movs	r1, #0
   2b258:	5499      	strb	r1, [r3, r2]
   2b25a:	687b      	ldr	r3, [r7, #4]
   2b25c:	2234      	movs	r2, #52	; 0x34
   2b25e:	2100      	movs	r1, #0
   2b260:	5499      	strb	r1, [r3, r2]
   2b262:	687b      	ldr	r3, [r7, #4]
   2b264:	2235      	movs	r2, #53	; 0x35
   2b266:	2100      	movs	r1, #0
   2b268:	5499      	strb	r1, [r3, r2]
   2b26a:	687b      	ldr	r3, [r7, #4]
   2b26c:	2236      	movs	r2, #54	; 0x36
   2b26e:	2100      	movs	r1, #0
   2b270:	5499      	strb	r1, [r3, r2]
   2b272:	687b      	ldr	r3, [r7, #4]
   2b274:	2237      	movs	r2, #55	; 0x37
   2b276:	2100      	movs	r1, #0
   2b278:	5499      	strb	r1, [r3, r2]
   2b27a:	687b      	ldr	r3, [r7, #4]
   2b27c:	2238      	movs	r2, #56	; 0x38
   2b27e:	2100      	movs	r1, #0
   2b280:	5499      	strb	r1, [r3, r2]
   2b282:	687b      	ldr	r3, [r7, #4]
   2b284:	2239      	movs	r2, #57	; 0x39
   2b286:	2100      	movs	r1, #0
   2b288:	5499      	strb	r1, [r3, r2]
   2b28a:	687b      	ldr	r3, [r7, #4]
   2b28c:	223a      	movs	r2, #58	; 0x3a
   2b28e:	2100      	movs	r1, #0
   2b290:	5499      	strb	r1, [r3, r2]
   2b292:	687b      	ldr	r3, [r7, #4]
   2b294:	223b      	movs	r2, #59	; 0x3b
   2b296:	2100      	movs	r1, #0
   2b298:	5499      	strb	r1, [r3, r2]
   2b29a:	687b      	ldr	r3, [r7, #4]
   2b29c:	223c      	movs	r2, #60	; 0x3c
   2b29e:	2100      	movs	r1, #0
   2b2a0:	5499      	strb	r1, [r3, r2]
   2b2a2:	687b      	ldr	r3, [r7, #4]
   2b2a4:	223d      	movs	r2, #61	; 0x3d
   2b2a6:	2100      	movs	r1, #0
   2b2a8:	5499      	strb	r1, [r3, r2]
   2b2aa:	687b      	ldr	r3, [r7, #4]
   2b2ac:	223e      	movs	r2, #62	; 0x3e
   2b2ae:	2100      	movs	r1, #0
   2b2b0:	5499      	strb	r1, [r3, r2]
   2b2b2:	687b      	ldr	r3, [r7, #4]
   2b2b4:	223f      	movs	r2, #63	; 0x3f
   2b2b6:	2100      	movs	r1, #0
   2b2b8:	5499      	strb	r1, [r3, r2]

	/* Non-recoverable fault defaults */
#  define _TCC_NRF_FUNCTION_INIT(n, dummy) \
		config->wave_ext.non_recoverable_fault[n].filter_value = 0; \
		config->wave_ext.non_recoverable_fault[n].output = TCC_FAULT_STATE_OUTPUT_OFF;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_NRF_FUNCTION_INIT, 0)
   2b2ba:	687b      	ldr	r3, [r7, #4]
   2b2bc:	2240      	movs	r2, #64	; 0x40
   2b2be:	2100      	movs	r1, #0
   2b2c0:	5499      	strb	r1, [r3, r2]
   2b2c2:	687b      	ldr	r3, [r7, #4]
   2b2c4:	2241      	movs	r2, #65	; 0x41
   2b2c6:	2100      	movs	r1, #0
   2b2c8:	5499      	strb	r1, [r3, r2]
   2b2ca:	687b      	ldr	r3, [r7, #4]
   2b2cc:	2242      	movs	r2, #66	; 0x42
   2b2ce:	2100      	movs	r1, #0
   2b2d0:	5499      	strb	r1, [r3, r2]
   2b2d2:	687b      	ldr	r3, [r7, #4]
   2b2d4:	2243      	movs	r2, #67	; 0x43
   2b2d6:	2100      	movs	r1, #0
   2b2d8:	5499      	strb	r1, [r3, r2]
   2b2da:	687b      	ldr	r3, [r7, #4]
   2b2dc:	2244      	movs	r2, #68	; 0x44
   2b2de:	2100      	movs	r1, #0
   2b2e0:	5499      	strb	r1, [r3, r2]
   2b2e2:	687b      	ldr	r3, [r7, #4]
   2b2e4:	2245      	movs	r2, #69	; 0x45
   2b2e6:	2100      	movs	r1, #0
   2b2e8:	5499      	strb	r1, [r3, r2]
   2b2ea:	687b      	ldr	r3, [r7, #4]
   2b2ec:	2246      	movs	r2, #70	; 0x46
   2b2ee:	2100      	movs	r1, #0
   2b2f0:	5499      	strb	r1, [r3, r2]
   2b2f2:	687b      	ldr	r3, [r7, #4]
   2b2f4:	2247      	movs	r2, #71	; 0x47
   2b2f6:	2100      	movs	r1, #0
   2b2f8:	5499      	strb	r1, [r3, r2]
   2b2fa:	687b      	ldr	r3, [r7, #4]
   2b2fc:	2248      	movs	r2, #72	; 0x48
   2b2fe:	2100      	movs	r1, #0
   2b300:	5499      	strb	r1, [r3, r2]
   2b302:	687b      	ldr	r3, [r7, #4]
   2b304:	2249      	movs	r2, #73	; 0x49
   2b306:	2100      	movs	r1, #0
   2b308:	5499      	strb	r1, [r3, r2]
   2b30a:	687b      	ldr	r3, [r7, #4]
   2b30c:	224a      	movs	r2, #74	; 0x4a
   2b30e:	2100      	movs	r1, #0
   2b310:	5499      	strb	r1, [r3, r2]
   2b312:	687b      	ldr	r3, [r7, #4]
   2b314:	224b      	movs	r2, #75	; 0x4b
   2b316:	2100      	movs	r1, #0
   2b318:	5499      	strb	r1, [r3, r2]
   2b31a:	687b      	ldr	r3, [r7, #4]
   2b31c:	224c      	movs	r2, #76	; 0x4c
   2b31e:	2100      	movs	r1, #0
   2b320:	5499      	strb	r1, [r3, r2]
   2b322:	687b      	ldr	r3, [r7, #4]
   2b324:	224d      	movs	r2, #77	; 0x4d
   2b326:	2100      	movs	r1, #0
   2b328:	5499      	strb	r1, [r3, r2]
   2b32a:	687b      	ldr	r3, [r7, #4]
   2b32c:	224e      	movs	r2, #78	; 0x4e
   2b32e:	2100      	movs	r1, #0
   2b330:	5499      	strb	r1, [r3, r2]
   2b332:	687b      	ldr	r3, [r7, #4]
   2b334:	224f      	movs	r2, #79	; 0x4f
   2b336:	2100      	movs	r1, #0
   2b338:	5499      	strb	r1, [r3, r2]
#  undef _TCC_NRF_FUNCTION_INIT

	/* Output inversion defaults */
#  define _TCC_OUT_INVERT_INIT(n, value) \
		config->wave_ext.invert[n] = value;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_OUT_INVERT_INIT, false)
   2b33a:	687b      	ldr	r3, [r7, #4]
   2b33c:	2250      	movs	r2, #80	; 0x50
   2b33e:	2100      	movs	r1, #0
   2b340:	5499      	strb	r1, [r3, r2]
   2b342:	687b      	ldr	r3, [r7, #4]
   2b344:	2251      	movs	r2, #81	; 0x51
   2b346:	2100      	movs	r1, #0
   2b348:	5499      	strb	r1, [r3, r2]
   2b34a:	687b      	ldr	r3, [r7, #4]
   2b34c:	2252      	movs	r2, #82	; 0x52
   2b34e:	2100      	movs	r1, #0
   2b350:	5499      	strb	r1, [r3, r2]
   2b352:	687b      	ldr	r3, [r7, #4]
   2b354:	2253      	movs	r2, #83	; 0x53
   2b356:	2100      	movs	r1, #0
   2b358:	5499      	strb	r1, [r3, r2]
   2b35a:	687b      	ldr	r3, [r7, #4]
   2b35c:	2254      	movs	r2, #84	; 0x54
   2b35e:	2100      	movs	r1, #0
   2b360:	5499      	strb	r1, [r3, r2]
   2b362:	687b      	ldr	r3, [r7, #4]
   2b364:	2255      	movs	r2, #85	; 0x55
   2b366:	2100      	movs	r1, #0
   2b368:	5499      	strb	r1, [r3, r2]
   2b36a:	687b      	ldr	r3, [r7, #4]
   2b36c:	2256      	movs	r2, #86	; 0x56
   2b36e:	2100      	movs	r1, #0
   2b370:	5499      	strb	r1, [r3, r2]
   2b372:	687b      	ldr	r3, [r7, #4]
   2b374:	2257      	movs	r2, #87	; 0x57
   2b376:	2100      	movs	r1, #0
   2b378:	5499      	strb	r1, [r3, r2]

#  define _TCC_CHANNEL_OUT_PIN_INIT(n, dummy) \
		config->pins.enable_wave_out_pin[n]                = false;\
		config->pins.wave_out_pin[TCC_WAVE_OUTPUT_##n]     = 0;    \
		config->pins.wave_out_pin_mux[TCC_WAVE_OUTPUT_##n] = 0;
	MREPEAT(TCC_NUM_WAVE_OUTPUTS, _TCC_CHANNEL_OUT_PIN_INIT, 0)
   2b37a:	687b      	ldr	r3, [r7, #4]
   2b37c:	2298      	movs	r2, #152	; 0x98
   2b37e:	2100      	movs	r1, #0
   2b380:	5499      	strb	r1, [r3, r2]
   2b382:	687b      	ldr	r3, [r7, #4]
   2b384:	2200      	movs	r2, #0
   2b386:	659a      	str	r2, [r3, #88]	; 0x58
   2b388:	687b      	ldr	r3, [r7, #4]
   2b38a:	2200      	movs	r2, #0
   2b38c:	679a      	str	r2, [r3, #120]	; 0x78
   2b38e:	687b      	ldr	r3, [r7, #4]
   2b390:	2299      	movs	r2, #153	; 0x99
   2b392:	2100      	movs	r1, #0
   2b394:	5499      	strb	r1, [r3, r2]
   2b396:	687b      	ldr	r3, [r7, #4]
   2b398:	2200      	movs	r2, #0
   2b39a:	65da      	str	r2, [r3, #92]	; 0x5c
   2b39c:	687b      	ldr	r3, [r7, #4]
   2b39e:	2200      	movs	r2, #0
   2b3a0:	67da      	str	r2, [r3, #124]	; 0x7c
   2b3a2:	687b      	ldr	r3, [r7, #4]
   2b3a4:	229a      	movs	r2, #154	; 0x9a
   2b3a6:	2100      	movs	r1, #0
   2b3a8:	5499      	strb	r1, [r3, r2]
   2b3aa:	687b      	ldr	r3, [r7, #4]
   2b3ac:	2200      	movs	r2, #0
   2b3ae:	661a      	str	r2, [r3, #96]	; 0x60
   2b3b0:	687b      	ldr	r3, [r7, #4]
   2b3b2:	2280      	movs	r2, #128	; 0x80
   2b3b4:	2100      	movs	r1, #0
   2b3b6:	5099      	str	r1, [r3, r2]
   2b3b8:	687b      	ldr	r3, [r7, #4]
   2b3ba:	229b      	movs	r2, #155	; 0x9b
   2b3bc:	2100      	movs	r1, #0
   2b3be:	5499      	strb	r1, [r3, r2]
   2b3c0:	687b      	ldr	r3, [r7, #4]
   2b3c2:	2200      	movs	r2, #0
   2b3c4:	665a      	str	r2, [r3, #100]	; 0x64
   2b3c6:	687b      	ldr	r3, [r7, #4]
   2b3c8:	2284      	movs	r2, #132	; 0x84
   2b3ca:	2100      	movs	r1, #0
   2b3cc:	5099      	str	r1, [r3, r2]
   2b3ce:	687b      	ldr	r3, [r7, #4]
   2b3d0:	229c      	movs	r2, #156	; 0x9c
   2b3d2:	2100      	movs	r1, #0
   2b3d4:	5499      	strb	r1, [r3, r2]
   2b3d6:	687b      	ldr	r3, [r7, #4]
   2b3d8:	2200      	movs	r2, #0
   2b3da:	669a      	str	r2, [r3, #104]	; 0x68
   2b3dc:	687b      	ldr	r3, [r7, #4]
   2b3de:	2288      	movs	r2, #136	; 0x88
   2b3e0:	2100      	movs	r1, #0
   2b3e2:	5099      	str	r1, [r3, r2]
   2b3e4:	687b      	ldr	r3, [r7, #4]
   2b3e6:	229d      	movs	r2, #157	; 0x9d
   2b3e8:	2100      	movs	r1, #0
   2b3ea:	5499      	strb	r1, [r3, r2]
   2b3ec:	687b      	ldr	r3, [r7, #4]
   2b3ee:	2200      	movs	r2, #0
   2b3f0:	66da      	str	r2, [r3, #108]	; 0x6c
   2b3f2:	687b      	ldr	r3, [r7, #4]
   2b3f4:	228c      	movs	r2, #140	; 0x8c
   2b3f6:	2100      	movs	r1, #0
   2b3f8:	5099      	str	r1, [r3, r2]
   2b3fa:	687b      	ldr	r3, [r7, #4]
   2b3fc:	229e      	movs	r2, #158	; 0x9e
   2b3fe:	2100      	movs	r1, #0
   2b400:	5499      	strb	r1, [r3, r2]
   2b402:	687b      	ldr	r3, [r7, #4]
   2b404:	2200      	movs	r2, #0
   2b406:	671a      	str	r2, [r3, #112]	; 0x70
   2b408:	687b      	ldr	r3, [r7, #4]
   2b40a:	2290      	movs	r2, #144	; 0x90
   2b40c:	2100      	movs	r1, #0
   2b40e:	5099      	str	r1, [r3, r2]
   2b410:	687b      	ldr	r3, [r7, #4]
   2b412:	229f      	movs	r2, #159	; 0x9f
   2b414:	2100      	movs	r1, #0
   2b416:	5499      	strb	r1, [r3, r2]
   2b418:	687b      	ldr	r3, [r7, #4]
   2b41a:	2200      	movs	r2, #0
   2b41c:	675a      	str	r2, [r3, #116]	; 0x74
   2b41e:	687b      	ldr	r3, [r7, #4]
   2b420:	2294      	movs	r2, #148	; 0x94
   2b422:	2100      	movs	r1, #0
   2b424:	5099      	str	r1, [r3, r2]
#  undef _TCC_CHANNEL_OUT_PIN_INIT

	config->double_buffering_enabled  = true;
   2b426:	687b      	ldr	r3, [r7, #4]
   2b428:	22a0      	movs	r2, #160	; 0xa0
   2b42a:	2101      	movs	r1, #1
   2b42c:	5499      	strb	r1, [r3, r2]
	config->run_in_standby            = false;
   2b42e:	687b      	ldr	r3, [r7, #4]
   2b430:	22a1      	movs	r2, #161	; 0xa1
   2b432:	2100      	movs	r1, #0
   2b434:	5499      	strb	r1, [r3, r2]
}
   2b436:	46c0      	nop			; (mov r8, r8)
   2b438:	46bd      	mov	sp, r7
   2b43a:	b005      	add	sp, #20
   2b43c:	bd90      	pop	{r4, r7, pc}
   2b43e:	46c0      	nop			; (mov r8, r8)
   2b440:	0002b13d 	.word	0x0002b13d
   2b444:	0003a68c 	.word	0x0003a68c

0002b448 <_tcc_build_ctrla>:
 */
static inline enum status_code _tcc_build_ctrla(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2b448:	b580      	push	{r7, lr}
   2b44a:	b086      	sub	sp, #24
   2b44c:	af00      	add	r7, sp, #0
   2b44e:	60b9      	str	r1, [r7, #8]
   2b450:	607a      	str	r2, [r7, #4]
   2b452:	230f      	movs	r3, #15
   2b454:	18fb      	adds	r3, r7, r3
   2b456:	1c02      	adds	r2, r0, #0
   2b458:	701a      	strb	r2, [r3, #0]
	uint32_t ctrla = 0;
   2b45a:	2300      	movs	r3, #0
   2b45c:	617b      	str	r3, [r7, #20]

	int i;
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2b45e:	2300      	movs	r3, #0
   2b460:	613b      	str	r3, [r7, #16]
   2b462:	e01d      	b.n	2b4a0 <_tcc_build_ctrla+0x58>
		if (config->capture.channel_function[i] ==
   2b464:	68ba      	ldr	r2, [r7, #8]
   2b466:	693b      	ldr	r3, [r7, #16]
   2b468:	18d3      	adds	r3, r2, r3
   2b46a:	3310      	adds	r3, #16
   2b46c:	781b      	ldrb	r3, [r3, #0]
   2b46e:	2b01      	cmp	r3, #1
   2b470:	d113      	bne.n	2b49a <_tcc_build_ctrla+0x52>
			TCC_CHANNEL_FUNCTION_CAPTURE) {

			if (i > _tcc_cc_nums[module_index]) {
   2b472:	230f      	movs	r3, #15
   2b474:	18fb      	adds	r3, r7, r3
   2b476:	781b      	ldrb	r3, [r3, #0]
   2b478:	4a1b      	ldr	r2, [pc, #108]	; (2b4e8 <_tcc_build_ctrla+0xa0>)
   2b47a:	5cd3      	ldrb	r3, [r2, r3]
   2b47c:	001a      	movs	r2, r3
   2b47e:	693b      	ldr	r3, [r7, #16]
   2b480:	429a      	cmp	r2, r3
   2b482:	da01      	bge.n	2b488 <_tcc_build_ctrla+0x40>
				/* Channel not supported */
				return STATUS_ERR_INVALID_ARG;
   2b484:	2317      	movs	r3, #23
   2b486:	e02a      	b.n	2b4de <_tcc_build_ctrla+0x96>
			}
			ctrla |= (TCC_CTRLA_CPTEN0 << i);
   2b488:	2380      	movs	r3, #128	; 0x80
   2b48a:	045a      	lsls	r2, r3, #17
   2b48c:	693b      	ldr	r3, [r7, #16]
   2b48e:	409a      	lsls	r2, r3
   2b490:	0013      	movs	r3, r2
   2b492:	001a      	movs	r2, r3
   2b494:	697b      	ldr	r3, [r7, #20]
   2b496:	4313      	orrs	r3, r2
   2b498:	617b      	str	r3, [r7, #20]
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2b49a:	693b      	ldr	r3, [r7, #16]
   2b49c:	3301      	adds	r3, #1
   2b49e:	613b      	str	r3, [r7, #16]
   2b4a0:	693b      	ldr	r3, [r7, #16]
   2b4a2:	2b03      	cmp	r3, #3
   2b4a4:	ddde      	ble.n	2b464 <_tcc_build_ctrla+0x1c>
		}
	}

	if (config->run_in_standby) {
   2b4a6:	68bb      	ldr	r3, [r7, #8]
   2b4a8:	22a1      	movs	r2, #161	; 0xa1
   2b4aa:	5c9b      	ldrb	r3, [r3, r2]
   2b4ac:	2b00      	cmp	r3, #0
   2b4ae:	d004      	beq.n	2b4ba <_tcc_build_ctrla+0x72>
		ctrla |= TCC_CTRLA_RUNSTDBY;
   2b4b0:	697b      	ldr	r3, [r7, #20]
   2b4b2:	2280      	movs	r2, #128	; 0x80
   2b4b4:	0112      	lsls	r2, r2, #4
   2b4b6:	4313      	orrs	r3, r2
   2b4b8:	617b      	str	r3, [r7, #20]
	}
	ctrla |= config->counter.reload_action << TCC_CTRLA_PRESCSYNC_Pos;
   2b4ba:	68bb      	ldr	r3, [r7, #8]
   2b4bc:	7b1b      	ldrb	r3, [r3, #12]
   2b4be:	031b      	lsls	r3, r3, #12
   2b4c0:	001a      	movs	r2, r3
   2b4c2:	697b      	ldr	r3, [r7, #20]
   2b4c4:	4313      	orrs	r3, r2
   2b4c6:	617b      	str	r3, [r7, #20]
	ctrla |= config->counter.clock_prescaler << TCC_CTRLA_PRESCALER_Pos;
   2b4c8:	68bb      	ldr	r3, [r7, #8]
   2b4ca:	7adb      	ldrb	r3, [r3, #11]
   2b4cc:	021b      	lsls	r3, r3, #8
   2b4ce:	001a      	movs	r2, r3
   2b4d0:	697b      	ldr	r3, [r7, #20]
   2b4d2:	4313      	orrs	r3, r2
   2b4d4:	617b      	str	r3, [r7, #20]

	*value_buffer = ctrla;
   2b4d6:	687b      	ldr	r3, [r7, #4]
   2b4d8:	697a      	ldr	r2, [r7, #20]
   2b4da:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2b4dc:	2300      	movs	r3, #0
}
   2b4de:	0018      	movs	r0, r3
   2b4e0:	46bd      	mov	sp, r7
   2b4e2:	b006      	add	sp, #24
   2b4e4:	bd80      	pop	{r7, pc}
   2b4e6:	46c0      	nop			; (mov r8, r8)
   2b4e8:	0003a698 	.word	0x0003a698

0002b4ec <_tcc_build_ctrlb>:
 */
static inline void _tcc_build_ctrlb(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint8_t *value_buffer)
{
   2b4ec:	b580      	push	{r7, lr}
   2b4ee:	b086      	sub	sp, #24
   2b4f0:	af00      	add	r7, sp, #0
   2b4f2:	60b9      	str	r1, [r7, #8]
   2b4f4:	607a      	str	r2, [r7, #4]
   2b4f6:	230f      	movs	r3, #15
   2b4f8:	18fb      	adds	r3, r7, r3
   2b4fa:	1c02      	adds	r2, r0, #0
   2b4fc:	701a      	strb	r2, [r3, #0]
	uint8_t ctrlb = 0;
   2b4fe:	2317      	movs	r3, #23
   2b500:	18fb      	adds	r3, r7, r3
   2b502:	2200      	movs	r2, #0
   2b504:	701a      	strb	r2, [r3, #0]

	if (config->counter.oneshot) {
   2b506:	68bb      	ldr	r3, [r7, #8]
   2b508:	7a1b      	ldrb	r3, [r3, #8]
   2b50a:	2b00      	cmp	r3, #0
   2b50c:	d007      	beq.n	2b51e <_tcc_build_ctrlb+0x32>
		ctrlb |= TCC_CTRLBSET_ONESHOT;
   2b50e:	2317      	movs	r3, #23
   2b510:	18fb      	adds	r3, r7, r3
   2b512:	2217      	movs	r2, #23
   2b514:	18ba      	adds	r2, r7, r2
   2b516:	7812      	ldrb	r2, [r2, #0]
   2b518:	2104      	movs	r1, #4
   2b51a:	430a      	orrs	r2, r1
   2b51c:	701a      	strb	r2, [r3, #0]
	}
	if (config->counter.direction == TCC_COUNT_DIRECTION_DOWN) {
   2b51e:	68bb      	ldr	r3, [r7, #8]
   2b520:	7a5b      	ldrb	r3, [r3, #9]
   2b522:	2b01      	cmp	r3, #1
   2b524:	d107      	bne.n	2b536 <_tcc_build_ctrlb+0x4a>
		ctrlb |= TCC_CTRLBSET_DIR;
   2b526:	2317      	movs	r3, #23
   2b528:	18fb      	adds	r3, r7, r3
   2b52a:	2217      	movs	r2, #23
   2b52c:	18ba      	adds	r2, r7, r2
   2b52e:	7812      	ldrb	r2, [r2, #0]
   2b530:	2101      	movs	r1, #1
   2b532:	430a      	orrs	r2, r1
   2b534:	701a      	strb	r2, [r3, #0]
	}

	*value_buffer = ctrlb;
   2b536:	687b      	ldr	r3, [r7, #4]
   2b538:	2217      	movs	r2, #23
   2b53a:	18ba      	adds	r2, r7, r2
   2b53c:	7812      	ldrb	r2, [r2, #0]
   2b53e:	701a      	strb	r2, [r3, #0]
}
   2b540:	46c0      	nop			; (mov r8, r8)
   2b542:	46bd      	mov	sp, r7
   2b544:	b006      	add	sp, #24
   2b546:	bd80      	pop	{r7, pc}

0002b548 <_tcc_build_faults>:
 */
static inline enum status_code _tcc_build_faults(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2b548:	b580      	push	{r7, lr}
   2b54a:	b088      	sub	sp, #32
   2b54c:	af00      	add	r7, sp, #0
   2b54e:	60b9      	str	r1, [r7, #8]
   2b550:	607a      	str	r2, [r7, #4]
   2b552:	230f      	movs	r3, #15
   2b554:	18fb      	adds	r3, r7, r3
   2b556:	1c02      	adds	r2, r0, #0
   2b558:	701a      	strb	r2, [r3, #0]
	struct tcc_recoverable_fault_config *cfg;
	uint8_t cc_num = _tcc_cc_nums[module_index];
   2b55a:	230f      	movs	r3, #15
   2b55c:	18fb      	adds	r3, r7, r3
   2b55e:	781a      	ldrb	r2, [r3, #0]
   2b560:	231b      	movs	r3, #27
   2b562:	18fb      	adds	r3, r7, r3
   2b564:	493e      	ldr	r1, [pc, #248]	; (2b660 <_tcc_build_faults+0x118>)
   2b566:	5c8a      	ldrb	r2, [r1, r2]
   2b568:	701a      	strb	r2, [r3, #0]
	uint32_t fault;
	int i;
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2b56a:	2300      	movs	r3, #0
   2b56c:	61fb      	str	r3, [r7, #28]
   2b56e:	e06e      	b.n	2b64e <_tcc_build_faults+0x106>
		cfg = (struct tcc_recoverable_fault_config *)
   2b570:	69fa      	ldr	r2, [r7, #28]
   2b572:	0013      	movs	r3, r2
   2b574:	009b      	lsls	r3, r3, #2
   2b576:	189b      	adds	r3, r3, r2
   2b578:	005b      	lsls	r3, r3, #1
   2b57a:	3328      	adds	r3, #40	; 0x28
   2b57c:	68ba      	ldr	r2, [r7, #8]
   2b57e:	18d3      	adds	r3, r2, r3
   2b580:	3304      	adds	r3, #4
   2b582:	617b      	str	r3, [r7, #20]
				&config->wave_ext.recoverable_fault[i];
		if (cfg->capture_channel >= cc_num) {
   2b584:	697b      	ldr	r3, [r7, #20]
   2b586:	7a5b      	ldrb	r3, [r3, #9]
   2b588:	221b      	movs	r2, #27
   2b58a:	18ba      	adds	r2, r7, r2
   2b58c:	7812      	ldrb	r2, [r2, #0]
   2b58e:	429a      	cmp	r2, r3
   2b590:	d801      	bhi.n	2b596 <_tcc_build_faults+0x4e>
			return STATUS_ERR_INVALID_ARG;
   2b592:	2317      	movs	r3, #23
   2b594:	e05f      	b.n	2b656 <_tcc_build_faults+0x10e>
		}
		if (cfg->filter_value > 0xF) {
   2b596:	697b      	ldr	r3, [r7, #20]
   2b598:	781b      	ldrb	r3, [r3, #0]
   2b59a:	2b0f      	cmp	r3, #15
   2b59c:	d901      	bls.n	2b5a2 <_tcc_build_faults+0x5a>
			return STATUS_ERR_INVALID_ARG;
   2b59e:	2317      	movs	r3, #23
   2b5a0:	e059      	b.n	2b656 <_tcc_build_faults+0x10e>
		}
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2b5a2:	697b      	ldr	r3, [r7, #20]
   2b5a4:	781b      	ldrb	r3, [r3, #0]
   2b5a6:	061b      	lsls	r3, r3, #24
   2b5a8:	001a      	movs	r2, r3
   2b5aa:	23f0      	movs	r3, #240	; 0xf0
   2b5ac:	051b      	lsls	r3, r3, #20
   2b5ae:	401a      	ands	r2, r3
				| TCC_FCTRLA_BLANKVAL(cfg->blanking_cycles)
   2b5b0:	697b      	ldr	r3, [r7, #20]
   2b5b2:	785b      	ldrb	r3, [r3, #1]
   2b5b4:	041b      	lsls	r3, r3, #16
   2b5b6:	0019      	movs	r1, r3
   2b5b8:	23ff      	movs	r3, #255	; 0xff
   2b5ba:	041b      	lsls	r3, r3, #16
   2b5bc:	400b      	ands	r3, r1
   2b5be:	431a      	orrs	r2, r3
				| (cfg->restart ? TCC_FCTRLA_RESTART : 0)
   2b5c0:	697b      	ldr	r3, [r7, #20]
   2b5c2:	789b      	ldrb	r3, [r3, #2]
   2b5c4:	2b00      	cmp	r3, #0
   2b5c6:	d001      	beq.n	2b5cc <_tcc_build_faults+0x84>
   2b5c8:	2380      	movs	r3, #128	; 0x80
   2b5ca:	e000      	b.n	2b5ce <_tcc_build_faults+0x86>
   2b5cc:	2300      	movs	r3, #0
   2b5ce:	431a      	orrs	r2, r3
				| (cfg->keep ? TCC_FCTRLA_KEEP : 0)
   2b5d0:	697b      	ldr	r3, [r7, #20]
   2b5d2:	78db      	ldrb	r3, [r3, #3]
   2b5d4:	2b00      	cmp	r3, #0
   2b5d6:	d001      	beq.n	2b5dc <_tcc_build_faults+0x94>
   2b5d8:	2308      	movs	r3, #8
   2b5da:	e000      	b.n	2b5de <_tcc_build_faults+0x96>
   2b5dc:	2300      	movs	r3, #0
   2b5de:	431a      	orrs	r2, r3
				| (cfg->qualification ? TCC_FCTRLA_QUAL : 0)
   2b5e0:	697b      	ldr	r3, [r7, #20]
   2b5e2:	791b      	ldrb	r3, [r3, #4]
   2b5e4:	2b00      	cmp	r3, #0
   2b5e6:	d001      	beq.n	2b5ec <_tcc_build_faults+0xa4>
   2b5e8:	2310      	movs	r3, #16
   2b5ea:	e000      	b.n	2b5ee <_tcc_build_faults+0xa6>
   2b5ec:	2300      	movs	r3, #0
   2b5ee:	431a      	orrs	r2, r3
				| TCC_FCTRLA_SRC(cfg->source)
   2b5f0:	697b      	ldr	r3, [r7, #20]
   2b5f2:	795b      	ldrb	r3, [r3, #5]
   2b5f4:	0019      	movs	r1, r3
   2b5f6:	2303      	movs	r3, #3
   2b5f8:	400b      	ands	r3, r1
   2b5fa:	431a      	orrs	r2, r3
				| TCC_FCTRLA_BLANK(cfg->blanking)
   2b5fc:	697b      	ldr	r3, [r7, #20]
   2b5fe:	799b      	ldrb	r3, [r3, #6]
   2b600:	015b      	lsls	r3, r3, #5
   2b602:	0019      	movs	r1, r3
   2b604:	2360      	movs	r3, #96	; 0x60
   2b606:	400b      	ands	r3, r1
   2b608:	431a      	orrs	r2, r3
				| TCC_FCTRLA_HALT(cfg->halt_action)
   2b60a:	697b      	ldr	r3, [r7, #20]
   2b60c:	79db      	ldrb	r3, [r3, #7]
   2b60e:	021b      	lsls	r3, r3, #8
   2b610:	0019      	movs	r1, r3
   2b612:	23c0      	movs	r3, #192	; 0xc0
   2b614:	009b      	lsls	r3, r3, #2
   2b616:	400b      	ands	r3, r1
   2b618:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CAPTURE(cfg->capture_action)
   2b61a:	697b      	ldr	r3, [r7, #20]
   2b61c:	7a1b      	ldrb	r3, [r3, #8]
   2b61e:	031b      	lsls	r3, r3, #12
   2b620:	0019      	movs	r1, r3
   2b622:	23e0      	movs	r3, #224	; 0xe0
   2b624:	01db      	lsls	r3, r3, #7
   2b626:	400b      	ands	r3, r1
   2b628:	431a      	orrs	r2, r3
				| TCC_FCTRLA_CHSEL(cfg->capture_channel);
   2b62a:	697b      	ldr	r3, [r7, #20]
   2b62c:	7a5b      	ldrb	r3, [r3, #9]
   2b62e:	029b      	lsls	r3, r3, #10
   2b630:	0019      	movs	r1, r3
   2b632:	23c0      	movs	r3, #192	; 0xc0
   2b634:	011b      	lsls	r3, r3, #4
   2b636:	400b      	ands	r3, r1
		fault = TCC_FCTRLA_FILTERVAL(cfg->filter_value)
   2b638:	4313      	orrs	r3, r2
   2b63a:	613b      	str	r3, [r7, #16]
		value_buffer[i] = fault;
   2b63c:	69fb      	ldr	r3, [r7, #28]
   2b63e:	009b      	lsls	r3, r3, #2
   2b640:	687a      	ldr	r2, [r7, #4]
   2b642:	18d3      	adds	r3, r2, r3
   2b644:	693a      	ldr	r2, [r7, #16]
   2b646:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_NUM_FAULTS; i ++) {
   2b648:	69fb      	ldr	r3, [r7, #28]
   2b64a:	3301      	adds	r3, #1
   2b64c:	61fb      	str	r3, [r7, #28]
   2b64e:	69fb      	ldr	r3, [r7, #28]
   2b650:	2b01      	cmp	r3, #1
   2b652:	dd8d      	ble.n	2b570 <_tcc_build_faults+0x28>
	}
	return STATUS_OK;
   2b654:	2300      	movs	r3, #0
}
   2b656:	0018      	movs	r0, r3
   2b658:	46bd      	mov	sp, r7
   2b65a:	b008      	add	sp, #32
   2b65c:	bd80      	pop	{r7, pc}
   2b65e:	46c0      	nop			; (mov r8, r8)
   2b660:	0003a698 	.word	0x0003a698

0002b664 <_tcc_build_drvctrl>:
 */
static inline enum status_code _tcc_build_drvctrl(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2b664:	b580      	push	{r7, lr}
   2b666:	b088      	sub	sp, #32
   2b668:	af00      	add	r7, sp, #0
   2b66a:	60b9      	str	r1, [r7, #8]
   2b66c:	607a      	str	r2, [r7, #4]
   2b66e:	230f      	movs	r3, #15
   2b670:	18fb      	adds	r3, r7, r3
   2b672:	1c02      	adds	r2, r0, #0
   2b674:	701a      	strb	r2, [r3, #0]
	uint32_t i;
	uint8_t ow_num = _tcc_ow_nums[module_index];
   2b676:	230f      	movs	r3, #15
   2b678:	18fb      	adds	r3, r7, r3
   2b67a:	781a      	ldrb	r2, [r3, #0]
   2b67c:	2317      	movs	r3, #23
   2b67e:	18fb      	adds	r3, r7, r3
   2b680:	492d      	ldr	r1, [pc, #180]	; (2b738 <_tcc_build_drvctrl+0xd4>)
   2b682:	5c8a      	ldrb	r2, [r1, r2]
   2b684:	701a      	strb	r2, [r3, #0]
	uint32_t drvctrl;

	drvctrl = 0;
   2b686:	2300      	movs	r3, #0
   2b688:	61bb      	str	r3, [r7, #24]

	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2b68a:	2300      	movs	r3, #0
   2b68c:	61fb      	str	r3, [r7, #28]
   2b68e:	e048      	b.n	2b722 <_tcc_build_drvctrl+0xbe>
		if (config->wave_ext.invert[i]) {
   2b690:	68ba      	ldr	r2, [r7, #8]
   2b692:	2150      	movs	r1, #80	; 0x50
   2b694:	69fb      	ldr	r3, [r7, #28]
   2b696:	18d3      	adds	r3, r2, r3
   2b698:	185b      	adds	r3, r3, r1
   2b69a:	781b      	ldrb	r3, [r3, #0]
   2b69c:	2b00      	cmp	r3, #0
   2b69e:	d010      	beq.n	2b6c2 <_tcc_build_drvctrl+0x5e>
			if (i >= ow_num) {
   2b6a0:	2317      	movs	r3, #23
   2b6a2:	18fb      	adds	r3, r7, r3
   2b6a4:	781a      	ldrb	r2, [r3, #0]
   2b6a6:	69fb      	ldr	r3, [r7, #28]
   2b6a8:	429a      	cmp	r2, r3
   2b6aa:	d801      	bhi.n	2b6b0 <_tcc_build_drvctrl+0x4c>
				return STATUS_ERR_INVALID_ARG;
   2b6ac:	2317      	movs	r3, #23
   2b6ae:	e03f      	b.n	2b730 <_tcc_build_drvctrl+0xcc>
			}
			drvctrl |= (TCC_DRVCTRL_INVEN0 << i);
   2b6b0:	2380      	movs	r3, #128	; 0x80
   2b6b2:	025a      	lsls	r2, r3, #9
   2b6b4:	69fb      	ldr	r3, [r7, #28]
   2b6b6:	409a      	lsls	r2, r3
   2b6b8:	0013      	movs	r3, r2
   2b6ba:	001a      	movs	r2, r3
   2b6bc:	69bb      	ldr	r3, [r7, #24]
   2b6be:	4313      	orrs	r3, r2
   2b6c0:	61bb      	str	r3, [r7, #24]
		}
		if (config->wave_ext.non_recoverable_fault[i].output !=
   2b6c2:	68ba      	ldr	r2, [r7, #8]
   2b6c4:	69fb      	ldr	r3, [r7, #28]
   2b6c6:	331c      	adds	r3, #28
   2b6c8:	005b      	lsls	r3, r3, #1
   2b6ca:	18d3      	adds	r3, r2, r3
   2b6cc:	3309      	adds	r3, #9
   2b6ce:	781b      	ldrb	r3, [r3, #0]
   2b6d0:	2b00      	cmp	r3, #0
   2b6d2:	d023      	beq.n	2b71c <_tcc_build_drvctrl+0xb8>
			TCC_FAULT_STATE_OUTPUT_OFF) {
			if (i >= ow_num) {
   2b6d4:	2317      	movs	r3, #23
   2b6d6:	18fb      	adds	r3, r7, r3
   2b6d8:	781a      	ldrb	r2, [r3, #0]
   2b6da:	69fb      	ldr	r3, [r7, #28]
   2b6dc:	429a      	cmp	r2, r3
   2b6de:	d801      	bhi.n	2b6e4 <_tcc_build_drvctrl+0x80>
				return STATUS_ERR_INVALID_ARG;
   2b6e0:	2317      	movs	r3, #23
   2b6e2:	e025      	b.n	2b730 <_tcc_build_drvctrl+0xcc>
			}
			if (config->wave_ext.non_recoverable_fault[i].output ==
   2b6e4:	68ba      	ldr	r2, [r7, #8]
   2b6e6:	69fb      	ldr	r3, [r7, #28]
   2b6e8:	331c      	adds	r3, #28
   2b6ea:	005b      	lsls	r3, r3, #1
   2b6ec:	18d3      	adds	r3, r2, r3
   2b6ee:	3309      	adds	r3, #9
   2b6f0:	781b      	ldrb	r3, [r3, #0]
   2b6f2:	2b02      	cmp	r3, #2
   2b6f4:	d10a      	bne.n	2b70c <_tcc_build_drvctrl+0xa8>
				TCC_FAULT_STATE_OUTPUT_1) {
				drvctrl |= (TCC_DRVCTRL_NRE0 | TCC_DRVCTRL_NRV0) << i;
   2b6f6:	2302      	movs	r3, #2
   2b6f8:	33ff      	adds	r3, #255	; 0xff
   2b6fa:	001a      	movs	r2, r3
   2b6fc:	69fb      	ldr	r3, [r7, #28]
   2b6fe:	409a      	lsls	r2, r3
   2b700:	0013      	movs	r3, r2
   2b702:	001a      	movs	r2, r3
   2b704:	69bb      	ldr	r3, [r7, #24]
   2b706:	4313      	orrs	r3, r2
   2b708:	61bb      	str	r3, [r7, #24]
   2b70a:	e007      	b.n	2b71c <_tcc_build_drvctrl+0xb8>
			} else {
				drvctrl |= (TCC_DRVCTRL_NRE0) << i;
   2b70c:	2201      	movs	r2, #1
   2b70e:	69fb      	ldr	r3, [r7, #28]
   2b710:	409a      	lsls	r2, r3
   2b712:	0013      	movs	r3, r2
   2b714:	001a      	movs	r2, r3
   2b716:	69bb      	ldr	r3, [r7, #24]
   2b718:	4313      	orrs	r3, r2
   2b71a:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2b71c:	69fb      	ldr	r3, [r7, #28]
   2b71e:	3301      	adds	r3, #1
   2b720:	61fb      	str	r3, [r7, #28]
   2b722:	69fb      	ldr	r3, [r7, #28]
   2b724:	2b07      	cmp	r3, #7
   2b726:	d9b3      	bls.n	2b690 <_tcc_build_drvctrl+0x2c>
			}
		}
	}
	*value_buffer = drvctrl;
   2b728:	687b      	ldr	r3, [r7, #4]
   2b72a:	69ba      	ldr	r2, [r7, #24]
   2b72c:	601a      	str	r2, [r3, #0]
	return STATUS_OK;
   2b72e:	2300      	movs	r3, #0
}
   2b730:	0018      	movs	r0, r3
   2b732:	46bd      	mov	sp, r7
   2b734:	b008      	add	sp, #32
   2b736:	bd80      	pop	{r7, pc}
   2b738:	0003a69c 	.word	0x0003a69c

0002b73c <_tcc_build_waves>:
 */
static inline enum status_code _tcc_build_waves(
		const uint8_t module_index,
		const struct tcc_config *const config,
		uint32_t *value_buffer)
{
   2b73c:	b580      	push	{r7, lr}
   2b73e:	b088      	sub	sp, #32
   2b740:	af00      	add	r7, sp, #0
   2b742:	60b9      	str	r1, [r7, #8]
   2b744:	607a      	str	r2, [r7, #4]
   2b746:	230f      	movs	r3, #15
   2b748:	18fb      	adds	r3, r7, r3
   2b74a:	1c02      	adds	r2, r0, #0
   2b74c:	701a      	strb	r2, [r3, #0]
	int n;

	uint8_t cc_num = _tcc_cc_nums[module_index];
   2b74e:	230f      	movs	r3, #15
   2b750:	18fb      	adds	r3, r7, r3
   2b752:	781a      	ldrb	r2, [r3, #0]
   2b754:	2317      	movs	r3, #23
   2b756:	18fb      	adds	r3, r7, r3
   2b758:	491d      	ldr	r1, [pc, #116]	; (2b7d0 <_tcc_build_waves+0x94>)
   2b75a:	5c8a      	ldrb	r2, [r1, r2]
   2b75c:	701a      	strb	r2, [r3, #0]
	struct tcc_match_wave_config const *wav_cfg = &config->compare;
   2b75e:	68bb      	ldr	r3, [r7, #8]
   2b760:	3310      	adds	r3, #16
   2b762:	613b      	str	r3, [r7, #16]

	uint32_t wave;

	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2b764:	693b      	ldr	r3, [r7, #16]
   2b766:	7a5b      	ldrb	r3, [r3, #9]
   2b768:	011b      	lsls	r3, r3, #4
   2b76a:	001a      	movs	r2, r3
   2b76c:	2330      	movs	r3, #48	; 0x30
   2b76e:	401a      	ands	r2, r3
			TCC_WAVE_WAVEGEN(wav_cfg->wave_generation);
   2b770:	693b      	ldr	r3, [r7, #16]
   2b772:	7a1b      	ldrb	r3, [r3, #8]
   2b774:	0019      	movs	r1, r3
   2b776:	2307      	movs	r3, #7
   2b778:	400b      	ands	r3, r1
	wave = TCC_WAVE_RAMP(wav_cfg->wave_ramp) |
   2b77a:	4313      	orrs	r3, r2
   2b77c:	61bb      	str	r3, [r7, #24]

	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2b77e:	2300      	movs	r3, #0
   2b780:	61fb      	str	r3, [r7, #28]
   2b782:	e01a      	b.n	2b7ba <_tcc_build_waves+0x7e>
		if (wav_cfg->wave_polarity[n]) {
   2b784:	693a      	ldr	r2, [r7, #16]
   2b786:	69fb      	ldr	r3, [r7, #28]
   2b788:	18d3      	adds	r3, r2, r3
   2b78a:	3304      	adds	r3, #4
   2b78c:	781b      	ldrb	r3, [r3, #0]
   2b78e:	2b00      	cmp	r3, #0
   2b790:	d010      	beq.n	2b7b4 <_tcc_build_waves+0x78>
			if (n >= cc_num) {
   2b792:	2317      	movs	r3, #23
   2b794:	18fb      	adds	r3, r7, r3
   2b796:	781a      	ldrb	r2, [r3, #0]
   2b798:	69fb      	ldr	r3, [r7, #28]
   2b79a:	429a      	cmp	r2, r3
   2b79c:	dc01      	bgt.n	2b7a2 <_tcc_build_waves+0x66>
				return STATUS_ERR_INVALID_ARG;
   2b79e:	2317      	movs	r3, #23
   2b7a0:	e012      	b.n	2b7c8 <_tcc_build_waves+0x8c>
			}
			wave |= (TCC_WAVE_POL0 << n);
   2b7a2:	2380      	movs	r3, #128	; 0x80
   2b7a4:	025a      	lsls	r2, r3, #9
   2b7a6:	69fb      	ldr	r3, [r7, #28]
   2b7a8:	409a      	lsls	r2, r3
   2b7aa:	0013      	movs	r3, r2
   2b7ac:	001a      	movs	r2, r3
   2b7ae:	69bb      	ldr	r3, [r7, #24]
   2b7b0:	4313      	orrs	r3, r2
   2b7b2:	61bb      	str	r3, [r7, #24]
	for (n = 0; n < TCC_NUM_CHANNELS; n++) {
   2b7b4:	69fb      	ldr	r3, [r7, #28]
   2b7b6:	3301      	adds	r3, #1
   2b7b8:	61fb      	str	r3, [r7, #28]
   2b7ba:	69fb      	ldr	r3, [r7, #28]
   2b7bc:	2b03      	cmp	r3, #3
   2b7be:	dde1      	ble.n	2b784 <_tcc_build_waves+0x48>
		}
	}

	value_buffer[0] = wave;
   2b7c0:	687b      	ldr	r3, [r7, #4]
   2b7c2:	69ba      	ldr	r2, [r7, #24]
   2b7c4:	601a      	str	r2, [r3, #0]

	return STATUS_OK;
   2b7c6:	2300      	movs	r3, #0
}
   2b7c8:	0018      	movs	r0, r3
   2b7ca:	46bd      	mov	sp, r7
   2b7cc:	b008      	add	sp, #32
   2b7ce:	bd80      	pop	{r7, pc}
   2b7d0:	0003a698 	.word	0x0003a698

0002b7d4 <tcc_init>:
 */
enum status_code tcc_init(
		struct tcc_module *const module_inst,
		Tcc *const hw,
		const struct tcc_config *const config)
{
   2b7d4:	b590      	push	{r4, r7, lr}
   2b7d6:	b091      	sub	sp, #68	; 0x44
   2b7d8:	af00      	add	r7, sp, #0
   2b7da:	60f8      	str	r0, [r7, #12]
   2b7dc:	60b9      	str	r1, [r7, #8]
   2b7de:	607a      	str	r2, [r7, #4]
	Assert(hw);
	Assert(module_inst);
	Assert(config);

	/* TCC instance index */
	uint8_t module_index = _tcc_get_inst_index(hw);
   2b7e0:	233b      	movs	r3, #59	; 0x3b
   2b7e2:	18fc      	adds	r4, r7, r3
   2b7e4:	68bb      	ldr	r3, [r7, #8]
   2b7e6:	0018      	movs	r0, r3
   2b7e8:	4bc4      	ldr	r3, [pc, #784]	; (2bafc <tcc_init+0x328>)
   2b7ea:	4798      	blx	r3
   2b7ec:	0003      	movs	r3, r0
   2b7ee:	7023      	strb	r3, [r4, #0]

	/* Enable the user interface clock for TCC */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
   2b7f0:	233b      	movs	r3, #59	; 0x3b
   2b7f2:	18fb      	adds	r3, r7, r3
   2b7f4:	781a      	ldrb	r2, [r3, #0]
   2b7f6:	4bc2      	ldr	r3, [pc, #776]	; (2bb00 <tcc_init+0x32c>)
   2b7f8:	0092      	lsls	r2, r2, #2
   2b7fa:	58d3      	ldr	r3, [r2, r3]
   2b7fc:	0019      	movs	r1, r3
   2b7fe:	2002      	movs	r0, #2
   2b800:	4bc0      	ldr	r3, [pc, #768]	; (2bb04 <tcc_init+0x330>)
   2b802:	4798      	blx	r3
			_tcc_apbcmasks[module_index]);

	/* Check if it's enabled. */
	if (hw->CTRLA.reg & TCC_CTRLA_ENABLE) {
   2b804:	68bb      	ldr	r3, [r7, #8]
   2b806:	681b      	ldr	r3, [r3, #0]
   2b808:	2202      	movs	r2, #2
   2b80a:	4013      	ands	r3, r2
   2b80c:	d001      	beq.n	2b812 <tcc_init+0x3e>
		return STATUS_ERR_DENIED;
   2b80e:	231c      	movs	r3, #28
   2b810:	e1be      	b.n	2bb90 <tcc_init+0x3bc>
	}
	/* Check if it's resetting */
	if (hw->CTRLA.reg & TCC_CTRLA_SWRST) {
   2b812:	68bb      	ldr	r3, [r7, #8]
   2b814:	681b      	ldr	r3, [r3, #0]
   2b816:	2201      	movs	r2, #1
   2b818:	4013      	ands	r3, r2
   2b81a:	d001      	beq.n	2b820 <tcc_init+0x4c>
		return STATUS_ERR_DENIED;
   2b81c:	231c      	movs	r3, #28
   2b81e:	e1b7      	b.n	2bb90 <tcc_init+0x3bc>
	}

	enum status_code status;

	/* Check COUNT, PER, CCx */
	uint32_t count_max  = _tcc_maxs[module_index];
   2b820:	233b      	movs	r3, #59	; 0x3b
   2b822:	18fb      	adds	r3, r7, r3
   2b824:	781a      	ldrb	r2, [r3, #0]
   2b826:	4bb8      	ldr	r3, [pc, #736]	; (2bb08 <tcc_init+0x334>)
   2b828:	0092      	lsls	r2, r2, #2
   2b82a:	58d3      	ldr	r3, [r2, r3]
   2b82c:	637b      	str	r3, [r7, #52]	; 0x34

	/* Check all counter values */
	if ((config->counter.count > count_max)
   2b82e:	687b      	ldr	r3, [r7, #4]
   2b830:	681a      	ldr	r2, [r3, #0]
   2b832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2b834:	429a      	cmp	r2, r3
   2b836:	d804      	bhi.n	2b842 <tcc_init+0x6e>
		|| (config->counter.period > count_max)
   2b838:	687b      	ldr	r3, [r7, #4]
   2b83a:	685a      	ldr	r2, [r3, #4]
   2b83c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2b83e:	429a      	cmp	r2, r3
   2b840:	d901      	bls.n	2b846 <tcc_init+0x72>
		) {
		return STATUS_ERR_INVALID_ARG;
   2b842:	2317      	movs	r3, #23
   2b844:	e1a4      	b.n	2bb90 <tcc_init+0x3bc>
	}

	/* Check all channel values */
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2b846:	2300      	movs	r3, #0
   2b848:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b84a:	e00e      	b.n	2b86a <tcc_init+0x96>
		if ((config->compare.match[i] > count_max)
   2b84c:	687a      	ldr	r2, [r7, #4]
   2b84e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b850:	3306      	adds	r3, #6
   2b852:	009b      	lsls	r3, r3, #2
   2b854:	18d3      	adds	r3, r2, r3
   2b856:	3304      	adds	r3, #4
   2b858:	681a      	ldr	r2, [r3, #0]
   2b85a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2b85c:	429a      	cmp	r2, r3
   2b85e:	d901      	bls.n	2b864 <tcc_init+0x90>
			) {
			return STATUS_ERR_INVALID_ARG;
   2b860:	2317      	movs	r3, #23
   2b862:	e195      	b.n	2bb90 <tcc_init+0x3bc>
	for (i = 0; i < TCC_NUM_CHANNELS; i ++) {
   2b864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b866:	3301      	adds	r3, #1
   2b868:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b86a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b86c:	2b03      	cmp	r3, #3
   2b86e:	dded      	ble.n	2b84c <tcc_init+0x78>
		}
	}

	/* Check all outputs */
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2b870:	2300      	movs	r3, #0
   2b872:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b874:	e019      	b.n	2b8aa <tcc_init+0xd6>
		if (!config->pins.enable_wave_out_pin[i]) {
   2b876:	687a      	ldr	r2, [r7, #4]
   2b878:	2198      	movs	r1, #152	; 0x98
   2b87a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b87c:	18d3      	adds	r3, r2, r3
   2b87e:	185b      	adds	r3, r3, r1
   2b880:	781b      	ldrb	r3, [r3, #0]
   2b882:	2201      	movs	r2, #1
   2b884:	4053      	eors	r3, r2
   2b886:	b2db      	uxtb	r3, r3
   2b888:	2b00      	cmp	r3, #0
   2b88a:	d10a      	bne.n	2b8a2 <tcc_init+0xce>
			continue;
		}
		/* Output line is not supported */
		if (i >= _tcc_ow_nums[module_index]) {
   2b88c:	233b      	movs	r3, #59	; 0x3b
   2b88e:	18fb      	adds	r3, r7, r3
   2b890:	781b      	ldrb	r3, [r3, #0]
   2b892:	4a9e      	ldr	r2, [pc, #632]	; (2bb0c <tcc_init+0x338>)
   2b894:	5cd3      	ldrb	r3, [r2, r3]
   2b896:	001a      	movs	r2, r3
   2b898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b89a:	429a      	cmp	r2, r3
   2b89c:	dc02      	bgt.n	2b8a4 <tcc_init+0xd0>
			return STATUS_ERR_INVALID_ARG;
   2b89e:	2317      	movs	r3, #23
   2b8a0:	e176      	b.n	2bb90 <tcc_init+0x3bc>
			continue;
   2b8a2:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i < TCC_NUM_WAVE_OUTPUTS; i ++) {
   2b8a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b8a6:	3301      	adds	r3, #1
   2b8a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b8aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b8ac:	2b07      	cmp	r3, #7
   2b8ae:	dde2      	ble.n	2b876 <tcc_init+0xa2>
		}
	}

	/* CTRLA settings */
	uint32_t ctrla = 0;
   2b8b0:	2300      	movs	r3, #0
   2b8b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	status = _tcc_build_ctrla(module_index, config, &ctrla);
   2b8b4:	2333      	movs	r3, #51	; 0x33
   2b8b6:	18fc      	adds	r4, r7, r3
   2b8b8:	232c      	movs	r3, #44	; 0x2c
   2b8ba:	18fa      	adds	r2, r7, r3
   2b8bc:	6879      	ldr	r1, [r7, #4]
   2b8be:	233b      	movs	r3, #59	; 0x3b
   2b8c0:	18fb      	adds	r3, r7, r3
   2b8c2:	781b      	ldrb	r3, [r3, #0]
   2b8c4:	0018      	movs	r0, r3
   2b8c6:	4b92      	ldr	r3, [pc, #584]	; (2bb10 <tcc_init+0x33c>)
   2b8c8:	4798      	blx	r3
   2b8ca:	0003      	movs	r3, r0
   2b8cc:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2b8ce:	2333      	movs	r3, #51	; 0x33
   2b8d0:	18fb      	adds	r3, r7, r3
   2b8d2:	781b      	ldrb	r3, [r3, #0]
   2b8d4:	2b00      	cmp	r3, #0
   2b8d6:	d003      	beq.n	2b8e0 <tcc_init+0x10c>
		return status;
   2b8d8:	2333      	movs	r3, #51	; 0x33
   2b8da:	18fb      	adds	r3, r7, r3
   2b8dc:	781b      	ldrb	r3, [r3, #0]
   2b8de:	e157      	b.n	2bb90 <tcc_init+0x3bc>
	}

	/* CTRLB settings */
	uint8_t ctrlb;
	_tcc_build_ctrlb(module_index, config, &ctrlb);
   2b8e0:	232b      	movs	r3, #43	; 0x2b
   2b8e2:	18fa      	adds	r2, r7, r3
   2b8e4:	6879      	ldr	r1, [r7, #4]
   2b8e6:	233b      	movs	r3, #59	; 0x3b
   2b8e8:	18fb      	adds	r3, r7, r3
   2b8ea:	781b      	ldrb	r3, [r3, #0]
   2b8ec:	0018      	movs	r0, r3
   2b8ee:	4b89      	ldr	r3, [pc, #548]	; (2bb14 <tcc_init+0x340>)
   2b8f0:	4798      	blx	r3

	/* FAULTs settings */
	uint32_t faults[TCC_NUM_FAULTS];

	status = _tcc_build_faults(module_index, config, faults);
   2b8f2:	2333      	movs	r3, #51	; 0x33
   2b8f4:	18fc      	adds	r4, r7, r3
   2b8f6:	2320      	movs	r3, #32
   2b8f8:	18fa      	adds	r2, r7, r3
   2b8fa:	6879      	ldr	r1, [r7, #4]
   2b8fc:	233b      	movs	r3, #59	; 0x3b
   2b8fe:	18fb      	adds	r3, r7, r3
   2b900:	781b      	ldrb	r3, [r3, #0]
   2b902:	0018      	movs	r0, r3
   2b904:	4b84      	ldr	r3, [pc, #528]	; (2bb18 <tcc_init+0x344>)
   2b906:	4798      	blx	r3
   2b908:	0003      	movs	r3, r0
   2b90a:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2b90c:	2333      	movs	r3, #51	; 0x33
   2b90e:	18fb      	adds	r3, r7, r3
   2b910:	781b      	ldrb	r3, [r3, #0]
   2b912:	2b00      	cmp	r3, #0
   2b914:	d003      	beq.n	2b91e <tcc_init+0x14a>
		return status;
   2b916:	2333      	movs	r3, #51	; 0x33
   2b918:	18fb      	adds	r3, r7, r3
   2b91a:	781b      	ldrb	r3, [r3, #0]
   2b91c:	e138      	b.n	2bb90 <tcc_init+0x3bc>
	}

	/* DRVCTRL */
	uint32_t drvctrl = 0;
   2b91e:	2300      	movs	r3, #0
   2b920:	61fb      	str	r3, [r7, #28]

	status = _tcc_build_drvctrl(module_index, config, &drvctrl);
   2b922:	2333      	movs	r3, #51	; 0x33
   2b924:	18fc      	adds	r4, r7, r3
   2b926:	231c      	movs	r3, #28
   2b928:	18fa      	adds	r2, r7, r3
   2b92a:	6879      	ldr	r1, [r7, #4]
   2b92c:	233b      	movs	r3, #59	; 0x3b
   2b92e:	18fb      	adds	r3, r7, r3
   2b930:	781b      	ldrb	r3, [r3, #0]
   2b932:	0018      	movs	r0, r3
   2b934:	4b79      	ldr	r3, [pc, #484]	; (2bb1c <tcc_init+0x348>)
   2b936:	4798      	blx	r3
   2b938:	0003      	movs	r3, r0
   2b93a:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2b93c:	2333      	movs	r3, #51	; 0x33
   2b93e:	18fb      	adds	r3, r7, r3
   2b940:	781b      	ldrb	r3, [r3, #0]
   2b942:	2b00      	cmp	r3, #0
   2b944:	d003      	beq.n	2b94e <tcc_init+0x17a>
		return status;
   2b946:	2333      	movs	r3, #51	; 0x33
   2b948:	18fb      	adds	r3, r7, r3
   2b94a:	781b      	ldrb	r3, [r3, #0]
   2b94c:	e120      	b.n	2bb90 <tcc_init+0x3bc>
	}

	/* WAVE */
	uint32_t waves[1];

	status = _tcc_build_waves(module_index, config, waves);
   2b94e:	2333      	movs	r3, #51	; 0x33
   2b950:	18fc      	adds	r4, r7, r3
   2b952:	2318      	movs	r3, #24
   2b954:	18fa      	adds	r2, r7, r3
   2b956:	6879      	ldr	r1, [r7, #4]
   2b958:	233b      	movs	r3, #59	; 0x3b
   2b95a:	18fb      	adds	r3, r7, r3
   2b95c:	781b      	ldrb	r3, [r3, #0]
   2b95e:	0018      	movs	r0, r3
   2b960:	4b6f      	ldr	r3, [pc, #444]	; (2bb20 <tcc_init+0x34c>)
   2b962:	4798      	blx	r3
   2b964:	0003      	movs	r3, r0
   2b966:	7023      	strb	r3, [r4, #0]
	if (STATUS_OK != status) {
   2b968:	2333      	movs	r3, #51	; 0x33
   2b96a:	18fb      	adds	r3, r7, r3
   2b96c:	781b      	ldrb	r3, [r3, #0]
   2b96e:	2b00      	cmp	r3, #0
   2b970:	d003      	beq.n	2b97a <tcc_init+0x1a6>
		return status;
   2b972:	2333      	movs	r3, #51	; 0x33
   2b974:	18fb      	adds	r3, r7, r3
   2b976:	781b      	ldrb	r3, [r3, #0]
   2b978:	e10a      	b.n	2bb90 <tcc_init+0x3bc>
	}

	/* Initialize module */
#if TCC_ASYNC
	/* Initialize parameters */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2b97a:	2300      	movs	r3, #0
   2b97c:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b97e:	e009      	b.n	2b994 <tcc_init+0x1c0>
		module_inst->callback[i] = NULL;
   2b980:	68fa      	ldr	r2, [r7, #12]
   2b982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b984:	009b      	lsls	r3, r3, #2
   2b986:	18d3      	adds	r3, r2, r3
   2b988:	3304      	adds	r3, #4
   2b98a:	2200      	movs	r2, #0
   2b98c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2b98e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b990:	3301      	adds	r3, #1
   2b992:	63fb      	str	r3, [r7, #60]	; 0x3c
   2b994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2b996:	2b0b      	cmp	r3, #11
   2b998:	ddf2      	ble.n	2b980 <tcc_init+0x1ac>
	}
	module_inst->register_callback_mask = 0;
   2b99a:	68fb      	ldr	r3, [r7, #12]
   2b99c:	2200      	movs	r2, #0
   2b99e:	635a      	str	r2, [r3, #52]	; 0x34
	module_inst->enable_callback_mask = 0;
   2b9a0:	68fb      	ldr	r3, [r7, #12]
   2b9a2:	2200      	movs	r2, #0
   2b9a4:	639a      	str	r2, [r3, #56]	; 0x38
	_tcc_instances[module_index] = module_inst;
   2b9a6:	233b      	movs	r3, #59	; 0x3b
   2b9a8:	18fb      	adds	r3, r7, r3
   2b9aa:	781a      	ldrb	r2, [r3, #0]
   2b9ac:	4b5d      	ldr	r3, [pc, #372]	; (2bb24 <tcc_init+0x350>)
   2b9ae:	0092      	lsls	r2, r2, #2
   2b9b0:	68f9      	ldr	r1, [r7, #12]
   2b9b2:	50d1      	str	r1, [r2, r3]
#endif

	module_inst->hw = hw;
   2b9b4:	68fb      	ldr	r3, [r7, #12]
   2b9b6:	68ba      	ldr	r2, [r7, #8]
   2b9b8:	601a      	str	r2, [r3, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
   2b9ba:	687b      	ldr	r3, [r7, #4]
   2b9bc:	22a0      	movs	r2, #160	; 0xa0
   2b9be:	5c99      	ldrb	r1, [r3, r2]
   2b9c0:	68fb      	ldr	r3, [r7, #12]
   2b9c2:	223c      	movs	r2, #60	; 0x3c
   2b9c4:	5499      	strb	r1, [r3, r2]

	/* Setup clock for module */
	struct system_gclk_chan_config gclk_chan_config;
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
   2b9c6:	2314      	movs	r3, #20
   2b9c8:	18fb      	adds	r3, r7, r3
   2b9ca:	0018      	movs	r0, r3
   2b9cc:	4b56      	ldr	r3, [pc, #344]	; (2bb28 <tcc_init+0x354>)
   2b9ce:	4798      	blx	r3
	gclk_chan_config.source_generator = config->counter.clock_source;
   2b9d0:	687b      	ldr	r3, [r7, #4]
   2b9d2:	7a9a      	ldrb	r2, [r3, #10]
   2b9d4:	2314      	movs	r3, #20
   2b9d6:	18fb      	adds	r3, r7, r3
   2b9d8:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(_tcc_gclk_ids[module_index], &gclk_chan_config);
   2b9da:	233b      	movs	r3, #59	; 0x3b
   2b9dc:	18fb      	adds	r3, r7, r3
   2b9de:	781b      	ldrb	r3, [r3, #0]
   2b9e0:	4a52      	ldr	r2, [pc, #328]	; (2bb2c <tcc_init+0x358>)
   2b9e2:	5cd3      	ldrb	r3, [r2, r3]
   2b9e4:	2214      	movs	r2, #20
   2b9e6:	18ba      	adds	r2, r7, r2
   2b9e8:	0011      	movs	r1, r2
   2b9ea:	0018      	movs	r0, r3
   2b9ec:	4b50      	ldr	r3, [pc, #320]	; (2bb30 <tcc_init+0x35c>)
   2b9ee:	4798      	blx	r3
	system_gclk_chan_enable(_tcc_gclk_ids[module_index]);
   2b9f0:	233b      	movs	r3, #59	; 0x3b
   2b9f2:	18fb      	adds	r3, r7, r3
   2b9f4:	781b      	ldrb	r3, [r3, #0]
   2b9f6:	4a4d      	ldr	r2, [pc, #308]	; (2bb2c <tcc_init+0x358>)
   2b9f8:	5cd3      	ldrb	r3, [r2, r3]
   2b9fa:	0018      	movs	r0, r3
   2b9fc:	4b4d      	ldr	r3, [pc, #308]	; (2bb34 <tcc_init+0x360>)
   2b9fe:	4798      	blx	r3

	/* Initialize pins */
	struct system_pinmux_config pin_config;
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2ba00:	2300      	movs	r3, #0
   2ba02:	63fb      	str	r3, [r7, #60]	; 0x3c
   2ba04:	e02d      	b.n	2ba62 <tcc_init+0x28e>
		if (!config->pins.enable_wave_out_pin[i]) {
   2ba06:	687a      	ldr	r2, [r7, #4]
   2ba08:	2198      	movs	r1, #152	; 0x98
   2ba0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ba0c:	18d3      	adds	r3, r2, r3
   2ba0e:	185b      	adds	r3, r3, r1
   2ba10:	781b      	ldrb	r3, [r3, #0]
   2ba12:	2201      	movs	r2, #1
   2ba14:	4053      	eors	r3, r2
   2ba16:	b2db      	uxtb	r3, r3
   2ba18:	2b00      	cmp	r3, #0
   2ba1a:	d11e      	bne.n	2ba5a <tcc_init+0x286>
			continue;
		}

		system_pinmux_get_config_defaults(&pin_config);
   2ba1c:	2310      	movs	r3, #16
   2ba1e:	18fb      	adds	r3, r7, r3
   2ba20:	0018      	movs	r0, r3
   2ba22:	4b45      	ldr	r3, [pc, #276]	; (2bb38 <tcc_init+0x364>)
   2ba24:	4798      	blx	r3
		pin_config.mux_position = config->pins.wave_out_pin_mux[i];
   2ba26:	687b      	ldr	r3, [r7, #4]
   2ba28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2ba2a:	321e      	adds	r2, #30
   2ba2c:	0092      	lsls	r2, r2, #2
   2ba2e:	58d3      	ldr	r3, [r2, r3]
   2ba30:	b2da      	uxtb	r2, r3
   2ba32:	2310      	movs	r3, #16
   2ba34:	18fb      	adds	r3, r7, r3
   2ba36:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
   2ba38:	2310      	movs	r3, #16
   2ba3a:	18fb      	adds	r3, r7, r3
   2ba3c:	2201      	movs	r2, #1
   2ba3e:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pins.wave_out_pin[i], &pin_config);
   2ba40:	687b      	ldr	r3, [r7, #4]
   2ba42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2ba44:	3216      	adds	r2, #22
   2ba46:	0092      	lsls	r2, r2, #2
   2ba48:	58d3      	ldr	r3, [r2, r3]
		system_pinmux_pin_set_config(
   2ba4a:	b2db      	uxtb	r3, r3
   2ba4c:	2210      	movs	r2, #16
   2ba4e:	18ba      	adds	r2, r7, r2
   2ba50:	0011      	movs	r1, r2
   2ba52:	0018      	movs	r0, r3
   2ba54:	4b39      	ldr	r3, [pc, #228]	; (2bb3c <tcc_init+0x368>)
   2ba56:	4798      	blx	r3
   2ba58:	e000      	b.n	2ba5c <tcc_init+0x288>
			continue;
   2ba5a:	46c0      	nop			; (mov r8, r8)
	for (i = 0; i <  _tcc_ow_nums[module_index]; i ++) {
   2ba5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ba5e:	3301      	adds	r3, #1
   2ba60:	63fb      	str	r3, [r7, #60]	; 0x3c
   2ba62:	233b      	movs	r3, #59	; 0x3b
   2ba64:	18fb      	adds	r3, r7, r3
   2ba66:	781b      	ldrb	r3, [r3, #0]
   2ba68:	4a28      	ldr	r2, [pc, #160]	; (2bb0c <tcc_init+0x338>)
   2ba6a:	5cd3      	ldrb	r3, [r2, r3]
   2ba6c:	001a      	movs	r2, r3
   2ba6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2ba70:	429a      	cmp	r2, r3
   2ba72:	dcc8      	bgt.n	2ba06 <tcc_init+0x232>
	}

	/* Write to registers */

	hw->CTRLA.reg = ctrla;
   2ba74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2ba76:	68bb      	ldr	r3, [r7, #8]
   2ba78:	601a      	str	r2, [r3, #0]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2ba7a:	46c0      	nop			; (mov r8, r8)
   2ba7c:	68bb      	ldr	r3, [r7, #8]
   2ba7e:	689b      	ldr	r3, [r3, #8]
   2ba80:	2204      	movs	r2, #4
   2ba82:	4013      	ands	r3, r2
   2ba84:	d1fa      	bne.n	2ba7c <tcc_init+0x2a8>
		/* Wait for sync */
	}

	hw->CTRLBCLR.reg = 0xFF;
   2ba86:	68bb      	ldr	r3, [r7, #8]
   2ba88:	22ff      	movs	r2, #255	; 0xff
   2ba8a:	711a      	strb	r2, [r3, #4]
	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_CTRLB) {
   2ba8c:	46c0      	nop			; (mov r8, r8)
   2ba8e:	68bb      	ldr	r3, [r7, #8]
   2ba90:	689b      	ldr	r3, [r3, #8]
   2ba92:	2204      	movs	r2, #4
   2ba94:	4013      	ands	r3, r2
   2ba96:	d1fa      	bne.n	2ba8e <tcc_init+0x2ba>
		/* Wait for sync */
	}
	hw->CTRLBSET.reg = ctrlb;
   2ba98:	232b      	movs	r3, #43	; 0x2b
   2ba9a:	18fb      	adds	r3, r7, r3
   2ba9c:	781a      	ldrb	r2, [r3, #0]
   2ba9e:	68bb      	ldr	r3, [r7, #8]
   2baa0:	715a      	strb	r2, [r3, #5]

	hw->FCTRLA.reg = faults[0];
   2baa2:	2320      	movs	r3, #32
   2baa4:	18fb      	adds	r3, r7, r3
   2baa6:	681a      	ldr	r2, [r3, #0]
   2baa8:	68bb      	ldr	r3, [r7, #8]
   2baaa:	60da      	str	r2, [r3, #12]
	hw->FCTRLB.reg = faults[1];
   2baac:	2320      	movs	r3, #32
   2baae:	18fb      	adds	r3, r7, r3
   2bab0:	685a      	ldr	r2, [r3, #4]
   2bab2:	68bb      	ldr	r3, [r7, #8]
   2bab4:	611a      	str	r2, [r3, #16]

	hw->DRVCTRL.reg = drvctrl;
   2bab6:	69fa      	ldr	r2, [r7, #28]
   2bab8:	68bb      	ldr	r3, [r7, #8]
   2baba:	619a      	str	r2, [r3, #24]

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_WAVE | TCC_SYNCBUSY_WAVEB)) {
   2babc:	46c0      	nop			; (mov r8, r8)
   2babe:	68bb      	ldr	r3, [r7, #8]
   2bac0:	689b      	ldr	r3, [r3, #8]
   2bac2:	4a1f      	ldr	r2, [pc, #124]	; (2bb40 <tcc_init+0x36c>)
   2bac4:	4013      	ands	r3, r2
   2bac6:	d1fa      	bne.n	2babe <tcc_init+0x2ea>
		/* Wait for sync */
	}
#endif
	hw->WAVE.reg = waves[0];
   2bac8:	69ba      	ldr	r2, [r7, #24]
   2baca:	68bb      	ldr	r3, [r7, #8]
   2bacc:	63da      	str	r2, [r3, #60]	; 0x3c

	while (hw->SYNCBUSY.reg & TCC_SYNCBUSY_COUNT) {
   2bace:	46c0      	nop			; (mov r8, r8)
   2bad0:	68bb      	ldr	r3, [r7, #8]
   2bad2:	689b      	ldr	r3, [r3, #8]
   2bad4:	2210      	movs	r2, #16
   2bad6:	4013      	ands	r3, r2
   2bad8:	d1fa      	bne.n	2bad0 <tcc_init+0x2fc>
		/* Wait for sync */
	}
	hw->COUNT.reg = config->counter.count;
   2bada:	687b      	ldr	r3, [r7, #4]
   2badc:	681a      	ldr	r2, [r3, #0]
   2bade:	68bb      	ldr	r3, [r7, #8]
   2bae0:	635a      	str	r2, [r3, #52]	; 0x34

#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
	while (hw->SYNCBUSY.reg & (TCC_SYNCBUSY_PER | TCC_SYNCBUSY_PERB)) {
   2bae2:	46c0      	nop			; (mov r8, r8)
   2bae4:	68bb      	ldr	r3, [r7, #8]
   2bae6:	689b      	ldr	r3, [r3, #8]
   2bae8:	4a16      	ldr	r2, [pc, #88]	; (2bb44 <tcc_init+0x370>)
   2baea:	4013      	ands	r3, r2
   2baec:	d1fa      	bne.n	2bae4 <tcc_init+0x310>
		/* Wait for sync */
	}
#endif
	hw->PER.reg = (config->counter.period);
   2baee:	687b      	ldr	r3, [r7, #4]
   2baf0:	685a      	ldr	r2, [r3, #4]
   2baf2:	68bb      	ldr	r3, [r7, #8]
   2baf4:	641a      	str	r2, [r3, #64]	; 0x40

	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2baf6:	2300      	movs	r3, #0
   2baf8:	63fb      	str	r3, [r7, #60]	; 0x3c
   2bafa:	e03f      	b.n	2bb7c <tcc_init+0x3a8>
   2bafc:	0002b13d 	.word	0x0002b13d
   2bb00:	0003a680 	.word	0x0003a680
   2bb04:	0002b0b9 	.word	0x0002b0b9
   2bb08:	0003a68c 	.word	0x0003a68c
   2bb0c:	0003a69c 	.word	0x0003a69c
   2bb10:	0002b449 	.word	0x0002b449
   2bb14:	0002b4ed 	.word	0x0002b4ed
   2bb18:	0002b549 	.word	0x0002b549
   2bb1c:	0002b665 	.word	0x0002b665
   2bb20:	0002b73d 	.word	0x0002b73d
   2bb24:	20005c74 	.word	0x20005c74
   2bb28:	0002b0a1 	.word	0x0002b0a1
   2bb2c:	0003a67c 	.word	0x0003a67c
   2bb30:	0002acb9 	.word	0x0002acb9
   2bb34:	0002acfd 	.word	0x0002acfd
   2bb38:	0002b115 	.word	0x0002b115
   2bb3c:	0002b019 	.word	0x0002b019
   2bb40:	00020040 	.word	0x00020040
   2bb44:	00040080 	.word	0x00040080
#if (!SAML21) && (!SAMC20) && (!SAMC21) && (!SAML22) && (!SAMR30)
		while (hw->SYNCBUSY.reg & (
   2bb48:	46c0      	nop			; (mov r8, r8)
   2bb4a:	68bb      	ldr	r3, [r7, #8]
   2bb4c:	689b      	ldr	r3, [r3, #8]
			(TCC_SYNCBUSY_CC0 | TCC_SYNCBUSY_CCB0) << i)) {
   2bb4e:	4912      	ldr	r1, [pc, #72]	; (2bb98 <tcc_init+0x3c4>)
   2bb50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2bb52:	4091      	lsls	r1, r2
   2bb54:	000a      	movs	r2, r1
		while (hw->SYNCBUSY.reg & (
   2bb56:	4013      	ands	r3, r2
   2bb58:	d1f7      	bne.n	2bb4a <tcc_init+0x376>
			/* Wait for sync */
		}
#endif
		hw->CC[i].reg = (config->compare.match[i]);
   2bb5a:	687a      	ldr	r2, [r7, #4]
   2bb5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2bb5e:	3306      	adds	r3, #6
   2bb60:	009b      	lsls	r3, r3, #2
   2bb62:	18d3      	adds	r3, r2, r3
   2bb64:	3304      	adds	r3, #4
   2bb66:	681a      	ldr	r2, [r3, #0]
   2bb68:	68b9      	ldr	r1, [r7, #8]
   2bb6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2bb6c:	3310      	adds	r3, #16
   2bb6e:	009b      	lsls	r3, r3, #2
   2bb70:	18cb      	adds	r3, r1, r3
   2bb72:	3304      	adds	r3, #4
   2bb74:	601a      	str	r2, [r3, #0]
	for (i = 0; i <  _tcc_cc_nums[module_index]; i ++) {
   2bb76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2bb78:	3301      	adds	r3, #1
   2bb7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   2bb7c:	233b      	movs	r3, #59	; 0x3b
   2bb7e:	18fb      	adds	r3, r7, r3
   2bb80:	781b      	ldrb	r3, [r3, #0]
   2bb82:	4a06      	ldr	r2, [pc, #24]	; (2bb9c <tcc_init+0x3c8>)
   2bb84:	5cd3      	ldrb	r3, [r2, r3]
   2bb86:	001a      	movs	r2, r3
   2bb88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2bb8a:	429a      	cmp	r2, r3
   2bb8c:	dcdc      	bgt.n	2bb48 <tcc_init+0x374>
	}

	return STATUS_OK;
   2bb8e:	2300      	movs	r3, #0
}
   2bb90:	0018      	movs	r0, r3
   2bb92:	46bd      	mov	sp, r7
   2bb94:	b011      	add	sp, #68	; 0x44
   2bb96:	bd90      	pop	{r4, r7, pc}
   2bb98:	00080100 	.word	0x00080100
   2bb9c:	0003a698 	.word	0x0003a698

0002bba0 <system_interrupt_enable>:
{
   2bba0:	b580      	push	{r7, lr}
   2bba2:	b082      	sub	sp, #8
   2bba4:	af00      	add	r7, sp, #0
   2bba6:	0002      	movs	r2, r0
   2bba8:	1dfb      	adds	r3, r7, #7
   2bbaa:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
   2bbac:	4b06      	ldr	r3, [pc, #24]	; (2bbc8 <system_interrupt_enable+0x28>)
   2bbae:	1dfa      	adds	r2, r7, #7
   2bbb0:	7812      	ldrb	r2, [r2, #0]
   2bbb2:	0011      	movs	r1, r2
   2bbb4:	221f      	movs	r2, #31
   2bbb6:	400a      	ands	r2, r1
   2bbb8:	2101      	movs	r1, #1
   2bbba:	4091      	lsls	r1, r2
   2bbbc:	000a      	movs	r2, r1
   2bbbe:	601a      	str	r2, [r3, #0]
}
   2bbc0:	46c0      	nop			; (mov r8, r8)
   2bbc2:	46bd      	mov	sp, r7
   2bbc4:	b002      	add	sp, #8
   2bbc6:	bd80      	pop	{r7, pc}
   2bbc8:	e000e100 	.word	0xe000e100

0002bbcc <_tcc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TCC module instance.
 */
static enum system_interrupt_vector _tcc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
   2bbcc:	b580      	push	{r7, lr}
   2bbce:	b082      	sub	sp, #8
   2bbd0:	af00      	add	r7, sp, #0
   2bbd2:	6078      	str	r0, [r7, #4]
	static uint8_t tcc_interrupt_vectors[TCC_INST_NUM] = {
		MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_VECT_NUM, 0)
	};

	return (enum system_interrupt_vector)tcc_interrupt_vectors[inst_num];
   2bbd4:	4a04      	ldr	r2, [pc, #16]	; (2bbe8 <_tcc_interrupt_get_interrupt_vector+0x1c>)
   2bbd6:	687b      	ldr	r3, [r7, #4]
   2bbd8:	18d3      	adds	r3, r2, r3
   2bbda:	781b      	ldrb	r3, [r3, #0]
   2bbdc:	b25b      	sxtb	r3, r3
}
   2bbde:	0018      	movs	r0, r3
   2bbe0:	46bd      	mov	sp, r7
   2bbe2:	b002      	add	sp, #8
   2bbe4:	bd80      	pop	{r7, pc}
   2bbe6:	46c0      	nop			; (mov r8, r8)
   2bbe8:	20000128 	.word	0x20000128

0002bbec <tcc_register_callback>:
 */
enum status_code tcc_register_callback(
		struct tcc_module *const module,
		tcc_callback_t callback_func,
		const enum tcc_callback callback_type)
{
   2bbec:	b580      	push	{r7, lr}
   2bbee:	b084      	sub	sp, #16
   2bbf0:	af00      	add	r7, sp, #0
   2bbf2:	60f8      	str	r0, [r7, #12]
   2bbf4:	60b9      	str	r1, [r7, #8]
   2bbf6:	1dfb      	adds	r3, r7, #7
   2bbf8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
   2bbfa:	1dfb      	adds	r3, r7, #7
   2bbfc:	781b      	ldrb	r3, [r3, #0]
   2bbfe:	68fa      	ldr	r2, [r7, #12]
   2bc00:	009b      	lsls	r3, r3, #2
   2bc02:	18d3      	adds	r3, r2, r3
   2bc04:	3304      	adds	r3, #4
   2bc06:	68ba      	ldr	r2, [r7, #8]
   2bc08:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module->register_callback_mask |= _tcc_intflag[callback_type];
   2bc0a:	68fb      	ldr	r3, [r7, #12]
   2bc0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2bc0e:	1dfb      	adds	r3, r7, #7
   2bc10:	7819      	ldrb	r1, [r3, #0]
   2bc12:	4b05      	ldr	r3, [pc, #20]	; (2bc28 <tcc_register_callback+0x3c>)
   2bc14:	0089      	lsls	r1, r1, #2
   2bc16:	58cb      	ldr	r3, [r1, r3]
   2bc18:	431a      	orrs	r2, r3
   2bc1a:	68fb      	ldr	r3, [r7, #12]
   2bc1c:	635a      	str	r2, [r3, #52]	; 0x34

	return STATUS_OK;
   2bc1e:	2300      	movs	r3, #0
}
   2bc20:	0018      	movs	r0, r3
   2bc22:	46bd      	mov	sp, r7
   2bc24:	b004      	add	sp, #16
   2bc26:	bd80      	pop	{r7, pc}
   2bc28:	0003a6a0 	.word	0x0003a6a0

0002bc2c <tcc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
void tcc_enable_callback(
		struct tcc_module *const module,
		const enum tcc_callback callback_type)
{
   2bc2c:	b580      	push	{r7, lr}
   2bc2e:	b082      	sub	sp, #8
   2bc30:	af00      	add	r7, sp, #0
   2bc32:	6078      	str	r0, [r7, #4]
   2bc34:	000a      	movs	r2, r1
   2bc36:	1cfb      	adds	r3, r7, #3
   2bc38:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);

	/* Enable interrupts for this TCC module */
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
			_tcc_get_inst_index(module->hw)));
   2bc3a:	687b      	ldr	r3, [r7, #4]
   2bc3c:	681b      	ldr	r3, [r3, #0]
   2bc3e:	0018      	movs	r0, r3
   2bc40:	4b0f      	ldr	r3, [pc, #60]	; (2bc80 <tcc_enable_callback+0x54>)
   2bc42:	4798      	blx	r3
   2bc44:	0003      	movs	r3, r0
	system_interrupt_enable(_tcc_interrupt_get_interrupt_vector(
   2bc46:	0018      	movs	r0, r3
   2bc48:	4b0e      	ldr	r3, [pc, #56]	; (2bc84 <tcc_enable_callback+0x58>)
   2bc4a:	4798      	blx	r3
   2bc4c:	0003      	movs	r3, r0
   2bc4e:	0018      	movs	r0, r3
   2bc50:	4b0d      	ldr	r3, [pc, #52]	; (2bc88 <tcc_enable_callback+0x5c>)
   2bc52:	4798      	blx	r3

	/* Enable channel or other callbacks */
	module->enable_callback_mask |= _tcc_intflag[callback_type];
   2bc54:	687b      	ldr	r3, [r7, #4]
   2bc56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   2bc58:	1cfb      	adds	r3, r7, #3
   2bc5a:	7819      	ldrb	r1, [r3, #0]
   2bc5c:	4b0b      	ldr	r3, [pc, #44]	; (2bc8c <tcc_enable_callback+0x60>)
   2bc5e:	0089      	lsls	r1, r1, #2
   2bc60:	58cb      	ldr	r3, [r1, r3]
   2bc62:	431a      	orrs	r2, r3
   2bc64:	687b      	ldr	r3, [r7, #4]
   2bc66:	639a      	str	r2, [r3, #56]	; 0x38
	module->hw->INTENSET.reg = _tcc_intflag[callback_type];
   2bc68:	687b      	ldr	r3, [r7, #4]
   2bc6a:	681b      	ldr	r3, [r3, #0]
   2bc6c:	1cfa      	adds	r2, r7, #3
   2bc6e:	7811      	ldrb	r1, [r2, #0]
   2bc70:	4a06      	ldr	r2, [pc, #24]	; (2bc8c <tcc_enable_callback+0x60>)
   2bc72:	0089      	lsls	r1, r1, #2
   2bc74:	588a      	ldr	r2, [r1, r2]
   2bc76:	629a      	str	r2, [r3, #40]	; 0x28
}
   2bc78:	46c0      	nop			; (mov r8, r8)
   2bc7a:	46bd      	mov	sp, r7
   2bc7c:	b002      	add	sp, #8
   2bc7e:	bd80      	pop	{r7, pc}
   2bc80:	0002b13d 	.word	0x0002b13d
   2bc84:	0002bbcd 	.word	0x0002bbcd
   2bc88:	0002bba1 	.word	0x0002bba1
   2bc8c:	0003a6a0 	.word	0x0003a6a0

0002bc90 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
   2bc90:	b580      	push	{r7, lr}
   2bc92:	af00      	add	r7, sp, #0
   2bc94:	2000      	movs	r0, #0
   2bc96:	4b02      	ldr	r3, [pc, #8]	; (2bca0 <TCC0_Handler+0x10>)
   2bc98:	4798      	blx	r3
   2bc9a:	46c0      	nop			; (mov r8, r8)
   2bc9c:	46bd      	mov	sp, r7
   2bc9e:	bd80      	pop	{r7, pc}
   2bca0:	0002bccd 	.word	0x0002bccd

0002bca4 <TCC1_Handler>:
   2bca4:	b580      	push	{r7, lr}
   2bca6:	af00      	add	r7, sp, #0
   2bca8:	2001      	movs	r0, #1
   2bcaa:	4b02      	ldr	r3, [pc, #8]	; (2bcb4 <TCC1_Handler+0x10>)
   2bcac:	4798      	blx	r3
   2bcae:	46c0      	nop			; (mov r8, r8)
   2bcb0:	46bd      	mov	sp, r7
   2bcb2:	bd80      	pop	{r7, pc}
   2bcb4:	0002bccd 	.word	0x0002bccd

0002bcb8 <TCC2_Handler>:
   2bcb8:	b580      	push	{r7, lr}
   2bcba:	af00      	add	r7, sp, #0
   2bcbc:	2002      	movs	r0, #2
   2bcbe:	4b02      	ldr	r3, [pc, #8]	; (2bcc8 <TCC2_Handler+0x10>)
   2bcc0:	4798      	blx	r3
   2bcc2:	46c0      	nop			; (mov r8, r8)
   2bcc4:	46bd      	mov	sp, r7
   2bcc6:	bd80      	pop	{r7, pc}
   2bcc8:	0002bccd 	.word	0x0002bccd

0002bccc <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
   2bccc:	b580      	push	{r7, lr}
   2bcce:	b086      	sub	sp, #24
   2bcd0:	af00      	add	r7, sp, #0
   2bcd2:	0002      	movs	r2, r0
   2bcd4:	1dfb      	adds	r3, r7, #7
   2bcd6:	701a      	strb	r2, [r3, #0]
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
   2bcd8:	1dfb      	adds	r3, r7, #7
   2bcda:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
   2bcdc:	4b18      	ldr	r3, [pc, #96]	; (2bd40 <_tcc_interrupt_handler+0x74>)
   2bcde:	0092      	lsls	r2, r2, #2
   2bce0:	58d3      	ldr	r3, [r2, r3]
   2bce2:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2bce4:	693b      	ldr	r3, [r7, #16]
   2bce6:	681b      	ldr	r3, [r3, #0]
   2bce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
   2bcea:	693b      	ldr	r3, [r7, #16]
   2bcec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2bcee:	401a      	ands	r2, r3
			module->enable_callback_mask);
   2bcf0:	693b      	ldr	r3, [r7, #16]
   2bcf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
   2bcf4:	4013      	ands	r3, r2
   2bcf6:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2bcf8:	2300      	movs	r3, #0
   2bcfa:	617b      	str	r3, [r7, #20]
   2bcfc:	e019      	b.n	2bd32 <_tcc_interrupt_handler+0x66>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
   2bcfe:	4b11      	ldr	r3, [pc, #68]	; (2bd44 <_tcc_interrupt_handler+0x78>)
   2bd00:	697a      	ldr	r2, [r7, #20]
   2bd02:	0092      	lsls	r2, r2, #2
   2bd04:	58d3      	ldr	r3, [r2, r3]
   2bd06:	68fa      	ldr	r2, [r7, #12]
   2bd08:	4013      	ands	r3, r2
   2bd0a:	d00f      	beq.n	2bd2c <_tcc_interrupt_handler+0x60>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
   2bd0c:	693a      	ldr	r2, [r7, #16]
   2bd0e:	697b      	ldr	r3, [r7, #20]
   2bd10:	009b      	lsls	r3, r3, #2
   2bd12:	18d3      	adds	r3, r2, r3
   2bd14:	3304      	adds	r3, #4
   2bd16:	681b      	ldr	r3, [r3, #0]
   2bd18:	693a      	ldr	r2, [r7, #16]
   2bd1a:	0010      	movs	r0, r2
   2bd1c:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
   2bd1e:	693b      	ldr	r3, [r7, #16]
   2bd20:	681b      	ldr	r3, [r3, #0]
   2bd22:	4a08      	ldr	r2, [pc, #32]	; (2bd44 <_tcc_interrupt_handler+0x78>)
   2bd24:	6979      	ldr	r1, [r7, #20]
   2bd26:	0089      	lsls	r1, r1, #2
   2bd28:	588a      	ldr	r2, [r1, r2]
   2bd2a:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
   2bd2c:	697b      	ldr	r3, [r7, #20]
   2bd2e:	3301      	adds	r3, #1
   2bd30:	617b      	str	r3, [r7, #20]
   2bd32:	697b      	ldr	r3, [r7, #20]
   2bd34:	2b0b      	cmp	r3, #11
   2bd36:	dde2      	ble.n	2bcfe <_tcc_interrupt_handler+0x32>
		}
	}
}
   2bd38:	46c0      	nop			; (mov r8, r8)
   2bd3a:	46bd      	mov	sp, r7
   2bd3c:	b006      	add	sp, #24
   2bd3e:	bd80      	pop	{r7, pc}
   2bd40:	20005c74 	.word	0x20005c74
   2bd44:	0003a6a0 	.word	0x0003a6a0

0002bd48 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   2bd48:	b580      	push	{r7, lr}
   2bd4a:	b082      	sub	sp, #8
   2bd4c:	af00      	add	r7, sp, #0
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
   2bd4e:	4b2f      	ldr	r3, [pc, #188]	; (2be0c <Reset_Handler+0xc4>)
   2bd50:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
   2bd52:	4b2f      	ldr	r3, [pc, #188]	; (2be10 <Reset_Handler+0xc8>)
   2bd54:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
   2bd56:	687a      	ldr	r2, [r7, #4]
   2bd58:	683b      	ldr	r3, [r7, #0]
   2bd5a:	429a      	cmp	r2, r3
   2bd5c:	d00c      	beq.n	2bd78 <Reset_Handler+0x30>
                for (; pDest < &_erelocate;) {
   2bd5e:	e007      	b.n	2bd70 <Reset_Handler+0x28>
                        *pDest++ = *pSrc++;
   2bd60:	683b      	ldr	r3, [r7, #0]
   2bd62:	1d1a      	adds	r2, r3, #4
   2bd64:	603a      	str	r2, [r7, #0]
   2bd66:	687a      	ldr	r2, [r7, #4]
   2bd68:	1d11      	adds	r1, r2, #4
   2bd6a:	6079      	str	r1, [r7, #4]
   2bd6c:	6812      	ldr	r2, [r2, #0]
   2bd6e:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
   2bd70:	683a      	ldr	r2, [r7, #0]
   2bd72:	4b28      	ldr	r3, [pc, #160]	; (2be14 <Reset_Handler+0xcc>)
   2bd74:	429a      	cmp	r2, r3
   2bd76:	d3f3      	bcc.n	2bd60 <Reset_Handler+0x18>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
   2bd78:	4b27      	ldr	r3, [pc, #156]	; (2be18 <Reset_Handler+0xd0>)
   2bd7a:	603b      	str	r3, [r7, #0]
   2bd7c:	e004      	b.n	2bd88 <Reset_Handler+0x40>
                *pDest++ = 0;
   2bd7e:	683b      	ldr	r3, [r7, #0]
   2bd80:	1d1a      	adds	r2, r3, #4
   2bd82:	603a      	str	r2, [r7, #0]
   2bd84:	2200      	movs	r2, #0
   2bd86:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
   2bd88:	683a      	ldr	r2, [r7, #0]
   2bd8a:	4b24      	ldr	r3, [pc, #144]	; (2be1c <Reset_Handler+0xd4>)
   2bd8c:	429a      	cmp	r2, r3
   2bd8e:	d3f6      	bcc.n	2bd7e <Reset_Handler+0x36>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
   2bd90:	4b23      	ldr	r3, [pc, #140]	; (2be20 <Reset_Handler+0xd8>)
   2bd92:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   2bd94:	4b23      	ldr	r3, [pc, #140]	; (2be24 <Reset_Handler+0xdc>)
   2bd96:	687a      	ldr	r2, [r7, #4]
   2bd98:	21ff      	movs	r1, #255	; 0xff
   2bd9a:	438a      	bics	r2, r1
   2bd9c:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
   2bd9e:	4a22      	ldr	r2, [pc, #136]	; (2be28 <Reset_Handler+0xe0>)
   2bda0:	2390      	movs	r3, #144	; 0x90
   2bda2:	005b      	lsls	r3, r3, #1
   2bda4:	2102      	movs	r1, #2
   2bda6:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
   2bda8:	4a20      	ldr	r2, [pc, #128]	; (2be2c <Reset_Handler+0xe4>)
   2bdaa:	78d3      	ldrb	r3, [r2, #3]
   2bdac:	2103      	movs	r1, #3
   2bdae:	438b      	bics	r3, r1
   2bdb0:	1c19      	adds	r1, r3, #0
   2bdb2:	2302      	movs	r3, #2
   2bdb4:	430b      	orrs	r3, r1
   2bdb6:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
   2bdb8:	4a1c      	ldr	r2, [pc, #112]	; (2be2c <Reset_Handler+0xe4>)
   2bdba:	78d3      	ldrb	r3, [r2, #3]
   2bdbc:	210c      	movs	r1, #12
   2bdbe:	438b      	bics	r3, r1
   2bdc0:	1c19      	adds	r1, r3, #0
   2bdc2:	2308      	movs	r3, #8
   2bdc4:	430b      	orrs	r3, r1
   2bdc6:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
   2bdc8:	4a19      	ldr	r2, [pc, #100]	; (2be30 <Reset_Handler+0xe8>)
   2bdca:	7b93      	ldrb	r3, [r2, #14]
   2bdcc:	2130      	movs	r1, #48	; 0x30
   2bdce:	438b      	bics	r3, r1
   2bdd0:	1c19      	adds	r1, r3, #0
   2bdd2:	2320      	movs	r3, #32
   2bdd4:	430b      	orrs	r3, r1
   2bdd6:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
   2bdd8:	4a15      	ldr	r2, [pc, #84]	; (2be30 <Reset_Handler+0xe8>)
   2bdda:	7b93      	ldrb	r3, [r2, #14]
   2bddc:	210c      	movs	r1, #12
   2bdde:	438b      	bics	r3, r1
   2bde0:	1c19      	adds	r1, r3, #0
   2bde2:	2308      	movs	r3, #8
   2bde4:	430b      	orrs	r3, r1
   2bde6:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
   2bde8:	4a11      	ldr	r2, [pc, #68]	; (2be30 <Reset_Handler+0xe8>)
   2bdea:	7b93      	ldrb	r3, [r2, #14]
   2bdec:	2103      	movs	r1, #3
   2bdee:	438b      	bics	r3, r1
   2bdf0:	1c19      	adds	r1, r3, #0
   2bdf2:	2302      	movs	r3, #2
   2bdf4:	430b      	orrs	r3, r1
   2bdf6:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
   2bdf8:	4a0e      	ldr	r2, [pc, #56]	; (2be34 <Reset_Handler+0xec>)
   2bdfa:	6853      	ldr	r3, [r2, #4]
   2bdfc:	2180      	movs	r1, #128	; 0x80
   2bdfe:	430b      	orrs	r3, r1
   2be00:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
   2be02:	4b0d      	ldr	r3, [pc, #52]	; (2be38 <Reset_Handler+0xf0>)
   2be04:	4798      	blx	r3

        /* Branch to main function */
        main();
   2be06:	4b0d      	ldr	r3, [pc, #52]	; (2be3c <Reset_Handler+0xf4>)
   2be08:	4798      	blx	r3

        /* Infinite loop */
        while (1);
   2be0a:	e7fe      	b.n	2be0a <Reset_Handler+0xc2>
   2be0c:	0003b458 	.word	0x0003b458
   2be10:	20000000 	.word	0x20000000
   2be14:	20000300 	.word	0x20000300
   2be18:	20000300 	.word	0x20000300
   2be1c:	20005ce4 	.word	0x20005ce4
   2be20:	00012000 	.word	0x00012000
   2be24:	e000ed00 	.word	0xe000ed00
   2be28:	41007000 	.word	0x41007000
   2be2c:	41005000 	.word	0x41005000
   2be30:	41004800 	.word	0x41004800
   2be34:	41004000 	.word	0x41004000
   2be38:	00035789 	.word	0x00035789
   2be3c:	0003357d 	.word	0x0003357d

0002be40 <Dummy_Handler>:
 * \brief Default interrupt handler for unused IRQs.
 */
void HardFault_HandlerC(unsigned long *hardfault_args);

void Dummy_Handler(void)
{
   2be40:	b580      	push	{r7, lr}
   2be42:	af00      	add	r7, sp, #0
  __asm volatile (
   2be44:	2004      	movs	r0, #4
   2be46:	4671      	mov	r1, lr
   2be48:	4208      	tst	r0, r1
   2be4a:	d002      	beq.n	2be52 <_MSP>
   2be4c:	f3ef 8009 	mrs	r0, PSP
   2be50:	e001      	b.n	2be56 <_HALT>

0002be52 <_MSP>:
   2be52:	f3ef 8008 	mrs	r0, MSP

0002be56 <_HALT>:
   2be56:	6941      	ldr	r1, [r0, #20]
   2be58:	e004      	b.n	2be64 <HardFault_HandlerC>
   2be5a:	be00      	bkpt	0x0000
  "_HALT:              \n"
  " ldr r1,[r0,#20]  \n"
  " b HardFault_HandlerC \n"
  " bkpt #0          \n"
  );
}
   2be5c:	46c0      	nop			; (mov r8, r8)
   2be5e:	46bd      	mov	sp, r7
   2be60:	bd80      	pop	{r7, pc}
	...

0002be64 <HardFault_HandlerC>:

void HardFault_HandlerC(unsigned long *hardfault_args) {
   2be64:	b580      	push	{r7, lr}
   2be66:	b090      	sub	sp, #64	; 0x40
   2be68:	af00      	add	r7, sp, #0
   2be6a:	6078      	str	r0, [r7, #4]
	volatile unsigned long _DFSR ;
	volatile unsigned long _AFSR ;
	volatile unsigned long _BFAR ;
	volatile unsigned long _MMAR ;
	
	stacked_r0  = ((unsigned long)hardfault_args[0]) ;
   2be6c:	687b      	ldr	r3, [r7, #4]
   2be6e:	681b      	ldr	r3, [r3, #0]
   2be70:	63fb      	str	r3, [r7, #60]	; 0x3c
	stacked_r1  = ((unsigned long)hardfault_args[1]) ;
   2be72:	687b      	ldr	r3, [r7, #4]
   2be74:	685b      	ldr	r3, [r3, #4]
   2be76:	63bb      	str	r3, [r7, #56]	; 0x38
	stacked_r2  = ((unsigned long)hardfault_args[2]) ;
   2be78:	687b      	ldr	r3, [r7, #4]
   2be7a:	689b      	ldr	r3, [r3, #8]
   2be7c:	637b      	str	r3, [r7, #52]	; 0x34
	stacked_r3  = ((unsigned long)hardfault_args[3]) ;
   2be7e:	687b      	ldr	r3, [r7, #4]
   2be80:	68db      	ldr	r3, [r3, #12]
   2be82:	633b      	str	r3, [r7, #48]	; 0x30
	stacked_r12 = ((unsigned long)hardfault_args[4]) ;
   2be84:	687b      	ldr	r3, [r7, #4]
   2be86:	691b      	ldr	r3, [r3, #16]
   2be88:	62fb      	str	r3, [r7, #44]	; 0x2c
	stacked_lr  = ((unsigned long)hardfault_args[5]) ;
   2be8a:	687b      	ldr	r3, [r7, #4]
   2be8c:	695b      	ldr	r3, [r3, #20]
   2be8e:	62bb      	str	r3, [r7, #40]	; 0x28
	stacked_pc  = ((unsigned long)hardfault_args[6]) ;
   2be90:	687b      	ldr	r3, [r7, #4]
   2be92:	699b      	ldr	r3, [r3, #24]
   2be94:	627b      	str	r3, [r7, #36]	; 0x24
	stacked_psr = ((unsigned long)hardfault_args[7]) ;
   2be96:	687b      	ldr	r3, [r7, #4]
   2be98:	69db      	ldr	r3, [r3, #28]
   2be9a:	623b      	str	r3, [r7, #32]
	
	// Configurable Fault Status Register
	// Consists of MMSR, BFSR and UFSR
	_CFSR = (*((volatile unsigned long *)(0xE000ED28))) ;
   2be9c:	4b0b      	ldr	r3, [pc, #44]	; (2becc <HardFault_HandlerC+0x68>)
   2be9e:	681b      	ldr	r3, [r3, #0]
   2bea0:	61fb      	str	r3, [r7, #28]
	
	// Hard Fault Status Register
	_HFSR = (*((volatile unsigned long *)(0xE000ED2C))) ;
   2bea2:	4b0b      	ldr	r3, [pc, #44]	; (2bed0 <HardFault_HandlerC+0x6c>)
   2bea4:	681b      	ldr	r3, [r3, #0]
   2bea6:	61bb      	str	r3, [r7, #24]
	
	// Debug Fault Status Register
	_DFSR = (*((volatile unsigned long *)(0xE000ED30))) ;
   2bea8:	4b0a      	ldr	r3, [pc, #40]	; (2bed4 <HardFault_HandlerC+0x70>)
   2beaa:	681b      	ldr	r3, [r3, #0]
   2beac:	617b      	str	r3, [r7, #20]
	
	// Auxiliary Fault Status Register
	_AFSR = (*((volatile unsigned long *)(0xE000ED3C))) ;
   2beae:	4b0a      	ldr	r3, [pc, #40]	; (2bed8 <HardFault_HandlerC+0x74>)
   2beb0:	681b      	ldr	r3, [r3, #0]
   2beb2:	613b      	str	r3, [r7, #16]
	
	// Read the Fault Address Registers. These may not contain valid values.
	// Check BFARVALID/MMARVALID to see if they are valid values
	// MemManage Fault Address Register
	_MMAR = (*((volatile unsigned long *)(0xE000ED34))) ;
   2beb4:	4b09      	ldr	r3, [pc, #36]	; (2bedc <HardFault_HandlerC+0x78>)
   2beb6:	681b      	ldr	r3, [r3, #0]
   2beb8:	60bb      	str	r3, [r7, #8]
	// Bus Fault Address Register
	_BFAR = (*((volatile unsigned long *)(0xE000ED38))) ;
   2beba:	4b09      	ldr	r3, [pc, #36]	; (2bee0 <HardFault_HandlerC+0x7c>)
   2bebc:	681b      	ldr	r3, [r3, #0]
   2bebe:	60fb      	str	r3, [r7, #12]
	
	__asm("BKPT #0\n") ; // Break into the debugger
   2bec0:	be00      	bkpt	0x0000
	#pragma GCC diagnostic pop
   2bec2:	46c0      	nop			; (mov r8, r8)
   2bec4:	46bd      	mov	sp, r7
   2bec6:	b010      	add	sp, #64	; 0x40
   2bec8:	bd80      	pop	{r7, pc}
   2beca:	46c0      	nop			; (mov r8, r8)
   2becc:	e000ed28 	.word	0xe000ed28
   2bed0:	e000ed2c 	.word	0xe000ed2c
   2bed4:	e000ed30 	.word	0xe000ed30
   2bed8:	e000ed3c 	.word	0xe000ed3c
   2bedc:	e000ed34 	.word	0xe000ed34
   2bee0:	e000ed38 	.word	0xe000ed38

0002bee4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   2bee4:	b580      	push	{r7, lr}
   2bee6:	b086      	sub	sp, #24
   2bee8:	af00      	add	r7, sp, #0
   2beea:	60f8      	str	r0, [r7, #12]
   2beec:	60b9      	str	r1, [r7, #8]
   2beee:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2bef0:	2300      	movs	r3, #0
   2bef2:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   2bef4:	68fb      	ldr	r3, [r7, #12]
   2bef6:	2b00      	cmp	r3, #0
   2bef8:	d012      	beq.n	2bf20 <_read+0x3c>
		return -1;
   2befa:	2301      	movs	r3, #1
   2befc:	425b      	negs	r3, r3
   2befe:	e013      	b.n	2bf28 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   2bf00:	4b0b      	ldr	r3, [pc, #44]	; (2bf30 <_read+0x4c>)
   2bf02:	681a      	ldr	r2, [r3, #0]
   2bf04:	4b0b      	ldr	r3, [pc, #44]	; (2bf34 <_read+0x50>)
   2bf06:	681b      	ldr	r3, [r3, #0]
   2bf08:	68b9      	ldr	r1, [r7, #8]
   2bf0a:	0018      	movs	r0, r3
   2bf0c:	4790      	blx	r2
		ptr++;
   2bf0e:	68bb      	ldr	r3, [r7, #8]
   2bf10:	3301      	adds	r3, #1
   2bf12:	60bb      	str	r3, [r7, #8]
		nChars++;
   2bf14:	697b      	ldr	r3, [r7, #20]
   2bf16:	3301      	adds	r3, #1
   2bf18:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   2bf1a:	687b      	ldr	r3, [r7, #4]
   2bf1c:	3b01      	subs	r3, #1
   2bf1e:	607b      	str	r3, [r7, #4]
   2bf20:	687b      	ldr	r3, [r7, #4]
   2bf22:	2b00      	cmp	r3, #0
   2bf24:	dcec      	bgt.n	2bf00 <_read+0x1c>
	}
	return nChars;
   2bf26:	697b      	ldr	r3, [r7, #20]
}
   2bf28:	0018      	movs	r0, r3
   2bf2a:	46bd      	mov	sp, r7
   2bf2c:	b006      	add	sp, #24
   2bf2e:	bd80      	pop	{r7, pc}
   2bf30:	20005c80 	.word	0x20005c80
   2bf34:	20005c88 	.word	0x20005c88

0002bf38 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
   2bf38:	b580      	push	{r7, lr}
   2bf3a:	b086      	sub	sp, #24
   2bf3c:	af00      	add	r7, sp, #0
   2bf3e:	60f8      	str	r0, [r7, #12]
   2bf40:	60b9      	str	r1, [r7, #8]
   2bf42:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   2bf44:	2300      	movs	r3, #0
   2bf46:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   2bf48:	68fb      	ldr	r3, [r7, #12]
   2bf4a:	2b01      	cmp	r3, #1
   2bf4c:	d01d      	beq.n	2bf8a <_write+0x52>
   2bf4e:	68fb      	ldr	r3, [r7, #12]
   2bf50:	2b02      	cmp	r3, #2
   2bf52:	d01a      	beq.n	2bf8a <_write+0x52>
   2bf54:	68fb      	ldr	r3, [r7, #12]
   2bf56:	2b03      	cmp	r3, #3
   2bf58:	d017      	beq.n	2bf8a <_write+0x52>
		return -1;
   2bf5a:	2301      	movs	r3, #1
   2bf5c:	425b      	negs	r3, r3
   2bf5e:	e018      	b.n	2bf92 <_write+0x5a>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   2bf60:	4b0e      	ldr	r3, [pc, #56]	; (2bf9c <_write+0x64>)
   2bf62:	681a      	ldr	r2, [r3, #0]
   2bf64:	4b0e      	ldr	r3, [pc, #56]	; (2bfa0 <_write+0x68>)
   2bf66:	6818      	ldr	r0, [r3, #0]
   2bf68:	68bb      	ldr	r3, [r7, #8]
   2bf6a:	1c59      	adds	r1, r3, #1
   2bf6c:	60b9      	str	r1, [r7, #8]
   2bf6e:	781b      	ldrb	r3, [r3, #0]
   2bf70:	0019      	movs	r1, r3
   2bf72:	4790      	blx	r2
   2bf74:	1e03      	subs	r3, r0, #0
   2bf76:	da02      	bge.n	2bf7e <_write+0x46>
			return -1;
   2bf78:	2301      	movs	r3, #1
   2bf7a:	425b      	negs	r3, r3
   2bf7c:	e009      	b.n	2bf92 <_write+0x5a>
		}
		++nChars;
   2bf7e:	697b      	ldr	r3, [r7, #20]
   2bf80:	3301      	adds	r3, #1
   2bf82:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   2bf84:	687b      	ldr	r3, [r7, #4]
   2bf86:	3b01      	subs	r3, #1
   2bf88:	607b      	str	r3, [r7, #4]
   2bf8a:	687b      	ldr	r3, [r7, #4]
   2bf8c:	2b00      	cmp	r3, #0
   2bf8e:	d1e7      	bne.n	2bf60 <_write+0x28>
	}
	return nChars;
   2bf90:	697b      	ldr	r3, [r7, #20]
}
   2bf92:	0018      	movs	r0, r3
   2bf94:	46bd      	mov	sp, r7
   2bf96:	b006      	add	sp, #24
   2bf98:	bd80      	pop	{r7, pc}
   2bf9a:	46c0      	nop			; (mov r8, r8)
   2bf9c:	20005c84 	.word	0x20005c84
   2bfa0:	20005c88 	.word	0x20005c88

0002bfa4 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   2bfa4:	b580      	push	{r7, lr}
   2bfa6:	b084      	sub	sp, #16
   2bfa8:	af00      	add	r7, sp, #0
   2bfaa:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
   2bfac:	4b0a      	ldr	r3, [pc, #40]	; (2bfd8 <_sbrk+0x34>)
   2bfae:	681b      	ldr	r3, [r3, #0]
   2bfb0:	2b00      	cmp	r3, #0
   2bfb2:	d102      	bne.n	2bfba <_sbrk+0x16>
		heap = (unsigned char *)&_end;
   2bfb4:	4b08      	ldr	r3, [pc, #32]	; (2bfd8 <_sbrk+0x34>)
   2bfb6:	4a09      	ldr	r2, [pc, #36]	; (2bfdc <_sbrk+0x38>)
   2bfb8:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   2bfba:	4b07      	ldr	r3, [pc, #28]	; (2bfd8 <_sbrk+0x34>)
   2bfbc:	681b      	ldr	r3, [r3, #0]
   2bfbe:	60fb      	str	r3, [r7, #12]

	heap += incr;
   2bfc0:	4b05      	ldr	r3, [pc, #20]	; (2bfd8 <_sbrk+0x34>)
   2bfc2:	681a      	ldr	r2, [r3, #0]
   2bfc4:	687b      	ldr	r3, [r7, #4]
   2bfc6:	18d2      	adds	r2, r2, r3
   2bfc8:	4b03      	ldr	r3, [pc, #12]	; (2bfd8 <_sbrk+0x34>)
   2bfca:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
   2bfcc:	68fb      	ldr	r3, [r7, #12]
}
   2bfce:	0018      	movs	r0, r3
   2bfd0:	46bd      	mov	sp, r7
   2bfd2:	b004      	add	sp, #16
   2bfd4:	bd80      	pop	{r7, pc}
   2bfd6:	46c0      	nop			; (mov r8, r8)
   2bfd8:	200042f4 	.word	0x200042f4
   2bfdc:	20007ce8 	.word	0x20007ce8

0002bfe0 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   2bfe0:	b580      	push	{r7, lr}
   2bfe2:	b082      	sub	sp, #8
   2bfe4:	af00      	add	r7, sp, #0
   2bfe6:	6078      	str	r0, [r7, #4]
	return -1;
   2bfe8:	2301      	movs	r3, #1
   2bfea:	425b      	negs	r3, r3
}
   2bfec:	0018      	movs	r0, r3
   2bfee:	46bd      	mov	sp, r7
   2bff0:	b002      	add	sp, #8
   2bff2:	bd80      	pop	{r7, pc}

0002bff4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   2bff4:	b580      	push	{r7, lr}
   2bff6:	b082      	sub	sp, #8
   2bff8:	af00      	add	r7, sp, #0
   2bffa:	6078      	str	r0, [r7, #4]
   2bffc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   2bffe:	683b      	ldr	r3, [r7, #0]
   2c000:	2280      	movs	r2, #128	; 0x80
   2c002:	0192      	lsls	r2, r2, #6
   2c004:	605a      	str	r2, [r3, #4]

	return 0;
   2c006:	2300      	movs	r3, #0
}
   2c008:	0018      	movs	r0, r3
   2c00a:	46bd      	mov	sp, r7
   2c00c:	b002      	add	sp, #8
   2c00e:	bd80      	pop	{r7, pc}

0002c010 <_isatty>:

extern int _isatty(int file)
{
   2c010:	b580      	push	{r7, lr}
   2c012:	b082      	sub	sp, #8
   2c014:	af00      	add	r7, sp, #0
   2c016:	6078      	str	r0, [r7, #4]
	return 1;
   2c018:	2301      	movs	r3, #1
}
   2c01a:	0018      	movs	r0, r3
   2c01c:	46bd      	mov	sp, r7
   2c01e:	b002      	add	sp, #8
   2c020:	bd80      	pop	{r7, pc}

0002c022 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   2c022:	b580      	push	{r7, lr}
   2c024:	b084      	sub	sp, #16
   2c026:	af00      	add	r7, sp, #0
   2c028:	60f8      	str	r0, [r7, #12]
   2c02a:	60b9      	str	r1, [r7, #8]
   2c02c:	607a      	str	r2, [r7, #4]
	return 0;
   2c02e:	2300      	movs	r3, #0
}
   2c030:	0018      	movs	r0, r3
   2c032:	46bd      	mov	sp, r7
   2c034:	b004      	add	sp, #16
   2c036:	bd80      	pop	{r7, pc}

0002c038 <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
   2c038:	b580      	push	{r7, lr}
   2c03a:	b082      	sub	sp, #8
   2c03c:	af00      	add	r7, sp, #0
   2c03e:	6078      	str	r0, [r7, #4]
	time->second = 0;
   2c040:	687b      	ldr	r3, [r7, #4]
   2c042:	2200      	movs	r2, #0
   2c044:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
   2c046:	687b      	ldr	r3, [r7, #4]
   2c048:	2200      	movs	r2, #0
   2c04a:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
   2c04c:	687b      	ldr	r3, [r7, #4]
   2c04e:	2200      	movs	r2, #0
   2c050:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
   2c052:	687b      	ldr	r3, [r7, #4]
   2c054:	2200      	movs	r2, #0
   2c056:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
   2c058:	687b      	ldr	r3, [r7, #4]
   2c05a:	2201      	movs	r2, #1
   2c05c:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
   2c05e:	687b      	ldr	r3, [r7, #4]
   2c060:	2201      	movs	r2, #1
   2c062:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
   2c064:	687b      	ldr	r3, [r7, #4]
   2c066:	22fa      	movs	r2, #250	; 0xfa
   2c068:	00d2      	lsls	r2, r2, #3
   2c06a:	80da      	strh	r2, [r3, #6]
}
   2c06c:	46c0      	nop			; (mov r8, r8)
   2c06e:	46bd      	mov	sp, r7
   2c070:	b002      	add	sp, #8
   2c072:	bd80      	pop	{r7, pc}

0002c074 <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
   2c074:	b580      	push	{r7, lr}
   2c076:	b086      	sub	sp, #24
   2c078:	af00      	add	r7, sp, #0
   2c07a:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
   2c07c:	230c      	movs	r3, #12
   2c07e:	18fb      	adds	r3, r7, r3
   2c080:	0018      	movs	r0, r3
   2c082:	4b23      	ldr	r3, [pc, #140]	; (2c110 <rtc_calendar_get_config_defaults+0x9c>)
   2c084:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
   2c086:	687b      	ldr	r3, [r7, #4]
   2c088:	22a0      	movs	r2, #160	; 0xa0
   2c08a:	0112      	lsls	r2, r2, #4
   2c08c:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
   2c08e:	687b      	ldr	r3, [r7, #4]
   2c090:	2200      	movs	r2, #0
   2c092:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
   2c094:	687b      	ldr	r3, [r7, #4]
   2c096:	2200      	movs	r2, #0
   2c098:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
   2c09a:	687b      	ldr	r3, [r7, #4]
   2c09c:	2200      	movs	r2, #0
   2c09e:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
   2c0a0:	687b      	ldr	r3, [r7, #4]
   2c0a2:	22fa      	movs	r2, #250	; 0xfa
   2c0a4:	00d2      	lsls	r2, r2, #3
   2c0a6:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2c0a8:	2317      	movs	r3, #23
   2c0aa:	18fb      	adds	r3, r7, r3
   2c0ac:	2200      	movs	r2, #0
   2c0ae:	701a      	strb	r2, [r3, #0]
   2c0b0:	e025      	b.n	2c0fe <rtc_calendar_get_config_defaults+0x8a>
		config->alarm[i].time = time;
   2c0b2:	2317      	movs	r3, #23
   2c0b4:	18fb      	adds	r3, r7, r3
   2c0b6:	781a      	ldrb	r2, [r3, #0]
   2c0b8:	6879      	ldr	r1, [r7, #4]
   2c0ba:	2008      	movs	r0, #8
   2c0bc:	0013      	movs	r3, r2
   2c0be:	009b      	lsls	r3, r3, #2
   2c0c0:	189b      	adds	r3, r3, r2
   2c0c2:	005b      	lsls	r3, r3, #1
   2c0c4:	18cb      	adds	r3, r1, r3
   2c0c6:	181a      	adds	r2, r3, r0
   2c0c8:	230c      	movs	r3, #12
   2c0ca:	18fb      	adds	r3, r7, r3
   2c0cc:	0010      	movs	r0, r2
   2c0ce:	0019      	movs	r1, r3
   2c0d0:	2308      	movs	r3, #8
   2c0d2:	001a      	movs	r2, r3
   2c0d4:	4b0f      	ldr	r3, [pc, #60]	; (2c114 <rtc_calendar_get_config_defaults+0xa0>)
   2c0d6:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2c0d8:	2317      	movs	r3, #23
   2c0da:	18fb      	adds	r3, r7, r3
   2c0dc:	781a      	ldrb	r2, [r3, #0]
   2c0de:	6879      	ldr	r1, [r7, #4]
   2c0e0:	0013      	movs	r3, r2
   2c0e2:	009b      	lsls	r3, r3, #2
   2c0e4:	189b      	adds	r3, r3, r2
   2c0e6:	005b      	lsls	r3, r3, #1
   2c0e8:	18cb      	adds	r3, r1, r3
   2c0ea:	3310      	adds	r3, #16
   2c0ec:	2206      	movs	r2, #6
   2c0ee:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
   2c0f0:	2317      	movs	r3, #23
   2c0f2:	18fb      	adds	r3, r7, r3
   2c0f4:	781a      	ldrb	r2, [r3, #0]
   2c0f6:	2317      	movs	r3, #23
   2c0f8:	18fb      	adds	r3, r7, r3
   2c0fa:	3201      	adds	r2, #1
   2c0fc:	701a      	strb	r2, [r3, #0]
   2c0fe:	2317      	movs	r3, #23
   2c100:	18fb      	adds	r3, r7, r3
   2c102:	781b      	ldrb	r3, [r3, #0]
   2c104:	2b00      	cmp	r3, #0
   2c106:	d0d4      	beq.n	2c0b2 <rtc_calendar_get_config_defaults+0x3e>
	}
}
   2c108:	46c0      	nop			; (mov r8, r8)
   2c10a:	46bd      	mov	sp, r7
   2c10c:	b006      	add	sp, #24
   2c10e:	bd80      	pop	{r7, pc}
   2c110:	0002c039 	.word	0x0002c039
   2c114:	000357f9 	.word	0x000357f9

0002c118 <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
   2c118:	b580      	push	{r7, lr}
   2c11a:	b088      	sub	sp, #32
   2c11c:	af00      	add	r7, sp, #0
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
   2c11e:	230c      	movs	r3, #12
   2c120:	18fb      	adds	r3, r7, r3
   2c122:	0018      	movs	r0, r3
   2c124:	4b1a      	ldr	r3, [pc, #104]	; (2c190 <configure_rtc_calendar+0x78>)
   2c126:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
   2c128:	1d3b      	adds	r3, r7, #4
   2c12a:	0018      	movs	r0, r3
   2c12c:	4b19      	ldr	r3, [pc, #100]	; (2c194 <configure_rtc_calendar+0x7c>)
   2c12e:	4798      	blx	r3
	init_time.year   = 2014;
   2c130:	1d3b      	adds	r3, r7, #4
   2c132:	4a19      	ldr	r2, [pc, #100]	; (2c198 <configure_rtc_calendar+0x80>)
   2c134:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
   2c136:	1d3b      	adds	r3, r7, #4
   2c138:	2201      	movs	r2, #1
   2c13a:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
   2c13c:	1d3b      	adds	r3, r7, #4
   2c13e:	2201      	movs	r2, #1
   2c140:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
   2c142:	1d3b      	adds	r3, r7, #4
   2c144:	2200      	movs	r2, #0
   2c146:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
   2c148:	1d3b      	adds	r3, r7, #4
   2c14a:	2200      	movs	r2, #0
   2c14c:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
   2c14e:	1d3b      	adds	r3, r7, #4
   2c150:	2204      	movs	r2, #4
   2c152:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
   2c154:	230c      	movs	r3, #12
   2c156:	18fb      	adds	r3, r7, r3
   2c158:	2201      	movs	r2, #1
   2c15a:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
   2c15c:	230c      	movs	r3, #12
   2c15e:	18fb      	adds	r3, r7, r3
   2c160:	1d3a      	adds	r2, r7, #4
   2c162:	3308      	adds	r3, #8
   2c164:	ca03      	ldmia	r2!, {r0, r1}
   2c166:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
   2c168:	230c      	movs	r3, #12
   2c16a:	18fb      	adds	r3, r7, r3
   2c16c:	2206      	movs	r2, #6
   2c16e:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
   2c170:	230c      	movs	r3, #12
   2c172:	18fa      	adds	r2, r7, r3
   2c174:	4909      	ldr	r1, [pc, #36]	; (2c19c <configure_rtc_calendar+0x84>)
   2c176:	4b0a      	ldr	r3, [pc, #40]	; (2c1a0 <configure_rtc_calendar+0x88>)
   2c178:	0018      	movs	r0, r3
   2c17a:	4b0a      	ldr	r3, [pc, #40]	; (2c1a4 <configure_rtc_calendar+0x8c>)
   2c17c:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
   2c17e:	4b08      	ldr	r3, [pc, #32]	; (2c1a0 <configure_rtc_calendar+0x88>)
   2c180:	0018      	movs	r0, r3
   2c182:	4b09      	ldr	r3, [pc, #36]	; (2c1a8 <configure_rtc_calendar+0x90>)
   2c184:	4798      	blx	r3
}
   2c186:	46c0      	nop			; (mov r8, r8)
   2c188:	46bd      	mov	sp, r7
   2c18a:	b008      	add	sp, #32
   2c18c:	bd80      	pop	{r7, pc}
   2c18e:	46c0      	nop			; (mov r8, r8)
   2c190:	0002c075 	.word	0x0002c075
   2c194:	0002c039 	.word	0x0002c039
   2c198:	000007de 	.word	0x000007de
   2c19c:	40001400 	.word	0x40001400
   2c1a0:	20005c8c 	.word	0x20005c8c
   2c1a4:	00027c55 	.word	0x00027c55
   2c1a8:	00027981 	.word	0x00027981

0002c1ac <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
   2c1ac:	b590      	push	{r4, r7, lr}
   2c1ae:	b085      	sub	sp, #20
   2c1b0:	af00      	add	r7, sp, #0
   2c1b2:	0002      	movs	r2, r0
   2c1b4:	1dfb      	adds	r3, r7, #7
   2c1b6:	701a      	strb	r2, [r3, #0]
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
   2c1b8:	4b1a      	ldr	r3, [pc, #104]	; (2c224 <disk_initialize+0x78>)
   2c1ba:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
   2c1bc:	1dfb      	adds	r3, r7, #7
   2c1be:	781b      	ldrb	r3, [r3, #0]
   2c1c0:	2b01      	cmp	r3, #1
   2c1c2:	d901      	bls.n	2c1c8 <disk_initialize+0x1c>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
   2c1c4:	2301      	movs	r3, #1
   2c1c6:	e029      	b.n	2c21c <disk_initialize+0x70>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
   2c1c8:	2300      	movs	r3, #0
   2c1ca:	60fb      	str	r3, [r7, #12]
   2c1cc:	e010      	b.n	2c1f0 <disk_initialize+0x44>
		mem_status = mem_test_unit_ready(drv);
   2c1ce:	230b      	movs	r3, #11
   2c1d0:	18fc      	adds	r4, r7, r3
   2c1d2:	1dfb      	adds	r3, r7, #7
   2c1d4:	781b      	ldrb	r3, [r3, #0]
   2c1d6:	0018      	movs	r0, r3
   2c1d8:	4b13      	ldr	r3, [pc, #76]	; (2c228 <disk_initialize+0x7c>)
   2c1da:	4798      	blx	r3
   2c1dc:	0003      	movs	r3, r0
   2c1de:	7023      	strb	r3, [r4, #0]
		if (CTRL_BUSY != mem_status) {
   2c1e0:	230b      	movs	r3, #11
   2c1e2:	18fb      	adds	r3, r7, r3
   2c1e4:	781b      	ldrb	r3, [r3, #0]
   2c1e6:	2b03      	cmp	r3, #3
   2c1e8:	d106      	bne.n	2c1f8 <disk_initialize+0x4c>
	for (i = 0; i < 2; i ++) {
   2c1ea:	68fb      	ldr	r3, [r7, #12]
   2c1ec:	3301      	adds	r3, #1
   2c1ee:	60fb      	str	r3, [r7, #12]
   2c1f0:	68fb      	ldr	r3, [r7, #12]
   2c1f2:	2b01      	cmp	r3, #1
   2c1f4:	ddeb      	ble.n	2c1ce <disk_initialize+0x22>
   2c1f6:	e000      	b.n	2c1fa <disk_initialize+0x4e>
			break;
   2c1f8:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
   2c1fa:	230b      	movs	r3, #11
   2c1fc:	18fb      	adds	r3, r7, r3
   2c1fe:	781b      	ldrb	r3, [r3, #0]
   2c200:	2b00      	cmp	r3, #0
   2c202:	d001      	beq.n	2c208 <disk_initialize+0x5c>
		return STA_NOINIT;
   2c204:	2301      	movs	r3, #1
   2c206:	e009      	b.n	2c21c <disk_initialize+0x70>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
   2c208:	1dfb      	adds	r3, r7, #7
   2c20a:	781b      	ldrb	r3, [r3, #0]
   2c20c:	0018      	movs	r0, r3
   2c20e:	4b07      	ldr	r3, [pc, #28]	; (2c22c <disk_initialize+0x80>)
   2c210:	4798      	blx	r3
   2c212:	1e03      	subs	r3, r0, #0
   2c214:	d001      	beq.n	2c21a <disk_initialize+0x6e>
		return STA_PROTECT;
   2c216:	2304      	movs	r3, #4
   2c218:	e000      	b.n	2c21c <disk_initialize+0x70>
	}

	/* The memory should already be initialized */
	return 0;
   2c21a:	2300      	movs	r3, #0
}
   2c21c:	0018      	movs	r0, r3
   2c21e:	46bd      	mov	sp, r7
   2c220:	b005      	add	sp, #20
   2c222:	bd90      	pop	{r4, r7, pc}
   2c224:	0002c119 	.word	0x0002c119
   2c228:	00026e7d 	.word	0x00026e7d
   2c22c:	00026f35 	.word	0x00026f35

0002c230 <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
   2c230:	b580      	push	{r7, lr}
   2c232:	b082      	sub	sp, #8
   2c234:	af00      	add	r7, sp, #0
   2c236:	0002      	movs	r2, r0
   2c238:	1dfb      	adds	r3, r7, #7
   2c23a:	701a      	strb	r2, [r3, #0]
	switch (mem_test_unit_ready(drv)) {
   2c23c:	1dfb      	adds	r3, r7, #7
   2c23e:	781b      	ldrb	r3, [r3, #0]
   2c240:	0018      	movs	r0, r3
   2c242:	4b08      	ldr	r3, [pc, #32]	; (2c264 <disk_status+0x34>)
   2c244:	4798      	blx	r3
   2c246:	1e03      	subs	r3, r0, #0
   2c248:	d002      	beq.n	2c250 <disk_status+0x20>
   2c24a:	2b02      	cmp	r3, #2
   2c24c:	d002      	beq.n	2c254 <disk_status+0x24>
   2c24e:	e003      	b.n	2c258 <disk_status+0x28>
	case CTRL_GOOD:
		return 0;
   2c250:	2300      	movs	r3, #0
   2c252:	e002      	b.n	2c25a <disk_status+0x2a>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
   2c254:	2303      	movs	r3, #3
   2c256:	e000      	b.n	2c25a <disk_status+0x2a>
	default:
		return STA_NOINIT;
   2c258:	2301      	movs	r3, #1
	}
}
   2c25a:	0018      	movs	r0, r3
   2c25c:	46bd      	mov	sp, r7
   2c25e:	b002      	add	sp, #8
   2c260:	bd80      	pop	{r7, pc}
   2c262:	46c0      	nop			; (mov r8, r8)
   2c264:	00026e7d 	.word	0x00026e7d

0002c268 <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
   2c268:	b590      	push	{r4, r7, lr}
   2c26a:	b089      	sub	sp, #36	; 0x24
   2c26c:	af00      	add	r7, sp, #0
   2c26e:	60b9      	str	r1, [r7, #8]
   2c270:	607a      	str	r2, [r7, #4]
   2c272:	0019      	movs	r1, r3
   2c274:	230f      	movs	r3, #15
   2c276:	18fb      	adds	r3, r7, r3
   2c278:	1c02      	adds	r2, r0, #0
   2c27a:	701a      	strb	r2, [r3, #0]
   2c27c:	230e      	movs	r3, #14
   2c27e:	18fb      	adds	r3, r7, r3
   2c280:	1c0a      	adds	r2, r1, #0
   2c282:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2c284:	231b      	movs	r3, #27
   2c286:	18fc      	adds	r4, r7, r3
   2c288:	230f      	movs	r3, #15
   2c28a:	18fb      	adds	r3, r7, r3
   2c28c:	781b      	ldrb	r3, [r3, #0]
   2c28e:	0018      	movs	r0, r3
   2c290:	4b28      	ldr	r3, [pc, #160]	; (2c334 <disk_read+0xcc>)
   2c292:	4798      	blx	r3
   2c294:	0003      	movs	r3, r0
   2c296:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2c298:	231b      	movs	r3, #27
   2c29a:	18fb      	adds	r3, r7, r3
   2c29c:	781b      	ldrb	r3, [r3, #0]
   2c29e:	2b00      	cmp	r3, #0
   2c2a0:	d101      	bne.n	2c2a6 <disk_read+0x3e>
		return RES_ERROR;
   2c2a2:	2301      	movs	r3, #1
   2c2a4:	e042      	b.n	2c32c <disk_read+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2c2a6:	2314      	movs	r3, #20
   2c2a8:	18fa      	adds	r2, r7, r3
   2c2aa:	230f      	movs	r3, #15
   2c2ac:	18fb      	adds	r3, r7, r3
   2c2ae:	781b      	ldrb	r3, [r3, #0]
   2c2b0:	0011      	movs	r1, r2
   2c2b2:	0018      	movs	r0, r3
   2c2b4:	4b20      	ldr	r3, [pc, #128]	; (2c338 <disk_read+0xd0>)
   2c2b6:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2c2b8:	230e      	movs	r3, #14
   2c2ba:	18fb      	adds	r3, r7, r3
   2c2bc:	781b      	ldrb	r3, [r3, #0]
   2c2be:	221b      	movs	r2, #27
   2c2c0:	18ba      	adds	r2, r7, r2
   2c2c2:	7812      	ldrb	r2, [r2, #0]
   2c2c4:	4353      	muls	r3, r2
   2c2c6:	001a      	movs	r2, r3
   2c2c8:	687b      	ldr	r3, [r7, #4]
   2c2ca:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2c2cc:	697b      	ldr	r3, [r7, #20]
   2c2ce:	3301      	adds	r3, #1
   2c2d0:	211b      	movs	r1, #27
   2c2d2:	1879      	adds	r1, r7, r1
   2c2d4:	7809      	ldrb	r1, [r1, #0]
   2c2d6:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2c2d8:	429a      	cmp	r2, r3
   2c2da:	d901      	bls.n	2c2e0 <disk_read+0x78>
		return RES_PARERR;
   2c2dc:	2304      	movs	r3, #4
   2c2de:	e025      	b.n	2c32c <disk_read+0xc4>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
   2c2e0:	2300      	movs	r3, #0
   2c2e2:	61fb      	str	r3, [r7, #28]
   2c2e4:	e01b      	b.n	2c31e <disk_read+0xb6>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2c2e6:	231b      	movs	r3, #27
   2c2e8:	18fb      	adds	r3, r7, r3
   2c2ea:	781b      	ldrb	r3, [r3, #0]
   2c2ec:	69fa      	ldr	r2, [r7, #28]
   2c2ee:	435a      	muls	r2, r3
   2c2f0:	687b      	ldr	r3, [r7, #4]
   2c2f2:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2c2f4:	231b      	movs	r3, #27
   2c2f6:	18fb      	adds	r3, r7, r3
   2c2f8:	781b      	ldrb	r3, [r3, #0]
   2c2fa:	69fa      	ldr	r2, [r7, #28]
   2c2fc:	4353      	muls	r3, r2
   2c2fe:	025b      	lsls	r3, r3, #9
   2c300:	68ba      	ldr	r2, [r7, #8]
   2c302:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
   2c304:	230f      	movs	r3, #15
   2c306:	18fb      	adds	r3, r7, r3
   2c308:	781b      	ldrb	r3, [r3, #0]
   2c30a:	0018      	movs	r0, r3
   2c30c:	4b0b      	ldr	r3, [pc, #44]	; (2c33c <disk_read+0xd4>)
   2c30e:	4798      	blx	r3
   2c310:	1e03      	subs	r3, r0, #0
   2c312:	d001      	beq.n	2c318 <disk_read+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2c314:	2301      	movs	r3, #1
   2c316:	e009      	b.n	2c32c <disk_read+0xc4>
	for (i = 0; i < count; i++) {
   2c318:	69fb      	ldr	r3, [r7, #28]
   2c31a:	3301      	adds	r3, #1
   2c31c:	61fb      	str	r3, [r7, #28]
   2c31e:	230e      	movs	r3, #14
   2c320:	18fb      	adds	r3, r7, r3
   2c322:	781a      	ldrb	r2, [r3, #0]
   2c324:	69fb      	ldr	r3, [r7, #28]
   2c326:	429a      	cmp	r2, r3
   2c328:	d8dd      	bhi.n	2c2e6 <disk_read+0x7e>
		}
	}

	return RES_OK;
   2c32a:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2c32c:	0018      	movs	r0, r3
   2c32e:	46bd      	mov	sp, r7
   2c330:	b009      	add	sp, #36	; 0x24
   2c332:	bd90      	pop	{r4, r7, pc}
   2c334:	00026f09 	.word	0x00026f09
   2c338:	00026ebd 	.word	0x00026ebd
   2c33c:	00026f7d 	.word	0x00026f7d

0002c340 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
   2c340:	b590      	push	{r4, r7, lr}
   2c342:	b089      	sub	sp, #36	; 0x24
   2c344:	af00      	add	r7, sp, #0
   2c346:	60b9      	str	r1, [r7, #8]
   2c348:	607a      	str	r2, [r7, #4]
   2c34a:	0019      	movs	r1, r3
   2c34c:	230f      	movs	r3, #15
   2c34e:	18fb      	adds	r3, r7, r3
   2c350:	1c02      	adds	r2, r0, #0
   2c352:	701a      	strb	r2, [r3, #0]
   2c354:	230e      	movs	r3, #14
   2c356:	18fb      	adds	r3, r7, r3
   2c358:	1c0a      	adds	r2, r1, #0
   2c35a:	701a      	strb	r2, [r3, #0]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
   2c35c:	231b      	movs	r3, #27
   2c35e:	18fc      	adds	r4, r7, r3
   2c360:	230f      	movs	r3, #15
   2c362:	18fb      	adds	r3, r7, r3
   2c364:	781b      	ldrb	r3, [r3, #0]
   2c366:	0018      	movs	r0, r3
   2c368:	4b28      	ldr	r3, [pc, #160]	; (2c40c <disk_write+0xcc>)
   2c36a:	4798      	blx	r3
   2c36c:	0003      	movs	r3, r0
   2c36e:	7023      	strb	r3, [r4, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
   2c370:	231b      	movs	r3, #27
   2c372:	18fb      	adds	r3, r7, r3
   2c374:	781b      	ldrb	r3, [r3, #0]
   2c376:	2b00      	cmp	r3, #0
   2c378:	d101      	bne.n	2c37e <disk_write+0x3e>
		return RES_ERROR;
   2c37a:	2301      	movs	r3, #1
   2c37c:	e042      	b.n	2c404 <disk_write+0xc4>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
   2c37e:	2314      	movs	r3, #20
   2c380:	18fa      	adds	r2, r7, r3
   2c382:	230f      	movs	r3, #15
   2c384:	18fb      	adds	r3, r7, r3
   2c386:	781b      	ldrb	r3, [r3, #0]
   2c388:	0011      	movs	r1, r2
   2c38a:	0018      	movs	r0, r3
   2c38c:	4b20      	ldr	r3, [pc, #128]	; (2c410 <disk_write+0xd0>)
   2c38e:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
   2c390:	230e      	movs	r3, #14
   2c392:	18fb      	adds	r3, r7, r3
   2c394:	781b      	ldrb	r3, [r3, #0]
   2c396:	221b      	movs	r2, #27
   2c398:	18ba      	adds	r2, r7, r2
   2c39a:	7812      	ldrb	r2, [r2, #0]
   2c39c:	4353      	muls	r3, r2
   2c39e:	001a      	movs	r2, r3
   2c3a0:	687b      	ldr	r3, [r7, #4]
   2c3a2:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
   2c3a4:	697b      	ldr	r3, [r7, #20]
   2c3a6:	3301      	adds	r3, #1
   2c3a8:	211b      	movs	r1, #27
   2c3aa:	1879      	adds	r1, r7, r1
   2c3ac:	7809      	ldrb	r1, [r1, #0]
   2c3ae:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
   2c3b0:	429a      	cmp	r2, r3
   2c3b2:	d901      	bls.n	2c3b8 <disk_write+0x78>
		return RES_PARERR;
   2c3b4:	2304      	movs	r3, #4
   2c3b6:	e025      	b.n	2c404 <disk_write+0xc4>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
   2c3b8:	2300      	movs	r3, #0
   2c3ba:	61fb      	str	r3, [r7, #28]
   2c3bc:	e01b      	b.n	2c3f6 <disk_write+0xb6>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2c3be:	231b      	movs	r3, #27
   2c3c0:	18fb      	adds	r3, r7, r3
   2c3c2:	781b      	ldrb	r3, [r3, #0]
   2c3c4:	69fa      	ldr	r2, [r7, #28]
   2c3c6:	435a      	muls	r2, r3
   2c3c8:	687b      	ldr	r3, [r7, #4]
   2c3ca:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
   2c3cc:	231b      	movs	r3, #27
   2c3ce:	18fb      	adds	r3, r7, r3
   2c3d0:	781b      	ldrb	r3, [r3, #0]
   2c3d2:	69fa      	ldr	r2, [r7, #28]
   2c3d4:	4353      	muls	r3, r2
   2c3d6:	025b      	lsls	r3, r3, #9
   2c3d8:	68ba      	ldr	r2, [r7, #8]
   2c3da:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
   2c3dc:	230f      	movs	r3, #15
   2c3de:	18fb      	adds	r3, r7, r3
   2c3e0:	781b      	ldrb	r3, [r3, #0]
   2c3e2:	0018      	movs	r0, r3
   2c3e4:	4b0b      	ldr	r3, [pc, #44]	; (2c414 <disk_write+0xd4>)
   2c3e6:	4798      	blx	r3
   2c3e8:	1e03      	subs	r3, r0, #0
   2c3ea:	d001      	beq.n	2c3f0 <disk_write+0xb0>
				CTRL_GOOD) {
			return RES_ERROR;
   2c3ec:	2301      	movs	r3, #1
   2c3ee:	e009      	b.n	2c404 <disk_write+0xc4>
	for (i = 0; i < count; i++) {
   2c3f0:	69fb      	ldr	r3, [r7, #28]
   2c3f2:	3301      	adds	r3, #1
   2c3f4:	61fb      	str	r3, [r7, #28]
   2c3f6:	230e      	movs	r3, #14
   2c3f8:	18fb      	adds	r3, r7, r3
   2c3fa:	781a      	ldrb	r2, [r3, #0]
   2c3fc:	69fb      	ldr	r3, [r7, #28]
   2c3fe:	429a      	cmp	r2, r3
   2c400:	d8dd      	bhi.n	2c3be <disk_write+0x7e>
		}
	}

	return RES_OK;
   2c402:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
   2c404:	0018      	movs	r0, r3
   2c406:	46bd      	mov	sp, r7
   2c408:	b009      	add	sp, #36	; 0x24
   2c40a:	bd90      	pop	{r4, r7, pc}
   2c40c:	00026f09 	.word	0x00026f09
   2c410:	00026ebd 	.word	0x00026ebd
   2c414:	00026fd1 	.word	0x00026fd1

0002c418 <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
   2c418:	b590      	push	{r4, r7, lr}
   2c41a:	b085      	sub	sp, #20
   2c41c:	af00      	add	r7, sp, #0
   2c41e:	603a      	str	r2, [r7, #0]
   2c420:	1dfb      	adds	r3, r7, #7
   2c422:	1c02      	adds	r2, r0, #0
   2c424:	701a      	strb	r2, [r3, #0]
   2c426:	1dbb      	adds	r3, r7, #6
   2c428:	1c0a      	adds	r2, r1, #0
   2c42a:	701a      	strb	r2, [r3, #0]
	DRESULT res = RES_PARERR;
   2c42c:	230f      	movs	r3, #15
   2c42e:	18fb      	adds	r3, r7, r3
   2c430:	2204      	movs	r2, #4
   2c432:	701a      	strb	r2, [r3, #0]

	switch (ctrl) {
   2c434:	1dbb      	adds	r3, r7, #6
   2c436:	781b      	ldrb	r3, [r3, #0]
   2c438:	2b01      	cmp	r3, #1
   2c43a:	d00f      	beq.n	2c45c <disk_ioctl+0x44>
   2c43c:	dc02      	bgt.n	2c444 <disk_ioctl+0x2c>
   2c43e:	2b00      	cmp	r3, #0
   2c440:	d044      	beq.n	2c4cc <disk_ioctl+0xb4>
   2c442:	e054      	b.n	2c4ee <disk_ioctl+0xd6>
   2c444:	2b02      	cmp	r3, #2
   2c446:	d01a      	beq.n	2c47e <disk_ioctl+0x66>
   2c448:	2b03      	cmp	r3, #3
   2c44a:	d150      	bne.n	2c4ee <disk_ioctl+0xd6>
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
   2c44c:	683b      	ldr	r3, [r7, #0]
   2c44e:	2201      	movs	r2, #1
   2c450:	601a      	str	r2, [r3, #0]
		res = RES_OK;
   2c452:	230f      	movs	r3, #15
   2c454:	18fb      	adds	r3, r7, r3
   2c456:	2200      	movs	r2, #0
   2c458:	701a      	strb	r2, [r3, #0]
		break;
   2c45a:	e04c      	b.n	2c4f6 <disk_ioctl+0xde>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
   2c45c:	2308      	movs	r3, #8
   2c45e:	18fa      	adds	r2, r7, r3
   2c460:	1dfb      	adds	r3, r7, #7
   2c462:	781b      	ldrb	r3, [r3, #0]
   2c464:	0011      	movs	r1, r2
   2c466:	0018      	movs	r0, r3
   2c468:	4b26      	ldr	r3, [pc, #152]	; (2c504 <disk_ioctl+0xec>)
   2c46a:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
   2c46c:	68bb      	ldr	r3, [r7, #8]
   2c46e:	1c5a      	adds	r2, r3, #1
   2c470:	683b      	ldr	r3, [r7, #0]
   2c472:	601a      	str	r2, [r3, #0]

		res = RES_OK;
   2c474:	230f      	movs	r3, #15
   2c476:	18fb      	adds	r3, r7, r3
   2c478:	2200      	movs	r2, #0
   2c47a:	701a      	strb	r2, [r3, #0]
	}
	break;
   2c47c:	e03b      	b.n	2c4f6 <disk_ioctl+0xde>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
   2c47e:	230e      	movs	r3, #14
   2c480:	18fc      	adds	r4, r7, r3
   2c482:	1dfb      	adds	r3, r7, #7
   2c484:	781b      	ldrb	r3, [r3, #0]
   2c486:	0018      	movs	r0, r3
   2c488:	4b1f      	ldr	r3, [pc, #124]	; (2c508 <disk_ioctl+0xf0>)
   2c48a:	4798      	blx	r3
   2c48c:	0003      	movs	r3, r0
   2c48e:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
   2c490:	230e      	movs	r3, #14
   2c492:	18fb      	adds	r3, r7, r3
   2c494:	781b      	ldrb	r3, [r3, #0]
   2c496:	2b01      	cmp	r3, #1
   2c498:	d010      	beq.n	2c4bc <disk_ioctl+0xa4>
   2c49a:	230e      	movs	r3, #14
   2c49c:	18fb      	adds	r3, r7, r3
   2c49e:	781b      	ldrb	r3, [r3, #0]
   2c4a0:	2b02      	cmp	r3, #2
   2c4a2:	d00b      	beq.n	2c4bc <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_1024) &&
   2c4a4:	230e      	movs	r3, #14
   2c4a6:	18fb      	adds	r3, r7, r3
   2c4a8:	781b      	ldrb	r3, [r3, #0]
   2c4aa:	2b04      	cmp	r3, #4
   2c4ac:	d006      	beq.n	2c4bc <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_2048) &&
   2c4ae:	230e      	movs	r3, #14
   2c4b0:	18fb      	adds	r3, r7, r3
   2c4b2:	781b      	ldrb	r3, [r3, #0]
   2c4b4:	2b08      	cmp	r3, #8
   2c4b6:	d001      	beq.n	2c4bc <disk_ioctl+0xa4>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
   2c4b8:	2301      	movs	r3, #1
   2c4ba:	e01f      	b.n	2c4fc <disk_ioctl+0xe4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
   2c4bc:	683b      	ldr	r3, [r7, #0]
   2c4be:	2200      	movs	r2, #0
   2c4c0:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
   2c4c2:	230f      	movs	r3, #15
   2c4c4:	18fb      	adds	r3, r7, r3
   2c4c6:	2200      	movs	r2, #0
   2c4c8:	701a      	strb	r2, [r3, #0]
	}
	break;
   2c4ca:	e014      	b.n	2c4f6 <disk_ioctl+0xde>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
   2c4cc:	1dfb      	adds	r3, r7, #7
   2c4ce:	781b      	ldrb	r3, [r3, #0]
   2c4d0:	0018      	movs	r0, r3
   2c4d2:	4b0e      	ldr	r3, [pc, #56]	; (2c50c <disk_ioctl+0xf4>)
   2c4d4:	4798      	blx	r3
   2c4d6:	1e03      	subs	r3, r0, #0
   2c4d8:	d104      	bne.n	2c4e4 <disk_ioctl+0xcc>
			res = RES_OK;
   2c4da:	230f      	movs	r3, #15
   2c4dc:	18fb      	adds	r3, r7, r3
   2c4de:	2200      	movs	r2, #0
   2c4e0:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
   2c4e2:	e008      	b.n	2c4f6 <disk_ioctl+0xde>
			res = RES_NOTRDY;
   2c4e4:	230f      	movs	r3, #15
   2c4e6:	18fb      	adds	r3, r7, r3
   2c4e8:	2203      	movs	r2, #3
   2c4ea:	701a      	strb	r2, [r3, #0]
		break;
   2c4ec:	e003      	b.n	2c4f6 <disk_ioctl+0xde>

	default:
		res = RES_PARERR;
   2c4ee:	230f      	movs	r3, #15
   2c4f0:	18fb      	adds	r3, r7, r3
   2c4f2:	2204      	movs	r2, #4
   2c4f4:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2c4f6:	230f      	movs	r3, #15
   2c4f8:	18fb      	adds	r3, r7, r3
   2c4fa:	781b      	ldrb	r3, [r3, #0]
}
   2c4fc:	0018      	movs	r0, r3
   2c4fe:	46bd      	mov	sp, r7
   2c500:	b005      	add	sp, #20
   2c502:	bd90      	pop	{r4, r7, pc}
   2c504:	00026ebd 	.word	0x00026ebd
   2c508:	00026f09 	.word	0x00026f09
   2c50c:	00026e7d 	.word	0x00026e7d

0002c510 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
   2c510:	b580      	push	{r7, lr}
   2c512:	b084      	sub	sp, #16
   2c514:	af00      	add	r7, sp, #0
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
   2c516:	1d3a      	adds	r2, r7, #4
   2c518:	4b12      	ldr	r3, [pc, #72]	; (2c564 <get_fattime+0x54>)
   2c51a:	0011      	movs	r1, r2
   2c51c:	0018      	movs	r0, r3
   2c51e:	4b12      	ldr	r3, [pc, #72]	; (2c568 <get_fattime+0x58>)
   2c520:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
   2c522:	1d3b      	adds	r3, r7, #4
   2c524:	88db      	ldrh	r3, [r3, #6]
   2c526:	4a11      	ldr	r2, [pc, #68]	; (2c56c <get_fattime+0x5c>)
   2c528:	4694      	mov	ip, r2
   2c52a:	4463      	add	r3, ip
   2c52c:	065a      	lsls	r2, r3, #25
			| (current_time.month << 21)
   2c52e:	1d3b      	adds	r3, r7, #4
   2c530:	795b      	ldrb	r3, [r3, #5]
   2c532:	055b      	lsls	r3, r3, #21
   2c534:	431a      	orrs	r2, r3
			| (current_time.day << 16)
   2c536:	1d3b      	adds	r3, r7, #4
   2c538:	791b      	ldrb	r3, [r3, #4]
   2c53a:	041b      	lsls	r3, r3, #16
   2c53c:	431a      	orrs	r2, r3
			| (current_time.hour << 11)
   2c53e:	1d3b      	adds	r3, r7, #4
   2c540:	789b      	ldrb	r3, [r3, #2]
   2c542:	02db      	lsls	r3, r3, #11
   2c544:	431a      	orrs	r2, r3
			| (current_time.minute << 5)
   2c546:	1d3b      	adds	r3, r7, #4
   2c548:	785b      	ldrb	r3, [r3, #1]
   2c54a:	015b      	lsls	r3, r3, #5
   2c54c:	4313      	orrs	r3, r2
			| ((current_time.second >> 1) << 0);
   2c54e:	1d3a      	adds	r2, r7, #4
   2c550:	7812      	ldrb	r2, [r2, #0]
   2c552:	0852      	lsrs	r2, r2, #1
   2c554:	b2d2      	uxtb	r2, r2
   2c556:	4313      	orrs	r3, r2
	ul_time = ((current_time.year - 1980) << 25)
   2c558:	60fb      	str	r3, [r7, #12]

	return ul_time;
   2c55a:	68fb      	ldr	r3, [r7, #12]
}
   2c55c:	0018      	movs	r0, r3
   2c55e:	46bd      	mov	sp, r7
   2c560:	b004      	add	sp, #16
   2c562:	bd80      	pop	{r7, pc}
   2c564:	20005c8c 	.word	0x20005c8c
   2c568:	00027ce9 	.word	0x00027ce9
   2c56c:	fffff844 	.word	0xfffff844

0002c570 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
   2c570:	b580      	push	{r7, lr}
   2c572:	b086      	sub	sp, #24
   2c574:	af00      	add	r7, sp, #0
   2c576:	60f8      	str	r0, [r7, #12]
   2c578:	60b9      	str	r1, [r7, #8]
   2c57a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2c57c:	68fb      	ldr	r3, [r7, #12]
   2c57e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
   2c580:	68bb      	ldr	r3, [r7, #8]
   2c582:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
   2c584:	e007      	b.n	2c596 <mem_cpy+0x26>
		*d++ = *s++;
   2c586:	697b      	ldr	r3, [r7, #20]
   2c588:	1c5a      	adds	r2, r3, #1
   2c58a:	617a      	str	r2, [r7, #20]
   2c58c:	693a      	ldr	r2, [r7, #16]
   2c58e:	1c51      	adds	r1, r2, #1
   2c590:	6139      	str	r1, [r7, #16]
   2c592:	7812      	ldrb	r2, [r2, #0]
   2c594:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2c596:	687b      	ldr	r3, [r7, #4]
   2c598:	1e5a      	subs	r2, r3, #1
   2c59a:	607a      	str	r2, [r7, #4]
   2c59c:	2b00      	cmp	r3, #0
   2c59e:	d1f2      	bne.n	2c586 <mem_cpy+0x16>
}
   2c5a0:	46c0      	nop			; (mov r8, r8)
   2c5a2:	46bd      	mov	sp, r7
   2c5a4:	b006      	add	sp, #24
   2c5a6:	bd80      	pop	{r7, pc}

0002c5a8 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
   2c5a8:	b580      	push	{r7, lr}
   2c5aa:	b086      	sub	sp, #24
   2c5ac:	af00      	add	r7, sp, #0
   2c5ae:	60f8      	str	r0, [r7, #12]
   2c5b0:	60b9      	str	r1, [r7, #8]
   2c5b2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
   2c5b4:	68fb      	ldr	r3, [r7, #12]
   2c5b6:	617b      	str	r3, [r7, #20]

	while (cnt--)
   2c5b8:	e005      	b.n	2c5c6 <mem_set+0x1e>
		*d++ = (BYTE)val;
   2c5ba:	697b      	ldr	r3, [r7, #20]
   2c5bc:	1c5a      	adds	r2, r3, #1
   2c5be:	617a      	str	r2, [r7, #20]
   2c5c0:	68ba      	ldr	r2, [r7, #8]
   2c5c2:	b2d2      	uxtb	r2, r2
   2c5c4:	701a      	strb	r2, [r3, #0]
	while (cnt--)
   2c5c6:	687b      	ldr	r3, [r7, #4]
   2c5c8:	1e5a      	subs	r2, r3, #1
   2c5ca:	607a      	str	r2, [r7, #4]
   2c5cc:	2b00      	cmp	r3, #0
   2c5ce:	d1f4      	bne.n	2c5ba <mem_set+0x12>
}
   2c5d0:	46c0      	nop			; (mov r8, r8)
   2c5d2:	46bd      	mov	sp, r7
   2c5d4:	b006      	add	sp, #24
   2c5d6:	bd80      	pop	{r7, pc}

0002c5d8 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
   2c5d8:	b580      	push	{r7, lr}
   2c5da:	b088      	sub	sp, #32
   2c5dc:	af00      	add	r7, sp, #0
   2c5de:	60f8      	str	r0, [r7, #12]
   2c5e0:	60b9      	str	r1, [r7, #8]
   2c5e2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
   2c5e4:	68fb      	ldr	r3, [r7, #12]
   2c5e6:	61fb      	str	r3, [r7, #28]
   2c5e8:	68bb      	ldr	r3, [r7, #8]
   2c5ea:	61bb      	str	r3, [r7, #24]
	int r = 0;
   2c5ec:	2300      	movs	r3, #0
   2c5ee:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
   2c5f0:	46c0      	nop			; (mov r8, r8)
   2c5f2:	687b      	ldr	r3, [r7, #4]
   2c5f4:	1e5a      	subs	r2, r3, #1
   2c5f6:	607a      	str	r2, [r7, #4]
   2c5f8:	2b00      	cmp	r3, #0
   2c5fa:	d00d      	beq.n	2c618 <mem_cmp+0x40>
   2c5fc:	69fb      	ldr	r3, [r7, #28]
   2c5fe:	1c5a      	adds	r2, r3, #1
   2c600:	61fa      	str	r2, [r7, #28]
   2c602:	781b      	ldrb	r3, [r3, #0]
   2c604:	0019      	movs	r1, r3
   2c606:	69bb      	ldr	r3, [r7, #24]
   2c608:	1c5a      	adds	r2, r3, #1
   2c60a:	61ba      	str	r2, [r7, #24]
   2c60c:	781b      	ldrb	r3, [r3, #0]
   2c60e:	1acb      	subs	r3, r1, r3
   2c610:	617b      	str	r3, [r7, #20]
   2c612:	697b      	ldr	r3, [r7, #20]
   2c614:	2b00      	cmp	r3, #0
   2c616:	d0ec      	beq.n	2c5f2 <mem_cmp+0x1a>
	return r;
   2c618:	697b      	ldr	r3, [r7, #20]
}
   2c61a:	0018      	movs	r0, r3
   2c61c:	46bd      	mov	sp, r7
   2c61e:	b008      	add	sp, #32
   2c620:	bd80      	pop	{r7, pc}

0002c622 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
   2c622:	b580      	push	{r7, lr}
   2c624:	b082      	sub	sp, #8
   2c626:	af00      	add	r7, sp, #0
   2c628:	6078      	str	r0, [r7, #4]
   2c62a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
   2c62c:	e002      	b.n	2c634 <chk_chr+0x12>
   2c62e:	687b      	ldr	r3, [r7, #4]
   2c630:	3301      	adds	r3, #1
   2c632:	607b      	str	r3, [r7, #4]
   2c634:	687b      	ldr	r3, [r7, #4]
   2c636:	781b      	ldrb	r3, [r3, #0]
   2c638:	2b00      	cmp	r3, #0
   2c63a:	d005      	beq.n	2c648 <chk_chr+0x26>
   2c63c:	687b      	ldr	r3, [r7, #4]
   2c63e:	781b      	ldrb	r3, [r3, #0]
   2c640:	001a      	movs	r2, r3
   2c642:	683b      	ldr	r3, [r7, #0]
   2c644:	429a      	cmp	r2, r3
   2c646:	d1f2      	bne.n	2c62e <chk_chr+0xc>
	return *str;
   2c648:	687b      	ldr	r3, [r7, #4]
   2c64a:	781b      	ldrb	r3, [r3, #0]
}
   2c64c:	0018      	movs	r0, r3
   2c64e:	46bd      	mov	sp, r7
   2c650:	b002      	add	sp, #8
   2c652:	bd80      	pop	{r7, pc}

0002c654 <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
   2c654:	b590      	push	{r4, r7, lr}
   2c656:	b085      	sub	sp, #20
   2c658:	af00      	add	r7, sp, #0
   2c65a:	6078      	str	r0, [r7, #4]
   2c65c:	6039      	str	r1, [r7, #0]
	DWORD wsect;


	wsect = fs->winsect;
   2c65e:	687b      	ldr	r3, [r7, #4]
   2c660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2c662:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
   2c664:	68fa      	ldr	r2, [r7, #12]
   2c666:	683b      	ldr	r3, [r7, #0]
   2c668:	429a      	cmp	r2, r3
   2c66a:	d04e      	beq.n	2c70a <move_window+0xb6>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
   2c66c:	687b      	ldr	r3, [r7, #4]
   2c66e:	791b      	ldrb	r3, [r3, #4]
   2c670:	2b00      	cmp	r3, #0
   2c672:	d037      	beq.n	2c6e4 <move_window+0x90>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
   2c674:	687b      	ldr	r3, [r7, #4]
   2c676:	7858      	ldrb	r0, [r3, #1]
   2c678:	687b      	ldr	r3, [r7, #4]
   2c67a:	3330      	adds	r3, #48	; 0x30
   2c67c:	0019      	movs	r1, r3
   2c67e:	68fa      	ldr	r2, [r7, #12]
   2c680:	2301      	movs	r3, #1
   2c682:	4c24      	ldr	r4, [pc, #144]	; (2c714 <move_window+0xc0>)
   2c684:	47a0      	blx	r4
   2c686:	1e03      	subs	r3, r0, #0
   2c688:	d001      	beq.n	2c68e <move_window+0x3a>
				return FR_DISK_ERR;
   2c68a:	2301      	movs	r3, #1
   2c68c:	e03e      	b.n	2c70c <move_window+0xb8>
			fs->wflag = 0;
   2c68e:	687b      	ldr	r3, [r7, #4]
   2c690:	2200      	movs	r2, #0
   2c692:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
   2c694:	687b      	ldr	r3, [r7, #4]
   2c696:	6a1a      	ldr	r2, [r3, #32]
   2c698:	687b      	ldr	r3, [r7, #4]
   2c69a:	69db      	ldr	r3, [r3, #28]
   2c69c:	18d2      	adds	r2, r2, r3
   2c69e:	68fb      	ldr	r3, [r7, #12]
   2c6a0:	429a      	cmp	r2, r3
   2c6a2:	d91f      	bls.n	2c6e4 <move_window+0x90>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2c6a4:	230b      	movs	r3, #11
   2c6a6:	18fb      	adds	r3, r7, r3
   2c6a8:	687a      	ldr	r2, [r7, #4]
   2c6aa:	78d2      	ldrb	r2, [r2, #3]
   2c6ac:	701a      	strb	r2, [r3, #0]
   2c6ae:	e014      	b.n	2c6da <move_window+0x86>
					wsect += fs->fsize;
   2c6b0:	687b      	ldr	r3, [r7, #4]
   2c6b2:	69db      	ldr	r3, [r3, #28]
   2c6b4:	68fa      	ldr	r2, [r7, #12]
   2c6b6:	18d3      	adds	r3, r2, r3
   2c6b8:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
   2c6ba:	687b      	ldr	r3, [r7, #4]
   2c6bc:	7858      	ldrb	r0, [r3, #1]
   2c6be:	687b      	ldr	r3, [r7, #4]
   2c6c0:	3330      	adds	r3, #48	; 0x30
   2c6c2:	0019      	movs	r1, r3
   2c6c4:	68fa      	ldr	r2, [r7, #12]
   2c6c6:	2301      	movs	r3, #1
   2c6c8:	4c12      	ldr	r4, [pc, #72]	; (2c714 <move_window+0xc0>)
   2c6ca:	47a0      	blx	r4
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
   2c6cc:	230b      	movs	r3, #11
   2c6ce:	18fb      	adds	r3, r7, r3
   2c6d0:	781a      	ldrb	r2, [r3, #0]
   2c6d2:	230b      	movs	r3, #11
   2c6d4:	18fb      	adds	r3, r7, r3
   2c6d6:	3a01      	subs	r2, #1
   2c6d8:	701a      	strb	r2, [r3, #0]
   2c6da:	230b      	movs	r3, #11
   2c6dc:	18fb      	adds	r3, r7, r3
   2c6de:	781b      	ldrb	r3, [r3, #0]
   2c6e0:	2b01      	cmp	r3, #1
   2c6e2:	d8e5      	bhi.n	2c6b0 <move_window+0x5c>
				}
			}
		}
#endif
		if (sector) {
   2c6e4:	683b      	ldr	r3, [r7, #0]
   2c6e6:	2b00      	cmp	r3, #0
   2c6e8:	d00f      	beq.n	2c70a <move_window+0xb6>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
   2c6ea:	687b      	ldr	r3, [r7, #4]
   2c6ec:	7858      	ldrb	r0, [r3, #1]
   2c6ee:	687b      	ldr	r3, [r7, #4]
   2c6f0:	3330      	adds	r3, #48	; 0x30
   2c6f2:	0019      	movs	r1, r3
   2c6f4:	683a      	ldr	r2, [r7, #0]
   2c6f6:	2301      	movs	r3, #1
   2c6f8:	4c07      	ldr	r4, [pc, #28]	; (2c718 <move_window+0xc4>)
   2c6fa:	47a0      	blx	r4
   2c6fc:	1e03      	subs	r3, r0, #0
   2c6fe:	d001      	beq.n	2c704 <move_window+0xb0>
				return FR_DISK_ERR;
   2c700:	2301      	movs	r3, #1
   2c702:	e003      	b.n	2c70c <move_window+0xb8>
			fs->winsect = sector;
   2c704:	687b      	ldr	r3, [r7, #4]
   2c706:	683a      	ldr	r2, [r7, #0]
   2c708:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
   2c70a:	2300      	movs	r3, #0
}
   2c70c:	0018      	movs	r0, r3
   2c70e:	46bd      	mov	sp, r7
   2c710:	b005      	add	sp, #20
   2c712:	bd90      	pop	{r4, r7, pc}
   2c714:	0002c341 	.word	0x0002c341
   2c718:	0002c269 	.word	0x0002c269

0002c71c <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
   2c71c:	b590      	push	{r4, r7, lr}
   2c71e:	b085      	sub	sp, #20
   2c720:	af00      	add	r7, sp, #0
   2c722:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = move_window(fs, 0);
   2c724:	230f      	movs	r3, #15
   2c726:	18fc      	adds	r4, r7, r3
   2c728:	687b      	ldr	r3, [r7, #4]
   2c72a:	2100      	movs	r1, #0
   2c72c:	0018      	movs	r0, r3
   2c72e:	4b52      	ldr	r3, [pc, #328]	; (2c878 <sync+0x15c>)
   2c730:	4798      	blx	r3
   2c732:	0003      	movs	r3, r0
   2c734:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2c736:	230f      	movs	r3, #15
   2c738:	18fb      	adds	r3, r7, r3
   2c73a:	781b      	ldrb	r3, [r3, #0]
   2c73c:	2b00      	cmp	r3, #0
   2c73e:	d000      	beq.n	2c742 <sync+0x26>
   2c740:	e093      	b.n	2c86a <sync+0x14e>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
   2c742:	687b      	ldr	r3, [r7, #4]
   2c744:	781b      	ldrb	r3, [r3, #0]
   2c746:	2b03      	cmp	r3, #3
   2c748:	d000      	beq.n	2c74c <sync+0x30>
   2c74a:	e081      	b.n	2c850 <sync+0x134>
   2c74c:	687b      	ldr	r3, [r7, #4]
   2c74e:	795b      	ldrb	r3, [r3, #5]
   2c750:	2b00      	cmp	r3, #0
   2c752:	d07d      	beq.n	2c850 <sync+0x134>
			fs->winsect = 0;
   2c754:	687b      	ldr	r3, [r7, #4]
   2c756:	2200      	movs	r2, #0
   2c758:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
   2c75a:	687b      	ldr	r3, [r7, #4]
   2c75c:	3330      	adds	r3, #48	; 0x30
   2c75e:	0018      	movs	r0, r3
   2c760:	2380      	movs	r3, #128	; 0x80
   2c762:	009b      	lsls	r3, r3, #2
   2c764:	001a      	movs	r2, r3
   2c766:	2100      	movs	r1, #0
   2c768:	4b44      	ldr	r3, [pc, #272]	; (2c87c <sync+0x160>)
   2c76a:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
   2c76c:	687b      	ldr	r3, [r7, #4]
   2c76e:	4a44      	ldr	r2, [pc, #272]	; (2c880 <sync+0x164>)
   2c770:	2155      	movs	r1, #85	; 0x55
   2c772:	5499      	strb	r1, [r3, r2]
   2c774:	687b      	ldr	r3, [r7, #4]
   2c776:	4a43      	ldr	r2, [pc, #268]	; (2c884 <sync+0x168>)
   2c778:	21aa      	movs	r1, #170	; 0xaa
   2c77a:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
   2c77c:	687b      	ldr	r3, [r7, #4]
   2c77e:	2230      	movs	r2, #48	; 0x30
   2c780:	2152      	movs	r1, #82	; 0x52
   2c782:	5499      	strb	r1, [r3, r2]
   2c784:	687b      	ldr	r3, [r7, #4]
   2c786:	2231      	movs	r2, #49	; 0x31
   2c788:	2152      	movs	r1, #82	; 0x52
   2c78a:	5499      	strb	r1, [r3, r2]
   2c78c:	687b      	ldr	r3, [r7, #4]
   2c78e:	2232      	movs	r2, #50	; 0x32
   2c790:	2161      	movs	r1, #97	; 0x61
   2c792:	5499      	strb	r1, [r3, r2]
   2c794:	687b      	ldr	r3, [r7, #4]
   2c796:	2233      	movs	r2, #51	; 0x33
   2c798:	2141      	movs	r1, #65	; 0x41
   2c79a:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
   2c79c:	687a      	ldr	r2, [r7, #4]
   2c79e:	2385      	movs	r3, #133	; 0x85
   2c7a0:	009b      	lsls	r3, r3, #2
   2c7a2:	2172      	movs	r1, #114	; 0x72
   2c7a4:	54d1      	strb	r1, [r2, r3]
   2c7a6:	687b      	ldr	r3, [r7, #4]
   2c7a8:	4a37      	ldr	r2, [pc, #220]	; (2c888 <sync+0x16c>)
   2c7aa:	2172      	movs	r1, #114	; 0x72
   2c7ac:	5499      	strb	r1, [r3, r2]
   2c7ae:	687b      	ldr	r3, [r7, #4]
   2c7b0:	4a36      	ldr	r2, [pc, #216]	; (2c88c <sync+0x170>)
   2c7b2:	2141      	movs	r1, #65	; 0x41
   2c7b4:	5499      	strb	r1, [r3, r2]
   2c7b6:	687b      	ldr	r3, [r7, #4]
   2c7b8:	4a35      	ldr	r2, [pc, #212]	; (2c890 <sync+0x174>)
   2c7ba:	2161      	movs	r1, #97	; 0x61
   2c7bc:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
   2c7be:	687b      	ldr	r3, [r7, #4]
   2c7c0:	691b      	ldr	r3, [r3, #16]
   2c7c2:	b2d9      	uxtb	r1, r3
   2c7c4:	687a      	ldr	r2, [r7, #4]
   2c7c6:	2386      	movs	r3, #134	; 0x86
   2c7c8:	009b      	lsls	r3, r3, #2
   2c7ca:	54d1      	strb	r1, [r2, r3]
   2c7cc:	687b      	ldr	r3, [r7, #4]
   2c7ce:	691b      	ldr	r3, [r3, #16]
   2c7d0:	b29b      	uxth	r3, r3
   2c7d2:	0a1b      	lsrs	r3, r3, #8
   2c7d4:	b29b      	uxth	r3, r3
   2c7d6:	b2d9      	uxtb	r1, r3
   2c7d8:	687b      	ldr	r3, [r7, #4]
   2c7da:	4a2e      	ldr	r2, [pc, #184]	; (2c894 <sync+0x178>)
   2c7dc:	5499      	strb	r1, [r3, r2]
   2c7de:	687b      	ldr	r3, [r7, #4]
   2c7e0:	691b      	ldr	r3, [r3, #16]
   2c7e2:	0c1b      	lsrs	r3, r3, #16
   2c7e4:	b2d9      	uxtb	r1, r3
   2c7e6:	687b      	ldr	r3, [r7, #4]
   2c7e8:	4a2b      	ldr	r2, [pc, #172]	; (2c898 <sync+0x17c>)
   2c7ea:	5499      	strb	r1, [r3, r2]
   2c7ec:	687b      	ldr	r3, [r7, #4]
   2c7ee:	691b      	ldr	r3, [r3, #16]
   2c7f0:	0e1b      	lsrs	r3, r3, #24
   2c7f2:	b2d9      	uxtb	r1, r3
   2c7f4:	687b      	ldr	r3, [r7, #4]
   2c7f6:	4a29      	ldr	r2, [pc, #164]	; (2c89c <sync+0x180>)
   2c7f8:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
   2c7fa:	687b      	ldr	r3, [r7, #4]
   2c7fc:	68db      	ldr	r3, [r3, #12]
   2c7fe:	b2d9      	uxtb	r1, r3
   2c800:	687a      	ldr	r2, [r7, #4]
   2c802:	2387      	movs	r3, #135	; 0x87
   2c804:	009b      	lsls	r3, r3, #2
   2c806:	54d1      	strb	r1, [r2, r3]
   2c808:	687b      	ldr	r3, [r7, #4]
   2c80a:	68db      	ldr	r3, [r3, #12]
   2c80c:	b29b      	uxth	r3, r3
   2c80e:	0a1b      	lsrs	r3, r3, #8
   2c810:	b29b      	uxth	r3, r3
   2c812:	b2d9      	uxtb	r1, r3
   2c814:	687b      	ldr	r3, [r7, #4]
   2c816:	4a22      	ldr	r2, [pc, #136]	; (2c8a0 <sync+0x184>)
   2c818:	5499      	strb	r1, [r3, r2]
   2c81a:	687b      	ldr	r3, [r7, #4]
   2c81c:	68db      	ldr	r3, [r3, #12]
   2c81e:	0c1b      	lsrs	r3, r3, #16
   2c820:	b2d9      	uxtb	r1, r3
   2c822:	687b      	ldr	r3, [r7, #4]
   2c824:	4a1f      	ldr	r2, [pc, #124]	; (2c8a4 <sync+0x188>)
   2c826:	5499      	strb	r1, [r3, r2]
   2c828:	687b      	ldr	r3, [r7, #4]
   2c82a:	68db      	ldr	r3, [r3, #12]
   2c82c:	0e1b      	lsrs	r3, r3, #24
   2c82e:	b2d9      	uxtb	r1, r3
   2c830:	687b      	ldr	r3, [r7, #4]
   2c832:	4a1d      	ldr	r2, [pc, #116]	; (2c8a8 <sync+0x18c>)
   2c834:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
   2c836:	687b      	ldr	r3, [r7, #4]
   2c838:	7858      	ldrb	r0, [r3, #1]
   2c83a:	687b      	ldr	r3, [r7, #4]
   2c83c:	3330      	adds	r3, #48	; 0x30
   2c83e:	0019      	movs	r1, r3
   2c840:	687b      	ldr	r3, [r7, #4]
   2c842:	695a      	ldr	r2, [r3, #20]
   2c844:	2301      	movs	r3, #1
   2c846:	4c19      	ldr	r4, [pc, #100]	; (2c8ac <sync+0x190>)
   2c848:	47a0      	blx	r4
			fs->fsi_flag = 0;
   2c84a:	687b      	ldr	r3, [r7, #4]
   2c84c:	2200      	movs	r2, #0
   2c84e:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
   2c850:	687b      	ldr	r3, [r7, #4]
   2c852:	785b      	ldrb	r3, [r3, #1]
   2c854:	2200      	movs	r2, #0
   2c856:	2100      	movs	r1, #0
   2c858:	0018      	movs	r0, r3
   2c85a:	4b15      	ldr	r3, [pc, #84]	; (2c8b0 <sync+0x194>)
   2c85c:	4798      	blx	r3
   2c85e:	1e03      	subs	r3, r0, #0
   2c860:	d003      	beq.n	2c86a <sync+0x14e>
			res = FR_DISK_ERR;
   2c862:	230f      	movs	r3, #15
   2c864:	18fb      	adds	r3, r7, r3
   2c866:	2201      	movs	r2, #1
   2c868:	701a      	strb	r2, [r3, #0]
	}

	return res;
   2c86a:	230f      	movs	r3, #15
   2c86c:	18fb      	adds	r3, r7, r3
   2c86e:	781b      	ldrb	r3, [r3, #0]
}
   2c870:	0018      	movs	r0, r3
   2c872:	46bd      	mov	sp, r7
   2c874:	b005      	add	sp, #20
   2c876:	bd90      	pop	{r4, r7, pc}
   2c878:	0002c655 	.word	0x0002c655
   2c87c:	0002c5a9 	.word	0x0002c5a9
   2c880:	0000022e 	.word	0x0000022e
   2c884:	0000022f 	.word	0x0000022f
   2c888:	00000215 	.word	0x00000215
   2c88c:	00000216 	.word	0x00000216
   2c890:	00000217 	.word	0x00000217
   2c894:	00000219 	.word	0x00000219
   2c898:	0000021a 	.word	0x0000021a
   2c89c:	0000021b 	.word	0x0000021b
   2c8a0:	0000021d 	.word	0x0000021d
   2c8a4:	0000021e 	.word	0x0000021e
   2c8a8:	0000021f 	.word	0x0000021f
   2c8ac:	0002c341 	.word	0x0002c341
   2c8b0:	0002c419 	.word	0x0002c419

0002c8b4 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
   2c8b4:	b580      	push	{r7, lr}
   2c8b6:	b082      	sub	sp, #8
   2c8b8:	af00      	add	r7, sp, #0
   2c8ba:	6078      	str	r0, [r7, #4]
   2c8bc:	6039      	str	r1, [r7, #0]
	clst -= 2;
   2c8be:	683b      	ldr	r3, [r7, #0]
   2c8c0:	3b02      	subs	r3, #2
   2c8c2:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
   2c8c4:	687b      	ldr	r3, [r7, #4]
   2c8c6:	699b      	ldr	r3, [r3, #24]
   2c8c8:	1e9a      	subs	r2, r3, #2
   2c8ca:	683b      	ldr	r3, [r7, #0]
   2c8cc:	429a      	cmp	r2, r3
   2c8ce:	d801      	bhi.n	2c8d4 <clust2sect+0x20>
   2c8d0:	2300      	movs	r3, #0
   2c8d2:	e007      	b.n	2c8e4 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
   2c8d4:	687b      	ldr	r3, [r7, #4]
   2c8d6:	789b      	ldrb	r3, [r3, #2]
   2c8d8:	001a      	movs	r2, r3
   2c8da:	683b      	ldr	r3, [r7, #0]
   2c8dc:	435a      	muls	r2, r3
   2c8de:	687b      	ldr	r3, [r7, #4]
   2c8e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2c8e2:	18d3      	adds	r3, r2, r3
}
   2c8e4:	0018      	movs	r0, r3
   2c8e6:	46bd      	mov	sp, r7
   2c8e8:	b002      	add	sp, #8
   2c8ea:	bd80      	pop	{r7, pc}

0002c8ec <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
   2c8ec:	b580      	push	{r7, lr}
   2c8ee:	b086      	sub	sp, #24
   2c8f0:	af00      	add	r7, sp, #0
   2c8f2:	6078      	str	r0, [r7, #4]
   2c8f4:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
   2c8f6:	683b      	ldr	r3, [r7, #0]
   2c8f8:	2b01      	cmp	r3, #1
   2c8fa:	d904      	bls.n	2c906 <get_fat+0x1a>
   2c8fc:	687b      	ldr	r3, [r7, #4]
   2c8fe:	699a      	ldr	r2, [r3, #24]
   2c900:	683b      	ldr	r3, [r7, #0]
   2c902:	429a      	cmp	r2, r3
   2c904:	d801      	bhi.n	2c90a <get_fat+0x1e>
		return 1;
   2c906:	2301      	movs	r3, #1
   2c908:	e09f      	b.n	2ca4a <get_fat+0x15e>

	switch (fs->fs_type) {
   2c90a:	687b      	ldr	r3, [r7, #4]
   2c90c:	781b      	ldrb	r3, [r3, #0]
   2c90e:	2b02      	cmp	r3, #2
   2c910:	d048      	beq.n	2c9a4 <get_fat+0xb8>
   2c912:	2b03      	cmp	r3, #3
   2c914:	d067      	beq.n	2c9e6 <get_fat+0xfa>
   2c916:	2b01      	cmp	r3, #1
   2c918:	d000      	beq.n	2c91c <get_fat+0x30>
   2c91a:	e094      	b.n	2ca46 <get_fat+0x15a>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
   2c91c:	683b      	ldr	r3, [r7, #0]
   2c91e:	617b      	str	r3, [r7, #20]
   2c920:	697b      	ldr	r3, [r7, #20]
   2c922:	085b      	lsrs	r3, r3, #1
   2c924:	697a      	ldr	r2, [r7, #20]
   2c926:	18d3      	adds	r3, r2, r3
   2c928:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2c92a:	687b      	ldr	r3, [r7, #4]
   2c92c:	6a1a      	ldr	r2, [r3, #32]
   2c92e:	697b      	ldr	r3, [r7, #20]
   2c930:	0a5b      	lsrs	r3, r3, #9
   2c932:	18d2      	adds	r2, r2, r3
   2c934:	687b      	ldr	r3, [r7, #4]
   2c936:	0011      	movs	r1, r2
   2c938:	0018      	movs	r0, r3
   2c93a:	4b46      	ldr	r3, [pc, #280]	; (2ca54 <get_fat+0x168>)
   2c93c:	4798      	blx	r3
   2c93e:	1e03      	subs	r3, r0, #0
   2c940:	d000      	beq.n	2c944 <get_fat+0x58>
   2c942:	e079      	b.n	2ca38 <get_fat+0x14c>
		wc = fs->win[bc % SS(fs)]; bc++;
   2c944:	697b      	ldr	r3, [r7, #20]
   2c946:	05db      	lsls	r3, r3, #23
   2c948:	0ddb      	lsrs	r3, r3, #23
   2c94a:	687a      	ldr	r2, [r7, #4]
   2c94c:	2130      	movs	r1, #48	; 0x30
   2c94e:	18d3      	adds	r3, r2, r3
   2c950:	185b      	adds	r3, r3, r1
   2c952:	781b      	ldrb	r3, [r3, #0]
   2c954:	613b      	str	r3, [r7, #16]
   2c956:	697b      	ldr	r3, [r7, #20]
   2c958:	3301      	adds	r3, #1
   2c95a:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2c95c:	687b      	ldr	r3, [r7, #4]
   2c95e:	6a1a      	ldr	r2, [r3, #32]
   2c960:	697b      	ldr	r3, [r7, #20]
   2c962:	0a5b      	lsrs	r3, r3, #9
   2c964:	18d2      	adds	r2, r2, r3
   2c966:	687b      	ldr	r3, [r7, #4]
   2c968:	0011      	movs	r1, r2
   2c96a:	0018      	movs	r0, r3
   2c96c:	4b39      	ldr	r3, [pc, #228]	; (2ca54 <get_fat+0x168>)
   2c96e:	4798      	blx	r3
   2c970:	1e03      	subs	r3, r0, #0
   2c972:	d163      	bne.n	2ca3c <get_fat+0x150>
		wc |= fs->win[bc % SS(fs)] << 8;
   2c974:	697b      	ldr	r3, [r7, #20]
   2c976:	05db      	lsls	r3, r3, #23
   2c978:	0ddb      	lsrs	r3, r3, #23
   2c97a:	687a      	ldr	r2, [r7, #4]
   2c97c:	2130      	movs	r1, #48	; 0x30
   2c97e:	18d3      	adds	r3, r2, r3
   2c980:	185b      	adds	r3, r3, r1
   2c982:	781b      	ldrb	r3, [r3, #0]
   2c984:	021b      	lsls	r3, r3, #8
   2c986:	001a      	movs	r2, r3
   2c988:	693b      	ldr	r3, [r7, #16]
   2c98a:	4313      	orrs	r3, r2
   2c98c:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
   2c98e:	683b      	ldr	r3, [r7, #0]
   2c990:	2201      	movs	r2, #1
   2c992:	4013      	ands	r3, r2
   2c994:	d002      	beq.n	2c99c <get_fat+0xb0>
   2c996:	693b      	ldr	r3, [r7, #16]
   2c998:	091b      	lsrs	r3, r3, #4
   2c99a:	e056      	b.n	2ca4a <get_fat+0x15e>
   2c99c:	693b      	ldr	r3, [r7, #16]
   2c99e:	051b      	lsls	r3, r3, #20
   2c9a0:	0d1b      	lsrs	r3, r3, #20
   2c9a2:	e052      	b.n	2ca4a <get_fat+0x15e>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2c9a4:	687b      	ldr	r3, [r7, #4]
   2c9a6:	6a1a      	ldr	r2, [r3, #32]
   2c9a8:	683b      	ldr	r3, [r7, #0]
   2c9aa:	0a1b      	lsrs	r3, r3, #8
   2c9ac:	18d2      	adds	r2, r2, r3
   2c9ae:	687b      	ldr	r3, [r7, #4]
   2c9b0:	0011      	movs	r1, r2
   2c9b2:	0018      	movs	r0, r3
   2c9b4:	4b27      	ldr	r3, [pc, #156]	; (2ca54 <get_fat+0x168>)
   2c9b6:	4798      	blx	r3
   2c9b8:	1e03      	subs	r3, r0, #0
   2c9ba:	d141      	bne.n	2ca40 <get_fat+0x154>
		p = &fs->win[clst * 2 % SS(fs)];
   2c9bc:	683b      	ldr	r3, [r7, #0]
   2c9be:	005a      	lsls	r2, r3, #1
   2c9c0:	23ff      	movs	r3, #255	; 0xff
   2c9c2:	005b      	lsls	r3, r3, #1
   2c9c4:	4013      	ands	r3, r2
   2c9c6:	3330      	adds	r3, #48	; 0x30
   2c9c8:	687a      	ldr	r2, [r7, #4]
   2c9ca:	18d3      	adds	r3, r2, r3
   2c9cc:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
   2c9ce:	68fb      	ldr	r3, [r7, #12]
   2c9d0:	3301      	adds	r3, #1
   2c9d2:	781b      	ldrb	r3, [r3, #0]
   2c9d4:	021b      	lsls	r3, r3, #8
   2c9d6:	b21a      	sxth	r2, r3
   2c9d8:	68fb      	ldr	r3, [r7, #12]
   2c9da:	781b      	ldrb	r3, [r3, #0]
   2c9dc:	b21b      	sxth	r3, r3
   2c9de:	4313      	orrs	r3, r2
   2c9e0:	b21b      	sxth	r3, r3
   2c9e2:	b29b      	uxth	r3, r3
   2c9e4:	e031      	b.n	2ca4a <get_fat+0x15e>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2c9e6:	687b      	ldr	r3, [r7, #4]
   2c9e8:	6a1a      	ldr	r2, [r3, #32]
   2c9ea:	683b      	ldr	r3, [r7, #0]
   2c9ec:	09db      	lsrs	r3, r3, #7
   2c9ee:	18d2      	adds	r2, r2, r3
   2c9f0:	687b      	ldr	r3, [r7, #4]
   2c9f2:	0011      	movs	r1, r2
   2c9f4:	0018      	movs	r0, r3
   2c9f6:	4b17      	ldr	r3, [pc, #92]	; (2ca54 <get_fat+0x168>)
   2c9f8:	4798      	blx	r3
   2c9fa:	1e03      	subs	r3, r0, #0
   2c9fc:	d122      	bne.n	2ca44 <get_fat+0x158>
		p = &fs->win[clst * 4 % SS(fs)];
   2c9fe:	683b      	ldr	r3, [r7, #0]
   2ca00:	009a      	lsls	r2, r3, #2
   2ca02:	23fe      	movs	r3, #254	; 0xfe
   2ca04:	005b      	lsls	r3, r3, #1
   2ca06:	4013      	ands	r3, r2
   2ca08:	3330      	adds	r3, #48	; 0x30
   2ca0a:	687a      	ldr	r2, [r7, #4]
   2ca0c:	18d3      	adds	r3, r2, r3
   2ca0e:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
   2ca10:	68fb      	ldr	r3, [r7, #12]
   2ca12:	3303      	adds	r3, #3
   2ca14:	781b      	ldrb	r3, [r3, #0]
   2ca16:	061a      	lsls	r2, r3, #24
   2ca18:	68fb      	ldr	r3, [r7, #12]
   2ca1a:	3302      	adds	r3, #2
   2ca1c:	781b      	ldrb	r3, [r3, #0]
   2ca1e:	041b      	lsls	r3, r3, #16
   2ca20:	4313      	orrs	r3, r2
   2ca22:	68fa      	ldr	r2, [r7, #12]
   2ca24:	3201      	adds	r2, #1
   2ca26:	7812      	ldrb	r2, [r2, #0]
   2ca28:	0212      	lsls	r2, r2, #8
   2ca2a:	4313      	orrs	r3, r2
   2ca2c:	68fa      	ldr	r2, [r7, #12]
   2ca2e:	7812      	ldrb	r2, [r2, #0]
   2ca30:	4313      	orrs	r3, r2
   2ca32:	011b      	lsls	r3, r3, #4
   2ca34:	091b      	lsrs	r3, r3, #4
   2ca36:	e008      	b.n	2ca4a <get_fat+0x15e>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2ca38:	46c0      	nop			; (mov r8, r8)
   2ca3a:	e004      	b.n	2ca46 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
   2ca3c:	46c0      	nop			; (mov r8, r8)
   2ca3e:	e002      	b.n	2ca46 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
   2ca40:	46c0      	nop			; (mov r8, r8)
   2ca42:	e000      	b.n	2ca46 <get_fat+0x15a>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
   2ca44:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
   2ca46:	2301      	movs	r3, #1
   2ca48:	425b      	negs	r3, r3
}
   2ca4a:	0018      	movs	r0, r3
   2ca4c:	46bd      	mov	sp, r7
   2ca4e:	b006      	add	sp, #24
   2ca50:	bd80      	pop	{r7, pc}
   2ca52:	46c0      	nop			; (mov r8, r8)
   2ca54:	0002c655 	.word	0x0002c655

0002ca58 <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
   2ca58:	b590      	push	{r4, r7, lr}
   2ca5a:	b089      	sub	sp, #36	; 0x24
   2ca5c:	af00      	add	r7, sp, #0
   2ca5e:	60f8      	str	r0, [r7, #12]
   2ca60:	60b9      	str	r1, [r7, #8]
   2ca62:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2ca64:	68bb      	ldr	r3, [r7, #8]
   2ca66:	2b01      	cmp	r3, #1
   2ca68:	d904      	bls.n	2ca74 <put_fat+0x1c>
   2ca6a:	68fb      	ldr	r3, [r7, #12]
   2ca6c:	699a      	ldr	r2, [r3, #24]
   2ca6e:	68bb      	ldr	r3, [r7, #8]
   2ca70:	429a      	cmp	r2, r3
   2ca72:	d804      	bhi.n	2ca7e <put_fat+0x26>
		res = FR_INT_ERR;
   2ca74:	231f      	movs	r3, #31
   2ca76:	18fb      	adds	r3, r7, r3
   2ca78:	2202      	movs	r2, #2
   2ca7a:	701a      	strb	r2, [r3, #0]
   2ca7c:	e100      	b.n	2cc80 <put_fat+0x228>

	} else {
		switch (fs->fs_type) {
   2ca7e:	68fb      	ldr	r3, [r7, #12]
   2ca80:	781b      	ldrb	r3, [r3, #0]
   2ca82:	2b02      	cmp	r3, #2
   2ca84:	d100      	bne.n	2ca88 <put_fat+0x30>
   2ca86:	e078      	b.n	2cb7a <put_fat+0x122>
   2ca88:	2b03      	cmp	r3, #3
   2ca8a:	d100      	bne.n	2ca8e <put_fat+0x36>
   2ca8c:	e09e      	b.n	2cbcc <put_fat+0x174>
   2ca8e:	2b01      	cmp	r3, #1
   2ca90:	d000      	beq.n	2ca94 <put_fat+0x3c>
   2ca92:	e0e6      	b.n	2cc62 <put_fat+0x20a>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
   2ca94:	68bb      	ldr	r3, [r7, #8]
   2ca96:	61bb      	str	r3, [r7, #24]
   2ca98:	69bb      	ldr	r3, [r7, #24]
   2ca9a:	085b      	lsrs	r3, r3, #1
   2ca9c:	69ba      	ldr	r2, [r7, #24]
   2ca9e:	18d3      	adds	r3, r2, r3
   2caa0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2caa2:	68fb      	ldr	r3, [r7, #12]
   2caa4:	6a1a      	ldr	r2, [r3, #32]
   2caa6:	69bb      	ldr	r3, [r7, #24]
   2caa8:	0a5b      	lsrs	r3, r3, #9
   2caaa:	18d2      	adds	r2, r2, r3
   2caac:	231f      	movs	r3, #31
   2caae:	18fc      	adds	r4, r7, r3
   2cab0:	68fb      	ldr	r3, [r7, #12]
   2cab2:	0011      	movs	r1, r2
   2cab4:	0018      	movs	r0, r3
   2cab6:	4b76      	ldr	r3, [pc, #472]	; (2cc90 <put_fat+0x238>)
   2cab8:	4798      	blx	r3
   2caba:	0003      	movs	r3, r0
   2cabc:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2cabe:	231f      	movs	r3, #31
   2cac0:	18fb      	adds	r3, r7, r3
   2cac2:	781b      	ldrb	r3, [r3, #0]
   2cac4:	2b00      	cmp	r3, #0
   2cac6:	d000      	beq.n	2caca <put_fat+0x72>
   2cac8:	e0d0      	b.n	2cc6c <put_fat+0x214>
			p = &fs->win[bc % SS(fs)];
   2caca:	69bb      	ldr	r3, [r7, #24]
   2cacc:	05db      	lsls	r3, r3, #23
   2cace:	0ddb      	lsrs	r3, r3, #23
   2cad0:	3330      	adds	r3, #48	; 0x30
   2cad2:	68fa      	ldr	r2, [r7, #12]
   2cad4:	18d3      	adds	r3, r2, r3
   2cad6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
   2cad8:	68bb      	ldr	r3, [r7, #8]
   2cada:	2201      	movs	r2, #1
   2cadc:	4013      	ands	r3, r2
   2cade:	d00d      	beq.n	2cafc <put_fat+0xa4>
   2cae0:	697b      	ldr	r3, [r7, #20]
   2cae2:	781b      	ldrb	r3, [r3, #0]
   2cae4:	b25b      	sxtb	r3, r3
   2cae6:	220f      	movs	r2, #15
   2cae8:	4013      	ands	r3, r2
   2caea:	b25a      	sxtb	r2, r3
   2caec:	687b      	ldr	r3, [r7, #4]
   2caee:	b2db      	uxtb	r3, r3
   2caf0:	011b      	lsls	r3, r3, #4
   2caf2:	b25b      	sxtb	r3, r3
   2caf4:	4313      	orrs	r3, r2
   2caf6:	b25b      	sxtb	r3, r3
   2caf8:	b2db      	uxtb	r3, r3
   2cafa:	e001      	b.n	2cb00 <put_fat+0xa8>
   2cafc:	687b      	ldr	r3, [r7, #4]
   2cafe:	b2db      	uxtb	r3, r3
   2cb00:	697a      	ldr	r2, [r7, #20]
   2cb02:	7013      	strb	r3, [r2, #0]
			bc++;
   2cb04:	69bb      	ldr	r3, [r7, #24]
   2cb06:	3301      	adds	r3, #1
   2cb08:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
   2cb0a:	68fb      	ldr	r3, [r7, #12]
   2cb0c:	2201      	movs	r2, #1
   2cb0e:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
   2cb10:	68fb      	ldr	r3, [r7, #12]
   2cb12:	6a1a      	ldr	r2, [r3, #32]
   2cb14:	69bb      	ldr	r3, [r7, #24]
   2cb16:	0a5b      	lsrs	r3, r3, #9
   2cb18:	18d2      	adds	r2, r2, r3
   2cb1a:	231f      	movs	r3, #31
   2cb1c:	18fc      	adds	r4, r7, r3
   2cb1e:	68fb      	ldr	r3, [r7, #12]
   2cb20:	0011      	movs	r1, r2
   2cb22:	0018      	movs	r0, r3
   2cb24:	4b5a      	ldr	r3, [pc, #360]	; (2cc90 <put_fat+0x238>)
   2cb26:	4798      	blx	r3
   2cb28:	0003      	movs	r3, r0
   2cb2a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2cb2c:	231f      	movs	r3, #31
   2cb2e:	18fb      	adds	r3, r7, r3
   2cb30:	781b      	ldrb	r3, [r3, #0]
   2cb32:	2b00      	cmp	r3, #0
   2cb34:	d000      	beq.n	2cb38 <put_fat+0xe0>
   2cb36:	e09b      	b.n	2cc70 <put_fat+0x218>
			p = &fs->win[bc % SS(fs)];
   2cb38:	69bb      	ldr	r3, [r7, #24]
   2cb3a:	05db      	lsls	r3, r3, #23
   2cb3c:	0ddb      	lsrs	r3, r3, #23
   2cb3e:	3330      	adds	r3, #48	; 0x30
   2cb40:	68fa      	ldr	r2, [r7, #12]
   2cb42:	18d3      	adds	r3, r2, r3
   2cb44:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
   2cb46:	68bb      	ldr	r3, [r7, #8]
   2cb48:	2201      	movs	r2, #1
   2cb4a:	4013      	ands	r3, r2
   2cb4c:	d003      	beq.n	2cb56 <put_fat+0xfe>
   2cb4e:	687b      	ldr	r3, [r7, #4]
   2cb50:	091b      	lsrs	r3, r3, #4
   2cb52:	b2db      	uxtb	r3, r3
   2cb54:	e00e      	b.n	2cb74 <put_fat+0x11c>
   2cb56:	697b      	ldr	r3, [r7, #20]
   2cb58:	781b      	ldrb	r3, [r3, #0]
   2cb5a:	b25b      	sxtb	r3, r3
   2cb5c:	220f      	movs	r2, #15
   2cb5e:	4393      	bics	r3, r2
   2cb60:	b25a      	sxtb	r2, r3
   2cb62:	687b      	ldr	r3, [r7, #4]
   2cb64:	0a1b      	lsrs	r3, r3, #8
   2cb66:	b25b      	sxtb	r3, r3
   2cb68:	210f      	movs	r1, #15
   2cb6a:	400b      	ands	r3, r1
   2cb6c:	b25b      	sxtb	r3, r3
   2cb6e:	4313      	orrs	r3, r2
   2cb70:	b25b      	sxtb	r3, r3
   2cb72:	b2db      	uxtb	r3, r3
   2cb74:	697a      	ldr	r2, [r7, #20]
   2cb76:	7013      	strb	r3, [r2, #0]
			break;
   2cb78:	e07f      	b.n	2cc7a <put_fat+0x222>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
   2cb7a:	68fb      	ldr	r3, [r7, #12]
   2cb7c:	6a1a      	ldr	r2, [r3, #32]
   2cb7e:	68bb      	ldr	r3, [r7, #8]
   2cb80:	0a1b      	lsrs	r3, r3, #8
   2cb82:	18d2      	adds	r2, r2, r3
   2cb84:	231f      	movs	r3, #31
   2cb86:	18fc      	adds	r4, r7, r3
   2cb88:	68fb      	ldr	r3, [r7, #12]
   2cb8a:	0011      	movs	r1, r2
   2cb8c:	0018      	movs	r0, r3
   2cb8e:	4b40      	ldr	r3, [pc, #256]	; (2cc90 <put_fat+0x238>)
   2cb90:	4798      	blx	r3
   2cb92:	0003      	movs	r3, r0
   2cb94:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2cb96:	231f      	movs	r3, #31
   2cb98:	18fb      	adds	r3, r7, r3
   2cb9a:	781b      	ldrb	r3, [r3, #0]
   2cb9c:	2b00      	cmp	r3, #0
   2cb9e:	d169      	bne.n	2cc74 <put_fat+0x21c>
			p = &fs->win[clst * 2 % SS(fs)];
   2cba0:	68bb      	ldr	r3, [r7, #8]
   2cba2:	005a      	lsls	r2, r3, #1
   2cba4:	23ff      	movs	r3, #255	; 0xff
   2cba6:	005b      	lsls	r3, r3, #1
   2cba8:	4013      	ands	r3, r2
   2cbaa:	3330      	adds	r3, #48	; 0x30
   2cbac:	68fa      	ldr	r2, [r7, #12]
   2cbae:	18d3      	adds	r3, r2, r3
   2cbb0:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
   2cbb2:	687b      	ldr	r3, [r7, #4]
   2cbb4:	b2da      	uxtb	r2, r3
   2cbb6:	697b      	ldr	r3, [r7, #20]
   2cbb8:	701a      	strb	r2, [r3, #0]
   2cbba:	697b      	ldr	r3, [r7, #20]
   2cbbc:	3301      	adds	r3, #1
   2cbbe:	687a      	ldr	r2, [r7, #4]
   2cbc0:	b292      	uxth	r2, r2
   2cbc2:	0a12      	lsrs	r2, r2, #8
   2cbc4:	b292      	uxth	r2, r2
   2cbc6:	b2d2      	uxtb	r2, r2
   2cbc8:	701a      	strb	r2, [r3, #0]
			break;
   2cbca:	e056      	b.n	2cc7a <put_fat+0x222>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
   2cbcc:	68fb      	ldr	r3, [r7, #12]
   2cbce:	6a1a      	ldr	r2, [r3, #32]
   2cbd0:	68bb      	ldr	r3, [r7, #8]
   2cbd2:	09db      	lsrs	r3, r3, #7
   2cbd4:	18d2      	adds	r2, r2, r3
   2cbd6:	231f      	movs	r3, #31
   2cbd8:	18fc      	adds	r4, r7, r3
   2cbda:	68fb      	ldr	r3, [r7, #12]
   2cbdc:	0011      	movs	r1, r2
   2cbde:	0018      	movs	r0, r3
   2cbe0:	4b2b      	ldr	r3, [pc, #172]	; (2cc90 <put_fat+0x238>)
   2cbe2:	4798      	blx	r3
   2cbe4:	0003      	movs	r3, r0
   2cbe6:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2cbe8:	231f      	movs	r3, #31
   2cbea:	18fb      	adds	r3, r7, r3
   2cbec:	781b      	ldrb	r3, [r3, #0]
   2cbee:	2b00      	cmp	r3, #0
   2cbf0:	d142      	bne.n	2cc78 <put_fat+0x220>
			p = &fs->win[clst * 4 % SS(fs)];
   2cbf2:	68bb      	ldr	r3, [r7, #8]
   2cbf4:	009a      	lsls	r2, r3, #2
   2cbf6:	23fe      	movs	r3, #254	; 0xfe
   2cbf8:	005b      	lsls	r3, r3, #1
   2cbfa:	4013      	ands	r3, r2
   2cbfc:	3330      	adds	r3, #48	; 0x30
   2cbfe:	68fa      	ldr	r2, [r7, #12]
   2cc00:	18d3      	adds	r3, r2, r3
   2cc02:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
   2cc04:	697b      	ldr	r3, [r7, #20]
   2cc06:	3303      	adds	r3, #3
   2cc08:	781b      	ldrb	r3, [r3, #0]
   2cc0a:	061a      	lsls	r2, r3, #24
   2cc0c:	697b      	ldr	r3, [r7, #20]
   2cc0e:	3302      	adds	r3, #2
   2cc10:	781b      	ldrb	r3, [r3, #0]
   2cc12:	041b      	lsls	r3, r3, #16
   2cc14:	4313      	orrs	r3, r2
   2cc16:	697a      	ldr	r2, [r7, #20]
   2cc18:	3201      	adds	r2, #1
   2cc1a:	7812      	ldrb	r2, [r2, #0]
   2cc1c:	0212      	lsls	r2, r2, #8
   2cc1e:	4313      	orrs	r3, r2
   2cc20:	697a      	ldr	r2, [r7, #20]
   2cc22:	7812      	ldrb	r2, [r2, #0]
   2cc24:	4313      	orrs	r3, r2
   2cc26:	0f1b      	lsrs	r3, r3, #28
   2cc28:	071b      	lsls	r3, r3, #28
   2cc2a:	687a      	ldr	r2, [r7, #4]
   2cc2c:	4313      	orrs	r3, r2
   2cc2e:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
   2cc30:	687b      	ldr	r3, [r7, #4]
   2cc32:	b2da      	uxtb	r2, r3
   2cc34:	697b      	ldr	r3, [r7, #20]
   2cc36:	701a      	strb	r2, [r3, #0]
   2cc38:	697b      	ldr	r3, [r7, #20]
   2cc3a:	3301      	adds	r3, #1
   2cc3c:	687a      	ldr	r2, [r7, #4]
   2cc3e:	b292      	uxth	r2, r2
   2cc40:	0a12      	lsrs	r2, r2, #8
   2cc42:	b292      	uxth	r2, r2
   2cc44:	b2d2      	uxtb	r2, r2
   2cc46:	701a      	strb	r2, [r3, #0]
   2cc48:	697b      	ldr	r3, [r7, #20]
   2cc4a:	3302      	adds	r3, #2
   2cc4c:	687a      	ldr	r2, [r7, #4]
   2cc4e:	0c12      	lsrs	r2, r2, #16
   2cc50:	b2d2      	uxtb	r2, r2
   2cc52:	701a      	strb	r2, [r3, #0]
   2cc54:	697b      	ldr	r3, [r7, #20]
   2cc56:	3303      	adds	r3, #3
   2cc58:	687a      	ldr	r2, [r7, #4]
   2cc5a:	0e12      	lsrs	r2, r2, #24
   2cc5c:	b2d2      	uxtb	r2, r2
   2cc5e:	701a      	strb	r2, [r3, #0]
			break;
   2cc60:	e00b      	b.n	2cc7a <put_fat+0x222>

		default :
			res = FR_INT_ERR;
   2cc62:	231f      	movs	r3, #31
   2cc64:	18fb      	adds	r3, r7, r3
   2cc66:	2202      	movs	r2, #2
   2cc68:	701a      	strb	r2, [r3, #0]
   2cc6a:	e006      	b.n	2cc7a <put_fat+0x222>
			if (res != FR_OK) break;
   2cc6c:	46c0      	nop			; (mov r8, r8)
   2cc6e:	e004      	b.n	2cc7a <put_fat+0x222>
			if (res != FR_OK) break;
   2cc70:	46c0      	nop			; (mov r8, r8)
   2cc72:	e002      	b.n	2cc7a <put_fat+0x222>
			if (res != FR_OK) break;
   2cc74:	46c0      	nop			; (mov r8, r8)
   2cc76:	e000      	b.n	2cc7a <put_fat+0x222>
			if (res != FR_OK) break;
   2cc78:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
   2cc7a:	68fb      	ldr	r3, [r7, #12]
   2cc7c:	2201      	movs	r2, #1
   2cc7e:	711a      	strb	r2, [r3, #4]
	}

	return res;
   2cc80:	231f      	movs	r3, #31
   2cc82:	18fb      	adds	r3, r7, r3
   2cc84:	781b      	ldrb	r3, [r3, #0]
}
   2cc86:	0018      	movs	r0, r3
   2cc88:	46bd      	mov	sp, r7
   2cc8a:	b009      	add	sp, #36	; 0x24
   2cc8c:	bd90      	pop	{r4, r7, pc}
   2cc8e:	46c0      	nop			; (mov r8, r8)
   2cc90:	0002c655 	.word	0x0002c655

0002cc94 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
   2cc94:	b590      	push	{r4, r7, lr}
   2cc96:	b085      	sub	sp, #20
   2cc98:	af00      	add	r7, sp, #0
   2cc9a:	6078      	str	r0, [r7, #4]
   2cc9c:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
   2cc9e:	683b      	ldr	r3, [r7, #0]
   2cca0:	2b01      	cmp	r3, #1
   2cca2:	d904      	bls.n	2ccae <remove_chain+0x1a>
   2cca4:	687b      	ldr	r3, [r7, #4]
   2cca6:	699a      	ldr	r2, [r3, #24]
   2cca8:	683b      	ldr	r3, [r7, #0]
   2ccaa:	429a      	cmp	r2, r3
   2ccac:	d804      	bhi.n	2ccb8 <remove_chain+0x24>
		res = FR_INT_ERR;
   2ccae:	230f      	movs	r3, #15
   2ccb0:	18fb      	adds	r3, r7, r3
   2ccb2:	2202      	movs	r2, #2
   2ccb4:	701a      	strb	r2, [r3, #0]
   2ccb6:	e045      	b.n	2cd44 <remove_chain+0xb0>

	} else {
		res = FR_OK;
   2ccb8:	230f      	movs	r3, #15
   2ccba:	18fb      	adds	r3, r7, r3
   2ccbc:	2200      	movs	r2, #0
   2ccbe:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2ccc0:	e037      	b.n	2cd32 <remove_chain+0x9e>
			nxt = get_fat(fs, clst);			/* Get cluster status */
   2ccc2:	683a      	ldr	r2, [r7, #0]
   2ccc4:	687b      	ldr	r3, [r7, #4]
   2ccc6:	0011      	movs	r1, r2
   2ccc8:	0018      	movs	r0, r3
   2ccca:	4b22      	ldr	r3, [pc, #136]	; (2cd54 <remove_chain+0xc0>)
   2cccc:	4798      	blx	r3
   2ccce:	0003      	movs	r3, r0
   2ccd0:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
   2ccd2:	68bb      	ldr	r3, [r7, #8]
   2ccd4:	2b00      	cmp	r3, #0
   2ccd6:	d032      	beq.n	2cd3e <remove_chain+0xaa>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
   2ccd8:	68bb      	ldr	r3, [r7, #8]
   2ccda:	2b01      	cmp	r3, #1
   2ccdc:	d104      	bne.n	2cce8 <remove_chain+0x54>
   2ccde:	230f      	movs	r3, #15
   2cce0:	18fb      	adds	r3, r7, r3
   2cce2:	2202      	movs	r2, #2
   2cce4:	701a      	strb	r2, [r3, #0]
   2cce6:	e02d      	b.n	2cd44 <remove_chain+0xb0>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
   2cce8:	68bb      	ldr	r3, [r7, #8]
   2ccea:	3301      	adds	r3, #1
   2ccec:	d104      	bne.n	2ccf8 <remove_chain+0x64>
   2ccee:	230f      	movs	r3, #15
   2ccf0:	18fb      	adds	r3, r7, r3
   2ccf2:	2201      	movs	r2, #1
   2ccf4:	701a      	strb	r2, [r3, #0]
   2ccf6:	e025      	b.n	2cd44 <remove_chain+0xb0>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
   2ccf8:	230f      	movs	r3, #15
   2ccfa:	18fc      	adds	r4, r7, r3
   2ccfc:	6839      	ldr	r1, [r7, #0]
   2ccfe:	687b      	ldr	r3, [r7, #4]
   2cd00:	2200      	movs	r2, #0
   2cd02:	0018      	movs	r0, r3
   2cd04:	4b14      	ldr	r3, [pc, #80]	; (2cd58 <remove_chain+0xc4>)
   2cd06:	4798      	blx	r3
   2cd08:	0003      	movs	r3, r0
   2cd0a:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2cd0c:	230f      	movs	r3, #15
   2cd0e:	18fb      	adds	r3, r7, r3
   2cd10:	781b      	ldrb	r3, [r3, #0]
   2cd12:	2b00      	cmp	r3, #0
   2cd14:	d115      	bne.n	2cd42 <remove_chain+0xae>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
   2cd16:	687b      	ldr	r3, [r7, #4]
   2cd18:	691b      	ldr	r3, [r3, #16]
   2cd1a:	3301      	adds	r3, #1
   2cd1c:	d007      	beq.n	2cd2e <remove_chain+0x9a>
				fs->free_clust++;
   2cd1e:	687b      	ldr	r3, [r7, #4]
   2cd20:	691b      	ldr	r3, [r3, #16]
   2cd22:	1c5a      	adds	r2, r3, #1
   2cd24:	687b      	ldr	r3, [r7, #4]
   2cd26:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
   2cd28:	687b      	ldr	r3, [r7, #4]
   2cd2a:	2201      	movs	r2, #1
   2cd2c:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
   2cd2e:	68bb      	ldr	r3, [r7, #8]
   2cd30:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
   2cd32:	687b      	ldr	r3, [r7, #4]
   2cd34:	699a      	ldr	r2, [r3, #24]
   2cd36:	683b      	ldr	r3, [r7, #0]
   2cd38:	429a      	cmp	r2, r3
   2cd3a:	d8c2      	bhi.n	2ccc2 <remove_chain+0x2e>
   2cd3c:	e002      	b.n	2cd44 <remove_chain+0xb0>
			if (nxt == 0) break;				/* Empty cluster? */
   2cd3e:	46c0      	nop			; (mov r8, r8)
   2cd40:	e000      	b.n	2cd44 <remove_chain+0xb0>
			if (res != FR_OK) break;
   2cd42:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2cd44:	230f      	movs	r3, #15
   2cd46:	18fb      	adds	r3, r7, r3
   2cd48:	781b      	ldrb	r3, [r3, #0]
}
   2cd4a:	0018      	movs	r0, r3
   2cd4c:	46bd      	mov	sp, r7
   2cd4e:	b005      	add	sp, #20
   2cd50:	bd90      	pop	{r4, r7, pc}
   2cd52:	46c0      	nop			; (mov r8, r8)
   2cd54:	0002c8ed 	.word	0x0002c8ed
   2cd58:	0002ca59 	.word	0x0002ca59

0002cd5c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
   2cd5c:	b590      	push	{r4, r7, lr}
   2cd5e:	b087      	sub	sp, #28
   2cd60:	af00      	add	r7, sp, #0
   2cd62:	6078      	str	r0, [r7, #4]
   2cd64:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
   2cd66:	683b      	ldr	r3, [r7, #0]
   2cd68:	2b00      	cmp	r3, #0
   2cd6a:	d10d      	bne.n	2cd88 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
   2cd6c:	687b      	ldr	r3, [r7, #4]
   2cd6e:	68db      	ldr	r3, [r3, #12]
   2cd70:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
   2cd72:	693b      	ldr	r3, [r7, #16]
   2cd74:	2b00      	cmp	r3, #0
   2cd76:	d004      	beq.n	2cd82 <create_chain+0x26>
   2cd78:	687b      	ldr	r3, [r7, #4]
   2cd7a:	699a      	ldr	r2, [r3, #24]
   2cd7c:	693b      	ldr	r3, [r7, #16]
   2cd7e:	429a      	cmp	r2, r3
   2cd80:	d818      	bhi.n	2cdb4 <create_chain+0x58>
   2cd82:	2301      	movs	r3, #1
   2cd84:	613b      	str	r3, [r7, #16]
   2cd86:	e015      	b.n	2cdb4 <create_chain+0x58>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
   2cd88:	683a      	ldr	r2, [r7, #0]
   2cd8a:	687b      	ldr	r3, [r7, #4]
   2cd8c:	0011      	movs	r1, r2
   2cd8e:	0018      	movs	r0, r3
   2cd90:	4b3e      	ldr	r3, [pc, #248]	; (2ce8c <create_chain+0x130>)
   2cd92:	4798      	blx	r3
   2cd94:	0003      	movs	r3, r0
   2cd96:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
   2cd98:	68bb      	ldr	r3, [r7, #8]
   2cd9a:	2b01      	cmp	r3, #1
   2cd9c:	d801      	bhi.n	2cda2 <create_chain+0x46>
   2cd9e:	2301      	movs	r3, #1
   2cda0:	e070      	b.n	2ce84 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
   2cda2:	687b      	ldr	r3, [r7, #4]
   2cda4:	699a      	ldr	r2, [r3, #24]
   2cda6:	68bb      	ldr	r3, [r7, #8]
   2cda8:	429a      	cmp	r2, r3
   2cdaa:	d901      	bls.n	2cdb0 <create_chain+0x54>
   2cdac:	68bb      	ldr	r3, [r7, #8]
   2cdae:	e069      	b.n	2ce84 <create_chain+0x128>
		scl = clst;
   2cdb0:	683b      	ldr	r3, [r7, #0]
   2cdb2:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
   2cdb4:	693b      	ldr	r3, [r7, #16]
   2cdb6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
   2cdb8:	697b      	ldr	r3, [r7, #20]
   2cdba:	3301      	adds	r3, #1
   2cdbc:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
   2cdbe:	687b      	ldr	r3, [r7, #4]
   2cdc0:	699a      	ldr	r2, [r3, #24]
   2cdc2:	697b      	ldr	r3, [r7, #20]
   2cdc4:	429a      	cmp	r2, r3
   2cdc6:	d807      	bhi.n	2cdd8 <create_chain+0x7c>
			ncl = 2;
   2cdc8:	2302      	movs	r3, #2
   2cdca:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
   2cdcc:	697a      	ldr	r2, [r7, #20]
   2cdce:	693b      	ldr	r3, [r7, #16]
   2cdd0:	429a      	cmp	r2, r3
   2cdd2:	d901      	bls.n	2cdd8 <create_chain+0x7c>
   2cdd4:	2300      	movs	r3, #0
   2cdd6:	e055      	b.n	2ce84 <create_chain+0x128>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
   2cdd8:	697a      	ldr	r2, [r7, #20]
   2cdda:	687b      	ldr	r3, [r7, #4]
   2cddc:	0011      	movs	r1, r2
   2cdde:	0018      	movs	r0, r3
   2cde0:	4b2a      	ldr	r3, [pc, #168]	; (2ce8c <create_chain+0x130>)
   2cde2:	4798      	blx	r3
   2cde4:	0003      	movs	r3, r0
   2cde6:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
   2cde8:	68bb      	ldr	r3, [r7, #8]
   2cdea:	2b00      	cmp	r3, #0
   2cdec:	d00d      	beq.n	2ce0a <create_chain+0xae>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
   2cdee:	68bb      	ldr	r3, [r7, #8]
   2cdf0:	3301      	adds	r3, #1
   2cdf2:	d002      	beq.n	2cdfa <create_chain+0x9e>
   2cdf4:	68bb      	ldr	r3, [r7, #8]
   2cdf6:	2b01      	cmp	r3, #1
   2cdf8:	d101      	bne.n	2cdfe <create_chain+0xa2>
			return cs;
   2cdfa:	68bb      	ldr	r3, [r7, #8]
   2cdfc:	e042      	b.n	2ce84 <create_chain+0x128>
		if (ncl == scl) return 0;		/* No free cluster */
   2cdfe:	697a      	ldr	r2, [r7, #20]
   2ce00:	693b      	ldr	r3, [r7, #16]
   2ce02:	429a      	cmp	r2, r3
   2ce04:	d1d8      	bne.n	2cdb8 <create_chain+0x5c>
   2ce06:	2300      	movs	r3, #0
   2ce08:	e03c      	b.n	2ce84 <create_chain+0x128>
		if (cs == 0) break;				/* Found a free cluster */
   2ce0a:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
   2ce0c:	230f      	movs	r3, #15
   2ce0e:	18fc      	adds	r4, r7, r3
   2ce10:	4a1f      	ldr	r2, [pc, #124]	; (2ce90 <create_chain+0x134>)
   2ce12:	6979      	ldr	r1, [r7, #20]
   2ce14:	687b      	ldr	r3, [r7, #4]
   2ce16:	0018      	movs	r0, r3
   2ce18:	4b1e      	ldr	r3, [pc, #120]	; (2ce94 <create_chain+0x138>)
   2ce1a:	4798      	blx	r3
   2ce1c:	0003      	movs	r3, r0
   2ce1e:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
   2ce20:	230f      	movs	r3, #15
   2ce22:	18fb      	adds	r3, r7, r3
   2ce24:	781b      	ldrb	r3, [r3, #0]
   2ce26:	2b00      	cmp	r3, #0
   2ce28:	d10c      	bne.n	2ce44 <create_chain+0xe8>
   2ce2a:	683b      	ldr	r3, [r7, #0]
   2ce2c:	2b00      	cmp	r3, #0
   2ce2e:	d009      	beq.n	2ce44 <create_chain+0xe8>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
   2ce30:	230f      	movs	r3, #15
   2ce32:	18fc      	adds	r4, r7, r3
   2ce34:	697a      	ldr	r2, [r7, #20]
   2ce36:	6839      	ldr	r1, [r7, #0]
   2ce38:	687b      	ldr	r3, [r7, #4]
   2ce3a:	0018      	movs	r0, r3
   2ce3c:	4b15      	ldr	r3, [pc, #84]	; (2ce94 <create_chain+0x138>)
   2ce3e:	4798      	blx	r3
   2ce40:	0003      	movs	r3, r0
   2ce42:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
   2ce44:	230f      	movs	r3, #15
   2ce46:	18fb      	adds	r3, r7, r3
   2ce48:	781b      	ldrb	r3, [r3, #0]
   2ce4a:	2b00      	cmp	r3, #0
   2ce4c:	d10f      	bne.n	2ce6e <create_chain+0x112>
		fs->last_clust = ncl;			/* Update FSINFO */
   2ce4e:	687b      	ldr	r3, [r7, #4]
   2ce50:	697a      	ldr	r2, [r7, #20]
   2ce52:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
   2ce54:	687b      	ldr	r3, [r7, #4]
   2ce56:	691b      	ldr	r3, [r3, #16]
   2ce58:	3301      	adds	r3, #1
   2ce5a:	d012      	beq.n	2ce82 <create_chain+0x126>
			fs->free_clust--;
   2ce5c:	687b      	ldr	r3, [r7, #4]
   2ce5e:	691b      	ldr	r3, [r3, #16]
   2ce60:	1e5a      	subs	r2, r3, #1
   2ce62:	687b      	ldr	r3, [r7, #4]
   2ce64:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
   2ce66:	687b      	ldr	r3, [r7, #4]
   2ce68:	2201      	movs	r2, #1
   2ce6a:	715a      	strb	r2, [r3, #5]
   2ce6c:	e009      	b.n	2ce82 <create_chain+0x126>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
   2ce6e:	230f      	movs	r3, #15
   2ce70:	18fb      	adds	r3, r7, r3
   2ce72:	781b      	ldrb	r3, [r3, #0]
   2ce74:	2b01      	cmp	r3, #1
   2ce76:	d102      	bne.n	2ce7e <create_chain+0x122>
   2ce78:	2301      	movs	r3, #1
   2ce7a:	425b      	negs	r3, r3
   2ce7c:	e000      	b.n	2ce80 <create_chain+0x124>
   2ce7e:	2301      	movs	r3, #1
   2ce80:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
   2ce82:	697b      	ldr	r3, [r7, #20]
}
   2ce84:	0018      	movs	r0, r3
   2ce86:	46bd      	mov	sp, r7
   2ce88:	b007      	add	sp, #28
   2ce8a:	bd90      	pop	{r4, r7, pc}
   2ce8c:	0002c8ed 	.word	0x0002c8ed
   2ce90:	0fffffff 	.word	0x0fffffff
   2ce94:	0002ca59 	.word	0x0002ca59

0002ce98 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
   2ce98:	b580      	push	{r7, lr}
   2ce9a:	b084      	sub	sp, #16
   2ce9c:	af00      	add	r7, sp, #0
   2ce9e:	6078      	str	r0, [r7, #4]
   2cea0:	000a      	movs	r2, r1
   2cea2:	1cbb      	adds	r3, r7, #2
   2cea4:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
   2cea6:	687b      	ldr	r3, [r7, #4]
   2cea8:	1cba      	adds	r2, r7, #2
   2ceaa:	8812      	ldrh	r2, [r2, #0]
   2ceac:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
   2ceae:	687b      	ldr	r3, [r7, #4]
   2ceb0:	689b      	ldr	r3, [r3, #8]
   2ceb2:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
   2ceb4:	68fb      	ldr	r3, [r7, #12]
   2ceb6:	2b01      	cmp	r3, #1
   2ceb8:	d005      	beq.n	2cec6 <dir_sdi+0x2e>
   2ceba:	687b      	ldr	r3, [r7, #4]
   2cebc:	681b      	ldr	r3, [r3, #0]
   2cebe:	699a      	ldr	r2, [r3, #24]
   2cec0:	68fb      	ldr	r3, [r7, #12]
   2cec2:	429a      	cmp	r2, r3
   2cec4:	d801      	bhi.n	2ceca <dir_sdi+0x32>
		return FR_INT_ERR;
   2cec6:	2302      	movs	r3, #2
   2cec8:	e075      	b.n	2cfb6 <dir_sdi+0x11e>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
   2ceca:	68fb      	ldr	r3, [r7, #12]
   2cecc:	2b00      	cmp	r3, #0
   2cece:	d108      	bne.n	2cee2 <dir_sdi+0x4a>
   2ced0:	687b      	ldr	r3, [r7, #4]
   2ced2:	681b      	ldr	r3, [r3, #0]
   2ced4:	781b      	ldrb	r3, [r3, #0]
   2ced6:	2b03      	cmp	r3, #3
   2ced8:	d103      	bne.n	2cee2 <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
   2ceda:	687b      	ldr	r3, [r7, #4]
   2cedc:	681b      	ldr	r3, [r3, #0]
   2cede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2cee0:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
   2cee2:	68fb      	ldr	r3, [r7, #12]
   2cee4:	2b00      	cmp	r3, #0
   2cee6:	d116      	bne.n	2cf16 <dir_sdi+0x7e>
		dj->clust = clst;
   2cee8:	687b      	ldr	r3, [r7, #4]
   2ceea:	68fa      	ldr	r2, [r7, #12]
   2ceec:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
   2ceee:	687b      	ldr	r3, [r7, #4]
   2cef0:	681b      	ldr	r3, [r3, #0]
   2cef2:	891b      	ldrh	r3, [r3, #8]
   2cef4:	1cba      	adds	r2, r7, #2
   2cef6:	8812      	ldrh	r2, [r2, #0]
   2cef8:	429a      	cmp	r2, r3
   2cefa:	d301      	bcc.n	2cf00 <dir_sdi+0x68>
			return FR_INT_ERR;
   2cefc:	2302      	movs	r3, #2
   2cefe:	e05a      	b.n	2cfb6 <dir_sdi+0x11e>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2cf00:	687b      	ldr	r3, [r7, #4]
   2cf02:	681b      	ldr	r3, [r3, #0]
   2cf04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   2cf06:	1cba      	adds	r2, r7, #2
   2cf08:	8812      	ldrh	r2, [r2, #0]
   2cf0a:	0912      	lsrs	r2, r2, #4
   2cf0c:	b292      	uxth	r2, r2
   2cf0e:	189a      	adds	r2, r3, r2
   2cf10:	687b      	ldr	r3, [r7, #4]
   2cf12:	611a      	str	r2, [r3, #16]
   2cf14:	e042      	b.n	2cf9c <dir_sdi+0x104>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
   2cf16:	687b      	ldr	r3, [r7, #4]
   2cf18:	681b      	ldr	r3, [r3, #0]
   2cf1a:	789b      	ldrb	r3, [r3, #2]
   2cf1c:	b29a      	uxth	r2, r3
   2cf1e:	230a      	movs	r3, #10
   2cf20:	18fb      	adds	r3, r7, r3
   2cf22:	0112      	lsls	r2, r2, #4
   2cf24:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2cf26:	e020      	b.n	2cf6a <dir_sdi+0xd2>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
   2cf28:	687b      	ldr	r3, [r7, #4]
   2cf2a:	681b      	ldr	r3, [r3, #0]
   2cf2c:	68fa      	ldr	r2, [r7, #12]
   2cf2e:	0011      	movs	r1, r2
   2cf30:	0018      	movs	r0, r3
   2cf32:	4b23      	ldr	r3, [pc, #140]	; (2cfc0 <dir_sdi+0x128>)
   2cf34:	4798      	blx	r3
   2cf36:	0003      	movs	r3, r0
   2cf38:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
   2cf3a:	68fb      	ldr	r3, [r7, #12]
   2cf3c:	3301      	adds	r3, #1
   2cf3e:	d101      	bne.n	2cf44 <dir_sdi+0xac>
   2cf40:	2301      	movs	r3, #1
   2cf42:	e038      	b.n	2cfb6 <dir_sdi+0x11e>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
   2cf44:	68fb      	ldr	r3, [r7, #12]
   2cf46:	2b01      	cmp	r3, #1
   2cf48:	d905      	bls.n	2cf56 <dir_sdi+0xbe>
   2cf4a:	687b      	ldr	r3, [r7, #4]
   2cf4c:	681b      	ldr	r3, [r3, #0]
   2cf4e:	699a      	ldr	r2, [r3, #24]
   2cf50:	68fb      	ldr	r3, [r7, #12]
   2cf52:	429a      	cmp	r2, r3
   2cf54:	d801      	bhi.n	2cf5a <dir_sdi+0xc2>
				return FR_INT_ERR;
   2cf56:	2302      	movs	r3, #2
   2cf58:	e02d      	b.n	2cfb6 <dir_sdi+0x11e>
			idx -= ic;
   2cf5a:	1cbb      	adds	r3, r7, #2
   2cf5c:	1cb9      	adds	r1, r7, #2
   2cf5e:	220a      	movs	r2, #10
   2cf60:	18ba      	adds	r2, r7, r2
   2cf62:	8809      	ldrh	r1, [r1, #0]
   2cf64:	8812      	ldrh	r2, [r2, #0]
   2cf66:	1a8a      	subs	r2, r1, r2
   2cf68:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
   2cf6a:	1cba      	adds	r2, r7, #2
   2cf6c:	230a      	movs	r3, #10
   2cf6e:	18fb      	adds	r3, r7, r3
   2cf70:	8812      	ldrh	r2, [r2, #0]
   2cf72:	881b      	ldrh	r3, [r3, #0]
   2cf74:	429a      	cmp	r2, r3
   2cf76:	d2d7      	bcs.n	2cf28 <dir_sdi+0x90>
		}
		dj->clust = clst;
   2cf78:	687b      	ldr	r3, [r7, #4]
   2cf7a:	68fa      	ldr	r2, [r7, #12]
   2cf7c:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
   2cf7e:	687b      	ldr	r3, [r7, #4]
   2cf80:	681b      	ldr	r3, [r3, #0]
   2cf82:	68fa      	ldr	r2, [r7, #12]
   2cf84:	0011      	movs	r1, r2
   2cf86:	0018      	movs	r0, r3
   2cf88:	4b0e      	ldr	r3, [pc, #56]	; (2cfc4 <dir_sdi+0x12c>)
   2cf8a:	4798      	blx	r3
   2cf8c:	0002      	movs	r2, r0
   2cf8e:	1cbb      	adds	r3, r7, #2
   2cf90:	881b      	ldrh	r3, [r3, #0]
   2cf92:	091b      	lsrs	r3, r3, #4
   2cf94:	b29b      	uxth	r3, r3
   2cf96:	18d2      	adds	r2, r2, r3
   2cf98:	687b      	ldr	r3, [r7, #4]
   2cf9a:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
   2cf9c:	687b      	ldr	r3, [r7, #4]
   2cf9e:	681b      	ldr	r3, [r3, #0]
   2cfa0:	3330      	adds	r3, #48	; 0x30
   2cfa2:	001a      	movs	r2, r3
   2cfa4:	1cbb      	adds	r3, r7, #2
   2cfa6:	881b      	ldrh	r3, [r3, #0]
   2cfa8:	210f      	movs	r1, #15
   2cfaa:	400b      	ands	r3, r1
   2cfac:	015b      	lsls	r3, r3, #5
   2cfae:	18d2      	adds	r2, r2, r3
   2cfb0:	687b      	ldr	r3, [r7, #4]
   2cfb2:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
   2cfb4:	2300      	movs	r3, #0
}
   2cfb6:	0018      	movs	r0, r3
   2cfb8:	46bd      	mov	sp, r7
   2cfba:	b004      	add	sp, #16
   2cfbc:	bd80      	pop	{r7, pc}
   2cfbe:	46c0      	nop			; (mov r8, r8)
   2cfc0:	0002c8ed 	.word	0x0002c8ed
   2cfc4:	0002c8b5 	.word	0x0002c8b5

0002cfc8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
   2cfc8:	b590      	push	{r4, r7, lr}
   2cfca:	b085      	sub	sp, #20
   2cfcc:	af00      	add	r7, sp, #0
   2cfce:	6078      	str	r0, [r7, #4]
   2cfd0:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
   2cfd2:	687b      	ldr	r3, [r7, #4]
   2cfd4:	88da      	ldrh	r2, [r3, #6]
   2cfd6:	2308      	movs	r3, #8
   2cfd8:	18fb      	adds	r3, r7, r3
   2cfda:	3201      	adds	r2, #1
   2cfdc:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
   2cfde:	2308      	movs	r3, #8
   2cfe0:	18fb      	adds	r3, r7, r3
   2cfe2:	881b      	ldrh	r3, [r3, #0]
   2cfe4:	2b00      	cmp	r3, #0
   2cfe6:	d003      	beq.n	2cff0 <dir_next+0x28>
   2cfe8:	687b      	ldr	r3, [r7, #4]
   2cfea:	691b      	ldr	r3, [r3, #16]
   2cfec:	2b00      	cmp	r3, #0
   2cfee:	d101      	bne.n	2cff4 <dir_next+0x2c>
		return FR_NO_FILE;
   2cff0:	2304      	movs	r3, #4
   2cff2:	e0d2      	b.n	2d19a <dir_next+0x1d2>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
   2cff4:	2308      	movs	r3, #8
   2cff6:	18fb      	adds	r3, r7, r3
   2cff8:	881b      	ldrh	r3, [r3, #0]
   2cffa:	220f      	movs	r2, #15
   2cffc:	4013      	ands	r3, r2
   2cffe:	b29b      	uxth	r3, r3
   2d000:	2b00      	cmp	r3, #0
   2d002:	d000      	beq.n	2d006 <dir_next+0x3e>
   2d004:	e0b6      	b.n	2d174 <dir_next+0x1ac>
		dj->sect++;					/* Next sector */
   2d006:	687b      	ldr	r3, [r7, #4]
   2d008:	691b      	ldr	r3, [r3, #16]
   2d00a:	1c5a      	adds	r2, r3, #1
   2d00c:	687b      	ldr	r3, [r7, #4]
   2d00e:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
   2d010:	687b      	ldr	r3, [r7, #4]
   2d012:	68db      	ldr	r3, [r3, #12]
   2d014:	2b00      	cmp	r3, #0
   2d016:	d10a      	bne.n	2d02e <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
   2d018:	687b      	ldr	r3, [r7, #4]
   2d01a:	681b      	ldr	r3, [r3, #0]
   2d01c:	891b      	ldrh	r3, [r3, #8]
   2d01e:	2208      	movs	r2, #8
   2d020:	18ba      	adds	r2, r7, r2
   2d022:	8812      	ldrh	r2, [r2, #0]
   2d024:	429a      	cmp	r2, r3
   2d026:	d200      	bcs.n	2d02a <dir_next+0x62>
   2d028:	e0a4      	b.n	2d174 <dir_next+0x1ac>
				return FR_NO_FILE;
   2d02a:	2304      	movs	r3, #4
   2d02c:	e0b5      	b.n	2d19a <dir_next+0x1d2>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
   2d02e:	2308      	movs	r3, #8
   2d030:	18fb      	adds	r3, r7, r3
   2d032:	881b      	ldrh	r3, [r3, #0]
   2d034:	091b      	lsrs	r3, r3, #4
   2d036:	b29b      	uxth	r3, r3
   2d038:	001a      	movs	r2, r3
   2d03a:	687b      	ldr	r3, [r7, #4]
   2d03c:	681b      	ldr	r3, [r3, #0]
   2d03e:	789b      	ldrb	r3, [r3, #2]
   2d040:	3b01      	subs	r3, #1
   2d042:	4013      	ands	r3, r2
   2d044:	d000      	beq.n	2d048 <dir_next+0x80>
   2d046:	e095      	b.n	2d174 <dir_next+0x1ac>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
   2d048:	687b      	ldr	r3, [r7, #4]
   2d04a:	681a      	ldr	r2, [r3, #0]
   2d04c:	687b      	ldr	r3, [r7, #4]
   2d04e:	68db      	ldr	r3, [r3, #12]
   2d050:	0019      	movs	r1, r3
   2d052:	0010      	movs	r0, r2
   2d054:	4b53      	ldr	r3, [pc, #332]	; (2d1a4 <dir_next+0x1dc>)
   2d056:	4798      	blx	r3
   2d058:	0003      	movs	r3, r0
   2d05a:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
   2d05c:	68fb      	ldr	r3, [r7, #12]
   2d05e:	2b01      	cmp	r3, #1
   2d060:	d801      	bhi.n	2d066 <dir_next+0x9e>
   2d062:	2302      	movs	r3, #2
   2d064:	e099      	b.n	2d19a <dir_next+0x1d2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2d066:	68fb      	ldr	r3, [r7, #12]
   2d068:	3301      	adds	r3, #1
   2d06a:	d101      	bne.n	2d070 <dir_next+0xa8>
   2d06c:	2301      	movs	r3, #1
   2d06e:	e094      	b.n	2d19a <dir_next+0x1d2>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
   2d070:	687b      	ldr	r3, [r7, #4]
   2d072:	681b      	ldr	r3, [r3, #0]
   2d074:	699a      	ldr	r2, [r3, #24]
   2d076:	68fb      	ldr	r3, [r7, #12]
   2d078:	429a      	cmp	r2, r3
   2d07a:	d900      	bls.n	2d07e <dir_next+0xb6>
   2d07c:	e06d      	b.n	2d15a <dir_next+0x192>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
   2d07e:	683b      	ldr	r3, [r7, #0]
   2d080:	2b00      	cmp	r3, #0
   2d082:	d101      	bne.n	2d088 <dir_next+0xc0>
   2d084:	2304      	movs	r3, #4
   2d086:	e088      	b.n	2d19a <dir_next+0x1d2>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
   2d088:	687b      	ldr	r3, [r7, #4]
   2d08a:	681a      	ldr	r2, [r3, #0]
   2d08c:	687b      	ldr	r3, [r7, #4]
   2d08e:	68db      	ldr	r3, [r3, #12]
   2d090:	0019      	movs	r1, r3
   2d092:	0010      	movs	r0, r2
   2d094:	4b44      	ldr	r3, [pc, #272]	; (2d1a8 <dir_next+0x1e0>)
   2d096:	4798      	blx	r3
   2d098:	0003      	movs	r3, r0
   2d09a:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
   2d09c:	68fb      	ldr	r3, [r7, #12]
   2d09e:	2b00      	cmp	r3, #0
   2d0a0:	d101      	bne.n	2d0a6 <dir_next+0xde>
   2d0a2:	2307      	movs	r3, #7
   2d0a4:	e079      	b.n	2d19a <dir_next+0x1d2>
					if (clst == 1) return FR_INT_ERR;
   2d0a6:	68fb      	ldr	r3, [r7, #12]
   2d0a8:	2b01      	cmp	r3, #1
   2d0aa:	d101      	bne.n	2d0b0 <dir_next+0xe8>
   2d0ac:	2302      	movs	r3, #2
   2d0ae:	e074      	b.n	2d19a <dir_next+0x1d2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
   2d0b0:	68fb      	ldr	r3, [r7, #12]
   2d0b2:	3301      	adds	r3, #1
   2d0b4:	d101      	bne.n	2d0ba <dir_next+0xf2>
   2d0b6:	2301      	movs	r3, #1
   2d0b8:	e06f      	b.n	2d19a <dir_next+0x1d2>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
   2d0ba:	687b      	ldr	r3, [r7, #4]
   2d0bc:	681b      	ldr	r3, [r3, #0]
   2d0be:	2100      	movs	r1, #0
   2d0c0:	0018      	movs	r0, r3
   2d0c2:	4b3a      	ldr	r3, [pc, #232]	; (2d1ac <dir_next+0x1e4>)
   2d0c4:	4798      	blx	r3
   2d0c6:	1e03      	subs	r3, r0, #0
   2d0c8:	d001      	beq.n	2d0ce <dir_next+0x106>
   2d0ca:	2301      	movs	r3, #1
   2d0cc:	e065      	b.n	2d19a <dir_next+0x1d2>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
   2d0ce:	687b      	ldr	r3, [r7, #4]
   2d0d0:	681b      	ldr	r3, [r3, #0]
   2d0d2:	3330      	adds	r3, #48	; 0x30
   2d0d4:	0018      	movs	r0, r3
   2d0d6:	2380      	movs	r3, #128	; 0x80
   2d0d8:	009b      	lsls	r3, r3, #2
   2d0da:	001a      	movs	r2, r3
   2d0dc:	2100      	movs	r1, #0
   2d0de:	4b34      	ldr	r3, [pc, #208]	; (2d1b0 <dir_next+0x1e8>)
   2d0e0:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
   2d0e2:	687b      	ldr	r3, [r7, #4]
   2d0e4:	681c      	ldr	r4, [r3, #0]
   2d0e6:	687b      	ldr	r3, [r7, #4]
   2d0e8:	681b      	ldr	r3, [r3, #0]
   2d0ea:	68fa      	ldr	r2, [r7, #12]
   2d0ec:	0011      	movs	r1, r2
   2d0ee:	0018      	movs	r0, r3
   2d0f0:	4b30      	ldr	r3, [pc, #192]	; (2d1b4 <dir_next+0x1ec>)
   2d0f2:	4798      	blx	r3
   2d0f4:	0003      	movs	r3, r0
   2d0f6:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2d0f8:	230b      	movs	r3, #11
   2d0fa:	18fb      	adds	r3, r7, r3
   2d0fc:	2200      	movs	r2, #0
   2d0fe:	701a      	strb	r2, [r3, #0]
   2d100:	e019      	b.n	2d136 <dir_next+0x16e>
						dj->fs->wflag = 1;
   2d102:	687b      	ldr	r3, [r7, #4]
   2d104:	681b      	ldr	r3, [r3, #0]
   2d106:	2201      	movs	r2, #1
   2d108:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
   2d10a:	687b      	ldr	r3, [r7, #4]
   2d10c:	681b      	ldr	r3, [r3, #0]
   2d10e:	2100      	movs	r1, #0
   2d110:	0018      	movs	r0, r3
   2d112:	4b26      	ldr	r3, [pc, #152]	; (2d1ac <dir_next+0x1e4>)
   2d114:	4798      	blx	r3
   2d116:	1e03      	subs	r3, r0, #0
   2d118:	d001      	beq.n	2d11e <dir_next+0x156>
   2d11a:	2301      	movs	r3, #1
   2d11c:	e03d      	b.n	2d19a <dir_next+0x1d2>
						dj->fs->winsect++;
   2d11e:	687b      	ldr	r3, [r7, #4]
   2d120:	681b      	ldr	r3, [r3, #0]
   2d122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2d124:	3201      	adds	r2, #1
   2d126:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
   2d128:	230b      	movs	r3, #11
   2d12a:	18fb      	adds	r3, r7, r3
   2d12c:	781a      	ldrb	r2, [r3, #0]
   2d12e:	230b      	movs	r3, #11
   2d130:	18fb      	adds	r3, r7, r3
   2d132:	3201      	adds	r2, #1
   2d134:	701a      	strb	r2, [r3, #0]
   2d136:	687b      	ldr	r3, [r7, #4]
   2d138:	681b      	ldr	r3, [r3, #0]
   2d13a:	789b      	ldrb	r3, [r3, #2]
   2d13c:	220b      	movs	r2, #11
   2d13e:	18ba      	adds	r2, r7, r2
   2d140:	7812      	ldrb	r2, [r2, #0]
   2d142:	429a      	cmp	r2, r3
   2d144:	d3dd      	bcc.n	2d102 <dir_next+0x13a>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
   2d146:	687b      	ldr	r3, [r7, #4]
   2d148:	681b      	ldr	r3, [r3, #0]
   2d14a:	687a      	ldr	r2, [r7, #4]
   2d14c:	6812      	ldr	r2, [r2, #0]
   2d14e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
   2d150:	220b      	movs	r2, #11
   2d152:	18ba      	adds	r2, r7, r2
   2d154:	7812      	ldrb	r2, [r2, #0]
   2d156:	1a8a      	subs	r2, r1, r2
   2d158:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
   2d15a:	687b      	ldr	r3, [r7, #4]
   2d15c:	68fa      	ldr	r2, [r7, #12]
   2d15e:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
   2d160:	687b      	ldr	r3, [r7, #4]
   2d162:	681b      	ldr	r3, [r3, #0]
   2d164:	68fa      	ldr	r2, [r7, #12]
   2d166:	0011      	movs	r1, r2
   2d168:	0018      	movs	r0, r3
   2d16a:	4b12      	ldr	r3, [pc, #72]	; (2d1b4 <dir_next+0x1ec>)
   2d16c:	4798      	blx	r3
   2d16e:	0002      	movs	r2, r0
   2d170:	687b      	ldr	r3, [r7, #4]
   2d172:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
   2d174:	687b      	ldr	r3, [r7, #4]
   2d176:	2208      	movs	r2, #8
   2d178:	18ba      	adds	r2, r7, r2
   2d17a:	8812      	ldrh	r2, [r2, #0]
   2d17c:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
   2d17e:	687b      	ldr	r3, [r7, #4]
   2d180:	681b      	ldr	r3, [r3, #0]
   2d182:	3330      	adds	r3, #48	; 0x30
   2d184:	001a      	movs	r2, r3
   2d186:	2308      	movs	r3, #8
   2d188:	18fb      	adds	r3, r7, r3
   2d18a:	881b      	ldrh	r3, [r3, #0]
   2d18c:	210f      	movs	r1, #15
   2d18e:	400b      	ands	r3, r1
   2d190:	015b      	lsls	r3, r3, #5
   2d192:	18d2      	adds	r2, r2, r3
   2d194:	687b      	ldr	r3, [r7, #4]
   2d196:	615a      	str	r2, [r3, #20]

	return FR_OK;
   2d198:	2300      	movs	r3, #0
}
   2d19a:	0018      	movs	r0, r3
   2d19c:	46bd      	mov	sp, r7
   2d19e:	b005      	add	sp, #20
   2d1a0:	bd90      	pop	{r4, r7, pc}
   2d1a2:	46c0      	nop			; (mov r8, r8)
   2d1a4:	0002c8ed 	.word	0x0002c8ed
   2d1a8:	0002cd5d 	.word	0x0002cd5d
   2d1ac:	0002c655 	.word	0x0002c655
   2d1b0:	0002c5a9 	.word	0x0002c5a9
   2d1b4:	0002c8b5 	.word	0x0002c8b5

0002d1b8 <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
)
{
   2d1b8:	b590      	push	{r4, r7, lr}
   2d1ba:	b087      	sub	sp, #28
   2d1bc:	af00      	add	r7, sp, #0
   2d1be:	6078      	str	r0, [r7, #4]
   2d1c0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLE) - 1) * 13;	/* Get offset in the LFN buffer */
   2d1c2:	683b      	ldr	r3, [r7, #0]
   2d1c4:	781b      	ldrb	r3, [r3, #0]
   2d1c6:	001a      	movs	r2, r3
   2d1c8:	2340      	movs	r3, #64	; 0x40
   2d1ca:	439a      	bics	r2, r3
   2d1cc:	0013      	movs	r3, r2
   2d1ce:	1e5a      	subs	r2, r3, #1
   2d1d0:	0013      	movs	r3, r2
   2d1d2:	005b      	lsls	r3, r3, #1
   2d1d4:	189b      	adds	r3, r3, r2
   2d1d6:	009b      	lsls	r3, r3, #2
   2d1d8:	189b      	adds	r3, r3, r2
   2d1da:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
   2d1dc:	2300      	movs	r3, #0
   2d1de:	613b      	str	r3, [r7, #16]
   2d1e0:	230e      	movs	r3, #14
   2d1e2:	18fb      	adds	r3, r7, r3
   2d1e4:	2201      	movs	r2, #1
   2d1e6:	801a      	strh	r2, [r3, #0]
	do {
		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
   2d1e8:	4a31      	ldr	r2, [pc, #196]	; (2d2b0 <cmp_lfn+0xf8>)
   2d1ea:	693b      	ldr	r3, [r7, #16]
   2d1ec:	18d3      	adds	r3, r2, r3
   2d1ee:	781b      	ldrb	r3, [r3, #0]
   2d1f0:	3301      	adds	r3, #1
   2d1f2:	683a      	ldr	r2, [r7, #0]
   2d1f4:	18d3      	adds	r3, r2, r3
   2d1f6:	781b      	ldrb	r3, [r3, #0]
   2d1f8:	021b      	lsls	r3, r3, #8
   2d1fa:	b21a      	sxth	r2, r3
   2d1fc:	492c      	ldr	r1, [pc, #176]	; (2d2b0 <cmp_lfn+0xf8>)
   2d1fe:	693b      	ldr	r3, [r7, #16]
   2d200:	18cb      	adds	r3, r1, r3
   2d202:	781b      	ldrb	r3, [r3, #0]
   2d204:	0019      	movs	r1, r3
   2d206:	683b      	ldr	r3, [r7, #0]
   2d208:	185b      	adds	r3, r3, r1
   2d20a:	781b      	ldrb	r3, [r3, #0]
   2d20c:	b21b      	sxth	r3, r3
   2d20e:	4313      	orrs	r3, r2
   2d210:	b21a      	sxth	r2, r3
   2d212:	230c      	movs	r3, #12
   2d214:	18fb      	adds	r3, r7, r3
   2d216:	801a      	strh	r2, [r3, #0]
		if (wc) {	/* Last char has not been processed */
   2d218:	230e      	movs	r3, #14
   2d21a:	18fb      	adds	r3, r7, r3
   2d21c:	881b      	ldrh	r3, [r3, #0]
   2d21e:	2b00      	cmp	r3, #0
   2d220:	d01f      	beq.n	2d262 <cmp_lfn+0xaa>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
   2d222:	230e      	movs	r3, #14
   2d224:	18fc      	adds	r4, r7, r3
   2d226:	230c      	movs	r3, #12
   2d228:	18fb      	adds	r3, r7, r3
   2d22a:	881b      	ldrh	r3, [r3, #0]
   2d22c:	0018      	movs	r0, r3
   2d22e:	4b21      	ldr	r3, [pc, #132]	; (2d2b4 <cmp_lfn+0xfc>)
   2d230:	4798      	blx	r3
   2d232:	0003      	movs	r3, r0
   2d234:	8023      	strh	r3, [r4, #0]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
   2d236:	697b      	ldr	r3, [r7, #20]
   2d238:	2bfe      	cmp	r3, #254	; 0xfe
   2d23a:	d810      	bhi.n	2d25e <cmp_lfn+0xa6>
   2d23c:	697b      	ldr	r3, [r7, #20]
   2d23e:	1c5a      	adds	r2, r3, #1
   2d240:	617a      	str	r2, [r7, #20]
   2d242:	005b      	lsls	r3, r3, #1
   2d244:	687a      	ldr	r2, [r7, #4]
   2d246:	18d3      	adds	r3, r2, r3
   2d248:	881b      	ldrh	r3, [r3, #0]
   2d24a:	0018      	movs	r0, r3
   2d24c:	4b19      	ldr	r3, [pc, #100]	; (2d2b4 <cmp_lfn+0xfc>)
   2d24e:	4798      	blx	r3
   2d250:	0003      	movs	r3, r0
   2d252:	001a      	movs	r2, r3
   2d254:	230e      	movs	r3, #14
   2d256:	18fb      	adds	r3, r7, r3
   2d258:	881b      	ldrh	r3, [r3, #0]
   2d25a:	4293      	cmp	r3, r2
   2d25c:	d009      	beq.n	2d272 <cmp_lfn+0xba>
				return 0;				/* Not matched */
   2d25e:	2300      	movs	r3, #0
   2d260:	e022      	b.n	2d2a8 <cmp_lfn+0xf0>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
   2d262:	230c      	movs	r3, #12
   2d264:	18fb      	adds	r3, r7, r3
   2d266:	881b      	ldrh	r3, [r3, #0]
   2d268:	4a13      	ldr	r2, [pc, #76]	; (2d2b8 <cmp_lfn+0x100>)
   2d26a:	4293      	cmp	r3, r2
   2d26c:	d001      	beq.n	2d272 <cmp_lfn+0xba>
   2d26e:	2300      	movs	r3, #0
   2d270:	e01a      	b.n	2d2a8 <cmp_lfn+0xf0>
		}
	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
   2d272:	693b      	ldr	r3, [r7, #16]
   2d274:	3301      	adds	r3, #1
   2d276:	613b      	str	r3, [r7, #16]
   2d278:	693b      	ldr	r3, [r7, #16]
   2d27a:	2b0c      	cmp	r3, #12
   2d27c:	d9b4      	bls.n	2d1e8 <cmp_lfn+0x30>

	if ((dir[LDIR_Ord] & LLE) && wc && lfnbuf[i])	/* Last segment matched but different length */
   2d27e:	683b      	ldr	r3, [r7, #0]
   2d280:	781b      	ldrb	r3, [r3, #0]
   2d282:	001a      	movs	r2, r3
   2d284:	2340      	movs	r3, #64	; 0x40
   2d286:	4013      	ands	r3, r2
   2d288:	d00d      	beq.n	2d2a6 <cmp_lfn+0xee>
   2d28a:	230e      	movs	r3, #14
   2d28c:	18fb      	adds	r3, r7, r3
   2d28e:	881b      	ldrh	r3, [r3, #0]
   2d290:	2b00      	cmp	r3, #0
   2d292:	d008      	beq.n	2d2a6 <cmp_lfn+0xee>
   2d294:	697b      	ldr	r3, [r7, #20]
   2d296:	005b      	lsls	r3, r3, #1
   2d298:	687a      	ldr	r2, [r7, #4]
   2d29a:	18d3      	adds	r3, r2, r3
   2d29c:	881b      	ldrh	r3, [r3, #0]
   2d29e:	2b00      	cmp	r3, #0
   2d2a0:	d001      	beq.n	2d2a6 <cmp_lfn+0xee>
		return 0;
   2d2a2:	2300      	movs	r3, #0
   2d2a4:	e000      	b.n	2d2a8 <cmp_lfn+0xf0>

	return 1;						/* The part of LFN matched */
   2d2a6:	2301      	movs	r3, #1
}
   2d2a8:	0018      	movs	r0, r3
   2d2aa:	46bd      	mov	sp, r7
   2d2ac:	b007      	add	sp, #28
   2d2ae:	bd90      	pop	{r4, r7, pc}
   2d2b0:	0003a6d0 	.word	0x0003a6d0
   2d2b4:	0002f265 	.word	0x0002f265
   2d2b8:	0000ffff 	.word	0x0000ffff

0002d2bc <fit_lfn>:
	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
	BYTE *dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
   2d2bc:	b580      	push	{r7, lr}
   2d2be:	b088      	sub	sp, #32
   2d2c0:	af00      	add	r7, sp, #0
   2d2c2:	60f8      	str	r0, [r7, #12]
   2d2c4:	60b9      	str	r1, [r7, #8]
   2d2c6:	0019      	movs	r1, r3
   2d2c8:	1dfb      	adds	r3, r7, #7
   2d2ca:	701a      	strb	r2, [r3, #0]
   2d2cc:	1dbb      	adds	r3, r7, #6
   2d2ce:	1c0a      	adds	r2, r1, #0
   2d2d0:	701a      	strb	r2, [r3, #0]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
   2d2d2:	68bb      	ldr	r3, [r7, #8]
   2d2d4:	330d      	adds	r3, #13
   2d2d6:	1dba      	adds	r2, r7, #6
   2d2d8:	7812      	ldrb	r2, [r2, #0]
   2d2da:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
   2d2dc:	68bb      	ldr	r3, [r7, #8]
   2d2de:	330b      	adds	r3, #11
   2d2e0:	220f      	movs	r2, #15
   2d2e2:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
   2d2e4:	68bb      	ldr	r3, [r7, #8]
   2d2e6:	330c      	adds	r3, #12
   2d2e8:	2200      	movs	r2, #0
   2d2ea:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir+LDIR_FstClusLO, 0);
   2d2ec:	68bb      	ldr	r3, [r7, #8]
   2d2ee:	331a      	adds	r3, #26
   2d2f0:	2200      	movs	r2, #0
   2d2f2:	701a      	strb	r2, [r3, #0]
   2d2f4:	68bb      	ldr	r3, [r7, #8]
   2d2f6:	331b      	adds	r3, #27
   2d2f8:	2200      	movs	r2, #0
   2d2fa:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
   2d2fc:	1dfb      	adds	r3, r7, #7
   2d2fe:	781b      	ldrb	r3, [r3, #0]
   2d300:	1e5a      	subs	r2, r3, #1
   2d302:	0013      	movs	r3, r2
   2d304:	005b      	lsls	r3, r3, #1
   2d306:	189b      	adds	r3, r3, r2
   2d308:	009b      	lsls	r3, r3, #2
   2d30a:	189b      	adds	r3, r3, r2
   2d30c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
   2d30e:	2316      	movs	r3, #22
   2d310:	18fb      	adds	r3, r7, r3
   2d312:	2200      	movs	r2, #0
   2d314:	801a      	strh	r2, [r3, #0]
   2d316:	2300      	movs	r3, #0
   2d318:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
   2d31a:	2316      	movs	r3, #22
   2d31c:	18fb      	adds	r3, r7, r3
   2d31e:	881b      	ldrh	r3, [r3, #0]
   2d320:	4a28      	ldr	r2, [pc, #160]	; (2d3c4 <fit_lfn+0x108>)
   2d322:	4293      	cmp	r3, r2
   2d324:	d009      	beq.n	2d33a <fit_lfn+0x7e>
   2d326:	69fb      	ldr	r3, [r7, #28]
   2d328:	1c5a      	adds	r2, r3, #1
   2d32a:	61fa      	str	r2, [r7, #28]
   2d32c:	005b      	lsls	r3, r3, #1
   2d32e:	68fa      	ldr	r2, [r7, #12]
   2d330:	18d2      	adds	r2, r2, r3
   2d332:	2316      	movs	r3, #22
   2d334:	18fb      	adds	r3, r7, r3
   2d336:	8812      	ldrh	r2, [r2, #0]
   2d338:	801a      	strh	r2, [r3, #0]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
   2d33a:	4a23      	ldr	r2, [pc, #140]	; (2d3c8 <fit_lfn+0x10c>)
   2d33c:	69bb      	ldr	r3, [r7, #24]
   2d33e:	18d3      	adds	r3, r2, r3
   2d340:	781b      	ldrb	r3, [r3, #0]
   2d342:	001a      	movs	r2, r3
   2d344:	68bb      	ldr	r3, [r7, #8]
   2d346:	189b      	adds	r3, r3, r2
   2d348:	2216      	movs	r2, #22
   2d34a:	18ba      	adds	r2, r7, r2
   2d34c:	8812      	ldrh	r2, [r2, #0]
   2d34e:	b2d2      	uxtb	r2, r2
   2d350:	701a      	strb	r2, [r3, #0]
   2d352:	4a1d      	ldr	r2, [pc, #116]	; (2d3c8 <fit_lfn+0x10c>)
   2d354:	69bb      	ldr	r3, [r7, #24]
   2d356:	18d3      	adds	r3, r2, r3
   2d358:	781b      	ldrb	r3, [r3, #0]
   2d35a:	3301      	adds	r3, #1
   2d35c:	68ba      	ldr	r2, [r7, #8]
   2d35e:	18d3      	adds	r3, r2, r3
   2d360:	2216      	movs	r2, #22
   2d362:	18ba      	adds	r2, r7, r2
   2d364:	8812      	ldrh	r2, [r2, #0]
   2d366:	0a12      	lsrs	r2, r2, #8
   2d368:	b292      	uxth	r2, r2
   2d36a:	b2d2      	uxtb	r2, r2
   2d36c:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
   2d36e:	2316      	movs	r3, #22
   2d370:	18fb      	adds	r3, r7, r3
   2d372:	881b      	ldrh	r3, [r3, #0]
   2d374:	2b00      	cmp	r3, #0
   2d376:	d104      	bne.n	2d382 <fit_lfn+0xc6>
   2d378:	2316      	movs	r3, #22
   2d37a:	18fb      	adds	r3, r7, r3
   2d37c:	2201      	movs	r2, #1
   2d37e:	4252      	negs	r2, r2
   2d380:	801a      	strh	r2, [r3, #0]
	} while (++s < 13);
   2d382:	69bb      	ldr	r3, [r7, #24]
   2d384:	3301      	adds	r3, #1
   2d386:	61bb      	str	r3, [r7, #24]
   2d388:	69bb      	ldr	r3, [r7, #24]
   2d38a:	2b0c      	cmp	r3, #12
   2d38c:	d9c5      	bls.n	2d31a <fit_lfn+0x5e>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLE;	/* Bottom LFN part is the start of LFN sequence */
   2d38e:	2316      	movs	r3, #22
   2d390:	18fb      	adds	r3, r7, r3
   2d392:	881b      	ldrh	r3, [r3, #0]
   2d394:	4a0b      	ldr	r2, [pc, #44]	; (2d3c4 <fit_lfn+0x108>)
   2d396:	4293      	cmp	r3, r2
   2d398:	d006      	beq.n	2d3a8 <fit_lfn+0xec>
   2d39a:	69fb      	ldr	r3, [r7, #28]
   2d39c:	005b      	lsls	r3, r3, #1
   2d39e:	68fa      	ldr	r2, [r7, #12]
   2d3a0:	18d3      	adds	r3, r2, r3
   2d3a2:	881b      	ldrh	r3, [r3, #0]
   2d3a4:	2b00      	cmp	r3, #0
   2d3a6:	d105      	bne.n	2d3b4 <fit_lfn+0xf8>
   2d3a8:	1dfb      	adds	r3, r7, #7
   2d3aa:	1dfa      	adds	r2, r7, #7
   2d3ac:	7812      	ldrb	r2, [r2, #0]
   2d3ae:	2140      	movs	r1, #64	; 0x40
   2d3b0:	430a      	orrs	r2, r1
   2d3b2:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
   2d3b4:	68bb      	ldr	r3, [r7, #8]
   2d3b6:	1dfa      	adds	r2, r7, #7
   2d3b8:	7812      	ldrb	r2, [r2, #0]
   2d3ba:	701a      	strb	r2, [r3, #0]
}
   2d3bc:	46c0      	nop			; (mov r8, r8)
   2d3be:	46bd      	mov	sp, r7
   2d3c0:	b008      	add	sp, #32
   2d3c2:	bd80      	pop	{r7, pc}
   2d3c4:	0000ffff 	.word	0x0000ffff
   2d3c8:	0003a6d0 	.word	0x0003a6d0

0002d3cc <gen_numname>:
	BYTE *dst,			/* Pointer to generated SFN */
	const BYTE *src,	/* Pointer to source SFN to be modified */
	const WCHAR *lfn,	/* Pointer to LFN */
	WORD seq			/* Sequence number */
)
{
   2d3cc:	b580      	push	{r7, lr}
   2d3ce:	b08a      	sub	sp, #40	; 0x28
   2d3d0:	af00      	add	r7, sp, #0
   2d3d2:	60f8      	str	r0, [r7, #12]
   2d3d4:	60b9      	str	r1, [r7, #8]
   2d3d6:	607a      	str	r2, [r7, #4]
   2d3d8:	001a      	movs	r2, r3
   2d3da:	1cbb      	adds	r3, r7, #2
   2d3dc:	801a      	strh	r2, [r3, #0]
	BYTE ns[8], c;
	UINT i, j;


	mem_cpy(dst, src, 11);
   2d3de:	68b9      	ldr	r1, [r7, #8]
   2d3e0:	68fb      	ldr	r3, [r7, #12]
   2d3e2:	220b      	movs	r2, #11
   2d3e4:	0018      	movs	r0, r3
   2d3e6:	4b38      	ldr	r3, [pc, #224]	; (2d4c8 <gen_numname+0xfc>)
   2d3e8:	4798      	blx	r3

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
   2d3ea:	1cbb      	adds	r3, r7, #2
   2d3ec:	881b      	ldrh	r3, [r3, #0]
   2d3ee:	2b05      	cmp	r3, #5
   2d3f0:	d911      	bls.n	2d416 <gen_numname+0x4a>
		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
   2d3f2:	1cbb      	adds	r3, r7, #2
   2d3f4:	881b      	ldrh	r3, [r3, #0]
   2d3f6:	b29a      	uxth	r2, r3
   2d3f8:	0852      	lsrs	r2, r2, #1
   2d3fa:	03db      	lsls	r3, r3, #15
   2d3fc:	4313      	orrs	r3, r2
   2d3fe:	b299      	uxth	r1, r3
   2d400:	687b      	ldr	r3, [r7, #4]
   2d402:	1c9a      	adds	r2, r3, #2
   2d404:	607a      	str	r2, [r7, #4]
   2d406:	881a      	ldrh	r2, [r3, #0]
   2d408:	1cbb      	adds	r3, r7, #2
   2d40a:	188a      	adds	r2, r1, r2
   2d40c:	801a      	strh	r2, [r3, #0]
   2d40e:	687b      	ldr	r3, [r7, #4]
   2d410:	881b      	ldrh	r3, [r3, #0]
   2d412:	2b00      	cmp	r3, #0
   2d414:	d1ed      	bne.n	2d3f2 <gen_numname+0x26>
	}

	/* itoa (hexdecimal) */
	i = 7;
   2d416:	2307      	movs	r3, #7
   2d418:	623b      	str	r3, [r7, #32]
	do {
		c = (seq % 16) + '0';
   2d41a:	1cbb      	adds	r3, r7, #2
   2d41c:	881b      	ldrh	r3, [r3, #0]
   2d41e:	b2db      	uxtb	r3, r3
   2d420:	220f      	movs	r2, #15
   2d422:	4013      	ands	r3, r2
   2d424:	b2da      	uxtb	r2, r3
   2d426:	2327      	movs	r3, #39	; 0x27
   2d428:	18fb      	adds	r3, r7, r3
   2d42a:	3230      	adds	r2, #48	; 0x30
   2d42c:	701a      	strb	r2, [r3, #0]
		if (c > '9') c += 7;
   2d42e:	2327      	movs	r3, #39	; 0x27
   2d430:	18fb      	adds	r3, r7, r3
   2d432:	781b      	ldrb	r3, [r3, #0]
   2d434:	2b39      	cmp	r3, #57	; 0x39
   2d436:	d906      	bls.n	2d446 <gen_numname+0x7a>
   2d438:	2327      	movs	r3, #39	; 0x27
   2d43a:	18fb      	adds	r3, r7, r3
   2d43c:	2227      	movs	r2, #39	; 0x27
   2d43e:	18ba      	adds	r2, r7, r2
   2d440:	7812      	ldrb	r2, [r2, #0]
   2d442:	3207      	adds	r2, #7
   2d444:	701a      	strb	r2, [r3, #0]
		ns[i--] = c;
   2d446:	6a3b      	ldr	r3, [r7, #32]
   2d448:	1e5a      	subs	r2, r3, #1
   2d44a:	623a      	str	r2, [r7, #32]
   2d44c:	2214      	movs	r2, #20
   2d44e:	18ba      	adds	r2, r7, r2
   2d450:	2127      	movs	r1, #39	; 0x27
   2d452:	1879      	adds	r1, r7, r1
   2d454:	7809      	ldrb	r1, [r1, #0]
   2d456:	54d1      	strb	r1, [r2, r3]
		seq /= 16;
   2d458:	1cbb      	adds	r3, r7, #2
   2d45a:	1cba      	adds	r2, r7, #2
   2d45c:	8812      	ldrh	r2, [r2, #0]
   2d45e:	0912      	lsrs	r2, r2, #4
   2d460:	801a      	strh	r2, [r3, #0]
	} while (seq);
   2d462:	1cbb      	adds	r3, r7, #2
   2d464:	881b      	ldrh	r3, [r3, #0]
   2d466:	2b00      	cmp	r3, #0
   2d468:	d1d7      	bne.n	2d41a <gen_numname+0x4e>
	ns[i] = '~';
   2d46a:	2314      	movs	r3, #20
   2d46c:	18fa      	adds	r2, r7, r3
   2d46e:	6a3b      	ldr	r3, [r7, #32]
   2d470:	18d3      	adds	r3, r2, r3
   2d472:	227e      	movs	r2, #126	; 0x7e
   2d474:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
   2d476:	2300      	movs	r3, #0
   2d478:	61fb      	str	r3, [r7, #28]
   2d47a:	e002      	b.n	2d482 <gen_numname+0xb6>
   2d47c:	69fb      	ldr	r3, [r7, #28]
   2d47e:	3301      	adds	r3, #1
   2d480:	61fb      	str	r3, [r7, #28]
   2d482:	69fa      	ldr	r2, [r7, #28]
   2d484:	6a3b      	ldr	r3, [r7, #32]
   2d486:	429a      	cmp	r2, r3
   2d488:	d205      	bcs.n	2d496 <gen_numname+0xca>
   2d48a:	68fa      	ldr	r2, [r7, #12]
   2d48c:	69fb      	ldr	r3, [r7, #28]
   2d48e:	18d3      	adds	r3, r2, r3
   2d490:	781b      	ldrb	r3, [r3, #0]
   2d492:	2b20      	cmp	r3, #32
   2d494:	d1f2      	bne.n	2d47c <gen_numname+0xb0>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
   2d496:	69fb      	ldr	r3, [r7, #28]
   2d498:	1c5a      	adds	r2, r3, #1
   2d49a:	61fa      	str	r2, [r7, #28]
   2d49c:	68fa      	ldr	r2, [r7, #12]
   2d49e:	18d2      	adds	r2, r2, r3
   2d4a0:	6a3b      	ldr	r3, [r7, #32]
   2d4a2:	2b07      	cmp	r3, #7
   2d4a4:	d806      	bhi.n	2d4b4 <gen_numname+0xe8>
   2d4a6:	6a3b      	ldr	r3, [r7, #32]
   2d4a8:	1c59      	adds	r1, r3, #1
   2d4aa:	6239      	str	r1, [r7, #32]
   2d4ac:	2114      	movs	r1, #20
   2d4ae:	1879      	adds	r1, r7, r1
   2d4b0:	5ccb      	ldrb	r3, [r1, r3]
   2d4b2:	e000      	b.n	2d4b6 <gen_numname+0xea>
   2d4b4:	2320      	movs	r3, #32
   2d4b6:	7013      	strb	r3, [r2, #0]
	} while (j < 8);
   2d4b8:	69fb      	ldr	r3, [r7, #28]
   2d4ba:	2b07      	cmp	r3, #7
   2d4bc:	d9eb      	bls.n	2d496 <gen_numname+0xca>
}
   2d4be:	46c0      	nop			; (mov r8, r8)
   2d4c0:	46bd      	mov	sp, r7
   2d4c2:	b00a      	add	sp, #40	; 0x28
   2d4c4:	bd80      	pop	{r7, pc}
   2d4c6:	46c0      	nop			; (mov r8, r8)
   2d4c8:	0002c571 	.word	0x0002c571

0002d4cc <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE *dir		/* Ptr to directory entry */
)
{
   2d4cc:	b580      	push	{r7, lr}
   2d4ce:	b084      	sub	sp, #16
   2d4d0:	af00      	add	r7, sp, #0
   2d4d2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
   2d4d4:	230f      	movs	r3, #15
   2d4d6:	18fb      	adds	r3, r7, r3
   2d4d8:	2200      	movs	r2, #0
   2d4da:	701a      	strb	r2, [r3, #0]
	UINT n = 11;
   2d4dc:	230b      	movs	r3, #11
   2d4de:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
   2d4e0:	230f      	movs	r3, #15
   2d4e2:	18fb      	adds	r3, r7, r3
   2d4e4:	781b      	ldrb	r3, [r3, #0]
   2d4e6:	b2da      	uxtb	r2, r3
   2d4e8:	0852      	lsrs	r2, r2, #1
   2d4ea:	01db      	lsls	r3, r3, #7
   2d4ec:	4313      	orrs	r3, r2
   2d4ee:	b2d9      	uxtb	r1, r3
   2d4f0:	687b      	ldr	r3, [r7, #4]
   2d4f2:	1c5a      	adds	r2, r3, #1
   2d4f4:	607a      	str	r2, [r7, #4]
   2d4f6:	781a      	ldrb	r2, [r3, #0]
   2d4f8:	230f      	movs	r3, #15
   2d4fa:	18fb      	adds	r3, r7, r3
   2d4fc:	188a      	adds	r2, r1, r2
   2d4fe:	701a      	strb	r2, [r3, #0]
   2d500:	68bb      	ldr	r3, [r7, #8]
   2d502:	3b01      	subs	r3, #1
   2d504:	60bb      	str	r3, [r7, #8]
   2d506:	68bb      	ldr	r3, [r7, #8]
   2d508:	2b00      	cmp	r3, #0
   2d50a:	d1e9      	bne.n	2d4e0 <sum_sfn+0x14>
	return sum;
   2d50c:	230f      	movs	r3, #15
   2d50e:	18fb      	adds	r3, r7, r3
   2d510:	781b      	ldrb	r3, [r3, #0]
}
   2d512:	0018      	movs	r0, r3
   2d514:	46bd      	mov	sp, r7
   2d516:	b004      	add	sp, #16
   2d518:	bd80      	pop	{r7, pc}
	...

0002d51c <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
   2d51c:	b590      	push	{r4, r7, lr}
   2d51e:	b087      	sub	sp, #28
   2d520:	af00      	add	r7, sp, #0
   2d522:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
   2d524:	2317      	movs	r3, #23
   2d526:	18fc      	adds	r4, r7, r3
   2d528:	687b      	ldr	r3, [r7, #4]
   2d52a:	2100      	movs	r1, #0
   2d52c:	0018      	movs	r0, r3
   2d52e:	4b74      	ldr	r3, [pc, #464]	; (2d700 <dir_find+0x1e4>)
   2d530:	4798      	blx	r3
   2d532:	0003      	movs	r3, r0
   2d534:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2d536:	2317      	movs	r3, #23
   2d538:	18fb      	adds	r3, r7, r3
   2d53a:	781b      	ldrb	r3, [r3, #0]
   2d53c:	2b00      	cmp	r3, #0
   2d53e:	d003      	beq.n	2d548 <dir_find+0x2c>
   2d540:	2317      	movs	r3, #23
   2d542:	18fb      	adds	r3, r7, r3
   2d544:	781b      	ldrb	r3, [r3, #0]
   2d546:	e0d6      	b.n	2d6f6 <dir_find+0x1da>

#if _USE_LFN
	ord = sum = 0xFF;
   2d548:	2314      	movs	r3, #20
   2d54a:	18fb      	adds	r3, r7, r3
   2d54c:	22ff      	movs	r2, #255	; 0xff
   2d54e:	701a      	strb	r2, [r3, #0]
   2d550:	2315      	movs	r3, #21
   2d552:	18fb      	adds	r3, r7, r3
   2d554:	2214      	movs	r2, #20
   2d556:	18ba      	adds	r2, r7, r2
   2d558:	7812      	ldrb	r2, [r2, #0]
   2d55a:	701a      	strb	r2, [r3, #0]
#endif
	do {
		res = move_window(dj->fs, dj->sect);
   2d55c:	687b      	ldr	r3, [r7, #4]
   2d55e:	681a      	ldr	r2, [r3, #0]
   2d560:	687b      	ldr	r3, [r7, #4]
   2d562:	691b      	ldr	r3, [r3, #16]
   2d564:	2117      	movs	r1, #23
   2d566:	187c      	adds	r4, r7, r1
   2d568:	0019      	movs	r1, r3
   2d56a:	0010      	movs	r0, r2
   2d56c:	4b65      	ldr	r3, [pc, #404]	; (2d704 <dir_find+0x1e8>)
   2d56e:	4798      	blx	r3
   2d570:	0003      	movs	r3, r0
   2d572:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2d574:	2317      	movs	r3, #23
   2d576:	18fb      	adds	r3, r7, r3
   2d578:	781b      	ldrb	r3, [r3, #0]
   2d57a:	2b00      	cmp	r3, #0
   2d57c:	d000      	beq.n	2d580 <dir_find+0x64>
   2d57e:	e0b2      	b.n	2d6e6 <dir_find+0x1ca>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
   2d580:	687b      	ldr	r3, [r7, #4]
   2d582:	695b      	ldr	r3, [r3, #20]
   2d584:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
   2d586:	2316      	movs	r3, #22
   2d588:	18fb      	adds	r3, r7, r3
   2d58a:	693a      	ldr	r2, [r7, #16]
   2d58c:	7812      	ldrb	r2, [r2, #0]
   2d58e:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
   2d590:	2316      	movs	r3, #22
   2d592:	18fb      	adds	r3, r7, r3
   2d594:	781b      	ldrb	r3, [r3, #0]
   2d596:	2b00      	cmp	r3, #0
   2d598:	d104      	bne.n	2d5a4 <dir_find+0x88>
   2d59a:	2317      	movs	r3, #23
   2d59c:	18fb      	adds	r3, r7, r3
   2d59e:	2204      	movs	r2, #4
   2d5a0:	701a      	strb	r2, [r3, #0]
   2d5a2:	e0a5      	b.n	2d6f0 <dir_find+0x1d4>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
   2d5a4:	693b      	ldr	r3, [r7, #16]
   2d5a6:	330b      	adds	r3, #11
   2d5a8:	781a      	ldrb	r2, [r3, #0]
   2d5aa:	230f      	movs	r3, #15
   2d5ac:	18fb      	adds	r3, r7, r3
   2d5ae:	213f      	movs	r1, #63	; 0x3f
   2d5b0:	400a      	ands	r2, r1
   2d5b2:	701a      	strb	r2, [r3, #0]
		if (c == DDE || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
   2d5b4:	2316      	movs	r3, #22
   2d5b6:	18fb      	adds	r3, r7, r3
   2d5b8:	781b      	ldrb	r3, [r3, #0]
   2d5ba:	2be5      	cmp	r3, #229	; 0xe5
   2d5bc:	d00a      	beq.n	2d5d4 <dir_find+0xb8>
   2d5be:	230f      	movs	r3, #15
   2d5c0:	18fb      	adds	r3, r7, r3
   2d5c2:	781b      	ldrb	r3, [r3, #0]
   2d5c4:	2208      	movs	r2, #8
   2d5c6:	4013      	ands	r3, r2
   2d5c8:	d009      	beq.n	2d5de <dir_find+0xc2>
   2d5ca:	230f      	movs	r3, #15
   2d5cc:	18fb      	adds	r3, r7, r3
   2d5ce:	781b      	ldrb	r3, [r3, #0]
   2d5d0:	2b0f      	cmp	r3, #15
   2d5d2:	d004      	beq.n	2d5de <dir_find+0xc2>
			ord = 0xFF;
   2d5d4:	2315      	movs	r3, #21
   2d5d6:	18fb      	adds	r3, r7, r3
   2d5d8:	22ff      	movs	r2, #255	; 0xff
   2d5da:	701a      	strb	r2, [r3, #0]
   2d5dc:	e073      	b.n	2d6c6 <dir_find+0x1aa>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
   2d5de:	230f      	movs	r3, #15
   2d5e0:	18fb      	adds	r3, r7, r3
   2d5e2:	781b      	ldrb	r3, [r3, #0]
   2d5e4:	2b0f      	cmp	r3, #15
   2d5e6:	d145      	bne.n	2d674 <dir_find+0x158>
				if (dj->lfn) {
   2d5e8:	687b      	ldr	r3, [r7, #4]
   2d5ea:	69db      	ldr	r3, [r3, #28]
   2d5ec:	2b00      	cmp	r3, #0
   2d5ee:	d100      	bne.n	2d5f2 <dir_find+0xd6>
   2d5f0:	e069      	b.n	2d6c6 <dir_find+0x1aa>
					if (c & LLE) {		/* Is it start of LFN sequence? */
   2d5f2:	2316      	movs	r3, #22
   2d5f4:	18fb      	adds	r3, r7, r3
   2d5f6:	781b      	ldrb	r3, [r3, #0]
   2d5f8:	2240      	movs	r2, #64	; 0x40
   2d5fa:	4013      	ands	r3, r2
   2d5fc:	d016      	beq.n	2d62c <dir_find+0x110>
						sum = dir[LDIR_Chksum];
   2d5fe:	2314      	movs	r3, #20
   2d600:	18fb      	adds	r3, r7, r3
   2d602:	693a      	ldr	r2, [r7, #16]
   2d604:	7b52      	ldrb	r2, [r2, #13]
   2d606:	701a      	strb	r2, [r3, #0]
						c &= ~LLE; ord = c;	/* LFN start order */
   2d608:	2316      	movs	r3, #22
   2d60a:	18fb      	adds	r3, r7, r3
   2d60c:	2216      	movs	r2, #22
   2d60e:	18ba      	adds	r2, r7, r2
   2d610:	7812      	ldrb	r2, [r2, #0]
   2d612:	2140      	movs	r1, #64	; 0x40
   2d614:	438a      	bics	r2, r1
   2d616:	701a      	strb	r2, [r3, #0]
   2d618:	2315      	movs	r3, #21
   2d61a:	18fb      	adds	r3, r7, r3
   2d61c:	2216      	movs	r2, #22
   2d61e:	18ba      	adds	r2, r7, r2
   2d620:	7812      	ldrb	r2, [r2, #0]
   2d622:	701a      	strb	r2, [r3, #0]
						dj->lfn_idx = dj->index;
   2d624:	687b      	ldr	r3, [r7, #4]
   2d626:	88da      	ldrh	r2, [r3, #6]
   2d628:	687b      	ldr	r3, [r7, #4]
   2d62a:	841a      	strh	r2, [r3, #32]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
   2d62c:	2316      	movs	r3, #22
   2d62e:	18fa      	adds	r2, r7, r3
   2d630:	2315      	movs	r3, #21
   2d632:	18fb      	adds	r3, r7, r3
   2d634:	7812      	ldrb	r2, [r2, #0]
   2d636:	781b      	ldrb	r3, [r3, #0]
   2d638:	429a      	cmp	r2, r3
   2d63a:	d116      	bne.n	2d66a <dir_find+0x14e>
   2d63c:	693b      	ldr	r3, [r7, #16]
   2d63e:	330d      	adds	r3, #13
   2d640:	781b      	ldrb	r3, [r3, #0]
   2d642:	2214      	movs	r2, #20
   2d644:	18ba      	adds	r2, r7, r2
   2d646:	7812      	ldrb	r2, [r2, #0]
   2d648:	429a      	cmp	r2, r3
   2d64a:	d10e      	bne.n	2d66a <dir_find+0x14e>
   2d64c:	687b      	ldr	r3, [r7, #4]
   2d64e:	69db      	ldr	r3, [r3, #28]
   2d650:	693a      	ldr	r2, [r7, #16]
   2d652:	0011      	movs	r1, r2
   2d654:	0018      	movs	r0, r3
   2d656:	4b2c      	ldr	r3, [pc, #176]	; (2d708 <dir_find+0x1ec>)
   2d658:	4798      	blx	r3
   2d65a:	1e03      	subs	r3, r0, #0
   2d65c:	d005      	beq.n	2d66a <dir_find+0x14e>
   2d65e:	2315      	movs	r3, #21
   2d660:	18fb      	adds	r3, r7, r3
   2d662:	781b      	ldrb	r3, [r3, #0]
   2d664:	3b01      	subs	r3, #1
   2d666:	b2da      	uxtb	r2, r3
   2d668:	e000      	b.n	2d66c <dir_find+0x150>
   2d66a:	22ff      	movs	r2, #255	; 0xff
   2d66c:	2315      	movs	r3, #21
   2d66e:	18fb      	adds	r3, r7, r3
   2d670:	701a      	strb	r2, [r3, #0]
   2d672:	e028      	b.n	2d6c6 <dir_find+0x1aa>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2d674:	2315      	movs	r3, #21
   2d676:	18fb      	adds	r3, r7, r3
   2d678:	781b      	ldrb	r3, [r3, #0]
   2d67a:	2b00      	cmp	r3, #0
   2d67c:	d10a      	bne.n	2d694 <dir_find+0x178>
   2d67e:	693b      	ldr	r3, [r7, #16]
   2d680:	0018      	movs	r0, r3
   2d682:	4b22      	ldr	r3, [pc, #136]	; (2d70c <dir_find+0x1f0>)
   2d684:	4798      	blx	r3
   2d686:	0003      	movs	r3, r0
   2d688:	001a      	movs	r2, r3
   2d68a:	2314      	movs	r3, #20
   2d68c:	18fb      	adds	r3, r7, r3
   2d68e:	781b      	ldrb	r3, [r3, #0]
   2d690:	4293      	cmp	r3, r2
   2d692:	d02a      	beq.n	2d6ea <dir_find+0x1ce>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
   2d694:	2315      	movs	r3, #21
   2d696:	18fb      	adds	r3, r7, r3
   2d698:	22ff      	movs	r2, #255	; 0xff
   2d69a:	701a      	strb	r2, [r3, #0]
   2d69c:	687b      	ldr	r3, [r7, #4]
   2d69e:	2201      	movs	r2, #1
   2d6a0:	4252      	negs	r2, r2
   2d6a2:	841a      	strh	r2, [r3, #32]
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2d6a4:	687b      	ldr	r3, [r7, #4]
   2d6a6:	699b      	ldr	r3, [r3, #24]
   2d6a8:	330b      	adds	r3, #11
   2d6aa:	781b      	ldrb	r3, [r3, #0]
   2d6ac:	001a      	movs	r2, r3
   2d6ae:	2301      	movs	r3, #1
   2d6b0:	4013      	ands	r3, r2
   2d6b2:	d108      	bne.n	2d6c6 <dir_find+0x1aa>
   2d6b4:	687b      	ldr	r3, [r7, #4]
   2d6b6:	6999      	ldr	r1, [r3, #24]
   2d6b8:	693b      	ldr	r3, [r7, #16]
   2d6ba:	220b      	movs	r2, #11
   2d6bc:	0018      	movs	r0, r3
   2d6be:	4b14      	ldr	r3, [pc, #80]	; (2d710 <dir_find+0x1f4>)
   2d6c0:	4798      	blx	r3
   2d6c2:	1e03      	subs	r3, r0, #0
   2d6c4:	d013      	beq.n	2d6ee <dir_find+0x1d2>
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
   2d6c6:	2317      	movs	r3, #23
   2d6c8:	18fc      	adds	r4, r7, r3
   2d6ca:	687b      	ldr	r3, [r7, #4]
   2d6cc:	2100      	movs	r1, #0
   2d6ce:	0018      	movs	r0, r3
   2d6d0:	4b10      	ldr	r3, [pc, #64]	; (2d714 <dir_find+0x1f8>)
   2d6d2:	4798      	blx	r3
   2d6d4:	0003      	movs	r3, r0
   2d6d6:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2d6d8:	2317      	movs	r3, #23
   2d6da:	18fb      	adds	r3, r7, r3
   2d6dc:	781b      	ldrb	r3, [r3, #0]
   2d6de:	2b00      	cmp	r3, #0
   2d6e0:	d100      	bne.n	2d6e4 <dir_find+0x1c8>
   2d6e2:	e73b      	b.n	2d55c <dir_find+0x40>
   2d6e4:	e004      	b.n	2d6f0 <dir_find+0x1d4>
		if (res != FR_OK) break;
   2d6e6:	46c0      	nop			; (mov r8, r8)
   2d6e8:	e002      	b.n	2d6f0 <dir_find+0x1d4>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
   2d6ea:	46c0      	nop			; (mov r8, r8)
   2d6ec:	e000      	b.n	2d6f0 <dir_find+0x1d4>
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
   2d6ee:	46c0      	nop			; (mov r8, r8)

	return res;
   2d6f0:	2317      	movs	r3, #23
   2d6f2:	18fb      	adds	r3, r7, r3
   2d6f4:	781b      	ldrb	r3, [r3, #0]
}
   2d6f6:	0018      	movs	r0, r3
   2d6f8:	46bd      	mov	sp, r7
   2d6fa:	b007      	add	sp, #28
   2d6fc:	bd90      	pop	{r4, r7, pc}
   2d6fe:	46c0      	nop			; (mov r8, r8)
   2d700:	0002ce99 	.word	0x0002ce99
   2d704:	0002c655 	.word	0x0002c655
   2d708:	0002d1b9 	.word	0x0002d1b9
   2d70c:	0002d4cd 	.word	0x0002d4cd
   2d710:	0002c5d9 	.word	0x0002c5d9
   2d714:	0002cfc9 	.word	0x0002cfc9

0002d718 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
   2d718:	b590      	push	{r4, r7, lr}
   2d71a:	b08d      	sub	sp, #52	; 0x34
   2d71c:	af00      	add	r7, sp, #0
   2d71e:	6078      	str	r0, [r7, #4]
	WORD n, ne, is;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dj->fn; lfn = dj->lfn;
   2d720:	687b      	ldr	r3, [r7, #4]
   2d722:	699b      	ldr	r3, [r3, #24]
   2d724:	627b      	str	r3, [r7, #36]	; 0x24
   2d726:	687b      	ldr	r3, [r7, #4]
   2d728:	69db      	ldr	r3, [r3, #28]
   2d72a:	623b      	str	r3, [r7, #32]
	mem_cpy(sn, fn, 12);
   2d72c:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2d72e:	230c      	movs	r3, #12
   2d730:	18fb      	adds	r3, r7, r3
   2d732:	220c      	movs	r2, #12
   2d734:	0018      	movs	r0, r3
   2d736:	4bc8      	ldr	r3, [pc, #800]	; (2da58 <dir_register+0x340>)
   2d738:	4798      	blx	r3

	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
   2d73a:	230c      	movs	r3, #12
   2d73c:	18fb      	adds	r3, r7, r3
   2d73e:	7adb      	ldrb	r3, [r3, #11]
   2d740:	001a      	movs	r2, r3
   2d742:	2301      	movs	r3, #1
   2d744:	4013      	ands	r3, r2
   2d746:	d048      	beq.n	2d7da <dir_register+0xc2>
		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
   2d748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d74a:	330b      	adds	r3, #11
   2d74c:	2200      	movs	r2, #0
   2d74e:	701a      	strb	r2, [r3, #0]
   2d750:	687b      	ldr	r3, [r7, #4]
   2d752:	2200      	movs	r2, #0
   2d754:	61da      	str	r2, [r3, #28]
		for (n = 1; n < 100; n++) {
   2d756:	232c      	movs	r3, #44	; 0x2c
   2d758:	18fb      	adds	r3, r7, r3
   2d75a:	2201      	movs	r2, #1
   2d75c:	801a      	strh	r2, [r3, #0]
   2d75e:	e01c      	b.n	2d79a <dir_register+0x82>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
   2d760:	232c      	movs	r3, #44	; 0x2c
   2d762:	18fb      	adds	r3, r7, r3
   2d764:	881b      	ldrh	r3, [r3, #0]
   2d766:	6a3a      	ldr	r2, [r7, #32]
   2d768:	210c      	movs	r1, #12
   2d76a:	1879      	adds	r1, r7, r1
   2d76c:	6a78      	ldr	r0, [r7, #36]	; 0x24
   2d76e:	4cbb      	ldr	r4, [pc, #748]	; (2da5c <dir_register+0x344>)
   2d770:	47a0      	blx	r4
			res = dir_find(dj);				/* Check if the name collides with existing SFN */
   2d772:	232f      	movs	r3, #47	; 0x2f
   2d774:	18fc      	adds	r4, r7, r3
   2d776:	687b      	ldr	r3, [r7, #4]
   2d778:	0018      	movs	r0, r3
   2d77a:	4bb9      	ldr	r3, [pc, #740]	; (2da60 <dir_register+0x348>)
   2d77c:	4798      	blx	r3
   2d77e:	0003      	movs	r3, r0
   2d780:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2d782:	232f      	movs	r3, #47	; 0x2f
   2d784:	18fb      	adds	r3, r7, r3
   2d786:	781b      	ldrb	r3, [r3, #0]
   2d788:	2b00      	cmp	r3, #0
   2d78a:	d10c      	bne.n	2d7a6 <dir_register+0x8e>
		for (n = 1; n < 100; n++) {
   2d78c:	232c      	movs	r3, #44	; 0x2c
   2d78e:	18fb      	adds	r3, r7, r3
   2d790:	881a      	ldrh	r2, [r3, #0]
   2d792:	232c      	movs	r3, #44	; 0x2c
   2d794:	18fb      	adds	r3, r7, r3
   2d796:	3201      	adds	r2, #1
   2d798:	801a      	strh	r2, [r3, #0]
   2d79a:	232c      	movs	r3, #44	; 0x2c
   2d79c:	18fb      	adds	r3, r7, r3
   2d79e:	881b      	ldrh	r3, [r3, #0]
   2d7a0:	2b63      	cmp	r3, #99	; 0x63
   2d7a2:	d9dd      	bls.n	2d760 <dir_register+0x48>
   2d7a4:	e000      	b.n	2d7a8 <dir_register+0x90>
			if (res != FR_OK) break;
   2d7a6:	46c0      	nop			; (mov r8, r8)
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
   2d7a8:	232c      	movs	r3, #44	; 0x2c
   2d7aa:	18fb      	adds	r3, r7, r3
   2d7ac:	881b      	ldrh	r3, [r3, #0]
   2d7ae:	2b64      	cmp	r3, #100	; 0x64
   2d7b0:	d101      	bne.n	2d7b6 <dir_register+0x9e>
   2d7b2:	2307      	movs	r3, #7
   2d7b4:	e14c      	b.n	2da50 <dir_register+0x338>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
   2d7b6:	232f      	movs	r3, #47	; 0x2f
   2d7b8:	18fb      	adds	r3, r7, r3
   2d7ba:	781b      	ldrb	r3, [r3, #0]
   2d7bc:	2b04      	cmp	r3, #4
   2d7be:	d003      	beq.n	2d7c8 <dir_register+0xb0>
   2d7c0:	232f      	movs	r3, #47	; 0x2f
   2d7c2:	18fb      	adds	r3, r7, r3
   2d7c4:	781b      	ldrb	r3, [r3, #0]
   2d7c6:	e143      	b.n	2da50 <dir_register+0x338>
		fn[NS] = sn[NS]; dj->lfn = lfn;
   2d7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2d7ca:	330b      	adds	r3, #11
   2d7cc:	220c      	movs	r2, #12
   2d7ce:	18ba      	adds	r2, r7, r2
   2d7d0:	7ad2      	ldrb	r2, [r2, #11]
   2d7d2:	701a      	strb	r2, [r3, #0]
   2d7d4:	687b      	ldr	r3, [r7, #4]
   2d7d6:	6a3a      	ldr	r2, [r7, #32]
   2d7d8:	61da      	str	r2, [r3, #28]
	}

	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
   2d7da:	230c      	movs	r3, #12
   2d7dc:	18fb      	adds	r3, r7, r3
   2d7de:	7adb      	ldrb	r3, [r3, #11]
   2d7e0:	001a      	movs	r2, r3
   2d7e2:	2302      	movs	r3, #2
   2d7e4:	4013      	ands	r3, r2
   2d7e6:	d023      	beq.n	2d830 <dir_register+0x118>
		for (ne = 0; lfn[ne]; ne++) ;
   2d7e8:	232a      	movs	r3, #42	; 0x2a
   2d7ea:	18fb      	adds	r3, r7, r3
   2d7ec:	2200      	movs	r2, #0
   2d7ee:	801a      	strh	r2, [r3, #0]
   2d7f0:	e006      	b.n	2d800 <dir_register+0xe8>
   2d7f2:	232a      	movs	r3, #42	; 0x2a
   2d7f4:	18fb      	adds	r3, r7, r3
   2d7f6:	881a      	ldrh	r2, [r3, #0]
   2d7f8:	232a      	movs	r3, #42	; 0x2a
   2d7fa:	18fb      	adds	r3, r7, r3
   2d7fc:	3201      	adds	r2, #1
   2d7fe:	801a      	strh	r2, [r3, #0]
   2d800:	232a      	movs	r3, #42	; 0x2a
   2d802:	18fb      	adds	r3, r7, r3
   2d804:	881b      	ldrh	r3, [r3, #0]
   2d806:	005b      	lsls	r3, r3, #1
   2d808:	6a3a      	ldr	r2, [r7, #32]
   2d80a:	18d3      	adds	r3, r2, r3
   2d80c:	881b      	ldrh	r3, [r3, #0]
   2d80e:	2b00      	cmp	r3, #0
   2d810:	d1ef      	bne.n	2d7f2 <dir_register+0xda>
		ne = (ne + 25) / 13;
   2d812:	232a      	movs	r3, #42	; 0x2a
   2d814:	18fb      	adds	r3, r7, r3
   2d816:	881b      	ldrh	r3, [r3, #0]
   2d818:	3319      	adds	r3, #25
   2d81a:	001a      	movs	r2, r3
   2d81c:	4b91      	ldr	r3, [pc, #580]	; (2da64 <dir_register+0x34c>)
   2d81e:	210d      	movs	r1, #13
   2d820:	0010      	movs	r0, r2
   2d822:	4798      	blx	r3
   2d824:	0003      	movs	r3, r0
   2d826:	001a      	movs	r2, r3
   2d828:	232a      	movs	r3, #42	; 0x2a
   2d82a:	18fb      	adds	r3, r7, r3
   2d82c:	801a      	strh	r2, [r3, #0]
   2d82e:	e003      	b.n	2d838 <dir_register+0x120>
	} else {						/* Otherwise reserve only an SFN entry. */
		ne = 1;
   2d830:	232a      	movs	r3, #42	; 0x2a
   2d832:	18fb      	adds	r3, r7, r3
   2d834:	2201      	movs	r2, #1
   2d836:	801a      	strh	r2, [r3, #0]
	}

	/* Reserve contiguous entries */
	res = dir_sdi(dj, 0);
   2d838:	232f      	movs	r3, #47	; 0x2f
   2d83a:	18fc      	adds	r4, r7, r3
   2d83c:	687b      	ldr	r3, [r7, #4]
   2d83e:	2100      	movs	r1, #0
   2d840:	0018      	movs	r0, r3
   2d842:	4b89      	ldr	r3, [pc, #548]	; (2da68 <dir_register+0x350>)
   2d844:	4798      	blx	r3
   2d846:	0003      	movs	r3, r0
   2d848:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
   2d84a:	232f      	movs	r3, #47	; 0x2f
   2d84c:	18fb      	adds	r3, r7, r3
   2d84e:	781b      	ldrb	r3, [r3, #0]
   2d850:	2b00      	cmp	r3, #0
   2d852:	d003      	beq.n	2d85c <dir_register+0x144>
   2d854:	232f      	movs	r3, #47	; 0x2f
   2d856:	18fb      	adds	r3, r7, r3
   2d858:	781b      	ldrb	r3, [r3, #0]
   2d85a:	e0f9      	b.n	2da50 <dir_register+0x338>
	n = is = 0;
   2d85c:	2328      	movs	r3, #40	; 0x28
   2d85e:	18fb      	adds	r3, r7, r3
   2d860:	2200      	movs	r2, #0
   2d862:	801a      	strh	r2, [r3, #0]
   2d864:	232c      	movs	r3, #44	; 0x2c
   2d866:	18fb      	adds	r3, r7, r3
   2d868:	2228      	movs	r2, #40	; 0x28
   2d86a:	18ba      	adds	r2, r7, r2
   2d86c:	8812      	ldrh	r2, [r2, #0]
   2d86e:	801a      	strh	r2, [r3, #0]
	do {
		res = move_window(dj->fs, dj->sect);
   2d870:	687b      	ldr	r3, [r7, #4]
   2d872:	681a      	ldr	r2, [r3, #0]
   2d874:	687b      	ldr	r3, [r7, #4]
   2d876:	691b      	ldr	r3, [r3, #16]
   2d878:	212f      	movs	r1, #47	; 0x2f
   2d87a:	187c      	adds	r4, r7, r1
   2d87c:	0019      	movs	r1, r3
   2d87e:	0010      	movs	r0, r2
   2d880:	4b7a      	ldr	r3, [pc, #488]	; (2da6c <dir_register+0x354>)
   2d882:	4798      	blx	r3
   2d884:	0003      	movs	r3, r0
   2d886:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
   2d888:	232f      	movs	r3, #47	; 0x2f
   2d88a:	18fb      	adds	r3, r7, r3
   2d88c:	781b      	ldrb	r3, [r3, #0]
   2d88e:	2b00      	cmp	r3, #0
   2d890:	d13c      	bne.n	2d90c <dir_register+0x1f4>
		c = *dj->dir;				/* Check the entry status */
   2d892:	687b      	ldr	r3, [r7, #4]
   2d894:	695a      	ldr	r2, [r3, #20]
   2d896:	231f      	movs	r3, #31
   2d898:	18fb      	adds	r3, r7, r3
   2d89a:	7812      	ldrb	r2, [r2, #0]
   2d89c:	701a      	strb	r2, [r3, #0]
		if (c == DDE || c == 0) {	/* Is it a blank entry? */
   2d89e:	231f      	movs	r3, #31
   2d8a0:	18fb      	adds	r3, r7, r3
   2d8a2:	781b      	ldrb	r3, [r3, #0]
   2d8a4:	2be5      	cmp	r3, #229	; 0xe5
   2d8a6:	d004      	beq.n	2d8b2 <dir_register+0x19a>
   2d8a8:	231f      	movs	r3, #31
   2d8aa:	18fb      	adds	r3, r7, r3
   2d8ac:	781b      	ldrb	r3, [r3, #0]
   2d8ae:	2b00      	cmp	r3, #0
   2d8b0:	d119      	bne.n	2d8e6 <dir_register+0x1ce>
			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
   2d8b2:	232c      	movs	r3, #44	; 0x2c
   2d8b4:	18fb      	adds	r3, r7, r3
   2d8b6:	881b      	ldrh	r3, [r3, #0]
   2d8b8:	2b00      	cmp	r3, #0
   2d8ba:	d104      	bne.n	2d8c6 <dir_register+0x1ae>
   2d8bc:	2328      	movs	r3, #40	; 0x28
   2d8be:	18fb      	adds	r3, r7, r3
   2d8c0:	687a      	ldr	r2, [r7, #4]
   2d8c2:	88d2      	ldrh	r2, [r2, #6]
   2d8c4:	801a      	strh	r2, [r3, #0]
			if (++n == ne) break;	/* A contiguous entry that required count is found */
   2d8c6:	232c      	movs	r3, #44	; 0x2c
   2d8c8:	18fb      	adds	r3, r7, r3
   2d8ca:	222c      	movs	r2, #44	; 0x2c
   2d8cc:	18ba      	adds	r2, r7, r2
   2d8ce:	8812      	ldrh	r2, [r2, #0]
   2d8d0:	3201      	adds	r2, #1
   2d8d2:	801a      	strh	r2, [r3, #0]
   2d8d4:	232c      	movs	r3, #44	; 0x2c
   2d8d6:	18fa      	adds	r2, r7, r3
   2d8d8:	232a      	movs	r3, #42	; 0x2a
   2d8da:	18fb      	adds	r3, r7, r3
   2d8dc:	8812      	ldrh	r2, [r2, #0]
   2d8de:	881b      	ldrh	r3, [r3, #0]
   2d8e0:	429a      	cmp	r2, r3
   2d8e2:	d104      	bne.n	2d8ee <dir_register+0x1d6>
   2d8e4:	e013      	b.n	2d90e <dir_register+0x1f6>
		} else {
			n = 0;					/* Not a blank entry. Restart to search */
   2d8e6:	232c      	movs	r3, #44	; 0x2c
   2d8e8:	18fb      	adds	r3, r7, r3
   2d8ea:	2200      	movs	r2, #0
   2d8ec:	801a      	strh	r2, [r3, #0]
		}
		res = dir_next(dj, 1);		/* Next entry with table stretch */
   2d8ee:	232f      	movs	r3, #47	; 0x2f
   2d8f0:	18fc      	adds	r4, r7, r3
   2d8f2:	687b      	ldr	r3, [r7, #4]
   2d8f4:	2101      	movs	r1, #1
   2d8f6:	0018      	movs	r0, r3
   2d8f8:	4b5d      	ldr	r3, [pc, #372]	; (2da70 <dir_register+0x358>)
   2d8fa:	4798      	blx	r3
   2d8fc:	0003      	movs	r3, r0
   2d8fe:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
   2d900:	232f      	movs	r3, #47	; 0x2f
   2d902:	18fb      	adds	r3, r7, r3
   2d904:	781b      	ldrb	r3, [r3, #0]
   2d906:	2b00      	cmp	r3, #0
   2d908:	d0b2      	beq.n	2d870 <dir_register+0x158>
   2d90a:	e000      	b.n	2d90e <dir_register+0x1f6>
		if (res != FR_OK) break;
   2d90c:	46c0      	nop			; (mov r8, r8)

	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
   2d90e:	232f      	movs	r3, #47	; 0x2f
   2d910:	18fb      	adds	r3, r7, r3
   2d912:	781b      	ldrb	r3, [r3, #0]
   2d914:	2b00      	cmp	r3, #0
   2d916:	d163      	bne.n	2d9e0 <dir_register+0x2c8>
   2d918:	232a      	movs	r3, #42	; 0x2a
   2d91a:	18fb      	adds	r3, r7, r3
   2d91c:	881b      	ldrh	r3, [r3, #0]
   2d91e:	2b01      	cmp	r3, #1
   2d920:	d95e      	bls.n	2d9e0 <dir_register+0x2c8>
		res = dir_sdi(dj, is);
   2d922:	232f      	movs	r3, #47	; 0x2f
   2d924:	18fc      	adds	r4, r7, r3
   2d926:	2328      	movs	r3, #40	; 0x28
   2d928:	18fb      	adds	r3, r7, r3
   2d92a:	881a      	ldrh	r2, [r3, #0]
   2d92c:	687b      	ldr	r3, [r7, #4]
   2d92e:	0011      	movs	r1, r2
   2d930:	0018      	movs	r0, r3
   2d932:	4b4d      	ldr	r3, [pc, #308]	; (2da68 <dir_register+0x350>)
   2d934:	4798      	blx	r3
   2d936:	0003      	movs	r3, r0
   2d938:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2d93a:	232f      	movs	r3, #47	; 0x2f
   2d93c:	18fb      	adds	r3, r7, r3
   2d93e:	781b      	ldrb	r3, [r3, #0]
   2d940:	2b00      	cmp	r3, #0
   2d942:	d14d      	bne.n	2d9e0 <dir_register+0x2c8>
			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
   2d944:	687b      	ldr	r3, [r7, #4]
   2d946:	699b      	ldr	r3, [r3, #24]
   2d948:	221e      	movs	r2, #30
   2d94a:	18bc      	adds	r4, r7, r2
   2d94c:	0018      	movs	r0, r3
   2d94e:	4b49      	ldr	r3, [pc, #292]	; (2da74 <dir_register+0x35c>)
   2d950:	4798      	blx	r3
   2d952:	0003      	movs	r3, r0
   2d954:	7023      	strb	r3, [r4, #0]
			ne--;
   2d956:	232a      	movs	r3, #42	; 0x2a
   2d958:	18fb      	adds	r3, r7, r3
   2d95a:	881a      	ldrh	r2, [r3, #0]
   2d95c:	232a      	movs	r3, #42	; 0x2a
   2d95e:	18fb      	adds	r3, r7, r3
   2d960:	3a01      	subs	r2, #1
   2d962:	801a      	strh	r2, [r3, #0]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dj->fs, dj->sect);
   2d964:	687b      	ldr	r3, [r7, #4]
   2d966:	681a      	ldr	r2, [r3, #0]
   2d968:	687b      	ldr	r3, [r7, #4]
   2d96a:	691b      	ldr	r3, [r3, #16]
   2d96c:	212f      	movs	r1, #47	; 0x2f
   2d96e:	187c      	adds	r4, r7, r1
   2d970:	0019      	movs	r1, r3
   2d972:	0010      	movs	r0, r2
   2d974:	4b3d      	ldr	r3, [pc, #244]	; (2da6c <dir_register+0x354>)
   2d976:	4798      	blx	r3
   2d978:	0003      	movs	r3, r0
   2d97a:	7023      	strb	r3, [r4, #0]
				if (res != FR_OK) break;
   2d97c:	232f      	movs	r3, #47	; 0x2f
   2d97e:	18fb      	adds	r3, r7, r3
   2d980:	781b      	ldrb	r3, [r3, #0]
   2d982:	2b00      	cmp	r3, #0
   2d984:	d12b      	bne.n	2d9de <dir_register+0x2c6>
				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
   2d986:	687b      	ldr	r3, [r7, #4]
   2d988:	69d8      	ldr	r0, [r3, #28]
   2d98a:	687b      	ldr	r3, [r7, #4]
   2d98c:	6959      	ldr	r1, [r3, #20]
   2d98e:	232a      	movs	r3, #42	; 0x2a
   2d990:	18fb      	adds	r3, r7, r3
   2d992:	881b      	ldrh	r3, [r3, #0]
   2d994:	b2da      	uxtb	r2, r3
   2d996:	231e      	movs	r3, #30
   2d998:	18fb      	adds	r3, r7, r3
   2d99a:	781b      	ldrb	r3, [r3, #0]
   2d99c:	4c36      	ldr	r4, [pc, #216]	; (2da78 <dir_register+0x360>)
   2d99e:	47a0      	blx	r4
				dj->fs->wflag = 1;
   2d9a0:	687b      	ldr	r3, [r7, #4]
   2d9a2:	681b      	ldr	r3, [r3, #0]
   2d9a4:	2201      	movs	r2, #1
   2d9a6:	711a      	strb	r2, [r3, #4]
				res = dir_next(dj, 0);	/* Next entry */
   2d9a8:	232f      	movs	r3, #47	; 0x2f
   2d9aa:	18fc      	adds	r4, r7, r3
   2d9ac:	687b      	ldr	r3, [r7, #4]
   2d9ae:	2100      	movs	r1, #0
   2d9b0:	0018      	movs	r0, r3
   2d9b2:	4b2f      	ldr	r3, [pc, #188]	; (2da70 <dir_register+0x358>)
   2d9b4:	4798      	blx	r3
   2d9b6:	0003      	movs	r3, r0
   2d9b8:	7023      	strb	r3, [r4, #0]
			} while (res == FR_OK && --ne);
   2d9ba:	232f      	movs	r3, #47	; 0x2f
   2d9bc:	18fb      	adds	r3, r7, r3
   2d9be:	781b      	ldrb	r3, [r3, #0]
   2d9c0:	2b00      	cmp	r3, #0
   2d9c2:	d10d      	bne.n	2d9e0 <dir_register+0x2c8>
   2d9c4:	232a      	movs	r3, #42	; 0x2a
   2d9c6:	18fb      	adds	r3, r7, r3
   2d9c8:	222a      	movs	r2, #42	; 0x2a
   2d9ca:	18ba      	adds	r2, r7, r2
   2d9cc:	8812      	ldrh	r2, [r2, #0]
   2d9ce:	3a01      	subs	r2, #1
   2d9d0:	801a      	strh	r2, [r3, #0]
   2d9d2:	232a      	movs	r3, #42	; 0x2a
   2d9d4:	18fb      	adds	r3, r7, r3
   2d9d6:	881b      	ldrh	r3, [r3, #0]
   2d9d8:	2b00      	cmp	r3, #0
   2d9da:	d1c3      	bne.n	2d964 <dir_register+0x24c>
   2d9dc:	e000      	b.n	2d9e0 <dir_register+0x2c8>
				if (res != FR_OK) break;
   2d9de:	46c0      	nop			; (mov r8, r8)
			res = dir_next(dj, 1);			/* Next entry with table stretch */
		} while (res == FR_OK);
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
   2d9e0:	232f      	movs	r3, #47	; 0x2f
   2d9e2:	18fb      	adds	r3, r7, r3
   2d9e4:	781b      	ldrb	r3, [r3, #0]
   2d9e6:	2b00      	cmp	r3, #0
   2d9e8:	d12f      	bne.n	2da4a <dir_register+0x332>
		res = move_window(dj->fs, dj->sect);
   2d9ea:	687b      	ldr	r3, [r7, #4]
   2d9ec:	681a      	ldr	r2, [r3, #0]
   2d9ee:	687b      	ldr	r3, [r7, #4]
   2d9f0:	691b      	ldr	r3, [r3, #16]
   2d9f2:	212f      	movs	r1, #47	; 0x2f
   2d9f4:	187c      	adds	r4, r7, r1
   2d9f6:	0019      	movs	r1, r3
   2d9f8:	0010      	movs	r0, r2
   2d9fa:	4b1c      	ldr	r3, [pc, #112]	; (2da6c <dir_register+0x354>)
   2d9fc:	4798      	blx	r3
   2d9fe:	0003      	movs	r3, r0
   2da00:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
   2da02:	232f      	movs	r3, #47	; 0x2f
   2da04:	18fb      	adds	r3, r7, r3
   2da06:	781b      	ldrb	r3, [r3, #0]
   2da08:	2b00      	cmp	r3, #0
   2da0a:	d11e      	bne.n	2da4a <dir_register+0x332>
			dir = dj->dir;
   2da0c:	687b      	ldr	r3, [r7, #4]
   2da0e:	695b      	ldr	r3, [r3, #20]
   2da10:	61bb      	str	r3, [r7, #24]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
   2da12:	69bb      	ldr	r3, [r7, #24]
   2da14:	2220      	movs	r2, #32
   2da16:	2100      	movs	r1, #0
   2da18:	0018      	movs	r0, r3
   2da1a:	4b18      	ldr	r3, [pc, #96]	; (2da7c <dir_register+0x364>)
   2da1c:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
   2da1e:	687b      	ldr	r3, [r7, #4]
   2da20:	6999      	ldr	r1, [r3, #24]
   2da22:	69bb      	ldr	r3, [r7, #24]
   2da24:	220b      	movs	r2, #11
   2da26:	0018      	movs	r0, r3
   2da28:	4b0b      	ldr	r3, [pc, #44]	; (2da58 <dir_register+0x340>)
   2da2a:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
   2da2c:	69bb      	ldr	r3, [r7, #24]
   2da2e:	330c      	adds	r3, #12
   2da30:	001a      	movs	r2, r3
   2da32:	687b      	ldr	r3, [r7, #4]
   2da34:	699b      	ldr	r3, [r3, #24]
   2da36:	330b      	adds	r3, #11
   2da38:	781b      	ldrb	r3, [r3, #0]
   2da3a:	2118      	movs	r1, #24
   2da3c:	400b      	ands	r3, r1
   2da3e:	b2db      	uxtb	r3, r3
   2da40:	7013      	strb	r3, [r2, #0]
#endif
			dj->fs->wflag = 1;
   2da42:	687b      	ldr	r3, [r7, #4]
   2da44:	681b      	ldr	r3, [r3, #0]
   2da46:	2201      	movs	r2, #1
   2da48:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
   2da4a:	232f      	movs	r3, #47	; 0x2f
   2da4c:	18fb      	adds	r3, r7, r3
   2da4e:	781b      	ldrb	r3, [r3, #0]
}
   2da50:	0018      	movs	r0, r3
   2da52:	46bd      	mov	sp, r7
   2da54:	b00d      	add	sp, #52	; 0x34
   2da56:	bd90      	pop	{r4, r7, pc}
   2da58:	0002c571 	.word	0x0002c571
   2da5c:	0002d3cd 	.word	0x0002d3cd
   2da60:	0002d51d 	.word	0x0002d51d
   2da64:	00033969 	.word	0x00033969
   2da68:	0002ce99 	.word	0x0002ce99
   2da6c:	0002c655 	.word	0x0002c655
   2da70:	0002cfc9 	.word	0x0002cfc9
   2da74:	0002d4cd 	.word	0x0002d4cd
   2da78:	0002d2bd 	.word	0x0002d2bd
   2da7c:	0002c5a9 	.word	0x0002c5a9

0002da80 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
   2da80:	b590      	push	{r4, r7, lr}
   2da82:	b08b      	sub	sp, #44	; 0x2c
   2da84:	af00      	add	r7, sp, #0
   2da86:	6078      	str	r0, [r7, #4]
   2da88:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
   2da8a:	683b      	ldr	r3, [r7, #0]
   2da8c:	681b      	ldr	r3, [r3, #0]
   2da8e:	613b      	str	r3, [r7, #16]
   2da90:	e002      	b.n	2da98 <create_name+0x18>
   2da92:	693b      	ldr	r3, [r7, #16]
   2da94:	3301      	adds	r3, #1
   2da96:	613b      	str	r3, [r7, #16]
   2da98:	693b      	ldr	r3, [r7, #16]
   2da9a:	781b      	ldrb	r3, [r3, #0]
   2da9c:	2b2f      	cmp	r3, #47	; 0x2f
   2da9e:	d0f8      	beq.n	2da92 <create_name+0x12>
   2daa0:	693b      	ldr	r3, [r7, #16]
   2daa2:	781b      	ldrb	r3, [r3, #0]
   2daa4:	2b5c      	cmp	r3, #92	; 0x5c
   2daa6:	d0f4      	beq.n	2da92 <create_name+0x12>
	lfn = dj->lfn;
   2daa8:	687b      	ldr	r3, [r7, #4]
   2daaa:	69db      	ldr	r3, [r3, #28]
   2daac:	60fb      	str	r3, [r7, #12]
	si = di = 0;
   2daae:	2300      	movs	r3, #0
   2dab0:	617b      	str	r3, [r7, #20]
   2dab2:	697b      	ldr	r3, [r7, #20]
   2dab4:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
   2dab6:	69bb      	ldr	r3, [r7, #24]
   2dab8:	1c5a      	adds	r2, r3, #1
   2daba:	61ba      	str	r2, [r7, #24]
   2dabc:	693a      	ldr	r2, [r7, #16]
   2dabe:	18d3      	adds	r3, r2, r3
   2dac0:	781a      	ldrb	r2, [r3, #0]
   2dac2:	2324      	movs	r3, #36	; 0x24
   2dac4:	18fb      	adds	r3, r7, r3
   2dac6:	801a      	strh	r2, [r3, #0]
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
   2dac8:	2324      	movs	r3, #36	; 0x24
   2daca:	18fb      	adds	r3, r7, r3
   2dacc:	881b      	ldrh	r3, [r3, #0]
   2dace:	2b1f      	cmp	r3, #31
   2dad0:	d944      	bls.n	2db5c <create_name+0xdc>
   2dad2:	2324      	movs	r3, #36	; 0x24
   2dad4:	18fb      	adds	r3, r7, r3
   2dad6:	881b      	ldrh	r3, [r3, #0]
   2dad8:	2b2f      	cmp	r3, #47	; 0x2f
   2dada:	d03f      	beq.n	2db5c <create_name+0xdc>
   2dadc:	2324      	movs	r3, #36	; 0x24
   2dade:	18fb      	adds	r3, r7, r3
   2dae0:	881b      	ldrh	r3, [r3, #0]
   2dae2:	2b5c      	cmp	r3, #92	; 0x5c
   2dae4:	d03a      	beq.n	2db5c <create_name+0xdc>
		if (di >= _MAX_LFN)				/* Reject too long name */
   2dae6:	697b      	ldr	r3, [r7, #20]
   2dae8:	2bfe      	cmp	r3, #254	; 0xfe
   2daea:	d901      	bls.n	2daf0 <create_name+0x70>
			return FR_INVALID_NAME;
   2daec:	2306      	movs	r3, #6
   2daee:	e1e7      	b.n	2dec0 <create_name+0x440>
#if !_LFN_UNICODE
		w &= 0xFF;
   2daf0:	2324      	movs	r3, #36	; 0x24
   2daf2:	18fb      	adds	r3, r7, r3
   2daf4:	2224      	movs	r2, #36	; 0x24
   2daf6:	18ba      	adds	r2, r7, r2
   2daf8:	8812      	ldrh	r2, [r2, #0]
   2dafa:	21ff      	movs	r1, #255	; 0xff
   2dafc:	400a      	ands	r2, r1
   2dafe:	801a      	strh	r2, [r3, #0]
			b = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
			w = (w << 8) + b;			/* Create a DBC */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
   2db00:	2324      	movs	r3, #36	; 0x24
   2db02:	18fc      	adds	r4, r7, r3
   2db04:	2324      	movs	r3, #36	; 0x24
   2db06:	18fb      	adds	r3, r7, r3
   2db08:	881b      	ldrh	r3, [r3, #0]
   2db0a:	2101      	movs	r1, #1
   2db0c:	0018      	movs	r0, r3
   2db0e:	4bba      	ldr	r3, [pc, #744]	; (2ddf8 <create_name+0x378>)
   2db10:	4798      	blx	r3
   2db12:	0003      	movs	r3, r0
   2db14:	8023      	strh	r3, [r4, #0]
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
   2db16:	2324      	movs	r3, #36	; 0x24
   2db18:	18fb      	adds	r3, r7, r3
   2db1a:	881b      	ldrh	r3, [r3, #0]
   2db1c:	2b00      	cmp	r3, #0
   2db1e:	d101      	bne.n	2db24 <create_name+0xa4>
   2db20:	2306      	movs	r3, #6
   2db22:	e1cd      	b.n	2dec0 <create_name+0x440>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
   2db24:	2324      	movs	r3, #36	; 0x24
   2db26:	18fb      	adds	r3, r7, r3
   2db28:	881b      	ldrh	r3, [r3, #0]
   2db2a:	2b7f      	cmp	r3, #127	; 0x7f
   2db2c:	d80b      	bhi.n	2db46 <create_name+0xc6>
   2db2e:	2324      	movs	r3, #36	; 0x24
   2db30:	18fb      	adds	r3, r7, r3
   2db32:	881a      	ldrh	r2, [r3, #0]
   2db34:	4bb1      	ldr	r3, [pc, #708]	; (2ddfc <create_name+0x37c>)
   2db36:	0011      	movs	r1, r2
   2db38:	0018      	movs	r0, r3
   2db3a:	4bb1      	ldr	r3, [pc, #708]	; (2de00 <create_name+0x380>)
   2db3c:	4798      	blx	r3
   2db3e:	1e03      	subs	r3, r0, #0
   2db40:	d001      	beq.n	2db46 <create_name+0xc6>
			return FR_INVALID_NAME;
   2db42:	2306      	movs	r3, #6
   2db44:	e1bc      	b.n	2dec0 <create_name+0x440>
		lfn[di++] = w;					/* Store the Unicode char */
   2db46:	697b      	ldr	r3, [r7, #20]
   2db48:	1c5a      	adds	r2, r3, #1
   2db4a:	617a      	str	r2, [r7, #20]
   2db4c:	005b      	lsls	r3, r3, #1
   2db4e:	68fa      	ldr	r2, [r7, #12]
   2db50:	18d3      	adds	r3, r2, r3
   2db52:	2224      	movs	r2, #36	; 0x24
   2db54:	18ba      	adds	r2, r7, r2
   2db56:	8812      	ldrh	r2, [r2, #0]
   2db58:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
   2db5a:	e7ac      	b.n	2dab6 <create_name+0x36>
	}
	*path = &p[si];						/* Return pointer to the next segment */
   2db5c:	693a      	ldr	r2, [r7, #16]
   2db5e:	69bb      	ldr	r3, [r7, #24]
   2db60:	18d2      	adds	r2, r2, r3
   2db62:	683b      	ldr	r3, [r7, #0]
   2db64:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
   2db66:	2324      	movs	r3, #36	; 0x24
   2db68:	18fb      	adds	r3, r7, r3
   2db6a:	881b      	ldrh	r3, [r3, #0]
   2db6c:	2b1f      	cmp	r3, #31
   2db6e:	d801      	bhi.n	2db74 <create_name+0xf4>
   2db70:	2204      	movs	r2, #4
   2db72:	e000      	b.n	2db76 <create_name+0xf6>
   2db74:	2200      	movs	r2, #0
   2db76:	2326      	movs	r3, #38	; 0x26
   2db78:	18fb      	adds	r3, r7, r3
   2db7a:	701a      	strb	r2, [r3, #0]
			dj->fn[i] = (i < di) ? '.' : ' ';
		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
   2db7c:	e017      	b.n	2dbae <create_name+0x12e>
		w = lfn[di-1];
   2db7e:	697b      	ldr	r3, [r7, #20]
   2db80:	4aa0      	ldr	r2, [pc, #640]	; (2de04 <create_name+0x384>)
   2db82:	4694      	mov	ip, r2
   2db84:	4463      	add	r3, ip
   2db86:	005b      	lsls	r3, r3, #1
   2db88:	68fa      	ldr	r2, [r7, #12]
   2db8a:	18d2      	adds	r2, r2, r3
   2db8c:	2324      	movs	r3, #36	; 0x24
   2db8e:	18fb      	adds	r3, r7, r3
   2db90:	8812      	ldrh	r2, [r2, #0]
   2db92:	801a      	strh	r2, [r3, #0]
		if (w != ' ' && w != '.') break;
   2db94:	2324      	movs	r3, #36	; 0x24
   2db96:	18fb      	adds	r3, r7, r3
   2db98:	881b      	ldrh	r3, [r3, #0]
   2db9a:	2b20      	cmp	r3, #32
   2db9c:	d004      	beq.n	2dba8 <create_name+0x128>
   2db9e:	2324      	movs	r3, #36	; 0x24
   2dba0:	18fb      	adds	r3, r7, r3
   2dba2:	881b      	ldrh	r3, [r3, #0]
   2dba4:	2b2e      	cmp	r3, #46	; 0x2e
   2dba6:	d106      	bne.n	2dbb6 <create_name+0x136>
		di--;
   2dba8:	697b      	ldr	r3, [r7, #20]
   2dbaa:	3b01      	subs	r3, #1
   2dbac:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
   2dbae:	697b      	ldr	r3, [r7, #20]
   2dbb0:	2b00      	cmp	r3, #0
   2dbb2:	d1e4      	bne.n	2db7e <create_name+0xfe>
   2dbb4:	e000      	b.n	2dbb8 <create_name+0x138>
		if (w != ' ' && w != '.') break;
   2dbb6:	46c0      	nop			; (mov r8, r8)
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
   2dbb8:	697b      	ldr	r3, [r7, #20]
   2dbba:	2b00      	cmp	r3, #0
   2dbbc:	d101      	bne.n	2dbc2 <create_name+0x142>
   2dbbe:	2306      	movs	r3, #6
   2dbc0:	e17e      	b.n	2dec0 <create_name+0x440>

	lfn[di] = 0;						/* LFN is created */
   2dbc2:	697b      	ldr	r3, [r7, #20]
   2dbc4:	005b      	lsls	r3, r3, #1
   2dbc6:	68fa      	ldr	r2, [r7, #12]
   2dbc8:	18d3      	adds	r3, r2, r3
   2dbca:	2200      	movs	r2, #0
   2dbcc:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dj->fn, ' ', 11);
   2dbce:	687b      	ldr	r3, [r7, #4]
   2dbd0:	699b      	ldr	r3, [r3, #24]
   2dbd2:	220b      	movs	r2, #11
   2dbd4:	2120      	movs	r1, #32
   2dbd6:	0018      	movs	r0, r3
   2dbd8:	4b8b      	ldr	r3, [pc, #556]	; (2de08 <create_name+0x388>)
   2dbda:	4798      	blx	r3
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
   2dbdc:	2300      	movs	r3, #0
   2dbde:	61bb      	str	r3, [r7, #24]
   2dbe0:	e002      	b.n	2dbe8 <create_name+0x168>
   2dbe2:	69bb      	ldr	r3, [r7, #24]
   2dbe4:	3301      	adds	r3, #1
   2dbe6:	61bb      	str	r3, [r7, #24]
   2dbe8:	69bb      	ldr	r3, [r7, #24]
   2dbea:	005b      	lsls	r3, r3, #1
   2dbec:	68fa      	ldr	r2, [r7, #12]
   2dbee:	18d3      	adds	r3, r2, r3
   2dbf0:	881b      	ldrh	r3, [r3, #0]
   2dbf2:	2b20      	cmp	r3, #32
   2dbf4:	d0f5      	beq.n	2dbe2 <create_name+0x162>
   2dbf6:	69bb      	ldr	r3, [r7, #24]
   2dbf8:	005b      	lsls	r3, r3, #1
   2dbfa:	68fa      	ldr	r2, [r7, #12]
   2dbfc:	18d3      	adds	r3, r2, r3
   2dbfe:	881b      	ldrh	r3, [r3, #0]
   2dc00:	2b2e      	cmp	r3, #46	; 0x2e
   2dc02:	d0ee      	beq.n	2dbe2 <create_name+0x162>
	if (si) cf |= NS_LOSS | NS_LFN;
   2dc04:	69bb      	ldr	r3, [r7, #24]
   2dc06:	2b00      	cmp	r3, #0
   2dc08:	d00b      	beq.n	2dc22 <create_name+0x1a2>
   2dc0a:	2326      	movs	r3, #38	; 0x26
   2dc0c:	18fb      	adds	r3, r7, r3
   2dc0e:	2226      	movs	r2, #38	; 0x26
   2dc10:	18ba      	adds	r2, r7, r2
   2dc12:	7812      	ldrb	r2, [r2, #0]
   2dc14:	2103      	movs	r1, #3
   2dc16:	430a      	orrs	r2, r1
   2dc18:	701a      	strb	r2, [r3, #0]
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
   2dc1a:	e002      	b.n	2dc22 <create_name+0x1a2>
   2dc1c:	697b      	ldr	r3, [r7, #20]
   2dc1e:	3b01      	subs	r3, #1
   2dc20:	617b      	str	r3, [r7, #20]
   2dc22:	697b      	ldr	r3, [r7, #20]
   2dc24:	2b00      	cmp	r3, #0
   2dc26:	d009      	beq.n	2dc3c <create_name+0x1bc>
   2dc28:	697b      	ldr	r3, [r7, #20]
   2dc2a:	4a76      	ldr	r2, [pc, #472]	; (2de04 <create_name+0x384>)
   2dc2c:	4694      	mov	ip, r2
   2dc2e:	4463      	add	r3, ip
   2dc30:	005b      	lsls	r3, r3, #1
   2dc32:	68fa      	ldr	r2, [r7, #12]
   2dc34:	18d3      	adds	r3, r2, r3
   2dc36:	881b      	ldrh	r3, [r3, #0]
   2dc38:	2b2e      	cmp	r3, #46	; 0x2e
   2dc3a:	d1ef      	bne.n	2dc1c <create_name+0x19c>

	b = i = 0; ni = 8;
   2dc3c:	2300      	movs	r3, #0
   2dc3e:	623b      	str	r3, [r7, #32]
   2dc40:	2327      	movs	r3, #39	; 0x27
   2dc42:	18fb      	adds	r3, r7, r3
   2dc44:	2200      	movs	r2, #0
   2dc46:	701a      	strb	r2, [r3, #0]
   2dc48:	2308      	movs	r3, #8
   2dc4a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN char */
   2dc4c:	69bb      	ldr	r3, [r7, #24]
   2dc4e:	1c5a      	adds	r2, r3, #1
   2dc50:	61ba      	str	r2, [r7, #24]
   2dc52:	005b      	lsls	r3, r3, #1
   2dc54:	68fa      	ldr	r2, [r7, #12]
   2dc56:	18d2      	adds	r2, r2, r3
   2dc58:	2324      	movs	r3, #36	; 0x24
   2dc5a:	18fb      	adds	r3, r7, r3
   2dc5c:	8812      	ldrh	r2, [r2, #0]
   2dc5e:	801a      	strh	r2, [r3, #0]
		if (!w) break;					/* Break on end of the LFN */
   2dc60:	2324      	movs	r3, #36	; 0x24
   2dc62:	18fb      	adds	r3, r7, r3
   2dc64:	881b      	ldrh	r3, [r3, #0]
   2dc66:	2b00      	cmp	r3, #0
   2dc68:	d100      	bne.n	2dc6c <create_name+0x1ec>
   2dc6a:	e0c3      	b.n	2ddf4 <create_name+0x374>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
   2dc6c:	2324      	movs	r3, #36	; 0x24
   2dc6e:	18fb      	adds	r3, r7, r3
   2dc70:	881b      	ldrh	r3, [r3, #0]
   2dc72:	2b20      	cmp	r3, #32
   2dc74:	d008      	beq.n	2dc88 <create_name+0x208>
   2dc76:	2324      	movs	r3, #36	; 0x24
   2dc78:	18fb      	adds	r3, r7, r3
   2dc7a:	881b      	ldrh	r3, [r3, #0]
   2dc7c:	2b2e      	cmp	r3, #46	; 0x2e
   2dc7e:	d10c      	bne.n	2dc9a <create_name+0x21a>
   2dc80:	69ba      	ldr	r2, [r7, #24]
   2dc82:	697b      	ldr	r3, [r7, #20]
   2dc84:	429a      	cmp	r2, r3
   2dc86:	d008      	beq.n	2dc9a <create_name+0x21a>
			cf |= NS_LOSS | NS_LFN; continue;
   2dc88:	2326      	movs	r3, #38	; 0x26
   2dc8a:	18fb      	adds	r3, r7, r3
   2dc8c:	2226      	movs	r2, #38	; 0x26
   2dc8e:	18ba      	adds	r2, r7, r2
   2dc90:	7812      	ldrb	r2, [r2, #0]
   2dc92:	2103      	movs	r1, #3
   2dc94:	430a      	orrs	r2, r1
   2dc96:	701a      	strb	r2, [r3, #0]
   2dc98:	e0ab      	b.n	2ddf2 <create_name+0x372>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
   2dc9a:	6a3a      	ldr	r2, [r7, #32]
   2dc9c:	69fb      	ldr	r3, [r7, #28]
   2dc9e:	429a      	cmp	r2, r3
   2dca0:	d203      	bcs.n	2dcaa <create_name+0x22a>
   2dca2:	69ba      	ldr	r2, [r7, #24]
   2dca4:	697b      	ldr	r3, [r7, #20]
   2dca6:	429a      	cmp	r2, r3
   2dca8:	d12a      	bne.n	2dd00 <create_name+0x280>
			if (ni == 11) {				/* Long extension */
   2dcaa:	69fb      	ldr	r3, [r7, #28]
   2dcac:	2b0b      	cmp	r3, #11
   2dcae:	d108      	bne.n	2dcc2 <create_name+0x242>
				cf |= NS_LOSS | NS_LFN; break;
   2dcb0:	2326      	movs	r3, #38	; 0x26
   2dcb2:	18fb      	adds	r3, r7, r3
   2dcb4:	2226      	movs	r2, #38	; 0x26
   2dcb6:	18ba      	adds	r2, r7, r2
   2dcb8:	7812      	ldrb	r2, [r2, #0]
   2dcba:	2103      	movs	r1, #3
   2dcbc:	430a      	orrs	r2, r1
   2dcbe:	701a      	strb	r2, [r3, #0]
   2dcc0:	e0a9      	b.n	2de16 <create_name+0x396>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
   2dcc2:	69ba      	ldr	r2, [r7, #24]
   2dcc4:	697b      	ldr	r3, [r7, #20]
   2dcc6:	429a      	cmp	r2, r3
   2dcc8:	d007      	beq.n	2dcda <create_name+0x25a>
   2dcca:	2326      	movs	r3, #38	; 0x26
   2dccc:	18fb      	adds	r3, r7, r3
   2dcce:	2226      	movs	r2, #38	; 0x26
   2dcd0:	18ba      	adds	r2, r7, r2
   2dcd2:	7812      	ldrb	r2, [r2, #0]
   2dcd4:	2103      	movs	r1, #3
   2dcd6:	430a      	orrs	r2, r1
   2dcd8:	701a      	strb	r2, [r3, #0]
			if (si > di) break;			/* No extension */
   2dcda:	69ba      	ldr	r2, [r7, #24]
   2dcdc:	697b      	ldr	r3, [r7, #20]
   2dcde:	429a      	cmp	r2, r3
   2dce0:	d900      	bls.n	2dce4 <create_name+0x264>
   2dce2:	e097      	b.n	2de14 <create_name+0x394>
			si = di; i = 8; ni = 11;	/* Enter extension section */
   2dce4:	697b      	ldr	r3, [r7, #20]
   2dce6:	61bb      	str	r3, [r7, #24]
   2dce8:	2308      	movs	r3, #8
   2dcea:	623b      	str	r3, [r7, #32]
   2dcec:	230b      	movs	r3, #11
   2dcee:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
   2dcf0:	2327      	movs	r3, #39	; 0x27
   2dcf2:	18fb      	adds	r3, r7, r3
   2dcf4:	2227      	movs	r2, #39	; 0x27
   2dcf6:	18ba      	adds	r2, r7, r2
   2dcf8:	7812      	ldrb	r2, [r2, #0]
   2dcfa:	0092      	lsls	r2, r2, #2
   2dcfc:	701a      	strb	r2, [r3, #0]
   2dcfe:	e078      	b.n	2ddf2 <create_name+0x372>
		}

		if (w >= 0x80) {				/* Non ASCII char */
   2dd00:	2324      	movs	r3, #36	; 0x24
   2dd02:	18fb      	adds	r3, r7, r3
   2dd04:	881b      	ldrh	r3, [r3, #0]
   2dd06:	2b7f      	cmp	r3, #127	; 0x7f
   2dd08:	d920      	bls.n	2dd4c <create_name+0x2cc>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
   2dd0a:	2324      	movs	r3, #36	; 0x24
   2dd0c:	18fc      	adds	r4, r7, r3
   2dd0e:	2324      	movs	r3, #36	; 0x24
   2dd10:	18fb      	adds	r3, r7, r3
   2dd12:	881b      	ldrh	r3, [r3, #0]
   2dd14:	2100      	movs	r1, #0
   2dd16:	0018      	movs	r0, r3
   2dd18:	4b37      	ldr	r3, [pc, #220]	; (2ddf8 <create_name+0x378>)
   2dd1a:	4798      	blx	r3
   2dd1c:	0003      	movs	r3, r0
   2dd1e:	8023      	strh	r3, [r4, #0]
			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
   2dd20:	2324      	movs	r3, #36	; 0x24
   2dd22:	18fb      	adds	r3, r7, r3
   2dd24:	881b      	ldrh	r3, [r3, #0]
   2dd26:	2b00      	cmp	r3, #0
   2dd28:	d008      	beq.n	2dd3c <create_name+0x2bc>
   2dd2a:	2324      	movs	r3, #36	; 0x24
   2dd2c:	18fb      	adds	r3, r7, r3
   2dd2e:	881b      	ldrh	r3, [r3, #0]
   2dd30:	3b80      	subs	r3, #128	; 0x80
   2dd32:	4a36      	ldr	r2, [pc, #216]	; (2de0c <create_name+0x38c>)
   2dd34:	5cd2      	ldrb	r2, [r2, r3]
   2dd36:	2324      	movs	r3, #36	; 0x24
   2dd38:	18fb      	adds	r3, r7, r3
   2dd3a:	801a      	strh	r2, [r3, #0]
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
   2dd3c:	2326      	movs	r3, #38	; 0x26
   2dd3e:	18fb      	adds	r3, r7, r3
   2dd40:	2226      	movs	r2, #38	; 0x26
   2dd42:	18ba      	adds	r2, r7, r2
   2dd44:	7812      	ldrb	r2, [r2, #0]
   2dd46:	2102      	movs	r1, #2
   2dd48:	430a      	orrs	r2, r1
   2dd4a:	701a      	strb	r2, [r3, #0]
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dj->fn[i++] = (BYTE)(w >> 8);
		} else {						/* Single byte char */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
   2dd4c:	2324      	movs	r3, #36	; 0x24
   2dd4e:	18fb      	adds	r3, r7, r3
   2dd50:	881b      	ldrh	r3, [r3, #0]
   2dd52:	2b00      	cmp	r3, #0
   2dd54:	d009      	beq.n	2dd6a <create_name+0x2ea>
   2dd56:	2324      	movs	r3, #36	; 0x24
   2dd58:	18fb      	adds	r3, r7, r3
   2dd5a:	881a      	ldrh	r2, [r3, #0]
   2dd5c:	4b2c      	ldr	r3, [pc, #176]	; (2de10 <create_name+0x390>)
   2dd5e:	0011      	movs	r1, r2
   2dd60:	0018      	movs	r0, r3
   2dd62:	4b27      	ldr	r3, [pc, #156]	; (2de00 <create_name+0x380>)
   2dd64:	4798      	blx	r3
   2dd66:	1e03      	subs	r3, r0, #0
   2dd68:	d00c      	beq.n	2dd84 <create_name+0x304>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
   2dd6a:	2324      	movs	r3, #36	; 0x24
   2dd6c:	18fb      	adds	r3, r7, r3
   2dd6e:	225f      	movs	r2, #95	; 0x5f
   2dd70:	801a      	strh	r2, [r3, #0]
   2dd72:	2326      	movs	r3, #38	; 0x26
   2dd74:	18fb      	adds	r3, r7, r3
   2dd76:	2226      	movs	r2, #38	; 0x26
   2dd78:	18ba      	adds	r2, r7, r2
   2dd7a:	7812      	ldrb	r2, [r2, #0]
   2dd7c:	2103      	movs	r1, #3
   2dd7e:	430a      	orrs	r2, r1
   2dd80:	701a      	strb	r2, [r3, #0]
   2dd82:	e02b      	b.n	2dddc <create_name+0x35c>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
   2dd84:	2324      	movs	r3, #36	; 0x24
   2dd86:	18fb      	adds	r3, r7, r3
   2dd88:	881b      	ldrh	r3, [r3, #0]
   2dd8a:	2b40      	cmp	r3, #64	; 0x40
   2dd8c:	d90d      	bls.n	2ddaa <create_name+0x32a>
   2dd8e:	2324      	movs	r3, #36	; 0x24
   2dd90:	18fb      	adds	r3, r7, r3
   2dd92:	881b      	ldrh	r3, [r3, #0]
   2dd94:	2b5a      	cmp	r3, #90	; 0x5a
   2dd96:	d808      	bhi.n	2ddaa <create_name+0x32a>
					b |= 2;
   2dd98:	2327      	movs	r3, #39	; 0x27
   2dd9a:	18fb      	adds	r3, r7, r3
   2dd9c:	2227      	movs	r2, #39	; 0x27
   2dd9e:	18ba      	adds	r2, r7, r2
   2dda0:	7812      	ldrb	r2, [r2, #0]
   2dda2:	2102      	movs	r1, #2
   2dda4:	430a      	orrs	r2, r1
   2dda6:	701a      	strb	r2, [r3, #0]
   2dda8:	e018      	b.n	2dddc <create_name+0x35c>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
   2ddaa:	2324      	movs	r3, #36	; 0x24
   2ddac:	18fb      	adds	r3, r7, r3
   2ddae:	881b      	ldrh	r3, [r3, #0]
   2ddb0:	2b60      	cmp	r3, #96	; 0x60
   2ddb2:	d913      	bls.n	2dddc <create_name+0x35c>
   2ddb4:	2324      	movs	r3, #36	; 0x24
   2ddb6:	18fb      	adds	r3, r7, r3
   2ddb8:	881b      	ldrh	r3, [r3, #0]
   2ddba:	2b7a      	cmp	r3, #122	; 0x7a
   2ddbc:	d80e      	bhi.n	2dddc <create_name+0x35c>
						b |= 1; w -= 0x20;
   2ddbe:	2327      	movs	r3, #39	; 0x27
   2ddc0:	18fb      	adds	r3, r7, r3
   2ddc2:	2227      	movs	r2, #39	; 0x27
   2ddc4:	18ba      	adds	r2, r7, r2
   2ddc6:	7812      	ldrb	r2, [r2, #0]
   2ddc8:	2101      	movs	r1, #1
   2ddca:	430a      	orrs	r2, r1
   2ddcc:	701a      	strb	r2, [r3, #0]
   2ddce:	2324      	movs	r3, #36	; 0x24
   2ddd0:	18fb      	adds	r3, r7, r3
   2ddd2:	2224      	movs	r2, #36	; 0x24
   2ddd4:	18ba      	adds	r2, r7, r2
   2ddd6:	8812      	ldrh	r2, [r2, #0]
   2ddd8:	3a20      	subs	r2, #32
   2ddda:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
		dj->fn[i++] = (BYTE)w;
   2dddc:	687b      	ldr	r3, [r7, #4]
   2ddde:	699a      	ldr	r2, [r3, #24]
   2dde0:	6a3b      	ldr	r3, [r7, #32]
   2dde2:	1c59      	adds	r1, r3, #1
   2dde4:	6239      	str	r1, [r7, #32]
   2dde6:	18d3      	adds	r3, r2, r3
   2dde8:	2224      	movs	r2, #36	; 0x24
   2ddea:	18ba      	adds	r2, r7, r2
   2ddec:	8812      	ldrh	r2, [r2, #0]
   2ddee:	b2d2      	uxtb	r2, r2
   2ddf0:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN char */
   2ddf2:	e72b      	b.n	2dc4c <create_name+0x1cc>
		if (!w) break;					/* Break on end of the LFN */
   2ddf4:	46c0      	nop			; (mov r8, r8)
   2ddf6:	e00e      	b.n	2de16 <create_name+0x396>
   2ddf8:	0002f1b9 	.word	0x0002f1b9
   2ddfc:	0003a6e0 	.word	0x0003a6e0
   2de00:	0002c623 	.word	0x0002c623
   2de04:	7fffffff 	.word	0x7fffffff
   2de08:	0002c5a9 	.word	0x0002c5a9
   2de0c:	0003a728 	.word	0x0003a728
   2de10:	0003a6ec 	.word	0x0003a6ec
			if (si > di) break;			/* No extension */
   2de14:	46c0      	nop			; (mov r8, r8)
	}

	if (dj->fn[0] == DDE) dj->fn[0] = NDDE;	/* If the first char collides with deleted mark, replace it with 0x05 */
   2de16:	687b      	ldr	r3, [r7, #4]
   2de18:	699b      	ldr	r3, [r3, #24]
   2de1a:	781b      	ldrb	r3, [r3, #0]
   2de1c:	2be5      	cmp	r3, #229	; 0xe5
   2de1e:	d103      	bne.n	2de28 <create_name+0x3a8>
   2de20:	687b      	ldr	r3, [r7, #4]
   2de22:	699b      	ldr	r3, [r3, #24]
   2de24:	2205      	movs	r2, #5
   2de26:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
   2de28:	69fb      	ldr	r3, [r7, #28]
   2de2a:	2b08      	cmp	r3, #8
   2de2c:	d106      	bne.n	2de3c <create_name+0x3bc>
   2de2e:	2327      	movs	r3, #39	; 0x27
   2de30:	18fb      	adds	r3, r7, r3
   2de32:	2227      	movs	r2, #39	; 0x27
   2de34:	18ba      	adds	r2, r7, r2
   2de36:	7812      	ldrb	r2, [r2, #0]
   2de38:	0092      	lsls	r2, r2, #2
   2de3a:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
   2de3c:	2327      	movs	r3, #39	; 0x27
   2de3e:	18fb      	adds	r3, r7, r3
   2de40:	781b      	ldrb	r3, [r3, #0]
   2de42:	220c      	movs	r2, #12
   2de44:	4013      	ands	r3, r2
   2de46:	2b0c      	cmp	r3, #12
   2de48:	d006      	beq.n	2de58 <create_name+0x3d8>
   2de4a:	2327      	movs	r3, #39	; 0x27
   2de4c:	18fb      	adds	r3, r7, r3
   2de4e:	781b      	ldrb	r3, [r3, #0]
   2de50:	2203      	movs	r2, #3
   2de52:	4013      	ands	r3, r2
   2de54:	2b03      	cmp	r3, #3
   2de56:	d107      	bne.n	2de68 <create_name+0x3e8>
		cf |= NS_LFN;
   2de58:	2326      	movs	r3, #38	; 0x26
   2de5a:	18fb      	adds	r3, r7, r3
   2de5c:	2226      	movs	r2, #38	; 0x26
   2de5e:	18ba      	adds	r2, r7, r2
   2de60:	7812      	ldrb	r2, [r2, #0]
   2de62:	2102      	movs	r1, #2
   2de64:	430a      	orrs	r2, r1
   2de66:	701a      	strb	r2, [r3, #0]
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are created */
   2de68:	2326      	movs	r3, #38	; 0x26
   2de6a:	18fb      	adds	r3, r7, r3
   2de6c:	781b      	ldrb	r3, [r3, #0]
   2de6e:	2202      	movs	r2, #2
   2de70:	4013      	ands	r3, r2
   2de72:	d11d      	bne.n	2deb0 <create_name+0x430>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
   2de74:	2327      	movs	r3, #39	; 0x27
   2de76:	18fb      	adds	r3, r7, r3
   2de78:	781b      	ldrb	r3, [r3, #0]
   2de7a:	2203      	movs	r2, #3
   2de7c:	4013      	ands	r3, r2
   2de7e:	2b01      	cmp	r3, #1
   2de80:	d107      	bne.n	2de92 <create_name+0x412>
   2de82:	2326      	movs	r3, #38	; 0x26
   2de84:	18fb      	adds	r3, r7, r3
   2de86:	2226      	movs	r2, #38	; 0x26
   2de88:	18ba      	adds	r2, r7, r2
   2de8a:	7812      	ldrb	r2, [r2, #0]
   2de8c:	2110      	movs	r1, #16
   2de8e:	430a      	orrs	r2, r1
   2de90:	701a      	strb	r2, [r3, #0]
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
   2de92:	2327      	movs	r3, #39	; 0x27
   2de94:	18fb      	adds	r3, r7, r3
   2de96:	781b      	ldrb	r3, [r3, #0]
   2de98:	220c      	movs	r2, #12
   2de9a:	4013      	ands	r3, r2
   2de9c:	2b04      	cmp	r3, #4
   2de9e:	d107      	bne.n	2deb0 <create_name+0x430>
   2dea0:	2326      	movs	r3, #38	; 0x26
   2dea2:	18fb      	adds	r3, r7, r3
   2dea4:	2226      	movs	r2, #38	; 0x26
   2dea6:	18ba      	adds	r2, r7, r2
   2dea8:	7812      	ldrb	r2, [r2, #0]
   2deaa:	2108      	movs	r1, #8
   2deac:	430a      	orrs	r2, r1
   2deae:	701a      	strb	r2, [r3, #0]
	}

	dj->fn[NS] = cf;	/* SFN is created */
   2deb0:	687b      	ldr	r3, [r7, #4]
   2deb2:	699b      	ldr	r3, [r3, #24]
   2deb4:	330b      	adds	r3, #11
   2deb6:	2226      	movs	r2, #38	; 0x26
   2deb8:	18ba      	adds	r2, r7, r2
   2deba:	7812      	ldrb	r2, [r2, #0]
   2debc:	701a      	strb	r2, [r3, #0]

	return FR_OK;
   2debe:	2300      	movs	r3, #0

	sfn[NS] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
   2dec0:	0018      	movs	r0, r3
   2dec2:	46bd      	mov	sp, r7
   2dec4:	b00b      	add	sp, #44	; 0x2c
   2dec6:	bd90      	pop	{r4, r7, pc}

0002dec8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
   2dec8:	b590      	push	{r4, r7, lr}
   2deca:	b085      	sub	sp, #20
   2decc:	af00      	add	r7, sp, #0
   2dece:	6078      	str	r0, [r7, #4]
   2ded0:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
   2ded2:	683b      	ldr	r3, [r7, #0]
   2ded4:	781b      	ldrb	r3, [r3, #0]
   2ded6:	2b2f      	cmp	r3, #47	; 0x2f
   2ded8:	d003      	beq.n	2dee2 <follow_path+0x1a>
   2deda:	683b      	ldr	r3, [r7, #0]
   2dedc:	781b      	ldrb	r3, [r3, #0]
   2dede:	2b5c      	cmp	r3, #92	; 0x5c
   2dee0:	d102      	bne.n	2dee8 <follow_path+0x20>
		path++;
   2dee2:	683b      	ldr	r3, [r7, #0]
   2dee4:	3301      	adds	r3, #1
   2dee6:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
   2dee8:	687b      	ldr	r3, [r7, #4]
   2deea:	2200      	movs	r2, #0
   2deec:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
   2deee:	683b      	ldr	r3, [r7, #0]
   2def0:	781b      	ldrb	r3, [r3, #0]
   2def2:	2b1f      	cmp	r3, #31
   2def4:	d80c      	bhi.n	2df10 <follow_path+0x48>
		res = dir_sdi(dj, 0);
   2def6:	230f      	movs	r3, #15
   2def8:	18fc      	adds	r4, r7, r3
   2defa:	687b      	ldr	r3, [r7, #4]
   2defc:	2100      	movs	r1, #0
   2defe:	0018      	movs	r0, r3
   2df00:	4b3c      	ldr	r3, [pc, #240]	; (2dff4 <follow_path+0x12c>)
   2df02:	4798      	blx	r3
   2df04:	0003      	movs	r3, r0
   2df06:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
   2df08:	687b      	ldr	r3, [r7, #4]
   2df0a:	2200      	movs	r2, #0
   2df0c:	615a      	str	r2, [r3, #20]
   2df0e:	e06a      	b.n	2dfe6 <follow_path+0x11e>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
   2df10:	230f      	movs	r3, #15
   2df12:	18fc      	adds	r4, r7, r3
   2df14:	003a      	movs	r2, r7
   2df16:	687b      	ldr	r3, [r7, #4]
   2df18:	0011      	movs	r1, r2
   2df1a:	0018      	movs	r0, r3
   2df1c:	4b36      	ldr	r3, [pc, #216]	; (2dff8 <follow_path+0x130>)
   2df1e:	4798      	blx	r3
   2df20:	0003      	movs	r3, r0
   2df22:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
   2df24:	230f      	movs	r3, #15
   2df26:	18fb      	adds	r3, r7, r3
   2df28:	781b      	ldrb	r3, [r3, #0]
   2df2a:	2b00      	cmp	r3, #0
   2df2c:	d154      	bne.n	2dfd8 <follow_path+0x110>
			res = dir_find(dj);				/* Find it */
   2df2e:	230f      	movs	r3, #15
   2df30:	18fc      	adds	r4, r7, r3
   2df32:	687b      	ldr	r3, [r7, #4]
   2df34:	0018      	movs	r0, r3
   2df36:	4b31      	ldr	r3, [pc, #196]	; (2dffc <follow_path+0x134>)
   2df38:	4798      	blx	r3
   2df3a:	0003      	movs	r3, r0
   2df3c:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
   2df3e:	687b      	ldr	r3, [r7, #4]
   2df40:	699a      	ldr	r2, [r3, #24]
   2df42:	230e      	movs	r3, #14
   2df44:	18fb      	adds	r3, r7, r3
   2df46:	7ad2      	ldrb	r2, [r2, #11]
   2df48:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
   2df4a:	230f      	movs	r3, #15
   2df4c:	18fb      	adds	r3, r7, r3
   2df4e:	781b      	ldrb	r3, [r3, #0]
   2df50:	2b00      	cmp	r3, #0
   2df52:	d00f      	beq.n	2df74 <follow_path+0xac>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2df54:	230f      	movs	r3, #15
   2df56:	18fb      	adds	r3, r7, r3
   2df58:	781b      	ldrb	r3, [r3, #0]
   2df5a:	2b04      	cmp	r3, #4
   2df5c:	d13e      	bne.n	2dfdc <follow_path+0x114>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
   2df5e:	230e      	movs	r3, #14
   2df60:	18fb      	adds	r3, r7, r3
   2df62:	781b      	ldrb	r3, [r3, #0]
   2df64:	2204      	movs	r2, #4
   2df66:	4013      	ands	r3, r2
   2df68:	d13a      	bne.n	2dfe0 <follow_path+0x118>
   2df6a:	230f      	movs	r3, #15
   2df6c:	18fb      	adds	r3, r7, r3
   2df6e:	2205      	movs	r2, #5
   2df70:	701a      	strb	r2, [r3, #0]
				}
				break;
   2df72:	e035      	b.n	2dfe0 <follow_path+0x118>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2df74:	230e      	movs	r3, #14
   2df76:	18fb      	adds	r3, r7, r3
   2df78:	781b      	ldrb	r3, [r3, #0]
   2df7a:	2204      	movs	r2, #4
   2df7c:	4013      	ands	r3, r2
   2df7e:	d131      	bne.n	2dfe4 <follow_path+0x11c>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
   2df80:	687b      	ldr	r3, [r7, #4]
   2df82:	695b      	ldr	r3, [r3, #20]
   2df84:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
   2df86:	68bb      	ldr	r3, [r7, #8]
   2df88:	330b      	adds	r3, #11
   2df8a:	781b      	ldrb	r3, [r3, #0]
   2df8c:	001a      	movs	r2, r3
   2df8e:	2310      	movs	r3, #16
   2df90:	4013      	ands	r3, r2
   2df92:	d104      	bne.n	2df9e <follow_path+0xd6>
				res = FR_NO_PATH; break;
   2df94:	230f      	movs	r3, #15
   2df96:	18fb      	adds	r3, r7, r3
   2df98:	2205      	movs	r2, #5
   2df9a:	701a      	strb	r2, [r3, #0]
   2df9c:	e023      	b.n	2dfe6 <follow_path+0x11e>
			}
			dj->sclust = LD_CLUST(dir);
   2df9e:	68bb      	ldr	r3, [r7, #8]
   2dfa0:	3315      	adds	r3, #21
   2dfa2:	781b      	ldrb	r3, [r3, #0]
   2dfa4:	021b      	lsls	r3, r3, #8
   2dfa6:	b21a      	sxth	r2, r3
   2dfa8:	68bb      	ldr	r3, [r7, #8]
   2dfaa:	3314      	adds	r3, #20
   2dfac:	781b      	ldrb	r3, [r3, #0]
   2dfae:	b21b      	sxth	r3, r3
   2dfb0:	4313      	orrs	r3, r2
   2dfb2:	b21b      	sxth	r3, r3
   2dfb4:	b29b      	uxth	r3, r3
   2dfb6:	041b      	lsls	r3, r3, #16
   2dfb8:	68ba      	ldr	r2, [r7, #8]
   2dfba:	321b      	adds	r2, #27
   2dfbc:	7812      	ldrb	r2, [r2, #0]
   2dfbe:	0212      	lsls	r2, r2, #8
   2dfc0:	b211      	sxth	r1, r2
   2dfc2:	68ba      	ldr	r2, [r7, #8]
   2dfc4:	321a      	adds	r2, #26
   2dfc6:	7812      	ldrb	r2, [r2, #0]
   2dfc8:	b212      	sxth	r2, r2
   2dfca:	430a      	orrs	r2, r1
   2dfcc:	b212      	sxth	r2, r2
   2dfce:	b292      	uxth	r2, r2
   2dfd0:	431a      	orrs	r2, r3
   2dfd2:	687b      	ldr	r3, [r7, #4]
   2dfd4:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
   2dfd6:	e79b      	b.n	2df10 <follow_path+0x48>
			if (res != FR_OK) break;
   2dfd8:	46c0      	nop			; (mov r8, r8)
   2dfda:	e004      	b.n	2dfe6 <follow_path+0x11e>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
   2dfdc:	46c0      	nop			; (mov r8, r8)
   2dfde:	e002      	b.n	2dfe6 <follow_path+0x11e>
				break;
   2dfe0:	46c0      	nop			; (mov r8, r8)
   2dfe2:	e000      	b.n	2dfe6 <follow_path+0x11e>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
   2dfe4:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
   2dfe6:	230f      	movs	r3, #15
   2dfe8:	18fb      	adds	r3, r7, r3
   2dfea:	781b      	ldrb	r3, [r3, #0]
}
   2dfec:	0018      	movs	r0, r3
   2dfee:	46bd      	mov	sp, r7
   2dff0:	b005      	add	sp, #20
   2dff2:	bd90      	pop	{r4, r7, pc}
   2dff4:	0002ce99 	.word	0x0002ce99
   2dff8:	0002da81 	.word	0x0002da81
   2dffc:	0002d51d 	.word	0x0002d51d

0002e000 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
   2e000:	b590      	push	{r4, r7, lr}
   2e002:	b083      	sub	sp, #12
   2e004:	af00      	add	r7, sp, #0
   2e006:	6078      	str	r0, [r7, #4]
   2e008:	6039      	str	r1, [r7, #0]
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
   2e00a:	687b      	ldr	r3, [r7, #4]
   2e00c:	7858      	ldrb	r0, [r3, #1]
   2e00e:	687b      	ldr	r3, [r7, #4]
   2e010:	3330      	adds	r3, #48	; 0x30
   2e012:	0019      	movs	r1, r3
   2e014:	683a      	ldr	r2, [r7, #0]
   2e016:	2301      	movs	r3, #1
   2e018:	4c2a      	ldr	r4, [pc, #168]	; (2e0c4 <check_fs+0xc4>)
   2e01a:	47a0      	blx	r4
   2e01c:	1e03      	subs	r3, r0, #0
   2e01e:	d001      	beq.n	2e024 <check_fs+0x24>
		return 3;
   2e020:	2303      	movs	r3, #3
   2e022:	e04b      	b.n	2e0bc <check_fs+0xbc>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
   2e024:	687b      	ldr	r3, [r7, #4]
   2e026:	4a28      	ldr	r2, [pc, #160]	; (2e0c8 <check_fs+0xc8>)
   2e028:	4694      	mov	ip, r2
   2e02a:	4463      	add	r3, ip
   2e02c:	3301      	adds	r3, #1
   2e02e:	781b      	ldrb	r3, [r3, #0]
   2e030:	021b      	lsls	r3, r3, #8
   2e032:	b21a      	sxth	r2, r3
   2e034:	687b      	ldr	r3, [r7, #4]
   2e036:	4924      	ldr	r1, [pc, #144]	; (2e0c8 <check_fs+0xc8>)
   2e038:	5c5b      	ldrb	r3, [r3, r1]
   2e03a:	b21b      	sxth	r3, r3
   2e03c:	4313      	orrs	r3, r2
   2e03e:	b21b      	sxth	r3, r3
   2e040:	4a22      	ldr	r2, [pc, #136]	; (2e0cc <check_fs+0xcc>)
   2e042:	4293      	cmp	r3, r2
   2e044:	d001      	beq.n	2e04a <check_fs+0x4a>
		return 2;
   2e046:	2302      	movs	r3, #2
   2e048:	e038      	b.n	2e0bc <check_fs+0xbc>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
   2e04a:	687b      	ldr	r3, [r7, #4]
   2e04c:	3366      	adds	r3, #102	; 0x66
   2e04e:	3303      	adds	r3, #3
   2e050:	781b      	ldrb	r3, [r3, #0]
   2e052:	061a      	lsls	r2, r3, #24
   2e054:	687b      	ldr	r3, [r7, #4]
   2e056:	3366      	adds	r3, #102	; 0x66
   2e058:	3302      	adds	r3, #2
   2e05a:	781b      	ldrb	r3, [r3, #0]
   2e05c:	041b      	lsls	r3, r3, #16
   2e05e:	4313      	orrs	r3, r2
   2e060:	687a      	ldr	r2, [r7, #4]
   2e062:	3266      	adds	r2, #102	; 0x66
   2e064:	3201      	adds	r2, #1
   2e066:	7812      	ldrb	r2, [r2, #0]
   2e068:	0212      	lsls	r2, r2, #8
   2e06a:	4313      	orrs	r3, r2
   2e06c:	687a      	ldr	r2, [r7, #4]
   2e06e:	2166      	movs	r1, #102	; 0x66
   2e070:	5c52      	ldrb	r2, [r2, r1]
   2e072:	4313      	orrs	r3, r2
   2e074:	021b      	lsls	r3, r3, #8
   2e076:	0a1b      	lsrs	r3, r3, #8
   2e078:	4a15      	ldr	r2, [pc, #84]	; (2e0d0 <check_fs+0xd0>)
   2e07a:	4293      	cmp	r3, r2
   2e07c:	d101      	bne.n	2e082 <check_fs+0x82>
		return 0;
   2e07e:	2300      	movs	r3, #0
   2e080:	e01c      	b.n	2e0bc <check_fs+0xbc>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
   2e082:	687b      	ldr	r3, [r7, #4]
   2e084:	3382      	adds	r3, #130	; 0x82
   2e086:	3303      	adds	r3, #3
   2e088:	781b      	ldrb	r3, [r3, #0]
   2e08a:	061a      	lsls	r2, r3, #24
   2e08c:	687b      	ldr	r3, [r7, #4]
   2e08e:	3382      	adds	r3, #130	; 0x82
   2e090:	3302      	adds	r3, #2
   2e092:	781b      	ldrb	r3, [r3, #0]
   2e094:	041b      	lsls	r3, r3, #16
   2e096:	4313      	orrs	r3, r2
   2e098:	687a      	ldr	r2, [r7, #4]
   2e09a:	3282      	adds	r2, #130	; 0x82
   2e09c:	3201      	adds	r2, #1
   2e09e:	7812      	ldrb	r2, [r2, #0]
   2e0a0:	0212      	lsls	r2, r2, #8
   2e0a2:	4313      	orrs	r3, r2
   2e0a4:	687a      	ldr	r2, [r7, #4]
   2e0a6:	2182      	movs	r1, #130	; 0x82
   2e0a8:	5c52      	ldrb	r2, [r2, r1]
   2e0aa:	4313      	orrs	r3, r2
   2e0ac:	021b      	lsls	r3, r3, #8
   2e0ae:	0a1b      	lsrs	r3, r3, #8
   2e0b0:	4a07      	ldr	r2, [pc, #28]	; (2e0d0 <check_fs+0xd0>)
   2e0b2:	4293      	cmp	r3, r2
   2e0b4:	d101      	bne.n	2e0ba <check_fs+0xba>
		return 0;
   2e0b6:	2300      	movs	r3, #0
   2e0b8:	e000      	b.n	2e0bc <check_fs+0xbc>

	return 1;
   2e0ba:	2301      	movs	r3, #1
}
   2e0bc:	0018      	movs	r0, r3
   2e0be:	46bd      	mov	sp, r7
   2e0c0:	b003      	add	sp, #12
   2e0c2:	bd90      	pop	{r4, r7, pc}
   2e0c4:	0002c269 	.word	0x0002c269
   2e0c8:	0000022e 	.word	0x0000022e
   2e0cc:	ffffaa55 	.word	0xffffaa55
   2e0d0:	00544146 	.word	0x00544146

0002e0d4 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
   2e0d4:	b590      	push	{r4, r7, lr}
   2e0d6:	b093      	sub	sp, #76	; 0x4c
   2e0d8:	af00      	add	r7, sp, #0
   2e0da:	60f8      	str	r0, [r7, #12]
   2e0dc:	60b9      	str	r1, [r7, #8]
   2e0de:	1dfb      	adds	r3, r7, #7
   2e0e0:	701a      	strb	r2, [r3, #0]
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
   2e0e2:	68fb      	ldr	r3, [r7, #12]
   2e0e4:	681b      	ldr	r3, [r3, #0]
   2e0e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
   2e0e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2e0ea:	781b      	ldrb	r3, [r3, #0]
   2e0ec:	3b30      	subs	r3, #48	; 0x30
   2e0ee:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
   2e0f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e0f2:	2b09      	cmp	r3, #9
   2e0f4:	d80b      	bhi.n	2e10e <chk_mounted+0x3a>
   2e0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2e0f8:	3301      	adds	r3, #1
   2e0fa:	781b      	ldrb	r3, [r3, #0]
   2e0fc:	2b3a      	cmp	r3, #58	; 0x3a
   2e0fe:	d106      	bne.n	2e10e <chk_mounted+0x3a>
		p += 2; *path = p;				/* Return pointer to the path name */
   2e100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   2e102:	3302      	adds	r3, #2
   2e104:	62fb      	str	r3, [r7, #44]	; 0x2c
   2e106:	68fb      	ldr	r3, [r7, #12]
   2e108:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   2e10a:	601a      	str	r2, [r3, #0]
   2e10c:	e001      	b.n	2e112 <chk_mounted+0x3e>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
   2e10e:	2300      	movs	r3, #0
   2e110:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
   2e112:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e114:	2b07      	cmp	r3, #7
   2e116:	d901      	bls.n	2e11c <chk_mounted+0x48>
		return FR_INVALID_DRIVE;
   2e118:	230b      	movs	r3, #11
   2e11a:	e2af      	b.n	2e67c <chk_mounted+0x5a8>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
   2e11c:	4bc5      	ldr	r3, [pc, #788]	; (2e434 <chk_mounted+0x360>)
   2e11e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   2e120:	0092      	lsls	r2, r2, #2
   2e122:	58d3      	ldr	r3, [r2, r3]
   2e124:	62bb      	str	r3, [r7, #40]	; 0x28
   2e126:	68bb      	ldr	r3, [r7, #8]
   2e128:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e12a:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
   2e12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e12e:	2b00      	cmp	r3, #0
   2e130:	d101      	bne.n	2e136 <chk_mounted+0x62>
   2e132:	230c      	movs	r3, #12
   2e134:	e2a2      	b.n	2e67c <chk_mounted+0x5a8>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
   2e136:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e138:	781b      	ldrb	r3, [r3, #0]
   2e13a:	2b00      	cmp	r3, #0
   2e13c:	d01c      	beq.n	2e178 <chk_mounted+0xa4>
		stat = disk_status(fs->drv);
   2e13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e140:	785b      	ldrb	r3, [r3, #1]
   2e142:	2227      	movs	r2, #39	; 0x27
   2e144:	18bc      	adds	r4, r7, r2
   2e146:	0018      	movs	r0, r3
   2e148:	4bbb      	ldr	r3, [pc, #748]	; (2e438 <chk_mounted+0x364>)
   2e14a:	4798      	blx	r3
   2e14c:	0003      	movs	r3, r0
   2e14e:	7023      	strb	r3, [r4, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
   2e150:	2327      	movs	r3, #39	; 0x27
   2e152:	18fb      	adds	r3, r7, r3
   2e154:	781b      	ldrb	r3, [r3, #0]
   2e156:	2201      	movs	r2, #1
   2e158:	4013      	ands	r3, r2
   2e15a:	d10d      	bne.n	2e178 <chk_mounted+0xa4>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
   2e15c:	1dfb      	adds	r3, r7, #7
   2e15e:	781b      	ldrb	r3, [r3, #0]
   2e160:	2b00      	cmp	r3, #0
   2e162:	d007      	beq.n	2e174 <chk_mounted+0xa0>
   2e164:	2327      	movs	r3, #39	; 0x27
   2e166:	18fb      	adds	r3, r7, r3
   2e168:	781b      	ldrb	r3, [r3, #0]
   2e16a:	2204      	movs	r2, #4
   2e16c:	4013      	ands	r3, r2
   2e16e:	d001      	beq.n	2e174 <chk_mounted+0xa0>
				return FR_WRITE_PROTECTED;
   2e170:	230a      	movs	r3, #10
   2e172:	e283      	b.n	2e67c <chk_mounted+0x5a8>
			return FR_OK;				/* The file system object is valid */
   2e174:	2300      	movs	r3, #0
   2e176:	e281      	b.n	2e67c <chk_mounted+0x5a8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
   2e178:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e17a:	2200      	movs	r2, #0
   2e17c:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
   2e17e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2e180:	b2da      	uxtb	r2, r3
   2e182:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e184:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
   2e186:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e188:	785b      	ldrb	r3, [r3, #1]
   2e18a:	2227      	movs	r2, #39	; 0x27
   2e18c:	18bc      	adds	r4, r7, r2
   2e18e:	0018      	movs	r0, r3
   2e190:	4baa      	ldr	r3, [pc, #680]	; (2e43c <chk_mounted+0x368>)
   2e192:	4798      	blx	r3
   2e194:	0003      	movs	r3, r0
   2e196:	7023      	strb	r3, [r4, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
   2e198:	2327      	movs	r3, #39	; 0x27
   2e19a:	18fb      	adds	r3, r7, r3
   2e19c:	781b      	ldrb	r3, [r3, #0]
   2e19e:	2201      	movs	r2, #1
   2e1a0:	4013      	ands	r3, r2
   2e1a2:	d001      	beq.n	2e1a8 <chk_mounted+0xd4>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
   2e1a4:	2303      	movs	r3, #3
   2e1a6:	e269      	b.n	2e67c <chk_mounted+0x5a8>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
   2e1a8:	1dfb      	adds	r3, r7, #7
   2e1aa:	781b      	ldrb	r3, [r3, #0]
   2e1ac:	2b00      	cmp	r3, #0
   2e1ae:	d007      	beq.n	2e1c0 <chk_mounted+0xec>
   2e1b0:	2327      	movs	r3, #39	; 0x27
   2e1b2:	18fb      	adds	r3, r7, r3
   2e1b4:	781b      	ldrb	r3, [r3, #0]
   2e1b6:	2204      	movs	r2, #4
   2e1b8:	4013      	ands	r3, r2
   2e1ba:	d001      	beq.n	2e1c0 <chk_mounted+0xec>
		return FR_WRITE_PROTECTED;
   2e1bc:	230a      	movs	r3, #10
   2e1be:	e25d      	b.n	2e67c <chk_mounted+0x5a8>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
   2e1c0:	2300      	movs	r3, #0
   2e1c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   2e1c4:	2347      	movs	r3, #71	; 0x47
   2e1c6:	18fc      	adds	r4, r7, r3
   2e1c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2e1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e1cc:	0011      	movs	r1, r2
   2e1ce:	0018      	movs	r0, r3
   2e1d0:	4b9b      	ldr	r3, [pc, #620]	; (2e440 <chk_mounted+0x36c>)
   2e1d2:	4798      	blx	r3
   2e1d4:	0003      	movs	r3, r0
   2e1d6:	7023      	strb	r3, [r4, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
   2e1d8:	2347      	movs	r3, #71	; 0x47
   2e1da:	18fb      	adds	r3, r7, r3
   2e1dc:	781b      	ldrb	r3, [r3, #0]
   2e1de:	2b01      	cmp	r3, #1
   2e1e0:	d13b      	bne.n	2e25a <chk_mounted+0x186>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
   2e1e2:	2346      	movs	r3, #70	; 0x46
   2e1e4:	18fb      	adds	r3, r7, r3
   2e1e6:	2200      	movs	r2, #0
   2e1e8:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
   2e1ea:	2346      	movs	r3, #70	; 0x46
   2e1ec:	18fb      	adds	r3, r7, r3
   2e1ee:	781b      	ldrb	r3, [r3, #0]
   2e1f0:	2b00      	cmp	r3, #0
   2e1f2:	d006      	beq.n	2e202 <chk_mounted+0x12e>
   2e1f4:	2346      	movs	r3, #70	; 0x46
   2e1f6:	18fb      	adds	r3, r7, r3
   2e1f8:	781a      	ldrb	r2, [r3, #0]
   2e1fa:	2346      	movs	r3, #70	; 0x46
   2e1fc:	18fb      	adds	r3, r7, r3
   2e1fe:	3a01      	subs	r2, #1
   2e200:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
   2e202:	2346      	movs	r3, #70	; 0x46
   2e204:	18fb      	adds	r3, r7, r3
   2e206:	781b      	ldrb	r3, [r3, #0]
   2e208:	011b      	lsls	r3, r3, #4
   2e20a:	33bf      	adds	r3, #191	; 0xbf
   2e20c:	33ff      	adds	r3, #255	; 0xff
   2e20e:	3330      	adds	r3, #48	; 0x30
   2e210:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e212:	18d3      	adds	r3, r2, r3
   2e214:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
   2e216:	6a3b      	ldr	r3, [r7, #32]
   2e218:	3304      	adds	r3, #4
   2e21a:	781b      	ldrb	r3, [r3, #0]
   2e21c:	2b00      	cmp	r3, #0
   2e21e:	d01c      	beq.n	2e25a <chk_mounted+0x186>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
   2e220:	6a3b      	ldr	r3, [r7, #32]
   2e222:	330b      	adds	r3, #11
   2e224:	781b      	ldrb	r3, [r3, #0]
   2e226:	061a      	lsls	r2, r3, #24
   2e228:	6a3b      	ldr	r3, [r7, #32]
   2e22a:	330a      	adds	r3, #10
   2e22c:	781b      	ldrb	r3, [r3, #0]
   2e22e:	041b      	lsls	r3, r3, #16
   2e230:	4313      	orrs	r3, r2
   2e232:	6a3a      	ldr	r2, [r7, #32]
   2e234:	3209      	adds	r2, #9
   2e236:	7812      	ldrb	r2, [r2, #0]
   2e238:	0212      	lsls	r2, r2, #8
   2e23a:	4313      	orrs	r3, r2
   2e23c:	6a3a      	ldr	r2, [r7, #32]
   2e23e:	3208      	adds	r2, #8
   2e240:	7812      	ldrb	r2, [r2, #0]
   2e242:	4313      	orrs	r3, r2
   2e244:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
   2e246:	2347      	movs	r3, #71	; 0x47
   2e248:	18fc      	adds	r4, r7, r3
   2e24a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2e24c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e24e:	0011      	movs	r1, r2
   2e250:	0018      	movs	r0, r3
   2e252:	4b7b      	ldr	r3, [pc, #492]	; (2e440 <chk_mounted+0x36c>)
   2e254:	4798      	blx	r3
   2e256:	0003      	movs	r3, r0
   2e258:	7023      	strb	r3, [r4, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
   2e25a:	2347      	movs	r3, #71	; 0x47
   2e25c:	18fb      	adds	r3, r7, r3
   2e25e:	781b      	ldrb	r3, [r3, #0]
   2e260:	2b03      	cmp	r3, #3
   2e262:	d101      	bne.n	2e268 <chk_mounted+0x194>
   2e264:	2301      	movs	r3, #1
   2e266:	e209      	b.n	2e67c <chk_mounted+0x5a8>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
   2e268:	2347      	movs	r3, #71	; 0x47
   2e26a:	18fb      	adds	r3, r7, r3
   2e26c:	781b      	ldrb	r3, [r3, #0]
   2e26e:	2b00      	cmp	r3, #0
   2e270:	d001      	beq.n	2e276 <chk_mounted+0x1a2>
   2e272:	230d      	movs	r3, #13
   2e274:	e202      	b.n	2e67c <chk_mounted+0x5a8>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
   2e276:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e278:	223c      	movs	r2, #60	; 0x3c
   2e27a:	5c9b      	ldrb	r3, [r3, r2]
   2e27c:	021b      	lsls	r3, r3, #8
   2e27e:	b21a      	sxth	r2, r3
   2e280:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e282:	213b      	movs	r1, #59	; 0x3b
   2e284:	5c5b      	ldrb	r3, [r3, r1]
   2e286:	b21b      	sxth	r3, r3
   2e288:	4313      	orrs	r3, r2
   2e28a:	b21a      	sxth	r2, r3
   2e28c:	2380      	movs	r3, #128	; 0x80
   2e28e:	009b      	lsls	r3, r3, #2
   2e290:	429a      	cmp	r2, r3
   2e292:	d001      	beq.n	2e298 <chk_mounted+0x1c4>
		return FR_NO_FILESYSTEM;
   2e294:	230d      	movs	r3, #13
   2e296:	e1f1      	b.n	2e67c <chk_mounted+0x5a8>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
   2e298:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e29a:	2247      	movs	r2, #71	; 0x47
   2e29c:	5c9b      	ldrb	r3, [r3, r2]
   2e29e:	021b      	lsls	r3, r3, #8
   2e2a0:	b21a      	sxth	r2, r3
   2e2a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e2a4:	2146      	movs	r1, #70	; 0x46
   2e2a6:	5c5b      	ldrb	r3, [r3, r1]
   2e2a8:	b21b      	sxth	r3, r3
   2e2aa:	4313      	orrs	r3, r2
   2e2ac:	b21b      	sxth	r3, r3
   2e2ae:	b29b      	uxth	r3, r3
   2e2b0:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
   2e2b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2e2b4:	2b00      	cmp	r3, #0
   2e2b6:	d112      	bne.n	2e2de <chk_mounted+0x20a>
   2e2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e2ba:	2257      	movs	r2, #87	; 0x57
   2e2bc:	5c9b      	ldrb	r3, [r3, r2]
   2e2be:	061a      	lsls	r2, r3, #24
   2e2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e2c2:	2156      	movs	r1, #86	; 0x56
   2e2c4:	5c5b      	ldrb	r3, [r3, r1]
   2e2c6:	041b      	lsls	r3, r3, #16
   2e2c8:	4313      	orrs	r3, r2
   2e2ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e2cc:	2155      	movs	r1, #85	; 0x55
   2e2ce:	5c52      	ldrb	r2, [r2, r1]
   2e2d0:	0212      	lsls	r2, r2, #8
   2e2d2:	4313      	orrs	r3, r2
   2e2d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e2d6:	2154      	movs	r1, #84	; 0x54
   2e2d8:	5c52      	ldrb	r2, [r2, r1]
   2e2da:	4313      	orrs	r3, r2
   2e2dc:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
   2e2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e2e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
   2e2e2:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
   2e2e4:	231f      	movs	r3, #31
   2e2e6:	18fb      	adds	r3, r7, r3
   2e2e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e2ea:	2140      	movs	r1, #64	; 0x40
   2e2ec:	5c52      	ldrb	r2, [r2, r1]
   2e2ee:	701a      	strb	r2, [r3, #0]
   2e2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e2f2:	221f      	movs	r2, #31
   2e2f4:	18ba      	adds	r2, r7, r2
   2e2f6:	7812      	ldrb	r2, [r2, #0]
   2e2f8:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
   2e2fa:	231f      	movs	r3, #31
   2e2fc:	18fb      	adds	r3, r7, r3
   2e2fe:	781b      	ldrb	r3, [r3, #0]
   2e300:	2b01      	cmp	r3, #1
   2e302:	d006      	beq.n	2e312 <chk_mounted+0x23e>
   2e304:	231f      	movs	r3, #31
   2e306:	18fb      	adds	r3, r7, r3
   2e308:	781b      	ldrb	r3, [r3, #0]
   2e30a:	2b02      	cmp	r3, #2
   2e30c:	d001      	beq.n	2e312 <chk_mounted+0x23e>
   2e30e:	230d      	movs	r3, #13
   2e310:	e1b4      	b.n	2e67c <chk_mounted+0x5a8>
	fasize *= b;										/* Number of sectors for FAT area */
   2e312:	231f      	movs	r3, #31
   2e314:	18fb      	adds	r3, r7, r3
   2e316:	781a      	ldrb	r2, [r3, #0]
   2e318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2e31a:	4353      	muls	r3, r2
   2e31c:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
   2e31e:	231f      	movs	r3, #31
   2e320:	18fb      	adds	r3, r7, r3
   2e322:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e324:	213d      	movs	r1, #61	; 0x3d
   2e326:	5c52      	ldrb	r2, [r2, r1]
   2e328:	701a      	strb	r2, [r3, #0]
   2e32a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e32c:	221f      	movs	r2, #31
   2e32e:	18ba      	adds	r2, r7, r2
   2e330:	7812      	ldrb	r2, [r2, #0]
   2e332:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
   2e334:	231f      	movs	r3, #31
   2e336:	18fb      	adds	r3, r7, r3
   2e338:	781b      	ldrb	r3, [r3, #0]
   2e33a:	2b00      	cmp	r3, #0
   2e33c:	d008      	beq.n	2e350 <chk_mounted+0x27c>
   2e33e:	231f      	movs	r3, #31
   2e340:	18fb      	adds	r3, r7, r3
   2e342:	781b      	ldrb	r3, [r3, #0]
   2e344:	221f      	movs	r2, #31
   2e346:	18ba      	adds	r2, r7, r2
   2e348:	7812      	ldrb	r2, [r2, #0]
   2e34a:	3a01      	subs	r2, #1
   2e34c:	4013      	ands	r3, r2
   2e34e:	d001      	beq.n	2e354 <chk_mounted+0x280>
   2e350:	230d      	movs	r3, #13
   2e352:	e193      	b.n	2e67c <chk_mounted+0x5a8>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
   2e354:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e356:	2242      	movs	r2, #66	; 0x42
   2e358:	5c9b      	ldrb	r3, [r3, r2]
   2e35a:	021b      	lsls	r3, r3, #8
   2e35c:	b21a      	sxth	r2, r3
   2e35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e360:	2141      	movs	r1, #65	; 0x41
   2e362:	5c5b      	ldrb	r3, [r3, r1]
   2e364:	b21b      	sxth	r3, r3
   2e366:	4313      	orrs	r3, r2
   2e368:	b21b      	sxth	r3, r3
   2e36a:	b29a      	uxth	r2, r3
   2e36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e36e:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
   2e370:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e372:	891b      	ldrh	r3, [r3, #8]
   2e374:	220f      	movs	r2, #15
   2e376:	4013      	ands	r3, r2
   2e378:	b29b      	uxth	r3, r3
   2e37a:	2b00      	cmp	r3, #0
   2e37c:	d001      	beq.n	2e382 <chk_mounted+0x2ae>
   2e37e:	230d      	movs	r3, #13
   2e380:	e17c      	b.n	2e67c <chk_mounted+0x5a8>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
   2e382:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e384:	2244      	movs	r2, #68	; 0x44
   2e386:	5c9b      	ldrb	r3, [r3, r2]
   2e388:	021b      	lsls	r3, r3, #8
   2e38a:	b21a      	sxth	r2, r3
   2e38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e38e:	2143      	movs	r1, #67	; 0x43
   2e390:	5c5b      	ldrb	r3, [r3, r1]
   2e392:	b21b      	sxth	r3, r3
   2e394:	4313      	orrs	r3, r2
   2e396:	b21b      	sxth	r3, r3
   2e398:	b29b      	uxth	r3, r3
   2e39a:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
   2e39c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2e39e:	2b00      	cmp	r3, #0
   2e3a0:	d112      	bne.n	2e3c8 <chk_mounted+0x2f4>
   2e3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e3a4:	2253      	movs	r2, #83	; 0x53
   2e3a6:	5c9b      	ldrb	r3, [r3, r2]
   2e3a8:	061a      	lsls	r2, r3, #24
   2e3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e3ac:	2152      	movs	r1, #82	; 0x52
   2e3ae:	5c5b      	ldrb	r3, [r3, r1]
   2e3b0:	041b      	lsls	r3, r3, #16
   2e3b2:	4313      	orrs	r3, r2
   2e3b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e3b6:	2151      	movs	r1, #81	; 0x51
   2e3b8:	5c52      	ldrb	r2, [r2, r1]
   2e3ba:	0212      	lsls	r2, r2, #8
   2e3bc:	4313      	orrs	r3, r2
   2e3be:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e3c0:	2150      	movs	r1, #80	; 0x50
   2e3c2:	5c52      	ldrb	r2, [r2, r1]
   2e3c4:	4313      	orrs	r3, r2
   2e3c6:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
   2e3c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e3ca:	223f      	movs	r2, #63	; 0x3f
   2e3cc:	5c9b      	ldrb	r3, [r3, r2]
   2e3ce:	021b      	lsls	r3, r3, #8
   2e3d0:	b21a      	sxth	r2, r3
   2e3d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e3d4:	213e      	movs	r1, #62	; 0x3e
   2e3d6:	5c5b      	ldrb	r3, [r3, r1]
   2e3d8:	b21b      	sxth	r3, r3
   2e3da:	4313      	orrs	r3, r2
   2e3dc:	b21a      	sxth	r2, r3
   2e3de:	231c      	movs	r3, #28
   2e3e0:	18fb      	adds	r3, r7, r3
   2e3e2:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
   2e3e4:	231c      	movs	r3, #28
   2e3e6:	18fb      	adds	r3, r7, r3
   2e3e8:	881b      	ldrh	r3, [r3, #0]
   2e3ea:	2b00      	cmp	r3, #0
   2e3ec:	d101      	bne.n	2e3f2 <chk_mounted+0x31e>
   2e3ee:	230d      	movs	r3, #13
   2e3f0:	e144      	b.n	2e67c <chk_mounted+0x5a8>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
   2e3f2:	231c      	movs	r3, #28
   2e3f4:	18fb      	adds	r3, r7, r3
   2e3f6:	881a      	ldrh	r2, [r3, #0]
   2e3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2e3fa:	18d3      	adds	r3, r2, r3
   2e3fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e3fe:	8912      	ldrh	r2, [r2, #8]
   2e400:	0912      	lsrs	r2, r2, #4
   2e402:	b292      	uxth	r2, r2
   2e404:	189b      	adds	r3, r3, r2
   2e406:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
   2e408:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2e40a:	69bb      	ldr	r3, [r7, #24]
   2e40c:	429a      	cmp	r2, r3
   2e40e:	d201      	bcs.n	2e414 <chk_mounted+0x340>
   2e410:	230d      	movs	r3, #13
   2e412:	e133      	b.n	2e67c <chk_mounted+0x5a8>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
   2e414:	6b7a      	ldr	r2, [r7, #52]	; 0x34
   2e416:	69bb      	ldr	r3, [r7, #24]
   2e418:	1ad2      	subs	r2, r2, r3
   2e41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e41c:	789b      	ldrb	r3, [r3, #2]
   2e41e:	0019      	movs	r1, r3
   2e420:	4b08      	ldr	r3, [pc, #32]	; (2e444 <chk_mounted+0x370>)
   2e422:	0010      	movs	r0, r2
   2e424:	4798      	blx	r3
   2e426:	0003      	movs	r3, r0
   2e428:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
   2e42a:	697b      	ldr	r3, [r7, #20]
   2e42c:	2b00      	cmp	r3, #0
   2e42e:	d10b      	bne.n	2e448 <chk_mounted+0x374>
   2e430:	230d      	movs	r3, #13
   2e432:	e123      	b.n	2e67c <chk_mounted+0x5a8>
   2e434:	200042f8 	.word	0x200042f8
   2e438:	0002c231 	.word	0x0002c231
   2e43c:	0002c1ad 	.word	0x0002c1ad
   2e440:	0002e001 	.word	0x0002e001
   2e444:	00033855 	.word	0x00033855
	fmt = FS_FAT12;
   2e448:	2347      	movs	r3, #71	; 0x47
   2e44a:	18fb      	adds	r3, r7, r3
   2e44c:	2201      	movs	r2, #1
   2e44e:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
   2e450:	697b      	ldr	r3, [r7, #20]
   2e452:	4a8c      	ldr	r2, [pc, #560]	; (2e684 <chk_mounted+0x5b0>)
   2e454:	4293      	cmp	r3, r2
   2e456:	d903      	bls.n	2e460 <chk_mounted+0x38c>
   2e458:	2347      	movs	r3, #71	; 0x47
   2e45a:	18fb      	adds	r3, r7, r3
   2e45c:	2202      	movs	r2, #2
   2e45e:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
   2e460:	697b      	ldr	r3, [r7, #20]
   2e462:	4a89      	ldr	r2, [pc, #548]	; (2e688 <chk_mounted+0x5b4>)
   2e464:	4293      	cmp	r3, r2
   2e466:	d903      	bls.n	2e470 <chk_mounted+0x39c>
   2e468:	2347      	movs	r3, #71	; 0x47
   2e46a:	18fb      	adds	r3, r7, r3
   2e46c:	2203      	movs	r2, #3
   2e46e:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
   2e470:	697b      	ldr	r3, [r7, #20]
   2e472:	1c9a      	adds	r2, r3, #2
   2e474:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e476:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
   2e478:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   2e47a:	69bb      	ldr	r3, [r7, #24]
   2e47c:	18d2      	adds	r2, r2, r3
   2e47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e480:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
   2e482:	231c      	movs	r3, #28
   2e484:	18fb      	adds	r3, r7, r3
   2e486:	881a      	ldrh	r2, [r3, #0]
   2e488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2e48a:	18d2      	adds	r2, r2, r3
   2e48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e48e:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
   2e490:	2347      	movs	r3, #71	; 0x47
   2e492:	18fb      	adds	r3, r7, r3
   2e494:	781b      	ldrb	r3, [r3, #0]
   2e496:	2b03      	cmp	r3, #3
   2e498:	d11e      	bne.n	2e4d8 <chk_mounted+0x404>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
   2e49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e49c:	891b      	ldrh	r3, [r3, #8]
   2e49e:	2b00      	cmp	r3, #0
   2e4a0:	d001      	beq.n	2e4a6 <chk_mounted+0x3d2>
   2e4a2:	230d      	movs	r3, #13
   2e4a4:	e0ea      	b.n	2e67c <chk_mounted+0x5a8>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
   2e4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e4a8:	225f      	movs	r2, #95	; 0x5f
   2e4aa:	5c9b      	ldrb	r3, [r3, r2]
   2e4ac:	061a      	lsls	r2, r3, #24
   2e4ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e4b0:	215e      	movs	r1, #94	; 0x5e
   2e4b2:	5c5b      	ldrb	r3, [r3, r1]
   2e4b4:	041b      	lsls	r3, r3, #16
   2e4b6:	4313      	orrs	r3, r2
   2e4b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e4ba:	215d      	movs	r1, #93	; 0x5d
   2e4bc:	5c52      	ldrb	r2, [r2, r1]
   2e4be:	0212      	lsls	r2, r2, #8
   2e4c0:	4313      	orrs	r3, r2
   2e4c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e4c4:	215c      	movs	r1, #92	; 0x5c
   2e4c6:	5c52      	ldrb	r2, [r2, r1]
   2e4c8:	431a      	orrs	r2, r3
   2e4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e4cc:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
   2e4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e4d0:	699b      	ldr	r3, [r3, #24]
   2e4d2:	009b      	lsls	r3, r3, #2
   2e4d4:	633b      	str	r3, [r7, #48]	; 0x30
   2e4d6:	e020      	b.n	2e51a <chk_mounted+0x446>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
   2e4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e4da:	891b      	ldrh	r3, [r3, #8]
   2e4dc:	2b00      	cmp	r3, #0
   2e4de:	d101      	bne.n	2e4e4 <chk_mounted+0x410>
   2e4e0:	230d      	movs	r3, #13
   2e4e2:	e0cb      	b.n	2e67c <chk_mounted+0x5a8>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
   2e4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e4e6:	6a1a      	ldr	r2, [r3, #32]
   2e4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   2e4ea:	18d2      	adds	r2, r2, r3
   2e4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e4ee:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
   2e4f0:	2347      	movs	r3, #71	; 0x47
   2e4f2:	18fb      	adds	r3, r7, r3
   2e4f4:	781b      	ldrb	r3, [r3, #0]
   2e4f6:	2b02      	cmp	r3, #2
   2e4f8:	d103      	bne.n	2e502 <chk_mounted+0x42e>
   2e4fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e4fc:	699b      	ldr	r3, [r3, #24]
   2e4fe:	005b      	lsls	r3, r3, #1
   2e500:	e00a      	b.n	2e518 <chk_mounted+0x444>
   2e502:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e504:	699a      	ldr	r2, [r3, #24]
   2e506:	0013      	movs	r3, r2
   2e508:	005b      	lsls	r3, r3, #1
   2e50a:	189b      	adds	r3, r3, r2
   2e50c:	085a      	lsrs	r2, r3, #1
   2e50e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e510:	699b      	ldr	r3, [r3, #24]
   2e512:	2101      	movs	r1, #1
   2e514:	400b      	ands	r3, r1
   2e516:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
   2e518:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
   2e51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e51c:	69da      	ldr	r2, [r3, #28]
   2e51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2e520:	495a      	ldr	r1, [pc, #360]	; (2e68c <chk_mounted+0x5b8>)
   2e522:	468c      	mov	ip, r1
   2e524:	4463      	add	r3, ip
   2e526:	0a5b      	lsrs	r3, r3, #9
   2e528:	429a      	cmp	r2, r3
   2e52a:	d201      	bcs.n	2e530 <chk_mounted+0x45c>
		return FR_NO_FILESYSTEM;
   2e52c:	230d      	movs	r3, #13
   2e52e:	e0a5      	b.n	2e67c <chk_mounted+0x5a8>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
   2e530:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e532:	2201      	movs	r2, #1
   2e534:	4252      	negs	r2, r2
   2e536:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
   2e538:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e53a:	2200      	movs	r2, #0
   2e53c:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
   2e53e:	2347      	movs	r3, #71	; 0x47
   2e540:	18fb      	adds	r3, r7, r3
   2e542:	781b      	ldrb	r3, [r3, #0]
   2e544:	2b03      	cmp	r3, #3
   2e546:	d000      	beq.n	2e54a <chk_mounted+0x476>
   2e548:	e082      	b.n	2e650 <chk_mounted+0x57c>
	 	fs->fsi_flag = 0;
   2e54a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e54c:	2200      	movs	r2, #0
   2e54e:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
   2e550:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e552:	2261      	movs	r2, #97	; 0x61
   2e554:	5c9b      	ldrb	r3, [r3, r2]
   2e556:	021b      	lsls	r3, r3, #8
   2e558:	b21a      	sxth	r2, r3
   2e55a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e55c:	2160      	movs	r1, #96	; 0x60
   2e55e:	5c5b      	ldrb	r3, [r3, r1]
   2e560:	b21b      	sxth	r3, r3
   2e562:	4313      	orrs	r3, r2
   2e564:	b21b      	sxth	r3, r3
   2e566:	b29b      	uxth	r3, r3
   2e568:	001a      	movs	r2, r3
   2e56a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2e56c:	18d2      	adds	r2, r2, r3
   2e56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e570:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2e572:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e574:	7858      	ldrb	r0, [r3, #1]
   2e576:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e578:	3330      	adds	r3, #48	; 0x30
   2e57a:	0019      	movs	r1, r3
   2e57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e57e:	695a      	ldr	r2, [r3, #20]
   2e580:	2301      	movs	r3, #1
   2e582:	4c43      	ldr	r4, [pc, #268]	; (2e690 <chk_mounted+0x5bc>)
   2e584:	47a0      	blx	r4
   2e586:	1e03      	subs	r3, r0, #0
   2e588:	d162      	bne.n	2e650 <chk_mounted+0x57c>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2e58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e58c:	4a41      	ldr	r2, [pc, #260]	; (2e694 <chk_mounted+0x5c0>)
   2e58e:	5c9b      	ldrb	r3, [r3, r2]
   2e590:	021b      	lsls	r3, r3, #8
   2e592:	b21a      	sxth	r2, r3
   2e594:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e596:	4940      	ldr	r1, [pc, #256]	; (2e698 <chk_mounted+0x5c4>)
   2e598:	5c5b      	ldrb	r3, [r3, r1]
   2e59a:	b21b      	sxth	r3, r3
   2e59c:	4313      	orrs	r3, r2
   2e59e:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
   2e5a0:	4a3e      	ldr	r2, [pc, #248]	; (2e69c <chk_mounted+0x5c8>)
   2e5a2:	4293      	cmp	r3, r2
   2e5a4:	d154      	bne.n	2e650 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2e5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e5a8:	2233      	movs	r2, #51	; 0x33
   2e5aa:	5c9b      	ldrb	r3, [r3, r2]
   2e5ac:	061a      	lsls	r2, r3, #24
   2e5ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e5b0:	2132      	movs	r1, #50	; 0x32
   2e5b2:	5c5b      	ldrb	r3, [r3, r1]
   2e5b4:	041b      	lsls	r3, r3, #16
   2e5b6:	4313      	orrs	r3, r2
   2e5b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e5ba:	2131      	movs	r1, #49	; 0x31
   2e5bc:	5c52      	ldrb	r2, [r2, r1]
   2e5be:	0212      	lsls	r2, r2, #8
   2e5c0:	4313      	orrs	r3, r2
   2e5c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e5c4:	2130      	movs	r1, #48	; 0x30
   2e5c6:	5c52      	ldrb	r2, [r2, r1]
   2e5c8:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
   2e5ca:	4a35      	ldr	r2, [pc, #212]	; (2e6a0 <chk_mounted+0x5cc>)
   2e5cc:	4293      	cmp	r3, r2
   2e5ce:	d13f      	bne.n	2e650 <chk_mounted+0x57c>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
   2e5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e5d2:	4a34      	ldr	r2, [pc, #208]	; (2e6a4 <chk_mounted+0x5d0>)
   2e5d4:	5c9b      	ldrb	r3, [r3, r2]
   2e5d6:	061a      	lsls	r2, r3, #24
   2e5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e5da:	4933      	ldr	r1, [pc, #204]	; (2e6a8 <chk_mounted+0x5d4>)
   2e5dc:	5c5b      	ldrb	r3, [r3, r1]
   2e5de:	041b      	lsls	r3, r3, #16
   2e5e0:	4313      	orrs	r3, r2
   2e5e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e5e4:	4931      	ldr	r1, [pc, #196]	; (2e6ac <chk_mounted+0x5d8>)
   2e5e6:	5c52      	ldrb	r2, [r2, r1]
   2e5e8:	0212      	lsls	r2, r2, #8
   2e5ea:	4313      	orrs	r3, r2
   2e5ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2e5ee:	2285      	movs	r2, #133	; 0x85
   2e5f0:	0092      	lsls	r2, r2, #2
   2e5f2:	5c8a      	ldrb	r2, [r1, r2]
   2e5f4:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
   2e5f6:	4a2e      	ldr	r2, [pc, #184]	; (2e6b0 <chk_mounted+0x5dc>)
   2e5f8:	4293      	cmp	r3, r2
   2e5fa:	d129      	bne.n	2e650 <chk_mounted+0x57c>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
   2e5fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e5fe:	4a2d      	ldr	r2, [pc, #180]	; (2e6b4 <chk_mounted+0x5e0>)
   2e600:	5c9b      	ldrb	r3, [r3, r2]
   2e602:	061a      	lsls	r2, r3, #24
   2e604:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e606:	492c      	ldr	r1, [pc, #176]	; (2e6b8 <chk_mounted+0x5e4>)
   2e608:	5c5b      	ldrb	r3, [r3, r1]
   2e60a:	041b      	lsls	r3, r3, #16
   2e60c:	4313      	orrs	r3, r2
   2e60e:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e610:	492a      	ldr	r1, [pc, #168]	; (2e6bc <chk_mounted+0x5e8>)
   2e612:	5c52      	ldrb	r2, [r2, r1]
   2e614:	0212      	lsls	r2, r2, #8
   2e616:	4313      	orrs	r3, r2
   2e618:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2e61a:	2287      	movs	r2, #135	; 0x87
   2e61c:	0092      	lsls	r2, r2, #2
   2e61e:	5c8a      	ldrb	r2, [r1, r2]
   2e620:	431a      	orrs	r2, r3
   2e622:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e624:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
   2e626:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e628:	4a25      	ldr	r2, [pc, #148]	; (2e6c0 <chk_mounted+0x5ec>)
   2e62a:	5c9b      	ldrb	r3, [r3, r2]
   2e62c:	061a      	lsls	r2, r3, #24
   2e62e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e630:	4924      	ldr	r1, [pc, #144]	; (2e6c4 <chk_mounted+0x5f0>)
   2e632:	5c5b      	ldrb	r3, [r3, r1]
   2e634:	041b      	lsls	r3, r3, #16
   2e636:	4313      	orrs	r3, r2
   2e638:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2e63a:	4923      	ldr	r1, [pc, #140]	; (2e6c8 <chk_mounted+0x5f4>)
   2e63c:	5c52      	ldrb	r2, [r2, r1]
   2e63e:	0212      	lsls	r2, r2, #8
   2e640:	4313      	orrs	r3, r2
   2e642:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   2e644:	2286      	movs	r2, #134	; 0x86
   2e646:	0092      	lsls	r2, r2, #2
   2e648:	5c8a      	ldrb	r2, [r1, r2]
   2e64a:	431a      	orrs	r2, r3
   2e64c:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e64e:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
   2e650:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e652:	2247      	movs	r2, #71	; 0x47
   2e654:	18ba      	adds	r2, r7, r2
   2e656:	7812      	ldrb	r2, [r2, #0]
   2e658:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
   2e65a:	4b1c      	ldr	r3, [pc, #112]	; (2e6cc <chk_mounted+0x5f8>)
   2e65c:	881b      	ldrh	r3, [r3, #0]
   2e65e:	3301      	adds	r3, #1
   2e660:	b29a      	uxth	r2, r3
   2e662:	4b1a      	ldr	r3, [pc, #104]	; (2e6cc <chk_mounted+0x5f8>)
   2e664:	801a      	strh	r2, [r3, #0]
   2e666:	4b19      	ldr	r3, [pc, #100]	; (2e6cc <chk_mounted+0x5f8>)
   2e668:	881a      	ldrh	r2, [r3, #0]
   2e66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e66c:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
   2e66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e670:	2200      	movs	r2, #0
   2e672:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
   2e674:	6abb      	ldr	r3, [r7, #40]	; 0x28
   2e676:	2200      	movs	r2, #0
   2e678:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
   2e67a:	2300      	movs	r3, #0
}
   2e67c:	0018      	movs	r0, r3
   2e67e:	46bd      	mov	sp, r7
   2e680:	b013      	add	sp, #76	; 0x4c
   2e682:	bd90      	pop	{r4, r7, pc}
   2e684:	00000ff5 	.word	0x00000ff5
   2e688:	0000fff5 	.word	0x0000fff5
   2e68c:	000001ff 	.word	0x000001ff
   2e690:	0002c269 	.word	0x0002c269
   2e694:	0000022f 	.word	0x0000022f
   2e698:	0000022e 	.word	0x0000022e
   2e69c:	ffffaa55 	.word	0xffffaa55
   2e6a0:	41615252 	.word	0x41615252
   2e6a4:	00000217 	.word	0x00000217
   2e6a8:	00000216 	.word	0x00000216
   2e6ac:	00000215 	.word	0x00000215
   2e6b0:	61417272 	.word	0x61417272
   2e6b4:	0000021f 	.word	0x0000021f
   2e6b8:	0000021e 	.word	0x0000021e
   2e6bc:	0000021d 	.word	0x0000021d
   2e6c0:	0000021b 	.word	0x0000021b
   2e6c4:	0000021a 	.word	0x0000021a
   2e6c8:	00000219 	.word	0x00000219
   2e6cc:	20004318 	.word	0x20004318

0002e6d0 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
   2e6d0:	b580      	push	{r7, lr}
   2e6d2:	b082      	sub	sp, #8
   2e6d4:	af00      	add	r7, sp, #0
   2e6d6:	6078      	str	r0, [r7, #4]
   2e6d8:	000a      	movs	r2, r1
   2e6da:	1cbb      	adds	r3, r7, #2
   2e6dc:	801a      	strh	r2, [r3, #0]
	if (!fs || !fs->fs_type || fs->id != id)
   2e6de:	687b      	ldr	r3, [r7, #4]
   2e6e0:	2b00      	cmp	r3, #0
   2e6e2:	d009      	beq.n	2e6f8 <validate+0x28>
   2e6e4:	687b      	ldr	r3, [r7, #4]
   2e6e6:	781b      	ldrb	r3, [r3, #0]
   2e6e8:	2b00      	cmp	r3, #0
   2e6ea:	d005      	beq.n	2e6f8 <validate+0x28>
   2e6ec:	687b      	ldr	r3, [r7, #4]
   2e6ee:	88db      	ldrh	r3, [r3, #6]
   2e6f0:	1cba      	adds	r2, r7, #2
   2e6f2:	8812      	ldrh	r2, [r2, #0]
   2e6f4:	429a      	cmp	r2, r3
   2e6f6:	d001      	beq.n	2e6fc <validate+0x2c>
		return FR_INVALID_OBJECT;
   2e6f8:	2309      	movs	r3, #9
   2e6fa:	e00c      	b.n	2e716 <validate+0x46>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
   2e6fc:	687b      	ldr	r3, [r7, #4]
   2e6fe:	785b      	ldrb	r3, [r3, #1]
   2e700:	0018      	movs	r0, r3
   2e702:	4b07      	ldr	r3, [pc, #28]	; (2e720 <validate+0x50>)
   2e704:	4798      	blx	r3
   2e706:	0003      	movs	r3, r0
   2e708:	001a      	movs	r2, r3
   2e70a:	2301      	movs	r3, #1
   2e70c:	4013      	ands	r3, r2
   2e70e:	d001      	beq.n	2e714 <validate+0x44>
		return FR_NOT_READY;
   2e710:	2303      	movs	r3, #3
   2e712:	e000      	b.n	2e716 <validate+0x46>

	return FR_OK;
   2e714:	2300      	movs	r3, #0
}
   2e716:	0018      	movs	r0, r3
   2e718:	46bd      	mov	sp, r7
   2e71a:	b002      	add	sp, #8
   2e71c:	bd80      	pop	{r7, pc}
   2e71e:	46c0      	nop			; (mov r8, r8)
   2e720:	0002c231 	.word	0x0002c231

0002e724 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
   2e724:	b580      	push	{r7, lr}
   2e726:	b084      	sub	sp, #16
   2e728:	af00      	add	r7, sp, #0
   2e72a:	0002      	movs	r2, r0
   2e72c:	6039      	str	r1, [r7, #0]
   2e72e:	1dfb      	adds	r3, r7, #7
   2e730:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
   2e732:	1dfb      	adds	r3, r7, #7
   2e734:	781b      	ldrb	r3, [r3, #0]
   2e736:	2b07      	cmp	r3, #7
   2e738:	d901      	bls.n	2e73e <f_mount+0x1a>
		return FR_INVALID_DRIVE;
   2e73a:	230b      	movs	r3, #11
   2e73c:	e018      	b.n	2e770 <f_mount+0x4c>
	rfs = FatFs[vol];			/* Get current fs object */
   2e73e:	1dfb      	adds	r3, r7, #7
   2e740:	781a      	ldrb	r2, [r3, #0]
   2e742:	4b0d      	ldr	r3, [pc, #52]	; (2e778 <f_mount+0x54>)
   2e744:	0092      	lsls	r2, r2, #2
   2e746:	58d3      	ldr	r3, [r2, r3]
   2e748:	60fb      	str	r3, [r7, #12]

	if (rfs) {
   2e74a:	68fb      	ldr	r3, [r7, #12]
   2e74c:	2b00      	cmp	r3, #0
   2e74e:	d002      	beq.n	2e756 <f_mount+0x32>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
   2e750:	68fb      	ldr	r3, [r7, #12]
   2e752:	2200      	movs	r2, #0
   2e754:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
   2e756:	683b      	ldr	r3, [r7, #0]
   2e758:	2b00      	cmp	r3, #0
   2e75a:	d002      	beq.n	2e762 <f_mount+0x3e>
		fs->fs_type = 0;		/* Clear new fs object */
   2e75c:	683b      	ldr	r3, [r7, #0]
   2e75e:	2200      	movs	r2, #0
   2e760:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
   2e762:	1dfb      	adds	r3, r7, #7
   2e764:	781a      	ldrb	r2, [r3, #0]
   2e766:	4b04      	ldr	r3, [pc, #16]	; (2e778 <f_mount+0x54>)
   2e768:	0092      	lsls	r2, r2, #2
   2e76a:	6839      	ldr	r1, [r7, #0]
   2e76c:	50d1      	str	r1, [r2, r3]

	return FR_OK;
   2e76e:	2300      	movs	r3, #0
}
   2e770:	0018      	movs	r0, r3
   2e772:	46bd      	mov	sp, r7
   2e774:	b004      	add	sp, #16
   2e776:	bd80      	pop	{r7, pc}
   2e778:	200042f8 	.word	0x200042f8

0002e77c <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
   2e77c:	b590      	push	{r4, r7, lr}
   2e77e:	4ce5      	ldr	r4, [pc, #916]	; (2eb14 <f_open+0x398>)
   2e780:	44a5      	add	sp, r4
   2e782:	af00      	add	r7, sp, #0
   2e784:	60f8      	str	r0, [r7, #12]
   2e786:	60b9      	str	r1, [r7, #8]
   2e788:	4be3      	ldr	r3, [pc, #908]	; (2eb18 <f_open+0x39c>)
   2e78a:	2194      	movs	r1, #148	; 0x94
   2e78c:	0089      	lsls	r1, r1, #2
   2e78e:	468c      	mov	ip, r1
   2e790:	44bc      	add	ip, r7
   2e792:	4463      	add	r3, ip
   2e794:	701a      	strb	r2, [r3, #0]
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
   2e796:	68fb      	ldr	r3, [r7, #12]
   2e798:	2200      	movs	r2, #0
   2e79a:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
   2e79c:	4bde      	ldr	r3, [pc, #888]	; (2eb18 <f_open+0x39c>)
   2e79e:	2294      	movs	r2, #148	; 0x94
   2e7a0:	0092      	lsls	r2, r2, #2
   2e7a2:	4694      	mov	ip, r2
   2e7a4:	44bc      	add	ip, r7
   2e7a6:	4463      	add	r3, ip
   2e7a8:	4adb      	ldr	r2, [pc, #876]	; (2eb18 <f_open+0x39c>)
   2e7aa:	2194      	movs	r1, #148	; 0x94
   2e7ac:	0089      	lsls	r1, r1, #2
   2e7ae:	468c      	mov	ip, r1
   2e7b0:	44bc      	add	ip, r7
   2e7b2:	4462      	add	r2, ip
   2e7b4:	7812      	ldrb	r2, [r2, #0]
   2e7b6:	211f      	movs	r1, #31
   2e7b8:	400a      	ands	r2, r1
   2e7ba:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
   2e7bc:	4bd6      	ldr	r3, [pc, #856]	; (2eb18 <f_open+0x39c>)
   2e7be:	2294      	movs	r2, #148	; 0x94
   2e7c0:	0092      	lsls	r2, r2, #2
   2e7c2:	4694      	mov	ip, r2
   2e7c4:	44bc      	add	ip, r7
   2e7c6:	4463      	add	r3, ip
   2e7c8:	781b      	ldrb	r3, [r3, #0]
   2e7ca:	2201      	movs	r2, #1
   2e7cc:	4393      	bics	r3, r2
   2e7ce:	b2da      	uxtb	r2, r3
   2e7d0:	4bd2      	ldr	r3, [pc, #840]	; (2eb1c <f_open+0x3a0>)
   2e7d2:	18fc      	adds	r4, r7, r3
   2e7d4:	2387      	movs	r3, #135	; 0x87
   2e7d6:	009b      	lsls	r3, r3, #2
   2e7d8:	18f9      	adds	r1, r7, r3
   2e7da:	2308      	movs	r3, #8
   2e7dc:	18fb      	adds	r3, r7, r3
   2e7de:	0018      	movs	r0, r3
   2e7e0:	4bcf      	ldr	r3, [pc, #828]	; (2eb20 <f_open+0x3a4>)
   2e7e2:	4798      	blx	r3
   2e7e4:	0003      	movs	r3, r0
   2e7e6:	7023      	strb	r3, [r4, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
   2e7e8:	2387      	movs	r3, #135	; 0x87
   2e7ea:	009b      	lsls	r3, r3, #2
   2e7ec:	18fb      	adds	r3, r7, r3
   2e7ee:	2284      	movs	r2, #132	; 0x84
   2e7f0:	0092      	lsls	r2, r2, #2
   2e7f2:	18ba      	adds	r2, r7, r2
   2e7f4:	619a      	str	r2, [r3, #24]
   2e7f6:	2387      	movs	r3, #135	; 0x87
   2e7f8:	009b      	lsls	r3, r3, #2
   2e7fa:	18fb      	adds	r3, r7, r3
   2e7fc:	2210      	movs	r2, #16
   2e7fe:	18ba      	adds	r2, r7, r2
   2e800:	61da      	str	r2, [r3, #28]
	if (res == FR_OK)
   2e802:	4bc6      	ldr	r3, [pc, #792]	; (2eb1c <f_open+0x3a0>)
   2e804:	18fb      	adds	r3, r7, r3
   2e806:	781b      	ldrb	r3, [r3, #0]
   2e808:	2b00      	cmp	r3, #0
   2e80a:	d10b      	bne.n	2e824 <f_open+0xa8>
		res = follow_path(&dj, path);	/* Follow the file path */
   2e80c:	68ba      	ldr	r2, [r7, #8]
   2e80e:	4bc3      	ldr	r3, [pc, #780]	; (2eb1c <f_open+0x3a0>)
   2e810:	18fc      	adds	r4, r7, r3
   2e812:	2387      	movs	r3, #135	; 0x87
   2e814:	009b      	lsls	r3, r3, #2
   2e816:	18fb      	adds	r3, r7, r3
   2e818:	0011      	movs	r1, r2
   2e81a:	0018      	movs	r0, r3
   2e81c:	4bc1      	ldr	r3, [pc, #772]	; (2eb24 <f_open+0x3a8>)
   2e81e:	4798      	blx	r3
   2e820:	0003      	movs	r3, r0
   2e822:	7023      	strb	r3, [r4, #0]
	dir = dj.dir;
   2e824:	2387      	movs	r3, #135	; 0x87
   2e826:	009b      	lsls	r3, r3, #2
   2e828:	18fb      	adds	r3, r7, r3
   2e82a:	695b      	ldr	r3, [r3, #20]
   2e82c:	2292      	movs	r2, #146	; 0x92
   2e82e:	0092      	lsls	r2, r2, #2
   2e830:	18ba      	adds	r2, r7, r2
   2e832:	6013      	str	r3, [r2, #0]

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
   2e834:	4bb9      	ldr	r3, [pc, #740]	; (2eb1c <f_open+0x3a0>)
   2e836:	18fb      	adds	r3, r7, r3
   2e838:	781b      	ldrb	r3, [r3, #0]
   2e83a:	2b00      	cmp	r3, #0
   2e83c:	d109      	bne.n	2e852 <f_open+0xd6>
		if (!dir)	/* Current dir itself */
   2e83e:	2392      	movs	r3, #146	; 0x92
   2e840:	009b      	lsls	r3, r3, #2
   2e842:	18fb      	adds	r3, r7, r3
   2e844:	681b      	ldr	r3, [r3, #0]
   2e846:	2b00      	cmp	r3, #0
   2e848:	d103      	bne.n	2e852 <f_open+0xd6>
			res = FR_INVALID_NAME;
   2e84a:	4bb4      	ldr	r3, [pc, #720]	; (2eb1c <f_open+0x3a0>)
   2e84c:	18fb      	adds	r3, r7, r3
   2e84e:	2206      	movs	r2, #6
   2e850:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
   2e852:	4bb1      	ldr	r3, [pc, #708]	; (2eb18 <f_open+0x39c>)
   2e854:	2294      	movs	r2, #148	; 0x94
   2e856:	0092      	lsls	r2, r2, #2
   2e858:	4694      	mov	ip, r2
   2e85a:	44bc      	add	ip, r7
   2e85c:	4463      	add	r3, ip
   2e85e:	781b      	ldrb	r3, [r3, #0]
   2e860:	221c      	movs	r2, #28
   2e862:	4013      	ands	r3, r2
   2e864:	d100      	bne.n	2e868 <f_open+0xec>
   2e866:	e141      	b.n	2eaec <f_open+0x370>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
   2e868:	4bac      	ldr	r3, [pc, #688]	; (2eb1c <f_open+0x3a0>)
   2e86a:	18fb      	adds	r3, r7, r3
   2e86c:	781b      	ldrb	r3, [r3, #0]
   2e86e:	2b00      	cmp	r3, #0
   2e870:	d027      	beq.n	2e8c2 <f_open+0x146>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
   2e872:	4baa      	ldr	r3, [pc, #680]	; (2eb1c <f_open+0x3a0>)
   2e874:	18fb      	adds	r3, r7, r3
   2e876:	781b      	ldrb	r3, [r3, #0]
   2e878:	2b04      	cmp	r3, #4
   2e87a:	d109      	bne.n	2e890 <f_open+0x114>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
   2e87c:	4ba7      	ldr	r3, [pc, #668]	; (2eb1c <f_open+0x3a0>)
   2e87e:	18fc      	adds	r4, r7, r3
   2e880:	2387      	movs	r3, #135	; 0x87
   2e882:	009b      	lsls	r3, r3, #2
   2e884:	18fb      	adds	r3, r7, r3
   2e886:	0018      	movs	r0, r3
   2e888:	4ba7      	ldr	r3, [pc, #668]	; (2eb28 <f_open+0x3ac>)
   2e88a:	4798      	blx	r3
   2e88c:	0003      	movs	r3, r0
   2e88e:	7023      	strb	r3, [r4, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
   2e890:	4ba1      	ldr	r3, [pc, #644]	; (2eb18 <f_open+0x39c>)
   2e892:	2294      	movs	r2, #148	; 0x94
   2e894:	0092      	lsls	r2, r2, #2
   2e896:	4694      	mov	ip, r2
   2e898:	44bc      	add	ip, r7
   2e89a:	4463      	add	r3, ip
   2e89c:	4a9e      	ldr	r2, [pc, #632]	; (2eb18 <f_open+0x39c>)
   2e89e:	2194      	movs	r1, #148	; 0x94
   2e8a0:	0089      	lsls	r1, r1, #2
   2e8a2:	468c      	mov	ip, r1
   2e8a4:	44bc      	add	ip, r7
   2e8a6:	4462      	add	r2, ip
   2e8a8:	7812      	ldrb	r2, [r2, #0]
   2e8aa:	2108      	movs	r1, #8
   2e8ac:	430a      	orrs	r2, r1
   2e8ae:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
   2e8b0:	2387      	movs	r3, #135	; 0x87
   2e8b2:	009b      	lsls	r3, r3, #2
   2e8b4:	18fb      	adds	r3, r7, r3
   2e8b6:	695b      	ldr	r3, [r3, #20]
   2e8b8:	2292      	movs	r2, #146	; 0x92
   2e8ba:	0092      	lsls	r2, r2, #2
   2e8bc:	18ba      	adds	r2, r7, r2
   2e8be:	6013      	str	r3, [r2, #0]
   2e8c0:	e01c      	b.n	2e8fc <f_open+0x180>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
   2e8c2:	2392      	movs	r3, #146	; 0x92
   2e8c4:	009b      	lsls	r3, r3, #2
   2e8c6:	18fb      	adds	r3, r7, r3
   2e8c8:	681b      	ldr	r3, [r3, #0]
   2e8ca:	330b      	adds	r3, #11
   2e8cc:	781b      	ldrb	r3, [r3, #0]
   2e8ce:	001a      	movs	r2, r3
   2e8d0:	2311      	movs	r3, #17
   2e8d2:	4013      	ands	r3, r2
   2e8d4:	d004      	beq.n	2e8e0 <f_open+0x164>
				res = FR_DENIED;
   2e8d6:	4b91      	ldr	r3, [pc, #580]	; (2eb1c <f_open+0x3a0>)
   2e8d8:	18fb      	adds	r3, r7, r3
   2e8da:	2207      	movs	r2, #7
   2e8dc:	701a      	strb	r2, [r3, #0]
   2e8de:	e00d      	b.n	2e8fc <f_open+0x180>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
   2e8e0:	4b8d      	ldr	r3, [pc, #564]	; (2eb18 <f_open+0x39c>)
   2e8e2:	2294      	movs	r2, #148	; 0x94
   2e8e4:	0092      	lsls	r2, r2, #2
   2e8e6:	4694      	mov	ip, r2
   2e8e8:	44bc      	add	ip, r7
   2e8ea:	4463      	add	r3, ip
   2e8ec:	781b      	ldrb	r3, [r3, #0]
   2e8ee:	2204      	movs	r2, #4
   2e8f0:	4013      	ands	r3, r2
   2e8f2:	d003      	beq.n	2e8fc <f_open+0x180>
					res = FR_EXIST;
   2e8f4:	4b89      	ldr	r3, [pc, #548]	; (2eb1c <f_open+0x3a0>)
   2e8f6:	18fb      	adds	r3, r7, r3
   2e8f8:	2208      	movs	r2, #8
   2e8fa:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
   2e8fc:	4b87      	ldr	r3, [pc, #540]	; (2eb1c <f_open+0x3a0>)
   2e8fe:	18fb      	adds	r3, r7, r3
   2e900:	781b      	ldrb	r3, [r3, #0]
   2e902:	2b00      	cmp	r3, #0
   2e904:	d000      	beq.n	2e908 <f_open+0x18c>
   2e906:	e12f      	b.n	2eb68 <f_open+0x3ec>
   2e908:	4b83      	ldr	r3, [pc, #524]	; (2eb18 <f_open+0x39c>)
   2e90a:	2294      	movs	r2, #148	; 0x94
   2e90c:	0092      	lsls	r2, r2, #2
   2e90e:	4694      	mov	ip, r2
   2e910:	44bc      	add	ip, r7
   2e912:	4463      	add	r3, ip
   2e914:	781b      	ldrb	r3, [r3, #0]
   2e916:	2208      	movs	r2, #8
   2e918:	4013      	ands	r3, r2
   2e91a:	d100      	bne.n	2e91e <f_open+0x1a2>
   2e91c:	e124      	b.n	2eb68 <f_open+0x3ec>
			dw = get_fattime();					/* Created time */
   2e91e:	4b83      	ldr	r3, [pc, #524]	; (2eb2c <f_open+0x3b0>)
   2e920:	4798      	blx	r3
   2e922:	0003      	movs	r3, r0
   2e924:	2291      	movs	r2, #145	; 0x91
   2e926:	0092      	lsls	r2, r2, #2
   2e928:	18ba      	adds	r2, r7, r2
   2e92a:	6013      	str	r3, [r2, #0]
			ST_DWORD(dir+DIR_CrtTime, dw);
   2e92c:	2392      	movs	r3, #146	; 0x92
   2e92e:	009b      	lsls	r3, r3, #2
   2e930:	18fb      	adds	r3, r7, r3
   2e932:	681b      	ldr	r3, [r3, #0]
   2e934:	330e      	adds	r3, #14
   2e936:	2291      	movs	r2, #145	; 0x91
   2e938:	0092      	lsls	r2, r2, #2
   2e93a:	18ba      	adds	r2, r7, r2
   2e93c:	6812      	ldr	r2, [r2, #0]
   2e93e:	b2d2      	uxtb	r2, r2
   2e940:	701a      	strb	r2, [r3, #0]
   2e942:	2392      	movs	r3, #146	; 0x92
   2e944:	009b      	lsls	r3, r3, #2
   2e946:	18fb      	adds	r3, r7, r3
   2e948:	681b      	ldr	r3, [r3, #0]
   2e94a:	330f      	adds	r3, #15
   2e94c:	2291      	movs	r2, #145	; 0x91
   2e94e:	0092      	lsls	r2, r2, #2
   2e950:	18ba      	adds	r2, r7, r2
   2e952:	6812      	ldr	r2, [r2, #0]
   2e954:	b292      	uxth	r2, r2
   2e956:	0a12      	lsrs	r2, r2, #8
   2e958:	b292      	uxth	r2, r2
   2e95a:	b2d2      	uxtb	r2, r2
   2e95c:	701a      	strb	r2, [r3, #0]
   2e95e:	2392      	movs	r3, #146	; 0x92
   2e960:	009b      	lsls	r3, r3, #2
   2e962:	18fb      	adds	r3, r7, r3
   2e964:	681b      	ldr	r3, [r3, #0]
   2e966:	3310      	adds	r3, #16
   2e968:	2291      	movs	r2, #145	; 0x91
   2e96a:	0092      	lsls	r2, r2, #2
   2e96c:	18ba      	adds	r2, r7, r2
   2e96e:	6812      	ldr	r2, [r2, #0]
   2e970:	0c12      	lsrs	r2, r2, #16
   2e972:	b2d2      	uxtb	r2, r2
   2e974:	701a      	strb	r2, [r3, #0]
   2e976:	2392      	movs	r3, #146	; 0x92
   2e978:	009b      	lsls	r3, r3, #2
   2e97a:	18fb      	adds	r3, r7, r3
   2e97c:	681b      	ldr	r3, [r3, #0]
   2e97e:	3311      	adds	r3, #17
   2e980:	2291      	movs	r2, #145	; 0x91
   2e982:	0092      	lsls	r2, r2, #2
   2e984:	18ba      	adds	r2, r7, r2
   2e986:	6812      	ldr	r2, [r2, #0]
   2e988:	0e12      	lsrs	r2, r2, #24
   2e98a:	b2d2      	uxtb	r2, r2
   2e98c:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
   2e98e:	2392      	movs	r3, #146	; 0x92
   2e990:	009b      	lsls	r3, r3, #2
   2e992:	18fb      	adds	r3, r7, r3
   2e994:	681b      	ldr	r3, [r3, #0]
   2e996:	330b      	adds	r3, #11
   2e998:	2200      	movs	r2, #0
   2e99a:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
   2e99c:	2392      	movs	r3, #146	; 0x92
   2e99e:	009b      	lsls	r3, r3, #2
   2e9a0:	18fb      	adds	r3, r7, r3
   2e9a2:	681b      	ldr	r3, [r3, #0]
   2e9a4:	331c      	adds	r3, #28
   2e9a6:	2200      	movs	r2, #0
   2e9a8:	701a      	strb	r2, [r3, #0]
   2e9aa:	2392      	movs	r3, #146	; 0x92
   2e9ac:	009b      	lsls	r3, r3, #2
   2e9ae:	18fb      	adds	r3, r7, r3
   2e9b0:	681b      	ldr	r3, [r3, #0]
   2e9b2:	331d      	adds	r3, #29
   2e9b4:	2200      	movs	r2, #0
   2e9b6:	701a      	strb	r2, [r3, #0]
   2e9b8:	2392      	movs	r3, #146	; 0x92
   2e9ba:	009b      	lsls	r3, r3, #2
   2e9bc:	18fb      	adds	r3, r7, r3
   2e9be:	681b      	ldr	r3, [r3, #0]
   2e9c0:	331e      	adds	r3, #30
   2e9c2:	2200      	movs	r2, #0
   2e9c4:	701a      	strb	r2, [r3, #0]
   2e9c6:	2392      	movs	r3, #146	; 0x92
   2e9c8:	009b      	lsls	r3, r3, #2
   2e9ca:	18fb      	adds	r3, r7, r3
   2e9cc:	681b      	ldr	r3, [r3, #0]
   2e9ce:	331f      	adds	r3, #31
   2e9d0:	2200      	movs	r2, #0
   2e9d2:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
   2e9d4:	2392      	movs	r3, #146	; 0x92
   2e9d6:	009b      	lsls	r3, r3, #2
   2e9d8:	18fb      	adds	r3, r7, r3
   2e9da:	681b      	ldr	r3, [r3, #0]
   2e9dc:	3315      	adds	r3, #21
   2e9de:	781b      	ldrb	r3, [r3, #0]
   2e9e0:	021b      	lsls	r3, r3, #8
   2e9e2:	b21a      	sxth	r2, r3
   2e9e4:	2392      	movs	r3, #146	; 0x92
   2e9e6:	009b      	lsls	r3, r3, #2
   2e9e8:	18fb      	adds	r3, r7, r3
   2e9ea:	681b      	ldr	r3, [r3, #0]
   2e9ec:	3314      	adds	r3, #20
   2e9ee:	781b      	ldrb	r3, [r3, #0]
   2e9f0:	b21b      	sxth	r3, r3
   2e9f2:	4313      	orrs	r3, r2
   2e9f4:	b21b      	sxth	r3, r3
   2e9f6:	b29b      	uxth	r3, r3
   2e9f8:	041b      	lsls	r3, r3, #16
   2e9fa:	2292      	movs	r2, #146	; 0x92
   2e9fc:	0092      	lsls	r2, r2, #2
   2e9fe:	18ba      	adds	r2, r7, r2
   2ea00:	6812      	ldr	r2, [r2, #0]
   2ea02:	321b      	adds	r2, #27
   2ea04:	7812      	ldrb	r2, [r2, #0]
   2ea06:	0212      	lsls	r2, r2, #8
   2ea08:	b211      	sxth	r1, r2
   2ea0a:	2292      	movs	r2, #146	; 0x92
   2ea0c:	0092      	lsls	r2, r2, #2
   2ea0e:	18ba      	adds	r2, r7, r2
   2ea10:	6812      	ldr	r2, [r2, #0]
   2ea12:	321a      	adds	r2, #26
   2ea14:	7812      	ldrb	r2, [r2, #0]
   2ea16:	b212      	sxth	r2, r2
   2ea18:	430a      	orrs	r2, r1
   2ea1a:	b212      	sxth	r2, r2
   2ea1c:	b292      	uxth	r2, r2
   2ea1e:	4313      	orrs	r3, r2
   2ea20:	2290      	movs	r2, #144	; 0x90
   2ea22:	0092      	lsls	r2, r2, #2
   2ea24:	18ba      	adds	r2, r7, r2
   2ea26:	6013      	str	r3, [r2, #0]
			ST_CLUST(dir, 0);					/* cluster = 0 */
   2ea28:	2392      	movs	r3, #146	; 0x92
   2ea2a:	009b      	lsls	r3, r3, #2
   2ea2c:	18fb      	adds	r3, r7, r3
   2ea2e:	681b      	ldr	r3, [r3, #0]
   2ea30:	331a      	adds	r3, #26
   2ea32:	2200      	movs	r2, #0
   2ea34:	701a      	strb	r2, [r3, #0]
   2ea36:	2392      	movs	r3, #146	; 0x92
   2ea38:	009b      	lsls	r3, r3, #2
   2ea3a:	18fb      	adds	r3, r7, r3
   2ea3c:	681b      	ldr	r3, [r3, #0]
   2ea3e:	331b      	adds	r3, #27
   2ea40:	2200      	movs	r2, #0
   2ea42:	701a      	strb	r2, [r3, #0]
   2ea44:	2392      	movs	r3, #146	; 0x92
   2ea46:	009b      	lsls	r3, r3, #2
   2ea48:	18fb      	adds	r3, r7, r3
   2ea4a:	681b      	ldr	r3, [r3, #0]
   2ea4c:	3314      	adds	r3, #20
   2ea4e:	2200      	movs	r2, #0
   2ea50:	701a      	strb	r2, [r3, #0]
   2ea52:	2392      	movs	r3, #146	; 0x92
   2ea54:	009b      	lsls	r3, r3, #2
   2ea56:	18fb      	adds	r3, r7, r3
   2ea58:	681b      	ldr	r3, [r3, #0]
   2ea5a:	3315      	adds	r3, #21
   2ea5c:	2200      	movs	r2, #0
   2ea5e:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
   2ea60:	2387      	movs	r3, #135	; 0x87
   2ea62:	009b      	lsls	r3, r3, #2
   2ea64:	18fb      	adds	r3, r7, r3
   2ea66:	681b      	ldr	r3, [r3, #0]
   2ea68:	2201      	movs	r2, #1
   2ea6a:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
   2ea6c:	2390      	movs	r3, #144	; 0x90
   2ea6e:	009b      	lsls	r3, r3, #2
   2ea70:	18fb      	adds	r3, r7, r3
   2ea72:	681b      	ldr	r3, [r3, #0]
   2ea74:	2b00      	cmp	r3, #0
   2ea76:	d100      	bne.n	2ea7a <f_open+0x2fe>
   2ea78:	e076      	b.n	2eb68 <f_open+0x3ec>
				dw = dj.fs->winsect;
   2ea7a:	2387      	movs	r3, #135	; 0x87
   2ea7c:	009b      	lsls	r3, r3, #2
   2ea7e:	18fb      	adds	r3, r7, r3
   2ea80:	681b      	ldr	r3, [r3, #0]
   2ea82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2ea84:	2291      	movs	r2, #145	; 0x91
   2ea86:	0092      	lsls	r2, r2, #2
   2ea88:	18ba      	adds	r2, r7, r2
   2ea8a:	6013      	str	r3, [r2, #0]
				res = remove_chain(dj.fs, cl);
   2ea8c:	2387      	movs	r3, #135	; 0x87
   2ea8e:	009b      	lsls	r3, r3, #2
   2ea90:	18fb      	adds	r3, r7, r3
   2ea92:	681b      	ldr	r3, [r3, #0]
   2ea94:	4a21      	ldr	r2, [pc, #132]	; (2eb1c <f_open+0x3a0>)
   2ea96:	18bc      	adds	r4, r7, r2
   2ea98:	2290      	movs	r2, #144	; 0x90
   2ea9a:	0092      	lsls	r2, r2, #2
   2ea9c:	18ba      	adds	r2, r7, r2
   2ea9e:	6812      	ldr	r2, [r2, #0]
   2eaa0:	0011      	movs	r1, r2
   2eaa2:	0018      	movs	r0, r3
   2eaa4:	4b22      	ldr	r3, [pc, #136]	; (2eb30 <f_open+0x3b4>)
   2eaa6:	4798      	blx	r3
   2eaa8:	0003      	movs	r3, r0
   2eaaa:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
   2eaac:	4b1b      	ldr	r3, [pc, #108]	; (2eb1c <f_open+0x3a0>)
   2eaae:	18fb      	adds	r3, r7, r3
   2eab0:	781b      	ldrb	r3, [r3, #0]
   2eab2:	2b00      	cmp	r3, #0
   2eab4:	d158      	bne.n	2eb68 <f_open+0x3ec>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
   2eab6:	2387      	movs	r3, #135	; 0x87
   2eab8:	009b      	lsls	r3, r3, #2
   2eaba:	18fb      	adds	r3, r7, r3
   2eabc:	681b      	ldr	r3, [r3, #0]
   2eabe:	2290      	movs	r2, #144	; 0x90
   2eac0:	0092      	lsls	r2, r2, #2
   2eac2:	18ba      	adds	r2, r7, r2
   2eac4:	6812      	ldr	r2, [r2, #0]
   2eac6:	3a01      	subs	r2, #1
   2eac8:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
   2eaca:	2387      	movs	r3, #135	; 0x87
   2eacc:	009b      	lsls	r3, r3, #2
   2eace:	18fb      	adds	r3, r7, r3
   2ead0:	681b      	ldr	r3, [r3, #0]
   2ead2:	4a12      	ldr	r2, [pc, #72]	; (2eb1c <f_open+0x3a0>)
   2ead4:	18bc      	adds	r4, r7, r2
   2ead6:	2291      	movs	r2, #145	; 0x91
   2ead8:	0092      	lsls	r2, r2, #2
   2eada:	18ba      	adds	r2, r7, r2
   2eadc:	6812      	ldr	r2, [r2, #0]
   2eade:	0011      	movs	r1, r2
   2eae0:	0018      	movs	r0, r3
   2eae2:	4b14      	ldr	r3, [pc, #80]	; (2eb34 <f_open+0x3b8>)
   2eae4:	4798      	blx	r3
   2eae6:	0003      	movs	r3, r0
   2eae8:	7023      	strb	r3, [r4, #0]
   2eaea:	e03d      	b.n	2eb68 <f_open+0x3ec>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   2eaec:	4b0b      	ldr	r3, [pc, #44]	; (2eb1c <f_open+0x3a0>)
   2eaee:	18fb      	adds	r3, r7, r3
   2eaf0:	781b      	ldrb	r3, [r3, #0]
   2eaf2:	2b00      	cmp	r3, #0
   2eaf4:	d138      	bne.n	2eb68 <f_open+0x3ec>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   2eaf6:	2392      	movs	r3, #146	; 0x92
   2eaf8:	009b      	lsls	r3, r3, #2
   2eafa:	18fb      	adds	r3, r7, r3
   2eafc:	681b      	ldr	r3, [r3, #0]
   2eafe:	330b      	adds	r3, #11
   2eb00:	781b      	ldrb	r3, [r3, #0]
   2eb02:	001a      	movs	r2, r3
   2eb04:	2310      	movs	r3, #16
   2eb06:	4013      	ands	r3, r2
   2eb08:	d016      	beq.n	2eb38 <f_open+0x3bc>
				res = FR_NO_FILE;
   2eb0a:	4b04      	ldr	r3, [pc, #16]	; (2eb1c <f_open+0x3a0>)
   2eb0c:	18fb      	adds	r3, r7, r3
   2eb0e:	2204      	movs	r2, #4
   2eb10:	701a      	strb	r2, [r3, #0]
   2eb12:	e029      	b.n	2eb68 <f_open+0x3ec>
   2eb14:	fffffdac 	.word	0xfffffdac
   2eb18:	fffffdb7 	.word	0xfffffdb7
   2eb1c:	0000024f 	.word	0x0000024f
   2eb20:	0002e0d5 	.word	0x0002e0d5
   2eb24:	0002dec9 	.word	0x0002dec9
   2eb28:	0002d719 	.word	0x0002d719
   2eb2c:	0002c511 	.word	0x0002c511
   2eb30:	0002cc95 	.word	0x0002cc95
   2eb34:	0002c655 	.word	0x0002c655
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   2eb38:	4b5a      	ldr	r3, [pc, #360]	; (2eca4 <f_open+0x528>)
   2eb3a:	2294      	movs	r2, #148	; 0x94
   2eb3c:	0092      	lsls	r2, r2, #2
   2eb3e:	4694      	mov	ip, r2
   2eb40:	44bc      	add	ip, r7
   2eb42:	4463      	add	r3, ip
   2eb44:	781b      	ldrb	r3, [r3, #0]
   2eb46:	2202      	movs	r2, #2
   2eb48:	4013      	ands	r3, r2
   2eb4a:	d00d      	beq.n	2eb68 <f_open+0x3ec>
   2eb4c:	2392      	movs	r3, #146	; 0x92
   2eb4e:	009b      	lsls	r3, r3, #2
   2eb50:	18fb      	adds	r3, r7, r3
   2eb52:	681b      	ldr	r3, [r3, #0]
   2eb54:	330b      	adds	r3, #11
   2eb56:	781b      	ldrb	r3, [r3, #0]
   2eb58:	001a      	movs	r2, r3
   2eb5a:	2301      	movs	r3, #1
   2eb5c:	4013      	ands	r3, r2
   2eb5e:	d003      	beq.n	2eb68 <f_open+0x3ec>
					res = FR_DENIED;
   2eb60:	4b51      	ldr	r3, [pc, #324]	; (2eca8 <f_open+0x52c>)
   2eb62:	18fb      	adds	r3, r7, r3
   2eb64:	2207      	movs	r2, #7
   2eb66:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
   2eb68:	4b4f      	ldr	r3, [pc, #316]	; (2eca8 <f_open+0x52c>)
   2eb6a:	18fb      	adds	r3, r7, r3
   2eb6c:	781b      	ldrb	r3, [r3, #0]
   2eb6e:	2b00      	cmp	r3, #0
   2eb70:	d126      	bne.n	2ebc0 <f_open+0x444>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   2eb72:	4b4c      	ldr	r3, [pc, #304]	; (2eca4 <f_open+0x528>)
   2eb74:	2294      	movs	r2, #148	; 0x94
   2eb76:	0092      	lsls	r2, r2, #2
   2eb78:	4694      	mov	ip, r2
   2eb7a:	44bc      	add	ip, r7
   2eb7c:	4463      	add	r3, ip
   2eb7e:	781b      	ldrb	r3, [r3, #0]
   2eb80:	2208      	movs	r2, #8
   2eb82:	4013      	ands	r3, r2
   2eb84:	d00f      	beq.n	2eba6 <f_open+0x42a>
			mode |= FA__WRITTEN;
   2eb86:	4b47      	ldr	r3, [pc, #284]	; (2eca4 <f_open+0x528>)
   2eb88:	2294      	movs	r2, #148	; 0x94
   2eb8a:	0092      	lsls	r2, r2, #2
   2eb8c:	4694      	mov	ip, r2
   2eb8e:	44bc      	add	ip, r7
   2eb90:	4463      	add	r3, ip
   2eb92:	4a44      	ldr	r2, [pc, #272]	; (2eca4 <f_open+0x528>)
   2eb94:	2194      	movs	r1, #148	; 0x94
   2eb96:	0089      	lsls	r1, r1, #2
   2eb98:	468c      	mov	ip, r1
   2eb9a:	44bc      	add	ip, r7
   2eb9c:	4462      	add	r2, ip
   2eb9e:	7812      	ldrb	r2, [r2, #0]
   2eba0:	2120      	movs	r1, #32
   2eba2:	430a      	orrs	r2, r1
   2eba4:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   2eba6:	2387      	movs	r3, #135	; 0x87
   2eba8:	009b      	lsls	r3, r3, #2
   2ebaa:	18fb      	adds	r3, r7, r3
   2ebac:	681b      	ldr	r3, [r3, #0]
   2ebae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2ebb0:	68fb      	ldr	r3, [r7, #12]
   2ebb2:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
   2ebb4:	68fb      	ldr	r3, [r7, #12]
   2ebb6:	2292      	movs	r2, #146	; 0x92
   2ebb8:	0092      	lsls	r2, r2, #2
   2ebba:	18ba      	adds	r2, r7, r2
   2ebbc:	6812      	ldr	r2, [r2, #0]
   2ebbe:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
   2ebc0:	4b39      	ldr	r3, [pc, #228]	; (2eca8 <f_open+0x52c>)
   2ebc2:	18fb      	adds	r3, r7, r3
   2ebc4:	781b      	ldrb	r3, [r3, #0]
   2ebc6:	2b00      	cmp	r3, #0
   2ebc8:	d163      	bne.n	2ec92 <f_open+0x516>
		fp->flag = mode;					/* File access mode */
   2ebca:	68fb      	ldr	r3, [r7, #12]
   2ebcc:	4a35      	ldr	r2, [pc, #212]	; (2eca4 <f_open+0x528>)
   2ebce:	2194      	movs	r1, #148	; 0x94
   2ebd0:	0089      	lsls	r1, r1, #2
   2ebd2:	468c      	mov	ip, r1
   2ebd4:	44bc      	add	ip, r7
   2ebd6:	4462      	add	r2, ip
   2ebd8:	7812      	ldrb	r2, [r2, #0]
   2ebda:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   2ebdc:	2392      	movs	r3, #146	; 0x92
   2ebde:	009b      	lsls	r3, r3, #2
   2ebe0:	18fb      	adds	r3, r7, r3
   2ebe2:	681b      	ldr	r3, [r3, #0]
   2ebe4:	3315      	adds	r3, #21
   2ebe6:	781b      	ldrb	r3, [r3, #0]
   2ebe8:	021b      	lsls	r3, r3, #8
   2ebea:	b21a      	sxth	r2, r3
   2ebec:	2392      	movs	r3, #146	; 0x92
   2ebee:	009b      	lsls	r3, r3, #2
   2ebf0:	18fb      	adds	r3, r7, r3
   2ebf2:	681b      	ldr	r3, [r3, #0]
   2ebf4:	3314      	adds	r3, #20
   2ebf6:	781b      	ldrb	r3, [r3, #0]
   2ebf8:	b21b      	sxth	r3, r3
   2ebfa:	4313      	orrs	r3, r2
   2ebfc:	b21b      	sxth	r3, r3
   2ebfe:	b29b      	uxth	r3, r3
   2ec00:	041b      	lsls	r3, r3, #16
   2ec02:	2292      	movs	r2, #146	; 0x92
   2ec04:	0092      	lsls	r2, r2, #2
   2ec06:	18ba      	adds	r2, r7, r2
   2ec08:	6812      	ldr	r2, [r2, #0]
   2ec0a:	321b      	adds	r2, #27
   2ec0c:	7812      	ldrb	r2, [r2, #0]
   2ec0e:	0212      	lsls	r2, r2, #8
   2ec10:	b211      	sxth	r1, r2
   2ec12:	2292      	movs	r2, #146	; 0x92
   2ec14:	0092      	lsls	r2, r2, #2
   2ec16:	18ba      	adds	r2, r7, r2
   2ec18:	6812      	ldr	r2, [r2, #0]
   2ec1a:	321a      	adds	r2, #26
   2ec1c:	7812      	ldrb	r2, [r2, #0]
   2ec1e:	b212      	sxth	r2, r2
   2ec20:	430a      	orrs	r2, r1
   2ec22:	b212      	sxth	r2, r2
   2ec24:	b292      	uxth	r2, r2
   2ec26:	431a      	orrs	r2, r3
   2ec28:	68fb      	ldr	r3, [r7, #12]
   2ec2a:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   2ec2c:	2392      	movs	r3, #146	; 0x92
   2ec2e:	009b      	lsls	r3, r3, #2
   2ec30:	18fb      	adds	r3, r7, r3
   2ec32:	681b      	ldr	r3, [r3, #0]
   2ec34:	331f      	adds	r3, #31
   2ec36:	781b      	ldrb	r3, [r3, #0]
   2ec38:	061a      	lsls	r2, r3, #24
   2ec3a:	2392      	movs	r3, #146	; 0x92
   2ec3c:	009b      	lsls	r3, r3, #2
   2ec3e:	18fb      	adds	r3, r7, r3
   2ec40:	681b      	ldr	r3, [r3, #0]
   2ec42:	331e      	adds	r3, #30
   2ec44:	781b      	ldrb	r3, [r3, #0]
   2ec46:	041b      	lsls	r3, r3, #16
   2ec48:	4313      	orrs	r3, r2
   2ec4a:	2292      	movs	r2, #146	; 0x92
   2ec4c:	0092      	lsls	r2, r2, #2
   2ec4e:	18ba      	adds	r2, r7, r2
   2ec50:	6812      	ldr	r2, [r2, #0]
   2ec52:	321d      	adds	r2, #29
   2ec54:	7812      	ldrb	r2, [r2, #0]
   2ec56:	0212      	lsls	r2, r2, #8
   2ec58:	4313      	orrs	r3, r2
   2ec5a:	2292      	movs	r2, #146	; 0x92
   2ec5c:	0092      	lsls	r2, r2, #2
   2ec5e:	18ba      	adds	r2, r7, r2
   2ec60:	6812      	ldr	r2, [r2, #0]
   2ec62:	321c      	adds	r2, #28
   2ec64:	7812      	ldrb	r2, [r2, #0]
   2ec66:	431a      	orrs	r2, r3
   2ec68:	68fb      	ldr	r3, [r7, #12]
   2ec6a:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
   2ec6c:	68fb      	ldr	r3, [r7, #12]
   2ec6e:	2200      	movs	r2, #0
   2ec70:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
   2ec72:	68fb      	ldr	r3, [r7, #12]
   2ec74:	2200      	movs	r2, #0
   2ec76:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   2ec78:	2387      	movs	r3, #135	; 0x87
   2ec7a:	009b      	lsls	r3, r3, #2
   2ec7c:	18fb      	adds	r3, r7, r3
   2ec7e:	681a      	ldr	r2, [r3, #0]
   2ec80:	68fb      	ldr	r3, [r7, #12]
   2ec82:	601a      	str	r2, [r3, #0]
   2ec84:	2387      	movs	r3, #135	; 0x87
   2ec86:	009b      	lsls	r3, r3, #2
   2ec88:	18fb      	adds	r3, r7, r3
   2ec8a:	681b      	ldr	r3, [r3, #0]
   2ec8c:	88da      	ldrh	r2, [r3, #6]
   2ec8e:	68fb      	ldr	r3, [r7, #12]
   2ec90:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
   2ec92:	4b05      	ldr	r3, [pc, #20]	; (2eca8 <f_open+0x52c>)
   2ec94:	18fb      	adds	r3, r7, r3
   2ec96:	781b      	ldrb	r3, [r3, #0]
}
   2ec98:	0018      	movs	r0, r3
   2ec9a:	46bd      	mov	sp, r7
   2ec9c:	2395      	movs	r3, #149	; 0x95
   2ec9e:	009b      	lsls	r3, r3, #2
   2eca0:	449d      	add	sp, r3
   2eca2:	bd90      	pop	{r4, r7, pc}
   2eca4:	fffffdb7 	.word	0xfffffdb7
   2eca8:	0000024f 	.word	0x0000024f

0002ecac <f_write>:
	FIL *fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT *bw			/* Pointer to number of bytes written */
)
{
   2ecac:	b590      	push	{r4, r7, lr}
   2ecae:	b08b      	sub	sp, #44	; 0x2c
   2ecb0:	af00      	add	r7, sp, #0
   2ecb2:	60f8      	str	r0, [r7, #12]
   2ecb4:	60b9      	str	r1, [r7, #8]
   2ecb6:	607a      	str	r2, [r7, #4]
   2ecb8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = buff;
   2ecba:	68bb      	ldr	r3, [r7, #8]
   2ecbc:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Initialize byte counter */
   2ecbe:	683b      	ldr	r3, [r7, #0]
   2ecc0:	2200      	movs	r2, #0
   2ecc2:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);			/* Check validity */
   2ecc4:	68fb      	ldr	r3, [r7, #12]
   2ecc6:	681a      	ldr	r2, [r3, #0]
   2ecc8:	68fb      	ldr	r3, [r7, #12]
   2ecca:	889b      	ldrh	r3, [r3, #4]
   2eccc:	2117      	movs	r1, #23
   2ecce:	187c      	adds	r4, r7, r1
   2ecd0:	0019      	movs	r1, r3
   2ecd2:	0010      	movs	r0, r2
   2ecd4:	4bc3      	ldr	r3, [pc, #780]	; (2efe4 <f_write+0x338>)
   2ecd6:	4798      	blx	r3
   2ecd8:	0003      	movs	r3, r0
   2ecda:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   2ecdc:	2317      	movs	r3, #23
   2ecde:	18fb      	adds	r3, r7, r3
   2ece0:	781b      	ldrb	r3, [r3, #0]
   2ece2:	2b00      	cmp	r3, #0
   2ece4:	d003      	beq.n	2ecee <f_write+0x42>
   2ece6:	2317      	movs	r3, #23
   2ece8:	18fb      	adds	r3, r7, r3
   2ecea:	781b      	ldrb	r3, [r3, #0]
   2ecec:	e176      	b.n	2efdc <f_write+0x330>
	if (fp->flag & FA__ERROR)				/* Aborted file? */
   2ecee:	68fb      	ldr	r3, [r7, #12]
   2ecf0:	799b      	ldrb	r3, [r3, #6]
   2ecf2:	b25b      	sxtb	r3, r3
   2ecf4:	2b00      	cmp	r3, #0
   2ecf6:	da01      	bge.n	2ecfc <f_write+0x50>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   2ecf8:	2302      	movs	r3, #2
   2ecfa:	e16f      	b.n	2efdc <f_write+0x330>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
   2ecfc:	68fb      	ldr	r3, [r7, #12]
   2ecfe:	799b      	ldrb	r3, [r3, #6]
   2ed00:	001a      	movs	r2, r3
   2ed02:	2302      	movs	r3, #2
   2ed04:	4013      	ands	r3, r2
   2ed06:	d101      	bne.n	2ed0c <f_write+0x60>
		LEAVE_FF(fp->fs, FR_DENIED);
   2ed08:	2307      	movs	r3, #7
   2ed0a:	e167      	b.n	2efdc <f_write+0x330>
	if ((DWORD)(fp->fsize + btw) < fp->fsize) btw = 0;	/* File size cannot reach 4GB */
   2ed0c:	68fb      	ldr	r3, [r7, #12]
   2ed0e:	68da      	ldr	r2, [r3, #12]
   2ed10:	687b      	ldr	r3, [r7, #4]
   2ed12:	18d2      	adds	r2, r2, r3
   2ed14:	68fb      	ldr	r3, [r7, #12]
   2ed16:	68db      	ldr	r3, [r3, #12]
   2ed18:	429a      	cmp	r2, r3
   2ed1a:	d300      	bcc.n	2ed1e <f_write+0x72>
   2ed1c:	e146      	b.n	2efac <f_write+0x300>
   2ed1e:	2300      	movs	r3, #0
   2ed20:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
   2ed22:	e143      	b.n	2efac <f_write+0x300>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
   2ed24:	68fb      	ldr	r3, [r7, #12]
   2ed26:	689b      	ldr	r3, [r3, #8]
   2ed28:	05db      	lsls	r3, r3, #23
   2ed2a:	0ddb      	lsrs	r3, r3, #23
   2ed2c:	d000      	beq.n	2ed30 <f_write+0x84>
   2ed2e:	e0f6      	b.n	2ef1e <f_write+0x272>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   2ed30:	68fb      	ldr	r3, [r7, #12]
   2ed32:	689b      	ldr	r3, [r3, #8]
   2ed34:	0a5b      	lsrs	r3, r3, #9
   2ed36:	b2da      	uxtb	r2, r3
   2ed38:	68fb      	ldr	r3, [r7, #12]
   2ed3a:	681b      	ldr	r3, [r3, #0]
   2ed3c:	789b      	ldrb	r3, [r3, #2]
   2ed3e:	3b01      	subs	r3, #1
   2ed40:	b2d9      	uxtb	r1, r3
   2ed42:	2316      	movs	r3, #22
   2ed44:	18fb      	adds	r3, r7, r3
   2ed46:	400a      	ands	r2, r1
   2ed48:	701a      	strb	r2, [r3, #0]
			if (!csect) {					/* On the cluster boundary? */
   2ed4a:	2316      	movs	r3, #22
   2ed4c:	18fb      	adds	r3, r7, r3
   2ed4e:	781b      	ldrb	r3, [r3, #0]
   2ed50:	2b00      	cmp	r3, #0
   2ed52:	d140      	bne.n	2edd6 <f_write+0x12a>
				if (fp->fptr == 0) {		/* On the top of the file? */
   2ed54:	68fb      	ldr	r3, [r7, #12]
   2ed56:	689b      	ldr	r3, [r3, #8]
   2ed58:	2b00      	cmp	r3, #0
   2ed5a:	d111      	bne.n	2ed80 <f_write+0xd4>
					clst = fp->sclust;		/* Follow from the origin */
   2ed5c:	68fb      	ldr	r3, [r7, #12]
   2ed5e:	691b      	ldr	r3, [r3, #16]
   2ed60:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
   2ed62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ed64:	2b00      	cmp	r3, #0
   2ed66:	d115      	bne.n	2ed94 <f_write+0xe8>
						fp->sclust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
   2ed68:	68fb      	ldr	r3, [r7, #12]
   2ed6a:	681b      	ldr	r3, [r3, #0]
   2ed6c:	2100      	movs	r1, #0
   2ed6e:	0018      	movs	r0, r3
   2ed70:	4b9d      	ldr	r3, [pc, #628]	; (2efe8 <f_write+0x33c>)
   2ed72:	4798      	blx	r3
   2ed74:	0003      	movs	r3, r0
   2ed76:	627b      	str	r3, [r7, #36]	; 0x24
   2ed78:	68fb      	ldr	r3, [r7, #12]
   2ed7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2ed7c:	611a      	str	r2, [r3, #16]
   2ed7e:	e009      	b.n	2ed94 <f_write+0xe8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
   2ed80:	68fb      	ldr	r3, [r7, #12]
   2ed82:	681a      	ldr	r2, [r3, #0]
   2ed84:	68fb      	ldr	r3, [r7, #12]
   2ed86:	695b      	ldr	r3, [r3, #20]
   2ed88:	0019      	movs	r1, r3
   2ed8a:	0010      	movs	r0, r2
   2ed8c:	4b96      	ldr	r3, [pc, #600]	; (2efe8 <f_write+0x33c>)
   2ed8e:	4798      	blx	r3
   2ed90:	0003      	movs	r3, r0
   2ed92:	627b      	str	r3, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2ed94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ed96:	2b00      	cmp	r3, #0
   2ed98:	d100      	bne.n	2ed9c <f_write+0xf0>
   2ed9a:	e10c      	b.n	2efb6 <f_write+0x30a>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
   2ed9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2ed9e:	2b01      	cmp	r3, #1
   2eda0:	d109      	bne.n	2edb6 <f_write+0x10a>
   2eda2:	68fb      	ldr	r3, [r7, #12]
   2eda4:	799b      	ldrb	r3, [r3, #6]
   2eda6:	2280      	movs	r2, #128	; 0x80
   2eda8:	4252      	negs	r2, r2
   2edaa:	4313      	orrs	r3, r2
   2edac:	b2da      	uxtb	r2, r3
   2edae:	68fb      	ldr	r3, [r7, #12]
   2edb0:	719a      	strb	r2, [r3, #6]
   2edb2:	2302      	movs	r3, #2
   2edb4:	e112      	b.n	2efdc <f_write+0x330>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   2edb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2edb8:	3301      	adds	r3, #1
   2edba:	d109      	bne.n	2edd0 <f_write+0x124>
   2edbc:	68fb      	ldr	r3, [r7, #12]
   2edbe:	799b      	ldrb	r3, [r3, #6]
   2edc0:	2280      	movs	r2, #128	; 0x80
   2edc2:	4252      	negs	r2, r2
   2edc4:	4313      	orrs	r3, r2
   2edc6:	b2da      	uxtb	r2, r3
   2edc8:	68fb      	ldr	r3, [r7, #12]
   2edca:	719a      	strb	r2, [r3, #6]
   2edcc:	2301      	movs	r3, #1
   2edce:	e105      	b.n	2efdc <f_write+0x330>
				fp->clust = clst;			/* Update current cluster */
   2edd0:	68fb      	ldr	r3, [r7, #12]
   2edd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2edd4:	615a      	str	r2, [r3, #20]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write-back sector cache */
   2edd6:	68fb      	ldr	r3, [r7, #12]
   2edd8:	681b      	ldr	r3, [r3, #0]
   2edda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2eddc:	68fb      	ldr	r3, [r7, #12]
   2edde:	699b      	ldr	r3, [r3, #24]
   2ede0:	429a      	cmp	r2, r3
   2ede2:	d111      	bne.n	2ee08 <f_write+0x15c>
   2ede4:	68fb      	ldr	r3, [r7, #12]
   2ede6:	681b      	ldr	r3, [r3, #0]
   2ede8:	2100      	movs	r1, #0
   2edea:	0018      	movs	r0, r3
   2edec:	4b7f      	ldr	r3, [pc, #508]	; (2efec <f_write+0x340>)
   2edee:	4798      	blx	r3
   2edf0:	1e03      	subs	r3, r0, #0
   2edf2:	d009      	beq.n	2ee08 <f_write+0x15c>
				ABORT(fp->fs, FR_DISK_ERR);
   2edf4:	68fb      	ldr	r3, [r7, #12]
   2edf6:	799b      	ldrb	r3, [r3, #6]
   2edf8:	2280      	movs	r2, #128	; 0x80
   2edfa:	4252      	negs	r2, r2
   2edfc:	4313      	orrs	r3, r2
   2edfe:	b2da      	uxtb	r2, r3
   2ee00:	68fb      	ldr	r3, [r7, #12]
   2ee02:	719a      	strb	r2, [r3, #6]
   2ee04:	2301      	movs	r3, #1
   2ee06:	e0e9      	b.n	2efdc <f_write+0x330>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
					ABORT(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   2ee08:	68fb      	ldr	r3, [r7, #12]
   2ee0a:	681a      	ldr	r2, [r3, #0]
   2ee0c:	68fb      	ldr	r3, [r7, #12]
   2ee0e:	695b      	ldr	r3, [r3, #20]
   2ee10:	0019      	movs	r1, r3
   2ee12:	0010      	movs	r0, r2
   2ee14:	4b76      	ldr	r3, [pc, #472]	; (2eff0 <f_write+0x344>)
   2ee16:	4798      	blx	r3
   2ee18:	0003      	movs	r3, r0
   2ee1a:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   2ee1c:	693b      	ldr	r3, [r7, #16]
   2ee1e:	2b00      	cmp	r3, #0
   2ee20:	d109      	bne.n	2ee36 <f_write+0x18a>
   2ee22:	68fb      	ldr	r3, [r7, #12]
   2ee24:	799b      	ldrb	r3, [r3, #6]
   2ee26:	2280      	movs	r2, #128	; 0x80
   2ee28:	4252      	negs	r2, r2
   2ee2a:	4313      	orrs	r3, r2
   2ee2c:	b2da      	uxtb	r2, r3
   2ee2e:	68fb      	ldr	r3, [r7, #12]
   2ee30:	719a      	strb	r2, [r3, #6]
   2ee32:	2302      	movs	r3, #2
   2ee34:	e0d2      	b.n	2efdc <f_write+0x330>
			sect += csect;
   2ee36:	2316      	movs	r3, #22
   2ee38:	18fb      	adds	r3, r7, r3
   2ee3a:	781b      	ldrb	r3, [r3, #0]
   2ee3c:	693a      	ldr	r2, [r7, #16]
   2ee3e:	18d3      	adds	r3, r2, r3
   2ee40:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
   2ee42:	687b      	ldr	r3, [r7, #4]
   2ee44:	0a5b      	lsrs	r3, r3, #9
   2ee46:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
   2ee48:	69fb      	ldr	r3, [r7, #28]
   2ee4a:	2b00      	cmp	r3, #0
   2ee4c:	d048      	beq.n	2eee0 <f_write+0x234>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   2ee4e:	2316      	movs	r3, #22
   2ee50:	18fb      	adds	r3, r7, r3
   2ee52:	781a      	ldrb	r2, [r3, #0]
   2ee54:	69fb      	ldr	r3, [r7, #28]
   2ee56:	18d2      	adds	r2, r2, r3
   2ee58:	68fb      	ldr	r3, [r7, #12]
   2ee5a:	681b      	ldr	r3, [r3, #0]
   2ee5c:	789b      	ldrb	r3, [r3, #2]
   2ee5e:	429a      	cmp	r2, r3
   2ee60:	d908      	bls.n	2ee74 <f_write+0x1c8>
					cc = fp->fs->csize - csect;
   2ee62:	68fb      	ldr	r3, [r7, #12]
   2ee64:	681b      	ldr	r3, [r3, #0]
   2ee66:	789b      	ldrb	r3, [r3, #2]
   2ee68:	001a      	movs	r2, r3
   2ee6a:	2316      	movs	r3, #22
   2ee6c:	18fb      	adds	r3, r7, r3
   2ee6e:	781b      	ldrb	r3, [r3, #0]
   2ee70:	1ad3      	subs	r3, r2, r3
   2ee72:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
   2ee74:	68fb      	ldr	r3, [r7, #12]
   2ee76:	681b      	ldr	r3, [r3, #0]
   2ee78:	7858      	ldrb	r0, [r3, #1]
   2ee7a:	69fb      	ldr	r3, [r7, #28]
   2ee7c:	b2db      	uxtb	r3, r3
   2ee7e:	693a      	ldr	r2, [r7, #16]
   2ee80:	69b9      	ldr	r1, [r7, #24]
   2ee82:	4c5c      	ldr	r4, [pc, #368]	; (2eff4 <f_write+0x348>)
   2ee84:	47a0      	blx	r4
   2ee86:	1e03      	subs	r3, r0, #0
   2ee88:	d009      	beq.n	2ee9e <f_write+0x1f2>
					ABORT(fp->fs, FR_DISK_ERR);
   2ee8a:	68fb      	ldr	r3, [r7, #12]
   2ee8c:	799b      	ldrb	r3, [r3, #6]
   2ee8e:	2280      	movs	r2, #128	; 0x80
   2ee90:	4252      	negs	r2, r2
   2ee92:	4313      	orrs	r3, r2
   2ee94:	b2da      	uxtb	r2, r3
   2ee96:	68fb      	ldr	r3, [r7, #12]
   2ee98:	719a      	strb	r2, [r3, #6]
   2ee9a:	2301      	movs	r3, #1
   2ee9c:	e09e      	b.n	2efdc <f_write+0x330>
#if _FS_TINY
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
   2ee9e:	68fb      	ldr	r3, [r7, #12]
   2eea0:	681b      	ldr	r3, [r3, #0]
   2eea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2eea4:	693b      	ldr	r3, [r7, #16]
   2eea6:	1ad2      	subs	r2, r2, r3
   2eea8:	69fb      	ldr	r3, [r7, #28]
   2eeaa:	429a      	cmp	r2, r3
   2eeac:	d214      	bcs.n	2eed8 <f_write+0x22c>
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
   2eeae:	68fb      	ldr	r3, [r7, #12]
   2eeb0:	681b      	ldr	r3, [r3, #0]
   2eeb2:	3330      	adds	r3, #48	; 0x30
   2eeb4:	0018      	movs	r0, r3
   2eeb6:	68fb      	ldr	r3, [r7, #12]
   2eeb8:	681b      	ldr	r3, [r3, #0]
   2eeba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   2eebc:	693b      	ldr	r3, [r7, #16]
   2eebe:	1ad3      	subs	r3, r2, r3
   2eec0:	025b      	lsls	r3, r3, #9
   2eec2:	69ba      	ldr	r2, [r7, #24]
   2eec4:	18d1      	adds	r1, r2, r3
   2eec6:	2380      	movs	r3, #128	; 0x80
   2eec8:	009b      	lsls	r3, r3, #2
   2eeca:	001a      	movs	r2, r3
   2eecc:	4b4a      	ldr	r3, [pc, #296]	; (2eff8 <f_write+0x34c>)
   2eece:	4798      	blx	r3
					fp->fs->wflag = 0;
   2eed0:	68fb      	ldr	r3, [r7, #12]
   2eed2:	681b      	ldr	r3, [r3, #0]
   2eed4:	2200      	movs	r2, #0
   2eed6:	711a      	strb	r2, [r3, #4]
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->flag &= ~FA__DIRTY;
				}
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
   2eed8:	69fb      	ldr	r3, [r7, #28]
   2eeda:	025b      	lsls	r3, r3, #9
   2eedc:	623b      	str	r3, [r7, #32]
				continue;
   2eede:	e051      	b.n	2ef84 <f_write+0x2d8>
			}
#if _FS_TINY
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
   2eee0:	68fb      	ldr	r3, [r7, #12]
   2eee2:	689a      	ldr	r2, [r3, #8]
   2eee4:	68fb      	ldr	r3, [r7, #12]
   2eee6:	68db      	ldr	r3, [r3, #12]
   2eee8:	429a      	cmp	r2, r3
   2eeea:	d315      	bcc.n	2ef18 <f_write+0x26c>
				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
   2eeec:	68fb      	ldr	r3, [r7, #12]
   2eeee:	681b      	ldr	r3, [r3, #0]
   2eef0:	2100      	movs	r1, #0
   2eef2:	0018      	movs	r0, r3
   2eef4:	4b3d      	ldr	r3, [pc, #244]	; (2efec <f_write+0x340>)
   2eef6:	4798      	blx	r3
   2eef8:	1e03      	subs	r3, r0, #0
   2eefa:	d009      	beq.n	2ef10 <f_write+0x264>
   2eefc:	68fb      	ldr	r3, [r7, #12]
   2eefe:	799b      	ldrb	r3, [r3, #6]
   2ef00:	2280      	movs	r2, #128	; 0x80
   2ef02:	4252      	negs	r2, r2
   2ef04:	4313      	orrs	r3, r2
   2ef06:	b2da      	uxtb	r2, r3
   2ef08:	68fb      	ldr	r3, [r7, #12]
   2ef0a:	719a      	strb	r2, [r3, #6]
   2ef0c:	2301      	movs	r3, #1
   2ef0e:	e065      	b.n	2efdc <f_write+0x330>
				fp->fs->winsect = sect;
   2ef10:	68fb      	ldr	r3, [r7, #12]
   2ef12:	681b      	ldr	r3, [r3, #0]
   2ef14:	693a      	ldr	r2, [r7, #16]
   2ef16:	62da      	str	r2, [r3, #44]	; 0x2c
				if (fp->fptr < fp->fsize &&
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
						ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   2ef18:	68fb      	ldr	r3, [r7, #12]
   2ef1a:	693a      	ldr	r2, [r7, #16]
   2ef1c:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
   2ef1e:	68fb      	ldr	r3, [r7, #12]
   2ef20:	689b      	ldr	r3, [r3, #8]
   2ef22:	05db      	lsls	r3, r3, #23
   2ef24:	0ddb      	lsrs	r3, r3, #23
   2ef26:	2280      	movs	r2, #128	; 0x80
   2ef28:	0092      	lsls	r2, r2, #2
   2ef2a:	1ad3      	subs	r3, r2, r3
   2ef2c:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
   2ef2e:	6a3a      	ldr	r2, [r7, #32]
   2ef30:	687b      	ldr	r3, [r7, #4]
   2ef32:	429a      	cmp	r2, r3
   2ef34:	d901      	bls.n	2ef3a <f_write+0x28e>
   2ef36:	687b      	ldr	r3, [r7, #4]
   2ef38:	623b      	str	r3, [r7, #32]
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))	/* Move sector window */
   2ef3a:	68fb      	ldr	r3, [r7, #12]
   2ef3c:	681a      	ldr	r2, [r3, #0]
   2ef3e:	68fb      	ldr	r3, [r7, #12]
   2ef40:	699b      	ldr	r3, [r3, #24]
   2ef42:	0019      	movs	r1, r3
   2ef44:	0010      	movs	r0, r2
   2ef46:	4b29      	ldr	r3, [pc, #164]	; (2efec <f_write+0x340>)
   2ef48:	4798      	blx	r3
   2ef4a:	1e03      	subs	r3, r0, #0
   2ef4c:	d009      	beq.n	2ef62 <f_write+0x2b6>
			ABORT(fp->fs, FR_DISK_ERR);
   2ef4e:	68fb      	ldr	r3, [r7, #12]
   2ef50:	799b      	ldrb	r3, [r3, #6]
   2ef52:	2280      	movs	r2, #128	; 0x80
   2ef54:	4252      	negs	r2, r2
   2ef56:	4313      	orrs	r3, r2
   2ef58:	b2da      	uxtb	r2, r3
   2ef5a:	68fb      	ldr	r3, [r7, #12]
   2ef5c:	719a      	strb	r2, [r3, #6]
   2ef5e:	2301      	movs	r3, #1
   2ef60:	e03c      	b.n	2efdc <f_write+0x330>
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
   2ef62:	68fb      	ldr	r3, [r7, #12]
   2ef64:	681a      	ldr	r2, [r3, #0]
   2ef66:	68fb      	ldr	r3, [r7, #12]
   2ef68:	689b      	ldr	r3, [r3, #8]
   2ef6a:	05db      	lsls	r3, r3, #23
   2ef6c:	0ddb      	lsrs	r3, r3, #23
   2ef6e:	3330      	adds	r3, #48	; 0x30
   2ef70:	18d3      	adds	r3, r2, r3
   2ef72:	6a3a      	ldr	r2, [r7, #32]
   2ef74:	69b9      	ldr	r1, [r7, #24]
   2ef76:	0018      	movs	r0, r3
   2ef78:	4b1f      	ldr	r3, [pc, #124]	; (2eff8 <f_write+0x34c>)
   2ef7a:	4798      	blx	r3
		fp->fs->wflag = 1;
   2ef7c:	68fb      	ldr	r3, [r7, #12]
   2ef7e:	681b      	ldr	r3, [r3, #0]
   2ef80:	2201      	movs	r2, #1
   2ef82:	711a      	strb	r2, [r3, #4]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
   2ef84:	69ba      	ldr	r2, [r7, #24]
   2ef86:	6a3b      	ldr	r3, [r7, #32]
   2ef88:	18d3      	adds	r3, r2, r3
   2ef8a:	61bb      	str	r3, [r7, #24]
   2ef8c:	68fb      	ldr	r3, [r7, #12]
   2ef8e:	689a      	ldr	r2, [r3, #8]
   2ef90:	6a3b      	ldr	r3, [r7, #32]
   2ef92:	18d2      	adds	r2, r2, r3
   2ef94:	68fb      	ldr	r3, [r7, #12]
   2ef96:	609a      	str	r2, [r3, #8]
   2ef98:	683b      	ldr	r3, [r7, #0]
   2ef9a:	681a      	ldr	r2, [r3, #0]
   2ef9c:	6a3b      	ldr	r3, [r7, #32]
   2ef9e:	18d2      	adds	r2, r2, r3
   2efa0:	683b      	ldr	r3, [r7, #0]
   2efa2:	601a      	str	r2, [r3, #0]
   2efa4:	687a      	ldr	r2, [r7, #4]
   2efa6:	6a3b      	ldr	r3, [r7, #32]
   2efa8:	1ad3      	subs	r3, r2, r3
   2efaa:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
   2efac:	687b      	ldr	r3, [r7, #4]
   2efae:	2b00      	cmp	r3, #0
   2efb0:	d000      	beq.n	2efb4 <f_write+0x308>
   2efb2:	e6b7      	b.n	2ed24 <f_write+0x78>
   2efb4:	e000      	b.n	2efb8 <f_write+0x30c>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
   2efb6:	46c0      	nop			; (mov r8, r8)
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->flag |= FA__DIRTY;
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
   2efb8:	68fb      	ldr	r3, [r7, #12]
   2efba:	689a      	ldr	r2, [r3, #8]
   2efbc:	68fb      	ldr	r3, [r7, #12]
   2efbe:	68db      	ldr	r3, [r3, #12]
   2efc0:	429a      	cmp	r2, r3
   2efc2:	d903      	bls.n	2efcc <f_write+0x320>
   2efc4:	68fb      	ldr	r3, [r7, #12]
   2efc6:	689a      	ldr	r2, [r3, #8]
   2efc8:	68fb      	ldr	r3, [r7, #12]
   2efca:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
   2efcc:	68fb      	ldr	r3, [r7, #12]
   2efce:	799b      	ldrb	r3, [r3, #6]
   2efd0:	2220      	movs	r2, #32
   2efd2:	4313      	orrs	r3, r2
   2efd4:	b2da      	uxtb	r2, r3
   2efd6:	68fb      	ldr	r3, [r7, #12]
   2efd8:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
   2efda:	2300      	movs	r3, #0
}
   2efdc:	0018      	movs	r0, r3
   2efde:	46bd      	mov	sp, r7
   2efe0:	b00b      	add	sp, #44	; 0x2c
   2efe2:	bd90      	pop	{r4, r7, pc}
   2efe4:	0002e6d1 	.word	0x0002e6d1
   2efe8:	0002cd5d 	.word	0x0002cd5d
   2efec:	0002c655 	.word	0x0002c655
   2eff0:	0002c8b5 	.word	0x0002c8b5
   2eff4:	0002c341 	.word	0x0002c341
   2eff8:	0002c571 	.word	0x0002c571

0002effc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL *fp		/* Pointer to the file object */
)
{
   2effc:	b590      	push	{r4, r7, lr}
   2effe:	b087      	sub	sp, #28
   2f000:	af00      	add	r7, sp, #0
   2f002:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tim;
	BYTE *dir;


	res = validate(fp->fs, fp->id);		/* Check validity of the object */
   2f004:	687b      	ldr	r3, [r7, #4]
   2f006:	681a      	ldr	r2, [r3, #0]
   2f008:	687b      	ldr	r3, [r7, #4]
   2f00a:	889b      	ldrh	r3, [r3, #4]
   2f00c:	2117      	movs	r1, #23
   2f00e:	187c      	adds	r4, r7, r1
   2f010:	0019      	movs	r1, r3
   2f012:	0010      	movs	r0, r2
   2f014:	4b55      	ldr	r3, [pc, #340]	; (2f16c <f_sync+0x170>)
   2f016:	4798      	blx	r3
   2f018:	0003      	movs	r3, r0
   2f01a:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   2f01c:	2317      	movs	r3, #23
   2f01e:	18fb      	adds	r3, r7, r3
   2f020:	781b      	ldrb	r3, [r3, #0]
   2f022:	2b00      	cmp	r3, #0
   2f024:	d000      	beq.n	2f028 <f_sync+0x2c>
   2f026:	e09a      	b.n	2f15e <f_sync+0x162>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
   2f028:	687b      	ldr	r3, [r7, #4]
   2f02a:	799b      	ldrb	r3, [r3, #6]
   2f02c:	001a      	movs	r2, r3
   2f02e:	2320      	movs	r3, #32
   2f030:	4013      	ands	r3, r2
   2f032:	d100      	bne.n	2f036 <f_sync+0x3a>
   2f034:	e093      	b.n	2f15e <f_sync+0x162>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
				fp->flag &= ~FA__DIRTY;
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
   2f036:	687b      	ldr	r3, [r7, #4]
   2f038:	681a      	ldr	r2, [r3, #0]
   2f03a:	687b      	ldr	r3, [r7, #4]
   2f03c:	69db      	ldr	r3, [r3, #28]
   2f03e:	2117      	movs	r1, #23
   2f040:	187c      	adds	r4, r7, r1
   2f042:	0019      	movs	r1, r3
   2f044:	0010      	movs	r0, r2
   2f046:	4b4a      	ldr	r3, [pc, #296]	; (2f170 <f_sync+0x174>)
   2f048:	4798      	blx	r3
   2f04a:	0003      	movs	r3, r0
   2f04c:	7023      	strb	r3, [r4, #0]
			if (res == FR_OK) {
   2f04e:	2317      	movs	r3, #23
   2f050:	18fb      	adds	r3, r7, r3
   2f052:	781b      	ldrb	r3, [r3, #0]
   2f054:	2b00      	cmp	r3, #0
   2f056:	d000      	beq.n	2f05a <f_sync+0x5e>
   2f058:	e081      	b.n	2f15e <f_sync+0x162>
				dir = fp->dir_ptr;
   2f05a:	687b      	ldr	r3, [r7, #4]
   2f05c:	6a1b      	ldr	r3, [r3, #32]
   2f05e:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
   2f060:	693b      	ldr	r3, [r7, #16]
   2f062:	330b      	adds	r3, #11
   2f064:	693a      	ldr	r2, [r7, #16]
   2f066:	320b      	adds	r2, #11
   2f068:	7812      	ldrb	r2, [r2, #0]
   2f06a:	2120      	movs	r1, #32
   2f06c:	430a      	orrs	r2, r1
   2f06e:	b2d2      	uxtb	r2, r2
   2f070:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
   2f072:	693b      	ldr	r3, [r7, #16]
   2f074:	331c      	adds	r3, #28
   2f076:	001a      	movs	r2, r3
   2f078:	687b      	ldr	r3, [r7, #4]
   2f07a:	68db      	ldr	r3, [r3, #12]
   2f07c:	b2db      	uxtb	r3, r3
   2f07e:	7013      	strb	r3, [r2, #0]
   2f080:	693b      	ldr	r3, [r7, #16]
   2f082:	331d      	adds	r3, #29
   2f084:	001a      	movs	r2, r3
   2f086:	687b      	ldr	r3, [r7, #4]
   2f088:	68db      	ldr	r3, [r3, #12]
   2f08a:	b29b      	uxth	r3, r3
   2f08c:	0a1b      	lsrs	r3, r3, #8
   2f08e:	b29b      	uxth	r3, r3
   2f090:	b2db      	uxtb	r3, r3
   2f092:	7013      	strb	r3, [r2, #0]
   2f094:	693b      	ldr	r3, [r7, #16]
   2f096:	331e      	adds	r3, #30
   2f098:	001a      	movs	r2, r3
   2f09a:	687b      	ldr	r3, [r7, #4]
   2f09c:	68db      	ldr	r3, [r3, #12]
   2f09e:	0c1b      	lsrs	r3, r3, #16
   2f0a0:	b2db      	uxtb	r3, r3
   2f0a2:	7013      	strb	r3, [r2, #0]
   2f0a4:	693b      	ldr	r3, [r7, #16]
   2f0a6:	331f      	adds	r3, #31
   2f0a8:	001a      	movs	r2, r3
   2f0aa:	687b      	ldr	r3, [r7, #4]
   2f0ac:	68db      	ldr	r3, [r3, #12]
   2f0ae:	0e1b      	lsrs	r3, r3, #24
   2f0b0:	b2db      	uxtb	r3, r3
   2f0b2:	7013      	strb	r3, [r2, #0]
				ST_CLUST(dir, fp->sclust);					/* Update start cluster */
   2f0b4:	693b      	ldr	r3, [r7, #16]
   2f0b6:	331a      	adds	r3, #26
   2f0b8:	001a      	movs	r2, r3
   2f0ba:	687b      	ldr	r3, [r7, #4]
   2f0bc:	691b      	ldr	r3, [r3, #16]
   2f0be:	b2db      	uxtb	r3, r3
   2f0c0:	7013      	strb	r3, [r2, #0]
   2f0c2:	693b      	ldr	r3, [r7, #16]
   2f0c4:	331b      	adds	r3, #27
   2f0c6:	001a      	movs	r2, r3
   2f0c8:	687b      	ldr	r3, [r7, #4]
   2f0ca:	691b      	ldr	r3, [r3, #16]
   2f0cc:	b29b      	uxth	r3, r3
   2f0ce:	0a1b      	lsrs	r3, r3, #8
   2f0d0:	b29b      	uxth	r3, r3
   2f0d2:	b2db      	uxtb	r3, r3
   2f0d4:	7013      	strb	r3, [r2, #0]
   2f0d6:	693b      	ldr	r3, [r7, #16]
   2f0d8:	3314      	adds	r3, #20
   2f0da:	001a      	movs	r2, r3
   2f0dc:	687b      	ldr	r3, [r7, #4]
   2f0de:	691b      	ldr	r3, [r3, #16]
   2f0e0:	0c1b      	lsrs	r3, r3, #16
   2f0e2:	b2db      	uxtb	r3, r3
   2f0e4:	7013      	strb	r3, [r2, #0]
   2f0e6:	693b      	ldr	r3, [r7, #16]
   2f0e8:	3315      	adds	r3, #21
   2f0ea:	001a      	movs	r2, r3
   2f0ec:	687b      	ldr	r3, [r7, #4]
   2f0ee:	691b      	ldr	r3, [r3, #16]
   2f0f0:	0c1b      	lsrs	r3, r3, #16
   2f0f2:	b29b      	uxth	r3, r3
   2f0f4:	0a1b      	lsrs	r3, r3, #8
   2f0f6:	b29b      	uxth	r3, r3
   2f0f8:	b2db      	uxtb	r3, r3
   2f0fa:	7013      	strb	r3, [r2, #0]
				tim = get_fattime();						/* Update updated time */
   2f0fc:	4b1d      	ldr	r3, [pc, #116]	; (2f174 <f_sync+0x178>)
   2f0fe:	4798      	blx	r3
   2f100:	0003      	movs	r3, r0
   2f102:	60fb      	str	r3, [r7, #12]
				ST_DWORD(dir+DIR_WrtTime, tim);
   2f104:	693b      	ldr	r3, [r7, #16]
   2f106:	3316      	adds	r3, #22
   2f108:	68fa      	ldr	r2, [r7, #12]
   2f10a:	b2d2      	uxtb	r2, r2
   2f10c:	701a      	strb	r2, [r3, #0]
   2f10e:	693b      	ldr	r3, [r7, #16]
   2f110:	3317      	adds	r3, #23
   2f112:	68fa      	ldr	r2, [r7, #12]
   2f114:	b292      	uxth	r2, r2
   2f116:	0a12      	lsrs	r2, r2, #8
   2f118:	b292      	uxth	r2, r2
   2f11a:	b2d2      	uxtb	r2, r2
   2f11c:	701a      	strb	r2, [r3, #0]
   2f11e:	693b      	ldr	r3, [r7, #16]
   2f120:	3318      	adds	r3, #24
   2f122:	68fa      	ldr	r2, [r7, #12]
   2f124:	0c12      	lsrs	r2, r2, #16
   2f126:	b2d2      	uxtb	r2, r2
   2f128:	701a      	strb	r2, [r3, #0]
   2f12a:	693b      	ldr	r3, [r7, #16]
   2f12c:	3319      	adds	r3, #25
   2f12e:	68fa      	ldr	r2, [r7, #12]
   2f130:	0e12      	lsrs	r2, r2, #24
   2f132:	b2d2      	uxtb	r2, r2
   2f134:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
   2f136:	687b      	ldr	r3, [r7, #4]
   2f138:	799b      	ldrb	r3, [r3, #6]
   2f13a:	2220      	movs	r2, #32
   2f13c:	4393      	bics	r3, r2
   2f13e:	b2da      	uxtb	r2, r3
   2f140:	687b      	ldr	r3, [r7, #4]
   2f142:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
   2f144:	687b      	ldr	r3, [r7, #4]
   2f146:	681b      	ldr	r3, [r3, #0]
   2f148:	2201      	movs	r2, #1
   2f14a:	711a      	strb	r2, [r3, #4]
				res = sync(fp->fs);
   2f14c:	687b      	ldr	r3, [r7, #4]
   2f14e:	681b      	ldr	r3, [r3, #0]
   2f150:	2217      	movs	r2, #23
   2f152:	18bc      	adds	r4, r7, r2
   2f154:	0018      	movs	r0, r3
   2f156:	4b08      	ldr	r3, [pc, #32]	; (2f178 <f_sync+0x17c>)
   2f158:	4798      	blx	r3
   2f15a:	0003      	movs	r3, r0
   2f15c:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
   2f15e:	2317      	movs	r3, #23
   2f160:	18fb      	adds	r3, r7, r3
   2f162:	781b      	ldrb	r3, [r3, #0]
}
   2f164:	0018      	movs	r0, r3
   2f166:	46bd      	mov	sp, r7
   2f168:	b007      	add	sp, #28
   2f16a:	bd90      	pop	{r4, r7, pc}
   2f16c:	0002e6d1 	.word	0x0002e6d1
   2f170:	0002c655 	.word	0x0002c655
   2f174:	0002c511 	.word	0x0002c511
   2f178:	0002c71d 	.word	0x0002c71d

0002f17c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
   2f17c:	b590      	push	{r4, r7, lr}
   2f17e:	b085      	sub	sp, #20
   2f180:	af00      	add	r7, sp, #0
   2f182:	6078      	str	r0, [r7, #4]
	res = validate(fs, fp->id);
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
	LEAVE_FF(fs, res);

#else
	res = f_sync(fp);		/* Flush cached data */
   2f184:	230f      	movs	r3, #15
   2f186:	18fc      	adds	r4, r7, r3
   2f188:	687b      	ldr	r3, [r7, #4]
   2f18a:	0018      	movs	r0, r3
   2f18c:	4b09      	ldr	r3, [pc, #36]	; (2f1b4 <f_close+0x38>)
   2f18e:	4798      	blx	r3
   2f190:	0003      	movs	r3, r0
   2f192:	7023      	strb	r3, [r4, #0]
#else
		res = dec_lock(fp->lockid);
#endif
	}
#endif
	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
   2f194:	230f      	movs	r3, #15
   2f196:	18fb      	adds	r3, r7, r3
   2f198:	781b      	ldrb	r3, [r3, #0]
   2f19a:	2b00      	cmp	r3, #0
   2f19c:	d102      	bne.n	2f1a4 <f_close+0x28>
   2f19e:	687b      	ldr	r3, [r7, #4]
   2f1a0:	2200      	movs	r2, #0
   2f1a2:	601a      	str	r2, [r3, #0]
	return res;
   2f1a4:	230f      	movs	r3, #15
   2f1a6:	18fb      	adds	r3, r7, r3
   2f1a8:	781b      	ldrb	r3, [r3, #0]
#endif
}
   2f1aa:	0018      	movs	r0, r3
   2f1ac:	46bd      	mov	sp, r7
   2f1ae:	b005      	add	sp, #20
   2f1b0:	bd90      	pop	{r4, r7, pc}
   2f1b2:	46c0      	nop			; (mov r8, r8)
   2f1b4:	0002effd 	.word	0x0002effd

0002f1b8 <ff_convert>:
   2f1b8:	b580      	push	{r7, lr}
   2f1ba:	b084      	sub	sp, #16
   2f1bc:	af00      	add	r7, sp, #0
   2f1be:	0002      	movs	r2, r0
   2f1c0:	6039      	str	r1, [r7, #0]
   2f1c2:	1dbb      	adds	r3, r7, #6
   2f1c4:	801a      	strh	r2, [r3, #0]
   2f1c6:	1dbb      	adds	r3, r7, #6
   2f1c8:	881b      	ldrh	r3, [r3, #0]
   2f1ca:	2b7f      	cmp	r3, #127	; 0x7f
   2f1cc:	d805      	bhi.n	2f1da <ff_convert+0x22>
   2f1ce:	230e      	movs	r3, #14
   2f1d0:	18fb      	adds	r3, r7, r3
   2f1d2:	1dba      	adds	r2, r7, #6
   2f1d4:	8812      	ldrh	r2, [r2, #0]
   2f1d6:	801a      	strh	r2, [r3, #0]
   2f1d8:	e03a      	b.n	2f250 <ff_convert+0x98>
   2f1da:	683b      	ldr	r3, [r7, #0]
   2f1dc:	2b00      	cmp	r3, #0
   2f1de:	d010      	beq.n	2f202 <ff_convert+0x4a>
   2f1e0:	1dbb      	adds	r3, r7, #6
   2f1e2:	881b      	ldrh	r3, [r3, #0]
   2f1e4:	2bff      	cmp	r3, #255	; 0xff
   2f1e6:	d807      	bhi.n	2f1f8 <ff_convert+0x40>
   2f1e8:	1dbb      	adds	r3, r7, #6
   2f1ea:	881b      	ldrh	r3, [r3, #0]
   2f1ec:	3b80      	subs	r3, #128	; 0x80
   2f1ee:	001a      	movs	r2, r3
   2f1f0:	4b1b      	ldr	r3, [pc, #108]	; (2f260 <ff_convert+0xa8>)
   2f1f2:	0052      	lsls	r2, r2, #1
   2f1f4:	5ad2      	ldrh	r2, [r2, r3]
   2f1f6:	e000      	b.n	2f1fa <ff_convert+0x42>
   2f1f8:	2200      	movs	r2, #0
   2f1fa:	230e      	movs	r3, #14
   2f1fc:	18fb      	adds	r3, r7, r3
   2f1fe:	801a      	strh	r2, [r3, #0]
   2f200:	e026      	b.n	2f250 <ff_convert+0x98>
   2f202:	230e      	movs	r3, #14
   2f204:	18fb      	adds	r3, r7, r3
   2f206:	2200      	movs	r2, #0
   2f208:	801a      	strh	r2, [r3, #0]
   2f20a:	e010      	b.n	2f22e <ff_convert+0x76>
   2f20c:	230e      	movs	r3, #14
   2f20e:	18fb      	adds	r3, r7, r3
   2f210:	881a      	ldrh	r2, [r3, #0]
   2f212:	4b13      	ldr	r3, [pc, #76]	; (2f260 <ff_convert+0xa8>)
   2f214:	0052      	lsls	r2, r2, #1
   2f216:	5ad3      	ldrh	r3, [r2, r3]
   2f218:	1dba      	adds	r2, r7, #6
   2f21a:	8812      	ldrh	r2, [r2, #0]
   2f21c:	429a      	cmp	r2, r3
   2f21e:	d00c      	beq.n	2f23a <ff_convert+0x82>
   2f220:	230e      	movs	r3, #14
   2f222:	18fb      	adds	r3, r7, r3
   2f224:	881a      	ldrh	r2, [r3, #0]
   2f226:	230e      	movs	r3, #14
   2f228:	18fb      	adds	r3, r7, r3
   2f22a:	3201      	adds	r2, #1
   2f22c:	801a      	strh	r2, [r3, #0]
   2f22e:	230e      	movs	r3, #14
   2f230:	18fb      	adds	r3, r7, r3
   2f232:	881b      	ldrh	r3, [r3, #0]
   2f234:	2b7f      	cmp	r3, #127	; 0x7f
   2f236:	d9e9      	bls.n	2f20c <ff_convert+0x54>
   2f238:	e000      	b.n	2f23c <ff_convert+0x84>
   2f23a:	46c0      	nop			; (mov r8, r8)
   2f23c:	230e      	movs	r3, #14
   2f23e:	18fb      	adds	r3, r7, r3
   2f240:	881b      	ldrh	r3, [r3, #0]
   2f242:	3380      	adds	r3, #128	; 0x80
   2f244:	b29a      	uxth	r2, r3
   2f246:	230e      	movs	r3, #14
   2f248:	18fb      	adds	r3, r7, r3
   2f24a:	21ff      	movs	r1, #255	; 0xff
   2f24c:	400a      	ands	r2, r1
   2f24e:	801a      	strh	r2, [r3, #0]
   2f250:	230e      	movs	r3, #14
   2f252:	18fb      	adds	r3, r7, r3
   2f254:	881b      	ldrh	r3, [r3, #0]
   2f256:	0018      	movs	r0, r3
   2f258:	46bd      	mov	sp, r7
   2f25a:	b004      	add	sp, #16
   2f25c:	bd80      	pop	{r7, pc}
   2f25e:	46c0      	nop			; (mov r8, r8)
   2f260:	0003a7a8 	.word	0x0003a7a8

0002f264 <ff_wtoupper>:
   2f264:	b580      	push	{r7, lr}
   2f266:	b084      	sub	sp, #16
   2f268:	af00      	add	r7, sp, #0
   2f26a:	0002      	movs	r2, r0
   2f26c:	1dbb      	adds	r3, r7, #6
   2f26e:	801a      	strh	r2, [r3, #0]
   2f270:	2300      	movs	r3, #0
   2f272:	60fb      	str	r3, [r7, #12]
   2f274:	e002      	b.n	2f27c <ff_wtoupper+0x18>
   2f276:	68fb      	ldr	r3, [r7, #12]
   2f278:	3301      	adds	r3, #1
   2f27a:	60fb      	str	r3, [r7, #12]
   2f27c:	4b0f      	ldr	r3, [pc, #60]	; (2f2bc <ff_wtoupper+0x58>)
   2f27e:	68fa      	ldr	r2, [r7, #12]
   2f280:	0052      	lsls	r2, r2, #1
   2f282:	5ad3      	ldrh	r3, [r2, r3]
   2f284:	2b00      	cmp	r3, #0
   2f286:	d007      	beq.n	2f298 <ff_wtoupper+0x34>
   2f288:	4b0c      	ldr	r3, [pc, #48]	; (2f2bc <ff_wtoupper+0x58>)
   2f28a:	68fa      	ldr	r2, [r7, #12]
   2f28c:	0052      	lsls	r2, r2, #1
   2f28e:	5ad3      	ldrh	r3, [r2, r3]
   2f290:	1dba      	adds	r2, r7, #6
   2f292:	8812      	ldrh	r2, [r2, #0]
   2f294:	429a      	cmp	r2, r3
   2f296:	d1ee      	bne.n	2f276 <ff_wtoupper+0x12>
   2f298:	4b08      	ldr	r3, [pc, #32]	; (2f2bc <ff_wtoupper+0x58>)
   2f29a:	68fa      	ldr	r2, [r7, #12]
   2f29c:	0052      	lsls	r2, r2, #1
   2f29e:	5ad3      	ldrh	r3, [r2, r3]
   2f2a0:	2b00      	cmp	r3, #0
   2f2a2:	d004      	beq.n	2f2ae <ff_wtoupper+0x4a>
   2f2a4:	4b06      	ldr	r3, [pc, #24]	; (2f2c0 <ff_wtoupper+0x5c>)
   2f2a6:	68fa      	ldr	r2, [r7, #12]
   2f2a8:	0052      	lsls	r2, r2, #1
   2f2aa:	5ad3      	ldrh	r3, [r2, r3]
   2f2ac:	e001      	b.n	2f2b2 <ff_wtoupper+0x4e>
   2f2ae:	1dbb      	adds	r3, r7, #6
   2f2b0:	881b      	ldrh	r3, [r3, #0]
   2f2b2:	0018      	movs	r0, r3
   2f2b4:	46bd      	mov	sp, r7
   2f2b6:	b004      	add	sp, #16
   2f2b8:	bd80      	pop	{r7, pc}
   2f2ba:	46c0      	nop			; (mov r8, r8)
   2f2bc:	0003a8a8 	.word	0x0003a8a8
   2f2c0:	0003aa88 	.word	0x0003aa88

0002f2c4 <NewMessageData>:
int cycle(MQTTClient* c, Timer* timer);
void MQTTRun(void* parm);
int waitfor(MQTTClient* c, int packet_type, Timer* timer);


static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
   2f2c4:	b580      	push	{r7, lr}
   2f2c6:	b084      	sub	sp, #16
   2f2c8:	af00      	add	r7, sp, #0
   2f2ca:	60f8      	str	r0, [r7, #12]
   2f2cc:	60b9      	str	r1, [r7, #8]
   2f2ce:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
   2f2d0:	68fb      	ldr	r3, [r7, #12]
   2f2d2:	68ba      	ldr	r2, [r7, #8]
   2f2d4:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
   2f2d6:	68fb      	ldr	r3, [r7, #12]
   2f2d8:	687a      	ldr	r2, [r7, #4]
   2f2da:	601a      	str	r2, [r3, #0]
}
   2f2dc:	46c0      	nop			; (mov r8, r8)
   2f2de:	46bd      	mov	sp, r7
   2f2e0:	b004      	add	sp, #16
   2f2e2:	bd80      	pop	{r7, pc}

0002f2e4 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
   2f2e4:	b580      	push	{r7, lr}
   2f2e6:	b082      	sub	sp, #8
   2f2e8:	af00      	add	r7, sp, #0
   2f2ea:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
   2f2ec:	687b      	ldr	r3, [r7, #4]
   2f2ee:	681b      	ldr	r3, [r3, #0]
   2f2f0:	4a07      	ldr	r2, [pc, #28]	; (2f310 <getNextPacketId+0x2c>)
   2f2f2:	4293      	cmp	r3, r2
   2f2f4:	d003      	beq.n	2f2fe <getNextPacketId+0x1a>
   2f2f6:	687b      	ldr	r3, [r7, #4]
   2f2f8:	681b      	ldr	r3, [r3, #0]
   2f2fa:	1c5a      	adds	r2, r3, #1
   2f2fc:	e000      	b.n	2f300 <getNextPacketId+0x1c>
   2f2fe:	2201      	movs	r2, #1
   2f300:	687b      	ldr	r3, [r7, #4]
   2f302:	601a      	str	r2, [r3, #0]
   2f304:	687b      	ldr	r3, [r7, #4]
   2f306:	681b      	ldr	r3, [r3, #0]
}
   2f308:	0018      	movs	r0, r3
   2f30a:	46bd      	mov	sp, r7
   2f30c:	b002      	add	sp, #8
   2f30e:	bd80      	pop	{r7, pc}
   2f310:	0000ffff 	.word	0x0000ffff

0002f314 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
   2f314:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f316:	b087      	sub	sp, #28
   2f318:	af00      	add	r7, sp, #0
   2f31a:	60f8      	str	r0, [r7, #12]
   2f31c:	60b9      	str	r1, [r7, #8]
   2f31e:	607a      	str	r2, [r7, #4]
    int rc = FAILURE, 
   2f320:	2301      	movs	r3, #1
   2f322:	425b      	negs	r3, r3
   2f324:	617b      	str	r3, [r7, #20]
        sent = 0;
   2f326:	2300      	movs	r3, #0
   2f328:	613b      	str	r3, [r7, #16]
    
    while (sent < length && !TimerIsExpired(timer))
   2f32a:	e01a      	b.n	2f362 <sendPacket+0x4e>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
   2f32c:	68fb      	ldr	r3, [r7, #12]
   2f32e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2f330:	68dc      	ldr	r4, [r3, #12]
   2f332:	68fb      	ldr	r3, [r7, #12]
   2f334:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2f336:	68fb      	ldr	r3, [r7, #12]
   2f338:	691a      	ldr	r2, [r3, #16]
   2f33a:	693b      	ldr	r3, [r7, #16]
   2f33c:	18d6      	adds	r6, r2, r3
   2f33e:	687b      	ldr	r3, [r7, #4]
   2f340:	0018      	movs	r0, r3
   2f342:	4b1a      	ldr	r3, [pc, #104]	; (2f3ac <sendPacket+0x98>)
   2f344:	4798      	blx	r3
   2f346:	0003      	movs	r3, r0
   2f348:	68ba      	ldr	r2, [r7, #8]
   2f34a:	0031      	movs	r1, r6
   2f34c:	0028      	movs	r0, r5
   2f34e:	47a0      	blx	r4
   2f350:	0003      	movs	r3, r0
   2f352:	617b      	str	r3, [r7, #20]
        if (rc < 0)  // there was an error writing the data
   2f354:	697b      	ldr	r3, [r7, #20]
   2f356:	2b00      	cmp	r3, #0
   2f358:	db0e      	blt.n	2f378 <sendPacket+0x64>
            break;
        sent += rc;
   2f35a:	693a      	ldr	r2, [r7, #16]
   2f35c:	697b      	ldr	r3, [r7, #20]
   2f35e:	18d3      	adds	r3, r2, r3
   2f360:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
   2f362:	693a      	ldr	r2, [r7, #16]
   2f364:	68bb      	ldr	r3, [r7, #8]
   2f366:	429a      	cmp	r2, r3
   2f368:	da07      	bge.n	2f37a <sendPacket+0x66>
   2f36a:	687b      	ldr	r3, [r7, #4]
   2f36c:	0018      	movs	r0, r3
   2f36e:	4b10      	ldr	r3, [pc, #64]	; (2f3b0 <sendPacket+0x9c>)
   2f370:	4798      	blx	r3
   2f372:	1e03      	subs	r3, r0, #0
   2f374:	d0da      	beq.n	2f32c <sendPacket+0x18>
   2f376:	e000      	b.n	2f37a <sendPacket+0x66>
            break;
   2f378:	46c0      	nop			; (mov r8, r8)
    }
    if (sent == length)
   2f37a:	693a      	ldr	r2, [r7, #16]
   2f37c:	68bb      	ldr	r3, [r7, #8]
   2f37e:	429a      	cmp	r2, r3
   2f380:	d10b      	bne.n	2f39a <sendPacket+0x86>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
   2f382:	68fb      	ldr	r3, [r7, #12]
   2f384:	3354      	adds	r3, #84	; 0x54
   2f386:	001a      	movs	r2, r3
   2f388:	68fb      	ldr	r3, [r7, #12]
   2f38a:	699b      	ldr	r3, [r3, #24]
   2f38c:	0019      	movs	r1, r3
   2f38e:	0010      	movs	r0, r2
   2f390:	4b08      	ldr	r3, [pc, #32]	; (2f3b4 <sendPacket+0xa0>)
   2f392:	4798      	blx	r3
        rc = SUCCESS;
   2f394:	2300      	movs	r3, #0
   2f396:	617b      	str	r3, [r7, #20]
   2f398:	e002      	b.n	2f3a0 <sendPacket+0x8c>
    }
    else
        rc = FAILURE;
   2f39a:	2301      	movs	r3, #1
   2f39c:	425b      	negs	r3, r3
   2f39e:	617b      	str	r3, [r7, #20]
    return rc;
   2f3a0:	697b      	ldr	r3, [r7, #20]
}
   2f3a2:	0018      	movs	r0, r3
   2f3a4:	46bd      	mov	sp, r7
   2f3a6:	b007      	add	sp, #28
   2f3a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f3aa:	46c0      	nop			; (mov r8, r8)
   2f3ac:	00030175 	.word	0x00030175
   2f3b0:	000300f9 	.word	0x000300f9
   2f3b4:	0003014d 	.word	0x0003014d

0002f3b8 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
   2f3b8:	b580      	push	{r7, lr}
   2f3ba:	b086      	sub	sp, #24
   2f3bc:	af00      	add	r7, sp, #0
   2f3be:	60f8      	str	r0, [r7, #12]
   2f3c0:	60b9      	str	r1, [r7, #8]
   2f3c2:	607a      	str	r2, [r7, #4]
   2f3c4:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
   2f3c6:	68fb      	ldr	r3, [r7, #12]
   2f3c8:	68ba      	ldr	r2, [r7, #8]
   2f3ca:	651a      	str	r2, [r3, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2f3cc:	2300      	movs	r3, #0
   2f3ce:	617b      	str	r3, [r7, #20]
   2f3d0:	e00a      	b.n	2f3e8 <MQTTClientInit+0x30>
        c->messageHandlers[i].topicFilter = 0;
   2f3d2:	68fa      	ldr	r2, [r7, #12]
   2f3d4:	697b      	ldr	r3, [r7, #20]
   2f3d6:	3304      	adds	r3, #4
   2f3d8:	00db      	lsls	r3, r3, #3
   2f3da:	18d3      	adds	r3, r2, r3
   2f3dc:	3304      	adds	r3, #4
   2f3de:	2200      	movs	r2, #0
   2f3e0:	601a      	str	r2, [r3, #0]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2f3e2:	697b      	ldr	r3, [r7, #20]
   2f3e4:	3301      	adds	r3, #1
   2f3e6:	617b      	str	r3, [r7, #20]
   2f3e8:	697b      	ldr	r3, [r7, #20]
   2f3ea:	2b04      	cmp	r3, #4
   2f3ec:	ddf1      	ble.n	2f3d2 <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
   2f3ee:	68fb      	ldr	r3, [r7, #12]
   2f3f0:	687a      	ldr	r2, [r7, #4]
   2f3f2:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
   2f3f4:	68fb      	ldr	r3, [r7, #12]
   2f3f6:	683a      	ldr	r2, [r7, #0]
   2f3f8:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
   2f3fa:	68fb      	ldr	r3, [r7, #12]
   2f3fc:	6a3a      	ldr	r2, [r7, #32]
   2f3fe:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
   2f400:	68fb      	ldr	r3, [r7, #12]
   2f402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   2f404:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
   2f406:	68fb      	ldr	r3, [r7, #12]
   2f408:	6aba      	ldr	r2, [r7, #40]	; 0x28
   2f40a:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
   2f40c:	68fb      	ldr	r3, [r7, #12]
   2f40e:	2200      	movs	r2, #0
   2f410:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
   2f412:	68fb      	ldr	r3, [r7, #12]
   2f414:	2200      	movs	r2, #0
   2f416:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
   2f418:	68fb      	ldr	r3, [r7, #12]
   2f41a:	2200      	movs	r2, #0
   2f41c:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
   2f41e:	68fb      	ldr	r3, [r7, #12]
   2f420:	2201      	movs	r2, #1
   2f422:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
   2f424:	68fb      	ldr	r3, [r7, #12]
   2f426:	3354      	adds	r3, #84	; 0x54
   2f428:	0018      	movs	r0, r3
   2f42a:	4b03      	ldr	r3, [pc, #12]	; (2f438 <MQTTClientInit+0x80>)
   2f42c:	4798      	blx	r3
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
   2f42e:	46c0      	nop			; (mov r8, r8)
   2f430:	46bd      	mov	sp, r7
   2f432:	b006      	add	sp, #24
   2f434:	bd80      	pop	{r7, pc}
   2f436:	46c0      	nop			; (mov r8, r8)
   2f438:	0003019d 	.word	0x0003019d

0002f43c <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
   2f43c:	b590      	push	{r4, r7, lr}
   2f43e:	b08b      	sub	sp, #44	; 0x2c
   2f440:	af00      	add	r7, sp, #0
   2f442:	60f8      	str	r0, [r7, #12]
   2f444:	60b9      	str	r1, [r7, #8]
   2f446:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
   2f448:	2301      	movs	r3, #1
   2f44a:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
   2f44c:	2300      	movs	r3, #0
   2f44e:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
   2f450:	2304      	movs	r3, #4
   2f452:	61fb      	str	r3, [r7, #28]

    *value = 0;
   2f454:	68bb      	ldr	r3, [r7, #8]
   2f456:	2200      	movs	r2, #0
   2f458:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
   2f45a:	2301      	movs	r3, #1
   2f45c:	425b      	negs	r3, r3
   2f45e:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   2f460:	6a3b      	ldr	r3, [r7, #32]
   2f462:	3301      	adds	r3, #1
   2f464:	623b      	str	r3, [r7, #32]
   2f466:	6a3a      	ldr	r2, [r7, #32]
   2f468:	69fb      	ldr	r3, [r7, #28]
   2f46a:	429a      	cmp	r2, r3
   2f46c:	dd03      	ble.n	2f476 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
   2f46e:	2301      	movs	r3, #1
   2f470:	425b      	negs	r3, r3
   2f472:	61bb      	str	r3, [r7, #24]
            goto exit;
   2f474:	e026      	b.n	2f4c4 <decodePacket+0x88>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
   2f476:	68fb      	ldr	r3, [r7, #12]
   2f478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2f47a:	689c      	ldr	r4, [r3, #8]
   2f47c:	68fb      	ldr	r3, [r7, #12]
   2f47e:	6d18      	ldr	r0, [r3, #80]	; 0x50
   2f480:	687b      	ldr	r3, [r7, #4]
   2f482:	2217      	movs	r2, #23
   2f484:	18b9      	adds	r1, r7, r2
   2f486:	2201      	movs	r2, #1
   2f488:	47a0      	blx	r4
   2f48a:	0003      	movs	r3, r0
   2f48c:	61bb      	str	r3, [r7, #24]
        if (rc != 1)
   2f48e:	69bb      	ldr	r3, [r7, #24]
   2f490:	2b01      	cmp	r3, #1
   2f492:	d116      	bne.n	2f4c2 <decodePacket+0x86>
            goto exit;
        *value += (i & 127) * multiplier;
   2f494:	68bb      	ldr	r3, [r7, #8]
   2f496:	681a      	ldr	r2, [r3, #0]
   2f498:	2317      	movs	r3, #23
   2f49a:	18fb      	adds	r3, r7, r3
   2f49c:	781b      	ldrb	r3, [r3, #0]
   2f49e:	0019      	movs	r1, r3
   2f4a0:	237f      	movs	r3, #127	; 0x7f
   2f4a2:	400b      	ands	r3, r1
   2f4a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
   2f4a6:	434b      	muls	r3, r1
   2f4a8:	18d2      	adds	r2, r2, r3
   2f4aa:	68bb      	ldr	r3, [r7, #8]
   2f4ac:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
   2f4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f4b0:	01db      	lsls	r3, r3, #7
   2f4b2:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
   2f4b4:	2317      	movs	r3, #23
   2f4b6:	18fb      	adds	r3, r7, r3
   2f4b8:	781b      	ldrb	r3, [r3, #0]
   2f4ba:	b25b      	sxtb	r3, r3
   2f4bc:	2b00      	cmp	r3, #0
   2f4be:	dbcc      	blt.n	2f45a <decodePacket+0x1e>
   2f4c0:	e000      	b.n	2f4c4 <decodePacket+0x88>
            goto exit;
   2f4c2:	46c0      	nop			; (mov r8, r8)
exit:
    return len;
   2f4c4:	6a3b      	ldr	r3, [r7, #32]
}
   2f4c6:	0018      	movs	r0, r3
   2f4c8:	46bd      	mov	sp, r7
   2f4ca:	b00b      	add	sp, #44	; 0x2c
   2f4cc:	bd90      	pop	{r4, r7, pc}
	...

0002f4d0 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
   2f4d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f4d2:	46c6      	mov	lr, r8
   2f4d4:	b500      	push	{lr}
   2f4d6:	b086      	sub	sp, #24
   2f4d8:	af00      	add	r7, sp, #0
   2f4da:	6078      	str	r0, [r7, #4]
   2f4dc:	6039      	str	r1, [r7, #0]
    int rc = FAILURE;
   2f4de:	2301      	movs	r3, #1
   2f4e0:	425b      	negs	r3, r3
   2f4e2:	617b      	str	r3, [r7, #20]
    MQTTHeader header = {0};
   2f4e4:	2300      	movs	r3, #0
   2f4e6:	60fb      	str	r3, [r7, #12]
    int len = 0;
   2f4e8:	2300      	movs	r3, #0
   2f4ea:	613b      	str	r3, [r7, #16]
    int rem_len = 0;
   2f4ec:	2300      	movs	r3, #0
   2f4ee:	60bb      	str	r3, [r7, #8]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1)
   2f4f0:	687b      	ldr	r3, [r7, #4]
   2f4f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2f4f4:	689c      	ldr	r4, [r3, #8]
   2f4f6:	687b      	ldr	r3, [r7, #4]
   2f4f8:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2f4fa:	687b      	ldr	r3, [r7, #4]
   2f4fc:	695e      	ldr	r6, [r3, #20]
   2f4fe:	683b      	ldr	r3, [r7, #0]
   2f500:	0018      	movs	r0, r3
   2f502:	4b2b      	ldr	r3, [pc, #172]	; (2f5b0 <readPacket+0xe0>)
   2f504:	4798      	blx	r3
   2f506:	0003      	movs	r3, r0
   2f508:	2201      	movs	r2, #1
   2f50a:	0031      	movs	r1, r6
   2f50c:	0028      	movs	r0, r5
   2f50e:	47a0      	blx	r4
   2f510:	0003      	movs	r3, r0
   2f512:	2b01      	cmp	r3, #1
   2f514:	d141      	bne.n	2f59a <readPacket+0xca>
        goto exit;

    len = 1;
   2f516:	2301      	movs	r3, #1
   2f518:	613b      	str	r3, [r7, #16]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
   2f51a:	683b      	ldr	r3, [r7, #0]
   2f51c:	0018      	movs	r0, r3
   2f51e:	4b24      	ldr	r3, [pc, #144]	; (2f5b0 <readPacket+0xe0>)
   2f520:	4798      	blx	r3
   2f522:	0002      	movs	r2, r0
   2f524:	2308      	movs	r3, #8
   2f526:	18f9      	adds	r1, r7, r3
   2f528:	687b      	ldr	r3, [r7, #4]
   2f52a:	0018      	movs	r0, r3
   2f52c:	4b21      	ldr	r3, [pc, #132]	; (2f5b4 <readPacket+0xe4>)
   2f52e:	4798      	blx	r3
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
   2f530:	687b      	ldr	r3, [r7, #4]
   2f532:	695b      	ldr	r3, [r3, #20]
   2f534:	3301      	adds	r3, #1
   2f536:	68ba      	ldr	r2, [r7, #8]
   2f538:	0011      	movs	r1, r2
   2f53a:	0018      	movs	r0, r3
   2f53c:	4b1e      	ldr	r3, [pc, #120]	; (2f5b8 <readPacket+0xe8>)
   2f53e:	4798      	blx	r3
   2f540:	0002      	movs	r2, r0
   2f542:	693b      	ldr	r3, [r7, #16]
   2f544:	189b      	adds	r3, r3, r2
   2f546:	613b      	str	r3, [r7, #16]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
   2f548:	68bb      	ldr	r3, [r7, #8]
   2f54a:	2b00      	cmp	r3, #0
   2f54c:	dd17      	ble.n	2f57e <readPacket+0xae>
   2f54e:	687b      	ldr	r3, [r7, #4]
   2f550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   2f552:	689c      	ldr	r4, [r3, #8]
   2f554:	687b      	ldr	r3, [r7, #4]
   2f556:	6d1d      	ldr	r5, [r3, #80]	; 0x50
   2f558:	687b      	ldr	r3, [r7, #4]
   2f55a:	695a      	ldr	r2, [r3, #20]
   2f55c:	693b      	ldr	r3, [r7, #16]
   2f55e:	18d6      	adds	r6, r2, r3
   2f560:	68bb      	ldr	r3, [r7, #8]
   2f562:	4698      	mov	r8, r3
   2f564:	683b      	ldr	r3, [r7, #0]
   2f566:	0018      	movs	r0, r3
   2f568:	4b11      	ldr	r3, [pc, #68]	; (2f5b0 <readPacket+0xe0>)
   2f56a:	4798      	blx	r3
   2f56c:	0003      	movs	r3, r0
   2f56e:	4642      	mov	r2, r8
   2f570:	0031      	movs	r1, r6
   2f572:	0028      	movs	r0, r5
   2f574:	47a0      	blx	r4
   2f576:	0002      	movs	r2, r0
   2f578:	68bb      	ldr	r3, [r7, #8]
   2f57a:	429a      	cmp	r2, r3
   2f57c:	d10f      	bne.n	2f59e <readPacket+0xce>
        goto exit;

    header.byte = c->readbuf[0];
   2f57e:	687b      	ldr	r3, [r7, #4]
   2f580:	695b      	ldr	r3, [r3, #20]
   2f582:	781a      	ldrb	r2, [r3, #0]
   2f584:	230c      	movs	r3, #12
   2f586:	18fb      	adds	r3, r7, r3
   2f588:	701a      	strb	r2, [r3, #0]
    rc = header.bits.type;
   2f58a:	230c      	movs	r3, #12
   2f58c:	18fb      	adds	r3, r7, r3
   2f58e:	781b      	ldrb	r3, [r3, #0]
   2f590:	061b      	lsls	r3, r3, #24
   2f592:	0f1b      	lsrs	r3, r3, #28
   2f594:	b2db      	uxtb	r3, r3
   2f596:	617b      	str	r3, [r7, #20]
   2f598:	e002      	b.n	2f5a0 <readPacket+0xd0>
        goto exit;
   2f59a:	46c0      	nop			; (mov r8, r8)
   2f59c:	e000      	b.n	2f5a0 <readPacket+0xd0>
        goto exit;
   2f59e:	46c0      	nop			; (mov r8, r8)
exit:
    return rc;
   2f5a0:	697b      	ldr	r3, [r7, #20]
}
   2f5a2:	0018      	movs	r0, r3
   2f5a4:	46bd      	mov	sp, r7
   2f5a6:	b006      	add	sp, #24
   2f5a8:	bc04      	pop	{r2}
   2f5aa:	4690      	mov	r8, r2
   2f5ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f5ae:	46c0      	nop			; (mov r8, r8)
   2f5b0:	00030175 	.word	0x00030175
   2f5b4:	0002f43d 	.word	0x0002f43d
   2f5b8:	00030f4d 	.word	0x00030f4d

0002f5bc <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
   2f5bc:	b580      	push	{r7, lr}
   2f5be:	b086      	sub	sp, #24
   2f5c0:	af00      	add	r7, sp, #0
   2f5c2:	6078      	str	r0, [r7, #4]
   2f5c4:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
   2f5c6:	687b      	ldr	r3, [r7, #4]
   2f5c8:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
   2f5ca:	683b      	ldr	r3, [r7, #0]
   2f5cc:	689b      	ldr	r3, [r3, #8]
   2f5ce:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
   2f5d0:	683b      	ldr	r3, [r7, #0]
   2f5d2:	685b      	ldr	r3, [r3, #4]
   2f5d4:	001a      	movs	r2, r3
   2f5d6:	693b      	ldr	r3, [r7, #16]
   2f5d8:	189b      	adds	r3, r3, r2
   2f5da:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
   2f5dc:	e039      	b.n	2f652 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
   2f5de:	693b      	ldr	r3, [r7, #16]
   2f5e0:	781b      	ldrb	r3, [r3, #0]
   2f5e2:	2b2f      	cmp	r3, #47	; 0x2f
   2f5e4:	d103      	bne.n	2f5ee <isTopicMatched+0x32>
   2f5e6:	697b      	ldr	r3, [r7, #20]
   2f5e8:	781b      	ldrb	r3, [r3, #0]
   2f5ea:	2b2f      	cmp	r3, #47	; 0x2f
   2f5ec:	d13a      	bne.n	2f664 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
   2f5ee:	697b      	ldr	r3, [r7, #20]
   2f5f0:	781b      	ldrb	r3, [r3, #0]
   2f5f2:	2b2b      	cmp	r3, #43	; 0x2b
   2f5f4:	d009      	beq.n	2f60a <isTopicMatched+0x4e>
   2f5f6:	697b      	ldr	r3, [r7, #20]
   2f5f8:	781b      	ldrb	r3, [r3, #0]
   2f5fa:	2b23      	cmp	r3, #35	; 0x23
   2f5fc:	d005      	beq.n	2f60a <isTopicMatched+0x4e>
   2f5fe:	697b      	ldr	r3, [r7, #20]
   2f600:	781a      	ldrb	r2, [r3, #0]
   2f602:	693b      	ldr	r3, [r7, #16]
   2f604:	781b      	ldrb	r3, [r3, #0]
   2f606:	429a      	cmp	r2, r3
   2f608:	d12e      	bne.n	2f668 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
   2f60a:	697b      	ldr	r3, [r7, #20]
   2f60c:	781b      	ldrb	r3, [r3, #0]
   2f60e:	2b2b      	cmp	r3, #43	; 0x2b
   2f610:	d112      	bne.n	2f638 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
   2f612:	693b      	ldr	r3, [r7, #16]
   2f614:	3301      	adds	r3, #1
   2f616:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2f618:	e005      	b.n	2f626 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
   2f61a:	693b      	ldr	r3, [r7, #16]
   2f61c:	3301      	adds	r3, #1
   2f61e:	613b      	str	r3, [r7, #16]
   2f620:	693b      	ldr	r3, [r7, #16]
   2f622:	3301      	adds	r3, #1
   2f624:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
   2f626:	68fa      	ldr	r2, [r7, #12]
   2f628:	68bb      	ldr	r3, [r7, #8]
   2f62a:	429a      	cmp	r2, r3
   2f62c:	d20b      	bcs.n	2f646 <isTopicMatched+0x8a>
   2f62e:	68fb      	ldr	r3, [r7, #12]
   2f630:	781b      	ldrb	r3, [r3, #0]
   2f632:	2b2f      	cmp	r3, #47	; 0x2f
   2f634:	d1f1      	bne.n	2f61a <isTopicMatched+0x5e>
   2f636:	e006      	b.n	2f646 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
   2f638:	697b      	ldr	r3, [r7, #20]
   2f63a:	781b      	ldrb	r3, [r3, #0]
   2f63c:	2b23      	cmp	r3, #35	; 0x23
   2f63e:	d102      	bne.n	2f646 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
   2f640:	68bb      	ldr	r3, [r7, #8]
   2f642:	3b01      	subs	r3, #1
   2f644:	613b      	str	r3, [r7, #16]
        curf++;
   2f646:	697b      	ldr	r3, [r7, #20]
   2f648:	3301      	adds	r3, #1
   2f64a:	617b      	str	r3, [r7, #20]
        curn++;
   2f64c:	693b      	ldr	r3, [r7, #16]
   2f64e:	3301      	adds	r3, #1
   2f650:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
   2f652:	697b      	ldr	r3, [r7, #20]
   2f654:	781b      	ldrb	r3, [r3, #0]
   2f656:	2b00      	cmp	r3, #0
   2f658:	d007      	beq.n	2f66a <isTopicMatched+0xae>
   2f65a:	693a      	ldr	r2, [r7, #16]
   2f65c:	68bb      	ldr	r3, [r7, #8]
   2f65e:	429a      	cmp	r2, r3
   2f660:	d3bd      	bcc.n	2f5de <isTopicMatched+0x22>
   2f662:	e002      	b.n	2f66a <isTopicMatched+0xae>
            break;
   2f664:	46c0      	nop			; (mov r8, r8)
   2f666:	e000      	b.n	2f66a <isTopicMatched+0xae>
            break;
   2f668:	46c0      	nop			; (mov r8, r8)
    };
    
    return (curn == curn_end) && (*curf == '\0');
   2f66a:	693a      	ldr	r2, [r7, #16]
   2f66c:	68bb      	ldr	r3, [r7, #8]
   2f66e:	429a      	cmp	r2, r3
   2f670:	d105      	bne.n	2f67e <isTopicMatched+0xc2>
   2f672:	697b      	ldr	r3, [r7, #20]
   2f674:	781b      	ldrb	r3, [r3, #0]
   2f676:	2b00      	cmp	r3, #0
   2f678:	d101      	bne.n	2f67e <isTopicMatched+0xc2>
   2f67a:	2301      	movs	r3, #1
   2f67c:	e000      	b.n	2f680 <isTopicMatched+0xc4>
   2f67e:	2300      	movs	r3, #0
   2f680:	b2db      	uxtb	r3, r3
}
   2f682:	0018      	movs	r0, r3
   2f684:	46bd      	mov	sp, r7
   2f686:	b006      	add	sp, #24
   2f688:	bd80      	pop	{r7, pc}
	...

0002f68c <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
   2f68c:	b580      	push	{r7, lr}
   2f68e:	b08a      	sub	sp, #40	; 0x28
   2f690:	af00      	add	r7, sp, #0
   2f692:	60f8      	str	r0, [r7, #12]
   2f694:	60b9      	str	r1, [r7, #8]
   2f696:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
   2f698:	2301      	movs	r3, #1
   2f69a:	425b      	negs	r3, r3
   2f69c:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2f69e:	2300      	movs	r3, #0
   2f6a0:	627b      	str	r3, [r7, #36]	; 0x24
   2f6a2:	e044      	b.n	2f72e <deliverMessage+0xa2>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2f6a4:	68fa      	ldr	r2, [r7, #12]
   2f6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f6a8:	3304      	adds	r3, #4
   2f6aa:	00db      	lsls	r3, r3, #3
   2f6ac:	18d3      	adds	r3, r2, r3
   2f6ae:	3304      	adds	r3, #4
   2f6b0:	681b      	ldr	r3, [r3, #0]
   2f6b2:	2b00      	cmp	r3, #0
   2f6b4:	d038      	beq.n	2f728 <deliverMessage+0x9c>
   2f6b6:	68fa      	ldr	r2, [r7, #12]
   2f6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f6ba:	3304      	adds	r3, #4
   2f6bc:	00db      	lsls	r3, r3, #3
   2f6be:	18d3      	adds	r3, r2, r3
   2f6c0:	3304      	adds	r3, #4
   2f6c2:	681a      	ldr	r2, [r3, #0]
   2f6c4:	68bb      	ldr	r3, [r7, #8]
   2f6c6:	0011      	movs	r1, r2
   2f6c8:	0018      	movs	r0, r3
   2f6ca:	4b28      	ldr	r3, [pc, #160]	; (2f76c <deliverMessage+0xe0>)
   2f6cc:	4798      	blx	r3
   2f6ce:	1e03      	subs	r3, r0, #0
   2f6d0:	d10d      	bne.n	2f6ee <deliverMessage+0x62>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
   2f6d2:	68fa      	ldr	r2, [r7, #12]
   2f6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f6d6:	3304      	adds	r3, #4
   2f6d8:	00db      	lsls	r3, r3, #3
   2f6da:	18d3      	adds	r3, r2, r3
   2f6dc:	3304      	adds	r3, #4
   2f6de:	681b      	ldr	r3, [r3, #0]
   2f6e0:	68ba      	ldr	r2, [r7, #8]
   2f6e2:	0011      	movs	r1, r2
   2f6e4:	0018      	movs	r0, r3
   2f6e6:	4b22      	ldr	r3, [pc, #136]	; (2f770 <deliverMessage+0xe4>)
   2f6e8:	4798      	blx	r3
   2f6ea:	1e03      	subs	r3, r0, #0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
   2f6ec:	d01c      	beq.n	2f728 <deliverMessage+0x9c>
        {
            if (c->messageHandlers[i].fp != NULL)
   2f6ee:	68fa      	ldr	r2, [r7, #12]
   2f6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f6f2:	3304      	adds	r3, #4
   2f6f4:	00db      	lsls	r3, r3, #3
   2f6f6:	18d3      	adds	r3, r2, r3
   2f6f8:	3308      	adds	r3, #8
   2f6fa:	681b      	ldr	r3, [r3, #0]
   2f6fc:	2b00      	cmp	r3, #0
   2f6fe:	d013      	beq.n	2f728 <deliverMessage+0x9c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
   2f700:	687a      	ldr	r2, [r7, #4]
   2f702:	68b9      	ldr	r1, [r7, #8]
   2f704:	2318      	movs	r3, #24
   2f706:	18fb      	adds	r3, r7, r3
   2f708:	0018      	movs	r0, r3
   2f70a:	4b1a      	ldr	r3, [pc, #104]	; (2f774 <deliverMessage+0xe8>)
   2f70c:	4798      	blx	r3
                c->messageHandlers[i].fp(&md);
   2f70e:	68fa      	ldr	r2, [r7, #12]
   2f710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f712:	3304      	adds	r3, #4
   2f714:	00db      	lsls	r3, r3, #3
   2f716:	18d3      	adds	r3, r2, r3
   2f718:	3308      	adds	r3, #8
   2f71a:	681b      	ldr	r3, [r3, #0]
   2f71c:	2218      	movs	r2, #24
   2f71e:	18ba      	adds	r2, r7, r2
   2f720:	0010      	movs	r0, r2
   2f722:	4798      	blx	r3
                rc = SUCCESS;
   2f724:	2300      	movs	r3, #0
   2f726:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2f728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f72a:	3301      	adds	r3, #1
   2f72c:	627b      	str	r3, [r7, #36]	; 0x24
   2f72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   2f730:	2b04      	cmp	r3, #4
   2f732:	ddb7      	ble.n	2f6a4 <deliverMessage+0x18>
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
   2f734:	6a3b      	ldr	r3, [r7, #32]
   2f736:	3301      	adds	r3, #1
   2f738:	d112      	bne.n	2f760 <deliverMessage+0xd4>
   2f73a:	68fb      	ldr	r3, [r7, #12]
   2f73c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f73e:	2b00      	cmp	r3, #0
   2f740:	d00e      	beq.n	2f760 <deliverMessage+0xd4>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
   2f742:	687a      	ldr	r2, [r7, #4]
   2f744:	68b9      	ldr	r1, [r7, #8]
   2f746:	2310      	movs	r3, #16
   2f748:	18fb      	adds	r3, r7, r3
   2f74a:	0018      	movs	r0, r3
   2f74c:	4b09      	ldr	r3, [pc, #36]	; (2f774 <deliverMessage+0xe8>)
   2f74e:	4798      	blx	r3
        c->defaultMessageHandler(&md);
   2f750:	68fb      	ldr	r3, [r7, #12]
   2f752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   2f754:	2210      	movs	r2, #16
   2f756:	18ba      	adds	r2, r7, r2
   2f758:	0010      	movs	r0, r2
   2f75a:	4798      	blx	r3
        rc = SUCCESS;
   2f75c:	2300      	movs	r3, #0
   2f75e:	623b      	str	r3, [r7, #32]
    }   
    
    return rc;
   2f760:	6a3b      	ldr	r3, [r7, #32]
}
   2f762:	0018      	movs	r0, r3
   2f764:	46bd      	mov	sp, r7
   2f766:	b00a      	add	sp, #40	; 0x28
   2f768:	bd80      	pop	{r7, pc}
   2f76a:	46c0      	nop			; (mov r8, r8)
   2f76c:	00031361 	.word	0x00031361
   2f770:	0002f5bd 	.word	0x0002f5bd
   2f774:	0002f2c5 	.word	0x0002f2c5

0002f778 <keepalive>:


int keepalive(MQTTClient* c)
{
   2f778:	b580      	push	{r7, lr}
   2f77a:	b088      	sub	sp, #32
   2f77c:	af00      	add	r7, sp, #0
   2f77e:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2f780:	2301      	movs	r3, #1
   2f782:	425b      	negs	r3, r3
   2f784:	61fb      	str	r3, [r7, #28]

    if (c->keepAliveInterval == 0)
   2f786:	687b      	ldr	r3, [r7, #4]
   2f788:	699b      	ldr	r3, [r3, #24]
   2f78a:	2b00      	cmp	r3, #0
   2f78c:	d102      	bne.n	2f794 <keepalive+0x1c>
    {
        rc = SUCCESS;
   2f78e:	2300      	movs	r3, #0
   2f790:	61fb      	str	r3, [r7, #28]
        goto exit;
   2f792:	e033      	b.n	2f7fc <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
   2f794:	687b      	ldr	r3, [r7, #4]
   2f796:	3354      	adds	r3, #84	; 0x54
   2f798:	0018      	movs	r0, r3
   2f79a:	4b1b      	ldr	r3, [pc, #108]	; (2f808 <keepalive+0x90>)
   2f79c:	4798      	blx	r3
   2f79e:	1e03      	subs	r3, r0, #0
   2f7a0:	d02c      	beq.n	2f7fc <keepalive+0x84>
    {
        if (!c->ping_outstanding)
   2f7a2:	687b      	ldr	r3, [r7, #4]
   2f7a4:	7f1b      	ldrb	r3, [r3, #28]
   2f7a6:	2b00      	cmp	r3, #0
   2f7a8:	d128      	bne.n	2f7fc <keepalive+0x84>
        {
            Timer timer;
            TimerInit(&timer);
   2f7aa:	230c      	movs	r3, #12
   2f7ac:	18fb      	adds	r3, r7, r3
   2f7ae:	0018      	movs	r0, r3
   2f7b0:	4b16      	ldr	r3, [pc, #88]	; (2f80c <keepalive+0x94>)
   2f7b2:	4798      	blx	r3
            TimerCountdownMS(&timer, 1000);
   2f7b4:	23fa      	movs	r3, #250	; 0xfa
   2f7b6:	009a      	lsls	r2, r3, #2
   2f7b8:	230c      	movs	r3, #12
   2f7ba:	18fb      	adds	r3, r7, r3
   2f7bc:	0011      	movs	r1, r2
   2f7be:	0018      	movs	r0, r3
   2f7c0:	4b13      	ldr	r3, [pc, #76]	; (2f810 <keepalive+0x98>)
   2f7c2:	4798      	blx	r3
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
   2f7c4:	687b      	ldr	r3, [r7, #4]
   2f7c6:	691a      	ldr	r2, [r3, #16]
   2f7c8:	687b      	ldr	r3, [r7, #4]
   2f7ca:	689b      	ldr	r3, [r3, #8]
   2f7cc:	0019      	movs	r1, r3
   2f7ce:	0010      	movs	r0, r2
   2f7d0:	4b10      	ldr	r3, [pc, #64]	; (2f814 <keepalive+0x9c>)
   2f7d2:	4798      	blx	r3
   2f7d4:	0003      	movs	r3, r0
   2f7d6:	61bb      	str	r3, [r7, #24]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
   2f7d8:	69bb      	ldr	r3, [r7, #24]
   2f7da:	2b00      	cmp	r3, #0
   2f7dc:	dd0e      	ble.n	2f7fc <keepalive+0x84>
   2f7de:	230c      	movs	r3, #12
   2f7e0:	18fa      	adds	r2, r7, r3
   2f7e2:	69b9      	ldr	r1, [r7, #24]
   2f7e4:	687b      	ldr	r3, [r7, #4]
   2f7e6:	0018      	movs	r0, r3
   2f7e8:	4b0b      	ldr	r3, [pc, #44]	; (2f818 <keepalive+0xa0>)
   2f7ea:	4798      	blx	r3
   2f7ec:	0003      	movs	r3, r0
   2f7ee:	61fb      	str	r3, [r7, #28]
   2f7f0:	69fb      	ldr	r3, [r7, #28]
   2f7f2:	2b00      	cmp	r3, #0
   2f7f4:	d102      	bne.n	2f7fc <keepalive+0x84>
                c->ping_outstanding = 1;
   2f7f6:	687b      	ldr	r3, [r7, #4]
   2f7f8:	2201      	movs	r2, #1
   2f7fa:	771a      	strb	r2, [r3, #28]
        }
    }

exit:
    return rc;
   2f7fc:	69fb      	ldr	r3, [r7, #28]
}
   2f7fe:	0018      	movs	r0, r3
   2f800:	46bd      	mov	sp, r7
   2f802:	b008      	add	sp, #32
   2f804:	bd80      	pop	{r7, pc}
   2f806:	46c0      	nop			; (mov r8, r8)
   2f808:	000300f9 	.word	0x000300f9
   2f80c:	0003019d 	.word	0x0003019d
   2f810:	00030125 	.word	0x00030125
   2f814:	00030d71 	.word	0x00030d71
   2f818:	0002f315 	.word	0x0002f315

0002f81c <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
   2f81c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2f81e:	b095      	sub	sp, #84	; 0x54
   2f820:	af06      	add	r7, sp, #24
   2f822:	6078      	str	r0, [r7, #4]
   2f824:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
   2f826:	683a      	ldr	r2, [r7, #0]
   2f828:	687b      	ldr	r3, [r7, #4]
   2f82a:	0011      	movs	r1, r2
   2f82c:	0018      	movs	r0, r3
   2f82e:	4b70      	ldr	r3, [pc, #448]	; (2f9f0 <cycle+0x1d4>)
   2f830:	4798      	blx	r3
   2f832:	0002      	movs	r2, r0
   2f834:	232e      	movs	r3, #46	; 0x2e
   2f836:	18fb      	adds	r3, r7, r3
   2f838:	801a      	strh	r2, [r3, #0]
    
    int len = 0,
   2f83a:	2300      	movs	r3, #0
   2f83c:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESS;
   2f83e:	2300      	movs	r3, #0
   2f840:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
   2f842:	232e      	movs	r3, #46	; 0x2e
   2f844:	18fb      	adds	r3, r7, r3
   2f846:	881b      	ldrh	r3, [r3, #0]
   2f848:	2b0d      	cmp	r3, #13
   2f84a:	d900      	bls.n	2f84e <cycle+0x32>
   2f84c:	e0bd      	b.n	2f9ca <cycle+0x1ae>
   2f84e:	009a      	lsls	r2, r3, #2
   2f850:	4b68      	ldr	r3, [pc, #416]	; (2f9f4 <cycle+0x1d8>)
   2f852:	18d3      	adds	r3, r2, r3
   2f854:	681b      	ldr	r3, [r3, #0]
   2f856:	469f      	mov	pc, r3
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2f858:	687b      	ldr	r3, [r7, #4]
   2f85a:	695a      	ldr	r2, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
   2f85c:	687b      	ldr	r3, [r7, #4]
   2f85e:	68db      	ldr	r3, [r3, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
   2f860:	001e      	movs	r6, r3
   2f862:	2310      	movs	r3, #16
   2f864:	18fb      	adds	r3, r7, r3
   2f866:	1d1d      	adds	r5, r3, #4
   2f868:	2310      	movs	r3, #16
   2f86a:	18fb      	adds	r3, r7, r3
   2f86c:	1c5c      	adds	r4, r3, #1
   2f86e:	230c      	movs	r3, #12
   2f870:	18f9      	adds	r1, r7, r3
   2f872:	2310      	movs	r3, #16
   2f874:	18fb      	adds	r3, r7, r3
   2f876:	1c98      	adds	r0, r3, #2
   2f878:	9604      	str	r6, [sp, #16]
   2f87a:	9203      	str	r2, [sp, #12]
   2f87c:	2310      	movs	r3, #16
   2f87e:	18fb      	adds	r3, r7, r3
   2f880:	330c      	adds	r3, #12
   2f882:	9302      	str	r3, [sp, #8]
   2f884:	2310      	movs	r3, #16
   2f886:	18fb      	adds	r3, r7, r3
   2f888:	3308      	adds	r3, #8
   2f88a:	9301      	str	r3, [sp, #4]
   2f88c:	2320      	movs	r3, #32
   2f88e:	18fb      	adds	r3, r7, r3
   2f890:	9300      	str	r3, [sp, #0]
   2f892:	002b      	movs	r3, r5
   2f894:	0022      	movs	r2, r4
   2f896:	4c58      	ldr	r4, [pc, #352]	; (2f9f8 <cycle+0x1dc>)
   2f898:	47a0      	blx	r4
   2f89a:	0003      	movs	r3, r0
   2f89c:	2b01      	cmp	r3, #1
   2f89e:	d000      	beq.n	2f8a2 <cycle+0x86>
   2f8a0:	e098      	b.n	2f9d4 <cycle+0x1b8>
                goto exit;
            msg.qos = (enum QoS)intQoS;
   2f8a2:	68fb      	ldr	r3, [r7, #12]
   2f8a4:	b2da      	uxtb	r2, r3
   2f8a6:	2310      	movs	r3, #16
   2f8a8:	18fb      	adds	r3, r7, r3
   2f8aa:	701a      	strb	r2, [r3, #0]
            deliverMessage(c, &topicName, &msg);
   2f8ac:	2310      	movs	r3, #16
   2f8ae:	18fa      	adds	r2, r7, r3
   2f8b0:	2320      	movs	r3, #32
   2f8b2:	18f9      	adds	r1, r7, r3
   2f8b4:	687b      	ldr	r3, [r7, #4]
   2f8b6:	0018      	movs	r0, r3
   2f8b8:	4b50      	ldr	r3, [pc, #320]	; (2f9fc <cycle+0x1e0>)
   2f8ba:	4798      	blx	r3
            if (msg.qos != QOS0)
   2f8bc:	2310      	movs	r3, #16
   2f8be:	18fb      	adds	r3, r7, r3
   2f8c0:	781b      	ldrb	r3, [r3, #0]
   2f8c2:	2b00      	cmp	r3, #0
   2f8c4:	d100      	bne.n	2f8c8 <cycle+0xac>
   2f8c6:	e07d      	b.n	2f9c4 <cycle+0x1a8>
            {
                if (msg.qos == QOS1)
   2f8c8:	2310      	movs	r3, #16
   2f8ca:	18fb      	adds	r3, r7, r3
   2f8cc:	781b      	ldrb	r3, [r3, #0]
   2f8ce:	2b01      	cmp	r3, #1
   2f8d0:	d10f      	bne.n	2f8f2 <cycle+0xd6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
   2f8d2:	687b      	ldr	r3, [r7, #4]
   2f8d4:	6918      	ldr	r0, [r3, #16]
   2f8d6:	687b      	ldr	r3, [r7, #4]
   2f8d8:	689b      	ldr	r3, [r3, #8]
   2f8da:	0019      	movs	r1, r3
   2f8dc:	2310      	movs	r3, #16
   2f8de:	18fb      	adds	r3, r7, r3
   2f8e0:	889b      	ldrh	r3, [r3, #4]
   2f8e2:	9300      	str	r3, [sp, #0]
   2f8e4:	2300      	movs	r3, #0
   2f8e6:	2204      	movs	r2, #4
   2f8e8:	4c45      	ldr	r4, [pc, #276]	; (2fa00 <cycle+0x1e4>)
   2f8ea:	47a0      	blx	r4
   2f8ec:	0003      	movs	r3, r0
   2f8ee:	637b      	str	r3, [r7, #52]	; 0x34
   2f8f0:	e013      	b.n	2f91a <cycle+0xfe>
                else if (msg.qos == QOS2)
   2f8f2:	2310      	movs	r3, #16
   2f8f4:	18fb      	adds	r3, r7, r3
   2f8f6:	781b      	ldrb	r3, [r3, #0]
   2f8f8:	2b02      	cmp	r3, #2
   2f8fa:	d10e      	bne.n	2f91a <cycle+0xfe>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
   2f8fc:	687b      	ldr	r3, [r7, #4]
   2f8fe:	6918      	ldr	r0, [r3, #16]
   2f900:	687b      	ldr	r3, [r7, #4]
   2f902:	689b      	ldr	r3, [r3, #8]
   2f904:	0019      	movs	r1, r3
   2f906:	2310      	movs	r3, #16
   2f908:	18fb      	adds	r3, r7, r3
   2f90a:	889b      	ldrh	r3, [r3, #4]
   2f90c:	9300      	str	r3, [sp, #0]
   2f90e:	2300      	movs	r3, #0
   2f910:	2205      	movs	r2, #5
   2f912:	4c3b      	ldr	r4, [pc, #236]	; (2fa00 <cycle+0x1e4>)
   2f914:	47a0      	blx	r4
   2f916:	0003      	movs	r3, r0
   2f918:	637b      	str	r3, [r7, #52]	; 0x34
                if (len <= 0)
   2f91a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2f91c:	2b00      	cmp	r3, #0
   2f91e:	dc03      	bgt.n	2f928 <cycle+0x10c>
                    rc = FAILURE;
   2f920:	2301      	movs	r3, #1
   2f922:	425b      	negs	r3, r3
   2f924:	633b      	str	r3, [r7, #48]	; 0x30
   2f926:	e007      	b.n	2f938 <cycle+0x11c>
                else
                    rc = sendPacket(c, len, timer);
   2f928:	683a      	ldr	r2, [r7, #0]
   2f92a:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2f92c:	687b      	ldr	r3, [r7, #4]
   2f92e:	0018      	movs	r0, r3
   2f930:	4b34      	ldr	r3, [pc, #208]	; (2fa04 <cycle+0x1e8>)
   2f932:	4798      	blx	r3
   2f934:	0003      	movs	r3, r0
   2f936:	633b      	str	r3, [r7, #48]	; 0x30
                if (rc == FAILURE)
   2f938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f93a:	3301      	adds	r3, #1
   2f93c:	d142      	bne.n	2f9c4 <cycle+0x1a8>
                    goto exit; // there was a problem
   2f93e:	46c0      	nop			; (mov r8, r8)
   2f940:	e049      	b.n	2f9d6 <cycle+0x1ba>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2f942:	687b      	ldr	r3, [r7, #4]
   2f944:	695c      	ldr	r4, [r3, #20]
   2f946:	687b      	ldr	r3, [r7, #4]
   2f948:	68db      	ldr	r3, [r3, #12]
   2f94a:	220a      	movs	r2, #10
   2f94c:	18ba      	adds	r2, r7, r2
   2f94e:	2109      	movs	r1, #9
   2f950:	1879      	adds	r1, r7, r1
   2f952:	2008      	movs	r0, #8
   2f954:	1838      	adds	r0, r7, r0
   2f956:	9300      	str	r3, [sp, #0]
   2f958:	0023      	movs	r3, r4
   2f95a:	4c2b      	ldr	r4, [pc, #172]	; (2fa08 <cycle+0x1ec>)
   2f95c:	47a0      	blx	r4
   2f95e:	0003      	movs	r3, r0
   2f960:	2b01      	cmp	r3, #1
   2f962:	d003      	beq.n	2f96c <cycle+0x150>
                rc = FAILURE;
   2f964:	2301      	movs	r3, #1
   2f966:	425b      	negs	r3, r3
   2f968:	633b      	str	r3, [r7, #48]	; 0x30
   2f96a:	e023      	b.n	2f9b4 <cycle+0x198>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
   2f96c:	687b      	ldr	r3, [r7, #4]
   2f96e:	6918      	ldr	r0, [r3, #16]
   2f970:	687b      	ldr	r3, [r7, #4]
   2f972:	689b      	ldr	r3, [r3, #8]
   2f974:	0019      	movs	r1, r3
   2f976:	230a      	movs	r3, #10
   2f978:	18fb      	adds	r3, r7, r3
   2f97a:	881b      	ldrh	r3, [r3, #0]
   2f97c:	9300      	str	r3, [sp, #0]
   2f97e:	2300      	movs	r3, #0
   2f980:	2206      	movs	r2, #6
   2f982:	4c1f      	ldr	r4, [pc, #124]	; (2fa00 <cycle+0x1e4>)
   2f984:	47a0      	blx	r4
   2f986:	0003      	movs	r3, r0
   2f988:	637b      	str	r3, [r7, #52]	; 0x34
   2f98a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2f98c:	2b00      	cmp	r3, #0
   2f98e:	dc03      	bgt.n	2f998 <cycle+0x17c>
                rc = FAILURE;
   2f990:	2301      	movs	r3, #1
   2f992:	425b      	negs	r3, r3
   2f994:	633b      	str	r3, [r7, #48]	; 0x30
   2f996:	e00d      	b.n	2f9b4 <cycle+0x198>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
   2f998:	683a      	ldr	r2, [r7, #0]
   2f99a:	6b79      	ldr	r1, [r7, #52]	; 0x34
   2f99c:	687b      	ldr	r3, [r7, #4]
   2f99e:	0018      	movs	r0, r3
   2f9a0:	4b18      	ldr	r3, [pc, #96]	; (2fa04 <cycle+0x1e8>)
   2f9a2:	4798      	blx	r3
   2f9a4:	0003      	movs	r3, r0
   2f9a6:	633b      	str	r3, [r7, #48]	; 0x30
   2f9a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f9aa:	2b00      	cmp	r3, #0
   2f9ac:	d002      	beq.n	2f9b4 <cycle+0x198>
                rc = FAILURE; // there was a problem
   2f9ae:	2301      	movs	r3, #1
   2f9b0:	425b      	negs	r3, r3
   2f9b2:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
   2f9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f9b6:	3301      	adds	r3, #1
   2f9b8:	d106      	bne.n	2f9c8 <cycle+0x1ac>
                goto exit; // there was a problem
   2f9ba:	e00c      	b.n	2f9d6 <cycle+0x1ba>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
   2f9bc:	687b      	ldr	r3, [r7, #4]
   2f9be:	2200      	movs	r2, #0
   2f9c0:	771a      	strb	r2, [r3, #28]
            break;
   2f9c2:	e002      	b.n	2f9ca <cycle+0x1ae>
            break;
   2f9c4:	46c0      	nop			; (mov r8, r8)
   2f9c6:	e000      	b.n	2f9ca <cycle+0x1ae>
            break;
   2f9c8:	46c0      	nop			; (mov r8, r8)
    }
    keepalive(c);
   2f9ca:	687b      	ldr	r3, [r7, #4]
   2f9cc:	0018      	movs	r0, r3
   2f9ce:	4b0f      	ldr	r3, [pc, #60]	; (2fa0c <cycle+0x1f0>)
   2f9d0:	4798      	blx	r3
   2f9d2:	e000      	b.n	2f9d6 <cycle+0x1ba>
                goto exit;
   2f9d4:	46c0      	nop			; (mov r8, r8)
exit:
    if (rc == SUCCESS)
   2f9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2f9d8:	2b00      	cmp	r3, #0
   2f9da:	d103      	bne.n	2f9e4 <cycle+0x1c8>
        rc = packet_type;
   2f9dc:	232e      	movs	r3, #46	; 0x2e
   2f9de:	18fb      	adds	r3, r7, r3
   2f9e0:	881b      	ldrh	r3, [r3, #0]
   2f9e2:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
   2f9e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
   2f9e6:	0018      	movs	r0, r3
   2f9e8:	46bd      	mov	sp, r7
   2f9ea:	b00f      	add	sp, #60	; 0x3c
   2f9ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2f9ee:	46c0      	nop			; (mov r8, r8)
   2f9f0:	0002f4d1 	.word	0x0002f4d1
   2f9f4:	0003ac68 	.word	0x0003ac68
   2f9f8:	00030d95 	.word	0x00030d95
   2f9fc:	0002f68d 	.word	0x0002f68d
   2fa00:	0003158d 	.word	0x0003158d
   2fa04:	0002f315 	.word	0x0002f315
   2fa08:	00030e99 	.word	0x00030e99
   2fa0c:	0002f779 	.word	0x0002f779

0002fa10 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
   2fa10:	b580      	push	{r7, lr}
   2fa12:	b086      	sub	sp, #24
   2fa14:	af00      	add	r7, sp, #0
   2fa16:	6078      	str	r0, [r7, #4]
   2fa18:	6039      	str	r1, [r7, #0]
    int rc = SUCCESS;
   2fa1a:	2300      	movs	r3, #0
   2fa1c:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
   2fa1e:	2308      	movs	r3, #8
   2fa20:	18fb      	adds	r3, r7, r3
   2fa22:	0018      	movs	r0, r3
   2fa24:	4b11      	ldr	r3, [pc, #68]	; (2fa6c <MQTTYield+0x5c>)
   2fa26:	4798      	blx	r3
    TimerCountdownMS(&timer, timeout_ms);
   2fa28:	683a      	ldr	r2, [r7, #0]
   2fa2a:	2308      	movs	r3, #8
   2fa2c:	18fb      	adds	r3, r7, r3
   2fa2e:	0011      	movs	r1, r2
   2fa30:	0018      	movs	r0, r3
   2fa32:	4b0f      	ldr	r3, [pc, #60]	; (2fa70 <MQTTYield+0x60>)
   2fa34:	4798      	blx	r3

	do
    {
        if (cycle(c, &timer) == FAILURE)
   2fa36:	2308      	movs	r3, #8
   2fa38:	18fa      	adds	r2, r7, r3
   2fa3a:	687b      	ldr	r3, [r7, #4]
   2fa3c:	0011      	movs	r1, r2
   2fa3e:	0018      	movs	r0, r3
   2fa40:	4b0c      	ldr	r3, [pc, #48]	; (2fa74 <MQTTYield+0x64>)
   2fa42:	4798      	blx	r3
   2fa44:	0003      	movs	r3, r0
   2fa46:	3301      	adds	r3, #1
   2fa48:	d103      	bne.n	2fa52 <MQTTYield+0x42>
        {
            rc = FAILURE;
   2fa4a:	2301      	movs	r3, #1
   2fa4c:	425b      	negs	r3, r3
   2fa4e:	617b      	str	r3, [r7, #20]
            break;
   2fa50:	e006      	b.n	2fa60 <MQTTYield+0x50>
        }
	} while (!TimerIsExpired(&timer));
   2fa52:	2308      	movs	r3, #8
   2fa54:	18fb      	adds	r3, r7, r3
   2fa56:	0018      	movs	r0, r3
   2fa58:	4b07      	ldr	r3, [pc, #28]	; (2fa78 <MQTTYield+0x68>)
   2fa5a:	4798      	blx	r3
   2fa5c:	1e03      	subs	r3, r0, #0
   2fa5e:	d0ea      	beq.n	2fa36 <MQTTYield+0x26>
        
    return rc;
   2fa60:	697b      	ldr	r3, [r7, #20]
}
   2fa62:	0018      	movs	r0, r3
   2fa64:	46bd      	mov	sp, r7
   2fa66:	b006      	add	sp, #24
   2fa68:	bd80      	pop	{r7, pc}
   2fa6a:	46c0      	nop			; (mov r8, r8)
   2fa6c:	0003019d 	.word	0x0003019d
   2fa70:	00030125 	.word	0x00030125
   2fa74:	0002f81d 	.word	0x0002f81d
   2fa78:	000300f9 	.word	0x000300f9

0002fa7c <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
   2fa7c:	b580      	push	{r7, lr}
   2fa7e:	b086      	sub	sp, #24
   2fa80:	af00      	add	r7, sp, #0
   2fa82:	60f8      	str	r0, [r7, #12]
   2fa84:	60b9      	str	r1, [r7, #8]
   2fa86:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2fa88:	2301      	movs	r3, #1
   2fa8a:	425b      	negs	r3, r3
   2fa8c:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
   2fa8e:	687b      	ldr	r3, [r7, #4]
   2fa90:	0018      	movs	r0, r3
   2fa92:	4b0b      	ldr	r3, [pc, #44]	; (2fac0 <waitfor+0x44>)
   2fa94:	4798      	blx	r3
   2fa96:	1e03      	subs	r3, r0, #0
   2fa98:	d10c      	bne.n	2fab4 <waitfor+0x38>
            break; // we timed out
    }
    while ((rc = cycle(c, timer)) != packet_type);  
   2fa9a:	687a      	ldr	r2, [r7, #4]
   2fa9c:	68fb      	ldr	r3, [r7, #12]
   2fa9e:	0011      	movs	r1, r2
   2faa0:	0018      	movs	r0, r3
   2faa2:	4b08      	ldr	r3, [pc, #32]	; (2fac4 <waitfor+0x48>)
   2faa4:	4798      	blx	r3
   2faa6:	0003      	movs	r3, r0
   2faa8:	617b      	str	r3, [r7, #20]
   2faaa:	697a      	ldr	r2, [r7, #20]
   2faac:	68bb      	ldr	r3, [r7, #8]
   2faae:	429a      	cmp	r2, r3
   2fab0:	d1ed      	bne.n	2fa8e <waitfor+0x12>
   2fab2:	e000      	b.n	2fab6 <waitfor+0x3a>
            break; // we timed out
   2fab4:	46c0      	nop			; (mov r8, r8)
    
    return rc;
   2fab6:	697b      	ldr	r3, [r7, #20]
}
   2fab8:	0018      	movs	r0, r3
   2faba:	46bd      	mov	sp, r7
   2fabc:	b006      	add	sp, #24
   2fabe:	bd80      	pop	{r7, pc}
   2fac0:	000300f9 	.word	0x000300f9
   2fac4:	0002f81d 	.word	0x0002f81d

0002fac8 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
   2fac8:	b590      	push	{r4, r7, lr}
   2faca:	b09f      	sub	sp, #124	; 0x7c
   2facc:	af00      	add	r7, sp, #0
   2face:	6078      	str	r0, [r7, #4]
   2fad0:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
   2fad2:	2301      	movs	r3, #1
   2fad4:	425b      	negs	r3, r3
   2fad6:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
   2fad8:	230c      	movs	r3, #12
   2fada:	18fa      	adds	r2, r7, r3
   2fadc:	4b41      	ldr	r3, [pc, #260]	; (2fbe4 <MQTTConnect+0x11c>)
   2fade:	0010      	movs	r0, r2
   2fae0:	0019      	movs	r1, r3
   2fae2:	2358      	movs	r3, #88	; 0x58
   2fae4:	001a      	movs	r2, r3
   2fae6:	4b40      	ldr	r3, [pc, #256]	; (2fbe8 <MQTTConnect+0x120>)
   2fae8:	4798      	blx	r3
    int len = 0;
   2faea:	2300      	movs	r3, #0
   2faec:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
   2faee:	687b      	ldr	r3, [r7, #4]
   2faf0:	6a1b      	ldr	r3, [r3, #32]
   2faf2:	2b00      	cmp	r3, #0
   2faf4:	d166      	bne.n	2fbc4 <MQTTConnect+0xfc>
		goto exit;
    
    TimerInit(&connect_timer);
   2faf6:	2364      	movs	r3, #100	; 0x64
   2faf8:	18fb      	adds	r3, r7, r3
   2fafa:	0018      	movs	r0, r3
   2fafc:	4b3b      	ldr	r3, [pc, #236]	; (2fbec <MQTTConnect+0x124>)
   2fafe:	4798      	blx	r3
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
   2fb00:	687b      	ldr	r3, [r7, #4]
   2fb02:	685a      	ldr	r2, [r3, #4]
   2fb04:	2364      	movs	r3, #100	; 0x64
   2fb06:	18fb      	adds	r3, r7, r3
   2fb08:	0011      	movs	r1, r2
   2fb0a:	0018      	movs	r0, r3
   2fb0c:	4b38      	ldr	r3, [pc, #224]	; (2fbf0 <MQTTConnect+0x128>)
   2fb0e:	4798      	blx	r3

    if (options == 0)
   2fb10:	683b      	ldr	r3, [r7, #0]
   2fb12:	2b00      	cmp	r3, #0
   2fb14:	d102      	bne.n	2fb1c <MQTTConnect+0x54>
        options = &default_options; /* set default options if none were supplied */
   2fb16:	230c      	movs	r3, #12
   2fb18:	18fb      	adds	r3, r7, r3
   2fb1a:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
   2fb1c:	683b      	ldr	r3, [r7, #0]
   2fb1e:	8b1b      	ldrh	r3, [r3, #24]
   2fb20:	001a      	movs	r2, r3
   2fb22:	687b      	ldr	r3, [r7, #4]
   2fb24:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
   2fb26:	687b      	ldr	r3, [r7, #4]
   2fb28:	3354      	adds	r3, #84	; 0x54
   2fb2a:	001a      	movs	r2, r3
   2fb2c:	687b      	ldr	r3, [r7, #4]
   2fb2e:	699b      	ldr	r3, [r3, #24]
   2fb30:	0019      	movs	r1, r3
   2fb32:	0010      	movs	r0, r2
   2fb34:	4b2f      	ldr	r3, [pc, #188]	; (2fbf4 <MQTTConnect+0x12c>)
   2fb36:	4798      	blx	r3
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
   2fb38:	687b      	ldr	r3, [r7, #4]
   2fb3a:	6918      	ldr	r0, [r3, #16]
   2fb3c:	687b      	ldr	r3, [r7, #4]
   2fb3e:	689b      	ldr	r3, [r3, #8]
   2fb40:	0019      	movs	r1, r3
   2fb42:	683b      	ldr	r3, [r7, #0]
   2fb44:	001a      	movs	r2, r3
   2fb46:	4b2c      	ldr	r3, [pc, #176]	; (2fbf8 <MQTTConnect+0x130>)
   2fb48:	4798      	blx	r3
   2fb4a:	0003      	movs	r3, r0
   2fb4c:	673b      	str	r3, [r7, #112]	; 0x70
   2fb4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   2fb50:	2b00      	cmp	r3, #0
   2fb52:	dd39      	ble.n	2fbc8 <MQTTConnect+0x100>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
   2fb54:	2364      	movs	r3, #100	; 0x64
   2fb56:	18fa      	adds	r2, r7, r3
   2fb58:	6f39      	ldr	r1, [r7, #112]	; 0x70
   2fb5a:	687b      	ldr	r3, [r7, #4]
   2fb5c:	0018      	movs	r0, r3
   2fb5e:	4b27      	ldr	r3, [pc, #156]	; (2fbfc <MQTTConnect+0x134>)
   2fb60:	4798      	blx	r3
   2fb62:	0003      	movs	r3, r0
   2fb64:	677b      	str	r3, [r7, #116]	; 0x74
   2fb66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2fb68:	2b00      	cmp	r3, #0
   2fb6a:	d12f      	bne.n	2fbcc <MQTTConnect+0x104>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
   2fb6c:	2364      	movs	r3, #100	; 0x64
   2fb6e:	18fa      	adds	r2, r7, r3
   2fb70:	687b      	ldr	r3, [r7, #4]
   2fb72:	2102      	movs	r1, #2
   2fb74:	0018      	movs	r0, r3
   2fb76:	4b22      	ldr	r3, [pc, #136]	; (2fc00 <MQTTConnect+0x138>)
   2fb78:	4798      	blx	r3
   2fb7a:	0003      	movs	r3, r0
   2fb7c:	2b02      	cmp	r3, #2
   2fb7e:	d11d      	bne.n	2fbbc <MQTTConnect+0xf4>
    {
        unsigned char connack_rc = 255;
   2fb80:	230b      	movs	r3, #11
   2fb82:	18fb      	adds	r3, r7, r3
   2fb84:	22ff      	movs	r2, #255	; 0xff
   2fb86:	701a      	strb	r2, [r3, #0]
        unsigned char sessionPresent = 0;
   2fb88:	230a      	movs	r3, #10
   2fb8a:	18fb      	adds	r3, r7, r3
   2fb8c:	2200      	movs	r2, #0
   2fb8e:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
   2fb90:	687b      	ldr	r3, [r7, #4]
   2fb92:	695a      	ldr	r2, [r3, #20]
   2fb94:	687b      	ldr	r3, [r7, #4]
   2fb96:	68db      	ldr	r3, [r3, #12]
   2fb98:	210b      	movs	r1, #11
   2fb9a:	1879      	adds	r1, r7, r1
   2fb9c:	200a      	movs	r0, #10
   2fb9e:	1838      	adds	r0, r7, r0
   2fba0:	4c18      	ldr	r4, [pc, #96]	; (2fc04 <MQTTConnect+0x13c>)
   2fba2:	47a0      	blx	r4
   2fba4:	0003      	movs	r3, r0
   2fba6:	2b01      	cmp	r3, #1
   2fba8:	d104      	bne.n	2fbb4 <MQTTConnect+0xec>
            rc = connack_rc;
   2fbaa:	230b      	movs	r3, #11
   2fbac:	18fb      	adds	r3, r7, r3
   2fbae:	781b      	ldrb	r3, [r3, #0]
   2fbb0:	677b      	str	r3, [r7, #116]	; 0x74
   2fbb2:	e00c      	b.n	2fbce <MQTTConnect+0x106>
        else
            rc = FAILURE;
   2fbb4:	2301      	movs	r3, #1
   2fbb6:	425b      	negs	r3, r3
   2fbb8:	677b      	str	r3, [r7, #116]	; 0x74
   2fbba:	e008      	b.n	2fbce <MQTTConnect+0x106>
    }
    else
        rc = FAILURE;
   2fbbc:	2301      	movs	r3, #1
   2fbbe:	425b      	negs	r3, r3
   2fbc0:	677b      	str	r3, [r7, #116]	; 0x74
   2fbc2:	e004      	b.n	2fbce <MQTTConnect+0x106>
		goto exit;
   2fbc4:	46c0      	nop			; (mov r8, r8)
   2fbc6:	e002      	b.n	2fbce <MQTTConnect+0x106>
        goto exit;
   2fbc8:	46c0      	nop			; (mov r8, r8)
   2fbca:	e000      	b.n	2fbce <MQTTConnect+0x106>
        goto exit; // there was a problem
   2fbcc:	46c0      	nop			; (mov r8, r8)
    
exit:
    if (rc == SUCCESS)
   2fbce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   2fbd0:	2b00      	cmp	r3, #0
   2fbd2:	d102      	bne.n	2fbda <MQTTConnect+0x112>
        c->isconnected = 1;
   2fbd4:	687b      	ldr	r3, [r7, #4]
   2fbd6:	2201      	movs	r2, #1
   2fbd8:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
   2fbda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
   2fbdc:	0018      	movs	r0, r3
   2fbde:	46bd      	mov	sp, r7
   2fbe0:	b01f      	add	sp, #124	; 0x7c
   2fbe2:	bd90      	pop	{r4, r7, pc}
   2fbe4:	0003aca0 	.word	0x0003aca0
   2fbe8:	000357f9 	.word	0x000357f9
   2fbec:	0003019d 	.word	0x0003019d
   2fbf0:	00030125 	.word	0x00030125
   2fbf4:	0003014d 	.word	0x0003014d
   2fbf8:	00030979 	.word	0x00030979
   2fbfc:	0002f315 	.word	0x0002f315
   2fc00:	0002fa7d 	.word	0x0002fa7d
   2fc04:	00030bf5 	.word	0x00030bf5

0002fc08 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler msgHandler)
{ 
   2fc08:	b5b0      	push	{r4, r5, r7, lr}
   2fc0a:	b096      	sub	sp, #88	; 0x58
   2fc0c:	af04      	add	r7, sp, #16
   2fc0e:	60f8      	str	r0, [r7, #12]
   2fc10:	60b9      	str	r1, [r7, #8]
   2fc12:	603b      	str	r3, [r7, #0]
   2fc14:	1dfb      	adds	r3, r7, #7
   2fc16:	701a      	strb	r2, [r3, #0]
    int rc = FAILURE;  
   2fc18:	2301      	movs	r3, #1
   2fc1a:	425b      	negs	r3, r3
   2fc1c:	647b      	str	r3, [r7, #68]	; 0x44
    Timer timer;
    int len = 0;
   2fc1e:	2300      	movs	r3, #0
   2fc20:	63fb      	str	r3, [r7, #60]	; 0x3c
    MQTTString topic = MQTTString_initializer;
   2fc22:	2324      	movs	r3, #36	; 0x24
   2fc24:	18fb      	adds	r3, r7, r3
   2fc26:	2200      	movs	r2, #0
   2fc28:	601a      	str	r2, [r3, #0]
   2fc2a:	2324      	movs	r3, #36	; 0x24
   2fc2c:	18fb      	adds	r3, r7, r3
   2fc2e:	2200      	movs	r2, #0
   2fc30:	605a      	str	r2, [r3, #4]
   2fc32:	2324      	movs	r3, #36	; 0x24
   2fc34:	18fb      	adds	r3, r7, r3
   2fc36:	2200      	movs	r2, #0
   2fc38:	609a      	str	r2, [r3, #8]
	int Qoss = (int) qos;
   2fc3a:	1dfb      	adds	r3, r7, #7
   2fc3c:	781b      	ldrb	r3, [r3, #0]
   2fc3e:	623b      	str	r3, [r7, #32]
    topic.cstring = (char *)topicFilter;
   2fc40:	2324      	movs	r3, #36	; 0x24
   2fc42:	18fb      	adds	r3, r7, r3
   2fc44:	68ba      	ldr	r2, [r7, #8]
   2fc46:	601a      	str	r2, [r3, #0]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2fc48:	68fb      	ldr	r3, [r7, #12]
   2fc4a:	6a1b      	ldr	r3, [r3, #32]
   2fc4c:	2b00      	cmp	r3, #0
   2fc4e:	d100      	bne.n	2fc52 <MQTTSubscribe+0x4a>
   2fc50:	e088      	b.n	2fd64 <MQTTSubscribe+0x15c>
		goto exit;

    TimerInit(&timer);
   2fc52:	2330      	movs	r3, #48	; 0x30
   2fc54:	18fb      	adds	r3, r7, r3
   2fc56:	0018      	movs	r0, r3
   2fc58:	4b47      	ldr	r3, [pc, #284]	; (2fd78 <MQTTSubscribe+0x170>)
   2fc5a:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2fc5c:	68fb      	ldr	r3, [r7, #12]
   2fc5e:	685a      	ldr	r2, [r3, #4]
   2fc60:	2330      	movs	r3, #48	; 0x30
   2fc62:	18fb      	adds	r3, r7, r3
   2fc64:	0011      	movs	r1, r2
   2fc66:	0018      	movs	r0, r3
   2fc68:	4b44      	ldr	r3, [pc, #272]	; (2fd7c <MQTTSubscribe+0x174>)
   2fc6a:	4798      	blx	r3
    
	len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&Qoss);
   2fc6c:	68fb      	ldr	r3, [r7, #12]
   2fc6e:	691c      	ldr	r4, [r3, #16]
   2fc70:	68fb      	ldr	r3, [r7, #12]
   2fc72:	689b      	ldr	r3, [r3, #8]
   2fc74:	001d      	movs	r5, r3
   2fc76:	68fb      	ldr	r3, [r7, #12]
   2fc78:	0018      	movs	r0, r3
   2fc7a:	4b41      	ldr	r3, [pc, #260]	; (2fd80 <MQTTSubscribe+0x178>)
   2fc7c:	4798      	blx	r3
   2fc7e:	0003      	movs	r3, r0
   2fc80:	b29a      	uxth	r2, r3
   2fc82:	2320      	movs	r3, #32
   2fc84:	18fb      	adds	r3, r7, r3
   2fc86:	9302      	str	r3, [sp, #8]
   2fc88:	2324      	movs	r3, #36	; 0x24
   2fc8a:	18fb      	adds	r3, r7, r3
   2fc8c:	9301      	str	r3, [sp, #4]
   2fc8e:	2301      	movs	r3, #1
   2fc90:	9300      	str	r3, [sp, #0]
   2fc92:	0013      	movs	r3, r2
   2fc94:	2200      	movs	r2, #0
   2fc96:	0029      	movs	r1, r5
   2fc98:	0020      	movs	r0, r4
   2fc9a:	4c3a      	ldr	r4, [pc, #232]	; (2fd84 <MQTTSubscribe+0x17c>)
   2fc9c:	47a0      	blx	r4
   2fc9e:	0003      	movs	r3, r0
   2fca0:	63fb      	str	r3, [r7, #60]	; 0x3c
 //   len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, qos);
    if (len <= 0)
   2fca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   2fca4:	2b00      	cmp	r3, #0
   2fca6:	dd5f      	ble.n	2fd68 <MQTTSubscribe+0x160>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2fca8:	2330      	movs	r3, #48	; 0x30
   2fcaa:	18fa      	adds	r2, r7, r3
   2fcac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   2fcae:	68fb      	ldr	r3, [r7, #12]
   2fcb0:	0018      	movs	r0, r3
   2fcb2:	4b35      	ldr	r3, [pc, #212]	; (2fd88 <MQTTSubscribe+0x180>)
   2fcb4:	4798      	blx	r3
   2fcb6:	0003      	movs	r3, r0
   2fcb8:	647b      	str	r3, [r7, #68]	; 0x44
   2fcba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2fcbc:	2b00      	cmp	r3, #0
   2fcbe:	d155      	bne.n	2fd6c <MQTTSubscribe+0x164>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
   2fcc0:	2330      	movs	r3, #48	; 0x30
   2fcc2:	18fa      	adds	r2, r7, r3
   2fcc4:	68fb      	ldr	r3, [r7, #12]
   2fcc6:	2109      	movs	r1, #9
   2fcc8:	0018      	movs	r0, r3
   2fcca:	4b30      	ldr	r3, [pc, #192]	; (2fd8c <MQTTSubscribe+0x184>)
   2fccc:	4798      	blx	r3
   2fcce:	0003      	movs	r3, r0
   2fcd0:	2b09      	cmp	r3, #9
   2fcd2:	d143      	bne.n	2fd5c <MQTTSubscribe+0x154>
    {
        int count = 0, grantedQoS = -1;
   2fcd4:	2300      	movs	r3, #0
   2fcd6:	61fb      	str	r3, [r7, #28]
   2fcd8:	2301      	movs	r3, #1
   2fcda:	425b      	negs	r3, r3
   2fcdc:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
   2fcde:	68fb      	ldr	r3, [r7, #12]
   2fce0:	695a      	ldr	r2, [r3, #20]
   2fce2:	68fb      	ldr	r3, [r7, #12]
   2fce4:	68db      	ldr	r3, [r3, #12]
   2fce6:	001c      	movs	r4, r3
   2fce8:	2318      	movs	r3, #24
   2fcea:	18fb      	adds	r3, r7, r3
   2fcec:	211c      	movs	r1, #28
   2fcee:	1879      	adds	r1, r7, r1
   2fcf0:	2016      	movs	r0, #22
   2fcf2:	1838      	adds	r0, r7, r0
   2fcf4:	9401      	str	r4, [sp, #4]
   2fcf6:	9200      	str	r2, [sp, #0]
   2fcf8:	000a      	movs	r2, r1
   2fcfa:	2101      	movs	r1, #1
   2fcfc:	4c24      	ldr	r4, [pc, #144]	; (2fd90 <MQTTSubscribe+0x188>)
   2fcfe:	47a0      	blx	r4
   2fd00:	0003      	movs	r3, r0
   2fd02:	2b01      	cmp	r3, #1
   2fd04:	d101      	bne.n	2fd0a <MQTTSubscribe+0x102>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
   2fd06:	69bb      	ldr	r3, [r7, #24]
   2fd08:	647b      	str	r3, [r7, #68]	; 0x44
        if (rc != 0x80)
   2fd0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   2fd0c:	2b80      	cmp	r3, #128	; 0x80
   2fd0e:	d02e      	beq.n	2fd6e <MQTTSubscribe+0x166>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2fd10:	2300      	movs	r3, #0
   2fd12:	643b      	str	r3, [r7, #64]	; 0x40
   2fd14:	e01e      	b.n	2fd54 <MQTTSubscribe+0x14c>
            {
                if (c->messageHandlers[i].topicFilter == 0)
   2fd16:	68fa      	ldr	r2, [r7, #12]
   2fd18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2fd1a:	3304      	adds	r3, #4
   2fd1c:	00db      	lsls	r3, r3, #3
   2fd1e:	18d3      	adds	r3, r2, r3
   2fd20:	3304      	adds	r3, #4
   2fd22:	681b      	ldr	r3, [r3, #0]
   2fd24:	2b00      	cmp	r3, #0
   2fd26:	d112      	bne.n	2fd4e <MQTTSubscribe+0x146>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
   2fd28:	68fa      	ldr	r2, [r7, #12]
   2fd2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2fd2c:	3304      	adds	r3, #4
   2fd2e:	00db      	lsls	r3, r3, #3
   2fd30:	18d3      	adds	r3, r2, r3
   2fd32:	3304      	adds	r3, #4
   2fd34:	68ba      	ldr	r2, [r7, #8]
   2fd36:	601a      	str	r2, [r3, #0]
                    c->messageHandlers[i].fp = msgHandler;
   2fd38:	68fa      	ldr	r2, [r7, #12]
   2fd3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2fd3c:	3304      	adds	r3, #4
   2fd3e:	00db      	lsls	r3, r3, #3
   2fd40:	18d3      	adds	r3, r2, r3
   2fd42:	3308      	adds	r3, #8
   2fd44:	683a      	ldr	r2, [r7, #0]
   2fd46:	601a      	str	r2, [r3, #0]
                    rc = 0;
   2fd48:	2300      	movs	r3, #0
   2fd4a:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
   2fd4c:	e00f      	b.n	2fd6e <MQTTSubscribe+0x166>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
   2fd4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2fd50:	3301      	adds	r3, #1
   2fd52:	643b      	str	r3, [r7, #64]	; 0x40
   2fd54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   2fd56:	2b04      	cmp	r3, #4
   2fd58:	dddd      	ble.n	2fd16 <MQTTSubscribe+0x10e>
   2fd5a:	e008      	b.n	2fd6e <MQTTSubscribe+0x166>
                }
            }
        }
    }
    else 
        rc = FAILURE;
   2fd5c:	2301      	movs	r3, #1
   2fd5e:	425b      	negs	r3, r3
   2fd60:	647b      	str	r3, [r7, #68]	; 0x44
   2fd62:	e004      	b.n	2fd6e <MQTTSubscribe+0x166>
		goto exit;
   2fd64:	46c0      	nop			; (mov r8, r8)
   2fd66:	e002      	b.n	2fd6e <MQTTSubscribe+0x166>
        goto exit;
   2fd68:	46c0      	nop			; (mov r8, r8)
   2fd6a:	e000      	b.n	2fd6e <MQTTSubscribe+0x166>
        goto exit;             // there was a problem
   2fd6c:	46c0      	nop			; (mov r8, r8)
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2fd6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
   2fd70:	0018      	movs	r0, r3
   2fd72:	46bd      	mov	sp, r7
   2fd74:	b012      	add	sp, #72	; 0x48
   2fd76:	bdb0      	pop	{r4, r5, r7, pc}
   2fd78:	0003019d 	.word	0x0003019d
   2fd7c:	00030125 	.word	0x00030125
   2fd80:	0002f2e5 	.word	0x0002f2e5
   2fd84:	000316d5 	.word	0x000316d5
   2fd88:	0002f315 	.word	0x0002f315
   2fd8c:	0002fa7d 	.word	0x0002fa7d
   2fd90:	00031825 	.word	0x00031825

0002fd94 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
   2fd94:	b5f0      	push	{r4, r5, r6, r7, lr}
   2fd96:	46ce      	mov	lr, r9
   2fd98:	4647      	mov	r7, r8
   2fd9a:	b580      	push	{r7, lr}
   2fd9c:	b097      	sub	sp, #92	; 0x5c
   2fd9e:	af08      	add	r7, sp, #32
   2fda0:	60f8      	str	r0, [r7, #12]
   2fda2:	60b9      	str	r1, [r7, #8]
   2fda4:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
   2fda6:	2301      	movs	r3, #1
   2fda8:	425b      	negs	r3, r3
   2fdaa:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;   
    MQTTString topic = MQTTString_initializer;
   2fdac:	2318      	movs	r3, #24
   2fdae:	18fb      	adds	r3, r7, r3
   2fdb0:	2200      	movs	r2, #0
   2fdb2:	601a      	str	r2, [r3, #0]
   2fdb4:	2318      	movs	r3, #24
   2fdb6:	18fb      	adds	r3, r7, r3
   2fdb8:	2200      	movs	r2, #0
   2fdba:	605a      	str	r2, [r3, #4]
   2fdbc:	2318      	movs	r3, #24
   2fdbe:	18fb      	adds	r3, r7, r3
   2fdc0:	2200      	movs	r2, #0
   2fdc2:	609a      	str	r2, [r3, #8]
    topic.cstring = (char *)topicName;
   2fdc4:	2318      	movs	r3, #24
   2fdc6:	18fb      	adds	r3, r7, r3
   2fdc8:	68ba      	ldr	r2, [r7, #8]
   2fdca:	601a      	str	r2, [r3, #0]
    int len = 0;
   2fdcc:	2300      	movs	r3, #0
   2fdce:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected)
   2fdd0:	68fb      	ldr	r3, [r7, #12]
   2fdd2:	6a1b      	ldr	r3, [r3, #32]
   2fdd4:	2b00      	cmp	r3, #0
   2fdd6:	d100      	bne.n	2fdda <MQTTPublish+0x46>
   2fdd8:	e0a0      	b.n	2ff1c <MQTTPublish+0x188>
		goto exit;

    TimerInit(&timer);
   2fdda:	2324      	movs	r3, #36	; 0x24
   2fddc:	18fb      	adds	r3, r7, r3
   2fdde:	0018      	movs	r0, r3
   2fde0:	4b55      	ldr	r3, [pc, #340]	; (2ff38 <MQTTPublish+0x1a4>)
   2fde2:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2fde4:	68fb      	ldr	r3, [r7, #12]
   2fde6:	685a      	ldr	r2, [r3, #4]
   2fde8:	2324      	movs	r3, #36	; 0x24
   2fdea:	18fb      	adds	r3, r7, r3
   2fdec:	0011      	movs	r1, r2
   2fdee:	0018      	movs	r0, r3
   2fdf0:	4b52      	ldr	r3, [pc, #328]	; (2ff3c <MQTTPublish+0x1a8>)
   2fdf2:	4798      	blx	r3

    if (message->qos == QOS1 || message->qos == QOS2)
   2fdf4:	687b      	ldr	r3, [r7, #4]
   2fdf6:	781b      	ldrb	r3, [r3, #0]
   2fdf8:	2b01      	cmp	r3, #1
   2fdfa:	d003      	beq.n	2fe04 <MQTTPublish+0x70>
   2fdfc:	687b      	ldr	r3, [r7, #4]
   2fdfe:	781b      	ldrb	r3, [r3, #0]
   2fe00:	2b02      	cmp	r3, #2
   2fe02:	d107      	bne.n	2fe14 <MQTTPublish+0x80>
        message->id = getNextPacketId(c);
   2fe04:	68fb      	ldr	r3, [r7, #12]
   2fe06:	0018      	movs	r0, r3
   2fe08:	4b4d      	ldr	r3, [pc, #308]	; (2ff40 <MQTTPublish+0x1ac>)
   2fe0a:	4798      	blx	r3
   2fe0c:	0003      	movs	r3, r0
   2fe0e:	b29a      	uxth	r2, r3
   2fe10:	687b      	ldr	r3, [r7, #4]
   2fe12:	809a      	strh	r2, [r3, #4]
    
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2fe14:	68fb      	ldr	r3, [r7, #12]
   2fe16:	691b      	ldr	r3, [r3, #16]
   2fe18:	469c      	mov	ip, r3
   2fe1a:	68fb      	ldr	r3, [r7, #12]
   2fe1c:	689b      	ldr	r3, [r3, #8]
   2fe1e:	001d      	movs	r5, r3
   2fe20:	687b      	ldr	r3, [r7, #4]
   2fe22:	781b      	ldrb	r3, [r3, #0]
   2fe24:	001e      	movs	r6, r3
   2fe26:	687b      	ldr	r3, [r7, #4]
   2fe28:	785b      	ldrb	r3, [r3, #1]
   2fe2a:	4698      	mov	r8, r3
   2fe2c:	687b      	ldr	r3, [r7, #4]
   2fe2e:	889b      	ldrh	r3, [r3, #4]
   2fe30:	4699      	mov	r9, r3
              topic, (unsigned char*)message->payload, message->payloadlen);
   2fe32:	687b      	ldr	r3, [r7, #4]
   2fe34:	689a      	ldr	r2, [r3, #8]
   2fe36:	687b      	ldr	r3, [r7, #4]
   2fe38:	68db      	ldr	r3, [r3, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id, 
   2fe3a:	9306      	str	r3, [sp, #24]
   2fe3c:	9205      	str	r2, [sp, #20]
   2fe3e:	2318      	movs	r3, #24
   2fe40:	18fa      	adds	r2, r7, r3
   2fe42:	2308      	movs	r3, #8
   2fe44:	446b      	add	r3, sp
   2fe46:	ca13      	ldmia	r2!, {r0, r1, r4}
   2fe48:	c313      	stmia	r3!, {r0, r1, r4}
   2fe4a:	464b      	mov	r3, r9
   2fe4c:	9301      	str	r3, [sp, #4]
   2fe4e:	4643      	mov	r3, r8
   2fe50:	9300      	str	r3, [sp, #0]
   2fe52:	0033      	movs	r3, r6
   2fe54:	2200      	movs	r2, #0
   2fe56:	0029      	movs	r1, r5
   2fe58:	4660      	mov	r0, ip
   2fe5a:	4c3a      	ldr	r4, [pc, #232]	; (2ff44 <MQTTPublish+0x1b0>)
   2fe5c:	47a0      	blx	r4
   2fe5e:	0003      	movs	r3, r0
   2fe60:	633b      	str	r3, [r7, #48]	; 0x30
    if (len <= 0)
   2fe62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   2fe64:	2b00      	cmp	r3, #0
   2fe66:	dd5b      	ble.n	2ff20 <MQTTPublish+0x18c>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
   2fe68:	2324      	movs	r3, #36	; 0x24
   2fe6a:	18fa      	adds	r2, r7, r3
   2fe6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
   2fe6e:	68fb      	ldr	r3, [r7, #12]
   2fe70:	0018      	movs	r0, r3
   2fe72:	4b35      	ldr	r3, [pc, #212]	; (2ff48 <MQTTPublish+0x1b4>)
   2fe74:	4798      	blx	r3
   2fe76:	0003      	movs	r3, r0
   2fe78:	637b      	str	r3, [r7, #52]	; 0x34
   2fe7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   2fe7c:	2b00      	cmp	r3, #0
   2fe7e:	d151      	bne.n	2ff24 <MQTTPublish+0x190>
        goto exit; // there was a problem
    
    if (message->qos == QOS1)
   2fe80:	687b      	ldr	r3, [r7, #4]
   2fe82:	781b      	ldrb	r3, [r3, #0]
   2fe84:	2b01      	cmp	r3, #1
   2fe86:	d122      	bne.n	2fece <MQTTPublish+0x13a>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
   2fe88:	2324      	movs	r3, #36	; 0x24
   2fe8a:	18fa      	adds	r2, r7, r3
   2fe8c:	68fb      	ldr	r3, [r7, #12]
   2fe8e:	2104      	movs	r1, #4
   2fe90:	0018      	movs	r0, r3
   2fe92:	4b2e      	ldr	r3, [pc, #184]	; (2ff4c <MQTTPublish+0x1b8>)
   2fe94:	4798      	blx	r3
   2fe96:	0003      	movs	r3, r0
   2fe98:	2b04      	cmp	r3, #4
   2fe9a:	d114      	bne.n	2fec6 <MQTTPublish+0x132>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2fe9c:	68fb      	ldr	r3, [r7, #12]
   2fe9e:	695c      	ldr	r4, [r3, #20]
   2fea0:	68fb      	ldr	r3, [r7, #12]
   2fea2:	68db      	ldr	r3, [r3, #12]
   2fea4:	2216      	movs	r2, #22
   2fea6:	18ba      	adds	r2, r7, r2
   2fea8:	2115      	movs	r1, #21
   2feaa:	1879      	adds	r1, r7, r1
   2feac:	2014      	movs	r0, #20
   2feae:	1838      	adds	r0, r7, r0
   2feb0:	9300      	str	r3, [sp, #0]
   2feb2:	0023      	movs	r3, r4
   2feb4:	4c26      	ldr	r4, [pc, #152]	; (2ff50 <MQTTPublish+0x1bc>)
   2feb6:	47a0      	blx	r4
   2feb8:	0003      	movs	r3, r0
   2feba:	2b01      	cmp	r3, #1
   2febc:	d033      	beq.n	2ff26 <MQTTPublish+0x192>
                rc = FAILURE;
   2febe:	2301      	movs	r3, #1
   2fec0:	425b      	negs	r3, r3
   2fec2:	637b      	str	r3, [r7, #52]	; 0x34
   2fec4:	e02f      	b.n	2ff26 <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2fec6:	2301      	movs	r3, #1
   2fec8:	425b      	negs	r3, r3
   2feca:	637b      	str	r3, [r7, #52]	; 0x34
   2fecc:	e02b      	b.n	2ff26 <MQTTPublish+0x192>
    }
    else if (message->qos == QOS2)
   2fece:	687b      	ldr	r3, [r7, #4]
   2fed0:	781b      	ldrb	r3, [r3, #0]
   2fed2:	2b02      	cmp	r3, #2
   2fed4:	d127      	bne.n	2ff26 <MQTTPublish+0x192>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
   2fed6:	2324      	movs	r3, #36	; 0x24
   2fed8:	18fa      	adds	r2, r7, r3
   2feda:	68fb      	ldr	r3, [r7, #12]
   2fedc:	2107      	movs	r1, #7
   2fede:	0018      	movs	r0, r3
   2fee0:	4b1a      	ldr	r3, [pc, #104]	; (2ff4c <MQTTPublish+0x1b8>)
   2fee2:	4798      	blx	r3
   2fee4:	0003      	movs	r3, r0
   2fee6:	2b07      	cmp	r3, #7
   2fee8:	d114      	bne.n	2ff14 <MQTTPublish+0x180>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
   2feea:	68fb      	ldr	r3, [r7, #12]
   2feec:	695c      	ldr	r4, [r3, #20]
   2feee:	68fb      	ldr	r3, [r7, #12]
   2fef0:	68db      	ldr	r3, [r3, #12]
   2fef2:	2212      	movs	r2, #18
   2fef4:	18ba      	adds	r2, r7, r2
   2fef6:	2111      	movs	r1, #17
   2fef8:	1879      	adds	r1, r7, r1
   2fefa:	2010      	movs	r0, #16
   2fefc:	1838      	adds	r0, r7, r0
   2fefe:	9300      	str	r3, [sp, #0]
   2ff00:	0023      	movs	r3, r4
   2ff02:	4c13      	ldr	r4, [pc, #76]	; (2ff50 <MQTTPublish+0x1bc>)
   2ff04:	47a0      	blx	r4
   2ff06:	0003      	movs	r3, r0
   2ff08:	2b01      	cmp	r3, #1
   2ff0a:	d00c      	beq.n	2ff26 <MQTTPublish+0x192>
                rc = FAILURE;
   2ff0c:	2301      	movs	r3, #1
   2ff0e:	425b      	negs	r3, r3
   2ff10:	637b      	str	r3, [r7, #52]	; 0x34
   2ff12:	e008      	b.n	2ff26 <MQTTPublish+0x192>
        }
        else
            rc = FAILURE;
   2ff14:	2301      	movs	r3, #1
   2ff16:	425b      	negs	r3, r3
   2ff18:	637b      	str	r3, [r7, #52]	; 0x34
   2ff1a:	e004      	b.n	2ff26 <MQTTPublish+0x192>
		goto exit;
   2ff1c:	46c0      	nop			; (mov r8, r8)
   2ff1e:	e002      	b.n	2ff26 <MQTTPublish+0x192>
        goto exit;
   2ff20:	46c0      	nop			; (mov r8, r8)
   2ff22:	e000      	b.n	2ff26 <MQTTPublish+0x192>
        goto exit; // there was a problem
   2ff24:	46c0      	nop			; (mov r8, r8)
    
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2ff26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
   2ff28:	0018      	movs	r0, r3
   2ff2a:	46bd      	mov	sp, r7
   2ff2c:	b00f      	add	sp, #60	; 0x3c
   2ff2e:	bc0c      	pop	{r2, r3}
   2ff30:	4690      	mov	r8, r2
   2ff32:	4699      	mov	r9, r3
   2ff34:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2ff36:	46c0      	nop			; (mov r8, r8)
   2ff38:	0003019d 	.word	0x0003019d
   2ff3c:	00030125 	.word	0x00030125
   2ff40:	0002f2e5 	.word	0x0002f2e5
   2ff44:	00031421 	.word	0x00031421
   2ff48:	0002f315 	.word	0x0002f315
   2ff4c:	0002fa7d 	.word	0x0002fa7d
   2ff50:	00030e99 	.word	0x00030e99

0002ff54 <MQTTDisconnect>:


int MQTTDisconnect(MQTTClient* c)
{  
   2ff54:	b580      	push	{r7, lr}
   2ff56:	b088      	sub	sp, #32
   2ff58:	af00      	add	r7, sp, #0
   2ff5a:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
   2ff5c:	2301      	movs	r3, #1
   2ff5e:	425b      	negs	r3, r3
   2ff60:	61fb      	str	r3, [r7, #28]
    Timer timer;     // we might wait for incomplete incoming publishes to complete
    int len = 0;
   2ff62:	2300      	movs	r3, #0
   2ff64:	61bb      	str	r3, [r7, #24]

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
    TimerInit(&timer);
   2ff66:	230c      	movs	r3, #12
   2ff68:	18fb      	adds	r3, r7, r3
   2ff6a:	0018      	movs	r0, r3
   2ff6c:	4b13      	ldr	r3, [pc, #76]	; (2ffbc <MQTTDisconnect+0x68>)
   2ff6e:	4798      	blx	r3
    TimerCountdownMS(&timer, c->command_timeout_ms);
   2ff70:	687b      	ldr	r3, [r7, #4]
   2ff72:	685a      	ldr	r2, [r3, #4]
   2ff74:	230c      	movs	r3, #12
   2ff76:	18fb      	adds	r3, r7, r3
   2ff78:	0011      	movs	r1, r2
   2ff7a:	0018      	movs	r0, r3
   2ff7c:	4b10      	ldr	r3, [pc, #64]	; (2ffc0 <MQTTDisconnect+0x6c>)
   2ff7e:	4798      	blx	r3

	len = MQTTSerialize_disconnect(c->buf, c->buf_size);
   2ff80:	687b      	ldr	r3, [r7, #4]
   2ff82:	691a      	ldr	r2, [r3, #16]
   2ff84:	687b      	ldr	r3, [r7, #4]
   2ff86:	689b      	ldr	r3, [r3, #8]
   2ff88:	0019      	movs	r1, r3
   2ff8a:	0010      	movs	r0, r2
   2ff8c:	4b0d      	ldr	r3, [pc, #52]	; (2ffc4 <MQTTDisconnect+0x70>)
   2ff8e:	4798      	blx	r3
   2ff90:	0003      	movs	r3, r0
   2ff92:	61bb      	str	r3, [r7, #24]
    if (len > 0)
   2ff94:	69bb      	ldr	r3, [r7, #24]
   2ff96:	2b00      	cmp	r3, #0
   2ff98:	dd08      	ble.n	2ffac <MQTTDisconnect+0x58>
        rc = sendPacket(c, len, &timer);            // send the disconnect packet
   2ff9a:	230c      	movs	r3, #12
   2ff9c:	18fa      	adds	r2, r7, r3
   2ff9e:	69b9      	ldr	r1, [r7, #24]
   2ffa0:	687b      	ldr	r3, [r7, #4]
   2ffa2:	0018      	movs	r0, r3
   2ffa4:	4b08      	ldr	r3, [pc, #32]	; (2ffc8 <MQTTDisconnect+0x74>)
   2ffa6:	4798      	blx	r3
   2ffa8:	0003      	movs	r3, r0
   2ffaa:	61fb      	str	r3, [r7, #28]
        
    c->isconnected = 0;
   2ffac:	687b      	ldr	r3, [r7, #4]
   2ffae:	2200      	movs	r2, #0
   2ffb0:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
   2ffb2:	69fb      	ldr	r3, [r7, #28]
}
   2ffb4:	0018      	movs	r0, r3
   2ffb6:	46bd      	mov	sp, r7
   2ffb8:	b008      	add	sp, #32
   2ffba:	bd80      	pop	{r7, pc}
   2ffbc:	0003019d 	.word	0x0003019d
   2ffc0:	00030125 	.word	0x00030125
   2ffc4:	00030d4d 	.word	0x00030d4d
   2ffc8:	0002f315 	.word	0x0002f315

0002ffcc <isMQTTSocket>:
static uint32_t gu32MQTTRxFIFOPtr=0;
static uint32_t gu32MQTTRxFIFOLen=0;
static char *gpcHostAddr;

static bool isMQTTSocket(SOCKET sock)
{
   2ffcc:	b580      	push	{r7, lr}
   2ffce:	b084      	sub	sp, #16
   2ffd0:	af00      	add	r7, sp, #0
   2ffd2:	0002      	movs	r2, r0
   2ffd4:	1dfb      	adds	r3, r7, #7
   2ffd6:	701a      	strb	r2, [r3, #0]
	unsigned int cIdx;
	struct mqtt_module *mqttInstance;
	
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   2ffd8:	2300      	movs	r3, #0
   2ffda:	60fb      	str	r3, [r7, #12]
   2ffdc:	e01c      	b.n	30018 <isMQTTSocket+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance != NULL)
   2ffde:	4a12      	ldr	r2, [pc, #72]	; (30028 <isMQTTSocket+0x5c>)
   2ffe0:	68fb      	ldr	r3, [r7, #12]
   2ffe2:	2164      	movs	r1, #100	; 0x64
   2ffe4:	434b      	muls	r3, r1
   2ffe6:	18d3      	adds	r3, r2, r3
   2ffe8:	3360      	adds	r3, #96	; 0x60
   2ffea:	681b      	ldr	r3, [r3, #0]
   2ffec:	2b00      	cmp	r3, #0
   2ffee:	d010      	beq.n	30012 <isMQTTSocket+0x46>
		{
			mqttInstance = mqttClientPool[cIdx].mqtt_instance;
   2fff0:	4a0d      	ldr	r2, [pc, #52]	; (30028 <isMQTTSocket+0x5c>)
   2fff2:	68fb      	ldr	r3, [r7, #12]
   2fff4:	2164      	movs	r1, #100	; 0x64
   2fff6:	434b      	muls	r3, r1
   2fff8:	18d3      	adds	r3, r2, r3
   2fffa:	3360      	adds	r3, #96	; 0x60
   2fffc:	681b      	ldr	r3, [r3, #0]
   2fffe:	60bb      	str	r3, [r7, #8]
			if(mqttInstance->network.socket == sock)
   30000:	68bb      	ldr	r3, [r7, #8]
   30002:	6a1a      	ldr	r2, [r3, #32]
   30004:	1dfb      	adds	r3, r7, #7
   30006:	781b      	ldrb	r3, [r3, #0]
   30008:	b25b      	sxtb	r3, r3
   3000a:	429a      	cmp	r2, r3
   3000c:	d101      	bne.n	30012 <isMQTTSocket+0x46>
				return true;
   3000e:	2301      	movs	r3, #1
   30010:	e006      	b.n	30020 <isMQTTSocket+0x54>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   30012:	68fb      	ldr	r3, [r7, #12]
   30014:	3301      	adds	r3, #1
   30016:	60fb      	str	r3, [r7, #12]
   30018:	68fb      	ldr	r3, [r7, #12]
   3001a:	2b06      	cmp	r3, #6
   3001c:	d9df      	bls.n	2ffde <isMQTTSocket+0x12>
		}
	}
	return false;
   3001e:	2300      	movs	r3, #0
}
   30020:	0018      	movs	r0, r3
   30022:	46bd      	mov	sp, r7
   30024:	b004      	add	sp, #16
   30026:	bd80      	pop	{r7, pc}
   30028:	20004434 	.word	0x20004434

0003002c <dnsResolveCallback>:

void dnsResolveCallback(uint8_t *hostName, uint32_t hostIp)
{
   3002c:	b580      	push	{r7, lr}
   3002e:	b082      	sub	sp, #8
   30030:	af00      	add	r7, sp, #0
   30032:	6078      	str	r0, [r7, #4]
   30034:	6039      	str	r1, [r7, #0]
	if((gbMQTTBrokerIpresolved == false) && (!strcmp((const char *)gpcHostAddr, (const char *)hostName)))
   30036:	4b0d      	ldr	r3, [pc, #52]	; (3006c <dnsResolveCallback+0x40>)
   30038:	781b      	ldrb	r3, [r3, #0]
   3003a:	2201      	movs	r2, #1
   3003c:	4053      	eors	r3, r2
   3003e:	b2db      	uxtb	r3, r3
   30040:	2b00      	cmp	r3, #0
   30042:	d00e      	beq.n	30062 <dnsResolveCallback+0x36>
   30044:	4b0a      	ldr	r3, [pc, #40]	; (30070 <dnsResolveCallback+0x44>)
   30046:	681b      	ldr	r3, [r3, #0]
   30048:	687a      	ldr	r2, [r7, #4]
   3004a:	0011      	movs	r1, r2
   3004c:	0018      	movs	r0, r3
   3004e:	4b09      	ldr	r3, [pc, #36]	; (30074 <dnsResolveCallback+0x48>)
   30050:	4798      	blx	r3
   30052:	1e03      	subs	r3, r0, #0
   30054:	d105      	bne.n	30062 <dnsResolveCallback+0x36>
	{
		gi32MQTTBrokerIp = hostIp;
   30056:	683a      	ldr	r2, [r7, #0]
   30058:	4b07      	ldr	r3, [pc, #28]	; (30078 <dnsResolveCallback+0x4c>)
   3005a:	601a      	str	r2, [r3, #0]
		gbMQTTBrokerIpresolved = true;
   3005c:	4b03      	ldr	r3, [pc, #12]	; (3006c <dnsResolveCallback+0x40>)
   3005e:	2201      	movs	r2, #1
   30060:	701a      	strb	r2, [r3, #0]
		#ifdef MQTT_PLATFORM_DBG
		printf("INFO >> Host IP of %s is %d.%d.%d.%d\r\n", hostName, (int)IPV4_BYTE(hostIp, 0), (int)IPV4_BYTE(hostIp, 1),
		(int)IPV4_BYTE(hostIp, 2), (int)IPV4_BYTE(hostIp, 3));
		#endif
	}
}
   30062:	46c0      	nop			; (mov r8, r8)
   30064:	46bd      	mov	sp, r7
   30066:	b002      	add	sp, #8
   30068:	bd80      	pop	{r7, pc}
   3006a:	46c0      	nop			; (mov r8, r8)
   3006c:	20004324 	.word	0x20004324
   30070:	20004430 	.word	0x20004430
   30074:	00035b87 	.word	0x00035b87
   30078:	2000431c 	.word	0x2000431c

0003007c <tcpClientSocketEventHandler>:

void tcpClientSocketEventHandler(SOCKET sock, uint8_t u8Msg, void *pvMsg)
{
   3007c:	b580      	push	{r7, lr}
   3007e:	b084      	sub	sp, #16
   30080:	af00      	add	r7, sp, #0
   30082:	603a      	str	r2, [r7, #0]
   30084:	1dfb      	adds	r3, r7, #7
   30086:	1c02      	adds	r2, r0, #0
   30088:	701a      	strb	r2, [r3, #0]
   3008a:	1dbb      	adds	r3, r7, #6
   3008c:	1c0a      	adds	r2, r1, #0
   3008e:	701a      	strb	r2, [r3, #0]
	if(isMQTTSocket(sock)) { 
   30090:	1dfb      	adds	r3, r7, #7
   30092:	781b      	ldrb	r3, [r3, #0]
   30094:	b25b      	sxtb	r3, r3
   30096:	0018      	movs	r0, r3
   30098:	4b12      	ldr	r3, [pc, #72]	; (300e4 <tcpClientSocketEventHandler+0x68>)
   3009a:	4798      	blx	r3
   3009c:	1e03      	subs	r3, r0, #0
   3009e:	d01c      	beq.n	300da <tcpClientSocketEventHandler+0x5e>
		switch (u8Msg) {
   300a0:	1dbb      	adds	r3, r7, #6
   300a2:	781b      	ldrb	r3, [r3, #0]
   300a4:	2b06      	cmp	r3, #6
   300a6:	d00c      	beq.n	300c2 <tcpClientSocketEventHandler+0x46>
   300a8:	2b07      	cmp	r3, #7
   300aa:	d006      	beq.n	300ba <tcpClientSocketEventHandler+0x3e>
   300ac:	2b05      	cmp	r3, #5
   300ae:	d000      	beq.n	300b2 <tcpClientSocketEventHandler+0x36>
				printf("DEBUG >> Remaining data in Rx buffer of broker socket: %d\r\n",pstrRx->u16RemainingSize);
				#endif
				gbMQTTBrokerRecvDone=true;
			}
			break;
			default: break;
   300b0:	e013      	b.n	300da <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerConnected=true;
   300b2:	4b0d      	ldr	r3, [pc, #52]	; (300e8 <tcpClientSocketEventHandler+0x6c>)
   300b4:	2201      	movs	r2, #1
   300b6:	701a      	strb	r2, [r3, #0]
			break;
   300b8:	e00f      	b.n	300da <tcpClientSocketEventHandler+0x5e>
				gbMQTTBrokerSendDone=true;
   300ba:	4b0c      	ldr	r3, [pc, #48]	; (300ec <tcpClientSocketEventHandler+0x70>)
   300bc:	2201      	movs	r2, #1
   300be:	701a      	strb	r2, [r3, #0]
			break;
   300c0:	e00b      	b.n	300da <tcpClientSocketEventHandler+0x5e>
				tstrSocketRecvMsg* pstrRx = (tstrSocketRecvMsg*)pvMsg;
   300c2:	683b      	ldr	r3, [r7, #0]
   300c4:	60fb      	str	r3, [r7, #12]
				gi32MQTTBrokerRxLen = pstrRx->s16BufferSize;
   300c6:	68fb      	ldr	r3, [r7, #12]
   300c8:	2204      	movs	r2, #4
   300ca:	5e9b      	ldrsh	r3, [r3, r2]
   300cc:	001a      	movs	r2, r3
   300ce:	4b08      	ldr	r3, [pc, #32]	; (300f0 <tcpClientSocketEventHandler+0x74>)
   300d0:	601a      	str	r2, [r3, #0]
				gbMQTTBrokerRecvDone=true;
   300d2:	4b08      	ldr	r3, [pc, #32]	; (300f4 <tcpClientSocketEventHandler+0x78>)
   300d4:	2201      	movs	r2, #1
   300d6:	701a      	strb	r2, [r3, #0]
			break;
   300d8:	46c0      	nop			; (mov r8, r8)
		}
	}
}
   300da:	46c0      	nop			; (mov r8, r8)
   300dc:	46bd      	mov	sp, r7
   300de:	b004      	add	sp, #16
   300e0:	bd80      	pop	{r7, pc}
   300e2:	46c0      	nop			; (mov r8, r8)
   300e4:	0002ffcd 	.word	0x0002ffcd
   300e8:	20004325 	.word	0x20004325
   300ec:	20004326 	.word	0x20004326
   300f0:	20004320 	.word	0x20004320
   300f4:	20004327 	.word	0x20004327

000300f8 <TimerIsExpired>:

void SysTick_Handler_MQTT(void){
	MilliTimer++;
}

char TimerIsExpired(Timer* timer) {
   300f8:	b580      	push	{r7, lr}
   300fa:	b082      	sub	sp, #8
   300fc:	af00      	add	r7, sp, #0
   300fe:	6078      	str	r0, [r7, #4]
	return xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait) == pdTRUE;
   30100:	687b      	ldr	r3, [r7, #4]
   30102:	3304      	adds	r3, #4
   30104:	687a      	ldr	r2, [r7, #4]
   30106:	0011      	movs	r1, r2
   30108:	0018      	movs	r0, r3
   3010a:	4b05      	ldr	r3, [pc, #20]	; (30120 <TimerIsExpired+0x28>)
   3010c:	4798      	blx	r3
   3010e:	0003      	movs	r3, r0
   30110:	3b01      	subs	r3, #1
   30112:	425a      	negs	r2, r3
   30114:	4153      	adcs	r3, r2
   30116:	b2db      	uxtb	r3, r3
}
   30118:	0018      	movs	r0, r3
   3011a:	46bd      	mov	sp, r7
   3011c:	b002      	add	sp, #8
   3011e:	bd80      	pop	{r7, pc}
   30120:	0001d991 	.word	0x0001d991

00030124 <TimerCountdownMS>:


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms) {
   30124:	b580      	push	{r7, lr}
   30126:	b082      	sub	sp, #8
   30128:	af00      	add	r7, sp, #0
   3012a:	6078      	str	r0, [r7, #4]
   3012c:	6039      	str	r1, [r7, #0]
	timer->xTicksToWait = timeout_ms / portTICK_PERIOD_MS; /* convert milliseconds to ticks */
   3012e:	687b      	ldr	r3, [r7, #4]
   30130:	683a      	ldr	r2, [r7, #0]
   30132:	601a      	str	r2, [r3, #0]
	vTaskSetTimeOutState(&timer->xTimeOut); /* Record the time at which this function was entered. */
   30134:	687b      	ldr	r3, [r7, #4]
   30136:	3304      	adds	r3, #4
   30138:	0018      	movs	r0, r3
   3013a:	4b03      	ldr	r3, [pc, #12]	; (30148 <TimerCountdownMS+0x24>)
   3013c:	4798      	blx	r3
}
   3013e:	46c0      	nop			; (mov r8, r8)
   30140:	46bd      	mov	sp, r7
   30142:	b002      	add	sp, #8
   30144:	bd80      	pop	{r7, pc}
   30146:	46c0      	nop			; (mov r8, r8)
   30148:	0001d925 	.word	0x0001d925

0003014c <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout) {
   3014c:	b580      	push	{r7, lr}
   3014e:	b082      	sub	sp, #8
   30150:	af00      	add	r7, sp, #0
   30152:	6078      	str	r0, [r7, #4]
   30154:	6039      	str	r1, [r7, #0]
	TimerCountdownMS(timer, timeout * 1000);
   30156:	683b      	ldr	r3, [r7, #0]
   30158:	22fa      	movs	r2, #250	; 0xfa
   3015a:	0092      	lsls	r2, r2, #2
   3015c:	435a      	muls	r2, r3
   3015e:	687b      	ldr	r3, [r7, #4]
   30160:	0011      	movs	r1, r2
   30162:	0018      	movs	r0, r3
   30164:	4b02      	ldr	r3, [pc, #8]	; (30170 <TimerCountdown+0x24>)
   30166:	4798      	blx	r3
}
   30168:	46c0      	nop			; (mov r8, r8)
   3016a:	46bd      	mov	sp, r7
   3016c:	b002      	add	sp, #8
   3016e:	bd80      	pop	{r7, pc}
   30170:	00030125 	.word	0x00030125

00030174 <TimerLeftMS>:


int TimerLeftMS(Timer* timer) {
   30174:	b580      	push	{r7, lr}
   30176:	b082      	sub	sp, #8
   30178:	af00      	add	r7, sp, #0
   3017a:	6078      	str	r0, [r7, #4]
	xTaskCheckForTimeOut(&timer->xTimeOut, &timer->xTicksToWait); /* updates xTicksToWait to the number left */
   3017c:	687b      	ldr	r3, [r7, #4]
   3017e:	3304      	adds	r3, #4
   30180:	687a      	ldr	r2, [r7, #4]
   30182:	0011      	movs	r1, r2
   30184:	0018      	movs	r0, r3
   30186:	4b04      	ldr	r3, [pc, #16]	; (30198 <TimerLeftMS+0x24>)
   30188:	4798      	blx	r3
	return (timer->xTicksToWait < 0) ? 0 : (timer->xTicksToWait * portTICK_PERIOD_MS);
   3018a:	687b      	ldr	r3, [r7, #4]
   3018c:	681b      	ldr	r3, [r3, #0]
}
   3018e:	0018      	movs	r0, r3
   30190:	46bd      	mov	sp, r7
   30192:	b002      	add	sp, #8
   30194:	bd80      	pop	{r7, pc}
   30196:	46c0      	nop			; (mov r8, r8)
   30198:	0001d991 	.word	0x0001d991

0003019c <TimerInit>:


void TimerInit(Timer* timer) {
   3019c:	b580      	push	{r7, lr}
   3019e:	b082      	sub	sp, #8
   301a0:	af00      	add	r7, sp, #0
   301a2:	6078      	str	r0, [r7, #4]
	timer->xTicksToWait = 0;
   301a4:	687b      	ldr	r3, [r7, #4]
   301a6:	2200      	movs	r2, #0
   301a8:	601a      	str	r2, [r3, #0]
	memset(&timer->xTimeOut, '\0', sizeof(timer->xTimeOut));
   301aa:	687b      	ldr	r3, [r7, #4]
   301ac:	3304      	adds	r3, #4
   301ae:	2208      	movs	r2, #8
   301b0:	2100      	movs	r1, #0
   301b2:	0018      	movs	r0, r3
   301b4:	4b02      	ldr	r3, [pc, #8]	; (301c0 <TimerInit+0x24>)
   301b6:	4798      	blx	r3
}
   301b8:	46c0      	nop			; (mov r8, r8)
   301ba:	46bd      	mov	sp, r7
   301bc:	b002      	add	sp, #8
   301be:	bd80      	pop	{r7, pc}
   301c0:	0003582f 	.word	0x0003582f

000301c4 <WINC1500_read>:

static int WINC1500_read(Network* n, unsigned char* buffer, int len, int timeout_ms) { 
   301c4:	b590      	push	{r4, r7, lr}
   301c6:	b085      	sub	sp, #20
   301c8:	af00      	add	r7, sp, #0
   301ca:	60f8      	str	r0, [r7, #12]
   301cc:	60b9      	str	r1, [r7, #8]
   301ce:	607a      	str	r2, [r7, #4]
   301d0:	603b      	str	r3, [r7, #0]
  //at times the upper layer requests for single byte of data, but network has more in rx buffer.
  //this results in callback being invoked multiple times with length 1 before returning. To prevent loss of
  //data in this process, pool data internally and give it to upper layer on request. 
  
  //temporary workaround for timer overrun 
  if(0==timeout_ms) timeout_ms=10;
   301d2:	683b      	ldr	r3, [r7, #0]
   301d4:	2b00      	cmp	r3, #0
   301d6:	d101      	bne.n	301dc <WINC1500_read+0x18>
   301d8:	230a      	movs	r3, #10
   301da:	603b      	str	r3, [r7, #0]
  
  if(0==gu32MQTTRxFIFOLen){ //no data in internal FIFO
   301dc:	4b2c      	ldr	r3, [pc, #176]	; (30290 <WINC1500_read+0xcc>)
   301de:	681b      	ldr	r3, [r3, #0]
   301e0:	2b00      	cmp	r3, #0
   301e2:	d131      	bne.n	30248 <WINC1500_read+0x84>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("DEBUG >> Requesting data from network\r\n");
	  #endif
	  gbMQTTBrokerRecvDone=false;
   301e4:	4b2b      	ldr	r3, [pc, #172]	; (30294 <WINC1500_read+0xd0>)
   301e6:	2200      	movs	r2, #0
   301e8:	701a      	strb	r2, [r3, #0]
	  if (SOCK_ERR_NO_ERROR!=recv(n->socket,gcMQTTRxFIFO,MQTT_RX_POOL_SIZE,timeout_ms)){
   301ea:	68fb      	ldr	r3, [r7, #12]
   301ec:	681b      	ldr	r3, [r3, #0]
   301ee:	b258      	sxtb	r0, r3
   301f0:	683c      	ldr	r4, [r7, #0]
   301f2:	2380      	movs	r3, #128	; 0x80
   301f4:	005a      	lsls	r2, r3, #1
   301f6:	4928      	ldr	r1, [pc, #160]	; (30298 <WINC1500_read+0xd4>)
   301f8:	0023      	movs	r3, r4
   301fa:	4c28      	ldr	r4, [pc, #160]	; (3029c <WINC1500_read+0xd8>)
   301fc:	47a0      	blx	r4
   301fe:	1e03      	subs	r3, r0, #0
   30200:	d005      	beq.n	3020e <WINC1500_read+0x4a>
		  #ifdef MQTT_PLATFORM_DBG
		  printf("ERROR >> recv failed\r\n");
		  #endif
		  return -1;
   30202:	2301      	movs	r3, #1
   30204:	425b      	negs	r3, r3
   30206:	e03e      	b.n	30286 <WINC1500_read+0xc2>
	  }
	  //call handle_events until we get rx callback 
	  while (false==gbMQTTBrokerRecvDone){
		  m2m_wifi_handle_events(NULL);
   30208:	2000      	movs	r0, #0
   3020a:	4b25      	ldr	r3, [pc, #148]	; (302a0 <WINC1500_read+0xdc>)
   3020c:	4798      	blx	r3
	  while (false==gbMQTTBrokerRecvDone){
   3020e:	4b21      	ldr	r3, [pc, #132]	; (30294 <WINC1500_read+0xd0>)
   30210:	781b      	ldrb	r3, [r3, #0]
   30212:	2201      	movs	r2, #1
   30214:	4053      	eors	r3, r2
   30216:	b2db      	uxtb	r3, r3
   30218:	2b00      	cmp	r3, #0
   3021a:	d1f5      	bne.n	30208 <WINC1500_read+0x44>
	  }
	  
	  //update current FIFO length
	  if(gi32MQTTBrokerRxLen>0){ //data recieved form network
   3021c:	4b21      	ldr	r3, [pc, #132]	; (302a4 <WINC1500_read+0xe0>)
   3021e:	681b      	ldr	r3, [r3, #0]
   30220:	2b00      	cmp	r3, #0
   30222:	dd08      	ble.n	30236 <WINC1500_read+0x72>
		gu32MQTTRxFIFOLen=gi32MQTTBrokerRxLen;
   30224:	4b1f      	ldr	r3, [pc, #124]	; (302a4 <WINC1500_read+0xe0>)
   30226:	681b      	ldr	r3, [r3, #0]
   30228:	001a      	movs	r2, r3
   3022a:	4b19      	ldr	r3, [pc, #100]	; (30290 <WINC1500_read+0xcc>)
   3022c:	601a      	str	r2, [r3, #0]
		gu32MQTTRxFIFOPtr=0;
   3022e:	4b1e      	ldr	r3, [pc, #120]	; (302a8 <WINC1500_read+0xe4>)
   30230:	2200      	movs	r2, #0
   30232:	601a      	str	r2, [r3, #0]
   30234:	e008      	b.n	30248 <WINC1500_read+0x84>
    	printf("0x%x, ",gcMQTTRxFIFO[i]);
    	printf("\r\n");
	  #endif
	  }
	  else{//mostly in case of timeout
		  gu32MQTTRxFIFOLen=0;
   30236:	4b16      	ldr	r3, [pc, #88]	; (30290 <WINC1500_read+0xcc>)
   30238:	2200      	movs	r2, #0
   3023a:	601a      	str	r2, [r3, #0]
		  gu32MQTTRxFIFOPtr=0;
   3023c:	4b1a      	ldr	r3, [pc, #104]	; (302a8 <WINC1500_read+0xe4>)
   3023e:	2200      	movs	r2, #0
   30240:	601a      	str	r2, [r3, #0]
		  #ifdef MQTT_PLATFORM_DBG
		  printf("DEBUG >> no data to send. returning error code (%d)\r\n",gi32MQTTBrokerRxLen);
		  #endif
		  return gi32MQTTBrokerRxLen; //this corresponds to the error code.
   30242:	4b18      	ldr	r3, [pc, #96]	; (302a4 <WINC1500_read+0xe0>)
   30244:	681b      	ldr	r3, [r3, #0]
   30246:	e01e      	b.n	30286 <WINC1500_read+0xc2>
	  }
  }
  //return data to client from data present in the FIFO from previous recv()
  if(len>(int)gu32MQTTRxFIFOLen){
   30248:	4b11      	ldr	r3, [pc, #68]	; (30290 <WINC1500_read+0xcc>)
   3024a:	681b      	ldr	r3, [r3, #0]
   3024c:	001a      	movs	r2, r3
   3024e:	687b      	ldr	r3, [r7, #4]
   30250:	4293      	cmp	r3, r2
   30252:	dd02      	ble.n	3025a <WINC1500_read+0x96>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> unable to process read request since FIFO contains less data than requested\r\n");
	  #endif
	  return -1;
   30254:	2301      	movs	r3, #1
   30256:	425b      	negs	r3, r3
   30258:	e015      	b.n	30286 <WINC1500_read+0xc2>
  }
 
  memcpy((void*)buffer, (const void*)&gcMQTTRxFIFO[gu32MQTTRxFIFOPtr],len);
   3025a:	4b13      	ldr	r3, [pc, #76]	; (302a8 <WINC1500_read+0xe4>)
   3025c:	681a      	ldr	r2, [r3, #0]
   3025e:	4b0e      	ldr	r3, [pc, #56]	; (30298 <WINC1500_read+0xd4>)
   30260:	18d1      	adds	r1, r2, r3
   30262:	687a      	ldr	r2, [r7, #4]
   30264:	68bb      	ldr	r3, [r7, #8]
   30266:	0018      	movs	r0, r3
   30268:	4b10      	ldr	r3, [pc, #64]	; (302ac <WINC1500_read+0xe8>)
   3026a:	4798      	blx	r3
  gu32MQTTRxFIFOLen-=len;
   3026c:	4b08      	ldr	r3, [pc, #32]	; (30290 <WINC1500_read+0xcc>)
   3026e:	681a      	ldr	r2, [r3, #0]
   30270:	687b      	ldr	r3, [r7, #4]
   30272:	1ad2      	subs	r2, r2, r3
   30274:	4b06      	ldr	r3, [pc, #24]	; (30290 <WINC1500_read+0xcc>)
   30276:	601a      	str	r2, [r3, #0]
  gu32MQTTRxFIFOPtr+=len;
   30278:	4b0b      	ldr	r3, [pc, #44]	; (302a8 <WINC1500_read+0xe4>)
   3027a:	681a      	ldr	r2, [r3, #0]
   3027c:	687b      	ldr	r3, [r7, #4]
   3027e:	18d2      	adds	r2, r2, r3
   30280:	4b09      	ldr	r3, [pc, #36]	; (302a8 <WINC1500_read+0xe4>)
   30282:	601a      	str	r2, [r3, #0]
  
  return len;
   30284:	687b      	ldr	r3, [r7, #4]
}
   30286:	0018      	movs	r0, r3
   30288:	46bd      	mov	sp, r7
   3028a:	b005      	add	sp, #20
   3028c:	bd90      	pop	{r4, r7, pc}
   3028e:	46c0      	nop			; (mov r8, r8)
   30290:	2000442c 	.word	0x2000442c
   30294:	20004327 	.word	0x20004327
   30298:	20004328 	.word	0x20004328
   3029c:	00026879 	.word	0x00026879
   302a0:	00022dc1 	.word	0x00022dc1
   302a4:	20004320 	.word	0x20004320
   302a8:	20004428 	.word	0x20004428
   302ac:	000357f9 	.word	0x000357f9

000302b0 <WINC1500_write>:


static int WINC1500_write(Network* n, unsigned char* buffer, int len, int timeout_ms) {
   302b0:	b590      	push	{r4, r7, lr}
   302b2:	b085      	sub	sp, #20
   302b4:	af00      	add	r7, sp, #0
   302b6:	60f8      	str	r0, [r7, #12]
   302b8:	60b9      	str	r1, [r7, #8]
   302ba:	607a      	str	r2, [r7, #4]
   302bc:	603b      	str	r3, [r7, #0]
  gbMQTTBrokerSendDone=false;
   302be:	4b10      	ldr	r3, [pc, #64]	; (30300 <WINC1500_write+0x50>)
   302c0:	2200      	movs	r2, #0
   302c2:	701a      	strb	r2, [r3, #0]
  if (SOCK_ERR_NO_ERROR!=send(n->socket,buffer,len,0)){
   302c4:	68fb      	ldr	r3, [r7, #12]
   302c6:	681b      	ldr	r3, [r3, #0]
   302c8:	b258      	sxtb	r0, r3
   302ca:	687b      	ldr	r3, [r7, #4]
   302cc:	b29a      	uxth	r2, r3
   302ce:	68b9      	ldr	r1, [r7, #8]
   302d0:	2300      	movs	r3, #0
   302d2:	4c0c      	ldr	r4, [pc, #48]	; (30304 <WINC1500_write+0x54>)
   302d4:	47a0      	blx	r4
   302d6:	1e03      	subs	r3, r0, #0
   302d8:	d005      	beq.n	302e6 <WINC1500_write+0x36>
	  #ifdef MQTT_PLATFORM_DBG
	  printf("ERROR >> send error");
	  #endif
	  return -1;
   302da:	2301      	movs	r3, #1
   302dc:	425b      	negs	r3, r3
   302de:	e00a      	b.n	302f6 <WINC1500_write+0x46>
  }
  //wait for send callback
  while (false==gbMQTTBrokerSendDone){
	  m2m_wifi_handle_events(NULL);
   302e0:	2000      	movs	r0, #0
   302e2:	4b09      	ldr	r3, [pc, #36]	; (30308 <WINC1500_write+0x58>)
   302e4:	4798      	blx	r3
  while (false==gbMQTTBrokerSendDone){
   302e6:	4b06      	ldr	r3, [pc, #24]	; (30300 <WINC1500_write+0x50>)
   302e8:	781b      	ldrb	r3, [r3, #0]
   302ea:	2201      	movs	r2, #1
   302ec:	4053      	eors	r3, r2
   302ee:	b2db      	uxtb	r3, r3
   302f0:	2b00      	cmp	r3, #0
   302f2:	d1f5      	bne.n	302e0 <WINC1500_write+0x30>
  #endif

  //TODO: figure out how to get actual send length from callback
  //this length will be updated in the callback
  //return gu32MQTTBrokerSendLen;
  return len;
   302f4:	687b      	ldr	r3, [r7, #4]
}
   302f6:	0018      	movs	r0, r3
   302f8:	46bd      	mov	sp, r7
   302fa:	b005      	add	sp, #20
   302fc:	bd90      	pop	{r4, r7, pc}
   302fe:	46c0      	nop			; (mov r8, r8)
   30300:	20004326 	.word	0x20004326
   30304:	00026715 	.word	0x00026715
   30308:	00022dc1 	.word	0x00022dc1

0003030c <WINC1500_disconnect>:


static void WINC1500_disconnect(Network* n) {
   3030c:	b580      	push	{r7, lr}
   3030e:	b082      	sub	sp, #8
   30310:	af00      	add	r7, sp, #0
   30312:	6078      	str	r0, [r7, #4]
	close(n->socket);
   30314:	687b      	ldr	r3, [r7, #4]
   30316:	681b      	ldr	r3, [r3, #0]
   30318:	b25b      	sxtb	r3, r3
   3031a:	0018      	movs	r0, r3
   3031c:	4b06      	ldr	r3, [pc, #24]	; (30338 <WINC1500_disconnect+0x2c>)
   3031e:	4798      	blx	r3
	n->socket=-1;
   30320:	687b      	ldr	r3, [r7, #4]
   30322:	2201      	movs	r2, #1
   30324:	4252      	negs	r2, r2
   30326:	601a      	str	r2, [r3, #0]
	gbMQTTBrokerConnected=false;
   30328:	4b04      	ldr	r3, [pc, #16]	; (3033c <WINC1500_disconnect+0x30>)
   3032a:	2200      	movs	r2, #0
   3032c:	701a      	strb	r2, [r3, #0]
}
   3032e:	46c0      	nop			; (mov r8, r8)
   30330:	46bd      	mov	sp, r7
   30332:	b002      	add	sp, #8
   30334:	bd80      	pop	{r7, pc}
   30336:	46c0      	nop			; (mov r8, r8)
   30338:	000269f9 	.word	0x000269f9
   3033c:	20004325 	.word	0x20004325

00030340 <NetworkInit>:


void NetworkInit(Network* n) {
   30340:	b580      	push	{r7, lr}
   30342:	b082      	sub	sp, #8
   30344:	af00      	add	r7, sp, #0
   30346:	6078      	str	r0, [r7, #4]
	n->socket = -1;
   30348:	687b      	ldr	r3, [r7, #4]
   3034a:	2201      	movs	r2, #1
   3034c:	4252      	negs	r2, r2
   3034e:	601a      	str	r2, [r3, #0]
	n->mqttread = WINC1500_read;
   30350:	687b      	ldr	r3, [r7, #4]
   30352:	4a06      	ldr	r2, [pc, #24]	; (3036c <NetworkInit+0x2c>)
   30354:	609a      	str	r2, [r3, #8]
	n->mqttwrite = WINC1500_write;
   30356:	687b      	ldr	r3, [r7, #4]
   30358:	4a05      	ldr	r2, [pc, #20]	; (30370 <NetworkInit+0x30>)
   3035a:	60da      	str	r2, [r3, #12]
	n->disconnect = WINC1500_disconnect;
   3035c:	687b      	ldr	r3, [r7, #4]
   3035e:	4a05      	ldr	r2, [pc, #20]	; (30374 <NetworkInit+0x34>)
   30360:	611a      	str	r2, [r3, #16]
}
   30362:	46c0      	nop			; (mov r8, r8)
   30364:	46bd      	mov	sp, r7
   30366:	b002      	add	sp, #8
   30368:	bd80      	pop	{r7, pc}
   3036a:	46c0      	nop			; (mov r8, r8)
   3036c:	000301c5 	.word	0x000301c5
   30370:	000302b1 	.word	0x000302b1
   30374:	0003030d 	.word	0x0003030d

00030378 <ConnectNetwork>:

int ConnectNetwork(Network* n, char* addr, int port, int TLSFlag){
   30378:	b580      	push	{r7, lr}
   3037a:	b088      	sub	sp, #32
   3037c:	af00      	add	r7, sp, #0
   3037e:	60f8      	str	r0, [r7, #12]
   30380:	60b9      	str	r1, [r7, #8]
   30382:	607a      	str	r2, [r7, #4]
   30384:	603b      	str	r3, [r7, #0]

  //Resolve Server URL.
  gbMQTTBrokerIpresolved = false;
   30386:	4b37      	ldr	r3, [pc, #220]	; (30464 <ConnectNetwork+0xec>)
   30388:	2200      	movs	r2, #0
   3038a:	701a      	strb	r2, [r3, #0]
  gpcHostAddr = addr;
   3038c:	4b36      	ldr	r3, [pc, #216]	; (30468 <ConnectNetwork+0xf0>)
   3038e:	68ba      	ldr	r2, [r7, #8]
   30390:	601a      	str	r2, [r3, #0]
  gethostbyname((uint8*)addr);
   30392:	68bb      	ldr	r3, [r7, #8]
   30394:	0018      	movs	r0, r3
   30396:	4b35      	ldr	r3, [pc, #212]	; (3046c <ConnectNetwork+0xf4>)
   30398:	4798      	blx	r3
 
  //wait for resolver callback
  while (false==gbMQTTBrokerIpresolved){
   3039a:	e002      	b.n	303a2 <ConnectNetwork+0x2a>
	  m2m_wifi_handle_events(NULL);
   3039c:	2000      	movs	r0, #0
   3039e:	4b34      	ldr	r3, [pc, #208]	; (30470 <ConnectNetwork+0xf8>)
   303a0:	4798      	blx	r3
  while (false==gbMQTTBrokerIpresolved){
   303a2:	4b30      	ldr	r3, [pc, #192]	; (30464 <ConnectNetwork+0xec>)
   303a4:	781b      	ldrb	r3, [r3, #0]
   303a6:	2201      	movs	r2, #1
   303a8:	4053      	eors	r3, r2
   303aa:	b2db      	uxtb	r3, r3
   303ac:	2b00      	cmp	r3, #0
   303ae:	d1f5      	bne.n	3039c <ConnectNetwork+0x24>
  }
  
  n->hostIP = gi32MQTTBrokerIp;
   303b0:	4b30      	ldr	r3, [pc, #192]	; (30474 <ConnectNetwork+0xfc>)
   303b2:	681a      	ldr	r2, [r3, #0]
   303b4:	68fb      	ldr	r3, [r7, #12]
   303b6:	605a      	str	r2, [r3, #4]
  
  //connect to socket
  struct sockaddr_in addr_in;
  addr_in.sin_family = AF_INET;
   303b8:	2310      	movs	r3, #16
   303ba:	18fb      	adds	r3, r7, r3
   303bc:	2202      	movs	r2, #2
   303be:	801a      	strh	r2, [r3, #0]
  addr_in.sin_port = _htons(port);
   303c0:	687b      	ldr	r3, [r7, #4]
   303c2:	b29b      	uxth	r3, r3
   303c4:	021b      	lsls	r3, r3, #8
   303c6:	b21a      	sxth	r2, r3
   303c8:	687b      	ldr	r3, [r7, #4]
   303ca:	b29b      	uxth	r3, r3
   303cc:	0a1b      	lsrs	r3, r3, #8
   303ce:	b29b      	uxth	r3, r3
   303d0:	b21b      	sxth	r3, r3
   303d2:	4313      	orrs	r3, r2
   303d4:	b21b      	sxth	r3, r3
   303d6:	b29a      	uxth	r2, r3
   303d8:	2310      	movs	r3, #16
   303da:	18fb      	adds	r3, r7, r3
   303dc:	805a      	strh	r2, [r3, #2]
  addr_in.sin_addr.s_addr = gi32MQTTBrokerIp;
   303de:	4b25      	ldr	r3, [pc, #148]	; (30474 <ConnectNetwork+0xfc>)
   303e0:	681b      	ldr	r3, [r3, #0]
   303e2:	001a      	movs	r2, r3
   303e4:	2310      	movs	r3, #16
   303e6:	18fb      	adds	r3, r7, r3
   303e8:	605a      	str	r2, [r3, #4]

  /* Create secure socket */ 
  if(n->socket < 0)
   303ea:	68fb      	ldr	r3, [r7, #12]
   303ec:	681b      	ldr	r3, [r3, #0]
   303ee:	2b00      	cmp	r3, #0
   303f0:	da0a      	bge.n	30408 <ConnectNetwork+0x90>
	n->socket = socket(AF_INET, SOCK_STREAM, TLSFlag);
   303f2:	683b      	ldr	r3, [r7, #0]
   303f4:	b2db      	uxtb	r3, r3
   303f6:	001a      	movs	r2, r3
   303f8:	2101      	movs	r1, #1
   303fa:	2002      	movs	r0, #2
   303fc:	4b1e      	ldr	r3, [pc, #120]	; (30478 <ConnectNetwork+0x100>)
   303fe:	4798      	blx	r3
   30400:	0003      	movs	r3, r0
   30402:	001a      	movs	r2, r3
   30404:	68fb      	ldr	r3, [r7, #12]
   30406:	601a      	str	r2, [r3, #0]
  
  /* Check if socket was created successfully */
  if (n->socket == -1) {
   30408:	68fb      	ldr	r3, [r7, #12]
   3040a:	681b      	ldr	r3, [r3, #0]
   3040c:	3301      	adds	r3, #1
   3040e:	d108      	bne.n	30422 <ConnectNetwork+0xaa>
   #ifdef MQTT_PLATFORM_DBG
   printf("ERROR >> socket error.\r\n");
   #endif
   close(n->socket);
   30410:	68fb      	ldr	r3, [r7, #12]
   30412:	681b      	ldr	r3, [r3, #0]
   30414:	b25b      	sxtb	r3, r3
   30416:	0018      	movs	r0, r3
   30418:	4b18      	ldr	r3, [pc, #96]	; (3047c <ConnectNetwork+0x104>)
   3041a:	4798      	blx	r3
   return SOCK_ERR_INVALID;
   3041c:	2309      	movs	r3, #9
   3041e:	425b      	negs	r3, r3
   30420:	e01c      	b.n	3045c <ConnectNetwork+0xe4>
  }
  
  /* If success, connect to socket */
  if (connect(n->socket, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
   30422:	68fb      	ldr	r3, [r7, #12]
   30424:	681b      	ldr	r3, [r3, #0]
   30426:	b25b      	sxtb	r3, r3
   30428:	2210      	movs	r2, #16
   3042a:	18b9      	adds	r1, r7, r2
   3042c:	2210      	movs	r2, #16
   3042e:	0018      	movs	r0, r3
   30430:	4b13      	ldr	r3, [pc, #76]	; (30480 <ConnectNetwork+0x108>)
   30432:	4798      	blx	r3
   30434:	1e03      	subs	r3, r0, #0
   30436:	d002      	beq.n	3043e <ConnectNetwork+0xc6>
   #ifdef MQTT_PLATFORM_DBG  
   printf("ERROR >> connect error.\r\n");
   #endif
   return SOCK_ERR_INVALID;
   30438:	2309      	movs	r3, #9
   3043a:	425b      	negs	r3, r3
   3043c:	e00e      	b.n	3045c <ConnectNetwork+0xe4>
  }
  
  gbMQTTBrokerConnected = false;
   3043e:	4b11      	ldr	r3, [pc, #68]	; (30484 <ConnectNetwork+0x10c>)
   30440:	2200      	movs	r2, #0
   30442:	701a      	strb	r2, [r3, #0]
  
  /*wait for SOCKET_MSG_CONNECT event */
  while(false==gbMQTTBrokerConnected){
   30444:	e002      	b.n	3044c <ConnectNetwork+0xd4>
    m2m_wifi_handle_events(NULL);
   30446:	2000      	movs	r0, #0
   30448:	4b09      	ldr	r3, [pc, #36]	; (30470 <ConnectNetwork+0xf8>)
   3044a:	4798      	blx	r3
  while(false==gbMQTTBrokerConnected){
   3044c:	4b0d      	ldr	r3, [pc, #52]	; (30484 <ConnectNetwork+0x10c>)
   3044e:	781b      	ldrb	r3, [r3, #0]
   30450:	2201      	movs	r2, #1
   30452:	4053      	eors	r3, r2
   30454:	b2db      	uxtb	r3, r3
   30456:	2b00      	cmp	r3, #0
   30458:	d1f5      	bne.n	30446 <ConnectNetwork+0xce>
  
  /* Success */
  #ifdef MQTT_PLATFORM_DBG
  printf("INFO >> ConnectNetwork successful\r\n");
  #endif
  return SOCK_ERR_NO_ERROR;
   3045a:	2300      	movs	r3, #0
   3045c:	0018      	movs	r0, r3
   3045e:	46bd      	mov	sp, r7
   30460:	b008      	add	sp, #32
   30462:	bd80      	pop	{r7, pc}
   30464:	20004324 	.word	0x20004324
   30468:	20004430 	.word	0x20004430
   3046c:	00026c41 	.word	0x00026c41
   30470:	00022dc1 	.word	0x00022dc1
   30474:	2000431c 	.word	0x2000431c
   30478:	000263ed 	.word	0x000263ed
   3047c:	000269f9 	.word	0x000269f9
   30480:	00026601 	.word	0x00026601
   30484:	20004325 	.word	0x20004325

00030488 <allocateClient>:

static void allocateClient(struct mqtt_module *module);
static void deAllocateClient(struct mqtt_module *module);

static void allocateClient(struct mqtt_module *module)
{
   30488:	b580      	push	{r7, lr}
   3048a:	b084      	sub	sp, #16
   3048c:	af00      	add	r7, sp, #0
   3048e:	6078      	str	r0, [r7, #4]
	unsigned int cIdx;
	
	if(!module)
   30490:	687b      	ldr	r3, [r7, #4]
   30492:	2b00      	cmp	r3, #0
   30494:	d022      	beq.n	304dc <allocateClient+0x54>
		return;
		
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   30496:	2300      	movs	r3, #0
   30498:	60fb      	str	r3, [r7, #12]
   3049a:	e01b      	b.n	304d4 <allocateClient+0x4c>
	{
		if(mqttClientPool[cIdx].mqtt_instance == NULL)
   3049c:	4a11      	ldr	r2, [pc, #68]	; (304e4 <allocateClient+0x5c>)
   3049e:	68fb      	ldr	r3, [r7, #12]
   304a0:	2164      	movs	r1, #100	; 0x64
   304a2:	434b      	muls	r3, r1
   304a4:	18d3      	adds	r3, r2, r3
   304a6:	3360      	adds	r3, #96	; 0x60
   304a8:	681b      	ldr	r3, [r3, #0]
   304aa:	2b00      	cmp	r3, #0
   304ac:	d10f      	bne.n	304ce <allocateClient+0x46>
		{
			mqttClientPool[cIdx].mqtt_instance = module;
   304ae:	4a0d      	ldr	r2, [pc, #52]	; (304e4 <allocateClient+0x5c>)
   304b0:	68fb      	ldr	r3, [r7, #12]
   304b2:	2164      	movs	r1, #100	; 0x64
   304b4:	434b      	muls	r3, r1
   304b6:	18d3      	adds	r3, r2, r3
   304b8:	3360      	adds	r3, #96	; 0x60
   304ba:	687a      	ldr	r2, [r7, #4]
   304bc:	601a      	str	r2, [r3, #0]
			module->client = &(mqttClientPool[cIdx].client);
   304be:	68fb      	ldr	r3, [r7, #12]
   304c0:	2264      	movs	r2, #100	; 0x64
   304c2:	435a      	muls	r2, r3
   304c4:	4b07      	ldr	r3, [pc, #28]	; (304e4 <allocateClient+0x5c>)
   304c6:	18d2      	adds	r2, r2, r3
   304c8:	687b      	ldr	r3, [r7, #4]
   304ca:	61da      	str	r2, [r3, #28]
			return;
   304cc:	e007      	b.n	304de <allocateClient+0x56>
	for(cIdx = 0; cIdx < MQTT_MAX_CLIENTS; cIdx++)
   304ce:	68fb      	ldr	r3, [r7, #12]
   304d0:	3301      	adds	r3, #1
   304d2:	60fb      	str	r3, [r7, #12]
   304d4:	68fb      	ldr	r3, [r7, #12]
   304d6:	2b06      	cmp	r3, #6
   304d8:	d9e0      	bls.n	3049c <allocateClient+0x14>
   304da:	e000      	b.n	304de <allocateClient+0x56>
		return;
   304dc:	46c0      	nop			; (mov r8, r8)
		}
	}	
}
   304de:	46bd      	mov	sp, r7
   304e0:	b004      	add	sp, #16
   304e2:	bd80      	pop	{r7, pc}
   304e4:	20004434 	.word	0x20004434

000304e8 <mqtt_init>:
		}
	}
}

int mqtt_init(struct mqtt_module *module, struct mqtt_config *config)
{
   304e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   304ea:	b089      	sub	sp, #36	; 0x24
   304ec:	af04      	add	r7, sp, #16
   304ee:	6078      	str	r0, [r7, #4]
   304f0:	6039      	str	r1, [r7, #0]
	unsigned int timeout_ms;
	
	if(NULL == module || NULL == config || NULL == config->send_buffer || NULL == config->read_buffer)
   304f2:	687b      	ldr	r3, [r7, #4]
   304f4:	2b00      	cmp	r3, #0
   304f6:	d00a      	beq.n	3050e <mqtt_init+0x26>
   304f8:	683b      	ldr	r3, [r7, #0]
   304fa:	2b00      	cmp	r3, #0
   304fc:	d007      	beq.n	3050e <mqtt_init+0x26>
   304fe:	683b      	ldr	r3, [r7, #0]
   30500:	691b      	ldr	r3, [r3, #16]
   30502:	2b00      	cmp	r3, #0
   30504:	d003      	beq.n	3050e <mqtt_init+0x26>
   30506:	683b      	ldr	r3, [r7, #0]
   30508:	689b      	ldr	r3, [r3, #8]
   3050a:	2b00      	cmp	r3, #0
   3050c:	d102      	bne.n	30514 <mqtt_init+0x2c>
		return FAILURE;
   3050e:	2301      	movs	r3, #1
   30510:	425b      	negs	r3, r3
   30512:	e034      	b.n	3057e <mqtt_init+0x96>
		
	timeout_ms = config->keep_alive * 1000;
   30514:	683b      	ldr	r3, [r7, #0]
   30516:	889b      	ldrh	r3, [r3, #4]
   30518:	001a      	movs	r2, r3
   3051a:	23fa      	movs	r3, #250	; 0xfa
   3051c:	009b      	lsls	r3, r3, #2
   3051e:	4353      	muls	r3, r2
   30520:	60fb      	str	r3, [r7, #12]
	NetworkInit(&(module->network));
   30522:	687b      	ldr	r3, [r7, #4]
   30524:	3320      	adds	r3, #32
   30526:	0018      	movs	r0, r3
   30528:	4b17      	ldr	r3, [pc, #92]	; (30588 <mqtt_init+0xa0>)
   3052a:	4798      	blx	r3
	memcpy((void *)&(module->config), config, sizeof(struct mqtt_config));
   3052c:	687b      	ldr	r3, [r7, #4]
   3052e:	3304      	adds	r3, #4
   30530:	6839      	ldr	r1, [r7, #0]
   30532:	2218      	movs	r2, #24
   30534:	0018      	movs	r0, r3
   30536:	4b15      	ldr	r3, [pc, #84]	; (3058c <mqtt_init+0xa4>)
   30538:	4798      	blx	r3
	allocateClient(module);
   3053a:	687b      	ldr	r3, [r7, #4]
   3053c:	0018      	movs	r0, r3
   3053e:	4b14      	ldr	r3, [pc, #80]	; (30590 <mqtt_init+0xa8>)
   30540:	4798      	blx	r3
	
	if(module->client)
   30542:	687b      	ldr	r3, [r7, #4]
   30544:	69db      	ldr	r3, [r3, #28]
   30546:	2b00      	cmp	r3, #0
   30548:	d017      	beq.n	3057a <mqtt_init+0x92>
	{
		MQTTClientInit(module->client, &(module->network), timeout_ms, config->send_buffer, config->send_buffer_size, config->read_buffer, config->read_buffer_size);
   3054a:	687b      	ldr	r3, [r7, #4]
   3054c:	69d8      	ldr	r0, [r3, #28]
   3054e:	687b      	ldr	r3, [r7, #4]
   30550:	3320      	adds	r3, #32
   30552:	001c      	movs	r4, r3
   30554:	683b      	ldr	r3, [r7, #0]
   30556:	691e      	ldr	r6, [r3, #16]
   30558:	683b      	ldr	r3, [r7, #0]
   3055a:	695a      	ldr	r2, [r3, #20]
   3055c:	683b      	ldr	r3, [r7, #0]
   3055e:	6899      	ldr	r1, [r3, #8]
   30560:	683b      	ldr	r3, [r7, #0]
   30562:	68db      	ldr	r3, [r3, #12]
   30564:	68fd      	ldr	r5, [r7, #12]
   30566:	9302      	str	r3, [sp, #8]
   30568:	9101      	str	r1, [sp, #4]
   3056a:	9200      	str	r2, [sp, #0]
   3056c:	0033      	movs	r3, r6
   3056e:	002a      	movs	r2, r5
   30570:	0021      	movs	r1, r4
   30572:	4c08      	ldr	r4, [pc, #32]	; (30594 <mqtt_init+0xac>)
   30574:	47a0      	blx	r4
		return SUCCESS;
   30576:	2300      	movs	r3, #0
   30578:	e001      	b.n	3057e <mqtt_init+0x96>
	}
	else
		return FAILURE;
   3057a:	2301      	movs	r3, #1
   3057c:	425b      	negs	r3, r3
}
   3057e:	0018      	movs	r0, r3
   30580:	46bd      	mov	sp, r7
   30582:	b005      	add	sp, #20
   30584:	bdf0      	pop	{r4, r5, r6, r7, pc}
   30586:	46c0      	nop			; (mov r8, r8)
   30588:	00030341 	.word	0x00030341
   3058c:	000357f9 	.word	0x000357f9
   30590:	00030489 	.word	0x00030489
   30594:	0002f3b9 	.word	0x0002f3b9

00030598 <mqtt_get_config_defaults>:
	else
		return FAILURE;
}

void mqtt_get_config_defaults(struct mqtt_config *const config)
{
   30598:	b580      	push	{r7, lr}
   3059a:	b082      	sub	sp, #8
   3059c:	af00      	add	r7, sp, #0
   3059e:	6078      	str	r0, [r7, #4]
	config->port = 1883;
   305a0:	687b      	ldr	r3, [r7, #4]
   305a2:	4a0c      	ldr	r2, [pc, #48]	; (305d4 <mqtt_get_config_defaults+0x3c>)
   305a4:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   305a6:	687b      	ldr	r3, [r7, #4]
   305a8:	2200      	movs	r2, #0
   305aa:	709a      	strb	r2, [r3, #2]
	config->keep_alive = 60;
   305ac:	687b      	ldr	r3, [r7, #4]
   305ae:	223c      	movs	r2, #60	; 0x3c
   305b0:	809a      	strh	r2, [r3, #4]
	/* Below configuration must be initialized by Application */
	config->read_buffer = NULL;
   305b2:	687b      	ldr	r3, [r7, #4]
   305b4:	2200      	movs	r2, #0
   305b6:	609a      	str	r2, [r3, #8]
	config->send_buffer = NULL;
   305b8:	687b      	ldr	r3, [r7, #4]
   305ba:	2200      	movs	r2, #0
   305bc:	611a      	str	r2, [r3, #16]
	config->read_buffer_size = 0;
   305be:	687b      	ldr	r3, [r7, #4]
   305c0:	2200      	movs	r2, #0
   305c2:	60da      	str	r2, [r3, #12]
	config->send_buffer_size = 0;
   305c4:	687b      	ldr	r3, [r7, #4]
   305c6:	2200      	movs	r2, #0
   305c8:	615a      	str	r2, [r3, #20]
}
   305ca:	46c0      	nop			; (mov r8, r8)
   305cc:	46bd      	mov	sp, r7
   305ce:	b002      	add	sp, #8
   305d0:	bd80      	pop	{r7, pc}
   305d2:	46c0      	nop			; (mov r8, r8)
   305d4:	0000075b 	.word	0x0000075b

000305d8 <mqtt_register_callback>:

int mqtt_register_callback(struct mqtt_module *module, mqtt_callback_t callback)
{
   305d8:	b580      	push	{r7, lr}
   305da:	b082      	sub	sp, #8
   305dc:	af00      	add	r7, sp, #0
   305de:	6078      	str	r0, [r7, #4]
   305e0:	6039      	str	r1, [r7, #0]
	if(module)
   305e2:	687b      	ldr	r3, [r7, #4]
   305e4:	2b00      	cmp	r3, #0
   305e6:	d004      	beq.n	305f2 <mqtt_register_callback+0x1a>
	{
		module->callback = callback;
   305e8:	687b      	ldr	r3, [r7, #4]
   305ea:	683a      	ldr	r2, [r7, #0]
   305ec:	601a      	str	r2, [r3, #0]
		return SUCCESS;
   305ee:	2300      	movs	r3, #0
   305f0:	e001      	b.n	305f6 <mqtt_register_callback+0x1e>
	}
	else
		return FAILURE;
   305f2:	2301      	movs	r3, #1
   305f4:	425b      	negs	r3, r3
}
   305f6:	0018      	movs	r0, r3
   305f8:	46bd      	mov	sp, r7
   305fa:	b002      	add	sp, #8
   305fc:	bd80      	pop	{r7, pc}
	...

00030600 <mqtt_socket_event_handler>:
	module->callback = NULL;
	return SUCCESS;
}

void mqtt_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   30600:	b580      	push	{r7, lr}
   30602:	b082      	sub	sp, #8
   30604:	af00      	add	r7, sp, #0
   30606:	603a      	str	r2, [r7, #0]
   30608:	1dfb      	adds	r3, r7, #7
   3060a:	1c02      	adds	r2, r0, #0
   3060c:	701a      	strb	r2, [r3, #0]
   3060e:	1dbb      	adds	r3, r7, #6
   30610:	1c0a      	adds	r2, r1, #0
   30612:	701a      	strb	r2, [r3, #0]
	tcpClientSocketEventHandler(sock, msg_type, msg_data);
   30614:	683a      	ldr	r2, [r7, #0]
   30616:	1dbb      	adds	r3, r7, #6
   30618:	7819      	ldrb	r1, [r3, #0]
   3061a:	1dfb      	adds	r3, r7, #7
   3061c:	781b      	ldrb	r3, [r3, #0]
   3061e:	b25b      	sxtb	r3, r3
   30620:	0018      	movs	r0, r3
   30622:	4b03      	ldr	r3, [pc, #12]	; (30630 <mqtt_socket_event_handler+0x30>)
   30624:	4798      	blx	r3
}
   30626:	46c0      	nop			; (mov r8, r8)
   30628:	46bd      	mov	sp, r7
   3062a:	b002      	add	sp, #8
   3062c:	bd80      	pop	{r7, pc}
   3062e:	46c0      	nop			; (mov r8, r8)
   30630:	0003007d 	.word	0x0003007d

00030634 <mqtt_socket_resolve_handler>:

void mqtt_socket_resolve_handler(uint8_t *domain_name, uint32_t server_ip)
{
   30634:	b580      	push	{r7, lr}
   30636:	b082      	sub	sp, #8
   30638:	af00      	add	r7, sp, #0
   3063a:	6078      	str	r0, [r7, #4]
   3063c:	6039      	str	r1, [r7, #0]
	dnsResolveCallback(domain_name, server_ip);
   3063e:	683a      	ldr	r2, [r7, #0]
   30640:	687b      	ldr	r3, [r7, #4]
   30642:	0011      	movs	r1, r2
   30644:	0018      	movs	r0, r3
   30646:	4b03      	ldr	r3, [pc, #12]	; (30654 <mqtt_socket_resolve_handler+0x20>)
   30648:	4798      	blx	r3
}
   3064a:	46c0      	nop			; (mov r8, r8)
   3064c:	46bd      	mov	sp, r7
   3064e:	b002      	add	sp, #8
   30650:	bd80      	pop	{r7, pc}
   30652:	46c0      	nop			; (mov r8, r8)
   30654:	0003002d 	.word	0x0003002d

00030658 <mqtt_connect>:

int mqtt_connect(struct mqtt_module *module, const char *host)
{
   30658:	b590      	push	{r4, r7, lr}
   3065a:	b085      	sub	sp, #20
   3065c:	af00      	add	r7, sp, #0
   3065e:	6078      	str	r0, [r7, #4]
   30660:	6039      	str	r1, [r7, #0]
	union mqtt_data connResult;
	connResult.sock_connected.result = ConnectNetwork(&(module->network), (char *)host, module->config.port, module->config.tls);
   30662:	687b      	ldr	r3, [r7, #4]
   30664:	3320      	adds	r3, #32
   30666:	0018      	movs	r0, r3
   30668:	687b      	ldr	r3, [r7, #4]
   3066a:	889b      	ldrh	r3, [r3, #4]
   3066c:	001a      	movs	r2, r3
   3066e:	687b      	ldr	r3, [r7, #4]
   30670:	799b      	ldrb	r3, [r3, #6]
   30672:	6839      	ldr	r1, [r7, #0]
   30674:	4c09      	ldr	r4, [pc, #36]	; (3069c <mqtt_connect+0x44>)
   30676:	47a0      	blx	r4
   30678:	0003      	movs	r3, r0
   3067a:	60fb      	str	r3, [r7, #12]
	if(module->callback)
   3067c:	687b      	ldr	r3, [r7, #4]
   3067e:	681b      	ldr	r3, [r3, #0]
   30680:	2b00      	cmp	r3, #0
   30682:	d006      	beq.n	30692 <mqtt_connect+0x3a>
		module->callback(module, MQTT_CALLBACK_SOCK_CONNECTED, &connResult);
   30684:	687b      	ldr	r3, [r7, #4]
   30686:	681b      	ldr	r3, [r3, #0]
   30688:	220c      	movs	r2, #12
   3068a:	18ba      	adds	r2, r7, r2
   3068c:	6878      	ldr	r0, [r7, #4]
   3068e:	2100      	movs	r1, #0
   30690:	4798      	blx	r3
	return connResult.sock_connected.result;
   30692:	68fb      	ldr	r3, [r7, #12]
}
   30694:	0018      	movs	r0, r3
   30696:	46bd      	mov	sp, r7
   30698:	b005      	add	sp, #20
   3069a:	bd90      	pop	{r4, r7, pc}
   3069c:	00030379 	.word	0x00030379

000306a0 <mqtt_connect_broker>:

int mqtt_connect_broker(struct mqtt_module *const module, uint8_t clean_session, const char *id, const char *password, const char *client_id, const char *will_topic, const char *will_msg, uint32_t will_msg_len, uint8_t will_qos, uint8_t will_retain)
{
   306a0:	b580      	push	{r7, lr}
   306a2:	b09c      	sub	sp, #112	; 0x70
   306a4:	af00      	add	r7, sp, #0
   306a6:	60f8      	str	r0, [r7, #12]
   306a8:	607a      	str	r2, [r7, #4]
   306aa:	603b      	str	r3, [r7, #0]
   306ac:	230b      	movs	r3, #11
   306ae:	18fb      	adds	r3, r7, r3
   306b0:	1c0a      	adds	r2, r1, #0
   306b2:	701a      	strb	r2, [r3, #0]
	// Will Message length is not used by Paho MQTT. 
	int rc;
	union mqtt_data connBrokerResult;
	MQTTPacket_connectData connectData = MQTTPacket_connectData_initializer;
   306b4:	2310      	movs	r3, #16
   306b6:	18fa      	adds	r2, r7, r3
   306b8:	4b31      	ldr	r3, [pc, #196]	; (30780 <mqtt_connect_broker+0xe0>)
   306ba:	0010      	movs	r0, r2
   306bc:	0019      	movs	r1, r3
   306be:	2358      	movs	r3, #88	; 0x58
   306c0:	001a      	movs	r2, r3
   306c2:	4b30      	ldr	r3, [pc, #192]	; (30784 <mqtt_connect_broker+0xe4>)
   306c4:	4798      	blx	r3
		
	connectData.MQTTVersion = 4; //use protocol version 3.1.1
   306c6:	2310      	movs	r3, #16
   306c8:	18fb      	adds	r3, r7, r3
   306ca:	2204      	movs	r2, #4
   306cc:	721a      	strb	r2, [r3, #8]
	connectData.clientID.cstring = (char *)client_id;
   306ce:	2310      	movs	r3, #16
   306d0:	18fb      	adds	r3, r7, r3
   306d2:	6fba      	ldr	r2, [r7, #120]	; 0x78
   306d4:	60da      	str	r2, [r3, #12]
	connectData.username.cstring = (char *)id;
   306d6:	2310      	movs	r3, #16
   306d8:	18fb      	adds	r3, r7, r3
   306da:	687a      	ldr	r2, [r7, #4]
   306dc:	641a      	str	r2, [r3, #64]	; 0x40
	connectData.password.cstring = (char *)password;
   306de:	2310      	movs	r3, #16
   306e0:	18fb      	adds	r3, r7, r3
   306e2:	683a      	ldr	r2, [r7, #0]
   306e4:	64da      	str	r2, [r3, #76]	; 0x4c
	connectData.cleansession = clean_session;
   306e6:	2310      	movs	r3, #16
   306e8:	18fb      	adds	r3, r7, r3
   306ea:	220b      	movs	r2, #11
   306ec:	18ba      	adds	r2, r7, r2
   306ee:	7812      	ldrb	r2, [r2, #0]
   306f0:	769a      	strb	r2, [r3, #26]
	connectData.will.topicName.cstring = (char *)will_topic;
   306f2:	2310      	movs	r3, #16
   306f4:	18fb      	adds	r3, r7, r3
   306f6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
   306f8:	625a      	str	r2, [r3, #36]	; 0x24
	connectData.will.message.cstring = (char *)will_msg;
   306fa:	2310      	movs	r3, #16
   306fc:	18fb      	adds	r3, r7, r3
   306fe:	2280      	movs	r2, #128	; 0x80
   30700:	18ba      	adds	r2, r7, r2
   30702:	6812      	ldr	r2, [r2, #0]
   30704:	631a      	str	r2, [r3, #48]	; 0x30
	connectData.will.retained = will_retain;
   30706:	2310      	movs	r3, #16
   30708:	18fb      	adds	r3, r7, r3
   3070a:	228c      	movs	r2, #140	; 0x8c
   3070c:	18ba      	adds	r2, r7, r2
   3070e:	213c      	movs	r1, #60	; 0x3c
   30710:	7812      	ldrb	r2, [r2, #0]
   30712:	545a      	strb	r2, [r3, r1]
	connectData.will.qos = will_qos;
   30714:	2310      	movs	r3, #16
   30716:	18fb      	adds	r3, r7, r3
   30718:	2288      	movs	r2, #136	; 0x88
   3071a:	18ba      	adds	r2, r7, r2
   3071c:	213d      	movs	r1, #61	; 0x3d
   3071e:	7812      	ldrb	r2, [r2, #0]
   30720:	545a      	strb	r2, [r3, r1]
	
	if(will_topic && will_msg)
   30722:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
   30724:	2b00      	cmp	r3, #0
   30726:	d008      	beq.n	3073a <mqtt_connect_broker+0x9a>
   30728:	2380      	movs	r3, #128	; 0x80
   3072a:	18fb      	adds	r3, r7, r3
   3072c:	681b      	ldr	r3, [r3, #0]
   3072e:	2b00      	cmp	r3, #0
   30730:	d003      	beq.n	3073a <mqtt_connect_broker+0x9a>
		connectData.willFlag = 1;
   30732:	2310      	movs	r3, #16
   30734:	18fb      	adds	r3, r7, r3
   30736:	2201      	movs	r2, #1
   30738:	76da      	strb	r2, [r3, #27]
		
	rc = MQTTConnect(module->client, &connectData);
   3073a:	68fb      	ldr	r3, [r7, #12]
   3073c:	69db      	ldr	r3, [r3, #28]
   3073e:	2210      	movs	r2, #16
   30740:	18ba      	adds	r2, r7, r2
   30742:	0011      	movs	r1, r2
   30744:	0018      	movs	r0, r3
   30746:	4b10      	ldr	r3, [pc, #64]	; (30788 <mqtt_connect_broker+0xe8>)
   30748:	4798      	blx	r3
   3074a:	0003      	movs	r3, r0
   3074c:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	connBrokerResult.connected.result = rc;
   3074e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   30750:	b2da      	uxtb	r2, r3
   30752:	2368      	movs	r3, #104	; 0x68
   30754:	18fb      	adds	r3, r7, r3
   30756:	701a      	strb	r2, [r3, #0]
	if(module->callback)
   30758:	68fb      	ldr	r3, [r7, #12]
   3075a:	681b      	ldr	r3, [r3, #0]
   3075c:	2b00      	cmp	r3, #0
   3075e:	d006      	beq.n	3076e <mqtt_connect_broker+0xce>
		module->callback(module, MQTT_CALLBACK_CONNECTED, &connBrokerResult);
   30760:	68fb      	ldr	r3, [r7, #12]
   30762:	681b      	ldr	r3, [r3, #0]
   30764:	2268      	movs	r2, #104	; 0x68
   30766:	18ba      	adds	r2, r7, r2
   30768:	68f8      	ldr	r0, [r7, #12]
   3076a:	2101      	movs	r1, #1
   3076c:	4798      	blx	r3
	
	module->isConnected = true;
   3076e:	68fb      	ldr	r3, [r7, #12]
   30770:	2234      	movs	r2, #52	; 0x34
   30772:	2101      	movs	r1, #1
   30774:	5499      	strb	r1, [r3, r2]
	return rc;
   30776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
   30778:	0018      	movs	r0, r3
   3077a:	46bd      	mov	sp, r7
   3077c:	b01c      	add	sp, #112	; 0x70
   3077e:	bd80      	pop	{r7, pc}
   30780:	0003acf8 	.word	0x0003acf8
   30784:	000357f9 	.word	0x000357f9
   30788:	0002fac9 	.word	0x0002fac9

0003078c <mqtt_disconnect>:

int mqtt_disconnect(struct mqtt_module *const module, int force_close)
{
   3078c:	b580      	push	{r7, lr}
   3078e:	b084      	sub	sp, #16
   30790:	af00      	add	r7, sp, #0
   30792:	6078      	str	r0, [r7, #4]
   30794:	6039      	str	r1, [r7, #0]
	//force_close is not used by Paho MQTT
	int rc;
	union mqtt_data disconnectResult;
	
	rc = MQTTDisconnect(module->client);
   30796:	687b      	ldr	r3, [r7, #4]
   30798:	69db      	ldr	r3, [r3, #28]
   3079a:	0018      	movs	r0, r3
   3079c:	4b0c      	ldr	r3, [pc, #48]	; (307d0 <mqtt_disconnect+0x44>)
   3079e:	4798      	blx	r3
   307a0:	0003      	movs	r3, r0
   307a2:	60fb      	str	r3, [r7, #12]
	
	disconnectResult.disconnected.reason = rc;
   307a4:	68fb      	ldr	r3, [r7, #12]
   307a6:	60bb      	str	r3, [r7, #8]
	
	if(module->callback)
   307a8:	687b      	ldr	r3, [r7, #4]
   307aa:	681b      	ldr	r3, [r3, #0]
   307ac:	2b00      	cmp	r3, #0
   307ae:	d006      	beq.n	307be <mqtt_disconnect+0x32>
		module->callback(module, MQTT_CALLBACK_DISCONNECTED, &disconnectResult);
   307b0:	687b      	ldr	r3, [r7, #4]
   307b2:	681b      	ldr	r3, [r3, #0]
   307b4:	2208      	movs	r2, #8
   307b6:	18ba      	adds	r2, r7, r2
   307b8:	6878      	ldr	r0, [r7, #4]
   307ba:	2105      	movs	r1, #5
   307bc:	4798      	blx	r3
	
	module->isConnected = false;
   307be:	687b      	ldr	r3, [r7, #4]
   307c0:	2234      	movs	r2, #52	; 0x34
   307c2:	2100      	movs	r1, #0
   307c4:	5499      	strb	r1, [r3, r2]
	return rc;
   307c6:	68fb      	ldr	r3, [r7, #12]
}
   307c8:	0018      	movs	r0, r3
   307ca:	46bd      	mov	sp, r7
   307cc:	b004      	add	sp, #16
   307ce:	bd80      	pop	{r7, pc}
   307d0:	0002ff55 	.word	0x0002ff55

000307d4 <mqtt_publish>:

int mqtt_publish(struct mqtt_module *const module, const char *topic, const char *msg, uint32_t msg_len, uint8_t qos, uint8_t retain)
{
   307d4:	b580      	push	{r7, lr}
   307d6:	b08a      	sub	sp, #40	; 0x28
   307d8:	af00      	add	r7, sp, #0
   307da:	60f8      	str	r0, [r7, #12]
   307dc:	60b9      	str	r1, [r7, #8]
   307de:	607a      	str	r2, [r7, #4]
   307e0:	603b      	str	r3, [r7, #0]
	int rc;
	MQTTMessage mqttMsg;	
	
	mqttMsg.qos = qos;
   307e2:	2314      	movs	r3, #20
   307e4:	18fb      	adds	r3, r7, r3
   307e6:	2230      	movs	r2, #48	; 0x30
   307e8:	18ba      	adds	r2, r7, r2
   307ea:	7812      	ldrb	r2, [r2, #0]
   307ec:	701a      	strb	r2, [r3, #0]
	mqttMsg.payload = (char *)msg;
   307ee:	2314      	movs	r3, #20
   307f0:	18fb      	adds	r3, r7, r3
   307f2:	687a      	ldr	r2, [r7, #4]
   307f4:	609a      	str	r2, [r3, #8]
	mqttMsg.payloadlen = (size_t)msg_len;
   307f6:	2314      	movs	r3, #20
   307f8:	18fb      	adds	r3, r7, r3
   307fa:	683a      	ldr	r2, [r7, #0]
   307fc:	60da      	str	r2, [r3, #12]
	mqttMsg.retained = retain;
   307fe:	2314      	movs	r3, #20
   30800:	18fb      	adds	r3, r7, r3
   30802:	2234      	movs	r2, #52	; 0x34
   30804:	18ba      	adds	r2, r7, r2
   30806:	7812      	ldrb	r2, [r2, #0]
   30808:	705a      	strb	r2, [r3, #1]
	
	rc = MQTTPublish(module->client, topic, &mqttMsg);
   3080a:	68fb      	ldr	r3, [r7, #12]
   3080c:	69db      	ldr	r3, [r3, #28]
   3080e:	2214      	movs	r2, #20
   30810:	18ba      	adds	r2, r7, r2
   30812:	68b9      	ldr	r1, [r7, #8]
   30814:	0018      	movs	r0, r3
   30816:	4b09      	ldr	r3, [pc, #36]	; (3083c <mqtt_publish+0x68>)
   30818:	4798      	blx	r3
   3081a:	0003      	movs	r3, r0
   3081c:	627b      	str	r3, [r7, #36]	; 0x24
	
	if(module->callback)
   3081e:	68fb      	ldr	r3, [r7, #12]
   30820:	681b      	ldr	r3, [r3, #0]
   30822:	2b00      	cmp	r3, #0
   30824:	d005      	beq.n	30832 <mqtt_publish+0x5e>
		module->callback(module, MQTT_CALLBACK_PUBLISHED, NULL);
   30826:	68fb      	ldr	r3, [r7, #12]
   30828:	681b      	ldr	r3, [r3, #0]
   3082a:	68f8      	ldr	r0, [r7, #12]
   3082c:	2200      	movs	r2, #0
   3082e:	2102      	movs	r1, #2
   30830:	4798      	blx	r3
	
	return rc;
   30832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30834:	0018      	movs	r0, r3
   30836:	46bd      	mov	sp, r7
   30838:	b00a      	add	sp, #40	; 0x28
   3083a:	bd80      	pop	{r7, pc}
   3083c:	0002fd95 	.word	0x0002fd95

00030840 <mqtt_subscribe>:

int mqtt_subscribe(struct mqtt_module *module, const char *topic, uint8_t qos, messageHandler msgHandler)
{
   30840:	b590      	push	{r4, r7, lr}
   30842:	b087      	sub	sp, #28
   30844:	af00      	add	r7, sp, #0
   30846:	60f8      	str	r0, [r7, #12]
   30848:	60b9      	str	r1, [r7, #8]
   3084a:	603b      	str	r3, [r7, #0]
   3084c:	1dfb      	adds	r3, r7, #7
   3084e:	701a      	strb	r2, [r3, #0]
	int rc;
	
	rc = MQTTSubscribe(module->client, topic, qos, msgHandler);
   30850:	68fb      	ldr	r3, [r7, #12]
   30852:	69d8      	ldr	r0, [r3, #28]
   30854:	683c      	ldr	r4, [r7, #0]
   30856:	1dfb      	adds	r3, r7, #7
   30858:	781a      	ldrb	r2, [r3, #0]
   3085a:	68b9      	ldr	r1, [r7, #8]
   3085c:	0023      	movs	r3, r4
   3085e:	4c09      	ldr	r4, [pc, #36]	; (30884 <mqtt_subscribe+0x44>)
   30860:	47a0      	blx	r4
   30862:	0003      	movs	r3, r0
   30864:	617b      	str	r3, [r7, #20]
	
	if(module->callback)
   30866:	68fb      	ldr	r3, [r7, #12]
   30868:	681b      	ldr	r3, [r3, #0]
   3086a:	2b00      	cmp	r3, #0
   3086c:	d005      	beq.n	3087a <mqtt_subscribe+0x3a>
		module->callback(module, MQTT_CALLBACK_SUBSCRIBED, NULL);	
   3086e:	68fb      	ldr	r3, [r7, #12]
   30870:	681b      	ldr	r3, [r3, #0]
   30872:	68f8      	ldr	r0, [r7, #12]
   30874:	2200      	movs	r2, #0
   30876:	2103      	movs	r1, #3
   30878:	4798      	blx	r3
	
	return rc;
   3087a:	697b      	ldr	r3, [r7, #20]
}
   3087c:	0018      	movs	r0, r3
   3087e:	46bd      	mov	sp, r7
   30880:	b007      	add	sp, #28
   30882:	bd90      	pop	{r4, r7, pc}
   30884:	0002fc09 	.word	0x0002fc09

00030888 <mqtt_yield>:
	
	return rc;
}

int mqtt_yield(struct mqtt_module *module, int timeout_ms)
{
   30888:	b580      	push	{r7, lr}
   3088a:	b082      	sub	sp, #8
   3088c:	af00      	add	r7, sp, #0
   3088e:	6078      	str	r0, [r7, #4]
   30890:	6039      	str	r1, [r7, #0]
	return MQTTYield(module->client, timeout_ms);
   30892:	687b      	ldr	r3, [r7, #4]
   30894:	69db      	ldr	r3, [r3, #28]
   30896:	683a      	ldr	r2, [r7, #0]
   30898:	0011      	movs	r1, r2
   3089a:	0018      	movs	r0, r3
   3089c:	4b03      	ldr	r3, [pc, #12]	; (308ac <mqtt_yield+0x24>)
   3089e:	4798      	blx	r3
   308a0:	0003      	movs	r3, r0
   308a2:	0018      	movs	r0, r3
   308a4:	46bd      	mov	sp, r7
   308a6:	b002      	add	sp, #8
   308a8:	bd80      	pop	{r7, pc}
   308aa:	46c0      	nop			; (mov r8, r8)
   308ac:	0002fa11 	.word	0x0002fa11

000308b0 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
   308b0:	b590      	push	{r4, r7, lr}
   308b2:	b085      	sub	sp, #20
   308b4:	af00      	add	r7, sp, #0
   308b6:	6078      	str	r0, [r7, #4]
	int len = 0;
   308b8:	2300      	movs	r3, #0
   308ba:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
   308bc:	687b      	ldr	r3, [r7, #4]
   308be:	7a1b      	ldrb	r3, [r3, #8]
   308c0:	2b03      	cmp	r3, #3
   308c2:	d102      	bne.n	308ca <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
   308c4:	230c      	movs	r3, #12
   308c6:	60fb      	str	r3, [r7, #12]
   308c8:	e005      	b.n	308d6 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
   308ca:	687b      	ldr	r3, [r7, #4]
   308cc:	7a1b      	ldrb	r3, [r3, #8]
   308ce:	2b04      	cmp	r3, #4
   308d0:	d101      	bne.n	308d6 <MQTTSerialize_connectLength+0x26>
		len = 10;
   308d2:	230a      	movs	r3, #10
   308d4:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
   308d6:	687b      	ldr	r3, [r7, #4]
   308d8:	68d8      	ldr	r0, [r3, #12]
   308da:	6919      	ldr	r1, [r3, #16]
   308dc:	695a      	ldr	r2, [r3, #20]
   308de:	4b25      	ldr	r3, [pc, #148]	; (30974 <MQTTSerialize_connectLength+0xc4>)
   308e0:	4798      	blx	r3
   308e2:	0003      	movs	r3, r0
   308e4:	3302      	adds	r3, #2
   308e6:	68fa      	ldr	r2, [r7, #12]
   308e8:	18d3      	adds	r3, r2, r3
   308ea:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
   308ec:	687b      	ldr	r3, [r7, #4]
   308ee:	7edb      	ldrb	r3, [r3, #27]
   308f0:	2b00      	cmp	r3, #0
   308f2:	d013      	beq.n	3091c <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
   308f4:	687b      	ldr	r3, [r7, #4]
   308f6:	6a58      	ldr	r0, [r3, #36]	; 0x24
   308f8:	6a99      	ldr	r1, [r3, #40]	; 0x28
   308fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   308fc:	4b1d      	ldr	r3, [pc, #116]	; (30974 <MQTTSerialize_connectLength+0xc4>)
   308fe:	4798      	blx	r3
   30900:	0003      	movs	r3, r0
   30902:	1c9c      	adds	r4, r3, #2
   30904:	687b      	ldr	r3, [r7, #4]
   30906:	6b18      	ldr	r0, [r3, #48]	; 0x30
   30908:	6b59      	ldr	r1, [r3, #52]	; 0x34
   3090a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   3090c:	4b19      	ldr	r3, [pc, #100]	; (30974 <MQTTSerialize_connectLength+0xc4>)
   3090e:	4798      	blx	r3
   30910:	0003      	movs	r3, r0
   30912:	18e3      	adds	r3, r4, r3
   30914:	3302      	adds	r3, #2
   30916:	68fa      	ldr	r2, [r7, #12]
   30918:	18d3      	adds	r3, r2, r3
   3091a:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
   3091c:	687b      	ldr	r3, [r7, #4]
   3091e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   30920:	2b00      	cmp	r3, #0
   30922:	d103      	bne.n	3092c <MQTTSerialize_connectLength+0x7c>
   30924:	687b      	ldr	r3, [r7, #4]
   30926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   30928:	2b00      	cmp	r3, #0
   3092a:	d00a      	beq.n	30942 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
   3092c:	687b      	ldr	r3, [r7, #4]
   3092e:	6c18      	ldr	r0, [r3, #64]	; 0x40
   30930:	6c59      	ldr	r1, [r3, #68]	; 0x44
   30932:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   30934:	4b0f      	ldr	r3, [pc, #60]	; (30974 <MQTTSerialize_connectLength+0xc4>)
   30936:	4798      	blx	r3
   30938:	0003      	movs	r3, r0
   3093a:	3302      	adds	r3, #2
   3093c:	68fa      	ldr	r2, [r7, #12]
   3093e:	18d3      	adds	r3, r2, r3
   30940:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
   30942:	687b      	ldr	r3, [r7, #4]
   30944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30946:	2b00      	cmp	r3, #0
   30948:	d103      	bne.n	30952 <MQTTSerialize_connectLength+0xa2>
   3094a:	687b      	ldr	r3, [r7, #4]
   3094c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   3094e:	2b00      	cmp	r3, #0
   30950:	d00a      	beq.n	30968 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
   30952:	687b      	ldr	r3, [r7, #4]
   30954:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
   30956:	6d19      	ldr	r1, [r3, #80]	; 0x50
   30958:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   3095a:	4b06      	ldr	r3, [pc, #24]	; (30974 <MQTTSerialize_connectLength+0xc4>)
   3095c:	4798      	blx	r3
   3095e:	0003      	movs	r3, r0
   30960:	3302      	adds	r3, #2
   30962:	68fa      	ldr	r2, [r7, #12]
   30964:	18d3      	adds	r3, r2, r3
   30966:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
   30968:	68fb      	ldr	r3, [r7, #12]
}
   3096a:	0018      	movs	r0, r3
   3096c:	46bd      	mov	sp, r7
   3096e:	b005      	add	sp, #20
   30970:	bd90      	pop	{r4, r7, pc}
   30972:	46c0      	nop			; (mov r8, r8)
   30974:	00031321 	.word	0x00031321

00030978 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
   30978:	b590      	push	{r4, r7, lr}
   3097a:	b08b      	sub	sp, #44	; 0x2c
   3097c:	af00      	add	r7, sp, #0
   3097e:	60f8      	str	r0, [r7, #12]
   30980:	60b9      	str	r1, [r7, #8]
   30982:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
   30984:	68fb      	ldr	r3, [r7, #12]
   30986:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
   30988:	2300      	movs	r3, #0
   3098a:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
   3098c:	2300      	movs	r3, #0
   3098e:	617b      	str	r3, [r7, #20]
	int len = 0;
   30990:	2300      	movs	r3, #0
   30992:	623b      	str	r3, [r7, #32]
	int rc = -1;
   30994:	2301      	movs	r3, #1
   30996:	425b      	negs	r3, r3
   30998:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
   3099a:	687b      	ldr	r3, [r7, #4]
   3099c:	0018      	movs	r0, r3
   3099e:	4b8c      	ldr	r3, [pc, #560]	; (30bd0 <MQTTSerialize_connect+0x258>)
   309a0:	4798      	blx	r3
   309a2:	0003      	movs	r3, r0
   309a4:	623b      	str	r3, [r7, #32]
   309a6:	6a3b      	ldr	r3, [r7, #32]
   309a8:	0018      	movs	r0, r3
   309aa:	4b8a      	ldr	r3, [pc, #552]	; (30bd4 <MQTTSerialize_connect+0x25c>)
   309ac:	4798      	blx	r3
   309ae:	0002      	movs	r2, r0
   309b0:	68bb      	ldr	r3, [r7, #8]
   309b2:	429a      	cmp	r2, r3
   309b4:	dd03      	ble.n	309be <MQTTSerialize_connect+0x46>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   309b6:	2302      	movs	r3, #2
   309b8:	425b      	negs	r3, r3
   309ba:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   309bc:	e103      	b.n	30bc6 <MQTTSerialize_connect+0x24e>
	}

	header.byte = 0;
   309be:	2318      	movs	r3, #24
   309c0:	18fb      	adds	r3, r7, r3
   309c2:	2200      	movs	r2, #0
   309c4:	701a      	strb	r2, [r3, #0]
	header.bits.type = CONNECT;
   309c6:	2318      	movs	r3, #24
   309c8:	18fb      	adds	r3, r7, r3
   309ca:	781a      	ldrb	r2, [r3, #0]
   309cc:	210f      	movs	r1, #15
   309ce:	400a      	ands	r2, r1
   309d0:	1c11      	adds	r1, r2, #0
   309d2:	2210      	movs	r2, #16
   309d4:	430a      	orrs	r2, r1
   309d6:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   309d8:	2318      	movs	r3, #24
   309da:	18fb      	adds	r3, r7, r3
   309dc:	781a      	ldrb	r2, [r3, #0]
   309de:	231c      	movs	r3, #28
   309e0:	18fb      	adds	r3, r7, r3
   309e2:	0011      	movs	r1, r2
   309e4:	0018      	movs	r0, r3
   309e6:	4b7c      	ldr	r3, [pc, #496]	; (30bd8 <MQTTSerialize_connect+0x260>)
   309e8:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
   309ea:	69fb      	ldr	r3, [r7, #28]
   309ec:	6a3a      	ldr	r2, [r7, #32]
   309ee:	0011      	movs	r1, r2
   309f0:	0018      	movs	r0, r3
   309f2:	4b7a      	ldr	r3, [pc, #488]	; (30bdc <MQTTSerialize_connect+0x264>)
   309f4:	4798      	blx	r3
   309f6:	0002      	movs	r2, r0
   309f8:	69fb      	ldr	r3, [r7, #28]
   309fa:	189b      	adds	r3, r3, r2
   309fc:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
   309fe:	687b      	ldr	r3, [r7, #4]
   30a00:	7a1b      	ldrb	r3, [r3, #8]
   30a02:	2b04      	cmp	r3, #4
   30a04:	d10d      	bne.n	30a22 <MQTTSerialize_connect+0xaa>
	{
		writeCString(&ptr, "MQTT");
   30a06:	4a76      	ldr	r2, [pc, #472]	; (30be0 <MQTTSerialize_connect+0x268>)
   30a08:	231c      	movs	r3, #28
   30a0a:	18fb      	adds	r3, r7, r3
   30a0c:	0011      	movs	r1, r2
   30a0e:	0018      	movs	r0, r3
   30a10:	4b74      	ldr	r3, [pc, #464]	; (30be4 <MQTTSerialize_connect+0x26c>)
   30a12:	4798      	blx	r3
		writeChar(&ptr, (char) 4);
   30a14:	231c      	movs	r3, #28
   30a16:	18fb      	adds	r3, r7, r3
   30a18:	2104      	movs	r1, #4
   30a1a:	0018      	movs	r0, r3
   30a1c:	4b6e      	ldr	r3, [pc, #440]	; (30bd8 <MQTTSerialize_connect+0x260>)
   30a1e:	4798      	blx	r3
   30a20:	e00c      	b.n	30a3c <MQTTSerialize_connect+0xc4>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
   30a22:	4a71      	ldr	r2, [pc, #452]	; (30be8 <MQTTSerialize_connect+0x270>)
   30a24:	231c      	movs	r3, #28
   30a26:	18fb      	adds	r3, r7, r3
   30a28:	0011      	movs	r1, r2
   30a2a:	0018      	movs	r0, r3
   30a2c:	4b6d      	ldr	r3, [pc, #436]	; (30be4 <MQTTSerialize_connect+0x26c>)
   30a2e:	4798      	blx	r3
		writeChar(&ptr, (char) 3);
   30a30:	231c      	movs	r3, #28
   30a32:	18fb      	adds	r3, r7, r3
   30a34:	2103      	movs	r1, #3
   30a36:	0018      	movs	r0, r3
   30a38:	4b67      	ldr	r3, [pc, #412]	; (30bd8 <MQTTSerialize_connect+0x260>)
   30a3a:	4798      	blx	r3
	}

	flags.all = 0;
   30a3c:	2314      	movs	r3, #20
   30a3e:	18fb      	adds	r3, r7, r3
   30a40:	2200      	movs	r2, #0
   30a42:	701a      	strb	r2, [r3, #0]
	flags.bits.cleansession = options->cleansession;
   30a44:	687b      	ldr	r3, [r7, #4]
   30a46:	7e9b      	ldrb	r3, [r3, #26]
   30a48:	1c1a      	adds	r2, r3, #0
   30a4a:	2301      	movs	r3, #1
   30a4c:	4013      	ands	r3, r2
   30a4e:	b2da      	uxtb	r2, r3
   30a50:	2314      	movs	r3, #20
   30a52:	18fb      	adds	r3, r7, r3
   30a54:	2101      	movs	r1, #1
   30a56:	400a      	ands	r2, r1
   30a58:	1890      	adds	r0, r2, r2
   30a5a:	781a      	ldrb	r2, [r3, #0]
   30a5c:	2102      	movs	r1, #2
   30a5e:	438a      	bics	r2, r1
   30a60:	1c11      	adds	r1, r2, #0
   30a62:	1c02      	adds	r2, r0, #0
   30a64:	430a      	orrs	r2, r1
   30a66:	701a      	strb	r2, [r3, #0]
	flags.bits.will = (options->willFlag) ? 1 : 0;
   30a68:	687b      	ldr	r3, [r7, #4]
   30a6a:	7edb      	ldrb	r3, [r3, #27]
   30a6c:	1e5a      	subs	r2, r3, #1
   30a6e:	4193      	sbcs	r3, r2
   30a70:	b2da      	uxtb	r2, r3
   30a72:	2314      	movs	r3, #20
   30a74:	18fb      	adds	r3, r7, r3
   30a76:	2101      	movs	r1, #1
   30a78:	400a      	ands	r2, r1
   30a7a:	0090      	lsls	r0, r2, #2
   30a7c:	781a      	ldrb	r2, [r3, #0]
   30a7e:	2104      	movs	r1, #4
   30a80:	438a      	bics	r2, r1
   30a82:	1c11      	adds	r1, r2, #0
   30a84:	1c02      	adds	r2, r0, #0
   30a86:	430a      	orrs	r2, r1
   30a88:	701a      	strb	r2, [r3, #0]
	if (flags.bits.will)
   30a8a:	2314      	movs	r3, #20
   30a8c:	18fb      	adds	r3, r7, r3
   30a8e:	781b      	ldrb	r3, [r3, #0]
   30a90:	2204      	movs	r2, #4
   30a92:	4013      	ands	r3, r2
   30a94:	b2db      	uxtb	r3, r3
   30a96:	2b00      	cmp	r3, #0
   30a98:	d025      	beq.n	30ae6 <MQTTSerialize_connect+0x16e>
	{
		flags.bits.willQoS = options->will.qos;
   30a9a:	687b      	ldr	r3, [r7, #4]
   30a9c:	223d      	movs	r2, #61	; 0x3d
   30a9e:	5c9b      	ldrb	r3, [r3, r2]
   30aa0:	1c1a      	adds	r2, r3, #0
   30aa2:	2303      	movs	r3, #3
   30aa4:	4013      	ands	r3, r2
   30aa6:	b2da      	uxtb	r2, r3
   30aa8:	2314      	movs	r3, #20
   30aaa:	18fb      	adds	r3, r7, r3
   30aac:	2103      	movs	r1, #3
   30aae:	400a      	ands	r2, r1
   30ab0:	00d0      	lsls	r0, r2, #3
   30ab2:	781a      	ldrb	r2, [r3, #0]
   30ab4:	2118      	movs	r1, #24
   30ab6:	438a      	bics	r2, r1
   30ab8:	1c11      	adds	r1, r2, #0
   30aba:	1c02      	adds	r2, r0, #0
   30abc:	430a      	orrs	r2, r1
   30abe:	701a      	strb	r2, [r3, #0]
		flags.bits.willRetain = options->will.retained;
   30ac0:	687b      	ldr	r3, [r7, #4]
   30ac2:	223c      	movs	r2, #60	; 0x3c
   30ac4:	5c9b      	ldrb	r3, [r3, r2]
   30ac6:	1c1a      	adds	r2, r3, #0
   30ac8:	2301      	movs	r3, #1
   30aca:	4013      	ands	r3, r2
   30acc:	b2da      	uxtb	r2, r3
   30ace:	2314      	movs	r3, #20
   30ad0:	18fb      	adds	r3, r7, r3
   30ad2:	2101      	movs	r1, #1
   30ad4:	400a      	ands	r2, r1
   30ad6:	0150      	lsls	r0, r2, #5
   30ad8:	781a      	ldrb	r2, [r3, #0]
   30ada:	2120      	movs	r1, #32
   30adc:	438a      	bics	r2, r1
   30ade:	1c11      	adds	r1, r2, #0
   30ae0:	1c02      	adds	r2, r0, #0
   30ae2:	430a      	orrs	r2, r1
   30ae4:	701a      	strb	r2, [r3, #0]
	}

	if (options->username.cstring || options->username.lenstring.data)
   30ae6:	687b      	ldr	r3, [r7, #4]
   30ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   30aea:	2b00      	cmp	r3, #0
   30aec:	d103      	bne.n	30af6 <MQTTSerialize_connect+0x17e>
   30aee:	687b      	ldr	r3, [r7, #4]
   30af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   30af2:	2b00      	cmp	r3, #0
   30af4:	d006      	beq.n	30b04 <MQTTSerialize_connect+0x18c>
		flags.bits.username = 1;
   30af6:	2314      	movs	r3, #20
   30af8:	18fb      	adds	r3, r7, r3
   30afa:	781a      	ldrb	r2, [r3, #0]
   30afc:	2180      	movs	r1, #128	; 0x80
   30afe:	4249      	negs	r1, r1
   30b00:	430a      	orrs	r2, r1
   30b02:	701a      	strb	r2, [r3, #0]
	if (options->password.cstring || options->password.lenstring.data)
   30b04:	687b      	ldr	r3, [r7, #4]
   30b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   30b08:	2b00      	cmp	r3, #0
   30b0a:	d103      	bne.n	30b14 <MQTTSerialize_connect+0x19c>
   30b0c:	687b      	ldr	r3, [r7, #4]
   30b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   30b10:	2b00      	cmp	r3, #0
   30b12:	d005      	beq.n	30b20 <MQTTSerialize_connect+0x1a8>
		flags.bits.password = 1;
   30b14:	2314      	movs	r3, #20
   30b16:	18fb      	adds	r3, r7, r3
   30b18:	781a      	ldrb	r2, [r3, #0]
   30b1a:	2140      	movs	r1, #64	; 0x40
   30b1c:	430a      	orrs	r2, r1
   30b1e:	701a      	strb	r2, [r3, #0]

	writeChar(&ptr, flags.all);
   30b20:	2314      	movs	r3, #20
   30b22:	18fb      	adds	r3, r7, r3
   30b24:	781a      	ldrb	r2, [r3, #0]
   30b26:	231c      	movs	r3, #28
   30b28:	18fb      	adds	r3, r7, r3
   30b2a:	0011      	movs	r1, r2
   30b2c:	0018      	movs	r0, r3
   30b2e:	4b2a      	ldr	r3, [pc, #168]	; (30bd8 <MQTTSerialize_connect+0x260>)
   30b30:	4798      	blx	r3
	writeInt(&ptr, options->keepAliveInterval);
   30b32:	687b      	ldr	r3, [r7, #4]
   30b34:	8b1b      	ldrh	r3, [r3, #24]
   30b36:	001a      	movs	r2, r3
   30b38:	231c      	movs	r3, #28
   30b3a:	18fb      	adds	r3, r7, r3
   30b3c:	0011      	movs	r1, r2
   30b3e:	0018      	movs	r0, r3
   30b40:	4b2a      	ldr	r3, [pc, #168]	; (30bec <MQTTSerialize_connect+0x274>)
   30b42:	4798      	blx	r3
	writeMQTTString(&ptr, options->clientID);
   30b44:	687b      	ldr	r3, [r7, #4]
   30b46:	221c      	movs	r2, #28
   30b48:	18b8      	adds	r0, r7, r2
   30b4a:	68d9      	ldr	r1, [r3, #12]
   30b4c:	691a      	ldr	r2, [r3, #16]
   30b4e:	695b      	ldr	r3, [r3, #20]
   30b50:	4c27      	ldr	r4, [pc, #156]	; (30bf0 <MQTTSerialize_connect+0x278>)
   30b52:	47a0      	blx	r4
	if (options->willFlag)
   30b54:	687b      	ldr	r3, [r7, #4]
   30b56:	7edb      	ldrb	r3, [r3, #27]
   30b58:	2b00      	cmp	r3, #0
   30b5a:	d00f      	beq.n	30b7c <MQTTSerialize_connect+0x204>
	{
		writeMQTTString(&ptr, options->will.topicName);
   30b5c:	687b      	ldr	r3, [r7, #4]
   30b5e:	221c      	movs	r2, #28
   30b60:	18b8      	adds	r0, r7, r2
   30b62:	6a59      	ldr	r1, [r3, #36]	; 0x24
   30b64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   30b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   30b68:	4c21      	ldr	r4, [pc, #132]	; (30bf0 <MQTTSerialize_connect+0x278>)
   30b6a:	47a0      	blx	r4
		writeMQTTString(&ptr, options->will.message);
   30b6c:	687b      	ldr	r3, [r7, #4]
   30b6e:	221c      	movs	r2, #28
   30b70:	18b8      	adds	r0, r7, r2
   30b72:	6b19      	ldr	r1, [r3, #48]	; 0x30
   30b74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   30b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   30b78:	4c1d      	ldr	r4, [pc, #116]	; (30bf0 <MQTTSerialize_connect+0x278>)
   30b7a:	47a0      	blx	r4
	}
	if (flags.bits.username)
   30b7c:	2314      	movs	r3, #20
   30b7e:	18fb      	adds	r3, r7, r3
   30b80:	781b      	ldrb	r3, [r3, #0]
   30b82:	227f      	movs	r2, #127	; 0x7f
   30b84:	4393      	bics	r3, r2
   30b86:	b2db      	uxtb	r3, r3
   30b88:	2b00      	cmp	r3, #0
   30b8a:	d007      	beq.n	30b9c <MQTTSerialize_connect+0x224>
		writeMQTTString(&ptr, options->username);
   30b8c:	687b      	ldr	r3, [r7, #4]
   30b8e:	221c      	movs	r2, #28
   30b90:	18b8      	adds	r0, r7, r2
   30b92:	6c19      	ldr	r1, [r3, #64]	; 0x40
   30b94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   30b96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   30b98:	4c15      	ldr	r4, [pc, #84]	; (30bf0 <MQTTSerialize_connect+0x278>)
   30b9a:	47a0      	blx	r4
	if (flags.bits.password)
   30b9c:	2314      	movs	r3, #20
   30b9e:	18fb      	adds	r3, r7, r3
   30ba0:	781b      	ldrb	r3, [r3, #0]
   30ba2:	2240      	movs	r2, #64	; 0x40
   30ba4:	4013      	ands	r3, r2
   30ba6:	b2db      	uxtb	r3, r3
   30ba8:	2b00      	cmp	r3, #0
   30baa:	d007      	beq.n	30bbc <MQTTSerialize_connect+0x244>
		writeMQTTString(&ptr, options->password);
   30bac:	687b      	ldr	r3, [r7, #4]
   30bae:	221c      	movs	r2, #28
   30bb0:	18b8      	adds	r0, r7, r2
   30bb2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
   30bb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
   30bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   30bb8:	4c0d      	ldr	r4, [pc, #52]	; (30bf0 <MQTTSerialize_connect+0x278>)
   30bba:	47a0      	blx	r4

	rc = ptr - buf;
   30bbc:	69fb      	ldr	r3, [r7, #28]
   30bbe:	001a      	movs	r2, r3
   30bc0:	68fb      	ldr	r3, [r7, #12]
   30bc2:	1ad3      	subs	r3, r2, r3
   30bc4:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
   30bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30bc8:	0018      	movs	r0, r3
   30bca:	46bd      	mov	sp, r7
   30bcc:	b00b      	add	sp, #44	; 0x2c
   30bce:	bd90      	pop	{r4, r7, pc}
   30bd0:	000308b1 	.word	0x000308b1
   30bd4:	00031045 	.word	0x00031045
   30bd8:	00031167 	.word	0x00031167
   30bdc:	00030f4d 	.word	0x00030f4d
   30be0:	0003ad50 	.word	0x0003ad50
   30be4:	000311e9 	.word	0x000311e9
   30be8:	0003ad58 	.word	0x0003ad58
   30bec:	00031191 	.word	0x00031191
   30bf0:	00031239 	.word	0x00031239

00030bf4 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
   30bf4:	b580      	push	{r7, lr}
   30bf6:	b08a      	sub	sp, #40	; 0x28
   30bf8:	af00      	add	r7, sp, #0
   30bfa:	60f8      	str	r0, [r7, #12]
   30bfc:	60b9      	str	r1, [r7, #8]
   30bfe:	607a      	str	r2, [r7, #4]
   30c00:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   30c02:	2300      	movs	r3, #0
   30c04:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   30c06:	687b      	ldr	r3, [r7, #4]
   30c08:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   30c0a:	2300      	movs	r3, #0
   30c0c:	623b      	str	r3, [r7, #32]
	int rc = 0;
   30c0e:	2300      	movs	r3, #0
   30c10:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
   30c12:	2300      	movs	r3, #0
   30c14:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   30c16:	2318      	movs	r3, #24
   30c18:	18fb      	adds	r3, r7, r3
   30c1a:	0018      	movs	r0, r3
   30c1c:	4b25      	ldr	r3, [pc, #148]	; (30cb4 <MQTTDeserialize_connack+0xc0>)
   30c1e:	4798      	blx	r3
   30c20:	0003      	movs	r3, r0
   30c22:	001a      	movs	r2, r3
   30c24:	231c      	movs	r3, #28
   30c26:	18fb      	adds	r3, r7, r3
   30c28:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != CONNACK)
   30c2a:	231c      	movs	r3, #28
   30c2c:	18fb      	adds	r3, r7, r3
   30c2e:	781b      	ldrb	r3, [r3, #0]
   30c30:	220f      	movs	r2, #15
   30c32:	4393      	bics	r3, r2
   30c34:	b2db      	uxtb	r3, r3
   30c36:	2b20      	cmp	r3, #32
   30c38:	d134      	bne.n	30ca4 <MQTTDeserialize_connack+0xb0>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   30c3a:	69bb      	ldr	r3, [r7, #24]
   30c3c:	2214      	movs	r2, #20
   30c3e:	18ba      	adds	r2, r7, r2
   30c40:	0011      	movs	r1, r2
   30c42:	0018      	movs	r0, r3
   30c44:	4b1c      	ldr	r3, [pc, #112]	; (30cb8 <MQTTDeserialize_connack+0xc4>)
   30c46:	4798      	blx	r3
   30c48:	0003      	movs	r3, r0
   30c4a:	627b      	str	r3, [r7, #36]	; 0x24
   30c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30c4e:	69bb      	ldr	r3, [r7, #24]
   30c50:	189b      	adds	r3, r3, r2
   30c52:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   30c54:	69bb      	ldr	r3, [r7, #24]
   30c56:	697a      	ldr	r2, [r7, #20]
   30c58:	189b      	adds	r3, r3, r2
   30c5a:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   30c5c:	6a3b      	ldr	r3, [r7, #32]
   30c5e:	69ba      	ldr	r2, [r7, #24]
   30c60:	1a9b      	subs	r3, r3, r2
   30c62:	2b01      	cmp	r3, #1
   30c64:	dd20      	ble.n	30ca8 <MQTTDeserialize_connack+0xb4>
		goto exit;

	flags.all = readChar(&curdata);
   30c66:	2318      	movs	r3, #24
   30c68:	18fb      	adds	r3, r7, r3
   30c6a:	0018      	movs	r0, r3
   30c6c:	4b11      	ldr	r3, [pc, #68]	; (30cb4 <MQTTDeserialize_connack+0xc0>)
   30c6e:	4798      	blx	r3
   30c70:	0003      	movs	r3, r0
   30c72:	001a      	movs	r2, r3
   30c74:	2310      	movs	r3, #16
   30c76:	18fb      	adds	r3, r7, r3
   30c78:	701a      	strb	r2, [r3, #0]
	*sessionPresent = flags.bits.sessionpresent;
   30c7a:	2310      	movs	r3, #16
   30c7c:	18fb      	adds	r3, r7, r3
   30c7e:	781b      	ldrb	r3, [r3, #0]
   30c80:	061b      	lsls	r3, r3, #24
   30c82:	0fdb      	lsrs	r3, r3, #31
   30c84:	b2db      	uxtb	r3, r3
   30c86:	001a      	movs	r2, r3
   30c88:	68fb      	ldr	r3, [r7, #12]
   30c8a:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
   30c8c:	2318      	movs	r3, #24
   30c8e:	18fb      	adds	r3, r7, r3
   30c90:	0018      	movs	r0, r3
   30c92:	4b08      	ldr	r3, [pc, #32]	; (30cb4 <MQTTDeserialize_connack+0xc0>)
   30c94:	4798      	blx	r3
   30c96:	0003      	movs	r3, r0
   30c98:	001a      	movs	r2, r3
   30c9a:	68bb      	ldr	r3, [r7, #8]
   30c9c:	701a      	strb	r2, [r3, #0]

	rc = 1;
   30c9e:	2301      	movs	r3, #1
   30ca0:	627b      	str	r3, [r7, #36]	; 0x24
   30ca2:	e002      	b.n	30caa <MQTTDeserialize_connack+0xb6>
		goto exit;
   30ca4:	46c0      	nop			; (mov r8, r8)
   30ca6:	e000      	b.n	30caa <MQTTDeserialize_connack+0xb6>
		goto exit;
   30ca8:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30cac:	0018      	movs	r0, r3
   30cae:	46bd      	mov	sp, r7
   30cb0:	b00a      	add	sp, #40	; 0x28
   30cb2:	bd80      	pop	{r7, pc}
   30cb4:	0003113b 	.word	0x0003113b
   30cb8:	000310d5 	.word	0x000310d5

00030cbc <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
   30cbc:	b580      	push	{r7, lr}
   30cbe:	b088      	sub	sp, #32
   30cc0:	af00      	add	r7, sp, #0
   30cc2:	60f8      	str	r0, [r7, #12]
   30cc4:	60b9      	str	r1, [r7, #8]
   30cc6:	1dfb      	adds	r3, r7, #7
   30cc8:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   30cca:	2300      	movs	r3, #0
   30ccc:	61bb      	str	r3, [r7, #24]
	int rc = -1;
   30cce:	2301      	movs	r3, #1
   30cd0:	425b      	negs	r3, r3
   30cd2:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   30cd4:	68fb      	ldr	r3, [r7, #12]
   30cd6:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
   30cd8:	68bb      	ldr	r3, [r7, #8]
   30cda:	2b01      	cmp	r3, #1
   30cdc:	dc03      	bgt.n	30ce6 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   30cde:	2302      	movs	r3, #2
   30ce0:	425b      	negs	r3, r3
   30ce2:	61fb      	str	r3, [r7, #28]
		goto exit;
   30ce4:	e029      	b.n	30d3a <MQTTSerialize_zero+0x7e>
	}
	header.byte = 0;
   30ce6:	2318      	movs	r3, #24
   30ce8:	18fb      	adds	r3, r7, r3
   30cea:	2200      	movs	r2, #0
   30cec:	701a      	strb	r2, [r3, #0]
	header.bits.type = packettype;
   30cee:	1dfb      	adds	r3, r7, #7
   30cf0:	781b      	ldrb	r3, [r3, #0]
   30cf2:	220f      	movs	r2, #15
   30cf4:	4013      	ands	r3, r2
   30cf6:	b2da      	uxtb	r2, r3
   30cf8:	2318      	movs	r3, #24
   30cfa:	18fb      	adds	r3, r7, r3
   30cfc:	0110      	lsls	r0, r2, #4
   30cfe:	781a      	ldrb	r2, [r3, #0]
   30d00:	210f      	movs	r1, #15
   30d02:	400a      	ands	r2, r1
   30d04:	1c11      	adds	r1, r2, #0
   30d06:	1c02      	adds	r2, r0, #0
   30d08:	430a      	orrs	r2, r1
   30d0a:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   30d0c:	2318      	movs	r3, #24
   30d0e:	18fb      	adds	r3, r7, r3
   30d10:	781a      	ldrb	r2, [r3, #0]
   30d12:	2314      	movs	r3, #20
   30d14:	18fb      	adds	r3, r7, r3
   30d16:	0011      	movs	r1, r2
   30d18:	0018      	movs	r0, r3
   30d1a:	4b0a      	ldr	r3, [pc, #40]	; (30d44 <MQTTSerialize_zero+0x88>)
   30d1c:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
   30d1e:	697b      	ldr	r3, [r7, #20]
   30d20:	2100      	movs	r1, #0
   30d22:	0018      	movs	r0, r3
   30d24:	4b08      	ldr	r3, [pc, #32]	; (30d48 <MQTTSerialize_zero+0x8c>)
   30d26:	4798      	blx	r3
   30d28:	0002      	movs	r2, r0
   30d2a:	697b      	ldr	r3, [r7, #20]
   30d2c:	189b      	adds	r3, r3, r2
   30d2e:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
   30d30:	697b      	ldr	r3, [r7, #20]
   30d32:	001a      	movs	r2, r3
   30d34:	68fb      	ldr	r3, [r7, #12]
   30d36:	1ad3      	subs	r3, r2, r3
   30d38:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30d3a:	69fb      	ldr	r3, [r7, #28]
}
   30d3c:	0018      	movs	r0, r3
   30d3e:	46bd      	mov	sp, r7
   30d40:	b008      	add	sp, #32
   30d42:	bd80      	pop	{r7, pc}
   30d44:	00031167 	.word	0x00031167
   30d48:	00030f4d 	.word	0x00030f4d

00030d4c <MQTTSerialize_disconnect>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_disconnect(unsigned char* buf, int buflen)
{
   30d4c:	b580      	push	{r7, lr}
   30d4e:	b082      	sub	sp, #8
   30d50:	af00      	add	r7, sp, #0
   30d52:	6078      	str	r0, [r7, #4]
   30d54:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, DISCONNECT);
   30d56:	6839      	ldr	r1, [r7, #0]
   30d58:	687b      	ldr	r3, [r7, #4]
   30d5a:	220e      	movs	r2, #14
   30d5c:	0018      	movs	r0, r3
   30d5e:	4b03      	ldr	r3, [pc, #12]	; (30d6c <MQTTSerialize_disconnect+0x20>)
   30d60:	4798      	blx	r3
   30d62:	0003      	movs	r3, r0
}
   30d64:	0018      	movs	r0, r3
   30d66:	46bd      	mov	sp, r7
   30d68:	b002      	add	sp, #8
   30d6a:	bd80      	pop	{r7, pc}
   30d6c:	00030cbd 	.word	0x00030cbd

00030d70 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
   30d70:	b580      	push	{r7, lr}
   30d72:	b082      	sub	sp, #8
   30d74:	af00      	add	r7, sp, #0
   30d76:	6078      	str	r0, [r7, #4]
   30d78:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
   30d7a:	6839      	ldr	r1, [r7, #0]
   30d7c:	687b      	ldr	r3, [r7, #4]
   30d7e:	220c      	movs	r2, #12
   30d80:	0018      	movs	r0, r3
   30d82:	4b03      	ldr	r3, [pc, #12]	; (30d90 <MQTTSerialize_pingreq+0x20>)
   30d84:	4798      	blx	r3
   30d86:	0003      	movs	r3, r0
}
   30d88:	0018      	movs	r0, r3
   30d8a:	46bd      	mov	sp, r7
   30d8c:	b002      	add	sp, #8
   30d8e:	bd80      	pop	{r7, pc}
   30d90:	00030cbd 	.word	0x00030cbd

00030d94 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
   30d94:	b580      	push	{r7, lr}
   30d96:	b08a      	sub	sp, #40	; 0x28
   30d98:	af00      	add	r7, sp, #0
   30d9a:	60f8      	str	r0, [r7, #12]
   30d9c:	60b9      	str	r1, [r7, #8]
   30d9e:	607a      	str	r2, [r7, #4]
   30da0:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   30da2:	2300      	movs	r3, #0
   30da4:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   30da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   30da8:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   30daa:	2300      	movs	r3, #0
   30dac:	623b      	str	r3, [r7, #32]
	int rc = 0;
   30dae:	2300      	movs	r3, #0
   30db0:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
   30db2:	2300      	movs	r3, #0
   30db4:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   30db6:	2318      	movs	r3, #24
   30db8:	18fb      	adds	r3, r7, r3
   30dba:	0018      	movs	r0, r3
   30dbc:	4b32      	ldr	r3, [pc, #200]	; (30e88 <MQTTDeserialize_publish+0xf4>)
   30dbe:	4798      	blx	r3
   30dc0:	0003      	movs	r3, r0
   30dc2:	001a      	movs	r2, r3
   30dc4:	231c      	movs	r3, #28
   30dc6:	18fb      	adds	r3, r7, r3
   30dc8:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != PUBLISH)
   30dca:	231c      	movs	r3, #28
   30dcc:	18fb      	adds	r3, r7, r3
   30dce:	781b      	ldrb	r3, [r3, #0]
   30dd0:	220f      	movs	r2, #15
   30dd2:	4393      	bics	r3, r2
   30dd4:	b2db      	uxtb	r3, r3
   30dd6:	2b30      	cmp	r3, #48	; 0x30
   30dd8:	d150      	bne.n	30e7c <MQTTDeserialize_publish+0xe8>
		goto exit;
	*dup = header.bits.dup;
   30dda:	231c      	movs	r3, #28
   30ddc:	18fb      	adds	r3, r7, r3
   30dde:	781b      	ldrb	r3, [r3, #0]
   30de0:	071b      	lsls	r3, r3, #28
   30de2:	0fdb      	lsrs	r3, r3, #31
   30de4:	b2db      	uxtb	r3, r3
   30de6:	001a      	movs	r2, r3
   30de8:	68fb      	ldr	r3, [r7, #12]
   30dea:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
   30dec:	231c      	movs	r3, #28
   30dee:	18fb      	adds	r3, r7, r3
   30df0:	781b      	ldrb	r3, [r3, #0]
   30df2:	075b      	lsls	r3, r3, #29
   30df4:	0f9b      	lsrs	r3, r3, #30
   30df6:	b2db      	uxtb	r3, r3
   30df8:	001a      	movs	r2, r3
   30dfa:	68bb      	ldr	r3, [r7, #8]
   30dfc:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
   30dfe:	231c      	movs	r3, #28
   30e00:	18fb      	adds	r3, r7, r3
   30e02:	781b      	ldrb	r3, [r3, #0]
   30e04:	07db      	lsls	r3, r3, #31
   30e06:	0fdb      	lsrs	r3, r3, #31
   30e08:	b2db      	uxtb	r3, r3
   30e0a:	001a      	movs	r2, r3
   30e0c:	687b      	ldr	r3, [r7, #4]
   30e0e:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   30e10:	69bb      	ldr	r3, [r7, #24]
   30e12:	2214      	movs	r2, #20
   30e14:	18ba      	adds	r2, r7, r2
   30e16:	0011      	movs	r1, r2
   30e18:	0018      	movs	r0, r3
   30e1a:	4b1c      	ldr	r3, [pc, #112]	; (30e8c <MQTTDeserialize_publish+0xf8>)
   30e1c:	4798      	blx	r3
   30e1e:	0003      	movs	r3, r0
   30e20:	627b      	str	r3, [r7, #36]	; 0x24
   30e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30e24:	69bb      	ldr	r3, [r7, #24]
   30e26:	189b      	adds	r3, r3, r2
   30e28:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   30e2a:	69bb      	ldr	r3, [r7, #24]
   30e2c:	697a      	ldr	r2, [r7, #20]
   30e2e:	189b      	adds	r3, r3, r2
   30e30:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   30e32:	6a3a      	ldr	r2, [r7, #32]
   30e34:	2318      	movs	r3, #24
   30e36:	18f9      	adds	r1, r7, r3
   30e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   30e3a:	0018      	movs	r0, r3
   30e3c:	4b14      	ldr	r3, [pc, #80]	; (30e90 <MQTTDeserialize_publish+0xfc>)
   30e3e:	4798      	blx	r3
   30e40:	1e03      	subs	r3, r0, #0
   30e42:	d01c      	beq.n	30e7e <MQTTDeserialize_publish+0xea>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
   30e44:	6a3b      	ldr	r3, [r7, #32]
   30e46:	69ba      	ldr	r2, [r7, #24]
   30e48:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
   30e4a:	d418      	bmi.n	30e7e <MQTTDeserialize_publish+0xea>
		goto exit;

	if (*qos > 0)
   30e4c:	68bb      	ldr	r3, [r7, #8]
   30e4e:	681b      	ldr	r3, [r3, #0]
   30e50:	2b00      	cmp	r3, #0
   30e52:	dd08      	ble.n	30e66 <MQTTDeserialize_publish+0xd2>
		*packetid = readInt(&curdata);
   30e54:	2318      	movs	r3, #24
   30e56:	18fb      	adds	r3, r7, r3
   30e58:	0018      	movs	r0, r3
   30e5a:	4b0e      	ldr	r3, [pc, #56]	; (30e94 <MQTTDeserialize_publish+0x100>)
   30e5c:	4798      	blx	r3
   30e5e:	0003      	movs	r3, r0
   30e60:	b29a      	uxth	r2, r3
   30e62:	683b      	ldr	r3, [r7, #0]
   30e64:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
   30e66:	6a3b      	ldr	r3, [r7, #32]
   30e68:	69ba      	ldr	r2, [r7, #24]
   30e6a:	1a9a      	subs	r2, r3, r2
   30e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   30e6e:	601a      	str	r2, [r3, #0]
	*payload = curdata;
   30e70:	69ba      	ldr	r2, [r7, #24]
   30e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
   30e74:	601a      	str	r2, [r3, #0]
	rc = 1;
   30e76:	2301      	movs	r3, #1
   30e78:	627b      	str	r3, [r7, #36]	; 0x24
   30e7a:	e000      	b.n	30e7e <MQTTDeserialize_publish+0xea>
		goto exit;
   30e7c:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30e80:	0018      	movs	r0, r3
   30e82:	46bd      	mov	sp, r7
   30e84:	b00a      	add	sp, #40	; 0x28
   30e86:	bd80      	pop	{r7, pc}
   30e88:	0003113b 	.word	0x0003113b
   30e8c:	000310d5 	.word	0x000310d5
   30e90:	000312b9 	.word	0x000312b9
   30e94:	00031109 	.word	0x00031109

00030e98 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
   30e98:	b580      	push	{r7, lr}
   30e9a:	b08a      	sub	sp, #40	; 0x28
   30e9c:	af00      	add	r7, sp, #0
   30e9e:	60f8      	str	r0, [r7, #12]
   30ea0:	60b9      	str	r1, [r7, #8]
   30ea2:	607a      	str	r2, [r7, #4]
   30ea4:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   30ea6:	2300      	movs	r3, #0
   30ea8:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   30eaa:	683b      	ldr	r3, [r7, #0]
   30eac:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   30eae:	2300      	movs	r3, #0
   30eb0:	623b      	str	r3, [r7, #32]
	int rc = 0;
   30eb2:	2300      	movs	r3, #0
   30eb4:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   30eb6:	2318      	movs	r3, #24
   30eb8:	18fb      	adds	r3, r7, r3
   30eba:	0018      	movs	r0, r3
   30ebc:	4b20      	ldr	r3, [pc, #128]	; (30f40 <MQTTDeserialize_ack+0xa8>)
   30ebe:	4798      	blx	r3
   30ec0:	0003      	movs	r3, r0
   30ec2:	001a      	movs	r2, r3
   30ec4:	231c      	movs	r3, #28
   30ec6:	18fb      	adds	r3, r7, r3
   30ec8:	701a      	strb	r2, [r3, #0]
	*dup = header.bits.dup;
   30eca:	231c      	movs	r3, #28
   30ecc:	18fb      	adds	r3, r7, r3
   30ece:	781b      	ldrb	r3, [r3, #0]
   30ed0:	071b      	lsls	r3, r3, #28
   30ed2:	0fdb      	lsrs	r3, r3, #31
   30ed4:	b2db      	uxtb	r3, r3
   30ed6:	001a      	movs	r2, r3
   30ed8:	68bb      	ldr	r3, [r7, #8]
   30eda:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
   30edc:	231c      	movs	r3, #28
   30ede:	18fb      	adds	r3, r7, r3
   30ee0:	781b      	ldrb	r3, [r3, #0]
   30ee2:	061b      	lsls	r3, r3, #24
   30ee4:	0f1b      	lsrs	r3, r3, #28
   30ee6:	b2db      	uxtb	r3, r3
   30ee8:	001a      	movs	r2, r3
   30eea:	68fb      	ldr	r3, [r7, #12]
   30eec:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   30eee:	69bb      	ldr	r3, [r7, #24]
   30ef0:	2214      	movs	r2, #20
   30ef2:	18ba      	adds	r2, r7, r2
   30ef4:	0011      	movs	r1, r2
   30ef6:	0018      	movs	r0, r3
   30ef8:	4b12      	ldr	r3, [pc, #72]	; (30f44 <MQTTDeserialize_ack+0xac>)
   30efa:	4798      	blx	r3
   30efc:	0003      	movs	r3, r0
   30efe:	627b      	str	r3, [r7, #36]	; 0x24
   30f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   30f02:	69bb      	ldr	r3, [r7, #24]
   30f04:	189b      	adds	r3, r3, r2
   30f06:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   30f08:	69bb      	ldr	r3, [r7, #24]
   30f0a:	697a      	ldr	r2, [r7, #20]
   30f0c:	189b      	adds	r3, r3, r2
   30f0e:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
   30f10:	6a3b      	ldr	r3, [r7, #32]
   30f12:	69ba      	ldr	r2, [r7, #24]
   30f14:	1a9b      	subs	r3, r3, r2
   30f16:	2b01      	cmp	r3, #1
   30f18:	dd0b      	ble.n	30f32 <MQTTDeserialize_ack+0x9a>
		goto exit;
	*packetid = readInt(&curdata);
   30f1a:	2318      	movs	r3, #24
   30f1c:	18fb      	adds	r3, r7, r3
   30f1e:	0018      	movs	r0, r3
   30f20:	4b09      	ldr	r3, [pc, #36]	; (30f48 <MQTTDeserialize_ack+0xb0>)
   30f22:	4798      	blx	r3
   30f24:	0003      	movs	r3, r0
   30f26:	b29a      	uxth	r2, r3
   30f28:	687b      	ldr	r3, [r7, #4]
   30f2a:	801a      	strh	r2, [r3, #0]

	rc = 1;
   30f2c:	2301      	movs	r3, #1
   30f2e:	627b      	str	r3, [r7, #36]	; 0x24
   30f30:	e000      	b.n	30f34 <MQTTDeserialize_ack+0x9c>
		goto exit;
   30f32:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   30f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   30f36:	0018      	movs	r0, r3
   30f38:	46bd      	mov	sp, r7
   30f3a:	b00a      	add	sp, #40	; 0x28
   30f3c:	bd80      	pop	{r7, pc}
   30f3e:	46c0      	nop			; (mov r8, r8)
   30f40:	0003113b 	.word	0x0003113b
   30f44:	000310d5 	.word	0x000310d5
   30f48:	00031109 	.word	0x00031109

00030f4c <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
   30f4c:	b580      	push	{r7, lr}
   30f4e:	b084      	sub	sp, #16
   30f50:	af00      	add	r7, sp, #0
   30f52:	6078      	str	r0, [r7, #4]
   30f54:	6039      	str	r1, [r7, #0]
	int rc = 0;
   30f56:	2300      	movs	r3, #0
   30f58:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
   30f5a:	683b      	ldr	r3, [r7, #0]
   30f5c:	4a17      	ldr	r2, [pc, #92]	; (30fbc <MQTTPacket_encode+0x70>)
   30f5e:	4013      	ands	r3, r2
   30f60:	d504      	bpl.n	30f6c <MQTTPacket_encode+0x20>
   30f62:	3b01      	subs	r3, #1
   30f64:	2280      	movs	r2, #128	; 0x80
   30f66:	4252      	negs	r2, r2
   30f68:	4313      	orrs	r3, r2
   30f6a:	3301      	adds	r3, #1
   30f6c:	001a      	movs	r2, r3
   30f6e:	230b      	movs	r3, #11
   30f70:	18fb      	adds	r3, r7, r3
   30f72:	701a      	strb	r2, [r3, #0]
		length /= 128;
   30f74:	683b      	ldr	r3, [r7, #0]
   30f76:	2b00      	cmp	r3, #0
   30f78:	da00      	bge.n	30f7c <MQTTPacket_encode+0x30>
   30f7a:	337f      	adds	r3, #127	; 0x7f
   30f7c:	11db      	asrs	r3, r3, #7
   30f7e:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
   30f80:	683b      	ldr	r3, [r7, #0]
   30f82:	2b00      	cmp	r3, #0
   30f84:	dd08      	ble.n	30f98 <MQTTPacket_encode+0x4c>
			d |= 0x80;
   30f86:	230b      	movs	r3, #11
   30f88:	18fb      	adds	r3, r7, r3
   30f8a:	220b      	movs	r2, #11
   30f8c:	18ba      	adds	r2, r7, r2
   30f8e:	7812      	ldrb	r2, [r2, #0]
   30f90:	2180      	movs	r1, #128	; 0x80
   30f92:	4249      	negs	r1, r1
   30f94:	430a      	orrs	r2, r1
   30f96:	701a      	strb	r2, [r3, #0]
		buf[rc++] = d;
   30f98:	68fb      	ldr	r3, [r7, #12]
   30f9a:	1c5a      	adds	r2, r3, #1
   30f9c:	60fa      	str	r2, [r7, #12]
   30f9e:	001a      	movs	r2, r3
   30fa0:	687b      	ldr	r3, [r7, #4]
   30fa2:	189b      	adds	r3, r3, r2
   30fa4:	220b      	movs	r2, #11
   30fa6:	18ba      	adds	r2, r7, r2
   30fa8:	7812      	ldrb	r2, [r2, #0]
   30faa:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
   30fac:	683b      	ldr	r3, [r7, #0]
   30fae:	2b00      	cmp	r3, #0
   30fb0:	dcd3      	bgt.n	30f5a <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
   30fb2:	68fb      	ldr	r3, [r7, #12]
}
   30fb4:	0018      	movs	r0, r3
   30fb6:	46bd      	mov	sp, r7
   30fb8:	b004      	add	sp, #16
   30fba:	bd80      	pop	{r7, pc}
   30fbc:	8000007f 	.word	0x8000007f

00030fc0 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
   30fc0:	b580      	push	{r7, lr}
   30fc2:	b086      	sub	sp, #24
   30fc4:	af00      	add	r7, sp, #0
   30fc6:	6078      	str	r0, [r7, #4]
   30fc8:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
   30fca:	2301      	movs	r3, #1
   30fcc:	617b      	str	r3, [r7, #20]
	int len = 0;
   30fce:	2300      	movs	r3, #0
   30fd0:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
   30fd2:	683b      	ldr	r3, [r7, #0]
   30fd4:	2200      	movs	r2, #0
   30fd6:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
   30fd8:	2301      	movs	r3, #1
   30fda:	425b      	negs	r3, r3
   30fdc:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
   30fde:	693b      	ldr	r3, [r7, #16]
   30fe0:	3301      	adds	r3, #1
   30fe2:	613b      	str	r3, [r7, #16]
   30fe4:	693b      	ldr	r3, [r7, #16]
   30fe6:	2b04      	cmp	r3, #4
   30fe8:	dd03      	ble.n	30ff2 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
   30fea:	2301      	movs	r3, #1
   30fec:	425b      	negs	r3, r3
   30fee:	60fb      	str	r3, [r7, #12]
			goto exit;
   30ff0:	e022      	b.n	31038 <MQTTPacket_decode+0x78>
		}
		rc = (*getcharfn)(&c, 1);
   30ff2:	230b      	movs	r3, #11
   30ff4:	18fa      	adds	r2, r7, r3
   30ff6:	687b      	ldr	r3, [r7, #4]
   30ff8:	2101      	movs	r1, #1
   30ffa:	0010      	movs	r0, r2
   30ffc:	4798      	blx	r3
   30ffe:	0003      	movs	r3, r0
   31000:	60fb      	str	r3, [r7, #12]
		if (rc != 1)
   31002:	68fb      	ldr	r3, [r7, #12]
   31004:	2b01      	cmp	r3, #1
   31006:	d116      	bne.n	31036 <MQTTPacket_decode+0x76>
			goto exit;
		*value += (c & 127) * multiplier;
   31008:	683b      	ldr	r3, [r7, #0]
   3100a:	681a      	ldr	r2, [r3, #0]
   3100c:	230b      	movs	r3, #11
   3100e:	18fb      	adds	r3, r7, r3
   31010:	781b      	ldrb	r3, [r3, #0]
   31012:	0019      	movs	r1, r3
   31014:	237f      	movs	r3, #127	; 0x7f
   31016:	400b      	ands	r3, r1
   31018:	6979      	ldr	r1, [r7, #20]
   3101a:	434b      	muls	r3, r1
   3101c:	18d2      	adds	r2, r2, r3
   3101e:	683b      	ldr	r3, [r7, #0]
   31020:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
   31022:	697b      	ldr	r3, [r7, #20]
   31024:	01db      	lsls	r3, r3, #7
   31026:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
   31028:	230b      	movs	r3, #11
   3102a:	18fb      	adds	r3, r7, r3
   3102c:	781b      	ldrb	r3, [r3, #0]
   3102e:	b25b      	sxtb	r3, r3
   31030:	2b00      	cmp	r3, #0
   31032:	dbd1      	blt.n	30fd8 <MQTTPacket_decode+0x18>
   31034:	e000      	b.n	31038 <MQTTPacket_decode+0x78>
			goto exit;
   31036:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(len);
	return len;
   31038:	693b      	ldr	r3, [r7, #16]
}
   3103a:	0018      	movs	r0, r3
   3103c:	46bd      	mov	sp, r7
   3103e:	b006      	add	sp, #24
   31040:	bd80      	pop	{r7, pc}
	...

00031044 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
   31044:	b580      	push	{r7, lr}
   31046:	b082      	sub	sp, #8
   31048:	af00      	add	r7, sp, #0
   3104a:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
   3104c:	687b      	ldr	r3, [r7, #4]
   3104e:	3301      	adds	r3, #1
   31050:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
   31052:	687b      	ldr	r3, [r7, #4]
   31054:	2b7f      	cmp	r3, #127	; 0x7f
   31056:	dc03      	bgt.n	31060 <MQTTPacket_len+0x1c>
		rem_len += 1;
   31058:	687b      	ldr	r3, [r7, #4]
   3105a:	3301      	adds	r3, #1
   3105c:	607b      	str	r3, [r7, #4]
   3105e:	e012      	b.n	31086 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
   31060:	687b      	ldr	r3, [r7, #4]
   31062:	4a0b      	ldr	r2, [pc, #44]	; (31090 <MQTTPacket_len+0x4c>)
   31064:	4293      	cmp	r3, r2
   31066:	dc03      	bgt.n	31070 <MQTTPacket_len+0x2c>
		rem_len += 2;
   31068:	687b      	ldr	r3, [r7, #4]
   3106a:	3302      	adds	r3, #2
   3106c:	607b      	str	r3, [r7, #4]
   3106e:	e00a      	b.n	31086 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
   31070:	687b      	ldr	r3, [r7, #4]
   31072:	4a08      	ldr	r2, [pc, #32]	; (31094 <MQTTPacket_len+0x50>)
   31074:	4293      	cmp	r3, r2
   31076:	dc03      	bgt.n	31080 <MQTTPacket_len+0x3c>
		rem_len += 3;
   31078:	687b      	ldr	r3, [r7, #4]
   3107a:	3303      	adds	r3, #3
   3107c:	607b      	str	r3, [r7, #4]
   3107e:	e002      	b.n	31086 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
   31080:	687b      	ldr	r3, [r7, #4]
   31082:	3304      	adds	r3, #4
   31084:	607b      	str	r3, [r7, #4]
	return rem_len;
   31086:	687b      	ldr	r3, [r7, #4]
}
   31088:	0018      	movs	r0, r3
   3108a:	46bd      	mov	sp, r7
   3108c:	b002      	add	sp, #8
   3108e:	bd80      	pop	{r7, pc}
   31090:	00003fff 	.word	0x00003fff
   31094:	001ffffe 	.word	0x001ffffe

00031098 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
   31098:	b580      	push	{r7, lr}
   3109a:	b084      	sub	sp, #16
   3109c:	af00      	add	r7, sp, #0
   3109e:	6078      	str	r0, [r7, #4]
   310a0:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
   310a2:	2300      	movs	r3, #0
   310a4:	60fb      	str	r3, [r7, #12]
   310a6:	e00a      	b.n	310be <bufchar+0x26>
		*c = *bufptr++;
   310a8:	4b09      	ldr	r3, [pc, #36]	; (310d0 <bufchar+0x38>)
   310aa:	681b      	ldr	r3, [r3, #0]
   310ac:	1c59      	adds	r1, r3, #1
   310ae:	4a08      	ldr	r2, [pc, #32]	; (310d0 <bufchar+0x38>)
   310b0:	6011      	str	r1, [r2, #0]
   310b2:	781a      	ldrb	r2, [r3, #0]
   310b4:	687b      	ldr	r3, [r7, #4]
   310b6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
   310b8:	68fb      	ldr	r3, [r7, #12]
   310ba:	3301      	adds	r3, #1
   310bc:	60fb      	str	r3, [r7, #12]
   310be:	68fa      	ldr	r2, [r7, #12]
   310c0:	683b      	ldr	r3, [r7, #0]
   310c2:	429a      	cmp	r2, r3
   310c4:	dbf0      	blt.n	310a8 <bufchar+0x10>
	return count;
   310c6:	683b      	ldr	r3, [r7, #0]
}
   310c8:	0018      	movs	r0, r3
   310ca:	46bd      	mov	sp, r7
   310cc:	b004      	add	sp, #16
   310ce:	bd80      	pop	{r7, pc}
   310d0:	200046f0 	.word	0x200046f0

000310d4 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
   310d4:	b580      	push	{r7, lr}
   310d6:	b082      	sub	sp, #8
   310d8:	af00      	add	r7, sp, #0
   310da:	6078      	str	r0, [r7, #4]
   310dc:	6039      	str	r1, [r7, #0]
	bufptr = buf;
   310de:	4b07      	ldr	r3, [pc, #28]	; (310fc <MQTTPacket_decodeBuf+0x28>)
   310e0:	687a      	ldr	r2, [r7, #4]
   310e2:	601a      	str	r2, [r3, #0]
	return MQTTPacket_decode(bufchar, value);
   310e4:	683a      	ldr	r2, [r7, #0]
   310e6:	4b06      	ldr	r3, [pc, #24]	; (31100 <MQTTPacket_decodeBuf+0x2c>)
   310e8:	0011      	movs	r1, r2
   310ea:	0018      	movs	r0, r3
   310ec:	4b05      	ldr	r3, [pc, #20]	; (31104 <MQTTPacket_decodeBuf+0x30>)
   310ee:	4798      	blx	r3
   310f0:	0003      	movs	r3, r0
}
   310f2:	0018      	movs	r0, r3
   310f4:	46bd      	mov	sp, r7
   310f6:	b002      	add	sp, #8
   310f8:	bd80      	pop	{r7, pc}
   310fa:	46c0      	nop			; (mov r8, r8)
   310fc:	200046f0 	.word	0x200046f0
   31100:	00031099 	.word	0x00031099
   31104:	00030fc1 	.word	0x00030fc1

00031108 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
   31108:	b580      	push	{r7, lr}
   3110a:	b084      	sub	sp, #16
   3110c:	af00      	add	r7, sp, #0
   3110e:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
   31110:	687b      	ldr	r3, [r7, #4]
   31112:	681b      	ldr	r3, [r3, #0]
   31114:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
   31116:	68fb      	ldr	r3, [r7, #12]
   31118:	781b      	ldrb	r3, [r3, #0]
   3111a:	021b      	lsls	r3, r3, #8
   3111c:	68fa      	ldr	r2, [r7, #12]
   3111e:	3201      	adds	r2, #1
   31120:	7812      	ldrb	r2, [r2, #0]
   31122:	189b      	adds	r3, r3, r2
   31124:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
   31126:	687b      	ldr	r3, [r7, #4]
   31128:	681b      	ldr	r3, [r3, #0]
   3112a:	1c9a      	adds	r2, r3, #2
   3112c:	687b      	ldr	r3, [r7, #4]
   3112e:	601a      	str	r2, [r3, #0]
	return len;
   31130:	68bb      	ldr	r3, [r7, #8]
}
   31132:	0018      	movs	r0, r3
   31134:	46bd      	mov	sp, r7
   31136:	b004      	add	sp, #16
   31138:	bd80      	pop	{r7, pc}

0003113a <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
   3113a:	b580      	push	{r7, lr}
   3113c:	b084      	sub	sp, #16
   3113e:	af00      	add	r7, sp, #0
   31140:	6078      	str	r0, [r7, #4]
	char c = **pptr;
   31142:	687b      	ldr	r3, [r7, #4]
   31144:	681a      	ldr	r2, [r3, #0]
   31146:	230f      	movs	r3, #15
   31148:	18fb      	adds	r3, r7, r3
   3114a:	7812      	ldrb	r2, [r2, #0]
   3114c:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   3114e:	687b      	ldr	r3, [r7, #4]
   31150:	681b      	ldr	r3, [r3, #0]
   31152:	1c5a      	adds	r2, r3, #1
   31154:	687b      	ldr	r3, [r7, #4]
   31156:	601a      	str	r2, [r3, #0]
	return c;
   31158:	230f      	movs	r3, #15
   3115a:	18fb      	adds	r3, r7, r3
   3115c:	781b      	ldrb	r3, [r3, #0]
}
   3115e:	0018      	movs	r0, r3
   31160:	46bd      	mov	sp, r7
   31162:	b004      	add	sp, #16
   31164:	bd80      	pop	{r7, pc}

00031166 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
   31166:	b580      	push	{r7, lr}
   31168:	b082      	sub	sp, #8
   3116a:	af00      	add	r7, sp, #0
   3116c:	6078      	str	r0, [r7, #4]
   3116e:	000a      	movs	r2, r1
   31170:	1cfb      	adds	r3, r7, #3
   31172:	701a      	strb	r2, [r3, #0]
	**pptr = c;
   31174:	687b      	ldr	r3, [r7, #4]
   31176:	681b      	ldr	r3, [r3, #0]
   31178:	1cfa      	adds	r2, r7, #3
   3117a:	7812      	ldrb	r2, [r2, #0]
   3117c:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
   3117e:	687b      	ldr	r3, [r7, #4]
   31180:	681b      	ldr	r3, [r3, #0]
   31182:	1c5a      	adds	r2, r3, #1
   31184:	687b      	ldr	r3, [r7, #4]
   31186:	601a      	str	r2, [r3, #0]
}
   31188:	46c0      	nop			; (mov r8, r8)
   3118a:	46bd      	mov	sp, r7
   3118c:	b002      	add	sp, #8
   3118e:	bd80      	pop	{r7, pc}

00031190 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
   31190:	b580      	push	{r7, lr}
   31192:	b082      	sub	sp, #8
   31194:	af00      	add	r7, sp, #0
   31196:	6078      	str	r0, [r7, #4]
   31198:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
   3119a:	687b      	ldr	r3, [r7, #4]
   3119c:	681a      	ldr	r2, [r3, #0]
   3119e:	683b      	ldr	r3, [r7, #0]
   311a0:	2b00      	cmp	r3, #0
   311a2:	da00      	bge.n	311a6 <writeInt+0x16>
   311a4:	33ff      	adds	r3, #255	; 0xff
   311a6:	121b      	asrs	r3, r3, #8
   311a8:	b2db      	uxtb	r3, r3
   311aa:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   311ac:	687b      	ldr	r3, [r7, #4]
   311ae:	681b      	ldr	r3, [r3, #0]
   311b0:	1c5a      	adds	r2, r3, #1
   311b2:	687b      	ldr	r3, [r7, #4]
   311b4:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
   311b6:	687b      	ldr	r3, [r7, #4]
   311b8:	681a      	ldr	r2, [r3, #0]
   311ba:	683b      	ldr	r3, [r7, #0]
   311bc:	4908      	ldr	r1, [pc, #32]	; (311e0 <writeInt+0x50>)
   311be:	400b      	ands	r3, r1
   311c0:	d503      	bpl.n	311ca <writeInt+0x3a>
   311c2:	3b01      	subs	r3, #1
   311c4:	4907      	ldr	r1, [pc, #28]	; (311e4 <writeInt+0x54>)
   311c6:	430b      	orrs	r3, r1
   311c8:	3301      	adds	r3, #1
   311ca:	b2db      	uxtb	r3, r3
   311cc:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
   311ce:	687b      	ldr	r3, [r7, #4]
   311d0:	681b      	ldr	r3, [r3, #0]
   311d2:	1c5a      	adds	r2, r3, #1
   311d4:	687b      	ldr	r3, [r7, #4]
   311d6:	601a      	str	r2, [r3, #0]
}
   311d8:	46c0      	nop			; (mov r8, r8)
   311da:	46bd      	mov	sp, r7
   311dc:	b002      	add	sp, #8
   311de:	bd80      	pop	{r7, pc}
   311e0:	800000ff 	.word	0x800000ff
   311e4:	ffffff00 	.word	0xffffff00

000311e8 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
   311e8:	b580      	push	{r7, lr}
   311ea:	b084      	sub	sp, #16
   311ec:	af00      	add	r7, sp, #0
   311ee:	6078      	str	r0, [r7, #4]
   311f0:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
   311f2:	683b      	ldr	r3, [r7, #0]
   311f4:	0018      	movs	r0, r3
   311f6:	4b0d      	ldr	r3, [pc, #52]	; (3122c <writeCString+0x44>)
   311f8:	4798      	blx	r3
   311fa:	0003      	movs	r3, r0
   311fc:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
   311fe:	68fa      	ldr	r2, [r7, #12]
   31200:	687b      	ldr	r3, [r7, #4]
   31202:	0011      	movs	r1, r2
   31204:	0018      	movs	r0, r3
   31206:	4b0a      	ldr	r3, [pc, #40]	; (31230 <writeCString+0x48>)
   31208:	4798      	blx	r3
	memcpy(*pptr, string, len);
   3120a:	687b      	ldr	r3, [r7, #4]
   3120c:	681b      	ldr	r3, [r3, #0]
   3120e:	68fa      	ldr	r2, [r7, #12]
   31210:	6839      	ldr	r1, [r7, #0]
   31212:	0018      	movs	r0, r3
   31214:	4b07      	ldr	r3, [pc, #28]	; (31234 <writeCString+0x4c>)
   31216:	4798      	blx	r3
	*pptr += len;
   31218:	687b      	ldr	r3, [r7, #4]
   3121a:	681a      	ldr	r2, [r3, #0]
   3121c:	68fb      	ldr	r3, [r7, #12]
   3121e:	18d2      	adds	r2, r2, r3
   31220:	687b      	ldr	r3, [r7, #4]
   31222:	601a      	str	r2, [r3, #0]
}
   31224:	46c0      	nop			; (mov r8, r8)
   31226:	46bd      	mov	sp, r7
   31228:	b004      	add	sp, #16
   3122a:	bd80      	pop	{r7, pc}
   3122c:	00035be7 	.word	0x00035be7
   31230:	00031191 	.word	0x00031191
   31234:	000357f9 	.word	0x000357f9

00031238 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
   31238:	b580      	push	{r7, lr}
   3123a:	b084      	sub	sp, #16
   3123c:	af00      	add	r7, sp, #0
   3123e:	60f8      	str	r0, [r7, #12]
   31240:	0038      	movs	r0, r7
   31242:	6001      	str	r1, [r0, #0]
   31244:	6042      	str	r2, [r0, #4]
   31246:	6083      	str	r3, [r0, #8]
	if (mqttstring.lenstring.len > 0)
   31248:	003b      	movs	r3, r7
   3124a:	685b      	ldr	r3, [r3, #4]
   3124c:	2b00      	cmp	r3, #0
   3124e:	dd17      	ble.n	31280 <writeMQTTString+0x48>
	{
		writeInt(pptr, mqttstring.lenstring.len);
   31250:	003b      	movs	r3, r7
   31252:	685a      	ldr	r2, [r3, #4]
   31254:	68fb      	ldr	r3, [r7, #12]
   31256:	0011      	movs	r1, r2
   31258:	0018      	movs	r0, r3
   3125a:	4b14      	ldr	r3, [pc, #80]	; (312ac <writeMQTTString+0x74>)
   3125c:	4798      	blx	r3
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
   3125e:	68fb      	ldr	r3, [r7, #12]
   31260:	6818      	ldr	r0, [r3, #0]
   31262:	003b      	movs	r3, r7
   31264:	6899      	ldr	r1, [r3, #8]
   31266:	003b      	movs	r3, r7
   31268:	685b      	ldr	r3, [r3, #4]
   3126a:	001a      	movs	r2, r3
   3126c:	4b10      	ldr	r3, [pc, #64]	; (312b0 <writeMQTTString+0x78>)
   3126e:	4798      	blx	r3
		*pptr += mqttstring.lenstring.len;
   31270:	68fb      	ldr	r3, [r7, #12]
   31272:	681a      	ldr	r2, [r3, #0]
   31274:	003b      	movs	r3, r7
   31276:	685b      	ldr	r3, [r3, #4]
   31278:	18d2      	adds	r2, r2, r3
   3127a:	68fb      	ldr	r3, [r7, #12]
   3127c:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
   3127e:	e010      	b.n	312a2 <writeMQTTString+0x6a>
	else if (mqttstring.cstring)
   31280:	003b      	movs	r3, r7
   31282:	681b      	ldr	r3, [r3, #0]
   31284:	2b00      	cmp	r3, #0
   31286:	d007      	beq.n	31298 <writeMQTTString+0x60>
		writeCString(pptr, mqttstring.cstring);
   31288:	003b      	movs	r3, r7
   3128a:	681a      	ldr	r2, [r3, #0]
   3128c:	68fb      	ldr	r3, [r7, #12]
   3128e:	0011      	movs	r1, r2
   31290:	0018      	movs	r0, r3
   31292:	4b08      	ldr	r3, [pc, #32]	; (312b4 <writeMQTTString+0x7c>)
   31294:	4798      	blx	r3
}
   31296:	e004      	b.n	312a2 <writeMQTTString+0x6a>
		writeInt(pptr, 0);
   31298:	68fb      	ldr	r3, [r7, #12]
   3129a:	2100      	movs	r1, #0
   3129c:	0018      	movs	r0, r3
   3129e:	4b03      	ldr	r3, [pc, #12]	; (312ac <writeMQTTString+0x74>)
   312a0:	4798      	blx	r3
}
   312a2:	46c0      	nop			; (mov r8, r8)
   312a4:	46bd      	mov	sp, r7
   312a6:	b004      	add	sp, #16
   312a8:	bd80      	pop	{r7, pc}
   312aa:	46c0      	nop			; (mov r8, r8)
   312ac:	00031191 	.word	0x00031191
   312b0:	000357f9 	.word	0x000357f9
   312b4:	000311e9 	.word	0x000311e9

000312b8 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
   312b8:	b580      	push	{r7, lr}
   312ba:	b086      	sub	sp, #24
   312bc:	af00      	add	r7, sp, #0
   312be:	60f8      	str	r0, [r7, #12]
   312c0:	60b9      	str	r1, [r7, #8]
   312c2:	607a      	str	r2, [r7, #4]
	int rc = 0;
   312c4:	2300      	movs	r3, #0
   312c6:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
   312c8:	687a      	ldr	r2, [r7, #4]
   312ca:	68bb      	ldr	r3, [r7, #8]
   312cc:	681b      	ldr	r3, [r3, #0]
   312ce:	1ad3      	subs	r3, r2, r3
   312d0:	2b01      	cmp	r3, #1
   312d2:	dd1b      	ble.n	3130c <readMQTTLenString+0x54>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
   312d4:	68bb      	ldr	r3, [r7, #8]
   312d6:	0018      	movs	r0, r3
   312d8:	4b10      	ldr	r3, [pc, #64]	; (3131c <readMQTTLenString+0x64>)
   312da:	4798      	blx	r3
   312dc:	0002      	movs	r2, r0
   312de:	68fb      	ldr	r3, [r7, #12]
   312e0:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
   312e2:	68bb      	ldr	r3, [r7, #8]
   312e4:	681a      	ldr	r2, [r3, #0]
   312e6:	68fb      	ldr	r3, [r7, #12]
   312e8:	685b      	ldr	r3, [r3, #4]
   312ea:	18d2      	adds	r2, r2, r3
   312ec:	687b      	ldr	r3, [r7, #4]
   312ee:	429a      	cmp	r2, r3
   312f0:	d80c      	bhi.n	3130c <readMQTTLenString+0x54>
		{
			mqttstring->lenstring.data = (char*)*pptr;
   312f2:	68bb      	ldr	r3, [r7, #8]
   312f4:	681a      	ldr	r2, [r3, #0]
   312f6:	68fb      	ldr	r3, [r7, #12]
   312f8:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
   312fa:	68bb      	ldr	r3, [r7, #8]
   312fc:	681a      	ldr	r2, [r3, #0]
   312fe:	68fb      	ldr	r3, [r7, #12]
   31300:	685b      	ldr	r3, [r3, #4]
   31302:	18d2      	adds	r2, r2, r3
   31304:	68bb      	ldr	r3, [r7, #8]
   31306:	601a      	str	r2, [r3, #0]
			rc = 1;
   31308:	2301      	movs	r3, #1
   3130a:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
   3130c:	68fb      	ldr	r3, [r7, #12]
   3130e:	2200      	movs	r2, #0
   31310:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
   31312:	697b      	ldr	r3, [r7, #20]
}
   31314:	0018      	movs	r0, r3
   31316:	46bd      	mov	sp, r7
   31318:	b006      	add	sp, #24
   3131a:	bd80      	pop	{r7, pc}
   3131c:	00031109 	.word	0x00031109

00031320 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
   31320:	b580      	push	{r7, lr}
   31322:	b086      	sub	sp, #24
   31324:	af00      	add	r7, sp, #0
   31326:	1d3b      	adds	r3, r7, #4
   31328:	6018      	str	r0, [r3, #0]
   3132a:	6059      	str	r1, [r3, #4]
   3132c:	609a      	str	r2, [r3, #8]
	int rc = 0;
   3132e:	2300      	movs	r3, #0
   31330:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
   31332:	1d3b      	adds	r3, r7, #4
   31334:	681b      	ldr	r3, [r3, #0]
   31336:	2b00      	cmp	r3, #0
   31338:	d007      	beq.n	3134a <MQTTstrlen+0x2a>
		rc = strlen(mqttstring.cstring);
   3133a:	1d3b      	adds	r3, r7, #4
   3133c:	681b      	ldr	r3, [r3, #0]
   3133e:	0018      	movs	r0, r3
   31340:	4b06      	ldr	r3, [pc, #24]	; (3135c <MQTTstrlen+0x3c>)
   31342:	4798      	blx	r3
   31344:	0003      	movs	r3, r0
   31346:	617b      	str	r3, [r7, #20]
   31348:	e002      	b.n	31350 <MQTTstrlen+0x30>
	else
		rc = mqttstring.lenstring.len;
   3134a:	1d3b      	adds	r3, r7, #4
   3134c:	685b      	ldr	r3, [r3, #4]
   3134e:	617b      	str	r3, [r7, #20]
	return rc;
   31350:	697b      	ldr	r3, [r7, #20]
}
   31352:	0018      	movs	r0, r3
   31354:	46bd      	mov	sp, r7
   31356:	b006      	add	sp, #24
   31358:	bd80      	pop	{r7, pc}
   3135a:	46c0      	nop			; (mov r8, r8)
   3135c:	00035be7 	.word	0x00035be7

00031360 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
   31360:	b580      	push	{r7, lr}
   31362:	b086      	sub	sp, #24
   31364:	af00      	add	r7, sp, #0
   31366:	6078      	str	r0, [r7, #4]
   31368:	6039      	str	r1, [r7, #0]
	int alen = 0,
   3136a:	2300      	movs	r3, #0
   3136c:	617b      	str	r3, [r7, #20]
		blen = 0;
   3136e:	2300      	movs	r3, #0
   31370:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
   31372:	687b      	ldr	r3, [r7, #4]
   31374:	681b      	ldr	r3, [r3, #0]
   31376:	2b00      	cmp	r3, #0
   31378:	d00a      	beq.n	31390 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
   3137a:	687b      	ldr	r3, [r7, #4]
   3137c:	681b      	ldr	r3, [r3, #0]
   3137e:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
   31380:	687b      	ldr	r3, [r7, #4]
   31382:	681b      	ldr	r3, [r3, #0]
   31384:	0018      	movs	r0, r3
   31386:	4b12      	ldr	r3, [pc, #72]	; (313d0 <MQTTPacket_equals+0x70>)
   31388:	4798      	blx	r3
   3138a:	0003      	movs	r3, r0
   3138c:	617b      	str	r3, [r7, #20]
   3138e:	e005      	b.n	3139c <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
   31390:	687b      	ldr	r3, [r7, #4]
   31392:	689b      	ldr	r3, [r3, #8]
   31394:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
   31396:	687b      	ldr	r3, [r7, #4]
   31398:	685b      	ldr	r3, [r3, #4]
   3139a:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
   3139c:	683b      	ldr	r3, [r7, #0]
   3139e:	0018      	movs	r0, r3
   313a0:	4b0b      	ldr	r3, [pc, #44]	; (313d0 <MQTTPacket_equals+0x70>)
   313a2:	4798      	blx	r3
   313a4:	0003      	movs	r3, r0
   313a6:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
   313a8:	697a      	ldr	r2, [r7, #20]
   313aa:	68fb      	ldr	r3, [r7, #12]
   313ac:	429a      	cmp	r2, r3
   313ae:	d109      	bne.n	313c4 <MQTTPacket_equals+0x64>
   313b0:	697a      	ldr	r2, [r7, #20]
   313b2:	6839      	ldr	r1, [r7, #0]
   313b4:	693b      	ldr	r3, [r7, #16]
   313b6:	0018      	movs	r0, r3
   313b8:	4b06      	ldr	r3, [pc, #24]	; (313d4 <MQTTPacket_equals+0x74>)
   313ba:	4798      	blx	r3
   313bc:	1e03      	subs	r3, r0, #0
   313be:	d101      	bne.n	313c4 <MQTTPacket_equals+0x64>
   313c0:	2301      	movs	r3, #1
   313c2:	e000      	b.n	313c6 <MQTTPacket_equals+0x66>
   313c4:	2300      	movs	r3, #0
}
   313c6:	0018      	movs	r0, r3
   313c8:	46bd      	mov	sp, r7
   313ca:	b006      	add	sp, #24
   313cc:	bd80      	pop	{r7, pc}
   313ce:	46c0      	nop			; (mov r8, r8)
   313d0:	00035be7 	.word	0x00035be7
   313d4:	00035bf5 	.word	0x00035bf5

000313d8 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
   313d8:	b580      	push	{r7, lr}
   313da:	b086      	sub	sp, #24
   313dc:	af00      	add	r7, sp, #0
   313de:	60f8      	str	r0, [r7, #12]
   313e0:	0038      	movs	r0, r7
   313e2:	6001      	str	r1, [r0, #0]
   313e4:	6042      	str	r2, [r0, #4]
   313e6:	6083      	str	r3, [r0, #8]
	int len = 0;
   313e8:	2300      	movs	r3, #0
   313ea:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
   313ec:	003b      	movs	r3, r7
   313ee:	6818      	ldr	r0, [r3, #0]
   313f0:	6859      	ldr	r1, [r3, #4]
   313f2:	689a      	ldr	r2, [r3, #8]
   313f4:	4b09      	ldr	r3, [pc, #36]	; (3141c <MQTTSerialize_publishLength+0x44>)
   313f6:	4798      	blx	r3
   313f8:	0003      	movs	r3, r0
   313fa:	1c9a      	adds	r2, r3, #2
   313fc:	6a3b      	ldr	r3, [r7, #32]
   313fe:	18d3      	adds	r3, r2, r3
   31400:	697a      	ldr	r2, [r7, #20]
   31402:	18d3      	adds	r3, r2, r3
   31404:	617b      	str	r3, [r7, #20]
	if (qos > 0)
   31406:	68fb      	ldr	r3, [r7, #12]
   31408:	2b00      	cmp	r3, #0
   3140a:	dd02      	ble.n	31412 <MQTTSerialize_publishLength+0x3a>
		len += 2; /* packetid */
   3140c:	697b      	ldr	r3, [r7, #20]
   3140e:	3302      	adds	r3, #2
   31410:	617b      	str	r3, [r7, #20]
	return len;
   31412:	697b      	ldr	r3, [r7, #20]
}
   31414:	0018      	movs	r0, r3
   31416:	46bd      	mov	sp, r7
   31418:	b006      	add	sp, #24
   3141a:	bd80      	pop	{r7, pc}
   3141c:	00031321 	.word	0x00031321

00031420 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
   31420:	b590      	push	{r4, r7, lr}
   31422:	b08b      	sub	sp, #44	; 0x2c
   31424:	af02      	add	r7, sp, #8
   31426:	60f8      	str	r0, [r7, #12]
   31428:	60b9      	str	r1, [r7, #8]
   3142a:	603b      	str	r3, [r7, #0]
   3142c:	1dfb      	adds	r3, r7, #7
   3142e:	701a      	strb	r2, [r3, #0]
	unsigned char *ptr = buf;
   31430:	68fb      	ldr	r3, [r7, #12]
   31432:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
   31434:	2300      	movs	r3, #0
   31436:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
   31438:	2300      	movs	r3, #0
   3143a:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   3143c:	2300      	movs	r3, #0
   3143e:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
   31440:	2308      	movs	r3, #8
   31442:	2230      	movs	r2, #48	; 0x30
   31444:	4694      	mov	ip, r2
   31446:	44bc      	add	ip, r7
   31448:	4463      	add	r3, ip
   3144a:	6838      	ldr	r0, [r7, #0]
   3144c:	6cba      	ldr	r2, [r7, #72]	; 0x48
   3144e:	9200      	str	r2, [sp, #0]
   31450:	6819      	ldr	r1, [r3, #0]
   31452:	685a      	ldr	r2, [r3, #4]
   31454:	689b      	ldr	r3, [r3, #8]
   31456:	4c46      	ldr	r4, [pc, #280]	; (31570 <MQTTSerialize_publish+0x150>)
   31458:	47a0      	blx	r4
   3145a:	0003      	movs	r3, r0
   3145c:	61bb      	str	r3, [r7, #24]
   3145e:	69bb      	ldr	r3, [r7, #24]
   31460:	0018      	movs	r0, r3
   31462:	4b44      	ldr	r3, [pc, #272]	; (31574 <MQTTSerialize_publish+0x154>)
   31464:	4798      	blx	r3
   31466:	0002      	movs	r2, r0
   31468:	68bb      	ldr	r3, [r7, #8]
   3146a:	429a      	cmp	r2, r3
   3146c:	dd03      	ble.n	31476 <MQTTSerialize_publish+0x56>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   3146e:	2302      	movs	r3, #2
   31470:	425b      	negs	r3, r3
   31472:	61fb      	str	r3, [r7, #28]
		goto exit;
   31474:	e077      	b.n	31566 <MQTTSerialize_publish+0x146>
	}

	header.bits.type = PUBLISH;
   31476:	2310      	movs	r3, #16
   31478:	18fb      	adds	r3, r7, r3
   3147a:	781a      	ldrb	r2, [r3, #0]
   3147c:	210f      	movs	r1, #15
   3147e:	400a      	ands	r2, r1
   31480:	1c11      	adds	r1, r2, #0
   31482:	2230      	movs	r2, #48	; 0x30
   31484:	430a      	orrs	r2, r1
   31486:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   31488:	1dfb      	adds	r3, r7, #7
   3148a:	781b      	ldrb	r3, [r3, #0]
   3148c:	2201      	movs	r2, #1
   3148e:	4013      	ands	r3, r2
   31490:	b2da      	uxtb	r2, r3
   31492:	2310      	movs	r3, #16
   31494:	18fb      	adds	r3, r7, r3
   31496:	2101      	movs	r1, #1
   31498:	400a      	ands	r2, r1
   3149a:	00d0      	lsls	r0, r2, #3
   3149c:	781a      	ldrb	r2, [r3, #0]
   3149e:	2108      	movs	r1, #8
   314a0:	438a      	bics	r2, r1
   314a2:	1c11      	adds	r1, r2, #0
   314a4:	1c02      	adds	r2, r0, #0
   314a6:	430a      	orrs	r2, r1
   314a8:	701a      	strb	r2, [r3, #0]
	header.bits.qos = qos;
   314aa:	683b      	ldr	r3, [r7, #0]
   314ac:	b2db      	uxtb	r3, r3
   314ae:	1c1a      	adds	r2, r3, #0
   314b0:	2303      	movs	r3, #3
   314b2:	4013      	ands	r3, r2
   314b4:	b2da      	uxtb	r2, r3
   314b6:	2310      	movs	r3, #16
   314b8:	18fb      	adds	r3, r7, r3
   314ba:	2103      	movs	r1, #3
   314bc:	400a      	ands	r2, r1
   314be:	1890      	adds	r0, r2, r2
   314c0:	781a      	ldrb	r2, [r3, #0]
   314c2:	2106      	movs	r1, #6
   314c4:	438a      	bics	r2, r1
   314c6:	1c11      	adds	r1, r2, #0
   314c8:	1c02      	adds	r2, r0, #0
   314ca:	430a      	orrs	r2, r1
   314cc:	701a      	strb	r2, [r3, #0]
	header.bits.retain = retained;
   314ce:	2330      	movs	r3, #48	; 0x30
   314d0:	18fb      	adds	r3, r7, r3
   314d2:	781b      	ldrb	r3, [r3, #0]
   314d4:	2201      	movs	r2, #1
   314d6:	4013      	ands	r3, r2
   314d8:	b2da      	uxtb	r2, r3
   314da:	2310      	movs	r3, #16
   314dc:	18fb      	adds	r3, r7, r3
   314de:	2101      	movs	r1, #1
   314e0:	400a      	ands	r2, r1
   314e2:	0010      	movs	r0, r2
   314e4:	781a      	ldrb	r2, [r3, #0]
   314e6:	2101      	movs	r1, #1
   314e8:	438a      	bics	r2, r1
   314ea:	1c11      	adds	r1, r2, #0
   314ec:	1c02      	adds	r2, r0, #0
   314ee:	430a      	orrs	r2, r1
   314f0:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   314f2:	2310      	movs	r3, #16
   314f4:	18fb      	adds	r3, r7, r3
   314f6:	781a      	ldrb	r2, [r3, #0]
   314f8:	2314      	movs	r3, #20
   314fa:	18fb      	adds	r3, r7, r3
   314fc:	0011      	movs	r1, r2
   314fe:	0018      	movs	r0, r3
   31500:	4b1d      	ldr	r3, [pc, #116]	; (31578 <MQTTSerialize_publish+0x158>)
   31502:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   31504:	697b      	ldr	r3, [r7, #20]
   31506:	69ba      	ldr	r2, [r7, #24]
   31508:	0011      	movs	r1, r2
   3150a:	0018      	movs	r0, r3
   3150c:	4b1b      	ldr	r3, [pc, #108]	; (3157c <MQTTSerialize_publish+0x15c>)
   3150e:	4798      	blx	r3
   31510:	0002      	movs	r2, r0
   31512:	697b      	ldr	r3, [r7, #20]
   31514:	189b      	adds	r3, r3, r2
   31516:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
   31518:	2308      	movs	r3, #8
   3151a:	2230      	movs	r2, #48	; 0x30
   3151c:	4694      	mov	ip, r2
   3151e:	44bc      	add	ip, r7
   31520:	4463      	add	r3, ip
   31522:	2214      	movs	r2, #20
   31524:	18b8      	adds	r0, r7, r2
   31526:	6819      	ldr	r1, [r3, #0]
   31528:	685a      	ldr	r2, [r3, #4]
   3152a:	689b      	ldr	r3, [r3, #8]
   3152c:	4c14      	ldr	r4, [pc, #80]	; (31580 <MQTTSerialize_publish+0x160>)
   3152e:	47a0      	blx	r4

	if (qos > 0)
   31530:	683b      	ldr	r3, [r7, #0]
   31532:	2b00      	cmp	r3, #0
   31534:	dd08      	ble.n	31548 <MQTTSerialize_publish+0x128>
		writeInt(&ptr, packetid);
   31536:	2334      	movs	r3, #52	; 0x34
   31538:	18fb      	adds	r3, r7, r3
   3153a:	881a      	ldrh	r2, [r3, #0]
   3153c:	2314      	movs	r3, #20
   3153e:	18fb      	adds	r3, r7, r3
   31540:	0011      	movs	r1, r2
   31542:	0018      	movs	r0, r3
   31544:	4b0f      	ldr	r3, [pc, #60]	; (31584 <MQTTSerialize_publish+0x164>)
   31546:	4798      	blx	r3

	memcpy(ptr, payload, payloadlen);
   31548:	697b      	ldr	r3, [r7, #20]
   3154a:	6cba      	ldr	r2, [r7, #72]	; 0x48
   3154c:	6c79      	ldr	r1, [r7, #68]	; 0x44
   3154e:	0018      	movs	r0, r3
   31550:	4b0d      	ldr	r3, [pc, #52]	; (31588 <MQTTSerialize_publish+0x168>)
   31552:	4798      	blx	r3
	ptr += payloadlen;
   31554:	697a      	ldr	r2, [r7, #20]
   31556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   31558:	18d3      	adds	r3, r2, r3
   3155a:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
   3155c:	697b      	ldr	r3, [r7, #20]
   3155e:	001a      	movs	r2, r3
   31560:	68fb      	ldr	r3, [r7, #12]
   31562:	1ad3      	subs	r3, r2, r3
   31564:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
   31566:	69fb      	ldr	r3, [r7, #28]
}
   31568:	0018      	movs	r0, r3
   3156a:	46bd      	mov	sp, r7
   3156c:	b009      	add	sp, #36	; 0x24
   3156e:	bd90      	pop	{r4, r7, pc}
   31570:	000313d9 	.word	0x000313d9
   31574:	00031045 	.word	0x00031045
   31578:	00031167 	.word	0x00031167
   3157c:	00030f4d 	.word	0x00030f4d
   31580:	00031239 	.word	0x00031239
   31584:	00031191 	.word	0x00031191
   31588:	000357f9 	.word	0x000357f9

0003158c <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
   3158c:	b580      	push	{r7, lr}
   3158e:	b088      	sub	sp, #32
   31590:	af00      	add	r7, sp, #0
   31592:	60f8      	str	r0, [r7, #12]
   31594:	60b9      	str	r1, [r7, #8]
   31596:	0019      	movs	r1, r3
   31598:	1dfb      	adds	r3, r7, #7
   3159a:	701a      	strb	r2, [r3, #0]
   3159c:	1dbb      	adds	r3, r7, #6
   3159e:	1c0a      	adds	r2, r1, #0
   315a0:	701a      	strb	r2, [r3, #0]
	MQTTHeader header = {0};
   315a2:	2300      	movs	r3, #0
   315a4:	61bb      	str	r3, [r7, #24]
	int rc = 0;
   315a6:	2300      	movs	r3, #0
   315a8:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
   315aa:	68fb      	ldr	r3, [r7, #12]
   315ac:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
   315ae:	68bb      	ldr	r3, [r7, #8]
   315b0:	2b03      	cmp	r3, #3
   315b2:	dc03      	bgt.n	315bc <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   315b4:	2302      	movs	r3, #2
   315b6:	425b      	negs	r3, r3
   315b8:	61fb      	str	r3, [r7, #28]
		goto exit;
   315ba:	e055      	b.n	31668 <MQTTSerialize_ack+0xdc>
	}
	header.bits.type = packettype;
   315bc:	1dfb      	adds	r3, r7, #7
   315be:	781b      	ldrb	r3, [r3, #0]
   315c0:	220f      	movs	r2, #15
   315c2:	4013      	ands	r3, r2
   315c4:	b2da      	uxtb	r2, r3
   315c6:	2318      	movs	r3, #24
   315c8:	18fb      	adds	r3, r7, r3
   315ca:	0110      	lsls	r0, r2, #4
   315cc:	781a      	ldrb	r2, [r3, #0]
   315ce:	210f      	movs	r1, #15
   315d0:	400a      	ands	r2, r1
   315d2:	1c11      	adds	r1, r2, #0
   315d4:	1c02      	adds	r2, r0, #0
   315d6:	430a      	orrs	r2, r1
   315d8:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   315da:	1dbb      	adds	r3, r7, #6
   315dc:	781b      	ldrb	r3, [r3, #0]
   315de:	2201      	movs	r2, #1
   315e0:	4013      	ands	r3, r2
   315e2:	b2da      	uxtb	r2, r3
   315e4:	2318      	movs	r3, #24
   315e6:	18fb      	adds	r3, r7, r3
   315e8:	2101      	movs	r1, #1
   315ea:	400a      	ands	r2, r1
   315ec:	00d0      	lsls	r0, r2, #3
   315ee:	781a      	ldrb	r2, [r3, #0]
   315f0:	2108      	movs	r1, #8
   315f2:	438a      	bics	r2, r1
   315f4:	1c11      	adds	r1, r2, #0
   315f6:	1c02      	adds	r2, r0, #0
   315f8:	430a      	orrs	r2, r1
   315fa:	701a      	strb	r2, [r3, #0]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
   315fc:	1dfb      	adds	r3, r7, #7
   315fe:	781b      	ldrb	r3, [r3, #0]
   31600:	3b06      	subs	r3, #6
   31602:	425a      	negs	r2, r3
   31604:	4153      	adcs	r3, r2
   31606:	b2db      	uxtb	r3, r3
   31608:	1c1a      	adds	r2, r3, #0
   3160a:	2303      	movs	r3, #3
   3160c:	4013      	ands	r3, r2
   3160e:	b2da      	uxtb	r2, r3
   31610:	2318      	movs	r3, #24
   31612:	18fb      	adds	r3, r7, r3
   31614:	2103      	movs	r1, #3
   31616:	400a      	ands	r2, r1
   31618:	1890      	adds	r0, r2, r2
   3161a:	781a      	ldrb	r2, [r3, #0]
   3161c:	2106      	movs	r1, #6
   3161e:	438a      	bics	r2, r1
   31620:	1c11      	adds	r1, r2, #0
   31622:	1c02      	adds	r2, r0, #0
   31624:	430a      	orrs	r2, r1
   31626:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   31628:	2318      	movs	r3, #24
   3162a:	18fb      	adds	r3, r7, r3
   3162c:	781a      	ldrb	r2, [r3, #0]
   3162e:	2314      	movs	r3, #20
   31630:	18fb      	adds	r3, r7, r3
   31632:	0011      	movs	r1, r2
   31634:	0018      	movs	r0, r3
   31636:	4b0f      	ldr	r3, [pc, #60]	; (31674 <MQTTSerialize_ack+0xe8>)
   31638:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
   3163a:	697b      	ldr	r3, [r7, #20]
   3163c:	2102      	movs	r1, #2
   3163e:	0018      	movs	r0, r3
   31640:	4b0d      	ldr	r3, [pc, #52]	; (31678 <MQTTSerialize_ack+0xec>)
   31642:	4798      	blx	r3
   31644:	0002      	movs	r2, r0
   31646:	697b      	ldr	r3, [r7, #20]
   31648:	189b      	adds	r3, r3, r2
   3164a:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
   3164c:	2328      	movs	r3, #40	; 0x28
   3164e:	18fb      	adds	r3, r7, r3
   31650:	881a      	ldrh	r2, [r3, #0]
   31652:	2314      	movs	r3, #20
   31654:	18fb      	adds	r3, r7, r3
   31656:	0011      	movs	r1, r2
   31658:	0018      	movs	r0, r3
   3165a:	4b08      	ldr	r3, [pc, #32]	; (3167c <MQTTSerialize_ack+0xf0>)
   3165c:	4798      	blx	r3
	rc = ptr - buf;
   3165e:	697b      	ldr	r3, [r7, #20]
   31660:	001a      	movs	r2, r3
   31662:	68fb      	ldr	r3, [r7, #12]
   31664:	1ad3      	subs	r3, r2, r3
   31666:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   31668:	69fb      	ldr	r3, [r7, #28]
}
   3166a:	0018      	movs	r0, r3
   3166c:	46bd      	mov	sp, r7
   3166e:	b008      	add	sp, #32
   31670:	bd80      	pop	{r7, pc}
   31672:	46c0      	nop			; (mov r8, r8)
   31674:	00031167 	.word	0x00031167
   31678:	00030f4d 	.word	0x00030f4d
   3167c:	00031191 	.word	0x00031191

00031680 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
   31680:	b580      	push	{r7, lr}
   31682:	b084      	sub	sp, #16
   31684:	af00      	add	r7, sp, #0
   31686:	6078      	str	r0, [r7, #4]
   31688:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
   3168a:	2302      	movs	r3, #2
   3168c:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
   3168e:	2300      	movs	r3, #0
   31690:	60fb      	str	r3, [r7, #12]
   31692:	e014      	b.n	316be <MQTTSerialize_subscribeLength+0x3e>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
   31694:	68fa      	ldr	r2, [r7, #12]
   31696:	0013      	movs	r3, r2
   31698:	005b      	lsls	r3, r3, #1
   3169a:	189b      	adds	r3, r3, r2
   3169c:	009b      	lsls	r3, r3, #2
   3169e:	001a      	movs	r2, r3
   316a0:	683b      	ldr	r3, [r7, #0]
   316a2:	189b      	adds	r3, r3, r2
   316a4:	6818      	ldr	r0, [r3, #0]
   316a6:	6859      	ldr	r1, [r3, #4]
   316a8:	689a      	ldr	r2, [r3, #8]
   316aa:	4b09      	ldr	r3, [pc, #36]	; (316d0 <MQTTSerialize_subscribeLength+0x50>)
   316ac:	4798      	blx	r3
   316ae:	0003      	movs	r3, r0
   316b0:	3303      	adds	r3, #3
   316b2:	68ba      	ldr	r2, [r7, #8]
   316b4:	18d3      	adds	r3, r2, r3
   316b6:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
   316b8:	68fb      	ldr	r3, [r7, #12]
   316ba:	3301      	adds	r3, #1
   316bc:	60fb      	str	r3, [r7, #12]
   316be:	68fa      	ldr	r2, [r7, #12]
   316c0:	687b      	ldr	r3, [r7, #4]
   316c2:	429a      	cmp	r2, r3
   316c4:	dbe6      	blt.n	31694 <MQTTSerialize_subscribeLength+0x14>
	return len;
   316c6:	68bb      	ldr	r3, [r7, #8]
}
   316c8:	0018      	movs	r0, r3
   316ca:	46bd      	mov	sp, r7
   316cc:	b004      	add	sp, #16
   316ce:	bd80      	pop	{r7, pc}
   316d0:	00031321 	.word	0x00031321

000316d4 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
   316d4:	b590      	push	{r4, r7, lr}
   316d6:	b08b      	sub	sp, #44	; 0x2c
   316d8:	af00      	add	r7, sp, #0
   316da:	60f8      	str	r0, [r7, #12]
   316dc:	60b9      	str	r1, [r7, #8]
   316de:	0019      	movs	r1, r3
   316e0:	1dfb      	adds	r3, r7, #7
   316e2:	701a      	strb	r2, [r3, #0]
   316e4:	1d3b      	adds	r3, r7, #4
   316e6:	1c0a      	adds	r2, r1, #0
   316e8:	801a      	strh	r2, [r3, #0]
	unsigned char *ptr = buf;
   316ea:	68fb      	ldr	r3, [r7, #12]
   316ec:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
   316ee:	2300      	movs	r3, #0
   316f0:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
   316f2:	2300      	movs	r3, #0
   316f4:	61fb      	str	r3, [r7, #28]
	int rc = 0;
   316f6:	2300      	movs	r3, #0
   316f8:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
   316fa:	2300      	movs	r3, #0
   316fc:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
   316fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   31700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   31702:	0011      	movs	r1, r2
   31704:	0018      	movs	r0, r3
   31706:	4b41      	ldr	r3, [pc, #260]	; (3180c <MQTTSerialize_subscribe+0x138>)
   31708:	4798      	blx	r3
   3170a:	0003      	movs	r3, r0
   3170c:	61fb      	str	r3, [r7, #28]
   3170e:	69fb      	ldr	r3, [r7, #28]
   31710:	0018      	movs	r0, r3
   31712:	4b3f      	ldr	r3, [pc, #252]	; (31810 <MQTTSerialize_subscribe+0x13c>)
   31714:	4798      	blx	r3
   31716:	0002      	movs	r2, r0
   31718:	68bb      	ldr	r3, [r7, #8]
   3171a:	429a      	cmp	r2, r3
   3171c:	dd03      	ble.n	31726 <MQTTSerialize_subscribe+0x52>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
   3171e:	2302      	movs	r3, #2
   31720:	425b      	negs	r3, r3
   31722:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
   31724:	e06c      	b.n	31800 <MQTTSerialize_subscribe+0x12c>
	}

	header.byte = 0;
   31726:	2314      	movs	r3, #20
   31728:	18fb      	adds	r3, r7, r3
   3172a:	2200      	movs	r2, #0
   3172c:	701a      	strb	r2, [r3, #0]
	header.bits.type = SUBSCRIBE;
   3172e:	2314      	movs	r3, #20
   31730:	18fb      	adds	r3, r7, r3
   31732:	781a      	ldrb	r2, [r3, #0]
   31734:	210f      	movs	r1, #15
   31736:	400a      	ands	r2, r1
   31738:	1c11      	adds	r1, r2, #0
   3173a:	2280      	movs	r2, #128	; 0x80
   3173c:	4252      	negs	r2, r2
   3173e:	430a      	orrs	r2, r1
   31740:	701a      	strb	r2, [r3, #0]
	header.bits.dup = dup;
   31742:	1dfb      	adds	r3, r7, #7
   31744:	781b      	ldrb	r3, [r3, #0]
   31746:	2201      	movs	r2, #1
   31748:	4013      	ands	r3, r2
   3174a:	b2da      	uxtb	r2, r3
   3174c:	2314      	movs	r3, #20
   3174e:	18fb      	adds	r3, r7, r3
   31750:	2101      	movs	r1, #1
   31752:	400a      	ands	r2, r1
   31754:	00d0      	lsls	r0, r2, #3
   31756:	781a      	ldrb	r2, [r3, #0]
   31758:	2108      	movs	r1, #8
   3175a:	438a      	bics	r2, r1
   3175c:	1c11      	adds	r1, r2, #0
   3175e:	1c02      	adds	r2, r0, #0
   31760:	430a      	orrs	r2, r1
   31762:	701a      	strb	r2, [r3, #0]
	header.bits.qos = 1;
   31764:	2314      	movs	r3, #20
   31766:	18fb      	adds	r3, r7, r3
   31768:	781a      	ldrb	r2, [r3, #0]
   3176a:	2106      	movs	r1, #6
   3176c:	438a      	bics	r2, r1
   3176e:	1c11      	adds	r1, r2, #0
   31770:	2202      	movs	r2, #2
   31772:	430a      	orrs	r2, r1
   31774:	701a      	strb	r2, [r3, #0]
	writeChar(&ptr, header.byte); /* write header */
   31776:	2314      	movs	r3, #20
   31778:	18fb      	adds	r3, r7, r3
   3177a:	781a      	ldrb	r2, [r3, #0]
   3177c:	2318      	movs	r3, #24
   3177e:	18fb      	adds	r3, r7, r3
   31780:	0011      	movs	r1, r2
   31782:	0018      	movs	r0, r3
   31784:	4b23      	ldr	r3, [pc, #140]	; (31814 <MQTTSerialize_subscribe+0x140>)
   31786:	4798      	blx	r3

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
   31788:	69bb      	ldr	r3, [r7, #24]
   3178a:	69fa      	ldr	r2, [r7, #28]
   3178c:	0011      	movs	r1, r2
   3178e:	0018      	movs	r0, r3
   31790:	4b21      	ldr	r3, [pc, #132]	; (31818 <MQTTSerialize_subscribe+0x144>)
   31792:	4798      	blx	r3
   31794:	0002      	movs	r2, r0
   31796:	69bb      	ldr	r3, [r7, #24]
   31798:	189b      	adds	r3, r3, r2
   3179a:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
   3179c:	1d3b      	adds	r3, r7, #4
   3179e:	881a      	ldrh	r2, [r3, #0]
   317a0:	2318      	movs	r3, #24
   317a2:	18fb      	adds	r3, r7, r3
   317a4:	0011      	movs	r1, r2
   317a6:	0018      	movs	r0, r3
   317a8:	4b1c      	ldr	r3, [pc, #112]	; (3181c <MQTTSerialize_subscribe+0x148>)
   317aa:	4798      	blx	r3

	for (i = 0; i < count; ++i)
   317ac:	2300      	movs	r3, #0
   317ae:	623b      	str	r3, [r7, #32]
   317b0:	e01d      	b.n	317ee <MQTTSerialize_subscribe+0x11a>
	{
		writeMQTTString(&ptr, topicFilters[i]);
   317b2:	6a3a      	ldr	r2, [r7, #32]
   317b4:	0013      	movs	r3, r2
   317b6:	005b      	lsls	r3, r3, #1
   317b8:	189b      	adds	r3, r3, r2
   317ba:	009b      	lsls	r3, r3, #2
   317bc:	001a      	movs	r2, r3
   317be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   317c0:	189b      	adds	r3, r3, r2
   317c2:	2218      	movs	r2, #24
   317c4:	18b8      	adds	r0, r7, r2
   317c6:	6819      	ldr	r1, [r3, #0]
   317c8:	685a      	ldr	r2, [r3, #4]
   317ca:	689b      	ldr	r3, [r3, #8]
   317cc:	4c14      	ldr	r4, [pc, #80]	; (31820 <MQTTSerialize_subscribe+0x14c>)
   317ce:	47a0      	blx	r4
		writeChar(&ptr, requestedQoSs[i]);
   317d0:	6a3b      	ldr	r3, [r7, #32]
   317d2:	009b      	lsls	r3, r3, #2
   317d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   317d6:	18d3      	adds	r3, r2, r3
   317d8:	681b      	ldr	r3, [r3, #0]
   317da:	b2da      	uxtb	r2, r3
   317dc:	2318      	movs	r3, #24
   317de:	18fb      	adds	r3, r7, r3
   317e0:	0011      	movs	r1, r2
   317e2:	0018      	movs	r0, r3
   317e4:	4b0b      	ldr	r3, [pc, #44]	; (31814 <MQTTSerialize_subscribe+0x140>)
   317e6:	4798      	blx	r3
	for (i = 0; i < count; ++i)
   317e8:	6a3b      	ldr	r3, [r7, #32]
   317ea:	3301      	adds	r3, #1
   317ec:	623b      	str	r3, [r7, #32]
   317ee:	6a3a      	ldr	r2, [r7, #32]
   317f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   317f2:	429a      	cmp	r2, r3
   317f4:	dbdd      	blt.n	317b2 <MQTTSerialize_subscribe+0xde>
	}

	rc = ptr - buf;
   317f6:	69bb      	ldr	r3, [r7, #24]
   317f8:	001a      	movs	r2, r3
   317fa:	68fb      	ldr	r3, [r7, #12]
   317fc:	1ad3      	subs	r3, r2, r3
   317fe:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   31800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   31802:	0018      	movs	r0, r3
   31804:	46bd      	mov	sp, r7
   31806:	b00b      	add	sp, #44	; 0x2c
   31808:	bd90      	pop	{r4, r7, pc}
   3180a:	46c0      	nop			; (mov r8, r8)
   3180c:	00031681 	.word	0x00031681
   31810:	00031045 	.word	0x00031045
   31814:	00031167 	.word	0x00031167
   31818:	00030f4d 	.word	0x00030f4d
   3181c:	00031191 	.word	0x00031191
   31820:	00031239 	.word	0x00031239

00031824 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
   31824:	b590      	push	{r4, r7, lr}
   31826:	b08b      	sub	sp, #44	; 0x2c
   31828:	af00      	add	r7, sp, #0
   3182a:	60f8      	str	r0, [r7, #12]
   3182c:	60b9      	str	r1, [r7, #8]
   3182e:	607a      	str	r2, [r7, #4]
   31830:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
   31832:	2300      	movs	r3, #0
   31834:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
   31836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   31838:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
   3183a:	2300      	movs	r3, #0
   3183c:	623b      	str	r3, [r7, #32]
	int rc = 0;
   3183e:	2300      	movs	r3, #0
   31840:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
   31842:	2318      	movs	r3, #24
   31844:	18fb      	adds	r3, r7, r3
   31846:	0018      	movs	r0, r3
   31848:	4b2c      	ldr	r3, [pc, #176]	; (318fc <MQTTDeserialize_suback+0xd8>)
   3184a:	4798      	blx	r3
   3184c:	0003      	movs	r3, r0
   3184e:	001a      	movs	r2, r3
   31850:	231c      	movs	r3, #28
   31852:	18fb      	adds	r3, r7, r3
   31854:	701a      	strb	r2, [r3, #0]
	if (header.bits.type != SUBACK)
   31856:	231c      	movs	r3, #28
   31858:	18fb      	adds	r3, r7, r3
   3185a:	781b      	ldrb	r3, [r3, #0]
   3185c:	220f      	movs	r2, #15
   3185e:	4393      	bics	r3, r2
   31860:	b2db      	uxtb	r3, r3
   31862:	2b90      	cmp	r3, #144	; 0x90
   31864:	d142      	bne.n	318ec <MQTTDeserialize_suback+0xc8>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
   31866:	69bb      	ldr	r3, [r7, #24]
   31868:	2214      	movs	r2, #20
   3186a:	18ba      	adds	r2, r7, r2
   3186c:	0011      	movs	r1, r2
   3186e:	0018      	movs	r0, r3
   31870:	4b23      	ldr	r3, [pc, #140]	; (31900 <MQTTDeserialize_suback+0xdc>)
   31872:	4798      	blx	r3
   31874:	0003      	movs	r3, r0
   31876:	627b      	str	r3, [r7, #36]	; 0x24
   31878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   3187a:	69bb      	ldr	r3, [r7, #24]
   3187c:	189b      	adds	r3, r3, r2
   3187e:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
   31880:	69bb      	ldr	r3, [r7, #24]
   31882:	697a      	ldr	r2, [r7, #20]
   31884:	189b      	adds	r3, r3, r2
   31886:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
   31888:	6a3b      	ldr	r3, [r7, #32]
   3188a:	69ba      	ldr	r2, [r7, #24]
   3188c:	1a9b      	subs	r3, r3, r2
   3188e:	2b01      	cmp	r3, #1
   31890:	dd2e      	ble.n	318f0 <MQTTDeserialize_suback+0xcc>
		goto exit;

	*packetid = readInt(&curdata);
   31892:	2318      	movs	r3, #24
   31894:	18fb      	adds	r3, r7, r3
   31896:	0018      	movs	r0, r3
   31898:	4b1a      	ldr	r3, [pc, #104]	; (31904 <MQTTDeserialize_suback+0xe0>)
   3189a:	4798      	blx	r3
   3189c:	0003      	movs	r3, r0
   3189e:	b29a      	uxth	r2, r3
   318a0:	68fb      	ldr	r3, [r7, #12]
   318a2:	801a      	strh	r2, [r3, #0]

	*count = 0;
   318a4:	687b      	ldr	r3, [r7, #4]
   318a6:	2200      	movs	r2, #0
   318a8:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
   318aa:	e018      	b.n	318de <MQTTDeserialize_suback+0xba>
	{
		if (*count > maxcount)
   318ac:	687b      	ldr	r3, [r7, #4]
   318ae:	681a      	ldr	r2, [r3, #0]
   318b0:	68bb      	ldr	r3, [r7, #8]
   318b2:	429a      	cmp	r2, r3
   318b4:	dd03      	ble.n	318be <MQTTDeserialize_suback+0x9a>
		{
			rc = -1;
   318b6:	2301      	movs	r3, #1
   318b8:	425b      	negs	r3, r3
   318ba:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
   318bc:	e019      	b.n	318f2 <MQTTDeserialize_suback+0xce>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
   318be:	687b      	ldr	r3, [r7, #4]
   318c0:	681a      	ldr	r2, [r3, #0]
   318c2:	1c51      	adds	r1, r2, #1
   318c4:	687b      	ldr	r3, [r7, #4]
   318c6:	6019      	str	r1, [r3, #0]
   318c8:	0013      	movs	r3, r2
   318ca:	009b      	lsls	r3, r3, #2
   318cc:	683a      	ldr	r2, [r7, #0]
   318ce:	18d4      	adds	r4, r2, r3
   318d0:	2318      	movs	r3, #24
   318d2:	18fb      	adds	r3, r7, r3
   318d4:	0018      	movs	r0, r3
   318d6:	4b09      	ldr	r3, [pc, #36]	; (318fc <MQTTDeserialize_suback+0xd8>)
   318d8:	4798      	blx	r3
   318da:	0003      	movs	r3, r0
   318dc:	6023      	str	r3, [r4, #0]
	while (curdata < enddata)
   318de:	69ba      	ldr	r2, [r7, #24]
   318e0:	6a3b      	ldr	r3, [r7, #32]
   318e2:	429a      	cmp	r2, r3
   318e4:	d3e2      	bcc.n	318ac <MQTTDeserialize_suback+0x88>
	}

	rc = 1;
   318e6:	2301      	movs	r3, #1
   318e8:	627b      	str	r3, [r7, #36]	; 0x24
   318ea:	e002      	b.n	318f2 <MQTTDeserialize_suback+0xce>
		goto exit;
   318ec:	46c0      	nop			; (mov r8, r8)
   318ee:	e000      	b.n	318f2 <MQTTDeserialize_suback+0xce>
		goto exit;
   318f0:	46c0      	nop			; (mov r8, r8)
exit:
	FUNC_EXIT_RC(rc);
	return rc;
   318f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
   318f4:	0018      	movs	r0, r3
   318f6:	46bd      	mov	sp, r7
   318f8:	b00b      	add	sp, #44	; 0x2c
   318fa:	bd90      	pop	{r4, r7, pc}
   318fc:	0003113b 	.word	0x0003113b
   31900:	000310d5 	.word	0x000310d5
   31904:	00031109 	.word	0x00031109

00031908 <http_client_get_config_defaults>:
 * So it needed reference to HTTP client module instance.
 */
static struct http_client_module *module_ref_inst[TCP_SOCK_MAX] = {NULL,};

void http_client_get_config_defaults(struct http_client_config *const config)
{
   31908:	b580      	push	{r7, lr}
   3190a:	b082      	sub	sp, #8
   3190c:	af00      	add	r7, sp, #0
   3190e:	6078      	str	r0, [r7, #4]
	config->port = 80;
   31910:	687b      	ldr	r3, [r7, #4]
   31912:	2250      	movs	r2, #80	; 0x50
   31914:	801a      	strh	r2, [r3, #0]
	config->tls = 0;
   31916:	687b      	ldr	r3, [r7, #4]
   31918:	2200      	movs	r2, #0
   3191a:	709a      	strb	r2, [r3, #2]
	config->timeout = 20000;
   3191c:	687b      	ldr	r3, [r7, #4]
   3191e:	4a0b      	ldr	r2, [pc, #44]	; (3194c <http_client_get_config_defaults+0x44>)
   31920:	811a      	strh	r2, [r3, #8]
	config->timer_inst = NULL;
   31922:	687b      	ldr	r3, [r7, #4]
   31924:	2200      	movs	r2, #0
   31926:	605a      	str	r2, [r3, #4]
	config->recv_buffer = NULL;
   31928:	687b      	ldr	r3, [r7, #4]
   3192a:	2200      	movs	r2, #0
   3192c:	60da      	str	r2, [r3, #12]
	config->recv_buffer_size = 256;
   3192e:	687b      	ldr	r3, [r7, #4]
   31930:	2280      	movs	r2, #128	; 0x80
   31932:	0052      	lsls	r2, r2, #1
   31934:	611a      	str	r2, [r3, #16]
	config->send_buffer_size = MIN_SEND_BUFFER_SIZE;
   31936:	687b      	ldr	r3, [r7, #4]
   31938:	2252      	movs	r2, #82	; 0x52
   3193a:	615a      	str	r2, [r3, #20]
	config->user_agent = DEFAULT_USER_AGENT;
   3193c:	687b      	ldr	r3, [r7, #4]
   3193e:	4a04      	ldr	r2, [pc, #16]	; (31950 <http_client_get_config_defaults+0x48>)
   31940:	619a      	str	r2, [r3, #24]
}
   31942:	46c0      	nop			; (mov r8, r8)
   31944:	46bd      	mov	sp, r7
   31946:	b002      	add	sp, #8
   31948:	bd80      	pop	{r7, pc}
   3194a:	46c0      	nop			; (mov r8, r8)
   3194c:	00004e20 	.word	0x00004e20
   31950:	0003ad60 	.word	0x0003ad60

00031954 <http_client_init>:

int http_client_init(struct http_client_module *const module, struct http_client_config *config)
{
   31954:	b590      	push	{r4, r7, lr}
   31956:	b083      	sub	sp, #12
   31958:	af00      	add	r7, sp, #0
   3195a:	6078      	str	r0, [r7, #4]
   3195c:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL || config == NULL) {
   3195e:	687b      	ldr	r3, [r7, #4]
   31960:	2b00      	cmp	r3, #0
   31962:	d002      	beq.n	3196a <http_client_init+0x16>
   31964:	683b      	ldr	r3, [r7, #0]
   31966:	2b00      	cmp	r3, #0
   31968:	d102      	bne.n	31970 <http_client_init+0x1c>
		return -EINVAL;
   3196a:	2316      	movs	r3, #22
   3196c:	425b      	negs	r3, r3
   3196e:	e058      	b.n	31a22 <http_client_init+0xce>
	}

	if (config->recv_buffer_size == 0) {
   31970:	683b      	ldr	r3, [r7, #0]
   31972:	691b      	ldr	r3, [r3, #16]
   31974:	2b00      	cmp	r3, #0
   31976:	d102      	bne.n	3197e <http_client_init+0x2a>
		return -EINVAL;
   31978:	2316      	movs	r3, #22
   3197a:	425b      	negs	r3, r3
   3197c:	e051      	b.n	31a22 <http_client_init+0xce>
	}

	if (config->timer_inst == NULL) {
   3197e:	683b      	ldr	r3, [r7, #0]
   31980:	685b      	ldr	r3, [r3, #4]
   31982:	2b00      	cmp	r3, #0
   31984:	d102      	bne.n	3198c <http_client_init+0x38>
		return -EINVAL;
   31986:	2316      	movs	r3, #22
   31988:	425b      	negs	r3, r3
   3198a:	e04a      	b.n	31a22 <http_client_init+0xce>
	}

	if (config->send_buffer_size < MIN_SEND_BUFFER_SIZE) {
   3198c:	683b      	ldr	r3, [r7, #0]
   3198e:	695b      	ldr	r3, [r3, #20]
   31990:	2b51      	cmp	r3, #81	; 0x51
   31992:	d802      	bhi.n	3199a <http_client_init+0x46>
		return -EINVAL;
   31994:	2316      	movs	r3, #22
   31996:	425b      	negs	r3, r3
   31998:	e043      	b.n	31a22 <http_client_init+0xce>
	}

	memset(module, 0, sizeof(struct http_client_module));
   3199a:	687b      	ldr	r3, [r7, #4]
   3199c:	22e8      	movs	r2, #232	; 0xe8
   3199e:	2100      	movs	r1, #0
   319a0:	0018      	movs	r0, r3
   319a2:	4b22      	ldr	r3, [pc, #136]	; (31a2c <http_client_init+0xd8>)
   319a4:	4798      	blx	r3
	memcpy(&module->config, config, sizeof(struct http_client_config));
   319a6:	687b      	ldr	r3, [r7, #4]
   319a8:	3350      	adds	r3, #80	; 0x50
   319aa:	6839      	ldr	r1, [r7, #0]
   319ac:	221c      	movs	r2, #28
   319ae:	0018      	movs	r0, r3
   319b0:	4b1f      	ldr	r3, [pc, #124]	; (31a30 <http_client_init+0xdc>)
   319b2:	4798      	blx	r3

	/* Allocate the buffer in the heap. */
	if (module->config.recv_buffer == NULL) {
   319b4:	687b      	ldr	r3, [r7, #4]
   319b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   319b8:	2b00      	cmp	r3, #0
   319ba:	d115      	bne.n	319e8 <http_client_init+0x94>
		module->config.recv_buffer = malloc(config->recv_buffer_size);
   319bc:	683b      	ldr	r3, [r7, #0]
   319be:	691b      	ldr	r3, [r3, #16]
   319c0:	0018      	movs	r0, r3
   319c2:	4b1c      	ldr	r3, [pc, #112]	; (31a34 <http_client_init+0xe0>)
   319c4:	4798      	blx	r3
   319c6:	0003      	movs	r3, r0
   319c8:	001a      	movs	r2, r3
   319ca:	687b      	ldr	r3, [r7, #4]
   319cc:	65da      	str	r2, [r3, #92]	; 0x5c
		if (module->config.recv_buffer == NULL) {
   319ce:	687b      	ldr	r3, [r7, #4]
   319d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   319d2:	2b00      	cmp	r3, #0
   319d4:	d102      	bne.n	319dc <http_client_init+0x88>
			return -ENOMEM;
   319d6:	230c      	movs	r3, #12
   319d8:	425b      	negs	r3, r3
   319da:	e022      	b.n	31a22 <http_client_init+0xce>
		}
		module->alloc_buffer = 1;
   319dc:	687b      	ldr	r3, [r7, #4]
   319de:	2241      	movs	r2, #65	; 0x41
   319e0:	5c99      	ldrb	r1, [r3, r2]
   319e2:	2004      	movs	r0, #4
   319e4:	4301      	orrs	r1, r0
   319e6:	5499      	strb	r1, [r3, r2]
	}

	if (config->timeout > 0) {
   319e8:	683b      	ldr	r3, [r7, #0]
   319ea:	891b      	ldrh	r3, [r3, #8]
   319ec:	2b00      	cmp	r3, #0
   319ee:	d010      	beq.n	31a12 <http_client_init+0xbe>
		/* Enable the timer. */
		module->timer_id = sw_timer_register_callback(config->timer_inst, http_client_timer_callback, (void *)module, 0);
   319f0:	683b      	ldr	r3, [r7, #0]
   319f2:	6858      	ldr	r0, [r3, #4]
   319f4:	687a      	ldr	r2, [r7, #4]
   319f6:	4910      	ldr	r1, [pc, #64]	; (31a38 <http_client_init+0xe4>)
   319f8:	2300      	movs	r3, #0
   319fa:	4c10      	ldr	r4, [pc, #64]	; (31a3c <http_client_init+0xe8>)
   319fc:	47a0      	blx	r4
   319fe:	0002      	movs	r2, r0
   31a00:	687b      	ldr	r3, [r7, #4]
   31a02:	649a      	str	r2, [r3, #72]	; 0x48

		if (module->timer_id < 0) {
   31a04:	687b      	ldr	r3, [r7, #4]
   31a06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   31a08:	2b00      	cmp	r3, #0
   31a0a:	da02      	bge.n	31a12 <http_client_init+0xbe>
			return -ENOSPC;
   31a0c:	231c      	movs	r3, #28
   31a0e:	425b      	negs	r3, r3
   31a10:	e007      	b.n	31a22 <http_client_init+0xce>
		}
	}

	module->req.state = STATE_INIT;
   31a12:	687b      	ldr	r3, [r7, #4]
   31a14:	2200      	movs	r2, #0
   31a16:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   31a18:	687b      	ldr	r3, [r7, #4]
   31a1a:	22d8      	movs	r2, #216	; 0xd8
   31a1c:	2100      	movs	r1, #0
   31a1e:	5099      	str	r1, [r3, r2]

	return 0;
   31a20:	2300      	movs	r3, #0
}
   31a22:	0018      	movs	r0, r3
   31a24:	46bd      	mov	sp, r7
   31a26:	b003      	add	sp, #12
   31a28:	bd90      	pop	{r4, r7, pc}
   31a2a:	46c0      	nop			; (mov r8, r8)
   31a2c:	0003582f 	.word	0x0003582f
   31a30:	000357f9 	.word	0x000357f9
   31a34:	000357d1 	.word	0x000357d1
   31a38:	00031d05 	.word	0x00031d05
   31a3c:	000333a9 	.word	0x000333a9

00031a40 <http_client_register_callback>:

	return 0;
}

int http_client_register_callback(struct http_client_module *const module, http_client_callback_t callback)
{
   31a40:	b580      	push	{r7, lr}
   31a42:	b082      	sub	sp, #8
   31a44:	af00      	add	r7, sp, #0
   31a46:	6078      	str	r0, [r7, #4]
   31a48:	6039      	str	r1, [r7, #0]
	/* Checks the parameters. */
	if (module == NULL) {
   31a4a:	687b      	ldr	r3, [r7, #4]
   31a4c:	2b00      	cmp	r3, #0
   31a4e:	d102      	bne.n	31a56 <http_client_register_callback+0x16>
		return -EINVAL;
   31a50:	2316      	movs	r3, #22
   31a52:	425b      	negs	r3, r3
   31a54:	e003      	b.n	31a5e <http_client_register_callback+0x1e>
	}

	module->cb = callback;
   31a56:	687b      	ldr	r3, [r7, #4]
   31a58:	683a      	ldr	r2, [r7, #0]
   31a5a:	64da      	str	r2, [r3, #76]	; 0x4c

	return 0;
   31a5c:	2300      	movs	r3, #0
}
   31a5e:	0018      	movs	r0, r3
   31a60:	46bd      	mov	sp, r7
   31a62:	b002      	add	sp, #8
   31a64:	bd80      	pop	{r7, pc}
	...

00031a68 <_hwerr_to_stderr>:

/**
 * \brief change HW error type to standard error.
 */
static inline int _hwerr_to_stderr(int err)
{
   31a68:	b580      	push	{r7, lr}
   31a6a:	b082      	sub	sp, #8
   31a6c:	af00      	add	r7, sp, #0
   31a6e:	6078      	str	r0, [r7, #4]
	switch (err) {
   31a70:	687b      	ldr	r3, [r7, #4]
   31a72:	330e      	adds	r3, #14
   31a74:	2b0e      	cmp	r3, #14
   31a76:	d825      	bhi.n	31ac4 <_hwerr_to_stderr+0x5c>
   31a78:	009a      	lsls	r2, r3, #2
   31a7a:	4b18      	ldr	r3, [pc, #96]	; (31adc <_hwerr_to_stderr+0x74>)
   31a7c:	18d3      	adds	r3, r2, r3
   31a7e:	681b      	ldr	r3, [r3, #0]
   31a80:	469f      	mov	pc, r3
		case 0:
			return -EIO;
   31a82:	2305      	movs	r3, #5
   31a84:	425b      	negs	r3, r3
   31a86:	e024      	b.n	31ad2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ADDRESS:
			return -ENOENT;
   31a88:	2302      	movs	r3, #2
   31a8a:	425b      	negs	r3, r3
   31a8c:	e021      	b.n	31ad2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_ALREADY_IN_USE:
			return -EADDRINUSE;
   31a8e:	2370      	movs	r3, #112	; 0x70
   31a90:	425b      	negs	r3, r3
   31a92:	e01e      	b.n	31ad2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_TCP_SOCK:
		case SOCK_ERR_MAX_UDP_SOCK:
			return -ENOMEM;
   31a94:	230c      	movs	r3, #12
   31a96:	425b      	negs	r3, r3
   31a98:	e01b      	b.n	31ad2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID_ARG:
			return -EINVAL;
   31a9a:	2316      	movs	r3, #22
   31a9c:	425b      	negs	r3, r3
   31a9e:	e018      	b.n	31ad2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_MAX_LISTEN_SOCK:
			return -ENOMEM;
   31aa0:	230c      	movs	r3, #12
   31aa2:	425b      	negs	r3, r3
   31aa4:	e015      	b.n	31ad2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_INVALID:
			return -EIO;
   31aa6:	2305      	movs	r3, #5
   31aa8:	425b      	negs	r3, r3
   31aaa:	e012      	b.n	31ad2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_ADDR_IS_REQUIRED:
			return -EDESTADDRREQ;
   31aac:	2379      	movs	r3, #121	; 0x79
   31aae:	425b      	negs	r3, r3
   31ab0:	e00f      	b.n	31ad2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_CONN_ABORTED:
			return -ECONNRESET;
   31ab2:	2368      	movs	r3, #104	; 0x68
   31ab4:	425b      	negs	r3, r3
   31ab6:	e00c      	b.n	31ad2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_TIMEOUT:
			return -EAGAIN;
   31ab8:	230b      	movs	r3, #11
   31aba:	425b      	negs	r3, r3
   31abc:	e009      	b.n	31ad2 <_hwerr_to_stderr+0x6a>
		case SOCK_ERR_BUFFER_FULL:
			return -EBUSY; /* HW error occurred. Retry it*/
   31abe:	2310      	movs	r3, #16
   31ac0:	425b      	negs	r3, r3
   31ac2:	e006      	b.n	31ad2 <_hwerr_to_stderr+0x6a>
		default:
			if (err < 0) {
   31ac4:	687b      	ldr	r3, [r7, #4]
   31ac6:	2b00      	cmp	r3, #0
   31ac8:	da02      	bge.n	31ad0 <_hwerr_to_stderr+0x68>
				return -EIO;
   31aca:	2305      	movs	r3, #5
   31acc:	425b      	negs	r3, r3
   31ace:	e000      	b.n	31ad2 <_hwerr_to_stderr+0x6a>
			}
			return 0;
   31ad0:	2300      	movs	r3, #0
	}
}
   31ad2:	0018      	movs	r0, r3
   31ad4:	46bd      	mov	sp, r7
   31ad6:	b002      	add	sp, #8
   31ad8:	bd80      	pop	{r7, pc}
   31ada:	46c0      	nop			; (mov r8, r8)
   31adc:	0003ae9c 	.word	0x0003ae9c

00031ae0 <http_client_socket_event_handler>:

void http_client_socket_event_handler(SOCKET sock, uint8_t msg_type, void *msg_data)
{
   31ae0:	b580      	push	{r7, lr}
   31ae2:	b08a      	sub	sp, #40	; 0x28
   31ae4:	af00      	add	r7, sp, #0
   31ae6:	603a      	str	r2, [r7, #0]
   31ae8:	1dfb      	adds	r3, r7, #7
   31aea:	1c02      	adds	r2, r0, #0
   31aec:	701a      	strb	r2, [r3, #0]
   31aee:	1dbb      	adds	r3, r7, #6
   31af0:	1c0a      	adds	r2, r1, #0
   31af2:	701a      	strb	r2, [r3, #0]
	tstrSocketRecvMsg *msg_recv;
	int16_t send_ret;
	union http_client_data data;

	/* Find instance using the socket descriptor. */
	struct http_client_module *module = module_ref_inst[sock];
   31af4:	1dfb      	adds	r3, r7, #7
   31af6:	2200      	movs	r2, #0
   31af8:	569a      	ldrsb	r2, [r3, r2]
   31afa:	4b4b      	ldr	r3, [pc, #300]	; (31c28 <http_client_socket_event_handler+0x148>)
   31afc:	0092      	lsls	r2, r2, #2
   31afe:	58d3      	ldr	r3, [r2, r3]
   31b00:	627b      	str	r3, [r7, #36]	; 0x24
	/* If cannot found reference, This socket is not HTTP client socket. */
	if (module == NULL) {
   31b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31b04:	2b00      	cmp	r3, #0
   31b06:	d100      	bne.n	31b0a <http_client_socket_event_handler+0x2a>
   31b08:	e08a      	b.n	31c20 <http_client_socket_event_handler+0x140>
		return;
	}

	switch (msg_type) {
   31b0a:	1dbb      	adds	r3, r7, #6
   31b0c:	781b      	ldrb	r3, [r3, #0]
   31b0e:	2b06      	cmp	r3, #6
   31b10:	d040      	beq.n	31b94 <http_client_socket_event_handler+0xb4>
   31b12:	2b07      	cmp	r3, #7
   31b14:	d060      	beq.n	31bd8 <http_client_socket_event_handler+0xf8>
   31b16:	2b05      	cmp	r3, #5
   31b18:	d000      	beq.n	31b1c <http_client_socket_event_handler+0x3c>
		}
		/* Disable sending flag. */
		module->sending = 0;
    	break;
	default:
		break;
   31b1a:	e082      	b.n	31c22 <http_client_socket_event_handler+0x142>
    	msg_connect = (tstrSocketConnectMsg*)msg_data;
   31b1c:	683b      	ldr	r3, [r7, #0]
   31b1e:	623b      	str	r3, [r7, #32]
    	data.sock_connected.result = msg_connect->s8Error;
   31b20:	6a3b      	ldr	r3, [r7, #32]
   31b22:	785b      	ldrb	r3, [r3, #1]
   31b24:	b25b      	sxtb	r3, r3
   31b26:	001a      	movs	r2, r3
   31b28:	230c      	movs	r3, #12
   31b2a:	18fb      	adds	r3, r7, r3
   31b2c:	601a      	str	r2, [r3, #0]
    	if (msg_connect->s8Error < 0) {
   31b2e:	6a3b      	ldr	r3, [r7, #32]
   31b30:	785b      	ldrb	r3, [r3, #1]
   31b32:	b25b      	sxtb	r3, r3
   31b34:	2b00      	cmp	r3, #0
   31b36:	da0c      	bge.n	31b52 <http_client_socket_event_handler+0x72>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_connect->s8Error));
   31b38:	6a3b      	ldr	r3, [r7, #32]
   31b3a:	785b      	ldrb	r3, [r3, #1]
   31b3c:	b25b      	sxtb	r3, r3
   31b3e:	0018      	movs	r0, r3
   31b40:	4b3a      	ldr	r3, [pc, #232]	; (31c2c <http_client_socket_event_handler+0x14c>)
   31b42:	4798      	blx	r3
   31b44:	0002      	movs	r2, r0
   31b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31b48:	0011      	movs	r1, r2
   31b4a:	0018      	movs	r0, r3
   31b4c:	4b38      	ldr	r3, [pc, #224]	; (31c30 <http_client_socket_event_handler+0x150>)
   31b4e:	4798      	blx	r3
    	break;
   31b50:	e067      	b.n	31c22 <http_client_socket_event_handler+0x142>
			if (module->cb != NULL) {
   31b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31b56:	2b00      	cmp	r3, #0
   31b58:	d006      	beq.n	31b68 <http_client_socket_event_handler+0x88>
				module->cb(module, HTTP_CLIENT_CALLBACK_SOCK_CONNECTED, &data);
   31b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   31b5e:	220c      	movs	r2, #12
   31b60:	18ba      	adds	r2, r7, r2
   31b62:	6a78      	ldr	r0, [r7, #36]	; 0x24
   31b64:	2100      	movs	r1, #0
   31b66:	4798      	blx	r3
			module->req.state = STATE_REQ_SEND_HEADER;
   31b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31b6a:	2203      	movs	r2, #3
   31b6c:	66da      	str	r2, [r3, #108]	; 0x6c
			sw_timer_enable_callback(module->config.timer_inst, module->timer_id, module->config.timeout);
   31b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31b70:	6d58      	ldr	r0, [r3, #84]	; 0x54
   31b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31b74:	6c99      	ldr	r1, [r3, #72]	; 0x48
   31b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31b78:	2258      	movs	r2, #88	; 0x58
   31b7a:	5a9b      	ldrh	r3, [r3, r2]
   31b7c:	001a      	movs	r2, r3
   31b7e:	4b2d      	ldr	r3, [pc, #180]	; (31c34 <http_client_socket_event_handler+0x154>)
   31b80:	4798      	blx	r3
    		_http_client_recv_packet(module);
   31b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31b84:	0018      	movs	r0, r3
   31b86:	4b2c      	ldr	r3, [pc, #176]	; (31c38 <http_client_socket_event_handler+0x158>)
   31b88:	4798      	blx	r3
			_http_client_request(module);
   31b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31b8c:	0018      	movs	r0, r3
   31b8e:	4b2b      	ldr	r3, [pc, #172]	; (31c3c <http_client_socket_event_handler+0x15c>)
   31b90:	4798      	blx	r3
    	break;
   31b92:	e046      	b.n	31c22 <http_client_socket_event_handler+0x142>
    	msg_recv = (tstrSocketRecvMsg*)msg_data;
   31b94:	683b      	ldr	r3, [r7, #0]
   31b96:	61fb      	str	r3, [r7, #28]
    	if (msg_recv->s16BufferSize > 0) {
   31b98:	69fb      	ldr	r3, [r7, #28]
   31b9a:	2204      	movs	r2, #4
   31b9c:	5e9b      	ldrsh	r3, [r3, r2]
   31b9e:	2b00      	cmp	r3, #0
   31ba0:	dd09      	ble.n	31bb6 <http_client_socket_event_handler+0xd6>
    		_http_client_recved_packet(module, msg_recv->s16BufferSize);
   31ba2:	69fb      	ldr	r3, [r7, #28]
   31ba4:	2204      	movs	r2, #4
   31ba6:	5e9b      	ldrsh	r3, [r3, r2]
   31ba8:	001a      	movs	r2, r3
   31baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31bac:	0011      	movs	r1, r2
   31bae:	0018      	movs	r0, r3
   31bb0:	4b23      	ldr	r3, [pc, #140]	; (31c40 <http_client_socket_event_handler+0x160>)
   31bb2:	4798      	blx	r3
   31bb4:	e00b      	b.n	31bce <http_client_socket_event_handler+0xee>
			_http_client_clear_conn(module, _hwerr_to_stderr(msg_recv->s16BufferSize));
   31bb6:	69fb      	ldr	r3, [r7, #28]
   31bb8:	2204      	movs	r2, #4
   31bba:	5e9b      	ldrsh	r3, [r3, r2]
   31bbc:	0018      	movs	r0, r3
   31bbe:	4b1b      	ldr	r3, [pc, #108]	; (31c2c <http_client_socket_event_handler+0x14c>)
   31bc0:	4798      	blx	r3
   31bc2:	0002      	movs	r2, r0
   31bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31bc6:	0011      	movs	r1, r2
   31bc8:	0018      	movs	r0, r3
   31bca:	4b19      	ldr	r3, [pc, #100]	; (31c30 <http_client_socket_event_handler+0x150>)
   31bcc:	4798      	blx	r3
		_http_client_recv_packet(module);
   31bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31bd0:	0018      	movs	r0, r3
   31bd2:	4b19      	ldr	r3, [pc, #100]	; (31c38 <http_client_socket_event_handler+0x158>)
   31bd4:	4798      	blx	r3
		break;
   31bd6:	e024      	b.n	31c22 <http_client_socket_event_handler+0x142>
		send_ret = *(int16_t*)msg_data;
   31bd8:	231a      	movs	r3, #26
   31bda:	18fb      	adds	r3, r7, r3
   31bdc:	683a      	ldr	r2, [r7, #0]
   31bde:	8812      	ldrh	r2, [r2, #0]
   31be0:	801a      	strh	r2, [r3, #0]
		if (send_ret < 0) {
   31be2:	231a      	movs	r3, #26
   31be4:	18fb      	adds	r3, r7, r3
   31be6:	2200      	movs	r2, #0
   31be8:	5e9b      	ldrsh	r3, [r3, r2]
   31bea:	2b00      	cmp	r3, #0
   31bec:	da0d      	bge.n	31c0a <http_client_socket_event_handler+0x12a>
			_http_client_clear_conn(module, _hwerr_to_stderr(send_ret));
   31bee:	231a      	movs	r3, #26
   31bf0:	18fb      	adds	r3, r7, r3
   31bf2:	2200      	movs	r2, #0
   31bf4:	5e9b      	ldrsh	r3, [r3, r2]
   31bf6:	0018      	movs	r0, r3
   31bf8:	4b0c      	ldr	r3, [pc, #48]	; (31c2c <http_client_socket_event_handler+0x14c>)
   31bfa:	4798      	blx	r3
   31bfc:	0002      	movs	r2, r0
   31bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31c00:	0011      	movs	r1, r2
   31c02:	0018      	movs	r0, r3
   31c04:	4b0a      	ldr	r3, [pc, #40]	; (31c30 <http_client_socket_event_handler+0x150>)
   31c06:	4798      	blx	r3
   31c08:	e003      	b.n	31c12 <http_client_socket_event_handler+0x132>
    		_http_client_request(module);
   31c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31c0c:	0018      	movs	r0, r3
   31c0e:	4b0b      	ldr	r3, [pc, #44]	; (31c3c <http_client_socket_event_handler+0x15c>)
   31c10:	4798      	blx	r3
		module->sending = 0;
   31c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31c14:	2241      	movs	r2, #65	; 0x41
   31c16:	5c99      	ldrb	r1, [r3, r2]
   31c18:	2001      	movs	r0, #1
   31c1a:	4381      	bics	r1, r0
   31c1c:	5499      	strb	r1, [r3, r2]
    	break;
   31c1e:	e000      	b.n	31c22 <http_client_socket_event_handler+0x142>
		return;
   31c20:	46c0      	nop			; (mov r8, r8)
	}

}
   31c22:	46bd      	mov	sp, r7
   31c24:	b00a      	add	sp, #40	; 0x28
   31c26:	bd80      	pop	{r7, pc}
   31c28:	200046f4 	.word	0x200046f4
   31c2c:	00031a69 	.word	0x00031a69
   31c30:	000320dd 	.word	0x000320dd
   31c34:	00033439 	.word	0x00033439
   31c38:	00032969 	.word	0x00032969
   31c3c:	00032231 	.word	0x00032231
   31c40:	000329cd 	.word	0x000329cd

00031c44 <http_client_socket_resolve_handler>:

void http_client_socket_resolve_handler(uint8_t *doamin_name, uint32_t server_ip)
{
   31c44:	b580      	push	{r7, lr}
   31c46:	b088      	sub	sp, #32
   31c48:	af00      	add	r7, sp, #0
   31c4a:	6078      	str	r0, [r7, #4]
   31c4c:	6039      	str	r1, [r7, #0]
	int i;
	struct http_client_module *module;
	struct sockaddr_in addr_in;

	for (i = 0; i < TCP_SOCK_MAX; i++) {
   31c4e:	2300      	movs	r3, #0
   31c50:	61fb      	str	r3, [r7, #28]
   31c52:	e048      	b.n	31ce6 <http_client_socket_resolve_handler+0xa2>
		if (module_ref_inst[i] != NULL) {
   31c54:	4b27      	ldr	r3, [pc, #156]	; (31cf4 <http_client_socket_resolve_handler+0xb0>)
   31c56:	69fa      	ldr	r2, [r7, #28]
   31c58:	0092      	lsls	r2, r2, #2
   31c5a:	58d3      	ldr	r3, [r2, r3]
   31c5c:	2b00      	cmp	r3, #0
   31c5e:	d03f      	beq.n	31ce0 <http_client_socket_resolve_handler+0x9c>
			module = module_ref_inst[i];
   31c60:	4b24      	ldr	r3, [pc, #144]	; (31cf4 <http_client_socket_resolve_handler+0xb0>)
   31c62:	69fa      	ldr	r2, [r7, #28]
   31c64:	0092      	lsls	r2, r2, #2
   31c66:	58d3      	ldr	r3, [r2, r3]
   31c68:	61bb      	str	r3, [r7, #24]
			if (!strcmp((const char*)doamin_name, module->host) && module->req.state == STATE_TRY_SOCK_CONNECT) {
   31c6a:	69bb      	ldr	r3, [r7, #24]
   31c6c:	1c5a      	adds	r2, r3, #1
   31c6e:	687b      	ldr	r3, [r7, #4]
   31c70:	0011      	movs	r1, r2
   31c72:	0018      	movs	r0, r3
   31c74:	4b20      	ldr	r3, [pc, #128]	; (31cf8 <http_client_socket_resolve_handler+0xb4>)
   31c76:	4798      	blx	r3
   31c78:	1e03      	subs	r3, r0, #0
   31c7a:	d131      	bne.n	31ce0 <http_client_socket_resolve_handler+0x9c>
   31c7c:	69bb      	ldr	r3, [r7, #24]
   31c7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31c80:	2b01      	cmp	r3, #1
   31c82:	d12d      	bne.n	31ce0 <http_client_socket_resolve_handler+0x9c>
				if (server_ip == 0) { /* Host was not found or was not reachable. */ 
   31c84:	683b      	ldr	r3, [r7, #0]
   31c86:	2b00      	cmp	r3, #0
   31c88:	d107      	bne.n	31c9a <http_client_socket_resolve_handler+0x56>
					_http_client_clear_conn(module, -EHOSTUNREACH);
   31c8a:	2376      	movs	r3, #118	; 0x76
   31c8c:	425a      	negs	r2, r3
   31c8e:	69bb      	ldr	r3, [r7, #24]
   31c90:	0011      	movs	r1, r2
   31c92:	0018      	movs	r0, r3
   31c94:	4b19      	ldr	r3, [pc, #100]	; (31cfc <http_client_socket_resolve_handler+0xb8>)
   31c96:	4798      	blx	r3
					return;
   31c98:	e028      	b.n	31cec <http_client_socket_resolve_handler+0xa8>
				}
				addr_in.sin_family = AF_INET;
   31c9a:	2308      	movs	r3, #8
   31c9c:	18fb      	adds	r3, r7, r3
   31c9e:	2202      	movs	r2, #2
   31ca0:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   31ca2:	69bb      	ldr	r3, [r7, #24]
   31ca4:	2250      	movs	r2, #80	; 0x50
   31ca6:	5a9b      	ldrh	r3, [r3, r2]
   31ca8:	021b      	lsls	r3, r3, #8
   31caa:	b21a      	sxth	r2, r3
   31cac:	69bb      	ldr	r3, [r7, #24]
   31cae:	2150      	movs	r1, #80	; 0x50
   31cb0:	5a5b      	ldrh	r3, [r3, r1]
   31cb2:	0a1b      	lsrs	r3, r3, #8
   31cb4:	b29b      	uxth	r3, r3
   31cb6:	b21b      	sxth	r3, r3
   31cb8:	4313      	orrs	r3, r2
   31cba:	b21b      	sxth	r3, r3
   31cbc:	b29a      	uxth	r2, r3
   31cbe:	2308      	movs	r3, #8
   31cc0:	18fb      	adds	r3, r7, r3
   31cc2:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = server_ip;
   31cc4:	2308      	movs	r3, #8
   31cc6:	18fb      	adds	r3, r7, r3
   31cc8:	683a      	ldr	r2, [r7, #0]
   31cca:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   31ccc:	69bb      	ldr	r3, [r7, #24]
   31cce:	781b      	ldrb	r3, [r3, #0]
   31cd0:	b25b      	sxtb	r3, r3
   31cd2:	2208      	movs	r2, #8
   31cd4:	18b9      	adds	r1, r7, r2
   31cd6:	2210      	movs	r2, #16
   31cd8:	0018      	movs	r0, r3
   31cda:	4b09      	ldr	r3, [pc, #36]	; (31d00 <http_client_socket_resolve_handler+0xbc>)
   31cdc:	4798      	blx	r3
				return;
   31cde:	e005      	b.n	31cec <http_client_socket_resolve_handler+0xa8>
	for (i = 0; i < TCP_SOCK_MAX; i++) {
   31ce0:	69fb      	ldr	r3, [r7, #28]
   31ce2:	3301      	adds	r3, #1
   31ce4:	61fb      	str	r3, [r7, #28]
   31ce6:	69fb      	ldr	r3, [r7, #28]
   31ce8:	2b06      	cmp	r3, #6
   31cea:	ddb3      	ble.n	31c54 <http_client_socket_resolve_handler+0x10>
			}
		}
	}
}
   31cec:	46bd      	mov	sp, r7
   31cee:	b008      	add	sp, #32
   31cf0:	bd80      	pop	{r7, pc}
   31cf2:	46c0      	nop			; (mov r8, r8)
   31cf4:	200046f4 	.word	0x200046f4
   31cf8:	00035b87 	.word	0x00035b87
   31cfc:	000320dd 	.word	0x000320dd
   31d00:	00026601 	.word	0x00026601

00031d04 <http_client_timer_callback>:

void http_client_timer_callback(struct sw_timer_module *const module, int timer_id, void *context, int period)
{
   31d04:	b580      	push	{r7, lr}
   31d06:	b086      	sub	sp, #24
   31d08:	af00      	add	r7, sp, #0
   31d0a:	60f8      	str	r0, [r7, #12]
   31d0c:	60b9      	str	r1, [r7, #8]
   31d0e:	607a      	str	r2, [r7, #4]
   31d10:	603b      	str	r3, [r7, #0]
	struct http_client_module *module_inst = (struct http_client_module *)context;
   31d12:	687b      	ldr	r3, [r7, #4]
   31d14:	617b      	str	r3, [r7, #20]

	/* Checks invalid arguments. */
	if (module_inst == NULL) {
   31d16:	697b      	ldr	r3, [r7, #20]
   31d18:	2b00      	cmp	r3, #0
   31d1a:	d007      	beq.n	31d2c <http_client_timer_callback+0x28>
		return;
	}

	_http_client_clear_conn(module_inst, -ETIME);
   31d1c:	233e      	movs	r3, #62	; 0x3e
   31d1e:	425a      	negs	r2, r3
   31d20:	697b      	ldr	r3, [r7, #20]
   31d22:	0011      	movs	r1, r2
   31d24:	0018      	movs	r0, r3
   31d26:	4b03      	ldr	r3, [pc, #12]	; (31d34 <http_client_timer_callback+0x30>)
   31d28:	4798      	blx	r3
   31d2a:	e000      	b.n	31d2e <http_client_timer_callback+0x2a>
		return;
   31d2c:	46c0      	nop			; (mov r8, r8)
}
   31d2e:	46bd      	mov	sp, r7
   31d30:	b006      	add	sp, #24
   31d32:	bd80      	pop	{r7, pc}
   31d34:	000320dd 	.word	0x000320dd

00031d38 <_is_ip>:

static int _is_ip(const char *host)
{
   31d38:	b580      	push	{r7, lr}
   31d3a:	b084      	sub	sp, #16
   31d3c:	af00      	add	r7, sp, #0
   31d3e:	6078      	str	r0, [r7, #4]
	uint32_t isv6 = 0;
   31d40:	2300      	movs	r3, #0
   31d42:	60fb      	str	r3, [r7, #12]
	char ch;

	while (*host != '\0') {
   31d44:	e03a      	b.n	31dbc <_is_ip+0x84>
		ch = *host++;
   31d46:	687b      	ldr	r3, [r7, #4]
   31d48:	1c5a      	adds	r2, r3, #1
   31d4a:	607a      	str	r2, [r7, #4]
   31d4c:	220b      	movs	r2, #11
   31d4e:	18ba      	adds	r2, r7, r2
   31d50:	781b      	ldrb	r3, [r3, #0]
   31d52:	7013      	strb	r3, [r2, #0]
		if ((ch >= 'a' && ch <= 'f') || (ch >= 'A' && ch <= 'F') || ch == ':' || ch == '/') {
   31d54:	230b      	movs	r3, #11
   31d56:	18fb      	adds	r3, r7, r3
   31d58:	781b      	ldrb	r3, [r3, #0]
   31d5a:	2b60      	cmp	r3, #96	; 0x60
   31d5c:	d904      	bls.n	31d68 <_is_ip+0x30>
   31d5e:	230b      	movs	r3, #11
   31d60:	18fb      	adds	r3, r7, r3
   31d62:	781b      	ldrb	r3, [r3, #0]
   31d64:	2b66      	cmp	r3, #102	; 0x66
   31d66:	d913      	bls.n	31d90 <_is_ip+0x58>
   31d68:	230b      	movs	r3, #11
   31d6a:	18fb      	adds	r3, r7, r3
   31d6c:	781b      	ldrb	r3, [r3, #0]
   31d6e:	2b40      	cmp	r3, #64	; 0x40
   31d70:	d904      	bls.n	31d7c <_is_ip+0x44>
   31d72:	230b      	movs	r3, #11
   31d74:	18fb      	adds	r3, r7, r3
   31d76:	781b      	ldrb	r3, [r3, #0]
   31d78:	2b46      	cmp	r3, #70	; 0x46
   31d7a:	d909      	bls.n	31d90 <_is_ip+0x58>
   31d7c:	230b      	movs	r3, #11
   31d7e:	18fb      	adds	r3, r7, r3
   31d80:	781b      	ldrb	r3, [r3, #0]
   31d82:	2b3a      	cmp	r3, #58	; 0x3a
   31d84:	d004      	beq.n	31d90 <_is_ip+0x58>
   31d86:	230b      	movs	r3, #11
   31d88:	18fb      	adds	r3, r7, r3
   31d8a:	781b      	ldrb	r3, [r3, #0]
   31d8c:	2b2f      	cmp	r3, #47	; 0x2f
   31d8e:	d102      	bne.n	31d96 <_is_ip+0x5e>
			isv6 = 1;
   31d90:	2301      	movs	r3, #1
   31d92:	60fb      	str	r3, [r7, #12]
   31d94:	e012      	b.n	31dbc <_is_ip+0x84>
		} else if (ch == '.') {
   31d96:	230b      	movs	r3, #11
   31d98:	18fb      	adds	r3, r7, r3
   31d9a:	781b      	ldrb	r3, [r3, #0]
   31d9c:	2b2e      	cmp	r3, #46	; 0x2e
   31d9e:	d104      	bne.n	31daa <_is_ip+0x72>
			if (isv6) {
   31da0:	68fb      	ldr	r3, [r7, #12]
   31da2:	2b00      	cmp	r3, #0
   31da4:	d00a      	beq.n	31dbc <_is_ip+0x84>
				return 0;
   31da6:	2300      	movs	r3, #0
   31da8:	e00d      	b.n	31dc6 <_is_ip+0x8e>
			}
		} else if ((ch & 0x30) != 0x30) {
   31daa:	230b      	movs	r3, #11
   31dac:	18fb      	adds	r3, r7, r3
   31dae:	781b      	ldrb	r3, [r3, #0]
   31db0:	2230      	movs	r2, #48	; 0x30
   31db2:	4013      	ands	r3, r2
   31db4:	2b30      	cmp	r3, #48	; 0x30
   31db6:	d001      	beq.n	31dbc <_is_ip+0x84>
			return 0;
   31db8:	2300      	movs	r3, #0
   31dba:	e004      	b.n	31dc6 <_is_ip+0x8e>
	while (*host != '\0') {
   31dbc:	687b      	ldr	r3, [r7, #4]
   31dbe:	781b      	ldrb	r3, [r3, #0]
   31dc0:	2b00      	cmp	r3, #0
   31dc2:	d1c0      	bne.n	31d46 <_is_ip+0xe>
		}
	}
	return 1;
   31dc4:	2301      	movs	r3, #1
}
   31dc6:	0018      	movs	r0, r3
   31dc8:	46bd      	mov	sp, r7
   31dca:	b004      	add	sp, #16
   31dcc:	bd80      	pop	{r7, pc}
	...

00031dd0 <http_client_send_request>:

int http_client_send_request(struct http_client_module *const module, const char *url,
	enum http_method method, struct http_entity *const entity, const char *ext_header)
{
   31dd0:	b5b0      	push	{r4, r5, r7, lr}
   31dd2:	b08e      	sub	sp, #56	; 0x38
   31dd4:	af00      	add	r7, sp, #0
   31dd6:	60f8      	str	r0, [r7, #12]
   31dd8:	60b9      	str	r1, [r7, #8]
   31dda:	603b      	str	r3, [r7, #0]
   31ddc:	1dfb      	adds	r3, r7, #7
   31dde:	701a      	strb	r2, [r3, #0]
	uint8_t flag = 0;
   31de0:	2337      	movs	r3, #55	; 0x37
   31de2:	18fb      	adds	r3, r7, r3
   31de4:	2200      	movs	r2, #0
   31de6:	701a      	strb	r2, [r3, #0]
	struct sockaddr_in addr_in;
	const char *uri = NULL;
   31de8:	2300      	movs	r3, #0
   31dea:	62bb      	str	r3, [r7, #40]	; 0x28
	int i = 0, j = 0, reconnect = 0;
   31dec:	2300      	movs	r3, #0
   31dee:	633b      	str	r3, [r7, #48]	; 0x30
   31df0:	2300      	movs	r3, #0
   31df2:	62fb      	str	r3, [r7, #44]	; 0x2c
   31df4:	2300      	movs	r3, #0
   31df6:	627b      	str	r3, [r7, #36]	; 0x24

	if (module == NULL) {
   31df8:	68fb      	ldr	r3, [r7, #12]
   31dfa:	2b00      	cmp	r3, #0
   31dfc:	d102      	bne.n	31e04 <http_client_send_request+0x34>
		return -EINVAL;
   31dfe:	2316      	movs	r3, #22
   31e00:	425b      	negs	r3, r3
   31e02:	e145      	b.n	32090 <http_client_send_request+0x2c0>
	}

	if (module->req.state > STATE_SOCK_CONNECTED) {
   31e04:	68fb      	ldr	r3, [r7, #12]
   31e06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31e08:	2b02      	cmp	r3, #2
   31e0a:	d902      	bls.n	31e12 <http_client_send_request+0x42>
		return -EBUSY;
   31e0c:	2310      	movs	r3, #16
   31e0e:	425b      	negs	r3, r3
   31e10:	e13e      	b.n	32090 <http_client_send_request+0x2c0>
	}

	/* Separate host and uri */
	if (!strncmp(url, "http://", 7)) {
   31e12:	49a1      	ldr	r1, [pc, #644]	; (32098 <http_client_send_request+0x2c8>)
   31e14:	68bb      	ldr	r3, [r7, #8]
   31e16:	2207      	movs	r2, #7
   31e18:	0018      	movs	r0, r3
   31e1a:	4ba0      	ldr	r3, [pc, #640]	; (3209c <http_client_send_request+0x2cc>)
   31e1c:	4798      	blx	r3
   31e1e:	1e03      	subs	r3, r0, #0
   31e20:	d102      	bne.n	31e28 <http_client_send_request+0x58>
		i = 7;
   31e22:	2307      	movs	r3, #7
   31e24:	633b      	str	r3, [r7, #48]	; 0x30
   31e26:	e009      	b.n	31e3c <http_client_send_request+0x6c>
	} else if (!strncmp(url, "https://", 8)) {
   31e28:	499d      	ldr	r1, [pc, #628]	; (320a0 <http_client_send_request+0x2d0>)
   31e2a:	68bb      	ldr	r3, [r7, #8]
   31e2c:	2208      	movs	r2, #8
   31e2e:	0018      	movs	r0, r3
   31e30:	4b9a      	ldr	r3, [pc, #616]	; (3209c <http_client_send_request+0x2cc>)
   31e32:	4798      	blx	r3
   31e34:	1e03      	subs	r3, r0, #0
   31e36:	d101      	bne.n	31e3c <http_client_send_request+0x6c>
		i = 8;
   31e38:	2308      	movs	r3, #8
   31e3a:	633b      	str	r3, [r7, #48]	; 0x30
	}
	reconnect = strncmp(module->host, url + i, strlen(module->host));
   31e3c:	68fb      	ldr	r3, [r7, #12]
   31e3e:	1c5c      	adds	r4, r3, #1
   31e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31e42:	68ba      	ldr	r2, [r7, #8]
   31e44:	18d5      	adds	r5, r2, r3
   31e46:	68fb      	ldr	r3, [r7, #12]
   31e48:	3301      	adds	r3, #1
   31e4a:	0018      	movs	r0, r3
   31e4c:	4b95      	ldr	r3, [pc, #596]	; (320a4 <http_client_send_request+0x2d4>)
   31e4e:	4798      	blx	r3
   31e50:	0003      	movs	r3, r0
   31e52:	001a      	movs	r2, r3
   31e54:	0029      	movs	r1, r5
   31e56:	0020      	movs	r0, r4
   31e58:	4b90      	ldr	r3, [pc, #576]	; (3209c <http_client_send_request+0x2cc>)
   31e5a:	4798      	blx	r3
   31e5c:	0003      	movs	r3, r0
   31e5e:	627b      	str	r3, [r7, #36]	; 0x24

	for (; url[i] != '\0' && url[i] != '/'; i++) {
   31e60:	e00d      	b.n	31e7e <http_client_send_request+0xae>
		module->host[j++] = url[i];
   31e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   31e64:	1c5a      	adds	r2, r3, #1
   31e66:	62fa      	str	r2, [r7, #44]	; 0x2c
   31e68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   31e6a:	68b9      	ldr	r1, [r7, #8]
   31e6c:	188a      	adds	r2, r1, r2
   31e6e:	7811      	ldrb	r1, [r2, #0]
   31e70:	68fa      	ldr	r2, [r7, #12]
   31e72:	18d3      	adds	r3, r2, r3
   31e74:	1c0a      	adds	r2, r1, #0
   31e76:	705a      	strb	r2, [r3, #1]
	for (; url[i] != '\0' && url[i] != '/'; i++) {
   31e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31e7a:	3301      	adds	r3, #1
   31e7c:	633b      	str	r3, [r7, #48]	; 0x30
   31e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31e80:	68ba      	ldr	r2, [r7, #8]
   31e82:	18d3      	adds	r3, r2, r3
   31e84:	781b      	ldrb	r3, [r3, #0]
   31e86:	2b00      	cmp	r3, #0
   31e88:	d005      	beq.n	31e96 <http_client_send_request+0xc6>
   31e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31e8c:	68ba      	ldr	r2, [r7, #8]
   31e8e:	18d3      	adds	r3, r2, r3
   31e90:	781b      	ldrb	r3, [r3, #0]
   31e92:	2b2f      	cmp	r3, #47	; 0x2f
   31e94:	d1e5      	bne.n	31e62 <http_client_send_request+0x92>
	}
	module->host[j] = '\0';
   31e96:	68fa      	ldr	r2, [r7, #12]
   31e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   31e9a:	18d3      	adds	r3, r2, r3
   31e9c:	3301      	adds	r3, #1
   31e9e:	2200      	movs	r2, #0
   31ea0:	701a      	strb	r2, [r3, #0]
	uri = url + i;
   31ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   31ea4:	68ba      	ldr	r2, [r7, #8]
   31ea6:	18d3      	adds	r3, r2, r3
   31ea8:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Checks the parameters. */
	if (strlen(module->host) == 0) {
   31eaa:	68fb      	ldr	r3, [r7, #12]
   31eac:	3301      	adds	r3, #1
   31eae:	781b      	ldrb	r3, [r3, #0]
   31eb0:	2b00      	cmp	r3, #0
   31eb2:	d102      	bne.n	31eba <http_client_send_request+0xea>
		return -EINVAL;
   31eb4:	2316      	movs	r3, #22
   31eb6:	425b      	negs	r3, r3
   31eb8:	e0ea      	b.n	32090 <http_client_send_request+0x2c0>
	}

	if (strlen(uri) >= HTTP_MAX_URI_LENGTH) {
   31eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
   31ebc:	0018      	movs	r0, r3
   31ebe:	4b79      	ldr	r3, [pc, #484]	; (320a4 <http_client_send_request+0x2d4>)
   31ec0:	4798      	blx	r3
   31ec2:	0003      	movs	r3, r0
   31ec4:	2b3f      	cmp	r3, #63	; 0x3f
   31ec6:	d902      	bls.n	31ece <http_client_send_request+0xfe>
		return -ENAMETOOLONG;
   31ec8:	235b      	movs	r3, #91	; 0x5b
   31eca:	425b      	negs	r3, r3
   31ecc:	e0e0      	b.n	32090 <http_client_send_request+0x2c0>
	}

	if (module->req.ext_header != NULL) {
   31ece:	68fb      	ldr	r3, [r7, #12]
   31ed0:	22d4      	movs	r2, #212	; 0xd4
   31ed2:	589b      	ldr	r3, [r3, r2]
   31ed4:	2b00      	cmp	r3, #0
   31ed6:	d005      	beq.n	31ee4 <http_client_send_request+0x114>
		free(module->req.ext_header);
   31ed8:	68fb      	ldr	r3, [r7, #12]
   31eda:	22d4      	movs	r2, #212	; 0xd4
   31edc:	589b      	ldr	r3, [r3, r2]
   31ede:	0018      	movs	r0, r3
   31ee0:	4b71      	ldr	r3, [pc, #452]	; (320a8 <http_client_send_request+0x2d8>)
   31ee2:	4798      	blx	r3
	}
	if (ext_header != NULL) {
   31ee4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   31ee6:	2b00      	cmp	r3, #0
   31ee8:	d010      	beq.n	31f0c <http_client_send_request+0x13c>
		module->req.ext_header = strdup(ext_header);
   31eea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   31eec:	0018      	movs	r0, r3
   31eee:	4b6f      	ldr	r3, [pc, #444]	; (320ac <http_client_send_request+0x2dc>)
   31ef0:	4798      	blx	r3
   31ef2:	0003      	movs	r3, r0
   31ef4:	0019      	movs	r1, r3
   31ef6:	68fb      	ldr	r3, [r7, #12]
   31ef8:	22d4      	movs	r2, #212	; 0xd4
   31efa:	5099      	str	r1, [r3, r2]
		if (module->req.ext_header == NULL) {
   31efc:	68fb      	ldr	r3, [r7, #12]
   31efe:	22d4      	movs	r2, #212	; 0xd4
   31f00:	589b      	ldr	r3, [r3, r2]
   31f02:	2b00      	cmp	r3, #0
   31f04:	d106      	bne.n	31f14 <http_client_send_request+0x144>
			return -ENOMEM;
   31f06:	230c      	movs	r3, #12
   31f08:	425b      	negs	r3, r3
   31f0a:	e0c1      	b.n	32090 <http_client_send_request+0x2c0>
		}
	} else {
		module->req.ext_header = NULL;
   31f0c:	68fb      	ldr	r3, [r7, #12]
   31f0e:	22d4      	movs	r2, #212	; 0xd4
   31f10:	2100      	movs	r1, #0
   31f12:	5099      	str	r1, [r3, r2]
	}

	module->sending = 0;
   31f14:	68fb      	ldr	r3, [r7, #12]
   31f16:	2241      	movs	r2, #65	; 0x41
   31f18:	5c99      	ldrb	r1, [r3, r2]
   31f1a:	2001      	movs	r0, #1
   31f1c:	4381      	bics	r1, r0
   31f1e:	5499      	strb	r1, [r3, r2]
	module->recved_size = 0;
   31f20:	68fb      	ldr	r3, [r7, #12]
   31f22:	2200      	movs	r2, #0
   31f24:	645a      	str	r2, [r3, #68]	; 0x44
	if (uri[0] == '/') {
   31f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
   31f28:	781b      	ldrb	r3, [r3, #0]
   31f2a:	2b2f      	cmp	r3, #47	; 0x2f
   31f2c:	d107      	bne.n	31f3e <http_client_send_request+0x16e>
		strcpy(module->req.uri, uri);
   31f2e:	68fb      	ldr	r3, [r7, #12]
   31f30:	3370      	adds	r3, #112	; 0x70
   31f32:	6aba      	ldr	r2, [r7, #40]	; 0x28
   31f34:	0011      	movs	r1, r2
   31f36:	0018      	movs	r0, r3
   31f38:	4b5d      	ldr	r3, [pc, #372]	; (320b0 <http_client_send_request+0x2e0>)
   31f3a:	4798      	blx	r3
   31f3c:	e00f      	b.n	31f5e <http_client_send_request+0x18e>
		} else {
		module->req.uri[0] = '/';
   31f3e:	68fb      	ldr	r3, [r7, #12]
   31f40:	2270      	movs	r2, #112	; 0x70
   31f42:	212f      	movs	r1, #47	; 0x2f
   31f44:	5499      	strb	r1, [r3, r2]
		if (uri[0] != 0) {
   31f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
   31f48:	781b      	ldrb	r3, [r3, #0]
   31f4a:	2b00      	cmp	r3, #0
   31f4c:	d007      	beq.n	31f5e <http_client_send_request+0x18e>
			strcpy(module->req.uri + 1, uri);
   31f4e:	68fb      	ldr	r3, [r7, #12]
   31f50:	3370      	adds	r3, #112	; 0x70
   31f52:	3301      	adds	r3, #1
   31f54:	6aba      	ldr	r2, [r7, #40]	; 0x28
   31f56:	0011      	movs	r1, r2
   31f58:	0018      	movs	r0, r3
   31f5a:	4b55      	ldr	r3, [pc, #340]	; (320b0 <http_client_send_request+0x2e0>)
   31f5c:	4798      	blx	r3
		}
	}

	if (entity != NULL) {
   31f5e:	683b      	ldr	r3, [r7, #0]
   31f60:	2b00      	cmp	r3, #0
   31f62:	d007      	beq.n	31f74 <http_client_send_request+0x1a4>
		memcpy(&module->req.entity, entity, sizeof(struct http_entity));
   31f64:	68fb      	ldr	r3, [r7, #12]
   31f66:	33b0      	adds	r3, #176	; 0xb0
   31f68:	6839      	ldr	r1, [r7, #0]
   31f6a:	2218      	movs	r2, #24
   31f6c:	0018      	movs	r0, r3
   31f6e:	4b51      	ldr	r3, [pc, #324]	; (320b4 <http_client_send_request+0x2e4>)
   31f70:	4798      	blx	r3
   31f72:	e006      	b.n	31f82 <http_client_send_request+0x1b2>
		} else {
		memset(&module->req.entity, 0, sizeof(struct http_entity));
   31f74:	68fb      	ldr	r3, [r7, #12]
   31f76:	33b0      	adds	r3, #176	; 0xb0
   31f78:	2218      	movs	r2, #24
   31f7a:	2100      	movs	r1, #0
   31f7c:	0018      	movs	r0, r3
   31f7e:	4b4e      	ldr	r3, [pc, #312]	; (320b8 <http_client_send_request+0x2e8>)
   31f80:	4798      	blx	r3
	}

	module->req.method = method;
   31f82:	68fb      	ldr	r3, [r7, #12]
   31f84:	1dfa      	adds	r2, r7, #7
   31f86:	21c8      	movs	r1, #200	; 0xc8
   31f88:	7812      	ldrb	r2, [r2, #0]
   31f8a:	545a      	strb	r2, [r3, r1]
	
	switch (module->req.state) {
   31f8c:	68fb      	ldr	r3, [r7, #12]
   31f8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   31f90:	2b01      	cmp	r3, #1
   31f92:	d003      	beq.n	31f9c <http_client_send_request+0x1cc>
   31f94:	d316      	bcc.n	31fc4 <http_client_send_request+0x1f4>
   31f96:	2b02      	cmp	r3, #2
   31f98:	d004      	beq.n	31fa4 <http_client_send_request+0x1d4>
   31f9a:	e074      	b.n	32086 <http_client_send_request+0x2b6>
	case STATE_TRY_SOCK_CONNECT:
		if (!reconnect) {
   31f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31f9e:	2b00      	cmp	r3, #0
   31fa0:	d100      	bne.n	31fa4 <http_client_send_request+0x1d4>
   31fa2:	e073      	b.n	3208c <http_client_send_request+0x2bc>
			break; /* Currently try to connect to the same server. */
		}
	case STATE_SOCK_CONNECTED:
		if (!reconnect) {
   31fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   31fa6:	2b00      	cmp	r3, #0
   31fa8:	d107      	bne.n	31fba <http_client_send_request+0x1ea>
			module->req.state = STATE_REQ_SEND_HEADER;
   31faa:	68fb      	ldr	r3, [r7, #12]
   31fac:	2203      	movs	r2, #3
   31fae:	66da      	str	r2, [r3, #108]	; 0x6c
			/* Send request immediately. */
			_http_client_request(module);
   31fb0:	68fb      	ldr	r3, [r7, #12]
   31fb2:	0018      	movs	r0, r3
   31fb4:	4b41      	ldr	r3, [pc, #260]	; (320bc <http_client_send_request+0x2ec>)
   31fb6:	4798      	blx	r3
			break;
   31fb8:	e069      	b.n	3208e <http_client_send_request+0x2be>
		} else {
			/* Request to another peer. Disconnect and try connect again. */
			_http_client_clear_conn(module, 0);
   31fba:	68fb      	ldr	r3, [r7, #12]
   31fbc:	2100      	movs	r1, #0
   31fbe:	0018      	movs	r0, r3
   31fc0:	4b3f      	ldr	r3, [pc, #252]	; (320c0 <http_client_send_request+0x2f0>)
   31fc2:	4798      	blx	r3
		}
	case STATE_INIT:
		if (module->config.tls) {
   31fc4:	68fb      	ldr	r3, [r7, #12]
   31fc6:	2252      	movs	r2, #82	; 0x52
   31fc8:	5c9b      	ldrb	r3, [r3, r2]
   31fca:	2b00      	cmp	r3, #0
   31fcc:	d007      	beq.n	31fde <http_client_send_request+0x20e>
			flag |= SOCKET_FLAGS_SSL;
   31fce:	2337      	movs	r3, #55	; 0x37
   31fd0:	18fb      	adds	r3, r7, r3
   31fd2:	2237      	movs	r2, #55	; 0x37
   31fd4:	18ba      	adds	r2, r7, r2
   31fd6:	7812      	ldrb	r2, [r2, #0]
   31fd8:	2101      	movs	r1, #1
   31fda:	430a      	orrs	r2, r1
   31fdc:	701a      	strb	r2, [r3, #0]
		}
		module->sock = socket(AF_INET, SOCK_STREAM, flag);
   31fde:	2337      	movs	r3, #55	; 0x37
   31fe0:	18fb      	adds	r3, r7, r3
   31fe2:	781b      	ldrb	r3, [r3, #0]
   31fe4:	001a      	movs	r2, r3
   31fe6:	2101      	movs	r1, #1
   31fe8:	2002      	movs	r0, #2
   31fea:	4b36      	ldr	r3, [pc, #216]	; (320c4 <http_client_send_request+0x2f4>)
   31fec:	4798      	blx	r3
   31fee:	0003      	movs	r3, r0
   31ff0:	001a      	movs	r2, r3
   31ff2:	68fb      	ldr	r3, [r7, #12]
   31ff4:	701a      	strb	r2, [r3, #0]
		if (module->sock >= 0) {
   31ff6:	68fb      	ldr	r3, [r7, #12]
   31ff8:	781b      	ldrb	r3, [r3, #0]
   31ffa:	b25b      	sxtb	r3, r3
   31ffc:	2b00      	cmp	r3, #0
   31ffe:	db3f      	blt.n	32080 <http_client_send_request+0x2b0>
			module_ref_inst[module->sock] = module;
   32000:	68fb      	ldr	r3, [r7, #12]
   32002:	781b      	ldrb	r3, [r3, #0]
   32004:	b25b      	sxtb	r3, r3
   32006:	001a      	movs	r2, r3
   32008:	4b2f      	ldr	r3, [pc, #188]	; (320c8 <http_client_send_request+0x2f8>)
   3200a:	0092      	lsls	r2, r2, #2
   3200c:	68f9      	ldr	r1, [r7, #12]
   3200e:	50d1      	str	r1, [r2, r3]
			if (_is_ip(module->host)) {
   32010:	68fb      	ldr	r3, [r7, #12]
   32012:	3301      	adds	r3, #1
   32014:	0018      	movs	r0, r3
   32016:	4b2d      	ldr	r3, [pc, #180]	; (320cc <http_client_send_request+0x2fc>)
   32018:	4798      	blx	r3
   3201a:	1e03      	subs	r3, r0, #0
   3201c:	d027      	beq.n	3206e <http_client_send_request+0x29e>
				addr_in.sin_family = AF_INET;
   3201e:	2314      	movs	r3, #20
   32020:	18fb      	adds	r3, r7, r3
   32022:	2202      	movs	r2, #2
   32024:	801a      	strh	r2, [r3, #0]
				addr_in.sin_port = _htons(module->config.port);
   32026:	68fb      	ldr	r3, [r7, #12]
   32028:	2250      	movs	r2, #80	; 0x50
   3202a:	5a9b      	ldrh	r3, [r3, r2]
   3202c:	021b      	lsls	r3, r3, #8
   3202e:	b21a      	sxth	r2, r3
   32030:	68fb      	ldr	r3, [r7, #12]
   32032:	2150      	movs	r1, #80	; 0x50
   32034:	5a5b      	ldrh	r3, [r3, r1]
   32036:	0a1b      	lsrs	r3, r3, #8
   32038:	b29b      	uxth	r3, r3
   3203a:	b21b      	sxth	r3, r3
   3203c:	4313      	orrs	r3, r2
   3203e:	b21b      	sxth	r3, r3
   32040:	b29a      	uxth	r2, r3
   32042:	2314      	movs	r3, #20
   32044:	18fb      	adds	r3, r7, r3
   32046:	805a      	strh	r2, [r3, #2]
				addr_in.sin_addr.s_addr = nmi_inet_addr((char *)module->host);
   32048:	68fb      	ldr	r3, [r7, #12]
   3204a:	3301      	adds	r3, #1
   3204c:	0018      	movs	r0, r3
   3204e:	4b20      	ldr	r3, [pc, #128]	; (320d0 <http_client_send_request+0x300>)
   32050:	4798      	blx	r3
   32052:	0002      	movs	r2, r0
   32054:	2314      	movs	r3, #20
   32056:	18fb      	adds	r3, r7, r3
   32058:	605a      	str	r2, [r3, #4]
				connect(module->sock, (struct sockaddr *)&addr_in, sizeof(struct sockaddr_in));
   3205a:	68fb      	ldr	r3, [r7, #12]
   3205c:	781b      	ldrb	r3, [r3, #0]
   3205e:	b25b      	sxtb	r3, r3
   32060:	2214      	movs	r2, #20
   32062:	18b9      	adds	r1, r7, r2
   32064:	2210      	movs	r2, #16
   32066:	0018      	movs	r0, r3
   32068:	4b1a      	ldr	r3, [pc, #104]	; (320d4 <http_client_send_request+0x304>)
   3206a:	4798      	blx	r3
   3206c:	e004      	b.n	32078 <http_client_send_request+0x2a8>
			} else {
				gethostbyname((uint8*)module->host);
   3206e:	68fb      	ldr	r3, [r7, #12]
   32070:	3301      	adds	r3, #1
   32072:	0018      	movs	r0, r3
   32074:	4b18      	ldr	r3, [pc, #96]	; (320d8 <http_client_send_request+0x308>)
   32076:	4798      	blx	r3
			}
			module->req.state = STATE_TRY_SOCK_CONNECT;
   32078:	68fb      	ldr	r3, [r7, #12]
   3207a:	2201      	movs	r2, #1
   3207c:	66da      	str	r2, [r3, #108]	; 0x6c
		} else {
			return -ENOSPC;
		}
		break;
   3207e:	e006      	b.n	3208e <http_client_send_request+0x2be>
			return -ENOSPC;
   32080:	231c      	movs	r3, #28
   32082:	425b      	negs	r3, r3
   32084:	e004      	b.n	32090 <http_client_send_request+0x2c0>
	default:
		/* STATE_TRY_REQ */
		/* STATE_WAIT_RESP */
		/* STATE_RECV_RESP */
		/* Session was busy. Try again later. */
		return -EAGAIN;
   32086:	230b      	movs	r3, #11
   32088:	425b      	negs	r3, r3
   3208a:	e001      	b.n	32090 <http_client_send_request+0x2c0>
			break; /* Currently try to connect to the same server. */
   3208c:	46c0      	nop			; (mov r8, r8)
	}

	return 0;
   3208e:	2300      	movs	r3, #0
}
   32090:	0018      	movs	r0, r3
   32092:	46bd      	mov	sp, r7
   32094:	b00e      	add	sp, #56	; 0x38
   32096:	bdb0      	pop	{r4, r5, r7, pc}
   32098:	0003ad6c 	.word	0x0003ad6c
   3209c:	00035bf5 	.word	0x00035bf5
   320a0:	0003ad74 	.word	0x0003ad74
   320a4:	00035be7 	.word	0x00035be7
   320a8:	000357e5 	.word	0x000357e5
   320ac:	00035bad 	.word	0x00035bad
   320b0:	00035b9b 	.word	0x00035b9b
   320b4:	000357f9 	.word	0x000357f9
   320b8:	0003582f 	.word	0x0003582f
   320bc:	00032231 	.word	0x00032231
   320c0:	000320dd 	.word	0x000320dd
   320c4:	000263ed 	.word	0x000263ed
   320c8:	200046f4 	.word	0x200046f4
   320cc:	00031d39 	.word	0x00031d39
   320d0:	00026b39 	.word	0x00026b39
   320d4:	00026601 	.word	0x00026601
   320d8:	00026c41 	.word	0x00026c41

000320dc <_http_client_clear_conn>:

	return 0;
}

void _http_client_clear_conn(struct http_client_module *const module, int reason)
{
   320dc:	b580      	push	{r7, lr}
   320de:	b086      	sub	sp, #24
   320e0:	af00      	add	r7, sp, #0
   320e2:	6078      	str	r0, [r7, #4]
   320e4:	6039      	str	r1, [r7, #0]
	union http_client_data data;

	if (module->req.entity.close) {
   320e6:	687b      	ldr	r3, [r7, #4]
   320e8:	22c0      	movs	r2, #192	; 0xc0
   320ea:	589b      	ldr	r3, [r3, r2]
   320ec:	2b00      	cmp	r3, #0
   320ee:	d007      	beq.n	32100 <_http_client_clear_conn+0x24>
		module->req.entity.close(module->req.entity.priv_data);
   320f0:	687b      	ldr	r3, [r7, #4]
   320f2:	22c0      	movs	r2, #192	; 0xc0
   320f4:	589b      	ldr	r3, [r3, r2]
   320f6:	687a      	ldr	r2, [r7, #4]
   320f8:	21c4      	movs	r1, #196	; 0xc4
   320fa:	5852      	ldr	r2, [r2, r1]
   320fc:	0010      	movs	r0, r2
   320fe:	4798      	blx	r3
	}

	memset(&module->req.entity, 0, sizeof(struct http_entity));
   32100:	687b      	ldr	r3, [r7, #4]
   32102:	33b0      	adds	r3, #176	; 0xb0
   32104:	2218      	movs	r2, #24
   32106:	2100      	movs	r1, #0
   32108:	0018      	movs	r0, r3
   3210a:	4b24      	ldr	r3, [pc, #144]	; (3219c <_http_client_clear_conn+0xc0>)
   3210c:	4798      	blx	r3

	if (module->req.state >= STATE_TRY_SOCK_CONNECT) {
   3210e:	687b      	ldr	r3, [r7, #4]
   32110:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   32112:	2b00      	cmp	r3, #0
   32114:	d005      	beq.n	32122 <_http_client_clear_conn+0x46>
		close(module->sock);
   32116:	687b      	ldr	r3, [r7, #4]
   32118:	781b      	ldrb	r3, [r3, #0]
   3211a:	b25b      	sxtb	r3, r3
   3211c:	0018      	movs	r0, r3
   3211e:	4b20      	ldr	r3, [pc, #128]	; (321a0 <_http_client_clear_conn+0xc4>)
   32120:	4798      	blx	r3
	}

	module_ref_inst[module->sock] = NULL;
   32122:	687b      	ldr	r3, [r7, #4]
   32124:	781b      	ldrb	r3, [r3, #0]
   32126:	b25b      	sxtb	r3, r3
   32128:	001a      	movs	r2, r3
   3212a:	4b1e      	ldr	r3, [pc, #120]	; (321a4 <_http_client_clear_conn+0xc8>)
   3212c:	0092      	lsls	r2, r2, #2
   3212e:	2100      	movs	r1, #0
   32130:	50d1      	str	r1, [r2, r3]
	memset(&module->req, 0, sizeof(struct http_client_req));
   32132:	687b      	ldr	r3, [r7, #4]
   32134:	336c      	adds	r3, #108	; 0x6c
   32136:	226c      	movs	r2, #108	; 0x6c
   32138:	2100      	movs	r1, #0
   3213a:	0018      	movs	r0, r3
   3213c:	4b17      	ldr	r3, [pc, #92]	; (3219c <_http_client_clear_conn+0xc0>)
   3213e:	4798      	blx	r3
	memset(&module->resp, 0, sizeof(struct http_client_resp));
   32140:	687b      	ldr	r3, [r7, #4]
   32142:	33d8      	adds	r3, #216	; 0xd8
   32144:	2210      	movs	r2, #16
   32146:	2100      	movs	r1, #0
   32148:	0018      	movs	r0, r3
   3214a:	4b14      	ldr	r3, [pc, #80]	; (3219c <_http_client_clear_conn+0xc0>)
   3214c:	4798      	blx	r3
	module->req.state = STATE_INIT;
   3214e:	687b      	ldr	r3, [r7, #4]
   32150:	2200      	movs	r2, #0
   32152:	66da      	str	r2, [r3, #108]	; 0x6c
	module->resp.state = STATE_PARSE_HEADER;
   32154:	687b      	ldr	r3, [r7, #4]
   32156:	22d8      	movs	r2, #216	; 0xd8
   32158:	2100      	movs	r1, #0
   3215a:	5099      	str	r1, [r3, r2]

	module->sending = 0;
   3215c:	687b      	ldr	r3, [r7, #4]
   3215e:	2241      	movs	r2, #65	; 0x41
   32160:	5c99      	ldrb	r1, [r3, r2]
   32162:	2001      	movs	r0, #1
   32164:	4381      	bics	r1, r0
   32166:	5499      	strb	r1, [r3, r2]
	module->permanent = 0;
   32168:	687b      	ldr	r3, [r7, #4]
   3216a:	2241      	movs	r2, #65	; 0x41
   3216c:	5c99      	ldrb	r1, [r3, r2]
   3216e:	2002      	movs	r0, #2
   32170:	4381      	bics	r1, r0
   32172:	5499      	strb	r1, [r3, r2]
	data.disconnected.reason = reason;
   32174:	230c      	movs	r3, #12
   32176:	18fb      	adds	r3, r7, r3
   32178:	683a      	ldr	r2, [r7, #0]
   3217a:	601a      	str	r2, [r3, #0]
	if (module->cb) {
   3217c:	687b      	ldr	r3, [r7, #4]
   3217e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32180:	2b00      	cmp	r3, #0
   32182:	d006      	beq.n	32192 <_http_client_clear_conn+0xb6>
		module->cb(module, HTTP_CLIENT_CALLBACK_DISCONNECTED, &data);
   32184:	687b      	ldr	r3, [r7, #4]
   32186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32188:	220c      	movs	r2, #12
   3218a:	18ba      	adds	r2, r7, r2
   3218c:	6878      	ldr	r0, [r7, #4]
   3218e:	2104      	movs	r1, #4
   32190:	4798      	blx	r3
	}
}
   32192:	46c0      	nop			; (mov r8, r8)
   32194:	46bd      	mov	sp, r7
   32196:	b006      	add	sp, #24
   32198:	bd80      	pop	{r7, pc}
   3219a:	46c0      	nop			; (mov r8, r8)
   3219c:	0003582f 	.word	0x0003582f
   321a0:	000269f9 	.word	0x000269f9
   321a4:	200046f4 	.word	0x200046f4

000321a8 <_http_client_send_wait>:

int _http_client_send_wait(void *_module, char *buffer, size_t buffer_len)
{
   321a8:	b590      	push	{r4, r7, lr}
   321aa:	b087      	sub	sp, #28
   321ac:	af00      	add	r7, sp, #0
   321ae:	60f8      	str	r0, [r7, #12]
   321b0:	60b9      	str	r1, [r7, #8]
   321b2:	607a      	str	r2, [r7, #4]
	int result;
	struct http_client_module *const module = (struct http_client_module *const)_module;
   321b4:	68fb      	ldr	r3, [r7, #12]
   321b6:	617b      	str	r3, [r7, #20]
	
	module->sending = 1;
   321b8:	697b      	ldr	r3, [r7, #20]
   321ba:	2241      	movs	r2, #65	; 0x41
   321bc:	5c99      	ldrb	r1, [r3, r2]
   321be:	2001      	movs	r0, #1
   321c0:	4301      	orrs	r1, r0
   321c2:	5499      	strb	r1, [r3, r2]

	if ((result = send(module->sock, (void*)buffer, buffer_len, 0)) < 0) {
   321c4:	697b      	ldr	r3, [r7, #20]
   321c6:	2000      	movs	r0, #0
   321c8:	5618      	ldrsb	r0, [r3, r0]
   321ca:	687b      	ldr	r3, [r7, #4]
   321cc:	b29a      	uxth	r2, r3
   321ce:	68b9      	ldr	r1, [r7, #8]
   321d0:	2300      	movs	r3, #0
   321d2:	4c14      	ldr	r4, [pc, #80]	; (32224 <_http_client_send_wait+0x7c>)
   321d4:	47a0      	blx	r4
   321d6:	0003      	movs	r3, r0
   321d8:	613b      	str	r3, [r7, #16]
   321da:	693b      	ldr	r3, [r7, #16]
   321dc:	2b00      	cmp	r3, #0
   321de:	da0f      	bge.n	32200 <_http_client_send_wait+0x58>
		module->sending = 0;
   321e0:	697b      	ldr	r3, [r7, #20]
   321e2:	2241      	movs	r2, #65	; 0x41
   321e4:	5c99      	ldrb	r1, [r3, r2]
   321e6:	2001      	movs	r0, #1
   321e8:	4381      	bics	r1, r0
   321ea:	5499      	strb	r1, [r3, r2]
		return result;
   321ec:	693b      	ldr	r3, [r7, #16]
   321ee:	e014      	b.n	3221a <_http_client_send_wait+0x72>
	}
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
		m2m_wifi_handle_events(NULL);
   321f0:	2000      	movs	r0, #0
   321f2:	4b0d      	ldr	r3, [pc, #52]	; (32228 <_http_client_send_wait+0x80>)
   321f4:	4798      	blx	r3
		sw_timer_task(module->config.timer_inst);
   321f6:	697b      	ldr	r3, [r7, #20]
   321f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   321fa:	0018      	movs	r0, r3
   321fc:	4b0b      	ldr	r3, [pc, #44]	; (3222c <_http_client_send_wait+0x84>)
   321fe:	4798      	blx	r3
	while (module->sending == 1 && module->req.state > STATE_SOCK_CONNECTED){
   32200:	697b      	ldr	r3, [r7, #20]
   32202:	2241      	movs	r2, #65	; 0x41
   32204:	5c9b      	ldrb	r3, [r3, r2]
   32206:	2201      	movs	r2, #1
   32208:	4013      	ands	r3, r2
   3220a:	b2db      	uxtb	r3, r3
   3220c:	2b00      	cmp	r3, #0
   3220e:	d003      	beq.n	32218 <_http_client_send_wait+0x70>
   32210:	697b      	ldr	r3, [r7, #20]
   32212:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   32214:	2b02      	cmp	r3, #2
   32216:	d8eb      	bhi.n	321f0 <_http_client_send_wait+0x48>
	}

	return 0;
   32218:	2300      	movs	r3, #0
}
   3221a:	0018      	movs	r0, r3
   3221c:	46bd      	mov	sp, r7
   3221e:	b007      	add	sp, #28
   32220:	bd90      	pop	{r4, r7, pc}
   32222:	46c0      	nop			; (mov r8, r8)
   32224:	00026715 	.word	0x00026715
   32228:	00022dc1 	.word	0x00022dc1
   3222c:	000334b5 	.word	0x000334b5

00032230 <_http_client_request>:

void _http_client_request(struct http_client_module *const module)
{
   32230:	b5f0      	push	{r4, r5, r6, r7, lr}
   32232:	46c6      	mov	lr, r8
   32234:	b500      	push	{lr}
   32236:	b0a0      	sub	sp, #128	; 0x80
   32238:	af02      	add	r7, sp, #8
   3223a:	61f8      	str	r0, [r7, #28]
   3223c:	4668      	mov	r0, sp
   3223e:	61b8      	str	r0, [r7, #24]
	struct stream_writer writer;
	int size;
	int result;
	char length[11];
	char *ptr;
	const char CH_LUT[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
   32240:	2318      	movs	r3, #24
   32242:	2218      	movs	r2, #24
   32244:	18ba      	adds	r2, r7, r2
   32246:	18d0      	adds	r0, r2, r3
   32248:	4bbd      	ldr	r3, [pc, #756]	; (32540 <_http_client_request+0x310>)
   3224a:	469c      	mov	ip, r3
   3224c:	4663      	mov	r3, ip
   3224e:	cb16      	ldmia	r3!, {r1, r2, r4}
   32250:	c016      	stmia	r0!, {r1, r2, r4}
   32252:	469c      	mov	ip, r3
   32254:	4663      	mov	r3, ip
   32256:	681b      	ldr	r3, [r3, #0]
   32258:	469c      	mov	ip, r3
   3225a:	4663      	mov	r3, ip
   3225c:	6003      	str	r3, [r0, #0]
	struct http_entity * entity;
	union http_client_data data;
#define HTTP_CHUNKED_MAX_LENGTH 3 /*TCP MTU is 1400(0x578) */
	char buffer[module->config.send_buffer_size];
   3225e:	69f8      	ldr	r0, [r7, #28]
   32260:	6e40      	ldr	r0, [r0, #100]	; 0x64
   32262:	4684      	mov	ip, r0
   32264:	2301      	movs	r3, #1
   32266:	425b      	negs	r3, r3
   32268:	4698      	mov	r8, r3
   3226a:	44c4      	add	ip, r8
   3226c:	4663      	mov	r3, ip
   3226e:	66fb      	str	r3, [r7, #108]	; 0x6c
   32270:	6038      	str	r0, [r7, #0]
   32272:	2300      	movs	r3, #0
   32274:	607b      	str	r3, [r7, #4]
   32276:	6839      	ldr	r1, [r7, #0]
   32278:	687a      	ldr	r2, [r7, #4]
   3227a:	000b      	movs	r3, r1
   3227c:	0f5b      	lsrs	r3, r3, #29
   3227e:	469c      	mov	ip, r3
   32280:	0013      	movs	r3, r2
   32282:	00db      	lsls	r3, r3, #3
   32284:	617b      	str	r3, [r7, #20]
   32286:	4663      	mov	r3, ip
   32288:	697c      	ldr	r4, [r7, #20]
   3228a:	431c      	orrs	r4, r3
   3228c:	617c      	str	r4, [r7, #20]
   3228e:	000b      	movs	r3, r1
   32290:	00db      	lsls	r3, r3, #3
   32292:	613b      	str	r3, [r7, #16]
   32294:	0005      	movs	r5, r0
   32296:	2200      	movs	r2, #0
   32298:	0016      	movs	r6, r2
   3229a:	0f6a      	lsrs	r2, r5, #29
   3229c:	00f3      	lsls	r3, r6, #3
   3229e:	60fb      	str	r3, [r7, #12]
   322a0:	68fb      	ldr	r3, [r7, #12]
   322a2:	4313      	orrs	r3, r2
   322a4:	60fb      	str	r3, [r7, #12]
   322a6:	00eb      	lsls	r3, r5, #3
   322a8:	60bb      	str	r3, [r7, #8]
   322aa:	1dc3      	adds	r3, r0, #7
   322ac:	08db      	lsrs	r3, r3, #3
   322ae:	00db      	lsls	r3, r3, #3
   322b0:	466a      	mov	r2, sp
   322b2:	1ad3      	subs	r3, r2, r3
   322b4:	469d      	mov	sp, r3
   322b6:	ab02      	add	r3, sp, #8
   322b8:	3300      	adds	r3, #0
   322ba:	66bb      	str	r3, [r7, #104]	; 0x68

	if (module == NULL) {
   322bc:	69fb      	ldr	r3, [r7, #28]
   322be:	2b00      	cmp	r3, #0
   322c0:	d100      	bne.n	322c4 <_http_client_request+0x94>
   322c2:	e346      	b.n	32952 <_http_client_request+0x722>
		return;
	}

	if (module->sending != 0) {
   322c4:	69fb      	ldr	r3, [r7, #28]
   322c6:	2241      	movs	r2, #65	; 0x41
   322c8:	5c9b      	ldrb	r3, [r3, r2]
   322ca:	2201      	movs	r2, #1
   322cc:	4013      	ands	r3, r2
   322ce:	b2db      	uxtb	r3, r3
   322d0:	2b00      	cmp	r3, #0
   322d2:	d000      	beq.n	322d6 <_http_client_request+0xa6>
   322d4:	e33f      	b.n	32956 <_http_client_request+0x726>
		/* Device is busy. */
		return;
	}

	entity = &module->req.entity;
   322d6:	69fb      	ldr	r3, [r7, #28]
   322d8:	33b0      	adds	r3, #176	; 0xb0
   322da:	667b      	str	r3, [r7, #100]	; 0x64

	switch (module->req.state) {
   322dc:	69fb      	ldr	r3, [r7, #28]
   322de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   322e0:	2b03      	cmp	r3, #3
   322e2:	d003      	beq.n	322ec <_http_client_request+0xbc>
   322e4:	2b04      	cmp	r3, #4
   322e6:	d100      	bne.n	322ea <_http_client_request+0xba>
   322e8:	e1b3      	b.n	32652 <_http_client_request+0x422>
		}

		break;
	default:
		/* Invalid status. */
		break;
   322ea:	e32f      	b.n	3294c <_http_client_request+0x71c>
		module->req.content_length = 0;
   322ec:	69fb      	ldr	r3, [r7, #28]
   322ee:	22cc      	movs	r2, #204	; 0xcc
   322f0:	2100      	movs	r1, #0
   322f2:	5099      	str	r1, [r3, r2]
		module->req.sent_length = 0;
   322f4:	69fb      	ldr	r3, [r7, #28]
   322f6:	22d0      	movs	r2, #208	; 0xd0
   322f8:	2100      	movs	r1, #0
   322fa:	5099      	str	r1, [r3, r2]
		stream_writer_init(&writer, buffer, module->config.send_buffer_size, _http_client_send_wait, (void *)module);
   322fc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   322fe:	69fb      	ldr	r3, [r7, #28]
   32300:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   32302:	4c90      	ldr	r4, [pc, #576]	; (32544 <_http_client_request+0x314>)
   32304:	2334      	movs	r3, #52	; 0x34
   32306:	2018      	movs	r0, #24
   32308:	1838      	adds	r0, r7, r0
   3230a:	18c0      	adds	r0, r0, r3
   3230c:	69fb      	ldr	r3, [r7, #28]
   3230e:	9300      	str	r3, [sp, #0]
   32310:	0023      	movs	r3, r4
   32312:	4c8d      	ldr	r4, [pc, #564]	; (32548 <_http_client_request+0x318>)
   32314:	47a0      	blx	r4
		if (module->req.method == HTTP_METHOD_GET) {
   32316:	69fb      	ldr	r3, [r7, #28]
   32318:	22c8      	movs	r2, #200	; 0xc8
   3231a:	5c9b      	ldrb	r3, [r3, r2]
   3231c:	2b01      	cmp	r3, #1
   3231e:	d10a      	bne.n	32336 <_http_client_request+0x106>
			stream_writer_send_buffer(&writer, "GET ", 4);
   32320:	498a      	ldr	r1, [pc, #552]	; (3254c <_http_client_request+0x31c>)
   32322:	2334      	movs	r3, #52	; 0x34
   32324:	2218      	movs	r2, #24
   32326:	4694      	mov	ip, r2
   32328:	44bc      	add	ip, r7
   3232a:	4463      	add	r3, ip
   3232c:	2204      	movs	r2, #4
   3232e:	0018      	movs	r0, r3
   32330:	4b87      	ldr	r3, [pc, #540]	; (32550 <_http_client_request+0x320>)
   32332:	4798      	blx	r3
   32334:	e04e      	b.n	323d4 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_POST) {
   32336:	69fb      	ldr	r3, [r7, #28]
   32338:	22c8      	movs	r2, #200	; 0xc8
   3233a:	5c9b      	ldrb	r3, [r3, r2]
   3233c:	2b02      	cmp	r3, #2
   3233e:	d10a      	bne.n	32356 <_http_client_request+0x126>
			stream_writer_send_buffer(&writer, "POST ", 5);
   32340:	4984      	ldr	r1, [pc, #528]	; (32554 <_http_client_request+0x324>)
   32342:	2334      	movs	r3, #52	; 0x34
   32344:	2218      	movs	r2, #24
   32346:	4694      	mov	ip, r2
   32348:	44bc      	add	ip, r7
   3234a:	4463      	add	r3, ip
   3234c:	2205      	movs	r2, #5
   3234e:	0018      	movs	r0, r3
   32350:	4b7f      	ldr	r3, [pc, #508]	; (32550 <_http_client_request+0x320>)
   32352:	4798      	blx	r3
   32354:	e03e      	b.n	323d4 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_DELETE) {
   32356:	69fb      	ldr	r3, [r7, #28]
   32358:	22c8      	movs	r2, #200	; 0xc8
   3235a:	5c9b      	ldrb	r3, [r3, r2]
   3235c:	2b03      	cmp	r3, #3
   3235e:	d10a      	bne.n	32376 <_http_client_request+0x146>
			stream_writer_send_buffer(&writer, "DELETE ", 7);
   32360:	497d      	ldr	r1, [pc, #500]	; (32558 <_http_client_request+0x328>)
   32362:	2334      	movs	r3, #52	; 0x34
   32364:	2218      	movs	r2, #24
   32366:	4694      	mov	ip, r2
   32368:	44bc      	add	ip, r7
   3236a:	4463      	add	r3, ip
   3236c:	2207      	movs	r2, #7
   3236e:	0018      	movs	r0, r3
   32370:	4b77      	ldr	r3, [pc, #476]	; (32550 <_http_client_request+0x320>)
   32372:	4798      	blx	r3
   32374:	e02e      	b.n	323d4 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_PUT) {
   32376:	69fb      	ldr	r3, [r7, #28]
   32378:	22c8      	movs	r2, #200	; 0xc8
   3237a:	5c9b      	ldrb	r3, [r3, r2]
   3237c:	2b04      	cmp	r3, #4
   3237e:	d10a      	bne.n	32396 <_http_client_request+0x166>
			stream_writer_send_buffer(&writer, "PUT ", 4);
   32380:	4976      	ldr	r1, [pc, #472]	; (3255c <_http_client_request+0x32c>)
   32382:	2334      	movs	r3, #52	; 0x34
   32384:	2218      	movs	r2, #24
   32386:	4694      	mov	ip, r2
   32388:	44bc      	add	ip, r7
   3238a:	4463      	add	r3, ip
   3238c:	2204      	movs	r2, #4
   3238e:	0018      	movs	r0, r3
   32390:	4b6f      	ldr	r3, [pc, #444]	; (32550 <_http_client_request+0x320>)
   32392:	4798      	blx	r3
   32394:	e01e      	b.n	323d4 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_OPTIONS) {
   32396:	69fb      	ldr	r3, [r7, #28]
   32398:	22c8      	movs	r2, #200	; 0xc8
   3239a:	5c9b      	ldrb	r3, [r3, r2]
   3239c:	2b05      	cmp	r3, #5
   3239e:	d10a      	bne.n	323b6 <_http_client_request+0x186>
			stream_writer_send_buffer(&writer, "OPTIONS ", 8);
   323a0:	496f      	ldr	r1, [pc, #444]	; (32560 <_http_client_request+0x330>)
   323a2:	2334      	movs	r3, #52	; 0x34
   323a4:	2218      	movs	r2, #24
   323a6:	4694      	mov	ip, r2
   323a8:	44bc      	add	ip, r7
   323aa:	4463      	add	r3, ip
   323ac:	2208      	movs	r2, #8
   323ae:	0018      	movs	r0, r3
   323b0:	4b67      	ldr	r3, [pc, #412]	; (32550 <_http_client_request+0x320>)
   323b2:	4798      	blx	r3
   323b4:	e00e      	b.n	323d4 <_http_client_request+0x1a4>
		} else if (module->req.method == HTTP_METHOD_HEAD) {
   323b6:	69fb      	ldr	r3, [r7, #28]
   323b8:	22c8      	movs	r2, #200	; 0xc8
   323ba:	5c9b      	ldrb	r3, [r3, r2]
   323bc:	2b06      	cmp	r3, #6
   323be:	d109      	bne.n	323d4 <_http_client_request+0x1a4>
			stream_writer_send_buffer(&writer, "HEAD ", 5);
   323c0:	4968      	ldr	r1, [pc, #416]	; (32564 <_http_client_request+0x334>)
   323c2:	2334      	movs	r3, #52	; 0x34
   323c4:	2218      	movs	r2, #24
   323c6:	4694      	mov	ip, r2
   323c8:	44bc      	add	ip, r7
   323ca:	4463      	add	r3, ip
   323cc:	2205      	movs	r2, #5
   323ce:	0018      	movs	r0, r3
   323d0:	4b5f      	ldr	r3, [pc, #380]	; (32550 <_http_client_request+0x320>)
   323d2:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->req.uri, strlen(module->req.uri));
   323d4:	69fb      	ldr	r3, [r7, #28]
   323d6:	3370      	adds	r3, #112	; 0x70
   323d8:	001c      	movs	r4, r3
   323da:	69fb      	ldr	r3, [r7, #28]
   323dc:	3370      	adds	r3, #112	; 0x70
   323de:	0018      	movs	r0, r3
   323e0:	4b61      	ldr	r3, [pc, #388]	; (32568 <_http_client_request+0x338>)
   323e2:	4798      	blx	r3
   323e4:	0002      	movs	r2, r0
   323e6:	2334      	movs	r3, #52	; 0x34
   323e8:	2118      	movs	r1, #24
   323ea:	468c      	mov	ip, r1
   323ec:	44bc      	add	ip, r7
   323ee:	4463      	add	r3, ip
   323f0:	0021      	movs	r1, r4
   323f2:	0018      	movs	r0, r3
   323f4:	4b56      	ldr	r3, [pc, #344]	; (32550 <_http_client_request+0x320>)
   323f6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, " "HTTP_PROTO_NAME"\r\n", strlen(" "HTTP_PROTO_NAME"\r\n"));
   323f8:	495c      	ldr	r1, [pc, #368]	; (3256c <_http_client_request+0x33c>)
   323fa:	2334      	movs	r3, #52	; 0x34
   323fc:	2218      	movs	r2, #24
   323fe:	4694      	mov	ip, r2
   32400:	44bc      	add	ip, r7
   32402:	4463      	add	r3, ip
   32404:	220b      	movs	r2, #11
   32406:	0018      	movs	r0, r3
   32408:	4b51      	ldr	r3, [pc, #324]	; (32550 <_http_client_request+0x320>)
   3240a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "User-Agent: ", strlen("User-agent: "));
   3240c:	4958      	ldr	r1, [pc, #352]	; (32570 <_http_client_request+0x340>)
   3240e:	2334      	movs	r3, #52	; 0x34
   32410:	2218      	movs	r2, #24
   32412:	4694      	mov	ip, r2
   32414:	44bc      	add	ip, r7
   32416:	4463      	add	r3, ip
   32418:	220c      	movs	r2, #12
   3241a:	0018      	movs	r0, r3
   3241c:	4b4c      	ldr	r3, [pc, #304]	; (32550 <_http_client_request+0x320>)
   3241e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, (char *)module->config.user_agent, strlen(module->config.user_agent));
   32420:	69fb      	ldr	r3, [r7, #28]
   32422:	6e9c      	ldr	r4, [r3, #104]	; 0x68
   32424:	69fb      	ldr	r3, [r7, #28]
   32426:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   32428:	0018      	movs	r0, r3
   3242a:	4b4f      	ldr	r3, [pc, #316]	; (32568 <_http_client_request+0x338>)
   3242c:	4798      	blx	r3
   3242e:	0002      	movs	r2, r0
   32430:	2334      	movs	r3, #52	; 0x34
   32432:	2118      	movs	r1, #24
   32434:	468c      	mov	ip, r1
   32436:	44bc      	add	ip, r7
   32438:	4463      	add	r3, ip
   3243a:	0021      	movs	r1, r4
   3243c:	0018      	movs	r0, r3
   3243e:	4b44      	ldr	r3, [pc, #272]	; (32550 <_http_client_request+0x320>)
   32440:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   32442:	494c      	ldr	r1, [pc, #304]	; (32574 <_http_client_request+0x344>)
   32444:	2334      	movs	r3, #52	; 0x34
   32446:	2218      	movs	r2, #24
   32448:	4694      	mov	ip, r2
   3244a:	44bc      	add	ip, r7
   3244c:	4463      	add	r3, ip
   3244e:	2202      	movs	r2, #2
   32450:	0018      	movs	r0, r3
   32452:	4b3f      	ldr	r3, [pc, #252]	; (32550 <_http_client_request+0x320>)
   32454:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Host: ", strlen("Host: "));
   32456:	4948      	ldr	r1, [pc, #288]	; (32578 <_http_client_request+0x348>)
   32458:	2334      	movs	r3, #52	; 0x34
   3245a:	2218      	movs	r2, #24
   3245c:	4694      	mov	ip, r2
   3245e:	44bc      	add	ip, r7
   32460:	4463      	add	r3, ip
   32462:	2206      	movs	r2, #6
   32464:	0018      	movs	r0, r3
   32466:	4b3a      	ldr	r3, [pc, #232]	; (32550 <_http_client_request+0x320>)
   32468:	4798      	blx	r3
		stream_writer_send_buffer(&writer, module->host, strlen(module->host));
   3246a:	69fb      	ldr	r3, [r7, #28]
   3246c:	1c5c      	adds	r4, r3, #1
   3246e:	69fb      	ldr	r3, [r7, #28]
   32470:	3301      	adds	r3, #1
   32472:	0018      	movs	r0, r3
   32474:	4b3c      	ldr	r3, [pc, #240]	; (32568 <_http_client_request+0x338>)
   32476:	4798      	blx	r3
   32478:	0002      	movs	r2, r0
   3247a:	2334      	movs	r3, #52	; 0x34
   3247c:	2118      	movs	r1, #24
   3247e:	468c      	mov	ip, r1
   32480:	44bc      	add	ip, r7
   32482:	4463      	add	r3, ip
   32484:	0021      	movs	r1, r4
   32486:	0018      	movs	r0, r3
   32488:	4b31      	ldr	r3, [pc, #196]	; (32550 <_http_client_request+0x320>)
   3248a:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   3248c:	4939      	ldr	r1, [pc, #228]	; (32574 <_http_client_request+0x344>)
   3248e:	2334      	movs	r3, #52	; 0x34
   32490:	2218      	movs	r2, #24
   32492:	4694      	mov	ip, r2
   32494:	44bc      	add	ip, r7
   32496:	4463      	add	r3, ip
   32498:	2202      	movs	r2, #2
   3249a:	0018      	movs	r0, r3
   3249c:	4b2c      	ldr	r3, [pc, #176]	; (32550 <_http_client_request+0x320>)
   3249e:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Connection: Keep-Alive\r\n", strlen("Connection: Keep-Alive\r\n"));
   324a0:	4936      	ldr	r1, [pc, #216]	; (3257c <_http_client_request+0x34c>)
   324a2:	2334      	movs	r3, #52	; 0x34
   324a4:	2218      	movs	r2, #24
   324a6:	4694      	mov	ip, r2
   324a8:	44bc      	add	ip, r7
   324aa:	4463      	add	r3, ip
   324ac:	2218      	movs	r2, #24
   324ae:	0018      	movs	r0, r3
   324b0:	4b27      	ldr	r3, [pc, #156]	; (32550 <_http_client_request+0x320>)
   324b2:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Encoding: \r\n", strlen("Accept-Encoding: \r\n"));
   324b4:	4932      	ldr	r1, [pc, #200]	; (32580 <_http_client_request+0x350>)
   324b6:	2334      	movs	r3, #52	; 0x34
   324b8:	2218      	movs	r2, #24
   324ba:	4694      	mov	ip, r2
   324bc:	44bc      	add	ip, r7
   324be:	4463      	add	r3, ip
   324c0:	2213      	movs	r2, #19
   324c2:	0018      	movs	r0, r3
   324c4:	4b22      	ldr	r3, [pc, #136]	; (32550 <_http_client_request+0x320>)
   324c6:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "Accept-Charset: utf-8\r\n", strlen("Accept-Charset: utf-8\r\n"));
   324c8:	492e      	ldr	r1, [pc, #184]	; (32584 <_http_client_request+0x354>)
   324ca:	2334      	movs	r3, #52	; 0x34
   324cc:	2218      	movs	r2, #24
   324ce:	4694      	mov	ip, r2
   324d0:	44bc      	add	ip, r7
   324d2:	4463      	add	r3, ip
   324d4:	2217      	movs	r2, #23
   324d6:	0018      	movs	r0, r3
   324d8:	4b1d      	ldr	r3, [pc, #116]	; (32550 <_http_client_request+0x320>)
   324da:	4798      	blx	r3
		if (entity->read != NULL) {
   324dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   324de:	68db      	ldr	r3, [r3, #12]
   324e0:	2b00      	cmp	r3, #0
   324e2:	d100      	bne.n	324e6 <_http_client_request+0x2b6>
   324e4:	e088      	b.n	325f8 <_http_client_request+0x3c8>
			if (entity->is_chunked) {
   324e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   324e8:	781b      	ldrb	r3, [r3, #0]
   324ea:	2b00      	cmp	r3, #0
   324ec:	d00f      	beq.n	3250e <_http_client_request+0x2de>
				module->req.content_length = -1;
   324ee:	69fb      	ldr	r3, [r7, #28]
   324f0:	21cc      	movs	r1, #204	; 0xcc
   324f2:	2201      	movs	r2, #1
   324f4:	4252      	negs	r2, r2
   324f6:	505a      	str	r2, [r3, r1]
				stream_writer_send_buffer(&writer, "Transfer-Encoding: chunked\r\n", strlen("Transfer-Encoding: chunked\r\n"));
   324f8:	4923      	ldr	r1, [pc, #140]	; (32588 <_http_client_request+0x358>)
   324fa:	2334      	movs	r3, #52	; 0x34
   324fc:	2218      	movs	r2, #24
   324fe:	4694      	mov	ip, r2
   32500:	44bc      	add	ip, r7
   32502:	4463      	add	r3, ip
   32504:	221c      	movs	r2, #28
   32506:	0018      	movs	r0, r3
   32508:	4b11      	ldr	r3, [pc, #68]	; (32550 <_http_client_request+0x320>)
   3250a:	4798      	blx	r3
   3250c:	e074      	b.n	325f8 <_http_client_request+0x3c8>
			} else if(entity->get_contents_length) {
   3250e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   32510:	689b      	ldr	r3, [r3, #8]
   32512:	2b00      	cmp	r3, #0
   32514:	d070      	beq.n	325f8 <_http_client_request+0x3c8>
				module->req.content_length = entity->get_contents_length(entity->priv_data);
   32516:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   32518:	689a      	ldr	r2, [r3, #8]
   3251a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3251c:	695b      	ldr	r3, [r3, #20]
   3251e:	0018      	movs	r0, r3
   32520:	4790      	blx	r2
   32522:	0001      	movs	r1, r0
   32524:	69fb      	ldr	r3, [r7, #28]
   32526:	22cc      	movs	r2, #204	; 0xcc
   32528:	5099      	str	r1, [r3, r2]
				if (module->req.content_length < 0) {
   3252a:	69fb      	ldr	r3, [r7, #28]
   3252c:	22cc      	movs	r2, #204	; 0xcc
   3252e:	589b      	ldr	r3, [r3, r2]
   32530:	2b00      	cmp	r3, #0
   32532:	da2b      	bge.n	3258c <_http_client_request+0x35c>
					module->req.content_length = 0;
   32534:	69fb      	ldr	r3, [r7, #28]
   32536:	22cc      	movs	r2, #204	; 0xcc
   32538:	2100      	movs	r1, #0
   3253a:	5099      	str	r1, [r3, r2]
   3253c:	e05c      	b.n	325f8 <_http_client_request+0x3c8>
   3253e:	46c0      	nop			; (mov r8, r8)
   32540:	0003ae5c 	.word	0x0003ae5c
   32544:	000321a9 	.word	0x000321a9
   32548:	00033111 	.word	0x00033111
   3254c:	0003ad80 	.word	0x0003ad80
   32550:	00033191 	.word	0x00033191
   32554:	0003ad88 	.word	0x0003ad88
   32558:	0003ad90 	.word	0x0003ad90
   3255c:	0003ad98 	.word	0x0003ad98
   32560:	0003ada0 	.word	0x0003ada0
   32564:	0003adac 	.word	0x0003adac
   32568:	00035be7 	.word	0x00035be7
   3256c:	0003adb4 	.word	0x0003adb4
   32570:	0003adc0 	.word	0x0003adc0
   32574:	0003add0 	.word	0x0003add0
   32578:	0003add4 	.word	0x0003add4
   3257c:	0003addc 	.word	0x0003addc
   32580:	0003adf8 	.word	0x0003adf8
   32584:	0003ae0c 	.word	0x0003ae0c
   32588:	0003ae24 	.word	0x0003ae24
					sprintf(length, "%u", (unsigned int)module->req.content_length);
   3258c:	69fb      	ldr	r3, [r7, #28]
   3258e:	22cc      	movs	r2, #204	; 0xcc
   32590:	589b      	ldr	r3, [r3, r2]
   32592:	001a      	movs	r2, r3
   32594:	49e0      	ldr	r1, [pc, #896]	; (32918 <_http_client_request+0x6e8>)
   32596:	2328      	movs	r3, #40	; 0x28
   32598:	2018      	movs	r0, #24
   3259a:	4684      	mov	ip, r0
   3259c:	44bc      	add	ip, r7
   3259e:	4463      	add	r3, ip
   325a0:	0018      	movs	r0, r3
   325a2:	4bde      	ldr	r3, [pc, #888]	; (3291c <_http_client_request+0x6ec>)
   325a4:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "Content-Length: ", strlen("Content-Length: "));
   325a6:	49de      	ldr	r1, [pc, #888]	; (32920 <_http_client_request+0x6f0>)
   325a8:	2334      	movs	r3, #52	; 0x34
   325aa:	2218      	movs	r2, #24
   325ac:	4694      	mov	ip, r2
   325ae:	44bc      	add	ip, r7
   325b0:	4463      	add	r3, ip
   325b2:	2210      	movs	r2, #16
   325b4:	0018      	movs	r0, r3
   325b6:	4bdb      	ldr	r3, [pc, #876]	; (32924 <_http_client_request+0x6f4>)
   325b8:	4798      	blx	r3
					stream_writer_send_buffer(&writer, length, strlen(length));
   325ba:	2328      	movs	r3, #40	; 0x28
   325bc:	2218      	movs	r2, #24
   325be:	4694      	mov	ip, r2
   325c0:	44bc      	add	ip, r7
   325c2:	4463      	add	r3, ip
   325c4:	0018      	movs	r0, r3
   325c6:	4bd8      	ldr	r3, [pc, #864]	; (32928 <_http_client_request+0x6f8>)
   325c8:	4798      	blx	r3
   325ca:	0002      	movs	r2, r0
   325cc:	2328      	movs	r3, #40	; 0x28
   325ce:	2118      	movs	r1, #24
   325d0:	1879      	adds	r1, r7, r1
   325d2:	18c9      	adds	r1, r1, r3
   325d4:	2334      	movs	r3, #52	; 0x34
   325d6:	2018      	movs	r0, #24
   325d8:	4684      	mov	ip, r0
   325da:	44bc      	add	ip, r7
   325dc:	4463      	add	r3, ip
   325de:	0018      	movs	r0, r3
   325e0:	4bd0      	ldr	r3, [pc, #832]	; (32924 <_http_client_request+0x6f4>)
   325e2:	4798      	blx	r3
					stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   325e4:	49d1      	ldr	r1, [pc, #836]	; (3292c <_http_client_request+0x6fc>)
   325e6:	2334      	movs	r3, #52	; 0x34
   325e8:	2218      	movs	r2, #24
   325ea:	4694      	mov	ip, r2
   325ec:	44bc      	add	ip, r7
   325ee:	4463      	add	r3, ip
   325f0:	2202      	movs	r2, #2
   325f2:	0018      	movs	r0, r3
   325f4:	4bcb      	ldr	r3, [pc, #812]	; (32924 <_http_client_request+0x6f4>)
   325f6:	4798      	blx	r3
		if (module->req.ext_header != NULL ) {
   325f8:	69fb      	ldr	r3, [r7, #28]
   325fa:	22d4      	movs	r2, #212	; 0xd4
   325fc:	589b      	ldr	r3, [r3, r2]
   325fe:	2b00      	cmp	r3, #0
   32600:	d012      	beq.n	32628 <_http_client_request+0x3f8>
				module->req.ext_header,
   32602:	69fb      	ldr	r3, [r7, #28]
   32604:	22d4      	movs	r2, #212	; 0xd4
   32606:	589c      	ldr	r4, [r3, r2]
				strlen(module->req.ext_header));
   32608:	69fb      	ldr	r3, [r7, #28]
   3260a:	22d4      	movs	r2, #212	; 0xd4
   3260c:	589b      	ldr	r3, [r3, r2]
			stream_writer_send_buffer(&writer,
   3260e:	0018      	movs	r0, r3
   32610:	4bc5      	ldr	r3, [pc, #788]	; (32928 <_http_client_request+0x6f8>)
   32612:	4798      	blx	r3
   32614:	0002      	movs	r2, r0
   32616:	2334      	movs	r3, #52	; 0x34
   32618:	2118      	movs	r1, #24
   3261a:	468c      	mov	ip, r1
   3261c:	44bc      	add	ip, r7
   3261e:	4463      	add	r3, ip
   32620:	0021      	movs	r1, r4
   32622:	0018      	movs	r0, r3
   32624:	4bbf      	ldr	r3, [pc, #764]	; (32924 <_http_client_request+0x6f4>)
   32626:	4798      	blx	r3
		stream_writer_send_buffer(&writer, "\r\n", strlen("\r\n"));
   32628:	49c0      	ldr	r1, [pc, #768]	; (3292c <_http_client_request+0x6fc>)
   3262a:	2334      	movs	r3, #52	; 0x34
   3262c:	2218      	movs	r2, #24
   3262e:	4694      	mov	ip, r2
   32630:	44bc      	add	ip, r7
   32632:	4463      	add	r3, ip
   32634:	2202      	movs	r2, #2
   32636:	0018      	movs	r0, r3
   32638:	4bba      	ldr	r3, [pc, #744]	; (32924 <_http_client_request+0x6f4>)
   3263a:	4798      	blx	r3
		stream_writer_send_remain(&writer);
   3263c:	2334      	movs	r3, #52	; 0x34
   3263e:	2218      	movs	r2, #24
   32640:	4694      	mov	ip, r2
   32642:	44bc      	add	ip, r7
   32644:	4463      	add	r3, ip
   32646:	0018      	movs	r0, r3
   32648:	4bb9      	ldr	r3, [pc, #740]	; (32930 <_http_client_request+0x700>)
   3264a:	4798      	blx	r3
		module->req.state = STATE_REQ_SEND_ENTITY;
   3264c:	69fb      	ldr	r3, [r7, #28]
   3264e:	2204      	movs	r2, #4
   32650:	66da      	str	r2, [r3, #108]	; 0x6c
		if (module->req.content_length < 0 && entity->read) {
   32652:	69fb      	ldr	r3, [r7, #28]
   32654:	22cc      	movs	r2, #204	; 0xcc
   32656:	589b      	ldr	r3, [r3, r2]
   32658:	2b00      	cmp	r3, #0
   3265a:	db00      	blt.n	3265e <_http_client_request+0x42e>
   3265c:	e0c6      	b.n	327ec <_http_client_request+0x5bc>
   3265e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   32660:	68db      	ldr	r3, [r3, #12]
   32662:	2b00      	cmp	r3, #0
   32664:	d100      	bne.n	32668 <_http_client_request+0x438>
   32666:	e0c1      	b.n	327ec <_http_client_request+0x5bc>
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   32668:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3266a:	68dc      	ldr	r4, [r3, #12]
   3266c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   3266e:	6958      	ldr	r0, [r3, #20]
   32670:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   32672:	1d59      	adds	r1, r3, #5
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   32674:	69fb      	ldr	r3, [r7, #28]
   32676:	6e5b      	ldr	r3, [r3, #100]	; 0x64
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   32678:	1fdd      	subs	r5, r3, #7
				module->config.send_buffer_size - HTTP_CHUNKED_MAX_LENGTH - 4, module->req.sent_length);
   3267a:	69fb      	ldr	r3, [r7, #28]
   3267c:	22d0      	movs	r2, #208	; 0xd0
   3267e:	589b      	ldr	r3, [r3, r2]
			size = entity->read(entity->priv_data, buffer + HTTP_CHUNKED_MAX_LENGTH + 2,
   32680:	002a      	movs	r2, r5
   32682:	47a0      	blx	r4
   32684:	0003      	movs	r3, r0
   32686:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   32688:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3268a:	2b00      	cmp	r3, #0
   3268c:	da01      	bge.n	32692 <_http_client_request+0x462>
				size = 0;
   3268e:	2300      	movs	r3, #0
   32690:	677b      	str	r3, [r7, #116]	; 0x74
			buffer[HTTP_CHUNKED_MAX_LENGTH + 1] = '\n';
   32692:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   32694:	220a      	movs	r2, #10
   32696:	711a      	strb	r2, [r3, #4]
			buffer[HTTP_CHUNKED_MAX_LENGTH] = '\r';
   32698:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   3269a:	220d      	movs	r2, #13
   3269c:	70da      	strb	r2, [r3, #3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 2] = '\r';
   3269e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   326a0:	3305      	adds	r3, #5
   326a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
   326a4:	210d      	movs	r1, #13
   326a6:	54d1      	strb	r1, [r2, r3]
			buffer[size + HTTP_CHUNKED_MAX_LENGTH + 3] = '\n';
   326a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   326aa:	3306      	adds	r3, #6
   326ac:	6eba      	ldr	r2, [r7, #104]	; 0x68
   326ae:	210a      	movs	r1, #10
   326b0:	54d1      	strb	r1, [r2, r3]
			if (size >= 0) {
   326b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   326b4:	2b00      	cmp	r3, #0
   326b6:	db14      	blt.n	326e2 <_http_client_request+0x4b2>
				ptr = buffer + 2;
   326b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   326ba:	3302      	adds	r3, #2
   326bc:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[size % 16];
   326be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   326c0:	4a9c      	ldr	r2, [pc, #624]	; (32934 <_http_client_request+0x704>)
   326c2:	4013      	ands	r3, r2
   326c4:	d504      	bpl.n	326d0 <_http_client_request+0x4a0>
   326c6:	3b01      	subs	r3, #1
   326c8:	2210      	movs	r2, #16
   326ca:	4252      	negs	r2, r2
   326cc:	4313      	orrs	r3, r2
   326ce:	3301      	adds	r3, #1
   326d0:	001a      	movs	r2, r3
   326d2:	2318      	movs	r3, #24
   326d4:	2118      	movs	r1, #24
   326d6:	468c      	mov	ip, r1
   326d8:	44bc      	add	ip, r7
   326da:	4463      	add	r3, ip
   326dc:	5c9a      	ldrb	r2, [r3, r2]
   326de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   326e0:	701a      	strb	r2, [r3, #0]
			if (size >= 0x10) {
   326e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   326e4:	2b0f      	cmp	r3, #15
   326e6:	dd19      	ble.n	3271c <_http_client_request+0x4ec>
				ptr = buffer + 1;
   326e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   326ea:	3301      	adds	r3, #1
   326ec:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x10) % 16];
   326ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   326f0:	2b00      	cmp	r3, #0
   326f2:	da00      	bge.n	326f6 <_http_client_request+0x4c6>
   326f4:	330f      	adds	r3, #15
   326f6:	111b      	asrs	r3, r3, #4
   326f8:	001a      	movs	r2, r3
   326fa:	4b8e      	ldr	r3, [pc, #568]	; (32934 <_http_client_request+0x704>)
   326fc:	4013      	ands	r3, r2
   326fe:	d504      	bpl.n	3270a <_http_client_request+0x4da>
   32700:	3b01      	subs	r3, #1
   32702:	2210      	movs	r2, #16
   32704:	4252      	negs	r2, r2
   32706:	4313      	orrs	r3, r2
   32708:	3301      	adds	r3, #1
   3270a:	001a      	movs	r2, r3
   3270c:	2318      	movs	r3, #24
   3270e:	2118      	movs	r1, #24
   32710:	468c      	mov	ip, r1
   32712:	44bc      	add	ip, r7
   32714:	4463      	add	r3, ip
   32716:	5c9a      	ldrb	r2, [r3, r2]
   32718:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   3271a:	701a      	strb	r2, [r3, #0]
			if (size >= 0x100) {
   3271c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3271e:	2bff      	cmp	r3, #255	; 0xff
   32720:	dd18      	ble.n	32754 <_http_client_request+0x524>
				ptr = buffer;
   32722:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   32724:	673b      	str	r3, [r7, #112]	; 0x70
				*ptr = CH_LUT[(size / 0x100) % 16];
   32726:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32728:	2b00      	cmp	r3, #0
   3272a:	da00      	bge.n	3272e <_http_client_request+0x4fe>
   3272c:	33ff      	adds	r3, #255	; 0xff
   3272e:	121b      	asrs	r3, r3, #8
   32730:	001a      	movs	r2, r3
   32732:	4b80      	ldr	r3, [pc, #512]	; (32934 <_http_client_request+0x704>)
   32734:	4013      	ands	r3, r2
   32736:	d504      	bpl.n	32742 <_http_client_request+0x512>
   32738:	3b01      	subs	r3, #1
   3273a:	2210      	movs	r2, #16
   3273c:	4252      	negs	r2, r2
   3273e:	4313      	orrs	r3, r2
   32740:	3301      	adds	r3, #1
   32742:	001a      	movs	r2, r3
   32744:	2318      	movs	r3, #24
   32746:	2118      	movs	r1, #24
   32748:	468c      	mov	ip, r1
   3274a:	44bc      	add	ip, r7
   3274c:	4463      	add	r3, ip
   3274e:	5c9a      	ldrb	r2, [r3, r2]
   32750:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   32752:	701a      	strb	r2, [r3, #0]
			if ((result = send(module->sock, (void*)ptr, ptr + HTTP_CHUNKED_MAX_LENGTH - buffer + size + 4, 0)) < 0) {	
   32754:	69fb      	ldr	r3, [r7, #28]
   32756:	2000      	movs	r0, #0
   32758:	5618      	ldrsb	r0, [r3, r0]
   3275a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
   3275c:	3303      	adds	r3, #3
   3275e:	001a      	movs	r2, r3
   32760:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   32762:	1ad3      	subs	r3, r2, r3
   32764:	b29a      	uxth	r2, r3
   32766:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32768:	b29b      	uxth	r3, r3
   3276a:	18d3      	adds	r3, r2, r3
   3276c:	b29b      	uxth	r3, r3
   3276e:	3304      	adds	r3, #4
   32770:	b29a      	uxth	r2, r3
   32772:	6f39      	ldr	r1, [r7, #112]	; 0x70
   32774:	2300      	movs	r3, #0
   32776:	4c70      	ldr	r4, [pc, #448]	; (32938 <_http_client_request+0x708>)
   32778:	47a0      	blx	r4
   3277a:	0003      	movs	r3, r0
   3277c:	663b      	str	r3, [r7, #96]	; 0x60
   3277e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   32780:	2b00      	cmp	r3, #0
   32782:	da07      	bge.n	32794 <_http_client_request+0x564>
				_http_client_clear_conn(module, -EIO);
   32784:	2305      	movs	r3, #5
   32786:	425a      	negs	r2, r3
   32788:	69fb      	ldr	r3, [r7, #28]
   3278a:	0011      	movs	r1, r2
   3278c:	0018      	movs	r0, r3
   3278e:	4b6b      	ldr	r3, [pc, #428]	; (3293c <_http_client_request+0x70c>)
   32790:	4798      	blx	r3
				return;
   32792:	e0e1      	b.n	32958 <_http_client_request+0x728>
			module->req.sent_length += size;
   32794:	69fb      	ldr	r3, [r7, #28]
   32796:	22d0      	movs	r2, #208	; 0xd0
   32798:	589a      	ldr	r2, [r3, r2]
   3279a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   3279c:	18d2      	adds	r2, r2, r3
   3279e:	69fb      	ldr	r3, [r7, #28]
   327a0:	21d0      	movs	r1, #208	; 0xd0
   327a2:	505a      	str	r2, [r3, r1]
			if(size == 0) {
   327a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   327a6:	2b00      	cmp	r3, #0
   327a8:	d000      	beq.n	327ac <_http_client_request+0x57c>
   327aa:	e0c9      	b.n	32940 <_http_client_request+0x710>
				if (module->req.entity.close) {
   327ac:	69fb      	ldr	r3, [r7, #28]
   327ae:	22c0      	movs	r2, #192	; 0xc0
   327b0:	589b      	ldr	r3, [r3, r2]
   327b2:	2b00      	cmp	r3, #0
   327b4:	d007      	beq.n	327c6 <_http_client_request+0x596>
					module->req.entity.close(module->req.entity.priv_data);
   327b6:	69fb      	ldr	r3, [r7, #28]
   327b8:	22c0      	movs	r2, #192	; 0xc0
   327ba:	589b      	ldr	r3, [r3, r2]
   327bc:	69fa      	ldr	r2, [r7, #28]
   327be:	21c4      	movs	r1, #196	; 0xc4
   327c0:	5852      	ldr	r2, [r2, r1]
   327c2:	0010      	movs	r0, r2
   327c4:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   327c6:	69fb      	ldr	r3, [r7, #28]
   327c8:	2202      	movs	r2, #2
   327ca:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   327cc:	69fb      	ldr	r3, [r7, #28]
   327ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   327d0:	2b00      	cmp	r3, #0
   327d2:	d100      	bne.n	327d6 <_http_client_request+0x5a6>
   327d4:	e0b5      	b.n	32942 <_http_client_request+0x712>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   327d6:	69fb      	ldr	r3, [r7, #28]
   327d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   327da:	220c      	movs	r2, #12
   327dc:	2118      	movs	r1, #24
   327de:	468c      	mov	ip, r1
   327e0:	44bc      	add	ip, r7
   327e2:	4462      	add	r2, ip
   327e4:	69f8      	ldr	r0, [r7, #28]
   327e6:	2101      	movs	r1, #1
   327e8:	4798      	blx	r3
				break;
   327ea:	e0aa      	b.n	32942 <_http_client_request+0x712>
		} else if (module->req.content_length > 0 && entity->read) {
   327ec:	69fb      	ldr	r3, [r7, #28]
   327ee:	22cc      	movs	r2, #204	; 0xcc
   327f0:	589b      	ldr	r3, [r3, r2]
   327f2:	2b00      	cmp	r3, #0
   327f4:	dc00      	bgt.n	327f8 <_http_client_request+0x5c8>
   327f6:	e07c      	b.n	328f2 <_http_client_request+0x6c2>
   327f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   327fa:	68db      	ldr	r3, [r3, #12]
   327fc:	2b00      	cmp	r3, #0
   327fe:	d100      	bne.n	32802 <_http_client_request+0x5d2>
   32800:	e077      	b.n	328f2 <_http_client_request+0x6c2>
			if (module->req.sent_length >= module->req.content_length) {
   32802:	69fb      	ldr	r3, [r7, #28]
   32804:	22d0      	movs	r2, #208	; 0xd0
   32806:	589a      	ldr	r2, [r3, r2]
   32808:	69fb      	ldr	r3, [r7, #28]
   3280a:	21cc      	movs	r1, #204	; 0xcc
   3280c:	585b      	ldr	r3, [r3, r1]
   3280e:	429a      	cmp	r2, r3
   32810:	db1f      	blt.n	32852 <_http_client_request+0x622>
				if (module->req.entity.close) {
   32812:	69fb      	ldr	r3, [r7, #28]
   32814:	22c0      	movs	r2, #192	; 0xc0
   32816:	589b      	ldr	r3, [r3, r2]
   32818:	2b00      	cmp	r3, #0
   3281a:	d007      	beq.n	3282c <_http_client_request+0x5fc>
					module->req.entity.close(module->req.entity.priv_data);
   3281c:	69fb      	ldr	r3, [r7, #28]
   3281e:	22c0      	movs	r2, #192	; 0xc0
   32820:	589b      	ldr	r3, [r3, r2]
   32822:	69fa      	ldr	r2, [r7, #28]
   32824:	21c4      	movs	r1, #196	; 0xc4
   32826:	5852      	ldr	r2, [r2, r1]
   32828:	0010      	movs	r0, r2
   3282a:	4798      	blx	r3
				module->req.state = STATE_SOCK_CONNECTED;
   3282c:	69fb      	ldr	r3, [r7, #28]
   3282e:	2202      	movs	r2, #2
   32830:	66da      	str	r2, [r3, #108]	; 0x6c
				if (module->cb) {
   32832:	69fb      	ldr	r3, [r7, #28]
   32834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32836:	2b00      	cmp	r3, #0
   32838:	d100      	bne.n	3283c <_http_client_request+0x60c>
   3283a:	e084      	b.n	32946 <_http_client_request+0x716>
					module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   3283c:	69fb      	ldr	r3, [r7, #28]
   3283e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32840:	220c      	movs	r2, #12
   32842:	2118      	movs	r1, #24
   32844:	468c      	mov	ip, r1
   32846:	44bc      	add	ip, r7
   32848:	4462      	add	r2, ip
   3284a:	69f8      	ldr	r0, [r7, #28]
   3284c:	2101      	movs	r1, #1
   3284e:	4798      	blx	r3
				break;
   32850:	e079      	b.n	32946 <_http_client_request+0x716>
			size = entity->read(entity->priv_data, buffer, module->config.send_buffer_size, module->req.sent_length);
   32852:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   32854:	68dc      	ldr	r4, [r3, #12]
   32856:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   32858:	6958      	ldr	r0, [r3, #20]
   3285a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   3285c:	69fb      	ldr	r3, [r7, #28]
   3285e:	6e5d      	ldr	r5, [r3, #100]	; 0x64
   32860:	69fb      	ldr	r3, [r7, #28]
   32862:	22d0      	movs	r2, #208	; 0xd0
   32864:	589b      	ldr	r3, [r3, r2]
   32866:	002a      	movs	r2, r5
   32868:	47a0      	blx	r4
   3286a:	0003      	movs	r3, r0
   3286c:	677b      	str	r3, [r7, #116]	; 0x74
			if (size < 0) {
   3286e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32870:	2b00      	cmp	r3, #0
   32872:	da0d      	bge.n	32890 <_http_client_request+0x660>
				_http_client_clear_conn(module, (size == 0)?-EBADMSG:-EIO);
   32874:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   32876:	2b00      	cmp	r3, #0
   32878:	d102      	bne.n	32880 <_http_client_request+0x650>
   3287a:	234d      	movs	r3, #77	; 0x4d
   3287c:	425b      	negs	r3, r3
   3287e:	e001      	b.n	32884 <_http_client_request+0x654>
   32880:	2305      	movs	r3, #5
   32882:	425b      	negs	r3, r3
   32884:	69fa      	ldr	r2, [r7, #28]
   32886:	0019      	movs	r1, r3
   32888:	0010      	movs	r0, r2
   3288a:	4b2c      	ldr	r3, [pc, #176]	; (3293c <_http_client_request+0x70c>)
   3288c:	4798      	blx	r3
			if (size < 0) {
   3288e:	e057      	b.n	32940 <_http_client_request+0x710>
				if (size > module->req.content_length - module->req.sent_length) {
   32890:	69fb      	ldr	r3, [r7, #28]
   32892:	22cc      	movs	r2, #204	; 0xcc
   32894:	589a      	ldr	r2, [r3, r2]
   32896:	69fb      	ldr	r3, [r7, #28]
   32898:	21d0      	movs	r1, #208	; 0xd0
   3289a:	585b      	ldr	r3, [r3, r1]
   3289c:	1ad2      	subs	r2, r2, r3
   3289e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   328a0:	429a      	cmp	r2, r3
   328a2:	da07      	bge.n	328b4 <_http_client_request+0x684>
					size = module->req.content_length - module->req.sent_length;
   328a4:	69fb      	ldr	r3, [r7, #28]
   328a6:	22cc      	movs	r2, #204	; 0xcc
   328a8:	589a      	ldr	r2, [r3, r2]
   328aa:	69fb      	ldr	r3, [r7, #28]
   328ac:	21d0      	movs	r1, #208	; 0xd0
   328ae:	585b      	ldr	r3, [r3, r1]
   328b0:	1ad3      	subs	r3, r2, r3
   328b2:	677b      	str	r3, [r7, #116]	; 0x74
				if ((result = send(module->sock, (void*)buffer, size, 0)) < 0) {
   328b4:	69fb      	ldr	r3, [r7, #28]
   328b6:	2000      	movs	r0, #0
   328b8:	5618      	ldrsb	r0, [r3, r0]
   328ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
   328bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   328be:	b29a      	uxth	r2, r3
   328c0:	2300      	movs	r3, #0
   328c2:	4c1d      	ldr	r4, [pc, #116]	; (32938 <_http_client_request+0x708>)
   328c4:	47a0      	blx	r4
   328c6:	0003      	movs	r3, r0
   328c8:	663b      	str	r3, [r7, #96]	; 0x60
   328ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   328cc:	2b00      	cmp	r3, #0
   328ce:	da07      	bge.n	328e0 <_http_client_request+0x6b0>
					_http_client_clear_conn(module, -EIO);
   328d0:	2305      	movs	r3, #5
   328d2:	425a      	negs	r2, r3
   328d4:	69fb      	ldr	r3, [r7, #28]
   328d6:	0011      	movs	r1, r2
   328d8:	0018      	movs	r0, r3
   328da:	4b18      	ldr	r3, [pc, #96]	; (3293c <_http_client_request+0x70c>)
   328dc:	4798      	blx	r3
					return;
   328de:	e03b      	b.n	32958 <_http_client_request+0x728>
				module->req.sent_length += size;
   328e0:	69fb      	ldr	r3, [r7, #28]
   328e2:	22d0      	movs	r2, #208	; 0xd0
   328e4:	589a      	ldr	r2, [r3, r2]
   328e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
   328e8:	18d2      	adds	r2, r2, r3
   328ea:	69fb      	ldr	r3, [r7, #28]
   328ec:	21d0      	movs	r1, #208	; 0xd0
   328ee:	505a      	str	r2, [r3, r1]
			if (size < 0) {
   328f0:	e026      	b.n	32940 <_http_client_request+0x710>
			module->req.state = STATE_SOCK_CONNECTED;
   328f2:	69fb      	ldr	r3, [r7, #28]
   328f4:	2202      	movs	r2, #2
   328f6:	66da      	str	r2, [r3, #108]	; 0x6c
			if (module->cb) {
   328f8:	69fb      	ldr	r3, [r7, #28]
   328fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   328fc:	2b00      	cmp	r3, #0
   328fe:	d024      	beq.n	3294a <_http_client_request+0x71a>
				module->cb(module, HTTP_CLIENT_CALLBACK_REQUESTED, &data);
   32900:	69fb      	ldr	r3, [r7, #28]
   32902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32904:	220c      	movs	r2, #12
   32906:	2118      	movs	r1, #24
   32908:	468c      	mov	ip, r1
   3290a:	44bc      	add	ip, r7
   3290c:	4462      	add	r2, ip
   3290e:	69f8      	ldr	r0, [r7, #28]
   32910:	2101      	movs	r1, #1
   32912:	4798      	blx	r3
			break;
   32914:	e019      	b.n	3294a <_http_client_request+0x71a>
   32916:	46c0      	nop			; (mov r8, r8)
   32918:	0003ae44 	.word	0x0003ae44
   3291c:	00035aed 	.word	0x00035aed
   32920:	0003ae48 	.word	0x0003ae48
   32924:	00033191 	.word	0x00033191
   32928:	00035be7 	.word	0x00035be7
   3292c:	0003add0 	.word	0x0003add0
   32930:	000331cd 	.word	0x000331cd
   32934:	8000000f 	.word	0x8000000f
   32938:	00026715 	.word	0x00026715
   3293c:	000320dd 	.word	0x000320dd
		break;
   32940:	e004      	b.n	3294c <_http_client_request+0x71c>
				break;
   32942:	46c0      	nop			; (mov r8, r8)
   32944:	e002      	b.n	3294c <_http_client_request+0x71c>
				break;
   32946:	46c0      	nop			; (mov r8, r8)
   32948:	e000      	b.n	3294c <_http_client_request+0x71c>
			break;
   3294a:	46c0      	nop			; (mov r8, r8)
   3294c:	69bb      	ldr	r3, [r7, #24]
   3294e:	469d      	mov	sp, r3
   32950:	e004      	b.n	3295c <_http_client_request+0x72c>
		return;
   32952:	46c0      	nop			; (mov r8, r8)
   32954:	e000      	b.n	32958 <_http_client_request+0x728>
		return;
   32956:	46c0      	nop			; (mov r8, r8)
   32958:	69bb      	ldr	r3, [r7, #24]
   3295a:	469d      	mov	sp, r3
	}
}
   3295c:	46bd      	mov	sp, r7
   3295e:	b01e      	add	sp, #120	; 0x78
   32960:	bc04      	pop	{r2}
   32962:	4690      	mov	r8, r2
   32964:	bdf0      	pop	{r4, r5, r6, r7, pc}
   32966:	46c0      	nop			; (mov r8, r8)

00032968 <_http_client_recv_packet>:

void _http_client_recv_packet(struct http_client_module *const module)
{
   32968:	b590      	push	{r4, r7, lr}
   3296a:	b083      	sub	sp, #12
   3296c:	af00      	add	r7, sp, #0
   3296e:	6078      	str	r0, [r7, #4]
	if (module == NULL) {
   32970:	687b      	ldr	r3, [r7, #4]
   32972:	2b00      	cmp	r3, #0
   32974:	d021      	beq.n	329ba <_http_client_recv_packet+0x52>
		return;
	}
	
	if (module->recved_size >= module->config.recv_buffer_size) {
   32976:	687b      	ldr	r3, [r7, #4]
   32978:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   3297a:	687b      	ldr	r3, [r7, #4]
   3297c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   3297e:	429a      	cmp	r2, r3
   32980:	d307      	bcc.n	32992 <_http_client_recv_packet+0x2a>
		/* Has not enough memory. */
		_http_client_clear_conn(module, -EOVERFLOW);
   32982:	238b      	movs	r3, #139	; 0x8b
   32984:	425a      	negs	r2, r3
   32986:	687b      	ldr	r3, [r7, #4]
   32988:	0011      	movs	r1, r2
   3298a:	0018      	movs	r0, r3
   3298c:	4b0d      	ldr	r3, [pc, #52]	; (329c4 <_http_client_recv_packet+0x5c>)
   3298e:	4798      	blx	r3
		return;
   32990:	e014      	b.n	329bc <_http_client_recv_packet+0x54>
	/*
	while (recv(module->sock,
		module->config.recv_buffer + module->recved_size,
		module->config.recv_buffer_size - module->recved_size, 0) != 0);
	*/
	recv(module->sock,
   32992:	687b      	ldr	r3, [r7, #4]
   32994:	2000      	movs	r0, #0
   32996:	5618      	ldrsb	r0, [r3, r0]
		module->config.recv_buffer + module->recved_size,
   32998:	687b      	ldr	r3, [r7, #4]
   3299a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   3299c:	687b      	ldr	r3, [r7, #4]
   3299e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   329a0:	18d1      	adds	r1, r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   329a2:	687b      	ldr	r3, [r7, #4]
   329a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
	recv(module->sock,
   329a6:	b29a      	uxth	r2, r3
		module->config.recv_buffer_size - module->recved_size, 0);
   329a8:	687b      	ldr	r3, [r7, #4]
   329aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
	recv(module->sock,
   329ac:	b29b      	uxth	r3, r3
   329ae:	1ad3      	subs	r3, r2, r3
   329b0:	b29a      	uxth	r2, r3
   329b2:	2300      	movs	r3, #0
   329b4:	4c04      	ldr	r4, [pc, #16]	; (329c8 <_http_client_recv_packet+0x60>)
   329b6:	47a0      	blx	r4
   329b8:	e000      	b.n	329bc <_http_client_recv_packet+0x54>
		return;
   329ba:	46c0      	nop			; (mov r8, r8)
}
   329bc:	46bd      	mov	sp, r7
   329be:	b003      	add	sp, #12
   329c0:	bd90      	pop	{r4, r7, pc}
   329c2:	46c0      	nop			; (mov r8, r8)
   329c4:	000320dd 	.word	0x000320dd
   329c8:	00026879 	.word	0x00026879

000329cc <_http_client_recved_packet>:

void _http_client_recved_packet(struct http_client_module *const module, int read_len)
{
   329cc:	b580      	push	{r7, lr}
   329ce:	b082      	sub	sp, #8
   329d0:	af00      	add	r7, sp, #0
   329d2:	6078      	str	r0, [r7, #4]
   329d4:	6039      	str	r1, [r7, #0]
	module->recved_size += read_len;
   329d6:	687b      	ldr	r3, [r7, #4]
   329d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   329da:	683b      	ldr	r3, [r7, #0]
   329dc:	18d2      	adds	r2, r2, r3
   329de:	687b      	ldr	r3, [r7, #4]
   329e0:	645a      	str	r2, [r3, #68]	; 0x44
	if (module->config.timeout > 0) {
   329e2:	687b      	ldr	r3, [r7, #4]
   329e4:	2258      	movs	r2, #88	; 0x58
   329e6:	5a9b      	ldrh	r3, [r3, r2]
   329e8:	2b00      	cmp	r3, #0
   329ea:	d007      	beq.n	329fc <_http_client_recved_packet+0x30>
		sw_timer_disable_callback(module->config.timer_inst, module->timer_id);
   329ec:	687b      	ldr	r3, [r7, #4]
   329ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   329f0:	687b      	ldr	r3, [r7, #4]
   329f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   329f4:	0019      	movs	r1, r3
   329f6:	0010      	movs	r0, r2
   329f8:	4b06      	ldr	r3, [pc, #24]	; (32a14 <_http_client_recved_packet+0x48>)
   329fa:	4798      	blx	r3
	}

	/* Recursive function call can be occurred overflow. */
	while(_http_client_handle_response(module) != 0);
   329fc:	46c0      	nop			; (mov r8, r8)
   329fe:	687b      	ldr	r3, [r7, #4]
   32a00:	0018      	movs	r0, r3
   32a02:	4b05      	ldr	r3, [pc, #20]	; (32a18 <_http_client_recved_packet+0x4c>)
   32a04:	4798      	blx	r3
   32a06:	1e03      	subs	r3, r0, #0
   32a08:	d1f9      	bne.n	329fe <_http_client_recved_packet+0x32>
}
   32a0a:	46c0      	nop			; (mov r8, r8)
   32a0c:	46bd      	mov	sp, r7
   32a0e:	b002      	add	sp, #8
   32a10:	bd80      	pop	{r7, pc}
   32a12:	46c0      	nop			; (mov r8, r8)
   32a14:	00033489 	.word	0x00033489
   32a18:	00032a1d 	.word	0x00032a1d

00032a1c <_http_client_handle_response>:

int _http_client_handle_response(struct http_client_module *const module)
{
   32a1c:	b580      	push	{r7, lr}
   32a1e:	b082      	sub	sp, #8
   32a20:	af00      	add	r7, sp, #0
   32a22:	6078      	str	r0, [r7, #4]
	switch(module->resp.state) {
   32a24:	687b      	ldr	r3, [r7, #4]
   32a26:	22d8      	movs	r2, #216	; 0xd8
   32a28:	589b      	ldr	r3, [r3, r2]
   32a2a:	2b00      	cmp	r3, #0
   32a2c:	d002      	beq.n	32a34 <_http_client_handle_response+0x18>
   32a2e:	2b01      	cmp	r3, #1
   32a30:	d006      	beq.n	32a40 <_http_client_handle_response+0x24>
   32a32:	e00b      	b.n	32a4c <_http_client_handle_response+0x30>
	case STATE_PARSE_HEADER:
		return _http_client_handle_header(module);
   32a34:	687b      	ldr	r3, [r7, #4]
   32a36:	0018      	movs	r0, r3
   32a38:	4b07      	ldr	r3, [pc, #28]	; (32a58 <_http_client_handle_response+0x3c>)
   32a3a:	4798      	blx	r3
   32a3c:	0003      	movs	r3, r0
   32a3e:	e006      	b.n	32a4e <_http_client_handle_response+0x32>
	case STATE_PARSE_ENTITY:
		return _http_client_handle_entity(module);
   32a40:	687b      	ldr	r3, [r7, #4]
   32a42:	0018      	movs	r0, r3
   32a44:	4b05      	ldr	r3, [pc, #20]	; (32a5c <_http_client_handle_response+0x40>)
   32a46:	4798      	blx	r3
   32a48:	0003      	movs	r3, r0
   32a4a:	e000      	b.n	32a4e <_http_client_handle_response+0x32>
	}
	return 0;
   32a4c:	2300      	movs	r3, #0
}
   32a4e:	0018      	movs	r0, r3
   32a50:	46bd      	mov	sp, r7
   32a52:	b002      	add	sp, #8
   32a54:	bd80      	pop	{r7, pc}
   32a56:	46c0      	nop			; (mov r8, r8)
   32a58:	00032a61 	.word	0x00032a61
   32a5c:	00032f19 	.word	0x00032f19

00032a60 <_http_client_handle_header>:

int _http_client_handle_header(struct http_client_module *const module)
{
   32a60:	b590      	push	{r4, r7, lr}
   32a62:	b08b      	sub	sp, #44	; 0x2c
   32a64:	af00      	add	r7, sp, #0
   32a66:	6078      	str	r0, [r7, #4]
	/* New line character only used in this function. So variable registered in the code region. */
	static const char *new_line = "\r\n";

	//TODO : header filter

	for (ptr = module->config.recv_buffer ; ; ) {
   32a68:	687b      	ldr	r3, [r7, #4]
   32a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32a6c:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   32a6e:	4b9a      	ldr	r3, [pc, #616]	; (32cd8 <_http_client_handle_header+0x278>)
   32a70:	681a      	ldr	r2, [r3, #0]
   32a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32a74:	0011      	movs	r1, r2
   32a76:	0018      	movs	r0, r3
   32a78:	4b98      	ldr	r3, [pc, #608]	; (32cdc <_http_client_handle_header+0x27c>)
   32a7a:	4798      	blx	r3
   32a7c:	0003      	movs	r3, r0
   32a7e:	61bb      	str	r3, [r7, #24]
		if (ptr_line_end == NULL || ptr_line_end >= module->config.recv_buffer + module->recved_size) {
   32a80:	69bb      	ldr	r3, [r7, #24]
   32a82:	2b00      	cmp	r3, #0
   32a84:	d007      	beq.n	32a96 <_http_client_handle_header+0x36>
   32a86:	687b      	ldr	r3, [r7, #4]
   32a88:	6dda      	ldr	r2, [r3, #92]	; 0x5c
   32a8a:	687b      	ldr	r3, [r7, #4]
   32a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32a8e:	18d2      	adds	r2, r2, r3
   32a90:	69bb      	ldr	r3, [r7, #24]
   32a92:	429a      	cmp	r2, r3
   32a94:	d807      	bhi.n	32aa6 <_http_client_handle_header+0x46>
			/* not enough buffer. */
			_http_client_move_buffer(module, ptr);
   32a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   32a98:	687b      	ldr	r3, [r7, #4]
   32a9a:	0011      	movs	r1, r2
   32a9c:	0018      	movs	r0, r3
   32a9e:	4b90      	ldr	r3, [pc, #576]	; (32ce0 <_http_client_handle_header+0x280>)
   32aa0:	4798      	blx	r3
			return 0;
   32aa2:	2300      	movs	r3, #0
   32aa4:	e114      	b.n	32cd0 <_http_client_handle_header+0x270>
		}

		if (!strncmp(ptr, new_line, strlen(new_line))) {
   32aa6:	4b8c      	ldr	r3, [pc, #560]	; (32cd8 <_http_client_handle_header+0x278>)
   32aa8:	681c      	ldr	r4, [r3, #0]
   32aaa:	4b8b      	ldr	r3, [pc, #556]	; (32cd8 <_http_client_handle_header+0x278>)
   32aac:	681b      	ldr	r3, [r3, #0]
   32aae:	0018      	movs	r0, r3
   32ab0:	4b8c      	ldr	r3, [pc, #560]	; (32ce4 <_http_client_handle_header+0x284>)
   32ab2:	4798      	blx	r3
   32ab4:	0002      	movs	r2, r0
   32ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32ab8:	0021      	movs	r1, r4
   32aba:	0018      	movs	r0, r3
   32abc:	4b8a      	ldr	r3, [pc, #552]	; (32ce8 <_http_client_handle_header+0x288>)
   32abe:	4798      	blx	r3
   32ac0:	1e03      	subs	r3, r0, #0
   32ac2:	d15d      	bne.n	32b80 <_http_client_handle_header+0x120>
			/* Move remain data to forward part of buffer. */
			_http_client_move_buffer(module, ptr + strlen(new_line));
   32ac4:	4b84      	ldr	r3, [pc, #528]	; (32cd8 <_http_client_handle_header+0x278>)
   32ac6:	681b      	ldr	r3, [r3, #0]
   32ac8:	0018      	movs	r0, r3
   32aca:	4b86      	ldr	r3, [pc, #536]	; (32ce4 <_http_client_handle_header+0x284>)
   32acc:	4798      	blx	r3
   32ace:	0002      	movs	r2, r0
   32ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32ad2:	189a      	adds	r2, r3, r2
   32ad4:	687b      	ldr	r3, [r7, #4]
   32ad6:	0011      	movs	r1, r2
   32ad8:	0018      	movs	r0, r3
   32ada:	4b81      	ldr	r3, [pc, #516]	; (32ce0 <_http_client_handle_header+0x280>)
   32adc:	4798      	blx	r3

			/* Check validation first. */
			if (module->cb && module->resp.response_code) {
   32ade:	687b      	ldr	r3, [r7, #4]
   32ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32ae2:	2b00      	cmp	r3, #0
   32ae4:	d046      	beq.n	32b74 <_http_client_handle_header+0x114>
   32ae6:	687b      	ldr	r3, [r7, #4]
   32ae8:	22e4      	movs	r2, #228	; 0xe4
   32aea:	5a9b      	ldrh	r3, [r3, r2]
   32aec:	2b00      	cmp	r3, #0
   32aee:	d041      	beq.n	32b74 <_http_client_handle_header+0x114>
				/* Chunked transfer */
				if (module->resp.content_length < 0) {
   32af0:	687b      	ldr	r3, [r7, #4]
   32af2:	22dc      	movs	r2, #220	; 0xdc
   32af4:	589b      	ldr	r3, [r3, r2]
   32af6:	2b00      	cmp	r3, #0
   32af8:	da19      	bge.n	32b2e <_http_client_handle_header+0xce>
					data.recv_response.response_code = module->resp.response_code;
   32afa:	687b      	ldr	r3, [r7, #4]
   32afc:	22e4      	movs	r2, #228	; 0xe4
   32afe:	5a9a      	ldrh	r2, [r3, r2]
   32b00:	230c      	movs	r3, #12
   32b02:	18fb      	adds	r3, r7, r3
   32b04:	801a      	strh	r2, [r3, #0]
					data.recv_response.is_chunked = 1;
   32b06:	230c      	movs	r3, #12
   32b08:	18fb      	adds	r3, r7, r3
   32b0a:	2201      	movs	r2, #1
   32b0c:	709a      	strb	r2, [r3, #2]
					module->resp.read_length = 0;
   32b0e:	687b      	ldr	r3, [r7, #4]
   32b10:	22e0      	movs	r2, #224	; 0xe0
   32b12:	2100      	movs	r1, #0
   32b14:	5099      	str	r1, [r3, r2]
					data.recv_response.content = NULL;
   32b16:	230c      	movs	r3, #12
   32b18:	18fb      	adds	r3, r7, r3
   32b1a:	2200      	movs	r2, #0
   32b1c:	609a      	str	r2, [r3, #8]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   32b1e:	687b      	ldr	r3, [r7, #4]
   32b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32b22:	220c      	movs	r2, #12
   32b24:	18ba      	adds	r2, r7, r2
   32b26:	6878      	ldr	r0, [r7, #4]
   32b28:	2102      	movs	r1, #2
   32b2a:	4798      	blx	r3
   32b2c:	e022      	b.n	32b74 <_http_client_handle_header+0x114>
				} else if (module->resp.content_length > (int)module->config.recv_buffer_size) {
   32b2e:	687b      	ldr	r3, [r7, #4]
   32b30:	22dc      	movs	r2, #220	; 0xdc
   32b32:	589a      	ldr	r2, [r3, r2]
   32b34:	687b      	ldr	r3, [r7, #4]
   32b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   32b38:	429a      	cmp	r2, r3
   32b3a:	dd1b      	ble.n	32b74 <_http_client_handle_header+0x114>
					/* Entity is bigger than receive buffer. Sending the buffer to user like chunked transfer. */
					data.recv_response.response_code = module->resp.response_code;
   32b3c:	687b      	ldr	r3, [r7, #4]
   32b3e:	22e4      	movs	r2, #228	; 0xe4
   32b40:	5a9a      	ldrh	r2, [r3, r2]
   32b42:	230c      	movs	r3, #12
   32b44:	18fb      	adds	r3, r7, r3
   32b46:	801a      	strh	r2, [r3, #0]
					data.recv_response.content_length = module->resp.content_length;
   32b48:	687b      	ldr	r3, [r7, #4]
   32b4a:	22dc      	movs	r2, #220	; 0xdc
   32b4c:	589b      	ldr	r3, [r3, r2]
   32b4e:	001a      	movs	r2, r3
   32b50:	230c      	movs	r3, #12
   32b52:	18fb      	adds	r3, r7, r3
   32b54:	605a      	str	r2, [r3, #4]
					data.recv_response.content = NULL;
   32b56:	230c      	movs	r3, #12
   32b58:	18fb      	adds	r3, r7, r3
   32b5a:	2200      	movs	r2, #0
   32b5c:	609a      	str	r2, [r3, #8]
					module->resp.read_length = 0;
   32b5e:	687b      	ldr	r3, [r7, #4]
   32b60:	22e0      	movs	r2, #224	; 0xe0
   32b62:	2100      	movs	r1, #0
   32b64:	5099      	str	r1, [r3, r2]
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   32b66:	687b      	ldr	r3, [r7, #4]
   32b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32b6a:	220c      	movs	r2, #12
   32b6c:	18ba      	adds	r2, r7, r2
   32b6e:	6878      	ldr	r0, [r7, #4]
   32b70:	2102      	movs	r1, #2
   32b72:	4798      	blx	r3
				}
			}

			module->resp.state = STATE_PARSE_ENTITY;
   32b74:	687b      	ldr	r3, [r7, #4]
   32b76:	22d8      	movs	r2, #216	; 0xd8
   32b78:	2101      	movs	r1, #1
   32b7a:	5099      	str	r1, [r3, r2]
			return 1;
   32b7c:	2301      	movs	r3, #1
   32b7e:	e0a7      	b.n	32cd0 <_http_client_handle_header+0x270>
		} else if (!strncmp(ptr, "Content-Length: ", strlen("Content-Length: "))) {
   32b80:	495a      	ldr	r1, [pc, #360]	; (32cec <_http_client_handle_header+0x28c>)
   32b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32b84:	2210      	movs	r2, #16
   32b86:	0018      	movs	r0, r3
   32b88:	4b57      	ldr	r3, [pc, #348]	; (32ce8 <_http_client_handle_header+0x288>)
   32b8a:	4798      	blx	r3
   32b8c:	1e03      	subs	r3, r0, #0
   32b8e:	d109      	bne.n	32ba4 <_http_client_handle_header+0x144>
			module->resp.content_length = atoi(ptr + strlen("Content-Length: "));
   32b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32b92:	3310      	adds	r3, #16
   32b94:	0018      	movs	r0, r3
   32b96:	4b56      	ldr	r3, [pc, #344]	; (32cf0 <_http_client_handle_header+0x290>)
   32b98:	4798      	blx	r3
   32b9a:	0001      	movs	r1, r0
   32b9c:	687b      	ldr	r3, [r7, #4]
   32b9e:	22dc      	movs	r2, #220	; 0xdc
   32ba0:	5099      	str	r1, [r3, r2]
   32ba2:	e08b      	b.n	32cbc <_http_client_handle_header+0x25c>
		} else if (!strncmp(ptr, "Transfer-Encoding: ", strlen("Transfer-Encoding: "))) {
   32ba4:	4953      	ldr	r1, [pc, #332]	; (32cf4 <_http_client_handle_header+0x294>)
   32ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32ba8:	2213      	movs	r2, #19
   32baa:	0018      	movs	r0, r3
   32bac:	4b4e      	ldr	r3, [pc, #312]	; (32ce8 <_http_client_handle_header+0x288>)
   32bae:	4798      	blx	r3
   32bb0:	1e03      	subs	r3, r0, #0
   32bb2:	d127      	bne.n	32c04 <_http_client_handle_header+0x1a4>
			/* Currently does not support gzip or deflate encoding. If received this header, disconnect session immediately*/
			char *type_ptr = ptr + strlen("Transfer-Encoding: ");
   32bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32bb6:	3313      	adds	r3, #19
   32bb8:	623b      	str	r3, [r7, #32]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   32bba:	e01e      	b.n	32bfa <_http_client_handle_header+0x19a>
				if (*type_ptr == ' ') {
   32bbc:	6a3b      	ldr	r3, [r7, #32]
   32bbe:	781b      	ldrb	r3, [r3, #0]
   32bc0:	2b20      	cmp	r3, #32
   32bc2:	d103      	bne.n	32bcc <_http_client_handle_header+0x16c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   32bc4:	6a3b      	ldr	r3, [r7, #32]
   32bc6:	3301      	adds	r3, #1
   32bc8:	623b      	str	r3, [r7, #32]
   32bca:	e016      	b.n	32bfa <_http_client_handle_header+0x19a>
					continue;
				} else if (*type_ptr == 'C' || *type_ptr == 'c') {
   32bcc:	6a3b      	ldr	r3, [r7, #32]
   32bce:	781b      	ldrb	r3, [r3, #0]
   32bd0:	2b43      	cmp	r3, #67	; 0x43
   32bd2:	d003      	beq.n	32bdc <_http_client_handle_header+0x17c>
   32bd4:	6a3b      	ldr	r3, [r7, #32]
   32bd6:	781b      	ldrb	r3, [r3, #0]
   32bd8:	2b63      	cmp	r3, #99	; 0x63
   32bda:	d105      	bne.n	32be8 <_http_client_handle_header+0x188>
					/* Chunked transfer */
					module->req.content_length = -1;
   32bdc:	687b      	ldr	r3, [r7, #4]
   32bde:	21cc      	movs	r1, #204	; 0xcc
   32be0:	2201      	movs	r2, #1
   32be2:	4252      	negs	r2, r2
   32be4:	505a      	str	r2, [r3, r1]
				} else {
					_http_client_clear_conn(module, -ENOTSUP);
					return 0;
				}
				break;
   32be6:	e069      	b.n	32cbc <_http_client_handle_header+0x25c>
					_http_client_clear_conn(module, -ENOTSUP);
   32be8:	2386      	movs	r3, #134	; 0x86
   32bea:	425a      	negs	r2, r3
   32bec:	687b      	ldr	r3, [r7, #4]
   32bee:	0011      	movs	r1, r2
   32bf0:	0018      	movs	r0, r3
   32bf2:	4b41      	ldr	r3, [pc, #260]	; (32cf8 <_http_client_handle_header+0x298>)
   32bf4:	4798      	blx	r3
					return 0;
   32bf6:	2300      	movs	r3, #0
   32bf8:	e06a      	b.n	32cd0 <_http_client_handle_header+0x270>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   32bfa:	69ba      	ldr	r2, [r7, #24]
   32bfc:	6a3b      	ldr	r3, [r7, #32]
   32bfe:	429a      	cmp	r2, r3
   32c00:	d8dc      	bhi.n	32bbc <_http_client_handle_header+0x15c>
   32c02:	e05b      	b.n	32cbc <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "Connection: ", strlen("Connection: "))) {
   32c04:	493d      	ldr	r1, [pc, #244]	; (32cfc <_http_client_handle_header+0x29c>)
   32c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32c08:	220c      	movs	r2, #12
   32c0a:	0018      	movs	r0, r3
   32c0c:	4b36      	ldr	r3, [pc, #216]	; (32ce8 <_http_client_handle_header+0x288>)
   32c0e:	4798      	blx	r3
   32c10:	1e03      	subs	r3, r0, #0
   32c12:	d126      	bne.n	32c62 <_http_client_handle_header+0x202>
			char *type_ptr = ptr + strlen("Connection: ");
   32c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32c16:	330c      	adds	r3, #12
   32c18:	61fb      	str	r3, [r7, #28]
			for (; ptr_line_end > type_ptr; type_ptr++) {
   32c1a:	e01d      	b.n	32c58 <_http_client_handle_header+0x1f8>
				if (*type_ptr == ' ') {
   32c1c:	69fb      	ldr	r3, [r7, #28]
   32c1e:	781b      	ldrb	r3, [r3, #0]
   32c20:	2b20      	cmp	r3, #32
   32c22:	d103      	bne.n	32c2c <_http_client_handle_header+0x1cc>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   32c24:	69fb      	ldr	r3, [r7, #28]
   32c26:	3301      	adds	r3, #1
   32c28:	61fb      	str	r3, [r7, #28]
   32c2a:	e015      	b.n	32c58 <_http_client_handle_header+0x1f8>
					continue;
				} else if (*type_ptr == 'K' || *type_ptr == 'k') {
   32c2c:	69fb      	ldr	r3, [r7, #28]
   32c2e:	781b      	ldrb	r3, [r3, #0]
   32c30:	2b4b      	cmp	r3, #75	; 0x4b
   32c32:	d003      	beq.n	32c3c <_http_client_handle_header+0x1dc>
   32c34:	69fb      	ldr	r3, [r7, #28]
   32c36:	781b      	ldrb	r3, [r3, #0]
   32c38:	2b6b      	cmp	r3, #107	; 0x6b
   32c3a:	d106      	bne.n	32c4a <_http_client_handle_header+0x1ea>
					module->permanent = 1;
   32c3c:	687b      	ldr	r3, [r7, #4]
   32c3e:	2241      	movs	r2, #65	; 0x41
   32c40:	5c99      	ldrb	r1, [r3, r2]
   32c42:	2002      	movs	r0, #2
   32c44:	4301      	orrs	r1, r0
   32c46:	5499      	strb	r1, [r3, r2]
				} else {
					module->permanent = 0;
				}
				break;
   32c48:	e038      	b.n	32cbc <_http_client_handle_header+0x25c>
					module->permanent = 0;
   32c4a:	687b      	ldr	r3, [r7, #4]
   32c4c:	2241      	movs	r2, #65	; 0x41
   32c4e:	5c99      	ldrb	r1, [r3, r2]
   32c50:	2002      	movs	r0, #2
   32c52:	4381      	bics	r1, r0
   32c54:	5499      	strb	r1, [r3, r2]
				break;
   32c56:	e031      	b.n	32cbc <_http_client_handle_header+0x25c>
			for (; ptr_line_end > type_ptr; type_ptr++) {
   32c58:	69ba      	ldr	r2, [r7, #24]
   32c5a:	69fb      	ldr	r3, [r7, #28]
   32c5c:	429a      	cmp	r2, r3
   32c5e:	d8dd      	bhi.n	32c1c <_http_client_handle_header+0x1bc>
   32c60:	e02c      	b.n	32cbc <_http_client_handle_header+0x25c>
			}
		} else if (!strncmp(ptr, "HTTP/", 5)) {
   32c62:	4927      	ldr	r1, [pc, #156]	; (32d00 <_http_client_handle_header+0x2a0>)
   32c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32c66:	2205      	movs	r2, #5
   32c68:	0018      	movs	r0, r3
   32c6a:	4b1f      	ldr	r3, [pc, #124]	; (32ce8 <_http_client_handle_header+0x288>)
   32c6c:	4798      	blx	r3
   32c6e:	1e03      	subs	r3, r0, #0
   32c70:	d124      	bne.n	32cbc <_http_client_handle_header+0x25c>
			module->resp.response_code = atoi(ptr + 9); /* HTTP/{Ver} {Code} {Desc} : HTTP/1.1 200 OK */
   32c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32c74:	3309      	adds	r3, #9
   32c76:	0018      	movs	r0, r3
   32c78:	4b1d      	ldr	r3, [pc, #116]	; (32cf0 <_http_client_handle_header+0x290>)
   32c7a:	4798      	blx	r3
   32c7c:	0003      	movs	r3, r0
   32c7e:	b299      	uxth	r1, r3
   32c80:	687b      	ldr	r3, [r7, #4]
   32c82:	22e4      	movs	r2, #228	; 0xe4
   32c84:	5299      	strh	r1, [r3, r2]
			/* Initializing the variables */
			module->resp.content_length = 0;
   32c86:	687b      	ldr	r3, [r7, #4]
   32c88:	22dc      	movs	r2, #220	; 0xdc
   32c8a:	2100      	movs	r1, #0
   32c8c:	5099      	str	r1, [r3, r2]
			/* persistent connection is turn on in the HTTP 1.1 or above version of protocols. */  
			if (ptr [5] > '1' || ptr[7] > '0') {
   32c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32c90:	3305      	adds	r3, #5
   32c92:	781b      	ldrb	r3, [r3, #0]
   32c94:	2b31      	cmp	r3, #49	; 0x31
   32c96:	d804      	bhi.n	32ca2 <_http_client_handle_header+0x242>
   32c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   32c9a:	3307      	adds	r3, #7
   32c9c:	781b      	ldrb	r3, [r3, #0]
   32c9e:	2b30      	cmp	r3, #48	; 0x30
   32ca0:	d906      	bls.n	32cb0 <_http_client_handle_header+0x250>
				module->permanent = 1;
   32ca2:	687b      	ldr	r3, [r7, #4]
   32ca4:	2241      	movs	r2, #65	; 0x41
   32ca6:	5c99      	ldrb	r1, [r3, r2]
   32ca8:	2002      	movs	r0, #2
   32caa:	4301      	orrs	r1, r0
   32cac:	5499      	strb	r1, [r3, r2]
   32cae:	e005      	b.n	32cbc <_http_client_handle_header+0x25c>
			} else {
				module->permanent = 0;
   32cb0:	687b      	ldr	r3, [r7, #4]
   32cb2:	2241      	movs	r2, #65	; 0x41
   32cb4:	5c99      	ldrb	r1, [r3, r2]
   32cb6:	2002      	movs	r0, #2
   32cb8:	4381      	bics	r1, r0
   32cba:	5499      	strb	r1, [r3, r2]
			}
		}

		ptr = ptr_line_end + strlen(new_line);
   32cbc:	4b06      	ldr	r3, [pc, #24]	; (32cd8 <_http_client_handle_header+0x278>)
   32cbe:	681b      	ldr	r3, [r3, #0]
   32cc0:	0018      	movs	r0, r3
   32cc2:	4b08      	ldr	r3, [pc, #32]	; (32ce4 <_http_client_handle_header+0x284>)
   32cc4:	4798      	blx	r3
   32cc6:	0002      	movs	r2, r0
   32cc8:	69bb      	ldr	r3, [r7, #24]
   32cca:	189b      	adds	r3, r3, r2
   32ccc:	627b      	str	r3, [r7, #36]	; 0x24
		ptr_line_end = strstr(ptr, new_line);
   32cce:	e6ce      	b.n	32a6e <_http_client_handle_header+0xe>
	}
}
   32cd0:	0018      	movs	r0, r3
   32cd2:	46bd      	mov	sp, r7
   32cd4:	b00b      	add	sp, #44	; 0x2c
   32cd6:	bd90      	pop	{r4, r7, pc}
   32cd8:	2000012c 	.word	0x2000012c
   32cdc:	00035c65 	.word	0x00035c65
   32ce0:	000330c5 	.word	0x000330c5
   32ce4:	00035be7 	.word	0x00035be7
   32ce8:	00035bf5 	.word	0x00035bf5
   32cec:	0003ae48 	.word	0x0003ae48
   32cf0:	0003577d 	.word	0x0003577d
   32cf4:	0003ae6c 	.word	0x0003ae6c
   32cf8:	000320dd 	.word	0x000320dd
   32cfc:	0003ae80 	.word	0x0003ae80
   32d00:	0003ae90 	.word	0x0003ae90

00032d04 <_http_client_read_chuked_entity>:

static void _http_client_read_chuked_entity(struct http_client_module *const module)
{
   32d04:	b580      	push	{r7, lr}
   32d06:	b088      	sub	sp, #32
   32d08:	af00      	add	r7, sp, #0
   32d0a:	6078      	str	r0, [r7, #4]
	/* In chunked mode, read_length variable is means to remain data in the chunk. */
	union http_client_data data;
	int length = (int)module->recved_size;
   32d0c:	687b      	ldr	r3, [r7, #4]
   32d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32d10:	61fb      	str	r3, [r7, #28]
	int extension = 0;
   32d12:	2300      	movs	r3, #0
   32d14:	61bb      	str	r3, [r7, #24]
	char *buffer= module->config.recv_buffer;
   32d16:	687b      	ldr	r3, [r7, #4]
   32d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32d1a:	617b      	str	r3, [r7, #20]

	do {
		if (module->resp.read_length >= 0) {
   32d1c:	687b      	ldr	r3, [r7, #4]
   32d1e:	22e0      	movs	r2, #224	; 0xe0
   32d20:	589b      	ldr	r3, [r3, r2]
   32d22:	2b00      	cmp	r3, #0
   32d24:	db71      	blt.n	32e0a <_http_client_read_chuked_entity+0x106>
			if (module->resp.read_length == 0) {
   32d26:	687b      	ldr	r3, [r7, #4]
   32d28:	22e0      	movs	r2, #224	; 0xe0
   32d2a:	589b      	ldr	r3, [r3, r2]
   32d2c:	2b00      	cmp	r3, #0
   32d2e:	d134      	bne.n	32d9a <_http_client_read_chuked_entity+0x96>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   32d30:	687b      	ldr	r3, [r7, #4]
   32d32:	22d8      	movs	r2, #216	; 0xd8
   32d34:	2100      	movs	r1, #0
   32d36:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   32d38:	687b      	ldr	r3, [r7, #4]
   32d3a:	22e4      	movs	r2, #228	; 0xe4
   32d3c:	2100      	movs	r1, #0
   32d3e:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   32d40:	2308      	movs	r3, #8
   32d42:	18fb      	adds	r3, r7, r3
   32d44:	2201      	movs	r2, #1
   32d46:	721a      	strb	r2, [r3, #8]
				data.recv_chunked_data.length = 0;
   32d48:	2308      	movs	r3, #8
   32d4a:	18fb      	adds	r3, r7, r3
   32d4c:	2200      	movs	r2, #0
   32d4e:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = NULL;
   32d50:	2308      	movs	r3, #8
   32d52:	18fb      	adds	r3, r7, r3
   32d54:	2200      	movs	r2, #0
   32d56:	605a      	str	r2, [r3, #4]
				if (module->cb) {
   32d58:	687b      	ldr	r3, [r7, #4]
   32d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32d5c:	2b00      	cmp	r3, #0
   32d5e:	d006      	beq.n	32d6e <_http_client_read_chuked_entity+0x6a>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   32d60:	687b      	ldr	r3, [r7, #4]
   32d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32d64:	2208      	movs	r2, #8
   32d66:	18ba      	adds	r2, r7, r2
   32d68:	6878      	ldr	r0, [r7, #4]
   32d6a:	2103      	movs	r1, #3
   32d6c:	4798      	blx	r3
				}
				if (module->permanent == 0) {
   32d6e:	687b      	ldr	r3, [r7, #4]
   32d70:	2241      	movs	r2, #65	; 0x41
   32d72:	5c9b      	ldrb	r3, [r3, r2]
   32d74:	2202      	movs	r2, #2
   32d76:	4013      	ands	r3, r2
   32d78:	b2db      	uxtb	r3, r3
   32d7a:	2b00      	cmp	r3, #0
   32d7c:	d105      	bne.n	32d8a <_http_client_read_chuked_entity+0x86>
					/* This server was not supported keep alive. */
					_http_client_clear_conn(module, 0);
   32d7e:	687b      	ldr	r3, [r7, #4]
   32d80:	2100      	movs	r1, #0
   32d82:	0018      	movs	r0, r3
   32d84:	4b62      	ldr	r3, [pc, #392]	; (32f10 <_http_client_read_chuked_entity+0x20c>)
   32d86:	4798      	blx	r3
					return;
   32d88:	e0bf      	b.n	32f0a <_http_client_read_chuked_entity+0x206>
				}
				_http_client_move_buffer(module, buffer + 2);
   32d8a:	697b      	ldr	r3, [r7, #20]
   32d8c:	1c9a      	adds	r2, r3, #2
   32d8e:	687b      	ldr	r3, [r7, #4]
   32d90:	0011      	movs	r1, r2
   32d92:	0018      	movs	r0, r3
   32d94:	4b5f      	ldr	r3, [pc, #380]	; (32f14 <_http_client_read_chuked_entity+0x210>)
   32d96:	4798      	blx	r3
   32d98:	e0b2      	b.n	32f00 <_http_client_read_chuked_entity+0x1fc>
			} else if (module->resp.read_length <= length) {
   32d9a:	687b      	ldr	r3, [r7, #4]
   32d9c:	22e0      	movs	r2, #224	; 0xe0
   32d9e:	589a      	ldr	r2, [r3, r2]
   32da0:	69fb      	ldr	r3, [r7, #28]
   32da2:	429a      	cmp	r2, r3
   32da4:	dd00      	ble.n	32da8 <_http_client_read_chuked_entity+0xa4>
   32da6:	e0ab      	b.n	32f00 <_http_client_read_chuked_entity+0x1fc>
				data.recv_chunked_data.length = module->resp.read_length;
   32da8:	687b      	ldr	r3, [r7, #4]
   32daa:	22e0      	movs	r2, #224	; 0xe0
   32dac:	589b      	ldr	r3, [r3, r2]
   32dae:	001a      	movs	r2, r3
   32db0:	2308      	movs	r3, #8
   32db2:	18fb      	adds	r3, r7, r3
   32db4:	601a      	str	r2, [r3, #0]
				data.recv_chunked_data.data = buffer;
   32db6:	2308      	movs	r3, #8
   32db8:	18fb      	adds	r3, r7, r3
   32dba:	697a      	ldr	r2, [r7, #20]
   32dbc:	605a      	str	r2, [r3, #4]
				data.recv_chunked_data.is_complete = 0;
   32dbe:	2308      	movs	r3, #8
   32dc0:	18fb      	adds	r3, r7, r3
   32dc2:	2200      	movs	r2, #0
   32dc4:	721a      	strb	r2, [r3, #8]

				if (module->cb) {
   32dc6:	687b      	ldr	r3, [r7, #4]
   32dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32dca:	2b00      	cmp	r3, #0
   32dcc:	d006      	beq.n	32ddc <_http_client_read_chuked_entity+0xd8>
					module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   32dce:	687b      	ldr	r3, [r7, #4]
   32dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32dd2:	2208      	movs	r2, #8
   32dd4:	18ba      	adds	r2, r7, r2
   32dd6:	6878      	ldr	r0, [r7, #4]
   32dd8:	2103      	movs	r1, #3
   32dda:	4798      	blx	r3
				}
				/* Last two character in the chunk is '\r\n'. */
				_http_client_move_buffer(module, buffer + module->resp.read_length + 2 /* sizeof newline character */);
   32ddc:	687b      	ldr	r3, [r7, #4]
   32dde:	22e0      	movs	r2, #224	; 0xe0
   32de0:	589b      	ldr	r3, [r3, r2]
   32de2:	3302      	adds	r3, #2
   32de4:	697a      	ldr	r2, [r7, #20]
   32de6:	18d2      	adds	r2, r2, r3
   32de8:	687b      	ldr	r3, [r7, #4]
   32dea:	0011      	movs	r1, r2
   32dec:	0018      	movs	r0, r3
   32dee:	4b49      	ldr	r3, [pc, #292]	; (32f14 <_http_client_read_chuked_entity+0x210>)
   32df0:	4798      	blx	r3
				length = (int)module->recved_size;
   32df2:	687b      	ldr	r3, [r7, #4]
   32df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32df6:	61fb      	str	r3, [r7, #28]
				buffer = module->config.recv_buffer;
   32df8:	687b      	ldr	r3, [r7, #4]
   32dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32dfc:	617b      	str	r3, [r7, #20]
				module->resp.read_length = -1;
   32dfe:	687b      	ldr	r3, [r7, #4]
   32e00:	21e0      	movs	r1, #224	; 0xe0
   32e02:	2201      	movs	r2, #1
   32e04:	4252      	negs	r2, r2
   32e06:	505a      	str	r2, [r3, r1]
   32e08:	e07a      	b.n	32f00 <_http_client_read_chuked_entity+0x1fc>
			}
		} else {
			/* Read chunked length. */
			module->resp.read_length = 0;
   32e0a:	687b      	ldr	r3, [r7, #4]
   32e0c:	22e0      	movs	r2, #224	; 0xe0
   32e0e:	2100      	movs	r1, #0
   32e10:	5099      	str	r1, [r3, r2]
			for (; length > 0; buffer++, length--) {
   32e12:	e05a      	b.n	32eca <_http_client_read_chuked_entity+0x1c6>
				if (*buffer == '\n') {
   32e14:	697b      	ldr	r3, [r7, #20]
   32e16:	781b      	ldrb	r3, [r3, #0]
   32e18:	2b0a      	cmp	r3, #10
   32e1a:	d106      	bne.n	32e2a <_http_client_read_chuked_entity+0x126>
					buffer++;
   32e1c:	697b      	ldr	r3, [r7, #20]
   32e1e:	3301      	adds	r3, #1
   32e20:	617b      	str	r3, [r7, #20]
					length--;
   32e22:	69fb      	ldr	r3, [r7, #28]
   32e24:	3b01      	subs	r3, #1
   32e26:	61fb      	str	r3, [r7, #28]
					break;
   32e28:	e052      	b.n	32ed0 <_http_client_read_chuked_entity+0x1cc>
				}
				if (extension != 0) {
   32e2a:	69bb      	ldr	r3, [r7, #24]
   32e2c:	2b00      	cmp	r3, #0
   32e2e:	d145      	bne.n	32ebc <_http_client_read_chuked_entity+0x1b8>
					continue;
				}
				if (*buffer >= '0' && *buffer <= '9') {
   32e30:	697b      	ldr	r3, [r7, #20]
   32e32:	781b      	ldrb	r3, [r3, #0]
   32e34:	2b2f      	cmp	r3, #47	; 0x2f
   32e36:	d910      	bls.n	32e5a <_http_client_read_chuked_entity+0x156>
   32e38:	697b      	ldr	r3, [r7, #20]
   32e3a:	781b      	ldrb	r3, [r3, #0]
   32e3c:	2b39      	cmp	r3, #57	; 0x39
   32e3e:	d80c      	bhi.n	32e5a <_http_client_read_chuked_entity+0x156>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - '0';
   32e40:	687b      	ldr	r3, [r7, #4]
   32e42:	22e0      	movs	r2, #224	; 0xe0
   32e44:	589b      	ldr	r3, [r3, r2]
   32e46:	011b      	lsls	r3, r3, #4
   32e48:	697a      	ldr	r2, [r7, #20]
   32e4a:	7812      	ldrb	r2, [r2, #0]
   32e4c:	189b      	adds	r3, r3, r2
   32e4e:	3b30      	subs	r3, #48	; 0x30
   32e50:	001a      	movs	r2, r3
   32e52:	687b      	ldr	r3, [r7, #4]
   32e54:	21e0      	movs	r1, #224	; 0xe0
   32e56:	505a      	str	r2, [r3, r1]
   32e58:	e031      	b.n	32ebe <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'a' && *buffer <= 'f') {
   32e5a:	697b      	ldr	r3, [r7, #20]
   32e5c:	781b      	ldrb	r3, [r3, #0]
   32e5e:	2b60      	cmp	r3, #96	; 0x60
   32e60:	d910      	bls.n	32e84 <_http_client_read_chuked_entity+0x180>
   32e62:	697b      	ldr	r3, [r7, #20]
   32e64:	781b      	ldrb	r3, [r3, #0]
   32e66:	2b66      	cmp	r3, #102	; 0x66
   32e68:	d80c      	bhi.n	32e84 <_http_client_read_chuked_entity+0x180>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'a';
   32e6a:	687b      	ldr	r3, [r7, #4]
   32e6c:	22e0      	movs	r2, #224	; 0xe0
   32e6e:	589b      	ldr	r3, [r3, r2]
   32e70:	011b      	lsls	r3, r3, #4
   32e72:	697a      	ldr	r2, [r7, #20]
   32e74:	7812      	ldrb	r2, [r2, #0]
   32e76:	189b      	adds	r3, r3, r2
   32e78:	3b61      	subs	r3, #97	; 0x61
   32e7a:	001a      	movs	r2, r3
   32e7c:	687b      	ldr	r3, [r7, #4]
   32e7e:	21e0      	movs	r1, #224	; 0xe0
   32e80:	505a      	str	r2, [r3, r1]
   32e82:	e01c      	b.n	32ebe <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer >= 'A' && *buffer <= 'F') {
   32e84:	697b      	ldr	r3, [r7, #20]
   32e86:	781b      	ldrb	r3, [r3, #0]
   32e88:	2b40      	cmp	r3, #64	; 0x40
   32e8a:	d910      	bls.n	32eae <_http_client_read_chuked_entity+0x1aa>
   32e8c:	697b      	ldr	r3, [r7, #20]
   32e8e:	781b      	ldrb	r3, [r3, #0]
   32e90:	2b46      	cmp	r3, #70	; 0x46
   32e92:	d80c      	bhi.n	32eae <_http_client_read_chuked_entity+0x1aa>
					module->resp.read_length = module->resp.read_length * 0x10 + *buffer - 'A';
   32e94:	687b      	ldr	r3, [r7, #4]
   32e96:	22e0      	movs	r2, #224	; 0xe0
   32e98:	589b      	ldr	r3, [r3, r2]
   32e9a:	011b      	lsls	r3, r3, #4
   32e9c:	697a      	ldr	r2, [r7, #20]
   32e9e:	7812      	ldrb	r2, [r2, #0]
   32ea0:	189b      	adds	r3, r3, r2
   32ea2:	3b41      	subs	r3, #65	; 0x41
   32ea4:	001a      	movs	r2, r3
   32ea6:	687b      	ldr	r3, [r7, #4]
   32ea8:	21e0      	movs	r1, #224	; 0xe0
   32eaa:	505a      	str	r2, [r3, r1]
   32eac:	e007      	b.n	32ebe <_http_client_read_chuked_entity+0x1ba>
				} else if (*buffer == ';') {
   32eae:	697b      	ldr	r3, [r7, #20]
   32eb0:	781b      	ldrb	r3, [r3, #0]
   32eb2:	2b3b      	cmp	r3, #59	; 0x3b
   32eb4:	d103      	bne.n	32ebe <_http_client_read_chuked_entity+0x1ba>
					extension = 1;
   32eb6:	2301      	movs	r3, #1
   32eb8:	61bb      	str	r3, [r7, #24]
   32eba:	e000      	b.n	32ebe <_http_client_read_chuked_entity+0x1ba>
					continue;
   32ebc:	46c0      	nop			; (mov r8, r8)
			for (; length > 0; buffer++, length--) {
   32ebe:	697b      	ldr	r3, [r7, #20]
   32ec0:	3301      	adds	r3, #1
   32ec2:	617b      	str	r3, [r7, #20]
   32ec4:	69fb      	ldr	r3, [r7, #28]
   32ec6:	3b01      	subs	r3, #1
   32ec8:	61fb      	str	r3, [r7, #28]
   32eca:	69fb      	ldr	r3, [r7, #28]
   32ecc:	2b00      	cmp	r3, #0
   32ece:	dca1      	bgt.n	32e14 <_http_client_read_chuked_entity+0x110>
				}
			}

			if (module->resp.read_length > (int)module->config.recv_buffer_size) {
   32ed0:	687b      	ldr	r3, [r7, #4]
   32ed2:	22e0      	movs	r2, #224	; 0xe0
   32ed4:	589a      	ldr	r2, [r3, r2]
   32ed6:	687b      	ldr	r3, [r7, #4]
   32ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   32eda:	429a      	cmp	r2, r3
   32edc:	dd07      	ble.n	32eee <_http_client_read_chuked_entity+0x1ea>
				/* Chunked size is too big. */
				/* Through exception. */
				_http_client_clear_conn(module, -EOVERFLOW);
   32ede:	238b      	movs	r3, #139	; 0x8b
   32ee0:	425a      	negs	r2, r3
   32ee2:	687b      	ldr	r3, [r7, #4]
   32ee4:	0011      	movs	r1, r2
   32ee6:	0018      	movs	r0, r3
   32ee8:	4b09      	ldr	r3, [pc, #36]	; (32f10 <_http_client_read_chuked_entity+0x20c>)
   32eea:	4798      	blx	r3
				return;
   32eec:	e00d      	b.n	32f0a <_http_client_read_chuked_entity+0x206>
			}

			if (length  == 0) {
   32eee:	69fb      	ldr	r3, [r7, #28]
   32ef0:	2b00      	cmp	r3, #0
   32ef2:	d105      	bne.n	32f00 <_http_client_read_chuked_entity+0x1fc>
				/* currently not received packet yet. */
				module->resp.read_length = -1;
   32ef4:	687b      	ldr	r3, [r7, #4]
   32ef6:	21e0      	movs	r1, #224	; 0xe0
   32ef8:	2201      	movs	r2, #1
   32efa:	4252      	negs	r2, r2
   32efc:	505a      	str	r2, [r3, r1]
				return;
   32efe:	e004      	b.n	32f0a <_http_client_read_chuked_entity+0x206>
			}
		}
	} while(module->recved_size > 0);
   32f00:	687b      	ldr	r3, [r7, #4]
   32f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32f04:	2b00      	cmp	r3, #0
   32f06:	d000      	beq.n	32f0a <_http_client_read_chuked_entity+0x206>
   32f08:	e708      	b.n	32d1c <_http_client_read_chuked_entity+0x18>
}
   32f0a:	46bd      	mov	sp, r7
   32f0c:	b008      	add	sp, #32
   32f0e:	bd80      	pop	{r7, pc}
   32f10:	000320dd 	.word	0x000320dd
   32f14:	000330c5 	.word	0x000330c5

00032f18 <_http_client_handle_entity>:

int _http_client_handle_entity(struct http_client_module *const module)
{
   32f18:	b580      	push	{r7, lr}
   32f1a:	b086      	sub	sp, #24
   32f1c:	af00      	add	r7, sp, #0
   32f1e:	6078      	str	r0, [r7, #4]
	union http_client_data data;
	char *buffer = module->config.recv_buffer;
   32f20:	687b      	ldr	r3, [r7, #4]
   32f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   32f24:	617b      	str	r3, [r7, #20]

	/* If data size is lesser than buffer size, read all buffer and retransmission it to application. */
	if (module->resp.content_length >= 0 && module->resp.content_length <= (int)module->config.recv_buffer_size) {
   32f26:	687b      	ldr	r3, [r7, #4]
   32f28:	22dc      	movs	r2, #220	; 0xdc
   32f2a:	589b      	ldr	r3, [r3, r2]
   32f2c:	2b00      	cmp	r3, #0
   32f2e:	db58      	blt.n	32fe2 <_http_client_handle_entity+0xca>
   32f30:	687b      	ldr	r3, [r7, #4]
   32f32:	22dc      	movs	r2, #220	; 0xdc
   32f34:	589a      	ldr	r2, [r3, r2]
   32f36:	687b      	ldr	r3, [r7, #4]
   32f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   32f3a:	429a      	cmp	r2, r3
   32f3c:	dc51      	bgt.n	32fe2 <_http_client_handle_entity+0xca>
		if ((int)module->recved_size >= module->resp.content_length) {
   32f3e:	687b      	ldr	r3, [r7, #4]
   32f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32f42:	0019      	movs	r1, r3
   32f44:	687b      	ldr	r3, [r7, #4]
   32f46:	22dc      	movs	r2, #220	; 0xdc
   32f48:	589b      	ldr	r3, [r3, r2]
   32f4a:	4299      	cmp	r1, r3
   32f4c:	da00      	bge.n	32f50 <_http_client_handle_entity+0x38>
   32f4e:	e0a9      	b.n	330a4 <_http_client_handle_entity+0x18c>
			if (module->cb && module->resp.response_code) {
   32f50:	687b      	ldr	r3, [r7, #4]
   32f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32f54:	2b00      	cmp	r3, #0
   32f56:	d020      	beq.n	32f9a <_http_client_handle_entity+0x82>
   32f58:	687b      	ldr	r3, [r7, #4]
   32f5a:	22e4      	movs	r2, #228	; 0xe4
   32f5c:	5a9b      	ldrh	r3, [r3, r2]
   32f5e:	2b00      	cmp	r3, #0
   32f60:	d01b      	beq.n	32f9a <_http_client_handle_entity+0x82>
				data.recv_response.response_code = module->resp.response_code;
   32f62:	687b      	ldr	r3, [r7, #4]
   32f64:	22e4      	movs	r2, #228	; 0xe4
   32f66:	5a9a      	ldrh	r2, [r3, r2]
   32f68:	2308      	movs	r3, #8
   32f6a:	18fb      	adds	r3, r7, r3
   32f6c:	801a      	strh	r2, [r3, #0]
				data.recv_response.is_chunked = 0;
   32f6e:	2308      	movs	r3, #8
   32f70:	18fb      	adds	r3, r7, r3
   32f72:	2200      	movs	r2, #0
   32f74:	709a      	strb	r2, [r3, #2]
				data.recv_response.content_length = module->resp.content_length;
   32f76:	687b      	ldr	r3, [r7, #4]
   32f78:	22dc      	movs	r2, #220	; 0xdc
   32f7a:	589b      	ldr	r3, [r3, r2]
   32f7c:	001a      	movs	r2, r3
   32f7e:	2308      	movs	r3, #8
   32f80:	18fb      	adds	r3, r7, r3
   32f82:	605a      	str	r2, [r3, #4]
				data.recv_response.content = buffer;
   32f84:	2308      	movs	r3, #8
   32f86:	18fb      	adds	r3, r7, r3
   32f88:	697a      	ldr	r2, [r7, #20]
   32f8a:	609a      	str	r2, [r3, #8]
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_RESPONSE, &data);
   32f8c:	687b      	ldr	r3, [r7, #4]
   32f8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   32f90:	2208      	movs	r2, #8
   32f92:	18ba      	adds	r2, r7, r2
   32f94:	6878      	ldr	r0, [r7, #4]
   32f96:	2102      	movs	r1, #2
   32f98:	4798      	blx	r3
			}
			module->resp.state = STATE_PARSE_HEADER;
   32f9a:	687b      	ldr	r3, [r7, #4]
   32f9c:	22d8      	movs	r2, #216	; 0xd8
   32f9e:	2100      	movs	r1, #0
   32fa0:	5099      	str	r1, [r3, r2]
			module->resp.response_code = 0;
   32fa2:	687b      	ldr	r3, [r7, #4]
   32fa4:	22e4      	movs	r2, #228	; 0xe4
   32fa6:	2100      	movs	r1, #0
   32fa8:	5299      	strh	r1, [r3, r2]
			
			if (module->permanent == 0) {
   32faa:	687b      	ldr	r3, [r7, #4]
   32fac:	2241      	movs	r2, #65	; 0x41
   32fae:	5c9b      	ldrb	r3, [r3, r2]
   32fb0:	2202      	movs	r2, #2
   32fb2:	4013      	ands	r3, r2
   32fb4:	b2db      	uxtb	r3, r3
   32fb6:	2b00      	cmp	r3, #0
   32fb8:	d105      	bne.n	32fc6 <_http_client_handle_entity+0xae>
				/* This server was not supported keep alive. */
				_http_client_clear_conn(module, 0);
   32fba:	687b      	ldr	r3, [r7, #4]
   32fbc:	2100      	movs	r1, #0
   32fbe:	0018      	movs	r0, r3
   32fc0:	4b3b      	ldr	r3, [pc, #236]	; (330b0 <_http_client_handle_entity+0x198>)
   32fc2:	4798      	blx	r3
		if ((int)module->recved_size >= module->resp.content_length) {
   32fc4:	e06e      	b.n	330a4 <_http_client_handle_entity+0x18c>
			} else {
				_http_client_move_buffer(module, buffer + module->resp.content_length);
   32fc6:	687b      	ldr	r3, [r7, #4]
   32fc8:	22dc      	movs	r2, #220	; 0xdc
   32fca:	589b      	ldr	r3, [r3, r2]
   32fcc:	001a      	movs	r2, r3
   32fce:	697b      	ldr	r3, [r7, #20]
   32fd0:	189a      	adds	r2, r3, r2
   32fd2:	687b      	ldr	r3, [r7, #4]
   32fd4:	0011      	movs	r1, r2
   32fd6:	0018      	movs	r0, r3
   32fd8:	4b36      	ldr	r3, [pc, #216]	; (330b4 <_http_client_handle_entity+0x19c>)
   32fda:	4798      	blx	r3
				return module->recved_size;
   32fdc:	687b      	ldr	r3, [r7, #4]
   32fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   32fe0:	e061      	b.n	330a6 <_http_client_handle_entity+0x18e>
			}
		}
		/* else, buffer was not received enough size yet. */
	} else {
		if (module->resp.content_length >= 0) {
   32fe2:	687b      	ldr	r3, [r7, #4]
   32fe4:	22dc      	movs	r2, #220	; 0xdc
   32fe6:	589b      	ldr	r3, [r3, r2]
   32fe8:	2b00      	cmp	r3, #0
   32fea:	db57      	blt.n	3309c <_http_client_handle_entity+0x184>
			data.recv_chunked_data.length = module->recved_size;
   32fec:	687b      	ldr	r3, [r7, #4]
   32fee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   32ff0:	2308      	movs	r3, #8
   32ff2:	18fb      	adds	r3, r7, r3
   32ff4:	601a      	str	r2, [r3, #0]
			data.recv_chunked_data.data = buffer;
   32ff6:	2308      	movs	r3, #8
   32ff8:	18fb      	adds	r3, r7, r3
   32ffa:	697a      	ldr	r2, [r7, #20]
   32ffc:	605a      	str	r2, [r3, #4]
			module->resp.read_length += (int)module->recved_size;
   32ffe:	687b      	ldr	r3, [r7, #4]
   33000:	22e0      	movs	r2, #224	; 0xe0
   33002:	589a      	ldr	r2, [r3, r2]
   33004:	687b      	ldr	r3, [r7, #4]
   33006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   33008:	18d2      	adds	r2, r2, r3
   3300a:	687b      	ldr	r3, [r7, #4]
   3300c:	21e0      	movs	r1, #224	; 0xe0
   3300e:	505a      	str	r2, [r3, r1]
			if (module->resp.content_length <= module->resp.read_length) {
   33010:	687b      	ldr	r3, [r7, #4]
   33012:	22dc      	movs	r2, #220	; 0xdc
   33014:	589a      	ldr	r2, [r3, r2]
   33016:	687b      	ldr	r3, [r7, #4]
   33018:	21e0      	movs	r1, #224	; 0xe0
   3301a:	585b      	ldr	r3, [r3, r1]
   3301c:	429a      	cmp	r2, r3
   3301e:	dc0c      	bgt.n	3303a <_http_client_handle_entity+0x122>
				/* Complete to receive the buffer. */
				module->resp.state = STATE_PARSE_HEADER;
   33020:	687b      	ldr	r3, [r7, #4]
   33022:	22d8      	movs	r2, #216	; 0xd8
   33024:	2100      	movs	r1, #0
   33026:	5099      	str	r1, [r3, r2]
				module->resp.response_code = 0;
   33028:	687b      	ldr	r3, [r7, #4]
   3302a:	22e4      	movs	r2, #228	; 0xe4
   3302c:	2100      	movs	r1, #0
   3302e:	5299      	strh	r1, [r3, r2]
				data.recv_chunked_data.is_complete = 1;
   33030:	2308      	movs	r3, #8
   33032:	18fb      	adds	r3, r7, r3
   33034:	2201      	movs	r2, #1
   33036:	721a      	strb	r2, [r3, #8]
   33038:	e003      	b.n	33042 <_http_client_handle_entity+0x12a>
			} else {
				data.recv_chunked_data.is_complete = 0;
   3303a:	2308      	movs	r3, #8
   3303c:	18fb      	adds	r3, r7, r3
   3303e:	2200      	movs	r2, #0
   33040:	721a      	strb	r2, [r3, #8]
			}

			if (module->cb) {
   33042:	687b      	ldr	r3, [r7, #4]
   33044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   33046:	2b00      	cmp	r3, #0
   33048:	d006      	beq.n	33058 <_http_client_handle_entity+0x140>
				module->cb(module, HTTP_CLIENT_CALLBACK_RECV_CHUNKED_DATA, &data);
   3304a:	687b      	ldr	r3, [r7, #4]
   3304c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   3304e:	2208      	movs	r2, #8
   33050:	18ba      	adds	r2, r7, r2
   33052:	6878      	ldr	r0, [r7, #4]
   33054:	2103      	movs	r1, #3
   33056:	4798      	blx	r3
			}
			
			if (data.recv_chunked_data.is_complete == 1) {
   33058:	2308      	movs	r3, #8
   3305a:	18fb      	adds	r3, r7, r3
   3305c:	7a1b      	ldrb	r3, [r3, #8]
   3305e:	2b01      	cmp	r3, #1
   33060:	d112      	bne.n	33088 <_http_client_handle_entity+0x170>
				if (module->permanent == 0) {
   33062:	687b      	ldr	r3, [r7, #4]
   33064:	2241      	movs	r2, #65	; 0x41
   33066:	5c9b      	ldrb	r3, [r3, r2]
   33068:	2202      	movs	r2, #2
   3306a:	4013      	ands	r3, r2
   3306c:	b2db      	uxtb	r3, r3
   3306e:	2b00      	cmp	r3, #0
   33070:	d10a      	bne.n	33088 <_http_client_handle_entity+0x170>
					/* This server was not supported keep alive. */
					printf("1\r\n");
   33072:	4b11      	ldr	r3, [pc, #68]	; (330b8 <_http_client_handle_entity+0x1a0>)
   33074:	0018      	movs	r0, r3
   33076:	4b11      	ldr	r3, [pc, #68]	; (330bc <_http_client_handle_entity+0x1a4>)
   33078:	4798      	blx	r3
					_http_client_clear_conn(module, 0);
   3307a:	687b      	ldr	r3, [r7, #4]
   3307c:	2100      	movs	r1, #0
   3307e:	0018      	movs	r0, r3
   33080:	4b0b      	ldr	r3, [pc, #44]	; (330b0 <_http_client_handle_entity+0x198>)
   33082:	4798      	blx	r3
					return 0;
   33084:	2300      	movs	r3, #0
   33086:	e00e      	b.n	330a6 <_http_client_handle_entity+0x18e>
				}
			}
			_http_client_move_buffer(module, buffer + module->recved_size);
   33088:	687b      	ldr	r3, [r7, #4]
   3308a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   3308c:	697a      	ldr	r2, [r7, #20]
   3308e:	18d2      	adds	r2, r2, r3
   33090:	687b      	ldr	r3, [r7, #4]
   33092:	0011      	movs	r1, r2
   33094:	0018      	movs	r0, r3
   33096:	4b07      	ldr	r3, [pc, #28]	; (330b4 <_http_client_handle_entity+0x19c>)
   33098:	4798      	blx	r3
   3309a:	e003      	b.n	330a4 <_http_client_handle_entity+0x18c>
		} else {
			_http_client_read_chuked_entity(module);
   3309c:	687b      	ldr	r3, [r7, #4]
   3309e:	0018      	movs	r0, r3
   330a0:	4b07      	ldr	r3, [pc, #28]	; (330c0 <_http_client_handle_entity+0x1a8>)
   330a2:	4798      	blx	r3
		}
	}

	return 0;
   330a4:	2300      	movs	r3, #0
}
   330a6:	0018      	movs	r0, r3
   330a8:	46bd      	mov	sp, r7
   330aa:	b006      	add	sp, #24
   330ac:	bd80      	pop	{r7, pc}
   330ae:	46c0      	nop			; (mov r8, r8)
   330b0:	000320dd 	.word	0x000320dd
   330b4:	000330c5 	.word	0x000330c5
   330b8:	0003ae98 	.word	0x0003ae98
   330bc:	00035a51 	.word	0x00035a51
   330c0:	00032d05 	.word	0x00032d05

000330c4 <_http_client_move_buffer>:

void _http_client_move_buffer(struct http_client_module *const module, char *base)
{
   330c4:	b580      	push	{r7, lr}
   330c6:	b084      	sub	sp, #16
   330c8:	af00      	add	r7, sp, #0
   330ca:	6078      	str	r0, [r7, #4]
   330cc:	6039      	str	r1, [r7, #0]
	char *buffer = module->config.recv_buffer;
   330ce:	687b      	ldr	r3, [r7, #4]
   330d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   330d2:	60fb      	str	r3, [r7, #12]
	int remain = (int)module->recved_size - (int)base + (int)buffer;
   330d4:	687b      	ldr	r3, [r7, #4]
   330d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   330d8:	001a      	movs	r2, r3
   330da:	683b      	ldr	r3, [r7, #0]
   330dc:	1ad2      	subs	r2, r2, r3
   330de:	68fb      	ldr	r3, [r7, #12]
   330e0:	18d3      	adds	r3, r2, r3
   330e2:	60bb      	str	r3, [r7, #8]

	if (remain > 0) {
   330e4:	68bb      	ldr	r3, [r7, #8]
   330e6:	2b00      	cmp	r3, #0
   330e8:	dd09      	ble.n	330fe <_http_client_move_buffer+0x3a>
		memmove(buffer, base, remain);
   330ea:	68ba      	ldr	r2, [r7, #8]
   330ec:	6839      	ldr	r1, [r7, #0]
   330ee:	68fb      	ldr	r3, [r7, #12]
   330f0:	0018      	movs	r0, r3
   330f2:	4b06      	ldr	r3, [pc, #24]	; (3310c <_http_client_move_buffer+0x48>)
   330f4:	4798      	blx	r3
		module->recved_size = remain;
   330f6:	68ba      	ldr	r2, [r7, #8]
   330f8:	687b      	ldr	r3, [r7, #4]
   330fa:	645a      	str	r2, [r3, #68]	; 0x44
	} else {
		module->recved_size = 0;
	}
}
   330fc:	e002      	b.n	33104 <_http_client_move_buffer+0x40>
		module->recved_size = 0;
   330fe:	687b      	ldr	r3, [r7, #4]
   33100:	2200      	movs	r2, #0
   33102:	645a      	str	r2, [r3, #68]	; 0x44
}
   33104:	46c0      	nop			; (mov r8, r8)
   33106:	46bd      	mov	sp, r7
   33108:	b004      	add	sp, #16
   3310a:	bd80      	pop	{r7, pc}
   3310c:	0003580b 	.word	0x0003580b

00033110 <stream_writer_init>:
#include <asf.h>
#include <string.h>
#include "iot/stream_writer.h"

void stream_writer_init(struct stream_writer * writer, char *buffer, size_t max_length, stream_writer_write_func_t func, void *priv_data)
{
   33110:	b580      	push	{r7, lr}
   33112:	b084      	sub	sp, #16
   33114:	af00      	add	r7, sp, #0
   33116:	60f8      	str	r0, [r7, #12]
   33118:	60b9      	str	r1, [r7, #8]
   3311a:	607a      	str	r2, [r7, #4]
   3311c:	603b      	str	r3, [r7, #0]
	writer->max_size = max_length;
   3311e:	68fb      	ldr	r3, [r7, #12]
   33120:	687a      	ldr	r2, [r7, #4]
   33122:	601a      	str	r2, [r3, #0]
	writer->buffer = buffer;
   33124:	68fb      	ldr	r3, [r7, #12]
   33126:	68ba      	ldr	r2, [r7, #8]
   33128:	611a      	str	r2, [r3, #16]
	writer->written = 0;
   3312a:	68fb      	ldr	r3, [r7, #12]
   3312c:	2200      	movs	r2, #0
   3312e:	605a      	str	r2, [r3, #4]
	writer->write_func = func;
   33130:	68fb      	ldr	r3, [r7, #12]
   33132:	683a      	ldr	r2, [r7, #0]
   33134:	609a      	str	r2, [r3, #8]
	writer->priv_data = priv_data;
   33136:	68fb      	ldr	r3, [r7, #12]
   33138:	69ba      	ldr	r2, [r7, #24]
   3313a:	60da      	str	r2, [r3, #12]
}
   3313c:	46c0      	nop			; (mov r8, r8)
   3313e:	46bd      	mov	sp, r7
   33140:	b004      	add	sp, #16
   33142:	bd80      	pop	{r7, pc}

00033144 <stream_writer_send_8>:

void stream_writer_send_8(struct stream_writer * writer, int8_t value)
{
   33144:	b580      	push	{r7, lr}
   33146:	b084      	sub	sp, #16
   33148:	af00      	add	r7, sp, #0
   3314a:	6078      	str	r0, [r7, #4]
   3314c:	000a      	movs	r2, r1
   3314e:	1cfb      	adds	r3, r7, #3
   33150:	701a      	strb	r2, [r3, #0]
	int remain = writer->max_size - writer->written;
   33152:	687b      	ldr	r3, [r7, #4]
   33154:	681a      	ldr	r2, [r3, #0]
   33156:	687b      	ldr	r3, [r7, #4]
   33158:	685b      	ldr	r3, [r3, #4]
   3315a:	1ad3      	subs	r3, r2, r3
   3315c:	60fb      	str	r3, [r7, #12]
	
	if (remain < 1) {
   3315e:	68fb      	ldr	r3, [r7, #12]
   33160:	2b00      	cmp	r3, #0
   33162:	dc03      	bgt.n	3316c <stream_writer_send_8+0x28>
		stream_writer_send_remain(writer);
   33164:	687b      	ldr	r3, [r7, #4]
   33166:	0018      	movs	r0, r3
   33168:	4b08      	ldr	r3, [pc, #32]	; (3318c <stream_writer_send_8+0x48>)
   3316a:	4798      	blx	r3
	}
	
	writer->buffer[writer->written++] = (char)value;
   3316c:	687b      	ldr	r3, [r7, #4]
   3316e:	6919      	ldr	r1, [r3, #16]
   33170:	687b      	ldr	r3, [r7, #4]
   33172:	685b      	ldr	r3, [r3, #4]
   33174:	1c58      	adds	r0, r3, #1
   33176:	687a      	ldr	r2, [r7, #4]
   33178:	6050      	str	r0, [r2, #4]
   3317a:	18cb      	adds	r3, r1, r3
   3317c:	1cfa      	adds	r2, r7, #3
   3317e:	7812      	ldrb	r2, [r2, #0]
   33180:	701a      	strb	r2, [r3, #0]
}
   33182:	46c0      	nop			; (mov r8, r8)
   33184:	46bd      	mov	sp, r7
   33186:	b004      	add	sp, #16
   33188:	bd80      	pop	{r7, pc}
   3318a:	46c0      	nop			; (mov r8, r8)
   3318c:	000331cd 	.word	0x000331cd

00033190 <stream_writer_send_buffer>:
	stream_writer_send_8(writer, (value >> 16) & 0xFF);
	stream_writer_send_8(writer, (value >> 24) & 0xFF);
}

void stream_writer_send_buffer(struct stream_writer * writer, const char *buffer, size_t length)
{
   33190:	b580      	push	{r7, lr}
   33192:	b084      	sub	sp, #16
   33194:	af00      	add	r7, sp, #0
   33196:	60f8      	str	r0, [r7, #12]
   33198:	60b9      	str	r1, [r7, #8]
   3319a:	607a      	str	r2, [r7, #4]
	for (; length > 0; length--, buffer++) {
   3319c:	e00d      	b.n	331ba <stream_writer_send_buffer+0x2a>
		stream_writer_send_8(writer, *buffer);
   3319e:	68bb      	ldr	r3, [r7, #8]
   331a0:	781b      	ldrb	r3, [r3, #0]
   331a2:	b25a      	sxtb	r2, r3
   331a4:	68fb      	ldr	r3, [r7, #12]
   331a6:	0011      	movs	r1, r2
   331a8:	0018      	movs	r0, r3
   331aa:	4b07      	ldr	r3, [pc, #28]	; (331c8 <stream_writer_send_buffer+0x38>)
   331ac:	4798      	blx	r3
	for (; length > 0; length--, buffer++) {
   331ae:	687b      	ldr	r3, [r7, #4]
   331b0:	3b01      	subs	r3, #1
   331b2:	607b      	str	r3, [r7, #4]
   331b4:	68bb      	ldr	r3, [r7, #8]
   331b6:	3301      	adds	r3, #1
   331b8:	60bb      	str	r3, [r7, #8]
   331ba:	687b      	ldr	r3, [r7, #4]
   331bc:	2b00      	cmp	r3, #0
   331be:	d1ee      	bne.n	3319e <stream_writer_send_buffer+0xe>
	}
}
   331c0:	46c0      	nop			; (mov r8, r8)
   331c2:	46bd      	mov	sp, r7
   331c4:	b004      	add	sp, #16
   331c6:	bd80      	pop	{r7, pc}
   331c8:	00033145 	.word	0x00033145

000331cc <stream_writer_send_remain>:

void stream_writer_send_remain(struct stream_writer * writer)
{
   331cc:	b590      	push	{r4, r7, lr}
   331ce:	b083      	sub	sp, #12
   331d0:	af00      	add	r7, sp, #0
   331d2:	6078      	str	r0, [r7, #4]
	if(writer->written > 0) {
   331d4:	687b      	ldr	r3, [r7, #4]
   331d6:	685b      	ldr	r3, [r3, #4]
   331d8:	2b00      	cmp	r3, #0
   331da:	d00c      	beq.n	331f6 <stream_writer_send_remain+0x2a>
		writer->write_func(writer->priv_data, writer->buffer, writer->written);
   331dc:	687b      	ldr	r3, [r7, #4]
   331de:	689c      	ldr	r4, [r3, #8]
   331e0:	687b      	ldr	r3, [r7, #4]
   331e2:	68d8      	ldr	r0, [r3, #12]
   331e4:	687b      	ldr	r3, [r7, #4]
   331e6:	6919      	ldr	r1, [r3, #16]
   331e8:	687b      	ldr	r3, [r7, #4]
   331ea:	685b      	ldr	r3, [r3, #4]
   331ec:	001a      	movs	r2, r3
   331ee:	47a0      	blx	r4
		writer->written = 0;
   331f0:	687b      	ldr	r3, [r7, #4]
   331f2:	2200      	movs	r2, #0
   331f4:	605a      	str	r2, [r3, #4]
	}
}
   331f6:	46c0      	nop			; (mov r8, r8)
   331f8:	46bd      	mov	sp, r7
   331fa:	b003      	add	sp, #12
   331fc:	bd90      	pop	{r4, r7, pc}
	...

00033200 <system_cpu_clock_get_hz>:
{
   33200:	b580      	push	{r7, lr}
   33202:	af00      	add	r7, sp, #0
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) >> PM->CPUSEL.reg);
   33204:	2000      	movs	r0, #0
   33206:	4b05      	ldr	r3, [pc, #20]	; (3321c <system_cpu_clock_get_hz+0x1c>)
   33208:	4798      	blx	r3
   3320a:	0002      	movs	r2, r0
   3320c:	4b04      	ldr	r3, [pc, #16]	; (33220 <system_cpu_clock_get_hz+0x20>)
   3320e:	7a1b      	ldrb	r3, [r3, #8]
   33210:	b2db      	uxtb	r3, r3
   33212:	40da      	lsrs	r2, r3
   33214:	0013      	movs	r3, r2
}
   33216:	0018      	movs	r0, r3
   33218:	46bd      	mov	sp, r7
   3321a:	bd80      	pop	{r7, pc}
   3321c:	0002abe1 	.word	0x0002abe1
   33220:	40000400 	.word	0x40000400

00033224 <tcc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tcc_enable(
		const struct tcc_module *const module_inst)
{
   33224:	b580      	push	{r7, lr}
   33226:	b084      	sub	sp, #16
   33228:	af00      	add	r7, sp, #0
   3322a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	Tcc *const tcc_module = module_inst->hw;
   3322c:	687b      	ldr	r3, [r7, #4]
   3322e:	681b      	ldr	r3, [r3, #0]
   33230:	60fb      	str	r3, [r7, #12]

	while (tcc_module->SYNCBUSY.reg & TCC_SYNCBUSY_ENABLE) {
   33232:	46c0      	nop			; (mov r8, r8)
   33234:	68fb      	ldr	r3, [r7, #12]
   33236:	689b      	ldr	r3, [r3, #8]
   33238:	2202      	movs	r2, #2
   3323a:	4013      	ands	r3, r2
   3323c:	d1fa      	bne.n	33234 <tcc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable the TCC module */
	tcc_module->CTRLA.reg |= TCC_CTRLA_ENABLE;
   3323e:	68fb      	ldr	r3, [r7, #12]
   33240:	681b      	ldr	r3, [r3, #0]
   33242:	2202      	movs	r2, #2
   33244:	431a      	orrs	r2, r3
   33246:	68fb      	ldr	r3, [r7, #12]
   33248:	601a      	str	r2, [r3, #0]
}
   3324a:	46c0      	nop			; (mov r8, r8)
   3324c:	46bd      	mov	sp, r7
   3324e:	b004      	add	sp, #16
   33250:	bd80      	pop	{r7, pc}
	...

00033254 <sw_timer_tcc_callback>:
 *
 * \param[in] module Instance of the TCC.
 */
#if (SAMD21)
static void sw_timer_tcc_callback(struct tcc_module *const module)
{
   33254:	b580      	push	{r7, lr}
   33256:	b082      	sub	sp, #8
   33258:	af00      	add	r7, sp, #0
   3325a:	6078      	str	r0, [r7, #4]
	sw_timer_tick++;
   3325c:	4b04      	ldr	r3, [pc, #16]	; (33270 <sw_timer_tcc_callback+0x1c>)
   3325e:	681b      	ldr	r3, [r3, #0]
   33260:	1c5a      	adds	r2, r3, #1
   33262:	4b03      	ldr	r3, [pc, #12]	; (33270 <sw_timer_tcc_callback+0x1c>)
   33264:	601a      	str	r2, [r3, #0]
}
   33266:	46c0      	nop			; (mov r8, r8)
   33268:	46bd      	mov	sp, r7
   3326a:	b002      	add	sp, #8
   3326c:	bd80      	pop	{r7, pc}
   3326e:	46c0      	nop			; (mov r8, r8)
   33270:	20004710 	.word	0x20004710

00033274 <sw_timer_get_config_defaults>:
}

#endif

void sw_timer_get_config_defaults(struct sw_timer_config *const config)
{
   33274:	b580      	push	{r7, lr}
   33276:	b082      	sub	sp, #8
   33278:	af00      	add	r7, sp, #0
   3327a:	6078      	str	r0, [r7, #4]
	Assert(config);

	config->accuracy = 100;
   3327c:	687b      	ldr	r3, [r7, #4]
   3327e:	2264      	movs	r2, #100	; 0x64
   33280:	805a      	strh	r2, [r3, #2]
	config->tcc_dev = 0;
   33282:	687b      	ldr	r3, [r7, #4]
   33284:	2200      	movs	r2, #0
   33286:	701a      	strb	r2, [r3, #0]
	config->tcc_callback_channel = 0;
   33288:	687b      	ldr	r3, [r7, #4]
   3328a:	2200      	movs	r2, #0
   3328c:	705a      	strb	r2, [r3, #1]
}
   3328e:	46c0      	nop			; (mov r8, r8)
   33290:	46bd      	mov	sp, r7
   33292:	b002      	add	sp, #8
   33294:	bd80      	pop	{r7, pc}
	...

00033298 <sw_timer_init>:

void sw_timer_init(struct sw_timer_module *const module_inst, struct sw_timer_config *const config)
{
   33298:	b590      	push	{r4, r7, lr}
   3329a:	b0b1      	sub	sp, #196	; 0xc4
   3329c:	af00      	add	r7, sp, #0
   3329e:	6078      	str	r0, [r7, #4]
   332a0:	6039      	str	r1, [r7, #0]
#if (SAMD21)
	struct tcc_config tcc_conf;
	struct tcc_module *tcc_module;
	Tcc *hw[] = TCC_INSTS;
   332a2:	230c      	movs	r3, #12
   332a4:	18fb      	adds	r3, r7, r3
   332a6:	4a2e      	ldr	r2, [pc, #184]	; (33360 <sw_timer_init+0xc8>)
   332a8:	ca13      	ldmia	r2!, {r0, r1, r4}
   332aa:	c313      	stmia	r3!, {r0, r1, r4}
	Assert(module_inst);
	Assert(config);
	Assert(config->tcc_dev < TCC_INST_NUM);
	Assert(config->tcc_callback_channel < TCC_NUM_CHANNELS);

	module_inst->accuracy = config->accuracy;
   332ac:	683b      	ldr	r3, [r7, #0]
   332ae:	885b      	ldrh	r3, [r3, #2]
   332b0:	001a      	movs	r2, r3
   332b2:	687b      	ldr	r3, [r7, #4]
   332b4:	655a      	str	r2, [r3, #84]	; 0x54
#if (SAMD21)
	/* Start the TCC module. */
	tcc_module = &module_inst->tcc_inst;
   332b6:	687b      	ldr	r3, [r7, #4]
   332b8:	3314      	adds	r3, #20
   332ba:	22bc      	movs	r2, #188	; 0xbc
   332bc:	18ba      	adds	r2, r7, r2
   332be:	6013      	str	r3, [r2, #0]
	tcc_get_config_defaults(&tcc_conf, hw[config->tcc_dev]);
   332c0:	683b      	ldr	r3, [r7, #0]
   332c2:	781b      	ldrb	r3, [r3, #0]
   332c4:	001a      	movs	r2, r3
   332c6:	230c      	movs	r3, #12
   332c8:	18fb      	adds	r3, r7, r3
   332ca:	0092      	lsls	r2, r2, #2
   332cc:	58d2      	ldr	r2, [r2, r3]
   332ce:	2318      	movs	r3, #24
   332d0:	18fb      	adds	r3, r7, r3
   332d2:	0011      	movs	r1, r2
   332d4:	0018      	movs	r0, r3
   332d6:	4b23      	ldr	r3, [pc, #140]	; (33364 <sw_timer_init+0xcc>)
   332d8:	4798      	blx	r3
	tcc_conf.counter.period = system_cpu_clock_get_hz() / (64 * 1000 / config->accuracy);
   332da:	4b23      	ldr	r3, [pc, #140]	; (33368 <sw_timer_init+0xd0>)
   332dc:	4798      	blx	r3
   332de:	0004      	movs	r4, r0
   332e0:	683b      	ldr	r3, [r7, #0]
   332e2:	885b      	ldrh	r3, [r3, #2]
   332e4:	001a      	movs	r2, r3
   332e6:	4b21      	ldr	r3, [pc, #132]	; (3336c <sw_timer_init+0xd4>)
   332e8:	0011      	movs	r1, r2
   332ea:	22fa      	movs	r2, #250	; 0xfa
   332ec:	0210      	lsls	r0, r2, #8
   332ee:	4798      	blx	r3
   332f0:	0003      	movs	r3, r0
   332f2:	001a      	movs	r2, r3
   332f4:	4b1e      	ldr	r3, [pc, #120]	; (33370 <sw_timer_init+0xd8>)
   332f6:	0011      	movs	r1, r2
   332f8:	0020      	movs	r0, r4
   332fa:	4798      	blx	r3
   332fc:	0003      	movs	r3, r0
   332fe:	001a      	movs	r2, r3
   33300:	2318      	movs	r3, #24
   33302:	18fb      	adds	r3, r7, r3
   33304:	605a      	str	r2, [r3, #4]
	tcc_conf.counter.clock_prescaler = TCC_CLOCK_PRESCALER_DIV64;
   33306:	2318      	movs	r3, #24
   33308:	18fb      	adds	r3, r7, r3
   3330a:	2205      	movs	r2, #5
   3330c:	72da      	strb	r2, [r3, #11]
	tcc_init(tcc_module, hw[config->tcc_dev], &tcc_conf);
   3330e:	683b      	ldr	r3, [r7, #0]
   33310:	781b      	ldrb	r3, [r3, #0]
   33312:	001a      	movs	r2, r3
   33314:	230c      	movs	r3, #12
   33316:	18fb      	adds	r3, r7, r3
   33318:	0092      	lsls	r2, r2, #2
   3331a:	58d1      	ldr	r1, [r2, r3]
   3331c:	2318      	movs	r3, #24
   3331e:	18fa      	adds	r2, r7, r3
   33320:	23bc      	movs	r3, #188	; 0xbc
   33322:	18fb      	adds	r3, r7, r3
   33324:	681b      	ldr	r3, [r3, #0]
   33326:	0018      	movs	r0, r3
   33328:	4b12      	ldr	r3, [pc, #72]	; (33374 <sw_timer_init+0xdc>)
   3332a:	4798      	blx	r3
	tcc_register_callback(tcc_module, sw_timer_tcc_callback, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   3332c:	683b      	ldr	r3, [r7, #0]
   3332e:	785b      	ldrb	r3, [r3, #1]
   33330:	3308      	adds	r3, #8
   33332:	b2da      	uxtb	r2, r3
   33334:	4910      	ldr	r1, [pc, #64]	; (33378 <sw_timer_init+0xe0>)
   33336:	23bc      	movs	r3, #188	; 0xbc
   33338:	18fb      	adds	r3, r7, r3
   3333a:	681b      	ldr	r3, [r3, #0]
   3333c:	0018      	movs	r0, r3
   3333e:	4b0f      	ldr	r3, [pc, #60]	; (3337c <sw_timer_init+0xe4>)
   33340:	4798      	blx	r3
	tcc_enable_callback(tcc_module, config->tcc_callback_channel + TCC_CALLBACK_CHANNEL_0);
   33342:	683b      	ldr	r3, [r7, #0]
   33344:	785b      	ldrb	r3, [r3, #1]
   33346:	3308      	adds	r3, #8
   33348:	b2da      	uxtb	r2, r3
   3334a:	23bc      	movs	r3, #188	; 0xbc
   3334c:	18fb      	adds	r3, r7, r3
   3334e:	681b      	ldr	r3, [r3, #0]
   33350:	0011      	movs	r1, r2
   33352:	0018      	movs	r0, r3
   33354:	4b0a      	ldr	r3, [pc, #40]	; (33380 <sw_timer_init+0xe8>)
   33356:	4798      	blx	r3

	ul_previous_time = rtt_read_timer_value(RTT);
	while (ul_previous_time == rtt_read_timer_value(RTT)) {
	}
#endif
}
   33358:	46c0      	nop			; (mov r8, r8)
   3335a:	46bd      	mov	sp, r7
   3335c:	b031      	add	sp, #196	; 0xc4
   3335e:	bd90      	pop	{r4, r7, pc}
   33360:	0003aed8 	.word	0x0003aed8
   33364:	0002b179 	.word	0x0002b179
   33368:	00033201 	.word	0x00033201
   3336c:	00033969 	.word	0x00033969
   33370:	00033855 	.word	0x00033855
   33374:	0002b7d5 	.word	0x0002b7d5
   33378:	00033255 	.word	0x00033255
   3337c:	0002bbed 	.word	0x0002bbed
   33380:	0002bc2d 	.word	0x0002bc2d

00033384 <sw_timer_enable>:

void sw_timer_enable(struct sw_timer_module *const module_inst)
{
   33384:	b580      	push	{r7, lr}
   33386:	b084      	sub	sp, #16
   33388:	af00      	add	r7, sp, #0
   3338a:	6078      	str	r0, [r7, #4]
	struct tcc_module *tcc_module;
#endif

	Assert(module_inst);
#if (SAMD21)
	tcc_module = &module_inst->tcc_inst;
   3338c:	687b      	ldr	r3, [r7, #4]
   3338e:	3314      	adds	r3, #20
   33390:	60fb      	str	r3, [r7, #12]

	tcc_enable(tcc_module);
   33392:	68fb      	ldr	r3, [r7, #12]
   33394:	0018      	movs	r0, r3
   33396:	4b03      	ldr	r3, [pc, #12]	; (333a4 <sw_timer_enable+0x20>)
   33398:	4798      	blx	r3
	NVIC_ClearPendingIRQ(RTT_IRQn);
	NVIC_SetPriority(RTT_IRQn, 0);
	NVIC_EnableIRQ(RTT_IRQn);
	rtt_enable_interrupt(RTT, RTT_MR_RTTINCIEN);
#endif
}
   3339a:	46c0      	nop			; (mov r8, r8)
   3339c:	46bd      	mov	sp, r7
   3339e:	b004      	add	sp, #16
   333a0:	bd80      	pop	{r7, pc}
   333a2:	46c0      	nop			; (mov r8, r8)
   333a4:	00033225 	.word	0x00033225

000333a8 <sw_timer_register_callback>:
#endif
}

int sw_timer_register_callback(struct sw_timer_module *const module_inst,
		sw_timer_callback_t callback, void *context, uint32_t period)
{
   333a8:	b580      	push	{r7, lr}
   333aa:	b086      	sub	sp, #24
   333ac:	af00      	add	r7, sp, #0
   333ae:	60f8      	str	r0, [r7, #12]
   333b0:	60b9      	str	r1, [r7, #8]
   333b2:	607a      	str	r2, [r7, #4]
   333b4:	603b      	str	r3, [r7, #0]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   333b6:	2300      	movs	r3, #0
   333b8:	617b      	str	r3, [r7, #20]
   333ba:	e032      	b.n	33422 <sw_timer_register_callback+0x7a>
		if (module_inst->handler[index].used == 0) {
   333bc:	68f9      	ldr	r1, [r7, #12]
   333be:	697a      	ldr	r2, [r7, #20]
   333c0:	0013      	movs	r3, r2
   333c2:	009b      	lsls	r3, r3, #2
   333c4:	189b      	adds	r3, r3, r2
   333c6:	009b      	lsls	r3, r3, #2
   333c8:	5c5b      	ldrb	r3, [r3, r1]
   333ca:	07db      	lsls	r3, r3, #31
   333cc:	0fdb      	lsrs	r3, r3, #31
   333ce:	b2db      	uxtb	r3, r3
   333d0:	2b00      	cmp	r3, #0
   333d2:	d123      	bne.n	3341c <sw_timer_register_callback+0x74>
			handler = &module_inst->handler[index];
   333d4:	697a      	ldr	r2, [r7, #20]
   333d6:	0013      	movs	r3, r2
   333d8:	009b      	lsls	r3, r3, #2
   333da:	189b      	adds	r3, r3, r2
   333dc:	009b      	lsls	r3, r3, #2
   333de:	68fa      	ldr	r2, [r7, #12]
   333e0:	18d3      	adds	r3, r2, r3
   333e2:	613b      	str	r3, [r7, #16]
			handler->callback = callback;
   333e4:	693b      	ldr	r3, [r7, #16]
   333e6:	68ba      	ldr	r2, [r7, #8]
   333e8:	605a      	str	r2, [r3, #4]
			handler->callback_enable = 0;
   333ea:	693b      	ldr	r3, [r7, #16]
   333ec:	781a      	ldrb	r2, [r3, #0]
   333ee:	2102      	movs	r1, #2
   333f0:	438a      	bics	r2, r1
   333f2:	701a      	strb	r2, [r3, #0]
			handler->context = context;
   333f4:	693b      	ldr	r3, [r7, #16]
   333f6:	687a      	ldr	r2, [r7, #4]
   333f8:	609a      	str	r2, [r3, #8]
			handler->period = period / module_inst->accuracy;
   333fa:	68fb      	ldr	r3, [r7, #12]
   333fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   333fe:	4b0d      	ldr	r3, [pc, #52]	; (33434 <sw_timer_register_callback+0x8c>)
   33400:	0011      	movs	r1, r2
   33402:	6838      	ldr	r0, [r7, #0]
   33404:	4798      	blx	r3
   33406:	0003      	movs	r3, r0
   33408:	001a      	movs	r2, r3
   3340a:	693b      	ldr	r3, [r7, #16]
   3340c:	60da      	str	r2, [r3, #12]
			handler->used = 1;
   3340e:	693b      	ldr	r3, [r7, #16]
   33410:	781a      	ldrb	r2, [r3, #0]
   33412:	2101      	movs	r1, #1
   33414:	430a      	orrs	r2, r1
   33416:	701a      	strb	r2, [r3, #0]
			return index;
   33418:	697b      	ldr	r3, [r7, #20]
   3341a:	e007      	b.n	3342c <sw_timer_register_callback+0x84>
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   3341c:	697b      	ldr	r3, [r7, #20]
   3341e:	3301      	adds	r3, #1
   33420:	617b      	str	r3, [r7, #20]
   33422:	697b      	ldr	r3, [r7, #20]
   33424:	2b00      	cmp	r3, #0
   33426:	ddc9      	ble.n	333bc <sw_timer_register_callback+0x14>
		}
	}
	return -1;
   33428:	2301      	movs	r3, #1
   3342a:	425b      	negs	r3, r3
}
   3342c:	0018      	movs	r0, r3
   3342e:	46bd      	mov	sp, r7
   33430:	b006      	add	sp, #24
   33432:	bd80      	pop	{r7, pc}
   33434:	00033855 	.word	0x00033855

00033438 <sw_timer_enable_callback>:

	handler->used = 0;
}

void sw_timer_enable_callback(struct sw_timer_module *const module_inst, int timer_id, uint32_t delay)
{
   33438:	b580      	push	{r7, lr}
   3343a:	b086      	sub	sp, #24
   3343c:	af00      	add	r7, sp, #0
   3343e:	60f8      	str	r0, [r7, #12]
   33440:	60b9      	str	r1, [r7, #8]
   33442:	607a      	str	r2, [r7, #4]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   33444:	68ba      	ldr	r2, [r7, #8]
   33446:	0013      	movs	r3, r2
   33448:	009b      	lsls	r3, r3, #2
   3344a:	189b      	adds	r3, r3, r2
   3344c:	009b      	lsls	r3, r3, #2
   3344e:	68fa      	ldr	r2, [r7, #12]
   33450:	18d3      	adds	r3, r2, r3
   33452:	617b      	str	r3, [r7, #20]

	handler->callback_enable = 1;
   33454:	697b      	ldr	r3, [r7, #20]
   33456:	781a      	ldrb	r2, [r3, #0]
   33458:	2102      	movs	r1, #2
   3345a:	430a      	orrs	r2, r1
   3345c:	701a      	strb	r2, [r3, #0]
	handler->expire_time = sw_timer_tick + (delay / module_inst->accuracy);
   3345e:	68fb      	ldr	r3, [r7, #12]
   33460:	6d5a      	ldr	r2, [r3, #84]	; 0x54
   33462:	4b07      	ldr	r3, [pc, #28]	; (33480 <sw_timer_enable_callback+0x48>)
   33464:	0011      	movs	r1, r2
   33466:	6878      	ldr	r0, [r7, #4]
   33468:	4798      	blx	r3
   3346a:	0003      	movs	r3, r0
   3346c:	001a      	movs	r2, r3
   3346e:	4b05      	ldr	r3, [pc, #20]	; (33484 <sw_timer_enable_callback+0x4c>)
   33470:	681b      	ldr	r3, [r3, #0]
   33472:	18d2      	adds	r2, r2, r3
   33474:	697b      	ldr	r3, [r7, #20]
   33476:	611a      	str	r2, [r3, #16]
}
   33478:	46c0      	nop			; (mov r8, r8)
   3347a:	46bd      	mov	sp, r7
   3347c:	b006      	add	sp, #24
   3347e:	bd80      	pop	{r7, pc}
   33480:	00033855 	.word	0x00033855
   33484:	20004710 	.word	0x20004710

00033488 <sw_timer_disable_callback>:

void sw_timer_disable_callback(struct sw_timer_module *const module_inst, int timer_id)
{
   33488:	b580      	push	{r7, lr}
   3348a:	b084      	sub	sp, #16
   3348c:	af00      	add	r7, sp, #0
   3348e:	6078      	str	r0, [r7, #4]
   33490:	6039      	str	r1, [r7, #0]
	struct sw_timer_handle *handler;

	Assert(module_inst);
	Assert((timer_id >= 0 && timer_id < CONF_SW_TIMER_COUNT));

	handler = &module_inst->handler[timer_id];
   33492:	683a      	ldr	r2, [r7, #0]
   33494:	0013      	movs	r3, r2
   33496:	009b      	lsls	r3, r3, #2
   33498:	189b      	adds	r3, r3, r2
   3349a:	009b      	lsls	r3, r3, #2
   3349c:	687a      	ldr	r2, [r7, #4]
   3349e:	18d3      	adds	r3, r2, r3
   334a0:	60fb      	str	r3, [r7, #12]

	handler->callback_enable = 0;
   334a2:	68fb      	ldr	r3, [r7, #12]
   334a4:	781a      	ldrb	r2, [r3, #0]
   334a6:	2102      	movs	r1, #2
   334a8:	438a      	bics	r2, r1
   334aa:	701a      	strb	r2, [r3, #0]
}
   334ac:	46c0      	nop			; (mov r8, r8)
   334ae:	46bd      	mov	sp, r7
   334b0:	b004      	add	sp, #16
   334b2:	bd80      	pop	{r7, pc}

000334b4 <sw_timer_task>:

void sw_timer_task(struct sw_timer_module *const module_inst)
{
   334b4:	b590      	push	{r4, r7, lr}
   334b6:	b085      	sub	sp, #20
   334b8:	af00      	add	r7, sp, #0
   334ba:	6078      	str	r0, [r7, #4]
	int index;
	struct sw_timer_handle *handler;

	Assert(module_inst);

	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   334bc:	2300      	movs	r3, #0
   334be:	60fb      	str	r3, [r7, #12]
   334c0:	e053      	b.n	3356a <sw_timer_task+0xb6>
		if (module_inst->handler[index].used && module_inst->handler[index].callback_enable) {
   334c2:	6879      	ldr	r1, [r7, #4]
   334c4:	68fa      	ldr	r2, [r7, #12]
   334c6:	0013      	movs	r3, r2
   334c8:	009b      	lsls	r3, r3, #2
   334ca:	189b      	adds	r3, r3, r2
   334cc:	009b      	lsls	r3, r3, #2
   334ce:	5c5b      	ldrb	r3, [r3, r1]
   334d0:	07db      	lsls	r3, r3, #31
   334d2:	0fdb      	lsrs	r3, r3, #31
   334d4:	b2db      	uxtb	r3, r3
   334d6:	2b00      	cmp	r3, #0
   334d8:	d044      	beq.n	33564 <sw_timer_task+0xb0>
   334da:	6879      	ldr	r1, [r7, #4]
   334dc:	68fa      	ldr	r2, [r7, #12]
   334de:	0013      	movs	r3, r2
   334e0:	009b      	lsls	r3, r3, #2
   334e2:	189b      	adds	r3, r3, r2
   334e4:	009b      	lsls	r3, r3, #2
   334e6:	5c5b      	ldrb	r3, [r3, r1]
   334e8:	079b      	lsls	r3, r3, #30
   334ea:	0fdb      	lsrs	r3, r3, #31
   334ec:	b2db      	uxtb	r3, r3
   334ee:	2b00      	cmp	r3, #0
   334f0:	d038      	beq.n	33564 <sw_timer_task+0xb0>
			handler = &module_inst->handler[index];
   334f2:	68fa      	ldr	r2, [r7, #12]
   334f4:	0013      	movs	r3, r2
   334f6:	009b      	lsls	r3, r3, #2
   334f8:	189b      	adds	r3, r3, r2
   334fa:	009b      	lsls	r3, r3, #2
   334fc:	687a      	ldr	r2, [r7, #4]
   334fe:	18d3      	adds	r3, r2, r3
   33500:	60bb      	str	r3, [r7, #8]
			if ((int)(handler->expire_time - sw_timer_tick) < 0 && handler->busy == 0) {
   33502:	68bb      	ldr	r3, [r7, #8]
   33504:	691a      	ldr	r2, [r3, #16]
   33506:	4b1c      	ldr	r3, [pc, #112]	; (33578 <sw_timer_task+0xc4>)
   33508:	681b      	ldr	r3, [r3, #0]
   3350a:	1ad3      	subs	r3, r2, r3
   3350c:	d52a      	bpl.n	33564 <sw_timer_task+0xb0>
   3350e:	68bb      	ldr	r3, [r7, #8]
   33510:	781b      	ldrb	r3, [r3, #0]
   33512:	2204      	movs	r2, #4
   33514:	4013      	ands	r3, r2
   33516:	b2db      	uxtb	r3, r3
   33518:	2b00      	cmp	r3, #0
   3351a:	d123      	bne.n	33564 <sw_timer_task+0xb0>
				/* Enter critical section. */
				handler->busy = 1;
   3351c:	68bb      	ldr	r3, [r7, #8]
   3351e:	781a      	ldrb	r2, [r3, #0]
   33520:	2104      	movs	r1, #4
   33522:	430a      	orrs	r2, r1
   33524:	701a      	strb	r2, [r3, #0]
				/* Timer was expired. */
				if (handler->period > 0) {
   33526:	68bb      	ldr	r3, [r7, #8]
   33528:	68db      	ldr	r3, [r3, #12]
   3352a:	2b00      	cmp	r3, #0
   3352c:	d007      	beq.n	3353e <sw_timer_task+0x8a>
					handler->expire_time = sw_timer_tick + handler->period;
   3352e:	68bb      	ldr	r3, [r7, #8]
   33530:	68da      	ldr	r2, [r3, #12]
   33532:	4b11      	ldr	r3, [pc, #68]	; (33578 <sw_timer_task+0xc4>)
   33534:	681b      	ldr	r3, [r3, #0]
   33536:	18d2      	adds	r2, r2, r3
   33538:	68bb      	ldr	r3, [r7, #8]
   3353a:	611a      	str	r2, [r3, #16]
   3353c:	e004      	b.n	33548 <sw_timer_task+0x94>
				} else {
					/* One shot. */
					handler->callback_enable = 0;
   3353e:	68bb      	ldr	r3, [r7, #8]
   33540:	781a      	ldrb	r2, [r3, #0]
   33542:	2102      	movs	r1, #2
   33544:	438a      	bics	r2, r1
   33546:	701a      	strb	r2, [r3, #0]
				}
				/* Call callback function. */
				handler->callback(module_inst, index, handler->context, handler->period);
   33548:	68bb      	ldr	r3, [r7, #8]
   3354a:	685c      	ldr	r4, [r3, #4]
   3354c:	68bb      	ldr	r3, [r7, #8]
   3354e:	689a      	ldr	r2, [r3, #8]
   33550:	68bb      	ldr	r3, [r7, #8]
   33552:	68db      	ldr	r3, [r3, #12]
   33554:	68f9      	ldr	r1, [r7, #12]
   33556:	6878      	ldr	r0, [r7, #4]
   33558:	47a0      	blx	r4
				/* Leave critical section. */
				handler->busy = 0;
   3355a:	68bb      	ldr	r3, [r7, #8]
   3355c:	781a      	ldrb	r2, [r3, #0]
   3355e:	2104      	movs	r1, #4
   33560:	438a      	bics	r2, r1
   33562:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < CONF_SW_TIMER_COUNT; index++) {
   33564:	68fb      	ldr	r3, [r7, #12]
   33566:	3301      	adds	r3, #1
   33568:	60fb      	str	r3, [r7, #12]
   3356a:	68fb      	ldr	r3, [r7, #12]
   3356c:	2b00      	cmp	r3, #0
   3356e:	dda8      	ble.n	334c2 <sw_timer_task+0xe>
			}
		}
	}
}
   33570:	46c0      	nop			; (mov r8, r8)
   33572:	46bd      	mov	sp, r7
   33574:	b005      	add	sp, #20
   33576:	bd90      	pop	{r4, r7, pc}
   33578:	20004710 	.word	0x20004710

0003357c <main>:
 * @brief Main application function.
 * Application entry point.
 * @return int
 */
int main(void)
{
   3357c:	b580      	push	{r7, lr}
   3357e:	af00      	add	r7, sp, #0
    /* Initialize the board. */
    system_init();
   33580:	4b06      	ldr	r3, [pc, #24]	; (3359c <main+0x20>)
   33582:	4798      	blx	r3

    /* Initialize the UART console. */
    InitializeSerialConsole();
   33584:	4b06      	ldr	r3, [pc, #24]	; (335a0 <main+0x24>)
   33586:	4798      	blx	r3

    // Initialize trace capabilities
    vTraceEnable(TRC_START);
   33588:	2001      	movs	r0, #1
   3358a:	4b06      	ldr	r3, [pc, #24]	; (335a4 <main+0x28>)
   3358c:	4798      	blx	r3
    // Start FreeRTOS scheduler
    vTaskStartScheduler();
   3358e:	4b06      	ldr	r3, [pc, #24]	; (335a8 <main+0x2c>)
   33590:	4798      	blx	r3

    return 0;  // Will not get here
   33592:	2300      	movs	r3, #0
}
   33594:	0018      	movs	r0, r3
   33596:	46bd      	mov	sp, r7
   33598:	bd80      	pop	{r7, pc}
   3359a:	46c0      	nop			; (mov r8, r8)
   3359c:	0002b06d 	.word	0x0002b06d
   335a0:	0001eb75 	.word	0x0001eb75
   335a4:	00019245 	.word	0x00019245
   335a8:	0001d1cd 	.word	0x0001d1cd

000335ac <vApplicationDaemonTaskStartupHook>:
 *					here will be called before other tasks are initilized.
 * @param[in]        None
 * @return           None
 */
void vApplicationDaemonTaskStartupHook(void)
{
   335ac:	b580      	push	{r7, lr}
   335ae:	b082      	sub	sp, #8
   335b0:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("\r\n\r\n-----ESE516 Main Program-----\r\n");
   335b2:	4b29      	ldr	r3, [pc, #164]	; (33658 <vApplicationDaemonTaskStartupHook+0xac>)
   335b4:	0018      	movs	r0, r3
   335b6:	4b29      	ldr	r3, [pc, #164]	; (3365c <vApplicationDaemonTaskStartupHook+0xb0>)
   335b8:	4798      	blx	r3

    // Initialize HW that needs FreeRTOS Initialization
    SerialConsoleWriteString("\r\n\r\nInitialize HW...\r\n");
   335ba:	4b29      	ldr	r3, [pc, #164]	; (33660 <vApplicationDaemonTaskStartupHook+0xb4>)
   335bc:	0018      	movs	r0, r3
   335be:	4b27      	ldr	r3, [pc, #156]	; (3365c <vApplicationDaemonTaskStartupHook+0xb0>)
   335c0:	4798      	blx	r3
    if (I2cInitializeDriver() != STATUS_OK) {
   335c2:	4b28      	ldr	r3, [pc, #160]	; (33664 <vApplicationDaemonTaskStartupHook+0xb8>)
   335c4:	4798      	blx	r3
   335c6:	1e03      	subs	r3, r0, #0
   335c8:	d004      	beq.n	335d4 <vApplicationDaemonTaskStartupHook+0x28>
        SerialConsoleWriteString("Error initializing I2C Driver!\r\n");
   335ca:	4b27      	ldr	r3, [pc, #156]	; (33668 <vApplicationDaemonTaskStartupHook+0xbc>)
   335cc:	0018      	movs	r0, r3
   335ce:	4b23      	ldr	r3, [pc, #140]	; (3365c <vApplicationDaemonTaskStartupHook+0xb0>)
   335d0:	4798      	blx	r3
   335d2:	e003      	b.n	335dc <vApplicationDaemonTaskStartupHook+0x30>
    } else {
        SerialConsoleWriteString("Initialized I2C Driver!\r\n");
   335d4:	4b25      	ldr	r3, [pc, #148]	; (3366c <vApplicationDaemonTaskStartupHook+0xc0>)
   335d6:	0018      	movs	r0, r3
   335d8:	4b20      	ldr	r3, [pc, #128]	; (3365c <vApplicationDaemonTaskStartupHook+0xb0>)
   335da:	4798      	blx	r3
    }

    if (0 != InitializeSeesaw()) {
   335dc:	4b24      	ldr	r3, [pc, #144]	; (33670 <vApplicationDaemonTaskStartupHook+0xc4>)
   335de:	4798      	blx	r3
   335e0:	1e03      	subs	r3, r0, #0
   335e2:	d004      	beq.n	335ee <vApplicationDaemonTaskStartupHook+0x42>
        SerialConsoleWriteString("Error initializing Seesaw!\r\n");
   335e4:	4b23      	ldr	r3, [pc, #140]	; (33674 <vApplicationDaemonTaskStartupHook+0xc8>)
   335e6:	0018      	movs	r0, r3
   335e8:	4b1c      	ldr	r3, [pc, #112]	; (3365c <vApplicationDaemonTaskStartupHook+0xb0>)
   335ea:	4798      	blx	r3
   335ec:	e003      	b.n	335f6 <vApplicationDaemonTaskStartupHook+0x4a>
    } else {
        SerialConsoleWriteString("Initialized Seesaw!\r\n");
   335ee:	4b22      	ldr	r3, [pc, #136]	; (33678 <vApplicationDaemonTaskStartupHook+0xcc>)
   335f0:	0018      	movs	r0, r3
   335f2:	4b1a      	ldr	r3, [pc, #104]	; (3365c <vApplicationDaemonTaskStartupHook+0xb0>)
   335f4:	4798      	blx	r3
    }

    uint8_t whoamI = 0;
   335f6:	1dfb      	adds	r3, r7, #7
   335f8:	2200      	movs	r2, #0
   335fa:	701a      	strb	r2, [r3, #0]
    (lsm6dso_device_id_get(GetImuStruct(), &whoamI));
   335fc:	4b1f      	ldr	r3, [pc, #124]	; (3367c <vApplicationDaemonTaskStartupHook+0xd0>)
   335fe:	4798      	blx	r3
   33600:	0002      	movs	r2, r0
   33602:	1dfb      	adds	r3, r7, #7
   33604:	0019      	movs	r1, r3
   33606:	0010      	movs	r0, r2
   33608:	4b1d      	ldr	r3, [pc, #116]	; (33680 <vApplicationDaemonTaskStartupHook+0xd4>)
   3360a:	4798      	blx	r3

    if (whoamI != LSM6DSO_ID) {
   3360c:	1dfb      	adds	r3, r7, #7
   3360e:	781b      	ldrb	r3, [r3, #0]
   33610:	2b6c      	cmp	r3, #108	; 0x6c
   33612:	d004      	beq.n	3361e <vApplicationDaemonTaskStartupHook+0x72>
        SerialConsoleWriteString("Cannot find IMU!\r\n");
   33614:	4b1b      	ldr	r3, [pc, #108]	; (33684 <vApplicationDaemonTaskStartupHook+0xd8>)
   33616:	0018      	movs	r0, r3
   33618:	4b10      	ldr	r3, [pc, #64]	; (3365c <vApplicationDaemonTaskStartupHook+0xb0>)
   3361a:	4798      	blx	r3
   3361c:	e010      	b.n	33640 <vApplicationDaemonTaskStartupHook+0x94>
    } else {
        SerialConsoleWriteString("IMU found!\r\n");
   3361e:	4b1a      	ldr	r3, [pc, #104]	; (33688 <vApplicationDaemonTaskStartupHook+0xdc>)
   33620:	0018      	movs	r0, r3
   33622:	4b0e      	ldr	r3, [pc, #56]	; (3365c <vApplicationDaemonTaskStartupHook+0xb0>)
   33624:	4798      	blx	r3
        if (InitImu() == 0) {
   33626:	4b19      	ldr	r3, [pc, #100]	; (3368c <vApplicationDaemonTaskStartupHook+0xe0>)
   33628:	4798      	blx	r3
   3362a:	1e03      	subs	r3, r0, #0
   3362c:	d104      	bne.n	33638 <vApplicationDaemonTaskStartupHook+0x8c>
            SerialConsoleWriteString("IMU initialized!\r\n");
   3362e:	4b18      	ldr	r3, [pc, #96]	; (33690 <vApplicationDaemonTaskStartupHook+0xe4>)
   33630:	0018      	movs	r0, r3
   33632:	4b0a      	ldr	r3, [pc, #40]	; (3365c <vApplicationDaemonTaskStartupHook+0xb0>)
   33634:	4798      	blx	r3
   33636:	e003      	b.n	33640 <vApplicationDaemonTaskStartupHook+0x94>
        } else {
            SerialConsoleWriteString("Could not initialize IMU\r\n");
   33638:	4b16      	ldr	r3, [pc, #88]	; (33694 <vApplicationDaemonTaskStartupHook+0xe8>)
   3363a:	0018      	movs	r0, r3
   3363c:	4b07      	ldr	r3, [pc, #28]	; (3365c <vApplicationDaemonTaskStartupHook+0xb0>)
   3363e:	4798      	blx	r3
    SerialConsoleWriteString("Initializing distance sensor\r\n");
    InitializeDistanceSensor();
    SerialConsoleWriteString("Distance sensor initialized\r\n");
	*/

    StartTasks();
   33640:	4b15      	ldr	r3, [pc, #84]	; (33698 <vApplicationDaemonTaskStartupHook+0xec>)
   33642:	4798      	blx	r3

    vTaskSuspend(daemonTaskHandle);
   33644:	4b15      	ldr	r3, [pc, #84]	; (3369c <vApplicationDaemonTaskStartupHook+0xf0>)
   33646:	681b      	ldr	r3, [r3, #0]
   33648:	0018      	movs	r0, r3
   3364a:	4b15      	ldr	r3, [pc, #84]	; (336a0 <vApplicationDaemonTaskStartupHook+0xf4>)
   3364c:	4798      	blx	r3
}
   3364e:	46c0      	nop			; (mov r8, r8)
   33650:	46bd      	mov	sp, r7
   33652:	b002      	add	sp, #8
   33654:	bd80      	pop	{r7, pc}
   33656:	46c0      	nop			; (mov r8, r8)
   33658:	0003aee4 	.word	0x0003aee4
   3365c:	0001ebe5 	.word	0x0001ebe5
   33660:	0003af08 	.word	0x0003af08
   33664:	00014ed9 	.word	0x00014ed9
   33668:	0003af20 	.word	0x0003af20
   3366c:	0003af44 	.word	0x0003af44
   33670:	000161d9 	.word	0x000161d9
   33674:	0003af60 	.word	0x0003af60
   33678:	0003af80 	.word	0x0003af80
   3367c:	00016101 	.word	0x00016101
   33680:	00015c45 	.word	0x00015c45
   33684:	0003af98 	.word	0x0003af98
   33688:	0003afac 	.word	0x0003afac
   3368c:	00016111 	.word	0x00016111
   33690:	0003afbc 	.word	0x0003afbc
   33694:	0003afd0 	.word	0x0003afd0
   33698:	000336a5 	.word	0x000336a5
   3369c:	20004718 	.word	0x20004718
   336a0:	0001d071 	.word	0x0001d071

000336a4 <StartTasks>:
 * @details
 * @param[in]        None
 * @return           None
 */
static void StartTasks(void)
{
   336a4:	b590      	push	{r4, r7, lr}
   336a6:	b083      	sub	sp, #12
   336a8:	af02      	add	r7, sp, #8
    snprintf(bufferPrint, 64, "Heap before starting tasks: %d\r\n", xPortGetFreeHeapSize());
   336aa:	4b44      	ldr	r3, [pc, #272]	; (337bc <StartTasks+0x118>)
   336ac:	4798      	blx	r3
   336ae:	0003      	movs	r3, r0
   336b0:	4a43      	ldr	r2, [pc, #268]	; (337c0 <StartTasks+0x11c>)
   336b2:	4844      	ldr	r0, [pc, #272]	; (337c4 <StartTasks+0x120>)
   336b4:	2140      	movs	r1, #64	; 0x40
   336b6:	4c44      	ldr	r4, [pc, #272]	; (337c8 <StartTasks+0x124>)
   336b8:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   336ba:	4b42      	ldr	r3, [pc, #264]	; (337c4 <StartTasks+0x120>)
   336bc:	0018      	movs	r0, r3
   336be:	4b43      	ldr	r3, [pc, #268]	; (337cc <StartTasks+0x128>)
   336c0:	4798      	blx	r3

    // Initialize Tasks here

    if (xTaskCreate(vCommandConsoleTask, "CLI_TASK", CLI_TASK_SIZE, NULL, CLI_PRIORITY, &cliTaskHandle) != pdPASS) {
   336c2:	23c8      	movs	r3, #200	; 0xc8
   336c4:	005a      	lsls	r2, r3, #1
   336c6:	4942      	ldr	r1, [pc, #264]	; (337d0 <StartTasks+0x12c>)
   336c8:	4842      	ldr	r0, [pc, #264]	; (337d4 <StartTasks+0x130>)
   336ca:	4b43      	ldr	r3, [pc, #268]	; (337d8 <StartTasks+0x134>)
   336cc:	9301      	str	r3, [sp, #4]
   336ce:	2304      	movs	r3, #4
   336d0:	9300      	str	r3, [sp, #0]
   336d2:	2300      	movs	r3, #0
   336d4:	4c41      	ldr	r4, [pc, #260]	; (337dc <StartTasks+0x138>)
   336d6:	47a0      	blx	r4
   336d8:	0003      	movs	r3, r0
   336da:	2b01      	cmp	r3, #1
   336dc:	d003      	beq.n	336e6 <StartTasks+0x42>
        SerialConsoleWriteString("ERR: CLI task could not be initialized!\r\n");
   336de:	4b40      	ldr	r3, [pc, #256]	; (337e0 <StartTasks+0x13c>)
   336e0:	0018      	movs	r0, r3
   336e2:	4b3a      	ldr	r3, [pc, #232]	; (337cc <StartTasks+0x128>)
   336e4:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting CLI: %d\r\n", xPortGetFreeHeapSize());
   336e6:	4b35      	ldr	r3, [pc, #212]	; (337bc <StartTasks+0x118>)
   336e8:	4798      	blx	r3
   336ea:	0003      	movs	r3, r0
   336ec:	4a3d      	ldr	r2, [pc, #244]	; (337e4 <StartTasks+0x140>)
   336ee:	4835      	ldr	r0, [pc, #212]	; (337c4 <StartTasks+0x120>)
   336f0:	2140      	movs	r1, #64	; 0x40
   336f2:	4c35      	ldr	r4, [pc, #212]	; (337c8 <StartTasks+0x124>)
   336f4:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   336f6:	4b33      	ldr	r3, [pc, #204]	; (337c4 <StartTasks+0x120>)
   336f8:	0018      	movs	r0, r3
   336fa:	4b34      	ldr	r3, [pc, #208]	; (337cc <StartTasks+0x128>)
   336fc:	4798      	blx	r3

    if (xTaskCreate(vWifiTask, "WIFI_TASK", WIFI_TASK_SIZE, NULL, WIFI_PRIORITY, &wifiTaskHandle) != pdPASS) {
   336fe:	23fa      	movs	r3, #250	; 0xfa
   33700:	009a      	lsls	r2, r3, #2
   33702:	4939      	ldr	r1, [pc, #228]	; (337e8 <StartTasks+0x144>)
   33704:	4839      	ldr	r0, [pc, #228]	; (337ec <StartTasks+0x148>)
   33706:	4b3a      	ldr	r3, [pc, #232]	; (337f0 <StartTasks+0x14c>)
   33708:	9301      	str	r3, [sp, #4]
   3370a:	2303      	movs	r3, #3
   3370c:	9300      	str	r3, [sp, #0]
   3370e:	2300      	movs	r3, #0
   33710:	4c32      	ldr	r4, [pc, #200]	; (337dc <StartTasks+0x138>)
   33712:	47a0      	blx	r4
   33714:	0003      	movs	r3, r0
   33716:	2b01      	cmp	r3, #1
   33718:	d003      	beq.n	33722 <StartTasks+0x7e>
        SerialConsoleWriteString("ERR: WIFI task could not be initialized!\r\n");
   3371a:	4b36      	ldr	r3, [pc, #216]	; (337f4 <StartTasks+0x150>)
   3371c:	0018      	movs	r0, r3
   3371e:	4b2b      	ldr	r3, [pc, #172]	; (337cc <StartTasks+0x128>)
   33720:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting WIFI: %d\r\n", xPortGetFreeHeapSize());
   33722:	4b26      	ldr	r3, [pc, #152]	; (337bc <StartTasks+0x118>)
   33724:	4798      	blx	r3
   33726:	0003      	movs	r3, r0
   33728:	4a33      	ldr	r2, [pc, #204]	; (337f8 <StartTasks+0x154>)
   3372a:	4826      	ldr	r0, [pc, #152]	; (337c4 <StartTasks+0x120>)
   3372c:	2140      	movs	r1, #64	; 0x40
   3372e:	4c26      	ldr	r4, [pc, #152]	; (337c8 <StartTasks+0x124>)
   33730:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   33732:	4b24      	ldr	r3, [pc, #144]	; (337c4 <StartTasks+0x120>)
   33734:	0018      	movs	r0, r3
   33736:	4b25      	ldr	r3, [pc, #148]	; (337cc <StartTasks+0x128>)
   33738:	4798      	blx	r3

    if (xTaskCreate(vUiHandlerTask, "UI Task", UI_TASK_SIZE, NULL, UI_TASK_PRIORITY, &uiTaskHandle) != pdPASS) {
   3373a:	23c8      	movs	r3, #200	; 0xc8
   3373c:	005a      	lsls	r2, r3, #1
   3373e:	492f      	ldr	r1, [pc, #188]	; (337fc <StartTasks+0x158>)
   33740:	482f      	ldr	r0, [pc, #188]	; (33800 <StartTasks+0x15c>)
   33742:	4b30      	ldr	r3, [pc, #192]	; (33804 <StartTasks+0x160>)
   33744:	9301      	str	r3, [sp, #4]
   33746:	2304      	movs	r3, #4
   33748:	9300      	str	r3, [sp, #0]
   3374a:	2300      	movs	r3, #0
   3374c:	4c23      	ldr	r4, [pc, #140]	; (337dc <StartTasks+0x138>)
   3374e:	47a0      	blx	r4
   33750:	0003      	movs	r3, r0
   33752:	2b01      	cmp	r3, #1
   33754:	d003      	beq.n	3375e <StartTasks+0xba>
        SerialConsoleWriteString("ERR: UI task could not be initialized!\r\n");
   33756:	4b2c      	ldr	r3, [pc, #176]	; (33808 <StartTasks+0x164>)
   33758:	0018      	movs	r0, r3
   3375a:	4b1c      	ldr	r3, [pc, #112]	; (337cc <StartTasks+0x128>)
   3375c:	4798      	blx	r3
    }

    snprintf(bufferPrint, 64, "Heap after starting UI Task: %d\r\n", xPortGetFreeHeapSize());
   3375e:	4b17      	ldr	r3, [pc, #92]	; (337bc <StartTasks+0x118>)
   33760:	4798      	blx	r3
   33762:	0003      	movs	r3, r0
   33764:	4a29      	ldr	r2, [pc, #164]	; (3380c <StartTasks+0x168>)
   33766:	4817      	ldr	r0, [pc, #92]	; (337c4 <StartTasks+0x120>)
   33768:	2140      	movs	r1, #64	; 0x40
   3376a:	4c17      	ldr	r4, [pc, #92]	; (337c8 <StartTasks+0x124>)
   3376c:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   3376e:	4b15      	ldr	r3, [pc, #84]	; (337c4 <StartTasks+0x120>)
   33770:	0018      	movs	r0, r3
   33772:	4b16      	ldr	r3, [pc, #88]	; (337cc <StartTasks+0x128>)
   33774:	4798      	blx	r3

    if (xTaskCreate(vControlHandlerTask, "Control Task", CONTROL_TASK_SIZE, NULL, CONTROL_TASK_PRIORITY, &controlTaskHandle) != pdPASS) {
   33776:	2380      	movs	r3, #128	; 0x80
   33778:	005a      	lsls	r2, r3, #1
   3377a:	4925      	ldr	r1, [pc, #148]	; (33810 <StartTasks+0x16c>)
   3377c:	4825      	ldr	r0, [pc, #148]	; (33814 <StartTasks+0x170>)
   3377e:	4b26      	ldr	r3, [pc, #152]	; (33818 <StartTasks+0x174>)
   33780:	9301      	str	r3, [sp, #4]
   33782:	2304      	movs	r3, #4
   33784:	9300      	str	r3, [sp, #0]
   33786:	2300      	movs	r3, #0
   33788:	4c14      	ldr	r4, [pc, #80]	; (337dc <StartTasks+0x138>)
   3378a:	47a0      	blx	r4
   3378c:	0003      	movs	r3, r0
   3378e:	2b01      	cmp	r3, #1
   33790:	d003      	beq.n	3379a <StartTasks+0xf6>
        SerialConsoleWriteString("ERR: Control task could not be initialized!\r\n");
   33792:	4b22      	ldr	r3, [pc, #136]	; (3381c <StartTasks+0x178>)
   33794:	0018      	movs	r0, r3
   33796:	4b0d      	ldr	r3, [pc, #52]	; (337cc <StartTasks+0x128>)
   33798:	4798      	blx	r3
    }
    snprintf(bufferPrint, 64, "Heap after starting Control Task: %d\r\n", xPortGetFreeHeapSize());
   3379a:	4b08      	ldr	r3, [pc, #32]	; (337bc <StartTasks+0x118>)
   3379c:	4798      	blx	r3
   3379e:	0003      	movs	r3, r0
   337a0:	4a1f      	ldr	r2, [pc, #124]	; (33820 <StartTasks+0x17c>)
   337a2:	4808      	ldr	r0, [pc, #32]	; (337c4 <StartTasks+0x120>)
   337a4:	2140      	movs	r1, #64	; 0x40
   337a6:	4c08      	ldr	r4, [pc, #32]	; (337c8 <StartTasks+0x124>)
   337a8:	47a0      	blx	r4
    SerialConsoleWriteString(bufferPrint);
   337aa:	4b06      	ldr	r3, [pc, #24]	; (337c4 <StartTasks+0x120>)
   337ac:	0018      	movs	r0, r3
   337ae:	4b07      	ldr	r3, [pc, #28]	; (337cc <StartTasks+0x128>)
   337b0:	4798      	blx	r3
}
   337b2:	46c0      	nop			; (mov r8, r8)
   337b4:	46bd      	mov	sp, r7
   337b6:	b001      	add	sp, #4
   337b8:	bd90      	pop	{r4, r7, pc}
   337ba:	46c0      	nop			; (mov r8, r8)
   337bc:	0001b1b1 	.word	0x0001b1b1
   337c0:	0003afec 	.word	0x0003afec
   337c4:	20005ca0 	.word	0x20005ca0
   337c8:	00035a89 	.word	0x00035a89
   337cc:	0001ebe5 	.word	0x0001ebe5
   337d0:	0003b010 	.word	0x0003b010
   337d4:	00013f71 	.word	0x00013f71
   337d8:	20004714 	.word	0x20004714
   337dc:	0001cbf5 	.word	0x0001cbf5
   337e0:	0003b01c 	.word	0x0003b01c
   337e4:	0003b048 	.word	0x0003b048
   337e8:	0003b068 	.word	0x0003b068
   337ec:	00017ff9 	.word	0x00017ff9
   337f0:	2000471c 	.word	0x2000471c
   337f4:	0003b074 	.word	0x0003b074
   337f8:	0003b0a0 	.word	0x0003b0a0
   337fc:	0003b0c0 	.word	0x0003b0c0
   33800:	000166ed 	.word	0x000166ed
   33804:	20004720 	.word	0x20004720
   33808:	0003b0c8 	.word	0x0003b0c8
   3380c:	0003b0f4 	.word	0x0003b0f4
   33810:	0003b118 	.word	0x0003b118
   33814:	0001488d 	.word	0x0001488d
   33818:	20004724 	.word	0x20004724
   3381c:	0003b128 	.word	0x0003b128
   33820:	0003b158 	.word	0x0003b158

00033824 <vApplicationMallocFailedHook>:



void vApplicationMallocFailedHook(void)
{
   33824:	b580      	push	{r7, lr}
   33826:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on memory allocation on FREERTOS!\r\n");
   33828:	4b02      	ldr	r3, [pc, #8]	; (33834 <vApplicationMallocFailedHook+0x10>)
   3382a:	0018      	movs	r0, r3
   3382c:	4b02      	ldr	r3, [pc, #8]	; (33838 <vApplicationMallocFailedHook+0x14>)
   3382e:	4798      	blx	r3
    while (1)
   33830:	e7fe      	b.n	33830 <vApplicationMallocFailedHook+0xc>
   33832:	46c0      	nop			; (mov r8, r8)
   33834:	0003b180 	.word	0x0003b180
   33838:	0001ebe5 	.word	0x0001ebe5

0003383c <vApplicationStackOverflowHook>:
        ;
}

void vApplicationStackOverflowHook(void)
{
   3383c:	b580      	push	{r7, lr}
   3383e:	af00      	add	r7, sp, #0
    SerialConsoleWriteString("Error on stack overflow on FREERTOS!\r\n");
   33840:	4b02      	ldr	r3, [pc, #8]	; (3384c <vApplicationStackOverflowHook+0x10>)
   33842:	0018      	movs	r0, r3
   33844:	4b02      	ldr	r3, [pc, #8]	; (33850 <vApplicationStackOverflowHook+0x14>)
   33846:	4798      	blx	r3
    while (1)
   33848:	e7fe      	b.n	33848 <vApplicationStackOverflowHook+0xc>
   3384a:	46c0      	nop			; (mov r8, r8)
   3384c:	0003b1ac 	.word	0x0003b1ac
   33850:	0001ebe5 	.word	0x0001ebe5

00033854 <__udivsi3>:
   33854:	2200      	movs	r2, #0
   33856:	0843      	lsrs	r3, r0, #1
   33858:	428b      	cmp	r3, r1
   3385a:	d374      	bcc.n	33946 <__udivsi3+0xf2>
   3385c:	0903      	lsrs	r3, r0, #4
   3385e:	428b      	cmp	r3, r1
   33860:	d35f      	bcc.n	33922 <__udivsi3+0xce>
   33862:	0a03      	lsrs	r3, r0, #8
   33864:	428b      	cmp	r3, r1
   33866:	d344      	bcc.n	338f2 <__udivsi3+0x9e>
   33868:	0b03      	lsrs	r3, r0, #12
   3386a:	428b      	cmp	r3, r1
   3386c:	d328      	bcc.n	338c0 <__udivsi3+0x6c>
   3386e:	0c03      	lsrs	r3, r0, #16
   33870:	428b      	cmp	r3, r1
   33872:	d30d      	bcc.n	33890 <__udivsi3+0x3c>
   33874:	22ff      	movs	r2, #255	; 0xff
   33876:	0209      	lsls	r1, r1, #8
   33878:	ba12      	rev	r2, r2
   3387a:	0c03      	lsrs	r3, r0, #16
   3387c:	428b      	cmp	r3, r1
   3387e:	d302      	bcc.n	33886 <__udivsi3+0x32>
   33880:	1212      	asrs	r2, r2, #8
   33882:	0209      	lsls	r1, r1, #8
   33884:	d065      	beq.n	33952 <__udivsi3+0xfe>
   33886:	0b03      	lsrs	r3, r0, #12
   33888:	428b      	cmp	r3, r1
   3388a:	d319      	bcc.n	338c0 <__udivsi3+0x6c>
   3388c:	e000      	b.n	33890 <__udivsi3+0x3c>
   3388e:	0a09      	lsrs	r1, r1, #8
   33890:	0bc3      	lsrs	r3, r0, #15
   33892:	428b      	cmp	r3, r1
   33894:	d301      	bcc.n	3389a <__udivsi3+0x46>
   33896:	03cb      	lsls	r3, r1, #15
   33898:	1ac0      	subs	r0, r0, r3
   3389a:	4152      	adcs	r2, r2
   3389c:	0b83      	lsrs	r3, r0, #14
   3389e:	428b      	cmp	r3, r1
   338a0:	d301      	bcc.n	338a6 <__udivsi3+0x52>
   338a2:	038b      	lsls	r3, r1, #14
   338a4:	1ac0      	subs	r0, r0, r3
   338a6:	4152      	adcs	r2, r2
   338a8:	0b43      	lsrs	r3, r0, #13
   338aa:	428b      	cmp	r3, r1
   338ac:	d301      	bcc.n	338b2 <__udivsi3+0x5e>
   338ae:	034b      	lsls	r3, r1, #13
   338b0:	1ac0      	subs	r0, r0, r3
   338b2:	4152      	adcs	r2, r2
   338b4:	0b03      	lsrs	r3, r0, #12
   338b6:	428b      	cmp	r3, r1
   338b8:	d301      	bcc.n	338be <__udivsi3+0x6a>
   338ba:	030b      	lsls	r3, r1, #12
   338bc:	1ac0      	subs	r0, r0, r3
   338be:	4152      	adcs	r2, r2
   338c0:	0ac3      	lsrs	r3, r0, #11
   338c2:	428b      	cmp	r3, r1
   338c4:	d301      	bcc.n	338ca <__udivsi3+0x76>
   338c6:	02cb      	lsls	r3, r1, #11
   338c8:	1ac0      	subs	r0, r0, r3
   338ca:	4152      	adcs	r2, r2
   338cc:	0a83      	lsrs	r3, r0, #10
   338ce:	428b      	cmp	r3, r1
   338d0:	d301      	bcc.n	338d6 <__udivsi3+0x82>
   338d2:	028b      	lsls	r3, r1, #10
   338d4:	1ac0      	subs	r0, r0, r3
   338d6:	4152      	adcs	r2, r2
   338d8:	0a43      	lsrs	r3, r0, #9
   338da:	428b      	cmp	r3, r1
   338dc:	d301      	bcc.n	338e2 <__udivsi3+0x8e>
   338de:	024b      	lsls	r3, r1, #9
   338e0:	1ac0      	subs	r0, r0, r3
   338e2:	4152      	adcs	r2, r2
   338e4:	0a03      	lsrs	r3, r0, #8
   338e6:	428b      	cmp	r3, r1
   338e8:	d301      	bcc.n	338ee <__udivsi3+0x9a>
   338ea:	020b      	lsls	r3, r1, #8
   338ec:	1ac0      	subs	r0, r0, r3
   338ee:	4152      	adcs	r2, r2
   338f0:	d2cd      	bcs.n	3388e <__udivsi3+0x3a>
   338f2:	09c3      	lsrs	r3, r0, #7
   338f4:	428b      	cmp	r3, r1
   338f6:	d301      	bcc.n	338fc <__udivsi3+0xa8>
   338f8:	01cb      	lsls	r3, r1, #7
   338fa:	1ac0      	subs	r0, r0, r3
   338fc:	4152      	adcs	r2, r2
   338fe:	0983      	lsrs	r3, r0, #6
   33900:	428b      	cmp	r3, r1
   33902:	d301      	bcc.n	33908 <__udivsi3+0xb4>
   33904:	018b      	lsls	r3, r1, #6
   33906:	1ac0      	subs	r0, r0, r3
   33908:	4152      	adcs	r2, r2
   3390a:	0943      	lsrs	r3, r0, #5
   3390c:	428b      	cmp	r3, r1
   3390e:	d301      	bcc.n	33914 <__udivsi3+0xc0>
   33910:	014b      	lsls	r3, r1, #5
   33912:	1ac0      	subs	r0, r0, r3
   33914:	4152      	adcs	r2, r2
   33916:	0903      	lsrs	r3, r0, #4
   33918:	428b      	cmp	r3, r1
   3391a:	d301      	bcc.n	33920 <__udivsi3+0xcc>
   3391c:	010b      	lsls	r3, r1, #4
   3391e:	1ac0      	subs	r0, r0, r3
   33920:	4152      	adcs	r2, r2
   33922:	08c3      	lsrs	r3, r0, #3
   33924:	428b      	cmp	r3, r1
   33926:	d301      	bcc.n	3392c <__udivsi3+0xd8>
   33928:	00cb      	lsls	r3, r1, #3
   3392a:	1ac0      	subs	r0, r0, r3
   3392c:	4152      	adcs	r2, r2
   3392e:	0883      	lsrs	r3, r0, #2
   33930:	428b      	cmp	r3, r1
   33932:	d301      	bcc.n	33938 <__udivsi3+0xe4>
   33934:	008b      	lsls	r3, r1, #2
   33936:	1ac0      	subs	r0, r0, r3
   33938:	4152      	adcs	r2, r2
   3393a:	0843      	lsrs	r3, r0, #1
   3393c:	428b      	cmp	r3, r1
   3393e:	d301      	bcc.n	33944 <__udivsi3+0xf0>
   33940:	004b      	lsls	r3, r1, #1
   33942:	1ac0      	subs	r0, r0, r3
   33944:	4152      	adcs	r2, r2
   33946:	1a41      	subs	r1, r0, r1
   33948:	d200      	bcs.n	3394c <__udivsi3+0xf8>
   3394a:	4601      	mov	r1, r0
   3394c:	4152      	adcs	r2, r2
   3394e:	4610      	mov	r0, r2
   33950:	4770      	bx	lr
   33952:	e7ff      	b.n	33954 <__udivsi3+0x100>
   33954:	b501      	push	{r0, lr}
   33956:	2000      	movs	r0, #0
   33958:	f000 f8f0 	bl	33b3c <__aeabi_idiv0>
   3395c:	bd02      	pop	{r1, pc}
   3395e:	46c0      	nop			; (mov r8, r8)

00033960 <__aeabi_uidivmod>:
   33960:	2900      	cmp	r1, #0
   33962:	d0f7      	beq.n	33954 <__udivsi3+0x100>
   33964:	e776      	b.n	33854 <__udivsi3>
   33966:	4770      	bx	lr

00033968 <__divsi3>:
   33968:	4603      	mov	r3, r0
   3396a:	430b      	orrs	r3, r1
   3396c:	d47f      	bmi.n	33a6e <__divsi3+0x106>
   3396e:	2200      	movs	r2, #0
   33970:	0843      	lsrs	r3, r0, #1
   33972:	428b      	cmp	r3, r1
   33974:	d374      	bcc.n	33a60 <__divsi3+0xf8>
   33976:	0903      	lsrs	r3, r0, #4
   33978:	428b      	cmp	r3, r1
   3397a:	d35f      	bcc.n	33a3c <__divsi3+0xd4>
   3397c:	0a03      	lsrs	r3, r0, #8
   3397e:	428b      	cmp	r3, r1
   33980:	d344      	bcc.n	33a0c <__divsi3+0xa4>
   33982:	0b03      	lsrs	r3, r0, #12
   33984:	428b      	cmp	r3, r1
   33986:	d328      	bcc.n	339da <__divsi3+0x72>
   33988:	0c03      	lsrs	r3, r0, #16
   3398a:	428b      	cmp	r3, r1
   3398c:	d30d      	bcc.n	339aa <__divsi3+0x42>
   3398e:	22ff      	movs	r2, #255	; 0xff
   33990:	0209      	lsls	r1, r1, #8
   33992:	ba12      	rev	r2, r2
   33994:	0c03      	lsrs	r3, r0, #16
   33996:	428b      	cmp	r3, r1
   33998:	d302      	bcc.n	339a0 <__divsi3+0x38>
   3399a:	1212      	asrs	r2, r2, #8
   3399c:	0209      	lsls	r1, r1, #8
   3399e:	d065      	beq.n	33a6c <__divsi3+0x104>
   339a0:	0b03      	lsrs	r3, r0, #12
   339a2:	428b      	cmp	r3, r1
   339a4:	d319      	bcc.n	339da <__divsi3+0x72>
   339a6:	e000      	b.n	339aa <__divsi3+0x42>
   339a8:	0a09      	lsrs	r1, r1, #8
   339aa:	0bc3      	lsrs	r3, r0, #15
   339ac:	428b      	cmp	r3, r1
   339ae:	d301      	bcc.n	339b4 <__divsi3+0x4c>
   339b0:	03cb      	lsls	r3, r1, #15
   339b2:	1ac0      	subs	r0, r0, r3
   339b4:	4152      	adcs	r2, r2
   339b6:	0b83      	lsrs	r3, r0, #14
   339b8:	428b      	cmp	r3, r1
   339ba:	d301      	bcc.n	339c0 <__divsi3+0x58>
   339bc:	038b      	lsls	r3, r1, #14
   339be:	1ac0      	subs	r0, r0, r3
   339c0:	4152      	adcs	r2, r2
   339c2:	0b43      	lsrs	r3, r0, #13
   339c4:	428b      	cmp	r3, r1
   339c6:	d301      	bcc.n	339cc <__divsi3+0x64>
   339c8:	034b      	lsls	r3, r1, #13
   339ca:	1ac0      	subs	r0, r0, r3
   339cc:	4152      	adcs	r2, r2
   339ce:	0b03      	lsrs	r3, r0, #12
   339d0:	428b      	cmp	r3, r1
   339d2:	d301      	bcc.n	339d8 <__divsi3+0x70>
   339d4:	030b      	lsls	r3, r1, #12
   339d6:	1ac0      	subs	r0, r0, r3
   339d8:	4152      	adcs	r2, r2
   339da:	0ac3      	lsrs	r3, r0, #11
   339dc:	428b      	cmp	r3, r1
   339de:	d301      	bcc.n	339e4 <__divsi3+0x7c>
   339e0:	02cb      	lsls	r3, r1, #11
   339e2:	1ac0      	subs	r0, r0, r3
   339e4:	4152      	adcs	r2, r2
   339e6:	0a83      	lsrs	r3, r0, #10
   339e8:	428b      	cmp	r3, r1
   339ea:	d301      	bcc.n	339f0 <__divsi3+0x88>
   339ec:	028b      	lsls	r3, r1, #10
   339ee:	1ac0      	subs	r0, r0, r3
   339f0:	4152      	adcs	r2, r2
   339f2:	0a43      	lsrs	r3, r0, #9
   339f4:	428b      	cmp	r3, r1
   339f6:	d301      	bcc.n	339fc <__divsi3+0x94>
   339f8:	024b      	lsls	r3, r1, #9
   339fa:	1ac0      	subs	r0, r0, r3
   339fc:	4152      	adcs	r2, r2
   339fe:	0a03      	lsrs	r3, r0, #8
   33a00:	428b      	cmp	r3, r1
   33a02:	d301      	bcc.n	33a08 <__divsi3+0xa0>
   33a04:	020b      	lsls	r3, r1, #8
   33a06:	1ac0      	subs	r0, r0, r3
   33a08:	4152      	adcs	r2, r2
   33a0a:	d2cd      	bcs.n	339a8 <__divsi3+0x40>
   33a0c:	09c3      	lsrs	r3, r0, #7
   33a0e:	428b      	cmp	r3, r1
   33a10:	d301      	bcc.n	33a16 <__divsi3+0xae>
   33a12:	01cb      	lsls	r3, r1, #7
   33a14:	1ac0      	subs	r0, r0, r3
   33a16:	4152      	adcs	r2, r2
   33a18:	0983      	lsrs	r3, r0, #6
   33a1a:	428b      	cmp	r3, r1
   33a1c:	d301      	bcc.n	33a22 <__divsi3+0xba>
   33a1e:	018b      	lsls	r3, r1, #6
   33a20:	1ac0      	subs	r0, r0, r3
   33a22:	4152      	adcs	r2, r2
   33a24:	0943      	lsrs	r3, r0, #5
   33a26:	428b      	cmp	r3, r1
   33a28:	d301      	bcc.n	33a2e <__divsi3+0xc6>
   33a2a:	014b      	lsls	r3, r1, #5
   33a2c:	1ac0      	subs	r0, r0, r3
   33a2e:	4152      	adcs	r2, r2
   33a30:	0903      	lsrs	r3, r0, #4
   33a32:	428b      	cmp	r3, r1
   33a34:	d301      	bcc.n	33a3a <__divsi3+0xd2>
   33a36:	010b      	lsls	r3, r1, #4
   33a38:	1ac0      	subs	r0, r0, r3
   33a3a:	4152      	adcs	r2, r2
   33a3c:	08c3      	lsrs	r3, r0, #3
   33a3e:	428b      	cmp	r3, r1
   33a40:	d301      	bcc.n	33a46 <__divsi3+0xde>
   33a42:	00cb      	lsls	r3, r1, #3
   33a44:	1ac0      	subs	r0, r0, r3
   33a46:	4152      	adcs	r2, r2
   33a48:	0883      	lsrs	r3, r0, #2
   33a4a:	428b      	cmp	r3, r1
   33a4c:	d301      	bcc.n	33a52 <__divsi3+0xea>
   33a4e:	008b      	lsls	r3, r1, #2
   33a50:	1ac0      	subs	r0, r0, r3
   33a52:	4152      	adcs	r2, r2
   33a54:	0843      	lsrs	r3, r0, #1
   33a56:	428b      	cmp	r3, r1
   33a58:	d301      	bcc.n	33a5e <__divsi3+0xf6>
   33a5a:	004b      	lsls	r3, r1, #1
   33a5c:	1ac0      	subs	r0, r0, r3
   33a5e:	4152      	adcs	r2, r2
   33a60:	1a41      	subs	r1, r0, r1
   33a62:	d200      	bcs.n	33a66 <__divsi3+0xfe>
   33a64:	4601      	mov	r1, r0
   33a66:	4152      	adcs	r2, r2
   33a68:	4610      	mov	r0, r2
   33a6a:	4770      	bx	lr
   33a6c:	e05d      	b.n	33b2a <__divsi3+0x1c2>
   33a6e:	0fca      	lsrs	r2, r1, #31
   33a70:	d000      	beq.n	33a74 <__divsi3+0x10c>
   33a72:	4249      	negs	r1, r1
   33a74:	1003      	asrs	r3, r0, #32
   33a76:	d300      	bcc.n	33a7a <__divsi3+0x112>
   33a78:	4240      	negs	r0, r0
   33a7a:	4053      	eors	r3, r2
   33a7c:	2200      	movs	r2, #0
   33a7e:	469c      	mov	ip, r3
   33a80:	0903      	lsrs	r3, r0, #4
   33a82:	428b      	cmp	r3, r1
   33a84:	d32d      	bcc.n	33ae2 <__divsi3+0x17a>
   33a86:	0a03      	lsrs	r3, r0, #8
   33a88:	428b      	cmp	r3, r1
   33a8a:	d312      	bcc.n	33ab2 <__divsi3+0x14a>
   33a8c:	22fc      	movs	r2, #252	; 0xfc
   33a8e:	0189      	lsls	r1, r1, #6
   33a90:	ba12      	rev	r2, r2
   33a92:	0a03      	lsrs	r3, r0, #8
   33a94:	428b      	cmp	r3, r1
   33a96:	d30c      	bcc.n	33ab2 <__divsi3+0x14a>
   33a98:	0189      	lsls	r1, r1, #6
   33a9a:	1192      	asrs	r2, r2, #6
   33a9c:	428b      	cmp	r3, r1
   33a9e:	d308      	bcc.n	33ab2 <__divsi3+0x14a>
   33aa0:	0189      	lsls	r1, r1, #6
   33aa2:	1192      	asrs	r2, r2, #6
   33aa4:	428b      	cmp	r3, r1
   33aa6:	d304      	bcc.n	33ab2 <__divsi3+0x14a>
   33aa8:	0189      	lsls	r1, r1, #6
   33aaa:	d03a      	beq.n	33b22 <__divsi3+0x1ba>
   33aac:	1192      	asrs	r2, r2, #6
   33aae:	e000      	b.n	33ab2 <__divsi3+0x14a>
   33ab0:	0989      	lsrs	r1, r1, #6
   33ab2:	09c3      	lsrs	r3, r0, #7
   33ab4:	428b      	cmp	r3, r1
   33ab6:	d301      	bcc.n	33abc <__divsi3+0x154>
   33ab8:	01cb      	lsls	r3, r1, #7
   33aba:	1ac0      	subs	r0, r0, r3
   33abc:	4152      	adcs	r2, r2
   33abe:	0983      	lsrs	r3, r0, #6
   33ac0:	428b      	cmp	r3, r1
   33ac2:	d301      	bcc.n	33ac8 <__divsi3+0x160>
   33ac4:	018b      	lsls	r3, r1, #6
   33ac6:	1ac0      	subs	r0, r0, r3
   33ac8:	4152      	adcs	r2, r2
   33aca:	0943      	lsrs	r3, r0, #5
   33acc:	428b      	cmp	r3, r1
   33ace:	d301      	bcc.n	33ad4 <__divsi3+0x16c>
   33ad0:	014b      	lsls	r3, r1, #5
   33ad2:	1ac0      	subs	r0, r0, r3
   33ad4:	4152      	adcs	r2, r2
   33ad6:	0903      	lsrs	r3, r0, #4
   33ad8:	428b      	cmp	r3, r1
   33ada:	d301      	bcc.n	33ae0 <__divsi3+0x178>
   33adc:	010b      	lsls	r3, r1, #4
   33ade:	1ac0      	subs	r0, r0, r3
   33ae0:	4152      	adcs	r2, r2
   33ae2:	08c3      	lsrs	r3, r0, #3
   33ae4:	428b      	cmp	r3, r1
   33ae6:	d301      	bcc.n	33aec <__divsi3+0x184>
   33ae8:	00cb      	lsls	r3, r1, #3
   33aea:	1ac0      	subs	r0, r0, r3
   33aec:	4152      	adcs	r2, r2
   33aee:	0883      	lsrs	r3, r0, #2
   33af0:	428b      	cmp	r3, r1
   33af2:	d301      	bcc.n	33af8 <__divsi3+0x190>
   33af4:	008b      	lsls	r3, r1, #2
   33af6:	1ac0      	subs	r0, r0, r3
   33af8:	4152      	adcs	r2, r2
   33afa:	d2d9      	bcs.n	33ab0 <__divsi3+0x148>
   33afc:	0843      	lsrs	r3, r0, #1
   33afe:	428b      	cmp	r3, r1
   33b00:	d301      	bcc.n	33b06 <__divsi3+0x19e>
   33b02:	004b      	lsls	r3, r1, #1
   33b04:	1ac0      	subs	r0, r0, r3
   33b06:	4152      	adcs	r2, r2
   33b08:	1a41      	subs	r1, r0, r1
   33b0a:	d200      	bcs.n	33b0e <__divsi3+0x1a6>
   33b0c:	4601      	mov	r1, r0
   33b0e:	4663      	mov	r3, ip
   33b10:	4152      	adcs	r2, r2
   33b12:	105b      	asrs	r3, r3, #1
   33b14:	4610      	mov	r0, r2
   33b16:	d301      	bcc.n	33b1c <__divsi3+0x1b4>
   33b18:	4240      	negs	r0, r0
   33b1a:	2b00      	cmp	r3, #0
   33b1c:	d500      	bpl.n	33b20 <__divsi3+0x1b8>
   33b1e:	4249      	negs	r1, r1
   33b20:	4770      	bx	lr
   33b22:	4663      	mov	r3, ip
   33b24:	105b      	asrs	r3, r3, #1
   33b26:	d300      	bcc.n	33b2a <__divsi3+0x1c2>
   33b28:	4240      	negs	r0, r0
   33b2a:	b501      	push	{r0, lr}
   33b2c:	2000      	movs	r0, #0
   33b2e:	f000 f805 	bl	33b3c <__aeabi_idiv0>
   33b32:	bd02      	pop	{r1, pc}

00033b34 <__aeabi_idivmod>:
   33b34:	2900      	cmp	r1, #0
   33b36:	d0f8      	beq.n	33b2a <__divsi3+0x1c2>
   33b38:	e716      	b.n	33968 <__divsi3>
   33b3a:	4770      	bx	lr

00033b3c <__aeabi_idiv0>:
   33b3c:	4770      	bx	lr
   33b3e:	46c0      	nop			; (mov r8, r8)

00033b40 <__aeabi_lmul>:
   33b40:	b5f0      	push	{r4, r5, r6, r7, lr}
   33b42:	46ce      	mov	lr, r9
   33b44:	4647      	mov	r7, r8
   33b46:	0415      	lsls	r5, r2, #16
   33b48:	0c2d      	lsrs	r5, r5, #16
   33b4a:	002e      	movs	r6, r5
   33b4c:	b580      	push	{r7, lr}
   33b4e:	0407      	lsls	r7, r0, #16
   33b50:	0c14      	lsrs	r4, r2, #16
   33b52:	0c3f      	lsrs	r7, r7, #16
   33b54:	4699      	mov	r9, r3
   33b56:	0c03      	lsrs	r3, r0, #16
   33b58:	437e      	muls	r6, r7
   33b5a:	435d      	muls	r5, r3
   33b5c:	4367      	muls	r7, r4
   33b5e:	4363      	muls	r3, r4
   33b60:	197f      	adds	r7, r7, r5
   33b62:	0c34      	lsrs	r4, r6, #16
   33b64:	19e4      	adds	r4, r4, r7
   33b66:	469c      	mov	ip, r3
   33b68:	42a5      	cmp	r5, r4
   33b6a:	d903      	bls.n	33b74 <__aeabi_lmul+0x34>
   33b6c:	2380      	movs	r3, #128	; 0x80
   33b6e:	025b      	lsls	r3, r3, #9
   33b70:	4698      	mov	r8, r3
   33b72:	44c4      	add	ip, r8
   33b74:	464b      	mov	r3, r9
   33b76:	4351      	muls	r1, r2
   33b78:	4343      	muls	r3, r0
   33b7a:	0436      	lsls	r6, r6, #16
   33b7c:	0c36      	lsrs	r6, r6, #16
   33b7e:	0c25      	lsrs	r5, r4, #16
   33b80:	0424      	lsls	r4, r4, #16
   33b82:	4465      	add	r5, ip
   33b84:	19a4      	adds	r4, r4, r6
   33b86:	1859      	adds	r1, r3, r1
   33b88:	1949      	adds	r1, r1, r5
   33b8a:	0020      	movs	r0, r4
   33b8c:	bc0c      	pop	{r2, r3}
   33b8e:	4690      	mov	r8, r2
   33b90:	4699      	mov	r9, r3
   33b92:	bdf0      	pop	{r4, r5, r6, r7, pc}

00033b94 <__aeabi_fmul>:
   33b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33b96:	4657      	mov	r7, sl
   33b98:	464e      	mov	r6, r9
   33b9a:	4645      	mov	r5, r8
   33b9c:	46de      	mov	lr, fp
   33b9e:	b5e0      	push	{r5, r6, r7, lr}
   33ba0:	0247      	lsls	r7, r0, #9
   33ba2:	0046      	lsls	r6, r0, #1
   33ba4:	4688      	mov	r8, r1
   33ba6:	0a7f      	lsrs	r7, r7, #9
   33ba8:	0e36      	lsrs	r6, r6, #24
   33baa:	0fc4      	lsrs	r4, r0, #31
   33bac:	2e00      	cmp	r6, #0
   33bae:	d047      	beq.n	33c40 <__aeabi_fmul+0xac>
   33bb0:	2eff      	cmp	r6, #255	; 0xff
   33bb2:	d024      	beq.n	33bfe <__aeabi_fmul+0x6a>
   33bb4:	00fb      	lsls	r3, r7, #3
   33bb6:	2780      	movs	r7, #128	; 0x80
   33bb8:	04ff      	lsls	r7, r7, #19
   33bba:	431f      	orrs	r7, r3
   33bbc:	2300      	movs	r3, #0
   33bbe:	4699      	mov	r9, r3
   33bc0:	469a      	mov	sl, r3
   33bc2:	3e7f      	subs	r6, #127	; 0x7f
   33bc4:	4643      	mov	r3, r8
   33bc6:	025d      	lsls	r5, r3, #9
   33bc8:	0058      	lsls	r0, r3, #1
   33bca:	0fdb      	lsrs	r3, r3, #31
   33bcc:	0a6d      	lsrs	r5, r5, #9
   33bce:	0e00      	lsrs	r0, r0, #24
   33bd0:	4698      	mov	r8, r3
   33bd2:	d043      	beq.n	33c5c <__aeabi_fmul+0xc8>
   33bd4:	28ff      	cmp	r0, #255	; 0xff
   33bd6:	d03b      	beq.n	33c50 <__aeabi_fmul+0xbc>
   33bd8:	00eb      	lsls	r3, r5, #3
   33bda:	2580      	movs	r5, #128	; 0x80
   33bdc:	2200      	movs	r2, #0
   33bde:	04ed      	lsls	r5, r5, #19
   33be0:	431d      	orrs	r5, r3
   33be2:	387f      	subs	r0, #127	; 0x7f
   33be4:	1836      	adds	r6, r6, r0
   33be6:	1c73      	adds	r3, r6, #1
   33be8:	4641      	mov	r1, r8
   33bea:	469b      	mov	fp, r3
   33bec:	464b      	mov	r3, r9
   33bee:	4061      	eors	r1, r4
   33bf0:	4313      	orrs	r3, r2
   33bf2:	2b0f      	cmp	r3, #15
   33bf4:	d864      	bhi.n	33cc0 <__aeabi_fmul+0x12c>
   33bf6:	4875      	ldr	r0, [pc, #468]	; (33dcc <__aeabi_fmul+0x238>)
   33bf8:	009b      	lsls	r3, r3, #2
   33bfa:	58c3      	ldr	r3, [r0, r3]
   33bfc:	469f      	mov	pc, r3
   33bfe:	2f00      	cmp	r7, #0
   33c00:	d142      	bne.n	33c88 <__aeabi_fmul+0xf4>
   33c02:	2308      	movs	r3, #8
   33c04:	4699      	mov	r9, r3
   33c06:	3b06      	subs	r3, #6
   33c08:	26ff      	movs	r6, #255	; 0xff
   33c0a:	469a      	mov	sl, r3
   33c0c:	e7da      	b.n	33bc4 <__aeabi_fmul+0x30>
   33c0e:	4641      	mov	r1, r8
   33c10:	2a02      	cmp	r2, #2
   33c12:	d028      	beq.n	33c66 <__aeabi_fmul+0xd2>
   33c14:	2a03      	cmp	r2, #3
   33c16:	d100      	bne.n	33c1a <__aeabi_fmul+0x86>
   33c18:	e0ce      	b.n	33db8 <__aeabi_fmul+0x224>
   33c1a:	2a01      	cmp	r2, #1
   33c1c:	d000      	beq.n	33c20 <__aeabi_fmul+0x8c>
   33c1e:	e0ac      	b.n	33d7a <__aeabi_fmul+0x1e6>
   33c20:	4011      	ands	r1, r2
   33c22:	2000      	movs	r0, #0
   33c24:	2200      	movs	r2, #0
   33c26:	b2cc      	uxtb	r4, r1
   33c28:	0240      	lsls	r0, r0, #9
   33c2a:	05d2      	lsls	r2, r2, #23
   33c2c:	0a40      	lsrs	r0, r0, #9
   33c2e:	07e4      	lsls	r4, r4, #31
   33c30:	4310      	orrs	r0, r2
   33c32:	4320      	orrs	r0, r4
   33c34:	bc3c      	pop	{r2, r3, r4, r5}
   33c36:	4690      	mov	r8, r2
   33c38:	4699      	mov	r9, r3
   33c3a:	46a2      	mov	sl, r4
   33c3c:	46ab      	mov	fp, r5
   33c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   33c40:	2f00      	cmp	r7, #0
   33c42:	d115      	bne.n	33c70 <__aeabi_fmul+0xdc>
   33c44:	2304      	movs	r3, #4
   33c46:	4699      	mov	r9, r3
   33c48:	3b03      	subs	r3, #3
   33c4a:	2600      	movs	r6, #0
   33c4c:	469a      	mov	sl, r3
   33c4e:	e7b9      	b.n	33bc4 <__aeabi_fmul+0x30>
   33c50:	20ff      	movs	r0, #255	; 0xff
   33c52:	2202      	movs	r2, #2
   33c54:	2d00      	cmp	r5, #0
   33c56:	d0c5      	beq.n	33be4 <__aeabi_fmul+0x50>
   33c58:	2203      	movs	r2, #3
   33c5a:	e7c3      	b.n	33be4 <__aeabi_fmul+0x50>
   33c5c:	2d00      	cmp	r5, #0
   33c5e:	d119      	bne.n	33c94 <__aeabi_fmul+0x100>
   33c60:	2000      	movs	r0, #0
   33c62:	2201      	movs	r2, #1
   33c64:	e7be      	b.n	33be4 <__aeabi_fmul+0x50>
   33c66:	2401      	movs	r4, #1
   33c68:	22ff      	movs	r2, #255	; 0xff
   33c6a:	400c      	ands	r4, r1
   33c6c:	2000      	movs	r0, #0
   33c6e:	e7db      	b.n	33c28 <__aeabi_fmul+0x94>
   33c70:	0038      	movs	r0, r7
   33c72:	f001 fd65 	bl	35740 <__clzsi2>
   33c76:	2676      	movs	r6, #118	; 0x76
   33c78:	1f43      	subs	r3, r0, #5
   33c7a:	409f      	lsls	r7, r3
   33c7c:	2300      	movs	r3, #0
   33c7e:	4276      	negs	r6, r6
   33c80:	1a36      	subs	r6, r6, r0
   33c82:	4699      	mov	r9, r3
   33c84:	469a      	mov	sl, r3
   33c86:	e79d      	b.n	33bc4 <__aeabi_fmul+0x30>
   33c88:	230c      	movs	r3, #12
   33c8a:	4699      	mov	r9, r3
   33c8c:	3b09      	subs	r3, #9
   33c8e:	26ff      	movs	r6, #255	; 0xff
   33c90:	469a      	mov	sl, r3
   33c92:	e797      	b.n	33bc4 <__aeabi_fmul+0x30>
   33c94:	0028      	movs	r0, r5
   33c96:	f001 fd53 	bl	35740 <__clzsi2>
   33c9a:	1f43      	subs	r3, r0, #5
   33c9c:	409d      	lsls	r5, r3
   33c9e:	2376      	movs	r3, #118	; 0x76
   33ca0:	425b      	negs	r3, r3
   33ca2:	1a18      	subs	r0, r3, r0
   33ca4:	2200      	movs	r2, #0
   33ca6:	e79d      	b.n	33be4 <__aeabi_fmul+0x50>
   33ca8:	2080      	movs	r0, #128	; 0x80
   33caa:	2400      	movs	r4, #0
   33cac:	03c0      	lsls	r0, r0, #15
   33cae:	22ff      	movs	r2, #255	; 0xff
   33cb0:	e7ba      	b.n	33c28 <__aeabi_fmul+0x94>
   33cb2:	003d      	movs	r5, r7
   33cb4:	4652      	mov	r2, sl
   33cb6:	e7ab      	b.n	33c10 <__aeabi_fmul+0x7c>
   33cb8:	003d      	movs	r5, r7
   33cba:	0021      	movs	r1, r4
   33cbc:	4652      	mov	r2, sl
   33cbe:	e7a7      	b.n	33c10 <__aeabi_fmul+0x7c>
   33cc0:	0c3b      	lsrs	r3, r7, #16
   33cc2:	469c      	mov	ip, r3
   33cc4:	042a      	lsls	r2, r5, #16
   33cc6:	0c12      	lsrs	r2, r2, #16
   33cc8:	0c2b      	lsrs	r3, r5, #16
   33cca:	0014      	movs	r4, r2
   33ccc:	4660      	mov	r0, ip
   33cce:	4665      	mov	r5, ip
   33cd0:	043f      	lsls	r7, r7, #16
   33cd2:	0c3f      	lsrs	r7, r7, #16
   33cd4:	437c      	muls	r4, r7
   33cd6:	4342      	muls	r2, r0
   33cd8:	435d      	muls	r5, r3
   33cda:	437b      	muls	r3, r7
   33cdc:	0c27      	lsrs	r7, r4, #16
   33cde:	189b      	adds	r3, r3, r2
   33ce0:	18ff      	adds	r7, r7, r3
   33ce2:	42ba      	cmp	r2, r7
   33ce4:	d903      	bls.n	33cee <__aeabi_fmul+0x15a>
   33ce6:	2380      	movs	r3, #128	; 0x80
   33ce8:	025b      	lsls	r3, r3, #9
   33cea:	469c      	mov	ip, r3
   33cec:	4465      	add	r5, ip
   33cee:	0424      	lsls	r4, r4, #16
   33cf0:	043a      	lsls	r2, r7, #16
   33cf2:	0c24      	lsrs	r4, r4, #16
   33cf4:	1912      	adds	r2, r2, r4
   33cf6:	0193      	lsls	r3, r2, #6
   33cf8:	1e5c      	subs	r4, r3, #1
   33cfa:	41a3      	sbcs	r3, r4
   33cfc:	0c3f      	lsrs	r7, r7, #16
   33cfe:	0e92      	lsrs	r2, r2, #26
   33d00:	197d      	adds	r5, r7, r5
   33d02:	431a      	orrs	r2, r3
   33d04:	01ad      	lsls	r5, r5, #6
   33d06:	4315      	orrs	r5, r2
   33d08:	012b      	lsls	r3, r5, #4
   33d0a:	d504      	bpl.n	33d16 <__aeabi_fmul+0x182>
   33d0c:	2301      	movs	r3, #1
   33d0e:	465e      	mov	r6, fp
   33d10:	086a      	lsrs	r2, r5, #1
   33d12:	401d      	ands	r5, r3
   33d14:	4315      	orrs	r5, r2
   33d16:	0032      	movs	r2, r6
   33d18:	327f      	adds	r2, #127	; 0x7f
   33d1a:	2a00      	cmp	r2, #0
   33d1c:	dd25      	ble.n	33d6a <__aeabi_fmul+0x1d6>
   33d1e:	076b      	lsls	r3, r5, #29
   33d20:	d004      	beq.n	33d2c <__aeabi_fmul+0x198>
   33d22:	230f      	movs	r3, #15
   33d24:	402b      	ands	r3, r5
   33d26:	2b04      	cmp	r3, #4
   33d28:	d000      	beq.n	33d2c <__aeabi_fmul+0x198>
   33d2a:	3504      	adds	r5, #4
   33d2c:	012b      	lsls	r3, r5, #4
   33d2e:	d503      	bpl.n	33d38 <__aeabi_fmul+0x1a4>
   33d30:	0032      	movs	r2, r6
   33d32:	4b27      	ldr	r3, [pc, #156]	; (33dd0 <__aeabi_fmul+0x23c>)
   33d34:	3280      	adds	r2, #128	; 0x80
   33d36:	401d      	ands	r5, r3
   33d38:	2afe      	cmp	r2, #254	; 0xfe
   33d3a:	dc94      	bgt.n	33c66 <__aeabi_fmul+0xd2>
   33d3c:	2401      	movs	r4, #1
   33d3e:	01a8      	lsls	r0, r5, #6
   33d40:	0a40      	lsrs	r0, r0, #9
   33d42:	b2d2      	uxtb	r2, r2
   33d44:	400c      	ands	r4, r1
   33d46:	e76f      	b.n	33c28 <__aeabi_fmul+0x94>
   33d48:	2080      	movs	r0, #128	; 0x80
   33d4a:	03c0      	lsls	r0, r0, #15
   33d4c:	4207      	tst	r7, r0
   33d4e:	d007      	beq.n	33d60 <__aeabi_fmul+0x1cc>
   33d50:	4205      	tst	r5, r0
   33d52:	d105      	bne.n	33d60 <__aeabi_fmul+0x1cc>
   33d54:	4328      	orrs	r0, r5
   33d56:	0240      	lsls	r0, r0, #9
   33d58:	0a40      	lsrs	r0, r0, #9
   33d5a:	4644      	mov	r4, r8
   33d5c:	22ff      	movs	r2, #255	; 0xff
   33d5e:	e763      	b.n	33c28 <__aeabi_fmul+0x94>
   33d60:	4338      	orrs	r0, r7
   33d62:	0240      	lsls	r0, r0, #9
   33d64:	0a40      	lsrs	r0, r0, #9
   33d66:	22ff      	movs	r2, #255	; 0xff
   33d68:	e75e      	b.n	33c28 <__aeabi_fmul+0x94>
   33d6a:	2401      	movs	r4, #1
   33d6c:	1aa3      	subs	r3, r4, r2
   33d6e:	2b1b      	cmp	r3, #27
   33d70:	dd05      	ble.n	33d7e <__aeabi_fmul+0x1ea>
   33d72:	400c      	ands	r4, r1
   33d74:	2200      	movs	r2, #0
   33d76:	2000      	movs	r0, #0
   33d78:	e756      	b.n	33c28 <__aeabi_fmul+0x94>
   33d7a:	465e      	mov	r6, fp
   33d7c:	e7cb      	b.n	33d16 <__aeabi_fmul+0x182>
   33d7e:	002a      	movs	r2, r5
   33d80:	2020      	movs	r0, #32
   33d82:	40da      	lsrs	r2, r3
   33d84:	1ac3      	subs	r3, r0, r3
   33d86:	409d      	lsls	r5, r3
   33d88:	002b      	movs	r3, r5
   33d8a:	1e5d      	subs	r5, r3, #1
   33d8c:	41ab      	sbcs	r3, r5
   33d8e:	4313      	orrs	r3, r2
   33d90:	075a      	lsls	r2, r3, #29
   33d92:	d004      	beq.n	33d9e <__aeabi_fmul+0x20a>
   33d94:	220f      	movs	r2, #15
   33d96:	401a      	ands	r2, r3
   33d98:	2a04      	cmp	r2, #4
   33d9a:	d000      	beq.n	33d9e <__aeabi_fmul+0x20a>
   33d9c:	3304      	adds	r3, #4
   33d9e:	015a      	lsls	r2, r3, #5
   33da0:	d504      	bpl.n	33dac <__aeabi_fmul+0x218>
   33da2:	2401      	movs	r4, #1
   33da4:	2201      	movs	r2, #1
   33da6:	400c      	ands	r4, r1
   33da8:	2000      	movs	r0, #0
   33daa:	e73d      	b.n	33c28 <__aeabi_fmul+0x94>
   33dac:	2401      	movs	r4, #1
   33dae:	019b      	lsls	r3, r3, #6
   33db0:	0a58      	lsrs	r0, r3, #9
   33db2:	400c      	ands	r4, r1
   33db4:	2200      	movs	r2, #0
   33db6:	e737      	b.n	33c28 <__aeabi_fmul+0x94>
   33db8:	2080      	movs	r0, #128	; 0x80
   33dba:	2401      	movs	r4, #1
   33dbc:	03c0      	lsls	r0, r0, #15
   33dbe:	4328      	orrs	r0, r5
   33dc0:	0240      	lsls	r0, r0, #9
   33dc2:	0a40      	lsrs	r0, r0, #9
   33dc4:	400c      	ands	r4, r1
   33dc6:	22ff      	movs	r2, #255	; 0xff
   33dc8:	e72e      	b.n	33c28 <__aeabi_fmul+0x94>
   33dca:	46c0      	nop			; (mov r8, r8)
   33dcc:	0003b1d4 	.word	0x0003b1d4
   33dd0:	f7ffffff 	.word	0xf7ffffff

00033dd4 <__aeabi_f2iz>:
   33dd4:	0241      	lsls	r1, r0, #9
   33dd6:	0043      	lsls	r3, r0, #1
   33dd8:	0fc2      	lsrs	r2, r0, #31
   33dda:	0a49      	lsrs	r1, r1, #9
   33ddc:	0e1b      	lsrs	r3, r3, #24
   33dde:	2000      	movs	r0, #0
   33de0:	2b7e      	cmp	r3, #126	; 0x7e
   33de2:	dd0d      	ble.n	33e00 <__aeabi_f2iz+0x2c>
   33de4:	2b9d      	cmp	r3, #157	; 0x9d
   33de6:	dc0c      	bgt.n	33e02 <__aeabi_f2iz+0x2e>
   33de8:	2080      	movs	r0, #128	; 0x80
   33dea:	0400      	lsls	r0, r0, #16
   33dec:	4301      	orrs	r1, r0
   33dee:	2b95      	cmp	r3, #149	; 0x95
   33df0:	dc0a      	bgt.n	33e08 <__aeabi_f2iz+0x34>
   33df2:	2096      	movs	r0, #150	; 0x96
   33df4:	1ac3      	subs	r3, r0, r3
   33df6:	40d9      	lsrs	r1, r3
   33df8:	4248      	negs	r0, r1
   33dfa:	2a00      	cmp	r2, #0
   33dfc:	d100      	bne.n	33e00 <__aeabi_f2iz+0x2c>
   33dfe:	0008      	movs	r0, r1
   33e00:	4770      	bx	lr
   33e02:	4b03      	ldr	r3, [pc, #12]	; (33e10 <__aeabi_f2iz+0x3c>)
   33e04:	18d0      	adds	r0, r2, r3
   33e06:	e7fb      	b.n	33e00 <__aeabi_f2iz+0x2c>
   33e08:	3b96      	subs	r3, #150	; 0x96
   33e0a:	4099      	lsls	r1, r3
   33e0c:	e7f4      	b.n	33df8 <__aeabi_f2iz+0x24>
   33e0e:	46c0      	nop			; (mov r8, r8)
   33e10:	7fffffff 	.word	0x7fffffff

00033e14 <__aeabi_i2f>:
   33e14:	b570      	push	{r4, r5, r6, lr}
   33e16:	2800      	cmp	r0, #0
   33e18:	d030      	beq.n	33e7c <__aeabi_i2f+0x68>
   33e1a:	17c3      	asrs	r3, r0, #31
   33e1c:	18c4      	adds	r4, r0, r3
   33e1e:	405c      	eors	r4, r3
   33e20:	0fc5      	lsrs	r5, r0, #31
   33e22:	0020      	movs	r0, r4
   33e24:	f001 fc8c 	bl	35740 <__clzsi2>
   33e28:	239e      	movs	r3, #158	; 0x9e
   33e2a:	1a1b      	subs	r3, r3, r0
   33e2c:	2b96      	cmp	r3, #150	; 0x96
   33e2e:	dc0d      	bgt.n	33e4c <__aeabi_i2f+0x38>
   33e30:	2296      	movs	r2, #150	; 0x96
   33e32:	1ad2      	subs	r2, r2, r3
   33e34:	4094      	lsls	r4, r2
   33e36:	002a      	movs	r2, r5
   33e38:	0264      	lsls	r4, r4, #9
   33e3a:	0a64      	lsrs	r4, r4, #9
   33e3c:	b2db      	uxtb	r3, r3
   33e3e:	0264      	lsls	r4, r4, #9
   33e40:	05db      	lsls	r3, r3, #23
   33e42:	0a60      	lsrs	r0, r4, #9
   33e44:	07d2      	lsls	r2, r2, #31
   33e46:	4318      	orrs	r0, r3
   33e48:	4310      	orrs	r0, r2
   33e4a:	bd70      	pop	{r4, r5, r6, pc}
   33e4c:	2b99      	cmp	r3, #153	; 0x99
   33e4e:	dc19      	bgt.n	33e84 <__aeabi_i2f+0x70>
   33e50:	2299      	movs	r2, #153	; 0x99
   33e52:	1ad2      	subs	r2, r2, r3
   33e54:	2a00      	cmp	r2, #0
   33e56:	dd29      	ble.n	33eac <__aeabi_i2f+0x98>
   33e58:	4094      	lsls	r4, r2
   33e5a:	0022      	movs	r2, r4
   33e5c:	4c14      	ldr	r4, [pc, #80]	; (33eb0 <__aeabi_i2f+0x9c>)
   33e5e:	4014      	ands	r4, r2
   33e60:	0751      	lsls	r1, r2, #29
   33e62:	d004      	beq.n	33e6e <__aeabi_i2f+0x5a>
   33e64:	210f      	movs	r1, #15
   33e66:	400a      	ands	r2, r1
   33e68:	2a04      	cmp	r2, #4
   33e6a:	d000      	beq.n	33e6e <__aeabi_i2f+0x5a>
   33e6c:	3404      	adds	r4, #4
   33e6e:	0162      	lsls	r2, r4, #5
   33e70:	d413      	bmi.n	33e9a <__aeabi_i2f+0x86>
   33e72:	01a4      	lsls	r4, r4, #6
   33e74:	0a64      	lsrs	r4, r4, #9
   33e76:	b2db      	uxtb	r3, r3
   33e78:	002a      	movs	r2, r5
   33e7a:	e7e0      	b.n	33e3e <__aeabi_i2f+0x2a>
   33e7c:	2200      	movs	r2, #0
   33e7e:	2300      	movs	r3, #0
   33e80:	2400      	movs	r4, #0
   33e82:	e7dc      	b.n	33e3e <__aeabi_i2f+0x2a>
   33e84:	2205      	movs	r2, #5
   33e86:	0021      	movs	r1, r4
   33e88:	1a12      	subs	r2, r2, r0
   33e8a:	40d1      	lsrs	r1, r2
   33e8c:	22b9      	movs	r2, #185	; 0xb9
   33e8e:	1ad2      	subs	r2, r2, r3
   33e90:	4094      	lsls	r4, r2
   33e92:	1e62      	subs	r2, r4, #1
   33e94:	4194      	sbcs	r4, r2
   33e96:	430c      	orrs	r4, r1
   33e98:	e7da      	b.n	33e50 <__aeabi_i2f+0x3c>
   33e9a:	4b05      	ldr	r3, [pc, #20]	; (33eb0 <__aeabi_i2f+0x9c>)
   33e9c:	002a      	movs	r2, r5
   33e9e:	401c      	ands	r4, r3
   33ea0:	239f      	movs	r3, #159	; 0x9f
   33ea2:	01a4      	lsls	r4, r4, #6
   33ea4:	1a1b      	subs	r3, r3, r0
   33ea6:	0a64      	lsrs	r4, r4, #9
   33ea8:	b2db      	uxtb	r3, r3
   33eaa:	e7c8      	b.n	33e3e <__aeabi_i2f+0x2a>
   33eac:	0022      	movs	r2, r4
   33eae:	e7d5      	b.n	33e5c <__aeabi_i2f+0x48>
   33eb0:	fbffffff 	.word	0xfbffffff

00033eb4 <__aeabi_dadd>:
   33eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   33eb6:	4645      	mov	r5, r8
   33eb8:	46de      	mov	lr, fp
   33eba:	4657      	mov	r7, sl
   33ebc:	464e      	mov	r6, r9
   33ebe:	030c      	lsls	r4, r1, #12
   33ec0:	b5e0      	push	{r5, r6, r7, lr}
   33ec2:	004e      	lsls	r6, r1, #1
   33ec4:	0fc9      	lsrs	r1, r1, #31
   33ec6:	4688      	mov	r8, r1
   33ec8:	000d      	movs	r5, r1
   33eca:	0a61      	lsrs	r1, r4, #9
   33ecc:	0f44      	lsrs	r4, r0, #29
   33ece:	430c      	orrs	r4, r1
   33ed0:	00c7      	lsls	r7, r0, #3
   33ed2:	0319      	lsls	r1, r3, #12
   33ed4:	0058      	lsls	r0, r3, #1
   33ed6:	0fdb      	lsrs	r3, r3, #31
   33ed8:	469b      	mov	fp, r3
   33eda:	0a4b      	lsrs	r3, r1, #9
   33edc:	0f51      	lsrs	r1, r2, #29
   33ede:	430b      	orrs	r3, r1
   33ee0:	0d76      	lsrs	r6, r6, #21
   33ee2:	0d40      	lsrs	r0, r0, #21
   33ee4:	0019      	movs	r1, r3
   33ee6:	00d2      	lsls	r2, r2, #3
   33ee8:	45d8      	cmp	r8, fp
   33eea:	d100      	bne.n	33eee <__aeabi_dadd+0x3a>
   33eec:	e0ae      	b.n	3404c <__aeabi_dadd+0x198>
   33eee:	1a35      	subs	r5, r6, r0
   33ef0:	2d00      	cmp	r5, #0
   33ef2:	dc00      	bgt.n	33ef6 <__aeabi_dadd+0x42>
   33ef4:	e0f6      	b.n	340e4 <__aeabi_dadd+0x230>
   33ef6:	2800      	cmp	r0, #0
   33ef8:	d10f      	bne.n	33f1a <__aeabi_dadd+0x66>
   33efa:	4313      	orrs	r3, r2
   33efc:	d100      	bne.n	33f00 <__aeabi_dadd+0x4c>
   33efe:	e0db      	b.n	340b8 <__aeabi_dadd+0x204>
   33f00:	1e6b      	subs	r3, r5, #1
   33f02:	2b00      	cmp	r3, #0
   33f04:	d000      	beq.n	33f08 <__aeabi_dadd+0x54>
   33f06:	e137      	b.n	34178 <__aeabi_dadd+0x2c4>
   33f08:	1aba      	subs	r2, r7, r2
   33f0a:	4297      	cmp	r7, r2
   33f0c:	41bf      	sbcs	r7, r7
   33f0e:	1a64      	subs	r4, r4, r1
   33f10:	427f      	negs	r7, r7
   33f12:	1be4      	subs	r4, r4, r7
   33f14:	2601      	movs	r6, #1
   33f16:	0017      	movs	r7, r2
   33f18:	e024      	b.n	33f64 <__aeabi_dadd+0xb0>
   33f1a:	4bc6      	ldr	r3, [pc, #792]	; (34234 <__aeabi_dadd+0x380>)
   33f1c:	429e      	cmp	r6, r3
   33f1e:	d04d      	beq.n	33fbc <__aeabi_dadd+0x108>
   33f20:	2380      	movs	r3, #128	; 0x80
   33f22:	041b      	lsls	r3, r3, #16
   33f24:	4319      	orrs	r1, r3
   33f26:	2d38      	cmp	r5, #56	; 0x38
   33f28:	dd00      	ble.n	33f2c <__aeabi_dadd+0x78>
   33f2a:	e107      	b.n	3413c <__aeabi_dadd+0x288>
   33f2c:	2d1f      	cmp	r5, #31
   33f2e:	dd00      	ble.n	33f32 <__aeabi_dadd+0x7e>
   33f30:	e138      	b.n	341a4 <__aeabi_dadd+0x2f0>
   33f32:	2020      	movs	r0, #32
   33f34:	1b43      	subs	r3, r0, r5
   33f36:	469a      	mov	sl, r3
   33f38:	000b      	movs	r3, r1
   33f3a:	4650      	mov	r0, sl
   33f3c:	4083      	lsls	r3, r0
   33f3e:	4699      	mov	r9, r3
   33f40:	0013      	movs	r3, r2
   33f42:	4648      	mov	r0, r9
   33f44:	40eb      	lsrs	r3, r5
   33f46:	4318      	orrs	r0, r3
   33f48:	0003      	movs	r3, r0
   33f4a:	4650      	mov	r0, sl
   33f4c:	4082      	lsls	r2, r0
   33f4e:	1e50      	subs	r0, r2, #1
   33f50:	4182      	sbcs	r2, r0
   33f52:	40e9      	lsrs	r1, r5
   33f54:	431a      	orrs	r2, r3
   33f56:	1aba      	subs	r2, r7, r2
   33f58:	1a61      	subs	r1, r4, r1
   33f5a:	4297      	cmp	r7, r2
   33f5c:	41a4      	sbcs	r4, r4
   33f5e:	0017      	movs	r7, r2
   33f60:	4264      	negs	r4, r4
   33f62:	1b0c      	subs	r4, r1, r4
   33f64:	0223      	lsls	r3, r4, #8
   33f66:	d562      	bpl.n	3402e <__aeabi_dadd+0x17a>
   33f68:	0264      	lsls	r4, r4, #9
   33f6a:	0a65      	lsrs	r5, r4, #9
   33f6c:	2d00      	cmp	r5, #0
   33f6e:	d100      	bne.n	33f72 <__aeabi_dadd+0xbe>
   33f70:	e0df      	b.n	34132 <__aeabi_dadd+0x27e>
   33f72:	0028      	movs	r0, r5
   33f74:	f001 fbe4 	bl	35740 <__clzsi2>
   33f78:	0003      	movs	r3, r0
   33f7a:	3b08      	subs	r3, #8
   33f7c:	2b1f      	cmp	r3, #31
   33f7e:	dd00      	ble.n	33f82 <__aeabi_dadd+0xce>
   33f80:	e0d2      	b.n	34128 <__aeabi_dadd+0x274>
   33f82:	2220      	movs	r2, #32
   33f84:	003c      	movs	r4, r7
   33f86:	1ad2      	subs	r2, r2, r3
   33f88:	409d      	lsls	r5, r3
   33f8a:	40d4      	lsrs	r4, r2
   33f8c:	409f      	lsls	r7, r3
   33f8e:	4325      	orrs	r5, r4
   33f90:	429e      	cmp	r6, r3
   33f92:	dd00      	ble.n	33f96 <__aeabi_dadd+0xe2>
   33f94:	e0c4      	b.n	34120 <__aeabi_dadd+0x26c>
   33f96:	1b9e      	subs	r6, r3, r6
   33f98:	1c73      	adds	r3, r6, #1
   33f9a:	2b1f      	cmp	r3, #31
   33f9c:	dd00      	ble.n	33fa0 <__aeabi_dadd+0xec>
   33f9e:	e0f1      	b.n	34184 <__aeabi_dadd+0x2d0>
   33fa0:	2220      	movs	r2, #32
   33fa2:	0038      	movs	r0, r7
   33fa4:	0029      	movs	r1, r5
   33fa6:	1ad2      	subs	r2, r2, r3
   33fa8:	40d8      	lsrs	r0, r3
   33faa:	4091      	lsls	r1, r2
   33fac:	4097      	lsls	r7, r2
   33fae:	002c      	movs	r4, r5
   33fb0:	4301      	orrs	r1, r0
   33fb2:	1e78      	subs	r0, r7, #1
   33fb4:	4187      	sbcs	r7, r0
   33fb6:	40dc      	lsrs	r4, r3
   33fb8:	2600      	movs	r6, #0
   33fba:	430f      	orrs	r7, r1
   33fbc:	077b      	lsls	r3, r7, #29
   33fbe:	d009      	beq.n	33fd4 <__aeabi_dadd+0x120>
   33fc0:	230f      	movs	r3, #15
   33fc2:	403b      	ands	r3, r7
   33fc4:	2b04      	cmp	r3, #4
   33fc6:	d005      	beq.n	33fd4 <__aeabi_dadd+0x120>
   33fc8:	1d3b      	adds	r3, r7, #4
   33fca:	42bb      	cmp	r3, r7
   33fcc:	41bf      	sbcs	r7, r7
   33fce:	427f      	negs	r7, r7
   33fd0:	19e4      	adds	r4, r4, r7
   33fd2:	001f      	movs	r7, r3
   33fd4:	0223      	lsls	r3, r4, #8
   33fd6:	d52c      	bpl.n	34032 <__aeabi_dadd+0x17e>
   33fd8:	4b96      	ldr	r3, [pc, #600]	; (34234 <__aeabi_dadd+0x380>)
   33fda:	3601      	adds	r6, #1
   33fdc:	429e      	cmp	r6, r3
   33fde:	d100      	bne.n	33fe2 <__aeabi_dadd+0x12e>
   33fe0:	e09a      	b.n	34118 <__aeabi_dadd+0x264>
   33fe2:	4645      	mov	r5, r8
   33fe4:	4b94      	ldr	r3, [pc, #592]	; (34238 <__aeabi_dadd+0x384>)
   33fe6:	08ff      	lsrs	r7, r7, #3
   33fe8:	401c      	ands	r4, r3
   33fea:	0760      	lsls	r0, r4, #29
   33fec:	0576      	lsls	r6, r6, #21
   33fee:	0264      	lsls	r4, r4, #9
   33ff0:	4307      	orrs	r7, r0
   33ff2:	0b24      	lsrs	r4, r4, #12
   33ff4:	0d76      	lsrs	r6, r6, #21
   33ff6:	2100      	movs	r1, #0
   33ff8:	0324      	lsls	r4, r4, #12
   33ffa:	0b23      	lsrs	r3, r4, #12
   33ffc:	0d0c      	lsrs	r4, r1, #20
   33ffe:	4a8f      	ldr	r2, [pc, #572]	; (3423c <__aeabi_dadd+0x388>)
   34000:	0524      	lsls	r4, r4, #20
   34002:	431c      	orrs	r4, r3
   34004:	4014      	ands	r4, r2
   34006:	0533      	lsls	r3, r6, #20
   34008:	4323      	orrs	r3, r4
   3400a:	005b      	lsls	r3, r3, #1
   3400c:	07ed      	lsls	r5, r5, #31
   3400e:	085b      	lsrs	r3, r3, #1
   34010:	432b      	orrs	r3, r5
   34012:	0038      	movs	r0, r7
   34014:	0019      	movs	r1, r3
   34016:	bc3c      	pop	{r2, r3, r4, r5}
   34018:	4690      	mov	r8, r2
   3401a:	4699      	mov	r9, r3
   3401c:	46a2      	mov	sl, r4
   3401e:	46ab      	mov	fp, r5
   34020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   34022:	4664      	mov	r4, ip
   34024:	4304      	orrs	r4, r0
   34026:	d100      	bne.n	3402a <__aeabi_dadd+0x176>
   34028:	e211      	b.n	3444e <__aeabi_dadd+0x59a>
   3402a:	0004      	movs	r4, r0
   3402c:	4667      	mov	r7, ip
   3402e:	077b      	lsls	r3, r7, #29
   34030:	d1c6      	bne.n	33fc0 <__aeabi_dadd+0x10c>
   34032:	4645      	mov	r5, r8
   34034:	0760      	lsls	r0, r4, #29
   34036:	08ff      	lsrs	r7, r7, #3
   34038:	4307      	orrs	r7, r0
   3403a:	08e4      	lsrs	r4, r4, #3
   3403c:	4b7d      	ldr	r3, [pc, #500]	; (34234 <__aeabi_dadd+0x380>)
   3403e:	429e      	cmp	r6, r3
   34040:	d030      	beq.n	340a4 <__aeabi_dadd+0x1f0>
   34042:	0324      	lsls	r4, r4, #12
   34044:	0576      	lsls	r6, r6, #21
   34046:	0b24      	lsrs	r4, r4, #12
   34048:	0d76      	lsrs	r6, r6, #21
   3404a:	e7d4      	b.n	33ff6 <__aeabi_dadd+0x142>
   3404c:	1a33      	subs	r3, r6, r0
   3404e:	469a      	mov	sl, r3
   34050:	2b00      	cmp	r3, #0
   34052:	dd78      	ble.n	34146 <__aeabi_dadd+0x292>
   34054:	2800      	cmp	r0, #0
   34056:	d031      	beq.n	340bc <__aeabi_dadd+0x208>
   34058:	4876      	ldr	r0, [pc, #472]	; (34234 <__aeabi_dadd+0x380>)
   3405a:	4286      	cmp	r6, r0
   3405c:	d0ae      	beq.n	33fbc <__aeabi_dadd+0x108>
   3405e:	2080      	movs	r0, #128	; 0x80
   34060:	0400      	lsls	r0, r0, #16
   34062:	4301      	orrs	r1, r0
   34064:	4653      	mov	r3, sl
   34066:	2b38      	cmp	r3, #56	; 0x38
   34068:	dc00      	bgt.n	3406c <__aeabi_dadd+0x1b8>
   3406a:	e0e9      	b.n	34240 <__aeabi_dadd+0x38c>
   3406c:	430a      	orrs	r2, r1
   3406e:	1e51      	subs	r1, r2, #1
   34070:	418a      	sbcs	r2, r1
   34072:	2100      	movs	r1, #0
   34074:	19d2      	adds	r2, r2, r7
   34076:	42ba      	cmp	r2, r7
   34078:	41bf      	sbcs	r7, r7
   3407a:	1909      	adds	r1, r1, r4
   3407c:	427c      	negs	r4, r7
   3407e:	0017      	movs	r7, r2
   34080:	190c      	adds	r4, r1, r4
   34082:	0223      	lsls	r3, r4, #8
   34084:	d5d3      	bpl.n	3402e <__aeabi_dadd+0x17a>
   34086:	4b6b      	ldr	r3, [pc, #428]	; (34234 <__aeabi_dadd+0x380>)
   34088:	3601      	adds	r6, #1
   3408a:	429e      	cmp	r6, r3
   3408c:	d100      	bne.n	34090 <__aeabi_dadd+0x1dc>
   3408e:	e13a      	b.n	34306 <__aeabi_dadd+0x452>
   34090:	2001      	movs	r0, #1
   34092:	4b69      	ldr	r3, [pc, #420]	; (34238 <__aeabi_dadd+0x384>)
   34094:	401c      	ands	r4, r3
   34096:	087b      	lsrs	r3, r7, #1
   34098:	4007      	ands	r7, r0
   3409a:	431f      	orrs	r7, r3
   3409c:	07e0      	lsls	r0, r4, #31
   3409e:	4307      	orrs	r7, r0
   340a0:	0864      	lsrs	r4, r4, #1
   340a2:	e78b      	b.n	33fbc <__aeabi_dadd+0x108>
   340a4:	0023      	movs	r3, r4
   340a6:	433b      	orrs	r3, r7
   340a8:	d100      	bne.n	340ac <__aeabi_dadd+0x1f8>
   340aa:	e1cb      	b.n	34444 <__aeabi_dadd+0x590>
   340ac:	2280      	movs	r2, #128	; 0x80
   340ae:	0312      	lsls	r2, r2, #12
   340b0:	4314      	orrs	r4, r2
   340b2:	0324      	lsls	r4, r4, #12
   340b4:	0b24      	lsrs	r4, r4, #12
   340b6:	e79e      	b.n	33ff6 <__aeabi_dadd+0x142>
   340b8:	002e      	movs	r6, r5
   340ba:	e77f      	b.n	33fbc <__aeabi_dadd+0x108>
   340bc:	0008      	movs	r0, r1
   340be:	4310      	orrs	r0, r2
   340c0:	d100      	bne.n	340c4 <__aeabi_dadd+0x210>
   340c2:	e0b4      	b.n	3422e <__aeabi_dadd+0x37a>
   340c4:	1e58      	subs	r0, r3, #1
   340c6:	2800      	cmp	r0, #0
   340c8:	d000      	beq.n	340cc <__aeabi_dadd+0x218>
   340ca:	e0de      	b.n	3428a <__aeabi_dadd+0x3d6>
   340cc:	18ba      	adds	r2, r7, r2
   340ce:	42ba      	cmp	r2, r7
   340d0:	419b      	sbcs	r3, r3
   340d2:	1864      	adds	r4, r4, r1
   340d4:	425b      	negs	r3, r3
   340d6:	18e4      	adds	r4, r4, r3
   340d8:	0017      	movs	r7, r2
   340da:	2601      	movs	r6, #1
   340dc:	0223      	lsls	r3, r4, #8
   340de:	d5a6      	bpl.n	3402e <__aeabi_dadd+0x17a>
   340e0:	2602      	movs	r6, #2
   340e2:	e7d5      	b.n	34090 <__aeabi_dadd+0x1dc>
   340e4:	2d00      	cmp	r5, #0
   340e6:	d16e      	bne.n	341c6 <__aeabi_dadd+0x312>
   340e8:	1c70      	adds	r0, r6, #1
   340ea:	0540      	lsls	r0, r0, #21
   340ec:	0d40      	lsrs	r0, r0, #21
   340ee:	2801      	cmp	r0, #1
   340f0:	dc00      	bgt.n	340f4 <__aeabi_dadd+0x240>
   340f2:	e0f9      	b.n	342e8 <__aeabi_dadd+0x434>
   340f4:	1ab8      	subs	r0, r7, r2
   340f6:	4684      	mov	ip, r0
   340f8:	4287      	cmp	r7, r0
   340fa:	4180      	sbcs	r0, r0
   340fc:	1ae5      	subs	r5, r4, r3
   340fe:	4240      	negs	r0, r0
   34100:	1a2d      	subs	r5, r5, r0
   34102:	0228      	lsls	r0, r5, #8
   34104:	d400      	bmi.n	34108 <__aeabi_dadd+0x254>
   34106:	e089      	b.n	3421c <__aeabi_dadd+0x368>
   34108:	1bd7      	subs	r7, r2, r7
   3410a:	42ba      	cmp	r2, r7
   3410c:	4192      	sbcs	r2, r2
   3410e:	1b1c      	subs	r4, r3, r4
   34110:	4252      	negs	r2, r2
   34112:	1aa5      	subs	r5, r4, r2
   34114:	46d8      	mov	r8, fp
   34116:	e729      	b.n	33f6c <__aeabi_dadd+0xb8>
   34118:	4645      	mov	r5, r8
   3411a:	2400      	movs	r4, #0
   3411c:	2700      	movs	r7, #0
   3411e:	e76a      	b.n	33ff6 <__aeabi_dadd+0x142>
   34120:	4c45      	ldr	r4, [pc, #276]	; (34238 <__aeabi_dadd+0x384>)
   34122:	1af6      	subs	r6, r6, r3
   34124:	402c      	ands	r4, r5
   34126:	e749      	b.n	33fbc <__aeabi_dadd+0x108>
   34128:	003d      	movs	r5, r7
   3412a:	3828      	subs	r0, #40	; 0x28
   3412c:	4085      	lsls	r5, r0
   3412e:	2700      	movs	r7, #0
   34130:	e72e      	b.n	33f90 <__aeabi_dadd+0xdc>
   34132:	0038      	movs	r0, r7
   34134:	f001 fb04 	bl	35740 <__clzsi2>
   34138:	3020      	adds	r0, #32
   3413a:	e71d      	b.n	33f78 <__aeabi_dadd+0xc4>
   3413c:	430a      	orrs	r2, r1
   3413e:	1e51      	subs	r1, r2, #1
   34140:	418a      	sbcs	r2, r1
   34142:	2100      	movs	r1, #0
   34144:	e707      	b.n	33f56 <__aeabi_dadd+0xa2>
   34146:	2b00      	cmp	r3, #0
   34148:	d000      	beq.n	3414c <__aeabi_dadd+0x298>
   3414a:	e0f3      	b.n	34334 <__aeabi_dadd+0x480>
   3414c:	1c70      	adds	r0, r6, #1
   3414e:	0543      	lsls	r3, r0, #21
   34150:	0d5b      	lsrs	r3, r3, #21
   34152:	2b01      	cmp	r3, #1
   34154:	dc00      	bgt.n	34158 <__aeabi_dadd+0x2a4>
   34156:	e0ad      	b.n	342b4 <__aeabi_dadd+0x400>
   34158:	4b36      	ldr	r3, [pc, #216]	; (34234 <__aeabi_dadd+0x380>)
   3415a:	4298      	cmp	r0, r3
   3415c:	d100      	bne.n	34160 <__aeabi_dadd+0x2ac>
   3415e:	e0d1      	b.n	34304 <__aeabi_dadd+0x450>
   34160:	18ba      	adds	r2, r7, r2
   34162:	42ba      	cmp	r2, r7
   34164:	41bf      	sbcs	r7, r7
   34166:	1864      	adds	r4, r4, r1
   34168:	427f      	negs	r7, r7
   3416a:	19e4      	adds	r4, r4, r7
   3416c:	07e7      	lsls	r7, r4, #31
   3416e:	0852      	lsrs	r2, r2, #1
   34170:	4317      	orrs	r7, r2
   34172:	0864      	lsrs	r4, r4, #1
   34174:	0006      	movs	r6, r0
   34176:	e721      	b.n	33fbc <__aeabi_dadd+0x108>
   34178:	482e      	ldr	r0, [pc, #184]	; (34234 <__aeabi_dadd+0x380>)
   3417a:	4285      	cmp	r5, r0
   3417c:	d100      	bne.n	34180 <__aeabi_dadd+0x2cc>
   3417e:	e093      	b.n	342a8 <__aeabi_dadd+0x3f4>
   34180:	001d      	movs	r5, r3
   34182:	e6d0      	b.n	33f26 <__aeabi_dadd+0x72>
   34184:	0029      	movs	r1, r5
   34186:	3e1f      	subs	r6, #31
   34188:	40f1      	lsrs	r1, r6
   3418a:	2b20      	cmp	r3, #32
   3418c:	d100      	bne.n	34190 <__aeabi_dadd+0x2dc>
   3418e:	e08d      	b.n	342ac <__aeabi_dadd+0x3f8>
   34190:	2240      	movs	r2, #64	; 0x40
   34192:	1ad3      	subs	r3, r2, r3
   34194:	409d      	lsls	r5, r3
   34196:	432f      	orrs	r7, r5
   34198:	1e7d      	subs	r5, r7, #1
   3419a:	41af      	sbcs	r7, r5
   3419c:	2400      	movs	r4, #0
   3419e:	430f      	orrs	r7, r1
   341a0:	2600      	movs	r6, #0
   341a2:	e744      	b.n	3402e <__aeabi_dadd+0x17a>
   341a4:	002b      	movs	r3, r5
   341a6:	0008      	movs	r0, r1
   341a8:	3b20      	subs	r3, #32
   341aa:	40d8      	lsrs	r0, r3
   341ac:	0003      	movs	r3, r0
   341ae:	2d20      	cmp	r5, #32
   341b0:	d100      	bne.n	341b4 <__aeabi_dadd+0x300>
   341b2:	e07d      	b.n	342b0 <__aeabi_dadd+0x3fc>
   341b4:	2040      	movs	r0, #64	; 0x40
   341b6:	1b45      	subs	r5, r0, r5
   341b8:	40a9      	lsls	r1, r5
   341ba:	430a      	orrs	r2, r1
   341bc:	1e51      	subs	r1, r2, #1
   341be:	418a      	sbcs	r2, r1
   341c0:	2100      	movs	r1, #0
   341c2:	431a      	orrs	r2, r3
   341c4:	e6c7      	b.n	33f56 <__aeabi_dadd+0xa2>
   341c6:	2e00      	cmp	r6, #0
   341c8:	d050      	beq.n	3426c <__aeabi_dadd+0x3b8>
   341ca:	4e1a      	ldr	r6, [pc, #104]	; (34234 <__aeabi_dadd+0x380>)
   341cc:	42b0      	cmp	r0, r6
   341ce:	d057      	beq.n	34280 <__aeabi_dadd+0x3cc>
   341d0:	2680      	movs	r6, #128	; 0x80
   341d2:	426b      	negs	r3, r5
   341d4:	4699      	mov	r9, r3
   341d6:	0436      	lsls	r6, r6, #16
   341d8:	4334      	orrs	r4, r6
   341da:	464b      	mov	r3, r9
   341dc:	2b38      	cmp	r3, #56	; 0x38
   341de:	dd00      	ble.n	341e2 <__aeabi_dadd+0x32e>
   341e0:	e0d6      	b.n	34390 <__aeabi_dadd+0x4dc>
   341e2:	2b1f      	cmp	r3, #31
   341e4:	dd00      	ble.n	341e8 <__aeabi_dadd+0x334>
   341e6:	e135      	b.n	34454 <__aeabi_dadd+0x5a0>
   341e8:	2620      	movs	r6, #32
   341ea:	1af5      	subs	r5, r6, r3
   341ec:	0026      	movs	r6, r4
   341ee:	40ae      	lsls	r6, r5
   341f0:	46b2      	mov	sl, r6
   341f2:	003e      	movs	r6, r7
   341f4:	40de      	lsrs	r6, r3
   341f6:	46ac      	mov	ip, r5
   341f8:	0035      	movs	r5, r6
   341fa:	4656      	mov	r6, sl
   341fc:	432e      	orrs	r6, r5
   341fe:	4665      	mov	r5, ip
   34200:	40af      	lsls	r7, r5
   34202:	1e7d      	subs	r5, r7, #1
   34204:	41af      	sbcs	r7, r5
   34206:	40dc      	lsrs	r4, r3
   34208:	4337      	orrs	r7, r6
   3420a:	1bd7      	subs	r7, r2, r7
   3420c:	42ba      	cmp	r2, r7
   3420e:	4192      	sbcs	r2, r2
   34210:	1b0c      	subs	r4, r1, r4
   34212:	4252      	negs	r2, r2
   34214:	1aa4      	subs	r4, r4, r2
   34216:	0006      	movs	r6, r0
   34218:	46d8      	mov	r8, fp
   3421a:	e6a3      	b.n	33f64 <__aeabi_dadd+0xb0>
   3421c:	4664      	mov	r4, ip
   3421e:	4667      	mov	r7, ip
   34220:	432c      	orrs	r4, r5
   34222:	d000      	beq.n	34226 <__aeabi_dadd+0x372>
   34224:	e6a2      	b.n	33f6c <__aeabi_dadd+0xb8>
   34226:	2500      	movs	r5, #0
   34228:	2600      	movs	r6, #0
   3422a:	2700      	movs	r7, #0
   3422c:	e706      	b.n	3403c <__aeabi_dadd+0x188>
   3422e:	001e      	movs	r6, r3
   34230:	e6c4      	b.n	33fbc <__aeabi_dadd+0x108>
   34232:	46c0      	nop			; (mov r8, r8)
   34234:	000007ff 	.word	0x000007ff
   34238:	ff7fffff 	.word	0xff7fffff
   3423c:	800fffff 	.word	0x800fffff
   34240:	2b1f      	cmp	r3, #31
   34242:	dc63      	bgt.n	3430c <__aeabi_dadd+0x458>
   34244:	2020      	movs	r0, #32
   34246:	1ac3      	subs	r3, r0, r3
   34248:	0008      	movs	r0, r1
   3424a:	4098      	lsls	r0, r3
   3424c:	469c      	mov	ip, r3
   3424e:	4683      	mov	fp, r0
   34250:	4653      	mov	r3, sl
   34252:	0010      	movs	r0, r2
   34254:	40d8      	lsrs	r0, r3
   34256:	0003      	movs	r3, r0
   34258:	4658      	mov	r0, fp
   3425a:	4318      	orrs	r0, r3
   3425c:	4663      	mov	r3, ip
   3425e:	409a      	lsls	r2, r3
   34260:	1e53      	subs	r3, r2, #1
   34262:	419a      	sbcs	r2, r3
   34264:	4653      	mov	r3, sl
   34266:	4302      	orrs	r2, r0
   34268:	40d9      	lsrs	r1, r3
   3426a:	e703      	b.n	34074 <__aeabi_dadd+0x1c0>
   3426c:	0026      	movs	r6, r4
   3426e:	433e      	orrs	r6, r7
   34270:	d006      	beq.n	34280 <__aeabi_dadd+0x3cc>
   34272:	43eb      	mvns	r3, r5
   34274:	4699      	mov	r9, r3
   34276:	2b00      	cmp	r3, #0
   34278:	d0c7      	beq.n	3420a <__aeabi_dadd+0x356>
   3427a:	4e94      	ldr	r6, [pc, #592]	; (344cc <__aeabi_dadd+0x618>)
   3427c:	42b0      	cmp	r0, r6
   3427e:	d1ac      	bne.n	341da <__aeabi_dadd+0x326>
   34280:	000c      	movs	r4, r1
   34282:	0017      	movs	r7, r2
   34284:	0006      	movs	r6, r0
   34286:	46d8      	mov	r8, fp
   34288:	e698      	b.n	33fbc <__aeabi_dadd+0x108>
   3428a:	4b90      	ldr	r3, [pc, #576]	; (344cc <__aeabi_dadd+0x618>)
   3428c:	459a      	cmp	sl, r3
   3428e:	d00b      	beq.n	342a8 <__aeabi_dadd+0x3f4>
   34290:	4682      	mov	sl, r0
   34292:	e6e7      	b.n	34064 <__aeabi_dadd+0x1b0>
   34294:	2800      	cmp	r0, #0
   34296:	d000      	beq.n	3429a <__aeabi_dadd+0x3e6>
   34298:	e09e      	b.n	343d8 <__aeabi_dadd+0x524>
   3429a:	0018      	movs	r0, r3
   3429c:	4310      	orrs	r0, r2
   3429e:	d100      	bne.n	342a2 <__aeabi_dadd+0x3ee>
   342a0:	e0e9      	b.n	34476 <__aeabi_dadd+0x5c2>
   342a2:	001c      	movs	r4, r3
   342a4:	0017      	movs	r7, r2
   342a6:	46d8      	mov	r8, fp
   342a8:	4e88      	ldr	r6, [pc, #544]	; (344cc <__aeabi_dadd+0x618>)
   342aa:	e687      	b.n	33fbc <__aeabi_dadd+0x108>
   342ac:	2500      	movs	r5, #0
   342ae:	e772      	b.n	34196 <__aeabi_dadd+0x2e2>
   342b0:	2100      	movs	r1, #0
   342b2:	e782      	b.n	341ba <__aeabi_dadd+0x306>
   342b4:	0023      	movs	r3, r4
   342b6:	433b      	orrs	r3, r7
   342b8:	2e00      	cmp	r6, #0
   342ba:	d000      	beq.n	342be <__aeabi_dadd+0x40a>
   342bc:	e0ab      	b.n	34416 <__aeabi_dadd+0x562>
   342be:	2b00      	cmp	r3, #0
   342c0:	d100      	bne.n	342c4 <__aeabi_dadd+0x410>
   342c2:	e0e7      	b.n	34494 <__aeabi_dadd+0x5e0>
   342c4:	000b      	movs	r3, r1
   342c6:	4313      	orrs	r3, r2
   342c8:	d100      	bne.n	342cc <__aeabi_dadd+0x418>
   342ca:	e677      	b.n	33fbc <__aeabi_dadd+0x108>
   342cc:	18ba      	adds	r2, r7, r2
   342ce:	42ba      	cmp	r2, r7
   342d0:	41bf      	sbcs	r7, r7
   342d2:	1864      	adds	r4, r4, r1
   342d4:	427f      	negs	r7, r7
   342d6:	19e4      	adds	r4, r4, r7
   342d8:	0223      	lsls	r3, r4, #8
   342da:	d400      	bmi.n	342de <__aeabi_dadd+0x42a>
   342dc:	e0f2      	b.n	344c4 <__aeabi_dadd+0x610>
   342de:	4b7c      	ldr	r3, [pc, #496]	; (344d0 <__aeabi_dadd+0x61c>)
   342e0:	0017      	movs	r7, r2
   342e2:	401c      	ands	r4, r3
   342e4:	0006      	movs	r6, r0
   342e6:	e669      	b.n	33fbc <__aeabi_dadd+0x108>
   342e8:	0020      	movs	r0, r4
   342ea:	4338      	orrs	r0, r7
   342ec:	2e00      	cmp	r6, #0
   342ee:	d1d1      	bne.n	34294 <__aeabi_dadd+0x3e0>
   342f0:	2800      	cmp	r0, #0
   342f2:	d15b      	bne.n	343ac <__aeabi_dadd+0x4f8>
   342f4:	001c      	movs	r4, r3
   342f6:	4314      	orrs	r4, r2
   342f8:	d100      	bne.n	342fc <__aeabi_dadd+0x448>
   342fa:	e0a8      	b.n	3444e <__aeabi_dadd+0x59a>
   342fc:	001c      	movs	r4, r3
   342fe:	0017      	movs	r7, r2
   34300:	46d8      	mov	r8, fp
   34302:	e65b      	b.n	33fbc <__aeabi_dadd+0x108>
   34304:	0006      	movs	r6, r0
   34306:	2400      	movs	r4, #0
   34308:	2700      	movs	r7, #0
   3430a:	e697      	b.n	3403c <__aeabi_dadd+0x188>
   3430c:	4650      	mov	r0, sl
   3430e:	000b      	movs	r3, r1
   34310:	3820      	subs	r0, #32
   34312:	40c3      	lsrs	r3, r0
   34314:	4699      	mov	r9, r3
   34316:	4653      	mov	r3, sl
   34318:	2b20      	cmp	r3, #32
   3431a:	d100      	bne.n	3431e <__aeabi_dadd+0x46a>
   3431c:	e095      	b.n	3444a <__aeabi_dadd+0x596>
   3431e:	2340      	movs	r3, #64	; 0x40
   34320:	4650      	mov	r0, sl
   34322:	1a1b      	subs	r3, r3, r0
   34324:	4099      	lsls	r1, r3
   34326:	430a      	orrs	r2, r1
   34328:	1e51      	subs	r1, r2, #1
   3432a:	418a      	sbcs	r2, r1
   3432c:	464b      	mov	r3, r9
   3432e:	2100      	movs	r1, #0
   34330:	431a      	orrs	r2, r3
   34332:	e69f      	b.n	34074 <__aeabi_dadd+0x1c0>
   34334:	2e00      	cmp	r6, #0
   34336:	d130      	bne.n	3439a <__aeabi_dadd+0x4e6>
   34338:	0026      	movs	r6, r4
   3433a:	433e      	orrs	r6, r7
   3433c:	d067      	beq.n	3440e <__aeabi_dadd+0x55a>
   3433e:	43db      	mvns	r3, r3
   34340:	469a      	mov	sl, r3
   34342:	2b00      	cmp	r3, #0
   34344:	d01c      	beq.n	34380 <__aeabi_dadd+0x4cc>
   34346:	4e61      	ldr	r6, [pc, #388]	; (344cc <__aeabi_dadd+0x618>)
   34348:	42b0      	cmp	r0, r6
   3434a:	d060      	beq.n	3440e <__aeabi_dadd+0x55a>
   3434c:	4653      	mov	r3, sl
   3434e:	2b38      	cmp	r3, #56	; 0x38
   34350:	dd00      	ble.n	34354 <__aeabi_dadd+0x4a0>
   34352:	e096      	b.n	34482 <__aeabi_dadd+0x5ce>
   34354:	2b1f      	cmp	r3, #31
   34356:	dd00      	ble.n	3435a <__aeabi_dadd+0x4a6>
   34358:	e09f      	b.n	3449a <__aeabi_dadd+0x5e6>
   3435a:	2620      	movs	r6, #32
   3435c:	1af3      	subs	r3, r6, r3
   3435e:	0026      	movs	r6, r4
   34360:	409e      	lsls	r6, r3
   34362:	469c      	mov	ip, r3
   34364:	46b3      	mov	fp, r6
   34366:	4653      	mov	r3, sl
   34368:	003e      	movs	r6, r7
   3436a:	40de      	lsrs	r6, r3
   3436c:	0033      	movs	r3, r6
   3436e:	465e      	mov	r6, fp
   34370:	431e      	orrs	r6, r3
   34372:	4663      	mov	r3, ip
   34374:	409f      	lsls	r7, r3
   34376:	1e7b      	subs	r3, r7, #1
   34378:	419f      	sbcs	r7, r3
   3437a:	4653      	mov	r3, sl
   3437c:	40dc      	lsrs	r4, r3
   3437e:	4337      	orrs	r7, r6
   34380:	18bf      	adds	r7, r7, r2
   34382:	4297      	cmp	r7, r2
   34384:	4192      	sbcs	r2, r2
   34386:	1864      	adds	r4, r4, r1
   34388:	4252      	negs	r2, r2
   3438a:	18a4      	adds	r4, r4, r2
   3438c:	0006      	movs	r6, r0
   3438e:	e678      	b.n	34082 <__aeabi_dadd+0x1ce>
   34390:	4327      	orrs	r7, r4
   34392:	1e7c      	subs	r4, r7, #1
   34394:	41a7      	sbcs	r7, r4
   34396:	2400      	movs	r4, #0
   34398:	e737      	b.n	3420a <__aeabi_dadd+0x356>
   3439a:	4e4c      	ldr	r6, [pc, #304]	; (344cc <__aeabi_dadd+0x618>)
   3439c:	42b0      	cmp	r0, r6
   3439e:	d036      	beq.n	3440e <__aeabi_dadd+0x55a>
   343a0:	2680      	movs	r6, #128	; 0x80
   343a2:	425b      	negs	r3, r3
   343a4:	0436      	lsls	r6, r6, #16
   343a6:	469a      	mov	sl, r3
   343a8:	4334      	orrs	r4, r6
   343aa:	e7cf      	b.n	3434c <__aeabi_dadd+0x498>
   343ac:	0018      	movs	r0, r3
   343ae:	4310      	orrs	r0, r2
   343b0:	d100      	bne.n	343b4 <__aeabi_dadd+0x500>
   343b2:	e603      	b.n	33fbc <__aeabi_dadd+0x108>
   343b4:	1ab8      	subs	r0, r7, r2
   343b6:	4684      	mov	ip, r0
   343b8:	4567      	cmp	r7, ip
   343ba:	41ad      	sbcs	r5, r5
   343bc:	1ae0      	subs	r0, r4, r3
   343be:	426d      	negs	r5, r5
   343c0:	1b40      	subs	r0, r0, r5
   343c2:	0205      	lsls	r5, r0, #8
   343c4:	d400      	bmi.n	343c8 <__aeabi_dadd+0x514>
   343c6:	e62c      	b.n	34022 <__aeabi_dadd+0x16e>
   343c8:	1bd7      	subs	r7, r2, r7
   343ca:	42ba      	cmp	r2, r7
   343cc:	4192      	sbcs	r2, r2
   343ce:	1b1c      	subs	r4, r3, r4
   343d0:	4252      	negs	r2, r2
   343d2:	1aa4      	subs	r4, r4, r2
   343d4:	46d8      	mov	r8, fp
   343d6:	e5f1      	b.n	33fbc <__aeabi_dadd+0x108>
   343d8:	0018      	movs	r0, r3
   343da:	4310      	orrs	r0, r2
   343dc:	d100      	bne.n	343e0 <__aeabi_dadd+0x52c>
   343de:	e763      	b.n	342a8 <__aeabi_dadd+0x3f4>
   343e0:	08f8      	lsrs	r0, r7, #3
   343e2:	0767      	lsls	r7, r4, #29
   343e4:	4307      	orrs	r7, r0
   343e6:	2080      	movs	r0, #128	; 0x80
   343e8:	08e4      	lsrs	r4, r4, #3
   343ea:	0300      	lsls	r0, r0, #12
   343ec:	4204      	tst	r4, r0
   343ee:	d008      	beq.n	34402 <__aeabi_dadd+0x54e>
   343f0:	08dd      	lsrs	r5, r3, #3
   343f2:	4205      	tst	r5, r0
   343f4:	d105      	bne.n	34402 <__aeabi_dadd+0x54e>
   343f6:	08d2      	lsrs	r2, r2, #3
   343f8:	0759      	lsls	r1, r3, #29
   343fa:	4311      	orrs	r1, r2
   343fc:	000f      	movs	r7, r1
   343fe:	002c      	movs	r4, r5
   34400:	46d8      	mov	r8, fp
   34402:	0f7b      	lsrs	r3, r7, #29
   34404:	00e4      	lsls	r4, r4, #3
   34406:	431c      	orrs	r4, r3
   34408:	00ff      	lsls	r7, r7, #3
   3440a:	4e30      	ldr	r6, [pc, #192]	; (344cc <__aeabi_dadd+0x618>)
   3440c:	e5d6      	b.n	33fbc <__aeabi_dadd+0x108>
   3440e:	000c      	movs	r4, r1
   34410:	0017      	movs	r7, r2
   34412:	0006      	movs	r6, r0
   34414:	e5d2      	b.n	33fbc <__aeabi_dadd+0x108>
   34416:	2b00      	cmp	r3, #0
   34418:	d038      	beq.n	3448c <__aeabi_dadd+0x5d8>
   3441a:	000b      	movs	r3, r1
   3441c:	4313      	orrs	r3, r2
   3441e:	d100      	bne.n	34422 <__aeabi_dadd+0x56e>
   34420:	e742      	b.n	342a8 <__aeabi_dadd+0x3f4>
   34422:	08f8      	lsrs	r0, r7, #3
   34424:	0767      	lsls	r7, r4, #29
   34426:	4307      	orrs	r7, r0
   34428:	2080      	movs	r0, #128	; 0x80
   3442a:	08e4      	lsrs	r4, r4, #3
   3442c:	0300      	lsls	r0, r0, #12
   3442e:	4204      	tst	r4, r0
   34430:	d0e7      	beq.n	34402 <__aeabi_dadd+0x54e>
   34432:	08cb      	lsrs	r3, r1, #3
   34434:	4203      	tst	r3, r0
   34436:	d1e4      	bne.n	34402 <__aeabi_dadd+0x54e>
   34438:	08d2      	lsrs	r2, r2, #3
   3443a:	0749      	lsls	r1, r1, #29
   3443c:	4311      	orrs	r1, r2
   3443e:	000f      	movs	r7, r1
   34440:	001c      	movs	r4, r3
   34442:	e7de      	b.n	34402 <__aeabi_dadd+0x54e>
   34444:	2700      	movs	r7, #0
   34446:	2400      	movs	r4, #0
   34448:	e5d5      	b.n	33ff6 <__aeabi_dadd+0x142>
   3444a:	2100      	movs	r1, #0
   3444c:	e76b      	b.n	34326 <__aeabi_dadd+0x472>
   3444e:	2500      	movs	r5, #0
   34450:	2700      	movs	r7, #0
   34452:	e5f3      	b.n	3403c <__aeabi_dadd+0x188>
   34454:	464e      	mov	r6, r9
   34456:	0025      	movs	r5, r4
   34458:	3e20      	subs	r6, #32
   3445a:	40f5      	lsrs	r5, r6
   3445c:	464b      	mov	r3, r9
   3445e:	002e      	movs	r6, r5
   34460:	2b20      	cmp	r3, #32
   34462:	d02d      	beq.n	344c0 <__aeabi_dadd+0x60c>
   34464:	2540      	movs	r5, #64	; 0x40
   34466:	1aed      	subs	r5, r5, r3
   34468:	40ac      	lsls	r4, r5
   3446a:	4327      	orrs	r7, r4
   3446c:	1e7c      	subs	r4, r7, #1
   3446e:	41a7      	sbcs	r7, r4
   34470:	2400      	movs	r4, #0
   34472:	4337      	orrs	r7, r6
   34474:	e6c9      	b.n	3420a <__aeabi_dadd+0x356>
   34476:	2480      	movs	r4, #128	; 0x80
   34478:	2500      	movs	r5, #0
   3447a:	0324      	lsls	r4, r4, #12
   3447c:	4e13      	ldr	r6, [pc, #76]	; (344cc <__aeabi_dadd+0x618>)
   3447e:	2700      	movs	r7, #0
   34480:	e5dc      	b.n	3403c <__aeabi_dadd+0x188>
   34482:	4327      	orrs	r7, r4
   34484:	1e7c      	subs	r4, r7, #1
   34486:	41a7      	sbcs	r7, r4
   34488:	2400      	movs	r4, #0
   3448a:	e779      	b.n	34380 <__aeabi_dadd+0x4cc>
   3448c:	000c      	movs	r4, r1
   3448e:	0017      	movs	r7, r2
   34490:	4e0e      	ldr	r6, [pc, #56]	; (344cc <__aeabi_dadd+0x618>)
   34492:	e593      	b.n	33fbc <__aeabi_dadd+0x108>
   34494:	000c      	movs	r4, r1
   34496:	0017      	movs	r7, r2
   34498:	e590      	b.n	33fbc <__aeabi_dadd+0x108>
   3449a:	4656      	mov	r6, sl
   3449c:	0023      	movs	r3, r4
   3449e:	3e20      	subs	r6, #32
   344a0:	40f3      	lsrs	r3, r6
   344a2:	4699      	mov	r9, r3
   344a4:	4653      	mov	r3, sl
   344a6:	2b20      	cmp	r3, #32
   344a8:	d00e      	beq.n	344c8 <__aeabi_dadd+0x614>
   344aa:	2340      	movs	r3, #64	; 0x40
   344ac:	4656      	mov	r6, sl
   344ae:	1b9b      	subs	r3, r3, r6
   344b0:	409c      	lsls	r4, r3
   344b2:	4327      	orrs	r7, r4
   344b4:	1e7c      	subs	r4, r7, #1
   344b6:	41a7      	sbcs	r7, r4
   344b8:	464b      	mov	r3, r9
   344ba:	2400      	movs	r4, #0
   344bc:	431f      	orrs	r7, r3
   344be:	e75f      	b.n	34380 <__aeabi_dadd+0x4cc>
   344c0:	2400      	movs	r4, #0
   344c2:	e7d2      	b.n	3446a <__aeabi_dadd+0x5b6>
   344c4:	0017      	movs	r7, r2
   344c6:	e5b2      	b.n	3402e <__aeabi_dadd+0x17a>
   344c8:	2400      	movs	r4, #0
   344ca:	e7f2      	b.n	344b2 <__aeabi_dadd+0x5fe>
   344cc:	000007ff 	.word	0x000007ff
   344d0:	ff7fffff 	.word	0xff7fffff

000344d4 <__aeabi_ddiv>:
   344d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   344d6:	4657      	mov	r7, sl
   344d8:	4645      	mov	r5, r8
   344da:	46de      	mov	lr, fp
   344dc:	464e      	mov	r6, r9
   344de:	b5e0      	push	{r5, r6, r7, lr}
   344e0:	004c      	lsls	r4, r1, #1
   344e2:	030e      	lsls	r6, r1, #12
   344e4:	b087      	sub	sp, #28
   344e6:	4683      	mov	fp, r0
   344e8:	4692      	mov	sl, r2
   344ea:	001d      	movs	r5, r3
   344ec:	4680      	mov	r8, r0
   344ee:	0b36      	lsrs	r6, r6, #12
   344f0:	0d64      	lsrs	r4, r4, #21
   344f2:	0fcf      	lsrs	r7, r1, #31
   344f4:	2c00      	cmp	r4, #0
   344f6:	d04f      	beq.n	34598 <__aeabi_ddiv+0xc4>
   344f8:	4b6f      	ldr	r3, [pc, #444]	; (346b8 <__aeabi_ddiv+0x1e4>)
   344fa:	429c      	cmp	r4, r3
   344fc:	d035      	beq.n	3456a <__aeabi_ddiv+0x96>
   344fe:	2380      	movs	r3, #128	; 0x80
   34500:	0f42      	lsrs	r2, r0, #29
   34502:	041b      	lsls	r3, r3, #16
   34504:	00f6      	lsls	r6, r6, #3
   34506:	4313      	orrs	r3, r2
   34508:	4333      	orrs	r3, r6
   3450a:	4699      	mov	r9, r3
   3450c:	00c3      	lsls	r3, r0, #3
   3450e:	4698      	mov	r8, r3
   34510:	4b6a      	ldr	r3, [pc, #424]	; (346bc <__aeabi_ddiv+0x1e8>)
   34512:	2600      	movs	r6, #0
   34514:	469c      	mov	ip, r3
   34516:	2300      	movs	r3, #0
   34518:	4464      	add	r4, ip
   3451a:	9303      	str	r3, [sp, #12]
   3451c:	032b      	lsls	r3, r5, #12
   3451e:	0b1b      	lsrs	r3, r3, #12
   34520:	469b      	mov	fp, r3
   34522:	006b      	lsls	r3, r5, #1
   34524:	0fed      	lsrs	r5, r5, #31
   34526:	4650      	mov	r0, sl
   34528:	0d5b      	lsrs	r3, r3, #21
   3452a:	9501      	str	r5, [sp, #4]
   3452c:	d05e      	beq.n	345ec <__aeabi_ddiv+0x118>
   3452e:	4a62      	ldr	r2, [pc, #392]	; (346b8 <__aeabi_ddiv+0x1e4>)
   34530:	4293      	cmp	r3, r2
   34532:	d053      	beq.n	345dc <__aeabi_ddiv+0x108>
   34534:	465a      	mov	r2, fp
   34536:	00d1      	lsls	r1, r2, #3
   34538:	2280      	movs	r2, #128	; 0x80
   3453a:	0f40      	lsrs	r0, r0, #29
   3453c:	0412      	lsls	r2, r2, #16
   3453e:	4302      	orrs	r2, r0
   34540:	430a      	orrs	r2, r1
   34542:	4693      	mov	fp, r2
   34544:	4652      	mov	r2, sl
   34546:	00d1      	lsls	r1, r2, #3
   34548:	4a5c      	ldr	r2, [pc, #368]	; (346bc <__aeabi_ddiv+0x1e8>)
   3454a:	4694      	mov	ip, r2
   3454c:	2200      	movs	r2, #0
   3454e:	4463      	add	r3, ip
   34550:	0038      	movs	r0, r7
   34552:	4068      	eors	r0, r5
   34554:	4684      	mov	ip, r0
   34556:	9002      	str	r0, [sp, #8]
   34558:	1ae4      	subs	r4, r4, r3
   3455a:	4316      	orrs	r6, r2
   3455c:	2e0f      	cmp	r6, #15
   3455e:	d900      	bls.n	34562 <__aeabi_ddiv+0x8e>
   34560:	e0b4      	b.n	346cc <__aeabi_ddiv+0x1f8>
   34562:	4b57      	ldr	r3, [pc, #348]	; (346c0 <__aeabi_ddiv+0x1ec>)
   34564:	00b6      	lsls	r6, r6, #2
   34566:	599b      	ldr	r3, [r3, r6]
   34568:	469f      	mov	pc, r3
   3456a:	0003      	movs	r3, r0
   3456c:	4333      	orrs	r3, r6
   3456e:	4699      	mov	r9, r3
   34570:	d16c      	bne.n	3464c <__aeabi_ddiv+0x178>
   34572:	2300      	movs	r3, #0
   34574:	4698      	mov	r8, r3
   34576:	3302      	adds	r3, #2
   34578:	2608      	movs	r6, #8
   3457a:	9303      	str	r3, [sp, #12]
   3457c:	e7ce      	b.n	3451c <__aeabi_ddiv+0x48>
   3457e:	46cb      	mov	fp, r9
   34580:	4641      	mov	r1, r8
   34582:	9a03      	ldr	r2, [sp, #12]
   34584:	9701      	str	r7, [sp, #4]
   34586:	2a02      	cmp	r2, #2
   34588:	d165      	bne.n	34656 <__aeabi_ddiv+0x182>
   3458a:	9b01      	ldr	r3, [sp, #4]
   3458c:	4c4a      	ldr	r4, [pc, #296]	; (346b8 <__aeabi_ddiv+0x1e4>)
   3458e:	469c      	mov	ip, r3
   34590:	2300      	movs	r3, #0
   34592:	2200      	movs	r2, #0
   34594:	4698      	mov	r8, r3
   34596:	e06b      	b.n	34670 <__aeabi_ddiv+0x19c>
   34598:	0003      	movs	r3, r0
   3459a:	4333      	orrs	r3, r6
   3459c:	4699      	mov	r9, r3
   3459e:	d04e      	beq.n	3463e <__aeabi_ddiv+0x16a>
   345a0:	2e00      	cmp	r6, #0
   345a2:	d100      	bne.n	345a6 <__aeabi_ddiv+0xd2>
   345a4:	e1bc      	b.n	34920 <__aeabi_ddiv+0x44c>
   345a6:	0030      	movs	r0, r6
   345a8:	f001 f8ca 	bl	35740 <__clzsi2>
   345ac:	0003      	movs	r3, r0
   345ae:	3b0b      	subs	r3, #11
   345b0:	2b1c      	cmp	r3, #28
   345b2:	dd00      	ble.n	345b6 <__aeabi_ddiv+0xe2>
   345b4:	e1ac      	b.n	34910 <__aeabi_ddiv+0x43c>
   345b6:	221d      	movs	r2, #29
   345b8:	1ad3      	subs	r3, r2, r3
   345ba:	465a      	mov	r2, fp
   345bc:	0001      	movs	r1, r0
   345be:	40da      	lsrs	r2, r3
   345c0:	3908      	subs	r1, #8
   345c2:	408e      	lsls	r6, r1
   345c4:	0013      	movs	r3, r2
   345c6:	4333      	orrs	r3, r6
   345c8:	4699      	mov	r9, r3
   345ca:	465b      	mov	r3, fp
   345cc:	408b      	lsls	r3, r1
   345ce:	4698      	mov	r8, r3
   345d0:	2300      	movs	r3, #0
   345d2:	4c3c      	ldr	r4, [pc, #240]	; (346c4 <__aeabi_ddiv+0x1f0>)
   345d4:	2600      	movs	r6, #0
   345d6:	1a24      	subs	r4, r4, r0
   345d8:	9303      	str	r3, [sp, #12]
   345da:	e79f      	b.n	3451c <__aeabi_ddiv+0x48>
   345dc:	4651      	mov	r1, sl
   345de:	465a      	mov	r2, fp
   345e0:	4311      	orrs	r1, r2
   345e2:	d129      	bne.n	34638 <__aeabi_ddiv+0x164>
   345e4:	2200      	movs	r2, #0
   345e6:	4693      	mov	fp, r2
   345e8:	3202      	adds	r2, #2
   345ea:	e7b1      	b.n	34550 <__aeabi_ddiv+0x7c>
   345ec:	4659      	mov	r1, fp
   345ee:	4301      	orrs	r1, r0
   345f0:	d01e      	beq.n	34630 <__aeabi_ddiv+0x15c>
   345f2:	465b      	mov	r3, fp
   345f4:	2b00      	cmp	r3, #0
   345f6:	d100      	bne.n	345fa <__aeabi_ddiv+0x126>
   345f8:	e19e      	b.n	34938 <__aeabi_ddiv+0x464>
   345fa:	4658      	mov	r0, fp
   345fc:	f001 f8a0 	bl	35740 <__clzsi2>
   34600:	0003      	movs	r3, r0
   34602:	3b0b      	subs	r3, #11
   34604:	2b1c      	cmp	r3, #28
   34606:	dd00      	ble.n	3460a <__aeabi_ddiv+0x136>
   34608:	e18f      	b.n	3492a <__aeabi_ddiv+0x456>
   3460a:	0002      	movs	r2, r0
   3460c:	4659      	mov	r1, fp
   3460e:	3a08      	subs	r2, #8
   34610:	4091      	lsls	r1, r2
   34612:	468b      	mov	fp, r1
   34614:	211d      	movs	r1, #29
   34616:	1acb      	subs	r3, r1, r3
   34618:	4651      	mov	r1, sl
   3461a:	40d9      	lsrs	r1, r3
   3461c:	000b      	movs	r3, r1
   3461e:	4659      	mov	r1, fp
   34620:	430b      	orrs	r3, r1
   34622:	4651      	mov	r1, sl
   34624:	469b      	mov	fp, r3
   34626:	4091      	lsls	r1, r2
   34628:	4b26      	ldr	r3, [pc, #152]	; (346c4 <__aeabi_ddiv+0x1f0>)
   3462a:	2200      	movs	r2, #0
   3462c:	1a1b      	subs	r3, r3, r0
   3462e:	e78f      	b.n	34550 <__aeabi_ddiv+0x7c>
   34630:	2300      	movs	r3, #0
   34632:	2201      	movs	r2, #1
   34634:	469b      	mov	fp, r3
   34636:	e78b      	b.n	34550 <__aeabi_ddiv+0x7c>
   34638:	4651      	mov	r1, sl
   3463a:	2203      	movs	r2, #3
   3463c:	e788      	b.n	34550 <__aeabi_ddiv+0x7c>
   3463e:	2300      	movs	r3, #0
   34640:	4698      	mov	r8, r3
   34642:	3301      	adds	r3, #1
   34644:	2604      	movs	r6, #4
   34646:	2400      	movs	r4, #0
   34648:	9303      	str	r3, [sp, #12]
   3464a:	e767      	b.n	3451c <__aeabi_ddiv+0x48>
   3464c:	2303      	movs	r3, #3
   3464e:	46b1      	mov	r9, r6
   34650:	9303      	str	r3, [sp, #12]
   34652:	260c      	movs	r6, #12
   34654:	e762      	b.n	3451c <__aeabi_ddiv+0x48>
   34656:	2a03      	cmp	r2, #3
   34658:	d100      	bne.n	3465c <__aeabi_ddiv+0x188>
   3465a:	e25c      	b.n	34b16 <__aeabi_ddiv+0x642>
   3465c:	9b01      	ldr	r3, [sp, #4]
   3465e:	2a01      	cmp	r2, #1
   34660:	d000      	beq.n	34664 <__aeabi_ddiv+0x190>
   34662:	e1e4      	b.n	34a2e <__aeabi_ddiv+0x55a>
   34664:	4013      	ands	r3, r2
   34666:	469c      	mov	ip, r3
   34668:	2300      	movs	r3, #0
   3466a:	2400      	movs	r4, #0
   3466c:	2200      	movs	r2, #0
   3466e:	4698      	mov	r8, r3
   34670:	2100      	movs	r1, #0
   34672:	0312      	lsls	r2, r2, #12
   34674:	0b13      	lsrs	r3, r2, #12
   34676:	0d0a      	lsrs	r2, r1, #20
   34678:	0512      	lsls	r2, r2, #20
   3467a:	431a      	orrs	r2, r3
   3467c:	0523      	lsls	r3, r4, #20
   3467e:	4c12      	ldr	r4, [pc, #72]	; (346c8 <__aeabi_ddiv+0x1f4>)
   34680:	4640      	mov	r0, r8
   34682:	4022      	ands	r2, r4
   34684:	4313      	orrs	r3, r2
   34686:	4662      	mov	r2, ip
   34688:	005b      	lsls	r3, r3, #1
   3468a:	07d2      	lsls	r2, r2, #31
   3468c:	085b      	lsrs	r3, r3, #1
   3468e:	4313      	orrs	r3, r2
   34690:	0019      	movs	r1, r3
   34692:	b007      	add	sp, #28
   34694:	bc3c      	pop	{r2, r3, r4, r5}
   34696:	4690      	mov	r8, r2
   34698:	4699      	mov	r9, r3
   3469a:	46a2      	mov	sl, r4
   3469c:	46ab      	mov	fp, r5
   3469e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   346a0:	2300      	movs	r3, #0
   346a2:	2280      	movs	r2, #128	; 0x80
   346a4:	469c      	mov	ip, r3
   346a6:	0312      	lsls	r2, r2, #12
   346a8:	4698      	mov	r8, r3
   346aa:	4c03      	ldr	r4, [pc, #12]	; (346b8 <__aeabi_ddiv+0x1e4>)
   346ac:	e7e0      	b.n	34670 <__aeabi_ddiv+0x19c>
   346ae:	2300      	movs	r3, #0
   346b0:	4c01      	ldr	r4, [pc, #4]	; (346b8 <__aeabi_ddiv+0x1e4>)
   346b2:	2200      	movs	r2, #0
   346b4:	4698      	mov	r8, r3
   346b6:	e7db      	b.n	34670 <__aeabi_ddiv+0x19c>
   346b8:	000007ff 	.word	0x000007ff
   346bc:	fffffc01 	.word	0xfffffc01
   346c0:	0003b214 	.word	0x0003b214
   346c4:	fffffc0d 	.word	0xfffffc0d
   346c8:	800fffff 	.word	0x800fffff
   346cc:	45d9      	cmp	r9, fp
   346ce:	d900      	bls.n	346d2 <__aeabi_ddiv+0x1fe>
   346d0:	e139      	b.n	34946 <__aeabi_ddiv+0x472>
   346d2:	d100      	bne.n	346d6 <__aeabi_ddiv+0x202>
   346d4:	e134      	b.n	34940 <__aeabi_ddiv+0x46c>
   346d6:	2300      	movs	r3, #0
   346d8:	4646      	mov	r6, r8
   346da:	464d      	mov	r5, r9
   346dc:	469a      	mov	sl, r3
   346de:	3c01      	subs	r4, #1
   346e0:	465b      	mov	r3, fp
   346e2:	0e0a      	lsrs	r2, r1, #24
   346e4:	021b      	lsls	r3, r3, #8
   346e6:	431a      	orrs	r2, r3
   346e8:	020b      	lsls	r3, r1, #8
   346ea:	0c17      	lsrs	r7, r2, #16
   346ec:	9303      	str	r3, [sp, #12]
   346ee:	0413      	lsls	r3, r2, #16
   346f0:	0c1b      	lsrs	r3, r3, #16
   346f2:	0039      	movs	r1, r7
   346f4:	0028      	movs	r0, r5
   346f6:	4690      	mov	r8, r2
   346f8:	9301      	str	r3, [sp, #4]
   346fa:	f7ff f8ab 	bl	33854 <__udivsi3>
   346fe:	0002      	movs	r2, r0
   34700:	9b01      	ldr	r3, [sp, #4]
   34702:	4683      	mov	fp, r0
   34704:	435a      	muls	r2, r3
   34706:	0028      	movs	r0, r5
   34708:	0039      	movs	r1, r7
   3470a:	4691      	mov	r9, r2
   3470c:	f7ff f928 	bl	33960 <__aeabi_uidivmod>
   34710:	0c35      	lsrs	r5, r6, #16
   34712:	0409      	lsls	r1, r1, #16
   34714:	430d      	orrs	r5, r1
   34716:	45a9      	cmp	r9, r5
   34718:	d90d      	bls.n	34736 <__aeabi_ddiv+0x262>
   3471a:	465b      	mov	r3, fp
   3471c:	4445      	add	r5, r8
   3471e:	3b01      	subs	r3, #1
   34720:	45a8      	cmp	r8, r5
   34722:	d900      	bls.n	34726 <__aeabi_ddiv+0x252>
   34724:	e13a      	b.n	3499c <__aeabi_ddiv+0x4c8>
   34726:	45a9      	cmp	r9, r5
   34728:	d800      	bhi.n	3472c <__aeabi_ddiv+0x258>
   3472a:	e137      	b.n	3499c <__aeabi_ddiv+0x4c8>
   3472c:	2302      	movs	r3, #2
   3472e:	425b      	negs	r3, r3
   34730:	469c      	mov	ip, r3
   34732:	4445      	add	r5, r8
   34734:	44e3      	add	fp, ip
   34736:	464b      	mov	r3, r9
   34738:	1aeb      	subs	r3, r5, r3
   3473a:	0039      	movs	r1, r7
   3473c:	0018      	movs	r0, r3
   3473e:	9304      	str	r3, [sp, #16]
   34740:	f7ff f888 	bl	33854 <__udivsi3>
   34744:	9b01      	ldr	r3, [sp, #4]
   34746:	0005      	movs	r5, r0
   34748:	4343      	muls	r3, r0
   3474a:	0039      	movs	r1, r7
   3474c:	9804      	ldr	r0, [sp, #16]
   3474e:	4699      	mov	r9, r3
   34750:	f7ff f906 	bl	33960 <__aeabi_uidivmod>
   34754:	0433      	lsls	r3, r6, #16
   34756:	0409      	lsls	r1, r1, #16
   34758:	0c1b      	lsrs	r3, r3, #16
   3475a:	430b      	orrs	r3, r1
   3475c:	4599      	cmp	r9, r3
   3475e:	d909      	bls.n	34774 <__aeabi_ddiv+0x2a0>
   34760:	4443      	add	r3, r8
   34762:	1e6a      	subs	r2, r5, #1
   34764:	4598      	cmp	r8, r3
   34766:	d900      	bls.n	3476a <__aeabi_ddiv+0x296>
   34768:	e11a      	b.n	349a0 <__aeabi_ddiv+0x4cc>
   3476a:	4599      	cmp	r9, r3
   3476c:	d800      	bhi.n	34770 <__aeabi_ddiv+0x29c>
   3476e:	e117      	b.n	349a0 <__aeabi_ddiv+0x4cc>
   34770:	3d02      	subs	r5, #2
   34772:	4443      	add	r3, r8
   34774:	464a      	mov	r2, r9
   34776:	1a9b      	subs	r3, r3, r2
   34778:	465a      	mov	r2, fp
   3477a:	0412      	lsls	r2, r2, #16
   3477c:	432a      	orrs	r2, r5
   3477e:	9903      	ldr	r1, [sp, #12]
   34780:	4693      	mov	fp, r2
   34782:	0c10      	lsrs	r0, r2, #16
   34784:	0c0a      	lsrs	r2, r1, #16
   34786:	4691      	mov	r9, r2
   34788:	0409      	lsls	r1, r1, #16
   3478a:	465a      	mov	r2, fp
   3478c:	0c09      	lsrs	r1, r1, #16
   3478e:	464e      	mov	r6, r9
   34790:	000d      	movs	r5, r1
   34792:	0412      	lsls	r2, r2, #16
   34794:	0c12      	lsrs	r2, r2, #16
   34796:	4345      	muls	r5, r0
   34798:	9105      	str	r1, [sp, #20]
   3479a:	4351      	muls	r1, r2
   3479c:	4372      	muls	r2, r6
   3479e:	4370      	muls	r0, r6
   347a0:	1952      	adds	r2, r2, r5
   347a2:	0c0e      	lsrs	r6, r1, #16
   347a4:	18b2      	adds	r2, r6, r2
   347a6:	4295      	cmp	r5, r2
   347a8:	d903      	bls.n	347b2 <__aeabi_ddiv+0x2de>
   347aa:	2580      	movs	r5, #128	; 0x80
   347ac:	026d      	lsls	r5, r5, #9
   347ae:	46ac      	mov	ip, r5
   347b0:	4460      	add	r0, ip
   347b2:	0c15      	lsrs	r5, r2, #16
   347b4:	0409      	lsls	r1, r1, #16
   347b6:	0412      	lsls	r2, r2, #16
   347b8:	0c09      	lsrs	r1, r1, #16
   347ba:	1828      	adds	r0, r5, r0
   347bc:	1852      	adds	r2, r2, r1
   347be:	4283      	cmp	r3, r0
   347c0:	d200      	bcs.n	347c4 <__aeabi_ddiv+0x2f0>
   347c2:	e0ce      	b.n	34962 <__aeabi_ddiv+0x48e>
   347c4:	d100      	bne.n	347c8 <__aeabi_ddiv+0x2f4>
   347c6:	e0c8      	b.n	3495a <__aeabi_ddiv+0x486>
   347c8:	1a1d      	subs	r5, r3, r0
   347ca:	4653      	mov	r3, sl
   347cc:	1a9e      	subs	r6, r3, r2
   347ce:	45b2      	cmp	sl, r6
   347d0:	4192      	sbcs	r2, r2
   347d2:	4252      	negs	r2, r2
   347d4:	1aab      	subs	r3, r5, r2
   347d6:	469a      	mov	sl, r3
   347d8:	4598      	cmp	r8, r3
   347da:	d100      	bne.n	347de <__aeabi_ddiv+0x30a>
   347dc:	e117      	b.n	34a0e <__aeabi_ddiv+0x53a>
   347de:	0039      	movs	r1, r7
   347e0:	0018      	movs	r0, r3
   347e2:	f7ff f837 	bl	33854 <__udivsi3>
   347e6:	9b01      	ldr	r3, [sp, #4]
   347e8:	0005      	movs	r5, r0
   347ea:	4343      	muls	r3, r0
   347ec:	0039      	movs	r1, r7
   347ee:	4650      	mov	r0, sl
   347f0:	9304      	str	r3, [sp, #16]
   347f2:	f7ff f8b5 	bl	33960 <__aeabi_uidivmod>
   347f6:	9804      	ldr	r0, [sp, #16]
   347f8:	040b      	lsls	r3, r1, #16
   347fa:	0c31      	lsrs	r1, r6, #16
   347fc:	4319      	orrs	r1, r3
   347fe:	4288      	cmp	r0, r1
   34800:	d909      	bls.n	34816 <__aeabi_ddiv+0x342>
   34802:	4441      	add	r1, r8
   34804:	1e6b      	subs	r3, r5, #1
   34806:	4588      	cmp	r8, r1
   34808:	d900      	bls.n	3480c <__aeabi_ddiv+0x338>
   3480a:	e107      	b.n	34a1c <__aeabi_ddiv+0x548>
   3480c:	4288      	cmp	r0, r1
   3480e:	d800      	bhi.n	34812 <__aeabi_ddiv+0x33e>
   34810:	e104      	b.n	34a1c <__aeabi_ddiv+0x548>
   34812:	3d02      	subs	r5, #2
   34814:	4441      	add	r1, r8
   34816:	9b04      	ldr	r3, [sp, #16]
   34818:	1acb      	subs	r3, r1, r3
   3481a:	0018      	movs	r0, r3
   3481c:	0039      	movs	r1, r7
   3481e:	9304      	str	r3, [sp, #16]
   34820:	f7ff f818 	bl	33854 <__udivsi3>
   34824:	9b01      	ldr	r3, [sp, #4]
   34826:	4682      	mov	sl, r0
   34828:	4343      	muls	r3, r0
   3482a:	0039      	movs	r1, r7
   3482c:	9804      	ldr	r0, [sp, #16]
   3482e:	9301      	str	r3, [sp, #4]
   34830:	f7ff f896 	bl	33960 <__aeabi_uidivmod>
   34834:	9801      	ldr	r0, [sp, #4]
   34836:	040b      	lsls	r3, r1, #16
   34838:	0431      	lsls	r1, r6, #16
   3483a:	0c09      	lsrs	r1, r1, #16
   3483c:	4319      	orrs	r1, r3
   3483e:	4288      	cmp	r0, r1
   34840:	d90d      	bls.n	3485e <__aeabi_ddiv+0x38a>
   34842:	4653      	mov	r3, sl
   34844:	4441      	add	r1, r8
   34846:	3b01      	subs	r3, #1
   34848:	4588      	cmp	r8, r1
   3484a:	d900      	bls.n	3484e <__aeabi_ddiv+0x37a>
   3484c:	e0e8      	b.n	34a20 <__aeabi_ddiv+0x54c>
   3484e:	4288      	cmp	r0, r1
   34850:	d800      	bhi.n	34854 <__aeabi_ddiv+0x380>
   34852:	e0e5      	b.n	34a20 <__aeabi_ddiv+0x54c>
   34854:	2302      	movs	r3, #2
   34856:	425b      	negs	r3, r3
   34858:	469c      	mov	ip, r3
   3485a:	4441      	add	r1, r8
   3485c:	44e2      	add	sl, ip
   3485e:	9b01      	ldr	r3, [sp, #4]
   34860:	042d      	lsls	r5, r5, #16
   34862:	1ace      	subs	r6, r1, r3
   34864:	4651      	mov	r1, sl
   34866:	4329      	orrs	r1, r5
   34868:	9d05      	ldr	r5, [sp, #20]
   3486a:	464f      	mov	r7, r9
   3486c:	002a      	movs	r2, r5
   3486e:	040b      	lsls	r3, r1, #16
   34870:	0c08      	lsrs	r0, r1, #16
   34872:	0c1b      	lsrs	r3, r3, #16
   34874:	435a      	muls	r2, r3
   34876:	4345      	muls	r5, r0
   34878:	437b      	muls	r3, r7
   3487a:	4378      	muls	r0, r7
   3487c:	195b      	adds	r3, r3, r5
   3487e:	0c17      	lsrs	r7, r2, #16
   34880:	18fb      	adds	r3, r7, r3
   34882:	429d      	cmp	r5, r3
   34884:	d903      	bls.n	3488e <__aeabi_ddiv+0x3ba>
   34886:	2580      	movs	r5, #128	; 0x80
   34888:	026d      	lsls	r5, r5, #9
   3488a:	46ac      	mov	ip, r5
   3488c:	4460      	add	r0, ip
   3488e:	0c1d      	lsrs	r5, r3, #16
   34890:	0412      	lsls	r2, r2, #16
   34892:	041b      	lsls	r3, r3, #16
   34894:	0c12      	lsrs	r2, r2, #16
   34896:	1828      	adds	r0, r5, r0
   34898:	189b      	adds	r3, r3, r2
   3489a:	4286      	cmp	r6, r0
   3489c:	d200      	bcs.n	348a0 <__aeabi_ddiv+0x3cc>
   3489e:	e093      	b.n	349c8 <__aeabi_ddiv+0x4f4>
   348a0:	d100      	bne.n	348a4 <__aeabi_ddiv+0x3d0>
   348a2:	e08e      	b.n	349c2 <__aeabi_ddiv+0x4ee>
   348a4:	2301      	movs	r3, #1
   348a6:	4319      	orrs	r1, r3
   348a8:	4ba0      	ldr	r3, [pc, #640]	; (34b2c <__aeabi_ddiv+0x658>)
   348aa:	18e3      	adds	r3, r4, r3
   348ac:	2b00      	cmp	r3, #0
   348ae:	dc00      	bgt.n	348b2 <__aeabi_ddiv+0x3de>
   348b0:	e099      	b.n	349e6 <__aeabi_ddiv+0x512>
   348b2:	074a      	lsls	r2, r1, #29
   348b4:	d000      	beq.n	348b8 <__aeabi_ddiv+0x3e4>
   348b6:	e09e      	b.n	349f6 <__aeabi_ddiv+0x522>
   348b8:	465a      	mov	r2, fp
   348ba:	01d2      	lsls	r2, r2, #7
   348bc:	d506      	bpl.n	348cc <__aeabi_ddiv+0x3f8>
   348be:	465a      	mov	r2, fp
   348c0:	4b9b      	ldr	r3, [pc, #620]	; (34b30 <__aeabi_ddiv+0x65c>)
   348c2:	401a      	ands	r2, r3
   348c4:	2380      	movs	r3, #128	; 0x80
   348c6:	4693      	mov	fp, r2
   348c8:	00db      	lsls	r3, r3, #3
   348ca:	18e3      	adds	r3, r4, r3
   348cc:	4a99      	ldr	r2, [pc, #612]	; (34b34 <__aeabi_ddiv+0x660>)
   348ce:	4293      	cmp	r3, r2
   348d0:	dd68      	ble.n	349a4 <__aeabi_ddiv+0x4d0>
   348d2:	2301      	movs	r3, #1
   348d4:	9a02      	ldr	r2, [sp, #8]
   348d6:	4c98      	ldr	r4, [pc, #608]	; (34b38 <__aeabi_ddiv+0x664>)
   348d8:	401a      	ands	r2, r3
   348da:	2300      	movs	r3, #0
   348dc:	4694      	mov	ip, r2
   348de:	4698      	mov	r8, r3
   348e0:	2200      	movs	r2, #0
   348e2:	e6c5      	b.n	34670 <__aeabi_ddiv+0x19c>
   348e4:	2280      	movs	r2, #128	; 0x80
   348e6:	464b      	mov	r3, r9
   348e8:	0312      	lsls	r2, r2, #12
   348ea:	4213      	tst	r3, r2
   348ec:	d00a      	beq.n	34904 <__aeabi_ddiv+0x430>
   348ee:	465b      	mov	r3, fp
   348f0:	4213      	tst	r3, r2
   348f2:	d106      	bne.n	34902 <__aeabi_ddiv+0x42e>
   348f4:	431a      	orrs	r2, r3
   348f6:	0312      	lsls	r2, r2, #12
   348f8:	0b12      	lsrs	r2, r2, #12
   348fa:	46ac      	mov	ip, r5
   348fc:	4688      	mov	r8, r1
   348fe:	4c8e      	ldr	r4, [pc, #568]	; (34b38 <__aeabi_ddiv+0x664>)
   34900:	e6b6      	b.n	34670 <__aeabi_ddiv+0x19c>
   34902:	464b      	mov	r3, r9
   34904:	431a      	orrs	r2, r3
   34906:	0312      	lsls	r2, r2, #12
   34908:	0b12      	lsrs	r2, r2, #12
   3490a:	46bc      	mov	ip, r7
   3490c:	4c8a      	ldr	r4, [pc, #552]	; (34b38 <__aeabi_ddiv+0x664>)
   3490e:	e6af      	b.n	34670 <__aeabi_ddiv+0x19c>
   34910:	0003      	movs	r3, r0
   34912:	465a      	mov	r2, fp
   34914:	3b28      	subs	r3, #40	; 0x28
   34916:	409a      	lsls	r2, r3
   34918:	2300      	movs	r3, #0
   3491a:	4691      	mov	r9, r2
   3491c:	4698      	mov	r8, r3
   3491e:	e657      	b.n	345d0 <__aeabi_ddiv+0xfc>
   34920:	4658      	mov	r0, fp
   34922:	f000 ff0d 	bl	35740 <__clzsi2>
   34926:	3020      	adds	r0, #32
   34928:	e640      	b.n	345ac <__aeabi_ddiv+0xd8>
   3492a:	0003      	movs	r3, r0
   3492c:	4652      	mov	r2, sl
   3492e:	3b28      	subs	r3, #40	; 0x28
   34930:	409a      	lsls	r2, r3
   34932:	2100      	movs	r1, #0
   34934:	4693      	mov	fp, r2
   34936:	e677      	b.n	34628 <__aeabi_ddiv+0x154>
   34938:	f000 ff02 	bl	35740 <__clzsi2>
   3493c:	3020      	adds	r0, #32
   3493e:	e65f      	b.n	34600 <__aeabi_ddiv+0x12c>
   34940:	4588      	cmp	r8, r1
   34942:	d200      	bcs.n	34946 <__aeabi_ddiv+0x472>
   34944:	e6c7      	b.n	346d6 <__aeabi_ddiv+0x202>
   34946:	464b      	mov	r3, r9
   34948:	07de      	lsls	r6, r3, #31
   3494a:	085d      	lsrs	r5, r3, #1
   3494c:	4643      	mov	r3, r8
   3494e:	085b      	lsrs	r3, r3, #1
   34950:	431e      	orrs	r6, r3
   34952:	4643      	mov	r3, r8
   34954:	07db      	lsls	r3, r3, #31
   34956:	469a      	mov	sl, r3
   34958:	e6c2      	b.n	346e0 <__aeabi_ddiv+0x20c>
   3495a:	2500      	movs	r5, #0
   3495c:	4592      	cmp	sl, r2
   3495e:	d300      	bcc.n	34962 <__aeabi_ddiv+0x48e>
   34960:	e733      	b.n	347ca <__aeabi_ddiv+0x2f6>
   34962:	9e03      	ldr	r6, [sp, #12]
   34964:	4659      	mov	r1, fp
   34966:	46b4      	mov	ip, r6
   34968:	44e2      	add	sl, ip
   3496a:	45b2      	cmp	sl, r6
   3496c:	41ad      	sbcs	r5, r5
   3496e:	426d      	negs	r5, r5
   34970:	4445      	add	r5, r8
   34972:	18eb      	adds	r3, r5, r3
   34974:	3901      	subs	r1, #1
   34976:	4598      	cmp	r8, r3
   34978:	d207      	bcs.n	3498a <__aeabi_ddiv+0x4b6>
   3497a:	4298      	cmp	r0, r3
   3497c:	d900      	bls.n	34980 <__aeabi_ddiv+0x4ac>
   3497e:	e07f      	b.n	34a80 <__aeabi_ddiv+0x5ac>
   34980:	d100      	bne.n	34984 <__aeabi_ddiv+0x4b0>
   34982:	e0bc      	b.n	34afe <__aeabi_ddiv+0x62a>
   34984:	1a1d      	subs	r5, r3, r0
   34986:	468b      	mov	fp, r1
   34988:	e71f      	b.n	347ca <__aeabi_ddiv+0x2f6>
   3498a:	4598      	cmp	r8, r3
   3498c:	d1fa      	bne.n	34984 <__aeabi_ddiv+0x4b0>
   3498e:	9d03      	ldr	r5, [sp, #12]
   34990:	4555      	cmp	r5, sl
   34992:	d9f2      	bls.n	3497a <__aeabi_ddiv+0x4a6>
   34994:	4643      	mov	r3, r8
   34996:	468b      	mov	fp, r1
   34998:	1a1d      	subs	r5, r3, r0
   3499a:	e716      	b.n	347ca <__aeabi_ddiv+0x2f6>
   3499c:	469b      	mov	fp, r3
   3499e:	e6ca      	b.n	34736 <__aeabi_ddiv+0x262>
   349a0:	0015      	movs	r5, r2
   349a2:	e6e7      	b.n	34774 <__aeabi_ddiv+0x2a0>
   349a4:	465a      	mov	r2, fp
   349a6:	08c9      	lsrs	r1, r1, #3
   349a8:	0752      	lsls	r2, r2, #29
   349aa:	430a      	orrs	r2, r1
   349ac:	055b      	lsls	r3, r3, #21
   349ae:	4690      	mov	r8, r2
   349b0:	0d5c      	lsrs	r4, r3, #21
   349b2:	465a      	mov	r2, fp
   349b4:	2301      	movs	r3, #1
   349b6:	9902      	ldr	r1, [sp, #8]
   349b8:	0252      	lsls	r2, r2, #9
   349ba:	4019      	ands	r1, r3
   349bc:	0b12      	lsrs	r2, r2, #12
   349be:	468c      	mov	ip, r1
   349c0:	e656      	b.n	34670 <__aeabi_ddiv+0x19c>
   349c2:	2b00      	cmp	r3, #0
   349c4:	d100      	bne.n	349c8 <__aeabi_ddiv+0x4f4>
   349c6:	e76f      	b.n	348a8 <__aeabi_ddiv+0x3d4>
   349c8:	4446      	add	r6, r8
   349ca:	1e4a      	subs	r2, r1, #1
   349cc:	45b0      	cmp	r8, r6
   349ce:	d929      	bls.n	34a24 <__aeabi_ddiv+0x550>
   349d0:	0011      	movs	r1, r2
   349d2:	4286      	cmp	r6, r0
   349d4:	d000      	beq.n	349d8 <__aeabi_ddiv+0x504>
   349d6:	e765      	b.n	348a4 <__aeabi_ddiv+0x3d0>
   349d8:	9a03      	ldr	r2, [sp, #12]
   349da:	4293      	cmp	r3, r2
   349dc:	d000      	beq.n	349e0 <__aeabi_ddiv+0x50c>
   349de:	e761      	b.n	348a4 <__aeabi_ddiv+0x3d0>
   349e0:	e762      	b.n	348a8 <__aeabi_ddiv+0x3d4>
   349e2:	2101      	movs	r1, #1
   349e4:	4249      	negs	r1, r1
   349e6:	2001      	movs	r0, #1
   349e8:	1ac2      	subs	r2, r0, r3
   349ea:	2a38      	cmp	r2, #56	; 0x38
   349ec:	dd21      	ble.n	34a32 <__aeabi_ddiv+0x55e>
   349ee:	9b02      	ldr	r3, [sp, #8]
   349f0:	4003      	ands	r3, r0
   349f2:	469c      	mov	ip, r3
   349f4:	e638      	b.n	34668 <__aeabi_ddiv+0x194>
   349f6:	220f      	movs	r2, #15
   349f8:	400a      	ands	r2, r1
   349fa:	2a04      	cmp	r2, #4
   349fc:	d100      	bne.n	34a00 <__aeabi_ddiv+0x52c>
   349fe:	e75b      	b.n	348b8 <__aeabi_ddiv+0x3e4>
   34a00:	000a      	movs	r2, r1
   34a02:	1d11      	adds	r1, r2, #4
   34a04:	4291      	cmp	r1, r2
   34a06:	4192      	sbcs	r2, r2
   34a08:	4252      	negs	r2, r2
   34a0a:	4493      	add	fp, r2
   34a0c:	e754      	b.n	348b8 <__aeabi_ddiv+0x3e4>
   34a0e:	4b47      	ldr	r3, [pc, #284]	; (34b2c <__aeabi_ddiv+0x658>)
   34a10:	18e3      	adds	r3, r4, r3
   34a12:	2b00      	cmp	r3, #0
   34a14:	dde5      	ble.n	349e2 <__aeabi_ddiv+0x50e>
   34a16:	2201      	movs	r2, #1
   34a18:	4252      	negs	r2, r2
   34a1a:	e7f2      	b.n	34a02 <__aeabi_ddiv+0x52e>
   34a1c:	001d      	movs	r5, r3
   34a1e:	e6fa      	b.n	34816 <__aeabi_ddiv+0x342>
   34a20:	469a      	mov	sl, r3
   34a22:	e71c      	b.n	3485e <__aeabi_ddiv+0x38a>
   34a24:	42b0      	cmp	r0, r6
   34a26:	d839      	bhi.n	34a9c <__aeabi_ddiv+0x5c8>
   34a28:	d06e      	beq.n	34b08 <__aeabi_ddiv+0x634>
   34a2a:	0011      	movs	r1, r2
   34a2c:	e73a      	b.n	348a4 <__aeabi_ddiv+0x3d0>
   34a2e:	9302      	str	r3, [sp, #8]
   34a30:	e73a      	b.n	348a8 <__aeabi_ddiv+0x3d4>
   34a32:	2a1f      	cmp	r2, #31
   34a34:	dc3c      	bgt.n	34ab0 <__aeabi_ddiv+0x5dc>
   34a36:	2320      	movs	r3, #32
   34a38:	1a9b      	subs	r3, r3, r2
   34a3a:	000c      	movs	r4, r1
   34a3c:	4658      	mov	r0, fp
   34a3e:	4099      	lsls	r1, r3
   34a40:	4098      	lsls	r0, r3
   34a42:	1e4b      	subs	r3, r1, #1
   34a44:	4199      	sbcs	r1, r3
   34a46:	465b      	mov	r3, fp
   34a48:	40d4      	lsrs	r4, r2
   34a4a:	40d3      	lsrs	r3, r2
   34a4c:	4320      	orrs	r0, r4
   34a4e:	4308      	orrs	r0, r1
   34a50:	001a      	movs	r2, r3
   34a52:	0743      	lsls	r3, r0, #29
   34a54:	d009      	beq.n	34a6a <__aeabi_ddiv+0x596>
   34a56:	230f      	movs	r3, #15
   34a58:	4003      	ands	r3, r0
   34a5a:	2b04      	cmp	r3, #4
   34a5c:	d005      	beq.n	34a6a <__aeabi_ddiv+0x596>
   34a5e:	0001      	movs	r1, r0
   34a60:	1d08      	adds	r0, r1, #4
   34a62:	4288      	cmp	r0, r1
   34a64:	419b      	sbcs	r3, r3
   34a66:	425b      	negs	r3, r3
   34a68:	18d2      	adds	r2, r2, r3
   34a6a:	0213      	lsls	r3, r2, #8
   34a6c:	d53a      	bpl.n	34ae4 <__aeabi_ddiv+0x610>
   34a6e:	2301      	movs	r3, #1
   34a70:	9a02      	ldr	r2, [sp, #8]
   34a72:	2401      	movs	r4, #1
   34a74:	401a      	ands	r2, r3
   34a76:	2300      	movs	r3, #0
   34a78:	4694      	mov	ip, r2
   34a7a:	4698      	mov	r8, r3
   34a7c:	2200      	movs	r2, #0
   34a7e:	e5f7      	b.n	34670 <__aeabi_ddiv+0x19c>
   34a80:	2102      	movs	r1, #2
   34a82:	4249      	negs	r1, r1
   34a84:	468c      	mov	ip, r1
   34a86:	9d03      	ldr	r5, [sp, #12]
   34a88:	44e3      	add	fp, ip
   34a8a:	46ac      	mov	ip, r5
   34a8c:	44e2      	add	sl, ip
   34a8e:	45aa      	cmp	sl, r5
   34a90:	41ad      	sbcs	r5, r5
   34a92:	426d      	negs	r5, r5
   34a94:	4445      	add	r5, r8
   34a96:	18ed      	adds	r5, r5, r3
   34a98:	1a2d      	subs	r5, r5, r0
   34a9a:	e696      	b.n	347ca <__aeabi_ddiv+0x2f6>
   34a9c:	1e8a      	subs	r2, r1, #2
   34a9e:	9903      	ldr	r1, [sp, #12]
   34aa0:	004d      	lsls	r5, r1, #1
   34aa2:	428d      	cmp	r5, r1
   34aa4:	4189      	sbcs	r1, r1
   34aa6:	4249      	negs	r1, r1
   34aa8:	4441      	add	r1, r8
   34aaa:	1876      	adds	r6, r6, r1
   34aac:	9503      	str	r5, [sp, #12]
   34aae:	e78f      	b.n	349d0 <__aeabi_ddiv+0x4fc>
   34ab0:	201f      	movs	r0, #31
   34ab2:	4240      	negs	r0, r0
   34ab4:	1ac3      	subs	r3, r0, r3
   34ab6:	4658      	mov	r0, fp
   34ab8:	40d8      	lsrs	r0, r3
   34aba:	0003      	movs	r3, r0
   34abc:	2a20      	cmp	r2, #32
   34abe:	d028      	beq.n	34b12 <__aeabi_ddiv+0x63e>
   34ac0:	2040      	movs	r0, #64	; 0x40
   34ac2:	465d      	mov	r5, fp
   34ac4:	1a82      	subs	r2, r0, r2
   34ac6:	4095      	lsls	r5, r2
   34ac8:	4329      	orrs	r1, r5
   34aca:	1e4a      	subs	r2, r1, #1
   34acc:	4191      	sbcs	r1, r2
   34ace:	4319      	orrs	r1, r3
   34ad0:	2307      	movs	r3, #7
   34ad2:	2200      	movs	r2, #0
   34ad4:	400b      	ands	r3, r1
   34ad6:	d009      	beq.n	34aec <__aeabi_ddiv+0x618>
   34ad8:	230f      	movs	r3, #15
   34ada:	2200      	movs	r2, #0
   34adc:	400b      	ands	r3, r1
   34ade:	0008      	movs	r0, r1
   34ae0:	2b04      	cmp	r3, #4
   34ae2:	d1bd      	bne.n	34a60 <__aeabi_ddiv+0x58c>
   34ae4:	0001      	movs	r1, r0
   34ae6:	0753      	lsls	r3, r2, #29
   34ae8:	0252      	lsls	r2, r2, #9
   34aea:	0b12      	lsrs	r2, r2, #12
   34aec:	08c9      	lsrs	r1, r1, #3
   34aee:	4319      	orrs	r1, r3
   34af0:	2301      	movs	r3, #1
   34af2:	4688      	mov	r8, r1
   34af4:	9902      	ldr	r1, [sp, #8]
   34af6:	2400      	movs	r4, #0
   34af8:	4019      	ands	r1, r3
   34afa:	468c      	mov	ip, r1
   34afc:	e5b8      	b.n	34670 <__aeabi_ddiv+0x19c>
   34afe:	4552      	cmp	r2, sl
   34b00:	d8be      	bhi.n	34a80 <__aeabi_ddiv+0x5ac>
   34b02:	468b      	mov	fp, r1
   34b04:	2500      	movs	r5, #0
   34b06:	e660      	b.n	347ca <__aeabi_ddiv+0x2f6>
   34b08:	9d03      	ldr	r5, [sp, #12]
   34b0a:	429d      	cmp	r5, r3
   34b0c:	d3c6      	bcc.n	34a9c <__aeabi_ddiv+0x5c8>
   34b0e:	0011      	movs	r1, r2
   34b10:	e762      	b.n	349d8 <__aeabi_ddiv+0x504>
   34b12:	2500      	movs	r5, #0
   34b14:	e7d8      	b.n	34ac8 <__aeabi_ddiv+0x5f4>
   34b16:	2280      	movs	r2, #128	; 0x80
   34b18:	465b      	mov	r3, fp
   34b1a:	0312      	lsls	r2, r2, #12
   34b1c:	431a      	orrs	r2, r3
   34b1e:	9b01      	ldr	r3, [sp, #4]
   34b20:	0312      	lsls	r2, r2, #12
   34b22:	0b12      	lsrs	r2, r2, #12
   34b24:	469c      	mov	ip, r3
   34b26:	4688      	mov	r8, r1
   34b28:	4c03      	ldr	r4, [pc, #12]	; (34b38 <__aeabi_ddiv+0x664>)
   34b2a:	e5a1      	b.n	34670 <__aeabi_ddiv+0x19c>
   34b2c:	000003ff 	.word	0x000003ff
   34b30:	feffffff 	.word	0xfeffffff
   34b34:	000007fe 	.word	0x000007fe
   34b38:	000007ff 	.word	0x000007ff

00034b3c <__aeabi_dmul>:
   34b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
   34b3e:	4657      	mov	r7, sl
   34b40:	4645      	mov	r5, r8
   34b42:	46de      	mov	lr, fp
   34b44:	464e      	mov	r6, r9
   34b46:	b5e0      	push	{r5, r6, r7, lr}
   34b48:	030c      	lsls	r4, r1, #12
   34b4a:	4698      	mov	r8, r3
   34b4c:	004e      	lsls	r6, r1, #1
   34b4e:	0b23      	lsrs	r3, r4, #12
   34b50:	b087      	sub	sp, #28
   34b52:	0007      	movs	r7, r0
   34b54:	4692      	mov	sl, r2
   34b56:	469b      	mov	fp, r3
   34b58:	0d76      	lsrs	r6, r6, #21
   34b5a:	0fcd      	lsrs	r5, r1, #31
   34b5c:	2e00      	cmp	r6, #0
   34b5e:	d06b      	beq.n	34c38 <__aeabi_dmul+0xfc>
   34b60:	4b6d      	ldr	r3, [pc, #436]	; (34d18 <__aeabi_dmul+0x1dc>)
   34b62:	429e      	cmp	r6, r3
   34b64:	d035      	beq.n	34bd2 <__aeabi_dmul+0x96>
   34b66:	2480      	movs	r4, #128	; 0x80
   34b68:	465b      	mov	r3, fp
   34b6a:	0f42      	lsrs	r2, r0, #29
   34b6c:	0424      	lsls	r4, r4, #16
   34b6e:	00db      	lsls	r3, r3, #3
   34b70:	4314      	orrs	r4, r2
   34b72:	431c      	orrs	r4, r3
   34b74:	00c3      	lsls	r3, r0, #3
   34b76:	4699      	mov	r9, r3
   34b78:	4b68      	ldr	r3, [pc, #416]	; (34d1c <__aeabi_dmul+0x1e0>)
   34b7a:	46a3      	mov	fp, r4
   34b7c:	469c      	mov	ip, r3
   34b7e:	2300      	movs	r3, #0
   34b80:	2700      	movs	r7, #0
   34b82:	4466      	add	r6, ip
   34b84:	9302      	str	r3, [sp, #8]
   34b86:	4643      	mov	r3, r8
   34b88:	031c      	lsls	r4, r3, #12
   34b8a:	005a      	lsls	r2, r3, #1
   34b8c:	0fdb      	lsrs	r3, r3, #31
   34b8e:	4650      	mov	r0, sl
   34b90:	0b24      	lsrs	r4, r4, #12
   34b92:	0d52      	lsrs	r2, r2, #21
   34b94:	4698      	mov	r8, r3
   34b96:	d100      	bne.n	34b9a <__aeabi_dmul+0x5e>
   34b98:	e076      	b.n	34c88 <__aeabi_dmul+0x14c>
   34b9a:	4b5f      	ldr	r3, [pc, #380]	; (34d18 <__aeabi_dmul+0x1dc>)
   34b9c:	429a      	cmp	r2, r3
   34b9e:	d06d      	beq.n	34c7c <__aeabi_dmul+0x140>
   34ba0:	2380      	movs	r3, #128	; 0x80
   34ba2:	0f41      	lsrs	r1, r0, #29
   34ba4:	041b      	lsls	r3, r3, #16
   34ba6:	430b      	orrs	r3, r1
   34ba8:	495c      	ldr	r1, [pc, #368]	; (34d1c <__aeabi_dmul+0x1e0>)
   34baa:	00e4      	lsls	r4, r4, #3
   34bac:	468c      	mov	ip, r1
   34bae:	431c      	orrs	r4, r3
   34bb0:	00c3      	lsls	r3, r0, #3
   34bb2:	2000      	movs	r0, #0
   34bb4:	4462      	add	r2, ip
   34bb6:	4641      	mov	r1, r8
   34bb8:	18b6      	adds	r6, r6, r2
   34bba:	4069      	eors	r1, r5
   34bbc:	1c72      	adds	r2, r6, #1
   34bbe:	9101      	str	r1, [sp, #4]
   34bc0:	4694      	mov	ip, r2
   34bc2:	4307      	orrs	r7, r0
   34bc4:	2f0f      	cmp	r7, #15
   34bc6:	d900      	bls.n	34bca <__aeabi_dmul+0x8e>
   34bc8:	e0b0      	b.n	34d2c <__aeabi_dmul+0x1f0>
   34bca:	4a55      	ldr	r2, [pc, #340]	; (34d20 <__aeabi_dmul+0x1e4>)
   34bcc:	00bf      	lsls	r7, r7, #2
   34bce:	59d2      	ldr	r2, [r2, r7]
   34bd0:	4697      	mov	pc, r2
   34bd2:	465b      	mov	r3, fp
   34bd4:	4303      	orrs	r3, r0
   34bd6:	4699      	mov	r9, r3
   34bd8:	d000      	beq.n	34bdc <__aeabi_dmul+0xa0>
   34bda:	e087      	b.n	34cec <__aeabi_dmul+0x1b0>
   34bdc:	2300      	movs	r3, #0
   34bde:	469b      	mov	fp, r3
   34be0:	3302      	adds	r3, #2
   34be2:	2708      	movs	r7, #8
   34be4:	9302      	str	r3, [sp, #8]
   34be6:	e7ce      	b.n	34b86 <__aeabi_dmul+0x4a>
   34be8:	4642      	mov	r2, r8
   34bea:	9201      	str	r2, [sp, #4]
   34bec:	2802      	cmp	r0, #2
   34bee:	d067      	beq.n	34cc0 <__aeabi_dmul+0x184>
   34bf0:	2803      	cmp	r0, #3
   34bf2:	d100      	bne.n	34bf6 <__aeabi_dmul+0xba>
   34bf4:	e20e      	b.n	35014 <__aeabi_dmul+0x4d8>
   34bf6:	2801      	cmp	r0, #1
   34bf8:	d000      	beq.n	34bfc <__aeabi_dmul+0xc0>
   34bfa:	e162      	b.n	34ec2 <__aeabi_dmul+0x386>
   34bfc:	2300      	movs	r3, #0
   34bfe:	2400      	movs	r4, #0
   34c00:	2200      	movs	r2, #0
   34c02:	4699      	mov	r9, r3
   34c04:	9901      	ldr	r1, [sp, #4]
   34c06:	4001      	ands	r1, r0
   34c08:	b2cd      	uxtb	r5, r1
   34c0a:	2100      	movs	r1, #0
   34c0c:	0312      	lsls	r2, r2, #12
   34c0e:	0d0b      	lsrs	r3, r1, #20
   34c10:	0b12      	lsrs	r2, r2, #12
   34c12:	051b      	lsls	r3, r3, #20
   34c14:	4313      	orrs	r3, r2
   34c16:	4a43      	ldr	r2, [pc, #268]	; (34d24 <__aeabi_dmul+0x1e8>)
   34c18:	0524      	lsls	r4, r4, #20
   34c1a:	4013      	ands	r3, r2
   34c1c:	431c      	orrs	r4, r3
   34c1e:	0064      	lsls	r4, r4, #1
   34c20:	07ed      	lsls	r5, r5, #31
   34c22:	0864      	lsrs	r4, r4, #1
   34c24:	432c      	orrs	r4, r5
   34c26:	4648      	mov	r0, r9
   34c28:	0021      	movs	r1, r4
   34c2a:	b007      	add	sp, #28
   34c2c:	bc3c      	pop	{r2, r3, r4, r5}
   34c2e:	4690      	mov	r8, r2
   34c30:	4699      	mov	r9, r3
   34c32:	46a2      	mov	sl, r4
   34c34:	46ab      	mov	fp, r5
   34c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
   34c38:	4303      	orrs	r3, r0
   34c3a:	4699      	mov	r9, r3
   34c3c:	d04f      	beq.n	34cde <__aeabi_dmul+0x1a2>
   34c3e:	465b      	mov	r3, fp
   34c40:	2b00      	cmp	r3, #0
   34c42:	d100      	bne.n	34c46 <__aeabi_dmul+0x10a>
   34c44:	e189      	b.n	34f5a <__aeabi_dmul+0x41e>
   34c46:	4658      	mov	r0, fp
   34c48:	f000 fd7a 	bl	35740 <__clzsi2>
   34c4c:	0003      	movs	r3, r0
   34c4e:	3b0b      	subs	r3, #11
   34c50:	2b1c      	cmp	r3, #28
   34c52:	dd00      	ble.n	34c56 <__aeabi_dmul+0x11a>
   34c54:	e17a      	b.n	34f4c <__aeabi_dmul+0x410>
   34c56:	221d      	movs	r2, #29
   34c58:	1ad3      	subs	r3, r2, r3
   34c5a:	003a      	movs	r2, r7
   34c5c:	0001      	movs	r1, r0
   34c5e:	465c      	mov	r4, fp
   34c60:	40da      	lsrs	r2, r3
   34c62:	3908      	subs	r1, #8
   34c64:	408c      	lsls	r4, r1
   34c66:	0013      	movs	r3, r2
   34c68:	408f      	lsls	r7, r1
   34c6a:	4323      	orrs	r3, r4
   34c6c:	469b      	mov	fp, r3
   34c6e:	46b9      	mov	r9, r7
   34c70:	2300      	movs	r3, #0
   34c72:	4e2d      	ldr	r6, [pc, #180]	; (34d28 <__aeabi_dmul+0x1ec>)
   34c74:	2700      	movs	r7, #0
   34c76:	1a36      	subs	r6, r6, r0
   34c78:	9302      	str	r3, [sp, #8]
   34c7a:	e784      	b.n	34b86 <__aeabi_dmul+0x4a>
   34c7c:	4653      	mov	r3, sl
   34c7e:	4323      	orrs	r3, r4
   34c80:	d12a      	bne.n	34cd8 <__aeabi_dmul+0x19c>
   34c82:	2400      	movs	r4, #0
   34c84:	2002      	movs	r0, #2
   34c86:	e796      	b.n	34bb6 <__aeabi_dmul+0x7a>
   34c88:	4653      	mov	r3, sl
   34c8a:	4323      	orrs	r3, r4
   34c8c:	d020      	beq.n	34cd0 <__aeabi_dmul+0x194>
   34c8e:	2c00      	cmp	r4, #0
   34c90:	d100      	bne.n	34c94 <__aeabi_dmul+0x158>
   34c92:	e157      	b.n	34f44 <__aeabi_dmul+0x408>
   34c94:	0020      	movs	r0, r4
   34c96:	f000 fd53 	bl	35740 <__clzsi2>
   34c9a:	0003      	movs	r3, r0
   34c9c:	3b0b      	subs	r3, #11
   34c9e:	2b1c      	cmp	r3, #28
   34ca0:	dd00      	ble.n	34ca4 <__aeabi_dmul+0x168>
   34ca2:	e149      	b.n	34f38 <__aeabi_dmul+0x3fc>
   34ca4:	211d      	movs	r1, #29
   34ca6:	1acb      	subs	r3, r1, r3
   34ca8:	4651      	mov	r1, sl
   34caa:	0002      	movs	r2, r0
   34cac:	40d9      	lsrs	r1, r3
   34cae:	4653      	mov	r3, sl
   34cb0:	3a08      	subs	r2, #8
   34cb2:	4094      	lsls	r4, r2
   34cb4:	4093      	lsls	r3, r2
   34cb6:	430c      	orrs	r4, r1
   34cb8:	4a1b      	ldr	r2, [pc, #108]	; (34d28 <__aeabi_dmul+0x1ec>)
   34cba:	1a12      	subs	r2, r2, r0
   34cbc:	2000      	movs	r0, #0
   34cbe:	e77a      	b.n	34bb6 <__aeabi_dmul+0x7a>
   34cc0:	2501      	movs	r5, #1
   34cc2:	9b01      	ldr	r3, [sp, #4]
   34cc4:	4c14      	ldr	r4, [pc, #80]	; (34d18 <__aeabi_dmul+0x1dc>)
   34cc6:	401d      	ands	r5, r3
   34cc8:	2300      	movs	r3, #0
   34cca:	2200      	movs	r2, #0
   34ccc:	4699      	mov	r9, r3
   34cce:	e79c      	b.n	34c0a <__aeabi_dmul+0xce>
   34cd0:	2400      	movs	r4, #0
   34cd2:	2200      	movs	r2, #0
   34cd4:	2001      	movs	r0, #1
   34cd6:	e76e      	b.n	34bb6 <__aeabi_dmul+0x7a>
   34cd8:	4653      	mov	r3, sl
   34cda:	2003      	movs	r0, #3
   34cdc:	e76b      	b.n	34bb6 <__aeabi_dmul+0x7a>
   34cde:	2300      	movs	r3, #0
   34ce0:	469b      	mov	fp, r3
   34ce2:	3301      	adds	r3, #1
   34ce4:	2704      	movs	r7, #4
   34ce6:	2600      	movs	r6, #0
   34ce8:	9302      	str	r3, [sp, #8]
   34cea:	e74c      	b.n	34b86 <__aeabi_dmul+0x4a>
   34cec:	2303      	movs	r3, #3
   34cee:	4681      	mov	r9, r0
   34cf0:	270c      	movs	r7, #12
   34cf2:	9302      	str	r3, [sp, #8]
   34cf4:	e747      	b.n	34b86 <__aeabi_dmul+0x4a>
   34cf6:	2280      	movs	r2, #128	; 0x80
   34cf8:	2300      	movs	r3, #0
   34cfa:	2500      	movs	r5, #0
   34cfc:	0312      	lsls	r2, r2, #12
   34cfe:	4699      	mov	r9, r3
   34d00:	4c05      	ldr	r4, [pc, #20]	; (34d18 <__aeabi_dmul+0x1dc>)
   34d02:	e782      	b.n	34c0a <__aeabi_dmul+0xce>
   34d04:	465c      	mov	r4, fp
   34d06:	464b      	mov	r3, r9
   34d08:	9802      	ldr	r0, [sp, #8]
   34d0a:	e76f      	b.n	34bec <__aeabi_dmul+0xb0>
   34d0c:	465c      	mov	r4, fp
   34d0e:	464b      	mov	r3, r9
   34d10:	9501      	str	r5, [sp, #4]
   34d12:	9802      	ldr	r0, [sp, #8]
   34d14:	e76a      	b.n	34bec <__aeabi_dmul+0xb0>
   34d16:	46c0      	nop			; (mov r8, r8)
   34d18:	000007ff 	.word	0x000007ff
   34d1c:	fffffc01 	.word	0xfffffc01
   34d20:	0003b254 	.word	0x0003b254
   34d24:	800fffff 	.word	0x800fffff
   34d28:	fffffc0d 	.word	0xfffffc0d
   34d2c:	464a      	mov	r2, r9
   34d2e:	4649      	mov	r1, r9
   34d30:	0c17      	lsrs	r7, r2, #16
   34d32:	0c1a      	lsrs	r2, r3, #16
   34d34:	041b      	lsls	r3, r3, #16
   34d36:	0c1b      	lsrs	r3, r3, #16
   34d38:	0408      	lsls	r0, r1, #16
   34d3a:	0019      	movs	r1, r3
   34d3c:	0c00      	lsrs	r0, r0, #16
   34d3e:	4341      	muls	r1, r0
   34d40:	0015      	movs	r5, r2
   34d42:	4688      	mov	r8, r1
   34d44:	0019      	movs	r1, r3
   34d46:	437d      	muls	r5, r7
   34d48:	4379      	muls	r1, r7
   34d4a:	9503      	str	r5, [sp, #12]
   34d4c:	4689      	mov	r9, r1
   34d4e:	0029      	movs	r1, r5
   34d50:	0015      	movs	r5, r2
   34d52:	4345      	muls	r5, r0
   34d54:	444d      	add	r5, r9
   34d56:	9502      	str	r5, [sp, #8]
   34d58:	4645      	mov	r5, r8
   34d5a:	0c2d      	lsrs	r5, r5, #16
   34d5c:	46aa      	mov	sl, r5
   34d5e:	9d02      	ldr	r5, [sp, #8]
   34d60:	4455      	add	r5, sl
   34d62:	45a9      	cmp	r9, r5
   34d64:	d906      	bls.n	34d74 <__aeabi_dmul+0x238>
   34d66:	468a      	mov	sl, r1
   34d68:	2180      	movs	r1, #128	; 0x80
   34d6a:	0249      	lsls	r1, r1, #9
   34d6c:	4689      	mov	r9, r1
   34d6e:	44ca      	add	sl, r9
   34d70:	4651      	mov	r1, sl
   34d72:	9103      	str	r1, [sp, #12]
   34d74:	0c29      	lsrs	r1, r5, #16
   34d76:	9104      	str	r1, [sp, #16]
   34d78:	4641      	mov	r1, r8
   34d7a:	0409      	lsls	r1, r1, #16
   34d7c:	042d      	lsls	r5, r5, #16
   34d7e:	0c09      	lsrs	r1, r1, #16
   34d80:	4688      	mov	r8, r1
   34d82:	0029      	movs	r1, r5
   34d84:	0c25      	lsrs	r5, r4, #16
   34d86:	0424      	lsls	r4, r4, #16
   34d88:	4441      	add	r1, r8
   34d8a:	0c24      	lsrs	r4, r4, #16
   34d8c:	9105      	str	r1, [sp, #20]
   34d8e:	0021      	movs	r1, r4
   34d90:	4341      	muls	r1, r0
   34d92:	4688      	mov	r8, r1
   34d94:	0021      	movs	r1, r4
   34d96:	4379      	muls	r1, r7
   34d98:	468a      	mov	sl, r1
   34d9a:	4368      	muls	r0, r5
   34d9c:	4641      	mov	r1, r8
   34d9e:	4450      	add	r0, sl
   34da0:	4681      	mov	r9, r0
   34da2:	0c08      	lsrs	r0, r1, #16
   34da4:	4448      	add	r0, r9
   34da6:	436f      	muls	r7, r5
   34da8:	4582      	cmp	sl, r0
   34daa:	d903      	bls.n	34db4 <__aeabi_dmul+0x278>
   34dac:	2180      	movs	r1, #128	; 0x80
   34dae:	0249      	lsls	r1, r1, #9
   34db0:	4689      	mov	r9, r1
   34db2:	444f      	add	r7, r9
   34db4:	0c01      	lsrs	r1, r0, #16
   34db6:	4689      	mov	r9, r1
   34db8:	0039      	movs	r1, r7
   34dba:	4449      	add	r1, r9
   34dbc:	9102      	str	r1, [sp, #8]
   34dbe:	4641      	mov	r1, r8
   34dc0:	040f      	lsls	r7, r1, #16
   34dc2:	9904      	ldr	r1, [sp, #16]
   34dc4:	0c3f      	lsrs	r7, r7, #16
   34dc6:	4688      	mov	r8, r1
   34dc8:	0400      	lsls	r0, r0, #16
   34dca:	19c0      	adds	r0, r0, r7
   34dcc:	4480      	add	r8, r0
   34dce:	4641      	mov	r1, r8
   34dd0:	9104      	str	r1, [sp, #16]
   34dd2:	4659      	mov	r1, fp
   34dd4:	0c0f      	lsrs	r7, r1, #16
   34dd6:	0409      	lsls	r1, r1, #16
   34dd8:	0c09      	lsrs	r1, r1, #16
   34dda:	4688      	mov	r8, r1
   34ddc:	4359      	muls	r1, r3
   34dde:	468a      	mov	sl, r1
   34de0:	0039      	movs	r1, r7
   34de2:	4351      	muls	r1, r2
   34de4:	4689      	mov	r9, r1
   34de6:	4641      	mov	r1, r8
   34de8:	434a      	muls	r2, r1
   34dea:	4651      	mov	r1, sl
   34dec:	0c09      	lsrs	r1, r1, #16
   34dee:	468b      	mov	fp, r1
   34df0:	437b      	muls	r3, r7
   34df2:	18d2      	adds	r2, r2, r3
   34df4:	445a      	add	r2, fp
   34df6:	4293      	cmp	r3, r2
   34df8:	d903      	bls.n	34e02 <__aeabi_dmul+0x2c6>
   34dfa:	2380      	movs	r3, #128	; 0x80
   34dfc:	025b      	lsls	r3, r3, #9
   34dfe:	469b      	mov	fp, r3
   34e00:	44d9      	add	r9, fp
   34e02:	4651      	mov	r1, sl
   34e04:	0409      	lsls	r1, r1, #16
   34e06:	0c09      	lsrs	r1, r1, #16
   34e08:	468a      	mov	sl, r1
   34e0a:	4641      	mov	r1, r8
   34e0c:	4361      	muls	r1, r4
   34e0e:	437c      	muls	r4, r7
   34e10:	0c13      	lsrs	r3, r2, #16
   34e12:	0412      	lsls	r2, r2, #16
   34e14:	444b      	add	r3, r9
   34e16:	4452      	add	r2, sl
   34e18:	46a1      	mov	r9, r4
   34e1a:	468a      	mov	sl, r1
   34e1c:	003c      	movs	r4, r7
   34e1e:	4641      	mov	r1, r8
   34e20:	436c      	muls	r4, r5
   34e22:	434d      	muls	r5, r1
   34e24:	4651      	mov	r1, sl
   34e26:	444d      	add	r5, r9
   34e28:	0c0f      	lsrs	r7, r1, #16
   34e2a:	197d      	adds	r5, r7, r5
   34e2c:	45a9      	cmp	r9, r5
   34e2e:	d903      	bls.n	34e38 <__aeabi_dmul+0x2fc>
   34e30:	2180      	movs	r1, #128	; 0x80
   34e32:	0249      	lsls	r1, r1, #9
   34e34:	4688      	mov	r8, r1
   34e36:	4444      	add	r4, r8
   34e38:	9f04      	ldr	r7, [sp, #16]
   34e3a:	9903      	ldr	r1, [sp, #12]
   34e3c:	46b8      	mov	r8, r7
   34e3e:	4441      	add	r1, r8
   34e40:	468b      	mov	fp, r1
   34e42:	4583      	cmp	fp, r0
   34e44:	4180      	sbcs	r0, r0
   34e46:	4241      	negs	r1, r0
   34e48:	4688      	mov	r8, r1
   34e4a:	4651      	mov	r1, sl
   34e4c:	0408      	lsls	r0, r1, #16
   34e4e:	042f      	lsls	r7, r5, #16
   34e50:	0c00      	lsrs	r0, r0, #16
   34e52:	183f      	adds	r7, r7, r0
   34e54:	4658      	mov	r0, fp
   34e56:	9902      	ldr	r1, [sp, #8]
   34e58:	1810      	adds	r0, r2, r0
   34e5a:	4689      	mov	r9, r1
   34e5c:	4290      	cmp	r0, r2
   34e5e:	4192      	sbcs	r2, r2
   34e60:	444f      	add	r7, r9
   34e62:	46ba      	mov	sl, r7
   34e64:	4252      	negs	r2, r2
   34e66:	4699      	mov	r9, r3
   34e68:	4693      	mov	fp, r2
   34e6a:	44c2      	add	sl, r8
   34e6c:	44d1      	add	r9, sl
   34e6e:	44cb      	add	fp, r9
   34e70:	428f      	cmp	r7, r1
   34e72:	41bf      	sbcs	r7, r7
   34e74:	45c2      	cmp	sl, r8
   34e76:	4189      	sbcs	r1, r1
   34e78:	4599      	cmp	r9, r3
   34e7a:	419b      	sbcs	r3, r3
   34e7c:	4593      	cmp	fp, r2
   34e7e:	4192      	sbcs	r2, r2
   34e80:	427f      	negs	r7, r7
   34e82:	4249      	negs	r1, r1
   34e84:	0c2d      	lsrs	r5, r5, #16
   34e86:	4252      	negs	r2, r2
   34e88:	430f      	orrs	r7, r1
   34e8a:	425b      	negs	r3, r3
   34e8c:	4313      	orrs	r3, r2
   34e8e:	197f      	adds	r7, r7, r5
   34e90:	18ff      	adds	r7, r7, r3
   34e92:	465b      	mov	r3, fp
   34e94:	193c      	adds	r4, r7, r4
   34e96:	0ddb      	lsrs	r3, r3, #23
   34e98:	9a05      	ldr	r2, [sp, #20]
   34e9a:	0264      	lsls	r4, r4, #9
   34e9c:	431c      	orrs	r4, r3
   34e9e:	0243      	lsls	r3, r0, #9
   34ea0:	4313      	orrs	r3, r2
   34ea2:	1e5d      	subs	r5, r3, #1
   34ea4:	41ab      	sbcs	r3, r5
   34ea6:	465a      	mov	r2, fp
   34ea8:	0dc0      	lsrs	r0, r0, #23
   34eaa:	4303      	orrs	r3, r0
   34eac:	0252      	lsls	r2, r2, #9
   34eae:	4313      	orrs	r3, r2
   34eb0:	01e2      	lsls	r2, r4, #7
   34eb2:	d556      	bpl.n	34f62 <__aeabi_dmul+0x426>
   34eb4:	2001      	movs	r0, #1
   34eb6:	085a      	lsrs	r2, r3, #1
   34eb8:	4003      	ands	r3, r0
   34eba:	4313      	orrs	r3, r2
   34ebc:	07e2      	lsls	r2, r4, #31
   34ebe:	4313      	orrs	r3, r2
   34ec0:	0864      	lsrs	r4, r4, #1
   34ec2:	485a      	ldr	r0, [pc, #360]	; (3502c <__aeabi_dmul+0x4f0>)
   34ec4:	4460      	add	r0, ip
   34ec6:	2800      	cmp	r0, #0
   34ec8:	dd4d      	ble.n	34f66 <__aeabi_dmul+0x42a>
   34eca:	075a      	lsls	r2, r3, #29
   34ecc:	d009      	beq.n	34ee2 <__aeabi_dmul+0x3a6>
   34ece:	220f      	movs	r2, #15
   34ed0:	401a      	ands	r2, r3
   34ed2:	2a04      	cmp	r2, #4
   34ed4:	d005      	beq.n	34ee2 <__aeabi_dmul+0x3a6>
   34ed6:	1d1a      	adds	r2, r3, #4
   34ed8:	429a      	cmp	r2, r3
   34eda:	419b      	sbcs	r3, r3
   34edc:	425b      	negs	r3, r3
   34ede:	18e4      	adds	r4, r4, r3
   34ee0:	0013      	movs	r3, r2
   34ee2:	01e2      	lsls	r2, r4, #7
   34ee4:	d504      	bpl.n	34ef0 <__aeabi_dmul+0x3b4>
   34ee6:	2080      	movs	r0, #128	; 0x80
   34ee8:	4a51      	ldr	r2, [pc, #324]	; (35030 <__aeabi_dmul+0x4f4>)
   34eea:	00c0      	lsls	r0, r0, #3
   34eec:	4014      	ands	r4, r2
   34eee:	4460      	add	r0, ip
   34ef0:	4a50      	ldr	r2, [pc, #320]	; (35034 <__aeabi_dmul+0x4f8>)
   34ef2:	4290      	cmp	r0, r2
   34ef4:	dd00      	ble.n	34ef8 <__aeabi_dmul+0x3bc>
   34ef6:	e6e3      	b.n	34cc0 <__aeabi_dmul+0x184>
   34ef8:	2501      	movs	r5, #1
   34efa:	08db      	lsrs	r3, r3, #3
   34efc:	0762      	lsls	r2, r4, #29
   34efe:	431a      	orrs	r2, r3
   34f00:	0264      	lsls	r4, r4, #9
   34f02:	9b01      	ldr	r3, [sp, #4]
   34f04:	4691      	mov	r9, r2
   34f06:	0b22      	lsrs	r2, r4, #12
   34f08:	0544      	lsls	r4, r0, #21
   34f0a:	0d64      	lsrs	r4, r4, #21
   34f0c:	401d      	ands	r5, r3
   34f0e:	e67c      	b.n	34c0a <__aeabi_dmul+0xce>
   34f10:	2280      	movs	r2, #128	; 0x80
   34f12:	4659      	mov	r1, fp
   34f14:	0312      	lsls	r2, r2, #12
   34f16:	4211      	tst	r1, r2
   34f18:	d008      	beq.n	34f2c <__aeabi_dmul+0x3f0>
   34f1a:	4214      	tst	r4, r2
   34f1c:	d106      	bne.n	34f2c <__aeabi_dmul+0x3f0>
   34f1e:	4322      	orrs	r2, r4
   34f20:	0312      	lsls	r2, r2, #12
   34f22:	0b12      	lsrs	r2, r2, #12
   34f24:	4645      	mov	r5, r8
   34f26:	4699      	mov	r9, r3
   34f28:	4c43      	ldr	r4, [pc, #268]	; (35038 <__aeabi_dmul+0x4fc>)
   34f2a:	e66e      	b.n	34c0a <__aeabi_dmul+0xce>
   34f2c:	465b      	mov	r3, fp
   34f2e:	431a      	orrs	r2, r3
   34f30:	0312      	lsls	r2, r2, #12
   34f32:	0b12      	lsrs	r2, r2, #12
   34f34:	4c40      	ldr	r4, [pc, #256]	; (35038 <__aeabi_dmul+0x4fc>)
   34f36:	e668      	b.n	34c0a <__aeabi_dmul+0xce>
   34f38:	0003      	movs	r3, r0
   34f3a:	4654      	mov	r4, sl
   34f3c:	3b28      	subs	r3, #40	; 0x28
   34f3e:	409c      	lsls	r4, r3
   34f40:	2300      	movs	r3, #0
   34f42:	e6b9      	b.n	34cb8 <__aeabi_dmul+0x17c>
   34f44:	f000 fbfc 	bl	35740 <__clzsi2>
   34f48:	3020      	adds	r0, #32
   34f4a:	e6a6      	b.n	34c9a <__aeabi_dmul+0x15e>
   34f4c:	0003      	movs	r3, r0
   34f4e:	3b28      	subs	r3, #40	; 0x28
   34f50:	409f      	lsls	r7, r3
   34f52:	2300      	movs	r3, #0
   34f54:	46bb      	mov	fp, r7
   34f56:	4699      	mov	r9, r3
   34f58:	e68a      	b.n	34c70 <__aeabi_dmul+0x134>
   34f5a:	f000 fbf1 	bl	35740 <__clzsi2>
   34f5e:	3020      	adds	r0, #32
   34f60:	e674      	b.n	34c4c <__aeabi_dmul+0x110>
   34f62:	46b4      	mov	ip, r6
   34f64:	e7ad      	b.n	34ec2 <__aeabi_dmul+0x386>
   34f66:	2501      	movs	r5, #1
   34f68:	1a2a      	subs	r2, r5, r0
   34f6a:	2a38      	cmp	r2, #56	; 0x38
   34f6c:	dd06      	ble.n	34f7c <__aeabi_dmul+0x440>
   34f6e:	9b01      	ldr	r3, [sp, #4]
   34f70:	2400      	movs	r4, #0
   34f72:	401d      	ands	r5, r3
   34f74:	2300      	movs	r3, #0
   34f76:	2200      	movs	r2, #0
   34f78:	4699      	mov	r9, r3
   34f7a:	e646      	b.n	34c0a <__aeabi_dmul+0xce>
   34f7c:	2a1f      	cmp	r2, #31
   34f7e:	dc21      	bgt.n	34fc4 <__aeabi_dmul+0x488>
   34f80:	2520      	movs	r5, #32
   34f82:	0020      	movs	r0, r4
   34f84:	1aad      	subs	r5, r5, r2
   34f86:	001e      	movs	r6, r3
   34f88:	40ab      	lsls	r3, r5
   34f8a:	40a8      	lsls	r0, r5
   34f8c:	40d6      	lsrs	r6, r2
   34f8e:	1e5d      	subs	r5, r3, #1
   34f90:	41ab      	sbcs	r3, r5
   34f92:	4330      	orrs	r0, r6
   34f94:	4318      	orrs	r0, r3
   34f96:	40d4      	lsrs	r4, r2
   34f98:	0743      	lsls	r3, r0, #29
   34f9a:	d009      	beq.n	34fb0 <__aeabi_dmul+0x474>
   34f9c:	230f      	movs	r3, #15
   34f9e:	4003      	ands	r3, r0
   34fa0:	2b04      	cmp	r3, #4
   34fa2:	d005      	beq.n	34fb0 <__aeabi_dmul+0x474>
   34fa4:	0003      	movs	r3, r0
   34fa6:	1d18      	adds	r0, r3, #4
   34fa8:	4298      	cmp	r0, r3
   34faa:	419b      	sbcs	r3, r3
   34fac:	425b      	negs	r3, r3
   34fae:	18e4      	adds	r4, r4, r3
   34fb0:	0223      	lsls	r3, r4, #8
   34fb2:	d521      	bpl.n	34ff8 <__aeabi_dmul+0x4bc>
   34fb4:	2501      	movs	r5, #1
   34fb6:	9b01      	ldr	r3, [sp, #4]
   34fb8:	2401      	movs	r4, #1
   34fba:	401d      	ands	r5, r3
   34fbc:	2300      	movs	r3, #0
   34fbe:	2200      	movs	r2, #0
   34fc0:	4699      	mov	r9, r3
   34fc2:	e622      	b.n	34c0a <__aeabi_dmul+0xce>
   34fc4:	251f      	movs	r5, #31
   34fc6:	0021      	movs	r1, r4
   34fc8:	426d      	negs	r5, r5
   34fca:	1a28      	subs	r0, r5, r0
   34fcc:	40c1      	lsrs	r1, r0
   34fce:	0008      	movs	r0, r1
   34fd0:	2a20      	cmp	r2, #32
   34fd2:	d01d      	beq.n	35010 <__aeabi_dmul+0x4d4>
   34fd4:	355f      	adds	r5, #95	; 0x5f
   34fd6:	1aaa      	subs	r2, r5, r2
   34fd8:	4094      	lsls	r4, r2
   34fda:	4323      	orrs	r3, r4
   34fdc:	1e5c      	subs	r4, r3, #1
   34fde:	41a3      	sbcs	r3, r4
   34fe0:	2507      	movs	r5, #7
   34fe2:	4303      	orrs	r3, r0
   34fe4:	401d      	ands	r5, r3
   34fe6:	2200      	movs	r2, #0
   34fe8:	2d00      	cmp	r5, #0
   34fea:	d009      	beq.n	35000 <__aeabi_dmul+0x4c4>
   34fec:	220f      	movs	r2, #15
   34fee:	2400      	movs	r4, #0
   34ff0:	401a      	ands	r2, r3
   34ff2:	0018      	movs	r0, r3
   34ff4:	2a04      	cmp	r2, #4
   34ff6:	d1d6      	bne.n	34fa6 <__aeabi_dmul+0x46a>
   34ff8:	0003      	movs	r3, r0
   34ffa:	0765      	lsls	r5, r4, #29
   34ffc:	0264      	lsls	r4, r4, #9
   34ffe:	0b22      	lsrs	r2, r4, #12
   35000:	08db      	lsrs	r3, r3, #3
   35002:	432b      	orrs	r3, r5
   35004:	2501      	movs	r5, #1
   35006:	4699      	mov	r9, r3
   35008:	9b01      	ldr	r3, [sp, #4]
   3500a:	2400      	movs	r4, #0
   3500c:	401d      	ands	r5, r3
   3500e:	e5fc      	b.n	34c0a <__aeabi_dmul+0xce>
   35010:	2400      	movs	r4, #0
   35012:	e7e2      	b.n	34fda <__aeabi_dmul+0x49e>
   35014:	2280      	movs	r2, #128	; 0x80
   35016:	2501      	movs	r5, #1
   35018:	0312      	lsls	r2, r2, #12
   3501a:	4322      	orrs	r2, r4
   3501c:	9901      	ldr	r1, [sp, #4]
   3501e:	0312      	lsls	r2, r2, #12
   35020:	0b12      	lsrs	r2, r2, #12
   35022:	400d      	ands	r5, r1
   35024:	4699      	mov	r9, r3
   35026:	4c04      	ldr	r4, [pc, #16]	; (35038 <__aeabi_dmul+0x4fc>)
   35028:	e5ef      	b.n	34c0a <__aeabi_dmul+0xce>
   3502a:	46c0      	nop			; (mov r8, r8)
   3502c:	000003ff 	.word	0x000003ff
   35030:	feffffff 	.word	0xfeffffff
   35034:	000007fe 	.word	0x000007fe
   35038:	000007ff 	.word	0x000007ff

0003503c <__aeabi_dsub>:
   3503c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3503e:	4646      	mov	r6, r8
   35040:	46d6      	mov	lr, sl
   35042:	464f      	mov	r7, r9
   35044:	030c      	lsls	r4, r1, #12
   35046:	b5c0      	push	{r6, r7, lr}
   35048:	0fcd      	lsrs	r5, r1, #31
   3504a:	004e      	lsls	r6, r1, #1
   3504c:	0a61      	lsrs	r1, r4, #9
   3504e:	0f44      	lsrs	r4, r0, #29
   35050:	430c      	orrs	r4, r1
   35052:	00c1      	lsls	r1, r0, #3
   35054:	0058      	lsls	r0, r3, #1
   35056:	0d40      	lsrs	r0, r0, #21
   35058:	4684      	mov	ip, r0
   3505a:	468a      	mov	sl, r1
   3505c:	000f      	movs	r7, r1
   3505e:	0319      	lsls	r1, r3, #12
   35060:	0f50      	lsrs	r0, r2, #29
   35062:	0a49      	lsrs	r1, r1, #9
   35064:	4301      	orrs	r1, r0
   35066:	48c6      	ldr	r0, [pc, #792]	; (35380 <__aeabi_dsub+0x344>)
   35068:	0d76      	lsrs	r6, r6, #21
   3506a:	46a8      	mov	r8, r5
   3506c:	0fdb      	lsrs	r3, r3, #31
   3506e:	00d2      	lsls	r2, r2, #3
   35070:	4584      	cmp	ip, r0
   35072:	d100      	bne.n	35076 <__aeabi_dsub+0x3a>
   35074:	e0d8      	b.n	35228 <__aeabi_dsub+0x1ec>
   35076:	2001      	movs	r0, #1
   35078:	4043      	eors	r3, r0
   3507a:	42ab      	cmp	r3, r5
   3507c:	d100      	bne.n	35080 <__aeabi_dsub+0x44>
   3507e:	e0a6      	b.n	351ce <__aeabi_dsub+0x192>
   35080:	4660      	mov	r0, ip
   35082:	1a35      	subs	r5, r6, r0
   35084:	2d00      	cmp	r5, #0
   35086:	dc00      	bgt.n	3508a <__aeabi_dsub+0x4e>
   35088:	e105      	b.n	35296 <__aeabi_dsub+0x25a>
   3508a:	2800      	cmp	r0, #0
   3508c:	d110      	bne.n	350b0 <__aeabi_dsub+0x74>
   3508e:	000b      	movs	r3, r1
   35090:	4313      	orrs	r3, r2
   35092:	d100      	bne.n	35096 <__aeabi_dsub+0x5a>
   35094:	e0d7      	b.n	35246 <__aeabi_dsub+0x20a>
   35096:	1e6b      	subs	r3, r5, #1
   35098:	2b00      	cmp	r3, #0
   3509a:	d000      	beq.n	3509e <__aeabi_dsub+0x62>
   3509c:	e14b      	b.n	35336 <__aeabi_dsub+0x2fa>
   3509e:	4653      	mov	r3, sl
   350a0:	1a9f      	subs	r7, r3, r2
   350a2:	45ba      	cmp	sl, r7
   350a4:	4180      	sbcs	r0, r0
   350a6:	1a64      	subs	r4, r4, r1
   350a8:	4240      	negs	r0, r0
   350aa:	1a24      	subs	r4, r4, r0
   350ac:	2601      	movs	r6, #1
   350ae:	e01e      	b.n	350ee <__aeabi_dsub+0xb2>
   350b0:	4bb3      	ldr	r3, [pc, #716]	; (35380 <__aeabi_dsub+0x344>)
   350b2:	429e      	cmp	r6, r3
   350b4:	d048      	beq.n	35148 <__aeabi_dsub+0x10c>
   350b6:	2380      	movs	r3, #128	; 0x80
   350b8:	041b      	lsls	r3, r3, #16
   350ba:	4319      	orrs	r1, r3
   350bc:	2d38      	cmp	r5, #56	; 0x38
   350be:	dd00      	ble.n	350c2 <__aeabi_dsub+0x86>
   350c0:	e119      	b.n	352f6 <__aeabi_dsub+0x2ba>
   350c2:	2d1f      	cmp	r5, #31
   350c4:	dd00      	ble.n	350c8 <__aeabi_dsub+0x8c>
   350c6:	e14c      	b.n	35362 <__aeabi_dsub+0x326>
   350c8:	2320      	movs	r3, #32
   350ca:	000f      	movs	r7, r1
   350cc:	1b5b      	subs	r3, r3, r5
   350ce:	0010      	movs	r0, r2
   350d0:	409a      	lsls	r2, r3
   350d2:	409f      	lsls	r7, r3
   350d4:	40e8      	lsrs	r0, r5
   350d6:	1e53      	subs	r3, r2, #1
   350d8:	419a      	sbcs	r2, r3
   350da:	40e9      	lsrs	r1, r5
   350dc:	4307      	orrs	r7, r0
   350de:	4317      	orrs	r7, r2
   350e0:	4653      	mov	r3, sl
   350e2:	1bdf      	subs	r7, r3, r7
   350e4:	1a61      	subs	r1, r4, r1
   350e6:	45ba      	cmp	sl, r7
   350e8:	41a4      	sbcs	r4, r4
   350ea:	4264      	negs	r4, r4
   350ec:	1b0c      	subs	r4, r1, r4
   350ee:	0223      	lsls	r3, r4, #8
   350f0:	d400      	bmi.n	350f4 <__aeabi_dsub+0xb8>
   350f2:	e0c5      	b.n	35280 <__aeabi_dsub+0x244>
   350f4:	0264      	lsls	r4, r4, #9
   350f6:	0a65      	lsrs	r5, r4, #9
   350f8:	2d00      	cmp	r5, #0
   350fa:	d100      	bne.n	350fe <__aeabi_dsub+0xc2>
   350fc:	e0f6      	b.n	352ec <__aeabi_dsub+0x2b0>
   350fe:	0028      	movs	r0, r5
   35100:	f000 fb1e 	bl	35740 <__clzsi2>
   35104:	0003      	movs	r3, r0
   35106:	3b08      	subs	r3, #8
   35108:	2b1f      	cmp	r3, #31
   3510a:	dd00      	ble.n	3510e <__aeabi_dsub+0xd2>
   3510c:	e0e9      	b.n	352e2 <__aeabi_dsub+0x2a6>
   3510e:	2220      	movs	r2, #32
   35110:	003c      	movs	r4, r7
   35112:	1ad2      	subs	r2, r2, r3
   35114:	409d      	lsls	r5, r3
   35116:	40d4      	lsrs	r4, r2
   35118:	409f      	lsls	r7, r3
   3511a:	4325      	orrs	r5, r4
   3511c:	429e      	cmp	r6, r3
   3511e:	dd00      	ble.n	35122 <__aeabi_dsub+0xe6>
   35120:	e0db      	b.n	352da <__aeabi_dsub+0x29e>
   35122:	1b9e      	subs	r6, r3, r6
   35124:	1c73      	adds	r3, r6, #1
   35126:	2b1f      	cmp	r3, #31
   35128:	dd00      	ble.n	3512c <__aeabi_dsub+0xf0>
   3512a:	e10a      	b.n	35342 <__aeabi_dsub+0x306>
   3512c:	2220      	movs	r2, #32
   3512e:	0038      	movs	r0, r7
   35130:	1ad2      	subs	r2, r2, r3
   35132:	0029      	movs	r1, r5
   35134:	4097      	lsls	r7, r2
   35136:	002c      	movs	r4, r5
   35138:	4091      	lsls	r1, r2
   3513a:	40d8      	lsrs	r0, r3
   3513c:	1e7a      	subs	r2, r7, #1
   3513e:	4197      	sbcs	r7, r2
   35140:	40dc      	lsrs	r4, r3
   35142:	2600      	movs	r6, #0
   35144:	4301      	orrs	r1, r0
   35146:	430f      	orrs	r7, r1
   35148:	077b      	lsls	r3, r7, #29
   3514a:	d009      	beq.n	35160 <__aeabi_dsub+0x124>
   3514c:	230f      	movs	r3, #15
   3514e:	403b      	ands	r3, r7
   35150:	2b04      	cmp	r3, #4
   35152:	d005      	beq.n	35160 <__aeabi_dsub+0x124>
   35154:	1d3b      	adds	r3, r7, #4
   35156:	42bb      	cmp	r3, r7
   35158:	41bf      	sbcs	r7, r7
   3515a:	427f      	negs	r7, r7
   3515c:	19e4      	adds	r4, r4, r7
   3515e:	001f      	movs	r7, r3
   35160:	0223      	lsls	r3, r4, #8
   35162:	d525      	bpl.n	351b0 <__aeabi_dsub+0x174>
   35164:	4b86      	ldr	r3, [pc, #536]	; (35380 <__aeabi_dsub+0x344>)
   35166:	3601      	adds	r6, #1
   35168:	429e      	cmp	r6, r3
   3516a:	d100      	bne.n	3516e <__aeabi_dsub+0x132>
   3516c:	e0af      	b.n	352ce <__aeabi_dsub+0x292>
   3516e:	4b85      	ldr	r3, [pc, #532]	; (35384 <__aeabi_dsub+0x348>)
   35170:	2501      	movs	r5, #1
   35172:	401c      	ands	r4, r3
   35174:	4643      	mov	r3, r8
   35176:	0762      	lsls	r2, r4, #29
   35178:	08ff      	lsrs	r7, r7, #3
   3517a:	0264      	lsls	r4, r4, #9
   3517c:	0576      	lsls	r6, r6, #21
   3517e:	4317      	orrs	r7, r2
   35180:	0b24      	lsrs	r4, r4, #12
   35182:	0d76      	lsrs	r6, r6, #21
   35184:	401d      	ands	r5, r3
   35186:	2100      	movs	r1, #0
   35188:	0324      	lsls	r4, r4, #12
   3518a:	0b23      	lsrs	r3, r4, #12
   3518c:	0d0c      	lsrs	r4, r1, #20
   3518e:	4a7e      	ldr	r2, [pc, #504]	; (35388 <__aeabi_dsub+0x34c>)
   35190:	0524      	lsls	r4, r4, #20
   35192:	431c      	orrs	r4, r3
   35194:	4014      	ands	r4, r2
   35196:	0533      	lsls	r3, r6, #20
   35198:	4323      	orrs	r3, r4
   3519a:	005b      	lsls	r3, r3, #1
   3519c:	07ed      	lsls	r5, r5, #31
   3519e:	085b      	lsrs	r3, r3, #1
   351a0:	432b      	orrs	r3, r5
   351a2:	0038      	movs	r0, r7
   351a4:	0019      	movs	r1, r3
   351a6:	bc1c      	pop	{r2, r3, r4}
   351a8:	4690      	mov	r8, r2
   351aa:	4699      	mov	r9, r3
   351ac:	46a2      	mov	sl, r4
   351ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   351b0:	2501      	movs	r5, #1
   351b2:	4643      	mov	r3, r8
   351b4:	0762      	lsls	r2, r4, #29
   351b6:	08ff      	lsrs	r7, r7, #3
   351b8:	4317      	orrs	r7, r2
   351ba:	08e4      	lsrs	r4, r4, #3
   351bc:	401d      	ands	r5, r3
   351be:	4b70      	ldr	r3, [pc, #448]	; (35380 <__aeabi_dsub+0x344>)
   351c0:	429e      	cmp	r6, r3
   351c2:	d036      	beq.n	35232 <__aeabi_dsub+0x1f6>
   351c4:	0324      	lsls	r4, r4, #12
   351c6:	0576      	lsls	r6, r6, #21
   351c8:	0b24      	lsrs	r4, r4, #12
   351ca:	0d76      	lsrs	r6, r6, #21
   351cc:	e7db      	b.n	35186 <__aeabi_dsub+0x14a>
   351ce:	4663      	mov	r3, ip
   351d0:	1af3      	subs	r3, r6, r3
   351d2:	2b00      	cmp	r3, #0
   351d4:	dc00      	bgt.n	351d8 <__aeabi_dsub+0x19c>
   351d6:	e094      	b.n	35302 <__aeabi_dsub+0x2c6>
   351d8:	4660      	mov	r0, ip
   351da:	2800      	cmp	r0, #0
   351dc:	d035      	beq.n	3524a <__aeabi_dsub+0x20e>
   351de:	4868      	ldr	r0, [pc, #416]	; (35380 <__aeabi_dsub+0x344>)
   351e0:	4286      	cmp	r6, r0
   351e2:	d0b1      	beq.n	35148 <__aeabi_dsub+0x10c>
   351e4:	2780      	movs	r7, #128	; 0x80
   351e6:	043f      	lsls	r7, r7, #16
   351e8:	4339      	orrs	r1, r7
   351ea:	2b38      	cmp	r3, #56	; 0x38
   351ec:	dc00      	bgt.n	351f0 <__aeabi_dsub+0x1b4>
   351ee:	e0fd      	b.n	353ec <__aeabi_dsub+0x3b0>
   351f0:	430a      	orrs	r2, r1
   351f2:	0017      	movs	r7, r2
   351f4:	2100      	movs	r1, #0
   351f6:	1e7a      	subs	r2, r7, #1
   351f8:	4197      	sbcs	r7, r2
   351fa:	4457      	add	r7, sl
   351fc:	4557      	cmp	r7, sl
   351fe:	4180      	sbcs	r0, r0
   35200:	1909      	adds	r1, r1, r4
   35202:	4244      	negs	r4, r0
   35204:	190c      	adds	r4, r1, r4
   35206:	0223      	lsls	r3, r4, #8
   35208:	d53a      	bpl.n	35280 <__aeabi_dsub+0x244>
   3520a:	4b5d      	ldr	r3, [pc, #372]	; (35380 <__aeabi_dsub+0x344>)
   3520c:	3601      	adds	r6, #1
   3520e:	429e      	cmp	r6, r3
   35210:	d100      	bne.n	35214 <__aeabi_dsub+0x1d8>
   35212:	e14b      	b.n	354ac <__aeabi_dsub+0x470>
   35214:	2201      	movs	r2, #1
   35216:	4b5b      	ldr	r3, [pc, #364]	; (35384 <__aeabi_dsub+0x348>)
   35218:	401c      	ands	r4, r3
   3521a:	087b      	lsrs	r3, r7, #1
   3521c:	4017      	ands	r7, r2
   3521e:	431f      	orrs	r7, r3
   35220:	07e2      	lsls	r2, r4, #31
   35222:	4317      	orrs	r7, r2
   35224:	0864      	lsrs	r4, r4, #1
   35226:	e78f      	b.n	35148 <__aeabi_dsub+0x10c>
   35228:	0008      	movs	r0, r1
   3522a:	4310      	orrs	r0, r2
   3522c:	d000      	beq.n	35230 <__aeabi_dsub+0x1f4>
   3522e:	e724      	b.n	3507a <__aeabi_dsub+0x3e>
   35230:	e721      	b.n	35076 <__aeabi_dsub+0x3a>
   35232:	0023      	movs	r3, r4
   35234:	433b      	orrs	r3, r7
   35236:	d100      	bne.n	3523a <__aeabi_dsub+0x1fe>
   35238:	e1b9      	b.n	355ae <__aeabi_dsub+0x572>
   3523a:	2280      	movs	r2, #128	; 0x80
   3523c:	0312      	lsls	r2, r2, #12
   3523e:	4314      	orrs	r4, r2
   35240:	0324      	lsls	r4, r4, #12
   35242:	0b24      	lsrs	r4, r4, #12
   35244:	e79f      	b.n	35186 <__aeabi_dsub+0x14a>
   35246:	002e      	movs	r6, r5
   35248:	e77e      	b.n	35148 <__aeabi_dsub+0x10c>
   3524a:	0008      	movs	r0, r1
   3524c:	4310      	orrs	r0, r2
   3524e:	d100      	bne.n	35252 <__aeabi_dsub+0x216>
   35250:	e0ca      	b.n	353e8 <__aeabi_dsub+0x3ac>
   35252:	1e58      	subs	r0, r3, #1
   35254:	4684      	mov	ip, r0
   35256:	2800      	cmp	r0, #0
   35258:	d000      	beq.n	3525c <__aeabi_dsub+0x220>
   3525a:	e0e7      	b.n	3542c <__aeabi_dsub+0x3f0>
   3525c:	4452      	add	r2, sl
   3525e:	4552      	cmp	r2, sl
   35260:	4180      	sbcs	r0, r0
   35262:	1864      	adds	r4, r4, r1
   35264:	4240      	negs	r0, r0
   35266:	1824      	adds	r4, r4, r0
   35268:	0017      	movs	r7, r2
   3526a:	2601      	movs	r6, #1
   3526c:	0223      	lsls	r3, r4, #8
   3526e:	d507      	bpl.n	35280 <__aeabi_dsub+0x244>
   35270:	2602      	movs	r6, #2
   35272:	e7cf      	b.n	35214 <__aeabi_dsub+0x1d8>
   35274:	4664      	mov	r4, ip
   35276:	432c      	orrs	r4, r5
   35278:	d100      	bne.n	3527c <__aeabi_dsub+0x240>
   3527a:	e1b3      	b.n	355e4 <__aeabi_dsub+0x5a8>
   3527c:	002c      	movs	r4, r5
   3527e:	4667      	mov	r7, ip
   35280:	077b      	lsls	r3, r7, #29
   35282:	d000      	beq.n	35286 <__aeabi_dsub+0x24a>
   35284:	e762      	b.n	3514c <__aeabi_dsub+0x110>
   35286:	0763      	lsls	r3, r4, #29
   35288:	08ff      	lsrs	r7, r7, #3
   3528a:	431f      	orrs	r7, r3
   3528c:	2501      	movs	r5, #1
   3528e:	4643      	mov	r3, r8
   35290:	08e4      	lsrs	r4, r4, #3
   35292:	401d      	ands	r5, r3
   35294:	e793      	b.n	351be <__aeabi_dsub+0x182>
   35296:	2d00      	cmp	r5, #0
   35298:	d178      	bne.n	3538c <__aeabi_dsub+0x350>
   3529a:	1c75      	adds	r5, r6, #1
   3529c:	056d      	lsls	r5, r5, #21
   3529e:	0d6d      	lsrs	r5, r5, #21
   352a0:	2d01      	cmp	r5, #1
   352a2:	dc00      	bgt.n	352a6 <__aeabi_dsub+0x26a>
   352a4:	e0f2      	b.n	3548c <__aeabi_dsub+0x450>
   352a6:	4650      	mov	r0, sl
   352a8:	1a80      	subs	r0, r0, r2
   352aa:	4582      	cmp	sl, r0
   352ac:	41bf      	sbcs	r7, r7
   352ae:	1a65      	subs	r5, r4, r1
   352b0:	427f      	negs	r7, r7
   352b2:	1bed      	subs	r5, r5, r7
   352b4:	4684      	mov	ip, r0
   352b6:	0228      	lsls	r0, r5, #8
   352b8:	d400      	bmi.n	352bc <__aeabi_dsub+0x280>
   352ba:	e08c      	b.n	353d6 <__aeabi_dsub+0x39a>
   352bc:	4650      	mov	r0, sl
   352be:	1a17      	subs	r7, r2, r0
   352c0:	42ba      	cmp	r2, r7
   352c2:	4192      	sbcs	r2, r2
   352c4:	1b0c      	subs	r4, r1, r4
   352c6:	4255      	negs	r5, r2
   352c8:	1b65      	subs	r5, r4, r5
   352ca:	4698      	mov	r8, r3
   352cc:	e714      	b.n	350f8 <__aeabi_dsub+0xbc>
   352ce:	2501      	movs	r5, #1
   352d0:	4643      	mov	r3, r8
   352d2:	2400      	movs	r4, #0
   352d4:	401d      	ands	r5, r3
   352d6:	2700      	movs	r7, #0
   352d8:	e755      	b.n	35186 <__aeabi_dsub+0x14a>
   352da:	4c2a      	ldr	r4, [pc, #168]	; (35384 <__aeabi_dsub+0x348>)
   352dc:	1af6      	subs	r6, r6, r3
   352de:	402c      	ands	r4, r5
   352e0:	e732      	b.n	35148 <__aeabi_dsub+0x10c>
   352e2:	003d      	movs	r5, r7
   352e4:	3828      	subs	r0, #40	; 0x28
   352e6:	4085      	lsls	r5, r0
   352e8:	2700      	movs	r7, #0
   352ea:	e717      	b.n	3511c <__aeabi_dsub+0xe0>
   352ec:	0038      	movs	r0, r7
   352ee:	f000 fa27 	bl	35740 <__clzsi2>
   352f2:	3020      	adds	r0, #32
   352f4:	e706      	b.n	35104 <__aeabi_dsub+0xc8>
   352f6:	430a      	orrs	r2, r1
   352f8:	0017      	movs	r7, r2
   352fa:	2100      	movs	r1, #0
   352fc:	1e7a      	subs	r2, r7, #1
   352fe:	4197      	sbcs	r7, r2
   35300:	e6ee      	b.n	350e0 <__aeabi_dsub+0xa4>
   35302:	2b00      	cmp	r3, #0
   35304:	d000      	beq.n	35308 <__aeabi_dsub+0x2cc>
   35306:	e0e5      	b.n	354d4 <__aeabi_dsub+0x498>
   35308:	1c73      	adds	r3, r6, #1
   3530a:	469c      	mov	ip, r3
   3530c:	055b      	lsls	r3, r3, #21
   3530e:	0d5b      	lsrs	r3, r3, #21
   35310:	2b01      	cmp	r3, #1
   35312:	dc00      	bgt.n	35316 <__aeabi_dsub+0x2da>
   35314:	e09f      	b.n	35456 <__aeabi_dsub+0x41a>
   35316:	4b1a      	ldr	r3, [pc, #104]	; (35380 <__aeabi_dsub+0x344>)
   35318:	459c      	cmp	ip, r3
   3531a:	d100      	bne.n	3531e <__aeabi_dsub+0x2e2>
   3531c:	e0c5      	b.n	354aa <__aeabi_dsub+0x46e>
   3531e:	4452      	add	r2, sl
   35320:	4552      	cmp	r2, sl
   35322:	4180      	sbcs	r0, r0
   35324:	1864      	adds	r4, r4, r1
   35326:	4240      	negs	r0, r0
   35328:	1824      	adds	r4, r4, r0
   3532a:	07e7      	lsls	r7, r4, #31
   3532c:	0852      	lsrs	r2, r2, #1
   3532e:	4317      	orrs	r7, r2
   35330:	0864      	lsrs	r4, r4, #1
   35332:	4666      	mov	r6, ip
   35334:	e708      	b.n	35148 <__aeabi_dsub+0x10c>
   35336:	4812      	ldr	r0, [pc, #72]	; (35380 <__aeabi_dsub+0x344>)
   35338:	4285      	cmp	r5, r0
   3533a:	d100      	bne.n	3533e <__aeabi_dsub+0x302>
   3533c:	e085      	b.n	3544a <__aeabi_dsub+0x40e>
   3533e:	001d      	movs	r5, r3
   35340:	e6bc      	b.n	350bc <__aeabi_dsub+0x80>
   35342:	0029      	movs	r1, r5
   35344:	3e1f      	subs	r6, #31
   35346:	40f1      	lsrs	r1, r6
   35348:	2b20      	cmp	r3, #32
   3534a:	d100      	bne.n	3534e <__aeabi_dsub+0x312>
   3534c:	e07f      	b.n	3544e <__aeabi_dsub+0x412>
   3534e:	2240      	movs	r2, #64	; 0x40
   35350:	1ad3      	subs	r3, r2, r3
   35352:	409d      	lsls	r5, r3
   35354:	432f      	orrs	r7, r5
   35356:	1e7d      	subs	r5, r7, #1
   35358:	41af      	sbcs	r7, r5
   3535a:	2400      	movs	r4, #0
   3535c:	430f      	orrs	r7, r1
   3535e:	2600      	movs	r6, #0
   35360:	e78e      	b.n	35280 <__aeabi_dsub+0x244>
   35362:	002b      	movs	r3, r5
   35364:	000f      	movs	r7, r1
   35366:	3b20      	subs	r3, #32
   35368:	40df      	lsrs	r7, r3
   3536a:	2d20      	cmp	r5, #32
   3536c:	d071      	beq.n	35452 <__aeabi_dsub+0x416>
   3536e:	2340      	movs	r3, #64	; 0x40
   35370:	1b5d      	subs	r5, r3, r5
   35372:	40a9      	lsls	r1, r5
   35374:	430a      	orrs	r2, r1
   35376:	1e51      	subs	r1, r2, #1
   35378:	418a      	sbcs	r2, r1
   3537a:	2100      	movs	r1, #0
   3537c:	4317      	orrs	r7, r2
   3537e:	e6af      	b.n	350e0 <__aeabi_dsub+0xa4>
   35380:	000007ff 	.word	0x000007ff
   35384:	ff7fffff 	.word	0xff7fffff
   35388:	800fffff 	.word	0x800fffff
   3538c:	2e00      	cmp	r6, #0
   3538e:	d03e      	beq.n	3540e <__aeabi_dsub+0x3d2>
   35390:	4eb3      	ldr	r6, [pc, #716]	; (35660 <__aeabi_dsub+0x624>)
   35392:	45b4      	cmp	ip, r6
   35394:	d045      	beq.n	35422 <__aeabi_dsub+0x3e6>
   35396:	2680      	movs	r6, #128	; 0x80
   35398:	0436      	lsls	r6, r6, #16
   3539a:	426d      	negs	r5, r5
   3539c:	4334      	orrs	r4, r6
   3539e:	2d38      	cmp	r5, #56	; 0x38
   353a0:	dd00      	ble.n	353a4 <__aeabi_dsub+0x368>
   353a2:	e0a8      	b.n	354f6 <__aeabi_dsub+0x4ba>
   353a4:	2d1f      	cmp	r5, #31
   353a6:	dd00      	ble.n	353aa <__aeabi_dsub+0x36e>
   353a8:	e11f      	b.n	355ea <__aeabi_dsub+0x5ae>
   353aa:	2620      	movs	r6, #32
   353ac:	0027      	movs	r7, r4
   353ae:	4650      	mov	r0, sl
   353b0:	1b76      	subs	r6, r6, r5
   353b2:	40b7      	lsls	r7, r6
   353b4:	40e8      	lsrs	r0, r5
   353b6:	4307      	orrs	r7, r0
   353b8:	4650      	mov	r0, sl
   353ba:	40b0      	lsls	r0, r6
   353bc:	1e46      	subs	r6, r0, #1
   353be:	41b0      	sbcs	r0, r6
   353c0:	40ec      	lsrs	r4, r5
   353c2:	4338      	orrs	r0, r7
   353c4:	1a17      	subs	r7, r2, r0
   353c6:	42ba      	cmp	r2, r7
   353c8:	4192      	sbcs	r2, r2
   353ca:	1b0c      	subs	r4, r1, r4
   353cc:	4252      	negs	r2, r2
   353ce:	1aa4      	subs	r4, r4, r2
   353d0:	4666      	mov	r6, ip
   353d2:	4698      	mov	r8, r3
   353d4:	e68b      	b.n	350ee <__aeabi_dsub+0xb2>
   353d6:	4664      	mov	r4, ip
   353d8:	4667      	mov	r7, ip
   353da:	432c      	orrs	r4, r5
   353dc:	d000      	beq.n	353e0 <__aeabi_dsub+0x3a4>
   353de:	e68b      	b.n	350f8 <__aeabi_dsub+0xbc>
   353e0:	2500      	movs	r5, #0
   353e2:	2600      	movs	r6, #0
   353e4:	2700      	movs	r7, #0
   353e6:	e6ea      	b.n	351be <__aeabi_dsub+0x182>
   353e8:	001e      	movs	r6, r3
   353ea:	e6ad      	b.n	35148 <__aeabi_dsub+0x10c>
   353ec:	2b1f      	cmp	r3, #31
   353ee:	dc60      	bgt.n	354b2 <__aeabi_dsub+0x476>
   353f0:	2720      	movs	r7, #32
   353f2:	1af8      	subs	r0, r7, r3
   353f4:	000f      	movs	r7, r1
   353f6:	4684      	mov	ip, r0
   353f8:	4087      	lsls	r7, r0
   353fa:	0010      	movs	r0, r2
   353fc:	40d8      	lsrs	r0, r3
   353fe:	4307      	orrs	r7, r0
   35400:	4660      	mov	r0, ip
   35402:	4082      	lsls	r2, r0
   35404:	1e50      	subs	r0, r2, #1
   35406:	4182      	sbcs	r2, r0
   35408:	40d9      	lsrs	r1, r3
   3540a:	4317      	orrs	r7, r2
   3540c:	e6f5      	b.n	351fa <__aeabi_dsub+0x1be>
   3540e:	0026      	movs	r6, r4
   35410:	4650      	mov	r0, sl
   35412:	4306      	orrs	r6, r0
   35414:	d005      	beq.n	35422 <__aeabi_dsub+0x3e6>
   35416:	43ed      	mvns	r5, r5
   35418:	2d00      	cmp	r5, #0
   3541a:	d0d3      	beq.n	353c4 <__aeabi_dsub+0x388>
   3541c:	4e90      	ldr	r6, [pc, #576]	; (35660 <__aeabi_dsub+0x624>)
   3541e:	45b4      	cmp	ip, r6
   35420:	d1bd      	bne.n	3539e <__aeabi_dsub+0x362>
   35422:	000c      	movs	r4, r1
   35424:	0017      	movs	r7, r2
   35426:	4666      	mov	r6, ip
   35428:	4698      	mov	r8, r3
   3542a:	e68d      	b.n	35148 <__aeabi_dsub+0x10c>
   3542c:	488c      	ldr	r0, [pc, #560]	; (35660 <__aeabi_dsub+0x624>)
   3542e:	4283      	cmp	r3, r0
   35430:	d00b      	beq.n	3544a <__aeabi_dsub+0x40e>
   35432:	4663      	mov	r3, ip
   35434:	e6d9      	b.n	351ea <__aeabi_dsub+0x1ae>
   35436:	2d00      	cmp	r5, #0
   35438:	d000      	beq.n	3543c <__aeabi_dsub+0x400>
   3543a:	e096      	b.n	3556a <__aeabi_dsub+0x52e>
   3543c:	0008      	movs	r0, r1
   3543e:	4310      	orrs	r0, r2
   35440:	d100      	bne.n	35444 <__aeabi_dsub+0x408>
   35442:	e0e2      	b.n	3560a <__aeabi_dsub+0x5ce>
   35444:	000c      	movs	r4, r1
   35446:	0017      	movs	r7, r2
   35448:	4698      	mov	r8, r3
   3544a:	4e85      	ldr	r6, [pc, #532]	; (35660 <__aeabi_dsub+0x624>)
   3544c:	e67c      	b.n	35148 <__aeabi_dsub+0x10c>
   3544e:	2500      	movs	r5, #0
   35450:	e780      	b.n	35354 <__aeabi_dsub+0x318>
   35452:	2100      	movs	r1, #0
   35454:	e78e      	b.n	35374 <__aeabi_dsub+0x338>
   35456:	0023      	movs	r3, r4
   35458:	4650      	mov	r0, sl
   3545a:	4303      	orrs	r3, r0
   3545c:	2e00      	cmp	r6, #0
   3545e:	d000      	beq.n	35462 <__aeabi_dsub+0x426>
   35460:	e0a8      	b.n	355b4 <__aeabi_dsub+0x578>
   35462:	2b00      	cmp	r3, #0
   35464:	d100      	bne.n	35468 <__aeabi_dsub+0x42c>
   35466:	e0de      	b.n	35626 <__aeabi_dsub+0x5ea>
   35468:	000b      	movs	r3, r1
   3546a:	4313      	orrs	r3, r2
   3546c:	d100      	bne.n	35470 <__aeabi_dsub+0x434>
   3546e:	e66b      	b.n	35148 <__aeabi_dsub+0x10c>
   35470:	4452      	add	r2, sl
   35472:	4552      	cmp	r2, sl
   35474:	4180      	sbcs	r0, r0
   35476:	1864      	adds	r4, r4, r1
   35478:	4240      	negs	r0, r0
   3547a:	1824      	adds	r4, r4, r0
   3547c:	0017      	movs	r7, r2
   3547e:	0223      	lsls	r3, r4, #8
   35480:	d400      	bmi.n	35484 <__aeabi_dsub+0x448>
   35482:	e6fd      	b.n	35280 <__aeabi_dsub+0x244>
   35484:	4b77      	ldr	r3, [pc, #476]	; (35664 <__aeabi_dsub+0x628>)
   35486:	4666      	mov	r6, ip
   35488:	401c      	ands	r4, r3
   3548a:	e65d      	b.n	35148 <__aeabi_dsub+0x10c>
   3548c:	0025      	movs	r5, r4
   3548e:	4650      	mov	r0, sl
   35490:	4305      	orrs	r5, r0
   35492:	2e00      	cmp	r6, #0
   35494:	d1cf      	bne.n	35436 <__aeabi_dsub+0x3fa>
   35496:	2d00      	cmp	r5, #0
   35498:	d14f      	bne.n	3553a <__aeabi_dsub+0x4fe>
   3549a:	000c      	movs	r4, r1
   3549c:	4314      	orrs	r4, r2
   3549e:	d100      	bne.n	354a2 <__aeabi_dsub+0x466>
   354a0:	e0a0      	b.n	355e4 <__aeabi_dsub+0x5a8>
   354a2:	000c      	movs	r4, r1
   354a4:	0017      	movs	r7, r2
   354a6:	4698      	mov	r8, r3
   354a8:	e64e      	b.n	35148 <__aeabi_dsub+0x10c>
   354aa:	4666      	mov	r6, ip
   354ac:	2400      	movs	r4, #0
   354ae:	2700      	movs	r7, #0
   354b0:	e685      	b.n	351be <__aeabi_dsub+0x182>
   354b2:	001f      	movs	r7, r3
   354b4:	0008      	movs	r0, r1
   354b6:	3f20      	subs	r7, #32
   354b8:	40f8      	lsrs	r0, r7
   354ba:	0007      	movs	r7, r0
   354bc:	2b20      	cmp	r3, #32
   354be:	d100      	bne.n	354c2 <__aeabi_dsub+0x486>
   354c0:	e08e      	b.n	355e0 <__aeabi_dsub+0x5a4>
   354c2:	2040      	movs	r0, #64	; 0x40
   354c4:	1ac3      	subs	r3, r0, r3
   354c6:	4099      	lsls	r1, r3
   354c8:	430a      	orrs	r2, r1
   354ca:	1e51      	subs	r1, r2, #1
   354cc:	418a      	sbcs	r2, r1
   354ce:	2100      	movs	r1, #0
   354d0:	4317      	orrs	r7, r2
   354d2:	e692      	b.n	351fa <__aeabi_dsub+0x1be>
   354d4:	2e00      	cmp	r6, #0
   354d6:	d114      	bne.n	35502 <__aeabi_dsub+0x4c6>
   354d8:	0026      	movs	r6, r4
   354da:	4650      	mov	r0, sl
   354dc:	4306      	orrs	r6, r0
   354de:	d062      	beq.n	355a6 <__aeabi_dsub+0x56a>
   354e0:	43db      	mvns	r3, r3
   354e2:	2b00      	cmp	r3, #0
   354e4:	d15c      	bne.n	355a0 <__aeabi_dsub+0x564>
   354e6:	1887      	adds	r7, r0, r2
   354e8:	4297      	cmp	r7, r2
   354ea:	4192      	sbcs	r2, r2
   354ec:	1864      	adds	r4, r4, r1
   354ee:	4252      	negs	r2, r2
   354f0:	18a4      	adds	r4, r4, r2
   354f2:	4666      	mov	r6, ip
   354f4:	e687      	b.n	35206 <__aeabi_dsub+0x1ca>
   354f6:	4650      	mov	r0, sl
   354f8:	4320      	orrs	r0, r4
   354fa:	1e44      	subs	r4, r0, #1
   354fc:	41a0      	sbcs	r0, r4
   354fe:	2400      	movs	r4, #0
   35500:	e760      	b.n	353c4 <__aeabi_dsub+0x388>
   35502:	4e57      	ldr	r6, [pc, #348]	; (35660 <__aeabi_dsub+0x624>)
   35504:	45b4      	cmp	ip, r6
   35506:	d04e      	beq.n	355a6 <__aeabi_dsub+0x56a>
   35508:	2680      	movs	r6, #128	; 0x80
   3550a:	0436      	lsls	r6, r6, #16
   3550c:	425b      	negs	r3, r3
   3550e:	4334      	orrs	r4, r6
   35510:	2b38      	cmp	r3, #56	; 0x38
   35512:	dd00      	ble.n	35516 <__aeabi_dsub+0x4da>
   35514:	e07f      	b.n	35616 <__aeabi_dsub+0x5da>
   35516:	2b1f      	cmp	r3, #31
   35518:	dd00      	ble.n	3551c <__aeabi_dsub+0x4e0>
   3551a:	e08b      	b.n	35634 <__aeabi_dsub+0x5f8>
   3551c:	2620      	movs	r6, #32
   3551e:	0027      	movs	r7, r4
   35520:	4650      	mov	r0, sl
   35522:	1af6      	subs	r6, r6, r3
   35524:	40b7      	lsls	r7, r6
   35526:	40d8      	lsrs	r0, r3
   35528:	4307      	orrs	r7, r0
   3552a:	4650      	mov	r0, sl
   3552c:	40b0      	lsls	r0, r6
   3552e:	1e46      	subs	r6, r0, #1
   35530:	41b0      	sbcs	r0, r6
   35532:	4307      	orrs	r7, r0
   35534:	40dc      	lsrs	r4, r3
   35536:	18bf      	adds	r7, r7, r2
   35538:	e7d6      	b.n	354e8 <__aeabi_dsub+0x4ac>
   3553a:	000d      	movs	r5, r1
   3553c:	4315      	orrs	r5, r2
   3553e:	d100      	bne.n	35542 <__aeabi_dsub+0x506>
   35540:	e602      	b.n	35148 <__aeabi_dsub+0x10c>
   35542:	4650      	mov	r0, sl
   35544:	1a80      	subs	r0, r0, r2
   35546:	4582      	cmp	sl, r0
   35548:	41bf      	sbcs	r7, r7
   3554a:	1a65      	subs	r5, r4, r1
   3554c:	427f      	negs	r7, r7
   3554e:	1bed      	subs	r5, r5, r7
   35550:	4684      	mov	ip, r0
   35552:	0228      	lsls	r0, r5, #8
   35554:	d400      	bmi.n	35558 <__aeabi_dsub+0x51c>
   35556:	e68d      	b.n	35274 <__aeabi_dsub+0x238>
   35558:	4650      	mov	r0, sl
   3555a:	1a17      	subs	r7, r2, r0
   3555c:	42ba      	cmp	r2, r7
   3555e:	4192      	sbcs	r2, r2
   35560:	1b0c      	subs	r4, r1, r4
   35562:	4252      	negs	r2, r2
   35564:	1aa4      	subs	r4, r4, r2
   35566:	4698      	mov	r8, r3
   35568:	e5ee      	b.n	35148 <__aeabi_dsub+0x10c>
   3556a:	000d      	movs	r5, r1
   3556c:	4315      	orrs	r5, r2
   3556e:	d100      	bne.n	35572 <__aeabi_dsub+0x536>
   35570:	e76b      	b.n	3544a <__aeabi_dsub+0x40e>
   35572:	4650      	mov	r0, sl
   35574:	0767      	lsls	r7, r4, #29
   35576:	08c0      	lsrs	r0, r0, #3
   35578:	4307      	orrs	r7, r0
   3557a:	2080      	movs	r0, #128	; 0x80
   3557c:	08e4      	lsrs	r4, r4, #3
   3557e:	0300      	lsls	r0, r0, #12
   35580:	4204      	tst	r4, r0
   35582:	d007      	beq.n	35594 <__aeabi_dsub+0x558>
   35584:	08cd      	lsrs	r5, r1, #3
   35586:	4205      	tst	r5, r0
   35588:	d104      	bne.n	35594 <__aeabi_dsub+0x558>
   3558a:	002c      	movs	r4, r5
   3558c:	4698      	mov	r8, r3
   3558e:	08d7      	lsrs	r7, r2, #3
   35590:	0749      	lsls	r1, r1, #29
   35592:	430f      	orrs	r7, r1
   35594:	0f7b      	lsrs	r3, r7, #29
   35596:	00e4      	lsls	r4, r4, #3
   35598:	431c      	orrs	r4, r3
   3559a:	00ff      	lsls	r7, r7, #3
   3559c:	4e30      	ldr	r6, [pc, #192]	; (35660 <__aeabi_dsub+0x624>)
   3559e:	e5d3      	b.n	35148 <__aeabi_dsub+0x10c>
   355a0:	4e2f      	ldr	r6, [pc, #188]	; (35660 <__aeabi_dsub+0x624>)
   355a2:	45b4      	cmp	ip, r6
   355a4:	d1b4      	bne.n	35510 <__aeabi_dsub+0x4d4>
   355a6:	000c      	movs	r4, r1
   355a8:	0017      	movs	r7, r2
   355aa:	4666      	mov	r6, ip
   355ac:	e5cc      	b.n	35148 <__aeabi_dsub+0x10c>
   355ae:	2700      	movs	r7, #0
   355b0:	2400      	movs	r4, #0
   355b2:	e5e8      	b.n	35186 <__aeabi_dsub+0x14a>
   355b4:	2b00      	cmp	r3, #0
   355b6:	d039      	beq.n	3562c <__aeabi_dsub+0x5f0>
   355b8:	000b      	movs	r3, r1
   355ba:	4313      	orrs	r3, r2
   355bc:	d100      	bne.n	355c0 <__aeabi_dsub+0x584>
   355be:	e744      	b.n	3544a <__aeabi_dsub+0x40e>
   355c0:	08c0      	lsrs	r0, r0, #3
   355c2:	0767      	lsls	r7, r4, #29
   355c4:	4307      	orrs	r7, r0
   355c6:	2080      	movs	r0, #128	; 0x80
   355c8:	08e4      	lsrs	r4, r4, #3
   355ca:	0300      	lsls	r0, r0, #12
   355cc:	4204      	tst	r4, r0
   355ce:	d0e1      	beq.n	35594 <__aeabi_dsub+0x558>
   355d0:	08cb      	lsrs	r3, r1, #3
   355d2:	4203      	tst	r3, r0
   355d4:	d1de      	bne.n	35594 <__aeabi_dsub+0x558>
   355d6:	08d7      	lsrs	r7, r2, #3
   355d8:	0749      	lsls	r1, r1, #29
   355da:	430f      	orrs	r7, r1
   355dc:	001c      	movs	r4, r3
   355de:	e7d9      	b.n	35594 <__aeabi_dsub+0x558>
   355e0:	2100      	movs	r1, #0
   355e2:	e771      	b.n	354c8 <__aeabi_dsub+0x48c>
   355e4:	2500      	movs	r5, #0
   355e6:	2700      	movs	r7, #0
   355e8:	e5e9      	b.n	351be <__aeabi_dsub+0x182>
   355ea:	002e      	movs	r6, r5
   355ec:	0027      	movs	r7, r4
   355ee:	3e20      	subs	r6, #32
   355f0:	40f7      	lsrs	r7, r6
   355f2:	2d20      	cmp	r5, #32
   355f4:	d02f      	beq.n	35656 <__aeabi_dsub+0x61a>
   355f6:	2640      	movs	r6, #64	; 0x40
   355f8:	1b75      	subs	r5, r6, r5
   355fa:	40ac      	lsls	r4, r5
   355fc:	4650      	mov	r0, sl
   355fe:	4320      	orrs	r0, r4
   35600:	1e44      	subs	r4, r0, #1
   35602:	41a0      	sbcs	r0, r4
   35604:	2400      	movs	r4, #0
   35606:	4338      	orrs	r0, r7
   35608:	e6dc      	b.n	353c4 <__aeabi_dsub+0x388>
   3560a:	2480      	movs	r4, #128	; 0x80
   3560c:	2500      	movs	r5, #0
   3560e:	0324      	lsls	r4, r4, #12
   35610:	4e13      	ldr	r6, [pc, #76]	; (35660 <__aeabi_dsub+0x624>)
   35612:	2700      	movs	r7, #0
   35614:	e5d3      	b.n	351be <__aeabi_dsub+0x182>
   35616:	4650      	mov	r0, sl
   35618:	4320      	orrs	r0, r4
   3561a:	0007      	movs	r7, r0
   3561c:	1e78      	subs	r0, r7, #1
   3561e:	4187      	sbcs	r7, r0
   35620:	2400      	movs	r4, #0
   35622:	18bf      	adds	r7, r7, r2
   35624:	e760      	b.n	354e8 <__aeabi_dsub+0x4ac>
   35626:	000c      	movs	r4, r1
   35628:	0017      	movs	r7, r2
   3562a:	e58d      	b.n	35148 <__aeabi_dsub+0x10c>
   3562c:	000c      	movs	r4, r1
   3562e:	0017      	movs	r7, r2
   35630:	4e0b      	ldr	r6, [pc, #44]	; (35660 <__aeabi_dsub+0x624>)
   35632:	e589      	b.n	35148 <__aeabi_dsub+0x10c>
   35634:	001e      	movs	r6, r3
   35636:	0027      	movs	r7, r4
   35638:	3e20      	subs	r6, #32
   3563a:	40f7      	lsrs	r7, r6
   3563c:	2b20      	cmp	r3, #32
   3563e:	d00c      	beq.n	3565a <__aeabi_dsub+0x61e>
   35640:	2640      	movs	r6, #64	; 0x40
   35642:	1af3      	subs	r3, r6, r3
   35644:	409c      	lsls	r4, r3
   35646:	4650      	mov	r0, sl
   35648:	4320      	orrs	r0, r4
   3564a:	1e44      	subs	r4, r0, #1
   3564c:	41a0      	sbcs	r0, r4
   3564e:	4307      	orrs	r7, r0
   35650:	2400      	movs	r4, #0
   35652:	18bf      	adds	r7, r7, r2
   35654:	e748      	b.n	354e8 <__aeabi_dsub+0x4ac>
   35656:	2400      	movs	r4, #0
   35658:	e7d0      	b.n	355fc <__aeabi_dsub+0x5c0>
   3565a:	2400      	movs	r4, #0
   3565c:	e7f3      	b.n	35646 <__aeabi_dsub+0x60a>
   3565e:	46c0      	nop			; (mov r8, r8)
   35660:	000007ff 	.word	0x000007ff
   35664:	ff7fffff 	.word	0xff7fffff

00035668 <__aeabi_d2iz>:
   35668:	b530      	push	{r4, r5, lr}
   3566a:	4d13      	ldr	r5, [pc, #76]	; (356b8 <__aeabi_d2iz+0x50>)
   3566c:	030a      	lsls	r2, r1, #12
   3566e:	004b      	lsls	r3, r1, #1
   35670:	0b12      	lsrs	r2, r2, #12
   35672:	0d5b      	lsrs	r3, r3, #21
   35674:	0fc9      	lsrs	r1, r1, #31
   35676:	2400      	movs	r4, #0
   35678:	42ab      	cmp	r3, r5
   3567a:	dd10      	ble.n	3569e <__aeabi_d2iz+0x36>
   3567c:	4c0f      	ldr	r4, [pc, #60]	; (356bc <__aeabi_d2iz+0x54>)
   3567e:	42a3      	cmp	r3, r4
   35680:	dc0f      	bgt.n	356a2 <__aeabi_d2iz+0x3a>
   35682:	2480      	movs	r4, #128	; 0x80
   35684:	4d0e      	ldr	r5, [pc, #56]	; (356c0 <__aeabi_d2iz+0x58>)
   35686:	0364      	lsls	r4, r4, #13
   35688:	4322      	orrs	r2, r4
   3568a:	1aed      	subs	r5, r5, r3
   3568c:	2d1f      	cmp	r5, #31
   3568e:	dd0b      	ble.n	356a8 <__aeabi_d2iz+0x40>
   35690:	480c      	ldr	r0, [pc, #48]	; (356c4 <__aeabi_d2iz+0x5c>)
   35692:	1ac3      	subs	r3, r0, r3
   35694:	40da      	lsrs	r2, r3
   35696:	4254      	negs	r4, r2
   35698:	2900      	cmp	r1, #0
   3569a:	d100      	bne.n	3569e <__aeabi_d2iz+0x36>
   3569c:	0014      	movs	r4, r2
   3569e:	0020      	movs	r0, r4
   356a0:	bd30      	pop	{r4, r5, pc}
   356a2:	4b09      	ldr	r3, [pc, #36]	; (356c8 <__aeabi_d2iz+0x60>)
   356a4:	18cc      	adds	r4, r1, r3
   356a6:	e7fa      	b.n	3569e <__aeabi_d2iz+0x36>
   356a8:	4c08      	ldr	r4, [pc, #32]	; (356cc <__aeabi_d2iz+0x64>)
   356aa:	40e8      	lsrs	r0, r5
   356ac:	46a4      	mov	ip, r4
   356ae:	4463      	add	r3, ip
   356b0:	409a      	lsls	r2, r3
   356b2:	4302      	orrs	r2, r0
   356b4:	e7ef      	b.n	35696 <__aeabi_d2iz+0x2e>
   356b6:	46c0      	nop			; (mov r8, r8)
   356b8:	000003fe 	.word	0x000003fe
   356bc:	0000041d 	.word	0x0000041d
   356c0:	00000433 	.word	0x00000433
   356c4:	00000413 	.word	0x00000413
   356c8:	7fffffff 	.word	0x7fffffff
   356cc:	fffffbed 	.word	0xfffffbed

000356d0 <__aeabi_ui2d>:
   356d0:	b510      	push	{r4, lr}
   356d2:	1e04      	subs	r4, r0, #0
   356d4:	d028      	beq.n	35728 <__aeabi_ui2d+0x58>
   356d6:	f000 f833 	bl	35740 <__clzsi2>
   356da:	4b15      	ldr	r3, [pc, #84]	; (35730 <__aeabi_ui2d+0x60>)
   356dc:	4a15      	ldr	r2, [pc, #84]	; (35734 <__aeabi_ui2d+0x64>)
   356de:	1a1b      	subs	r3, r3, r0
   356e0:	1ad2      	subs	r2, r2, r3
   356e2:	2a1f      	cmp	r2, #31
   356e4:	dd15      	ble.n	35712 <__aeabi_ui2d+0x42>
   356e6:	4a14      	ldr	r2, [pc, #80]	; (35738 <__aeabi_ui2d+0x68>)
   356e8:	1ad2      	subs	r2, r2, r3
   356ea:	4094      	lsls	r4, r2
   356ec:	2200      	movs	r2, #0
   356ee:	0324      	lsls	r4, r4, #12
   356f0:	055b      	lsls	r3, r3, #21
   356f2:	0b24      	lsrs	r4, r4, #12
   356f4:	0d5b      	lsrs	r3, r3, #21
   356f6:	2100      	movs	r1, #0
   356f8:	0010      	movs	r0, r2
   356fa:	0324      	lsls	r4, r4, #12
   356fc:	0d0a      	lsrs	r2, r1, #20
   356fe:	0b24      	lsrs	r4, r4, #12
   35700:	0512      	lsls	r2, r2, #20
   35702:	4322      	orrs	r2, r4
   35704:	4c0d      	ldr	r4, [pc, #52]	; (3573c <__aeabi_ui2d+0x6c>)
   35706:	051b      	lsls	r3, r3, #20
   35708:	4022      	ands	r2, r4
   3570a:	4313      	orrs	r3, r2
   3570c:	005b      	lsls	r3, r3, #1
   3570e:	0859      	lsrs	r1, r3, #1
   35710:	bd10      	pop	{r4, pc}
   35712:	0021      	movs	r1, r4
   35714:	4091      	lsls	r1, r2
   35716:	000a      	movs	r2, r1
   35718:	210b      	movs	r1, #11
   3571a:	1a08      	subs	r0, r1, r0
   3571c:	40c4      	lsrs	r4, r0
   3571e:	055b      	lsls	r3, r3, #21
   35720:	0324      	lsls	r4, r4, #12
   35722:	0b24      	lsrs	r4, r4, #12
   35724:	0d5b      	lsrs	r3, r3, #21
   35726:	e7e6      	b.n	356f6 <__aeabi_ui2d+0x26>
   35728:	2300      	movs	r3, #0
   3572a:	2400      	movs	r4, #0
   3572c:	2200      	movs	r2, #0
   3572e:	e7e2      	b.n	356f6 <__aeabi_ui2d+0x26>
   35730:	0000041e 	.word	0x0000041e
   35734:	00000433 	.word	0x00000433
   35738:	00000413 	.word	0x00000413
   3573c:	800fffff 	.word	0x800fffff

00035740 <__clzsi2>:
   35740:	211c      	movs	r1, #28
   35742:	2301      	movs	r3, #1
   35744:	041b      	lsls	r3, r3, #16
   35746:	4298      	cmp	r0, r3
   35748:	d301      	bcc.n	3574e <__clzsi2+0xe>
   3574a:	0c00      	lsrs	r0, r0, #16
   3574c:	3910      	subs	r1, #16
   3574e:	0a1b      	lsrs	r3, r3, #8
   35750:	4298      	cmp	r0, r3
   35752:	d301      	bcc.n	35758 <__clzsi2+0x18>
   35754:	0a00      	lsrs	r0, r0, #8
   35756:	3908      	subs	r1, #8
   35758:	091b      	lsrs	r3, r3, #4
   3575a:	4298      	cmp	r0, r3
   3575c:	d301      	bcc.n	35762 <__clzsi2+0x22>
   3575e:	0900      	lsrs	r0, r0, #4
   35760:	3904      	subs	r1, #4
   35762:	a202      	add	r2, pc, #8	; (adr r2, 3576c <__clzsi2+0x2c>)
   35764:	5c10      	ldrb	r0, [r2, r0]
   35766:	1840      	adds	r0, r0, r1
   35768:	4770      	bx	lr
   3576a:	46c0      	nop			; (mov r8, r8)
   3576c:	02020304 	.word	0x02020304
   35770:	01010101 	.word	0x01010101
	...

0003577c <atoi>:
   3577c:	b510      	push	{r4, lr}
   3577e:	220a      	movs	r2, #10
   35780:	2100      	movs	r1, #0
   35782:	f000 fb0d 	bl	35da0 <strtol>
   35786:	bd10      	pop	{r4, pc}

00035788 <__libc_init_array>:
   35788:	b570      	push	{r4, r5, r6, lr}
   3578a:	2600      	movs	r6, #0
   3578c:	4d0c      	ldr	r5, [pc, #48]	; (357c0 <__libc_init_array+0x38>)
   3578e:	4c0d      	ldr	r4, [pc, #52]	; (357c4 <__libc_init_array+0x3c>)
   35790:	1b64      	subs	r4, r4, r5
   35792:	10a4      	asrs	r4, r4, #2
   35794:	42a6      	cmp	r6, r4
   35796:	d109      	bne.n	357ac <__libc_init_array+0x24>
   35798:	2600      	movs	r6, #0
   3579a:	f005 fe4d 	bl	3b438 <_init>
   3579e:	4d0a      	ldr	r5, [pc, #40]	; (357c8 <__libc_init_array+0x40>)
   357a0:	4c0a      	ldr	r4, [pc, #40]	; (357cc <__libc_init_array+0x44>)
   357a2:	1b64      	subs	r4, r4, r5
   357a4:	10a4      	asrs	r4, r4, #2
   357a6:	42a6      	cmp	r6, r4
   357a8:	d105      	bne.n	357b6 <__libc_init_array+0x2e>
   357aa:	bd70      	pop	{r4, r5, r6, pc}
   357ac:	00b3      	lsls	r3, r6, #2
   357ae:	58eb      	ldr	r3, [r5, r3]
   357b0:	4798      	blx	r3
   357b2:	3601      	adds	r6, #1
   357b4:	e7ee      	b.n	35794 <__libc_init_array+0xc>
   357b6:	00b3      	lsls	r3, r6, #2
   357b8:	58eb      	ldr	r3, [r5, r3]
   357ba:	4798      	blx	r3
   357bc:	3601      	adds	r6, #1
   357be:	e7f2      	b.n	357a6 <__libc_init_array+0x1e>
   357c0:	0003b444 	.word	0x0003b444
   357c4:	0003b444 	.word	0x0003b444
   357c8:	0003b444 	.word	0x0003b444
   357cc:	0003b448 	.word	0x0003b448

000357d0 <malloc>:
   357d0:	b510      	push	{r4, lr}
   357d2:	4b03      	ldr	r3, [pc, #12]	; (357e0 <malloc+0x10>)
   357d4:	0001      	movs	r1, r0
   357d6:	6818      	ldr	r0, [r3, #0]
   357d8:	f000 f87c 	bl	358d4 <_malloc_r>
   357dc:	bd10      	pop	{r4, pc}
   357de:	46c0      	nop			; (mov r8, r8)
   357e0:	20000130 	.word	0x20000130

000357e4 <free>:
   357e4:	b510      	push	{r4, lr}
   357e6:	4b03      	ldr	r3, [pc, #12]	; (357f4 <free+0x10>)
   357e8:	0001      	movs	r1, r0
   357ea:	6818      	ldr	r0, [r3, #0]
   357ec:	f000 f828 	bl	35840 <_free_r>
   357f0:	bd10      	pop	{r4, pc}
   357f2:	46c0      	nop			; (mov r8, r8)
   357f4:	20000130 	.word	0x20000130

000357f8 <memcpy>:
   357f8:	2300      	movs	r3, #0
   357fa:	b510      	push	{r4, lr}
   357fc:	429a      	cmp	r2, r3
   357fe:	d100      	bne.n	35802 <memcpy+0xa>
   35800:	bd10      	pop	{r4, pc}
   35802:	5ccc      	ldrb	r4, [r1, r3]
   35804:	54c4      	strb	r4, [r0, r3]
   35806:	3301      	adds	r3, #1
   35808:	e7f8      	b.n	357fc <memcpy+0x4>

0003580a <memmove>:
   3580a:	b510      	push	{r4, lr}
   3580c:	4288      	cmp	r0, r1
   3580e:	d902      	bls.n	35816 <memmove+0xc>
   35810:	188b      	adds	r3, r1, r2
   35812:	4298      	cmp	r0, r3
   35814:	d308      	bcc.n	35828 <memmove+0x1e>
   35816:	2300      	movs	r3, #0
   35818:	429a      	cmp	r2, r3
   3581a:	d007      	beq.n	3582c <memmove+0x22>
   3581c:	5ccc      	ldrb	r4, [r1, r3]
   3581e:	54c4      	strb	r4, [r0, r3]
   35820:	3301      	adds	r3, #1
   35822:	e7f9      	b.n	35818 <memmove+0xe>
   35824:	5c8b      	ldrb	r3, [r1, r2]
   35826:	5483      	strb	r3, [r0, r2]
   35828:	3a01      	subs	r2, #1
   3582a:	d2fb      	bcs.n	35824 <memmove+0x1a>
   3582c:	bd10      	pop	{r4, pc}

0003582e <memset>:
   3582e:	0003      	movs	r3, r0
   35830:	1882      	adds	r2, r0, r2
   35832:	4293      	cmp	r3, r2
   35834:	d100      	bne.n	35838 <memset+0xa>
   35836:	4770      	bx	lr
   35838:	7019      	strb	r1, [r3, #0]
   3583a:	3301      	adds	r3, #1
   3583c:	e7f9      	b.n	35832 <memset+0x4>
	...

00035840 <_free_r>:
   35840:	b570      	push	{r4, r5, r6, lr}
   35842:	0005      	movs	r5, r0
   35844:	2900      	cmp	r1, #0
   35846:	d010      	beq.n	3586a <_free_r+0x2a>
   35848:	1f0c      	subs	r4, r1, #4
   3584a:	6823      	ldr	r3, [r4, #0]
   3584c:	2b00      	cmp	r3, #0
   3584e:	da00      	bge.n	35852 <_free_r+0x12>
   35850:	18e4      	adds	r4, r4, r3
   35852:	0028      	movs	r0, r5
   35854:	f000 fdd8 	bl	36408 <__malloc_lock>
   35858:	4a1d      	ldr	r2, [pc, #116]	; (358d0 <_free_r+0x90>)
   3585a:	6813      	ldr	r3, [r2, #0]
   3585c:	2b00      	cmp	r3, #0
   3585e:	d105      	bne.n	3586c <_free_r+0x2c>
   35860:	6063      	str	r3, [r4, #4]
   35862:	6014      	str	r4, [r2, #0]
   35864:	0028      	movs	r0, r5
   35866:	f000 fdd0 	bl	3640a <__malloc_unlock>
   3586a:	bd70      	pop	{r4, r5, r6, pc}
   3586c:	42a3      	cmp	r3, r4
   3586e:	d909      	bls.n	35884 <_free_r+0x44>
   35870:	6821      	ldr	r1, [r4, #0]
   35872:	1860      	adds	r0, r4, r1
   35874:	4283      	cmp	r3, r0
   35876:	d1f3      	bne.n	35860 <_free_r+0x20>
   35878:	6818      	ldr	r0, [r3, #0]
   3587a:	685b      	ldr	r3, [r3, #4]
   3587c:	1841      	adds	r1, r0, r1
   3587e:	6021      	str	r1, [r4, #0]
   35880:	e7ee      	b.n	35860 <_free_r+0x20>
   35882:	0013      	movs	r3, r2
   35884:	685a      	ldr	r2, [r3, #4]
   35886:	2a00      	cmp	r2, #0
   35888:	d001      	beq.n	3588e <_free_r+0x4e>
   3588a:	42a2      	cmp	r2, r4
   3588c:	d9f9      	bls.n	35882 <_free_r+0x42>
   3588e:	6819      	ldr	r1, [r3, #0]
   35890:	1858      	adds	r0, r3, r1
   35892:	42a0      	cmp	r0, r4
   35894:	d10b      	bne.n	358ae <_free_r+0x6e>
   35896:	6820      	ldr	r0, [r4, #0]
   35898:	1809      	adds	r1, r1, r0
   3589a:	1858      	adds	r0, r3, r1
   3589c:	6019      	str	r1, [r3, #0]
   3589e:	4282      	cmp	r2, r0
   358a0:	d1e0      	bne.n	35864 <_free_r+0x24>
   358a2:	6810      	ldr	r0, [r2, #0]
   358a4:	6852      	ldr	r2, [r2, #4]
   358a6:	1841      	adds	r1, r0, r1
   358a8:	6019      	str	r1, [r3, #0]
   358aa:	605a      	str	r2, [r3, #4]
   358ac:	e7da      	b.n	35864 <_free_r+0x24>
   358ae:	42a0      	cmp	r0, r4
   358b0:	d902      	bls.n	358b8 <_free_r+0x78>
   358b2:	230c      	movs	r3, #12
   358b4:	602b      	str	r3, [r5, #0]
   358b6:	e7d5      	b.n	35864 <_free_r+0x24>
   358b8:	6821      	ldr	r1, [r4, #0]
   358ba:	1860      	adds	r0, r4, r1
   358bc:	4282      	cmp	r2, r0
   358be:	d103      	bne.n	358c8 <_free_r+0x88>
   358c0:	6810      	ldr	r0, [r2, #0]
   358c2:	6852      	ldr	r2, [r2, #4]
   358c4:	1841      	adds	r1, r0, r1
   358c6:	6021      	str	r1, [r4, #0]
   358c8:	6062      	str	r2, [r4, #4]
   358ca:	605c      	str	r4, [r3, #4]
   358cc:	e7ca      	b.n	35864 <_free_r+0x24>
   358ce:	46c0      	nop			; (mov r8, r8)
   358d0:	20004728 	.word	0x20004728

000358d4 <_malloc_r>:
   358d4:	2303      	movs	r3, #3
   358d6:	b570      	push	{r4, r5, r6, lr}
   358d8:	1ccd      	adds	r5, r1, #3
   358da:	439d      	bics	r5, r3
   358dc:	3508      	adds	r5, #8
   358de:	0006      	movs	r6, r0
   358e0:	2d0c      	cmp	r5, #12
   358e2:	d21e      	bcs.n	35922 <_malloc_r+0x4e>
   358e4:	250c      	movs	r5, #12
   358e6:	42a9      	cmp	r1, r5
   358e8:	d81d      	bhi.n	35926 <_malloc_r+0x52>
   358ea:	0030      	movs	r0, r6
   358ec:	f000 fd8c 	bl	36408 <__malloc_lock>
   358f0:	4a25      	ldr	r2, [pc, #148]	; (35988 <_malloc_r+0xb4>)
   358f2:	6814      	ldr	r4, [r2, #0]
   358f4:	0021      	movs	r1, r4
   358f6:	2900      	cmp	r1, #0
   358f8:	d119      	bne.n	3592e <_malloc_r+0x5a>
   358fa:	4c24      	ldr	r4, [pc, #144]	; (3598c <_malloc_r+0xb8>)
   358fc:	6823      	ldr	r3, [r4, #0]
   358fe:	2b00      	cmp	r3, #0
   35900:	d103      	bne.n	3590a <_malloc_r+0x36>
   35902:	0030      	movs	r0, r6
   35904:	f000 f8ae 	bl	35a64 <_sbrk_r>
   35908:	6020      	str	r0, [r4, #0]
   3590a:	0029      	movs	r1, r5
   3590c:	0030      	movs	r0, r6
   3590e:	f000 f8a9 	bl	35a64 <_sbrk_r>
   35912:	1c43      	adds	r3, r0, #1
   35914:	d12c      	bne.n	35970 <_malloc_r+0x9c>
   35916:	230c      	movs	r3, #12
   35918:	0030      	movs	r0, r6
   3591a:	6033      	str	r3, [r6, #0]
   3591c:	f000 fd75 	bl	3640a <__malloc_unlock>
   35920:	e003      	b.n	3592a <_malloc_r+0x56>
   35922:	2d00      	cmp	r5, #0
   35924:	dadf      	bge.n	358e6 <_malloc_r+0x12>
   35926:	230c      	movs	r3, #12
   35928:	6033      	str	r3, [r6, #0]
   3592a:	2000      	movs	r0, #0
   3592c:	bd70      	pop	{r4, r5, r6, pc}
   3592e:	680b      	ldr	r3, [r1, #0]
   35930:	1b5b      	subs	r3, r3, r5
   35932:	d41a      	bmi.n	3596a <_malloc_r+0x96>
   35934:	2b0b      	cmp	r3, #11
   35936:	d903      	bls.n	35940 <_malloc_r+0x6c>
   35938:	600b      	str	r3, [r1, #0]
   3593a:	18cc      	adds	r4, r1, r3
   3593c:	6025      	str	r5, [r4, #0]
   3593e:	e003      	b.n	35948 <_malloc_r+0x74>
   35940:	428c      	cmp	r4, r1
   35942:	d10e      	bne.n	35962 <_malloc_r+0x8e>
   35944:	6863      	ldr	r3, [r4, #4]
   35946:	6013      	str	r3, [r2, #0]
   35948:	0030      	movs	r0, r6
   3594a:	f000 fd5e 	bl	3640a <__malloc_unlock>
   3594e:	0020      	movs	r0, r4
   35950:	2207      	movs	r2, #7
   35952:	300b      	adds	r0, #11
   35954:	1d23      	adds	r3, r4, #4
   35956:	4390      	bics	r0, r2
   35958:	1ac3      	subs	r3, r0, r3
   3595a:	d0e7      	beq.n	3592c <_malloc_r+0x58>
   3595c:	425a      	negs	r2, r3
   3595e:	50e2      	str	r2, [r4, r3]
   35960:	e7e4      	b.n	3592c <_malloc_r+0x58>
   35962:	684b      	ldr	r3, [r1, #4]
   35964:	6063      	str	r3, [r4, #4]
   35966:	000c      	movs	r4, r1
   35968:	e7ee      	b.n	35948 <_malloc_r+0x74>
   3596a:	000c      	movs	r4, r1
   3596c:	6849      	ldr	r1, [r1, #4]
   3596e:	e7c2      	b.n	358f6 <_malloc_r+0x22>
   35970:	2303      	movs	r3, #3
   35972:	1cc4      	adds	r4, r0, #3
   35974:	439c      	bics	r4, r3
   35976:	42a0      	cmp	r0, r4
   35978:	d0e0      	beq.n	3593c <_malloc_r+0x68>
   3597a:	1a21      	subs	r1, r4, r0
   3597c:	0030      	movs	r0, r6
   3597e:	f000 f871 	bl	35a64 <_sbrk_r>
   35982:	1c43      	adds	r3, r0, #1
   35984:	d1da      	bne.n	3593c <_malloc_r+0x68>
   35986:	e7c6      	b.n	35916 <_malloc_r+0x42>
   35988:	20004728 	.word	0x20004728
   3598c:	2000472c 	.word	0x2000472c

00035990 <_puts_r>:
   35990:	b570      	push	{r4, r5, r6, lr}
   35992:	0005      	movs	r5, r0
   35994:	000e      	movs	r6, r1
   35996:	2800      	cmp	r0, #0
   35998:	d004      	beq.n	359a4 <_puts_r+0x14>
   3599a:	6983      	ldr	r3, [r0, #24]
   3599c:	2b00      	cmp	r3, #0
   3599e:	d101      	bne.n	359a4 <_puts_r+0x14>
   359a0:	f000 fc0e 	bl	361c0 <__sinit>
   359a4:	69ab      	ldr	r3, [r5, #24]
   359a6:	68ac      	ldr	r4, [r5, #8]
   359a8:	2b00      	cmp	r3, #0
   359aa:	d102      	bne.n	359b2 <_puts_r+0x22>
   359ac:	0028      	movs	r0, r5
   359ae:	f000 fc07 	bl	361c0 <__sinit>
   359b2:	4b24      	ldr	r3, [pc, #144]	; (35a44 <_puts_r+0xb4>)
   359b4:	429c      	cmp	r4, r3
   359b6:	d10f      	bne.n	359d8 <_puts_r+0x48>
   359b8:	686c      	ldr	r4, [r5, #4]
   359ba:	89a3      	ldrh	r3, [r4, #12]
   359bc:	071b      	lsls	r3, r3, #28
   359be:	d502      	bpl.n	359c6 <_puts_r+0x36>
   359c0:	6923      	ldr	r3, [r4, #16]
   359c2:	2b00      	cmp	r3, #0
   359c4:	d120      	bne.n	35a08 <_puts_r+0x78>
   359c6:	0021      	movs	r1, r4
   359c8:	0028      	movs	r0, r5
   359ca:	f000 fa8b 	bl	35ee4 <__swsetup_r>
   359ce:	2800      	cmp	r0, #0
   359d0:	d01a      	beq.n	35a08 <_puts_r+0x78>
   359d2:	2001      	movs	r0, #1
   359d4:	4240      	negs	r0, r0
   359d6:	bd70      	pop	{r4, r5, r6, pc}
   359d8:	4b1b      	ldr	r3, [pc, #108]	; (35a48 <_puts_r+0xb8>)
   359da:	429c      	cmp	r4, r3
   359dc:	d101      	bne.n	359e2 <_puts_r+0x52>
   359de:	68ac      	ldr	r4, [r5, #8]
   359e0:	e7eb      	b.n	359ba <_puts_r+0x2a>
   359e2:	4b1a      	ldr	r3, [pc, #104]	; (35a4c <_puts_r+0xbc>)
   359e4:	429c      	cmp	r4, r3
   359e6:	d1e8      	bne.n	359ba <_puts_r+0x2a>
   359e8:	68ec      	ldr	r4, [r5, #12]
   359ea:	e7e6      	b.n	359ba <_puts_r+0x2a>
   359ec:	3b01      	subs	r3, #1
   359ee:	3601      	adds	r6, #1
   359f0:	60a3      	str	r3, [r4, #8]
   359f2:	2b00      	cmp	r3, #0
   359f4:	da04      	bge.n	35a00 <_puts_r+0x70>
   359f6:	69a2      	ldr	r2, [r4, #24]
   359f8:	4293      	cmp	r3, r2
   359fa:	db16      	blt.n	35a2a <_puts_r+0x9a>
   359fc:	290a      	cmp	r1, #10
   359fe:	d014      	beq.n	35a2a <_puts_r+0x9a>
   35a00:	6823      	ldr	r3, [r4, #0]
   35a02:	1c5a      	adds	r2, r3, #1
   35a04:	6022      	str	r2, [r4, #0]
   35a06:	7019      	strb	r1, [r3, #0]
   35a08:	7831      	ldrb	r1, [r6, #0]
   35a0a:	68a3      	ldr	r3, [r4, #8]
   35a0c:	2900      	cmp	r1, #0
   35a0e:	d1ed      	bne.n	359ec <_puts_r+0x5c>
   35a10:	3b01      	subs	r3, #1
   35a12:	60a3      	str	r3, [r4, #8]
   35a14:	2b00      	cmp	r3, #0
   35a16:	da0f      	bge.n	35a38 <_puts_r+0xa8>
   35a18:	0022      	movs	r2, r4
   35a1a:	310a      	adds	r1, #10
   35a1c:	0028      	movs	r0, r5
   35a1e:	f000 fa0b 	bl	35e38 <__swbuf_r>
   35a22:	1c43      	adds	r3, r0, #1
   35a24:	d0d5      	beq.n	359d2 <_puts_r+0x42>
   35a26:	200a      	movs	r0, #10
   35a28:	e7d5      	b.n	359d6 <_puts_r+0x46>
   35a2a:	0022      	movs	r2, r4
   35a2c:	0028      	movs	r0, r5
   35a2e:	f000 fa03 	bl	35e38 <__swbuf_r>
   35a32:	1c43      	adds	r3, r0, #1
   35a34:	d1e8      	bne.n	35a08 <_puts_r+0x78>
   35a36:	e7cc      	b.n	359d2 <_puts_r+0x42>
   35a38:	200a      	movs	r0, #10
   35a3a:	6823      	ldr	r3, [r4, #0]
   35a3c:	1c5a      	adds	r2, r3, #1
   35a3e:	6022      	str	r2, [r4, #0]
   35a40:	7018      	strb	r0, [r3, #0]
   35a42:	e7c8      	b.n	359d6 <_puts_r+0x46>
   35a44:	0003b2b8 	.word	0x0003b2b8
   35a48:	0003b2d8 	.word	0x0003b2d8
   35a4c:	0003b298 	.word	0x0003b298

00035a50 <puts>:
   35a50:	b510      	push	{r4, lr}
   35a52:	4b03      	ldr	r3, [pc, #12]	; (35a60 <puts+0x10>)
   35a54:	0001      	movs	r1, r0
   35a56:	6818      	ldr	r0, [r3, #0]
   35a58:	f7ff ff9a 	bl	35990 <_puts_r>
   35a5c:	bd10      	pop	{r4, pc}
   35a5e:	46c0      	nop			; (mov r8, r8)
   35a60:	20000130 	.word	0x20000130

00035a64 <_sbrk_r>:
   35a64:	2300      	movs	r3, #0
   35a66:	b570      	push	{r4, r5, r6, lr}
   35a68:	4c06      	ldr	r4, [pc, #24]	; (35a84 <_sbrk_r+0x20>)
   35a6a:	0005      	movs	r5, r0
   35a6c:	0008      	movs	r0, r1
   35a6e:	6023      	str	r3, [r4, #0]
   35a70:	f7f6 fa98 	bl	2bfa4 <_sbrk>
   35a74:	1c43      	adds	r3, r0, #1
   35a76:	d103      	bne.n	35a80 <_sbrk_r+0x1c>
   35a78:	6823      	ldr	r3, [r4, #0]
   35a7a:	2b00      	cmp	r3, #0
   35a7c:	d000      	beq.n	35a80 <_sbrk_r+0x1c>
   35a7e:	602b      	str	r3, [r5, #0]
   35a80:	bd70      	pop	{r4, r5, r6, pc}
   35a82:	46c0      	nop			; (mov r8, r8)
   35a84:	20005ce0 	.word	0x20005ce0

00035a88 <sniprintf>:
   35a88:	b40c      	push	{r2, r3}
   35a8a:	b530      	push	{r4, r5, lr}
   35a8c:	4b16      	ldr	r3, [pc, #88]	; (35ae8 <sniprintf+0x60>)
   35a8e:	b09d      	sub	sp, #116	; 0x74
   35a90:	1e0c      	subs	r4, r1, #0
   35a92:	681d      	ldr	r5, [r3, #0]
   35a94:	da08      	bge.n	35aa8 <sniprintf+0x20>
   35a96:	238b      	movs	r3, #139	; 0x8b
   35a98:	2001      	movs	r0, #1
   35a9a:	602b      	str	r3, [r5, #0]
   35a9c:	4240      	negs	r0, r0
   35a9e:	b01d      	add	sp, #116	; 0x74
   35aa0:	bc30      	pop	{r4, r5}
   35aa2:	bc08      	pop	{r3}
   35aa4:	b002      	add	sp, #8
   35aa6:	4718      	bx	r3
   35aa8:	2382      	movs	r3, #130	; 0x82
   35aaa:	a902      	add	r1, sp, #8
   35aac:	009b      	lsls	r3, r3, #2
   35aae:	818b      	strh	r3, [r1, #12]
   35ab0:	2300      	movs	r3, #0
   35ab2:	9002      	str	r0, [sp, #8]
   35ab4:	6108      	str	r0, [r1, #16]
   35ab6:	429c      	cmp	r4, r3
   35ab8:	d000      	beq.n	35abc <sniprintf+0x34>
   35aba:	1e63      	subs	r3, r4, #1
   35abc:	608b      	str	r3, [r1, #8]
   35abe:	614b      	str	r3, [r1, #20]
   35ac0:	2301      	movs	r3, #1
   35ac2:	425b      	negs	r3, r3
   35ac4:	81cb      	strh	r3, [r1, #14]
   35ac6:	9a20      	ldr	r2, [sp, #128]	; 0x80
   35ac8:	ab21      	add	r3, sp, #132	; 0x84
   35aca:	0028      	movs	r0, r5
   35acc:	9301      	str	r3, [sp, #4]
   35ace:	f000 fcff 	bl	364d0 <_svfiprintf_r>
   35ad2:	1c43      	adds	r3, r0, #1
   35ad4:	da01      	bge.n	35ada <sniprintf+0x52>
   35ad6:	238b      	movs	r3, #139	; 0x8b
   35ad8:	602b      	str	r3, [r5, #0]
   35ada:	2c00      	cmp	r4, #0
   35adc:	d0df      	beq.n	35a9e <sniprintf+0x16>
   35ade:	2300      	movs	r3, #0
   35ae0:	9a02      	ldr	r2, [sp, #8]
   35ae2:	7013      	strb	r3, [r2, #0]
   35ae4:	e7db      	b.n	35a9e <sniprintf+0x16>
   35ae6:	46c0      	nop			; (mov r8, r8)
   35ae8:	20000130 	.word	0x20000130

00035aec <siprintf>:
   35aec:	b40e      	push	{r1, r2, r3}
   35aee:	b510      	push	{r4, lr}
   35af0:	b09d      	sub	sp, #116	; 0x74
   35af2:	a902      	add	r1, sp, #8
   35af4:	9002      	str	r0, [sp, #8]
   35af6:	6108      	str	r0, [r1, #16]
   35af8:	480b      	ldr	r0, [pc, #44]	; (35b28 <siprintf+0x3c>)
   35afa:	2482      	movs	r4, #130	; 0x82
   35afc:	6088      	str	r0, [r1, #8]
   35afe:	6148      	str	r0, [r1, #20]
   35b00:	2001      	movs	r0, #1
   35b02:	4240      	negs	r0, r0
   35b04:	ab1f      	add	r3, sp, #124	; 0x7c
   35b06:	81c8      	strh	r0, [r1, #14]
   35b08:	4808      	ldr	r0, [pc, #32]	; (35b2c <siprintf+0x40>)
   35b0a:	cb04      	ldmia	r3!, {r2}
   35b0c:	00a4      	lsls	r4, r4, #2
   35b0e:	6800      	ldr	r0, [r0, #0]
   35b10:	9301      	str	r3, [sp, #4]
   35b12:	818c      	strh	r4, [r1, #12]
   35b14:	f000 fcdc 	bl	364d0 <_svfiprintf_r>
   35b18:	2300      	movs	r3, #0
   35b1a:	9a02      	ldr	r2, [sp, #8]
   35b1c:	7013      	strb	r3, [r2, #0]
   35b1e:	b01d      	add	sp, #116	; 0x74
   35b20:	bc10      	pop	{r4}
   35b22:	bc08      	pop	{r3}
   35b24:	b003      	add	sp, #12
   35b26:	4718      	bx	r3
   35b28:	7fffffff 	.word	0x7fffffff
   35b2c:	20000130 	.word	0x20000130

00035b30 <strcasecmp>:
   35b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35b32:	0007      	movs	r7, r0
   35b34:	000e      	movs	r6, r1
   35b36:	783c      	ldrb	r4, [r7, #0]
   35b38:	f000 fbda 	bl	362f0 <__locale_ctype_ptr>
   35b3c:	2203      	movs	r2, #3
   35b3e:	1900      	adds	r0, r0, r4
   35b40:	7843      	ldrb	r3, [r0, #1]
   35b42:	4013      	ands	r3, r2
   35b44:	2b01      	cmp	r3, #1
   35b46:	d100      	bne.n	35b4a <strcasecmp+0x1a>
   35b48:	3420      	adds	r4, #32
   35b4a:	7835      	ldrb	r5, [r6, #0]
   35b4c:	f000 fbd0 	bl	362f0 <__locale_ctype_ptr>
   35b50:	2203      	movs	r2, #3
   35b52:	1940      	adds	r0, r0, r5
   35b54:	7843      	ldrb	r3, [r0, #1]
   35b56:	4013      	ands	r3, r2
   35b58:	2b01      	cmp	r3, #1
   35b5a:	d100      	bne.n	35b5e <strcasecmp+0x2e>
   35b5c:	3520      	adds	r5, #32
   35b5e:	1b60      	subs	r0, r4, r5
   35b60:	d103      	bne.n	35b6a <strcasecmp+0x3a>
   35b62:	3701      	adds	r7, #1
   35b64:	3601      	adds	r6, #1
   35b66:	2d00      	cmp	r5, #0
   35b68:	d1e5      	bne.n	35b36 <strcasecmp+0x6>
   35b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00035b6c <strcat>:
   35b6c:	0002      	movs	r2, r0
   35b6e:	b510      	push	{r4, lr}
   35b70:	7813      	ldrb	r3, [r2, #0]
   35b72:	2b00      	cmp	r3, #0
   35b74:	d105      	bne.n	35b82 <strcat+0x16>
   35b76:	5ccc      	ldrb	r4, [r1, r3]
   35b78:	54d4      	strb	r4, [r2, r3]
   35b7a:	3301      	adds	r3, #1
   35b7c:	2c00      	cmp	r4, #0
   35b7e:	d1fa      	bne.n	35b76 <strcat+0xa>
   35b80:	bd10      	pop	{r4, pc}
   35b82:	3201      	adds	r2, #1
   35b84:	e7f4      	b.n	35b70 <strcat+0x4>

00035b86 <strcmp>:
   35b86:	7802      	ldrb	r2, [r0, #0]
   35b88:	780b      	ldrb	r3, [r1, #0]
   35b8a:	2a00      	cmp	r2, #0
   35b8c:	d003      	beq.n	35b96 <strcmp+0x10>
   35b8e:	3001      	adds	r0, #1
   35b90:	3101      	adds	r1, #1
   35b92:	429a      	cmp	r2, r3
   35b94:	d0f7      	beq.n	35b86 <strcmp>
   35b96:	1ad0      	subs	r0, r2, r3
   35b98:	4770      	bx	lr

00035b9a <strcpy>:
   35b9a:	1c03      	adds	r3, r0, #0
   35b9c:	780a      	ldrb	r2, [r1, #0]
   35b9e:	3101      	adds	r1, #1
   35ba0:	701a      	strb	r2, [r3, #0]
   35ba2:	3301      	adds	r3, #1
   35ba4:	2a00      	cmp	r2, #0
   35ba6:	d1f9      	bne.n	35b9c <strcpy+0x2>
   35ba8:	4770      	bx	lr
	...

00035bac <strdup>:
   35bac:	b510      	push	{r4, lr}
   35bae:	4b03      	ldr	r3, [pc, #12]	; (35bbc <strdup+0x10>)
   35bb0:	0001      	movs	r1, r0
   35bb2:	6818      	ldr	r0, [r3, #0]
   35bb4:	f000 f804 	bl	35bc0 <_strdup_r>
   35bb8:	bd10      	pop	{r4, pc}
   35bba:	46c0      	nop			; (mov r8, r8)
   35bbc:	20000130 	.word	0x20000130

00035bc0 <_strdup_r>:
   35bc0:	b570      	push	{r4, r5, r6, lr}
   35bc2:	0005      	movs	r5, r0
   35bc4:	0008      	movs	r0, r1
   35bc6:	000e      	movs	r6, r1
   35bc8:	f000 f80d 	bl	35be6 <strlen>
   35bcc:	1c44      	adds	r4, r0, #1
   35bce:	0021      	movs	r1, r4
   35bd0:	0028      	movs	r0, r5
   35bd2:	f7ff fe7f 	bl	358d4 <_malloc_r>
   35bd6:	1e05      	subs	r5, r0, #0
   35bd8:	d003      	beq.n	35be2 <_strdup_r+0x22>
   35bda:	0022      	movs	r2, r4
   35bdc:	0031      	movs	r1, r6
   35bde:	f7ff fe0b 	bl	357f8 <memcpy>
   35be2:	0028      	movs	r0, r5
   35be4:	bd70      	pop	{r4, r5, r6, pc}

00035be6 <strlen>:
   35be6:	2300      	movs	r3, #0
   35be8:	5cc2      	ldrb	r2, [r0, r3]
   35bea:	3301      	adds	r3, #1
   35bec:	2a00      	cmp	r2, #0
   35bee:	d1fb      	bne.n	35be8 <strlen+0x2>
   35bf0:	1e58      	subs	r0, r3, #1
   35bf2:	4770      	bx	lr

00035bf4 <strncmp>:
   35bf4:	2300      	movs	r3, #0
   35bf6:	b530      	push	{r4, r5, lr}
   35bf8:	429a      	cmp	r2, r3
   35bfa:	d00a      	beq.n	35c12 <strncmp+0x1e>
   35bfc:	3a01      	subs	r2, #1
   35bfe:	5cc4      	ldrb	r4, [r0, r3]
   35c00:	5ccd      	ldrb	r5, [r1, r3]
   35c02:	42ac      	cmp	r4, r5
   35c04:	d104      	bne.n	35c10 <strncmp+0x1c>
   35c06:	429a      	cmp	r2, r3
   35c08:	d002      	beq.n	35c10 <strncmp+0x1c>
   35c0a:	3301      	adds	r3, #1
   35c0c:	2c00      	cmp	r4, #0
   35c0e:	d1f6      	bne.n	35bfe <strncmp+0xa>
   35c10:	1b63      	subs	r3, r4, r5
   35c12:	0018      	movs	r0, r3
   35c14:	bd30      	pop	{r4, r5, pc}

00035c16 <strncpy>:
   35c16:	b570      	push	{r4, r5, r6, lr}
   35c18:	0004      	movs	r4, r0
   35c1a:	2a00      	cmp	r2, #0
   35c1c:	d100      	bne.n	35c20 <strncpy+0xa>
   35c1e:	bd70      	pop	{r4, r5, r6, pc}
   35c20:	780d      	ldrb	r5, [r1, #0]
   35c22:	1e56      	subs	r6, r2, #1
   35c24:	1c63      	adds	r3, r4, #1
   35c26:	7025      	strb	r5, [r4, #0]
   35c28:	3101      	adds	r1, #1
   35c2a:	2d00      	cmp	r5, #0
   35c2c:	d105      	bne.n	35c3a <strncpy+0x24>
   35c2e:	18a4      	adds	r4, r4, r2
   35c30:	429c      	cmp	r4, r3
   35c32:	d0f4      	beq.n	35c1e <strncpy+0x8>
   35c34:	701d      	strb	r5, [r3, #0]
   35c36:	3301      	adds	r3, #1
   35c38:	e7fa      	b.n	35c30 <strncpy+0x1a>
   35c3a:	001c      	movs	r4, r3
   35c3c:	0032      	movs	r2, r6
   35c3e:	e7ec      	b.n	35c1a <strncpy+0x4>

00035c40 <strrchr>:
   35c40:	b570      	push	{r4, r5, r6, lr}
   35c42:	000d      	movs	r5, r1
   35c44:	2400      	movs	r4, #0
   35c46:	2900      	cmp	r1, #0
   35c48:	d105      	bne.n	35c56 <strrchr+0x16>
   35c4a:	f000 ff19 	bl	36a80 <strchr>
   35c4e:	0004      	movs	r4, r0
   35c50:	e006      	b.n	35c60 <strrchr+0x20>
   35c52:	001c      	movs	r4, r3
   35c54:	1c58      	adds	r0, r3, #1
   35c56:	0029      	movs	r1, r5
   35c58:	f000 ff12 	bl	36a80 <strchr>
   35c5c:	1e03      	subs	r3, r0, #0
   35c5e:	d1f8      	bne.n	35c52 <strrchr+0x12>
   35c60:	0020      	movs	r0, r4
   35c62:	bd70      	pop	{r4, r5, r6, pc}

00035c64 <strstr>:
   35c64:	b510      	push	{r4, lr}
   35c66:	0002      	movs	r2, r0
   35c68:	7800      	ldrb	r0, [r0, #0]
   35c6a:	2800      	cmp	r0, #0
   35c6c:	d104      	bne.n	35c78 <strstr+0x14>
   35c6e:	7809      	ldrb	r1, [r1, #0]
   35c70:	2900      	cmp	r1, #0
   35c72:	d00d      	beq.n	35c90 <strstr+0x2c>
   35c74:	bd10      	pop	{r4, pc}
   35c76:	3201      	adds	r2, #1
   35c78:	7810      	ldrb	r0, [r2, #0]
   35c7a:	2800      	cmp	r0, #0
   35c7c:	d0fa      	beq.n	35c74 <strstr+0x10>
   35c7e:	2300      	movs	r3, #0
   35c80:	5cc8      	ldrb	r0, [r1, r3]
   35c82:	2800      	cmp	r0, #0
   35c84:	d004      	beq.n	35c90 <strstr+0x2c>
   35c86:	5cd4      	ldrb	r4, [r2, r3]
   35c88:	4284      	cmp	r4, r0
   35c8a:	d1f4      	bne.n	35c76 <strstr+0x12>
   35c8c:	3301      	adds	r3, #1
   35c8e:	e7f7      	b.n	35c80 <strstr+0x1c>
   35c90:	0010      	movs	r0, r2
   35c92:	e7ef      	b.n	35c74 <strstr+0x10>

00035c94 <_strtol_l.isra.0>:
   35c94:	b5f0      	push	{r4, r5, r6, r7, lr}
   35c96:	001f      	movs	r7, r3
   35c98:	000e      	movs	r6, r1
   35c9a:	b087      	sub	sp, #28
   35c9c:	9005      	str	r0, [sp, #20]
   35c9e:	9103      	str	r1, [sp, #12]
   35ca0:	9202      	str	r2, [sp, #8]
   35ca2:	980c      	ldr	r0, [sp, #48]	; 0x30
   35ca4:	7834      	ldrb	r4, [r6, #0]
   35ca6:	f000 fb20 	bl	362ea <__locale_ctype_ptr_l>
   35caa:	2208      	movs	r2, #8
   35cac:	1900      	adds	r0, r0, r4
   35cae:	7843      	ldrb	r3, [r0, #1]
   35cb0:	1c75      	adds	r5, r6, #1
   35cb2:	4013      	ands	r3, r2
   35cb4:	d10c      	bne.n	35cd0 <_strtol_l.isra.0+0x3c>
   35cb6:	2c2d      	cmp	r4, #45	; 0x2d
   35cb8:	d10c      	bne.n	35cd4 <_strtol_l.isra.0+0x40>
   35cba:	3301      	adds	r3, #1
   35cbc:	782c      	ldrb	r4, [r5, #0]
   35cbe:	9301      	str	r3, [sp, #4]
   35cc0:	1cb5      	adds	r5, r6, #2
   35cc2:	2f00      	cmp	r7, #0
   35cc4:	d00c      	beq.n	35ce0 <_strtol_l.isra.0+0x4c>
   35cc6:	2f10      	cmp	r7, #16
   35cc8:	d114      	bne.n	35cf4 <_strtol_l.isra.0+0x60>
   35cca:	2c30      	cmp	r4, #48	; 0x30
   35ccc:	d00a      	beq.n	35ce4 <_strtol_l.isra.0+0x50>
   35cce:	e011      	b.n	35cf4 <_strtol_l.isra.0+0x60>
   35cd0:	002e      	movs	r6, r5
   35cd2:	e7e6      	b.n	35ca2 <_strtol_l.isra.0+0xe>
   35cd4:	9301      	str	r3, [sp, #4]
   35cd6:	2c2b      	cmp	r4, #43	; 0x2b
   35cd8:	d1f3      	bne.n	35cc2 <_strtol_l.isra.0+0x2e>
   35cda:	782c      	ldrb	r4, [r5, #0]
   35cdc:	1cb5      	adds	r5, r6, #2
   35cde:	e7f0      	b.n	35cc2 <_strtol_l.isra.0+0x2e>
   35ce0:	2c30      	cmp	r4, #48	; 0x30
   35ce2:	d12f      	bne.n	35d44 <_strtol_l.isra.0+0xb0>
   35ce4:	2220      	movs	r2, #32
   35ce6:	782b      	ldrb	r3, [r5, #0]
   35ce8:	4393      	bics	r3, r2
   35cea:	2b58      	cmp	r3, #88	; 0x58
   35cec:	d151      	bne.n	35d92 <_strtol_l.isra.0+0xfe>
   35cee:	2710      	movs	r7, #16
   35cf0:	786c      	ldrb	r4, [r5, #1]
   35cf2:	3502      	adds	r5, #2
   35cf4:	9b01      	ldr	r3, [sp, #4]
   35cf6:	4a29      	ldr	r2, [pc, #164]	; (35d9c <_strtol_l.isra.0+0x108>)
   35cf8:	0039      	movs	r1, r7
   35cfa:	189e      	adds	r6, r3, r2
   35cfc:	0030      	movs	r0, r6
   35cfe:	f7fd fe2f 	bl	33960 <__aeabi_uidivmod>
   35d02:	0030      	movs	r0, r6
   35d04:	9104      	str	r1, [sp, #16]
   35d06:	0039      	movs	r1, r7
   35d08:	f7fd fda4 	bl	33854 <__udivsi3>
   35d0c:	2101      	movs	r1, #1
   35d0e:	2300      	movs	r3, #0
   35d10:	4249      	negs	r1, r1
   35d12:	0002      	movs	r2, r0
   35d14:	468c      	mov	ip, r1
   35d16:	0018      	movs	r0, r3
   35d18:	0021      	movs	r1, r4
   35d1a:	3930      	subs	r1, #48	; 0x30
   35d1c:	2909      	cmp	r1, #9
   35d1e:	d813      	bhi.n	35d48 <_strtol_l.isra.0+0xb4>
   35d20:	000c      	movs	r4, r1
   35d22:	42a7      	cmp	r7, r4
   35d24:	dd1c      	ble.n	35d60 <_strtol_l.isra.0+0xcc>
   35d26:	1c59      	adds	r1, r3, #1
   35d28:	d009      	beq.n	35d3e <_strtol_l.isra.0+0xaa>
   35d2a:	4663      	mov	r3, ip
   35d2c:	4282      	cmp	r2, r0
   35d2e:	d306      	bcc.n	35d3e <_strtol_l.isra.0+0xaa>
   35d30:	d102      	bne.n	35d38 <_strtol_l.isra.0+0xa4>
   35d32:	9904      	ldr	r1, [sp, #16]
   35d34:	42a1      	cmp	r1, r4
   35d36:	db02      	blt.n	35d3e <_strtol_l.isra.0+0xaa>
   35d38:	2301      	movs	r3, #1
   35d3a:	4378      	muls	r0, r7
   35d3c:	1820      	adds	r0, r4, r0
   35d3e:	782c      	ldrb	r4, [r5, #0]
   35d40:	3501      	adds	r5, #1
   35d42:	e7e9      	b.n	35d18 <_strtol_l.isra.0+0x84>
   35d44:	270a      	movs	r7, #10
   35d46:	e7d5      	b.n	35cf4 <_strtol_l.isra.0+0x60>
   35d48:	0021      	movs	r1, r4
   35d4a:	3941      	subs	r1, #65	; 0x41
   35d4c:	2919      	cmp	r1, #25
   35d4e:	d801      	bhi.n	35d54 <_strtol_l.isra.0+0xc0>
   35d50:	3c37      	subs	r4, #55	; 0x37
   35d52:	e7e6      	b.n	35d22 <_strtol_l.isra.0+0x8e>
   35d54:	0021      	movs	r1, r4
   35d56:	3961      	subs	r1, #97	; 0x61
   35d58:	2919      	cmp	r1, #25
   35d5a:	d801      	bhi.n	35d60 <_strtol_l.isra.0+0xcc>
   35d5c:	3c57      	subs	r4, #87	; 0x57
   35d5e:	e7e0      	b.n	35d22 <_strtol_l.isra.0+0x8e>
   35d60:	1c5a      	adds	r2, r3, #1
   35d62:	d108      	bne.n	35d76 <_strtol_l.isra.0+0xe2>
   35d64:	9a05      	ldr	r2, [sp, #20]
   35d66:	3323      	adds	r3, #35	; 0x23
   35d68:	6013      	str	r3, [r2, #0]
   35d6a:	9b02      	ldr	r3, [sp, #8]
   35d6c:	0030      	movs	r0, r6
   35d6e:	2b00      	cmp	r3, #0
   35d70:	d10b      	bne.n	35d8a <_strtol_l.isra.0+0xf6>
   35d72:	b007      	add	sp, #28
   35d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
   35d76:	9a01      	ldr	r2, [sp, #4]
   35d78:	2a00      	cmp	r2, #0
   35d7a:	d000      	beq.n	35d7e <_strtol_l.isra.0+0xea>
   35d7c:	4240      	negs	r0, r0
   35d7e:	9a02      	ldr	r2, [sp, #8]
   35d80:	2a00      	cmp	r2, #0
   35d82:	d0f6      	beq.n	35d72 <_strtol_l.isra.0+0xde>
   35d84:	9a03      	ldr	r2, [sp, #12]
   35d86:	2b00      	cmp	r3, #0
   35d88:	d000      	beq.n	35d8c <_strtol_l.isra.0+0xf8>
   35d8a:	1e6a      	subs	r2, r5, #1
   35d8c:	9b02      	ldr	r3, [sp, #8]
   35d8e:	601a      	str	r2, [r3, #0]
   35d90:	e7ef      	b.n	35d72 <_strtol_l.isra.0+0xde>
   35d92:	2430      	movs	r4, #48	; 0x30
   35d94:	2f00      	cmp	r7, #0
   35d96:	d1ad      	bne.n	35cf4 <_strtol_l.isra.0+0x60>
   35d98:	3708      	adds	r7, #8
   35d9a:	e7ab      	b.n	35cf4 <_strtol_l.isra.0+0x60>
   35d9c:	7fffffff 	.word	0x7fffffff

00035da0 <strtol>:
   35da0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   35da2:	0013      	movs	r3, r2
   35da4:	4a06      	ldr	r2, [pc, #24]	; (35dc0 <strtol+0x20>)
   35da6:	0005      	movs	r5, r0
   35da8:	6810      	ldr	r0, [r2, #0]
   35daa:	6a04      	ldr	r4, [r0, #32]
   35dac:	2c00      	cmp	r4, #0
   35dae:	d100      	bne.n	35db2 <strtol+0x12>
   35db0:	4c04      	ldr	r4, [pc, #16]	; (35dc4 <strtol+0x24>)
   35db2:	000a      	movs	r2, r1
   35db4:	9400      	str	r4, [sp, #0]
   35db6:	0029      	movs	r1, r5
   35db8:	f7ff ff6c 	bl	35c94 <_strtol_l.isra.0>
   35dbc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   35dbe:	46c0      	nop			; (mov r8, r8)
   35dc0:	20000130 	.word	0x20000130
   35dc4:	20000194 	.word	0x20000194

00035dc8 <_vsniprintf_r>:
   35dc8:	b530      	push	{r4, r5, lr}
   35dca:	0014      	movs	r4, r2
   35dcc:	b09b      	sub	sp, #108	; 0x6c
   35dce:	0005      	movs	r5, r0
   35dd0:	001a      	movs	r2, r3
   35dd2:	2c00      	cmp	r4, #0
   35dd4:	da05      	bge.n	35de2 <_vsniprintf_r+0x1a>
   35dd6:	238b      	movs	r3, #139	; 0x8b
   35dd8:	6003      	str	r3, [r0, #0]
   35dda:	2001      	movs	r0, #1
   35ddc:	4240      	negs	r0, r0
   35dde:	b01b      	add	sp, #108	; 0x6c
   35de0:	bd30      	pop	{r4, r5, pc}
   35de2:	2382      	movs	r3, #130	; 0x82
   35de4:	4668      	mov	r0, sp
   35de6:	009b      	lsls	r3, r3, #2
   35de8:	8183      	strh	r3, [r0, #12]
   35dea:	2300      	movs	r3, #0
   35dec:	9100      	str	r1, [sp, #0]
   35dee:	9104      	str	r1, [sp, #16]
   35df0:	429c      	cmp	r4, r3
   35df2:	d000      	beq.n	35df6 <_vsniprintf_r+0x2e>
   35df4:	1e63      	subs	r3, r4, #1
   35df6:	9302      	str	r3, [sp, #8]
   35df8:	9305      	str	r3, [sp, #20]
   35dfa:	2301      	movs	r3, #1
   35dfc:	4669      	mov	r1, sp
   35dfe:	425b      	negs	r3, r3
   35e00:	81cb      	strh	r3, [r1, #14]
   35e02:	0028      	movs	r0, r5
   35e04:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   35e06:	f000 fb63 	bl	364d0 <_svfiprintf_r>
   35e0a:	1c43      	adds	r3, r0, #1
   35e0c:	da01      	bge.n	35e12 <_vsniprintf_r+0x4a>
   35e0e:	238b      	movs	r3, #139	; 0x8b
   35e10:	602b      	str	r3, [r5, #0]
   35e12:	2c00      	cmp	r4, #0
   35e14:	d0e3      	beq.n	35dde <_vsniprintf_r+0x16>
   35e16:	2300      	movs	r3, #0
   35e18:	9a00      	ldr	r2, [sp, #0]
   35e1a:	7013      	strb	r3, [r2, #0]
   35e1c:	e7df      	b.n	35dde <_vsniprintf_r+0x16>
	...

00035e20 <vsniprintf>:
   35e20:	b507      	push	{r0, r1, r2, lr}
   35e22:	9300      	str	r3, [sp, #0]
   35e24:	0013      	movs	r3, r2
   35e26:	000a      	movs	r2, r1
   35e28:	0001      	movs	r1, r0
   35e2a:	4802      	ldr	r0, [pc, #8]	; (35e34 <vsniprintf+0x14>)
   35e2c:	6800      	ldr	r0, [r0, #0]
   35e2e:	f7ff ffcb 	bl	35dc8 <_vsniprintf_r>
   35e32:	bd0e      	pop	{r1, r2, r3, pc}
   35e34:	20000130 	.word	0x20000130

00035e38 <__swbuf_r>:
   35e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   35e3a:	0005      	movs	r5, r0
   35e3c:	000e      	movs	r6, r1
   35e3e:	0014      	movs	r4, r2
   35e40:	2800      	cmp	r0, #0
   35e42:	d004      	beq.n	35e4e <__swbuf_r+0x16>
   35e44:	6983      	ldr	r3, [r0, #24]
   35e46:	2b00      	cmp	r3, #0
   35e48:	d101      	bne.n	35e4e <__swbuf_r+0x16>
   35e4a:	f000 f9b9 	bl	361c0 <__sinit>
   35e4e:	4b22      	ldr	r3, [pc, #136]	; (35ed8 <__swbuf_r+0xa0>)
   35e50:	429c      	cmp	r4, r3
   35e52:	d12d      	bne.n	35eb0 <__swbuf_r+0x78>
   35e54:	686c      	ldr	r4, [r5, #4]
   35e56:	69a3      	ldr	r3, [r4, #24]
   35e58:	60a3      	str	r3, [r4, #8]
   35e5a:	89a3      	ldrh	r3, [r4, #12]
   35e5c:	071b      	lsls	r3, r3, #28
   35e5e:	d531      	bpl.n	35ec4 <__swbuf_r+0x8c>
   35e60:	6923      	ldr	r3, [r4, #16]
   35e62:	2b00      	cmp	r3, #0
   35e64:	d02e      	beq.n	35ec4 <__swbuf_r+0x8c>
   35e66:	6823      	ldr	r3, [r4, #0]
   35e68:	6922      	ldr	r2, [r4, #16]
   35e6a:	b2f7      	uxtb	r7, r6
   35e6c:	1a98      	subs	r0, r3, r2
   35e6e:	6963      	ldr	r3, [r4, #20]
   35e70:	b2f6      	uxtb	r6, r6
   35e72:	4298      	cmp	r0, r3
   35e74:	db05      	blt.n	35e82 <__swbuf_r+0x4a>
   35e76:	0021      	movs	r1, r4
   35e78:	0028      	movs	r0, r5
   35e7a:	f000 f933 	bl	360e4 <_fflush_r>
   35e7e:	2800      	cmp	r0, #0
   35e80:	d126      	bne.n	35ed0 <__swbuf_r+0x98>
   35e82:	68a3      	ldr	r3, [r4, #8]
   35e84:	3001      	adds	r0, #1
   35e86:	3b01      	subs	r3, #1
   35e88:	60a3      	str	r3, [r4, #8]
   35e8a:	6823      	ldr	r3, [r4, #0]
   35e8c:	1c5a      	adds	r2, r3, #1
   35e8e:	6022      	str	r2, [r4, #0]
   35e90:	701f      	strb	r7, [r3, #0]
   35e92:	6963      	ldr	r3, [r4, #20]
   35e94:	4298      	cmp	r0, r3
   35e96:	d004      	beq.n	35ea2 <__swbuf_r+0x6a>
   35e98:	89a3      	ldrh	r3, [r4, #12]
   35e9a:	07db      	lsls	r3, r3, #31
   35e9c:	d51a      	bpl.n	35ed4 <__swbuf_r+0x9c>
   35e9e:	2e0a      	cmp	r6, #10
   35ea0:	d118      	bne.n	35ed4 <__swbuf_r+0x9c>
   35ea2:	0021      	movs	r1, r4
   35ea4:	0028      	movs	r0, r5
   35ea6:	f000 f91d 	bl	360e4 <_fflush_r>
   35eaa:	2800      	cmp	r0, #0
   35eac:	d012      	beq.n	35ed4 <__swbuf_r+0x9c>
   35eae:	e00f      	b.n	35ed0 <__swbuf_r+0x98>
   35eb0:	4b0a      	ldr	r3, [pc, #40]	; (35edc <__swbuf_r+0xa4>)
   35eb2:	429c      	cmp	r4, r3
   35eb4:	d101      	bne.n	35eba <__swbuf_r+0x82>
   35eb6:	68ac      	ldr	r4, [r5, #8]
   35eb8:	e7cd      	b.n	35e56 <__swbuf_r+0x1e>
   35eba:	4b09      	ldr	r3, [pc, #36]	; (35ee0 <__swbuf_r+0xa8>)
   35ebc:	429c      	cmp	r4, r3
   35ebe:	d1ca      	bne.n	35e56 <__swbuf_r+0x1e>
   35ec0:	68ec      	ldr	r4, [r5, #12]
   35ec2:	e7c8      	b.n	35e56 <__swbuf_r+0x1e>
   35ec4:	0021      	movs	r1, r4
   35ec6:	0028      	movs	r0, r5
   35ec8:	f000 f80c 	bl	35ee4 <__swsetup_r>
   35ecc:	2800      	cmp	r0, #0
   35ece:	d0ca      	beq.n	35e66 <__swbuf_r+0x2e>
   35ed0:	2601      	movs	r6, #1
   35ed2:	4276      	negs	r6, r6
   35ed4:	0030      	movs	r0, r6
   35ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   35ed8:	0003b2b8 	.word	0x0003b2b8
   35edc:	0003b2d8 	.word	0x0003b2d8
   35ee0:	0003b298 	.word	0x0003b298

00035ee4 <__swsetup_r>:
   35ee4:	4b36      	ldr	r3, [pc, #216]	; (35fc0 <__swsetup_r+0xdc>)
   35ee6:	b570      	push	{r4, r5, r6, lr}
   35ee8:	681d      	ldr	r5, [r3, #0]
   35eea:	0006      	movs	r6, r0
   35eec:	000c      	movs	r4, r1
   35eee:	2d00      	cmp	r5, #0
   35ef0:	d005      	beq.n	35efe <__swsetup_r+0x1a>
   35ef2:	69ab      	ldr	r3, [r5, #24]
   35ef4:	2b00      	cmp	r3, #0
   35ef6:	d102      	bne.n	35efe <__swsetup_r+0x1a>
   35ef8:	0028      	movs	r0, r5
   35efa:	f000 f961 	bl	361c0 <__sinit>
   35efe:	4b31      	ldr	r3, [pc, #196]	; (35fc4 <__swsetup_r+0xe0>)
   35f00:	429c      	cmp	r4, r3
   35f02:	d10f      	bne.n	35f24 <__swsetup_r+0x40>
   35f04:	686c      	ldr	r4, [r5, #4]
   35f06:	230c      	movs	r3, #12
   35f08:	5ee2      	ldrsh	r2, [r4, r3]
   35f0a:	b293      	uxth	r3, r2
   35f0c:	0719      	lsls	r1, r3, #28
   35f0e:	d42d      	bmi.n	35f6c <__swsetup_r+0x88>
   35f10:	06d9      	lsls	r1, r3, #27
   35f12:	d411      	bmi.n	35f38 <__swsetup_r+0x54>
   35f14:	2309      	movs	r3, #9
   35f16:	2001      	movs	r0, #1
   35f18:	6033      	str	r3, [r6, #0]
   35f1a:	3337      	adds	r3, #55	; 0x37
   35f1c:	4313      	orrs	r3, r2
   35f1e:	81a3      	strh	r3, [r4, #12]
   35f20:	4240      	negs	r0, r0
   35f22:	bd70      	pop	{r4, r5, r6, pc}
   35f24:	4b28      	ldr	r3, [pc, #160]	; (35fc8 <__swsetup_r+0xe4>)
   35f26:	429c      	cmp	r4, r3
   35f28:	d101      	bne.n	35f2e <__swsetup_r+0x4a>
   35f2a:	68ac      	ldr	r4, [r5, #8]
   35f2c:	e7eb      	b.n	35f06 <__swsetup_r+0x22>
   35f2e:	4b27      	ldr	r3, [pc, #156]	; (35fcc <__swsetup_r+0xe8>)
   35f30:	429c      	cmp	r4, r3
   35f32:	d1e8      	bne.n	35f06 <__swsetup_r+0x22>
   35f34:	68ec      	ldr	r4, [r5, #12]
   35f36:	e7e6      	b.n	35f06 <__swsetup_r+0x22>
   35f38:	075b      	lsls	r3, r3, #29
   35f3a:	d513      	bpl.n	35f64 <__swsetup_r+0x80>
   35f3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
   35f3e:	2900      	cmp	r1, #0
   35f40:	d008      	beq.n	35f54 <__swsetup_r+0x70>
   35f42:	0023      	movs	r3, r4
   35f44:	3344      	adds	r3, #68	; 0x44
   35f46:	4299      	cmp	r1, r3
   35f48:	d002      	beq.n	35f50 <__swsetup_r+0x6c>
   35f4a:	0030      	movs	r0, r6
   35f4c:	f7ff fc78 	bl	35840 <_free_r>
   35f50:	2300      	movs	r3, #0
   35f52:	6363      	str	r3, [r4, #52]	; 0x34
   35f54:	2224      	movs	r2, #36	; 0x24
   35f56:	89a3      	ldrh	r3, [r4, #12]
   35f58:	4393      	bics	r3, r2
   35f5a:	81a3      	strh	r3, [r4, #12]
   35f5c:	2300      	movs	r3, #0
   35f5e:	6063      	str	r3, [r4, #4]
   35f60:	6923      	ldr	r3, [r4, #16]
   35f62:	6023      	str	r3, [r4, #0]
   35f64:	2308      	movs	r3, #8
   35f66:	89a2      	ldrh	r2, [r4, #12]
   35f68:	4313      	orrs	r3, r2
   35f6a:	81a3      	strh	r3, [r4, #12]
   35f6c:	6923      	ldr	r3, [r4, #16]
   35f6e:	2b00      	cmp	r3, #0
   35f70:	d10b      	bne.n	35f8a <__swsetup_r+0xa6>
   35f72:	21a0      	movs	r1, #160	; 0xa0
   35f74:	2280      	movs	r2, #128	; 0x80
   35f76:	89a3      	ldrh	r3, [r4, #12]
   35f78:	0089      	lsls	r1, r1, #2
   35f7a:	0092      	lsls	r2, r2, #2
   35f7c:	400b      	ands	r3, r1
   35f7e:	4293      	cmp	r3, r2
   35f80:	d003      	beq.n	35f8a <__swsetup_r+0xa6>
   35f82:	0021      	movs	r1, r4
   35f84:	0030      	movs	r0, r6
   35f86:	f000 f9e9 	bl	3635c <__smakebuf_r>
   35f8a:	2301      	movs	r3, #1
   35f8c:	89a2      	ldrh	r2, [r4, #12]
   35f8e:	4013      	ands	r3, r2
   35f90:	d011      	beq.n	35fb6 <__swsetup_r+0xd2>
   35f92:	2300      	movs	r3, #0
   35f94:	60a3      	str	r3, [r4, #8]
   35f96:	6963      	ldr	r3, [r4, #20]
   35f98:	425b      	negs	r3, r3
   35f9a:	61a3      	str	r3, [r4, #24]
   35f9c:	2000      	movs	r0, #0
   35f9e:	6923      	ldr	r3, [r4, #16]
   35fa0:	4283      	cmp	r3, r0
   35fa2:	d1be      	bne.n	35f22 <__swsetup_r+0x3e>
   35fa4:	230c      	movs	r3, #12
   35fa6:	5ee2      	ldrsh	r2, [r4, r3]
   35fa8:	0613      	lsls	r3, r2, #24
   35faa:	d5ba      	bpl.n	35f22 <__swsetup_r+0x3e>
   35fac:	2340      	movs	r3, #64	; 0x40
   35fae:	4313      	orrs	r3, r2
   35fb0:	81a3      	strh	r3, [r4, #12]
   35fb2:	3801      	subs	r0, #1
   35fb4:	e7b5      	b.n	35f22 <__swsetup_r+0x3e>
   35fb6:	0792      	lsls	r2, r2, #30
   35fb8:	d400      	bmi.n	35fbc <__swsetup_r+0xd8>
   35fba:	6963      	ldr	r3, [r4, #20]
   35fbc:	60a3      	str	r3, [r4, #8]
   35fbe:	e7ed      	b.n	35f9c <__swsetup_r+0xb8>
   35fc0:	20000130 	.word	0x20000130
   35fc4:	0003b2b8 	.word	0x0003b2b8
   35fc8:	0003b2d8 	.word	0x0003b2d8
   35fcc:	0003b298 	.word	0x0003b298

00035fd0 <__sflush_r>:
   35fd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   35fd2:	898a      	ldrh	r2, [r1, #12]
   35fd4:	0005      	movs	r5, r0
   35fd6:	000c      	movs	r4, r1
   35fd8:	0713      	lsls	r3, r2, #28
   35fda:	d460      	bmi.n	3609e <__sflush_r+0xce>
   35fdc:	684b      	ldr	r3, [r1, #4]
   35fde:	2b00      	cmp	r3, #0
   35fe0:	dc04      	bgt.n	35fec <__sflush_r+0x1c>
   35fe2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   35fe4:	2b00      	cmp	r3, #0
   35fe6:	dc01      	bgt.n	35fec <__sflush_r+0x1c>
   35fe8:	2000      	movs	r0, #0
   35fea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   35fec:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   35fee:	2f00      	cmp	r7, #0
   35ff0:	d0fa      	beq.n	35fe8 <__sflush_r+0x18>
   35ff2:	2300      	movs	r3, #0
   35ff4:	682e      	ldr	r6, [r5, #0]
   35ff6:	602b      	str	r3, [r5, #0]
   35ff8:	2380      	movs	r3, #128	; 0x80
   35ffa:	015b      	lsls	r3, r3, #5
   35ffc:	401a      	ands	r2, r3
   35ffe:	d034      	beq.n	3606a <__sflush_r+0x9a>
   36000:	6d60      	ldr	r0, [r4, #84]	; 0x54
   36002:	89a3      	ldrh	r3, [r4, #12]
   36004:	075b      	lsls	r3, r3, #29
   36006:	d506      	bpl.n	36016 <__sflush_r+0x46>
   36008:	6863      	ldr	r3, [r4, #4]
   3600a:	1ac0      	subs	r0, r0, r3
   3600c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   3600e:	2b00      	cmp	r3, #0
   36010:	d001      	beq.n	36016 <__sflush_r+0x46>
   36012:	6c23      	ldr	r3, [r4, #64]	; 0x40
   36014:	1ac0      	subs	r0, r0, r3
   36016:	0002      	movs	r2, r0
   36018:	6a21      	ldr	r1, [r4, #32]
   3601a:	2300      	movs	r3, #0
   3601c:	0028      	movs	r0, r5
   3601e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   36020:	47b8      	blx	r7
   36022:	89a1      	ldrh	r1, [r4, #12]
   36024:	1c43      	adds	r3, r0, #1
   36026:	d106      	bne.n	36036 <__sflush_r+0x66>
   36028:	682b      	ldr	r3, [r5, #0]
   3602a:	2b1d      	cmp	r3, #29
   3602c:	d831      	bhi.n	36092 <__sflush_r+0xc2>
   3602e:	4a2c      	ldr	r2, [pc, #176]	; (360e0 <__sflush_r+0x110>)
   36030:	40da      	lsrs	r2, r3
   36032:	07d3      	lsls	r3, r2, #31
   36034:	d52d      	bpl.n	36092 <__sflush_r+0xc2>
   36036:	2300      	movs	r3, #0
   36038:	6063      	str	r3, [r4, #4]
   3603a:	6923      	ldr	r3, [r4, #16]
   3603c:	6023      	str	r3, [r4, #0]
   3603e:	04cb      	lsls	r3, r1, #19
   36040:	d505      	bpl.n	3604e <__sflush_r+0x7e>
   36042:	1c43      	adds	r3, r0, #1
   36044:	d102      	bne.n	3604c <__sflush_r+0x7c>
   36046:	682b      	ldr	r3, [r5, #0]
   36048:	2b00      	cmp	r3, #0
   3604a:	d100      	bne.n	3604e <__sflush_r+0x7e>
   3604c:	6560      	str	r0, [r4, #84]	; 0x54
   3604e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   36050:	602e      	str	r6, [r5, #0]
   36052:	2900      	cmp	r1, #0
   36054:	d0c8      	beq.n	35fe8 <__sflush_r+0x18>
   36056:	0023      	movs	r3, r4
   36058:	3344      	adds	r3, #68	; 0x44
   3605a:	4299      	cmp	r1, r3
   3605c:	d002      	beq.n	36064 <__sflush_r+0x94>
   3605e:	0028      	movs	r0, r5
   36060:	f7ff fbee 	bl	35840 <_free_r>
   36064:	2000      	movs	r0, #0
   36066:	6360      	str	r0, [r4, #52]	; 0x34
   36068:	e7bf      	b.n	35fea <__sflush_r+0x1a>
   3606a:	2301      	movs	r3, #1
   3606c:	6a21      	ldr	r1, [r4, #32]
   3606e:	0028      	movs	r0, r5
   36070:	47b8      	blx	r7
   36072:	1c43      	adds	r3, r0, #1
   36074:	d1c5      	bne.n	36002 <__sflush_r+0x32>
   36076:	682b      	ldr	r3, [r5, #0]
   36078:	2b00      	cmp	r3, #0
   3607a:	d0c2      	beq.n	36002 <__sflush_r+0x32>
   3607c:	2b1d      	cmp	r3, #29
   3607e:	d001      	beq.n	36084 <__sflush_r+0xb4>
   36080:	2b16      	cmp	r3, #22
   36082:	d101      	bne.n	36088 <__sflush_r+0xb8>
   36084:	602e      	str	r6, [r5, #0]
   36086:	e7af      	b.n	35fe8 <__sflush_r+0x18>
   36088:	2340      	movs	r3, #64	; 0x40
   3608a:	89a2      	ldrh	r2, [r4, #12]
   3608c:	4313      	orrs	r3, r2
   3608e:	81a3      	strh	r3, [r4, #12]
   36090:	e7ab      	b.n	35fea <__sflush_r+0x1a>
   36092:	2340      	movs	r3, #64	; 0x40
   36094:	430b      	orrs	r3, r1
   36096:	2001      	movs	r0, #1
   36098:	81a3      	strh	r3, [r4, #12]
   3609a:	4240      	negs	r0, r0
   3609c:	e7a5      	b.n	35fea <__sflush_r+0x1a>
   3609e:	690f      	ldr	r7, [r1, #16]
   360a0:	2f00      	cmp	r7, #0
   360a2:	d0a1      	beq.n	35fe8 <__sflush_r+0x18>
   360a4:	680b      	ldr	r3, [r1, #0]
   360a6:	600f      	str	r7, [r1, #0]
   360a8:	1bdb      	subs	r3, r3, r7
   360aa:	9301      	str	r3, [sp, #4]
   360ac:	2300      	movs	r3, #0
   360ae:	0792      	lsls	r2, r2, #30
   360b0:	d100      	bne.n	360b4 <__sflush_r+0xe4>
   360b2:	694b      	ldr	r3, [r1, #20]
   360b4:	60a3      	str	r3, [r4, #8]
   360b6:	9b01      	ldr	r3, [sp, #4]
   360b8:	2b00      	cmp	r3, #0
   360ba:	dc00      	bgt.n	360be <__sflush_r+0xee>
   360bc:	e794      	b.n	35fe8 <__sflush_r+0x18>
   360be:	9b01      	ldr	r3, [sp, #4]
   360c0:	003a      	movs	r2, r7
   360c2:	6a21      	ldr	r1, [r4, #32]
   360c4:	0028      	movs	r0, r5
   360c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   360c8:	47b0      	blx	r6
   360ca:	2800      	cmp	r0, #0
   360cc:	dc03      	bgt.n	360d6 <__sflush_r+0x106>
   360ce:	2340      	movs	r3, #64	; 0x40
   360d0:	89a2      	ldrh	r2, [r4, #12]
   360d2:	4313      	orrs	r3, r2
   360d4:	e7df      	b.n	36096 <__sflush_r+0xc6>
   360d6:	9b01      	ldr	r3, [sp, #4]
   360d8:	183f      	adds	r7, r7, r0
   360da:	1a1b      	subs	r3, r3, r0
   360dc:	9301      	str	r3, [sp, #4]
   360de:	e7ea      	b.n	360b6 <__sflush_r+0xe6>
   360e0:	20400001 	.word	0x20400001

000360e4 <_fflush_r>:
   360e4:	690b      	ldr	r3, [r1, #16]
   360e6:	b570      	push	{r4, r5, r6, lr}
   360e8:	0005      	movs	r5, r0
   360ea:	000c      	movs	r4, r1
   360ec:	2b00      	cmp	r3, #0
   360ee:	d101      	bne.n	360f4 <_fflush_r+0x10>
   360f0:	2000      	movs	r0, #0
   360f2:	bd70      	pop	{r4, r5, r6, pc}
   360f4:	2800      	cmp	r0, #0
   360f6:	d004      	beq.n	36102 <_fflush_r+0x1e>
   360f8:	6983      	ldr	r3, [r0, #24]
   360fa:	2b00      	cmp	r3, #0
   360fc:	d101      	bne.n	36102 <_fflush_r+0x1e>
   360fe:	f000 f85f 	bl	361c0 <__sinit>
   36102:	4b0b      	ldr	r3, [pc, #44]	; (36130 <_fflush_r+0x4c>)
   36104:	429c      	cmp	r4, r3
   36106:	d109      	bne.n	3611c <_fflush_r+0x38>
   36108:	686c      	ldr	r4, [r5, #4]
   3610a:	220c      	movs	r2, #12
   3610c:	5ea3      	ldrsh	r3, [r4, r2]
   3610e:	2b00      	cmp	r3, #0
   36110:	d0ee      	beq.n	360f0 <_fflush_r+0xc>
   36112:	0021      	movs	r1, r4
   36114:	0028      	movs	r0, r5
   36116:	f7ff ff5b 	bl	35fd0 <__sflush_r>
   3611a:	e7ea      	b.n	360f2 <_fflush_r+0xe>
   3611c:	4b05      	ldr	r3, [pc, #20]	; (36134 <_fflush_r+0x50>)
   3611e:	429c      	cmp	r4, r3
   36120:	d101      	bne.n	36126 <_fflush_r+0x42>
   36122:	68ac      	ldr	r4, [r5, #8]
   36124:	e7f1      	b.n	3610a <_fflush_r+0x26>
   36126:	4b04      	ldr	r3, [pc, #16]	; (36138 <_fflush_r+0x54>)
   36128:	429c      	cmp	r4, r3
   3612a:	d1ee      	bne.n	3610a <_fflush_r+0x26>
   3612c:	68ec      	ldr	r4, [r5, #12]
   3612e:	e7ec      	b.n	3610a <_fflush_r+0x26>
   36130:	0003b2b8 	.word	0x0003b2b8
   36134:	0003b2d8 	.word	0x0003b2d8
   36138:	0003b298 	.word	0x0003b298

0003613c <_cleanup_r>:
   3613c:	b510      	push	{r4, lr}
   3613e:	4902      	ldr	r1, [pc, #8]	; (36148 <_cleanup_r+0xc>)
   36140:	f000 f8b2 	bl	362a8 <_fwalk_reent>
   36144:	bd10      	pop	{r4, pc}
   36146:	46c0      	nop			; (mov r8, r8)
   36148:	000360e5 	.word	0x000360e5

0003614c <std.isra.0>:
   3614c:	2300      	movs	r3, #0
   3614e:	b510      	push	{r4, lr}
   36150:	0004      	movs	r4, r0
   36152:	6003      	str	r3, [r0, #0]
   36154:	6043      	str	r3, [r0, #4]
   36156:	6083      	str	r3, [r0, #8]
   36158:	8181      	strh	r1, [r0, #12]
   3615a:	6643      	str	r3, [r0, #100]	; 0x64
   3615c:	81c2      	strh	r2, [r0, #14]
   3615e:	6103      	str	r3, [r0, #16]
   36160:	6143      	str	r3, [r0, #20]
   36162:	6183      	str	r3, [r0, #24]
   36164:	0019      	movs	r1, r3
   36166:	2208      	movs	r2, #8
   36168:	305c      	adds	r0, #92	; 0x5c
   3616a:	f7ff fb60 	bl	3582e <memset>
   3616e:	4b05      	ldr	r3, [pc, #20]	; (36184 <std.isra.0+0x38>)
   36170:	6224      	str	r4, [r4, #32]
   36172:	6263      	str	r3, [r4, #36]	; 0x24
   36174:	4b04      	ldr	r3, [pc, #16]	; (36188 <std.isra.0+0x3c>)
   36176:	62a3      	str	r3, [r4, #40]	; 0x28
   36178:	4b04      	ldr	r3, [pc, #16]	; (3618c <std.isra.0+0x40>)
   3617a:	62e3      	str	r3, [r4, #44]	; 0x2c
   3617c:	4b04      	ldr	r3, [pc, #16]	; (36190 <std.isra.0+0x44>)
   3617e:	6323      	str	r3, [r4, #48]	; 0x30
   36180:	bd10      	pop	{r4, pc}
   36182:	46c0      	nop			; (mov r8, r8)
   36184:	000369e9 	.word	0x000369e9
   36188:	00036a11 	.word	0x00036a11
   3618c:	00036a49 	.word	0x00036a49
   36190:	00036a75 	.word	0x00036a75

00036194 <__sfmoreglue>:
   36194:	b570      	push	{r4, r5, r6, lr}
   36196:	2568      	movs	r5, #104	; 0x68
   36198:	1e4a      	subs	r2, r1, #1
   3619a:	4355      	muls	r5, r2
   3619c:	000e      	movs	r6, r1
   3619e:	0029      	movs	r1, r5
   361a0:	3174      	adds	r1, #116	; 0x74
   361a2:	f7ff fb97 	bl	358d4 <_malloc_r>
   361a6:	1e04      	subs	r4, r0, #0
   361a8:	d008      	beq.n	361bc <__sfmoreglue+0x28>
   361aa:	2100      	movs	r1, #0
   361ac:	002a      	movs	r2, r5
   361ae:	6001      	str	r1, [r0, #0]
   361b0:	6046      	str	r6, [r0, #4]
   361b2:	300c      	adds	r0, #12
   361b4:	60a0      	str	r0, [r4, #8]
   361b6:	3268      	adds	r2, #104	; 0x68
   361b8:	f7ff fb39 	bl	3582e <memset>
   361bc:	0020      	movs	r0, r4
   361be:	bd70      	pop	{r4, r5, r6, pc}

000361c0 <__sinit>:
   361c0:	6983      	ldr	r3, [r0, #24]
   361c2:	b513      	push	{r0, r1, r4, lr}
   361c4:	0004      	movs	r4, r0
   361c6:	2b00      	cmp	r3, #0
   361c8:	d128      	bne.n	3621c <__sinit+0x5c>
   361ca:	6483      	str	r3, [r0, #72]	; 0x48
   361cc:	64c3      	str	r3, [r0, #76]	; 0x4c
   361ce:	6503      	str	r3, [r0, #80]	; 0x50
   361d0:	4b13      	ldr	r3, [pc, #76]	; (36220 <__sinit+0x60>)
   361d2:	4a14      	ldr	r2, [pc, #80]	; (36224 <__sinit+0x64>)
   361d4:	681b      	ldr	r3, [r3, #0]
   361d6:	6282      	str	r2, [r0, #40]	; 0x28
   361d8:	9301      	str	r3, [sp, #4]
   361da:	4298      	cmp	r0, r3
   361dc:	d101      	bne.n	361e2 <__sinit+0x22>
   361de:	2301      	movs	r3, #1
   361e0:	6183      	str	r3, [r0, #24]
   361e2:	0020      	movs	r0, r4
   361e4:	f000 f820 	bl	36228 <__sfp>
   361e8:	6060      	str	r0, [r4, #4]
   361ea:	0020      	movs	r0, r4
   361ec:	f000 f81c 	bl	36228 <__sfp>
   361f0:	60a0      	str	r0, [r4, #8]
   361f2:	0020      	movs	r0, r4
   361f4:	f000 f818 	bl	36228 <__sfp>
   361f8:	2200      	movs	r2, #0
   361fa:	60e0      	str	r0, [r4, #12]
   361fc:	2104      	movs	r1, #4
   361fe:	6860      	ldr	r0, [r4, #4]
   36200:	f7ff ffa4 	bl	3614c <std.isra.0>
   36204:	2201      	movs	r2, #1
   36206:	2109      	movs	r1, #9
   36208:	68a0      	ldr	r0, [r4, #8]
   3620a:	f7ff ff9f 	bl	3614c <std.isra.0>
   3620e:	2202      	movs	r2, #2
   36210:	2112      	movs	r1, #18
   36212:	68e0      	ldr	r0, [r4, #12]
   36214:	f7ff ff9a 	bl	3614c <std.isra.0>
   36218:	2301      	movs	r3, #1
   3621a:	61a3      	str	r3, [r4, #24]
   3621c:	bd13      	pop	{r0, r1, r4, pc}
   3621e:	46c0      	nop			; (mov r8, r8)
   36220:	0003b294 	.word	0x0003b294
   36224:	0003613d 	.word	0x0003613d

00036228 <__sfp>:
   36228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3622a:	4b1e      	ldr	r3, [pc, #120]	; (362a4 <__sfp+0x7c>)
   3622c:	0007      	movs	r7, r0
   3622e:	681e      	ldr	r6, [r3, #0]
   36230:	69b3      	ldr	r3, [r6, #24]
   36232:	2b00      	cmp	r3, #0
   36234:	d102      	bne.n	3623c <__sfp+0x14>
   36236:	0030      	movs	r0, r6
   36238:	f7ff ffc2 	bl	361c0 <__sinit>
   3623c:	3648      	adds	r6, #72	; 0x48
   3623e:	68b4      	ldr	r4, [r6, #8]
   36240:	6873      	ldr	r3, [r6, #4]
   36242:	3b01      	subs	r3, #1
   36244:	d504      	bpl.n	36250 <__sfp+0x28>
   36246:	6833      	ldr	r3, [r6, #0]
   36248:	2b00      	cmp	r3, #0
   3624a:	d007      	beq.n	3625c <__sfp+0x34>
   3624c:	6836      	ldr	r6, [r6, #0]
   3624e:	e7f6      	b.n	3623e <__sfp+0x16>
   36250:	220c      	movs	r2, #12
   36252:	5ea5      	ldrsh	r5, [r4, r2]
   36254:	2d00      	cmp	r5, #0
   36256:	d00d      	beq.n	36274 <__sfp+0x4c>
   36258:	3468      	adds	r4, #104	; 0x68
   3625a:	e7f2      	b.n	36242 <__sfp+0x1a>
   3625c:	2104      	movs	r1, #4
   3625e:	0038      	movs	r0, r7
   36260:	f7ff ff98 	bl	36194 <__sfmoreglue>
   36264:	6030      	str	r0, [r6, #0]
   36266:	2800      	cmp	r0, #0
   36268:	d1f0      	bne.n	3624c <__sfp+0x24>
   3626a:	230c      	movs	r3, #12
   3626c:	0004      	movs	r4, r0
   3626e:	603b      	str	r3, [r7, #0]
   36270:	0020      	movs	r0, r4
   36272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   36274:	2301      	movs	r3, #1
   36276:	0020      	movs	r0, r4
   36278:	425b      	negs	r3, r3
   3627a:	81e3      	strh	r3, [r4, #14]
   3627c:	3302      	adds	r3, #2
   3627e:	81a3      	strh	r3, [r4, #12]
   36280:	6665      	str	r5, [r4, #100]	; 0x64
   36282:	6025      	str	r5, [r4, #0]
   36284:	60a5      	str	r5, [r4, #8]
   36286:	6065      	str	r5, [r4, #4]
   36288:	6125      	str	r5, [r4, #16]
   3628a:	6165      	str	r5, [r4, #20]
   3628c:	61a5      	str	r5, [r4, #24]
   3628e:	2208      	movs	r2, #8
   36290:	0029      	movs	r1, r5
   36292:	305c      	adds	r0, #92	; 0x5c
   36294:	f7ff facb 	bl	3582e <memset>
   36298:	6365      	str	r5, [r4, #52]	; 0x34
   3629a:	63a5      	str	r5, [r4, #56]	; 0x38
   3629c:	64a5      	str	r5, [r4, #72]	; 0x48
   3629e:	64e5      	str	r5, [r4, #76]	; 0x4c
   362a0:	e7e6      	b.n	36270 <__sfp+0x48>
   362a2:	46c0      	nop			; (mov r8, r8)
   362a4:	0003b294 	.word	0x0003b294

000362a8 <_fwalk_reent>:
   362a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   362aa:	0004      	movs	r4, r0
   362ac:	0007      	movs	r7, r0
   362ae:	2600      	movs	r6, #0
   362b0:	9101      	str	r1, [sp, #4]
   362b2:	3448      	adds	r4, #72	; 0x48
   362b4:	2c00      	cmp	r4, #0
   362b6:	d101      	bne.n	362bc <_fwalk_reent+0x14>
   362b8:	0030      	movs	r0, r6
   362ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   362bc:	6863      	ldr	r3, [r4, #4]
   362be:	68a5      	ldr	r5, [r4, #8]
   362c0:	9300      	str	r3, [sp, #0]
   362c2:	9b00      	ldr	r3, [sp, #0]
   362c4:	3b01      	subs	r3, #1
   362c6:	9300      	str	r3, [sp, #0]
   362c8:	d501      	bpl.n	362ce <_fwalk_reent+0x26>
   362ca:	6824      	ldr	r4, [r4, #0]
   362cc:	e7f2      	b.n	362b4 <_fwalk_reent+0xc>
   362ce:	89ab      	ldrh	r3, [r5, #12]
   362d0:	2b01      	cmp	r3, #1
   362d2:	d908      	bls.n	362e6 <_fwalk_reent+0x3e>
   362d4:	220e      	movs	r2, #14
   362d6:	5eab      	ldrsh	r3, [r5, r2]
   362d8:	3301      	adds	r3, #1
   362da:	d004      	beq.n	362e6 <_fwalk_reent+0x3e>
   362dc:	0029      	movs	r1, r5
   362de:	0038      	movs	r0, r7
   362e0:	9b01      	ldr	r3, [sp, #4]
   362e2:	4798      	blx	r3
   362e4:	4306      	orrs	r6, r0
   362e6:	3568      	adds	r5, #104	; 0x68
   362e8:	e7eb      	b.n	362c2 <_fwalk_reent+0x1a>

000362ea <__locale_ctype_ptr_l>:
   362ea:	30ec      	adds	r0, #236	; 0xec
   362ec:	6800      	ldr	r0, [r0, #0]
   362ee:	4770      	bx	lr

000362f0 <__locale_ctype_ptr>:
   362f0:	4b04      	ldr	r3, [pc, #16]	; (36304 <__locale_ctype_ptr+0x14>)
   362f2:	681b      	ldr	r3, [r3, #0]
   362f4:	6a1b      	ldr	r3, [r3, #32]
   362f6:	2b00      	cmp	r3, #0
   362f8:	d100      	bne.n	362fc <__locale_ctype_ptr+0xc>
   362fa:	4b03      	ldr	r3, [pc, #12]	; (36308 <__locale_ctype_ptr+0x18>)
   362fc:	33ec      	adds	r3, #236	; 0xec
   362fe:	6818      	ldr	r0, [r3, #0]
   36300:	4770      	bx	lr
   36302:	46c0      	nop			; (mov r8, r8)
   36304:	20000130 	.word	0x20000130
   36308:	20000194 	.word	0x20000194

0003630c <__swhatbuf_r>:
   3630c:	b570      	push	{r4, r5, r6, lr}
   3630e:	000e      	movs	r6, r1
   36310:	001d      	movs	r5, r3
   36312:	230e      	movs	r3, #14
   36314:	5ec9      	ldrsh	r1, [r1, r3]
   36316:	b090      	sub	sp, #64	; 0x40
   36318:	0014      	movs	r4, r2
   3631a:	2900      	cmp	r1, #0
   3631c:	da07      	bge.n	3632e <__swhatbuf_r+0x22>
   3631e:	2300      	movs	r3, #0
   36320:	602b      	str	r3, [r5, #0]
   36322:	89b3      	ldrh	r3, [r6, #12]
   36324:	061b      	lsls	r3, r3, #24
   36326:	d411      	bmi.n	3634c <__swhatbuf_r+0x40>
   36328:	2380      	movs	r3, #128	; 0x80
   3632a:	00db      	lsls	r3, r3, #3
   3632c:	e00f      	b.n	3634e <__swhatbuf_r+0x42>
   3632e:	aa01      	add	r2, sp, #4
   36330:	f000 fbe6 	bl	36b00 <_fstat_r>
   36334:	2800      	cmp	r0, #0
   36336:	dbf2      	blt.n	3631e <__swhatbuf_r+0x12>
   36338:	22f0      	movs	r2, #240	; 0xf0
   3633a:	9b02      	ldr	r3, [sp, #8]
   3633c:	0212      	lsls	r2, r2, #8
   3633e:	4013      	ands	r3, r2
   36340:	4a05      	ldr	r2, [pc, #20]	; (36358 <__swhatbuf_r+0x4c>)
   36342:	189b      	adds	r3, r3, r2
   36344:	425a      	negs	r2, r3
   36346:	4153      	adcs	r3, r2
   36348:	602b      	str	r3, [r5, #0]
   3634a:	e7ed      	b.n	36328 <__swhatbuf_r+0x1c>
   3634c:	2340      	movs	r3, #64	; 0x40
   3634e:	2000      	movs	r0, #0
   36350:	6023      	str	r3, [r4, #0]
   36352:	b010      	add	sp, #64	; 0x40
   36354:	bd70      	pop	{r4, r5, r6, pc}
   36356:	46c0      	nop			; (mov r8, r8)
   36358:	ffffe000 	.word	0xffffe000

0003635c <__smakebuf_r>:
   3635c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   3635e:	2602      	movs	r6, #2
   36360:	898b      	ldrh	r3, [r1, #12]
   36362:	0005      	movs	r5, r0
   36364:	000c      	movs	r4, r1
   36366:	4233      	tst	r3, r6
   36368:	d006      	beq.n	36378 <__smakebuf_r+0x1c>
   3636a:	0023      	movs	r3, r4
   3636c:	3347      	adds	r3, #71	; 0x47
   3636e:	6023      	str	r3, [r4, #0]
   36370:	6123      	str	r3, [r4, #16]
   36372:	2301      	movs	r3, #1
   36374:	6163      	str	r3, [r4, #20]
   36376:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   36378:	ab01      	add	r3, sp, #4
   3637a:	466a      	mov	r2, sp
   3637c:	f7ff ffc6 	bl	3630c <__swhatbuf_r>
   36380:	9900      	ldr	r1, [sp, #0]
   36382:	0007      	movs	r7, r0
   36384:	0028      	movs	r0, r5
   36386:	f7ff faa5 	bl	358d4 <_malloc_r>
   3638a:	2800      	cmp	r0, #0
   3638c:	d108      	bne.n	363a0 <__smakebuf_r+0x44>
   3638e:	220c      	movs	r2, #12
   36390:	5ea3      	ldrsh	r3, [r4, r2]
   36392:	059a      	lsls	r2, r3, #22
   36394:	d4ef      	bmi.n	36376 <__smakebuf_r+0x1a>
   36396:	2203      	movs	r2, #3
   36398:	4393      	bics	r3, r2
   3639a:	431e      	orrs	r6, r3
   3639c:	81a6      	strh	r6, [r4, #12]
   3639e:	e7e4      	b.n	3636a <__smakebuf_r+0xe>
   363a0:	4b0f      	ldr	r3, [pc, #60]	; (363e0 <__smakebuf_r+0x84>)
   363a2:	62ab      	str	r3, [r5, #40]	; 0x28
   363a4:	2380      	movs	r3, #128	; 0x80
   363a6:	89a2      	ldrh	r2, [r4, #12]
   363a8:	6020      	str	r0, [r4, #0]
   363aa:	4313      	orrs	r3, r2
   363ac:	81a3      	strh	r3, [r4, #12]
   363ae:	9b00      	ldr	r3, [sp, #0]
   363b0:	6120      	str	r0, [r4, #16]
   363b2:	6163      	str	r3, [r4, #20]
   363b4:	9b01      	ldr	r3, [sp, #4]
   363b6:	2b00      	cmp	r3, #0
   363b8:	d00d      	beq.n	363d6 <__smakebuf_r+0x7a>
   363ba:	230e      	movs	r3, #14
   363bc:	5ee1      	ldrsh	r1, [r4, r3]
   363be:	0028      	movs	r0, r5
   363c0:	f000 fbb0 	bl	36b24 <_isatty_r>
   363c4:	2800      	cmp	r0, #0
   363c6:	d006      	beq.n	363d6 <__smakebuf_r+0x7a>
   363c8:	2203      	movs	r2, #3
   363ca:	89a3      	ldrh	r3, [r4, #12]
   363cc:	4393      	bics	r3, r2
   363ce:	001a      	movs	r2, r3
   363d0:	2301      	movs	r3, #1
   363d2:	4313      	orrs	r3, r2
   363d4:	81a3      	strh	r3, [r4, #12]
   363d6:	89a0      	ldrh	r0, [r4, #12]
   363d8:	4338      	orrs	r0, r7
   363da:	81a0      	strh	r0, [r4, #12]
   363dc:	e7cb      	b.n	36376 <__smakebuf_r+0x1a>
   363de:	46c0      	nop			; (mov r8, r8)
   363e0:	0003613d 	.word	0x0003613d

000363e4 <__ascii_mbtowc>:
   363e4:	b082      	sub	sp, #8
   363e6:	2900      	cmp	r1, #0
   363e8:	d100      	bne.n	363ec <__ascii_mbtowc+0x8>
   363ea:	a901      	add	r1, sp, #4
   363ec:	1e10      	subs	r0, r2, #0
   363ee:	d006      	beq.n	363fe <__ascii_mbtowc+0x1a>
   363f0:	2b00      	cmp	r3, #0
   363f2:	d006      	beq.n	36402 <__ascii_mbtowc+0x1e>
   363f4:	7813      	ldrb	r3, [r2, #0]
   363f6:	600b      	str	r3, [r1, #0]
   363f8:	7810      	ldrb	r0, [r2, #0]
   363fa:	1e43      	subs	r3, r0, #1
   363fc:	4198      	sbcs	r0, r3
   363fe:	b002      	add	sp, #8
   36400:	4770      	bx	lr
   36402:	2002      	movs	r0, #2
   36404:	4240      	negs	r0, r0
   36406:	e7fa      	b.n	363fe <__ascii_mbtowc+0x1a>

00036408 <__malloc_lock>:
   36408:	4770      	bx	lr

0003640a <__malloc_unlock>:
   3640a:	4770      	bx	lr

0003640c <__ssputs_r>:
   3640c:	b5f0      	push	{r4, r5, r6, r7, lr}
   3640e:	688e      	ldr	r6, [r1, #8]
   36410:	b085      	sub	sp, #20
   36412:	0007      	movs	r7, r0
   36414:	000c      	movs	r4, r1
   36416:	9203      	str	r2, [sp, #12]
   36418:	9301      	str	r3, [sp, #4]
   3641a:	429e      	cmp	r6, r3
   3641c:	d839      	bhi.n	36492 <__ssputs_r+0x86>
   3641e:	2390      	movs	r3, #144	; 0x90
   36420:	898a      	ldrh	r2, [r1, #12]
   36422:	00db      	lsls	r3, r3, #3
   36424:	421a      	tst	r2, r3
   36426:	d034      	beq.n	36492 <__ssputs_r+0x86>
   36428:	2503      	movs	r5, #3
   3642a:	6909      	ldr	r1, [r1, #16]
   3642c:	6823      	ldr	r3, [r4, #0]
   3642e:	1a5b      	subs	r3, r3, r1
   36430:	9302      	str	r3, [sp, #8]
   36432:	6963      	ldr	r3, [r4, #20]
   36434:	9802      	ldr	r0, [sp, #8]
   36436:	435d      	muls	r5, r3
   36438:	0feb      	lsrs	r3, r5, #31
   3643a:	195d      	adds	r5, r3, r5
   3643c:	9b01      	ldr	r3, [sp, #4]
   3643e:	106d      	asrs	r5, r5, #1
   36440:	3301      	adds	r3, #1
   36442:	181b      	adds	r3, r3, r0
   36444:	42ab      	cmp	r3, r5
   36446:	d900      	bls.n	3644a <__ssputs_r+0x3e>
   36448:	001d      	movs	r5, r3
   3644a:	0553      	lsls	r3, r2, #21
   3644c:	d532      	bpl.n	364b4 <__ssputs_r+0xa8>
   3644e:	0029      	movs	r1, r5
   36450:	0038      	movs	r0, r7
   36452:	f7ff fa3f 	bl	358d4 <_malloc_r>
   36456:	1e06      	subs	r6, r0, #0
   36458:	d109      	bne.n	3646e <__ssputs_r+0x62>
   3645a:	230c      	movs	r3, #12
   3645c:	603b      	str	r3, [r7, #0]
   3645e:	2340      	movs	r3, #64	; 0x40
   36460:	2001      	movs	r0, #1
   36462:	89a2      	ldrh	r2, [r4, #12]
   36464:	4240      	negs	r0, r0
   36466:	4313      	orrs	r3, r2
   36468:	81a3      	strh	r3, [r4, #12]
   3646a:	b005      	add	sp, #20
   3646c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   3646e:	9a02      	ldr	r2, [sp, #8]
   36470:	6921      	ldr	r1, [r4, #16]
   36472:	f7ff f9c1 	bl	357f8 <memcpy>
   36476:	89a3      	ldrh	r3, [r4, #12]
   36478:	4a14      	ldr	r2, [pc, #80]	; (364cc <__ssputs_r+0xc0>)
   3647a:	401a      	ands	r2, r3
   3647c:	2380      	movs	r3, #128	; 0x80
   3647e:	4313      	orrs	r3, r2
   36480:	81a3      	strh	r3, [r4, #12]
   36482:	9b02      	ldr	r3, [sp, #8]
   36484:	6126      	str	r6, [r4, #16]
   36486:	18f6      	adds	r6, r6, r3
   36488:	6026      	str	r6, [r4, #0]
   3648a:	6165      	str	r5, [r4, #20]
   3648c:	9e01      	ldr	r6, [sp, #4]
   3648e:	1aed      	subs	r5, r5, r3
   36490:	60a5      	str	r5, [r4, #8]
   36492:	9b01      	ldr	r3, [sp, #4]
   36494:	42b3      	cmp	r3, r6
   36496:	d200      	bcs.n	3649a <__ssputs_r+0x8e>
   36498:	001e      	movs	r6, r3
   3649a:	0032      	movs	r2, r6
   3649c:	9903      	ldr	r1, [sp, #12]
   3649e:	6820      	ldr	r0, [r4, #0]
   364a0:	f7ff f9b3 	bl	3580a <memmove>
   364a4:	68a3      	ldr	r3, [r4, #8]
   364a6:	2000      	movs	r0, #0
   364a8:	1b9b      	subs	r3, r3, r6
   364aa:	60a3      	str	r3, [r4, #8]
   364ac:	6823      	ldr	r3, [r4, #0]
   364ae:	199e      	adds	r6, r3, r6
   364b0:	6026      	str	r6, [r4, #0]
   364b2:	e7da      	b.n	3646a <__ssputs_r+0x5e>
   364b4:	002a      	movs	r2, r5
   364b6:	0038      	movs	r0, r7
   364b8:	f000 fb65 	bl	36b86 <_realloc_r>
   364bc:	1e06      	subs	r6, r0, #0
   364be:	d1e0      	bne.n	36482 <__ssputs_r+0x76>
   364c0:	6921      	ldr	r1, [r4, #16]
   364c2:	0038      	movs	r0, r7
   364c4:	f7ff f9bc 	bl	35840 <_free_r>
   364c8:	e7c7      	b.n	3645a <__ssputs_r+0x4e>
   364ca:	46c0      	nop			; (mov r8, r8)
   364cc:	fffffb7f 	.word	0xfffffb7f

000364d0 <_svfiprintf_r>:
   364d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   364d2:	b09f      	sub	sp, #124	; 0x7c
   364d4:	9002      	str	r0, [sp, #8]
   364d6:	9305      	str	r3, [sp, #20]
   364d8:	898b      	ldrh	r3, [r1, #12]
   364da:	000f      	movs	r7, r1
   364dc:	0016      	movs	r6, r2
   364de:	061b      	lsls	r3, r3, #24
   364e0:	d511      	bpl.n	36506 <_svfiprintf_r+0x36>
   364e2:	690b      	ldr	r3, [r1, #16]
   364e4:	2b00      	cmp	r3, #0
   364e6:	d10e      	bne.n	36506 <_svfiprintf_r+0x36>
   364e8:	2140      	movs	r1, #64	; 0x40
   364ea:	f7ff f9f3 	bl	358d4 <_malloc_r>
   364ee:	6038      	str	r0, [r7, #0]
   364f0:	6138      	str	r0, [r7, #16]
   364f2:	2800      	cmp	r0, #0
   364f4:	d105      	bne.n	36502 <_svfiprintf_r+0x32>
   364f6:	230c      	movs	r3, #12
   364f8:	9a02      	ldr	r2, [sp, #8]
   364fa:	3801      	subs	r0, #1
   364fc:	6013      	str	r3, [r2, #0]
   364fe:	b01f      	add	sp, #124	; 0x7c
   36500:	bdf0      	pop	{r4, r5, r6, r7, pc}
   36502:	2340      	movs	r3, #64	; 0x40
   36504:	617b      	str	r3, [r7, #20]
   36506:	2300      	movs	r3, #0
   36508:	ad06      	add	r5, sp, #24
   3650a:	616b      	str	r3, [r5, #20]
   3650c:	3320      	adds	r3, #32
   3650e:	766b      	strb	r3, [r5, #25]
   36510:	3310      	adds	r3, #16
   36512:	76ab      	strb	r3, [r5, #26]
   36514:	0034      	movs	r4, r6
   36516:	7823      	ldrb	r3, [r4, #0]
   36518:	2b00      	cmp	r3, #0
   3651a:	d147      	bne.n	365ac <_svfiprintf_r+0xdc>
   3651c:	1ba3      	subs	r3, r4, r6
   3651e:	9304      	str	r3, [sp, #16]
   36520:	d00d      	beq.n	3653e <_svfiprintf_r+0x6e>
   36522:	1ba3      	subs	r3, r4, r6
   36524:	0032      	movs	r2, r6
   36526:	0039      	movs	r1, r7
   36528:	9802      	ldr	r0, [sp, #8]
   3652a:	f7ff ff6f 	bl	3640c <__ssputs_r>
   3652e:	1c43      	adds	r3, r0, #1
   36530:	d100      	bne.n	36534 <_svfiprintf_r+0x64>
   36532:	e0b5      	b.n	366a0 <_svfiprintf_r+0x1d0>
   36534:	696a      	ldr	r2, [r5, #20]
   36536:	9b04      	ldr	r3, [sp, #16]
   36538:	4694      	mov	ip, r2
   3653a:	4463      	add	r3, ip
   3653c:	616b      	str	r3, [r5, #20]
   3653e:	7823      	ldrb	r3, [r4, #0]
   36540:	2b00      	cmp	r3, #0
   36542:	d100      	bne.n	36546 <_svfiprintf_r+0x76>
   36544:	e0ac      	b.n	366a0 <_svfiprintf_r+0x1d0>
   36546:	2201      	movs	r2, #1
   36548:	2300      	movs	r3, #0
   3654a:	4252      	negs	r2, r2
   3654c:	606a      	str	r2, [r5, #4]
   3654e:	a902      	add	r1, sp, #8
   36550:	3254      	adds	r2, #84	; 0x54
   36552:	1852      	adds	r2, r2, r1
   36554:	3401      	adds	r4, #1
   36556:	602b      	str	r3, [r5, #0]
   36558:	60eb      	str	r3, [r5, #12]
   3655a:	60ab      	str	r3, [r5, #8]
   3655c:	7013      	strb	r3, [r2, #0]
   3655e:	65ab      	str	r3, [r5, #88]	; 0x58
   36560:	4e58      	ldr	r6, [pc, #352]	; (366c4 <_svfiprintf_r+0x1f4>)
   36562:	2205      	movs	r2, #5
   36564:	7821      	ldrb	r1, [r4, #0]
   36566:	0030      	movs	r0, r6
   36568:	f000 fb02 	bl	36b70 <memchr>
   3656c:	1c62      	adds	r2, r4, #1
   3656e:	2800      	cmp	r0, #0
   36570:	d120      	bne.n	365b4 <_svfiprintf_r+0xe4>
   36572:	6829      	ldr	r1, [r5, #0]
   36574:	06cb      	lsls	r3, r1, #27
   36576:	d504      	bpl.n	36582 <_svfiprintf_r+0xb2>
   36578:	2353      	movs	r3, #83	; 0x53
   3657a:	ae02      	add	r6, sp, #8
   3657c:	3020      	adds	r0, #32
   3657e:	199b      	adds	r3, r3, r6
   36580:	7018      	strb	r0, [r3, #0]
   36582:	070b      	lsls	r3, r1, #28
   36584:	d504      	bpl.n	36590 <_svfiprintf_r+0xc0>
   36586:	2353      	movs	r3, #83	; 0x53
   36588:	202b      	movs	r0, #43	; 0x2b
   3658a:	ae02      	add	r6, sp, #8
   3658c:	199b      	adds	r3, r3, r6
   3658e:	7018      	strb	r0, [r3, #0]
   36590:	7823      	ldrb	r3, [r4, #0]
   36592:	2b2a      	cmp	r3, #42	; 0x2a
   36594:	d016      	beq.n	365c4 <_svfiprintf_r+0xf4>
   36596:	2000      	movs	r0, #0
   36598:	210a      	movs	r1, #10
   3659a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3659c:	7822      	ldrb	r2, [r4, #0]
   3659e:	3a30      	subs	r2, #48	; 0x30
   365a0:	2a09      	cmp	r2, #9
   365a2:	d955      	bls.n	36650 <_svfiprintf_r+0x180>
   365a4:	2800      	cmp	r0, #0
   365a6:	d015      	beq.n	365d4 <_svfiprintf_r+0x104>
   365a8:	9309      	str	r3, [sp, #36]	; 0x24
   365aa:	e013      	b.n	365d4 <_svfiprintf_r+0x104>
   365ac:	2b25      	cmp	r3, #37	; 0x25
   365ae:	d0b5      	beq.n	3651c <_svfiprintf_r+0x4c>
   365b0:	3401      	adds	r4, #1
   365b2:	e7b0      	b.n	36516 <_svfiprintf_r+0x46>
   365b4:	2301      	movs	r3, #1
   365b6:	1b80      	subs	r0, r0, r6
   365b8:	4083      	lsls	r3, r0
   365ba:	6829      	ldr	r1, [r5, #0]
   365bc:	0014      	movs	r4, r2
   365be:	430b      	orrs	r3, r1
   365c0:	602b      	str	r3, [r5, #0]
   365c2:	e7cd      	b.n	36560 <_svfiprintf_r+0x90>
   365c4:	9b05      	ldr	r3, [sp, #20]
   365c6:	1d18      	adds	r0, r3, #4
   365c8:	681b      	ldr	r3, [r3, #0]
   365ca:	9005      	str	r0, [sp, #20]
   365cc:	2b00      	cmp	r3, #0
   365ce:	db39      	blt.n	36644 <_svfiprintf_r+0x174>
   365d0:	9309      	str	r3, [sp, #36]	; 0x24
   365d2:	0014      	movs	r4, r2
   365d4:	7823      	ldrb	r3, [r4, #0]
   365d6:	2b2e      	cmp	r3, #46	; 0x2e
   365d8:	d10b      	bne.n	365f2 <_svfiprintf_r+0x122>
   365da:	7863      	ldrb	r3, [r4, #1]
   365dc:	1c62      	adds	r2, r4, #1
   365de:	2b2a      	cmp	r3, #42	; 0x2a
   365e0:	d13e      	bne.n	36660 <_svfiprintf_r+0x190>
   365e2:	9b05      	ldr	r3, [sp, #20]
   365e4:	3402      	adds	r4, #2
   365e6:	1d1a      	adds	r2, r3, #4
   365e8:	681b      	ldr	r3, [r3, #0]
   365ea:	9205      	str	r2, [sp, #20]
   365ec:	2b00      	cmp	r3, #0
   365ee:	db34      	blt.n	3665a <_svfiprintf_r+0x18a>
   365f0:	9307      	str	r3, [sp, #28]
   365f2:	4e35      	ldr	r6, [pc, #212]	; (366c8 <_svfiprintf_r+0x1f8>)
   365f4:	7821      	ldrb	r1, [r4, #0]
   365f6:	2203      	movs	r2, #3
   365f8:	0030      	movs	r0, r6
   365fa:	f000 fab9 	bl	36b70 <memchr>
   365fe:	2800      	cmp	r0, #0
   36600:	d006      	beq.n	36610 <_svfiprintf_r+0x140>
   36602:	2340      	movs	r3, #64	; 0x40
   36604:	1b80      	subs	r0, r0, r6
   36606:	4083      	lsls	r3, r0
   36608:	682a      	ldr	r2, [r5, #0]
   3660a:	3401      	adds	r4, #1
   3660c:	4313      	orrs	r3, r2
   3660e:	602b      	str	r3, [r5, #0]
   36610:	7821      	ldrb	r1, [r4, #0]
   36612:	2206      	movs	r2, #6
   36614:	482d      	ldr	r0, [pc, #180]	; (366cc <_svfiprintf_r+0x1fc>)
   36616:	1c66      	adds	r6, r4, #1
   36618:	7629      	strb	r1, [r5, #24]
   3661a:	f000 faa9 	bl	36b70 <memchr>
   3661e:	2800      	cmp	r0, #0
   36620:	d046      	beq.n	366b0 <_svfiprintf_r+0x1e0>
   36622:	4b2b      	ldr	r3, [pc, #172]	; (366d0 <_svfiprintf_r+0x200>)
   36624:	2b00      	cmp	r3, #0
   36626:	d12f      	bne.n	36688 <_svfiprintf_r+0x1b8>
   36628:	6829      	ldr	r1, [r5, #0]
   3662a:	9b05      	ldr	r3, [sp, #20]
   3662c:	2207      	movs	r2, #7
   3662e:	05c9      	lsls	r1, r1, #23
   36630:	d528      	bpl.n	36684 <_svfiprintf_r+0x1b4>
   36632:	189b      	adds	r3, r3, r2
   36634:	4393      	bics	r3, r2
   36636:	3308      	adds	r3, #8
   36638:	9305      	str	r3, [sp, #20]
   3663a:	696b      	ldr	r3, [r5, #20]
   3663c:	9a03      	ldr	r2, [sp, #12]
   3663e:	189b      	adds	r3, r3, r2
   36640:	616b      	str	r3, [r5, #20]
   36642:	e767      	b.n	36514 <_svfiprintf_r+0x44>
   36644:	425b      	negs	r3, r3
   36646:	60eb      	str	r3, [r5, #12]
   36648:	2302      	movs	r3, #2
   3664a:	430b      	orrs	r3, r1
   3664c:	602b      	str	r3, [r5, #0]
   3664e:	e7c0      	b.n	365d2 <_svfiprintf_r+0x102>
   36650:	434b      	muls	r3, r1
   36652:	3401      	adds	r4, #1
   36654:	189b      	adds	r3, r3, r2
   36656:	2001      	movs	r0, #1
   36658:	e7a0      	b.n	3659c <_svfiprintf_r+0xcc>
   3665a:	2301      	movs	r3, #1
   3665c:	425b      	negs	r3, r3
   3665e:	e7c7      	b.n	365f0 <_svfiprintf_r+0x120>
   36660:	2300      	movs	r3, #0
   36662:	0014      	movs	r4, r2
   36664:	200a      	movs	r0, #10
   36666:	001a      	movs	r2, r3
   36668:	606b      	str	r3, [r5, #4]
   3666a:	7821      	ldrb	r1, [r4, #0]
   3666c:	3930      	subs	r1, #48	; 0x30
   3666e:	2909      	cmp	r1, #9
   36670:	d903      	bls.n	3667a <_svfiprintf_r+0x1aa>
   36672:	2b00      	cmp	r3, #0
   36674:	d0bd      	beq.n	365f2 <_svfiprintf_r+0x122>
   36676:	9207      	str	r2, [sp, #28]
   36678:	e7bb      	b.n	365f2 <_svfiprintf_r+0x122>
   3667a:	4342      	muls	r2, r0
   3667c:	3401      	adds	r4, #1
   3667e:	1852      	adds	r2, r2, r1
   36680:	2301      	movs	r3, #1
   36682:	e7f2      	b.n	3666a <_svfiprintf_r+0x19a>
   36684:	3307      	adds	r3, #7
   36686:	e7d5      	b.n	36634 <_svfiprintf_r+0x164>
   36688:	ab05      	add	r3, sp, #20
   3668a:	9300      	str	r3, [sp, #0]
   3668c:	003a      	movs	r2, r7
   3668e:	4b11      	ldr	r3, [pc, #68]	; (366d4 <_svfiprintf_r+0x204>)
   36690:	0029      	movs	r1, r5
   36692:	9802      	ldr	r0, [sp, #8]
   36694:	e000      	b.n	36698 <_svfiprintf_r+0x1c8>
   36696:	bf00      	nop
   36698:	9003      	str	r0, [sp, #12]
   3669a:	9b03      	ldr	r3, [sp, #12]
   3669c:	3301      	adds	r3, #1
   3669e:	d1cc      	bne.n	3663a <_svfiprintf_r+0x16a>
   366a0:	89bb      	ldrh	r3, [r7, #12]
   366a2:	980b      	ldr	r0, [sp, #44]	; 0x2c
   366a4:	065b      	lsls	r3, r3, #25
   366a6:	d400      	bmi.n	366aa <_svfiprintf_r+0x1da>
   366a8:	e729      	b.n	364fe <_svfiprintf_r+0x2e>
   366aa:	2001      	movs	r0, #1
   366ac:	4240      	negs	r0, r0
   366ae:	e726      	b.n	364fe <_svfiprintf_r+0x2e>
   366b0:	ab05      	add	r3, sp, #20
   366b2:	9300      	str	r3, [sp, #0]
   366b4:	003a      	movs	r2, r7
   366b6:	4b07      	ldr	r3, [pc, #28]	; (366d4 <_svfiprintf_r+0x204>)
   366b8:	0029      	movs	r1, r5
   366ba:	9802      	ldr	r0, [sp, #8]
   366bc:	f000 f87a 	bl	367b4 <_printf_i>
   366c0:	e7ea      	b.n	36698 <_svfiprintf_r+0x1c8>
   366c2:	46c0      	nop			; (mov r8, r8)
   366c4:	0003b302 	.word	0x0003b302
   366c8:	0003b308 	.word	0x0003b308
   366cc:	0003b30c 	.word	0x0003b30c
   366d0:	00000000 	.word	0x00000000
   366d4:	0003640d 	.word	0x0003640d

000366d8 <_printf_common>:
   366d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   366da:	0015      	movs	r5, r2
   366dc:	9301      	str	r3, [sp, #4]
   366de:	688a      	ldr	r2, [r1, #8]
   366e0:	690b      	ldr	r3, [r1, #16]
   366e2:	9000      	str	r0, [sp, #0]
   366e4:	000c      	movs	r4, r1
   366e6:	4293      	cmp	r3, r2
   366e8:	da00      	bge.n	366ec <_printf_common+0x14>
   366ea:	0013      	movs	r3, r2
   366ec:	0022      	movs	r2, r4
   366ee:	602b      	str	r3, [r5, #0]
   366f0:	3243      	adds	r2, #67	; 0x43
   366f2:	7812      	ldrb	r2, [r2, #0]
   366f4:	2a00      	cmp	r2, #0
   366f6:	d001      	beq.n	366fc <_printf_common+0x24>
   366f8:	3301      	adds	r3, #1
   366fa:	602b      	str	r3, [r5, #0]
   366fc:	6823      	ldr	r3, [r4, #0]
   366fe:	069b      	lsls	r3, r3, #26
   36700:	d502      	bpl.n	36708 <_printf_common+0x30>
   36702:	682b      	ldr	r3, [r5, #0]
   36704:	3302      	adds	r3, #2
   36706:	602b      	str	r3, [r5, #0]
   36708:	2706      	movs	r7, #6
   3670a:	6823      	ldr	r3, [r4, #0]
   3670c:	401f      	ands	r7, r3
   3670e:	d027      	beq.n	36760 <_printf_common+0x88>
   36710:	0023      	movs	r3, r4
   36712:	3343      	adds	r3, #67	; 0x43
   36714:	781b      	ldrb	r3, [r3, #0]
   36716:	1e5a      	subs	r2, r3, #1
   36718:	4193      	sbcs	r3, r2
   3671a:	6822      	ldr	r2, [r4, #0]
   3671c:	0692      	lsls	r2, r2, #26
   3671e:	d430      	bmi.n	36782 <_printf_common+0xaa>
   36720:	0022      	movs	r2, r4
   36722:	9901      	ldr	r1, [sp, #4]
   36724:	3243      	adds	r2, #67	; 0x43
   36726:	9800      	ldr	r0, [sp, #0]
   36728:	9e08      	ldr	r6, [sp, #32]
   3672a:	47b0      	blx	r6
   3672c:	1c43      	adds	r3, r0, #1
   3672e:	d025      	beq.n	3677c <_printf_common+0xa4>
   36730:	2306      	movs	r3, #6
   36732:	6820      	ldr	r0, [r4, #0]
   36734:	682a      	ldr	r2, [r5, #0]
   36736:	68e1      	ldr	r1, [r4, #12]
   36738:	4003      	ands	r3, r0
   3673a:	2500      	movs	r5, #0
   3673c:	2b04      	cmp	r3, #4
   3673e:	d103      	bne.n	36748 <_printf_common+0x70>
   36740:	1a8d      	subs	r5, r1, r2
   36742:	43eb      	mvns	r3, r5
   36744:	17db      	asrs	r3, r3, #31
   36746:	401d      	ands	r5, r3
   36748:	68a3      	ldr	r3, [r4, #8]
   3674a:	6922      	ldr	r2, [r4, #16]
   3674c:	4293      	cmp	r3, r2
   3674e:	dd01      	ble.n	36754 <_printf_common+0x7c>
   36750:	1a9b      	subs	r3, r3, r2
   36752:	18ed      	adds	r5, r5, r3
   36754:	2700      	movs	r7, #0
   36756:	42bd      	cmp	r5, r7
   36758:	d120      	bne.n	3679c <_printf_common+0xc4>
   3675a:	2000      	movs	r0, #0
   3675c:	e010      	b.n	36780 <_printf_common+0xa8>
   3675e:	3701      	adds	r7, #1
   36760:	68e3      	ldr	r3, [r4, #12]
   36762:	682a      	ldr	r2, [r5, #0]
   36764:	1a9b      	subs	r3, r3, r2
   36766:	429f      	cmp	r7, r3
   36768:	dad2      	bge.n	36710 <_printf_common+0x38>
   3676a:	0022      	movs	r2, r4
   3676c:	2301      	movs	r3, #1
   3676e:	3219      	adds	r2, #25
   36770:	9901      	ldr	r1, [sp, #4]
   36772:	9800      	ldr	r0, [sp, #0]
   36774:	9e08      	ldr	r6, [sp, #32]
   36776:	47b0      	blx	r6
   36778:	1c43      	adds	r3, r0, #1
   3677a:	d1f0      	bne.n	3675e <_printf_common+0x86>
   3677c:	2001      	movs	r0, #1
   3677e:	4240      	negs	r0, r0
   36780:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   36782:	2030      	movs	r0, #48	; 0x30
   36784:	18e1      	adds	r1, r4, r3
   36786:	3143      	adds	r1, #67	; 0x43
   36788:	7008      	strb	r0, [r1, #0]
   3678a:	0021      	movs	r1, r4
   3678c:	1c5a      	adds	r2, r3, #1
   3678e:	3145      	adds	r1, #69	; 0x45
   36790:	7809      	ldrb	r1, [r1, #0]
   36792:	18a2      	adds	r2, r4, r2
   36794:	3243      	adds	r2, #67	; 0x43
   36796:	3302      	adds	r3, #2
   36798:	7011      	strb	r1, [r2, #0]
   3679a:	e7c1      	b.n	36720 <_printf_common+0x48>
   3679c:	0022      	movs	r2, r4
   3679e:	2301      	movs	r3, #1
   367a0:	321a      	adds	r2, #26
   367a2:	9901      	ldr	r1, [sp, #4]
   367a4:	9800      	ldr	r0, [sp, #0]
   367a6:	9e08      	ldr	r6, [sp, #32]
   367a8:	47b0      	blx	r6
   367aa:	1c43      	adds	r3, r0, #1
   367ac:	d0e6      	beq.n	3677c <_printf_common+0xa4>
   367ae:	3701      	adds	r7, #1
   367b0:	e7d1      	b.n	36756 <_printf_common+0x7e>
	...

000367b4 <_printf_i>:
   367b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   367b6:	b08b      	sub	sp, #44	; 0x2c
   367b8:	9206      	str	r2, [sp, #24]
   367ba:	000a      	movs	r2, r1
   367bc:	3243      	adds	r2, #67	; 0x43
   367be:	9307      	str	r3, [sp, #28]
   367c0:	9005      	str	r0, [sp, #20]
   367c2:	9204      	str	r2, [sp, #16]
   367c4:	7e0a      	ldrb	r2, [r1, #24]
   367c6:	000c      	movs	r4, r1
   367c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   367ca:	2a6e      	cmp	r2, #110	; 0x6e
   367cc:	d100      	bne.n	367d0 <_printf_i+0x1c>
   367ce:	e08f      	b.n	368f0 <_printf_i+0x13c>
   367d0:	d817      	bhi.n	36802 <_printf_i+0x4e>
   367d2:	2a63      	cmp	r2, #99	; 0x63
   367d4:	d02c      	beq.n	36830 <_printf_i+0x7c>
   367d6:	d808      	bhi.n	367ea <_printf_i+0x36>
   367d8:	2a00      	cmp	r2, #0
   367da:	d100      	bne.n	367de <_printf_i+0x2a>
   367dc:	e099      	b.n	36912 <_printf_i+0x15e>
   367de:	2a58      	cmp	r2, #88	; 0x58
   367e0:	d054      	beq.n	3688c <_printf_i+0xd8>
   367e2:	0026      	movs	r6, r4
   367e4:	3642      	adds	r6, #66	; 0x42
   367e6:	7032      	strb	r2, [r6, #0]
   367e8:	e029      	b.n	3683e <_printf_i+0x8a>
   367ea:	2a64      	cmp	r2, #100	; 0x64
   367ec:	d001      	beq.n	367f2 <_printf_i+0x3e>
   367ee:	2a69      	cmp	r2, #105	; 0x69
   367f0:	d1f7      	bne.n	367e2 <_printf_i+0x2e>
   367f2:	6821      	ldr	r1, [r4, #0]
   367f4:	681a      	ldr	r2, [r3, #0]
   367f6:	0608      	lsls	r0, r1, #24
   367f8:	d523      	bpl.n	36842 <_printf_i+0x8e>
   367fa:	1d11      	adds	r1, r2, #4
   367fc:	6019      	str	r1, [r3, #0]
   367fe:	6815      	ldr	r5, [r2, #0]
   36800:	e025      	b.n	3684e <_printf_i+0x9a>
   36802:	2a73      	cmp	r2, #115	; 0x73
   36804:	d100      	bne.n	36808 <_printf_i+0x54>
   36806:	e088      	b.n	3691a <_printf_i+0x166>
   36808:	d808      	bhi.n	3681c <_printf_i+0x68>
   3680a:	2a6f      	cmp	r2, #111	; 0x6f
   3680c:	d029      	beq.n	36862 <_printf_i+0xae>
   3680e:	2a70      	cmp	r2, #112	; 0x70
   36810:	d1e7      	bne.n	367e2 <_printf_i+0x2e>
   36812:	2220      	movs	r2, #32
   36814:	6809      	ldr	r1, [r1, #0]
   36816:	430a      	orrs	r2, r1
   36818:	6022      	str	r2, [r4, #0]
   3681a:	e003      	b.n	36824 <_printf_i+0x70>
   3681c:	2a75      	cmp	r2, #117	; 0x75
   3681e:	d020      	beq.n	36862 <_printf_i+0xae>
   36820:	2a78      	cmp	r2, #120	; 0x78
   36822:	d1de      	bne.n	367e2 <_printf_i+0x2e>
   36824:	0022      	movs	r2, r4
   36826:	2178      	movs	r1, #120	; 0x78
   36828:	3245      	adds	r2, #69	; 0x45
   3682a:	7011      	strb	r1, [r2, #0]
   3682c:	4a6c      	ldr	r2, [pc, #432]	; (369e0 <_printf_i+0x22c>)
   3682e:	e030      	b.n	36892 <_printf_i+0xde>
   36830:	000e      	movs	r6, r1
   36832:	681a      	ldr	r2, [r3, #0]
   36834:	3642      	adds	r6, #66	; 0x42
   36836:	1d11      	adds	r1, r2, #4
   36838:	6019      	str	r1, [r3, #0]
   3683a:	6813      	ldr	r3, [r2, #0]
   3683c:	7033      	strb	r3, [r6, #0]
   3683e:	2301      	movs	r3, #1
   36840:	e079      	b.n	36936 <_printf_i+0x182>
   36842:	0649      	lsls	r1, r1, #25
   36844:	d5d9      	bpl.n	367fa <_printf_i+0x46>
   36846:	1d11      	adds	r1, r2, #4
   36848:	6019      	str	r1, [r3, #0]
   3684a:	2300      	movs	r3, #0
   3684c:	5ed5      	ldrsh	r5, [r2, r3]
   3684e:	2d00      	cmp	r5, #0
   36850:	da03      	bge.n	3685a <_printf_i+0xa6>
   36852:	232d      	movs	r3, #45	; 0x2d
   36854:	9a04      	ldr	r2, [sp, #16]
   36856:	426d      	negs	r5, r5
   36858:	7013      	strb	r3, [r2, #0]
   3685a:	4b62      	ldr	r3, [pc, #392]	; (369e4 <_printf_i+0x230>)
   3685c:	270a      	movs	r7, #10
   3685e:	9303      	str	r3, [sp, #12]
   36860:	e02f      	b.n	368c2 <_printf_i+0x10e>
   36862:	6820      	ldr	r0, [r4, #0]
   36864:	6819      	ldr	r1, [r3, #0]
   36866:	0605      	lsls	r5, r0, #24
   36868:	d503      	bpl.n	36872 <_printf_i+0xbe>
   3686a:	1d08      	adds	r0, r1, #4
   3686c:	6018      	str	r0, [r3, #0]
   3686e:	680d      	ldr	r5, [r1, #0]
   36870:	e005      	b.n	3687e <_printf_i+0xca>
   36872:	0640      	lsls	r0, r0, #25
   36874:	d5f9      	bpl.n	3686a <_printf_i+0xb6>
   36876:	680d      	ldr	r5, [r1, #0]
   36878:	1d08      	adds	r0, r1, #4
   3687a:	6018      	str	r0, [r3, #0]
   3687c:	b2ad      	uxth	r5, r5
   3687e:	4b59      	ldr	r3, [pc, #356]	; (369e4 <_printf_i+0x230>)
   36880:	2708      	movs	r7, #8
   36882:	9303      	str	r3, [sp, #12]
   36884:	2a6f      	cmp	r2, #111	; 0x6f
   36886:	d018      	beq.n	368ba <_printf_i+0x106>
   36888:	270a      	movs	r7, #10
   3688a:	e016      	b.n	368ba <_printf_i+0x106>
   3688c:	3145      	adds	r1, #69	; 0x45
   3688e:	700a      	strb	r2, [r1, #0]
   36890:	4a54      	ldr	r2, [pc, #336]	; (369e4 <_printf_i+0x230>)
   36892:	9203      	str	r2, [sp, #12]
   36894:	681a      	ldr	r2, [r3, #0]
   36896:	6821      	ldr	r1, [r4, #0]
   36898:	1d10      	adds	r0, r2, #4
   3689a:	6018      	str	r0, [r3, #0]
   3689c:	6815      	ldr	r5, [r2, #0]
   3689e:	0608      	lsls	r0, r1, #24
   368a0:	d522      	bpl.n	368e8 <_printf_i+0x134>
   368a2:	07cb      	lsls	r3, r1, #31
   368a4:	d502      	bpl.n	368ac <_printf_i+0xf8>
   368a6:	2320      	movs	r3, #32
   368a8:	4319      	orrs	r1, r3
   368aa:	6021      	str	r1, [r4, #0]
   368ac:	2710      	movs	r7, #16
   368ae:	2d00      	cmp	r5, #0
   368b0:	d103      	bne.n	368ba <_printf_i+0x106>
   368b2:	2320      	movs	r3, #32
   368b4:	6822      	ldr	r2, [r4, #0]
   368b6:	439a      	bics	r2, r3
   368b8:	6022      	str	r2, [r4, #0]
   368ba:	0023      	movs	r3, r4
   368bc:	2200      	movs	r2, #0
   368be:	3343      	adds	r3, #67	; 0x43
   368c0:	701a      	strb	r2, [r3, #0]
   368c2:	6863      	ldr	r3, [r4, #4]
   368c4:	60a3      	str	r3, [r4, #8]
   368c6:	2b00      	cmp	r3, #0
   368c8:	db5c      	blt.n	36984 <_printf_i+0x1d0>
   368ca:	2204      	movs	r2, #4
   368cc:	6821      	ldr	r1, [r4, #0]
   368ce:	4391      	bics	r1, r2
   368d0:	6021      	str	r1, [r4, #0]
   368d2:	2d00      	cmp	r5, #0
   368d4:	d158      	bne.n	36988 <_printf_i+0x1d4>
   368d6:	9e04      	ldr	r6, [sp, #16]
   368d8:	2b00      	cmp	r3, #0
   368da:	d064      	beq.n	369a6 <_printf_i+0x1f2>
   368dc:	0026      	movs	r6, r4
   368de:	9b03      	ldr	r3, [sp, #12]
   368e0:	3642      	adds	r6, #66	; 0x42
   368e2:	781b      	ldrb	r3, [r3, #0]
   368e4:	7033      	strb	r3, [r6, #0]
   368e6:	e05e      	b.n	369a6 <_printf_i+0x1f2>
   368e8:	0648      	lsls	r0, r1, #25
   368ea:	d5da      	bpl.n	368a2 <_printf_i+0xee>
   368ec:	b2ad      	uxth	r5, r5
   368ee:	e7d8      	b.n	368a2 <_printf_i+0xee>
   368f0:	6809      	ldr	r1, [r1, #0]
   368f2:	681a      	ldr	r2, [r3, #0]
   368f4:	0608      	lsls	r0, r1, #24
   368f6:	d505      	bpl.n	36904 <_printf_i+0x150>
   368f8:	1d11      	adds	r1, r2, #4
   368fa:	6019      	str	r1, [r3, #0]
   368fc:	6813      	ldr	r3, [r2, #0]
   368fe:	6962      	ldr	r2, [r4, #20]
   36900:	601a      	str	r2, [r3, #0]
   36902:	e006      	b.n	36912 <_printf_i+0x15e>
   36904:	0649      	lsls	r1, r1, #25
   36906:	d5f7      	bpl.n	368f8 <_printf_i+0x144>
   36908:	1d11      	adds	r1, r2, #4
   3690a:	6019      	str	r1, [r3, #0]
   3690c:	6813      	ldr	r3, [r2, #0]
   3690e:	8aa2      	ldrh	r2, [r4, #20]
   36910:	801a      	strh	r2, [r3, #0]
   36912:	2300      	movs	r3, #0
   36914:	9e04      	ldr	r6, [sp, #16]
   36916:	6123      	str	r3, [r4, #16]
   36918:	e054      	b.n	369c4 <_printf_i+0x210>
   3691a:	681a      	ldr	r2, [r3, #0]
   3691c:	1d11      	adds	r1, r2, #4
   3691e:	6019      	str	r1, [r3, #0]
   36920:	6816      	ldr	r6, [r2, #0]
   36922:	2100      	movs	r1, #0
   36924:	6862      	ldr	r2, [r4, #4]
   36926:	0030      	movs	r0, r6
   36928:	f000 f922 	bl	36b70 <memchr>
   3692c:	2800      	cmp	r0, #0
   3692e:	d001      	beq.n	36934 <_printf_i+0x180>
   36930:	1b80      	subs	r0, r0, r6
   36932:	6060      	str	r0, [r4, #4]
   36934:	6863      	ldr	r3, [r4, #4]
   36936:	6123      	str	r3, [r4, #16]
   36938:	2300      	movs	r3, #0
   3693a:	9a04      	ldr	r2, [sp, #16]
   3693c:	7013      	strb	r3, [r2, #0]
   3693e:	e041      	b.n	369c4 <_printf_i+0x210>
   36940:	6923      	ldr	r3, [r4, #16]
   36942:	0032      	movs	r2, r6
   36944:	9906      	ldr	r1, [sp, #24]
   36946:	9805      	ldr	r0, [sp, #20]
   36948:	9d07      	ldr	r5, [sp, #28]
   3694a:	47a8      	blx	r5
   3694c:	1c43      	adds	r3, r0, #1
   3694e:	d043      	beq.n	369d8 <_printf_i+0x224>
   36950:	6823      	ldr	r3, [r4, #0]
   36952:	2500      	movs	r5, #0
   36954:	079b      	lsls	r3, r3, #30
   36956:	d40f      	bmi.n	36978 <_printf_i+0x1c4>
   36958:	9b09      	ldr	r3, [sp, #36]	; 0x24
   3695a:	68e0      	ldr	r0, [r4, #12]
   3695c:	4298      	cmp	r0, r3
   3695e:	da3d      	bge.n	369dc <_printf_i+0x228>
   36960:	0018      	movs	r0, r3
   36962:	e03b      	b.n	369dc <_printf_i+0x228>
   36964:	0022      	movs	r2, r4
   36966:	2301      	movs	r3, #1
   36968:	3219      	adds	r2, #25
   3696a:	9906      	ldr	r1, [sp, #24]
   3696c:	9805      	ldr	r0, [sp, #20]
   3696e:	9e07      	ldr	r6, [sp, #28]
   36970:	47b0      	blx	r6
   36972:	1c43      	adds	r3, r0, #1
   36974:	d030      	beq.n	369d8 <_printf_i+0x224>
   36976:	3501      	adds	r5, #1
   36978:	68e3      	ldr	r3, [r4, #12]
   3697a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   3697c:	1a9b      	subs	r3, r3, r2
   3697e:	429d      	cmp	r5, r3
   36980:	dbf0      	blt.n	36964 <_printf_i+0x1b0>
   36982:	e7e9      	b.n	36958 <_printf_i+0x1a4>
   36984:	2d00      	cmp	r5, #0
   36986:	d0a9      	beq.n	368dc <_printf_i+0x128>
   36988:	9e04      	ldr	r6, [sp, #16]
   3698a:	0028      	movs	r0, r5
   3698c:	0039      	movs	r1, r7
   3698e:	f7fc ffe7 	bl	33960 <__aeabi_uidivmod>
   36992:	9b03      	ldr	r3, [sp, #12]
   36994:	3e01      	subs	r6, #1
   36996:	5c5b      	ldrb	r3, [r3, r1]
   36998:	0028      	movs	r0, r5
   3699a:	7033      	strb	r3, [r6, #0]
   3699c:	0039      	movs	r1, r7
   3699e:	f7fc ff59 	bl	33854 <__udivsi3>
   369a2:	1e05      	subs	r5, r0, #0
   369a4:	d1f1      	bne.n	3698a <_printf_i+0x1d6>
   369a6:	2f08      	cmp	r7, #8
   369a8:	d109      	bne.n	369be <_printf_i+0x20a>
   369aa:	6823      	ldr	r3, [r4, #0]
   369ac:	07db      	lsls	r3, r3, #31
   369ae:	d506      	bpl.n	369be <_printf_i+0x20a>
   369b0:	6863      	ldr	r3, [r4, #4]
   369b2:	6922      	ldr	r2, [r4, #16]
   369b4:	4293      	cmp	r3, r2
   369b6:	dc02      	bgt.n	369be <_printf_i+0x20a>
   369b8:	2330      	movs	r3, #48	; 0x30
   369ba:	3e01      	subs	r6, #1
   369bc:	7033      	strb	r3, [r6, #0]
   369be:	9b04      	ldr	r3, [sp, #16]
   369c0:	1b9b      	subs	r3, r3, r6
   369c2:	6123      	str	r3, [r4, #16]
   369c4:	9b07      	ldr	r3, [sp, #28]
   369c6:	aa09      	add	r2, sp, #36	; 0x24
   369c8:	9300      	str	r3, [sp, #0]
   369ca:	0021      	movs	r1, r4
   369cc:	9b06      	ldr	r3, [sp, #24]
   369ce:	9805      	ldr	r0, [sp, #20]
   369d0:	f7ff fe82 	bl	366d8 <_printf_common>
   369d4:	1c43      	adds	r3, r0, #1
   369d6:	d1b3      	bne.n	36940 <_printf_i+0x18c>
   369d8:	2001      	movs	r0, #1
   369da:	4240      	negs	r0, r0
   369dc:	b00b      	add	sp, #44	; 0x2c
   369de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   369e0:	0003b324 	.word	0x0003b324
   369e4:	0003b313 	.word	0x0003b313

000369e8 <__sread>:
   369e8:	b570      	push	{r4, r5, r6, lr}
   369ea:	000c      	movs	r4, r1
   369ec:	250e      	movs	r5, #14
   369ee:	5f49      	ldrsh	r1, [r1, r5]
   369f0:	f000 f8f0 	bl	36bd4 <_read_r>
   369f4:	2800      	cmp	r0, #0
   369f6:	db03      	blt.n	36a00 <__sread+0x18>
   369f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
   369fa:	181b      	adds	r3, r3, r0
   369fc:	6563      	str	r3, [r4, #84]	; 0x54
   369fe:	bd70      	pop	{r4, r5, r6, pc}
   36a00:	89a3      	ldrh	r3, [r4, #12]
   36a02:	4a02      	ldr	r2, [pc, #8]	; (36a0c <__sread+0x24>)
   36a04:	4013      	ands	r3, r2
   36a06:	81a3      	strh	r3, [r4, #12]
   36a08:	e7f9      	b.n	369fe <__sread+0x16>
   36a0a:	46c0      	nop			; (mov r8, r8)
   36a0c:	ffffefff 	.word	0xffffefff

00036a10 <__swrite>:
   36a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   36a12:	001f      	movs	r7, r3
   36a14:	898b      	ldrh	r3, [r1, #12]
   36a16:	0005      	movs	r5, r0
   36a18:	000c      	movs	r4, r1
   36a1a:	0016      	movs	r6, r2
   36a1c:	05db      	lsls	r3, r3, #23
   36a1e:	d505      	bpl.n	36a2c <__swrite+0x1c>
   36a20:	230e      	movs	r3, #14
   36a22:	5ec9      	ldrsh	r1, [r1, r3]
   36a24:	2200      	movs	r2, #0
   36a26:	2302      	movs	r3, #2
   36a28:	f000 f88e 	bl	36b48 <_lseek_r>
   36a2c:	89a3      	ldrh	r3, [r4, #12]
   36a2e:	4a05      	ldr	r2, [pc, #20]	; (36a44 <__swrite+0x34>)
   36a30:	0028      	movs	r0, r5
   36a32:	4013      	ands	r3, r2
   36a34:	81a3      	strh	r3, [r4, #12]
   36a36:	0032      	movs	r2, r6
   36a38:	230e      	movs	r3, #14
   36a3a:	5ee1      	ldrsh	r1, [r4, r3]
   36a3c:	003b      	movs	r3, r7
   36a3e:	f000 f839 	bl	36ab4 <_write_r>
   36a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   36a44:	ffffefff 	.word	0xffffefff

00036a48 <__sseek>:
   36a48:	b570      	push	{r4, r5, r6, lr}
   36a4a:	000c      	movs	r4, r1
   36a4c:	250e      	movs	r5, #14
   36a4e:	5f49      	ldrsh	r1, [r1, r5]
   36a50:	f000 f87a 	bl	36b48 <_lseek_r>
   36a54:	89a3      	ldrh	r3, [r4, #12]
   36a56:	1c42      	adds	r2, r0, #1
   36a58:	d103      	bne.n	36a62 <__sseek+0x1a>
   36a5a:	4a05      	ldr	r2, [pc, #20]	; (36a70 <__sseek+0x28>)
   36a5c:	4013      	ands	r3, r2
   36a5e:	81a3      	strh	r3, [r4, #12]
   36a60:	bd70      	pop	{r4, r5, r6, pc}
   36a62:	2280      	movs	r2, #128	; 0x80
   36a64:	0152      	lsls	r2, r2, #5
   36a66:	4313      	orrs	r3, r2
   36a68:	81a3      	strh	r3, [r4, #12]
   36a6a:	6560      	str	r0, [r4, #84]	; 0x54
   36a6c:	e7f8      	b.n	36a60 <__sseek+0x18>
   36a6e:	46c0      	nop			; (mov r8, r8)
   36a70:	ffffefff 	.word	0xffffefff

00036a74 <__sclose>:
   36a74:	b510      	push	{r4, lr}
   36a76:	230e      	movs	r3, #14
   36a78:	5ec9      	ldrsh	r1, [r1, r3]
   36a7a:	f000 f82f 	bl	36adc <_close_r>
   36a7e:	bd10      	pop	{r4, pc}

00036a80 <strchr>:
   36a80:	b2c9      	uxtb	r1, r1
   36a82:	7803      	ldrb	r3, [r0, #0]
   36a84:	2b00      	cmp	r3, #0
   36a86:	d004      	beq.n	36a92 <strchr+0x12>
   36a88:	4299      	cmp	r1, r3
   36a8a:	d100      	bne.n	36a8e <strchr+0xe>
   36a8c:	4770      	bx	lr
   36a8e:	3001      	adds	r0, #1
   36a90:	e7f7      	b.n	36a82 <strchr+0x2>
   36a92:	424b      	negs	r3, r1
   36a94:	4159      	adcs	r1, r3
   36a96:	4249      	negs	r1, r1
   36a98:	4008      	ands	r0, r1
   36a9a:	e7f7      	b.n	36a8c <strchr+0xc>

00036a9c <__ascii_wctomb>:
   36a9c:	1e0b      	subs	r3, r1, #0
   36a9e:	d004      	beq.n	36aaa <__ascii_wctomb+0xe>
   36aa0:	2aff      	cmp	r2, #255	; 0xff
   36aa2:	d904      	bls.n	36aae <__ascii_wctomb+0x12>
   36aa4:	238a      	movs	r3, #138	; 0x8a
   36aa6:	6003      	str	r3, [r0, #0]
   36aa8:	3b8b      	subs	r3, #139	; 0x8b
   36aaa:	0018      	movs	r0, r3
   36aac:	4770      	bx	lr
   36aae:	700a      	strb	r2, [r1, #0]
   36ab0:	2301      	movs	r3, #1
   36ab2:	e7fa      	b.n	36aaa <__ascii_wctomb+0xe>

00036ab4 <_write_r>:
   36ab4:	b570      	push	{r4, r5, r6, lr}
   36ab6:	0005      	movs	r5, r0
   36ab8:	0008      	movs	r0, r1
   36aba:	0011      	movs	r1, r2
   36abc:	2200      	movs	r2, #0
   36abe:	4c06      	ldr	r4, [pc, #24]	; (36ad8 <_write_r+0x24>)
   36ac0:	6022      	str	r2, [r4, #0]
   36ac2:	001a      	movs	r2, r3
   36ac4:	f7f5 fa38 	bl	2bf38 <_write>
   36ac8:	1c43      	adds	r3, r0, #1
   36aca:	d103      	bne.n	36ad4 <_write_r+0x20>
   36acc:	6823      	ldr	r3, [r4, #0]
   36ace:	2b00      	cmp	r3, #0
   36ad0:	d000      	beq.n	36ad4 <_write_r+0x20>
   36ad2:	602b      	str	r3, [r5, #0]
   36ad4:	bd70      	pop	{r4, r5, r6, pc}
   36ad6:	46c0      	nop			; (mov r8, r8)
   36ad8:	20005ce0 	.word	0x20005ce0

00036adc <_close_r>:
   36adc:	2300      	movs	r3, #0
   36ade:	b570      	push	{r4, r5, r6, lr}
   36ae0:	4c06      	ldr	r4, [pc, #24]	; (36afc <_close_r+0x20>)
   36ae2:	0005      	movs	r5, r0
   36ae4:	0008      	movs	r0, r1
   36ae6:	6023      	str	r3, [r4, #0]
   36ae8:	f7f5 fa7a 	bl	2bfe0 <_close>
   36aec:	1c43      	adds	r3, r0, #1
   36aee:	d103      	bne.n	36af8 <_close_r+0x1c>
   36af0:	6823      	ldr	r3, [r4, #0]
   36af2:	2b00      	cmp	r3, #0
   36af4:	d000      	beq.n	36af8 <_close_r+0x1c>
   36af6:	602b      	str	r3, [r5, #0]
   36af8:	bd70      	pop	{r4, r5, r6, pc}
   36afa:	46c0      	nop			; (mov r8, r8)
   36afc:	20005ce0 	.word	0x20005ce0

00036b00 <_fstat_r>:
   36b00:	2300      	movs	r3, #0
   36b02:	b570      	push	{r4, r5, r6, lr}
   36b04:	4c06      	ldr	r4, [pc, #24]	; (36b20 <_fstat_r+0x20>)
   36b06:	0005      	movs	r5, r0
   36b08:	0008      	movs	r0, r1
   36b0a:	0011      	movs	r1, r2
   36b0c:	6023      	str	r3, [r4, #0]
   36b0e:	f7f5 fa71 	bl	2bff4 <_fstat>
   36b12:	1c43      	adds	r3, r0, #1
   36b14:	d103      	bne.n	36b1e <_fstat_r+0x1e>
   36b16:	6823      	ldr	r3, [r4, #0]
   36b18:	2b00      	cmp	r3, #0
   36b1a:	d000      	beq.n	36b1e <_fstat_r+0x1e>
   36b1c:	602b      	str	r3, [r5, #0]
   36b1e:	bd70      	pop	{r4, r5, r6, pc}
   36b20:	20005ce0 	.word	0x20005ce0

00036b24 <_isatty_r>:
   36b24:	2300      	movs	r3, #0
   36b26:	b570      	push	{r4, r5, r6, lr}
   36b28:	4c06      	ldr	r4, [pc, #24]	; (36b44 <_isatty_r+0x20>)
   36b2a:	0005      	movs	r5, r0
   36b2c:	0008      	movs	r0, r1
   36b2e:	6023      	str	r3, [r4, #0]
   36b30:	f7f5 fa6e 	bl	2c010 <_isatty>
   36b34:	1c43      	adds	r3, r0, #1
   36b36:	d103      	bne.n	36b40 <_isatty_r+0x1c>
   36b38:	6823      	ldr	r3, [r4, #0]
   36b3a:	2b00      	cmp	r3, #0
   36b3c:	d000      	beq.n	36b40 <_isatty_r+0x1c>
   36b3e:	602b      	str	r3, [r5, #0]
   36b40:	bd70      	pop	{r4, r5, r6, pc}
   36b42:	46c0      	nop			; (mov r8, r8)
   36b44:	20005ce0 	.word	0x20005ce0

00036b48 <_lseek_r>:
   36b48:	b570      	push	{r4, r5, r6, lr}
   36b4a:	0005      	movs	r5, r0
   36b4c:	0008      	movs	r0, r1
   36b4e:	0011      	movs	r1, r2
   36b50:	2200      	movs	r2, #0
   36b52:	4c06      	ldr	r4, [pc, #24]	; (36b6c <_lseek_r+0x24>)
   36b54:	6022      	str	r2, [r4, #0]
   36b56:	001a      	movs	r2, r3
   36b58:	f7f5 fa63 	bl	2c022 <_lseek>
   36b5c:	1c43      	adds	r3, r0, #1
   36b5e:	d103      	bne.n	36b68 <_lseek_r+0x20>
   36b60:	6823      	ldr	r3, [r4, #0]
   36b62:	2b00      	cmp	r3, #0
   36b64:	d000      	beq.n	36b68 <_lseek_r+0x20>
   36b66:	602b      	str	r3, [r5, #0]
   36b68:	bd70      	pop	{r4, r5, r6, pc}
   36b6a:	46c0      	nop			; (mov r8, r8)
   36b6c:	20005ce0 	.word	0x20005ce0

00036b70 <memchr>:
   36b70:	b2c9      	uxtb	r1, r1
   36b72:	1882      	adds	r2, r0, r2
   36b74:	4290      	cmp	r0, r2
   36b76:	d101      	bne.n	36b7c <memchr+0xc>
   36b78:	2000      	movs	r0, #0
   36b7a:	4770      	bx	lr
   36b7c:	7803      	ldrb	r3, [r0, #0]
   36b7e:	428b      	cmp	r3, r1
   36b80:	d0fb      	beq.n	36b7a <memchr+0xa>
   36b82:	3001      	adds	r0, #1
   36b84:	e7f6      	b.n	36b74 <memchr+0x4>

00036b86 <_realloc_r>:
   36b86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   36b88:	0007      	movs	r7, r0
   36b8a:	000d      	movs	r5, r1
   36b8c:	0016      	movs	r6, r2
   36b8e:	2900      	cmp	r1, #0
   36b90:	d105      	bne.n	36b9e <_realloc_r+0x18>
   36b92:	0011      	movs	r1, r2
   36b94:	f7fe fe9e 	bl	358d4 <_malloc_r>
   36b98:	0004      	movs	r4, r0
   36b9a:	0020      	movs	r0, r4
   36b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   36b9e:	2a00      	cmp	r2, #0
   36ba0:	d103      	bne.n	36baa <_realloc_r+0x24>
   36ba2:	f7fe fe4d 	bl	35840 <_free_r>
   36ba6:	0034      	movs	r4, r6
   36ba8:	e7f7      	b.n	36b9a <_realloc_r+0x14>
   36baa:	f000 f827 	bl	36bfc <_malloc_usable_size_r>
   36bae:	002c      	movs	r4, r5
   36bb0:	4286      	cmp	r6, r0
   36bb2:	d9f2      	bls.n	36b9a <_realloc_r+0x14>
   36bb4:	0031      	movs	r1, r6
   36bb6:	0038      	movs	r0, r7
   36bb8:	f7fe fe8c 	bl	358d4 <_malloc_r>
   36bbc:	1e04      	subs	r4, r0, #0
   36bbe:	d0ec      	beq.n	36b9a <_realloc_r+0x14>
   36bc0:	0029      	movs	r1, r5
   36bc2:	0032      	movs	r2, r6
   36bc4:	f7fe fe18 	bl	357f8 <memcpy>
   36bc8:	0029      	movs	r1, r5
   36bca:	0038      	movs	r0, r7
   36bcc:	f7fe fe38 	bl	35840 <_free_r>
   36bd0:	e7e3      	b.n	36b9a <_realloc_r+0x14>
	...

00036bd4 <_read_r>:
   36bd4:	b570      	push	{r4, r5, r6, lr}
   36bd6:	0005      	movs	r5, r0
   36bd8:	0008      	movs	r0, r1
   36bda:	0011      	movs	r1, r2
   36bdc:	2200      	movs	r2, #0
   36bde:	4c06      	ldr	r4, [pc, #24]	; (36bf8 <_read_r+0x24>)
   36be0:	6022      	str	r2, [r4, #0]
   36be2:	001a      	movs	r2, r3
   36be4:	f7f5 f97e 	bl	2bee4 <_read>
   36be8:	1c43      	adds	r3, r0, #1
   36bea:	d103      	bne.n	36bf4 <_read_r+0x20>
   36bec:	6823      	ldr	r3, [r4, #0]
   36bee:	2b00      	cmp	r3, #0
   36bf0:	d000      	beq.n	36bf4 <_read_r+0x20>
   36bf2:	602b      	str	r3, [r5, #0]
   36bf4:	bd70      	pop	{r4, r5, r6, pc}
   36bf6:	46c0      	nop			; (mov r8, r8)
   36bf8:	20005ce0 	.word	0x20005ce0

00036bfc <_malloc_usable_size_r>:
   36bfc:	1f0b      	subs	r3, r1, #4
   36bfe:	681b      	ldr	r3, [r3, #0]
   36c00:	1f18      	subs	r0, r3, #4
   36c02:	2b00      	cmp	r3, #0
   36c04:	da01      	bge.n	36c0a <_malloc_usable_size_r+0xe>
   36c06:	580b      	ldr	r3, [r1, r0]
   36c08:	18c0      	adds	r0, r0, r3
   36c0a:	4770      	bx	lr

00036c0c <sysfont_glyphs>:
   36c0c:	0000 0000 0000 2000 2020 2020 2000 5050     .......     . PP
   36c1c:	0050 0000 5000 f850 f850 5050 7820 70a0     P....PP.P.PP x.p
   36c2c:	f028 c020 10c8 4020 1898 9060 40a0 90a8     (. ... @..`..@..
   36c3c:	6068 4020 0000 0000 2010 4040 2040 4010     h` @..... @@@ .@
   36c4c:	1020 1010 4020 5000 f820 5020 0000 2020      ... @.P . P..  
   36c5c:	20f8 0020 0000 0000 2060 0040 0000 00f8     .  .....` @.....
   36c6c:	0000 0000 0000 6000 0060 1008 4020 0080     .......``... @..
   36c7c:	8870 a898 88c8 2070 2060 2020 7020 8870     p.....p `    pp.
   36c8c:	1008 4020 f8f8 2010 0810 7088 3010 9050     .. @... ...p.0P.
   36c9c:	10f8 f810 f080 0808 7088 4030 f080 8888     .........p0@....
   36cac:	f870 1008 4020 4040 8870 7088 8888 7070     p... @@@p..p..pp
   36cbc:	8888 0878 6010 6000 0060 6060 0000 6060     ..x..`.``.``..``
   36ccc:	6000 4020 1008 4020 1020 0008 f800 f800     .` @.. @ .......
   36cdc:	0000 4080 1020 4020 7080 0888 2010 2000     ...@ . @.p... . 
   36cec:	8870 6808 a8a8 7070 8888 f888 8888 88f0     p..h..pp........
   36cfc:	f088 8888 70f0 8088 8080 7088 90e0 8888     .....p.....p....
   36d0c:	9088 f8e0 8080 80f0 f880 80f8 e080 8080     ................
   36d1c:	7080 8088 9880 7088 8888 f888 8888 7088     .p.....p.......p
   36d2c:	2020 2020 7020 1038 1010 9010 8860 a090          p8.....`...
   36d3c:	a0c0 8890 8080 8080 8080 88f8 a8d8 8888     ................
   36d4c:	8888 8888 a8c8 8898 7088 8888 8888 7088     .........p.....p
   36d5c:	88f0 f088 8080 7080 8888 a888 6890 88f0     .......p.....h..
   36d6c:	f088 90a0 7888 8080 0870 f008 20f8 2020     .....x..p....   
   36d7c:	2020 8820 8888 8888 7088 8888 8888 5088        ......p.....P
   36d8c:	8820 8888 a8a8 88d8 8888 2050 8850 8888      .........P P...
   36d9c:	5088 2020 2020 08f8 2010 8040 38f8 2020     .P    ... @..8  
   36dac:	2020 3820 8000 2040 0810 e000 2020 2020        8..@ ....    
   36dbc:	e020 5020 0088 0000 0000 0000 0000 f800      . P............
   36dcc:	2040 0010 0000 0000 7000 7808 7888 8080     @ .......p.x.x..
   36ddc:	c8b0 8888 00f0 7000 8080 7088 0808 9868     .......p...p..h.
   36dec:	8888 0078 7000 f888 7080 4830 e040 4040     ..x..p...p0H@.@@
   36dfc:	0040 7800 7888 3008 8080 c8b0 8888 2088     @..x.x.0....... 
   36e0c:	6000 2020 7020 0010 1030 9010 4060 4840     .`   p..0...`@@H
   36e1c:	6050 4850 2060 2020 2020 0070 d000 a8a8     P`PH`     p.....
   36e2c:	8888 0000 c8b0 8888 0088 7000 8888 7088     ...........p...p
   36e3c:	0000 88f0 80f0 0080 6800 7898 0808 0000     .........h.x....
   36e4c:	c8b0 8080 0080 7000 7080 f008 4040 40e0     .......p.p..@@.@
   36e5c:	4840 0030 8800 8888 6898 0000 8888 5088     @H0......h.....P
   36e6c:	0020 8800 a888 50a8 0000 5088 5020 0088      ......P...P P..
   36e7c:	8800 7888 7008 0000 10f8 4020 10f8 2020     ...x.p.... @..  
   36e8c:	2040 1020 2020 2020 2020 4020 2020 2010     @  .       @  . 
   36e9c:	4020 0000                                    @..

00036ea0 <pcWelcomeMessage>:
   36ea0:	7246 6565 5452 534f 4320 494c 0d2e 540a     FreeRTOS CLI...T
   36eb0:	7079 2065 6548 706c 7420 206f 6976 7765     ype Help to view
   36ec0:	6120 6c20 7369 2074 666f 7220 6765 7369      a list of regis
   36ed0:	6574 6572 2064 6f63 6d6d 6e61 7364 0d2e     tered commands..
   36ee0:	000a 0000 6d69 0075 6d69 3a75 5220 7465     ....imu.imu: Ret
   36ef0:	7275 736e 6120 7620 6c61 6575 6620 6f72     urns a value fro
   36f00:	206d 6874 2065 4d49 0d55 000a 7766 0000     m the IMU...fw..
   36f10:	7766 203a 6f44 6e77 6f6c 6461 6120 6620     fw: Download a f
   36f20:	6c69 2065 6e61 2064 6570 6672 726f 206d     ile and perform 
   36f30:	6e61 4620 2057 7075 6164 6574 0a0d 0000     an FW update....
   36f40:	6572 6573 0074 0000 6572 6573 3a74 5220     reset...reset: R
   36f50:	7365 7465 2073 6874 2065 6564 6976 6563     esets the device
   36f60:	0a0d 0000 656c 0064 656c 2064 6b5b 7965     ....led.led [key
   36f70:	756e 5d6d 525b 5b5d 5d47 425b 3a5d 5320     num][R][G][B]: S
   36f80:	7465 2073 6874 2065 6967 6576 206e 454c     ets the given LE
   36f90:	2044 6f74 7420 6568 6720 7669 6e65 5220     D to the given R
   36fa0:	472c 422c 7620 6c61 6575 2e73 0a0d 0000     ,G,B values.....
   36fb0:	6567 6274 7475 6f74 006e 0000 6567 6274     getbutton...getb
   36fc0:	7475 6f74 3a6e 5020 6f72 6563 7373 7365     utton: Processes
   36fd0:	6120 646e 7020 6972 746e 2073 6874 2065      and prints the 
   36fe0:	4946 4f46 6220 7475 6f74 206e 7562 6666     FIFO button buff
   36ff0:	7265 6620 6f72 206d 6874 2065 6573 7365     er from the sees
   37000:	7761 0d2e 000a 0000 6567 6474 7369 6174     aw......getdista
   37010:	636e 0065 6567 6474 7369 6174 636e 3a65     nce.getdistance:
   37020:	5220 7465 7275 736e 7420 6568 6420 7369      Returns the dis
   37030:	6174 636e 2065 7266 6d6f 7420 6568 5520     tance from the U
   37040:	2d53 3031 2030 6553 736e 726f 0d2e 000a     S-100 Sensor....
   37050:	6167 656d 0000 0000 6167 656d 203a 6553     game....game: Se
   37060:	646e 2073 7564 6d6d 2079 6167 656d 6420     nds dummy game d
   37070:	7461 0d61 000a 0000 3269 0063 3269 3a63     ata.....i2c.i2c:
   37080:	5320 6163 736e 4920 4332 6220 7375 0a0d      Scans I2C bus..
   37090:	0000 0000 6c63 0073 6c63 3a73 4320 656c     ....cls.cls: Cle
   370a0:	7261 2073 6874 2065 6574 6d72 6e69 6c61     ars the terminal
   370b0:	7320 7263 6565 0d6e 000a 0000 6f43 6c75      screen.....Coul
   370c0:	2064 6f6e 2074 6c61 6f6c 6163 6574 7320     d not allocate s
   370d0:	6d65 7061 6f68 6572 0a0d 0000 0a0d 0000     emaphore........
   370e0:	616f 0000 6325 325b 0d4b 003e 2008 0008     oa..%c[2K.>.. ..
   370f0:	6341 6563 656c 6172 6974 6e6f 5b20 676d     Acceleration [mg
   37100:	3a5d 2058 6425 5909 2520 0964 205a 6425     ]:X %d.Y %d.Z %d
   37110:	0a0d 0000 6f4e 6420 7461 2061 6572 6461     ....No data read
   37120:	2179 5320 6e65 6964 676e 6420 6d75 796d     y! Sending dummy
   37130:	6420 7461 2061 0a0d 0000 0000 6325 325b      data ......%c[2
   37140:	004a 0000 7453 6475 6e65 7374 7420 206f     J...Students to 
   37150:	6966 6c6c 6f20 7475 0021 0000 7542 7474     fill out!...Butt
   37160:	6e6f 2320 6425 6920 2073 6572 656c 7361     on #%d is releas
   37170:	6465 0a0d 0000 0000 7542 7474 6e6f 2320     ed......Button #
   37180:	6425 6920 2073 7270 7365 6573 0d64 000a     %d is pressed...
   37190:	6553 736e 726f 4520 7272 726f 2520 2164     Sensor Error %d!
   371a0:	0a0d 0000 6944 7473 6e61 6563 203a 6425     ....Distance: %d
   371b0:	6d20 0d6d 000a 0000 6944 7473 6e61 6563      mm.....Distance
   371c0:	4420 7461 2061 514d 5454 5020 736f 0d74      Data MQTT Post.
   371d0:	000a 0000 7544 6d6d 2079 6147 656d 4420     ....Dummy Game D
   371e0:	7461 2061 514d 5454 5020 736f 0d74 000a     ata MQTT Post...
   371f0:	2030 3120 2020 2032 3320 2020 2034 3520     0  1  2  3  4  5
   37200:	2020 2036 3720 2020 2038 3920 2020 2061       6  7  8  9  a 
   37210:	6220 2020 2063 6420 2020 2065 6620 0a0d      b  c  d  e  f..
   37220:	0000 0000 3025 7832 203a 0000 3025 7832     ....%02x: ..%02x
   37230:	0020 0000                                    ...

00037234 <xImuGetCommand>:
   37234:	6ee4 0003 6ee8 0003 4309 0001 0000 0000     .n...n...C......

00037244 <xOTAUCommand>:
   37244:	6f0c 0003 6f10 0003 44b5 0001 0000 0000     .o...o...D......

00037254 <xResetCommand>:
   37254:	6f40 0003 6f48 0003 44d5 0001 0000 0000     @o..Ho...D......

00037264 <xNeotrellisTurnLEDCommand>:
   37264:	6f64 0003 6f68 0003 44f5 0001 0004 0000     do..ho...D......

00037274 <xNeotrellisProcessButtonCommand>:
   37274:	6fb0 0003 6fbc 0003 4521 0001 0000 0000     .o...o..!E......

00037284 <xDistanceSensorGetDistance>:
   37284:	7008 0003 7014 0003 4625 0001 0000 0000     .p...p..%F......

00037294 <xSendDummyGameData>:
   37294:	7050 0003 7058 0003 46c9 0001 0000 0000     Pp..Xp...F......

000372a4 <xI2cScan>:
   372a4:	7078 0003 707c 0003 4765 0001 0000 0000     xp..|p..eG......

000372b4 <xClearScreen>:
   372b4:	7094 0003 7098 0003 446d 0001 0000 0000     .p...p..mD......
   372c4:	5345 3545 3631 2d20 4320 6e6f 7274 6c6f     ESE516 - Control
   372d4:	4920 696e 2074 6f43 6564 0a0d 0000 0000      Init Code......
   372e4:	5245 4f52 2052 6e49 7469 6169 696c 697a     ERROR Initializi
   372f4:	676e 4320 6e6f 7274 6c6f 4420 7461 2061     ng Control Data 
   37304:	7571 7565 7365 0d21 000a 0000 6f43 746e     queues!.....Cont
   37314:	6f72 206c 6854 6572 6461 203a 6f43 736e     rol Thread: Cons
   37324:	6d75 6465 6720 6d61 2065 6170 6b63 7465     umed game packet
   37334:	0d21 000a 6f43 746e 6f72 206c 6854 6572     !...Control Thre
   37344:	6461 203a 6f43 6c75 2064 6f6e 2074 6573     ad: Could not se
   37354:	646e 6720 6d61 2065 6170 6b63 7465 0d21     nd game packet!.
   37364:	000a 0000                                   ....

00037368 <msgBaseGetHWID>:
   37368:	0100 0000                                   ....

0003736c <msgNeopixelPin>:
   3736c:	010e 0003                                   ....

00037370 <msgNeopixelSpeed>:
   37370:	020e 0001                                   ....

00037374 <msgNeopixelBufLength>:
   37374:	030e 3000                                   ...0

00037378 <msgKeypadEnableInt>:
   37378:	0210 0001                                   ....

0003737c <msgKeypadGetCount>:
   3737c:	0410 0000 7245 6f72 2072 6e69 7469 6169     ....Error initia
   3738c:	696c 697a 676e 5320 6565 6173 2177 722f     lizing Seesaw!/r
   3739c:	6e2f 0000 7245 6f72 2f72 2f72 006e 0000     /n..Error/r/n...
   373ac:	6f46 6e75 2064 6553 7365 7761 2f21 2f72     Found Seesaw!/r/
   373bc:	006e 0000 6f43 6c75 2064 6f6e 2074 7277     n...Could not wr
   373cc:	7469 2065 6553 7365 7761 7020 6e69 2f21     ite Seesaw pin!/
   373dc:	2f72 006e 6f43 6c75 2064 6f6e 2074 6573     r/n.Could not se
   373ec:	2074 6573 7365 7761 4e20 6f65 6970 6578     t seesaw Neopixe
   373fc:	206c 7073 6565 2164 722f 6e2f 0000 0000     l speed!/r/n....
   3740c:	6f43 6c75 2064 6f6e 2074 6573 2074 6573     Could not set se
   3741c:	7365 7761 4e20 6f65 6970 6578 206c 756e     esaw Neopixel nu
   3742c:	626d 7265 6f20 2066 6564 6976 6563 2f73     mber of devices/
   3743c:	2f72 006e 7245 6f72 2072 6572 6461 6e69     r/n.Error readin
   3744c:	2067 6553 7365 7761 6320 756f 746e 2173     g Seesaw counts!
   3745c:	722f 6e2f 0000 0000 1010 0000 050e 0000     /r/n............
   3746c:	6f43 6c75 2064 6f6e 2074 6e69 7469 6169     Could not initia
   3747c:	696c 657a 4b20 7965 6170 2164 722f 6e2f     lize Keypad!/r/n
   3748c:	0000 0000 4955 5420 7361 206b 7453 7261     ....UI Task Star
   3749c:	6574 2164 0000 0000 5345 3545 3631 0000     ted!....ESE516..

000374ac <main_mqtt_broker>:
   374ac:	7262 6b6f 7265 682e 7669 6d65 2e71 6f63     broker.hivemq.co
   374bc:	006d 0000 3025 6433 0000 0000 7473 7261     m...%03d....star
   374cc:	5f74 6f64 6e77 6f6c 6461 203a 4d4d 2043     t_download: MMC 
   374dc:	7473 726f 6761 2065 6f6e 2074 6572 6461     storage not read
   374ec:	2e79 0a0d 0000 0000 7473 7261 5f74 6f64     y.......start_do
   374fc:	6e77 6f6c 6461 203a 6957 462d 2069 7369     wnload: Wi-Fi is
   3750c:	6e20 746f 6320 6e6f 656e 7463 6465 0d2e      not connected..
   3751c:	000a 0000 7473 7261 5f74 6f64 6e77 6f6c     ....start_downlo
   3752c:	6461 203a 6572 7571 7365 2074 7369 7320     ad: request is s
   3753c:	6e65 2074 6c61 6572 6461 2e79 0a0d 0000     ent already.....
   3754c:	7473 7261 5f74 6f64 6e77 6f6c 6461 203a     start_download: 
   3755c:	7572 6e6e 6e69 2067 6f64 6e77 6f6c 6461     running download
   3756c:	6120 726c 6165 7964 0d2e 000a 7473 7261      already....star
   3757c:	5f74 6f64 6e77 6f6c 6461 203a 6573 646e     t_download: send
   3758c:	6e69 2067 5448 5054 7220 7165 6575 7473     ing HTTP request
   3759c:	2e2e 0d2e 000a 0000 7468 7074 3a73 2f2f     ........https://
   375ac:	7777 2e77 6573 7361 752e 6570 6e6e 652e     www.seas.upenn.e
   375bc:	7564 7e2f 6564 6572 7a6b 796d 432f 7061     du/~derekzmy/Cap
   375cc:	7574 6572 502e 474e 0000 0000 7473 726f     ture.PNG....stor
   375dc:	5f65 6966 656c 705f 6361 656b 3a74 6520     e_file_packet: e
   375ec:	706d 7974 6420 7461 2e61 0a0d 0000 0000     mpty data.......
   375fc:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
   3760c:	3a74 6620 6c69 2065 616e 656d 6920 2073     t: file name is 
   3761c:	6e69 6176 696c 2e64 4420 776f 6c6e 616f     invalid. Downloa
   3762c:	2064 6163 636e 6c65 6465 0d2e 000a 0000     d canceled......
   3763c:	7473 726f 5f65 6966 656c 705f 6361 656b     store_file_packe
   3764c:	3a74 6320 6572 7461 6e69 2067 6966 656c     t: creating file
   3765c:	5b20 7325 0d5d 000a 7473 726f 5f65 6966      [%s]...store_fi
   3766c:	656c 705f 6361 656b 3a74 6620 6c69 2065     le_packet: file 
   3767c:	7263 6165 6974 6e6f 6520 7272 726f 2021     creation error! 
   3768c:	6572 3a74 6425 0a0d 0000 0000 7473 726f     ret:%d......stor
   3769c:	5f65 6966 656c 705f 6361 656b 3a74 6620     e_file_packet: f
   376ac:	6c69 2065 7277 7469 2065 7265 6f72 2c72     ile write error,
   376bc:	6420 776f 6c6e 616f 2064 6163 636e 6c65      download cancel
   376cc:	6465 0d2e 000a 0000 7473 726f 5f65 6966     ed......store_fi
   376dc:	656c 705f 6361 656b 3a74 7220 6365 6965     le_packet: recei
   376ec:	6576 5b64 6c25 5d75 202c 6966 656c 7320     ved[%lu], file s
   376fc:	7a69 5b65 6c25 5d75 0a0d 0000 7473 726f     ize[%lu]....stor
   3770c:	5f65 6966 656c 705f 6361 656b 3a74 6620     e_file_packet: f
   3771c:	6c69 2065 6f64 6e77 6f6c 6461 6465 7320     ile downloaded s
   3772c:	6375 6563 7373 7566 6c6c 2e79 0a0d 0000     uccessfully.....
   3773c:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   3774c:	6162 6b63 203a 5448 5054 6320 696c 6e65     back: HTTP clien
   3775c:	2074 6f73 6b63 7465 6320 6e6f 656e 7463     t socket connect
   3776c:	6465 0d2e 000a 0000 7468 7074 635f 696c     ed......http_cli
   3777c:	6e65 5f74 6163 6c6c 6162 6b63 203a 6572     ent_callback: re
   3778c:	7571 7365 2074 6f63 706d 656c 6574 2e64     quest completed.
   3779c:	0a0d 0000 7468 7074 635f 696c 6e65 5f74     ....http_client_
   377ac:	6163 6c6c 6162 6b63 203a 6572 6563 7669     callback: receiv
   377bc:	6465 7220 7365 6f70 736e 2065 7525 6420     ed response %u d
   377cc:	7461 2061 6973 657a 2520 0d75 000a 0000     ata size %u.....
   377dc:	7468 7074 635f 696c 6e65 5f74 6163 6c6c     http_client_call
   377ec:	6162 6b63 203a 6964 6373 6e6f 656e 7463     back: disconnect
   377fc:	6f69 206e 6572 7361 6e6f 253a 0d64 000a     ion reason:%d...
   3780c:	6572 6f73 766c 5f65 6263 203a 7325 4920     resolve_cb: %s I
   3781c:	2050 6461 7264 7365 2073 7369 2520 2e64     P address is %d.
   3782c:	6425 252e 2e64 6425 0a0d 0a0d 0000 0000     %d.%d.%d........
   3783c:	6977 6966 635f 3a62 4d20 4d32 575f 4649     wifi_cb: M2M_WIF
   3784c:	5f49 4f43 4e4e 4345 4554 0d44 000a 0000     I_CONNECTED.....
   3785c:	6977 6966 635f 3a62 4d20 4d32 575f 4649     wifi_cb: M2M_WIF
   3786c:	5f49 4944 4353 4e4f 454e 5443 4445 0a0d     I_DISCONNECTED..
   3787c:	0000 0000 3931 3739 3131 3530 0000 0000     ....19971105....
   3788c:	6564 6572 006b 0000 6977 6966 635f 3a62     derek...wifi_cb:
   3789c:	4920 2050 6461 7264 7365 2073 7369 2520      IP address is %
   378ac:	2e75 7525 252e 2e75 7525 0a0d 0000 0000     u.%u.%u.%u......
   378bc:	7245 6f72 2072 6f63 6e6e 6365 6974 676e     Error connecting
   378cc:	7420 206f 514d 5454 4220 6f72 656b 2172      to MQTT Broker!
   378dc:	0a0d 0000 6e69 7469 735f 6f74 6172 6567     ....init_storage
   378ec:	203a 6c70 6165 6573 7020 756c 2067 6e61     : please plug an
   378fc:	5320 2f44 4d4d 2043 6163 6472 6920 206e      SD/MMC card in 
   3790c:	6c73 746f 2e2e 0d2e 000a 0000 6e69 7469     slot........init
   3791c:	735f 6f74 6172 6567 203a 4453 4320 7261     _storage: SD Car
   3792c:	2064 6e69 7473 6c61 206c 6166 6c69 6465     d install failed
   3793c:	0d2e 000a 6e69 7469 735f 6f74 6172 6567     ....init_storage
   3794c:	203a 7274 2079 6e75 6c70 6775 6120 646e     : try unplug and
   3795c:	7220 2d65 6c70 6775 7420 6568 6320 7261      re-plug the car
   3796c:	2e64 0a0d 0000 0000 6e69 7469 735f 6f74     d.......init_sto
   3797c:	6172 6567 203a 6f6d 6e75 6974 676e 5320     rage: mounting S
   3798c:	2044 6163 6472 2e2e 0d2e 000a 6e69 7469     D card......init
   3799c:	735f 6f74 6172 6567 203a 4453 6320 7261     _storage: SD car
   379ac:	2064 6f6d 6e75 2074 6166 6c69 6465 2021     d mount failed! 
   379bc:	7228 7365 2520 2964 0a0d 0000 6e69 7469     (res %d)....init
   379cc:	735f 6f74 6172 6567 203a 4453 6320 7261     _storage: SD car
   379dc:	2064 6f6d 6e75 2074 4b4f 0d2e 000a 0000     d mount OK......
   379ec:	6f63 666e 6769 7275 5f65 7468 7074 635f     configure_http_c
   379fc:	696c 6e65 3a74 4820 5454 2050 6c63 6569     lient: HTTP clie
   37a0c:	746e 6920 696e 6974 6c61 7a69 7461 6f69     nt initializatio
   37a1c:	206e 6166 6c69 6465 2021 7228 7365 2520     n failed! (res %
   37a2c:	2964 0a0d 0000 0000 0a0d 2520 2a2e 0073     d)........ %.*s.
   37a3c:	6772 2862 0000 0000 0a0d 4752 2042 6425     rgb(......RGB %d
   37a4c:	2520 2064 6425 0a0d 0000 0000 227b 6167      %d %d......{"ga
   37a5c:	656d 3a22 005b 0000 0a0d 6147 656d 6d20     me":[.....Game m
   37a6c:	7365 6173 6567 7220 6365 6965 6576 2164     essage received!
   37a7c:	0a0d 0000 2e25 732a 0000 0000 0a0d 6150     ....%.*s......Pa
   37a8c:	7372 6465 4320 6d6f 616d 646e 203a 0000     rsed Command: ..
   37a9c:	6425 002c 0a0d 6553 746e 7020 616c 2079     %d,...Sent play 
   37aac:	6f74 6320 6e6f 7274 6c6f 0d21 000a 0000     to control!.....
   37abc:	0a0d 6147 656d 6d20 7365 6173 6567 7220     ..Game message r
   37acc:	6365 6965 6576 2064 7562 2074 6f6e 2074     eceived but not 
   37adc:	6e75 6564 7372 6f74 646f 0d21 000a 0000     understood!.....
   37aec:	0a0d 4d49 2055 6f74 6970 2063 6572 6563     ..IMU topic rece
   37afc:	7669 6465 0d21 000a 0a0d 6944 7473 6e61     ived!.....Distan
   37b0c:	6563 7420 706f 6369 7220 6365 6965 6576     ce topic receive
   37b1c:	2164 0a0d 0000 0000 3e20 203e 0000 0000     d!...... >> ....
   37b2c:	3150 4c5f 4445 455f 4553 3135 5f36 3654     P1_LED_ESE516_T6
   37b3c:	0000 0000 6166 736c 0065 0000 7274 6575     ....false...true
   37b4c:	0000 0000 0a0d 6f43 6e6e 6365 6974 676e     ......Connecting
   37b5c:	7420 206f 7242 6b6f 7265 2e2e 002e 0000      to Broker......
   37b6c:	7242 4a73 4e42 6f56 4251 376c 0000 0000     BrsJBNVoQBl7....
   37b7c:	7472 7974 626f 6a65 0000 0000 514d 5454     rttyobej....MQTT
   37b8c:	2020 7245 6f72 2072 202d 4f4e 2054 6f43       Error - NOT Co
   37b9c:	6e6e 6365 6574 2064 6f74 6220 6f72 656b     nnected to broke
   37bac:	0d72 000a 514d 5454 4320 6e6f 656e 7463     r...MQTT Connect
   37bbc:	6465 7420 206f 7262 6b6f 7265 0a0d 0000     ed to broker....
   37bcc:	6f43 6e6e 6365 2074 6166 6c69 7420 206f     Connect fail to 
   37bdc:	6573 7672 7265 2528 2973 2021 6572 7274     server(%s)! retr
   37bec:	2079 7469 6120 7475 6d6f 7461 6369 6c61     y it automatical
   37bfc:	796c 0d2e 000a 0000 3150 475f 4d41 5f45     ly......P1_GAME_
   37c0c:	5345 3545 3631 545f 0036 0000 6f49 7274     ESE516_T6...Iotr
   37c1c:	6361 696b 676e 495f 554d 545f 0036 0000     acking_IMU_T6...
   37c2c:	514d 5454 4320 6e6f 656e 7463 6465 0a0d     MQTT Connected..
   37c3c:	0000 0000 514d 5454 6220 6f72 656b 2072     ....MQTT broker 
   37c4c:	6564 6c63 6e69 2065 6f79 7275 6120 6363     decline your acc
   37c5c:	7365 2173 6520 7272 726f 6320 646f 2065     ess! error code 
   37c6c:	6425 0a0d 0000 0000 514d 5454 6420 7369     %d......MQTT dis
   37c7c:	6f63 6e6e 6365 6574 0d64 000a 514d 5454     connected...MQTT
   37c8c:	6920 696e 6974 6c61 7a69 7461 6f69 206e      initialization 
   37c9c:	6166 6c69 6465 202e 7245 6f72 2072 6f63     failed. Error co
   37cac:	6564 6920 2073 2528 2964 0a0d 0000 0000     de is (%d)......
   37cbc:	514d 5454 7220 6765 7369 6574 2072 6163     MQTT register ca
   37ccc:	6c6c 6162 6b63 6620 6961 656c 2e64 4520     llback failed. E
   37cdc:	7272 726f 6320 646f 2065 7369 2820 6425     rror code is (%d
   37cec:	0d29 000a 227b 2264 7b3a 7422 6d65 2270     )...{"d":{"temp"
   37cfc:	253a 7d64 007d 0000 465b 4941 5d4c 7220     :%d}}...[FAIL] r
   37d0c:	7365 2520 0d64 000a 6c46 6761 2e41 7874     es %d...FlagA.tx
   37d1c:	2074 6461 6564 2164 0a0d 0000 3a30 6c46     t added!....0:Fl
   37d2c:	6761 2e41 7874 0074 6f43 6e6e 6365 6574     agA.txt.Connecte
   37d3c:	2064 6f74 4d20 5451 2054 7242 6b6f 7265     d to MQTT Broker
   37d4c:	0d21 000a 227b 6d69 7875 3a22 6425 202c     !...{"imux":%d, 
   37d5c:	6922 756d 2279 203a 6425 202c 6922 756d     "imuy": %d, "imu
   37d6c:	227a 203a 6425 007d 6425 0000 7d5d 0000     z": %d}.%d..]}..
   37d7c:	0a0d 0000 3250 475f 4d41 5f45 5345 3545     ....P2_GAME_ESE5
   37d8c:	3631 545f 0036 0000 5245 4f52 2052 6e49     16_T6...ERROR In
   37d9c:	7469 6169 696c 697a 676e 5720 6669 2069     itializing Wifi 
   37dac:	6144 6174 7120 6575 6575 2173 0a0d 0000     Data queues!....
   37dbc:	5345 3545 3631 2d20 5720 6669 2069 6e49     ESE516 - Wifi In
   37dcc:	7469 4320 646f 0d65 000a 0000 616d 6e69     it Code.....main
   37ddc:	203a 326d 5f6d 6977 6966 695f 696e 2074     : m2m_wifi_init 
   37dec:	6163 6c6c 6520 7272 726f 2021 7228 7365     call error! (res
   37dfc:	2520 2964 0a0d 0000 616d 6e69 203a 6f63      %d)....main: co
   37e0c:	6e6e 6365 6974 676e 7420 206f 6957 6946     nnecting to WiFi
   37e1c:	4120 2050 7325 2e2e 0d2e 000a 3150 545f      AP %s......P1_T
   37e2c:	4d45 4550 4152 5554 4552 455f 4553 3135     EMPERATURE_ESE51
   37e3c:	5f36 3654 0000 0000 514d 5454 7320 6e65     6_T6....MQTT sen
   37e4c:	2064 7325 0a0d 0000 7184 0001 7190 0001     d %s.....q...q..
   37e5c:	71a2 0001 71f8 0001 7218 0001 6568 706c     .q...q...r..help
   37e6c:	0000 0000 0a0d 6568 706c 0d3a 200a 694c     ......help:.. Li
   37e7c:	7473 2073 6c61 206c 6874 2065 6572 6967     sts all the regi
   37e8c:	7473 7265 6465 6320 6d6f 616d 646e 0d73     stered commands.
   37e9c:	0d0a 000a 6e49 6f63 7272 6365 2074 6f63     ....Incorrect co
   37eac:	6d6d 6e61 2064 6170 6172 656d 6574 2872     mmand parameter(
   37ebc:	2973 202e 4520 746e 7265 2220 6568 706c     s).  Enter "help
   37ecc:	2022 6f74 7620 6569 2077 2061 696c 7473     " to view a list
   37edc:	6f20 2066 7661 6961 616c 6c62 2065 6f63      of available co
   37eec:	6d6d 6e61 7364 0d2e 0d0a 000a 6f43 6d6d     mmands......Comm
   37efc:	6e61 2064 6f6e 2074 6572 6f63 6e67 7369     and not recognis
   37f0c:	6465 202e 4520 746e 7265 2720 6568 706c     ed.  Enter 'help
   37f1c:	2027 6f74 7620 6569 2077 2061 696c 7473     ' to view a list
   37f2c:	6f20 2066 7661 6961 616c 6c62 2065 6f63      of available co
   37f3c:	6d6d 6e61 7364 0d2e 0d0a 000a               mmands......

00037f48 <xHelpCommand>:
   37f48:	7e68 0003 7e70 0003 8e59 0001 0000 0000     h~..p~..Y.......
   37f58:	5476 6172 6563 6e45 6261 656c 5428 4352     vTraceEnable(TRC
   37f68:	535f 4154 5452 415f 4157 5449 485f 534f     _START_AWAIT_HOS
   37f78:	2954 6e20 746f 6120 6c6c 776f 6465 6920     T) not allowed i
   37f88:	206e 6e53 7061 6873 746f 6d20 646f 0065     n Snapshot mode.
   37f98:	6e55 7865 6570 7463 6465 6120 6772 6d75     Unexpected argum
   37fa8:	6e65 2074 6f74 7620 7254 6361 4565 616e     ent to vTraceEna
   37fb8:	6c62 2065 7328 616e 7370 6f68 2074 6f6d     ble (snapshot mo
   37fc8:	6564 0029 7a54 7443 6c72 0000 6f4e 2074     de).TzCtrl..Not 
   37fd8:	6e65 756f 6867 5420 5341 204b 6168 646e     enough TASK hand
   37fe8:	656c 2073 202d 6e69 7263 6165 6573 5420     les - increase T
   37ff8:	4352 435f 4746 4e5f 4154 4b53 6920 206e     RC_CFG_NTASK in 
   38008:	7274 5363 616e 7370 6f68 4374 6e6f 6966     trcSnapshotConfi
   38018:	2e67 0068 6f4e 2074 6e65 756f 6867 4920     g.h.Not enough I
   38028:	5253 6820 6e61 6c64 7365 2d20 6920 636e     SR handles - inc
   38038:	6572 7361 2065 5254 5f43 4643 5f47 494e     rease TRC_CFG_NI
   38048:	5253 6920 206e 7274 5363 616e 7370 6f68     SR in trcSnapsho
   38058:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   38068:	6e65 756f 6867 5320 4d45 5041 4f48 4552     enough SEMAPHORE
   38078:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   38088:	7361 2065 5254 5f43 4643 5f47 534e 4d45     ase TRC_CFG_NSEM
   38098:	5041 4f48 4552 6920 206e 7274 5363 616e     APHORE in trcSna
   380a8:	7370 6f68 4374 6e6f 6966 2e67 0068 0000     pshotConfig.h...
   380b8:	6f4e 2074 6e65 756f 6867 4d20 5455 5845     Not enough MUTEX
   380c8:	6820 6e61 6c64 7365 2d20 6920 636e 6572      handles - incre
   380d8:	7361 2065 5254 5f43 4643 5f47 4d4e 5455     ase TRC_CFG_NMUT
   380e8:	5845 6920 206e 7274 5363 616e 7370 6f68     EX in trcSnapsho
   380f8:	4374 6e6f 6966 2e67 0068 0000 6f4e 2074     tConfig.h...Not 
   38108:	6e65 756f 6867 5120 4555 4555 6820 6e61     enough QUEUE han
   38118:	6c64 7365 2d20 6920 636e 6572 7361 2065     dles - increase 
   38128:	5254 5f43 4643 5f47 514e 4555 4555 6920     TRC_CFG_NQUEUE i
   38138:	206e 7274 5363 616e 7370 6f68 4374 6e6f     n trcSnapshotCon
   38148:	6966 2e67 0068 0000 6f4e 2074 6e65 756f     fig.h...Not enou
   38158:	6867 5420 4d49 5245 6820 6e61 6c64 7365     gh TIMER handles
   38168:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   38178:	4643 5f47 544e 4d49 5245 6920 206e 7274     CFG_NTIMER in tr
   38188:	5363 616e 7370 6f68 4374 6e6f 6966 2e67     cSnapshotConfig.
   38198:	0068 0000 6f4e 2074 6e65 756f 6867 4520     h...Not enough E
   381a8:	4556 544e 5247 554f 2050 6168 646e 656c     VENTGROUP handle
   381b8:	2073 202d 6e69 7263 6165 6573 5420 4352     s - increase TRC
   381c8:	435f 4746 4e5f 5645 4e45 4754 4f52 5055     _CFG_NEVENTGROUP
   381d8:	6920 206e 7274 5363 616e 7370 6f68 4374      in trcSnapshotC
   381e8:	6e6f 6966 2e67 0068 6f4e 2074 6e65 756f     onfig.h.Not enou
   381f8:	6867 5320 5254 4145 424d 4655 4546 2052     gh STREAMBUFFER 
   38208:	6168 646e 656c 2073 202d 6e69 7263 6165     handles - increa
   38218:	6573 5420 4352 435f 4746 4e5f 5453 4552     se TRC_CFG_NSTRE
   38228:	4d41 5542 4646 5245 6920 206e 7274 5363     AMBUFFER in trcS
   38238:	616e 7370 6f68 4374 6e6f 6966 2e67 0068     napshotConfig.h.
   38248:	6f4e 2074 6e65 756f 6867 4d20 5345 4153     Not enough MESSA
   38258:	4547 5542 4646 5245 6820 6e61 6c64 7365     GEBUFFER handles
   38268:	2d20 6920 636e 6572 7361 2065 5254 5f43      - increase TRC_
   38278:	4643 5f47 4d4e 5345 4153 4547 5542 4646     CFG_NMESSAGEBUFF
   38288:	5245 6920 206e 7274 5363 616e 7370 6f68     ER in trcSnapsho
   38298:	4374 6e6f 6966 2e67 0068 0000 7370 547a     tConfig.h...pszT
   382a8:	6172 6563 6547 4574 7272 726f 6148 646e     raceGetErrorHand
   382b8:	656c 3a73 4920 766e 6c61 6469 6f20 6a62     les: Invalid obj
   382c8:	6365 6374 616c 7373 0021 0000 957e 0001     ectclass!...~...
   382d8:	9576 0001 957a 0001 956e 0001 9572 0001     v...z...n...r...
   382e8:	9582 0001 9586 0001 958a 0001 958e 0001     ................
   382f8:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   38308:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   38318:	6c61 7a69 6465 202e 7355 2065 5476 6172     alized. Use vTra
   38328:	6563 6e45 6261 656c 2928 6920 736e 6574     ceEnable() inste
   38338:	6461 0021 7328 6174 7472 7075 0029 0000     ad!.(startup)...
   38348:	5254 4341 5f45 5341 4553 5452 203a 6552     TRACE_ASSERT: Re
   38358:	6f63 6472 7265 6e20 746f 6920 696e 6974     corder not initi
   38368:	6c61 7a69 6465 202c 6163 6c6c 7620 7254     alized, call vTr
   38378:	6361 4565 616e 6c62 2865 2029 6966 7372     aceEnable() firs
   38388:	2174 0000 5254 4341 5f45 5341 4553 5452     t!..TRACE_ASSERT
   38398:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   383a8:	706f 7265 6974 7365 203a 6e49 6176 696c     operties: Invali
   383b8:	2064 6176 756c 2065 6f66 2072 6168 646e     d value for hand
   383c8:	656c 0000 5254 4341 5f45 5341 4553 5452     le..TRACE_ASSERT
   383d8:	203a 5478 6172 6563 6553 4974 5253 7250     : xTraceSetISRPr
   383e8:	706f 7265 6974 7365 203a 616e 656d 3d20     operties: name =
   383f8:	203d 554e 4c4c 0000 5476 6172 6563 7453     = NULL..vTraceSt
   38408:	726f 4965 5253 6542 6967 206e 202d 6572     oreISRBegin - re
   38418:	6f63 6472 7265 6220 7375 2179 5320 6565     corder busy! See
   38428:	6320 646f 2065 6f63 6d6d 6e65 2e74 0000      code comment...
   38438:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   38448:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   38458:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   38468:	6e61 6c64 2065 4e28 4c55 294c 0000 0000     andle (NULL)....
   38478:	5254 4341 5f45 5341 4553 5452 203a 5476     TRACE_ASSERT: vT
   38488:	6172 6563 7453 726f 4965 5253 6542 6967     raceStoreISRBegi
   38498:	3a6e 4920 766e 6c61 6469 4920 5253 6820     n: Invalid ISR h
   384a8:	6e61 6c64 2065 3e28 4e20 5349 2952 0000     andle (> NISR)..
   384b8:	6f54 206f 616d 796e 6e20 7365 6574 2064     Too many nested 
   384c8:	6e69 6574 7272 7075 7374 0021 5476 6172     interrupts!.vTra
   384d8:	6563 7453 726f 4965 5253 6e45 2064 202d     ceStoreISREnd - 
   384e8:	6572 6f63 6472 7265 6220 7375 2179 5320     recorder busy! S
   384f8:	6565 6320 646f 2065 6f63 6d6d 6e65 2e74     ee code comment.
   38508:	0000 0000 6e55 616d 6374 6568 2064 6163     ....Unmatched ca
   38518:	6c6c 7420 206f 5476 6172 6563 7453 726f     ll to vTraceStor
   38528:	4965 5253 6e45 2064 6e28 5349 6152 7463     eISREnd (nISRact
   38538:	7669 2065 3d3d 3020 202c 7865 6570 7463     ive == 0, expect
   38548:	6465 3e20 3020 0029 5254 4341 5f45 5341     ed > 0).TRACE_AS
   38558:	4553 5452 203a 7277 7469 4965 746e 3a38     SERT: writeInt8:
   38568:	6220 6675 6566 2072 3d3d 4e20 4c55 004c      buffer == NULL.
   38578:	5254 4341 5f45 5341 4553 5452 203a 7277     TRACE_ASSERT: wr
   38588:	7469 4965 746e 3631 203a 7562 6666 7265     iteInt16: buffer
   38598:	3d20 203d 554e 4c4c 0000 0000 5254 4341      == NULL....TRAC
   385a8:	5f45 5341 4553 5452 203a 7277 7469 4965     E_ASSERT: writeI
   385b8:	746e 3233 203a 7562 6666 7265 3d20 203d     nt32: buffer == 
   385c8:	554e 4c4c 0000 0000 5476 6172 6563 7250     NULL....vTracePr
   385d8:	6e69 4674 2d20 5420 6f6f 6d20 6e61 2079     intF - Too many 
   385e8:	7261 7567 656d 746e 2c73 6d20 7861 3120     arguments, max 1
   385f8:	2035 6c61 6f6c 6577 2164 0000 5476 6172     5 allowed!..vTra
   38608:	6563 7250 6e69 4674 2d20 5420 6f6f 6c20     cePrintF - Too l
   38618:	7261 6567 6120 6772 6d75 6e65 7374 202c     arge arguments, 
   38628:	616d 2078 3233 6220 7479 2065 6c61 6f6c     max 32 byte allo
   38638:	6577 2164 0000 0000 5254 4341 5f45 5341     wed!....TRACE_AS
   38648:	4553 5452 203a 5476 6172 6563 5056 6972     SERT: vTraceVPri
   38658:	746e 3a46 6620 726f 616d 5374 7274 3d20     ntF: formatStr =
   38668:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   38678:	4553 5452 203a 5478 6172 6563 6552 6967     SERT: xTraceRegi
   38688:	7473 7265 7453 6972 676e 203a 616c 6562     sterString: labe
   38698:	206c 3d3d 4e20 4c55 004c 0000 5254 4341     l == NULL...TRAC
   386a8:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   386b8:	6563 7453 726f 5465 7361 526b 6165 7964     ceStoreTaskReady
   386c8:	203a 6e49 6176 696c 2064 6176 756c 2065     : Invalid value 
   386d8:	6f66 2072 6168 646e 656c 0000 6552 6f63     for handle..Reco
   386e8:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   386f8:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   38708:	6e69 2067 7973 6373 6c61 3f6c 2820 2931     ing syscall? (1)
   38718:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   38728:	203a 7270 5476 6172 6563 7453 726f 4c65     : prvTraceStoreL
   38738:	776f 6f50 6577 3a72 4920 766e 6c61 6469     owPower: Invalid
   38748:	6620 616c 2067 6176 756c 0065 5254 4341      flag value.TRAC
   38758:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38768:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   38778:	3a6c 6520 6f63 6564 3e20 203d 7830 4646     l: ecode >= 0xFF
   38788:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   38798:	203a 7270 5476 6172 6563 7453 726f 4b65     : prvTraceStoreK
   387a8:	7265 656e 436c 6c61 3a6c 6f20 6a62 6365     ernelCall: objec
   387b8:	4374 616c 7373 3e20 203d 5254 4341 5f45     tClass >= TRACE_
   387c8:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   387d8:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   387e8:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   387f8:	3a6c 4920 766e 6c61 6469 7620 6c61 6575     l: Invalid value
   38808:	6620 726f 6f20 6a62 6365 4e74 6d75 6562      for objectNumbe
   38818:	0072 0000 6552 6f63 6472 7265 6220 7375     r...Recorder bus
   38828:	2079 202d 6968 6867 7020 6972 726f 7469     y - high priorit
   38838:	2079 5349 2052 7375 6e69 2067 7973 6373     y ISR using sysc
   38848:	6c61 3f6c 2820 2932 0000 0000 5254 4341     all? (2)....TRAC
   38858:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38868:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   38878:	576c 7469 5068 7261 6d61 203a 7665 6374     lWithParam: evtc
   38888:	646f 2065 3d3e 3020 4678 0046 5254 4341     ode >= 0xFF.TRAC
   38898:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   388a8:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   388b8:	576c 7469 5068 7261 6d61 203a 626f 656a     lWithParam: obje
   388c8:	7463 6c43 7361 2073 3d3e 5420 4152 4543     ctClass >= TRACE
   388d8:	4e5f 4c43 5341 4553 0053 0000 5254 4341     _NCLASSES...TRAC
   388e8:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   388f8:	6563 7453 726f 4b65 7265 656e 436c 6c61     ceStoreKernelCal
   38908:	576c 7469 5068 7261 6d61 203a 6e49 6176     lWithParam: Inva
   38918:	696c 2064 6176 756c 2065 6f66 2072 626f     lid value for ob
   38928:	656a 7463 754e 626d 7265 0000 6552 6f63     jectNumber..Reco
   38938:	6472 7265 6220 7375 2079 202d 6968 6867     rder busy - high
   38948:	7020 6972 726f 7469 2079 5349 2052 7375      priority ISR us
   38958:	6e69 2067 7973 6373 6c61 3f6c 2820 2933     ing syscall? (3)
   38968:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   38978:	203a 7270 5476 6172 6563 6547 5074 7261     : prvTraceGetPar
   38988:	6d61 203a 6e49 6176 696c 2064 6176 756c     am: Invalid valu
   38998:	2065 6f66 2072 6170 6172 5f6d 616d 0078     e for param_max.
   389a8:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   389b8:	5476 6172 6563 7453 726f 4b65 7265 656e     vTraceStoreKerne
   389c8:	436c 6c61 576c 7469 4e68 6d75 7265 6369     lCallWithNumeric
   389d8:	6150 6172 4f6d 6c6e 3a79 4920 766e 6c61     ParamOnly: Inval
   389e8:	6469 7620 6c61 6575 6620 726f 6520 7476     id value for evt
   389f8:	6f63 6564 0000 0000 6552 6f63 6472 7265     code....Recorder
   38a08:	6220 7375 2079 202d 6968 6867 7020 6972      busy - high pri
   38a18:	726f 7469 2079 5349 2052 7375 6e69 2067     ority ISR using 
   38a28:	7973 6373 6c61 3f6c 2820 2934 0000 0000     syscall? (4)....
   38a38:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38a48:	5476 6172 6563 7453 726f 5465 7361 736b     vTraceStoreTasks
   38a58:	6977 6374 3a68 4920 766e 6c61 6469 7620     witch: Invalid v
   38a68:	6c61 6575 6620 726f 7420 7361 5f6b 6168     alue for task_ha
   38a78:	646e 656c 0000 0000 5254 4341 5f45 5341     ndle....TRACE_AS
   38a88:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   38a98:	726f 4f65 6a62 6365 4e74 6d61 4f65 436e     oreObjectNameOnC
   38aa8:	6f6c 6573 7645 6e65 3a74 6f20 6a62 6365     loseEvent: objec
   38ab8:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   38ac8:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   38ad8:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38ae8:	6563 7453 726f 4f65 6a62 6365 4e74 6d61     ceStoreObjectNam
   38af8:	4f65 436e 6f6c 6573 7645 6e65 3a74 4920     eOnCloseEvent: I
   38b08:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   38b18:	6820 6e61 6c64 0065 5254 4341 5f45 5341      handle.TRACE_AS
   38b28:	4553 5452 203a 7270 5476 6172 6563 7453     SERT: prvTraceSt
   38b38:	726f 4f65 6a62 6365 5074 6f72 6570 7472     oreObjectPropert
   38b48:	6569 4f73 436e 6f6c 6573 7645 6e65 3a74     iesOnCloseEvent:
   38b58:	6f20 6a62 6365 6374 616c 7373 3e20 203d      objectclass >= 
   38b68:	5254 4341 5f45 434e 414c 5353 5345 0000     TRACE_NCLASSES..
   38b78:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38b88:	5476 6172 6563 7453 726f 4f65 6a62 6365     vTraceStoreObjec
   38b98:	5074 6f72 6570 7472 6569 4f73 436e 6f6c     tPropertiesOnClo
   38ba8:	6573 7645 6e65 3a74 4920 766e 6c61 6469     seEvent: Invalid
   38bb8:	7620 6c61 6575 6620 726f 6820 6e61 6c64      value for handl
   38bc8:	0065 0000 5254 4341 5f45 5341 4553 5452     e...TRACE_ASSERT
   38bd8:	203a 7270 5476 6172 6563 6553 5074 6972     : prvTraceSetPri
   38be8:	726f 7469 5079 6f72 6570 7472 3a79 6f20     orityProperty: o
   38bf8:	6a62 6365 6374 616c 7373 3e20 203d 5254     bjectclass >= TR
   38c08:	4341 5f45 434e 414c 5353 5345 0000 0000     ACE_NCLASSES....
   38c18:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38c28:	5476 6172 6563 6553 5074 6972 726f 7469     vTraceSetPriorit
   38c38:	5079 6f72 6570 7472 3a79 4920 766e 6c61     yProperty: Inval
   38c48:	6469 7620 6c61 6575 6620 726f 6920 0064     id value for id.
   38c58:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38c68:	5476 6172 6563 6547 5074 6972 726f 7469     vTraceGetPriorit
   38c78:	5079 6f72 6570 7472 3a79 6f20 6a62 6365     yProperty: objec
   38c88:	6374 616c 7373 3e20 203d 5254 4341 5f45     tclass >= TRACE_
   38c98:	434e 414c 5353 5345 0000 0000 5254 4341     NCLASSES....TRAC
   38ca8:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38cb8:	6563 6547 5074 6972 726f 7469 5079 6f72     ceGetPriorityPro
   38cc8:	6570 7472 3a79 4920 766e 6c61 6469 7620     perty: Invalid v
   38cd8:	6c61 6575 6620 726f 6920 0064 5254 4341     alue for id.TRAC
   38ce8:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38cf8:	6563 6553 4f74 6a62 6365 5374 6174 6574     ceSetObjectState
   38d08:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   38d18:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   38d28:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38d38:	5476 6172 6563 6553 4f74 6a62 6365 5374     vTraceSetObjectS
   38d48:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   38d58:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   38d68:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38d78:	6563 6547 4f74 6a62 6365 5374 6174 6574     ceGetObjectState
   38d88:	203a 626f 656a 7463 6c63 7361 2073 3d3e     : objectclass >=
   38d98:	5420 4152 4543 4e5f 4c43 5341 4553 0053      TRACE_NCLASSES.
   38da8:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38db8:	5476 6172 6563 6547 4f74 6a62 6365 5374     vTraceGetObjectS
   38dc8:	6174 6574 203a 6e49 6176 696c 2064 6176     tate: Invalid va
   38dd8:	756c 2065 6f66 2072 6469 0000 5254 4341     lue for id..TRAC
   38de8:	5f45 5341 4553 5452 203a 7270 5476 6172     E_ASSERT: prvTra
   38df8:	6563 6553 5474 7361 496b 736e 6174 636e     ceSetTaskInstanc
   38e08:	4665 6e69 7369 6568 3a64 4920 766e 6c61     eFinished: Inval
   38e18:	6469 7620 6c61 6575 6620 726f 6820 6e61     id value for han
   38e28:	6c64 0065 7254 6361 2065 6552 6f63 6472     dle.Trace Record
   38e38:	7265 4420 6d65 006f 7441 6574 706d 2074     er Demo.Attempt 
   38e48:	6f74 6920 646e 7865 6f20 7475 6973 6564     to index outside
   38e58:	6520 6576 746e 6220 6675 6566 2172 0000      event buffer!..
   38e68:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   38e78:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   38e88:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   38e98:	6f20 6a62 6365 6374 616c 7373 0000 0000      objectclass....
   38ea8:	5254 4341 5f45 5341 4553 5452 203a 6975     TRACE_ASSERT: ui
   38eb8:	6e49 6564 4f78 4f66 6a62 6365 3a74 4920     IndexOfObject: I
   38ec8:	766e 6c61 6469 7620 6c61 6575 6620 726f     nvalid value for
   38ed8:	6f20 6a62 6365 6874 6e61 6c64 0065 0000      objecthandle...
   38ee8:	624f 656a 7463 7420 6261 656c 6c20 6f6f     Object table loo
   38ef8:	756b 2070 6977 6874 6920 766e 6c61 6469     kup with invalid
   38f08:	6f20 6a62 6365 2074 6168 646e 656c 6f20      object handle o
   38f18:	2072 626f 656a 7463 6320 616c 7373 0021     r object class!.
   38f28:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38f38:	5476 6172 6563 6547 4f74 6a62 6365 4874     vTraceGetObjectH
   38f48:	6e61 6c64 3a65 4920 766e 6c61 6469 7620     andle: Invalid v
   38f58:	6c61 6575 6620 726f 6f20 6a62 6365 6374     alue for objectc
   38f68:	616c 7373 0000 0000 5254 4341 5f45 5341     lass....TRACE_AS
   38f78:	4553 5452 203a 7270 5476 6172 6563 7246     SERT: prvTraceFr
   38f88:	6565 624f 656a 7463 6148 646e 656c 203a     eeObjectHandle: 
   38f98:	6e49 6176 696c 2064 6176 756c 2065 6f66     Invalid value fo
   38fa8:	2072 626f 656a 7463 6c63 7361 0073 0000     r objectclass...
   38fb8:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   38fc8:	5476 6172 6563 7246 6565 624f 656a 7463     vTraceFreeObject
   38fd8:	6148 646e 656c 203a 6e49 6176 696c 2064     Handle: Invalid 
   38fe8:	6176 756c 2065 6f66 2072 6168 646e 656c     value for handle
   38ff8:	0000 0000 7441 6574 706d 2074 6f74 6620     ....Attempt to f
   39008:	6572 2065 6f6d 6572 6820 6e61 6c64 7365     ree more handles
   39018:	7420 6168 206e 6c61 6f6c 6163 6574 2164      than allocated!
   39028:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   39038:	203a 7270 5476 6172 6563 6553 4f74 6a62     : prvTraceSetObj
   39048:	6365 4e74 6d61 3a65 6e20 6d61 2065 3d3d     ectName: name ==
   39058:	4e20 4c55 004c 0000 6c49 656c 6167 206c      NULL...Illegal 
   39068:	626f 656a 7463 6320 616c 7373 6920 206e     object class in 
   39078:	7270 5476 6172 6563 6553 4f74 6a62 6365     prvTraceSetObjec
   39088:	4e74 6d61 0065 0000 6c49 656c 6167 206c     tName...Illegal 
   39098:	6168 646e 656c 2820 2930 6920 206e 7270     handle (0) in pr
   390a8:	5476 6172 6563 6553 4f74 6a62 6365 4e74     vTraceSetObjectN
   390b8:	6d61 2e65 0000 0000 5254 4341 5f45 5341     ame.....TRACE_AS
   390c8:	4553 5452 203a 7270 5476 6172 6563 704f     SERT: prvTraceOp
   390d8:	6e65 7953 626d 6c6f 203a 616e 656d 3d20     enSymbol: name =
   390e8:	203d 554e 4c4c 0000 5254 4341 5f45 5341     = NULL..TRACE_AS
   390f8:	4553 5452 203a 7270 4376 6568 6b63 6144     SERT: prvCheckDa
   39108:	6174 6f54 6542 764f 7265 7277 7469 6574     taToBeOverwritte
   39118:	466e 726f 754d 746c 4569 746e 7972 7645     nForMultiEntryEv
   39128:	6e65 7374 203a 6f6e 4566 746e 6972 7365     ents: nofEntries
   39138:	6f54 6843 6365 206b 3d3d 3020 0000 0000     ToCheck == 0....
   39148:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   39158:	5476 6172 6563 6547 4474 5354 203a 6e49     vTraceGetDTS: In
   39168:	6176 696c 2064 6176 756c 2065 6f66 2072     valid value for 
   39178:	6170 6172 5f6d 616d 4478 5354 0000 0000     param_maxDTS....
   39188:	6142 2064 6170 6172 5f6d 616d 4478 5354     Bad param_maxDTS
   39198:	6920 206e 7270 5476 6172 6563 6547 4474      in prvTraceGetD
   391a8:	5354 0000 5254 4341 5f45 5341 4553 5452     TS..TRACE_ASSERT
   391b8:	203a 7270 5476 6172 6563 6f4c 6b6f 7075     : prvTraceLookup
   391c8:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   391d8:	203a 616e 656d 3d20 203d 554e 4c4c 0000     : name == NULL..
   391e8:	5254 4341 5f45 5341 4553 5452 203a 7270     TRACE_ASSERT: pr
   391f8:	5476 6172 6563 6f4c 6b6f 7075 7953 626d     vTraceLookupSymb
   39208:	6c6f 6154 6c62 4565 746e 7972 203a 656c     olTableEntry: le
   39218:	206e 3d3d 3020 0000 5254 4341 5f45 5341     n == 0..TRACE_AS
   39228:	4553 5452 203a 7270 5476 6172 6563 7243     SERT: prvTraceCr
   39238:	6165 6574 7953 626d 6c6f 6154 6c62 4565     eateSymbolTableE
   39248:	746e 7972 203a 616e 656d 3d20 203d 554e     ntry: name == NU
   39258:	4c4c 0000 5254 4341 5f45 5341 4553 5452     LL..TRACE_ASSERT
   39268:	203a 7270 5476 6172 6563 7243 6165 6574     : prvTraceCreate
   39278:	7953 626d 6c6f 6154 6c62 4565 746e 7972     SymbolTableEntry
   39288:	203a 656c 206e 3d3d 3020 0000 7953 626d     : len == 0..Symb
   39298:	6c6f 7420 6261 656c 6620 6c75 2e6c 4920     ol table full. I
   392a8:	636e 6572 7361 2065 5254 5f43 4643 5f47     ncrease TRC_CFG_
   392b8:	5953 424d 4c4f 545f 4241 454c 535f 5a49     SYMBOL_TABLE_SIZ
   392c8:	2045 6e69 7420 6372 6f43 666e 6769 682e     E in trcConfig.h
   392d8:	0000 0000 5254 4341 5f45 5341 4553 5452     ....TRACE_ASSERT
   392e8:	203a 7270 5476 6172 6563 6547 4374 6568     : prvTraceGetChe
   392f8:	6b63 7573 3a6d 7020 616e 656d 3d20 203d     cksum: pname == 
   39308:	554e 4c4c 0000 0000 5254 4341 5f45 5341     NULL....TRACE_AS
   39318:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   39328:	4374 6568 6b63 7573 3a6d 7020 7263 2063     tChecksum: pcrc 
   39338:	3d3d 4e20 4c55 004c 5254 4341 5f45 5341     == NULL.TRACE_AS
   39348:	4553 5452 203a 7270 5476 6172 6563 6547     SERT: prvTraceGe
   39358:	4374 6568 6b63 7573 3a6d 7020 656c 676e     tChecksum: pleng
   39368:	6874 3d20 203d 554e 4c4c 0000 4449 454c     th == NULL..IDLE
   39378:	0000 0000 6d54 2072 7653 0063 e618 0001     ....Tmr Svc.....
   39388:	e618 0001 e618 0001 e6a6 0001 e670 0001     ............p...
   39398:	e69a 0001 e618 0001 e618 0001 e6a6 0001     ................
   393a8:	e670 0001                                   p...

000393ac <sd_mmc_trans_units>:
   393ac:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

000393c8 <sd_trans_multipliers>:
   393c8:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   393d8:	000f 0000 0014 0000 0019 0000 001e 0000     ................
   393e8:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
   393f8:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

00039408 <mmc_trans_multipliers>:
   39408:	0000 0000 000a 0000 000c 0000 000d 0000     ................
   39418:	000f 0000 0014 0000 001a 0000 001e 0000     ................
   39428:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
   39438:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
   39448:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   39458:	5d64 0000 6e69 6176 696c 6564 6920 636f     d]..invalide ioc
   39468:	746c 6320 646d 000a 000d 0000               lt cmd......

00039474 <__FUNCTION__.17099>:
   39474:	6d6e 625f 7375 695f 636f 6c74 0000 0000     nm_bus_ioctl....
   39484:	4128 5050 2829 4e49 4f46 0029 6c53 776f     (APP)(INFO).Slow
   39494:	6e69 2067 6f64 6e77 2e2e 0a2e 0000 0000     ing down........
   394a4:	000d 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   394b4:	5d73 255b 5d64 0000 4828 4649 4629 6961     s][%d]..(HIF)Fai
   394c4:	206c 6f74 7720 6b61 7075 7420 6568 6320     l to wakup the c
   394d4:	6968 0a70 0000 0000 6828 6669 2029 4957     hip.....(hif) WI
   394e4:	4946 485f 534f 5f54 4352 5f56 5443 4c52     FI_HOST_RCV_CTRL
   394f4:	315f 6220 7375 6620 6961 0a6c 0000 0000     _1 bus fail.....
   39504:	6828 6669 2029 6461 7264 7365 2073 7562     (hif) address bu
   39514:	2073 6166 6c69 000a 6828 6669 2029 6f43     s fail..(hif) Co
   39524:	7272 7075 6574 2064 6170 6b63 7465 5320     rrupted packet S
   39534:	7a69 2065 203d 7525 3c20 204c 203d 7525     ize = %u <L = %u
   39544:	202c 2047 203d 7525 202c 504f 3d20 2520     , G = %u, OP = %
   39554:	3230 3e58 000a 0000 4957 4946 6320 6c61     02X>....WIFI cal
   39564:	626c 6361 206b 7369 6e20 746f 7220 6765     lback is not reg
   39574:	7369 6574 6572 0a64 0000 0000 6353 6b6f     istered.....Scok
   39584:	7465 6320 6c61 626c 6361 206b 7369 6e20     et callback is n
   39594:	746f 7220 6765 7369 6574 6572 0a64 0000     ot registered...
   395a4:	744f 2061 6163 6c6c 6162 6b63 6920 2073     Ota callback is 
   395b4:	6f6e 2074 6572 6967 7473 7265 6465 000a     not registered..
   395c4:	7243 7079 6f74 6320 6c61 626c 6361 206b     Crypto callback 
   395d4:	7369 6e20 746f 7220 6765 7369 6574 6572     is not registere
   395e4:	0a64 0000 6953 6d67 2061 6163 6c6c 6162     d...Sigma callba
   395f4:	6b63 6920 2073 6f6e 2074 6572 6967 7473     ck is not regist
   39604:	7265 6465 000a 0000 6828 6669 2029 6e69     ered....(hif) in
   39614:	6176 696c 2064 7267 756f 2070 4449 000a     valid group ID..
   39624:	6828 6669 2029 6f68 7473 6120 7070 6420     (hif) host app d
   39634:	6469 276e 2074 6573 2074 5852 4420 6e6f     idn't set RX Don
   39644:	2065 253c 3e75 253c 3e58 000a 6828 6669     e <%u><%X>..(hif
   39654:	2029 7257 6e6f 2067 6953 657a 000a 0000     ) Wrong Size....
   39664:	6828 6669 2029 6146 736c 2065 6e69 6574     (hif) False inte
   39674:	7272 7075 2074 6c25 0078 0000 6828 6669     rrupt %lx...(hif
   39684:	2029 6146 6c69 7420 206f 6552 6461 6920     ) Fail to Read i
   39694:	746e 7265 7572 7470 7220 6765 000a 0000     nterrupt reg....
   396a4:	4828 4649 2029 6146 6c69 7420 206f 6168     (HIF) Fail to ha
   396b4:	646e 656c 6920 746e 7265 7572 7470 2520     ndle interrupt %
   396c4:	2064 7274 2079 6741 6961 2e6e 0a2e 0000     d try Again.....
   396d4:	6820 6669 725f 6365 6965 6576 203a 6e49      hif_receive: In
   396e4:	6176 696c 2064 7261 7567 656d 746e 000a     valid argument..
   396f4:	5041 2050 6552 7571 7365 6574 2064 6953     APP Requested Si
   39704:	657a 6920 2073 616c 6772 7265 7420 6168     ze is larger tha
   39714:	206e 6874 2065 6572 6963 6576 2064 7562     n the recived bu
   39724:	6666 7265 7320 7a69 2065 253c 3e75 253c     ffer size <%u><%
   39734:	756c 0a3e 0000 0000 5041 2050 6552 7571     lu>.....APP Requ
   39744:	7365 6574 2064 6441 7264 7365 2073 6562     ested Address be
   39754:	6f79 646e 7420 6568 7220 6365 7669 6465     yond the recived
   39764:	6220 6675 6566 2072 6461 7264 7365 2073      buffer address 
   39774:	6e61 2064 656c 676e 6874 000a 5247 2070     and length..GRp 
   39784:	203f 6425 000a 0000 27b8 0002 2788 0002     ? %d.....'...'..
   39794:	2780 0002 2798 0002 2790 0002 27b0 0002     .'...'...'...'..
   397a4:	27a0 0002 27a8 0002                         .'...'..

000397ac <__FUNCTION__.17967>:
   397ac:	6968 5f66 6573 646e 0000 0000               hif_send....

000397b8 <__FUNCTION__.17977>:
   397b8:	6968 5f66 7369 0072                         hif_isr.

000397c0 <__FUNCTION__.17986>:
   397c0:	6968 5f66 6168 646e 656c 695f 7273 0000     hif_handle_isr..

000397d0 <__FUNCTION__.17998>:
   397d0:	6968 5f66 6572 6563 7669 0065               hif_receive.

000397dc <__FUNCTION__.18014>:
   397dc:	6968 5f66 6572 6967 7473 7265 635f 0062     hif_register_cb.
   397ec:	4128 5050 2829 4e49 4f46 0029 6f43 666e     (APP)(INFO).Conf
   397fc:	696c 7463 6465 4920 2050 2022 7525 252e     licted IP " %u.%
   3980c:	2e75 7525 252e 2075 2022 000a 000d 0000     u.%u.%u " ......
   3981c:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   3982c:	5d64 0000 4552 2051 6f4e 2074 6564 6966     d]..REQ Not defi
   3983c:	656e 2064 6425 000a 4e49 4156 494c 2044     ned %d..INVALID 
   3984c:	4f50 4e49 4554 0a52 0000 0000 4e49 4156     POINTER.....INVA
   3985c:	494c 2044 5353 4449 000a 0000 4e49 4156     LID SSID....INVA
   3986c:	494c 2044 4843 000a 4e49 4156 494c 2044     LID CH..INVALID 
   3987c:	4844 5043 5320 5245 4556 2052 5049 000a     DHCP SERVER IP..
   3988c:	4e49 4156 494c 2044 454b 2059 4e49 4544     INVALID KEY INDE
   3989c:	0a58 0000 4e49 4156 494c 2044 454b 2059     X...INVALID KEY 
   398ac:	5453 4952 474e 5320 5a49 0a45 0000 0000     STRING SIZE.....
   398bc:	4e49 4156 494c 2044 454b 2059 4953 455a     INVALID KEY SIZE
   398cc:	000a 0000 4e49 4156 494c 2044 5057 2041     ....INVALID WPA 
   398dc:	454b 2059 4953 455a 000a 0000 4e49 4156     KEY SIZE....INVA
   398ec:	494c 2044 5541 4854 4e45 4954 4143 4954     LID AUTHENTICATI
   398fc:	4e4f 4d20 444f 0a45 0000 0000 4e49 4156     ON MODE.....INVA
   3990c:	494c 2044 6f4e 6f20 2066 6373 6e61 7320     LID No of scan s
   3991c:	6f6c 7374 2021 6425 000a 0000 4e49 4156     lots! %d....INVA
   3992c:	494c 2044 6373 6e61 7320 6f6c 2074 6974     LID scan slot ti
   3993c:	656d 2021 6425 000a 4e49 4156 494c 2044     me! %d..INVALID 
   3994c:	6f4e 6f20 2066 7270 626f 2065 6572 7571     No of probe requ
   3995c:	7365 7374 7020 7265 7320 6163 206e 6c73     ests per scan sl
   3996c:	746f 2520 0a64 0000 4e49 4156 494c 2044     ot %d...INVALID 
   3997c:	5352 4953 7420 7268 7365 6f68 646c 2520     RSSI threshold %
   3998c:	2064 000a 6946 6d72 6177 6572 7620 7265     d ..Firmware ver
   3999c:	2020 3a20 2520 2e75 7525 252e 2075 7653        : %u.%u.%u Sv
   399ac:	726e 7665 2520 0a75 0000 0000 6946 6d72     nrev %u.....Firm
   399bc:	6177 6572 4220 6975 646c 2520 2073 6954     ware Build %s Ti
   399cc:	656d 2520 0a73 0000 6946 6d72 6177 6572     me %s...Firmware
   399dc:	4d20 6e69 6420 6972 6576 2072 6576 2072      Min driver ver 
   399ec:	203a 7525 252e 2e75 7525 000a 7244 7669     : %u.%u.%u..Driv
   399fc:	7265 7620 7265 203a 7525 252e 2e75 7525     er ver: %u.%u.%u
   39a0c:	000a 0000 3831 353a 3a39 3434 0000 0000     ....18:59:44....
   39a1c:	7041 2072 3332 3220 3230 0032 7244 7669     Apr 23 2022.Driv
   39a2c:	7265 6220 6975 746c 6120 2074 7325 2509     er built at %s.%
   39a3c:	0a73 0000 694d 6d73 7461 6863 4620 7269     s...Mismatch Fir
   39a4c:	616d 7277 2065 6556 7372 6f69 0a6e 0000     mawre Version...
   39a5c:	654b 2079 7369 6e20 746f 7620 6c61 6469     Key is not valid
   39a6c:	000a 0000 6e49 6176 696c 2064 654b 0a79     ....Invalid Key.
   39a7c:	0000 0000 5353 4449 4c20 4e45 4920 564e     ....SSID LEN INV
   39a8c:	4c41 4449 000a 0000 4843 4920 564e 4c41     ALID....CH INVAL
   39a9c:	4449 000a 6e49 6176 696c 2064 6557 2070     ID..Invalid Wep 
   39aac:	656b 2079 6e69 6564 2078 6425 000a 0000     key index %d....
   39abc:	6e49 6176 696c 2064 6557 2070 656b 2079     Invalid Wep key 
   39acc:	656c 676e 6874 2520 0a64 0000 6e49 6f63     length %d...Inco
   39adc:	7272 6365 2074 5350 204b 656b 2079 656c     rrect PSK key le
   39aec:	676e 6874 000a 0000 6e75 6564 6966 656e     ngth....undefine
   39afc:	2064 6573 2063 7974 6570 000a 505f 5f53     d sec type.._PS_
   39b0c:	4553 5652 5245 205f 7369 6e20 746f 6420     SERVER_ is not d
   39b1c:	6665 6e69 6465 000a 694c 7473 6e65 6320     efined..Listen c
   39b2c:	6168 6e6e 6c65 7320 6f68 6c75 2064 6e6f     hannel should on
   39b3c:	796c 6220 2065 324d 5f4d 4957 4946 435f     ly be M2M_WIFI_C
   39b4c:	5f48 2f31 2f36 3131 0a20 0000 4f50 4557     H_1/6/11 ...POWE
   39b5c:	2052 4153 4556 2520 0a64 0000 4e49 4156     R SAVE %d...INVA
   39b6c:	494c 2044 4f44 414d 4e49 4e20 4d41 0a45     LID DOMAIN NAME.
   39b7c:	0000 0000 5250 474e 4220 6675 6566 2072     ....PRNG Buffer 
   39b8c:	7865 6563 6465 6465 6d20 7861 6d69 6d75     exceeded maximum
   39b9c:	7320 7a69 2065 6425 6f20 2072 554e 4c4c      size %d or NULL
   39bac:	4220 6675 6566 0a72 0000 0000                Buffer.....

00039bb8 <__FUNCTION__.17949>:
   39bb8:	326d 5f6d 6977 6966 635f 0062               m2m_wifi_cb.

00039bc4 <__FUNCTION__.17978>:
   39bc4:	326d 5f6d 6977 6966 695f 696e 0074 0000     m2m_wifi_init...

00039bd4 <__FUNCTION__.18009>:
   39bd4:	326d 5f6d 6977 6966 635f 6e6f 656e 7463     m2m_wifi_connect
   39be4:	735f 0063 4128 5050 2829 5245 2952 255b     _sc.(APP)(ERR)[%
   39bf4:	5d73 255b 5d64 0000 7542 2073 7265 6f72     s][%d]..Bus erro
   39c04:	2072 3528 2e29 6425 2520 786c 000a 0000     r (5).%d %lx....
   39c14:	000d 0000 6146 6c69 6465 7420 206f 6177     ....Failed to wa
   39c24:	756b 2070 6874 2065 6863 7069 000a 0000     kup the chip....
   39c34:	4128 5050 2829 4e49 4f46 0029 7244 7669     (APP)(INFO).Driv
   39c44:	7265 6556 4972 666e 3a6f 3020 2578 3830     erVerInfo: 0x%08
   39c54:	786c 000a 6166 6c69 6465 7420 206f 6564     lx..failed to de
   39c64:	692d 696e 6974 6c61 7a69 0a65 0000 0000     -initialize.....

00039c74 <__FUNCTION__.17806>:
   39c74:	6863 7069 775f 6b61 0065 0000               chip_wake...

00039c80 <__FUNCTION__.17855>:
   39c80:	6863 7069 645f 6965 696e 0074 4128 5050     chip_deinit.(APP
   39c90:	2829 5245 2952 255b 5d73 255b 5d64 0000     )(ERR)[%s][%d]..
   39ca0:	6e5b 696d 7320 6174 7472 3a5d 6620 6961     [nmi start]: fai
   39cb0:	206c 6e69 7469 6220 7375 000a 000d 0000     l init bus......
   39cc0:	4128 5050 2829 4e49 4f46 0029 6843 7069     (APP)(INFO).Chip
   39cd0:	4920 2044 6c25 0a78 0000 0000 6166 6c69      ID %lx.....fail
   39ce0:	6465 7420 206f 6e65 6261 656c 6920 746e     ed to enable int
   39cf0:	7265 7572 7470 2e73 0a2e 0000 6e5b 696d     errupts.....[nmi
   39d00:	7320 6f74 5d70 203a 6863 7069 645f 6965      stop]: chip_dei
   39d10:	696e 2074 6166 6c69 000a 0000 6e5b 696d     nit fail....[nmi
   39d20:	7320 6f74 5d70 203a 5053 2049 6c66 7361      stop]: SPI flas
   39d30:	2068 6964 6173 6c62 2065 6166 6c69 000a     h disable fail..
   39d40:	6e5b 696d 7320 6f74 5d70 203a 6166 6c69     [nmi stop]: fail
   39d50:	6920 696e 2074 7562 0a73 0000                init bus...

00039d5c <__FUNCTION__.17853>:
   39d5c:	6d6e 645f 7672 695f 696e 0074               nm_drv_init.

00039d68 <__FUNCTION__.17860>:
   39d68:	6d6e 645f 7672 645f 6965 696e 0074 0000     nm_drv_deinit...

00039d78 <crc7_syndrome_table>:
   39d78:	0900 1b12 2d24 3f36 4148 535a 656c 777e     ....$-6?HAZSle~w
   39d88:	1019 020b 343d 262f 5851 4a43 7c75 6e67     ....=4/&QXCJu|gn
   39d98:	3b32 2920 1f16 0d04 737a 6168 575e 454c     2; )....zsha^WLE
   39da8:	222b 3039 060f 141d 6a63 7871 4e47 5c55     +"90....cjqxGNU\
   39db8:	6d64 7f76 4940 5b52 252c 373e 0108 131a     dmv.@IR[,%>7....
   39dc8:	747d 666f 5059 424b 3c35 2e27 1811 0a03     }tofYPKB5<'.....
   39dd8:	5f56 4d44 7b72 6960 171e 050c 333a 2128     V_DMr{`i....:3(!
   39de8:	464f 545d 626b 7079 0e07 1c15 2a23 3831     OF]Tkbyp....#*18
   39df8:	4841 5a53 6c65 7e77 0009 121b 242d 363f     AHSZelw~....-$?6
   39e08:	5158 434a 757c 676e 1910 0b02 3d34 2f26     XQJC|ung....4=&/
   39e18:	7a73 6861 5e57 4c45 323b 2029 161f 040d     szahW^EL;2) ....
   39e28:	636a 7178 474e 555c 2b22 3930 0f06 1d14     jcxqNG\U"+09....
   39e38:	2c25 3e37 0801 1a13 646d 767f 4049 525b     %,7>....md.vI@[R
   39e48:	353c 272e 1118 030a 7d74 6f66 5950 4b42     <5.'....t}foPYBK
   39e58:	1e17 0c05 3a33 2821 565f 444d 727b 6069     ....3:!(_VMD{ri`
   39e68:	070e 151c 232a 3138 4f46 5d54 6b62 7970     ....*#81FOT]bkpy
   39e78:	4128 5050 2829 5245 2952 255b 5d73 255b     (APP)(ERR)[%s][%
   39e88:	5d64 0000 6e5b 696d 7320 6970 3a5d 4620     d]..[nmi spi]: F
   39e98:	6961 656c 2064 6d63 2064 7277 7469 2c65     ailed cmd write,
   39ea8:	6220 7375 6520 7272 726f 2e2e 0a2e 0000      bus error......
   39eb8:	000d 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   39ec8:	6961 656c 2064 7562 2073 7265 6f72 2e72     ailed bus error.
   39ed8:	2e2e 000a 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   39ee8:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   39ef8:	736e 2065 6572 6461 202c 7825 2520 2078     nse read, %x %x 
   39f08:	7825 000a 6e5b 696d 7320 6970 3a5d 4620     %x..[nmi spi]: F
   39f18:	6961 656c 2064 6d63 2064 6572 7073 6e6f     ailed cmd respon
   39f28:	6573 7220 6165 2c64 6220 7375 6520 7272     se read, bus err
   39f38:	726f 2e2e 0a2e 0000 6e5b 696d 7320 6970     or......[nmi spi
   39f48:	3a5d 7320 6970 6220 6675 6566 2072 6973     ]: spi buffer si
   39f58:	657a 7420 6f6f 7320 616d 6c6c 2820 6425     ze too small (%d
   39f68:	2029 2528 2964 000a 6e5b 696d 7320 6970     ) (%d)..[nmi spi
   39f78:	3a5d 4620 6961 656c 2064 6d63 2064 6572     ]: Failed cmd re
   39f88:	7073 6e6f 6573 202c 6d63 2064 2528 3230     sponse, cmd (%02
   39f98:	2978 202c 6572 7073 2820 3025 7832 0a29     x), resp (%02x).
   39fa8:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   39fb8:	6961 656c 2064 6d63 2064 7473 7461 2065     ailed cmd state 
   39fc8:	6572 7073 6e6f 6573 7320 6174 6574 2820     response state (
   39fd8:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   39fe8:	3a5d 4520 7272 726f 202c 6164 6174 7220     ]: Error, data r
   39ff8:	6165 2064 6572 7073 6e6f 6573 2820 3025     ead response (%0
   3a008:	7832 0a29 0000 0000 6e5b 696d 7320 6970     2x).....[nmi spi
   3a018:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   3a028:	206e 6877 6e65 7220 6165 6964 676e 6420     n when reading d
   3a038:	7461 2e61 000a 0000 6e5b 696d 7320 6970     ata.....[nmi spi
   3a048:	3a5d 6220 6675 6566 2072 766f 7265 7572     ]: buffer overru
   3a058:	206e 6877 6e65 7220 6165 6964 676e 6320     n when reading c
   3a068:	6372 0a2e 0000 0000 6e5b 696d 7320 6970     rc......[nmi spi
   3a078:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   3a088:	6f6c 6b63 7220 6165 2c64 6220 7375 6520     lock read, bus e
   3a098:	7272 726f 2e2e 0a2e 0000 0000 6e5b 696d     rror........[nmi
   3a0a8:	7320 6970 3a5d 4620 6961 656c 2064 6164      spi]: Failed da
   3a0b8:	6174 6220 6f6c 6b63 6320 6372 7220 6165     ta block crc rea
   3a0c8:	2c64 6220 7375 6520 7272 726f 2e2e 0a2e     d, bus error....
   3a0d8:	0000 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3a0e8:	6961 656c 2064 6164 6174 7220 7365 6f70     ailed data respo
   3a0f8:	736e 2065 6572 6461 202c 7562 2073 7265     nse read, bus er
   3a108:	6f72 2e72 2e2e 000a 6e5b 696d 7320 6970     ror.....[nmi spi
   3a118:	3a5d 4620 6961 656c 2064 6164 6174 7220     ]: Failed data r
   3a128:	7365 6f70 736e 2065 6572 6461 2e2e 282e     esponse read...(
   3a138:	3025 7832 0a29 0000 6e5b 696d 7320 6970     %02x)...[nmi spi
   3a148:	3a5d 4620 6961 656c 2064 6164 6174 6220     ]: Failed data b
   3a158:	6f6c 6b63 6320 646d 7720 6972 6574 202c     lock cmd write, 
   3a168:	7562 2073 7265 6f72 2e72 2e2e 000a 0000     bus error.......
   3a178:	6e5b 696d 7320 6970 3a5d 4620 6961 656c     [nmi spi]: Faile
   3a188:	2064 6164 6174 6220 6f6c 6b63 7720 6972     d data block wri
   3a198:	6574 202c 7562 2073 7265 6f72 2e72 2e2e     te, bus error...
   3a1a8:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3a1b8:	6961 656c 2064 6164 6174 6220 6f6c 6b63     ailed data block
   3a1c8:	6320 6372 7720 6972 6574 202c 7562 2073      crc write, bus 
   3a1d8:	7265 6f72 2e72 2e2e 000a 0000 6e5b 696d     error.......[nmi
   3a1e8:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   3a1f8:	2c64 7720 6972 6574 7220 6765 2820 3025     d, write reg (%0
   3a208:	7838 2e29 2e2e 000a 6552 6573 2074 6e61     8x).....Reset an
   3a218:	2064 6572 7274 2079 6425 2520 786c 2520     d retry %d %lx %
   3a228:	786c 000a 6e5b 696d 7320 6970 3a5d 4620     lx..[nmi spi]: F
   3a238:	6961 656c 2064 6d63 2c64 7720 6972 6574     ailed cmd, write
   3a248:	6220 6f6c 6b63 2820 3025 7838 2e29 2e2e      block (%08x)...
   3a258:	000a 0000 6e5b 696d 7320 6970 3a5d 4620     ....[nmi spi]: F
   3a268:	6961 656c 2064 6c62 636f 206b 6164 6174     ailed block data
   3a278:	7720 6972 6574 2e2e 0a2e 0000 6552 6573      write......Rese
   3a288:	2074 6e61 2064 6572 7274 2079 6425 2520     t and retry %d %
   3a298:	786c 2520 0a64 0000 6e5b 696d 7320 6970     lx %d...[nmi spi
   3a2a8:	3a5d 4620 6961 656c 2064 6d63 2c64 7220     ]: Failed cmd, r
   3a2b8:	6165 2064 6572 2067 2528 3830 2978 2e2e     ead reg (%08x)..
   3a2c8:	0a2e 0000 6552 6573 2074 6e61 2064 6572     ....Reset and re
   3a2d8:	7274 2079 6425 2520 786c 000a 6e5b 696d     try %d %lx..[nmi
   3a2e8:	7320 6970 3a5d 4620 6961 656c 2064 6d63      spi]: Failed cm
   3a2f8:	2c64 7220 6165 2064 6c62 636f 206b 2528     d, read block (%
   3a308:	3830 2978 2e2e 0a2e 0000 0000 6e5b 696d     08x)........[nmi
   3a318:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   3a328:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   3a338:	636f 6c6f 7720 7469 2068 5243 2043 6e6f     ocol with CRC on
   3a348:	202c 6572 7974 6972 676e 7720 7469 2068     , retyring with 
   3a358:	5243 2043 666f 2e66 2e2e 000a 6e5b 696d     CRC off.....[nmi
   3a368:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   3a378:	6574 6e72 6c61 7220 6165 2064 7270 746f     ternal read prot
   3a388:	636f 6c6f 2e2e 0a2e 0000 0000 6e5b 696d     ocol........[nmi
   3a398:	7320 6970 3a5d 4620 6961 656c 2064 6e69      spi]: Failed in
   3a3a8:	6574 6e72 6c61 7720 6972 6574 7020 6f72     ternal write pro
   3a3b8:	6f74 6f63 206c 6572 2e67 2e2e 000a 0000     tocol reg.......
   3a3c8:	6e5b 696d 7320 6970 3a5d 4620 6961 206c     [nmi spi]: Fail 
   3a3d8:	6d63 2064 6572 6461 6320 6968 2070 6469     cmd read chip id
   3a3e8:	2e2e 0a2e 0000 0000 43e0 0002 43e0 0002     .........C...C..
   3a3f8:	4470 0002 4334 0002 437a 0002 439c 0002     pD..4C..zC...C..
   3a408:	4422 0002 4422 0002 44dc 0002 4308 0002     "D.."D...D...C..
   3a418:	4536 0002 4536 0002 4536 0002 4536 0002     6E..6E..6E..6E..
   3a428:	43be 0002 4940 0002 4940 0002 49c8 0002     .C..@I..@I...I..
   3a438:	48a4 0002 48e6 0002 4904 0002 497e 0002     .H...H...I..~I..
   3a448:	497e 0002 4a2a 0002 487c 0002 4a7a 0002     ~I..*J..|H..zJ..
   3a458:	4a7a 0002 4a7a 0002 4a7a 0002 4922 0002     zJ..zJ..zJ.."I..

0003a468 <__FUNCTION__.17128>:
   3a468:	7073 5f69 6d63 0064                         spi_cmd.

0003a470 <__FUNCTION__.17135>:
   3a470:	7073 5f69 6164 6174 725f 7073 0000 0000     spi_data_rsp....

0003a480 <__FUNCTION__.17144>:
   3a480:	7073 5f69 6d63 5f64 7372 0070               spi_cmd_rsp.

0003a48c <__FUNCTION__.17177>:
   3a48c:	7073 5f69 6d63 5f64 6f63 706d 656c 6574     spi_cmd_complete
   3a49c:	0000 0000                                   ....

0003a4a0 <__FUNCTION__.17223>:
   3a4a0:	7073 5f69 6164 6174 775f 6972 6574 0000     spi_data_write..

0003a4b0 <__FUNCTION__.17235>:
   3a4b0:	7073 5f69 7277 7469 5f65 6572 0067 0000     spi_write_reg...

0003a4c0 <__FUNCTION__.17246>:
   3a4c0:	6d6e 735f 6970 775f 6972 6574 0000 0000     nm_spi_write....

0003a4d0 <__FUNCTION__.17258>:
   3a4d0:	7073 5f69 6572 6461 725f 6765 0000 0000     spi_read_reg....

0003a4e0 <__FUNCTION__.17269>:
   3a4e0:	6d6e 735f 6970 725f 6165 0064               nm_spi_read.

0003a4ec <__FUNCTION__.17290>:
   3a4ec:	6d6e 735f 6970 695f 696e 0074 4128 5050     nm_spi_init.(APP
   3a4fc:	2829 4e49 4f46 0029 4528 5252 2952 7543     )(INFO).(ERRR)Cu
   3a50c:	7272 6e65 2074 253c 3e64 000a 000d 0000     rrent <%d>......
   3a51c:	6f53 6b63 7465 2520 2064 6573 7373 6f69     Socket %d sessio
   3a52c:	206e 4449 3d20 2520 0d64 000a 6f53 6b63     n ID = %d...Sock
   3a53c:	7420 206f 6564 656c 6574 3c20 6425 0a3e      to delete <%d>.
   3a54c:	0000 0000 4128 5050 2829 5245 2952 255b     ....(APP)(ERR)[%
   3a55c:	5d73 255b 5d64 0000 4e53 2049 7845 6563     s][%d]..SNI Exce
   3a56c:	6465 2073 614d 2078 654c 676e 6874 000a     eds Max Length..
   3a57c:	6e55 6e6b 776f 206e 5353 204c 6f53 6b63     Unknown SSL Sock
   3a58c:	7465 4f20 7470 6f69 206e 6425 000a 0000     et Option %d....
   3a59c:	6f4e 2074 5353 204c 6f53 6b63 7465 000a     Not SSL Socket..
   3a5ac:	5322 2f44 4d4d 2043 6143 6472 5320 6f6c     "SD/MMC Card Slo
   3a5bc:	2074 2230 0000 0000                         t 0"....

0003a5c4 <lun_desc>:
   3a5c4:	003d 0002 0095 0002 00e1 0002 012d 0002     =...........-...
   3a5d4:	015d 0002 01e1 0002 0271 0002 a5ac 0003     ].......q.......
   3a5e4:	0800 4200 0c00 4200 1000 4200 1400 4200     ...B...B...B...B
   3a5f4:	1800 4200 1c00 4200 0a09 0c0b 0e0d 0000     ...B...B........
   3a604:	a35e 0002 a3d8 0002 a3d8 0002 a37c 0002     ^...........|...
   3a614:	a376 0002 a382 0002 a364 0002 a388 0002     v.......d.......
   3a624:	a3be 0002 a5c0 0002 a610 0002 a610 0002     ................
   3a634:	a60c 0002 a5b2 0002 a5d2 0002 a5a2 0002     ................
   3a644:	a5e4 0002 a5f6 0002 a65e 0002 a68c 0002     ........^.......
   3a654:	a68c 0002 a688 0002 a658 0002 a664 0002     ........X...d...
   3a664:	a652 0002 a66a 0002 a670 0002               R...j...p...

0003a670 <tcc_modules>:
   3a670:	2000 4200 2400 4200 2800 4200               . .B.$.B.(.B

0003a67c <_tcc_gclk_ids>:
   3a67c:	1a1a 001b                                   ....

0003a680 <_tcc_apbcmasks>:
   3a680:	0100 0000 0200 0000 0400 0000               ............

0003a68c <_tcc_maxs>:
   3a68c:	ffff 00ff ffff 00ff ffff 0000               ............

0003a698 <_tcc_cc_nums>:
   3a698:	0204 0002                                   ....

0003a69c <_tcc_ow_nums>:
   3a69c:	0408 0002                                   ....

0003a6a0 <_tcc_intflag>:
   3a6a0:	0001 0000 0002 0000 0004 0000 0008 0000     ................
   3a6b0:	1000 0000 2000 0000 4000 0000 8000 0000     ..... ...@......
   3a6c0:	0000 0001 0000 0002 0000 0004 0000 0008     ................

0003a6d0 <LfnOfs>:
   3a6d0:	0301 0705 0e09 1210 1614 1c18 001e 0000     ................
   3a6e0:	2a22 3c3a 3f3e 7f7c 0000 0000 2c2b 3d3b     "*:<>?|.....+,;=
   3a6f0:	5d5b 0000 feeb 4d90 4453 534f 2e35 0030     [].....MSDOS5.0.
   3a700:	4f4e 4e20 4d41 2045 2020 4620 5441 3233     NO NAME    FAT32
   3a710:	2020 0020 4f4e 4e20 4d41 2045 2020 4620        .NO NAME    F
   3a720:	5441 2020 2020 0020                         AT     .

0003a728 <excvt.4558>:
   3a728:	9a80 b690 b78e 808f d3d2 d8d4 ded7 8f8e     ................
   3a738:	9290 e292 e399 ebea 9959 9d9a 9d9c 9f9e     ........Y.......
   3a748:	d6b5 e9e0 a5a5 a7a6 a9a8 abaa 21ac afae     .............!..
   3a758:	b1b0 b3b2 b5b4 b7b6 b9b8 bbba bdbc bfbe     ................
   3a768:	c1c0 c3c2 c5c4 c7c7 c9c8 cbca cdcc cfce     ................
   3a778:	d1d0 d3d2 d5d4 d7d6 d9d8 dbda dddc dfde     ................
   3a788:	e1e0 e3e2 e5e5 e7e6 e9e7 ebea eded efee     ................
   3a798:	f1f0 f3f2 f5f4 f7f6 f9f8 fbfa fdfc fffe     ................

0003a7a8 <Tbl>:
   3a7a8:	00c7 00fc 00e9 00e2 00e4 00e0 00e5 00e7     ................
   3a7b8:	00ea 00eb 00e8 00ef 00ee 00ec 00c4 00c5     ................
   3a7c8:	00c9 00e6 00c6 00f4 00f6 00f2 00fb 00f9     ................
   3a7d8:	00ff 00d6 00dc 00f8 00a3 00d8 00d7 0192     ................
   3a7e8:	00e1 00ed 00f3 00fa 00f1 00d1 00aa 00ba     ................
   3a7f8:	00bf 00ae 00ac 00bd 00bc 00a1 00ab 00bb     ................
   3a808:	2591 2592 2593 2502 2524 00c1 00c2 00c0     .%.%.%.%$%......
   3a818:	00a9 2563 2551 2557 255d 00a2 00a5 2510     ..c%Q%W%]%.....%
   3a828:	2514 2534 252c 251c 2500 253c 00e3 00c3     .%4%,%.%.%<%....
   3a838:	255a 2554 2569 2566 2560 2550 256c 00a4     Z%T%i%f%`%P%l%..
   3a848:	00f0 00d0 00ca 00cb 00c8 0131 00cd 00ce     ..........1.....
   3a858:	00cf 2518 250c 2588 2584 00a6 00cc 2580     ...%.%.%.%.....%
   3a868:	00d3 00df 00d4 00d2 00f5 00d5 00b5 00fe     ................
   3a878:	00de 00da 00db 00d9 00fd 00dd 00af 00b4     ................
   3a888:	00ad 00b1 2017 00be 00b6 00a7 00f7 00b8     ..... ..........
   3a898:	00b0 00a8 00b7 00b9 00b3 00b2 25a0 00a0     .............%..

0003a8a8 <tbl_lower.4308>:
   3a8a8:	0061 0062 0063 0064 0065 0066 0067 0068     a.b.c.d.e.f.g.h.
   3a8b8:	0069 006a 006b 006c 006d 006e 006f 0070     i.j.k.l.m.n.o.p.
   3a8c8:	0071 0072 0073 0074 0075 0076 0077 0078     q.r.s.t.u.v.w.x.
   3a8d8:	0079 007a 00a1 00a2 00a3 00a5 00ac 00af     y.z.............
   3a8e8:	00e0 00e1 00e2 00e3 00e4 00e5 00e6 00e7     ................
   3a8f8:	00e8 00e9 00ea 00eb 00ec 00ed 00ee 00ef     ................
   3a908:	00f0 00f1 00f2 00f3 00f4 00f5 00f6 00f8     ................
   3a918:	00f9 00fa 00fb 00fc 00fd 00fe 00ff 0101     ................
   3a928:	0103 0105 0107 0109 010b 010d 010f 0111     ................
   3a938:	0113 0115 0117 0119 011b 011d 011f 0121     ..............!.
   3a948:	0123 0125 0127 0129 012b 012d 012f 0131     #.%.'.).+.-./.1.
   3a958:	0133 0135 0137 013a 013c 013e 0140 0142     3.5.7.:.<.>.@.B.
   3a968:	0144 0146 0148 014b 014d 014f 0151 0153     D.F.H.K.M.O.Q.S.
   3a978:	0155 0157 0159 015b 015d 015f 0161 0163     U.W.Y.[.]._.a.c.
   3a988:	0165 0167 0169 016b 016d 016f 0171 0173     e.g.i.k.m.o.q.s.
   3a998:	0175 0177 017a 017c 017e 0192 03b1 03b2     u.w.z.|.~.......
   3a9a8:	03b3 03b4 03b5 03b6 03b7 03b8 03b9 03ba     ................
   3a9b8:	03bb 03bc 03bd 03be 03bf 03c0 03c1 03c3     ................
   3a9c8:	03c4 03c5 03c6 03c7 03c8 03c9 03ca 0430     ..............0.
   3a9d8:	0431 0432 0433 0434 0435 0436 0437 0438     1.2.3.4.5.6.7.8.
   3a9e8:	0439 043a 043b 043c 043d 043e 043f 0440     9.:.;.<.=.>.?.@.
   3a9f8:	0441 0442 0443 0444 0445 0446 0447 0448     A.B.C.D.E.F.G.H.
   3aa08:	0449 044a 044b 044c 044d 044e 044f 0451     I.J.K.L.M.N.O.Q.
   3aa18:	0452 0453 0454 0455 0456 0457 0458 0459     R.S.T.U.V.W.X.Y.
   3aa28:	045a 045b 045c 045e 045f 2170 2171 2172     Z.[.\.^._.p!q!r!
   3aa38:	2173 2174 2175 2176 2177 2178 2179 217a     s!t!u!v!w!x!y!z!
   3aa48:	217b 217c 217d 217e 217f ff41 ff42 ff43     {!|!}!~!.!A.B.C.
   3aa58:	ff44 ff45 ff46 ff47 ff48 ff49 ff4a ff4b     D.E.F.G.H.I.J.K.
   3aa68:	ff4c ff4d ff4e ff4f ff50 ff51 ff52 ff53     L.M.N.O.P.Q.R.S.
   3aa78:	ff54 ff55 ff56 ff57 ff58 ff59 ff5a 0000     T.U.V.W.X.Y.Z...

0003aa88 <tbl_upper.4309>:
   3aa88:	0041 0042 0043 0044 0045 0046 0047 0048     A.B.C.D.E.F.G.H.
   3aa98:	0049 004a 004b 004c 004d 004e 004f 0050     I.J.K.L.M.N.O.P.
   3aaa8:	0051 0052 0053 0054 0055 0056 0057 0058     Q.R.S.T.U.V.W.X.
   3aab8:	0059 005a 0021 ffe0 ffe1 ffe5 ffe2 ffe3     Y.Z.!...........
   3aac8:	00c0 00c1 00c2 00c3 00c4 00c5 00c6 00c7     ................
   3aad8:	00c8 00c9 00ca 00cb 00cc 00cd 00ce 00cf     ................
   3aae8:	00d0 00d1 00d2 00d3 00d4 00d5 00d6 00d8     ................
   3aaf8:	00d9 00da 00db 00dc 00dd 00de 0178 0100     ............x...
   3ab08:	0102 0104 0106 0108 010a 010c 010e 0110     ................
   3ab18:	0112 0114 0116 0118 011a 011c 011e 0120     .............. .
   3ab28:	0122 0124 0126 0128 012a 012c 012e 0130     ".$.&.(.*.,...0.
   3ab38:	0132 0134 0136 0139 013b 013d 013f 0141     2.4.6.9.;.=.?.A.
   3ab48:	0143 0145 0147 014a 014c 014e 0150 0152     C.E.G.J.L.N.P.R.
   3ab58:	0154 0156 0158 015a 015c 015e 0160 0162     T.V.X.Z.\.^.`.b.
   3ab68:	0164 0166 0168 016a 016c 016e 0170 0172     d.f.h.j.l.n.p.r.
   3ab78:	0174 0176 0179 017b 017d 0191 0391 0392     t.v.y.{.}.......
   3ab88:	0393 0394 0395 0396 0397 0398 0399 039a     ................
   3ab98:	039b 039c 039d 039e 039f 03a0 03a1 03a3     ................
   3aba8:	03a4 03a5 03a6 03a7 03a8 03a9 03aa 0410     ................
   3abb8:	0411 0412 0413 0414 0415 0416 0417 0418     ................
   3abc8:	0419 041a 041b 041c 041d 041e 041f 0420     .............. .
   3abd8:	0421 0422 0423 0424 0425 0426 0427 0428     !.".#.$.%.&.'.(.
   3abe8:	0429 042a 042b 042c 042d 042e 042f 0401     ).*.+.,.-.../...
   3abf8:	0402 0403 0404 0405 0406 0407 0408 0409     ................
   3ac08:	040a 040b 040c 040e 040f 2160 2161 2162     ..........`!a!b!
   3ac18:	2163 2164 2165 2166 2167 2168 2169 216a     c!d!e!f!g!h!i!j!
   3ac28:	216b 216c 216d 216e 216f ff21 ff22 ff23     k!l!m!n!o!!.".#.
   3ac38:	ff24 ff25 ff26 ff27 ff28 ff29 ff2a ff2b     $.%.&.'.(.).*.+.
   3ac48:	ff2c ff2d ff2e ff2f ff30 ff31 ff32 ff33     ,.-.../.0.1.2.3.
   3ac58:	ff34 ff35 ff36 ff37 ff38 ff39 ff3a 0000     4.5.6.7.8.9.:...
   3ac68:	f9ca 0002 f9ca 0002 f9ca 0002 f858 0002     ............X...
   3ac78:	f9ca 0002 f942 0002 f9ca 0002 f9ca 0002     ....B...........
   3ac88:	f9ca 0002 f9ca 0002 f9ca 0002 f9ca 0002     ................
   3ac98:	f9ca 0002 f9bc 0002 514d 4354 0000 0000     ........MQTC....
   3aca8:	0004 0000 0000 0000 0000 0000 0000 0000     ................
   3acb8:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   3acf8:	514d 4354 0000 0000 0004 0000 0000 0000     MQTC............
	...
   3ad10:	003c 0001 514d 5754 0000 0000 0000 0000     <...MQTW........
	...
   3ad50:	514d 5454 0000 0000 514d 7349 7064 0000     MQTT....MQIsdp..
   3ad60:	7461 656d 2f6c 2e31 2e30 0032 7468 7074     atmel/1.0.2.http
   3ad70:	2f3a 002f 7468 7074 3a73 2f2f 0000 0000     ://.https://....
   3ad80:	4547 2054 0000 0000 4f50 5453 0020 0000     GET ....POST ...
   3ad90:	4544 454c 4554 0020 5550 2054 0000 0000     DELETE .PUT ....
   3ada0:	504f 4954 4e4f 2053 0000 0000 4548 4441     OPTIONS ....HEAD
   3adb0:	0020 0000 4820 5454 2f50 2e31 0d31 000a      ... HTTP/1.1...
   3adc0:	7355 7265 412d 6567 746e 203a 0000 0000     User-Agent: ....
   3add0:	0a0d 0000 6f48 7473 203a 0000 6f43 6e6e     ....Host: ..Conn
   3ade0:	6365 6974 6e6f 203a 654b 7065 412d 696c     ection: Keep-Ali
   3adf0:	6576 0a0d 0000 0000 6341 6563 7470 452d     ve......Accept-E
   3ae00:	636e 646f 6e69 3a67 0d20 000a 6341 6563     ncoding: ...Acce
   3ae10:	7470 432d 6168 7372 7465 203a 7475 2d66     pt-Charset: utf-
   3ae20:	0d38 000a 7254 6e61 6673 7265 452d 636e     8...Transfer-Enc
   3ae30:	646f 6e69 3a67 6320 7568 6b6e 6465 0a0d     oding: chunked..
   3ae40:	0000 0000 7525 0000 6f43 746e 6e65 2d74     ....%u..Content-
   3ae50:	654c 676e 6874 203a 0000 0000 3130 3332     Length: ....0123
   3ae60:	3534 3736 3938 6261 6463 6665 7254 6e61     456789abcdefTran
   3ae70:	6673 7265 452d 636e 646f 6e69 3a67 0020     sfer-Encoding: .
   3ae80:	6f43 6e6e 6365 6974 6e6f 203a 0000 0000     Connection: ....
   3ae90:	5448 5054 002f 0000 0d31 0000 1abe 0003     HTTP/...1.......
   3aea0:	1ab8 0003 1ab2 0003 1aac 0003 1ac4 0003     ................
   3aeb0:	1aa6 0003 1ac4 0003 1aa0 0003 1a9a 0003     ................
   3aec0:	1ac4 0003 1a94 0003 1a94 0003 1a8e 0003     ................
   3aed0:	1a88 0003 1a82 0003 2000 4200 2400 4200     ......... .B.$.B
   3aee0:	2800 4200 0a0d 0a0d 2d2d 2d2d 452d 4553     .(.B....-----ESE
   3aef0:	3135 2036 614d 6e69 5020 6f72 7267 6d61     516 Main Program
   3af00:	2d2d 2d2d 0d2d 000a 0a0d 0a0d 6e49 7469     -----.......Init
   3af10:	6169 696c 657a 4820 2e57 2e2e 0a0d 0000     ialize HW.......
   3af20:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   3af30:	676e 4920 4332 4420 6972 6576 2172 0a0d     ng I2C Driver!..
   3af40:	0000 0000 6e49 7469 6169 696c 657a 2064     ....Initialized 
   3af50:	3249 2043 7244 7669 7265 0d21 000a 0000     I2C Driver!.....
   3af60:	7245 6f72 2072 6e69 7469 6169 696c 697a     Error initializi
   3af70:	676e 5320 6565 6173 2177 0a0d 0000 0000     ng Seesaw!......
   3af80:	6e49 7469 6169 696c 657a 2064 6553 7365     Initialized Sees
   3af90:	7761 0d21 000a 0000 6143 6e6e 746f 6620     aw!.....Cannot f
   3afa0:	6e69 2064 4d49 2155 0a0d 0000 4d49 2055     ind IMU!....IMU 
   3afb0:	6f66 6e75 2164 0a0d 0000 0000 4d49 2055     found!......IMU 
   3afc0:	6e69 7469 6169 696c 657a 2164 0a0d 0000     initialized!....
   3afd0:	6f43 6c75 2064 6f6e 2074 6e69 7469 6169     Could not initia
   3afe0:	696c 657a 4920 554d 0a0d 0000 6548 7061     lize IMU....Heap
   3aff0:	6220 6665 726f 2065 7473 7261 6974 676e      before starting
   3b000:	7420 7361 736b 203a 6425 0a0d 0000 0000      tasks: %d......
   3b010:	4c43 5f49 4154 4b53 0000 0000 5245 3a52     CLI_TASK....ERR:
   3b020:	4320 494c 7420 7361 206b 6f63 6c75 2064      CLI task could 
   3b030:	6f6e 2074 6562 6920 696e 6974 6c61 7a69     not be initializ
   3b040:	6465 0d21 000a 0000 6548 7061 6120 7466     ed!.....Heap aft
   3b050:	7265 7320 6174 7472 6e69 2067 4c43 3a49     er starting CLI:
   3b060:	2520 0d64 000a 0000 4957 4946 545f 5341      %d.....WIFI_TAS
   3b070:	004b 0000 5245 3a52 5720 4649 2049 6174     K...ERR: WIFI ta
   3b080:	6b73 6320 756f 646c 6e20 746f 6220 2065     sk could not be 
   3b090:	6e69 7469 6169 696c 657a 2164 0a0d 0000     initialized!....
   3b0a0:	6548 7061 6120 7466 7265 7320 6174 7472     Heap after start
   3b0b0:	6e69 2067 4957 4946 203a 6425 0a0d 0000     ing WIFI: %d....
   3b0c0:	4955 5420 7361 006b 5245 3a52 5520 2049     UI Task.ERR: UI 
   3b0d0:	6174 6b73 6320 756f 646c 6e20 746f 6220     task could not b
   3b0e0:	2065 6e69 7469 6169 696c 657a 2164 0a0d     e initialized!..
   3b0f0:	0000 0000 6548 7061 6120 7466 7265 7320     ....Heap after s
   3b100:	6174 7472 6e69 2067 4955 5420 7361 3a6b     tarting UI Task:
   3b110:	2520 0d64 000a 0000 6f43 746e 6f72 206c      %d.....Control 
   3b120:	6154 6b73 0000 0000 5245 3a52 4320 6e6f     Task....ERR: Con
   3b130:	7274 6c6f 7420 7361 206b 6f63 6c75 2064     trol task could 
   3b140:	6f6e 2074 6562 6920 696e 6974 6c61 7a69     not be initializ
   3b150:	6465 0d21 000a 0000 6548 7061 6120 7466     ed!.....Heap aft
   3b160:	7265 7320 6174 7472 6e69 2067 6f43 746e     er starting Cont
   3b170:	6f72 206c 6154 6b73 203a 6425 0a0d 0000     rol Task: %d....
   3b180:	7245 6f72 2072 6e6f 6d20 6d65 726f 2079     Error on memory 
   3b190:	6c61 6f6c 6163 6974 6e6f 6f20 206e 5246     allocation on FR
   3b1a0:	4545 5452 534f 0d21 000a 0000 7245 6f72     EERTOS!.....Erro
   3b1b0:	2072 6e6f 7320 6174 6b63 6f20 6576 6672     r on stack overf
   3b1c0:	6f6c 2077 6e6f 4620 4552 5245 4f54 2153     low on FREERTOS!
   3b1d0:	0a0d 0000 3cc0 0003 3c10 0003 3c10 0003     .....<...<...<..
   3b1e0:	3c0e 0003 3cb2 0003 3cb2 0003 3ca8 0003     .<...<...<...<..
   3b1f0:	3c0e 0003 3cb2 0003 3ca8 0003 3cb2 0003     .<...<...<...<..
   3b200:	3c0e 0003 3cb8 0003 3cb8 0003 3cb8 0003     .<...<...<...<..
   3b210:	3d48 0003 46cc 0003 46ae 0003 4668 0003     H=...F...F..hF..
   3b220:	4586 0003 4668 0003 46a0 0003 4668 0003     .E..hF...F..hF..
   3b230:	4586 0003 46ae 0003 46ae 0003 46a0 0003     .E...F...F...F..
   3b240:	4586 0003 457e 0003 457e 0003 457e 0003     .E..~E..~E..~E..
   3b250:	48e4 0003 4d2c 0003 4bec 0003 4bec 0003     .H..,M...K...K..
   3b260:	4be8 0003 4d04 0003 4d04 0003 4cf6 0003     .K...M...M...L..
   3b270:	4be8 0003 4d04 0003 4cf6 0003 4d04 0003     .K...M...L...M..
   3b280:	4be8 0003 4d0c 0003 4d0c 0003 4d0c 0003     .K...M...M...M..
   3b290:	4f10 0003                                   .O..

0003b294 <_global_impure_ptr>:
   3b294:	0134 2000                                   4.. 

0003b298 <__sf_fake_stderr>:
	...

0003b2b8 <__sf_fake_stdin>:
	...

0003b2d8 <__sf_fake_stdout>:
	...
   3b2f8:	0043 4f50 4953 0058 002e 2d23 2b30 0020     C.POSIX...#-0+ .
   3b308:	6c68 004c 6665 4567 4746 3000 3231 3433     hlL.efgEFG.01234
   3b318:	3635 3837 4139 4342 4544 0046 3130 3332     56789ABCDEF.0123
   3b328:	3534 3736 3938 6261 6463 6665 0000               456789abcdef.

0003b335 <_ctype_>:
   3b335:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   3b345:	2020 2020 2020 2020 2020 2020 2020 2020                     
   3b355:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   3b365:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   3b375:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   3b385:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   3b395:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   3b3a5:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   3b3b5:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

0003b438 <_init>:
   3b438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3b43a:	46c0      	nop			; (mov r8, r8)
   3b43c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3b43e:	bc08      	pop	{r3}
   3b440:	469e      	mov	lr, r3
   3b442:	4770      	bx	lr

0003b444 <__init_array_start>:
   3b444:	000120dd 	.word	0x000120dd

0003b448 <_fini>:
   3b448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3b44a:	46c0      	nop			; (mov r8, r8)
   3b44c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   3b44e:	bc08      	pop	{r3}
   3b450:	469e      	mov	lr, r3
   3b452:	4770      	bx	lr

0003b454 <__fini_array_start>:
   3b454:	000120b5 	.word	0x000120b5
